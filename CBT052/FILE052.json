{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011134000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 470288, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE052.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE052.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x08\\x0c'", "DS1TRBAL": "b'#\\x10'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00`\\x00\\x01\\x00`\\x00\\t\\x00\\t'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04`\\x00Q\\x01\\x180\\x8f\\x01\\x180\\x8f\\x11!\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf6@@@'", "ispf": {"version": "04.96", "flags": 0, "createdate": "2018-11-04T00:00:00", "modifydate": "2018-11-04T11:21:51", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-496"}, "text": "REGULAR CBT TAPE - VERSION 496    FILE:  052\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT496.FILE052\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 16 MEMBERS COUNTED; CUMULATIVE SIZE IS 4,036 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/04/18    11:21:51    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$README": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x002\\x01\\x02\\x12\\x9f\\x01\\x18$o\"D\\x00,\\x00,\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2002-05-09T00:00:00", "modifydate": "2018-09-03T22:44:32", "lines": 44, "newlines": 44, "modlines": 0, "user": "SBGOLOB"}, "text": "\n SHOWMVS  as ported to MVS38j\n\n Version: V38J.0000\n\n May 7, 2002 Jim Morrison\n   n9gtm@comcast.net\n\nChanges made to the original (very early) SHOWMVS code that\nGilbert Saint-Flour provided are mostly noted in changes.txt.\nI've loved SHOWMVS since I first heard about it.  It's nice to\nbe able to do something for SHOWMVS, especially using the original\nauthor's code.  SHOWMVS is available for more modern MVS-OS/390-z/OS\nversions at the CBTtape site: http://www.cbttape.org\n\nIt is my understanding that Roland Shiradin is currently the keeper\nof the SHOWMVS flame.  A hearty thanks to Gilbert, Roland, and everyone\nelse who's had their fingers in SHOWMVS over the ages.\n\nSince SHOWMVS requires an assembler higher than ASMF, I acquired the\nDignus ... (wait for it) ... HOBBYIST LICENSE Systems/ASM product.\nVery cool.  Eventually you'll be able to get info on the HOBBYIST\nLICENSE at http://www.dignus.com but for now, just call them at\n1-877-4DIGNUS.  Very reasonably priced, too.  BTW, they also offer\na Systems/C HOBBYIST LICENSE, which I plan to play with as soon as\nI get a few other things out of the way (also very reasonably priced).\n\nINSTALL NOTES\n\nLinkedit the supplied object deck (or create your own by whatever\ntechnique you wish).  I supply lkedshow.jcl, which also runs SHOWMVS\nafter it's linked.  You'll have to change the JCL a bit for such things\nas SYSLMOD dataset name, and perhaps a few other things.\n\nIf you assemble it yourself, note that I supply a few macros.  You'll\nneed to load those somewhere and point the assembler SYSLIB ddname at\nthem.  The macros I supply are all named *.mac.  You'll also need\nSYS1.AMACLIB and SYS1.AMODGEN in your SYSLIB concatenation.\n\nGood luck, and enjoy SHOWMVS!\n\nJim\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$CHANGES": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x02\\x12\\x9f\\x01\\x18$o\"E\\x00v\\x00v\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-05-09T00:00:00", "modifydate": "2018-09-03T22:45:00", "lines": 118, "newlines": 118, "modlines": 0, "user": "SBGOLOB"}, "text": "\n2002-05-07 A few notes from Jim Morrison n9gtm@comcast.net:\n\nFirst, thanks to Gilbert Saint-Flour for providing a very early\nversion of SHOWMVS, so it could be ported to MVS38j.  Gilbert also\nhad several good suggestions on how to get started.  Thanks Gilbert!\n\n\nChanges I've made to SHOWMVS (undoubtedly I've forgotten some):\n\n1) Ripped all the macros out of the source, created separate\n   members with shorter names\n\n BEGIN_PROC P$BEGIN\n END_PROC   P$END\n\n\n2) Renamed long symbols to shorter ones (more than once)\n\n3) $_ changed to QX in one of the macros (STRING?)\n\n4) *8 comments indicate lines removed for MVS38j\n   Notable exceptions are routines in which I discarded this\n   convention; such routines should have <38j> or something\n   similar at the end of their one-line description.  For\n   absolute certainty, I'd really recommend a comparison between\n   the source Gilbert provided, and mine; I might not always have\n   marked the things I changed.\n\n5) <38j> indicate lines inserted for MVS38j\n\n6) Removed ISPF stuff, use PUTLINE instead\n   Lines changed for this are not indicated, I got tired of marking changes.\n\n7) Removed RMODE stuff, MVS38j 24-bit only\n\n8) Used STRING v507, since the instructions it uses more closely match MVS38j\n\n\n>>>>>>>>>>> ISSUES\n\nIEFEB4UV used to find unit name (probably need to scan DEVNAMET\nmodule ourselves)\n\n\n\n>>>>>>>>>>> DATA AREAS notes:\n\nNG = Not Available in MVS38j\n\nAREA MACRO  FIELD   what      ROUTINE  butchery\n--------------------------------------------------------------------------------\n\nSMCA IEESMCA\n   SMCAIDTE  IPL date (NG)    IPLDATA  x'0000 000F'\n   SMCAITME  IPL time (NG)    IPLDATA  x'0000 0000'\n   SMCASJWT  job wait time    SMFDATA  SMCAJWT\n\nCVT CVT\n   CVTSNAME  system name for current system  SMFDATA  SMCASID\n   CVTTVT   TSO vector table   PRODUCTS disabled\n   CVTUCBSC  UCB scan routine   DEVICES  replaced with old method\n      (CVTILK2)\n   CVTLLTA   Linked list table (NG)   LINKLIST disabled\n   CVTMVSE   LPA list (NG)    LPALIST\n\nCDE IHACDE  CDATTRB.CDELPDE  CDE/LPDE flag (NG)    SORT  disabled\n   CDSP   module subpool    JPAQ  removed\n\nUCB IEFUCBOB UCBFL5.UCBSMS  SMS indicator, not avail in MVS38j\n   DEVICES  disabled\n\nLPDE IHALPDE  LPDEATTB  attr flags, not avail in MVS38j  LPACTIV\ndisabled\n   LPDEMJP   ptr to major LPDE, not avail MVS38j LPACTIV\n   <incomplete> disabled for now\n      (reserved field LPDEXLP in MVS38j)\n      As I recall, you have to scan for\n      the right name (?)\n\nARL IHAARL  *   (NG)     SCANTIOT disabled\n           <data areas> removed\n\nRB IHARB/IKJRB RBWLIC+3(1)  interrupt code (altho it's 2 bytes)\nTCB_TREE RBINTCOD(2)\n\nSDWA IHASDWA  VRAMAP=NO  operand not supported MVS38j\n<data areas> removed\n\n IARRCE     RSM CTL & ENUM AREA   <data areas> removed\n\n IHARD     ?     <data areas> removed\n\n IKJRB    LIST=NO   operand not supported MVS38j  <data areas> removed\n\n IKJTSVT     TSO VECTOR TABLE   <data areas> removed\n\n IHADFA     DFP area    <data areas> removed\n\n\n>>>>>>>>>>>> COMPLETELY DISABLED ROUTINES (hopefully temporary):\n\nSPLEVEL  CVT fields (DFA, OSLVL, etc.)\nSCANTIOT ARL (NG)\nCSVQUERY many problems, only called from SVCTABLE\n\n\n>>>>>>>>>>>> THINGS TO DO\n\nPAGEDS  LOCATE page dataset, code currently disabled\n  note: \"?\" commented out in PAGEDS routine\n\nSMFDATA  JWT\n\nDEVICES  convert UCBTYP to UNITNAME\n\nPRODUCTS\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$MEMORY": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x12\\x9f\\x01\\x02\\x12\\x9f\\x13\\x00\\x00\\x1a\\x00\\x1a\\x00\\x00\\xe2\\xc8\\xd6\\xe6\\xd4\\xf3\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-05-09T00:00:00", "modifydate": "2002-05-09T13:00:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "SHOWM38"}, "text": "         MACRO                                              $MEMORY\n        $MEMORY &MSG,&START,&END,&SIZE                      $MEMORY\n         L     R1,&START               START ADDRESS        $MEMORY\n         AIF   (T'&END EQ 'O').BB                           $MEMORY\n         L     R2,&END                 END ADDRESS          $MEMORY\n         LA    R0,0001                 ONE BYTE             $MEMORY\n         ALR   R0,R2                   END ADDRESS          $MEMORY\n         SLR   R0,R1                   SIZE IN BYTES        $MEMORY\n&FIN     SETC  '&END'\n.BB      AIF   (T'&SIZE EQ 'O').CC                          $MEMORY\n         L     R0,&SIZE                SIZE IN BYTES        $MEMORY\n         LR    R2,R0                   SIZE IN BYTES        $MEMORY\n         AR    R2,R1                   END ADDRESS          $MEMORY\n         BCTR  R2,0                    END ADDRESS          $MEMORY\n         ST    R2,DWD                  END ADDRESS          $MEMORY\n&FIN     SETC  'DWD'\n.CC      SRL   R0,010                  SIZE  IN \"K\"         $MEMORY\n         SRL   R1,010                  START IN \"K\"         $MEMORY\n         SRL   R2,010                  END   IN \"K\"         $MEMORY\n         STRING 4X,&MSG,                                               X\n               2X,(&START,,X),((R1),,R8B),'K',                         X\n               5X,(&FIN,4,X),((R2),,R7B),'K',                          X\n               ((R0),,R8B),'K',                                        X\n               INTO=LINE\n         LA    R10,NEXTLINE                                 $MEMORY\n         MEND                                               $MEMORY\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE052": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04`\\x00E\\x01\\x180\\x8f\\x01\\x180\\x8f\\x11!\\x00\\n\\x00\\n\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf6@@@'", "ispf": {"version": "04.96", "flags": 0, "createdate": "2018-11-04T00:00:00", "modifydate": "2018-11-04T11:21:45", "lines": 10, "newlines": 10, "modlines": 0, "user": "CBT-496"}, "text": "//***FILE 052 is from Jim Morrison, and contains a version of the   *   FILE 052\n//*           SHOWMVS program (the modern version is on File 492)   *   FILE 052\n//*           which runs on MVS 3.8 under Hercules.                 *   FILE 052\n//*                                                                 *   FILE 052\n//*           Normally, SHOWMVS uses ISPF services, but since ISPF  *   FILE 052\n//*           is not available under MVS 3.8, this version of       *   FILE 052\n//*           SHOWMVS is meant to run as a batch program.           *   FILE 052\n//*                                                                 *   FILE 052\n//*           email:  n9gtm@comcast.net                             *   FILE 052\n//*                                                                 *   FILE 052\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IHADQE": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x12\\x9f\\x01\\x02\\x12\\x9f\\x13\\x00\\x00\\x14\\x00\\x14\\x00\\x00\\xe2\\xc8\\xd6\\xe6\\xd4\\xf3\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-05-09T00:00:00", "modifydate": "2002-05-09T13:00:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "SHOWM38"}, "text": "         MACRO\n         IHADQE   &TYPE\n*\n*        RELEASE 1 AOS, 11/3/71, LEVEL=1\n*\n         AIF   ('&TYPE' EQ 'INTERNAL').EQU\nDQESECT  DSECT      DESCRIPTOR QUEUE ELEMENT\nDQFQEPTR DS    A    PTR TO FIRST FREE AREA\nDQEPTR   DS    A    PTR TO NEXT DQE OR ZERO\nDQEHRID  DS    0C   HIERARCHY IDENTIFIER\nDQEBLKAD DS    A    ADDR FIRST 2K BLOCK DESCRIBED BY THIS DQE\nDQELNTH  DS    F    LENGTH OF AREA DESCRIBED BY THIS DQE\n         MEXIT\n.EQU     ANOP\nDQFQEPTR EQU      0    PTR TO FIRST FREE AREA\nDQEPTR   EQU      4    PTR TO NEXT DQE OR ZERO\nDQEHRID  EQU      4   HIERARCHY IDENTIFIER\nDQEBLKAD EQU      8    ADDR FIRST 2K BLOCK DESCRIBED BY THIS DQE\nDQELNTH  EQU      12    LENGTH OF AREA DESCRIBED BY THIS DQE\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHAPCCA": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x12\\x9f\\x01\\x02\\x12\\x9f\\x13\\x00\\x01T\\x01T\\x00\\x00\\xe2\\xc8\\xd6\\xe6\\xd4\\xf3\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-05-09T00:00:00", "modifydate": "2002-05-09T13:00:00", "lines": 340, "newlines": 340, "modlines": 0, "user": "SHOWM38"}, "text": "         MACRO\n         IHAPCCA &DSECT=YES   */\n*\n*/* **************************************************************** */\n*/*                                                                  */\n*/*            PHYSICAL CONFIGURATION COMMUNICATION AREA             */\n*/*                                                                  */\n*/*  OS/VS2 SU64, 06/26/78, LEVEL=3                                  */\n*/*                                                                  */\n*/*  METHOD OF ACCESS                                                */\n*/*      BAL  - DSECT IS PRODUCED UNLESS DSECT=NO IS SPECIFIED.      */\n*/*             USING ON PCCA GIVES ADDRESSABILITY FOR ALL SYMBOLS.  */\n*/*      PL/S - DCL PCCAPTR PTR                                      */\n*/*                                                                  */\n*/* **************************************************************** */\n         SPACE 1\n         AIF   ('&DSECT' EQ 'NO').PCCA010\nPCCA     DSECT\n         AGO   .PCCA020\n.PCCA010 ANOP\n         DS    0D\nPCCA     EQU   *\n.PCCA020 ANOP\nPCCAPCCA DC    CL4'PCCA' -    CONTROL BLOCK ACRONYM IN EBCDIC\nPCCACPID DC    XL12'00' -     CPU ID (CONTAINS SERIAL NUMBER)\nPCCACPUA DC    H'0' -         PHYSICAL CPU ADDRESS\nPCCACAFM DC    H'0' -         BIT MASK CORRESPONDING TO PHYSICAL CPU\n*                             ADDRESS\nPCCATQEP DC    A(0) -         TQE POINTER\nPCCAPSAV DC    A(0) -         VIRTUAL ADDRESS OF PSA\nPCCAPSAR DC    A(0) -         REAL ADDRESS OF PSA\nPCCARV81 DS    A -            RESERVED                           MDC005\nPCCARV82 DS    A -            RESERVED                           MDC005\nPCCARV83 DS    A -            RESERVED                           MDC005\nPCCARV84 DS    A -            RESERVED                           MDC005\nPCCARV85 DS    A -            RESERVED                           MDC005\nPCCARV86 DS    A -            RESERVED                           MDC005\nPCCARV87 DS    A -            RESERVED                           MDC005\nPCCARV88 DS    A -            RESERVED                           MDC005\nPCCARV89 DS    A -            RESERVED                           MDC005\nPCCARV90 DS    A -            RESERVED                           MDC005\nPCCARV91 DS    A -            RESERVED                           MDC005\nPCCARV92 DS    A -            RESERVED                           MDC005\nPCCARV93 DS    A -            RESERVED                           MDC005\nPCCARV94 DS    A -            RESERVED                           MDC005\nPCCARV95 DS    A -            RESERVED                           MDC005\nPCCARV96 DS    A -            RESERVED                           MDC005\nPCCARV97 DS    A -            RESERVED                           MDC005\nPCCARV98 DS    A -            RESERVED                           MDC005\nPCCARV99 DS    A -            RESERVED                           MDC005\nPCCARV9A DS    A -            RESERVED                           MDC005\nPCCARV9B DS    A -            RESERVED                           MDC005\nPCCARV9C DS    A -            RESERVED                           MDC005\nPCCARV9D DS    A -            RESERVED                           MDC005\nPCCARV9E DS    A -            RESERVED                           MDC005\nPCCATMST DS    0BL4 -         TIMER STATUS BYTES\nPCCATMFL DC    XL1'00' -      FIRST BYTE OF PCCATMST\nPCCAINIT EQU   X'80' -        ENTRY HAS BEEN INITIALIZED\nPCCASYNC EQU   X'40' -        CLOCK OUT OF SYNCHRONIZATION\nPCCAVKIL EQU   X'20' -        VARY CPU SHOULD BE CANCELLED\nPCCAMCC  EQU   X'10' -        PROCESSING FOR PERMANENTLY DAMAGED CLOCK\n*                             COMPARATOR MUST BE DONE\nPCCAMINT EQU   X'08' -        PROCESSING FOR CPU TIMER MUST BE DONE\nPCCARV02 EQU   X'04',,C'X' -  RESERVED\nPCCARV03 EQU   X'02',,C'X' -  RESERVED\nPCCARV04 EQU   X'01',,C'X' -  RESERVED\nPCCATODE DC    XL1'00' -      TOD CLOCK ERROR FLAGS\nPCCANUTD EQU   X'80' -        CLOCK CANNOT BE USED\nPCCANFTD EQU   X'40' -        CLOCK SHOULD NOT BE RESET\nPCCACTTD EQU   X'3F' -        ERROR COUNT (6 BITS)\nPCCACCE  DC    XL1'00' -      FLAGS FOR CLOCK COMPARATOR\nPCCANUCC EQU   X'80' -        CLOCK COMPARATOR CANNOT BE USED\nPCCANFCC EQU   X'40' -        CLOCK COMPARATOR SHOULD NOT BE RESET\nPCCACTCC EQU   X'3F' -        ERROR COUNT (6 BITS)\nPCCAINTE DC    XL1'00' -      FLAGS FOR CPU TIMER\nPCCANUIN EQU   X'80' -        CPU TIMER CANNOT BE USED\nPCCANFIN EQU   X'40' -        CPU TIMER SHOULD NOT BE RESET\nPCCACTIN EQU   X'3F' -        ERROR COUNT (6 BITS)\nPCCARPB  DC    F'0' -         EXTERNAL CALL SIGP BUFFER\nPCCAEMSB DS    0CL16 -        EMERGENCY SIGNAL SIGP BUFFER\nPCCAEMSI DS    0BL4 -         FIRST WORD OF EMS BUFFER\nPCCARISP DC    XL1'00' -      CONTAINS PARALLEL/SERIAL REQUEST\n*                             INDICATOR FOR REMOTE IMMEDIATE SIGNAL\nPCCAPARL EQU   X'80' -        PARALLEL REQUEST                   MDC002\nPCCASERL EQU   X'40' -        SERIAL REQUEST                     MDC003\nPCCARV06 EQU   X'20',,C'X' -  RESERVED\nPCCARV07 EQU   X'10',,C'X' -  RESERVED\nPCCARV08 EQU   X'08',,C'X' -  RESERVED\nPCCARV09 EQU   X'04',,C'X' -  RESERVED\nPCCARV10 EQU   X'02',,C'X' -  RESERVED\nPCCARV11 EQU   X'01',,C'X' -  RESERVED\nPCCAEMS2 DC    XL1'00' -      SECOND BYTE OF PCCAEMSI\nPCCASERP EQU   X'80' -        SERIAL PENDING INDICATOR\n*                             (MDC325)                         @G64UP9A\nPCCARV13 EQU   X'40',,C'X' -  RESERVED\nPCCARV14 EQU   X'20',,C'X' -  RESERVED\nPCCARV15 EQU   X'10',,C'X' -  RESERVED\nPCCARV16 EQU   X'08',,C'X' -  RESERVED\nPCCARV17 EQU   X'04',,C'X' -  RESERVED\nPCCARV18 EQU   X'02',,C'X' -  RESERVED\nPCCARV19 EQU   X'01',,C'X' -  RESERVED\nPCCAEMS3 DC    XL1'00' -      THIRD BYTE OF PCCAEMSI\nPCCARV20 EQU   X'80',,C'X' -  RESERVED\nPCCARV21 EQU   X'40',,C'X' -  RESERVED\nPCCARV22 EQU   X'20',,C'X' -  RESERVED\nPCCARV23 EQU   X'10',,C'X' -  RESERVED\nPCCARV24 EQU   X'08',,C'X' -  RESERVED\nPCCARV25 EQU   X'04',,C'X' -  RESERVED\nPCCARV26 EQU   X'02',,C'X' -  RESERVED\nPCCARV27 EQU   X'01',,C'X' -  RESERVED\nPCCARMSB DC    XL1'00' -      CONTAINS RMS INDICATOR\nPCCARV28 EQU   X'80',,C'X' -  RESERVED\nPCCARV29 EQU   X'40',,C'X' -  RESERVED\nPCCARV30 EQU   X'20',,C'X' -  RESERVED\nPCCARV31 EQU   X'10',,C'X' -  RESERVED\nPCCARV32 EQU   X'08',,C'X' -  RESERVED\nPCCARV33 EQU   X'04',,C'X' -  RESERVED\nPCCARV34 EQU   X'02',,C'X' -  RESERVED\nPCCARMS  EQU   X'01' -        SIGP WAS ISSUED VIA RMS\nPCCAEMSP DC    A(0) -         REMOTE IMMEDIATE SIGNAL PARAMETER ADDRESS\nPCCAEMSE DC    A(0) -         REMOTE IMMEDIATE SIGNAL RECEIVING ROUTINE\n*                             ENTRY POINT ADDRESS\nPCCAEMSA DC    A(0) -         PCCA ADDRESS OF THE RECEIVING ROUTINE\nPCCAPWAV DC    A(0) -         VIRTUAL ADDRESS OF MCH PROCESSOR WORK\n*                             AREA\nPCCAPWAR DC    A(0) -         REAL ADDRESS OF MCH PROCESSOR WORK AREA\nPCCALRBV DC    A(0) -         VIRTUAL ADDRESS OF MCH LOGREC BUFFER\nPCCALRBR DC    A(0) -         REAL ADDRESS OF MCH LOGREC BUFFER\nPCCAELAD DC    A(0) -         VIRTUAL ADDRESS OF I/O EXTENDED LOGOUT\n*                             (IOEL) AREA  (MDC310)            @G51BP9A\nPCCAELBA DC    A(0) -         VIRTUAL ADDRESS OF CCH LOGOUT BUFFER\n*                             (MDC311)                         @G51BP9A\nPCCACCHM DC    A(0) -         VIRTUAL ADDRESS OF CCH MESSAGE BUFFER\n*                             (MDC312)                         @G51BP9A\nPCCASRB  DC    XL44'00' -     SRB FOR CCH TO SCHEDULE IECVIRST TO\n*                             PROCESS CHANNEL ERRORS  (MDC314) @G51BP9A\nPCCACHAN DC    XL1'00' -      FLAG BYTE FOR CCH-IOS CHANNEL RECOVERY\n*                             COMMUNICATION  (MDC315)          @G51BP9A\nPCCAIRST EQU   X'80' -        IECVIRST IS PROCESSING CHANNEL ERRORS\n*                             DETECTED DURING AN EXTERNAL MACHINE CHECK\n*                             (MDC316)                         @G51BP9A\nPCCAEXDM EQU   X'40' -        WHILE PCCAIRST BIT WAS SET, MORE CHANNEL\n*                             ERRORS WERE DETECTED WHILE PROCESSING\n*                             ANOTHER EXTERNAL DAMAGE MACHINE CHECK\n*                             (MDC317)                         @G51BP9A\nPCCAR107 EQU   X'20',,C'X' -  RESERVED                         @G51BP9A\nPCCAR108 EQU   X'10',,C'X' -  RESERVED                         @G51BP9A\nPCCAR109 EQU   X'08',,C'X' -  RESERVED                         @G51BP9A\nPCCAR110 EQU   X'04',,C'X' -  RESERVED                         @G51BP9A\nPCCAR111 EQU   X'02',,C'X' -  RESERVED                         @G51BP9A\nPCCAR112 EQU   X'01',,C'X' -  RESERVED                         @G51BP9A\nPCCASRBL DC    XL1'00' -      LOCK BYTE FOR COMMUNICATING CHANNEL\n*                             ERRORS BETWEEN CCH AND IOS\n*                             (MDC318)                         @G51BP9A\nPCCASRBA EQU   X'00' -        SRB IS AVAILABLE FOR SCHEDULING\n*                             (MDC319)                         @G51BP9A\nPCCASRBN EQU   X'FF' -        SRB IS NOT AVAILABLE FOR SCHEDULING\n*                             (MDC320)                         @G51BP9A\nPCCACCHI DC    H'0' -         CHANNEL SET ID FOR THE CHANNEL SET IN\n*                             ERROR  (MDC324)                  @G64AP9A\nPCCAR106 DC    52XL1'00' -    RESERVED  (MDC304)               @G51BP9A\n         DS    0D -           ALIGN PCCAWERP TO DOUBLEWORD\nPCCAWERP DS    0XL8 -         WORK ERPIB FOR CCH\nPCCACHUB DC    A(0) -         UCB ADDRESS OF THE DEVICE IN USE WHEN\n*                             THE CHANNEL-DETECTED ERROR OCCURRED.\n*                             THIS FIELD IS ZERO IF CCH HAS NOT\n*                             CREATED AN ERPIB FOR THE ERP'S.\nPCCACHPF DC    XL1'00' -      PROGRAM FLAGS.  INDICATES THE SELECTION\n*                             OR INTERRUPTION SEQUENCE WHEN THE CSW WAS\n*                             STORED.\nPCCACSIO EQU   X'80' -        THE CSW WAS STORED AFTER A START I/O\n*                             INSTRUCTION WAS EXECUTED.\nPCCACINT EQU   X'40' -        THE CSW WAS STORED AFTER AN I/O\n*                             INTERRUPTION\nPCCACTIO EQU   X'20' -        THE CSW WAS STORED AFTER A TEST I/O\n*                             INSTRUCTION WAS EXECUTED.\nPCCACHIO EQU   X'10' -        THE CSW WAS STORED AFTER A HALT I/O\n*                             INSTRUCTION WAS EXECUTED\nPCCARV37 EQU   X'08',,C'X' -  RESERVED\nPCCACSNS EQU   X'04' -        THE SENSE DATA WAS STORED\nPCCACCNT EQU   X'02' -        THE CSW COUNT IS VALID\nPCCACNOR EQU   X'01' -        NO RETRY IS TO BE ATTEMPTED UNDER ANY\n*                             CONDITIONS\nPCCACHBL DC    XL1'00' -      PROBABLE SOURCE OF ERROR\nPCCACCPU EQU   X'80' -        CPU ERROR\nPCCACCHA EQU   X'40' -        CHANNEL ERROR\nPCCACSCU EQU   X'20' -        STORAGE CONTROL UNIT ERROR\nPCCACSTG EQU   X'10' -        STORAGE ERROR\nPCCACCUE EQU   X'08' -        CONTROL UNIT ERROR\nPCCARV38 EQU   X'04',,C'X' -  RESERVED\nPCCARV39 EQU   X'02',,C'X' -  RESERVED\nPCCARV40 EQU   X'01',,C'X' -  RESERVED\nPCCACHVA DC    XL1'00' -      VALIDITY INDICATORS.  WHEN THE DESIGNATED\n*                             FIELD IS STORED BY THE CHANNEL WITH THE\n*                             CORRECT CONTENTS THE VALIDITY BIT IS ONE.\n*                             THE VALIDITY BIT FOR NON-STORED FIELDS\n*                             IS MEANINGLESS.\nPCCACITF EQU   X'80' -        INTERFACE ADDRESS IS VALID\nPCCARV41 EQU   X'40',,C'X' -  RESERVED\nPCCARV42 EQU   X'20',,C'X' -  RESERVED\nPCCACSQV EQU   X'10' -        SEQUENCE CODE IS VALID\nPCCACUNS EQU   X'08' -        UNIT STATUS IS VALID\nPCCACCMD EQU   X'04' -        COMMAND ADDRESS IS VALID.  THE CSW\n*                             CONTAINS A VALID COMMAND ADDRESS.\nPCCACCHV EQU   X'02' -        CHANNEL ADDRESS IS VALID\nPCCACDAV EQU   X'01' -        DEVICE ADDRESS IS VALID\nPCCACHTS DC    XL1'00' -      TERMINATION AND SEQUENCE (RETRY) CODES\nPCCACTEC EQU   X'C0' -        TWO-BIT TERMINATION CODE.  THIS CODE\n*                             SPECIFIES THE TERMINATION SIGNALS USED ON\n*                             THE I/O INTERFACE AFTER THE CHANNEL\n*                             DETECTED THE ERROR.  THIS FIELD HAS\n*                             MEANING ONLY WHEN ICC OR CCC IS INDICATED\n*                             IN THE CSW.  THE FOLLOWING 4 EQU'S ARE\n*                             THE VALUES FOR TERMINATION CODE.\nPCCACTC0 EQU   X'00' -        INTERFACE DISCONNECT\nPCCACTC1 EQU   X'40' -        STOP, STACK OR NORMAL TERMINATION\nPCCACTC2 EQU   X'80' -        SELECTIVE RESET\nPCCACTC3 EQU   X'C0' -        SYSTEM RESET\nPCCARV43 EQU   X'20',,C'X' -  RESERVED\nPCCARV44 EQU   X'10',,C'X' -  RESERVED\nPCCACDIN EQU   X'08' -        I/O ERROR ALERT\nPCCACSEQ EQU   X'07' -        THREE-BIT SEQUENCE CODE.  THESE CODES\n*                             HAVE CHANNEL-DEPENDENT MEANINGS.\nPCCACHS1 DC    XL1'00' -      CCH INTERNAL SWITCH 1\nPCCACCMP EQU   X'80' -        COMMAND REGISTER PARITY IS VALID\nPCCACNRE EQU   X'40' -        CCH WILL NOT CREATE A RECORD FOR THIS\n*                             ERROR                              MDC006\nPCCACFRR EQU   X'20' -        THE CCH FRR IS IN THE STACK        MDC007\nPCCACNLS EQU   X'10' -        CCH IS TO PERFORM THE RECORD FUNCTION\n*                             ONLY.  AN ERPIB IS NOT TO BE PLACED IN\n*                             THE EWA.\nPCCACAND EQU   X'08' -        ATTENTION HAS BEEN PRESENTED\nPCCACIBC EQU   X'04' -        AN ERPIB FOR THIS ERROR HAS ALREADY BEEN\n*                             CREATED\nPCCACUCB EQU   X'02' -        UCB INVALID BIT\nPCCARV47 EQU   X'01',,C'X' -  RESERVED\nPCCACHS2 DC    XL1'00' -      CCH INTERNAL SWITCH 2\nPCCACIOR EQU   X'80' -        I/O RESTART FUNCTION REQUIRED\nPCCACALT EQU   X'40' -        THE ALTERNATE RETURN TO IOS IS TO BE USED\nPCCACMOD EQU   X'20' -        NO MODULE IS AVAILABLE TO ANALYZE THE\n*                             CHANNEL LOGOUT\nPCCACNLG EQU   X'10' -        CCH DETECTED A FAILURE TO LOG OR FAILURE\n*                             TO STORE AN ECSW CONDITION\nPCCACURC EQU   X'08' -        THE STIDC FIELD OF THE CAT ENTRY IS\n*                             VALID BUT NOT THAT OF A SUPPORTED\n*                             CHANNEL                            MDC011\nPCCACCRA EQU   X'04' -        CHANNEL RECONFIGURATION HARDWARE ACTIVE\n*                             FOR THE CHANNEL  (MDC300)        @Y30CQ9A\nPCCARV50 EQU   X'02',,C'X' -  RESERVED\nPCCARV51 EQU   X'01',,C'X' -  RESERVED\nPCCACHRB DC    XL1'00' -      CCH RECORD BYTE\nPCCACSIB EQU   X'80' -        ERROR ON SIO\nPCCACINB EQU   X'40' -        ERROR ON INTERRUPT\nPCCACTIB EQU   X'20' -        ERROR ON TIO\nPCCACHIB EQU   X'10' -        ERROR ON HIO\nPCCARV52 EQU   X'08',,C'X' -  RESERVED\nPCCACSNB EQU   X'04' -        SENSE DATA STORED\nPCCACCVB EQU   X'02' -        COUNT VALID\nPCCACNRB EQU   X'01' -        NO RETRY\nPCCAIOSI DC    XL1'00' -      IOS INTERCEPT BYTE\nPCCACHW1 DC    F'0' -         CCH WORK AREA 1\nPCCACHW2 DC    F'0' -         CCH WORK AREA 2\nPCCALOGL DC    H'0' -         LENGTH OF CHANNEL LOGOUT FOR CURRENT\n*                             ERROR  (MDC305)                  @G51BP9A\nPCCACELL DC    H'0' -         MAXIMUM LENGTH OF I/O EXTENDED LOGOUT\n*                             (IOEL) AREA  (MDC313)            @G51BP9A\nPCCALGP1 DC    XL1'00' -      LOGOUT PARITY AREA 1  (MDC306)   @G51BP9A\nPCCALGP2 DC    XL1'00' -      LOGOUT PARITY AREA 2  (MDC307)   @G51BP9A\nPCCACHPB DC    FL1'0' -       LOGOUT PARITY BYTE COUNT\n*                             (MDC308)                         @G51BP9A\nPCCARV05 DC    XL1'00' -      RESERVED FOR CCH  (MDC309)       @G51BP9A\nPCCACHF1 DC    XL1'00' -      CCH FOOTPRINT BYTE 1\nPCCACF11 EQU   X'80' -        IOS GPR'S SAVED\nPCCACF12 EQU   X'40' -        UCB ADDRESS IS ZERO\nPCCACF13 EQU   X'20' -        ERPIB EXISTS\nPCCACF14 EQU   X'10' -        IGFCCHSI ENTERED\nPCCACF15 EQU   X'08' -        IGFCCHII ENTERED\nPCCACF16 EQU   X'04' -        IGFCCHFE ENTERED\nPCCACF17 EQU   X'02' -        IGFC60 ENTERED\nPCCACF18 EQU   X'01' -        IGFC70 ENTERED\nPCCACHF2 DC    XL1'00' -      CCH FOOTPRINT BYTE 2\nPCCACF21 EQU   X'80' -        IGFC80 ENTERED\nPCCACF22 EQU   X'40' -        IGFCIC ENTERED\nPCCACF23 EQU   X'20' -        IGFCCHRD ENTERED                   MDC008\nPCCACF24 EQU   X'10' -        IGFCCHMP ENTERED\nPCCACF25 EQU   X'08' -        IGFCCHUC ENTERED\nPCCACF26 EQU   X'04' -        IGFCCHAS ENTERED                   MDC009\nPCCACF27 EQU   X'02' -        IGFCCHIO ENTERED\nPCCACF28 EQU   X'01' -        EXIT CCH\nPCCACHF3 DC    XL1'00' -      CCH FOOTPRINT BYTE 3\nPCCAISRB EQU   X'80' -        SRB FOR IECVIRST SCHEDULED\n*                             (MDC321)                         @G51BP9A\nPCCASLCK EQU   X'40' -        SPACE ALLOCATION LOCK HELD BY CCH\n*                             (MDC322)                         @G51BP9A\nPCCARV66 EQU   X'20',,C'X' -  RESERVED\nPCCARV67 EQU   X'10',,C'X' -  RESERVED\nPCCARV68 EQU   X'08',,C'X' -  RESERVED\nPCCARV69 EQU   X'04',,C'X' -  RESERVED\nPCCARV70 EQU   X'02',,C'X' -  RESERVED\nPCCARV71 EQU   X'01',,C'X' -  RESERVED\nPCCACHF4 DC    XL1'00' -      CCH FOOTPRINT BYTE 4\nPCCARV72 EQU   X'80',,C'X' -  RESERVED\nPCCARV73 EQU   X'40',,C'X' -  RESERVED\nPCCARV74 EQU   X'20',,C'X' -  RESERVED\nPCCARV75 EQU   X'10',,C'X' -  RESERVED\nPCCARV76 EQU   X'08',,C'X' -  RESERVED\nPCCARV77 EQU   X'04',,C'X' -  RESERVED\nPCCARV78 EQU   X'02',,C'X' -  RESERVED\nPCCARV79 EQU   X'01',,C'X' -  RESERVED\nPCCACHSV DC    3F'0' -        CCH INTERNAL SAVE AREA.  FIRST WORD\n*                             CONTAINS THE ADDRESS OF THE CURRENT CCH\n*                             RECORD BUFFER                      MDC010\nPCCACHID DC    XL8'00' -      STORE CHANNEL ID WORK AREA\nPCCALOGA DC    A(0) -         ADDRESS OF CHANNEL LOGOUT          MDC004\nPCCARV54 DC    A(0) -         RESERVED\nPCCARV55 DC    A(0) -         RESERVED\nPCCARV56 DC    A(0) -         RESERVED\nPCCARV57 DC    A(0) -         RESERVED\nPCCARV58 DC    A(0) -         RESERVED\nPCCARV59 DC    A(0) -         RESERVED\nPCCARV60 DC    A(0) -         RESERVED\nPCCARV61 DC    A(0) -         RESERVED\nPCCARV62 DC    A(0) -         RESERVED\nPCCARV63 DC    A(0) -         RESERVED\nPCCAATTR DC    XL1'00' -      PROCESSOR ATTRIBUTES  (MDC302)   @G47AN9A\nPCCACPUM EQU   X'80' -        INDICATOR THAT DEAD CPU HAD A MALFUNCTION\n*                             (MDC301)                         @G47AN9A\nPCCAIO   EQU   X'40' -        PROCESSOR HAS I/O CAPABILITY\n*                             (MDC303)                         @G47AN9A\nPCCAR100 EQU   X'20',,C'X' -  RESERVED                         @G47AN9A\nPCCAR101 EQU   X'10',,C'X' -  RESERVED                         @G47AN9A\nPCCAR102 EQU   X'08',,C'X' -  RESERVED                         @G47AN9A\nPCCAR103 EQU   X'04',,C'X' -  RESERVED                         @G47AN9A\nPCCAR104 EQU   X'02',,C'X' -  RESERVED                         @G47AN9A\nPCCAR105 EQU   X'01',,C'X' -  RESERVED                         @G47AN9A\nPCCARV01 DC    XL1'00' -      RESERVED\nPCCARV35 DC    H'0' -         RESERVED\nPCCARV36 DC    F'0' -         RESERVED\n         DC    XL200'00' -    RESERVED  (MDC323)               @G64AP9A\n         MEND  , -   */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHAPQE": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x12\\x9f\\x01\\x02\\x12\\x9f\\x13\\x00\\x00\"\\x00\"\\x00\\x00\\xe2\\xc8\\xd6\\xe6\\xd4\\xf3\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-05-09T00:00:00", "modifydate": "2002-05-09T13:00:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "SHOWM38"}, "text": "         MACRO\n         IHAPQE   &TYPE\n*\n*        RELEASE 1 AOS, 11/3/71, LEVEL=1\n*\n         AIF   ('&TYPE' EQ 'INTERNAL').EQU\nPQESECT  DSECT      PARTITION QUEUE ELEMENT\nPQEFFBQE DS    A    PTR TO FIRST FBQE OR IF NONE TO PQE\nPQEBFBQE DS    A    PTR TO LAST FBQE OR IF NONE, TO PQE\nPQEFPQE  DS    A    ADDR NEXT PQE OR ZERO\nPQEBPQE  DS    A    ADDR PREVIOUS PQE OR ZERO\nPQETCB   DS    A    ADDR TCB FOR JOB STEP TO WHICH SPACE BELONGS\nPQESIZE  DS    F    SIZE OF REGION DESCRIBED BY THIS PQE\nPQEREGN  DS    A    ADDR FIRST BYTE OF REGION DESCRIBED BY THIS PQE\nPQERFLGS DS    CL1  FLAG BYTE\nPQEHRID  DS    CL1  HIERARCHY IDENTIFIER\nVMMFLGS  DS    BL1  SEVEN HIGH ORDER BITS ZERO\nVVVRFLG  EQU   X'01' REAL OR VIRTUAL REGION FLAG\nPQERSVD  DS    CL1  RESERVED\n         MEXIT\n.EQU     ANOP\nPQEFFBQE EQU      0    PTR TO FIRST FBQE OR IF NONE TO PQE\nPQEBFBQE EQU      4    PTR TO LAST FBQE OR IF NONE, TO PQE\nPQEFPQE  EQU      8    ADDR NEXT PQE OR ZERO\nPQEBPQE  EQU      12    ADDR PREVIOUS PQE OR ZERO\nPQETCB   EQU      16    ADDR TCB FOR JOB STEP TO WHICH SPACE BELONGS\nPQESIZE  EQU      20    SIZE OF REGION DESCRIBED BY THIS PQE\nPQEREGN  EQU      24    ADDR FIRST BYTE OF REGION DESCRIBED BY THIS PQE\nPQERFLGS EQU      28  FLAG BYTE\nPQEHRID  EQU      29  HIERARCHY IDENTIFIER\nVMMFLGS  EQU      30  SEVEN HIGH ORDER BITS ZERO\nVVVRFLG  EQU   X'01' REAL OR VIRTUAL REGION FLAG\nPQERSVD  EQU      31  RESERVED\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LKEDSHOW": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x13\\x1f\\x01\\x02\\x13\\x1f\"\\x02\\x01\\x12\\x01\\x12\\x00\\x00\\xe2\\xc8\\xd6\\xe6\\xf3\\xf8\\xd1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-05-11T00:00:00", "modifydate": "2002-05-11T22:02:00", "lines": 274, "newlines": 274, "modlines": 0, "user": "SHOW38J"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "P$BEGIN": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x12\\x9f\\x01\\x02\\x12\\x9f\\x13\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\xe2\\xc8\\xd6\\xe6\\xd4\\xf3\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-05-09T00:00:00", "modifydate": "2002-05-09T13:00:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "SHOWM38"}, "text": "         MACRO                                                    MACRO\n&NAME    P$BEGIN ,                                                MACRO\n         GBLC  &ENDPROC                                           MACRO\n&ENDPROC SETC  'PROC&SYSNDX'                                      MACRO\n$LTORG   LOCTR                         ADDRESSABLE CODE           MACRO\n&NAME    BAL   R15,=X'4AF0,F000,07FF'  ADD HWORD OFFSET, BR FAR   MACRO\n         DC    Y(&ENDPROC-*)           OFFSET TO FAR ROUTINE      MACRO\n$FARRTNE LOCTR                         FAR ROUTINES               MACRO\n         DS    0D                                            <38J>MACRO\n         DC    CL8'&NAME'                                    <38J>MACRO\n&ENDPROC BALR  R12,0                   LOCAL BASE                 MACRO\n         USING *,R12                   DROPPED BY P$END           MACRO\n         LA    R15,PEND&SYSNDX         LOAD RETRY ADDRESS         MACRO\n         STM   R14,R15,P$END           RETURN/RETRY ADDRESSES     MACRO\n&ENDPROC SETC  'PEND&SYSNDX'           FOR P$END MACRO            MACRO\n.MEND    MEND                                                     MACRO\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "P$END": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x12\\x9f\\x01\\x02\\x12\\x9f\\x13\\x00\\x00\\n\\x00\\n\\x00\\x00\\xe2\\xc8\\xd6\\xe6\\xd4\\xf3\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-05-09T00:00:00", "modifydate": "2002-05-09T13:00:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "SHOWM38"}, "text": "         MACRO                                                    MACRO\n&NAME    P$END         ,                                          MACRO\n         GBLC  &ENDPROC                                           MACRO\n         AIF   (T'&NAME EQ 'O').END2                              MACRO\n&NAME    EQU   *                                                  MACRO\n.END2    ANOP                                                     MACRO\n&ENDPROC L     R14,P$END               RETURN ADDR                MACRO\n         BR    R14                                                MACRO\n         DROP  R12                     SET BY P$BEGIN        <38J>MACRO\n.MEND    MEND                                                     MACRO\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SHOWMVS": {"ttr": 782, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x12\\x9f\\x01\\x02\\x12\\x9f\\x13\\x00\\x07R\\x07R\\x00\\x00\\xe2\\xc8\\xd6\\xe6\\xd4\\xf3\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-05-09T00:00:00", "modifydate": "2002-05-09T13:00:00", "lines": 1874, "newlines": 1874, "modlines": 0, "user": "SHOWM38"}, "text": "***********************************************************************\n*                                                                     *\n*     THIS PROGRAM RUNS IN BATCH   AND DISPLAYS A LOT OF         <38J>*\n*     INFORMATION THAT YOU GENERALLY HAVE TO GET FROM DIFFERENT       *\n*     SOURCES.                                                        *\n*                                                                     *\n*       ON-LINE CPU'S                                                 *\n*       AMOUNT OF ON-LINE STORAGE (REAL AND EXTENDED)                 *\n*       IPL DATE, TIME, VOLSER, NUC-ID, CLPA                          *\n*       VIRTUAL STORAGE MAP (CSA, SQA, LPA, ETC)                      *\n*       DSN OF THE MASTER CATALOG                                     *\n*       DSN OF THE PAGE DATA SETS                                     *\n*       SMFSID, JWT, GRS' SNAME                                       *\n*       MVS LEVEL, DFP LEVEL, OSLVL FLAGS                             *\n*       PRODUCT LEVELS FOR: TSO/E, ISPF, DFDSS, HSM, RACF, VTAM       *\n*       UCB TABLE WITH UNIT NAMES AND DASD VOLUME STATUS              *\n*       SUB-SYSTEM VECTOR TABLE WITH FUNCTIONS PROCESSED              *\n*       ACTIVE LPA QUEUE                                              *\n*       SVC TABLE WITH NAME OF CORRESPONDING LPA MODULE               *\n*       LINK-LIST DATA SETS, WITH CREATION DATE                       *\n*       LPA-LIST DATA SETS, WITH CREATION DATE                        *\n*       LIST OF AUTHORIZED LIBRARIES                                  *\n*       YOUR TIOT, WITH EXCP COUNTS FOR EACH DD                       *\n*       ENHANCED VIEW OF YOUR JPAQ                                    *\n*       ENHANCED VIEW OF THE LOAD-LISTS OF YOUR ADDRESS SPACE         *\n***********************************************************************\n*\n*  REGISTER USAGE\n*\n*  R0    SCRATCH\n*  R1    SCRATCH\n*  R2\n*  R3    CVT\n*  R4    TCB\n*  R5\n*  R6\n*  R7\n*  R8\n*  R9\n*  R10   CURRENT LINE PTR FOR STRING\n*  R11   BASE\n*  R12   BASE (SHORT-TERM VIA P$BEGIN)\n*  R13   DYN\n*  R14   SCRATCH, INTERNAL LINKAGE\n*  R15   SCRATCH, RETURN CODE\n***********************************************************************\n         PRINT GEN,DATA                   <38J>\n         EJECT ,\nSHOWMVS  CSECT\n         USING PSA,0                                              <38J>\n*8OWMVS  RMODE ANY\nBASEADDR DS    0H                                                 <38J>\n&VERMOD  SETC  'V38J.0000'             VERSION/MODIFICATION       <38J>\n         SAVE  (14,12),,'SHOWMVS &SYSDATE '\n         LR    R11,R15                                            <38J>\n         USING BASEADDR,R11                                       <38J>\n         GETMAIN RU,LV=DYNL,BNDRY=PAGE                            <38J>\n         LR    R9,R1                   SAVE GOTTEN AREA PTR       <38J>\n         LR    R0,R1                   MVCL DEST ADDR             <38J>\n         L     R1,=A(DYNL)             MVCL DEST LENGTH           <38J>\n         SLR   R15,R15                 MVCL SOURCE LENGTH         <38J>\n         MVCL  R0,R14                  CLEAR GOTTEN STORAGE       <38J>\n         ST    R13,4(,R9)              OUR BACKPTR @ CALLER'S SA  <38J>\n         ST    R9,8(,R13)              CALLER'S FWDPTR @ OUR SA   <38J>\n         LM    R13,R1,8(R13)           SET R13, RELOAD R1\n         USING DYN,R13\n         MVC   PARMADDR,0(R1)          SAVE PARM/CBUF ADDRESS\n*----------------------------------------------------------------------\n         BAL   R14,INITIAL             INITIALIZE THE ENVIRONMENT\n         LTR   R15,R15                 VALID ISPF ENVIRONMENT?\n         BNZ   GOBACK                  NO, QUIT\n         BAL   R14,SPACE1              BLANK LINE AT THE TOP\n         BAL   R14,HARDWARE            HARDWARE DATA\n         BAL   R14,IPLDATA             IPL DATE\n         BAL   R14,MEMORY              VIRTUAL MEMORY MAP\n         BAL   R14,MASTRCAT            MASTER CATALOG\n         BAL   R14,PAGEDS              PAGE DATA SETS\n         BAL   R14,SMFDATA             SMF DATA\n         BAL   R14,SPLEVEL             MVS/SP & DFP LEVELS\n         BAL   R14,PRODUCTS            TSO, SPF, DFDSS, HSM, RACF, VTAM\n         BAL   R14,SORT                SORT ALIAS\n         BAL   R14,DEVICES             ON-LINE UNITS\n         BAL   R14,SUBSYSTM            SUB-SYSTEMS\n         BAL   R14,LPACTIV             ACTIVE LPA\n         BAL   R14,SVCTABLE            SVC TABLE\n         BAL   R14,LINKLIST            LNKLSTXX\n         BAL   R14,LPALIST             LPALSTXX\n         BAL   R14,APFLIST             APF LIST\n         BAL   R14,SCANTIOT            TIOT\n         BAL   R14,TCB_TREE            TCB TREE\n         BAL   R14,JPAQ                JPAQ\n         BAL   R14,LOADLIST            LOAD LISTS\n         BAL   R14,CLOSE               CLOSE SYSPRINT             <38J>\n         ESTAE 0                       DELETE RECOVERY ENVIRONMENT\n*8       BAL   R14,BRIF                START BROWSE MODE\nGOBACK   LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN RU,LV=DYNL,A=(1)\n         RETURN (14,12),RC=00\n*----------------------------------------------------------------------\n         EJECT ,\n*----------------------------------------------------------------------\n*        INITIALIZE THE ENVIRONMENT\n*----------------------------------------------------------------------\nINITIAL  P$BEGIN ,\n         AGO   .XINI1                                             <38J>\n*8       LOAD  EP=ISPLINK              LOAD ISPLINK\n*8       ST    R0,ISPLINK              KEEP THE ADDRESS\n*8       LA    R0,L'ZENVIR             .\n*8       ST    R0,DWD                  .\n*8       LA    R14,=C'VCOPY '          ISPF FUNCTION\n*8       LA    R15,=C'(ZENVIR)'        VARIABLE LIST\n*8       LA    R0,DWD                  LENGTH\n*8       LA    R1,ZENVIR               AREA ADDRESS\n*8       LA    R2,=C'MOVE '            MOVE MODE\n*8       STM   R14,R2,TENWORDS\n*8       OI    TENWORDS+16,X'80'       END-OF-LIST FLAG\n*8       LA    R1,TENWORDS             PARM LIST ADDRESS\n*8       L     R15,ISPLINK             LOAD INTERFACE ADDRESS\n*8       BALR  R14,R15                 CALL ISPF\n*8       LTR   R15,R15\n*8       BNZ   INIT99\n.XINI1   ANOP  ,                                                  <38J>\n*\n         ST    R11,BASEREG             FOR RECOVERY ROUTINE\n         L     R2,=A(RECOVERY)         RECOVERY ROUTINE\n         MNOTE *,'ESTAE ROUTINE TEMPORARILY DISABLED'\n         AGO   .NOSTAE\n         ESTAE (R2),                   RECOVERY ROUTINE               XX\n               CT,                     CREATE                         XX\n               PARAM=DYN,              PARAM FOR RECOVERY ROUTINE     XX\n               MF=(E,ESTAEL)\n.NOSTAE  ANOP\n*\n         MVI   BLANKS,C' '\n         MVC   BLANKS+1(L'BLANKS-1),BLANKS\n*\n         LA    R10,LINES               START OF TABLES\n         USING LINE,R10\n*\n         L     R3,CVTPTR               CVT ADDRESS\n         USING CVTMAP,R3               PERMANENT ASSIGNMENT\n*\n         L     R4,PSATOLD-PSA          MY TCB\n         USING TCB,R4\n*\n         ST    R4,MYTCB                KEEP ITS ADDRESS FOR DETACH\n         MVC   JSTCB,TCBJSTCB          THE JOB STEP TCB\n*\n         AGO   .XINI2                                             <38J>\n*8       L     R1,CVTLINK              DCB FOR SYS1.LINKLIB\n*8       LOAD  EP=IEFEB4UV,DCB=(1)     GET ADDRESS OF IEFEB4UV ROUTINE\n*8       ST    R0,IEFEB4UV             KEEP ADDRESS\n.XINI2   ANOP  ,                                                  <38J>\n         SLR   R15,R15                 INITIALIZATION GOOD        <38J>\nINIT99   P$END\n         EJECT ,\n*----------------------------------------------------------------------\n*        ON-LINE CPU'S AND REAL STORAGE\n*----------------------------------------------------------------------\nHARDWARE P$BEGIN\n         STRING 'ONLINE CPU(S)',INTO=LINE                         <38J>\n         LA    R10,NEXTLINE                                       <38J>\n         L     R7,CVTPCCAT             PCCA VECTOR TABLE\n         LA    R8,0016                 16 IS THE MAX NUMBER OF CPU'S\n*LOOP\nHARDW1   ICM   R9,B'1111',0(R7)        PCCA\n         BZ    HARDW4                  THIS CPU ACTIVE, JUMP\n         USING PCCA,R9\n         STRING '  CPU ',(PCCACPUA,H,L),'  SERIAL: ',(PCCACPID+0,8), XXX\n               '  MODEL: ',(PCCACPID+8,4),INTO=LINE\n         LA    R10,NEXTLINE\nHARDW4   LA    R7,4(,R7)               BUMP PCCAT PTR\n         BCT   R8,HARDW1\n*ENDLOOP\n         BAL   R14,SPACE1              BLANK LINE\n*\n*        REAL STORAGE\n*\n         STRING 'REAL STORAGE',INTO=LINE                          <38J>\n         LA    R10,NEXTLINE                                       <38J>\n         LA    R1,0001\n         AL    R1,CVTEORM              HI-ADDR\n         SRL   R1,0010                 GET IT IN \"K\"\n         STRING '  ON-LINE: ',(CVTRLSTG,F,L),'K',                      X\n               '   HIGHEST ADDRESS: ',((R1),,L),'K',                   X\n               INTO=LINE\n         BAL   R14,SPACE2              BLANK LINE\n*8       L     R8,CVTRCEP              RSM CTL & ENUM AREA\n*8       L     R9,RCEESPL-RCE(,R8)     # OF EXTENDED STORAGE FRAMES\n*8       SLL   R9,002                  CHANGE TO \"K\"\n*8       STRING '      EXTENDED STORAGE: ',((R9),,L),'K',INTO=LINE\n*8       BAL   R14,SPACE2              BLANK LINE\n         P$END\n         EJECT ,\n*----------------------------------------------------------------------\n*        IPL DATA\n*----------------------------------------------------------------------\nIPLDATA  P$BEGIN ,\n         AGO   .XIPLD1                                            <38J>\n         L     R6,CVTSMCA              SMF SMCA\n         USING SMCABASE,R6\n         L     R1,SMCAIDTE             IPL DATE 00YYDDDF\n         L     R1,=X'0000000F'         IPL DATE 00YYDDDF          <38J>\n         L     R15,=A(@JDATE)          DATE CONVERT RTNE\n         BALR  R14,R15                 CONVERT JULIAN TO YYMMDD\n         MVC   DWD+0(2),0(R1)          YY\n         MVI   DWD+2,C'/'              YY/\n         MVC   DWD+3(2),2(R1)          YY/MM\n         MVI   DWD+5,C'/'              YY/MM/\n         MVC   DWD+6(2),4(R1)          YY/MM/DD\n         SLR   R0,R0\n         L     R1,SMCAITME             IPL TIME (BINARY)\n         L     R1,=A(0)                IPL TIME (BINARY) <38J>\n         D     R0,=X'00057E40'         GET HOURS\n         LR    R2,R1                   HH\n         LR    R1,R0                   REMAINDER\n         SLR   R0,R0\n         D     R0,=F'6000'             GET MINUTES IN R1\n*\n         ZAP   K2,CVTDATE              TODAY'S DATE\n         STRING '(TODAY)',INTO=NEXTLINE\n         SP    K2,SMCAIDTE             DIFFERENCE IN DAYS\n         SP    K2,CVTDATE              DIFFERENCE IN DAYS\n         BZ    IPLDATA6                TODAY, JUMP\n         STRING '(YESTERDAY)',INTO=NEXTLINE\n         CP    K2,=P'1'                WAS IT YESTERDAY?\n         BE    IPLDATA6                YES, JUMP\n         STRING '(',(K2,P,L0),' DAYS AGO)',INTO=NEXTLINE\nIPLDATA6 DS    0H\n         STRING 'IPL DATE: ',DWD,2X,(NEXTLINE,,T),                   XXX\n               '   TIME: ',((R2),,R2Z),':',((R1),,R2Z),INTO=LINE\n         LA    R10,NEXTLINE\n.XIPLD1  ANOP                                                     <38J>\n*\n         L     R5,CVTSYSAD             IPL UCB\n         USING UCBOB,R5\n         L     R8,CVTEXT2              CVT EXTENSION\n         USING CVTXTNT2,R8\n         L     R15,CVTASMVT            POINT TO ASM VECTOR TABLE\n         LA    R9,=C'NO '              CLPA=NO\n         TM    ASMFLAG2-ASMVT(R15),ASMQUICK   QUICK START?\n         BO    *+8                     YES, JUMP\n         LA    R9,=C'YES'              NO, CLPA=YES\n         STRING 'IPL FROM: ',UCBVOLI,'/',UCBNAME,                 <38J>X\n               '   NUC ID: ',CVTNUCLS,                                 X\n               '   CLPA: ',((R9),3),INTO=LINE\n         BAL   R14,SPACE2              BLANK LINE\n         P$END\n         EJECT ,\n*----------------------------------------------------------------------\n*        DISPLAY VIRTUAL MEMORY MAP\n*----------------------------------------------------------------------\nMEMORY   P$BEGIN ,\n         STRING 'VIRTUAL STORAGE MAP',INTO=LINE\n         BAL   R14,SPACE2\n         STRING '  ----AREA----',                                     XX\n               '  ------START------     ------END-------     SIZE',   XX\n               INTO=LINE\n         BAL   R14,SPACE2\n*\n         L     R7,CVTGDA               GLOBAL DATA AREA\n         USING GDA,R7\n*\n* COMMON AREA\n*\n         L     R8,CSAPQEP              GDA -> CSA PQE             <38J>\n         USING PQESECT,R8                                         <38J>\n        $MEMORY '----------',PQEREGN,CVTMZ00                      <38J>\n         S     R10,=A(L$LINE)\n         MVC   LINE(8),=C'  COMMON'\n         BAL   R14,SPACE2\n*\n**       ST    R7,DY8WORD1\n**       LA    R14,L$GDA\n**       ST    R14,DY8WORD3\n**      $MEMORY '       GDA',DY8WORD1,,DY8WORD3\n*\n         L     R9,SQASPQEP             GDA -> SQA (SP245) SPQE\n         USING SPQESECT,R9\n         L     R9,SPDQEPTR             SPQE -> DQE\n         USING DQESECT,R9\n        $MEMORY '       SQA',DQEBLKAD,,DQELNTH\n*\n         L     R14,DQEBLKAD            SQA BEGIN ADDR\n         BCTR  R14,0\n         ST    R14,DY8WORD2            PLPA/SQA CONTIGUOUS\n         SLR   R9,R9\n         ICM   R9,7,CVTLPDIR           CVT -> LPA DIRECTORY\n         ST    R9,DY8WORD1\n        $MEMORY '      PLPA',DY8WORD1,DY8WORD2\n*\n*       $MEMORY '      MLPA',CVTMLPAS,CVTMLPAE\n*       $MEMORY '    P-BLDL',????????,????????  PAGEABLE BLDL\n*\n         L     R8,CSAPQEP              GDA -> CSA PQE             <38J>\n         USING PQESECT,R8                                         <38J>\n        $MEMORY '       CSA',PQEREGN,,PQESIZE                     <38J>\n         BAL   R14,SPACE1\n*\n* PRIVATE USER AREA\n*\n        $MEMORY '----------',PASTRT,,PASIZE                       <38J>\n         S     R10,=A(L$LINE)\n         MVC   LINE(9),=C'  PRIVATE'\n         BAL   R14,SPACE2\n*\n*       $MEMORY '      LSQA',???????,,???????                     <38J>\n*       $MEMORY '       SWA',???????,,???????                     <38J>\n*\n         L     R9,PSAAOLD              PSA -> CURRENT ASCB\n         USING ASCB,R9\n         L     R9,ASCBLDA              ASCB -> LDA\n         USING LDA,R9\n         L     R8,ASDPQE               LDA -> ADDR SPACE RGN PQE  <38J>\n         USING PQESECT,R8                                         <38J>\n        $MEMORY 'V=V REGION',PQEREGN,,PQESIZE                     <38J>\n*\n         L     R8,VRPQEP               GDA -> ALLOWABLE V=R       <38J>\n         USING PQESECT,R8                                         <38J>\n        $MEMORY 'V=R REGION',PQEREGN,,PQESIZE                     <38J>\n*\n         L     R8,LDASRPQE             LDA -> SYSTEM REGION PQE   <38J>\n         USING PQESECT,R8                                         <38J>\n        $MEMORY 'SYS REGION',PQEREGN,,PQESIZE                     <38J>\n         BAL   R14,SPACE1\n*\n* NUCLEUS/SYSTEM AREA\n*\n         SLR   R14,R14                 ADDRESS 0\n         ST    R14,DY8WORD1\n         L     R14,CVTNUCB             LOWEST ADDR NOT IN NUC\n         BCTR  R14,0                   LAST ADDR IN NUC\n         ST    R14,DY8WORD2\n        $MEMORY '----------',DY8WORD1,DY8WORD2                    <38J>\n         S     R10,=A(L$LINE)\n         MVC   LINE(9),=C'  NUCLEUS'\n*        BAL   R14,SPACE1\n*       $MEMORY '   NUC-EXT',????????,????????                    <38J>\n*       $MEMORY '      FLPA',????????,????????                    <38J>\n*       $MEMORY '    F-BLDL',????????,????????                    <38J>\n*       $MEMORY '   NUCLEUS',????????,????????                    <38J>\n**\n**\n**       STRING 'LDA->',((R9),,X),INTO=LINE\n         BAL   R14,SPACE2\n         DROP  R7                      GDA                        <38J>\n         DROP  R8                      PQE                        <38J>\n         DROP  R9\n         P$END\n*\n*8      $MEMORY '   MLPA   ',CVTEMLPS,CVTEMLPE\n*8      $MEMORY '   FLPA   ',CVTFLPAS,CVTFLPAE\nADDR0    DC    A(0)                    VIRTUAL ADDR ZERO          <38J>\n         EJECT ,\n*----------------------------------------------------------------------\n*        DSNAME OF THE MASTER CATALOG\n*----------------------------------------------------------------------\n* NOTE: OLD CODE SIMPLY REMOVED (NOT COMMENTED OUT) IN THIS CODE  <38J>\nCBSCAXCN EQU   X'14'                   AMCBS OFFSET TO CAXWA CHAIN<38J>\nCAXUCB   EQU   X'1C'                   CAXWA OFFSET TO UCB        <38J>\nCAXCNAM  EQU   X'34'                   CAXWA OFFSET TO CAT NAME   <38J>\n*\nMASTRCAT P$BEGIN ,\n         L     R5,CVTCBSP              @ AMCBS\n         L     R6,CBSCAXCN(,R5)        @ CAXWA CHAIN              <38J>\n*\nCATLOOP  DS    0H\n         L     R7,CAXUCB(,R6)          UCB ADDR                   <38J>\n         USING UCBOB,R7\n*                                      MCAT AT END OF CAXWA CHAIN <38J>\n         MVC   UNITNAME+8(4),UCBTYP    DEVICE TYPE\n*8<TMP>  BAL   R14,GETUNIT             GET UNITNAME\n*                                      KEEP OVERLAYING, MCAT LAST CAXWA\n         MVC   LINE,BLANKS                                        <38J>\n         STRING 'MASTER CATALOG:',                                     +\n               '  DSN=',(X'034'(R6),44,T),                             +\n               ' CUU=',UCBNAME,                                        +\n               ' VOLSER=',UCBVOLI,INTO=LINE\n         ICM   R6,15,4(R6)             @ NEXT CAXWA, IF ANY       <38J>\n         BNZ   CATLOOP                                            <38J>\n         BAL   R14,SPACE2                                         <38J>\n         P$END\n         DROP  R7                      UCBOB\n         EJECT ,\n*----------------------------------------------------------------------\n*        DISPLAY PAGE DATA SETS\n*----------------------------------------------------------------------\nPAGEDS   P$BEGIN ,\n         STRING 'PAGE DATA SETS:',INTO=LINE\n         BAL   R14,SPACE2              BLANK LINE\n         L     R9,CVTASMVT             POINT TO ASM VECTOR TABLE\n         L     R9,ASMPART-ASMVT(,R9)   POINT TO PAGE ACT REF TABLE\n         L     R1,PARTSIZE-PART(,R9)   NUMBER OF PART ENTRIES\n         L     R2,PARTDSNL-PART(,R9)   POINT TO 1ST PAGE DSN\n*LOOP\nPAGEDS1  CLI   0(R2),C' '              VALID DSN?\n         BNH   PAGEDS2                 NO, SKIP IT\n         MVC   LINE,BLANKS             BLANK LINE\n         MVC   DSNAME,0(R2)            MOVE DSNAME\n*        MVI   VOLSER,C'?'             LOCATE WILL BE DONE LATER  <38J>\n         LA    R10,NEXTLINE\nPAGEDS2  LA    R2,44(,R2)              NEXT DSN\n         BCT   R1,PAGEDS1\n*ENDLOOP\n         BAL   R14,SPACE1              BLANK LINE\n         P$END\n         EJECT ,\n*----------------------------------------------------------------------\n*        DISPLAY SMF DATA\n*----------------------------------------------------------------------\nSMFDATA  P$BEGIN ,\n         L     R6,CVTSMCA              SMF SMCA\n         USING SMCABASE,R6\n*8       STRING '  SID: ',SMCASID,'  JWT: ',SMCASJWT,INTO=LINE,    X\n*8             '   CVTSNAME: ',CVTSNAME  GRS\n         STRING 'SMF SID: ',SMCASID,INTO=LINE                     <38J>\n         BAL   R14,SPACE2              BLANK LINE\n         P$END\n         DROP  R6                      SMCA\n         EJECT ,\n         EJECT ,\n*----------------------------------------------------------------------\n*        PRINT CVT FIELDS\n*----------------------------------------------------------------------\nSPLEVEL  P$BEGIN ,\n         AGO   .XSPLVL           <38J>\n         LR    R6,R3                   A(CVTMAP)\n         SH    R6,=Y(CVTMAP-CVTFIX)    SUBTRACT PREFIX LENGTH\n         USING CVTFIX,R6\n         L     R7,CVTDFA               DATA FACILITIES AREA\n         USING DFA,R7\n         MVC   DWD,=X'40204B204B20'    ' X.X.X'\n         ED    DWD,DFAREL              X'3200'\n         TM    CVTDCB,CVTOSEXT         DO WE HAVE OSLVL?\n         BO    SPLVL21                 YES, JUMP\n         STRING '  CVTPRODI: ',CVTPRODI,'  CVTPRODN: ',CVTPRODN,       X\n               '  DFP LEVEL:',(DWD,6),                                 X\n               '   CVTDCB: ',(CVTDCB,1,X),                             X\n               INTO=LINE\n         B     SPLVL99\nSPLVL21  DS    0H\n         STRING '  CVTPRODI: ',CVTPRODI,'  CVTPRODN: ',CVTPRODN,       X\n               '  DFP LEVEL:',(DWD,6),INTO=LINE\n         LA    R10,NEXTLINE\n         STRING '    CVTDCB: ',(CVTDCB,1,X),                           X\n               '   OSLVL: ',(CVTOSLVL+0,1,X),1X,(CVTOSLVL+1,1,X),1X,   X\n               (CVTOSLVL+2,1,X),1X,(CVTOSLVL+3,1,X),1X,                X\n               (CVTOSLVL+4,1,X),1X,(CVTOSLVL+5,1,X),1X,                X\n               (CVTOSLVL+6,1,X),1X,(CVTOSLVL+7,1,X),1X,                X\n               INTO=LINE\nSPLVL99  BAL   R14,SPACE2              BLANK LINE\n.XSPLVL  ANOP               <38J>\n         P$END\n         EJECT ,\n*----------------------------------------------------------------------\n*        TSO/E, DFDSS, HSM, RACF, VTAM\n*----------------------------------------------------------------------\nPRODUCTS P$BEGIN ,\n         STRING 'PRODUCTS:',INTO=LINE\n         LA    R10,NEXTLINE\n         AGO   .XPROD    <38J>  SKIP CVTTVT\n*\n         L     R7,CVTTVT               TSO VECTOR TABLE\n         USING TSVT,R7\n         STRING '  TSO/E LEVEL:  ',TSVTLVER,'.',TSVTLREL,'.',TSVTLMOD, X\n               4X,(ZENVIR,8),INTO=LINE\n         BAL   R14,SPACE2              BLANK LINE\n*\n         MVC   WK256(2+2),=Y(1,80)             BLDL HDR\n         MVC   WK256+4(8),=C'ADRRELVL'         EPNAME\n         BLDL  0,WK256                 ISSUE BLDL\n         LTR   R15,R15\n         BNZ   DFDSS8                  NOT FOUND, JUMP\n         LOAD  DE=WK256+4              LOAD ADRRELVL, IF PRESENT\n         LR    R1,R0                   PASS EP ADDR\n         STRING '  DF/DSS LEVEL: ',((R1),H,L),'.',(2(R1),FL1,L),'.', XXX\n               (3(R1),FL1,L),INTO=LINE\n         DELETE DE=WK256+4             I'M DONE WITH IT\n         BAL   R14,SPACE2              BLANK LINE\n.XPROD   ANOP              <38J>\n*\nDFDSS8   DS    0H\n         ICM   R7,B'1111',CVTHSM       HSM VECTOR TABLE\n         BZ    RACF00\n         USING MQCT,R7\n         CLI   MQCTID,C'Q'             CHECK CB ID\n         BNE   RACF00\n         STRING '  DF/HSM LEVEL: ',MQCTVER,'.',MQCTREL,'.',MQCTMOD,   XX\n               INTO=LINE\n         BAL   R14,SPACE2              BLANK LINE\n*\nRACF00   ICM   R7,B'1111',CVTRAC       RACF VECTOR TABLE\n         BZ    RACF99\n         USING RCVT,R7\n         IC    R0,RCVTVERS             X'04' MEANS 1.4\n         LA    R1,X'00F0'              X'04' MEANS 1.4\n         NR    R1,R0                   R1=VERSION#-1\n         SRL   R1,004                  X'04' MEANS 1.4\n         LA    R1,1(,R1)               X'04' MEANS 1.4\n         LA    R2,X'000F'              X'04' MEANS 1.4\n         NR    R2,R0                   R2=RELEASE#\n         STRING '  RACF LEVEL:   ',((R1),,L),'.',((R2),,L),INTO=LINE\n         BAL   R14,SPACE2              BLANK LINE\nRACF99   EQU   *\n*\nVTAM00   L     R8,PSAATCVT             ADDR OF VTAM CVT\n         LTR   R8,R8\n         BZ    VTAM99\n*8       STRING '  VTAM LEVEL:   ',((R8),4),8X,((R8),,X),INTO=LINE\n         STRING '  VTAM ACTIVE',INTO=LINE                         <38J>\n         BAL   R14,SPACE2              BLANK LINE\nVTAM99   DS    0H\n         P$END\n         EJECT ,\n*----------------------------------------------------------------------\n*        IDENTIFY SORT BY ITS REAL NAME\n*----------------------------------------------------------------------\nSORT     P$BEGIN ,\n         LOAD  EPLOC=SORTNAME,ERRET=NOSORT  LOAD SORT UTILITY     <38J>\n         L     R9,TCBLLS               POINT TO LAST LLE IN CHAIN\n         USING LLE,R9\n*LOOP\nSORT21   L     R6,LLECDPT              CDE PTR\n         USING CDENTRY,R6\n         CLC   SORTNAME,CDNAME         IS IT SORT'S LLE?\n         BE    SORT33                  YES, JUMP\n         ICM   R9,B'1111',LLECHN       CHECK FOR END OF CHAIN\n         BNZ   SORT21                  LOOP THROUGH LOAD LIST\n*ENDLOOP\n         B     SORT99                  SOMETHING'S WRONG HERE\nSORTNAME DC    CL8'SORT'               NAME OF SORT PGM (ANY SORT)\nICEMAN   DC    CL8'ICEMAN'             NAME OF SORT PGM (DFSORT)\nSORT33   TM    CDATTR,CDMIN            IS THIS A MINOR CDE?\n         BNO   SORT36                  NO, JUMP\n         L     R6,CDXLMJP              YES, POINT TO MAJOR CDE/LPDE\nSORT36   DS    0H\n         STRING '  SORT''S TRUE NAME IS ',CDNAME,INTO=LINE\n         CLC   SORTNAME,CDNAME         IS SORT'S NAME \"SORT\"?\n         BNE   SORT98                  NO, QUIT\n* IF SORT'S TRUE NAME IS \"SORT\", DISPLAY THE FIRST 256 BYTES\n* OF THE LOAD-MODULE TO HELP WITH ITS IDENTIFICATION.\n*8       L     R7,LPDEXTAD-LPDE(,R6)   LOAD POINT ADDRESS (IF LPDE)\n*8       TM    CDATTRB,CDELPDE         IS THIS A LPDE?\n*8       BO    SORT42                  YES, JUMP\n         L     R7,CDXLMJP              POINT TO XTLST\n         L     R7,XTLMSBAD-XTLST(R7)   LOAD POINT\nSORT42   DS    0H\n         STRING (LINE,,T),'   (FIRST 256 BYTES FOLLOW)',INTO=LINE\n         LA    R9,NEXTLINE+1000        POINT TO WORKING STORAGE\n         MVC   0(256,R9),0(R7)         MOVE TO WORKING STORAGE\n         BAL   R14,NONPRINT            BUILD TRANSLATE TABLE\n         TR    0(256,R9),WK256         GET RID OF NON-PRINTABLE CHARS\n         BAL   R14,SPACE2              BLANK LINE\n         STRING 8X,(000(R9),64),INTO=LINE\n         LA    R10,NEXTLINE\n         STRING 8X,(064(R9),64),INTO=LINE\n         LA    R10,NEXTLINE\n         STRING 8X,(128(R9),64),INTO=LINE\n         LA    R10,NEXTLINE\n         STRING 8X,(192(R9),64),INTO=LINE\n         B     SORT98\n*\nNOSORT   DS    0H\n         STRING '  SORT NOT FOUND IN LINKLIST',INTO=LINE\n*\nSORT98   BAL   R14,SPACE2              BLANK LINE\nSORT99   DELETE EPLOC=SORTNAME         NOW GET RID OF IT\n         P$END\n         DROP  R6,R9                   CDENTRY,LLE\n         EJECT\n*----------------------------------------------------------------------\n*        UCB TABLE\n*----------------------------------------------------------------------\nDEVICES  P$BEGIN ,\n         STRING 'ON-LINE DEVICES:',INTO=LINE\n         BAL   R14,SPACE2              BLANK LINE\n         STRING '  CUU  UCBTYP    UNITNAME  VOLSER  STATUS',INTO=LINE\n         BAL   R14,SPACE2              BLANK LINE\n         XC    WK256(100),WK256        CLEAR WORK AREA\n         MVC   WK256(4),CVTILK2        @ 1ST UCB HWORD PTR   <38J>\n*LOOP\nDEV_GET  DS    0H                                            <38J>\n*                                                            <38J>\n*8V_GET  LA    R14,WK256               WORK AREA FOR UCB SCAN RTN.\n*8       LA    R15,CVTPTR              POINT TO X'00' IF CLASS=ALL\n*8       LA    R0,TENWORDS+12          RETURNED UCB ADDRESS\n*8       STM   R14,R0,TENWORDS         BUILD PARM LIST\n*8       OI    TENWORDS+8,X'80'        MARK END OF LIST\n*8       LA    R1,TENWORDS             PARAMETER LIST\n*8       L     R15,CVTUCBSC            UCB SCAN ROUTINE\n*8       BALR  R14,R15                 CALL THE UCBSCAN ROUTINE\n*8       LTR   R15,R15\n*8       BNZ   DEV_EOD\n*8       L     R5,TENWORDS+12          LOAD R1 WITH ADDRESS OF UCB\n*                                                             <38J>\n         L     R14,WK256               @ UCB OR END-OF-TABLE  <38J>\n         CLC   =X'FFFF',0(R14)         END OF UCB LOOKUP TBL? <38J>\n         BE    DEV_EOD                 YES, BR                <38J>\n         SLR   R5,R5                                          <38J>\n         ICM   R5,3,0(R14)             @ UCB                  <38J>\n         LA    R14,2(,R14)             @ NEXT UCB PTR         <38J>\n         ST    R14,WK256               FOR NEXT TIME          <38J>\n*                                                             <38J>\n         TM    UCBSTAT,UCBONLI         ONLINE UNITS ONLY\n         BNO   DEV_GET\n*\n         MVC   VOLMOUNT,BLANKS\n         MVC   UNITNAME+8(4),UCBTYP    DEVICE TYPE\n         BAL   R14,GETUNIT             GET UNITNAME\nDEV_VOL  LA    R1,BLANKS               NO VOLSER UNLESS TAPE/DASD\n         CLI   UCBTBYT3,UCB3TAPE       TAPE?\n         BE    DEV_VOL2                YES, JUMP\n         CLI   UCBTBYT3,UCB3DACC       DASD?\n         BNE   DEV_PUN                 NO, JUMP\nDEV_VOL2 CLI   UCBVOLI,C' '            VALID VOLSER?\n         BNH   DEV_PUN                 NO, JUMP\n         LA    R1,UCBVOLI              VOLSER FOR TAPE/DASD\n         CLI   UCBTBYT3,UCB3DACC       DASD?\n         BNE   DEV_PUN                 NO, JUMP\n*8       MVC   VOLMOUNT(3),=C'SMS'     YES, SHOW IT\n*8       TM    UCBFL5,UCBSMS           SMS VOL?\n*8       BO    DEV_PUN                 YES, JUMP\n         MVC   VOLMOUNT,=C'PRIVATE'    USE=PRIVATE\n         TM    UCBSTAB,UCBBPRV         CHECK USE\n         BO    DEV_PUN\n         MVC   VOLMOUNT,=C'PUBLIC '    USE=PUBLIC\n         TM    UCBSTAB,UCBBPUB         CHECK USE\n         BO    DEV_PUN\n         MVC   VOLMOUNT,=C'STORAGE'    USE=STORAGE\nDEV_PUN  DS    0H\n         STRING 2X,UCBNAME,2X,(UCBTYP,4,X),2X,UNITNAME,2X,((R1),6),  XXX\n               2X,VOLMOUNT,INTO=LINE\n         LA    R10,NEXTLINE\n         B     DEV_GET\n*ENDLOOP\nDEV_EOD  BAL   R14,SPACE1              BLANK LINE\n         P$END                         UCB\n         DROP  R5                      UCB\n         EJECT ,\n*----------------------------------------------------------------------\n*        SUB-SYSTEMS AND FUNCTIONS PROCESSED\n*----------------------------------------------------------------------\nSUBSYSTM P$BEGIN ,\n         STRING 'SUB-SYSTEM VECTOR TABLE:',INTO=LINE\n         BAL   R14,SPACE2              BLANK LINE\n         L     R1,CVTJESCT             JES COMM TABLE\n         L     R5,JESSSCT-JESCT(,R1)   FIRST JSCVT\n         USING SSCT,R5\n*LOOP\nSUBSYS22 MVC   NEXTLINE,BLANKS\n         ICM   R6,15,SSCTSSVT          SUB-SYSTEM VECTOR TABLE\n         BZ    SUBSYS70                INACTIVE SUB-SYSTEM\n         USING SSVT,R6\n         SLR   R1,R1                   FIRST FUNCTION CODE\n         LA    R2,256                  MAX NUMBER OF FUNCTIONS\n*--LOOP\nSUBSYS30 LA    R14,SSVTFCOD(R1)        FUNCTION BYTE\n         LA    R1,1(,R1)               NEXT FUNCTION CODE\n         CLI   0(R14),0\n         BE    SUBSYS35\n         STRING (NEXTLINE,,T),1X,((R1),,L0),INTO=NEXTLINE\nSUBSYS35 BCT   R2,SUBSYS30\n*--ENDLOOP\nSUBSYS70 DS    0H\n         STRING 2X,SSCTSNAM,1X,(SSCTSSVT,,X),NEXTLINE,INTO=LINE\n         LA    R10,NEXTLINE\n         ICM   R5,15,4(R5)             NEXT SSCVT\n         BNZ   SUBSYS22\n*ENDLOOP\n         BAL   R14,SPACE1              BLANK LINE\n         P$END\n         EJECT ,\n*----------------------------------------------------------------------\n*        ACTIVE LPA Q\n*----------------------------------------------------------------------\nLPACTIV  P$BEGIN ,\n         L     R5,CVTQLPAQ             ACTIVE LPA QUEUE\n         ICM   R5,B'1111',0(R5)        FIRST LPDE ON QUEUE\n         BZ    LPACT99                 EMPTY QUEUE, SKIP SEARCH\n*\n         USING LPDE,R5\n         STRING 'ACTIVE LPA QUEUE:',INTO=LINE\n         BAL   R14,SPACE2\n         STRING 9X,'@LPDE   ',                                         +\n               1X,'LPDECHN ',                                          +\n               1X,'LPDERBP ',                                          +\n               1X,'LPDENAME',                                          +\n               1X,'LPDENTP ',                                          +\n               1X,'LPDEXLP ',                                          +\n               1X,'USE ',                                              +\n               1X,'AT',                                                +\n               1X,'A2',                                                +\n               1X,'LPDEXTLN',                                          +\n               1X,'LPDEXTAD',                                          +\n               1X,'MAJORNAM',                                          +\n               INTO=LINE\n         BAL   R14,SPACE2\n*\n*\nLPACT11  TM    LPDEATTR,LPDEMIN        MINOR LPDE?\n         BO    LPACT12                 YES, JUMP\n*\n         STRING ' MAJLPDE',                                            +\n               1X,((R5),,X),                                           +\n               1X,(LPDECHN,,X),                                        +\n               1X,(LPDERBP,,X),                                        +\n               1X,LPDENAME,                                            +\n               1X,(LPDENTP,,X),                                        +\n               1X,(LPDEXLP,,X),                                        +\n               1X,(LPDEUSE,,X),                                        +\n               1X,(LPDEATTR,,X),                                       +\n               1X,(LPDEATT2,,X),                                       +\n               1X,(LPDEXTLN,,X),                                       +\n               1X,(LPDEXTAD,,X),                                       +\n               1X,(LPDENAME-LPDE(R5),8),                               +\n               INTO=LINE\n         B     LPACT14\n*\nLPACT12  DS    0H                      MINOR LPDE\n         ICM   R2,15,LPDEXLP           @ ASSOCIATED MAJOR LPDE\n         BZ    LPACT14\n         STRING ' MINLPDE',                                            +\n               1X,((R5),,X),                                           +\n               1X,(LPDECHN,,X),                                        +\n               1X,(LPDERBP,,X),                                        +\n               1X,LPDENAME,                                            +\n               1X,(LPDENTP,,X),                                        +\n               1X,(LPDEXLP,,X),                                        +\n               1X,(LPDEUSE,,X),                                        +\n               1X,(LPDEATTR,,X),                                       +\n               1X,(LPDEATT2,,X),                                       +\n               1X,(LPDEXTLN,,X),                                       +\n               1X,(LPDEXTAD,,X),                                       +\n               1X,(LPDENAME-LPDE(R2),8),                               +\n               INTO=LINE\n*\nLPACT14  DS    0H\n         LA    R10,NEXTLINE\n         ICM   R5,B'1111',LPDECHN      NEXT LPDE ADDR\n         BNZ   LPACT11                 NO FINISHED YET, LOOP\n*\nLPACT99  DS    0H\n         BAL   R14,SPACE2\n         P$END\n         EJECT ,\n*----------------------------------------------------------------------\n*        SVC TABLE\n*----------------------------------------------------------------------\nSVCTABLE P$BEGIN ,\n         STRING 'SVC TABLE:',INTO=LINE\n         BAL   R14,SPACE2              BLANK LINE\n         L     R5,CVTABEND             SECONDARY CVT\n         USING SCVTSECT,R5\n         LA    R1,088*8                MULT BY 8 (LEN OF SVC ENTRY)\n         A     R1,SCVTSVCT             CHANGE OFFSET TO ADDRESS\n         MVC   SVC88,0(R1)             SAVE FOR LATER\n         L     R5,SCVTSVCT             SVC TABLE\n         LA    R8,00256/2\n         OI    K1+L'K1-1,15            INIT PACKED CTR\n*LOOP\nSVCTAB3  ZAP   K2,K1\n         AP    K2,=P'1'\n         L     R1,0(,R5)               SVC EP ADDR\n         BAL   R14,CSVQUERY            GET EP NAME\n         MVC   EP1,EP2                 PASS EP NAME\n         L     R1,8(,R5)               SVC EP ADDR\n         BAL   R14,CSVQUERY            GET EP NAME\n         STRING (K1,P),2X,(0(R5),4,X),2X,(4(R5),4,X),1X,EP1,       XXXXX\n               (K2,P),2X,(8(R5),4,X),2X,(12(R5),4,X),1X,EP2,INTO=LINE\n         LA    R10,NEXTLINE\n         AP    K1,=P'2'\n         LA    R5,8+8(,R5)\n         BCT   R8,SVCTAB3\n*ENDLOOP\n         BAL   R14,SPACE1              BLANK LINE\n         P$END\n         EJECT ,\n*----------------------------------------------------------------------\n*        LIST LNKLSTXX LIBRARIES\n*----------------------------------------------------------------------\nLINKLIST P$BEGIN ,\n         L     R6,CVTLINK              SYS1.LINKLIB DCB\n         ICM   R6,B'0111',DCBDEBA-IHADCB(R6) DEB ADDRESS\n         LA    R1,=C'LNKAUTH=LNKLST'\n         TM    DEBFLGS1-DEBBASIC(R6),DEBAPFIN    AUTH=YES?\n         BO    *+8                     YES, JUMP\n         LA    R1,=C'LNKAUTH=APFTAB'\n         AGO   .XLNKL                                 <38J>\n         L     R7,CVTLLTA              LINK LIST TABLE\n         USING LLT,R7\n         STRING 'LINK-LIST: ',(CVTLLTA,,X),                            X\n               (LLTNO,F,R9B),' ENTRIES',6X,((R1),14),INTO=LINE\n         BAL   R14,SPACE2              BLANK LINE\n         L     R8,LLTNO                # OF ENTRIES\n         LA    R9,LLTENTRY             LINK LIST TABLE ENTRY\n         USING LLTENTRY,R9\n*LOOP\nLNKLST41 MVC   LINE,BLANKS\n         MVC   DSNAME,LLTDSNAM         MOVE DSNAME TO UNPROTECTED STRGE\n         MVI   VOLSER,C'?'             $LOCATE REQUIRED\n         MVI   YYMMDD,C'?'             $OBTAIN REQUIRED\n         MVI   CATUNCAT,C'-'           APF-LIST SCAN REQUIRED\n         LA    R10,NEXTLINE\n         LA    R9,LLTNEXT              NEXT ENTRY\n         BCT   R8,LNKLST41\n         DROP  R7,R9                       <38J>\n.XLNKL   ANOP                              <38J>\n*ENDLOOP\n         BAL   R14,SPACE1              BLANK LINE\n         P$END\n         EJECT ,\n*----------------------------------------------------------------------\n*        LIST LPALSTXX LIBRARIES\n*----------------------------------------------------------------------\nLPALIST  P$BEGIN ,\n         AGO   .XLPAL                            <38J>\n         TM    CVTDCB,CVTMVSE          XA/ESA?\n         BZ    LPALST99                NO, JUMP\n         L     R1,CVTSMEXT             STORAGE MAP EXTENSION\n         L     R7,CVTEPLPS-CVTVSTGX(,R1)  LPA TABLE\n         USING LLT,R7                                <38J>\n         STRING 'LPA-LIST: ',((R7),,X),                                X\n               (LLTNO,F,R9B),' ENTRIES.',INTO=LINE\n         BAL   R14,SPACE2              BLANK LINE\n         L     R8,LLTNO                # OF ENTRIES\n         LA    R9,LLTENTRY-LLT(,R7)    FIRST LPA LIST TABLE ENTRY\n         USING LLTENTRY,R9                          <38J>\n*LOOP\nLPALST42 MVC   LINE,BLANKS\n         MVC   DSNAME,LLTDSNAM         MOVE DSNAME TO UNPROTECTED STRGE\n         MVI   VOLSER,C'?'             $LOCATE REQUIRED\n         MVI   YYMMDD,C'?'             $OBTAIN REQUIRED\n         LA    R10,NEXTLINE\n         LA    R9,LLTNEXT              NEXT ENTRY\n         BCT   R8,LPALST42\n*ENDLOOP\n         BAL   R14,SPACE1              BLANK LINE\n         DROP  R7,R9                   LLT,LLTENTRY <38J>\n.XLPAL   ANOP                                       <38J>\nLPALST99 P$END\n         EJECT ,\n*----------------------------------------------------------------------\n*        LIST AUTHORIZED LIBRARIES\n*----------------------------------------------------------------------\nAPFLIST  P$BEGIN ,\n         L     R7,CVTAUTHL             APF TABLE\n         LH    R8,0(,R7)               # OF ENTRIES\n         STRING 'APF-LIST: ',(CVTAUTHL,,X),                            X\n               ((R8),,R9B),' ENTRIES.',INTO=LINE\n         BAL   R14,SPACE2              BLANK LINE\n         ST    R10,APFTABLE            SAVE ADDR OF 1ST LINE\n*LOOP\nAPFLIST3 MVC   LINE,BLANKS\n         SLR   R1,R1\n         IC    R1,2(,R7)\n         SH    R1,=H'6'                VOLSER LENGTH\n         STRING (9(R7),(R1)),INTO=DSNAME MOVE DSNAME\n         MVC   VOLSER,3(R7)            MOVE VOLSER\n         MVI   YYMMDD,C'?'             $OBTAIN REQUIRED\n         MVI   CATUNCAT,C'?'           $LOCATE REQUIRED\n         LA    R10,NEXTLINE\n         LA    R7,7(R1,R7)             NEXT ENTRY\n         BCT   R8,APFLIST3\n*ENDLOOP\n         EJECT ,\n*----------------------------------------------------------------------\n*------- TRI DE LA TABLE APF-LIST -------------------------------------\n*----------------------------------------------------------------------\n         LA    R0,L'LINE               LONGUEUR D'UN POSTE\n         LR    R1,R10                  A(NEXTLINE)\n         SLR   R1,R0                   DERNIER POSTE DE LA TABLE\n         STM   R0,R1,APFTABLE+4        LONGUEUR, DERNIER POSTE\n*LOOP\nTRIZO    MVI   0(R13),0                ETAT INITIAL DE L'INDICATEUR\n         L     R15,APFTABLE            DEBUT DE LA TABLE  N=1\n         USING LINE,R15\n         SLR   R1,R0                   LE DERNIER POSTE EST TRIE\n*--LOOP\nTRIZOC   CLC   DSNAME,DSNAME+L'LINE    (POSTE N) GT (POSTE N+1) ?\n         BNH   TRIZOH                  SI NON, BRANCH\n         XC    LINE,NEXTLINE           SI (POSTE N+1) LT (POSTE N)\n         XC    NEXTLINE,LINE            RENVERSER LES\n         XC    LINE,NEXTLINE             DEUX POSTES.\n         MVI   0(R13),8                NOTER LE DECLASSEMENT\nTRIZOH   BXLE  R15,R0,TRIZOC           FAIRE N=N+1\n*--ENDLOOP\nTRIZON   CLI   0(R13),0                Y-A-T-IL EU UN DECLASSEMENT ?\n         BNE   TRIZO                   SI OUI, REFAIRE UN PASSAGE\n*ENDLOOP\n         DROP  R15                     LINE\n         BAL   R14,SPACE1              BLANK LINE\n         P$END\n         EJECT ,\n*----------------------------------------------------------------------\n*        SCAN TIOT\n*----------------------------------------------------------------------\nSCANTIOT P$BEGIN ,\n         AGO   .XSCTIOT                                <38J>\n         STRING 'TIOT:',INTO=LINE\n         BAL   R14,SPACE2              BLANK LINE\n         L     R5,TCBTIO               TIOT\n         USING TIOT1,R5\n         L     R6,PSAAOLD-PSA          MY ASCB\n         L     R6,ASCBOUCB-ASCB(,R6)   MY OUCB\n         USING OUCB,R6\n         STRING '  JOBNAME: ',TIOCNJOB,'  STEP: ',(TIOCSTEP+0,8),     XX\n               '  PROCSTEP: ',(TIOCSTEP+8,8),                         XX\n               '  PERFORM=',(OUCBNPG,H,L),                            XX\n               INTO=LINE\n         BAL   R14,SPACE2              BLANK LINE\n         GETMAIN R,LV=DYN24L           GET WORK AREA\n         LR    R8,R1                   PASS ADDRESS\n         USING IHADCB,R8\n         XC    IHADCB(DYN24L),IHADCB\n         MVI   DCBOFLGS,X'02'          DCB AVAILABLE\n         MVI   DCBMACR1,X'D0'          MACRF=E\n         MVI   DCBMACR2,X'08'          MACRF=E\n         MVC   ARLLEN,=Y(ARLEND-ARLLEN)  LENGTH OF ARL\n         MVC   ARLIDENT,=C'AR'         BLOCK ID\n         ST    R8,OPENLIST             OPENL\n         MVI   OPENLIST,X'80'          OPENL\n         LA    R0,ARL                  WORK AREA\n         LA    R1,OPENLIST+4           WORK AREA\n         ST    R0,0(,R1)               BUILD DCB EXIT LIST\n         MVI   0(R1),X'93'             ARL REQUEST\n         ST    R1,DCBEXLST             STORE INTO DCB\n*LOOP\nTIOT_GET CLI   TIOEDDNM,C' '           GOOD DDNAME?\n         BNH   TIOT_NXT                NO, NEXT ENTRY\n         MVC   DCBDDNAM,TIOEDDNM       MOVE DDNAME\n         RDJFCB MF=(E,OPENLIST)        BUILD AN ARL\n         LTR   R15,R15                 RDJFCB WENT OK?\n         BNZ   TIOT_NXT                NO, NEXT ENTRY\n         LH    R2,ARLRTRVD             DATA SET COUNT\n         L     R6,ARLAREA              GET ADDR OF AREA\n         USING JFCBDSNM-4,R6\n         SLR   R1,R1                   FIRST ENTRY\n*--LOOP\nTIOT_PUN ALR   R5,R1                   BUMP TIOT ENTRY ADDR\n         MVC   VOLMOUNT,BLANKS\n         SLR   R1,R1                   EXCP=0\n         SLR   R9,R9                   PREPARE ICM\n         ICM   R9,B'0111',TIOEFSRT     UCB ADDRESS\n         BZ    TIOT_P4                 NO UCB, SKIP TCT SCAN\n         USING UCBOB,R9\n         MVC   UNITNAME+8(4),UCBTYP    DEVICE TYPE\n         BAL   R14,GETUNIT             GET UNITNAME\nTIOT_TCT LA    R1,TIOENTRY             POINT TO CURRENT TIOT ENTRY\n         SL    R1,TCBTIO               CHANGE ADDRESS TO OFFSET\n*\n         L     R14,TCBTCT              TCBTCT\n         USING SMFTCT,R14              TCBTCT\n         L     R15,TCTIOTBL            START OF I/O MEASUREMENT TABLE\n         LA    R15,TCTIODSP-TCTTIOT(,R15)  FIRST DD ENTRY\n         USING TCTDCBTD,R15\n*----LOOP\n@TCT11   CL    R1,TCTDCBTD             SAME TIOT OFFSET?\n         BE    @TCT21                  YES, EXIT LOOP\n         LA    R15,TCTDCBLE            NEXT LOOKUP TABLE ENTRY\n         ICM   R0,B'1111',TCTDCBLE     END OF TABLE ?\n         BNZ   @TCT11                  NOT YET, TRY NEXT DD ENTRY\n*----ENDLOOP\n         SLR   R1,R1                   NOT FOUND, EXCP COUNT IS ZERO\n         B     @TCT29\n@TCT21   L     R1,TCTIOTSD             OFFSET IN I/O MEASURE. TABLE\n         A     R1,TCTIOTBL             =A(TCTTIOT)\n         L     R1,TCTDCTR-TCTDDENT(,R1) EXCP COUNT\n         DROP  R14,R15                 TCT\n*\n@TCT29   TM    UCBFL5,UCBSMS           SMS VOL?     X'20'\n         BZ    TIOT_P4                 NO, JUMP\n         MVC   VOLMOUNT(3),=C'SMS'     YES, SHOW IT\nTIOT_P4  LTR   R9,R9                   VALID UCB?\n         BNZ   TIOT_P6                 YES, JUMP\n         LA    R9,BLANKS               NO, USE DUMMY\nTIOT_P6  DS    0H\n         STRING 2X,TIOEDDNM,1X,JFCBDSNM,1X,(JFCBVOLS,6),1X,UNITNAME,   X\n               1X,((R1)),1X,UCBNAME,1X,VOLMOUNT,INTO=LINE\n         LA    R10,NEXTLINE\n         AH    R6,0(,R6)               BUMP UP TO NEXT ENTRY\n         SLR   R1,R1                   PREPARE IC\n         IC    R1,TIOELNGH             LOAD LENGTH OF CURRENT ENTRY\n         BCT   R2,TIOT_PUN             LOOP UNTIL LAST DSN PRINTED\n*--ENDLOOP\n         SLR   R0,R0\n         ICM   R0,B'0111',ARLRLEN      LENGTH OF RETRIEVAL AREA\n         L     R1,ARLAREA              ADDRESS OF AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE ALLOC RETR AREA\nTIOT_NXT SLR   R1,R1                   PREPARE IC\n         ICM   R1,B'0001',TIOELNGH     LOAD/TEST LNGTH OF CURRENT ENTRY\n         LA    R5,0(R1,R5)             BUMP UP TO NEXT ENTRY\n         BNZ   TIOT_GET                LOOP THROUGH TIOT\n*ENDLOOP\n         BAL   R14,SPACE1              BLANK LINE\n         FREEMAIN R,LV=DYN24L,A=(R8)\n*8       DROP  R6,R9,R8                JFCB, UCB, IHADCB\n         DROP  R6                                 <38J>\n         DROP  R9                                 <38J>\n         DROP  R8                                 <38J>\n.XSCTIOT ANOP                                     <38J>\n         P$END\n         EJECT ,\n*----------------------------------------------------------------------\n*        DISPLAY TCB TREE AND RB CHAINS\n*----------------------------------------------------------------------\nTCB_TREE P$BEGIN\n         L     R4,JSTCB                THE JOB STEP TCB\n         STRING 'TCB TREE AND RB CHAINS:',INTO=LINE\n         BAL   R14,SPACE2              BLANK LINE\n         STRING 4X,'TCB ADDRESS',19X,INTO=LINE,                        X\n               'PROGRAM     IC    STAB  CDFLGS    DDNAME'\n         BAL   R14,SPACE2              BLANK LINE\n         SLR   R3,R3                   INDENTATION INDEX\n*LOOP\nTREE100  STCM  R4,B'0111',DWD          STORE TCB ADDR\n         STRING (BLANKS,4(R3)),(DWD,3,X),INTO=LINE\n         L     R5,TCBRBP               POINT TO TOP RB\n         LA    R9,WK256                START OF RB TABLE\n*\n*        BUILD RB TABLE\n*--LOOP\nTREE110  ICM   R5,B'1000',CVTPTR       CLEAN UP HI-ORDER BYTE\n         SH    R5,=Y(RBBASIC-RBPREFIX) POINT TO RBPREFIX\n         USING RBPREFIX,R5\n         ST    R5,0(,R9)               STORE RB ADDRESS\n         TM    RBSTAB2,RBTCBNXT        CHECK FOR END OF CHAIN\n         L     R5,RBLINK               POINT TO PREVIOUS RB (OR TCB)\n         LA    R9,4(,R9)               BUMP UP TO NEXT TABLE ENTRY\n         BZ    TREE110                 JUMP IF RB FOR 1ST ATTACHED PGM\n*--ENDLOOP\n*\n*        PROCESS RB TABLE BACKWARDS\n*--LOOP\nTREE200  SH    R9,=H'4'                PREVIOUS ENTRY IN RB TABLE\n         L     R5,0(,R9)               LOAD RB ADDRESS\n         CLI   RBSTAB1,RBFTPRB         IS THIS A PRB?\n         BNE   TREE280                 NO, IGNORE IT\n         TM    RBCDFLGS,RBCDSYNC       CHECK FLAGS\n         BO    TREE260                 JUMP IF IT IS A SYNCH PRB\n         L     R1,RBCDE                POINT TO CDE/LPDE\n         STRING INTO=(LINE+30,L'LINE),4X,                             XX\n               (CDNAME-CDENTRY(R1),8),4X,      PGM NAME               XX\n               (RBINTCOD,2,X),4X,      INTERRUPT CODE <38J>           XX\n               (RBSTAB,2,X),4X,        STATUS BYTE                    XX\n               (RBCDFLGS,,X)           FLAGS\n*8             (RBWLIC+3,1,X),         IC\n         B     TREE270\nTREE260  MVC   DWD,RBGRS15             PICK UP ENTRY POINT ADDRESS\n         NI    DWD+3,X'FE'             SET BIT 31 TO ZERO\n         STRING INTO=(LINE+30,L'LINE),4X,                             XX\n               (DWD,4,X),4X,           EP ADDRESS                     XX\n               (RBINTCOD,2,X),4X,      INTERRUPT CODE <38J>           XX\n               (RBSTAB,2,X),4X,                                       XX\n               (RBCDFLGS,,X)\n*8             (RBWLIC+3,1,X),\n*\nTREE270  LA    R10,NEXTLINE            NEXT LINE\nTREE280  LA    R0,WK256                CHECK FOR END OF CHAIN\n         CR    R9,R0                   CHECK FOR END OF CHAIN\n         BH    TREE200                 LOOP THROUGH RB TABLE\n*--ENDLOOP\n         BAL   R14,SCANTCB             GET NEXT TCB\n         BNZ   TREE100                 PROCESS NEXT TCB\n*ENDLOOP\n         BAL   R14,SPACE1              BLANK LINE\n         P$END\n         EJECT ,\n*----------------------------------------------------------------------\n*        DISPLAY JPAQ (CDE CHAIN)\n*----------------------------------------------------------------------\nJPAQ     P$BEGIN ,\n         L     R4,JSTCB                THE JOB STEP TCB\n         STRING 'JPAQ:',INTO=LINE\n         BAL   R14,SPACE2              BLANK LINE\n         L     R5,TCBJPQ               POINT TO FIRST CDE IN CHAIN\n         USING CDENTRY,R5\n         STRING '   NAME     ENTPT     USE ',                          X\n               ' ATTRB SP ATTR ATTR2',                                 X\n               '  MAJ-CDE    LENGTH   LOAD-PNT',INTO=LINE\n         BAL   R14,SPACE2              BLANK LINE\n*LOOP\nJPAQ21   L     R6,CDXLMJP              POINT TO XL (OR MAJOR CDE)\n         TM    CDATTR,CDMIN            CHECK ATTRIBUTES\n         BO    JPAQ25                  JUMP IF THIS IS A MINOR CDE\n         USING XTLST,R6\n         STRING 3X,CDNAME,1X,(CDENTPT,,X),2X,(CDUSE,,X),3X,            X\n               (CDATTRB,,X),2X,(CDATTR,,X),4X,           <38J>         X\n               (CDATTR2,,X),14X,(XTLMSBLN,,X),3X,(XTLMSBAD,,X),        X\n               INTO=LINE\n*8             (CDSP,,X)\n         B     JPAQ29\nJPAQ25   DS    0H\n         STRING 3X,CDNAME,1X,(CDENTPT,,X),9X,(CDATTRB,,X),6X,          X\n               (CDATTR,,X),4X,(CDATTR2,,X),3X,(CDNAME-CDENTRY(R6),8),  X\n               INTO=LINE\nJPAQ29   LA    R10,NEXTLINE            NEXT LINE\n         ICM   R5,B'1111',CDCHAIN      CHECK FOR END OF CHAIN\n         BNZ   JPAQ21                  LOOP THROUGH RB TABLE\n*ENDLOOP\n         DROP  R5,R6                   CDE, XTLST\n         BAL   R14,SPACE1              BLANK LINE\n         P$END\n         DROP  R3                      CVT\n         EJECT ,\n*----------------------------------------------------------------------\n*        DISPLAY LOAD-LISTS\n*----------------------------------------------------------------------\nLOADLIST P$BEGIN\n         L     R4,JSTCB                THE JOB STEP TCB\n         STRING 'LOAD-LIST:',INTO=LINE\n         LA    R10,NEXTLINE\n         SLR   R3,R3                   INDENTATION INDEX\n*LOOP\nLOADL11  ICM   R9,B'1111',TCBLLS       POINT TO LAST LLE IN CHAIN\n         BZ    LOADL80                 SKIP THIS TCB IF NO LLE CHAIN\n         USING LLE,R9\n*\n         BAL   R14,SPACE1              BLANK LINE\n         STCM  R4,B'0111',DWD          STORE TCB ADDR\n         L     R5,TCBRBP               TOP RB\n         USING RBBASIC,R5\n         TM    RBCDFLGS,RBCDSYNC       CHECK FLAGS\n         BNO   *+8                     JUMP IF IT IS NOT A SYNCH PRB\n         ICM   R5,B'0111',RBLINK+1     POINT TO PREVIOUS RB IF SYNCH RB\n         L     R5,RBCDE                POINT TO CDE/LPDE\n         USING CDENTRY,R5\n         STRING '  TCB ',(DWD,3,X),'  PGM ',CDNAME,INTO=LINE\n         LA    R10,NEXTLINE\n*--LOOP\nLOADL70  STCM  R9,B'0111',DWD          STORE LLE ADDR\n         L     R5,LLECDPT              CDE PTR\n         STRING '    LLE ',(DWD,3,X),2X,CDNAME,2X,(CDENTPT,,X),2X,    XX\n               (LLECOUNT,,X),1X,(LLESYSCT,,X),INTO=LINE\n         LA    R10,NEXTLINE\n         ICM   R9,B'1111',LLECHN       CHECK FOR END OF CHAIN\n         BNZ   LOADL70                 LOOP THROUGH LOAD LIST\n*--ENDLOOP\nLOADL80  BAL   R14,SCANTCB             NEXT TCB IN TREE\n         BNZ   LOADL11\n*ENDLOOP\n         BAL   R14,SPACE1                                         <38J>\n         P$END\n         EJECT ,\n*----------------------------------------------------------------------\n*        CLOSE SYSPRINT                                           <38J>\n*----------------------------------------------------------------------\nCLOSE    P$BEGIN\n         STRING 'DONE',INTO=LINE\n         BAL   R14,SPACE2\n         TM    DY8DCB+(DCBOFLGS-IHADCB),DCBOFOPN OPENED?\n         BNO   CLOSE99\n         MVC   DY8CLOSE(L$CLOSE),MODLCLOS        COPY CLOSE\n         CLOSE DY8DCB,MF=(E,DY8CLOSE)            CLOSE SYSPRINT\nCLOSE99  P$END\n         EJECT ,\n*----------------------------------------------------------------------\n*        INVOKE ISPF/PDF \"BRIF\" SERVICE\n*----------------------------------------------------------------------\nBRIF     P$BEGIN\n*8       DELETE EP=IEFEB4UV            NO LONGER NEEDED\n*\n*        ATTACH THE LOCATE/OBTAIN SUB-TASK\n*\n         L     R1,=A(SUBTASK)\n         IDENTIFY EP=SUB_TASK,ENTRY=(1)\n         LA    R1,DYN                  PARM FOR THE SUBTASK\n         ATTACH  EP=SUB_TASK,ECB=ECB1,SF=(E,ATTACHL)\n         ST    R1,ECB1+4               KEEP TCB ADDRESS\n*\nBRIF200  LA    R0,LINES                FIRST LINE\n         LR    R1,R10                  LAST LINE\n         SR    R1,R0                   SIZE\n         SR    R0,R0\n         D     R0,=A(L'LINES)          NUMBER OF LINES\n         ST    R1,NUMLINES             FOR BRIF\n*\n         ST    R13,DYN                 DIALOG DATA PTR: A(DYN)\n         LA    R14,=C'BRIF '           FUNCTION NAME\n         LA    R15,TITLE               DSNAME (TITLE)\n         LA    R0,=C'F '               RECFM\n         LA    R1,=A(L'LINES)          LENGTH\n         LA    R2,=A(RDRTNE)           READ ROUTINE\n         SLR   R3,R3                   COMMAND ROUTINE\n         LA    R4,DYN                  PARM FOR READ ROUTINE\n         STM   R14,R4,ATTACHL\n         OI    ATTACHL+24,X'80'        END-OF-LIST FLAG\n*\n         LA    R1,ATTACHL              PARM LIST ADDRESS\n         L     R15,ISPLINK             LOAD INTERFACE ADDRESS\n         BALR  R14,R15             <== INVOKE \"BRIF\" SERVICE\n*\n         CLI   ECB1+4,X'FF'            DETACHED ALREADY?\n         BE    BRIF99                  YES, JUMP\n         DETACH ECB1+4                 DETACH SUBTASK\nBRIF99   P$END\n         EJECT ,\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n$LTORG   LOCTR ,                       SUBRTNS CALLED BY P$BEGIN RTNS\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\nTITLE    DC    C'SHOWMVS',X'00',C'PROGRAM',X'00',C'&VERMOD '\n         SPACE 2\n*----------------------------------------------------------------------\n*        SCAN LPA QUEUES TO LOCATE EPNAME FOR ADDR IN (R1)\n*----------------------------------------------------------------------\nCSVQUERY MVC   EP2,BLANKS              CLEAR OUTPUT AREA\n         AGO   .XCSVQ             <38J>\n         CL    R1,SVC88                THIS SVC USED?\n         BE    CSVQRY88                NO, GOBACK\n         LA    R1,0(,R1)               CLEAN-UP AMODE BIT\n         USING CVTMAP,R3\n*\n*        SCAN ACTIVE LPA QUEUE (MLPA/FLPA)\n*\n         L     R2,CVTQLPAQ             ACTIVE LPA QUEUE\n         ICM   R2,B'1111',0(R2)        FIRST LPDE ON QUEUE\n         BZ    CSVQRY20                EMPTY QUEUE, SKIP SEARCH\n         USING LPDE,R2\n         MVI   EP2,C'A'                ACTIVE LPA Q\n*LOOP\nCSVQRY11 L     R15,LPDENTP             ENTRY POINT\n         LA    R15,0(,R15)             CLEAN UP AMODE BIT\n         CR    R1,R15                  IS THIS MY ENTRY POINT?\n         BE    CSVQRY82                MODULE FOUND, JUMP\n         ICM   R2,B'1111',LPDECHN      NEXT LPDE ADDR\n         BNZ   CSVQRY11                NO FINISHED YET, LOOP FURTHER\n*ENDLOOP\n*        SCAN PAGEABLE LPA QUEUE (PLPA)\n*\nCSVQRY20 L     R2,CVTLPDIA             FIRST LPDE\n         USING LPDE,R2\n         MVI   EP2,C'P'                PAGEABLE LPA Q\n*LOOP\nCSVQRY21 L     R15,LPDENTP             ENTRY POINT\n         LA    R15,0(,R15)             CLEAN UP AMODE BIT\n         CR    R1,R15                  IS THIS MY ENTRY POINT?\n         BE    CSVQRY82                MODULE FOUND, JUMP\n         TM    LPDEATTR,LPDEMIN        MINOR LPDE?\n         BO    CSVQRY22                YES, IGNORE\n         LM    R15,R0,LPDEXTLN         LENGTH/LOAD ADDR\n         CR    R0,R1\n         BH    CSVQRY22                OUTSIDE BOUNDARIES, JUMP\n         AR    R0,R15\n         CR    R0,R1\n         BH    CSVQRY82                MODULE FOUND, JUMP\nCSVQRY22 LA    R2,LPDEXTAD+4           BUMP LPDE ADDR\n         CLI   LPDENAME,X'FF'          END OF LPA DIRECTORY?\n         BNE   CSVQRY21                NO, LOOP FURTHER\n*ENDLOOP\n         MVC   EP2+2(4),=C'*NUC'       EP FOUND IN THE NUCLEUS\n         MVI   EP2,C'N'                NUCLEUS\n         L     R2,CVTSMEXT             STORAGE MAP EXTENSION\n         USING CVTVSTGX,R2\n         CL    R1,CVTRWNS              NUC?\n         BL    CSVQRY61                NO, JUMP\n         CL    R1,CVTERWNE             NUC?\n         BLR   R14                     YES, GOBACK\n*\nCSVQRY61 MVC   EP2+2(5),=C'*FLPA'      EP FOUND IN FIXED LPA\n         MVI   EP2,C'F'                FIXED LPAQ\n         CL    R1,CVTFLPAS             FLPA (BELOW)\n         BL    CSVQRY62                NO, JUMP\n         CL    R1,CVTFLPAE             END OF FLPA (BELOW)\n         BLR   R14                     YES, GOBACK\nCSVQRY62 CL    R1,CVTEFLPS             FLPA (ABOVE)\n         BL    CSVQRY63                NO, JUMP\n         CL    R1,CVTEFLPE             END OF FLPA (ABOVE)\n         BLR   R14                     YES, GOBACK\n*\nCSVQRY63 MVC   EP2+2(5),=C'*MLPA'      EP FOUND IN FIXED LPA\n         MVI   EP2,C'F'                MODIFIED LPAQ\n         CL    R1,CVTMLPAS             MLPA (BELOW)\n         BL    CSVQRY64                NO, JUMP\n         CL    R1,CVTMLPAE             END OF MLPA (BELOW)\n         BLR   R14                     YES, GOBACK\nCSVQRY64 CL    R1,CVTEMLPS             MLPA (ABOVE)\n         BL    CSVQRY71                NO, JUMP\n         CL    R1,CVTEMLPE             END OF MLPA (ABOVE)\n         BLR   R14                     YES, GOBACK\n*\nCSVQRY71 L     R2,CVTGDA               POINT TO GDA\n         USING GDA,R2\n         MVC   EP2+2(5),=C'*CSA '      EP FOUND IN CSA\n         MVI   EP2,C'C'                CSA\n         L     R0,GDACSA               CSA (BELOW)\n         CLR   R1,R0                   WITHIN CSA?\n         BL    CSVQRY72                NO, JUMP\n         AL    R0,GDACSASZ             END OF CSA (BELOW)\n         CLR   R1,R0                   WITHIN CSA?\n         BLR   R14                     YES, GOBACK\nCSVQRY72 L     R0,GDAECSA              CSA (ABOVE)\n         CLR   R1,R0                   WITHIN CSA?\n         BL    CSVQRY73                NO, JUMP\n         AL    R0,GDAECSAS             END OF CSA (ABOVE)\n         CLR   R1,R0                   WITHIN CSA?\n         BLR   R14                     YES, GOBACK\nCSVQRY73 MVC   EP2,BLANKS              RETURN BLANK NAME\n         BR    R14\n*\n         USING LPDE,R2\nCSVQRY82 MVC   EP2+2(8),LPDENAME       PASS EP NAME\n         BR    R14\n         DROP  R2,R3                   LPDE, CVT\nCSVQRY88 MVI   EP2,C'-'                SVC IS NOT IN SERVICE\n.XCSVQ   ANOP                  <38J>\n         BR    R14\n         EJECT ,\n*----------------------------------------------------------------------\n*        CONVERT UCBTYP TO UNITNAME\n*----------------------------------------------------------------------\nGETUNIT  CLC   UNITNAME+12(4),UNITNAME+8   SAME DEVICE TYPE?\n         BER   R14                     YES, UNITNAME IS OK ALREADY\n         MVC   UNITNAME+12(4),UNITNAME+8   SAVE DEVICE TYPE\n         ST    R14,DYN                 SAVE R14\n         AGO   .XGUNT                  <38J>\n         MVI   TENWORDS+20,X'01'       RETURN A LOOK-UP VALUE (BIT7)\n         MVI   TENWORDS+21,X'00'       CLEAR UNUSED BYTE\n         LA    R14,UNITNAME            UNITNAME+DEVTYPE\n         LA    R15,TENWORDS+20         FLAGS\n         STM   R14,R15,TENWORDS\n         OI    TENWORDS+4,X'80'        END-OF-LIST FLAG\n         LA    R1,TENWORDS             PARM LIST ADDRESS\n         L     R15,IEFEB4UV            LOAD ROUTINE ADDRESS\n         BALR  R14,R15                 GET UNIT NAME\n         LTR   R15,R15\n         BNZ   GETUNIT6                BAD RETURN CODE, QUIT\n         MVI   TENWORDS+20,X'20'       RETURN A UNIT NAME (BIT2)\n         LA    R1,TENWORDS             PARM LIST ADDRESS\n         L     R15,IEFEB4UV            LOAD ROUTINE ADDRESS\n         BALR  R14,R15                 GET UNIT NAME\n         LTR   R15,R15\n         BZ    GETUNIT9                GOOD RETURN CODE, GOBACK\n.XGUNT   ANOP                          <38J>\nGETUNIT6 MVC   UNITNAME,BLANKS         CONVERSION DID NOT WORK\nGETUNIT9 L     R14,DYN                 RESTORE R14\n         BR    R14\n         EJECT ,\n*----------------------------------------------------------------------\n*        PRINT A BLANK LINE\n*----------------------------------------------------------------------\nSPACE2   LA    R10,NEXTLINE\nSPACE1   MVC   LINE,BLANKS\n         LA    R10,NEXTLINE\n*----------------------------------------------------------------------\n*  SHOWOUT - OUTPUT LINES THAT \"STRING\" HAS PRODUCED SO FAR       <38J>\n*            USE QSAM \"PUT\" RATHER THAN ISPF \"BRIF\"\n*----------------------------------------------------------------------\nSHOWOUT  DS    0H\n         PUSH  USING\n         STM   R0,R15,DY8OUT           FREE UP SOME REGS\n         BALR  R12,0\n         USING *,R12\n         LR    R8,R13                  SAVE DYN PTR\n         USING DYN,R8\n         LA    R9,DY8DCB               @ DCB\n         USING IHADCB,R9\n         DROP  R13                     DON'T CONFUSE ASSEMBLER\n         LA    R13,DY8SA               GIVE PUT A TEMP SAVEAREA\n*\n         TM    DCBOFLGS,DCBOFOPN       DCB ALREADY OPENED?\n         BO    OUTOPEN\n*\n         MVC   DY8DCB(L$DCB),DCBPRINT            COPY DCB\n         MVC   DY8OPEN(L$OPEN),MODLOPEN          COPY OPEN\n         OPEN  ((R9),(OUTPUT)),MF=(E,DY8OPEN)    OPEN SYSPRINT OUTPUT\n         TM    DCBOFLGS,DCBOFOPN                 DID IT OPEN OK?\n         BO    OPENOK\nU100     ABEND 100,DUMP                          SYSPRINT OPEN FAILED\n*\nOPENOK   DS    0H\n         LA    R0,LINES\n         ST    R0,DY8PTRS              @ 1ST REC\n         LA    R0,L$LINE\n         ST    R0,DY8PTRS+4            L' REC\n*\nOUTOPEN  DS    0H\n         LM    R5,R6,DY8PTRS           R5-R7: @REC, L'REC, @CURRENT\n         LA    R7,LINE                 MOST RECENT LINE\n         ST    R7,DY8PTRS              FOR NEXT TIME\n         BCTR  R7,0                    DON'T WRITE CURRENT LINE\n*\nOUTPUT   DS    0H\n         PUT   (R9),(R5)               WRITE SYSPRINT LINE\n         BXLE  R5,R6,OUTPUT            UNTIL CAUGHT UP WITH STRING\n*\n         LM    R0,R15,DY8OUT           PUT REGS BACK AS NORMAL\n         POP   USING\n         BR    R14\n*\nDCBPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,                      +\n               RECFM=FB,LRECL=L$LINE,BLKSIZE=3200\nL$DCB    EQU   *-DCBPRINT\n*\nMODLOPEN OPEN  (0,(OUTPUT)),MF=L\nL$OPEN   EQU   *-MODLOPEN\n*\nMODLCLOS CLOSE (,),MF=L\nL$CLOSE  EQU   *-MODLCLOS\n         EJECT ,\n*----------------------------------------------------------------------\n*        BUILD A TRANSLATE TABLE FOR NON-PRINTABLE CHARACTERS\n*----------------------------------------------------------------------\nNONPRINT MVI   WK256,C' '              PRINTABLE CHARACTERS\n         MVC   WK256+1(255),WK256\n         MVC   WK256+X'4A'(7),=X'4A4B4C4D4E4F50'\n         MVC   WK256+X'5A'(8),=X'5A5B5C5D5E5F6061'\n         MVC   WK256+X'6A'(6),=X'6A6B6C6D6E6F'\n         MVC   WK256+X'7A'(6),=X'7A7B7C7D7E7F'\n         MVC   WK256+C'A'(10),=C'ABCDEFGHI'\n         MVC   WK256+C'J'(10),=C'JKLMNOPQR'\n         MVC   WK256+C'S'(9),=C'STUVWXYZ'\n         MVC   WK256+C'0'(10),=C'0123456789'\n         BR    R14\n         SPACE 3\n*----------------------------------------------------------------------\n*        TCB TREE SCAN SOUTINE\n*----------------------------------------------------------------------\nSCANTCB  LR    R1,R4                   SAVE TCB ADDRESS\n         L     R4,TCBLTC-TCB(,R4)      DAUGHTER\n         LA    R3,1(,R3)               INDENTATION INDEX\n*LOOP\nSCANTCB2 LTR   R4,R4                   CHECK FOR END OF CHAIN\n         BNZR  R14                     PASS VALID TCB ADDRESS\n         L     R4,TCBNTC-TCB(,R1)      SISTER\n         L     R1,TCBOTC-TCB(,R1)      MOTHER\n         BCT   R3,SCANTCB2             INDENTATION INDEX\n*ENDLOOP\n         SR    R4,R4                   SET CC=0\n         BR    R14                     GOBACK\n         DROP\n         EJECT ,\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n$FARRTNE LOCTR                         FAR ROUTINES\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n*        BRIF READ ROUTINE\n*----------------------------------------------------------------------\nRDRTNE   SAVE  (14,12),,*\n         BALR  R12,0\n         USING *,R12\n         L     R2,00(,R1)              RECORD DATA READ\n*@@      L     R3,04(,R1)              LENGTH\n         L     R4,08(,R1)              RELATIVE RECORD NUMBER\n         L     R5,12(,R1)              PTR TO DIALOG DATA AREA\n         L     R5,0(,R5)               POINT TO DYN\n         USING DYN,R5\n         L     R11,BASEREG             BASE REGISTER\n         USING BASEADDR,R11\n         TM    ECB1,X'40'              SUBTASK ENDED ALREADY?\n         BZ    RDRTNE3                 NOT YET, JUMP\n         CLI   ECB1+4,X'FF'            DETACHED ALREADY?\n         BE    RDRTNE3                 YES, JUMP\n         CLC   MYTCB,PSATOLD-PSA       AM I UNDER THE RIGHT TCB?\n         BNE   RDRTNE3                 NO, JUMP\n         DETACH ECB1+4                 DETACH SUBTASK\n         MVI   ECB1+4,X'FF'            MARK IT DETACHED\n*\nRDRTNE3  L     R1,0(,R4)               LINE NUMBER REQUESTED BY BRIF\n         C     R1,NUMLINES             CHECK FOR END OF DATA\n         BH    RDRTNE8                 JUMP IF TOO BIG\n         BCTR  R1,0                    DOWN BY 1\n         M     R0,=A(L'LINE)           OFFSET TO LAST LINE\n         LA    R10,LINES(R1)           CHANGE OFFSET TO ADDRESS\n         ST    R10,0(,R2)              PASS DATA ADDRESS\n         RETURN (14,12),RC=0           GOBACK TO EDIT\n*\n*        END OF DATA - RETURN MAX LINE#\n*\nRDRTNE8  L     R1,NUMLINES             NUMBER OF LINES\n         ST    R1,0(,R4)               PASS IT TO BRIF\n         BCTR  R1,0                    DOWN BY 1\n         M     R0,=A(L'LINE)           OFFSET TO LAST LINE\n         LA    R10,LINES(R1)           CHANGE OFFSET TO ADDRESS\n         ST    R10,0(,R2)              PASS DATA ADDRESS\n         RETURN (14,12),RC=8\n         DROP\n         EJECT ,\n*----------------------------------------------------------------------\n*\n*        SUB-TASK USED FOR ASYNCHRONOUS LOCATE/OBTAIN\n*\n*        THIS SUB-TASK ALLOWS IMPATIENT USERS (LIKE ME) TO SEE THE\n*        FIRST SCREEN WITHOUT ANY DELAY WHILE VOLUME AND VTOC\n*        INFORMATION (WHICH REQUIRE I/O) IS OBTAINED FOR THE LINK-LIST,\n*        LPA-LIST AND APF-LIST DISPLAYS.\n*\n*        WHEN THE USER SCROLLS TO THESE SCREENS (WHICH TAKES A FEW\n*        SECONDS), VOLUME AND VTOC INFORMATION WILL HAVE BEEN OBTAINED\n*        IN THE BACKGROUND, WITHOUT THE USER HAVING TO WAIT.\n*\n*        IF A SPEEDY USER CHAINS A \"FIND\" COMMAND TO THE INVOCATION\n*        OF THIS PROGRAM (BY ISSUING \"TSO SHOWMVS;F LPA-LIST\" FOR\n*        EXAMPLE), THEN HE/SHE WILL PROBABLY GET A BUNCH OF QUESTION\n*        MARKS INSTEAD OF VOLUME AND VTOC INFORMATION (SURPRISE,\n*        SURPRISE !!).  AFTER A FEW SECONDS OF HESITATION, THIS USER\n*        IS LIKELY TO HIT \"ENTER\" OR SCROLL (UP OR DOWN) TO SEE IF\n*        OTHER BIZARRE THINGS HAPPEN, WHICH LEAVES ENOUGH TIME TO THE\n*        SUBTASK TO FINISH OBTAINING THE INFORMATION AND REPLACE THE\n*        QUESTION MARKS WITH PERTINENT DATA.\n*\n*----------------------------------------------------------------------\nSUBTASK  BALR  R12,0\n         USING *,R12\n         LR    R9,R1                   A(DYN)\n         USING DYN,R9\n         L     R11,BASEREG             BASE REGISTER\n         USING BASEADDR,R11\n         LA    R10,LINES               FIRST LINE\n         USING LINE,R10\n*\n*              VOLSER\n*LOOP\nSUBT11   CLI   VOLSER,C'?'             VOLSER FOUND ALREADY?\n         BNE   SUBT21                  YES, JUMP\n         MVC   VOLSER,=C'??????'       NOT FOUND\n         L     R14,=X'44,00,00,00'     CAMLST FLAGS\n         LA    R15,DSNAME              ENTRY NAME\n         SLR   R0,R0                   NO CVOL PTR\n         LA    R1,WK256                WORK AREA\n         STM   R14,R1,TENWORDS         BUILD CAMLIST\n         LOCATE TENWORDS\n         LTR   R15,R15\n         BNZ   SUBT21                  NOT FOUND (OR OTHER ERROR)\n         MVC   VOLSER,WK256+6          MOVE VOLSER\n*YYMMDD\nSUBT21   CLI   YYMMDD,C'?'             DATE FOUND ALREADY?\n         BNE   SUBT31                  YES, JUMP\n         MVC   YYMMDD,BLANKS           BLANK OUT DATE FIELD\n         L     R14,=X'C1,00,00,00'     CAMLST FLAGS\n         LA    R15,DSNAME              DATA SET NAME OF CCHHR\n         LA    R0,VOLSER               VOLUME SERIAL\n         LA    R1,DS1FMTID             WORK AREA\n         STM   R14,R1,TENWORDS         BUILD CAMLIST\n         OBTAIN TENWORDS               READ F1-DSCB\n         LTR   R15,R15\n         BNZ   SUBT31                  NOT FOUND (OR OTHER ERROR)\n         SLR   R0,R0\n         ICM   R0,B'0001',DS1CREDT+0   CREATION YEAR\n         CVD   R0,DWD\n         ICM   R1,B'0011',DWD+6        ....0YYC\n         SLL   R1,012                  .0YYC000\n         ICM   R0,B'0011',DS1CREDT+1   CREATION DAY\n         CVD   R0,DWD\n         ICM   R1,B'0011',DWD+6        .0YYDDDC\n         L     R15,=A(@JDATE)          DATE CONVERT ROUTINE\n         BALR  R14,R15                 CONVERT JULIAN TO YYMMDD\n         MVC   YYMMDD(6),0(R1)         YYMMDD\n*UNCAT=UNCAT\nSUBT31   CLI   CATUNCAT,C'?'           CATALOG STATUS KNOWN ALREADY?\n         BNE   SUBT41                  YES, JUMP\n         MVC   CATUNCAT,=C'UNCAT'      MOVE STATUS\n         L     R14,=X'44,00,00,00'     CAMLST FLAGS\n         LA    R15,DSNAME              ENTRY NAME\n         SLR   R0,R0                   NO CVOL PTR\n         LA    R1,WK256                WORK AREA\n         STM   R14,R1,TENWORDS         BUILD CAMLIST\n         LOCATE TENWORDS\n         LTR   R15,R15\n         BNZ   SUBT41                  NOT FOUND (OR OTHER ERROR)\n         CLC   VOLSER,WK256+6          SAME VOLSER?\n         BNE   SUBT41                  NO, JUMP\n         MVC   CATUNCAT,BLANKS         CATALOGED=YES\n*UNCAT=APF\nSUBT41   CLI   CATUNCAT,C'-'           APF-LIST STATUS KNOWN ALREADY?\n         BNE   SUBT51                  YES, JUMP\n         MVC   CATUNCAT,=C'APF  '      MOVE STATUS\n         LM    R15,R1,APFTABLE         APF TABLE\n         LTR   R15,R15                 TEST\n         BZ    SUBT51                  TEST\n*--LOOP\nSUBT44   CLC   DSNAME,DSNAME-LINE(R15) MY DSNAME?\n         BNE   SUBT45                  NO, JUMP\n         CLC   VOLSER,VOLSER-LINE(R15) MY VOLSER?\n         BE    SUBT51                  YES, QUIT\nSUBT45   BXLE  R15,R0,SUBT44           NEXT ENTRY\n*--ENDLOOP\n         MVC   CATUNCAT,BLANKS         APF=NO\nSUBT51   LA    R10,NEXTLINE            NEXT LINE\n         CLI   LINE,00                 LAST LINE?\n         BNE   SUBT11                  NO, LOOP MORE\n*ENDLOOP\n         SVC   3                       GOOD BYE\n         DROP\n         EJECT ,\n*----------------------------------------------------------------------\n*        RECOVERY ROUTINE\n*----------------------------------------------------------------------\nRECOVERY LA    R15,0012                R15=12\n         CR    R0,R15                  SDWA ALLOCATED?\n         BALR  R15,0                   LOCAL BASE\n         BNE   RCVY$200-*(,R15)        YES, JUMP\n         SR    R15,R15                 SET RC=0 (IF R0=12)\n         BR    R14                     RETURN TO EXIT PROLOG\nRCVY$200 BALR  R15,0\n         SAVE  (14,12),,'RECOVERY ROUTINE'\n         BALR  R12,0\n         USING *,R12\n         LR    R8,R1\n         USING SDWA,R8\n         LR    R14,R13\n         L     R13,SDWAPARM            =A(DYN)\n         LA    R13,DYN_RCVY-DYN(,R13)  =A(DYN_RCVY)\n         ST    R14,4(,R13)\n         ST    R13,8(,R14)\n         USING DYN_RCVY,R13\n         ICM   R4,B'1111',RETRY        LOAD/TEST RETRY ADDRESS\n         BNP   RCVY$999                NO RETRY, CONTINUE WITH ABEND\n         MVI   RETRY,X'FF'             INVALIDATE RETRY ADDRESS\n         MVC   SDWASRSV,SDWAGRSV       MOVE REGISTERS\n         MVC   SDWASR03,CVTPTR         R3=CVTADDR\n         MVC   SDWASR04,PSATOLD-PSA    R4=TCBADDR\n         MVC   SDWASR11,BASEREG        R11 (BASE REG)\n         MVC   SDWASR13,SDWAPARM       R13\n         L     R13,4(,R13)             R/TM SAVE AREA\n         SETRP WKAREA=(R8),RETADDR=(R4),RC=4,  <== RETRY               X\n               FRESDWA=YES,RETREGS=YES,REGS=(14,12)\nRCVY$999 L     R13,4(,R13)\n         SETRP WKAREA=(R8),REGS=(14,12),RC=00\n         DROP  ,                                                  <38J>\n         EJECT ,\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n$LTORG   LOCTR ,                                                  <38J>\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n         LTORG ,                                                  <38J>\n         EJECT ,\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n         STRING GENERATE               GENERATE LITERALS  <38J>\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n         EJECT ,\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n*        DYNAMIC STORAGE AREA\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\nDYN      DSECT                         DYNAMIC STORAGE AREA\n         DS    18F                     SAVE AREA FOR MAINLINE\nPARMADDR DS    A                       ADDR OF CALLER'S PARM OR CBUF\nDYN_RCVY DS    18F                     SAVE AREA FOR RECOVERY ROUTINE\nDWD      DS    D                       WORK AREA\nTENWORDS DS    10F                     WORK AREA\nJSTCB    DS    A(TCB)                  ADDRESS OF THE JOB-STEP TCB\nMYTCB    DS    A(TCB)                  ADDRESS OF MY TCB\nBASEREG  DS    A(R11)                  BASE REGISTERS FOR RECOVERY\nESTAEL   ESTAE MF=L\nP$END    DS    2A                      RETURN/RETRY ADDRESS\nRETRY    EQU   P$END+4,4,C'A'          RETRY ADDRESS\nNUMLINES DS    F                       NUMBER OF LINES\nAPFTABLE DS    A(LINE,L'LINE,NEXTLINE) APF-LIST\nBLANKS   DS    CL100                   A BUNCH OF BLANKS\nVOLMOUNT DS    C'STORAGE'              VOLUME MOUNT ATTRIBUTE\nIEFEB4UV DS    V(IEFEB4UV)             UNITNAME CONVERSION RTNE\nISPLINK  DS    V(ISPLINK)              ISPF DIALOG INTERFACE\nUNITNAME DS    CL8,XL4,XL4             IEFEB4UV\nZENVIR   DS    CL32                    ISPF ENVIRONMENT\nK1       DS    PL4                     COUNTER\nK2       DS    PL4                     COUNTER\nEP1      DS    CL10                    SVC TABLE\nEP2      DS    CL10                    SVC TABLE\nSVC88    DS    A                       UNUSED SVC NUMBER\nATTACHL  ATTACH SF=L\nECB1     DS    F,A(TCB)                COMMUNICATION ECB\n         IECSDSL1 1                    F1-DSCB\n         DS    XL5                     PADDING FOR OBTAIN\n         WK$OUT ,                      SHOWOUT WORKAREAS <38J>\n         DS    0F                                        <38J>\nWK256    DS    XL256,2D                265-BYTE WORK AREA\nLINES    DS    5000CL100               LINES FOR BRIF\nDYNL     EQU   *-DYN                   LENGTH OF DYNAMIC STORAGE AREA\n         SPACE 2\n         PRINT NOGEN                   SAVE PAPER\nPRINT    OPSYN ANOP                    SHUT'EM UP\n         SPACE 2\n*----------------------------------------------------------------------\n*        WORK AREA FOR RDJFCB\n*----------------------------------------------------------------------\nIHADCB   DCBD  DSORG=XE,DEVD=DA        IHADCB\n*8       IHAARL DSECT=NO               ALLOC RETRIEVAL LIST\n*8ENLIST DS    A(IHADCB,ARL)           OPEN LIST, DCB EXIT LIST\nOPENLIST DS    A(IHADCB,0)             OPEN LIST, DCB EXIT LIST\nDYN24L   EQU   *-IHADCB\n         SPACE 2\n*----------------------------------------------------------------------\n         DSECT\nLINE     DS    CL100                   CURRENT LINE\nL$LINE   EQU   *-LINE                                             <38J>\nDSNAME   EQU   LINE+2,44\nVOLSER   EQU   LINE+2+44+3,6\nYYMMDD   EQU   LINE+2+44+3+6+3,6\nCATUNCAT EQU   LINE+2+44+3+6+3+6+3,5   UNCAT\nNEXTLINE DS    CL100                   NEXT LINE\n         EJECT ,\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n*        MVS CONTROL-BLOCKS\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n* LOW STORAGE, PHYSICAL CONFIGURATION\n*----------------------------------------------------------------------\n         IHAPSA DSECT=YES              PREFIXED STORAGE AREA\n*        IHAPCCAT DSECT=YES            PCCA VECTOR TABLE\n         IHAPCCA DSECT=YES             PHYSICAL CONFIG. COMM. AREA\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n* COMMUNICATION VECTORS\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n         CVT   PREFIX=YES,DSECT=YES,LIST=NO\n         IHASCVT DSECT=YES,LIST=NO     SECONDARY CVT\n         IEFJESCT                      JES VECTOR TABLE\n         IEFJSCVT                      SUB-SYSTEM COMM. VECTOR TABLE\n         IEFJSSVT                      SUB-SYSTEM VECTOR TABLE\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n* REAL & VIRTUAL STORAGE MANAGEMENT\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n         IHAGDA                        GLOBAL DATA AREA\nL$GDA    EQU    *-GDA\n         IHALDA                        LOCAL  DATA AREA\n         IHAPQE ,                      VSM PARTITION QUEUE ELEMENT<38J>\n         IHASPQE ,                     VSM SUBPOOL QUEUE ELEMENT  <38J>\n         IHADQE ,                      VSM DESCRIPTOR Q ELEMENT   <38J>\n*----------------------------------------------------------------------\n*        ILRASMVT DSECT=YES            AUXILIARY STRGE MGR VECTOR TABLE\nASMVT    DSECT                         ILRASMVT\nASMFLAG1 DS    X                       FLAGS 1\nASMFLAG2 DS    X,2X                    FLAGS 2\nASMQUICK EQU   X'08'                   QUICK START IPL\nASMSART  DS    V(SART)                 SWAP ACTIVITY REFERENCE TABLE\nASMPART  DS    V(PART)                 PAGE ACTIVITY REFERENCE TABLE\n*----------------------------------------------------------------------\nPART     DSECT                         ILRPART\nPARTSIZE EQU   PART+04,4,C'X'          NUMBER OF ENTRIES IN THE PART\nPARTDSNL EQU   PART+24,4,C'X'          ADDR OF DSN LIST\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n* TASK MANAGEMENT\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n         IHAASCB                       ADDRESS SPACE CONTROL BLOCK\n         IKJTCB DSECT=YES,LIST=NO      TASK CONTROL BLOCK\n         IKJRB  DSECT=YES              REQUEST BLOCK              <38J>\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n* CONTENTS MANAGEMENT\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n         IHALPDE ,                     LPA DIRECTORY ENTRY\n         IHACDE ,                      CONTENTS DIRECTORY ENTRY\n         IHALLE ,                      LOAD-LIST ELEMENT\n         IHAXTLST ,                    EXTENT LIST\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n* IOS & DATA MANAGEMENT\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n         IEZDEB  LIST=NO               DATA EXTENT BLOCK\nTIOT     DSECT\n         IEFTIOT1                      TASK INPUT-OUTPUT TABLE\n         IEFUCBOB LIST=NO,PREFIX=NO    UNIT CONTROL BLOCK\nJFCB     DSECT\n         IEFJFCBN LIST=NO              JOB FILE CONTROL BLOCK\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n* SMF, SRM\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n         IEESMCA                       SMF ANCHOR\n         IEFTCT ,                      SMF TIMING CONTROL TABLE\n         IRAOUCB                       SRM PARMS\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n* PROGRAM PRODUCTS\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n*@@@     ICHPRCVT                      RACF\nRCVT     DSECT                         ICHPRCVT  <==CVTRAC\n         ORG   *+X'00AC'\nRCVTVERS DS    XL1                     VERSION INDICATOR\nRCVTVRN  EQU   X'F0'                   VERSION NUMBER IN HIGH NIBBLE\nRCVTRELS EQU   X'0F'                   RELEASE NUMBER IN LOW NIBBLE\n*----------------------------------------------------------------------\n*@@@     ARCQCT                        HSM\n*----------------------------------------------------------------------\nMQCT     DSECT                         ARCACT    <==CVTHSM\n         ORG   *+X'002C'\nMQCTID   DS    C'QCT*'                 BLOCK ID\nMQCTVER  DS    CL2                     VERSION\nMQCTREL  DS    CL1                     RELEASE\nMQCTMOD  DS    CL1                     MODIFICATION\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n* RECOVERY/TERMINATION\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n         IHASDWA DSECT=YES             SDWA DSECT                 <38J>\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n* MISCELLANEOUS\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n         IEZBITS                       BIT0-BIT7\n         YREGS                         REGISTER EQUATES\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n* ORPHANS (WE DON'T HAVE THESE IN MVS38J)\n*----------------------------------------------------------------------\n*----------------------------------------------------------------------\n*8       IHARD  ,                      <NOT IN MVS38J>            <38J>\n*8       IARRCE                        RSM CTL & ENUM AREA\n*8       IHADFA  DSECT=YES             DFP AREA\n*8       IKJTSVT                       TSO VECTOR TABLE\n*----------------------------------------------------------------------\nLLT      DSECT                         LINKLIST TABLE\nLLTLLT   DS    C'LLT '                 BLOCK ACRONYM\nLLTNO    DS    F                       NUMBER OF ENTRIES\nLLTENTRY DS    0CL45                   DSNAME ENTRY\nLLTDSNL  DS    FL1                     DSNAME LENGTH AFTER TRUNCATION\nLLTDSNAM DS    CL44                    DATA SET NAME\nLLTNEXT  EQU   *                       NEXT ENTRY\n         DROP  ,\n         EJECT ,\n***********************************************************************\n*\n*        JULIAN-TO-YYMMDD CONVERSION ROUTINE\n*\n*          RECEIVES 00YYDDDF IN R1\n*\n*          RETURNS ADDRESS OF \"YYMMDD\" IN R1\n*\n***********************************************************************\n@JDATE   CSECT\n*8DATE   RMODE ANY\n         SAVE  (14,2),,@JDATE\n         BALR  R2,0\n         USING *,R2\n         USING @JDATES,R13\n         MVC   @JDATET1,@JDATET0       MONTH TABLE\n         TM    @JDATED+1,X'01'         ODD YEARS\n         BO    @JDATEN                   AREN'T LEAP YEARS\n         TM    @JDATED+1,X'12'         ZEROES IN 1980, ALL ONES IN 1992\n         BM    @JDATEN                 MIXED IN 1982/1990\n@JDATEL  MVI   @JDATET1+3,X'9F'        29TH OF FEBRUARY (LEAP YEAR)\n@JDATEN  ZAP   @JDATEM,@JDATET1+7(1)   0 OF 30\n         LA    R15,@JDATET1-2          TABLE OF MONTHS (NUMBER OF DAYS)\n@JDATEP  AP    @JDATEM,@JDATET1+1(1)   ADD 1 OF 31\n         LA    R15,2(,R15)             NEXT NUMBER OF DAYS\n         SP    @JDATED+2(2),0(2,R15)   DDD\n         BP    @JDATEP\n         AP    @JDATED+2(2),0(2,R15)   DDD\n         LA    R1,@JDATEY\n         UNPK  0(3,R1),@JDATED+1(2)    YY\n         UNPK  2(2,R1),@JDATEM         YYMM\n         OI    3(R1),X'F0'             SUPPRESS SIGN\n         UNPK  4(2,R1),@JDATED+2(2)    YYMMDD\n         OI    5(R1),X'F0'             SUPPRESS SIGN\n         ST    R1,@JDATED              PASS ADDRESS OF YYMMDD HH:MM\n         RETURN (14,2)\n@JDATET0 DC    P'31,28,31,30,31,30,31,31,30,31,30,31'\n         SPACE 3\n@JDATES  DSECT\n         DS    A(0,0,0,14,15,0,1,2)\n@JDATEM  EQU   @JDATES+16,4,C'P'       R15 SLOT\n@JDATED  EQU   @JDATES+24,4,C'P'       R1 SLOT: 00YYDDDF\n@JDATET1 DS    CL24               +32  TABLE OF MONTHS\n@JDATEY  DS    C'YYMMDD',C' '     +56  YYMMDD.\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SHOWOBJ": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x12\\x9f\\x01\\x02\\x12\\x9f\\x13\\x00\\x01\\x04\\x01\\x04\\x00\\x00\\xe2\\xc8\\xd6\\xe6\\xd4\\xf3\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-05-09T00:00:00", "modifydate": "2002-05-09T13:00:00", "lines": 260, "newlines": 260, "modlines": 0, "user": "SHOWM38"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "STRING": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x12\\x9f\\x01\\x02\\x12\\x9f\\x13\\x00\\x03\\xc2\\x03\\xc2\\x00\\x00\\xe2\\xc8\\xd6\\xe6\\xd4\\xf3\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-05-09T00:00:00", "modifydate": "2002-05-09T13:00:00", "lines": 962, "newlines": 962, "modlines": 0, "user": "SHOWM38"}, "text": "***********************************************************************\n*                                                                     *\n* MACRO NAME = STRING                                                 *\n*                                                                     *\n* DESCRIPTIVE NAME = STRING Macro Instruction.                        *\n*                                                                     *\n* FUNCTION = Provide capabilities similar to PUT EDIT (of PL/I)       *\n*            or STRING (of COBOL) to assembler programs.              *\n*                                                                     *\n* STATUS = R507                                                       *\n*                                                                     *\n* AUTHOR = Gilbert Saint-flour <gsf@pobox.com>                        *\n*                                                                     *\n* ENVIRONMENT = SEE BELOW                                             *\n*                                                                     *\n*     AMODE = ANY                                                     *\n*     SCP   = MVS/XA, MVS/ESA or OS/390                               *\n*     KEY   = ANY                                                     *\n*     MODE  = ANY                                                     *\n*     APF   = OFF                                                     *\n*                                                                     *\n* OPERATION = SEE DOCUMENTATION AT THE END OF THIS FILE               *\n*                                                                     *\n* INVOCATION = SEE DOCUMENTATION AT THE END OF THIS FILE              *\n*                                                                     *\n* NOTES = SEE DOCUMENTATION AT THE END OF THIS FILE                   *\n*                                                                     *\n* CHANGE ACTIVITY                                                     *\n*                                                                     *\n*  $301  FIX BUGS WITH (XYZ,,L8) AND INTO=((R1),(R2))                 *\n*  $302  GENERATE $DEBUG BOOT-STRAP IN FINAL_CALL INVOCATION          *\n*  $303  REPLACE @STRPAD WITH @STRBLANKS                              *\n*  $304  USE @00-@15 INSTEAD OF R0-R15 FOR REGISTER EQUATES           *\n*  $306  TAILOR @STRING CSECT TO PROGRAM'S REQUIREMENTS               *\n*        LITERALS CAN BE CODED AS 'ABC' OR C'ABC' OR X'C1C2C3'        *\n*        USE L'PSATOLD AS IMPLICIT LENGTH FOR (PSATOLD-PSA,,X)        *\n*  $307  FINAL_CALL OPTION CHANGED TO GENERATE                        *\n*        ADD NOCSECT AND LOCTR OPTIONS TO GENERATE CALL               *\n*  $308  USE L'RBCDE AS IMPLICIT LENGTH FOR (PRB.RBCDE,,X)            *\n*        PREVENT S0C4 WHEN ADDR IS BAD AND LENGTH IS ZERO             *\n*  $400  REORG THE CODE TO SIMPLIFY FEATURE SELECTION                 *\n*        BLANKS NO LONGER USED OR GENERATED                           *\n*  $401  GENERATE @STRHEXT WHEN ((REG),,X) ONLY HEX FIELD             *\n*  $502  @STRING ROUTINE REWRITTEN FOR MVS/ESA:                       *\n*        -  USE LINKAGE STACK TO STORE CALLER'S REGISTERS             *\n*        -  ADD SUPPORT FOR AR MODE                                   *\n*  $503  DATE CONVERSION TO YYYY-MM-DD FORMAT (ISO STANDARD)          *\n*        IMPROVE SUPPORT FOR AR MODE                                  *\n*  $504  SET &STRBLANKS TO 10 WHEN PROCESSING DATES                   *\n*  $505  Allow for 128K-offset                                        *\n*  $506  Remove literal from BAL instruction for HLASM R3             *\n*  $507  Merge STRINGXA code, add AR_MODE option                      *\n*        Change syntax of GENERATE call                               *\n***********************************************************************\n         MACRO\n&NAME    STRING &INTO=,&PRINT=NOGEN\n         GBLC  &STRINGV\n&STRINGV SETC '507'                    current version\n         AIF   ('&PRINT' EQ 'NOGEN').NOGEN\n         PUSH  PRINT\n         PRINT GEN\n.NOGEN   GBLA  &QXLIT\n         GBLB  &QXFEAT(16)             FEATURES\n.*                                       1 LITERALS\n.*                                       2 REGISTER (BIN)\n.*                                       3 REGISTER (HEX)\n.*                                       4 PACKED\n.*                                       5 JDATE\n.*                                       6 BINARY\n.*                                       7 HEX\n.*                                       8 NUMERIC\n.*                                       9 LEFT JUST (NUMERIC)\n.*                                       10 LEADING ZEROES\n.*                                       11 TRUNCATE (CHAR STRING)\n.*                                       12 %TIME\n         GBLC  &QXLITS(9999)           LITERALS\n         LCLA  &I,&J,&N\n         AIF   (T'&INTO EQ 'O' AND N'&SYSLIST EQ 1                     X\n               AND '&SYSLIST(1,1)' EQ 'GENERATE').GENL\n&LABEL   SETC  'IHB&SYSNDX'            STEM FOR LOCAL LABELS\n&LQ      SETC  'L'''                   LENGTH ATTRIBUTE\n&STR     SETC  '  R&STRINGV'\n&NAME    BAS   R14,$STRING&STR         CALL @STRING SUB-ROUTINE\n         AIF   (N'&SYSLIST EQ 0).ERR1  NO POSITIONAL OPERANDS, ERROR\n         AIF   (T'&INTO EQ 'O').ERR2   NO RECEIVING FIELD, ERROR\n         AIF   (N'&INTO GT 2).ERR2     INTO=(A,32,BLURB)\n         DC    AL2((&LABEL.P-*)/2)     OFFSET TO FIELD DESCRIPTORS\n         AIF   (D'$LITERAL).LOCTR2     NOT FIRST TIME, JUMP\n$LTORG   LOCTR                         ADDRESSABLE CONSTANTS\n$FARRTNE LOCTR                         FAR ROUTINES\n.LOCTR2  ANOP\n$LITERAL LOCTR                         NON-ADDRESSABLE CONSTANTS\n&TO1     SETC  '&INTO(1)'\n&TO2     SETC  '&LQ&INTO'\n         AIF   (N'&INTO EQ 1).PUNTO8            JUMP IF INTO=XXX\n         AIF   ('&INTO(1)'(1,1) NE '(').PUNTO3  JUMP IF INTO=(XXX,44)\n&TO1     SETC  '0&INTO(1)'                              INTO=((R3),44)\n.PUNTO3  ANOP\n&TO2     SETC  '&INTO(2)'                               INTO=(XXX,LL)\n         AIF   ('&INTO(2)'(1,1) NE '(').PUNTO8  JUMP IF INTO=(XXX,44)\n&TO2     SETC  '0&INTO(2)'                              INTO=(XXX,(R1))\n.PUNTO8  ANOP\n&LABEL.P DC    S(&TO1,&TO2)\n.*--------------------------------------------------------------------*\n.*-------      FIELDS       ------------------------------------------*\n.*--------------------------------------------------------------------*\n         LCLB  &LAST,&BIN,&HEX,&REG,&PACKED,&LEFT,&ZERO,&TRUNC\n&I       SETA  1\n.*LOOP\n.LOOP1   ANOP\n         AIF   (N'&SYSLIST(&I) GT 3).FLD990   TOO MANY SUB-OPERANDS\n&LAST    SETB  (&I EQ N'&SYSLIST)                LOOP\n         AIF   ('&SYSLIST(&I)'(1,1) EQ '''').LIT00\n         AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) EQ '''').LIT01\n.*--------------------------------------------------------------------*\n.*       PROCESS FIRST SUBPARAMETER (ADDRESS)                         *\n.*--------------------------------------------------------------------*\n&P1S     SETC  '&SYSLIST(&I,1)'\n&P2L     SETC  '0'                     INPUT LENGTH\n&P3L     SETC  '0'                     OUTPUT LENGTH\n         AIF   ('&SYSLIST(&I)'(1,1) GE '0').FLD180 SPACES\n         AIF   ('&SYSLIST(&I)' EQ '%TIME').FLD190 %TIME\n         AIF   ('&SYSLIST(&I,1)'(1,1) NE '(').FLD115 (R2)\n         AIF   (T'&SYSLIST(&I,2) EQ 'O').FLD250\n&P1S     SETC  '0&SYSLIST(&I,1)'       CHANGE (R1) TO 0(R1)\n.FLD115  ANOP\n.*\n.*       EXTRACT RBCDE FROM PRB.RBCDE (HLASM)\n.*\n&L       SETA  1\n.*--LOOP\n.FLD131  AIF   ('&P1S'(&L,1) EQ '.').FLD133\n&L       SETA  &L+1\n         AIF   (&L LT K'&P1S).FLD131\n.*--ENDLOOP\n&P2L     SETC  '&P1S'                    ABCDEF FROM ABCDEF\n         AGO   .FLD134\n.FLD133  ANOP\n&P2L     SETC  '&P1S'(&L+1,K'&P1S-&L)    RBCDE FROM PRB.RBCDE\n.FLD134  ANOP\n.*\n         AIF   (T'&SYSLIST(&I,2) NE 'O').FLD200\n.*\n         AIF   (NOT D'&P2L).FLD140\n&P2C     SETC  T'&P2L\n.*MNOTE *,'&P1 &P2C'\n         AIF   ('&P2C' EQ 'F' OR '&P2C' EQ 'H' OR '&P2C' EQ 'P').FLD220\n         AIF   ('&P2C' EQ 'G').FLD210  FL2\n.FLD140  ANOP\n.*\n.*       EXTRACT PSATOLD FROM PSATOLD-PSA\n.*\n&L       SETA  1\n.*--LOOP\n.FLD141  AIF   ('&P2L'(&L,1) EQ '-').FLD143\n         AIF   ('&P2L'(&L,1) EQ '+').FLD143\n&L       SETA  &L+1\n         AIF   (&L LT K'&P2L).FLD141\n.*--ENDLOOP\n&P2L     SETC  '&LQ&P2L'               L'ABCDEF\n         AGO   .FLD300\n.FLD143  ANOP\n&P2L     SETC  '&LQ'.'&P2L'(1,&L-1)    L'PSATOLD FROM PSATOLD-PSA\n         AGO   .FLD300\n.*\n.FLD180  AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) NE 'X').FLD800\n&P2L     SETC  '&SYSLIST(&I)'(1,K'&SYSLIST(&I)-1) 12\n&J       SETA  X'4000'+&LAST*X'8000'\n         DC    AL2(0,&P2L,&J)          BLANKS\n&QXFEAT(1) SETB 1                      LITERAL\n         AGO   .LIT99\n.*\n.FLD190  ANOP                          %TIME\n&P1S     SETC  '1(14)'                 %TIME\n&QXFEAT(12) SETB 1                     %TIME\n         AGO   .FLD800\n.*--------------------------------------------------------------------*\n.*       PROCESS SECOND SUBPARAMETER (LENGTH/TYPE)                    *\n.*--------------------------------------------------------------------*\n.FLD200  AIF   (T'&SYSLIST(&I,2) EQ 'O').FLD300 NO LENGTH SPECIFIED\n&P2C     SETC  '&SYSLIST(&I,2)'\n         AGO   .FLD220\n.*T'&P1=G\n.FLD210  ANOP\n&L       SETA  L'&SYSLIST(&I)          T'&P1 = 'G'\n&P2C     SETC  'FL&L'                  T'&P1 = 'G'\n.*\n.FLD220  ANOP\n&P2L     SETC  '0&P2C'                 (R2) LENGTH\n         AIF   ('&P2C'(1,1) EQ '(').FLD300\n&P2L     SETC  '&P2C'                  3(R2) LENGTH\n         AIF   ('&P2C'(K'&P2C,1) EQ ')').FLD300\n&P2L     SETC  '0'\n&PACKED  SETB  ('&P2C' EQ 'P')\n         AIF   (&PACKED).FLD300\n&P2L     SETC  '1'\n         AIF   ('&P2C' EQ 'FL1').FLD240\n&P2L     SETC  '3'\n         AIF   ('&P2C' EQ 'FL2' OR '&P2C' EQ 'H').FLD240\n&P2L     SETC  '7'\n         AIF   ('&P2C' EQ 'FL3').FLD240\n&P2L     SETC  '15'\n         AIF   ('&P2C' EQ 'F').FLD240\n&P2L     SETC  '&P2C'                  IMMEDIATE LENGTH, FIELD\n         AGO   .FLD300\n.*\n.FLD240  ANOP                          BINARY VARIABLE\n&BIN     SETB  1\n         AGO   .FLD300\n.*\n.FLD250  ANOP                          REGISTER CONTENT\n&REG     SETB  1\n.*--------------------------------------------------------------------*\n.*       PROCESS THIRD SUBPARAMETER (OUTPUT FORMAT)                   *\n.*--------------------------------------------------------------------*\n.FLD300  AIF   (T'&SYSLIST(&I,3) EQ 'O').FLD800\n&HEX     SETB  ('&SYSLIST(&I,3)' EQ 'X') HEXADECIMAL\n&TRUNC   SETB  ('&SYSLIST(&I,3)' EQ 'T') TRUNCATE\n         AIF   (&HEX OR &TRUNC).FLD800\n.*\n&P3C     SETC  '&SYSLIST(&I,3)'\n&P3L     SETC  '248'\n         AIF   ('&P3C' EQ 'YYYY-MM-DD' AND &PACKED).FLD308\n&P3L     SETC  '249'\n         AIF   ('&P3C' EQ 'YYYYMMDD' AND &PACKED).FLD308\n&P3L     SETC  '250'\n         AIF   ('&P3C' EQ 'YY/MM/DD' AND &PACKED).FLD308\n&P3L     SETC  '251'\n         AIF   ('&P3C' EQ 'DD/MM/YY' AND &PACKED).FLD308\n&P3L     SETC  '252'\n         AIF   ('&P3C' EQ 'MM/DD/YY' AND &PACKED).FLD308\n&P3L     SETC  '253'\n         AIF   ('&P3C' EQ 'YYMMDD'   AND &PACKED).FLD308\n&P3L     SETC  '0'\n         AIF   (T'&SYSLIST(&I,2) NE 'N').FLD310\n         MNOTE 8,'EDIT PATTERN NOT ALLOWED WITH CHARACTER STRING'\n         AGO   .FLD310\n.FLD308  ANOP\n&QXFEAT(5) SETB 1                      JDATE\n         AGO   .FLD800\n.*--LOOP\n.FLD310  AIF   ('&P3C'(1,1) EQ 'R').FLD318       DEFAULT\n         AIF   ('&P3C'(1,1) EQ 'B').FLD318       DEFAULT\n         AIF   ('&P3C'(1,1) NE 'L').FLD311\n&LEFT    SETB  1\n         AGO   .FLD318\n.FLD311  AIF   ('&P3C'(1,1) NE 'Z').FLD312\n&ZERO    SETB  1\n         AGO   .FLD318\n.FLD312  AIF   ('&P3C'(1,1) LT '0').FLD993\n&P3L     SETC  '&P3L'.'&P3C'(1,1)\n.FLD318  ANOP\n.*MNOTE *,'&SYSLIST(&I) P3C=/&P3C/ P3L=/&P3L/'\n&P3C     SETC  '&P3C'(2,K'&P3C-1)     STRIP OFF FIRST CHARACTER\n         AIF   (K'&P3C GT 0).FLD310\n.*--ENDLOOP\n.*--------------------------------------------------------------------*\n.FLD800  ANOP\n&NUMERIC SETB  (&BIN OR &PACKED OR (&REG AND NOT &HEX))\n&TRUNC   SETB  (&TRUNC OR (&LEFT AND NOT &NUMERIC))\n&LEFT    SETB  (&LEFT AND &NUMERIC)\n         AIF   (NOT &NUMERIC).FLD810\n         AIF   (&LEFT OR '&P3L' NE '0').FLD810\n&P3L     SETC  '7'                     DEFAULT OUTPUT LENGTH ((R3))\n         AIF   (&REG).FLD810\n&P3L     SETC  '3'                     DEFAULT OUTPUT LENGTH\n         AIF   ('&P2C' EQ 'FL1').FLD810\n&P3L     SETC  '5'                     DEFAULT OUTPUT LENGTH\n         AIF   ('&P2C' EQ 'H' OR '&P2C' EQ 'FL2').FLD810\n&P3L     SETC  '7'                     DEFAULT OUTPUT LENGTH\n.FLD810  ANOP\n&FLAG    SETA  &LAST*128+&HEX*8+&BIN*4+&PACKED*2+&REG*1\n&LEN2    SETA  &TRUNC*128+&LEFT*128+&ZERO*64+&P3L\n         DC    S(&P1S,&P2L),AL1(&FLAG,&LEN2)\n&QXFEAT(2) SETB (&QXFEAT(2) OR (&REG AND NOT &HEX))   REGISTER (BIN)\n&QXFEAT(3) SETB (&QXFEAT(3) OR (&REG AND &HEX))       REGISTER (HEX)\n&QXFEAT(4) SETB (&QXFEAT(4) OR &PACKED)               PACKED\n&QXFEAT(6) SETB (&QXFEAT(6) OR &BIN)                  BINARY\n&QXFEAT(7) SETB (&QXFEAT(7) OR (&HEX AND NOT &REG))   HEX\n&QXFEAT(8) SETB (&QXFEAT(8) OR &NUMERIC)              BIN,PACKED\n&QXFEAT(9) SETB (&QXFEAT(9) OR (&LEFT AND &NUMERIC))\n&QXFEAT(10) SETB (&QXFEAT(10) OR &ZERO)\n&QXFEAT(11) SETB (&QXFEAT(11) OR &TRUNC)\n&BIN     SETB  0                    RESET FLAGS\n&HEX     SETB  0                    RESET FLAGS\n&REG     SETB  0                    RESET FLAGS\n&PACKED  SETB  0                    RESET FLAGS\n&LEFT    SETB  0                    RESET FLAGS\n&ZERO    SETB  0                    RESET FLAGS\n&TRUNC   SETB  0                    RESET FLAGS\n         AGO   .LIT99\n.FLD990  MNOTE 12,'OPERAND &I HAS TOO MANY SUB-OPERANDS'\n         AGO   .LIT99\n.FLD993  MNOTE 8,'THIRD SUBPARAMETER IS INVALID: ''&SYSLIST(&I,3)'''\n         AGO   .LIT99\n.*--------------------------------------------------------------------*\n.*------------ LITERALS ----------------------------------------------*\n.*--------------------------------------------------------------------*\n.LIT00   ANOP\n&LIT     SETC  'C&SYSLIST(&I)'\n         AGO   .LIT09\n.LIT01   ANOP\n&LIT     SETC  '&SYSLIST(&I)'\n.LIT09   AIF   (&QXLIT EQ 0).LIT50\n&N       SETA  1\n         ACTR  &QXLIT*3+200\n.LIT10   AIF   (&N GT &QXLIT).LIT50                  LOOP\n&L       SETA  &N+1000                               LOOP\n         AIF   ('&LIT' EQ '&QXLITS(&N)').LIT80 LOOP\n&N       SETA  &N+1                                  LOOP\n         AGO   .LIT10                                LOOP\n.LIT50   ANOP\n&QXLIT   SETA  &QXLIT+1\n&QXLITS(&QXLIT) SETC '&LIT'\n&L       SETA  &QXLIT+1000\n.LIT80   ANOP\n&J       SETA  X'4000'+&LAST*X'8000'\n         DC    AL2($LIT&L-*,&LQ.$LIT&L,&J)\n&QXFEAT(1) SETB 1                      LITERAL\n.LIT99   ANOP\n.*--------------------------------------------------------------------*\n&I       SETA  1+&I                              LOOP\n         AIF   (&I LE N'&SYSLIST).LOOP1          LOOP\n.*ENDLOOP\n&SYSLOC  LOCTR\n         AGO   .MEND\n.ERR1    MNOTE 12,'AT LEAST ONE INPUT FIELD MUST BE SPECIFIED'\n         AGO   .MEND\n.ERR2    MNOTE 12,'INVALID OUTPUT AREA SPECIFICATION'\n         AGO   .MEND\n.**********************************************************************\n.*       GENERATE: GENERATE LITERALS AND PROCESSING ROUTINE           *\n.**********************************************************************\n.GENL    ANOP\n         AIF   (N'&SYSLIST(1) GT 3).GENL1R\n&OPT2    SETC  '&SYSLIST(1,2)'\n         AIF   ('&OPT2' NE '' AND '&OPT2' NE 'AR_MODE'                 X\n               AND '&OPT2' NE 'NO_CSECT').GENL1R\n&OPT3    SETC  '&SYSLIST(1,3)'\n         AIF   ('&OPT3' NE '' AND '&OPT3' NE 'LOCTR').GENL1R\n         AIF   ('&OPT2' EQ 'NO_CSECT' AND '&OPT3' EQ 'LOCTR').GENL1R\n         AGO   .GENL1D\n.GENL1R  MNOTE 12,'Invalid GENERATE options, default used'\n&OPT2    SETC  ''\n&OPT3    SETC  ''\n.GENL1D  ANOP\n&STRBLANKS SETA 2\n         AIF   (D'$LTORG).GENL1F             CSECT-ONLY\n&QXFEAT(1) SETB 1,1,1,1,1,1,1,1,1,1,1,1\n.GENL1F  ANOP\n&ALLFEAT SETC  '&QXFEAT(1)&QXFEAT(2)&QXFEAT(3)&QXFEAT(4)'\n&ALLFEAT SETC  '&ALLFEAT&QXFEAT(5)&QXFEAT(7)&QXFEAT(6)&QXFEAT(8)'\n&ALLFEAT SETC  '&ALLFEAT&QXFEAT(9)&QXFEAT(10)&QXFEAT(11)&QXFEAT(12)'\n&STR     SETC  '&STRINGV'\n         MNOTE *,'STRING R&STR - FEATURES GENERATED: &ALLFEAT'\n         AIF   (&QXLIT EQ 0).GENL3\n$LITERAL LOCTR\n.GENL2   ANOP                                LOOP\n&N       SETA  &N+1                          LOOP\n&I       SETA  &N+1000                       LOOP\n$LIT&I   DC    &QXLITS(&N)\n         AIF   (&N LT &QXLIT).GENL2          LOOP\n.GENL3   ANOP\n         AIF   ('&OPT2' EQ 'NO_CSECT').GENL8\n&ARMODE  SETB  ('&OPT2' EQ 'AR_MODE')\n.**********************************************************************\n.*                                                                    *\n.*       STRING SUB-ROUTINE                                           *\n.*                                                                    *\n.*             CAUTION: BYTES 49-72 OF THE CALLER'S SAVE AREA         *\n.*                      (R7-R12 SLOTS) ARE USED AS WORK SPACE         *\n.*                                                                    *\n.**********************************************************************\n         AIF   ('&OPT3' EQ 'LOCTR').GENL4L\n         EJECT ,                                <38j>\n@STRING  CSECT\n@STRING  RMODE ANY\n         AGO   .GENL4X\n.GENL4L  PUSH  USING                   GENERATE,LOCTR\n         DROP\n@STRING@ LOCTR\n@STRING  DS    0H                      ALIGNMENT\n.GENL4X  ANOP\n@00      EQU   0                       WORK REGISTER\n@01      EQU   1                       WORK REGISTER\n@02      EQU   2                       WORK REGISTER\n@03      EQU   3                       WORK REGISTER\n@04      EQU   4                       WORK REGISTER\n@05      EQU   5                       WORK REGISTER\n@06      EQU   6                       WORK REGISTER\n         AIF   (NOT &ARMODE).ARMODE1N\n@07      EQU   7                       WORK REGISTER\n@08      EQU   8                       WORK REGISTER\n@09      EQU   9                       WORK REGISTER\n@10      EQU   10                      WORK REGISTER\n@11      EQU   11                      WORK REGISTER\n@12      EQU   12                      WORK REGISTER\n@13      EQU   13                      CALLER'S SAVE AREA\n@14      EQU   14                      WORK REGISTER\n@15      EQU   15                      BASE REG\n         USING @STRING,@15\n         USING @STRSAVE,@13\n         B     @STR003                 BRANCH AROUND EYE-CATCHER\n         DC    C'@STRING/390 R&STRINGV &ALLFEAT',0H'0'\n@STR002  DC    H'2'\n@STR003  STM   @14,@12,12(@13)         SAVE REGS (DEBUGGING ONLY)\n         AH    @14,@STR002-@STRING(@15) POINT PARM PARM-LIST OFFSET\n         BAKR  @14,0                   SAVE REGS AND RETURN ADDRESS\n         BCTR  @14,0                   ADJUST ADDR OF PARM LIST OFFSET\n         BCTR  @14,0                   ADJUST ADDR OF PARM LIST OFFSET\n         LAE   @06,0                   R6=0 AR6=0\n         CPYA  @14,@06                 AR14=0\n         CPYA  @15,@06                 AR15=0\n&LAE     SETC  'LAE'\n         AGO   .ARMODE1X\n.ARMODE1N ANOP\n@13      EQU   13                      CALLER'S SAVE AREA\n@14      EQU   14                      WORK REGISTER\n@15      EQU   15                      BASE REG\n&LAE     SETC  'LA'\n         SAVE  (14,6),,'@STRING/370 R&STRINGV &ALLFEAT'\n         USING @STRING,@15\n         USING @STRSAVE,@13\n         SLR   @06,@06                 R6=0\n.ARMODE1X ANOP\n         ICM   @06,B'0011',0(@14)      PICK UP PARM-LIST 1/2 OFFSET\n         ALR   @06,@06                 PICK UP PARM-LIST OFFSET\n         ALR   @06,@14                 R6 NOW POINTS TO PARM LIST\n         USING @STRPARM,@06\n         &LAE  @02,@STRSCON            RESOLVE FIRST SCON (ADDR)\n         BAL   @14,@STRS2A             GET ADDRESS IN R2\n         &LAE  @04,0(,@02)             KEEP ADDRESS OF \"INTO\" FIELD\n         L     @14,12(,@13)            RESTORE ADDR OF STRING MACRO\n         OI    0(@04),0                GET CLEAN S0C4 IF ADDRESS IS BAD\n         &LAE  @02,@STRFLEN            RESOLVE SECOND S-CON (LEN)\n         BAL   @14,@STRS2A             GET LENGTH IN R2\n         LR    @05,@02                 KEEP LENGTH OF \"INTO\" FIELD\n         CR    @05,@04                 END ADDRESS?\n         BL    @STR282                 NO, JUMP\n         SR    @05,@04                 CALCULATE LENGTH\n         AIF   (NOT &ARMODE).ARMODE5N\n@STR282  MSTA  @04                     SAVE R4,R5 ON LINKAGE STACK\n.*SLAC   DC    X'B247,0040'            SLAC assembler error\n         AGO   .ARMODE5X\n.ARMODE5N ANOP\n@STR282  ST    @04,8(,@13)             SAVE ADDRESS FOR LATER\n.ARMODE5X ANOP\n.**********************************************************************\n.*       MOVE FIELDS TO OUTPUT AREA                                   *\n.**********************************************************************\n         &LAE  @06,@STRFLAG            POINT TO 1ST FIELD DESC\n.*LOOP\n@STR310  EQU   *\n         AIF   (NOT &QXFEAT(1)).FEAT1A\n         TM    @STRFLAG,@STRLIT        IS THIS A LITERAL?\n         BO    @STR372                 YES, JUMP\n.FEAT1A  ANOP\n         AIF   (NOT &QXFEAT(2) AND NOT &QXFEAT(3)).FEAT23A\n         TM    @STRFLAG,@STRREG        REGISTER?\n         BO    @STR323                 YES, JUMP\n.FEAT23A ANOP\n         AIF   (NOT &QXFEAT(12)).FEAT12A\n         CLI   @STRSCON,X'E0'          IS IT %TIME ?\n         BE    @STR378                 YES, JUMP\n.FEAT12A ANOP\n.*\n.*       IT'S A FIELD (SCON)\n.*\n         &LAE  @02,@STRFLEN            RESOLVE SECOND S-CON (LEN)\n         BAL   @14,@STRS2A             GET LENGTH IN R2\n         AIF   (&QXFEAT(9)).FEAT9E1    (LEFT JUSTIFICATION, NUMERIC)\n         LTR   @03,@02                 KEEP/TEST LENGTH\n         BZ    @STR398                 ZERO LENGTH, DO NOT EDIT\n         AGO   .FEAT9E2\n.FEAT9E1 LTR   @03,@02                 KEEP/TEST LENGTH\n         BP    @STR313                 LENGTH POSITIVE, JUMP\n         TM    @STRLEN2,@STRLEFT       LEFT JUSTIFICATION?\n         BNO   @STR398                 NO, ZERO LENGTH IS NOT OK\n@STR313  EQU   *\n.FEAT9E2 ANOP\n         &LAE  @02,@STRSCON            RESOLVE FIRST SCON (ADDR)\n         BAL   @14,@STRS2A             GET ADDRESS IN R2\n         L     @14,12(,@13)            RESTORE ADDR OF STRING MACRO\n         CLI   0(@02),0                GET CLEAN S0C4 IF ADDRESS IS BAD\n         CR    @03,@02                 END ADDRESS?\n         BL    @STR314                 NO, JUMP\n         LA    @00,X'0080'             PSA ADDRESS\n         CLR   @02,@00                 PSA REFERENCE?\n         BL    @STR314                 YES, JUMP\n         SR    @03,@02                 CALCULATE LENGTH\n@STR314  EQU   *\n         AIF   (NOT &QXFEAT(6)).FEAT6A\n         TM    @STRFLAG,@STRBIN        BINARY FIELD?\n         BO    @STR328                 YES, JUMP\n.FEAT6A  ANOP\n         AIF   (NOT &QXFEAT(4)).FEAT4A\n         TM    @STRFLAG,@STRPACK       PACKED FIELD?\n         BO    @STR351                 YES, JUMP\n.FEAT4A  ANOP\n         AIF   (NOT &QXFEAT(7)).FEAT7A\n         TM    @STRFLAG,@STRHEX        EDIT IN HEX?\n         BO    @STR376                 YES, JUMP\n.FEAT7A  ANOP\n.*\n.*       TRUNCATE CHARACTER STRING\n.*\n         AIF   (NOT &QXFEAT(11)).FEAT11A\n         CLI   @STRLEN2,@STRLEFT       CHECK JUSTIFICATION, OUTPUT LEN\n         BNE   @STR390                 NO STRING TRUNCATION, JUMP\n         &LAE  @01,0(@03,@02)          FIRST BYTE AFTER FIELD\n@STR318  BCTR  @01,0                   DOWN 1 BYTE                 LOOP\n         CLI   0(@01),C' '             IS IT A SPACE ?             LOOP\n         BNE   @STR390                 LAST NON-BLANK BYTE         LOOP\n         BCT   @03,@STR318             LOOP UNTIL 1ST NON-BLANK    LOOP\n         B     @STR398                 BLANK FIELD, DO NOT EDIT\n         AGO   .FEAT11B\n.FEAT11A ANOP\n         AIF (&QXFEAT(2)+&QXFEAT(3)+&QXFEAT(4)+&QXFEAT(6) EQ 0).FEAT11B\n         B     @STR390                 EDIT\n.FEAT11B ANOP\n.*\n.*       REGISTER (R0-R13)\n.*\n         AIF   (NOT &QXFEAT(2) AND NOT &QXFEAT(3)).FEAT23B\n         AIF   (NOT &ARMODE).ARMODE7N\n@STR323  LH    @01,@STRSCON            REG NUMBER IN BITS 28-31\n         CLI   @STRSCON+1,@06          IS THIS R7-R13?\n         BH    @STR323R                YES, JUMP\n         LR    @07,@01                 SAVE R1 (R)\n         LAE   @10,0(,@04)             SAVE R4\n         LR    @11,@05                 SAVE R5\n         LAE   @12,0(,@06)             SAVE R6\n         EREG  @00,@06                 RELOAD CALLER'S R0-R6\n         EX    @07,@STR323L            COPY R0-R6 VALUE\n         LAE   @04,0(,@10)             RESTORE R4\n         LR    @05,@11                 RESTORE R5\n         LAE   @06,0(,@12)             RESTORE R6\n         B     @STR323T\n@STR323L LR    @00,*-*                 COPY VALUE FOR EDIT\n@STR323R EQU   *\n         EREG  @07,@12                 RESTORE CALLER'S R7-R12\n         EX    @01,@STR323L            COPY R7-R13 INTO R0\n         AGO   .ARMODE7X\n.ARMODE7N ANOP\n@STR323L LR    @00,*-*                 COPY VALUE FOR EDIT\n@STR323  LH    @01,@STRSCON            REG NUMBER IN BITS 28-31\n         EX    @01,@STR323L            COPY R7-R13 INTO R0\n         CLI   @STRSCON+1,@06+1        IS THIS R7-R13?\n         BNL   @STR323T                YES, JUMP\n         SLL   @01,2                   R1= 000000BB BASE * 4\n         L     @00,20(@01,@13)         PICK UP VALUE FOR R0-R6\n.ARMODE7X ANOP\n@STR323T EQU   *\n         AIF   (NOT &QXFEAT(3)).FEAT3R REG,HEX\n         AIF   (NOT &QXFEAT(2)).FEAT2H REG,BIN\n         TM    @STRFLAG,@STRHEX        EDIT IN HEX?\n         BNO   @STR330                 NO, EDIT FWD\n.FEAT2H  ANOP\n         STCM  @00,B'1111',@STRDWD-1   STORE IT FOR CVD/UNPK\n         LA    @03,8                   OUTPUT LENGTH\n         B     @STR376X                EDIT IN HEX\n.FEAT3R  ANOP\n         AIF   (NOT &QXFEAT(6)).FEAT23B\n         B     @STR330                 EDIT R0\n.FEAT23B ANOP\n.*\n.*       BINARY VARIABLE: @03 CONTAINS THE ICM MASK (1 3 7 F)\n.*\n         AIF   (NOT &QXFEAT(6)).FEAT6B\n@STR328M ICM   @00,*-*,0(@02)          **EXECUTED INSTRUCTION**\n@STR328  SLR   @00,@00\n         EX    @03,@STR328M            LOAD THE BINARY VARIABLE\n.FEAT6B  ANOP\n.*\n         AIF   (NOT &QXFEAT(2) AND NOT &QXFEAT(6)).FEAT6C\n@STR330  CVD   @00,@STRDWD             CONVERT VALUE TO DECIMAL\n         AIF   (NOT &QXFEAT(4)).FEAT6C\n         B     @STR361                 EDIT DWD\n.FEAT6C  ANOP\n.*\n.*       PACKED FIELD\n.*\n         AIF   (NOT &QXFEAT(4)).FEAT4B\n@STRZAP  ZAP   @STRDWD,0(*-*,@02)      MOVE TO @STRDWD\n@STR351  &LAE  @03,0(,@02)             FIRST BYTE OF PACKED FIELD\n         BALR  @14,0\n         TM    0(@03),X'0C'            IS THIS THE SIGN BYTE?\n         LA    @03,1(,@03)              (NEXT BYTE)\n         BNOR  @14                     NO, LOOP MORE\n         SLR   @03,@02                 GET LENGTH OF PACKED FIELD\n         BCTR  @03,0\n         EX    @03,@STRZAP             EXECUTE ZAP\n         AIF   (NOT &QXFEAT(5)).FEAT4B\n         CLI   @STRLEN2,248            JULIAN-TO-YYMMDD CONV?\n         BNL   @STR375                 YES, JUMP\n.FEAT4B  ANOP                          PACKED\n.*\n.*       EDIT @STRDWD (BIN, REG, PACKED)\n.*\n         AIF   (NOT &QXFEAT(8)).FEAT8B\n@STR361  IC    @00,@STRLEN2            OUTPUT LENGTH\n         LA    @03,X'003F'             MASK FOR \"AND\"\n         NR    @03,@00                 OUTPUT LENGTH\n         MVC   @STRWK16(16),@STRMASK   EDIT MASK\n.*\n.*       LEFT-JUSTIFICATION (NUMERIC)\n.*\n         AIF   (NOT &QXFEAT(9)).FEAT9B\n         TM    @STRLEN2,@STRLEFT       LEFT JUSTIFICATION?\n         BNO   @STR367                 NO, JUMP\n         &LAE  @01,@STRWK16+15         PREVENT BAD R1\n         EDMK  @STRWK16(16),@STRDWD    ZONED DECIMAL\n         &LAE  @02,0(,@01)             FIRST STRING POSITION\n         LTR   @03,@03                 CHECK OUTPUT LENGTH\n         BNZ   @STR363                 JUMP IF NOT ZERO\n.*       L0    (LEFT JUSTIFIED, NO PADDING)\n         &LAE  @03,@STRWK16+16         FIRST POSITION AFTER STRING\n         SR    @03,@02                 COMPUTE STRING LENGTH\n         B     @STR390                 MOVE FIELD TO OUTPUT LINE\n.*       L1-L63 (LEFT JUSTIFIED, PADDING)\n@STR363  CR    @03,@05                 COMPARE LENGTH TO REMAINING LEN\n         BNH   @STR364                 LARGE ENOUGH, JUMP\n         LR    @03,@05                 TOO BIG, TRUNCATE TO REM. LEN.\n@STR364  SR    @05,@03                 COMPUTE REMAINING LENGTH\n         AIF   (NOT &ARMODE).ARMODE8N\n         LAE   @08,0(,@04)             POINTER IN OUTPUT LINE\n         LR    @09,@03                 LENGTH WITH PADDING\n         AGO   .ARMODE8X\n.ARMODE8N ANOP\n         LR    @00,@04                 POINTER IN OUTPUT LINE\n         LR    @01,@03                 LENGTH WITH PADDING\n.ARMODE8X ANOP\n         LA    @03,@STRWK16+16         FIRST POSITION AFTER STRING\n         SR    @03,@02                 COMPUTE STRING LENGTH\n         B     @STR392                 MOVE FIELD TO OUTPUT LINE\n@STR367  EQU   *\n.FEAT9B  ANOP\n         AIF   (NOT &QXFEAT(10)).FEAT10B\n         TM    @STRLEN2,@STRZERO       LEADING ZEROES REQ'D?\n         BNO   @STR368                 NO, JUMP\n         MVI   @STRWK16,C'0'           YES, CHANGE X'40' TO C'0'\n@STR368  EQU   *\n.FEAT10B ANOP\n         ED    @STRWK16(16),@STRDWD    ZONED DECIMAL\n         &LAE  @02,@STRWK16+16         FIRST POSITION AFTER STRING\n         SR    @02,@03                 FIRST STRING POSITION\n.FEAT8B  ANOP\n.*\n.*       LITERAL (@STRSCON IS A 16-BIT OFFSET)\n.*       BLANKS  (@STRSCON=ZERO)\n.*\n         AIF   (NOT &QXFEAT(1)).FEAT1B\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n@STR372  &LAE  @02,0                   R2=0,AR2=0\n         ICM   @02,B'0011',@STRSCON    LOAD LITERAL OFFSET\n         BZ    @STR372L                BLANKS, JUMP\n         LA    @02,@STRSCON(@02)       CONVERT OFFSET TO FULL ADDRESS\n@STR372L LH    @03,@STRFLEN            GET LITERAL LENGTH\n.FEAT1B  ANOP\n.*\n.*       CONVERT JULIAN DATE TO YYMMDD\n.*\n         AIF   (NOT &QXFEAT(5)).FEAT5F\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n@STR375  LA    @00,248                 MASK FOR 'SLR'\n         SLR   @01,@01\n         IC    @01,@STRLEN2            248-255\n         SLR   @01,@00                 000-007\n         LA    @00,12                  L'@STR375W\n         MR    @00,@00                 COMPUTE OFFSET\n         &LAE  @01,@STR375W(@01)       ENTRY IN \"TR\" MASK TABLE\n         SLR   @03,@03\n         IC    @03,0(,@01)             LENGTH OF DATE (6, 8 OR 10)\n         ZAP   @STRDWD,@STRDWD         DATE=0000000?               @JDT\n         BNZ   @STR375B                NO, JUMP                    @JDT\n@STR375Z &LAE  @02,@STRBLANKS          WORK AREA\n&STRBLANKS SETA 10                     WE NEED AT LEAST 10 BLANKS\n         B     @STR390                 MOVE FIELD TO OUTPUT LINE\n@STR375W DC    AL1(10,C'-',0,1,2,3,8,4,5,8,6,7) YYYY-MM-DD   248\n         DC    AL1(8,C' ',0,1,2,3,4,5,6,7,8,8)  YYYYMMDD//   249\n         DC    AL1(8,C'/',2,3,8,4,5,8,6,7,8,8)  YY/MM/DD//   250\n         DC    AL1(8,C'/',6,7,8,4,5,8,2,3,8,8)  DD/MM/YY//   251\n         DC    AL1(8,C'/',4,5,8,6,7,8,2,3,8,8)  MM/DD/YY//   252\n         DC    AL1(6,C' ',2,3,4,5,6,7,8,8,8,8)  YYMMDD       253\n.*       DC    AL1(6,C' ',6,7,4,5,2,3,8,8,8,8)  DDMMYY       254\n.*       DC    AL1(6,C' ',4,5,6,7,2,3,8,8,8,8)  MMDDYY       255\n@STR375T DC    P'59,31,29,31,30,31,30,31,31,30,31,30,31'\n@STR375B CLI   @STRDWD+4,X'01'         YEAR 2000 OR ABOVE?\n         BH    @STR375C                CC>01, JUMP (MUST BE 19 OR 20)\n         MVI   @STRDWD+4,X'20'         CC=01, CHANGE TO CC=20\n         BE    @STR375C                CC=01, USE CC=20\n         CLI   @STRDWD+4+1,X'50'       YY<50?\n         BL    @STR375C                YES, USE CC=20\n         MVI   @STRDWD+4,X'19'         NO, FORCE CC=19\n@STR375C UNPK  @STRWK16(5),@STRDWD+4(3) CCYY?\n         ZAP   @STRDWD+1(2),@STR375T+9(1) INIT MONTH COUNTER\n         &LAE  @02,@STR375T            TABLE OF MONTHS (NUMBER OF DAYS)\n         TM    @STRDWD+4+1,X'01'       ODD YEARS\n         BO    @STR375N                  AREN'T LEAP YEARS\n         TM    @STRDWD+4+1,X'12'       ZEROES IN 1980, ALL ONES IN 1992\n         BNM   @STR375L                MIXED IN 1982/1990\n.*       IF IT'S NOT A LEAP YEAR AND DDD>59, THEN ADD 1 TO DDD\n@STR375N CP    @STRDWD+4+2(2),@STR375T ARE WE PAST FEB 28 (DDD>59) ?\n         BNH   @STR375L                NO, JUMP\n         AP    @STRDWD+4+2(2),@STR375T+3(1) ADD 1 (FROM 31) TO DDD\n.*--LOOP WHILE DDD > 0\n@STR375L AP    @STRDWD+1(2),@STR375T+3(1)   ADD 1 (FROM 31) TO MONTH\n         LA    @02,2(,@02)             NEXT ENTRY IN \"MONTHS\" TABLE\n         SP    @STRDWD+4+2(2),0(2,@02) SUB DAYS-IN-MONTH FROM DDD\n         BP    @STR375L\n.*--ENDLOOP\n         AP    @STRDWD+4+2(2),0(2,@02) UNDO LAST \"SP\" INSTRUCTION\n         UNPK  @STRWK16+4(2),@STRDWD+1(2) FYFYFYFY,FMCM??\n         UNPK  @STRWK16+6(2),@STRDWD+6(2) FYFYFYFY,FMCMFDCD\n         MVZ   @STRWK16+1(7),@STRWK16     FYFYFYFY,FMCMFDCD\n         MVC   @STRWK16+8(1),1(@01)    SEPARATOR\n         &LAE  @02,@STRWK16+9          WORK AREA\n         MVC   0(10,@02),2(@01)        MOVE CORRESPONDING MASK\n         TR    0(10,@02),@STRWK16      CONVERT DATE TO THE RIGHT FORMAT\n.FEAT5F  ANOP                          JDATE\n.*\n.*       HEX STRING\n.*\n         AIF   (NOT &QXFEAT(7)).FEAT7B\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n@STR376M MVC   @STRDWD-1(*-*),0(@02)   PREVENT S0C4 IN UNPK\n@STR376  LA    @00,8                   MAX LENGTH\n         CLR   @03,@00                 CHECK LENGTH\n         BNH   @STR376B                JUMP IF LE 8\n         LR    @03,@00                 TRUNCATE TO MAXIMUM LENGTH\n@STR376B LR    @01,@03                 INPUT LENGTH\n         BCTR  @01,0\n         EX    @01,@STR376M            MOVE DATA TO SAFE STORAGE\n         ALR   @03,@03                 OUTPUT LENGTH\n         AGO   .FEAT37B\n.FEAT7B  ANOP\n         AIF   (NOT &QXFEAT(3)).FEAT37C\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n.FEAT37B ANOP\n@STR376X &LAE  @02,@STRWK16            WORK AREA\n         UNPK  0(9,@02),@STRDWD-1(5)   EXPAND SOURCE BYTES FOR \"TR\"\n         UNPK  8(9,@02),@STRDWD+3(5)   EXPAND SOURCE BYTES FOR \"TR\"\n         TR    0(16,@02),@STRHEXT-240  =C'0123456789ABCDEF'\n.FEAT37C ANOP\n.*\n.*       %TIME\n.*\n         AIF   (NOT &QXFEAT(12)).FEAT12B\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n@STRTIME DC    X'4021207A20207A20207A20204000'    0X.XX.XX.XX\n@STR378  LR    @02,@15                 SAVE BASE REG\n         TIME  DEC                     GET HHMMSSHH\n         LR    @15,@02                 RESTORE BASE REG\n         ST    @00,@STRDWD             STORE HHMMSSHH\n         MVC   @STRWK16(13),@STRTIME   MOVE EDIT MASK\n         ED    @STRWK16(13),@STRDWD    EDIT HH:MM:SS:HH\n         &LAE  @02,@STRWK16+1          WORK AREA\n         LA    @03,12                  HH:MM:SS:HH+ SPACE\n.FEAT12B ANOP\n.*MOVE\n@STR390  CR    @03,@05                 COMPARE LENGTH TO REMAINING LEN\n         BNH   @STR391                 LARGE ENOUGH, JUMP\n         LR    @03,@05                 TOO BIG, TRUNCATE TO REM. LEN.\n@STR391  SR    @05,@03                 COMPUTE REMAINING LENGTH\n         AIF   (NOT &ARMODE).ARMODE39N\n         LAE   @08,0(,@04)             POINTER IN OUTPUT LINE\n         LR    @09,@03                 PASS REMAINING LENGTH\n         AGO   .ARMODE39X\n.ARMODE39N ANOP\n         LR    @00,@04                 POINTER IN OUTPUT LINE\n         LR    @01,@03                 PASS REMAINING LENGTH\n.ARMODE39X ANOP\n         LTR   @02,@02                 BLANKS?\n         BNZ   @STR392                 NO, JUMP\n         SLR   @03,@03                 YES, ZERO LENGTH\n@STR392  ICM   @03,B'1000',@STRBLANKS  PAD WITH BLANKS\n         AIF   (NOT &ARMODE).ARMODE44N\n         MVCL  @08,@02                 MOVE FIELD TO OUTPUT LINE\n         LR    @04,@08                 NEW POINTER IN OUTPUT LINE\n         AGO   .ARMODE44X\n.ARMODE44N ANOP\n         MVCL  @00,@02                 MOVE FIELD TO OUTPUT LINE\n         LR    @04,@00                 NEW POINTER IN OUTPUT LINE\n.ARMODE44X ANOP\n@STR398  TM    @STRFLAG,@STRLAST       TEST LAST-ENTRY INDICATOR\n         LA    @06,@STRNEXT            BUMP UP TO NEXT ENTRY\n         BNO   @STR310                 PROCESS NEXT ENTRY\n.*ENDLOOP\n.*\n.*       END-OF-LINE PROCESSING - PAD WITH BLANKS\n.*\n         SLR   @01,@01                 SET UP R1 FOR PADDING\n         ICM   @01,B'1000',@STRBLANKS  SET UP R1 FOR PADDING\n         AIF   (NOT &ARMODE).ARMODE52N\n.***     DROP  @06,@13,@15\n         LA    @15,3                   MODIFIABLE AREA\n         ESTA  @14,@15                 R14 = START OF OUTPUT AREA\n         LR    @15,@04                 END OF OUTPUT AREA\n         SR    @15,@14                 R15 = LENGTH USED IN OUTPUT AREA\n         MVCL  @04,@00                 PAD WITH BLANKS\n         EREG  @00,@14                 RESTORE WORK REGISTERS\n         STM   @14,@12,12(@13)         MAKE SAVE AREA LOOK NORMAL\n         OI    15(@13),1               SIMULATE \"T\" OPTION OF RETURN\n         PR                            RETURN TO CALLER\n         AGO   .ARMODE52X\n.ARMODE52N ANOP\n         LA    @14,2                   INCREMENT\n         AL    @14,12(,@13)            RETURN ADDRESS\n         SLR   @01,@01                 SET UP R1 FOR PADDING\n         ICM   @01,B'1000',@STRBLANKS  SET UP R1 FOR PADDING\n         LR    @15,@04                 CURRENT POINTER IN OUTPUT FIELD\n         SL    @15,8(,@13)             CALCULATE LENGTH USED\n         MVCL  @04,@00                 PAD WITH BLANKS\n         LM    @00,@06,20(@13)         RESTORE WORK REGISTERS\n         STM   @06+1,@13-1,48(@13)     MAKE SAVE AREA LOOK NORMAL\n         OI    15(@13),1               SIMULATE \"T\" OPTION OF RETURN\n         BR    @14                     RETURN TO CALLER\n.ARMODE52X ANOP\n.*\n         AIF   (NOT (&QXFEAT(3) OR &QXFEAT(7))).FEAT37T\n@STRHEXT DC    C'0123456789ABCDEF'     HEX-TO-EBCDIC CONVERSION\n.FEAT37T ANOP\n         AIF   (NOT &QXFEAT(8)).FEAT8T\n@STRMASK DC    X'4020202020202020,2020202020202120'\n.FEAT8T  ANOP\n.**********************************************************************\n.*       CONVERT S-CON TO 31-BIT ADDRESS (RESULT RETURNED IN R2)      *\n.**********************************************************************\n@STRS2A  SLR   @00,@00\n         ICM   @00,B'0011',0(@02)      R0 = 0000BDDD\n         SRDL  @00,12                  R0 = 0000000B, R1= DDD.....\n         SRL   @01,20                  R1 = 00000DDD (DISPLACEMENT)\n         AIF   (NOT &ARMODE).ARMODE88N\n         SLL   @00,2                   MULT BY 4\n         CLI   0(@02),@07*16           R7-R13?\n         BNL   @STRS2A7                YES, JUMP\n.*BASE REG IS R0-R6\n@STRS2A4 LTR   @02,@00                 IS R0 THE BASE REG?\n         BNZ   @STRS2A5                NO, JUMP\n         LTR   @02,@01                 IS THIS A PSA ADDRESS?\n         BNZR  @14                     YES, GOBACK\n         EREG  @00,@00                 POP R0\n         LAE   @02,0                   R2=0 AR2=0\n         LR    @02,@00                 PASS R0 VALUE\n         LA    @02,0(,@02)             CLEAN UP\n         BR    @14                     GOBACK\n@STRS2A5 LR    @07,@00                 SAVE R0 (B*4)\n         LR    @08,@01                 SAVE R1 (DDD)\n         LR    @09,@03                 SAVE R3\n         LAE   @10,0(,@04)             SAVE R4\n         LR    @11,@05                 SAVE R5\n         LAE   @12,0(,@06)             SAVE R6\n         EREG  @01,@06                 RELOAD CALLER'S R1-R6\n         EX    0,@STRS2A9-4(@07)       ADD BASE REG VALUE TO DISPL\n         LR    @03,@09                 RESTORE R3\n         LAE   @04,0(,@10)             RESTORE R4\n         LR    @05,@11                 RESTORE R5\n         LAE   @06,0(,@12)             RESTORE R6\n         BR    @14                     GOBACK\n.*BASE REG IS R7-R13\n@STRS2A7 LR    @02,@00                 R2= 0000000B (BASE REG NUMBER)\n         EREG  @07,@12                 RESTORE CALLER'S R7-R12\n         EX    0,@STRS2A9-4(@02)       ADD BASE REG VALUE TO DISPL\n         BR    @14                     GOBACK\n@STRS2A9 LAE   @02,0(@08,@01)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@08,@02)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@08,@03)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@08,@04)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@08,@05)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@08,@06)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@07)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@08)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@09)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@10)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@11)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@12)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@13)          ADD BASE REG VALUE TO DISPL\n         AGO   .ARMODE88X\n.ARMODE88N ANOP\n         CLI   0(@02),(@06+1)*16       R7-R13?\n         BL    @STRS2A5                NO, JUMP\n.*BASE REG IS R7-R13\n         LR    @02,@00                 R2= 0000000B (BASE REG NUMBER)\n         EX    @02,@STRS2A4            ADD BASE REG VALUE TO DISPL\n         B     @STRS2A7                CLEAN UP ADDRESS\n@STRS2A4 LA    @02,0(*-*,@01)          ADD BASE REG VALUE TO DISPL\n.*BASE REG IS R0-R6\n@STRS2A5 LTR   @02,@00                 IS R0 THE BASE REG?\n         BNZ   @STRS2A6                NO, JUMP\n         LTR   @02,@01                 IS THIS A PSA ADDRESS?\n         BNZR  @14                     YES, GOBACK\n@STRS2A6 SLL   @02,2                   R2= 000000BB BASE * 4\n         L     @02,20(@02,@13)         PICK UP BASE REG VALUE\n         LA    @02,0(@02,@01)          ADD BASE REG VALUE TO DISPL\n.*CLEAN UP R2 BASED ON CALLER'S AMODE\n@STRS2A7 TM    12(@13),X'80'           CALLER'S IN AMODE31?\n         BOR   @14                     YES, GOBACK\n         ICM   @02,B'1000',16          NO, ZERO HI-ORDER BYTE\n         BR    @14\n.ARMODE88X ANOP\n         AIF   ('&OPT3' EQ 'LOCTR').GENL7L\n@STRBLANKS DC  CL((((*+&STRBLANKS+7-@STRING)/8)*8)-(*-@STRING))' '\n         AGO   .GENL7X\n.GENL7L  ANOP\n@STRBLANKS DC  CL&STRBLANKS.' '\n.GENL7X  ANOP\n@STRING_SIZE EQU *-@STRING             SIZE OF GENERATED CSECT\n.**********************************************************************\n.*       WORK AREA (CALLER'S SAVE AREA)                               *\n.**********************************************************************\n         EJECT ,                               <38j>\n@STRSAVE DSECT                         24-BYTE WORK AREA\n         DS    A(0,@STRSAVE,@STRSAVE,14,15,0,1,2,3,4,5,6)\n@STRWK16 DS    F'7,8,9,10'             WORK AREA\n@STRDWD  DS    D'1112'                 WORK AREA\n@STRPARM DSECT\n@STRSCON DS    S                   +0  FIELD ADDRESS\n@STRFLEN DS    S                   +2  FIELD LENGTH\n@STRFLAG DS    B                   +4  FORMAT, FLAGS\n@STRLAST EQU   X'80'                     LAST ENTRY\n@STRLIT  EQU   X'40'                     LITERAL, @STRSCON IS AN OFFSET\n@STRJDT  EQU   X'20'                     JULIAN DATE\n.*             X'3F'                   CONVERSION REQUIRED\n@STRHEX  EQU   X'08'                     HEXADECIMAL\n@STRBIN  EQU   X'04'                     BINARY\n@STRPACK EQU   X'02'                     PACKED\n@STRREG  EQU   X'01'                     REGISTER\n@STRLEN2 DS    B                   +5  FORMAT, OUTPUT LENGTH\n@STRLEFT EQU   X'80'                     LEFT JUSTIFICATION\n@STRZERO EQU   X'40'                     LEADING ZEROES\n.*             X'3F'                     OUTPUT LENGTH, 0 MEANS TRUNC.\n@STRNEXT EQU   *                   +6\n         AIF   (NOT D'$LTORG).MEND99   CSECT-ONLY\n         AIF   (D'$STRING).MEND99      CSECT-ONLY\n         SPACE 3                                    <38j>\n$LTORG   LOCTR\n         AIF   ('&OPT3' EQ 'LOCTR').GENL9L\n         CNOP  0,4\n$STRING  BALR  @15,0                   LOCAL BASE\n         L     @15,6(@15,0)            ROUTINE ADDRESS           00\n         BR    @15                     GO TO @STRING             04\n         AGO   .GENL9\n.GENL8   ANOP                          GENERATE,NOCSECT\n&QXLIT   SETA  0                       DO NOT GENERATE LITERALS TWICE\n&QXFEAT(1) SETB 1,1,1,1,1,1,1,1,1,1,1,1   GENERATE=FULL\n         SPACE 3                                      <38j>\n$LTORG   LOCTR\n         CNOP  0,4\n$STRING  BALR  R15,0                   LOCAL BASE\n         L     R15,6(R15,0)            ROUTINE ADDRESS           00\n         BR    R15                     GO TO @STRING             04\n.GENL9   ANOP\n         DC    V(@STRING)              ROUTINE ADDRESS           06\n         AGO   .MEND\n.GENL9L  POP   USING                   GENERATE,LOCTR\n$STRING  BAS   R15,$STRING2\n         DC    Y(@STRING-*)            OFFSET TO @STRING ROUTINE\n$STRING2 AH    R15,0(R15)\n         BR    R15\n.MEND    AIF   ('&PRINT' EQ 'NOGEN').MEND99\n         POP   PRINT\n.MEND99  MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WK$OUT": {"ttr": 2057, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x12\\x9f\\x01\\x02\\x12\\x9f\\x13\\x00\\x00\\r\\x00\\r\\x00\\x00\\xe2\\xc8\\xd6\\xe6\\xd4\\xf3\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-05-09T00:00:00", "modifydate": "2002-05-09T13:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "SHOWM38"}, "text": "         MACRO\n         WK$OUT\nDY8OUT   DS    16F                     SAVEAREA: SHOWOUT\nDY8DCB   DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,                      +\n               LRECL=100,BLKSIZE=3200,RECFM=FB\nDY8OPEN  OPEN  (,),MF=L\nDY8CLOSE CLOSE (,),MF=L\nDY8PTRS  DS    2F                      BXLE: @REC, L'REC\nDY8SA    DS    18F                     DATA MANAGEMENT SAVEAREA\nDY8WORD1 DS    F                       WORK\nDY8WORD2 DS    F                       WORK\nDY8WORD3 DS    F                       WORK\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "YREGS": {"ttr": 2059, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x12\\x9f\\x01\\x02\\x12\\x9f\\x13\\x00\\x00\\x17\\x00\\x17\\x00\\x00\\xe2\\xc8\\xd6\\xe6\\xd4\\xf3\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-05-09T00:00:00", "modifydate": "2002-05-09T13:00:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "SHOWM38"}, "text": "         MACRO\n         YREGS\n         GBLA  &REGS\n&REGS    SETA  1\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT052/FILE052.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT052", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}