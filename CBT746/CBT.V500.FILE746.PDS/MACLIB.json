{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "RICHARD", "INMTNODE": "SY2", "INMTUID": "RICHARD", "INMFTIME": "20060505102748000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 352716, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 8000, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "RTI.MACLIB", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"RTI.MACLIB": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 8000, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 2227, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "060125", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\xc0\\x00\\x00\\x00'", "DS1LSTAR": "b'\\x00\\x06\\x08'", "DS1TRBAL": "b'<n'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\n\\x80\\x00\\x04\\x98\\xb0@'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\n\\x80\\x00\\x04\\x98\\xb0@'", "b'P\\xf4+p\\x00\\x00\\x01P\\x00\\x00\\x01Q\\x00\\x0e\\x00\\x1e'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"#ENTRY": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00(\\x00\\x92\\x14?\\x00\\x97\\x08\\x7f\\x14E\\x00\\xce\\x00\\x8c\\x00\\x00\\xd9\\xc9\\xc3\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1992-05-22T00:00:00", "modifydate": "1997-03-28T14:45:28", "lines": 206, "newlines": 140, "modlines": 0, "user": "RICHARD"}, "text": "         MACRO\n&LABEL   #ENTRY &BASEREG=,        LIST OF BASE REGS                    +\n               &SAVEAREA=,        LOCAL REG SAVE AREA                  +\n               &PARM=,            PARM POINTER SAVE AREA               +\n               &MODE=24,          ADDRESSING MODE                      +\n               &DOC=NO            DOCUMENTATION ONLY\n.*\n         LCLC  &S,&NULL\n         LCLC  &BR1,&BR2,&BR3,&BR4,&BR5\n         LCLA  &I,&J,&K\n.*\n         AIF   ('&DOC' NE 'YES').TSTPRMS\n*--PROPRIETARY_STATEMENT----------------------------------------------*\n*                                                                     *\n*  THIS MACRO IS THE SOLE PROPERTY OF RICHARD TSUJIMOTO, INC.         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*                      # E N T R Y                                    *\n*                                                                     *\n*        FUNCTION :                                                   *\n*                                                                     *\n*        PERFORM INITIAL HOUSEKEEPING UPON PROGRAM ENTRY, SUCH AS     *\n*        INITIALIZING BASE REGISTER(S), AND DECLARING CONSTANTS       *\n*        THAT IDENTIFY THE CSECT NAME, CURRENT DATE AND TIME.         *\n*                                                                     *\n*        PARAMETERS:                                                  *\n*                                                                     *\n*              #ENTRY BASEREG = (REG),                                *\n*                    SAVEAREA = VAR,                                  *\n*                    MODE=    = VAL,                                  *\n*                    PARM=    = VAR,                                  *\n*                    DOC = YES | NO                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FUNCTION:                                                    *\n*                                                                     *\n*        1.  GENERATE THE CODE TO INITIALIZE A PROGRAM.               *\n*                                                                     *\n*        2.  GENERATE THE DOC FOR THIS MACRO.                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*        PARAMETER         DESCRIPTION                                *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        BASEREG           (REG) - (2-12)                             *\n*                                  SPECIFIES THE REGISTERS THAT WILL  *\n*                                  USED AS PROGRAM BASE REGS.         *\n*                                                                     *\n*        SAVEAREA          VAR     RX-TYPE ADDRESS                    *\n*                                  SPECIFIES THE BEGINNING OF THE     *\n*                                  LOCAL REGISTER SAVE AREA.          *\n*                                                                     *\n*        MODE              VAL     '24' - 24-BIT PROGRAM              *\n*                                  '31' - 31-BIT PROGRAM              *\n*                                  DEFAULT: MODE=24                   *\n*                                                                     *\n*        PARM              VAR     RX-TYPE ADDRESS                    *\n*                                  SPECIFIES THE LOCATION TO SAVE     *\n*                                  THE OS PARM POINTER, OR R1.        *\n*                                                                     *\n*        DOC               'YES'   PRINT MACRO DOC ONLY               *\n*                          'NO'    OMIT PRINTING MACRO DOC (DEFAULT)  *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        RETURN CODE VALUES                                           *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        N/A                                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        PARAMETER LIST DESCRIPTION                                   *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        N/A                                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MEXIT\n.TSTPRMS ANOP\n         AIF   ('&DOC' EQ 'NO').TSTPRM2\n         MNOTE 8,'DOC PARM IS INVALID; MUST BE EITHER \"YES\" OR \"NO\"'\n         MEXIT\n.*\n.TSTPRM2 ANOP\n         AIF   ('&SAVEAREA' NE '').TSTPRMA\n         MNOTE 8,'*** PARM SAVEAREA IS MISSING ***'\n         MEXIT\n.*\n.TSTPRMA ANOP\n         AIF   ('&PARM' NE '').TSTLBL\n         MNOTE 8,'*** PARM=PARM IS MISSING ***'\n         MEXIT\n.*\n.TSTLBL  ANOP\n         AIF   ('&LABEL' NE '').TSTNBR\n         MNOTE 8,'*** CSECT NAME IS MISSING, CODE AS A LABEL ***'\n         MEXIT\n.*\n.TSTNBR  ANOP\n         AIF   (N'&BASEREG LT 7).TSTMODE\n         MNOTE 8,'*** TOO MANY BASE REGISTERS ***'\n         MEXIT\n.*\n.TSTMODE ANOP\n         AIF   ((&MODE EQ 24) OR (&MODE EQ 31)).GENCODE\n         MNOTE 8,'*** MODE IS INVALID, IT MUST BE EITHER 24 OR 31 ***'\n         MEXIT\n.*\n.*    INITIALIZE BASE REGISTERS\n.*\n.GENCODE ANOP\n&S       SETC  '&SYSNDX'\n&LABEL   CSECT\n         AIF   (N'&BASEREG LT 7).GENSVE1\n         MNOTE 8,'*** TOO MANY BASE REGISTERS ***'\n         MEXIT\n.GENSVE1 ANOP\n&BR1     SETC  '&BASEREG(1)'\n         AIF   (&MODE EQ 24).GEN24SV\n&LABEL   AMODE 31\n&LABEL   RMODE ANY\n         BAKR  14,0               SAVE CALLER'S STATUS ON LINK. STACK\n         SAC   0                  MAKE SURE WE'RE IN PRIMARY MODE\n         SPACE 1\n         SYSSTATE ASCENV=P        LET ASSEMBLER KNOW ALSO\n         SPACE 1\n         LR    &BASEREG(1),15     INITIALIZE BASE REG\n         AGO   .GENUSNG\n.GEN24SV ANOP\n         SAVE  (14,12)            SAVE CALLER'S REGS\n         SPACE 1\n         LR    &BR1,15            INITIALIZE 1ST/ONLY BASE REG\n.GENUSNG AIF   (N'&BASEREG NE 1).GENUSG2\n         USING &LABEL,&BR1        SET ADDR\n         AGO   .GENURG1\n.GENUSG2 AIF   (N'&BASEREG NE 2).GENUSG3\n&BR2     SETC  '&BASEREG(2)'\n         USING &LABEL,&BR1,&BR2   SET ADDR\n         AGO   .GENURG1\n.GENUSG3 AIF   (N'&BASEREG NE 3).GENUSG4\n&BR2     SETC  '&BASEREG(2)'\n&BR3     SETC  '&BASEREG(3)'\n         USING &LABEL,&BR1,&BR2,&BR3   SET ADDR\n         AGO   .GENURG1\n.GENUSG4 AIF   (N'&BASEREG NE 4).GENUSG5\n&BR2     SETC  '&BASEREG(2)'\n&BR3     SETC  '&BASEREG(3)'\n&BR4     SETC  '&BASEREG(4)'\n         USING &LABEL,&BR1,&BR2,&BR3,&BR4   SET ADDR\n         AGO   .GENURG1\n.GENUSG5 AIF   (N'&BASEREG NE 5).GENUSG6\n&BR2     SETC  '&BASEREG(2)'\n&BR3     SETC  '&BASEREG(3)'\n&BR4     SETC  '&BASEREG(4)'\n&BR5     SETC  '&BASEREG(5)'\n         USING &LABEL,&BR1,&BR2,&BR3,&BR4,&BR5   SET ADDR\n         AGO   .GENURG1\n.GENUSG6 ANOP\n&BR2     SETC  '&BASEREG(2)'\n&BR3     SETC  '&BASEREG(3)'\n&BR4     SETC  '&BASEREG(4)'\n&BR5     SETC  '&BASEREG(5)'\n&BR6     SETC  '&BASEREG(6)'\n         USING &LABEL,&BR1,&BR2,&BR3,&BR4,&BR5,&BR6   SET ADDR\n.GENURG1 ANOP\n         SPACE 1\n&I       SETA  N'&BASEREG\n&J       SETA  0\n&K       SETA  2\n.LOADBR  ANOP\n         AIF   (&K GT &I).GENADDR\n         L     &BASEREG(&K),BREG&S+(&J*4)  INIT BASE REG\n&J       SETA  &J+1\n&K       SETA  &K+1\n         AGO   .LOADBR\n.GENADDR ANOP\n         B     BEGN&S             CONTINUE\n         SPACE 1\n&I       SETA  N'&BASEREG-1\n         AIF   (&I EQ 0).GENADND\n&K       SETA  1\nBREG&S   DS    0A\n.GENDC   ANOP\n         AIF   (&K GT &I).GENADND\n         DC    A(&LABEL+(&K*4096))\n&K       SETA  &K+1\n         AGO   .GENDC\n.GENADND ANOP\n         SPACE 1\n         DC    C'*',C'&LABEL'     MODULE NAME\n         DC    C'*',C'&SYSDATE'   ASSEMBLY DATE\n         DC    C'*',C'&SYSTIME'   ASSEMBLY TIME\n         SPACE 1\n         LTORG *\n         SPACE 1\nBEGN&S   DS    0H\n         ST    1,&PARM            SAVE OS PARM POINTER\n         ST    13,&SAVEAREA+4     SAVE PTR TO CALLER'S SAVE AREA\n         LA    13,&SAVEAREA       INIT CURRENT SAVE AREA PTR\n         AIF   (&MODE EQ 24).EXIT\n         MVC   4(4,13),=C'F1SA'   INDICATE CALLER'S STATUS ON LK. STACK\n.EXIT    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#GENMFE": {"ttr": 1284, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x005\\x00\\x92\\x10\\x7f\\x00\\x98\\x12\\x0f\\x19\\x05\\x00\\xdb\\x00\\x8b\\x00\\x00\\xd9\\xc9\\xc3\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "1992-04-16T00:00:00", "modifydate": "1998-04-30T19:05:35", "lines": 219, "newlines": 139, "modlines": 0, "user": "RICHARD"}, "text": "         MACRO\n&LABEL   #GENMFE &RTN=,           SUBROUTINE NAME                      +\n               &PRM=,             REG POINTING TO PARM LIST            +\n               &P1=,              PARM-1                               +\n               &P2=,              PARM-2                               +\n               &P3=,              PARM-3                               +\n               &P4=,              PARM-4                               +\n               &P5=,              PARM-5                               +\n               &P6=,              PARM-6                               +\n               &P7=,              PARM-7                               +\n               &P8=,              PARM-8                               +\n               &P9=,              PARM-9                               +\n               &P10=,             PARM-10                              +\n               &P11=,             PARM-11                              +\n               &P12=,             PARM-12                              +\n               &P13=,             PARM-13                              +\n               &P14=,             PARM-14                              +\n               &P15=,             PARM-15                              +\n               &DOC=NO            DOCUMENTATION ONLY\n.*\n         LCLC  &S\n.*\n         AIF   ('&DOC' NE 'YES').TSTPRMS\n*--PROPRIETARY_STATEMENT----------------------------------------------*\n*                                                                     *\n*  THIS MACRO IS THE SOLE PROPERTY OF RICHARD TSUJIMOTO, INC.         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*                      # G E N M F E                                  *\n*                                                                     *\n*        FUNCTION :                                                   *\n*                                                                     *\n*        GENERATE INSTRUCTIONS TO (OPTIONALLY) OVERRIDE PARMS IN      *\n*        A PARM LIST AND INVOKE THE TARGET SUBROUTINE.                *\n*                                                                     *\n*        PARAMETERS:                                                  *\n*                                                                     *\n*              #GENMFE  RTN = SUBROUTINE NAME                         *\n*                       PRM = (REG)                                   *\n*                       PN = VAR | (REG)                              *\n*                       DOC = YES | NO                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FUNCTION:                                                    *\n*                                                                     *\n*        1.  GENERATE THE INSTRUCTIONS TO OVERRIDE PARMS IN THE       *\n*            PARM LIST AND INVOKE THE TARGET SUBROUTINE.              *\n*                                                                     *\n*        2.  GENERATE THE DOC FOR THIS MACRO.                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*        PARAMETER         DESCRIPTION                                *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        RTN               SUBROUTINE NAME - NAME OF ROUTINE TO CALL  *\n*                                                                     *\n*        PRM               REG  -  REGISTER                           *\n*                                  A REGISTER THAT POINTS TO THE      *\n*                                  PARM LIST                          *\n*                                                                     *\n*        PN                VAR  -  RX-TYPE ADDRESS                    *\n*                                  SPECIFIES A FULLWORD THAT CONTAINS *\n*                                  THE VALUE THAT WILL BE USED TO     *\n*                                  OVERRIDE ITS POSITION IN THE PARM  *\n*                                  LIST. NOTE, THE VARIABLE COULD     *\n*                                  CONTAIN AN ADDRESS OR THE VALUE    *\n*                                  ITSELF, E.G. KEY LENGTH.           *\n*                          REG  -  REGISTER                           *\n*                                  SPECIFIES A REGISTER THAT CONTAINS *\n*                                  THE VALUE THAT WILL BE USED TO     *\n*                                  OVERRIDE ITS POSITION IN THE PARM  *\n*                                  LIST. NOTE, THE REGISTER COULD     *\n*                                  CONTAIN AN ADDRESS OR THE VALUE    *\n*                                  ITSELF, E.G. KEY LENGTH.           *\n*                                                                     *\n*        DOC               'YES'   PRINT MACRO DOC ONLY               *\n*                          'NO'    OMIT PRINTING MACRO DOC (DEFAULT)  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MEXIT\n.TSTPRMS ANOP\n         AIF   ('&DOC' EQ 'NO').GNPRM01\n         MNOTE 8,'DOC PARM IS INVALID; MUST BE EITHER \"YES\" OR \"NO\"'\n         MEXIT\n.*\n.GNPRM01 ANOP\n&S       SETC  '&SYSNDX'\n&LABEL   DS    0H\n         AIF   ('&P1' EQ '').GNPRM02\n         AIF   ('&P1'(1,1) EQ '(').GNPRMA1\n         L     0,&P1              POINT TO NEW PARM\n         ST    0,0(,&PRM)         OVERRIDE PARM-1\n         AGO   .GNPRM02\n.GNPRMA1 ANOP\n         ST    &P1,0(,&PRM)       OVERRIDE PARM-1\n.GNPRM02 ANOP\n         AIF   ('&P2' EQ '').GNPRM03\n         AIF   ('&P2'(1,1) EQ '(').GNPRMA2\n         L     0,&P2              POINT TO NEW PARM\n         ST    0,4(,&PRM)         OVERRIDE PARM-2\n         AGO   .GNPRM03\n.GNPRMA2 ANOP\n         ST    &P2,4(,&PRM)       OVERRIDE PARM-2\n.GNPRM03 ANOP\n         AIF   ('&P3' EQ '').GNPRM04\n         AIF   ('&P3'(1,1) EQ '(').GNPRMA3\n         L     0,&P3              POINT TO NEW PARM\n         ST    0,8(,&PRM)         OVERRIDE PARM-3\n         AGO   .GNPRM04\n.GNPRMA3 ANOP\n         ST    &P3,8(,&PRM)       OVERRIDE PARM-3\n.GNPRM04 ANOP\n         AIF   ('&P4' EQ '').GNPRM05\n         AIF   ('&P4'(1,1) EQ '(').GNPRMA4\n         L     0,&P4              POINT TO NEW PARM\n         ST    0,12(,&PRM)        OVERRIDE PARM-4\n         AGO   .GNPRM05\n.GNPRMA4 ANOP\n         ST    &P4,12(,&PRM)      OVERRIDE PARM-4\n.GNPRM05 ANOP\n         AIF   ('&P5' EQ '').GNPRM06\n         AIF   ('&P5'(1,1) EQ '(').GNPRMA5\n         L     0,&P5              POINT TO NEW PARM\n         ST    0,16(,&PRM)        OVERRIDE PARM-5\n         AGO   .GNPRM06\n.GNPRMA5 ANOP\n         ST    &P5,16(,&PRM)      OVERRIDE PARM-5\n.GNPRM06 ANOP\n         AIF   ('&P6' EQ '').GNPRM07\n         AIF   ('&P6'(1,1) EQ '(').GNPRMA6\n         L     0,&P6              POINT TO NEW PARM\n         ST    0,20(,&PRM)        OVERRIDE PARM-6\n         AGO   .GNPRM07\n.GNPRMA6 ANOP\n         ST    &P6,20(,&PRM)      OVERRIDE PARM-6\n.GNPRM07 ANOP\n         AIF   ('&P7' EQ '').GNPRM08\n         AIF   ('&P7'(1,1) EQ '(').GNPRMA7\n         L     0,&P7              POINT TO NEW PARM\n         ST    0,24(,&PRM)        OVERRIDE PARM-7\n         AGO   .GNPRM08\n.GNPRMA7 ANOP\n         ST    &P7,24(,&PRM)      OVERRIDE PARM-7\n.GNPRM08 ANOP\n         AIF   ('&P8' EQ '').GNPRM09\n         AIF   ('&P8'(1,1) EQ '(').GNPRMA8\n         L     0,&P8              POINT TO NEW PARM\n         ST    0,28(,&PRM)        OVERRIDE PARM-8\n         AGO   .GNPRM09\n.GNPRMA8 ANOP\n         ST    &P8,28(,&PRM)      OVERRIDE PARM-8\n.GNPRM09 ANOP\n         AIF   ('&P9' EQ '').GNPRM10\n         AIF   ('&P9'(1,1) EQ '(').GNPRMA9\n         L     0,&P9              POINT TO NEW PARM\n         ST    0,32(,&PRM)        OVERRIDE PARM-9\n         AGO   .GNPRM10\n.GNPRMA9 ANOP\n         ST    &P9,32(,&PRM)      OVERRIDE PARM-9\n.GNPRM10 ANOP\n         AIF   ('&P10' EQ '').GNPRM11\n         AIF   ('&P10'(1,1) EQ '(').GNPR101\n         L     0,&P10             POINT TO NEW PARM\n         ST    0,36(,&PRM)        OVERRIDE PARM-10\n         AGO   .GNPRM11\n.GNPR101 ANOP\n         ST    &P10,36(,&PRM)     OVERRIDE PARM-10\n.GNPRM11 ANOP\n         AIF   ('&P11' EQ '').GNPRM12\n         AIF   ('&P11'(1,1) EQ '(').GNPR111\n         L     0,&P11             POINT TO NEW PARM\n         ST    0,40(,&PRM)        OVERRIDE PARM-11\n         AGO   .GNPRM12\n.GNPR111 ANOP\n         ST    &P11,40(,&PRM)     OVERRIDE PARM-11\n.GNPRM12 ANOP\n         AIF   ('&P12' EQ '').GNPRM13\n         AIF   ('&P12'(1,1) EQ '(').GNPR121\n         L     0,&P12             POINT TO NEW PARM\n         ST    0,44(,&PRM)        OVERRIDE PARM-12\n         AGO   .GNPRM13\n.GNPR121 ANOP\n         ST    &P12,44(,&PRM)     OVERRIDE PARM-12\n.GNPRM13 ANOP\n         AIF   ('&P13' EQ '').GNPRM14\n         AIF   ('&P13'(1,1) EQ '(').GNPR131\n         L     0,&P9              POINT TO NEW PARM\n         ST    0,48(,&PRM)        OVERRIDE PARM-13\n         AGO   .GNPRM14\n.GNPR131 ANOP\n         ST    &P13,48(,&PRM)     OVERRIDE PARM-13\n.GNPRM14 ANOP\n         AIF   ('&P14' EQ '').GNPRM15\n         AIF   ('&P14'(1,1) EQ '(').GNPR141\n         L     0,&P14             POINT TO NEW PARM\n         ST    0,52(,&PRM)        OVERRIDE PARM-14\n         AGO   .GNPRM15\n.GNPR141 ANOP\n         ST    &P14,52(,&PRM)     OVERRIDE PARM-14\n.GNPRM15 ANOP\n         AIF   ('&P15' EQ '').GENCALL\n         AIF   ('&P15'(1,1) EQ '(').GNPR151\n         L     0,&P15             POINT TO NEW PARM\n         ST    0,56(,&PRM)        OVERRIDE PARM-15\n         AGO   .GENCALL\n.GNPR151 ANOP\n         ST    &P15,56(,&PRM)     OVERRIDE PARM-15\n.GENCALL ANOP\n         LR    1,&PRM             POINT TO PARM LIST\n         L     15,#RTN&S          POINT TO SUBROUTINE\n         BALR  14,15              GO TO SUBROUTINE\n         B     #XTN&S             CONTINUE\n#RTN&S   DC    V(&RTN)            ADDR OF SUBROUTINE\n#XTN&S   DS    0H\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#GENMFL": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x001\\x00\\x92\\x10\\x7f\\x00\\x962_\\x12V\\x00\\xc7\\x00E\\x00\\x00\\xd9\\xc9\\xc3\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "1992-04-16T00:00:00", "modifydate": "1996-11-20T12:56:31", "lines": 199, "newlines": 69, "modlines": 0, "user": "RICHARD"}, "text": "         MACRO\n&LABEL   #GENMFL &P1=,            PARM-1                               +\n               &P2=,              PARM-2                               +\n               &P3=,              PARM-3                               +\n               &P4=,              PARM-4                               +\n               &P5=,              PARM-5                               +\n               &P6=,              PARM-6                               +\n               &P7=,              PARM-7                               +\n               &P8=,              PARM-8                               +\n               &P9=,              PARM-9                               +\n               &P10=,             PARM-10                              +\n               &P11=,             PARM-11                              +\n               &P12=,             PARM-12                              +\n               &P13=,             PARM-13                              +\n               &P14=,             PARM-14                              +\n               &P15=,             PARM-15                              +\n               &DOC=NO            DOCUMENTATION ONLY\n.*\n         LCLC  &S,&T\n         LCLA  &L\n.*\n         AIF   ('&DOC' NE 'YES').TSTPRMS\n*--PROPRIETARY_STATEMENT----------------------------------------------*\n*                                                                     *\n*  THIS MACRO IS THE SOLE PROPERTY OF RICHARD TSUJIMOTO, INC.         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*                      # G E N M F L                                  *\n*                                                                     *\n*        FUNCTION :                                                   *\n*                                                                     *\n*        GENERATE A PARAMETER LIST, SIMILAR TO THE ONE NORMALLY       *\n*        GENERATED WHEN 'MF=L' IS CODE ON IBM MACROS.                 *\n*                                                                     *\n*        PARAMETERS:                                                  *\n*                                                                     *\n*              #GENMFL  PN=(SIZE, VAR), | (SIZE,,) | (,,)             *\n*                       DOC = YES | NO                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FUNCTION:                                                    *\n*                                                                     *\n*        1.  GENERATE THE PARM LIST REQUIRED BY THE SUBROUTINE.       *\n*                                                                     *\n*        2.  GENERATE THE DOC FOR THIS MACRO.                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*        PARAMETER         DESCRIPTION                                *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PN                SIZE -  NUMERIC VALUE THAT DESCRIBES THE   *\n*                                  SIZE OF THE PARM VALUE, E.G. 1-4.  *\n*                                  THE PARM WILL BE GEN'D AS AN ACON. *\n*                          VAR  -  RX-TYPE ADDRESS                    *\n*                                  SPECIFIES A VARIABLE THAT WILL BE  *\n*                                  GEN'D AS A CONSTANT IN THE PARM    *\n*                                  LIST, E.G. ABC DC  A(MYVAR).       *\n*                                                                     *\n*        DOC               'YES'   PRINT MACRO DOC ONLY               *\n*                          'NO'    OMIT PRINTING MACRO DOC (DEFAULT)  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MEXIT\n.TSTPRMS ANOP\n         AIF   ('&DOC' EQ 'NO').GNPRM01\n         MNOTE 8,'DOC PARM IS INVALID; MUST BE EITHER \"YES\" OR \"NO\"'\n         MEXIT\n.*\n.GNPRM01 ANOP\n&LABEL   DS    0A                 ALIGNMENT\n         AIF   ('&P1(1)' EQ '').GNPRM02\n         AIF   ('&P1(2)' EQ '').GNPRMA1\n         AIF   ('&P1(2)'(1,1) EQ '(').PARMERR\n         DC    AL&P1(1)(&P1(2))   PARM-1\n         AGO   .GNPRM02\n.GNPRMA1 ANOP\n         DS    AL&P1(1)           PARM-1\n.GNPRM02 ANOP\n         AIF   ('&P2(1)' EQ '').GNPRM03\n         AIF   ('&P2(2)' EQ '').GNPRMA2\n         DC    AL&P2(1)(&P2(2))   PARM-2\n         AGO   .GNPRM03\n.GNPRMA2 ANOP\n         DS    AL&P2(1)           PARM-2\n.GNPRM03 ANOP\n         AIF   ('&P3(1)' EQ '').GNPRM04\n         AIF   ('&P3(2)' EQ '').GNPRMA3\n         AIF   ('&P3(2)'(1,1) EQ '(').PARMERR\n         DC    AL&P3(1)(&P3(2))   PARM-3\n         AGO   .GNPRM04\n.GNPRMA3 ANOP\n         DS    AL&P3(1)           PARM-3\n.GNPRM04 ANOP\n         AIF   ('&P4(1)' EQ '').GNPRM05\n         AIF   ('&P4(2)' EQ '').GNPRMA4\n         AIF   ('&P4(2)'(1,1) EQ '(').PARMERR\n         DC    AL&P4(1)(&P4(2))   PARM-4\n         AGO   .GNPRM05\n.GNPRMA4 ANOP\n         DS    AL&P4(1)           PARM-4\n.GNPRM05 ANOP\n         AIF   ('&P5(1)' EQ '').GNPRM06\n         AIF   ('&P5(2)' EQ '').GNPRMA5\n         AIF   ('&P5(2)'(1,1) EQ '(').PARMERR\n         DC    AL&P5(1)(&P5(2))   PARM-5\n         AGO   .GNPRM06\n.GNPRMA5 ANOP\n         DS    AL&P5(1)           PARM-5\n.GNPRM06 ANOP\n         AIF   ('&P6(1)' EQ '').GNPRM07\n         AIF   ('&P6(2)' EQ '').GNPRMA6\n         AIF   ('&P6(2)'(1,1) EQ '(').PARMERR\n         DC    AL&P6(1)(&P6(2))   PARM-6\n         AGO   .GNPRM07\n.GNPRMA6 ANOP\n         DS    AL&P6(1)           PARM-6\n.GNPRM07 ANOP\n         AIF   ('&P7(1)' EQ '').GNPRM08\n         AIF   ('&P7(2)' EQ '').GNPRMA7\n         AIF   ('&P7(2)'(1,1) EQ '(').PARMERR\n         DC    AL&P7(1)(&P7(2))   PARM-7\n         AGO   .GNPRM08\n.GNPRMA7 ANOP\n         DS    AL&P7(1)           PARM-7\n.GNPRM08 ANOP\n         AIF   ('&P8(1)' EQ '').GNPRM09\n         AIF   ('&P8(2)' EQ '').GNPRMA8\n         AIF   ('&P8(2)'(1,1) EQ '(').PARMERR\n         DC    AL&P8(1)(&P8(2))   PARM-8\n         AGO   .GNPRM09\n.GNPRMA8 ANOP\n         DS    AL&P8(1)           PARM-8\n.GNPRM09 ANOP\n         AIF   ('&P9(1)' EQ '').GNPRM10\n         AIF   ('&P9(2)' EQ '').GNPRMA9\n         AIF   ('&P9(2)'(1,1) EQ '(').PARMERR\n         DC    AL&P9(1)(&P9(2))   PARM-9\n         AGO   .GNPRM10\n.GNPRMA9 ANOP\n         DS    AL&P9(1)           PARM-9\n.GNPRM10 ANOP\n         AIF   ('&P10(1)' EQ '').GNPRM11\n         AIF   ('&P10(2)' EQ '').GNPRA10\n         AIF   ('&P10(2)'(1,1) EQ '(').PARMERR\n         DC    AL&P10(1)(&P10(2)) PARM-10\n         AGO   .GNPRM11\n.GNPRA10 ANOP\n         DS    AL&P10(1)          PARM-10\n.GNPRM11 ANOP\n         AIF   ('&P11(1)' EQ '').GNPRM12\n         AIF   ('&P11(2)' EQ '').GNPRA11\n         AIF   ('&P11(2)'(1,1) EQ '(').PARMERR\n         DC    AL&P11(1)(&P11(2)) PARM-11\n         AGO   .GNPRM12\n.GNPRA11 ANOP\n         DS    AL&P11(1)          PARM-11\n.GNPRM12 ANOP\n         AIF   ('&P12(1)' EQ '').GNPRM13\n         AIF   ('&P12(2)' EQ '').GNPRA12\n         AIF   ('&P12(2)'(1,1) EQ '(').PARMERR\n         DC    AL&P12(1)(&P12(2)) PARM-12\n         AGO   .GNPRM13\n.GNPRA12 ANOP\n         DS    AL&P12(1)          PARM-12\n.GNPRM13 ANOP\n         AIF   ('&P13(1)' EQ '').GNPRM14\n         AIF   ('&P13(2)' EQ '').GNPRA13\n         AIF   ('&P13(2)'(1,1) EQ '(').PARMERR\n         DC    AL&P13(1)(&P13(2)) PARM-13\n         AGO   .GNPRM14\n.GNPRA13 ANOP\n         DS    AL&P13(1)          PARM-13\n.GNPRM14 ANOP\n         AIF   ('&P14(1)' EQ '').GNPRM15\n         AIF   ('&P14(2)' EQ '').GNPRA14\n         AIF   ('&P14(2)'(1,1) EQ '(').PARMERR\n         DC    AL&P14(1)(&P14(2)) PARM-14\n         AGO   .GNPRM15\n.GNPRA14 ANOP\n         DS    AL&P14(1)          PARM-14\n.GNPRM15 ANOP\n         AIF   ('&P15(1)' EQ '').GNPRM16\n         AIF   ('&P15(2)' EQ '').GNPRA15\n         AIF   ('&P15(2)'(1,1) EQ '(').PARMERR\n         DC    AL&P15(1)(&P15(2)) PARM-15\n         AGO   .GNPRM16\n.GNPRA15 ANOP\n         DS    AL&P15(1)          PARM-15\n.GNPRM16 ANOP\n         AGO   .END\n.PARMERR ANOP\n         MNOTE 8,'*** REGISTER VALUE IS INVALID FOR MF=L ***'\n         MEXIT\n.END     ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#GENMSG": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x009\\x00\\x92\\x08_\\x00\\x962_\\x12V\\x00\\xc1\\x00\\xb5\\x00\\x00\\xd9\\xc9\\xc3\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1992-03-25T00:00:00", "modifydate": "1996-11-20T12:56:39", "lines": 193, "newlines": 181, "modlines": 0, "user": "RICHARD"}, "text": "         MACRO\n&LABEL   #GENMSG &TYPE=,          MACRO TYPE                           +\n               &MSGID=,           MESSAGE ID                           +\n               &MSGTXT=,          MESSAGE TEXT                         +\n               &DOC=NO            DOCUMENTATION ONLY\n         GBLC  &GMSGID(1000),&GMSGTXT(1000),&GLABELS(1000),&MSGLBL\n         GBLB  &NOGEN,&INITF,&ENTRYF,&LASTF\n         GBLA  &MSGNO\n         LCLA  &J,&K\n         LCLC  &A,&B,&LBLS\n.*\n         AIF   ('&DOC' NE 'YES').INIT\n*--PROPRIETARY_STATEMENT----------------------------------------------*\n*                                                                     *\n*  THIS MACRO IS THE SOLE PROPERTY OF RICHARD TSUJIMOTO, INC.         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*                        # G E N M S G                                *\n*                                                                     *\n*        FUNCTION :                                                   *\n*                                                                     *\n*        GENERATE A TABLE OF MESSAGE ID'S AND TEXT.                   *\n*                                                                     *\n*        PARAMETERS:                                                  *\n*                                                                     *\n*              #GENMSG DOC = YES | NO                                 *\n*                                                                     *\n*              #GENMSG TYPE = INITIAL                                 *\n*                                                                     *\n*              #GENMSG TYPE = ENTRY,                                  *\n*                     MSGID= MSGID,                                   *\n*                     MSGTXT = 'MSGTXT'                               *\n*                                                                     *\n*              #GENMSG TYPE = LAST                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FUNCTION:                                                    *\n*                                                                     *\n*        1.  GENERATE A MESSAGE TABLE                                 *\n*                                                                     *\n*        2.  GENERATE THE DOC FOR THIS MACRO.                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT                                                        *\n*---------------------------------------------------------------------*\n*        PARAMETER         DESCRIPTION                                *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        LABEL             LABEL     - CAN BE SPECIFIED (OPTIONAL);   *\n*                                      IT COULD BE USEFUL WHEN THE    *\n*                                      MESSAGE TEXT NEEDS TO BE       *\n*                                      MODIFIED DYNAMICALLY.          *\n*                                                                     *\n*        TYPE              'INITIAL' - MUST BE SPECIFIED ON THE FIRST *\n*                                      MACRO SPECIFICATION.           *\n*                          'ENTRY'   - MUST BE SPECIFIED ON EACH MACRO*\n*                                      WHICH DESCRIBES THE MESSAGE-ID *\n*                                      AND MESSAGE TEXT.              *\n*                          'LAST'    - MUST BE SPECIFIED ON THE LAST  *\n*                                      MACRO SPECIFICATION.           *\n*                                                                     *\n*        MSGID             LABEL     - 1-TO-8 CHARACTER NAME THAT IS  *\n*                                      USED TO IDENTIFY THE MESSAGE   *\n*                                      TEXT ASSOCIATED WITH THE ID.   *\n*                                      THE NAME CONFORMS TO NORMAL    *\n*                                      ASSEMBLER VARIABLE NAMING      *\n*                                      STANDARDS.                     *\n*                                                                     *\n*        'MSGTXT'          TEXT      - THE TEXT OF THE MESSAGE, EN-   *\n*                                      CLOSED IN APOSTROPHES.         *\n*                                                                     *\n*        DOC               'YES'     - PRINT MACRO DOC ONLY           *\n*                          'NO'      - OMIT PRINTING MACRO DOC        *\n*                                      (DEFAULT)                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MEXIT\n.*\n.*  CHECK VALIDITY OF TYPE=INITIAL PARAMETERS\n.*\n.INIT    AIF   ('&TYPE' NE 'INITIAL').TSTTYP2\n         AIF   (NOT &INITF).INIT1\n         MNOTE 8,'MULTIPLE TYPE=INITIAL PARAMETERS IS NOT VALID'\n&NOGEN   SETB  1\n.INIT1   AIF   (NOT &LASTF).INIT2\n         MNOTE 8,'TYPE=INITIAL MUST PRECEDE TYPE=LAST'\n&NOGEN   SETB  1\n.INIT2   AIF   ('&MSGID' EQ '').INIT3\n         MNOTE 8,'MSGID PARAMETER IS INVALID FOR TYPE=INITIAL'\n&NOGEN   SETB  1\n.INIT3   AIF   ('&MSGTXT' EQ '').INIT4\n         MNOTE 8,'MSGTXT PARAMETER IS INVALID FOR TYPE=INITIAL'\n&NOGEN   SETB  1\n.INIT4   AIF   (&NOGEN).INITEND\n&LBLS    SETC  '&LABEL'\n         AIF   ('&LBLS' NE '').SVELABL\n&MSGLBL  SETC  '#MSGPTR'\n         AGO   .INIT5\n.SVELABL ANOP\n&MSGLBL  SETC  '&LBLS'\n.INIT5   ANOP\n&INITF   SETB  1\n&MSGNO   SETA  0\n.INITEND ANOP\n         MEXIT\n.*\n.*  CHECK VALIDITY OF TYPE=ENTRY PARAMETERS\n.*\n.TSTTYP2 AIF   ('&TYPE' NE 'ENTRY').TSTTYP3\n         AIF   (&INITF).ENT1\n         MNOTE 8,'TYPE=INITIAL MUST BE SPECIFIED FIRST'\n&NOGEN   SETB  1\n.ENT1    AIF   (NOT &LASTF).ENT2\n         MNOTE 8,'TYPE=ENTRY MUST PRECEDE TYPE=LAST'\n&NOGEN   SETB  1\n.ENT2    AIF   ('&MSGID' NE '').ENT3\n         MNOTE 8,'MSGID PARAMETER MUST BE SPECIFIED'\n&NOGEN   SETB  1\n.ENT3    AIF   ('&MSGTXT' NE '').ENT4\n         MNOTE 8,'MSGTXT PARAMETER MUST BE SPECIFIED'\n&NOGEN   SETB  1\n.ENT4    AIF   (K'&MSGID LT 9).ENT5\n         MNOTE 8,'MSGID PARAMETER IS TOO LONG'\n&NOGEN   SETB  1\n.ENT5    AIF   (&NOGEN).ENTEXIT\n&ENTRYF  SETB  1\n&MSGNO   SETA  &MSGNO+1\n         AIF   ('&LABEL' NE '').SAVELBL\n&LBLS    SETC  '#MSG&MSGNO'\n         AGO   .SAVETXT\n.SAVELBL ANOP\n&LBLS    SETC  '&LABEL'\n.SAVETXT ANOP\n&GLABELS(&MSGNO) SETC '&LBLS'\n&GMSGID(&MSGNO) SETC '&MSGID'\n&GMSGTXT(&MSGNO) SETC '&MSGTXT'\n.ENTEXIT ANOP\n         MEXIT\n.*\n.*  CHECK VALIDITY OF TYPE=LAST  PARAMETERS\n.*\n.TSTTYP3 AIF   ('&TYPE' EQ 'LAST').LAST1\n         MNOTE 8,'TYPE PARAMETER IS INVALID'\n&NOGEN   SETB  1\n.LAST1   AIF   (&INITF).LAST2\n         MNOTE 8,'TYPE=INITIAL MUST PRECEDE TYPE=LAST'\n&NOGEN   SETB  1\n.LAST2   AIF   (&ENTRYF).LAST3\n         MNOTE 8,'TYPE=ENTRY MUST PRECEDE TYPE=LAST'\n&NOGEN   SETB  1\n.LAST3   AIF   ('&MSGID' EQ '').LAST4\n         MNOTE 8,'MSGID PARAMETER IS NOT VALID FOR TYPE=LAST'\n&NOGEN   SETB  1\n.LAST4   AIF   ('&MSGTXT' EQ '').LAST5\n         MNOTE 8,'MSGTXT PARAMETER IS NOT VALID FOR TYPE=LAST'\n&NOGEN   SETB  1\n.LAST5   AIF   (&NOGEN).EXIT\n.*\n&J       SETA  1\n&M       SETA  0\n&N       SETA  0\n         SPACE 1\n.LLUP1   AIF   (&J GT &MSGNO).GENTXTP\n.*\n&GMSGID(&J) EQU &J\n.*\n&J       SETA  &J+1\n         AGO   .LLUP1\n.*\n.GENTXTP ANOP\n&J       SETA  1\n&MSGLBL  DS    0A\n.*\n.LLUP2   AIF   (&J GT &MSGNO).GENTEXT\n&K       SETA  K'&GMSGTXT(&J)-2\n&A       SETC  '&GLABELS(&J)'\n         DC    AL1(&K),AL3(&A)\n&J       SETA  &J+1\n         AGO   .LLUP2\n.*\n.GENTEXT ANOP\n&J       SETA  1\n.*\n.LLUP3   AIF   (&J GT &MSGNO).EXIT\n&A       SETC  '&GLABELS(&J)'\n&B       SETC  '&GMSGTXT(&J)'\n&A       DC    C&B\n&J       SETA  &J+1\n         AGO   .LLUP3\n.EXIT    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#OWNER": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x03\\x00\\x962o\\x00\\x962o\\x15Y\\x00\\n\\x00\\x06\\x00\\x00\\xd9\\xc9\\xc3\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1996-11-21T00:00:00", "modifydate": "1996-11-21T15:59:03", "lines": 10, "newlines": 6, "modlines": 0, "user": "RICHARD"}, "text": "         MACRO\n         #OWNER &VER=             VERSION\n*\n         B     OWN&SYSNDX         SKIP OWNERSHIP LITERAL\n*\n         DC    C'*SOLE PROPERTY OF RICHARD TSUJIMOTO, INC.*'\n         DC    C'&VER'\n*\nOWN&SYSNDX DS  0H\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#POP": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x11\\x00\\x86\\x01o\\x00\\x962_\\x12W\\x00_\\x00X\\x00\\x00\\xd9\\xc9\\xc3\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1986-01-16T00:00:00", "modifydate": "1996-11-20T12:57:11", "lines": 95, "newlines": 88, "modlines": 0, "user": "RICHARD"}, "text": "         MACRO\n&LABEL   #POP  &STACK=,           STACK LOCATION                       +\n               &DOC=NO            DOCUMENTATION ONLY\n.*\n         LCLB  &GENFLAG,&RFLAG\n.*\n&GENFLAG SETB  1\n         AIF   ('&DOC' NE 'YES').TSTSK\n*--PROPRIETARY_STATEMENT----------------------------------------------*\n*                                                                     *\n*  THIS MACRO IS THE SOLE PROPERTY OF RICHARD TSUJIMOTO, INC.         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*                        # P O P                                      *\n*                                                                     *\n*        FUNCTION : RESTORE CALLER'S REGS THAT WERE PREVIOUSLY        *\n*                   SAVE VIA THE #PUSH MACRO.                         *\n*                                                                     *\n*        PARAMETERS:                                                  *\n*                                                                     *\n*              #POP  STACK = VAL1 | (RX),                             *\n*                    DOC = YES | NO                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        RESTRICTIONS : THE STACK MUST BE INITIALIZED BEFORE IT IS    *\n*                       USED.  FOR EXAMPLE:                           *\n*                                                                     *\n*                       RSAVE   #STACK ACTION=GEN,LEVELS=2            *\n*                                 .                                   *\n*                                 .                                   *\n*                                 .                                   *\n*                               #STACK STACK=RSAVE,ACTION=INIT,       *\n*                                      LEVELS=2                       *\n*                               #PUSH STACK=RSAVE                     *\n*                                 .                                   *\n*                                 .                                   *\n*                                 .                                   *\n*                               #POP  STACK=RSAVE                     *\n*                                                                     *\n*                       NOTE: R15 IS USED AS A WORK REGISTER.         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        DESCRIPTION :                                                *\n*                                                                     *\n*        RESTORE GENERAL REGISTERS R0-R14 FROM A PUSHDOWN STACK.      *\n*        THE REGISTERS WERE PREVIOUSLY STORED ON THE STACK VIA        *\n*        THE #PUSH MACRO.                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*        PARAMETER         DESCRIPTION                                *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        STACK             VAL1 - A LABEL THAT POINTS TO THE STACK.   *\n*                          (RX) - A REGISTER THAT POINTS TO THE STACK.*\n*                                                                     *\n*        DOC               'YES' - GENERATE THE MACRO DOCUMENTATION.  *\n*                          'NO'  - DO NOT GENERATE THE DOCUMENTATION. *\n*                                  DEFAULT IS 'NO'.                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MEXIT\n.*\n.* EXAMINE POP  PARAMETERS\n.*\n.TSTSK   AIF   ('&STACK' NE '').TSTSK1\n         MNOTE 8,'STACK PARM MUST BE SPECIFIED'\n&GENFLAG SETB  0\n         AGO   .TSTGEN\n.TSTSK1  AIF   ('&STACK'(1,1) NE '(').TSTGEN\n&RFLAG   SETB  1\n.TSTGEN  AIF   (&GENFLAG).GENMAC\n         MEXIT\n.*\n.* GENERATE POP  INSTRUCTIONS\n.*\n.GENMAC  AIF   (&RFLAG).USEREG1\n         L     15,&STACK+4        POINT TO CURRENT STACK ENTRY\n         AGO   .USEREGX\n.USEREG1 ANOP\n         L     15,4&STACK         POINT TO CURRENT STACK ENTRY\n.USEREGX ANOP\n         S     15,=F'60'          POINT TO PREVIOUS STACK ENTRY\n         AIF   (&RFLAG).USEREG2\n         ST    15,&STACK+4        SAVE NEW STACK POINTER\n         AGO   .USEREGY\n.USEREG2 ANOP\n         ST    15,4&STACK         SAVE NEW STACK POINTER\n.USEREGY ANOP\n         LM    0,14,0(15)         RESTORE CALLER'S REGS\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#PUSH": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x00!\\x00\\x86\\x01_\\x00\\x962_\\x12W\\x00\\\\\\x00{\\x00\\x00\\xd9\\xc9\\xc3\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "1986-01-15T00:00:00", "modifydate": "1996-11-20T12:57:21", "lines": 92, "newlines": 123, "modlines": 0, "user": "RICHARD"}, "text": "         MACRO\n&LABEL   #PUSH &STACK=,           STACK LOCATION                       +\n               &DOC=NO            DOCUMENTATION ONLY\n.*\n         LCLB  &GENFLAG,&RFLAG\n.*\n&GENFLAG SETB  1\n         AIF   ('&DOC' NE 'YES').TSTSK\n*--PROPRIETARY_STATEMENT----------------------------------------------*\n*                                                                     *\n*  THIS MACRO IS THE SOLE PROPERTY OF RICHARD TSUJIMOTO, INC.         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*                        # P U S H                                    *\n*                                                                     *\n*        FUNCTION : SAVE CALLER'S REGS ON A PUSHDOWN STACK            *\n*                                                                     *\n*        PARAMETERS:                                                  *\n*                                                                     *\n*              #PUSH STACK = VAL1 | (RX),                             *\n*                    DOC = YES | NO                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        RESTRICTIONS : THE STACK MUST BE GENERATED AND INITIALIZED   *\n*                       BY THE #STACK MACRO BEFORE THE #PUSH MACRO    *\n*                       CAN BE USED.  FOR EXAMPLE:                    *\n*                                                                     *\n*                       RSAVE   #STACK ACTION=GEN,LEVELS=2            *\n*                                 .                                   *\n*                                 .                                   *\n*                                 .                                   *\n*                               #STACK STACK=RSAVE,ACTION=INIT,       *\n*                                      LEVELS=2                       *\n*                               #PUSH STACK=RSAVE                     *\n*                                                                     *\n*                       NOTE: R15 IS USED AS A WORK REGISTER.         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        DESCRIPTION :                                                *\n*                                                                     *\n*        GENERATE A PUSHDOWN STACK THAT WILL BE USED TO SAVE A        *\n*        CALLER'S GENERAL REGISTERS (R0-R14).  ALSO, STORE A          *\n*        CALLER'S GENERAL REGISTERS (R0-R14) ON THE PUSHDOWN STACK.   *\n*        THE #PUSH MACRO IS NORMALLY USED WITH THE #POP MACRO.        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*        PARAMETER         DESCRIPTION                                *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        STACK             VAL1 - A LABEL THAT POINTS TO THE STACK.   *\n*                          (RX) - A REGISTER THAT POINTS TO THE STACK.*\n*                                                                     *\n*        DOC               'YES' - GENERATE THE MACRO DOCUMENTATION.  *\n*                          'NO'  - DO NOT GENERATE THE DOCUMENTATION. *\n*                                  DEFAULT IS 'NO'.                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MEXIT\n.*\n.* EXAMINE PUSH PARAMETERS\n.*\n.TSTSK   AIF   ('&STACK' NE '').TSTSK1\n         MNOTE 8,'STACK PARM MUST BE SPECIFIED'\n&GENFLAG SETB  0\n         AGO   .TSTGEN\n.TSTSK1  AIF   ('&STACK'(1,1) NE '(').TSTGEN\n&RFLAG   SETB  1\n.TSTGEN  AIF   (&GENFLAG).GENMAC\n         MEXIT\n.*\n.* GENERATE PUSH INSTRUCTIONS\n.*\n.GENMAC  AIF   (&RFLAG).USEREG1\n         L     15,&STACK+4        POINT TO CURRENT STACK ENTRY\n         AGO   .USEREGX\n.USEREG1 ANOP\n         L     15,4&STACK         POINT TO CURRENT STACK ENTRY\n.USEREGX ANOP\n         STM   0,14,0(15)         SAVE CALLER'S REGS\n         LA    15,60(,15)         POINT TO NEXT STACK ENTRY\n         AIF   (&RFLAG).USEREG3\n         ST    15,&STACK+4        SAVE CURRENT STACK POINTER\n         AGO   .USEREGW\n.USEREG3 ANOP\n         ST    15,4&STACK         SAVE CURRENT STACK POINTER\n.USEREGW ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#PUTMSG": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x009\\x00\\x92\\x08_\\x01\\x05!_\\x115\\x00\\xaa\\x00\\xa3\\x00\\x00\\xd9\\xc9\\xc3\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1992-03-25T00:00:00", "modifydate": "2005-08-03T11:35:39", "lines": 170, "newlines": 163, "modlines": 0, "user": "RICHARD"}, "text": "         MACRO\n&LABEL   #PUTMSG &MSGID=,         MESSAGE ID                           +\n               &MSGTBAD=,         ADDRESS OF MESSAGE TABLE             +\n               &OTDCBAD=,         ADDRESS OF OUTPUT DCB                +\n               &OTBUFAD=,         ADDRESS OF OUTPUT BUFFER             +\n               &OTBUFLN=,         LENGTH OF OUTPUT BUFFER              +\n               &MF=,              MACRO FORMAT                         +\n               &DOC=NO            DOCUMENTATION ONLY\n.*\n         LCLC  &S,&NULL,&EOL\n.*\n&EOL     SETC  '$EOL$'\n.*\n         AIF   ('&DOC' NE 'YES').TSTPRMS\n*--PROPRIETARY_STATEMENT----------------------------------------------*\n*                                                                     *\n*  THIS MACRO IS THE SOLE PROPERTY OF RICHARD TSUJIMOTO, INC.         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*                      # P U T M S G                                  *\n*                                                                     *\n*        FUNCTION :                                                   *\n*                                                                     *\n*        WRITE A MESSAGE FROM THE MESSAGE TABLE, E.G. #GENMSG, TO     *\n*        THE USER-PROVIDED OUTPUT FILE.                               *\n*                                                                     *\n*        PARAMETERS:                                                  *\n*                                                                     *\n*              #PUTMSG MSGID = VAR | (REG),                           *\n*                       MSGTBAD = VAR | (REG),                        *\n*                       OTDCBAD = VAR | (REG),                        *\n*                       OTBUFAD = VAR | (REG),                        *\n*                       OTBUFLN = VAR | (REG),                        *\n*                       MF = L | (E,REG) | DSECT,                     *\n*                       DOC = YES | NO                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FUNCTION:                                                    *\n*                                                                     *\n*        1.  GENERATE THE CODE TO CALL THE SUBROUTINE #PUTMSG.        *\n*                                                                     *\n*        2.  GENERATE THE PARM LIST REQUIRED BY THE SUBROUTINE.       *\n*                                                                     *\n*        3.  GENERATE A DSECT OF THE PARM LIST.                       *\n*                                                                     *\n*        4.  GENERATE THE DOC FOR THIS MACRO.                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*        PARAMETER         DESCRIPTION                                *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        MSGID             VAR  -  RX-TYPE ADDRESS                    *\n*                                  SPECIFIES A FULLWORD THAT HAS THE  *\n*                                  MESSAGE NO.                        *\n*                          (REG) - (2-12)                             *\n*                                  SPECIFIES A REGISTER THAT HAS THE  *\n*                                  MESSAGE NO.                        *\n*                                                                     *\n*        MSGTBAD           VAR  -  RX-TYPE ADDRESS                    *\n*                                  SPECIFIES A FULLWORD THAT HAS THE  *\n*                                  ADDRESS OF THE MESSAGE TABLE.      *\n*                          (REG) - (2-12)                             *\n*                                  SPECIFIES A REGISTER THAT HAS THE  *\n*                                  ADDRESS OF THE MESSAGE TABLE.      *\n*                                                                     *\n*        OTDCBAD           VAR  -  RX-TYPE ADDRESS                    *\n*                                  SPECIFIES A FULLWORD THAT HAS THE  *\n*                                  ADDRESS OF THE OUTPUT DCB.         *\n*                          (REG) - (2-12)                             *\n*                                  SPECIFIES A REGISTER THAT HAS THE  *\n*                                  ADDRESS OF THE OUTPUT DCB.         *\n*                                                                     *\n*        OTBUFAD           VAR  -  RX-TYPE ADDRESS                    *\n*                                  SPECIFIES A FULLWORD THAT HAS THE  *\n*                                  ADDRESS OF THE OUTPUT BUFFER.      *\n*                          (REG) - (2-12)                             *\n*                                  SPECIFIES A REGISTER THAT HAS THE  *\n*                                  ADDRESS OF THE OUTPUT BUFFER.      *\n*                                                                     *\n*        OTBUFLN           VAR  -  RX-TYPE ADDRESS                    *\n*                                  SPECIFIES A FULLWORD THAT HAS THE  *\n*                                  LENGTH  OF THE OUTPUT BUFFER.      *\n*                          (REG) - (2-12)                             *\n*                                  SPECIFIES A REGISTER THAT HAS THE  *\n*                                  LENGTH  OF THE OUTPUT BUFFER.      *\n*                                                                     *\n*        MF                'L'   - GENERATE THE PARM LIST             *\n*                          '(E,RX)' - GENERATE CODE TO INVOKE THE     *\n*                                     SUBROUTINE AND (OPTIONALLY)     *\n*                                     MODIFY THE PARM LIST            *\n*                          'DSECT' -  GEN A DSECT OF THE PARM LIST    *\n*                                                                     *\n*        DOC               'YES'   PRINT MACRO DOC ONLY               *\n*                          'NO'    OMIT PRINTING MACRO DOC (DEFAULT)  *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        RETURN CODE VALUES                                           *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        R15                                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        PARAMETER LIST DESCRIPTION                                   *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        R1 => +0 +-------------------------------------+             *\n*                 | MESSAGE ID (NUMBER)                 |             *\n*              +4 +-------------------------------------+             *\n*                 | ADDRESS OF MESSAGE TABLE            |             *\n*              +8 +-------------------------------------+             *\n*                 | ADDRESS OF OUTPUT DCB               |             *\n*              +12+-------------------------------------+             *\n*                 | ADDRESS OF OUTPUT BUFFER            |             *\n*              +16+-------------------------------------+             *\n*                 | LENGTH OF OUTPUT BUFFER             |             *\n*                 +-------------------------------------+             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MEXIT\n.TSTPRMS ANOP\n         AIF   ('&DOC' EQ 'NO').TSTPRM2\n         MNOTE 8,'DOC PARM IS INVALID; MUST BE EITHER \"YES\" OR \"NO\"'\n         MEXIT\n.*\n.TSTPRM2 ANOP\n         AIF   ('&MF' NE 'DSECT').TSTMFL\n***********************************************************************\n*                                                                     *\n*   #PUTMSG  - PARM LIST                                              *\n*                                                                     *\n***********************************************************************\n&LABEL   DSECT\n#PMSGNO  DS    A                       MESSAG NO.\n#PMSGTAA DS    A                       ADDR OF MESSAGE TABLE\n#POTDCBA DS    A                       ADDR OF OUTPUT DCB\n#POTBUFA DS    A                       ADDR OF OUTPUT BUFFER\n#POTBUFL DS    A                       LENGTH OF OUTPUT BUFFER\n         MEXIT\n.*\n.*    MF=L - GENERATE PARM LIST\n.*\n.TSTMFL  ANOP\n         AIF   ('&MF' NE 'L').TSTMFE\n.GENLIST ANOP\n&LABEL   #GENMFL P1=(4,&MSGID),P2=(4,&MSGTBAD),P3=(4,&OTDCBAD),        +\n               P4=(4,&OTBUFAD),P5=(4,&OTBUFLN)\n         MEXIT\n.*\n.*    MF=E - GENERATE CODE TO INVOKE SUBROUTINE\n.*\n.TSTMFE  ANOP\n         AIF   ('&MF(1)' NE 'E').TSTMFI\n         AIF   (N'&MF EQ 2).GENCODE\n         MNOTE 8,'*** INVALID FORMAT FOR MF PARM ***'\n         MEXIT\n.GENCODE ANOP\n&LABEL   #GENMFE RTN=#PUTMSG,PRM=&MF(2),P1=&MSGID,P2=&MSGTBAD,         +\n               P3=&OTDCBAD,P4=&OTBUFAD,P5=&OTBUFLN\n         MEXIT\n.*\n.*    GENERATE IN-LINE CODE TO INVOKE SUBROUTINE\n.*\n.TSTMFI  ANOP\n&LABEL   #GENMFI RTN=#PUTMSG,P1=&MSGID,P2=&MSGTBAD,P3=&OTDCBAD,        +\n               P4=&OTBUFAD,P5=&OTBUFLN,P6=&EOL\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#REGS": {"ttr": 277, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\x10O\\x00\\x92\\x10O\\x159\\x00\\x10\\x00\\x10\\x00\\x00\\xd9\\xc9\\xc3\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-04-13T00:00:00", "modifydate": "1992-04-13T15:39:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "RICHARD"}, "text": "R0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#STACK": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00S\\x00\\x86\\x01o\\x00\\x962_\\x12W\\x00m\\x00p\\x00\\x00\\xd9\\xc9\\xc3\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1986-01-16T00:00:00", "modifydate": "1996-11-20T12:57:53", "lines": 109, "newlines": 112, "modlines": 0, "user": "RICHARD"}, "text": "         MACRO\n&LABEL   #STACK &STACK=,          STACK LOCATION                       +\n               &LEVELS=3,         STACK DEPTH (NO. OF REG SAVEAREAS)   +\n               &ACTION=INIT,      STACK OPERATION                      +\n               &DOC=NO            DOCUMENTATION ONLY\n.*\n         LCLB  &GENFLAG,&RFLAG,&SGEN\n.*\n&GENFLAG SETB  1\n         AIF   ('&DOC' NE 'YES').TSTSK\n*--PROPRIETARY_STATEMENT----------------------------------------------*\n*                                                                     *\n*  THIS MACRO IS THE SOLE PROPERTY OF RICHARD TSUJIMOTO, INC.         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*                        # S T A C K                                  *\n*                                                                     *\n*        FUNCTION : INITIALIZE OR GENERATE A PUSHDOWN STACK.          *\n*                                                                     *\n*        PARAMETERS:                                                  *\n*                                                                     *\n*              #STACK STACK = VAL1 | (RX),                            *\n*                    LEVELS = VAL2,                                   *\n*                    ACTION = INIT | GEN,                             *\n*                    DOC = YES | NO                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        RESTRICTIONS : R0-R3 ARE USED AS WORK REGISTERS.             *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        DESCRIPTION :                                                *\n*                                                                     *\n*        GENERATE OR INITIALIZE A PUSHDOWN STACK.                     *\n*        THE #PUSH AND #POP MACROS USE THE PUSHDOWN STACK WHICH       *\n*        IS INITIALIZED AND GENERATED BY THIS MACRO.                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*        PARAMETER         DESCRIPTION                                *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        STACK             VAL1 - A LABEL THAT POINTS TO THE STACK.   *\n*                          (RX) - A REGISTER THAT POINTS TO THE STACK.*\n*                                                                     *\n*        LEVELS            VAL2 - A NUMERIC VALUE GREATER THAN 0      *\n*                                  WHICH REFLECTS THE DEPTH OF THE    *\n*                                  STACK.  NOTE: 15 FULLWORDS ARE     *\n*                                  ALLOCATED FOR EACH LEVEL.          *\n*                                  A NONRELOCATABLE VALUE IS ALSO     *\n*                                  VALID, E.G. 'DEPTH EQU 4'          *\n*                                  DEFAULT IS 3.                      *\n*                                                                     *\n*        ACTION            'INIT' - INITIALIZE THE PUSHDOWN STACK.    *\n*                          'GEN'  - GENERATE THE DATA AREA FOR THE    *\n*                                   THE PUSHDOWN STACK.               *\n*                                  DEFAULT IS 'INIT'.                 *\n*                                                                     *\n*        DOC               'YES' - GENERATE THE MACRO DOCUMENTATION.  *\n*                          'NO'  - DO NOT GENERATE THE DOCUMENTATION. *\n*                                  DEFAULT IS 'NO'.                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MEXIT\n.*\n.* EXAMINE STACK PARAMETERS\n.*\n.TSTSK   AIF   ('&STACK' NE '').TSTSK1\n         AIF   ('&ACTION' EQ 'GEN').TSTLVLS\n         MNOTE 8,'STACK PARM MUST BE SPECIFIED'\n&GENFLAG SETB  0\n.TSTSK1  AIF   ('&ACTION' EQ 'GEN').TSTLVLS\n         AIF   ('&STACK'(1,1) NE '(').TSTLVLS\n&RFLAG   SETB  1\n.TSTLVLS AIF   (&LEVELS NE 0).TSTACTN\n         MNOTE 8,'LEVELS PARM MUST BE NONZERO'\n&GENFLAG SETB  0\n.TSTACTN AIF   ('&ACTION' EQ 'INIT').TSTGEN\n         AIF   ('&ACTION' EQ 'GEN').TSTGEN\n         MNOTE 8,'ACTION PARM IS INVALID'\n&GENFLAG SETB  0\n.TSTGEN  AIF   (&GENFLAG).GENMAC\n         MEXIT\n.*\n.* GENERATE STACK INSTRUCTIONS/DATA\n.*\n.GENMAC  AIF   ('&ACTION' NE 'GEN').DOINIT\n&LABEL   DS    A                  ADDR OF BEGINNING OF STACK\n         DS    A                  ADDR OF CURRENT ENTRY\n         DS    (15*&LEVELS)F      STACK\n         MEXIT\n.DOINIT  AIF   (&RFLAG).USEREG1\n         LA    0,&STACK+8         POINT TO 1ST STACK ENTRY\n         ST    0,&STACK           SAVE START OF STACK POINTER\n         ST    0,&STACK+4         SAVE AS CURRENT STACK ENTRY PTRR\n         AGO   .USEREGY\n.USEREG1 ANOP\n         LA    0,8&STACK          POINT TO 1ST STACK ENTRY\n         ST    0,0&STACK          SAVE START OF STACK POINTER\n         ST    0,4&STACK          SAVE AS CURRENT STACK ENTRY PTRR\n.USEREGY ANOP\n         L     1,=A(60*&LEVELS)   LENGTH OF STACK\n         LR    2,0                SAME ORIGIN\n         XR    3,3                PAD VALUE\n         MVCL  0,2                SET STACK TO NULLS\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@DEFTOKN": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\t\\x01\\x05\\x17_\\x01\\x05\\x18\\x7f\\x10 \\x00\\x95\\x00<\\x00\\x00\\xd9\\xc9\\xc3\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2005-06-24T00:00:00", "modifydate": "2005-07-06T10:20:09", "lines": 149, "newlines": 60, "modlines": 0, "user": "RICHARD"}, "text": "         MACRO\n&LABEL   @DEFTOKN\n.*\n         GBLC  &DNAME(33),&TOKNAM(33),&DELIM(33)\n         GBLA  &STAT(33),&LSIZE\n.*\n         LCLC  &S\n         LCLA  &I\n.*\n&LSIZE   SETA  33\n.*\n         AGO   .INITVAR\n*--PROPRIETARY_STATEMENT----------------------------------------------*\n*                                                                     *\n*  THIS MACRO IS THE SOLE PROPERTY OF RICHARD TSUJIMOTO, INC.         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*                      @ D E F T O K N                                *\n*                                                                     *\n*        FUNCTION :                                                   *\n*                                                                     *\n*        INITIALIZE GLOBAL VARS THAT CONTAIN TOKEN NAMES, INTERNAL,   *\n*        AND EXTERNAL VALUES.                                         *\n*                                                                     *\n*        PARAMETERS: SEE GLOBAL VARS                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n.INITVAR ANOP\n.*\n.*   STORE INTERNAL NAME OF TOKEN\n.*\n&TOKNAM(01) SETC 'TOK_IS_BLANK'\n&TOKNAM(02) SETC 'TOK_IS_COMMA'\n&TOKNAM(03) SETC 'TOK_IS_EQUAL'\n&TOKNAM(04) SETC 'TOK_IS_LPAREN'\n&TOKNAM(05) SETC 'TOK_IS_RPAREN'\n&TOKNAM(06) SETC 'TOK_IS_LT'\n&TOKNAM(07) SETC 'TOK_IS_GT'\n&TOKNAM(08) SETC 'TOK_IS_LBRACE'\n&TOKNAM(09) SETC 'TOK_IS_RBRACE'\n&TOKNAM(10) SETC 'TOK_IS_DASH'\n&TOKNAM(11) SETC 'TOK_IS_UBAR'\n&TOKNAM(12) SETC 'TOK_IS_AND'\n&TOKNAM(13) SETC 'TOK_IS_POUND'\n&TOKNAM(14) SETC 'TOK_IS_AT'\n&TOKNAM(15) SETC 'TOK_IS_PLUS'\n&TOKNAM(16) SETC 'TOK_IS_SLASH'\n&TOKNAM(17) SETC 'TOK_IS_PERCENT'\n&TOKNAM(18) SETC 'TOK_IS_STAR'\n&TOKNAM(19) SETC 'TOK_IS_SCOLON'\n&TOKNAM(20) SETC 'TOK_IS_COLON'\n&TOKNAM(21) SETC 'TOK_IS_SQUOTE'\n&TOKNAM(22) SETC 'TOK_IS_DQUOTE'\n&TOKNAM(23) SETC 'TOK_IS_NOT'\n&TOKNAM(24) SETC 'TOK_IS_TILDE'\n&TOKNAM(25) SETC 'TOK_IS_BAR'\n&TOKNAM(26) SETC 'TOK_IS_QUEST'\n&TOKNAM(27) SETC 'TOK_IS_PERIOD'\n&TOKNAM(28) SETC 'TOK_IS_EXCLAM'\n&TOKNAM(29) SETC 'TOK_IS_CENT'\n&TOKNAM(30) SETC 'TOK_IS_BSLASH'\n&TOKNAM(31) SETC 'TOK_IS_DOLLAR'\n&TOKNAM(32) SETC 'TOK_IS_SBAR'\n&TOKNAM(33) SETC 'TOK_IS_RVQUOTE'\n.*\n.*   STORE EXTERNAL NAME OF TOKEN\n.*\n&DNAME(01) SETC 'PTPAD'\n&DNAME(02) SETC 'PTCOMMA'\n&DNAME(03) SETC 'PTEQ'\n&DNAME(04) SETC 'PTLPAREN'\n&DNAME(05) SETC 'PTRPAREN'\n&DNAME(06) SETC 'PTLT'\n&DNAME(07) SETC 'PTGT'\n&DNAME(08) SETC 'PTLBRACE'\n&DNAME(09) SETC 'PTRBRACE'\n&DNAME(10) SETC 'PTDASH'\n&DNAME(11) SETC 'PTUBAR'\n&DNAME(12) SETC 'PTAND'\n&DNAME(13) SETC 'PTPOUND'\n&DNAME(14) SETC 'PTAT'\n&DNAME(15) SETC 'PTPLUS'\n&DNAME(16) SETC 'PTSLASH'\n&DNAME(17) SETC 'PTPERCNT'\n&DNAME(18) SETC 'PTSTAR'\n&DNAME(19) SETC 'PTSCOLON'\n&DNAME(20) SETC 'PTCOLON'\n&DNAME(21) SETC 'PTSQUOTE'\n&DNAME(22) SETC 'PTDQUOTE'\n&DNAME(23) SETC 'PTNOT'\n&DNAME(24) SETC 'PTTILDE'\n&DNAME(25) SETC 'PTBAR'\n&DNAME(26) SETC 'PTQUEST'\n&DNAME(27) SETC 'PTPERIOD'\n&DNAME(28) SETC 'PTEXCLAM'\n&DNAME(29) SETC 'PTCENT'\n&DNAME(30) SETC 'PTBSLASH'\n&DNAME(31) SETC 'PTDOLLAR'\n&DNAME(32) SETC 'PTSBAR'\n&DNAME(33) SETC 'PTRVQUOT'\n.*\n.*   STORE TOKEN VALUE (IN HEX) ASSOCIATED WITH EXTERNAL NAME\n.*\n&DELIM(01) SETC '40'\n&DELIM(02) SETC '6B'\n&DELIM(03) SETC '7E'\n&DELIM(04) SETC '4D'\n&DELIM(05) SETC '5D'\n&DELIM(06) SETC '4C'\n&DELIM(07) SETC '6E'\n&DELIM(08) SETC 'C0'\n&DELIM(09) SETC 'D0'\n&DELIM(10) SETC '60'\n&DELIM(11) SETC '6D'\n&DELIM(12) SETC '50'\n&DELIM(13) SETC '7B'\n&DELIM(14) SETC '7C'\n&DELIM(15) SETC '4E'\n&DELIM(16) SETC '61'\n&DELIM(17) SETC '6C'\n&DELIM(18) SETC '5C'\n&DELIM(19) SETC '5E'\n&DELIM(20) SETC '7A'\n&DELIM(21) SETC '7D'\n&DELIM(22) SETC '7F'\n&DELIM(23) SETC '5F'\n&DELIM(24) SETC 'A1'\n&DELIM(25) SETC '4F'\n&DELIM(26) SETC '6F'\n&DELIM(27) SETC '4B'\n&DELIM(28) SETC '5A'\n&DELIM(29) SETC '4A'\n&DELIM(30) SETC 'E0'\n&DELIM(31) SETC '5B'\n&DELIM(32) SETC '6A'\n&DELIM(33) SETC '79'\n.*\n.*   STORE DEFAULT STATUS FOR DELIMITERS\n.*\n&I       SETA  1\n.*\n.LOOP1   AIF   (&I GT &LSIZE).DONE\n&STAT(&I) SETA 1\n&I       SETA  &I+1\n         AGO   .LOOP1\n.*\n.DONE    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@DELIM": {"ttr": 513, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x004\\x01\\x05(\\x7f\\x01\\x05(\\x7f\\x14!\\x02S\\x02R\\x00\\x00\\xd9\\xc9\\xc3\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-10-14T00:00:00", "modifydate": "2005-10-14T14:21:34", "lines": 595, "newlines": 594, "modlines": 0, "user": "RICHARD"}, "text": "         MACRO\n&LABEL   @DELIM &DELIMTB=,        ADDRESS OF DELIMITER TABLE           +\n               &PTPAD=,           PAD CHAR                             +\n               &PTCOMMA=,         COMMA                                +\n               &PTEQ=,            EQUAL SIGN                           +\n               &PTLPAREN=,        LEFT PARENTHESIS                     +\n               &PTRPAREN=,        RIGHT PARENTHESIS                    +\n               &PTLT=,            LESS THAN SIGN                       +\n               &PTGT=,            GREATER THAN SIGN                    +\n               &PTLBRACE=,        LEFT BRACE                           +\n               &PTRBRACE=,        RIGHT BRACE                          +\n               &PTDASH=,          DASH                                 +\n               &PTUBAR=,          UNDER BAR                            +\n               &PTAND=,           AMPERSAND                            +\n               &PTPOUND=,         POUND SIGN                           +\n               &PTAT=,            AT SIGN                              +\n               &PTPLUS=,          PLUS SIGN                            +\n               &PTSLASH=,         SLASH                                +\n               &PTPERCNT=,        PERCENT SIGN                         +\n               &PTSTAR=,          ASTERISK                             +\n               &PTSCOLON=,        SEMI-COLON                           +\n               &PTCOLON=,         COLON SIGN                           +\n               &PTSQUOTE=,        SINGLE QUOTE                         +\n               &PTDQUOTE=,        DOUBLE QUOTE                         +\n               &PTNOT=,           NOT SIGN                             +\n               &PTTILDE=,         TILDE                                +\n               &PTBAR=,           BAR                                  +\n               &PTQUEST=,         QUESTION MARK                        +\n               &PTPERIOD=,        PERIOD                               +\n               &PTEXCLAM=,        EXCLAMATION MARK                     +\n               &PTCENT=,          CENT SIGN                            +\n               &PTBSLASH=,        BACK SLASH                           +\n               &PTDOLLAR=,        DOLLAR SIGN                          +\n               &PTSBAR=,          SPLIT BAR                            +\n               &PTRVQUOT=,        REVERSE QUOTE                        +\n               &MF=,              MACRO FORMAT                         +\n               &DOC=NO            DOCUMENTATION ONLY\n.*\n         GBLC  &DNAME(33),&TOKNAM(33),&DELIM(33)\n         GBLA  &STAT(33),&LSIZE\n.*\n         LCLC  &S,&KEYWD,&GENTBL,&STATF\n         LCLA  &I\n.*\n&S       SETC  '&SYSNDX'\n.*\n         AIF   ('&DOC' NE 'YES').TSTPRMS\n*--PROPRIETARY_STATEMENT----------------------------------------------*\n*                                                                     *\n*  THIS MACRO IS THE SOLE PROPERTY OF RICHARD TSUJIMOTO, INC.         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*                      @ D E L I M                                    *\n*                                                                     *\n*        FUNCTION :                                                   *\n*                                                                     *\n*        GENERATE AND MAINTAIN ARRAY OF DELIMITERS.                   *\n*                                                                     *\n*        PARAMETERS:                                                  *\n*                                                                     *\n*              @DELIM  DELIMTB  = VAR  | (REG),                       *\n*                      PT*      = YES  | NO | TOGGLE,                 *\n*                      MF = GEN | DSECT,                              *\n*                      DOC = YES | NO                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FUNCTION:                                                    *\n*                                                                     *\n*        1.  GENERATE AN ARRAY OF DELIMTERS.                          *\n*                                                                     *\n*        2.  GENERATE CODE TO MODIFY THE STATUS OF DELIMITERS.        *\n*                                                                     *\n*        3.  GENERATE THE DSECT FOR THE DELIMITER ARRAY.              *\n*                                                                     *\n*        4.  GENERATE THE DOC FOR THIS MACRO.                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*        PARAMETER         DESCRIPTION                                *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        DELIMTB           VAR  -  RX-TYPE ADDRESS                    *\n*                                  SPECIFIES THE VARIABLE THAT IS     *\n*                                  ADDRESS OF A DELIMITER ARRAY       *\n*                          (REG) - (2-12)                             *\n*                                  SPECIFIES THE REGISTER THAT HAS    *\n*                                  THE ADDRESS OF THE DELIMITER ARRAY *\n*                                                                     *\n*        PT*               VAL  -  YES | NO | TOGGLE                  *\n*                                  SPECIFIES THE STATUS OF A GIVEN    *\n*                                  DELIMITER.  YES INDICATES THAT THE *\n*                                  YES - INDICATES THAT THE CHARACTER *\n*                                  IS TO BE REGARDED AS A DELIMITER   *\n*                                  NO - INDICATES THAT THE CHARACTER  *\n*                                  IS TO BE REGARDED AS ORDINARY DATA *\n*                                  TOGGLE - SAME AS YES, PLUS EACH    *\n*                                  TIME DELIMITER IS ENCOUNTERED, IT  *\n*                                  WILL HAVE A \"TOGGLE\" EFFECT ON     *\n*                                  PTPAD, E.G. STORE PTPAD AS A TOKEN,*\n*                                  DO NOT STORE PTPAD AS A TOKEN      *\n*                                                                     *\n*                                  NOTE: TOGGLE IS USEFUL FOR TOKEN-  *\n*                                  IZING PTPAD WHEN IT IS CONSIDERED  *\n*                                  DATA, E.G. \" ABCD EFG \".           *\n*                                                                     *\n*        MF                'GEN' - GENERATE THE DELIMTER ARRAY        *\n*                          'DSECT' - GENERATE DSECT OF ARRAY          *\n*                                                                     *\n*        DOC               'YES'   PRINT MACRO DOC ONLY               *\n*                          'NO'    OMIT PRINTING MACRO DOC (DEFAULT)  *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        RETURN CODE VALUES                                           *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        N/A                                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        PARAMETER LIST DESCRIPTION                                   *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        N/A                                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MEXIT\n.TSTPRMS ANOP\n         AIF   ('&DOC' EQ 'NO').TSTPRM2\n         MNOTE 8,'DOC PARM IS INVALID; MUST BE EITHER \"YES\" OR \"NO\"'\n         MEXIT\n.*\n.*  DETERMINE MF KEYWORD VALUE\n.*\n.TSTPRM2 ANOP\n         AIF   ('&MF'   EQ '').SETF001\n         AIF   ('&MF'   EQ 'GEN').SETF002\n         AIF   ('&MF'   EQ 'DSECT').GENDSCT\n         MNOTE 8,'*** INVALID FORMAT FOR MF PARM ***'\n         MEXIT\n.*\n.GENDSCT ANOP\n***********************************************************************\n*                                                                     *\n*   DELIMITER ARRAY LAYOUT                                            *\n*                                                                     *\n***********************************************************************\n&LABEL   DSECT\n@DLMITER DS   X         DELIMITER (IN HEX)\n@DLMLAST EQU  X'00'        END-OF-ARRAY\n@DLMSTAT DS   X         DELIMITER STATUS\n@DLMACTV EQU  X'01'        ACTIVE\n@DLMTOGL EQU  X'80'        TOGGLE FLAG\n@DLMTBLN EQU  *-@DLMITER  LENGTH OF ARRAY ENTRY\n.*\n         MEXIT\n.*\n.SETF001 ANOP\n&GENTBL  SETC  'N'\n         AIF   ('&DELIMTB' NE '').TSTP001\n         MNOTE 8,'*** DELIMTB PARAMETER MISSING  ***'\n         MEXIT\n.*\n.SETF002 ANOP\n&GENTBL  SETC  'Y'\n         AIF   ('&DELIMTB' EQ '').TSTP001\n         MNOTE 8,'*** DELIMTB MUST NOT BE CODED  ***'\n         MEXIT\n.*\n.*  PROCESS PTPAD\n.*\n.TSTP001 AIF   ('&PTPAD'   EQ '').TSTP002\n         AIF   (('&PTPAD' EQ 'YES') OR ('&PTPAD' EQ 'NO')).SETP001\n         MNOTE 8,'*** INVALID VALUE FOR PTPAD    ***'\n         MEXIT\n.*\n.SETP001 ANOP\n&KEYWD   SETC  'PTPAD'\n&STATF   SETC  '&PTPAD'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP002 AIF   ('&PTCOMMA'   EQ '').TSTP003\n         AIF   (('&PTCOMMA' EQ 'YES') OR ('&PTCOMMA' EQ 'NO')).SETP002\n         AIF   ('&PTCOMMA' EQ 'TOGGLE').SETP002\n         MNOTE 8,'*** INVALID VALUE FOR PTCOMMA  ***'\n         MEXIT\n.*\n.SETP002 ANOP\n&KEYWD   SETC  'PTCOMMA'\n&STATF   SETC  '&PTCOMMA'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP003 AIF   ('&PTEQ'   EQ '').TSTP004\n         AIF   (('&PTEQ' EQ 'YES') OR ('&PTEQ' EQ 'NO')).SETP003\n         AIF   ('&PTEQ' EQ 'TOGGLE').SETP003\n         MNOTE 8,'*** INVALID VALUE FOR PTEQ  ***'\n         MEXIT\n.*\n.SETP003 ANOP\n&KEYWD   SETC  'PTEQ'\n&STATF   SETC  '&PTEQ'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP004 AIF   ('&PTLPAREN' EQ '').TSTP005\n         AIF   (('&PTLPAREN' EQ 'YES') OR                              +\n               ('&PTLPAREN' EQ 'NO')).SETP004\n         AIF   ('&PTLPAREN' EQ 'TOGGLE').SETP004\n         MNOTE 8,'*** INVALID VALUE FOR PTLPAREN  ***'\n         MEXIT\n.*\n.SETP004 ANOP\n&KEYWD   SETC  'PTLPAREN'\n&STATF   SETC  '&PTLPAREN'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP005 AIF   ('&PTRPAREN' EQ '').TSTP006\n         AIF   (('&PTRPAREN' EQ 'YES') OR                              +\n               ('&PTRPAREN' EQ 'NO')).SETP005\n         AIF   ('&PTRPAREN' EQ 'TOGGLE').SETP005\n         MNOTE 8,'*** INVALID VALUE FOR PTRPAREN  ***'\n         MEXIT\n.*\n.SETP005 ANOP\n&KEYWD   SETC  'PTRPAREN'\n&STATF   SETC  '&PTRPAREN'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP006 AIF   ('&PTLT' EQ '').TSTP007\n         AIF   (('&PTLT' EQ 'YES') OR ('&PTLT' EQ 'NO')).SETP006\n         AIF   ('&PTLT' EQ 'TOGGLE').SETP006\n         MNOTE 8,'*** INVALID VALUE FOR PTLT  ***'\n         MEXIT\n.*\n.SETP006 ANOP\n&KEYWD   SETC  'PTLT'\n&STATF   SETC  '&PTLT'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP007 AIF   ('&PTGT' EQ '').TSTP008\n         AIF   (('&PTGT' EQ 'YES') OR ('&PTGT' EQ 'NO')).SETP007\n         AIF   ('&PTGT' EQ 'TOGGLE').SETP007\n         MNOTE 8,'*** INVALID VALUE FOR PTGT  ***'\n         MEXIT\n.*\n.SETP007 ANOP\n&KEYWD   SETC  'PTGT'\n&STATF   SETC  '&PTGT'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP008 AIF   ('&PTLBRACE' EQ '').TSTP009\n         AIF   (('&PTLBRACE' EQ 'YES') OR                              +\n               ('&PTLBRACE' EQ 'NO')).SETP008\n         AIF   ('&PTLBRACE' EQ 'TOGGLE').SETP008\n         MNOTE 8,'*** INVALID VALUE FOR PTLBRACE  ***'\n         MEXIT\n.*\n.SETP008 ANOP\n&KEYWD   SETC  'PTLBRACE'\n&STATF   SETC  '&PTLBRACE'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP009 AIF   ('&PTRBRACE' EQ '').TSTP010\n         AIF   (('&PTRBRACE' EQ 'YES') OR                              +\n               ('&PTRBRACE' EQ 'NO')).SETP009\n         AIF   ('&PTRBRACE' EQ 'TOGGLE').SETP009\n         MNOTE 8,'*** INVALID VALUE FOR PTRBRACE  ***'\n         MEXIT\n.*\n.SETP009 ANOP\n&KEYWD   SETC  'PTRBRACE'\n&STATF   SETC  '&PTRBRACE'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP010 AIF   ('&PTDASH' EQ '').TSTP011\n         AIF   (('&PTDASH' EQ 'YES') OR ('&PTDASH' EQ 'NO')).SETP010\n         AIF   ('&PTDASH' EQ 'TOGGLE').SETP010\n         MNOTE 8,'*** INVALID VALUE FOR PTDASH  ***'\n         MEXIT\n.*\n.SETP010 ANOP\n&KEYWD   SETC  'PTDASH'\n&STATF   SETC  '&PTDASH'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP011 AIF   ('&PTUBAR' EQ '').TSTP012\n         AIF   (('&PTUBAR' EQ 'YES') OR ('&PTUBAR' EQ 'NO')).SETP011\n         AIF   ('&PTUBAR' EQ 'TOGGLE').SETP011\n         MNOTE 8,'*** INVALID VALUE FOR PTUBAR  ***'\n         MEXIT\n.*\n.SETP011 ANOP\n&KEYWD   SETC  'PTUBAR'\n&STATF   SETC  '&PTUBAR'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP012 AIF   ('&PTAND' EQ '').TSTP013\n         AIF   (('&PTAND' EQ 'YES') OR ('&PTAND' EQ 'NO')).SETP012\n         AIF   ('&PTAND' EQ 'TOGGLE').SETP012\n         MNOTE 8,'*** INVALID VALUE FOR PTAND  ***'\n         MEXIT\n.*\n.SETP012 ANOP\n&KEYWD   SETC  'PTAND'\n&STATF   SETC  '&PTAND'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP013 AIF   ('&PTPOUND' EQ '').TSTP014\n         AIF   (('&PTPOUND' EQ 'YES') OR ('&PTPOUND' EQ 'NO')).SETP013\n         AIF   ('&PTPOUND' EQ 'TOGGLE').SETP013\n         MNOTE 8,'*** INVALID VALUE FOR PTPOUND  ***'\n         MEXIT\n.*\n.SETP013 ANOP\n&KEYWD   SETC  'PTPOUND'\n&STATF   SETC  '&PTPOUND'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP014 AIF   ('&PTAT' EQ '').TSTP015\n         AIF   (('&PTAT' EQ 'YES') OR ('&PTAT' EQ 'NO')).SETP014\n         AIF   ('&PTAT' EQ 'TOGGLE').SETP014\n         MNOTE 8,'*** INVALID VALUE FOR PTAT  ***'\n         MEXIT\n.*\n.SETP014 ANOP\n&KEYWD   SETC  'PTAT'\n&STATF   SETC  '&PTAT'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP015 AIF   ('&PTPLUS' EQ '').TSTP016\n         AIF   (('&PTPLUS' EQ 'YES') OR ('&PTPLUS' EQ 'NO')).SETP015\n         AIF   ('&PTPLUS' EQ 'TOGGLE').SETP015\n         MNOTE 8,'*** INVALID VALUE FOR PTPLUS  ***'\n         MEXIT\n.*\n.SETP015 ANOP\n&KEYWD   SETC  'PTPLUS'\n&STATF   SETC  '&PTPLUS'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP016 AIF   ('&PTSLASH' EQ '').TSTP017\n         AIF   (('&PTSLASH' EQ 'YES') OR ('&PTSLASH' EQ 'NO')).SETP016\n         AIF   ('&PTSLASH' EQ 'TOGGLE').SETP016\n         MNOTE 8,'*** INVALID VALUE FOR PTSLASH  ***'\n         MEXIT\n.*\n.SETP016 ANOP\n&KEYWD   SETC  'PTSLASH'\n&STATF   SETC  '&PTSLASH'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP017 AIF   ('&PTPERCNT' EQ '').TSTP018\n         AIF   (('&PTPERCNT' EQ 'YES') OR                              +\n               ('&PTPERCNT' EQ 'NO')).SETP017\n         AIF   ('&PTPERCNT' EQ 'TOGGLE').SETP017\n         MNOTE 8,'*** INVALID VALUE FOR PTPERCNT  ***'\n         MEXIT\n.*\n.SETP017 ANOP\n&KEYWD   SETC  'PTPERCNT'\n&STATF   SETC  '&PTPERCNT'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP018 AIF   ('&PTSTAR' EQ '').TSTP019\n         AIF   (('&PTSTAR' EQ 'YES') OR ('&PTSTAR' EQ 'NO')).SETP018\n         AIF   ('&PTSTAR' EQ 'TOGGLE').SETP018\n         MNOTE 8,'*** INVALID VALUE FOR PTSTAR  ***'\n         MEXIT\n.*\n.SETP018 ANOP\n&KEYWD   SETC  'PTSTAR'\n&STATF   SETC  '&PTSTAR'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP019 AIF   ('&PTSCOLON' EQ '').TSTP020\n         AIF   (('&PTSCOLON' EQ 'YES') OR                              +\n               ('&PTSCOLON' EQ 'NO')).SETP019\n         AIF   ('&PTSCOLON' EQ 'TOGGLE').SETP019\n         MNOTE 8,'*** INVALID VALUE FOR PTSCOLON  ***'\n         MEXIT\n.*\n.SETP019 ANOP\n&KEYWD   SETC  'PTSCOLON'\n&STATF   SETC  '&PTSCOLON'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP020 AIF   ('&PTCOLON' EQ '').TSTP021\n         AIF   (('&PTCOLON' EQ 'YES') OR ('&PTCOLON' EQ 'NO')).SETP020\n         AIF   ('&PTCOLON' EQ 'TOGGLE').SETP020\n         MNOTE 8,'*** INVALID VALUE FOR PTCOLON  ***'\n         MEXIT\n.*\n.SETP020 ANOP\n&KEYWD   SETC  'PTCOLON'\n&STATF   SETC  '&PTCOLON'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP021 AIF   ('&PTSQUOTE' EQ '').TSTP022\n         AIF   (('&PTSQUOTE' EQ 'YES') OR                              +\n               ('&PTSQUOTE' EQ 'NO')).SETP021\n         AIF   ('&PTSQUOTE' EQ 'TOGGLE').SETP021\n         MNOTE 8,'*** INVALID VALUE FOR PTSQUOTE  ***'\n         MEXIT\n.*\n.SETP021 ANOP\n&KEYWD   SETC  'PTSQUOTE'\n&STATF   SETC  '&PTSQUOTE'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP022 AIF   ('&PTDQUOTE' EQ '').TSTP023\n         AIF   (('&PTDQUOTE' EQ 'YES') OR                              +\n               ('&PTDQUOTE' EQ 'NO')).SETP022\n         AIF   ('&PTDQUOTE' EQ 'TOGGLE').SETP022\n         MNOTE 8,'*** INVALID VALUE FOR PTDQUOTE  ***'\n         MEXIT\n.*\n.SETP022 ANOP\n&KEYWD   SETC  'PTDQUOTE'\n&STATF   SETC  '&PTDQUOTE'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP023 AIF   ('&PTNOT' EQ '').TSTP024\n         AIF   (('&PTNOT' EQ 'YES') OR ('&PTNOT' EQ 'NO')).SETP023\n         AIF   ('&PTNOT' EQ 'TOGGLE').SETP023\n         MNOTE 8,'*** INVALID VALUE FOR PTNOT  ***'\n         MEXIT\n.*\n.SETP023 ANOP\n&KEYWD   SETC  'PTNOT'\n&STATF   SETC  '&PTNOT'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP024 AIF   ('&PTTILDE' EQ '').TSTP025\n         AIF   (('&PTTILDE' EQ 'YES') OR ('&PTTILDE' EQ 'NO')).SETP024\n         AIF   ('&PTTILDE' EQ 'TOGGLE').SETP024\n         MNOTE 8,'*** INVALID VALUE FOR PTTILDE  ***'\n         MEXIT\n.*\n.SETP024 ANOP\n&KEYWD   SETC  'PTTILDE'\n&STATF   SETC  '&PTTILDE'\n.*\n.TSTP025 AIF   ('&PTBAR' EQ '').TSTP026\n         AIF   (('&PTBAR' EQ 'YES') OR ('&PTBAR' EQ 'NO')).SETP025\n         AIF   ('&PTBAR' EQ 'TOGGLE').SETP025\n         MNOTE 8,'*** INVALID VALUE FOR PTBAR  ***'\n         MEXIT\n.*\n.SETP025 ANOP\n&KEYWD   SETC  'PTBAR'\n&STATF   SETC  '&PTBAR'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP026 AIF   ('&PTQUEST' EQ '').TSTP027\n         AIF   (('&PTQUEST' EQ 'YES') OR ('&PTQUEST' EQ 'NO')).SETP026\n         AIF   ('&PTQUEST' EQ 'TOGGLE').SETP026\n         MNOTE 8,'*** INVALID VALUE FOR PTQUEST  ***'\n         MEXIT\n.*\n.SETP026 ANOP\n&KEYWD   SETC  'PTQUEST'\n&STATF   SETC  '&PTQUEST'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP027 AIF   ('&PTPERIOD' EQ '').TSTP028\n         AIF   (('&PTPERIOD' EQ 'YES') OR                              +\n               ('&PTPERIOD' EQ 'NO')).SETP027\n         AIF   ('&PTPERIOD' EQ 'TOGGLE').SETP027\n         MNOTE 8,'*** INVALID VALUE FOR PTPERIOD  ***'\n         MEXIT\n.*\n.SETP027 ANOP\n&KEYWD   SETC  'PTPERIOD'\n&STATF   SETC  '&PTPERIOD'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP028 AIF   ('&PTEXCLAM' EQ '').TSTP029\n         AIF   (('&PTEXCLAM' EQ 'YES') OR                              +\n               ('&PTEXCLAM' EQ 'NO')).SETP028\n         AIF   ('&PTEXCLAM' EQ 'TOGGLE').SETP028\n         MNOTE 8,'*** INVALID VALUE FOR PTEXCLAM  ***'\n         MEXIT\n.*\n.SETP028 ANOP\n&KEYWD   SETC  'PTEXCLAM'\n&STATF   SETC  '&PTEXCLAM'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP029 AIF   ('&PTCENT' EQ '').TSTP030\n         AIF   (('&PTCENT' EQ 'YES') OR ('&PTCENT' EQ 'NO')).SETP029\n         AIF   ('&PTCENT' EQ 'TOGGLE').SETP029\n         MNOTE 8,'*** INVALID VALUE FOR PTCENT  ***'\n         MEXIT\n.*\n.SETP029 ANOP\n&KEYWD   SETC  'PTCENT'\n&STATF   SETC  '&PTCENT'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP030 AIF   ('&PTBSLASH' EQ '').TSTP031\n         AIF   (('&PTBSLASH' EQ 'YES') OR                              +\n               ('&PTBSLASH' EQ 'NO')).SETP030\n         AIF   ('&PTBSLASH' EQ 'TOGGLE').SETP030\n         MNOTE 8,'*** INVALID VALUE FOR PTBSLASH  ***'\n         MEXIT\n.*\n.SETP030 ANOP\n&KEYWD   SETC  'PTBSLASH'\n&STATF   SETC  '&PTBSLASH'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP031 AIF   ('&PTDOLLAR' EQ '').TSTP032\n         AIF   (('&PTDOLLAR' EQ 'YES') OR                              +\n               ('&PTDOLLAR' EQ 'NO')).SETP031\n         AIF   ('&PTDOLLAR' EQ 'TOGGLE').SETP031\n         MNOTE 8,'*** INVALID VALUE FOR PTDOLLAR  ***'\n         MEXIT\n.*\n.SETP031 ANOP\n&KEYWD   SETC  'PTDOLLAR'\n&STATF   SETC  '&PTDOLLAR'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP032 AIF   ('&PTSBAR' EQ '').TSTP033\n         AIF   (('&PTSBAR' EQ 'YES') OR ('&PTSBAR' EQ 'NO')).SETP032\n         AIF   ('&PTSBAR' EQ 'TOGGLE').SETP032\n         MNOTE 8,'*** INVALID VALUE FOR PTSBAR  ***'\n         MEXIT\n.*\n.SETP032 ANOP\n&KEYWD   SETC  'PTSBAR'\n&STATF   SETC  '&PTSBAR'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.TSTP033 AIF   ('&PTRVQUOT' EQ '').TSTGENF\n         AIF   (('&PTRVQUOT' EQ 'YES') OR                              +\n               ('&PTRVQUOT' EQ 'NO')).SETP033\n         AIF   ('&PTRVQUOT' EQ 'TOGGLE').SETP033\n         MNOTE 8,'*** INVALID VALUE FOR PTRVQUOT  ***'\n         MEXIT\n.*\n.SETP033 ANOP\n&KEYWD   SETC  'PTRVQUOT'\n&STATF   SETC  '&PTRVQUOT'\n.*\n         @DELIMST &KEYWD,&STATF,&GENTBL,&DELIMTB\n.*\n.*    GENERATE ARRAY OF DELIMITERS\n.*\n.TSTGENF AIF   ('&GENTBL' EQ 'N').DONE\n.*\n&LABEL   DS    0F\n.*\n&I       SETA  1\n.LOOP1   AIF   (&I GT &LSIZE).GENLAST\n         DC    X'&DELIM(&I)',AL1(&STAT(&I))\n&I       SETA  &I+1\n         AGO   .LOOP1\n.*\n.GENLAST ANOP\n         DC    X'00',AL1(0)       END-OF-LIST MARKER\n.DONE    ANOP\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@DELIMST": {"ttr": 1288, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x18\\x01\\x05(\\x7f\\x01\\x05(\\x7f\\x14\\x15\\x00L\\x00L\\x00\\x00\\xd9\\xc9\\xc3\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-10-14T00:00:00", "modifydate": "2005-10-14T14:15:18", "lines": 76, "newlines": 76, "modlines": 0, "user": "RICHARD"}, "text": "         MACRO\n         @DELIMST &KEYWD,         EXTERNAL TOKEN NAME                  +\n               &STATF,            ON | OFF                             +\n               &GENTBL,           Y = GEN ARRAY LIST, N = RUNTIME CHG  +\n               &DELIMTB           ADDR OF DELIMITER ARRAY\n.*\n         GBLC  &DNAME(33),&TOKNAM(33),&DELIM(33)\n         GBLA  &STAT(33),&LSIZE\n.*\n         LCLC  &S\n         LCLA  &I\n.*\n         AGO   .START\n*--PROPRIETARY_STATEMENT----------------------------------------------*\n*                                                                     *\n*  THIS MACRO IS THE SOLE PROPERTY OF RICHARD TSUJIMOTO, INC.         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*                      @ D E L I M S T                                *\n*                                                                     *\n*        FUNCTION :                                                   *\n*                                                                     *\n*        INITIALIZE ARRAY OF DELIMITERS, OR GENERATE THE CODE TO      *\n*        MODIFY THE STATUS OF GIVEN ENTRIES IN THE ARRAY.             *\n*                                                                     *\n*        PARAMETERS: SEE GLOBAL VARS AND MACRO HEADER                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n.START   ANOP\n.*\n.*   LOCATE LOCATION OF EXTERNAL TOKEN NAME\n.*\n&I       SETA  1\n.LOOP1   AIF   (&I GT &LSIZE).INTERR1\n         AIF   ('&KEYWD' EQ '&DNAME(&I)').GOTIT\n&I       SETA  &I+1\n         AGO   .LOOP1\n.*\n.INTERR1 ANOP\n         MNOTE 8,'*** INTERNAL ERROR - EXTERNAL TOKEN NAME LOOKUP ***'\n         MEXIT\n.*\n.GOTIT   AIF   ('&GENTBL' EQ 'Y').UPDTIT\n.*\n.*   GENERATE CODE TO MODIFY STATUS OF DELIMITER\n.*\n         L     R1,&DELIMTB        POINT TO DELIMITER ARRAY\n         S     R1,=F'2'           BACKUP 2 BYTES\n         LA    R15,&I             INDEX LOCATION OF DELIMITER IN ARRAY\n         SLL   R15,1              MULIPLY BY 2\n         AR    R1,R15             POINT TO ENTRY IN DELIMITER ARRAY\n         AIF   ('&STATF' EQ 'OFF').SETI001\n         MVI   1(R1),X'01'        SET STATUS TO \"YES\"\n         AGO   .GETOUT\n.*\n.SETI001 ANOP\n         MVI   1(R1),X'00'        SET STATUS TO \"NO'\n.*\n.GETOUT  ANOP\n         MEXIT\n.*\n.UPDTIT  AIF   ('&STATF' NE 'YES').SETS001\n&STAT(&I) SETA 1\n         AGO   .DONE\n.*\n.SETS001 AIF   ('&STATF' NE 'NO').SETS002\n&STAT(&I) SETA 0\n         AGO   .DONE\n.*\n.SETS002 ANOP\n&STAT(&I) SETA 129\n         AGO   .DONE\n.*\n.DONE    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@INTRPRT": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00#\\x01\\x05\\x18\\x7f\\x01\\x05!_\\x11C\\x00\\xc6\\x00\\xb9\\x00\\x00\\xd9\\xc9\\xc3\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2005-07-06T00:00:00", "modifydate": "2005-08-03T11:43:23", "lines": 198, "newlines": 185, "modlines": 0, "user": "RICHARD"}, "text": "         MACRO\n&LABEL   @INTRPRT &SYNTXTB=,      ADDRESS OF USER'S SYNTAX TABLE       +\n               &ERRMSG=,          ADDRESS OF 100-BYTE MESSAGE BUFFER   +\n               &MF=,              MACRO FORMAT                         +\n               &DOC=NO            DOCUMENTATION ONLY\n.*\n         LCLC  &S,&NULL,&EOL\n.*\n&EOL     SETC  '$EOL$'\n.*\n         AIF   ('&DOC' NE 'YES').TSTPRMS\n*--PROPRIETARY_STATEMENT----------------------------------------------*\n*                                                                     *\n*  THIS MACRO IS THE SOLE PROPERTY OF RICHARD TSUJIMOTO, INC.         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*                      # I N T R P T R                                *\n*                                                                     *\n*        FUNCTION :                                                   *\n*                                                                     *\n*        SCAN THE STACK THAT WAS CREATED BY THE @PARSE MACRO,         *\n*        USING THE USER'S SYNTAX TABLE AND BRANCH TO THE USER'S       *\n*        EXIT ROUTINE(S).                                             *\n*                                                                     *\n*        PARAMETERS:                                                  *\n*                                                                     *\n*              @INTRPRT SYNTXTB = VAR  | (REG),                       *\n*                      ERRMSG   = VAR  | (REG),                       *\n*                      MF = L | (E,REG) | DSECT | EXITPARM,           *\n*                      DOC = YES | NO                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FUNCTION:                                                    *\n*                                                                     *\n*        1.  GENERATE THE CODE TO CALL THE SUBROUTINE @INTRPRT.       *\n*                                                                     *\n*        2.  GENERATE THE PARM LIST REQUIRED BY THE SUBROUTINE.       *\n*                                                                     *\n*        3.  GENERATE A DSECT OF THE PARM LIST.                       *\n*                                                                     *\n*        4.  GENERATE A DSECT OF THE PARM LIST PASSED TO THE USER'S   *\n*            EXIT ROUTINE(S).                                         *\n*                                                                     *\n*        5.  GENERATE THE DOC FOR THIS MACRO.                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        DESCRIPTION :                                                *\n*                                                                     *\n*        @INTRPRT PROCESSES THE STACK THAT WAS CREATED BY @PARSE      *\n*        IN FIRST-IN FIRST-OUT (FIFO) ORDER.  THE USER-PROVIDED       *\n*        SYNTAX TABLE IS USED TO NAVIGATE THRU THE STRING UNTIL       *\n*        A USER EXIT ROUTINE IS SPECIFIED FOR A KEYWORD/DATA MATCH.   *\n*        @INTRPRT WILL THEN FORMAT A PARMLIST TO PASS TO THE USER'S   *\n*        EXIT ROUTINE AND THEN PASS CONTROL TO IT.  CONTROL WILL BE   *\n*        PASSED USING THE STANDARD OS PROTOCOL, E.G. R13 POINTS TO    *\n*        @INTRPRT'S REGISTER SAVE AREA.  THE USER'S EXIT PROCESSES    *\n*        THE TOKEN, RETURNING WITH R15=0 IF SUCCESSFUL, ELSE SETTING  *\n*        R15=4 AND STORING AN ERROR MESSAGE IN THE BUFFER PROVIDED.   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*        PARAMETER         DESCRIPTION                                *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SYNTXTB           VAR  -  RX-TYPE ADDRESS                    *\n*                                  SPECIFIES THE VARIABLE THAT IS     *\n*                                  THE BEGINNING OF THE USER'S        *\n*                                  SYNTAX TABLE                       *\n*                          (REG) - (2-12)                             *\n*                                  SPECIFIES THE REGISTER THAT HAS    *\n*                                  THE ADDRESS OF THE BEGINNING OF    *\n*                                  THE USER'S SYNTAX TABLE            *\n*                                                                     *\n*        ERRMSG            VAR  -  RX-TYPE ADDRESS                    *\n*                                  SPECIFIES THE VARIABLE THAT IS     *\n*                                  THE BEGINNING OF A 100-BYTE        *\n*                                  MESSAGE BUFFER                     *\n*                          (REG) - (2-12)                             *\n*                                  SPECIFIES THE REGISTER THAT HAS    *\n*                                  THE ADDRESS OF THE BEGINNING OF    *\n*                                  A 100-BYTE MESSAGE BUFFER          *\n*                                                                     *\n*        MF                'L'   - GENERATE THE PARM LIST             *\n*                          '(E,RX)' - GENERATE CODE TO INVOKE THE     *\n*                                     SUBROUTINE AND (OPTIONALLY)     *\n*                                     MODIFY THE PARM LIST            *\n*                          'DSECT' -  GEN A DSECT OF THE PARM LIST    *\n*                          'EXITPARM' - GEN A DSECT OF THE USER EXIT  *\n*                                     PARM LIST                       *\n*                                                                     *\n*        DOC               'YES'   PRINT MACRO DOC ONLY               *\n*                          'NO'    OMIT PRINTING MACRO DOC (DEFAULT)  *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        RETURN CODE VALUES                                           *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        R15 =  0 - SUCCESS                                           *\n*               4 - ADDR OF USER'S SYNTAX TABLE IS ZERO, OR           *\n*                   ADDR OF USER'S MESSAGE BUFFER IS ZERO             *\n*               8 - ERROR DETECTED BY USER'S EXIT                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        PARAMETER LIST DESCRIPTION                                   *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        R1 => +0 +-------------------------------------+             *\n*                 | ADDRESS OF USER'S SYNTAX TABLE      |             *\n*              +4 +-------------------------------------+             *\n*                 | LENGTH OF TOKEN IN ERROR            |             *\n*              +8 +-------------------------------------+             *\n*                 | ADDRESS OF TOKEN IN ERROR           |             *\n*              +C +-------------------------------------+             *\n*                 | ADDRESS OF 100-BYTE MESSAGE         |             *\n*                 +-------------------------------------+             *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        PARAMETER LIST DESCRIPTION FOR USER EXIT                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        R1 => +0 +-------------------------------------+             *\n*                 | ADDRESS OF TOKEN                    |             *\n*              +4 +-------------------------------------+             *\n*                 | LENGTH OF TOKEN                     |             *\n*              +8 +-------------------------------------+             *\n*                 | ADDRESS OF 100-BYTE MESSAGE BUFFER  |             *\n*                 +-------------------------------------+             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MEXIT\n.*\n.TSTPRMS ANOP\n         AIF   ('&DOC' EQ 'NO').TSTPRM2\n         MNOTE 8,'DOC PARM IS INVALID; MUST BE EITHER \"YES\" OR \"NO\"'\n         MEXIT\n.*\n.TSTPRM2 ANOP\n         AIF   ('&MF' NE 'DSECT').TSTPRM3\n***********************************************************************\n*                                                                     *\n*   @INTRPRT - PARM LIST                                              *\n*                                                                     *\n***********************************************************************\n&LABEL   DSECT\n@ISYNTXB DS    A                       ADDR OF USER'S SYNTAX TABLE\n@ITOKLEN DS    F                       LENGTH OF TOKEN IN ERROR\n@ITOKNAD DS    A                       ADDR OF TOKEN IN ERROR\n@IERRMSG DS    A                       ADDR OF 100-BYTE ERROR MESSAGE\n         MEXIT\n.*\n.TSTPRM3 ANOP\n         AIF   ('&MF' NE 'EXITPARM').TSTMFL\n***********************************************************************\n*                                                                     *\n*   @INTRPRT - EXIT ROUTINE PARM LIST                                 *\n*                                                                     *\n***********************************************************************\n&LABEL   DSECT\n@IXTOKAD DS    A                       ADDR OF TOKEN\n@IXTOKLN DS    F                       LENGTH OF TOKEN\n@IXERRMG DS    A                       ADDR OF 100-BYTE MESSAGE BUFFER\n@IXERRML EQU   100                     LENGTH OF MESSAGE BUFFER\n@IXPRMLN EQU   *-@IXTOKAD              LENGTH OF PARM LIST\n         MEXIT\n.*\n.*    MF=L - GENERATE PARM LIST\n.*\n.TSTMFL  ANOP\n         AIF   ('&MF' NE 'L').TSTMFE\n.*\n.GENLIST ANOP\n&LABEL   #GENMFL P1=(4,&SYNTXTB),P2=(4,0),P3=(4,0),P4=(4,&ERRMSG)\n         MEXIT\n.*\n.*    MF=E - GENERATE CODE TO INVOKE SUBROUTINE\n.*\n.TSTMFE  ANOP\n         AIF   ('&MF(1)' NE 'E').TSTMFI\n         AIF   (N'&MF EQ 2).GENCODE\n         MNOTE 8,'*** INVALID FORMAT FOR MF PARM ***'\n         MEXIT\n.*\n.GENCODE ANOP\n&LABEL   #GENMFE RTN=@INTRPRT,PRM=&MF(2),P1=&SYNTXTB,P4=&ERRMSG\n         MEXIT\n.*\n.*    GENERATE IN-LINE CODE TO INVOKE SUBROUTINE\n.*\n.TSTMFI  ANOP\n&LABEL   #GENMFI RTN=@INTRPRT,P1=&SYNTXTB,P4=&ERRMSG,P5=&EOL\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@PARSE": {"ttr": 274, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x16\\x01\\x05\\x17O\\x01\\x05!_\\x11D\\x00\\xc8\\x00\\xab\\x00\\x00\\xd9\\xc9\\xc3\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "2005-06-23T00:00:00", "modifydate": "2005-08-03T11:44:16", "lines": 200, "newlines": 171, "modlines": 0, "user": "RICHARD"}, "text": "         MACRO\n&LABEL   @PARSE &CMDLINE=,        ADDRESS OF COMMAND LINE STRING       +\n               &CMDLEN=,          LENGTH OF COMMAND LINE STRING        +\n               &DELIMTB=,         ADDRESS OF DELIMITER ARRAY           +\n               &MF=,              MACRO FORMAT                         +\n               &DOC=NO            DOCUMENTATION ONLY\n.*\n         LCLC  &S,&NULL,&EOL\n         LCLA  &MAXSTRL,&TOKENL,&STAKPFX,&WRKLEN\n.*\n&S       SETC  '&SYSNDX'\n&EOL     SETC  '$EOL$'\n&MAXSTRL SETA  100                MAX. LENGTH FOR COMMAND LINE STRING\n&TOKENL  SETA  8                  LENGTH OF TOKEN ENTRY\n&STAKPFX SETA  12                 LENGTH OF TOKEN STACK PREFIX\n.*\n         AIF   ('&DOC' NE 'YES').TSTPRMS\n*--PROPRIETARY_STATEMENT----------------------------------------------*\n*                                                                     *\n*  THIS MACRO IS THE SOLE PROPERTY OF RICHARD TSUJIMOTO, INC.         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*                      @ P A R S E                                    *\n*                                                                     *\n*        FUNCTION :                                                   *\n*                                                                     *\n*        SCAN A CHARACTER STRING AND CONVERT THE INPUT INTO TOKENS.   *\n*                                                                     *\n*        PARAMETERS:                                                  *\n*                                                                     *\n*              @PARSER CMDLINE  = VAR  | (REG),                       *\n*                      CMDLEN   = VAR  | (REG),                       *\n*                      DELIM    = VAR  | (REG),                       *\n*                      MF = L | (E,REG) | DSECT | GENLIST,            *\n*                      DOC = YES | NO                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FUNCTION:                                                    *\n*                                                                     *\n*        1.  GENERATE THE CODE TO CALL THE SUBROUTINE @PARSE.         *\n*                                                                     *\n*        2.  GENERATE THE PARM LIST REQUIRED BY THE SUBROUTINE.       *\n*                                                                     *\n*        3.  GENERATE A DSECT OF THE PARM LIST.                       *\n*                                                                     *\n*        4.  GENERATE THE SPACE REQUIRED FOR THE TOKEN STACK.         *\n*                                                                     *\n*        5.  GENERATE THE DOC FOR THIS MACRO.                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        DESCRIPTION :                                                *\n*                                                                     *\n*        @PARSE WILL PERFORM A LEXCIAL SCAN OF THE CHARACTER STRING   *\n*        AND CREATE TOKENS.                                           *\n*                                                                     *\n*        SEE \"PARSING, SYNTAX CHECKING AND INTERPRETING, USER'S       *\n*            GUIDE\" FOR DETAILS.                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*        PARAMETER         DESCRIPTION                                *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        CMDLINE           VAR  -  RX-TYPE ADDRESS                    *\n*                                  SPECIFIES THE VARIABLE THAT IS     *\n*                                  ADDRESS OF THE COMMAND STRING      *\n*                          (REG) - (2-12)                             *\n*                                  SPECIFIES THE REGISTER THAT HAS    *\n*                                  THE ADDRESS OF THE COMMAND STRING  *\n*                                                                     *\n*        CMDLEN            VAR  -  RX-TYPE ADDRESS                    *\n*                                  SPECIFIES THE VARIABLE THAT IS     *\n*                                  THE LENGTH OF THE COMMAND STRING   *\n*                          (REG) - (2-12)                             *\n*                                  SPECIFIES THE REGISTER THAT HAS    *\n*                                  THE LENGTH OF THE COMMAND STRING   *\n*                                                                     *\n*                                  MAXIMUM LENGTH ALLOWED IS SET      *\n*                                  BY THE MACRO VAR MAXSTRLEN         *\n*                                                                     *\n*        DELIM             VAR  -  RX-TYPE ADDRESS                    *\n*                                  SPECIFIES THE VARIABLE THAT IS     *\n*                                  THE ADDR. OF THE DLIMITER ARRAY    *\n*                          (REG) - (2-12)                             *\n*                                  SPECIFIES THE REGISTER THAT HAS    *\n*                                  THE ADDR. OF THE DELIMITER ARRAY   *\n*                                                                     *\n*        MF                'L'   - GENERATE THE PARM LIST             *\n*                          '(E,RX)' - GENERATE CODE TO INVOKE THE     *\n*                                     SUBROUTINE AND (OPTIONALLY)     *\n*                                     MODIFY THE PARM LIST            *\n*                          'DSECT' -  GENERATE PARAMETER LIST DSECT   *\n*                          'GENLIST' - GENERATE SPACE FOR WORK AREA   *\n*                                                                     *\n*                          NOTE: GENLIST IS FOR INTERNAL USE ONLY     *\n*                                                                     *\n*        DOC               'YES'   PRINT MACRO DOC ONLY               *\n*                          'NO'    OMIT PRINTING MACRO DOC (DEFAULT)  *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        RETURN CODE VALUES                                           *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        R15 =  0 - SUCCESS                                           *\n*               4 - ADDR FOR COMMAND STRING IS ZERO                   *\n*               8 - STRING HAS INVALID LENGTH                         *\n*              12 - ADDR FOR DELIMITER ARRAY IS ZERO                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        PARAMETER LIST DESCRIPTION                                   *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        R1 => +0 +-------------------------------------+             *\n*                 | ADDRESS OF COMMAND STRING           |             *\n*              +4 +-------------------------------------+             *\n*                 | LENGTH OF COMMAND STRING            |             *\n*              +8 +-------------------------------------+             *\n*                 | ADDRESS OF ARRAY OF DELIMITERS      |             *\n*                 +-------------------------------------+             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MEXIT\n.TSTPRMS ANOP\n         AIF   ('&DOC' EQ 'NO').TSTPRM2\n         MNOTE 8,'DOC PARM IS INVALID; MUST BE EITHER \"YES\" OR \"NO\"'\n         MEXIT\n.*\n.TSTPRM2 ANOP\n         AIF   ('&MF' NE 'DSECT').TSTMFL\n.*\n***********************************************************************\n*                                                                     *\n*   @PARSE - PARM LIST                                                *\n*                                                                     *\n***********************************************************************\n&LABEL   DSECT\n@PCMDADR DS    A                       ADDR OF COMMAND LINE STRING\n@PCMDLEN DS    F                       LENGTH OF COMMAND STRING\n@PCMDMXL EQU   &MAXSTRL                   MAX. STRING LENGTH ALLOWED\n@PDELIMA DS    A                       ADDR OF ARRAY OF DELIMITERS\n         MEXIT\n.*\n.*    MF=L - GENERATE PARM LIST\n.*\n.TSTMFL  ANOP\n&CMDLNAD SETC  '&CMDLINE'\n&CMDLLND SETC  '&CMDLEN'\n&DELIMAD SETC  '&DELIMTB'\n.*\n         AIF   ('&CMDLINE' NE '').TSTMFL1\n&CMDLNAD SETC  '0'\n.*\n.TSTMFL1 AIF   ('&CMDLEN' NE '').TSTMFL2\n&CMDLLND SETC  '0'\n.*\n.TSTMFL2 AIF   ('&DELIMTB' NE '').TSTMFL3\n&DELIMAD SETC  '0'\n.*\n.TSTMFL3 AIF   ('&MF' NE 'L').TSTMFG\n.*\n.GENLIST ANOP\n&LABEL   #GENMFL P1=(4,&CMDLNAD),P2=(4,&CMDLLND),P3=(4,&DELIMAD)\n         MEXIT\n.*\n.TSTMFG  AIF   ('&MF' NE 'GENWORK').TSTMFF\n.*\n.*    GENERATE @PARSE WORK AREA\n.*\n&WRKLEN  SETA  ((&MAXSTRL*&TOKENL)+&TOKENL+&STAKPFX)\n         DS    0F\n&LABEL   DC    (&WRKLEN)X'00'     @PARSE WORK AREA\n         MEXIT\n.*\n.TSTMFF  AIF   ('&MF' EQ '').GENMFI\n         AIF   (N'&MF NE 2).TSTMFER\n         AIF   ('&MF(1)' EQ 'E').GENMFE\n.*\n.TSTMFER ANOP\n         MNOTE 8,'*** INVALID FORMAT FOR MF PARM ***'\n         MEXIT\n.*\n.*    MF=E - GENERATE CODE TO INVOKE SUBROUTINE\n.*\n.GENMFE  ANOP\n&LABEL   #GENMFE RTN=@PARSE,PRM=&MF(2),P1=&CMDLINE,P2=&CMDLEN,         +\n               P3=&DELIMTB\n         MEXIT\n.*\n.*    GENERATE IN-LINE CODE TO INVOKE SUBROUTINE\n.*\n.GENMFI  AMOP\n&LABEL   #GENMFI RTN=@PARSE,P1=&CMDLINE,P2=&CMDLEN,P3=&DELIMTB,P4=&EOL\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@RULE": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00S\\x01\\x05 ?\\x01\\x05 ?\\x15Y\\x01V\\x01V\\x00\\x00\\xd9\\xc9\\xc3\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-07-22T00:00:00", "modifydate": "2005-07-22T15:59:53", "lines": 342, "newlines": 342, "modlines": 0, "user": "RICHARD"}, "text": "         MACRO\n&LABEL   @RULE &TOKEN,            TOKEN TYPE                           +\n               &TYPE=,            TYPE OF MACRO                        +\n               &NEXT=,            NEXT SYNTAX RULE                     +\n               &STRING=,          KEYWORD VALUE                        +\n               &EXIT=,            USER EXIT ROUTINE - INTERPRET PHASE  +\n               &EXITLOC=,         LOCATION OF USER EXIT ROUTINE(S)     +\n               &MF=GEN,           MACRO FORMAT                         +\n               &DOC=NO            DOCUMENTATION ONLY\n.*\n         GBLA  &IFLAG,&EFLAG,&FFLAG,&IX\n         GBLC  &EXITMDE,&STRLB(300),&STRNG(300)\n         LCLC  &S,&TOK,&TOKV,&DAT,&NXT,&STR,&EXT,&VXT\n         LCLA  &I,&J\n.*\n         AIF   ('&DOC' NE 'YES').TSTPRMS\n*--PROPRIETARY_STATEMENT----------------------------------------------*\n*                                                                     *\n*  THIS MACRO IS THE SOLE PROPERTY OF RICHARD TSUJIMOTO, INC.         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*                      @ R U L E                                      *\n*                                                                     *\n*        FUNCTION :                                                   *\n*                                                                     *\n*        GENERATE SYNTAX CHECKING RULE(S).                            *\n*                                                                     *\n*        PARAMETERS:                                                  *\n*                                                                     *\n*              @RULE  TYPE=INITIAL,EXITLOC = LOCAL | EXTERNAL         *\n*                                                                     *\n*              @RULE TOKEN= VAL | LASTRULE,                           *\n*                    NEXT = VAR,                                      *\n*                    STRING = VAL,                                    *\n*                    EXIT = VAR,                                      *\n*                    MF= GEN | DSECT,                                 *\n*                    DOC = YES | NO                                   *\n*                                                                     *\n*              @RULE  TYPE=FINAL                                      *\n*                                                                     *\n*                                                                     *\n*        NOTE: IF EXITLOC=EXTERNAL IS SPECIFIED, THE EXIT ROUTINES    *\n*              WILL BE REFERENCED USING A VCON (VS. AN ACON).         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FUNCTION:                                                    *\n*                                                                     *\n*        1.  GENERATE THE SYNTAX RULES.                               *\n*                                                                     *\n*        2.  GENERATE THE DSECT FOR A SYNTAX RULE.                    *\n*                                                                     *\n*        3.  GENERATE THE DOC FOR THIS MACRO.                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*        PARAMETER         DESCRIPTION                                *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        TOKEN             VAL    - TOKEN TYPE (SEE @TOKEN MACRO)     *\n*                                  THIS POSITIONAL PARAMETER IS       *\n*                                  MUTUALLY EXCLUSIVE WITH            *\n*                                  TYPE=INITIAL AND TYPE=FINAL        *\n*                                  REQUIRED PARAMETER.                *\n*                                                                     *\n*        TYPE              'INITIAL' - CODED ON FIRST @RULE MACRO,    *\n*                                   INDICATING THE START OF A SET OF  *\n*                                   SYNTAX RULES                      *\n*                          'FINAL'   - CODED ALONE ON THE LAST @RULE  *\n*                                   MACRO, INDICATING THE END OF THE  *\n*                                   SET OF SYNTAX RULES               *\n*                                                                     *\n*                          NOTE:   ONE TYPE=INIIAL, AT LEAST ONE      *\n*                                  SYNTAX RULE ENTRY, AND ONE         *\n*                                  TYPE=FINAL ARE REQUIRED            *\n*                                                                     *\n*        NEXT              VAR   - RX-TYPE ADDRESS                    *\n*                                  SPECIFIES THE ADDRESS OF THE NEXT  *\n*                                  SYNTAX RULE IF TOKEN MEETS ALL     *\n*                                  MATCHING CRITERIA, E.G. TOKEN TYPE *\n*                                  REQUIRED PARAMETER.                *\n*                                                                     *\n*        STRING            VAL   - KEYWORD VALUE                      *\n*                                  OPTIONAL PARAMETER.                *\n*                                                                     *\n*        EXIT              VAR   - RX-TYPE ADDRESS                    *\n*                                  SPECIFIES THE ADDRESS OF A USER    *\n*                                  ROUTINE THAT WILL BE BRANCHED TO   *\n*                                  DURING THE INTERPRETATION PHASE.   *\n*                                  THIS EXIT IS USED PRIMARILY FOR    *\n*                                  EXTRACTING DATA AFTER THE STRING   *\n*                                  HAS PROVEN TO BE SYNTACTICALLY     *\n*                                  CORRECT, E.G. KEYWORD VALUES.      *\n*                                                                     *\n*                                  OPTIONAL PARAMETER.                *\n*                                                                     *\n*        EXITLOC           'LOCAL' -  ADDR OF USER EXITS ARE GEN'D    *\n*                                     USING ACONS                     *\n*                          'EXTERNAL' ADDR OF USER EXITS ARE GEN'D    *\n*                                     USING VCONS                     *\n*                                     REQUIRED PARAMETER.             *\n*                                                                     *\n*                          NOTE: MUST BE CODED ON TYPE=INITIAL MACRO  *\n*                                                                     *\n*        MF                'GEN'   GENERATE SYNTAX RULE (DEFAULT)     *\n*                          'DSECT' GENERATE DSECT FOR SYNTAX RULE     *\n*                                                                     *\n*        DOC               'YES'   PRINT MACRO DOC ONLY               *\n*                          'NO'    OMIT PRINTING MACRO DOC (DEFAULT)  *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        RETURN CODE VALUES                                           *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        N/A                                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        TABLE ENTRY DESCRIPTION                                      *\n*---------------------------------------------------------------------*\n*                                                                     *\n*  0        2        4            8            12           16        *\n*  +--------+--------+------------+------------+------------+         *\n*  |  TOKEN |  NOT   | NEXT RULE  |   STRING   |  USER EXIT |         *\n*  |   ID   |  USED  |   ADDR     |    ADDR    |    ADDR    |         *\n*  +--------+--------+------------+------------+------------+         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MEXIT\n.*\n.TSTPRMS AIF   ('&DOC' EQ 'NO').TSTMFTP\n         MNOTE 8,'DOC PARM IS INVALID; MUST BE EITHER \"YES\" OR \"NO\"'\n         MEXIT\n.*\n.TSTMFTP AIF   ('&MF' NE 'DSECT').TSTMFG\n.*\n***********************************************************************\n*                                                                     *\n*   SYNTAX TABLE                                                      *\n*                                                                     *\n***********************************************************************\n&LABEL   DSECT\n@SYNTOKN DS    XL2                TOKEN TYPE IDENTIFIER\n         DS    XL2                FILLER\n@SYNNXTA DS    A                  NEXT RULE ADDR\n@SYNKYWA DS    A                  KEYWORD/DATA COMPARISON STRING ADDR\n@SYNACTA DS    A                  ACTION ROUTINE ADDR\n@SYNTOKN_LEN EQU *-@SYNTOKN       LENGTH OF SYNTAX RULE\n         MEXIT\n.*\n.TSTMFG  AIF   ('&MF' EQ 'GEN').TSTTYPI\n         MNOTE 8,'** PARM MF IS INVALID **'\n         MEXIT\n.*\n.*   PROCESS \"@RULE TYPE=INITIAL,...\"\n.*\n.TSTTYPI AIF   ('&TYPE' NE 'INITIAL').TSTRULE\n         AIF   (&IFLAG EQ 0).TYPI010\n         MNOTE 8,'** PARM TYPE=INITIAL ALREADY CODED **'\n         MEXIT\n.*\n.TYPI010 AIF   ((&EFLAG EQ 0) AND (&FFLAG EQ 0)).TYPI020\n         MNOTE 8,'** PARM TYPE=INITIAL MUST BE THE FIRST MACRO **'\n         MEXIT\n.*\n.TYPI020 AIF   (('&TOKEN' EQ '') AND ('&NEXT' EQ '') AND               +\n               ('&STRING' EQ '') AND ('&EXIT' EQ '') AND               +\n               ('&MF' EQ 'GEN')  AND ('&DOC'  EQ 'NO')).TYPI030\n         MNOTE 8,'** INCOMPATIBLE PARMS CODED FOR TYPE=INITIAL'\n         MEXIT\n.*\n.TYPI030 ANOP\n&IFLAG   SETA  1\n.*\n.*   PROCESS \"@RULE,TYPE=...,EXITLOC=LOCAL|EXTERNAL\"\n.*\n         AIF   ('&EXITLOC' NE '').EXTL010\n         MNOTE 8,'** PARM EXITLOC MUST BE CODE WITH TYPE=INITIAL'\n         MEXIT\n.*\n.EXTL010 AIF   (('&EXITLOC' EQ 'LOCAL') OR                             +\n               ('&EXITLOC' EQ 'EXTERNAL')).EXTL020\n         MNOTE 8,'** PARM EXITLOC HAS INVALID VALUE  **'\n         MEXIT\n.*\n.EXTL020 ANOP\n&EXITMDE SETC  '&EXITLOC'\n&LABEL   DS    0A\n         MEXIT\n.*\n.*   PROCESS SYNTAX RULE ENTRY\n.*\n.TSTRULE AIF   ('&TYPE' EQ 'FINAL').TYPF000\n         AIF   (&IFLAG EQ 1).RULE010\n         MNOTE 8,'** TYPE=INITIAL IS MISSING'\n         MEXIT\n.*\n.RULE010 AIF   ('&TYPE' EQ '').RULE020\n         MNOTE 8,'** PARM TYPE IS INVALID **'\n         MEXIT\n.*\n.RULE020 AIF   ('&EXITLOC' EQ '').RULE030\n         MNOTE 8,'** PARM EXITLOC MUST NOT BE CODED WITH A RULE **'\n         MEXIT\n.*\n.RULE030 AIF   ('&STRING' EQ '').RULE040\n.*\n&S       SETC  '&SYSNDX'\n&IX      SETA  &IX+1\n&STRLB(&IX) SETC '&S'\n&STRNG(&IX) SETC '&STRING'\n.*\n.RULE040 ANOP\n.*\n&TOK     SETC  '&TOKEN'\n&NXT     SETC  '&NEXT'\n&STR     SETC  '&STRING'\n&EXT     SETC  '&EXIT'\n.*\n         AIF   ('&NXT' NE '').SETDFL2\n&NXT     SETC  '0'\n.*\n.SETDFL2 AIF   ('&STR' NE '').SETDFL3\n&STR     SETC  '0'\n.*\n.SETDFL3 AIF   ('&EXT' NE '').TSTTOK1\n&EXT     SETC  '0'\n.*\n.*   VALIDATE TOKEN TYPE = LASTRULE (X'EEEE')\n.*\n.TSTTOK1 AIF   ('&TOK' NE 'LASTRULE').TSTTOK2\n&TOK     SETC  '61166'\n.*\n         AIF   (('&NXT' EQ '0') AND ('&STR' EQ '0') AND                +\n               ('&EXT' EQ '0')).GENRULE\n         MNOTE 8,'** PARMS NEXT, STRING, AND EXIT MUST NOT BE CODED **'\n         MEXIT\n.*\n.*   VALIDATE TOKEN TYPE = SYNTAXERR (X'DDDD')\n.*\n.TSTTOK2 AIF   ('&TOK' NE 'SYNTAXERR').TSTTOK3\n&TOK     SETC  '56797'\n.*\n         AIF   (('&NXT' EQ '0') AND ('&STR' EQ '0') AND                +\n               ('&EXT' EQ '0')).GENRULE\n         MNOTE 8,'** PARMS NEXT, STRING, AND EXIT MUST NOT BE CODED **'\n         MEXIT\n.*\n.*   VALIDATE TOKEN TYPE = CONTRULE (X'CCCC')\n.*\n.TSTTOK3 AIF   ('&TOK' NE 'CONTRULE').TSTTOK4\n&TOK     SETC  '52428'\n.*\n         AIF   ('&NXT' NE '0').TSTT301\n         MNOTE 8,'** PARM NEXT MUST BE CODED **'\n         MEXIT\n.*\n.TSTT301 AIF   (('&STR' EQ '0') AND ('&EXT' EQ '0')).GENRULE\n         MNOTE 8,'** PARMS STRING AND EXIT MUST NOT BE CODED **'\n         MEXIT\n.*\n.*   VALIDATE TOKEN TYPE = GOTORULE (X'BBBB')\n.*\n.TSTTOK4 AIF   ('&TOK' NE 'GOTORULE').GENRULE\n&TOK     SETC  '48059'\n.*\n         AIF   ('&NXT' NE '0').TSTT401\n         MNOTE 8,'** PARM NEXT MUST BE CODED **'\n         MEXIT\n.*\n.TSTT401 AIF   (('&STR' EQ '0') AND ('&EXT' EQ '0')).GENRULE\n         MNOTE 8,'** PARMS STRING AND EXIT MUST NOT BE CODED **'\n         MEXIT\n.*\n.*   GENERATE THE SYNTAX RULE\n.*\n.GENRULE ANOP\n&EFLAG   SETA  1\n.*\n         AIF   ('&EXITMDE' EQ 'LOCAL').GENLOCL\n         AIF   ('&STR' EQ '0').NULL015\n         AIF   ('&EXT' NE '0').NULL010\n.*\n&LABEL   DC    AL2(&TOK),AL2(0),A(&NXT),A(STR&S),A(0)\n         MEXIT\n.*\n.NULL010 ANOP\n&LABEL   DC    AL2(&TOK),AL2(0),A(&NXT),A(STR&S),V(&EXT)\n         MEXIT\n.*\n.NULL015 AIF   ('&EXT' NE '0').NULL017\n&LABEL   DC    AL2(&TOK),AL2(0),A(&NXT),A(&STR),A(0)\n         MEXIT\n.*\n.NULL017 ANOP\n&LABEL   DC    AL2(&TOK),AL2(0),A(&NXT),A(&STR),V(&EXT)\n         MEXIT\n.*\n.GENLOCL AIF   ('&STR' EQ '0').NULL020\n.*\n&LABEL   DC    AL2(&TOK),AL2(0),A(&NXT),A(STR&S),A(&EXT)\n         MEXIT\n.*\n.NULL020 ANOP\n&LABEL   DC    AL2(&TOK),AL2(0),A(&NXT),A(&STR),A(&EXT)\n         MEXIT\n.*\n.*   PROCESS \"@RULE TYPE=FINAL\"\n.*\n.TYPF000 AIF   (&FFLAG EQ 0).TYPF010\n         MNOTE 8,'** PARM TYPE=FINAL ALREADY CODED **'\n         MEXIT\n.*\n.TYPF010 AIF   ((&IFLAG EQ 1) AND (&EFLAG EQ 1)).TYPF020\n         MNOTE 8,'** PARM TYPE=INITIAL AND/OR RULE DEFINITIONS MISSING +\n               **'\n         MEXIT\n.*\n.TYPF020 AIF   (('&TOKEN' EQ '')  AND ('&NEXT' EQ '') AND              +\n               ('&STRING' EQ '')  AND ('&EXIT' EQ '') AND              +\n               ('&EXITLOC' EQ '') AND                                  +\n               ('&MF' EQ 'GEN')   AND ('&DOC'  EQ 'NO')).GENLITS\n         MNOTE 8,'** INCOMPATIBLE PARMS CODED FOR TYPE=FINAL'\n         MEXIT\n.*\n.GENLITS ANOP\n&FFLAG   SETA  1\n.*\n.*   GENERATE LIST OF KEYWORD VALUES\n.*\n*\n&I       SETA  1\n.LOOP1   AIF   (&I GT &IX).DONE\n&J       SETA  K'&STRNG(&I)\nSTR&STRLB(&I) DC AL1(&J),C'&STRNG(&I)'\n&I       SETA  &I+1\n         AGO   .LOOP1\n.*\n.DONE    ANOP\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@SYNTXCK": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x003\\x01\\x05\\x17_\\x01\\x05!_\\x11E\\x00\\x9d\\x00\\x90\\x00\\x00\\xd9\\xc9\\xc3\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "2005-06-24T00:00:00", "modifydate": "2005-08-03T11:45:33", "lines": 157, "newlines": 144, "modlines": 0, "user": "RICHARD"}, "text": "         MACRO\n&LABEL   @SYNTXCK &SYNTXTB=,      ADDRESS OF SYNTAX TABLE              +\n               &MF=,              MACRO FORMAT                         +\n               &DOC=NO            DOCUMENTATION ONLY\n.*\n         GBLC  &DNAME(33),&TOKNAM(33),&DELIM(33)\n         GBLA  &STAT(33),&LSIZE\n.*\n         LCLC  &S,&NULL,&EOL\n         LCLA  &I\n.*\n&EOL     SETC  '$EOL$'\n.*\n         AIF   ('&DOC' NE 'YES').TSTPRMS\n*--PROPRIETARY_STATEMENT----------------------------------------------*\n*                                                                     *\n*  THIS MACRO IS THE SOLE PROPERTY OF RICHARD TSUJIMOTO, INC.         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*                      @ S Y N T X C K                                *\n*                                                                     *\n*        FUNCTION :                                                   *\n*                                                                     *\n*        SCAN A STACK THAT WAS CREATED BY THE @PARSE MACRO AND        *\n*        CHECK TO SEE THAT THE INPUT IS SYNTACTICALLY CORRECT.        *\n*                                                                     *\n*        PARAMETERS:                                                  *\n*                                                                     *\n*             #SYNTXCK SYNTXTB = VAR  | (REG),                        *\n*                      MF = L | (E,REG) | DSECT,                      *\n*                      DOC = YES | NO                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FUNCTION:                                                    *\n*                                                                     *\n*        1.  GENERATE THE CODE TO CALL THE SUBROUTINE @SYNTXCK.       *\n*                                                                     *\n*        2.  GENERATE THE PARM LIST REQUIRED BY THE SUBROUTINE.       *\n*                                                                     *\n*        3.  GENERATE A DSECT OF THE CALLER'S PARM LIST               *\n*                                                                     *\n*        4.  GENERATE THE DOC FOR THIS MACRO.                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        DESCRIPTION :                                                *\n*                                                                     *\n*        #SYNTXCK WILL SCAN THE STACK OF TOKENS CREATED BY @PARSE     *\n*        FIFO ORDER AND PERFORM A SYNTAX CHECK OF  THE  CHARACTER     *\n*        STRING.  THE SYNTAX RULES ARE SPECIFIED BY THE USER AND      *\n*        GENERATED BY USING THE @RULE MACRO.                          *\n*                                                                     *\n*        SEE \"PARSING, SYNTAX CHECKING AND INTERPRETING, USER'S       *\n*            GUIDE\" FOR DETAILS.                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*        PARAMETER         DESCRIPTION                                *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SYNTXTB           VAR  -  RX-TYPE ADDRESS                    *\n*                                  SPECIFIES THE VARIABLE THAT IS     *\n*                                  THE BEGINNING OF THE SYNTAX TABLE  *\n*                          (REG) - (2-12)                             *\n*                                  SPECIFIES THE REGISTER THAT HAS    *\n*                                  THE ADDRESS OF THE BEGINNING OF    *\n*                                  THE SYNTAX TABLE                   *\n*                                                                     *\n*        MF                'L'   - GENERATE THE PARM LIST             *\n*                          '(E,RX)' - GENERATE CODE TO INVOKE THE     *\n*                                     SUBROUTINE AND (OPTIONALLY)     *\n*                                     MODIFY THE PARM LIST            *\n*                          'DSECT' -  GEN A DSECT OF THE PARM LIST    *\n*                                     AND THE TOKEN NAMES             *\n*                                                                     *\n*        DOC               'YES'   PRINT MACRO DOC ONLY               *\n*                          'NO'    OMIT PRINTING MACRO DOC (DEFAULT)  *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        RETURN CODE VALUES                                           *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        R15 =  0 - SUCCESS                                           *\n*            =  4 - ADDRESS OF USER'S SYNTAX TABLE IS ZERO            *\n*            =  8 - SYNTAX ERROR DETECTED                             *\n*            = 12 - NEXT RULE INDEX IS ZERO                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        PARAMETER LIST DESCRIPTION                                   *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        R1 => +0 +-------------------------------------+             *\n*                 | ADDRESS OF USER'S SYNTAX TABLE      |             *\n*              +4 +-------------------------------------+             *\n*                 | LENGTH OF TOKEN IN ERROR            |             *\n*              +8 +-------------------------------------+             *\n*                 | ADDRESS OF TOKEN IN ERROR           |             *\n*              +C +-------------------------------------+             *\n*                 | ADDRESS OF \"BAD RULE\"               |             *\n*                 +-------------------------------------+             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MEXIT\n.TSTPRMS ANOP\n         AIF   ('&DOC' EQ 'NO').TSTPRM2\n         MNOTE 8,'DOC PARM IS INVALID; MUST BE EITHER \"YES\" OR \"NO\"'\n         MEXIT\n.*\n.TSTPRM2 ANOP\n         AIF   ('&MF' NE 'DSECT').TSTMFL\n.*\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*   @SYNTXCK - PARM LIST                                              *\n*                                                                     *\n***********************************************************************\n&LABEL   DSECT\n@SYSYNTB DS    A                       ADDR OF USER'S SYNTAX TABLE\n@SYTOKLN DS    F                       LENGTH OF TOKEN IN ERROR\n@SYTOKAD DS    A                       ADDR OF TOKEN IN ERROR\n@SYTBRAD DS    A                       ADDR OF INVALID RULE\n         MEXIT\n.*\n.*    MF=L - GENERATE PARM LIST\n.*\n.TSTMFL  ANOP\n         AIF   ('&MF' NE 'L').TSTMFE\n.*\n.GENLIST ANOP\n&LABEL   #GENMFL P1=(4,&SYNTXTB),P2=(4,0),P3=(4,0),P4=(4,0)\n         MEXIT\n.*\n.*    MF=E - GENERATE CODE TO INVOKE SUBROUTINE\n.*\n.TSTMFE  ANOP\n         AIF   ('&MF(1)' NE 'E').TSTMFI\n         AIF   (N'&MF EQ 2).GENCODE\n         MNOTE 8,'*** INVALID FORMAT FOR MF PARM ***'\n         MEXIT\n.*\n.GENCODE ANOP\n&LABEL   #GENMFE RTN=@SYNTXCK,PRM=&MF(2),P1=&SYNTXTB\n         MEXIT\n.*\n.*    GENERATE IN-LINE CODE TO INVOKE SUBROUTINE\n.*\n.TSTMFI  ANOP\n&LABEL   #GENMFI RTN=@SYNTXCK,P1=&SYNTXTB,P2=(4,0),P3=(4,0),P4=(4,0),  +\n               P5=&EOL\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@TOKEN": {"ttr": 279, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00B\\x01\\x05(\\x7f\\x01\\x05(\\x7f\\x11#\\x00\\x96\\x00\\x96\\x00\\x00\\xd9\\xc9\\xc3\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-10-14T00:00:00", "modifydate": "2005-10-14T11:23:42", "lines": 150, "newlines": 150, "modlines": 0, "user": "RICHARD"}, "text": "         MACRO\n         @TOKEN &CMDLINE=,        ADDRESS OF COMMAND LINE STRING       +\n               &MF=,              MACRO FORMAT                         +\n               &DOC=NO            DOCUMENTATION ONLY\n.*\n         GBLC  &DNAME(33),&TOKNAM(33),&DELIM(33)\n         GBLA  &STAT(33),&LSIZE\n.*\n         LCLC  &S\n         LCLA  &I\n.*\n&S       SETC  '&SYSNDX'\n.*\n         AIF   ('&DOC' NE 'YES').TSTPRMS\n*--PROPRIETARY_STATEMENT----------------------------------------------*\n*                                                                     *\n*  THIS MACRO IS THE SOLE PROPERTY OF RICHARD TSUJIMOTO, INC.         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*                      @ T O K E N                                    *\n*                                                                     *\n*        FUNCTION :                                                   *\n*                                                                     *\n*        GENERATE A LIST OF TOKEN SYMBOLS AND VALUES, AND/OR A DSECT  *\n*        THAT MAPS THE TOKEN STACK AND ITS ENTRIES.                   *\n*                                                                     *\n*        PARAMETERS:                                                  *\n*                                                                     *\n*              @TOKEN  MF = DSECT | LISTVALS | ALL,                   *\n*                      DOC = YES | NO                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FUNCTION:                                                    *\n*                                                                     *\n*        1.  GENERATE THE LIST OF TOKEN TYPE SYMBOLS AND VALUES.      *\n*                                                                     *\n*        2.  GENERATE A DSECT OF THE PARM LIST.                       *\n*                                                                     *\n*        3.  GENERATE THE DOC FOR THIS MACRO.                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        DESCRIPTION :                                                *\n*                                                                     *\n*        @TOKEN IS USED TO LIST THE TOKEN TYPE SYMBOLS AND/OR THE     *\n*        DSECT THAT MAPS THE TOKEN STACK AND ITS ENTRIES.             *\n*                                                                     *\n*        SEE \"PARSING, SYNTAX CHECKING AND INTERPRETING, USER'S       *\n*            GUIDE\" FOR DETAILS.                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*        PARAMETER         DESCRIPTION                                *\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*        MF                'LISTVAL' - GENERATE LIST OF TOKEN TYPE    *\n*                                      SYMBOLS AND VALUES             *\n*                          'DSECT' -  GENERATE PARAMETER LIST DSECT   *\n*                          'ALL' - SAME AS 'LISTVAL' AND 'DSECT'      *\n*                                                                     *\n*                          NOTE: MF=DSECT IS FOR INTERNAL USE ONLY    *\n*                                                                     *\n*        DOC               'YES'   PRINT MACRO DOC ONLY               *\n*                          'NO'    OMIT PRINTING MACRO DOC (DEFAULT)  *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        RETURN CODE VALUES                                           *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        N/A                                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        PARAMETER LIST DESCRIPTION                                   *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        N/A                                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MEXIT\n.TSTPRMS ANOP\n         AIF   ('&DOC' EQ 'NO').TSTPRM1\n         MNOTE 8,'DOC PARM IS INVALID; MUST BE EITHER \"YES\" OR \"NO\"'\n         MEXIT\n.*\n.*   GEN THE EXTERNAL AND INTERNAL TOKEN NAMES AND DEFAULT DELIMITERS\n.*   STORE THE DATA IN GLOBAL MACRO ARRAYS, WHICH ARE REFERENCED BY\n.*   @DELIM, @DELIMST, @SYNTXCK AND @INTRPRT\n.*\n.TSTPRM1 AIF   (('&MF' NE 'LISTVAL') AND ('&MF' NE 'ALL')).TSTDSCT\n.*\n         @DEFTOKN\n.*\n***********************************************************************\n*                                                                     *\n*   LIST OF TOKEN TYPES                                               *\n*                                                                     *\n***********************************************************************\nTOK_IS_DATA EQU 100\nTOK_IS_NUM  EQU 101\nTOK_IS_EOS  EQU 255\n*\nGOTORULE    EQU X'BBBB'\nCONTRULE    EQU X'CCCC'\nSYNTAXERR   EQU X'DDDD'\nLASTRULE    EQU X'EEEE'\n*\n&I       SETA 1\n.LOOP1   AIF  (&I GT &LSIZE).TSTALL\n&TOKNAM(&I) EQU   &I\n&I       SETA &I+1\n         AGO  .LOOP1\n.*\n.TSTALL  AIF   ('&MF' EQ 'ALL').GENDSCT\n         MEXIT\n.*\n.TSTDSCT AIF   ('&MF' EQ 'DSECT').GENDSCT\n         MNOTE 8,'*** INVALID FORMAT FOR MF PARM ***'\n         MEXIT\n.*\n.GENDSCT ANOP\n.*\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*   @PARSE TOKEN STACK PREFIX                                         *\n*                                                                     *\n***********************************************************************\n@TOKENPX DSECT\n         DS    C'*PARSE STAK*'    EYE-CATCHER\n@TOKENXL EQU   *-@TOKENPX         LENGTH OF TOKEN STACK PREFIX\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*   @PARSE TOKEN STACK ENTRY                                          *\n*                                                                     *\n***********************************************************************\n@TOKEN   DSECT\n@TOKNTYP DS    XL2                TOKEN TYPE\n         DS    X                  FILLER\n@TOKENLN DS    X                  TOKEN LENGTH\n@TOKENAD DS    A                  ADDR OF TOKEN\n@TOKENL  EQU   *-@TOKEN           LENGTH OF TOKEN STACK ENTRY\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT746/CBT.V500.FILE746.PDS/MACLIB.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT746/CBT.V500.FILE746.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}