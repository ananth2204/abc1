         MACRO
&LABEL   @RULE &TOKEN,            TOKEN TYPE                           +
               &TYPE=,            TYPE OF MACRO                        +
               &NEXT=,            NEXT SYNTAX RULE                     +
               &STRING=,          KEYWORD VALUE                        +
               &EXIT=,            USER EXIT ROUTINE - INTERPRET PHASE  +
               &EXITLOC=,         LOCATION OF USER EXIT ROUTINE(S)     +
               &MF=GEN,           MACRO FORMAT                         +
               &DOC=NO            DOCUMENTATION ONLY
.*
         GBLA  &IFLAG,&EFLAG,&FFLAG,&IX
         GBLC  &EXITMDE,&STRLB(300),&STRNG(300)
         LCLC  &S,&TOK,&TOKV,&DAT,&NXT,&STR,&EXT,&VXT
         LCLA  &I,&J
.*
         AIF   ('&DOC' NE 'YES').TSTPRMS
*--PROPRIETARY_STATEMENT----------------------------------------------*
*                                                                     *
*  THIS MACRO IS THE SOLE PROPERTY OF RICHARD TSUJIMOTO, INC.         *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*                      @ R U L E                                      *
*                                                                     *
*        FUNCTION :                                                   *
*                                                                     *
*        GENERATE SYNTAX CHECKING RULE(S).                            *
*                                                                     *
*        PARAMETERS:                                                  *
*                                                                     *
*              @RULE  TYPE=INITIAL,EXITLOC = LOCAL | EXTERNAL         *
*                                                                     *
*              @RULE TOKEN= VAL | LASTRULE,                           *
*                    NEXT = VAR,                                      *
*                    STRING = VAL,                                    *
*                    EXIT = VAR,                                      *
*                    MF= GEN | DSECT,                                 *
*                    DOC = YES | NO                                   *
*                                                                     *
*              @RULE  TYPE=FINAL                                      *
*                                                                     *
*                                                                     *
*        NOTE: IF EXITLOC=EXTERNAL IS SPECIFIED, THE EXIT ROUTINES    *
*              WILL BE REFERENCED USING A VCON (VS. AN ACON).         *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*        FUNCTION:                                                    *
*                                                                     *
*        1.  GENERATE THE SYNTAX RULES.                               *
*                                                                     *
*        2.  GENERATE THE DSECT FOR A SYNTAX RULE.                    *
*                                                                     *
*        3.  GENERATE THE DOC FOR THIS MACRO.                         *
*                                                                     *
*---------------------------------------------------------------------*
         EJECT
*---------------------------------------------------------------------*
*        PARAMETER         DESCRIPTION                                *
*---------------------------------------------------------------------*
*                                                                     *
*        TOKEN             VAL    - TOKEN TYPE (SEE @TOKEN MACRO)     *
*                                  THIS POSITIONAL PARAMETER IS       *
*                                  MUTUALLY EXCLUSIVE WITH            *
*                                  TYPE=INITIAL AND TYPE=FINAL        *
*                                  REQUIRED PARAMETER.                *
*                                                                     *
*        TYPE              'INITIAL' - CODED ON FIRST @RULE MACRO,    *
*                                   INDICATING THE START OF A SET OF  *
*                                   SYNTAX RULES                      *
*                          'FINAL'   - CODED ALONE ON THE LAST @RULE  *
*                                   MACRO, INDICATING THE END OF THE  *
*                                   SET OF SYNTAX RULES               *
*                                                                     *
*                          NOTE:   ONE TYPE=INIIAL, AT LEAST ONE      *
*                                  SYNTAX RULE ENTRY, AND ONE         *
*                                  TYPE=FINAL ARE REQUIRED            *
*                                                                     *
*        NEXT              VAR   - RX-TYPE ADDRESS                    *
*                                  SPECIFIES THE ADDRESS OF THE NEXT  *
*                                  SYNTAX RULE IF TOKEN MEETS ALL     *
*                                  MATCHING CRITERIA, E.G. TOKEN TYPE *
*                                  REQUIRED PARAMETER.                *
*                                                                     *
*        STRING            VAL   - KEYWORD VALUE                      *
*                                  OPTIONAL PARAMETER.                *
*                                                                     *
*        EXIT              VAR   - RX-TYPE ADDRESS                    *
*                                  SPECIFIES THE ADDRESS OF A USER    *
*                                  ROUTINE THAT WILL BE BRANCHED TO   *
*                                  DURING THE INTERPRETATION PHASE.   *
*                                  THIS EXIT IS USED PRIMARILY FOR    *
*                                  EXTRACTING DATA AFTER THE STRING   *
*                                  HAS PROVEN TO BE SYNTACTICALLY     *
*                                  CORRECT, E.G. KEYWORD VALUES.      *
*                                                                     *
*                                  OPTIONAL PARAMETER.                *
*                                                                     *
*        EXITLOC           'LOCAL' -  ADDR OF USER EXITS ARE GEN'D    *
*                                     USING ACONS                     *
*                          'EXTERNAL' ADDR OF USER EXITS ARE GEN'D    *
*                                     USING VCONS                     *
*                                     REQUIRED PARAMETER.             *
*                                                                     *
*                          NOTE: MUST BE CODED ON TYPE=INITIAL MACRO  *
*                                                                     *
*        MF                'GEN'   GENERATE SYNTAX RULE (DEFAULT)     *
*                          'DSECT' GENERATE DSECT FOR SYNTAX RULE     *
*                                                                     *
*        DOC               'YES'   PRINT MACRO DOC ONLY               *
*                          'NO'    OMIT PRINTING MACRO DOC (DEFAULT)  *
*                                                                     *
*---------------------------------------------------------------------*
*        RETURN CODE VALUES                                           *
*---------------------------------------------------------------------*
*                                                                     *
*        N/A                                                          *
*                                                                     *
*---------------------------------------------------------------------*
*        TABLE ENTRY DESCRIPTION                                      *
*---------------------------------------------------------------------*
*                                                                     *
*  0        2        4            8            12           16        *
*  +--------+--------+------------+------------+------------+         *
*  |  TOKEN |  NOT   | NEXT RULE  |   STRING   |  USER EXIT |         *
*  |   ID   |  USED  |   ADDR     |    ADDR    |    ADDR    |         *
*  +--------+--------+------------+------------+------------+         *
*                                                                     *
*---------------------------------------------------------------------*
         MEXIT
.*
.TSTPRMS AIF   ('&DOC' EQ 'NO').TSTMFTP
         MNOTE 8,'DOC PARM IS INVALID; MUST BE EITHER "YES" OR "NO"'
         MEXIT
.*
.TSTMFTP AIF   ('&MF' NE 'DSECT').TSTMFG
.*
***********************************************************************
*                                                                     *
*   SYNTAX TABLE                                                      *
*                                                                     *
***********************************************************************
&LABEL   DSECT
@SYNTOKN DS    XL2                TOKEN TYPE IDENTIFIER
         DS    XL2                FILLER
@SYNNXTA DS    A                  NEXT RULE ADDR
@SYNKYWA DS    A                  KEYWORD/DATA COMPARISON STRING ADDR
@SYNACTA DS    A                  ACTION ROUTINE ADDR
@SYNTOKN_LEN EQU *-@SYNTOKN       LENGTH OF SYNTAX RULE
         MEXIT
.*
.TSTMFG  AIF   ('&MF' EQ 'GEN').TSTTYPI
         MNOTE 8,'** PARM MF IS INVALID **'
         MEXIT
.*
.*   PROCESS "@RULE TYPE=INITIAL,..."
.*
.TSTTYPI AIF   ('&TYPE' NE 'INITIAL').TSTRULE
         AIF   (&IFLAG EQ 0).TYPI010
         MNOTE 8,'** PARM TYPE=INITIAL ALREADY CODED **'
         MEXIT
.*
.TYPI010 AIF   ((&EFLAG EQ 0) AND (&FFLAG EQ 0)).TYPI020
         MNOTE 8,'** PARM TYPE=INITIAL MUST BE THE FIRST MACRO **'
         MEXIT
.*
.TYPI020 AIF   (('&TOKEN' EQ '') AND ('&NEXT' EQ '') AND               +
               ('&STRING' EQ '') AND ('&EXIT' EQ '') AND               +
               ('&MF' EQ 'GEN')  AND ('&DOC'  EQ 'NO')).TYPI030
         MNOTE 8,'** INCOMPATIBLE PARMS CODED FOR TYPE=INITIAL'
         MEXIT
.*
.TYPI030 ANOP
&IFLAG   SETA  1
.*
.*   PROCESS "@RULE,TYPE=...,EXITLOC=LOCAL|EXTERNAL"
.*
         AIF   ('&EXITLOC' NE '').EXTL010
         MNOTE 8,'** PARM EXITLOC MUST BE CODE WITH TYPE=INITIAL'
         MEXIT
.*
.EXTL010 AIF   (('&EXITLOC' EQ 'LOCAL') OR                             +
               ('&EXITLOC' EQ 'EXTERNAL')).EXTL020
         MNOTE 8,'** PARM EXITLOC HAS INVALID VALUE  **'
         MEXIT
.*
.EXTL020 ANOP
&EXITMDE SETC  '&EXITLOC'
&LABEL   DS    0A
         MEXIT
.*
.*   PROCESS SYNTAX RULE ENTRY
.*
.TSTRULE AIF   ('&TYPE' EQ 'FINAL').TYPF000
         AIF   (&IFLAG EQ 1).RULE010
         MNOTE 8,'** TYPE=INITIAL IS MISSING'
         MEXIT
.*
.RULE010 AIF   ('&TYPE' EQ '').RULE020
         MNOTE 8,'** PARM TYPE IS INVALID **'
         MEXIT
.*
.RULE020 AIF   ('&EXITLOC' EQ '').RULE030
         MNOTE 8,'** PARM EXITLOC MUST NOT BE CODED WITH A RULE **'
         MEXIT
.*
.RULE030 AIF   ('&STRING' EQ '').RULE040
.*
&S       SETC  '&SYSNDX'
&IX      SETA  &IX+1
&STRLB(&IX) SETC '&S'
&STRNG(&IX) SETC '&STRING'
.*
.RULE040 ANOP
.*
&TOK     SETC  '&TOKEN'
&NXT     SETC  '&NEXT'
&STR     SETC  '&STRING'
&EXT     SETC  '&EXIT'
.*
         AIF   ('&NXT' NE '').SETDFL2
&NXT     SETC  '0'
.*
.SETDFL2 AIF   ('&STR' NE '').SETDFL3
&STR     SETC  '0'
.*
.SETDFL3 AIF   ('&EXT' NE '').TSTTOK1
&EXT     SETC  '0'
.*
.*   VALIDATE TOKEN TYPE = LASTRULE (X'EEEE')
.*
.TSTTOK1 AIF   ('&TOK' NE 'LASTRULE').TSTTOK2
&TOK     SETC  '61166'
.*
         AIF   (('&NXT' EQ '0') AND ('&STR' EQ '0') AND                +
               ('&EXT' EQ '0')).GENRULE
         MNOTE 8,'** PARMS NEXT, STRING, AND EXIT MUST NOT BE CODED **'
         MEXIT
.*
.*   VALIDATE TOKEN TYPE = SYNTAXERR (X'DDDD')
.*
.TSTTOK2 AIF   ('&TOK' NE 'SYNTAXERR').TSTTOK3
&TOK     SETC  '56797'
.*
         AIF   (('&NXT' EQ '0') AND ('&STR' EQ '0') AND                +
               ('&EXT' EQ '0')).GENRULE
         MNOTE 8,'** PARMS NEXT, STRING, AND EXIT MUST NOT BE CODED **'
         MEXIT
.*
.*   VALIDATE TOKEN TYPE = CONTRULE (X'CCCC')
.*
.TSTTOK3 AIF   ('&TOK' NE 'CONTRULE').TSTTOK4
&TOK     SETC  '52428'
.*
         AIF   ('&NXT' NE '0').TSTT301
         MNOTE 8,'** PARM NEXT MUST BE CODED **'
         MEXIT
.*
.TSTT301 AIF   (('&STR' EQ '0') AND ('&EXT' EQ '0')).GENRULE
         MNOTE 8,'** PARMS STRING AND EXIT MUST NOT BE CODED **'
         MEXIT
.*
.*   VALIDATE TOKEN TYPE = GOTORULE (X'BBBB')
.*
.TSTTOK4 AIF   ('&TOK' NE 'GOTORULE').GENRULE
&TOK     SETC  '48059'
.*
         AIF   ('&NXT' NE '0').TSTT401
         MNOTE 8,'** PARM NEXT MUST BE CODED **'
         MEXIT
.*
.TSTT401 AIF   (('&STR' EQ '0') AND ('&EXT' EQ '0')).GENRULE
         MNOTE 8,'** PARMS STRING AND EXIT MUST NOT BE CODED **'
         MEXIT
.*
.*   GENERATE THE SYNTAX RULE
.*
.GENRULE ANOP
&EFLAG   SETA  1
.*
         AIF   ('&EXITMDE' EQ 'LOCAL').GENLOCL
         AIF   ('&STR' EQ '0').NULL015
         AIF   ('&EXT' NE '0').NULL010
.*
&LABEL   DC    AL2(&TOK),AL2(0),A(&NXT),A(STR&S),A(0)
         MEXIT
.*
.NULL010 ANOP
&LABEL   DC    AL2(&TOK),AL2(0),A(&NXT),A(STR&S),V(&EXT)
         MEXIT
.*
.NULL015 AIF   ('&EXT' NE '0').NULL017
&LABEL   DC    AL2(&TOK),AL2(0),A(&NXT),A(&STR),A(0)
         MEXIT
.*
.NULL017 ANOP
&LABEL   DC    AL2(&TOK),AL2(0),A(&NXT),A(&STR),V(&EXT)
         MEXIT
.*
.GENLOCL AIF   ('&STR' EQ '0').NULL020
.*
&LABEL   DC    AL2(&TOK),AL2(0),A(&NXT),A(STR&S),A(&EXT)
         MEXIT
.*
.NULL020 ANOP
&LABEL   DC    AL2(&TOK),AL2(0),A(&NXT),A(&STR),A(&EXT)
         MEXIT
.*
.*   PROCESS "@RULE TYPE=FINAL"
.*
.TYPF000 AIF   (&FFLAG EQ 0).TYPF010
         MNOTE 8,'** PARM TYPE=FINAL ALREADY CODED **'
         MEXIT
.*
.TYPF010 AIF   ((&IFLAG EQ 1) AND (&EFLAG EQ 1)).TYPF020
         MNOTE 8,'** PARM TYPE=INITIAL AND/OR RULE DEFINITIONS MISSING +
               **'
         MEXIT
.*
.TYPF020 AIF   (('&TOKEN' EQ '')  AND ('&NEXT' EQ '') AND              +
               ('&STRING' EQ '')  AND ('&EXIT' EQ '') AND              +
               ('&EXITLOC' EQ '') AND                                  +
               ('&MF' EQ 'GEN')   AND ('&DOC'  EQ 'NO')).GENLITS
         MNOTE 8,'** INCOMPATIBLE PARMS CODED FOR TYPE=FINAL'
         MEXIT
.*
.GENLITS ANOP
&FFLAG   SETA  1
.*
.*   GENERATE LIST OF KEYWORD VALUES
.*
*
&I       SETA  1
.LOOP1   AIF   (&I GT &IX).DONE
&J       SETA  K'&STRNG(&I)
STR&STRLB(&I) DC AL1(&J),C'&STRNG(&I)'
&I       SETA  &I+1
         AGO   .LOOP1
.*
.DONE    ANOP
.*
         MEND
