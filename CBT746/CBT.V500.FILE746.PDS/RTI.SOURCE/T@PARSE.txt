         COPY  #REGS
         SPACE 2
BASEREG  EQU   R11                BASE REGISTER
LINKREG  EQU   R14                SUBROUTINE LINK REG
         EJECT
         @TOKEN   MF=ALL
         EJECT
$PARSMAP @PARSE   MF=DSECT
         EJECT
$SYNTMAP @SYNTXCK MF=DSECT
         EJECT
***********************************************************************
*                                                                     *
*   PERFORM INITIAL HOUSEKEEPING                                      *
*                                                                     *
***********************************************************************
T@PARSE  #ENTRY BASEREG=BASEREG,SAVEAREA=SAVEAREA,PARM=@PARM
         EJECT
***********************************************************************
*                                                                     *
*   START OF MAIN PROGRAM                                             *
*                                                                     *
***********************************************************************
BEGIN    DS    0H
         BAL   LINKREG,INIT       INITIALIZE STACK, BUFFERS, ETC.
         SPACE 1
NEXTCARD DS    0H
         GET   SYSIN,STRING       GET TEST STRING
         SPACE 1
         MVI   MSGOBUFF,X'40'     RESET OUTPUT BUFFER
         MVC   MSGOBUFF+1(L'MSGOBUFF-1),MSGOBUFF  TO BLANKS
         MVC   MSGOBUFF(L'STRING),STRING  COPY INPUT TO OUTPUT BUFFER
         PUT   SYSPRINT,MSGOBUFF  ECHO INPUT
         SPACE 1
         BAL   LINKREG,PARSEIT    PARSE INPUT STRING
         CLI   STATFLAG,ERROR     OK ?
         BE    NEXTCARD           NO, CONTINUE
         SPACE 1
         BAL   LINKREG,PRNTTOKN   PRINT CONTENTS OF TOKEN ENTRY
         B     NEXTCARD           NO, CONTINUE
         SPACE 1
EOF      DS    0H
EXIT     DS    0H
         L     R13,SAVEAREA+4     PT TO CALLER'S REG SAVEAREA
         SPACE 1
         RETURN (14,12),RC=0      THAT'S ALL FOLKS!
         EJECT
***********************************************************************
*                                                                     *
*   SUBROUTINE - INITIALIZE BUFFERS, COUNTERS, ETC.                   *
*                                                                     *
***********************************************************************
INIT     DS    0H
         LR    R5,LINKREG         COPY RETURN REG
         SPACE 1
         #STACK STACK=STACK,LEVELS=4,ACTION=INIT  INIT REG STACK
         SPACE 1
         XC    STATFLAG,STATFLAG  RESET STATUS FLAG
         SPACE 1
         OPEN  (SYSIN,(INPUT),SYSPRINT,(OUTPUT))
         SPACE 1
         LR    LINKREG,R5         RESTORE LINK REG
         BR    LINKREG            RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*   SUBROUTINE - PARSE INPUT STRING                                   *
*                                                                     *
***********************************************************************
PARSEIT  DS    0H
         #PUSH STACK=STACK        SAVE CALLER'S REGS
         SPACE 1
         LA    R3,PARMLST1        POINT TO PARM LIST
         SPACE 1
         @PARSE MF=(E,R3)
         SPACE 1
         LTR   R15,R15            OK ?
         BZ    PARSEIX            YES, GET OUT
         SPACE 1
         MVI   STATFLAG,ERROR     SET FLAG
         LA    R1,BADLEN          INVALID STRING LENGTH
         BAL   LINKREG,PUTMSG     DISPLAY ERROR MESSAGE
         SPACE 1
PARSEIX  DS    0H
         #POP  STACK=STACK        RESTORE CALLER'S REGS
         BR    LINKREG            RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*   SUBROUTINE - DISPLAY MESSAGE                                      *
*                                                                     *
***********************************************************************
PRNTTOKN DS    0H
         #PUSH STACK=STACK        SAVE CALLER'S REGS
         SPACE 1
         LA    R7,PARMLST1        POINT TO PARM LIST
         USING $PARSMAP,R7        SET ADDR
         SPACE 1
         L     R7,@PARSWRK        POINT TO @PARSER WORK AREA
         LA    R7,@TOKENXL(,R7)   POINT TO BEGINNING OF STACK
         USING @TOKEN,R7          SET ADDR
         SPACE 1
PRNTTOKV DS    0H
         MVC   TOKN+26(10),=CL10' '  RESET OUTPUT AREA
         XR    R2,R2              RESET WORK REG
         ICM   R2,B'0011',@TOKNTYP  TOKEN ID
         SLL   R2,4               MAKE ROOM FOR DUMMY SIGN
         XC    DUBLWORK,DUBLWORK  RESET WORK AREA
         ST    R2,DUBLWORK+4      SAVE TOKEN ID
         OI    DUBLWORK+7,X'0F'   MAKE UNSIGNED
         UNPK  WTOKNID(4),DUBLWORK+5(3)  UNPACK IT
         TR    WTOKNID,HEXTAB     CONVERT TO DISPLAYABLE HEX
         MVC   TOKN+6(4),WTOKNID  COPY TOKEN ID TO OUTPUT AREA
         XR    R1,R1              RESET WORK REG
         IC    R1,@TOKENLN        TOKEN LENGTH
         LR    R3,R1              COPY IT
         CVD   R3,DUBLWORK        CONVERT TO DECIMAL
         OI    DUBLWORK+7,X'0F'   MAKE IT UNSIGNED
         UNPK  TOKN+16(2),DUBLWORK+6(2)  COPY LENGTH TO OUTPUT AREA
         LTR   R1,R1              DOES TOKEN EXIST?
         BZ    PRNTTOKP           NO, CONTINUE
         SPACE 1
         BCTR  R1,R0              MACHINE LENGTH
         L     R2,@TOKENAD        ADDR OF TOKEN
         EX    R1,COPYTOKN        COPY TOKEN TO OUTPUT AREA
         SPACE 1
PRNTTOKP DS    0H
         LA    R1,SHOWTOKN        MSG ID
         BAL   LINKREG,PUTMSG     DISPLAY TOKEN ENTRY FIELDS
         CLC   @TOKNTYP,=AL2(TOK_IS_EOS)  END OF STACK ?
         BE    PRNTTOKX           YES, GET OUT
         SPACE 1
         LA    R7,@TOKENL(,R7)    POINT TO NEXT TOKEN ENTRY
         B     PRNTTOKV           CONTINUE
         SPACE 1
PRNTTOKX DS    0H
         #POP  STACK=STACK        RESTORE CALLER'S REGS
         BR    LINKREG            RETURN TO CALLER
         SPACE 1
COPYTOKN MVC   TOKN+26(*-*),0(R2) ** SUBJECT OF EXT INSTR **
         SPACE 1
         DROP  R7
         EJECT
***********************************************************************
*                                                                     *
*   SUBROUTINE - DISPLAY MESSAGE                                      *
*                                                                     *
***********************************************************************
PUTMSG   DS    0H
         #PUSH STACK=STACK        SAVE CALLER'S REGS
         SPACE 1
         LR    R4,R1              SAVE MESSAGE ID IN PARM LIST
         LA    R3,PARMLST3        POINT TO #PUTMSG PARM LIST
         SPACE 1
         #PUTMSG MF=(E,R3),MSGID=(R4)
         SPACE 1
         #POP  STACK=STACK        RESTORE CALLER'S REGS
         BR    LINKREG            RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*   CONSTANTS, WORK AREAS, ETC.                                       *
*                                                                     *
***********************************************************************
SAVEAREA DS    18F                REGISTER SAVE AREA
@PARM DS       A                  OS PARM ADDR
RETCODE  DS    F                  RETURN CODE
DUBLWORK DS    D                  DOUBLEWORD WORK AREA
*
STATFLAG DS    X                  STATUS FLAG
ERROR    EQU   X'80'              ERROR
*
@PARSWRK DC    V(TOKNSTAK)        ADDRESS OF TOKEN STACK
*
STACK    #STACK STACK=STACK,LEVELS=4,ACTION=GEN  DEFINE STACK AREA
*
PARMLST1 @PARSE MF=L,CMDLINE=STRING,CMDLEN=L'STRING,DELIMTB=DELIMTAB
*
DELIMTAB @DELIM MF=GEN,PTDASH=NO,PTUBAR=NO,PTPOUND=NO,PTSLASH=NO,      +
               PTCOLON=NO,PTPERIOD=NO,PTDOLLAR=NO
*
WTOKNID  DS    CL4                DISPLAY HEX WORK AREA
HEXTAB   DC    256AL1(*-HEXTAB)   BINARY-TO-DISPLAY HEX TRANSLATE TBL
         ORG   HEXTAB+X'FA'
         DC    C'ABCDEF'
         ORG   ,
*
MAXLEN   EQU   80                 MAX STRING LENGTH
STRING   DS    CL80               INPUT STRING
*
PARMLST3 #PUTMSG MSGTBAD=#MSGTABL,OTDCBAD=SYSPRINT,OTBUFAD=MSGOBUFF,   +
               OTBUFLN=L'MSGOBUFF,MF=L
*
MSGOBUFF DS    CL120              OUTPUT BUFFER
         EJECT
***********************************************************************
*                                                                     *
*   MESSAGES                                                          *
*                                                                     *
***********************************************************************
#MSGTABL #GENMSG TYPE=INITIAL
         #GENMSG TYPE=ENTRY,MSGID=BADLEN,                              +
               MSGTXT='*** INVALID STRING LENGTH ***'
TOKN     #GENMSG TYPE=ENTRY,MSGID=SHOWTOKN,                            +
               MSGTXT='++ ID=    , LEN=  , TOKEN=           ++'
         #GENMSG TYPE=LAST
         EJECT
***********************************************************************
*                                                                     *
*   DATA SET DEFINITIONS                                              *
*                                                                     *
***********************************************************************
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,RECFM=F,BLKSIZE=120
SYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=GM,EODAD=EOF
         SPACE 1
         LTORG *
         SPACE 1
         END
