         TITLE '@SYNTXCK - PERFORM SYNTAX CHECK ON CHARACTER STRING'
***********************************************************************
*                                                                     *
* MODULE NAME : @SYNTXCK                                              *
*                                                                     *
*                                                                     *
* DESCRIPTIVE NAME : PERFORM SYNTAX CHECK ON CHARACTER STRING         *
*                                                                     *
*                                                                     *
* FUNCTION :  PROCESS TOKENS STORED ON A STACK THAT WAS CREATED BY    *
*             @PARSE, VALIDATING THE SYNTAX OF THE CHARACTER STRING   *
*             THE SYNTAX RULES ARE PROVIDED BY THE USER, USING THE    *
*             @RULE MACRO.                                            *
*                                                                     *
* ENTRY: FROM CALLER                                                  *
*                                                                     *
* EXIT:  RETURN TO CALLER                                             *
*                                                                     *
*                                                                     *
* INPUT:                                                              *
*                                                                     *
*    PARMS:     WORD-1 = ADDR OF USER'S SYNTAX TABLE                  *
*               WORD-2 = LENGTH OF TOKEN IN ERROR                     *
*               WORD-3 = ADDRESS OF TOKEN IN ERROR                    *
*                                                                     *
* OUTPUT:                                                             *
*                                                                     *
*    RETURN CODE:  0 = OK                                             *
*                  4 = ADDR OF USER'S SYNTAX TABLE IS ZERO            *
*                  8 = SYNTAX ERROR DETECTED                          *
*                 12 = MISSING "NEXT RULE" INDEX                      *
*                                                                     *
* ABENDS:                                                             *
*                                                                     *
*   SEE MESSAGES (IF ANY)                                             *
*                                                                     *
*--PROPRIETARY_STATEMENT----------------------------------------------*
*                                                                     *
*  THIS PROGRAM IS THE SOLE PROPERTY OF RICHARD TSUJIMOTO, INC.       *
*                                                                     *
***********************************************************************
* CHANGE HISTORY:                                                     *
* --------------                                                      *
* 2005-OCT-14 RXT BACKOUT CHANGE OF 2005-AUG-19; TREAT EOS AS A VALID *
*                 TOKEN; IF ENCOUNTERED PREMATURELY, PROCESS IT AS    *
*                 A SYNTAX ERROR                                      *
* 2005-AUG-19 RXT ADD TEST IF TOKEN TYPE IS TOK_IS_EOS, AND BACKUP    *
*                 TO PRIOR TOKEN AND PROCESS AS A SYNTAX ERROR        *
* 2005-JUL-26 RXT REMOVE STATEMENT BACKING UP TO PRIOR TOKEN WHEN A   *
*                 SYNTAX ERROR IS ENCOUNTERED                         *
* 2005-JUN-30 RXT CREATED                                             *
***********************************************************************
         EJECT
         COPY  #REGS
         SPACE 2
BASEREG  EQU   R12                BASE REGISTER
LINKREG  EQU   R14                SUBROUTINE LINK REG
         EJECT
         @TOKEN   MF=ALL
         EJECT
#SYNTMAP @SYNTXCK MF=DSECT
         EJECT
#SYNTXTB @RULE    MF=DSECT
         EJECT
***********************************************************************
*                                                                     *
*   PERFORM INITIAL HOUSEKEEPING                                      *
*                                                                     *
***********************************************************************
@SYNTXCK #ENTRY BASEREG=BASEREG,SAVEAREA=SAVEAREA,PARM=@PARM
         #OWNER VER=V1R0M0
         EJECT
***********************************************************************
*                                                                     *
*   START OF MAIN PROGRAM                                             *
*                                                                     *
***********************************************************************
BEGIN    DS    0H
         BAL   LINKREG,INIT       INITIALIZE STACK, BUFFERS, ETC.
         SPACE 1
         BAL   LINKREG,CHKPARM    VALIDATE PARAMETERS
         CLI   STATFLAG,ERROR     OK ?
         BE    EXIT               NO, CONTINUE
         SPACE 1
         BAL   LINKREG,SYNTXCHK   VALIDATE STRING'S SYNTAX
         SPACE 1
EXIT     DS    0H
         L     R13,SAVEAREA+4     PT TO CALLER'S REG SAVEAREA
         L     R15,RETCODE        RETURN CODE
         SPACE 1
         RETURN (14,12),RC=(15)   THAT'S ALL FOLKS!
         EJECT
***********************************************************************
*                                                                     *
*   SUBROUTINE - INITIALIZE BUFFERS, COUNTERS, ETC.                   *
*                                                                     *
***********************************************************************
INIT     DS    0H
         LR    R5,LINKREG         COPY RETURN REG
         SPACE 1
         #STACK STACK=STACK,LEVELS=4,ACTION=INIT  INIT REG STACK
         SPACE 1
         XC    RETCODE,RETCODE    RESET RETURN CODE
         XC    STATFLAG,STATFLAG  RESET STATUS FLAG
         LR    LINKREG,R5         RESTORE LINK REG
         BR    LINKREG            RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*   SUBROUTINE - CHECK PARAMETERS                                     *
*                                                                     *
***********************************************************************
CHKPARM  DS    0H
         #PUSH STACK=STACK        SAVE CALLER'S REGS
         SPACE 1
         L     R2,@PARM           POINT TO PARM LIST
         USING #SYNTMAP,R2        SET ADDR
         SPACE 1
         ICM   R1,B'1111',@SYSYNTB  NON-ZERO SYNTAX TABLE ADDRESS?
         BNZ   CHKPARM_SETPTRS    YES, CONTINUE
         SPACE 1
         MVI   STATFLAG,ERROR     SET ERROR FLAG
         MVC   RETCODE,RC_4       SET RETURN CODE
         B     CHKPARM_EXIT       GET OUT
         SPACE 1
CHKPARM_SETPTRS DS    0H
         L     R1,@PARSWRK        POINT TO @PARSER WORK AREA
         LA    R1,@TOKENXL(,R1)   POINT TO BEGINNING OF STACK
         ST    R1,@CURSTKE        SAVE IT
         SPACE 1
CHKPARM_EXIT  DS    0H
         #POP  STACK=STACK        RESTORE CALLER'S REGS
         BR    LINKREG            RETURN TO CALLER
         SPACE 1
         DROP  R2
         EJECT
***********************************************************************
*                                                                     *
*   SUBROUTINE - CHECK SYNTAX OF INPUT STRING                         *
*                                                                     *
*                R0-R3 = WORK REGS                                    *
*                R4-R6 NOT USED                                       *
*                R7 = @SYNTXCK PARAMETER LIST                         *
*                R8 = ADDR OF USER'S SYNTAX TABLE/CONTINUATION RULE   *
*                R9 = ADDR OF CURRENT TOKEN STACK ENTRY               *
*                R10-R11 NOT USED                                     *
*                                                                     *
***********************************************************************
SYNTXCHK DS    0H
         #PUSH STACK=STACK        SAVE CALLER'S REGS
         SPACE 1
         L     R7,@PARM           POINT TO PARM LIST
         USING #SYNTMAP,R7        SET ADDR
         SPACE 1
         ICM   R8,B'1111',@CONTRUL ARE WE IN THE MIDST OF CONTINUATION?
         BZ    SYNTXCHK_TBL_PTR   NO, COONTINUE
         SPACE 1
         XC    @CONTRUL,@CONTRUL  RESET CONTINUATION ADDRESS
         B     SYNTXCHK_STK_PTR   CONTINUE
         SPACE 1
SYNTXCHK_TBL_PTR DS 0H
         L     R8,@SYSYNTB        POINT TO USER'S SYNTAX TABLE
         USING #SYNTXTB,R8        ADDR IT
         SPACE 1
SYNTXCHK_STK_PTR DS 0H
         L     R9,@CURSTKE        POINT TO CURRENT STACK ENTRY
         USING @TOKEN,R9          ADDR IT
         SPACE 1
SYNTXCHK_LOOP_01 DS 0H
         CLC   @SYNTOKN,=AL2(LASTRULE)  LAST SYNTAX RULE?
         BE    SYNTXCHK_EXIT      YES, GET OUT
         SPACE 1
         CLC   @SYNTOKN,=AL2(SYNTAXERR) SYNTAX ERROR?
         BE    SYNTXCHK_SYNTAXERR YES, CONTINUE
         SPACE 1
         CLC   @SYNTOKN,=AL2(CONTRULE) STATEMENT CONTINUATION?
         BNE   SYNTXCHK_TST_GOTO  NO, CONTINUE
         SPACE 1
         ICM   R1,B'1111',@SYNNXTA  NON-ZERO NEXT RULE ADDR?
         BZ    SYNTXCHK_BADRULE   NO, CONTINUE
         SPACE 1
         ST    R1,@CONTRUL        SET CONTINUATION ADDRESS
         B     SYNTXCHK_GET_NXTRULE CONTINUE
         SPACE 1
SYNTXCHK_TST_GOTO  DS 0H
         CLC   @SYNTOKN,=AL2(GOTORULE) GOTO RULE?
         BNE   SYNTXCHK_TST_TOKNS NO, CONTINUE
         SPACE 1
         ICM   R8,B'1111',@SYNNXTA  NON-ZERO NEXT RULE ADDR?
         BZ    SYNTXCHK_BADRULE   NO, CONTINUE
         SPACE 1
SYNTXCHK_TST_TOKNS DS 0H
         CLC   @SYNTOKN,@TOKNTYP  TOKEN MATCH SYNTAX RULE TOKEN TYPE?
         BNE   SYNTXCHK_GET_NXTRULE NO, CONTINUE
         SPACE 1
         ICM   R2,B'1111',@SYNKYWA  IS THERE A KEYWORD TO COMPARE?
         BZ    SYNTXCHK_NXTRULE_NXTTOKN NO, CONTINUE
         SPACE 1
         CLC   @TOKENLN,0(R2)     DO THE STRINGS HAVE SAME LENGTHS?
         BNE   SYNTXCHK_GET_NXTRULE NO, CONTINUE
         SPACE 1
         L     R3,@TOKENAD        ADDR OF TOKEN
         XR    R1,R1              CLEAR WORK REG
         IC    R1,@TOKENLN        LENGTH OF TOKEN
         BCTR  R1,R0              MACHINE LENGTH
         EX    R1,COMPTOKN        DOES THE TOKEN MATCH THE KEYWORD?
         BNE   SYNTXCHK_GET_NXTRULE NO, CONTINUE
         SPACE 1
SYNTXCHK_NXTRULE_NXTTOKN DS 0H
         ICM   R1,B'1111',@SYNNXTA  NON-ZERO NEXT RULE ADDR?
         BZ    SYNTXCHK_BADRULE   NO, CONTINUE
         SPACE 1
         LR    R8,R1              SET NEXT RULE ADDR
         LA    R9,@TOKENL(,R9)    POINT TO NEXT TOKEN
         B     SYNTXCHK_LOOP_01   CONTINUE
         SPACE 1
SYNTXCHK_GET_NXTRULE DS 0H
         LA    R8,@SYNTOKN_LEN(,R8) POINT TO NEXT RULE
         B     SYNTXCHK_LOOP_01   CONTINUE
         SPACE 1
SYNTXCHK_SYNTAXERR DS 0H
         XC    @CONTRUL,@CONTRUL  RESET CONTINUATION ADDRESS
         XR    R1,R1              CLEAR WORK REG
         IC    R1,@TOKENLN        LENGTH OF TOKEN
         ST    R1,@SYTOKLN        SAVE IT
         MVC   @SYTOKAD,@TOKENAD  ADDR OF TOKEN
         MVC   RETCODE,RC_8       SET BAD RETURN CODE
         B     SYNTXCHK_EXIT      GET OUT
         SPACE 1
SYNTXCHK_BADRULE DS    0H
         XC    @CONTRUL,@CONTRUL  RESET CONTINUATION ADDRESS
         ST    R8,@SYTBRAD        STORE ADDR OF INVALID RULE
         MVC   RETCODE,RC_12      SET BAD RETURN CODE
         SPACE 1
SYNTXCHK_EXIT DS    0H
         #POP  STACK=STACK        RESTORE CALLER'S REGS
         BR    LINKREG            RETURN TO CALLER
         SPACE 1
COMPTOKN CLC   0(*-*,R3),1(R2)    ** SUBJECT OF EX INSTR **
         SPACE 1
         DROP  R7,R8,R9
         EJECT
***********************************************************************
*                                                                     *
*   CONSTANTS, WORK AREAS, ETC.                                       *
*                                                                     *
***********************************************************************
SAVEAREA DS    18F                REGISTER SAVE AREA
@PARM    DS    A                  OS PARM ADDR
RETCODE  DS    F                  RETURN CODE
RC_4     DC    F'4'               RC = 4
RC_8     DC    F'8'               RC = 8
RC_12    DC    F'12'              RC = 12
*
STATFLAG DS    X                  STATUS FLAG
ERROR    EQU   X'80'              ERROR
*
@PARSWRK DC    V(TOKNSTAK)        ADDR OF PARSER WORK AREA
@CURSTKE DS    A                  ADDR OF CURRENT STACK ENTRY
@CONTRUL DC    A(0)               ADDR OF SYNTAX RULE TO RESUME FROM
*
STACK    #STACK STACK=STACK,LEVELS=5,ACTION=GEN  DEFINE STACK AREA
*
         SPACE 1
         LTORG *
         SPACE 1
         END
