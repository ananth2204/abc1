         TITLE '@INTRPRT - SCAN STACK AND INTERPRET INPUT STRING'
***********************************************************************
*                                                                     *
* MODULE NAME : @INTRPRT                                              *
*                                                                     *
*                                                                     *
* DESCRIPTIVE NAME : SCAN STACK AND INTERPRET INPUT STRING            *
*                                                                     *
*                                                                     *
* FUNCTION :  SCAN THE STACK CREATED BY @PARSE AND "INTERPRET"        *
*             THE INPUT STRING BY PASSING CONTROL TO USER-SPECIFIED   *
*             EXITS AS EACH KEYWORD TOKEN AND/OR ARGUMENTS ARE        *
*             ENCOUNTERED.  THE USER EXIT PROCESSES THE TOKEN AND,    *
*             IF SUCCESSFUL, RETURNS WITH R15=0; ELSE, R15=4 AND      *
*             AN ERROR MESSAGE IS STORED IN THE BUFFER PROVIDED TO    *
*             THE EXIT.  INTERPRETATION OF THE INPUT STRING IS        *
*             GOVERNED BY THE USER-PROVIDED SYNTAX TABLE.             *
*                                                                     *
* ENTRY: FROM CALLER                                                  *
*                                                                     *
* EXIT:  RETURN TO CALLER                                             *
*                                                                     *
*                                                                     *
* INPUT:                                                              *
*                                                                     *
*    PARMS:     WORD-1 = ADDR OF USER'S SYNTAX TABLE                  *
*               WORD-2 = LENGTH OF TOKEN IN ERROR                     *
*               WORD-3 = ADDRESS OF TOKEN IN ERROR                    *
*               WORD-4 = ADDR OF 100-BYTE ERROR MESSAGE               *
*                                                                     *
* OUTPUT:                                                             *
*                                                                     *
*    PARMS:     WORD-2 = LENGTH OF TOKEN IN ERROR                     *
*               WORD-3 = ADDRESS OF TOKEN IN ERROR                    *
*               WORD-4 = ADDR OF 100-BYTE ERROR MESSAGE               *
*                                                                     *
*    RETURN CODE:  0 = OK                                             *
*                  4 = ADDR OF USER'S SYNTAX TABLE IS ZERO, OR        *
*                      ADDR OF MESSAGE BUFFER IS ZERO                 *
*                  8 = ERROR DETECTED BY USER'S EXIT                  *
*                                                                     *
*                                                                     *
* ABENDS:                                                             *
*                                                                     *
*   SEE MESSAGES (IF ANY)                                             *
*                                                                     *
*--PROPRIETARY_STATEMENT----------------------------------------------*
*                                                                     *
*  THIS PROGRAM IS THE SOLE PROPERTY OF RICHARD TSUJIMOTO, INC.       *
*                                                                     *
***********************************************************************
* CHANGE HISTORY:                                                     *
* --------------                                                      *
* 2005-JUL-06 RXT CREATED                                             *
*                                                                     *
***********************************************************************
         EJECT
         COPY  #REGS
         SPACE 2
BASEREG  EQU   R12                BASE REGISTER
LINKREG  EQU   R14                SUBROUTINE LINK REG
         EJECT
         @TOKEN   MF=ALL
         EJECT
$PRMLST1 @INTRPRT MF=DSECT
         EJECT
EXITPMAP @INTRPRT MF=EXITPARM
         EJECT
#SYNTXTB @RULE    MF=DSECT
         EJECT
***********************************************************************
*                                                                     *
*   PERFORM INITIAL HOUSEKEEPING                                      *
*                                                                     *
***********************************************************************
@INTRPRT #ENTRY BASEREG=BASEREG,SAVEAREA=SAVEAREA,PARM=@PARM
         #OWNER VER=V1R0M0
         EJECT
***********************************************************************
*                                                                     *
*   START OF MAIN PROGRAM                                             *
*                                                                     *
***********************************************************************
BEGIN    DS    0H
         BAL   LINKREG,INIT       INITIALIZE STACK, BUFFERS, ETC.
         SPACE 1
         BAL   LINKREG,CHKPARM    VALIDATE PARAMETERS
         CLI   STATFLAG,ERROR     OK ?
         BE    EXIT               NO, CONTINUE
         SPACE 1
         BAL   LINKREG,INTRPTIT   INTERPRET THE INPUT STRING
         SPACE 1
EXIT     DS    0H
         L     R13,SAVEAREA+4     PT TO CALLER'S REG SAVEAREA
         L     R15,RETCODE        RETURN CODE
         SPACE 1
         RETURN (14,12),RC=(15)   THAT'S ALL FOLKS!
         EJECT
***********************************************************************
*                                                                     *
*   SUBROUTINE - INITIALIZE BUFFERS, COUNTERS, ETC.                   *
*                                                                     *
***********************************************************************
INIT     DS    0H
         LR    R5,LINKREG         COPY RETURN REG
         SPACE 1
         #STACK STACK=STACK,LEVELS=4,ACTION=INIT  INIT REG STACK
         SPACE 1
         XC    RETCODE,RETCODE    RESET RETURN CODE
         XC    STATFLAG,STATFLAG  RESET STATUS FLAG
         LR    LINKREG,R5         RESTORE LINK REG
         BR    LINKREG            RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*   SUBROUTINE - CHECK PARAMETERS                                     *
*                                                                     *
***********************************************************************
CHKPARM  DS    0H
         #PUSH STACK=STACK        SAVE CALLER'S REGS
         SPACE 1
         L     R2,@PARM           POINT TO PARM LIST
         USING $PRMLST1,R2        SET ADDR
         SPACE 1
         ICM   R1,B'1111',@ISYNTXB  NON-ZERO SYNTAX TABLE ADDRESS?
         BZ    CHKPARM_BADPTR     NO, CONTINUE
         SPACE 1
         ICM   R1,B'1111',@IERRMSG  NON-ZERO MESSAGE BUFFER ADDRESS?
         BNZ   CHKPARM_SETPTRS    YES, CONTINUE
         SPACE 1
CHKPARM_BADPTR  DS    0H
         MVI   STATFLAG,ERROR     SET ERROR FLAG
         MVC   RETCODE,RC_4       SET RETURN CODE
         B     CHKPARM_EXIT       GET OUT
         SPACE 1
CHKPARM_SETPTRS DS    0H
         L     R1,@PARSWRK        POINT TO @PARSER WORK AREA
         LA    R1,@TOKENXL(,R1)   POINT TO BEGINNING OF STACK
         ST    R1,@CURSTKE        SAVE IT
         SPACE 1
CHKPARM_EXIT  DS    0H
         #POP  STACK=STACK        RESTORE CALLER'S REGS
         BR    LINKREG            RETURN TO CALLER
         SPACE 1
         DROP  R2
         EJECT
***********************************************************************
*                                                                     *
*   SUBROUTINE - INTERPRET THE INPUT STRING                           *
*                                                                     *
*                R0-R3 = WORK REGS                                    *
*                R4-R6 NOT USED                                       *
*                R7 = @INTRPRT PARAMETER LIST                         *
*                R8 = ADDR OF USER'S SYNTAX TABLE/CONTINUATION RULE   *
*                R9 = ADDR OF CURRENT TOKEN STACK ENTRY               *
*                R10-R11 NOT USED                                     *
*                                                                     *
***********************************************************************
INTRPTIT DS    0H
         #PUSH STACK=STACK        SAVE CALLER'S REGS
         SPACE 1
         L     R7,@PARM           POINT TO PARM LIST
         USING $PRMLST1,R7        SET ADDR
         SPACE 1
         ICM   R8,B'1111',@CONTRUL ARE WE IN THE MIDST OF CONTINUATION?
         BZ    INTRPTIT_TBL_PTR   NO, COONTINUE
         SPACE 1
         XC    @CONTRUL,@CONTRUL  RESET CONTINUATION ADDRESS
         B     INTRPTIT_STK_PTR   CONTINUE
         SPACE 1
INTRPTIT_TBL_PTR DS 0H
         L     R8,@ISYNTXB        POINT TO USER'S SYNTAX TABLE
         USING #SYNTXTB,R8        SET ADDR
         SPACE 1
INTRPTIT_STK_PTR DS 0H
         L     R9,@CURSTKE        POINT TO CURRENT STACK ENTRY
         USING @TOKEN,R9          SET ADDR
         SPACE 1
INTRPTIT_LOOP_01 DS 0H
         CLC   @SYNTOKN,=AL2(LASTRULE)  LAST SYNTAX RULE?
         BE    INTRPTIT_EXIT      YES, GET OUT
         SPACE 1
         CLC   @SYNTOKN,=AL2(CONTRULE) STATEMENT CONTINUATION?
         BNE   INTRPTIT_TST_GOTO  NO, CONTINUE
         SPACE 1
         MVC   @CONTRUL,@SYNNXTA  FETCH ADDR OF CONTINUATION RULE
         B     INTRPTIT_GET_NXTRULE  CONTINUE
         SPACE 1
INTRPTIT_TST_GOTO  DS 0H
         CLC   @SYNTOKN,=AL2(GOTORULE)  GOTO RULE?
         BNE   INTRPTIT_TST_TOKNS  NO, CONTINUE
         SPACE 1
         L     R8,@SYNNXTA        GET NEXT RULE ADDR
         SPACE 1
INTRPTIT_TST_TOKNS DS 0H
         CLC   @SYNTOKN,@TOKNTYP  MATCHING TOKEN TYPE?
         BNE   INTRPTIT_GET_NXTRULE  NO, CONTINUE
         SPACE 1
         ICM   R2,B'1111',@SYNKYWA  IS THERE A KEYWORD TO COMPARE?
         BZ    INTRPTIT_TST_UEXIT  NO, CONTINUE
         SPACE 1
         CLC   @TOKENLN,0(R2)     DO STRINGS HAVE SAME LENGTHS?
         BNE   INTRPTIT_GET_NXTRULE  NO, CONTINUE
         SPACE 1
         L     R3,@TOKENAD        ADDR OF TOKEN
         XR    R1,R1              CLEAR WORK REG
         IC    R1,@TOKENLN        LENGTH OF TOKEN
         BCTR  R1,R0              MACHINE LENGTH
         EX    R1,COMPTOKN        IS IT A MATCH?
         BNE   INTRPTIT_GET_NXTRULE  NO, CONTINUE
         SPACE 1
INTRPTIT_TST_UEXIT DS 0H
         ICM   R15,B'1111',@SYNACTA  USER EXIT SPECIFIED?
         BZ    INTRPTIT_NXTRULE_NXTTOKN  NO, CONTINUE
         SPACE 1
         LA    R1,UEXITPRM        POINT TO USER EXIT PARM LIST
         USING EXITPMAP,R1        SET ADDR
         SPACE 1
         MVC   @IXTOKAD,@TOKENAD  SAVE ADDR OF CURRENT TOKEN
         XR    R2,R2              CLEAR WORK REG
         IC    R2,@TOKENLN        LENGTH OF TOKEN
         ST    R2,@IXTOKLN        SAVE LENGTH OF CURRENT TOKEN
         L     R2,@IERRMSG        POINT TO MESSAGE BUFFER
         MVI   0(R2),X'40'        RESET MESSAGE BUFFER
         MVC   1(@IXERRML-1,R2),0(R2)  TO BLANKS
         ST    R2,@IXERRMG        STORE ADDR OF MESSAGE BUFFER
         BALR  R14,R15            CALL USER'S EXIT
         SPACE 1
         LTR   R15,R15            DID USER'S EXIT DETECT A PROBLEM?
         BZ    INTRPTIT_NXTRULE_NXTTOKN  NO, CONTINUE
         SPACE 1
         MVC   @ITOKLEN,@IXTOKLN  STORE TOKEN LENGTH
         MVC   @ITOKNAD,@IXTOKAD  STORE ADDR OF TOKEN
         MVC   RETCODE,RC_8       SET RETURN CODE
         B     INTRPTIT_EXIT      GET OUT
         SPACE 1
         DROP  R1
         SPACE 1
INTRPTIT_NXTRULE_NXTTOKN DS 0H
         L     R8,@SYNNXTA        GET ADDR OF NEXT RULE
         LA    R9,@TOKENL(,R9)    POINT TO NEXT TOKEN
         B     INTRPTIT_LOOP_01   CONTINUE
         SPACE 1
INTRPTIT_GET_NXTRULE DS 0H
         LA    R8,@SYNTOKN_LEN(,R8) POINT TO NEXT RULE
         B     INTRPTIT_LOOP_01   CONTINUE
         SPACE 1
INTRPTIT_EXIT DS    0H
         #POP  STACK=STACK        RESTORE CALLER'S REGS
         BR    LINKREG            RETURN TO CALLER
         SPACE 1
COMPTOKN CLC   0(*-*,R3),1(R2)    ** SUBJECT OF EX INSTR **
         SPACE 1
         DROP  R7,R8,R9
         EJECT
***********************************************************************
*                                                                     *
*   CONSTANTS, WORK AREAS, ETC.                                       *
*                                                                     *
***********************************************************************
SAVEAREA DS    18F                REGISTER SAVE AREA
@PARM    DS    A                  OS PARM ADDR
RETCODE  DS    F                  RETURN CODE
*
RC_4     DC    F'4'               RC = 4
RC_8     DC    F'8'               RC = 8
*
STACK    #STACK STACK=STACK,LEVELS=4,ACTION=GEN  DEFINE STACK AREA
*
STATFLAG DS    X                  STATUS FLAG
ERROR    EQU   X'80'              ERROR
*
@PARSWRK DC    V(TOKNSTAK)        ADDR OF PARSER WORK AREA
@CURSTKE DS    A                  ADDR OF CURRENT STACK ENTRY
@CONTRUL DC    A(0)               ADDR OF SYNTAX RULE TO RESUME FROM
*
UEXITPRM DS    0F
         DS    CL(@IXPRMLN)       USER EXIT PARM LIST
*
         LTORG *
         SPACE 1
         END
