         TITLE '@PARSE - PERFORM LEXICAL SCAN AND CREATE TOKENS'
***********************************************************************
*                                                                     *
* MODULE NAME : @PARSE                                                *
*                                                                     *
*                                                                     *
* DESCRIPTIVE NAME : PERFORM LEXICAL SCAN AND CREATE TOKENS           *
*                                                                     *
*                                                                     *
* FUNCTION :  PERFORMA A LEXICAL SCAN OF A CHARACTER STRING, CREATE   *
*             TOKENS, AND STORE THEM ON A FIFO STACK.                 *
*                                                                     *
*             THE CRITERIA FOR A TOKEN ARE AS FOLLOWS:                *
*                                                                     *
*             1) IF A CHARACTER MATCHES AN ENTRY IN THE DELIMITER     *
*                TABLE, AND THE DELIMITER IS MARKED ACTIVE, THE       *
*                CHARACTER IS REPRESENTED BY A SINGLE (DELIMITER)     *
*                TOKEN.                                               *
*                                                                     *
*             2) CONTIGUOUS ALPHAMERIC CHARACTERS THAT DO NOT CONTAIN *
*                ANY ACTIVE DELIMITERS ARE TREATED AS A SINGLE ENTITY *
*                AND IS REPRESENTED BY A SINGLE (DATA) TOKEN.         *
*                                                                     *
*             3) CONTIGUOUS NUMERIC DIGITS ARE TREATED AS A SINGLE    *
*                ENTITY AND IS REPRESENTED BY A SINGLE (NUMERIC)      *
*                TOKEN.                                               *
*                                                                     *
*             4) A SPECIAL TOKEN IS ADDED TO THE END OF THE STACK     *
*                THAT SERVES AS AN END-OF-STACK MARKER.               *
*                                                                     *
* ENTRY: FROM CALLER                                                  *
*                                                                     *
* EXIT:  RETURN TO CALLER                                             *
*                                                                     *
*                                                                     *
* INPUT:                                                              *
*                                                                     *
*    PARMS:     WORD-1 = ADDR OF CHARACTER STING                      *
*               WORD-2 = STRING LENGTH                                *
*               WORD-3 = ADDR OF DELIMITER ARRAY                      *
*                                                                     *
* OUTPUT:                                                             *
*                                                                     *
*    RETURN CODE:  0 = OK                                             *
*                  4 = ADDR FOR COMMAND STRING IS ZERO                *
*                  8 = INVALID STRING LENGTH                          *
*                 12 = ADDR FOR DELIMITER ARRAY IS ZERO               *
*                                                                     *
*                                                                     *
* ABENDS:                                                             *
*                                                                     *
*   SEE MESSAGES (IF ANY)                                             *
*                                                                     *
*--PROPRIETARY_STATEMENT----------------------------------------------*
*                                                                     *
*  THIS PROGRAM IS THE SOLE PROPERTY OF RICHARD TSUJIMOTO, INC.       *
*                                                                     *
***********************************************************************
* CHANGE HISTORY:                                                     *
* --------------                                                      *
* 2005-OCT-17 RXT CHANGE BRANCH LABEL FROM PARSEIT_NOTONLY TO         *
*                 PARSEIT_ONLY                                        *
* 2005-OCT-14 RXT FOLLOWING CHANGES MADE:                             *
*                 1. CHECK FOR TOGGLE FLAG IN A GIVEN DELIMITER, IF   *
*                    ON TOGGLE LOCAL TOGGLE FLAG                      *
*                 2. IF DELIMITER IS PTPAD (E.G. BLANK), THE DECISION *
*                    TO TOKENIZE IT IS DEPENDENT ON THE LOCAL TOGGLE  *
*                    FLAG                                             *
*                 3. STORE EOS TOKEN WITH ALL ATTRIBUTES SET, E.G.    *
*                    TOKEN TYPE, TOKEN SIZE, ADDR OF EOS IN INPUT     *
*                 4. CHECK IF EOS IS THE ONLY TOKEN ON THE STACK      *
* 2005-JUN-27 RXT CREATED                                             *
***********************************************************************
         EJECT
         COPY  #REGS
         SPACE 2
BASEREG  EQU   R12                BASE REGISTER
LINKREG  EQU   R14                SUBROUTINE LINK REG
         EJECT
         @TOKEN  MF=ALL
         EJECT
$PRMLST1 @PARSE  MF=DSECT
         SPACE 2
$DELIMTB @DELIM  MF=DSECT
         EJECT
***********************************************************************
*                                                                     *
*   PERFORM INITIAL HOUSEKEEPING                                      *
*                                                                     *
***********************************************************************
@PARSE   #ENTRY BASEREG=BASEREG,SAVEAREA=SAVEAREA,PARM=@PARM
         #OWNER VER=V1R0M0
         SPACE 1
         ENTRY TOKNSTAK
         SPACE 1
         EJECT
***********************************************************************
*                                                                     *
*   START OF MAIN PROGRAM                                             *
*                                                                     *
***********************************************************************
BEGIN    DS    0H
         BAL   LINKREG,INIT       INITIALIZE STACK, BUFFERS, ETC.
         SPACE 1
         BAL   LINKREG,CHKPARM    VALIDATE PARAMETERS
         CLI   STATFLAG,ERROR     OK ?
         BE    EXIT               NO, CONTINUE
         SPACE 1
         BAL   LINKREG,PARSEIT    PARSE THE STRING
         SPACE 1
EXIT     DS    0H
         L     R13,SAVEAREA+4     PT TO CALLER'S REG SAVEAREA
         L     R15,RETCODE        RETURN CODE
         SPACE 1
         RETURN (14,12),RC=(15)   THAT'S ALL FOLKS!
         EJECT
***********************************************************************
*                                                                     *
*   SUBROUTINE - INITIALIZE BUFFERS, COUNTERS, ETC.                   *
*                                                                     *
***********************************************************************
INIT     DS    0H
         LR    R5,LINKREG         COPY RETURN REG
         SPACE 1
         #STACK STACK=STACK,LEVELS=4,ACTION=INIT  INIT REG STACK
         SPACE 1
         XC    RETCODE,RETCODE    RESET RETURN CODE
         XC    STATFLAG,STATFLAG  RESET STATUS FLAG
         XC    TOGGLEFG,TOGGLEFG  RESET TOGGLE FLAG
         SPACE 1
         LA    R0,TOKNSTAK        POINT TO WORK AREA
         LA    R1,TOKNSTAKLN      LENGTH OF WORK AREA
         LR    R2,R1              SOURCE AND TARGET THE SAME
         XR    R3,R3              PAD BYTE = X'00'
         MVCL  R0,R2              CLEAR WORK AREA TO NULLS
         MVC   TOKNSTAK,=CL12'*PARSE STAK*'  STORE EYE-CATCHER
         SPACE 1
         LR    LINKREG,R5         RESTORE LINK REG
         BR    LINKREG            RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*   SUBROUTINE - VALIDATE PARAMETERS                                  *
*                                                                     *
***********************************************************************
CHKPARM  DS    0H
         #PUSH STACK=STACK        SAVE CALLER'S REGS
         SPACE 1
         L     R3,@PARM           POINT TO PARM LIST
         USING $PRMLST1,R3        SET ADDR
         SPACE 1
         OC    @PCMDADR,@PCMDADR  DID USER SPECIFY COMMAND STRING?
         BZ    CHKPARM_ERR1       NO, CONTINUE
         SPACE 1
         ICM   R1,B'1111',@PCMDLEN IS STRING LENGTH ZERO?
         BZ    CHKPARM_ERR2       YES, CONTINUE
         SPACE 1
         LTR   R1,R1              IS IT LESS THAN 1?
         BM    CHKPARM_ERR2       YES, CONTINUE
         SPACE 1
         C     R1,=A(@PCMDMXL)    IS IT TOO LARGE?
         BH    CHKPARM_ERR2       YES, CONTINUE
         SPACE 1
         OC    @PDELIMA,@PDELIMA  DID USER SPECIFY DELIMITER ARRAY?
         BZ    CHKPARM_ERR3       NO, CONTINUE
         SPACE 1
         B     CHKPARM_EXIT       GET OUT
         SPACE 1
CHKPARM_ERR1  DS    0H
         MVI   STATFLAG,ERROR     SET FLAG
         MVC   RETCODE,CMDADDR_ERR  SET RETURN CODE
         B     CHKPARM_EXIT       GET OUT
         SPACE 1
CHKPARM_ERR2  DS    0H
         MVI   STATFLAG,ERROR     SET FLAG
         MVC   RETCODE,STRLEN_ERR   SET RETURN CODE
         B     CHKPARM_EXIT       GET OUT
         SPACE 1
CHKPARM_ERR3  DS    0H
         MVI   STATFLAG,ERROR     SET FLAG
         MVC   RETCODE,DLMTADDR_ERR SET RETURN CODE
         SPACE 1
CHKPARM_EXIT  DS    0H
         #POP  STACK=STACK        RESTORE CALLER'S REGS
         BR    LINKREG            RETURN TO CALLER
         SPACE 1
         DROP  R3
         EJECT
***********************************************************************
*                                                                     *
*   SUBROUTINE - PARSE STRING AND CREATE TOKENS                       *
*                                                                     *
*   REGISTER USAGE:                                                   *
*      R0-R2 WORK                                                     *
*      R3    POINTS TO START OF (SUB)STRING                           *
*      R4    POINTS TO NEXT CHAR IN (SUB)STRING POINTED TO BY R3      *
*      R5    POINTS TO CURRENT ENTRY IN TOKEN STACK                   *
*      R6    POINTS TO END OF INPUT STRING                            *
*      R7    POINTS TO DELIMITER ARRAY                                *
*      R8    POINTS TO CALLER'S PARAMETER LIST                        *
*      R9    TOKEN TYPE VALUE                                         *
*      R10   WORK                                                     *
*      R11   WORK                                                     *
*                                                                     *
***********************************************************************
PARSEIT  DS    0H
         #PUSH STACK=STACK        SAVE CALLER'S REGS
         SPACE 1
         L     R8,@PARM           POINT TO PARM LIST
         USING $PRMLST1,R8        SET ADDR
         SPACE 1
         L     R3,@PCMDADR        POINT TO INPUT STRING
         LR    R4,R3              POINT TO INPUT STRING
         L     R1,@PCMDLEN        STRING LENGTH
         LA    R6,0(R1,R4)        POINT TO END OF STRING
         LA    R1,TOKNSTAK        POINT TO WORK AREA
         LA    R5,@TOKENXL(,R1)   POINT TO FIRST STACK ENTRY
         USING @TOKEN,R5          SET ADDR
         SPACE 1
PARSEIT_NXTCHAR DS    0H
         L     R7,@PDELIMA        POINT TO ARRAY OF DELIMITERS
         USING $DELIMTB,R7        SET ADDR
         SPACE 1
         L     R9,=F'1'           INIT COUNTER
         SPACE 1
PARSEIT_CHKDELIM  DS    0H
         CLI   @DLMITER,@DLMLAST  END OF DELIMITER ARRAY?
         BE    PARSEIT_BMP_CHAR   YES, CONTINUE
         SPACE 1
         CLC   0(1,R4),@DLMITER   IS INPUT CHAR A DELIMITER?
         BNE   PARSEIT_BMP_DELIM  NO, CONTINUE
         SPACE 1
         TM    @DLMSTAT,@DLMACTV  IS THE DELIMITER MARKED ACTIVE?
         BO    PARSEIT_PRVTOKN    YES, CONTINUE
         SPACE 1
PARSEIT_BMP_DELIM  DS    0H
         LA    R7,@DLMTBLN(,R7)   POINT TO NEXT ARRAY ENTRY
         LA    R9,1(,R9)          SET NEXT TOKEN TYPE VALUE
         B     PARSEIT_CHKDELIM   CONTINUE
         SPACE 1
PARSEIT_PRVTOKN DS    0H
         LR    R0,R4              END OF PREV.STRING
         SR    R0,R3              COMPUTE PREV.STRING LENGTH
         LTR   R0,R0              IS THIS A DELIMITER?
         BZ    PARSEIT_DELIM_TOKN  YES, CONTINUE
         SPACE 1
         ST    R3,@TOKENAD        STORE ADDR OF PREV.STRING IN TOKEN
         STC   R0,@TOKENLN        STORE PREV.STRING LENGTH IN TOKEN
         LA    R11,TOK_IS_DATA    ASSUME STRING IS ALPHAMERIC
         LR    R10,R0             COPY LENGTH
         BCTR  R10,0              MACHINE LENGTH
         EX    R10,CHECKNUM       IS IT NUMERIC?
         BNZ   PARSEIT_ASSIGN1    NO, CONTINUE
         SPACE 1
         LA    R11,TOK_IS_NUM     STRING IS NUMERIC
         SPACE 1
PARSEIT_ASSIGN1 DS    0H
         STCM  R11,B'0011',@TOKNTYP  STORE TOKEN TYPE IN TOKEN
         LA    R5,@TOKENL(,R5)    POINT TO NEXT STACK ENTRY
         SPACE 1
PARSEIT_DELIM_TOKN DS    0H
         TM    @DLMSTAT,@DLMTOGL  IS PTPAD TOGGLE ON?
         BNO   PARSEIT_DELIM_NOTOGL  NO, CONTINUE
         SPACE 1
         XI    TOGGLEFG,TOGGL_ON  TOGGLE THE FLAG
         SPACE 1
PARSEIT_DELIM_NOTOGL DS 0H
         C     R9,=A(TOK_IS_BLANK)  IS THIS PTPAD?
         BNE   PARSEIT_SET_SAVDELIM  NO, CONTINUE
         SPACE 1
         CLI   TOGGLEFG,TOGGL_ON  TOKENIZE PTPAD?
         BNE   PARSEIT_SET_NEXTCHAR  NO, CONTINUE
         SPACE 1
PARSEIT_SET_SAVDELIM DS 0H
         STCM  R9,B'0011',@TOKNTYP  STORE DELIMITER TYPE IN TOKEN
         MVI   @TOKENLN,X'01'     STORE DELIMITER LENGTH IN TOKEN
         ST    R4,@TOKENAD        STORE ADDR OF DELIMITER IN TOKEN
         LA    R5,@TOKENL(,R5)    POINT TO NEXT STACK ENTRY
         SPACE 1
PARSEIT_SET_NEXTCHAR DS 0H
         LA    R3,1(,R4)          BUMP BEGIN.STRING PTR
         SPACE 1
PARSEIT_BMP_CHAR  DS    0H
         LA    R4,1(,R4)          POINT TO NEXT CHAR IN INPUT STRING
         CR    R4,R6              END OF THE STRING ?
         BNE   PARSEIT_NXTCHAR    NO, CONTINUE
         SPACE 1
         LR    R0,R4              END OF PREV.STRING
         SR    R0,R3              COMPUTE PREV.STRING LENGTH
         LTR   R0,R0              IS THIS THE END-POINT?
         BZ    PARSEIT_ENDTOKN    YES, CONTINUE
         SPACE 1
         ST    R3,@TOKENAD        STORE ADDR OF LAST.STRING IN TOKEN
         STC   R0,@TOKENLN        STORE LAST.STRING LENGTH  IN TOKEN
         LA    R11,TOK_IS_DATA    ASSUME STRING IS ALPHAMERIC
         LR    R10,R0             COPY LENGTH
         BCTR  R10,0              MACHINE LENGTH
         EX    R10,CHECKNUM       IS IT NUMERIC?
         BNZ   PARSEIT_ASSIGN2    NO, CONTINUE
         SPACE 1
         LA    R11,TOK_IS_NUM     STRING IS NUMERIC
         SPACE 1
PARSEIT_ASSIGN2 DS    0H
         STCM  R11,B'0011',@TOKNTYP  STORE TOKEN TYPE IN TOKEN
         LA    R5,@TOKENL(,R5)    POINT TO NEXT STACK ENTRY
         SPACE 1
PARSEIT_ENDTOKN DS    0H
         MVC   @TOKNTYP,=AL2(TOK_IS_EOS)  STORE END-OF-STRING MARKER
         MVI   @TOKENLN,X'01'     STORE EOS LENGTH IN TOKEN
         L     R10,@PCMDADR       ASSUME EOS IS ONLY TOKEN ON STACK
         LA    R11,TOKNSTAK       POINT TO WORK AREA
         LA    R11,@TOKENXL(,R11)  POINT TO FIRST STACK ENTRY
         CR    R11,R5             IS EOS THE ONLY TOKEN ON THE STACK?
         BE    PARSEIT_ONLY       YES, CONTINUE
         SPACE 1
         LR    R1,R5              COPY ADDR OF CURRENT STACK ENTRY
         S     R1,=A(@TOKENL)     BACKUP TO PREVIOUS STACK ENTRY
         L     R10,@TOKENAD-@TOKEN(,R1)  GET ADDR OF PREV.STRING
         XR    R11,R11            CLEAR WORK REG
         IC    R11,@TOKENLN-@TOKEN(,R1)  GET LENGTH OF PREV.STRING
         AR    R10,R11            POINT TO LOC. OF EOS
         SPACE 1
PARSEIT_ONLY DS 0H
         ST    R10,@TOKENAD       STORE ADDR OF EOS IN TOKEN
         SPACE 1
PARSEIT_EXIT  DS    0H
         #POP  STACK=STACK        RESTORE CALLER'S REGS
         BR    LINKREG            RETURN TO CALLER
         SPACE 1
CHECKNUM TRT   0(*-*,R3),NUMTAB   ** SUBJECT OF EX INSTR **
         SPACE 1
         DROP  R5,R7,R8
         EJECT
***********************************************************************
*                                                                     *
*   CONSTANTS, WORK AREAS, ETC.                                       *
*                                                                     *
***********************************************************************
SAVEAREA DS    18F                REGISTER SAVE AREA
@PARM    DS    A                  OS PARM ADDR
RETCODE  DS    F                  RETURN CODE
DUBLWORK DS    D                  DOUBLEWORD WORK AREA
*
STACK    #STACK STACK=STACK,LEVELS=4,ACTION=GEN  DEFINE STACK AREA
*
STATFLAG DS    X                  STATUS FLAG
ERROR    EQU   X'80'              ERROR
*
CMDADDR_ERR  DC    F'4'           ADDR FOR COMMAND STRING IS ZERO
STRLEN_ERR   DC    F'8'           INVALID STRING LENGTH
DLMTADDR_ERR DC    F'12'          ADDR FOR DELIMITER TABLE IS ZERO
*
TOGGLEFG DS    X                  TOGGLE PTPAD FLAG
TOGGL_ON EQU   X'80'                 ON
*
NUMTAB   DC    256X'FF'           TRT TABLE FOR NUMERIC VALUES
         ORG   NUMTAB+C'0'
         DC    10X'00'            0-9
         ORG   ,
*
TOKNSTAK @PARSE MF=GENWORK        @PARSE WORK AREA
TOKNSTAKLN EQU *-TOKNSTAK         LENGTH OF WORK AREA
*
         LTORG *
         SPACE 1
         END
