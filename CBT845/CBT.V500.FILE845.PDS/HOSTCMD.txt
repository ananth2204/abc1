*---------------------------------------------------------------------*
*                                                                     *
* Function:                                                           *
*        Execute host command (CP or Hercules) passed as a parameter  *
*                                                                     *
* Syntax:                                                             *
*        // EXEC PGM=HOSTCMD,PARM='command'                           *
*                                                                     *
*        from REXX running under TSO session (see usage note below):  *
*        CMD = 'devlist'                                              *
*        PGM = 'HOSTCMD'                                              *
*        address LINKMVS RUNAUTH 'PGM CMD'                            *
*        or to get a responce                                         *
*        CMD = 'devlist'                                              *
*        PGM = 'HOSTCMD'                                              *
*        RESPONCE = COPIES('00'x, 4096)                               *
*        address LINKMVS RUNAUTH 'PGM CMD RESPONCE'                   *
*                                                                     *
* Usage notes:                                                        *
*        - This program requires APF autorization;                    *
*        - Program accept one or two parameters. The first parameter  *
*          is mandatory; second parameter is optional, if present,    *
*          this parameter points to the responce buffer. The first    *
*          halfword of the buffer should contain a length of the      *
*          remaining part of the buffer:                              *
*          +--------+     +--------+     +----+---------+             *
*          |   R1   |---->|   P1   |---->| L1 | command |             *
*          +--------+     +--------+     +----+---------+             *
*                         |   P2   |--+                               *
*                         +--------+  |  +----+-----------------+     *
*                                     +->| L2 | responce buffer |     *
*                                        +----+-----------------+     *
*        - End of parameter list (high-order bit) should be set       *
*          properly.                                                  *
*        - If responce buffer provided, responce of the host command  *
*          returned to caller.                                        *
*        - This program cannot be invoked from TSO session directly,  *
*          via call like "address LINKMVS 'HOSTCMD CMD RESPONCE'"     *
*          due to missed authorization, abend 047 will be result.     *
*          To invoke HOSTCMD from TSO session program RUNAUTH may be  *
*          used. Please see RUNAUTH description for details.          *
*       -  To run HOSTCMD via RUNAUTH program library where HOSTCMD   *
*          resides must be included in LNKLSTnn concatenation; name   *
*          of the program should be listed in the section AUTHTSF of  *
*          IKJTSOnn PARMLIB member.                                   *
*                                                                     *
* Installation:                                                       *
*        - Copy delivered program source (hostcmd.asm) to any source  *
*          library;                                                   *
*        - Use delivered job skeleton (hostcmd.make) to assembly and  *
*          link-edit a load module. Update this job skeleton to pro-  *
*          vide valid JOB card, actual source library and desired     *
*          load library - change SET statements as required;          *
*        - The HOSTCMD load module must reside on APF-authorised      *
*          library;                                                   *
*        - Don't forget to refresh LLA (F LLA,REFRESH) if necessary;  *
*        - Note: any authorized program added to the system potenti-  *
*          ally can be a security hole...                             *
*                                                                     *
* Return codes:                                                       *
*        0   - host command launched                                  *
*        101 - missed command (address of the command is zero)        *
*        102 - missed command (specified length is zero)              *
*        103 - too long command (length greater than 130)             *
*        104 - too many parameters (only one parameter allowed)       *
*                                                                     *
* Changes history:                                                    *
*        02.08.2006 abend 171 caused by PGFIX error                   *
*        05.08.2006 diagnose flag set in wrong register               *
*                                                                     *
* (C) 2006 Gregory Bliznets gbliznets@iba.by                          *
*                                                                     *
*---------------------------------------------------------------------*
         PRINT NOGEN
HOSTCMD  CSECT
HOSTCMD  AMODE 24
         USING HOSTCMD,R12             Establish addressability
         USING WORKAREA,R13            Workarea addressability
         STM   R14,R12,SAVEREGS        Save registers 14,15,0-12
         LR    R12,R15                 Load base register
         GETMAIN R,LV=WORKSIZE         Get workarea
         ST    R1,SAVEFPTR-SAVEAREA(,R13) Chain forward
         ST    R13,SAVEBPTR-SAVEAREA(,R1) Chain backward
         LR    R13,R1                  Set new savearea
         XC    SAVEFPTR,SAVEFPTR       Last area in chain
         XC    RETCODE,RETCODE         Clear error code
         L     R1,SAVEBPTR             Caller's save area
         LM    R0,R1,SAVEREGS-SAVEAREA+8(R1) Original R0, R1
         MVI   DIAGFLAG,X'00'          No diagnose 8 response
         L     R2,0(,R1)               Command pointer
         LTR   R2,R2                   Single parameter?
         BM    *+8                     Don't ask for responce
         MVI   DIAGFLAG,DIAGRESP       Get diagnose 8 response
         LH    R4,0(,R2)               Length of parm
         MVI   RETCODE+3,ERROR1        Set error code if no parms
         LTR   R4,R4                   Missed parm?
         BZ    QUIT                    Error if so
         MVI   RETCODE+3,ERROR2        Set error code if many parms
         C     R4,=F'132'              Too long?
         BH    QUIT                    Error if so
         ST    R2,DIAGCMDA             Store command pointer
         LR    R6,R2                   Copy command pointer
         AH    R6,0(R2)                Last byte of command + 1
         BCTR  R6,0                    Last byte of command
         ST    R6,DIAGCMDE             Store command end pointer
         TM    DIAGFLAG,DIAGRESP       Responce requested?
         BZ    MODESUP                 Set mode and do diag8
         L     R3,4(R1)                2nd parameter pointer
         MVI   RETCODE+3,ERROR3        Set error code if few parms
         LTR   R3,R3                   Last parameter?
         BNM   QUIT                    Error if no
         LH    R5,0(,R3)               Length of buffer
         MVI   RETCODE+3,ERROR4        Set error code if few parms
         LTR   R5,R5                   No buffer provided?
         BZ    QUIT                    Error if so
         ST    R3,DIAGBUFA             Store buffer pointer
         LR    R7,R3                   Copy buffer pointer
         AH    R7,0(R3)                Buffer end+1 pointer
         BCTR  R7,0                    Buffer end pointer
         ST    R7,DIAGBUFE             Store buffer end pointer
MODESUP  EQU   *
         MODESET KEY=ZERO,MODE=SUP
         L     R2,DIAGCMDA             Command pointer
         L     R6,DIAGCMDE             Command end pointer
         PGFIX R,A=(R2),EA=(R6),ECB=0  Freeze command area
         ICM   R4,B'1000',DIAGFLAG     Diagnose flags
         BZ    DIAG8                   No responce buffer
         L     R3,DIAGBUFA             Buffer pointer
         L     R7,DIAGBUFE             Buffer end pointer
         XR    R0,R0                   No ECB address supplied
         PGFIX R,A=(R3),EA=(R7),ECB=0  Freeze responce buffer
         LRA   R3,2(R3)                Set responce buffer
DIAG8    EQU   *
         LRA   R2,2(R2)                Command pointer
         DC    X'83240008'             DIAG R2,R4,8
         ST    R4,RETCODE              Return code
         L     R2,DIAGCMDA             Command pointer
         L     R6,DIAGCMDE             Command end Pointer
         PGFREE R,A=(R2),EA=(R6)       Free command buffer
         TM    DIAGFLAG,DIAGRESP       Responce requested?
         BZ    MODEPROB                Don't set length if so
         L     R3,DIAGBUFA             Buffer pointer
         STH   R5,0(R3)                Set length of responce
         L     R7,DIAGBUFE             Buffer end pointer
         PGFREE R,A=(R3),EA=(R7)       Free responce buffer
MODEPROB EQU   *
         MODESET KEY=NZERO,MODE=PROB
QUIT     EQU   *
         LR    R1,R13                  Current savearea pointer
         L     R13,SAVEBPTR            Chain back pointer
         MVC   SAVEREGS+4,RETCODE-WORKAREA(R1) Return code to saved R15
         FREEMAIN R,A=(R1),LV=WORKSIZE Free workarea
         LM    R14,R12,SAVEREGS        Restore registers 0-12,14,15
         BR    R14                     Back to caller
         SPACE 1
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*---------------------------------------------------------------------*
WORKAREA DSECT
SAVEAREA DS    0F                      Save area must be first
SAVEID   DS    F                       Not used
SAVEBPTR DS    F                       Backward pointer
SAVEFPTR DS    F                       Forward pointer
SAVEREGS DS    15F                     Regs 14,15,0-12
RETCODE  DS    F                       Return code
ERROR1   EQU   101                     - missed command
ERROR2   EQU   102                     - zero length command
ERROR3   EQU   103                     - too long command
ERROR4   EQU   104                     - too many parameters
DIAGCMDA DS    F                       Command buffer pointer
DIAGCMDE DS    F                       Command buffer end+1 pointer
DIAGBUFA DS    F                       Responce buffer pointer
DIAGBUFE DS    F                       Responce buffer end+1 pointer
DIAGFLAG DS    C                       Diagnose 8 flag byte:
DIAGRESP EQU   X'40'                   - get responce
DIAGRESV EQU   X'BF'                   - not used here
WORKSIZE EQU   *-WORKAREA
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
