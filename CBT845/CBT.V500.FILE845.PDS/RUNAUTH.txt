*---------------------------------------------------------------------*
*                                                                     *
* Function:                                                           *
*        Call authorised program from unauthorised TSO environment    *
*                                                                     *
* Syntax:                                                             *
*        RUNAUTH program parameters                                   *
*                                                                     *
* Usage notes:                                                        *
*        This program should be invoked under TSO monitor program     *
*        IKJEFT01 (IKJEFT1B) using standard MVS linkage conventions   *
*        via LINKMVS services. The program name (1st parameter) is    *
*        mandatory, Up to 4 parameters may be specified for the       *
*        calling program (IKJEFTSR service restriction). End of       *
*        parameter list (high-order bit) should be set properly.      *
*        So, if the program receives the parameter list as shown      *
*        below                                                        *
*        +--------+     +--------+        +----+--------------+       *
*        |   R1   |---->|   P1   |------->| Lp | program name |       *
*        +--------+     +--------+        +----+--------------+       *
*                       |   P2   |-----+                              *
*                       +--------+     |  +----+-------------+        *
*                       |   P3   |---+ +->| La | parameter A |        *
*                       +--------+   |    +----+-------------+        *
*                       |   P4   |-+ |                                *
*                       +--------+ | |    +----+-------------+        *
*                                  | +--->| Lb | parameter B |        *
*                                  |      +----+-------------+        *
*                                  |                                  *
*                                  |      +----+-------------+        *
*                                  +----->| Lc | parameter C |        *
*                                         +----+-------------+        *
*                                                                     *
*        called program being received the following:                 *
*        +--------+     +--------+        +----+-------------+        *
*        |   R1   |---->|   P1   |------->| La | parameter A |        *
*        +--------+     +--------+        +----+-------------+        *
*                       |   P2   |-----+                              *
*                       +--------+     |  +----+-------------+        *
*                       |   P3   |---+ +->| Lb | parameter B |        *
*                       +--------+   |    +----+-------------+        *
*                                    |                                *
*                                    |    +----+-------------+        *
*                                    +--->| Lc | parameter C |        *
*                                         +----+-------------+        *
*        See also delivered example (runauth.run).                    *
*                                                                     *
* Installation:                                                       *
*        - Copy delivered program source (runauth.asm) to any source  *
*          library;                                                   *
*        - Use delivered job skeleton (runauth.make) to assembly and  *
*          link-edit a load module. Update this job skeleton to pro-  *
*          vide valid JOB card, actual source library and desired     *
*          load libarary - change SET statements as required;         *
*        - The RUNAUTH load module can be placed in any library and   *
*          not need to be authorized;                                 *
*        - Called program should reside in any APF-authorised libra-  *
*          ry; This library must be included in LNKLSTnn concatena-   *
*          tion. Called program also should be listed in the section  *
*          AUTHTSF of IKJTSOnn PARMLIB member.                        *
*        - Don't forget to refresh LLA (F LLA,REFRESH) if necessary;  *
*        - Note: any authorized program added to the system potenti-  *
*          ally can be a security hole...                             *
*                                                                     *
* Return codes:                                                       *
*          201 - missed command (specified length is zero)            *
*          202 - too long command (length greater than 8)             *
*          203 - too many parameters (up to 4 parameters allowed)     *
*          Otherwise return code of called program returned           *
*                                                                     *
* (C) 2006 Gregory Bliznets gbliznets@iba.by, based on idea and code  *
*        described in the article "Removing user-written authoriza-   *
*        tion SVC" written by Adrian Cole                             *
*                                                                     *
*---------------------------------------------------------------------*
         PRINT NOGEN
RUNAUTH  CSECT
RUNAUTH  AMODE 24
         USING RUNAUTH,R12             Establish addressability
         USING WORKAREA,R13            Workarea addressability
         STM   R14,R12,SAVEREGS        Save registers 14,15,0-12
         LR    R12,R15                 Load base register
         STORAGE OBTAIN,LENGTH=WORKSIZE Get workarea
         ST    R1,SAVEFPTR-SAVEAREA(,R13) Chain forward
         ST    R13,SAVEBPTR-SAVEAREA(,R1) Chain backward
         LR    R13,R1                  Set new save area
         XC    SAVEFPTR,SAVEFPTR       Last save area in chain
         MVC   SAVEID,=C'AUTH'         Eyecatcher
         XC    RETCODE,RETCODE         Clear return code
         XC    RSNCODE,RSNCODE         Clear reason code
         XC    ABNCODE,ABNCODE         Clear abend code
         XC    TSFLAG,TSFLAG           Clear IKJEFTSR flags
         MVI   TSFLAG4,X'02'           Program being called
         XC    PARMPTR(PARMSIZE),PARMPTR Clear plist area
         LA    R15,PARMPTR+4
         ST    R15,PARMPTR             Initialize called program plist
         OI    PARMPTR,X'80'
         LA    R15,TSFLAG              Initialize IKJEFTSR plist:
         ST    R15,TSPARM1             1st - pointer to IKJEFTSR flags
         LA    R15,CMDLEN
         ST    R15,TSPARM3             3th - program name length
         LA    R15,RETCODE
         ST    R15,TSPARM4             4th - program return code
         LA    R15,RSNCODE
         ST    R15,TSPARM5             5th - program reason code
         LA    R15,ABNCODE
         ST    R15,TSPARM6             6th - program abend code
         LA    R15,PARMPTR
         ST    R15,TSPARM7             7th - parms of called program
         OI    TSPARM7,X'80'           Set end of IKJEFTSR plist
         L     R1,SAVEBPTR             Caller's save area
         LM    R0,R1,SAVEREGS-SAVEAREA+8(R1) Original R0, R1
         L     R2,0(,R1)               Save command pointer
         LH    R3,0(,R2)               Length of command
         MVI   RETCODE+3,ERROR1        Error code if length is 0
         LTR   R2,R2                   Missed command?
         BZ    QUIT                    Error if so
         MVI   RETCODE+3,ERROR2        Error code if length > 8
         C     R3,=F'8'                Too long command?
         BH    QUIT                    Error if so
         ST    R3,CMDLEN               Store length of command
         XR    R3,R3                   For LA (AMODE=24)
         LA    R3,2(R2)                Address of the command
         ST    R3,TSPARM2              Store command pointer
         LTR   R2,R2                   Command only, no parms?
         BM    CALLTSR                 Fine, invoke IKJEFTSR
         LA    R1,4(R1)                Next pointer
         XR    R3,R3                   plist offset
         LA    R5,PARMSIZE             plist size
PLIST    EQU   *
         L     R2,0(R3,R1)             n-th pointer
         ST    R2,PARMPTR(R3)          Store to plist
         LTR   R2,R2                   End of plist?
         BM    CALLTSR                 Fine, invoke IKJEFTSR
         LA    R3,4(R3)                Offset to next pointer
         MVI   RETCODE+3,ERROR3        Error code if too many parms
         CR    R3,R5                   Too many pointers?
         BH    QUIT                    Error if so
         B     PLIST                   Iterate
CALLTSR  EQU   *
         LA    R1,TSPARM1              IKJEFTSR parameter list
         L     R15,FLCCVT-PSA(,R0)     CVT pointer
         L     R15,CVTTVT-CVT(,R15)    TSVT pointer
         L     R15,TSVTASF-TSVT(,R15)  TSO service facility pointer
         BALR  R14,R15                 Call IKJEFTSR
QUIT     EQU   *
         LR    R1,R13                  Work area pointer
         L     R13,SAVEBPTR            Chain back pointer
         MVC   SAVEREGS+4-WORKAREA(4,R13),RETCODE-WORKAREA(R1)
         STORAGE RELEASE,ADDR=(R1),LENGTH=WORKSIZE
         LM    R14,R12,SAVEREGS        Restore registers 0-12,14,15
         BR    R14                     Back to caller (IKJEFT01)
         SPACE 1
*---------------------------------------------------------------------*
*        Dynamic Storage Area                                         *
*---------------------------------------------------------------------*
WORKAREA DSECT
SAVEAREA DS    0F                      Save area must be first
SAVEID   DS    F                       Not used
SAVEBPTR DS    F                       Backward pointer
SAVEFPTR DS    F                       Forward pointer
SAVEREGS DS    15F                     Regs 14,15,0-12
TSFLAG   DS    0F                      IKJEFTSR flags (4 bytes):
TSFLAG1  DC    X'0'                    - always zero
TSFLAG2  DC    X'0'                    - TSV invoke authorized
TSFLAG3  DC    X'0'                    - No dump required
TSFLAG4  DC    X'2'                    - Invoked as a program
RETCODE  DC    F'0'                    return code of function invoked
ERROR1   EQU   201                     - missed command
ERROR2   EQU   202                     - too long command
ERROR3   EQU   203                     - too many parms passed
RSNCODE  DC    F'0'                    reason code of function invoked
ABNCODE  DC    F'0'                    abend code of function invoked
CMDLEN   DS    F'0'                    length of command name
TSPARM   DS    0F
TSPARM1  DC    A(TSFLAG)               pointer to IKJEFTSR flags
TSPARM2  DC    A(0)                    pointer to program name
TSPARM3  DC    A(CMDLEN)               pointer to length of name above
TSPARM4  DC    A(RETCODE)              pointer to return code
TSPARM5  DC    A(RSNCODE)              pointer to reason code
TSPARM6  DC    A(ABNCODE)              pointer to abend code
TSPARM7  DC    A(PARMPTR)              pointer to program parms pointer
PARMPTR  DC    4A(0)                   up to 4 pointers for program
PARMSIZE EQU   *-PARMPTR               size of program pointers
WORKSIZE EQU   *-WORKAREA
*---------------------------------------------------------------------*
*        Macros                                                       *
*---------------------------------------------------------------------*
         IHAPSA
         CVT   DSECT=YES
         IKJTSVT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
