{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012932000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE845.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE845.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x14'", "DS1TRBAL": "b'\\n\\x18'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05\\xd2\\x00\\n\\x05\\xd2\\x00\\r\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x04Q\\x00U\\x01\\x11\\x04\\x1f\\x01\\x11\\x04\\x1f\\x19'\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf1@@@\"", "ispf": {"version": "04.81", "flags": 0, "createdate": "2011-02-10T00:00:00", "modifydate": "2011-02-10T19:27:55", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-481"}, "text": "REGULAR CBT TAPE - VERSION 481    FILE:  845\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT481.FILE845\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 14 MEMBERS COUNTED; CUMULATIVE SIZE IS 988 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   02/10/11    19:27:55    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$README": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x19\\x01\\x11\\x04\\x1f\\x01\\x11\\x04\\x1f\\x18H\\x00E\\x00A\\x00\\x00\\xc7\\xc2\\xd3\\xc9\\xe9\\xd5\\xe2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2011-02-10T00:00:00", "modifydate": "2011-02-10T18:48:19", "lines": 69, "newlines": 65, "modlines": 0, "user": "GBLIZNS"}, "text": "Preface:\n\nThis package contains three programs: RUNAUTH, HOSTCMD and SYSCMD.\n\n        With the first program, authorized program can be called\n        from un-authorized TSO environment, including CLIST or\n        REXX script, where direct call caused system abend 047.\n        The second program allows execute of host (CP or Hercules)\n        command, passed as a paramerter, on z/OS or OS/390.\n        Running both together, CP or Hercules commands can be\n        entered from unauthorized TSO session without any system\n        mods.  Third program SYSCMD allows execute of MVS system\n        commands (MVS console commands) from the program, the\n        same thing as provided by TSO CONSOLE service. This\n        program also can be used together with RUNAUTH to allow\n        to run MVS commands from unauthorized TSO session.\n\nInstallation:\n        - Copy delivered program sources (runauth.asm, hostcmd.asm and\n          syscmd.asm) to any source library;\n        - Use delivered job skeletons (runauth.make, hostcmd.make and\n          syscmd.make) to assembly and link-edit a load module. Update\n          this job skeleton to provide valid JOB card, actual source\n          library and desired load libarary - change SET statements at\n          the beginning of job skeleton as required;\n        - The HOSTCMD and SYSCMD load modules must reside on\n          APF-authorized LNKLST library; The RUNAUTH load module can\n          be placed in any library and not not need to be authorized;\n        - Update IKJTSO00 on SYS1.PARMLIB or it's equivalent to add\n          HOSTCMD and SYSCMD to list of commands authorized in TSO\n          service facility (section AUTHTSF). Please use delivered\n          IKJTSO00.parmlib as a reference.\n        - Don't forget to refresh system after updating PARMLIB (with\n          SET IKJTSO=xx and SETPROG; also refresh LLA with\n          F LLA,REFRESH if necessary) or just re-ipl.\n\nUsage:\n        - To use HOSTCMD and SYSCMD from batch:\n          // EXEC PGM=HOSTCMD,PARM='host_command'\n          // EXEC PGM=SYSCMD,PARM='MVS_command'\n          see also example jobs hostcmd.run, SYSCMD.run\n        - To use HOSTCMD from TSO clist:\n          CMD = 'host_command'\n          PGM = 'HOSTCMD'\n          address LINKMVS RUNAUTH 'PGM CMD'\n          CMD = 'MVS_command'\n          PGM = 'SYSCMD'\n          address LINKMVS RUNAUTH 'PGM CMD'\n          or to get a host command responce:\n          CMD = 'host_command'\n          PGM = 'HOSTCMD'\n          RESPONCE = COPIES('00'x, 4096)\n          address LINKMVS RUNAUTH 'PGM CMD RESPONCE'\n          See also example REXX script runauth.clist and job\n          runauth.run.\n\nAuthor:\n         Gregory Bliznets gbliznets@iba.by\n         RUNAUTH based on idea and code described in the article\n         \"Removing user-written authorization SVC\" written by Adrian\n         Cole, see http://www.xephon.com/arcframe/m072a06\n\nChanges:\n         02.08.2006 HOSTCMD updated to avoid abend 171 due to PGFIX\n                    error.\n         04.08.2006 SYSCMD is added to the package, all descriptions\n                    corrected.\n         05.08.2006 HOSTCMD updated to set DIAG properly; Now DIAG\n                    responce available.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE845": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x04Q\\x00@\\x01\\x11\\x04\\x1f\\x01\\x11\\x04\\x1f\\x19'\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf1@@@\"", "ispf": {"version": "04.81", "flags": 0, "createdate": "2011-02-10T00:00:00", "modifydate": "2011-02-10T19:27:40", "lines": 31, "newlines": 31, "modlines": 0, "user": "CBT-481"}, "text": "//***FILE 845 is from Gregory Bliznets and contains three programs. *   FILE 845\n//*                                                                 *   FILE 845\n//*           email:  Gregory Bliznets gbliznets@iba.by             *   FILE 845\n//*                                                                 *   FILE 845\n//*     This package contains three programs: RUNAUTH, HOSTCMD      *   FILE 845\n//*     and SYSCMD.                                                 *   FILE 845\n//*                                                                 *   FILE 845\n//*     With the first program, authorized program can be called    *   FILE 845\n//*     from un-authorized TSO environment, including CLIST or      *   FILE 845\n//*     REXX script, where direct call caused system abend 047.     *   FILE 845\n//*     The second program allows execute of host (CP or Hercules)  *   FILE 845\n//*     command, passed as a parameter, on z/OS or OS/390.          *   FILE 845\n//*     Running both together, CP or Hercules commands can be       *   FILE 845\n//*     entered from unauthorized TSO session without any system    *   FILE 845\n//*     mods.  Third program SYSCMD allows execute of MVS system    *   FILE 845\n//*     commands (MVS console commands) from the program, the       *   FILE 845\n//*     same thing as provided by TSO CONSOLE service. This         *   FILE 845\n//*     program also can be used together with RUNAUTH to allow     *   FILE 845\n//*     to run MVS commands from unauthorized TSO session.          *   FILE 845\n//*                                                                 *   FILE 845\n//*     Author:                                                     *   FILE 845\n//*                                                                 *   FILE 845\n//*      Gregory Bliznets gbliznets@iba.by RUNAUTH based on         *   FILE 845\n//*      idea and code described in the article \"Removing           *   FILE 845\n//*      user-written authorization SVC\" written by Adrian          *   FILE 845\n//*      Cole, see http://www.xephon.com/arcframe/m072a06           *   FILE 845\n//*                                                                 *   FILE 845\n//*     Note:                                                       *   FILE 845\n//*      Xephon articles of this vintage, are now supported         *   FILE 845\n//*      here, at www.cbttape.org    (SBG)                          *   FILE 845\n//*                                                                 *   FILE 845\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HOSTCMD": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x04\\x1f\\x01\\x11\\x04\\x1f\\x18B\\x00\\xc2\\x00\\xc2\\x00\\x00\\xc7\\xc2\\xd3\\xc9\\xe9\\xd5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-02-10T00:00:00", "modifydate": "2011-02-10T18:42:00", "lines": 194, "newlines": 194, "modlines": 0, "user": "GBLIZNS"}, "text": "*---------------------------------------------------------------------*\n*                                                                     *\n* Function:                                                           *\n*        Execute host command (CP or Hercules) passed as a parameter  *\n*                                                                     *\n* Syntax:                                                             *\n*        // EXEC PGM=HOSTCMD,PARM='command'                           *\n*                                                                     *\n*        from REXX running under TSO session (see usage note below):  *\n*        CMD = 'devlist'                                              *\n*        PGM = 'HOSTCMD'                                              *\n*        address LINKMVS RUNAUTH 'PGM CMD'                            *\n*        or to get a responce                                         *\n*        CMD = 'devlist'                                              *\n*        PGM = 'HOSTCMD'                                              *\n*        RESPONCE = COPIES('00'x, 4096)                               *\n*        address LINKMVS RUNAUTH 'PGM CMD RESPONCE'                   *\n*                                                                     *\n* Usage notes:                                                        *\n*        - This program requires APF autorization;                    *\n*        - Program accept one or two parameters. The first parameter  *\n*          is mandatory; second parameter is optional, if present,    *\n*          this parameter points to the responce buffer. The first    *\n*          halfword of the buffer should contain a length of the      *\n*          remaining part of the buffer:                              *\n*          +--------+     +--------+     +----+---------+             *\n*          |   R1   |---->|   P1   |---->| L1 | command |             *\n*          +--------+     +--------+     +----+---------+             *\n*                         |   P2   |--+                               *\n*                         +--------+  |  +----+-----------------+     *\n*                                     +->| L2 | responce buffer |     *\n*                                        +----+-----------------+     *\n*        - End of parameter list (high-order bit) should be set       *\n*          properly.                                                  *\n*        - If responce buffer provided, responce of the host command  *\n*          returned to caller.                                        *\n*        - This program cannot be invoked from TSO session directly,  *\n*          via call like \"address LINKMVS 'HOSTCMD CMD RESPONCE'\"     *\n*          due to missed authorization, abend 047 will be result.     *\n*          To invoke HOSTCMD from TSO session program RUNAUTH may be  *\n*          used. Please see RUNAUTH description for details.          *\n*       -  To run HOSTCMD via RUNAUTH program library where HOSTCMD   *\n*          resides must be included in LNKLSTnn concatenation; name   *\n*          of the program should be listed in the section AUTHTSF of  *\n*          IKJTSOnn PARMLIB member.                                   *\n*                                                                     *\n* Installation:                                                       *\n*        - Copy delivered program source (hostcmd.asm) to any source  *\n*          library;                                                   *\n*        - Use delivered job skeleton (hostcmd.make) to assembly and  *\n*          link-edit a load module. Update this job skeleton to pro-  *\n*          vide valid JOB card, actual source library and desired     *\n*          load library - change SET statements as required;          *\n*        - The HOSTCMD load module must reside on APF-authorised      *\n*          library;                                                   *\n*        - Don't forget to refresh LLA (F LLA,REFRESH) if necessary;  *\n*        - Note: any authorized program added to the system potenti-  *\n*          ally can be a security hole...                             *\n*                                                                     *\n* Return codes:                                                       *\n*        0   - host command launched                                  *\n*        101 - missed command (address of the command is zero)        *\n*        102 - missed command (specified length is zero)              *\n*        103 - too long command (length greater than 130)             *\n*        104 - too many parameters (only one parameter allowed)       *\n*                                                                     *\n* Changes history:                                                    *\n*        02.08.2006 abend 171 caused by PGFIX error                   *\n*        05.08.2006 diagnose flag set in wrong register               *\n*                                                                     *\n* (C) 2006 Gregory Bliznets gbliznets@iba.by                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         PRINT NOGEN\nHOSTCMD  CSECT\nHOSTCMD  AMODE 24\n         USING HOSTCMD,R12             Establish addressability\n         USING WORKAREA,R13            Workarea addressability\n         STM   R14,R12,SAVEREGS        Save registers 14,15,0-12\n         LR    R12,R15                 Load base register\n         GETMAIN R,LV=WORKSIZE         Get workarea\n         ST    R1,SAVEFPTR-SAVEAREA(,R13) Chain forward\n         ST    R13,SAVEBPTR-SAVEAREA(,R1) Chain backward\n         LR    R13,R1                  Set new savearea\n         XC    SAVEFPTR,SAVEFPTR       Last area in chain\n         XC    RETCODE,RETCODE         Clear error code\n         L     R1,SAVEBPTR             Caller's save area\n         LM    R0,R1,SAVEREGS-SAVEAREA+8(R1) Original R0, R1\n         MVI   DIAGFLAG,X'00'          No diagnose 8 response\n         L     R2,0(,R1)               Command pointer\n         LTR   R2,R2                   Single parameter?\n         BM    *+8                     Don't ask for responce\n         MVI   DIAGFLAG,DIAGRESP       Get diagnose 8 response\n         LH    R4,0(,R2)               Length of parm\n         MVI   RETCODE+3,ERROR1        Set error code if no parms\n         LTR   R4,R4                   Missed parm?\n         BZ    QUIT                    Error if so\n         MVI   RETCODE+3,ERROR2        Set error code if many parms\n         C     R4,=F'132'              Too long?\n         BH    QUIT                    Error if so\n         ST    R2,DIAGCMDA             Store command pointer\n         LR    R6,R2                   Copy command pointer\n         AH    R6,0(R2)                Last byte of command + 1\n         BCTR  R6,0                    Last byte of command\n         ST    R6,DIAGCMDE             Store command end pointer\n         TM    DIAGFLAG,DIAGRESP       Responce requested?\n         BZ    MODESUP                 Set mode and do diag8\n         L     R3,4(R1)                2nd parameter pointer\n         MVI   RETCODE+3,ERROR3        Set error code if few parms\n         LTR   R3,R3                   Last parameter?\n         BNM   QUIT                    Error if no\n         LH    R5,0(,R3)               Length of buffer\n         MVI   RETCODE+3,ERROR4        Set error code if few parms\n         LTR   R5,R5                   No buffer provided?\n         BZ    QUIT                    Error if so\n         ST    R3,DIAGBUFA             Store buffer pointer\n         LR    R7,R3                   Copy buffer pointer\n         AH    R7,0(R3)                Buffer end+1 pointer\n         BCTR  R7,0                    Buffer end pointer\n         ST    R7,DIAGBUFE             Store buffer end pointer\nMODESUP  EQU   *\n         MODESET KEY=ZERO,MODE=SUP\n         L     R2,DIAGCMDA             Command pointer\n         L     R6,DIAGCMDE             Command end pointer\n         PGFIX R,A=(R2),EA=(R6),ECB=0  Freeze command area\n         ICM   R4,B'1000',DIAGFLAG     Diagnose flags\n         BZ    DIAG8                   No responce buffer\n         L     R3,DIAGBUFA             Buffer pointer\n         L     R7,DIAGBUFE             Buffer end pointer\n         XR    R0,R0                   No ECB address supplied\n         PGFIX R,A=(R3),EA=(R7),ECB=0  Freeze responce buffer\n         LRA   R3,2(R3)                Set responce buffer\nDIAG8    EQU   *\n         LRA   R2,2(R2)                Command pointer\n         DC    X'83240008'             DIAG R2,R4,8\n         ST    R4,RETCODE              Return code\n         L     R2,DIAGCMDA             Command pointer\n         L     R6,DIAGCMDE             Command end Pointer\n         PGFREE R,A=(R2),EA=(R6)       Free command buffer\n         TM    DIAGFLAG,DIAGRESP       Responce requested?\n         BZ    MODEPROB                Don't set length if so\n         L     R3,DIAGBUFA             Buffer pointer\n         STH   R5,0(R3)                Set length of responce\n         L     R7,DIAGBUFE             Buffer end pointer\n         PGFREE R,A=(R3),EA=(R7)       Free responce buffer\nMODEPROB EQU   *\n         MODESET KEY=NZERO,MODE=PROB\nQUIT     EQU   *\n         LR    R1,R13                  Current savearea pointer\n         L     R13,SAVEBPTR            Chain back pointer\n         MVC   SAVEREGS+4,RETCODE-WORKAREA(R1) Return code to saved R15\n         FREEMAIN R,A=(R1),LV=WORKSIZE Free workarea\n         LM    R14,R12,SAVEREGS        Restore registers 0-12,14,15\n         BR    R14                     Back to caller\n         SPACE 1\n*---------------------------------------------------------------------*\n*        Dynamic Storage Area                                         *\n*---------------------------------------------------------------------*\nWORKAREA DSECT\nSAVEAREA DS    0F                      Save area must be first\nSAVEID   DS    F                       Not used\nSAVEBPTR DS    F                       Backward pointer\nSAVEFPTR DS    F                       Forward pointer\nSAVEREGS DS    15F                     Regs 14,15,0-12\nRETCODE  DS    F                       Return code\nERROR1   EQU   101                     - missed command\nERROR2   EQU   102                     - zero length command\nERROR3   EQU   103                     - too long command\nERROR4   EQU   104                     - too many parameters\nDIAGCMDA DS    F                       Command buffer pointer\nDIAGCMDE DS    F                       Command buffer end+1 pointer\nDIAGBUFA DS    F                       Responce buffer pointer\nDIAGBUFE DS    F                       Responce buffer end+1 pointer\nDIAGFLAG DS    C                       Diagnose 8 flag byte:\nDIAGRESP EQU   X'40'                   - get responce\nDIAGRESV EQU   X'BF'                   - not used here\nWORKSIZE EQU   *-WORKAREA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HOSTCMD$": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x04\\x1f\\x01\\x11\\x04\\x1f\\x18B\\x00\\x12\\x00\\x12\\x00\\x00\\xc7\\xc2\\xd3\\xc9\\xe9\\xd5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-02-10T00:00:00", "modifydate": "2011-02-10T18:42:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "GBLIZNS"}, "text": ")IM job\n// SET SOURCE='CENTER.SOURCE'\n// SET LOAD='CENTER.LINKLIB'\n//ASM   EXEC PGM=ASMA90,PARM='NODECK,OBJ'\n//SYSPRINT DD SYSOUT=*\n//SYSUT1 DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT2 DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT3 DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLIN DD DSN=&&OBJ,SPACE=(TRK,(20,10)),DISP=(,PASS),UNIT=SYSDA\n//SYSPUNCH DD DUMMY\n//SYSLIB DD DSN=SYS1.MACLIB,DISP=SHR\n//SYSIN  DD DSN=&SOURCE(HOSTCMD),DISP=SHR\n//LINK   EXEC PGM=IEWL,REGION=2048K,\n//            PARM='LET,NOLIST,NOMAP,AC=1,AMODE=24'\n//SYSPRINT DD SYSOUT=*\n//SYSLMOD  DD DSN=&LOAD(HOSTCMD),DISP=SHR\n//SYSLIN   DD DISP=(OLD,PASS),DSN=&&OBJ\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HOSTCMD#": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x04\\x1f\\x01\\x11\\x04\\x1f\\x18B\\x00\\x04\\x00\\x04\\x00\\x00\\xc7\\xc2\\xd3\\xc9\\xe9\\xd5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-02-10T00:00:00", "modifydate": "2011-02-10T18:42:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "GBLIZNS"}, "text": ")IM job\n//HOSTCMD  EXEC PGM=HOSTCMD,PARM='sh echo hello my dear.'\n//SYSUDUMP DD SYSOUT=*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IKJTSO00": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x04\\x1f\\x01\\x11\\x04\\x1f\\x18B\\x00\\xfb\\x00\\xfb\\x00\\x00\\xc7\\xc2\\xd3\\xc9\\xe9\\xd5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-02-10T00:00:00", "modifydate": "2011-02-10T18:42:00", "lines": 251, "newlines": 251, "modlines": 0, "user": "GBLIZNS"}, "text": "/*******************************************************/\n/* TSO AUTHORIZED COMMANDS                             */\n/*******************************************************/\nAUTHCMD NAMES(                                              +\n   RECEIVE                                                  +\n   TRANSMIT XMIT                                            +\n   LISTB    LISTBC                                          +\n   LISTD    LISTDS                                          +\n   SE       SEND                                            +\n   RACONVRT CONSPROF                                        +\n   SYNC                                                     +\n   TESTAUTH TESTA                                           +\n   PARMLIB  IKJPRMLB                                        +\n/*******************************************************/   +\n/* IDCAMS                                              */   +\n/*******************************************************/   +\n   DEFINE                                                   +\n   DELETE                                                   +\n   IMPORT                                                   +\n/*******************************************************/   +\n/* DLF                                                 */   +\n/*******************************************************/   +\n   COFDMON                                                  +\n/*******************************************************/   +\n/* RACF                                                */   +\n/*******************************************************/   +\n   AD       ADDSD            /*  RACF 5740-XXH      */      +\n   AG       ADDGROUP         /*  RACF 5740-XXH      */      +\n   AU       ADDUSER          /*  RACF 5740-XXH      */      +\n   ALG      ALTGROUP         /*  RACF 5740-XXH      */      +\n   ALD      ALTDSD           /*  RACF 5740-XXH      */      +\n   ALU      ALTUSER          /*  RACF 5740-XXH      */      +\n   BLKUPD                    /*  RACF 5740-XXH      */      +\n   CO       CONNECT          /*  RACF 5740-XXH      */      +\n   DD       DELDSD           /*  RACF 5740-XXH      */      +\n   DG       DELGROUP         /*  RACF 5740-XXH      */      +\n   DU       DELUSER          /*  RACF 5740-XXH      */      +\n   LD       LISTDSD          /*  RACF 5740-XXH      */      +\n   LG       LISTGRP          /*  RACF 5740-XXH      */      +\n   LU       LISTUSER         /*  RACF 5740-XXH      */      +\n   RALT     RALTER           /*  RACF 5740-XXH      */      +\n            RACLINK          /*  RACF 5695-039  @D2A*/      +\n   RDEF     RDEFINE          /*  RACF 5740-XXH      */      +\n   RDEL     RDELETE          /*  RACF 5740-XXH      */      +\n   RE       REMOVE           /*  RACF 5740-XXH      */      +\n   RL       RLIST            /*  RACF 5740-XXH      */      +\n   RVARY                     /*  RACF 5740-XXH      */      +\n   PW       PASSWORD         /*  RACF 5740-XXH      */      +\n   PE       PERMIT           /*  RACF 5740-XXH      */      +\n   SETR     SETROPTS         /*  RACF 5740-XXH      */      +\n   SR       SEARCH           /*  RACF 5740-XXH      */      +\n   IRRDPI00                  /*  RACF 5740-XXH      */      +\n/*******************************************************/   +\n/* OPC/ESA AUTHORIZED COMMANDS                         */   +\n/*******************************************************/   +\n   BACKUP                                                   +\n   OPINFO                                                   +\n   OPSTAT                                                   +\n   SRSTAT                                                   +\n   WSSTAT                                                   +\n   TSITCP00                                                 +\n/*******************************************************/   +\n/* DFSMSRMM COMMANDS                                   */   +\n/*******************************************************/   +\n   RMM                                                      +\n/*******************************************************/   +\n/* TCPIP AUTHORIZED COMMANDS                           */   +\n/*******************************************************/   +\n   MVPXDISP                                                 +\n   TRACERTE                                                 +\n/*******************************************************/   +\n/* NPMIP AUTHORIZED COMMANDS                           */   +\n/*******************************************************/   +\n   AESCNETS                                                 +\n   AEST044                                                  +\n   AEST049                                                  +\n/*******************************************************/   +\n/* DITTO AUTHORIZED COMMANDS                           */   +\n/*******************************************************/   +\n   DITTO                                                    +\n   DITTOA                                                   +\n/*******************************************************/   +\n/* DASD CACHE AUTHORIZED COMMANDS                      */   +\n/*******************************************************/   +\n   BDATA    BINDDATA                                        +\n   LDATA    LISTDATA                                        +\n   SETC     SETCACHE)\n/*******************************************************/\n/* TSO AUTHORIZED PROGRAMS                             */\n/*******************************************************/\nAUTHPGM NAMES(               /* TSO PROGRAMS           */   +\n   IEBCOPY                   /*                        */   +\n/*******************************************************/   +\n/* ATC                                                 */   +\n/*******************************************************/   +\n   ATGOMCMD                  /* ATC                    */   +\n/*******************************************************/   +\n/* DFS                                                 */   +\n/*******************************************************/   +\n   IOEGRWAG                  /* DFS                    */   +\n   IOENEWAG                  /*                        */   +\n   IOESALVG                  /*                        */   +\n/*******************************************************/   +\n/* TCPIP                                               */   +\n/*******************************************************/   +\n   MVPXDISP                  /* TCPIP                  */   +\n/*******************************************************/   +\n/* ICSF                                                */   +\n/*******************************************************/   +\n   CSFDAUTH                  /* ICSF                   */   +\n/*******************************************************/   +\n/* FIREWALL TECHNOLOGIES                               */   +\n/*******************************************************/   +\n   ICADCT                    /*  FIREWALL              */   +\n   ICADDCT                   /*                        */   +\n   ICADFLOG                  /*                        */   +\n   ICADFTPS                  /*                        */   +\n   ICADPFTP                  /*                        */   +\n   ICADSLOG                  /*                        */   +\n   ICADSOCK                  /*                        */   +\n   ICADTNAT                  /*                        */   +\n/*******************************************************/   +\n/* TPNS                                                */   +\n/*******************************************************/   +\n   ITPENTER                  /* TPNS                   */   +\n/*******************************************************/   +\n/* DFSMSRMM                                            */   +\n/*******************************************************/   +\n   EDGHSKP                   /*  DFSMSRMM              */   +\n   EDGUTIL                   /*                        */   +\n   EDGRPTD                   /*                        */   +\n   EDGAUD                    /*                        */   +\n/*******************************************************/   +\n/* RACF                                                */   +\n/*******************************************************/   +\n   IRRUT100                  /*  RACF 5740-XXH      */      +\n   IRRUT200                  /*  RACF 5740-XXH      */      +\n   IRRUT400                  /*  RACF 5740-XXH      */      +\n   IRRDSC00                  /*  RACF 5740-XXH      */      +\n   ICHDSM00                  /*  RACF 5740-XXH      */      +\n   IRRDPI00    )             /*  RACF 5740-XXH      */\n/*******************************************************/\n/* COMMANDS NOT AUTHORIZED IN BACKGROUND               */\n/*******************************************************/\nNOTBKGND NAMES(              /* CMDS WHICH CAN NOT     */   +\n   OPER     OPERATOR         /* BE ISSUED IN BKGRD.    */   +\n   TERM     TERMINAL)        /*                        */\n/*******************************************************/\n/* COMMANDS AUTHORIZED IN TSO SERVICE FACILITY         */\n/*******************************************************/\nAUTHTSF NAMES(               /* CMDS AUTHORIZED WHEN   */   +\n   IEBCOPY                   /* CALLED THROUGH THE     */   +\n   ICQASLI0                  /* TSO SERVICE FACILITY   */   +\n   IKJEFF76                  /*                        */   +\n/*******************************************************/   +\n/* TPNS                                                */   +\n/*******************************************************/   +\n   ITPENTER                  /* TPNS                   */   +\n/*******************************************************/   +\n/* OPC/ESA                                             */   +\n/*******************************************************/   +\n   EQQMINOR                  /* OPC/ESA                */   +\n/*******************************************************/   +\n/* DFRMM                                               */   +\n/*******************************************************/   +\n   EDGHSKP                   /* DFSMSRMM               */   +\n   EDGUTIL                   /* DFSMSRMM               */   +\n   EDGRPTD                   /* DFSMSRMM               */   +\n   EDGAUD                    /* DFSMSRMM               */   +\n/*******************************************************/   +\n/* ICSF                                                */   +\n/*******************************************************/   +\n   CSFDAUTH                  /*  ICSF               */      +\n/*******************************************************/   +\n/* CLEANUP                                             */   +\n/*******************************************************/   +\n   CLUPGLOC                  /*  CLEANUP            */      +\n   CLUPGTPR                  /*  CLEANUP            */      +\n   CLUPMLAS                  /*  CLEANUP            */      +\n   CLUPVTPD                  /*  CLEANUP            */      +\n   IEBCOPY                   /*  CLEANUP            */      +\n/*******************************************************/   +\n/* HOME                                                */   +\n/*******************************************************/   +\n   HOSTCMD                   /*  REXX FUNCTION      */      +\n   SYSCMD )                  /*  REXX FUNCTION      */\n/*******************************************************/\n/* TSO SYSTEM DEFAULTS                                 */\n/*******************************************************/\nSEND                         /* SEND COMMAND DEFLTS    */   +\n   OPERSEND(ON)              /*                        */   +\n   USERSEND(ON)              /*                        */   +\n   SAVE(ON)                  /*                        */   +\n   CHKBROD(ON)               /*                        */   +\n   USEBROD(OFF)              /*                        */   +\n   MSGPROTECT(OFF)           /*                        */   +\n   LOGNAME(SYS1.BRODCAST)    /*                        */   +\n   SYSPLEXSHR(OFF)           /*                        */\nALLOCATE                     /* ALLOCATE COMMAND DEF   */   +\n   DEFAULT(OLD)              /*                        */\nCONSOLE INITUNUM(1000)       /*      CONSOLE COMMAND   */   +\n        INITSNUM(1000)       /*                        */   +\n        MAXUNUM(10000)       /*                        */   +\n        MAXSNUM(10000)       /*                        */\nHELP    ENU(SYS1.HELP)       /* HELP COMMAND DEFAULT   */\n/*******************************************************/\n/* TRANSMITT/RECEIVE DEFAULTS                          */\n/*******************************************************/\nTRANSREC NODESMF((*,*))           /* TRANSMIT/RECEIV   */   +\n         CIPHER(YES)              /*                   */   +\n         SPOOLCL(B)               /*                   */   +\n         OUTWARN(75000,75000)     /*                   */   +\n         OUTLIM(1000000)          /*                   */   +\n         VIO(SYSDA)               /*                   */   +\n         LOGSEL(LOG)              /*                   */   +\n         LOGNAME(MISC)            /*                   */   +\n         DAPREFIX(TUPREFIX)       /*                   */   +\n         USRCTL(NAMES.TEXT)       /*                   */   +\n         SYSOUT(*)                /*                   */\n/*******************************************************/\n/* COMMANDS INVOKED VIA TSO COMMANDS INVOCAT PLATFORM  */\n/*******************************************************/\nPLATCMD NAMES(                    /* COMMANDS INVOKED  */   +\n                                  /* VIA THE TSO COMMA */   +\n                                  /* INVOCATION PLATFO */   +\n                                  /* (COMMANDS IN THIS */   +\n                                  /*  LIST MUST NOT REI*/   +\n                                  /*  TASK TERMINATION */   +\n                                  /*  CLEANUP PROCESSI)*/   +\n   ALLOCATE ALLOC                 /*                   */   +\n   ALTLIB            IKJADLIB     /*                   */   +\n   ATTRIB   ATTR                  /*                   */   +\n   CALL              IKJEFG00     /*                   */   +\n   EXEC     EX       IKJEXC2      /*                   */   +\n   FREE     UNALLOC               /*                   */   +\n   PRINTDS  PR       IKJEFY50     /*                   */   +\n   PROFILE  PROF                  /*                   */   +\n   SUBMIT   SUB                   /*                   */   +\n   STATUS   ST       IKJEFFCA     /*                   */   +\n   LISTBC   LISTB                 /*  AUTHORIZED COMMAN*/   +\n   PARMLIB  IKJPRMLB              /* (THESE COMMANDS MU*/   +\n   RECEIVE                        /* BE LISTED IN AUTHC*/   +\n   SEND     SE                    /* STATEMENT IKJEFTE0*/   +\n   TRANSMIT XMIT                  /* TABLE)            */   +\n   SYNC                           /*                   */   +\n   RACONVRT                       /*                   */   +\n   CONSPROF)                      /*                   */\n/*******************************************************/\n/* PROGRAMS INVOKED VIA TSO COMMANDS INVOCAT PLATFORM  */\n/*******************************************************/\nPLATPGM NONE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RUNAUTH": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x04\\x1f\\x01\\x11\\x04\\x1f\\x18B\\x00\\xd0\\x00\\xd0\\x00\\x00\\xc7\\xc2\\xd3\\xc9\\xe9\\xd5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-02-10T00:00:00", "modifydate": "2011-02-10T18:42:00", "lines": 208, "newlines": 208, "modlines": 0, "user": "GBLIZNS"}, "text": "*---------------------------------------------------------------------*\n*                                                                     *\n* Function:                                                           *\n*        Call authorised program from unauthorised TSO environment    *\n*                                                                     *\n* Syntax:                                                             *\n*        RUNAUTH program parameters                                   *\n*                                                                     *\n* Usage notes:                                                        *\n*        This program should be invoked under TSO monitor program     *\n*        IKJEFT01 (IKJEFT1B) using standard MVS linkage conventions   *\n*        via LINKMVS services. The program name (1st parameter) is    *\n*        mandatory, Up to 4 parameters may be specified for the       *\n*        calling program (IKJEFTSR service restriction). End of       *\n*        parameter list (high-order bit) should be set properly.      *\n*        So, if the program receives the parameter list as shown      *\n*        below                                                        *\n*        +--------+     +--------+        +----+--------------+       *\n*        |   R1   |---->|   P1   |------->| Lp | program name |       *\n*        +--------+     +--------+        +----+--------------+       *\n*                       |   P2   |-----+                              *\n*                       +--------+     |  +----+-------------+        *\n*                       |   P3   |---+ +->| La | parameter A |        *\n*                       +--------+   |    +----+-------------+        *\n*                       |   P4   |-+ |                                *\n*                       +--------+ | |    +----+-------------+        *\n*                                  | +--->| Lb | parameter B |        *\n*                                  |      +----+-------------+        *\n*                                  |                                  *\n*                                  |      +----+-------------+        *\n*                                  +----->| Lc | parameter C |        *\n*                                         +----+-------------+        *\n*                                                                     *\n*        called program being received the following:                 *\n*        +--------+     +--------+        +----+-------------+        *\n*        |   R1   |---->|   P1   |------->| La | parameter A |        *\n*        +--------+     +--------+        +----+-------------+        *\n*                       |   P2   |-----+                              *\n*                       +--------+     |  +----+-------------+        *\n*                       |   P3   |---+ +->| Lb | parameter B |        *\n*                       +--------+   |    +----+-------------+        *\n*                                    |                                *\n*                                    |    +----+-------------+        *\n*                                    +--->| Lc | parameter C |        *\n*                                         +----+-------------+        *\n*        See also delivered example (runauth.run).                    *\n*                                                                     *\n* Installation:                                                       *\n*        - Copy delivered program source (runauth.asm) to any source  *\n*          library;                                                   *\n*        - Use delivered job skeleton (runauth.make) to assembly and  *\n*          link-edit a load module. Update this job skeleton to pro-  *\n*          vide valid JOB card, actual source library and desired     *\n*          load libarary - change SET statements as required;         *\n*        - The RUNAUTH load module can be placed in any library and   *\n*          not need to be authorized;                                 *\n*        - Called program should reside in any APF-authorised libra-  *\n*          ry; This library must be included in LNKLSTnn concatena-   *\n*          tion. Called program also should be listed in the section  *\n*          AUTHTSF of IKJTSOnn PARMLIB member.                        *\n*        - Don't forget to refresh LLA (F LLA,REFRESH) if necessary;  *\n*        - Note: any authorized program added to the system potenti-  *\n*          ally can be a security hole...                             *\n*                                                                     *\n* Return codes:                                                       *\n*          201 - missed command (specified length is zero)            *\n*          202 - too long command (length greater than 8)             *\n*          203 - too many parameters (up to 4 parameters allowed)     *\n*          Otherwise return code of called program returned           *\n*                                                                     *\n* (C) 2006 Gregory Bliznets gbliznets@iba.by, based on idea and code  *\n*        described in the article \"Removing user-written authoriza-   *\n*        tion SVC\" written by Adrian Cole                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         PRINT NOGEN\nRUNAUTH  CSECT\nRUNAUTH  AMODE 24\n         USING RUNAUTH,R12             Establish addressability\n         USING WORKAREA,R13            Workarea addressability\n         STM   R14,R12,SAVEREGS        Save registers 14,15,0-12\n         LR    R12,R15                 Load base register\n         STORAGE OBTAIN,LENGTH=WORKSIZE Get workarea\n         ST    R1,SAVEFPTR-SAVEAREA(,R13) Chain forward\n         ST    R13,SAVEBPTR-SAVEAREA(,R1) Chain backward\n         LR    R13,R1                  Set new save area\n         XC    SAVEFPTR,SAVEFPTR       Last save area in chain\n         MVC   SAVEID,=C'AUTH'         Eyecatcher\n         XC    RETCODE,RETCODE         Clear return code\n         XC    RSNCODE,RSNCODE         Clear reason code\n         XC    ABNCODE,ABNCODE         Clear abend code\n         XC    TSFLAG,TSFLAG           Clear IKJEFTSR flags\n         MVI   TSFLAG4,X'02'           Program being called\n         XC    PARMPTR(PARMSIZE),PARMPTR Clear plist area\n         LA    R15,PARMPTR+4\n         ST    R15,PARMPTR             Initialize called program plist\n         OI    PARMPTR,X'80'\n         LA    R15,TSFLAG              Initialize IKJEFTSR plist:\n         ST    R15,TSPARM1             1st - pointer to IKJEFTSR flags\n         LA    R15,CMDLEN\n         ST    R15,TSPARM3             3th - program name length\n         LA    R15,RETCODE\n         ST    R15,TSPARM4             4th - program return code\n         LA    R15,RSNCODE\n         ST    R15,TSPARM5             5th - program reason code\n         LA    R15,ABNCODE\n         ST    R15,TSPARM6             6th - program abend code\n         LA    R15,PARMPTR\n         ST    R15,TSPARM7             7th - parms of called program\n         OI    TSPARM7,X'80'           Set end of IKJEFTSR plist\n         L     R1,SAVEBPTR             Caller's save area\n         LM    R0,R1,SAVEREGS-SAVEAREA+8(R1) Original R0, R1\n         L     R2,0(,R1)               Save command pointer\n         LH    R3,0(,R2)               Length of command\n         MVI   RETCODE+3,ERROR1        Error code if length is 0\n         LTR   R2,R2                   Missed command?\n         BZ    QUIT                    Error if so\n         MVI   RETCODE+3,ERROR2        Error code if length > 8\n         C     R3,=F'8'                Too long command?\n         BH    QUIT                    Error if so\n         ST    R3,CMDLEN               Store length of command\n         XR    R3,R3                   For LA (AMODE=24)\n         LA    R3,2(R2)                Address of the command\n         ST    R3,TSPARM2              Store command pointer\n         LTR   R2,R2                   Command only, no parms?\n         BM    CALLTSR                 Fine, invoke IKJEFTSR\n         LA    R1,4(R1)                Next pointer\n         XR    R3,R3                   plist offset\n         LA    R5,PARMSIZE             plist size\nPLIST    EQU   *\n         L     R2,0(R3,R1)             n-th pointer\n         ST    R2,PARMPTR(R3)          Store to plist\n         LTR   R2,R2                   End of plist?\n         BM    CALLTSR                 Fine, invoke IKJEFTSR\n         LA    R3,4(R3)                Offset to next pointer\n         MVI   RETCODE+3,ERROR3        Error code if too many parms\n         CR    R3,R5                   Too many pointers?\n         BH    QUIT                    Error if so\n         B     PLIST                   Iterate\nCALLTSR  EQU   *\n         LA    R1,TSPARM1              IKJEFTSR parameter list\n         L     R15,FLCCVT-PSA(,R0)     CVT pointer\n         L     R15,CVTTVT-CVT(,R15)    TSVT pointer\n         L     R15,TSVTASF-TSVT(,R15)  TSO service facility pointer\n         BALR  R14,R15                 Call IKJEFTSR\nQUIT     EQU   *\n         LR    R1,R13                  Work area pointer\n         L     R13,SAVEBPTR            Chain back pointer\n         MVC   SAVEREGS+4-WORKAREA(4,R13),RETCODE-WORKAREA(R1)\n         STORAGE RELEASE,ADDR=(R1),LENGTH=WORKSIZE\n         LM    R14,R12,SAVEREGS        Restore registers 0-12,14,15\n         BR    R14                     Back to caller (IKJEFT01)\n         SPACE 1\n*---------------------------------------------------------------------*\n*        Dynamic Storage Area                                         *\n*---------------------------------------------------------------------*\nWORKAREA DSECT\nSAVEAREA DS    0F                      Save area must be first\nSAVEID   DS    F                       Not used\nSAVEBPTR DS    F                       Backward pointer\nSAVEFPTR DS    F                       Forward pointer\nSAVEREGS DS    15F                     Regs 14,15,0-12\nTSFLAG   DS    0F                      IKJEFTSR flags (4 bytes):\nTSFLAG1  DC    X'0'                    - always zero\nTSFLAG2  DC    X'0'                    - TSV invoke authorized\nTSFLAG3  DC    X'0'                    - No dump required\nTSFLAG4  DC    X'2'                    - Invoked as a program\nRETCODE  DC    F'0'                    return code of function invoked\nERROR1   EQU   201                     - missed command\nERROR2   EQU   202                     - too long command\nERROR3   EQU   203                     - too many parms passed\nRSNCODE  DC    F'0'                    reason code of function invoked\nABNCODE  DC    F'0'                    abend code of function invoked\nCMDLEN   DS    F'0'                    length of command name\nTSPARM   DS    0F\nTSPARM1  DC    A(TSFLAG)               pointer to IKJEFTSR flags\nTSPARM2  DC    A(0)                    pointer to program name\nTSPARM3  DC    A(CMDLEN)               pointer to length of name above\nTSPARM4  DC    A(RETCODE)              pointer to return code\nTSPARM5  DC    A(RSNCODE)              pointer to reason code\nTSPARM6  DC    A(ABNCODE)              pointer to abend code\nTSPARM7  DC    A(PARMPTR)              pointer to program parms pointer\nPARMPTR  DC    4A(0)                   up to 4 pointers for program\nPARMSIZE EQU   *-PARMPTR               size of program pointers\nWORKSIZE EQU   *-WORKAREA\n*---------------------------------------------------------------------*\n*        Macros                                                       *\n*---------------------------------------------------------------------*\n         IHAPSA\n         CVT   DSECT=YES\n         IKJTSVT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RUNAUTH$": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x04\\x1f\\x01\\x11\\x04\\x1f\\x18B\\x00\\x12\\x00\\x12\\x00\\x00\\xc7\\xc2\\xd3\\xc9\\xe9\\xd5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-02-10T00:00:00", "modifydate": "2011-02-10T18:42:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "GBLIZNS"}, "text": ")IM job\n// SET SOURCE='CENTER.SOURCE'\n// SET LOAD='CENTER.LINKLIB'\n//ASM   EXEC PGM=ASMA90,PARM='NODECK,OBJ'\n//SYSPRINT DD SYSOUT=*\n//SYSUT1 DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT2 DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT3 DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLIN DD DSN=&&OBJ,SPACE=(TRK,(20,10)),DISP=(,PASS),UNIT=SYSDA\n//SYSPUNCH DD DUMMY\n//SYSLIB DD DSN=SYS1.MACLIB,DISP=SHR\n//       DD DSN=SYS1.MODGEN,DISP=SHR\n//SYSIN  DD DSN=&SOURCE(RUNAUTH),DISP=SHR\n//LINK   EXEC PGM=IEWL,REGION=2048K,PARM='LET,NOLIST,NOMAP'\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD DISP=(OLD,PASS),DSN=&&OBJ\n//SYSLMOD  DD DSN=&LOAD(RUNAUTH),DISP=SHR\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RUNAUTH#": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x04\\x1f\\x01\\x11\\x04\\x1f\\x18B\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc7\\xc2\\xd3\\xc9\\xe9\\xd5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-02-10T00:00:00", "modifydate": "2011-02-10T18:42:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "GBLIZNS"}, "text": ")IM job\n// SET LOAD='CENTER.LINKLIB'\n// SET CLIST='CENTER.CLIST'\n//TSO      EXEC PGM=IKJEFT01\n//STEPLIB  DD  DSN=&LOAD,DISP=SHR\n//SYSPROC  DD  DSN=&CLIST,DISP=SHR\n//SYSUDUMP DD  SYSOUT=*\n//SYSTSPRT DD  SYSOUT=*\n//SYSTSIN  DD  *\n  %RUNAUTH HOSTCMD sh echo Congratulations\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RUNAUTH@": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x04\\x1f\\x01\\x11\\x04\\x1f\\x18B\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc7\\xc2\\xd3\\xc9\\xe9\\xd5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-02-10T00:00:00", "modifydate": "2011-02-10T18:42:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "GBLIZNS"}, "text": "/* TSO REXX */\n/*\nFunction: an example of usage HOSTCMD to run Hercules command,\n          get the result, parse it and display.\n\nSyntax:\n          RUNAUTH program parameters\n\n(C) 2006 Gregory Bliznets gbliznets@iba.by\n\n*/\ntrace off\nparse arg cmd parms\nsay 'Command: 'cmd\nsay 'Parameters: 'parms\nresponce = copies('00'x, 1024)\naddress LINKMVS 'RUNAUTH' 'CMD PARMS RESPONCE'\nsay 'Return code 'rc\nsay 'Responce length:' length(responce)\nLF = '25'x\nif rc = 0\nthen do while responce \\= ''\n   parse var responce line (LF) responce\n   say line\n   end\nexit rc\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SYSCMD": {"ttr": 782, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x04\\x1f\\x01\\x11\\x04\\x1f\\x18B\\x00~\\x00~\\x00\\x00\\xc7\\xc2\\xd3\\xc9\\xe9\\xd5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-02-10T00:00:00", "modifydate": "2011-02-10T18:42:00", "lines": 126, "newlines": 126, "modlines": 0, "user": "GBLIZNS"}, "text": "*---------------------------------------------------------------------*\n*                                                                     *\n* Function:                                                           *\n*        Execute an MVS console command passed as a parameter         *\n*                                                                     *\n* Syntax:                                                             *\n*        // EXEC PGM=SYSCMD,PARM='command'                            *\n*                                                                     *\n*        from REXX running under TSO session (see usage note below):  *\n*        CMD = 'd a,all'                                              *\n*        PGM = 'SYSCMD'                                               *\n*        address LINKMVS RUNAUTH 'PGM CMD'                            *\n*                                                                     *\n* Usage notes:                                                        *\n*        - This program requires APF autorization;                    *\n*        - Program accept one mandatory parameter                     *\n*          +--------+     +--------+     +----+---------+             *\n*          |   R1   |---->|   P1   |---->| L1 | command |             *\n*          +--------+     +--------+     +----+---------+             *\n*        - If responce buffer provided, responce of the host command  *\n*          returned to caller.                                        *\n*        - This program cannot be invoked from TSO session directly,  *\n*          via call like \"address LINKMVS 'SYSCMD CMD'\" due to        *\n*          missed authorization, abend 047 will be result.            *\n*          To invoke HOSTCMD from TSO session program RUNAUTH may be  *\n*          used. Please see RUNAUTH description for details.          *\n*       -  To run SYSCMD via RUNAUTH program library where SYSCMD     *\n*          resides must be included in LNKLSTnn concatenation; name   *\n*          of the program should be listed in the section AUTHTSF of  *\n*          IKJTSOnn PARMLIB member.                                   *\n*        - In many cases TSO CONSOLE service can be used instead      *\n*          of this program;                                           *\n*                                                                     *\n* Installation:                                                       *\n*        - Copy delivered program source (SYSCMD.asm) to any source   *\n*          library;                                                   *\n*        - Use delivered job skeleton (SYSCMD.make) to assembly and   *\n*          link-edit a load module. Update this job skeleton to pro-  *\n*          vide valid JOB card, actual source library and desired     *\n*          load library - change SET statements as required;          *\n*        - The SYSCMD load module must reside on APF-authorised       *\n*          library;                                                   *\n*        - Don't forget to refresh LLA (F LLA,REFRESH) if necessary;  *\n*        - Note: any authorized program added to the system potenti-  *\n*          ally can be a security hole...                             *\n*                                                                     *\n* Return codes:                                                       *\n*        0   - MVS command launched                                   *\n*        102 - missed command (specified length is zero)              *\n*        103 - too long command (length greater than 126)             *\n*                                                                     *\n* (C) 2006 Gregory Bliznets gbliznets@iba.by                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         PRINT NOGEN\nSYSCMD   CSECT\n         USING SYSCMD,R12              Establish addressability\n         USING WORKAREA,R13            Workarea addressability\n         STM   R14,R12,SAVEREGS        Save registers 14,15,0-12\n         LR    R12,R15                 Load base register\n         L     R2,0(,R1)               Save parm pointer\n         STORAGE OBTAIN,LENGTH=WORKSIZE Get workarea\n         ST    R1,SAVEFPTR-SAVEAREA(,R13) Chain forward\n         ST    R13,SAVEBPTR-SAVEAREA(,R1) Chain backward\n         LR    R13,R1                  Set new savearea\n         MVC   SAVEFPTR,=F'0'          Last area in chain\n         XC    RETCODE,RETCODE         Clear error code\n         MVI   RETCODE+3,ERROR2        Set error code if no parms\n         LH    R3,0(,R2)               Length of parm\n         LTR   R3,R3                   Missed parm?\n         BZ    QUIT                    Error if so\n         MVI   RETCODE+3,ERROR3        Set error code if too long\n         C     R3,=F'126'              Too long?\n         BH    QUIT                    Error if so\n         BCTR  R3,0\n         MVC   COMMAND+4(*-*),2(R2)    Executed move\n         EX    R3,*-6                  Move command\n         MVC   COMMAND(4),=F'0'\n         LA    R3,5(R3)                +1 for BCTR +4 for prefix\n         STH   R3,COMMAND\n         MODESET KEY=ZERO,MODE=SUP\n         LA    R1,COMMAND              SVC 34 parameter list\n         XR    R0,R0\n         SVC   34                      Run MVS command\n         MVC   RETCODE,=F'0'           SVC 35 didn't set rc properly\n         MODESET KEY=NZERO,MODE=PROB\nQUIT     EQU   *\n         LR    R1,R13                  Current savearea pointer\n         L     R13,SAVEBPTR            Chain back pointer\n         MVC   SAVEREGS+4,RETCODE-WORKAREA(R1) Return code to saved R15\n         STORAGE RELEASE,ADDR=(R1),LENGTH=WORKSIZE\n         LM    R14,R12,SAVEREGS        Restore registers 0-12,14,15\n         BR    R14                     Back to caller\n         SPACE 1\n*---------------------------------------------------------------------*\n*        Work area                                                    *\n*---------------------------------------------------------------------*\nWORKAREA DSECT\nSAVEAREA DS    0F                      Save area must be first\nSAVEID   DS    F                       Not used\nSAVEBPTR DS    F                       Backward pointer\nSAVEFPTR DS    F                       Forward pointer\nSAVEREGS DS    15F                     Regs 14,15,0-12\nRETCODE  DS    F                       Return code\nCOMMAND  DS    F\n         DC    CL126' '\nWORKSIZE EQU   *-WORKAREA\nERROR2   EQU   102                     - zero length command\nERROR3   EQU   103                     - too long command\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SYSCMD$": {"ttr": 785, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x04\\x1f\\x01\\x11\\x04\\x1f\\x18B\\x00\\x11\\x00\\x11\\x00\\x00\\xc7\\xc2\\xd3\\xc9\\xe9\\xd5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-02-10T00:00:00", "modifydate": "2011-02-10T18:42:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "GBLIZNS"}, "text": ")IM job\n// SET SOURCE='CENTER.SOURCE'\n// SET LOAD='CENTER.LINKLIB'\n//ASM   EXEC PGM=ASMA90,PARM='NODECK,OBJ'\n//SYSPRINT DD SYSOUT=*\n//SYSUT1 DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT2 DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT3 DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLIN DD DSN=&&OBJ,SPACE=(TRK,(20,10)),DISP=(,PASS),UNIT=SYSDA\n//SYSPUNCH DD DUMMY\n//SYSLIB DD DSN=SYS1.MACLIB,DISP=SHR\n//SYSIN  DD DSN=&SOURCE(SYSCMD),DISP=SHR\n//LINK   EXEC PGM=IEWL,REGION=2048K,PARM='LET,NOLIST,NOMAP,AC=1'\n//SYSPRINT DD SYSOUT=*\n//SYSLMOD  DD DSN=&LOAD(SYSCMD),DISP=SHR\n//SYSLIN   DD DISP=(OLD,PASS),DSN=&&OBJ\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SYSCMD#": {"ttr": 787, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x04\\x1f\\x01\\x11\\x04\\x1f\\x18B\\x00\\x03\\x00\\x03\\x00\\x00\\xc7\\xc2\\xd3\\xc9\\xe9\\xd5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-02-10T00:00:00", "modifydate": "2011-02-10T18:42:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "GBLIZNS"}, "text": ")IM job\n//SYSCMD EXEC PGM=SYSCMD,PARM='D A'\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT845/FILE845.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT845", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}