{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011158000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 5173168, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 17, "INMDSNAM": "CBT.V500.FILE077.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 5173168, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 5173168, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE077.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00P\\x11'", "DS1TRBAL": "b'\\x012'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00|\\x00\\x06\\x00\\x81\\x00\\x0b\\x00Q'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/ D\\x01\\x96\\x01\\x96\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T20:44:00", "lines": 406, "newlines": 406, "modlines": 0, "user": "SYZYGY"}, "text": "*)F       THE $ COMMAND CAN BE USED IN PLACE OF THE CALL COMMAND        00001\n*         FOR PROGRAMS THAT ARE IN THE 'SYS1.LINKLIB' DATA SETS;        00002\n*         THIS INCLUDES ALL COMPILERS AND UTILITIES AS WELL AS          00003\n*         SPNB PROGRAMS SUCH AS MRCLEAN AND LISTPDS#.                   00004\n*                                                                       00005\n*         ADVANTAGES OF THE $ COMMAND OVER CALL:                        00006\n*         1) THE $ COMMAND REQUIRES NO DYNAMIC DD CARD NOR              00007\n*            ALLOCATION AND IS, THEREFORE, CONSIDERABLY FASTER;         00008\n*         2) THE $ COMMAND SIMPLIFIES SYNTAX AND REQUIRES LESS TYPING;  00009\n*         3) THE $ COMMAND ALLOWS USE OF PROGRAMS IN ANY OF THE LINKLIB 00010\n*            DATA SETS, WITHOUT KNOWING WHICH OF THE DATA SETS THE      00011\n*            PROGRAM IS IN.                                             00012\n*         DISADVANTAGES OF THE $ COMMAND:                               00013\n*         THE ONLY DISADVANTAGE OF THE $ COMMAND IS THAT THE PROGRAM    00014\n*         BEING CALLED MUST BE IN A LINKLIST DATA SET OR IN HIS STEPLIB 00015\n*         TO CALL A USER'S PROGRAM FROM HIS LIBRARY, THE CALL COMMAND   00016\n*         MUST STILL BE USED.                                           00017\n*)X       THE SYNTAX OF THE $ COMMAND IS AS FOLLOWS:                    00018\n*         $ PROGRAM 'PARM'                                              00019\n*         WHERE PROGRAM IS THE NAME OF THE PROGRAM TO BE EXECUTED AND   00020\n*         'PARM' IS AN OPTIONAL PARM FIELD OF UP TO 100 CHARACTERS      00021\n*         WHICH IS TO BE PASSED TO THE PROGRAM.                         00022\n*)O       THE OPERANDS OF THE $ COMMAND ARE:                            00023\n*         PROGRAM - THE 1 TO 8 CHARACTER NAME OF THE PROGRAM TO BE      00024\n*                   EXECUTED.                                           00025\n*         'PARM'  - THE OPTIONAL 0 TO 100 CHARACTER STRING, ENCLOSED IN 00026\n*                   QUOTES, REPRESENTING THE PARAMETER TO BE PASSED TO  00027\n*                   THE PROGRAM.                                        00028\n*                                                                       00029\n*         EXAMPLE - INVOKING MRCLEAN FOR VOLS PUBDA1 AND TSODA1         00030\n*         $ MRCLEAN 'PUBDA1,TSODA1'                                     00031\n*                                                                       00032\n*         EXAMPLE - INVOKING ASSEMBLER F WITH PARMS OF TEST AND RENT    00033\n*         $ IEUASM 'TEST,RENT'                                          00034\n         MACRO                                                          00035\n         TSWORK                                                         00036\nDOUBLE   DC    D'0'                     FOR CONVERSIONS                 00037\nATTLIST  ATTACH DE=0,SF=L               PHONEY ATTACH LIST              00038\nATTLISTL EQU   *-ATTLIST                LENGTH                          00039\nATTTCB   DC    A(0)                     TCB ADDRESS                     00040\nATTECB   DC    F'0'                     ECB ADDRESS                     00041\nSTAECMP  DC    F'0'                     CMP FOR STAI                    00042\nBLDL     DC    2H'0',CL58' '            BLDL LIST                       00043\nPARM     DC    H'0',CL100' '            PARM FIELD                      00044\nPARMPTR  DC    A(0)                     POINTER TO PARM                 00045\n         DC    3A(0)                    FAKE REST OF CPPL               00046\n         DS    0D           SPACE TO GROW......                         00047\n         MEND                                                           00048\n         PRINT OFF                 MACRO DEFINITIONS FOLLOW             00049\n         MACRO                                                          00050\n         USNGX  &ADDR,&REG                                              00051\n         GBLC  &REGADDR(16),&REGREG(16)                                 00052\n         LCLA  &LOOP                                                    00053\n&LOOP    SETA  1                                                        00054\n         USING &ADDR,&REG                                               00055\n.FIND    AIF   ('&REGADDR(&LOOP)' EQ '').GOT                            00056\n&LOOP    SETA  &LOOP+1                                                  00057\n         AIF   (&LOOP LE 16).FIND                                       00058\n         MNOTE *,'REGISTER TABLE OVERFLOW'                              00059\n         MEXIT                                                          00060\n.GOT     ANOP                                                           00061\n&REGADDR(&LOOP) SETC '&ADDR'                                            00062\n&REGREG(&LOOP) SETC '&REG'                                              00063\n         MEND                                                           00064\n         MACRO                                                          00065\n         DROPX &REG                                                     00066\n         GBLC  &REGADDR(16),&REGREG(16)                                 00067\n         LCLA  &LOOP                                                    00068\n&LOOP    SETA  1                                                        00069\n         AIF   (T'&REG EQ 'O').ALLDROP                                  00070\n         DROP  &REG                                                     00071\n.FIND    AIF   ('&REGREG(&LOOP)' EQ '&REG').GOTIT                       00072\n&LOOP    SETA  &LOOP+1                                                  00073\n         AIF   (&LOOP LE 16).FIND                                       00074\n         MNOTE 8,'REGISTER &REG WAS NOT AN OPERAND ON A USNGX '         00075\n         MEXIT                                                          00076\n.GOTIT   ANOP                                                           00077\n&REGADDR(&LOOP) SETC ''                                                 00078\n&REGREG(&LOOP) SETC ''                                                  00079\n         MEXIT                                                          00080\n.ALLDROP AIF   ('&REGREG(&LOOP)'  EQ '').SKIP                           00081\n         DROP  &REGREG(&LOOP)                                           00082\n&REGADDR(&LOOP) SETC ''                                                 00083\n&REGREG(&LOOP) SETC ''                                                  00084\n.SKIP    ANOP                                                           00085\n&LOOP    SETA  &LOOP+1                                                  00086\n         AIF   (&LOOP                   LE 16).ALLDROP                  00087\n         MEND                                                           00088\n         MACRO                                                          00089\n         INUSE                                                          00090\n         GBLC  &REGADDR(16),&REGREG(16)                                 00091\n         LCLA  &LOOP                                                    00092\n&LOOP    SETA  1                                                        00093\n         SPACE                                                          00094\n         MNOTE *,'THE FOLLOWING REGISTERS ARE IN USE:'                  00095\n.LOOK    AIF   ('&REGADDR(&LOOP)' EQ '').SKIP                           00096\n         MNOTE *,'          &REGADDR(&LOOP),&REGREG(&LOOP)'             00097\n.SKIP    ANOP                                                           00098\n&LOOP    SETA  &LOOP+1                                                  00099\n         AIF   (&LOOP LE 16).LOOK                                       00100\n         MNOTE *,'**********'                                           00101\n         SPACE                                                          00102\n         MEND                                                           00103\n         PRINT ON         END OF INLINE MACROS                          00104\n$CAL     TITLE '$ - TSO CALL FUNCTION FOR LINKLIB MODULES'              00105\n*                                                                       00106\n*        LAST UPDATED 09 MAY 73 - BMD (*BMD*)                           00107\n*                     FIX PARM OF '' AND SHARE                          00108\n*                     SUBPOOL 78 FOR IKJPUTGT                           00109\n*                                                                       00110\n*        MOD A - K TRUE - 29 MAY 80 - REMOVED/CONVERTED TSO MACROS      00111\n*                TO INLINE EXPANTIONS                                   00112\n*                                                                       00113\n         SPACE 2                                                        00114\n*$       TSENTRY  PL=(PARSE),MACRO=YES             FCI                  00115\nTSDSECT  DSECT                                                          00116\nTSAVE    DS    18F                      SAVE AREA                       00117\n    SPACE                                                               00118\n*********************************************************************** 00119\n*    THE COMMAND PROCESSOR PARAMETER LIST (CPPL) IS A LIST OF         * 00120\n*    ADDRESSES PASSED FROM THE TMP TO THE CP VIA REGISTER 1           * 00121\n*********************************************************************** 00122\n    SPACE                                                               00123\nCPPL     DS    0A                                                       00124\nCPPLCBUF DS    A        PTR TO COMMAND BUFFER                           00125\nCPPLUPT  DS    A        PTR TO UPT                                      00126\nCPPLPSCB DS    A        PTR TO PSCB                                     00127\nCPPLECT  DS    A        PTR TO ECT                                      00128\nCPPLL    EQU   *-CPPL                                                   00129\nTSECB    DS    F                        ECB FOR THE TSO SERVICES        00130\n    SPACE                                                               00131\n*********************************************************************** 00132\n*    THE PARSE PARAMETER LIST (PPL) IS A LIST OF ADDRESSES PASSED     * 00133\n*    FROM THE INVOKER TO PARSE VIA REGISTER 1                         * 00134\n*********************************************************************** 00135\n    SPACE                                                               00136\nPPL      DS    0A                                                       00137\nPPLUPT   DS    A        PTR TO UPT                                      00138\nPPLECT   DS    A        PTR TO ECT                                      00139\nPPLECB   DS    A        PTR TO CP'S ECB                                 00140\nPPLPCL   DS    A        PTR TO PCL                                      00141\nPPLANS   DS    A        PTR TO ANS PLACE                                00142\nPPLCBUF  DS    A        PTR TO CMD BUFFER                               00143\nPPLUWA   DS    A        PTR TO USER WORK AREA (FOR VALIDITY CK RTNS)    00144\nPPLL     EQU   *-PPL                                                    00145\nTSPARANS DS    F                        PARSE RETURNS PTR TO PDL HERE   00146\n*********************************************************************** 00147\n*                                                                     * 00148\n*        DYNAMIC STORAGE DEFINED BY USER TSWORK MACRO                 * 00149\n*                                                                     * 00150\n*********************************************************************** 00151\n    SPACE                                                               00152\n         DS    0D                       BEGIN ON DOUBLE WORD BOUNDARY   00153\n         TSWORK                                                         00154\nTSDSECTL DS    0D                                                       00155\n         EJECT                                                          00156\n         SPACE                                                          00157\n*********************************************************************** 00158\n*                                                                     * 00159\n*                   DEFINE SYMBOLIC REGISTERS                         * 00160\n*                                                                     * 00161\n*********************************************************************** 00162\n         SPACE                                                          00163\nR0       EQU   0                        THE SYMBOLIC REGISTERS          00164\nR1       EQU   1                                                        00165\nR2       EQU   2                                                        00166\nR3       EQU   3                                                        00167\nR4       EQU   4                                                        00168\nR5       EQU   5                                                        00169\nR6       EQU   6                                                        00170\nR7       EQU   7                                                        00171\nR8       EQU   8                                                        00172\nR9       EQU   9                                                        00173\nR10      EQU   10                                                       00174\nR11      EQU   11                                                       00175\nR12      EQU   12                                                       00176\nR13      EQU   13                                                       00177\nR14      EQU   14                                                       00178\nR15      EQU   15                                                       00179\n         EJECT                                                          00180\n$        CSECT                                                          00181\n         SAVE  (14,12),,$_&SYSDATE               BRANCH AROUND ID       00182\n         SPACE                                                          00183\n         USNGX $,12                                                     00184\n         LR    12,15                    ESTABLISH ADDRESSABILITY        00185\n         LR    5,1                      SAVE PTR TO CPPL                00186\n         GETMAIN R,LV=TSDSECTL-TSDSECT,SP=1                             00187\n         ST    13,4(1)                  DO SAVE AREA CHAINING           00188\n         ST    1,8(13)                                                  00189\n         LR    13,1                     ESTABLISH ADDRESSABILITY        00190\n         USNGX TSDSECT,13                                               00191\n         MVC   CPPL(CPPLL),0(5)         COPY CPPL TO TS AREA            00192\n         L     1,CPPLUPT                GET PTR TO UPT                  00193\n         L     2,CPPLECT                GET PTR TO ECT                  00194\n         LA    3,TSECB                  GET PTR TO ECB                  00195\n         SR    0,0                      CLEAR ECB                       00196\n         ST    0,TSECB                                                  00197\n         STM   1,3,PPL                  INITIALIZE PPL. UPT,ECT,ECB     00198\n         LA    4,TSPARANS               ADRS OF PARSE ANSWER PLACE      00199\n         ST    4,PPLANS                 POINTER TO ADRS OF PARSE ANSWER 00200\n         ST    13,PPLUWA                PARSE USER WORK AREA POINTER    00201\n         XC    TSPARANS(4),TSPARANS     TO AVOID DUPLICATE IKJRLSA      00202\n         INUSE                                                          00203\n    SPACE                                                               00204\n$        CSECT                                                          00205\n         TITLE '$ - INITIALIZATION CODE'                                00206\n         MVC   BLDL(4),=AL2(1,58)       NUMBER/LEN                      00207\n         XC    TSPARANS(4),TSPARANS     CLEAR ANSWER FIELD              00208\n         XC    TSECB(4),TSECB           AND ECB                         00209\n         MVC   STAECMP(4),TSECB         CLEAR IT THIS WAY               00210\n*TRTPARS TSPARSE  CBUF=(CPPLCBUF,I),PCL=(=V(PCL),I)  INVOKE PARSE       00211\nSTRTPARS L     0,=V(PCL)                                                00212\n         ST    0,PPLPCL                                                 00213\n         L     0,CPPLCBUF                                               00214\n         ST    0,PPLCBUF                                                00215\n         LA    1,PPL                                                    00216\n         LINK  EP=IKJPARS                                               00217\nFINPARS  LTR   R15,R15                  TEST RETURN CODE                00218\n         BZ    ANALYZE                  OK, CONTINUE                    00219\nBADPARSE LA    R0,L'MSG01               LOAD MESSAGE SIZE               00220\n         LA    R1,MSG01                 AND MESSAGE ADDR                00221\n         B     PRELEAVX                 DONE, FORGET IT                 00222\n         TITLE '$ - ANALYZE INPUT'                                      00223\n         USNGX PDL,R11                  TELL ASSEMBLER                  00224\nANALYZE  L     R11,TSPARANS             LOAD ANSWER AREA                00225\n         L     R1,MODNAME               GET MODULE NAME ENTRY           00226\n         TM    MODNAME+6,X'80'          IS IT THERE                     00227\n         BNO   BADPARSE                 NO, STOP HERE                   00228\n         MVC   BLDL+4(8),=8C' '         CLEAR MODULE NAME               00229\n         LH    R15,MODNAME+4            GET LEN                         00230\n         BCTR  R15,0                    -1 FOR EXECUTE                  00231\n         EX    R15,MVCMOD               DO IT                           00232\n         LH    R2,PDLPARM+4             GET LENGTH                      00233\n         L     R3,PDLPARM               GET ADDRESS                     00234\n         CH    R2,=H'100'               CHECK IT                        00235\n         BNH   LENOK                    OK, SO FAR                      00236\n         LA    R1,MSG02                 GET MESSAGE                     00237\n         LA    R0,L'MSG02               AND LENGTH                      00238\n         TPUT  (1),(0),R                DO IT                           00239\n         LA    R2,100                   SET AT MAXIMUM                  00240\nLENOK    LTR   R2,R2                    TEST FOR NON-ZERO LEN *BMD*     00241\n         STH   R2,PARM                  SAVE IN LENGTH                  00242\n         BCTR  R2,0                     SUBTRACT ONE                    00243\n         BNP   *+12                     NOT THERE, NO MOVE *BMD*        00244\n         EX    R2,MVCPARM               DO THAT                         00245\n         B     *+10                     AROUND XC                       00246\n         XC    PARM+2(40),PARM+2        CLEAR IT FOR ACCIDENTAL PARSE   00247\n         LA    R1,PARM                  LOAD PARM FIELD                 00248\n         ST    R1,PARMPTR               SAVE IT THERE                   00249\n         MVI   PARMPTR,X'80'            FLAG AS LAST                    00250\n         MVC   PARMPTR+4(12),CPPLUPT    JUST IN CASE CALL CP            00251\n         SPACE 3                                                        00252\n         XR    R1,R1                    CLEAR DCB ADDRESS               00253\n         BLDL  (1),BLDL                 DO IT                           00254\n         CH    R15,=H'8'                CHECK JUST IN CASE              00255\n         BNH   *+8                      OK                              00256\n         LA    R15,12                   LOAD ERROR CODE                 00257\n         B     *+4(R15)                 DO BRANCH                       00258\n         B     DOATTACH                 RETURN CODE=0                   00259\n         B     NONESUCH                 NO SUCH MODULE                  00260\n         B     IOERR                    I/O ERROR IN SEARCH             00261\n         LA    R1,MSG03                 BAD RETURN CODE FROM BLDL       00262\n         LA    R0,L'MSG03               AND LEN                         00263\n         B     PRELEAVX                 DIE RIGHT NOW                   00264\n         TITLE '$ - ERROR AND RETURN CODE'                              00265\nNONESUCH MVC   PARM(L'NOMOD),NOMOD      MOVE IN MESSAGE                 00266\n         MVC   PARM+MODOFF(8),BLDL+4    MOVE IN MODULE NAME             00267\n         LA    R1,PARM                  LOAD PLACE                      00268\n         LA    R0,L'NOMOD               LEN                             00269\n         B     PRELEAVX                 DO IT                           00270\n         SPACE 2                                                        00271\nIOERR    LA    R1,IOERRMSG              LOAD MESSAGE                    00272\n         LA    R0,L'IOERRMSG            LENGTH                          00273\n         SPACE 2                                                        00274\nPRELEAVX MVI   STAECMP+3,20             ERROR CODE                      00275\nPRELEAVE TPUT  (1),(0),R                DO IT                           00276\nRELEASEA IKJRLSA TSPARANS                                               00277\n         L     R2,STAECMP               TEST CMP CODE                   00278\n         LTR   R2,R2                    TEST IT                         00279\n         BP    *+6                      AROUND CLEAR                    00280\n         XR    R2,R2                    CLEAR IT                        00281\n         SPACE                                                          00282\n*        EXIT     RC=(R2),LV=TSDSECTL-TSDSECT  SPLIT                    00283\n         LR    1,13                     SAVE FREEMAIN ADD               00284\n         L     13,4(13)                 UNCHAIN                         00285\n         ST    R2,16(13)                 SAVE RETURN CODE               00286\n         FREEMAIN R,LV=TSDSECTL-TSDSECT,A=(1),SP=1                      00287\n         LM    14,12,12(13)                                             00288\n         BR    14                                                       00289\n         TITLE '$ - SOME CONSTANTS'                                     00290\nMSG01    DC    C'MISSING PROGRAM NAME OR PARSE ERROR, PLEASE RE-ENTER C+00291\n               OMMAND'                                                  00292\nMSG02    DC    C'PARM FIELD TOO LONG, TRUNCATED AT 100 CHARACTERS'      00293\nMSG03    DC    C'** ERROR IN BLDL ** CONTACT SYSTEMS PERSONNEL'         00294\nMSG10    DC    C'** ATTACH ERROR ** CONTACT SYSTEMS PERSONNEL'          00295\nIOERRMSG DC    C'** I/O ERROR DURING BLDL ** CONTACT SYSTEMS PERSONNEL' 00296\nNOMOD    DC    C'PROGRAM 12345678 NOT FOUND, PLEASE RE-ENTER COMMAND'   00297\nABCODE   DC    C'PROGRAM 12345678 ABENDED, SYS=000, USER=0000'          00298\nNONZERO  DC    C'PROGRAM 12345678 ENDED, COND. CODE=00000000 '          00299\nMODOFF   EQU   8                                                        00300\nABSYS    EQU   30                                                       00301\nABUSER   EQU   40                                                       00302\nNONCODE  EQU   35                                                       00303\nTRT      EQU   *-C'0'                                                   00304\n         DC    C'0123456789ABCDEF'                                      00305\n         TITLE '$ - PARSE PCL'                                          00306\n         PRINT NOGEN                                                    00307\nPCL      IKJPARM DSECT=PDL                                              00308\nMODNAME  IKJIDENT 'PROGRAM',MAXLNTH=8,FIRST=ALPHANUM,                  +00309\n               OTHER=ALPHANUM,PROMPT='PROGRAM NAME',                   +00310\n               HELP='NAME OF PROGRAM TO BE CALLED'                      00311\n         SPACE 2                                                        00312\nPDLPARM  IKJPOSIT QSTRING,HELP='PARM FIELD FOR PROGRAM'                 00313\n         IKJENDP                                                        00314\n         PRINT GEN                                                      00315\n         TITLE '$ - SET UP AND ATTACH PROGRAM'                          00316\nDOATTACH TM    CPPLCBUF,X'80'           CALL ON ME?                     00317\n         BO    NOECTCHG                 RIGHT, DON'T CHANGE ECT         00318\n         L     R1,CPPLECT               LOAD ECT ADDR                   00319\n         MVC   12(8,R1),BLDL+4          MOVE IN MODULE NAME             00320\nNOECTCHG LA    R1,PARMPTR               LOAD PARM POINTER               00321\n         SPACE 3                                                        00322\n         XC    ATTLIST(ATTLISTL),ATTLIST  CLEAR ATTACH LIST             00323\n         XC    ATTECB(4),ATTECB         CLEAR IT                        00324\nATTACH   ATTACH DE=BLDL+4,DCB=0,ECB=ATTECB,SZERO=NO,                   +00325\n               STAI=(STAI,(R13)),PURGE=NONE,ASYNCH=YES,                +00326\n               MF=(E,(1)),SF=(E,ATTLIST),SHSPV=78  *BMD*                00327\n         LTR   R15,R15                  TEST RETURN CODE                00328\n         BZ    ATTWAIT                  OK, SAVE TCB AND WAIT           00329\n         LA    R1,MSG10                 MESSAGE ADDRESS                 00330\n         LA    R0,L'MSG10               AND LEN                         00331\n         B     PRELEAVX                 DONE FOR                        00332\n         SPACE 3                                                        00333\nATTWAIT  ST    R1,ATTTCB                SAVE TCB ADDRESS                00334\n         WAIT  1,ECB=ATTECB             WAIT FOR SUBTASK                00335\n         OC    STAECMP(4),STAECMP       GET CMP FROM TASK               00336\n         BZ    GETRC                    OK, GET RETURN CODE             00337\n         MVI   STAECMP,X'00'            CLEAR HIGH BYTE                 00338\n         L     R1,STAECMP               GET IT                          00339\n         SLL   R1,4                     NOW HAVE 0SSSUUU0               00340\n         ST    R1,ATTECB                SAVE IT                         00341\n         MVC   PARM(L'ABCODE),ABCODE                                    00342\n         MVC   PARM+MODOFF(8),BLDL+4    MOVE IN MOD NAME                00343\n         UNPK  DOUBLE(4),ATTECB(3)      GET FOR HEX                     00344\n         MVC   PARM+ABSYS(3),DOUBLE     DO THAT                         00345\n         TR    PARM+ABSYS(3),TRT        GET IN PRINTABLE                00346\n         MVC   ATTECB(2),STAECMP+2      GET LOW 2 BYTES                 00347\n         NI    ATTECB,X'0F'             OFF LOW SYSTEM BYTE             00348\n         LH    R15,ATTECB               LOAD CMP CODE                   00349\n         CVD   R15,DOUBLE               CONVERT IT                      00350\n         UNPK  PARM+ABUSER(4),DOUBLE+5(3)                               00351\n         OI    PARM+ABUSER+3,C'0'       PRINTABLE                       00352\n         B     DETACH                   DO DETACH                       00353\n         SPACE 3                                                        00354\nGETRC    L     R15,ATTECB               GET ECB                         00355\n         LA    R15,0(,R15)              OFF POST FLAGS                  00356\n         LTR   R15,R15                  TEST RETURN CODE                00357\n         ST    R15,STAECMP              SAVE IT IN RIGHT FIELD          00358\n         MVI   STAECMP,X'FF'            SET NO-FLAG                     00359\n         BZ    DETACH                   NO FORMAT TO DO                 00360\n         MVI   STAECMP,X'00'            OFF FLAG                        00361\n         CVD   R15,DOUBLE               CONVERT IT                      00362\n         MVC   PARM(L'NONZERO),NONZERO  MOVE IN CODE                    00363\n         MVC   PARM+MODOFF(8),BLDL+4    MOVE IN NAME                    00364\n         UNPK  PARM+NONCODE(8),DOUBLE+3(5)                              00365\n         OI    PARM+NONCODE+7,C'0'      PRINTABLE                       00366\n         EJECT                                                          00367\nDETACH   DETACH ATTTCB,STAE=NO          NO CHANCE                       00368\n         LA    R1,PARM                  LOAD ADDRESS OF ROUTINE         00369\n         LA    R0,L'NONZERO             BOTH SAME LEN                   00370\n         CLI   STAECMP,X'FF'            CMP ZERO?                       00371\n         BE    RELEASEA                 YES, NO MESSAGE                 00372\n         B     PRELEAVE                 DIE NOW                         00373\n         TITLE '$ - STAI EXIT ROUTINE'                                  00374\n         DROPX                                                          00375\n         USNGX STAI,R15                 TELL ASSEMBLER                  00376\nSTAI     CH    R0,=H'12'                CODE FOR NO CORE?               00377\n         BE    STAINCOR                 NO CORE, OK                     00378\n         L     R2,0(,R1)                GET ADDR OF PARM                00379\n         USNGX TSDSECT,R2               TELL ASSEMBLER                  00380\n         OC    STAECMP(4),STAECMP       SET CONDITION CODE              00381\n         BNZ   STAIDIE                  RECURSION-DIE                   00382\n         MVC   STAECMP(4),4(R1)         COPY STAE ABCODE                00383\n         B     STAIDO                   GO TO RETRY ROUTINE             00384\n         SPACE 3                                                        00385\nSTAINCOR OC    STAECMP(4),STAECMP       SET CONDITION CODE              00386\n         BNZ   STAIDIE                  STAI-RECURSION DIE              00387\n         ST    R1,STAECMP               SAVE CMP AS PUT THERE           00388\nSTAIDO   LA    R0,STAITRY               LOAD STAE RETRY ROUTINE         00389\n         LA    R15,4                    LOAD RETRY CODE                 00390\n         SVC   3                        RETURN TO ASIR                  00391\n         SPACE 1                                                        00392\nSTAIDIE  LR    R3,R1                    SAVE POINTER                    00393\n         POST  ATTECB,0                 POST MY MOTHER                  00394\n         XC    DOUBLE(4),DOUBLE         CLEAR IT                        00395\n         WAIT  1,ECB=DOUBLE             STOP HERE                       00396\n         DROPX                                                          00397\nSTAITRY  STAE  0,CT                     CLEAR ANY STAE CB'S             00398\n         SVC   3                        RETURN UP ANOTHER LEVEL         00399\n         EJECT                                                          00400\n         USNGX TSDSECT,R13              RE-ESTABLIST FOR THESE ISNS     00401\nMVCMOD   MVC   BLDL+4(0),0(R1)          <<EXECUTED>>                    00402\nMVCPARM  MVC   PARM+2(0),0(R3)          <<EXECUTED>>                    00403\n         SPACE 2                                                        00404\nHERMAN   LTORG                                                          00405\n         END                                                            00406\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/ D\\x00#\\x00#\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T20:44:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "SYZYGY"}, "text": "//C7B$    JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=SYZYGY,\n//       MSGCLASS=A\n//ASMFCL PROC  CLASS=A,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='SYZYGY.PDS.DATA',\n//             LOAD='SYZYGY.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='LOAD,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD.(&MEM),DISP=SHR\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=$\n//LKED.SYSIN  DD   *\n  NAME $(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$#DATE": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00\\x00\\x01\\t\\x02\\x7f\\x01\\t\\x02\\x7f\\x00S\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-01-27T00:00:00", "modifydate": "2009-01-27T00:53:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-478"}, "text": "REGULAR CBT TAPE - VERSION 478    FILE:  077\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT478.FILE077\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 66 MEMBERS COUNTED; CUMULATIVE SIZE IS 48,689 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/27/09    00:53:12    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$DOC": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00V\\x01\\x02\\x07\\x0f\\x01\\x02\\x07\\x0f#\\x02\\x00A\\x00A\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-03-11T00:00:00", "modifydate": "2002-03-11T23:02:56", "lines": 65, "newlines": 65, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject: MVS 3.8 Utilities\nDate: Mon, 11 Mar 2002 13:34:05 -0800\nFrom: Brian Westerman <Brian_Westerman@SyzygyInc.com>\nTo: Sam Golob <sbgolob@attglobal.net>\n\nHi Sam,\n\nHere is the first cut at the utilities.  I am sending you a\nself-extracting zip file of the AWS format IEBCOPY tape of\nthe source PDS and also a PDF file of the contents.  It's\nabout 445KB in compressed (ZIP) format.  It contains source\nmembers that I have loaded from old copies of my PDS's from\nvery old backup tapes.  Most of them were originally from\nold versions of various SHARE and CBT tapes, but they have\nall been tested on the Hercules MVS3.8 turnkey system.  I\nwill try to update this list frequently.\n\nAlso, does anyone have a digital copy of the old MVS manuals\nthat match this version of the operating system (MVS 3.8)?\nIf so, where can I find them?\n\nBrian Westerman\n\nThe contents of the File is as follows:\n\nModule    Purpose/Info\n------    ------------\n$         Interface to TSO CALL, use in Clists, etc.\nAPFLIST   List the current APFLIST from memory\nAUTO      Command and JOB scheduler by time of day\nPACKRAT   Full Screen Volume maintenance Utility,\n          requires BACKEND module\nBACKEND   Part of Packrat (above)\nBRODSCAN  Scan the broadcast dataset and give stats\nCANCELOK  Make any running Addresspace cancel-able\n          (even VTAM)\nCATALOG   Nifty catalog maintenance command\nCOMMAND   Issue MVS/JES commands from TSO\nDATE      Display date in several formats on the OS\n          console\nDEBE      Predecessor of DITTO\nOSDEBE2   Slight mods over base DEBE\nDISPLAY   Display system Information\nILRBIRD   TSO response time test\nINSTREAM  Dynamic SYSIN creation for inside of Clists\nKERMITT   TSO File Transfer Utility\nKILL      End any addresspace\nLOCATE    Show where any dataset is cataloged and also\n          search all volumes for dups.\nMINIGEN   Perform MVS sysgen in pieces so that you\n          don't have to do extra work\nDISKSEEK  Volume mapping and SIO testing utility (SMAP)\nDISKTEST  Test a volume before you put it in service\nMEMBER    Find module in linklist and/or LPA\nSHOWSS    Show active subsystems\nSWAP      System Workload Analysis Program\nSYSTEM    Display system type, machine info, IPL\n          Date etc.\nVOLCHECK  Check a volume for miscataloged, or\n          uncataloged datasets\nVTAMCHK   Wait for VTAM to start and then issue\n          list of commands\nWTC       Send non-rollable message to the console\nVTAMOPER  Vtam Secondary operator facility\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE077": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00\\x00\\x01\\t\\x02\\x7f\\x01\\t\\x02\\x7f\\x00S\\x00H\\x00H\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-01-27T00:00:00", "modifydate": "2009-01-27T00:53:00", "lines": 72, "newlines": 72, "modlines": 0, "user": "CBT-478"}, "text": "//***FILE 077 is from Brian Westerman of Syzygy, Inc. and contains  *   FILE 077\n//*           his collection of utilities which were tested to      *   FILE 077\n//*           work on the Hercules MVS 3.8J Turnkey system from     *   FILE 077\n//*           Volker Bandke.  Many of these utilities came from     *   FILE 077\n//*           old CBT Tapes, and some are found on Brian's other    *   FILE 077\n//*           file, which is File 088.  But these utilities, in     *   FILE 077\n//*           these versions, have been tested to run under         *   FILE 077\n//*           Hercules, running MVS 3.8J, and for those people      *   FILE 077\n//*           who are restricted to that system, these are as       *   FILE 077\n//*           good as gold.                                         *   FILE 077\n//*                                                                 *   FILE 077\n//*           My new address and phone number are                   *   FILE 077\n//*                                                                 *   FILE 077\n//*           Brian Westerman                                       *   FILE 077\n//*           Syzygy Incorporated                                   *   FILE 077\n//*           Director of Research and Development                  *   FILE 077\n//*           897 Oak Park Blvd #500                                *   FILE 077\n//*           Pismo Beach, CA  93449                                *   FILE 077\n//*                                                                 *   FILE 077\n//*           (800) 767-2244                                        *   FILE 077\n//*           (800) 366-4082 - fax                                  *   FILE 077\n//*                                                                 *   FILE 077\n//*           email:    Brian_Westerman@SyzygyInc.com               *   FILE 077\n//*                                                                 *   FILE 077\n//*      The contents of the File is as follows:                    *   FILE 077\n//*                                                                 *   FILE 077\n//*      Module    Purpose/Info                                     *   FILE 077\n//*      ------    ------------                                     *   FILE 077\n//*      $         Interface to TSO CALL, use in Clists, etc.       *   FILE 077\n//*      APFLIST   List the current APFLIST from memory             *   FILE 077\n//*      AUTO      Command and JOB scheduler by time of day         *   FILE 077\n//*      PACKRAT   Full Screen Volume maintenance Utility,          *   FILE 077\n//*                requires BACKEND module                          *   FILE 077\n//*      BACKEND   Part of Packrat (above)                          *   FILE 077\n//*      BRODSCAN  Scan the broadcast dataset and give stats        *   FILE 077\n//*      CANCELOK  Make any running Addresspace cancel-able         *   FILE 077\n//*                (even VTAM)                                      *   FILE 077\n//*      CATALOG   Nifty catalog maintenance command                *   FILE 077\n//*      COMMAND   Issue MVS/JES commands from TSO                  *   FILE 077\n//*      DATE      Display date in several formats on the OS        *   FILE 077\n//*                console                                          *   FILE 077\n//*      DEBE      Predecessor of DITTO                             *   FILE 077\n//*      DYNABLDL  A must for pre-XA MVS systems. This program      *   FILE 077\n//*                eliminates the need for a fixed IEABLDnn list,   *   FILE 077\n//*                and instead creates a dynamic BLDL list table,   *   FILE 077\n//*                which gets updated with the most frequently      *   FILE 077\n//*                used programs.  This is an install pds, in the   *   FILE 077\n//*                IEBUPDTE SYSIN format, or PDSLOAD SYSUT1 format. *   FILE 077\n//*      OSDEBE2   Slight mods over base DEBE                       *   FILE 077\n//*      DISPLAY   Display system Information                       *   FILE 077\n//*      ILRBIRD   TSO response time test                           *   FILE 077\n//*      INSTREAM  Dynamic SYSIN creation for inside of Clists      *   FILE 077\n//*      KERMITT   TSO File Transfer Utility                        *   FILE 077\n//*      KILL      End any addresspace                              *   FILE 077\n//*      LOCATE    Show where any dataset is cataloged and also     *   FILE 077\n//*                search all volumes for dups.                     *   FILE 077\n//*      MINIGEN   Perform MVS sysgen in pieces so that you         *   FILE 077\n//*                don't have to do extra work                      *   FILE 077\n//*      DISKSEEK  Volume mapping and SIO testing utility (SMAP)    *   FILE 077\n//*      DISKTEST  Test a volume before you put it in service       *   FILE 077\n//*      MEMBER    Find module in linklist and/or LPA               *   FILE 077\n//*      SHOWSS    Show active subsystems                           *   FILE 077\n//*      SWAP      System Workload Analysis Program                 *   FILE 077\n//*      SYSTEM    Display system type, machine info, IPL           *   FILE 077\n//*                Date etc.                                        *   FILE 077\n//*      VOLCHECK  Check a volume for miscataloged, or              *   FILE 077\n//*                uncataloged datasets                             *   FILE 077\n//*      VTAMCHK   Wait for VTAM to start and then issue            *   FILE 077\n//*                list of commands                                 *   FILE 077\n//*      WTC       Send non-rollable message to the console         *   FILE 077\n//*      VTAMOPER  Vtam Secondary operator facility                 *   FILE 077\n//*                                                                 *   FILE 077\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "APFLIST": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/\\x19X\\x01\\x84\\x01\\x84\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T19:58:00", "lines": 388, "newlines": 388, "modlines": 0, "user": "SYZYGY1"}, "text": "//SYZYGYA JOB (0001),WESTERMAN,CLASS=A,MSGCLASS=A,REGION=3072K,\n//             NOTIFY=SYZYGY1\n//* ********************************************************\n//* *                 *** MVS3.8 ***                       *\n//* ********************************************************\n//ASM     EXEC PGM=IFOX00,PARM='XREF(SHORT),NODECK,OBJECT'\n//SYSIN    DD  *\n         MACRO\n         REGEQU\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n***********************************************************************\n         MEND\n         EJECT\n         MACRO\n&NAME    PRIME &REG,&SAVE,&CONS,&NTER,&EQU\n.* THIS IS THE PRIME MACRO\n.* ITS FUNCTION IS\n.* 1.  ESTABLISH ADDRESSABILITY SAVE REGISTERS ACT AS ENTRY\n.* 2.  GENERATE REG SAVE AREA OR DO GETMAIN\n.* 3.  PROVIDE EXIT USED BY TERME MACRO\n.* 4.  PROVIDE ADDIT SAVE AREAS FOR SUBROUTINES SO ONLY 1 BAL REG\n         GBLA  &PERFD,&PERFL\n         GBLC  &PERFR,&LAB,&SNTRY\n         GBLB  &EQFLG,&PRIM\n         LCLB  &REENT\n         LCLA  &CNT,&LOOP,&INC\n         LCLC  &BASE(3),&SCSECT,&PNAME\n         AIF   (&PRIM).DUMB\n&PRIM    SETB  1\n&LAB     SETC  'ICC'.'&SYSNDX'\n&SNTRY   SETC  '&LAB'.'A'\n&SCSECT  SETC  '&SYSECT'\n         AIF   (T'&NAME EQ 'O').CSCT0\n         AIF   ('&SCSECT' NE '').CSCT1\n&NAME    CSECT\n&SCSECT  SETC  '&NAME'\n         AGO   .CSCT0\n.DUMB    MNOTE 8,'ONLY ONE PRIME MAY BE DEFINED'\n         MEXIT\n.CSCT1   MNOTE 'A CSECT IS ALREADY DEFINED.'\n&PNAME   SETC  '&NAME'\n.CSCT0   ANOP\n         USING *,15\n         AIF   ('&EQU' EQ '').A1\n         REGEQU\n.A1      AIF   ('&CONS' EQ '').A2\n&PNAME   SAVE  (14,12),,&CONS\n         AGO   .A3\n.A2      ANOP\n&PNAME   SAVE  (14,12),,&SCSECT\n.A3       ANOP\n         LA    14,&LAB\n         ST    14,&SNTRY\n         B     &SNTRY+4\n         AIF   ('&SAVE' NE '').A4\n&REENT   SETB  1\n.A4      AIF   ('&REG' EQ '').A6\n         AIF   (N'&REG GT 3).BAD3\n         AIF   (N'&REG LT 2).B1\n&CNT     SETA  N'&REG\n&LOOP    SETA  1\n&INC     SETA  &LOOP+1\n.A5      AIF   (T'&REG(&LOOP) NE 'N').BAD1\n&BASE(&LOOP) SETC '&REG'(&INC,K'&REG(&LOOP))\n&INC     SETA  &INC+K'&REG(&LOOP)+1\n&LOOP    SETA  &LOOP+1\n         AIF   (&LOOP LE &CNT).A5\n         AGO   .A7\n.B1      ANOP\n&BASE(1) SETC  '&REG'\n         AGO   .B2\n.A6      ANOP\n&BASE(1) SETC  '12'\n.B2      ANOP\n&CNT     SETA  1\n.A7      ANOP\n&SNTRY   DS    F\n          DROP 15\n         AIF   (&CNT NE 3).A8\n         LA    &BASE(3),2048                     ESTABLISH ADDRESSAB\n         LA    &BASE(2),2048(&BASE(3),15)        WITH THREE\n         LA    &BASE(3),2048(&BASE(3),&BASE(2))  BASE REGS\n         LR    &BASE(1),15\n         USING &SCSECT,&BASE(1),&BASE(2),&BASE(3)\n         AGO   .A10\n.A8      AIF   (&CNT NE 2).A9\n         LA    &BASE(2),2048                     ESTABLISH ADRESSAB\n         LA    &BASE(2),2048(&BASE(2),15)        WITH TWO\n         LR    &BASE(1),15                       BASE REGS\n         USING &SCSECT,&BASE(1),&BASE(2)\n         AGO   .A10\n.A9      AIF   (&CNT NE 1).BAD4\n         LR    &BASE(1),15                       ESTABLISH ADRESSAB\n         USING &SCSECT,&BASE(1)\n.A10     AIF   (&REENT).A11\n         LA    15,&SAVE\n         AGO   .A14\n.A11     AIF   ('&NTER' NE '').A12\n&PERFL   SETA  0\n&CNT     SETA  72\n         AGO   .A13\n.A12     AIF   (T'&NTER NE 'N').BAD5\n&PERFL   SETA  &NTER\n&PERFR   SETC  '14'\n&PERFD   SETA  0\n&CNT     SETA  72+&NTER*4\n* GENERATED SAVE AREA EXTENDED FOR USE BY NTER AND XIT MACROS\n.A13     ANOP\n         GETMAIN R,LV=&CNT\n         LR    15,1\n.A14     ANOP\n         LM    0,1,20(13)\n         ST    13,4(15)                          CHAIN THE\n         ST    15,8(13)                          SAVE AREAS\n         LR    13,15\n         L     15,&SNTRY\n          BR   15\n         AIF   (&REENT).A20\n&LAB.X   L     13,4(13)\n         AGO   .A21\n.A20     ANOP\n&LAB.X   LR    1,13\n         L     13,4(13)\n         FREEMAIN R,LV=&CNT,A=(1)\n.A21     ANOP\n         RETURN (14,12),T,RC=(15)\n         AIF   (&REENT).A24\n         AIF   ('&NTER' NE '').A22\n&CNT     SETA  18\n         AGO   .A23\n.A22     AIF   (T'&NTER NE 'N').BAD5\n&PERFL   SETA  &NTER\n&PERFR   SETC  '14'\n&PERFD   SETA  0\n&CNT     SETA  &NTER+18\n* GENERATED SAVE AREA EXTENDED FOR USE BY NTER AND XIT MACROS\n.A23     ANOP\n&SAVE    DC    &CNT.F'0'\n.A24     ANOP\n         LTORG\n&LAB     DS    0H\n         MEXIT\n.BAD1    MNOTE 8,'FIRST PARAMETER/S MUST BE SELF DEFINING'\n         MEXIT\n.BAD3    ANOP\n.BAD4    MNOTE 8,'THIS MACRO WILL HANDLE 1-3 BASE REGS'\n         MEXIT\n.BAD5    MNOTE 8,'THIRD PARAMETER MUST BE SELF DEFINING'\n         MEND\n         EJECT\n         MACRO\n&NAME    TERME &PASS,&RC=O\n         GBLC  &LAB\n         GBLB  &PRIM\n&NAME    DS    0H\n         AIF   (&PRIM).TSTRC\n         MNOTE 8,'PRIME MUST OCCUR BEFORE TERME'\n         MEXIT\n.TSTRC   AIF   ('&RC' EQ '(15)').RET\n         AIF   ('&RC' EQ 'O').RET\n         AIF   ('&RC'(1,1) EQ '(').ISAREG\n         LA    15,&RC\n         AGO   .RET\n.ISAREG  ANOP\n         LR    15,&RC\n.RET     AIF   ('&PASS' NE 'PASS').NOPASS\n         L     14,4(13)\n         STM   0,1,20(14)\n.NOPASS  ANOP\n         B     &LAB.X\n         MEND\n         PRINT NOGEN\n         TITLE 'APF LIBRARY LIST MODULE'\n************************************************************\n*    APFLIST  -  THIS PROGRAM IS DESIGNED TO RUN UNDER     *\n*                TSO OR BATCH AND WILL DISPLAY OR PRINT    *\n*                ALL APF AUTHORIZED LIBRARIES FOR THIS     *\n*                IPL.  ALSO DISPLAYED IS THE TOTAL         *\n*                NUMBER OF LIBRARIES AND THE SIZE OF       *\n*                THE TABLE.                                *\n*    NOTE : SYS1.LINKLIB AND SYS1.SVCLIB ARE AUTOMATICALLY *\n*           ADDED AT IPL TIME.                             *\n*           THE TABLE IS BUILT BY NIP MODULE IEAVNPA5      *\n*           WHICH ALLOWS A MAXIMUM OF 2040 BYTES IN THE    *\n*           APF TABLE.                                     *\n*                                                          *\n*    THE JCL NECESSARY TO EXECUTE THIS CODE IN BATCH IS:   *\n*                                                          *\n*          EXEC PGM=APFLIST                                *\n*          SYSPRINT DD SYSOUT=A                            *\n*                                                          *\n*    MACROS USED ARE : PRIME,TERME,TPUT,REGEQU             *\n*                                                          *\n************************************************************\nAPFLIST  PRIME 12,,,,Y\n         EJECT\n         L     R1,X'224'                 -> PSAOLD\n         ICM   R1,15,172(R1)             BATCH OR TSO ?\n         BNZ   BATCH                     WE ARE BATCH\n         EXTRACT ANS,'S',FIELDS=(TSO,COMM)\n         LM    R1,R2,ANS                 -> TSO STATUS BYTE\n         USING COMSECT,R2\n         L     R2,CIBADDR                -> CIB\n         USING CIB,R2\n         TM    CIBVERB,STC               STC ?\n         BZ    TSO\n         MVC   CONSID+3(1),CIBCONID      GET MCS ID\n         DROP  R2\n         OI    SW,X'02'                  SET STC SWITCH\n         B     BEGIN\nBATCH    EQU   *                         WE ARE BATCH\n         WTO 'ASSUME BATCH',ROUTCDE=(1,11)\n         OPEN  (SYSPRINT,OUTPUT)         OPEN SYSPRINT\n         OI    SW,X'01'                  TURN ON BATCH SWITCH\n         B     BEGIN                     GO TO THE BEGINING\nTSO      EQU   *\n         WTO   'ASSUME TSO',ROUTCDE=(1,11)\nBEGIN    L     R4,16                     -> CVT\n         L     R4,X'1E4'(R4)             -> APF TABLE IN SQA\n         SR    R5,R5                     INITIALIZE REG 5\n         SR    R7,R7                     INITIALIZE REG 7\n         IC    R7,1(R4)                  LOAD # OF ENTRIES\n         LH    R6,=H'01'                 INITIALIZE INCREMENT\n         SR    R7,R6                     SUBTRACT 1 FOR BXLE\n         USING APF,R4                    ESTABLISH ADDR TO APF\n         LA    R4,2(R4)                  -> 1ST ENTRY OF TABLE\n         TM    SW,X'01'                  TSO OR BATCH ?\n         BZ    TSOT                      TSO - BYPASS PUT\nTSOTP    PUT   SYSPRINT,TITLE-1\n         B     TSOTB                     BYPASS TPUT\nTSOT     EQU   *\n         TM    SW,X'02'                  STC ?\n         BZ    TSOTT                     NO - ISSUE THE TPUT\n         MVC   WTOMSG(52),TITLE          MOVE TO WTO AREA\n         L     R0,CONSID                 ->CONSOLE ID WHERE STARTED\n         LA    R1,WTOMSG                 -> MESSAGE\n         SVC   35                        ISSUE THE WTO\n         B     TSOTB                     BYPASS TPUT\nTSOTT    TPUT  TITLE,52\nTSOTB    EQU   *\n         LH    R9,=H'02'                 LOAD LENGTH OF PREFIX\nAPFDISP  EQU   *                         BEGIN THE ACTUAL DISPLAY\n         AP    CNT,=P'01'                INCREMENT COUNT\n         SR    R2,R2                     CLEAR REG 2\n         IC    R2,APFLEN                 LENGTH OF ENTRY\n         AR    R9,R2                     ADD LENGTH OF ENTRY\n         MVC   DISPL(52),BLANKS          CLEAR DISPLAY LINE\n         MVC   DVOL,APFVOL\n         LR    R3,R2                     LOAD LENGTH\n         SH    R3,=H'07'                 SUBTRACT LEN OF LEN+VOL\n         EX    R3,MOVEDSN\n         TM    SW,X'01'                  TSO OR BATCH ?\n         BZ    TSOD                      TSO - BYPASS PUT\nTSODP    PUT   SYSPRINT,DISPL-1\n         B     TSODB                     BYPASS TPUT\nTSOD     EQU   *\n         TM    SW,X'02'                  STC ?\n         BZ    TSODT                     NO - ISSUE THE TPUT\n         MVC   WTOMSG(52),TITLE          MOVE TO WTO AREA\n         L     R0,CONSID                 ->CONSOLE ID WHERE STARTED\n         LA    R1,WTOMSG                 -> MESSAGE\n         SVC   35                        ISSUE THE WTO\n         B     TSODB                     BYPASS TPUT\nTSODT    TPUT  DISPL,52                  DISPLAY INFO\nTSODB    EQU   *\n         AR    R4,R2                     INCREMENT DISPLACEMENT\n         LA    R4,1(R4)                  -> NEXT ENTRY\n         BXLE  R5,R6,APFDISP\n         ED    APFCNT,CNT                COUNT OF ENTRIES\n         CVD   R9,DWK                    CONVERT TO DECIMAL\n         ED    SIZE(6),DWK+5             MAKE DISPLAYABLE\n         TM    SW,X'01'                  TSO OR BATCH ?\n         BZ    TSOS                      TSO - BYPASS PUT\n         PUT   SYSPRINT,APFCNTL-1\n         PUT   SYSPRINT,APFSIZE-1\n         B     TSOSB\nTSOS     EQU   *\n         TM    SW,X'02'                  STC ?\n         BZ    TSOST                     NO - ISSUE THE TPUT\n         MVC   WTOMSG(52),TITLE          MOVE TO WTO AREA\n         L     R0,CONSID                 ->CONSOLE ID WHERE STARTED\n         LA    R1,WTOMSG                 -> MESSAGE\n         SVC   35                        ISSUE THE WTO\n         B     TSOSB                     BYPASS TPUT\nTSOST    TPUT  APFCNTL,52                COUNT OF ENTRIES\n         TPUT  APFSIZE,52                SIZE OF TABLE\nTSOSB    EQU   *\n         TM    SW,X'02'                  STC ?\n         BO    TERME                     YES - BYPASS THE CLOSE\n         TM    SW,X'01'                  TSO OR BATCH ?\n         BZ    TERME\n         CLOSE (SYSPRINT)\nTERME    EQU   *\n         TERME\n         EJECT\nSW       DC    X'00'\nMOVEDSN  MVC   DSN(0),7(R4)              MOVE DSN TO DISPLAY\nDWK      DC    D'0'\nANS      DS    2F\n         SPACE\nCONSID   DC    F'0'                      MCS CONSOLE ID IF STC\nWTOA     DC    AL2(WTOAE-WTOA),X'4000'\nWTOMSG   DC    CL52' '\nWTOAE    EQU   *\n         SPACE\nCNT      DC    PL2'00'\n         SPACE\n         DC    C'0'\nAPFCNTL  DC    C' TOTAL APF AUTHORIZED ENTRIES = '\nAPFCNT   DC    XL4'40202021'\nBLANKS   DC    CL60' '                   FILLER + BLANKS\n         SPACE\n         DC    C'0'\nAPFSIZE  DC    C' THE APF TABLE IS'\nSIZE     DC    XL6'402020202021'\n         DC    CL29' BYTES OF A POSSIBLE 2040 '\n         SPACE\n         DC    C' '\nDISPL    DC    C' '\nDVOL     DC    CL6' '                    VOLUME\n         DC    CL2' '\nDSN      DC    CL44' '                   DSN OF LIBRARY\n         SPACE\n         DC    C'1'\nTITLE    DC    CL52' VOLUME  DATA-SET NAME '\n         EJECT\nSYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,LRECL=53,             *\n               BLKSIZE=530,RECFM=FBA\n         EJECT\n         LTORG\n         SPACE\n         DSECT\nAPF      EQU   *\nAPFLEN   DS    CL1                       LENGTH OF ENTRY\nAPFVOL   DS    CL6                       VOLUME SERIAL NUMBER\nAPFDSN   DS    CL44                      DSN OF LIBRARY\n         EJECT\nCOMSECT  DSECT\nECBADDR  DS    A                   ADDRESS OF MODIFY/STOP ECB\nCIBADDR  DS    A                   ADDRESS OF 1ST CIB\n         DS    CL8\nOPECB    DC    F'0'                OPERATOR REPLY ECB\n         SPACE\nCIB      DSECT\nCIBNEXT  DS    A                   ADDRESS OF NEXT CIB\nCIBVERB  DS    X                   VERB CODE\nSTC      EQU   4                   START COMMAND\nSTOP     EQU   X'40'               STOP COMMAND\nMODIFY   EQU   X'44'               MODIFY COMMAND\nCIBLNGH  DS    X                   CIB LENGTH IN DOUBLE WORDS\n         DS    3X                  RESERVED\nCIBTSOID DS    H                   TSO TERMINAL ID\nCIBCONID DS    X                   MCS CONSOLE ID\n         DS    X                   RESERVED\nCIBCOMLN DS    H                   COMMAND DATA LENGTH\nCIBDATA  DS    C                   COMAND DATA\n         END\n/*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(6,1))\n//SYSUT2   DD  UNIT=VIO,SPACE=(CYL,(6,1))\n//SYSUT3   DD  UNIT=VIO,SPACE=(CYL,(6,1))\n//SYSGO    DD  DSN=&&LOADSET,DISP=(MOD,PASS),SPACE=(CYL,(1,1)),\n//             UNIT=VIO,DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=800)\n//LKED    EXEC PGM=IEWL,PARM='MAP,LIST,LET'\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD  DSN=SYZYGY.LINKLIB(APFLIST),DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(5,2))\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AUTO": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/ Q\\x06\\x8c\\x06\\x8c\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T20:51:00", "lines": 1676, "newlines": 1676, "modlines": 0, "user": "SYZYGY"}, "text": "//SYZYGYBA JOB (PS01),'SYZYGYB',\n//            CLASS=A,MSGCLASS=A,\n//            NOTIFY=SYZYGY1,REGION=4096K\n//*-----------------------------------------------*\n//*   LIB: SYZYGY.FILE332.PDS(AUTO)\n//*   DOC: ASSEMBLE AND LINK\n//*-----------------------------------------------*\n//ASSEMB  EXEC ASSEMBLE,PARM.LINK='LIST,XREF,AC=1'\n//ASM.SYSLIB  DD\n//          DD\n//          DD\n//SYSIN    DD  *\n*----------------------------------------------------------------------\n*    BW- MACRO  CODE STARTS ABOUT 400 LINES DOWN\n*    BW- ACTUAL CODE STARTS ABOUT 1015 LINES DOWN\n*----------------------------------------------------------------------\n*        THIS ROUTINE PROVIDES FOR JOB SUBMISSION AND AUTOMATIC\n*        COMMANDS IN AN MVS/JES2 ENVIRONMENT.  IT'S FUNCTIONS\n*        ARE THREE-FOLD AND ARE EXPLAINED BELOW.\n*\n*\n*        1=RDR  ALLOW AN EASY WAY OF PRESENTING JOBS TO JES2 VIA AN\n*               OPERATOR MODIFY COMMAND.\n*\n*        2=CMD  ALLOW AN EASY WAY OF PRESENTING MULTIPLE COMMANDS TO\n*               MVS/JES2 VIA AN OPERATOR MODIFY COMMAND.\n*\n*        3=AUTO ALLOW FOR TIME-OF-DAY/DAY-OF-WEEK AUTOMATIC COMMANDS\n*\n*\n*        THE USER MUST PROVIDE A STARTED TASK PROCEDURE IN SYS1.PROCLIB\n*        WHICH IS STARTED AT IPL TIME.  ONCE ACTIVE, IT WILL PROCESS\n*        USER DEFINED COMMANDS BY DAY OF WEEK (USER DEFINED).\n*        ALSO, IT WILL SUPPORT OPERATOR MODIFY COMMANDS (DEMAND)\n*        EITHER SUBMIT JOBS (MEMBERS) TO THE INTERNAL READER OR\n*        EXECUTE COMMANDS (MEMBER LISTS).\n*\n*        FOR THE JOB SUBMISSION FEATURE, ONE OR MORE PARTITIONED\n*        DATASET(S) ARE USED.  FOR THE COMMAND/AUTO-COMMAND\n*        FUNCTIONS, ANOTHER PARTITIONED DATASET IS USED.  EACH\n*        ARE DESCRIBED BELOW (BY DDNAME).\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*\n*\n*        DDNAME     USE AND FUNCTION\n*        --------   -------------------------------------------------\n*\n*\n*        INTRDR     REQUIRED IF THE JOB-SUBMISSION FUNCTION IS TO\n*                   BE USED.  IT SHOULD SPECIFY THE JES2 INTERNAL\n*                   READER.\n*\n*        JOB00      REQUIRED IF THE JOB-SUBMISSION FUNCTION IS TO\n*                   BE USED.  IT SHOULD SPECIFY THE NAME OF A\n*                   PARTITIONED DATASET WHICH CONTAINS MEMBERS\n*                   TO BE SUBMITTED TO JES2.\n*\n*        JOB??      OPTIONAL WHEN THE JOB-SUBMISSION FUNCTION IS USED.\n*                   ANY NUMBER OF ADDITIONAL 'JOB??' DDCARDS MAY BE\n*                   USED TO ALLOW FOR SPECIALIZED FUNCTION (WITH\n*                   DUPLICATE MEMBER NAMES).  THIS OPTION IS SIMILAR\n*                   TO THE MULTIPLE 'PROC??' DDCARDS WITHIN THE JES2\n*                   STARTUP PROC.  USE OF THESE OPTIONAL LIBRARIES\n*                   IS CONTROLED BY THE OPERATOR (VIA THE 'D=??'\n*                   KEYWORD, AS DETAILED BELOW).\n*\n*        COMMANDS   THIS DD STATEMENT IS REQUIRED FOR EITHER THE\n*                   OPERATOR COMMAND-LIST OR THE AUTO-COMMAND\n*                   FUNCTION.  IT SHOULD CONTAIN MEMBERS (LISTS\n*                   OF COMMANDS) IN THE FORMAT DESCRIBED UNDER THE\n*                   HEADING 'COMMAND RECORD SYNTAX' BELOW.\n*\n*\n*        THE FOLLOWING IS AN EXAMPLE OF THE TYPE OF PROC TO\n*        BE ADDED TO YOUR SYS1.PROCLIB.  NOTE THAT THE 'JOB00'\n*        DDNAME IS REQUIRED TO USE THE JOB SUBMISSION FUNCTION\n*        WHILE 'JOB01' AND 'JOB02' ARE OPTIONAL (USED IN THIS\n*        CASE AS REMOTE JOB CONTROL LIBRARIES).\n*\n*        //AUTO     EXEC PGM=AUTO,TIME=1440,DPRTY=(7,9)\n*        //STEPLIB  DD DISP=SHR,DSN=USER.LIBRARY    <---- AUTHORIZED\n*        //INTRDR   DD SYSOUT=(A,INTRDR)\n*        //COMMANDS DD DISP=SHR,DSN=SYS1.COMMANDS\n*        //JOB00    DD DISP=SHR,DSN=RMT0.JCL.LIB\n*        //JOB01    DD DISP=SHR,DSN=RMT1.JCL.LIB\n*        //JOB02    DD DISP=SHR,DSN=RMT2.JCL.LIB\n*\n*        USE OF THE OPTIONAL 'JOB??' DDNAMES IS SPECIFIED BY THE\n*        OPERATOR USING THE 'D=' OPERAND (DETAILED BELOW).\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THE FOLLOWING ARE EXAMPLES OF NORMAL OPERATOR COMMANDS\n*        JOB SUBMISSION USE:\n*\n*        FUNCTION  COMMAND      OPERATION\n*        --------  ------------ --------------------------------------\n*\n*        START     S AUTO.A     NORMAL OPERATOR START-UP.  THE FIRST\n*                               AUTOMATIC COMMAND TO BE PROCESSED\n*                               WILL BE THE MEMBER WITH A NAME THAT\n*                               SPECIFIED A TIME GREATER THAN CURRENT.\n*                               HOWEVER, DEMAND COMMAND EXECUTION\n*                               AS WELL AS JOB SUBMISSION IS AVAILABLE\n*                               IMMEDIATELY.\n*\n*        IPL       S AUTO.A,PARM=IPLMEM\n*                               SAME AS ABOVE, EXCEPT THAT THE COMMAND\n*                               MEMBER NAMED IN THE PARM FIELD WILL BE\n*                               EXECUTED BEFORE ANY OTHER REQUESTS\n*                               (AUTOMATIC OR OPERATOR REQUESTED\n*                               COMMAND).  THIS PROVIDES AN ALTERNATIVE\n*                               TO THE 'SYS1.PARMLIB(COMMND??)' OPTION\n*                               PROVIDED BY MVS.  IT ALSO PROVIDES FOR\n*                               ANY TYPE OF COMMAND (JES2 COMMANDS AS\n*                               WELL AS MVS COMMANDS).\n*\n*        SUBMIT    F A,MEMBER1  SUBMIT 'MEMBER1' TO THE JES2 INTERNAL\n*                               READER.  SINCE THE 'D=??' OPTION WAS\n*                               NOT USED, THE MEMBER WILL BE READ FROM\n*                               THE 'JOB00' DD (WHICH WILL REMAIN OPEN\n*                               OPEN UNTIL SOMETHING OTHER UNTIL 'D=??'\n*                               IS SPECIFIED AND IS NOT THE SAME AS THE\n*                               ONE USED PREVIOUSLY).\n*\n*        SUBMIT    F A,MEMBER1,MEMBER2,....,MEMBERN\n*                               SUBMIT MULTIPLE MEMBERS TO THE JES2\n*                               INTERNAL READER.  SINCE 'D=??' WAS NOT\n*                               SPECIFIED, THE 'JOB00' IS AGAIN USED.\n*\n*        SUBMIT    F A,MEMBER1,D=01\n*                               SUBMIT A MEMBER (JOB) TO THE JES2\n*                               INTERNAL READER.  SINCE 'D=01' WAS\n*                               SPECIFIED, THE 'JOB00' FILE IS CLOSED\n*                               AND THE 'JOB01' FILE IS OPENED TO\n*                               READ THE MEMBER.  THIS FILE WILL\n*                               REMAIN OPEN UNTIL THE 'D=??' IS\n*                               CHANGED (FROM 'D=01') OR IS NOT\n*                               SPECIFIED ('D=00' IS THE DEFAULT).\n*\n*        SUBMIT    F A,MEMBER1,MEMBER02,.....,MEMBERN,D=01\n*                               SAME AS THE ABOVE, HOWEVER, MULTIPLE\n*                               MEMBERS WILL BE READ FROM THE 'JOB01'\n*                               FILE AND SUBMITTED.  NOTE THAT THE\n*                               'D=??' KEYWORD MUST BE SPECIFIED AS\n*                               THE LAST OPTION.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THE FOLLOWING ARE EXAMPLES OF OPERATOR COMMANDS TO SCHEDULE\n*        COMMAND LISTS.\n*\n*        FUNCTION  COMMAND      OPERATION\n*        --------  ------------ --------------------------------------\n*\n*        COMMAND   F A,-MEMBER1 CAUSE A LIST OF COMMANDS TO BE EXECUTED\n*                               BY MVS (OR JES2).  NOTE THAT THE DASH\n*                               (HYPHEN) AS A PREFIX TO THE MEMBER\n*                               NAME IDENTIFIES THE REQUEST AS A\n*                               COMMAND REQUEST (DEMAND).  THE NAMED\n*                               MEMBER WILL BE READ FROM THE FILE\n*                               IDENTIFIED BY THE DD 'COMMANDS'.  EACH\n*                               COMMAND READ WILL BE EXECUTED IF RE-\n*                               QUESTED FOR THE CURRENT DAY (THE SYNTAX\n*                               SYNTAX OF THE 'COMMANDS' RECORDS ARE\n*                               DEFINED BELOW UNDER 'COMMAND RECORD\n*                               SYNTAX').\n*\n*        COMMAND   F A,-MEMBER1,MEMBER2,.....,MEMBERN\n*                               CAUSE A LIST OF MEMBERS TO BE PROCESSED\n*                               BY MVS (OR JES2).  EACH MEMBER MAY\n*                               CONTAIN MULTIPLE COMMANDS. AGAIN NOTE\n*                               THAT THE DASH IDENTIFIES THE REQUEST\n*                               AS A DEMAND COMMAND REQUEST.\n*\n*        SHUTDOWN  P A          TO TERMINATE THIS ROUTINE, SIMPLY\n*                               ENTER AN OPERATOR STOP COMMAND.\n*\n*        SHUTDOWN  F A,-SHUTDOWN\n*                               TO ALLOW A LIST OF 'SHUTDOWN' COMMANDS\n*                               TO BE EXECUTED PRIOR TO STOPPING THIS\n*                               ROUTINE (SUCH AS $PI, I SMF, P RMF ETC)\n*                               THE 'P A' COMMAND MAY BE ADDED TO THE\n*                               END OF THE SHUTDOWN MEMBER.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THE AUTOMATIC COMMAND FUNCTION IS NOT CONTROLLED BY THE\n*        OPERATOR.  INSTEAD, IT OPERATES ON A 1440 MINUTE CYCLE\n*        (60 MINUTES/HOUR AND 24 HOURS/DAY) WITHIN DAY-OF-WEEK\n*        AND MONTH-OF-YEAR CYCLES.  THIS MEANS THAT COMMANDS MAY\n*        BE SCHEDULED AT A SPECIFIED TIME OF DAY ON ANY (OR ALL)\n*        DAY(S) OF THE WEEK OR ANY DAY OF THE MONTH.\n*\n*        COMMANDS TO BE EXECUTED ARE CONATAINED IN MEMBERS THAT\n*        RESIDE IN THE 'COMMANDS' LIBRARY.  EACH MEMBER TO BE\n*        AUTOMATICALLY PROCESSED IS NAMED AS FOLLOWS.\n*\n*            @0100   THIS LIST OF COMMANDS IS TO BE PROCESSED AT\n*                    1:00 IN THE MORNING.\n*            @1423   THIS MEMBER WILL BE PROCESSED AT 2:23 PM.\n*\n*            @0000   THIS MEMBER WILL BE PROCESSED AT MIDNIGHT.\n*\n*        NOTE THAT THE MEMBER NAMES TO BE PROCESSED AUTOMATICALLY\n*        MUST BE PREFIXED WITH THE 'AT SIGN' (@), HOWEVER, THESE\n*        MEMBERS ARE NOT RESTRICTED FROM 'DEMAND' USE.\n*\n*\n*        COMMAND RECORD SYNTAX\n*\n*        EACH MEMBER CONTAINED IN THE 'COMMANDS' LIBRARY MUST FOLLOW\n*        THE SYNTAX DEFINED BELOW.  THIS IS TRUE FOR BOTH DEMAND\n*        COMMAND LISTS AS WELL AS AUTOMATIC COMMAND LISTS.\n*\n*        AN ASTERISK (*) IN COLUMN 1 DENOTES A COMMENT RECORD AND IS\n*        IGNORED BY THE PROCESSOR.  COMMANDS (RECORDS) ARE PROCESSED\n*        ONLY ON SPECIFIED DAYS OF THE WEEK AS INDICATED IN THE DAYS\n*        FIELD.  DAYS OF THE WEEK MUST BE IN THE ORDER SHOWN.\n*\n*        A NON-BLANK IN THE 'DAY-OF-THE-WEEK' FIELD REQUESTS PROCESSING\n*        ON THAT DAY.\n*\n*        FORMAT:\n*\n*        1    ===>BLANK            (AN ASTERISK SIGNIFIES A COMMENT)\n*        2-6  ===>MM/DD            (MONTH/DAY SPEC - SLASH REQ'D!)\n*        15   ===>(BLANK)\n*        8-14 ===>MTWTFSS          (DAY-OF-WEEK SPECIFICATION)\n*        15   ===>(BLANK)\n*        16   ===>COMMAND DATA     (THROUGH COLUMN 71)\n*        72   ===>CONTINUATION     (ONLY ONE CONTINUATION ALLOWED)\n*\n*        AN ASTERISK IN EITHER THE MM FIELD OR THE DD FIELD ALLOWS\n*        EXECUTION FOR ALL MONTHS OR ALL DAYS.  ASTERISKS IN BOTH\n*        FIELDS EFFECTIVELY NULLIFIES DAY-WITHIN-MONTH CRITERIA\n*        (IF '**/**' IS SPECIFIED, THE COMMAND IS SUBJECT ONLY TO\n*        DAY OF WEEK CRITERIA WHICH IS THE SAME AS ALL BLANKS IN\n*        THE MM/DD FIELD).  IF THE MM/DD FIELD IS NON-BLANK,\n*        THE REQUEST WILL BE PROCESSED ON THE MONTH/DAY SPECIFIED\n*        BUT IS ALSO SUBJECT TO DAY OF WEEK SPECIFICATIONS.\n*        IF A REQUEST IS TO BE PROCESSED ON THE SAME DAY OF EVERY\n*        MONTH, SPECIFY THE MONTH AS ASTERISKS ('**/05').  IF A\n*        REQUEST IS TO BE PROCESSED EVERY DAY OF A GIVEN MONTH,\n*        SPECIFY THE DAY AS ASTERISKS ('09/**').\n*\n*        CONTINUATION IS SUPPORTED ONLY IF THE SUBSEQUENT RECORD\n*        HAS 'ALL' BLANKS IN COLUMNS 1 THROUGH 15 AND CONTINUED\n*        DATA BEGINS IN COLUMN 16.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        EXAMPLES OF AUTOMATIC COMMANDS:\n*\n*   COLUMNS:  1      8       16                                   71\n*             ..     .       .                                    .\n*   COL-1---->*MM/DD MTWTFSS COMMAND------------------------------>72\n*\n* MEMBER=@0300\n*   COL-1---->       XXXXXX  F A,BACKUP1,BACKUP2,BACKUP3\n*   COL-1---->             X F A,BACKUPWK\n*   COL-1----> **/01 ******* F A,MONTH01\n*   COL-1----> **/01      S  F A,FIRSTSAT  SCHEDULE JOB ONLY ON THE\n*   COL-1----> **/02      S  F A,FIRSTSAT  1ST SATURDAY OF THE MONTH\n*   COL-1----> **/03      S  F A,FIRSTSAT            \"\n*   COL-1----> **/04      S  F A,FIRSTSAT            \"\n*   COL-1----> **/05      S  F A,FIRSTSAT            \"\n*   COL-1----> **/06      S  F A,FIRSTSAT            \"\n*   COL-1----> **/07      S  F A,FIRSTSAT            \"\n* MEMBER=@0755\n*   COL-1---->       MTWTF   START TCAM\n* MEMBER=@0800\n*   COL-1---->       MTWTF   F TCAM,TS=START\n*   COL-1---->       MTWTF   $HQ,P\n*   COL-1---->       MTWTF   $AQ,T\n* MEMBER=@0900\n*   COL-1---->       -       SEND 'TODAY IS BLUE MONDAY...KEEP SMILING*\n*   COL-1---->               '\n*   COL-1---->        -      SEND 'TODAY IS TUESDAY...FOUR MORE TO GO'\n*   COL-1---->         -     SEND 'TODAY IS WEDNESDAY...YOUR HALF WAY'\n*   COL-1---->          -    SEND 'TODAY IS THURSDAY...HANG IN THERE'\n*   COL-1---->           -   SEND 'THANK GOD IT''S FRIDAY'\n*   COL-1---->            -  SEND 'IT''S SATURDAY... DIDN''T YOU FINIS*\n*   COL-1---->               H?'\n*   COL-1---->             - SEND 'WOW... EVEN SUNDAY YOU WORK!!!!!!'\n* MEMBER=@1645\n*   COL-1---->       MTWTF   SE 'TSO WILL BE GOING DOWN AT FIVE SHARP'\n* MEMBER=@1655\n*   COL-1---->       MTWTF   SE 'TSO WILL BE GOING DOWN IN FIVE MINUTE*\n*   COL-1---->               S'\n* MEMBER=@1659\n*   COL-1---->       MTWTF   SE '**** TSO IS GOING DOWN IN ONE MINUTE X\n*   COL-1---->               ****'\n*   COL-1---->       MTWTF   SE '****   YOU WILL RECEIVE NO WARNING   X\n*   COL-1---->               ****'\n* MEMBER=@1700\n*   COL-1---->       MTWTF   F TCAM,TS=STOP\n*   COL-1---->       MTWTF   $HQ,T\n*   COL-1---->       MTWTF   $AQ,P\n*   COL-1----> 05/17 ******* F A,TESTJOB  SCHEDULE ONLY ON MAY 17\n*   COL-1----> 05/16 *****   F A,TESTWKDY SCHEDULE ONLY ON MAY 16 WD\n*   COL-1----> 05/16      ** F A,TESTWKND SCHEDULE ONLY ON MAY 16 WE\n* MEMBER=@1702\n*   COL-1---->       MTWTF   Z TP\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        EXAMPLES OF OPERATOR 'DEMAND' COMMANDS:\n*\n*   COL-1---->*      MTWTFSS COMMAND--------------------------->72\n*\n* MEMBER=IPL                            (  S AUTO.A,PARM=IPL  )\n*   COL-1---->       XXXXXXX S RMF.RMF\n*   COL-1---->       XXXXXXX S OPSWTR.OPSWTR\n*   COL-1---->       XXXXXXX F A,-VARYCONS,VARYALL,SETJES\n* MEMBER=SETJES                         (  F A,-SETJES )\n*   COL-1---->       XXXXXXX $TPRT1,Q=A\n*   COL-1---->       XXXXXXX $TI9,Z\n*   COL-1---->       XXXXXXX $SI9\n*   COL-1---->       XXXXXXX $SPRT1\n* MEMBER=SHUTDOWN                       (  F A,-SHUTDOWN  )\n*   COL-1---->       XXXXXXX $P\n*   COL-1---->       XXXXXXX $IPRT1\n*   COL-1---->       XXXXXXX $PLNE1\n*   COL-1---->       XXXXXXX $ELNE1\n*   COL-1---->       XXXXXXX P OPSWTR\n*   COL-1---->       XXXXXXX P RMF\n*   COL-1---->       XXXXXXX P A\n* MEMBER=UNLOAD                         (  F A,-UNLOAD  )\n*   COL-1---->       XXXXXXX U 180\n*   COL-1---->       XXXXXXX U 181\n*   COL-1---->       XXXXXXX U 182\n* MEMBER=VARYALL                        (  F A,-VARYALL  )\n*   COL-1---->       XXXXXXX V 180-188,ONLINE\n*   COL-1---->       XXXXXXX V 150-158,OFFLINE\n*   COL-1---->       XXXXXXX V 160-16F,ONLINE\n* MEMBER=VARYCONS                       (  F A,-VARYCONS  )\n*   COL-1---->       XXXXXXX V 120,CONSOLE,ROUT=(1,2,8,9,10,12,13,14,1*\n*   COL-1---->               5)\n*   COL-1---->       XXXXXXX V 121,CONSOLE,ROUT=(3,4,5,6)\n*   COL-1---->       XXXXXXX V 122,CONSOLE,ROUT=(7)\n*   COL-1---->       XXXXXXX V O-123,CONSOLE,ROUT=ALL\n* MEMBER=VARYOFF                        (  F A,-VARYOFF  )\n*   COL-1----> 09/**      XX V 150-158,OFFLINE  ONLY FOR SEPT WKEND\n*   COL-1---->       XXXXXXX V 160-168,OFFLINE\n*   COL-1---->       XXXXXXX V 170-178,OFFLINE\n*\n*  NOTE THAT THE COMMAND-LIST MEMBER MAY INCLUDE COMMANDS FOR THIS\n*  ROUTINE AS WELL.  THIS MAY OR MAY NOT BE DESIRABLE SINCE IF NOT\n*  CAUTIOUS, A LOOP COULD RESULT.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THIS ROUTINE IS 'NOT' RE-ENTRANT AND MUST BE LINKED AS\n*        'AUTHORIZED'.\n*\n*        BOB BECKER MAY ,1979  ALLEN-BRADLEY COMPANY .. MILWAUKEE\n*\n*        MODIFIED:\n*\n*        BRIAN WESTERMAN JUNE 1996 REPLACED STIMER EXIT ROUTINE\n*                        CALLED ENTRY950 WITH NEW ROUTINE TO FIX\n*                        S102 ABEND UNDER MVS/ESA V5.1+\n*\n*\n*        GERALD URBANEK JANUARY, 1988 WESTERN ATLAS INTERNATIONAL ..\n*        HOUSTON, TEXAS\n*\n*        CORRECTED TIMING PROBLEMS AT MIDNIGHT ON LIGHTLY LOADED\n*        HIGH SPEED PROCESSORS.\n*\n*\n*\n*\n*\n*        REGISTER USAGE\n*\n*        R0   - WORK\n*        R1   - WORK\n*        R2   - WORK\n*        R3   - WORK\n*        R4   - WORK\n*        R5   - WORK\n*        R6   - WORK\n*        R7   - WORK\n*        R8   - UNUSED\n*        R9   - QEDIT ORIGIN BASE\n*        R10  - DCBS\n*        R11  - BASE # 1\n*        R12  - BASE # 2\n*        R13  - SAVE AREA\n*        R14  - BAL\n*        R15  - WORK\n*\n*----------------------------------------------------------------------\n*   BW-MACROS ADED HERE SO THEY DON'T GET LOST\n*----------------------------------------------------------------------\n         MACRO\n&LABEL   $PROLOG &LV=0\n.**********************************************************************\n.*\n.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY\n.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD\n.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE\n.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS\n.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:\n.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE\n.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE\n.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA\n.*                                             REG 10 IS BASE\n.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES\n.*\n.**********************************************************************\n         LCLA  &AA,&AB,&AC\n         GBLB  &PRORG\n&AC      SETA  4096\n&LABEL   CSECT\n         B     32(R15)             BRANCH AROUND\n         DC    AL1(26)\n         DC    CL8'&LABEL'         CSECT NAME\n         DC    C'-'\n         DC    CL8'&SYSDATE'       COMPILE DATE\n         DC    C'-'\n         DC    CL8'&SYSTIME'       COMPILE TIME\n         CNOP  0,4                 ALIGNMENT\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             LOAD BASE REG\n         USING &LABEL,R12          INFORM ASSEMBLER\n         AIF   (&LV GT 4023).MERR\n         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE\n         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER\n         AIF   (&LV+72 LE 256).XC2\n         AIF   (&LV+72 LE 512).XC1\n         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE\n         LR    R2,R1               SAVE POINTER IN EVEN REG\n         LA    R4,1(R1)            SET RECEIVING POINTER\n         LR    R5,R0               SET RECEIVING LENGTH\n         BCTR  R5,R0               DECREMENT LENGTH\n         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE\n         LA    R3,1                SET SENDING LENGTH\n         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'\n         AGO   .STORE\n.XC1     ANOP\n         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA\n         XC    0(256,R1),0(R1)          CLEAR SAVE AREA\n         AGO   .STORE\n.XC2     ANOP\n         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA\n.STORE   ANOP\n         ST    R13,4(R1)           SAVE BACK CHAIN\n         ST    R1,8(R13)           SET FORWARD CHAIN\n         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS\n         L     R15,16(R13)         RESTORE REG 15\n         ST    R0,16(R13)          SAVE SAVEAREA LENGTH\n         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN\n         LR    R13,R11             SET SAVEAREA POINTER\n         AIF   (N'&SYSLIST EQ 0).MEND\n         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT\n         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT\n         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG\n         DROP  R12                 DROP ASSUMED BASE REG\n         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER\n.SKIPIT  ANOP\n&AA      SETA  2\n.LOOP    ANOP\n         AIF   (&AA GT N'&SYSLIST).MEXIT\n&AB      SETA  &AA-1\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG\n         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER\n&AC      SETA  &AC+4096\n&AA      SETA  &AA+1\n         AGO   .LOOP\n.MEXIT   ANOP\n         AIF   (&PRORG).MEX2\n         SPACE\n*        $REGS\n         SPACE\n.MEX2    ANOP\n&AA      SETA  &LV+72\n         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'\n         MEXIT\n.MEND    ANOP\n         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'\n         AGO   .MEXIT\n.MERR    ANOP\n         MNOTE 12,'LV > 4023 - REQUEST IGNORED'\n         AGO   .MEXIT\n         MEND\n         EJECT\n*----------------------------------------------------------------------\n*\n*----------------------------------------------------------------------\n         MACRO\n&LABEL   $EPILOG &RC\n&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS\n         L     R13,4(R13)          GET BACK CHAIN POINTER\n         L     R0,16(R13)          GET SAVEAREA LENGTH\n         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)\n         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS\n         AIF   (T'&RC EQ 'O').SPEC\n         LA    R15,&RC             SET RETURN CODE\n.SPEC    ANOP\n         BR    R14                 RETURN TO CALLER\n         MEND\n         EJECT\n*----------------------------------------------------------------------\n*\n*----------------------------------------------------------------------\n         MACRO\n&LABEL   $STCK  &NOGEN\n         LCLC   &L\n.**********************************************************************\n.****                                                             *****\n.****    THIS MACRO WILL PROVIDE THE DAY, DATE, AND TIME FROM     *****\n.****    THE TIME-OF-DAY CLOCK IN GREGORIAN (ENGLISH) FORMAT.     *****\n.****                                                             *****\n.****    IF INVOKED WITHOUT THE OPTIONAL 'NOGEN' KEYWORD, THE     *****\n.****    CONSTANTS NAMED BELOW WILL BE GENERATED.  IF THE         *****\n.****    'NOGEN' KEYWORD IS USED, THE USER MUST PROVIDE THIS      *****\n.****    ROUTINE WITH ADDRESSABILITY TO THEM AS PRE-DEFINED       *****\n.****    CONSTANTS.                                               *****\n.****                                                             *****\n.****    DAY    DS   X      A BINARY NUMBER (HEX) RELATIVE TO     *****\n.****                       THE DAY OF THE WEEK AS FOLLOWS        *****\n.****                       0=MONDAY, 1=TUESDAY, 2=WEDNESDAY,     *****\n.****                       3=THURSDAY, 4=FRIDAY,                 *****\n.****                       5=SATURDAY, 6=SUNDAY                  *****\n.****                                                             *****\n.****    DATE   DS   CL8    AN EIGHT CHARACTER FIELD CONTAINING   *****\n.****                       THE DATE IN MM/DD/YY FORMAT           *****\n.****                                                             *****\n.****    TIME   DS   CL8    AN EIGHT CHARACTER FIELD CONTAINING   *****\n.****                       THE TIME IN HH:MM:SS FORMAT           *****\n.****                                                             *****\n.****    NOTE THAT THE CALLER MUST PROVIDE A REGISTER SAVE AREA   *****\n.****    THAT BEGINS ON A DOUBLEWORD BOUNDARY TO BE USED AS A     *****\n.****    WORK AREA BY THIS ROUTINE (R-13 BASED).                  *****\n.****                                                             *****\n.**********************************************************************\n&L       SETC  '&SYSNDX'\n&LABEL   STCK  8(13)              STORE THE TIME-OF-DAY CLOCK\n         LM    0,1,8(13)          LOAD INTO WORK REGS\n         L     15,16              GET CVT ADDRESS\n         A     0,304(15)          ADD LOCAL TIME DEVIATION\n         SRDL  0,12               ISOLATE NUMBER OF MICROSECONDS\n         D     0,=F'60000000'     DIVIDE BY 60M (R1=MINUTES AFT EPOCH)\n         LR    15,0               COPY REMAINDER OF MICS TO GET SECS\n         SR    14,14              CLEAR FOR DIVIDE\n         D     14,=F'951424'      DIVIDE TO GET REMAINING SECONDS (R5)\n         LR    14,15              COPY TO WORK REG\nS&L.B    SL    14,=F'60'          DECREMENT BY 60 SECONDS\n         BM    S&L.S              LESS THAN SIXTY, CONTINUE\n         SL    15,=F'60'          MORE THAN SIXTY, ADJUST FOR LEAP\n         AL    1,=F'1'            BUMP MINUTES\n         B     S&L.B              CHECK AGAIN\nS&L.S    CVD   15,8(13)           CONVERT SECONDS TO PACKED FORMAT\n         UNPK  24(4,13),14(2,13)  UNPACK SECONDS FOR PRINT\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   TIME+6(2),26(13)   MOVE THE SECONDS\n         CVD   1,8(13)            CONVERT MINUTES TO PACKED FORMAT\n         DP    8(8,13),=P'60'     DIVIDE INTO HOURS AND MINUTES\n         UNPK  24(4,13),14(2,13)  UNPACK THE MINUTES\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   TIME+3(2),26(13)   MOVE THE MINUTES\n         ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH\n         DP    8(8,13),=P'24'     DIVIDE INTO DAYS AND HOURS\n         UNPK  24(4,13),14(2,13)  UNPACK THE HOURS\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   TIME(2),26(13)     MOVE THE HOURS\n         MVI   TIME+2,C':'        ADD COLIN\n         MVI   TIME+5,C':'        ADD COLIN\n         ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH\n         DP    8(8,13),=P'7'      DIVIDE BY NUMBER OF DAYS IN A WEEK\n         ZAP   8(8,13),15(1,13)   FILL DOUBLEW WITH THE REMAINDER\n         CVB   0,8(13)            CONVERT RELATIVE DAY TO BINARY\n         STC   0,DAY              SET RELATIVE DAY OF WEEK\n         ZAP   16(8,13),8(8,13)   SAVE THE NUMBER OF DAYS\n         L     1,16               GET CVT ADDRESS\n         MVC   24(4,13),57(1)     MOVE CVT DATE TO WORK AREA\n         ZAP   8(8,13),=P'0'      ZERO WORK AREA\n         MVO   14(2,13),24(1,13)  MOVE YEAR PORTION\n         UNPK  DATE+6(2),14(2,13) UNPACK INTO OUTPUT AREA\n         LA    15,S&L.T           LOAD ADDR OF TABLE\n         CVB   1,8(13)            CONVERT TO BIN\n         SLL   1,30               SHIFT ALL BUT LAST TWO\n         LTR   1,1                TEST RESIDUAL\n         BNZ   *+8                NOT 0, BRANCH\n         LA    15,S&L.TL          LEAP YEAR\n         LR    14,15              SAVE TABLE IN USE\n         ZAP   8(8,13),25(2,13)   MOVE DAY PORTION\n         CVB   0,8(13)            CONVERT TO BIN\n         SR    1,1                CLEAR REG\n         IC    1,0(15)            LOAD CHAR FROM TABLE\n         LA    15,1(15)           INDEX TABLE POINTER\n         SR    0,1                SUBTRACT FROM WORK VALUE\n         BP    *-10               STILL POSITIVE, DO AGAIN\n         AR    0,1                ELSE, ADD IT BACK\n         CVD   0,8(13)            CONVERT TO DEC\n         UNPK  DATE+3(2),14(2,13) UNPACK DAY INTO OUTPUT\n         SR    15,14              FIND VALUE OF CURRENT INDEX\n         CVD   15,8(13)           CONVERT TO DEC\n         UNPK  DATE(2),14(2,13)   UNPACK MONTH INTO OUTPUT\n         OI    DATE+1,C'0'        INSURE NUMERICS\n         OI    DATE+4,C'0'        INSURE NUMERICS\n         OI    DATE+7,C'0'        INSURE NUMERICS\n         MVI   DATE+2,C'/'        ADD SLASH\n         MVI   DATE+5,C'/'        ADD SLASH\n         B     S&L.E              BRANCH AROUND CONSTANTS\nS&L.T    DC    AL1(31,28,31,30,31,30,31,31,30,31,30,31) MONTH TABLE\nS&L.TL   DC    AL1(31,29,31,30,31,30,31,31,30,31,30,31) LEAP YEAR\n         AIF    (T'&NOGEN NE 'O').NOGEN   NOGEN SPECIFIED, SKIP\nDAY      DC    XL1'00'            RELATIVE DAY OF THE WEEK\nDATE     DC    C'  /  /  '        CURRENT DATE\nTIME     DC    C'  :  :  '        CURRENT TIME\n.NOGEN   ANOP\nS&L.E    DS    0H\n         MEND\n         EJECT\n*----------------------------------------------------------------------\n*\n*----------------------------------------------------------------------\n*          DATA SET SFALLOC    AT LEVEL 006 AS OF 05/17/78\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*               DDDDDDDDD                     AAAAAAAAAA              *\n*              DDDDDDDDDD                   AAAAAAAAAAAA              *\n*             DD       DD                  AA        AA               *\n*            DD        DD                 AA        AA                *\n*           DD        DD                 AA        AA                 *\n*          DD        DD                 AAAAAAAAAAAA                  *\n*         DD        DD                 AAAAAAAAAAAA                   *\n*        DD        DD                 AA        AA                    *\n*       DD        DD                 AA        AA                     *\n*      DD        DD                 AA        AA                      *\n*     DDDDDDDDDDD                  AA        AA                       *\n*    DDDDDDDDDD                   AA        AA                        *\n*                                                                     *\n* 1978                                                                *\n*        USAGE -THIS MACRO MADE BE USED  MULTIPLE TIMES IN ONE        *\n*              PROGRAM AND GENERATE UNIQUE LABELS VIA THE 'UNQSUF'    *\n*              PARAMETER.  PRIOR TO ISSUING SVC 99 REGISTER 1 MUST    *\n*              CONTAIN THE ADDRESS OF   THIS PARAMETER LIST.          *\n*              EX. -      PARMLIB   DA  DSN='SYS1.PARMLIB'            *\n*                                   ... ANY OTHER CODE                *\n*                                   LA  R1,PARMLIB                    *\n*                                   SVC 99                            *\n*                                   ... ANY OTHER CODE                *\n*        DEFAULTS -THERE ARE NO DEFAULTS FOR ANY PARM.    THE ONLY    *\n*              PARMETERS THAT WILL BE GENERATED FOR DYNAMIC           *\n*              ALLOCATION ARE THE ONES  THAT ARE SPECIFICALLY CODED.  *\n*              THE TYPE OF CALL TO DYNAMIC ALLOCATION DEFAULTS TO     *\n*              ALLOCATION.  BY CODING IN A VALUE FOR DEALLOC, THE     *\n*              PARAMETERS WILL DEALLOCATE THE RESOURCE INSTEAD OF     *\n*              ALLOCATING IT.                                         *\n*                                                                     *\n*        LABELS - LABELS HAVE BEEN PROVIDED FOR OFTEN USED FIELDS.    *\n*              SOME OF THESE ARE :                                    *\n*                      1. DAER    WHICH  POINTS TO THE ERROR CODE     *\n*                                       FROM SVC 99                   *\n*                      2. DAIN    WHICH  POINTS TO THE INFORMATION    *\n*                                       CODE FROM SVC 99              *\n*              ALSO, EACH VALUE SUCH AS THE DSNAME TO ALLOCATE        *\n*              HAS A LABEL ASSOCIATED WITH IT FOR EASY REFERENCE.     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         MACRO\n&NAME    DA    &DSN=,              THE DATASET NAME                    X\n               &DDN=,              DDNAME TO ALLOCATE OR DEALLOCATE    X\n               &MEM=,              MEMBER NAME FOR PDS OR BIAS FOR GDG X\n               &STATUS=,           PRIMARY DISPOSITION                 X\n               &DISP=,             DISPOSITION IF NORMAL EOJ           X\n               &CDISP=,            DISPOSITION IF ABNORMAL EOJ         X\n               &SPACE=,            PRIMARY SPACE REQUIREMENT           X\n               &TYPSP=,            TYPE OF SPACE TO ALLOCATE           X\n               &SECSP=,            SECONDARY SPACE REQUIREMENT         X\n               &VOLSER=,           VOLUME SERIAL #                     X\n               &UNIT=,             UNIT DESIGNATION                    X\n               &SYSOUT=,           CLASS SPECIFICATION FOR SYSOUT      X\n               &FREE=,             DEALLOCATE AT CLOSE                 X\n               &COPIES=,           COPIES OF YOUR SYSOUT               X\n               &LABEL=,            TYPE LABEL - SL,NL,ETC.             X\n               &EXPDT=,            EXPIDATION DATE                     X\n               &RETPD=,            RETENTION PERIOD                    X\n               &DUMMY=,            ALLOCATE A DUMMY DATA SET           X\n               &BLKSIZE=,          BLOCK SIZE                          X\n               &FUNC=,             FOR PUNCH OUTPUT INTERPRETING       X\n               &FORM=,             FORM NAME SPECIFICATION.            X\n               &LRECL=,            LOGICAL RECORD LENGTH               X\n               &DIRSP=,            # OF DIRECTORY BLOCKS OR INDEX SPACEX\n               &RLSE=,             TO REQUEST THE RELEASE OF UNUSED SP X\n               &UNQSUF=,           UNIQUE SUFFIX FOR LABEL NAMES LEN=4 X\n               &DCB=,              SPECIFY A DSNAME TO COPY DCB FROM   X\n               &DEALLOC=\n         LCLA  &A,&K,&A2\n         LCLC  &X,&NM\n&X       SETC  '&UNQSUF'\n&NAME    DS    0F\n         DC    X'80'\n         DC    AL3(DARB&X)\nDARB&X   DS    0F\n         DC    AL1(20)\n         AIF   (T'&DEALLOC EQ 'O').ALLOC\n         DC    AL1(02)             THIS CONTROL BLOCK IS FOR DEALLOCATE\n         AGO   .PAST\n.ALLOC   DC    AL1(01)             THIS CONTROL IS FOR ALLOCATION\n.PAST    DC    AL2(0)\nDAER&X   DC    AL2(0)              ERROR CODE FROM DYNAMIC ALLOCATION\nDAIN&X   DC    AL2(0)              INFORMATION CODE FROM DYNALLOC\n         DC    A(TS&X)             POINTER TO CALL LIST FOR SVC 99\n         DC    XL8'0'              RESERVED\n&A       SETA  1\n         DS    0F                  FULLWORD ALIGNED\nTS&A&X   DC    X'0001'             KEY FOR DDNAME SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&DDN\n         DC    XL2'&K'             LENGTH OF DDNAME SPECIFIED\nDADN&X   DC    C'&DDN'             DDNAME PLUGGED IN HERE\n&A       SETA  &A+1\n         AIF   (T'&DSN EQ 'O').A\n         DS    0F\nTS&A&X   DC    X'0002'             KEY FOR DSNAME SPECIFICATION\n         DC    XL2'1'\n         DC    AL2(44)             LENGTH OF DSNAME MAX IS 44\nDADS&X   DC    CL44'&DSN'          DSNAME IS PLUGGED IN HERE\n&A       SETA  &A+1\n.A       AIF   (T'&MEM EQ 'O').B\n         DS    0F\nTS&A&X   DC    X'0003'             KEY FOR MEMBER OR GDG SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&MEM\n         DC    XL2'&K'             LENGTH OF SPECFIED MEMBER NAME\nDAMB&X   DC    C'&MEM'             THE MEMBER NAME IS PLUGGED IN HERE\n&A       SETA  &A+1\n.B       AIF   (T'&STATUS EQ 'O').C\n         DS    0F\nTS&A&X   DC    X'0004'             KEY FOR PRIMARY DISPOSITION OF DDN\n         DC    XL2'1'\n         DC    XL2'1'              THIS IS ALWAYS A ONE BYTE CODE\n&A       SETA  &A+1\n         AIF   ('&STATUS' EQ 'OLD').B1       OLD = X'01'\n         AIF   ('&STATUS' EQ 'MOD').B2       MOD = X'02'\n         AIF   ('&STATUS' EQ 'NEW').B3       NEW = X'04'\n         AIF   ('&STATUS' EQ 'SHR').B4       SHR = X'08'\n         MNOTE 8,'&STATUS INVALID FOR STATUS'\n         AGO   .C\n.B1      DC    X'1'                CONSTANT FOR DISP=OLD\n         AGO   .C\n.B2      DC    X'2'                CONSTANT FOR DISP=MOD\n         AGO   .C\n.B3      DC    X'4'                CONSTANT FOR DISP=NEW\n         AGO   .C\n.B4      DC    X'8'                CONSTANT FOR DISP=SHR\n         AGO   .C\n.C       AIF   (T'&DISP EQ 'O').D\n         DS    0F\nTS&A&X   DC    X'0005'             KEY FOR NORMAL EOJ SPECIFICATION\n&A       SETA  &A+1\n         DC    XL2'1'\n         DC    XL2'1'              THIS WILL ALWAYS BE A ONE BYTE KEY\n         AIF   ('&DISP' EQ 'UNCATLG').C1     UNCATLG = X'01'\n         AIF   ('&DISP' EQ 'CATLG').C2       CATLG   = X'02'\n         AIF   ('&DISP' EQ 'DELETE').C3      DELETE  = X'04'\n         AIF   ('&DISP' EQ 'KEEP').C4        KEEP    = X'08'\n         MNOTE 8,'&DISP INVALID FOR DISP'    ALL ELSE IS WRONG\n         AGO   .D\n.C1      DC    X'1'                CONSTANT FOR UNCATLG AT NORMAL EOJ\n         AGO   .D\n.C2      DC    X'2'                CONSTANT FOR CATLG  AT NORMAL EOJ\n         AGO   .D\n.C3      DC    X'4'                CONSTANT FOR DELETE AT NORMAL EOJ\n         AGO   .D\n.C4      DC    X'8'                CONSTANT FOR KEEP   AT NORMAL EOJ\n         AGO   .D\n.D       AIF   (T'&CDISP EQ 'O').E\n         DS    0F\nTS&A&X   DC    X'0006'             KEY FOR ABNORMAL EOJ DISPOSITION\n&A       SETA  &A+1\n         DC    XL2'1'\n         DC    XL2'1'              THIS IS ALWAYS A ONE BYTE KEY\n         AIF   ('&CDISP' EQ 'UNCATLG').D1      UNCATLG = X'01'\n         AIF   ('&CDISP' EQ 'CATLG').D2        CATLG   = X'02'\n         AIF   ('&CDISP' EQ 'DELETE').D3       DELETE  = X'04'\n         AIF   ('&CDISP' EQ 'KEEP').D4         KEEP    = X'08'\n         MNOTE 8,'&CDISP INVALID FOR DISP'     ALL ELSE IS WRONG\n         AGO   .E\n.D1      DC    X'1'                CONSTANT FOR UNCATLG IF ABEND\n         AGO   .E\n.D2      DC    X'2'                CONSTANT FOR CATLG  IF ABEND\n         AGO   .E\n.D3      DC    X'4'                CONSTANT FOR DELETE IF ABEND\n         AGO   .E\n.D4      DC    X'08'               CONSTANT FOR KEEP   IF ABEND\n         AGO   .E\n.E       AIF   (T'&TYPSP EQ 'O').I\n         DS    0F\n         AIF   ('&TYPSP' EQ 'TRK').E1  IF TYPE OF SPACE SPECIFICATION\n         AIF   ('&TYPSP' EQ 'CYL').E2  IS NOT TRACKS OR CYLINDERS THEN\nTS&A&X   DC    X'0009'                 IT MUST BE IN BLOCKS\n         DC    XL1'1'\n         DC    XL1'3'\n         DC    AL3(&TYPSP)\n&A       SETA  &A+1\n         AGO   .F\n.E1      ANOP\nTS&A&X   DC    X'0007'             SPACE IS TO BE ALLOCATED IN TRKS\n         DC    XL2'0'\n&A       SETA  &A+1\n         AGO   .F\n.E2      ANOP\nTS&A&X   DC    X'0008'             SPACE IS TO BE ALLOCATED IN CYLS\n         DC    XL2'0'\n&A       SETA  &A+1\n.F       AIF   (T'&SPACE EQ 'O').FO\n         DS    0F\nTS&A&X   DC    X'000A'             KEY TO SPECIFY PRIMARY SPACE\n         DC    XL2'1'\n         DC    XL2'3'              MAXIMUM LENGTH IS THREE\nDASP&X   DC    AL3(&SPACE)\n&A       SETA  &A+1\n         AGO   .G\n.FO      MNOTE 8,'PRIMARY SPACE OMITTED'   TYPSP REQUIRES AT LEAST\n         AGO   .I                  THE PRIMARY SPACE SPECIFICATION\n.G       AIF   (T'&SECSP EQ 'O').H\n         DS    0F\nTS&A&X   DC    X'000B'             KEY TO SPECIFY SECONDARY SPACE\n         DC    XL2'1'\n         DC    XL2'3'              MAXIMUM LENGTH IS THREE\nDASS&X   DC    AL3(&SECSP)\n&A       SETA  &A+1\n.H       AIF   (T'&DIRSP EQ 'O').I\n         DS    0F\nTS&A&X   DC    X'000C'             KEY TO SPECIFY DIRECTORY SPACE\n         DC    XL2'1'\n         DC    XL2'3'              MAXIMUM LENGTH IS THREE\nDADI&X   DC    AL3(&DIRSP)\n&A       SETA  &A+1\n.I       AIF   (T'&VOLSER EQ 'O').J\n         DS    0F\nTS&A&X   DC    X'0010'             KEY TO SPECIFY A PARTICULAR VOLSER\n         DC    XL2'1'\n&K       SETA  K'&VOLSER           PICK UP LENGTH OF NAME SPECIFIED\n         DC    XL2'&K'             AND USE THAT LENGTH\nDAVO&X   DC    C'&VOLSER'          AND NAME\n&A       SETA  &A+1\n.J       AIF   (T'&UNIT EQ 'O').K\n         DS    0F\nTS&A&X   DC    X'0015'             KEY FOR UNIT SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&UNIT             PICK UP LENGTH OF UNIT NAME GIVEN\n         DC    AL2(&K)             THEN USE THAT LENGTH\nDAUN&X   DC    C'&UNIT'            AND NAME\n&A       SETA  &A+1\n.K       AIF   (T'&SYSOUT EQ 'O').L\n         DS    0F\nTS&A&X   DC    X'0018'             KEY FOR SYSOUT CLASS SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&SYSOUT\n         DC    AL2(&K)\nDASY&X   DC    C'&SYSOUT'\n&A       SETA  &A+1\n.L       AIF   (T'&FORM EQ 'O').M\n         DS    0F\nTS&A&X   DC    X'001A'             KEY FOR FORMS ID SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&FORM             PICK UP LENGTH OF FORMS ID\n         DC    AL2(&K)             AND USE THAT LENGTH\nDAFM&X   DC    C'&FORM'            AND THAT FORM NUMBER\n&A       SETA  &A+1\n.M       AIF   (T'&FREE EQ 'O').N\n         AIF   ('&FREE' NE 'CLOSE').M2\n         DS    0F\nTS&A&X   DC    X'001C'             KEY TO SPECIFY FREE=CLOSE\nDACL&X   DC    XL2'0'              MUST BE CODED FREE=CLOSE\n&A       SETA  &A+1                ALL ELSE WILL GENERATE MNOTE\n         AGO   .N\n.M2      MNOTE 8,'&FREE INVALID FOR FREE'\n.N       AIF   (T'&COPIES EQ 'O').O\n         DS    0F\nTS&A&X   DC    X'001D'             KEY TO SPECIFY MULTIPLE COPIES\n         DC    XL2'1'              OF OUTPUT.\n         DC    XL2'1'\nDACO&X   DC    AL1(&COPIES)        NUMBER OF COPIES REQUESTED\n&A       SETA  &A+1\n.O       AIF   (T'&LABEL EQ 'O').P\n         DS    0F\nTS&A&X   DC    X'001E'             KEY TO SPECIFY TYPE LABEL\n         DC    XL2'1'\n         DC    XL2'1'              LENGTH OF THIS FIELD IS ALWAYS ONE\n&A       SETA  &A+1\n         AIF   ('&LABEL' EQ 'NL').O1     NL  = X'01'\n         AIF   ('&LABEL' EQ 'SL').O2     SL  = X'02'\n         AIF   ('&LABEL' EQ 'NSL').O3    NSL = X'04'\n         AIF   ('&LABEL' EQ 'SUL').O4    SUL = X'08'\n         AIF   ('&LABEL' EQ 'BLP').O5    BLP = X'10'\n         AIF   ('&LABEL' EQ 'LTM').O6    LTM = X'21'\n         AIF   ('&LABEL' EQ 'AL').O7     AL  = X'40'\n         AIF   ('&LABEL' EQ 'AUL').O8    AUL = X'48'\n         MNOTE 8,'&LABEL INVALID FOR LABEL'\n         AGO   .P\n.O1      DC    X'1'               LABEL = NL\n         AGO   .P\n.O2      DC    X'2'                LABEL = SL\n         AGO   .P\n.O3      DC    X'04'               LABEL = NSL\n         AGO   .P\n.O4      DC    X'08'               LABEL = SUL\n         AGO   .P\n.O5      DC    X'10'               LABEL = BLP\n         AGO   .P\n.O6      DC    X'21'               LABEL = LTM\n         AGO   .P\n.O7      DC    X'40'               LABEL = AL\n         AGO   .P\n.O8      DC    X'48'               LABEL = AUL\n         AGO   .P\n.P       AIF   (T'&EXPDT EQ 'O').Q\n         DS    0F\nTS&A&X   DC    X'0022'             KEY TO SPECIFY EXPIRATION DATE\n         DC    XL2'1'\n         DC    XL2'5'              FIELD IS FIVE NUMERICS\nDAEX&X   DC    CL5'&EXPDT'         AND IS PUT IN HERE\n&A       SETA  &A+1\n.Q       AIF   (T'&RETPD EQ 'O').R\n         DS    0F\nTS&A&X   DC    X'0023'             KEY TO SPECIFY A RETENTION PERIOD\n         DC    XL2'1'\n         DC    XL2'2'              MAXIMUM LENGTH IS TWO\nDARP&X   DC    AL2(&RETPD)         AND IS PLACED HERE.\n&A       SETA  &A+1\n.R       AIF   (T'&DUMMY EQ 'O').S\n         DS    0F\nTS&A&X   DC    X'0024'             KEY TO ALLOCATE A DUMMY DATA SET\n         DC    XL2'0'\n         DC    XL2'0'\n         DC    X'0'\n&A       SETA  &A+1\n.S       AIF   (T'&BLKSIZE EQ 'O').T\n         DS    0F\nTS&A&X   DC    X'0030'             KEY TO SPECIFY THE BLOCKSIZE\n         DC    XL2'1'\n         DC    XL2'2'\nDABS&X   DC    AL2(&BLKSIZE)\n&A       SETA  &A+1\n.T       AIF   (T'&FUNC EQ 'O').U\n         DS    0F\n         AIF   ('&FUNC' EQ 'I').T2\n         MNOTE 8,'&FUNC INVALID FOR FUNC'\n         AGO   .U\n.T2      ANOP\nTS&A&X   DC    X'005A'\n         DC    XL2'1'\n         DC    XL2'1'\n         DC    X'80'\n&A       SETA  &A+1\n.U       AIF   (T'&LRECL EQ 'O').V\n         DS    0F\nTS&A&X   DC    X'0042'             KEY TO SPECIFY THE LRECL\n         DC    XL2'1'\n         DC    XL2'2'\n         DC    AL2(&LRECL)\n&A       SETA  &A+1\n.V       AIF   (T'&RLSE EQ 'O').W\n         DS    0F\nTS&A&X   DC    X'000D'             KEY  TO SPECIFY RELEASE SPACE\n         DC    XL2'0'\n&A       SETA  &A+1\n.W       AIF   (T'&DCB EQ 'O').X\n         DS    0F\nTS&A&X   DC    X'002C' KEY TO SPECIFY DCB REFERENCE NAME\n         DC    XL2'1'\n&K       SETA  K'&DCB\n         DC    XL2'&K'             LENGTH OF DSN SPECIFIED\nDCB&X    DC    C'&DCB'             DSNAME TO COPY DCB FROM\n&A       SETA  &A+1\n.X       ANOP\n.*\n.*\n.*\n.*\n         DS    0F\n&A2      SETA  1\n&A       SETA  &A-1\n&NM      SETC  'TS&X'\n.CM1     AIF   (&A2 EQ &A).CM2\n&NM      DC    A(TS&A2&X)\n&NM      SETC  ' '\n&A2      SETA  &A2+1\n         AGO   .CM1\n.CM2     DC    X'80'\n         DC    AL3(TS&A2&X)\n         MEND\n*----------------------------------------------------------------------\n*   BW - END OF MACROS\n*----------------------------------------------------------------------\n         EJECT\n*----------------------------------------------------------------------\n*\n*        INITIALIZATION\n*\n*----------------------------------------------------------------------\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nAUTO     $PROLOG R11,R12          ENTRY LINKAGE\n         USING IHADCB,R10         DCB DSECT\n         B     ENTRY010\n*XOFFSET  EQU   BWPOST-AUTO\n*\nBWPOST   STM   R14,R12,12(R13)\n         LR    R11,R15\n         B     SKOFFST\nXOFFSET  EQU   BWPOST-AUTO\nSKOFFST  LA    R15,XOFFSET\n         SR    R11,R15\n         LA    R12,4095\n         LA    R12,1(R11,R12)\n         LR    R3,R13\n         LA    R13,EXITSA\n         ST    R3,4(0,R13)\n         ST    R13,8(0,R3)\n         POST  TIMEECB\n         L     R13,4(0,R13)\n         LM    R14,R12,12(R13)\n         BR    R14\nEXITSA   DS    18F\nENTRY010 DS    0H\n         L     R1,0(R1)           PARM POINTER\n         XR    R2,R2              CLEAR R2\n         ICM   R2,3,0(R1)         ANY PARM ?\n         BZ    BBB010             NO - NOT STARTED AT IPL\n         CH    R2,=H'8'           MAX PARM LENGTH ?\n         BNH   AAA010             NO - OK\n         WTO   '** AUTO ** - INVALID PARM LENGTH, IGNORED'\n         B     BBB010\nAAA010   EQU   *\n         BCTR  R2,R0              DECR FOR EXECUTE\n         EX    R2,MVC010          MOVE PARM TO MEMBER\nBBB010   EQU   *\n         OPEN  (COMMANDS,,DIR,,INTRDR,(OUTPUT))\n         TM    COMMANDS+DCBOFLGS-IHADCB,DCBOFOPN  IS IT OPEN ?\n         BZ    ERROR1             NO - ERROR\n         BAL   R14,ENTRY999       SET UP THE DATE/TIME/DAY FIELDS\n         L     R0,BUFSIZE         MAX BLKSIZE\n         GETMAIN R,LV=(0)\n         ST    R1,BUFFER          STORE FOR USE AS READ BUFFER\nEXIT010  EQU   *\n         B     ENTRY020\n         LTORG\nMVC010   MVC   MEMBER(0),2(R1)\n         EJECT\n*----------------------------------------------------------------------\n*\n*        INITIALIZE CONSOLE COMMUNICATION INTERFACE\n*\n*----------------------------------------------------------------------\nENTRY020 DS    0H\n         EXTRACT COMM,'S',FIELDS=(COMM)\n         L     R1,COMM            GET ADDRESS OF COMMUNICATIONS FIELDS\n         L     R0,0(R1)           GET COMMUNICATIONS ECB ADDRESS\n         ST    R0,COMMECB         SAVE ECB ADDRESS IN WAIT LIST\n         LA    R9,4(R1)           GET ORIGIN ADDRESS FOR QEDIT\n         ICM   R1,15,0(R9)        IS THERE A START COMMAND CIB WAITING\n         BZ    AAA020             NO, MUST BE BATCH EXECUTION\n         QEDIT ORIGIN=(R9),BLOCK=(R1)  YES, FREE START COMMAND CIB\nAAA020   EQU   *\n         QEDIT ORIGIN=(R9),CIBCTR=255  ALLOW STACKED COMMANDS (255)\nEXIT020  EQU   *\n         B     ENTRY030\nCOMM     DC    F'0'\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        IPL COMMAND EXECUTION\n*\n*----------------------------------------------------------------------\nENTRY030 DS    0H\n         CLC   MEMBER,BLANKS      ANY PARM ?\n         BE    EXIT030            NO - THIS IS NOT IPL START\n         BAL   R14,ENTRY900       PROCESS IPL MEMBER\nEXIT030  EQU   *\n         B     ENTRY040\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        SET UP TIMER\n*\n*----------------------------------------------------------------------\nENTRY040 DS    0H\n         POINT DIR,=X'00000100'   POINT TO FIRST RECORD IN DIRECTORY\n         USING DIRDSECT,R3\n         TIME  DEC\n         STCM  R0,12,HHMM         STORE TIME HHMM\n         UNPK  @TIME(5),HHMM      MOVE TO STIMER TIME FIELD\n         MVC   @TIME+4(2),=2C'0'\nAAA040   EQU   *\n         L     R3,BUFFER          ADDR OF BUFFER\n         READ  DIRDECB,SF,DIR,(R3),'S'  READ DIRECTORY\n         CHECK DIRDECB            AND OF COURSE WAIT\n         XR    R1,R1              CLEAR A WORK REG\n         ICM   R1,3,0(R3)         LNGTH OF DATA IN DIR BLK\n         LA    R5,0(R1,R3)        END OF DATA IN DIR BLK\n         LA    R3,2(R3)           INCR TO FIRST MEMBER NAME\nLOOP040A EQU   *\n         CLC   DIRNAME,=8X'FF'    END OF MEMBERS ?\n         BE    DDD040             YES - CHECK FOR LO MEMBER\n         CLI   DIRNAME,C'@'       TOD MEMBER ?\n         BNE   CCC040             NO -SKIP IT\n         LA    R1,DIRNAME+1       SECOND BYTE OF DIRNAME\n         LA    R15,4              LOOP CONTROL - HHMM\nLOOP040B EQU   *\n         TM    0(R1),X'F0'        NUMERIC ?\n         BNO   CCC040             NO - SKIP THIS MEMBER\n         LA    R1,1(R1)           BUMP TO NEXT BYTE\n         BCT   R15,LOOP040B\n         CLC   DIRNAME+6(2),BLANKS  MUST BE BLANKS\n         BE    BBB040             YES - OK\n         MVC   WTO040+28(8),DIRNAME  NO - INFORM OPER\nWTO040   WTO   '** AUTO ** - MEMBER //////// INVALID FOR TOD PROCESSINGX\n               , IGNORED'\n         B     CCC040\nBBB040   EQU   *\n         CLC   DIRNAME+1(4),@TIME  MUST BE HIGHER\n         BH    GGG040             PROCESS THIS MEMBER\nCCC040   EQU   *\n         NI    DIRC,X'1F'         TURN OFF UNNEEDED BITS\n         XR    R1,R1              CLEAR R1\n         IC    R1,DIRC            NUMBER OF USER HALFWORDS\n         SLL   R1,1               NUMBER OF USER BYTES\n         LA    R3,12(R1,R3)       INCR TO NEXT DIR ENTRY\n         CR    R3,R5              PAST END OF DIR BLOCK ?\n         BL    LOOP040A           NO - CHECK THIS DIR ENTRY\n         B     AAA040             YES - GET NEXT DIR BLOCK\nDDD040   EQU   *                  ALSO EODAD FOR DIR READS\n         AP    HHMM,=P'1000'      ADD 1 HOUR\n         MVI   HHMM+1,X'00'       CLEAR MM\n         CP    HHMM,=P'24000'     MIDNITE ?\n         BL    EEE040             NO - OK\n*    FOLLOWING TWO INSTRUCTIONS ADDED TO CORRECT TIMING PROBLEMS AT\n*    MIDNIGHT ON LIGHTLY LOADED HIGH SPEED PROCESSORS\n*\n         CLC   @TIME(4),=C'2359'  IS IT MIDNIGHT  ????      GRU 01/88\n         BE    ENTRY040           YES GET PAST MIDNIGHT     GRU 01/88\n*\n*\n         MVC   @TIME,=C'23595999' SET MIDNIGHT AS TIMER VALUE\n         B     III040             GO TO IT\nEEE040   EQU   *\n         UNPK  @TIME(5),HHMM      SET DEFAULT TO CHECK AGAIN NEXT HOUR\n         B     HHH040\nGGG040   EQU   *\n         MVC   @TIME(4),DIRNAME+1  YES - NEW TIMER VALUE\nHHH040   EQU   *\n         MVC   @TIME+4(4),=4C'0'\nIII040   EQU   *\n         XC    TIMEECB,TIMEECB\n         STIMER  REAL,BWPOST,TOD=@TIME\nEXIT040  EQU   *\n         B     ENTRY050\n         DROP  R3\n         LTORG\nHHMM     DC    PL3'0'\n@TIME    DC    D'0'\n         EJECT\n*----------------------------------------------------------------------\n*\n*        WAIT FOR MODIFY OR TIMER POP\n*\n*----------------------------------------------------------------------\nENTRY050 DS    0H\n         WAIT  1,ECBLIST=ECBLIST,LONG=YES  WAIT UNTIL AN ECB IS POSTED\n         L     R1,COMMECB         ADDR OF COMMUNICATIONS ECB\n         CLI   0(R1),X'00'        CHECK FOR OPERATOR REQUEST\n         BNE   ENTRY060           YES--GO TO PROCESS OPER REQ\n         CLI   TIMEECB,X'00'      DID THE TIMER POP ?\n         BNE   ENTRY300           YES--GO PROCESS TIME REQUEST\n         B     ENTRY050           HMMM.. DON'T KNOW, RETRY\n         LTORG\nECBLIST  DS    0F\nCOMMECB  DC    A(0)\n         DC    X'80',AL3(TIMEECB)\n         EJECT\n*----------------------------------------------------------------------\n*\n*        CHECK FOR OPERATOR REQUEST\n*\n*----------------------------------------------------------------------\nENTRY060 DS    0H\n         L     R3,0(R9)           GET ADDRESS OF THE CIB\n         USING CIBSECT,R3         ALLOW ADDRESSABILITY\n         CLI   CIBVERB,X'40'      IS IT THE STOP COMMAND ?\n         BE    RETURN             YES - TO CLEAN UP ROUTINE\n         MVC   COMMDATA,BLANKS    CLEAR THE DATA BUFFER\n         IC    R15,CIBDSIZE+1     GET SIZE OF MODIFY DATA\n         BCTR  R15,R0             DECREMENT FOR EXECUTE\n         EX    R15,MOVE060        MOVE TO COMMDATA\n         QEDIT ORIGIN=(R9),BLOCK=(R3)  FREE THE CIB\n         OC    COMMDATA,BLANKS    UPPER CASE\n         CLI   COMMDATA,C'-'      IS IT A COMMAND REQUEST ?\n         BE    ENTRY200           YES - PROCESS IT\n         B     ENTRY100           NO - ASSUME JOB\n         LTORG\nMOVE060  MVC   COMMDATA(0),CIBDATA  MOVE DATA TO WORK AREA\n         DROP  R3                 FREE THE USING REGISTER\n         EJECT\n*----------------------------------------------------------------------\n*\n*        DETERMINE WHICH DDNAME TO USE FOR SUBMIT\n*\n*----------------------------------------------------------------------\nENTRY100 DS    0H\n         LA    R10,JOBDCB         ADDR OF JOB DCB\n         LA    R3,COMMDATA        ADDR OF INPUT DATA\nLOOP100A EQU   *\n         CLI   0(R3),C' '         END OF DATA ?\n         BE    AAA100             YES - DEFAULT DDNAME\n         CLC   0(3,R3),=C',D='    IS THIS DDNAME OVERRIDE?\n         BE    BBB100             NO, CONTINUE UNTIL ONE IS FOUND\n         LA    R3,1(R3)           BUMP TO NEXT CHARACTER\n         B     LOOP100A           BRANCH BACK\nAAA100   EQU   *\n         MVC   0(5,R3),=C',D=00'  ASSUME DEFAULT\nBBB100   EQU   *\n         TM    DCBOFLGS,DCBOFOPN  JOB CNTL DCB OPEN ?\n         BZ    CCC100             NO - OPEN IT\n         CLC   OPENDCB,3(R3)      SAME AS LAST ONE ?\n         BE    EXIT100            YES - OK\n         CLOSE ((R10))            NO - CLOSE IT\n         XC    OPENDCB,OPENDCB    CLEAR LAST OPENED\nCCC100   EQU   *\n         MVC   DADNJCL+3(2),3(R3)   MODIFY DYNAMIC ALLOCATION PARMS\n         LA    R4,DSNTABLE          TABLE OF DSNS TO DDNAMES\nCCC100L  DS    0H\n         CLC   0(2,R4),3(R3)        RIGHT DDNAME SUFFIX ?\n         BE    CCC100A              GO DO ALLOCATION\n         CLC   0(2,R4),=X'FFFF'     END OF TABLE ?\n         BNE   CCC100B              NO BUMP TO NEXT ENTRY\n         MVC   CCC100M+33(2),3(R3)  MOVE DD SUFFIX TO WTO\n*               89012345678901234567890123456789012345678901234567890\nCCC100M  WTO   '** AUTO ** DDNAME SUFFIX // NOT DEFINED IN TABLE USING X\n               00 AS A DEFAULT'\n         MVC   3(2,R3),=C'00'       SET UP DEFAULT\n         B     CCC100\nCCC100B  DS    0H\n         LA    R4,46(R4)            NEXT ENTRY IN TABLE PLEASE.\n         B     CCC100L              TRY THAT ENTRY ON FOR SIZE\nCCC100A  DS    0H\n         MVC   DADSJCL(44),2(R4)    SAVE THE DATASET TO ALLOCATE.\n         LA    R1,JCLALOC\n         DYNALLOC\n         LTR   R15,R15              ALLOCATION GOOD ?\n         BZ    CCC100D\n         MVC   DATASET(44),DADSJCL MOVE DSNAME TO TITLE\n         WTO   MF=(E,TITLE)\n         LH    R6,TITLE            GET LENGTH OF WTO.\n         LH    R7,TITLE+2          GET MCS FLAGS FROM WTO\n         SH    R6,HALF4            GET LENGTH OF MESSAGE TEXT\n         STC   R6,TITLE+3          SAVE LENGTH FOR SDUMP\n         SDUMP HDRAD=TITLE+3\n         STH   R7,TITLE+2          RESTORE MCS FLAGS FROM WTO.\n         B     ENTRY050            GO WAIT FOR MORE WORK\nCCC100D  DS    0H\n         MVC   DCBDDNAM+3(2),3(R3)  MODIFY DDNAME\n         OPEN  ((R10))\n         TM    DCBOFLGS,DCBOFOPN  DID IT OPEN THIS TIME ?\n         BZ    ERROR2             NO - ERROR\n         MVC   OPENDCB,3(R3)      SAVE LAST OPENED\nEXIT100  EQU   *\n         MVC   0(5,R3),=CL5' '    CLEAR THE 'D=XX' PARM\n         B     ENTRY110\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        SUBMIT EACH MEMBER SPECIFIED IN THE PARMLIST\n*\n*----------------------------------------------------------------------\nENTRY110 DS    0H\n         TM    INTRDR+DCBOFLGS-IHADCB,DCBOFOPN  IS THE INTRDR OPEN ?\n         BZ    ENTRY050           NO, IGNORE REQUEST\n         LA    R3,COMMDATA        ADDRESS OF FIRST (OR ONLY) OPERAND\nAAA110   EQU   *\n         LR    R4,R3              COPY TO WORK REG\n         SR    R15,R15            CLEAR WORK REGISTER\n         LA    R14,9              SET LOOP CONTROL\nLOOP110  EQU   *\n         CLI   0(R3),C' '         END OF MEMBER NAME?\n         BE    BBB110             YES, PROCESS ONLY (LAST) MEMBER\n         CLI   0(R3),C','         DELIMITER ?\n         BE    BBB110             YES, PROCESS THIS ENTRY\n         LA    R3,1(R3)           BUMP TO NEXT CHARACTER\n         LA    R15,1(R15)         BUMP CHAR COUNT REG\n         BCT   R14,LOOP110        BACK TO CHECK NEXT CHAR\n         B     ERROR3             MEMBER NAME LONGER THAN 8 CHARS\nBBB110   EQU   *\n         BCTR  R15,R0             DECREMENT FOR MOVE\n         MVC   MEMBER(8),BLANKS   CLEAR MEMBER NAME AREA\n         EX    R15,MOVE110        MOVE MEMBER NAME\n         FIND  ((R10)),MEMBER,D\n         LTR   R15,R15            MEMBER FOUND ?\n         BZ    CCC110             YES - OK\n         MVC   WTO110+25(8),MEMBER\n*               890123456789012345\nWTO110   WTO   '** AUTO ** - JOB //////// NOT FOUND'\n         B     EEE110             GO TO EODAD ROUTINE\nCCC110   EQU   *\n         L     R5,BUFFER          ADDR OF BUFFER\n         READ  READDECB,SF,(R10),(R5),'S'\n         CHECK READDECB\n         LH    R6,DCBLRECL        LRECL\n         LH    R7,DCBBLKSI        BLOCK SIZE\n         LA    R7,0(R7,R5)        END OF FULL BLOCK\n         L     R1,READDECB+16     ADDR OF IOB\n         LH    R1,14(R1)          RESIDUAL COUNT FOR SHORT BLOCK\n         SR    R7,R1              ADJUSTED BLOCK LENGTH\n         SR    R7,R6              DECR TO BEGINNING OF LAST RECORD    *\nDDD110   EQU   *\n         PUT   INTRDR,(R5)        SUBMIT JCL\n         BXLE  R5,R6,DDD110       BUMP TO NEXT REC IN BLOCK AND PUT\n         B     CCC110             READ ANOTHER BLOCK\nEEE110   EQU   *\n         CLI   0(R3),C','         IS THERE ANOTHER MEMBER TO PROCESS ?\n         BNE   FFF110             NO, FLUSH THE INTERNAL READER\n         LA    R3,1(R3)           BUMP TO START OF NEXT MEMBER\n         CLI   0(R3),C' '         NULL MEMBER NAME ?\n         BNE   AAA110             NO, PROCESS IT\nFFF110   EQU   *\n         PUT   INTRDR,EOF         /*EOF\nEXIT110  EQU   *                  END OF ALL SUBMITS\n         CLOSE ((R10))            CLOSE AND DE-ALLOCATE JOBDCB.\n         B     ENTRY050           CHECK FOR ANY MORE COMMANDS\nMOVE110  MVC   MEMBER(0),0(R4)    EXECUTED MOVE OF MEMBER NAME\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        PROCESS COMMAND EXECUTION REQUEST BY OPERATOR\n*\n*----------------------------------------------------------------------\nENTRY200 DS    0H\n         LA    R3,COMMDATA+1      ADDRESS OF FIRST (OR ONLY) OPERAND\nAAA200   EQU   *\n         LR    R4,R3              COPY TO WORK REG\n         SR    R15,R15            CLEAR WORK REGISTER\n         LA    R14,9              SET LOOP CONTROL\nLOOP200  EQU   *\n         CLI   0(R3),C' '         END OF MEMBER NAME?\n         BE    BBB200             YES, PROCESS ONLY (LAST) MEMBER\n         CLI   0(R3),C','         DELIMITER ?\n         BE    BBB200             YES, PROCESS THIS ENTRY\n         LA    R3,1(R3)           BUMP TO NEXT CHARACTER\n         LA    R15,1(R15)         BUMP CHAR COUNT REG\n         BCT   R14,LOOP200        BACK TO CHECK NEXT CHAR\n         B     ERROR4             MEMBER NAME LONGER THAN 8 CHARS\nBBB200   EQU   *\n         BCTR  R15,R0             DECREMENT FOR MOVE\n         MVC   MEMBER(8),BLANKS   CLEAR MEMBER NAME AREA\n         EX    R15,MOVE200        MOVE MEMBER NAME\n         BAL   R14,ENTRY900       PROCESS COMMAND\n         CLI   0(R3),C','         IS THERE ANOTHER MEMBER TO PROCESS ?\n         BNE   EXIT200            NO, DONE\n         LA    R3,1(R3)           BUMP TO START OF NEXT MEMBER\n         CLI   0(R3),C' '         NULL MEMBER NAME ?\n         BNE   AAA200             NO, PROCESS IT\nEXIT200  EQU   *\n         B     ENTRY050\n         LTORG\nMOVE200  MVC   MEMBER(0),0(R4)    EXECUTED MOVE OF MEMBER NAME\n         EJECT\n*----------------------------------------------------------------------\n*\n*        PROCESS TIME INTERVAL REQUESTS (THE TIMER HAS POPPED)\n*\n*----------------------------------------------------------------------\nENTRY300 DS    0H\n         MVC   MEMBER,BLANKS      CLEAR\n         MVI   MEMBER,C'@'        PREFIX\n         MVC   MEMBER+1(4),@TIME  BUILD NAME\n         FIND  COMMANDS,MEMBER,D\n         LTR   R15,R15            MEMBER FOUND ?\n         BNZ   EXIT300            NO, MUST BE NULL TIMER\n         BAL   R14,ENTRY900\nEXIT300  EQU   *\n         B     ENTRY040\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        PROCESS COMMANDS\n*\n*----------------------------------------------------------------------\nENTRY900 DS    0H\n         ST    R14,ST900          SAVE RETURN ADDR\n         LA    R10,COMMANDS       DCB ADDR\n         TM    DCBOFLGS,DCBOFOPN  IS THE COMMANDS OPEN ?\n         BZ    EXIT900            NO, IGNORE REQUEST\n         BAL   R14,ENTRY999       RE-ESTABLISH DATE, TIME, AND DAY\n         FIND  COMMANDS,MEMBER,D\n         LTR   R15,R15            MEMBER FOUND ?\n         BZ    AAA900             YES - PROCESS IT\n         MVC   WTO900+25(8),MEMBER\nWTO900   WTO   '** AUTO ** - CMD //////// NOT FOUND'\n         B     EXIT900            GO TO EODAD ROUTINE\nAAA900   EQU   *\n         L     R5,BUFFER          ADDR OF BUFFER\n         READ  CMDDECB,SF,(R10),(R5),'S'\n         CHECK CMDDECB\n         LH    R6,DCBLRECL        LRECL\n         LH    R7,DCBBLKSI        BLOCK SIZE\n         LA    R7,0(R7,R5)        END OF FULL BLOCK\n         L     R1,CMDDECB+16      ADDR OF IOB\n         LH    R1,14(R1)          RESIDUAL COUNT FOR SHORT BLOCK\n         SR    R7,R1              ADJUSTED BLOCK LENGTH\n         SR    R7,R6              DECR TO BEGINNING OF LAST RECORD    *\nBBB900   EQU   *\n         CLI   CONTFLAG,X'FF'     IS THE CONTINUATION FLAG ON ?\n         BNE   EEE900             NO, NORMAL PROCESSING\n         CLC   0(15,R5),BLANKS    IS IT A VALID CONT RECORD ?\n         BE    DDD900             YES, OK\nCCC900   EQU   *\n         MVC   WTO900A+25(8),MEMBER MOVE MEMBER NAME\nWTO900A  WTO   '** AUTO ** - CMD //////// INVALID CONTINUATION, SKIP'\n         MVI   CONTFLAG,X'00'     RESET CONT FLAG\n         B     JJJ900             SKIP THE RECORD\nDDD900   EQU   *\n         MVC   CMDBUF+56(56),15(R5)  MOVE COMMAND DATA TO BUFR\n         CLI   71(R5),C' '        IS THIS RECORD CONTINUED ?\n         BNE   CCC900             YES - ERROR ONLY ONE CONT ALLOWED\n         MVI   CONTFLAG,X'00'     RESET THE CONTINUATION FLAG\n         B     III900             PROCESS COMPLETE COMMAND\nEEE900   EQU   *\n         CLI   0(R5),C'*'         COMMENT ?\n         BE    KKK900             YES - SKIP IT\n         CLC   1(5,R5),BLANKS     ANY MONTH/DAY PROCESSING?\n         BE    HHH900             NO, PROCESS DAY OF WEEK ONLY\n         CLI   3(R5),C'/'         VALID MONTH/DAY SPECIFICATION?\n         BE    FFF900             YES - OK\n         MVC   WTO900B+25(8),MEMBER MOVE MEMBER NAME\nWTO900B  WTO   '** AUTO ** - CMD //////// INVALID MONTH/DAY, SKIPPED'\n         B     KKK900             SKIP THE RECORD\nFFF900   EQU   *\n         CLC   1(5,R5),=C'**/**'  ANY MONTH/DAY PROCESSING?\n         BE    HHH900             YES, PROCESS DAY OF WEEK ONLY\n         CLC   1(5,R5),DATE       IS THIS A HIT?\n         BE    HHH900             YES, CHECK FOR CORRECT DAY OF WEEK\n         CLC   4(2,R5),=C'**'     WAS ANY DAY SPECIFIED ?\n         BNE   GGG900             NO, CHECK FOR ANY MONTH\n         CLC   1(2,R5),DATE       YES, IS THIS THE CORRECT MONTH\n         BE    HHH900             YES, PROCESS DAY OF WEEK NEXT\n         B     KKK900             NO - SKIP IT\nGGG900   EQU   *\n         CLC   1(2,R5),=C'**'     WAS ANY MONTH SPECIFIED ?\n         BNE   KKK900             NO - SKIP IT\n         CLC   4(2,R5),DATE+3     YES, IS THIS THE CORRECT DAY\n         BNE   KKK900             NO - SKIP IT\nHHH900   EQU   *\n         SR    R1,R1              CLEAR FOR DAY INDEX\n         IC    R1,DAY             GET DAY INDEX\n         LA    R1,7(R5,R1)        POINT TO TODAYS PROCESS FLAG\n         CLI   0(R1),C' '         PROCESS FLAG ON FOR TODAY ?\n         BE    KKK900             NO -SKIP IT\n         MVC   CMDBUF(56),15(R5)  MOVE COMMAND DATA TO BUFR\n         CLI   71(R5),C' '        IS THIS RECORD CONTINUED ?\n         BE    III900             NO - PROCESS COMMAND\n         MVI   CONTFLAG,X'FF'     SET THE CONTINUATION FLAG\n         B     KKK900             GET NEXT RECORD\nIII900   MODESET KEY=ZERO         GET KEY ZERO AND AUTH\n         LM    R0,R1,SVCREGS      GET SVC 34 REGS\n         SVC   34                 SCHEDULE COMMAND\n         MODESET KEY=NZERO        RELEASE AUTHORIZATION\nJJJ900   EQU   *\n         MVC   CMDBUF(115),BLANKS CLEAR THE COMMAND BUFFER\nKKK900   EQU   *\n         BXLE  R5,R6,BBB900       BUMP TO NEXT REC IN BLOCK\n         B     AAA900             READ ANOTHER BLOCK\nEXIT900  EQU   *                  EODAD\n         L     R14,ST900          RETURN ADDR\n         BR    R14\n         LTORG\nST900    DC    F'-1'\nCONTFLAG DC    X'00'\nSVCREGS  DC    F'0'               REG 0 FOR SVC 34\n         DC    A(SVCCIB)          REG 1 FOR SVC 34\nSVCCIB   DC    AL2(118)           MAXIMUM LENGHT OF COMMAND\n         DC    H'0'               SVC 34 PADDING\nCMDBUF   DC    CL120' '           COMMAND BUFFER\n         EJECT\n*----------------------------------------------------------------------\n*\n*        TIMER EXIT\n**** THIS ROUTINE REPLAED BY BWPOST AT BEGINNING OF PROGRAM\n*----------------------------------------------------------------------\n***********************************************************************\n*  ENTRY950 DS    0H                                                  *\n*           USING *,R15                                               *\n*           STM   R14,R12,4(R13)     SAVE REGS                        *\n*           L     R12,=A(AUTO)                                        *\n*           DROP  R15                                                 *\n*           POST  TIMEECB                                             *\n*           LM    R14,R12,4(R13)     RESTORE REGS                     *\n*  EXIT950  EQU   *                                                   *\n*           BR    R14                                                 *\n***********************************************************************\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        DAY/DATE ROUTINE (FROM THE MACHINE CLOCK)\n*\n*----------------------------------------------------------------------\nENTRY999 DS    0H\n         ST    R14,SAVE999        SAVE BAL REG\n         $STCK NOGEN              GENERATE THE DATE, TIME AND DAY\nEXIT999  EQU   *\n         L     R14,SAVE999        RELOAD BAL REG\n         BR    R14\n         LTORG\nSAVE999  DC    F'-1'\nDAY      DC    X'99'              RELATIVE DAY OF WEEK (0=MONDAY)\nDATE     DC    D'0'               DATE MM/DD/YY\nTIME     DC    D'0'               TIME HH:MM:SS\n         EJECT\n*----------------------------------------------------------------------\n*\n*        END OF JOB\n*\n*----------------------------------------------------------------------\nRETURN   DS    0H\n         TM    DCBOFLGS,DCBOFOPN  IS THE JCL DCB OPEN?\n         BZ    AAARET             NO, SKIP THE CLOSE\n         CLOSE ((10))             CLOSE THE DCB\nAAARET   EQU   *\n         TM    COMMANDS+DCBOFLGS-IHADCB,DCBOFOPN  COMMANDS OPEN ?\n         BZ    BBBRET             NO, SKIP THE CLOSE\n         CLOSE (COMMANDS,,DIR)    CLOSE BOTH DCBS\nBBBRET   EQU   *\n         TM    INTRDR+DCBOFLGS-IHADCB,DCBOFOPN  HOW ABOUT THE INTRDR ?\n         BZ    CCCRET             NO, SKIP THAT CLOSE\n         CLOSE (INTRDR)           CLOSE THE INTERNAL READER\nCCCRET   EQU   *\n         L     R1,BUFFER\n         L     R0,BUFSIZE\n         FREEMAIN  R,LV=(0),A=(1)\n         SR    R15,R15            CLEAR RETCODE\n         $EPILOG\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        ERROR ROUTINES\n*\n*----------------------------------------------------------------------\nERROR1   DS    0H\n         WTO   '** AUTO ** - COMMANDS DD CARD MISSING, TERMINATING'\n         B     RETURN\n*----------------------------------------------------------------------\nERROR2   DS    0H\n         MVC   WTO2+23(2),3(R3)\nWTO2     WTO   '** AUTO ** - D=// OPEN ERROR, JOB NOT SUBMITTED'\n         B     ENTRY050           PROCESS NEXT COMMAND\n*----------------------------------------------------------------------\nERROR3   DS    0H\n         MVC   WTO3+25(8),0(R4)\nWTO3     WTO   '** AUTO ** - JOB //////// AND ALL FOLLOWING NOT PROCESSX\n               ED, LENGTH EXCEEDED'\n         B     ENTRY050           PROCESS NEXT COMMAND\n*----------------------------------------------------------------------\nERROR4   DS    0H\n         MVC   WTO4+25(8),0(R4)\nWTO4     WTO   '** AUTO ** - CMD //////// AND ALL FOLLOWING NOT PROCESSX\n               ED, LENGTH EXCEEDED'\n         B     ENTRY050           PROCESS NEXT COMMAND\n         EJECT\n*----------------------------------------------------------------------\n*\n*        STORAGE AREAS\n*\n*----------------------------------------------------------------------\n         DC    C'TIMEECB IS +4 AFTER ='\nBUFSIZE  DC    F'32760'\nTIMEECB  DC    F'0'\nBUFFER   DC    F'0'\nMEMBER   DC    CL8' '\nOPENDCB  DC    CL2' '\nHOLDCIB  DC    CL256' '\nCOMMDATA DC    CL256' '\nBLANKS   DC    CL256' '\n*                        1         2         3         4         5\n*               123456789012345678901234567890123456789012345678901234\nTITLE    WTO   '                                             CAN NOT BEX\n                ALLOCATED AT THIS TIME TRY LATER',                     X\n               ROUTCDE=(1,2,11),MF=L\nDATASET  EQU   TITLE+4\nHALF4    DC    H'4'\nEOF      DC    CL80'/*EOF'\nDSNTABLE DS    0F\n         DC    C'00',CL44'SYZYGY.AUTO.JOBS'\n         DC    C'01',CL44' '\n         DC    C'02',CL44' '\n         DC    C'03',CL44' '\n         DC    C'04',CL44' '\n         DC    C'05',CL44' '\n         DC    C'06',CL44' '\n         DC    C'07',CL44' '\n         DC    C'08',CL44' '\n         DC    C'09',CL44' '\n         DC    C'10',CL44' '\n         DC    X'FFFF'\nJCLALOC  DA    DDN=JOB00,                                              X\n               DSN=SYZYGY.AUTO.JOBS,                                   X\n               STATUS=SHR,                                             X\n               UNQSUF=JCL,                                             X\n               FREE=CLOSE\n         EJECT\n         PRINT NOGEN\nCOMMANDS DCB   DDNAME=COMMANDS,DSORG=PO,MACRF=R,EODAD=EXIT900\nDIR      DCB   DDNAME=COMMANDS,DSORG=PS,MACRF=RP,EODAD=DDD040,         X\n               LRECL=256,BLKSIZE=256,RECFM=FB\nJOBDCB   DCB   DDNAME=JOB00,DSORG=PO,MACRF=R,EODAD=EEE110\nINTRDR   DCB   DDNAME=INTRDR,DSORG=PS,MACRF=PM,                        X\n               LRECL=80,BLKSIZE=80,RECFM=F\n         EJECT\nCIBSECT  DSECT ,                  COMMAND INPUT BUFFER MAPPING\nCIBCIB   DS    F                  ADDRESS OF NEXT CIB IN CHAIN\nCIBVERB  DS    C                  CIB VERB CODE\nCIBSIZE  DS    C                  SIZE OF THE COMMAND INPUT BUFFER\nCIBRSVD1 DS    H                  RESERVED\nCIBRSVD2 DS    C                  RESERVED\nCIBTSOID DS    CL3                TSO TERMINAL ID\nCIBCONID DS    C                  CONSOLE ID OF STARTED TASK\nCIBRSVD3 DS    C                  RESERVED\nCIBDSIZE DS    H                  SIZE OF USER DATA WITHIN CIB\nCIBDATA  DS    C                  COMMAND DATA AS ENTERED BY OPERATOR\nDIRDSECT DSECT\nDIRNAME  DS    CL8\nDIRTTR   DS    CL3\nDIRC     DS    CL1\n         DCBD  DSORG=PO\n*        IKJTCB DSECT=YES,LIST=YES ENERATES TCB DSECT\n         CVT   DSECT=YES          GENERATES CVT DSECT\n         END\n//LINK.SYSLMOD DD  DSN=SYZYGY.LINKLIB(AUTO),DISP=SHR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AUTOJCL": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/ R\\x00\\x04\\x00\\x04\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T20:52:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "SYZYGY"}, "text": "//AUTO      EXEC PGM=AUTO,TIME=1440,DPRTY=(7,9)\n//INTRDR    DD   SYSOUT=(A,INTRDR)\n//COMMANDS  DD   DSN=SYZYGY.AUTO.COMMANDS,DISP=SHR\n//JOB00     DD   DSN=SYZYGY.AUTO.JOBS,DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BACKEND": {"ttr": 1544, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/ R\\x01\\x00\\x01\\x00\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T20:52:00", "lines": 256, "newlines": 256, "modlines": 0, "user": "SYZYGY"}, "text": "*           1. CHECK FOR THE FOLOIWNG 1ST LEVELS:\n*              SYS1.\n*\n         EJECT\n         CNOP  0,4\nBACKEND  CSECT\n         SAVE  (14,12)\n         ST    13,SAVE+4-BACKEND(15)\n         BAL   15,CONT-BACKEND(15)\nSAVE     DC    18F'0'\nCONT     ST    15,8(13)\n         LR    13,15\n         USING SAVE,13\n         L     2,0(1)               A(COMMAREA)\n         USING COMMAREA,2\n         DSECT\nCOMMAREA DS    0CL69\nDSN      DS    CL44\n         DS    CL5\nCRTDT    DS    CL5\n         DS    CL6\nTRKS     DS    CL5\n         DS    CL4\n         ORG   COMMAREA\nKEYWORD  DS    CL4\nKEYDATA  DS    CL65\n         ORG   COMMAREA\nRESPONSE DS    CL69\n         ORG\nBACKEND  CSECT\n         CLC   KEYWORD,=C'VOL '\n         BE    NEWVOL\n         OC    DSN,DSN\n         BZ    DSNREQST\n         B     SCRREQST\nRETURN   L     13,SAVE+4\n         RETURN (14,12),RC=(15)\n         EJECT\nNEWVOL   MVC   CAMVOL,KEYDATA\n         XC    COMMAREA,COMMAREA\n         OBTAIN FMT4DSCB\n         B     *+4(15)\n         B     GOTVTOC\n         B     NOTMTD\n         B     VTOCERR\n         DC    8H'0'\n         SPACE 3\nGOTVTOC  MVC   LASTFMT1,WORKA+1\n         MVC   DSCBTRK+1(1),WORKA+30\n         MVC   TRKSCYL,WORKA+20\n         MVC   CCHHR(4),WORKA+63\n         MVI   CCHHR+4,1\n         SPACE 3\n         L     4,16                  -> CVT\n         L     4,40(4)               -> UCB LOOKUP TABLE\nUCBLOOP  LH    3,0(4)                16 BIT (MVS STYLE) UCB ADDRESS\n         N     3,=X'0000FFFF'        CLEAR IN CASE SIGN BIT PROPAGATED\n         BZ    BUMPUCB               GET NEXT\n         CH    3,=H'-1'              END OF TABLE\n         BE    NOTMTD\n         CLC   CAMVOL,28(3)          VOLSER\n         BE    GOTUCB\nBUMPUCB  LA    4,2(4)\n         B     UCBLOOP\nGOTUCB   MVC   DEVTYPE,16(3)\n         B     DSNREQST\n         SPACE 3\nVTOCERR  XC    CAMVOL,CAMVOL\n         MVC   RESPONSE(L'ERRMSG1),ERRMSG1\n         B     RETURN\nNOTMTD   XC    CAMVOL,CAMVOL\n         MVC   RESPONSE(L'ERRMSG2),ERRMSG2\n         B     RETURN\n         EJECT\nDSNREQST OC    CAMVOL,CAMVOL\n         BNZ   VOLOK\n         DC    H'0'\nVOLOK    XC    COMMAREA,COMMAREA\nNEXTDSCB BAL   8,CCHHRINC\n         CLC   LASTFMT1,CCHHR\n         BL    ENDOFVOL\n         OBTAIN FMT1DSCB\n         LTR   15,15\n         BNZ   VTOCERR\n         CLI   WORKA+44,C'1'\n         BNE   NEXTDSCB\nGOTF1    MVC   DSN,WORKA\n         XR    3,3\n         IC    3,WORKA+53         CRTDT(YR)\n         CVD   3,DBL\n         UNPK  CRTDT(2),DBL+6(2)\n         OI    CRTDT+1,240\n         LH    3,WORKA+54         CRTDT(DAY)\n         CVD   3,DBL\n         UNPK  CRTDT+2(3),DBL+6(2)\n         OI    CRTDT+4,240\n*\n*\n*\n*       AREA FOR CALCULATION OF DS SIZE\n*\n*\n         SR    R7,R7             CYLINDER COUNTER\n         LR    R3,R7             TRACK COUNTER\n         LR    R4,R7             EXTENT COUNTER\n         MVC   CCSAVE,CCHHR      SAVE CCHHR\n         LA    R5,WORKA+105      ---> TO 1ST EXTENT\n         LA    R6,3              MAX OF 3 EXTENT IN FMT1 DSCB\nEX1      BAL   R8,EXTENT         GO ACCUMULATE.\n         B     DOEXT             NO MOVE\n         BCT   R6,EX1            LOOP\nEX2      OC    WORKA+135(5),WORKA+135 ANY MORE EXTENTS\n         BZ    DOEXT             NO\n         MVC   CCHHR,WORKA+135\n         OBTAIN FMT1DSCB         GET FORMAT 2 OR 3 DSCB\n         CH    R15,=H'4'         OK?\n         BNL   DOEXT             NO IGNORE IT\n         CLI   WORKA+44,C'3'     TYPE 3 ?\n         BNE   EX2               NO TRY AGAIN.\n         MVC   WORKA+44(90),WORKA+45 CONDENSE DSCB TO MAKE CONTIGUOUS\n         LA    R5,WORKA+4        FIST SET\n         LA    R6,13             MAX OF 13 EXTENTS LEFT\nEX3      BAL   R8,EXTENT         GO ACCUMULATE\n         B     DOEXT             NO MORE\n         BCT   R6,EX3            LOOP\nDOEXT    MH    R7,TRKSCYL        CONVERT CYLS TO TRACKS\n         AR    R7,R3             +TRACKS\n         CVD   R7,DBL             CONVERT\n         UNPK  TRKS(5),DBL+5(3)   MOVE TO OUTPUT\n         OI    TRKS+4,X'F0'       MAKE PRINTABLE\n         MVC   CCHHR,CCSAVE       RESTORE CCHHR\n         B     ENDOFVOL\nEXTENT   DS    0H\n*        R5 ---> CURRENT EXTENT POINTER\n*        R7      CUMULATIVE CYLINDERS\n*        R3      CUMULATIVE TRACKS\n*        R4      NO OF EXTENTS\n         CLI     0(R5),0         ANY MORE EXTENTS?\n         BCR     8,R8             NO EXIT AND INDICATE\n         CLI     0(R5),X'80'     SPLIT CYLINDERS?\n         BNE     EXT1            NO\n         MVI     TRKS+6,C'?'   FLAG SPACE AS INCORRECT\nEXT1     MVC     DBL,2(R5)       ALIGN\n         LA      R4,1(R4)        +1   EXTENT\n         AH      R7,DBL+4        +CYL END\n         AH      R3,DBL+6        +TRK END\n         SH      R7,DBL          -CYL START\n         SH      R3,DBL+2        -TRK START\n         AH      R3,=H'1'        CORRECT NUMBER OF TRACKS\n         LA      R5,10(R5)       NEXT FIELD\n         B       4(R8)\n         SPACE 3\nENDOFVOL XR    15,15\n         B     RETURN\n         EJECT\nSCRREQST OC    CAMVOL,CAMVOL\n         BNZ   SCROK\n         DC    H'0'\nSCROK    MVC   CAMDSN,DSN\n         XC    COMMAREA,COMMAREA\n         CLC   CAMDSN(5),=C'SYS1.'\n         BE    NOSCR\n*        CLC   CAMDSN(5),=C'SYS2.'\n*        BE    NOSCR\n*        CLC   CAMDSN(5),=C'PROD.'\n*        BE    NOSCR\n*        CLC   CAMDSN(4),=C'CBT.'\n*        BE    NOSCR\n         LOCATE LOCATE\n         LTR   15,15\n         BNZ   NOUNCAT\n         CLI   WORKA+1,1        MORE THAN 1 VOL?\n         BNE   NOSCR            YES\n         CLC   CAMVOL,WORKA+6   CATLGD ON DIFFERENT VOLUME?\n         BNE   NOUNCAT          YES ... DON'T UNCAT\n         CATALOG UNCATLG\n         LTR   15,15\n         BNZ   NOSCR            COULDN'T UNCATLG ... DON'T SCRATCH\nNOUNCAT  XC    VOLSEQ,VOLSEQ    CLEAR JUST IN CASE USED\n         SCRATCH SCRATCH\n         LTR   15,15\n         BZ    GOODSCR\nNOSCR    MVC   DSN,CAMDSN\n         MVC   RESPONSE+49(L'ERRMSG3),ERRMSG3\n         B     RETURN\nGOODSCR  MVC   DSN,CAMDSN\n         MVC   RESPONSE+49(L'SCRMSG1),SCRMSG1\n         B    RETURN\n         EJECT\nCCHHRINC XR    1,1\n         IC    1,CCHHR+4\n         LA    1,1(1)\n         STC   1,CCHHR+4\n         CH    1,DSCBTRK\n         BCR   13,8\n         MVI   CCHHR+4,1\n         LH    1,CCHHR+2\n         LA    1,1(1)\n         STH   1,CCHHR+2\n         CH    1,TRKSCYL\n         BCR   4,8\n         XC    CCHHR+2(2),CCHHR+2\n         LH    1,CCHHR\n         LA    1,1(1)\n         STH   1,CCHHR\n         BR    8\n         EJECT\nFMT1DSCB CAMLST SEEK,CCHHR,CAMVOL,WORKA\nFMT4DSCB CAMLST SEARCH,FMT4DSN,CAMVOL,WORKA\nSCRATCH  CAMLST SCRATCH,CAMDSN,,VOLLIST,,OVRD\nLOCATE   CAMLST NAME,CAMDSN,,WORKA\nUNCATLG  CAMLST UCATDX,CAMDSN\n         EJECT\nCAMDSN   DC    CL44' '\nVOLLIST  DC    H'1'\nDEVTYPE  DS    XL4\nCAMVOL   DC    CL6' '\nVOLSEQ   DC    H'0'\nCCHHR    DC    XL5'0'\nCCSAVE   DC    XL5'0'\n         CNOP  0,4\nWORKA    DS    265C\nFMT4DSN  DC    44X'04'\nLASTFMT1 DC    XL5'0'\nDSCBTRK  DC    H'0'\nTRKSCYL  DC    H'0'\nERRMSG1  DC    C'ERROR ACCESSING VTOC'\nERRMSG2  DC    C'ERROR ACCESSING VOLUME'\nERRMSG3  DC    CL20'NOT DELETED'\nSCRMSG1  DC    CL20'GONE'\nDBL      DC    D'0'\n         LTORG\n**                           EQUATES FOR SYMBOLIC REG USAGE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nRA       EQU   10\nRB       EQU   11\nRC       EQU   12\nRD       EQU   13\nRE       EQU   14\nRF       EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BRODSCAN": {"ttr": 1549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/!\\x00\\x01)\\x01)\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T21:00:00", "lines": 297, "newlines": 297, "modlines": 0, "user": "SYZYGY"}, "text": "BRODSCAN ENTER (14,12),12,*\n*********************************************************************\n**                                                                 **\n**       BRODSCAN -                                                **\n**                                                                 **\n**                                                                 **\n**       THIS PROGRAM ANALYZES THE TSO BROADCAST DATASET.  IT      **\n**       DISPLAYS THE NUMBER OF AVAILABLE BLOCKS AND HOW THEY      **\n**       ARE USED.  IT ALSO DISPLAYS THE TSO USERS WHO HAVE        **\n**       MESSAGES WAITING.  IN ADDITION IT ALSO DOES A VALIDITY    **\n**       CHECK ON RECORDS WHICH ARE IN THE MESSAGE POOL TO ASSURE  **\n**       THEY ARE CHAINED OFF OF A USER RECORD.  ACCORDING TO      **\n**       DOCUMENTATION, INSTANCES OCCUR WHICH CAN RESULT IN THESE  **\n**       GARBAGE RECORDS EXISTING.                                 **\n**                                                                 **\n*********************************************************************\n         EJECT\n         TITLE 'DISCLAIMER '\n***********************************************************************\n*                                                                     *\n*     THIS PROGRAM, MODIFUIED BY BRIAN WESTERMAN OR SUPPLIED BY       *\n*     OTHER USERS HEREIN REFFERRED TO AS BY INITIALS BHW              *\n*     IN WHOLE OR IN PART UNDER A SHARED INTREST AND ON               *\n*     ON A RESTRICTED BASIS, IS OF GENERAL INTEREST                   *\n*     SUBMITTED FOR RESTRICTED DISTRIBUTION.  THIS PROGRAM            *\n*     HAS MET A BASIC SET OF PROGRAMMING AND DOCUMENTATION            *\n*     STANDARDS, BUT MAY NOT HAVE BEEN PROGRAM TESTED IN ANY          *\n*     FORMAL FASHION BY THE AUTHOR OR AUTHORS.  THE USER IS           *\n*     EXPECTED TO MAKE THE FINAL EVALUATION AS TO THE                 *\n*     USEFULLNESS IN HIS OWN ENVIRONMENT.                             *\n*                                                                     *\n*     BHW MAKES NO WARRANTY, EXPRESSED OR IMPLIED, INCLUDING, BUT     *\n*     NOT LIMITED TO, THE IMPLIED WARRANTIES OR MERCHANTABILITY AND   *\n*     FITNESS FOR A PARTICULAR PUTPOSE AS TO THE DOCUMENTATION,       *\n*     FUNCTION, OR PERFORMANCE OF THESE PROGRAMS.                     *\n*                                                                     *\n*     ACCEPTANCE AND USE OF THIS PROGRAM CONSTITUTES A RELEASE        *\n*     FROM LIABILITY OF BHW FOR ANY PROBLEMS USE OF THE PROGRAM       *\n*     MAY CAUSE AT THE USER'S INSTALLATION.                           *\n*                                                                     *\n*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *\n*     TO BHW, HOWEVER, NO PROMISE CAN BE MADE THAT SUCH SUGGESTIONS   *\n*     WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT COMMENTS TO:   *\n*              BRIAN H. WESTERMAN                                     *\n*              SENIOR TECHNICAL SUPPORT SYSTEMS ANALYST               *\n*              897 OAK PARK BLVD - 500                                *\n*              PISMO BEACH, CA  93449                                 *\n*                                                                     *\n*     THIS PROGRAM IS MADE AVAILABLE BY BHW WITHOUT CHARGE.           *\n*     IT MAY NOT UNDER ANY CIRCUMSTANCES BE SOLD OR MARKETED          *\n*     WITHOUT THE PRIOR WRITTEN CONSENT OF THE AUTHOR.                *\n*                                                                     *\n***********************************************************************\n         OPEN  (BRODCAST,(INPUT),SYSOUT,(OUTPUT))\n*\n*  GET THE HEADER RECORD\n*\n         READ  HDRECB,DI,BRODCAST,'S','S','S',BLOCKNO\n         CHECK HDRECB\n         L     R3,HDRECB+12\n         USING HEADER,R3\n         MVC   SAVERRN,USERRRN\n         MVC   HIGHVAL,TOTALREC         SAVE GET OUT VALUE\n         LH    R5,HIGHVAL               GET NUMBER FOR PRINTOUT\n         CVD   R5,CVDAREA               CONVERT IT TO PRINTABLE\n         MVC   MAXCNT,=X'4020206B202120'\n         ED    MAXCNT,CVDAREA+5         MAKE IT PRETTY\n         PUT   SYSOUT,TITLE\n         PUT   SYSOUT,BLNKLINE\n         PUT   SYSOUT,MAXIMUM           TELL HOW MANY\n         LH    R5,MAXNOT                GET NUMBER OF NOTICES\n         XR    R4,R4                    CLEAR R4\n         D     R4,=F'25'                NUMBER OF BLOCKS REQUIRED\n         AH    R5,MAXNOT                PLUS TOTAL FOR MESSAGES\n         LTR   R4,R4                    REMAINDER?\n         BZ    CVDNOT\n         LA    R5,1(R5)                 ONE MORE REQUIRED\nCVDNOT   CVD   R5,CVDAREA               CONVERT IT TO PRINTABLE\n         MVC   NOTCNT,=X'40202120'\n         ED    NOTCNT,CVDAREA+6         MAKE IT PRETTY\n         PUT   SYSOUT,NOTICES           TELL HOW MANY\n         FREEDBUF HDRECB,D,BRODCAST\n         LA    R7,TYPETABL+1\n         MVI   TYPETABL,X'04'\nREADLOOP ICM   R1,7,BLOCKNO\n         LA    R1,1(R1)\n         STCM  R1,7,BLOCKNO\n         CLC   BLOCKNO+1(2),HIGHVAL\n         BE    ANALYZE\n         READ  RECECB,DI,BRODCAST,'S','S','S',BLOCKNO\n         CHECK RECECB\n         L     R2,RECECB+20             KEY ADDRESS\n         MVC   0(1,R7),0(R2)            STORE TYPE INTO TABLE\n         LA    R7,1(R7)\n         CLI   0(R2),X'00'              IS THIS NOTICE RECORD\n         BNE   CHK1                     NO.\n         AP    NOTDIR,=P'1'             ADD 1 TO TOTAL\n         B     FREEB\nCHK1     CLI   0(R2),X'01'              IS THIS USERID INDEX RECORD\n         BNE   CHK2                     NO.\n         AP    USRIND,=P'1'             ADD 1 TO TOTAL\n         B     FREEB\nCHK2     CLI   0(R2),X'02'              IS THIS NOTICE MSG RECORD\n         BNE   CHK3                     NO.\n         AP    NOTMSG,=P'1'             ADD 1 TO TOTAL\n         B     FREEB\nCHK3     CLI   0(R2),X'03'              IS THIS USER MESSAGE RECORD\n         BNE   CHKFF                    NO.\n         AP    USRMSG,=P'1'             ADD 1 TO TOTAL\n         B     FREEB\nCHKFF    CLI   0(R2),X'FF'              IS THIS USER MESSAGE RECORD\n         BNE   UNKNOWN                  NO.\n         AP    FREEREC,=P'1'            ADD 1 TO TOTAL\n         B     FREEB\nUNKNOWN  PUT   SYSOUT,ODDKEY\nFREEB    FREEDBUF RECECB,D,BRODCAST\n         B     READLOOP\nANALYZE  EQU   *\n         PUT   SYSOUT,BREAKOUT\n         PUT   SYSOUT,KEYCOUNT\n         MVC   KEYTYPE,=CL50'BROADCAST MSG DIRECTORY RECORDS'\n         MVC   KEYCNT,=X'4020206B202120'\n         ED    KEYCNT,NOTDIR\n         PUT   SYSOUT,KEYCOUNT\n         MVC   KEYTYPE,=CL50'BROADCAST MESSAGE RECORDS'\n         MVC   KEYCNT,=X'4020206B202120'\n         ED    KEYCNT,NOTMSG\n         PUT   SYSOUT,KEYCOUNT\n         MVC   KEYTYPE,=CL50'USERID INDEX RECORDS'\n         MVC   KEYCNT,=X'4020206B202120'\n         ED    KEYCNT,USRIND\n         PUT   SYSOUT,KEYCOUNT\n         MVC   KEYTYPE,=CL50'NON-BROADCAST MESSAGE RECORDS'\n         MVC   KEYCNT,=X'4020206B202120'\n         ED    KEYCNT,USRMSG\n         PUT   SYSOUT,KEYCOUNT\n         MVC   KEYTYPE,=CL50'FREE RECORDS'\n         MVC   KEYCNT,=X'4020206B202120'\n         ED    KEYCNT,FREEREC\n         PUT   SYSOUT,KEYCOUNT\n         PUT   SYSOUT,USERSOUT\nINDEXLP  LA    R6,9                     COUNT OF USERS PER RECORD\n         MVC   BLOCKNO,SAVERRN\n         READ  SCNECB,DI,BRODCAST,'S','S','S',BLOCKNO\n         CHECK SCNECB\n         L     R3,SCNECB+12             ADDRESS OF RECORD\n         MVC   SAVERRN,126(R3)          COPY NEXT INDEX RECORD NUMBER\nUSRLOOP  MVC   USERID,0(R3)             COPY WHO THIS IS\n         CLC   USERID,=7X'00'           IS THIS A REAL USER?\n         BE    NOMSG                    NOPE, MUST HAVE BEEN DELETED\n         AP    USERS,=P'1'\n         XR    R4,R4                    CLEAR UPPER BYTE\n         ICM   R4,7,7(R3)               GET BLOCK POSITION\n         BZ    NOMSG                    NO.. JUST BUMP\nALTCODE  LA    R5,TYPETABL(R4)          ADDRESS OF THIS BLOCK IN TABLE\n         CLI   0(R5),X'03'              JUST VERIFY WERE WE ARE\n         BE    TABLOK\n         PUT   SYSOUT,TABLERR           JUST LET THEM KNOW I'M CONFUSED\n         B     BUMPUSR\nTABLOK   EQU   *\n         MVI   0(R5),X'88'              SET THAT IT WAS A VALID MESSAGE\nBUMPUSR  AP    MSGCOUNT,=P'1'           INCREMENT HOW MANY MESSAGES\n         STCM  R4,7,MSGNUM\n         READ  MSGECB,DI,BRODCAST,'S','S','S',MSGNUM\n         CHECK MSGECB\n         L     R4,MSGECB+12             ADDRESS OF RECORD\n         ICM   R4,7,126(R4)             RRN OF NEXT MESSAGE\n         FREEDBUF MSGECB,D,BRODCAST\n         LTR   R4,R4\n         BNZ   ALTCODE\n         AP    RECCNT,=P'1'\n         CP    RECCNT,=P'2'             TEST MID RANGE\n         BL    LINE1                    LOWER\n         BH    LINE3                    HIGHER\n         BE    LINE2                    .MIDRANGE\nLINE1    MVC   MSGCNT1,=X'40202120'\n         MVC   USERID1,USERID\n         ED    MSGCNT1,MSGCOUNT\n         B     ZAPCNT\nLINE2    MVC   MSGCNT2,=X'40202120'\n         MVC   USERID2,USERID\n         ED    MSGCNT2,MSGCOUNT\n         B     ZAPCNT\nLINE3    MVC   MSGCNT3,=X'40202120'\n         MVC   USERID3,USERID\n         ED    MSGCNT3,MSGCOUNT\n         PUT   SYSOUT,USERLINE\n         MVC   MSGCNT2,=CL4' '\n         MVC   MSGCNT3,=CL4' '\n         MVC   USERID2,=CL7' '\n         MVC   USERID3,=CL7' '\n         ZAP   RECCNT,=P'0'\nZAPCNT   ZAP   MSGCOUNT,=P'0'\nNOMSG    LA    R3,13(R3)                BUMP TO NEXT ENTRY\n         BCT   R6,USRLOOP               REPEAT FOR NINE TIMES\n         FREEDBUF SCNECB,D,BRODCAST\n         CLC   SAVERRN,=3X'00'          IS THIS LAST\n         BNE   INDEXLP                  GO DO NEXT ONE\n         CP    RECCNT,=P'0'\n         BE    PUTUCNT\n         PUT   SYSOUT,USERLINE\nPUTUCNT  MVC   USERCNT,=X'4020206B202120'\n         ED    USERCNT,USERS            HOW MANY USERS ARE THERE\n         PUT   SYSOUT,UTOTLINE\n         LA    R7,TYPETABL              ONCE MORE THRU TYPE TABLE\nVERFLOOP CLI   0(R7),X'99'              END YET?\n         BE    ENDVERF\n         CLI   0(R7),X'03'              IS THIS STILL AN 03\n         LA    R7,1(R7)                 BUMP EITHER WAY\n         BNE   VERFLOOP\n         AP    UNUSABL,=P'1'\n         B     VERFLOOP\nENDVERF  EQU   *\n         MVC   UNUSDCNT,=X'40202120'\n         ED    UNUSDCNT,UNUSABL\n         PUT   SYSOUT,JUNKLINE\nCLOSE    CLOSE (BRODCAST,,SYSOUT)\n         LEAVE EQ\n         LTORG\nBLOCKNO  DC    X'000000'                BLOCK NUMBERS\nSAVERRN  DS    CL3                      SAVE LOCAL OF USER INDEX\nMSGNUM   DS    CL3                      SAVE LOCAL OF USER INDEX\nCVDAREA  DS    D\nHIGHVAL  DS    H\nRECCNT   DC    PL1'0'\nMSGCOUNT DC    PL2'0'\nNOTDIR   DC    PL3'0'\nUSRIND   DC    PL3'0'\nNOTMSG   DC    PL3'0'\nUSRMSG   DC    PL3'0'\nFREEREC  DC    PL3'0'\nUNUSABL  DC    PL3'0'\nUSERS    DC    PL3'0'\nODDKEY   DC    CL133'  ** UNKNOWN KEY TYPE ENCUNTERED ***'\nTABLERR  DC    CL133'  ** TABLE IS OUT OF SYNC WITH MY REALITY **'\nBREAKOUT DC    CL133'0< THE FOLLOWING KEY BREAKDOWN WAS FOUND >'\nUSERSOUT DC    CL133'0< THE FOLLOWING USERS HAVE MESSAGES WAITING >'\nUSERID   DS    CL7\nKEYCOUNT DS    0CL133\n         DC    CL10' '\nKEYTYPE  DC    CL50'HEADER RECORDS'\nKEYCNT   DC    CL7'      1'\n         DC    CL66' '\nTITLE    DS    0CL133\n         DC    CL31'1                              '\n         DC    CL30'BRIPER INDUSTRIES INCORPORATED'\n         DC    CL30'  BROADCAST DATASET FACILITY  '\n         DC    CL14'COPYRIGHT 1981'\n         DC    CL30' '\nBLNKLINE DS    0CL133\n         DC    CL60'                                  '\n         DC    CL73'                                  '\nMAXIMUM  DS    0CL133\n         DC    CL60' TOTAL AVAILABLE BLOCKS IN DATASET'\nMAXCNT   DS    CL7\n         DC    CL66' '\nNOTICES  DS    0CL133\n         DC    CL63' BLOCKS NECESSARY FOR BROADCST MSGS (DIRECTORY/MESSX\n               AGES)'\nNOTCNT   DS    CL4\n         DC    CL66' '\nUSERLINE DS    0CL133\n         DC    CL10' '\nUSERID1  DS    CL7\n         DC    CL5' '\nMSGCNT1  DS    CL4\n         DC    CL10' '\nUSERID2  DS    CL7\n         DC    CL5' '\nMSGCNT2  DS    CL4\n         DC    CL10' '\nUSERID3  DS    CL7\n         DC    CL5' '\nMSGCNT3  DS    CL4\n         DC    CL55' '\nUTOTLINE DS    0CL133\n         DC    CL60' NUMBER OF TSO USERS DEFINED IN DATASET'\nUSERCNT  DS    CL7\n         DC    CL66' '\nJUNKLINE DS    0CL133\n         DC    CL63'0BLOCKS FOUND TO BE GARBAGED'\nUNUSDCNT DS    CL4\n         DC    CL66' '\nBRODCAST DCB   DDNAME=BRODCAST,BLKSIZE=129,DSORG=DA,MACRF=RISC,        X\n               OPTCD=R,RECFM=F,BUFNO=2,KEYLEN=1,BUFL=130\nSYSOUT   DCB   DDNAME=SYSOUT,DSORG=PS,LRECL=133,MACRF=PM,RECFM=FBA\nTYPETABL DC    16318X'99'\nHEADER   DSECT\n         DS    CL1\nNOTRRN   DS    CL3                      RRN OF FIRST NOTICE RECORD\n         DS    CL1\nUSERRRN  DS    CL3                      RRN OF FIRST INDEX RECORD\n         DS    CL2\nTOTALREC DS    CL2                      NUMBER OF RECORDS IN FILE\nMAXNOT   DS    CL2                      MAXIMUM NUMBER OF NOTICES\n         DS    CL1                      -- REST OF RECORD ---\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BRODSCN@": {"ttr": 1798, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/ X\\x00\\x06\\x00\\x06\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T20:58:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "SYZYGY"}, "text": "//BRODSCA JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=SYZYGY,\n//       MSGCLASS=A\n//STEP01   EXEC  PGM=BRODSCAN,REGION=512K\n//BRODCAST DD    DSN=SYS1.BRODCAST,DISP=SHR\n//SYSOUT   DD    SYSOUT=*,DCB=BLKSIZE=1330\n//SYSUDUMP DD    SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CANCELO$": {"ttr": 1800, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/!\\x10\\x00 \\x00 \\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T21:10:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "SYZYGY"}, "text": "//C7BCANC JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=SYZYGY,\n//       MSGCLASS=A\n//ASMFCL PROC  CLASS=A,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='SYZYGY.PDS.DATA',\n//             LOAD='SYZYGY.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='LOAD,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1,RENT'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD.(&MEM),DISP=SHR\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=CANCELOK\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CANCELOK": {"ttr": 1802, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/!\\x10\\x00\\xde\\x00\\xde\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T21:10:00", "lines": 222, "newlines": 222, "modlines": 0, "user": "SYZYGY"}, "text": "         TITLE '   C A N C E L O K   '\n***********************************************************************\n*                                                                     *\n*        'CANCELOK' PROGRAM                                           *\n*                                                                     *\n***********************************************************************\n         SPACE\n*        ATTRIBUTES. RE-ENTRANT, AUTHORIZED.\n*        DESCRIPTION.\n*         THIS PROGRAM SETS THE CANCELABLE ATTRIBUTE ON FOR A\n*         SPECIFIED JOB OR ASID.\n*         EACH NON-CANCELABLE JOB IN THE SYSTEM IS DISPLAYED\n*         ON THE OPERATOR'S CONSOLE, AND THE OPERATOR IS ASKED\n*         TO REPLY 'U' TO CONTINUE.  IF THE REPLY IS 'S'\n*         THE JOB WILL BE MARKED CANCELABLE.\n*\n*         THIS PROGRAM DOES NOT CANCEL THE JOB.  IT JUST MARKS\n*         THE JOB CANCELABLE, SO THE OPERATOR CAN CANCEL IT\n*         WITH A CANCEL COMMAND.\n*\n*        LOG OF CHANGES.\n*         NONE.\n*\n         SPACE\nCANCELOK START\n         USING *,R10\n         B     @PROLOG-*(,R15)\n         DC    AL1(11),CL11'CANCELOK'\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n@PROLOG  STM   14,12,12(13)\n         LR    R10,R15             BASE\n         LR    R2,R1\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         LR    R9,R1\n         USING @DATA,R9\n         ST    13,4(,1)            CHAIN SAVEAREA\n         ST    1,8(,13)            CHAIN SAVEAREA\n         LR    13,1                NEW SAVEAREA\n         SPACE 1\n         XC    LINKAREA(8),LINKAREA\n         SLR   R15,R15\n         STH   R15,RC              SET RC = 0\n         MVI   OPTIONS,0\n         MVI  LINE-1,C' '\n         SPACE\n         L     R1,0(,R2)           POINT TO PARM\n         LH    R15,0(,R1)          LENGTH OF PARM\n         LTR   R15,R15\n         BZ    PARMX\nPARMX    EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        POINT TO FIRST ASCB                               *\n*                                                          *\n************************************************************\n         SPACE\n         L     R4,16               CVTPTR\n         L     R4,556(,R4)         CVTASVT\n         L     R5,516(,R4)         ASVTMAXU\n         LA    R6,528(,R4)         ASVTENTY\n         LR    R11,R6              SAVE FOR DEBUGGING\n         LA    R4,1                ASID 1\n         SPACE\n************************************************************\n*                                                          *\n*        PROCESS EACH ASCB                                 *\n*                                                          *\n************************************************************\n         SPACE\nLOOP     TM    0(R6),X'80'         IS ASCB IN USE\n         BO    NEXTASCB            NO, BRANCH\n         L     R7,0(,R6)           GET ASCB ADDRESS\n         CLC   0(4,R7),=C'ASCB'    VERIFY ASCB\n         BNE   ERROR\n         CH    R4,36(,R7)          DOES ASID MATCH ASCBASID\n         BNE   ERROR\n         L     R8,56(,R7)          GET ADDRESS OF CSCB\n         TM    7(R8),X'08'         IS IT NON CANCELABLE?\n         BO    NEXTASCB            NO, IGNORE IT\n*         ASID XXXX JOB XXXXXXXX REPLY U TO CONTINUE\n         MVC   LINE,LINE-1\n         MVC   LINE+00(4),=C'ASID'\n         UNPK  DOUBLE(5),36(3,R7)  ASCBASID\n         TR    DOUBLE(4),HEXTAB-240\n         MVC   LINE+05(4),DOUBLE\n         MVC   LINE+10(3),=C'JOB'\n         L     R1,172(,R7)         ASCBJBNI\n         LTR   R1,R1               IS IT A JOB\n         BNZ   MOVENAME            YES, GO MOVE JOB NAME\n         MVC   LINE+10(3),=C'STC'\n         L     R1,176(,R7)         ASCBJBNS\n         L     R0,60(,R7)          ASCBTSB\n         LTR   R0,R0               IS IT TSO\n         BZ    MOVESTC             NO, GO MOVE STC NAME\n         MVC   LINE+10(3),=C'TSU'\n         LTR   R1,R1               IS THERE A USERID\n         BNZ   MOVENAME            YES, GO MOVE USERID\n         LA    R1,=CL8'STARTING'\nMOVENAME MVC   LINE+14(8),0(R1)\n         B     XWTOR\nMOVESTC  MVC   LINE+14(8),0(R1)\n         CLC   0(8,R1),=CL8'*MASTER*'\n         BE    NEXTASCB\n         CLC   0(8,R1),=CL8'JES2'\n         BE    NEXTASCB\n*\n*               WTOR AND GET REPLY FROM OPERATOR\n*\nXWTOR    MVC   LINE+23(23),=C'REPLY U TO CONTINUE    '\n         MVC   WTOW(12),WTOR       COPY MODEL WTOR\n         MVC   WTOW+12(46),LINE    PUT NEW TEXT IN WTOR MESSAGE\n         LH    R14,WTOR+8          GET LENGTH+4 OF MODEL TEXT\n         LA    R14,WTOR+8(R14)     ROUTCDE IN MODEL WTOR\n         LA    R15,46+4            GET LENGTH+4 OF NEW TEXT\n         STH   R15,WTOW+8          SET NEW LENGTH\n         LA    R15,WTOW+8(R15)     POINT PAST NEW TEXT\n         MVC   0(4,R15),0(R14)     COPY ROUTCDE\nREPEAT   XC    REPLY,REPLY\n         XC    ECB,ECB\n         LA    R1,WTOW\n         WTOR  ,REPLY,,ECB,MF=(E,(1))\n         WAIT  ECB=ECB\n         OI    REPLY,X'40'         CAPS\n         CLI   REPLY,C'U'\n         BE    NEXTASCB\n         CLI   REPLY,C'S'          SET IT CANCELABLE\n         BE    SETCANCL\n         B     REPEAT\nSETCANCL EQU   *\n         MODESET KEY=ZERO\n         OI    7(R8),X'08'         MARK IT CANCELABLE\n         MODESET KEY=NZERO\n         B     NEXTASCB\nNEXTASCB LA    R6,4(,R6)           POINT TO NEXT ASCB POINTER\n         LA    R4,1(,R4)           INCREMENT ASID\n         BCT   R5,LOOP\n         B     EXIT0\n         SPACE\n************************************************************\n*                                                          *\n*         TERMINATE                                        *\n*                                                          *\n************************************************************\n         SPACE\nERROR    DC    H'0'                S0C1\nEXIT0    EQU   *\n         LH    R15,RC\nEXIT     LR    1,13\n         L     R0,@SIZE\n         L     13,4(,13)\n         LR    R2,R15\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2\n         LM    0,12,20(R13)\n         L     14,12(,R13)\n         BR    14\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nVERMSG   DC    C'(YES OR NO)'\nHEXTAB   DC    C'0123456789ABCDEF'\nWTO      WTO   'OKAY',ROUTCDE=(1,8),MF=L\nWTOR     WTOR  'WHY?',@REPLY,3,@ECB,ROUTCDE=(1,8),MF=L\n@REPLY   EQU   1\n@ECB     EQU   1\n         LTORG\n         DC    0D'0'               END OF CSECT\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nDOUBLE   DS    D\nSAVEREGS DS    16F\nREGBTERM DS    18F\nLINKAREA DS    2F\nECB      DS    F\nRC       DS    H\nUNIT     DS    H\nTRMID    DS    CL8\nREPLY    DS    CL3\nOPTIONS  DS    C\nOPTCAN   EQU   X'80'\n         DS    0F\nLINEM1   DS    C                  LINE-1\nLINE     DS    CL79\nWTOW     DS    0F,CL80\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\n*        CVT\nCVTMAP   DSECT\nCVTBTERM EQU   CVTMAP+X'34'\n         SPACE 2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CANCELPR": {"ttr": 1807, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/!\\x11\\x00\\x04\\x00\\x04\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T21:11:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "SYZYGY"}, "text": "//CANCELOK  EXEC PGM=CANCELOK\n//SYSPRINT  DD   SYSOUT=A\n//SYSABEND  DD   SYSOUT=A\n//SYSUDUMP  DD   SYSOUT=A\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CATALOG": {"ttr": 1809, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/!!\\x06\\x01\\x06\\x01\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T21:21:00", "lines": 1537, "newlines": 1537, "modlines": 0, "user": "SYZYGY"}, "text": "         TITLE 'C A T A L O G -   TSO CATALOG MAINTENANCE PROCESSOR'\n         SPACE 2\n         MACRO\n&NAME    MSG   &TEXT\n         LCLA  &A\n&A       SETA  K'&TEXT-2+4\n&NAME    DC    H'&A',H'0',C&TEXT\n         MEND\n         EJECT\n         MACRO\n&NAME    CLEAR &FIELD\n         LCLC  &L\n&L       SETC  'L'''\n&NAME    MVI   &FIELD,X'40'\n         MVC   &FIELD+1(&L&FIELD-1),&FIELD\n         MEND\n         EJECT\n         MACRO\n&NAME    ENTER\n&NAME    DS    0H\n         STM   14,12,12(13) .      SAVE CALLING REGISTERS\n         L     WORKR,4(R1) .       RESTORE WORK AREA ADDR\n         LM    DATAR,BASE,BASES .  RESTORE BASE REGISTER\n         L     R8,0(R1) .          LOAD PDS ADDRESS\n         ST    OSAVE,VSAVE+4 .     CHAIN OLD SAVE AREA ADDR\n         LR    R15,OSAVE .         SAVE OLD SAVE AREA ADDR\n         LA    OSAVE,VSAVE .       LOAD NEW SAVE AREA ADDR\n         ST    OSAVE,8(R15) .      CHAIN NEW SAVE AREA ADDR\n         MEND\n         EJECT\n         MACRO\n&NAME    EXIT\n&NAME    DS    0H\n         L     OSAVE,VSAVE+4\n         RETURN (14,12),T,RC=(15)\n         MEND\n         TITLE 'C A T A L O G -   TSO CATALOG MAINTENANCE PROCESSOR'\nR0       EQU   0                   REGISTER 0\nR1       EQU   1                   REGISTER 1\nR2       EQU   2                   REGISTER 2\nR3       EQU   3                   REGISTER 3\nR4       EQU   4                   REGISTER 4\nR5       EQU   5                   REGISTER 5\nR6       EQU   6                   REGISTER 6\nR7       EQU   7                   REGISTER 7\nR8       EQU   8                   REGISTER 8\nLINK     EQU   9                   INTERNAL LINKAGE REGISTER\nWORKR    EQU   10                  WORK AREA ADDRESS REGISTER\nDATAR    EQU   11                  DATA AREA ADDRESS REGISTER\nBASE     EQU   12                  BASE ADDRESS REGISTER\nOSAVE    EQU   13                  O/S SAVE AREA ADDRESS\nR14      EQU   14                  REGISTER 14\nR15      EQU   15                  REGISTER 15\n         SPACE 1\nFCLIST   EQU   128                 BIT TO INDICATE CLIST\nFCMD     EQU   64                  BIT TO INDICATE COMMAND\nFNULL    EQU   32                  BIT TO INDICATE NULL LINE\nFATTN    EQU   16                  BIT TO INDICATE ATTENTION\nFCBUF    EQU   8                   BIT TO INDICATE CBUF INPUT\nFEXIT    EQU   4                   BIT TO INDICATE EXIT REQUESTED\n         SPACE 1\nFINDEX   EQU   128                 BIT TO INDICATE INDEX\nFCVOL    EQU   64                  BIT TO INDICATE CVOL\nFSEQ     EQU   32                  BIT TO INDICATE SEQ NO\nFUNIT    EQU   16                  BIT TO INDICATE UNIT\nFALIAS   EQU   8                   BIT TO INDICATE ALIAS\nFGEN     EQU   4                   BIT TO INDICATE GENERATION DS\nFDSNX    EQU   2                   BIT TO INDICATE FIRST DSN RECV\n         SPACE 1\nLPAREN   EQU   C'('                LEFT PAREN\nRPAREN   EQU   C')'                RIGHT PAREN\nPERIOD   EQU   C'.'                PERIOD\nBLANK    EQU   C' '                SPACE\nFF       EQU   X'FF'               HIGH VALUE\n         EJECT\n***********************************************************************\n*                                                                     *\n* TITLE -      CATALOG     TSO CATALOG MAINTENANCE PROCESSOR          *\n*                                                                     *\n*                                                                     *\n* RELEASE -    1.1         CATALOG RELEASE                            *\n*                                                                     *\n* AUTHOR -     MICHAEL LEE EMIGH                                      *\n*              UNITED AIR LINES - EXOKF COMPUTER CENTER               *\n*              1200 W. ALGONQUIN ROAD                                 *\n*              ELK GROVE VILLAGE, ILLINOIS                            *\n*              PHONE: 312-952-4371\n*                                                                     *\n*                                                                     *\n* FUNCTION -   THE CATALOG COMMAND ALLOWS THE TSO USER TO REFERENCE   *\n*              AND MAINTAIN THE OS CATALOG                            *\n*              THE CATALOG COMMAND PROVIDES OPTIONS TO CATALOG OR     *\n*              UNCATALOG A DATA SET, BUILD OR DELETE AN INDEX OR AN   *\n*              ALIAS, BUILD A GENERATION DATA GROUP, CONNECT OR       *\n*              RELEASE TWO VOLUMES, DISPLAY CATALOGED DATA SET VOLUME *\n*              SERIAL NUMBERS, AND SCRATCH AND RENAME DATA SETS       *\n*              RESIDING ONLINE DIRECT ACCESS DEVICES.                 *\n*                                                                     *\n* INPUT -      STANDARD LINKAGE CONVENTIONS                           *\n*              REGISTER 1 - ADDRESS OF COMMAND PROCESSOR PARAMETER    *\n*                           LIST\n*                                                                     *\n*                                                                     *\n* OUTPUT -     RETURN TO TERMINAL MONITOR PROGRAM                     *\n*              REGISTER 15 CONTAINS RETURN CODE AS FOLLOWS            *\n*                 0 - NO ERRORS ENCOUNTERED                           *\n*                >0 - LAST RETURN CODE FROM A FUNCTION                *\n*                                                                     *\n*                                                                     *\n* ATTRIBUTES - REENTERANT, REUSABLE, REFRESHABLE                      *\n*                                                                     *\n* NOTES -      THIS ROUTINE INTERFACES TO THE OPERATION SYSTEM        *\n*              BY THE USE OF CAMLST MACROS.                           *\n*              UNDER SOME VERSIONS OF MVS, THESE MACROS ARE NOT       *\n*              SUPPORTED.                                             *\n*              ALSO, UNDER MVS, THERE IS NO (OR LIMITED) SUPPORT      *\n*              OF ALIAS/INDEX BUILDING IN THE VSAM MASTER CATALOG.    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nCATALOG  CSECT                     TSO CATALOG MAINTENANCE PROCESSOR\n         SAVE  (14,12),T,*         SAVE CALLING REGISTERS\n         LR    BASE,R15            LOAD BASE ADDRESS REGISTER\n         USING CATALOG,BASE        GIVE BASE ADDRESS TO ASSEMBLER\n         LR    R2,OSAVE            SAVE O/S SAVE AREA ADDR\n         LR    R5,R1               SAVE CPPL ADDRESS\n         LA    DATAR,DATAREA       LOAD DATA AREA ADDRESS\n         USING DATAREA,DATAR       GIVE DATA AREA ADDR TO ASSEMBLER\n         L     R4,WASIZE           LOAD WORK AREA SIZE\n         GETMAIN R,LV=(R4)         GET MAIN STORAGE FOR WORK AREA\n         LR    WORKR,R1            LOAD WORK AREA ADDR REG\n         USING WORKAREA,WORKR      GIVE WORK AREA ADDR TO ASSEMBLER\n         LR    R0,R1               LOAD WORK AREA ADDRESS FOR CLEAR\n         LR    R1,R4               LOAD WORK AREA LENGTH\n         SR    R3,R3               CLEAR PAD CHARACTER AND ZERO LENGTH\n         MVCL  R0,R2               CLEAR WORK AREA TO ZERO\n         STM   DATAR,BASE,BASES    SAVE BASE REGISTERS\n         ST    R2,SAVE+4           CHAIN OLD SAVE AREA\n         LA    OSAVE,SAVE          LOAD NEW SAVE AREA ADDR\n         ST    OSAVE,8(R2)         CHAIN NEW SAVE AREA\n         LR    R3,R5               COPY CPPL ADDRESS TO R3\n         EJECT\n         USING CPPL,R3             GIVE CPPL ADDR TO ASSEMBLER\n         MVC   AUPT,CPPLUPT        SAVE UPT ADDR\n         MVC   AECT,CPPLECT        SAVE ECT ADDR\n         MVC   APSCB,CPPLPSCB      SAVE PSCB ADDR\n         LA    R1,IOPLPARM         LOAD IOPL ADDRESS\n         USING IOPL,R1             *\n         MVC   IOPLECT,CPPLECT     MOVE ECT ADDR TO IOPL\n         MVC   IOPLUPT,CPPLUPT     MOVE UPT ADDR TO IOPL\n         LA    R0,ATTNECB          LOAD ATTENTION ECB ADDR\n         ST    R0,IOPLECB          STORE IN IOPL\n         LOAD  EPLOC=IKJPUTL       LOAD PUTLINE SERVICE ROUTINE\n         ST    R0,APUTL            SAVE IKJPUTL EP ADDR\n         LOAD EPLOC=IKJPTGT        LOAD PUTGET SERVICE ROUTINE\n         ST    R0,APTGT            SAVE IKJPTGT EP ADDR\n         LOAD  EPLOC=IKJSCAN       LOAD COMMAND SCAN ROUTINE\n         ST    R0,ASCAN            SAVE IKJSCAN EP ADDR\n         LOAD  EPLOC=DEVNAMET LOAD DEVICE NAME TABLE\n         ST    R0,ADEVNT           SAVE DEVNAMET EP ADDR\n         MVC   MSGENTER,MSGENT     MOVE IN ENTER MSG\n         L     R4,AECT             LOAD ECT ADDRESS\n         USING ECT,R4              SET ECT DSECT\n         MVC   MSGENTER+5(8),ECTPCMD MOVE COMMAND NAME TO MSG\n         TM    ECTSWS,128          TEST IF INPUT IN CMD BUFFER\n         BO    CMD                 IF NOT THEN GO GET COMMAND\n         MVC   ACBUF,CPPLCBUF       SAVE COMMAND BUFFER ADDR\n         OI    FLAGS,FCMD+FCBUF    INDICATE COMMAND PRESENT\n         B     CMD                 GO GET A NEW COMMAND\n         DROP  R3\n         DROP  R4\n         EJECT\nOPTIONS  DS    0H                  DISPLAY OPTIONS FOR USER\n         LA    R2,OPTNTBL          LOAD OPTION TABLE ADDRESS\n         SPACE 2\nOPTIONS0 DS    0H                  ADVANCE TO NEXT OPTION\n         MVC   MSGTEXT1,0(R2)      MOVE TEXT TO TEMP BUFFER\n         LA    R1,MSGTEXT1         LOAD TEMP BUFFER ADDR\n         BAL   LINK,PUTLINE        BAL TO PUTLINE ROUTINE\n         B     CMD                 RETURN HERE IF ATTENTION\n         MVC   0(2,OSAVE),0(R2)    MOVE AND ALIGN OPT LENGTH\n         LH    R1,0(OSAVE)         LOAD OPT LENGTH\n         LA    R1,1(R1)            ROUND TO NEXT HALFWORD\n         SRL   R1,1                MULTIPLE\n         SLL   R1,1                TIMES 2\n         AR    R2,R1               NEXT OPTION\n         CLI   0(R2),FF            END OF LIST\n         BNE   OPTIONS0            NO, REPEAT\n         EJECT\nCMD      DS    0H                  GET NEXT COMMAND\n         MVI   ATTNECB,0           CLEAR ATTENTION ECB\n         NI    FLAGS,FF-FATTN      DISALLOW ATTENTIONS\n         TM    FLAGS,FEXIT         TEST IF EXIT REQUESTED\n         BO    RETURN              IF YES THEN EXIT\n         STAX  ,                   NULLIFY ATTN EXITS\n         XC    CAMLIST(20),CAMLIST CLEAR CAM LIST AREA\n         XC    VCB(256),VCB        CLEAR VOLUME CONTROL BLOCK\n         TM    FLAGS,FCMD          COMMAND BUFFER AVAILABLE\n         BO    CMD0                YES, GO ANALYZE\n         LA    R1,MSGENTER         LOAD ENTER MSG ADDR\n         BAL   LINK,PUTGET         BAL TO PUTGET ROUTINE\n         B     FLUSH               ATTENTION ENTERED\n         SPACE 2\nCMD0     DS    0H                  SET UP FOR SUBCOMMAND SCAN\n         NI    FLAGS,FF-FCMD       CLEAR COMMAND FLAG\n         MVI   FLAGS+1,0           CLEAR STATUS FLAGS\n         TM    FLAGS,FCBUF         TEST IF CMD FROM INPUT BUFFER\n         BZ    *+8                 IF NOT SKIP NEXT INSTRUCTION\n         OI    FLAGS,FEXIT+FCMD    SET EXIT FLAG\n         LA    R1,PARMLIST         LOAD PARM LIST ADDR\n         USING CSPL,R1             SET CSPL DSECT\n         MVC   CSPLUPT,AUPT        MOVE UPT ADDR TO CSPL\n         MVC   CSPLECT,AECT        MOVE ECT ADDR TO CSPL\n         LA    R0,ATTNECB          LOAD ATTENTION ECB ADDR\n         ST    R0,CSPLECB          MOVE ATTN ECB ADDR TO CSPL\n         MVI   ATTNECB,0           CLEAR ATTENTION ECB\n         LA    R0,SCANAREA         LOAD SCAN ANSWER AREA ADDR\n         ST    R0,CSPLOA           MOVE ADDR TO CSPL\n         XC    SCANAREA,SCANAREA   CLEAR SCAN AREA\n         LA    R0,R14SAVE          LOAD R14 SAVE AREA ADDR\n         ST    R0,CSPLFLG          STORE IN CSPL\n         XC    R14SAVE,R14SAVE     CLEAR R14 SAVE AREA\n         MVC   CSPLCBUF,ACBUF      MOVE CMD BUF ADDR TO CSPL\n         L     R15,ACBUF           LOAD COMMAND BUFFER ADDRESS\n         LH    R14,2(R15)          LOAD OFFSET\n         LA    R2,4(R14,R15)       POINT TO OFFSET\n         LH    R3,0(R15)           LOAD LINE LENGTH\n         SR    R3,R14              ADJUST FOR OFFSET\n         SH    R3,=H'4'            MINUS 4 FOR PREFIX\n         L     R15,ASCAN           LOAD CMD SCAN ADDR\n         BALR  R14,R15             BAL TO INVOKE CMD SCAN\n         LA    R1,SCANAREA         LOAD ANSWER AREA ADDR\n         USING CSOA,R1             SET CSOA DSECT\n         TM    CSOAFLG,CSOANOC     EMPTY BUFFER\n         BO    CMD                 YES, STILL NEED CMD\n         TM    CSOAFLG,CSOAVWP+CSOAVNP VALID COMMAND\n         BNZ   CMD1                YES, GO CHECK\n         LA    R1,MSGINVLD         INVALID CMD MSG\n         B     CMD4                GO GET NEW CMD\n         EJECT\nCMD1     DS    0H                  CHECK A COMMAND\n         L     R2,CSOACNM          LOAD COMMAND NAME ADDR\n         LH    R3,CSOALNM          LOAD NAME LENGTH\n         BCTR  R3,0                MINUS 1 FOR EXEC\n         DROP  R1\n         LA    R1,CMDLIST          LOAD CMD TABEL ADDR\n         SR    R15,R15             SET UP FOR CMD SCAN\n         SR    R14,R14             DITTO\n         SPACE 2\nCMD2     DS    0H                  SCAN FOR THE COMMAND\n         IC    R15,8(R1)           LOAD CMD LENGTH\n         CR    R15,R3              CHECK CMD LENGTH\n         BNH   CMD3                *\n         CLC   0(0,R1),0(R2)       COMPARE COMMANDS\n         EX    R3,*-6              CHECK COMMAND NAME\n         BE    CMD5                MATCH, MUST BE COMMAND\n         SPACE 2\nCMD3     DS    0H                  ADVANCE TO NEXT COMMAND\n         LA    R1,16(R1)           NEXT ENTRY IN TABLE\n         CLI   0(R1),FF            END OF TABLE\n         BNE   CMD2                NO, CONTINUE\n         LTR   R14,R14             COMMAND SELECTED?\n         BNZ   CMD6                YES, GO CHECK\n         LA    R1,MSGINVLD         CMD INVALID MSG\n         SPACE 2\nCMD4     DS    0H                  ERROR IN COMMAND\n         MVC   MSGTEXT1,0(R1)      MOVE MAIN MSG TEXT\n         LH    R15,MSGTEXT1        LOAD MSG LENGTH\n         LA    R14,MSGTEXT1(R15)   POINT TO END OF MSG\n         MVC   0(0,R14),0(R2)      MOVE INVALID CMD TO MSG\n         EX    R3,*-6              EXECUTE FOR PROPER LENGTH\n         LA    R15,1(R3,R15)       COMPUTE NEW MSG LENGTH\n         STH   R15,MSGTEXT1        STORE IN MSG\n         LA    R1,MSGTEXT1         LOAD NEW MSG ADDRESS\n         SR    R0,R0               INDICATE NO SECOND LEVEL MSG\n         BAL   LINK,ERRORMSG       WRITE ERROR MSG TO TERMNL\n         NOP   0                   IGNORE ATTENTIONS\n         TM    FLAGS,FCLIST        FROM CLIST?\n         BO    FLUSH               YES, THEN PERMANENT ERROR\n         B     CMD                 GO PRINT OPTIONS\n         SPACE 2\nCMD5     DS    0H                  GOT A VALID COMMAND\n         LTR   R14,R14             PREVIOUS CMD SELECTED\n         LR    R14,R1              SAVE CMD ADDR\n         BZ    CMD3                NO, FIRST SELECTED\n         LA    R1,MSGAMBIG         LOAD AMBIG. MSG ADDR\n         B     CMD4                YES, THEN ERROR\n         EJECT\nCMD6     DS    0H                  VALID COMMAND\n         MVC   APCL,12(R14)        SAVE PCL ADDRESS\n         L     R1,8(R14)           GET COMMAND PROCESSOR ADDR\n         ST    R1,ACMD             SAVE IT\n         TM    APCL,X'40'          IGNORE OPTIONS?\n         BO    CMD7                YES\n         BAL   LINK,PARSE          GET THE COMMAND OPERANDS\n         B     CMD                 ATTENTION ENTERED\n         SPACE 2\nCMD7     DS    0H                  CALL COMMAND\n         XC    PARMLIST(20),PARMLIST CLEAR PARM LIST AREA\n         STAX  ATTNX,USADDR=(WORKR),REPLACE=YES,IBUF=0,OBUF=0,         X\n               MF=(E,PARMLIST)\n         OI    FLAGS,FATTN         ALLOW ATTENTIONS\n         L     R15,ACMD            LOAD COMMAND ADDRESS\n         BR    R15                 LINK TO COMMAND PROCESSOR\n         EJECT\nATTNX    DS    0H                  ATTENTION EXIT\n         SAVE  (14,12)             SAVE CALLING REGS\n         L     WORKR,8(R1)         LOAD WORK AREA ADDRESS\n         LM    DATAR,BASE,BASES    LOAD BASE REGISTERS\n         LA    R15,ASAVE           LOAD ATTENTION SAVE AREA ADDR\n         ST    OSAVE,ASAVE+4       CHAIN OLD SAVE AREA\n         ST    R15,8(OSAVE)        CHAIN NEW SAVE AREA\n         LR    OSAVE,R15           LOAD NEW SAVE AREA ADDR\n         TCLEARQ OUTPUT            CLEAR OUTPUT BUFFERS\n         TM    FLAGS,FATTN         ATTENTIONS ALLOWED?\n         BZ    ATTNX0              NO, EXIT\n         TM    FLAGS,FEXIT         TEST IF EXIT FLAG ON\n         BO    ATTNX0              IF YES THEN EXIT\n         LA    R1,MSGENTER         LOAD OPT ENTER MSG ADDR\n         BAL   LINK,PUTGET         GET USERS COMMAND RESPONSE\n         NOP   0                   IGNORE ANOTHER ATTENTION\n         TM    FLAGS,FNULL         NULL LINE ENTERED\n         BO    ATTNX0              YES, JUST LEASE\n         OI    FLAGS,FCMD          INDICATE COMMAND AVAILABLE\n         POST  ATTNECB             POST ATTENTION ECB\n         SPACE 2\nATTNX0   DS    0H                  ATTENTION EXIT\n         SR    R15,R15             RETURN TO ZERO\n         L     OSAVE,ASAVE+4\n         RETURN (14,12),RC=(15)    RETURN TO O/S\n         EJECT\nVOL      DS    0H                  VOL COMMAND PROCESSOR\n         OI    CAMLIST,68          INSERT CAMLIST LOCATE BITS\n         LA    R0,VCB              LOAD VCB ADDRESS\n         ST    R0,CAMLIST+12       STORE VCB ADDRESS IN CAMLIST\n         LOCATE CAMLIST            ISSUE LOCATE MACRO\n         ST    R15,RETCODE         SAVE RETURN CODE\n         LTR   R15,R15             SUCCESSFUL?\n         BZ    VOL2                YES\n         LA    R14,8               RETURN CODE 8\n         CR    R14,R15             DATA SET NOT CATLG?\n         BE    VOL1                YES\n         L     R1,LOCMSGL(R15)     LOAD LOCATE MSG ADDR\n         BAL   LINK,PUTLINE        LINK TO PUTLINE ROUTINE\n         NOP   0                   *\n         B     CMD                 GO GET NEXT CMD\n         SPACE 2\nVOL1     DS    0H                  DATA SET IS NOT CATALOGED\n         LH    R2,LDSNX            LOAD DSNAME LENGTH\n         LA    R2,4(R2)            INCREMENT BY PREFIX LENGTH\n         MVC   MSGTEXT1+4,DSNAMEX  MOVE DSNAME TO MSG AREA\n         LA    R3,MSGTEXT1(R2)     POINT PAST DSNAME\n         MVC   0(L'MSGNCAT,R3),MSGNCAT MOVE NOT CATLG MSG IN\n         LA    R2,L'MSGNCAT(R2)    CORRECT LENGTH\n         SLL   R2,16               SHIFT TO HIGH BYTES\n         ST    R2,MSGTEXT1         STORE LENGTH IN MSG\n         LA    R1,MSGTEXT1         LOAD MSG ADDRESS\n         BAL   LINK,PUTLINE        LINK TO PUTLINE ROUTINE\n         NOP   0                   *\n         B     CMD                 GO GET NEXT CMD\n         SPACE 2\nVOL2     DS    0H                  *\n         OI    FLAGS,FATTN         ALLOW ATTENTIONS\n         TM    FLAGS+1,FGEN        TEST IF GENERATION DATA SET\n         BZ    VOL3                NO, SKIP THIS PARA.\n         LA    R2,48               ADD LINE PREFIX LENGTH\n         SLL   R2,16               SHIFT TO HIGH BYTES\n         ST    R2,MSGTEXT1         STORE IN MSG AREA\n         MVC   MSGTEXT1+4(L'DSNAMEX),DSNAMEX MOVE DSN TO MSG AREA\n         LA    R1,MSGTEXT1         LOAD MSG ADDRESS\n         BAL   LINK,PUTLINE        LINK TO PUTLINE ROUTINE\n         B     CMD                 ATTENTION ENTERED\n         EJECT\nVOL3     DS    0H                  PRINT OUT VOLUME SERIAL NMBRS\n         LA    R1,MSGHVOL          LOAD VOLUME PRT HEADER\n         BAL   LINK,PUTLINE        LINK TO PUTLINE ROUTINE\n         B     CMD                 ATTENTION ENTERED\n         CLEAR MSGTEXT1            CLEAR MSG AREA\n         LA    R0,12               LOAD MSG LENGTH + PREFIX\n         SLL   R0,16               SHIFT TO HIGH BYTES\n         ST    R0,MSGTEXT1         STORE LENGTH IN MSG AREA\n         LH    R2,VCBNVOLS         LOAD NUMBER OF VOLUMES\n         LR    R3,R2               SAVE NUMBER OF VOLS      *HMD 07/81*\n         CH    R3,=H'20'           LOAD VCB MAXIMUM         *HMD 07/81*\n         BNH   *+8                 IF NOT HIGH THEN OK      *HMD 07/81*\n         LA    R3,20               RESET VOL COUNT          *HMD 07/81*\n         USING VCBFLD,R4           SET VCB FIELD DSECT      *HMD 07/81*\n         LA    R4,VCBENT           LOAD FIRST ENTRY ADDR    *HMD 07/81*\n         SPACE 2\nVOL4     DS    0H                  VOLUME PRINT LOOP\n         SR    R2,R3               DECREMENT VOL COUNT      *HMD 07/81*\nVOL4A    MVC   MSGTEXT1+6(6),VCBVOL MOVE VOLSER TO MSG AREA *HMD 07/81*\n         LA    R1,MSGTEXT1         LOAD MSG AREA ADDR\n         BAL   LINK,PUTLINE        LINK TO PUTLINE ROUTINE\n         B     CMD                 ATTENTION ENTERED\n         LA    R4,12(R4)           ADVANCE TO NEXT FIELD\n         BCT   R3,VOL4A            IF MORE THEN REPEAT\n         LTR   R2,R2               ARE THERE MORE ENTRIES   *HMD 07/81*\n         BZ    CMD                 GO GET NEXT CMD\nVOL5     DS    0H                                           *HMD 07/81*\n         OC    VCBTTR,VCBTTR       IS TTR FIELD ZERO?       *HMD 07/81*\n         BZ    CMD                 YES, END OF VOLUME LIST  *HMD 07/81*\n         OC    VCBCVOL,VCBCVOL     IS CVOL ENTRY ZERO?      *HMD 07/81*\n         BZ    CMD                 ERROR IN CATLG STRUCTURE *HMD 07/81*\n         XC    CAMLIST(20),CAMLIST CLEAR CAMLIST            *HMD 07/81*\n         MVC   TTRX,VCBTTR         MOVE TTR TO SAFE PLACE   *HMD 07/81*\n         MVC   XCVOL,VCBCVOL       MOVE CVOL VOLSER ALSO    *HMD 07/81*\n         OI    CAMLIST,194         INDICATE BLOCK FORM      *HMD 07/81*\n         LA    R0,TTRX             SAVE ADDRESS OF TTR      *HMD 07/81*\n         ST    R0,CAMLIST+4        IN CAMLST                *HMD 07/81*\n         LA    R0,XCVOL            SAVE ADDRESS OF CVOL VOLSER\n         ST    R0,CAMLIST+8        IN CAMLIST               *HMD 07/81*\n         LA    R0,VCB              SAVE ADDRESS OF AREA     *HMD 07/81*\n         ST    R0,CAMLIST+12       IN CAMLST                *HMD 07/81*\n         LOCATE CAMLIST            ISSUE LOCATE SVC         *HMD 07/81*\n         LTR   R15,R15             WAS LOCATE SUCCESSFUL    *HMD 07/81*\n         BZ    VOL6                YES CONTINUE             *HMD 07/81*\n         LA    R1,MSGMCAT          LOCATE FAILED            *HMD 07/81*\n         LA    R0,MSGLCAT          TELL THE USER SO         *HMD 07/81*\n         BAL   LINK,ERRORMSG       PUT OUT ERROR MESSAGE    *HMD 07/81*\n         NOP   0                   IGNORE ATTN INTERRUPTION *HMD 07/81*\n         B     CMD                 GET NEXT COMMAND         *HMD 07/81*\nVOL6     LH    R3,VCBNVOLS         LOAD NUMBER OF VOLS      *HMD 07/81*\n         CH    R3,=H'20'           MORE THAN 20?            *HMD 07/81*\n         BNH   *+8                 NO, DO ALL OF 'EM        *HMD 07/81*\n         LA    R3,20               ONLY DO 20 AT A TIME     *HMD 07/81*\n         LA    R4,VCBENT           POINT TO CURRENT ENTRY   *HMD 07/81*\n         B     VOL4                CONTINUE LISTING         *HMD 07/81*\n         EJECT\nCATLG    DS    0H                  CATLG COMMAND PROCESSOR\n         OI    CAMLIST,68          INSERT CAMLIST LOCATE BITS\n         LA    R0,XVCB             LOAD EXTRA VCB ADDRESS\n         ST    R0,CAMLIST+12       STORE VCB ADDRESS IN CAMLIST\n         LOCATE CAMLIST            ISSUE LOCATE MACRO\n         ST    R15,RETCODE         SAVE RETURN CODE\n         LTR   R15,R15             IS DATA SET ALREADY CATALOGED?\n         BZ    CATLG5              YES, THEN ERROR\n         LA    R4,VCBENT           LOAD VCB ENTRIES ADDR\n         LH    R3,VCBNVOLS         LOAD NUMBER OF ENTRIES\n         USING VCBFLD,R4           SET VCB FIELD DSECT\n         TM    FLAGS+1,FUNIT       TEST IF UNIT ENTERED\n         BO    CATLG0              YES\n         MVC   UNIT,=XL4'32008003' MOVE IN DEFAULT UNIT\n         CLI   VCBVOL,C'0'         NUMERIC\n         BNL   CATLG0              YES, THEN TAPE DEFAULT\n         MVC   UNIT,=XL4'30502009' ELSE RESET TO DISK DEFAULT\n         SPACE 2\nCATLG0   DS    0H                  WRITE MSG TO TERMINAL\n         TM    FLAGS+1,FSEQ        TEST IF SEQUENCE NUMBER ENTERED\n         BO    CATLG1              YES\n         MVC   SEQNO,=H'1'         MOVE IN DEFAULT SEQUENCE NO\n         SPACE 2\nCATLG1   DS    0H                  *\n         MVC   VCBSEQ,SEQNO        MOVE IN SEQUENCE NO\n         MVC   VCBUNIT,UNIT        MOVE IN UNIT TYPE\n         TM    FLAGS+1,FUNIT       TEST IF UNIT ENTERED\n         BO    CATLG3              YES\n         LA    R1,MSGUTAPE         LOAD TAPE DEFAULT MESSAGE\n         TM    VCBUNIT+2,X'20'     TEST IF DIRECT ACCESS DEVICE\n         BNO   CATLG2              IF NOT THEN ASSUME TAPE\n         LA    R1,MSGUDA           LOAD 3330 DEFAULT MESSAGE\n         BAL   LINK,UCBCK          CHECK IF VOL SER IS ONLINE\n         B     CATLG2              RETURNS HERE IF NOT FOUND\n         B     CATLG3              RETURNS HERE IF FOUND\n         SPACE 2\nCATLG2   DS    0H                  *\n         MVC   MSGTEXT1,0(R1)      SET UP DEFAULT MESSAGE\n         LA    R1,MSGTEXT1         POINT TO MESSAGE\n         LH    R15,MSGTEXT1        LOAD MSG TEXT LENGTH\n         LA    R14,0(R1,R15)       POINT TO END OF MESSAGE\n         MVC   0(6,R14),VCBVOL     MOVE VOL/SER TO MESSAGE TEXT\n         LA    R15,6(,R15)         ADD IN VOL/SER LENGTH\n         STH   R15,MSGTEXT1        SAVE MSG TEXT LENGTH\n         BAL   LINK,PUTLINE        LINK AND PRINT LINE\n         B     CMD                 RETURNS HERE IF ATTENTION\n         EJECT\nCATLG3   DS    0H                  *\n         TM    VCBUNIT+2,X'20'     TEST IF DIRECT ACCESS DEVICE\n         BNO   CATLG4              IF NOT THEN ASSUME TAPE\n         XC    VCBSEQ,VCBSEQ       SET SEQUENCE UMBER TO ZERO\n         SPACE 2\nCATLG4   DS    0H                  *\n         LA    R4,12(R4)           ADVANCE TO NEXT ENTRY\n         BCT   R3,CATLG1           IF MORE ENTRIES REPEAT\n         OI    CAMLIST,100         INSERT CATALOG CAMLIST BITS\n         MVI   CAMLIST+1,64        INSERT FUNCTION BITS\n         LA    R0,VCB              LOAD VCB ADDRESS\n         ST    R0,CAMLIST+12       STORE VCB ADDRESS IN CAMLIST\n         CATALOG CAMLIST           ISSUE CATALOG MACRO\n         ST    R15,RETCODE         SAVE RETURN CODE\n         L     R1,CATMSGL(R15)     LOAD MSG ADDRESS\n         BAL   LINK,PUTLINE        LINK TO PUTLINE ROUTINE\n         NOP   0                   IGNORE ATTENTIONS\n         B     CMD                 GO GET NEXT COMMAND\n         SPACE 2\nCATLG5   DS    0H                  DATA SET IS ALREADY CATALOGED\n         LH    R2,LDSNX            LOAD DSNAME LENGTH\n         LA    R2,4(R2)            ADD MSG PREFIX LENGTH\n         MVC   MSGTEXT1+4,DSNAMEX  MOVE DSNAME TO MSG AREA\n         LA    R3,MSGTEXT1(R2)     POINT PAST DSNAME\n         MVC   0(L'MSGACAT,R3),MSGACAT MOVE ALREADY CATLG MSG\n         LA    R2,L'MSGACAT(R2)    ADJUST MSG LENGTH\n         SLL   R2,16               SHIFT TO HIGH ORDER BYTES\n         ST    R2,MSGTEXT1         STORE IN MSG AREA\n         LA    R1,MSGTEXT1         LOAD MSG ADDRESS\n         BAL   LINK,PUTLINE        LINK TO PUTLINE ROUTINE\n         NOP   0                   IGNORE ATTENTIONS\n         B     CMD                 GO GET NEXT COMMAND\n         EJECT\nDLTA     DS    0H                  DLTA COMMAND PROCESSOR\n         MVI   CAMLIST+1,1         INSERT FUNCTION BYTES\n         B     INDEX               GO BUILD CAMLIST\n         SPACE 2\nBLDA     DS    0H                  BLDA COMMAND PROCESSOR\n         MVI   CAMLIST+1,16        INSERT FUNCTION BYTE\n         OI    CAMLIST,64          INSERT BLDA CAMLIST BITS\n         B     INDEX               GO BUILD INDEX CAMLIST\n         SPACE 2\nRELEASE  DS    0H                  RELEASE COMMAND PROCESSOR\n         MVI   CAMLIST+2,128       INSERT RELEASE CAMLIST BITS\n         B     INDEX               GO BUILD INDEX CAMLIST\n         SPACE 2\nDLTX     DS    0H                  DLTX COMMAND PROCESSOR\n         MVI   CAMLIST+1,4         INSERT DLTX CAMLIST BITS\n         B     INDEX               GO BUILD CAMLIST\n         SPACE 2\nBLDX     DS    0H                  BLDX COMMAND PROCESSOR\n         MVI   CAMLIST+1,64        INSERT BLDX CAMLIST BITS\n         SPACE 2\nINDEX    DS    0H                  INDEX PROCESSOR ROUTINE\n         OI    CAMLIST,4           INSERT INDEX PROCESSOR BITS\n         INDEX CAMLIST             EXEC INDEX MACRO\n         ST    R15,RETCODE         SAVE RETURN CODE\n         L     R1,CATMSGL(R15)     LOAD MSG ADDR\n         BAL   LINK,PUTLINE        LINK TO PUTLINE ROUTINE\n         NOP   0                   *\n         B     CMD                 GO GET NEXT CMD\n         EJECT\nCONNECT  DS    0H                  CONNECT COMMAND PROCESSOR\n         LA    R4,VCBENT           LOAD VCB ENTRY ADDRESS\n         USING VCBFLD,R4           SET VCB DSECT\n         ST    R4,CAMLIST+12       STORE VOL ADDR IN CAM LIST\n         MVC   VCBUNIT,UNIT        MOVE UNIT TYPE TO VCB\n         TM    FLAGS+1,FUNIT       TEST IF UNIT ENTERED\n         BO    CONNECT0            IF YES THEN SKIP SEARCH\n         BAL   LINK,UCBCK          LINK TO UCB CHECK ROUTINE\n         B     CONNECT1            RETURNS HERE IF ERROR\n         SPACE 2\nCONNECT0 DS    0H                  SETUP CAMLIST\n         MVI   CAMLIST+1,8         INSERT FUNCTION BITS\n         OI    CAMLIST,64          INSERT CONNECT CAMLIST BITS\n         B     INDEX               GO BUILD INDEX CAMLIST\n         SPACE 2\nCONNECT1 DS    0H                  CONNECT VOL SER ERROR\n         LA    R1,MSGNCON          LOAD ERROR MSG ADDRESS\n         MVC   MSGTEXT2,MSGNMT     MOVE MSG TO MSG AREA\n         MVC   MSGTEXT2+12(6),VCBVOL MOVE IN VOL SER\n         LA    R0,MSGTEXT2         LOAD MSG ADDRESS\n         BAL   LINK,ERRORMSG       LINK TO ERROR MSG ROUTINE\n         NOP   0                   IGNORE ATTENTIONS\n         B     CMD                 GO GET NEXT COMMAND\n         SPACE 2\nBLDG     DS    0H                  BLDG COMMAND PROCESSOR\n         L     R7,ANSADDR          LOAD PDL ADDRESS\n         USING PDLBLDG,R7          SET PDL DSECT\n         NC    PCLBLDG3(2),PCLBLDG3 TEST IF EMPTY KEYWORD ENTERED\n         BZ    BLDG0               IF NOT SKIP NEXT INSTRUCTION\n         OI    CAMLIST+2,8         INDICATE EMPTY REQUIRED\n         SPACE 2\nBLDG0    DS    0H                  *\n         NC    PCLBLDG4(2),PCLBLDG4 TEST IF DELETE KEYWORD ENTERED\n         BZ    BLDG1               IF NOT SKIP NEXT INSTRUCTION\n         OI    CAMLIST+2,64        INDICATE DELETE REQUIRED\n         SPACE 2\nBLDG1    DS    0H                  SET UP CAM LIST\n         MVI   CAMLIST+1,32        INDICATE BLDG CAMLIST\n         MVC   CAMLIST+3(1),SEQNO+1 MOVE IN NUMBER OF ENTRIES\n         B     INDEX               GO ISSUE INDEX MACRO\n         DROP  R7\n         EJECT\nUNCATLG  DS    0H                  UNCATLG COMMAND PROCESSOR\n         OI    CAMLIST,68          INSERT CAMLIST LOCATE BITS\n         LA    R0,VCB              LOAD VCB ADDRESS\n         ST    R0,CAMLIST+12       STORE VCB ADDRESS IN CAMLIST\n         LOCATE CAMLIST            ISSUE LOCATE MACRO\n         ST    R15,RETCODE         SAVE RETURN CODE\n         LTR   R15,R15             IS DATA SET CATALOGED\n         BNZ   UNCATLG0            NO, THEN ERROR\n         NI    CAMLIST,128         RESET CAMLIST BITS\n         OI    CAMLIST,12          INSERT UNCATLG CAMLIST BITS\n         MVI   CAMLIST+1,4         INSERT FUNCTION BYTE\n         CATALOG CAMLIST           ISSUE CATALOG MACRO\n         ST    R15,RETCODE         SAVE RETURN CODE\n         L     R1,CATMSGL(R15)     LOAD CATALOG MSG ADDR\n         BAL   LINK,PUTLINE        LINK TO PUTLINE ROUTINE\n         NOP   0                   IGNORE ATTENTIONS\n         B     CMD                 GO GET NEXT COMMAND\n         SPACE 2\nUNCATLG0 DS    0H                  DATA SET IS NOT CATALOGED\n         LH    R2,LDSNX            LOAD DSNAME LENGTH\n         LA    R2,4(R2)            ADJ LENGTH FOR LINE PREFIX\n         MVC   MSGTEXT1+4,DSNAMEX  MOVE DSNAME TO MSG AREA\n         LA    R3,MSGTEXT1(R2)     POINT PAST DSNAME\n         MVC   0(L'MSGNCAT,R3),MSGNCAT MOVE NOT CATLG MSG\n         LA    R2,L'MSGNCAT(R2)    ADJ MSG LINE LENGTH\n         SLL   R2,16               SHIFT TO HIGH BYTES\n         ST    R2,MSGTEXT1         STORE IN MSG AREA\n         LA    R1,MSGTEXT1         LOAD MSG ADDRESS\n         BAL   LINK,PUTLINE        LINK TO PUTLINE ROUTINE\n         NOP   0                   IGNORE ATTENTIONS\n         B     CMD                 GO GET NEXT COMMAND\n         EJECT\nSCRATCH  DS    0H                  SCRATCH COMMAND PROCESSOR\n         LH    R3,VCBNVOLS         LOAD NUMBER OF VOLUMES IN VCB\n         LA    R4,VCBENT           LOAD ADDR OF FIRST VCB ENTRY\n         USING VCBFLD,R4           SET VCB FIELD DSECT\n         SPACE 2\nSCRATCH0 DS    0H                  *\n         BAL   LINK,UCBCK          LINK TO UCB CHECK ROUTINE\n         B     SCRATCH4            IF ERROR THEN RETURN HERE\n         LA    R4,12(R4)           ADVANCE TO NEXT VCB ENTRY\n         BCT   R3,SCRATCH0         IF MORE ENTRIES REPEAT\n         MVI   CAMLIST,65          INSERT SCRATCH CAMLIST BITS\n         MVI   CAMLIST+2,64        INSERT FUNCTION BITS\n         LA    R0,VCB              LOAD VCB LIST ADDR\n         ST    R0,CAMLIST+12       STORE IN VCB\n         SR    R0,R0               INDICATE NO UCB FOR MOUNT\n         SCRATCH CAMLIST           ISSUE SCRATCH MACRO\n         ST    R15,RETCODE         SAVE RETURN CODE\n         L     R1,SCRMSGR(R15)     LOAD MSG ADDRESS\n         SR    R0,R0               ASSUME NO SECOND LEVEL MESSAGE\n         LTR   R15,R15             TEST SCRATCH RETURN CODE\n         BZ    SCRATCH3            IF ZERO THEN NO SECOND LEVEL MSG\n         LA    R4,VCBENT           LOAD LIST ADDRESS\n         LH    R3,VCBNVOLS         LOAD LIST COUNT\n         USING VCBFLD,R4           SET VCB DSECT\n         SPACE 2\nSCRATCH2 DS    0H                  *\n         LH    R15,VCBSEQ          LOAD SCRATCH COND. CODE\n         SLL   R15,2               SHIFT TO MULT. BY 4\n         L     R0,SCRMSGL(R15)     LOAD MESSAGE ADDRESS\n         LTR   R15,R15             TEST CONDITION CODE\n         BNZ   SCRATCH3            IF NOT ZERO THEN R0 HAS SECOND MSG\n         LA    R4,12(R4)           ADVANCE TO NEXT LIST ENTRY\n         BCT   R3,SCRATCH2         IF MORE ENTRIES THEN REPEAT LOOP\n         SPACE 2\nSCRATCH3 DS    0H                  *\n         BAL   LINK,ERRORMSG       LINK TO ERROR MESSAGE ROUTINE\n         NOP   0                   IGNORE ATTENTIONS\n         B     CMD                 GO GET NEXT COMMAND\n         SPACE 2\nSCRATCH4 DS    0H                  VOLUME NOT MOUNTED\n         LA    R1,MSGNSCR          LOAD NOT SCRATCHED MSG ADDR\n         MVC   MSGTEXT2,MSGNMT     MOVE NOT MOUNTED MSG\n         MVC   MSGTEXT2+12(6),VCBVOL MOVE VOLUME INTO MSG\n         LA    R0,MSGTEXT2         LOAD SECOND LEVEL MSG ADDR\n         BAL   LINK,ERRORMSG       LINK TO ERROR MSG ROUTINE\n         NOP   0                   IGNORE ATTENTIONS\n         B     CMD                 GO GET NEXT COMMAND\n         EJECT\nRENAME   DS    0H                  RENAME COMMAND PROCESSOR\n         LH    R3,VCBNVOLS         LOAD NUMBER OF VOLUMES IN VCB\n         LA    R4,VCBENT           LOAD ADDR OF FIRST VCB ENTRY\n         USING VCBFLD,R4           SET VCB FIELD DSECT\n         SPACE 2\nRENAME0  DS    0H                  *\n         BAL   LINK,UCBCK          LINK TO UCB CHECK ROUTINE\n         B     RENAME3             IF ERROR THEN RETURN HERE\n         LA    R4,12(R4)           ADVANCE TO NEXT VCB ENTRY\n         BCT   R3,RENAME0          IF MORE ENTRIES THEN REPEAT\n         MVI   CAMLIST,193         INSERT RENAME CAMLIST BITS\n         MVI   CAMLIST+2,32        INSERT FUNCTION BITS\n         LA    R0,VCB              LOAD VCB LIST ADDRESS\n         ST    R0,CAMLIST+12       STORE VCB ADDR IN CAMLIST\n         SR    R0,R0               INDICATE NO UCB FOR MOUNT\n         RENAME CAMLIST            ISSUE RENAME MACRO\n         ST    R15,RETCODE         SAVE RETURN CODE\n         L     R1,RENMSGR(R15)     LOAD MSG ADDRESS\n         SR    R0,R0               ASSUME NO SECOND LEVEL MSG\n         LTR   R15,R15             TEST RENAME RETURN CODE\n         BZ    RENAME2             IF ZERO THEN ALL OK\n         LA    R4,VCBENT           LOAD VOLUME LIST ADDRESS\n         LH    R3,VCBNVOLS         LOAD VOLUME LIST COUNT\n         USING VCBFLD,R4           SET VCB FIELD DSECT\n         SPACE 2\nRENAME1  DS    0H                  *\n         LH    R15,VCBSEQ          LOAD RENAME CONDITION CODE\n         SLL   R15,2               SHIFT TO MULTIPLY BY 4\n         L     R0,RENMSGL(R15)     LOAD MESSAGE ADDRESS\n         LTR   R15,R15             TEST RENAME CONDITION CODE\n         BNZ   RENAME2             IF NOT ZERO THEN R0 HAS 2ND MSG\n         LA    R4,12(R4)           ADVANCE TO NEXT LIST ENTRY\n         BCT   R3,RENAME1          IF MORE ENTRIES THEN REPEAT LOOP\n         SPACE 2\nRENAME2  DS    0H                  *\n         BAL   LINK,ERRORMSG       LINK TO ERROR MESSAGE ROUTINE\n         NOP   0                   IGNORE ATTENTIONS\n         B     CMD                 GO GET NEXT COMMAND\n         SPACE 2\nRENAME3  DS    0H                  VOLUME NOT MOUNTED\n         LA    R1,MSGNREN          LOAD NOT RENAMED MSG ADDR\n         MVC   MSGTEXT2,MSGNMT     MOVE NOT MOUNTED MESSAGE\n         MVC   MSGTEXT2+12(6),VCBVOL MOVE VOLUME INTO MSG\n         LA    R0,MSGTEXT2         LOAD SECOND LEVEL MSG ADDRESS\n         BAL   LINK,ERRORMSG       LINK TO ERROR MSG ROUTINE\n         NOP   0                   IGNORE ATTENTIONS\n         B     CMD                 GO GET NEXT COMMAND\n         EJECT\nHELP     DS    0H                  HELP COMMAND PROCESSOR\n         LA    R1,PARMLIST         LOAD PARM LIST ADDRESS\n         USING CPPL,R1             SET CPPL DSECT\n         MVC   CPPLCBUF,ACBUF      MOVE IN CMD BUFFER ADDRESS\n         MVC   CPPLUPT,AUPT        MOVE IN UPT ADDRESS\n         MVC   CPPLPSCB,APSCB      MOVE IN PSCB ADDRESS\n         MVC   CPPLECT,AECT        MOVE IN ECT ADDRESS\n         XC    HLPECB,HLPECB       CLEAR HELP ECB\n         MVC   HLPCPL(LHLPCPL),MHLPCPL MOVE CPL FOR ATTACH\n         ATTACH ECB=HLPECB,SHSPV=78,MF=(E,(1)),SF=(E,HLPCPL)\n         ST    R1,HLPTCB           SAVE HELP TCB ADDRESS\n         WAIT  ECB=HLPECB          WAIT FOR HELP TO COMPLETE\n         XC    ATTNECB,ATTNECB     CLEAR COM ECB\n         LA    R2,DAIRPB           LOAD DAIR PB ADDRESS\n         USING DAPB2C,R2           SET DAIR PB DSECT\n         MVC   DA2CCD(LDAP2C),MDAP2C MOVE IN DAIR PB CONSTANTS\n         LA    R0,HLPTCB           LOAD HELP TCB ADDRESS\n         ST    R0,DA2CTCB          STORE IN DAIR PB\n         LA    R1,PARMLIST         LOAD PARM LIST ADDRESS\n         USING DAPL,R1             SET DAPL DSECT\n         ST    R2,DAPLDAPB         STORE DAIR PB ADDR IN DAPL\n         MVC   DAPLUPT,AUPT        MOVE IN UPT ADDRESS\n         MVC   DAPLECT,AECT        MOVE IN ECT ADDRESS\n         MVC   DAPLPSCB,APSCB      MOVE IN PSCB ADDRESS\n         LA    R0,ATTNECB          LOAD ECB ADDRESS\n         ST    R0,DAPLECB          STORE ECB ADDRESS IN DAPL\n         CALLTSSR EP=IKJDAIR       LINK TO DAIR ROUTINE\n         DETACH HLPTCB             DETACH HELP\n         B     CMD                 GO GET NEXT COMMAND\n         EJECT\nUCBCK    DS    0H                  UCB VOL SER CHECK ROUTINE\n         USING VCBFLD,R4           SET VCB FIELD DSECT\n         L     R5,CVTPTR           LOAD CVT ADDRESS         *HMD 08/80*\n         L     R5,CVTILK2-CVT(R5)  LOAD UCB LOOKUP LIST ADDRESS\n*                                                           *HMD 08/80*\n         USING UCB,R6              SET UCB DSECT\n         SPACE 2\nUCBCK0   DS    0H                  *\n         LH    R6,0(R5)            LOAD UCB ADDRESS\n         N     R6,=X'0000FFFF'     TEST FOR VALID ADDRESS\n         BZ    UCBCK1              ZERO IF NO ENTRY\n         C     R6,=X'0000FFFF'     TEST FOR LAST ENTRY\n         BE    0(0,LINK)           IF END OF LIST RETURN OFFSET 0\n         TM    UCBDEVC,X'20'       TEST FOR DIRECT ACCESS DEVICE\n         BNO   UCBCK1              SKIP UCB IF NOT DA\n         CLC   VCBVOL,UCBVOL       COMPARE VOL SERS\n         BNE   UCBCK1              IF NOT EQUAL THEN SKIP\n         MVC   VCBUNIT,UCBTYPE     MOVE UCB TYPE TO VCB ENTRY\n         B     4(0,LINK)           RETURN AT OFFSET 4\n         SPACE 2\nUCBCK1   DS    0H                  ADVANCE TO NEXT LIST ENTRY\n         LA    R5,2(R5)            INCREMENT LIST ADDRESS\n         B     UCBCK0              GO REPEAT LOOP\n         EJECT\nVERDSNX  ENTER                     DSNAME/INDEX VERIFICATION ROUTINE\n         TM    FLAGS+1,FDSNX       TEST IF DSNAME FLAG SET\n         BO    VERDSNX0            IF SET THEN ALREADY HAVE 1 DSNAME\n         CLEAR DSNAMEX             CLEAR DSN/INDEX FIELD\n         L     R15,0(R8)           LOAD FIELD ADDRESS\n         LH    R14,4(R8)           LOAD FIELD LENGTH\n         STH   R14,LDSNX           SAVE DSN LENGTH\n         BCTR  R14,0               COMPUTE EXEC LENGTH\n         MVC   DSNAMEX(0),0(R15)   MOVE DSNAME/INDEX\n         EX    R14,*-6             MOVE TRUE LENGTH\n         LA    R3,DSNAMEX          LOAD DSNAME FIELD ADDRESS\n         ST    R3,CAMLIST+4        STORE ADDRESS IN CAM LIST\n         OI    FLAGS+1,FDSNX       SET DSNAME FLAG\n         B     VERDSNX1            GO CHECK DSNAME\n         SPACE 2\nVERDSNX0 DS    0H                  MOVE DSNAME 2\n         CLEAR DSNAME2             CLEAR DSNAME 2\n         L     R15,0(R8)           LOAD FIELD ADDRESS\n         LH    R14,4(R8)           LOAD FIELD LENGTH\n         BCTR  R14,0               COMPUTE EXEC LENGTH\n         MVC   DSNAME2(0),0(R15)   MOVE DSNAME 2\n         EX    R14,*-6             EXEC FOR PROPER LENGTH\n         LA    R3,DSNAME2          LOAD DSNAME 2 ADDRESS\n         ST    R3,CAMLIST+8        STORE ADDRESS IN CAM LIST\n         SPACE 2\nVERDSNX1 DS    0H                 *\n         SR    R15,R15             SET RC TO ZERO\n         XC    XVCB(256),XVCB      CLEAR TRT TABLE\n         MVI   XVCB+BLANK,4        SET SPACE STOP\n         MVI   XVCB+LPAREN,8       SET LEFT PAREN STOP\n         MVI   XVCB+PERIOD,12      SET PERIOD STOP\n         SR    R2,R2               CLEAR REGISTER 2\n         SPACE 2\nVERDSNX2 DS    0H                  *\n         TRT   0(9,R3),XVCB        SCAN FOR A DELIMITER\n         BZ    VERDSNX5            IF NO DELIMITER THEN ERROR\n         LR    R4,R2               SAVE STOP VALUE\n         LR    R5,R1               LOAD STOP ADDRESS\n         SR    R5,R3               COMPUTE FIELD LENGTH\n         BCTR  R5,0                COMPUTE EXEC LENGTH\n         TRT   0(0,R3),ANTBL       SCAN FOR VALID CHARACTERS\n         EX    R5,*-6              EXEC FOR PROPER LENGTH\n         BNZ   VERDSNX5            IF STOP THEN ERROR\n         LA    R3,1(R1)            POINT PAST DELIMITER\n         B     *(R4)               BRANCH TO APPROPRIATE ROUTINE\n         B     VERDSNX6            IF SPACE THEN DONE\n         B     VERDSNX3            IF PAREN THEN GENERATION\n         CLI   0(R3),C'Z'          TEST IF GREATER THAN Z\n         BH    VERDSNX5            IF HIGH THEN ERROR\n         CLI   0(R3),C'-'          MINUS ILLEGAL AS FIRST CHARACTER\n         BE    VERDSNX5            IF EQUAL THEN ERROR\n         B     VERDSNX2            GO TEST NEXT 8\n         SPACE 2\nVERDSNX3 DS    0H                  *\n         TM    APCL,X'20'          TEST IF GENERATION OK\n         BO    VERDSNX5            IF ONE THEN ERROR\n         XC    XVCB(256),XVCB      CLEAR TRT TABLE\n         MVI   XVCB+RPAREN,1       INSERT STOP AT PAREN\n         TRT   0(5,R3),XVCB        SCAN FOR RIGHT PAREN\n         BZ    VERDSNX5            IF NOT FOUND THEN ERROR\n         CLI   1(R1),BLANK         NEXT CHARACTER MUST BE BLANK\n         BNE   VERDSNX5            IF NOT BLANK, THEN ERROR\n         CLI   0(R3),C'-'          NEXT CHARACTER MINUS SIGN?\n         BNE   VERDSNX4            NO, THEN MUST BE NUMERIC\n         LA    R3,1(R3)            POINT PAST MINUS SIGN\n         SPACE 2\nVERDSNX4 DS    0H                  *\n         LR    R5,R1               LOAD RIGHT PAREN ADDRESS\n         SR    R5,R3               COMPUTE FIELD LENGTH\n         BNP   VERDSNX5            FIELD LENGTH MUST BE GT ZERO\n         BCTR  R5,0                COMPUTE EXECUTE LENGTH\n         TRT   0(0,R3),NTBL        TEST FIELD FOR VALID NUMERICS\n         EX    R5,*-6              EXECUTE FOR PROPER LENGTH\n         BNZ   VERDSNX5            IF NOT NUMERIC, THEN ERROR\n         OI    FLAGS+1,FGEN        SET GENERATION FLAG\n         B     VERDSNX6            GO EXIT NORMALLY\n         SPACE 2\nVERDSNX5 DS    0H                  ERROR IN DSNAME SYNTAX\n         LA    R15,4               SET RETURN CODE TO 4\n         NC    CAMLIST+8(4),CAMLIST+8 FIRST OR SECOND TIME THRU\n         BNZ   VERDSNX6            NO, SECOND TIME EXIT\n         NI    FLAGS+1,FF-FDSNX    RESET DSNAME FLAGS\n         SPACE 2\nVERDSNX6 EXIT                      EXIT ROUTINE\n         EJECT\nVERINDX  ENTER                     INDEX VERIFICATION ROUTINE\n         LH    R3,4(R8)            LOAD INDEX LENGTH\n         L     R1,0(R8)            LOAD INDEX ADDRESS\n         BCTR  R3,0                COMPUTE EXECUTE LENGTH\n         TM    FLAGS+1,FINDEX      IF INDEX ALREADY PRESENT\n         BO    VERALIAS            YES, TREAT AS ALIAS\n         CLEAR HINDEX              CLEAR INDEX  FIELD\n         MVC   HINDEX(0),0(R1)     MOVE INDEX\n         EX    R3,*-6              MOVE FOR PROPER LENGTH\n         LA    R0,HINDEX           LOAD INDEX ADDRESS\n         ST    R0,CAMLIST+4        STORE IN CAMLIST\n         OI    FLAGS+1,FINDEX      INDICATE INDEX PRESENT\n         B     VERINDX0            GO EXIT\n         SPACE 2\nVERALIAS DS    0H                  PROCESS AS ALIAS\n         CLEAR AINDEX              CLEAR ALIAS INDEX FIELD\n         MVC   AINDEX(0),0(R1)     MOVE ALIAS\n         EX    R3,*-6              EXEC FOR PROPER LENGTH\n         LA    R0,AINDEX           LOAD ALIAS ADDRESS\n         ST    R0,CAMLIST+12       STORE IN CAMLIST\n         SPACE 2\nVERINDX0 DS    0H                  EXIT\n         SR    R15,R15             SET RETURN CODE TO ZERO\n         EXIT                      RETURN\n         EJECT\nVERCVOL  ENTER                     CONTROL VOLUME VERIFICATION ROUTINE\n         OI    FLAGS+1,FCVOL       SET FLAG TO INDICATE CVOL PRESENT\n         OI    CAMLIST,128         INDICATE CVOL PRESENT IN CAMLIST\n         CLEAR CVOL                CLEAR CONTROL VOLUME FIELD\n         LH    R15,4(R8)           LOAD CVOL LENGTH\n         L     R1,0(R8)            LOAD CVOL ADDRESS\n         BCTR  R15,0               COMPUTE EXEC LENGTH\n         MVC   CVOL(0),0(R1)       MOVE TO WORK AREA\n         EX    R15,*-6             EXEC FOR PROPER LENGTH\n         LA    R0,CVOL             LOAD CVOL ADDRESS\n         ST    R0,CAMLIST+8        STORE CVOL ADDR IN CAMLIST\n         SR    R15,R15             SET RC TO ZERO\n         EXIT                      RETURN TO PARSE\n         EJECT\nVERVOL   ENTER                     VOLUME VERIFICATION ROUTINE\n         LH    R3,VCBNVOLS         LOAD NUMBER OF VOLUMES\n         MH    R3,=H'12'           TIMES FIELD LENGTH\n         LA    R4,VCBENT(R3)       POINT TO NEXT AVAIL FLD\n         USING VCBFLD,R4           SET VCB FIELD DSECT\n         CLEAR VCBVOL              CLEAR VOLUME FIELD\n         LH    R5,4(R8)            LOAD VOL SER LENGTH\n         L     R1,0(R8)            LOAD VOL SER ADDRESS\n         BCTR  R5,0                COMPUTE EXEC LENGTH\n         MVC   VCBVOL(0),0(R1)     MOVE TOVCB\n         EX    R5,*-6              EXEC FOR PROPER LENGTH\n         LH    R3,VCBNVOLS         LOAD NUMBER OF VOLUME FIELDS\n         LA    R3,1(R3)            INCREMENT VOL COUNT\n         STH   R3,VCBNVOLS         STORE IN VCB\n         SR    R15,R15             SET RETURN CODE TO ZERO\n         EXIT                      RETURN\n         EJECT\nVERSEQ   ENTER                     SEQUENCE NUMBER VERIFICATION ROUTINE\n         LH    R3,4(R8)            LOAD SEQUENCE NUMBER LENGTH\n         L     R1,0(R8)            LOAD SEQUENCE NUMBER LENGTH\n         BCTR  R3,0                COMPUTE EXECUTE LENGTH\n         PACK  DOUBLE,0(0,R1)      PACK SEQ NO INTO DOUBLE WORD\n         EX    R3,*-6              EXEC FOR PROPER LENGHT\n         CVB   R2,DOUBLE           CONVERT SEQ NO TO BINARY\n         STH   R2,SEQNO            SAVE IT FOR LATER\n         OI    FLAGS+1,FSEQ        INDICATE SEQ NO PRESENT\n         SR    R15,R15             SET RETURN CODE TO ZERO\n         EXIT                      RETURN\n         EJECT\nVERUNIT  ENTER                     UNIT VERIFICATION ROUTINE\n         CLEAR DOUBLE              CLEAR DOUBLE WORD\n         LH    R3,4(R8)            LOAD UNIT NAME LENGTH\n         L     R1,0(R8)            LOAD UNIT NAME ADDRESS\n         BCTR  R3,0                COMPUTE EXEC LENGTH\n         MVC   DOUBLE(0),0(R1)     MOVE UNIT NAME\n         EX    R3,*-6              EXEC FOR PROPER LENGTH\n         L     R3,ADEVNT           LOAD DEVICE NAME TABLE ADDR\n         L     R2,0(R3)            LOAD NUMBER OF TABLE ENTRIES\n         LA    R3,4(R3)            POINT TO FIRST ENTRY\n         USING DEVDSECT,R3         SET DEVICE NAME TBL DSECT\n         SPACE 2\nVERUNIT0 DS    0H                  SEARCH LOOP\n         CLC   DEVNAME,DOUBLE      COMPARE TO A TBL ENTRY\n         BE    VERUNIT1            IF EQUAL THEN THIS UNIT\n         LA    R3,12(R3)           ADVANCE TO NEXT ENTRY\n         BCT   R2,VERUNIT0         IF MORE ENTRIES THEN REPEAT\n         LA    R15,4               SET RETURN CODE TO 4\n         B     VERUNIT2            GO EXIT - INVALID UNIT\n         SPACE 2\nVERUNIT1 DS    0H                  UNIT NAME FOUND\n         MVC   UNIT,DEVTYPE        MOVE UNIT TYPE\n         OI    FLAGS+1,FUNIT       SET UNIT FLAGS\n         SR    R15,R15             SET RETURN CODE TO ZERO\n         SPACE 2\nVERUNIT2 EXIT                      EXIT ROUTINE\n         EJECT\nPARSE    DS    0H                  PARSE INTERFACE SUBROUTINE\n         IKJRLSA ANSADDR           RELEASE PDL STORAGE\n         XC    ANSADDR,ANSADDR     CLEAR PDL ADDRESS AREA\n         LA    R1,PARSELST         AREA FOR PARSE PARMS\n         USING PPL,R1              SET PPL DSECT\n         MVC   PPLUPT,AUPT         MOVE UPT ADDR TO PPL\n         MVC   PPLECT,AECT         MOVE ECT ADDR TO PPL\n         MVC   PPLCBUF,ACBUF       MOVE CMD BUFFER ADDR TO PPL\n         ST    WORKR,PPLUWA        MOVE WORK AREA ADDR FOR EXITS\n         LA    R0,ATTNECB          LOAD ATTENTION ECB ADDR\n         ST    R0,PPLECB           STORE IN PPL\n         MVI   ATTNECB,0           CLEAR ECB\n         LA    R0,ANSADDR         LOAD PDL ANSWER AREA ADDR\n         ST    R0,PPLANS           STORE ADDR IN PPL\n         MVC   PPLPCL,APCL         MOVE PCL ADDR TO PPL\n         CALLTSSR EP=IKJPARS       INVOKE PARSE\n         CH    R15,=H'20'          VALIDITY CHECK ERROR?\n         BE    0(LINK)             IF YES THEN RETURN\n         CH    R15,=H'8'           ATTENTION ENTERED\n         BE    0(LINK)             IF ATTN THEN RETURN\n         LTR   R15,R15             CHECK FOR OTHER ERROR\n         BZ    4(LINK)             IF NO ERROR THEN OK\n         MVC   MSGTEXT2,MSGPARSE   MOVE PARSE ERROR MSG\n         CVD   R15,DOUBLE          CONVERT RC TO DECIMAL\n         OI    DOUBLE+7,X'0F'      CHANGE SIGN\n         UNPK  MSGTEXT2+22(2),DOUBLE UNPACK RETURN CODE\n         LA    R0,MSGTEXT2         PUT OUT 'COMMAND ERROR' MSG\n         LA    R1,MSGCMDER         *\n         BAL   LINK,ERRORMSG       *\n         NOP   0                   IGNORE ATTENTIONS\n         EJECT\nFLUSH    DS    0H                  *\n         LA    R1,IOPLPARM         AREA FOR STACK PARM LIST\n         USING IOPL,R1             SET IOPL DSECT\n         MVI   ATTNECB,0           CLEAR ATTENTION ECB\n         XC    IOPLEND(16),IOPLEND CLEAR PARAMETER AREA\n         STACK PARM=IOPLEND,DELETE=ALL,MF=(E,(1))\n         TCLEARQ INPUT\n         EJECT\nRETURN   DS    0H                  RETURN  TO TMP\n         TM    FLAGS,FCBUF+FEXIT   TEST EXIT TYPE\n         BNZ   RETURN1             IF SINGLE CMD THEN SKIP CODE\n         ICM   R1,15,ACBUF         LOAD COMMAND BUFFER ADDRESS\n         BZ    RETURN1             IF NOT THEN SKIP CODE\n         LH    R0,0(R1)            LOAD COMMAND BUFFER LENGTH\n         ICM   R0,8,=AL1(1)        CMD BUFFER IS IN SUBPOOL 1\n         FREEMAIN R,LV=(0),A=(1)   FREE COMMAND BUFFER STORAGE\n         SPACE 2\nRETURN1  DS    0H                  *\n         IKJRLSA ANSADDR           FREE PARSE STORAGE\n         DELETE EPLOC=IKJPUTL      DELETE PUTLINE ROUTINE\n         DELETE EPLOC=IKJSCAN      DELETE COMMAND SCAN ROUTINE\n         DELETE EPLOC=DEVNAMET     DELETE DEVICE NAME TABLE\n         L     R0,WASIZE           LOAD WORK AREA SIZE\n         LR    R1,WORKR            LOAD WORK AREA ADDRESS\n         L     R2,RETCODE          LOAD RETURN CODE\n         L     OSAVE,SAVE+4        LOAD OLD SAVE AREA ADDR\n         FREEMAIN R,LV=(0),A=(1)   FREE WORK AREA STORAGE\n         LR    R15,R2              LOAD RETURN CODE\n         RETURN (14,12),RC=(15)    RETURN TO TMP\n         EJECT\nERRORMSG DS    0H                  DISPLAY AN ERROR MSG\n         LTR   R0,R0               SECOND LEVEL MSG?\n         BZ    ERRORM1             NO\n         MVC   MSGTEXT1,0(R1)      INSURE MSG IN WORK AREA\n         LA    R1,MSGTEXT1         LOAD MSG ADDRESS\n         LH    R14,0(R1)           LENGTH OF FIRST LEVEL MSG\n         LA    R15,0(R14,R1)       END OF MSG ADDRESS\n         LA    R14,1(R14)          JUMP MSG LENGTH\n         STH   R14,0(R1)           *\n         MVI   0(R15),C'+'         INDICATE SECOND LEVEL MSG EXISTS\n         SR    R14,R14             CLEAR CHAIN FIELD\n         LA    R15,1               ONE SEGMENT IN SECOND MSG\n         STM   R14,R0,PUTOLD2      CREATE SECOND LEVEL\n         LA    R0,PUTOLD2          LOAD OUTPUT LINE DESC ADDR\n         SPACE 2\nERRORM1  DS    0H                  *\n         LR    R14,R0              NEXT 'OLD' ADDR OR ZERO\n         LA    R15,1               ONE SEGMENT\n         LR    R0,R1               LOAD MSG ADDR\n         STM   R14,R0,PUTOLD1      FIRST LEVEL OLD\n         LA    R1,IOPLPARM         LOAD PARM LIST ADDR\n         USING IOPL,R1             SET IOPL DSECT\n         MVI   ATTNECB,0           CLEAR ATTENTION ECB\n         L     R15,APUTL           LOAD PUTLINE ROUTINE ADDR\n         XC    IOPLEND(16),IOPLEND CLEAR PARM LIST\n         PUTLINE PARM=IOPLEND,ENTRY=(15),MF=(E,(1)),                   X\n               OUTPUT=(PUTOLD1,TERM,MULTLVL,INFOR)\n         CH    R15,=H'4'           ATTENTION ENTERED\n         BE    0(LINK)             YES, THEN RETURN\n         LTR   R15,R15             ERROR?\n         BZ    4(LINK)             IF NOT THEN RETURN\n         B     FLUSH               ELSE ERROR EXIT\n         EJECT\nPUTLINE  DS    0H                  PUTLINE PROCESSING\n         TM    ATTNECB,X'40'       ATTENTION OCCUR?\n         BCR   1,LINK              YES, RETURN IMMEDIATELY\n         LR    R14,R1              SAVE DATA LINE POINTER\n         LA    R1,IOPLPARM         LOAD I/0 PARM LIST ADDR\n         USING IOPL,R1             SET IOPL DSECT\n         L     R15,APUTL           LOAD PUTLINE ROUTINE ADDR\n         XC    IOPLEND(16),IOPLEND CLEAR PUTLINE PARM BLOCK\n         LR    R0,R14              LOAD DATA LINE ADDR\n         PUTLINE PARM=IOPLEND,ENTRY=(15),MF=(E,(1)),                   X\n               OUTPUT=((0),TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK)\n         CH    R15,=H'4'           ATTENTION OCCUR?\n         BE    0(LINK)             YES\n         LTR   R15,R15             CHECK COMPLETION CODE\n         BNZ   FLUSH               PUTLINE ERROR\n         B     4(LINK)             RETURN TO OFFSET\n         EJECT\nPUTGET   DS    0H                  PUTGET PROCESSING\n         TM    ATTNECB,X'40'       ATTENTION OCCUR?\n         BCR   1,LINK              YES, RETURN IMMED.\n         NI    FLAGS,FF-FNULL      RESET NULL FLAGS\n         LA    R0,1                ONLY ONE SEGMENT\n         STM   R0,R1,PUTOLD1       *\n         ICM   R1,15,ACBUF         LOAD COMMAND BUFFER ADDRESS\n         BZ    PUTGET0             IF NOT THEN SKIP CODE\n         LH    R0,0(R1)            LOAD BUFFER LENGTH\n         ICM   R0,8,=AL1(1)        CMD BUFFER IS IN SUBPOOL 1\n         FREEMAIN R,LV=(0),A=(1)   FREE CMD BUFFER STORAGE\n         XC    ACBUF,ACBUF         CLEAR CMD BUFFER ADDRESS\n         SPACE 2\nPUTGET0  DS    0H                  PROCEED WITH PUTGET\n         LA    R1,IOPLPARM         LOAD IOPL ADDRESS\n         USING IOPL,R1             *\n         L     R15,APTGT           LOAD PUTGET ROUTINE ADDR\n         XC    IOPLEND(16),IOPLEND CLEAR PUTGET PARM BLOCK\n         PUTGET PARM=IOPLEND,MF=(E,(1)),ENTRY=(15),                    X\n               OUTPUT=(PUTOLD1,SINGLE,MODE),TERMGET=(EDIT,WAIT),       X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK)\n         CH    R15,=H'8'           *\n         BH    FLUSH               *\n         TM    ATTNECB,X'40'       ATTENTION OCCUR?\n         BO    0(LINK)             YES\n         CH    R15,=H'4'           LINE FROM CLIST?\n         BNE   *+8                 NO, THEN SKIP NEXT INSTR\n         OI    FLAGS,FCLIST        INDICATE INPUT FROM CLIST\n         LA    R1,IOPLPARM         LOAD IOPL ADDRESS\n         LA    R1,IOPLEND          *\n         USING PGPB,R1             SET PUTGET PARM BLOCK DSECT\n         L     R1,PGPBIBUF         LOAD INPUT BUFFER ADDR\n         LA    R0,4                *\n         CH    R0,0(R1)            IS THIS A NULL LINE\n         ST    R1,ACBUF            SAVE INPUT BUFFER ADDR\n         BL    4(LINK)             NO\n         OI    FLAGS,FNULL         INDICATE NULL LINE\n         B     4(LINK)             RETURN\n         EJECT\n         SPACE 1\nDATAREA  DS    0F                  DATA AREA\n         SPACE 3\nPCLDSN   IKJPARM DSECT=PDLDSN\nPCLDSN1  IKJIDENT 'DATA SET NAME',FIRST=ALPHA,OTHER=ANY,               X\n               PROMPT='DATA SET NAME',                                 X\n               HELP=('NAME OF DATA SET TO BE PROCESSED'),              X\n               VALIDCK=VERDSNX,MAXLNTH=44\nDSNCVOL  IKJKEYWD\n         IKJNAME 'CVOL',SUBFLD=$CVOL1\n$CVOL1   IKJSUBF\nPCLDSN2  IKJIDENT 'CVOL NAME',FIRST=ALPHANUM,OTHER=ALPHANUM,           X\n               PROMPT='CVOL VOLUME SERIAL NUMBER',                     X\n               HELP=('VOLUME SERIAL NUMBER OF CONTROL VOLUME'),        X\n               VALIDCK=VERCVOL,MAXLNTH=6\n         IKJENDP\n         EJECT\nPCLINDX  IKJPARM DSECT=PDLINDX\nPCLINDX1 IKJIDENT 'INDEX NAME',FIRST=ALPHA,OTHER=ANY,                  X\n               PROMPT='INDEX NAME',                                    X\n               HELP=('NAME OF INDEX TO BE PROCESSED'),                 X\n               VALIDCK=VERDSNX,MAXLNTH=44\nINXCVOL  IKJKEYWD\n         IKJNAME 'CVOL',SUBFLD=$CVOL2\n$CVOL2   IKJSUBF\nPCLINDX2 IKJIDENT 'CVOL NAME',FIRST=ALPHANUM,OTHER=ALPHANUM,           X\n               PROMPT='CVOL VOLUME SERIAL NUMBER',                     X\n               HELP=('VOLUME SERIAL NUMBER OF CONTROL VOLUME'),        X\n               VALIDCK=VERCVOL,MAXLNTH=6\n         IKJENDP\n         EJECT\nPCLSCR   IKJPARM DSECT=PDLSCR\nPCLSCR1  IKJIDENT 'DATA SET NAME',FIRST=ALPHA,OTHER=ANY,               X\n               PROMPT='DATA SET NAME',                                 X\n               HELP=('NAME OF DATA SET TO BE SCRATCHED'),              X\n               VALIDCK=VERDSNX,MAXLNTH=44\nPCLSCR2  IKJIDENT 'VOLUME SERIAL NUMBER LIST',LIST,FIRST=ALPHANUM,     X\n               OTHER=ALPHANUM,MAXLNTH=6,VALIDCK=VERVOL,                X\n               PROMPT='VOLUME SERIAL NUMBER LIST',                     X\n               HELP=('VOL SERS OF DATA SET TO BE SCRATCHED')\n         IKJENDP\n         EJECT\nPCLCATLG IKJPARM DSECT=PDLCATLG\nPCLCAT1  IKJIDENT 'DATA SET NAME',FIRST=ALPHA,OTHER=ANY,               X\n               PROMPT='DATA SET NAME',                                 X\n               HELP=('NAME OF DATA SET TO BE CATALOGED'),              X\n               VALIDCK=VERDSNX,MAXLNTH=44\nPCLCAT2  IKJIDENT 'VOLUME SERIAL NUMBER LIST',LIST,FIRST=ALPHANUM,     X\n               OTHER=ALPHANUM,MAXLNTH=6,VALIDCK=VERVOL,                X\n               PROMPT='VOLUME SERIAL NUMBER LIST',                     X\n               HELP=('VOL SERS OF DATA SET TO BE CATALOGED')\nPCLCAT3  IKJKEYWD\n         IKJNAME 'CVOL',SUBFLD=$CVOL3\nPCLCAT4  IKJKEYWD\n         IKJNAME 'SEQ',SUBFLD=$SEQ1\nPCLCAT5  IKJKEYWD\n         IKJNAME 'UNIT',SUBFLD=$UNIT1\n$CVOL3   IKJSUBF\nPCLCAT6  IKJIDENT 'CVOL NAME',FIRST=ALPHANUM,OTHER=ALPHANUM,           X\n               PROMPT='CVOL VOLUME SERIAL NUMBER',                     X\n               HELP=('VOLUME SERIAL NUMBER OF CONTROL VOLUME'),        X\n               VALIDCK=VERCVOL,MAXLNTH=6\n$SEQ1    IKJSUBF\nPCLCAT7  IKJIDENT 'SEQUENCE NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,       X\n               PROMPT='SEQUENCE NUMBER',MAXLNTH=3,VALIDCK=VERSEQ,      X\n               HELP=('DATA SET SEQUENCE NUMBER')\n$UNIT1   IKJSUBF\nPCLCAT8  IKJIDENT 'UNIT NAME',FIRST=ANY,OTHER=ANY,                     X\n               PROMPT='UNIT NAME',MAXLNTH=8,VALIDCK=VERUNIT,           X\n               HELP=('UNIT NAME OF DATA SET TO BE CATALOGED')\n         IKJENDP\n         SPACE 3\nPCLCON   IKJPARM DSECT=PDLCON\nPCLCON1  IKJIDENT 'INDEX NAME',FIRST=ALPHA,OTHER=ALPHANUM,             X\n               VALIDCK=VERINDX,MAXLNTH=8,PROMPT='INDEX NAME',          X\n               HELP=('NAME OF INDEX TO BE CONNECTED')\nPCLCON2  IKJIDENT 'VOLUME SERIAL NUMBER',FIRST=ALPHANUM,               X\n               OTHER=ALPHANUM,VALIDCK=VERVOL,MAXLNTH=6,                X\n               PROMPT='VOLUME SERIAL NUMBER',                          X\n               HELP=('VOLUME SERIAL NUMBER OF VOLUME TO BE CONNECTED')\nCONVOL   IKJKEYWD\n         IKJNAME 'CVOL',SUBFLD=$CVOL4\nPCLCON3  IKJKEYWD\n         IKJNAME 'UNIT',SUBFLD=$UNIT2\n$CVOL4   IKJSUBF\nPCLCON4  IKJIDENT 'CVOL NAME',FIRST=ALPHANUM,OTHER=ALPHANUM,           X\n               VALIDCK=VERCVOL,MAXLNTH=6,                              X\n               PROMPT='CVOL VOLUME SERIAL NUMBER ',                    X\n               HELP=('VOLUME SERIAL NUMBER OF CONTROL VOLUME')\n$UNIT2   IKJSUBF\nPCLCON5  IKJIDENT 'UNIT NAME',FIRST=ANY,OTHER=ANY,                     X\n               PROMPT='UNIT NAME',MAXLNTH=8,VALIDCK=VERUNIT,           X\n               HELP=('UNIT NAME OF VOLUME TO BE CONNECTED')\n         IKJENDP\n         EJECT\nPCLRDA   IKJPARM DSECT=PDSRDA\nPCLRDA1  IKJIDENT 'INDEX NAME',FIRST=ALPHA,OTHER=ALPHANUM,             X\n               VALIDCK=VERINDX,MAXLNTH=8,PROMPT='INDEX NAME',          X\n               HELP=('NAME OF INDEX TO BE PROCESSED')\nRDACVOL  IKJKEYWD\n         IKJNAME 'CVOL',SUBFLD=$CVOL5\n$CVOL5   IKJSUBF\nPCLRDA2  IKJIDENT 'CVOL NAME',FIRST=ALPHANUM,OTHER=ALPHANUM,           X\n               VALIDCK=VERCVOL,MAXLNTH=6,                              X\n               PROMPT='CVOL VOLUME SERIAL NUMBER',                     X\n               HELP=('VOLUME SERIAL NUMBER OF CONTROL VOLUME')\n         IKJENDP\n         EJECT\nPCLBLDA  IKJPARM DSECT=PDLBLDA\nPCLBLDA1 IKJIDENT 'INDEX NAME',FIRST=ALPHA,OTHER=ALPHANUM,             X\n               VALIDCK=VERINDX,MAXLNTH=8,PROMPT='INDEX NAME',          X\n               HELP=('NAME OF INDEX TO BE ASSIGNED ALIAS')\nPCLBLDA2 IKJIDENT 'ALIAS INDEX NAME',FIRST=ALPHA,OTHER=ALPHANUM,       X\n               VALIDCK=VERINDX,MAXLNTH=8,PROMPT='ALIAS INDEX NAME',    X\n               HELP=('NAME OF ALIAS TO BE ASSIGNED TO THE INDEX')\nBLDACVOL IKJKEYWD\n         IKJNAME 'CVOL',SUBFLD=$CVOL6\n$CVOL6   IKJSUBF\nPCLBLDA3 IKJIDENT 'CVOL NAME',FIRST=ALPHANUM,OTHER=ALPHANUM,           X\n               VALIDCK=VERCVOL,MAXLNTH=6,                              X\n               PROMPT='CVOL VOLUME SERIAL NUMBER',                     X\n               HELP=('VOLUME SERIAL NUMBER OF CONTROL VOLUME')\n         IKJENDP\n         EJECT\nPCLBLDG  IKJPARM DSECT=PDLBLDG\nPCLBLDG1 IKJIDENT 'GENERATION INDEX NAME',FIRST=ALPHA,OTHER=ANY,       X\n               PROMPT='GENERATION INDEX NAME',MAXLNTH=44,              X\n               HELP=('NAME OF THE GENERATION DATA GROUP INDEX'),       X\n               VALIDCK=VERDSNX\nPCLBLDG2 IKJIDENT 'NUMBER OF ENTRIES',FIRST=NUMERIC,OTHER=NUMERIC,     X\n               PROMPT='NUMBER OF ENTRIES',MAXLNTH=3,VALIDCK=VERSEQ,    X\n               HELP=('NUMBER OF ENTRIES TO BE CONTAINED IN THE INDEX')\nBLDGCVOL IKJKEYWD\n         IKJNAME 'CVOL',SUBFLD=$CVOL7\nPCLBLDG3 IKJKEYWD\n         IKJNAME 'EMPTY'\nPCLBLDG4 IKJKEYWD\n         IKJNAME 'DELETE'\n$CVOL7   IKJSUBF\nPCLBLDG5 IKJIDENT 'CVOL NAME',FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6, X\n               PROMPT='CVOL VOLUME SERIAL NUMBER',VALIDCK=VERCVOL,     X\n               HELP=('VOLUME SERIAL NUMBER OF CONTROL VOLUME')\n         IKJENDP\n         EJECT\nPCLREN   IKJPARM DSECT=PDLREN\nPCLREN1  IKJIDENT 'OLD DATASET NAME',FIRST=ALPHA,OTHER=ANY,            X\n               PROMPT='OLD DATA SET NAME ',MAXLNTH=44,                 X\n               HELP=('NAME OF DATA SET TO BE RENAMED'),                X\n               VALIDCK=VERDSNX\nPCLREN2  IKJIDENT 'NEW DATASET NAME',FIRST=ALPHA,OTHER=ANY,            X\n               PROMPT='NEW DATA SET NAME',MAXLNTH=44,                  X\n               HELP=('NEW NAME OF DATA SET '),VALIDCK=VERDSNX\nPCLREN3  IKJIDENT 'VOLUME SERIAL NUMBER LIST',LIST,FIRST=ALPHANUM,     X\n               OTHER=ALPHANUM,MAXLNTH=6,VALIDCK=VERVOL,                X\n               PROMPT='VOLUME SERIAL NUMBER LIST',                     X\n               HELP=('VOL SERS OF DATA SET TO BE RENAMED')\n         IKJENDP\n         EJECT\nIKJPUTL  DC    CL8'IKJPUTL'        PUTLINE SERVICE ROUTINE\nIKJPTGT  DC    CL8'IKJPTGT'        PUTGET SERVICE ROUTINE\nIKJSCAN  DC    CL8'IKJSCAN'        COMMAND SCAN SERVICE ROUTINE\nIKJHELP  DC    CL8'HELP'           HELP SERVICE ROUTINE\nDEVNAMET DC    CL8'DEVNAMET'       DEVICE NAME TABLE\n         SPACE 2\nOPTNTBL  DS    0H                  OPTION LIST TABLE\n         MSG   'THE FOLLOWING OPTIONS ARE AVAILABLE:'\n         MSG   ' BLDA     - CREATE AN ALIAS HIGH LEVEL INDEX'\n         MSG   ' BLDG     - CREATE A GENERATION INDEX'\n         MSG   ' BLDX     - CREATE AN INDEX STRUCTURE'\n         MSG   ' CATLG    - CATALOG A DATA SET'\n         MSG   ' CONNECT  - CONNECT A HIGH LEVEL VOLUME INDEX'\n         MSG   ' DLTA     - DELETE AN ALIAS INDEX'\n         MSG   ' DLTX     - DELETE AN INDEX STRUCTURE'\n         MSG   ' END      - EXIT THIS PROGRAM'\n         MSG   ' HELP     - OBTAIN HELP FOR SUBCOMMAND SYNTAX'\n         MSG   ' OPTIONS  - DISPLAY OPTIONS AVAILABLE'\n         MSG   ' RELEASE  - RELEASE A CONNECTED CONTROL VOLUME'\n         MSG   ' RENAME   - RENAME A DIRECT ACCESS DATA SET'\n         MSG   ' SCRATCH  - SCRATCH A DISK DATA SET'\n         MSG   ' UNCATLG  - UNCATLG A DATA SET'\n         MSG   ' VOL      - DISPLAY DATA SET VOLUME SERIAL NUMBERS'\n         DC    X'FFFF'\n         EJECT\nCMDLIST  DS    0F                  COMMAND LIST\n         DC    CL8'VOL     ',AL1(3),AL3(VOL),X'00',AL3(PCLDSN)\n         DC    CL8'UNCATLG ',AL1(7),AL3(UNCATLG),X'00',AL3(PCLDSN)\n         DC    CL8'CATLG   ',AL1(5),AL3(CATLG),X'00',AL3(PCLCATLG)\n         DC    CL8'SCRATCH ',AL1(7),AL3(SCRATCH),X'20',AL3(PCLSCR)\n         DC    CL8'DLTX    ',AL1(4),AL3(DLTX),X'20',AL3(PCLINDX)\n         DC    CL8'BLDX    ',AL1(4),AL3(BLDX),X'20',AL3(PCLINDX)\n         DC    CL8'DLTA    ',AL1(4),AL3(DLTA),X'00',AL3(PCLRDA)\n         DC    CL8'BLDG    ',AL1(4),AL3(BLDG),X'30',AL3(PCLBLDG)\n         DC    CL8'RELEASE ',AL1(7),AL3(RELEASE),X'00',AL3(PCLRDA)\n         DC    CL8'HELP    ',AL1(4),AL3(HELP),X'40',AL3(0)\n         DC    CL8'RENAME  ',AL1(6),AL3(RENAME),X'00',AL3(PCLREN)\n         DC    CL8'BLDA    ',AL1(4),AL3(BLDA),X'00',AL3(PCLBLDA)\n         DC    CL8'CONNECT ',AL1(7),AL3(CONNECT),X'00',AL3(PCLCON)\n         DC    CL8'OPTIONS ',AL1(7),AL3(OPTIONS),X'40',AL3(0)\n         DC    CL8'END     ',AL1(3),AL3(RETURN),X'40',AL3(0)\n         DC    X'FFFF'\n         EJECT\nSCRMSGR  DS    0F                  SCRATCH RETURN CODE MSGS\n         DC    A(MSGBDONE)         SCRATCH RC=0\n         DC    A(MSG04R)           SCRATCH RC=4\n         DC    A(MSG08R)           SCRATCH RC=8\n         DC    A(MSG12R)           SCRATCH RC=12\n         SPACE 2\nSCRMSGL  DS    0F                  SCRATCH MESSAGES\n         DC    A(MSGBDONE)         CONDITION CODE 0\n         DC    A(MSG04S)           CONDITION CODE 4\n         DC    A(MSG08S)           CONDITION CODE 8\n         DC    A(MSG12S)           CONDITION CODE 12\n         DC    A(MSG16S)           CONDITION CODE 16\n         DC    A(MSG20S)           CONDITION CODE 20\n         DC    A(MSG24S)           CONDITION CODE 24\n         DC    A(MSG28S)           CONDITION CODE 28        *HMD 08/80*\n         DC    A(MSG32S)           CONDITION CODE 32        *HMD 08/80*\n         DC    A(MSG36S)           CONDITION CODE 36        *HMD 08/80*\n         SPACE 2\nCATMSGL  DS    0F                  CATALOG MESSAGES\n         DC    A(MSGDONE)          CATALOG RC=0\n         DC    A(MSG04C)           CATALOG RC=4\n         DC    A(MSG08C)           CATALOG RC=8\n         DC    A(MSG12C)           CATALOG RC=12\n         DC    A(MSG16C)           CATALOG RC=16\n         DC    A(MSG20C)           CATALOG RC=20\n         DC    A(MSG24C)           CATALOG RC=24\n         DC    A(MSG28C)           CATALOG RC=28\n         SPACE 2\nLOCMSGL  DS    0F                  LOCATE MESSAGES\n         DC    A(MSGDONE)          LOCATE RC=0\n         DC    A(MSG04L)           LOCATE RC=4\n         DC    A(MSG08L)           LOCATE RC=8\n         DC    A(MSG12L)           LOCATE RC=12\n         DC    A(MSG16L)           LOCATE RC=16\n         DC    A(MSG20L)           LOCATE RC=20\n         DC    A(MSG24L)           LOCATE RC=24\n         DC    A(MSG28L)           LOCATE RC=28\n         DC    A(MSG32L)           LOCATE RC=32\n         SPACE 2\nRENMSGR  DS    0F                  RENAME MESSAGES\n         DC    A(MSGBDONE)         RENAME RC=0\n         DC    A(MSG04RE)          RENAME RC=4\n         DC    A(MSG08RE)          RENAME RC=8\n         DC    A(MSG12R)           RENAME RC=12\n         SPACE 2\nRENMSGL  DS    0F                  RENAME MESSAGES\n         DC    A(MSGBDONE)         CONDITION CODE 0\n         DC    A(MSG04S)           CONDITION CODE 4\n         DC    A(MSG08S)           CONDITION CODE 8\n         DC    A(MSG12RE)          CONDITION CODE 12\n         DC    A(MSG16S)           CONDITION CODE 16\n         DC    A(MSG20S)           CONDITION CODE 20\n         DC    A(MSG24S)           CONDITION CODE 24\n         DC    A(MSG28S)           CONDITION CODE 28        *HMD 08/80*\n         DC    A(MSG32S)           CONDITION CODE 32        *HMD 08/80*\n         EJECT\nWASIZE   DC    A(LENWORK)          LENGTH OF WORK AREA\n         SPACE 3\nANTBL    DS    0CL256\n         DC    91X'01'\n         DC    X'00'               $\n         DC    4X'01'\n         DC    X'00'               HYPHEN\n         DC    26X'01'\n         DC    2X'00'              #@\n         DC    68X'01'\n         DC    9X'00'              ABCDEFGHI\n         DC    7X'01'\n         DC    9X'00'              JKLMNOPQR\n         DC    8X'01'\n         DC    8X'00'              STUVWXYZ\n         DC    6X'01'\n         DC    10X'00'             0123456789\n         DC    6X'01'\n         SPACE 3\nNTBL     DS    0CL256\n         DC    240X'01'\n         DC    10X'00'             0123456789\n         DC    6X'01'\n         EJECT\nMHLPCPL  ATTACH EPLOC=IKJHELP,SF=L\n         SPACE 2\nLHLPCPL  EQU   *-MHLPCPL           LENGTH OF ATTACH LIST\n         SPACE 2\nMDAP2C   DS    0F                  DAIR PB 2C MAP\n         DC    X'002C',H'1',F'0'\n         DC    CL8'SYSHELP'\n         SPACE 2\nLDAP2C   EQU   *-MDAP2C            LENGTH OF DAIR PB\n         EJECT\nMSGDONE  MSG   'DONE'\nMSGBDONE MSG   ' DONE'\nMSG04R   MSG   ' NO DATA SETS SCRATCHED'\nMSG08R   MSG   ' UNUSUAL CONDITION ENCOUNTERED DURING SCRATCH'\nMSG12R   MSG   ' INVALID VOLUME LIST'\nMSG04S   MSG   ' DATA SET NOT FOUND ON VOLUME'\nMSG08S   MSG   ' PASSWORD NOT SUPPLIED'\nMSG12S   MSG   ' DATA SET RETENTION PERIOD HAS NOT EXPIRED'\nMSG16S   MSG   ' PERMANENT I/O ERROR'\nMSG20S   MSG   ' VOLUME NOT MOUNTED'\nMSG24S   MSG   ' OPERATOR UNABLE TO MOUNT VOLUME'\nMSG28S   MSG   ' DATA SET IS IN USE BY ANOTHER JOB OR USER' *HMD 08/80*\nMSG32S   MSG   ' SECURITY VIOLATION - RACF PROTECTED'       *HMD 08/80*\nMSG36S   MSG   ' RACF DEFINITION CANNOT BE DELETED'         *HMD 08/80*\nMSG04C   MSG   'REQUIRED CONTROL VOLUME NOT MOUNTED'\nMSG08C   MSG   'EXISTING CATALOG STRUCTURE IS INCONSISTENT'\nMSG12C   MSG   'INDEX HAS DATA SETS CATALOGED UNDER IT'\nMSG16C   MSG   'REQUIRED INDEX STRUCTURE DOES NOT EXIST'\nMSG20C   MSG   'SPACE NOT AVAILABLE ON SPECIFIED CONTROL VOLUME'\nMSG24C   MSG   'IMPROPERLY NAME GENERATION DATA SET'\nMSG28C   MSG   'PERMANENT I/O ERROR'\nMSG04L   MSG   'CONTROL VOLUME NOT MOUNTED OR SYSCTLG NOT FOUND'\nMSG08L   MSG   'NAME OF QUALIFIED NAME NOT FOUND'\nMSG12L   MSG   'INDEX, ALIAS, OR CONTROL POINTER FOUND WHEN LIST DONE'\nMSG16L   MSG   'DATA SET RESIDES AT LEVEL OF INDEX NOT SPECIFIED'\nMSG20L   MSG   'SYNTAX ERROR IN DSNAME'\nMSG24L   MSG   'PERMANENT I/O ERROR WHEN PROCESSING CATALOG'\nMSG28L   MSG   'RELATIVE TRACK ADDRESS OUT OF SYSCTLG EXTENT'\nMSG32L   MSG   'INVALID WORK AREA POINTER'\nMSG04RE  MSG   ' NO DATA SETS RENAMED'\nMSG08RE  MSG   ' UNUSUAL CONDITION ENCOUNTERED DURING RENAME'\nMSG12RE  MSG   ' NEW DATA SET NAME ALREADY EXISTS ON VOLUME'\nMSGENT   MSG   ' 12345678'\nMSGAMBIG MSG   ' AMBIGUOUS SUBCOMMAND: '\nMSGINVLD MSG   ' INVALID SUBCOMMAND: '\nMSGCMDER MSG   ' COMMAND SYSTEM ERROR'\nMSGHVOL  MSG   '--VOLUMES--'\nMSGNSCR  MSG   ' DATA SET NOT SCRATCHED'\nMSGNREN  MSG   ' DATA SET NOT RENAMED'\nMSGNMT   MSG   ' VOLUME XXXXXX NOT MOUNTED'\nMSGNCON  MSG   ' INDEX NOT CONNECTED TO VOLUME'\nMSGPARSE MSG   ' PARSE ERROR CODE XX '\nMSGUTAPE MSG   ' UNIT = TAPE9 (6250 BPI) ASSUMED FOR VOLUME '\nMSGUDA   MSG   ' UNIT = 3330 ASSUMED FOR VOLUME '\nMSGMCAT  MSG   ' ONLY FIRST TWENTY VOLUME SERIAL NUMBERS LISTED'\nMSGLCAT  MSG   ' LOCATE BY TTR FOR NEXT VOLUME CONTROL BLOCK FAILED'\nMSGNCAT  DC    C' IS NOT A CATALOGED DATA SET'\nMSGACAT  DC    C' IS ALREADY A CATALOGED DATA SET'\n         EJECT\n         LTORG\n         EJECT\nWORKAREA DSECT                     WORK AREA\nSAVE     DS    18A                 O/S SAVE AREA\nVSAVE    DS    18A                 VALIDATION SAVE AREA\nASAVE    DS    18A                 ATTENTION EXIT SAVE AREA\nR14SAVE  DS    A                   *\nANSADDR  DS    A                   PDS ANSWER AREA\nACMD     DS    A                   CMD TABLE ADDRESS\nATTNECB  DS    F                   ATTENTION ECB\nAUPT     DS    A                   UPT ADDRESS\nAECT     DS    A                   ECT ADDRESS\nAPSCB    DS    A                   PSCB ADDRESS\nACBUF    DS    A                   CMD BUFFER ADDRESS\nAPCL     DS    A                   PCL ADDRESS FOR PARSE\nAPUTL    DS    A                   IKJPUTL EP ADDRESS\nAPTGT    DS    A                   IKJPTGT EP ADDRESS\nASCAN    DS    A                   IKJSCAN EP ADDRESS\nADEVNT   DS    A                   DEVNAMET EP ADDRESS\nRETCODE  DS    F                   RETURN CODE\nHLPECB   DS    F                   HELP EVENT CONTROL BLOCK\nHLPTCB   DS    A                   HELP TCB ADDRESS\nPUTOLD1  DS    3F                  *\nPUTOLD2  DS    3F                  *\nSCANAREA DS    XL8                 CMD SCAN AREA\nBASES    DS    3A                  BASE REGISTER SAVE AREA\nPARMLIST DS    10A                 *\nCAMLIST  DS    5A                  CAM LIST AREA\nIOPLPARM DS    10A                 IOPL PARM LIST\nPARSELST DS    10A                 PARSE PARM LIST\nHINDEX   DS    CL8                 INDEX 8 BYTES\nAINDEX   DS    CL8                 ALTERNATE INDEX 8 BYTES\nLDSNX    DS    H                   LENGTH OF DSNAME/INDEX\nDSNAMEX  DS    CL45                DSN OR INDEX FIELD\nDSNAME2  DS    CL45                RENAME DSN FIELD\nCVOL     DS    CL6                 CNTL VOLUME NAME\nXCVOL    DS    CL6                 VCB CVOL POINTER         *HMD 07/81*\nDOUBLE   DS    D                   DOUBLE WORD\nMSGTEXT1 DS    XL84                *\nMSGTEXT2 DS    XL84                *\nMSGENTER DS    XL13                PROMPT MSG\nFLAGS    DS    XL2                 STATUS FLAGS\nSEQNO    DS    H                   DATA SET SEQUENCE NUMBER\nUNIT     DS    XL4                 UNIT TYPE\nTTRX     DS    CL3                 SAVE TTR OF NEXT VCB     *HMD 07/81*\nDAIRPB   DS    0D                  DAIR PARAMETER BLOCK\nHLPCPL   DS    0D                  HELP ATTACH LIST\nXVCB     DS    0D                  EXTRA VCB\n         DS    CL265\n         DS    0D                  ALIGN ON FULL WORD BOUNDARY\nVCB      DS    0CL265              VOLUME CONTROL BLOCK\nVCBNVOLS DS    H                   NUMBER OF VOL ENTRIES\nVCBENT   DS    0CL240\n         DS    CL240\n         DS    CL10                FILLER                   *HMD 08/80*\nVCBTTR   DS    CL3                 TTR OF NEXT VCB          *HMD 07/81*\n         DS    CL4                 FILLER                   *HMD 07/81*\nVCBCVOL  DS    CL6                 CVOL POINTER             *HMD 07/81*\nLENWORK  EQU   *-WORKAREA          LENGTH OF WORK AREA\n         EJECT\n         IKJPPL\n         SPACE 3\n         IKJIOPL\nIOPLEND  DS    0F\n         SPACE 3\n         IKJDAPL\n         EJECT\n         IKJPSCB\n         EJECT\n         IKJECT\n         SPACE 3\n         IKJCPPL\n         EJECT\n         IKJCSPL\n         SPACE 3\n         IKJCSOA\n         EJECT\n         IKJPGPB\n         EJECT\n         IKJDAP2C\n         EJECT\nDEVDSECT DSECT                     DEVICE TABLE DSECT\nDEVNAME  DS    CL8                 DEVICE GENERIC NAME\nDEVTYPE  DS    XL4                 DEVICE TYPE\n         EJECT\nVCBFLD   DSECT                     VOLUME CONTROL BLOCK FIELD\nVCBUNIT  DS    XL4                 VCB UNIT TYPE\nVCBVOL   DS    CL6                 VCB VOLUME SERIAL NUMBER\nVCBSEQ   DS    H                   VCB\n         EJECT\nUCB      DSECT                     UCB DSECT\n         DS    XL13                *\nUCBNAME  DS    CL3                 UNIT NAME IN EBCDIC\nUCBTYPE  DS    0XL4                UNIT TYPE\n         DS    XL2                 *\nUCBDEVC  DS    XL1                 UNIT DEVICE CLASS\nUCBDEVT  DS    XL1                 UNIT DEVICE TYPE\n         DS    XL8                 *\nUCBVOL   DS    CL6                 VOLUME SERIAL NUMBER\n         EJECT                                              *HMD 08/80*\n         CVT   DSECT=YES,LIST=YES                           *HMD 08/80*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CATALOG$": {"ttr": 2565, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/!!\\x00,\\x00,\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T21:21:00", "lines": 44, "newlines": 44, "modlines": 0, "user": "SYZYGY"}, "text": "//ZCATALOG  JOB (BHWA00),'SYSTEMS*BRIAN',MSGCLASS=A,\n//     CLASS=A,NOTIFY=SYZYGY\n//ASMFCL PROC  CLASS=A,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='SYZYGY.PDS.DATA',\n//             LOAD='SYZYGY.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             DIR=1,              NUMBER OF DIRECTORY BLOCKS\n//             ALLOC=TRK,          ALLOC INCREMENT\n//             LR=80,              LRECL\n//             BKI=9440,\n//             FM=FB               RECFM\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='OBJECT,NODECK,XREF,RENT'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR,\n//             DCB=(RECFM=&FM.,LRECL=&LR.,BLKSIZE=&BKI.)\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1,RENT,REFR'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD,DISP=SHR,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.,&DIR.))\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=CATALOG\n//LKED.SYSIN        DD     *\n  ENTRY CATALOG\n  ORDER CATALOG(P)\n  ALIAS CAT\n  NAME  CATALOG(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CATALOGH": {"ttr": 2567, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/!!\\x01]\\x01]\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T21:21:00", "lines": 349, "newlines": 349, "modlines": 0, "user": "SYZYGY"}, "text": ")S SUBCOMMANDS -\n               BLDA,BLDG,BLDX,CATLG,CONNECT,DLTA,DLTX,END,HELP,\n               OPTIONS,RELEASE,RENAME,SCRATCH,UNCATLG,VOL\n\n)F FUNCTION -\n               THE CATALOG COMMAND ALLOWS THE TSO USER TO REFERENCE\n               AND MAINTAIN THE O/S SYSTEM CATALOG.\n\n               THE CATALOG COMMAND PROVIDES OPTIONS TO CATALOG OR\n               UNCATALOG A DATA SET, BUILD OR DELETE AN INDEX OR AN\n               ALIAS, BUILD A GENERATION DATA GROUP, CONNECT OR\n               RELEASE TWO VOLUMES, DISPLAY CATALOGED DATA SET VOLUME\n               SERIAL NUMBERS, AND SCRATCH AND RENAME DATA SETS\n               RESIDING ONLINE DIRECT ACCESS DEVICES.\n\n)X SYNTAX -\n               CATALOG\n\n    REQUIRED - NONE\n    DEFAULTS - NONE\n    ALIAS    - CAT\n\n)O OPERANDS -\n               NONE\n\n=BLDA\n)F FUNCTION -\n               THE BLDA SUBCOMMAND IS USED TO ASSIGN AN ALIAS NAME TO\n               AN INDEX AT THE HIGHEST LEVEL OF THE CATALOG.\n\n)X SYNTAX -\n               BLDA 'INDEX' 'ALIAS' CVOL('VOLID')\n\n    REQUIRED - 'INDEX' AND 'ALIAS'\n    DEFAULTS - NONE\n\n)O OPERANDS -\n    'INDEX'  - SPECIFIES THE UNQUALIFIED INDEX NAME TO WHICH AN ALIAS\n               NAME IS TO BE ASSIGNED.\n    'ALIAS'  - SPECIFIES THE UNQUALIFIED NAME TO BE ASSIGNED AS THE\n               ALIAS NAME.\n))CVOL('VOLID')\n             - OPTIONAL KEYWORD INDICATING THE CONTROL VOLUME SERIAL\n               NUMBER ON WHICH THE CATALOG ENTRY IS TO BE MADE. IF CVOL\n               IS OMITTED, THE SYSTEM RESIDENCE VOLUME IS ASSUMED.\n    'VOLID'  - SPECIFIES THE CONTROL VOLUME SERIAL NUMBER.\n\n=BLDG\n)F FUNCTION -\n               THE BLDG SUBCOMMAND IS USED TO BUILD AN INDEX FOR A\n               GENERATION DATA GROUP AND ESTABLISH THE ACTION TO BE\n               TAKEN SHOULD THE INDEX OVERFLOW.\n\n)X SYNTAX -\n               BLDG 'INDEX' 'ENTRIES' CVOL('VOLID') EMPTY DELETE\n\n    REQUIRED - 'INDEX' AND 'ENTRIES'\n    DEFAULTS - NONE\n\n)O OPERANDS -\n    'INDEX'  - SPECIFIES THE NAME OF THE GENERATION-DATA-GROUP INDEX\n               TO BE BUILT.  THE NAME OF THE INDEX MUST NOT EXCEED 35\n               CHARACTERS, INCLUDING PERIODS.\n   'ENTRIES' - SPECIFIES THE NUMBER OF ENTRIES TO BE CONTAINED IN THE\n               GENERATION-DATA-GROUP INDEX.  THE NUMBER OF ENTRIES MUST\n               NOT EXCEED 255.\n))CVOL('VOLID')\n             - OPTIONAL KEYWORD INDICATING THE CONTROL VOLUME SERIAL\n               NUMBER ON WHICH THE CATALOG SEARCH FOR THE\n               INDEX IS TO BEGIN.  IF CVOL IS OMITTED THE SYSTEM\n               RESIDENCE VOLUME IS ASSUMED.\n    'VOLID'  - SPECIFIES THE CONTROL VOLUME SERIAL NUMBER.\n))EMPTY      - KEYWORD SPECIFYING THAT ALL ENTRIES BE REMOVED FROM THE\n               GENERATION-DATA-GROUP INDEX WHEN IT OVERFLOWS.  IF EMPTY\n               IS OMITTED, THE ENTRIES WITH THE LARGEST GENERATION\n               NUMBERS WILL BE MAINTAINED IN THE CATALOG WHEN THE\n               GENERATION-DATA-GROUP INDEX OVERFLOWS.\n))DELETE     - KEYWORD SPECIFYING THAT GENERATION DATA SETS ARE TO BE\n               SCRATCHED AFTER THEIR ENTRIES ARE REMOVED FROM THE INDEX.\n               IF DELETE IS OMITTED, THE DATA SETS ARE NOT SCRATCHED.\n\n=BLDX\n)F FUNCTION -\n               THE BLDX SUBCOMMAND IS USED TO CREATE A NEW INDEX IN\n               THE CATALOG.\n\n)X SYNTAX -\n               BLDX 'INDEX' CVOL('VOLID')\n\n    REQUIRED - 'INDEX'\n    DEFAULTS - NONE\n\n)O OPERANDS -\n    'INDEX'  - SPECIFIES THE QUALIFIED NAME OF THE INDEX TO BE CREATED.\n               THE QUALIFIED NAME MUST NOT EXCEED 44 CHARACTERS,\n               INCLUDING PERIODS.\n))CVOL('VOLID')\n             - OPTIONAL KEYWORD INDICATING THE CONTROL VOLUME SERIAL\n               NUMBER ON WHICH THE SEARCH FOR THE INDEX IS TO BEGIN. IF\n               CVOL IS OMITTED, THE SYSTEM RESIDENCE VOLUME IS ASSUMED.\n    'VOLID'  - SPECIFIES THE CONTROL VOLUME SERIAL NUMBER.\n\n=CATLG=CA\n)F FUNCTION -\n               THE CATLG SUBCOMMAND IS USED TO GENERATE A DATA SET\n               ENTRY IN THE INDEX OF A CATALOG.\n\n)X SYNTAX -\n               CATLG 'DSNAME' ('VOL' 'VOL' ....) UNIT('DEVICE')\n                   CVOL('VOLID') SEQ('NUMBER')\n\n    REQUIRED - 'DSNAME' AND 'VOL'\n    DEFAULTS - NONE\n\n)O OPERANDS -\n    'DSNAME' - SPECIFIES THE FULLY QUALIFIED NAME OF THE DATA SET TO BE\n               CATALOGED. THE QUALIFIED NAME MUST NOT EXCEED 44\n               CHARACTERS, INCLUDING PERIODS.\n    'VOL'    - SPECIFIES THE VOLUME(S) THAT CONTAIN THE DATA SET TO\n               BE CATALOGED.\n               IF ONLY ONE VOLUME IS TO BE ENTERED, ENCLOSING\n               PARENTHESIS MAY BE OMITTED.\n))UNIT('DEVICE')\n             - OPTIONAL KEYWORD INDICATING THE UNIT TYPE ON WHICH\n               THE DATA SET VOLUME(S) RESIDE. ALL VOLUMES MUST RESIDE\n               ON THE SAME UNIT TYPE. THE UNIT TYPE DEFAULT IS 9 TRACK\n               MAGNETIC TAPE (I.E. TAPE9).\n    'DEVICE' - SPECIFIES THE GENERIC OR GROUP DEVICE NAME ON WHICH THE\n               DATA SET RESIDES WHEN MOUNTED. (E.G. SYSDA).\n))CVOL('VOLID')\n             - OPTIONAL KEYWORD INDICATING THE CONTROL VOLUME SERIAL\n               NUMBER ON WHICH THE SEARCH FOR THE INDEX IS TO BEGIN. IF\n               CVOL IS OMITTED, THE SYSTEM RESIDENCE VOLUME IS ASSUMED.\n    'VOLID'  - SPECIFIES THE CONTROL VOLUME SERIAL NUMBER.\n))SEQ('NUMBER')\n             - OPTIONAL KEYWORD INDICATING THE DATA SET SEQUENCE\n               NUMBER FOR DATA SETS RESIDING ON TAPE. THE SEQUENCE\n               NUMBER DEFAULT IS 1.\n    'NUMBER' - SPECIFIES THE DATA SET SEQUENCE NUMBER.\n\n=CONNECT=CO\n)F FUNCTION\n               THE CONNECT SUBCOMMAND IS USED TO PLACE AN ENTRY IN THE\n               HIGH-LEVEL INDEX OF THE CATALOG.  THIS FUNCTION DOES\n               NOT CREATE AN INDEX ON THE SECOND VOLUME.\n\n)X SYNTAX\n               CONNECT 'INDEX' 'VOL' CVOL('VOLID') UNIT('DEVICE')\n\n    REQUIRED - 'INDEX' AND 'VOL'\n    DEFAULTS - NONE\n\n)O OPERANDS\n    'INDEX'  - SPECIFIES THE INDEX NAME TO BE ENTERED IN THE HIGH-LEVEL\n               INDEX ON THE FIRST VOLUME.\n    'VOL'    - SPECIFIES THE VOLUME SERIAL NUMBER OF THE SECOND\n               VOLUME.  THIS INFORMATION IS PLACED IN THE HIGH-LEVEL\n               INDEX ON THE FIRST VOLUME.\n))CVOL('VOLID')\n             - OPTIONAL KEYWORD SPECIFYING THE VOLUME SERIAL NUMBER\n               OF THE FIRST VOLUME.  IF CVOL IS OMITTED, THE SYSTEM\n               RESIDENCE VOLUME IS ASSUMED TO BE THE FIRST VOLUME.\n    'VOLID'  - SPECIFIES THE CONTROL VOLUME SERIAL NUMBER.\n))UNIT('DEVICE')\n             - OPTIONAL KEYWORD SPECIFYING THE DEVICE TYPE OF THE\n               SECOND VOLUME.  THIS INFORMATION IS PLACED IN THE\n               HIGH-LEVEL INDEX ON THE FIRST VOLUME.\n    'DEVICE' - SPECIFIES THE GENERIC OR GROUP DEVICE NAME ON WHICH\n               THE DATA SET RESIDES WHEN MOUNTED. (E.G. SYSDA)\n\n=DLTA\n)F FUNCTION -\n               THE DLTA SUBCOMMAND IS USED TO DELETE AN ALIAS\n               PREVIOUSLY ASSIGNED TO AN INDEX AT THE HIGHEST LEVEL\n               OF THE CATALOG.\n\n)X SYNTAX -\n               DLTA 'INDEX' CVOL('VOLID')\n\n    REQUIRED - 'INDEX'\n    DEFAULTS - NONE\n\n)O OPERANDS -\n    'INDEX'  - SPECIFIES THE UNQUALIFIED INDEX ALIAS TO BE DELETED.\n))CVOL('VOLID')\n             - OPTIONAL KEYWORD INDICATING THE CONTROL VOLUME SERIAL\n               NUMBER CONTAINING THE INDEX ALIAS ENTRY TO BE DELETED.\n               IF CVOL IS OMITTED, THE SYSTEM RESIDENCE VOLUME IS\n               ASSUMED.\n    'VOLID'  - SPECIFIES THE CONTROL VOLUME SERIAL NUMBER.\n\n=DLTX\n)F FUNCTION -\n               THE DLTX SUBCOMMAND IS USED TO REMOVE A LOW LEVEL INDEX\n               FROM THE CATALOG.\n\n)X SYNTAX -\n               DLTX 'INDEX' CVOL('VOLID')\n\n    REQUIRED - 'INDEX'\n    DEFAULTS - NONE\n\n)O OPERANDS -\n    'INDEX'  - SPECIFIES THE FULLY QUALIFIED NAME OF THE INDEX TO BE\n               DELETED.\n))CVOL('VOLID')\n             - OPTIONAL KEYWORD INDICATING THE CONTROL VOLUME SERIAL\n               NUMBER ON WHICH THE SEARCH FOR THE INDEX IS TO BEGIN.  IF\n               CVOL IS OMITTED, THE SYSTEM RESIDENCE VOLUME IS ASSUMED.\n    'VOLID'  - SPECIFIES THE CONTROL VOLUME SERIAL NUMBER.\n\n=END=E\n)F FUNCTION -\n               THE END SUBCOMMNAD IS USED TO EXIT THE PROGRAM.\n\n)X SYNTAX -\n               END\n\n    REQUIRED - NONE\n    DEFAULTS - NONE\n\n)O OPERANDS -\n               NONE\n\n=OPTIONS=O\n)F FUNCTION -\n               THE OPTIONS SUBCOMMAND IS USED TO DISPLAY THE OPTIONS\n               AVAILABLE TO THE CATALOG COMMAND PROCESSOR.\n\n)X SYNTAX -\n               OPTIONS\n\n    REQUIRED - NONE\n    DEFAULTS - NONE\n\n)O OPERANDS -\n               NONE\n\n=RELEASE=REL\n)F FUNCTION -\n               THE RELEASE SUBCOMMAND IS USED TO REMOVE AN ENTRY FROM\n               THE HIGH-LEVEL INDEX OF A VOLUME.  THIS EFFECTIVELY\n               DISCONNECTS A SECOND VOLUME FROM THE FIRST VOLUME. THE\n               RELEASE SUBCOMMAND DOES NOT DELETE AN INDEX FROM THE\n               SECOND VOLUME.\n\n)X SYNTAX -\n               RELEASE 'INDEX' CVOL('VOLID')\n\n    REQUIRED - 'INDEX'\n    DEFAULTS - NONE\n\n)O OPERANDS -\n    'INDEX'  - SPECIFIES THE INDEX NAME TO REMOVED FROM THE HIGH-LEVEL\n               INDEX OF THE FIRST VOLUME\n))CVOL('VOLID')\n             - OPTIONAL KEYWORD SPECIFYING THE VOLUME SERIAL NUMBER OF\n               THE FIRST VOLUME.  IF CVOL IS OMITTED THE SYSTEM\n               RESIDENCE VOLUME IS ASSUMED TO BE THE FIRST VOLUME.\n    'VOLID'  - SPECIFIES THE FIRST VOLUME SERIAL NUMBER.\n\n=RENAME=REN\n)F FUNCTION\n               THE RENAME SUBCOMMAND IS USED TO CHANGE THE NAME OF\n               A DATA SET RESIDING ON A DIRECT-ACCESS VOLUME.  THE\n               RENAME OPERATION DOES NOT UPDATE THE CATALOG.\n\n)X SYNTAX\n               RENAME 'OLD DSN' 'NEW DSN' ('VOLID' 'VOLID' ....)\n\n    REQUIRED - 'OLD DSN' 'NEW DSN' AND 'VOLID'\n    DEFAULTS - NONE\n\n)O OPERANDS\n   'OLD DSN' - SPECIFIES THE FULLY QUALIFIED NAME OF THE DATA SET TO\n               BE RENAMED.  THE QUALIFIED NAME MUST NOT EXCEED 44\n               CHARACTERS, INCLUDING PERIODS.\n   'NEW DSN' - SPECIFIES THE NEW FULLY QUALIFIED NAME FOR THE DATA\n               SET.  THE NEW QUALIFIED NAME MUST NOT EXCEED 44\n               CHARACTERS, INCLUDING PERIODS.\n    'VOLID'  - SPECIFIES THE VOLUME(S) THAT CONTAIN THE DATA SET\n               TO BE RENAMED.  THE NAME IS CHANGED ONLY ON THE\n               DESIGNATED VOLUME(S).  IF ONLY ONE VOLUME IS TO BE\n               RENAMED, ENCLOSING PARENTHESIS MAY BE OMITTED.\n\n=SCRATCH=S\n)F FUNCTION -\n               THE SCRATCH SUBCOMMAND IS USED TO DELETE A DATA SET\n               FROM A DIRECT ACCESS VOLUME. THE SCRATCH OPERATION\n               DOES NOT UPDATE THE CATALOG.\n\n)X SYNTAX -\n               SCRATCH 'DSNAME' ('VOL' 'VOL' ....)\n\n    REQUIRED - 'DSNAME' AND 'VOL'\n    DEFAULTS - NONE\n\n)O OPERANDS -\n    'DSNAME' - SPECIFIES THE FULLY QUALIFIED NAME OF THE DATA SET TO BE\n               SCRATCHED.  THE QUALIFIED NAME MUST NOT EXCEED 44\n               CHARACTERS INCLUDING PERIODS.\n    'VOL'    - SPECIFIES THE VOLUME(S) THAT CONTAIN THE DATA SET TO\n               BE SCRATCHED.  IF ONLY ONE VOLUME IS TO BE SCRATCHED\n               ENCLOSING PARENTHESIS MAY BE OMITTED.\n\n=UNCATLG=U\n)F FUNCTION -\n               THE UNCATLG SUBCOMMAND IS USED TO REMOVE A DATA SET\n               ENTRY FROM THE CATALOG.\n\n)X SYNTAX -\n               UNCATLG 'DSNAME' CVOL('VOLID')\n\n    REQUIRED - 'DSNAME'\n    DEFAULTS - NONE\n\n)O OPERANDS -\n    'DSNAME' - SPECIFIES THE FULLY QUALIFIED NAME OF THE DATA SET TO\n               BE UNCATALOGED.  THE QUALIFIED NAME MUST NOT EXCEED 44\n               CHARACTERS, INCLUDING PERIODS.\n))CVOL('VOLID')\n             - OPTIONAL KEYWORD INDICATING THE CONTROL VOLUME SERIAL\n               NUMBER ON WHICH THE SEARCH FOR THE INDEX IS TO BEGIN.\n               IF CVOL IS OMITTED, THE SYSTEM RESIDENCE VOLUME IS\n               ASSUMED.\n    'VOLID'  - SPECIFIES THE CONTROL VOLUME SERIAL NUMBER.\n\n=VOL=V\n)F FUNCTION -\n               THE VOL SUBCOMMAND IS USED TO DISPLAY DATA SET VOLUME\n               SERIAL NUMBERS CONTAINED IN THE CATALOG.\n\n)X SYNTAX -\n               VOL 'DSNAME' CVOL('VOLID')\n\n    REQUIRED - 'DSNAME'\n    DEFAULTS - NONE\n\n)O OPERANDS -\n    'DSNAME' - SPECIFIES THE FULLY QUALIFIED NAME OF THE DATA SET TO\n               BE DISPLAYED.  THE QUALIFIED NAME MUST NOT EXCEED 44\n               CHARACTERS, INCLUDING PERIODS.\n))CVOL('VOLID')\n             - OPTIONAL KEYWORD INDICATING THE CONTROL VOLUME SERIAL\n               NUMBER ON WHICH THE SEARCH FOR THE INDEX IS TO BEGIN.\n               IF CVOL IS OMITTED, THE SYSTEM RESIDENCE VOLUME IS\n               ASSUMED.\n    'VOLID'  - SPECIFIES THE CONTROL VOLUME SERIAL NUMBER.\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMMAND": {"ttr": 2817, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/ )\\x01%\\x01%\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T20:29:00", "lines": 293, "newlines": 293, "modlines": 0, "user": "SYZYGY"}, "text": "//SYZYGYBA JOB (PS01),'SYZYGYB',\n//            CLASS=A,MSGCLASS=A,\n//            NOTIFY=SYZYGY,REGION=2048K\n//*-----------------------------------------------*\n//*   LIB: SYZYGYB.PDS.DATA(COMMAND)\n//*   DOC: ASSEMBLE AND LINK\n//*-----------------------------------------------*\n//ASSEMB  EXEC ASSEMBLE,PARM.LINK='LIST,LET,AC=1'\n//ASM.SYSLIB  DD\n//          DD\n//          DD\n//          DD  DSN=SYZYGY.PDS.DATA,DISP=SHR\n//SYSIN    DD  *\nCOMMAND  TITLE 'C O M M A N D  --  ISSUE SYSTEM OPERATOR COMMANDS V2.0'\n***********************************************************************\n*                                                                     *\n*                           C O M M A N D                             *\n*                                                                     *\n*                   ISSUE SYSTEM OPERATOR COMMANDS                    *\n*                                                                     *\n*                                                                     *\n*     THIS PROGRAM ACCEPTS SYSTEM OR JES OPERATOR COMMANDS AS         *\n*     INPUT AND EXECUTES THEM USING SVC 34. IT MUST BE APF            *\n*     AUTHORIZED.                                                     *\n*                                                                     *\n*     COMMAND CAN OPERATE IN ONE OF THREE MODES:                      *\n*                                                                     *\n*     1) BATCH OR CALLED PROGRAM                                      *\n*        IN THIS MODE COMMAND ACCEPTS INPUT AS EITHER 80-BYTE         *\n*        CARD IMAGES FROM SYSIN OR A SINGLE COMMAND FROM THE PARM     *\n*        FIELD. THE RESPONSE TO THE OPERATOR COMMAND WILL             *\n*        APPEAR ON ALL OPERATOR CONSOLES. FOR EXAMPLE:                *\n*                                                                     *\n*           //STEP1    EXEC PGM=COMMAND,PARM='VARY 017,ONLINE'        *\n*                                                                     *\n*           - OR -                                                    *\n*                                                                     *\n*           //STEP1    EXEC PGM=COMMAND                               *\n*           //SYSIN    DD *                                           *\n*           VARY 017,ONLINE                                           *\n*           /*                                                        *\n*                                                                     *\n*     2) TSO COMMAND PROCESSOR                                        *\n*        IN THIS MODE COMMAND EXPECTS TO FIND THE OPERATOR COMMAND    *\n*        DIRECTLY FOLLOWING ON THE TSO INPUT LINE. THE RESPONSE TO    *\n*        OS COMMANDS WILL THEN BE DISPLAYED ON THE TSO TERMINAL.      *\n*        RESPONSE TO JES COMMANDS WILL APPEAR ON ALL CONSOLES.        *\n*        FOR EXAMPLE:                                                 *\n*                                                                     *\n*           COMMAND D T         <--- (RESPONSE WILL APPEAR ON CRT)    *\n*                                                                     *\n*     3) CALLABLE SUBROUTINE                                          *\n*        IN THIS MODE COMMAND ACCEPTS INPUT ACCORDING TO STANDARD     *\n*        OS LINKAGE CONVENTIONS. IN ADDITION TO THE COMMAND ITSELF,   *\n*        A SECOND PARAMETER MAY BE PASSED WHICH CONTAINS THE          *\n*        CONSOLE NUMBER WHERE YOU WISH THE RESPONSE TO APPEAR.        *\n*        (THE SVC 34 WILL ALSO ASSUME THE AUTHORITY OF THAT           *\n*        CONSOLE.) FOR EXAMPLE:                                       *\n*                                                                     *\n*           LA       R1,CMDADDR                                       *\n*           LA       R15,=V(COMMAND)                                  *\n*           BALR     R14,R15                                          *\n*                                                                     *\n*           CMDADDR  DC    A(OPERCMD)                                 *\n*           CNSADDR  DC    XL1'80',AL3(CONSOLE)                       *\n*           OPERCMD  DC    H(3),CL3'D T'                              *\n*           CONSOLE  DC    F'5'                                       *\n*                                                                     *\n*        This would make it appear as if 'D T' were issued from       *\n*        console 5. (This method is used by program 'SPY')            *\n*                                                                     *\n*     Just prior to issuing a command via SVC 34, COMMAND will        *\n*     issue a WTO of the form                                         *\n*                                                                     *\n*        BIICMD01 - USERID  - VARY 017,ONLINE                         *\n*                                                                     *\n*     This will appear on the operator's console and in SYSLOG.       *\n*                                                                     *\n*     COMMAND may be used to issue replies to WTORs. Since the        *\n*     reply may be sensitive (for example, a password) COMMAND        *\n*     will supress it whenever a REPLY is issued.                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nCOMMAND  CSECT\n         SPACE 3\nR0       EQU   0                  register 0\nR1       EQU   1                  register 1\nR2       EQU   2                  work register\nR3       EQU   3                  work register\nR4       EQU   4                  work register\nR10      EQU   10                 parameter list address register\nR11      EQU   11                 subroutine linkage register\nR12      EQU   12                 base register\nR13      EQU   13                 save area address register\nR14      EQU   14                 register 14\nR15      EQU   15                 register 15\n         EJECT\n         SAVE  (14,12)            save caller's registers\n         LR    R12,R15            establish\n         USING COMMAND,R12        addressability\n         LA    R3,SAVEAREA        get our savearea address\n         ST    R13,SAVEAREA+4     establish back\n         ST    R3,8(R13)          and forward savearea pointers\n         LR    R13,R3             ESTABLISH OUR SAVEAREA ADDRESS\n         LR    R10,R1             SAVE PARAMETER REGISTER\n         SPACE 2\n         L     R2,CVTPTR          R2 = ADDR OF CVT\n         USING CVT,R2\n         L     R3,CVTTCBP         R3 = ADDR OF ADDR OF OUR TCB\n         L     R4,8(R3)           R4 = ADDR OF OUR TCB\n         USING ASCB,R4\n         MVC   ASID,ASCBASID      SAVE OUR ASID\n         DROP  R4\n         L     R3,0(R3)           R3 = ADDR OF OUR TCB\n         USING TCB,R3\n         L     R3,TCBTIO          R3 = ADDR OF TIOT\n         DROP  R3\n         USING TIOT1,R3\n         MVC   JOBNAME(8),TIOCNJOB SAVE OUR JOBNAME\n         SPACE 3\nINITDONE DS    0H                 CHECK OUT INPUT PARM\n         TM    0(R10),X'80'       IS FIRST THE ONLY PARM?\n         BO    ONEPARM            YES; ONLY PARM\n         TM    4(R10),X'80'       IS SECOND THE LAST PARM?\n         BO    TWOPARMS           YES; TWO PARMS (CALLED WITH CNXX)\n***********************************************************************\n*                                                                     *\n*     A X'80' WAS NOT FOUND IN THE HIGH ORDER BYTE OF THE FIRST       *\n*     TWO PARMS, SO WE CAN ASSUME COMMAND IS BEING CALLED AS A CP.    *\n*     IF THE COMMAND BEING ISSUED IS NOT A JES COMMAND THEN           *\n*     PLACE OUR ASID INTO THE R0 MASK AND CONTINUE. IF IT IS A        *\n*     JES COMMAND, SIMPLY ISSUE THE COMMAND (MODE 1).                 *\n*                                                                     *\n***********************************************************************\n         XR    R2,R2              CLEAR R2\n         LH    R2,ASID            R2 = ASID OF CALLER\n         O     R2,=XL4'00008000'  TELL SVC34 ITS AN ASID\n         ST    R2,R0MASK          AND OVERRIDE THE R0 MASK\n         L     R3,0(R10)          R3 = ADDR OF INPUT LINE\n         LA    R4,4(R3)           R4 = ADDR OF FIRST CHAR OF INPUT\n         AH    R4,2(R3)           R4 = ADDR OF FIRST CHAR PAST COMMAND\n         LH    R2,0(R3)           R2 = TOTAL LENGTH OF STRING\n         SH    R2,2(R3)           R2 = LENGTH OF OPER CMD PORTION\n         BCTR  R2,0               R2 = R2 - 1 FOR EX MVC\n         EX    R2,MOVE1           MOVE CMD INTO CARD\n         CLI   CARD,C'$'          IS THIS A JES2 CMD?\n         BNE   DOSVC34            NO;  GO DO IT\n         XC    R0MASK(4),R0MASK   YES; DON'T TRY TO GET BACK REPLY\n         B     DOSVC34\n***********************************************************************\n*                                                                     *\n*     X'80' WAS FOUND IN THE HIGH ORDER BYTE OF THE SECOND PARM,      *\n*     SO WE HAVE BEEN CALLED AS A SUBROUTINE (MODE 3). THE SECOND     *\n*     PARM CONTAINS THE CONSOLE ID WHERE THE COMMAND IS TO 'COME      *\n*     FROM', SO USE THAT FOR THE R0 MASK.                             *\n*                                                                     *\n***********************************************************************\nTWOPARMS L     R3,4(R10)          R3 = ADDR OF R0 MASK FOR SVC34\n         MVC   R0MASK(4),0(R3)    SAVE R0 MASK FOR SVC34\n***********************************************************************\n*                                                                     *\n*     ONLY ONE PARM WAS PASSED, SO WE ARE BEING CALLED IN MODE 1.     *\n*     JUST ISSUE THE COMMAND FROM THE PARM STRING.                    *\n*                                                                     *\n***********************************************************************\nONEPARM  L     R10,0(R10)         GET PARAMETER ADDRESS\n         LH    R3,0(R10)          GET PARAMETER TEXT LENGTH\n         LTR   R3,R3              IS PARAMETER TEXT PRESENT?\n         BZ    USESYSIN           NO - GO GET COMMANDS FROM SYSIN\n         BCTR  R3,R0              DECREMENT R3 FOR USE IN EXECUTE\n         EX    R3,MOVE            EXECUTE MVC\nDOSVC34  LA    R11,EOJ            GET ADDRESS FOR RETURN FROM SVC34\n         B     SVC34              GO ISSUE COMMAND\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*     NO PARM FIELD FOUND, SO LOOK AT SYSIN FOR INPUT                 *\n*                                                                     *\n***********************************************************************\nUSESYSIN OPEN  (SYSIN,INPUT)      OPEN SYSIN\nGETSYSIN GET   SYSIN,CARD         GET A SYSIN RECORD INTO SVC34 LIST\n         MVC   CARD+72(8),CARD+80 BLANK OUT SEQUENCE FIELD IN 73-80\n         CLI   CARD,C'*'          IS THIS A COMMENT?\n         BE    GETSYSIN           YES;GO GET ANOTHER CARD\n         LA    R11,GETSYSIN       GET ADDRESS FOR RETURN FROM SVC34\n         B     SVC34              GO ISSUE COMMAND\n         SPACE 3\nEODSYSIN CLOSE (SYSIN)            CLOSE SYSIN\n         SPACE 3\nEOJ      L     R13,SAVEAREA+4     GET ADDRESS OF CALLER'S SAVEAREA\n         RETURN (14,12),RC=0      RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*     THIS ROUTINE ACTUALLY ISSUES THE SVC 34. IT EITHER RETURNS      *\n*     TO THE SYSIN-READ LOOP OR EOJ DEPENDING ON THE VALUE OF R11     *\n*                                                                     *\n***********************************************************************\nSVC34    MVC   WTOTEXT(100),CARD  MOVE COMMAND TEXT INTO WTO LIST\n         CLI   WTOTEXT,C'R'       IS THIS A LOWER CASE REPLY?\n         BE    REPLY              NO; GO ON\n         CLI   WTOTEXT,C'R'       IS THIS AN UPPER CASE REPLY?\n         BE    REPLY              NO; GO ON\n         CLI   WTOTEXT,X'F0'      START WITH A NUMBER?\n         BL    NOTREPLY           NO; CAN'T BE A REPLY\nREPLY    MVC   WTOTEXT(100),=CL100'REPLY SUPPRESSED BY ''COMMAND'''\nNOTREPLY LA    R3,WTOTEXT+L'WTOTEXT-1 POINT TO END OF TEXT\n         LA    R4,WTOTEXT         POINT TO BEGINNING OF TEXT\n         SPACE\nFINDTEXT DS    0H                 FIND LAST TEXT CHARACTER\n         CR    R3,R4              ALL BLANK?\n         BL    SVC34END           YES - IGNORE IT\n         CLI   0(R3),C' '         BLANK CHARACTER?\n         BNE   GOTTEXT            NO - FOUND END OF TEXT\n         BCT   R3,FINDTEXT        KEEP ON LOOKING\n         SPACE\nGOTTEXT  DS    0H                 BUILD PARAMETER LIST LENGTHS\n         MVC   WTOUSER(8),JOBNAME SAVE JOB NAME IN MESSAGE\n         SR    R3,R4              COMPUTE LENGTH OF\n         LA    R3,5(R3)           TEXT AND LIST PREFIX\n         STH   R3,CMDLIST         SET SVC 34 LIST LENGTH\n         LA    R3,L'WTOID(R3)     ADD WTO ID LENGTH\n         LA    R3,L'WTOUSER(R3)   ADD WTO ID LENGTH\n         STH   R3,WTOLEN          SET WTO LIST LENGTH\n         LA    R0,0\n         LA    R1,1\n         SVC   244\n         MODESET KEY=ZERO         INDICATE KEY=ZERO\n         WTO   MF=(E,WTOLIST)     ECHO COMMAND TO OPERATOR VIA WTO\n         CLI   WTOTEXT,C'S'       IS THIS A LOWER CASE REPLY?\n         BE    STRT               NO; GO ON\n         CLI   WTOTEXT,C'S'       IS THIS A LOWER CASE REPLY?\n         BE    STRT               NO; GO ON\n         CLI WTOTEXT,C'R'\n         B     STRT               NO; GO ON\n         CLI   WTOTEXT,C'S'       IS THIS AN UPPER CASE REPLY?\n         BE    STRT               NO; GO ON\n         L     R0,R0MASK          LOAD R0 FOR SVC34 (PROBABLY ZERO)\n         B     DOIT1\nSTRT     LA    R0,1               LOAD REG0 WITH CONSOLE ID 1\nDOIT1    LA    R1,CMDLIST         GET ADDRESS OF SVC 34 LIST\n         SVC   34                 ISSUE SVC 34 TO PROCESS COMMAND\n         MODESET KEY=NZERO        GO BACK TO USER KEY\n         SR    R0,R0\n         SR    R1,R1\n         SVC   244\n         SPACE\nSVC34END DS    0H                 END OF COMMAND ROUTINE\n         BR    R11                RETURN TO MAINLINE\n         EJECT\nSAVEAREA DC    18F'0'             OUR SAVEAREA\nR0MASK   DC    A(0)               R0 MASK FOR SVC34\nJOBNAME  DC    CL8' '             OUR JOBNAME\nASID     DC    H'00'              OUR ASID\n         SPACE\nWTOLIST  DS    0F                 WTO LIST\nWTOLEN   DC    AL2(*-*,0)         TEXT LENGTH & MCS FLAGS\nWTOID    DC    C'BIICMD01 - '     TEXT IDENTIFIER\nWTOUSER  DC    C'XXXXXXXX - '     CALLER'S JOBNAME\nWTOTEXT  DC    CL100' '           TEXT PASSED TO COMMAND PROCESSOR\n         SPACE\n         CNOP  4,8                ALIGN TO MIDDLE OF DOUBLE WORD\nCMDLIST  DC    AL2(*-*,0)         SVC 34 LIST\nCARD     DC    CL101' '           COMMAND TEXT\n         SPACE 3\nMOVE     MVC   CARD(*-*),2(R10)   MOVE PARM TEXT INTO SVC 34 LIST\nMOVE1    MVC   CARD(*-*),0(R4)    MOVE PARM TEXT INTO SVC 34 LIST\n         SPACE 3\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,LRECL=80,MACRF=(GM),RECFM=FB,     *\n               EODAD=EODSYSIN\n         SPACE 3\n         LTORG                    BEGIN LITERAL POOL\n         EJECT\n***********************************************************************\n*                                                                     *\n*                SYSTEM CONTROL BLOCK MAPPING DSECTS                  *\n*                                                                     *\n*      ALL THESE MACROS CAN BE FOUND IN THE 'SYS1.AMODGEN' MACLIB     *\n*                                                                     *\n***********************************************************************\n         PRINT NOGEN\n         CVT   DSECT=YES,LIST=YES COMMUNICATIONS VECTOR TABLE\n         SPACE 2\n         DSECT\n         IEFTIOT1                 TASK I/O TABLE\n         SPACE 2\n         IHAASCB                  ADDRESS SPACE CONTROL BLOCK\n         SPACE 2\n         IKJTCB                   TASK CONTROL BLOCK\n         SPACE 2\n         END\n//LINK.SYSLMOD DD  DSN=SYZYGY.LINKLIB(CMD),DISP=SHR\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DATE": {"ttr": 2823, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/ 8\\x00\\x83\\x00\\x83\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T20:38:00", "lines": 131, "newlines": 131, "modlines": 0, "user": "SYZYGY"}, "text": "SHOWDATE TITLE 'ROUTINE TO PUT DATE/TIME ON OPERATOR CONSOLE'           00001\n*                                                                       00002\nR0       EQU   0                                                        00003\nR1       EQU   1                                                        00004\nR2       EQU   2                                                        00005\nR3       EQU   3                                                        00006\nR4       EQU   4                                                        00007\nR5       EQU   5                                                        00008\nR6       EQU   6                                                        00009\nR7       EQU   7                                                        00010\nR8       EQU   8                                                        00011\nR9       EQU   9                                                        00012\nR10      EQU   10                                                       00013\nR11      EQU   11                                                       00014\nR12      EQU   12                                                       00015\nR13      EQU   13                                                       00016\nR14      EQU   14                                                       00017\nR15      EQU   15                                                       00018\n*                                                                       00019\nSHOWDATE SAVE (14,12),,*                                                00020\n         LR    R12,R15                 SETUP BASE REG                   00021\n         USING SHOWDATE,R12                                             00022\n         LA    R15,SAVEAREA            INIT SAVE AREA                   00023\n         ST    R15,8(R13)                                               00024\n         ST    R13,4(R15)                                               00025\n         LR    R13,R15                                                  00026\n         TIME  DEC                                                      00027\n         ST    R1,DATE                 SAVE DATE FOR LATER              00028\n***FORMAT THE PRESENT TIME (AS SET BY THE OPERATOR)                     00029\n         ST    R0,DBLWORK              CNVT PACKED TO DEC               00030\n         MVI   DBLWORK+4,X'0F'                                          00031\n         UNPK  WORKWORD(9),DBLWORK(5)                                   00032\n         MVC   TIMEHRS,WORKWORD        MOVE TIME TO MSG                 00033\n         MVC   TIMMINS,WORKWORD+2                                       00034\n         MVC   TIMSECS,WORKWORD+4                                       00035\n         MVC   TIMHUNS,WORKWORD+6                                       00036\n***FORMAT TODAY'S DATE INTO THE OUTPUT MSG                              00037\n         MVC   WORKWORD(4),DATE        MOVE DATE TO WORK AREA.          00038\n         MVO   WORKWORD+1(3),WORKWORD(2)   MAKE 00YYDDDS INTO 00000YYS. 00039\n         UNPK  CYR(2),WORKWORD+2(2)    FORMAT YEAR.                     00040\n         XC    DBLWORK,DBLWORK                                          00041\n         MVC   DBLWORK+4(4),WORKWORD   CNVT YEAR TO BIN                 00042\n         CVB   R0,DBLWORK                                               00043\n         ST    R0,BINYEAR              AND SAVE                         00044\n         TM    BINYEAR+3,X'03'         LEAP YEAR?                       00045\n         BNZ   MON1                    NO.                              00046\n         MVI   MONMSK+10,29            YES, CORRECT                     00047\nMON1     XC    DBLWORK,DBLWORK         CNVT DAYS TO BIN                 00048\n         MVC   DBLWORK+6(2),DATE+2                                      00049\n         CVB   R7,DBLWORK                                               00050\n         ST    R7,BINDAYS              SAVE FOR LATER                   00051\n         XR    R1,R1                                                    00052\n         LA    R15,11                                                   00053\nMON2     IC    R1,MONMSK(R15)          COMPUTE MON & DAY                00054\n         SR    R7,R1                                                    00055\n         BNP   MONOVR                                                   00056\n         BCT   R15,MON2                                                 00057\n         B     *+6                                                      00058\nMONOVR   AR    R7,R1                   CORRECT OVERDRAW                 00059\n         CVD   R7,DBLWORK              FORMAT DAY                       00060\n         UNPK  CDAYN(2),DBLWORK+6(2)                                    00061\n         OI    CDAYN+1,X'F0'           FIX UP SIGN                      00062\n         MH    R15,=H'3'               GET TABLE OFFSET                 00063\n         LA    R15,MONTAB(R15)         AND POINT AT MONTH               00064\n         MVC   CMON(3),0(R15)          MOVE IT TO THE MSG               00065\n***DAY OF WEEK                                                          00066\n         L     R15,BINYEAR                                              00067\n         SH    R15,=H'69'                                               00068\n         BNP   OUTT                    MUST BE GREATER OR BAD           00069\n         XR    R14,R14                 CLEAR DAY REG                    00070\n         D     R14,=F'4'                                                00071\n         MH    R15,=H'5'                                                00072\n         AR    R14,R15                                                  00073\n         A     R14,BINDAYS                                              00074\n         SRDA  R14,32                                                   00075\n         D     R14,=F'7'               MODULO 7 FOR WEEK                00076\n         MH    R14,=H'3'                                                00077\n         LA    R14,DAYTAB(R14)         POINT AT TODAY                   00078\n         MVC   CDAY(3),0(R14)          INSERT IN MSG                    00079\n***                                                                     00080\nOUTT     MVC   M1DATE(LEN),TIMEHRS     COPY TIME & DATE TO USER'S AREA  00081\n         MVC   M1JDATE,=X'4020204B202020'                               00082\n         ED    M1JDATE,DATE+1                                           00083\n*                                                                       00084\nDOWTO    WTO   MF=(E,MSGBLNK)\n         WTO   MF=(E,MSGBLNK)\n         WTO   MF=(E,MSGBLNK)\n         WTO   MF=(E,MSGBLNK)\n         WTO   MF=(E,MSG0)\n         WTO   MF=(E,MSGBLNK)\n         WTO   MF=(E,MSG1)                                              00085\n         WTO   MF=(E,MSGBLNK)\n         WTO   MF=(E,MSG0)\n         WTO   MF=(E,MSGBLNK)\n         WTO   MF=(E,MSGBLNK)\n         WTO   MF=(E,MSGBLNK)\n         WTO   MF=(E,MSGBLNK)\n         L     R13,4(R13)              RESTORE REGS & RETURN            00086\n         RETURN (14,12),T,RC=0                                          00087\n EJECT                                                                  00088\nDBLWORK  DC    D'0'                                                     00089\nSAVEAREA DC    18F'0'                                                   00090\nBINYEAR  DC    F'0'                                                     00091\nBINDAYS  DC    F'0'                                                     00092\nDATE     DC    F'0'                                                     00093\nWORKWORD DC    2F'0'                                                    00094\n         LTORG                                                          00095\nMONMSK   DC    AL1(31,30,31,30,31,31,30,31,30,31,28,31)                 00096\nTIMEHRS  DC    CL2' ',C'.'                                              00097\nTIMMINS  DC    CL2' ',C'.'                                              00098\nTIMSECS  DC    CL2' ',C'.'                                              00099\nTIMHUNS  DC    CL2' ',C' '                                              00100\nCDAY     DC    CL3' ',C' '                                              00101\nCMON     DC    CL3' ',C' '                                              00102\nCDAYN    DC    CL2' ',C',20'                                            00103\nCYR      DC    CL2'  ',C' '                                             00104\nLEN      EQU   *-TIMEHRS                                                00105\nDAYTAB   DC    C'TUEWEDTHRFRISATSUNMON'                                 00106\nMONTAB   DC    C'DECNOVOCTSEPAUGJULJUNMAYAPRMARFEBJAN'                  00107\nMSGBLNK  WTO   '*                                                      X00108\n                                   ',ROUTCDE=(11,13),MF=L               00109\nMSG0     WTO   'BII428 *************** DATE ***************            X00108\n                                   ',ROUTCDE=(11,13),MF=L               00109\nMSG1     WTO   'BII429 YY.DDD  HH.MM.SS.TH DAY MON DD,19XX             X00108\n                                   ',ROUTCDE=(11,13),MF=L               00109\n         ORG   MSG1+10                                                  00110\nM1JDATE  DS    CL7                                                      00111\n         ORG   MSG1+19                                                  00112\nM1DATE   DS    CL28                                                     00113\n         ORG                                                            00114\n         END                                                            00115\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DATE$": {"ttr": 2826, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/ 9\\x00%\\x00%\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T20:39:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "SYZYGY"}, "text": "//ZDATE    JOB (IS,OTS,M00,000,64),'SYSTEMS***BRIAN',\n//      CLASS=A,MSGCLASS=A,NOTIFY=SYZYGY  TYPRUN=SCAN\n//ASMFCL PROC  CLASS=A,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='SYZYGY.PDS.DATA',\n//             LOAD='SYZYGY.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             DIR=1,              NUMBER OF DIRECTORY BLOCKS\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='OBJECT,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD,DISP=SHR,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.,&DIR.))\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=DATE\n//LKED.SYSIN   DD   *\n   NAME DATE(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCPU$": {"ttr": 2828, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x02\\x06O\\x01\\x02\\x06O A\\x00%\\x00%\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2002-03-05T00:00:00", "modifydate": "2002-03-05T20:41:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "SYZYGY1"}, "text": "//ZDCPU    JOB (IS,OTS,M00,000,64),'SYSTEMS***BRIAN',\n//      CLASS=A,MSGCLASS=A,NOTIFY=SYZYGY1 TYPRUN=SCAN\n//ASMFCL PROC  CLASS=A,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='SYZYGY.TESTED.MODS',\n//             LOAD='SYZYGY.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             DIR=1,              NUMBER OF DIRECTORY BLOCKS\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='OBJECT,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD,DISP=SHR,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.,&DIR.))\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=DCPU\n//LKED.SYSIN   DD   *\n   NAME DCPU(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DEBE": {"ttr": 2830, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/!X\\x06H\\x06H\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T21:58:00", "lines": 1608, "newlines": 1608, "modlines": 0, "user": "SYZYGY"}, "text": "*          DATA SET CBT380     AT LEVEL 001 AS OF 06/14/79\n         MACRO                                                          00001\n&NAME    DEBCHK &CBAD,&TYPE=,&AM=,&MF=O                                 00002\n.*                                                                      00003\n.*                       *****************                              00004\n.*                       *   VARIABLES   *                              00005\n.*                       *  DECLARATION  *                              00006\n.*                       *****************                              00007\n.*                                                                      00008\n         LCLB  &AM0,&AM1,&AM2,&AM3,&AM4,&AM5,&AM6,&AM7                  00009\n         LCLB  &TYPEA,&TYPED,&TYPEV,&TYPEP,&ERR                         00010\n         LCLC  &REG,&LABEL,&AMFC,&AMSC                                  00011\n         LCLA  &A                                                       00012\n.*                                                                      00013\n.*                       **********                                     00014\n.*                       * VERIFY *                                     00015\n.*                       *  INPUT *                                     00016\n.*                       **********                                     00017\n.*                                                                      00018\n         AIF   ('&MF' EQ 'O').DBCK020   BRANCH IF &MF OMITTED           00019\n         AIF   ('&MF' EQ 'L').DBCK040   BRANCH IF &MF=L                 00020\n         IHBERMAC 1001,MF,&MF                                           00021\n&ERR     SETB  1                                                        00022\n.*                                                                      00023\n.*                       TEST &CBAD                                     00024\n.*                                                                      00025\n.DBCK020 AIF   (T'&CBAD NE 'O').DBCK040 BRANCH IF &CBAD SPECIFIED       00026\n&ERR     SETB  1                        SET ERROR INDICATOR             00027\n         IHBERMAC  2                                                    00028\n.*                                                                      00029\n.*                       ESTABLISH AND TEST &AM VALUE                   00030\n.*                                                                      00031\n.DBCK040 AIF   (T'&AM NE 'O').DBCK060   BRANCH IF &AM SPECIFIED         00032\n         AIF   ('&MF' NE 'L').DBCK120   BRANCH IF NOT LIST FORM         00033\n         IHBERMAC 1006,AM                                               00034\n&ERR     SETB  1                                                        00035\n         AGO   .DBCK140                                                 00036\n.DBCK060 ANOP                                                           00037\n&AMFC    SETC  '&AM'(1,1)               FIRST CHARACTER OF &AM          00038\n         AIF   ('&AMFC' NE '(').DBCK080 BRANCH IF &AM TO BE CALCULATED  00039\n         AIF   ('&MF' EQ 'L').DBCK100   BRANCH IF LIST FORM             00040\n         AGO   .DBCK120                 &AM IS VALID                    00041\n.DBCK080 ANOP                                                           00042\n&AM0     SETB  ('&AM' EQ 'ISAM')                                        00043\n&AM1     SETB  ('&AM' EQ 'BDAM')                                        00044\n&AM2     SETB  ('&AM' EQ 'SAM' OR '&AM' EQ 'BPAM')                      00045\n&AM3     SETB  ('&AM' EQ 'TAM')                                         00046\n&AM4     SETB  ('&AM' EQ 'GAM')                                         00047\n&AM5     SETB  ('&AM' EQ 'TCAM')                                        00048\n&AM6     SETB  ('&AM' EQ 'EXCP')                                        00049\n&AM7     SETB  0                                                        00050\n         AIF   (&AM0 OR &AM1 OR &AM2 OR &AM3 OR &AM4 OR &AM5 OR &AM6   X00051\n               OR &AM7).DBCK120         BRANCH IF &AM VALID             00052\n.DBCK100 ANOP                                                           00053\n&ERR     SETB  1                        SET ERROR INDICATOR             00054\n         IHBERMAC 1001,AM,&AM                                           00055\n.*                                                                      00056\n.*                       ESTABLISH AND TEST &TYPE VALUE                 00057\n.*                                                                      00058\n.DBCK120 AIF   ('&MF' EQ 'L').DBCK140   BRANCH IF LIST FORM             00059\n&TYPEA   SETB  ('&TYPE' EQ 'ADD')                                       00060\n&TYPED   SETB  ('&TYPE' EQ 'DELETE')                                    00061\n&TYPEP   SETB  ('&TYPE' EQ 'PURGE')                                     00062\n.*                                      VERIFY IS DEFAULT TYPE          00063\n&TYPEV   SETB  ('&TYPE' EQ 'VERIFY' OR T'&TYPE EQ 'O')                  00064\n.*                                      BRANCH IF NO ERROR              00065\n         AIF   (&TYPEA OR &TYPED OR &TYPEV OR &TYPEP).DBCK140           00066\n         IHBERMAC 1001,TYPE,&TYPE                                       00067\n         AGO   .DBCK160                 EXIT BECAUSE OF ERROR           00068\n.DBCK140 AIF   (NOT &ERR).DBCK220       BRANCH IF NO SYNTAX ERRORS      00069\n.*                                      GENERATE NAME IF NO CODE GENNED 00070\n.*                                                                      00071\n.*                       ERROR EXIT                                     00072\n.*                                                                      00073\n.DBCK160 AIF   ('&NAME' EQ '').DBCK200  DON'T GENERATE NAME IF NULL     00074\n         AIF   ('&MF' NE 'L').DBCK180   BRANCH IF NOT LIST FORM         00075\n&NAME    DS    0C                                                       00076\n         MEXIT                                                          00077\n.DBCK180 ANOP                                                           00078\n&NAME    DS    0H                                                       00079\n.DBCK200 MEXIT                                                          00080\n.*                                                                      00081\n.*                       ************                                   00082\n.*                       * GENERATE *                                   00083\n.*                       *   CODE   *                                   00084\n.*                       ************                                   00085\n.*                                                                      00086\n.DBCK220 ANOP                                                           00087\n&LABEL   SETC  '&NAME'                  SET LABEL FOR FIRST GENERATED   00088\n         AIF   ('&MF' EQ 'L').DBCK340   BRANCH IF LIST FORM             00089\n.*                                      LINE OF CODE                    00090\n.*                                                                      00091\n.*                       FUNCTION TYPE VALUE                            00092\n.*                                                                      00093\n.*                         VERIFY       0                               00094\n.*                         ADD          1                               00095\n.*                         DELETE       2                               00096\n.*                         PURGE        3                               00097\n.*                                                                      00098\n         AIF   (&TYPEV).DBCK240         BRANCH IF VERIFY                00099\n&A       SETA  &TYPEA*1+&TYPED*2+&TYPEP*3 SET AM TYPE                   00100\n&LABEL   LA    0,&A                     LOAD TYPE VALUE                 00101\n&LABEL   SETC  ''                       LABEL NOT TO BE GENERATED AGAIN 00102\n.DBCK240 AIF   (T'&AM NE 'O').DBCK260   BRANCH IF &AM SPECIFIED         00103\n         AIF   (NOT &TYPEV).DBCK420     BRANCH IF ADD OR DELETE TYPE    00104\n&LABEL   SR    0,0                      LOAD TYPE AND AM VALUE          00105\n         AGO   .DBCK420                                                 00106\n.*                                                                      00107\n.*                       ACCESS METHOD TYPE VALUE                       00108\n.*                                                                      00109\n.*                          ISAM        80                              00110\n.*                          BDAM        40                              00111\n.*                          SAM/BPAM    20                              00112\n.*                          TAM         10                              00113\n.*                          GAM         08                              00114\n.*                          TCAM        04                              00115\n.*                          EXCP        02                              00116\n.*                          OMITTED     00                              00117\n.*                                                                      00118\n.DBCK260 ANOP                                                           00119\n&REG     SETC  '0'                      INITIALIZE TO REG 0             00120\n         AIF   (&TYPEV).DBCK280         BRANCH IF TYPE IS VERIFY        00121\n&REG     SETC  '15'                     USE REG 15 IF ADD OR DELETE     00122\n.DBCK280 AIF   ('&AMFC' NE '(').DBCK340 BRANCH IF &AM TO BE CALCULATED  00123\n&AMSC    SETC  '&AM'(2,1)               SECOND CHARACTER OF &AM         00124\n         AIF   ('&AMSC' EQ '(').DBCK320 BRANCH IF &AM A REGISTER        00125\n.*                                                                      00126\n.*                       &AM VALUE TO BE INSERTED FROM AN ADDRESS       00127\n.*                                                                      00128\n         AIF   (NOT &TYPEV).DBCK300     BRANCH IF NOT VERIFY            00129\n&LABEL   SR    0,0                      LOAD TYPE VALUE                 00130\n&LABEL   SETC  ''                       LABEL NOT TO BE GENERATED AGAIN 00131\n.DBCK300 ANOP                                                           00132\n&AMFC    SETC  '&AM(1)'                 ADDRESS OF AM VALUE             00133\n&LABEL   ICM   0,8,&AMFC                INSERT AM VALUE IN HI BYTE      00134\n         AGO   .DBCK420                                                 00135\n.*                                                                      00136\n.*                       &AM VALUE IN A REGISTER                        00137\n.*                                                                      00138\n.DBCK320 ANOP                                                           00139\n&A       SETA  K'&AM-4                  LENGTH OF REGISTER              00140\n&AMFC    SETC  '&AM'(3,&A)              REGISTER CONTAINING AM VALUE    00141\n&LABEL   LR    &REG,&AMFC               LOAD AM VALUE                   00142\n         AGO   .DBCK380                 GO TO SHIFT TO HIGH BYTE        00143\n.*                                                                      00144\n.*                       &AM VALUE TO BE CALCULATED                     00145\n.*                                                                      00146\n.DBCK340 ANOP                                                           00147\n&A       SETA  128*&AM0+64*&AM1+32*&AM2+16*&AM3+8*&AM4+4*&AM5+2*&AM6    00148\n         AIF   ('&MF' NE 'L').DBCK360   BRANCH IF NOT LIST FORM         00149\n&NAME    DC    AL1(&A)                                                  00150\n         MEXIT                                                          00151\n.DBCK360 ANOP                                                           00152\n&LABEL   LA    &REG,&A                  LOAD AM VALUE                   00153\n.DBCK380 SLL   &REG,24                  SHIFT TO HIGH ORDER BYTE        00154\n.DBCK400 AIF   (&TYPEV).DBCK420                                         00155\n         OR    0,15                     OR AM TYPE INTO REGISTER 0      00156\n.*                                                                      00157\n.*                       LOAD CB ADDRESS AND SVC ROUTING ID             00158\n.*                                                                      00159\n.DBCK420 IHBINNRA &CBAD                 LOAD CBAD INTO REGISTER 1       00160\n         LA    15,2                     DEBCHK SVC ID                   00161\n         SVC   117                                                      00162\n         MEND                                                           00163\n*          DATA SET CBT380T    AT LEVEL 001 AS OF 06/09/77              00164\nDEBE     TITLE 'OPERATING SYSTEM/360 MULTIFUNCTION UTILITY - VERSION 2' 00165\nOSDEBE   START 0                                                        00166\n*********************************************************************** 00167\n*                                                                       00168\n*  THE PURPOSE OF OSDEBE IS TO PROVIDE THE USER OF 360 OPERATING        00169\n*  SYSTEM THE FLEXIBILITY OF THE ORIGINAL DEBE.  FLEXIBILITY CAN        00170\n*  ONLY BE OBTAINED BY THE ELIMINATION OF DD CARDS.  ALL FUNCTIONS      00171\n*  WHICH ARE AVAILABLE WITH BPS DEBE ARE PROVIDED IN OSDEBE.            00172\n*  IN ADDITION, MANY NEW FEATURES HAVE BEEN ADDED; FOR A COMPLETE       00173\n*  DESCRIPTION, SEE THE OSDEBE PROGRAM MANUAL.                          00174\n*                                                                       00175\n*********************************************************************** 00176\n*                                                                       00177\n*  CORE REQUIREMENTS - ABOUT 16K (K=1024), 8K OF WHICH IS USED          00178\n*  AS AN I/O AREA FOR TAPE OPERATIONS.                                  00179\n*                                                                       00180\n*  ERROR RECOVERY - THE OPERATING SYSTEM PERFORMS ALL STANDARD          00181\n*  ERROR RECOVERY.  IF IT CANNOT RECOVER FROM AN ERROR, OSDEBE          00182\n*  WILL NOT EVEN TRY.                                                   00183\n*                                                                       00184\n*  ALL REPLIES TO OSDEBE ARE OF THE WTOR FORMAT,                        00185\n*          REPLY 00,'TP'                                                00186\n*  WHENEVER ANY INFORMATION IS REQUESTED BY OSDEBE, A REPLY OF          00187\n*  'EJ' WILL TERMINATE THE SUBROUTINE OF OSDEBE.  A REPLY OF 'EJ'       00188\n*  IN RESPONSE TO THE REQUEST FOR THE PROGRAM ID WILL TERMINATE         00189\n*  OSDEBE AND CONTROL IS RETURNED TO THE OPERATING SYSTEM.              00190\n*                                                                       00191\n*  ONCE A ROUTINE IS RUNNING IN OSDEBE, IT CAN ONLY BE TERMINATED       00192\n*  BY CANCELLING THE JOB, AND THE JOB MUST BE RESCHEDULED AGAIN.        00193\n*  AN ALTERNATIVE TO CANCELLING THE JOB IS TO CAUSE AN I/O ERROR        00194\n*  ON ONE OF THE UNITS BEING USED.  AN I/O ERROR WILL CAUSE THE         00195\n*  SUBROUTINE OF OSDEBE TO TERMINATE, BUT OSDEBE WILL STILL BE          00196\n*  IN CONTROL.                                                          00197\n*                                                                       00198\n*********************************************************************** 00199\n         EJECT                                                          00200\n*                                                                       00201\n*  INITIALIZATION                                                       00202\n*                                                                       00203\n         USING  OSDEBE,15                                               00204\n         B     AROUND                                                   00205\n         DC    C'OSDEBE-REVISED: CONTACT SYSTEMS PROGRAMMING '          00206\n         DC    C'IF ANY PROBLEMS.'                                      00207\nK4096    DC    F'4096'                                                  00208\nAROUND   DS    0H                                                       00209\n         SAVE  (14,12)                                                  00210\nBEGIN    BALR  12,0                                                     00211\n         USING *,12,9                                                   00212\n         LR    9,12                                                     00213\n         A     9,K4096                                                  00214\nBEGIN1   EQU   *                                                        00215\n         LA    14,SAVEAREA                                              00216\n         ST    13,SAVEAREA+4                                            00217\n         ST    14,8(0,13)                                               00218\n         LR    13,14                                                    00219\n         MODESET KEY=ZERO,MODE=SUP     GET INTO SUP STATE        DAL    00220\n         GETMAIN R,LV=564,SP=252                                        00221\n         LR    8,1                                                      00222\n         LA    3,TDAREA                                                 00223\n         LA    3,80(3)  GET ADDRESS OF WORKAREA SKELETONS               00224\n         MVC   0(232,8),0(3)                                            00225\n         MVC   232(232,8),232(3)                                        00226\n         USING WORKAREA,8                                               00227\n         LA    3,INDEB                                                  00228\n         ST    3,AET1                                                   00229\n         LA    3,APPEND                                                 00230\n         ST    3,AET2                                                   00231\n         ST    3,AET3                                                   00232\n         ST    3,AET4                                                   00233\n         ST    3,AET5                                                   00234\n         ST    3,AET6                                                   00235\n         ST    3,AET14                                                  00236\n         ST    3,AET15                                                  00237\n         ST    3,AET16                                                  00238\n         ST    3,AET17                                                  00239\n         ST    3,AET18                                                  00240\n         LA    3,OUTDEB                                                 00241\n         ST    3,AET7-1                                                 00242\n         MVI   AET7-1,X'04'                                             00243\n         ST    3,AET13                                                  00244\n         LA    3,INDCB                                                  00245\n         ST    3,AET8-1                                                 00246\n         MVI   AET8-1,X'0F'                                             00247\n         ST    3,AET12                                                  00248\n         LA    3,INIOVEC                                                00249\n         ST    3,AET9-1                                                 00250\n         MVI   AET9-1,X'02'                                             00251\n         LA    3,INECB                                                  00252\n         ST    3,AET10-1                                                00253\n         MVI   AET10-1,X'7F'                                            00254\n         LA    3,INCCW                                                  00255\n         ST    3,AET11                                                  00256\n         LA    3,OUTDCB                                                 00257\n         ST    3,AET19-1                                                00258\n         MVI   AET19-1,X'0F'                                            00259\n         ST    3,AET23                                                  00260\n         LA    3,OUTIOVEC                                               00261\n         ST    3,AET20-1                                                00262\n         MVI   AET20-1,X'02'                                            00263\n         LA    3,OUTECB                                                 00264\n         ST    3,AET21-1                                                00265\n         MVI   AET21-1,X'7F'                                            00266\n         LA    3,OUTCCW                                                 00267\n         ST    3,AET22                                                  00268\n         SPACE 5                                                        00269\n*  GET CVT POINTER                                                      00270\n         L     3,16                                                     00271\n*  GET POINTER TO THE TCB POINTERS                                      00272\n         L     2,0(0,3)                                                 00273\n*  GET TCB POINTER                                                      00274\n         L     3,4(0,2)                                                 00275\n*  GET PROTECT KEY FROM TCB FOR THE DEB'S                               00276\n         OC    INDEB+24(1),28(3)                                        00277\n         OC    OUTDEB+24(1),28(3)                                       00278\n*  GET TCB ADDRESS FOR THE DEB'S                                        00279\n         ST    3,INDEB                                                  00280\n         ST    3,OUTDEB                                                 00281\n         L     11,8(,3)                ADDR OF TCB DEB QUEUE     DAL    00282\n         LA    11,0(,11)               CLR HIGH BYTE NATCH       DAL    00283\n         LTR   11,11                   NO DEBS ON QUEUE                 00284\n         BNZ   CHKDEBAD                NO CHK DEBS FOR NEXT      DAL    00285\n         IC    15,8(,3)                SAVE BYTE                 DAL    00286\n         LA    1,INDEB                 ADR OF OUR FIRST DEB      DAL    00287\n         ST    1,8(,3)                 STORE IT IN TCB           -AL    00288\n         STC   15,8(,3)                RESTORE BYTE                     00289\n         B     DEBCHK                  GO DO DEBCHK MACRO        DAL    00290\nCHKDEBAD L     15,4(,11)               ADDR NEXT DEB                    00291\n         LA    15,0(,15)               CLR HIGH                         00292\n         LTR   15,15                   END OF CHAIN              DAL    00293\n         BZ    STOREDEB                YES STORE DEB ADDR IN DEB DAL    00294\n         LR    11,15                   NO CHK NEXT DEB                  00295\n         B     CHKDEBAD                                                 00296\nSTOREDEB LA    1,INDEB                 ADDR OUR DEB                     00297\n         IC    15,4(,11)               SAVE BYTE                 DAL    00298\n         ST    1,4(,11)                STORE INTO PREV LAST DEB  DAL    00299\n         STC   15,4(,11)               RETURN BYTE TO WHENCE T   DAL    00300\nDEBCHK   EQU   *                                                        00301\n         LA    11,OUTDCB               GET DCB ADDR              DAL    00302\n         DEBCHK (11),TYPE=ADD          PUT DEB ON DEB TABLE      DAL    00303\n         LA    11,INDCB                GET DCB ADDR              DAL    00304\n         DEBCHK (11),TYPE=ADD          PUT DEB ON DEB TABLE      DAL    00305\n     SPACE 2                                                            00306\n*   GET SUBPOOL WORK AREA FOR TAPE I/O OPERATIONS                       00307\n     SPACE 2                                                            00308\n         GETMAIN  R,LV=32768,SP=0                                       00309\n         ST    1,TAPEAREA        STORE ADDRESS OF TAPE WORK I/O AREA    00310\n     SPACE 2                                                            00311\n*  STORE THE ADDRESS IN THE TWO   TAPE CCW'S                            00312\n     SPACE 2                                                            00313\n         MVC   TDINCCW+1(3),TAPEAREA+1                                  00314\n         MVC   TTCCWOUT+1(3),TAPEAREA+1                                 00315\n         EJECT                                                          00316\n*                                                                       00317\n*  MAIN PROGRAM                                                         00318\n*  ALL ROUTINES RETURN HERE WHEN THEY ARE FINISHED.                     00319\n*                                                                       00320\nASKAGN   EQU   *                                                        00321\n         NI    INIOB,X'3F'         TURN OFF CHAIN FLAGS IN IOB'S        00322\n         NI    OUTIOB,X'3F'                                             00323\n         SPACE 2                                                        00324\n         NI    TD3+1,X'0F'   RESET SWITCHES SET IN TP ROUTINE           00325\n         NI    TD6+1,X'0F'                                              00326\n         SPACE 3                                                        00327\n         WTOR  'DEBE: ENT PROG ID - XX',ID,2,REPLYECB                   00328\n         BAL   11,WAITANS    GO WAIT FOR A REPLY                        00329\n         OC    ID(2),BLANKS                                             00330\n         CLC   ID(2),=C'EJ'  IS SHE DONE? - EOJ                         00331\n         BE    EOJ           YES, RETURN TO THE OPERATING SYSTEM        00332\n         CLC   ID(2),=C'BF'  BACKSPACE A FILE                           00333\n         BE    BF                                                       00334\n         CLC   ID(2),=C'BS'  BACKSPACE A NUMBER OF RECORDS              00335\n         BE    BS                                                       00336\n         CLC   ID(2),=C'BT'  BLOCK CARD IMAGE ON TAPE                   00337\n         BE    BT                                                       00338\n         CLC   ID(2),=C'CC'  CARD TO CARD                               00339\n         BE    CC                                                       00340\n         CLC   ID(2),=C'CP'  CARD TO PRINTER                            00341\n         BE    CP                                                       00342\n         CLC   ID(2),=C'CT'  CARD TO TAPE                               00343\n         BE    CT                                                       00344\n         CLC   ID(2),=C'DP'  LIST TAPE TO PRINTER                       00345\n         BE    DP                                                       00346\n         CLC   ID(2),=C'HD'  TAPE LABEL ONTO SYSTEM CONSOLE             00347\n         BE    HD                                                       00348\n         CLC   ID(2),=C'KC'  COUNT CARDS                                00349\n         BE    KC                                                       00350\n         CLC   ID(2),=C'KR'  COUNT RECORDS                              00351\n         BE    KR                                                       00352\n         CLC   ID(2),=C'OX'  BAD                                        00353\n         BE    BADID                                                    00354\n         CLC   ID(2),=C'RU'  REWIND AND UNLOAD                          00355\n         BE    RU                                                       00356\n         CLC   ID(2),=C'RW'  REWIND                                     00357\n         BE    RW                                                       00358\n         CLC   ID(2),=C'SF'  SPACE FORWARD FILE                         00359\n         BE    SF                                                       00360\n         CLC   ID(2),=C'SR'  SKIP # OF RECORDS FORWARD                  00361\n         BE    SR                                                       00362\n         CLC   ID(2),=C'TC'  TAPE TO CARD                               00363\n         BE    TC                                                       00364\n         CLC   ID(2),=C'TD'  TAPE TO PRINT HEX                          00365\n         BE    TD                                                       00366\n         CLC   ID(2),=C'TM'  WRITE TAPE MARK                            00367\n         BE    TM                                                       00368\n         CLC   ID(2),=C'TP'  TAPE TO PRINT HEX                          00369\n         BE    TP                                                       00370\n         CLC   ID(2),=C'TT'  TAPE TO TAPE                               00371\n         BE    TT                                                       00372\n         CLC   ID(2),=C'WT'  WRITE TO TAPE MARK                         00373\n         BE    WT                                                       00374\n         CLC   ID(2),=C'WL'  WRITE A LABEL                              00375\n         BE    WL                                            *BW 7/76*  00376\n*        CLC   ID(2),=C'XP'                                             00377\n*        BE    BADID                                                    00378\n*        CLC   ID(2),=C'XR'                                             00379\n*        BE    BADID                                                    00380\n*        CLC   ID(2),=C'XS'                                             00381\n*        BE    BADID                                                    00382\n*        CLC   ID(2),=C'XA'                                             00383\n*        BE    BADID                                                    00384\n*        CLC   ID(2),=C'XB'                                             00385\n*        BE    BADID                                                    00386\nBADID    WTO   'DEBE: BAD ID - TRY AGAIN'                               00387\n         B     ASKAGN                                                   00388\n         SPACE 3                                                        00389\nEOJ      EQU   *                                                        00390\n         LA    11,INDCB                DCB ADDR                  DAL    00391\n         DEBCHK (11),TYPE=DELETE       DELETE DEB FROM DEB TABLE DAL    00392\n         LA    11,OUTDCB               DCB ADDR                  DAL    00393\n         DEBCHK (11),TYPE=DELETE       DELETE DEB FROM DEB TABLE DAL    00394\n         L     1,16          CVT                                        00395\n         L     1,0(,1)       TCB QUEUE                                  00396\n         L     1,4(,1)       TCB ADDR                                   00397\n         L     10,8(,1)      DEB QUEUE                                  00398\n         LA    10,0(,10)     CLEAR HIGH BYTE                            00399\n         LA    11,INDEB      ADDR OUR DEB ON DEB QUEUE                  00400\n         CR    11,10         OUR DEB FIRST ON QUEUE                     00401\n         BNE   CHKEND        NO CHK NEXT DEB ON QUEUE                   00402\n         L     11,OUTDEB+4   YES GET OUR LAST DEB ON QUEUE              00403\n         LA    11,0(,11)     CLEAR HIGH BYTE                            00404\n         LTR   11,11         IF ZERO OUR DEB ONLY ONES ON QUEUE         00405\n         BZ    STOREZER      YES ZERO OUT TCB DEB Q POINTER             00406\n         MVC   9(3,1),OUTDEB+4   ELSE MOVE SYS DEB ADDR TO TCB          00407\n         B     EOJA                                                     00408\nSTOREZER IC    10,8(,1)      SAVE BYTE OF TCB                           00409\n         ST    11,8(,1)      PUT SYS DEB ADDR IN TCB                    00410\n         STC   10,8(,1)      PUT BACK BYTE                              00411\n         B     EOJA                                                     00412\nCHKEND   L     1,4(,10)      NEXT DEB ON Q                              00413\n         LA    1,0(,1)       CLEAR BYTE                                 00414\n         CR    1,11          OUR DEB YET                                00415\n         BE    CHKDEBND      YES PROCESS                                00416\n         L     10,4(,10)     NO ,GET NEXT DEB ON QUEUE                  00417\n         B     CHKEND        NO LOOK AT NEXT DEB                        00418\nCHKDEBND L     15,OUTDEB+4   ADDR OF OUR LAST DEBS NEXT POINTER         00419\n         LA    15,0(,15)     ZERO OUT BYTE                              00420\n         IC    11,4(,10)     SAVE BYTE                                  00421\n         ST    15,4(,10)     STORE ADDR OF NEXT INTO LAST DEB           00422\n         STC   11,4(,10)     RESTORE BYTE                               00423\nEOJA     EQU   *                                                        00424\n         L     13,4(0,13)                                               00425\n         RETURN (14,12),RC=0                                            00426\n         EJECT                                                          00427\n*                                                                       00428\n*  SUBPROGRAMS CALLED BY ID                                             00429\n*                                                                       00430\n*  BACKSPACE A FILE ON TAPE                                             00431\n         SPACE 1                                                        00432\nBF       EQU   *                                                        00433\n         BAL   10,TPOUTSET   DETERMINE WHICH TAPE UNIT AND SET UP       00434\n         MVC   OUTCCW+8(8),BFCCW   MOVE IN THE BF CCW                   00435\n         B    SFEXCP                                                    00436\n         SPACE 1                                                        00437\n*  FORWARD SPACE A FILE ON TAPE                                         00438\n         SPACE 1                                                        00439\nSF       EQU   *                                                        00440\n         BAL   10,TPOUTSET   DETERMINE WHICH TAPE UNIT AND SET UP       00441\n         MVC   OUTCCW+8(8),SFCCW   MOVE IN SF CCW                       00442\nSFEXCP   EQU   *                                                        00443\n         BAL   11,MULTGET                                               00444\nSFLOOP   EQU   *                                                        00445\n         BAL   11,IOOUT      GO EXECUTE THE CCW                         00446\n         CLI   OUTECB,X'7F'  WAS EVERYTHING OK                          00447\n         BNE   TAPERR                                                   00448\n         BCT   10,SFLOOP          TRY AGAIN                             00449\n         B     ASKAGN             ALL DONE                              00450\nMULTGET  EQU   *                                                        00451\n         ST    11,SV11            SAVE 11                               00452\n         WTOR  'DEBE: NR FILES TO BE PROCESSED - XXXX',                +00453\n               TDAREA,4,REPLYECB                                        00454\n         BAL   11,WAITANS                                               00455\n         OC    TDAREA(4),BLANKS                                         00456\n         CLC   TDAREA(2),=C'EJ'                                         00457\n         BE    ASKAGN             NEW ROUTINE                           00458\n         OI    TDAREA+3,X'F0'                                           00459\n         PACK  TDWK,TDAREA(4)     PACK NUMBER                           00460\n         CVB   10,TDWK            MAKE NUMBER BINARY                    00461\n         L     11,SV11                                                  00462\n         BR    11                 RETURN                                00463\n         EJECT                                                          00464\n*  BACKSPACE NNNN RECORDS ON TAPE                                       00465\n         SPACE 1                                                        00466\nBS       EQU   *                                                        00467\n         SPACE 1                                                        00468\n*  SKIP NNNN RECORDS ON TAPE                                            00469\n         SPACE 1                                                        00470\nSR       EQU   *                                                        00471\n         BAL   10,TPOUTSET   DETERMINE WHICH TAPE UNIT AND SET UP       00472\n         WTOR  'DEBE: NR REC TO BE SKIPPED - XXXX',TDAREA,4,REPLYECB    00473\n         BAL   11,WAITANS    GO WAIT FOR A REPLY                        00474\n         OC    TDAREA(2),BLANKS                                         00475\n         CLC   TDAREA(2),=C'EJ'  END THIS ROUTINE                       00476\n         BE    ASKAGN        YES, EXIT THIS ROUTINE                     00477\n         OI    TDAREA+3,X'F0'      MAKE A GOOD SIGN FOR CVB             00478\n         PACK  TDWK,TDAREA(4)                                           00479\n         CVB   2,TDWK        PUT NUMBER OF REC'S IN REG 2               00480\n         CLC   ID(2),=C'SR'                                             00481\n         BE    SREX                                                     00482\nBSEX     MVC   OUTCCW+8(8),BSCCW   SET UP BS CCW                        00483\nBSAGN    EQU   *                                                        00484\n         BAL   11,IOOUT      EXECUTE THE CCW                            00485\n         CLI   OUTECB,X'7F'  EVERYTHING OK                              00486\n         BE    BCT6          YES, DO AGAIN TILL COUNT = 0               00487\n         B     TAPERR        NO, END THIS ROUTINE                       00488\nBCT6     EQU   *                                                        00489\n         BCT   2,BSAGN       DECREMENT THE COUNT AND DO AGAIN           00490\n         B     ASKAGN        ALL FINISHED WITH THIS ROUTINE             00491\nSREX     MVC   OUTCCW+8(8),SRCCW   SET UP SR CCW                        00492\n         B     BSAGN                                                    00493\n         EJECT                                                          00494\n*  CARD TO CARD REPRODUCE                                               00495\n         SPACE 1                                                        00496\nCC       EQU   *                                                        00497\n         MVI   INMODSTK,X'41'      SET UP READER'S DCB                  00498\n         MVI   INDEVT,X'43'                                             00499\n         MVC   D1(3),READER1       USE STANDARD ADDRESS                 00500\n         BAL   14,UCBLOKUP                                              00501\n         ST    2,INDEBMOD    STORE UCB ADDRESS IN DEB                   00502\n         MVI   OUTMDSTK,X'42'                                           00503\n         MVI   OUTDEVT,X'43'                                            00504\n         MVC   D1(3),PUNCH1        USE STANDARD ADDRESS                 00505\n         BAL   14,UCBLOKUP                                              00506\n         ST    2,OUTDEBMD    STORE UCB ADDRESS IN DEB                   00507\n         MVC   INCCW(8),CP1CCW     SET UP READ CCW                      00508\n         MVC   OUTCCW(8),S2CCW                                          00509\nCCLOOP   EQU   *                                                        00510\n         BAL   11,IOIN       READ A CARD                                00511\n         CLI   INECB,X'7F'         EVERYTHING OK                        00512\n         BE    CC1                 YES, BRANCH                          00513\n         TM    INSTAT+4,X'01'    EOF                                    00514\n         BC    1,PCHDN                                                  00515\n         B     RDRERROR      READER ERROR, END THIS ROUTINE             00516\nCC1      EQU   *                                                        00517\n         BAL   11,IOOUT      PUNCH A CARD                               00518\n         CLI   OUTECB,X'7F'        EVERYTHING OK                        00519\n         BE    CCLOOP        YES, LOOP                                  00520\n*                                                                       00521\nPCHERROR WTO   'DEBE: PUNCH ERROR - EOJ'                                00522\nPCHDN    EQU   *                                                        00523\n         MVC   OUTCCW(8),ROCCW                                          00524\n         LA    11,ASKAGN                                                00525\n         B     IOOUT                                                    00526\n         EJECT                                                          00527\n*  CARD TO PRINTER - 80/80 LIST                                         00528\n         SPACE 1                                                        00529\nCP       EQU   *                                                        00530\n*  SET UP READER'S DCB AND DEB                                          00531\n         MVI   INMODSTK,X'41'                                           00532\n         MVI   INDEVT,X'43'                                             00533\n         MVC   D1(3),READER1       USE STANDARD ADDRESS                 00534\n         BAL   14,UCBLOKUP                                              00535\n         ST    2,INDEBMOD          STORE UCB ADDRESS IN DEB             00536\n         BAL   11,OPENPRNT   OPEN SYSPRINT IF NOT OPEN                  00537\nCP2      EQU   *                                                        00538\n         BAL   11,SKIPTO1    SKIP TO CHANNEL 1                          00539\n*  SET UP READER CCW                                                    00540\nCPGO     MVC   INCCW(8),CP1CCW     SET UP READ CCW                      00541\nCPLOOP   EQU   *                                                        00542\n         BAL   11,IOIN       READ A CARD                                00543\n         CLI   INECB,X'7F'   EVERYTHING OK                              00544\n         BE    CP1           YES, BRANCH                                00545\n         TM    INSTAT+4,X'01'      EOF?                                 00546\n         BC    1,TDEOJ                                                  00547\nRDRERROR WTO   'DEBE: READER ERROR - EOJ'                               00548\n         B     ASKAGN                                                   00549\nCP1      EQU   *                                                        00550\n         MVC   TDOUTAR(80),TDAREA      CLEAR UPPER PRINT LINE AFTER     00551\n         MVC   TDOUTAR+80(52),=CL52' ' MOVING DATA TO PRINT LINE        00552\n         BAL   11,TDPRINT    PRINT A CARD                               00553\n         B     CPLOOP        LOOP                                       00554\n         EJECT                                                          00555\n*  CARD TO TAPE                                                         00556\n         SPACE 1                                                        00557\nCT       EQU   *                                                        00558\n*  SET UP READER'S DCB AND DEB                                          00559\n         MVI   INMODSTK,X'41'                                           00560\n         MVI   INDEVT,X'43'                                             00561\n         MVC   D1(3),READER1       USE STANDARD ADDRESS                 00562\n         BAL   14,UCBLOKUP                                              00563\n         ST    2,INDEBMOD    STORE UCB ADDRESS IN DEB                   00564\n         MVC   INCCW(8),CP1CCW     SET UP READ CCW                      00565\n*  SET UP TAPE'S DCB AND DEB                                            00566\n         BAL   10,TPOUTSET   DETERMINE WHICH TAPE UNIT AND SET UP       00567\n         MVC   OUTCCW+8(8),CTCCW   SET UP WRITE CCW                     00568\n         SR    2,2           CLEAR A COUNTER                            00569\nCTLOOP   EQU   *                                                        00570\n         BAL   11,IOIN       READ A CARD                                00571\n         CLI   INECB,X'7F'         EVERYTHING OK                        00572\n         BE    CT1           YES, BRANCH                                00573\n         TM    INSTAT+4,X'01'      EOF                                  00574\n         BC    1,CTEOJ                                                  00575\n         B     RDRERROR      READER ERROR, END THIS ROUTINE             00576\nCT1      EQU   *                                                        00577\n         LA    2,1(2)        INCREMENT A COUNTER                        00578\n         BAL   11,IOOUT      WRITE TO TAPE                              00579\n         CLI   OUTECB,X'7F'        EVERYTHING OK                        00580\n         BE    CTLOOP        YES, LOOP                                  00581\n         SPACE 1                                                        00582\n*  IF OS CAN'T RECOVER FROM THE ERROR, I SURELY WON'T TRY               00583\n         B     TAPERR                                                   00584\nCTEOJ    EQU   *                                                        00585\n         BAL   11,WTM                                                   00586\n         B     ASKAGN                                                   00587\n         EJECT                                                          00588\n* LIST TAPE (DEBLOCKED) ON PRINTER                                      00589\n         SPACE 1                                                        00590\nDP       EQU   *                                                        00591\n         BAL   11,OPENPRNT        OPEN PRINTER                          00592\n         BAL   11,SKIPTO1         RESTORE CARRIAGE                      00593\n         BAL   10,TAPINSET        GET A TAPE                            00594\n         MVC   INCCW+8(8),TDINCCW                                       00595\n         BAL   11,TDPRINT         PRINT HEADER                          00596\n         BAL   11,SPACE1                                                00597\n         WTOR  'DEBE: ENT LRECL - XXXX',TDAREA,4,REPLYECB               00598\n         BAL   11,WAITANS                                               00599\n         OC    TDAREA(4),BLANKS   SHIFT TO UPPER CASE                   00600\n         CLC   TDAREA(2),=C'EJ'                                         00601\n         BE    ASKAGN                                                   00602\n         OI    TDAREA+3,X'F0'     MAKE A BINARY NUMBER                  00603\n         PACK  TDWK,TDAREA(4)                                           00604\n         CVB   4,TDWK                                                   00605\n         BAL   10,TAPEBLOK                                              00606\nDPLOOP1  EQU   *                                                        00607\n         SR    2,2                                                      00608\n         BAL   11,IOIN            READ A TAPE RECORD                    00609\n         CLI   INECB,X'7F'        OK?                                   00610\n         BE    DP1                                                      00611\n         TM    INSTAT+4,X'01'     EOF?                                  00612\n         BC    1,TDEOJ                                                  00613\n         B     TAPERROR                                                 00614\nDP1      EQU   *                                                        00615\n         LH    10,INSTAT+6        RES COUNT                             00616\n         LH    3,TDINCCW+6        REQUESTED                             00617\n         SR    3,10               GET LENGTH                            00618\nDPLOOP2  EQU   *                                                        00619\n         L     10,TAPEAREA    GET ADDRESS OF SP 0 WORK AREA             00620\n         AR    10,2                                                     00621\n         MVC   TDOUTAR(132),BLANKS                                      00622\n         LR    5,4                                                      00623\n         BCTR  5,0                DECREMENT GR5                         00624\n         EX    5,DPMVC            *MVC TDOUTAR(L),0(10)                 00625\n         BAL   11,TDPRINT         PRINT LINE                            00626\n         AR    2,4                UP POINTER                            00627\n         CR    2,3                DONE?                                 00628\n         BL    DPLOOP2                                                  00629\n         TM    NBRSW,X'FF'                                              00630\n         BO    DPLOOP1                                                  00631\n         BCT   6,DPLOOP1                                                00632\n         B     TDEOJ                                                    00633\nDPMVC    MVC   TDOUTAR(0),0(10)                                         00634\n         EJECT                                                          00635\n* BLOCK CARDIMAGE ON TAPE                                               00636\n         SPACE 1                                                        00637\nBT       EQU   *                                                        00638\n         MVI   INMODSTK,X'41'     PRIME CONTROL BLOCKS                  00639\n         MVI   INDEVT,X'43'                                             00640\n         MVC   D1(3),READER1                                            00641\n         BAL   14,UCBLOKUP                                              00642\n         ST    2,INDEBMOD                                               00643\n         MVC   INCCW(8),CP1CCW                                          00644\n         BAL   10,TPOUTSET        GET OUTPUT TAPE                       00645\n         MVC   OUTCCW+8(8),TTCCWOUT                                     00646\n         WTOR  'DEBE: ENT BLK FACTOR - XXXX',TDAREA,4,REPLYECB          00647\n         BAL   11,WAITANS                                               00648\n         OC    TDAREA(4),BLANKS                                         00649\n         CLC   TDAREA(2),=C'EJ'                                         00650\n         BE    ASKAGN                                                   00651\n         OI    TDAREA+3,X'F0'                                           00652\n         PACK  TDWK,TDAREA(4)                                           00653\n         CVB   2,TDWK             PUT IN GR2                            00654\n         MH    2,=H'80'                                                 00655\nBTLOOP1  EQU   *                                                        00656\n         SR    4,4                                                      00657\n         LA    3,TDAREA                                                 00658\nBTLOOP2  EQU   *                                                        00659\n         ST    3,TDWK                                                   00660\n         MVC   INCCW+1(3),TDWK+1                                        00661\n         BAL   11,IOIN            READ A CARD                           00662\n         CLI   INECB,X'7F'        OPERATION OK?                         00663\n         BE    BT1                                                      00664\n         TM    INSTAT+4,X'01'     EOF?                                  00665\n         BC    1,BTEOJ                                                  00666\n         B     RDRERROR                                                 00667\nBT1      EQU   *                                                        00668\n         LA    3,80(3)            MOVE POINTER                          00669\n         LA    4,80(4)            INCR COUNTER                          00670\n         CR    2,4                                                      00671\n         BNE   BTLOOP2            TRY AGAIN                             00672\n         STH   4,OUTCCW+14        COUNT FIELD                           00673\n         BAL   11,IOOUT           WRITE TAPE                            00674\n         CLI   OUTECB,X'7F'       OK?                                   00675\n         BNE   TAPERR                                                   00676\n         B     BTLOOP1            PRAY WE GET OUT OF THIS LOOP!         00677\nBTEOJ    EQU   *                                                        00678\n         LTR   4,4                                                      00679\n         BZ    CTEOJ                                                    00680\n         STH   4,OUTCCW+14                                              00681\n         BAL   11,IOOUT                                                 00682\n         CLI   OUTECB,X'7F'       OPERATION OK?                         00683\n         BNE   TAPERR                                                   00684\n         B     CTEOJ              WRITE T/M                             00685\n         EJECT                                                          00686\n*  TAPE TO CARD, DEBLOCKING                                             00687\n         SPACE 1                                                        00688\nTC       EQU   *                                                        00689\n         BAL   10,TAPINSET         SET UP TAPE                          00690\n         MVC   INCCW+8(8),TDINCCW  SET UP READ CCW                      00691\n         MVI   OUTDEVT,X'43'                                            00692\n         MVI   OUTMDSTK,X'42'                                           00693\n         MVC   D1(3),PUNCH1                                             00694\n         BAL   14,UCBLOKUP                                              00695\n         ST    2,OUTDEBMD                                               00696\n         MVC   OUTCCW(8),DBCCW     PRIME CCW                            00697\nDBLOOP1  EQU   *                                                        00698\n         SR    2,2                                                      00699\n         BAL   11,IOIN             READ A RECORD                        00700\n         CLI   INECB,X'7F'         OK?                                  00701\n         BE    DB1                 YES, BRANCH                          00702\n         TM    INSTAT+4,X'01'      EOF?                                 00703\n         BC    1,PCHDN                                                  00704\n         B     TAPERROR                                                 00705\nDB1      EQU   *                                                        00706\n         LH    10,INSTAT+6         GET RES CNT                          00707\n         LH    3,TDINCCW+6         GET START CNT                        00708\n         SR    3,10                GET LENGTH                           00709\nDBLOOP2  L     10,TAPEAREA    GET ADDRESS OF SP 0 WORK AREA             00710\n         AR    10,2                                                     00711\n         MVC   TDAREA2(80),0(10)                                        00712\n         BAL   11,IOOUT            PUNCH CARD                           00713\n         CLI   OUTECB,X'7F'        OK?                                  00714\n         BNE   PCHERROR            NO, BRANCH                           00715\n         LA    2,80(2)             MOVE POINTER                         00716\n         CR    2,3                 DONE?                                00717\n         BL    DBLOOP2             NO, GO AGAIN                         00718\n         B     DBLOOP1             NEXT RECORD                          00719\n         EJECT                                                          00720\n*  PRINT A TAPE                                                         00721\n         SPACE 1                                                        00722\nTP       EQU   *                                                        00723\n*  TP USES THE TD ROUTINE WITHOUT THE HEX-TO-CHARACTER CONVERSION       00724\n         OI    TD3+1,X'F0'         SET SWITCHES IN TD                   00725\n         OI    TD6+1,X'F0'                                              00726\n         SPACE 1                                                        00727\n*  PRINT A TAPE IN HEX UNLESS SWITCHES SET BY TP                        00728\n         SPACE 1                                                        00729\nTD       EQU   *                                                        00730\n         BAL   11,OPENPRNT   OPEN SYSPRINT IF NECESSARY                 00731\n         BAL   11,SKIPTO1     SKIP TO CHANNEL 1                         00732\n*  SET UP TAPE'S DCB AND DEB                                            00733\n         BAL   10,TAPINSET         DETERMINE WHICH TAPE UNIT AND SET UP 00734\n         MVC   INCCW+8(8),TDINCCW  SET UP READ CCW                      00735\n         BAL   11,TDPRINT    PRINT THE HEADING LINE                     00736\n         BAL   11,SPACE1      SPACE A LINE                              00737\n         SP    RECCNT(3),RECCNT(3) CLEAR THE RECORD COUNTER             00738\n         BAL   10,TAPEBLOK                                              00739\nTDLOOP   EQU   *                                                        00740\n         BAL   11,IOIN        READ A RECORD                             00741\n         CLI   INECB,X'7F'         EVERYTHING OK                        00742\n         BE    TD1           YES, BRANCH                                00743\n         TM    INSTAT+4,X'01'      EOF                                  00744\n         BC    1,TDEOJ       YES, GO END ROUTINE                        00745\n         SPACE 1                                                        00746\n*  IF OS CAN'T RECOVER FROM THE ERROR, I SURELY WON'T TRY               00747\n         B     TAPERROR                                                 00748\nTD1      LH    2,INSTAT+6          GET RESIDUAL COUNT                   00749\n         LH    3,TDINCCW+6         GET BEGINING COUNT                   00750\n         SR    3,2                 GET BYTES READ IN                    00751\n         CVD   3,TDWK                                                   00752\n         MVI   TDOUTAR,C' '        CLEAR PRINT LINE                     00753\n         MVC   TDOUTAR+1(131),TDOUTAR                                   00754\n         MVC   TDOUTAR+102(23),RECHDG  SET UP LINE INFORMATION          00755\n         ED    TDOUTAR+119(6),TDWK+5                                    00756\n         AP    RECCNT(3),COND1(1)      INCREMENT RECORD COUNTER         00757\n         ED    TDOUTAR+105(6),RECCNT                                    00758\n*     GET READY FOR HEX CONVERSION                                      00759\n         L     2,TAPEAREA   GET ADDRESS OF SP 0 WORKAREA                00760\n         L     5,TAPEAREA   GET ADDRESS OF SP 0 WORKAREA                00761\n         LA    7,100                                                    00762\nTD6      BC    0,TD7         SET TO BRANCH BY TP ROUTINE                00763\n*  R2 POINTS TO THE INPUT AREA                                          00764\n*  R5 POINTS TO THE OUTPUT AREA                                         00765\n         L     5,=A(TDAREA2)                                            00766\n         LA    7,50                                                     00767\n         BAL   14,UNPK       GO CONVERT 50 BYTES TO 100 HEX             00768\nTD7      EQU   *                                                        00769\n         CR    3,7           SHORT LINE TO BE PRINTED                   00770\n         BL    TD3           YES, GO DO THE MOVE                        00771\n         MVC   TDOUTAR(100),0(5)   ELSE DO 100 BYTE MOVE                00772\nTDPR     EQU   *                                                        00773\n         BAL   11,TDPRINT     PRINT A LINE                              00774\n         MVI   TDOUTAR,C' '        CLEAR OUTPUT AREA                    00775\n         MVC   TDOUTAR+1(131),TDOUTAR                                   00776\n         SR    3,7           DECREMENT BLKSIZE                          00777\n         BC    12,TD9         BRANCH IF BLOCK FINISHED                  00778\n         AR    2,7            ELSE, INCREMENT COUNTERS                  00779\n         AR    5,7                                                      00780\n         B     TD6           AND LOOP                                   00781\nTD3      BC    0,TD4         SET TO BRANCH BY TP ROUTINE                00782\n         LR    11,3          GET REMAINDER OF DATA IN 11                00783\n         AR    11,3          DOUBLE IT BECAUSE IT'S UNPACKED            00784\n         BCTR  11,0          DECREMENT ONE FOR THE MOVE                 00785\n         EX    11,MVCOML                                                00786\n         B     TDPR          GO PRINT SHORT LINE                        00787\nTD4      EQU   *                                                        00788\n         BCTR  3,0                                                      00789\n         EX    3,MVCOML                                                 00790\n         B     TDPR           GO PRINT SHORT LINE                       00791\nMVCOML   MVC   TDOUTAR(0),0(5)        COMMON MOVE INSTRUCTION           00792\nUNPK     EQU   *             CONVERT 50 BYTES TO 100 BYTES HEX          00793\n         UNPK  0(15,5),0(8,2)                                           00794\n         UNPK  14(15,5),7(8,2)                                          00795\n         UNPK  28(15,5),14(8,2)                                         00796\n         UNPK  42(15,5),21(8,2)                                         00797\n         UNPK  56(15,5),28(8,2)                                         00798\n         UNPK  70(15,5),35(8,2)                                         00799\n         UNPK  84(15,5),42(8,2)                                         00800\n         UNPK  98(3,5),49(2,2)                                          00801\n         TR    0(100,5),TDPTABLE-240                                    00802\n         BR    14                                                       00803\nTD9      EQU   *                                                        00804\n         BAL   11,SPACE1     SPACE A LINE AFTER WHOLE BLOCKED           00805\n         TM    NBRSW,X'FF'                                              00806\n         BO    TDLOOP                                                   00807\n         BCT   6,TDLOOP                                                 00808\nTDEOJ    EQU   *                                                        00809\n         BAL   11,SKIPTO1                                               00810\n         B     ASKAGN                                                   00811\n         EJECT                                                          00812\n*  TAPE TO TAPE COPY                                                    00813\n         SPACE 1                                                        00814\nTT       EQU   *                                                        00815\n         BAL   10,TPOUTSET    DETERMINE WHICH TAPE UNIT AND SET UP      00816\n         BAL   10,TAPINSET    DETERMINE WHICH TAPE UNIT AND SET UP      00817\n         MVC   INCCW+8(8),TDINCCW  SET UP READ CCW                      00818\n         BAL   10,TAPEBLOK                                              00819\n         BAL   11,MULTGET         GET FACTOR                            00820\nTTLOOP   EQU   *                                                        00821\n         BAL   11,IOIN        READ A BLOCK                              00822\n         CLI   INECB,X'7F'                                              00823\n         BE    TT1           EVERYTHING OK, BRANCH                      00824\n         TM    INSTAT+4,X'01'                                           00825\n         BC    1,TTEST                                                  00826\n         SPACE 1                                                        00827\n*  IF OS CAN'T RECOVER FROM THE ERROR, I SURELY WON'T TRY               00828\nTAPERROR EQU   *                                                        00829\n         WTO   'DEBE: INPUT TAPE ERROR - EOJ'                           00830\n         B     ASKAGN                                                   00831\nTT1      LH    2,INSTAT+6          GET RESIDUAL COUNT                   00832\n         LH    3,TDINCCW+6         GET BEGINNING COUNT                  00833\n         SR    3,2           COMPUTE BYTES READ IN                      00834\n         STH   3,TTCCWOUT+6        SET UP WRITE CCW                     00835\n         MVC   OUTCCW+8(8),TTCCWOUT                                     00836\n         BAL   11,IOOUT      WRITE A BLOCK                              00837\n         CLI   OUTECB,X'7F'        EVERYTHING OK                        00838\n         BNE   TTERR                                                    00839\n         TM    NBRSW,X'FF'                                              00840\n         BO    TTLOOP                                                   00841\n         BCT   6,TTLOOP                                                 00842\n         B     ASKAGN                                                   00843\nTTERR    EQU   *                                                        00844\n         SPACE 1                                                        00845\n*  IF OS CAN'T RECOVER FROM THE ERROR, I SURELY WON'T TRY               00846\nTAPERR   EQU   *                                                        00847\n         WTO   'DEBE: OUTPUT TAPE ERROR - EOJ'                          00848\n         B     ASKAGN                                                   00849\nTTEST    EQU   *                                                        00850\n         LA    11,TTLOOP                                                00851\n         BCT   10,WTM                                                   00852\n         B     CTEOJ                                                    00853\n         EJECT                                                          00854\n*      TYPE TAPE HEADER LABELS ONTO SYSTEM CONSOLE                      00855\nHD       EQU   *                                                        00856\n         BAL   10,TAPINSET   WHICH TAPE UNIT                            00857\n         MVC   INCCW+8(8),TDINCCW                                       00858\n         MVI   HDRCTR,X'1C'         RESET HEADER COUNTER                00859\nHDRLOOP  EQU   *                                                        00860\n         BAL   11,IOIN                                                  00861\n         CLI   INECB,X'7F'                                              00862\n         BE    HDREADOK                                                 00863\n         TM    INSTAT+4,X'01'                                           00864\n         BC    1,HDREOJ                                                 00865\n         B     TAPERROR                                                 00866\nHDREADOK EQU   *                                                        00867\n         L     11,TAPEAREA   GET ADDRESS OF TAPE INPUT AREA             00868\n         MVC   TYPER+8(80),0(11)  MOVE FIRST 80 CHARS TO WTO MESSAGE    00869\nTYPER    WTO   '                                                       X00870\n               TEST LINE                '                               00871\n         AP    HDRCTR(1),HDRCTR+1(1)      ADD ONE TO HEADER COUNTER     00872\n         CP    HDRCTR(1),HDRCTR+2(1)    CHECK FOR END OF LOOP           00873\n         BNH   HDRLOOP                                                  00874\nHDREOJ   B     ASKAGN                                                   00875\nHDRCTR   DC    P'1',P'1',P'3'                                           00876\n         DS    0H                                                       00877\n    SPACE   5                                                           00878\n*OX      EQU   *   TURN OFF THE OFFLINE PROHIBITION        **BW SIK**   00879\n*        NI    OFLNTEST+1,X'0F'  TURN OF BR AT OFFLINE TEST**BW SIK**   00880\n*        B     ASKAGN                                      **BW SIK**   00881\n         SPACE 5                                                        00882\nRU       EQU   *                                                        00883\n         BAL   10,TPOUTSET                                              00884\n         MVC   OUTCCW+8(8),RUCCW                                        00885\n         BAL   11,IOOUT                                                 00886\n         B     ASKAGN                                                   00887\n         SPACE 3                                                        00888\nRW       EQU   *                                                        00889\n         BAL   10,TPOUTSET         DETERMINE WHICH TAPE UNIT AND SET UP 00890\n         MVC   OUTCCW+8(8),RWCCW   SET UP REWIND CCW                    00891\n         BAL   11,IOOUT            EXECUTE THE REWIND                   00892\n         B     ASKAGN                                                   00893\n         SPACE 3                                                        00894\nWT       EQU   *                                                        00895\n         BAL   10,TPOUTSET     DETERMINE WHICH TAPE UNIT AND SET UP     00896\n         B     CTEOJ         GO WRITE A TAPE MARK                       00897\n         SPACE 3                                                        00898\nTM       EQU   *                                                        00899\n         BAL   10,TPOUTSET                                              00900\n         BAL   11,MULTGET                                               00901\nTM1      EQU   *                                                        00902\n         BAL   11,WTM                                                   00903\n         BCT   10,TM1                                                   00904\n         B     ASKAGN                                                   00905\n         SPACE 3                                                        00906\nKR       EQU   *                                                        00907\n         BAL   10,TAPINSET                                              00908\n         MVC   INCCW+8(8),TDINCCW                                       00909\n         B     KNTR                                                     00910\n         SPACE 3                                                        00911\nKC       EQU   *                                                        00912\n         MVI   INMODSTK,X'41'                                           00913\n         MVI   INDEVT,X'43'                                             00914\n         MVC   D1(3),READER1                                            00915\n         BAL   14,UCBLOKUP                                              00916\n         ST    2,INDEBMOD                                               00917\n         MVC   INCCW(8),CP1CCW                                          00918\n         B     KNTR                                                     00919\nWL       EQU   *              WRITE A TAPE LABEL            *BW 7/76*   00920\n         BAL   10,TPOUTSET    REQUEST OUTPUT TAPE           *BW 7/76*   00921\n         MVC   OUTCCW+8(8),RWCCW  MOVE IN REWIND CCW        *BW 7/76*   00922\n         OI    OUTCCW+12,X'60'    SET CMD CHAIN & SLI FLAG  *BW 7/76*   00923\n         MVC   OUTCCW+16(8),=X'0300000020000001' NO-OP      *BW 7/76*   00924\n         BAL   11,IOOUT       GO DO REWIND                  *BW 7/76*   00925\n         SPACE 1                                            *BW 7/76*   00926\n*   WRITE VOL TAPE LABEL                                    *BW 7/76*   00927\n         SPACE 1                                            *BW 7/76*   00928\n         MVI   TDAREA,X'40'   CLEAR I/O AREA                *BW 7/76*   00929\n         MVC   TDAREA+1(79),TDAREA                          *BW 7/76*   00930\n         WTOR  'DEBE: REPLY VOLID - XXXXXX',TDAREA+4,6,     *BW 7/76*  X00931\n               REPLYECB                                     *BW 7/76*   00932\n         BAL   11,WAITANS                                   *BW 7/76*   00933\n         WTOR  'DEBE: REPLY OWNER ID - CCCCCCCCC',          *BW 7/76*  X00934\n               TDAREA+41,10,REPLYECB                        *BW 7/76*   00935\n         BAL   11,WAITANS                                   *BW 7/76*   00936\n         MVC   TDAREA(4),=C'VOL1'                           *BW 7/76*   00937\n         MVI   TDAREA+10,X'F0'  NO SECURITY FLAG            *BW 7/76*   00938\n         MVC   OUTCCW+8(8),CTCCW  MOVE IN WRITE CCW         *BW 7/76*   00939\n         BAL   11,IOOUT                                     *BW 7/76*   00940\n         SPACE 1                                            *BW 7/76*   00941\n*   WRITE DUMMY HEADER LABEL                                *BW 7/76*   00942\n         SPACE 1                                            *BW 7/76*   00943\n         MVC   TDAREA(3),=C'HDR'                            *BW 7/76*   00944\n         MVI   TDAREA+4,X'F0' ZERO OUT REST OF LABEL        *BW 7/76*   00945\n         MVC   TDAREA+5(75),TDAREA+4                        *BW 7/76*   00946\n         BAL   11,IOOUT       WRITE DUMMY TAPE LABEL        *BW 7/76*   00947\n         SPACE 1                                            *BW 7/76*   00948\n*   WRITE A TAPE MARK AND EXIT                              *BW 7/76*   00949\n         SPACE 1                                            *BW 7/76*   00950\n         B     CTEOJ                                        *BW 7/76*   00951\n         EJECT                                                          00952\n*XP      EQU   *                                           **BW SIK**   00953\n*        WTOR  'DEBE: ENT NEW PUNCH ADDR - XXX',HOLD,3,REPLYECB SIK**   00954\n*        BAL   11,WAITANS                                  **BW SIK**   00955\n*        OC    HOLD(3),BLANKS                              **BW SIK**   00956\n*        CLC   HOLD(2),=C'EJ'                              **BW SIK**   00957\n*        BE    ASKAGN                                      **BW SIK**   00958\n*        MVC   PUNCH1(3),HOLD                              **BW SIK**   00959\n*        B     ASKAGN                                      **BW SIK**   00960\n*        SPACE 3                                           **BW SIK**   00961\n*XR      EQU   *                                           **BW SIK**   00962\n*        WTOR  'DEBE: ENT NEW READER ADDR - XXX',HOLD,3,REPLYECB IK**   00963\n*        BAL   11,WAITANS                                  **BW SIK**   00964\n*        OC    HOLD(3),BLANKS                              **BW SIK**   00965\n*        CLC   HOLD(2),=C'EJ'                              **BW SIK**   00966\n*        BE    ASKAGN                                      **BW SIK**   00967\n*        MVC   READER1(3),HOLD                             **BW SIK**   00968\n*        B     ASKAGN                                      **BW SIK**   00969\n*        SPACE 3                                           **BW SIK**   00970\n*XS      EQU   *                                           **BW SIK**   00971\n*        WTOR  'DEBE: ENT NEW PRINT ADDR - XXX',HOLD,3,REPLYECB SIK**   00972\n*        BAL   11,WAITANS                                  **BW SIK**   00973\n*        OC    HOLD(3),BLANKS                              **BW SIK**   00974\n*        CLC   HOLD(2),=C'EJ'                              **BW SIK**   00975\n*        BE    ASKAGN                                      **BW SIK**   00976\n*        MVC   PRINT1(3),HOLD                              **BW SIK**   00977\n*        B     ASKAGN                                      **BW SIK**   00978\n*XA      EQU   *                                           **BW SIK**   00979\n*        OI    SYSPRTSW,X'FF'                              **BW SIK**   00980\n*        B     ASKAGN                                      **BW SIK**   00981\n*XB      EQU   *                                           **BW SIK**   00982\n*        XC    SYSPRTSW(1),SYSPRTSW                        **BW SIK**   00983\n*        B     ASKAGN                                      **BW SIK**   00984\n         EJECT                                                          00985\n*                                                                       00986\n*  SUBROUTINES USED BY THE SUBPROGRAMS CALLED BY ID                     00987\n*                                                                       00988\n*  OPEN PRINT FILE                                                      00989\n         SPACE 1                                                        00990\nOPENPRNT EQU   *                                                        00991\n         TM    SYSPRTSW,X'FF'                                           00992\n         BNO   OPSYSPR                                                  00993\n         MVI   OUTMDSTK,X'09'     PRIME DCB                             00994\n         MVI   OUTDEVT,X'48'                                            00995\n         MVC   D1(3),PRINT1       PRINTER ADDRESS                       00996\n         BAL   14,UCBLOKUP                                              00997\n         ST    2,OUTDEBMD         STORE IN DEB                          00998\n         B     OPENOK                                                   00999\nOPSYSPR  EQU   *                                                        01000\n         TM    OPENSW,X'FF'                                             01001\n         BC    1,OPENOK                                                 01002\n         OPEN  (PRINT,OUTPUT)                                           01003\n         OI    OPENSW,X'FF'                                             01004\n*                                                          **BW SIK**   01005\n*    ASK FOR PRINTOUT DESTINATION                          **BW SIK**   01006\n*                                                          **BW SIK**   01007\n         ST    11,SAV11                                    **BW SIK**   01008\n         WTOR  'DEBE: ENTER MESSAGE TO IDENTIFY PRINTOUT DESTINATION - X01009\n               UP TO 30 CHARS',HEADERX,30,REPLYECB         **BW SIK**   01010\n         BAL   11,WAITANS                                               01011\n         MVC   TDOUTAR(100),HEADER     MOVE HDR FOR PRINT  **BW SIK**   01012\n*                                                          **BW SIK**   01013\n         LA    7,45                    SET UP PRINT LOOP   **BW SIK**   01014\n*                                                          **BW SIK**   01015\nHDRLP    EQU   *                                           **BW SIK**   01016\n         MVI   TDA,X'40'                                   **BW SIK**   01017\n         PUT   PRINT,TDA                                   **BW SIK**   01018\n         BCT   7,HDRLP                                     **BW SIK**   01019\n         L     11,SAV11                                    **BW SIK**   01020\nOPENOK   EQU   *                                                        01021\n         BR    11                                                       01022\nSAVER9   DS    F                                           **BW SIK**   01023\n         SPACE 3                                                        01024\n*  COMMON PRINT ROUTINE                                                 01025\n         SPACE 1                                                        01026\nTDPRINT  EQU   *                                                        01027\n         ST    11,SV11                                                  01028\n         TR    TDOUTAR(132),PRNTABLE   ELIMINATE UNPRINTABLE CHARS.     01029\n         TM    SYSPRTSW,X'FF'                                           01030\n         BO    TDPRT1                                                   01031\n         MVI   TDA,X'09'                                                01032\n         PUT   PRINT,TDA                                                01033\n         B     LINECT                                                   01034\nTDPRT1   EQU   *                                                        01035\n         MVC   OUTCCW(8),PTCCW                                          01036\n         BAL   11,IOOUT           PRINT LINE                            01037\n         CLI   OUTECB,X'7F'       PRINT OK?                             01038\n         BNE   PTERROR            NO, BRANCH                            01039\n         B     LINECT                                                   01040\n         SPACE 1                                                        01041\n*  SKIP PRINTER TO CHANNEL 1                                            01042\n         SPACE 1                                                        01043\n         BR    11                                                       01044\nSKIPTO1  EQU   *                                                        01045\n         ST    11,SAV11           SAVE RETURN ADCON                     01046\n         TM    SYSPRTSW,X'FF'                                           01047\n         BO    SKTO1                                                    01048\n         MVI   TDA,X'89'                                                01049\n         MVI   TDOUTAR,C' '                                             01050\n         MVC   TDOUTAR+1(131),TDOUTAR                                   01051\n         PUT   PRINT,TDA                                                01052\n         B     SKTO1A                                                   01053\nSKTO1    EQU   *                                                        01054\n         MVC   OUTCCW(8),SKCCW                                          01055\n         BAL   11,IOOUT           SKIP TO CHANNEL 1                     01056\n         CLI   OUTECB,X'7F'       SKIP OK?                              01057\n         BNE   PTERROR            NO, BRANCH                            01058\nSKTO1A   EQU   *                                                        01059\n         SR    0,0                CLEAR COUNTER                         01060\n         STH   0,C                                                      01061\n         L     11,SAV11                                                 01062\n         BR    11                 RETURN                                01063\n         SPACE 1                                                        01064\n*  SPACE PRINTER ONE LINE                                               01065\n         SPACE 1                                                        01066\nSPACE1   EQU   *                                                        01067\n         ST    11,SV11                                                  01068\n         TM    SYSPRTSW,X'FF'                                           01069\n         BO    SPC1                                                     01070\n         MVI   TDA,X'09'                                                01071\n         MVI   TDOUTAR,C' '                                             01072\n         MVC   TDOUTAR+1(131),TDOUTAR                                   01073\n         PUT   PRINT,TDA                                                01074\n         B     LINECT                                                   01075\nSPC1     EQU   *                                                        01076\n         MVC   OUTCCW(8),SPCCW                                          01077\n         BAL   11,IOOUT           SKIP LINE                             01078\n         CLI   OUTECB,X'7F'       SKIP OK?                              01079\n         BNE   PTERROR                                                  01080\nLINECT   EQU   *                                                        01081\n         LH    1,C                UPDATE LINE COUNT                     01082\n         LA    0,1(1)                                                   01083\n         STH   0,C                                                      01084\n         L     11,SV11                                                  01085\n         CH    0,CLIMIT           END OF PAGE                           01086\n         BH    SKIPTO1                                                  01087\n         BR    11                 EXIT ROUTINE                          01088\nPTERROR  EQU   *                                                        01089\n         WTO   'DEBE: PRINT ERROR - EOJ'                                01090\n         B     ASKAGN                                                   01091\n         SPACE 3                                                        01092\n*  RECORD COUNTER                                                       01093\n         SPACE 1                                                        01094\nKNTR     EQU   *                                                        01095\n         SR    2,2                                                      01096\nKNTLOOP  EQU   *                                                        01097\n         BAL   11,IOIN                                                  01098\n         CLI   INECB,X'7F'                                              01099\n         BE    KNT1                                                     01100\n         TM    INSTAT+4,X'01'                                           01101\n         BC    1,KNTDN                                                  01102\n         CLC   ID(2),=C'KC'                                             01103\n         BE    RDRERROR                                                 01104\n         B     TAPERROR                                                 01105\nKNT1     EQU   *                                                        01106\n         LA    2,1(2)                                                   01107\n         B     KNTLOOP                                                  01108\nKNTDN    EQU   *                                                        01109\n         MVC   COUNT(6),=X'402020202020'                                01110\n         CVD   2,TDWK                                                   01111\n         ED    COUNT(6),TDWK+5                                          01112\n         LA    1,MESSAGE                                                01113\n         SVC   35                                                       01114\n         B     ASKAGN                                                   01115\n         EJECT                                                          01116\n*  ROUTINE TO CONVERT MM INTO A SET MODE COMMAND                        01117\nCONVRTMM EQU   *                                                        01118\n         STM   2,3,SAVEUM    SAVE WORK REGISTERS                        01119\n         IC    2,MM+1        GET SECOND BYTE OF MM                      01120\n         TM    MM+1,X'F0'    IS IT NUMERIC                              01121\n         BC    1,MMMM1       YES, BRANCH                                01122\n         AH    2,=H'9'       CONVERT ALPHA TO NUMERIC                   01123\nMMMM1    SRDL  2,4           SAVE IT                                    01124\n         IC    2,MM          GET FIRST BYTE OF MM                       01125\n         TM    MM,X'F0'      IS IT NUMERIC                              01126\n         BC    1,MMMM2       YES, BRANCH                                01127\n         AH    2,=H'9'       CONVERT ALPHA TO NUMERIC      CBT-U MAN    01128\n*                                                                       01129\n* ABOVE INSTRUCTION ADDED TO CORRECT PROBLEM WHERE YOU CAN CBT-U MAN    01130\n* ONLY WRITE AT THE HIGHER DENSITY ON A DUAL-DENSITY DRIVE CBT-U MAN    01131\n*                                                                       01132\nMMMM2    SLDL  2,4                                                      01133\n         STC   2,MM          PUT MM  BACK IN HEX                        01134\n         LM    2,3,SAVEUM    RESTORE REGISTERS                          01135\n         BR    14                                                       01136\nSAVEUM   DS    2F                                                       01137\n         SPACE 3                                                        01138\n*  ROUTINE TO GET UCB ADDRESS WHEN GIVEN DEVICE ADDRESS                 01139\n         SPACE 1                                                        01140\nUCBLOKUP EQU   *                                                        01141\n         ST    11,SAV11                                                 01142\nUCBLOK   EQU   *                                                        01143\n         L     R2,16                                                    01144\n         L     R5,40(R2)                                                01145\nUCBCHK   LH    R2,0(R5)                                                 01146\n         LTR   R2,R2                                                    01147\n         BZ    INCUCB                                                   01148\n         CLC   0(2,R5),=XL2'FFFF'    LAST UCB IN SYSTEM                 01149\n         BNE   CKADDR                  NO LOOK AT IT TO SEE IF GOOD     01150\n         WTO   'UCB NOT FOUND'                                          01151\n         B     ASKAGN                                                   01152\nCKADDR   CLC   13(3,R2),D1                                              01153\n         BE    UCBFOUND                                                 01154\nINCUCB   LA    R5,2(R5)                                                 01155\n         B     UCBCHK                                                   01156\nUCBFOUND TM    2(R2),X'FF'                                              01157\n         BNO   BADEVICE                                                 01158\n*        TM    3(2),X'08'         ALLOCATED?               **BW SIK**   01159\n*        BC    1,ALOCK            YES; BRANCH              **BW SIK**   01160\n*        TM    3(2),X'80'      TEST FOR OFFLINE DEVICE     **BW SIK**   01161\n         SPACE 5                                           **BW SIK**   01162\n********************************************************** **BW SIK**   01163\n*                                                          **BW SIK**   01164\n*     THE OFFLINE DEVICE FUNCTION HAS BEEN ARTIFICIALLY    **BW SIK**   01165\n*     DISABLED -- TAPE DEVICES MUST NOW BE INDICATED BY    **BW SIK**   01166\n*     A DD CARD IN THE DEBE JCL - THE DD NAME IS AT THE    **BW SIK**   01167\n*     DISCRETION OF THE USER                               **BW SIK**   01168\n*                                                          **BW SIK**   01169\n*     THIS ROUTINE CHECKS TO SEE THAT THE UCB REQUESTED    **BW SIK**   01170\n*     IN ANY TAPE OPERATION HAS BEEN ALLOCATED AT STEP     **BW SIK**   01171\n*     INITIATION BY CHECKING FOR THE UCB ADDRESS IN THE    **BW SIK**   01172\n*     TIOT CHAIN FOR THE DEBE TASK -- IF THE UCB ADDRESS   **BW SIK**   01173\n*     IS NOT LOCATED THEN THE OPERATION IN PROGRESS IS     **BW SIK**   01174\n*     TERMINATED WITH THE ERROR MESSAGE --                 **BW SIK**   01175\n*                                                          **BW SIK**   01176\n*     'DEBE: REQUESTED DEVICE NOT ALLOCATED, OPERATION     **BW SIK**   01177\n*        TERMINATED'                                       **BW SIK**   01178\n*                                                          **BW SIK**   01179\n*     THE OPERATOR IS THEN PROMPTED FOR THE NEXT OPERATION **BW SIK**   01180\n*     TO BE PERFORMED                                      **BW SIK**   01181\n*                                                          **BW SIK**   01182\n********************************************************** **BW SIK**   01183\n*                                                          **BW SIK**   01184\n         STM   8,10,MYSAVE             SAVE REGS           **BW SIK**   01185\n         L     8,16                    R8 --> CVT          **BW SIK**   01186\n         L     9,0(0,8)                R9 --> TCB PTRS     **BW SIK**   01187\n         L     10,4(0,9)               R10 --> CURR TCB(ME)**BW SIK**   01188\n         L     8,12(0,10)              R8 --> TIOT         **BW SIK**   01189\n         LA    8,24(,8)                R8 --> 1 ST ENTRY   **BW SIK**   01190\nNEXTUCB  CLI   0(8),X'00'              LAST ENTRY ??       **BW SIK**   01191\n         BE    NOTALLOC                YES - DEV NOT ALLOC **BW SIK**   01192\n         CH    2,18(0,8)               IS UCB IN TIOT ENTRY *BW SIK**   01193\n         BE    DEVOK                   YES - DEVICE OK     **BW SIK**   01194\n         LA    8,20(,8)                NO - GET NEXT ENTRY **BW SIK**   01195\n         B     NEXTUCB                 NEXT UCB            **BW SIK**   01196\n*                                                          **BW SIK**   01197\nDEVOK    EQU   *                                           **BW SIK**   01198\n         LM    8,10,MYSAVE             RESTORE REGS        **BW SIK**   01199\n         BR    14                                          **BW SIK**   01200\n*                                                          **BW SIK**   01201\nNOTALLOC EQU   *                                           **BW SIK**   01202\n         LM    8,10,MYSAVE             RESTORE REGS        **BW SIK**   01203\n         WTO   'DEBE: REQUESTED DEVICE NOT ALLOCATED - OPERATION TERMINX01204\n               ATED'                                       **BW SIK**   01205\n         B     ASKAGN                  GET NEXT FUNCTION   **BW SIK**   01206\n*                                                          **BW SIK**   01207\nMYSAVE   DS    3F                                          **BW SIK**   01208\n*OFLNTEST BNO  DEVOFLIN     BRANCH WILL BE TURNED OFF BY 'OX' COMMAND   01209\n*RETRN    EQU   *                                            DEBE9590   01210\n*        L     11,SAV11                                                 01211\n*        BR    14                                                       01212\n*        CMSREG                                       AXC               01213\nR0      EQU  0                                        AXC               01214\nR1      EQU  1                                        AXC               01215\nR2      EQU  2                                        AXC               01216\nR3      EQU  3                                        AXC               01217\nR4      EQU  4                                        AXC               01218\nR5      EQU  5                                        AXC               01219\nR6      EQU  6                                        AXC               01220\nR7      EQU  7                                        AXC               01221\nR8      EQU  8                                        AXC               01222\nR9      EQU  9                                        AXC               01223\nR10     EQU  10                                       AXC               01224\nR11     EQU  11                                       AXC               01225\nR12     EQU  12                                       AXC               01226\nR13     EQU  13                                       AXC               01227\nR14     EQU  14                                       AXC               01228\nR15     EQU  15                                       AXC               01229\nR16     EQU  16                                       AXC               01230\nRA      EQU  10                                       AXC               01231\nRB      EQU  11                                       AXC               01232\nRC      EQU  12                                       AXC               01233\nRD      EQU  13                                       AXC               01234\nRE      EQU  14                                       AXC               01235\nRF      EQU  15                                       AXC               01236\n         LTORG                                                          01237\n         SPACE 3                                                        01238\n*  ROUTINE TO ASK FOR THE INPUT TAPE                                    01239\n         SPACE 1                                                        01240\nTAPINSET DS    0H                                                       01241\n         WTOR  'DEBE: INPUT TAPE - MMXXX',MM,5,REPLYECB                 01242\n         BAL   11,WAITAPE    WAIT FOR A REPLY AND SET UP MODE           01243\n         MVC   INTRTCH(1),MM       SET UP TAPE'S DCB                    01244\n         MVI   INDEVT,X'81'                                             01245\n         CLI   18(2),X'80'       IS IT A TAPE (2 POINTS TO UCB)         01246\n         BNE   TPINBD                                                   01247\n         ST    2,INDEBMOD          STORE UCB ADDRESS IN DEB             01248\n         MVC   INDEBMOD(1),MM      PUT SET MODE CMD IN DEB              01249\n         OI    INIOB,X'40'         SET ON CHAINING                      01250\n         MVC   INCCW(1),MM       PUT SET MODE IN CCW                    01251\n         MVC   INCCW+1(7),=X'00000060000001'                            01252\n         BR    10                                                       01253\nTPINBD   EQU   *                                                        01254\n         WTO   'DEBE: NOT A TAPE'                                       01255\n         B     TAPINSET                                                 01256\n         SPACE 3                                                        01257\n*  ROUTINE TO ASK FOR THE OUTPUT TAPE                                   01258\n         SPACE 1                                                        01259\nTPOUTSET EQU   *                                                        01260\n         WTOR  'DEBE: OUTPUT TAPE - MMXXX',MM,5,REPLYECB                01261\n         BAL   11,WAITAPE    WAIT FOR REPLY  AND SET UP MM              01262\n         MVC   OUTTRTCH(1),MM                                           01263\n         MVI   OUTDEVT,X'81'                                            01264\n         CLI   18(2),X'80'       IS IT A TAPE                           01265\n         BNE   TPOUTBD                                                  01266\n         ST    2,OUTDEBMD          STORE UCB ADDRESS IN DEB             01267\n         MVC   OUTDEBMD(1),MM                                           01268\n         OI    OUTIOB,X'40'      SET ON CHAINING FLAG                   01269\n         MVC   OUTCCW(1),MM      BUILD SET MODE COMMAND                 01270\n         MVC   OUTCCW+1(7),=X'00000060000001'                           01271\n         BR    10                                                       01272\nTPOUTBD  EQU   *                                                        01273\n         WTO   'DEBE: NOT A TAPE'                                       01274\n         B     TPOUTSET                                                 01275\nTAPEBLOK EQU   *                                                        01276\n         XC    NBRSW(1),NBRSW                                           01277\n         WTOR  'DEBE: NR BLK TO PROCESS OR ALL-XXX',TDAREA,3,REPLYECB   01278\n         BAL   11,WAITANS                                               01279\n         OC    TDAREA(3),BLANKS                                         01280\n         CLC   TDAREA(2),=C'EJ'                                         01281\n         BE    ASKAGN                                                   01282\n         CLC   TDAREA(3),=C'ALL'                                        01283\n         BE    DOALL                                                    01284\n         OI    TDAREA+2,X'F0'                                           01285\n         PACK  TDWK,TDAREA(3)                                           01286\n         CVB   6,TDWK                                                   01287\n         BR    10                                                       01288\nDOALL    EQU   *                                                        01289\n         OI    NBRSW,X'FF'                                              01290\n         BR    10                                                       01291\n         SPACE 3                                                        01292\n*  COMMON I/O ROUTINE FOR OUTPUT                                        01293\n         SPACE 1                                                        01294\nIOOUT    EQU   *                                                        01295\n         XC    OUTECB(4),OUTECB                                         01296\n         EXCP  OUTIOB                                                   01297\n         WAIT  ECB=OUTECB                                               01298\n         NI    OUTDCB+44,X'3F'                                          01299\n         BR    11                                                       01300\n         SPACE 3                                                        01301\n*  COMMON I/O ROUTINE FOR INPUT                                         01302\n         SPACE 1                                                        01303\nIOIN     EQU   *                                                        01304\n         XC    INECB(4),INECB                                           01305\n         EXCP  INIOB                                                    01306\n         WAIT  ECB=INECB                                                01307\n         NI    INDCB+44,X'3F'                                           01308\n         BR    11                                                       01309\n         SPACE 3                                                        01310\n*  COMMON WAIT FOR ALL REPLIES                                          01311\nWAITANS  EQU   *                                                        01312\n         WAITR ECB=REPLYECB                                             01313\n         XC    REPLYECB(4),REPLYECB                                     01314\n         BR    11                                                       01315\n         SPACE 3                                                        01316\n*  ROUTINE TO WAIT ON THE REPLY AND CONVERT THE MM INTO A SET MODE      01317\nWAITAPE  EQU   *                                                        01318\n         WAIT  ECB=REPLYECB                                             01319\n         XC    REPLYECB(4),REPLYECB                                     01320\n         OC    MM(5),=C'     '     MAKE ALL CAPS                        01321\n         CLC   MM(2),=C'EJ'                                             01322\n         BE    ASKAGN                                                   01323\n         MVC   TDOUTAR(5),MM  GET MMXXX FOR PRINTING ON LISTING         01324\n         MVI   TDOUTAR+5,C' '                                           01325\n         MVC   TDOUTAR+6(126),TDOUTAR+5                                 01326\n         MVC   TDOUTAR+5(24),=CL24' - MMXXX FOR INPUT TAPE.'            01327\n         MVC   TDOUTAR+50(47),=CL47'*** THIS IS NOT A DATA RECORD FROM X01328\n               THE TAPE ***'                                            01329\n         BAL   14,CONVRTMM                                              01330\n         OI    MM,X'03'            SET MODE COMMAND NOW IN MM           01331\n         MVC   D1(3),XXX                                                01332\n         BAL   14,UCBLOKUP                                              01333\n         BR    11                                                       01334\n         SPACE 3                                                        01335\n*  ROUTINE TO WRITE A TAPEMARK                                          01336\nWTM      EQU   *                                                        01337\n         ST    11,SV11                                                  01338\n         MVC   OUTCCW+8(8),WTCCW       SET UP WTM CCW                   01339\n         BAL   11,IOOUT      WRITE A TAPE MARK                          01340\n         CLI   OUTECB,X'7F'        EVERYTHING OK                        01341\n         BNE   TAPERR        NO, BRANCH                                 01342\n         L     11,SV11                                                  01343\n         BR    11                                                       01344\n         SPACE 3                                                        01345\n*  UNIT ALLOCATED ROUTINE                                               01346\nALOCK    EQU   *                                                        01347\n         LA    1,WTORMSG                                                01348\nNEWADRS  EQU   *     ASK FOR A NEW DEVICE ADDRESS                       01349\n         SVC   35               ISSUE WTOR                              01350\n         BAL   11,WAITANS                                               01351\n         OC    HOLD(3),BLANKS                                           01352\n         CLC   HOLD(2),=C'EJ'     NEW TASK?                             01353\n         BE    ASKAGN                                                   01354\n         MVC   D1(3),HOLD                                               01355\n         B     UCBLOK     AVOID RE-SAVING REG11                         01356\n         SPACE  3                                                       01357\n*  NO UCB FOUND                                                         01358\nBADEVICE EQU   *                                                        01359\n         LA    1,BDWTOR                                                 01360\n         SVC   35                 ISSUE WTOR                            01361\n         BAL   11,WAITANS                                               01362\n         OC    D1(3),BLANKS                                             01363\n         CLC   D1(2),=C'EJ'                                             01364\n         BE    ASKAGN                                                   01365\n         B     UCBLOK             TRY AGAIN                             01366\n         SPACE 3                                                        01367\nDEVOFLIN EQU   *     DEVICE ADDRESS GIVEN IS OFFLINE                    01368\n         MVC   OFFDEV(3),UNNUM                                          01369\n         LA    1,ALLOCMSG                                               01370\n         B     NEWADRS                                                  01371\n         SPACE 1                                                        01372\nAPPEND   BR    14                                                       01373\n         EJECT                                                          01374\n*  CONSTANTS AND CCW'S      * * * * * * * * * * * * * * * * * * * * *   01375\n         SPACE 3                                                        01376\nHOLD     DS    D                                                        01377\nREADER1  DC    CL3'012'                                                 01378\nPUNCH1   DC    CL3'013'                                                 01379\nPRINT1   DC    CL3'002'                                                 01380\n         SPACE 3                                                        01381\nBFCCW    CCW   X'2F',SFCCW,X'20',1                                      01382\nBSCCW    CCW   X'27',BSCCW,X'20',1                                      01383\nCP1CCW   CCW   2,TDAREA,X'20',80                                        01384\nCP2CCW   CCW   9,TDAREA,X'20',80                                        01385\nCTCCW    CCW   1,TDAREA,X'20',80                                        01386\nDBCCW    CCW   X'41',TDAREA2,X'20',80                                   01387\nPTCCW    CCW   9,TDOUTAR,X'20',132                                      01388\nROCCW    CCW   X'41',BLANKS,X'20',80                                    01389\nRUCCW    CCW   15,RUCCW,X'20',1                                         01390\nRWCCW    CCW   7,RWCCW,X'20',1                                          01391\nSFCCW    CCW   X'3F',SFCCW,X'20',1                                      01392\nSKCCW    CCW   X'8B',BLANKS,X'20',1                                     01393\nSPCCW    CCW   11,BLANKS,X'20',1                                        01394\nSRCCW    CCW   X'37',BSCCW,X'20',1                                      01395\nS2CCW    CCW   X'41',TDAREA,X'20',80                                    01396\nTDINCCW  CCW   2,TDAREA,X'20',32767                                     01397\nTTCCWOUT CCW   1,TDAREA,X'20',32767                                     01398\nWTCCW    CCW   31,TDAREA,X'20',1                                        01399\nTAPEAREA DC    F'0'      ADDRESS OF TAPE I/O WORK AREA IN SP 0          01400\nPRNTABLE DC    CL75' ',C'. (+ &&',CL10' ',C'$*)  -/',CL9' '             01401\n         DC    C',%',CL14' ',C'#@''= ',CL65' '                          01402\n         DC    C'ABCDEFGHI',CL7' ',C'JKLMNOPQR',CL8' '                  01403\n         DC    C'STUVWXYZ',CL6' ',C'0123456789',CL6' '                  01404\n         SPACE 3                                                        01405\nBLANKS   DC    132C' '                                                  01406\n         SPACE 1                                                        01407\nTDWK     DS    D                                                        01408\nSAVEAREA DC    18F'0'                                                   01409\nTDPTABLE DC    C'0123456789ABCDEF'                                      01410\n         DS    0F                                                       01411\nMESSAGE  DC    AL2(THERE-*)     MESSAGE LENGTH                          01412\n         DC    AL2(0)                                                   01413\n         DC    C'DEBE: '                                                01414\nCOUNT    DC    C'NUMBER '                                               01415\n         DC    C'RECORDS PROCESSED'                                     01416\nTHERE    EQU   *                                                        01417\nWTORMSG  DS    0F                                                       01418\n         DC    AL1(3)                                                   01419\n         DC    AL3(HOLD)                                                01420\n         DC    A(REPLYECB)                                              01421\n         DC    AL2(28)                                                  01422\n         DC    AL2(0)                                                   01423\n         DC    C'DEBE: UNIT '                                           01424\nUNNUM    DS    CL3                                                      01425\n         DC    C' ALLOCATED'                                            01426\nBDWTOR   DS    0F                                                       01427\n         DC    AL1(3)                                                   01428\n         DC    AL3(D1)                                                  01429\n         DC    A(REPLYECB)                                              01430\n         DC    AL2(26)                                                  01431\n         DC    AL2(0)                                                   01432\n         DC    C'DEBE: UNIT '                                           01433\nBDUN     DC    C'XXX INVALID'                                           01434\nALLOCMSG DS    0F                                                       01435\n         DC    AL1(3),AL3(HOLD),A(REPLYECB),AL2(29),AL2(0)              01436\n         DC    C'DEBE: UNIT '                                           01437\nOFFDEV   DC    C'XXX IS OFFLINE'                                        01438\nD1       DC    C'0'                                                     01439\nD2       DC    C'0'                                                     01440\nD3       DC    C'0'                                                     01441\nID       DC    C'00'                                                    01442\nMM       DC    C'00'                                                    01443\nXXX      DC    C'000'                                                   01444\nOF       DC    F'15'                                                    01445\nREPLYECB DC    F'0'                                                     01446\nHEADER   DC    35C'*'                                      **BW SIK**   01447\nHEADERX  DC    30C' '                                      **BW SIK**   01448\n         DC    35C'*'                                      **BW SIK**   01449\nSAV11    DS    F                                                        01450\nTDA      DC    C' '                                                     01451\nTDOUTAR  DS    CL132                                                    01452\nRECCNT   DC    X'00000F'                                                01453\nCOND1    DC    X'1F'                                                    01454\nRECHDG   DC    C'REC '                                                  01455\n         DC    X'2020202020'                                            01456\n         DC    C', LENGTH '                                             01457\n         DC    X'2020202020'                                            01458\nC        DC    H'0'                                                     01459\nCLIMIT   DC    H'58'                                                    01460\nSV11     DS    F                                                        01461\n         SPACE 3                                                        01462\nSYSPRTSW DC    X'00'                                                    01463\nNBRSW    DC    X'00'                                                    01464\nOPENSW   DC    X'00'                                                    01465\nPRINT    DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,RECFM=FBM,LRECL=133,  X01466\n               BLKSIZE=133                                              01467\n         LTORG                                                          01468\n         SPACE 3                                                        01469\nTDAREA2  DS    CL101                                                    01470\nTDAREAAD DS    0F            SET TDAREA ON FULLWD BOUNDARY              01471\nTDAREA   DS    CL80                                                     01472\nWORKAREA CSECT                                                          01473\n*  SEE THE OS SYSTEM CONTROL BLOCKS MANUAL FOR THE FORMATS OF THE       01474\n*  FOLLOWING DCB'S, DEB'S, ECB'S, AND IOB'S.                            01475\n*  DCB FOR INPUT DATA SET                                               01476\n         SPACE 1                       :                                01477\nINDCB    DS    0F                                                       01478\n         DC    4F'0'                                                    01479\nINTRTCH  EQU   *                                                        01480\nINMODSTK EQU   *                                                        01481\n         DC    X'00'                                                    01482\nINDEVT   DC    X'00'                                                    01483\nINDENS   DC    X'00'                                                    01484\n         DC    X'00'                                                    01485\n         DC    5F'0'                                                    01486\n         DC    H'0'                                                     01487\n         DC    BL2'1101000000001000'                                    01488\nAET1     DC    A(INDEB)                                                 01489\n         DC    X'10000000'                                              01490\n         DC    5F'0'                                                    01491\n         SPACE 1                       :                                01492\n*  DEB FOR INPUT DATA SET                                               01493\n         SPACE 1                       :                                01494\nINIOVEC  EQU   *                                                        01495\nAET2     DC    A(APPEND)                                                01496\nAET3     DC    A(APPEND)                                                01497\nAET4     DC    A(APPEND)                                                01498\nAET5     DC    A(APPEND)                                                01499\nAET6     DC    A(APPEND)                                                01500\n         DC    3F'0'                                                    01501\n         DC    X'06000000'                                              01502\nINDEB    DS    0F                                                       01503\n         DC    F'0'                                                     01504\n         DC    X'04'                                                    01505\nAET7     DC    AL3(OUTDEB)                                              01506\n         DC    X'C0000000'                                              01507\n         DC    X'30000000'                                              01508\n         DC    2F'0'                                                    01509\n         DC    X'0F'                                                    01510\nAET8     DC    AL3(INDCB)                                               01511\n         DC    X'02'                                                    01512\nAET9     DC    AL3(INIOVEC)                                             01513\nINDEBMOD DC    X'00'                                                    01514\nINDEBUCB DC    X'000000'                                                01515\n         DC    F'0'                                                     01516\n         SPACE 1                       9                                01517\n*  ECB FOR INPUT DATA SET                                               01518\n         SPACE 1                       9                                01519\nINECB    DC    F'0'                                                     01520\n         SPACE 1                                                        01521\n*  IOB FOR INPUT DATA SET                                               01522\n         SPACE 1                                                        01523\nINIOB    DS    0F                                                       01524\n         DC    X'0200'                                                  01525\nINSENS   DC    H'0'                                                     01526\n         DC    X'7F'                                                    01527\nAET10    DC    AL3(INECB)                                               01528\nINSTAT   DC    2F'0'                                                    01529\nAET11    DC    A(INCCW)                                                 01530\nAET12    DC    A(INDCB)                                                 01531\n         DC    F'0'                                                     01532\n         DC    H'1'                                                     01533\n         DC    H'0'                                                     01534\nINDASD   DC    X'00'                                                    01535\nINSEEK   DC    XL7'00'                                                  01536\n         SPACE 1                                                        01537\n*  CCW'S FOR INPUT DATA SET                                             01538\n         SPACE 1                                                        01539\nINCCW    DS    5D                                                       01540\n         SPACE 3                                                        01541\n*  DCB FOR OUTPUT DATA SET                                              01542\n         SPACE 1                                                        01543\nOUTDCB   DS    0F                                                       01544\n         DC    4F'0'                                                    01545\nOUTTRTCH EQU   *                                                        01546\nOUTMDSTK EQU   *                                                        01547\n         DC    X'00'                                                    01548\nOUTDEVT  DC    X'00'                                                    01549\nOUTDENS  DC    X'00'                                                    01550\n         DC    X'00'                                                    01551\n         DC    5F'0'                                                    01552\n         DC    H'0'                                                     01553\n         DC    BL2'1101000000001000'                                    01554\nAET13    DC    A(OUTDEB)                                                01555\n         DC    X'10000000'                                              01556\n         DC    5F'0'                                                    01557\n         SPACE 1                                                        01558\n*  DEB FOR OUTPUT DATA SET                                              01559\n         SPACE 1                                                        01560\nOUTIOVEC EQU   *                                                        01561\nAET14    DC    A(APPEND)                                                01562\nAET15    DC    A(APPEND)                                                01563\nAET16    DC    A(APPEND)                                                01564\nAET17    DC    A(APPEND)                                                01565\nAET18    DC    A(APPEND)                                                01566\n         DC    3F'0'                                                    01567\n         DC    X'06000000'                                              01568\nOUTDEB   DS    0F                                                       01569\n         DC    F'0'                                                     01570\n         DC    X'17000000'                                              01571\n         DC    X'C0000000'                                              01572\n         DC    X'30000000'                                              01573\n         DC    2F'0'                                                    01574\n         DC    X'0F'                                                    01575\nAET19    DC    AL3(OUTDCB)                                              01576\n         DC    X'02'                                                    01577\nAET20    DC    AL3(OUTIOVEC)                                            01578\nOUTDEBMD DC    X'00'                                                    01579\nOUTDBUCB DC    X'000000'                                                01580\n         DC    F'0'                                                     01581\n         SPACE 1                                                        01582\n*  ECB FOR OUTPUT DATA SET                                              01583\n         SPACE 1                                                        01584\nOUTECB   DC    F'0'                                                     01585\n         SPACE 1                                                        01586\n*  IOB FOR OUTPUT DATA SET                                              01587\n         SPACE 1                                                        01588\nOUTIOB   DS    0F                                                       01589\n         DC    XL2'0200'                                                01590\nOUTSENS  DC    H'0'                                                     01591\n         DC    X'7F'                                                    01592\nAET21    DC    AL3(OUTECB)                                              01593\nOUTSTAT  DC    2F'0'                                                    01594\nAET22    DC    A(OUTCCW)                                                01595\nAET23    DC    A(OUTDCB)                                                01596\n         DC    F'0'                                                     01597\n         DC    H'1'                                                     01598\n         DC    H'0'                                                     01599\nOUTDASD  DC    X'00'                                                    01600\nOUTSEEK  DC    XL7'00'                                                  01601\n         SPACE 1                                                        01602\n*  CCW'S FOR OUTPUT DATA SET                                            01603\n         SPACE 1                                                        01604\nOUTCCW   DS    5D                                                       01605\n         SPACE 3                                                        01606\n         END   OSDEBE                                                   01607\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DEBE$": {"ttr": 3590, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/!W\\x00%\\x00%\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T21:57:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "SYZYGY"}, "text": "//ZDEBE    JOB (IS,OTS,M00,000,64),'SYSTEMS***BRIAN',\n//      CLASS=A,MSGCLASS=A,NOTIFY=SYZYGY  TYPRUN=SCAN\n//ASMFCL PROC  CLASS=A,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='SYZYGY.PDS.DATA',\n//             LOAD='SYZYGY.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             DIR=1,              NUMBER OF DIRECTORY BLOCKS\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='OBJECT,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD,DISP=SHR,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.,&DIR.))\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=DEBE\n//LKED.SYSIN   DD   *\n   NAME DEBE(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DEBEPROC": {"ttr": 3592, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/!W\\x00\\x03\\x00\\x03\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T21:57:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "SYZYGY"}, "text": "//DEBE      EXEC PGM=DEBE,TIME=1440,DPRTY=(7,9)\n//SYSABEND  DD   SYSOUT=A\n//SYSUDUMP  DD   SYSOUT=A\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DISKSEE$": {"ttr": 3594, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06O\\x01\\x02\\x06O H\\x00%\\x00%\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-05T00:00:00", "modifydate": "2002-03-05T20:48:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "SYZYGY1"}, "text": "//ZDISKSEK JOB (IS,OTS,M00,000,64),'SYSTEMS***BRIAN',\n//      CLASS=A,MSGCLASS=A,NOTIFY=SYZYGY1 TYPRUN=SCAN\n//ASMFCL PROC  CLASS=A,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='SYZYGY.TESTED.MODS',\n//             LOAD='SYZYGY.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             DIR=1,              NUMBER OF DIRECTORY BLOCKS\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='OBJECT,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD,DISP=SHR,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.,&DIR.))\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=DISKSEEK\n//LKED.SYSIN   DD   *\n   NAME DISKSEEK(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DISKSEEK": {"ttr": 3596, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06O\\x01\\x02\\x06O F\\x0c\\xde\\x0c\\xde\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-05T00:00:00", "modifydate": "2002-03-05T20:46:00", "lines": 3294, "newlines": 3294, "modlines": 0, "user": "SYZYGY1"}, "text": "DISK     TITLE  '... DIRECT ACCESS VOLUME LIST ...'\n*\n* THIS MUST BE LINKED AS AC=1\n*\n* SAMPLE PROC\n*\n* SMAP     PROC SO=A,U='SYSALLDA',COPY=1,V=VOLUME\n* SMAP     EXEC PGM=DISKSEEK,PARM=SMAP,REGION=1024K\n* STEPLIB  DD DSN=LA.PSUP.AUTHLIB,DISP=SHR                  *HMD 06/82*\n* VOLUME01 DD VOL=SER=&V,DISP=SHR,UNIT=&U\n* SYSPRINT DD SYSOUT=&SO,COPIES=&COPY\n* SYSSEEK  DD DUMMY,DCB=BLKSIZE=121\n*\n*         STEPNAME SETS NUMBER OF SAMPLES FOR \"SMAP\"\n*\n*         STEPNAME FORMAT IS AS FOLLOWS -\n*\n*         SNNNN -\n*                  \"NNNN\"  IS THE NO. OF 1/5 SEC SAMPLES.\n*                  IF \"NNNN\" IS NOT NUMERIC A DEFAULT OF\n*                  3000 SAMPLES WILL BE USED (10 MINUTES)\n*\n*   NOTE: IF YOU WANT TO CHANGE THE NUMBER OF SAMPLES\n*         AND YOU HAVE A PROC IN SYS1.PROCLIB THAT YOU START FROM\n*         THE CONSOLE THE WAY TO DO IT IS:\n*\n*           S SMAP.SNNNN,V=SYSRES\n*\nDISKSEEK CSECT\n         EJECT\n*\n*FUNCTION -DIRECT ACCESS VOLUME LISTING UTILITY.\n*          IT WILL PRODUCE A LISTING OF EVERY DATASET ON A VOLUME\n*          PLUS CALCULATE THE FREE SPACE, FREE DSCBS ETC. OPTIONALLY\n*          VIA PARM INFORMATION IT WILL PRODUCE THE FOLLOWING:\n*         PARM=MAP - PRODUCE TRACK MAP OF VOLUME.\n*         PARM=SMAP - PRODUCE TRACK MAP OF VOLUME INCLUDING SEEK INFO\n*         PARM=PDS - LIST ALL PDS DIRECTORIES ON VOLUME.\n*         PARM=ISAM - LIST ISAM REORG ONFORMATION FOR DATASETS.\n*         PARM=EXT- LIST THE EXTENTS OF THE DATASETS.\n*         PARM=DUMP - LIST IN HEX ALL DSCBS ON VOLUME.\n*         PARM=EMPTY - LIST ONLY DATASETS THAT ARE EMPTY.\n*         PARM=MODEL - WILL ONLY LIST MODEL DSCBS.\n*         PARM=SDUMP - LIST IN HEX FORMAT 4 AND 5 DSCBS.\n*         PARM=VOLS - ONLY USE DDNAMES OF VOLUMEXX    .\n*         PARM=JDATE - LIST CREATION/EXPIRATION DATES IN JULIAN.\n******     OTHER COMMENT ARE DOCUMENTED IN BEGINING OF SOURCE.\n******     NOTE - SYS1.AMODGEN MUST BE CONCATENATED TO MACLIB FOR ASMB\n*\n*\n*\n*         STEPNAME SETS NO. OF SAMPLES FOR \"SMAP\"\n*\n*         STEPNAME FORMAT IS AS FOLLOWS -\n*\n*         SNNNN -\n*                  \"NNNN\"  IS THE NO. OF 1/5 SEC SAMPLES.\n*                  IF \"NNNN\" IS NOT NUMERIC A DEFAULT OF\n*                  3000 SAMPLES WILL BE USED (10 MINUTES)\n*\n*\n         EJECT\nR0       EQU   0                   WORK\nR1       EQU   1                   WORK\nR2       EQU   2                   WORK\nR3       EQU   3                   WORK\nR4       EQU   4                   WORK\nR5       EQU   5                   WORK\nR6       EQU   6                   -> FM1, FM4 DSCB, PDS ENTRY\nR7       EQU   7                   -> FM2 DSCB, IF ANY\nR8       EQU   8                   -> FM3, FM5 DSCB, IF ANY\nR9       EQU   9                   BASE REG 1\nR10      EQU   10                  BASE REG 2\nR11      EQU   11                  BASE REG 3\nR12      EQU   12                  BASE REG 4\nR13      EQU   13                  -> SAVE AREA\nR14      EQU   14                  LINK, WORK\nR15      EQU   15                  WORK\n         SPACE 1\nSPACE0AP EQU   X'01'\nSPACE1AP EQU   X'09'\nSPACE2AP EQU   X'11'\nSPACE3AP EQU   X'19'\nEJECTAP  EQU   X'89'\nSPACE0IM EQU   X'03'\nSPACE1IM EQU   X'0B'\nSPACE2IM EQU   X'13'\nSPACE3IM EQU   X'1B'\nEJECTIM  EQU   X'8B'\n         SPACE 1\nDEBUCBAD EQU   32                                           *HMD 06/82*\nCAMLSTLN EQU   148\nPDSBLKLN EQU   264\nNCPDFLT  EQU   10\nUTILPRIV EQU   5\nOPERPRIV EQU   9\n         SPACE 1\nEMPTYOPT EQU   X'80'\nLSTDTOPT EQU   X'40'\nDUMPOPT  EQU   X'20'\nSDUMPOPT EQU   X'10'\nMAPOPT   EQU   X'08'\nPDSOPT   EQU   X'04'\nEXTNTOPT EQU   X'02'\nDIRFLAG  EQU   X'01'\n         SPACE 1\nVOLSOPT  EQU   X'80'\nLNCNTOPT EQU   X'40'\nSMAPOPT  EQU   X'20'\nRESETOPT EQU   X'10'\nNCPOPT   EQU   X'08'\nISAMOPT  EQU   X'04'\nJDATEOPT EQU   X'02'\nMODELOPT EQU   X'01'\n         EJECT\n         SAVE  (14,12),,*\n         LR    R9,R15\n         USING DISKSEEK,R9\n         LM    R10,R12,BASEVALS\n         USING DISKSEEK,R9,R10,R11,R12\n         SPACE 1\n         LR    R2,R13\n         LA    R13,SAVEAREA\n         ST    R2,SAVEAREA+4\n         ST    R13,8(,R2)\n         SR    R2,R2\n         SPM   R2\n         B     INIT\n         SPACE 1\nBASEVALS DC    A(DISKSEEK+X'1000',DISKSEEK+X'2000',DISKSEEK+X'3000')\n         EJECT\nMAXCYL   EQU   808\nMAXTRK   EQU   32\nDEVBUSY  STM   R2,R12,VOLSAVE\n         MVC   VOLTRKS(2),TRKSPCYL\n         OPEN  (SYSSEEK,(OUTPUT))\n         L     R1,VOLTAB\n         LTR   R1,R1               FREEMAIN NECESSARY\n         BZ    DEVBUSY0            NO\n         L     R0,=A(MAXCYL*MAXTRK*4) VOLTAB LENGTH\n         FREEMAIN R,LV=(0),A=(1)\n         SPACE 1\nDEVBUSY0 L     R0,=A(MAXCYL*MAXTRK*4) VOLTAB LENGTH\n         GETMAIN R,LV=(0)\n         ST    R1,VOLTAB           VOLTAB ADDR\n         L     R4,VOLUCB           UCB ADDR\n         L     R3,VOLSAMP          NO. OF SAMPLES\n         L     R14,PSATOLD-PSA     CURRENT TCB              *HMD 06/82*\n         L     R14,TCBTIO-TCBRBP(R14)      GET TIOT ADDR    *HMD 06/82*\n         USING TIOT1,R14           ADDRESS THE TIOT         *HMD 06/82*\n         MVC   SEEKDBL(4),=4C'0'\n         MVZ   SEEKDBL(4),TIOCSTEP+1   SNNNN STEP NAME\n         CLC   SEEKDBL(4),=4C'0'   NUMERIC\n         BNE   DEVBUSY1            NO, USE DEFAULT\n         PACK  SEEKDBL(8),TIOCSTEP+1(4)\n         CVB   R3,SEEKDBL          SPECIFIED NO. OF SAMPLES\n         ST    R3,VOLSAMP\n         DROP  R14                                          *HMD 06/82*\n         SPACE 1\nDEVBUSY1 STIMER WAIT,DINTVL=INTERVL\n         USING UCBOB,R4                                     *HMD 06/82*\n         TM    UCBSTAT,UCBONLI+UCBALOC                      *HMD 06/82*\n         BNO   DEVBUSY2            NO                       *HMD 06/82*\n         TM    UCBFLA,UCBBSY+UCBCUB+UCBACTV                 *HMD 06/82*\n         BZ    DEVBUSY2            BUSY OR CHANNEL PGM ACT  *HMD 06/82*\n         DROP  R4                                           *HMD 06/82*\n         LR    R14,R4             UCB ADDR\n         S     R14,=F'4'          DECR ADDR -4\n         L     R14,0(0,R14)       IOQ ADDR\n         LA    R14,0(0,R14)\n         LTR   R14,R14            ANY IOQ\n         BZ    DEVBUSY2           NO\n         L     R14,8(,R14)        GET IOSB ADDRESS          *HMD 06/82*\n         LA    R14,0(0,R14)\n         LTR   R14,R14            EXIST\n         BZ    DEVBUSY2           NO\n         SR    R1,R1\n         USING IOSB,R14           ADDRESS THE IOSB          *HMD 06/82*\n         ICM   R1,3,IOSSKH1       SEEK TRK\n         ST    R1,DOUBTRK\n         CH    R1,VOLTRKS         CHECK MAX TRK NO. THIS DEVICE\n         BL    *+8                OK\n         LA    R1,31              LAST ENTRY\n         SLL   R1,2\n         SR    R15,R15\n         ICM   R15,3,IOSSKCC      SEEK CYL\n         ST    R15,DOUBCYL\n         SLL   R15,7\n         AR    R1,R15             VOLTAB ENTRY OFFSET\n         L     R15,VOLTAB\n         AR    R15,R1             VOLTAB ENTRY ADDR\n         L     R1,0(0,R15)\n         A     R1,=F'1'\n         ST    R1,0(0,R15)\n         L     R1,VOLSEEK\n         A     R1,=F'1'\n         ST    R1,VOLSEEK\n         DROP  R14                                          *HMD 06/82*\n         MVC   SEEKPRT+1(120),=CL120'CYL NNNN   TRK NN'\n         UNPK  SEEKPRT+5(5),DOUBCYL+2(3)\n         MVI   SEEKPRT+9,C' '\n         NC    SEEKPRT+5(4),=4X'0F'\n         TR    SEEKPRT+5(4),=C'0123456789ABCDEF'\n         UNPK  SEEKPRT+16(3),DOUBTRK+3(2)\n         MVI   SEEKPRT+18,C' '\n         NC    SEEKPRT+16(2),=4X'0F'\n         TR    SEEKPRT+16(2),=C'0123456789ABCDEF'\n         PUT   SYSSEEK,SEEKPRT\n         SPACE 1\nDEVBUSY2 BCT   R3,DEVBUSY1\n         LM    R2,R12,VOLSAVE\n         CLOSE (SYSSEEK)\n         BR    R8\n         EJECT\n         SPACE 3\nNEXTVOL  BAL   R14,FREECORE\n         XC    START0(LENGTH0),START0 WHOLESALE ZEROING OF CORE\n         SR    R0,R0\n         ST    R0,BUFPTR\n         MVC   CURLINES,=H'999'\n         MVI   HEADER,C' '\n         MVC   HEADER+1(L'HEADER-1),HEADER\n         LA    R1,LASTDS1\n         ST    R1,FIRSTDS1\n         LA    R1,HOOKSTRT\n         ST    R1,HOOKSTRT\n         MVC   HWMDS1,EFFS\n         NI    PARMOPT1,255-DIRFLAG\n         SPACE 1\nNEXTDD   TM    PARMOPT2,VOLSOPT\n         BO    NEXTDDCV\n         L     R1,DDLSTPTR\n         LTR   R1,R1\n         BZ    TIOTADV\n         LH    R0,DDNAMLEN\n         SH    R0,=H'8'\n         BM    RETURN\n         STH   R0,DDNAMLEN\n         MVC   VOLDDNAM,0(R1)\n         LA    R1,8(R1)\n         ST    R1,DDLSTPTR\n         B     NMAPSTRT\n         SPACE 1\nTIOTADV  L     R1,TIOTADDD\n         USING TIOENTRY,R1\n         SR    R0,R0\n         IC    R0,TIOELNGH\n         LTR   R0,R0\n         BZ    RETURN\n         MVC   VOLDDNAM,TIOEDDNM\n         AR    R1,R0\n         ST    R1,TIOTADDD\n         DROP  R1\n         SPACE 1\nNMAPSTRT LA    R0,8\n         LA    R1,NOMAPDDS\n         CLC   VOLDDNAM(5),=C'SYS00'   CHECK FOR DAIR DDNAME  P.A.S.\n*        **** THIS IS CAUSED BY DAIR FOR THE CVOL CATALOG ***P.A.S.\n         BE    NEXTDD      IF FOUND, DO NOT MAP THIS VOL\nNMAPSRCH CLC   VOLDDNAM,0(R1)\n         BE    NOMAPFND\n         BXH   R1,R0,NMAPSRCH\n         SPACE 1\nNOMAPFND LA    R0,VOLDDNAM\n         CR    R0,R1\n         BNE   NEXTDD\n         B     TYPEDEV\n         SPACE 1\nNEXTDDCV LH    R0,CURVOL\n         CH    R0,NUMVOLS\n         BNL   RETURN\n         AH    R0,=H'1'\n         STH   R0,CURVOL\n         BAL   R14,CONVERT\n         MVC   CURVOLNM,CONVUNPK+10\n         SPACE 1\nTYPEDEV  DEVTYPE VOLDDNAM,DEVTYPE,DEVTAB,RPS\n         BXH   R15,R15,ERRNODD\n         CLI   DEVTYPE+2,UCB3DACC\n         BNE   ERRNOTDA\n         SPACE 1\n         MVC   DEVTABND,DEVTYPE+3\n         LA    R0,DEVENTLN\n         LA    R1,DEVTABLE\nDEVLOOP  CLC   DEVTABND(1),0(R1)\n         BE    DEVNTFND\n         BXH   R1,R0,DEVLOOP\n         SPACE 1\nDEVNTFND CLC   1(7,R1),DEVTABND+1\n         BE    ERRUNKDV\n         ST    R1,DEVTABPT\n         EJECT\n***** THIS SECTION WILL TELL THE DIFFERENCE BETWEEN THE 2 3340 MODELS.\n***** THE 3340 HAS 1 UCBTYPE FOR BOTH 35M/70M.\n***** THIS SECTION WILL LOOK FOR THE X'015D' NUMBER OF CYLS....35M\n*****   ELSE THE NUMBER OF CYLS (70M) WILL BE X'02BA'...\n         SPACE 1\n         CLI   DEVTYPE+3,X'0A'   TEST FOR A 3340-?\n         BNE   RVDISK    IF NOT 3340...BYPASS\n         CLC   DEVTYPE+8(2),=X'015D'    TEST FOR A 35M 3340 TYPE\n         BE    RVDISK   IF IT IS A 35MEG...NO NEED TO CHANGE DESC\n         MVC   6(2,R1),=C'70'   MOVE A \"70M\" ON DESC OF UNIT\n         SPACE 1\n*** THIS SECTION WILL DETERMINE IF THE DISK IS REAL, OR MASS STORAGE\n         SPACE 1\nRVDISK   TM    DEVTYPE+2,X'08'   TEST IF REAL/VIRT DASD\n         BZ    DEVCON   BIT=0, REAL     BIT=1, VIRTUAL\n         MVC   6(9,R1),=C'VIRT VOL.' MOVE \"VIRT\" DESC OF UNIT\n         SPACE 1\n******** THIS SECTION WILL LOAD THE CONSTANTS FROM THE \"DEVTYPE\" TO\n********   BE USED BY THE HOMEMADE CCHHR CONVERT ROUTINES.....\n*\nDEVCON   MVC   DEVCONV2(2),DEVTYPE+10    LOW ORDER  CC\n         MVC   DEVCONV1(1),DEVTYPE+11     HIGH ORDER CC\n         MVI   DEVCONV1+1,X'00'      FINISH HIGH ORDER CC\n         MVC   DEVCONV3(2),=X'0000'   ZERO HIGH ORDER HH\n         MVC   DEVCONV4(2),=X'0001'   LOW ORDER  HH\n         MVC   TRKSPCYL(2),DEVTYPE+10    TRKS/CYL\n         SR    R1,R1\n         LH    R1,DEVTYPE+8    LOAD  CYL PER VOLUME\n         MH    R1,DEVTYPE+10   MULT \"CYL/VOL\" BY \"TRKS/CYL\"\n         STH   R1,TRKSPVOL    RESULT IS  \"TRACKS/VOLUME\"\n*\n         MVC   DCBDDNAM+(PDSDCB-IHADCB),VOLDDNAM\n         MVC   DCBDDNAM+(VTOCDCB-IHADCB),VOLDDNAM\n         SPACE 1\n         RDJFCB MF=(E,OPENLIST)\n         TM    JFCBTSDM,X'20'\n         BO    ERRNOTDA\n         MVI   JFCBDSNM,X'04'\n         MVC   JFCBDSNM+1(43),JFCBDSNM\n         OI    JFCBTSDM,X'08'\n         SPACE 1\n         LH    R1,NCPPARM\n         SR    R0,R0\n         IC    R0,JFCNCP\n         MVI   JFCNCP,0\n         LTR   R0,R0\n         BZ    SAVENCP\n         LR    R1,R0\nSAVENCP  ST    R1,RENCP\n         OI    DCBOPTCD+(VTOCDCB-IHADCB),DCBOPTC\n         CH    R1,=H'1'\n         BNE   SETNCP\n         SR    R1,R1\n         NI    DCBOPTCD+(VTOCDCB-IHADCB),255-DCBOPTC\nSETNCP   STC   R1,DCBNCP+(VTOCDCB-IHADCB)\n         SPACE 1\n         OPEN  TYPE=J,MF=(E,OPENLIST)\n         TM    DCBOFLGS+(VTOCDCB-IHADCB),DCBOFOPN\n         BZ    ERRNOPEN\n         L     R2,DCBDEBAD+(VTOCDCB-IHADCB)\n         L     R2,DEBUCBAD(,R2)                             *HMD 06/82*\n         SPACE 1\n********  THIS SECTION DELETED    4/1/75    P.A.S.\n********  IT WAS USED FOR DATA CELLS...NO LONGER SUPPORTED\n         SPACE 1\n         USING UCBOB,R2\nMAINUCB  MVC   VTOCTTR,UCBVTOC\n         MVC   VOLSERNO,UCBVOLI\n         MVC   VOLSTAT,UCBSTAT\n         MVC   HEAD1UCB,UCBNAME     MOVE EBCIDIC UCB ADDR FOR HEADN\n         TM    UCBSTAB,UCBBPUB    TEST FOR PUBLIC MOUNT\n         BNO   *+10\n         MVC   HEAD1MT,=C'PUBLIC  '\n         TM    UCBSTAB,UCBBPRV    TEST FOR PRIVATE\n         BNO   *+10\n         MVC   HEAD1MT,=C'PRIVATE '\n         TM    UCBSTAB,UCBBSTR   TEST FOR STORAGE\n         BNO   *+10\n         MVC   HEAD1MT,=C'STORAGE '\n         TM    UCBSTAB,UCBPGFL    TEST IF PAGING DEVIC\n         BNO   *+10\n         MVC   HEAD1MT,=C'*PAGING*'\n         TM    UCBSTAT,UCBSYSR    TEST FOR SYS-RES\n         BNO   *+10\n         MVC   HEAD1MT,=C'*SYSRES*'\n         SPACE 1\n         MVC   HEAD1MTR,=C'REMOV'\n         TM    UCBSTAT,UCBRESV\n         BNO   *+10\n         MVC   HEAD1MTR,=C'RSERV'\n         TM    UCBSTAT,UCBPRES\n         BNO   *+10\n         MVC   HEAD1MTR,=C'RSDNT'\n         SPACE 1\nCOMONUCB ST    R2,UCBADDR\n         ST    R2,VOLUCB\n         DROP  R2\n         MVC   HEAD1VOL,VOLSERNO\n         MVC   HEADMID(81),HEAD1\n         TM    PARMOPT2,SMAPOPT\n         BZ    *+8\n         BAL   R8,DEVBUSY            BUILD VOL TAB\n         SPACE 1\n         ENQ   MF=(E,ENQVTOC)\n         NI    DEQGATE,X'0F'\n         SPACE 1\n         LH    R1,VTOCTT\n         BAL   R14,TTCONVRT\n         MVC   VTOCCCHH,CCHH\n         MVI   VTDSCBTR+1,255\n         SPACE 1\n         SR    R4,R4\n         IC    R4,DCBKEYLE+(VTOCDCB-IHADCB)\n         AH    R4,DCBBLKSI+(VTOCDCB-IHADCB)\n         AH    R4,=H'20'\n         ST    R4,REBLKSIZ\n         L     R5,RENCP\n         ST    R5,RECOUNT\n         LR    R1,R4\n         MR    R0,R5\n         LR    R0,R1\n         ST    R0,REGETSIZ\n         GETMAIN EC,LV=(0),A=REBLOCK@\n         BXH   R15,R15,ERRNOCOR\n         L     R2,REBLOCK@\n         ST    R2,RENEXT@\n         LA    R3,VTOCDCB\n         SPACE 1\nREADINIT XC    0(20,R2),0(R2)\n         LA    R4,20(R2)\n         READ  (2),SF,(3),(4),MF=E\n         A     R2,REBLKSIZ\n         BCT   R5,READINIT\n         SPACE 1\n         LA    R4,DS4LEN\n         BAL   R14,GETCORE\n         ST    R3,FMT4AD\n         LR    R6,R3\n         USING DS4,R6\n         BAL   R14,VTOCREAD\n         BAL   R14,ABDUMP\n         CLI   DS4IDFMT,C'4'\n         MVI   BADDSTYP,C'4'\n         LR    R8,R6\n         BNE   ERRNOTFX\n         MVI   FM4COUNT+1,1\n         TM    DS4VTOCI,X'04'\n         BZ    *+8\n         OI    PARMOPT1,DIRFLAG\n         MVC   HOOKLCCH(20),HOOKINIT\n         LA    R2,HOOKPTR\n         BAL   R14,HOOKUP\n         SR    R0,R0\n         IC    R0,DS4DEVDT\n         STH   R0,VTDSCBTR\n         TM    PARMOPT2,RESETOPT\n         BNZ   *+10\n         MVC   HWMDS1,DS4HPCHR\n         MVC   HOOKLCCH(8),DS4VTOCE+2\n         LA    R2,DS4VTOCE\n         BAL   R14,F1EXTCNV\n         STH   R0,HOOKNTRK\n         STH   R0,VTOCSIZE\n         MVC   HOOKLOTT(4),LOWTT\n         MVI   HOOKTYPE,C'4'\n         MVC   HOOKSEQN,DS4VTOCE+1\n         MVC   HOOKIDPT,=A(VTOCMSG)\n         LA    R2,HOOKPTR\n         BAL   R14,HOOKUP\n         SPACE 1\n         LA    R4,DS5LEN\n         BAL   R14,GETCORE\n         ST    R3,FMT5AD\n         LR    R8,R3\n         USING DS5,R8\n         BAL   R14,VTOCREAD\n         BAL   R14,ABDUMP\n         CLI   DS5FMTID,C'5'\n         MVI   BADDSTYP,C'5'\n         BNE   ERRNOTFX\n         MVI   FM5COUNT+1,1\n         BAL   R14,F56HOOK\n         SR    R0,R0\n         ST    R0,DS5F5PTR\n         DROP  R6,R8\n         EJECT\n         SPACE 3\nNEXTFM1  LA    R4,DS1LEN\n         BAL   R14,GETCORE\n         LR    R6,R3\n         USING DS1,R6\nREADFM1  BAL   R14,VTOCREAD\n         B     READFM5\n         SR    R1,R1\n         IC    R1,DS1FMTID\n         N     R1,=F'15'\n         CH    R1,=H'6'\n         BNH   *+8\n         BAL   R14,ABDUMP\n         SLL   R1,1                *2\n         LH    R2,FMXCOUNT(R1)\n         LA    R2,1(R2)\n         STH   R2,FMXCOUNT(R1)\n         LTR   R1,R1\n         BNZ   CHECKDS1\n         CLI   HWMINDIC,1\n         BE    READFM1\n         MVC   HWMNEW,DS1FDAD+3\n         MVI   HWMINDIC,1\n         B     READFM1\n         SPACE 1\nCHECKDS1 CLI   DS1FMTID,C'1'\n         BNE   READFM1\n         MVC   HWMNEW,DS1FDAD+3\n         MVI   HWMINDIC,1\n         L     R2,FIRSTDS1\n         L     R3,=A(FIRSTDS1-(DS1F1PTR-DS1))\nCOMPFM1  CLC   DS1DSNAM,DS1DSNAM-DS1(R2)\n         BL    INSRTFM1\n         LR    R3,R2\n         L     R2,DS1F1PTR-DS1(R2)\n         B     COMPFM1\nINSRTFM1 ST    R2,DS1F1PTR\n         ST    R6,DS1F1PTR-DS1(R3)\n         SR    R0,R0\n         ST    R0,DS1F3PTR\n         B     NEXTFM1\n         SPACE 1\n         DROP  R6\n         EJECT\n         SPACE 3\nREADFM5  BAL   R14,CLOSVTOC\n         L     R6,FMT4AD\n         USING DS4,R6\n         L     R8,FMT5AD\n         USING DS5,R8\n         B     CHECKFM5\n         SPACE 1\nNEXTFM5  LA    R4,DS5LEN\n         BAL   R14,GETCORE\n         ST    R3,DS5F5PTR\n         LA    R2,DS5PTRDS\n         LR    R8,R3\n         BAL   R14,OBTAIN\n         CLI   DS5FMTID,C'5'\n         MVI   BADDSTYP,C'5'\n         BNE   ERRNOTFX\n         BAL   R14,F56HOOK\n         SR    R0,R0\n         ST    R0,DS5F5PTR\nCHECKFM5 CLC   DS5PTRDS,ZEROES\n         BNE   NEXTFM5\n         SPACE 1\n         CLC   DS4F6PTR,ZEROES\n         BE    READFM23\n         LA    R4,DS6LEN\n         BAL   R14,GETCORE\n         ST    R3,FMT6AD\n         LA    R2,DS4F6PTR\n         SPACE 1\nREADFM6  LR    R8,R3\n         USING DS6,R8\n         BAL   R14,OBTAIN\n         CLI   DS6FMTID,C'6'\n         MVI   BADDSTYP,C'6'\n         BNE   ERRNOTFX\n         BAL   R14,F56HOOK\n         SR    R3,R3\n         ST    R3,DS6F6PTR\n         CLC   DS6PTRDS,ZEROES\n         BE    READFM23\n         LA    R4,DS6LEN\n         BAL   R14,GETCORE\n         ST    R3,DS6F6PTR\n         LA    R2,DS6PTRDS\n         B     READFM6\n         SPACE 1\n         DROP  R6,R8\n         EJECT ,\n         SPACE 3\nREADFM23 L     R6,=A(FIRSTDS1-(DS1F1PTR-DS1))\n         USING DS1,R6\nNEXTFM23 L     R6,DS1F1PTR\n         CLC   DS1DSNAM,LASTDS1\n         BE    VTOCUPDT\n         CLC   DS1PTRDS,ZEROES\n         BE    NEXTFM23\n         SPACE 2\n         LA    R4,DS3LEN\n         BAL   R14,GETCORE\n         LR    R8,R3\n         USING DS3,R8\n         LA    R2,DS1PTRDS\n         BAL   R14,OBTAIN\n         ST    R8,DS1F3PTR\n         SR    R0,R0\n         ST    R0,DS3F2PTR\n         TM    DS1DSORG,DCBDSGIS\n         BNO   CHECKFM3\n         USING DS2,R8\n         CLI   DS2FMTID,C'2'\n         BNE   CHECKFM3\n         CLC   DS2PTRDS,ZEROES\n         BE    NEXTFM23\n         LA    R4,DS3LEN\n         BAL   R14,GETCORE\n         ST    R3,DS2F3PTR\n         LA    R2,DS2PTRDS\n         BAL   R14,OBTAIN\n         ST    R8,DS3F2PTR-DS3(,R3)\n         LR    R8,R3\n         USING DS3,R8\n         SPACE 1\nCHECKFM3 CLI   DS3FMTID,C'3'\n         BE    NEXTFM23\n         MVI   BADDSTYP,C'3'\n         B     ERRNOTFX\n         SPACE 1\n         DROP  R6,R8\n         EJECT ,\n         SPACE 1\nVTOCUPDT TM    PARMOPT2,RESETOPT\n         BZ    VTOCPRT\n         TM    PARMOPT1,DIRFLAG\n         BO    VTOCPRT\n         OI    OPENFLAG,OPENUPDT\n         OPEN  TYPE=J,MF=(E,OPENLIST)\n         TM    DCBOFLGS+(VTOCDCB-IHADCB),DCBOFOPN\n         BO    *+8\n         BAL   R14,ABEND\n         NI    OPENFLAG,255-OPENUPDT\n         SPACE 1\nVTOCUPRD READ  VTOCDECB,SF,MF=E\n         CHECK VTOCDECB\n         LA    R1,=CL11'VTOC READ.'\n         BAL   R14,SYNADCHK\n         MVC   DS4FDAD+(CAMLIST-DS4),DCBFDAD+(VTOCDCB-IHADCB)\n         SPACE 1\n         CLI   DS4IDFMT+(CAMLIST-DS4),C'4'\n         MVI   BADDSTYP,C'4'\n         LA    R8,CAMLIST\n         BNE   ERRNOTFX\n         MVC   HWMOLD,DS4HPCHR+(CAMLIST-DS4)\n         MVC   DS4HPCHR+(CAMLIST-DS4),HWMNEW\n         SPACE 1\n         WRITE VTOCDECB,SF,MF=E\n         CHECK VTOCDECB\n         LA    R1,=CL11'VTOC WRITE.'\n         BAL   R14,SYNADCHK\n         L     R1,FMT4AD\n         MVC   0(DS4LEN,R1),CAMLIST\n         SPACE 1\nVTOCUPCL CLOSE (VTOCDCB)\n         BAL   R14,DEQVTOC\n         SPACE 1\n         MVC   BUF+1(31),=C'VTOC RESET INFO:  OLD FMT1 HWM='\n         MVI   BUF+36,C'.'\n         MVI   BUF+41,C'.'\n         UNPK  TRAREA,HWMOLD(8)\n         TR    TRAREA,TRTABLE\n         MVC   BUF+32(4),TRAREA\n         MVC   BUF+37(4),TRAREA+4\n         MVC   BUF+42(2),TRAREA+8\n         SPACE 1\n         MVC   BUF+47(13),=C'NEW FMT1 HWM='\n         MVI   BUF+64,C'.'\n         MVI   BUF+69,C'.'\n         UNPK  TRAREA,HWMNEW(8)\n         TR    TRAREA,TRTABLE\n         MVC   BUF+60(4),TRAREA\n         MVC   BUF+65(4),TRAREA+4\n         MVC   BUF+70(2),TRAREA+8\n         MVI   BUF,SPACE3AP\n         BAL   R14,PRINT\n         EJECT\n         SPACE 1\nVTOCPRT  BAL   R14,DEQVTOC\n         L     R6,FMT4AD\n         USING DS4,R6\n         SPACE 1\n         MVC   BUF+1(21),=C'DEVICE DESCRIPTION:  '\n         MVC   BUF+22(5),=C'TYPE='\n         L     R2,DEVTABPT\n         MVC   BUF+27(15),1(R2)\n         MVC   BUF+42(2),=C'  '                             *HMD 06/82*\n         SPACE 1\n         MVC   BUF+44(7),=C'NOCYLS='\n         LA    R2,DS4DEVSZ\n         BAL   R14,CONVERT2\n         MVC   BUF+51(5),CONVERTD\n         SPACE 1\n         MVC   BUF+58(9),=C'TRKS/CYL='\n         LA    R2,DS4DEVSZ+2\n         BAL   R14,CONVERT2\n         MVC   BUF+67(5),CONVERTD\n         SPACE 1\n         MVC   BUF+74(8),=C'TRKSIZE='\n         LA    R2,DS4DEVTK\n         BAL   R14,CONVERT2\n         MVC   BUF+82(5),CONVERTD\n         SPACE 1\n         MVC   BUF+89(12),=C'MAX BLKSIZE='\n         LA    R2,DEVTYPE+6\n         BAL   R14,CONVERT2\n         MVC   BUF+101(5),CONVERTD\n         SPACE 1\n         MVC   BUF+108(9),=C'DSCB/TRK='\n         LA    R2,DS4DEVDT\n         BAL   R14,CONVERT1\n         MVC   BUF+117(3),CONVERTD\n         SPACE 1\n         MVC   BUF+122(8),=C'PDS/TRK='\n         LA    R2,DS4DEVDB\n         BAL   R14,CONVERT1\n         MVC   BUF+130(3),CONVERTD\n         MVI   BUF,SPACE2AP\n         BAL   R14,PRINT\n         SPACE 1\n         MVC   BUF+1(11),=C'VTOC DESCR:'\n         MVC   BUF+13(7),=C'R/W=0/0'\n         CLI   DS4SECLV,0\n         BE    VTPRDSCB\n         UNPK  TRAREA,DS4SECLV(8)\n         TR    TRAREA,TRTABLE\n         MVC   BUF+17(1),TRAREA\n         MVC   BUF+19(1),TRAREA+1\n         SPACE 1\nVTPRDSCB MVC   BUF+23(6),=C'DSCBS='\n         SR    R0,R0\n         IC    R0,DS4DEVDT\n         MH    R0,VTOCSIZE\n         BAL   R14,CONVERT\n         MVC   BUF+29(5),CONVERTD\n         SPACE 1\n         MVC   BUF+35(6),=C'AVAIL='\n         LA    R2,DS4DSREC\n         BAL   R14,CONVERT2\n         MVC   BUF+41(5),CONVERTD\n         SPACE 1\n         MVC   BUF+47(9),=C'VTOC EXT='\n         MVI   BUF+60,C'.'\n         MVI   BUF+65,C'-'\n         MVI   BUF+70,C'.'\n         UNPK  TRAREA,DS4VTOCE+2(8)\n         TR    TRAREA,TRTABLE\n         MVC   BUF+56(4),TRAREA\n         MVC   BUF+61(4),TRAREA+4\n         UNPK  TRAREA,DS4VTOCE+6(8)\n         TR    TRAREA,TRTABLE\n         MVC   BUF+66(4),TRAREA\n         MVC   BUF+71(4),TRAREA+4\n         SPACE 1\n         MVC   BUF+78(9),=C'FMT1 HWM='\n         MVI   BUF+91,C'.'\n         MVI   BUF+96,C'.'\n         UNPK  TRAREA,DS4HPCHR(8)\n         TR    TRAREA,TRTABLE\n         MVC   BUF+87(4),TRAREA\n         MVC   BUF+92(4),TRAREA+4\n         MVC   BUF+97(2),TRAREA+8\n         SPACE 1\n         MVC   BUF+101(7),=C'NUMALT='\n         LA    R2,DS4NOATK\n         BAL   R14,CONVERT2\n         MVC   BUF+108(5),CONVERTD\n         SPACE 1\n       LH   R2,TRKSPVOL    LOAD TRKS PER VOL TOTAL\n       SH   R2,DS4NOATK     SUBTRACT OFF ALTERNATES LEFT\n       STH    R2,TRKSPVOL     TOTAL PER VOL = OLD TOT - ALTS\n             SPACE   1\n         MVC   BUF+114(8),=C'NEXTALT='\n         UNPK  TRAREA,DS4HCCHH(8)\n         TR    TRAREA,TRTABLE\n         MVC   BUF+122(4),TRAREA\n         MVI   BUF+126,C'.'\n         MVC   BUF+127(4),TRAREA+4\n         MVI   BUF,SPACE2AP\n         BAL   R14,PRINT\n         SPACE 1\n         MVC   BUF+1(16),=C'AVAILABLE SPACE:'\n         LH    R0,AVAILSPC\n         BAL   R14,CONVERT\n         MVC   BUF+18(5),CONVEDIT+7\n         SPACE 1\n         MVC   BUF+24(9),=C'TRACKS IN'\n         LH    R0,AVAILEXT\n         BAL   R14,CONVERT\n         MVC   BUF+34(4),CONVEDIT+8\n         SPACE 1\n         MVC   BUF+39(18),=C'EXTENTS, INCLUDING'\n         LH    R0,AVAILCYL\n         BAL   R14,CONVERT\n         MVC   BUF+58(4),CONVEDIT+8\n         SPACE 1\n         MVC   BUF+63(34),=C'FULL CYLINDERS.  LARGEST EXTENT IS'\n         LA    R2,F5LARGST\n         BAL   R14,CONVERT2\n         MVC   BUF+98(5),CONVEDIT+7\n         SPACE 1\n         MVC   BUF+104(14),=C'CYLINDERS PLUS'\n         LA    R2,F5LARGST+2\n         BAL   R14,CONVERT1\n         MVC   BUF+119(3),CONVEDIT+9\n         SPACE 1\n         MVC   BUF+123(7),=C'TRACKS.'\n         MVI   BUF,SPACE2AP\n         BAL   R14,PRINT\n         SPACE 1\n         TM    DS4VSAM,X'80'     TEST FOR VSAM OWNERSHIP BIT TURNED ON\n         BZ    NOVSAM            IF NOT ON....NOT OWNED BY VSAM\n         MVC   BUF+2(41),=C'*** THIS PACK IS OWNED BY A VSAM CATALOG '\n         MVI   BUF,SPACE2AP\n         BAL   R14,PRINT\n         CLC   DS4VTOCE+24(2),ZEROES      CHECK FOR A \"CRA\" POINTER\n         BE    NOVSAM      IF ZERO, NO POINTER....NO \"CRA\"\n         MVC   CRATRACK(2),DS4VTOCE+24  MOVE CRA ADDRESS FOR ALIGNMENT\n         MVC   BUF+2(41),=C'*** THIS PACK CONTAINS A C.R.A. AT TRACK:'\n         LH    R0,CRATRACK     LOAD UP 2 BYTE CRA ADDRESS\n         BAL   R14,CONVERT    GO CONVERT TO EBCIDIC\n         MVC   BUF+43(5),CONVEDIT+7     MOVE TO PRINT LINE\n         MVI   BUF,SPACE2AP\n         BAL   R14,PRINT\n         SPACE 1\nNOVSAM   EQU   *\n         TM    PARMOPT1,DIRFLAG\n         BZ    NODIRFLG\n         MVC   BUF+1(59),=C'*** WARNING - POSSIBLE VTOC ERRORS EXIST ONX\n                THIS VOLUME ***'\n         MVI   BUF,SPACE2AP\n         BAL   R14,PRINT\n         SPACE 3\nNODIRFLG TM    PARMOPT1,DUMPOPT+SDUMPOPT+DIRFLAG\n         BZ    FM1PRINT\n         SPACE 1\n         LR    R2,R6\n         LA    R3,DS4FDAD\n         BAL   R14,DUMPDSCB\n         SPACE 1\n         L     R8,FMT5AD\n         USING DS5,R8\nDMPF5TST LTR   R8,R8\n         BZ    ENDUMPF5\n         LR    R2,R8\n         LA    R3,DS5FDAD\n         BAL   R14,DUMPDSCB\n         L     R8,DS5F5PTR\n         B     DMPF5TST\n         SPACE 1\nENDUMPF5 L     R8,FMT6AD\n         USING DS6,R8\nDMPF6TST LTR   R8,R8\n         BZ    ENDUMPF6\n         LR    R2,R8\n         LA    R3,DS6FDAD\n         BAL   R14,DUMPDSCB\n         L     R8,DS6F6PTR\n         B     DMPF6TST\n         SPACE 1\nENDUMPF6 MVI   BUF,SPACE2IM\n         BAL   R14,PRINT\n         SPACE 1\n         DROP  R6,R8\n         EJECT\nFM1PRINT L     R6,=A(FIRSTDS1-(DS1F1PTR-DS1))\n         USING DS1,R6\n         LA    R1,HEAD1A\n         ST    R1,BUFPTR\n         PUT   PRINTDCB,HEADER1\n         PUT   PRINTDCB,HEADER2\n         LH    R0,CURLINES\n         AH    R0,=H'2'\n         STH   R0,CURLINES\n         SPACE 2\nFM1PRLOP L     R6,DS1F1PTR\n         CLC   DS1DSNAM,LASTDS1\n         BE    FM1PREND\n         SR    R7,R7\n         L     R8,DS1F3PTR\n         USING DS3,R8\n         LTR   R8,R8\n         BZ    FM1GOHK\n         CLI   DS3FMTID,C'3'\n         BE    FM1GOHK\n         LR    R7,R8\n         USING DS2,R7\n         L     R8,DS2F3PTR\nFM1GOHK  BAL   R14,F13HOOK\n         LA    R2,1\n         TM    PARMOPT1,EXTNTOPT\n         BZ    FM1TSTIS\n         LH    R1,NUMEXT\n         LA    R2,2(R1,R2)\nFM1TSTIS LTR   R7,R7\n         BZ    FM1TSTDP\n         TM    PARMOPT2,ISAMOPT\n         BZ    *+8\n         AH    R2,=H'4'\nFM1TSTDP TM    PARMOPT1,DUMPOPT\n         BZ    FM1LKAHD\n         AH    R2,=H'4'\n         LTR   R7,R7\n         BZ    *+8\n         AH    R2,=H'4'\n         LTR   R8,R8\n         BZ    FM1LKAHD\n         AH    R2,=H'4'\nFM1LKAHD BAL   R14,PRLKAHED\n         SPACE 1\n         MVC   L1DSNAME,DS1DSNAM\n         SPACE 1\nFM1VOLSR MVC   L1SERIAL,VOLSERNO                            *HMD 06/82*\n         SPACE 1\nFM1SECUR MVC   L1SECUR,=C'-/-'\n         TM    DS1DSIND,X'10'  TEST FOR PASSWORD FOR R & W\n         BZ    FM1CREDT     IF NO BITS....NO PASSWORD\n         MVI   L1SECUR+2,C'W'      AT LEAST \"WRITE\" IF ANY\n         TM    DS1DSIND,X'04'      TEST FOR ONLY \"WRITE\"..READ OK\n         BO    FM1CREDT       IF ON,  \"READ\" NOT PROTECTED\n         MVI   L1SECUR,C'R'      INDICATE \"READ\" PROTECT\n         SPACE 1\nFM1CREDT LA    R2,DS1CREDT\n         LA    R3,L1CREDT\n         BAL   R14,DATEDIT\n         SPACE 1\n         LA    R2,DS1EXPDT\n         LA    R3,L1EXPDT\n         BAL   R14,DATEDIT\n         SPACE 1\n         LA    R2,DS1REFD   IF YOU GET AN ERROR ASSEMBLING THIS AXC\n         LA    R3,L1REFDT   IT IS BECAUSE YOU DO NOT HAVE SU60  AXC\n         BAL   R14,DATEDIT  JUST NO-OP THESE THREE INSTRUCTIONS AXC\n         SPACE 1\nFM1DSORG LA    R2,L1DSORG\n         TM    DS1DSORG,DCBDSGIS\n         BZ    FM1DSO1\n         MVC   0(2,R2),=C'IS'\n         LA    R2,2(R2)\nFM1DSO1  TM    DS1DSORG,DCBDSGPS\n         BZ    FM1DSO2\n         MVC   0(2,R2),=C'PS'\n         LA    R2,2(R2)\nFM1DSO2  TM    DS1DSORG,DCBDSGDA\n         BZ    FM1DSO3\n         MVC   0(2,R2),=C'DA'\n         LA    R2,2(R2)\nFM1DSO3  TM    DS1DSORG,DCBDSGCX\n         BZ    FM1DSO6              AXC\n         MVC   0(2,R2),=C'CX'\n         LA    R2,2(R2)\n*FM1DSO4 TM    DS1DSORG,=X'08'      AXC\n*        BZ    FM1DSO5              AXC\n*        MVC   0(2,R2),=C'CQ'       AXC\n*        LA    R2,2(R2)             AXC\n*FM1DSO5 TM    DS1DSORG,=X'04'      AXC\n*        BZ    FM1DSO6              AXC\n*        MVC   0(2,R2),=C'MQ'       AXC\n*        LA    R2,2(R2)             AXC\nFM1DSO6  TM    DS1DSORG,DCBDSGPO\n         BZ    FM1DSO7\n         MVC   0(2,R2),=C'PO'\n         LA    R2,2(R2)\nFM1DSO7  TM    DS1DSORG+1,DCBDSGGS\n         BZ    FM1DSO8\n         MVC   0(2,R2),=C'GS'\n         LA    R2,2(R2)\nFM1DSO8  TM    DS1DSORG+1,DCBDSGTX\n         BZ    FM1DSO9\n         MVC   0(2,R2),=C'TX'\n         LA    R2,2(R2)\nFM1DSO9  TM    DS1DSORG+1,DCBDSGTQ\n         BZ    FM1DSO10\n         MVC   0(2,R2),=C'TQ'\n         LA    R2,2(R2)\nFM1DSO10 TM    DS1DSORG+1,DCBACBM\n         BZ    FM1DSO11\n         MVC   0(2,R2),=C'AM'\n         LA    R2,2(R2)\nFM1DSO11 TM    DS1DSORG+1,DCBDSGTR\n         BZ    FM1DSO12\n         MVC   0(2,R2),=C'TR'\n         LA    R2,2(R2)\nFM1DSO12 TM    DS1DSORG,DCBDSGU\n         BZ    *+8\n         MVI   0(R2),C'U'\n         SPACE 1\n         LA    R2,L1RECFM\n         TM    DS1RECFM,DCBRECU\n         BZ    FM1RECF1\n         MVI   0(R2),C'U'\n         BO    FM1RECF1\n         TM    DS1RECFM,DCBRECF\n         MVI   0(R2),C'F'\n         BO    FM1RECF1\n         MVI   0(R2),C'V'\nFM1RECF1 LA    R2,1(R2)\n         TM    DS1RECFM,DCBRECTO\n         BZ    FM1RECF2\n         MVI   0(R2),C'T'\n         LA    R2,1(R2)\nFM1RECF2 TM    DS1RECFM,DCBRECBR\n         BZ    FM1RECF3\n         MVI   0(R2),C'B'\n         LA    R2,1(R2)\nFM1RECF3 TM    DS1RECFM,DCBRECSB\n         BZ    FM1RECF4\n         MVI   0(R2),C'S'\n         LA    R2,1(R2)\nFM1RECF4 TM    DS1RECFM,DCBRECCC\n         BNM   FM1BLKSZ\n         TM    DS1RECFM,DCBRECCA\n         MVI   0(R2),C'A'\n         BO    FM1BLKSZ\n         MVI   0(R2),C'M'\n         SPACE 1\nFM1BLKSZ LA    R2,DS1BLKL\n         BAL   R14,CONVERT2\n         MVC   L1BLKSIZ,CONVEDIT+7\n         SPACE 1\n         LA    R2,DS1LRECL\n         BAL   R14,CONVERT2\n         MVC   L1LRECL,CONVEDIT+7\n         SPACE 1\n         LA    R2,DS1KEYL\n         BAL   R14,CONVERT1\n         MVC   L1KEYLEN,CONVEDIT+9\n         SPACE 1\n         UNPK  TRAREA,DS1OPTCD(8)\n         TR    TRAREA,TRTABLE\n         MVC   L1OPTCD,TRAREA\n         SPACE 1\n         L     R0,F1TRKAL\n         BAL   R14,CONVERT\n         MVC   L1TRKAL,CONVEDIT+7\n         SPACE 1\n         CLC   DS1LSTAR(5),ZEROES\n         BE    FM1NOEPV\n         LH    R0,DS1LSTAR\n         CLI   DS1LSTAR+2,0\n         BE    *+8\n         AH    R0,=H'1'\n         BAL   R14,CONVERT\n         MVC   L1TRKUS,CONVEDIT+7\n         SPACE 1\nFM1NOEPV LA    R2,DS1NOEPV\n         BAL   R14,CONVERT1\n         MVC   L1NOEPV,CONVEDIT+10\n         SPACE 1\n         LA    R2,DS1SCALO+1\n         BAL   R14,CONVERT3\n         MVC   L1SECQU,CONVEDIT+7\n         C     R0,=F'99999'\n         BNH   FM1SCALO\n         MVC   L1SECQU,STARS\n         SPACE 1\nFM1SCALO TM    DS1SCALO,X'C0'\n         BNO   FM1SCAL1\n         MVI   L1TYP,C'C'\n         B     FM1SCAL4\nFM1SCAL1 BNZ   FM1SCAL2\n         MVI   L1TYP,C'A'\n         B     FM1SCAL4\nFM1SCAL2 TM    DS1SCALO,X'80'\n         BO    FM1SCAL3\n         MVI   L1TYP,C'B'\n         B     FM1SCAL4\nFM1SCAL3 MVI   L1TYP,C'T'\nFM1SCAL4 LA    R2,L1TYP+1\n         TM    DS1SCALO,X'08'\n         BZ    FM1SCAL5\n         MVI   0(R2),C'C'\n         LA    R2,1(,R2)\nFM1SCAL5 TM    DS1SCALO,X'04'\n         BZ    FM1SCAL6\n         MVI   0(R2),C'M'\n         LA    R2,1(,R2)\nFM1SCAL6 TM    DS1SCALO,X'02'\n         BZ    FM1SCAL7\n         MVI   0(R2),C'A'\n         LA    R2,1(,R2)\nFM1SCAL7 TM    DS1SCALO,X'01'\n         BZ    FM1OPTS\n         MVI   0(R2),C'R'\n         SPACE 1\nFM1OPTS  MVI   BUF,SPACE1AP\n         TM    PARMOPT1,EMPTYOPT     TEST FOR \"EMPTY\" OPTION\n         BO    FM1EM1         IF REQUEST GO TO PROCESS IT\n         TM    PARMOPT2,MODELOPT   TEST FOR \"MODEL\" OPTION\n         BZ    FM1SKTS0   IF NOT MODEL BYPASS..\n*\nFM1EM1   CLC   DS1LSTAR(5),ZEROES   TEST FOR TTR ZEROED...NOT VALID\n         BE    FM1DONXT              IF ALL ZERO...BYPASS\n         CLI   DS1LSTAR+2,0         TEST FOR A TTR OF RECORD ZERO\n         BNE   FM1DONXT             IF NOT ZERO, NON-EMPTY DSN\n         CLC   NUMEXT,ZEROES        TEST FOR ANY VALID EXTENTS\n         BNE   FM1EM2              IF NOT ZERO...EMPTY DATASET.\n         TM    PARMOPT2,MODELOPT    CHECK FOR \"MODEL\" OPTION SELECTED\n         BO    FM1SKTS0      IF SELECTED...PRINT THIS ENTRY\n         B     FM1DONXT    IF NOT MODEL...DON'T INCLUDE IT AS \"EMPTY\"\nFM1EM2   TM    PARMOPT1,EMPTYOPT     CHECK FOR OPTION OF \"EMPTY\"\n         BZ    FM1DONXT  IF NOT SELECTED...DON'T PRINT\n*\nFM1SKTS0 EQU  *\n         TM    PARMOPT1,DUMPOPT\n         BO    FM1XTRAL\n         TM    PARMOPT1,EXTNTOPT\n         BZ    FM1SKTS1\n         CLC   NUMEXT,ZEROES\n         BNE   FM1XTRAL\nFM1SKTS1 TM    PARMOPT2,ISAMOPT\n         BZ    FM1SKTS2\n         LTR   R7,R7\n         BNZ   FM1XTRAL\nFM1SKTS2 TM    PARMOPT1,PDSOPT\n         BZ    FM1GOPRT\n         TM    DS1DSORG,DCBDSGPO\n         BZ    FM1GOPRT\nFM1XTRAL MVI   BUF,SPACE2AP\nFM1GOPRT BAL   R14,PRINT\n         SPACE 1\nFM1SKTS3 EQU   *\n         TM    PARMOPT1,DUMPOPT\n         BZ    FM1EXDMP\n         LA    R2,DS1\n         LA    R3,DS1FDAD\n         BAL   R14,DUMPDSCB\n         LTR   R7,R7\n         BZ    FM1DMP3\n         LA    R2,DS2\n         LA    R3,DS2FDAD\n         BAL   R14,DUMPDSCB\nFM1DMP3  LTR   R8,R8\n         BZ    FM1EXDMP\n         LA    R2,DS3\n         LA    R3,DS3FDAD\n         BAL   R14,DUMPDSCB\n         SPACE 1\nFM1EXDMP TM    PARMOPT1,EXTNTOPT\n         BZ    FM1PDSDP\n         CLC   NUMEXT,ZEROES\n         BE    FM1PDSDP\n         MVC   BUF+10(L'HEAD2DAT),HEAD2DAT\n         MVI   BUF,SPACE0AP\n         BAL   R14,PRINT\n         MVC   BUF+10(L'HEAD2UND),HEAD2UND\n         MVI   BUF,SPACE1AP\n         BAL   R14,PRINT\n         L     R2,LISTEXT\n         LA    R3,BUF+9\n         SR    R4,R4\n         MVI   EXPFLAG,X'FF'\n         SPACE 1\nFM1EXLP  BAL   R14,EXFORMAT\n         LA    R4,4(,R4)\n         L     R2,LISTEXT(R4)\n         LTR   R2,R2\n         BZ    FM1EXLST\n         BAL   R14,PRINT\n         B     FM1EXLP\nFM1EXLST MVI   BUF,SPACE2AP\n         BAL   R14,PRINT\n         SPACE 1\nFM1PDSDP TM    PARMOPT1,PDSOPT\n         BZ    FM1ISDMP\n         TM    DS1DSORG,DCBDSGPO\n         BZ    FM1ISDMP\n         LA    R2,DS1\n         BAL   R14,PDSLIST\n         SPACE 1\nFM1ISDMP TM    PARMOPT2,ISAMOPT\n         BZ    FM1DONXT\n         BAL   R14,ISAMLIST\nFM1DONXT B     FM1PRLOP\n         EJECT\n*\n* G.D.F. ROUTINE TO CONVERT INPUT & OUTPUT DATES TO\n* SAME FORMAT AS CREDAT & EXPDAT FOR DATEDIT ROUTINE\n*\nBINARY   UNPK  DASAVE(3),0(2,R2)  G.D.F.\n         PACK  DATEWORD,DASAVE(2)  G.D.F.\n         CVB   R1,DATEWORD    G.D.F.\n         STC   R1,0(R2)       G.D.F.\n         ZAP   DATEWORD,1(2,R2)  G.D.F.\n         CVB   R1,DATEWORD    G.D.F.\n         STH   R1,DATEWORD    G.D.F.\n         MVC   1(2,R2),DATEWORD  G.D.F.\n         BR    R14            G.D.F.\n*\n* END OF BINARY CONVERT ROUTINE\n*\n         EJECT\nFM1PREND MVI   BUF,SPACE1IM\n         BAL   R14,PRINT\n         MVI   BUF+1,C' '          MOVE TO BLANK OUT LINE\n         MVC   BUF+2(131),BUF+1    BLANK OUT PRINT LINE\n         MVC   BUF+49(14),=C'<<<<< END VTOC'\n         LH    R0,FM1COUNT\n         BAL   R14,CONVERT\n         MVC   BUF+64(4),CONVEDIT+8\n         MVC   BUF+69(15),=C'DATA SETS >>>>>'\n         MVI   BUF,SPACE3AP\n         BAL   R14,PRINT\n         SPACE 1\n         TM    PARMOPT2,SMAPOPT\n         BO    MAPPRINT\n         TM    PARMOPT1,MAPOPT+DIRFLAG\n         BZ    MAPEND\n         SPACE 1\n         DROP  R6,R7,R8\n         EJECT\nMAPPRINT MVC   CURLINES,=H'999'\n         LA    R0,HEAD2A\n         ST    R0,BUFPTR\n         MVI   HEADMID,C' '\n         MVC   HEADMID+1(81),HEADMID\n         MVC   HEAD2VOL,VOLSERNO\n         MVC   HEADMID(40),HEAD2\n         L     R6,HOOKSTRT\n         USING EXTENT,R6\n         L     R4,=F'-1'\n         SR    R5,R5\n         MVI   EXPFLAG,0\n         SPACE 1\nMAPPRLOP CLC   EXTLCCHH,HOOKEND\n         BE    MAPPREND\n         CLC   EXTHITT,TRKSPVOL\n         BNL   MAPINVAL\n         CLC   EXTLOTT,EXTHITT\n         BH    MAPINVAL\n         CLI   EXTTYPE,X'80'\n         BE    MAPGETEX\n         LH    R0,EXTLOTT\n         SR    R0,R4\n         S     R0,=F'1'\n         BZ    MAPTRGET\n         BP    MAPTRMIS\n         BAL   R14,CONVERT\n         MVC   BUF+1(5),CONVEDIT+7\n         MVC   BUF+7(14),=C'TRACKS OVERLAP'\n         CH    R4,EXTHITT\n         BNL   *+8\nMAPTRGET LH    R4,EXTHITT\n         AH    R5,EXTNOTRK\n         B     MAPGETEX\n         SPACE 1\nMAPINVAL MVC   BUF+7(14),=C'INVALID EXTENT'\n         B     MAPGETEX\n         SPACE 1\nMAPTRMIS BAL   R14,CONVERT\n         MVC   BUF+1(5),CONVEDIT+7\n         MVC   BUF+7(14),=C'TRACKS MISSING'\n         MVI   BUF,SPACE1AP\n         BAL   R14,PRINT\n         B     MAPTRGET\n         SPACE 1\nMAPGETEX LA    R2,EXTENT\n         LA    R3,BUF+22\n         BAL   R14,EXFORMAT\n         MVC   SEEKBUF(133),BUF\n         BAL   R14,PRINT\n         TM    PARMOPT2,SMAPOPT\n         BZ    *+8\n         BAL   R14,MAPSEEK\n         L     R6,EXTPTR\n         B     MAPPRLOP\n         SPACE 3\nMAPPREND LH    R0,TRKSPVOL\n         SR    R0,R4\n         S     R0,=F'1'\n         BNP   MAPNOMIS\n         BAL   R14,CONVERT\n         MVC   BUF+1(5),CONVEDIT+7\n         MVC   BUF+7(40),=C'TRACKS MISSING OR ASSIGNED AS ALTERNATES'\n         MVI   BUF,SPACE1AP\n         BAL   R14,PRINT\nMAPNOMIS MVI   BUF,SPACE1IM\n         BAL   R14,PRINT\n         LR    R0,R5\n         BAL   R14,CONVERT\n         MVC   BUF+59(5),CONVEDIT+7\n         MVC   BUF+66(20),=C'TRACKS ACCOUNTED FOR'\n         MVI   BUF,SPACE2AP\n         BAL   R14,PRINT\n         TM    PARMOPT2,SMAPOPT    SMAP SPECIFIED?          *HMD 06/82*\n         BZ    *+8                                          *HMD 06/82*\n         BAL   R14,MAPSEEKA        ERROR TRACKS\n         MVC   BUF+59(28),=C'<<<<< END OF TRACK MAP >>>>>'\n         MVI   BUF,SPACE0AP\n         BAL   R14,PRINT\nMAPEND   B     NEXTVOL\n         SPACE 1\n         DROP  R6\n         EJECT\nMAPSEEK  STM   R14,R12,VOLSAVE\n         TR    SEEKBUF+23(20),SEEKTABL\n         SR    R14,R14\n         ICM   R15,15,SEEKBUF+34\n         SLL   R15,4\n         SLDL  R14,4\n         SLL   R15,4\n         SLDL  R14,4\n         SLL   R15,4\n         SLDL  R14,4\n         SLL   R15,4\n         SLDL  R14,4\n         ST    R14,SEEKCYL\n         SR    R14,R14\n         ICM   R15,15,SEEKBUF+39\n         SLL   R15,4\n         SLDL  R14,4\n         SLL   R15,4\n         SLDL  R14,4\n         SLL   R15,4\n         SLDL  R14,4\n         SLL   R15,4\n         SLDL  R14,4\n         ST    R14,SEEKTRK\n         SR    R14,R14\n         ICM   R15,15,SEEKBUF+23\n         SLL   R15,4\n         SLDL  R14,4\n         SLL   R15,4\n         SLDL  R14,4\n         SLL   R15,4\n         SLDL  R14,4\n         SLL   R15,4\n         SLDL  R14,4\n         LR    R5,R14\n         SR    R14,R14\n         ICM   R15,15,SEEKBUF+28\n         SLL   R15,4\n         SLDL  R14,4\n         SLL   R15,4\n         SLDL  R14,4\n         SLL   R15,4\n         SLDL  R14,4\n         SLL   R15,4\n         SLDL  R14,4\n         LR    R7,R14\n         LA    R6,MAXCYL\n         LR    R4,R5               CYL\n         SLL   R4,7                X 128\n         LR    R1,R7               TRK\n         SLL   R1,2                X 4\n         AR    R1,R4\n         L     R4,VOLTAB           VOL TAB ADDR\n         LA    R4,0(R1,R4)         SLOT ADDR\n         EJECT\nMAPSEEK0 SR    R8,R8               TOTAL\n         ST    R5,SEEKCURR\n         SPACE 1\nMAPSEEK1 C     R5,SEEKCYL          END OF EXTENT (CYL)\n         BL    MAPSEEK2            NO\n         BH    MAPSEEK3            YES\n         C     R7,SEEKTRK          END OF EXTENT (TRK)\n         BH    MAPSEEK3            YES\n         SPACE 1\nMAPSEEK2 A     R8,0(0,R4)          TOTAL TRACK ACCESS COUNT\n         LA    R4,4(0,R4)          NEXT TRK\n         LA    R7,1(0,R7)\n         C     R7,=A(MAXTRK)       MAX TRKS PER CYL\n         BL    MAPSEEK1\n         SPACE 1\nMAPSEEK3 LTR   R15,R8              TOTAL FOR CYL\n         BZ    MAPSEEK4            ZERO, NO PRINT\n         M     R14,=F'100'\n         D     R14,VOLSEEK\n         SLL   R14,1\n         C     R14,VOLSEEK         ROUND UP\n         BL    *+8                 NO\n         LA    R15,1(0,R15)\n         CVD   R15,SEEKDBL\n         MVI   SEEKBUF+1,C' '\n         MVC   SEEKBUF+2(131),SEEKBUF+1\n         MVC   SEEKBUF+1(3),=CL3'CYL'\n         UNPK  SEEKBUF+5(4),SEEKCURR+2(3)\n         MVI   SEEKBUF+8,C' '\n         NC    SEEKBUF+5(3),=3X'0F'\n         TR    SEEKBUF+5(3),=C'0123456789ABCDEF'\n         MVC   SEEKBUF+8(5),=X'402021206C'\n         ED    SEEKBUF+8(4),SEEKDBL+6\n         SRL   R15,1\n         CH    R15,=H'50'          MAX\n         BNH   *+8                 NO\n         LH    R15,=H'50'          SET MAX\n         EX    R15,PCTMVE          GRAPHIC PERCENT\n         LA    R15,SEEKBUF+15(R15)\n         MVI   0(R15),C'>'\n         MVC   BUF(133),SEEKBUF\n         BAL   R14,PRINT\n         SPACE 1\nMAPSEEK4 C     R5,SEEKCYL          END OF EXTENT (CYL)\n         BL    MAPSEEK5            NO\n         BH    MAPSEEK6            YES\n         C     R7,SEEKTRK          END OF EXTENT (TRK)\n         BNL   MAPSEEK6            YES\n         SPACE 1\nMAPSEEK5 LA    R5,1(0,R5)          NEXT CYL\n         SR    R7,R7               TRK 0\n         BCT   R6,MAPSEEK0\n         SPACE 1\nMAPSEEK6 LM    R14,R12,VOLSAVE\n         BR    R14\n         SPACE 1\nPCTMVE   MVC   SEEKBUF+15(0),PCTLINE\n         EJECT\nMAPSEEKA STM   R14,R12,VOLSAVE\n         L     R4,VOLTAB           VOL TAB ADDR\n         LA    R4,124(0,R4)\n         SR    R5,R5\n         LA    R6,MAXCYL\n         SPACE 1\nMAPSEEKB ST    R5,SEEKCURR\n         L     R8,0(0,R4)          ERROR TRACK ACCESS COUNT\n         LA    R4,128(0,R4)        NEXT TRK\n         SPACE 1\nMAPSEEKC LTR   R15,R8              TOTAL FOR CYL\n         BZ    MAPSEEKD            ZERO, NO PRINT\n         M     R14,=F'100'\n         D     R14,VOLSEEK\n         SLL   R14,1\n         C     R14,VOLSEEK         ROUND UP\n         BL    *+8                 NO\n         LA    R15,1(0,R15)\n         CVD   R15,SEEKDBL\n         MVI   SEEKBUF+1,C' '\n         MVC   SEEKBUF+2(131),SEEKBUF+1\n         MVC   SEEKBUF+1(3),=CL3'CYL'\n         UNPK  SEEKBUF+5(4),SEEKCURR+2(3)\n         MVI   SEEKBUF+8,C' '\n         NC    SEEKBUF+5(3),=3X'0F'\n         TR    SEEKBUF+5(3),=C'0123456789ABCDEF'\n         MVC   SEEKBUF+8(5),=X'402021206C'\n         ED    SEEKBUF+8(4),SEEKDBL+6\n         SRL   R15,1\n         CH    R15,=H'50'          MAX\n         BNH   *+8                 NO\n         LH    R15,=H'50'          SET MAX\n         EX    R15,PCTMVE          GRAPHIC PERCENT\n         LA    R15,SEEKBUF+15(R15)\n         MVI   0(R15),C'>'\n         MVC   BUF(133),SEEKBUF\n         BAL   R14,PRINT\n         SPACE 1\nMAPSEEKD LA    R5,1(0,R5)          NEXT CYL\n         BCT   R6,MAPSEEKB\n         MVC   BUF(133),SEEKEMSG\n         SR    R14,R14\n         L     R15,VOLSAMP\n         CVD   R15,SEEKDBL\n         MVC   BUF+22(6),=X'402020202120'\n         ED    BUF+22(6),SEEKDBL+5\n         L     R15,VOLSEEK\n         M     R14,=F'100'\n         D     R14,VOLSAMP\n         CVD   R15,SEEKDBL\n         MVC   BUF+7(4),=X'40202120'\n         ED    BUF+7(4),SEEKDBL+6\n         BAL   R14,PRINT\n         LM    R14,R12,VOLSAVE\n         BR    R14\n         EJECT\nERRNODD  TM    PARMOPT2,VOLSOPT\n         BNO   NEXTDD\n         MVC   BUF+41(19),=C'CANNOT FIND DD CARD'\n         B     ERRCON1\n         SPACE 1\nERRNOTDA TM    PARMOPT2,VOLSOPT\n         BNO   NEXTDD\n         MVC   BUF+41(27),=C'DEVICE IS NOT DIRECT ACCESS'\n         B     ERRCON1\n         SPACE 1\nERRUNKDV MVC   BUF+41(19),=C'UNKNOWN DEVICE TYPE'\n         B     ERRCON1\n         SPACE 1\nERRNOPEN MVC   BUF+41(27),=C'ATTEMPT TO OPEN VTOC FAILED'\n         B     ERRCON1\n         SPACE 1\nERRCON1  MVC   BUF+10(28),=C'ERROR CONCERNING \"VOLUME01\":'\n         MVC   BUF+28(8),VOLDDNAM\n         MVI   BUF,SPACE3AP\n         BAL   R14,PRINT\n         LA    R0,4\n         B     ERRCODST\n         SPACE 1\nERRNOTFX MVC   BUF+41(33),=C'BAD DSCB - SHOULD HAVE BEEN TYPE'\n         MVC   BUF+75(1),BADDSTYP\n         LR    R2,R8\n         B     ERRCON2\n         SPACE 1\nERRNOCOR MVC   BUF+41(41),=C'INSUFFICIENT MEMORY TO COMPLETE VTOC LIST'\n         SR    R2,R2\n         B     ERRCON2\n         SPACE 1\nERRCON2  BAL   R14,CLOSVTOC\n         BAL   R14,DEQVTOC\n         MVC   BUF+10(28),=C'ERROR CONCERNING \"VOLUME01\":'\n         MVC   BUF+28(8),VOLDDNAM\n         MVI   BUF,SPACE3AP\n         BAL   R14,PRINT\n         LTR   R2,R2\n         BZ    ERRNODMP\n         LA    R3,DS4FDAD-DS4(R2)\n         BAL   R14,DUMPDSCB\nERRNODMP LA    R0,8\nERRCODST C     R0,RETCODE\n         BL    *+8\n         ST    R0,RETCODE\n         B     NEXTVOL\n         EJECT\n*\n*        SUBROUTINES START HERE\n*\nPDSLIST  ST    R14,PDSAVE\n         STM   R2,R6,PDSAVE+4\n         USING DS1,R2\n         MVC   JFCBDSNM,DS1DSNAM\n         SR    R0,R0\n         IC    R0,DS1NOBDB\n         BAL   R14,CONVERT\n         DROP  R2\n         MVC   PDSVAL4,CONVEDIT+9\n         SPACE 1\n         OPEN  (PDSDCB),TYPE=J\n         L     R3,PDSBLKAD+4\n         READ  PDSDECB,SF,,(3),MF=E\n         SPACE 1\n         SR    R0,R0\n         STH   R0,PDSBYTCT\n         STH   R0,PDSBLKAL\n         STH   R0,PDSBLKUS\n         STH   R0,PDSMEMCT\nPDSNEXT  LH    R0,PDSBYTCT\n         LTR   R0,R0\n         BP    PDSPRINT\n         CHECK PDSDECB\n         SPACE 1\n         CLI   SYNADFLG,0\n         BE    PDSREDOK\n         MVC   BUF+28(11),=CL11'DIRECTORY.'\n         MVI   BUF,SPACE3AP\n         BAL   R14,PRINT\n         CLI   SYNADFLG,X'FF'\n         BE    PDSEOD\n         BAL   R14,ABDUMP\n         SPACE 1\nPDSREDOK LM    R2,R3,PDSBLKAD\n         XR    R2,R3\n         XR    R3,R2\n         XR    R2,R3\n         STM   R2,R3,PDSBLKAD\n         READ  PDSDECB,SF,,(3),MF=E\n         SPACE 1\n         USING PDS,R2\n         LH    R1,PDSBLKAL\n         LA    R1,1(R1)\n         STH   R1,PDSBLKAL\n         LH    R0,PDSCOUNT\n         SH    R0,=H'2'\n         STH   R0,PDSBYTCT\n         LA    R1,PDSENTRY\n         ST    R1,PDSENTAD\n         B     PDSNEXT\n         SPACE 1\n         DROP  R2\n         SPACE 3\nPDSPRINT L     R6,PDSENTAD\n         USING PDSENTRY,R6\n         IC    R2,PDSINDIC\n         N     R2,=A(PDSUSERH)\n         SLL   R2,1\n         LR    R1,R6\n         AR    R1,R2\n         LA    R1,12(R1)\n         ST    R1,PDSENTAD\n         LH    R1,PDSBYTCT\n         SR    R1,R2\n         SH    R1,=Y(PDSUSERD-PDSENTRY)\n         STH   R1,PDSBYTCT\n         CLC   PDSNAME,EFFS\n         BNE   PDSMEMOK\n         MVC   PDSBLKUS,PDSBLKAL\n         B     PDSNEXT\nPDSMEMOK LH    R1,PDSMEMCT\n         LA    R1,1(R1)\n         STH   R1,PDSMEMCT\n         MVC   BUF+12(8),PDSNAME\n         TM    PDSINDIC,PDSALIAS\n         BZ    *+8\n         MVI   BUF+21,C'A'\n         UNPK  TRAREA,PDSTTRP(8)\n         TR    TRAREA,TRTABLE\n         MVC   BUF+23(4),TRAREA\n         MVI   BUF+27,C'.'\n         MVC   BUF+28(2),TRAREA+4\n         IC    R0,PDSINDIC\n         N     R0,=A(PDS#TTRS)\n         SRL   R0,5\n         STC   R0,BUF+32\n         OI    BUF+32,X'F0'\n         LR    R5,R2\n         CH    R2,=H'44'\n         BNH   PDSPRLIN\n         LA    R2,2\n         BAL   R14,PRLKAHED\n         LR    R2,R5\n         LA    R5,44\nPDSPRLIN LA    R3,PDSUSERD\n         LA    R4,BUF+35\n         BAL   R14,DUMPLINE\n         MVI   BUF,SPACE1AP\n         BAL   R14,PRINT\n         CH    R2,=H'44'\n         BNH   PDSNEXT\n         LR    R5,R2\n         SH    R5,=H'44'\n         LA    R3,PDSUSERD+44\n         LA    R4,BUF+35\n         BAL   R14,DUMPLINE\n         MVI   BUF,SPACE1AP\n         BAL   R14,PRINT\n         B     PDSNEXT\n         SPACE 1\n         DROP  R6\n         SPACE 2\nPDSEOD   CLOSE (PDSDCB)\n         CLI   SYNADFLG,0\n         MVI   SYNADFLG,0\n         BNE   PDSRETRN\n         LH    R0,PDSMEMCT\n         BAL   R14,CONVERT\n         MVC   PDSVAL1,CONVEDIT+8\n         LH    R0,PDSBLKUS\n         BAL   R14,CONVERT\n         MVC   PDSVAL2,CONVEDIT+8\n         LH    R0,PDSBLKAL\n         BAL   R14,CONVERT\n         MVC   PDSVAL3,CONVEDIT+8\n         MVC   BUF+10(PDSMSGLN),PDSMSG\n         MVI   BUF,SPACE3AP\n         BAL   R14,PRINT\nPDSRETRN LM    R2,R6,PDSAVE+4\n         L     R14,PDSAVE\n         BR    R14\n         EJECT ,\n         SPACE 1\n         USING DS2,R7\nISAMLIST LTR   R7,R7\n         BZR   R14\n         ST    R14,ISAVE\n         STM   R2,R5,ISAVE+4\n         SPACE 1\n         MVC   BUF+12(19),=C'NO OF INDEX LEVELS='\n         LA    R2,DS2NOLEV\n         BAL   R14,CONVERT1\n         MVC   BUF+31(3),CONVERTD\n         SPACE 1\n         MVC   BUF+42(19),=C'FLAGGED FOR DELETE='\n         LA    R2,DS2TAGDT\n         BAL   R14,CONVERT2\n         MVC   BUF+61(5),CONVERTD\n         SPACE 1\n         MVC   BUF+72(19),=C'TRKS FOR HIGH INDX='\n         LA    R2,DS2NOTRK\n         BAL   R14,CONVERT1\n         MVC   BUF+91(3),CONVERTD\n         SPACE 1\n         MVC   BUF+102(19),=C'IND OVFL TRKS LEFT='\n         LA    R2,DS2RORG2\n         BAL   R14,CONVERT2\n         MVC   BUF+121(5),CONVERTD\n         MVI   BUF,SPACE1AP\n         BAL   R14,PRINT\n         SPACE 1\n         MVC   BUF+12(19),=C'TRKS FOR MAST INDX='\n         LA    R2,DS2DVIND\n         BAL   R14,CONVERT1\n         MVC   BUF+31(3),CONVERTD\n         SPACE 1\n         MVC   BUF+42(19),=C'OVERFLOW  ACCESSES='\n         LA    R2,DS2RORG3\n         BAL   R14,CONVERT3\n         MVC   BUF+61(8),CONVERTD\n         SPACE 1\n         MVC   BUF+72(19),=C'PRIME DATA RECORDS='\n         LA    R2,DS2PRCTR\n         BAL   R14,CONVERT4\n         MVC   BUF+91(10),CONVERTD\n         SPACE 1\n         MVC   BUF+102(19),=C'NO OF OVFL RECORDS='\n         LA    R2,DS2OVRCT\n         BAL   R14,CONVERT2\n         MVC   BUF+121(5),CONVERTD\n         MVI   BUF,SPACE1AP\n         BAL   R14,PRINT\n         SPACE 1\n         MVC   BUF+12(19),=C'CYL OVFL  TRKS/CYL='\n         LA    R2,DS2CYLOV\n         BAL   R14,CONVERT1\n         MVC   BUF+31(3),CONVERTD\n         SPACE 1\n         MVC   BUF+42(19),=C'CORE FOR HIGH INDX='\n         LA    R2,DS2NOBYT\n         BAL   R14,CONVERT2\n         MVC   BUF+61(5),CONVERTD\n         SPACE 1\n         MVC   BUF+72(19),=C'IND OFL BYTES LEFT='\n         LA    R2,DS2BYOVL\n         BAL   R14,CONVERT2\n         MVC   BUF+91(5),CONVERTD\n         SPACE 1\n         MVC   BUF+102(19),=C'FULL CYLOVFL AREAS='\n         LA    R2,DS2RORG1\n         BAL   R14,CONVERT2\n         MVC   BUF+121(5),CONVERTD\n         MVI   BUF,SPACE2AP\n         BAL   R14,PRINT\n         SPACE 1\n         LM    R2,R5,ISAVE+4\n         L     R14,ISAVE\n         BR    R14\n         DROP  R7\n         EJECT\n         SPACE 1\n         USING EXTENT,R2\n         USING EXLINE,R3\n         SPACE 1\nEXFORMAT LTR   R2,R2               ANY EXTENT.Q\n         BZR   R14                 RETURN IMM IF NOT\n         ST    R14,EXSAVE\n         STM   R2,R3,EXSAVE+4\n         SPACE 1\n         UNPK  TRAREA,EXTLCCHH(8)\n         TR    TRAREA,TRTABLE\n         MVC   EXLFCC,TRAREA\n         MVI   EXLFPRD,C'.'\n         MVC   EXLFHH,TRAREA+4\n         SPACE 1\n         UNPK  TRAREA,EXTHCCHH(8)\n         TR    TRAREA,TRTABLE\n         MVC   EXLLCC,TRAREA\n         MVI   EXLLPRD,C'.'\n         MVC   EXLLHH,TRAREA+4\n         SPACE 1\n         LH    R0,EXTLOTT\n         BAL   R14,CONVERT\n         MVC   EXLFTT,CONVEDIT+7\n         SPACE 1\n         LH    R0,EXTHITT\n         BAL   R14,CONVERT\n         MVC   EXLLTT,CONVEDIT+7\n         SPACE 1\n         LH    R0,EXTNOTRK\n         BAL   R14,CONVERT\n         MVC   EXLNOTRK,CONVEDIT+7\n         SPACE 1\n         CLI   EXPFLAG,0\n         BNE   EXPTYPE\n         L     R1,EXTIDPTR\n         MVC   EXLDSNAM,0(R1)\n         SPACE 1\nEXPTYPE  CLI   EXTTYPE,X'01'       IS THIS A DATA EXTENT.Q\n         BNE   EXPNDATA            NO, GO CHECK OTHERS\n         CLI   EXPFLAG,0           ARE WE MAPPING.Q\n         BE    EXPEXTPR            YES, DON'T CLUTTER UP\n         MVC   EXLTYPE,=C'PRIM'    ELSE MOVE IN EXTENT TYPE\n         B     EXPEXTPR\n         SPACE 1\nEXPNDATA TM    EXTTYPE,X'F0'       VOL LABEL, OR TYPE 4, 5, OR 6\n         BO    EXPCKFMX            BR IF YES\n         CLI   EXTTYPE,X'02'       ISAM OVERFLOW.Q\n         MVC   EXLTYPE,=C'OVFL'\n         BE    EXPEXTPR\n         SPACE 1\n         CLI   EXTTYPE,X'04'       ISAM INDEX.Q\n         MVC   EXLTYPE,=C'INDX'\n         BE    EXPEXTPR\n         SPACE 1\n         CLI   EXTTYPE,X'40'       USER LABEL TRACK.Q\n         MVC   EXLTYPE,=C'ULBL'\n         BE    EXPEXTPR\n         SPACE 1\n         CLI   EXTTYPE,X'81'       CYLS OF DATA ON CYL BDRY.Q\n         MVC   EXLTYPE,=C'CYLB'\n         BE    EXPEXTPR\n         SPACE 1\n         CLI   EXTTYPE,X'80'       SHARING AN EXTENT.Q\n         MVC   EXLTYPE,=C'SHRD'\n         BNE   EXPCKFMX\n         CLI   EXPFLAG,0           ARE WE MAPPING.Q\n         BNE   EXPEXTPR            NO, DON'T ENCLOSE IN PARENS\n         MVI   EXLLPARN,C'('\n         MVI   EXLRPARN,C')'\n         B     EXPEXTPR\n         SPACE 1\nEXPCKFMX CLI   EXTTYPE,C'5'        FREE EXTENT.Q\n         BE    EXPPRLIN\n         SPACE 1\n         CLI   EXTTYPE,C'4'        VTOC EXTENT.Q\n         MVC   EXLTYPE,=C'VTOC'\n         BE    EXPEXTPR\n         SPACE 1\n         CLI   EXTTYPE,X'FF'       VOLUME LABEL.Q\n         MVC   EXLTYPE,=C'VLBL'\n         BE    EXPPRLIN\n         SPACE 1\n         CLI   EXTTYPE,C'6'        SHARED EXTENT.Q\n         MVC   EXLTYPE,=C'*UN*'\n         BNE   EXPEXTPR\n         SPACE 1\n         MVC   EXLTYPE,=C'SPLT'\n         SR    R0,R0\n         IC    R0,EXTSEQNO\n         BAL   R14,CONVERT\n         MVC   EXLSPLIT(3),CONVEDIT+9\n         B     EXPPRLIN\n         SPACE 1\nEXPEXTPR SR    R0,R0\n         IC    R0,EXTSEQNO\n         AH    R0,=H'1'\n         BAL   R14,CONVERT\n         MVC   EXLSEQNO,CONVEDIT+10\n         SPACE 1\nEXPPRLIN MVI   BUF,SPACE1AP\n         LM    R2,R3,EXSAVE+4\n         L     R14,EXSAVE\n         BR    R14\n         DROP  R2,R3\n         EJECT\n         SPACE 3\nVTOCREAD ST    R14,VTSAVE\n         STM   R2,R4,VTSAVE+4\n         L     R2,RENEXT@\n         CHECK (2)\n         LA    R1,=CL11'VTOC READ.'\n         BAL   R14,SYNADCHK\n         SPACE 1\n         USING DS1,R3\nVTOCREOK XC    0(20,R2),0(R2)\n         LA    R4,20(R2)\n         MVC   DS1(DS1END-DS1),0(R4)\n         MVC   DS1FDAD(3),VTOCMBB\n         MVC   DS1FDAD+3(4),VTOCCCHH\n         MVC   DS1FDAD+7(1),VTOCR\n         CLC   HWMDS1,DS1FDAD+3\n         BL    VTOCEOD\n         SPACE 1\n         READ  (2),SF,VTOCDCB,(4),MF=E\n         A     R2,REBLKSIZ\n         ST    R2,RENEXT@\n         L     R1,RECOUNT\n         BCT   R1,VTSAVECT\n         L     R2,REBLOCK@\n         ST    R2,RENEXT@\n         L     R1,RENCP\nVTSAVECT ST    R1,RECOUNT\n         SPACE 1\n         LA    R0,1\n         SR    R1,R1\n         IC    R1,VTOCR\n         AR    R1,R0\n         STC   R1,VTOCR\n         CH    R1,VTDSCBTR\n         BNH   VTOCREND\n         MVI   VTOCR,1\n         AH    R0,VTOCTT\n         STH   R0,VTOCTT\n         LR    R1,R0\n         BAL   R14,TTCONVRT\n         MVC   VTOCCCHH,CCHH\n         SPACE 1\nVTOCREND L     R14,VTSAVE\n         LM    R2,R4,VTSAVE+4\n         LA    R14,4(R14)\n         BR    R14\n         SPACE 1\nVTOCEOD  L     R14,VTSAVE\n         LM    R2,R4,VTSAVE+4\n         BR    R14\n         SPACE 1\n         DROP  R3\n         EJECT\n         SPACE 3\nOBTAIN   MVC   OBCCHHR,0(R2)\n         OBTAIN OBCAMLST\n         BXLE  R15,R15,*+8\n         BAL   R14,ABDUMP\n         USING DS1,R3\n         MVC   DS1(DS1END-DS1),CAMLIST\n         MVC   DS1FDAD(3),VTOCMBB\n         MVC   DS1FDAD+3(5),0(R2)\n         BR    R14\n         SPACE 2\nOBCAMLST CAMLST SEEK,OBCCHHR,VOLSERNO,CAMLIST\n         SPACE 1\n         DROP  R3\n         EJECT\n         SPACE 3\nSYNADXIT SYNADAF ACSMETH=BSAM\n         MVC   BUF+7(47),=C'I/O ERROR PROCESSING XXXXXXXXXX. SYNADAF INX\n               FO=\"'\n         MVC   BUF+54(78),50(R1)\n         MVI   BUF+132,C'\"'\n         SYNADRLS\n         MVI   SYNADFLG,X'FF'\n         LTR   R0,R0\n         BZR   R14\n         MVI   SYNADFLG,1\n         BR    R14\n         SPACE 3\nSYNADCHK CLI   SYNADFLG,0\n         BER   R14\n         MVC   BUF+28(11),0(R1)\n         BAL   R14,CLOSVTOC\n         BAL   R14,DEQVTOC\n         MVI   BUF,SPACE3IM\n         BAL   R14,PRINT\n         MVI   BUF,SPACE3AP\n         BAL   R14,PRINT\n         CLI   SYNADFLG,X'FF'\n         BE    ERRNODMP\n         BAL   R14,ABDUMP\n         EJECT\n         SPACE 3\nDEQGATE  EQU   *+1\nDEQVTOC  BCR   *-*+15,R14\n         OI    DEQGATE,X'F0'\n         SPACE 1\n         DEQ   MF=(E,ENQVTOC)\n         SPACE 1\n         BR    R14\n         SPACE 4\n         SPACE 1\nCLOSVTOC CLOSE MF=(E,CLOSLIST)\n         SPACE 1\n         L     R1,REBLOCK@\n         LTR   R1,R1\n         BZR   R14\n         L     R0,REGETSIZ\n         FREEMAIN R,LV=(0),A=(1)\n         SR    R0,R0\n         ST    R0,REBLOCK@\n         BR    R14\n         EJECT\n         SPACE 3\n         USING DS1,R6\n         USING DS3,R8\n         SPACE 1\nF13HOOK  ST    R14,F1SAVE\n         SR    R5,R5\n         ST    R5,F1TRKAL\n         STH   R5,NUMEXT\n         XC    LISTEXT(17*4),LISTEXT\n         IC    R5,DS1NOEPV\n         CLI   DS1EXT1,X'40'\n         BNE   *+8\n         AH    R5,=H'1'\n         LTR   R5,R5\n         BZR   R14\n         STH   R5,NUMEXT\n         SPACE 1\n         SR    R3,R3\n         SR    R4,R4\nF1NXTEXT EX    0,F1EXTPIK(R3)\n         BAL   R14,F1EXTCNV\n         AR    R4,R0\n         MVC   HOOKLCCH(8),2(R2)\n         STH   R0,HOOKNTRK\n         MVC   HOOKTYPE(2),0(R2)\n         MVC   HOOKLOTT(4),LOWTT\n         LA    R0,DS1DSNAM\n         ST    R0,HOOKIDPT\n         LA    R2,HOOKPTR\n         BAL   R14,HOOKUP\n         ST    R15,LISTEXT(R3)\n         LA    R3,4(R3)\n         BCT   R5,F1NXTEXT\n         ST    R4,F1TRKAL\n         L     R14,F1SAVE\n         BR    R14\n         EJECT ,\n         SPACE 3\nF1EXTCNV CLI   0(R2),0\n         BER   R14\n         LA    R2,2(R2)\n         BAL   R15,CCHHCONV\n         STH   R0,LOWTT\n         LA    R2,4(R2)\n         BAL   R15,CCHHCONV\n         STH   R0,HIGHTT\n         LH    R1,LOWTT\n         SR    R0,R1\n         AH    R0,=H'1'\n         S     R2,=F'6'\n         BR    R14\n         SPACE 2\nF1EXTPIK LA    R2,DS1EXT1\n         LA    R2,DS1EXT2\n         LA    R2,DS1EXT3\n         LA    R2,DS3EXTNT\n         LA    R2,DS3EXTNT+10\n         LA    R2,DS3EXTNT+20\n         LA    R2,DS3EXTNT+30\n         LA    R2,DS3ADEXT\n         LA    R2,DS3ADEXT+10\n         LA    R2,DS3ADEXT+20\n         LA    R2,DS3ADEXT+30\n         LA    R2,DS3ADEXT+40\n         LA    R2,DS3ADEXT+50\n         LA    R2,DS3ADEXT+60\n         LA    R2,DS3ADEXT+70\n         LA    R2,DS3ADEXT+80\n         SPACE 2\n         DROP  R6,R8\n         EJECT\n         SPACE 3\n         USING DS5,R8\n*        USING DS6,R8\nF56HOOK  ST    R14,F5SAVE\n         LA    R2,DS5AVEXT\n         LA    R3,8\n         BAL   R14,F5EXTCNV\n         LA    R2,5(R2)\n         BCT   R3,*-8\n         LA    R2,DS5MAVET\n         LA    R3,18\n         BAL   R14,F5EXTCNV\n         LA    R2,5(R2)\n         BCT   R3,*-8\n         L     R14,F5SAVE\n         BR    R14\n         SPACE 1\nF5EXTCNV ST    R14,F5SAVE+4\n         STM   R2,R5,F5SAVE+8\n         CLC   0(5,R2),ZEROES\n         BER   R14\n         MVC   FMT5TT(4),0(R2)\n         LH    R3,FMT5TT\n         STH   R3,LOWTT\n         LH    R4,FMT5CYLS\n         SR    R5,R5\n         IC    R5,4(R2)\n         CLI   DS5FMTID,C'6'\n         BE    F6HOOK\n         LH    R1,AVAILEXT\n         LA    R1,1(R1)\n         STH   R1,AVAILEXT\n         LH    R0,AVAILCYL\n         AR    R0,R4\n         STH   R0,AVAILCYL\n         LA    R0,=CL44'  **** AVAILABLE ****'\n         ST    R0,HOOKIDPT\n         MVI   HOOKSEQN,0\n         LR    R0,R4\n         MH    R0,TRKSPCYL\n         AR    R0,R5\n         STH   R0,HOOKNTRK\n         CH    R0,F5LARGTT\n         BNH   F5AVAIL\n         STH   R0,F5LARGTT\n         MVC   F5LARGST,2(R2)\nF5AVAIL  LR    R1,R0\n         AH    R1,AVAILSPC\n         STH   R1,AVAILSPC\n         EJECT ,\n         SPACE 3\nF6RETURN AR    R0,R3\n         BCTR  R0,0\n         STH   R0,HIGHTT\n         LH    R1,LOWTT\n         BAL   R14,TTCONVRT\n         MVC   HOOKLCCH,CCHH\n         LH    R1,HIGHTT\n         BAL   R14,TTCONVRT\n         MVC   HOOKHCCH,CCHH\n         MVC   HOOKLOTT(4),LOWTT\n         MVC   HOOKTYPE,DS5FMTID\n         LA    R2,HOOKPTR\n         BAL   R14,HOOKUP\n         LM    R2,R5,F5SAVE+8\n         L     R14,F5SAVE+4\n         BR    R14\n         SPACE 1\nF6HOOK   STC   R5,HOOKSEQN\n         MVC   HOOKIDPT,=A(FMT6MSG)\n         LR    R0,R4\n         MH    R0,TRKSPCYL\n         STH   R0,HOOKNTRK\n         B     F6RETURN\n         SPACE 1\n         DROP  R8\n         EJECT\n         SPACE 3\nHOOKUP   TM    PARMOPT1,MAPOPT+EXTNTOPT+DIRFLAG\n         BZR   R14\n         ST    R14,HOSAVE\n         STM   R3,R5,HOSAVE+4\n         LA    R4,EXTNTLEN\n         BAL   R14,GETCORE\n         USING EXTENT,R3\n         MVC   EXTENT(EXTNTLEN),0(R2)\n         L     R2,HOOKSTRT\n         LA    R4,HOOKSTRT\nHOOKLOOK CLC   EXTLCCHH,EXTLCCHH-EXTENT(R2)\n         BL    HOOKDONE\n         LR    R4,R2\n         L     R2,0(R2)\n         B     HOOKLOOK\n         SPACE 1\nHOOKDONE ST    R2,EXTPTR\n         ST    R3,EXTPTR-EXTENT(R4)\n         LR    R15,R3\n         LM    R3,R5,HOSAVE+4\n         L     R14,HOSAVE\n         BR    R14\n         SPACE 1\n         DROP  R3\n         EJECT ,\n         SPACE 3\nCCHHCONV SR    R0,R0\n         IC    R0,0(R2)\n         MH    R0,DEVCONV1\n         SR    R1,R1\n         IC    R1,1(R2)\n         MH    R1,DEVCONV2\n         AR    R0,R1\n         SR    R1,R1\n         IC    R1,2(R2)\n         MH    R1,DEVCONV3\n         AR    R0,R1\n         SR    R1,R1\n         IC    R1,3(R2)\n         MH    R1,DEVCONV4\n         AR    R0,R1\n         BR    R15\n         SPACE 4\nTTCONVRT SR    R0,R0\n         ST    R0,CCHH\n         LH    R15,DEVCONV1\n         LTR   R15,R15\n         BZ    TTCONVR2\n         DR    R0,R15\n         STC   R1,CCHH\n         LR    R1,R0\n         SR    R0,R0\nTTCONVR2 LH    R15,DEVCONV2\n         LTR   R15,R15\n         BZ    TTCONVR3\n         DR    R0,R15\n         STC   R1,CCHH+1\n         LR    R1,R0\n         SR    R0,R0\nTTCONVR3 LH    R15,DEVCONV3\n         LTR   R15,R15\n         BZ    TTCONVR4\n         DR    R0,R15\n         STC   R1,CCHH+2\n         STC   R0,CCHH+3\n         BR    R14\n         SPACE 1\nTTCONVR4 STC   R1,CCHH+3\n         BR    R14\n         EJECT\n         SPACE 3\nCONVERT1 LA    R3,1\n         B     CONVCOM\n         SPACE 1\nCONVERT2 LA    R3,2\n         B     CONVCOM\n         SPACE 1\nCONVERT3 LA    R3,3\n         B     CONVCOM\n         SPACE 1\nCONVERT4 LA    R3,4\n         SPACE 1\nCONVCOM  SR    R0,R0\nCONV1MOR SLL   R0,8\n         IC    R0,0(R2)\n         LA    R2,1(R2)\n         BCT   R3,CONV1MOR\n         SPACE 1\nCONVERT  LPR   R0,R0\n         CVD   R0,CONVDEC\n         UNPK  CONVUNPK,CONVDEC\n         OI    CONVUNPK+11,X'F0'\n         MVC   CONVEDIT,=X'402020202020202020202120'\n         ED    CONVEDIT,CONVDEC+2\n         MVC   CONVERTD,CONVEDIT+1\nCONVCLI  CLI   CONVERTD,C' '\n         BNER  R14\n         MVC   CONVERTD,CONVERTD+1\n         B     CONVCLI\n         SPACE 1\n         EJECT\n         SPACE 3\nDATEDIT  ST    R14,DASAVE\n         STM   R2,R5,DASAVE+4\n         XC    DATEWORD,DATEWORD\n         LTR   R2,R2\n         BZ    DATGET\n         SR    R1,R1\n         IC    R1,0(R2)\n         MH    R1,=H'1000'\n         MVC   DATEWORD,1(R2)\n         AH    R1,DATEWORD\n         CVD   R1,DATEWORD\nDATGETRT OI    DATEWORD+7,X'0F'\n         L     R2,DATEWORD+4\n         SR    R0,R0\n         D     R0,=F'1000'\n         LA    R15,DATNORMY\n         LTR   R14,R1\n         BZ    DATCOMP\n         N     R14,=F'3'\n         BM    DATCOMP\n         LA    R15,DATLEAPY\n         SPACE 1\nDATCOMP  LTR   R0,R0\n         BZ    DAJULIAN\n         CH    R0,0(R15)\n         BH    DAJULIAN\n         TM    PARMOPT2,JDATEOPT\n         BO    DAJULIAN\n         LA    R3,1\n         SR    R14,R14\n         SPACE 1\nDATICMON IC    R14,1(R3,R15)\n         CR    R0,R14\n         BNH   DATMONOK\n         SR    R0,R14\n         LA    R3,1(R3)\n         B     DATICMON\n         SPACE 1\nDATMONOK MH    R3,=H'1000'\n         AR    R3,R0\n         MH    R3,=H'1000'\n         AR    R3,R1\n         CVD   R3,DATEWORD\n         MVC   DATEWORD(5),DATEWORD+3\n         UNPK  DATEWORD(8),DATEWORD(5)\n         OI    DATEWORD+7,X'F0'\n         MVI   DATEWORD+2,C'/'\n         MVI   DATEWORD+5,C'/'\n         SPACE 3\nDATRETRN LM    R2,R5,DASAVE+4\n         MVC   0(8,R3),DATEWORD\n         L     R14,DASAVE\n         BR    R14\n         SPACE 2\nDAJULIAN ST    R2,DATEWORD\n         UNPK  DATEWORD+2(5),DATEWORD+1(3)\n         MVC   DATEWORD+1(2),DATEWORD+2\n         MVI   DATEWORD,C' '\n         MVI   DATEWORD+3,C'.'\n         MVI   DATEWORD+7,C' '\n         B     DATRETRN\n         SPACE 2\nDATGET   ST    R1,DATEWORD+4\n         LTR   R1,R1\n         BNZ   DATGOT\n         TIME  DEC\n         ST    R1,DATEWORD+4\nDATGOT   CVB   R1,DATEWORD\n         B     DATGETRT\n         SPACE 2\n         EJECT\n         SPACE 3\nDUMPDSCB ST    R14,DUSAVE\n         LR    R4,R2\n         LA    R2,3\n         BAL   R14,PRLKAHED\n         LR    R2,R4\n         MVC   BUF+8(17),=C'BLK 1234.5678.90:'\n         UNPK  TRAREA,3(8,R3)\n         TR    TRAREA,TRTABLE\n         MVC   BUF+12(4),TRAREA\n         MVC   BUF+17(4),TRAREA+4\n         MVC   BUF+22(2),TRAREA+8\n         LA    R3,0(R2)\n         LA    R4,BUF+35\n         LA    R5,44\n         BAL   R14,DUMPLINE\n         MVI   BUF,SPACE1AP\n         BAL   R14,PRINT\n         MVC   BUF+8(13),=C'FORMAT N DSCB'\n         MVC   BUF+15(1),44(R2)\n         OI    BUF+15,X'F0'\n         LA    R3,44(R2)\n         LA    R4,BUF+26\n         LA    R5,48\n         BAL   R14,DUMPLINE\n         MVI   BUF,SPACE1AP\n         BAL   R14,PRINT\n         LA    R3,92(R2)\n         LA    R4,BUF+26\n         LA    R5,48\n         BAL   R14,DUMPLINE\n         MVI   BUF,SPACE2AP\n         BAL   R14,PRINT\n         L     R14,DUSAVE\n         BR    R14\n         EJECT ,\n         SPACE 3\nDUMPLINE LTR   R5,R5\n         BNPR  R14\n         B     DUMPNEXT\nDUMPWORD BCT   R1,DUMPBYTE\n         MVI   0(R4),C' '\n         LA    R4,1(R4)\nDUMPNEXT LA    R1,4\nDUMPBYTE UNPK  TRAREA(3),0(2,R3)\n         TR    TRAREA(2),TRTABLE\n         MVC   0(2,R4),TRAREA\n         LA    R3,1(R3)\n         LA    R4,2(R4)\n         BCT   R5,DUMPWORD\n         BR    R14\n         EJECT\n         SPACE 3\nGETCORE  A     R4,=F'3'\n         N     R4,=F'-4'\nGETAGAIN L     R0,CORLEFT\n         SR    R0,R4\n         BM    GETMAIN\n         ST    R0,CORLEFT\n         L     R3,CORNEXT@\n         LR    R0,R3\n         AR    R0,R4\n         ST    R0,CORNEXT@\n         BR    R14\n         SPACE 3\nGETMAIN  L     R3,CURBLK@\n         GETMAIN EC,LV=2048,A=CURBLK@\n         BXH   R15,R15,ERRNOCOR\n         SPACE 1\n         L     R1,CURBLK@\n         ST    R1,0(R3)\n         SR    R0,R0\n         ST    R0,0(R1)\n         LA    R1,4(R1)\n         ST    R1,CORNEXT@\n         MVC   CORLEFT,=A(2044)\n         B     GETAGAIN\n         EJECT ,\n         SPACE 3\nFREECORE L     R2,CORFRST@\nFREELOOP LTR   R1,R2\n         BZ    FREEDONE\n         L     R2,0(R2)\n         LA    R0,2048\n         FREEMAIN R,LV=(0),A=(1)\n         B     FREELOOP\n         SPACE 1\nFREEDONE SR    R0,R0\n         ST    R0,CORLEFT\n         ST    R0,CORFRST@\n         LA    R0,CORFRST@\n         ST    R0,CURBLK@\n         BR    R14\n         EJECT\n         SPACE 3\nPRINT    ST    R14,PRSAVE\n         STM   R2,R5,PRSAVE+4\n         LH    R0,CURLINES\n         CH    R0,MAXLINES\n         BL    PRNOPAGE\n         PUT   PRINTDCB,NEWPAGE\n         SR    R0,R0\n         STH   R0,CURLINES\nPRNOPAGE LTR   R0,R0\n         BNZ   PRINTBUF\n         LH    R0,CURPAGES\n         AH    R0,=H'1'\n         STH   R0,CURPAGES\n         CH    R0,MAXPAGES\n         BNH   PRTPGCNV\n         SR    R0,R0\n         STH   R0,CURPAGES\nPRTPGCNV BAL   R14,CONVERT\n         MVC   PAGENO,CONVERTD\n         PUT   PRINTDCB,HEADERCC\n         MVC   CURLINES,=H'3'\n         L     R2,BUFPTR\nPRNXTBUF LH    R0,CURLINES\n         LTR   R2,R2\n         BZ    PRINTBUF\n         AH    R0,4(R2)\n         STH   R0,CURLINES\n         LA    R3,6(R2)\n         PUT   PRINTDCB,(3)\n         L     R2,0(R2)\n         B     PRNXTBUF\n         EJECT\n         SPACE 3\nPRINTBUF TM    BUF,X'80'\n         BZ    PRUPLINE\n         SR    R0,R0\n         B     PRDOPUT\nPRUPLINE SR    R14,R14\n         IC    R14,BUF\n         SRL   R14,3\n         AR    R0,R14\nPRDOPUT  STH   R0,CURLINES\n         PUT   PRINTDCB,BUF\n         TM    BUF,X'02'\n         BO    PRETURN\n         MVI   BUF+1,C' '\n         MVC   BUF+2(131),BUF+1\n         SPACE 1\nPRETURN  LM    R2,R5,PRSAVE+4\n         L     R14,PRSAVE\n         BR    R14\n         SPACE 4\nPRLKAHED AH    R2,CURLINES\n         CH    R2,MAXLINES\n         BNHR  R14\n         MVC   CURLINES,=H'999'\n         BR    R14\n         EJECT\n         SPACE 1\nRETURN   CLOSE (PRINTDCB)\n         SPACE 1\n         TM    DCBBUFCB+3+(PRINTDCB-IHADCB),X'01'\n         BO    RETQUIT\n         FREEPOOL PRINTDCB\n         SPACE 1\nRETQUIT  CLI   HDNGLIST,X'FF'\n         BNE   RETSAVER\n         L     R1,HDNGLIST\n         LH    R2,0(R1)\n         LH    R0,CURPAGES\n         AH    R0,=H'1'\n         BAL   R14,CONVERT\n         LA    R3,CONVEDIT+12\n         SR    R3,R2\n         BCTR  R2,0\n         STC   R2,*+5\n         MVC   2(*-*,R1),0(R3)\n         SPACE 1\nRETSAVER L     R13,SAVEAREA+4\n         L     R15,RETCODE\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)\n         MVI   12(R13),X'FF'\n         SPM   R14\n         BR    R14\n         SPACE 3\nABDUMP   OI    ABCODE,X'80'        SET DUMP FLAG\n         SPACE 1\nABEND    L     R1,ABCODE           PICK UP ABEND CODE\n         ABEND (1)\n         EJECT ,\nNEWPAGE  DC    AL1(EJECTIM)\nHEADERCC DC    AL1(SPACE3AP)\nVOLSERNO DS    CL6                 CURRENT VOLUME SERIAL\n         ORG   VOLSERNO\n         EJECT\nHEADER DS 0CL95\n       DC C'DIRECT-ACCESS VOLUME SEEK ANALYSIS .....            '\n       DC C'*GTEDS* VERSION--'\n       DC C'&SYSDATE'   8 CHARS\n       DC CL31' '\nHEADMID  EQU   HEADER+19\nPRDATE   DC    CL8'03/15/84'\n         DC    CL6'  DAY='\nPRDAY    DC    CL3'999'\nPRTIME   DC    CL7'  23:59',CL4' '\n         DC    CL5'PAGE '\nPAGENO   DC    CL4'9999'\n         SPACE 3\nHEAD1    DC    C'TABLE OF CONTENTS FOR VOLUME \"'\nHEAD1VOL DC    CL6'XXXXXX',C'\" ON DEVICE \"'\nHEAD1UCB DC    CL3'XXX',C'\" MOUNTED AS \"'\nHEAD1MT  DC    CL8'XXXXXXXX',C'/'\nHEAD1MTR DC    CL5'XXXXX',C'\"'\nHEAD1A   DC    A(HEAD1B)\n         DC    H'0'\nHEADER1  DC    AL1(SPACE0AP),CL19' ',CL26'DSNAME'\nHEADAT1A DC    C'SERIAL R/W  REFDT    CREDT    EXPDT   DSO RFM BLKSZ LRX\n               ECL KEY OP TRKAL TRKUS EX SECQU T'\nHEAD1B   DC    A(0)\n         DC    H'2'\nHEADER2  DC    AL1(SPACE2AP),44C'_',C' '\nHEADAT1B DC    C'______ ___ ________ ________ ________ ___ ___ _____ __X\n               ___ ___ __ _____ _____ __ _____ _'\n         SPACE 2\nHEAD2    DC    C'TRACK ALLOCATION MAP FOR VOLUME \"'\nHEAD2VOL DC    C'XXXXXX',C'\"'\nHEAD2A   DC    A(HEAD2B)\n         DC    H'0'\n         DC    AL1(SPACE0AP),CL22' '\nHEAD2DAT DC    C'FIRST TRK   LAST TRK  FIRST   LAST  #TRKS  EX  EX-#  '\n         DC    CL44'DSNAME OR USAGE'\n         DC    CL13' '\nHEAD2B   DC    A(0)\n         DC    H'2'\n         DC    AL1(SPACE2AP),CL22' '\nHEAD2UND DC    C'_________  _________  _____  _____  _____  __  ____  '\n         DC    44C'_'\n         DC    CL13' '\nPDSMSG   DC    CL19'DIRECTORY CONTAINS'\nPDSVAL1  DC    CL4'0000'\n         DC    CL18' MEMBERS AND USES '\nPDSVAL2  DC    CL4'0000'\n         DC    CL8' OF THE '\nPDSVAL3  DC    CL4'0000'\n         DC    CL39' DIRECTORY BLOCKS ALLOCATED, INCLUDING '\nPDSVAL4  DC    CL3'000'\n         DC    CL24' BYTES OF THE LAST BLOCK'\nPDSMSGLN EQU   *-PDSMSG\n         EJECT\nVTOCDCB  DCB   DDNAME=VOLUME01,                                        X\n               DSORG=PS,                                               X\n               MACRF=(R),                                              X\n               RECFM=FS,                                               X\n               KEYLEN=44,                                              X\n               BLKSIZE=96,                                             X\n               OPTCD=C,                                                X\n               NCP=NCPDFLT,                                            X\n               EXLST=JFCBAD,                                           X\n               EODAD=VTOCEOD,                                          X\n               SYNAD=SYNADXIT\n         EJECT\nPDSDCB   DCB   DDNAME=VOLUME01,                                        X\n               DSORG=PS,                                               X\n               MACRF=(R),                                              X\n               RECFM=F,                                                X\n               KEYLEN=8,                                               X\n               BLKSIZE=256,                                            X\n               EXLST=JFCBAD,                                           X\n               EODAD=PDSEOD,                                           X\n               SYNAD=SYNADXIT\n         EJECT\nPRINTDCB DCB   DDNAME=SYSPRINT,                                        X\n               DSORG=PS,                                               X\n               EROPT=ACC,                                              X\n               MACRF=(PM),                                             X\n               RECFM=FBM,                                              X\n               LRECL=133,                                              X\n               BLKSIZE=133\n         EJECT\nOPENLIST OPEN  (VTOCDCB,(INPUT)),MF=L\nOPENFLAG EQU   OPENLIST\nOPENUPDT EQU   X'04'\n         SPACE 2\nCLOSLIST CLOSE (VTOCDCB),MF=L\nCLOSFLAG EQU   CLOSLIST\nCLOSRERD EQU   X'10'\n         SPACE 2\n         READ  VTOCDECB,SF,VTOCDCB,CAMLIST,MF=L\n         SPACE 2\n         READ  PDSDECB,SF,PDSDCB,MF=L\n         SPACE 2\nENQVTOC  RESERVE (SYSVTOC,VOLSERNO,S,6,SYSTEMS),UCB=UCBADDR,MF=L\nENQFLAGS EQU   ENQVTOC+2\nENQSHAR  EQU   X'80'\n         SPACE 1\nSYSVTOC  DC    CL8'SYSVTOC'\n         EJECT\nDATEWORD DC    D'0'\nCONVDEC  DC    D'0'\nCONVEDIT DC    CL12' '\nCONVERTD DC    CL11' ',C' '\nCONVUNPK DC    CL12' '\nNOMAPDDS DC    C'JOBLIB  '\n         DC    C'STEPCAT '                P.A.S.\n         DC    C'JOBCAT  '                P.A.S.\n         DC    C'STEPLIB '\n         DC    C'SYSCHK  '\n         DC    C'PGM=*.DD'\n         DC    C'SYSIN   '\n         DC    C'SYSPRINT'\n         DC    C'SYSABEND'\n         DC    C'SYSUDUMP'\n         DC    C'        '\nVOLDDNAM DC    C'VOLUME00'\n         ORG   *-2\nCURVOLNM DC    C'00'\nTIME     DC    F'0'\nPARMLIST DC    A(0)\nDDNMLIST DC    A(0)\nHDNGLIST DC    A(0)\nDDLSTPTR DC    A(0)\n         SPACE 1\nEXTRACT  EQU   *\nTIOTAD   DC    A(0)\nCOMPTR   DC    A(0)\n         SPACE 1\nTIOTADDD DC    A(0)\nPDSBLKAD DC    A(PDSBLOCK,PDSBLOCK+PDSBLKLN)\nCCHH     DC    F'0'\nBUFPTR   DC    A(0)\nHOOKSTRT DC    A(*)\nHOOKEND  DC    F'-1'\nDATNORMY DC    H'365',AL1(31,28,31,30,31,30,31,31,30,31,30,31)\nDATLEAPY DC    H'366',AL1(31,29,31,30,31,30,31,31,30,31,30,31)\nCORLEFT  DC    F'0'\nCORNEXT@ DC    A(0)\nCURBLK@  DC    A(*+4)\nCORFRST@ DC    A(0)\nCURLINES DC    H'999'\nMAXPAGES DC    H'9999'\nMAXLINES DC    H'58'\nCURPAGES DC    H'0'\nJFCBAD   DC    X'87',AL3(JFCB)\nVOLTAB   DC    F'0'\nVOLSEEK  DC    F'0'\nVOLSAMP  DC    F'3000'              NO. OF SAMPLES   (TEN MINUTES)\nVOLUCB   DC    F'0'\nVOLTRKS  DC    F'0'\nVOLSAVE  DC    15F'0'\nSEEKCURR DC    F'0'\nSEEKCYL  DC    F'0'\nSEEKTRK  DC    F'0'\n         DS    0D\nINTERVL  DC    CL8'00000020'\nSEEKDBL  DC    2F'0'\nSEEKTABL DC    193X'00',X'0A0B0C0D0E0F',41X'00'\n         DC    X'00010203040506070809',6X'00'\nDOUBCYL  DS    2F\nDOUBTRK  DS    2F\nSEEKPRT  DC    X'09',CL120' '\n         EJECT\nSYSSEEK  DCB   DDNAME=SYSSEEK,DSORG=PS,RECFM=FB,LRECL=121,MACRF=(PM)\n         EJECT\nSEEKEMSG DC    X'09',CL132'DEVICE NNN% BUSY, FOR NNNNN SAMPLES'\nSEEKBUF  DS    CL133\nRETCODE  DC    F'0'\nABCODE   DC    F'100'              ABEND CODE 100\nSAVEAREA DC    18F'0'\nCURVOL   DC    H'0'\nDDNAMLEN DC    H'0'\nNUMVOLS  DC    H'-1'\nNCPPARM  DC    AL2(NCPDFLT)\nTRAREA   DC    CL15' ',C' '\nEFFS     DC    44X'FF'\nLASTDS1  EQU   EFFS\nZEROES   DC    44X'00'\nPARMOPT1 DC    AL1(08)    SET DEFAULT TO NO OPTIONS\nPARMOPT2 DC    AL1(0)\nTRTABLE  EQU   *-240\n         DC    C'0123456789ABCDEF'\nSTARS    DC    C'*********'\nVOLSTAT  DC    X'00'\n         DC    0F'0'\nHOOKINIT DC    2XL4'00'\n         DC    H'1'\n         DC    X'FF00'\n         DC    A(VOLABMSG)\n         DC    F'0'\n         EJECT\n         SPACE 3\nDEVTABLE DC    X'06',CL15'2305-1 DISK'\n*\n         DC    X'07',CL15'2305-2 DISK'\n*\n         DC    X'08',CL15'2314 DISK PACK'\n*\n         DC    X'09',CL15'3330 DISK PACK'\n*\n         DC    X'0A',CL15'3340-35M DISK'   ADDED 5/4/75  P.A.S.\n*\n         DC    X'0B',CL15'3350 DISK PACK'  ADDED 01/10/77 G.D.F.\n*\n         DC    X'0D',CL15'3330-II DISK'     ADDED 4/1/75  P.A.S.\n*\nDEVTABND DC    X'00',CL7'UNKNOWN'\n         SPACE 1\nDEVENTLN EQU   16\n         EJECT\n         LTORG\n         SPACE 1\nPCTLINE  DC    CL51'0====1====2====3====4====5====6====7====8====9===='\nVOLABMSG DC    CL44'  **** VOLUME LABEL ****'\nVTOCMSG  DC    CL44'  **** VOLUME TABLE OF CONTENTS ****'\nFMT6MSG  DC    CL44'SPLIT CYLINDER(S) SHARED BY NEXT XXX EXTENTS'\n         SPACE 3\nSTORAGES DS    0D\n         EJECT\nBUF      DS    CL133\n         SPACE 2\n         ORG   BUF+1\nL1       DS    0CL132\nL1DSNAME DS    CL44\n         DS    C\nL1SERIAL DS    CL6\n         DS    C\nL1SECUR  DS    CL3\n         DS    C\nL1REFDT  DS    CL8\n         DS    C\nL1CREDT  DS    CL8\n         DS    C\nL1EXPDT  DS    CL8\n         DS    C\nL1DSORG  DS    CL3\n         DS    C\nL1RECFM  DS    CL3\n         DS    C\nL1BLKSIZ DS    CL5\n         DS    C\nL1LRECL  DS    CL5\n         DS    C\nL1KEYLEN DS    CL3\n         DS    C\nL1OPTCD  DS    CL2\n         DS    C\nL1TRKAL  DS    CL5\n         DS    C\nL1TRKUS  DS    CL5\n         DS    C\nL1NOEPV  DS    CL2\n         DS    C\nL1SECQU  DS    CL5\n         DS    C\nL1TYP    DS    CL1\n         SPACE 1\n         ORG   L1SERIAL\nL1LSTDT  DS    CL8\n         DS    C\nL1USCNT  DS    CL5\n         ORG   ,\n         EJECT\nPRSAVE   DS    5A\nDASAVE   DS    5A\n         DS    0D\nPDSBLOCK DS    2XL(PDSBLKLN)\nCAMLIST  DS    XL(CAMLSTLN)\n         SPACE 1\nSTART0   DS    0H                  START OF CORE ZEROED FOR EACH VOL\n         SPACE 1\nDEVTYPE  DS    6F\nUCBADDR  DS    A\nFIRSTDS1 DS    A\nFMT4AD   DS    A\nFMT5AD   DS    A\nFMT6AD   DS    A\nFMT5TT   DS    H\nFMT5CYLS DS    H\n         SPACE 1\nREBLOCK@ DS    F\nRENEXT@  DS    F\nREBLKSIZ DS    F\nRECOUNT  DS    F\nRENCP    DS    F\nREGETSIZ DS    F\n         SPACE 1\nFMXCOUNT DS    0H                  COUNT FIELDS MUST BE TOGETHER\nFM0COUNT DS    H\nFM1COUNT DS    H\nFM2COUNT DS    H\nFM3COUNT DS    H\nFM4COUNT DS    H\nFM5COUNT DS    H\nFM6COUNT DS    H\n         SPACE 1\nAVAILCYL DS    H\nAVAILSPC DS    H\nAVAILEXT DS    H\nVTOCSIZE DS    H\nLOWTT    DS    H\nHIGHTT   DS    H\n         SPACE 1\nHOOKPTR  DS    F\nHOOKLCCH DS    XL4\nHOOKHCCH DS    XL4\nHOOKNTRK DS    H\nHOOKTYPE DS    X\nHOOKSEQN DS    X\nHOOKIDPT DS    A\nHOOKLOTT DS    XL2\nHOOKHITT DS    XL2\n         SPACE 1\nF1TRKAL  DS    F\nDEVTABPT DS    A                   POINTER TO CURRENT DEVTABLE ENTRY\nDEVCONV1 DS    H                   CURRENT DEVTABLE INFO\nDEVCONV2 DS    H\nDEVCONV3 DS    H\nDEVCONV4 DS    H\nTRKSPCYL DS    H\nTRKSPVOL DS    H\nCRATRACK DS    H              REL TRACK ADDRESS OF VSAM CRA\nHWMOLD   DS    XL5\nHWMDS1   DS    XL5\nHWMNEW   DS    XL5\nHWMINDIC DS    X\nF5LARGST DS    XL3\nSYNADFLG DS    X\nOBCCHHR  DS    XL5\nBADDSTYP DS    C\nF5LARGTT DS    H\n         SPACE 1\n         DS    0H\nVTOCTTR  DS    0XL3\nVTOCTT   DS    H\nVTOCR    DS    X\nVTOCMBB  DS    0XL3\nVTOCM    DS    X\nVTOCBIN  DS    H\nVTOCCCHH DS    XL4\nVTDSCBTR DS    H\n         SPACE 1\nEND0     DS    0H                  END OF CORE ZEROED FOR EACH VOL\nLENGTH0  EQU   END0-START0         AMOUNT TO BE ZEROED\n         SPACE 1\nNUMEXT   DS    H\nLISTEXT  DS    17A\nPDSAVE   DS    6A\nPDSENTAD DS    A\nPDSBYTCT DS    H\nPDSBLKAL DS    H\nPDSBLKUS DS    H\nPDSMEMCT DS    H\nISAVE    DS    5A\nEXPFLAG  DS    X\nEXSAVE   DS    3A\nVTSAVE   DS    4A\nF1SAVE   DS    A\nF5SAVE   DS    6A\nHOSAVE   DS    4A\nDUSAVE   DS    A\n         EJECT ,\n         IEFJFCBN  LIST=YES\n         SPACE 1\nJFCB     EQU   INFMJFCB\n         SPACE 3\n         ORG   STORAGES\n         EJECT\n         SPACE 1\nINIT     L     R2,0(R1)\n         ST    R2,PARMLIST\n         LTR   R2,R2\n         BM    GETTIME\n         L     R2,4(R1)\n         ST    R2,DDNMLIST\n         LTR   R2,R2\n         BM    CHEKDDNM\n         L     R2,8(R1)\n         ST    R2,HDNGLIST\n         SPACE 1\n         LA    R2,0(R2)\n         LTR   R2,R2\n         BZ    CHEKDDNM\n         LH    R3,0(R2)\n         LA    R2,2(R2)\n         BAL   R14,PARMPARS\n         LTR   R0,R0\n         BNP   CHEKDDNM\n         CH    R0,=H'9999'\n         BH    CHEKDDNM\n         BCTR  R0,0\n         STH   R0,CURPAGES\n         MVI   HDNGLIST,X'FF'\n         SPACE 1\nCHEKDDNM TM    PARMLIST,X'80'\n         BO    GETTIME\n         L     R1,DDNMLIST\n         LH    R0,0(R1)\n         SH    R0,=H'8'\n         BM    GETTIME\n         OI    DDNMLIST,X'F0'\n         STH   R0,DDNAMLEN\n         MVC   DCBDDNAM+(PRINTDCB-IHADCB),2(R1)\n         SH    R0,=H'8'\n         BM    GETTIME\n         LA    R1,10(R1)\n         ST    R1,DDLSTPTR\n         OI    DDNMLIST,X'0F'\n         SPACE 1\nGETTIME  TIME  DEC\n         SRL   R0,4\n         ST    R0,TIME\n         MVC   PRTIME,=X'402120207A2020'\n         ED    PRTIME,TIME\n         ST    R1,DATEWORD+4\n         UNPK  TRAREA,DATEWORD+6(8)\n         TR    TRAREA,TRTABLE\n         MVC   PRDAY,TRAREA\n         SR    R2,R2\n         LA    R3,PRDATE\n         BAL   R14,DATEDIT\n         SPACE 1\n         OPEN  (PRINTDCB,(OUTPUT))\n         TM    DCBOFLGS+(PRINTDCB-IHADCB),DCBOFOPN\n         BNZ   *+8\n         BAL   R14,ABEND\n         MVI   BUF,C' '\n         MVC   BUF+1(L'BUF-1),BUF\n         SPACE 1\n         EXTRACT EXTRACT,FIELDS=(TIOT,COMM)\n         L     R1,TIOTAD\n         LA    R1,TIOENTRY-TIOT(,R1)\n         ST    R1,TIOTADDD\n         SPACE 1\n         MVC   BUF+10(21),=C'EXEC PARAMETER FIELD:'\n         L     R1,COMPTR\n         L     R1,COMCIBPT-COM(,R1)\nTESTCIB  LA    R1,0(,R1)\n         LTR   R1,R1\n         B     PARMEX                AXC   NEVER CHECK CIB\n*        BZ    PARMEX                AXC   NEVER CHECK CIB\n         USING CIB,R1\n         CLI   CIBVERB,CIBSTART\n         BE    PARMCIB\n         L     R1,CIBNEXT\n         B     TESTCIB\n         SPACE 1\nPARMCIB  LA    R1,CIBDATLN\n         ST    R1,PARMLIST\n         DROP  R1\n         MVC   BUF+9(5),=C'START'\n         SPACE 1\nPARMEX   L     R2,PARMLIST\n         LH    R3,0(R2)\n         LA    R2,2(R2)\n         CH    R3,=H'99'\n         BL    PARMLNOK\n         MVC   BUF+30(28),=C' IS TOO LONG AND WAS IGNORED'\n         SR    R3,R3\n         B     PARMPRNT\n         SPACE 1\nPARMLNOK LTR   R1,R3\n         BZ    PARMPRNT\n         BCTR  R1,0\n         STC   R1,*+5\n         MVC   BUF+33(*-*),0(R2)\nPARMPRNT MVI   BUF,SPACE3AP\n         BAL   R14,PRINT\n         SPACE 1\nPARMLOOP BAL   R14,PARMPARS\n         TM    PARMOPT2,VOLSOPT\n         BO    PARMVOL2\n         TM    PARMOPT2,LNCNTOPT\n         BO    PARMLCT2\n         TM    PARMOPT2,NCPOPT\n         BO    PARMNCP2\n         CLI   PARMBUF,C' '\n         BE    PARMDONE\n         SPACE 1\n         LA    R0,12\n         LA    R1,PARMS\nPARMCOMP CLC   PARMBUF,0(R1)\n         BE    GOTPARM\n         BXH   R1,R0,PARMCOMP\n         SPACE 1\nGOTPARM  MVC   PARMVALS,8(R1)\n         MVC   *+8(2),10(R1)\n         B     *-*\n         SPACE 1\nPARMSET  SR    R15,R15\n         IC    R15,PARMVALS+1\n         LA    R15,PARMOPT1(R15)\n         SR    R0,R0\n         IC    R0,PARMVALS\n         CLI   PARMVALS,128\n         BH    PARMOFF\n         STC   R0,*+5\n         OI    0(R15),*-*\n         B     PARMLOOP\n         SPACE 1\nPARMOFF  STC   R0,*+5\n         NI    0(R15),*-*\n         B     PARMLOOP\n         SPACE 1\nPDSON    L     R15,TIOTAD\n         B     PARMSET\n         SPACE 1\nRESETON  NI    ENQFLAGS,255-ENQSHAR\n         OI    CLOSLIST,CLOSRERD\n         B     PARMSET\n         SPACE 1\nRESETOFF OI    ENQFLAGS,ENQSHAR\n         NI    CLOSLIST,255-CLOSRERD\n         B     PARMSET\n         SPACE 1\nPARMVOL2 NI    PARMOPT2,255-VOLSOPT\n         LTR   R0,R0\n         BNP   PARMERR\n         CH    R0,=H'99'\n         BH    PARMERR\n         STH   R0,NUMVOLS\n         B     PARMLOOP\n         SPACE 1\nPARMLCT2 NI    PARMOPT2,255-LNCNTOPT\n         LTR   R0,R0\n         BNP   PARMERR\n         CH    R0,=H'999'\n         BNL   PARMERR\n         STH   R0,MAXLINES\n         B     PARMLOOP\n         SPACE 1\nPARMNCP2 NI    PARMOPT2,255-NCPOPT\n         LTR   R0,R0\n         BNP   PARMERR\n         CH    R0,=H'99'\n         BH    PARMERR\n         STH   R0,NCPPARM\n         B     PARMLOOP\n         SPACE 1\nPARMERR  MVI   BUF+10,C'\"'\n         MVC   BUF+11(8),PARMBUF\n         MVC   BUF+19(41),=C'\" IS AN ILLEGAL PARAMETER AND WAS IGNORED'\n         MVI   BUF,SPACE3AP\n         BAL   R14,PRINT\n         B     PARMLOOP\n         SPACE 1\nPARMDONE OI    PARMOPT2,VOLSOPT\n         LH    R0,NUMVOLS\n         CH    R0,=H'-1'\n         BNE   PARMVOL#\n         NI    PARMOPT2,255-VOLSOPT\n         MVC   NUMVOLS,=H'99'\n         MVC   BUF+10(3),=C'ALL'\n         B     PARMVLPR\n         SPACE 1\nPARMVOL# BAL   R14,CONVERT\n         MVC   BUF+10(3),CONVEDIT+9\nPARMVLPR MVC   BUF+14(24),=C'VOLUME(S) WILL BE LISTED'\n         MVI   BUF,SPACE3AP\n         BAL   R14,PRINT\n         SPACE 1\n         CLC   NCPPARM,=H'1'\n         BNE   *+8\n         OI    PARMOPT2,NCPOPT\n         TM    PARMOPT1,LSTDTOPT\n         BZ    PARMDDCK\n         MVC   HEADAT1A(14),=C' LSTDT   USCNT'\n         MVC   HEADAT1B(14),=C'________ _____'\n         SPACE 1\nPARMDDCK TM    DDNMLIST,X'F0'\n         BNO   PARMHDCK\n         MVC   BUF+10(36),=C'AN INTERNAL DDNAME LIST WILL BE USED'\n         TM    DDNMLIST,X'0F'\n         BO    *+10\n         MVC   BUF+47(14),=C'FOR PRINT ONLY'\n         MVI   BUF,SPACE3AP\n         BAL   R14,PRINT\n         SPACE 1\nPARMHDCK CLI   HDNGLIST,X'FF'\n         BNE   PRTINFO      ADDED 4/1/75  P.A.S.  FOR 'HELP'\n         MVC   BUF+10(35),=C'AN INTERNAL PAGE COUNT WILL BE USED'\n         MVI   BUF,SPACE3AP\n         BAL   R14,PRINT\n         SPACE 3\nPRTINFO  EQU   *\n         LA    R3,PRTINFOL  POINT TO INFO LISTING\n         LA    R2,29    NUMBER OF LINES TO PRINT\nPRTINFOA MVC   BUF+9(47),0(R3)  MOVE LINE TO BUFFER\n         MVI   BUF,SPACE1AP   INSERT CARRIAGE CONTROL\n         LA    R3,47(R3)  INCREMENT TO NEXT LINE\n         BAL   R14,PRINT\n         BCT   R2,PRTINFOA GO AGAIN\n         MVI   BUF,SPACE3IM\n         BAL   R14,PRINT\n         MVC   BUF+9(33),=C'*** OPERATING SYSTEM RUN ON .... '\n         MVI   BUF,SPACE3AP\n         L     R3,16  POINT TO CVT\n         LA    R3,116(R3)   POINT TO OPERATING SYS\n         TM    0(R3),X'40'  PCP\n         BNO   *+10\n         MVC   BUF+42(4),=C'PCP '\n         TM    0(R3),X'20'  MFT\n         BNO   *+10\n         MVC   BUF+42(4),=C'MFT '\n         TM    0(R3),X'10'  MVT\n         BNO   *+10\n         MVC   BUF+42(4),=C'MP65'\n         TM    0(R3),X'22'  VS1\n         BNO   *+10\n         MVC   BUF+42(4),=C'VS1 '\n         TM    0(R3),X'12'  VS2 REL 1 (SVS)\n         BNO   *+10\n         MVC   BUF+42(4),=C'SVS '\n         TM    0(R3),X'11'  VS2 REL 2+  (MVS)\n         BNO   *+10\n         MVC   BUF+42(4),=C'MVS '\n         BAL   R14,PRINT\n         B     NEXTVOL\n         EJECT\nPRTINFOL DC    CL47'**********  EXECUTION  PARM  VALUES  **********'\n         DC    CL47'*                                             *'\n         DC    CL47'*  MAP.....PRODUCE A TRACK MAP OF VOLUME      *'\n         DC    CL47'*  SMAP....PRODUCE A TRACK MAP WITH SEEK INFO *'\n         DC    CL47'*  PDS.....LIST ALL PDS DIRECTORIES ON VOLUME *'\n         DC    CL47'*  ISAM....LIST ISAM REORG INFO FOR DATASETS  *'\n         DC    CL47'*  EXT.....LIST THE EXTENTS OF THE DATASETS   *'\n         DC    CL47'*  DUMP....LIST (HEX) ALL DSCBS ON VOLUME     *'\n         DC    CL47'*  EMPTY...LIST ONLY DATASETS THAT ARE EMPTY  *'\n         DC    CL47'*  MODEL...WILL ONLY LIST \"MODEL DSCBS\"       *'\n         DC    CL47'*  SDUMP...LIST (HEX) FORMAT 4 AND 5 DSCBS    *'\n         DC    CL47'*  VOLS....ONLY USE DDNAMES OF \"VOLUME--\",    *'\n         DC    CL47'*      FORMAT--\"VOLS=X\", WHERE \"X\" IS MAX #   *'\n         DC    CL47'*  JDATE...LIST CREATE/EXPIRE DATE IN JULIAN  *'\n         DC    CL47'*                                             *'\n         DC    CL47'*  ALL DASD ALLOCATED TO STEP WILL BE LISTED  *'\n         DC    CL47'*  EXCEPT SYSTEM DDS.....SYS--, STEP--, ETC.  *'\n         DC    CL47'*  ***  DO NOT USE A DDNAME OF \"SY000\"  ***   *'\n         DC    CL47'*                                             *'\n         DC    CL47'*                                             *'\n         DC    CL47'*  STEPNAME SETS NO. OF SAMPLES FOR \"SMAP\"    *'\n         DC    CL47'*  STEPNAME FORMAT IS AS FOLLOWS -            *'\n         DC    CL47'*                                             *'\n         DC    CL47'*  SNNNN -                                    *'\n         DC    CL47'*      \"NNNN\"  IS THE NO. OF 1/5 SEC SAMPLES. *'\n         DC    CL47'*      IF \"NNNN\" IS NOT NUMERIC A DEFAULT OF  *'\n         DC    CL47'*      3000 SAMPLES WILL BE USED (10 MINUTES) *'\n         DC    CL47'*                                             *'\n         DC    CL47'***********************************************'\n         EJECT\n         SPACE 3\nPARMPARS SR    R0,R0\n         MVC   PARMBUF,=CL8' '\n         LA    R4,PARMBUF\n         SPACE 1\nPRMLOOK  CH    R3,=H'0'\n         BNHR  R14\n         CLI   0(R2),C' '\n         BE    PRMIGNOR\n         CLI   0(R2),C','\n         BE    PRMRETRN\n         CLI   0(R2),C'='\n         BE    PRMRETRN\n         LTR   R0,R0\n         BM    PRMNOT#\n         TM    0(R2),X'F0'\n         BNO   PRMNOT#\n         IC    R15,0(R2)\n         N     R15,=F'15'\n         CH    R15,=H'10'\n         BNL   PRMNOT#\n         MH    R0,=H'10'\n         AR    R0,R15\n         B     PRMSHIFT\n         SPACE 1\nPRMNOT#  LH    R0,=H'-1'\nPRMSHIFT C     R4,=A(PARMBUF+L'PARMBUF)\n         BNL   PRMIGNOR\n         MVC   0(1,R4),0(R2)\n         LA    R4,1(R4)\nPRMIGNOR LA    R2,1(R2)\n         BCTR  R3,0\n         B     PRMLOOK\n         SPACE 1\nPRMRETRN LA    R2,1(R2)\n         BCTR  R3,0\n         BR    R14\n         EJECT ,\n         SPACE 3\nPARMS    DS    0H\n         DC    C'LINECNT ',AL1(LNCNTOPT),AL1(1),S(PARMSET)\n         DC    C'NCP     ',AL1(NCPOPT),AL1(1),S(PARMSET)\n         DC    C'MODEL   ',AL1(MODELOPT),AL1(1),S(PARMSET)\n         DC    C'VOLS    ',AL1(VOLSOPT),AL1(1),S(PARMSET)\n         DC    C'EMPTY   ',AL1(EMPTYOPT),AL1(0),S(PARMSET)\n         DC    C'NOEMPTY ',AL1(255-EMPTYOPT),AL1(0),S(PARMSET)\n         DC    C'DUMP    ',AL1(DUMPOPT),AL1(0),S(PARMSET)\n         DC    C'NODUMP  ',AL1(255-DUMPOPT),AL1(0),S(PARMSET)\n         DC    C'EXT     ',AL1(EXTNTOPT),AL1(0),S(PARMSET)\n         DC    C'NOEXT   ',AL1(255-EXTNTOPT),AL1(0),S(PARMSET)\n         DC    C'ISAM    ',AL1(ISAMOPT),AL1(1),S(PARMSET)\n         DC    C'NOISAM  ',AL1(255-ISAMOPT),AL1(1),S(PARMSET)\n         DC    C'JDATE   ',AL1(JDATEOPT),AL1(1),S(PARMSET)\n         DC    C'NOJDATE ',AL1(255-JDATEOPT),AL1(1),S(PARMSET)\n         DC    C'LSTDT   ',AL1(LSTDTOPT),AL1(0),S(PARMSET)\n         DC    C'NOLSTDT ',AL1(255-LSTDTOPT),AL1(0),S(PARMSET)\n         DC    C'MAP     ',AL1(MAPOPT),AL1(0),S(PARMSET)\n         DC    C'NOMAP   ',AL1(255-MAPOPT),AL1(0),S(PARMSET)\n         DC    C'SMAP    ',AL1(SMAPOPT),AL1(1),S(PARMSET)\n         DC    C'NOSMAP  ',AL1(255-SMAPOPT),AL1(1),S(PARMSET)\n         DC    C'PDS     ',AL1(PDSOPT),AL1(0),S(PDSON)\n         DC    C'NOPDS   ',AL1(255-PDSOPT),AL1(0),S(PARMSET)\n         DC    C'RESET   ',AL1(RESETOPT),AL1(1),S(RESETON)\n         DC    C'NORESET ',AL1(255-RESETOPT),AL1(1),S(RESETOFF)\n         DC    C'SDUMP   ',AL1(SDUMPOPT),AL1(0),S(PARMSET)\n         DC    C'NOSDUMP ',AL1(255-SDUMPOPT),AL1(0),S(PARMSET)\nPARMBUF  DC    C'        ',AL1(0),AL1(0),S(PARMERR)\n         SPACE 1\nPARMVALS DS    XL2\n         EJECT ,\n         LTORG\n         SPACE 1\n         ORG   ,\n         EJECT\nUCB      DSECT\n         IEFUCBOB  LIST=YES\n         EJECT\nTIOT     DSECT\n         IEFTIOT1\n         EJECT\n         DCBD  DSORG=BS,DEVD=DA\n         EJECT\nDS1      DSECT\n         IECSDSL1 (1)\nDS1FDAD  DS    XL8                 FULL DA ADDRESS OF F1 DSCB\nDS1F3PTR DS    A                   @ OF F3 DSCB, IF ANY\nDS1F1PTR DS    A                   @ OF NEXT F1 DSCB\nDS1LEN   EQU   *-DS1\n         SPACE 1\n         ORG   DS1SYSCD-1\nDS1SECLV DS    XL1\n         ORG   DS1SYSCD+13\nDS1LSTDT DS    XL3\nDS1USCNT DS    XL2\n         EJECT ,\nDS2      DSECT\n         IECSDSL1 (2)\nDS2FDAD  DS    XL8                 FULL DA ADDRESS OF F2 DSCB\nDS2F3PTR DS    A                   POINTER TO FMT3 DSCB, IF ANY\nDS2LEN   EQU   *-DS2\n         EJECT\nDS3      DSECT\n         IECSDSL1 (3)\nDS3FDAD  DS    XL8                 FULL DA ADDRESS OF F3 DSCB\nDS3F2PTR DS    A                   POINTER TO FMT2 DSCB, IF ANY\nDS3LEN   EQU   *-DS3\n         EJECT\nDS4      DSECT\nDS4KEYID DS    XL44\n         IECSDSL1 (4)\nDS4FDAD  DS    XL8\nDS4LEN   EQU   *-DS4\n*\n         ORG   DS4NOEXT+2\nDS4SECLV DS    XL1                 PRIV LEVEL REQ. FOR VTOC ACCESS\n         ORG   DS4DEVDB+9          VSAM OWNERSHIP BIT  X'80'\nDS4VSAM  DS    XL1                 USED TO PREVENT MULTIPLE OWNERS\n         EJECT\nDS5      DSECT\n         IECSDSL1 (5)\nDS5FDAD  DS    XL8\nDS5F5PTR DS    A                   @ OF NEXT F5 DSCB, IF ANY\nDS5LEN   EQU   *-DS5\n         EJECT\nDS6      DSECT\n         IECSDSL1 (6)\nDS6FDAD  DS    XL8\nDS6F6PTR DS    A\nDS6LEN   EQU   *-DS6\n         EJECT\n         CVT   LIST=YES,DSECT=YES                           *HMD 06/82*\n         EJECT                                              *HMD 06/82*\n         IHAPSA  ,                                          *HMD 06/82*\n         EJECT                                              *HMD 06/82*\n         IKJTCB  LIST=YES                                   *HMD 06/82*\n         EJECT                                              *HMD 06/82*\n         IECDIOSB ,                                         *HMD 06/82*\n         EJECT                                              *HMD 06/82*\nCOM      DSECT\n         IEZCOM\n         EJECT ,\nCIB      DSECT\n         IEZCIB\n         EJECT\nEXTENT   DSECT\nEXTPTR   DS    A\nEXTLCCHH DS    XL4\nEXTHCCHH DS    XL4\nEXTNOTRK DS    H\nEXTTYPE  DS    X\nEXTSEQNO DS    X\nEXTIDPTR DS    A\nEXTLOTT  DS    XL2\nEXTHITT  DS    XL2\nEXTNTLEN EQU   *-EXTENT\n         EJECT\nEXLINE   DSECT\nEXLLPARN DS    C\nEXLFCC   DS    CL4\nEXLFPRD  DS    C\nEXLFHH   DS    CL4\n         DS    2C\nEXLLCC   DS    CL4\nEXLLPRD  DS    C\nEXLLHH   DS    CL4\n         DS    2C\nEXLFTT   DS    CL5\n         DS    2C\nEXLLTT   DS    CL5\n         DS    2C\nEXLNOTRK DS    CL5\nEXLRPARN DS    C\n         DS    C\nEXLSEQNO DS    CL2\n         DS    2C\nEXLTYPE  DS    CL4\n         DS    2C\nEXLDSNAM DS    CL44\nEXLSPLIT EQU   EXLDSNAM+33\n         EJECT\nPDS      DSECT\nPDSHKEY  DS    CL8\nPDSCOUNT DS    H\n         SPACE 1\nPDSENTRY EQU   *\nPDSNAME  DS    CL8\nPDSTTRP  DS    XL3\nPDSINDIC DS    B\nPDSALIAS EQU   X'80'\nPDS#TTRS EQU   X'60'\nPDSUSERH EQU   X'1F'\nPDSUSERD DS    0X\n         SPACE 3\n         END   DISKSEEK\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DISKTEST": {"ttr": 5121, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06O\\x01\\x02\\x06O G\\x03\\x80\\x03\\x80\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-05T00:00:00", "modifydate": "2002-03-05T20:47:00", "lines": 896, "newlines": 896, "modlines": 0, "user": "SYZYGY1"}, "text": "DISK      TITLE '*** DISKTEST, V01, 01/27/81, H.G. NG ***'\n*         (1)  EXERCISE DASD WITH BSAM WRITE'S AND READ'S\n*         (2)  ISSUE STIMER WITH TASK, WILL AUTOMATICALLY CANCEL\n*              CURRENT TASK.\n*         (3)  ISSUE WRITES OR READS, THEN A STIMER WAIT OF 1 MS\n*              BEFORE ANOTHER WRITE OR READ.  THEREFORE WILL NOT\n*              OVERLOAD CHANNEL DOING TEST I/O.\n           SPACE 2\n*  DISKTEST RETURN CODES:\n*  00 --> TTIMER CANCELED, AND NORMAL RETURN.\n           SPACE 2\n*  DISKTEST ABEND CODES\n*  ABEND 01 --> FILE OUT, BAD OPEN FOR OUTPUT\n*  ABEND 02 --> FILE IN,  BAD OPEN FOR INPUT\n*  ABEND 98 --> FILE OUT, SYNAD I/O ERROR\n*  ABEND 10 --> STIMER CANCELED SUBROUTINE DISK.\n         EJECT\n*  PARM PASSED IN -\n         SPACE 2\n*  ON EXEC CARD -->\n*  //SSS EXEC PGM=DISKTEST,\n*  //    PARM='TIME=00300000,MSGS=YES,UNIT=3350,VOL=VVVVVV'\n*\n*    1.  THESE ARE THE PARMS PASSED TO DISKTEST FOR DASD BSAM I/O\n*        FOR TESTS ON PACKS WITH PROBLEMS OR TO BURN IN BEFORE\n*        USING PACKS FOR REAL WORK.\n*\n*    2.  DEFINITIONS -\n*\n*        A.  TIME=HHMMSSTH, TIME-LIMIT OF BSAM I/O TASK.  THE TASK\n*            WILL AUTOMATICALLY CANCEL ITSELF AT THIS TIME LIMIT.\n*            THE DEFAULT IS 4 HOURS.\n*\n*        B.  MSGS=YES/NO, THERE ARE WTO AND SYSPRINT MESSAGES\n*            INDICATING THE START, END, AND THE NUMBER OF RECORDS\n*            WRITTEN OR READ.  IF YOU WISH TO SUPPRESS THESE\n*            MESSAGES, THEN 'MSGS=NO'. THE DEFAULT IS YES.\n*\n*        C.  UNIT=2305-2/3330/3330-1/3350/3380.  THIS IS THE UNIT\n*            PARAMETER FOR THE MESSAGES.  THE DEFAULT IS 3350.\n*\n*        D.  VOL=VVVVVV.  THIS IS THE VOLSER REFERENCE FOR THE\n*            MESSAGES.  THE DEFAULT IS VVVVVV.\n*\n*        E.  YOU MUST ALLOCATE IN PRIMARY CYL SPACE.\n*\n*            2305-2, 96  CYLINDERS PER VOLUME\n*            3330,   404 CYLINDERS PER VOLUME\n*            3330-1  808 CYLINDERS PER VOLUME\n*            3350,   555 CYLINDERS PER VOLUME\n*            3380,   885 CYLINDERS PER VOLUME\n*\n*\n*\n*\n*\n*\n*\n         EJECT\nDISKTEST CSECT\n         SPACE 2\nR00      EQU   00\nR01      EQU   01\nR02      EQU   02\nR03      EQU   03\nR04      EQU   04\nR05      EQU   05\nR06      EQU   06\nR07      EQU   07\nR08      EQU   08\nR09      EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         USING DISKTEST,R12\n         LA    R15,SA1\n         ST    R15,8(,R13)          LSA IN HSA+8\n         ST    R13,4(,R15)          HSA IN LSA+4\n         LR    R13,R15              SET SA FOR CALLS\n         EJECT\n*        GET GO STEP EXEC PARM\n         SPACE 1\n         LA    R11,1                    R11=F'1'\n         SPACE 1\n         L     R01,0(,R01)              POINT TO PARM\n         LH    R04,0(,R01)        R04 = GET LEN OF STRING\n         LA    R03,2(,R01)        R03 = ADDRESS OF STRING\n         SR    R04,R11                  EXEC LEN OF STRING\n         SPACE 2\n*        PARM  SCAN\nPARMLOOP DS    0H\n         LTR   R04,R04                  ANY PARM LEFT ?\n         BNP   DONEP                    GO TO DONE PARSING\n         SPACE 1\n*        FIND  KEYWORD FIRST\n         XR    R01,R01            R01 = ADR OF '=',CLEAR IT FIRST\n         MVI   TRTTAB+C',',0            DO NOT STOP ON ','\n         MVI   TRTTAB+C'=',1                   STOP ON '='\n         EX    R04,TRT                  GO FIND '='\n         BZ    $SYNTAX                  HAS TO BE ONE\n         LA    R05,1(,R01)        R05 = A OF '=' +1\n         SR    R01,R03            R01 = LEN OF KEYWORD\n         BNP   $SYNTAX                  MUST BE AT LEAST ONE BYTE\n         CH    R01,=H'7'                LONGEST THAN LONGEST ?\n         BNH   *+8\n         LH    R01,=H'7'                TRUNCATE IT\n         SR    R01,R11            R01 = EXEC LEN OF KEYWORD\n         EJECT\n*        CHECK  LNKLST CHANIN FOR VALID  KEYWORDS FOR MATCH\n         SPACE 1\n         L     R06,HEAD                 GET FIRST IN CHAIN\n         USING ENTRY,R06                DSECT MAPPING\n         XR    R15,R15            R15 = MATCH ADDRESS\n         SPACE 2\nMATCHLP  DS    0H\n         XR    R00,R00                  CLEAR FOR IC\n         IC    R00,ENTEXLEN       R00 = EXEC LEN OF ENTRY\n         CR    R01,R00            R01 = EXEC LEN OF KEYWORD IN PARM\n         BH    MATCHNXT                 SKIP THIS ENTRY\n         EX    R01,CLC                  NO, IS IT A MATCH\n         BNE   MATCHNXT                 NO, NEXT ENTRY\n         BXH   R15,R15,$AMBIG           YES, HAVE MATCH ALREADY\n         LR    R15,R06            R15 = KEEP ENTRY ADDRESS\n         SPACE 1\nMATCHNXT DS    0H\n         L     R06,ENTLINK        R06 = NEXT ENTRY IN LINKLST\n         LTR   R06,R06                  IS IT LAST ENTRY\n         BNZ   MATCHLP                  CONTINUE DOWN CHAIN\n         LTR   R15,R15                  ANY MATCH ?\n         BZ    $SYNTAX                  NO, INVALID SYNTAX\n         EJECT\n*        PARSE  OUT THE KEYWORD VALUE\n         SPACE 2\n         LR    R00,R03            R00 = KEEP BEGIN OF KEYWORD\n         LR    R03,R05            R03 = POINT TO VALUE\n         SR    R05,R00                  LEN OF KEYWORD\n         SPACE 1\n         SR    R04,R05                  LESS PARM, LEFT NOW\n         BM    DONEP\n         LR    R06,R15            R06 = ADR OF ENTRY WHICH MATCHED\n         SPACE 1\n         MVI   TRTTAB+C'=',0            DO NOT STOP ON '='\n         MVI   TRTTAB+C',',1                   STOP ON ','\n         LA    R01,1(R03,R04)     R01 = LOC AFTER ','\n*                                       ASSUME FAKE ',' AT END OF\n*                                       PARM\n         EX    R04,TRT                  FIND A ','\n         LA    R05,1(,R01)        R05 = PAST ',' OR FAKE ','\n         SR    R01,R03            R01 = LEN OF VALUE\n         CH    R01,=H'15'               VALUE TOO LONG ?\n         BH    $SYNTAX\n         SR    R01,R11            R01 =  EXEC LEN OF VALUE\n         BM    PARMNEXT                 NO VALUE, GO TO NEXT KEYWD\n         CH    R01,=H'15'               VALUE TOO LONG ?\n         BH    $SYNTAX\n         SPACE 2\n         STC   R01,ENTLEN               LEN OF VALUE\n         EX    R01,MVEVALUE\n         EJECT\nPARMNEXT DS    0H\n         LR    R00,R03                  KEEP BEGIN OF VALUE\n         LR    R03,R05                  NEXT KEYWORD AFTER ','\n         SR    R05,R00          R05 =   LEN OF VALUE + ','\n         SR    R04,R05          R04 =   LESS PARM NOW, LEN OF PARM\n         B     PARMLOOP\n         SPACE 2\nDONEP    DS    0H                       PRINT KEYS AND VALUES\n         SPACE 1\n         OPEN  (SYSPRNT1,OUTPUT)        OPEN SYSPRINT FILE\n         SPACE 1\n         L     R06,HEAD\n         LA    R02,LINE1\n         SPACE 2\nPRINTLP  DS    0H\n         MVI   LINE1,X'40'              CLEAR IT\n         MVC   LINE1+1(131),LINE1\n         SPACE 1\n         IC    R15,ENTEXLEN\n         EX    R15,MVCL1\n         IC    R15,ENTLEN\n         EX    R15,MVCL2\n         SPACE 1\n         PUT   SYSPRNT1,LINE1\n         SPACE 1\n         L     R06,ENTLINK              NEXT ENTRY IN CHAIN\n         LTR   R06,R06                  ANY LEFT ?\n         BNZ   PRINTLP\n         SPACE 2\n*        EJECT THE PAGE\n         SPACE 1\n         MVI   LINE1,X'40'\n         MVC   LINE1+1(131),LINE1\n         MVI   LINE1,C'1'\n         PUT   SYSPRNT1,LINE1\n         SPACE 1\n         B     GETDISKA\n         EJECT\n*        SYNTAX ERROR\n         SPACE 1\n$SYNTAX  MVC   LINE1+1(17),=C'SYNTAX ERROR NEAR'\n$ERROR   MVC   LINE1+31(50),0(R03)\n         PUT   SYSPRNT1,LINE1\n         SPACE 1\n         B     GOBACK\n         SPACE 2\n*        AMBIGUITY\n         SPACE 1\n$AMBIG   MVC   LINE1+1(22),=C'AMBIGUOUS KEYWORD NEAR'\n         B     $ERROR\n         EJECT\nGETDISKA DS    0H\n         SPACE 1\n         BAL   R14,PRINTH               PRINT HEADINGS\n         SPACE 1\n         LA    R01,HEAD                 PASS TO DISK\n         L     R15,=V(DISK)\n         SPACE 2\n*        ISSUE STIMER FOR TASK, WILL CANCEL AFTER TIMED\n*        TASK OPRATIVE, TIMER DECREMENTED ONLY WHEN SUBROUTINE IS\n*        EXECUTING\n*\n         BAL   R14,MAXTIME\n         SPACE 2\n         BALR  R14,R15                  GO DO WRITE AND READ IN SUBR\n         EJECT\n*\n*        IF BY CHANCE IT RETURNS AT ALL, CANCEL STIMER\n*        SHOULD NEVER RETURN\n         SPACE 2\nEXIT00   DS    0H\n         TTIMER CANCEL\n         SPACE 2\n         MVC   AMSG2+11(8),=CL8'ENDING  '\n         BAL   R14,PRINTH               PRINT END HEADINGS\n         SPACE 1\n         CLOSE (SYSPRNT1)\n         SPACE 1\nGOBACK   DS    0H\n         L     R13,SA1+4                WITHIN TIME LIMIT,IF EVER\n         RETURN (14,12),RC=00           RETURN\n         EJECT\nMAXTIME  DS    0H\n         STM   R14,R12,12(R13)\n         LA    R15,SAMAX\n         ST    R15,8(,R13)              LSA IN HSA+8\n         ST    R13,4(,R15)              HSA IN LSA+4\n         LR    R13,R15                  SET SA FOR CALLS\n         SPACE 1\n         MVC   TIMED(8),TIME+5          GET TIME\n         SPACE 2\n         STIMER TASK,EXIT10,DINTVL=TIMED\n         SPACE 2\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         BR    R14\n         EJECT\nPRINTH   DS    0H                       PRINT HEADINGS\n         STM   R14,R12,12(R13)\n         LA    R15,SAPRTH\n         ST    R15,8(,R13)\n         ST    R13,4(,R15)\n         LR    R13,R15\n         SPACE 2\n         TIME  DEC,ZONE=LT\n         ST    R00,TIMEA\n         ST    R01,DATEA\n         UNPK  AMSG3+11(7),TIMEA\n         OI    AMSG3+17,X'F0'\n         UNPK  AMSG3+22(5),DATEA\n         OI    AMSG3+26,X'F0'\n         SPACE 1\n         MVC   AMSG4+19(6),VOL+5\n         MVC   AMSG4+32(6),UNIT+5\n         MVI   LINE1,X'40'\n         SPACE 1\n         LA    R02,5                    PRINT 5 LINES\n         LA    R03,AMSG1                FIRST LINE\nPRINTL   DS    0H\n         MVC   LINE1+1(45),0(R03)\n         PUT   SYSPRNT1,LINE1\n         SPACE 1\n******   MESSAGE TO OPERATOR   *************************************\n         MVC   *+14(45),0(R03)\n         WTO   '012345678901234567890123456789012345678901234',        C\n               ROUTCDE=(2),DESC=(6)\n********************************************************************\n         SPACE 1\n         LA    R03,45(R03)              NEXT LINE\n         BCT   R02,PRINTL\n         SPACE 1\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         BR    R14\n         EJECT\nSYSPRNT1 DCB   DDNAME=SYSPRNT1,DSORG=PS,RECFM=FBA,                     C\n               MACRF=PM,BLKSIZE=132,LRECL=132\n         EJECT\n*        CONSTANTS FOR DISKTEST\n         SPACE 2\nSA1      DC    18F'0'\nSAMAX    DC    18F'0'\nSAPRTH   DC    18F'0'\nTIMEA    DC    F'0'\nDATEA    DC    F'0'\nTIMED    DC    D'0'\n         SPACE 2\nTRTTAB   DC    256X'00'                 FIND ',' OR '='\nLINE1    DC    132XL1'40'\n         EJECT\n*        MESSAGES\nAMSG1    DC    45CL1'*'\nAMSG2    DC    CL45'****       STARTING R/W IO TEST          ****'\nAMSG3    DC    CL45'****       HHMMSST    YYDDD              ****'\nAMSG4    DC    CL45'****       VOLUME: VVVVVV TYPE: XXXX     ****'\nAMSG5    DC    45CL1'*'\n         EJECT\n****                                    <<< BEGIN EXECUTES >>>\nTRT      TRT   0(0,R03),TRTTAB          FIND ',' OR '='\nCLC      CLC   0(0,R03),ENTKEY\nMVEVALUE MVC   5(0,R06),0(R03)\nMVCL1    MVC   1(0,R02),ENTKEY\nMVCL2    MVC   15(0,R02),ENTVAL\n****                                    <<< END EXECUTES >>>\n         SPACE 2\n         DROP  R06                      DON'T NEED IT AFTER THIS\n         EJECT\n         LTORG\n         EJECT\n***      STIMER EXIT FOR WATCHDOG TIMER\n***      INPUT REGISTERS ARE NOT SAVED IN OS-PROVIDED SA (R13)\n***      SINCE WE ARE ABOUT TO ABEND\n***\n***      R00-R12  = ?\n***      R13      = A USEABLE SAVEAREA\n***      R14      = RETURN ADDRESS\n***      R15      = EXIT EPA A(EXIT10)\n         SPACE 2\nEXIT10   DS    0H                       STIMER CANCELED TASK IN\n         LR    R12,R15\n         SPACE 1\n         DROP  R12                      GET RID OF MAIN BASE\n         SPACE 1\n         USING EXIT10,R12\n         SPACE 1\n         ABEND 10                       USER ABEND CODE, NO DUMP\n         SPACE 1\n         DROP  R12                      NO MORE EXIT10 BASE\n         EJECT\n*        LINKED LIST\n         SPACE 1\nHEAD     DC    A(TIME)\nTIME     DC    A(MSGS)\n         DC    AL1(7),CL15'00300000       '     DEFAULT HHMMSSTH\n         DC    AL1(3),C'TIME'\nMSGS     DC    A(UNIT)\n         DC    AL1(2),CL15'YES            '     DEFAULT PRINT MSGS\n         DC    AL1(3),C'MSGS'\nUNIT     DC    A(VOL)\n         DC    AL1(3),CL15'3350           '     DEFAULT 3350 DRIVES\n         DC    AL1(3),C'UNIT'\nVOL      DC    A(0)\n         DC    AL1(5),CL15'VVVVVV         '     DEFAULT VOLSER\n         DC    AL1(2),C'VOL'\n         SPACE 2\nENTRY    DSECT\nENTLINK  DS    A                                ADR OF NEXT LINK\nENTLEN   DS    X                                LEN OF DEFAULT ENTRY\nENTVAL   DS    15X                              VALUE\nENTEXLEN DS    X                                EXEC LEN OF KEYWORD\nENTKEY   DS    0C                               KEYWORD\n         EJECT\n         TITLE '*** DISK, V01, 01/27/81, H.G. NG ***'\nDISK     CSECT\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         USING DISK,R12,R11,R10\n         LA    R15,SA2\n         ST    R15,8(,R13)              LSA IN HSA+8\n         ST    R13,4(,R15)              HSA IN LSA+4\n         LR    R13,R15                  SET SA FOR CALLS\n         SPACE 2\n         LA    R11,4095(R12)            * INCREASE ADDRESSABILITY *\n         LA    R11,1(R11)               C(R11)= 4096+C(R12)\n         LA    R10,4095(R11)\n         LA    R10,1(R10)               C(R10)= 4096+C(R11)\n         SPACE 2\n         ST    R01,HEADAD               KEEP HEADADDR FROM PARSING\n         SPACE 2\n         OPEN  (SYSPRNT2,OUTPUT)\n         EJECT\n*    1.  GET JFCB INFO --> CYL/TRK, IF CYL CONVERT TO TRK\n*    2.  BYTES      1 RECORD                    RECORDS\n*        -----  *   --------       ======>>>    -------\n*         TRK       2600 BYTES                    TRK\n*\n*    3.  TRK    *   RECORDS\n*                   -------  ======>>>    RECORDS (NO. TO WRITE)\n*                     TRK\n         SPACE 2\n         LA    R08,JFCBAREA             SET DSECT MAPPING OF\n         USING JFCBFLDS,R08             RDJFCB AREA\n         SPACE 2\n         OPEN  (OUT,OUTPUT)             OPEN GETS JFCB\n         SPACE 1\n         RDJFCB OUT                     GET PQTY OR CYL/TRK\n         SPACE 1\n         CLOSE (OUT)\n         SPACE 1\n         MVI   EXLSTAD,X'80'            CANCEL RDJFCB FOR NEXT OPEN\n         EJECT\n*        DETERMINE CYL OR TRK\n         SPACE 2\n         TM    JFCBCTRI,X'C0'           CYL ALLOCATION ?\n         BNO   TRKCALC\nCYLCALC  DS    0H                       ITS IN CYLINDER ALLOC\n         SPACE 2\n*        GET UNIT FROM PARM PARSED IN\n         L     R01,HEADAD               RESTORE LINKLIST ADR\nGETLINK  DS    0H\n         L     R01,0(,R01)              GET LINK ADR\n         LTR   R01,R01                  IS IT 0 ?\n         BZ    FIXUNIT                  DIDN'T FIND IT, USE DEFAULT\n         CLC   21(4,R01),=C'UNIT'\n         BE    GETUNIT\n         B     GETLINK\n         SPACE 1\nFIXUNIT  DS    0H\n         MVC   UNITX(4),=C'3350'\n         B     CAL3350C\n         SPACE 1\nGETUNIT  DS    0H\n         MVC   UNITX(6),5(R01)\n         SPACE 2\n         CLC   UNITX(6),=C'2305-2'\n         BE    CAL2305C\n         CLC   UNITX(6),=C'3330  '\n         BE    CAL3330C\n         CLC   UNITX(6),=C'3330-1'      MOD 11 DISK?        *HMD 02/81*\n         BE    CAL3331C                 YES, CALCULATE      *HMD 02/81*\n         CLC   UNITX(6),=C'3350  '\n         BE    CAL3350C\n         CLC   UNITX(6),=C'3380  '\n         BE    CAL3380C\n         B     FIXUNIT                  ELSE, FIX WITH 3350 DEFAULT\n         EJECT\n*        PRIMARY CYLINDER ALLOCATION, CONVERT TO TRKS\n         SPACE 2\nCAL2305C DS    0H\n         L     R07,D2305+4              TRKS/CYL\n         L     R05,D2305                BYTES/TRK\n         BAL   R06,CALCTRKS\n         B     CALREC\nCAL3330C DS    0H\n         L     R07,D3330+4              TRKS/CYL\n         L     R05,D3330                BYTES/TRK\n         BAL   R06,CALCTRKS\n         B     CALREC\nCAL3331C DS    0H                       3330-11 SUPPORT     *HMD 02/81*\n         L     R07,D3331+4              TRKS/CYL            *HMD 02/81*\n         L     R05,D3331                BYTES/TRK           *HMD 02/81*\n         BAL   R06,CALCTRKS                                 *HMD 02/81*\n         B     CALREC                                       *HMD 02/81*\nCAL3350C DS    0H\n         L     R07,D3350+4              TRKS/CYL\n         L     R05,D3350                BYTES/TRK\n         BAL   R06,CALCTRKS\n         B     CALREC\nCAL3380C DS    0H\n         L     R07,D3380+4              TRKS/CYL\n         L     R05,D3380                BYTES/TRK\n         BAL   R06,CALCTRKS\n         B     CALREC\n         SPACE 2\nTRKCALC  DS    0H                       ITS IN CYLINDER ALLOC\n         SPACE 1\n*        GET UNIT FROM PARM PARSED IN\n         L     R01,HEADAD               RESTORE LINKLIST ADR\nTETLINK  DS    0H\n         L     R01,0(,R01)              GET LINK ADR\n         LTR   R01,R01                  IS IT 0 ?\n         BZ    TIXUNIT                  DIDN'T FIND IT, USE DEFAULT\n         CLC   21(4,R01),=C'UNIT'\n         BE    TETUNIT\n         B     TETLINK\nTIXUNIT  DS    0H\n         MVC   UNITX(4),=C'3350'\n         B     CAL3350T\nTETUNIT  DS    0H\n         MVC   UNITX(6),5(R01)\n         SPACE 2\n         CLC   UNITX(6),=C'2305-2'\n         BE    CAL2305T\n         CLC   UNITX(6),=C'3330  '\n         BE    CAL3330T\n         CLC   UNITX(6),=C'3330-1'                          *HMD 02/81*\n         BE    CAL3331T                                     *HMD 02/81*\n         CLC   UNITX(6),=C'3350  '\n         BE    CAL3350T\n         CLC   UNITX(6),=C'3380  '\n         BE    CAL3380T\n         B     TIXUNIT                  ELSE, FIX WITH 3350 DEFAULT\n         EJECT\nCAL2305T DS    0H\n         MVC   TRKS+1(3),JFCBPQTY\n         L     R05,D2305                BYTES/TRK\n         BAL   R06,CALCRECS\n         B     CALREC\nCAL3330T DS    0H\n         MVC   TRKS+1(3),JFCBPQTY\n         L     R05,D3330                BYTES/TRK\n         BAL   R06,CALCRECS\n         B     CALREC\nCAL3331T DS    0H                                           *HMD 02/81*\n         MVC   TRKS+1(3),JFCBPQTY                           *HMD 02/81*\n         L     R05,D3331                BYTES/TRK           *HMD 02/81*\n         BAL   R06,CALCRECS                                 *HMD 02/81*\n         B     CALREC                                       *HMD 02/81*\nCAL3350T DS    0H\n         MVC   TRKS+1(3),JFCBPQTY\n         L     R05,D3350                BYTES/TRK\n         BAL   R06,CALCRECS\n         B     CALREC\nCAL3380T DS    0H\n         MVC   TRKS+1(3),JFCBPQTY\n         L     R05,D3380                BYTES/TRK\n         BAL   R06,CALCRECS\n         EJECT\nCALREC   DS    0H                       RECS=RECS/TRK * TRK\n         XR    R02,R02\n         L     R03,RECTRK\n         M     R02,TRKS\n         ST    R03,RECORDS\n         B     GETMSG\n         EJECT\nCALCTRKS DS    0H\n         MVC   PQTY+1(3),JFCBPQTY       PRIMARY CYL ALLOC\n         XR    R02,R02\n         XR    R03,R03\n         L     R03,PQTY                 CYL\n         MR    R02,R07                  TRKS=CYL*TRKS/CYL\n         ST    R03,TRKS                 TRKS\nCALCRECS DS    0H                       NO. OF RECORDS/TRK\n         XR    R04,R04                  R05= BYTES/TRK\n         D     R04,=F'2600'             REC/TRK= (BYTES/TRK) *\n*                                                (1 RECORD/2600 BYTES)\n         ST    R05,RECTRK               COUNTER FOR NO. OF WRITES\n         BR    R06                      RETURN\n         EJECT\n*        GET MSG FLG, DETERMINE IF MSGS='YES'\n         SPACE 1\nGETMSG   DS    0H\n         SPACE 1\n         L     R01,HEADAD\nGETMSGX  DS    0H\n         L     R01,0(,R01)              GET LINK ADR\n         LTR   R01,R01\n         BZ    FIXMSG\n         CLC   21(4,R01),=C'MSGS'\n         BE    MVEMSG\n         B     GETMSGX\nFIXMSG   DS    0H\n         MVI   MSGFLG+3,X'01'           SET TO PRINT MESSAGES\n         B     LOADBLKO\nMVEMSG   DS    0H\n         CLC   5(3,R01),=C'YES'\n         BE    FIXMSG\n         MVI   MSGFLG+3,X'00'           DO NOT PRINT MESSAGES\n         SPACE 2\nLOADBLKO DS    0H\n*        LOAD BLKO WITH CHARS BEFORE WRITE, ONE TIME ONLY\n         LA    R02,BLKO\n         LA    R03,100\nMOVE     DS    0H                       LOAD BLK TO WRITE CHARS\n         MVC   0(26,R02),ALPHA          100 * 26 --> 2600 BYTES\n         LA    R02,26(R02)\n         BCT   R03,MOVE\n         SPACE 2\n*        CONVERT VALUE OF RECORDS TO MESSAGES\n         L     R02,RECORDS\n         CVD   R02,WORK\n         MVC   MSGWRT3+22(20),RECMASK\n         MVC   MSGRD3+22(20),RECMASK\n         ED    MSGWRT3+22(20),WORK\n         ED    MSGRD3+22(20),WORK\n         SPACE 2\n*        MOVE  UNIT TO MESSAGES\n         MVC   MSGWRT1+22(6),UNITX\n         MVC   MSGWRT2+22(6),UNITX\n         MVC   MSGRD1+22(6),UNITX\n         MVC   MSGRD2+22(6),UNITX\n         EJECT\n*        MOVE VOLSER TO MESSAGES FROM JFCB\n         SPACE 1\n         MVC   MSGWRT1+15(6),JFCBVOLS\n         MVC   MSGWRT2+15(6),JFCBVOLS\n         MVC   MSGRD1+15(6),JFCBVOLS\n         MVC   MSGRD2+15(6),JFCBVOLS\n         SPACE 2\n         DROP  R08                     FORGET ABOUT JFCB NOW\n         EJECT\n*        MAIN I/O PROCESSING LOOP OF PROGRAM\n         SPACE 2\nDOWRITE  DS    0H\n         SPACE 2\n         BAL   R14,OPENOUT\n         SPACE 2\n         BAL   R14,OPENIN\n         SPACE 2\n         B     DOWRITE                 GO DO IT AGAIN, UNTIL\n*                                      STIMER TASK INTERRUPTS\n*        SHOULD NEVER RETURN, BUT HERE IT IS ANYWAY\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         BR    R14\n         EJECT\nOPENOUT  DS    0H\n         SPACE 1\n         STM   R14,R12,12(R13)\n         LA    R15,SAOUT\n         ST    R15,8(,R13)            LSA IN HSA+8\n         ST    R13,4(,R15)            HSA IN LSA+4\n         LR    R13,R15                SET SAOUT FOR CALLS\n         SPACE 1\n         OPEN  (OUT,OUTPUT)\n         SPACE 2\n         TM    OUT+48,X'10'\n         BNO   ABEND01                  BAD OPEN\n         EJECT\nLOADR02  DS    0H\n         L     R05,RECORDS              NO. OF RECORDS TO WRITE\n         SPACE 2\n*        DETERMINE IF PRINT MESSAGES\n         SPACE 1\n         L     R03,MSGFLG\n         LTR   R03,R03\n         BZ    WRITE\n         SPACE 2\n         LA    R02,1                    ONE MESSAGE ONLY\n         LA    R04,MSGWRT1              PRINT THIS GUY\n         BAL   R14,LASTLINE\n         EJECT\nWRITE    DS    0H\n*\n         WRITE DECBO,SF,OUT,BLKO,'S'\n         SPACE 1\n         CHECK DECBO\n         SPACE 1\n         STIMER WAIT,BINTVL=TIME10\n         BCT   R05,WRITE\n         SPACE 2\n         EJECT\nCLOSEOUT DS    0H\n         CLOSE (OUT)\n         SPACE 2\n*        DETERMINE IF PRINT MESSAGES\n         SPACE 1\n         L     R03,MSGFLG\n         LTR   R03,R03\n         BZ    OUTRET\n         SPACE 1\n         LA    R02,2                    2 MESSAGES\n         LA    R04,MSGWRT2              BEGINNING MESSAGE\n         BAL   R14,LASTLINE\n         SPACE 1\n         BAL   R14,SPACE2\n         SPACE 2\nOUTRET   DS    0H\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         BR    R14\n         EJECT\nOPENIN   DS    0H\n         SPACE 1\n         STM   R14,R12,12(R13)\n         LA    R15,SAIN\n         ST    R15,8(,R13)            LSA IN HSA+8\n         ST    R13,4(,R15)            HSA IN LSA+4\n         LR    R13,R15\n         SPACE 1\n         OPEN  (OUT,INPUT)\n         SPACE 2\n         TM    OUT+48,X'10'\n         BNO   ABEND02                  BAD OPEN\n         SPACE 2\n         EJECT\n*        DETERMINE IF PRINT MESSAGES\n         SPACE 1\n         L     R03,MSGFLG\n         LTR   R03,R03\n         BZ    LOADR02X\n         SPACE 1\n         LA    R02,1                    PRINT 1 MESSAGE\n         LA    R04,MSGRD1               LOCATION OF MESSAGE\n         BAL   R14,LASTLINE\n         EJECT\nLOADR02X DS    0H\n         LA    R02,10\nREAD     DS    0H\n*\n*        LOAD BLKI WITH 'Z'\n         LA    R03,100\n         LA    R05,BLKI\nZBLKI    DS    0H\n         MVC   0(26,R05),=26C'Z'\n         LA    R05,26(R05)\n         BCT   R03,ZBLKI\n         SPACE 2\n         READ  DECBI,SF,OUT,BLKI,'S'\n         SPACE 2\n         CHECK DECBI\n         SPACE 1\n*        CHECK IF GOOD READS\n         LA    R03,100\n         LA    R05,BLKI\nCLCBLKI  DS    0H\n         CLC   0(26,R05),ALPHA\n         BNE   MSGNE                 READS NOT =, PUT OUT MSG\n         LA    R05,26(R05)\n         BCT   R03,CLCBLKI\n         B     STIMEIT\nMSGNE    DS    0H\n         LA    R04,MSGRDNE\n         BAL   R14,LASTLINE\n         SPACE 2\nSTIMEIT  DS    0H\n         STIMER WAIT,BINTVL=TIME10\n         BCT   R02,READ\n         B     LOADR02X\n         EJECT\nCLOSEIN  DS    0H\n         CLOSE (OUT)\n*        DETERMINE IF PRINT MESSAGES\n         SPACE 1\n         L     R03,MSGFLG\n         LTR   R03,R03\n         BZ    INRET\n         SPACE 1\n         LA    R02,2\n         LA    R04,MSGRD2\n         BAL   R14,LASTLINE\n         SPACE 1\n         BAL   R14,SPACE2\n         SPACE 2\nINRET    DS    0H\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         BR    R14\n         EJECT\nWTO      DS    0H\n         STM   R14,R12,12(R13)\n         LA    R15,SAWTO\n         ST    R15,8(,R13)\n         ST    R13,4(,R15)\n         LR    R13,R15\n         SPACE 1\n******************************************************************\n         MVC   *+16(45),0(R04)\n         WTO   '012345678901234567890123456789012345678901234',        C\n               ROUTCDE=(2),DESC=(6)\n******************************************************************\n         SPACE 1\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         BR    R14\n         EJECT\nLASTLINE DS    0H\n         STM   R14,R12,12(R13)\n         LA    R15,SALASTP\n         ST    R15,8(,R13)\n         ST    R13,4(,R15)\n         LR    R13,R15\n         SPACE 1\n         TIME  DEC,ZONE=LT\n         SPACE 1\n         ST    R01,DATEEBC\n         ST    R00,TIMEEBC\n         UNPK  0(5,R04),DATEEBC\n         UNPK  6(7,R04),TIMEEBC\n         OI    4(R04),X'F0'\n         OI    12(R04),X'F0'\n         SPACE 2\nOUTP     DS    0H\n         MVC   LINE2+1(45),0(R04)\n         PUT   SYSPRNT2,LINE2\n         SPACE 1\n         BAL   R14,WTO\n         SPACE 1\n         LA    R04,45(R04)\n         BCT   R02,OUTP\n         SPACE 1\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         BR    R14\n         EJECT\nSPACE2   DS    0H\n         STM   R14,R12,12(R13)\n         LA    R15,SASPACE2\n         ST    R15,8(,R13)\n         ST    R13,4(,R15)\n         LR    R13,R15\n         SPACE 1\n         MVI   LINE2,C'0'\n         MVI   LINE2+1,X'40'\n         MVC   LINE2+2(130),LINE2+1\n         PUT   SYSPRNT2,LINE2\n         SPACE 1\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         BR    R14\n         EJECT\nABEND01  ABEND 01,DUMP                  FILE OUT- BAD OPEN FOR OUTPUT\n         SPACE 2\nABEND02  ABEND 02,DUMP                  FILE OUT- BAD OPEN FOR INPUT\n         SPACE 2\nABEND98  ABEND 98,DUMP                  SYNAD - I/O ERROR - OUT\n         EJECT\nSA2      DC    18F'0'\nSAOUT    DC    18F'0'\nSAIN     DC    18F'0'\nSAWTO    DC    18F'0'\nSALASTP  DC    18F'0'\nSASPACE2 DC    18F'0'\nRECMASK  DC    XL20'402020206B2020206B2020206B2020206B212020'\nBLKO     DC    100XL26'E9'              100 * 26 = 2600 BYTES\nBLKI     DC    100XL26'E9'              100 * 26 = 2600 BYTES\nALPHA    DC    C'ABCDEFGHIJKLM'\n         DC    C'NOPQRSTUVWXYZ'\nLINE2    DC    132X'40'\nTIME10   DC    F'1'                     1 MS\n         SPACE 2\n*        EXLST\nEXLSTAD  DS    0F\n         DC    X'87',AL3(JFCBAREA)      EXLST FOR JFCB\n         SPACE 2\nHEADAD   DC    A(0)\nUNITX    DC    6CL1' '\nPQTY     DC    F'0'\nTRKS     DC    F'0'\nRECTRK   DC    F'0'                    RECS/TRK\nRECORDS  DC    F'0'\nMSGFLG   DC    F'0'\nWORK     DC    D'0'\nTIMEEBC  DC    F'0'\nDATEEBC  DC    F'0'\n         EJECT\n*        DISK  CHARACTERISTICS\n*        (BYTES/TRK),(TRKS/CYL),TRKS,CYL\nD2305    DC    F'14660',F'8',F'768',F'96'\n         SPACE 1\nD3330    DC    F'13030',F'19',F'7676',F'404'\n         SPACE 1\nD3331    DC    F'13030',F'19',F'15352',F'808'               *HMD 02/81*\n         SPACE 1\nD3350    DC    F'19069',F'30',F'16650',F'555'\n         SPACE 1\nD3380    DC    F'32768',F'15',F'13275',F'885'\n         EJECT\n*        MESSAGES\n         SPACE 1\nMSGWRT1  DC    CL45'YYDDD HHMMSST  VVVVVV UUUU   START WRITE I/O '\nMSGWRT2  DC    CL45'YYDDD HHMMSST  VVVVVV UUUU   END   WRITE I/O '\nMSGWRT3  DC    CL45'NO. OF RECORDS WRITTEN                       '\n         SPACE 2\nMSGRD1   DC    CL45'YYDDD HHMMSST  VVVVVV UUUU   START READ  I/O '\nMSGRD2   DC    CL45'YYDDD HHMMSST  VVVVVV UUUU   END   READ  I/O '\nMSGRD3   DC    CL45'NO. OF RECORDS READ                          '\n         SPACE 2\nMSGRDNE  DC    CL45'YYDDD HHMMSST  VVVVVV UUUU   ** BAD READS ** '\n         EJECT\n         LTORG\n         EJECT\n*        BSAM  OUT AND IN DCB'S\n         SPACE 2\nOUT      DCB   DSORG=PS,MACRF=(R,W),DDNAME=OUT,                        C\n               RECFM=F,LRECL=2600,EODAD=CLOSEIN,                       C\n               SYNAD=ABEND98,EXLST=EXLSTAD\n         EJECT\n*IN      DCB   DSORG=PS,MACRF=(R),DDNAME=IN,                         C\n*              RECFM=F,LRECL=2600,                                   C\n*              SYNAD=ABEND99,EODAD=CLOSEIN\n         SPACE 2\nSYSPRNT2 DCB   DDNAME=SYSPRNT2,DSORG=PS,RECFM=FBA,                     C\n               MACRF=PM,BLKSIZE=132,LRECL=132\n         EJECT\nJFCBAREA DS    0D,176X\n         EJECT\nJFCBFLDS DSECT\n         IEFJFCBN LIST=YES\n         EJECT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DISKTST$": {"ttr": 5382, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06O\\x01\\x02\\x06O H\\x00%\\x00%\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-05T00:00:00", "modifydate": "2002-03-05T20:48:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "SYZYGY1"}, "text": "//ZDISKTST JOB (IS,OTS,M00,000,64),'SYSTEMS***BRIAN',\n//      CLASS=A,MSGCLASS=A,NOTIFY=SYZYGY1 TYPRUN=SCAN\n//ASMFCL PROC  CLASS=A,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='SYZYGY.TESTED.MODS',\n//             LOAD='SYZYGY.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             DIR=1,              NUMBER OF DIRECTORY BLOCKS\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='OBJECT,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD,DISP=SHR,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.,&DIR.))\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=DISKTEST\n//LKED.SYSIN   DD   *\n   NAME DISKTEST(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DISKTST#": {"ttr": 5384, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x05\\x00\\x00\\x01\\x02\\x06O\\x01\\x02\\x06O!A\\x00\\x1a\\x00\\x15\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.05", "flags": 0, "createdate": "2002-03-05T00:00:00", "modifydate": "2002-03-05T21:41:00", "lines": 26, "newlines": 21, "modlines": 0, "user": "SYZYGY1"}, "text": "//DISKTEST JOB (BRIAN),WESTERMAN,CLASS=A,MSGCLASS=A,NOTIFY=SYZYGY1\n//SSS EXEC PGM=DISKTEST,\n//    PARM='TIME=00003000,MSGS=YES,UNIT=3350,VOL=SYZ001'\n//OUT DD UNIT=3350,VOL=SER=SYZ001,DISP=SHR,DSN=\n//SYSPRNT1  DD SYSOUT=*\n//SYSPRNT2  DD SYSOUT=*\n//SYSPRINT  DD SYSOUT=*\n//SYSABEND  DD SYSOUT=*\n//SYSUDUMP  DD SYSOUT=*\n//*A.  TIME=HHMMSSTH, TIME-LIMIT OF BSAM I/O TASK.  THE TASK\n//*    WILL AUTOMATICALLY CANCEL ITSELF AT THIS TIME LIMIT.\n//*    THE DEFAULT IS 4 HOURS.\n//*\n//*B.  MSGS=YES/NO, THERE ARE WTO AND SYSPRINT MESSAGES\n//*    INDICATING THE START, END, AND THE NUMBER OF RECORDS\n//*    WRITTEN OR READ.  IF YOU WISH TO SUPPRESS THESE\n//*    MESSAGES, THEN 'MSGS=NO'. THE DEFAULT IS YES.\n//*\n//*C.  UNIT=2305-2/3330/3330-1/3350/3380.  THIS IS THE UNIT\n//*    PARAMETER FOR THE MESSAGES.  THE DEFAULT IS 3350.\n//*\n//*D.  VOL=VVVVVV.  THIS IS THE VOLSER REFERENCE FOR THE\n//*    MESSAGES.  THE DEFAULT IS VVVVVV.\n//*\n//*\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DISPLA$": {"ttr": 5386, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/\"\\x03\\x00&\\x00&\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T22:03:00", "lines": 38, "newlines": 38, "modlines": 0, "user": "SYZYGY"}, "text": "//ZDISPLAY JOB (IS,OTS,M00,000,64),'SYSTEMS***BRIAN',\n//      CLASS=A,MSGCLASS=A,NOTIFY=SYZYGY  TYPRUN=SCAN\n//ASMFCL PROC  CLASS=A,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='SYZYGY.PDS.DATA',\n//             LOAD='SYZYGY.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             DIR=1,              NUMBER OF DIRECTORY BLOCKS\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='OBJECT,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD,DISP=SHR,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.,&DIR.))\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=DISPLAY\n//LKED.SYSIN   DD   *\n   ALIAS DS\n   NAME DISPLAY(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DISPLAY": {"ttr": 5388, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/\"\\x03\\x05\\xe2\\x05\\xe2\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T22:03:00", "lines": 1506, "newlines": 1506, "modlines": 0, "user": "SYZYGY"}, "text": "         TITLE ' D I S P L A Y   ( M V S )  '\n************************************************************\n*                                                          *\n*        'DISPLAY' TSO COMMAND                             *\n*                                                          *\n************************************************************\n         SPACE\n*        DATE UPDATED. SEPTEMBER 21 1981.\n*        ATTRIBUTES. RE-ENTRANT.\n*        NOTES.\n*            THIS TSO COMMAND DISPLAYS INFORMATION FOR\n*            SYSTEMS SUPPORT SUCH AS UCB'S, VIRTUAL\n*            ADDRESSES, LPA DIRECTORY ENTRIES, SVC'S,\n*            AND ENTRIES IN THE BLDL LIST.\n*            (THE BLDL ROUTINE DEPENDS ON A CODED OFFSET).\n*            UPDATES...\n*            28AUG80 - ADDED DEVICE TYPE IN DASD VOLUME DISPLAY.\n*                      ADDED FIELD W5STYPE.\n*            29OCT80 - CHANGED BLDL OFFSET TO '58' (WAS 4C).\n*                      ADDED SVCTABLE LOCATION TO SVC DISPLAY.\n*            21SEP81 - ADDED 'SHARED' TO DASD DISPLAY.\n         SPACE\n         MACRO\n&NAME    CONV  &IN,&OUT,&LEN\n         LCLC  &L\n&L       SETC  'L'''\n&NAME    LA    R1,&IN\n         AIF   (T'&LEN EQ 'O').DEFLEN\n         LA    R14,&LEN\n         AGO   .OUTLOC\n.DEFLEN  LA    R14,&L&OUT\n.OUTLOC  LA    R15,&OUT\n         BAL   R2,CONVERTB\n         MEND\n         SPACE 2\n         MACRO\n&NAME    ACON  &IN,&OUT,&OFFSET=2\n         AIF   ('&IN'(1,1) EQ '(').XREG\n&NAME    UNPK  WCONDATA,&IN\n         AGO   .XGEN\n.XREG    ANOP\n&NAME    ST    &IN(1),WDOUBLE\n         UNPK  WCONDATA,WDOUBLE(5)\n.XGEN    TR    WCONDATA(8),TRANS1\n         AIF   (T'&OFFSET EQ 'O').XMOVE\n         MVC   &OUT,WCONDATA+&OFFSET\n         MEXIT\n.XMOVE   MVC   &OUT,WCONDATA\n         MEND\n         SPACE 2\n         MACRO\n&NAME    FCON  &IN,&OUT\n&NAME    ACON  &IN,&OUT,OFFSET=\n         MEND\n         SPACE 2\n         MACRO\n&NAME    LINE2\n&NAME    MVC   WLINE2,XBLANKS           BLANK HEADER LINE #2\n         MVC   WLINE2(4),=Y(L'WLINE2,0) MSG HEADER\n         MVI   WLINE2+5,C'*'            SET-UP HEADER LINE\n         MVI   WLINE2+14,C'*'\n         MEND\n         SPACE 2\n         MACRO\n         TRANS &O,&M\n         ORG   TRANS3+&O\n         DC    &M.AL1(*-TRANS3)\n         MEND\n         EJECT\n         MACRO\n&NAME    ZCHK  &R,&L,&B,&BC=Z\n&NAME    L     &R,&L\n         LA    &R,0(&R)\n         LTR   &R,&R\n         B&BC  &B\n         MEND\n         SPACE 2\n         MACRO\n&NAME    PCHK  &R,&L,&B\n&NAME    ZCHK  &R,&L,&B,BC=P\n         MEND\n         SPACE 2\n         MACRO\n&NAME    EDST  &V,&F\n&NAME    L     R0,&V\n         CVD   R0,WDOUBLE\n         MVC   &F,XPAT1\n         ED    &F,WDOUBLE+5\n         MEND\n         SPACE 2\n         MACRO\n&NAME    EDR   &R,&F\n&NAME    CVD   &R,WDOUBLE\n         MVC   &F,XPAT1\n         ED    &F,WDOUBLE+5\n         MEND\n         EJECT\nDISPLAY  CSECT\n         USING *,R11,R12\n         B     32(,R15)\n         DC    AL1(7),CL7'DISPLAY'\n         DC    CL4' 3.0'\n         DC    CL16' &SYSDATE &SYSTIME '\n         STM   14,12,12(R13)\n         LR    R11,R15\n         LA    R14,1\n         LA    R12,4095(R14,R11)\n         LR    R10,R1\n         USING CPPL,R10\n         GETMAIN R,LV=WORKLEN\n         XC    0(256,R1),0(R1)\n         MVC   256(WORKLEN-256,R1),0(R1)\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING WORKAREA,R13\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP IOPL FOR PUTLINE                           *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,WIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,WECB\n         ST    R0,IOPLECB\n         XC    WECB,WECB\n         LA    R0,WPTPB\n         ST    R0,IOPLIOPB\n         XC    WPTPB(12),WPTPB\n         DROP  R15                 IOPL\n         EJECT\n************************************************************\n*                                                          *\n*        SET UP PPL FOR PARSE                              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,WPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,WECB\n         ST    R0,PPLECB\n         XC    WECB,WECB\n         L     R0,=A(DISPPCL)\n         ST    R0,PPLPCL\n         LA    R0,WANS\n         ST    R0,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         XC    PPLUWA(4),PPLUWA\n         DROP  R15                 PPL\n         SPACE 1\n         DROP  R10                 CPPL\n         SPACE\n         MVI   WSW,0                    CLEAR SWITCH\n         MVI   WLINEB,C' '              CLEAR PRINT LINE\n         MVC   WLINED,WLINEB\n         MVC   WFILLER,XBLANKS          SET DEFAULT FILLER\n*\n         LA    R0,WDBLKLEN              PUTLINE DATA BLOCK LENGTH\n         GETMAIN R,LV=(0)               GET THE BLOCK\n         ST    R1,WDBLK                 SAVE START\n         LR    R3,R1                    ALSO PLACE IN WORK REGISTER\n         LA    R4,WDBLKENT              LINE LENGTH\n         LR    R5,R3                    DATA START\n         AL    R5,=A(WDBLKLEN-1)        + LENGTH - 1 = END\n         STM   R3,R5,WDBLKA             SAVE CONTROL REGISTERS\n         LR    R2,R3                    DATA START\n         LA    R3,0(R3,R4)              LINE # 2\nINDBLK   ST    R3,0(R2)                 CONNECT DATA LINES\n         LR    R2,R3                    CURRENT LINE\n         BXLE  R3,R4,INDBLK             GET NEXT LINE\n         XC    0(4,R2),0(R2)            LAST LINE\n*\n*        GET ADDRESS OF PUTLINE INTO WPUTL\n*\n         L     R15,CVTPTR               CVTPTR\n         TM    444(R15),X'80'           IS PUTLINE LOADED?\n         BNO   LOADPUTL                 NO - BRANCH\n         L     R0,444(,R15)             YES - GET CVTPUTL\n         B     SAVEPUTL                 BRANCH AROUND LOAD\nLOADPUTL EQU   *\n         LOAD  EPLOC=LPUTL              LOAD PUTLINE\nSAVEPUTL ST    R0,WPUTL                 SAVE ENTRY POINT\n         SPACE 1\n************************************************************\n*                                                          *\n*        CALL THE PARSE SERVICE ROUTINE                    *\n*                                                          *\n************************************************************\n         SPACE 1\n         XC    WECB,WECB                CLEAR ECB\n         LA    R1,WPPL             POINT TO PPL\n         L     R15,CVTPTR          CVTPTR\n         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,524(,R15)       CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK EQU   *\n         LINK  SF=(E,LPARSE),MF=(E,(1))\nPARSEEXT EQU   *\n         SPACE 1\n         LTR   R15,R15                  SUCCESS?\n         BNZ   ERRPARSE                 NO, ERROR\n         L     R10,WANS                 YES, GET RESULT\n         USING IKJPARMD,R10\n         EJECT\n************************************************************\n*                                                          *\n*        'TCBADDR(TASKNAME)' SPECIFIED                     *\n*                                                          *\n************************************************************\n         SPACE\nTCBCHK   CLI   PTYPE+1,1                TCB ADDRESS?\n         BNE   QCBCHK                   NO, CHECK FOR QCB REQUEST\n         B     RETURN\n*          LA    R9,PDTCBA                YES, SET FOR FIRST PDE\n*          MVC   WLINEH,=Y(W1LEN+4,0)     SET MSG HEADER\n* TCBPDE   BAL   R2,PDESCAN               GET NEXT PDE\n*          B     RETURN                   THAT'S ALL\n*          MVC   W1NAME,WNAME             SAVE TASK NAME\n*          BAL   R2,TCBSCAN               GET TCB ADDRESS\n*          B     TCBMISS                  INVALID NAME\n*          LR    R8,R15                   SAVE TCB ADDRESS\n*          B     TCBAFND                  PROCESS IT\n* TCBMISS  MVC   W1ADDR,XBLANKS           BLANK OUT ADDRESS\n*          MVI   W1ADDR+2,C'?'\n*          B     TCBALIST                 GO LIST IT\n*          USING TCB,R8\n* TCBAFND  ZCHK  R15,TCBLTC,TCBAFNDA      GET SUBTASK\n*          LR    R8,R15                   RESET TCB ADDRESS\n*          B     TCBAFND                  CONTINUE\n* TCBAFNDA L     R8,TCBJSTCB              NO, GET JOB STEP TCB\n*          ACON  (R8),W1ADDR              CONVERT TCB ADDRESS\n* TCBALIST BAL   R2,MSGSTD                WRITE IT OUT\n* TCBANEXT B     TCBPDE                   GET NEXT TASK\n*          SPACE 2\n*          DROP  R8\n         EJECT\n************************************************************\n*                                                          *\n*        'QCBS(TASKNAME)' SPECIFIED                        *\n*                                                          *\n************************************************************\n         SPACE\nQCBCHK   CLI   PTYPE+1,2                QCB REQUEST?\n         BNE   LPACHECK                 NO, TRY LINKPACK SEARCH\n         MVC   WLINEH,=Y(W2LEN+4,0)     YES, SET MSG HEADER\n         MVC   WLINED,WLINEB            CLEAR PRINT LINE\n         LINE2\n         L     R15,CVTPTR               CVT\n         USING CVT,R15\n         L     R0,CVTFQCB               GET QCB ORIGIN\n         ST    R0,WQCBORG               SAVE IT\n         DROP  R15\n         LA    R9,PDTCBA                SET FIRST PDE\nQCBNMCHK BAL   R2,PDESCAN               GET NEXT PDE\n         B     RETURN                   THAT'S ALL\n         MVC   WLINE2+6(8),WNAME        SET NAME IN HEADER\n         LA    R0,WLINE2\n         BAL   R2,MSGDATA               WRITE OUT HEADER\n         L     R8,WQCBORG               FIRST QCB\nQCBMAJOR LTR   R8,R8                    ANYMORE MAJORS?\n         BNP   QCBNEXT                  NO, GET NEXT SEARCH NAME\n         MVC   W2QNAME,16(R8)  (MVS)    YES, SET MAJOR NAME\n         CLC   16(8,R8),=CL8'SYSDSN'    IS IT DSNAME QUEUE?\n         BE    QCBMAJOK                 YES - BRANCH\n         CLC   16(8,R8),=CL8'SYSZOPEN'  IS IT OPEN QUEUE?\n         BE    QCBMAJOK                 YES - BRANCH\n         CLC   16(8,R8),=CL8'SYSIKJUA'  IS IT TSO USERID QUEUE?\n         BE    QCBMAJOK                 YES - BRANCH\n         B     QCBMAJLP                 NO - GET NEXT MAJOR\nQCBMAJOK EQU   *\n         L     R7,8(R8)                 FIRST MINOR QCB\nQCBMINOR LTR   R7,R7                    ANYTHING?\n         BNP   QCBMAJLP                 NO, GET ANOTHER MAJOR QCB\n         L     R6,8(R7)        (MVS)    YES, GET FIRST QEL\nQCBQEL   LTR   R6,R6                    ANYMORE QEL'S?\n         BNP   QCBMINLP                 NO, GET NEXT MINOR QCB\n         TM    12(R6),X'80'    (MVS)    YES, SHR?\n         BO    QCBTJCHK                 YES, ....\n         OI    WSW,WSWAIT               NO, INDICATE ALL OTHERS WAITING\nQCBTJCHK EQU   *\n*\n*        POINT R5 TO JOBNAME, USING ASID AT 14(R6)\n*\n         L     R1,CVTPTR\n         L     R1,X'22C'(,R1)           ASVT\n         LA    R1,X'210'(,R1)           FIRST ASVTENTY\n         LH    R15,14(,R6)              QELASID\n         BCTR  R15,0\n         SLL   R15,2                    TIMES FOUR\n         L     R1,0(R15,R1)             R1 POINTS TO ASCB\n         L     R5,176(,R1)              ASCBJBNS\n         LTR   R5,R5\n         BNZ   *+8\n         LA    R5,=CL8'STARTING'\n         CLC   0(5,R5),=C'INIT '        INITIATED JOB?\n         BNE   *+8                      NO - BRANCH\n         L     R5,172(,R1)              ASCBJBNI\n         LTR   R5,R5\n         BNZ   *+8\n         LA    R5,=CL8'STARTING'\n         SPACE\nQCBQELCK CLC   WNAME,0(R5)              DESIRED QEL?\n         BE    QCBQELFD                 YES, LIST IT\n         L     R6,0(R6)                 NO, GET NEXT QEL\n         LA    R6,0(R6)                 CLEAR HI-ORDER BYTE\n         B     QCBQEL                   KEEP LOOKING\nQCBQELFD MVC   W2TYPE,=CL4'SHR'         ASSUME SHR\n         TM    12(R6),X'80'    (MVS)    SHR?\n         BO    QCBQELST                 YES, ...\n         MVC   W2TYPE,=CL4'EXCL'        NO, SET EXCLUSIVE\n         CL    R6,0(R7)                 IS THIS THE 1ST QEL?\n         BE    QCBQELMC                 YES, CONTINUE\n         B     QCBQELWT                 NO, ....\nQCBQELST MVC   W2STAT,XBLANKS           BLANK WAITING FIELD\n         TM    WSW,WSWAIT               WAITING?\n         BZ    QCBQELMC                 NO, ....\nQCBQELWT MVC   W2STAT,=C'WAIT'          INDICATE WAITING\n         MVC   W2STAT,XBLANKS           NEGATE PREVIOUS INSTR\nQCBQELMC MVC   W2SMC,XBLANKS            CLEAR STATUS FIELD\n*        TM    0(R6),X'30'              MUST COMPLETE?\n*        BZ    QCBQELRN                 NO, WRITE OUT LINE\n*        MVC   W2SMC,=CL4'STEP'         YES, ASSUME STEP\n*        TM    0(R6),X'10'              STEP?\n*        BO    QCBQELRN                 YES, ...\n*        MVC   W2SMC,=CL4'SYS'          NO, SYSTEM(SHOULD NEVER SEE IT)\nQCBQELRN MVC   W2RNAME,XBLANKS          CLEAR OUT RNAME\n         SLR   R15,R15                  CLEAR WORK REGISTER\n         IC    R15,16(R7)               RNAME LENGTH\n         LA    R0,L'W2RNAME             MAX ALLOWED\n         CR    R15,R0                   ACCEPTABLE?\n         BNH   *+6                      YES,\n         LR    R15,R0                   NO, SET TO MAX\n         BCTR  R15,0                    LENGTH - 1\n         EX    R15,IMRNAME              MOVE RNAME TO PRINT LINE\n         BAL   R2,MSGSTD                WRITE IT ALL OUT\n         MVC   W2QNAME,XBLANKS          CLEAR MAJOR NAME\nQCBMINLP NI    WSW,X'FF'-WSWAIT         TURN OFF WAIT BIT\n         L     R7,0(R7)       (MVS)     NEXT MINOR QCB\n         LA    R7,0(R7)\n         B     QCBMINOR\nQCBMAJLP L     R8,0(R8)                 NEXT MAJOR QCB\n         LA    R8,0(R8)\n         B     QCBMAJOR\nQCBNEXT  B     QCBNMCHK                 GO GET NEXT PDE\n         EJECT\n************************************************************\n*                                                          *\n*        'LPA(MODULE)' SPECIFIED                           *\n*                                                          *\n************************************************************\n         SPACE\nLPACHECK CLI   PTYPE+1,3                LINKPACK SEARCH?\n         BNE   UNITCHK                  NO, ....\n         MVC   WLINEH,=Y(W3LEN+4,0)     YES, SET MSG HEADER\n         MVC   WLINED,WLINEB            CLEAR MESSAGE LINE\n         LA    R9,PDLPA                 FIRST PDE\nLPALOOP  BAL   R2,PDESCAN               GO GET PDE\n         B     RETURN                   THAT'S ALL\n         MVC   W3NAME,WNAME             MOVE NAME TO PRINT LINE\n         USING CDE,R15\n*\n*              CALL IEAVVMSR TO SEARCH LPA DIRECTORY\n*\n*                  REGS 0 AND 1 - CONTAIN NAME\n*                  REG 3        - CVT\n*                  REGS 7 8 9   - WORK REGS\n*                  REG 14       - RETURN - BAD RETURN 4(14)\n*                  REG 0        - POINTS TO LPDE AFTER GOOD RETURN\n*\n         LM    R0,R1,WNAME\n         STM   R7,R9,WLPA\n         L     R3,CVTPTR\n         USING CVT,R3\n         L     R15,CVTLPDSR\n         DROP  R3\n         BALR  R14,R15\n         B     LPAFOUND\n         B     LPANOTFO\nLPAFOUND LM    R7,R9,WLPA\n         LR    R15,R0\n         B     LPALIST\nLPANOTFO LM    R7,R9,WLPA\n         MVI   W3CDE+3,C'?'             INDICATE NOT FOUND\n         B     LPALISTA                 GO LIST IT\nLPALIST  MVC   W3CDEL,=C'LPDE'\n         ACON  (R15),W3CDE              CONVERT CDE ADDRESS\n         MVC   W3EPL,=C'EP'\n         ACON  CDENTPT(5),W3EP          CONVERT ENTRY POINT\n         DROP  R15\nLPALISTA BAL   R2,MSGSTD                LIST IT OUT\n         MVC   WLINED,WLINEB            CLEAR OUTPUT LINE\n         B     LPALOOP                  GO GET NEXT PDE\n         EJECT\n************************************************************\n*                                                          *\n*        'UNITS(CUU)' SPECIFIED                            *\n*                                                          *\n************************************************************\n         SPACE\nUNITCHK  CLI   PTYPE+1,4                UNITS SPECIFIED?\n         BNE   VOLCHECK                 NO, CONTINUE\n         MVC   WLINEH,=Y(W5LEN+4,0)     YES, SET MSG HEADER\n         TM    PDUNIT+6,X'80'           SPECIFIC UNITS REQUESTED?\n         BNO   VOLSETA                  NO, LIST ALL DASD UNITS\n         L     R15,CVTPTR               YES, GET THE CVT\n         USING CVT,R15\n         L     R8,CVTILK2               UCB LOOK-UP TABLE\n         DROP  R15                      CVT\n         ST    R8,WUCBTBL               SAVE LOOK-UP TABLE ADDRESS\n         OI    WSW,WSWRTJ               RIGHT JUSTIFY\n         MVC   WFILLER,XC0              SET FILLER\n         LA    R9,PDUNIT                SET FIRST PDE\nUNITSCAN BAL   R2,PDESCAN               PROCESS PDE\n         B     RETURN                   THAT'S ALL\n         MVC   WLINED,WLINEB            CLEAR THE PRINT LINE\n         MVC   W5UNIT,WNAME+5           SAVE UNIT NAME\n         L     R8,WUCBTBL               UCB TABLE START\nUNITSCNA LH    R7,0(R8)                 UCB ADDRESS\n         LTR   R7,R7                    ANYTHING?\n         BZ    UNITSCNB                 NO, EMPTY SLOT\n         BM    UNITERR                  NO, THE END....\n         USING UCB,R7\n         CLC   W5UNIT,UCBNAME           CORRECT UNIT?\n         BE    UNITFND                  YES, SET IT UP\nUNITSCNB LA    R8,2(R8)                 NO, BUMP TABLE PTR\n         B     UNITSCNA                 KEEP LOOKING\nUNITFND  CLI   UCBTBYT3,UCB3TAPE        TAPE?\n         BE    UNITVOL                  YES, SET SERIAL\n         CLI   UCBTBYT3,UCB3DACC        NO, DIRECT ACCESS?\n         BNE   UNITDATA                 NO, LIST IT OUT\nUNITVOL  MVC   W5VOLSER,UCBVOLI         YES, SET VOLUME SERIAL\n         OC    W5VOLSER,W5VOLSER        BINARY ZEROES?\n         BNZ   *+10                     NO\n         MVC   W5VOLSER,=CL6' '         YES - MAKE IT BLANKS\nUNITDATA BAL   R2,UCBDATA               WRITE OUT NECESSARY DATA\n         B     UNITLOOP                 KEEP ON....\nUNITERR  MVI   W5UCB+2,C'?'             ERROR\n         BAL   R2,MSGSTD                WRITE IT OUT\nUNITLOOP B     UNITSCAN                 GET NEXT PDE\n         DROP  R7                       UCB\n         EJECT\n************************************************************\n*                                                          *\n*        'VOLUMES(VOLSER)' SPECIFIED                       *\n*                                                          *\n************************************************************\n         SPACE\nVOLCHECK CLI   PTYPE+1,5                VOLUMES REQUESTED?\n         BNE   BLDLCHK                  NO, ....\nVOLSETA  MVC   WLINEH,=Y(W5LEN+4,0)     YES, SET MESSAGE HEADER\n         L     R15,CVTPTR               CVT\n         USING CVT,R15\n         L     R8,CVTILK2               UCB ADDRESSES\n         DROP  R15                      CVT\n         BAL   R2,GETUCB                GET INITIAL UCB ADDRESS\n         B     ERRUCB                   NOTHING??????\n         S     R8,=F'2'                 BACKUP OFF TO FIRST DASD UCB\n         ST    R8,WDASTART              SAVE IT\n         TM    PDVOL+6,X'80'            VOLUMES SPECIFIED?\n         BNO   UNITSET                  NO, LIST THEM ALL\n         LA    R9,PDVOL                 YES, SET FIRST PDE\nVOLCHKB  BAL   R2,PDESCAN               GO GET PDE\n         B     RETURN                   THAT'S ALL\n         MVC   W5VOLSER,WNAME           SET VOLUME SERIAL\n         L     R8,WDASTART              START OF DASD UCBS\n         BAL   R2,GETVOL                LOCATE PROPER UCB\n         B     VOLERR                   NOTHING, INVALID SERIAL\n         LR    R7,R15                   GET UCB ADDRESS\n         USING UCB,R7\n         MVC   W5UNIT,UCBNAME           SET UNIT ADDRESS\n         BAL   R2,UCBDATA               CHECK FOR DATA REQUEST\n         B     VOLCHKB                  GET NEXT PDE\n         DROP  R7                       UCB\nVOLERR   MVC   W5UNIT(9),XBLANKS        BLANK OUT MESSAGE\n         MVI   W5UNIT+1,C'?'\n         BAL   R2,MSGSTD                WRITE IT OUT\n         B     VOLCHKB                  KEEP LOOKING\nUNITSET  L     R8,WDASTART              INITIAL DASD UCB\nUNITSETA BAL   R2,GETUCB                GET NEXT UCB\n         B     RETURN                   THAT'S ALL\n         MVC   WLINED,WLINEB            CLEAR OUTPUT LINE\n         LR    R7,R15                   GET UCB ADDRESS\n         USING UCB,R7\n         MVC   W5VOLSER,UCBVOLI         VOLUME SERIAL\n         MVC   W5UNIT,UCBNAME           UNIT NAME\n         BAL   R2,UCBDATA               CHECK FOR DATA REQUEST\n         B     UNITSETA                 KEEP LOOKING\n         DROP  R7                       UCB\n         EJECT\n************************************************************\n*                                                          *\n*        'BLDL(MODULE)' SPECIFIED                          *\n*                                                          *\n************************************************************\n         SPACE\nBLDLCHK  CLI   PTYPE+1,6                SCAN RESIDENT BLDL LISTS?\n         BNE   STORAGE                  NO, ....\n         L     R15,CVTPTR               CVT\n         USING CVT,R15\n         L     R15,CVTPRLTV             TTR0 CONVERSION ROUTINE\n         DROP  R15                      CVT\n*\n*        FOLLOWING ASSUMPTION IS HIGHLY DEPENDENT ON THE ASSEMBLY\n*        OF BLDL(SVC 18).\n*\n         S     R15,=A(X'58')            BACK OFF TO ADDRESSES\n*              R15   POINTS TO IEARESBL\n*                    WHICH IS ALSO IEARESBS-4\n         L     R0,0(R15)                RESIDENT LINKLIB LIST\n         ST    R0,WBLDLINK\n         L     R0,4(R15)                RESIDENT SVCLIB LIST\n         ST    R0,WBLDSVC\n         MVC   WLINEH,=Y(W6LEN+4,0)     SET MESSAGE HEADER\n         LA    R9,PDLPA                 SET FIRST PDE\nBLDLOOP  BAL   R2,PDESCAN               GO GET PDE\n         B     RETURN                   THAT'S ALL\n         MVC   W6NAME,WNAME             MOVE NAME TO PRINT LINE\n         L     R15,WBLDLINK             SEARCH LINKLIB FIRST\n         LTR   R15,R15                  ANY?\n         BZ    BLDLS                    NO - BRANCH\n         BAL   R2,BLDLSCAN              LOOK FOR IT\n         B     BLDLIST                  GOT IT\nBLDLS    L     R15,WBLDSVC              NOTHING, NOW TRY SVCLIB\n         LTR   R15,R15                  ANY?\n         BZ    BLDLQ                    NO - BRANCH\n         BAL   R2,BLDLSCAN              GO LOOK FOR IT\n         B     BLDLIST                  GOT IT THIS TIME\nBLDLQ    MVI   W6ADDR+3,C'?'            SORRY, NOTHING....\n         B     BLDLISTA\nBLDLIST  ACON  (R3),W6ADDR              SET ENTRY POINT IN PRINT LINE\nBLDLISTA BAL   R2,MSGSTD                LIST IT OUT\n         MVC   WLINED,WLINEB            CLEAR OUTPUT LINE\nBLDLNEXT B     BLDLOOP                  GO GET NEXT PDE\n         EJECT\n************************************************************\n*                                                          *\n*        'STORAGE(NAME)' SPECIFIED                         *\n*                                                          *\n************************************************************\n         SPACE\nSTORAGE  CLI   PTYPE+1,7                STORAGE REQUEST SPECIFIED?\n         BNE   SUBPOOLS                 NO, ....\n         B     RETURN\n*          MVC   WLINEH,=Y(W7LEN+4,0)     YES, SETUP PRINT LINE\n*          TM    PDNAME+6,X'80'           WERE NAMES SPECIFIED?\n*          BO    STORTASK                 YES, GO PROCESS THEM\n*          L     R15,CVTPTR               NO, GET THE CVT ADDRESS\n*          USING CVT,R15\n*          L     R15,CVTABEND             SECONDARY CVT\n* *        USING SCVT,R15\n* *        L     R15,SCVTMSSQ             GOVRFLB\n*          DROP  R15\n*          L     R7,8(R15)                DUMMY PQE\n*          LA    R2,RETURN                SET EXIT ADDRESS FOR RETURN\n*          B     STORAGE2                 GO TO IT\n*          SPACE 2\n* STORTASK LINE2\n*          LA    R9,PDNAME                INITIAL PDE\n* STORNEXT BAL   R2,PDESCAN               CHECK IT OUT\n*          B     RETURN                   THAT'S ALL\n*          MVC   WLINE2+6(8),WNAME        TASK NAME IN HEADER\n*          LA    R0,WLINE2                MSG LINE\n*          BAL   R2,MSGDATA               LIST IT OUT\n*          BAL   R2,TCBSCAN               LOCATE DESIRED TCB\n*          B     STORNEXT                 NOTHING....\n*          USING TCB,R15                  GOT IT\n*          L     R7,TCBPQE                DUMMY PQE\n*          DROP  R15\n*          BAL   R2,STORAGE2              DO IT TO IT\n*          B     STORNEXT                 GO GET THE NEXT NAME\n*          SPACE 2\n* STORAGE2 DS    0H\n*          ST    R2,WSAVE1                SAVE LINKAGE REGISTER\n*          SLR   R0,R0                    ZERO WORK REG & CLEAR STORAGE\n*          ST    R0,WSTORCNT              ....\n*          ST    R0,WSTORSUM              ....\n*          ST    R0,WSTORMAX              ....\n*          L     R7,8(R7)                 PQE\n*          LA    R7,0(R7)                 CLEAR HI-ORDER BYTE\n*          C     R7,0(R7)                 ANY FBQE'S?\n*          BE    STORNONE                 NO, NOTHING....\n*          L     R8,0(R7)                 YES, GET FIRST FBQE\n* STORFBQE ACON  (R8),W7ADDR              LOCATION\n*          L     R1,8(R8)                 SIZE\n*          LA    R1,0(R1)\n*          SRL   R1,10                    DIVIDE BY 1024\n*          CVD   R1,WDOUBLE               TO DECIMAL\n*          MVC   W7KB,XPAT1               PATTERN\n*          ED    W7KB,WDOUBLE+5           MAKE IT PRINTABLE\n*          MVI   W7K,C'K'                 PLACE \"K\" IN MESSAGE\n*          C     R1,WSTORMAX              LARGEST SO FAR?\n*          BNH   STORSUM                  NO, ...\n*          ST    R1,WSTORMAX              YES, SET NEW MAXIMUM\n* STORSUM  AL    R1,WSTORSUM              UPDATE TOTAL\n*          ST    R1,WSTORSUM\n*          L     R1,WSTORCNT              UPDATE FBQE COUNT\n*          LA    R1,1(R1)\n*          ST    R1,WSTORCNT\n*          BAL   R2,MSGSTD                LIST IT\n*          L     R8,0(R8)                 GET NEXT POSSIBLE FBQE\n*          LA    R8,0(R8)\n*          CLR   R8,R7                    IS IT THE PQE?\n*          BNE   STORFBQE                 NO, PROCESS IT\n* *                                       YES, CONSTRUCT TOTAL LINE\n*          MVC   WLINED,WLINEB            CLEAR OUT PRINT LINE\n*          MVC   W7SX,=C'SUM='            SUMMATION OF ALL AREAS\n*          EDST  WSTORSUM,W7S\n*          MVI   W7SK,C'K'\n*          MVC   W7MX,=C'MAX='            LARGEST AREA\n*          EDST  WSTORMAX,W7M\n*          MVI   W7MK,C'K'\n*          MVC   W7FX,=C'#FBQES='         NUMBER OF FBQE'S\n*          EDST  WSTORCNT,W7F\n*          BAL   R2,MSGSTD                WRITE IT OUT\n*          MVC   WLINED,WLINEB            CLEAR OUT PRINT LINE\n* *\n*          B     STOR2END                 TERMINATE\n* STORNONE LA    R0,MNOFREE               INDICATE NO FREE AREA\n*          BAL   R2,MSGDATA\n* STOR2END L     R2,WSAVE1                RESTORE LINKAGE REGISTER\n*          BR    R2                       RETURN\n         EJECT\n************************************************************\n*                                                          *\n*        'SUBPOOLS(TASKNAME)' SPECIFIED                    *\n*                                                          *\n************************************************************\n         SPACE\nSUBPOOLS CLI   PTYPE+1,8                SUBPOOLS REQUESTED?\n         BNE   SVCTABLE                 NO, ....\n         B     RETURN\n*          MVC   WLINEH,=Y(W8LEN+4,0)     YES, SET MSG HEADER\n*          CLI   PDATA+1,1                DATA?\n*          BE    SUBLIST                  YES, GIVE PARTICULARS\n*          LA    R0,XSPTOT                NO, GIVE TOTALS HEADER\n*          BAL   R2,MSGDATA               TITLE LINE\n*          LA    R9,PDTCBA                INITIAL PDE\n* SUBTPDE  BAL   R2,PDESCAN               CHECK IT OUT\n*          B     RETURN                   THAT'S ALL\n*          MVC   W8XTASK,WNAME            NAME TO LINE\n*          BAL   R2,TCBSCAN               LOCATE DESIRED TCB\n*          B     SUBTPDE                  NOTHING, TRY ANOTHER\n*          USING TCB,R15\n*          ZCHK  R1,TCBMSS,SUBTPDE        SPQE CHAIN PTR\n*          ST    R1,WSPQE\n*          DROP  R15\n* SUBTSPQE XC    WDQECNT(24),WDQECNT      CLEAR COUNTERS\n*          BAL   R2,SPQECHK               GET NEXT SPQE\n*          B     SUBTPDE                  THAT'S ALL\n*          SLR   R0,R0                    CLEAR WORK REGISTER\n*          IC    R0,4(R8)                 SUBPOOL ID\n*          CVD   R0,WDOUBLE               TO DECIMAL\n*          OI    WDOUBLE+7,X'0F'          MAKE IT PRINTABLE\n*          UNPK  W8XSPID,WDOUBLE          ....\n*          LR    R7,R8                    DQE PTR - 4\n* SUBTDQE  ZCHK  R7,4(R7),SUBTLIST        DQE\n*          L     R1,12(R7)                SIZE\n*          LA    R1,0(R1)\n*          CL    R1,WDQEMAX               IS THIS ONE LARGER?\n*          BNH   *+8                      NO, ...\n*          ST    R1,WDQEMAX               YES, SET NEW MAX\n*          AL    R1,WDQESUM               UPDATE TOTAL SIZE\n*          ST    R1,WDQESUM\n*          L     R1,WDQECNT               COUNT DQE'S\n*          LA    R1,1(R1)\n*          ST    R1,WDQECNT\n*          LR    R6,R7                    SET FOR FQE'S\n* SUBTFQE  ZCHK  R6,0(R6),SUBTDQE         FQE\n*          L     R1,4(R6)                 SIZE\n*          LA    R1,0(R1)\n*          CL    R1,WFQEMAX               IS THIS ONE LARGER?\n*          BNH   *+8                      NO, ...\n*          ST    R1,WFQEMAX               YES, SET NEW MAX\n*          AL    R1,WFQESUM               UPDATE TOTAL SIZE\n*          ST    R1,WFQESUM\n*          L     R1,WFQECNT               COUNT FQE'S\n*          LA    R1,1(R1)\n*          ST    R1,WFQECNT\n*          B     SUBTFQE                  KEEP LOOKING\n* SUBTLIST EDST  WDQECNT,W8XDQES          DQE COUNT\n*          L     R0,WDQEMAX               DQE MAX BLOCK\n*          SRL   R0,10                    /1024 = # 1K BLOCKS\n*          EDR   R0,W8XDQMAX\n*          MVI   W8XDQMAX+L'W8XDQMAX,C'K'\n*          L     R0,WDQESUM               DQE TOTAL SIZE\n*          SRL   R0,10                    /1024 = # 1K BLOCKS\n*          EDR   R0,W8XDQSUM\n*          MVI   W8XDQSUM+L'W8XDQSUM,C'K'\n*          EDST  WFQECNT,W8XFQES          FQE COUNT\n*          EDST  WFQEMAX,W8XFQMAX         FQE LARGEST BLOCK\n*          EDST  WFQESUM,W8XFQSUM         FQE TOTAL SIZE\n*          BAL   R2,MSGSTD                WRITE OUT LINE\n*          MVC   W8XTASK,XBLANKS          CLEAR TASK NAME\n*          B     SUBTSPQE                 GET NEXT SUBPOOL\n*          SPACE 2\n* SUBLIST  LINE2\n*          LA    R0,MSPHDR\n*          BAL   R2,MSGDATA               TITLE LINE\n*          LA    R9,PDTCBA                INITIAL PDE\n* SUBPDE   BAL   R2,PDESCAN               CHECK IT OUT\n*          B     RETURN                   THAT'S ALL\n*          MVC   WLINE2+6(8),WNAME        NAME TO HEADER\n*          LA    R0,WLINE2\n*          BAL   R2,MSGDATA               LIST TASK NAME\n*          BAL   R2,TCBSCAN               LOCATE DESIRED TCB\n*          B     SUBPDE                   NOTHING, TRY ANOTHER\n*          USING TCB,R15\n*          ZCHK  R1,TCBMSS,SUBPDE         SPQE CHAIN PTR\n*          ST    R1,WSPQE\n*          DROP  R15\n* SUBSPQE  BAL   R2,SPQECHK               GET NEXT SPQE\n*          B     SUBPDE                   THAT'S ALL\n*          ACON  (R8),W8SPQE              SPQE ADDRESS\n*          UNPK  WCONDATA(3),0(2,R8)      SPQE FLAGS\n*          TR    WCONDATA(2),TRANS1\n*          MVC   W8FLAGS,WCONDATA         MOVE TO PRINT LINE\n*          SLR   R0,R0                    CLEAR WORK REGISTER\n*          IC    R0,4(R8)                 SUBPOOL ID\n*          CVD   R0,WDOUBLE               TO DECIMAL\n*          OI    WDOUBLE+7,X'0F'          MAKE IT PRINTABLE\n*          UNPK  W8SPID,WDOUBLE           ....\n*          LR    R7,R8                    DQE PTR - 4\n* SUBDQE   ZCHK  R7,4(R7),SUBSPQE         DQE\n*          ACON  (R7),W8DQE               DQE ADDRESS\n*          ACON  9(4,R7),W8BLK            BLOCK ADDRESS\n*          ACON  13(4,R7),W8BLKLEN        BLOCK LENGTH\n*          ZCHK  R1,12(R7),SUBLISTA       LIST NOW IF NO FQE\n*          LR    R6,R7                    SET FOR FQE'S\n* SUBFQE   ZCHK  R6,0(R6),SUBDQE          FQE\n*          ACON  (R6),W8FQE               FQE ADDRESS\n*          ACON  5(4,R6),W8FQELEN         FQE LENGTH\n* SUBLISTA BAL   R2,MSGSTD                PRINT IT OUT\n*          MVC   WLINED,WLINEB            BLANK OUT PRINT LINE\n*          B     SUBFQE                   ON TO THE NEXT FQE\n         EJECT\n*\n*        THIS FUNCTION DEPENDS ON AN ASSEMBLED OFFSET IN\n*        THE SVCTABLE - USERORG.  IN THIS ROUTINE IT IS\n*        EQUIVALENCED TO ZUSERORG.\n*\nSVCTABLE CLI   PTYPE+1,9                SVCTABLE REQUESTED?\n         BNE   ADDRCHK                     NO, ....\n         MVC   WLINEH,=Y(W9LEN+4,0)     YES, SET MSG HEADER\n         OI    WSW,WSWRTJ               RIGHT JUSTIFY\n         MVC   WFILLER,XC0              FILLER\n         L     R15,CVTPTR               CVT\n         USING CVT,R15\n         L     R15,CVTABEND             SECONDARY CVT\n         USING SCVT,R15\n         L     R0,SCVTSVCT              SVCTABLE\n         ST    R0,WSVCTBL               SAVE STARTING LOCATION\n         DROP  R15                      CVT, SCVT\n         LA    R9,PDSVC                 INITIAL PDE\nSVCPDE   BAL   R2,PDESCAN               CHECK OUT PDE\n         B     RETURN                   THAT'S ALL\n         MVI   W9LINE,C' '\n         MVC   W9LINE+1(W9LEN-1),W9LINE\n         PACK  WDOUBLE,WNAME            CONVERT SVC NUMBER\n         MVC   W9SVC,XPAT2              PATTERN\n         ED    W9SVC,WDOUBLE+6          EDIT SVC NUMBER\n         CVB   R15,WDOUBLE              TO BINARY\n         L     R8,WSVCTBL               SET IBM BASE\n         SLL   R15,3                    SVC# * 8\n         LA    R15,0(R15,R8)            SVCTABLE ENTRY\n         USING SVCENTRY,R15\n         ACON  (R15),W9ADDT             ADDRESS OF SVCTABLE ENTRY\n         MVI   W9TRANS,C' '\n         TM    SVCATTR1,X'C0'           TRANSIENT?\n         BNO   SVCRES                   NO, RESIDENT\n         MVI   W9TRANS,C'T'             YES, INDICATE\n         B     SVCADDRE\nSVCRES   BZ    SVCRES1                  TYPE 1\n         TM    SVCATTR1,X'80'           TYPE 2\n         BNO   SVCADDRE                 NO - LEAVE BLANK\n         MVI   W9TRANS,C'2'             YES - TYPE 2\n         B     SVCADDRE\nSVCRES1  MVI   W9TRANS,C'1'             TYPE 1\nSVCADDRE EQU   *\n         ACON  SVCADDR(4),W9ADDR        SVC ADDRESS\n         TM    SVCATTR1,X'08'           APF AUTH REQUIRED?\n         BZ    *+8                      NO - BRANCH\n         MVI   W9AUTH,C'A'\n         LA    R1,W9LOCKS\n         LA    R14,SVCLOCKS\n         TM    0(R14),X'80'\n         BZ    *+14\n         MVC   0(5,R1),=C'LOCAL'\n         LA    R1,6(,R1)\n         TM    0(R14),X'40'\n         BZ    *+14\n         MVC   0(3,R1),=C'CMS'\n         LA    R1,4(,R1)\n         TM    0(R14),X'20'\n         BZ    *+14\n         MVC   0(3,R1),=C'SRM'\n         LA    R1,4(,R1)\n         TM    0(R14),X'10'\n         BZ    *+14\n         MVC   0(6,R1),=C'SALLOC'\n         LA    R1,7(,R1)\n         TM    0(R14),X'08'\n         BZ    *+14\n         MVC   0(4,R1),=C'DISP'\n         LA    R1,5(,R1)\n         DROP  R15                      SVCENTRY\nSVCLIST  BAL   R2,MSGSTD                LIST IT\n         B     SVCPDE                   PROCESS ALL REQUESTS\n         EJECT\n************************************************************\n*                                                          *\n*        'ADDRESS'                                         *\n*                                                          *\n************************************************************\n         SPACE\nADDRCHK  CLI   PTYPE+1,10               LIST REQUEST?\n         BNE   RETURN                   NO, ...\n         TM    PADDRESS+6,X'80'         LOAD NAME SPECIFIED?\n         BO    ERRADDR                  YES, ERROR\n         TM    PADDRESS+14,X'80'        NO, ENTRY NAME?\n         BO    ERRADDR                  YES, ERROR\n         TM    PADDRESS+22,X'80'        NO, ADDRESS STRING?\n         BNO   TCBCHK                   NO, CONTINUE CHECKING ELSEWHERE\n         CLI   PADDRESS+24,0            YES, ABSOLUTE ADDRESS?\n         BNE   ERRADDR                  NO, ERROR\n         MVC   WLINEH,=Y(W13LEN+4,0)    YES, SET MSG HEADER\n         MVI   W13AST1,C'*'             INSERT DELIMITORS\n         MVI   W13AST2,C'*'\n         OI    WSW,WSWRTJ               RIGHT JUSTIFY\n         MVC   WFILLER,XC0              FILLER\n         LA    R9,PADDRESS+16           PDE POINTER\n         BAL   R2,PDESET                GET ADDRESS\n         B     ERRADDR                  NOTHING????\n         TR    WNAME,TRANS2             TRANSLATE\n         PACK  WDOUBLE(5),WNAME(9)      PACK INTO HEX\n         L     R3,WDOUBLE               GET STARTING ADDRESS\n         LA    R9,PDLENGTH              GET LENGTH PDE\n         BAL   R2,PDESET                GET VALUE\n         B     ERRADDR                  NOTHING????\n         PACK  WDOUBLE,WNAME            PACK DECIMAL VALUE\n         CVB   R5,WDOUBLE               CONVERT TO BINARY\nADDRLAST LA    R5,0(R3,R5)              GET ENDING ADDRESS + 1\n         BCTR  R5,0                     MINUS 1....\n         LA    R4,16                    INCREMENTAL LENGTH\nADDRLOOP LR    R1,R3                    DATA START\n         ACON  (R1),W13ADDR             CONVERT ADDRESS\n         LR    R14,R4                   DATA LENGTH\n         LA    R15,W13DATAX             OUTPUT LOCATION\n         BAL   R2,CONVERT               CONVERT TO HEX\n         MVC   W13DATAC,0(R3)           MOVE TO CHAR STRING LOCATION\n         TR    W13DATAC,TRANS3          TRANSLATE TO PRINTABLE ONLY\n         BAL   R2,MSGSTD                PRINT IT OUT\n         BXLE  R3,R4,ADDRLOOP           GET THEM ALL\n         B     RETURN                   THAT'S ALL....\n         EJECT\nERRADDR  LA    R0,MINVADDR              INVALID ADDRESS\n         B     ERROR\nERRPARSE LA    R0,MPARSERR              PARSE ERROR\n         B     ERROR\nERRUCB   LA    R0,MUCBERR               UCB ERROR\nERROR    BAL   R2,MSGINFOR              ISSUE ERROR MESSAGE\n         SPACE 2\nRETURN   TM    WSW,WSWDATA              DATA STILL TO BE WRITTEN?\n         BNO   RETURNA                  NO, EXIT\n         LM    R3,R4,WDBLKA             YES, GET DATA START & LENGTH\n         SLR   R3,R4                    BACK OFF TO LAST LINE\n         XC    0(4,R3),0(R3)            CLEAR FORWARD LINE POINTER\n         BAL   R2,MSGLIST               WRITE THEM OUT\nRETURNA  L     R15,CVTPTR\n         TM    444(R15),X'80'           PUTLINE IN CVT?\n         BO    SKIPDEL                  YES - SKIP DELETE\n         DELETE EPLOC=LPUTL             DELETE PUTLINE\nSKIPDEL  EQU   *\n         IKJRLSA WANS                   RELEASE PARSE AREA\n         LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN R,LV=WORKLEN,A=(1)\n         LA    R15,0\n         L     R14,12(,R13)\n         LM    0,12,20(R13)\n         BR    R14\n         EJECT\nUCBDATA  DS    0H\n         ST    R7,WDOUBLE               UCB ADDRESS\n         UNPK  W5UCB(5),WDOUBLE+2(3)    MAKE IT PRINTABLE\n         TR    W5UCB,TRANS1             ...\n         MVI   W5UCB+4,C' '             CLEAR RANDOM BYTE\n         CLI   PDATA+1,1                NO, DATA REQUESTED?\n         BNE   UKBSTATS                 NO, PRINT STATUS\n         ST    R2,WSAVE1                YES, SAVE RETURN REGISTER\n         LR    R3,R7                    SET UCB START\n         LA    R4,16                    SECTION LENGTH\n         LA    R5,63(R3)                UCB DATA END\nUCBDATAB LR    R1,R3                    DATA START\n         LR    R14,R4                   SECTION LENGTH\n         LA    R15,W5DATA               OUTPUT LOCATION\n         BAL   R2,CONVERT               CONVERT HEX DATA\n         BAL   R2,MSGSTD                PRINT IT\n         MVC   WLINED,WLINEB            CLEAR PRINT LINE\n         BXLE  R3,R4,UCBDATAB           GET IT ALL\nUCBDATAX L     R2,WSAVE1                RESTORE RETURN REGISTER\n         BR    R2                       RETURN\n         SPACE 2\nCONVERT  DS    0H\n         STM   R3,R5,WCSAVE             SAVE WORK REGISTERS\n         LR    R3,R1                    START OF DATA\n         LA    R4,4                     ITEM LENGTH\n         LA    R5,0(R3,R14)             END OF DATA + 1\n         BCTR  R5,0\nCONVERTA UNPK  WCONDATA,0(5,R3)         UNPACK\n         TR    WCONDATA(8),TRANS1       MAKE IT PRINTABLE\n         MVC   2(8,R15),WCONDATA        MOVE TO OUTPUT AREA\n         LA    R15,10(R15)              BUMP OUTPUT POINTER\n         BXLE  R3,R4,CONVERTA           DO IT ALL\n         LM    R3,R5,WCSAVE             RESTORE WORK REGISTERS\n         BR    R2                       RETURN\n         EJECT\n         USING UCB,R7\nUKBSTATS DS    0H\n         ST    R2,WSAVE1                SAVE RETURN REGISTER\n         ST    R7,WDOUBLE               UCB ADDRESS\n         UNPK  W5UCB(5),WDOUBLE+2(3)    MAKE IT PRINTABLE\n         TR    W5UCB,TRANS1             ...\n         MVI   W5UCB+4,C' '             CLEAR RANDOM BYTE\n         MVI   W5STAT,C' '\n         MVC   W5STAT+1(W5SLENT-1),W5STAT\n         TM    UCBSTAT,UCBONLI          ONLINE?\n         BO    UKBSONLI                 YES - BRANCH\n         MVC   W5SPRIV(9),=C'*OFFLINE*'\n         B     UKBPRT                   FINISHED\nUKBSONLI CLI   UCBTYP+2,UCB3DACC        DIRECT ACCESS?\n         BE    UKBDISK                  YES - BRANCH\n         CLI   UCBTYP+2,UCB3TAPE        TAPE\n         BE    UKBTAPE                  YES - BRANCH\n         B     UKBPRT\nUKBDISK  LA    R2,=CL6'3330'\n         CLI   UCBTYP+3,9               3330\n         BE    UKBDISKT\n         LA    R2,=CL6'3330-1'\n         CLI   UCBTYP+3,13              3330-1\n         BE    UKBDISKT\n         LA    R2,=CL6'3350'\n         CLI   UCBTYP+3,11              3350\n         BE    UKBDISKT\n         LA    R2,=CL6' '               NONE OF THE ABOVE\nUKBDISKT MVC   W5STYPE,0(R2)            DEVICE TYPE NAME\n         TM    UCBTYP+1,8               MSS VIRTUAL 3330, UCBRVDEV\n         BZ    *+8                      NO, SKIP NEXT INSTR\n         MVI   W5STYPE+4,C'V'           CHANGE 3330 TO 3330V\n         TM    UCBTYP+1,X'20'           SHARED\n         BZ    *+10                     NO\n         MVC   W5SSHR,=C'SHARED'        YES\n         TM    UCBSTAB,UCBBPRV          PRIVATE?\n         BZ    UKBSTVS1                 NO - BRANCH\n         MVC   W5SPRIV,=C'PRIVATE'      YES\nUKBSTVS1 TM    UCBSTAB,UCBBSTR          STORAGE?\n         BZ    UKBSTVS2                 NO - BRANCH\n         MVC   W5SPRIV,=C'STORAGE'      YES\nUKBSTVS2 TM    UCBSTAB,UCBBPUB          PUBLIC?\n         BZ    UKBSTVS3                 NO - BRANCH\n         MVC   W5SPRIV,=C'PUBLIC '      YES\nUKBSTVS3 EQU  *\n         TM    UCBSTAT,UCBPRES          RESIDENT?\n         BZ    UKBSTDV1                 NO - BRANCH\n         MVC   W5SPRES,=C'RESIDENT'     YES\nUKBSTDV1 TM    UCBSTAT,UCBRESV          RESERVED?\n         BZ    UKBSTDV2                 NO - BRANCH\n         MVC   W5SPRES,=C'RESERVED'     YES\nUKBSTDV2 EQU   *\n         TM    UCBSTAT,UCBALOC          ALLOCATED?\n         BO    *+10                     NO - BRANCH\n         MVC   W5SALLO,=C'NOT-ALLOCATED' NO\n         TM    UCBFLA,UCBNRY            READY?\n         BZ    *+10                     YES - BRANCH\n         MVC   W5SALLO,=C'NOT-READY    ' NO\n         B     UKBPRT\nUKBTAPE  EQU   *\n         OC    W5VOLSER,W5VOLSER        VOLSER PRESENT\n         BZ    UKBPRT\n         TM    UCBFLA,UCBNRY            READY?\n         BZ    *+10                     YES - BRANCH\n         MVC   W5SPRIV(9),=C'NOT-READY    ' NO\nUKBNDA   EQU   *\nUKBPRT   EQU   *\n         BAL   R2,MSGSTD                PRINT OUTPUT LINE\n         L     R2,WSAVE1                RESTORE RETURN REGISTER\n         BR    R2                       RETURN\n         DROP  R7\n         SPACE 2\nCONVERTB DS    0H\n         UNPK  WCONDATA,0(5,R1)         UNPACK INPUT\n         TR    WCONDATA(8),TRANS1       MAKE IT PRINTABLE\n         BCTR  R14,0                    OUTPUT LENGTH - 1\n         EX    R14,IMCON                MOVE DATA TO OUTPUT LINE\n         BR    R2                       RETURN\n         EJECT\nMSGINFOR DS    0H\n         XC    WECB,WECB                CLEAR ECB\n         L     R15,WPUTL                PUTLINE ROUTINE\n         PUTLINE OUTPUT=((R0),,,DATA),ENTRY=(15),MF=(E,WIOPL)\n         BR    R2                       RETURN\n         SPACE 2\nMSGSTD   DS    0H                       MESSAGE ROUTINE\n         LA    R0,WLINEH                STANDARD MESSAGE AREA\nMSGDATA  STM   R2,R5,WDSAVE             SAVE WORK REGISTERS\n         LM    R3,R5,WDBLKA             LOAD CONTROL REGISTERS\n         OI    WSW,WSWDATA              INDICATE DATA TO WRITE\n         LR    R1,R0                    STARTING DATA ADDRESS\n         MVC   4(WDBLKENT-4,R3),0(R1)   MOVE PRINT LINE IN\n         BXLE  R3,R4,MSGRET             CONTINUE IF MORE LINES REMAIN\n         BAL   R2,MSGLIST               ELSE, WRITE THE BLOCK OUT\n         L     R3,WDBLK                 GET BLOCK START\nMSGRET   ST    R3,WDBLKA                RESET LINE POINTER\n         LR    R15,R3                   ALSO RETURN IT IN REG 15\n         LM    R2,R5,WDSAVE             RESTORE WORK REGISTERS\n         BR    R2                       RETURN\n         SPACE 2\nMSGLIST  DS    0H                       BLOCK LIST ROUTINE\n         XC    WECB,WECB                CLEAR ECB\n         L     R0,WDBLK                 BLOCK START\n         L     R15,WPUTL                PUTLINE ROUTINE\n         PUTLINE OUTPUT=((R0),,MULTLIN,DATA),ENTRY=(15),MF=(E,WIOPL)\n         NI    WSW,X'FF'-WSWDATA        INDICATE BLOCK WRITTEN\n         BR    R2                       RETURN\n         EJECT\nTCBSCAN  DS    0H                       TCB LOOK-UP ROUTINE\n         L     R15,WTCBA                STARTING TCB\n         USING TCB,R15\nTCBSCANA ZCHK  R1,TCBTIO,TCBSCANX       TIOT\n         CLC   WNAME,0(R1)              DESIRED TASK?\n         BE    TCBSCANY                 YES, PROCESS IT\nTCBSCANX L     R15,TCBTCB               GET NEXT TCB\n         LA    R15,0(R15)\n         LTR   R15,R15                  ANY MORE?\n         BP    TCBSCANA                 YES, ....\n         BR    R2                       NO, RETURN\nTCBSCANY LR    R14,R15                  SAVE TCB ADDRESS\n         ZCHK  R15,TCBLTC,TCBSCANY,BC=NZ     GET SUBTASK TCB\n         DROP  R15\n         USING TCB,R14\n         L     R15,TCBJSTCB             GET JOB STEP TCB\n         B     4(R2)                    RETURN\n         DROP  R14\n         SPACE 2\nSPQECHK  DS    0H                       SPQE DETERMINATION ROUTINE\n         ZCHK  R8,WSPQE,R2,BC=ZR        IS THERE ANOTHER SPQE?\n         MVC   WSPQE,0(R8)              YES, SAVE NEXT PTR ON CHAIN\n         TM    0(R8),X'80'              SHARED SUBPOOL?\n         BNO   4(R2)                    NO, RETURN\n         L     R8,4(R8)                 YES, GET ACTUAL SPQE ADDRESS\n         LA    R8,0(R8)                 CLEAR HI-ORDER BYTE\n         B     4(R2)                    RETURN\n         EJECT\nGETVOL   DS    0H\n         OI    WSW,WSWVOL               INDICATE VOLSER CHECK\nGETUCB   LH    R15,0(R8)                UCB ADDRESS\n         LTR   R15,R15                  VALID?\n         BZ    GETBUMP                  YES, BUT EMPTY\n         BCR   4,R2                     NO, ALL DONE\n         USING UCB,R15\n         CLI   UCBTBYT3,UCB3DACC        YES, DASD?\n         BNE   GETBUMP                  NO, -\n         TM    UCBSTAT,UCBONLI          YES, ONLINE?\n         BZ    GETBUMP                  NO, -\n         TM    WSW,WSWVOL               YES, DO WE CHECK VOLSER?\n         BZ    GETRET                   NO, RETURN\n         CLC   UCBVOLI,W5VOLSER         YES, DO THEY MATCH?\n         BE    GETRET                   YES, RETURN\nGETBUMP  LA    R8,2(R8)                 BUMP UCB POINTER\n         B     GETUCB                   CONTINUE...........\nGETRET   NI    WSW,X'FF'-WSWVOL         TURN OFF VOLSER SWITCH\n         LA    R8,2(R8)                 BUMP UCB POINTER\n         B     4(R2)                    RETURN\n         DROP  R15\n         EJECT\nBLDLSCAN DS    0H                       SCAN RESIDENT BLDL LST\n         LA    R3,4(R15)                START OF LIST\n         LH    R4,2(R15)                ENTRY LENGTH\n         LH    R5,0(R15)                # OF ENTRIES\nBLDLSCNA CLC   WNAME,0(R3)              CORRECT NAME?\n         BER   R2                       YES, GOT IT\n         LA    R3,0(R3,R4)              NO, BUMP TO NEXT ENTRY\n         BCT   R5,BLDLSCNA              KEEP LOOKING\n         B     4(R2)                    NOTHING, RETURN\n         SPACE 2\nPDESCAN  DS    0H                       PDE SCANNING ROUTINE\n         LA    R9,0(R9)                 CLEAR HI-ORDER BYTE\n         LTR   R9,R9                    ANYTHING?\n         BZR   R2                       NO, THAT'S ALL\n         TM    6(R9),X'80'              YES, FIELD PRESENT?\n         BO    PDESET                   YES, SET IT UP\n         L     R9,8(R9)                 NO, GET NEXT PDE\n         B     PDESCAN                  ... AND TRY AGAIN\nPDESET   L     R15,0(R9)                FIELD START\n         LH    R1,4(R9)                 FIELD LENGTH\n         SLR   R14,R14                  DEFAULT OFFSET\n         TM    WSW,WSWRTJ               RIGHT JUSTIFY?\n         BNO   PDESCLOC                 NO, ....\n         LA    R14,L'WNAME              YES, GET MAX LENGTH\n         SR    R14,R1                   SUBTRACT LENGTH FOR OFFSET\nPDESCLOC LA    R14,WNAME(R14)           START OF DATA\n         BCTR  R1,0                     LENGTH - 1\n         MVC   WNAME,WFILLER            FILL IN NAME FIELD\n         EX    R1,IMNAME                MOVE NAME\n         L     R9,8(R9)                 SET FOR NEXT PDE\n         B     4(R2)                    RETURN\n         EJECT\n         PRINT NOGEN\nMPARSERR WTO   ' PARSE ERROR',MF=L\nMUCBERR  WTO   ' UCB LOOK-UP ERROR',MF=L\nMNOFREE  WTO   ' THERE IS NO FREE MAIN STORAGE',MF=L\nMNOMSTCB WTO   ' UNABLE TO LOCATE MASTER SCHEDULER TCB(??)',MF=L\nMSPHDR   DS    0F\n         DC    Y(MSPHDRL,0)\n         DC    CL8'  SPQE',CL7' FLGS',CL6'SPID'\n         DC    CL8'  DQE',CL8'  BLK',CL8'LENGTH'\n         DC    CL8'  FQE',CL8'LENGTH'\nMSPHDRL  EQU   *-MSPHDR\nMINVADDR WTO   ' INVALID ADDRESS SPECIFIED',MF=L\n         PRINT GEN\n         EJECT\n         DS    0D\nLPUTL    DC    CL8'IKJPUTL'\nLPARSE   LINK  EP=IKJPARS,SF=L\nIMCON    MVC   0(*-*,R15),WCONDATA\nIMNAME   MVC   0(*-*,R14),0(R15)\nIMRNAME  MVC   W2RNAME(*-*),20(R7)\n         SPACE 2\nXBLANKS  DC    CL64' '\nXC0      DC    8C'0'\nXMSNAME  DC    CL16'MASTER  SCHEDULR'\nXPAT1    DC    X'402020202120'\nXPAT2    DC    X'40202120'\nXPAT3    DC    X'40206B2020206B202120'\nXSTAT    DC    C'SA=XX,F1=XX,SB=XX,RSV=XXYY,RQE=AAAA,SEEK=CCHH'\nXSPTOT   DS    0F\n         DC    Y(XSPTOTL,0)\n         DC    CL11' ',CL7'SPID'\n         DC    CL12'#DQES',CL8'MAX',CL6'SUM'\n         DC    CL10'#FQES',CL8'MAX',CL6'SUM'\nXSPTOTL  EQU   *-XSPTOT\n         EJECT\n         DS    0F\nTRANS1   EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\n         DS    0F\nTRANS2   EQU   *-C'A'\n         DC    X'0A0B0C0D0E0F',XL41'0'\n         DC    C'0123456789'\n         DS    0F\nTRANS3   DC    256C'.'\n         TRANS C' '\n         TRANS X'4A',7\n         TRANS X'5A',8\n         TRANS C',',5\n         TRANS C':',6\n         TRANS X'81',9\n         TRANS X'91',9\n         TRANS X'A2',8\n         TRANS C'A',9\n         TRANS C'J',9\n         TRANS C'S',8\n         TRANS C'0',10\n         ORG\n         EJECT\n         LTORG\n         EJECT\n         PRINT NOGEN\nDISPPCL  IKJPARM\n*\nPTYPE    IKJKEYWD\n#1       IKJNAME  'TCBADDR',SUBFLD=PSTCBA\n#2       IKJNAME  'QCBS',SUBFLD=PSTCBA\n#3       IKJNAME  'LPA',SUBFLD=PSLPA\n#4       IKJNAME  'UNITS',SUBFLD=PSUNIT\n#5       IKJNAME  'VOLUMES',SUBFLD=PSVOL\n#6       IKJNAME  'BLDL',SUBFLD=PSLPA\n#7       IKJNAME  '$TORAGE',SUBFLD=PSNAME\n#8       IKJNAME  'SUBPOOLS',SUBFLD=PSTCBA\n#9       IKJNAME  'SVCTABLE',SUBFLD=PSSVC\n#10      IKJNAME  'ADDRESS',SUBFLD=PSADDR\n*\nPDATA    IKJKEYWD\n         IKJNAME  'DATA',SUBFLD=PSLPA\n         IKJNAME  'STATUS'\n*\nPSTCBA   IKJSUBF\nPDTCBA   IKJIDENT 'TASK NAME',LIST,MAXLNTH=8,OTHER=ALPHANUM,           W\n               PROMPT='TASK NAME(S)'\n*\nPSNAME   IKJSUBF\nPDNAME   IKJIDENT 'NAME(S)',LIST,MAXLNTH=8,OTHER=ALPHANUM\n*\nPSUNIT   IKJSUBF\nPDUNIT   IKJIDENT 'UNIT NAMES',LIST,MAXLNTH=3,                         W\n               FIRST=ALPHANUM,OTHER=ALPHANUM\n*\nPSVOL    IKJSUBF\nPDVOL    IKJIDENT 'VOL-IDS',LIST,MAXLNTH=6,OTHER=ALPHANUM\n*\nPSLPA    IKJSUBF\nPDLPA    IKJIDENT 'MODULES',LIST,MAXLNTH=8,OTHER=ALPHANUM\n*\nPSSVC    IKJSUBF\nPDSVC    IKJIDENT 'SVCS',LIST,MAXLNTH=3,FIRST=NUMERIC,OTHER=NUMERIC,   W\n               PROMPT='SVC NUMBERS'\n*\nPSADDR   IKJSUBF\nPADDRESS IKJPOSIT ADDRESS,RANGE,PROMPT='DATA ADDRESS'\nPDLENGTH IKJIDENT 'LENGTH',MAXLNTH=8,FIRST=NUMERIC,OTHER=NUMERIC,      W\n               DEFAULT='32'\n*\n         IKJENDP\n         PRINT GEN\n         EJECT\nWORKAREA DSECT\nWSAVE    DS    9D\nWDOUBLE  DS    D\nWSAVE1   DS    F\nWCSAVE   DS    3F\nWTJB     DS    A\nWMSTCB   DS    A\nWTCBA    DS    A\nWSPQE    DS    A\nWLPALINK DS    A\nWLPASVC  DS    A\nWLPATSO  DS    A\nWUCBTBL  DS    0A\nWDASTART DS    A\nWPUTL    DS    A\nWANS     DS    A\nWECB     DS    F\nWQCBORG  DS    A\nWSVCTBL  DS    A\nWDBLK    DS    A\nWDBLKENT EQU   88\nWDBLKLEN EQU   23*WDBLKENT\nWDBLKA   DS    3A\nWDSAVE   DS    4F\nWPPL     DS    XL28\nWIOPL    DS    XL16\nWPTPB    DS    XL12\nWLPA     DS    3F\nWNAME    DS    CL8\nWFILLER  DS    CL8\n         SPACE 2\nWCMDWORK DS    0D\nWBLDLINK DS    A\nWBLDSVC  DS    A\n         ORG   WCMDWORK\nWSTORSUM DS    F\nWSTORMAX DS    F\nWSTORCNT DS    F\n         ORG   WCMDWORK\nWDQECNT  DS    F\nWDQEMAX  DS    F\nWDQESUM  DS    F\nWFQECNT  DS    F\nWFQEMAX  DS    F\nWFQESUM  DS    F\n         ORG\n         EJECT\nWLINEH   DS    0F,2Y\nWLINE    DS    0F\nWLINEB   DS    C\nWLINED   DS    CL78\n         ORG   WLINED\nW1LINE   DS    0C\nW1NAME   DS    CL8,CL2\nW1ADDR   DS    CL6\nW1LEN    EQU   *-WLINE\n         ORG   WLINED\nW2LINE   DS    0C\nW2QNAME  DS    CL8,CL2\nW2TYPE   DS    CL4,CL2\nW2RNAME  DS    CL44,CL2\nW2STAT   DS    CL4,CL2\nW2SMC    DS    CL4\nW2LEN    EQU   *-WLINE\n         ORG   WLINED\nW3LINE   DS    0C\nW3NAME   DS    CL8,CL2\nW3CDEL   DS    CL4,CL1\nW3CDE    DS    CL6,CL2\nW3EPL    DS    CL2,CL1\nW3EP     DS    CL6\nW3LEN    EQU   *-WLINE\n         ORG   WLINED\nW5LINE   DS    0C\nW5VOLSER DS    CL6,CL2\nW5UNIT   DS    CL3,CL2\nW5UCB    DS    CL4,CL2\nW5DATA   DS    CL48\n         ORG   W5DATA\nW5STAT   DS    CL3\nW5STYPE  DS    CL6,CL2\nW5SPRIV  DS    CL7,CL2\nW5SPRES  DS    CL8,CL2\nW5SALLO  DS    CL13,CL2\nW5SSHR   DS    CL6,CL2\nW5SLENT  EQU   *-W5STAT\n         ORG\nW5LEN    EQU   *-WLINE\n         ORG   WLINED\nW6LINE   DS    0C\nW6NAME   DS    CL8,CL2\nW6ADDR   DS    CL6\nW6LEN    EQU   *-WLINE\n         ORG   WLINED\nW7LINE   DS    0C\nW7ADDR   DS    CL6,CL2\nW7KB     DS    CL6\nW7K      DS    C\n         ORG   W7LINE\n         DS    CL4\nW7SX     DS    C'SUM='\nW7S      DS    CL6\nW7SK     DS    C'K',CL5\nW7MX     DS    C'MAX='\nW7M      DS    CL6\nW7MK     DS    C'K',CL5\nW7FX     DS    C'#FBQES='\nW7F      DS    CL6\nW7LEN    EQU   *-WLINE\n         ORG   WLINED\nW8LINE   DS    0C\nW8SPQE   DS    CL6,CL2\nW8FLAGS  DS    CL2,CL4\nW8SPID   DS    CL3,CL3\nW8DQE    DS    CL6,CL2\nW8BLK    DS    CL6,CL2\nW8BLKLEN DS    CL6,CL2\nW8FQE    DS    CL6,CL2\nW8FQELEN DS    CL6\n         ORG   W8LINE\nW8XLINE  DS    0C\nW8XTASK  DS    CL8,CL2\nW8XSPID  DS    CL3,CL3\nW8XDQES  DS    CL6,CL3\nW8XDQMAX DS    CL6,CL2\nW8XDQSUM DS    CL6,CL3\nW8XFQES  DS    CL6,CL2\nW8XFQMAX DS    CL6,CL2\nW8XFQSUM DS    CL6\nW8LEN    EQU   *-WLINE\n         ORG   WLINED\nW9LINE   DS    0C\nW9SVC    DS    CL4,CL3\nW9ADDR   DS    CL6\n         DS    C\nW9TRANS  DS    C\n         DS    C\nW9AUTH   DS    C\n         DS    C\nW9ADDT   DS    CL6,C\nW9LOCKS  DS    CL25\nW9LEN    EQU   *-WLINE\n         ORG   WLINED\nW10LINE  DS    0C\nW10NAME  DS    CL44\n         ORG   W10LINE\nW10DEVT  DS    CL8,CL2\nW10VOL   DS    CL6,CL2\nW10CVOL  DS    CL6,CL2\nW10TMCNT DS    CL10,CL2\nW10CCHHR DS    CL10,CL2\nW10TTR   DS    CL6\nW10LEN   EQU   *-WLINE\n         ORG   WLINED\nW13LINE  DS    0C\nW13ADDR  DS    CL6,CL2\nW13DATAX DS    4CL10,CL5\nW13AST1  DS    C\nW13DATAC DS    CL16\nW13AST2  DS    C\nW13LEN   EQU   *-WLINE\n         ORG\n         SPACE 2\n         DS    0F\nWLINE2   DS    CL16\nWSW      DS    X\nWSWVOL   EQU   X'80'\nWSWAIT   EQU   X'40'\nWSWRTJ   EQU   X'20'\nWSWDATA  EQU   X'10'\nWCONDATA DS    XL9\n         DS    0D\nWORKLEN  EQU   *-WORKAREA\n         EJECT\n         IKJCPPL\n         SPACE 2\n         IKJPPL\n         SPACE 2\n         IKJIOPL\n         EJECT\nCDE      DSECT\nCDATTR   DS    0X        ATTRIBUTE FIELD\nCD1LPA   EQU   X'80'     MODULE IS RESIDENT IN THE LPA\nCD1FTCH  EQU   X'40'     MODULE IS BEING FETCHED\nCD1RENT  EQU   X'20'     MODULE IS REENTERABLE\nCD1REUS  EQU   X'10'     MODULE IS SERIALLY REUSABLE\nCD1NREU  EQU   X'08'     MODULE MAY NOT BE REUSED\nCD1MINR  EQU   X'04'     THIS IS A MINOR CDE\nCD1JPA   EQU   X'02'     MODULE IS IN THE JOB PACK AREA\nCD1NOL   EQU   X'01'     MODULE IS NOT ONLY LOADABLE\nCDCHAIN  DS    A         NEXT CDE IN THIS QUEUE\nCDROLL   DS    0X        RESERVED\nCDRBP    DS    A         RB ADDRESS\nCDNAME   DS    CL8       MODULE, AIAS, OR ENTRY NAME\nCDUSE    DS    0FL1      USE/RESPONSIBILITY COUNT\nCDENTPT  DS    A         MODULE ENTRY POINT\nCDATTR2  DS    0X        ATTRIBUTE FIELD 2\nCD2NACT  EQU   X'40'     INACTIVE MODULE, OK TO RELEASE\nCD2EXTL  EQU   X'20'     EXTENT LIST EXISTS FOR MODULE\nCD2REAL  EQU   X'10'     CDE CONTAINS RELOCATED ALIAS EP\nCD2REFR  EQU   X'08'     MODULE IS REFRESHABLE\nCD2OVLY  EQU   X'04'     OVERLAY\nCDXLMJP  DS    A         EXTENT LIST/MAJOR CDE ADDRESS\nCDLEN    EQU   *-CDE\n         SPACE 2\nLLE      DSECT\nLLECHAIN DS    A                        A(NEXT ELEMENT ON LOAD LIST)\nLLEUSE   DS    0FL1                     RESPONSIBILITY COUNT\nLLECDE   DS    A                        CDE FOR MODULE\n         SPACE 2\nSVCENTRY DSECT                          SVCTABLE ENTRY\nSVCEP    DS    0A\n         DS    C\nSVCADDR  DS    AL3\nSVCATTR1 DS    H\nSVCLOCKS DS    H\n         EJECT\n         PRINT GEN\n*        IKJTCB\n**             TASK CONTROL BLOCK\n**\n**\nTCB      DSECT\n         ORG   TCB+X'0C'\nTCBTIO   DS    A\n         ORG   TCB+X'18'\nTCBMSS   DS    0A\n         ORG   TCB+X'24'\nTCBLLS   DS    A       ADDR OF LAST LLE IN LOAD LIST\n         ORG   TCB+X'74'\nTCBTCB   DS    A       ADDR OF NEXT LOWER PRIO TCB ON RDY Q\n         ORG   TCB+X'7C'\nTCBJSTCB DS    0A      ADDR OF 1ST JOBSTEP TCB\n         ORG   TCB+X'84'\nTCBOTC   DS    A       ADDR OF MOTHER TCB\nTCBLTC   DS    A       ADDR OF LAST DAUGHTER TCB\n         ORG   TCB+X'98'\nTCBPQE   DS    A       POINTER TO DPQE MINUS 8 FOR JOBSTEP\n         SPACE 2\nCVT      DSECT\n*        CVT\nCVTPTR   EQU   16\nCVTMAP   EQU   *\nCVTTCBP  DS    A\n         ORG   CVTMAP+X'01C'\nCVTPCNVT DS    A            TTR TO MBBCCHHR\nCVTPRLTV DS    A            MBBCCHHR TO TTR\nCVTILK1  DS    A\nCVTILK2  DS    A\n         DS    2A\nCVTBTERM DS    A\n         ORG   CVTMAP+X'0C8'\nCVTABEND DS    A\n         ORG   CVTMAP+X'160'\nCVTLPDSR DS    A\n         ORG   CVTMAP+X'280'\nCVTFQCB  DS    A\n         SPACE 2\nSCVT     DSECT\n         ORG   *+X'84'\nSCVTSVCT DC    V(IBMORG)   ORIGIN OF SVC TABLE\n         SPACE 2\nUCB      DSECT\n         IEFUCBOB LIST=YES\nUCBLTS   EQU   0\nUCBSKA   EQU   0\n         SPACE 2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DISPLAYH": {"ttr": 6147, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06/\\x01\\x02\\x06/\"\\x03\\x00$\\x00$\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-03T00:00:00", "modifydate": "2002-03-03T22:03:00", "lines": 36, "newlines": 36, "modlines": 0, "user": "SYZYGY"}, "text": ")F FUNCTION -\n  THE DISPLAY (DS) COMMAND DISPLAYS SYSTEM INFORMATION FROM\n  SYSTEM CONTROL AREAS ON THE TERMINAL.\n  THE AREAS THAT CAN BE DISPLAYED ARE:\n     - THE LOCATION OF A MODULE IN THE LINK PACK AREA (LPA),\n     - THE LOCATION OF AN SVC IN THE NUCLEUS OR LPA,\n     - ANY SPECIFIED VIRTUAL ADDRESS IN YOUR ADDRESS SPACE,\n     - A UNIT CONTROL BLOCK, BY CUA ADDRESS OR VOLUME,\n)X SYNTAX  -\n         DS   LPA('MODULE')  SVC('NUMBER')   ADDRESS('LOC' 'LENGTH')\n              UNIT('CUA')   VOLUME('VOLUME')   DATA\n  REQUIRED - NONE\n  DEFAULTS - NOTHING HAPPENS IF NO OPERANDS ARE ENTERED.\n             UNIT AND VOLUME DEFAULT TO ALL DASD UCB'S.\n  ALIAS    - DS\n)O OPERANDS -\n))LPA('MODULES') - THE ADDRESS OF THE LPA DIRECTORY ENTRY (LPDE)\n             AND ENTRY POINT FOR THE SPECIFIED MODULES IS DISPLAYED.\n             DOES NOT SHOW MLPA ENTRY POINT.  SEE ALSO HELP FOR\n             THE 'LISTLPA' COMMAND, WHICH DOES REFLECT MLPA.\n))SVC('NUMBERS') - THE ADDRESSES OF THE SPECIFIED SVCS ARE DISPLAYED.\n))ADDRESS('LOC' 'LENGTH') - THE SPECIFIED LOCATION IS DISPLAYED,\n             FOR THE SPECIFIED LENGTH. THE LOCATION IS SPECIFIED\n             WITH HEX DIGITS FOLLOWED BY A PERIOD, THE SAME FORMAT\n             USED BY THE 'TEST' SUBCOMMANDS.  IF ANY OF THE DATA\n             IS IN READ-PROTECTED STORAGE OR THE ADDRESS IS\n             OTHERWISE INACCESSIBLE, A S0C4 ABEND OCCURS.  THE\n             LENGTH IS A DECIMAL NUMBER, DEFAULTING TO 32.\n))UNIT('CUA') - THE UCB ADDRESS OF THE SPECIFIED CHANNEL-UNIT-ADDRESS\n             IS DISPLAYED.  IF THE 'DATA' KEYWORD IS ALSO SPECIFIED,\n             THEN THE DATA IN THE UCB IS DISPLAYED.  A LIST OF\n             CUA'S MAY BE SPECIFIED.\n))VOLUME('VOLUMES') - SAME AS THE 'UNIT' KEYWORD, EXCEPT THE UCB'S\n             TO BE DISPLAYED ARE SEARCHED FOR USING THE VOLUME.\n))DATA  -    WITH 'UNIT' OR 'VOL', THE UCB IS TO BE DISPLAYED,\n             NOT JUST ITS ADDRESS.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DYNABLD$": {"ttr": 6149, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00$\\x00\\x97\\x11\\x0f\\x01\\x02\\x07o\\t9\\x00\\x0b\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1997-04-20T00:00:00", "modifydate": "2002-03-17T09:39:24", "lines": 11, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBL JOB (ACCT#),PDSLOAD,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//LOAD EXEC PGM=PDSLOAD               /* FROM FILE 093 OR 035 LOADMOD)\n//STEPLIB  DD DISP=SHR,DSN=SBGOLOB.W$$.LINKLIB\n//SYSUT1   DD DISP=SHR,DSN=CBT.CBT444.FILE077.PDS(DYNABLDL)\n//SYSPRINT DD SYSOUT=*\n//SYSUT2   DD DSN=SBGOLOB.DYNABLDL.PDS,DISP=(NEW,CATLG,DELETE),\n//         UNIT=SYSALLDA,VOL=SER=DATA02,SPACE=(TRK,(30,30,44),RLSE),\n//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=5600)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DYNABLDL": {"ttr": 6151, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x07o\\x01\\x02\\x07o\\t2ALAL\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-03-17T00:00:00", "modifydate": "2002-03-17T09:32:00", "lines": 16716, "newlines": 16716, "modlines": 0, "user": "SYZYGY1"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "DYNAMAS$": {"ttr": 12809, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x02\\x07\\x8f\\x01\\x02\\x07\\x8f\\x16T\\x01\\n\\x00y\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2002-03-19T00:00:00", "modifydate": "2002-03-19T16:54:00", "lines": 266, "newlines": 121, "modlines": 0, "user": "SYZYGY"}, "text": "THIS PROGRAM IS ORIGINALLY FROM FILE 400 OF THE CBT TAPE.  I HAVE\nMADE SOME MINOR CHANGES AND SET UP THE JCL SO THAT YOU CAN ASSEMBLE\nAND RUN THE PROGRAM WITH LITTLE PREVIOUS EXPERIENCE.  YOU WILL\nWANT TO CHANGE THE SOURCE PDS NAME AND THE LOAD LIBRARY NAMES\nIN THE JCL, AND VERY LITTLE ELSE IS REQUIRED TO USE THE PRODUCT.\n\nI HAVE ALSO ADDED A MODULE CALLED UNITMAP WHICH IS ALSO FROM THE CBT\nTAPE (FILE 301). I COPIED IT'S NECESSARY MACROS IN-LINE WITH THE\nSOURCE CODE TO MAKE IT EASIER TO WORK WITH.\n\nTHE INSTALLATION STEPS ARE VERY EASY:\n1) ASSEMBLE THE GENERIC MEMBER TO SOME LINKLIST LIBRARY\n2) ASSEMBLE THE DYNAMASK TO SOME LINKLIST LIBRARY\n3) ASSEMBLE THE UNITMAP MEMBER TO LINKLIST OR TSO COMMAND MODULE LIB\n4) COPY THE DYNAPROC MEMBER TO PROCLIB (CALL IT DYNAMASK OR ANYTHING\n5)                                      YOU WISH)\n6) COPY THE EDT00 MEMBER TO SYS1.PARMLIB (OR SOME OTHER LIBRARY - MAKE\n7)                                        SURE THE PROC MATCHES THE\n8)                                        LIBRARY YOU CHOOSE)\n9) MAKE THE CHANGES TO EDT00 TO MATCH WHAT YOU WANT TO DO\n        SEE THE INSTRUCTIONS BELOW FOR EXAMPLES OR LOOK AT\n        THE SAMPLE EDT00 MEMBER SUPPLIED\nA) START DYNAMASK (OR WHATEVER YOU CALLED THE PROC IN PROCLIB)\nB) YOU CAN EXECUTE THE UNITMAP MODULE TO LIST THE UNITNAME TABLE\nC) DO NOT NOT NOT ASSEMBLE THE VATUCB MEMBER IT CONTAINS AN ERROR\n      AND IT IS NOT NEEDED FOR PROPER FUNCTIONING ANYWAY\n\nSOME THINGS TO KEEP IN MIND:\n1) WHEN YOU WANT TO ADD A UNIT TO AN EXISTING UNITNAME (I.E ADD\n       VOLSER MVSWRK TO THE WORK UNITNAME, YOU NEED TO IDENTIFY ALL\n       OF THE CURRENT UNITS AS WELL.  FOR INSTANCE, ON THE HERC-390\n       TURNKEY SYSTEM, WORK IS SET UP AS UNITS 140-147 AND 240-247\n       IF YOU WANT TO ADD YOUR NEW UNIT (WHICH IS AT SAY X'123' YOU\n       WOULD CODE THE EDT00 LINE AS:\n       WORK MVSWRK,/140-147,/240-247\n   IF YOU WERE TO LEAVE OFF THE OLD UNITS, THEN YOU WOULD END UP\n   WITH A UNITNAME OF WORK THAT ONLY HAD ONE UNIT X'123' IN IT.\n\n   IT'S NOT A BIG DEAL BUT WORTH REMEMBERING.\n\n2) TRY TO RUN THE DYNAMASK MEMBER JUST AFTER IPL OR WHEN YOU DON'T HAVE\n     MUCH ELSE GOING ON.  IT CAN CAUSE HAVOK TO CHANGE UNITNAMES ON\n     RUNNING APPLICATIONS, IF YOU ARE RUNNING A JOB THAT IS IN STEP\n     30 AND YOU MODIFY THE UNITNAME FOR SOMETHING THAT IT WILL NEED\n     IN LATER STEPS, YOU COULD SCREW YOURSELF PRETTY WELL, SO (AS\n     ALWAYS)  BE CAREFUL\n\n3) THE UNITMAP MODULE IS A GOOD THING TO HAVE TO SEE BOTH BEFORE\n     AND AFTER YOU MAKE CHANGES TO THE GENERICS.  YOU CAN JUST\n     TYPE \"UNITMAP\" AND SEE EVERYTHING, OR YOU CAN TYPE\n     \"UNITMAP XXXXX\" WHERE \"XXXXX\" IS THE UNITNAME YOU WANT TO SEE\n\n4) THE DYNAMASK MEMBER HAS ASSEMBLY JCL WHICH USE A SYSPARM(NONXA)\n      DO NOT NOT NOT REMOVE THAT SYSPARM, BECAUSE IT WON'T ASSEMBLE\n      ON THE HERCULES SYSTEM WITHOUT THAT.\n\n5) READ THE INSTRUCTIONS BELOW, THEY ARE THE ORIGINAL ONES FROM\n   STEVE SMITH (THE ORIGINAL AUTHOR OF THE UTILITY):\n\n     INSTALLATION\n\n     DYNAMASK IS A SINGLE MODULE AND MUST BE LINK EDITED INTO\n     AN AUTHORIZED LIBRARY WITH ATTRIBUTES AC=1 RENT REUS REFR\n     ASSEMBLY USING ASMH AND XA MACRO LIBRARY WILL ALSO EXECUTE\n     IN NON XA (370 MODE)\n     FOR ASSEMBLY UNDER NON XA SYSTEMS USE SYSPARM(NONXA) TO\n     AVOIDE XA ONLY MACRO PARMS AND BSM INSTRUCTIONS\n     THERE IS ALSO A TEST MODE NOTED LATER IN THIS DOCUMENATION\n\n     DYNAMASK SPECIFICATIONS MUST BE PROVIDED IN A CONTROL\n     LIBRARY LIKE SYS1.PARMLIB\n\n     THE DYNAMASK JCL MUST PROVIDE A SYSIN TO THE CONTROL\n     LIBRARY AND MEMBER.  WHEN RUN AS A STARTED TASK A PROC\n     MEMBER MUST BE PROVIDE IN SYS1.PROCLIB,\n     A PARM VALUE MAY BE INCLUDED.  THE PARM VALUE IS PLACED\n     IN A WTO MESSAGE AND DISPLAYED AT THE END OF DYNAMASK\n     PROCESSING.  THIS IS USEFUL FOR SIGNALING INSTALLATION\n     WTO EXIT OR AUTOMATIC OPERATOR SUBSYSTEM\n     SAMPLE:\n\n     //DYNAMASK PROC M=EDTUPDTE,P='START IPL POSTPROCESS'\n     //DYNAMASK EXEC PGM=DYNAMASK,PARM=&P\n     //SYSIN DD DISP=SHR,DSN=SYS1.PARMLIB(&M.)\n\n    DYNAMASK CONTROL CARD FORMAT\n\n    STARTING IN COLLUME 1 THE UNIT NAME TO BE CHANGED OR ADDED\n    FOLLOWED BY A BLANK.\n\n    FOLLOWED BY VOLUME(S) AND/OR UNIT ADDRESS(ES) TO BE ASSIGNED\n    TO THIS UNIT NAME.  VOLUMES CAN BE SPECIFIED ONLY FOR DISK\n    DEVICES FOR UNIT NAMES OF DASD ONLY.\n\n    VOLUMES ARE OF THE FORM: ONE TO SIX CHARACTER VOLUME IDS.\n    LIKEWISE A MODEL VOLUME OF ONE TO FIVE CHARACTERS PLUS\n    AN ASTERISK WILL SELECT ALL VOLUMES THAT MATCH THE MODEL.\n\n    UNIT ADDRESS ARE OF THE FORM: SLASH (/) AS FIRST CHARACTER,\n    FOLLOWED BY THE 3 DIGIT HEXIDECIMAL UNIT ADDRESS.\n    LIKEWISE A MODEL 1 OR 2 DIGIT HEXIDECIMAL ADDRESS PLUS\n    AN ASTERISK WILL SELECT ALL UNITS THAT MATCH THE FIRST GIVEN\n    DIGITS. A RANGE OF UNITS MAY BE SPECIFIED AS FOLLOWS /CUU-CUU\n\n    IF MORE THAN ONE VOLUME OR UNIT ADDRESS IS NEEDED EACH IS\n    SEPARATED BY A COMMA.  IF MORE ENTRIES ARE REQUIRED THAN\n    CAN BE CONTAINED ON ONE CARD, THE CARD CAN BE CONTINUED BY\n    PLACEING A COMMA AFTER THE LAST ENTRY. THE NEXT CARD MUST\n    BE CONTINUED ON OR AFTER COLUME 2.\n\n    THE SPECIFIED UNIT NAME ASSIGNMENSTS NORMALLY REPLACE ALL\n    PREVIOUS ASSIGNMENTS.  HOWERER, IF A MINUS (-) PRECEDES\n    THE UNIT NAME, THE SPECIFIED UNIT.VOLUES ENTRIES WILL BE\n    EXCLUED FROM THE EXISTING ASSIGNMENTS FROM SYSGEN.\n\n    IF A PLUS (+) PRECEDES THE UNIT NAME, THE UNIT NAME IS\n    AN ASTERISK (*) IN COLUME 1 INDICATES A COMMENT CARD.\n    MARKED FOR VIO.\n     A COMMENT CARD CAN BE PLACED ANYWHERE.\n\n     SAMPLES:\n\n          SYSDA SYSDA*\n\n          SORT  SYSDA1,SYSDA2,\n          * COMMENT CARD, THE NEXT CARD IS CONTINUEATION OF PREVIOUS\n           SYSDA3,SYSDA4\n\n          -2400-3 /48E,/48F\n\n          TAPE1  /42*,/5*,/440-45F\n\n          +SYSVIO SYSDA1\n\n     IF THE SAME UNIT NAME IS SPECIFED MORE THAN ONCE, ONLY\n     THE FIRST IS USED.\n\n     ANY ERROR OR INVALID SPECIFICATION IN A UNIT NAME CAUSES\n    THAT UNIT NAME NOT TO BE UPDATED\n\n    ANY ERROR OR INVALID SPECIFICATION IN A UNIT ADDRESS OR\n    VOLUME WILL BE IGNORED AND THE UNIT NAME WILL BE UPDATED\n    WITH ANY CORRECT UNIT ADDRESSES AND/OR VOLUMES. MISSING\n    VOLUMES ARE IGNORED.\n\n    ALL UNCHANGED UNIT NAMES FROM THE SYSGEN ARE RETAINED.\n    ONLY UNIT NAMES TO BE CHANGED NEED BE SPECIFIED.\n\n    RESTRICTIONS\n\n    DYNAMASK DOES NOT UPDATE THE DEVICE NAME AND MASK TABLE\n    WHICH IS USED BY SOME MVS/370 IBM UTILITIES. A SEPERATE\n    PROGRAM IS AVAILABLE THAT WILL UPDATE THESE FROM THE\n    EDT WITH IS THE TABLE DYNAMASK UPDATES.\n\n    CURRENTLY, THERE IS NO ENCOMPASSING ENQUEUE NAME TO PROTECT\n    JOBES IN ALLOCATION WHEN THE EDT IS REPLACED.  DYNAMASK\n    SHOULD BE RUN ONLY WHEN THE SYSTEM IS IN A DRAINED STATE\n     OR RIGHT AFTER IPL.  MOST SHOPS INCLUDE A START DYNAMASK\n     COMMAND IN THE COMMND00 OF PARMLIB\n\n     THE 'CGA' SOFTWARE PRODUCT GROUP'S 'MSX' MUST RUN START AFTER\n     DYNAMASK.  TO FORCE SERIALATION WITH DYNAMASK, INCLUDE A\n     DD CARD FOR THE MSX TABLE DATASET IF YOU USE MSX.\n\n     LOGIC FLOW\n\n     DURING INITIZATION WORKING STORAGE IS UPTAINED AND CSA STORAGE\n     IS UPTAINED FOR THE NEW EDT (ELIGIBLE DIVICE TABLE). A LOAD\n     IS DONE FOR IEFEDTTB BUILD FROM SYSGEN AND USED FOR A MODEL.\n     FROM THE MODEL EDT AND INCORE CONTROL BLOCKS A DYNAMASK GROUP\n     UNIT CROSS REFERENCE TABLE (GXREF) IS BUILT.\n\n     DYNAMASK THEN READS THE SYSIN FILE FOR CONTROL CARD AND BUILDS\n     A DYNAMASK MODIFIED NAME TABLE (MNT) ASSIGNING A MASK BIT\n     EACH UNIT NAME AND MARKS THE MASK IN THE GXREF FOR ALL RELATED\n     DEVICE ADDRESS (EXPLICED OR VOLUME RELATED) FOR EACH UNIT NAME.\n    THE DEVICES REFERENCED IN THE GXREF CAN THEN BE REGROUPED BY\n    SORTING ON THE OLD GROUP NUMBER AND MASK IN THE GXREF.  THEN\n    NEW GROUP NUMBERS CAN BE ASSIGNED AND A NEW EDT CAN BE BUILD.\n    IN XA A NEW UCB POINTER LIST (UPL) IS BUILT IN FRONT OF THE\n    EDT JUST AFTER THE HEADER SECTION. THE FOLLOWING EDT SECTIONS\n    ARE BUILD IN ORDER: UCB INDEX SECTION, GROUP ID SECTION,\n    GROUP POINTER SECTION, GENERIC SECTION, GROUP LOOKUP SECTION,\n    AND LAST THE GROUP MASK SECTION.\n\n    THE COMPLETED EDT (AND IN XA THE UPT) POINTERS ARE UPDATED\n    IN THE JESCT. THEN THE OLD EDT IF IT WAS BUILT BY DYNAMASK\n    IS DELETED FROM STORAGE. THEN ANY USER SUPPLIED EXITS ARE\n    CALLED.\n\n    TEST MODE\n\n    TEST MODE CONTROLLED BY SYSPARM(TEST) OR SYSPARM(TESTXA).\n    ALSO A SECOND CSECT AFTER THE END CARD PROVIDE DUMP FORMATING\n    REQUIRES ASMH BATCH MODE FOR ASSEMBLY OR THE SECOND CSECT\n    COULD BE SEPERATED OUT FOR SEPERATE ASSEMBLY\n\n    TEST MODE PROVIDES FOR BUILDING A NEW EDT WITHOUT UPDATING\n    CURRENT EDT POINTERS.  IT ALSO DUMPS GEN, OLD, AND NEW EDTS,\n    ALSO PROVIDING A COMPARE DUMP OF OLD AND NEW EDTS.\n    IN TEST MODE APF AUTHORIZATION IS NOT NEEDED.\n\n    NOTES\n\n    ALL MESSAGES ARE OF THE FORM TSDXXX WHICH CAN BE EDITTED\n    TO LOCAL MESSAGE ID STANDARDS  (CURRENTLY DMSKXXI)\n    ::::::::::::::::::::::::::::::::::::::::::::::::::::\n          TO:      DYNAMASK USERS\n          FROM:    STEVEN SMITH\n                   SYSTEMS ARCHITECT\n                   TECHNICAL SERVICES  G12-99\n\n          DATE:    JUNE  14, 1990\n\n          SUBJECT: NEW DYNAMASK FOR XA\n\n          SEND INQUIRES TO:\n                   STEVEN D. SMITH   G12-99\n                   SECURITY PACIFIC AUTOMATION COMPANY\n                   611 NORTH BRAND\n                   GLENDALE, CA, 91203\n\n          OR PHONE: (818) 507-3014\n\n      THE ENCLOSED TAPE IS A IEBCOPY UNLOAD OF THE NEW DYNAMASK\n   AND RELATED PROGRAMS.\n   THE TAPE IS  NONLABELED AND HAS TWO  FILES,  BOTH IEBCOPY\n   UNLOADS OF THE SAME MEMBERS.  NO ADDITIONAL USER MACROS\n   ARE REQUIRED FOR THESE PROGRAMS.\n\n   MEMBERS:\n\n    $$DYNDOC     THIS MEMBER\n\n    DYNAMASK\n      DYNAMASK PROVIDES THE ABILITY TO DYNAMICALLY CHANGE AND ADD\n      TO THE UNIT NAMES DEFINED AT SYSGEN.   DYNAMASK OPTIONALLY\n      CAN BE GIVEN UNIT ADDRESSES OR VOLUMES AND THE UNIT NAMES\n      WILL BE ASSIGNED TO THE UNIT ADDRESSES THAT THE VOLUMES ARE\n      CURRENTLY MOUNTED.  IT CAN BE RUN AT ANY TIME THE SYSTEM\n      IS DAINED OF ALL ACTIVITY.  DYNAMASK RUNS AS AN OPERATOR\n      REQUESTED OR BATCH SUBMITTED UTILITY WHICH MAKES THE\n      NECESSARY CONTROL BLOCK CHANGES AND EXITS.  IT REQUIRES\n      MINIMUM RESOURCES AND EXECUTES IN A FEW SECONDS.\n      DYNAMASK SUPPORTS THE FOLLOWING RELEASES:\n      MVS3.8 - MVS/SP1.3, MVS/XA2.0 - 2.1.7\n\n      COMPLETE DOCUMENTATION IS CONTAINED IN THE COMMENTS AT THE\n      FRONT OF THE SOURCE\n\n\n    GENERIC\n      THIS IS A MVS/370 PROGRAM TO UPDATE THE DEVTMASK AND DEVTNAME\n      TABLES.  IT WILL BE CALLED BY DYNAMASK IF INCLUDED IN THE\n      LKED AND WILL BE BYPASSED IF IN A XA SYSTEM.\n      THIS PROGRAM WAS WRITTEN BY LOCKHEED CALIFORNIA.\n      THIS PROGRAM IS NOT SUPPORTED BY SECURITY PACIFIC AUTOMATION\n\n    VATUCB\n      THIS IS A PROGRAM TO UPDATE THE UCB'S FROM INFORMATION IN\n      A USER SUPPLIED VATLST.  THIS WILL RUN IN XA AND MVS/370 MODE.\n      IT WILL BE CALLED BY DYNAMASK IF INCLUDED IN THE LKED\n      THIS PROGRAM WAS WRITTEN BY LOCKHEED CALIFORNIA.\n      THIS PROGRAM IS NOT SUPPORTED BY SECURITY PACIFIC AUTOMATION\n      THIS PROGRAM WILL NOT WORK WITH ESA GENERIC VATLST ENTRIES\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DYNAMASK": {"ttr": 13060, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x01\\x02\\x07\\x9f\\x01\\x02\\x07\\x9f\\x009\\x0f'\\x0f'\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-03-20T00:00:00", "modifydate": "2002-03-20T00:39:00", "lines": 3879, "newlines": 3879, "modlines": 0, "user": "SYZYGY"}, "text": "./ ADD NAME=$$DYNDOC 8002-02078-02078-1654-00266-00121-00000-SYZYGY\nTHIS PROGRAM IS ORIGINALLY FROM FILE 400 OF THE CBT TAPE.  I HAVE\nMADE SOME MINOR CHANGES AND SET UP THE JCL SO THAT YOU CAN ASSEMBLE\nAND RUN THE PROGRAM WITH LITTLE PREVIOUS EXPERIENCE.  YOU WILL\nWANT TO CHANGE THE SOURCE PDS NAME AND THE LOAD LIBRARY NAMES\nIN THE JCL, AND VERY LITTLE ELSE IS REQUIRED TO USE THE PRODUCT.\n\nI HAVE ALSO ADDED A MODULE CALLED UNITMAP WHICH IS ALSO FROM THE CBT\nTAPE (FILE 301). I COPIED IT'S NECESSARY MACROS IN-LINE WITH THE\nSOURCE CODE TO MAKE IT EASIER TO WORK WITH.\n\nTHE INSTALLATION STEPS ARE VERY EASY:\n1) ASSEMBLE THE GENERIC MEMBER TO SOME LINKLIST LIBRARY\n2) ASSEMBLE THE DYNAMASK TO SOME LINKLIST LIBRARY\n3) ASSEMBLE THE UNITMAP MEMBER TO LINKLIST OR TSO COMMAND MODULE LIB\n4) COPY THE DYNAPROC MEMBER TO PROCLIB (CALL IT DYNAMASK OR ANYTHING\n5)                                      YOU WISH)\n6) COPY THE EDT00 MEMBER TO SYS1.PARMLIB (OR SOME OTHER LIBRARY - MAKE\n7)                                        SURE THE PROC MATCHES THE\n8)                                        LIBRARY YOU CHOOSE)\n9) MAKE THE CHANGES TO EDT00 TO MATCH WHAT YOU WANT TO DO\n        SEE THE INSTRUCTIONS BELOW FOR EXAMPLES OR LOOK AT\n        THE SAMPLE EDT00 MEMBER SUPPLIED\nA) START DYNAMASK (OR WHATEVER YOU CALLED THE PROC IN PROCLIB)\nB) YOU CAN EXECUTE THE UNITMAP MODULE TO LIST THE UNITNAME TABLE\nC) DO NOT NOT NOT ASSEMBLE THE VATUCB MEMBER IT CONTAINS AN ERROR\n      AND IT IS NOT NEEDED FOR PROPER FUNCTIONING ANYWAY\n\nSOME THINGS TO KEEP IN MIND:\n1) WHEN YOU WANT TO ADD A UNIT TO AN EXISTING UNITNAME (I.E ADD\n       VOLSER MVSWRK TO THE WORK UNITNAME, YOU NEED TO IDENTIFY ALL\n       OF THE CURRENT UNITS AS WELL.  FOR INSTANCE, ON THE HERC-390\n       TURNKEY SYSTEM, WORK IS SET UP AS UNITS 140-147 AND 240-247\n       IF YOU WANT TO ADD YOUR NEW UNIT (WHICH IS AT SAY X'123' YOU\n       WOULD CODE THE EDT00 LINE AS:\n       WORK MVSWRK,/140-147,/240-247\n   IF YOU WERE TO LEAVE OFF THE OLD UNITS, THEN YOU WOULD END UP\n   WITH A UNITNAME OF WORK THAT ONLY HAD ONE UNIT X'123' IN IT.\n\n   IT'S NOT A BIG DEAL BUT WORTH REMEMBERING.\n\n2) TRY TO RUN THE DYNAMASK MEMBER JUST AFTER IPL OR WHEN YOU DON'T HAVE\n     MUCH ELSE GOING ON.  IT CAN CAUSE HAVOK TO CHANGE UNITNAMES ON\n     RUNNING APPLICATIONS, IF YOU ARE RUNNING A JOB THAT IS IN STEP\n     30 AND YOU MODIFY THE UNITNAME FOR SOMETHING THAT IT WILL NEED\n     IN LATER STEPS, YOU COULD SCREW YOURSELF PRETTY WELL, SO (AS\n     ALWAYS)  BE CAREFUL\n\n3) THE UNITMAP MODULE IS A GOOD THING TO HAVE TO SEE BOTH BEFORE\n     AND AFTER YOU MAKE CHANGES TO THE GENERICS.  YOU CAN JUST\n     TYPE \"UNITMAP\" AND SEE EVERYTHING, OR YOU CAN TYPE\n     \"UNITMAP XXXXX\" WHERE \"XXXXX\" IS THE UNITNAME YOU WANT TO SEE\n\n4) THE DYNAMASK MEMBER HAS ASSEMBLY JCL WHICH USE A SYSPARM(NONXA)\n      DO NOT NOT NOT REMOVE THAT SYSPARM, BECAUSE IT WON'T ASSEMBLE\n      ON THE HERCULES SYSTEM WITHOUT THAT.\n\n5) READ THE INSTRUCTIONS BELOW, THEY ARE THE ORIGINAL ONES FROM\n   STEVE SMITH (THE ORIGINAL AUTHOR OF THE UTILITY):\n\n     INSTALLATION\n\n     DYNAMASK IS A SINGLE MODULE AND MUST BE LINK EDITED INTO\n     AN AUTHORIZED LIBRARY WITH ATTRIBUTES AC=1 RENT REUS REFR\n     ASSEMBLY USING ASMH AND XA MACRO LIBRARY WILL ALSO EXECUTE\n     IN NON XA (370 MODE)\n     FOR ASSEMBLY UNDER NON XA SYSTEMS USE SYSPARM(NONXA) TO\n     AVOIDE XA ONLY MACRO PARMS AND BSM INSTRUCTIONS\n     THERE IS ALSO A TEST MODE NOTED LATER IN THIS DOCUMENATION\n\n     DYNAMASK SPECIFICATIONS MUST BE PROVIDED IN A CONTROL\n     LIBRARY LIKE SYS1.PARMLIB\n\n     THE DYNAMASK JCL MUST PROVIDE A SYSIN TO THE CONTROL\n     LIBRARY AND MEMBER.  WHEN RUN AS A STARTED TASK A PROC\n     MEMBER MUST BE PROVIDE IN SYS1.PROCLIB,\n     A PARM VALUE MAY BE INCLUDED.  THE PARM VALUE IS PLACED\n     IN A WTO MESSAGE AND DISPLAYED AT THE END OF DYNAMASK\n     PROCESSING.  THIS IS USEFUL FOR SIGNALING INSTALLATION\n     WTO EXIT OR AUTOMATIC OPERATOR SUBSYSTEM\n     SAMPLE:\n\n     //DYNAMASK PROC M=EDTUPDTE,P='START IPL POSTPROCESS'\n     //DYNAMASK EXEC PGM=DYNAMASK,PARM=&P\n     //SYSIN DD DISP=SHR,DSN=SYS1.PARMLIB(&M.)\n\n    DYNAMASK CONTROL CARD FORMAT\n\n    STARTING IN COLLUME 1 THE UNIT NAME TO BE CHANGED OR ADDED\n    FOLLOWED BY A BLANK.\n\n    FOLLOWED BY VOLUME(S) AND/OR UNIT ADDRESS(ES) TO BE ASSIGNED\n    TO THIS UNIT NAME.  VOLUMES CAN BE SPECIFIED ONLY FOR DISK\n    DEVICES FOR UNIT NAMES OF DASD ONLY.\n\n    VOLUMES ARE OF THE FORM: ONE TO SIX CHARACTER VOLUME IDS.\n    LIKEWISE A MODEL VOLUME OF ONE TO FIVE CHARACTERS PLUS\n    AN ASTERISK WILL SELECT ALL VOLUMES THAT MATCH THE MODEL.\n\n    UNIT ADDRESS ARE OF THE FORM: SLASH (/) AS FIRST CHARACTER,\n    FOLLOWED BY THE 3 DIGIT HEXIDECIMAL UNIT ADDRESS.\n    LIKEWISE A MODEL 1 OR 2 DIGIT HEXIDECIMAL ADDRESS PLUS\n    AN ASTERISK WILL SELECT ALL UNITS THAT MATCH THE FIRST GIVEN\n    DIGITS. A RANGE OF UNITS MAY BE SPECIFIED AS FOLLOWS /CUU-CUU\n\n    IF MORE THAN ONE VOLUME OR UNIT ADDRESS IS NEEDED EACH IS\n    SEPARATED BY A COMMA.  IF MORE ENTRIES ARE REQUIRED THAN\n    CAN BE CONTAINED ON ONE CARD, THE CARD CAN BE CONTINUED BY\n    PLACEING A COMMA AFTER THE LAST ENTRY. THE NEXT CARD MUST\n    BE CONTINUED ON OR AFTER COLUME 2.\n\n    THE SPECIFIED UNIT NAME ASSIGNMENSTS NORMALLY REPLACE ALL\n    PREVIOUS ASSIGNMENTS.  HOWERER, IF A MINUS (-) PRECEDES\n    THE UNIT NAME, THE SPECIFIED UNIT.VOLUES ENTRIES WILL BE\n    EXCLUED FROM THE EXISTING ASSIGNMENTS FROM SYSGEN.\n\n    IF A PLUS (+) PRECEDES THE UNIT NAME, THE UNIT NAME IS\n    AN ASTERISK (*) IN COLUME 1 INDICATES A COMMENT CARD.\n    MARKED FOR VIO.\n     A COMMENT CARD CAN BE PLACED ANYWHERE.\n\n     SAMPLES:\n\n          SYSDA SYSDA*\n\n          SORT  SYSDA1,SYSDA2,\n          * COMMENT CARD, THE NEXT CARD IS CONTINUEATION OF PREVIOUS\n           SYSDA3,SYSDA4\n\n          -2400-3 /48E,/48F\n\n          TAPE1  /42*,/5*,/440-45F\n\n          +SYSVIO SYSDA1\n\n     IF THE SAME UNIT NAME IS SPECIFED MORE THAN ONCE, ONLY\n     THE FIRST IS USED.\n\n     ANY ERROR OR INVALID SPECIFICATION IN A UNIT NAME CAUSES\n    THAT UNIT NAME NOT TO BE UPDATED\n\n    ANY ERROR OR INVALID SPECIFICATION IN A UNIT ADDRESS OR\n    VOLUME WILL BE IGNORED AND THE UNIT NAME WILL BE UPDATED\n    WITH ANY CORRECT UNIT ADDRESSES AND/OR VOLUMES. MISSING\n    VOLUMES ARE IGNORED.\n\n    ALL UNCHANGED UNIT NAMES FROM THE SYSGEN ARE RETAINED.\n    ONLY UNIT NAMES TO BE CHANGED NEED BE SPECIFIED.\n\n    RESTRICTIONS\n\n    DYNAMASK DOES NOT UPDATE THE DEVICE NAME AND MASK TABLE\n    WHICH IS USED BY SOME MVS/370 IBM UTILITIES. A SEPERATE\n    PROGRAM IS AVAILABLE THAT WILL UPDATE THESE FROM THE\n    EDT WITH IS THE TABLE DYNAMASK UPDATES.\n\n    CURRENTLY, THERE IS NO ENCOMPASSING ENQUEUE NAME TO PROTECT\n    JOBES IN ALLOCATION WHEN THE EDT IS REPLACED.  DYNAMASK\n    SHOULD BE RUN ONLY WHEN THE SYSTEM IS IN A DRAINED STATE\n     OR RIGHT AFTER IPL.  MOST SHOPS INCLUDE A START DYNAMASK\n     COMMAND IN THE COMMND00 OF PARMLIB\n\n     THE 'CGA' SOFTWARE PRODUCT GROUP'S 'MSX' MUST RUN START AFTER\n     DYNAMASK.  TO FORCE SERIALATION WITH DYNAMASK, INCLUDE A\n     DD CARD FOR THE MSX TABLE DATASET IF YOU USE MSX.\n\n     LOGIC FLOW\n\n     DURING INITIZATION WORKING STORAGE IS UPTAINED AND CSA STORAGE\n     IS UPTAINED FOR THE NEW EDT (ELIGIBLE DIVICE TABLE). A LOAD\n     IS DONE FOR IEFEDTTB BUILD FROM SYSGEN AND USED FOR A MODEL.\n     FROM THE MODEL EDT AND INCORE CONTROL BLOCKS A DYNAMASK GROUP\n     UNIT CROSS REFERENCE TABLE (GXREF) IS BUILT.\n\n     DYNAMASK THEN READS THE SYSIN FILE FOR CONTROL CARD AND BUILDS\n     A DYNAMASK MODIFIED NAME TABLE (MNT) ASSIGNING A MASK BIT\n     EACH UNIT NAME AND MARKS THE MASK IN THE GXREF FOR ALL RELATED\n     DEVICE ADDRESS (EXPLICED OR VOLUME RELATED) FOR EACH UNIT NAME.\n    THE DEVICES REFERENCED IN THE GXREF CAN THEN BE REGROUPED BY\n    SORTING ON THE OLD GROUP NUMBER AND MASK IN THE GXREF.  THEN\n    NEW GROUP NUMBERS CAN BE ASSIGNED AND A NEW EDT CAN BE BUILD.\n    IN XA A NEW UCB POINTER LIST (UPL) IS BUILT IN FRONT OF THE\n    EDT JUST AFTER THE HEADER SECTION. THE FOLLOWING EDT SECTIONS\n    ARE BUILD IN ORDER: UCB INDEX SECTION, GROUP ID SECTION,\n    GROUP POINTER SECTION, GENERIC SECTION, GROUP LOOKUP SECTION,\n    AND LAST THE GROUP MASK SECTION.\n\n    THE COMPLETED EDT (AND IN XA THE UPT) POINTERS ARE UPDATED\n    IN THE JESCT. THEN THE OLD EDT IF IT WAS BUILT BY DYNAMASK\n    IS DELETED FROM STORAGE. THEN ANY USER SUPPLIED EXITS ARE\n    CALLED.\n\n    TEST MODE\n\n    TEST MODE CONTROLLED BY SYSPARM(TEST) OR SYSPARM(TESTXA).\n    ALSO A SECOND CSECT AFTER THE END CARD PROVIDE DUMP FORMATING\n    REQUIRES ASMH BATCH MODE FOR ASSEMBLY OR THE SECOND CSECT\n    COULD BE SEPERATED OUT FOR SEPERATE ASSEMBLY\n\n    TEST MODE PROVIDES FOR BUILDING A NEW EDT WITHOUT UPDATING\n    CURRENT EDT POINTERS.  IT ALSO DUMPS GEN, OLD, AND NEW EDTS,\n    ALSO PROVIDING A COMPARE DUMP OF OLD AND NEW EDTS.\n    IN TEST MODE APF AUTHORIZATION IS NOT NEEDED.\n\n    NOTES\n\n    ALL MESSAGES ARE OF THE FORM TSDXXX WHICH CAN BE EDITTED\n    TO LOCAL MESSAGE ID STANDARDS  (CURRENTLY DMSKXXI)\n    ::::::::::::::::::::::::::::::::::::::::::::::::::::\n          TO:      DYNAMASK USERS\n          FROM:    STEVEN SMITH\n                   SYSTEMS ARCHITECT\n                   TECHNICAL SERVICES  G12-99\n\n          DATE:    JUNE  14, 1990\n\n          SUBJECT: NEW DYNAMASK FOR XA\n\n          SEND INQUIRES TO:\n                   STEVEN D. SMITH   G12-99\n                   SECURITY PACIFIC AUTOMATION COMPANY\n                   611 NORTH BRAND\n                   GLENDALE, CA, 91203\n\n          OR PHONE: (818) 507-3014\n\n      THE ENCLOSED TAPE IS A IEBCOPY UNLOAD OF THE NEW DYNAMASK\n   AND RELATED PROGRAMS.\n   THE TAPE IS  NONLABELED AND HAS TWO  FILES,  BOTH IEBCOPY\n   UNLOADS OF THE SAME MEMBERS.  NO ADDITIONAL USER MACROS\n   ARE REQUIRED FOR THESE PROGRAMS.\n\n   MEMBERS:\n\n    $$DYNDOC     THIS MEMBER\n\n    DYNAMASK\n      DYNAMASK PROVIDES THE ABILITY TO DYNAMICALLY CHANGE AND ADD\n      TO THE UNIT NAMES DEFINED AT SYSGEN.   DYNAMASK OPTIONALLY\n      CAN BE GIVEN UNIT ADDRESSES OR VOLUMES AND THE UNIT NAMES\n      WILL BE ASSIGNED TO THE UNIT ADDRESSES THAT THE VOLUMES ARE\n      CURRENTLY MOUNTED.  IT CAN BE RUN AT ANY TIME THE SYSTEM\n      IS DAINED OF ALL ACTIVITY.  DYNAMASK RUNS AS AN OPERATOR\n      REQUESTED OR BATCH SUBMITTED UTILITY WHICH MAKES THE\n      NECESSARY CONTROL BLOCK CHANGES AND EXITS.  IT REQUIRES\n      MINIMUM RESOURCES AND EXECUTES IN A FEW SECONDS.\n      DYNAMASK SUPPORTS THE FOLLOWING RELEASES:\n      MVS3.8 - MVS/SP1.3, MVS/XA2.0 - 2.1.7\n\n      COMPLETE DOCUMENTATION IS CONTAINED IN THE COMMENTS AT THE\n      FRONT OF THE SOURCE\n\n\n    GENERIC\n      THIS IS A MVS/370 PROGRAM TO UPDATE THE DEVTMASK AND DEVTNAME\n      TABLES.  IT WILL BE CALLED BY DYNAMASK IF INCLUDED IN THE\n      LKED AND WILL BE BYPASSED IF IN A XA SYSTEM.\n      THIS PROGRAM WAS WRITTEN BY LOCKHEED CALIFORNIA.\n      THIS PROGRAM IS NOT SUPPORTED BY SECURITY PACIFIC AUTOMATION\n\n    VATUCB\n      THIS IS A PROGRAM TO UPDATE THE UCB'S FROM INFORMATION IN\n      A USER SUPPLIED VATLST.  THIS WILL RUN IN XA AND MVS/370 MODE.\n      IT WILL BE CALLED BY DYNAMASK IF INCLUDED IN THE LKED\n      THIS PROGRAM WAS WRITTEN BY LOCKHEED CALIFORNIA.\n      THIS PROGRAM IS NOT SUPPORTED BY SECURITY PACIFIC AUTOMATION\n      THIS PROGRAM WILL NOT WORK WITH ESA GENERIC VATLST ENTRIES\n./ ADD NAME=DYNAMASK 8001-02078-02078-1654-02323-02323-00000-SYZYGY\n//DYNAMASK  JOB (BHWA00),'SYSTEMS*BRIAN',MSGCLASS=A,\n//     CLASS=A,NOTIFY=SYZYGY\n//*********************************************************************\n//* YOU MUST USE SYSPARM(NONXA) TO WORK ON HERCULES-390 MVS 3.8J SYSTEM\n//*********************************************************************\n//ASM      EXEC  PGM=IFOX00,REGION=500K,\n//         PARM='OBJECT,NODECK,XREF,RENT,SYSPARM(NONXA)'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=SYSDA\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=SYSDA\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=SYSDA\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=SYSDA,FREE=CLOSE,\n//             SPACE=(TRK,(1,1),RLSE)\n//SYSIN    DD  *\nDYNAMASK TITLE 'PROGRAM TO MODIFY ELIGIBLE DEVICE TABLE'\n***********************************************************************\n*    CHANGE DATE: MARCH 2002   BRIAN WESTERMAN                        *\n*                 FOR HERCULES-390 MVS 3.8J                           *\n*                 ASSEMBLE AND LINK THE GENERIC AND DYNAMASK PROGRAMS *\n*                 ONLY, NOT THE VATUCB PROGRAM                        *\n*                                                                     *\n*    FOR INFORMATION CONTACT:                                         *\n*        BRIAN WESTERMAN  (BRIAN_WESTERMAN@SYZYGYINC.COM)             *\n*        SYZYGY INCORPORATED                                          *\n*        1381 KILDAIRE FARM ROAD - 326  (OR) 897 OAK PARK BLVD - 500  *\n*        CARY, NC 27511-5525                 PISMO BEACH, CA 93449    *\n*        (800) 767-2244-PHONE  (800) 366-4082-FAX                     *\n*                                                                     *\n*                                                                     *\n*    CHANGE DATE: NOVEMBER 1990                                       *\n*                                                                     *\n*    NONE ESA VERSION (FOR MVS/370 AND XA UP TO 2.1.7)                *\n*                                                                     *\n*    PROGRAM TO MODIFY THE ELIGIBLE DEVICES TABLE BASED ON            *\n*    MOUNTED VOLUMES (DASD ONLY) OR ADDRESS CHANGE LIST               *\n*                                                                     *\n*    WRITTEN BY STEVE SMITH, CIRCA 1975,                              *\n*       FOR SECURITY PACIFIC NATIONAL BANK                            *\n*                                                                     *\n*    MODIFIED FOR SU 64 BY DICK HINTON AND DOUG MERCER, JUNE 1980,    *\n*       FOR THE LOCKHEED-CALIFORNIA COMPANY                           *\n*                                                                     *\n*    MODIFIED BY STEVE SMITH FEB 1981 TO INCLUDE 1976 MODS            *\n*       FOR SECURITY PACIFIC NATIONAL BANK                            *\n*                                                                     *\n*    MODIFIED TO USE DSECTS BY DOUG MERCER, JUNE 1983,                *\n*       FOR THE LOCKHEED-CALIFORNIA COMPANY                           *\n*                                                                     *\n*    MODIFIED FOR XA ASSEMBLY BY DOUG MERCER, JUNE 1983,              *\n*       FOR THE LOCKHEED-CALIFORNIA COMPANY. THE EXPECTED             *\n*       VALUES IN SYSPARM ARE SYSPARM() FOR MVS/370,                  *\n*       SYSPARM(TEST) FOR MVS/370 WITH TEST CODE (DOES NOT            *\n*         MODIFY THE REAL EDT OR RUN AUTHORIZED)                      *\n*       SYSPARM(XA) FOR MVS/XA,                                       *\n*       SYSPARM(TESTXA) FOR MVS/XA WITH TEST CODE (DOES NOT           *\n*         MODIFY THE REAL EDT OR RUN AUTHORIZED)                      *\n*                                                                     *\n*    MODIFIED FOR XA BY DOUG MERCER, NOVEMBER 1983,                   *\n*       FOR THE LOCKHEED-CALIFORNIA COMPANY. THE UCB LOOKUP           *\n*       TABLE HAS DISAPPEARED AND VARIOUS CHANGES HAVE BEEN           *\n*       TO THE EDT. THE UCB HAS ALSO CHANGED BUT NOT IN ANY           *\n*       MANNER AFFECTING DYNAMASK.                                    *\n*                                                                     *\n*    MODIFIED BY STEVE SMITH JAN 1984 FOR XA                          *\n*       FOR SECURITY PACIFIC NATIONAL BANK                            *\n*       SYSPARM(XA) REPLACED BY CONDITIONAL EXECUTION                 *\n*                   BY TESTING FOR THE MVSE BIT IN CVT                *\n*                                                                     *\n*    MODIFIED BY STEVE SMITH AUG 1984 FOR MVS/370 AND XA              *\n*       FOR SECURITY PACIFIC NATIONAL BANK                            *\n*       SYSPARM(NONXA) OR SYSPARM(TEST) ALLOW ASSEMBLY                *\n*                   WITHOUT XA MACLIBS                                *\n*       PROVIDE FREEMAIN FOR XA EDT EXECESS MEMORY AND OLD EDT        *\n*       BUILD EDT REPLACED UNIT NAMES IN ORGINAL ORDER                *\n*                                                                     *\n*    MODIFIED BY STEVE SMITH APR 1985 FOR MVS/370 AND XA              *\n*       AT  SECURITY PACIFIC NATIONAL BANK                            *\n*       TO INCLUDE FIX SUPPLIED BY BRAIN COMPTON AND DWIGHT CLARKE    *\n*       OF LITTON COMPUTER SEVICES: LOGIC ERROR FOR SPECIFIC UNIT     *\n*       WHERE INDEX REGISTER WAS OMITTED IN GROUP BIT MASK UPDATE     *\n*                                                                     *\n*    MODIFIED BY STEVE SMITH SEP 1985 FOR MVS/370 AND XA              *\n*       AT  SECURITY PACIFIC NATIONAL BANK                            *\n*       ADD AIF CONDINTIONAL ASM TO BYPASS BSM INSTRUCTIONS           *\n*       IN NONXA ONLY SHOPS.                                          *\n*                                                                     *\n*    MODIFIED BY STEVE SMITH APR 1986 FOR MVS/370 AND XA              *\n*       FOR SECURITY PACIFIC NATIONAL BANK                            *\n*       TO ALLOW FOR COMMENT CARD IN CONTROL FILE                     *\n*       TO ALLOW MODEL VOLUME OR UNIT ADDRESS                         *\n*       (I.E.  TSODA*  /18* )                                         *\n*                                                                     *\n*    MODIFIED BY STEVE SMITH JUN 1986 FOR MVS/370 AND XA              *\n*       FOR SECURITY PACIFIC NATIONAL BANK                            *\n*       TO ALLOW FOR PARM VALUE TO BE PLACE IN MESSAGE                *\n*       USEFUL FOR SIGNALLING WTO EXITS AND AUTOMATIC                 *\n*       OPERATOR SUBSYSTEMS                                           *\n*                                                                     *\n*    MODIFIED BY STEVE SMITH NOV 1986 FOR MVS/370 AND XA              *\n*       FOR SECURITY PACIFIC NATIONAL BANK                            *\n*       TO BYPASS XA CODE IN TEST (NONXA) MODE                        *\n*                                                                     *\n*    MODIFIED BY STEVE SMITH MAR 1987 FOR MVS/370 AND XA              *\n*       FOR SECURITY PACIFIC NATIONAL BANK                            *\n*       TO ALLOW CUU RANGE SPECIFICATION AND ONE CHAR MODEL CUU       *\n*       FIXED 0C4 IN TEST COMPARE ROUTINE                             *\n*                                                                     *\n*    MODIFIED BY STEVE SMITH MAR 1987                                 *\n*       FOR SECURITY PACIFIC NATIONAL BANK                            *\n*       BYPASS LOAD OF EDT.  USE NIP GENERATED EDT IN JESCT.          *\n*       WILL USE SYSGEN EDT IN JESCT                                  *\n*       PASS GENERATED EDT IN HEADER FOR USE BY LATER EXECUTIONS      *\n*       DO ENQ BEFORE UPDATING JESCT WITH EDT AND UPT                 *\n*                                                                     *\n*    MODIFIED BY STEVE SMITH NOV 1990                                 *\n*       PROVIDE FOR OPTION BITS TO BE TURNED OFF IN DEVTYPE           *\n*       VALUE FOR SEVERAL DEVICE CLASSES                              *\n*                                                                     *\n*     ABSTRACT                                                        *\n*                                                                     *\n*     DYNAMASK PROVIDES THE ABILITY TO DYNAMICALLY CHANGE AND ADD     *\n*     TO THE UNIT NAMES DEFINED AT SYSGEN.   DYNAMASK OPTIONALLY      *\n*     CAN BE GIVEN UNIT ADDRESSES OR VOLUMES AND THE UNIT NAMES       *\n*     WILL BE ASSIGNED TO THE UNIT ADDRESSES THAT THE VOLUMES ARE     *\n*     CURRENTLY MOUNTED.  IT CAN BE RUN AT ANY TIME THE SYSTEM        *\n*     IS DAINED OF ALL ACTIVITY.  DYNAMASK RUNS AS AN OPERATOR        *\n*     REQUESTED OR BATCH SUBMITTED UTILITY WHICH MAKES THE            *\n*     NECESSARY CONTROL BLOCK CHANGES AND EXITS.  IT REQUIRES         *\n*     MINIMUM RESOURCES AND EXECUTES IN A FEW SECONDS.                *\n*                                                                     *\n*     DYNAMASK SUPPORTS THE FOLLOWING RELEASES:                       *\n*                                                                     *\n*     MVS 3.7 WITH SU64, MVS3.8 - MVS/SP1.3.6, MVS/XA2.0 - 2.1.7      *\n*                                                                     *\n*     INQUIRES:                                                       *\n*                                                                     *\n*     SEND INQUIRES TO:                                               *\n*              STEVEN D. SMITH   G12-99                               *\n*              SECURITY PACIFIC NATIONAL BANK                         *\n*              611 NORTH BRAND                                        *\n*              GLENDALE, CA, 91203                                    *\n*                                                                     *\n*     OR PHONE: (818) 507-3014                                        *\n*                                                                     *\n*                                                                     *\n*     INSTALLATION                                                    *\n*                                                                     *\n*     DYNAMASK IS A SINGLE MODULE AND MUST BE LINK EDITED INTO        *\n*     AN AUTHORIZED LIBRARY WITH ATTRIBUTES AC=1 RENT REUS REFR       *\n*     ASSEMBLY USING ASMH AND XA MACRO LIBRARY WILL ALSO EXECUTE      *\n*     IN NON XA (370 MODE)                                            *\n*     FOR ASSEMBLY UNDER NON XA SYSTEMS USE SYSPARM(NONXA) TO         *\n*     AVOIDE XA ONLY MACRO PARMS AND BSM INSTRUCTIONS                 *\n*     THERE IS ALSO A TEST MODE NOTED LATER IN THIS DOCUMENATION      *\n*                                                                     *\n*     DYNAMASK SPECIFICATIONS MUST BE PROVIDED IN A CONTROL           *\n*     LIBRARY LIKE SYS1.PARMLIB                                       *\n*                                                                     *\n*     THE DYNAMASK JCL MUST PROVIDE A SYSIN TO THE CONTROL            *\n*     LIBRARY AND MEMBER.  WHEN RUN AS A STARTED TASK A PROC          *\n*     MEMBER MUST BE PROVIDE IN SYS1.PROCLIB,                         *\n*     A PARM VALUE MAY BE INCLUDED.  THE PARM VALUE IS PLACED         *\n*     IN A WTO MESSAGE AND DISPLAYED AT THE END OF DYNAMASK           *\n*     PROCESSING.  THIS IS USEFUL FOR SIGNALING INSTALLATION          *\n*     WTO EXIT OR AUTOMATIC OPERATOR SUBSYSTEM                        *\n*     SAMPLE:                                                         *\n*                                                                     *\n*      //DYNAMASK PROC M=EDTUPDTE,P='START IPL POSTPROCESS'           *\n*      //DYNAMASK EXEC PGM=DYNAMASK,PARM=&P                           *\n*      //SYSIN DD DISP=SHR,DSN=SYS1.PARMLIB(&M.)                      *\n*                                                                     *\n*     DYNAMASK CONTROL CARD FORMAT                                    *\n*                                                                     *\n*     STARTING IN COLLUME 1 THE UNIT NAME TO BE CHANGED OR ADDED      *\n*     FOLLOWED BY A BLANK.                                            *\n*                                                                     *\n*     FOLLOWED BY VOLUME(S) AND/OR UNIT ADDRESS(ES) TO BE ASSIGNED    *\n*     TO THIS UNIT NAME.  VOLUMES CAN BE SPECIFIED ONLY FOR DISK      *\n*     DEVICES FOR UNIT NAMES OF DASD ONLY.                            *\n*                                                                     *\n*     VOLUMES ARE OF THE FORM: ONE TO SIX CHARACTER VOLUME IDS.       *\n*     LIKEWISE A MODEL VOLUME OF ONE TO FIVE CHARACTERS PLUS          *\n*     AN ASTERISK WILL SELECT ALL VOLUMES THAT MATCH THE MODEL.       *\n*                                                                     *\n*     UNIT ADDRESS ARE OF THE FORM: SLASH (/) AS FIRST CHARACTER,     *\n*     FOLLOWED BY THE 3 DIGIT HEXIDECIMAL UNIT ADDRESS.               *\n*     LIKEWISE A MODEL 1 OR 2 DIGIT HEXIDECIMAL ADDRESS PLUS          *\n*     AN ASTERISK WILL SELECT ALL UNITS THAT MATCH THE FIRST GIVEN    *\n*     DIGITS. A RANGE OF UNITS MAY BE SPECIFIED AS FOLLOWS /CUU-CUU   *\n*                                                                     *\n*                                                                     *\n*     IF MORE THAN ONE VOLUME OR UNIT ADDRESS IS NEEDED EACH IS       *\n*     SEPARATED BY A COMMA.  IF MORE ENTRIES ARE REQUIRED THAN        *\n*     CAN BE CONTAINED ON ONE CARD, THE CARD CAN BE CONTINUED BY      *\n*     PLACEING A COMMA AFTER THE LAST ENTRY. THE NEXT CARD MUST       *\n*     BE CONTINUED ON OR AFTER COLUME 2.                              *\n*                                                                     *\n*     THE SPECIFIED UNIT NAME ASSIGNMENSTS NORMALLY REPLACE ALL       *\n*     PREVIOUS ASSIGNMENTS.  HOWERER, IF A MINUS (-) PRECEDES         *\n*     THE UNIT NAME, THE SPECIFIED UNIT.VOLUES ENTRIES WILL BE        *\n*     EXCLUED FROM THE EXISTING ASSIGNMENTS FROM SYSGEN.              *\n*                                                                     *\n*     IF A PLUS (+) PRECEDES THE UNIT NAME, THE UNIT NAME IS          *\n*     MARKED FOR VIO.                                                 *\n*                                                                     *\n*     AN ASTERISK (*) IN COLUME 1 INDICATES A COMMENT CARD.           *\n*     A COMMENT CARD CAN BE PLACED ANYWHERE.                          *\n*                                                                     *\n*     SAMPLES:                                                        *\n*                                                                     *\n*          SYSDA SYSDA*                                               *\n*                                                                     *\n*          SORT  SYSDA1,SYSDA2,                                       *\n*          * COMMENT CARD, THE NEXT CARD IS CONTINUEATION OF PREVIOUS *\n*           SYSDA3,SYSDA4                                             *\n*                                                                     *\n*          -2400-3 /48E,/48F                                          *\n*                                                                     *\n*          TAPE1  /42*,/5*,/440-45F                                   *\n*                                                                     *\n*          +SYSVIO SYSDA1                                             *\n*                                                                     *\n*     IF THE SAME UNIT NAME IS SPECIFED MORE THAN ONCE, ONLY          *\n*     THE FIRST IS USED.                                              *\n*                                                                     *\n*     ANY ERROR OR INVALID SPECIFICATION IN A UNIT NAME CAUSES        *\n*     THAT UNIT NAME NOT TO BE UPDATED                                *\n*                                                                     *\n*     ANY ERROR OR INVALID SPECIFICATION IN A UNIT ADDRESS OR         *\n*     VOLUME WILL BE IGNORED AND THE UNIT NAME WILL BE UPDATED        *\n*     WITH ANY CORRECT UNIT ADDRESSES AND/OR VOLUMES. MISSING         *\n*     VOLUMES ARE IGNORED.                                            *\n*                                                                     *\n*     ALL UNCHANGED UNIT NAMES FROM THE SYSGEN ARE RETAINED.          *\n*     ONLY UNIT NAMES TO BE CHANGED NEED BE SPECIFIED.                *\n*                                                                     *\n*     RESTRICTIONS                                                    *\n*                                                                     *\n*     DYNAMASK DOES NOT UPDATE THE DEVICE NAME AND MASK TABLE         *\n*     WHICH IS USED BY SOME MVS/370 IBM UTILITIES. A SEPERATE         *\n*     PROGRAM IS AVAILABLE THAT WILL UPDATE THESE FROM THE            *\n*     EDT WITH IS THE TABLE DYNAMASK UPDATES.                         *\n*                                                                     *\n*     CURRENTLY, THERE IS NO ENCOMPASSING ENQUEUE NAME TO PROTECT     *\n*     JOBES IN ALLOCATION WHEN THE EDT IS REPLACED.  DYNAMASK         *\n*     SHOULD BE RUN ONLY WHEN THE SYSTEM IS IN A DRAINED STATE        *\n*     OR RIGHT AFTER IPL.  MOST SHOPS INCLUDE A START DYNAMASK        *\n*     COMMAND IN THE COMMND00 OF PARMLIB                              *\n*                                                                     *\n*     THE 'CGA' SOFTWARE PRODUCT GROUP'S 'MSX' MUST RUN START AFTER   *\n*     DYNAMASK.  TO FORCE SERIALATION WITH DYNAMASK, INCLUDE A        *\n*     DD CARD FOR THE MSX TABLE DATASET IF YOU USE MSX.               *\n*                                                                     *\n*     LOGIC FLOW                                                      *\n*                                                                     *\n*     DURING INITIZATION WORKING STORAGE IS UPTAINED AND CSA STORAGE  *\n*     IS UPTAINED FOR THE NEW EDT (ELIGIBLE DIVICE TABLE). A LOAD     *\n*     IS DONE FOR IEFEDTTB BUILD FROM SYSGEN AND USED FOR A MODEL.    *\n*     FROM THE MODEL EDT AND INCORE CONTROL BLOCKS A DYNAMASK GROUP   *\n*     UNIT CROSS REFERENCE TABLE (GXREF) IS BUILT.                    *\n*                                                                     *\n*     DYNAMASK THEN READS THE SYSIN FILE FOR CONTROL CARD AND BUILDS  *\n*     A DYNAMASK MODIFIED NAME TABLE (MNT) ASSIGNING A MASK BIT       *\n*     EACH UNIT NAME AND MARKS THE MASK IN THE GXREF FOR ALL RELATED  *\n*     DEVICE ADDRESS (EXPLICED OR VOLUME RELATED) FOR EACH UNIT NAME. *\n*                                                                     *\n*     THE DEVICES REFERENCED IN THE GXREF CAN THEN BE REGROUPED BY    *\n*     SORTING ON THE OLD GROUP NUMBER AND MASK IN THE GXREF.  THEN    *\n*     NEW GROUP NUMBERS CAN BE ASSIGNED AND A NEW EDT CAN BE BUILD.   *\n*     IN XA A NEW UCB POINTER LIST (UPL) IS BUILT IN FRONT OF THE     *\n*     EDT JUST AFTER THE HEADER SECTION. THE FOLLOWING EDT SECTIONS   *\n*     ARE BUILD IN ORDER: UCB INDEX SECTION, GROUP ID SECTION,        *\n*     GROUP POINTER SECTION, GENERIC SECTION, GROUP LOOKUP SECTION,   *\n*     AND LAST THE GROUP MASK SECTION.                                *\n*                                                                     *\n*     THE COMPLETED EDT (AND IN XA THE UPT) POINTERS ARE UPDATED      *\n*     IN THE JESCT. THEN THE OLD EDT IF IT WAS BUILT BY DYNAMASK      *\n*     IS DELETED FROM STORAGE. THEN ANY USER SUPPLIED EXITS ARE       *\n*     CALLED.                                                         *\n*                                                                     *\n*     TEST MODE                                                       *\n*                                                                     *\n*     TEST MODE CONTROLLED BY SYSPARM(TEST) OR SYSPARM(TESTXA).       *\n*     ALSO A SECOND CSECT AFTER THE END CARD PROVIDE DUMP FORMATING   *\n*     REQUIRES ASMH BATCH MODE FOR ASSEMBLY OR THE SECOND CSECT       *\n*     COULD BE SEPERATED OUT FOR SEPERATE ASSEMBLY                    *\n*                                                                     *\n*     TEST MODE PROVIDES FOR BUILDING A NEW EDT WITHOUT UPDATING      *\n*     CURRENT EDT POINTERS.  IT ALSO DUMPS GEN, OLD, AND NEW EDTS,    *\n*     ALSO PROVIDING A COMPARE DUMP OF OLD AND NEW EDTS.              *\n*     IN TEST MODE APF AUTHORIZATION IS NOT NEEDED.                   *\n*                                                                     *\n*     NOTES                                                           *\n*                                                                     *\n*     ALL MESSAGES ARE OF THE FORM TSDXXX WHICH CAN BE EDITTED        *\n*     TO LOCAL MESSAGE ID STANDARDS                                   *\n*                                                                     *\n*    ATTRIBUTES - REENTRANT                                           *\n*    TAB SETTINGS - 10 16 36 41 72                                    *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n         SPACE 3                                               DM JUN83\n         PRINT OFF                                             DM JUN83\n         MACRO ,                                               DM JUN83\n         EDT   &TYPE=SP                                        DM NOV83\n.* WRITTEN BY DOUG MERCER, JUNE 1983, FOR THE LOCKHEED-CALIFORNIA CO.\n.* CHANGED BY DOUG MERCER, NOVEMBER 1983, FOR XA DIFFERENCES   DM NOV83\n.* CHANGED BY STEVE SMITH, JANUARY  1984, FOR XA DIFFERENCES   SS JAN84\nEDT      DSECT ,                   ELIGIBLE DEVICES TABLE      DM JUN83\nEDTLKUP  DS    A                   POINTER TO LOOK-UP SECTION  DM JUN83\nEDTGNRC  DS    A                   POINTER TO GENERIC SECTION  DM JUN83\nEDTGRP   DS    A                   POINTER TO GROUP SECTION    DM JUN83\nEDTUCB   DS    A                   POINTER TO UCB SECTION      DM JUN83\nEDTMSK   DS    A                   POINTER TO MASK SECTION     DM JUN83\nEDTGRPT  DS    A                   POINTER TO GROUP POINTERS   DM JUN83\nEDTPREF  DS    A                   POINTER TO PREFERENCE TABLE DM JUN83\nEDTCREAT DS    CL8                 EDT CREATION ID             DM JUN83\nEDTDATE  DS    CL8                   CREATION DATE (MM/DD/YY)  DM JUN83\nEDTTIME  DS    CL5                     TIME (HH.MM)            DM JUN83\n         DS    XL3                                             DM JUN83\nEDTHDRL  EQU   *-EDT               LENGTH OF THE HEADER        DM JUN83\nEDTNAME  DS    CL3                   EDT NAME                  DM NOV83\nEDTLEVEL DS    C                     LEVEL                     DM NOV83\nEDTHDRLX EQU   *-EDT               LENGTH OF THE HEADER        DM JUN83\n         SPACE 2                                               DM JUN83\n* EACH OF THE FOLLOWING SECTIONS IS PREFIXED BY                DM JUN83\n*   TWO WORDS - THE FIRST WORD HAS THE NUMBER OF               DM JUN83\n*   ENTRIES IN THE SECTION, THE SECOND WORD HAS THE            DM JUN83\n*   NUMBER OF BYTES IN EACH ENTRY                              DM JUN83\n         SPACE ,                                               DM JUN83\nLKPSECT  DSECT ,                   LOOK-UP SECTION             DM JUN83\nLKPNAME  DS    CL8                 UNITNAME                    DM JUN83\nLKPDEVT  DS    XL4                 DEVICE TYPE (AS IN CATALOG) DM JUN83\nLKPMSKPT DS    A                   POINTER TO MASK ENTRY       DM JUN83\nLKPGNRC# DS    F                   NUMBER OF GENERICS          DM JUN83\nLKPGNRC1 DS    A                   POINTER TO FIRST GENERIC    DM JUN83\nLKPFLAGS DS    XL4                 FLAGS                       DM JUN83\nLKPVIO   EQU   X'80'               ELIGIBLE FOR VIO            SS JAN84\nLKPAGMSK EQU   X'40'               GENERIC HAS ALT MASK        SS JAN84\nLKPMGEN  EQU   X'20'               ALLOC OF MUTL GEN OK        SS JAN84\nLKPGENR  EQU   X'10'               THIS IS A GENERIC: FULL DEV SS JAN84\nLKPESOTR EQU   X'08'               THIS IS A ESOTERIC          SS JAN84\nLKPGGERN EQU   X'04'               THIS IS A GENERATED GEN     SS JAN84\nLKPALTPT DS    A                   ALTERNATE MASK POINTER      DM JUN83\nLKPLNG   EQU   *-LKPSECT           LENGTH OF SECTION           DM JUN83\n         SPACE ,                                               DM JUN83\nGNRCSECT DSECT ,                   GENERIC SECTION             DM JUN83\nGNRCDEVT DS    XL4                 DEVICE TYPE (AS IN CATALOG) DM JUN83\nGNRCGRP# DS    F                   NUMBER OF GROUPS            DM JUN83\nGNRCGRP1 DS    A                   POINTER TO FIRST GROUP      DM JUN83\nGNRCLNG  EQU   *-GNRCSECT          LENGTH OF SECTION           DM JUN83\n         SPACE ,                                               DM JUN83\nGRPPSEC  DSECT                     GROUP POINTER SEC           SS JAN84\nGRPT     DS    F                   A GROUP POINTER             SS JAN84\nGRPPLNG  EQU   *-GRPPSEC           LENGTH OF SECTON            SS JAN84\n         SPACE ,                                               SS JAN84\nGRPSECT  DSECT ,                   GROUP SECTION               DM JUN83\nGRPID    DS    F                   GROUP ID NUMBER             DM JUN83\nGRPIDHF  EQU   GRPID-GRPSECT+2     HALF WORD PORTION OFFSET    SS JAN84\nGRPUCB#  DS    F                   NUMBER OF UCBS              DM JUN83\nGRPUCB1  DS    A                   POINTER TO FIRST UCB        DM JUN83\nGRPLNG   EQU   *-GRPSECT           LENGTH OF SECTION           DM JUN83\n         ORG   GRPID+2                                         DM NOV83\nGRPDEV#  DS    H                   NUMBER OF DEVICES           DM NOV83\nGRPDEV1  DS    H                   INDEX TO DEVICE NUMBER TBL  DM NOV83\nGRPLNGX  EQU   *-GRPSECT           LENGTH OF SECTION XA SECT   DM JUN83\n         SPACE ,                                               DM JUN83\nMSKSECT  DSECT ,                   GROUP MASK SECTION          DM JUN83\nMSKMASK  DS    X                   GROUP MASK (LENGTH VARIABLE)DM JUN83\nMSKLNG   EQU   *-MSKSECT           LENGTH OF SECTION           DM JUN83\n         SPACE ,                                               DM JUN83\nUCBSECT  DSECT ,                   UCB POINTER SECTION         DM JUN83\nUCB#     DS    H                   INDEX TO UCB LOOKUP TABLE   DM NOV83\nUCBLNG   EQU   *-UCBSECT           LENGTH OF SECTION           DM JUN83\n         ORG   UCBSECT                                         DM NOV83\nDEV#     DS    CL3                 DEVICE NUMBER IN EBCDIC     DM NOV83\nUCBLNGX  EQU   *-UCBSECT           LENGTH OF SECTION XA SECT   DM JUN83\n         SPACE ,                                               DM JUN83\nGRPTSECT DSECT ,                   GROUP POINTER SECTION       DM JUN83\nGRPTPTR  DS    A                   GROUP POINTER               DM JUN83\nGRPTLNG  EQU   *-GRPTSECT          LENGTH OF SECTION           DM JUN83\n         MEND  ,                                               DM JUN83\n         PRINT ON                                              DM JUN83\n         SPACE 3\nDYNAMASK START ,\n*                                                              SS AUG84\n*  SETTING SYMBOLICS                                           SS AUG84\n*                                                              SS AUG84\n         GBLC  &SUBP,&XASP\n&SUBP    SETC  '241'                                           SS AUG84\n&XASP    SETC  '241'                                           SS AUG84\n         AIF   ('&SYSPARM' NE 'TESTXA').TEST1A                 SS MAR87\n&XASP    SETC  '0'                                             SS AUG84\n.TEST1A  ANOP  ,\n*&XXSP SET FROM &XASP BAST ON           *                      SS MAR87\n*\n*  EQUATES FOR REGISTERS AND FLAGS\n*\nFF       EQU   X'FF'\nEXCLUDE  EQU   X'01'\nREPL     EQU   X'02'\nCVTPT    EQU   16                  PSA POINTER TO CVT\nCVTILK2  EQU   40                  CVT POINTER TO UCB LOOK-UP  DM JUN83\nCVTJESCT EQU   X'128'              JESCT ADDR                  SS JAN84\nCVTDCB   EQU   X'74'               CVT SYSTEM TYPE OFFSET      SS JAN84\nCVTMVSE  EQU   X'80'               XA MODE                     SS JAN84\nJESUPLP  EQU   X'5C'               UCB POINTER LIST            SS JAN84\nJESEDTA  EQU   X'34'               EDT POINTER                 SS JAN84\nUPLUCBA  EQU   X'10'               FIRST POINTER IN LIST       SS JAN84\nUCBSTAT  EQU   3,1,C'X'            UCB STATUS                  DM NOV83\nUCBONLI  EQU   128                 DEVICE IS ONLINE            DM NOV83\nUCBCHGS  EQU   64                  DEVICE IS TO BE CHANGED TO  DM NOV83\n*               OFFLINE & ALLOCATION IS ENQUEUED OR DEVICE     DM NOV83\n*               IS ALLOCATED                                   DM NOV83\nUCBUNLD  EQU   16                  UNLOAD IN PROCESS           DM NOV83\nUCBNAME  EQU   13,3,C'C'           UCB NAME                    DM NOV83\nUCBNUM   EQU   4,2,C'X'            UCB DEVICE NUMBER           SS MAR87\nUCBTYPE  EQU   16,4,C'X'           DEVICE TYPE                 DM NOV83\nUCBDVCLS EQU   18,1,C'X'           DEVICE CLASS                DM NOV83\nUCB3DACC EQU   32                  DASD CLASS                  DM NOV83\nUCBVOLI  EQU   28,6,C'C'           VOLUME SERIAL               DM NOV83\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2                   USED FOR COUNTER\nR3       EQU   3                   USED AS POINTER IN LOOP\nR4       EQU   4                   UCB, POINTER  NEXT IN NEW EDT\nR5       EQU   5                   COUNTER OR POINTER  NEW PTXREF\nR6       EQU   6                   COUNTER OR POINTER  OLD PTXREF\nR7       EQU   7                   COUNTER TO TOTAL FOR EACH SEC\nR8       EQU   8                   POINTER TO MODEL EDT\nR9       EQU   9                   SIZE OF GROUP - UNIT XREF\nR10      EQU   10                  POINTER TO NEW EDT\nR11      EQU   11                  PROGRAM BASE\nR12      EQU   12                  PROGRAM BASE TWO\nR13      EQU   13                  SAVE AREA/WORK BASE\nR14      EQU   14\nR15      EQU   15\n         SPACE 3                                               DM JUL80\n         SAVE  (14,12),T,DYNAMASK\n         LR    R11,R15             SET UP BASE                 DM JUN83\n         USING DYNAMASK,R11,R12                                DM JUN83\n         LA    R12,2048(,R11)                                  DM JUN83\n         LA    R12,2048(,R12)                                  DM JUN83\n         L     R0,GETMLEN          LENGTH OF GETMAIN           RCHJUN79\n         LR    R6,R1               SAVE PARM ADDR              SS JUN86\n         GETMAIN R,LV=(0)          STORAGE FOR WORK AND TABLES\n         LR    R2,R1               AREA TO ZERO                RCHJUN79\n         L     R3,GETMLEN          LENGTH TO ZERO              RCHJUN79\n         SR    R4,R4               FROM ADDRESS NULL           RCHJUN79\n         SR    R5,R5               FILL CHAR & FROM LEN        RCHJUN79\n         MVCL  R2,R4               ZERO GETMAIN AREA           RCHJUN79\n         ST    R1,8(R13)           FORWARD POINTER\n         ST    R13,4(R1)           BACK POINTER\n         LR    R13,R1              SET BASE/SAVE AREA\n         USING SAVE,R13                                        SS AUG84\n         L     R2,=A(GXREFEND-SAVE)     ADDRESS END OF XREF    DM JUN83\n         AR    R2,R1                      GETMAIN AREA         RCHJUN79\n         ST    R2,GXREFXXX                                     SS AUG84\n         MVC  0(8,R2),=C'ENDXXXXX' GETMAIN END INDICATOR       RCHJUN79\n         MVC   SYSIN,SYSINDCB      COPY DCB'S TO               DM JUN83\n         MVC   SYSPRINT,SYSPRDCB        GETMAINED CORE         DM JUN83\n         MVI   OCLIST,X'80'        SET END                     DM JUL80\n         OPEN  (SYSIN,INPUT),MF=(E,OCLIST)                     DM JUN83\n         TM    SYSIN+48,X'10'      DID IT OPEN                 DM JUN83\n         BZ    MSG1                NO, ERROR\n         OPEN  (SYSPRINT,OUTPUT),MF=(E,OCLIST)                 DM JUN83\n         MVI   FLAG2,0                                         SS JAN84\n         MVI   SAVEPARM,C' '            BLANK AREA             SS JUN86\n         MVC   SAVEPARM+1(19),SAVEPARM  RIPPLE                 SS JUN86\n         LTR   R5,R6               ANY PARM PASSED             SS JUL86\n         BZ    NOPARM              NO                          SS JUN86\n         L     R5,0(R5)            PARM ADDRESS                SS JUN86\n         LTR   R5,R5               ANY                         SS JUN86\n         BZ    NOPARM              NO                          SS JUN86\n         LH    R1,0(R5)            GET LENGTH                  SS JUN86\n         LTR   R1,R1               ANY LENGTH                  SS JUN86\n         BZ    NOPARM              NO                          SS JUN86\n         CH    R1,=H'20'           MAX SIZE                    SS JUN86\n         BNH   *+8                 OK                          SS JUN86\n         LH    R1,=H'20'           ONLY FIRST 20               SS JUN86\n         BCTR  R1,0                ONE LESS FOR MVC            SS JUN86\n         MVC   SAVEPARM(0),2(R5)        EXECUTED MOVE          SS JUN86\n         EX    R1,*-6                   EXECUTE THE MOVE       SS JUN86\nNOPARM   DS    0H                                              SS JUN86\n         MVI   FLAGS,1             INIT, = LOOK FOR UNIT NAME  SS MAR87\n         L     R1,CVTPT                                        SS JAN84\n         TM    CVTDCB(R1),CVTMVSE                              SS JAN84\n         BZ    XA0                                             SS JAN84\n         MVI   FLAG2,CVTMVSE                                   SS JAN84\nXA0      DS    0H                                              SS JAN84\n         AIF   ('&SYSPARM' EQ 'TEST' OR                                -\n               '&SYSPARM' EQ 'TESTXA').TEST3                   DM JUN83\n         MODESET KEY=ZERO\n.TEST3   ANOP  ,                                               DM JUN83\n         TM    FLAG2,CVTMVSE                                   SS JAN84\n         BO    XA1                                             SS JAN84\n         L     R0,CORESIZE         SET GETMAIN SIZE            RCHJUN80\n         GETMAIN R,LV=(0)          GETMAIN AREA FOR EDT        RCHJUN80\n         LR    R10,R1              SET AREA TO R10             SS MAR87\n         B     XA2                                             SS JAN84\nXA1      DS    0H                                              SS JAN84\n         AIF   ('&SYSPARM' EQ 'TEST' OR                                -\n               '&SYSPARM' EQ 'NONXA').TEST3A                   SS AUG84\n         L     R0,CORESIZX         SET GETMAIN SIZE            SS JAN84\n         GETMAIN RU,LV=(0),LOC=ANY,SP=&XASP AREA FOR EDT       SS JAN84\n         LR    R10,R1              SET AREA TO R10             SS MAR87\n         B     XA3                                             SS MAR87\n         AGO   .TEST3B                                         SS AUG84\n.TEST3A  ANOP  ,                                               SS AUG84\n         ABEND 3888                                            SS AUG84\n.TEST3B  ANOP  ,                                               SS AUG84\nXA2      DS    0H                                              SS JAN84\n         LR    R10,R1              SET AREA TO R10             RCHJUN80\n         LOAD  EP=IEFEDTTB         LOAD EDT                    RCHMAY80\n         LR    R8,R0               USE R8 AS PTR OLD EDT\n         OI    FLAG2,LDEDT         LOADED EDT MUST BE DELETED  SS MAR87\n         USING EDT,R8                                          DM JUN83\n         ST    R8,EDTPTR           SAVE IBM EDT PTR            RCHJUN80\n*\n*  BUILD GROUP - UNIT CROSS REFERENCE TABLE\n*\n         MVC   0(12,R10),DYNAHDR   SET OUT HEADER CONSTANT     DM JUL80\n         MVC   12(4,R10),CORESIZE  SAVE SUBPOOL AND LENGTH     RCHJUN80\n         LA    R10,16(R10)         SET EDT START ADDR          RCHJUN80\n         MVC   PREFTAB,EDTPREF     SAVE IBM PREFTAB ADDR       DM JUN83\n         LA    R1,GRPLNG                GROUP POINTER LENG     SS JAN84\n         STH   R1,GRPLNG2                SAVE LENGTH           SS JAN84\n         L     R1,CVTPT\n         L     R1,CVTILK2(R1)           CVTILK2 .. UCBLU 2     DM JUN83\n         L     R3,EDTGRP                GRP PT SEC             DM JUN83\n         USING GRPSECT,R3                                      DM JUN83\n         L     R2,0(R3)                 NUM OF PT\n         LA    R3,8(R3)                 OVER HDR\n         LA    R4,GXREF\n         USING GXREFDEF,R4                                     DM JUN83\nBLDGX    L     R5,GRPID                 GRP ID                 DM JUN83\n         L     R6,GRPUCB#               UCBS IN GRP            DM JUN83\n         L     R7,GRPUCB1               FIRST UCB PT           DM JUN83\n         USING UCBSECT,R7                                      DM JUN83\nBLDGXE   STH   R5,GXROLDID              OLD GRP ID             SS JAN84\n         XC    GXRNEWID,GXRNEWID        ZERO NEW ID            SS JAN84\n         LH    R14,UCB#                 LOAD UCB POINTER       DM JUN83\n         STH   R14,GXRUCBIX             SAVE INDEX             SS JAN84\n         SLA   R14,1                    TIMES 2 (HALF WORD)    SS JAN84\n         LA    R14,0(R14,R1)            UCB LOOKUP OFFSET      SS JAN84\n         ICM   R14,B'0011',0(R14)       UCB ADDR               SS JAN84\n         ICM   R14,B'1100',=X'0000'     CLEAR TOP HALF         SS JAN84\n         ST    R14,GXRUCBPT             SAVE UCBADDR           SS JAN84\n         XC    GXRMASKS,GXRMASKS        ZERO  MASK             SS JAN84\n         LA    R7,UCBLNG(R7)            NEXT UCB               DM JUN83\n         LA    R4,GXRLNG(R4)            NEXT GXE               DM JUN83\n         C     R4,GXREFXXX              END OF GETMAIN AREA    SS AUG84\n         BNL   MSG7                     YES....EXIT WITH ERROR SS AUG84\n         BCT   R6,BLDGXE                FOR EACH IN GRP\n         LA    R3,GRPLNG(R3)            NEXT GRP               DM JUN83\n         BCT   R2,BLDGX                 FOR ALL GRPS\n         DROP  R3,R4,R7                                        DM JUN83\n         L     R9,EDTUCB                UCB PT SEC             DM JUN83\n         L     R9,0(R9)                 NUM UCBS\n         ST    R9,NUMUNIT               SAVE FOR LATER         SS JAN84\n*\n*   SCAN UCBS AND MARK GXREF WITH DASD DEVICES\n*\n*   DELETE                                                     SS JAN84\n*\n         B     XA4                                             SS JAN84\nXA3      DS    0H                                              SS JAN84\n         AIF   ('&SYSPARM' EQ 'NONXA' OR                               -\n               '&SYSPARM' EQ 'TEST').TEST3E                    SS NOV86\n*\n*  BUILD GROUP - UNIT CROSS REFERENCE TABLE FOR XA\n*\n         LA    R1,IN31A                 START OF 31 BIT MODE   SS JAN84\n         O     R1,=X'80000000'          MODE BIT ON            SS JAN84\n         BSM   0,R1                     SWITCH MODES TO 31     SS JAN84\nIN31A    DS    0H                                              SS JAN84\n         L     R2,CVTPT            LOAD CVT ADDR               DM NOV83\n         L     R2,CVTJESCT(R2)     LOAD JESCT ADDR             SS JAN84\n         L     R3,JESEDTA(R2)      LOAD OLD EDT PTR            SS JAN84\n         CLC   DYNAHDR(8),EDTCREAT-EDT(R3)  OWR EDT            SS MAR87\n         BE    GETGEN              YES, GET GEN EDT            SS MAR87\n         LR    R8,R3               ASSUME GEN EDT              SS MAR87\n         OI    FLAG2,GENEDT        CURRENT IS GEN EDT          SS MAR87\n         B     SETEDT                   *                      SS MAR87\nGETGEN   DS    0H                       *                      SS MAR87\n         LA    R3,0(,R3)           CLEAR HI BIT                SS MAR87\n         LA    R4,16               LOAD CONSTENT               SS MAR87\n         SR    R3,R4               BACK UP TO HEADER           SS MAR87\n         CLC   0(8,R3),DYNAHDR2    NEW HEADER                  SS MAR87\n         BNE   LOADEDT             NO, OLD, GET IEFEDTTB       SS MAR87\n         L     R8,8(,R3)           GET GEN EDT                 SS MAR87\n         B     SETEDT                   *                      SS MAR87\nLOADEDT  DS    0H                       *                      SS MAR87\n         LOAD  EP=IEFEDTTB         LOAD EDT                    SS MAR87\n         LR    R8,R0               USE R8 AS PTR OLD EDT       SS MAR87\n         OI    FLAG2,LDEDT         LOADED EDT MUST BE DELETED  SS MAR87\nSETEDT   LA    R8,0(,R8)                CLEAR BIT ZERO         SS AUG84\n         ST    R8,EDTPTR                SAVE SYSGEN EDT        SS AUG84\n         MVC   0(08,R10),DYNAHDR2  SET OUT HEADER CONSTANT     SS MAR87\n         ST    R8,8(,R10)          SAVE GEN EDT                SS MAR87\n         AIF   ('&SYSPARM' EQ 'TESTXA').TEST3C                 SS NOV86\n         MVC   12(4,R10),CORESIZX  SAVE LENGTH                 SS AUG84\n         MVI   12(R10),&XASP                                   SS AUG84\n         AGO   .TEST3D                                         SS AUG84\n.TEST3C  ANOP  ,                                               SS AUG84\n         MVC   12(4,R10),CORESIZE  SAVE SUBPOOL AND LENGTH     SS AUG84\n.TEST3D  ANOP  ,                                               SS AUG84\n         LA    R1,GRPLNGX               GROUP POINTER LENG     SS JAN84\n         STH   R1,GRPLNG2                SAVE LENGTH           SS JAN84\n         L     R1,CVTPT                 CVT                    SS JAN84\n         L     R1,CVTJESCT(R1)          JESCT                  SS JAN84\n         L     R1,JESUPLP(R1)           UCB PT TLE             SS JAN84\n         LA    R1,UPLUCBA-4(R1)         OFFSET FOR INDEX       SS JAN84\n         LA    R10,16(R10)         SET EDT START ADDR          RCHJUN80\n         MVC   PREFTAB,EDTPREF     SAVE IBM PREFTAB ADDR       DM JUN83\n         L     R3,EDTGRP                GRP PT SEC             DM JUN83\n         USING GRPSECT,R3                                      DM JUN83\n         L     R2,0(R3)                 NUM OF PT\n         LA    R3,8(R3)                 OVER HDR\n         LA    R4,GXREF\n         USING GXREFDEF,R4                                     DM JUN83\nBLDGX2   LH    R5,GRPID                 GRP ID                 SS JAN84\n         LH    R6,GRPDEV#               UCBS IN GRP            SS JAN84\n         L     R7,EDTUCB                UCB SEC                SS JAN84\n         LH    R7,GRPDEV1               FIRST DEV INDEX        SS JAN84\n         SLA   R7,2                     TIMES 4 (FULL WORD)    SS JAN84\n         ALR   R7,R1                    INDEX INTO UCB LIST    SS JAN84\n         USING UCBSECT,R7                                      DM JUN83\nBLDGXE2  STH   R5,GXROLDID              OLD GRP ID             SS JAN84\n         XC    GXRNEWID,GXRNEWID        ZERO NEW ID            DM JUN83\n         MVC   GXRUCBPT(4),0(R7)        COPY UCB ADDR          SS JAN84\n         XC    GXRMASKS,GXRMASKS        ZERO  MASK             SS JAN84\n         LA    R7,4(R7)                 NEXT UCB  IN LIST      DM JUN83\n         LA    R4,GXRLNG(R4)            NEXT GXE               DM JUN83\n         C     R4,GXREFXXX              END OF GETMAIN AREA    SS AUG84\n         BNL   MSG7                     YES....EXIT WITH ERROR SS AUG84\n         BCT   R6,BLDGXE2               FOR EACH IN GRP\n         LA    R3,GRPLNGX(R3)           NEXT GRP               DM JUN83\n         BCT   R2,BLDGX2                FOR ALL GRPS\n         DROP  R3,R4,R7                                        DM JUN83\n         L     R9,EDTUCB                UCB PT SEC             DM JUN83\n         L     R9,0(R9)                 NUM UCBS\n         ST    R9,NUMUNIT               SAVE FOR LATER         SS JAN84\n         LA    R1,IN24A                 BACK TO 24  BIT MODE   SS JAN84\n         BSM   0,R1                     SWITCH MODES TO 24     SS JAN84\nIN24A    DS    0H                                              SS JAN84\n.TEST3E  ANOP  ,                                               SS SEP85\nXA4      DS    0H                                              SS JAN84\n*\n*  BUILD MODIFIED NAME TABLE FROM INPUT AND SET MASK IN GXREF\n*  FOR EACH VOLSER OR CUU\n*\n         L     R6,=X'10000000'          MASK BIT ONE\n         LA    R5,MNT                   MODIFIED NAME TABLE\n         LA    R9,0                     MASK INDEX             SS JAN84\nBLDMNT   BAL   R14,GETNEXT              NEXT FIELD\n         C     R15,=F'255'              END OF FILE\n         BE    SORTGRP\n         MVI   MNTFLAG(R5),X'00'        PRE ZERO FLAG          SS JAN84\n         CLI   BUF,C'-'                 IS IT EXCLUDE FUNCTION\n         BNE   TESTVIO                  NO NEXT TEST\n         OI    MNTFLAG(R5),EXCLUDE      INDICATES EXCLUDE      SS JAN84\n         B     OVERCHAR\nTESTVIO  CLI   BUF,C'+'                 IS IT VIO\n         BNE   SKIPFLAG                 NO\n         OI    MNTFLAG(R5),LKPVIO       INDICATES VIO          SS JAN84\nOVERCHAR C     R15,=F'9'                MAX OF 1+8 CHARS\n         BH    MSG2                     TOO BIG\n         MVC   MNTNAME(8,R5),BUF+1      COPY UNIT NAME         SS JAN84\n         B     SETMASK\nSKIPFLAG C     R15,=F'8'                MAX OF 8 CHARS\n         BH    MSG2                     TOO BIG\n         MVC   MNTNAME(8,R5),BUF        COPY UNIT NAME         SS JAN84\nSETMASK  ST    R6,MNTMASK(R5)           SAVE MASK              SS JAN84\n         STH   R9,MNTMASKI(R5)          SAVE MASK INDEX        SS JAN84\nEACHU    BAL   R14,GETNEXT              GET A UNIT\n         C     R15,=F'255'              END OF RECORD\n         BE    BUMPMNT                  YES BUMP FOR NEXT NAME\n         CLI   BUF,C'/'                 IS IT CUU\n         BE    SCANALL                  YES\n         C     R15,=F'6'                MAX CHAR IN VOLSER\n         BH    MSG3                     TOO BIG\n         BCTR  R15,0                    SET TO END             SS APR86\n         LA    R14,BUF(R15)                 OF VOLUME          SS APR86\n         CLI   0(R14),C'*'              IS IT GENERIC          SS APR86\n         BE    SCANGEN                  YES                    SS APR86\n         SR    R14,R14                  ZERO COUNT             SS APR86\n         LA    R15,5                    SET COMPARE LENGTH     SS APR86\n         B     SCANINIT                 DO SCAN                SS APR86\nSCANGEN  DS    0H                                              SS APR86\n         LTR   R15,R15                  ONE CHAR LONG          SS APR86\n         BZ    EACHU                    YES IGNORE             SS APR86\n         SR    R14,R14                  ZERO COUNT             SS APR86\n         BCTR  R15,0                    ADJUST COMPARE LENGTH  SS APR86\nSCANINIT DS     0H                      COMMENT                SS APR86\n         L     R2,NUMUNIT               NUM OF UCBS            SS JAN84\n         LA    R3,GXREF                 START SCAN ON TABLE\n         USING GXREFDEF,R3                                     DM JUN83\nSCANVOL  L     R4,GXRUCBPT              UCB ADDR               SS JAN84\n         TM    UCBDVCLS(R4),UCB3DACC    IS IT DASD             SS JAN84\n         BNO   BUMPU                    NO                     SS JAN84\n         TM    UCBSTAT(R4),UCBCHGS+UCBUNLD OFFLINE/UNLOAD BITS DM NOV83\n         BNZ   BUMPU                    YES DO NOT USE\n         TM    UCBSTAT(R4),UCBONLI      ONLINE/SL BITS         DM NOV83\n         BNO   BUMPU                    NOT THERE DO NOT USE\n         CLC   UCBVOLI(0,R4),BUF        IS THIS A VOLUME MATCH SS APR86\n         EX    R15,*-6                  COMPARE WITH LENGTH    SS APR86\n         BNE   BUMPU                    NO SKIP\n         L     R4,GXRMASK(R9)           YES ... GET MASK       SS JAN84\n         OR    R4,R6                    OR INTO MASK\n         ST    R4,GXRMASK(R9)           PUT MASK BACK          SS JAN84\n         C     R15,=F'5'                FULL VOL SER           SS APR86\n         BE     EACHU                   YES, NO MORE COMPARES  SS APR86\n         LA     R14,1(,R14)             BUMP COUNT OF VOLS     SS APR86\nBUMPU    LA    R3,GXRLNG(R3)            NEXT UNIT IN GXE       DM JUN83\n         BCT   R2,SCANVOL\n         DROP  R3                                              DM JUN83\n         LTR   R14,R14                  ANY VOLUMES            SS APR86\n         BNZ   EACHU                    YES, NO MSG            SS APR86\n         B     MSG4\nSCANALL  DS    0H                                              SS APR86\n         NI    FLAG2,255-RANGE      CLEAR FLAG                 SS MAR87\n         C     R15,=F'8'            RANGE OF DEVICES           SS MAR87\n         BE    SCANRNG              YES                        SS MAR87\n         C     R15,=F'4'            MAX SIZE FOR ONE CUU       SS MAR87\n         BH    MSG8                 OVER... ERROR              SS MAR87\n         CLI   BUF+2,C'*'               GENERIC ONE CHAR       SS MAR87\n         BE    UNITGEN1                 SETUP                  SS MAR87\n         CLI   BUF+3,C'*'               GENERIC                SS APR86\n         BE    UNITGENC                 YES                    SS APR86\n         LA    R15,2                    SET COMPARE LENGH      SS APR86\n         SR    R14,R14                  ZERO VOL COUNT         SS APR86\n         B     SCANALLI                 CONTINUE               SS APR86\nSCANRNG  DS    0H                   *                          SS MAR87\n         CLI   BUF+4,C'-'           SYTAX CHECK                SS MAR87\n         BNE   MSG8                 ERROR                      SS MAR87\n         LA    R1,BUF+1             POINT TO FIRST CUU         SS MAR87\n         BAL   R14,CHECKHEX         *                          SS MAR87\n         LA    R1,1(,R1)            CHAR 2                     SS MAR87\n         BAL   R14,CHECKHEX         *                          SS MAR87\n         LA    R1,1(,R1)            CHAR 3                     SS MAR87\n         BAL   R14,CHECKHEX         *                          SS MAR87\n         LA    R1,2(,R1)            NEXT CUU                   SS MAR87\n         BAL   R14,CHECKHEX         *                          SS MAR87\n         LA    R1,1(,R1)            CHAR 2                     SS MAR87\n         BAL   R14,CHECKHEX         *                          SS MAR87\n         LA    R1,1(,R1)            CHAR 4                     SS MAR87\n         BAL   R14,CHECKHEX         *                          SS MAR87\n         MVI   BUF+4,C'0'           SIGN AND PAD               SS MAR87\n         MVI   BUF+8,C'0'           SIGN AND PAD CUU 2         SS MAR87\n         PACK  DBLWRD(3),BUF+1(4)                              SS MAR87\n         MVC   LOWCUU(2),DBLWRD     *                          SS MAR87\n         PACK  DBLWRD(3),BUF+5(4)                              SS MAR87\n         MVC   HICUU(2),DBLWRD      *                          SS MAR87\n         CLC   HICUU,LOWCUU         RANGE MUST BE IN ORDER     SS MAR87\n         BNH   MSG8                 ERROR.. OUT OF ORDER       SS MAR87\n         OI    FLAG2,RANGE          *                          SS MAR87\n         B     SCANALLI                 CONTINUE               SS APR86\nUNITGEN1 DS    0H                                              SS MAR87\n         LA    R15,0                    SET COMPARE LENGH      SS MAR87\n         SR    R14,R14                  ZERO VOL COUNT         SS MAR87\n         B     SCANALLI                 CONTINUE               SS MAR87\nUNITGENC DS    0H                                              SS APR86\n         LA    R15,1                    SET COMPARE LENGH      SS APR86\n         SR    R14,R14                  ZERO VOL COUNT         SS APR86\nSCANALLI L     R2,NUMUNIT               NUM OF UCBS            SS APR86\n         LA    R3,GXREF                 START AT TOP\n         USING GXREFDEF,R3                                     DM JUN83\nSCANUCB  L     R4,GXRUCBPT              UCB PT                 DM JUN83\n         TM    FLAG2,RANGE              PROCESSING RANGE       SS MAR87\n         BO    CKRANGE                  YES                    SS MAR87\n         CLC   UCBNAME(0,R4),BUF+1      MATCH UNIT ADDRESS     SS APR86\n         EX    R15,*-6                  COMPARE WITH LENGTH    SS APR86\n         BNE   NEXTU                    NO MATCH\n         B     SETCUU               *                          SS MAR87\nCKRANGE  DS    0H                   *                          SS MAR87\n         CLC   UCBNUM(2,R4),LOWCUU  LOWER THAN LOW             SS MAR87\n         BL    NEXTU                YES, SKIP                  SS MAR87\n         CLC   UCBNUM(2,R4),HICUU   HIGHER THAN HI             SS MAR87\n         BH    NEXTU                YES, SKIP                  SS MAR87\n         B     SETCUU               GOOD ON                    SS MAR87\nSETCUU   L     R4,GXRMASK(R9)           YES, GET MASK          SS MAR87\n         OR    R4,R6                    OR MASKS TOGETHER\n         ST    R4,GXRMASK(R9)           PUT NEW MASK BACK      SS APR85\n         TM    FLAG2,RANGE              PROCESSING RANGE       SS MAR87\n         BO    BUMPVC                   *                      SS MAR87\n         C     R15,=F'2'                IS IT GENERIC          SS APR86\n         BE    EACHU                    NO, CONTINUE NEXT CUU  SS APR86\nBUMPVC   LA    R14,1(,R14)              BUMP VOL COUNT         SS MAR87\nNEXTU    LA    R3,GXRLNG(R3)            NEXT UNIT              DM JUN83\n         BCT   R2,SCANUCB\n         DROP  R3                                              DM JUN83\n         LTR   R14,R14                  ANY VOLUMES            SS APR86\n         BNZ   EACHU                    YES, CONTINUE NEXT CUU SS APR86\n         B     MSG5                     NEVER FOUND IT\n         SPACE ,                                               DM JUN83\nBUMPMNT  LA    R5,MNTLN(R5)             NEXT NAME              SS JAN84\n         SRL   R6,1                     SHIFT MASK TO NEXT BIT\n         LTR   R6,R6                    MAX OF 32 SHIFTS\n         BNZ   BLDMNT                   CONTINUE INPUT\n         LA    R9,4(R9)                 BUMP MASK INDEX        SS JAN84\n         LA    R2,GXRMASKZ              MAX INDEX SIZE         SS JAN84\n         CR    R2,R9                    AT END OF MASK         SS JAN84\n         BE    MSG6                     YES, MESSAGE           SS JAN84\n         L     R6,=X'10000000'          START NEXT MASK        SS JAN84\n         B     BLDMNT                   CONTINUE\nSORTGRP  MVI   0(R5),FF                 END FLAG\n*\n* SORT GROUP - UNIT XREF BY OLD GROUP AND MASK BITS\n*\nSORTAGN  MVI   BFLAG,0                  ZERO SORT COMPLETE FLAG\n         LA    R2,GXREF                 START OF TABLE\n         USING GXREFDEF,R2                                     DM JUN83\n         L     R3,NUMUNIT               NUM OF UNITS           SS JAN84\n         BCTR  R3,0                     LESS ONE\nCOMPAIR  CLC   GXROLDID(GXRSORTL),GXROLDID+GXRLNG  COMPRE      SS JAN84\n         BNH   INORDER                  NO SWITCH\n         XC    GXREFDEF(GXRLNG),GXREFDEF+GXRLNG  SWITCH        SS JAN84\n         XC    GXREFDEF+GXRLNG(GXRLNG),GXREFDEF    CURRENT AND SS JAN84\n         XC    GXREFDEF(GXRLNG),GXREFDEF+GXRLNG      NEXT      SS JAN84\n         MVI   BFLAG,FF                 SORT INCOMPLETE\nINORDER  LA    R2,GXRLNG(R2)            MOVE TO NEXT           DM JUN83\n         DROP  R2                                              DM JUN83\n         BCT   R3,COMPAIR               REPEAT\n         CLI   BFLAG,FF                 ANY CHANGES\n         BE    SORTAGN                  YES, RESORT\n         DROP  R8                                              DM JUN83\n*\n* BUILD NEW GROUP ID SECTION RE GROUPING BASED ON MASK\n*\n         AIF   ('&SYSPARM' EQ 'TEST' OR                                -\n               '&SYSPARM' EQ 'NONXA').TEST3F                   SS MAR87\n         TM    FLAG2,CVTMVSE            XA                     SS JAN84\n         BNO   XA5                                             SS JAN84\n         LA    R1,IN31B                 START OF 31 BIT MODE   SS JAN84\n         O     R1,=X'80000000'          MODE BIT ON            SS JAN84\n         BSM   0,R1                     SWITCH MODES TO 31     SS JAN84\nIN31B    DS    0H                                              SS JAN84\nXA5      DS    0H                                              SS JAN84\n.TEST3F  ANOP  ,                                               SS SEP85\n         USING EDT,R10                                         DM JUN83\n         MVC   EDTCREAT,DYNAHDR    IDENTIFY CREATOR            DM JUN83\n         TIME  DEC                                             DM JUN83\n         SRL   R0,12               SHIFT OFF SECONDS           DM JUN83\n         STM   R0,R1,DBLWRD                                    DM JUN83\n         OI    DBLWRD+3,15         SIGN TIME                   DM JUN83\n         MVC   WTOE(7),=X'402120204B2020'                      DM JUN83\n         ED    WTOE(7),DBLWRD+1    FORMAT TIME                 DM JUN83\n         MVC   EDTTIME,WTOE+2      TO HEADER                   DM JUN83\n         XC    DBLWRD(4),DBLWRD    ZERO TIME FROM DBLWRD       DM JUN83\n         BAL   R14,TOCAL           CONVERT DATE TO CALENDAR    DM JUN83\n         MVC   WTOE(10),=X'40212020612020612020'               DM JUN83\n         ED    WTOE(10),DBLWRD+4   FORMAT DATE                 DM JUN83\n         MVC   EDTDATE,WTOE+2      TO EDT HEADER               DM JUN83\n         LA    R2,GXREF\n         USING GXREFDEF,R2                                     DM JUN83\n         L     R3,NUMUNIT               NUM OF UNITS           SS JAN84\n         TM    FLAG2,CVTMVSE            XA                     SS JAN84\n         BO    XA6                      YES                    SS JAN84\n         LA    R4,EDT+EDTHDRL           NEW UCB PT SEC         DM JUN83\n         ST    R4,EDTUCB                INIT HDR               DM JUN83\n         ST    R3,0(R4)                 CNT IN UCB PT SEC HDR  SS JAN84\n         LA    R5,UCBLNG                ENTRY LENGTH           DM JUN83\n         ST    R5,4(R4)                 INIT UCB PT SEC HDR\n         LA    R4,8(R4)                 OVER HEADER\n         LR    R14,R4                   HOLD IT\n         USING UCBSECT,R4                                      DM JUN83\nBLDUS    MVC   UCB#,GXRUCBIX            COPY UCB PT            DM JUN83\n         LA    R4,UCBLNG(R4)            NEXT ENTRY             DM JUN83\n         LA    R2,GXRLNG(R2)            NEXT GXREF ENTRY       DM JUN83\n         BCT   R3,BLDUS\n         B     XA7                                             SS JAN84\nXA6      DS    0H                                              SS JAN84\n         LA    R4,EDT+EDTHDRLX          NEW UCB PT SEC         SS AUG84\n         ST    R4,UPLSTR                SAVE START OF UPL      SS JAN84\n         MVC   EDTNAME(4),=CL4'EDT '                           SS AUG84\n         L     R1,CVTPT                 CVT                    SS JAN84\n         L     R1,CVTJESCT(R1)          JESCT                  SS JAN84\n         L     R1,JESUPLP(R1)           UCB PT LIST            SS JAN84\n         MVC   0(UPLUCBA,R4),0(R1)      COPY HEADER            SS JAN84\n         LA    R4,UPLUCBA(R4)           START OF UCP PT LIST   SS JAN84\nBLDUS2   L     R1,GXRUCBPT              UCB ADDR               SS JAN84\n         ST    R1,0(R4)                 ADD TO UCB PT LIST     SS JAN84\n         LA    R4,4(R4)                 NEXT ENTRY             DM JUN83\n         LA    R2,GXRLNG(R2)            NEXT GXREF ENTRY       DM JUN83\n         BCT   R3,BLDUS2\n         L     R3,NUMUNIT               NUM OF UNITS           SS JAN84\n         ST    R4,EDTUCB                INIT HDR               DM JUN83\n         ST    R3,0(R4)                 CNT IN UCB PT SEC HDR  SS JAN84\n         LA    R5,UCBLNGX               ENTRY LENGTH           DM JUN83\n         ST    R5,4(R4)                 INIT UCB PT SEC HDR\n         LA    R4,8(R4)                 OVER HEADER\n         LA    R2,GXREF\nBLDUS3   L     R1,GXRUCBPT              UCB ADDR               SS JAN84\n         MVC   DEV#,UCBNAME(R1)         COPY DEV CUU           SS JAN84\n         LA    R4,UCBLNGX(R4)           NEXT ENTRY             DM JUN83\n         LA    R2,GXRLNG(R2)            NEXT GXREF ENTRY       DM JUN83\n         BCT   R3,BLDUS3\n         DROP  R2                                              DM JUN83\nXA7      DS    0H                                              SS JAN84\n         LA    R4,3(R4)                 ROUND UP TO FULL WORD\n         N     R4,=F'-4'                TRUNCATE TO FULLWORD   DM NOV84\n         USING GRPSECT,R4                                      DM JUN83\n         ST    R4,EDTGRP                INIT HDR               DM JUN83\n         LH    R5,GRPLNG2               ENTRY LENGTH           DM JUN83\n         ST    R5,4(R4)                 INIT GRP SEC HDR\n         LA    R4,8(R4)                 OVER GRP SEC HDR\n         LA    R2,GXREF\n         USING GXREFDEF,R2                                     DM JUN83\n         L     R3,NUMUNIT               NUM OF UNITS           SS JAN84\n         LA    R5,1                     FIRST NEW GRP ID\n* NEXT LA HAS NO EFFECT IN NON XA                              SS JAN84\n         LA    R9,1                     FIRST UCB INDEX        SS JAN84\n         LR    R6,R2                    TO COMPRESS GXREF\nBLDGS    SR    R7,R7                    TO COUNT UCBS IN GRP\n* NEXT LR HAS NO EFFECT IN XA                                  SS JAN84\n         LR    R15,R14                  START AT FIRST UCB\nTESTGRP  CLC   GXROLDID,GXROLDID-GXREFDEF(R6)   CHK GRP ID     DM JUN83\n         BNE   SETGE                    NO, SET UP FOR NEXT\n         CLC   GXRMASKS,GXRMASKS-GXREFDEF(R6) CHK MASK         SS JAN84\n         BNE   SETGE                    NO, SET UP FOR NEXT\n         LA    R2,GXRLNG(R2)            NEXT GXE               DM JUN83\n* NEXT LA HAS NO EFFECT IN XA                                  SS JAN84\n         LA    R14,UCBLNG(R14)          NEXT UNIT              DM JUN83\n         LA    R7,1(R7)                 COUNT UNITS THIS GRP\n         BCT   R3,TESTGRP               KEEP COUNTING UNITS IN GRP\nSETGE    STH   R5,GXRNEWID-GXREFDEF(R6) NEW GRP IN GXREF       SS JAN84\n         TM    FLAG2,CVTMVSE            XZ                     SS JAN84\n         BO    XA8                      YES                    SS JAN84\n         ST    R5,GRPID                 GRP ID IN ENTRY        DM JUN83\n         ST    R7,GRPUCB#               NUM UCBS IN GRP        DM JUN83\n         ST    R15,GRPUCB1              POINT TO 1ST UCB OF GRPDM JUN83\n         LA    R4,GRPLNG(R4)            NEXT ENTRY             DM JUN83\n         B     XA9                                             SS JAN84\nXA8      DS    0H                                              SS JAN84\n         STH   R5,GRPID                 GRP ID IN ENTRY        DM JUN83\n         STH   R7,GRPDEV#               NUM UCBS IN GRP        DM JUN83\n         STH   R9,GRPDEV1               POINT TO 1ST UCB OF GRPDM JUN83\n         LA    R9,0(R7,R9)              FIRST INDEX OF NEXT    SS JAN84\n         LA    R4,GRPLNGX(R4)           NEXT ENTRY             DM JUN83\nXA9      DS    0H                                              SS JAN84\n         LTR   R3,R3                    WAS IT LAST UCB\n         BZ    FIXGS                    YES, COMPLETE HDR\n         LA    R6,GXRLNG(R6)            NEXT GXE               SS JAN84\n*              COMPRESS                                        DM JUN83\n         MVC   GXREFDEF-GXREFDEF(GXRLNG,R6),GXREFDEF           DM JUN83\n         LA    R5,1(R5)                 NEXT NEW GRP ID\n         B     BLDGS\n         DROP  R2,R4                                           DM JUN83\n         SPACE ,                                               DM JUN83\nFIXGS    L     R1,EDTGRP                HDR GRP SEC            DM JUN83\n         ST    R5,0(R1)                 INIT HDR WITH NUM OF GRPS\n         ST    R5,NUMUNIT               NEW SIZE OF GXREF\n         LA    R6,GXRLNG(R6)            START PTXREF AFTER GXREF\n         ST    R6,APTXREF               HOLD FOR LATER\n         LA    R4,3(R4)                 ROUND UP TO FULL WORD  SS JAN84\n         N     R4,=F'-4'                TRUNCATE TO FULLWORD   SS JAN84\n*\n*  BUILD GROUP POINTER TABLE\n*\n         ST    R4,ADRGRPT               SAVE ADDRESS           DM NOV83\n         ST    R4,EDTGRPT               INIT HDR ADDR GRP PTR  DM NOV83\n         LA    R5,GRPTLNG               SIZE OF EACH PT        DM NOV83\n         ST    R5,4(R4)                 INIT HDR OF GRP PT SEC DM NOV83\n         LA    R4,8(R4)                 OVER HEADER            DM NOV83\n         SR    R7,R7                    ZERO COUNT OF ENTRIES\n         L     R3,EDTLKUP-EDT(,R8)      OLD LOOK UP SEC        DM JUN83\n         L     R2,0(R3)                 NUM OF ENTRIES\n         LA    R3,8(R3)                 OVER HDR\n         USING LKPSECT,R3                                      DM JUN83\nBLDGPLU  LA    R1,MNT                   MODIFIED NAME TABLE\nSCANNM   CLI   0(R1),FF                 END OF NAMES\n         BE    NOMOD                    YES,  NO FOUND .. NO MOD\n         CLC   MNTNAME(8,R1),LKPNAME    ARE UNIT NAMES SAME    SS JAN84\n         BNE   NEXTNM                   NO, TRY NEXT\n         TM    MNTFLAG(R1),EXCLUDE      WE GOING TO MODIFY IT  SS JAN84\n         BZ    RPUNIT                   NO, WE REPLACE IT      SS AUG84\n         MVC   MASK,MNTMASK(R1)         YES,  SAVE MASK FOR CMPSS JAN84\n         LH    R9,MNTMASKI(R1)          GET MASK INDEX         SS JAN84\n         B     SETGN                    CONTINUE WORKING THE EDT\nNEXTNM   LA    R1,MNTLN(,R1)            NEXT MOD NAME TABLE EN SS JAN84\n         B     SCANNM\nNOMOD    MVC   MASK,=F'0'               USE NULL MASK\n         LA    R9,0                     USE NULL INDEX         SS JAN84\nSETGN    STM   R2,R3,COUNT1             SAVE OUTER LOOP CONTROL\n         PUSH  USING                                           DM JUN83\n         SR    R15,R15                  ZERO FOR NULL GENERIC  SS SEP84\n         LM    R2,R3,LKPGNRC#           COUNT, PT TO GENERIC   DM JUN83\n         LTR   R2,R2                    TEST FOR ZERO GENERICS SS SEP84\n         BZ    BUMPUN2                  SKIP THIS NAME         SS SEP84\n         USING GNRCSECT,R3                                     DM JUN83\nGENGN    STM   R2,R3,COUNT2             SAVE NEXT IN LOOP CONTROL\n         PUSH  USING                                           DM JUN83\n         LM    R2,R3,GNRCGRP#           COUNT, PT TO GRP PT SECDM JUN83\n         USING GRPTSECT,R3                                     SS JAN84\n         SR    R15,R15                  NEW COUNT OF PT\nGETGP    L     R1,GRPTPTR               LOAD POINTER TO GRP    SS JAN84\n         TM    FLAG2,CVTMVSE            XA                     SS JAN84\n         BO    XA10                                            SS JAN84\n         MVC   GROUP,GRPIDHF(R1)        SAVE FOR COMPARE       SS JAN84\n         B     XA11                                            SS JAN84\nXA10     DS    0H                                              SS JAN84\n         MVC   GROUP,GRPID-GRPSECT(R1)  SAVE FOR COMPARE       SS JAN84\nXA11     DS    0H                                              SS JAN84\n         L     R5,NUMUNIT               NUM UNITS              SS JAN84\n         LA    R14,GXREF                FOR SCAN OF TABLE\n         USING GXREFDEF,R14                                    DM JUN83\n         L     R1,EDTGRP                GROUP SECTION          DM JUN83\n         LA    R1,8(R1)                 OVER HDR\nFINDGP   CLC   GROUP,GXROLDID           SAME GROUP             DM JUN83\n         BNE   NEXTGRP                  NO TRY NEXT\n         L     R0,GXRMASK(R9)           MASK                   SS JAN84\n         N     R0,MASK                  SAME BIT ON\n         BNZ   NEXTGRP                  BIT ON, EXCLUDE THIS GROUP\n         LA    R15,1(R15)               ONE MORE INCLUDED\n         LA    R7,1(R7)                 1 TO TOTAL\n         ST    R1,0(R4)                 BUILD POINTER\n         LA    R4,GRPTLNG(R4)           BUMP TO NEXT PLACE     DM JUN83\nNEXTGRP  AH    R1,GRPLNG2               NEXT GROUP             DM JUN83\n         LA    R14,GXRLNG(R14)          NEXT IN GXREF          DM JUN83\n         BCT   R5,FINDGP                WORK ALL GROUPS\n         LA    R3,GRPTLNG(R3)           NEXT OLD POINTER       DM JUN83\n         BCT   R2,GETGP\n         DROP  R14                                             DM JUN83\n         STH   R15,0(R6)                SAVE COUNT             SS JAN84\n         LA    R6,2(R6)                 NEXT PTXREF            SS JAN84\n         LM    R2,R3,COUNT2             RESTORE LOOP CONTROL\n         POP   USING                                           DM JUN83\n         LA    R3,GNRCLNG(R3)           NEXT GENERIC           DM JUN83\n         BCT   R2,GENGN                 REPEAT FOR THIS GENERIC\n         B     BUMPUN\nRPUNIT   OI    MNTFLAG(R1),REPL         INDICATE REPLACED      SS AUG84\n         STM   R2,R3,COUNT1             SAVE OUTER LOOP CONTROL\n*        PUSH  USING ALREADY DONE AFTER LABEL SETGN            SS AUG84\n*                                                              SS AUG84\n*    SET GROUP POINTERS FOR REPLACED NAMES                     SS AUG84\n*                                                              SS AUG84\n         L     R5,NUMUNIT               GXREF COUNTER          SS AUG84\n         LA    R14,GXREF                TO SCAN GXREF          SS AUG84\n         USING GXREFDEF,R14                                    SS AUG83\n         L     R3,EDTGRP                GRP SEC                SS AUG83\n         USING GRPSECT,R3                                      SS AUG83\n         LA    R3,8(R3)                 OVER HDR               SS AUG84\n         SR    R15,R15                  COUNTER OF GROUPS      SS AUG84\n         LH    R9,MNTMASKI(R1)          MASK INDEX             SS AUG84\nMATCHMSK L     R0,GXRMASK(R9)           MASK FROM GXREF        SS AUG84\n         N     R0,MNTMASK(R1)           COMPARE MASKS          SS AUG84\n         BZ    NOTMATCH                 GROUP NOT INCLUDED     SS AUG84\n         ST    R3,0(R4)                 SET GROUP POINTER      SS AUG84\n         LA    R7,1(R7)                 ADD 1 TO TOTAL         SS AUG84\n         LA    R15,1(R15)               NUM GROUPS FOR THIS NAMES AUG84\n         LA    R4,GRPTLNG(R4)           NEXT PLACE FOR POINTER SS AUG84\nNOTMATCH AH    R3,GRPLNG2               NEXT GROUP             SS AUG84\n         LA    R14,GXRLNG(R14)          NEXT GROUP IN GXREF    SS AUG84\n         BCT   R5,MATCHMSK              KEEP LOOKING OF MATCHESSS AUG84\n         DROP  R14                                             SS AUG84\nBUMPUN2  DS    0H                       MAKE PLACE HOLDER      SS SEP84\n         STH   R15,0(R6)                SAVE COUNT IN PTXREF   SS AUG84\n         LA    R6,2(R6)                 NEXT PLACE IN PTXREF   SS AUG84\n         B     BUMPUN                                          SS AUG84\n*\n*\nBUMPUN   LM    R2,R3,COUNT1             RESTORE LOOP CONTROL\n         POP   USING                                           DM JUN83\nBUMPIT   LA    R3,LKPLNG(R3)            NEXT NAME              DM JUN83\n         BCT   R2,BLDGPLU\n         DROP  R3                                              DM JUN83\n*\n*    ADD GROUP POINTERS FOR NEW NAMES\n*\n         USING GRPTSECT,R4                                     DM JUN83\n         LA    R2,MNT                   USE MODIFIED NAME TABLE\nADDGP    CLI   0(R2),FF                 LAST ENTRY INDICATOR\n         BE    ENDGP                    YES, CLEANUP THIS SECTION\n         TM    MNTFLAG(R2),EXCLUDE      EXCLUDE OPERATION\n         BO    BUMPMNTB                 YES, DO NOT ADD\n         TM    MNTFLAG(R2),REPL         REPLACED UNIT\n         BO    BUMPMNTB                 YES, DO NOT ADD\n         L     R5,NUMUNIT               GXREF COUNTER          SS JAN84\n         LA    R14,GXREF                TO SCAN GXREF\n         USING GXREFDEF,R14                                    DM JUN83\n         L     R3,EDTGRP                GRP SEC                DM JUN83\n         USING GRPSECT,R3                                      DM JUN83\n         LA    R3,8(R3)                 OVER HDR\n         SR    R15,R15                  COUNTER OF GROUPS\nSCANMASK LH    R9,MNTMASKI(R2)          MASK INDEX             SS JAN84\n         L     R0,GXRMASK(R9)           MASK FROM GXREF        SS JAN84\n         N     R0,MNTMASK(R2)           COMPARE MASKS          SS JAN84\n         BZ    NOMATCH                  GROUP NOT INCLUDED\n         ST    R3,GRPTPTR               SET GROUP POINTER\n         LA    R7,1(R7)                 ADD 1 TO TOTAL\n         LA    R15,1(R15)               NUM GROUPS FOR THIS NAME\n         LA    R4,GRPTLNG(R4)           NEXT PLACE FOR POINTER DM JUN83\nNOMATCH  AH    R3,GRPLNG2               NEXT GROUP             DM JUN83\n         LA    R14,GXRLNG(R14)          NEXT GROUP IN GXREF    DM JUN83\n         BCT   R5,SCANMASK              KEEP LOOKING OF MATCHES\n         DROP  R14                                             DM JUN83\n         STH   R15,0(R6)                SAVE COUNT OF GROUPS IN PTXREF\n         LA    R6,2(R6)                 NEXT PLACE IN PTXREF\nBUMPMNTB LA    R2,MNTLN(R2)             NEXT NAME IN MNT\n         B     ADDGP\n         DROP  R3,R4                                           DM JUN83\nENDGP    L     R14,ADRGRPT              HEAD OF GROUP PT SEC   DM NOV83\n         ST    R7,0(R14)                INIT HDR .. COUNT OF POINTERS\n*\n*   BUILD GENERIC SECTION\n*\n         LA    R14,8(R14)               OVER HDR OF GROUP PT SEC\n         ST    R4,EDTGNRC               INIT HDR .. NEW GENERIC SEC\n         USING GNRCSECT,R4                                     DM JUN83\n         LA    R5,GNRCLNG               SIZE OF GENERIC ENTRY\n         STH   R5,GNRCLNG2              SAVE LENGTH FOR MH     SS JAN84\n         ST    R5,4(R4)                 INIT HDR OF GENERIC SEC\n         LA    R4,8(R4)                 OVER HEADER\n         SR    R7,R7                    ZERO COUNT OF TOTAL ENTRIES\n         L     R6,APTXREF               RESET TO BEGINNING OT PTXREF\n         LR    R5,R6                    BUILD OVER OLD\n         L     R3,EDTLKUP-EDT(R8)       LOOKUP SEC IN OLD EDT  DM JUN83\n         L     R2,0(R3)                 ENTRIES IN LOOKUP SEC\n         LA    R3,8(R3)                 OVER HEADER\nBLDGN    LA    R1,MNT                   CHECK WITH MODIFIED NAME TABLE\nCKNM     CLI   0(R1),FF                 END OF NAME INDICATOR\n         BE    ENDCK                    YES\n         CLC   0(8,R1),0(R3)            UNIT NAME SAME\n         BNE   MORECK                   TRY AGAIN\n         TM    MNTFLAG(R1),EXCLUDE      IS IT EXCLUDE OPER\n         BO    ENDCK                    YES, OK, PROCESS IT\n         B     REPLTHIS                 NO, REPLACED           SS AUG84\nMORECK   LA    R1,MNTLN(R1)             NEXT NAME IN MNT\n         B     CKNM\nENDCK    STM   R2,R3,COUNT1             SAVE LOOP CONTROL\n         LM    R2,R3,16(R3)             COUNT, PT GENERIC SEC\n         LR    R15,R2                   MAY ADJUST COUNT\n         LTR   R2,R2                    CHECK FOR ANY GENERICS SS SEP84\n         BNZ   BLDGNE                   NORMAL                 SS SEP84\n         LA    R6,2(,R6)                SKIP PLACE HOLDER      SS SEP84\n         B     NOGENR                   NO REAL GENERICS       SS SEP84\nBLDGNE   LH    R1,0(R6)                 COUNT OF POINTERS      SS JAN84\n         LTR   R1,R1                    HAS IT BEEN NULLED\n         BZ    COMPACT                  YES, DONT USE THIS GENERIC\n         MVC   GNRCDEVT,GNRCDEVT-GNRCSECT(R3) COPY OLD DEVTYP  DM JUN83\n         ST    R1,GNRCGRP#              COUNT OF POINTERS      DM JUN83\n         ST    R14,GNRCGRP1             POINT TO FIRST         DM JUN83\n         SLL   R1,2                     BY 4, FULL WORD\n         AR    R14,R1                   SKIP TO NEXT SET OF PT\n         LA    R7,1(R7)                 BUMP TOTAL GENERICS\n         LA    R4,GNRCLNG(R4)           NEXT NEW GENERIC       DM JUN83\n         B     BUMPGN\nCOMPACT  BCTR  R15,0                    ONE LESS GENERIC THAN BEFORE\nBUMPGN   LA    R6,2(R6)                 PT GO SIZE OF NEXT SET SS JAN84\n         LA    R3,GNRCLNG(R3)           NEXT OLD GENERIC       SS JAN84\n         BCT   R2,BLDGNE\nNOGENR   DS    0H                       SET GENERICS TO ZERO   SS SEP84\n         STH   R15,0(R5)                SAVE NUM OF GENERICS   SS JAN84\n         LA    R5,2(R5)                 NEXT SLOT              SS JAN84\n         B     OVERTHIS                                        SS AUG84\n*\n*   BUILD GENERICS FOR  REPLACED UNIT NAMES\n*\nREPLTHIS STM   R2,R3,COUNT1             SAVE OUTTER LOOP REGS  SS AUG84\n         LA    R15,GXRLNG               LENGTH OF GRXREF ENT   SS AUG84\n         STH   R15,GXRLNG2              SAVE LENG FOR MH       SS AUG84\n         LH    R2,0(R6)                 CNT PT FOR NEW NAME    SS AUG84\n         ST    R6,COUNT2                HOLD SO REG CAN BE USEDSS AUG84\n         SR    R6,R6                    ZERO COUNT OF GENERICS SS AUG84\n         LTR   R2,R2                    ARE THERE ANY DEV      SS AUG84\n         BZ    NOGENER                  NO NO GN FOR THIS ONE  SS AUG84\n         SR    R0,R0                    NULL DEVTYP            SS AUG84\n         SR    R15,R15                  START WITH NO POINTERS SS AUG84\nSCANON   L     R1,0(R14)                ADDR OF GROUP          SS AUG84\n         TM    FLAG2,CVTMVSE                                   SS AUG84\n         BO    XA13A                                           SS AUG84\n         L     R1,GRPID-GRPSECT(R1)     GROUP ID               SS AUG84\n         B     XA14A                                           SS AUG84\nXA13A    DS    0H                                              SS AUG84\n         LH    R1,GRPID-GRPSECT(R1)     GROUP ID               SS AUG84\nXA14A    DS    0H                                              SS AUG84\n         BCTR  R1,0                     OFFSET TO ZERO         SS AUG84\n         MH    R1,GXRLNG2               OFFSET INTO  GXREF     SS AUG84\n         LA    R1,GXREF(R1)             ADDRES OF ENTRY        SS AUG84\n         L     R1,GXRUCBPT-GXREFDEF(R1) GET UCB ADDR           SS AUG84\n         CLI   UCBTYPE+2(R1),X'20'      DASD TYPE              SS NOV90\n         BE    YESDASD                  YES                    SS NOV90\n         CLI   UCBTYPE+2(R1),X'08'      UNIT RECORD            SS NOV90\n         BE    YESUR                    YES                    SS NOV90\n         CLI   UCBTYPE+2(R1),X'10'      GRAPFICS DEVICE        SS NOV90\n         BE    OPTOFF                   YES, OPTIONS OFF       SS NOV90\n         CLI   UCBTYPE+2(R1),X'40'      TELEPROCESSING         SS NOV90\n         BE    OPTOFF                   YES, OPTIONS OFF       SS NOV90\n         CLI   UCBTYPE+2(R1),X'41'      CTC                    SS NOV90\n         BE    YESCTC                   YES                    SS NOV90\n         L     R1,UCBTYPE(R1)           GET DEVICE TYPE        SS NOV90\n         B     NODASD                   NO SHR BIT             SS NOV90\nYESDASD  L     R1,UCBTYPE(R1)           GET DEVICE TYPE        SS NOV90\n         N     R1,=X'FFDFFFFF'          TURN OFF SHR BITS      SS NOV90\n         B     NODASD                   NO SHR BIT             SS NOV90\nYESUR    CLI   UCBTYPE+3(R1),X'09'      3211 TYPE              SS NOV90\n         BE    YES3211                  YES                    SS NOV90\nOPTOFF   L     R1,UCBTYPE(R1)           GET DEVICE TYPE        SS NOV90\n         N     R1,=X'FF00FFFF'          TURN OFF OPT BITS      SS NOV90\n         B     NODASD                   NO SHR BIT             SS NOV90\nYES3211  L     R1,UCBTYPE(R1)           GET DEVICE TYPE        SS NOV90\n         N     R1,=X'FF80FFFF'          TURN OFF OPT BITS      SS NOV90\n         B     NODASD                   NO SHR BIT             SS NOV90\nYESCTC   L     R1,UCBTYPE(R1)           GET DEVICE TYPE        SS NOV90\n         N     R1,=X'0000FFFF'          TURN OFF OPT BITS      SS NOV90\n         B     NODASD                   NO SHR BIT             SS NOV90\nNODASD   CR    R0,R1                    SAME AS CURRENT        SS AUG84\n         BE    DONTADD                  COUNT UNTIL NEW DEVTYP SS AUG84\n         LTR   R0,R0                    YES,  FIRST TIME       SS AUG84\n         BZ    FIRSTONE                 YES, SET UP THIS DEVTYPSS AUG84\n         ST    R15,GNRCGRP#             GROUPS CNT - THIS GENERIC AUG84\n         SR    R15,R15                  RESET TO ZERO FOR NEXT SS AUG84\n         LA    R4,GNRCLNG(R4)           NEXT NEW GENERIC       SS AUG84\n         LA    R7,1(R7)                 ONE TO TOTAL COUNT     SS AUG84\nFIRSTONE ST    R1,GNRCDEVT              SET DEVTYPE            SS AUG84\n         LR    R0,R1                    NEW BECOMES OLD DEVTYPESS AUG84\n         ST    R14,GNRCGRP1             POINT TO FIRST OF BUNCHSS AUG84\n         LA    R6,1(R6)                 ONE MORE GENERIC       SS AUG84\nDONTADD  LA    R14,4(R14)               NEXT GROUP POINTER     SS AUG84\n         LA    R15,1(R15)               ONE MORE POINTER TO COUNT AUG84\n         BCT   R2,SCANON                                       SS AUG84\n         ST    R15,GNRCGRP#             GRPS FOR THIS GENERIC  SS AUG84\n         LA    R4,GNRCLNG(R4)           NEXT SLOT FOR GENERIC  SS AUG84\n         LA    R7,1(R7)                 ONE TO TOTAL COUNT     SS AUG84\nNOGENER  STH   R6,0(R5)                 SAVE COUNT OF GENERICS SS AUG84\n         LA    R5,2(R5)                 BUMP FOR NEXT UNITNAME SS AUG84\n         L     R6,COUNT2                RESTORE THIS REG       SS AUG84\n         LA    R6,2(R6)                 NEXT COUNT TO POINTERS SS AUG84\nOVERTHIS LM    R2,R3,COUNT1             RESTORE LOOP CONTROL   SS AUG84\n         LA    R3,LKPLNG(R3)            NEXT OLD UNIT NAME     SS AUG84\n         BCT   R2,BLDGN\n*\n*   ADD GENERICS FOR NEW UNIT NAMES                            SS AUG84\n*\n         LA    R3,MNT                   GET NAMES FROM MNT\n         LA    R15,GXRLNG               LENGTH OF GRXREF ENT   SS JAN84\n         STH   R15,GXRLNG2              SAVE LENG FOR MH       SS JAN84\nADDGN    CLI   0(R3),FF                 END OF TABLE\n         BE    SETGNC                   YES, CLEANUP\n         TM    MNTFLAG(R3),EXCLUDE      EXCLUDE OPERATION\n         BO    NXTNM                    ALREADY PROCESSED\n         TM    MNTFLAG(R3),REPL         REPLACED UNIT          SS AUG84\n         BO    NXTNM                    ALREADY PROCESSED      SS AUG84\n         LH    R2,0(R6)                 CNT PT FOR NEW NAME    SS JAN84\n         ST    R6,COUNT2                HOLD SO REG CAN BE USED\n         SR    R6,R6                    ZERO COUNT OF GENERICS\n         LTR   R2,R2                    ARE THERE ANY DEV\n         BZ    NOGNS                    NO NO GN FOR THIS ONE\n         SR    R0,R0                    NULL DEVTYP\n         SR    R15,R15                  START WITH NO POINTERS\nSCANMORE L     R1,0(R14)                ADDR OF GROUP\n         TM    FLAG2,CVTMVSE                                   SS JAN84\n         BO    XA13                                            SS JAN84\n         L     R1,GRPID-GRPSECT(R1)     GROUP ID               SS JAN84\n         B     XA14                                            SS JAN84\nXA13     DS    0H                                              SS JAN84\n         LH    R1,GRPID-GRPSECT(R1)     GROUP ID               SS JAN84\nXA14     DS    0H                                              SS JAN84\n         BCTR  R1,0                     OFFSET TO ZERO         SS JAN84\n         MH    R1,GXRLNG2               OFFSET INTO  GXREF     SS JAN84\n         LA    R1,GXREF(R1)             ADDRES OF ENTRY        SS JAN84\n         L     R1,GXRUCBPT-GXREFDEF(R1) GET UCB ADDR           SS JAN84\n         CLI   UCBTYPE+2(R1),X'20'      DASD TYPE              SS JAN84\n         L     R1,UCBTYPE(R1)           GET DEVICE TYPE        SS JAN84\n         BNE   NOTDASD                  NO SHR BIT             SS JAN84\n         N     R1,=X'FFDFFFFF'          TURN OFF SHR BITS\nNOTDASD  CR    R0,R1                    SAME AS CURRENT        SS JAN84\n         BE    NOADD                    NO COUNT UNTIL NEW DEVTYP\n         LTR   R0,R0                    YES,  FIRST TIME\n         BZ    FIRST                    YES, SET UP THIS DEVTYP\n         ST    R15,GNRCGRP#             GROUPS COUNTED FOR THIS GENERIC\n         SR    R15,R15                  RESET TO ZERO FOR NEXT\n         LA    R4,GNRCLNG(R4)           NEXT NEW GENERIC       DM JUN83\n         LA    R7,1(R7)                 ONE TO TOTAL COUNT\nFIRST    ST    R1,GNRCDEVT              SET DEVTYPE            DM JUN83\n         LR    R0,R1                    NEW BECOMES OLD DEVTYPE\n         ST    R14,GNRCGRP1             POINT TO FIRST OF BUNCHDM JUN83\n         LA    R6,1(R6)                 ONE MORE GENERIC\nNOADD    LA    R14,4(R14)               NEXT GROUP POINTER\n         LA    R15,1(R15)               ONE MORE POINTER TO COUNT\n         BCT   R2,SCANMORE\n         ST    R15,GNRCGRP#             GRPS FOR THIS GENERIC  DM JUN83\n         LA    R4,GNRCLNG(R4)           NEXT SLOT FOR GENERIC  DM JUN83\n         LA    R7,1(R7)                 ONE TO TOTAL COUNT\nNOGNS    STH   R6,0(R5)                 SAVE COUNT OF GENERICS SS JAN84\n         LA    R5,2(R5)                 BUMP FOR NEXT UNITNAME SS JAN84\n         L     R6,COUNT2                RESTORE THIS REG\n         LA    R6,2(R6)                 NEXT COUNT TO POINTERS SS JAN84\nNXTNM    LA    R3,MNTLN(R3)             NEXT NAME\n         B     ADDGN\nSETGNC   L     R14,EDTGNRC              TOP OF GENERIC SEC     DM JUN83\n         ST    R7,0(R14)                TOTAL COUNT OF GENERICS\n         DROP  R4                                              DM JUN83\n*\n*   BUILD  LOOK UP SECTION OF EDT\n*\n         LA    R14,8(R14)               OVER HEADER OF GEN SEC\n         USING GNRCSECT,R14                                    DM JUN83\n         L     R6,APTXREF               LIST OF COUNTS OF GENERICS\n         ST    R4,EDTLKUP               INIT HDR LOOKUP SEC    DM JUN83\n         LA    R2,LKPLNG                LENGTH OF EACH ENTRY   DM JUN83\n         ST    R2,4(R4)                 INIT LU HDR WITH SIZE\n         SR    R7,R7                    USED FOR TOTAL COUNT OF ENTRIES\n         L     R3,EDTLKUP-EDT(R8)       LOOKUP SEC IN OLD EDT  DM JUN83\n         L     R2,0(R3)                 COUNT OF ENTRIES\n         LA    R4,8(R4)                 OVER HEADER\n         USING LKPSECT,R4                                      DM JUN83\n         LA    R3,8(R3)                 OVER HEADER\nBLDLU    LA    R1,MNT                   CHECK WITH MNT\nTESTMN   CLI   0(R1),FF                 END OF TABLE\n         BE    EXITCK                   YES, NO CHANGES FOUND\n         CLC   0(8,R1),0(R3)            IS UNIT NAME SAME\n         BE    EXITCK                   YES, PROCESS IT        SS AUG84\nAROUND   LA    R1,MNTLN(R1)             NEXT NAME\n         B     TESTMN\nEXITCK   LR    R15,R1                   SAVE MNT ENTRY ADDR    SS AUG84\n         SR    R1,R1                    FOR IC INST            SS AUG84\n         LH    R1,0(R6)                 NUMBER OF GENERICS     SS JAN84\n         LTR   R1,R1                    IS THERE ANY\n         BZ    ONLYGN                   NO, SKIP, ONLY INC GN COUNT\n*              COPY NAME AND DEVTYP FROM MODEL EDT             DM JUN83\n         MVC   LKPNAME(12),LKPNAME-LKPSECT(R3)                 DM JUN83\n         CLI   LKPDEVT+3-LKPSECT(R3),0  NO, IS IT FULL DEVTYP  SS JAN84\n         BNE   FULLD                    YES, SKIP\n         MVC   UNIQUE,LKPDEVT-LKPSECT(R3) SAVE, MAY BE LAST\nFULLD    ST    R1,LKPGNRC#              SET NUMBER OF GENERICS DM JUN83\n         ST    R14,LKPGNRC1             POINT TO FIRST GENERIC DM JUN83\n*              COPY FLAGS FROM MODEL EDT                       DM JUN83\n         MVC   LKPFLAGS,LKPFLAGS-LKPSECT(R3)                   DM JUN83\n         CLI   0(R15),FF                LAST ENTRY             SS AUG84\n         BE    NOTVIO                   NO FLAGS               SS AUG84\n         TM    MNTFLAG(R15),LKPVIO      IS IT A VIO UNIT       SS AUG84\n         BZ    NOTVIO                   NO, NORMAL             SS AUG84\n         OI    LKPFLAGS,LKPVIO          SET VIO FLAG           SS AUG84\nNOTVIO   TM    24(R3),X'40'             ALT MASK FLAG          SS AUG84\n         BZ    NOFLG                    NO FLAG, NORMAL\n         LA    R0,1                     IF ONLY ONE GENERIC\n         CR    R0,R1                    THEN NO ALT MASK\n         BNE   NOFLG                    MORE THAN ONE\n         NI    LKPFLAGS,X'AF'           ONLY ONE ZERO FLAG     DM JUN83\nNOFLG    MH    R1,GNRCLNG2              MULTIPLY BY GEN SEC LN SS JAN84\n         AR    R14,R1                   NEXT BUNCH OF GENERICS\n         LA    R4,LKPLNG(R4)            NEXT NEW UNIT NAME     DM JUN83\n         LA    R7,1(R7)                 ADD ONE TO TOTAL COUNT\nONLYGN   LA    R6,2(R6)                 NEXT GENERIC COUNT     SS JAN84\nBUMPLU   LA    R3,LKPLNG(R3)            NEXT OLD UNIT IN LU SECDM JUN83\n         BCT   R2,BLDLU\n*\n*  ADD TO LOOK UP SEC FOR MODIFIED NAME TABLE\n*\n         LA    R3,MNT\n         LH    R15,UNIQUE               LAST UNIQUE QUALIFIER  SS JAN84\n         LA    R15,1(R15)               BUMP UNIQUE QUALIFIER\nMORELU   CLI   0(R3),FF                 END OF TABLE\n         BE    SETLU                    YES, DONE HERE\n         TM    MNTFLAG(R3),EXCLUDE      EXCLUDE OPERATION\n         BO    NEXTNAME                 YES, ALREADY DONE\n         TM    MNTFLAG(R3),REPL         REPLACED UNIT          SS AUG84\n         BO    NEXTNAME                 YES, ALREADY DONE      SS AUG84\n         MVC   LKPNAME,MNTNAME(R3)      COPY NAME              SS JAN84\n         SR    R1,R1                    FOR IC\n         LH    R1,0(R6)                 GENERIC COUNT          SS JAN84\n         LTR   R1,R1                    ARE THERE ANY GENERICS\n         BZ    NOLU                     NO, THEN DON'T BUILD\n         SR    R0,R0                    MAKE ZERO\n         ST    R0,LKPDEVT               ZERO DEVTYPE\n         ST    R0,LKPFLAGS              ZERO FLAGS             SS JAN84\n         MVC   LKPDEVT+2(1),GNRCDEVT+2  DEV CLASS FROM GENERIC DM JUN83\n         STC   R15,LKPDEVT+1            DEV LOOK VALUE UNIQUE  DM JUN83\n         LA    R15,1(R15)               BUMP UNIQUE QUALIFIER\nSETPT    ST    R1,LKPGNRC#              SET WITH NUMBER OF GENERICS\n         ST    R14,LKPGNRC1             POINT TO FIRST GENERIC DM JUN83\n         TM    MNTFLAG(R3),LKPVIO       IS IT A VIO UNIT       SS JAN84\n         BZ    NOVIO                    NO, NORMAL\n         OI    LKPFLAGS,LKPVIO          SET VIO FLAG           SS JAN84\nNOVIO    LA    R4,LKPLNG(R4)            NEXT ENTRY             DM JUN83\n         LA    R7,1(R7)                 BUMP TOTAL\nNOLU     LA    R6,2(R6)                 NEXT COUNT OF GENERICS SS JAN84\n         MH    R1,GNRCLNG2              MULTIPLY BY GEN SEC LN SS JAN84\n         AR    R14,R1                   NEXT BUNCH OF GENERICS\nNEXTNAME LA    R3,MNTLN(R3)             NEXT NAME IN MNT\n         B     MORELU\n         DROP  R4,R14                                          DM JUN83\nSETLU    L     R3,EDTLKUP               START OF LOOK UP SEC   DM JUN83\n         USING LKPSECT,R3                                      DM JUN83\n         ST    R7,0(R3)                 INIT HDR WITH TOTAL NUM ENTRIES\n*\n*   BUILD MASK SECTION\n*\n         SR    R7,R7                    ZERO COUNT FOR TOTAL MASKS\n         ST    R4,EDTMSK                INIT HEADER / MASK SEC DM JUN83\n         L     R15,EDTGRP               GROUP SEC              DM JUN83\n         L     R15,0(R15)               COUNT OF GROUPS\n         LA    R15,07(R15)              ROUND UP TO 1 BYTES\n         SRL   R15,3                    DIVIDE BY 8 GIVES 8 BITS/BYTE\n         ST    R15,4(R4)                LENGTH OF EACH ENTRY\n         LA    R4,8(R4)                 OVER HEADER\n         USING MSKSECT,R4                                      DM JUN83\n         L     R2,0(R3)                 NUMBER IN LOOK UP SEC\n         LA    R3,8(R3)                 OVER HEADER\nBLDMSK   XC    MSKMASK(0),MSKMASK       FOR CLEAR USE EX INST  DM JUN83\n         EX    R15,BLDMSK\n         XC    LKPALTPT,LKPALTPT        CLEAR ALT MASK FIELD   DM JUN83\n         LM    R5,R6,LKPGNRC#           CNT, PTR/GENERIC SEC   DM JUN83\n         USING GNRCSECT,R6                                     DM JUN83\n         ST    R2,COUNT1                SAVE LOOP CONTROL\n         LR    R0,R3                    SAVE LOOP CONTROL\n         PUSH  USING                                           DM JUN83\n         DROP  R3\nFOREACH  L     R8,GNRCGRP1              FIRST GROUP POINTER    DM JUN83\n         USING GRPTSECT,R8                                     DM JUN83\n         L     R14,GNRCGRP#             COUNT OF POINTERS      DM JUN83\nGPID     L     R1,GRPTPTR               GROUP POINTER          DM JUN83\n         TM    FLAG2,CVTMVSE            XZ                     SS JAN84\n         BO    XA88                     YES                    SS JAN84\n         L     R2,GRPID-GRPSECT(R1)     GRP ID IN ENTRY        DM JUN83\n         B     XA99                                            SS JAN84\nXA88     DS    0H                                              SS JAN84\n         LH    R2,GRPID-GRPSECT(R1)     GRP ID IN ENTRY        DM JUN83\nXA99     DS    0H                                              SS JAN84\n         BCTR  R2,0                     REFERENCE TO ZERO\n         SRDL  R2,3                     SEPARATE 3 LOWER BITS\n         SRL   R3,29                    RIGHT JUSTIFY\n         SR    R1,R1                    CLEAR FOR ICM INST\n         ICM   R1,B'1000',=X'80'        BIT TO BE POSITIONED\n         SRL   R1,0(R3)                 POSITION BIT WITHIN BYTE\n         O     R1,MSKMASK(R2)           PUT BIT IN MASK        DM JUN83\n         ST    R1,MSKMASK(R2)             AT PROPER BYTE       DM JUN83\n         LA    R8,GRPTLNG(R8)           NEXT POINTER           DM JUN83\n         BCT   R14,GPID\n         DROP  R8                                              DM JUN83\n         LR    R3,R0                    RESTORE LOOP CONTROL\n         POP   USING                                           DM JUN83\n         TM    LKPFLAGS,X'40'           ALTERNATE MASK         DM JUN83\n         BZ    BUMPX                    NO, CONTINUE WITH THIS MASK\n         C     R6,LKPGNRC1              STILL ON FIRST MASK    DM JUN83\n         BNE   BUMPX                    NO, CONTINUE THIS MASK\n         ST    R4,LKPALTPT              YES, SET ALT MASK      DM JUN83\n         LA    R7,1(R7)                 BUMP TOTAL COUNT OF MASKS\n         LR    R1,R4                    SAVE FOR MOVE\n         AR    R4,R15                   NEXT ENTRY\nCLRMSK   MVC   MSKMASK(0),0(R1)         BUILD NEXT FROM ALT\n         EX    R15,CLRMSK\nBUMPX    LA    R6,GNRCLNG(R6)           NEXT GENERIC           DM JUN83\n         BCT   R5,FOREACH\n         DROP  R6                                              DM JUN83\n         ST    R4,LKPMSKPT              SET ADDR OF FINISH MSK DM JUN83\n         AR    R4,R15                   NEXT ENTRY SLOT\n         LA    R7,1(R7)                 BUMP TOTAL COUNT OF MASKS\n         L     R2,COUNT1                RESTORE LOOP CONTROL\n         LA    R3,LKPLNG(R3)            NEXT UNIT NAME IN LOOKUP  JUN83\n         BCT   R2,BLDMSK\n         DROP  R3,R4                                           DM JUN83\n         L     R1,EDTMSK                START OF MASK SECTION  DM JUN83\n         ST    R7,0(R1)                 SET HDR WITH COUNT OF MASKS\n         SPACE ,                                               DM JUL80\n         LR    R15,R7                                          DM JUL80\n         M     R14,4(,R1)          LENGTH OF EACH SECTION      DM JUL80\n         LA    R14,15(R15,R1)      7 BYTES PAST END            DM JUL80\n         N     R14,=F'-8'          ROUND TO DOUBLE WORD        DM JUL80\n         LR    R1,R10                                          DM JUL80\n         SH    R1,=H'16'           BACK UP TO HEADER           DM JUL80\n         LR    R0,R14              CALCULATE HOW MUCH LEFT     DM JUL80\n         SR    R0,R1                                           DM JUL80\n         SR    R15,R15             CLEAR R15                   SS AUG84\n         ICM   R15,7,13(R1)        GET CURRENT SPACE           SS AUG84\n         STCM  R0,7,13(R1)         SET NEW LENGTH              DM JUL80\n         SR    R15,R0              CALCULATE FREEMAIN LENGTH   DM JUL80\n         TM    FLAG2,CVTMVSE       XA SYSTEM                   SS JAN84\n         BO    XA155               THIS FREE MAIN NOT XA       SS JAN84\n         ICM   R15,8,12(R1)        GET SUBPOOL                 SS AUG84\n         FREEMAIN R,LV=(15),A=(14) FREE UNUSED AREA            DM JUL80\n         B     XA156                                           SS AUG84\n         SPACE ,                                               DM JUL80\nXA155    DS    0H                                              SS JAN84\n         ICM   R15,B'1000',=X'0000' CLEAR SUBPOOL NUMBER       SS AUG84\n         FREEMAIN RU,LV=(15),A=(14),SP=&XASP                   SS AUG84\nXA156    DS    0H                                              SS JAN84\n         MVC   EDTPREF,PREFTAB     IBM PREFTAB IN OUR EDT      DM JUN83\n         L     R2,CVTPT            LOAD CVT ADDR               DM NOV83\n         L     R2,CVTJESCT(R2)     LOAD JESCT ADDR             SS JAN84\n         L     R3,JESEDTA(R2)      LOAD OLD EDT PTR            SS JAN84\n         LA    R3,0(,R3)           CLEAR BIT 0                 SS MAR87\n         AIF   ('&SYSPARM' EQ 'TEST' OR                                -\n               '&SYSPARM' EQ 'TESTXA').TEST5                   SS MAR87\n         AIF   ('&SYSPARM' EQ 'NONXA').TEST5B                  SS MAR87\n         TM    FLAG2,CVTMVSE       XA SYSTEM                   SS MAR87\n         BZ    XA15                                            SS MAR87\n         L     R5,JESUPLP          SAVE OLD UCB PT LIST        SS MAR87\n         ENQ   MF=(E,ENQLST)       STOP SCHEDULING             SS MAR87\n         STIMER WAIT,BINTVL=BINTVL WAIT 5 SECONDS              SS MAR87\n         MVC   JESUPLP(4,R2),UPLSTR NEW UCB PT LIST            SS MAR87\n         ST    R10,JESEDTA(R2)     NEW EDT ADDR IN JESCT       SS MAR87\n         TM    FLAG2,GENEDT        IBM SYSGEN EDT              SS MAR87\n         BO    DODEQ                                           SS MAR87\n         CLC   DYNAHDR(8),EDTCREAT-EDT(R3)  OWR EDT            SS MAR87\n         BNE   ABEND999            NO... ABEND                 SS MAR87\n         LA    R4,16               LOAD CONSTANT 16            SS MAR87\n         SR    R3,R4               SUBTRACT FROM EDT ADDR      SS MAR87\n         CLI   12(R3),0            SPOOL ZERO                  SS MAR87\n         BE    DODEQ                                           SS MAR87\n         SR    R0,R0               CLEAR FOR ICM               SS MAR87\n         SR    R2,R2               CLEAR FOR IC                SS MAR87\n         ICM   R0,7,13(R3)         LENGTH                      SS MAR87\n         IC    R2,12(R3)           SUBPOOL NUMBER              SS MAR87\n         LR    R1,R3               ADDRESS OF EDT              SS MAR87\n         FREEMAIN RU,LV=(0),A=(1),SP=(R2)                      SS MAR87\n         SPLEVEL SET=1                                         SS MAR87\n         B     DODEQ               FREE IT                     SS MAR87\n.TEST5B  ANOP  ,                                               SS MAR87\nXA15     DS    0H                                              SS JAN84\n         ST    R10,JESEDTA(R2)     NEW EDT ADDR IN JESCT       SS MAR87\n         CLM   R3,7,EDTPTR+1       JESCT PTR = IBM EDT         RCHJUN80\n         BE    Y12                 YES....DO NOT FREEMAIN      RCHJUN80\n         LA    R4,16               LOAD CONSTANT 16            RCHJUN80\n         SR    R3,R4               SUBTRACT FROM EDT ADDR      RCHJUN80\n         CLC   DYNAHDR,0(R3)       IS IT OUR EDT               DM JUL80\n         BNE   ABEND999            NO.....ABEND                RCHJUN80\n         ENQ   MF=(E,ENQLST)       STOP SCHEDULING             SS MAR87\n         DS    0H                                              SS AUG84\n         STIMER WAIT,BINTVL=BINTVL WAIT 5 SECONDS              RCHJUN80\n         L     R0,12(R3)           LOAD SUBPOOL AND LENGTH     RCHJUN80\n         LR    R1,R3               LOAD ADDR TO FREE           RCHJUN80\n         FREEMAIN R,A=(1),LV=(0)   FREEMAIN OUR OLD EDT        RCHJUN80\n         AIF   ('&SYSPARM' EQ 'NONXA').TEST5C                  SS MAR87\n         SPLEVEL SET=2                                         SS MAR87\n.TEST5C  ANOP  ,                                               SS AUG84\nDODEQ    DEQ   MF=(E,ENQLST)       ALLOW SCHEDULING TO RESUME  DM JUL80\nY12      DS    0H\n         AGO   .TEST6\n.TEST5   ANOP  ,                   TEST - PRINT THE EDT'S      DM JUN83\n&M       SETC  'N'                                             SS JAN84\n         AIF   ('&SYSPARM' NE 'TESTXA').TEST7                  SS JAN84\n&M       SETC  'X'                                             SS JAN84\n         B     SKABEND                                         SS JAN84\n         ABEND 88,DUMP             UNTIL PRINT EDT WORKS       SS JAN84\nSKABEND  DS    0H                                              SS JAN84\n.TEST7   ANOP  ,                   TEST - PRINT THE EDT'S      DM JUN83\n         TM    SYSPRINT+48,16                                  DM JUN83\n         BZ    ENDPRINT                                        DM JUN83\n         MVI   WTOE,C' '           BLANK                       DM JUN83\n         MVC   WTOE+1(L'WTOE-1),WTOE    LINE                   DM JUN83\n         L     R1,EDTPTR           BASE (SYSGEN) EDT           DM JUN83\n         BAL   R14,PRINTEDT          PRINT IT                  DM JUN83\n         LR    R1,R3               CURRENT EDT                 DM JUN83\n         BAL   R14,PRINTEDT          PRINT IT                  DM JUN83\n         LR    R1,R10              NEW EDT                     DM JUN83\n         BAL   R14,PRINTEDT          PRINT IT                  DM JUN83\n         LR    R1,R3               CURRENT EDT                 DM JUN83\n         LA    R15,DUMPARM1                                    DM JUN83\n         BAL   R14,PRTEDT2           FORMAT PARMS              DM JUN83\n         LR    R1,R10              NEW EDT                     DM JUN83\n         LA    R15,DUMPARM2                                    DM JUN83\n         BAL   R14,PRTEDT2           FORMAT PARMS              DM JUN83\n         MVI   WTOE,C'1'                                       DM JUN83\n         LR    R6,R3               CALCULATE ADDRESS           DM NOV83\n         SR    R6,R10                DIFFERENCE (OLD - NEW)    DM NOV83\n         SPACE ,                                               DM JUN83\nPRTEDT3  L     R1,DUMPARM1+12      REMAINING LENGTH            DM JUN83\n         C     R1,DUMPARM2+12                                  DM JUN83\n         BNH   *+8                                             DM JUN83\n         L     R1,DUMPARM2+12      USE SHORTER                 DM JUN83\n         CH    R1,=H'32'                                       DM JUN83\n         BNH   *+8                                             DM JUN83\n         LH    R1,=H'32'           USE SHORTER                 DM JUN83\n         LR    R4,R1               CALCULATE NUMBER            DM NOV83\n         SR    R5,R5                                           DM NOV83\n         SRDL  R4,2                  OF WORDS                  DM NOV83\n         LTR   R5,R5               SEE IF ANY REMAINDER        DM NOV83\n         BZ    *+6                 NO                          DM NOV83\n         SR    R4,R4               DON'T DO ADDRESS COMPARE    DM NOV83\n         SPACE ,                                               DM NOV83\n         L     R14,DUMPARM1        CURRENT EDT                 DM JUN83\n         A     R14,DUMPARM1+16       ADDRESS                   DM JUN83\n         LR    R15,R1                                          DM JUN83\n         LA    R2,DIFF             TARGET                      DM JUN83\n         LA    R3,L'DIFF                                       DM JUN83\n         MVCL  R2,R14              COPY DATA                   DM JUN83\n         LTR   R1,R1               LENGTH ZERO                 SS MAR87\n         BZ    PRTEDT3A            AVOID OC4 DO TO OVERLAY     SS MAR87\n         BCTR  R1,0                                            DM JUN83\n         L     R15,DUMPARM2        NEW EDT                     DM JUN83\n         A     R15,DUMPARM2+16       ADDRESS                   DM JUN83\n         EX    R1,EXXC1            EXCLUSIVE OR                DM JUN83\nPRTEDT3A TR    DIFF,DIFFTBL                                    SS MAR87\n         LA    R5,DIFF             IN CASE NOT ADDRESS DIFF.   DM NOV83\n         BZ    PRTEDT6             ALL EQUAL (FROM EXC. OR)    DM NOV83\n         LTR   R4,R4               SEE HOW MANY WORDS          DM NOV83\n         BZ    PRTEDT6             NONE                        DM NOV83\n         L     R14,DUMPARM1        OLD EDT                     DM NOV83\n         A     R14,DUMPARM1+16       ADDRESS                   DM NOV83\n         SPACE ,                                               DM NOV83\nPRTEDT7  L     R0,0(,R14)          WORD FROM OLD EDT           DM NOV83\n         L     R1,0(,R15)          WORD FROM NEW EDT           DM NOV83\n         CR    R0,R1               SEE IF SAME                 DM NOV83\n         BE    PRTEDT8             YES                         DM NOV83\n         AR    R1,R6               SEE IF DIFFERENCE           DM NOV83\n         CR    R0,R1                 IN ADDRESS                DM NOV83\n         BNE   PRTEDT6             NO - LEAVE AS IS            DM NOV83\nPRTEDT8  LA    R14,4(,R14)         NEXT                        DM NOV83\n         LA    R15,4(,R15)           WORDS                     DM NOV83\n         BCT   R4,PRTEDT7          ITERATE                     DM NOV83\n         LA    R5,=CL32'ALL DIFFERENCES ARE ADDRESSES'         DM NOV83\n         SPACE ,                                               DM JUN83\nPRTEDT6  ICM   R0,15,DUMPARM1+12   LENGTH                      DM JUN83\n         BZ    PRTEDT4             EXHAUSTED                   DM JUN83\n         LA    R1,DUMPARM1                                     DM JUN83\n         L     R15,=V(XDUMPFMT)                                DM JUN83\n         BALR  R14,R15                                         DM JUN83\n         AIF   ('&M' NE 'X').XA21                              SS JAN84\n         LA    R1,IN24C                 BACK TO 24  BIT MODE   SS JAN84\n         ST    R1,GXREFXXX              TRACE FOR DEBUGGING    SS AUG84\n         BSM   0,R1                     SWITCH MODES TO 24     SS JAN84\nIN24C    DS    0H                                              SS JAN84\n.XA21    ANOP  ,                                               SS JAN84\n         PUT   SYSPRINT,WTOE                                   DM JUN83\n         AIF   ('&M' NE 'X').XA22                              SS JAN84\n         LA    R1,IN31C                 START OF 31 BIT MODE   SS JAN84\n         O     R1,=X'80000000'          MODE BIT ON            SS JAN84\n         ST    R1,GXREFXXX              TRACE FOR DEBUGGING    SS AUG84\n         BSM   0,R1                     SWITCH MODES TO 31     SS JAN84\nIN31C    DS    0H                                              SS JAN84\n.XA22    ANOP  ,                                               SS JAN84\n         MVI   WTOE,C' '                                       DM JUN83\nPRTEDT4  ICM   R0,15,DUMPARM2+12   LENGTH                      DM JUN83\n         BZ    PRTEDT5             EXHAUSTED                   DM JUN83\n         LA    R1,DUMPARM2                                     DM JUN83\n         L     R15,=V(XDUMPFMT)                                DM JUN83\n         BALR  R14,R15                                         DM JUN83\n         AIF   ('&M' NE 'X').XA23                              SS JAN84\n         LA    R1,IN24D                 BACK TO 24  BIT MODE   SS JAN84\n         ST    R1,GXREFXXX              TRACE FOR DEBUGGING    SS AUG84\n         BSM   0,R1                     SWITCH MODES TO 24     SS JAN84\nIN24D    DS    0H                                              SS JAN84\n.XA23    ANOP  ,                                               SS JAN84\n         PUT   SYSPRINT,WTOE                                   DM JUN83\n         AIF   ('&M' NE 'X').XA24                              SS JAN84\n         LA    R1,IN31D                 START OF 31 BIT MODE   SS JAN84\n         O     R1,=X'80000000'          MODE BIT ON            SS JAN84\n         ST    R1,GXREFXXX              TRACE FOR DEBUGGING    SS AUG84\n         BSM   0,R1                     SWITCH MODES TO 31     SS JAN84\nIN31D    DS    0H                                              SS JAN84\n.XA24    ANOP  ,                                               SS JAN84\nPRTEDT5  MVI   DIFF+L'DIFF,C' '                                DM JUN83\n         MVI   WTOE,C' '           BLANK                       DM JUN83\n         MVC   WTOE+1(L'WTOE-1),WTOE    LINE                   DM JUN83\n         MVC   WTOE+16(74),DIFFMASK                            DM JUN83\n         TR    WTOE+16(74),DIFF                                DM JUN83\n         MVC   WTOE+93(32),0(R5)   DIFFERENCES OR MSG          DM NOV83\n         AIF   ('&M' NE 'X').XA25                              SS JAN84\n         LA    R1,IN24E                 BACK TO 24  BIT MODE   SS JAN84\n         ST    R1,GXREFXXX              TRACE FOR DEBUGGING    SS AUG84\n         BSM   0,R1                     SWITCH MODES TO 24     SS JAN84\nIN24E    DS    0H                                              SS JAN84\n.XA25    ANOP  ,                                               SS JAN84\n         PUT   SYSPRINT,WTOE                                   DM JUN83\n         AIF   ('&M' NE 'X').XA26                              SS JAN84\n         LA    R1,IN31E                 START OF 31 BIT MODE   SS JAN84\n         O     R1,=X'80000000'          MODE BIT ON            SS JAN84\n         ST    R1,GXREFXXX              TRACE FOR DEBUGGING    SS AUG84\n         BSM   0,R1                     SWITCH MODES TO 31     SS JAN84\nIN31E    DS    0H                                              SS JAN84\n.XA26    ANOP  ,                                               SS JAN84\n         L     R0,DUMPARM1+12      SEE IF SOME                 DM JUN83\n         A     R0,DUMPARM2+12        TO GO                     DM JUN83\n         BP    PRTEDT3             NO                          DM JUN83\n         B     ENDPRINT                                        DM JUN83\nEXXC1    XC    DIFF(0),0(R15)                                  DM JUN83\nDIFFTBL  DC    C' ',255C'*'                                    DM JUN83\nDIFFMASK DC    AL1(0,0,1,1,2,2,3,3,32)                         DM JUN83\n         DC    AL1(4,4,5,5,6,6,7,7,32)                         DM JUN83\n         DC    AL1(8,8,9,9,10,10,11,11,32)                     DM JUN83\n         DC    AL1(12,12,13,13,14,14,15,15,32,32,32,32)        DM JUN83\n         DC    AL1(16,16,17,17,18,18,19,19,32)                 DM JUN83\n         DC    AL1(20,20,21,21,22,22,23,23,32)                 DM JUN83\n         DC    AL1(24,24,25,25,26,26,27,27,32)                 DM JUN83\n         DC    AL1(28,28,29,29,30,30,31,31)                    DM JUN83\n         SPACE 2                                               DM JUN83\nPRINTEDT ST    R14,COUNT1          SAVE RETURN                 DM JUN83\n         LA    R15,DUMPARM1\n         BAL   R14,PRTEDT2\n         MVI   WTOE,C'1'           START ON NEW PAGE           DM JUN83\n         SPACE ,                                               DM JUN83\nPRTEDT1  LA    R1,DUMPARM1                                     DM JUN83\n         L     R15,=V(XDUMPFMT)                                DM JUN83\n         BALR  R14,R15             FORMAT 32 BYTES             DM JUN83\n         LR    R2,R15              SAVE RETURN CODE            DM JUN83\n         AIF   ('&M' NE 'X').XA27                              SS JAN84\n         LA    R1,IN24F                 BACK TO 24  BIT MODE   SS JAN84\n         ST    R1,GXREFXXX              TRACE FOR DEBUGGING    SS AUG84\n         BSM   0,R1                     SWITCH MODES TO 24     SS JAN84\nIN24F    DS    0H                                              SS JAN84\n.XA27    ANOP  ,                                               SS JAN84\n         PUT   SYSPRINT,WTOE                                   DM JUN83\n         AIF   ('&M' NE 'X').XA28                              SS JAN84\n         LA    R1,IN31F                 START OF 31 BIT MODE   SS JAN84\n         O     R1,=X'80000000'          MODE BIT ON            SS JAN84\n         ST    R1,GXREFXXX              TRACE FOR DEBUGGING    SS AUG84\n         BSM   0,R1                     SWITCH MODES TO 31     SS JAN84\nIN31F    DS    0H                                              SS JAN84\n.XA28    ANOP  ,                                               SS JAN84\n         MVI   WTOE,C' '                                       DM JUN83\n         LTR   R2,R2               SEE IF MORE DATA            DM JUN83\n         BNZ   PRTEDT1               YES - ITERATE             DM JUN83\n         SPACE ,                                               DM JUN83\n         L     R14,COUNT1                                      DM JUN83\n         BR    R14                 RETURN                      DM JUN83\n         SPACE ,                                               DM JUN83\nPRTEDT2  STM   R14,R12,12(R13)     SAVE REGS                   DM JUN83\n         LR    R2,R15                                          DM JUN83\n         LA    R0,12(,R2)          PARMS                       DM JUN83\n         ST    R0,4(,R2)                                       DM JUN83\n         LA    R0,WTOE+1           OUTPUT AREA                 DM JUN83\n         ST    R0,8(,R2)                                       DM JUN83\n         OI    8(R2),X'80'         SET END FLAG                DM JUN83\n         ST    R1,0(,R2)           DATA ADDRESS                DM JUN83\n         ST    R1,20(,R2)                                      DM JUN83\n         L     R1,EDTMSK-EDT(,R1)  CALCULATE                   DM JUN83\n         L     R15,0(,R1)            END OF                    DM JUN83\n         M     R14,4(,R1)              EDT                     DM JUN83\n         AR    R15,R1                                          DM JUN83\n         BCTR  R15,0               LAST BYTE                   DM JUN83\n         S     R15,0(,R2)          LENGTH                      DM JUN83\n         ST    R15,12(,R2)                                     DM JUN83\n         SR    R0,R0                                           DM JUN83\n         ST    R0,16(,R2)          INITIALIZE OFFSET           DM JUN83\n         LM    R14,R12,12(R13)     RESTORE REGS                DM JUN83\n         BR    R14                 RETURN                      DM JUN83\nENDPRINT EQU   *                                               DM JUN83\n.TEST6   ANOP  ,                                               DM JUN83\n         SPACE 2                                               DM JUN83\n         TM    FLAG2,LDEDT              WAS EDT LOADED         SS MAR87\n         BZ    NODEL                    NO, SKIP DELETE        SS MAR87\n         DELETE EP=IEFEDTTB             NO LONGER NEEDED       SS JAN84\nNODEL    DS    0H                       *                      SS MAR87\n         AIF   ('&SYSPARM' EQ 'TEST' OR                                -\n               '&SYSPARM' EQ 'TESTXA').TEST4                   DM JUN83\n         MODESET KEY=NZERO         BACK TO TCB PROTECT KEY     DM JUL80\n.TEST4   ANOP  ,                                               DM JUN83\n         AIF   ('&SYSPARM' EQ 'TEST' OR                                -\n               '&SYSPARM' EQ 'NONXA').TEST4D                   SS MAR87\n         TM    FLAG2,CVTMVSE       XA                          SS JAN84\n         BZ    XA29                                            SS JAN84\n         LA    R1,IN24G                 BACK TO 24  BIT MODE   SS JAN84\n         BSM   0,R1                     SWITCH MODES TO 24     SS JAN84\nIN24G    DS    0H                                              SS JAN84\nXA29     DS    0H                                              SS JAN84\n.TEST4D  ANOP  ,                                               SS SEP85\n         SPACE ,                                               DM JUN83\n         CLOSE (SYSIN),MF=(E,OCLIST)                           DM JUN83\n         FREEPOOL SYSIN                                        DM JUN83\n         TM    SYSPRINT+48,16      SEE IF OPEN                 DM JUN83\n         BZ    Y13                   NO                        DM JUN83\n         CLOSE (SYSPRINT),MF=(E,OCLIST)                        DM JUN83\n         FREEPOOL SYSPRINT                                     DM JUN83\nY13      EQU   *                                               DM JUN83\n         WTO 'DMSK00I DYNAMASK DONE ****',ROUTCDE=(2,11)\n         CLI   SAVEPARM,C' '            ANY PARM               SS JUN86\n         BE    NOWTOP                   NO                     SS JUN86\n         MVC   WTOE(WTOPLN),WTOP                               SS JUN86\n         MVC   WTOE+13(20),SAVEPARM                            SS JUN86\n         WTO   MF=(E,WTOE)                                     SS JUN86\nNOWTOP   DS    0H                                              SS JUN86\n         SPACE 2                                               DM JUL80\n         WXTRN VATUCB                                          DM JUN83\n         L     R1,4(,R13)          HIGHER SAVE AREA            DM JUL80\n         L     R1,24(,R1)          R1 (PARM PTR) FROM CALLER   DM JUL80\n         L     R15,=A(VATUCB)                                  DM JUL80\n         LTR   R15,R15                                         DM JUL80\n         BZ    *+6                 UNRESOLVED - SKIP CALL      DM JUL80\n         BALR  R14,R15             CALL VATUCB                 DM JUL80\n         SPACE ,                                               DM JUL80\n         AIF   ('&SYSPARM' EQ 'XA' OR                                  -\n               '&SYSPARM' EQ 'TESTXA').XA16                    DM JUN83\n         WXTRN GENERIC                                         DM JUN83\n         TM    FLAG2,CVTMVSE       XA SYSTEM                   SS OCT84\n         BO    XA30                SKIP 370 GENERIC ROUTINE    SS OCT84\n         ST    R10,OCLIST          NEW EDT ADDRESS (HEADER)    DM JUL80\n         OI    OCLIST,X'80'        SET END FLAG                DM JUL80\n         LA    R1,OCLIST           PARM IS EDT                 DM JUL80\n         L     R15,=A(GENERIC)                                 DM JUL80\n         LTR   R15,R15                                         DM JUL80\n         BZ    *+6                 UNRESOLVED - SKIP CALL      DM JUL80\n         BALR  R14,R15             CALL GENERIC                DM JUL80\nXA30     DS    0H                                              SS OCT84\n.XA16    ANOP  ,                                               DM JUN83\n         SPACE 2                                               DM JUL80\nEXIT     LR    R1,R13\n         L     R0,GETMLEN          LENGTH TO FREE              RCHJUN79\n         PUSH  USING                                           DM JUL80\n         DROP  ,                                               DM JUL80\n         L     R13,4(R13)\n         FREEMAIN R,A=(1),LV=(0)\n         RETURN (14,12),RC=0                                   DM JUL80\n         POP   USING                                           DM JUL80\n*\n*  SUBROUTINE TO READ INPUT AND EXTRACT FIELDS\n*\nGETNEXT  MVC   BUF,=CL9' '              BLANK BUFFER\n         CLI   FLAGS,1                  IS WE LOOKING FOR UNIT NAME\n         BE    READ                     YES, START WITH NEW CARD\n         L     R15,ABUF                 CURRENT CHARACTER\n         CLI   FLAGS,2                  IS WE LOOKING FOR FIRST VOL/CUU\n         BE    SCANBEG                  YES, LOOK FOR IT\n         CLI   FLAGS,3                  IS WE LOOKING FOR NEXT VOL/CUU\n         BNE   MSG10                    NOT ANY OF ABOVE, ERROR\n         CLI   0(R15),C','              COMMA SAYS THERE ARE MORE\n         BNE   EOR                      NO COMMA.. NO MORE ON RECORD\nSCANBEG  LA    R15,1(R15)               NEXT CHAR\n         C     R15,ENDBUF               WE AT END OF CARD\n         BE    READ                     YES, GET NEXT CARD\nCLIBLK   CLI   0(R15),C' '              IS IT NON BLANK\n         BE    SCANBEG                  NO, TRY NEXT\n         LR    R1,R15                   FOUND FIRST CHAR, SAVE LOCATION\nSCANEND  LA    R15,1(R15)               NEXT CHAR .. LOOKING FOR END\n         C     R15,ENDBUF               END OF CARD\n         BE    MSG11                    YES, SHOULD NOT BE\n         CLI   0(R15),C' '              IS IT FIRST BLANK\n         BE    ENDFIELD                 YES, END OF FIELD\n         CLI   0(R15),C','              OR IS IT A COMMA\n         BNE   SCANEND                  NOT END, CONTINUE SCAN\nENDFIELD ST    R15,ABUF                 SAVE FOR NEXT REQUEST\n         SR    R15,R1                   CALC LENGTH OF FIELD\n         C     R15,=F'9'                SHOULD NOT BE MORE THAN 9 CHAR\n         BH    MSG12                    IT IS, ERROR\n         BCTR  R15,0                    LESS ONE FOR MVC INST\nMOVE     MVC   BUF(0),0(R1)             USED BY EX INST\n         EX    R15,MOVE                 COPY FIELD INTO BUF LEN IN R15\n         LA    R15,1(R15)               ADD ONE BACK\nTESTFLG  CLI   FLAGS,2                  WE DONE WITH FIRST\n         BE    SET3                     YES, SET FOR MORE\n         CLI   FLAGS,1                  WE DONE WITH UNIT NAME\n         BE    SET2                     YES, SET FOR FIRST VOL OR CUU\n         BR    R14                      NONE OF ABOVE .. NORMAL RETURN\nSET2     MVI   FLAGS,2                  NEXT WILL BE FIRST VOL OR CUU\n         BR    R14                      RETURN\nSET3     MVI   FLAGS,3                  SET FOR MORE FIELD\n         BR    R14                      RETURN\nEOR      MVI   FLAGS,1                  WILL START WITH NEW UNIT NAME\n         LA    R15,FF                   INDICATE EOR\n         BR    R14                      RETURN\nREAD     ST    R14,ABUF                 SAVE RETURN ADDRESS\nREAD2    GET   SYSIN                                           DM JUN83\n         CLI   0(R1),C'*'               COMMENT CARD           SS APR86\n         BE    READ2                    YES, SKIP              SS APR86\n         LR    R15,R1                   BUFFER ADDRESS\n         L     R14,ABUF                 RESTORE RETURN ADDRESS TO R14\n         LA    R1,72(R1)                CALC END OF CARD\n         ST    R1,ENDBUF                SAVE FOR REGULAR USE\n         B     CLIBLK                   START SCANING THIS CARD\nEOF      L     R14,ABUF                 RESTORE RETURN ADDR TO R14\n         MVI   FLAGS,FF                 CAUSE ERROR IS CALLED AGAIN\n         LA    R15,FF                   INDICATE EOF\n         BR    R14                      RETURN\n         EJECT ,\nCHECKHEX DS    0H                   *                          SS MAR87\n         CLI   0(R1),C'0'           IN NUMBER RANGE            SS MAR87\n         BL    CHECKCHR             NO, MAYBE ALPHA            SS MAR87\n         CLI   0(R1),C'9'           IN NUMBER RANGE            SS MAR87\n         BH    MSG8                 NO, SYNTAX ERROR           SS MAR87\n         BR    R14                  GOOD, RETURN TO CALLER     SS MAR87\nCHECKCHR DS    0H                   *                          SS MAR87\n         CLI   0(R1),C'A'           IS IT A-F                  SS MAR87\n         BL    MSG8                 NO,  SYNTAX ERROR          SS MAR87\n         CLI   0(R1),C'F'           IS IT A-F                  SS MAR87\n         BH    MSG8                 NO,  SYNTAX ERROR          SS MAR87\n         SR    R15,R15              ZERO FOR INSERT            SS MAR87\n         IC    R15,0(R1)            *                          SS MAR87\n         LA    R15,X'FA'-C'A'(,R15) ADJUST TO FA-FF            SS MAR87\n         STC   R15,0(R1)            SET                        SS MAR87\n         BR    R14                  RETURN                     SS MAR87\n         EJECT ,\n*        CONVERT JULIAN DATE TO CALENDAR DATE\n*\n*        ALGORITHM IS NON-ITERATIVE USING TABLES\n         SPACE 2\nTOCAL    STM   R14,R3,12(R13)                                  DM JUN83\n         CVB   R14,DBLWRD                                      DM JUN83\n         SRDA  R14,32                                          DM JUN83\n         D     R14,=F'1000'  SEPARATE YEAR/DAY                 DM JUN83\n         SPACE ,                                               DM JUN83\n* IF THE DATE IS MARCH OR LATER AND THE YEAR IS NOT A LEAP     DM JUN83\n* YEAR THEN ADD 1 TO THE DAY TO MAKE THE DATE LOOK LIKE A      DM JUN83\n* LEAP YEAR DATE                                               DM JUN83\n         CH    R14,=H'59'                                      DM JUN83\n         BNH   PASTADD1      NOT PAST FEBRUARY                 DM JUN83\n         EX    R15,EXTM03    SEE IF LEAP YEAR                  DM JUN83\n         BZ    PASTADD1      LEAP YEAR                         DM JUN83\n         LA    R14,1(,R14)   NOT A LEAP YEAR - ADD A DAY       DM JUN83\nPASTADD1 CH    R14,=H'366'                                     DM JUN83\n         BH    BADRTN        ERROR - JULIAN DAY IS TOO LARGE   DM JUN83\n         LTR   R14,R14                                         DM JUN83\n         BNP   BADRTN        ERROR - JULIAN DAY L/T 1          DM JUN83\n         LR    R3,R15        SAVE YEAR                         DM JUN83\n         SRDL  R14,5         DIVIDE DAY BY 32                  DM JUN83\n         AR    R14,R14       DOUBLE QUOTIENT FOR USE AS INDEX  DM JUN83\n         SRL   R15,27        JUSTIFY REMAINDER                 DM JUN83\n         SH    R15,FACTOR1(R14)   DEVELOP DAY OF MONTH FROM REMAINDER\n         BP    DATEOK        EVERYTHING OK                     DM JUN83\n         SH    R15,FACTOR2(R14)   CORRECT DAY OF MONTH AND MONTH       *\n                                  (MONTH WILL BE ADDED NEXT)   DM JUN83\n         SPACE ,                                               DM JUN83\nDATEOK   AH    R15,MNTHTBL(R14)   ADD MONTH  (* 100)           DM JUN83\n         MH    R15,=H'100'        SHIFT OVER FOR YEAR          DM JUN83\n         AR    R15,R3             ADD YEAR                     DM JUN83\n         CVD   R15,DBLWRD                                      DM JUN83\n         OI    DBLWRD+7,15                                     DM JUN83\n         SR    R15,R15            SET GOOD RETURN CODE         DM JUN83\n         SPACE ,                                               DM JUN83\nRETURN   RETURN (14,3),RC=(15)                                 DM JUN83\n         SPACE 3                                               DM JUN83\nBADRTN   LA    R15,12        SET ERROR RETURN CODE             DM JUN83\n         B     RETURN                                          DM JUN83\nEXTM03   TM    =X'03',0            FOR EXECUTE                 DM JUN83\n         SPACE 3                                               DM JUN83\nMNTHTBL  DC    H'100,300,400,500,600,700,800,900,1000,1100,1200,1300'  *\n                             MONTHS (* 100)                    DM JUN83*\n                             (* 100 TO ALLOW A SINGLE CVD)     DM JUN83\nFACTOR1  DC    H'0,28,27,25,24,22,21,20,18,17,15,14'           DM JUN83*\n                             FACTORS TO ADJUST REMAINDER TO    DM JUN83*\n                             BE THE DAY OF THE MONTH           DM JUN83\nFACTOR2  DC    Y(100-0,100-29,100-31,100-30,100-31,100-30)     DM JUN83\n         DC    Y(100-31,100-31,100-30,100-31,100-30,100-31)    DM JUN83\n*              100 - DAYS IN THE PRIOR MONTH                   DM JUN83\n*              (USED TO BACK UP THE MONTH AND CORRECT DAY)     DM JUN83\n         EJECT                                                 CJKMAY79\nMSG1     WTO   'DMSK01I OPEN FAILED, TERMINATED WITH NO ACTION',       X\n               ROUTCDE=(2,11)\n         B     EXIT\nMSG2     WTO   'DMSK02I UNIT NAME MORE THAN 8 CHAR, IGNORED',          X\n               ROUTCDE=(2,11)\nPURGE    BAL   R14,GETNEXT\n         C     R15,=F'255'\n         BNE   PURGE\n         B     BLDMNT\nMSG3     WTO   'DMSK03I VOL NAME MORE THAN 6 CHAR, IGNORED',           X\n               ROUTCDE=(2,11)\n         B     EACHU\nMSG4     MVC   WTOE(WTO4LN),WTO4\n         MVC   WTOE+30(6),BUF\n         WTO   MF=(E,WTOE)\n         B     EACHU\nWTO4     WTO   'DMSK04I VOLUME NOT FOUND           ',ROUTCDE=(2,11),   X\n               MF=L\nWTO4LN   EQU   *-WTO4\nMSG5     MVC   WTOE(WTO5LN),WTO5\n         MVC   WTOE+30(3),BUF+1\n         WTO   MF=(E,WTOE)\n         B     EACHU\nWTO5     WTO   'DMSK05I UNIT NOT FOUND             ',ROUTCDE=(2,11),   X\n               MF=L\nWTO5LN   EQU   *-WTO5\nWTOP     WTO   'DMSK06I                            ',ROUTCDE=(2,11),   X\n               MF=L\nWTOPLN   EQU   *-WTOP\nMSG6     WTO   'DMSK07I MAX OF 128 NAMES EXCEEDED, REST IGNORED',      X\n               ROUTCDE=(2,11)                                  SS AUG84\n         B     SORTGRP\nMSG7     WTO   'DYNAMASK - GETMAIN AREA EXCEEDED - PROGRAM ABORTED',   X\n               ROUTCDE=(2,11)\n         B     EXIT\nMSG8     MVC   WTOE(WTO8LN),WTO8\n         MVC   WTOE+34(8),BUF\n         WTO   MF=(E,WTOE)\n         B     EACHU\nWTO8     WTO   'DMSK08I SYNTAX ERROR IN UNIT             ',            X\n               ROUTCDE=(2,11),                                         X\n               MF=L\nWTO8LN   EQU   *-WTO8\nMSG10    ABEND 10,DUMP\nMSG11    WTO   'DMSK09I FIELD DOES NOT END BEFORE COLUMN 72, IGNORED', X\n               ROUTCDE=(2,11)\n         B     READ\nMSG12    MVC   WTOE(WTO12LN),WTO12\nMVCFD    MVC   WTOE+4(0),0(R1)\n         EX    R15,MVCFD\n         WTO   MF=(E,WTOE)\n         B     TESTFLG\nWTO12    WTO   '                                                       X\n                                                  ',ROUTCDE=(2,11),MF=L\nWTO12LN  EQU   *-WTO12\n         DS    0F\nABEND999 ABEND 999,DUMP                                        RCHJUN80\nENQLST   ENQ   (SYSIEFSD,Q4,E,2,SYSTEM),MF=L                   DM JUL80\nSYSIEFSD DC    CL8'SYSIEFSD'       ENQ MAJOR NAME              DM JUL80\nQ4       DC    CL2'Q4'             ENQ MINOR NAME              DM JUL80\n         DS    0F                                              SS AUG84\n         AIF   ('&SYSPARM' EQ 'TEST' OR                                -\n               '&SYSPARM' EQ 'TESTXA').TEST1                   DM JUN83\nCORESIZE DC    AL1(&SUBP),AL3(16384)    FOR EDT IN CSA         SS AUG84\n         AGO   .TEST2                                          DM JUN83\n.TEST1   ANOP  ,                                               DM JUN83\nCORESIZE DC    A(X'01000000'+65536)     FOR EDT IN USER AREA   DM JUN83\n.TEST2   ANOP  ,                                               DM JUN83\nCORESIZX DC    A(65536)                 FOR EDT IN ECSA (XA)   SS AUG84\nGETMLEN  DC    A(SAVEEND-SAVE)          FOR TEMPORARY WORK AREA\nDYNAHDR  DC    CL12'DYNAMASK EDT'                              DM JUL80\nDYNAHDR2 DC    CL8'DYNAMSK2'                                   SS MAR87\nBINTVL   DC    F'500'                                          RCHJUN80\n         LTORG\n         SPACE 3                                               DM JUN83\nSYSINDCB DCB   DDNAME=SYSIN,LRECL=80,MACRF=GL,DSORG=PS,                X\n               EODAD=EOF\n         SPACE 3                                               DM JUN83\nSYSPRDCB DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,              DM JUN83X\n               RECFM=FBA,LRECL=133                             DM JUN83\n         EJECT\nGXREFDEF DSECT ,                   GROUP/UNIT CROSS-REFERENCE  DM JUN83\nGXRUCBPT DS    F                   UCB INDEX TO UCB LOOKUP     DM JUN83\nGXRUCBIX DS    0H                  UCB LOOKUP INDEX            SS JAN84\nGXRNEWID DS    H                   NEW GROUP ID                SS JAN84\nGXROLDID DS    H                   OLD GROUP ID                SS JAN84\nGXRMASKS DS    0XL16               MASK 1-4                    SS SEP87\nGXRMASK  DS    XL4                 MASK                        DM JUN83\nGXRMASK2 DS    XL4                 MASK WORD 2                 SS JAN84\nGXRMASK3 DS    XL4                 MASK WORD 3                 SS AUG84\nGXRMASK4 DS    XL4                 MASK WORD 4                 SS AUG84\nGXRMASKZ EQU   *-GXRMASK           MASK SIZE                   SS JAN84\nGXRSORTL EQU   *-GXROLDID          LENG OF SORT FIELDS         SS JAN84\nGXRLNG   EQU   *-GXREFDEF                                      DM JUN83\n         EJECT ,                                               DM JUN83\nSAVE     DSECT\nSAVEAREA DS    18F\nDBLWRD   DS    D                                               DM JUN83\nUPLSTR   DS    F                   SAVE POINTER TO UCB PT LIST SS JAN84\nCOUNT1   DS    2F\nCOUNT2   DS    2F\nMASK     DS    F\nNUMUNIT  DS    F                   NUMBER OF UNITS             SS JAN84\nUCBLU    DS    F\nAPTXREF  DS    F\nABUF     DS    F\nENDBUF   DS    F\nGXREFXXX DS    F                   SAVE END OF GXREF\nADRGRPT  DS    A                   ADDRESS OF GROUP POINTERS   DM NOV83\nGXRLNG2  DS    H                   SAVE LENGTH GXREF           SS JAN84\nGNRCLNG2 DS    H                   SAVE LENGTH GENERIC SEC     SS JAN84\nGRPLNG2  DS    H                   SAVE LENGTH OF GROUP SEC    SS JAN84\nUNIQUE   DS    H                   SAVE LOOK UP DEVT           SS JAN84\nLOWCUU   DS    H                   LOWER CUU OF RANGE          SS MAR87\nHICUU    DS    H                   HIGHER CUU OF RANGE         SS MAR87\nGROUP    DS    H                   SAVE GROUP NUMBER           SS JAN84\nSYSIN    DS    XL96                AREA FOR SYSIN DCB          DM JUN83\nSYSPRINT DS    XL96                AREA FOR SYSPRINT DCB       DM JUN83\nPREFTAB  DS    A                                               RCHMAY80\nEDTPTR   DS    A                                               RCHMAY80\nOCLIST   OPEN  (0),MF=L                                        DM JUL80\nFLAGS    DS    X                    READ FLAGS                 SS MAR87\nRDNAME   EQU   1                    LOOKING FOR DEVTYPE NAME   SS MAR87\nRDDEV    EQU   2                    LOOKING FOR DEVICE         SS MAR87\nRDMORE   EQU   3                    LOOKING FOR MORE DEVICES   SS MAR87\nBFLAG    DS    X                    SORT FLAG\nFLAG2    DS    X                    MISC FLAGS                 SS JAN84\n*        EQU   X'80'                CVTMVSE  (XA SYSTEM)\nGENEDT   EQU   X'04'                CURRENT EDT IS GEN EDT\nLDEDT    EQU   X'02'                EDT WAS LOADED\nRANGE    EQU   X'01'                RANGE OF CUU TO PROCESS\nBUF      DS    CL9\nSAVEPARM DS    CL20                 SAVE PARM                  SS JUN86\nWTOE     DS    CL133                                           DM JUN83\n         SPACE 2                                               DM JUN83\n         AIF   ('&SYSPARM' NE 'TEST' AND                               -\n               '&SYSPARM' NE 'TESTXA').TEST8                   DM JUN83\n         SPACE ,                                               DM JUN83\nDIFF     DS    CL32,C              DIFFERENCE HOLD AREA        DM JUN83\nDUMPARM1 DS    A                   DATA POINTER FOR XDUMPFMT   DM JUN83\n         DS    A                   PARMS                       DM JUN83\n         DS    A(WTOE+1+X'80000000')    PRINT LINE             DM JUN83\n         DS    3F                  LENGTH, OFFSET, FACTOR      DM JUN83\n         SPACE ,                                               DM JUN83\nDUMPARM2 DS    A                   DATA POINTER FOR XDUMPFMT   DM JUN83\n         DS    A                   PARMS                       DM JUN83\n         DS    A(WTOE+1+X'80000000')    PRINT LINE             DM JUN83\n         DS    3F                  LENGTH, OFFSET, FACTOR      DM JUN83\n         SPACE ,                                               DM JUN83\n.TEST8   ANOP  ,                                               DM JUN83\n         SPACE ,                                               DM JUN83\n         DS    0F\n* MODITFIED NAME TABLE                                         SS JAN84\nMNTNAME  EQU   0                        GENERIC NAME           SS JAN84\nMNTMASK  EQU   8                        MASK 4 BYTES           SS JAN84\nMNTMASKI EQU   12                       MASK INDEX H           SS JAN84\nMNTFLAG  EQU   14                       FLAG BYTE              SS JAN84\nMNTLN    EQU   16                       ENTRY LENGTH           SS JAN84\nMNT      DS    128CL(MNTLN)                                    SS AUG84\nGXREF    DS    4096XL(GXRLNG)      GROUP/UNIT XREF TABLE       DM JUN83\nGXREFEND DS    CL8\nSAVEEND  EQU   *\n         EJECT ,                                               DM JUN83\n         AIF   ('&SYSPARM' EQ 'XA' OR                                  -\n               '&SYSPARM' EQ 'TESTXA').XA17                    DM NOV83\n         EDT   ,                                               DM JUN83\n         AGO   .XA18                                           DM NOV83\n.XA17    ANOP  ,                                               DM NOV83\n         EDT   TYPE=BOTH                                       DM NOV83\n.XA18    ANOP  ,                                               DM NOV83\n         END\nXDUMPFMT TITLE 'FORMAT DATA AS IN A DUMP'\nXDUMPFMT START ,\n         SPACE ,\n***********************************************************************\n*                                                                     *\n*        SUBPROGRAM TO FORMAT DATA IN A MANNER SIMILAR                *\n*        TO ABEND/SNAP DUMPS (SVC 51)                                 *\n*                                                                     *\n*        CALLING SEQUENCE:                                            *\n*          PARM 1 - DATA TO BE PRINTED                                *\n*          PARM 2 - FULLWORD LENGTH                                   *\n*                   FULLWORD OFFSET (0 FIRST TIME)                    *\n*                   FULLWORD FACTOR (TO BE ADDED TO PRINT ADDRESS)    *\n*          PARM 3 - OUTPUT AREA (125 BYTES) - IF FACTOR IN PARM2      *\n*                   IS ZERO THEN THE FIRST 5 BYTES WILL BE BLANK      *\n*                                                                     *\n*        RETURN CODES -                                               *\n*          0 - ALL DATA HAS BEEN FORMATTED                            *\n*          4 - SOME DATA IS LEFT                                      *\n*                                                                     *\n*        WRITTEN BY DOUG MERCER, JUNE 30, 1982,                       *\n*          FOR THE LOCKHEED-CALIFORNIA COMPANY                        *\n*                                                                     *\n*        MODIFIED BY DOUG MERCER, AUGUST 13, 1982,                    *\n*          TO PRINT BOTH OFFSET AND FACTOR PLUS                       *\n*          OFFSET IF OFFSET IS NON-ZERO                               *\n*                                                                     *\n*        MODIFIED BY DOUG MERCER, SEPTEMBER 1, 1982,                  *\n*          TO SUPPRESS FIRST 2 LEADING ZEROS ON THE                   *\n*          ADDRESSES                                                  *\n*                                                                     *\n*        ATTRIBUTES - REENTRANT                                       *\n*        TAB SETTINGS - 10 16 35 40 72                                *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2                   USED FOR COUNTER\nR3       EQU   3                   USED AS POINTER IN LOOP\nR4       EQU   4                   UCB, POINTER  NEXT IN NEW EDT\nR5       EQU   5                   COUNTER OR POINTER  NEW PTXREF\nR6       EQU   6                   COUNTER OR POINTER  OLD PTXREF\nR7       EQU   7                   COUNTER TO TOTAL FOR EACH SEC\nR8       EQU   8                   POINTER TO MODEL EDT\nR9       EQU   9                   SIZE OF GROUP - UNIT XREF\nR10      EQU   10                  POINTER TO NEW EDT\nR11      EQU   11                  PROGRAM BASE\nR12      EQU   12                  PROGRAM BASE TWO\nR13      EQU   13                  SAVE AREA/WORK BASE\nR14      EQU   14\nR15      EQU   15\n         SPACE 3\n         SAVE  (14,12),,XDUMPFMT_&SYSDATE\n         LR    R12,R15\n         SPACE ,\n         USING XDUMPFMT,R12\n         LM    R9,R11,0(R1)       PICK PARM POINTERS\n         USING PARM2,R10\n         USING PARM3,R11\n         SPACE ,\n         LR    R0,R11             BLANK\n         LA    R1,L'PARM3           THE\n         SR    R14,R14                OUTPUT\n         SR    R15,R15                  AREA\n         ICM   R15,8,=C' '        FILL BYTE\n         MVCL  R0,R14\n         SPACE ,\n         MVI   AST1,C'*'\n         LR    R1,R9              DEVELOP\n         A     R1,OFF2              DATA ADDRESS\n         SPACE ,\n* FORMAT ADRESS(ES)                                            DM AUG82\n         L     R0,FCT2            ADDRESS FACTOR               DM AUG82\n         LTR   R0,R0                                           DM AUG82\n         BZ    ADDRB              ZERO - USE SINGLE ADDRESS    DM AUG82\n         A     R0,OFF2            FULL ADDRESS                 DM AUG82\n         STCM  R0,15,DATA1                                     DM AUG82\n         UNPK  ADDR3(9),DATA1(5)                               DM AUG82\n         TR    ADDR3,HEXTBL                                    DM AUG82\n         MVI   ADDR3+8,C' '       BLANK GARBAGE FROM UNPK      DM AUG82\n         C     R0,=XL4'FFFF'      SEE IF SMALL                 DM SEP82\n         BNL   *+10               NOT SMALL ENOUGH             DM SEP82\n         MVC   ADDR3+2(2),=C'  '  BLANK ZEROS                  DM SEP82\n         C     R0,=XL4'FFFFFF'    SEE IF LEADING ZEROS         DM SEP82\n         BNL   *+10               NO                           DM SEP82\n         MVC   ADDR3(2),=C'  '    BLANK                        DM SEP82\n         UNPK  ADDR3A(5),OFF2+2(3)     OFFSET                  DM AUG82\n         TR    ADDR3A,HEXTBL                                   DM AUG82\n         MVI   ADDR3A+4,C' '      BLANK GARBAGE FROM UNPK      DM AUG82\n         B     FORMREST           CONTINUE FORMATTING          DM AUG82\n         SPACE ,                                               DM AUG82\nADDRB    UNPK  ADDR3B(9),OFF2(5)    DEVELOP PRINT              DM AUG82\n         TR    ADDR3B,HEXTBL          ADDRESS                  DM AUG82\n         MVI   ADDR3B+8,C' '      BLANK GARBAGE FROM UNPK      DM AUG82\n         CLC   OFF2,=XL4'FFFF'    SEE IF SMALL                 DM SEP82\n         BNL   *+10               NOT SMALL ENOUGH             DM SEP82\n         MVC   ADDR3B+2(2),=C'  ' BLANK ZEROS                  DM SEP82\n         CLC   OFF2,=XL4'FFFFFF'  SEE IF LEADING ZEROS         DM SEP82\n         BNL   *+10               NO                           DM SEP82\n         MVC   ADDR3B(2),=C'  '   BLANK                        DM SEP82\n         SPACE ,\n* FORMAT THE REST OF THE DATA                                  DM AUG82\nFORMREST LR    R0,R1              SOURCE ADDRESS               DM AUG82\n         LA    R1,32              MAX LENGTH FOR ONE LINE\n         C     R1,LNG2            SEE IF AT LEAST THIS MUCH AVAILABLE\n         BNH   *+8                YES\n         L     R1,LNG2            LIMIT TO WHAT'S AVAILABLE\n         LR    R2,R1\n         LA    R14,DATA3          RESULT AREA\n         LR    R15,R1\n         MVCL  R14,R0             MOVE DATA TO CHARACTER AREA\n         MVI   0(R14),C'*'        PUT ON 'SPLAT'\n         SPACE ,\n         LA    R3,DATA1           FORMAT FIRST\n         LA    R4,DATA3             4 WORDS\n         BAL   R5,FMTHEX              IN HEX\n         SPACE ,\n         LA    R3,DATA2           FORMAT LAST\n         LA    R4,DATA3+16          4 WORDS\n         BAL   R5,FMTHEX              IN HEX\n         SPACE ,\n         TR    DATA3,PRINTABL     CONVERT UNPRINTABLE BYTES TO '.'\n         LA    R0,32              DEVELOP\n         L     R1,LNG2              REMAINING\n         SR    R1,R0                  LENGTH\n         BP    LNGOK              STILL SOME LEFT\n         AR    R0,R1              ADJUST TO LENGTH USED\n         SR    R1,R1              ZERO REMAINDER\nLNGOK    ST    R1,LNG2            UPDATE REMAINING LENGTH\n         L     R1,OFF2\n         AR    R1,R0\n         ST    R1,OFF2            UPDATE OFFSET\n         SPACE ,\n         L     R0,LNG2\n         SR    R15,R15            SET RETURN CODE\n         LTR   R0,R0              SEE IF ANY LENGTH LEFT\n         BZ    *+8                NO\n         LA    R15,4              RESET RETURN CODE\n         RETURN (14,12),T,RC=(15)\n         SPACE 3\n* FORMAT 4 WORDS IN HEX, R2 IS NUMBER OF BYTES TO FORMAT,\n*  R3 POINTS TO RESULT AREA, R4 POINTS TO SOURCE AREA,\n*  R5 IS RETURN\n         SPACE ,\nFMTHEX   LA    R0,4               WORD COUNT\n         LTR   R2,R2              SEE IF ANY TO DO\n         BNPR  R5                 NO - RETURN\n         SPACE ,\nFH1      UNPK  0(9,R3),0(5,R4)    MAKE HEX\n         TR    0(8,R3),HEXTBL       PRINTABLE\n         MVI   8(R3),C' '         BLANK GARBAGE BYTE\n         LA    R3,9(,R3)          INCREMENT\n         LA    R4,4(,R4)            ADDRESSES\n         SH    R2,=H'4'           DECREMENT REMAINING BYTES\n         BM    FH2                GONE TOO FAR - MUST BLANK SOME\n         BZR   R5                 EXHAUSTED - RETURN\n         BCT   R0,FH1             TO NEXT WORD\n         BR    R5                 RETURN\n         SPACE 2\nFH2      SH    R3,=H'3'           TOO MUCH FORMATTED - BLANK SOME\n         SPACE ,\nFH3      MVC   0(2,R3),=C'  '     BLANK 2 DIGITS\n         SH    R3,=H'2'           BACK UP 2 MORE\n         AH    R2,=H'1'           ADJUST REMAINING COUNT\n         BM    FH3                MORE TO GO\n         SPACE ,\n         BR    R5                 DONE - RETURN\n         SPACE 3\nPRINTABL DC    256C'.'            TRANSLATE TABLE - NON-GRAPHICS\n         ORG   PRINTABL+C' '           TO PERIODS\n         DC    C' '\n         ORG   PRINTABL+C':'\n         DC    C':.<(+.&&'\n         ORG   PRINTABL+C'!'\n         DC    C'!$*);:-/'\n         ORG   PRINTABL+C','\n         DC    C',%_>?'\n         ORG   PRINTABL+C':'\n         DC    C':#@''=\"'\n         ORG   PRINTABL+C'A'\n         DC    C'ABCDEFGHI'\n         ORG   PRINTABL+C'J'\n         DC    C'JKLMNOPQR'\n         ORG   PRINTABL+C'S'\n         DC    C'STUVWXYZ'\n         ORG   PRINTABL+C'0'\n         DC    C'0123456789'\n         ORG   ,\n         SPACE 3\nHEXTBL   EQU   *-240              TO MAKE UNPACKED HEX PRINTABLE\n         DC    C'0123456789ABCDEF'\n         SPACE 3\nPARM2    DSECT ,                  PARAMETER 2 FROM CALL\nLNG2     DS    F                  (REMAINING) LENGTH\nOFF2     DS    F                  OFFSET FROM BEGINNING OF PARM1\nFCT2     DS    F                  FACTOR TO ADD TO ADDRESS IN PRINT\n         SPACE 3\n         DSECT ,                  PARAMETER 3 FROM CALL\nPARM3    DS    0CL125             DATA RETURN AREA             DM AUG82\nADDR3    DS    CL8,C              FACTOR + OFFSET              DM AUG82\nADDR3A   DS    CL4,CL2            OFFSET                       DM AUG82\n         ORG   ADDR3+5                                         DM AUG82\nADDR3B   DS    CL8,CL2            ADDRESS OF HIGH-ORDER BYTE   DM AUG82\nDATA1    DS    4CL9,CL3           4 WORDS (HEX)\nDATA2    DS    4CL9,C             4 WORDS (HEX)\nAST1     DS    C'*'\nDATA3    DS    CL32,C'*'          32 BYTES (CHAR)\n         SPACE 2\n         END   ,\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1,RENT,REFR,REUS'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=SYSDA\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//         DD  *\n  INCLUDE SYSLIB(GENERIC)\n  ENTRY DYNAMASK\n  NAME DYNAMASK(R)\n./ ADD NAME=DYNAPROC 8000-02078-02078-1608-00004-00004-00000-SYZYGY1\n//DYNAMASK PROC M=EDT00,SO=A,P='START IPL POSTPROCESS'\n//DYNAMASK EXEC PGM=DYNAMASK,PARM=&P\n//SYSIN DD DISP=SHR,DSN=SYS1.PARMLIB(&M.)\n//SYSPRINT DD SYSOUT=&SO\n./ ADD NAME=EDT00    8000-02078-02078-1607-00020-00020-00000-SYZYGY1\n* IF CC1=*, THEN THIS IS A COMMENT\n* CC1=UNITNAME YOU WISH TO UPDATE/ADD\n*   FOLLOWED BY A SPACE AND THE VOLSER (1-6 CHARS \"*\" FOR WILDCARD OK)\n*   OR FOLLOWED BY /CUU OR /CUU-CUU OR (\"*\" FOR WILDCARDS OK)\n* EX:  12345678901234567890\n*      * THIS IS A COMMENT\n*      * ADD PUB003 TO SYSDA UNITNAME POOL\n*      SYSDA PUB003\n*      * ADD ALL PUB VOLUMES TO SYSDA UNITNAME POOL\n*      SYSDA PUB*\n*      * ADD UNIT 247 TO SYSDA POOL\n*      SYSDA /247\n*      * ADD UNITS 240 THROUGH 24F TO SYSDA UNITNAME POOL\n*      SYSDA /24*\n*      * ADD UNITS 240 THROUGH 244 TO SYSDA UNITNAME POOL\n*      SYSDA /240-244\n*      * REMOVE UNIT 443 FROM TAPE9 UNITNAME POOL\n*      -TAPE9 /443\n*      * ADD X'420-42F' ALL X'5XX' AND X'440-45F' TO TAPE1 UNITNAME\n*      TAPE1  /42*,/5*,/440-45F\n./ ADD NAME=GENERIC  8000-02078-02078-1609-00467-00467-00000-SYZYGY1\n//GENERIC  JOB (BHWA00),'SYSTEMS*BRIAN',MSGCLASS=A,\n//     CLASS=A,NOTIFY=SYZYGY\n//ASM      EXEC  PGM=IFOX00,REGION=500K,\n//         PARM='OBJECT,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=SYSDA\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=SYSDA\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=SYSDA\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=SYSDA,FREE=CLOSE,\n//             SPACE=(TRK,(1,1),RLSE)\n//SYSIN    DD  *\nGENERIC  TITLE 'MAKE DEVMASKT ENTRIES EQUIVALENT TO EDT'\n***********************************************************************\n*                                                                     *\n*   MODIFY ENTRIES IN DEVMASKT TO BE EQUIVALENT TO THE SAME           *\n*   ENTRIES IN THE ELIGIBLE DEVICE TABLE                              *\n*                                                                     *\n*   INVOKED AS A SUBPROGRAM FROM AN AUTHORIZED PROGRAM                *\n*   PARM 1 - THE ELIGIBLE DEVICE TABLE                                *\n*                                                                     *\n*   DEVMASKT MUST BE IN THE PAGEABLE LINKPACK AREA (PLPA),            *\n*      THE FIXED LINKPACK AREA (FLPA) OR THE MODIFIED                 *\n*      LINKPACK AREA (MLPA). IF DEVMASKT IS IN PLPA,                  *\n*      THE ALTERED AREAS WILL BE PAGE-FIXED.                          *\n*                                                                     *\n*   WRITTEN BY DOUGLAS MERCER, JULY 1980,                             *\n*      FOR THE LOCKHEED-CALIFORNIA COMPANY                            *\n*                                                                     *\n*   MODIFIED BY DOUGLAS MERCER, MARCH 1982,                           *\n*      FOR THE PLPA PROTECT FEATURE OF MVS                            *\n*      (CORRECTED APRIL 1982)                                         *\n*      (CORRECTED OCTOBER 1982)                                       *\n*      (CORRECTED NOVEMBER 1982)                                      *\n*                                                                     *\n*        ATTRIBUTES - REENTRANT                                       *\n*        TAB SETTINGS - 10 16 35 40 72                                *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nGENERIC  START ,\n         SAVE  (14,12),,GENERIC_&SYSDATE\n         SPACE 2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9                  REMAINING DEVMASKT ENTRY COUNT\nR10      EQU   10                 CURRENT DEVMASKT ENTRY\nR11      EQU   11                 EDT POINTER\nR12      EQU   12                 BASE REGISTER\nR13      EQU   13                 WORK AREA POINTER\nR14      EQU   14\nR15      EQU   15\nTCBJSTCB EQU   124,4,C'A'     POINTER TO JOB STEP TCB (TO CURRENT      *\n                                   IF HIGHER THAN JOB STEP)\nTCBJPQ   EQU   44,4,C'A'      ADDRESS OF LAST CDE IN JOB PACK\nCDCHAIN  EQU   0,4,C'A'       ADDRESS OF NEXT CDE OR 0\nCDNAME   EQU   8,8,C'C'       MODULE OR ALIAS NAME\nCDATTR   EQU   28,1,C'X'      ATTRIBUTES\nCDNIP    EQU   128            MODULE IS IN LINK PACK AREA\nASCBRSM  EQU   52,4,C'A'      REAL STORAGE MGR HDR             DM MAR82\nRSMVSTO  EQU   0,4,C'A'       VIRTUAL ADDRESS OF SEGTAB        DM MAR82\n         SPACE 3\n         LR    R12,R15\n         USING GENERIC,R12\n         L     R11,0(,R1)         EDT\n         SPACE ,\n         L     R1,FLCCVT-PSA\n         L     R1,CVTILK2-CVT(,R1)     UCB POINTERS\n         SR    R2,R2\n         SPACE\n* COUNT THE NUMBER OF UCB POINTERS (INCLUDING ZEROS)\nLOOP1    CLC   =H'-1',0(R1)\n         BE    END1               DONE\n         LA    R2,1(,R2)          COUNT THE POINTER\n         LA    R1,2(,R1)\n         B     LOOP1\n         SPACE\nEND1     LA    R2,MASKRND(,R2)    COUNT HEADER AND SLACK BYTES\n         SRA   R2,3               / 8 TO CONVERT BITS TO BYTES\n         N     R2,=F'-4'          TRUNCATE TO FULLWORD\n         LA    R0,WRKLNG1(,R2)    TOTAL LENGTH\n         GETMAIN R,LV=(0)\n         ST    R1,8(,R13)         LOWER SAVE AREA POINTER\n         L     R14,=A(SAVEAREA)   INITIALIZE\n         LA    R15,WRKLNG1             THE WORK\n         LR    R4,R1                        AREA\n         LR    R5,R0\n         MVCL  R4,R14\n         ST    R13,4(,R1)         HIGHER SAVE AREA POINTER\n         LR    R13,R1\n         USING SAVEAREA,R13\n         ST    R0,GMLNG           SAVE THE LENGTH\n         ST    R2,MASKLNG         MASK ENTRY LENGTH\n         MODESET MODE=SUP         GET TO SUPERVISOR STATE      DM MAR82\n         STCTL 0,0,CTLREG0        TO FIND SEGMENT SIZE         DM MAR82\n         MODESET MODE=PROB        GET BACK TO PROB STATE       DM MAR82\n         L     R0,=F'1048576'     1M SEGEMENT SIZE             DM MAR82\n         TM    CTLREG0+1,CRSEG1M                               DM MAR82\n         BO    *+8                                             DM MAR82\n         L     R0,=F'65536'       64K SEGEMENTS                DM MAR82\n         ST    R0,SEGSIZE                                      DM MAR82\n         BCTR  R0,0               REDUCE BY 1                  DM MAR82\n         ST    R0,SEGROUND                                     DM MAR82\n         LNR   R0,R0              DEVELOP                      DM MAR82\n         BCTR  R0,0                    TRUNCATION MASK         DM MAR82\n         ST    R0,SEGTRUNC                                     DM MAR82\n         LH    R0,=H'4096'        4K PAGE SIZE                 DM MAR82\n         TM    CTLREG0+1,CRPAG4K                               DM MAR82\n         BO    *+8                                             DM MAR82\n         LH    R0,=H'2048'        2K PAGES                     DM MAR82\n         ST    R0,PGSIZE                                       DM MAR82\n         BCTR  R0,0               REDUCE BY 1                  DM MAR82\n         ST    R0,PGROUND                                      DM MAR82\n         LNR   R0,R0              DEVELOP                      DM MAR82\n         BCTR  R0,0                    TRUNCATION MASK         DM MAR82\n         ST    R0,PGTRUNC                                      DM MAR82\n         SPACE ,\n         MODESET KEY=ZERO\n         L     R15,0(,R11)        GET ENTRY LENGTH FOR EACH EDT SECTION\n         L     R0,4(,R15)\n         STH   R0,EDTLKUPL        LOOK-UP SECTION LENGTH\n         L     R15,4(,R11)\n         L     R0,4(,R15)\n         STH   R0,EDTGENRL        GENERIC SECTION LENGTH\n         L     R15,20(,R11)\n         L     R0,4(,R15)\n         STH   R0,EDTGRPTL        GROUP POINTER SECTION LENGTH\n         L     R15,8(,R11)\n         L     R0,4(,R15)\n         STH   R0,EDTGRPL         GROUP SECTION LENGTH\n         L     R15,12(,R11)\n         L     R0,4(,R15)\n         STH   R0,EDTUCBPL        UCB POINTER SECTION LENGTH\n         LOAD  EPLOC=DEVNAMET\n         ST    R0,ADRNAMET\n         LOAD  EPLOC=DEVMASKT\n         ST    R0,ADRMASKT\n         SPACE ,\n* MAKE SURE THE MODULE IS IN LINK-PACK (OR MLPA)\n         L     R1,PSATOLD-FLC     CURRENT TCB\n         L     R1,TCBJSTCB(,R1)   JOB STEP TCB\n         L     R1,TCBJPQ(,R1)     JOB PACK QUEUE (CDE'S)\n         SPACE ,\nCDELOOP  LTR   R1,R1              SEE IF END\n         BZ    CDELAST            NOT IN JPA - OK\n         CLC   CDNAME(,R1),DEVMASKT\n         BE    CDEFOUND           THIS IS OUR MODULE\n         L     R1,CDCHAIN(,R1)    NEXT CDE\n         B     CDELOOP\n         SPACE ,\nCDEFOUND TM    CDATTR(R1),CDNIP\n         BO    CDELAST            IN LPA/MLPA - OK\n         WTO   'GENERIC - DEVMASKT NOT IN LPA/MLPA',ROUTCDE=1,DESC=2\n         B     TERM           DON'T PROCESS\n         SPACE ,\nCDELAST  EQU   *\n         SPACE 3\n         L     R10,ADRMASKT       PROCESS THE DEVMASKT\n         LH    R9,0(,R10)         ENTRY COUNT\n         LA    R10,4(,R10)        FIRST ENTRY\n         SPACE 2\nLOOP2    SR    R0,R0\n         SR    R1,R1\n         LA    R14,MASKWRK        ZERO\n         L     R15,MASKLNG             THE NEW\n         MVCL  R14,R0                       ENTRY AREA\n         MVC   MASKDEVT,4(R10)    DEVICE TYPE OR IDENTIFIER\n         L     R14,ADRNAMET       FIND THE UNIT NAME\n         L     R0,0(,R14)              BASED ON THE DEVICE\n         LA    R14,4(,R14)                  TYPE OR IDENTIFIER\n         SPACE ,\nLOOP3    CLC   MASKDEVT,8(R14)\n         BE    END3               FOUND\n         LA    R14,12(,R14)       NEXT\n         BCT   R0,LOOP3\n         B     NOCHNG             NOT FOUND (SHOULD NEVER HAPPEN)\n         SPACE ,\nEND3     L     R1,0(,R11)         FIND THE EDT LOOKUP ENTRY\n         L     R0,0(,R1)               BASED ON THE DEVICE\n         LA    R1,8(,R1)                    NAME\n         SPACE ,\nLOOP4    CLC   0(8,R1),0(R14)\n         BE    END4               FOUND\n         AH    R1,EDTLKUPL        NEXT\n         BCT   R0,LOOP4\n         B     NOCHNG             NOT FOUND (SHOULD BE RARE)\n         SPACE ,\nEND4     BAL   R14,CHNGMASK       BUILD A NEW ENTRY (IN WORK AREA)\n         LR    R0,R10             CURRENT ENTRY\n         LA    R14,MASKWRK        NEW ENTRY\n         L     R1,MASKLNG         SEE IF THE\n         LR    R15,R1                  NEW ENTRY\n         CLCL  R0,R14                       IS DIFFERENT\n         BE    NOCHNG             NO - LEAVE AS IS\n         LR    R2,R10             PAGE FIX\n         BAL   R14,PAGEFIX             THE ENTRY (IF IN PLPA)\n         BAL   R14,CHNGDEVT       CHANGE THE DEVMASKT ENTRY    DM MAR82\n         SPACE ,\nNOCHNG   A     R10,MASKLNG        NEXT DEVMASKT ENTRY\n         BCT   R9,LOOP2\n         SPACE 3\nTERM     MODESET KEY=NZERO\n         DELETE EPLOC=DEVMASKT\n         DELETE EPLOC=DEVNAMET\n         L     R0,GMLNG           FREE THE\n         LR    R1,R13                  WORK AREA\n         L     R13,4(,R13)        HIGHER SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)\n         RETURN (14,12),RC=0\n         EJECT ,\n* MODIFY MASKBITS BASED ON THE EDT\n* R1 POINTS TO THE EDT LOOKUP ENTRY, R14 IS RETURN\nCHNGMASK STM   R14,R12,12(R13)\n         LM    R3,R4,16(R1)       GENERIC COUNT & POINTER\n         SPACE\nCHNGMSK1 LM    R5,R6,4(R4)        GROUP POINTER COUNT & POINTER\n         SPACE\nCHNGMSK2 L     R7,0(,R6)          GROUP\n         LM    R8,R9,4(R7)        UCB POINTER COUNT & POINTER\n         SPACE\nCHNGMSK3 LH    R14,0(,R9)         RELATIVE UCB LOOKUP\n         LA    R1,X'80'\n         SRDL  R14,3              SEPARATE\n         SRL   R15,29                  BYTE/BIT\n         LA    R14,MASKBITS(R14)  ADDRESS BYTE TO BE SET\n         SRL   R1,0(R15)          SET BIT MASK\n         EX    R1,SETMASK\n         LA    R0,1               INCREMENT THE DEVICE COUNT\n         A     R0,MASKCNT\n         ST    R0,MASKCNT\n         SPACE\n         AH    R9,EDTUCBPL        NEXT UCB POINTER\n         BCT   R8,CHNGMSK3\n         SPACE\n         AH    R6,EDTGRPTL        NEXT GROUP POINTER\n         BCT   R5,CHNGMSK2\n         SPACE\n         AH    R4,EDTGENRL        NEXT GENERIC\n         BCT   R3,CHNGMSK1\n         LM    R14,R12,12(R13)\n         BR    R14                RETURN\n         SPACE 2\nSETMASK  OI    0(R14),0           FOR EXECUTE\n         EJECT ,                                               DM MAR82\n* MODIFY DEVMASKT ENTRY FROM MASKWRK                           DM MAR82\n* R10 POINTS TO THE DEVMASKT ENTRY, R14 IS RETURN              DM MAR82\nCHNGDEVT STM   R14,R12,12(R13)                                 DM MAR82\n         NI    SWA,255-LPAPROT                                 DM MAR82\n         LR    R0,R10             DEVELOP OFFSET TO SEGMENT    DM MAR82\n         SRDA  R0,32                 TABLE ENTRY FOR           DM MAR82\n         D     R0,SEGSIZE               BEGINNING OF ENTRY     DM MAR82\n         SLL   R1,2                        DEVMASKT ENTRY      DM MAR82\n         LR    R2,R10             DEVELOP OFFSET TO SEGMENT    DM MAR82\n         A     R2,MASKLNG            TABLE ENTRY FOR           DM MAR82\n         BCTR  R2,0                     END OF DEVMASKT        DM MAR82\n         SRDA  R2,32                       ENTRY               DM MAR82\n         D     R2,SEGSIZE                                      DM MAR82\n         SLL   R3,2                                            DM MAR82\n         LR    R2,R1                                           DM MAR82\n         L     R15,PSAAOLD-PSA    CURRENT ASCB                 DM MAR82\n         L     R15,ASCBRSM(,R15)  REAL STORAGE MGR HDR         DM MAR82\n         L     R15,RSMVSTO(,R15)  VIRTUAL ADDRESS OF SEGTAB    DM MAR82\n         AR    R2,R15             DEVELOP ADDRESSES OF         DM MAR82\n         AR    R3,R15                  SEGTAB ENTRIES          DM MAR82\n         TM    3(R2),4            TEST STORE PROTECTION BIT    DM MAR82\n         BZ    NOPROT1            NO PROTECTION                DM MAR82\n         OI    SWA,LPAPROT        LPA PROTECT IS ON            DM MAR82\n         NI    3(R2),255-4        TURN OFF                     DM MAR82\n         NI    3(R3),255-4             PROTECTION              DM MAR82\n         SPACE ,                                               DM NOV82\n         MODESET MODE=SUP         GET IN SUPERVISOR STATE      DM NOV82\n         PTLB  ,          PURGE TRANSLATION LOOK-ASIDE BUFFER  DM NOV82\n         MODESET MODE=PROB        BACK TO PROBLEM STATE        DM NOV82\n         SPACE ,                                               DM NOV82\nNOPROT1  LR    R0,R10             CURRENT DEVMASKT ENTRY       DM MAR82\n         LA    R14,MASKWRK        NEW DEVMASKT ENTRY           DM MAR82\n         L     R1,MASKLNG         MOVE THE                     DM MAR82\n         LR    R15,R1                  NEW ENTRY               DM MAR82\n         MVCL  R0,R14                       TO THE CURRENT     DM MAR82\n         TM    SWA,LPAPROT        SEE IF LPA PROTECTED         DM MAR82\n         BZ    NOPROT2            NO - SKIP REPROTECT          DM MAR82\n         OI    3(R2),4            TURN ON                      DM MAR82\n         OI    3(R3),4                 PROTECTION              DM MAR82\nNOPROT2  LM    R14,R12,12(R13)                                 DM MAR82\n         BR    R14                RETURN                       DM MAR82\n         EJECT\nPAGEFIX  STM  R14,R12,12(R13)     SAVE ENTRY REGISTERS\n         SPACE 1\n***********************************************************************\n* IN ORDER TO FACILITATE AN UNACCOUNTED FOR PAGEFIX, THE BRANCH       *\n* ENTRY TO THE PAGE SERVICE INTERFACE ROUTINE (IEAVPSIB) MUST BE      *\n* USED. THE FOLLOWING ARE THE REQUIREMENTS FOR THIS ROUTINE:          *\n*    MODE:      SUPERVISOR                                            *\n*    KEY:       ZERO                                                  *\n*    LOCKS:     LOCAL                                                 *\n*    REGISTERS: R0 - ECB ADDRESS, OR ZERO                             *\n*               R1,R2 - IF R1, BYTE 0=1 THEN                          *\n*                          R1=ADDRSS(VSL)                             *\n*                          R2=N/A                                     *\n*                       IF R1, BYTE 0, BIT 0=0                        *\n*                          R1 - XL1(FLAG),AL3(START ADDR)             *\n*                          R2 - XL1(FLAG),AL3(END ADDR +1)            *\n*               R3 - N/A                                              *\n*               R4 - TCB ADDRESS, OR ZERO - IF ZERO NO FOE WILL       *\n*                                           BE BUILT - NO RLSE AT     *\n*                                           END OF TASK               *\n*               R5-R13 - N/A                                          *\n*               R14 - RETURN ADDRESS                                  *\n*               R15 - ENTRY POINT OF IEAVPSIB                         *\n***********************************************************************\n         SPACE 1\n* ON ENTRY R2 - ADDR OF DEVMASKT ENTRY\n         SPACE 1\n         L     R1,FLCCVT-PSA\n         CLM   R2,7,CVTLPDIR-CVT(R1)   SEE IF IN PLPA\n         BL    PGFXRET            NO - ADDRESS TOO LOW\n         LR    R4,R2              SET ENTRY START ADDRESS\n         N     R4,=F'-4096'       TRUNCATE TO PAGE START\n         LR    R5,R4\n         AH    R5,=H'4096'        FIX 4096 BYTES\n         A     R2,MASKLNG         END OF ENTRY\n         CR    R2,R5              CHECK IF OVER END OF PAGE\n         BNH   *+8                NO\n         AH    R5,=H'4096'        FIX 8192 BYTES\n         C     R4,FIXLOW\n         BL    PAGEFIX1           BELOW LAST FIX\n         C     R5,FIXHIGH\n         BH    PAGEFIX1           ABOVE LAST FIX\n         B     PGFXRET            THIS PAGE ALREADY FIXED\n         SPACE ,\nPAGEFIX1 STM   R4,R5,FIXLOW       SAVE NEW LIMITS\n         ICM   R4,8,=X'42'        INDICATE LONG FIX\n         ICM   R5,8,=X'80'        INDICATE LAST ENTRY\n* R4 & R5 NOW CONTAIN VSL TO BE USED IN PAGE FIX\n         MODESET MODE=SUP         GET TO SUPERVISOR STATE\n         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE,               *\n               RELATED=('LOCAL LOCK FOR IEAVPSIB')\n         XC    FXECB,FXECB        CLEAR ECB\n         LA    R0,FXECB           SET ECB ADDRESS\n         LR    R1,R4              LOAD VSL INTO REGS 1 & 2\n         LR    R2,R5              FROM REGS 4 & 5\n         SR    R4,R4              SET R4=0, INDICATE NO TCB\n         L     R15,16             GET CVT ADDRESS\n         L     R15,CVTVPSIB-CVT(,R15) GET IEAVPSIB ADDRESS\n         BALR  R14,R15            BRANCH ENTER PAGE SERVICES\n         LR    R10,R15            SAVE RETURN CODE\n         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE,                          *\n               RELATED=('LOCAL LOCK FOR IEAVPSIB')\n         MODESET MODE=PROB        GET BACK TO PROB STATE\n         LTR   R10,R10            CHECK PGFIX RC\n         BZ    PGFXRET            0 - FIX COMPLETE & OK\n         WAIT  ECB=FXECB          WAIT FOR PAGE I/O COMPLETE\n         CLI   FXECB+3,0          WAS FIX OK?\n         BE    PGFXRET            YES, SET UP RETURN\n         WTO   'GENERIC HAS FAILED TO PAGEFIX DEVMASKT',               *\n               ROUTCDE=2\n         SPACE 1\nPGFXRET  LM    R14,R12,12(R13)    RESTORE REGS\n         BR    R14                RETURN\n         SPACE 3\nDEVNAMET DC    CL8'DEVNAMET'\nDEVMASKT DC    CL8'DEVMASKT'\n         SPACE ,\n         LTORG ,\n         EJECT ,\n* WORK AREA DEFINITION AND INITIALIZATION AREA\n* R13 POINTS TO A GETMAIN AREA WHICH IS THEN INITIALIZED\n* WITH THIS DATA\n         CSECT ,\nSAVEAREA DC    18F'0'             REGISTER SAVE AREA\nGMLNG    DC    F'0'               LENGTH OF THIS AREA\nMASKLNG  DC    F'0'               LENGTH OF ONE DEVMASKT ENTRY\n         SPACE 1\nFXECB    DS    F                  PAGE FIX ECB\nFIXLOW   DC    A(0)               LOWER BOUND OF LAST PAGEFIX\nFIXHIGH  DC    A(0)               UPPER BOUND OF LAST PAGEFIX\nADRNAMET DC    A(0)               ENTRY POINT OF DEVNAMET\nADRMASKT DC    A(0)               ENTRY POINT OF DEVMASKT\nCTLREG0  DC    F'0'               CONTROL REGISTER 0           DM MAR82\n* BYTE 0                                                       DM MAR82\nCRBLKMUX EQU   128                BLOCK MULTIPLEXING CONTROL   DM MAR82\nCRSSMSUP EQU   64                 SSM SUPPRESSION              DM MAR82\nCRTODCTL EQU   32                 TOD-CLOCK SYNC               DM MAR82\nCRLAPROT EQU   16                 LOW-ADDRESS PROTECTION       DM MAR82\nCREXAUTH EQU   8                  EXTRACTION AUTHORITY         DM MAR82\nCRSECSPC EQU   4                  SECONDARY ADDRESS SPACE CTL  DM MAR82\nCRRSV1   EQU   2                  RESERVED                     DM MAR82\nCRSKEXC  EQU   1                  STORAGE EXCEPTION CONTROL    DM MAR82\n* BYTE 1                                                       DM MAR82\nCRPAG4K  EQU   128                4K PAGES (DAT)               DM MAR82\nCRPAG2K  EQU   64                 2K PAGES                     DM MAR82\nCRRSV2   EQU   32                 RESERVED                     DM MAR82\nCRSEG1M  EQU   16                 1-MEG SEGMENTS               DM MAR82\n*                                 0 IS 64-K SEGMENTS           DM MAR82\nCRRSV3   EQU   8                  RESERVED                     DM MAR82\nCRPFASST EQU   4                  PAGE-FIX ASSIST              DM MAR82\nCRRSV4   EQU   2                  RESERVED                     DM MAR82\nCRRSV5   EQU   1                  RESERVED                     DM MAR82\n* BYTE 2                                                       DM MAR82\nCRMASUBM EQU   128                MALFUNCTION-ALERT SUBCLASS M DM MAR82\nCRESSUBM EQU   64                 EMERGENCY-SIGNAL SUBCLASS MA DM MAR82\nCRXCSUBM EQU   32                 EXTERNAL-CALL SUBBCLASS MASK DM MAR82\nCRTODSYN EQU   16                 TOD-CLOCK SYNC-CHECK SUBCLAS DM MAR82\nCRCCSUBM EQU   8                  CLOCK-COMPARATOR SUBCLASS MA DM MAR82\nCRCPUSUB EQU   4                  CPU-TIMER SUBCLASS MASK      DM MAR82\nCRSSSUBM EQU   2                  SERVICE-SIGNAL SUBCLASS MASK DM MAR82\nCRRSV6   EQU   1                  RESERVED                     DM MAR82\n* BYTE 3                                                       DM MAR82\nCRITSUBM EQU   128                INTERVAL TIMER SUBCLASS MASK DM MAR82\nCRIKSUBM EQU   64                 INTERRUPT-KEY SUBCLASS MASK  DM MAR82\nCREXSUBM EQU   32                 EXTERNAL-SIGNAL SUBCLASS MAS DM MAR82\nCRRSV7   EQU   16                 RESERVED                     DM MAR82\nCRRSV8   EQU   8                  RESERVED                     DM MAR82\nCRRSV9   EQU   4                  RESERVED                     DM MAR82\nCRIUCVSM EQU   2                  IUCV SUBCLASS MASK (VM/370)  DM MAR82\nCRVMCFSM EQU   1                  VMCF SUBCLASS MASK (VM/370)  DM MAR82\n         SPACE ,                                               DM MAR82\nSEGSIZE  DC    F'0'               SEGMENT LENGTH (64K OR 1M)   DM MAR82\nSEGROUND DC    F'0'               SEGMENT ROUNDING FACTOR      DM MAR82\nSEGTRUNC DC    F'0'               'AND' MASK TO TRUNCATE SGMNT DM MAR82\nPGSIZE   DC    F'0'               PAGE LENGTH (2K OR 4K)       DM MAR82\nPGROUND  DC    F'0'               PAGE ROUNDING FACTOR         DM MAR82\nPGTRUNC  DC    F'0'               'AND' MASK TO TRUNCATE PAGE  DM MAR82\n         SPACE\n* THE FOLLOWING NUMBERS ARE THE LENGTHS OF EACH SECTION OF THE EDT\nEDTLKUPL DC    H'32'              LOOK-UP SECTION\nEDTGENRL DC    H'12'              GENERIC SECTION\nEDTGRPTL DC    H'4'               GROUP POINTER SECTION\nEDTGRPL  DC    H'12'              GROUP SECTION\nEDTUCBPL DC    H'2'               UCB POINTER SECTION\n         SPACE ,                                               DM MAR82\nSWA      DC    X'0'               BIT SWITCHES                 DM MAR82\nLPAPROT  EQU   128                LPA PROTECT IS ON            DM MAR82\n         DC    0D'0'\nWRKLNG1  EQU   *-SAVEAREA         FIXED PORTION OF AREA\nMASKWRK  DS    0F\nMASKCNT  DS    F                  NUMBER OF DEVICES IN THIS ENTRY\nMASKDEVT DS    F                  DEVICE TYPE\nMASKBITS EQU   *\nMASKRND  EQU   7+8*(*-MASKWRK+3)  FACTOR TO CONVERT BITS IN            *\n                                  DEVMASKT TO A NUMBER OF BYTES        *\n                                  THAT IS A FULLWORD MULTIPLE\n         SPACE 3\n         CVT   DSECT=YES\n         PUSH  PRINT\n         PRINT ON,NOGEN\n         IHAPSA ,\n         POP PRINT\n         END\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1,RENT'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=SYSDA\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//         DD  *\n  NAME GENERIC(R)\n./ ADD NAME=UNITMAP  8000-02078-02078-1607-00380-00380-00000-SYZYGY1\n* MACROS HAVE BEEN INSERTED INTO THIS FILE IN-LINE WITH THE PROGRAM\n* WHICH STARTS ABOUT 125 LINES DOWN.  THIS MEMBER SHOULD BE ASSEMBLED\n* WITH THE UNITMAP$ JCL.  (MAKE SURE YOU MAKE THE JCL CHANGES FOR\n* YOUR SITE).  THIS PROGRAM HAS BEEN TESTED WITH THE HERCULES-390\n* VERSION OF MVS 3.8J (MARCH, 2002)\n*\n*      BRIAN WESTERMAN   (BRIAN_WESTERMAN@SYZYGYINC.COM)\n*      SYZYGY INCORPORATED\n*      (800) 767-2244\n*      (800) 366-4082 - FAX\n*\n         MACRO\n         REGS  &A\n         LCLA  &N\n         SPACE 2\n*        GENERATE REGISTER NAMES\n.B       ANOP\n&A&N     EQU   &N\n&N       SETA  &N+1\n         AIF   (&N NE 16).B\n         MEND\n*        FULLSAVE\n         MACRO\n&NAME    FULLSAVE &BASEREG=12,&LV=,&SP=,&RENT=YES,&AREA=,&IDENT=*\n         LCLA  &LCLA\n         LCLC  &C(9),&LVA,&SPA\n         AIF   ('&RENT' NE 'NO').TESTYES\n         AIF   (T'&LV NE 'O').MNOTE\n         AIF   (T'&SP EQ 'O').SAVE\n.MNOTE   MNOTE 8,'IF RENT=NO, NEITHER LV NOR SP MAY BE SPECIFIED'\n         MEXIT\n.TESTYES AIF   ('&RENT' EQ 'YES' OR '&RENT' EQ 'SPECIAL').ISRENT\n         MNOTE 8,'IF RENT PARAMETER IS SPECIFIED, IT MUST HAVE THE VALUX\n               E ''YES'', ''NO'', OR ''SPECIAL''.'\n         MEXIT\n.ISRENT  AIF   (T'&LV NE 'O').TSTSP\n&LVA     SETC  '72'\n.TSTSP   AIF   (T'&SP NE 'O').SAVE\n&SPA     SETC  '0'\n.SAVE    ANOP\n         AIF   (N'&BASEREG LT 10).GENBASE\n         MNOTE 8,'TOO MANY BASE REGISTERS SPECIFIED. MAXIMUM PERMITTED X\n               IS 9.'\n         MEXIT\n.GENBASE ANOP\n&LCLA    SETA  &LCLA+1\n&C(&LCLA) SETC ','\n         AIF   (&LCLA LT N'&BASEREG).GENBASE\n         DS    0H   ALIGN FOR FOLLOWING USING STATEMENT\n USING *&C(1)&BASEREG(1)&C(2)&BASEREG(2)&C(3)&BASEREG(3)&C(4)&BASEREG(4X\n               )&C(5)&BASEREG(5)&C(6)&BASEREG(6)&C(7)&BASEREG(7)&C(8)&BX\n               ASEREG(8)&C(9)&BASEREG(9) ESTABLISH ADDRESSABILITY\n*              SAVE CALLER'S REGISTERS\n&NAME    SAVE  (14,12),T,&IDENT\n         LR    &BASEREG(1),15 LOAD BASE REGISTER FROM INITIAL ENTRY REGX\n               ISTER\n         AIF   ('&RENT' EQ 'NO').NOTRENT\n*              GETMAIN FOR NEW SAVEAREA\n         AIF   ('&RENT' EQ 'SPECIAL').SPECIAL\n         GETMAIN    R,LV=&LV.&LVA,SP=&SP.&SPA\n         AGO   .STORE13\n.SPECIAL GETCORE    R,LV=&LV.&LVA,SP=&SP.&SPA\n         AGO   .STORE13\n.NOTRENT AIF   (T'&AREA EQ 'O').DS18F\n         B     LOAD&SYSNDX    SPACE OVER SAVEAREA ADCON\n         DC    A(&AREA)  SAVEAREA POINTER\nLOAD&SYSNDX L  1,*-4  GET ADDRESS OF NEW SAVEAREA\n         AGO   .STORE13\n.DS18F   B     LOAD&SYSNDX    SPACE OVER NEW SAVEAREA\n         DS    18F  NEW SAVEAREA\nLOAD&SYSNDX LA 1,*-72    GET ADDRESS OF NEW SAVEAREA\n.STORE13 ST    13,4(1)   STORE OLD SAVEAREA ADDRESS IN NEW SAVEAREA\n         ST    1,8(13)   STORE NEW SAVEAREA ADDRESS IN OLD SAVEAREA\n         LR    0,1  TEMPORARILY MOVE NEW SAVEAREA ADDRESS TO REG 0\n         LR    1,13 MOVE OLD SAVEAREA ADDRESS TO REG 1\n         LR    13,0 MOVE NEW SAVEAREA ADDRESS TO REG 13\n         AIF   (N'&BASEREG EQ 1).AIFAREA\n&LCLA    SETA  1\n         LA    &BASEREG(N'&BASEREG),4095 SET INCREMENT FOR ADDITIONAL BX\n               ASE REGISTERS\n.BASELA  LA    &BASEREG(&LCLA+1),1(&BASEREG(&LCLA),&BASEREG(N'&BASEREG)X\n               ) SET NEXT BASE REGISTER\n&LCLA    SETA  &LCLA+1\n         AIF   (&LCLA LT N'&BASEREG).BASELA\n.AIFAREA AIF   ('&AREA' EQ '').LM\n         USING &AREA,13  MAKE NEW SAVEAREA ADDRESSABLE\n.LM      LM    0,1,20(1) RESTORE REGISTERS 0 AND 1 FROM OLD SAVEAREA\n         MEND\n*        TRANSFERRED FROM HAMMER   - 09/16/70\n*\n         MACRO\n&NAME    FULLRTRN   &LV=,&SP=,&RC=0,&RENT=YES\n         LCLC  &LVA,&SPA\n         AIF   ('&RENT' EQ 'YES' OR '&RENT' EQ 'SPECIAL').ISRENT\n         AIF   ('&RENT' EQ 'NO').NOTRENT\n         MNOTE 8,'IF RENT PARAMETER IS SPECIFIED, IT MUST HAVE THE VALUX\n               E ''YES'', ''NO'', OR ''SPECIAL''.'\n         MEXIT\n.NOTRENT AIF   (T'&LV EQ 'O').TSTSP\n.LVSPMSG MNOTE 8,'IF RENT=NO, NEITHER LV NOR SP MAY BE SPECIFIED'\n         MEXIT\n.TSTSP   AIF   (T'&SP NE 'O').LVSPMSG\n&NAME    L     13,4(13)  GET CALLER'S SAVEAREA ADDRESS\n         AGO   .RETURN\n.ISRENT  AIF   (T'&SP NE 'O').TSTLV\n&SPA     SETC  '0'\n.TSTLV   AIF   (T'&LV    NE 'O').GENER\n&LVA     SETC  '72'\n         AGO   .LR\n.GENER   AIF   ('&LV' NE '0').LR\n&NAME    SR    1,1 ZERO REGISTER TO INDICATE ENTIRE SUBPOOL BEING FREED\n         AGO   .LOAD13\n.LR      ANOP\n&NAME    LR    1,13 LOAD CURRENT SAVEAREA ADDRESS IN REG 1\n.LOAD13  L     13,4(13)  GET CALLER'S SAVEAREA ADDRESS\n*              EXECUTE FREEMAIN MACRO\n         AIF   ('&RENT' EQ 'SPECIAL').SPECIAL\n         FREEMAIN R,LV=&LV.&LVA,SP=&SP.&SPA,A=(1)\n         AGO   .RETURN\n.SPECIAL FREECORE   R,LV=&LV.&LVA,SP=&SP.&SPA,A=(1)\n.RETURN  ANOP\n*              RETURN TO CALLER\n         RETURN (14,12),T,RC=&RC\n         MEND\n         TITLE 'TSO COMMAND TO MAP UNIT NAMES AND DEVICES'\n**********************************************************************\n*                                                                    *\n*  NAME      -   UNITMAP                                             *\n*                                                                    *\n*  FUNCTION  -   MAP UNIT NAMES FROM EDT                             *\n*                                                                    *\n*  VERSION   -   2.0                                                 *\n*                                                                    *\n*  DATE      -   12/30/80                                            *\n*                                                                    *\n*  AUTHOR    -   C. LYONS                                            *\n*                                                                    *\n*  SYSTEM    -   MVS 3.8 AND MVS/SE2                                 *\n*                                                                    *\n*  OUTPUT    -   UNITNAME - CUU,CUU,CUU                              *\n*                                                                    *\n*  ATTRIB    -   NON-REUSABLE                                        *\n*                                                                    *\n*  MACROS    -   FULLSAVE,FULLRTRN                                   *\n*                                                                    *\n*  DSECTS    -   CVT,IEFJESCT,IEFUCBOB,EDT,IKJCPPL,IKJECT,IKJPPL     *\n*                                                                    *\n*  LOGIC     -                                                       *\n*                                                                    *\n*               DO I TO # UNIT NAMES;                                *\n*                DO J TO # GENERIC DEVICE TYPES WITHIN A UNIT NAME;  *\n*                 DO K TO # GROUPS WITHIN A GENERIC DEVICE TYPE;     *\n*                  DO L TO # UCBS WITHIN A GROUP;                    *\n*                   PRINT UNITNAME,DEVICE ADDRESS;                   *\n*                  END L;                                            *\n*                 END K;                                             *\n*                END J;                                              *\n*               END I;                                               *\n*                                                                    *\n*  REGS      -                                                       *\n*              R0,R1       -   WORK                                  *\n*              R2,R15      -   WORK                                  *\n*              R3          -   # UNIT NAMES                          *\n*              R4          -   LENGTH OF A UNIT NAME ENTRY           *\n*              R5          -   A(CURRENT UNIT NAME ENTRY)            *\n*              R6          -   # GENERICS WITHIN UNIT NAME           *\n*              R7          -   A(FIRST GENERIC ENTRY)                *\n*              R8          -   # GROUPS WITHIN A GENERIC             *\n*              R9          -   A(FIRST GROUP ENTRY POINTER)          *\n*              R10         -   A(FIRST GROUP ENTRY)                  *\n*              R11         -   # UCBS WITHIN A GROUP                 *\n*              R14         -   A(FIRST UCB ENTRY)                    *\n*                                                                    *\n* INSTALL    -   ASSEMBLE UNITMAP                                    *\n*                LINK UNITMAP                                        *\n*                PLACE UNITMAP IN LINKLIST LIBRARY                   *\n**********************************************************************\nUNITMAP  CSECT\n         REGS  R                       REGISTER EQUATES\n         FULLSAVE RENT=NO              ENTRANCE CONVENTIONS\n         MVI   HITFLG,X'FF'            ASSUME SOMETHING WILL PRINT\n         LR    R3,R1                   SAVE CPPL ADDR\n         USING CPPL,R3\n         L     R4,CPPLECT              ECT\n         USING ECT,R4\n         TM    ECTSWS,ECTNOPD          ANY OPERANDS?\n         BO    SCANEDT                 NO, BYPASS PARSE\n         MVI   HITFLG,X'00'            IF PARSING, ASSUME NOTHING\n         LA    R4,PARSPARM                         WILL PRINT\n         USING PPL,R4                  BUILD PARSE PARAMETER LIST\n         MVC   PPLUPT,CPPLUPT\n         MVC   PPLECT,CPPLECT\n         MVC   PPLCBUF,CPPLCBUF\n         DROP  R3\n         LA    R1,PARSECB\n         ST    R1,PPLECB\n         L     R1,=A(PCL)\n         ST    R1,PPLPCL\n         LA    R1,PARSANS\n         ST    R1,PPLANS\n         CALLTSSR EP=IKJPARS,MF=(E,(R4))\n         DROP  R4\n         L     R1,PARSANS             CHECK IF PARSE OK\n         LTR   R1,R1\n         BP    SCANEDT\n         LA    R1,=CL40'UNITMAP TERMINATED - PARSE ERROR'\n         LA    R0,40\n         TPUT  (1),(0),R\n         B     EXIT\n*\n*  FIND THE EDT'S LOOKUP SECTION; GET # UNIT NAMES\n*\nSCANEDT  L     R2,CVTPTR               CVT\n         USING CVT,R2\n         L     R2,CVTJESCT             JESCT\n         USING JESCT,R2\n         L     R2,JESEDT               EDT\n         USING EDTHEAD,R2\n         L     R1,LOOKPTR              LOOKUP SECTION\n         DROP  R2\n         USING LOOKSEC,R1\n         L     R3,LOOK#ENT             # UNIT ENTRIES\n         L     R4,LOOKLENT             L'ENTRY\n         LA    R5,LOOKUNIT             ->UNITNAME\n         DROP  R1\n*\n*  DO I TO # UNIT NAMES;\n*\nUPUT     L     R1,PARSANS\n         LTR   R1,R1\n         BZ    NOPARSE\n         USING PDL,R1                  SEE IF UNITNAME SEARCH INDEX\n         L     R15,UNITPTR                SATISFIED.\n         LH    R2,UNITLEN\n         BCTR  R2,0\n         EX    R2,CHKUNIT\n         BNE   NOPUT\n         MVI   HITFLG,X'FF'            SAY INDEX SATISFIED\n         DROP  R1\nNOPARSE  MVI   LINE,C' '               CLEAR PRINT LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         MVC   LINE(8),0(R5)           MOVE UNIT NAME\n         LA    R1,LINE+9               UPDATE LINE POINTER\n         ST    R1,LINEPTR\n         USING LOOKUNIT,R5\n         L     R6,LOOK#GEN             # GENERICS WITHIN THIS UNIT\n         L     R7,LOOKGPTR             ->FIRST GENERIC ENTRY\n         DROP  R5\n         USING GENSEC,R7\n*\n*  DO J TO # GENERIC DEVICE TYPES WITHIN A UNIT NAME;\n*\nUGEN     L     R8,GEN#GRP              # GROUPS WITHIN GENERIC\n         L     R9,GENGPTR              ->FIRST GROUP POINTER\n         DROP  R7\n         USING GPTRSEC,R9\n*\n*  DO K TO # DEVICE GROUPS WITHIN A GENERIC DEVICE TYPE;\n*\nUGRP     L     R10,GPTRGRP             ->GROUP SECTION\n         DROP  R9\n         USING GRPSEC,R10\n         L     R11,GRP#UCB             # UCBS WITHIN GROUP\n         L     R14,GRPOUCB             ->FIRST UCB OFFSET\n         DROP  R10\n*\n*  DO L TO # UCBS WITHIN A DEVICE GROUP;\n*\nUCB      LH    R15,0(0,R14)            GET UCB OFFSET\n         SLL   R15,1                   X 2\n         L     R1,CVTPTR               CVT\n         USING CVT,R1\n         L     R1,CVTILK2              ->UCB LOOKUP TABLE\n         LH    R1,0(R15,R1)            UCB ADDRESS\n         USING UCBCMSEG,R1\n         LA    R15,UCBNAME             ->DEVICE ADDRESS\n         DROP  R1\n*\n*  BUILD A PRINT LINE\n*\n         L     R1,LINEPTR              LINE FILLED?\n         LA    R0,LINE+71\n         CR    R1,R0\n         BH    PUTIT                   YES, PUT LINE\n         MVC   0(3,R1),0(R15)\n         LA    R1,4(0,R1)              NO, MOVE DEVICE ADDR\n         ST    R1,LINEPTR                  AND UPDATE LINE POINTER\n         B     NEXTUCB                 GET NEXT UCB\nPUTIT    LR    R2,R15                  SAVE ->DEVICE ADDRESS\n         TPUT  LINE,74                 PRINT FILLED LINE\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE   CLEAR LINE\n         LA    R1,LINE+13\n         ST    R1,LINEPTR              UPDATE LINE POINTER\n         MVC   LINE+9(3),0(R2)         MOVE WHAT WOULDN'T FIT\n*\n*  END L;\n*\nNEXTUCB  LA    R14,2(0,R14)            NEXT UCB OFFSET\n         BCT   R11,UCB                 LOOP THROUGH UCBS\n*\n*  END K;\n*\n         LA    R9,4(0,R9)              NEXT GROUP ENTRY\n         BCT   R8,UGRP                 LOOP THROUGH GROUPS\n*\n*  END J;\n*\n         LA    R7,12(0,R7)             NEXT GENERIC ENTRY\n         BCT   R6,UGEN                 LOOP THROUGH GENERIC ENTRIES\n         LA    R1,LINE+75              SEE IF A NON-FILLED LINE\n         C     R1,LINEPTR                  STILL NEEDS TO BE PRINTED.\n         BE    NOPUT                       IF SO,\n         TPUT  LINE,74                           PRINT IT.\n*\n*  END I;\n*\nNOPUT    LA    R5,0(R4,R5)             NEXT ENTRY\n         BCT   R3,UPUT                 LOOP THROUGH UNITNAME ENTRIES\n         CLI   HITFLG,X'FF'            ANYTHING PRINTED?\n         BE    EXIT\n         LA    R1,=CL40'NO UNIT NAMES SATISFY SEARCH CRITERIA'\n         LA    R0,40\n         TPUT  (1),(0),R\n         SPACE 2\nEXIT     IKJRLSA PARSANS               RELEASE PARSE WORK AREA\n         FULLRTRN RENT=NO              EXIT\n         SPACE 2\n         DS   0H\nCHKUNIT  CLC  0(*-*,R15),0(R5)         CMP CURR UNIT TO OPERAND\nLINEPTR  DS   F                        CURRENT PRINT LINE POINTER\nLINE     DS   CL74                     PRINT LINE\nHITFLG   DC   X'0'                     PRINT FLAG\n*\n*  PARSE PARAMETERS\n*\nPARSE    DS   0F\nPARSPARM DC   7A(0)\nPARSECB  DC   F'0'\nPARSANS  DC   A(0)\nPCL      IKJPARM DSECT=PDL\nUNIT     IKJIDENT 'UNITNAME',FIRST=ANY,OTHER=ANY,MAXLNTH=8\n         IKJENDP\n         TITLE 'DSECTS'\nPDL      DSECT\n         ORG   UNIT\nUNITPTR  DS    A\nUNITLEN  DS    H\n         CVT  DSECT=YES,PREFIX=NO      CVT\n         IKJCPPL                       CPPL\n         IKJECT                        ECT\n         IKJPPL                        PPL\n         IEFJESCT                      JESCT\n         IEFUCBOB                      UCB\nEDT      DSECT                         ELIGIBLE DEVICE TABLE\nEDTHEAD  EQU   *                       EDT HEADER\nLOOKPTR  DS    A                       ->LOOKUP SECTION\n         ORG   EDT\nLOOKSEC  EQU   *                       LOOKUP SECTION\nLOOK#ENT DS    F                       # ENTRIES\nLOOKLENT DS    F                       LENGTH OF AN ENTRY\nLOOKUNIT DS    CL8                     UNIT NAME\nLOOKVAL  DS    F                       LOOKUP VALUE\nLOOKMPTR DS    A                       ->GROUP MASK ENTRY\nLOOK#GEN DS    F                       # GENERICS\nLOOKGPTR DS    A                       ->GENERIC SECTION\n         ORG   EDT\nGENSEC   EQU   *                       GENERIC SECTION\nGENDEV   DS    XL4                     GENERIC DEVICE TYPE\nGEN#GRP  DS    F                       # GROUPS\nGENGPTR  DS    A                       ->FIRST GROUP POINTER\n         ORG   EDT\nGPTRSEC  EQU   *                       GROUP POINTER TABLE\nGPTRGRP  DS    A                       ->FIRST GROUP ENTRY\n         ORG   EDT\nGRPSEC   EQU   *                       GROUP SECTION ENTRY\nGRPID    DS    F                       GROUP ID\nGRP#UCB  DS    F                       # UCBS\nGRPOUCB  DS    A                       ->FIRST UCB ENTRY\n         END\n./ ADD NAME=UNITMAP$ 8000-02078-02078-1600-00033-00033-00000-SYZYGY1\n//UNITMAP  JOB (T033675269-SCP,TECH),WESTERMAN,CLASS=A,MSGCLASS=A,\n//             NOTIFY=SYZYGY\n//ASMFCL PROC  CLASS=A,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='SYZYGY.DYNAMASK',\n//             LOAD='SYZYGY.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='OBJECT,NODECK,ALIGN,TERM'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSTERM  DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD.(&MEM),DISP=SHR\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=UNITMAP\n./ ADD NAME=VATUCB   8000-02078-02078-1610-00378-00378-00000-SYZYGY1\n//*  DO NOT ASSEMBLE THIS MODULE UNDER THE HERCULES-390 SYSTEM\n//*  DO NOT ASSEMBLE THIS MODULE UNDER THE HERCULES-390 SYSTEM\n//*  DO NOT ASSEMBLE THIS MODULE UNDER THE HERCULES-390 SYSTEM\n//*  DO NOT ASSEMBLE THIS MODULE UNDER THE HERCULES-390 SYSTEM\n//*  DO NOT ASSEMBLE THIS MODULE UNDER THE HERCULES-390 SYSTEM\n//*  DO NOT ASSEMBLE THIS MODULE UNDER THE HERCULES-390 SYSTEM\n//*  DO NOT ASSEMBLE THIS MODULE UNDER THE HERCULES-390 SYSTEM\n//*  DO NOT ASSEMBLE THIS MODULE UNDER THE HERCULES-390 SYSTEM\n//*  DO NOT ASSEMBLE THIS MODULE UNDER THE HERCULES-390 SYSTEM\n//*  DO NOT ASSEMBLE THIS MODULE UNDER THE HERCULES-390 SYSTEM\n//*  DO NOT ASSEMBLE THIS MODULE UNDER THE HERCULES-390 SYSTEM\n//*  DO NOT ASSEMBLE THIS MODULE UNDER THE HERCULES-390 SYSTEM\n//*  DO NOT ASSEMBLE THIS MODULE UNDER THE HERCULES-390 SYSTEM\n//*  DO NOT ASSEMBLE THIS MODULE UNDER THE HERCULES-390 SYSTEM\n//*  DO NOT ASSEMBLE THIS MODULE UNDER THE HERCULES-390 SYSTEM\n//*  DO NOT ASSEMBLE THIS MODULE UNDER THE HERCULES-390 SYSTEM\n//*  DO NOT ASSEMBLE THIS MODULE UNDER THE HERCULES-390 SYSTEM\n//*  DO NOT ASSEMBLE THIS MODULE UNDER THE HERCULES-390 SYSTEM\n//*  DO NOT ASSEMBLE THIS MODULE UNDER THE HERCULES-390 SYSTEM\n//*  DO NOT ASSEMBLE THIS MODULE UNDER THE HERCULES-390 SYSTEM\n//*  DO NOT ASSEMBLE THIS MODULE UNDER THE HERCULES-390 SYSTEM\n//VATUCB  JOB (BHWA00),'SYSTEMS*BRIAN',MSGCLASS=A,\n//     CLASS=A,NOTIFY=SYZYGY\n//ASM      EXEC  PGM=IFOX00,REGION=500K,\n//         PARM='OBJECT,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=SYSDA\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=SYSDA\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=SYSDA\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=SYSDA,FREE=CLOSE,\n//             SPACE=(TRK,(1,1),RLSE)\n//SYSIN    DD  *\n***********************************************************************\n*                                                                     *\n*   PROGRAM TO MAKE ALL DIRECT ACCESS VOLUMES MATCH VATLST            *\n*   WHEN CHANGES ARE MADE AFTER IPL TIME                              *\n*                                                                     *\n*   WRITTEN BY AL ARAUJO, JUNE 1976,                                  *\n*      FOR THE LOCKHEED-CALIFORNIA COMPANY                            *\n*                                                                     *\n*   MODIFIED BY DOUG MERCER, JULY 1980,                               *\n*      TO BE REENTRANT                                                *\n*                                                                     *\n*   MODIFIED BY DOUG MERCER, AUGUST 1980,                             *\n*      TO BINARY SEARCH THE VATLST TABLE (IF IN SEQUENCE)             *\n*                                                                     *\n*   MODIFIED BY DOUG MERCER, JANUARY 1984,                            *\n*      FOR MVS/XA (IOSVSUCB RATHER THAN UCB LOOKUP TABLE)             *\n*                                                                     *\n*      THIS PROGRAM IS BEING CALLED IN BY GENERIC AND LOADS IN THE    *\n*         VATLIST TO BE COMPARED WITH THE DIRECT ACCESS VOLUMES.      *\n*      1.THE CORRESPONDING 'USE' ATTRIBUTE IS ALTERED IN ITS UCB      *\n*      2.THE CORRESPONDING 'SHARE' ATTRIBUTE IS ALTERED IN ITS UCB    *\n*      3.THE CORRESPONDING 'MOUNT' ATTRIBUTE IS ALTERED IN ITS UCB    *\n*                                                     A.R.A. DEC 76   *\n*      4.ANY DIRECT ACCESS DEVICE NOT FOUND IN THE VATLST TABLE WILL  *\n*        BE MARKED AS PRIVATE AND RESERVE.            A.R.A. JAN 80   *\n*                                                                     *\n*        ATTRIBUTES - REENTRANT                                       *\n*        TAB SETTINGS - 10 16 31 72                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nVATUCB   CSECT ,\n         USING VATUCB,R12\n         USING EXSA,R8\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\n         SAVE  (14,12)        *SAVE THE REGISTERS\n         LR    R12,R15\n         SPACE 3                                               DM JUL80\n         GETMAIN R,LV=SAVSIZ\n         L     R14,=A(SAVEAREA)                                DM JUL80\n         LR    R15,R0                                          DM JUL80\n         LR    R2,R1          INITIALIZE                       DM JUL80\n         LR    R3,R0               THE WORK                    DM JUL80\n         MVCL  R2,R14                   AREA                   DM JUL80\n         ST    R1,8(,R13)\n         ST    R13,4(,R1)\n         LR    R13,R1\n         USING SAVEAREA,R13                                    DM JUL80\n         SPACE 3\n         L     R3,VATTBLE                                      DM JUL80\n         USING VATLST,R3\n         OPEN  VATIN,MF=(E,OCLIST)                             DM JUL80\n         BAL   R14,GETVAT     GET A TABLE AREA                 DM JUL80\n         SPACE 4\n********************************************************************\n*   LOAD VATLST TABLE                                              *\nINPUT    DS    0H\n         C     R3,VATLAST     SEE IF THIS IS LAST SLOT         DM JUL80\n         BNH   *+8            NO                               DM AUG80\n         BAL   R14,GETVAT     GET A LARGER AREA                DM JUL80\n         GET   VATIN          BRING IN VATLST ENTRY            DM JUL80\n         LA    R0,1           COUNT                            DM AUG80\n         AH    R0,VATCNT           TABLE                       DM AUG80\n         STH   R0,VATCNT                ENTRY                  DM AUG80\n         MVC   VATLST(VATLNG),0(R1)                            DM JUL80\n         CLC   SEQCHK,VOLSER  CHECK SEQUENCE                   DM AUG80\n         MVC   SEQCHK,VOLSER       UPDATE SEQUENCE CHECK       DM AUG80\n         BL    NEXTBL         OK - IN SEQUENCE                 DM AUG80\n         MVC   SEQSER,VOLSER  OUT OF SEQUENCE                  DM AUG80\n         LA    R1,SEQWTO      SEND ERROR MESSAGE               DM AUG80\n         WTO   MF=(E,(1))                                      DM AUG80\n         OI    BITS1,OUTSEQ   INDICATE SEQUENCE ERROR          DM AUG80\nNEXTBL   LA    R3,VATLNG(,R3) SET PTR TO NEXT TABLE ENTRY      DM JUL80\n         B     INPUT          GO LOAD ANOTHER CARD IN TABLE\nEND      DS    0H\n         MODESET KEY=ZERO                                      DM AUG80\n         SPACE 3                                               DM AUG80\n********************************************************************\n*   BEGIN UCB SEARCH IN VATLST TABLE                               *\n         SR    R3,R3          ZERO VATTBLE REGISTER\n         XC    UCBWORK,UCBWORK    ZERO WORK AREA               DM JAN84\n         LA    R0,UCBWORK         INITIALIZE PARAMETER LIST    DM JAN84\n         ST    R0,UCBPARM                                      DM JAN84\n         LA    R0,=AL1(UCB3DACC)  DASD DEVICE TYPE             DM JAN84\n         ST    R0,UCBPARM+4                                    DM JAN84\n         LA    R0,UCBADDR         RETURN ADDRESS               DM JAN84\n         ST    R0,UCBPARM+8                                    DM JAN84\n         OI    UCBPARM+8,X'80'    SET END OF LIST              DM JAN84\n         L     R4,CVTPTR\n         USING CVTMAP,R4\n         L     R4,CVTUCBSC    ADDR OF UCB SCAN ROUTINE         DM JAN84\n         DROP  R4\nA0100    DS    0H\n         SPACE ,                                               DM AUG80\n         LR    R15,R4             CVTUCBSC                     DM JAN84\n         LA    R1,UCBPARM                                      DM JAN84\n         BALR  R14,R15            SCAN                         DM JAN84\n         LTR   R15,R15                                         DM JAN84\n         BNZ   ENDSRCH            LAST UCB                     DM JAN84\n         SPACE ,                                               DM JAN84\n         L     R10,UCBADDR                                     DM JAN84\n         USING UCBOB,R10\n         CLI   UCBVOLI,X'0'         IS THE VOL ID ZERO?\n         BE    A0400\n         L     R3,VATTBLE     SET POINTER BACK TO VATTBLE TOP  DM JUL80\n         USING VATLST,R3\n         LH    R0,VATCNT      SEARCH FOR VOLUME                DM AUG80\n         TM    BITS1,OUTSEQ                                    DM AUG80\n         BZ    B0100          IN SEQUENCE - BINARY SEARCH      DM AUG80\n         SPACE ,                                               DM AUG80\nA0300    CLC   VOLSER,UCBVOLI       IS UCB IN VATLST?          DM AUG80\n         BE    A0900                YES, GO HAVE 'USE' ATTRIB ALTER'D\n         LA    R3,VATLNG(R3)  SET POINTER TO NEXT VATLST ENTRY DM JUL80\n         BCT   R0,A0300       GO TRY NEXT VATLST ENTRY         DM AUG80\n         B     A1700          NOT FOUND                        DM AUG80\n         SPACE 2                                               DM AUG80\nA0400    DS    0H\n         B     A0100          CONTINUE UCB SEARCH\n         SPACE 3\n* BINARY SEARCH VATLST TABLE                                   DM AUG80\nB0100    SH    R3,=Y(VATLNG)  BACK UP TO ENTRY(0)              DM AUG80\n         SPACE ,                                               DM AUG80\nB0200    LR    R15,R3         SAVE THIS AS LAST LOW            DM AUG80\nB0300    LR    R3,R15         RESET FROM PRIOR LOW             DM AUG80\n         LR    R14,R0         DEVELOP ADDRESS INCREMENT        DM AUG80\n         LA    R14,1(,R14)         FROM COUNT                  DM AUG80\n         SRA   R14,1          HALVE (ROUNDED)                  DM AUG80\n         BZ    A1700          NOT FOUND                        DM AUG80\n         SR    R0,R14         REMAINING COUNT                  DM AUG80\n         MH    R14,=Y(VATLNG)     * ENTRY LENGTH               DM AUG80\n         AR    R3,R14         NEXT ADDRESS                     DM AUG80\n         CLC   VOLSER,UCBVOLI      SEE IF THIS IS VOLUME       DM AUG80\n         BL    B0200          NO - TOO LOW                     DM AUG80\n         BH    B0300          NO - TOO HIGH                    DM AUG80\n         B     A0900          FOUND                            DM AUG80\n         SPACE 2\n**********************************************************************\n*   CHECK VATLST FOR THE 'USE' ATTRIBUTE OF VOLUME                   *\nA0900    DS    0H\n         NI    UCBSTAB,255-(UCBBPRV+UCBBSTR+UCBBPUB)   ZERO OUT UCB\n         CLI   USE,USESTOR    SHOULD IT BE A STORAGE VOL?      DM JUL80\n         BE    A1000          GO ALTER ITS UCB\n         CLI   USE,USEPUB     SHOULD IT BE A PUBLIC VOL?       DM JUL80\n         BE    A1100          GO ALTER ITS UCB\n         CLI   USE,USEPRIV    SHOULD IT BE A PRIVATE VOL?      DM JUL80\n         BE    A1200          GO ALTER ITS UCB\n         B     A0100          GO GET ANOTHER UCB\n         SPACE 2\n**********************************************************************\n*   ALTER THE UCB TO THE CORRECT 'USE' ATTRIBUTE                     *\nA1000    DS    0H\n         OI    UCBSTAB,UCBBSTR  ALTER ITS UCB TO EQUAL STORAGE VOL\n         B     A1300            GO CHECK SHARE STATUS\n         SPACE 1\nA1100    DS    0H\n         OI    UCBSTAB,UCBBPUB  ALTER ITS UCB TO EQUAL  PUBLIC VOL\n         B     A1300            GO CHECK SHARE STATUS\n         SPACE 1\nA1200    DS    0H\n         OI    UCBSTAB,UCBBPRV  ALTER ITS UCB TO EQUAL  PRIVATE VOL\n         SPACE 3\n***********************************************************************\n*   ALTER THE UCB IF 'SHARE' OR 'UNSHR' ATTRIBUTE IS REQUIRED         *\nA1300    DS    0H\n         CLC   SHRFLAG,=C'UNSHR'  IS THIS VOL UNSHARABLE\n         BNE   A1400              CONTINUE SHARE CHECK\n         NI    UCBTBYT2,255-UCBRR  ALTER UCB TO UNSHARED STATUSDM JAN84\nA1400    DS    0H\n         CLC   SHRFLAG,=C'SHARE'  IS THIS VOL SHARABLE\n         BNE   A1500              CONTINUE UCB SCAN\n         OI    UCBTBYT2,UCBRR     ALTER UCB TO SHARE STATUS\n         SPACE 3\n******************************************************************\n*    CHECK AND ALTER 'MOUNT' UCB ATTRIBUTE AS REQUIRED            *\nA1500    DS    0H\n         CLI   MOUNT,MNTRSDNT SHOULD IT BE A PERMANENT RESIDENT VOL? DM\n         BNE   A1600          NO. CONTINUE CHECKING\n         NI    UCBSTAT,255-UCBRESV      REMOVE RESERVE STATUS  DM JAN84\n         OI    UCBSTAT,UCBPRES  ALTER THE UCB TO PERM. RESIDENT\n         B     A1800          CONTINUE UCB SCAN\n         SPACE 1\nA1600    DS    0H\n         CLI   MOUNT,MNTRSERV SHOULD IT BE A RESERVED VOL?     DM JUL80\n         BNE   A1700          NO.NO ATTRIBUTES FOUND IN VATLST\n         NI    UCBSTAT,255-UCBPRES      REMOVE PERM. RESIDENT  DM JAN84\n         OI    UCBSTAT,UCBRESV  ALTER THE UCB TO RESERVE\n         B     A1800          CONTINUE THE UCB SCAN\n         EJECT\n********************************************************************\n*   ASSIGNING A DEFAULT VALUE TO A UCB NOT FOUND IN VATLST         *\nA1700    DS    0H                                              ARA 1/80\n         TM    UCBTBYT2,UCBRVDEV       IS IT A VIRT UCB?       ARA 1/80\n         BO    A0400                   YES/ GO GET ANOTHER UCB ARA 1/80\n         MVC   DFLTVOL,UCBVOLI     MOVE VOLID INTO WTO MSG     DM AUG80\n         LA    R1,DFLTWTO          SET 'DEFAULT' MSG ADDR      DM AUG80\n*        WTO   MF=(E,(1))                                      DM SEP81\n         SPACE 3\n         NI    UCBSTAB,255-(UCBBPRV+UCBBSTR+UCBBPUB)  CLEAR UCBDM NOV81\n         OI    UCBSTAB,UCBBPRV         ALTER TO PRIVATE        ARA 1/80\n         NI    UCBSTAT,255-UCBPRES     REMOVE PERM. RESIDENT   DM JAN84\n         OI    UCBSTAT,UCBRESV         ALTER TO RESERVED       ARA 1/80\n         SPACE 4\nA1800    DS    0H\n         B     A0400                   GO GET ANOTHER UCB      ARA 1/80\n         SPACE 4                                               DM JUL80\n************************************************************** DM JUL80\n* GETMAIN AN AREA FOR THE VATLST ENTRIES -                   * DM JUL80\n* MOVE THE CURRENT LIST TO IT (ZEROS IF FIRST TIME)          * DM JUL80\nGETVAT   STM   R14,R5,12(R13)                                  DM JUL80\n         L     R2,VATTBLE                                      DM JUL80\n         L     R3,VATGMLNG                                     DM JUL80\n         LH    R0,=H'4096'    INCREMENT OVER PREVIOUS          DM JUL80\n         AR    R0,R3          ADD PREVIOUS LENGTH (0 IF FIRST) DM JUL80\n         GETMAIN R,LV=(0)                                      DM JUL80\n         STM   R0,R1,VATGMLNG SAVE                             DM JUL80\n         AR    R0,R1          BYTE PAST END                    DM JUL80\n         SH    R0,=Y(VATLNG)  LAST AVAILABLE SLOT              DM JUL80\n         ST    R0,VATLAST                                      DM JUL80\n         LR    R4,R2          SAVE OLD GETMAIN DATA            DM JUL80\n         LR    R5,R3               ACROSS MVCL                 DM JUL80\n         LR    R0,R1          MOVE PRIOR DATA                  DM JUL80\n         L     R1,VATGMLNG         TO NEW AREA                 DM JUL80\n         MVCL  R0,R2                    (0 IF FIRST TIME)      DM JUL80\n         L     R3,VATTBLE                                      DM JUL80\n         LTR   R0,R5          PRIOR LENGTH                     DM JUL80\n         BZ    GETVAT1        ZERO - FIRST TIME                DM JUL80\n         FREEMAIN R,LV=(0),A=(R4)  FREE OLD                    DM JUL80\n         A     R3,32(,R13)    CALCULATE WHERE CURRENT          DM JUL80\n         SR    R3,R4               ENTRY HAS MOVED TO          DM JUL80\n         SPACE ,                                               DM JUL80\nGETVAT1  ST    R3,32(,R13)    SET NEW CURRENT (AFTER LM)       DM JUL80\n         LM    R14,R5,12(R13)                                  DM JUL80\n         BR    R14            RETURN                           DM JUL80\n         EJECT\nENDSRCH  DS    0H\n         MODESET KEY=NZERO                                     DM AUG80\n         LA    R5,ENDVAT      SET NORMAL 'END' MSG ADDR\n         CLOSE VATIN,MF=(E,OCLIST)                             DM JUL80\n         WTO   MF=(E,(R5))\n         LM    R0,R1,VATGMLNG FREE THE TABLE AREA              DM JUL80\n         FREEMAIN R,LV=(0),A=(1)                               DM JUL80\n         FREEPOOL             VATIN                            DM JUL80\n         LR    R1,R13\n         L     R13,4(,R13)\n         DROP  R13                                             DM JUL80\n         FREEMAIN R,LV=SAVSIZ,A=(1)\n         RETURN (14,12),T,RC=(15)\n         EJECT\nENDVAT   WTO   'END UCB ALTERATIONS',MF=L,ROUTCDE=(2,11)\n         SPACE 2\n         LTORG\n         EJECT\n         CSECT ,              WORK AREA DEFINITION AND         DM JUL80*\n                              INITIALIZATION AREA - R13 POINTS DM JUL80*\n                              TO A GETMAIN AREA                DM JUL80\nSAVEAREA DC    18A(0)\n         SPACE 2\n         DC    0D'0'                                           DM JAN84\nUCBWORK  DC    XL100'0'           IOSVSUCB WORK AREA           DM JAN84\n         SPACE ,                                               DM JAN84\nUCBPARM  DC    3A(0)    (UCBWORK,=X'20',UCBADDR+X'80000000')   DM JAN84\nUCBADDR  DC    A(0)                                            DM JAN84\n         SPACE 2                                               DM AUG80\nVATCNT   DC    H'0'           COUNT OF VATLST ENTRIES          DM AUG80\n         SPACE ,                                               DM AUG80\nDFLTWTO  DC    Y(DFLTWTOL),X'8000'                             DM AUG80\n         DC    C'A DEFAULT VALUE WAS ASSIGNED FOR '            DM AUG80\nDFLTVOL  DC    CL6' '                                          DM AUG80\nDFLTWTOL EQU   *-DFLTWTO                                       DM AUG80\n         DC    X'00004020'    ROUTCDE=(2,11)                   DM AUG80\n         SPACE ,                                               DM AUG80\nBITS1    DC    X'0'                                            DM AUG80\nOUTSEQ   EQU   128            VATLST IS OUT OF SEQUENCE        DM AUG80\n         SPACE ,                                               DM AUG80\nSEQWTO   DC    Y(SEQWTOL),X'8000'                              DM AUG80\n         DC    C'VATLST OUT OF SEQUENCE AT '                   DM AUG80\nSEQSER   DC    CL6' '                                          DM AUG80\nSEQWTOL  EQU   *-SEQWTO                                        DM AUG80\n         DC    X'40004020'    DESC=2,ROUTCDE=(2,11)            DM AUG80\n         SPACE ,                                               DM AUG80\nSEQCHK   DC    XL6'0'         SEQUENCE CHECK FOR VATLST        DM AUG80\n         SPACE 3\nVATIN    DCB   DDNAME=VATIN,DSORG=PS,MACRF=GL,RECFM=FB,EODAD=END\n         SPACE 3\nOCLIST   OPEN  0,MF=L\nVATGMLNG DC    A(0)           LENGTH OF VATLST GETMAIN         DM JUL80\nVATTBLE  DC    A(0)           ADDRESS OF VATLST GETMAIN        DM JUL80\nVATLAST  DC    A(0)           LAST SLOT IN VATLST GETMAIN      DM JUL80\nSAVSIZ   EQU   *-SAVEAREA\n         SPACE 2\nVATLST   DSECT\nVOLSER   DS    CL6            VOLUME SERIAL\n         DS    CL1\nMOUNT    DS    CL1            MOUNT ATTRIBUTE\nMNTRSDNT EQU   C'0'                RESIDENT                    DM JUL80\nMNTRSERV EQU   C'1'                RESERVED                    DM JUL80\n         DS    CL1\nUSE      DS    CL1            USE ATTRIBUTE\nUSESTOR  EQU   C'0'                STORAGE                     DM JUL80\nUSEPUB   EQU   C'1'                PUBLIC                      DM JUL80\nUSEPRIV  EQU   C'2'                PRIVATE                     DM JUL80\n         DS    CL1\nDEVT     DS    CL8            DEVICE TYPE\n         DS    CL1\nN        DS    CL1            MOUNT MESSAGE\n         DS    CL1\nSHRFLAG  DS    CL5            SHARE ATTRIBUTE\n* THIS IS A USER-DEFINED FIELD                                 DM JUL80\n*        OUR VALUES ARE 'UNSHR' TO TURN OFF THE SHARED         DM JUL80\n*            ATTRIBUTE IN THE UCB DEVTYPE AND 'SHARE'          DM JUL80\n*            TO TURN IT ON                                     DM JUL80\nVATLNG   EQU   *-VATLST       PORTION THAT WE WILL STORE       DM JUL80\n         DS    CL53\n         SPACE 2\nEXSA     DSECT\n         IEFUCBOB LIST=NO\n         CVT DSECT=YES\n         END\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1,RENT'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=SYSDA\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//         DD  *\n  NAME VATUCB(R)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ILRBIRD": {"ttr": 14598, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06?\\x01\\x02\\x06? B\\x00u\\x00u\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-04T00:00:00", "modifydate": "2002-03-04T20:42:00", "lines": 117, "newlines": 117, "modlines": 0, "user": "SYZYGY1"}, "text": "ILRBIRD  CSECT\n         STM   R14,R12,12(R13)\n         BALR  R12,0\n         USING *,R12\n         ST    R13,SAVE+4\n         LA    R2,SAVE\n         ST    R2,8(R13)\n         LR    R13,R2\n         LA    R0,30\n         LA    R2,LINE01\n         XR    R3,R3\nMOVEIT   LA    R4,DATAAREA         GET DATA AREA ADDR\n         LA    R5,LENGTHDT         AND LENGTH\n         XR    R6,R6               SET FROM ADDR TO ZERO\n         XR    R7,R7               WITH ZERO LENGTH\n         LA    R8,22               VALUE FOR COMPARE\n         ICM   R7,8,FORTY          FILL CHARACTER IS BLANK\n         MVCL  R4,R6               CLEAR THE BUFFER\n         LA    R3,1(,R3)           BUMP THE COUNTER\n         LA    R4,DATAAREA         POINT TO DATA AREA\n         LA    R5,30               SET INCREMENT IN REG 5\n         LR    R6,R3               COUNTER IN REG 6\n         LR    R7,R2               POINT TO LINE01\n         LA    R8,80               SET INCREMENT IN REG 8\n         LA    R11,24              MAX LINES ON SCREEN\n         SR    R11,R3              SUBTRACT COUNT\n         MR    R10,R8\n         AR    R4,R11\nMOVEBIRD MVC   0(30,R4),0(R7)      MOVE A LINE\n         AR    R7,R5               BUMP BY 30\n         AR    R4,R8               BUMP BY 80\n         BCT   R6,MOVEBIRD         BRANCH IF MORE\n         CH    R3,=H'22'           ARE WE DONE\n         BH    FINI                BR IF YES\nTPUT     LA    5,PUTBUF            POINT TO STUFF TO BE WRITTEN\n         LA    6,LENGTHBF          LOAD LENGTH OF BUFFER\n         NI    0(5),X'BF'          TURN OFF FULLSCR BIT IN WCC\n*                                  (ALA JIM LUCAS--TELLS TCAM4 FULLSCR)\n         ICM   5,8,TPUTFLG         TPUT FLAG-WAIT,HOLD,NOBREAK,FULLSCR\n         TPUT  (5),(6),R\n         STIMER WAIT,BINTVL=X05\n         B     MOVEIT\nFINI     MVI   DATAAREA,X'C8'\n         LA    R9,10\nTPUTHIGH LA    5,PUTBUF            POINT TO STUFF TO BE WRITTEN\n         LA    6,LENGTHBF          LOAD LENGTH OF BUFFER\n         NI    0(5),X'BF'          TURN OFF FULLSCR BIT IN WCC\n*                                  (ALA JIM LUCAS--TELLS TCAM4 FULLSCR)\n         ICM   5,8,TPUTFLG         TPUT FLAG-WAIT,HOLD,NOBREAK,FULLSCR\n         TPUT  (5),(6),R\n         STIMER WAIT,BINTVL=X05\n         LA    5,BUFBLANK          POINT TO STUFF TO BE WRITTEN\n         LA    6,8                 LOAD LENGTH OF BUFFER\n         NI    0(5),X'BF'          TURN OFF FULLSCR BIT IN WCC\n*                                  (ALA JIM LUCAS--TELLS TCAM4 FULLSCR)\n         ICM   5,8,TPUTFLG         TPUT FLAG-WAIT,HOLD,NOBREAK,FULLSCR\n         TPUT  (5),(6),R\n         BCT   R9,TPUTHIGH\n         L     R13,SAVE+4\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\nSAVE     DC    18F'0'\nLINE01   DC    C'                ##            '\nLINE02   DC    C'               ####           '\nLINE03   DC    C'               ####           '\nLINE04   DC    C'               ####           '\nLINE05   DC    C'               ####           '\nLINE06   DC    C'               ####           '\nLINE07   DC    C'           ### ####           '\nLINE08   DC    C'          #### #### ###       '\nLINE09   DC    C'      ### #### #### ####      '\nLINE10   DC    C'     #### #### #### ####      '\nLINE11   DC    C'     #### #### #### ####   ###'\nLINE12   DC    C'     ###################  ####'\nLINE13   DC    C'     ################### #### '\nLINE14   DC    C'      ######################  '\nLINE15   DC    C'       ####################   '\nLINE16   DC    C'        ##################    '\nLINE17   DC    C'         ################     '\nLINE18   DC    C'          ##############      '\nLINE19   DC    C'           ############       '\nLINE20   DC    C'            ###########       '\nLINE21   DC    C'            ###########       '\nLINE22   DC    C'            ###########       '\nLINE23   DC    C'                              '\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nX05      DC    F'5'\nFORTY    DC    X'40'\nTGETFLG  DC    X'81'         WAIT,ASIS\nTPUTFLG  DC    X'0B'         WAIT HOLD,NOBREAK,ASIS\nPUTBUF   DC    X'C71140403C4040001140401D'\nDATAAREA DC    24CL80' '\nLENGTHDT EQU   *-DATAAREA\nLENGTHBF EQU   *-PUTBUF\nENDBUF   EQU   DATAAREA+1840\n*GETBUF   DC    CL3' '   HOLD 7D4040\n*         DC    24CL80' '\n*LENGTHB2 EQU   *-GETBUF\n*ENDMSG   DC    CL80'******* END OF LISTING *******             '\nBUFBLANK DC    X'C71140403C404000'\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ILRBIRD$": {"ttr": 14601, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06?\\x01\\x02\\x06? B\\x00\"\\x00\"\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-04T00:00:00", "modifydate": "2002-03-04T20:42:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "SYZYGY1"}, "text": "//ZILRBIRD JOB (IS,OTS,M00,000,64),'SYSTEMS***BRIAN',\n//      CLASS=A,MSGCLASS=A,NOTIFY=SYZYGY1 TYPRUN=SCAN\n//ASMFCL PROC  CLASS=A,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='SYZYGY.PDS.DATA',\n//             LOAD='SYZYGY.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             DIR=1,              NUMBER OF DIRECTORY BLOCKS\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='OBJECT,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD.(&MEM),DISP=SHR,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.,&DIR.))\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=ILRBIRD\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INSTREA$": {"ttr": 14603, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06?\\x01\\x02\\x06? D\\x00!\\x00!\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-04T00:00:00", "modifydate": "2002-03-04T20:44:00", "lines": 33, "newlines": 33, "modlines": 0, "user": "SYZYGY1"}, "text": "//ZINSTR   JOB (IS,OTS,M00,000,64),'SYSTEMS***BRIAN',\n//      CLASS=A,MSGCLASS=A,NOTIFY=SYZYGY  TYPRUN=SCAN\n//ASMFCL PROC  CLASS=A,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='SYZYGY.PDS.DATA',\n//             LOAD='SYZYGY.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             DIR=1,              NUMBER OF DIRECTORY BLOCKS\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='LOAD,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR DCB=BLKSIZE=20000\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=SYS1.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD.(&MEM),DISP=SHR,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.,&DIR.))\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=INSTREAM\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INSTREAM": {"ttr": 14605, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06?\\x01\\x02\\x06? D\\x03%\\x03%\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-04T00:00:00", "modifydate": "2002-03-04T20:44:00", "lines": 805, "newlines": 805, "modlines": 0, "user": "SYZYGY1"}, "text": "         TITLE '   I N S T R E A M '\n************************************************************\n*                                                          *\n*        'INSTREAM'                                        *\n*                                                          *\n************************************************************\n         SPACE\n*        WRITTEN BY. BRIAN WESTERMAN\n*        ADDRESS.    9528 MIRAMAR ROAD SUITE 157.\n*                    SAN DIEGO, CA     92126\n*        DATE WRITTEN. JULY 22 1976.\n*        DATE UPDATED. JUNE 17 1980.\n*        ATTRIBUTES. RE-ENTRANT.\n*        COMMENTS.\n*            THIS TSO COMMAND COPIES THE INPUT STREAM FOLLOWING IT\n*            INTO A DATASET. THE USER IS PLACED IN AN 'INSTREAM'\n*            MODE DURING WHICH EVERYTHING ENTERED IS COPIED TO A\n*            DATASET, UNTIL 'END' (OR A SPECIFIED SUBSTITUTE) IS\n*            ENCOUNTERED.\n*\n*            NOTE: ALLOCATION UNITNAME 'SYSDA' IS HARD-CODED\n*            IN THIS COMMAND FOR THE TEMPORARY DATA SET.  THIS MAY\n*            BE CHANGED TO A VIO UNITNAME AT ANOTHER INSTALLATION.\n*\n*            SYNTAX -\n*                 INSTREAM FILENAME('DDNAME')\n*                          MODE('MODE') END('END')  INSERT  CONTIN\n*\n*            DEFAULTS -\n*                    NOINSERT\n*                    MODE  -  'INSTREAM'\n*                    END   -  'END'\n*\n*            THIS TSO COMMAND MAKES IT EASY TO PUT CONTROL CARDS\n*            INTO CLISTS. FOR EXAMPLE, A CLIST THAT USES THE\n*            IEBPTPCH UTILITY MIGHT LOOK LIKE THIS:\n*\n*                 PROC 1 DSNAME PREFORM(A)\n*                 FREE FI(SYSIN SYSUT1 SYSUT2)\n*                 ALLOC FI(SYSUT1) DA(&DSNAME) SHR\n*                 ALLOC FI(SYSUT2) SYSOUT(A)\n*                 INSTREAM\n*                 LABEL PRINT PREFORM=&PREFORM\n*                 END\n*                 CALL 'SYS1.LINKLIB(IEBPTPCH)'\n*\n*            NOTICE THAT THE CONTENTS OF THE CONTROL STATEMENT\n*            CAN BE SET BY VARIABLES, SUCH AS &PREFORM IN THE\n*            EXAMPLE ABOVE.\n*\n*            SINCE CLIST STATEMENTS ARE LEFT JUSTIFIED AT THE\n*            TIME THEY ARE EXECUTED, GETTING LEADING BLANKS\n*            INTO A STATEMENT CAN BE A PROBLEM, BUT NOT IF YOU\n*            USE THE 'INSERT' KEYWORD.  THIS KEYWORD TELLS THE\n*            COMMAND THAT IF ANY INPUT STATEMENT BEGINS WITH\n*            THE CHARACTERS 'I' OR 'IN' OR 'INSERT' FOLLOWED\n*            BY A BLANK, THEN THE CHARACTERS AND THE BLANK WILL\n*            BE IGNORED AND THE REMAINDER OF THE STATEMENT WILL\n*            BE TREATED AS THE DATA.  THIS GIVES YOU THE FREEDOM\n*            TO INDENT YOUR CLIST STATEMENTS.\n*\n*            THE 'CONTIN' KEYWORD CAUSES THE FIRST BYTE OF DATA\n*            TO BE PUT IN COLUMN 72, AND THE REST IN COLUMNS 1-71.\n*            THIS LETS YOU CODE CONTINUATION CARDS WITHOUT HAVING\n*            TO COUNT COLUMNS.\n*\n*            LOG OF CHANGES.\n*            25AUG83 - DAIRFAIL ROUTINE ADDED.\n*            10SEP83 - DA08PSWD SET TO BLANKS. BINARY ZEROES CAUSE\n*                      PASSWORD DATASET SEARCH DURING DAIR.\n*            10SEP83 - 'SPACE' KEYWORD ADDED.\n*                      IN CLISTS UNDER VS2, LEADING BLANKS ARE\n*                      REMOVED (UNLESS IN A 'DATA-ENDDATA' AREA)\n*                      SO THIS KEYWORD WILL DEFINE A CHARACTER\n*                      THAT WILL BE CHANGED TO LEADING BLANKS.\n*            11SEP83 - 'CONTIN', 'BLKSIZE', AND 'ASIS' KEYWORDS.\n*            20SEP73 - GBLB ADDED FOR NON MVS SITES.\n*                    - 'REUSE' KEYWORD ADDED.\n*            24NOV83 - TEST FOR ASIS FIXED. DONT CONVERT 1ST 4 BYTES.\n*            24NOV83 - VIO CHANGED TO SYSDA.\n*            17DEC83 - SPACE KW REPLACED WITH INSERT KW\n         SPACE\n         GBLB  &MVS\n&MVS     SETB  1                   1 - MVS   0 - SVS,MVT\n         SPACE\nINSTREAM START\n         USING *,R12\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'INSTREAM'\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n@PROLOG  STM   14,12,12(13)\n         LR    R12,R15\n         LR    R2,R1\n         USING CPPL,R2\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         ST    13,4(,1)\n         ST    1,8(,13)\n         LR    13,1\n         USING @DATA,13\n         SPACE\n         SLR   R15,R15\n         ST    R15,MYECB\n         ST    R15,OPTIONS\n         ST    R15,LINKAREA+4\n         STH   R15,CC\n         MVI   SPACES,C' '\n         MVC   SPACES+1(L'SPACES-1),SPACES\n         LA    R0,400              DEFAULT BLOCK SIZE\n         STH   R0,BLOKSIZE\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP IOPL FOR SERVICE ROUTINES                  *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYIOPL          IOPL FOR 'PUTLINE' AND 'PUTGET'\n         USING IOPL,R15\n*        MVC   IOPLUPT(4),CPPLUPT\n         L     R14,CPPLUPT\n         MVC   MYUPT(24),0(R14) FAKE UPT\n         LA    R14,MYUPT\n         USING UPT,R14\n         OI    UPTSWS,UPTMODE    SET FAKE PROFILE MODE\n         DROP  R14\n         ST    R14,IOPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYATTN\n         ST    R0,IOPLECB\n         LA    R0,MYPGPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         EJECT\n************************************************************\n*                                                          *\n*        CALL THE PARSE SERVICE ROUTINE                    *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n         L     R0,=A(INSPCL)\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         LA    R0,MYUWA\n         ST    R0,PPLUWA\n         DROP  R15\n         SPACE 1\n************************************************************\n*                                                          *\n*        CALL THE PARSE SERVICE ROUTINE                    *\n*                                                          *\n************************************************************\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         AIF   (NOT &MVS).SKIP1\n         L     R15,16              CVTPTR\n         TM    X'020C'(R15),X'80'  IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,X'020C'(,R15)   CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK EQU   *\n.SKIP1   ANOP\n         LINK  EP=IKJPARS,SF=(E,LINKAREA)\nPARSEEXT EQU   *\n         SPACE 1\n         LTR   R15,R15\n         BNZ   PARSERR\n         SPACE\n         L     R9,MYANS\n         USING IKJPARMD,R9\n         SPACE\n         CLI   CONTKW+1,0          'CONTINUE' SPECIFIED?\n         BE    *+8\n         OI    OPTIONS,X'80'       YES - SET OPTION BIT\n         SPACE\n         CLI   ASISKW+1,0          'ASIS' SPECIFIED?\n         BE    *+8                 NO, BRANCH\n         OI    OPTIONS,X'40'       YES - SET ASIS BIT\n         SPACE\n         TM    BLOC+6,X'80'        'BLKSIZE' SPECIFIED?\n         BZ    NOBLOC              NO - BRANCH\n         LH    R14,BLOC+4          GET LENGTH\n         LTR   R14,R14\n         BZ    NOBLOC\n         L     R1,BLOC\n         BCTR  R14,0\n         B     *+10\n         PACK  DOUBLE(8),0(0,R1)\n         EX    R14,*-6\n         CVB   R1,DOUBLE\n         SLR   R0,R0               CLEAR FOR DIVIDE\n         LTR   R1,R1               'BLKSIZE(0)' SPECIFIED?\n         BZ    NOBLOC              YES - IGNORE IT\n         LR    R15,R1              HOLD IN R15\n         LA    R14,80\n         DR    R0,R14              DIVIDE BY 80\n         LTR   R0,R0               ANY REMAINDER?\n         BNZ   NOBLOC              YES - IGNORE\n         STH   R15,BLOKSIZE\nNOBLOC   EQU   *\n         MVI   INSERTSW,0\n         CLI   INSERTKW+1,1        INSERT\n         BNE   NOIN                NO - BRANCH\n         MVI   INSERTSW,C'I'       SET INSERTSW\nNOIN     EQU   *\n         SPACE\n         MVC   ENDSTMT+1(8),=CL8'END'\n         MVI   ENDSTMT,3-1\n         TM    END+6,X'80'      END OVERRIDE?\n         BZ    NOEND            NO - BRANCH\n         L     R1,END           R1 --> END STMT\n         LH    R14,END+4        R14 =  LENGTH\n         BCTR  R14,0\n         MVC   ENDSTMT+1(8),BLANKS\n         B     *+10\n         MVC   ENDSTMT+1(0),0(R1) MOVE VALUE IN\n         EX    R14,*-6\n         STC   R14,ENDSTMT\nNOEND    EQU   *\n         SPACE\n         MVC   MYFILEN(8),=CL8'SYSIN'\n         CLI   FILEKW+1,1          FILENAME SPECIFIED?\n         BNE   NOFILE\n         TM    FILES+6,X'80'       FILENAME VALUE SPEC?\n         BZ    NOFILE\n         L     R14,FILES\n         MVC   MYFILEN(8),BLANKS\n         LH    R1,FILES+4          GET LENGTH\n         BCTR  R1,0\n         B     *+10\n         MVC   MYFILEN(0),0(R14)\n         EX    R1,*-6\nNOFILE   EQU   *\n         MVC   DSNAME(9),=CL9'&&INSTREAM'\n         LA    R14,9\n         STH   R14,DSNAMEL\n         EJECT\n************************************************************\n*                                                          *\n*        ALLOCATE THE OUTPUT DATASET                       *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R1,MYDAPL\n         USING DAPL,R1\n         MVC   DAPLUPT(4),CPPLUPT\n         MVC   DAPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,DAPLECB\n         MVC   DAPLPSCB(4),CPPLPSCB\n         LA    R15,MYDAPB\n         ST    R15,DAPLDAPB\n         SPACE\n         CLI   REUSKW+1,1          'REUSE' KW SPECIFIED?\n         BNE   NOFREE              NO, BRANCH\n         USING DAPB18,R15\n         XC    0(40,R15),0(R15)\n         MVI   DA18CD+1,X'18'\n         MVC   DA18DDN,MYFILEN\n         MVC   DA18MNM(10),BLANKS\n         OI    DA18CTL,X'10'       FREE EVEN IF PERM\n         DROP  R15                 DAPB18\n         BAL   R14,CALLDAIR        UNALLOCATE THE DDNAME\nNOFREE   EQU   *\n         SPACE\n         LA    R15,MYDAPB\n         USING DAPB08,R15\n         XC    0(84,R15),0(R15)\n         MVI   DA08CD+1,X'08'\n         LA    R0,DSNAMEL\n         ST    R0,DA08PDSN\n         MVC   DA08DDN(8),MYFILEN\n         MVC   DA08UNIT,@UNITVIO\n         MVC   DA08SER,BLANKS\n         LA    R0,1                1 TRACK\n         ST    R0,DA08PQTY\n         MVC   DA08MNM,BLANKS\n         MVC   DA08PSWD,BLANKS\n         MVI   DA08DSP1,DA08NEW\n         MVI   DA08DPS2,DA08DEL\n         MVI   DA08DPS3,DA08DELE\n         MVI   DA08CTL,DA08TRKS+DA08PERM\n         DROP  R15                 DAPB08\n         SPACE\n         BAL   R14,CALLDAIR\n         LTR   R15,R15\n         BNZ   DAIRERR\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP THE DCB                                    *\n*                                                          *\n************************************************************\n         SPACE\nOPENIT   MVC   DCB(DCBLEN),DCBMODEL\n         LA    R15,MYDAPB\n         USING DAPB08,R15\n         LA    R3,DCB\n         USING IHADCB,R3\n         MVC   DCBDDNAM(8),DA08DDN\n         MVC   DCBBLKSI,BLOKSIZE\n         MVC   OPEND(4),OPEN\n         DROP  R15\n        SPACE\n         OPEN  ((R3),OUTPUT),MF=(E,OPEND)\n        SPACE\n         TM    DCBOFLGS,X'10'\n         BZ    OPENERR\n         EJECT\n************************************************************\n*                                                          *\n*        SET UP MODE MESSAGE                               *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R14,1\n         ST    R14,MYMODEMG\n         LA    R14,MYMODEMT\n         ST    R14,MYMODEMG+4    O.L.D.\n         TM    RDY+6,X'80'   READY OVERRIDE?\n         BO    MODEMOD\n         MVC   MYMODEMT(16),READYMSG\n         B     MODEMGX\nMODEMOD  XC    MYMODEMT(16),MYMODEMT\n         MVI   MYMODEMT+4,X'40'\n         MVC   MYMODEMT+5(11),MYMODEMT+4\n         LH    R1,RDY+4\n         LA    R1,4+1(,R1)         ADD PREFIX AND 1 BLANK\n         STH   R1,MYMODEMT\n         SH    R1,=H'6'\n         L     R14,RDY\n         B     *+10\n         MVC   MYMODEMT+5(0),0(R14)\n         EX    R1,*-6\nMODEMGX  EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        ISSUE MODE MESSAGE AND WAIT FOR INPUT             *\n*                                                          *\n************************************************************\n         SPACE\nMODE     EQU   *\n         BAL   R14,PUTGET\n         SPACE\n*        PUTGET WILL EITHER PUT THE ADDRESS OF THE NEXT\n*        COMMAND INPUT BUFFER IN REG 1 OR, IF THE USER HIT\n*        ATTENTION, PUTGET WILL SET A RETURN CODE OF 8 IN\n*        REGISTER 15 AND THE ATTENTION EXIT WILL PLACE THE\n*        ADDRESS OF THE COMMAND INPUT BUFFER IN 'MYNEXBUF'.\n*        PUTGET WILL SET RC 8 ON ATTENTIONS ONLY IF THE\n*        ECB IN ITS IOPL IS THE SAME ONE POSTED BY THE\n*        ATTENTION EXIT.\n         SPACE\n         CH    R15,=H'8'           ATTENTION HIT?\n         BE    POSTMODE            YES - BRANCH\n         ST    R1,MYNEXBUF\n         SPACE\nPOSTMODE L     R1,MYNEXBUF\n         SPACE\n         LH    R0,0(R1)\n         SH    R0,=H'4'\n         LTR   R0,R0               IF BUFFER LENGTH 0, RETRY\n         BNP   MODEF\n         SPACE\n************************************************************\n*                                                          *\n*        IF NOT 'ASIS', TRANSLATE TO UPPER CASE            *\n*                                                          *\n************************************************************\n         SPACE\n         TM    OPTIONS,X'40'       WAS 'ASIS' SPECIFIED\n         BO    NOCAPS              YES, LEAVE ASIS\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         OC    4(0,R1),SPACES\n         EX    R14,*-6\nNOCAPS   EQU   *\n         EJECT\n************************************************************\n*                                                          *\n*        CHECK FOR 'END'                                   *\n*                                                          *\n************************************************************\n         SPACE\n         BCTR  R0,0\n         SLR   R14,R14\n         IC    R14,ENDSTMT\n         CR    R0,R14              LINE LONG ENOUGH TO CONTAIN 'END'?\n         BL    NOTEND              NO - NOT END\n         B     *+10\n         CLC   4(0,R1),ENDSTMT+1\n         EX    R14,*-6\n         BE    EXITC\nNOTEND   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        MOVE THE GETLINE BUFFER TO OUTPUT AREA            *\n*                                                          *\n************************************************************\n         SPACE\n         LR    R14,R0\n         CH    R14,=H'71'\n         BNH   *+8\n         LA    R14,71\n         MVI   CARD,C' '\n         MVC   CARD+1(79),CARD\n         B     *+10\n         MVC   CARD(0),4(R1)\n         EX    R14,*-6\n         SPACE\n************************************************************\n*                                                          *\n*        CHECK FOR INSERT AND REMOVE IT                    *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   INSERTSW,0          IS INSERT ACTIVE?\n         BE    INSERTX             NO - BRANCH\n         CLC   CARD(2),=C'I '      IS THIS AN INSERT\n         BNE   INSERT2             NO - BRANCH\n         MVC   CARD(78),CARD+2\n         MVC   CARD+78(2),SPACES\n         B     INSERTX\nINSERT2  CLC   CARD(3),=C'IN '     IS THIS AN INSERT\n         BNE   INSERT6\n         MVC   CARD(77),CARD+3\n         MVC   CARD+77(3),SPACES\n         B     INSERTX\nINSERT6  CLC   CARD(7),=C'INSERT ' IS THIS AN INSERT\n         BNE   INSERTX\n         MVC   CARD(73),CARD+7\n         MVC   CARD+73(7),SPACES\nINSERTX  EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        IF 'CONTIN' SPECIFIED, MOVE COL 1 TO COL 72       *\n*                                                          *\n************************************************************\n         SPACE\n         TM    OPTIONS,X'80'\n         BZ    NOCONT\n         IC    R14,CARD\n         MVC   CARD(71),CARD+1\n         STC   R14,CARD+71\nNOCONT   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        WRITE THE RECORD                                  *\n*                                                          *\n************************************************************\n         SPACE\n         PUT   (R3),CARD\n         SPACE\nMODEF    L     R1,MYNEXBUF  POINT TO INPUT BUFFER\n         LH    R0,0(,R1)\n         O     R0,=X'01000000' SUBPOOL 1\n         FREEMAIN R,LV=(0),A=(1)\n         SPACE\n         XC    MYNEXBUF,MYNEXBUF\n         B     MODE\n         EJECT\n************************************************************\n*                                                          *\n*        ERROR MESSAGES                                    *\n*                                                          *\n************************************************************\nPARSERR  LA    R1,PARSERRM\n         LA    R0,L'PARSERRM\n         BAL   R14,PUTLINE\n         B     EXITR\nDAIRERR  EQU   *\n*        CH    R15,=H'20'          DDNAME ALREADY IN USE?\n*        BE    DAIRRC20            YES - WE'LL HANDLE THIS ONE\n         BAL   R14,DAIRFAIL        ISSUE MESSAGE\n         LA    R15,12              RETURN CODE 12\n         STH   R15,CC\n         B     EXITR\nOPENERR  LA    R1,OPENERRM\n         LA    R0,L'OPENERRM\n         BAL   R14,PUTLINE\n         B     EXITC\nPARSERRM DC    C'PARSE ERROR'\nDAIRERRM DC    C'UNABLE TO ALLOCATE DATASET'\nOPENERRM DC    C'UNABLE TO OPEN DATASET'\nREADYMSG DC    AL2(4+1+8,0),CL12' INSTREAM'\n         DC    0H'0'\n         EJECT\n************************************************************\n*                                                          *\n*        PUTLINE                                           *\n*                                                          *\n************************************************************\n         SPACE\nPUTLINE  ST    R14,PUTLINS\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LA    R14,1               NO. OF LEVEL 1 SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO LEV 1 SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,0               LENGTH\n         LA    R14,5(,R14)         ADD 4 PLUS 1 BLANK\n         STH   R14,MYSEG1\n         MVI   MYSEG1+4,C' '\n         LR    R14,0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+5(0),0(R1) MOVE MESSAGE IN\n         EX    R14,*-6\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),MF=(E,MYIOPL)\n         SPACE\n         L     R14,PUTLINS\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*        PUTGET                                            *\n*                                                          *\n************************************************************\nPUTGET   ST    R14,PUTLINS\n         MVC   MYPGPB(16),MODLPGPB\n         SPACE\n         PUTGET PARM=MYPGPB,OUTPUT=(MYMODEMG,SINGLE,MODE),MF=(E,MYIOPL)\n         SPACE\n         L     R1,MYPGPB+12       R1 --> INPUT BUFFER\n         L     R14,PUTLINS\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*        CALL IKJDAIR SERVICE ROUTINE                      *\n*                                                          *\n************************************************************\n         SPACE\nCALLDAIR ST    R14,DAIRREGS\n         AIF   (NOT &MVS).SKIP2\n         L     R15,16\n         TM    X'2DC'(R15),X'80'   CVTDAIR\n         BNO   DAIRLINK\n         L     R15,X'2DC'(,R15)\n         BALR  R14,R15\n         B     DAIRFINI\nDAIRLINK EQU   *\n.SKIP2   ANOP\n         LINK  EP=IKJDAIR,SF=(E,LINKAREA)\nDAIRFINI L     R14,DAIRREGS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        DYNAMIC ALLOCATION FAILURE ROUTINE                *\n*                                                          *\n************************************************************\n         SPACE\nDAIRFAIL ST    R14,MYDFREGS\n         AIF   (NOT &MVS).SKIP3\n         LA    R1,MYDFPARM\n         USING DFDSECTD,R1\n         ST    R15,MYDFRC\n         LA    R15,MYDFRC\n         ST    R15,DFRCP\n         LA    R15,MYDAPL\n         ST    R15,DFDAPLP\n         SLR   R15,R15\n         ST    R15,MYJEFF02\n         LA    R15,MYJEFF02\n         ST    R15,DFJEFF02\n         LA    R15,DFDAIR\n         STH   R15,MYDFID\n         LA    R15,MYDFID\n         ST    R15,DFIDP\n         SLR   R15,R15\n         ST    R15,DFCPPLP\n         LINK  EP=IKJEFF18,SF=(E,LINKAREA)\n         L     R15,MYDFRC\n         DROP  R1\n.SKIP3   ANOP\n         AIF   (&MVS).SKIP4\n         LA    R1,MSGDAIR\n         LA    R0,L'MSGDAIR\n         SVC   93                 TPUT\n.SKIP4   ANOP\n         L     R14,MYDFREGS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        CLOSE THE DATASET                                 *\n*                                                          *\n************************************************************\n         SPACE\nEXITC    MVC   CLOSED,CLOSE\n         CLOSE ((R3)),MF=(E,CLOSED)\n         SPACE\n************************************************************\n*                                                          *\n*        FINAL EXIT FROM PROGRAM                           *\n*                                                          *\n************************************************************\n         SPACE\nEXITR    EQU   *\n         IKJRLSA MYANS\n         SPACE\nEXIT0    LH    R15,CC\nEXIT     LR    1,13\n         L     R0,@SIZE\n         L     13,4(,13)\n         ST    15,16(,13)\n         FREEMAIN R,LV=(0),A=(1)\n         LM    14,12,12(13)\n         BR    14\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n@UNITVIO DC    CL8'SYSDA'\nBLANKS   DC    CL10' '\n         LTORG\n         SPACE\n         PRINT NOGEN\n         SPACE\nDCBMODEL DCB   DDNAME=DYNAM,DSORG=PS,MACRF=(PM),                       X\n               RECFM=FB,LRECL=80,BLKSIZE=800\nDCBLEN   EQU   *-DCBMODEL\n         SPACE\n         PRINT GEN\n         SPACE\nOPEN     OPEN  0,MF=L\n         SPACE\nCLOSE    CLOSE 0,MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPGPB PUTGET OUTPUT=(1,SINGLE,MODE),                                X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X\n               TERMGET=(EDIT,WAIT),MF=L\n         SPACE\n         AIF   (&MVS).SKIP5\nMSGDAIR  DC    C'UNABLE TO ALLOCATE UTILITY DATA SET'\n.SKIP5   ANOP\n         PRINT NOGEN\n         SPACE\nINSPCL   IKJPARM\nPROMPT   IKJKEYWD\n         IKJNAME 'MODE',SUBFLD=RDYSUB\nENDKW    IKJKEYWD\n         IKJNAME 'END',SUBFLD=ENDSUB\nINSERTKW IKJKEYWD\n         IKJNAME 'INSERT'\nFILEKW   IKJKEYWD\n         IKJNAME 'FILENAME',SUBFLD=FILESF\nCONTKW   IKJKEYWD\n         IKJNAME 'CONTINUE'\nBLOCKW   IKJKEYWD\n         IKJNAME 'BLKSIZE',SUBFLD=BLOCSF,ALIAS=('B','BL','BLOCKSIZE')\nASISKW   IKJKEYWD\n         IKJNAME 'ASIS'\nREUSKW   IKJKEYWD\n         IKJNAME 'REUSE'\nRDYSUB   IKJSUBF\nRDY      IKJIDENT 'MODE STATEMENT',FIRST=ALPHANUM,OTHER=ALPHANUM,      X\n               MAXLNTH=8,PROMPT='MODE STATEMENT'\nENDSUB   IKJSUBF\nEND      IKJIDENT 'END STATEMENT',FIRST=ALPHA,OTHER=ALPHANUM,          X\n               MAXLNTH=8,PROMPT='END STATEMENT'\nFILESF   IKJSUBF\nFILES    IKJIDENT 'FILENAME ALLOCATED FOR USE BY INSTREAM COMMAND',    X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=8\nBLOCSF   IKJSUBF\nBLOC     IKJIDENT 'BLOCK SIZE',FIRST=NUMERIC,OTHER=NUMERIC,            X\n               MAXLNTH=5,PROMPT='BLOCK SIZE'\n         IKJENDP\n         SPACE\n         PRINT GEN\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE\n@DATA    DSECT\n         DS    18F\n*\n*        BEGIN AREA REFERENCED BY STAX ATTN EXIT\n*\nMYIOPL   DS    4F\nMYATTN   DS    A\nMYNEXBUF DS    A\nMYMODEMG DS    2A\n*\n*        END OF AREA REFERENCED BY STAX ATTN EXIT\n*\nDOUBLE   DS    D\nLINKAREA DS    2F\nOPTIONS  DS    F\nBLOKSIZE DS    H\nMYMODEMT DS    A,XL12\nMYDAPL   DS    5F\nMYDAPB   DS    21F\nMYECB    DS    F\nMYPPL    DS    7F\nMYANS    DS    F\nMYUWA    DS    F\nMYPTPB   DS    3F\nMYPGPB   DS    4F\nMYOLD    DS    2F\nMYSEG1   DS    2H,CL256\nDSNAMEL  DS    H\nDSNAME   DS    CL44\nMYFILEN  DS    CL8\nMYCPPL   DS    4F\nMYECBL   DS    2A\nMYUPT    DS    CL24\nMYDFPARM DS    5F  USED BY DAIRFAIL\nMYDFREGS DS    F   USED BY DAIRFAIL\nMYDFRC   DS    F   USED BY DAIRFAIL\nMYJEFF02 DS    F   USED BY DAIRFAIL\nMYDFID   DS    H   USED BY DAIRFAIL\nOPEND    DS    F\nCLOSED   DS    F\nPUTLINS  DS    F\nENDSTMT  DS    CL9\nINSERTSW DS    CL1\nCC       DS    H\nDCB      DS    0D,XL(DCBLEN)\nDAIRREGS DS    F\nCARD     DS    CL80\nSPACES   DS    CL80\n@DATAL   EQU   *-@DATA\n         SPACE\nIHADCB   DSECT\n         DS    36X\nDCBRECFM DS    X\nDCBEXLST DS    AL3\nDCBDDNAM DS    CL8\nDCBOFLGS DS    X\n         DS    XL7\nDCBSYNAD DS    A\n         DS    XL2\nDCBBLKSI DS    H\n         SPACE\nCVT      DSECT\nCVTPTR   EQU   16\nCVTMAP   EQU   *\n         ORG   CVT+X'1E0'\nCVTSCAN  DS    F\n         ORG   CVT+X'20C'\nCVTPARS  DS    F\n         ORG   CVT+X'2DC'\nCVTDAIR  DS    F\n         SPACE\n         IKJCPPL\n         SPACE\n         IKJPPL\n         SPACE\n         IKJUPT\n         SPACE\n         IKJIOPL\n         SPACE\n         IKJDAPL\n         SPACE\n         IKJDAP08\n         SPACE\n         IKJDAP18\n         SPACE\n         IKJPSCB\n         SPACE\n         AIF   (NOT &MVS).SKIP6\n         IKJEFFDF DFDSECT=YES\n.SKIP6   ANOP\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "KERMITT": {"ttr": 15107, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06?\\x01\\x02\\x06? I\\n\\xa4\\n\\xa4\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-04T00:00:00", "modifydate": "2002-03-04T20:49:00", "lines": 2724, "newlines": 2724, "modlines": 0, "user": "SYZYGY1"}, "text": "KERMIT   TITLE     'KERMIT-IBM'\n*----------------------------------------------------                   0000000\n*   CX-80 Protocol Converter Version @ PRC/GIS      *                   0000000\n*----------------------------------------------------                   0000000\n         MACRO\n         REGISTER\n         LCLA  &N\n         SPACE\n***********************************************************************\n*              GENERAL REGISTER EQUATES                               *\n***********************************************************************\n         SPACE\n&N       SETA  0\n.LOOP    ANOP\nR&N      EQU   &N\n         AIF   (&N EQ 15).OUT\n&N       SETA  &N+1\n         AGO   .LOOP\n.OUT     ANOP\n         SPACE\n         MEND\n         MACRO\n&LABEL   BINCVRT &REG,&AREA,&DBLWRK\n.*\n.*  CONVERT THE CONTENTS OF &REG TO DECIMAL AND EDIT INTO &AREA.\n.*  &AREA IS A FIELD OF LENGTH SIX THAT WILL CONTAIN THE INTEGER\n.*  STRING WITH LEADING BLANKS SUPRESSED.  &DBLWRK IS A DOUBLE\n.*  WORK SPACE.\n.*\n&LABEL   CVD   &REG,&DBLWRK\n         MVC   &AREA.(6),=X'402020202120'\n         ED    &AREA.(6),&DBLWRK+5\n         MEND\n****************                                                        0000000\n*                                                                       0000000\n*         ----> THE WRTERM AND PROMPT MACROS ARE REWRITTEN TO ALLOW     0000000\n* IT TO ASSEMBLE UNDER IFOX00.                                          0000000\n*                                                                       0000000\n*         MACRO\n*&LAB     WRTERM &MSG\n*         LCLC   &MS\n*         LCLA   &LN\n*&MS      SETC  '&MSG'\n*&LN      SETA  K'&MS\n*&LN      SETA  &LN-2\n*&LAB     TPUT  &MS,&LN\n*         MEND\n*         MACRO\n*&LAB     PROMPT &MSG\n*         LCLC   &MS\n*         LCLA   &LN\n*&MS      SETC  '&MSG'\n*&LN      SETA  K'&MS\n*&LN      SETA  &LN-2\n*&LAB     TPUT  &MS,&LN,ASIS\n*         MEND\n         MACRO                                                          0000000\n&LAB     WRTERM &MSG                                                    0000000\n         LCLC   &LEN                                                    0000000\n&LEN     SETC   'L'''                                                   0000000\n&LAB     B      WRX&SYSNDX                                              0000000\nWRT&SYSNDX DC   C&MSG                                                   0000000\nWRX&SYSNDX TPUT WRT&SYSNDX,&LEN.WRT&SYSNDX                              0000000\n         MEND                                                           0000000\n         MACRO                                                          0000000\n&LAB     PROMPT &MSG                                                    0000000\n         LCLC   &LEN                                                    0000000\n&LEN     SETC   'L'''                                                   0000000\n&LAB     B      WRX&SYSNDX                                              0000000\nWRT&SYSNDX DC   C&MSG                                                   0000000\nWRX&SYSNDX TPUT WRT&SYSNDX,&LEN.WRT&SYSNDX,ASIS                         0000000\n         MEND                                                           0000000\n         MACRO\n         RDTERM &BUFF\n         TGET &BUFF,130\n         MEND\n         PRINT ON,GEN                                                   0000000\nKERMIT   CSECT\n*\n*         ----------------------------------------\n*\n*  KERMIT/TSO   -\n*\n*  Kermit - KL10 Error-ridden Reciprocol Micro Interface Transfer\n*  IBM Version 1.0\n*\n*  This program is the IBM MVS/TSO side of a file transfer system.\n*  It can be used to transfer files between a micro and a system\n*  running under MVS/TSO. It MUST be run as a Command Processor.\n*  See the KERMIT manual for the complete program specifications\n*  to which this program and any other component of the system\n*  must adhere.\n*\n*  Ronald J. Rusnak, University of Chicago Computation Center\n*  BITNET address, SYSRONR at UCHIVM1\n*  MAILNET address, SYSTEMS.RON@UCHICAGO.MAILNET\n*  ARPA forwarding address, SYSTEMS.RON%UCHICAGO@MIT-MULTICS.ARPA\n*  May 1984\n*\n*  Developed by the modification of the IBM CMS version written by\n*  Daphne Tzoar, Columbia University Center for Computing Activities\n*  March 1982\n*\n* Copyright (C) 1984 University of Chicago\n*\n* Permission is granted to any individual or institution to copy\n* or use this program, except for explicitly commercial purposes.\n*\n*\n*        The following external subroutines are required:\n*          -DYNALC - MVS dynamic allocation interface.\n*\n*\n*         ----------------------------------------\n*\n* Note that this is an experimental version; all changes should\n* be forwarded to the author.\n*\n         EJECT\n* REGISTER USAGE -\n* R1 -\n* R2 -\n* R3 -\n* R4 -\n* R5 -\n* R6 -\n* R7 -\n* R8 -\n* R9 -\n* R10 -\n* R11 - BASE REGISTER FOR GLOBAL DATA AREA\n* R12 - PROGRAM BASE\n* R13 - SAVE AREA\n* R14 - SUBROUTINE LINKAGE\n* R15 - SUBROUTINE LINKAGE\n*\n         SPACE\n*        PRINT     NOGEN\n         REGISTER\n         IKJCPPL\n         IKJUPT\n         SPACE\nAD       EQU       68                  DATA PACKET (ASCII 'D')\nAN       EQU       78                  NAK\nAZ       EQU       90                  EOF PACKET\nAS       EQU       83                  INIT PACKET\nAY       EQU       89                  ACK\nAF       EQU       70                  FILE PACKET\nAB       EQU       66                  BREAK PACKET\nAE       EQU       69                  ERROR PACKET\nERCOD    EQU       12                  MEANS EOF WITH 'FSREAD'\nFLG1     EQU       X'80'               IS FILE THE FIRST OR NOT\nFLG2     EQU       X'40'               OVERWRITE SENT FILENAME?\nFLG3     EQU       X'20'               ONE = SENT ONLY PARTIAL RECORD\nFLG4     EQU       X'10'               NAK FROM MICRO(0) OR RPACK(1)?\nFLG5     EQU       X'08'               ALLOCATED MORE SPACE (DMSFREE)\n         EJECT\n         DCBD      DSORG=(PS)\n         EJECT\n**********************************************************************\n*                                                                    *\n*        KERMIT-TSO PROGRAM                                          *\n*                                                                    *\n**********************************************************************\nKERMIT   CSECT\n         STM       R14,R12,12(R13)\n         BALR      R12,0\n         USING     *,R12\n         LA        R14,KSAVE\n         ST        R13,4(R14)\n         ST        R14,8(R13)\n         LR        R13,R14\n* USE R11 AS BASE REGISTER FOR THE SHARED DATA AREA\n         L         R11,=A(PARMS)\n         USING     PARMS,R11\n         TM        0(R1),X'80'     IS THIS A COMMAND PROCESSOR?\n         BO        NOTCP           NO, THEN REFUSE USER\n*\n* collect users mvs-tso prefix.\n*\n         L         R2,CPPLUPT-CPPL(,R1)  GET TO UPT\n         XR        R3,R3                 CLEAR R3\n         IC        R3,UPTPREFL-UPT(,R2)  GET LENGTH\n         BCTR      R3,0\n         ST        R3,PREFIXL  SAVE FOR LATER\n         MVC       PREFIX(*-*),UPTPREFX-UPT(R2)  MOVE PREFIX\n         EX        R3,*-6\n         GTSIZE ,                  GET TERMINAL INFO\n         LTR       R0,R0           IS THIS A ASCII TERMINAL?\n         BNZ       TERMOK          NO, THEN DON'T WARN ABOUT CX80\n*        BZ        TERMOK           GIVE WARNING MESSAGE                0000000\n         WRTERM    'WARNING: USE CX-80 PROTOCOL CONVERTER ONLY'         0000000\nTERMOK   WRTERM    'KERMIT-TSO VERSION 1.CX (&SYSDATE,&SYSTIME)'        0000000\n*                                                                       0000000\n* no translation from EBCDIC to ASCII needed in passthrough             0000000\n*                                                                       0000000\n*------------------------------------------------------------------     0000000\n         L         R15,=A(INIT)\n         BALR      R14,R15             CALL THE INITIALIZATION\n         WRTERM    ' '\n**********************************************************************\n*                                                                    *\n*        MAIN COMMAND PROCESSING ROUTINE                             *\n*                                                                    *\n**********************************************************************\nPROMPT   PROMPT    'KERMIT-CX80>'\n         RDTERM    INPUT\n*\n         TR        INPUT,UPPER         UPPERCASE INPUT\n         LA        R1,INPUT            R1 GETS ADDRESS OF STRING\n         L         R0,=F'130'          R0 GETS THE LENGTH\n         L         R15,=A(PARSER)\n         BALR      R14,R15             DO TOKENIZING\n*\n         LM        R7,R9,PARSELST      SAVE ADDR OF TOKENIZED LIST\n         L         R6,0(,R7)           GET THE PTR TO FIRST OPERAND\nNOPRO    MVI       ERRNUM,X'FF'        RESET ERROR FOR THIS TIME\n         CLI       0(R6),C' '          BARE CARRIAGE RETURN?\n         BE        PROMPT              IGNORE IT\n         CLI       0(R6),C'E'          CHECK FOR 'EXIT' COMMAND\n         BE        LEAVE\n         CLI       0(R6),C'Q'          CHECK FOR 'QUIT' COMMAND\n         BE        LEAVE\n         CLI       0(R6),C'?'          NEED HELP ?\n         BNE       SETCHK\n         WRTERM    'Legal Commands are: '\n   WRTERM    'Receive, Send, Help, Exit, Quit, Set, Status, Show .'\n         B         PROMPT\nSETCHK   CLC       =C'SET',0(R6)       IS IT THE SET COMMAND ?\n         BE        STSWITCH\n         CLC       =C'ST',0(R6)        IS IT THE STATUS COMMAND?\n         BE        STATSW\n         CLC       =C'SH',0(R6)        IS IT THE SHOW COMMAND?\n         BE        SHOSW\n         CLC       =C'HE',0(R6)        NEED HELP ?\n         BE        HELPSW\n         OI        FLAGS,FLG1          SET FLG1 - IT'S THE FIRST FILE\n         NI        FLAGS,X'FF'-FLG2    TURN OFF OVERWRITE FLAG (INIT)\n         CLC       =C'RE',0(R6)\n         BNE       SS                  MAYBE IT'S A SEND COMMAND\n**********************************************************************\n*        PROCESS RECEIVE COMMAND                                     *\n**********************************************************************\n         BXH       R7,R8,RR3           GET NEXT OPERAND\n         L         R6,0(,R7)           GET POINTER TO NEXT OPERAND\n         CLI       0(R6),C'?'          NEED HELP?\n         BNE       RR2\n         WRTERM    'Specify dsname to be created for RECEIVE.'\n         B         PROMPT\nRR2      CLI       0(R6),C' '          MORE WORDS ?\n         BE        RR3                 NO, THEN PROMPT\n         MVC       DSNAMEX(80),=CL80' ' BLANK DSNAME\n         LA        R1,DSNAMEX          POINT TO DSNAME BUFFER\n         LA        R2,44               MAX LENGTH OF DSNAME\n         SR        R5,R5               ZERO THE LENGTH\nRR4      CLI       0(R6),C' '          IS THIS END OF FIELD\n         BE        RR5                 YES, THEN PROCESS DSNAME\n         MVC       0(1,R1),0(R6)       MOVE A CHARACTER\n         LA        R6,1(,R6)           MOVE ALONG INPUT BUFFER\n         LA        R1,1(,R1)           MOVE ALONG DSNAME BUFFER\n         LA        R5,1(,R5)           UP THE LENGTH COUNT\n         BCT       R2,RR4              KEEP LOOKING FOR END\n         WRTERM    'Dsname too long'\n*\n*  allocate a new data set for receive\n*  dynaloc will not prefix - so we have to do this by hand.\n*\nRR3      WRTERM    'Enter data set name for RECEIVE.'\n         MVC       DSNAMEX(80),=CL80' '   BLANK FIELD\n         TGET      DSNAMEX,44           GET DSNAME\n         TR        DSNAMEX(80),UPPER    MAKE UPPER CASE DSN\n         LR        R5,R1                  SAVE TGET LENGTH\nRR5      LA        R6,DSNAMEX             SOURCE\n         MVC       DSNAME(44),=CL44' ' BLANK FIELD\n         LA        R2,DSNAME           PLACE TO STUFF DSNAME\n         CLI       DSNAMEX,C''''       TEST IF QUOTED\n         BE        GBDSNQ1             BR IF SO\n*\n*  we'll prefix the dsname \"by hand\".\n*\n         L         R3,PREFIXL          ELSE GET EX LEN\n         MVC       0(*-*,R2),PREFIX    MOVE PREFIX TO BUFFER\n         EX        R3,*-6              MOVE IT\n         LA        R2,1(R3,R2)         NEXT POS IN BUFFER\n         MVI       0(R2),C'.'          PUT A DOT IN THERE\n         LA        R2,1(,R2)           PLACE FOR REST OF DSNAME\n         B         GBDSNQ2             CONTINUE\nGBDSNQ1  DS        0H                  X\n         LA        R6,1(,R6)           PAST QUOTE\n         S         R5,=F'2'            REDUCE LENGTH BY 2\n*\n*  build the parm list to the MVS dynalc routine.\n*\nGBDSNQ2  DS        0H\n         BCTR      R5,0                DEC LEN FOR  EX\n         MVC       0(*-*,R2),0(R6)     COMPLETE DSNAME\n         EX        R5,*-6\n         MVC       DDNAME(8),=CL8'KEROUT'\n         MVC       DISP1(4),=F'0'      A NEW DATA SET\n         MVC       DISP2(4),=F'1'      CATLG\n         MVC       INOUT(4),=F'1'      OUTPUT\n         MVC       RECFMX(4),=F'1'     FB DATA SET\n         MVC       TRACK(4),=F'5'      5 TRACK ALLOC\n*\n* select a model dcb.  either f or v\n*\n         MVC       KEROUT(MODDCBFL),MODDCBF\n         CLI       RFM,C'F'           DOES USER WANT FB\n         BE        MAKDCB             YES\n         MVC       KEROUT(MODDCBVL),MODDCBV  USE V MODEL\nMAKDCB   DS        0H\n*\n* NOW CHECK THE LRECL AND BLKSIZE BEFORE OPEN\n*\n         SR        R1,R1      CLEAR R1\n         IC        R1,LRECL   GET LRECL\n         SR        R2,R2               CLEAR R2\n         LH        R3,BLKSIZE GET BLKSIZE\n         CLI       RFM,C'V'            IS THIS VARIABLE\n         BE        CHKFIXD             NO, THEN CHECK AS IF FIXED\n         DR        R2,R1               SEE IF BLKSIZE IS A MULTIPLE\n         LTR       R2,R2                 OF THE LRECL\n         BNZ       CHKBLKER            YES, THEN SET LRECL AND BLKSIZE\n         LH        R3,BLKSIZE          GET BLKSIZE\n         B         SETLB\nCHKBLKER WRTERM    'BLKSIZE not multiple of LRECL for RECFM=F'\n         B         PROMPT\nCHKFIXD  SH        R3,=H'4'            ADJUST BLKSIZE\n         CR        R1,R3               IS LRECL =< BLKSIZE - 4\n         BNH       CHKFIXD2            YES, THEN SET LRECL AND BLKSIZE\n         WRTERM    'LRECL not less than BLKSIZE - 4 FOR RECFM=V'\n         B         PROMPT\nCHKFIXD2 AH        R3,=H'4'            READJUST BLKSIZE\nSETLB    DS        0H\n         STH       R1,KEROUT+(DCBLRECL-IHADCB) STUFF IN DCB\n         STH       R3,KEROUT+(DCBBLKSI-IHADCB)\n         ST        R3,BLKSIZEX             BLKSIZE\n         ST        R1,LRECLX               LRECL\n         LOCATE    DATASET\n         LTR       R15,R15             DOES DATASET EXIST?\n         BNZ       RRALOC              NO, THEN ALLOC A NEW ONE\n         PROMPT    'Dataset exists, reply \"OK\" to overwrite: '\n         TGET      WRKBUFF,3\n         OC        WRKBUFF(3),=CL80' '  UPPER CASE REPLY\n         CLC       =C'OK',WRKBUFF\n         BNE       PROMPT               BR, IF NOT OK\n         MVC       DISP1,=F'1'          MAKE DISP OLD\n         MVC       DISP2,=F'3'          KEEP\nRRALOC   L         R15,=V(DYNALC)      -> ENTRY POINT\n         LA        R1,DYNAPARM         PARMS FOR ALLOC\n         BALR      R14,R15             DO IT\n*\n         ICM       R1,B'1111',DYNALCRC GET RETURN OCDE\n         BNZ       PROMPT              BR IF FAILURE\n*\n* ... then we'll merge in these dcb attributes\n*\nMAKDCBX  DS        0H\n         NI    FLAGS,X'FF'-FLG3    turn off left-over data              0000000\n         OPEN      (KEROUT,(OUTPUT))\n         TM        KEROUT+(DCBOFLGS-IHADCB),DCBOFOPN\n         BO        GBOPNA\n         WRTERM    'Open for dataset failed.'\n         B         PROMPT\n*\n*  a breeze...\n*\nGBOPNA   DS        0H\n         WRTERM    'Receive waiting...'\n         L         R15,=A(RECEIVE)\n         BALR      R14,R15             CALL RECEIVE PORTION\n         LTR       R5,R15              CHECK RETURN CODE\n         BNZ       LNON\n         MVI       ERRNUM,X'FF'\nLNON     DS        0H\n*\n*  close any open data sets.\n*\n         CLOSE     (KERIN,,KEROUT)\n         MVC       OLDERR(1),ERRNUM    ERROR SETTING OF THIS RUN\n         LTR       R5,R5               CHECK THE RETCODE\n         BZ        PROMPT              ALL OKAY\n         WRTERM    'Error in receiving file. Try again.'\n         B         PROMPT              ERROR - TRY AGAIN\nSS       CLC       =C'SEN',0(R6)\n         BNE       ERR                 UNRECOGNIZED COMMAND\n**********************************************************************\n*        PROCESS SEND COMMAND                                        *\n**********************************************************************\n         BXH       R7,R8,SS3           NO MORE LEFT\n         L         R6,0(R7)            PICK UP  NEXT OPERAND\n         CLI       0(R6),C'?'          NEED HELP?\n         BNE       SS2\n         WRTERM    'Specify dataset name.'\n         B         PROMPT\nSS2      CLI       0(R6),C' '          MORE DATA ?\n*\n*  User wants to send a data set - well...\n*\n         BE        SS3                 NO, THEN PROMPT\n         MVC       DSNAMEX(80),=CL80' ' BLANK DSNAME\n         LA        R1,DSNAMEX          POINT TO DSNAME BUFFER\n         LA        R2,44               MAX LENGTH OF DSNAME\n         SR        R5,R5               CLEAR LENGTH\nSS4      CLI       0(R6),C' '          IS THIS END OF FIELD\n         BE        SS5                 YES, THEN PROCESS DSNAME\n         MVC       0(1,R1),0(R6)       MOVE A CHARACTER\n         LA        R6,1(,R6)           MOVE ALONG INPUT BUFFER\n         LA        R1,1(,R1)           MOVE ALONG DSNAME BUFFER\n         LA        R5,1(,R5)           UP THE LENGTH COUNT\n         BCT       R2,SS4              KEEP LOOKING FOR END\n         WRTERM    'Dsname too long'\n         B         PROMPT\nSS3      WRTERM    'Enter dataset name to send.'\n         MVC       DSNAMEX(80),=CL80' '   BLANK FIELD\n         TGET      DSNAMEX,44           GET DSNAME\n         TR        DSNAMEX(80),UPPER    MAKE UPPER CASE DSN\n         LR        R5,R1                  SAVE TGET LENGTH\nSS5      LA        R6,DSNAMEX             SOURCE\n         MVC       DSNAME(44),=CL44' ' BLANK FIELD\n         LA        R2,DSNAME           PLACE TO STUFF DSNAME\n         CLI       DSNAMEX,C''''       TEST IF QUOTED\n         BE        GBDSNQ3             BR IF SO\n*\n*  user tests if i know how to prefix a dsname.\n*\n         L         R3,PREFIXL          ELSE GET EX LEN\n         MVC       0(*-*,R2),PREFIX    MOVE PREFIX TO BUFFER\n         EX        R3,*-6              MOVE IT\n         LA        R2,1(R3,R2)         NEXT POS IN BUFFER\n         MVI       0(R2),C'.'          PUT A DOT IN THERE\n         LA        R2,1(,R2)           PLACE FOR REST OF DSNAME\n         B         GBDSNQ4             CONTINUE\nGBDSNQ3  DS        0H                  X\n         LA        R6,1(,R6)           PAST QUOTE\n         S         R5,=F'2'            REDUCE LENGTH BY 2\n*\n*  build a \"control block\"\n*\nGBDSNQ4  DS        0H\n         BCTR      R5,0                DEC LEN FOR  EX\n         MVC       0(*-*,R2),0(R6)     COMPLETE DSNAME\n         EX        R5,*-6\n         LA        R5,DSNAME+43        POINT TO END OF DSNAME\n         LA        R4,44               LENGTH OF DSNAME\nSSFINDL1 CLI       0(R5),C' '          IS IT BLANK?\n         BNE       SSFINDL2            NO, THEN FOUND END OF DSN\n         BCTR      R5,0                DECREMENT PTR\n         BCT       R4,SSFINDL1         LOOP TILL FOUND\n         WRTERM    'Dsname cannot be entirely blank'\n         B         PROMPT\nSSFINDL2 LR        R3,R5               REMEMBER END OF DSN\n         LA        R2,2                TRY TO FIND 2 LEVELS\nSSFINDL3 CLI       0(R5),C'.'          IS IT A DOT?\n         BE        SSFINDL4            YES, THEN HANDLE IT\nSSFINDL5 BCTR      R5,0                DECREMENT PTR\n         BCT       R4,SSFINDL3         LOOP TILL FOUND\n         B         SSFINDE             BR IF FRONT OF DSN\nSSFINDL4 BCT       R2,SSFINDL5         FIND ANOTHER LEVEL\nSSFINDE  MVC       FILNAM,=CL80' '     BLANK FILNAM\n         LA        R5,1(,R5)           MOVE TO FRONT OF LEVEL\n         SR        R3,R5               FIND LENGTH TO MOVE\n         CH        R3,=H'17'           TRUNC IF TOO LONG\n         BNH       *+8                 NOT TOO LONG\n         LA        R3,=H'17'           FORCE MAX LENGTH\n         MVC       FILNAM(*-*),0(R5)   MOVE INSTRUCTION FOR EXECUTE\n         EX        R3,*-6              GO MOVE THE DATA\n         STH   R3,FILNAML          SAVE LENGTH - 1\n         MVC       DDNAME(8),=CL8'KERIN'\n         MVC       DISP1(4),=F'2'    DISP=SHR\n         MVC       DISP2(4),=F'3'    KEEP\n         MVC       INOUT(4),=F'0'  INPUT\n         LA        R1,DYNAPARM\n         L         R15,=V(DYNALC)    GET EMTRY POINT\n         BALR      R14,R15           DO IT\n         ICM       R1,B'1111',DYNALCRC GET RETURN CODE\n         BNZ       PROMPT\n*\n*  open the users data set\n*\n         OPEN      (KERIN,(INPUT))\n         TM        KERIN+(DCBOFLGS-IHADCB),DCBOFOPN\n         BO        GBOPNB\n         WRTERM    'Open for dataset failed.'\n         B         PROMPT\nGBOPNB   DS        0H\n         TM        KERIN+(DCBRECFM-IHADCB),DCBRECV IS RECFM=V\n         BO        SSDELAY         YES, THEN WAIT\n         TM        KERIN+(DCBRECFM-IHADCB),DCBRECF IS RECFM=F\n         BO        SSDELAY         YES, THEN WAIT\n         WRTERM    'Invalid RECFM, only fixed and variable supported'\n         CLOSE     KERIN\n         B         PROMPT\nSSDELAY  DS        0H\n         MVC  WRKBUFF(37),=C'Waiting ..... seconds before sending.'\n         L         R1,DELAY\n         SR        R0,R0\n         D         R0,=F'100'\n         BINCVRT   R1,WRKBUFF+7,DBLWRK\n         TPUT      WRKBUFF,37\n         STIMER    WAIT,BINTVL=DELAY\n         B         SSWITCH\nERR      WRTERM    'Invalid command'\n         B         PROMPT              INVALID COMMAND - TRY AGAIN\n         SPACE     3\nSSWITCH  EQU       *\n         L         R15,=A(SEND)\n         BALR      R14,R15             CALL SEND PORTION\n         LTR       R5,R15              CHECK RETURN CODE\n         BNZ       LINON\n         MVI       ERRNUM,X'FF'        WORKED OK\nLINON    DS        0H\n*\n*  close any open data sets.\n*\n         CLOSE     (KERIN,,KEROUT)\n         MVC       OLDERR(1),ERRNUM    ERROR SETTING OF THIS RUN\n         LTR       R5,R5               CHECK THE RETCODE\n         BZ        PROMPT              ALL OKAY\n         WRTERM    'Error in sending file. Try again.'\n         B         PROMPT              ERROR - TRY AGAIN\n**********************************************************************\n*        PROCESS SET COMMAND                                         *\n**********************************************************************\nSTSWITCH EQU       *\n         L         R15,=A(SET)\n         BALR      R14,R15             CALL \"SET\" SUBROUTINE\n         LTR       R15,R15             CHECK RETCODE\n         BZ        PROMPT\n         WRTERM    'Illegal Set Command'\n         B         PROMPT\n**********************************************************************\n*        PROCESS SHOW COMMAND                                        *\n**********************************************************************\nSHOSW    EQU       *\n         L         R15,=A(SHOW)\n         BALR      R14,R15             CALL \"SHOW\" SUBROUTINE\n         LTR       R15,R15             CHECK RETCODE\n         BZ        PROMPT\n         WRTERM    'Illegal Show Command'\n         B         PROMPT\n**********************************************************************\n*        PROCESS STATUS COMMAND                                      *\n**********************************************************************\nSTATSW   EQU       *\n         BXH       R7,R8,GIVSTAT       NO MORE LEFT\n         L         R6,0(R7)            PICK UP  NEXT OPERAND\n         CLI       0(R6),C'?'          NEED HELP?\n         BNE       GIVSTAT\n         WRTERM    'Confirm with a carriage return'\n         B         PROMPT\nGIVSTAT  CLI       OLDERR,X'FF'        WAS THERE AN ERROR LAST TIME?\n         BNE       FAIL\n         WRTERM    'Kermit completed successfully'\n         B         PROMPT\nFAIL     SR        R5,R5\n         IC        R5,OLDERR           GET OFFSET INTO ERROR TABLE\n         M         R4,=F'20'           OFFSET := ERRNUM * 20\n         LA        R5,ERRTAB(R5)\n*G       WRTERM    (R5),20             PRINT ERROR MSG ON SCREEN\n         TPUT      (R5),20\n         B         PROMPT              AND LEAVE\n**********************************************************************\n*        PROCESS HELP COMMAND                                        *\n**********************************************************************\nHELPSW   BXH       R7,R8,GIVHLP        NO MORE LEFT\n         L         R6,0(R7)            PICK UP  NEXT OPERAND\n         CLI       0(R6),C'?'          NEED HELP?\n         BNE       GIVHLP\n         WRTERM    'Confirm with a carriage return'\n         B         PROMPT\nGIVHLP   DS        0H\n         WRTERM    'Enter ? at prompt to receive list of commands.'\n         WRTERM  'Enter ? after a command to receive list of operands'\n         B         PROMPT\n**********************************************************************\n*        PROCESS EXIT COMMAND                                        *\n**********************************************************************\nLEAVE    BXH       R7,R8,KRET        ANY MORE OPERANDS?\n         L         R6,0(,R7)           GET ADDRESS OF OPERAND\n         CLI       0(R6),C'?'          NEED HELP?\n         BNE       KRET                NO, JUST LEAVE\n         WRTERM    'Confirm with a carriage return'\n         B         PROMPT\nBADDEV   WRTERM    'An Ascii terminal must be used.'\n         B         RET\nNOTCP    WRTERM    'KERMIT-TSO must be running as a command processor'\n         WRTERM    'Contact your local systems programmer'\n         B         RET\nKRET     EQU       *\nRET      EQU       *\n*\n*  close any open data sets.\n*  dynalc has a free=close so.....\n*\n         TM        KERIN+(DCBOFLGS-IHADCB),DCBOFOPN\n         BNO       RETGB1\n         CLOSE     KERIN\nRETGB1   DS        0H\n         TM        KEROUT+(DCBOFLGS-IHADCB),DCBOFOPN\n         BNO       RETGB2\n         CLOSE     KEROUT\nRETGB2   DS        0H\n         CLOSE     DEBUG\n         L         R13,4(R13)\n         L         R14,12(R13)\n         LM        R0,R12,20(R13)\n         BR        R14\nKSAVE    DS        18F                 KERMIT'S SAVE AREA\n         LTORG\n         DROP      R11\n         DROP      R12                 NO LONGER NEED THEM\n         EJECT\n**********************************************************************\n*                                                                    *\n*        ROUTINE TO PROCESS SET COMMAND                              *\n*                                                                    *\n**********************************************************************\nSET      DS        0H\n         STM       R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         BALR      R12,0               ESTABLISH ADDRESSABILITY\n         USING     *,R12\n         LA        R14,SETSAVE         ADDRESS OF MY SAVE AREA\n         ST        R13,4(R14)          SAVE CALLER'S\n         ST        R14,8(R13)\n         LR        R13,R14\n* USE R11 AS BASE REGISTER FOR 'PARMS' GLOBAL DATA AREA\n         L         R11,=A(PARMS)\n         USING     PARMS,R11           ESTABLISH ADDRESSABILITY\n         BXH       R7,R8,SETHLP\n         L         R6,0(R7)            PICK UP NEXT OPERAND\n         CLI       0(R6),C'?'          NEED HELP ?\n         BNE       NOQ\nSETHLP   WRTERM    'Blksize, Debug, Delay, End-of-line, Lrecl,'\n         WRTERM    'Quote, Packet-size, Recfm, Space, Start-of-line'\n         B         SETOK\n**********************************************************************\n*                           SET RECFM                                *\n**********************************************************************\nNOQ      CLC       =C'RE',0(R6)\n         BNE       NOREC\n         BXH       R7,R8,SETNFM        MORE OPERANDS?\n         L         R6,0(R7)            PICK UP RECORD FORMAT\n         CLI       0(R6),C'?'\n         BNE       CHKFM\n         WRTERM    'f or v (default of v)'\n         B         SETOK\nCHKFM    CLI       0(R6),C'V'          REDUNDANT\n         BE        FMSET\n         CLI       0(R6),C'F'          FIXED FORMAT?\n         BNE       RECERR\nFMSET    MVC       RFM(1),0(R6)        PICK UP RECFM\n         B         SETOK\nRECERR   WRTERM    'Fixed and variable files only'\n         B         SETERR\n**********************************************************************\n*                         SET QUOTE                                  *\n**********************************************************************\nNOREC    CLC       =C'QU',0(R6)        QUOTE CHARACTER\n         BNE       NOQUO\n         BXH       R7,R8,SETNFM        ANY MORE OPERANDS\n         L         R6,0(R7)            GET NEXT TOKEN\n         CLI       0(R6),C' '          VALUE NOT SUPPLIED?\n         BNE       GIVQ\nSETNFM   WRTERM    '?NOT CONFIRMED'\n         B         SETERR\nGIVQ     CLC       =C'? ',0(R6)\n         BNE       GETQUO\n         WRTERM    'a single character'\n         B         SETOK\nGETQUO   MVC       QUOCHAR(1),0(R6)    SET NEW QUOTE CHAR\n         TR        QUOCHAR(1),ETOA     GET ASCII FORM\n         CLI       1(R6),C' '          IS IT ONLY ONE CHAR?\n         BE        ISQOK\n         WRTERM    'one character only'\n         B         BADQUO\nISQOK    CLI       QUOCHAR,X'21'       CAN'T BE LESS THAN 32\n         BL        BADQUO\n         CLI       QUOCHAR,X'7E'       CAN'T BE LARGER THAN 126\n         BH        BADQUO\n         CLI       QUOCHAR,X'3E'       HAS TO BE BETWEEN 32-62\n         BNH       SETOK\n         CLI       QUOCHAR,X'60'       OR BETWEEN 96-126\n         BNL       SETOK\nBADQUO   WRTERM    'Must fall between 41-76,140,or 173-176 (octal).'\n         MVC       QUOCHAR(1),DQUOTE   RESET VALUE, JUST IN CASE\n         B         SETERR\n**********************************************************************\n*                         SET LRECL                                  *\n**********************************************************************\nNOQUO    CLC       =C'LR',0(R6)        LRECL SIZE\n         BNE       SETBLK\n         BXH       R7,R8,SETNFM        ANY MORE OPERANDS\n         L         R6,0(R7)            GET NEXT TOKEN\n         CLI       0(R6),C'?'          HELP ?\n         BNE       GETREC\n         WRTERM    'Logical Record Length (default of 80).'\n         B         SETOK\nGETREC   CLI       0(R6),C' '          NO VALUE GIVEN\n         BNE       CALC\n         WRTERM    '?not confirmed'\n         B         SETERR\nCALC     CLI       0(R6),X'F0'         MUST BE >= TO 0\n         BL        BADREC\n         CLI       0(R6),X'F9'         MUST BE <= TO 9\n         BH        BADREC\n         XC        PKVAR,PKVAR         EMPTY IT OUT\n         SR        R4,R4               LENGTH OF NUMBER\n         CLI       1(R6),C' '          TWO DIGITS?\n         BNE       CALC2\n         EX        R4,PCK\n         B         TST\nCALC2    LA        R4,1(R4)            ADD ONE\n         CLI       2(R6),C' '          THREE DIGITS?\n         BNE       CALC3\n         EX        R4,PCK\n         B         TST\nCALC3    LA        R4,1(R4)            IS THERE AN ERROR?\n         CLI       3(R6),C' '\n         BNE       BADREC\n         EX        R4,PCK\nTST      CVB       R7,PKVAR\n         C         R7,=F'255'          MAX OF 255 FOR LRECL\n         BH        BADREC\n         STC       R7,LRECL            SET THE LRECL VALUE\n         B         SETOK\nBADREC   WRTERM    'A number with a maximum of 255.'\n         B         SETERR\n**********************************************************************\n*                         SET BLKSIZE                                *\n**********************************************************************\nSETBLK   CLC       =C'BL',0(R6)        BLOCK SIZE\n         BNE       SETSPACE\n         BXH       R7,R8,SETNFM        ANY MORE OPERANDS\n         L         R6,0(R7)            GET NEXT TOKEN\n         CLI       0(R6),C'?'          HELP ?\n         BNE       GETBLK\n         WRTERM    'Blocksize (default of 80).'\n         B         SETOK\nGETBLK   CLI       0(R6),C' '          NO VALUE GIVEN\n         BNE       BLKCALC\n         WRTERM    '?not confirmed'\n         B         SETERR\nBLKCALC  XC        PKVAR,PKVAR         EMPTY IT OUT\n         SR        R4,R4               LENGTH OF NUMBER\n         LA        R7,5                MAX LENGTH OF NUMBER\n         LR        R5,R6               SAVE START OF STRING\nBLKCALC1 CLI       0(R6),X'F0'         MUST BE >= TO 0\n         BL        BADBLK\n         CLI       0(R6),X'F9'         MUST BE <= TO 9\n         BH        BADBLK\n         CLI       1(R6),C' '          FOUND LAST DIGIT?\n         BE        BLKCALC2\n         LA        R4,1(R4)            COUNT NUMBER OF DIGITS\n         LA        R6,1(R6)            POINT TO NEXT DIGIT\n         BCT       R7,BLKCALC1         KEEP CHECKING\n         B         BADBLK\nBLKCALC2 EX        R4,BLKPCK\n         B         BLKTST\nBLKTST   CVB       R7,PKVAR\n         C         R7,=F'32767'        MAX OF 32767 FOR BLKSIZE\n         BH        BADBLK\n         STH       R7,BLKSIZE          SET THE BLKSIZE\n         B         SETOK\nBADBLK   WRTERM    'A number with a maximum of 32767'\n         B         SETERR\n**********************************************************************\n*                         SET TRACK ALLOCATION                       *\n**********************************************************************\nSETSPACE CLC       =C'SP',0(R6)        BLOCK SIZE\n         BNE       SETEOL\n         BXH       R7,R8,SETNFM        ANY MORE OPERANDS\n         L         R6,0(R7)            GET NEXT TOKEN\n         CLI       0(R6),C'?'          HELP ?\n         BNE       GETSPC\n         WRTERM    'Dataset space allocation (default of 5 tracks).'\n         B         SETOK\nGETSPC   CLI       0(R6),C' '          NO VALUE GIVEN\n         BNE       SPCCALC\n         WRTERM    '?not confirmed'\n         B         SETERR\nSPCCALC  XC        PKVAR,PKVAR         EMPTY IT OUT\n         SR        R4,R4               LENGTH OF NUMBER\n         LA        R7,5                MAX LENGTH OF NUMBER\n         LR        R5,R6               SAVE START OF STRING\nSPCCALC1 CLI       0(R6),X'F0'         MUST BE >= TO 0\n         BL        BADSPC\n         CLI       0(R6),X'F9'         MUST BE <= TO 9\n         BH        BADSPC\n         CLI       1(R6),C' '          FOUND LAST DIGIT?\n         BE        SPCCALC2\n         LA        R4,1(R4)            COUNT NUMBER OF DIGITS\n         LA        R6,1(R6)            POINT TO NEXT DIGIT\n         BCT       R7,SPCCALC1         KEEP CHECKING\n         B         BADSPC\nSPCCALC2 EX        R4,SPCPCK\n         B         SPCTST\nSPCTST   CVB       R7,PKVAR\n         C         R7,=F'99999'        MAX OF 99999 FOR SPACE\n         BH        BADSPC\n         ST        R7,TRACK            SET THE ALLOCATION\n         B         SETOK\nBADSPC   WRTERM    'A number with a maximum of 99999'\n         B         SETERR\n**********************************************************************\n*                         SET END-OF-LINE CHARACTER                  *\n**********************************************************************\nSETEOL   CLC       =C'EN',0(R6)        EOL CHARACTER\n         BNE       NOEND\n         BXH       R7,R8,SETNFM        ANY MORE OPERANDS\n         L         R6,0(R7)            GET NEXT TOKEN\n         CLI       0(R6),C' '          NOT DATA\n         BNE       EOLCHAR\n         WRTERM    '?not confirmed'\n         B         SETERR\nEOLCHAR  CLI       0(R6),C'?'          NEED HELP?\n         BNE       GETEOL\n         WRTERM    'A two digit number between 00 and 31 (dec).'\n         B         SETOK\nGETEOL   CLI       0(R6),X'F0'         MUST BE >= TO 0\n         BL        BADEOL\n         CLI       0(R6),X'F9'         MUST BE <= TO 9\n         BH        BADEOL\n         XC        PKVAR,PKVAR         USE TO CONVERT VALUE\n         CLI       1(R6),C' '          INPUT MUST BE TWO CHARS\n         BE        BADEOL\n         CLI       2(R6),C' '          TWO CHARS, AT MAX\n         BNE       BADEOL\n         PACK      PKVAR(8),0(2,R6)    PICK UP TWO CHARACTERS\n         CVB       R7,PKVAR            PUT PACKED DECIMAL INTO REG\n         C         R7,=F'31'           MAX OF 31 DECIMAL\n         BH        BADEOL\n         STC       R7,SEOL             SET SEND EOL VALUE\n         B         SETOK\nBADEOL   WRTERM    'Must be a two digit value less than 31 (dec).'\n         B         SETERR\n**********************************************************************\n*                         SET PACKET-SIZE                            *\n**********************************************************************\nNOEND    CLC       =C'PA',0(R6)        CHANGE RECEIVE PACKET SIZE\n         BNE       NOPAC\n         BXH       R7,R8,SETNFM        ANY MORE OPERANDS\n         L         R6,0(R7)            GET NEXT TOKEN\n         CLI       0(R6),C' '          NO DATA\n         BNE       GETPAC\n         WRTERM    '?not confirmed'\n         B         SETERR\nGETPAC   CLI       0(R6),C'?'          NEED HELP?\n         BNE       CALC4\n         WRTERM    'Receive packet size (range: 26-94 decimal).'\n         B         SETOK\nCALC4    CLI       0(R6),X'F0'         MUST BE >= TO 0\n         BL        BADPAC\n         CLI       0(R6),X'F9'         MUST BE <= TO 9\n         BH        BADPAC\n         XC        PKVAR,PKVAR         USE TO CONVERT VALUE\n         CLI       1(R6),C' '          INPUT MUST BE TWO CHARS\n         BE        BADPAC\n         CLI       2(R6),C' '          TWO CHARS, AT MAX\n         BNE       BADPAC\n         PACK      PKVAR(8),0(2,R6)    PICK UP TWO CHARS\n         CVB       R7,PKVAR            PUT PACKED DECIMAL INTO REG\n         C         R7,=F'26'           THIS IS MIN\n         BL        BADPAC\n         C         R7,MAXPACK          THIS IS THE MAX\n         BH        BADPAC\n         ST        R7,RPSIZ            USE THIS VALUE NOW\n         B         SETOK\nBADPAC   WRTERM    'Must be between 26-94 (decimal).'\n         B         SETERR\n**********************************************************************\n*                         SET DEBUG ON:OFF                           *\n**********************************************************************\nNOPAC    CLC       =C'DEB',0(R6)      IS THIS DEBUG?\n         BNE       SETSOH              NO, THEN SEE IF SET SOH\n         BXH       R7,R8,SETNFM        ANY MORE OPERANDS\n         L         R6,0(R7)            GET NEXT TOKEN\n         CLI       0(R6),C' '          IS THERE AN OPERAND?\n         BE        DEBERR              NO, THEN ASK FOR ONE.\n         CLC       =C'ON',0(R6)        IS IT TIME TO TURN ON\n         BE        DEBON               YES, OPEN FILE\n         CLC       =C'OF',0(R6)       IS IT TIME TO TURN OFF\n         BE        DEBOFF              YES, CLOSE FILE\n         B         DEBERR              YES, GIVE MESSAGE\nDEBERR   WRTERM    'Command is SET DEBUG ON : OFF'\n         B         SETERR\nDEBON    OPEN      (DEBUG,(OUTPUT))\n         TM        DEBUG+(DCBOFLGS-IHADCB),DCBOFOPN  IS IT OPEN?\n         BO        SETOK\n         WRTERM    'Unable to open debug file, debug disabled.'\n         B         SETERR\nDEBOFF   CLOSE     DEBUG\n         B         SETOK\n**********************************************************************\n*                         SET START-OF-HEADER CHARACTER              *\n**********************************************************************\nSETSOH   CLC       =C'ST',0(R6)       SOH CHARACTER\n         BNE       NOSOH               NO, THEN TRY DELAY\n         BXH       R7,R8,SETNFM        ANY MORE OPERANDS\n         L         R6,0(R7)            GET NEXT TOKEN\n         CLI       0(R6),C' '          NOT DATA\n         BNE       SOHCHAR\n         WRTERM    '?not confirmed'\n         B         SETERR\nSOHCHAR  CLI       0(R6),C'?'          NEED HELP?\n         BNE       GETSOH\n         WRTERM    'A two digit number between 00 and 31 (dec).'\n         B         SETOK\nGETSOH   CLI       0(R6),X'F0'         MUST BE >= TO 0\n         BL        BADSOH\n         CLI       0(R6),X'F9'         MUST BE <= TO 9\n         BH        BADSOH\n         XC        PKVAR,PKVAR         USE TO CONVERT VALUE\n         CLI       1(R6),C' '          INPUT MUST BE TWO CHARS\n         BE        BADSOH\n         CLI       2(R6),C' '          TWO CHARS, AT MAX\n         BNE       BADSOH\n         PACK      PKVAR(8),0(2,R6)    PICK UP TWO CHARACTERS\n         CVB       R7,PKVAR            PUT PACKED DECIMAL INTO REG\n         C         R7,=F'31'           MAX OF 31 DECIMAL\n         BH        BADSOH              ERROR, TOO BIG\n         STC       R7,SSOH             SET SEND SOH VALUE\n         STC       R7,RSOH             SET RECEIVE SOH VALUE\n         B         SETOK\nBADSOH   WRTERM    'Must be a two digit value less than 31 (dec).'\n         B         SETERR\n**********************************************************************\n*                      SET DELAY VALUE                               *\n**********************************************************************\nNOSOH    CLC       =C'DEL',0(R6)       CHANGE RECEIVE PACKET SIZE\n         BNE       SETERR\n         BXH       R7,R8,SETNFM        ANY MORE OPERANDS\n         L         R6,0(R7)            GET NEXT TOKEN\n         CLI       0(R6),C' '          NO DATA\n         BNE       GETDELAY\n         WRTERM    '?not confirmed'\n         B         SETERR\nGETDELAY CLI       0(R6),C'?'          NEED HELP?\n         BNE       DLYCALC\n         WRTERM    'Receive packet size (range: 26-94 decimal).'\n         B         SETOK\nDLYCALC  XC        PKVAR,PKVAR         EMPTY IT OUT\n         SR        R4,R4               LENGTH OF NUMBER\n         LA        R7,5                MAX LENGTH OF NUMBER\n         LR        R5,R6               SAVE START OF STRING\nDLYCALC1 CLI       0(R6),X'F0'         MUST BE >= TO 0\n         BL        BADDELAY\n         CLI       0(R6),X'F9'         MUST BE <= TO 9\n         BH        BADDELAY\n         CLI       1(R6),C' '          FOUND LAST DIGIT?\n         BE        DLYCALC2\n         LA        R4,1(R4)            COUNT NUMBER OF DIGITS\n         LA        R6,1(R6)            POINT TO NEXT DIGIT\n         BCT       R7,DLYCALC1         KEEP CHECKING\n         B         BADDELAY\nDLYCALC2 EX        R4,DLYPCK\n         B         DLYTST\nDLYTST   CVB       R7,PKVAR\n         LTR       R7,R7               THIS IS MIN\n         BNP       BADDELAY\n         C         R7,=F'99999'        THIS IS THE MAX\n         BH        BADDELAY\n         MH        R7,=H'100'          MAKE IT 100THS OF SECONDS\n         ST        R7,DELAY            USE THIS VALUE NOW\n         B         SETOK\nBADDELAY WRTERM    'Must be between 1-99999 (DECIMAL).'\n         B         SETERR\nSETERR   LA        R15,4               SET A NON-ZERO RETCODE\n         B         SETRET\nSETOK    SR        R15,R15             RETCODE OF 0\n*\nSETRET   L         R13,4(R13)\n         L         R14,12(R13)\n         LM        R0,R12,20(R13)\n         BR        R14\nSETSAVE  DS        18F\nPCK      PACK      PKVAR(8),0(0,R6)\nBLKPCK   PACK      PKVAR(8),0(0,R5)\nSPCPCK   PACK      PKVAR(8),0(0,R5)\nDLYPCK   PACK      PKVAR(8),0(0,R5)\n         LTORG\n         DROP      R11\n         DROP      R12\n         EJECT\n**********************************************************************\n*                                                                    *\n*        ROUTINE TO PROCESS SHOW COMMAND                             *\n*                                                                    *\n**********************************************************************\nSHOW     DS        0H\n         STM       R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         BALR      R12,0               ESTABLISH ADDRESSABILITY\n         USING     *,R12\n         LA        R14,SHOWSAVE        ADDRESS OF MY SAVE AREA\n         ST        R13,4(R14)          SAVE CALLER'S\n         ST        R14,8(R13)\n         LR        R13,R14\n* USE R11 AS BASE REGISTER FOR 'PARMS' GLOBAL DATA AREA\n         L         R11,=A(PARMS)\n         USING     PARMS,R11           ESTABLISH ADDRESSABILITY\n         BXH       R7,R8,SHONFM        ANY MORE OPERANDS\n         L         R6,0(R7)            GET NEXT TOKEN\n         CLI       0(R6),C'?'          NEED HELP ?\n         BNE       SHOREC\n         WRTERM    'State'\n         B         SHOWOK\nSHONFM   WRTERM    '?NOT CONFIRMED'\n         B         SHOWERR\nSHOREC   CLI       0(R6),C'S'          IS THIS SHOW STATE\n         BNE       SHOWERR\n         MVC       WRKBUFF(18),=C'Record format is .'\n         MVC       WRKBUFF+17(1),RFM\n         TPUT      WRKBUFF,18\n         TR        QUOCHAR(1),ATOE     GET EBCDIC VERSION\n         MVC       WRKBUFF(20),=C'Quote character is .'\n         MVC       WRKBUFF+19(1),QUOCHAR\n         TPUT      WRKBUFF,20\n         TR        QUOCHAR(1),ETOA     KEEP THE ASCII FORM AROUND\n         SR        R4,R4               ZERO IT OUT\n         IC        R4,LRECL\n         MVC       WRKBUFF(8),=C'Lrecl is'\n         BINCVRT   R4,WRKBUFF+8,DBLWRK\n         TPUT      WRKBUFF,14\n         LH        R4,BLKSIZE\n         MVC       WRKBUFF(10),=C'Blksize is'\n         BINCVRT   R4,WRKBUFF+10,DBLWRK\n         TPUT      WRKBUFF,16\n         L         R4,TRACK\n         MVC       WRKBUFF(32),=C'Space allocation is ..... tracks'\n         BINCVRT   R4,WRKBUFF+19,DBLWRK\n         TPUT      WRKBUFF,32\n         SR        R4,R4               ZERO IT OUT\n         IC        R4,SSOH\n       MVC WRKBUFF(44),=C'Start-of-header character is ..... (decimal)'\n         BINCVRT   R4,WRKBUFF+28,DBLWRK\n         TPUT      WRKBUFF,44\n         SR        R4,R4               ZERO IT OUT\n         IC        R4,SEOL\n         MVC WRKBUFF(40),=C'End-of-line character is ..... (decimal)'\n         BINCVRT   R4,WRKBUFF+24,DBLWRK\n         TPUT      WRKBUFF,40\n         MVC WRKBUFF(38),=C'Receive packet size is ..... (decimal)'\n         L         R1,RPSIZ\n         BINCVRT   R1,WRKBUFF+22,DBLWRK\n         TPUT      WRKBUFF,38\n         MVC       WRKBUFF(28),=C'Delay value is ..... seconds'\n         L         R1,DELAY\n         SR        R0,R0\n         D         R0,=F'100'\n         BINCVRT   R1,WRKBUFF+14,DBLWRK\n         TPUT      WRKBUFF,28\n         MVC       WRKBUFF(9),=C'Debug is '\n         MVC       WRKBUFF+9(3),=C'off'\n         TM        DEBUG+(DCBOFLGS-IHADCB),DCBOFOPN  IS IT OPEN?\n         BZ        SHOWDBG\n         MVC       WRKBUFF+9(3),=C'on '\nSHOWDBG  TPUT      WRKBUFF,12\n         B         SHOWOK\nSHOWERR  LA        R15,4               SET A NON-ZERO RETCODE\n         B         SHOWRET\nSHOWOK   SR        R15,R15             ZERO RETCODE\n*\nSHOWRET  L         R13,4(R13)\n         L         R14,12(R13)\n         LM        R0,R12,20(R13)\n         BR        R14\nSHOWSAVE DS        18F\n         LTORG\n         DROP      R11\n         DROP      R12\n*\n         EJECT\n**********************************************************************\n*                                                                    *\n*        ROUTINE TO INITIALIZE PARAMETER AREA                        *\n*                                                                    *\n**********************************************************************\nINIT     DS        0H\n         STM       R14,R12,12(R13)\n         BALR      R12,0\n         USING     *,R12\n         LA        R14,ISAVE\n         ST        R13,4(R14)\n         ST        R14,8(R13)\n         LR        R13,R14\n*\n* INITIALIZE VARIABLES THAT GET CHANGED DURING EXECUTION\n* USE R11 AS BASE REGISTER FOR 'PARMS' GLOBAL DATA LIST\n         L         R11,=A(PARMS)\n         USING     PARMS,R11\n         XC        SNDPKT,SNDPKT       CLEAR OUT THESE BUFFERS\n         XC        RECPKT,RECPKT\n         XC        INPUT,INPUT\n         LA        R0,BUF\n         LA        R1,L'BUF            ; CLEAR OUT THE BUFFER.\n         SR        R15,R15\n         MVCL      R0,R14\n         LA        R0,RBUF\n         LA        R1,L'RBUF\n         SR        R15,R15\n         MVCL      R0,R14\n         XC        SDAT,SDAT\n         XC        RDAT,RDAT\n         XC        N,N                 SET VARIABLES TO ZERO\n         XC        NUM,NUM\n         XC        LSDAT,LSDAT\n         XC        LRDAT,LRDAT\n         MVI       FLAGS,X'00'         CLEAR ALL FLAGS\n         XC        SAVPL,SAVPL\n         XC        RSAVPL,RSAVPL\n         XC        NUMTRY,NUMTRY\n         MVC       FILNAM,=18X'20'     BLANK OUT FILNAM & NAME\n         MVC       NAME,=18X'20'\n         MVI       PREV,X'00'\n         MVI       ERRNUM,X'FF'        SET TO NO ERROR FOR NOW\n         MVI       OLDERR,X'FF'        SAME HERE\n         XC        PKVAR,PKVAR         ZERO IT OUT\n         XC        OLDTRY,OLDTRY\n         XC        SPSIZ,SPSIZ\n         XC        SIZE,SIZE\n         XC        TEMP,TEMP\n         XC        STORLOC,STORLOC\n         MVC       DELAY,DDELAY        SET DEFAULT DELAY\n         MVC       LRECL(1),DLRECL     SET DEFAULTS, JUST IN CASE\n         MVC       BLKSIZE(2),DBLKSIZE SET DEFAULTS, JUST IN CASE\n         MVC       TRACK,DTRACK        DEFAULT SPACE OF 5 TRACKS\n         MVC       RFM(1),DRECFM\n         MVC       QUOCHAR(1),DQUOTE\n         MVC       RQUO(1),DQUOTE\n         MVC       REOL(1),DEOL\n         MVC       SEOL(1),DEOL\n         MVC       SSOH(1),DSOH\n         MVC       RSOH(1),DSOH\n         MVI       STATE,C' '\n         MVI       STYPE,C' '\n         MVI       RTYPE,C' '\n*\nINITRET  L         R13,4(R13)\n         L         R14,12(R13)\n         LM        R0,R12,20(R13)\n         BR        R14\nISAVE    DS        18F\n         LTORG\n         DROP      R11\n         DROP      R12\n         EJECT\n**********************************************************************\n*                                                                    *\n*        ROUTINE TO PROCESS SEND COMMAND                             *\n*                                                                    *\n**********************************************************************\nSEND     DS        0H\n         STM       R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         BALR      R12,0               ESTABLISH ADDRESSABILITY\n         USING     *,R12\n         LA        R14,SENDSAVE        ADDRESS OF MY SAVE AREA\n         ST        R13,4(R14)          SAVE CALLER'S\n         ST        R14,8(R13)\n         LR        R13,R14\n* USE R11 AS BASE REGISTER FOR 'PARMS' GLOBAL DATA AREA\n         L         R11,=A(PARMS)\n         USING     PARMS,R11           ESTABLISH ADDRESSABILITY\n         MVI       STATE,C'S'\n         SR        R3,R3\n         ST        R3,N\n         ST        R3,NUMTRY\nOKSND    TM        FLAGS,FLG1          IS THIS THE FIRST FILE?\n         BNO       SLOOP\n         NI        FLAGS,X'FF'-FLG1    TURN OFF FIRST FILE FLAG\n**********************************************************************\n*        MAIN SEND LOOP                                              *\n**********************************************************************\nSLOOP    CLI       STATE,C'D'          SEND DATA STATE\n         BE        SDATA\n         CLI       STATE,C'F'          SEND FILE STATE\n         BE        SFILE\n         CLI       STATE,C'S'          SEND INIT STATE\n         BE        SINIT\n         CLI       STATE,C'Z'          END OF FILE STATE\n         BE        SEOF\n         CLI       STATE,C'B'          SEND BREAK STATE\n         BE        SBREAK\n         CLI       STATE,C'C'          COMPLETE STATE\n         BE        COMPLETE\n         CLI       STATE,C'A'          ABORT STATE\n         BE        ABORT               ERROR - GO TO ABORT STATE\n         MVI       ERRNUM,X'02'        UNRECOGNIZED STATE\n         B         ABORT               OTHERWISE, DIE\n**********************************************************************\n*        CREATE AND SEND INITIALIZATION PACKET                       *\n**********************************************************************\nSINIT    CLC       NUMTRY,IMXTRY       SEE IF CAN SEND\n         BL        OK1                 YES WE CAN\n         MVI       STATE,C'A'          NOPE, GO INTO ABORT STATE\n         B         SLOOP\nOK1      L         R5,SPACE            MAKE CHARACTER PRINTABLE\n         A         R5,RPSIZ            ADD REC PACKET SIZE\n         STC       R5,SDAT             ADD SIZE INFO TO BUFFER\n         L         R5,SPACE\n         A         R5,=F'8'            8 FOR TIMEOUT\n         STC       R5,SDAT+1\n         L         R5,SPACE            SEND ZERO + \" \" FOR NPAD\n         STC       R5,SDAT+2           WE'RE THE SLOW GUYS\n         SR        R5,R5               PAD WITH NULLS\n         L         R3,O1H\n         XR        R5,R3               CTL FUNCTION (XOR WITH 64)\n         STC       R5,SDAT+3           DON'T NEED PADCHAR EITHER\n         SR        R5,R5               ZERO IT OUT FOR NEXT TWO GUYS\n         IC        R5,REOL             EOL CHAR I NEED\n         A         R5,SPACE            MAKE PRINTABLE\n         STC       R5,SDAT+4\n         IC        R5,QUOCHAR          MY QUOTE CHAR\n         STC       R5,SDAT+5\n         L         R3,NUMTRY\n         LA        R3,1(R3)            INCREMENT TRIAL COUNTER\n         ST        R3,NUMTRY\n         MVI       STYPE,AS            PACKET TYPE = SEND INITIATE\n         MVC       LSDAT(4),=F'6'     BUFFER SIZE FOR THIS SEND\n         L         R4,DSSIZ            GET DEFAULT SPSIZ\n         S         R4,FIVE             FOR NOW, USE DEFAULT SPSIZ....\n         ST        R4,SIZE             ....TO SET VALUE OF SIZE\n         L         R15,=A(SPACK)       GET ADDRESS OF ROUTINE 'SPACK'\n         BALR      14,15               SAVE * AND GO TO SPACK\n         CLI       STATE,C'A'\n         BE        ABORT\n         L         15,=A(RPACK)        GET ADDRESS OF 'RPACK'\n         BALR      14,15               SAVE * AND GO TO RPACK\n         CLI       RTYPE,AE            ERROR PACKET?\n         BNE       Y1                  NO, THEN MAYBE AN ACK\n         MVI       ERRNUM,X'0A'        MICRO DIED\n         MVI       STATE,C'A'          AND DIE\n         B         SLOOP\nY1       CLI       RTYPE,AY            SEE IF GOT ACK\n         BNE       N1                  MAYBE IT'S 'N'\n         CLC       N,NUM               CHECK MESSAGE NUMBERS\n         BE        AOK1\n         MVI       ERRNUM,X'08'        PACKET LOST\n         B         SLOOP\nAOK1     SR        R4,R4               ZERO OUT REGISTER\n         IC        R4,RDAT             USE SPSIZ THE MICRO WANTS\n         S         R4,SPACE            SUBTRACT THE ' '\n         C         R4,=F'26'           BUFFER HAS TO BE >= 26\n         BNL       CH1                 SO FAR, SO GOOD\n         MVI       STATE,C'A'          ABORT THEN\n         MVI       ERRNUM,X'00'        INVALID DATA-PACKET-SIZE ERROR\n         B         SLOOP\nCH1      C         R4,MAXPACK          MAX PACKET SIZE\n         BNH       CH2                 CONTINUE IF <= TO MAX\n         MVI       STATE,C'A'          DIE\n         MVI       ERRNUM,X'00'        INVALID DATA-PACKET-SIZE ERROR\n         B         SLOOP\nCH2      STC       R4,SPSIZ+3          USE SPSIZ THE MICRO WANTS\n         S         R4,FIVE\n         ST        R4,SIZE             SET SIZE TO SPSIZ-5\n         CLC       LRDAT(4),=F'4'      USING DEFAULTS?\n         BNH       NOCHG               YUP\n         LA        R5,RDAT             POINTER TO THE BUFFER\n         SR        R7,R7\n         IC        R7,4(R5)            SEOL MICRO WANTS\n         S         R7,SPACE            UNCHAR (IE - SUBTRACT SPACE)\n         STC       R7,SEOL\nNOCHG    MVI       STATE,C'F'          PUT INTO SEND FILE STATE\n         XC        NUMTRY,NUMTRY       RESET TO ZERO\n         L         R3,N\n         LA        R3,1(R3)            ADD ONE\n         ST        R3,N                STORE VALUE INCREMENTED BY 1\n         NC        N(4),=X'0000003F'   MASK TO GET MOD 64\n         B         SLOOP\nN1       CLI       RTYPE,AN            SEE IF IT'S 'N'\n         BNE       AB1                 IF NOT, DIE\n         TM        FLAGS,FLG4          DID MICRO NAK OR I REJECTED?\n         BO        SLOOP               LEAVE ERR MSG AS IS IF I DID\n         MVI       ERRNUM,X'09'        MICRO NAK'ED\n         B         SLOOP\nAB1      MVI       STATE,C'A'          ELSE, ABORT\n         MVI       ERRNUM,X'07'        UNRECOGNIZED PACKET TYPE\n         B         SLOOP\n**********************************************************************\n*        CREATE AND SEND FILE PACKET                                 *\n**********************************************************************\nSFILE    CLC       NUMTRY,MAXTRY       EXCEEDED NO. OF TRIES ALLOWED?\n         BL        OK2                 NOPE, STILL OK\n         MVI       STATE,C'A'          ABORT IF YES\n         B         SLOOP\nOK2      DS        0H\n         TR        FILNAM,ETOA\n         LH    R5,FILNAML          GET LENGTH OF FILENAME - 1\n         MVC   SDAT(*-*),FILNAM    USE FOR EXECUTE\n         EX    R5,*-6              GO MOVE FILENAME TO BUFFER\n         LA    R5,1(,R5)           UP THE FILE LENGTH TO BE EXACT\n         L         R3,NUMTRY\n         LA        R3,1(R3)            INCREMENT TRIAL COUNTER\n         ST        R3,NUMTRY\n         MVI       STYPE,AF            PACKET TYPE = FILE HEADER\n         ST        R5,LSDAT            SET BUFFER SIZE\n         TR        FILNAM,ATOE\nSNDFIL   L         R15,=A(SPACK)       GET ADDRESS OF 'SPACK'\n         BALR      14,15               SAVE * AND GO TO SPACK\n         CLI       STATE,C'A'\n         BE        ABORT\n         L         15,=A(RPACK)        GET ADDRESS OF 'RPACK'\n         BALR      14,15               SAVE * AND GO TO RPACK\n         CLI       RTYPE,AE            ERROR PACKET?\n         BNE       Y2                  MAYBE AN ACK\n         MVI       ERRNUM,X'0A'        MICRO DIED\n         MVI       STATE,C'A'          SO WE DO TOO\n         B         SLOOP\nY2       CLI       RTYPE,AY            SEE IF GOT ACK\n         BNE       N2                  MAYBE GOT AN 'N'\n         CLC       N,NUM               DO WE HAVE THE CORRECT ACK?\n         BE        AOK2\n         MVI       ERRNUM,X'08'        MISSING A PACKET SOMEWHERE\n         B         SLOOP\nAOK2     MVI       STATE,C'D'          PREPARE FOR SEND-DATA STATE\n         XC        NUMTRY,NUMTRY       RESET COUNTER\n         L         R3,N\n         LA        R3,1(R3)            ADD ONE\n         ST        R3,N                STORE INCREMENTED VALUE\n         NC        N(4),=X'0000003F'   MASK TO GET MOD 64\n         L         15,=A(GTCHR)\n         BALR      14,15               DO GET-CHAR AND COME BACK\n         B         SLOOP\nN2       CLI       RTYPE,AN\n         BNE       AB2                 ELSE, DIE\n         TM        FLAGS,FLG4          DID MICRO NAK OR I REJECTED?\n         BO        SLOOP               LEAVE ERR MSG AS IS IF I DID\n         MVI       ERRNUM,X'09'        MICRO NAK'ED\n         B         SLOOP\nAB2      MVI       STATE,C'A'          ELSE, ABORT\n         MVI       ERRNUM,X'07'        UNRECOGNIZED PACKET TYPE\n         B         SLOOP\n**********************************************************************\n*        CREATE AND SEND DATA PACKETS                                *\n**********************************************************************\nSDATA    CLC       NUMTRY,MAXTRY       CAN WE DO IT?\n         BL        OK4                 YES\n         MVI       STATE,C'A'          ELSE ABORT\n         B         SLOOP\nOK4      L         R3,NUMTRY\n         LA        R3,1(R3)            INCREMENT COUNTER\n         ST        R3,NUMTRY\n         MVI       STYPE,AD            PACKET TYPE = DATA\n         L         R15,=A(SPACK)\n         BALR      14,15               GO TO SPACK AND RETURN\n         CLI       STATE,C'A'\n         BE        ABORT\n         L         15,=A(RPACK)\n         BALR      14,15               SAME FOR RPACK\n         CLI       RTYPE,AE            ERROR PACKET?\n         BNE       Y4                  MAYBE AN ACK\n         MVI       ERRNUM,X'0A'        MICRO DIED\n         MVI       STATE,C'A'          SO WE DO TOO\n         B         SLOOP\nY4       CLI       RTYPE,AY            SEE IF GOT 'ACK'\n         BNE       N4                  SEE IF IT'S AN 'N'\n         CLC       N,NUM               DO WE HAVE THE CORRECT ACK?\n         BE        AOK4\n         MVI       ERRNUM,X'08'        MISSING A PACKET\n         B         SLOOP\nAOK4     XC        NUMTRY,NUMTRY       RESET COUNTER\n         L         R3,N\n         LA        R3,1(R3)            INCREMENT COUNTER\n         ST        R3,N\n         NC        N(4),=X'0000003F'   MASK TO GET MOD 64\n         L         15,=A(GTCHR)\n         BALR      14,15               DO GET-CHAR AND RETURN\n         B         SLOOP\nN4       CLI       RTYPE,AN\n         BNE       AB4\n         TM        FLAGS,FLG4          DID MICRO NAK OR I REJECTED?\n         BO        SLOOP               LEAVE ERR MSG AS IS IF I DID\n         MVI       ERRNUM,X'09'        MICRO NAK'ED\n         B         SLOOP\nAB4      MVI       STATE,C'A'\n         MVI       ERRNUM,X'07'        ILLEGAL PACKET TYPE\n         B         SLOOP\n**********************************************************************\n*        CREATE AND SEND EOF PACKET                                  *\n**********************************************************************\nSEOF     CLC       NUMTRY,MAXTRY       CAN WE DO IT?\n         BL        OK5                 BRANCH IF YES\n         MVI       STATE,C'A'          ABORT IF NO\n         B         SLOOP\nOK5      L         R3,NUMTRY\n         LA        R3,1(R3)            ADD ONE\n         ST        R3,NUMTRY           STORE INCREMENTED COUNTER\n         MVI       STYPE,AZ            PACKET TYPE = EOF\n         XC        LSDAT,LSDAT         LENGTH OF ZERO\n         L         R15,=A(SPACK)\n         BALR      14,15               SAVE * AND GO TO SPACK\n         CLI       STATE,C'A'\n         BE        ABORT\n         L         15,=A(RPACK)\n         BALR      14,15               SAME FOR RPACK\n         CLI       RTYPE,AE            ERROR PACKET?\n         BNE       Y5                  MAYBE AN ACK\n         MVI       ERRNUM,X'0A'        MICRO DIED\n         MVI       STATE,C'A'          SO WE DO TOO\n         B         SLOOP\nY5       CLI       RTYPE,AY            CHECK FOR 'ACK'\n         BNE       N5                  MAYBE WAS A 'NAK'\n         CLC       N,NUM               CORRECT ACK?\n         BE        AOK5\n         MVI       ERRNUM,X'08'        LOST A PACKET\n         B         SLOOP\nAOK5     L         R3,N\n         LA        R3,1(R3)            ADD ONE\n         ST        R3,N                STORE VALUE INCREMENTED BY 1\n         NC        N(4),=X'0000003F'   MASK TO GET MOD 64\n         MVI       STATE,C'F'          SET TO SEND FILE FOR NOW\n*\n*\n*  WE JUST PROCESS ONE FILE FOR NOW.\n*\nDIEOK    MVI       STATE,C'B'          BREAK CONNECTION\n         B         SLOOP\nN5       CLI       RTYPE,AN\n         BNE       AB5                 DIE IF NOT A NAK\n         TM        FLAGS,FLG4          DID MICRO NAK OR I REJECTED?\n         BO        SLOOP               LEAVE ERR MSG AS IS IF I DID\n         MVI       ERRNUM,X'09'        MICRO NAK'ED\n         B         SLOOP\nAB5      MVI       STATE,C'A'          ELSE, ABORT\n         MVI       ERRNUM,X'07'        UNRECOGNIZED PACKET TYPE\n         B         SLOOP\n**********************************************************************\n*        CREATE AND SEND BREAK PACKET                                *\n**********************************************************************\nSBREAK   CLC       NUMTRY,MAXTRY       OVER OUR LIMIT?\n         BL        OK6                 BRANCH IF NO\n         MVI       STATE,C'A'          ABORT IF YES\n         B         SLOOP\nOK6      L         R3,NUMTRY\n         LA        R3,1(R3)            ADD ONE\n         ST        R3,NUMTRY           INCREMEMTED TRIAL COUNTER\n         MVI       STYPE,AB            PACKET TYPE = BREAK\n         XC        LSDAT,LSDAT         LENGTH = ZERO\n         L         R15,=A(SPACK)\n         BALR      14,15               SAVE * AND GO TO SPACK\n         CLI       STATE,C'A'\n         BE        ABORT\n         L         15,=A(RPACK)\n         BALR      14,15               SAVE * AND GO TO RPACK\n         CLI       RTYPE,AE            ERROR PACKET?\n         BNE       Y6                  MAYBE AN ACK\n         MVI       ERRNUM,X'0A'        MICRO DIED\n         MVI       STATE,C'A'          THEN WE DO TOO\n         B         SLOOP\nY6       CLI       RTYPE,AY            CHECK FOR ACK\n         BNE       N6                  CHECK FOR 'N'\n         CLC       N,NUM               CORRECT ACK?\n         BE        AOK6\n         MVI       ERRNUM,X'08'        LOST A PACKET\n         B         SLOOP\nAOK6     MVI       STATE,C'C'          COMPLETED STATE\n         B         SLOOP\nN6       CLI       RTYPE,AN            CHECK FOR 'N'\n         BNE       AB6                 DIE IF NOT A NAK\n         TM        FLAGS,FLG4          DID MICRO NAK OR I REJECTED?\n         BO        SLOOP               LEAVE ERR MSG AS IS IF I DID\n         MVI       ERRNUM,X'09'        MICRO NAK'ED\n         B         SLOOP\nAB6      MVI       STATE,C'A'          ELSE,ABORT\n         MVI       ERRNUM,X'07'        UNRECOGNIZED PACKET TYPE\n         B         SLOOP\n**********************************************************************\n*        CREATE AND SEND ABORT PACKET                                *\n**********************************************************************\nABORT    DS        0H\n         TM        FLAGS,FLG1          DYING ON FILE-NOT-FOUND?\n         BO        NOERRP              IF SO, THEN NO ERROR PACKET\n         CLI       ERRNUM,X'0A'        DID THE MICRO DIE?\n         BE        NOERRP              NO ERROR PACKET IF SO\n         MVI       STYPE,AE            ERROR PACKET\n         MVC       LSDAT(4),=F'20'     ALL MSGS ARE THIS LONG\n         MVC       N(4),NUM            SYNCH PACKET NUMBERS\n         SR        R5,R5\n         IC        R5,ERRNUM           GET RIGHT MESSAGE NUMBER\n         M         R4,=F'20'           OFFSET := ERRNUM * 20\n         LA        R5,ERRTAB(R5)\n         MVC       SDAT(20),0(R5)      SPACK NEEDS THE DATA HERE\n         TR        SDAT(20),ETOA\n         L         R15,=A(SPACK)\n         BALR      R14,R15             SEND ERROR PACKET & DIE\nNOERRP   LA        R15,4               SET NON-ZERO RETCODE\n         B         SENDRET             PREPARE TO LEAVE\n**********************************************************************\n*        PROCESS COMPLETE                                            *\n**********************************************************************\nCOMPLETE SR        R15,R15             ZERO WILL BE RETCODE\nSENDRET  L         R13,4(R13)\n         L         R14,12(R13)\n         LM        R0,R12,20(R13)\n         BR        R14\n         EJECT\n**********************************************************************\n*                                                                    *\n*  ROUTINE TO GET A CHARACTER FROM INPUT BUFFER WILL READ DISK TO    *\n*        FILL THE BUFFER.                                            *\n*                                                                    *\n**********************************************************************\nGTCHR    DS        0H\n         TM        FLAGS,FLG3          SEE IF THERE'S STUFF IN BUF\n         BO        STUFF               ONES -> STUFF'S THERE\n*\n*  GO TO COMMON ROUTINE TO READ SOME BYTES\n*\n         LA        R15,READX       LOCATE READ ROUTINE\n         BALR      R15,R15         COME AND GO ON SAME REG\n*\n         LTR       R4,R1               PUT RESULT OF READ IN R4\n         BZ        OK8\n         CH        R4,=Y(ERCOD)        RETCODE OF 12 MEANS EOF\n         BNE       ERR1                TRY IT AGAIN\n         MVI       STATE,C'Z'          MAKE TO EOF STATE\n         BR        R14\nERR1     MVI       STATE,C'A'          ABORT ON FILE SYSTEM ERROR\n         MVI       ERRNUM,X'0C'        INVALID RECORD LENGTH\n         C         R4,=F'8'            WAS OUR GUESS RIGHT?\n         BER       R14                 IF YES, RETURN\n         MVI       ERRNUM,X'0D'        ELSE, GOT AN I/O ERROR\n         BR        R14\nOK8      LR        R5,R0               GET NUMBER OF BYTES READ IN\n         LR        R4,R5               SAVE ALSO IN R4\n         BCTR      R4,0                SUBTRACT 1 FOR EX COMMAND\n         EX        R4,TRANS            EBCDIC TO ASCII TRANSLATION\n         LA        R8,BUF              GET LOCATION OF BUFFER INPUT\n         LA        R9,BUF(R4)          LAST POSITION IN THAT BUFFER\nX4       CLI       0(R9),X'20'         IS THIS A BLANK?\n         BNE       X5                  NO, FOUND LAST CHAR OF LINE\n         BCTR      R9,0\n         CR        R9,R8\n         BNL       X4                  FIND LAST CHAR\n         SR        R5,R5               ALL BLANKS\n         B         FOO\nX5       SR        R9,R8\n         LR        R5,R9               LENGTH OF LINE\n         LA        R5,1(R5)            ADD ONE\nFOO      LA        R9,BUF(R5)          FIRST BLANK SPACE AFTER DATA\n         MVC       0(1,R9),=X'0D'      ADD ASCII CR\n         LA        R9,1(R9)            INCREMENT POINTER\n         MVC       0(1,R9),=X'0A'      AND ADD ASCII LF\n         LA        R5,2(R5)            TWO EXTRA BYTES OF DATA NOW\n         ST        R5,RECL             LRECL + 2 (FOR CRLF)\n         SR        R8,R8               ZERO OUT INDEX FOR BUF\nSTUFF    SR        R9,R9               SAME FOR INDEX FOR SDAT\n         SR        R10,R10             CHARACTER COUNTER\n         SR        R5,R5               WILL HOLD QUOCHAR\n         IC        R5,QUOCHAR\n         L         R8,SAVPL            WHERE WE LEFT OFF\n         C         R8,RECL             SEE IF ARE AT LIMIT\n         BNL       FULL2               LEAVE IF REACHED OR EXCEEDED\n         SR        R7,R7\nLOOP     IC        R7,BUF(R8)          PICK UP BYTE\n         CR        R7,R5               IS IT THE QUOTE CHARACTER?\n         BE        SPECIAL\n         C         R7,DEL              IS IT THE CHARDEL?\n         BE        SPECIAL\n         C         R7,SPACE            IS IT A CONTROL CHARACTER?\n         BL        SPECIAL\n         B         ADDIT\nSPECIAL  L         R4,SIZE             MUNGE VALUE WHILE IN R4\n         SR        R4,R10              FIND DIF BETWWEN THE TWO\n         C         R4,TWO              SEE IF HAVE AT LEAST 2 BYTES\n         BNL       ROOM                YES,CAN ADD\n         STC       R10,LSDAT+3         SET LSDAT TO VAL OF COUNTER\n         OI        FLAGS,FLG3          SET FLAG TO SHOW STUFF'S THERE\n         ST        R8,SAVPL            SAVE PLACE IN BUF\n         BR        14                  LEAVE THIS ROUTINE\nROOM     LA        R4,SDAT(R9)         WHERE IT'S GOING\n         MVC       0(1,R4),QUOCHAR     MOVE QUOTE CHAR THERE\n         LA        R9,1(R9)            INCREMENT SDAT COUNTER\n         LA        R10,1(R10)          INCREMENT CHARACTER COUNTER\n         CR        R7,R5               DON'T ADD \u00acO100 TO THIS\n         BE        ADDIT               IT'S ALREADY PRINTABLE\n         A         R7,O1H              ADD \u00acO100 TO CHAR\n         N         R7,=X'0000007F'     GET MOD \u00acO200\nADDIT    STC       R7,SDAT(R9)         ADD THE CHARACTER\n         LA        R9,1(R9)            INCREMENT SDAT COUNTER\n         LA        R8,1(R8)            INCREMENT BUF COUNTER\n         LA        R10,1(R10)          INCREMENT CHARACTER COUNTER\n         C         R8,RECL             SEE IF REACHED LIMIT\n         BNL       FULL2\n         C         R9,SIZE             SEE IF REACHED LIMIT\n         BNL       FULL\n         B         LOOP\nFULL     EQU       *\n         STC       R10,LSDAT+3         THIS ONE TOO\n         ST        R8,SAVPL            HERE TOO\n         OI        FLAGS,FLG3          TURN ON FLAG - STUFF IN BUF\n         BR        14\nFULL2    EQU       *\n         STC       R10,LSDAT+3         THIS ONE TOO\n         XC        SAVPL,SAVPL         RESET THIS\n         NI        FLAGS,X'FF'-FLG3    TURN OFF LEFTOVER DATA FLAG\n         BR        14\nSENDSAVE DS        18F\nTRANS    TR        BUF(0),ETOA         EBCDIC TO ASCII TRANSLATION\nTRNS     TR        SNDPKT(0),ATOE      BACK FROM ASCII TO EBCDIC\nPARSE    DC        32X'00'\n         DC        X'01'               STOP ON A SPACE\n         DC        223X'00'\nFIRST    MVC       SDAT(0),FILNAM      PICK UP THE FN\nSECOND   MVC       0(0,R7),FILNAM+8    PICK UP FT\n         LTORG\n         DROP      R11\n         DROP      R12                 DON'T NEED THEM ANYMORE\n         EJECT\n**********************************************************************\n*                                                                    *\n*        ROUTINE TO PROCESS SEND PACKET REQUEST                      *\n*   needs to send cx80 passthru controlk chars prior to sending      *\n**********************************************************************\nSPACK    DS        0H     CSECT\n         STM       R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         BALR      R12,0               ESTABLISH ADDRESSABILITY\n         USING     *,R12\n         LA        R14,SPSAVE          ADDRESS OF MY SAVE AREA\n         ST        R13,4(R14)          SAVE CALLER'S\n         ST        R14,8(R13)\n         LR        R13,R14\n* USE R11 AS BASE REGISTER FOR 'PARMS' GLOBAL DATA AREA\n         L         R11,=A(PARMS)\n         USING     PARMS,R11           ESTABLISH ADDRESSABILITY\n         SR        R9,R9\n         MVC       PHDR,SSOH           ADD SOH TO PACKET\n         CLC       LSDAT,SIZE          NEED DATA SIZE <= SPSIZ-5\n         BNH       FINE\n         MVI       ERRNUM,X'00'        DATA SIZE EXCEEDS MAX LIMIT\n         MVI       STATE,C'A'          ABORT ON THIS\n         B         SPRET\nFINE     L         R4,=F'35'           USE \u00aco43 TO OFFSET DATA\n         A         R4,LSDAT            ADD IT TO LSDAT\n         STC       R4,PLEN\n         AR        R9,R4               AND THEN ADD IT TO CHECKSUM\n         CLC       N,ZERO              CHECK IF N IS VALID\n         BNL       T1                  OK IF >= TO 0\n         MVI       ERRNUM,X'01'        ILLEGAL MESSAGE NUMBER\n         MVI       STATE,C'A'\n         B         SPRET\nT1       CLC       N,O1H               SEE IF IS <= OCTAL 100\n         BNH       T2\n         MVI       ERRNUM,X'01'        ILLEGAL MESSAGE NUMBER\n         MVI       STATE,C'A'\n         B         SPRET\nT2       L         R4,SPACE            OFFSET THIS VALUE TOO\n         A         R4,N                ADD IT TO N\n         ST        R4,TEMP\n         MVC       PNUM(1),TEMP+3\n         A         R9,TEMP             AND ADD TO CHECKSUM\n         CLI       STYPE,X'41'         ASCII 'A'\n         BL        T3                  CAN'T BE LESS THAN THIS\n         CLI       STYPE,X'5A'         ASCII 'Z'\n         BNH       T4                  CAN'T BE GREATER\nT3       MVI       ERRNUM,X'07'        ILLEGAL PACKET TYPE\n         MVI       STATE,C'A'          DIE ON THIS\n         B         SPRET\nT4       MVC       PTYPE(1),STYPE      ADD MESSAGE TYPE\n         SR        R2,R2               ZERO IT OUT\n         IC        R2,STYPE\n         AR        R9,R2               ADD TO CHECKSUM\n         L         R6,LSDAT            HOW MUCH DATA\n         LTR       R6,R6               TEST IT OUT\n         BZ        NODAT\n         SR        R5,R5               USE TO GET DATA\n         SR        R3,R3               USE TO HOLD DATA\nDATCHK   IC        R3,SDAT(R5)         PICK UP CHAR\n         AR        R9,R3               ADD TO CHECKSUM\n         LA        R5,1(R5)            BUMP POINTER\n         BCTR      R6,0\n         LTR       R6,R6               MORE DATA?\n         BNZ       DATCHK\nNODAT    L         R6,LSDAT            WILL NEED THIS LATER\n         LR        R7,R6               MUNGE WHILE IN R7\n         BCTR      R7,0                SUBTRACT 1 FOR EX FUNCTION\n         EX        R7,MOVE             MOVE THE DATA TO SNDPKT\n         ST        R9,TEMP             WE'LL NEED THIS SOON\n         N         R9,=X'000000C0'     GET MOD 192\n         M         R8,ONE              CARRY OVER THE SIGN BIT\n         D         R8,O1H              GET MOD 64\n         A         R9,TEMP             ADD THE TWO VALUES\n         N         R9,=X'0000003F'     GET MOD 64 OF CHECKSUM\n         A         R9,SPACE            ADD OFFSET\n         STC       R9,PDATA(R6)        ADD CHECKSUM AFTER DATA\n         LA        R6,1(R6)            MOVE POINTER\n         IC        R9,SEOL             ADD SEND END OF PACKET CHAR\n         STC       R9,PDATA(R6)\n         LA        R6,5(R6)            VALUE OF LSDAT+5\n         TR        SNDPKT(130),HIBITON    SET MARK PARITY FOR CX80\n         TM        DEBUG+(DCBOFLGS-IHADCB),DCBOFOPN  IS IT OPEN?\n         BZ        SPNODEB\n         MVC       WRKBUFF(2),=H'20'\n         XC        WRKBUFF+2(2),WRKBUFF+2\n         MVC       WRKBUFF+4(16),=CL16'TPUT SEND PACKET'\n         PUT       DEBUG,WRKBUFF\n         LA        R1,4(,R6)           ADJUST LENGTH\n         STH       R1,WRKBUFF          SET RDW\n         EX        R6,DBGMVC1          MOVE IN DATA\n         PUT       DEBUG,WRKBUFF\n*PNODEB  TPUT      SNDPKT,(R6),CONTROL USES FULLSCR FOR CX80\n*PNODEB  TPUT      SNDPKT,(R6),FULLSCR\nSPNODEB  A         R6,4                                                 0000000\n         TPUT      CX80WCC,(R6),FULLSCR                                 0000000\nPSTHRU   TPUT      PASTHRU,4,FULLSCR   PUT CX80 IN PTHRU MODE AGAIN     0000000\n         LTR       R15,R15             WAS THERE ANY ERROR?\n         BZ        SPRET               NO, THEN JUST RETURN\n         MVI       ERRNUM,10           SET MICRO DIED\n         MVI       STATE,C'A'          ABORT ON THIS\nSPRET    L         R13,4(R13)\n         L         R14,12(R13)\n         LM        R0,R12,20(R13)\n         BR        14\nSPSAVE   DS        18F\nMOVE     MVC       PDATA(0),SDAT\nDBGMVC1  MVC       WRKBUFF+4(*-*),SNDPKT\n         LTORG\n         DROP      R11\n         DROP      R12                 DON'T NEED THEM ANYMORE\n         EJECT\n**********************************************************************\n*                                                                    *\n*        ROUTINE TO PROCESS RECEIVE PACKET REQUEST                   *\n*                                                                    *\n**********************************************************************\nRPACK    DS        0H\n         STM       R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         BALR      R12,0               ESTABLISH ADDRESSABILITY\n         USING     *,R12\n         LA        R14,RPSAVE          ADDRESS OF MY SAVE AREA\n         ST        R13,4(R14)          SAVE CALLER'S\n         ST        R14,8(R13)\n         LR        R13,R14\n* USE R11 AS BASE REGISTER FOR 'PARMS' GLOBAL DATA AREA\n         L         R11,=A(PARMS)\n         USING     PARMS,R11           ESTABLISH ADDRESSABILITY\n***************************************************************         0000000\n*                                                                       0000000\n*    THIS SECTION OF CODE IS MODIFIED FOR THE CX80 PASSTHRU             0000000\n*    THE WCC FOR PASSTHRU IS SENT PRIOR AND POST ANY TGET               0000000\n*    OPERATIONS.  IF SOH IS DETECTED, NEED TGET AGAIN AND               0000000\n*    OFFSET FOR THE AIDBYTE.                                            0000000\n*                                                                       0000000\n*                                                                       0000000\n*                                                                       0000000\n*                                                                       0000000\n*        TPUT      PASTHRU,4,FULLSCR **CX80**                           0000000\nMORGET   TGET      RECPKT,130,ASIS\n*  GET   TGET      AIDBYTE,131,ASIS    **CX 80 AID BYTE HERE **\n         TPUT      PASTHRU,4,FULLSCR **CX80**                           0000000\n         CLC       RECPKT+1,X'81'                                       0000000\n         BNE       NOTHEX81                                             0000000\n         TGET      RECPKT,130,ASIS\n         TPUT      PASTHRU,4,FULLSCR **CX80**                           0000000\n         MVC       RECPKT,X'81'                                         0000000\n         NC        RECPKT(130),HBTOFF                                   0000000\n***************************************************************         0000000\nNOTHEX81 LTR       R15,R15             WAS THERE AN ERROR?\n         BZ        RPTSTDB             NO, THEN TEST FOR DEBUG\n         MVI       RTYPE,AE            SET AN ERROR\n         B         RPRET\nRPTSTDB  TM        DEBUG+(DCBOFLGS-IHADCB),DCBOFOPN  IS IT OPEN?\n         BZ        RDNODEB\n         LA        R8,4(,R1)       SAVE LENGTH\n         MVC       WRKBUFF(2),=H'19'\n         XC        WRKBUFF+2(2),WRKBUFF+2\n         MVC       WRKBUFF+4(15),=CL15'TGET REC PACKET'\n         PUT       DEBUG,WRKBUFF\n         STH       R8,WRKBUFF          SET RDW\n         EX        R8,DBGMVC2          MOVE IN DATA\n         PUT       DEBUG,WRKBUFF\n*DNODEB  TR        RECPKT(130),ETOA CX80- NO TRANSLATION NEEDED\nRDNODEB  NI        FLAGS,X'FF'-FLG4    ASSUME MICRO'LL NAK-NOT RPACK\n         SR        R8,R8               INDEX REG FOR RECPKT\n         SR        R5,R5               CHECKSUM REGISTER\nTRY      LA        R7,RECPKT(R8)       ADDRESS OF CHARACTER\n         CLC       RSOH,0(R7)          IS IT START OF HEADER\n         BE        READIN              YES; SO FAR, SO GOOD\n         LA        R8,1(R8)            TRY NEXT CHARACTER\n         C         R8,=F'130'          SEE IF EXCEED BUFFER\n         BL        TRY\n         MVI       ERRNUM,X'03'        NO \"SOH\" ERROR\n         B         BADP\nREADIN   SR        R9,R9               ZERO OUT INDEX REG FOR RDAT\n         LA        R8,1(R8)            INCREMENT COUNTER\n         LA        R7,RECPKT(R8)       PICK UP LOC OF CHAR COUNT\n         CLC       RSOH,0(R7)          IS IT START OF HEADER?\n         BE        READIN              START OVER\n         CLC       0(1,R7),DQUOTE      COUNT+' '+3 AND \u00acd35\n         BNL       CONT                CONTINUE IF >=\n         MVI       ERRNUM,X'04'        BAD LENGTH ATTRIBUTE\n         B         BADP\nCONT     IC        R5,0(R7)            START CHECKSUM\n         LR        R7,R5               MUNGE IN R7 TO GET LRDAT\n         S         R7,=F'35'           LENGTH OF DATA\n         STC       R7,LRDAT+3\n         LA        R8,1(R8)            INCREMENT\n         SR        R7,R7               ZERO IT OUT\n         IC        R7,RECPKT(R8)       PICK UP PACKET NUMBER\n         CLM       R7,B'0001',RSOH     IS IT START OF HEADER\n         BE        READIN\n         AR        R5,R7               ADD TO CHECKSUM\n         S         R7,SPACE            SUBTRACT THE ' '\n         STC       R7,NUM+3            NUM := RECEIVED PACKET NO.\n         LA        R8,1(R8)            INCREMENT COUNTER\n         IC        R7,RECPKT(R8)       PICK UP MESSAGE TYPE\n         CLM       R7,B'0001',RSOH     IS IT START OF HEADER?\n         BE        READIN\n         AR        R5,R7               ADD TO CHECKSUM\n         STC       R7,RTYPE            PUT INTO RTYPE\n         LA        R8,1(R8)            GO TO NEXT BYTE\n         L         R4,LRDAT            COUNTER TO GET ALL DATA\nLUP      C         R4,ZERO             SEE IF PICKED UP ALL DATA\n         BE        FIN\n         XC        TEMP,TEMP           ZERO IT OUT\n         LA        R7,RECPKT(R8)       NEXT LOCATION IN BUFFER\n         MVC       TEMP+3(1),0(R7)     PICK UP NEXT BYTE\n         CLC       RSOH,TEMP+3         IS IT START OF HEADER\n         BE        READIN\n         LA        R7,RDAT(R9)         WHERE THE DATA'S GOING\n         MVC       0(1,R7),TEMP+3      AND MOVE IT\n         A         R5,TEMP             ADD TO CHECKSUM\n         LA        R8,1(R8)            ADD ONE\n         LA        R9,1(R9)            ADD ONE\n         BCTR      R4,0                DECREMENT COUNTER\n         B         LUP\nFIN      SR        R7,R7               ZERO OUT REGISTER\n         IC        R7,RECPKT(R8)       GET CHECKSUM\n         CLM       R7,B'0001',RSOH     IS IT START OF HEADER\n         BE        READIN\n         ST        R5,TEMP             WE'LL NEED THIS SOON\n         N         R5,=X'000000C0'     GET MOD 192\n         M         R4,ONE              CARRY OVER THE SIGN BIT\n         D         R4,O1H              GET MOD 64\n         A         R5,TEMP             ADD THE TWO VALUES\n         N         R5,=X'0000003F'     GET MOD 64\n         A         R5,SPACE            ADD OFFSET\nNODEBG9  CR        R5,R7               COMPUTED VS RECEIVED CHECKSUM\n         BE        RPRET\n         TM        DEBUG+(DCBOFLGS-IHADCB),DCBOFOPN\n         BZ        NODEBG2             BYPASS IF NO DEBUG ON\n*                              LENGTH OF WRKBUFF FOR PUT                0000000\n         MVC       WRKBUFF(2),=H'18'\n         XC        WRKBUFF+2(2),WRKBUFF+2\n         MVC       WRKBUFF+4(14),=CL14'CHECKSUM ERROR'\n*  ADDED LINES FORCHECKSUM DISPLAY ON ERROR IN DEBUG FILE 6/27/85 KMG   0000000\n*        ST        R5,TEMP                                              0000000\n*        MVC       WRKBUFF+18(1),TEMP                                   0000000\n*        ST        R7,TEMP                                              0000000\n*        MVC       WRKBUFF+19(1),TEMP                                   0000000\n*        MVC       WRKBUFF+20(22),RECPKT                                0000000\n* --------------------- KMG                                             0000000\n         PUT       DEBUG,WRKBUFF\nNODEBG2  MVI       ERRNUM,X'05'        BAD CHECKSUM ERROR\nBADP     MVI       RTYPE,AN            RETURN A NAK\n         OI        FLAGS,FLG4          RPACK NAK'ED THE PACKET\nRPRET    L         R13,4(R13)\n         L         R14,12(R13)\n         LM        R0,R12,20(R13)\n         BR        14\nDBGMVC2  MVC       WRKBUFF+4(*-*),RECPKT\nRPSAVE   DS        18F\n         LTORG\n         DROP      R11\n         DROP      R12                 DON'T NEED THEM ANYMORE\n         EJECT\n**********************************************************************\n*                                                                    *\n*  DISK FILE READ ROUTE WITH DEBUGGING CODE                          *\n*  AT EXIT R1 CONTAINS 0 FOR SUCCESSFUL READ OR 12 FOR EOF           *\n*          R0 CONTAINS RECORD LENGTH OR ZERO FOR EOF                 *\n**********************************************************************\nREADX    DS        0H\n         USING     PARMS,R11           ESTABLISH ADDRESSABILITY\n         STM       R12,R15,READSAVE\n         BALR      R12,0\n         USING     *,R12\n         TM        KERIN+(DCBRECFM-IHADCB),DCBRECV  VARIABLE?\n         BO        RDVAR\n         GET       KERIN,BUF\n         B         RDTSTDB\nRDVAR    GET       KERIN,BUF-4\nRDTSTDB  TM        DEBUG+(DCBOFLGS-IHADCB),DCBOFOPN  IS IT OPEN?\n         BZ        RDNODBG\n         MVC       WRKBUFF(2),=H'12'\n         XC        WRKBUFF+2(2),WRKBUFF+2\n         MVC       WRKBUFF+4(8),=CL8'QSAM GET'\n         PUT       DEBUG,WRKBUFF\n         LH        R1,KERIN+(DCBLRECL-IHADCB) GET LRECL\n         STH       R1,WRKBUFF      SAVE IN DEBUG BUFF\n         EX        R1,DBGMVC3\n         PUT       DEBUG,WRKBUFF\nRDNODBG  XR        R1,R1               SET RETURN CODE =0\n         LH        R0,KERIN+(DCBLRECL-IHADCB)  GET RECORD LENGTH\n         TM        KERIN+(DCBRECFM-IHADCB),DCBRECV  VARIABLE?\n         BZ        *+12                NO, THEN SKIP\n         LH        R0,BUF-4            GET LENGTH FROM RDW\n         SH        R0,=H'4'            REMOVE RDW LENGTH\n         LM        R12,R15,READSAVE\n         BR        R15\nDBGMVC3  MVC       WRKBUFF+4(*-*),KERIN\n*\nINEOF    DS        0H\n         LA        R1,ERCOD        SET RC=12\n         XR        R0,R0           SET LENGTH =  0\n         LM        R12,R15,READSAVE\n         BR        R15             RETURN\n         LTORG\n         DROP      R11\n         DROP      R12\n         EJECT\n**********************************************************************\n*                                                                    *\n*        ROUTINE TO PROCESS RECEIVE COMMAND                          *\n*                                                                    *\n**********************************************************************\nRECEIVE  DS        0H\n         STM       R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         BALR      R12,0               ESTABLISH ADDRESSABILITY\n         USING     *,R12\n         LA        R14,RECSAVE         ADDRESS OF MY SAVE AREA\n         ST        R13,4(R14)          SAVE CALLER'S\n         ST        R14,8(R13)\n         LR        R13,R14\n* USE R11 AS BASE REGISTER FOR THE GLOBAL DATA AREA, 'PARMS'\n         L         R11,=A(PARMS)\n         USING     PARMS,R11\n         SR        R6,R6               GET ZERO\n         ST        R6,NUMTRY           ZERO THIS OUT\n         ST        R6,N                HERE TOO\n         MVI       STATE,C'R'          SET TO RECEIVE STATE\n         TPUT      PASTHRU,17,FULLSCR  PUT CX80 IN PASSTHRU+MSG TO EFF  0000000\n**********************************************************************\n*        MAIN RECEIVE PROCESSING LOOP                                *\n**********************************************************************\nRLOOP    CLI       STATE,C'D'          RECEIVE DATA STATE\n         BE        RDATA\n         CLI       STATE,C'F'          RECEIVE FILE STATE\n         BE        RFILE\n         CLI       STATE,C'R'          RECEIVE INIT STATE\n         BE        RINIT\n         CLI       STATE,C'C'          COMPLETE STATE\n         BE        RCOMP\n         CLI       STATE,C'A'          ABORT STATE\n         BE        RABORT\n         MVI       ERRNUM,X'02'        UNRECOGNIZED STATE\n         B         RABORT              ELSE, DIE\n**********************************************************************\n*        PROCESS INITIALIZATION PACKET                               *\n**********************************************************************\nRINIT    CLC       NUMTRY,IMXTRY       SEE IF CAN RECEIVE\n         BL        ROK1                YES, WE CAN\n         MVI       STATE,C'A'          NOPE, GO INTO ABORT STATE\n         B         RLOOP\nROK1     L         R3,NUMTRY\n         LA        R3,1(R3)            INCREMENT TRIAL COUNTER\n         ST        R3,NUMTRY\n         XC        RSAVPL,RSAVPL       CLEAR BUFFER OUT *KMG PRC*       0000000\n         L         R4,DSSIZ            DEFAULT SEND PACKET SIZE\n         S         R4,FIVE             USE DEFAULT TO SET \"SIZE\"\n         ST        R4,SIZE             IN CASE WE DIE BEFORE IT'S SET\n         L         R15,=A(RPACK)       GET INIT INFORMATION\n         BALR      R14,R15\n         CLI       RTYPE,AE            ERROR PACKET?\n         BNE       RY1                 ALL OK\n         MVI       ERRNUM,X'0A'        MICRO DIED\n         MVI       STATE,C'A'          SO WE DO TOO\n         B         RLOOP\nRY1      CLI       RTYPE,AS            IS IT A SEND-INIT PACKET\n         BNE       RN1                 MAYBE IT GOT CLOBBERED\n         SR        R4,R4               ZERO OUT REGISTER\n         IC        R4,RDAT             GET FIRST CHARACTER\n         S         R4,SPACE            SUBTRACT THE ' '\n         C         R4,=F'26'           MIN SPACK SIZE\n         BNL       RCH1                SO FAR, SO GOOD\n         MVI       STATE,C'A'          ELSE, ABORT\n         MVI       ERRNUM,X'00'        INVALID DATA-PACKET-SIZE ERROR\n         B         RLOOP\nRCH1     C         R4,MAXPACK          MAX PACKET SIZE\n         BNH       RCH2\n         MVI       STATE,C'A'          ABORT IF SIZE IS ILLEGAL\n         MVI       ERRNUM,X'00'        BAD SEND DATA LENGTH\n         B         RLOOP\nRCH2     STC       R4,SPSIZ+3          USE THE VALUE AS SEND SIZE\n         S         R4,FIVE\n         ST        R4,SIZE             SET IT TO SPSIZ-5\n         CLC       LRDAT(4),=F'4'      USING ALL DEFAULTS ?\n         BNH       NOCH                YUP\n         LA        R5,RDAT             POINT TO THE BUFFER\n         SR        R7,R7\n         IC        R7,4(R5)            SEOL THE MICRO WANTS\n         S         R7,SPACE            UNCHAR (SUBTRACT ' ')\n         STC       R7,SEOL\n         CLC       LRDAT(4),FIVE       ANY MORE DATA?\n         BNH       NOCH                JUST USE DEFAULTS\n         MVC       RQUO(1),5(R5)       SET NEW QUOCHAR VALUE\nNOCH     MVC       N(4),NUM            SYNCH PACKET NUMBERS\n         MVI       STYPE,AY            SET MESSAGE TYPE TO ACK\n         MVC       LSDAT(4),=F'6'     SET LENGTH OF DATA SENDING\n         L         R5,SPACE            MAKE CHARACTER PRINTABLE\n         A         R5,RPSIZ            ADD REC PACKET SIZE\n         STC       R5,SDAT             ADD SIZE INFO TO BUFFER\n         L         R5,SPACE\n         A         R5,=F'8'            8 FOR TIMEOUT\n         STC       R5,SDAT+1\n         L         R5,SPACE            SEND ZERO + \" \" FOR NPAD\n         STC       R5,SDAT+2           WE'RE THE SLOW GUYS\n         SR        R5,R5               PAD WITH NULLS\n         L         R3,O1H\n         XR        R5,R3               CTL FUNCTION (XOR WITH 64)\n         STC       R5,SDAT+3           DON'T NEED PADCHAR EITHER\n         SR        R5,R5               ZERO IT OUT FOR NEXT TWO GUYS\n         IC        R5,REOL             EOL CHAR I NEED\n         A         R5,SPACE            MAKE PRINTABLE\n         STC       R5,SDAT+4\n         IC        R5,QUOCHAR          MY QUOTE CHAR\n         STC       R5,SDAT+5\n         L         R15,=A(SPACK)       ADDRESS OF SPACK\n         BALR      R14,R15             SAVE * AND GO TO SPACK\n         CLI       STATE,C'A'\n         BE        RABORT\n         MVI       STATE,C'F'          SET TO RECEIVE FILE STATE\n         MVC       OLDTRY(4),NUMTRY    SAVE TRIAL COUNTER\n         XC        NUMTRY,NUMTRY       RESET COUNTER TO ZERO\n         L         R3,N\n         LA        R3,1(R3)            ADD ONE\n         ST        R3,N                STORE VALUE INCREMENTED BY 1\n         NC        N(4),=X'0000003F'   MASK TO GET MOD 64\n         B         RLOOP\nRN1      CLI       RTYPE,AN            MAYBE IT'S A NAK\n         BNE       RSELSE\n         MVI       STYPE,AN            SEND A NAK PACKET\n         XC        LSDAT,LSDAT         NO DATA\n         L         R15,=A(SPACK)\n         BALR      R14,R15\n         B         RLOOP\nRSELSE   MVI       STATE,C'A'          ELSE,ABORT\n         MVI       ERRNUM,X'07'        ILLEGAL PACKET TYPE\n         B         RLOOP\n**********************************************************************\n*        PROCESS FILE PACKET                                         *\n**********************************************************************\nRFILE    CLC       NUMTRY,MAXTRY       EXCEEDED NO. OF TRIALS ALLOWED\n         BL        ROK2                NOPE, STILL OK\n         MVI       STATE,C'A'          ABORT IF YES\n         B         RLOOP\nROK2     L         R3,NUMTRY\n         LA        R3,1(R3)            INCREMENT TRIAL COUNTER\n         ST        R3,NUMTRY\n         L         R15,=A(RPACK)       GET ADDRESS OF RPACK\n         BALR      R14,R15             GO THERE AND RETURN WHEN DONE\n         CLI       RTYPE,AE            ERROR PACKET?\n         BNE       RY2                 MAYBE AN ACK\n         MVI       ERRNUM,X'0A'        MICRO DIED\n         MVI       STATE,C'A'          SO WE DO TOO\n         B         RLOOP\nRY2      CLI       RTYPE,AS            STILL IN INIT STATE?\n         BNE       RNZ                 TRY FOR AN EOF\n         CLC       OLDTRY,MAXTRY       CAN WE TRY AGAIN?\n         BL        ROLD\n         MVI       STATE,C'A'          ELSE, ABORT\n         B         RLOOP\nROLD     L         R3,OLDTRY\n         LA        R3,1(R3)            INCREMENT COUNTER\n         ST        R3,OLDTRY\n         L         R3,N                GET PACKET NUMBER SENT\n         BCTR      R3,0                SUBTRACT ONE FROM IT\n         C         R3,NUM              NUM MUST EQUAL N-1\n         BE        RNUM\n         MVI       ERRNUM,X'08'        PREVIOUS PACKET MISSING\n         B         RNAK                SEND A NAK\nRNUM     MVI       STYPE,AY            ACK PACKET\n         ST        R3,N                MAKE SEND SEQ NO. = N-1\n         MVC       LSDAT(4),=F'6'     SET DATA LENGTH VARIABLE\n         L         R15,=A(SPACK)\n         BALR      R14,R15             GO TO SPACK AND RETURN\n         CLI       STATE,C'A'\n         BE        RABORT\n         L         R4,N\n         LA        R4,1(R4)            ADD ONE\n         ST        R4,N                RESTORE N TO PROPER VALUE\n         XC        NUMTRY,NUMTRY       RESET COUNTER TO ZERO\n         B         RLOOP\nRNZ      CLI       RTYPE,AZ\n         BNE       RNF                 MAYBE IT'S AN 'F'\n         CLC       OLDTRY,MAXTRY       CAN WE TRY AGAIN?\n         BL        ROLD2\n         MVI       STATE,C'A'          ELSE,ABORT\n         B         RLOOP\n         SPACE 1                                                        0000000\nROLD2    L         R3,OLDTRY\n         LA        R3,1(R3)            INCREMENT COUNTER\n         ST        R3,OLDTRY\n         L         R3,N                GET PACKET NUMBER SENT\n         BCTR      R3,0                SUBTRACT ONE FROM IT\n         C         R3,NUM              NUM MUST EQUAL N-1\n         BE        RNUM2\n         MVI       ERRNUM,X'08'        PREVIOUS PACKET MISSING\n         B         RNAK                SEND A NAK\nRNUM2    MVI       STYPE,AY            ACK PACKET\n         ST        R3,N                SEND SEQ := N-1\n         XC        LSDAT,LSDAT         NO DATA\n         L         R15,=A(SPACK)\n         BALR      R14,R15\n         CLI       STATE,C'A'\n         BE        RABORT\n         L         R4,N\n         LA        R4,1(R4)            ADD ONE\n         ST        R4,N                RESTORE N TO PROPER VALUE\n         XC        NUMTRY,NUMTRY       RESET COUNTER TO ZERO\n         B         RLOOP\nRNF      CLI       RTYPE,AF\n         BNE       RNB                 WELL, IT'S NOT A FNAME\n         CLC       NUM,N               THEY HAVE TO BE EQUAL\n         BE        RNUM3\n         MVI       ERRNUM,X'08'        PREVIOUS PACKET MISSING\n         B         RNAK                SEND A NAK\nRNUM3    MVI       STYPE,AY            ACK PACKET\n         XC        LSDAT,LSDAT         NO DATA\nOVER     L         R15,=A(SPACK)\n         BALR      R14,R15             SEND ACK\n         CLI       STATE,C'A'\n         BE        RABORT\n         MVC       OLDTRY(4),NUMTRY    KEEP NUMTRY FOR LATER\n         XC        NUMTRY,NUMTRY       RESET TO ZERO\n         L         R3,N\n         LA        R3,1(R3)            ADD ONE\n         ST        R3,N                INCREMENT COUNTER\n         NC        N(4),=X'0000003F'   MASK TO GET MOD 64\n         MVI       STATE,C'D'          DATA RECEIVE STATE\n         B         RLOOP\nRNB      CLI       RTYPE,AB            SEE IF IT'S A BREAK\n         BNE       RNN                 MAYBE GOT A NAK\n         CLC       NUM,N\n         BE        RNUM4\n         MVI       ERRNUM,X'08'        PREVIOUS PACKET MISSING\n         B         RNAK                SEND A NAK\nRNUM4    MVI       STYPE,AY            ACK PACKET\n         XC        LSDAT,LSDAT         NO DATA\n         L         R15,=A(SPACK)\n         BALR      R14,R15\n         CLI       STATE,C'A'\n         BE        RABORT\n         MVI       STATE,C'C'          COMPLETE STATE\n         B         RLOOP\nRNN      CLI       RTYPE,AN            SEE IF GOT A NAK\n         BNE       RNELSE\nRNAK     MVI       STYPE,AN            SEND A NAK PACKET\n         XC        LSDAT,LSDAT         NO DATA\n         L         R15,=A(SPACK)\n         BALR      R14,R15\n         B         RLOOP               DO NOTHING ON A NAK\nRNELSE   MVI       STATE,C'A'          ABORT OTHERWISE\n         MVI       ERRNUM,X'07'        ILLEGAL PACKET TYPE\n         B         RLOOP\n**********************************************************************\n*        RECEIVE DATA PACKETS                                        *\n**********************************************************************\nRDATA    CLC       NUMTRY,MAXTRY       HAVE WE EXCEEDED OUR LIMIT?\n         BL        ROK3\n         MVI       STATE,C'A'          ELSE, ABORT\n         B         RLOOP\nROK3     L         R4,NUMTRY\n         LA        R4,1(R4)            INCREMENT\n         ST        R4,NUMTRY           SAVE INCREMENTED COUNTER\n         L         R15,=A(RPACK)\n         BALR      R14,R15             CALL RPACK\n         CLI       RTYPE,AE            ERROR PACKET?\n         BNE       RY3                 MAYBE AN ACK\n         MVI       ERRNUM,X'0A'        MICRO DIED\n         MVI       STATE,C'A'          WE ABORT TOO\n         B         RLOOP\nRY3      CLI       RTYPE,AD            IS THIS A DATA PACKET?\n         BNE       RDF                 MAYBE IT'S AN FNAME PACKET\n         CLC       N,NUM               CHECK FOR RIGHT PACKET\n         BNE       DIF\n         L         R15,=A(PTCHR)\n         BALR      R14,R15             PUT CHARACTERS INTO FILE\n         LTR       R7,R7               CHECK FOR NO ERROR\n         BZ        OKWR                NO ERROR\n         MVI       STATE,C'A'          ABORT ON FILE SYSTEM ERROR\n         B         RLOOP\nOKWR     MVI       STYPE,AY            ACK PACKET\n         XC        LSDAT,LSDAT         NO DATA\n         L         R15,=A(SPACK)\n         BALR      R14,R15\n         CLI       STATE,C'A'\n         BE        RABORT\n         MVC       OLDTRY(4),NUMTRY    SAVE NUMTRY'S VALUE IN OLDTRY\n         XC        NUMTRY,NUMTRY       RESET NUMTRY\n         L         R3,N\n         LA        R3,1(R3)\n         ST        R3,N                INCREMENT COUNTER\n         NC        N(4),=X'0000003F'   MASK TO GET MOD 64\n         B         RLOOP\nDIF      CLC       OLDTRY,MAXTRY       CAN WE DO IT?\n         BL        DIFNUM\n         MVI       STATE,C'A'          AND ABORT\n         B         RLOOP\nDIFNUM   L         R4,OLDTRY\n         LA        R4,1(R4)\n         ST        R4,OLDTRY           INCREMENT THIS COUNTER\n         L         R4,N\n         BCTR      R4,0\n         C         R4,NUM              NUM MUST EQUAL N-1\n         BE        DIFOK\n         MVI       ERRNUM,X'08'        PREVIOUS PACKET MISSING\n         B         RDN1                SEND A NAK\nDIFOK    XC        NUMTRY,NUMTRY       RESET COUNTER TO ZERO\n         MVI       STYPE,AY            ACK PACKET\n         XC        LSDAT,LSDAT         NO DATA\n         ST        R4,N                SET N TO N-1 TO RESEND PACKET\n         L         R15,=A(SPACK)\n         BALR      R14,R15             SEND THE PACKET\n         CLI       STATE,C'A'\n         BE        RABORT\n         L         R4,N\n         LA        R4,1(R4)            ADD ONE\n         ST        R4,N                RESTORE N TO PROPER VALUE\n         B         RLOOP               AND RETURN\nRDF      CLI       RTYPE,AF            SENDING FILENAME AGAIN?\n         BNE       RDZ\n         CLC       OLDTRY,MAXTRY       CAN WE DO IT?\n         BL        FILOVER             TRYING IT AGAIN\n         MVI       STATE,C'A'          IF NO, ABORT\n         B         RLOOP\nFILOVER  L         R4,OLDTRY\n         LA        R4,1(R4)\n         ST        R4,OLDTRY           SAVE INCREMENTED VALUE\n         L         R4,N\n         BCTR      R4,0                NEED VALUE OF N-1\n         C         R4,NUM              N-1 MUST EQUAL NUM\n         BE        FILOK\n         MVI       ERRNUM,X'08'        PREVIOUS PACKET MISSING\n         B         RDN1                SEND A NAK\nFILOK    XC        NUMTRY,NUMTRY       RESET TO ZERO\n         XC        LSDAT,LSDAT         NO DATA\n         MVI       STYPE,AY            ACK PACKET AGAIN\n         ST        R4,N                SET N TO N-1 FOR NOW\nOVRWRT   L         R15,=A(SPACK)\n         BALR      R14,R15\n         CLI       STATE,C'A'\n         BE        RABORT\n         L         R4,N\n         LA        R4,1(R4)            ADD ONE\n         ST        R4,N                RESTORE N TO PROPER VALUE\n         B         RLOOP               AND RETURN\nRDZ      CLI       RTYPE,AZ            IS THIS AN EOF PACKET?\n         BNE       RDN\n         CLC       N,NUM               ARE THEY EQUAL\n         BE        RDOK\n         MVI       ERRNUM,X'08'        PREVIOUS PACKET MISSING\n         B         RDN1                SEND A NAK\n         SPACE 1                                                        0000000\nRDOK     MVI       STYPE,AY            ACK THE PACKET\n         XC        LSDAT,LSDAT         NO DATA\n         L         R15,=A(SPACK)\n         BALR      R14,R15\n         MVC       OLDTRY(4),NUMTRY    SAVE NUMTRY'S VALUE HERE\n         XC        NUMTRY,NUMTRY       AND RESET COUNTER\n         L         R3,N\n         LA        R3,1(R3)\n         ST        R3,N                STORE VALUE INCREMENTED BY 1\n         NC        N(4),=X'0000003F'   MASK TO GET MOD 64\n         MVI       STATE,C'F'          TRY FOR ANOTHER FILE\n         B         RLOOP\n         SPACE 1                                                        0000000\nRDN      CLI       RTYPE,AN            DO WE NEED TO SEND A NAK?\n         BNE       RDELSE\nRDN1     MVI       STYPE,AN            SEND A NAK\n         XC        LSDAT,LSDAT         NO DATA\n         L         R15,=A(SPACK)\n         BALR      R14,R15\n         B         RLOOP\nRDELSE   MVI       STATE,C'A'          UNRECOGNIZED PACKET - ABORT\n         MVI       ERRNUM,X'07'        ILLEGAL PACKET TYPE\n         B         RLOOP\nSAYNO    MVI       STYPE,AN            SEND A NAK PACKET\n         XC        LSDAT,LSDAT         NO DATA\n         MVI       ERRNUM,X'0B'        ILLEGAL FILENAME ERROR\n         L         R15,=A(SPACK)\n         BALR      R14,R15\n         B         RLOOP\n**********************************************************************\n*        RECEIVE ABORT PROCESS                                       *\n**********************************************************************\nRABORT   DS        0H\n         CLI       ERRNUM,X'0A'        DID THE MICRO DIE?\n         BE        RNOERRP             NO ERROR PACKET IF SO\n         MVI       STYPE,AE            ERROR PACKET\n         MVC       LSDAT(4),=F'20'     ALL MSGS ARE THIS LONG\n         MVC       N(4),NUM            SYNCH PACKET NUMBERS\n         SR        R5,R5\n         IC        R5,ERRNUM\n         M         R4,=F'20'           OFFSET := ERRNUM * 20\n         LA        R5,ERRTAB(R5)\n         MVC       SDAT(20),0(R5)      SPACK NEEDS THE DATA HERE\n         TR        SDAT(20),ETOA\n         L         R15,=A(SPACK)\n         BALR      R14,R15             SEND ERROR PACKET & DIE\nRNOERRP  LA        R15,4               SET A NON-ZERO RETCODE\n         B         RECRET              PREPARE TO LEAVE\n**********************************************************************\n*        RECEIVE COMPLETE PROCESS                                    *\n**********************************************************************\nRCOMP    SR        R15,R15             RETCODE OF ZERO\nRECRET   L         R13,4(R13)\n         L         R14,12(R13)\n         LM        R0,R12,20(R13)\n         BR        14\n         EJECT\n**********************************************************************\n*                                                                    *\n*  ROUTINE TO PUT A CHARACTER IN OUTPUT BUFFER AND DUMP WHEN FULL    *\n*                                                                    *\n**********************************************************************\nPTCHR    SR        R4,R4               USE TO HOLD QUOCHAR\n         SR        R6,R6               USE TO HOLD LRECL\n         SR        R8,R8               COUNTER WITHIN RDAT\n         L         R9,RSAVPL           COUNTER WITHIN RBUF\n         IC        R4,RQUO\n         IC        R6,LRECL\n         L         R5,LRDAT            COUNTER TO GET ALL DATA\nRLUP     SR        R7,R7               USE TO PICK UP CHAR\n         LTR       R5,R5               MORE DATA LEFT?\n         BNZ       MOR                 LEAVE IF ALL DONE\n         CLI       PREV,X'4D'          ARE WE IN MIDDLE OF LINE?\n         BER       R14                 LEAVE IF NOT\n         ST        R9,RSAVPL           SAVE OUR PLACE\n         SR        R7,R7               ZERO RETCODE\n         BR        R14\nMOR      BCTR      R5,0                DECREMENT CHAR COUNTER\n         IC        R7,RDAT(R8)         GET DATA FROM RDAT\n         CR        R7,R4               IS IT THE QUOTE CHARACTER?\n         BNE       REGULAR\n         BCTR      R5,0                DECREMENT CHAR COUNT\n         LA        R8,1(R8)            MOVE POINTER\n         IC        R7,RDAT(R8)         PICK UP SPECIAL CHAR\n         C         R7,=X'0000004D'     IS IT A CR? (CHAR(CR))\n         BNE       NOCR                WRITE OUT RECORD IF YES\n         MVI       PREV,X'4D'          JUST HAD A CR\n         LA        R8,1(R8)            IGNORE CONTROL CHAR\n         B         RFIN\nNOCR     C         R7,=X'0000004A'     HOW ABOUT A LF? (CHAR(LF))\n         BNE       NOLF                IF YES, WRITE OUT RECORD\n         LA        R8,1(R8)            IGNORE CONTROL CHAR\n         CLI       PREV,X'4D'          WAS LAST THING CR?\n         BNE       RFIN                NOPE, THEN KEEP ON\n         B         RLUP                IGNORE LF IF PREV=CR\nNOLF     CR        R7,R4               IS IT THE QUOCHAR\n         BE        REGULAR             DON'T CONVERT IF IT IS\n         A         R7,O1H              ADD \u00acO100\n         N         R7,=X'0000007F'     GET MOD \u00acO200\nREGULAR  STC       R7,RBUF(R9)         STORE CHAR IN RBUF\n         LA        R9,1(R9)            MOVE RBUF COUNTER\n         LA        R8,1(R8)            MOVE RDAT COUNTER\n         MVI       PREV,X'00'          BLANK OUT CR IF WAS THERE\n         C         R9,=F'255'          ONLY 256 CHARS ALLOWED\n         BNH       RLUP                AND CONTINUE\n         LR        R10,R9              USE MAX LENGTH OF 256\n         B         WRFIL               AND WRITE TO FILE\nRFIN     LTR       R10,R9              GET DATA SIZE\n         BZ        FUDGE               GOTTA FAKE A BLANK LINE\n         C         R7,=X'0000004D'     IS IT A CR?  (CHAR(CR))\n         BE        WRFIL\n         C         R7,=X'0000004A'     HOW ABOUT A LF? (CHAR(LF))\n         BE        WRFIL\n         ST        R10,RSAVPL          SAVE DATA RECEIVED SO FAR\n         SR        R7,R7               ZERO RETCODE\n         BR        14\nFUDGE    MVI       RBUF,X'20'          MAKE FIRST CHAR A SPACE\n         LA        R10,1(R10)          LENGTH OF ONE\nWRFIL    XC        RSAVPL,RSAVPL       RESET THE POINTER\n         TR        RBUF(256),ATOE      MAKE EBCDIC AGAIN\n         CLI       RFM,C'V'            IS IT VARIABLE FORMAT?\n         BE        VAR\n         CR        R10,R6\n         BH        PUR                 IGNORE DATA AFTER LRECL VALUE\n         CR        R10,R6              PAD OUT TO LRECL SIZE ?\n         BE        VAR                 NOPE, IT'S OK.\n         LR        R2,R6               GET LRECL SIZE\n         SR        R2,R10              PAD WITH THIS MANY SPACES\n         BCTR      R2,0                MINUS ONE FOR THE 'EX'\n         LA        R9,RBUF(R10)        START PADDING HERE\n         MVI       0(R9),C' '          PUT IN THE FIRST SPACE\n         LTR       R2,R2\n         BZ        PUR                 DON'T PAD IF SIZE DIF WAS ONE\n         BCTR      R2,0                SUBRTRACT SPACE WE JUST ADDED\n         EX        R2,PAD              PAD OUT BUFFER\nPUR      LR        R10,R6              LENGTH HAS TO BE THIS SIZE\nVAR      DS        0H                                             RJR\n         LA        R15,WRITEX\n         BALR      R15,R15\n         SR        R9,R9               START AT BEGINNING OF RBUF\n         B         RLUP                GET NEXT LINE IF OK\nRECSAVE  DS        18F\nPAD      MVC       1(0,R9),0(R9)       PAD OUT WITH SPACES\n         LTORG\n*\n         EJECT\n**********************************************************************\n*                                                                    *\n*  DISK FILE WRITE ROUTE WITH DEBUGGING CODE                         *\n*                                                                    *\n**********************************************************************\nWRITEX   DS        0H\n         USING     PARMS,R11\n         STM       R12,R15,WRITSAVE\n         BALR      R12,0\n         USING     *,R12\n         LA        R0,RBUF             POINT TO RBUF\n         TM        KEROUT+(DCBRECFM-IHADCB),DCBRECV VARIABLE?\n         BZ        WRITEX2             NO, THEN DON'T ADJUST\n         LA        R0,RBUF-4           POINT TO RDW\n         LR        R15,R10             GET THE LENGTH\n         AH        R15,=H'4'           INCLUDE LENGTH OF RDW\n         SR        R1,R1\n         STH       R1,RBUF-2           CLEAR RDW\n         IC        R1,LRECL            GET LRECL\n         CR        R15,R1              IS THE RECORD GT MAX LRECL?\n         BNH       *+6                 NO, THEN IT'S OK\n         LR        R15,R1              ELSE SET TO MAX\n         STH       R15,RBUF-4\nWRITEX2  DS        0H\n         PUT       KEROUT,(0)\n         TM        DEBUG+(DCBOFLGS-IHADCB),DCBOFOPN  IS IT OPEN?\n         BZ        WRNODBG\n         MVC       WRKBUFF(2),=H'12'\n         XC        WRKBUFF+2(2),WRKBUFF+2\n         MVC       WRKBUFF+4(8),=CL8'QSAM PUT'\n         PUT       DEBUG,WRKBUFF\n         EX        R10,DBGMVC4\n         LA        R1,4(,R10)\n         STH       R1,WRKBUFF\n         PUT       DEBUG,WRKBUFF\nWRNODBG  LM        R12,R15,WRITSAVE\n         BR        R15\nDBGMVC4  MVC       WRKBUFF+4(*-*),RBUF\n         DROP      R11\n         DROP      R12\n         LTORG\n         EJECT\n**********************************************************************\n*                                                                    *\n*        ROUTINE TO PARSE COMMANDS AND CREATE PARSE TABLE            *\n*                                                                    *\n**********************************************************************\nPARSER   STM       R14,R12,12(R13)     SAVE REGISTERS\n         LR        R12,R15             MOVE THE BASE REGISTER\n         USING     PARSER,R12          ##\n         L         R11,=A(PARMS)       GET ADDRESS OF WORKAREAS\n         USING     PARMS,R11\n         LR        R3,R0               R3 = TEXT LENGTH\n         BCTR      R1,0                R1 ==> BYTE BEFORE PARM\n         LA        R3,0(R1,R3)         R3 ==> END OF LINE\n         LA        R2,1                R2 = PARSING INCREMENT\n         LA        R5,PTRTBL           R5 ==> TARGET AREA\n         LA        R6,4                R6 = POINTER INCREMENT\n         STM       R5,R6,PARSELST      SAVE FOR PARSING\n         LA        R7,PTRTBL+PTRTBLL-4 R7 ==> END OF TARGET\n*\nSCNTOKEN BXH       R1,R2,SCNFINIS      SCAN FOR PARM START\n         CLI       0(R1),C' '          FOUND A BLANK?\n         BE        SCNTOKEN            YES, THEN KEEP LOOKING\n         ST        R1,0(,R5)           SAVE PTR TO OPERAND\n         BXH       R5,R6,SCNFINIS      BR ON END OF TARGET AREA\nSCNLASTC BXH       R1,R2,SCNFINIS      SCAN TO END OF OPERAND\n         CLI       0(R1),C' '          IS THIS BLANK AT END OF OPERAND\n         BNE       SCNLASTC            IF SO, MOVE TOKEN\n         LR        R9,R1               REMEMBER JUST AFTER OPERAND\n         B         SCNTOKEN            FIND START OF NEXT OPERAND\nSCNFINIS MVI       0(R9),C' '          MARK THE END OF OPERANDS\n         ST        R9,0(R5)            SAVE POINTER TO END\n         ST        R5,PARSELST+8       SAVE END TARGET\n         LM        R14,R12,12(R13)     RESTORE THE REGISTERS\n         BR        R14                 RETURN TO CALLER\n         LTORG\nHBTOFF  DC        X'7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F'           0000000\n        DC        X'7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F'           0000000\n        DC        X'7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F'           0000000\n        DC        X'7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F'           0000000\n        DC        X'7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F'           0000000\n        DC        X'7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F'           0000000\n        DC        X'7F7F7F7F7F7F7F7F7F7F'                               0000000\n         DROP      R11\n         DROP      R12                 DON'T NEED THEM ANYMORE\n         EJECT\nPARMS    DS        0H                  GLOBAL DATA LIST\n         USING PARMS,R11\n*** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **         0000000\n*** DO NOT SEPARATE THE FOLLOWING TWO LABELS  ** ** ** ** ** **         0000000\n*** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **         0000000\nCX80WCC  DC        X'27F1F770'         CX80-PASSTHRU WCC'S   **         0000000\nSNDPKT   DS        CL134               SEND THIS TO MICRO    **\n*** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **         0000000\n         ORG       SNDPKT\nPHDR     DS        X\nPLEN     DS        X\nPNUM     DS        X\nPTYPE    DS        X\nPDATA    DS        0C\n         ORG       ,\n*IDBYTE  DC        X'70'               DUMMY PLACE FOR CX80 BYTE        0000000\nRECPKT   DS        CL130               RECEIVE THIS FROM MICRO\nLSDAT    DS        F                   SEND PACKET SIZE\nLRDAT    DS        F                   RECEIVE PACKET SIZE\nFLAGS    DC        X'00'               USE TO TEST OUR FLAGS\nNAME     DC        18X'20'             NAME OF FILE(S) TO SEND\n         DS        0F\n         DS        0F\nINPUT    DS        CL130               INPUT BUFFER\n         DS        0F\n         DS        F                   RDW FOR VARIABLE RECORDS\nBUF      DS        CL260               DISK READ INTO HERE\n         DS        F                   RDW FOR VARIABLE RECORDS\nRBUF     DS        CL260               DISK WRITE FROM HERE\nN        DC        F'0'                SEND PACKET NUMBER\nNUM      DC        F'0'                RECEIVE PACKET NUMBER\nNUMTRY   DC        F'0'                TRIAL COUNTER FOR TRANSFERS\nOLDTRY   DS        F                   COUNTER FOR PREVIOUS PACKET\nSTORLOC  DS        F                   POINTER TO EXTRA STORAGE\n*MAXPACK  DC        F'94'               MAX PACKET SIZE\nPASTHRU  DC      17X'27F1F770C9CEA0D0C1D3D3D4C8D2D58D8A'                0000000\nMAXPACK  DC        F'80'               MAX PACKET SIZE\nRECL     DS        F                   RECORD LEN (IF RECFM = V)\n*RPSIZ    DC        F'94'               MAX RECEIVE PACKET SIZE\nRPSIZ    DC        F'80'               MAX/deflt RECEIVE PACKET SIZE\n*DSSIZ    DC        F'40'               DEFAULT MAX SEND PACKET SIZE\nDSSIZ    DC        F'80'               DEFAULT MAX SEND PACKET SIZE\nSPSIZ    DS        F                   SEND PACKET SIZE\nMAXTRY   DC        F'5'                NO. OF TIMES TO RETRY PACKET\nIMXTRY   DC        F'16'               NO. OF INITIAL TRIALS ALLOWED\nSIZE     DS        F                   MAX SIZE FOR SEND DATA\nDEL      DC        F'127'              OCTAL 177 (DELETE CHAR)\nZERO     DC        F'0'\nONE      DC        F'1'\nFIVE     DC        F'5'\nTWO      DC        F'2'\nSPACE    DC        F'32'               ASCII SPACE\nO1H      DC        F'64'               OCTAL 100\nO2H      DC        F'128'              OCTAL 200\nSAVPL    DC        F'0'                POINTER WITHIN BUF,INIT=0\nRSAVPL   DC        F'0'                POINTER IN 'PTCHR',INIT=0\nDQUOTE   DC        X'23'               DEFAULT QUOTE CHARACTER = #\nQUOCHAR  DS        X                   QOUTE CHAR WE'LL SEND\nRQUO     DS        X                   MICRO'S QUOTE CHAR\nTEMP     DS        F                   TEMPORARY SPACE\n         DS        0D\nPKVAR    DS        D                   USE FOR PICKING UP INTEGER\nSDAT     DS        CL130               TEMP PLACE FOR SEND DATA\nRDAT     DS        CL130               TEMP PLACE FOR RECEIVE DATA\nFILNAML  DS    H                   LENGTH OF FILENAME\nFILNAM   DS        CL18                SEND/REC FILENAME\nSTATE    DS        C                   OUR CURRENT STATE\nDEOL     DC        X'0D'               DEFAULT END OF PACKET (CR)\nREOL     DS        X                   EOL CHAR I NEED (CR)\nSEOL     DS        X                   EOL I'LL SEND\nDSOH     DC        X'01'               DEFAULT START OF HEADER (CTL A)\nRSOH     DS        X                   RECEIVE START OF HEADER\nSSOH     DS        X                   SEND START OF HEADER\n*DLRECL  DC        X'50'               DEFAULT LRECL SIZE OF 80\nDLRECL   DC        X'FF'               DEFAULT LRECL SIZE OF 255\nLRECL    DS        X                   LRECL PROGRAM WILL USE\n*DBLKSIZE DC       H'80'               DEFAULT BLKSIZE OF 80\nDBLKSIZE DC        H'255'              DEFAULT BLKSIZE OF 255\nBLKSIZE  DS        H                   BLKSIZE PROGRAM WILL USE\nDTRACK   DC        F'5'                DEFAULT SPACE ALLOCATION\nDRECFM   DC        C'F'                DEFAULT WITH FIXED RECFM\nRFM      DS        C                   RECFM PROGRAM WILL USE\nPREV     DS        C                   PREVIOUS CHAR REC (IN PTCHR)\nBLIP     DS        X                   SAVE USER'S BLIP CHAR\nLINSIZ   DS        F                   SAVE USER'S CONSOLE LINESIZE\nERRNUM   DS        X                   ERROR NUMBER,IN CASE WE DIE\nOLDERR   DS        X                   ERROR OF PREVIOUS EXECUTION\nSTYPE    DS        C                   TYPE OF PACKET SENT\nRTYPE    DS        C                   TYPE OF PACKET RECEIVED\n*\nREADSAVE DS        4F              REGISTER SAVEAREA\nWRITSAVE DS        4F              REGISTER SAVEAREA\nPARSELST DS        3F                  PTRS TO OPERAND STACK\nPTRTBL   DS        15F                 OPERAND STACK\nPTRTBLL  EQU       *-PTRTBL            LENGTH OF PTRTBL\nDBLWRK   DS        D\nIDSYS    DC        F'2'                MVS TSO\nDDNAME   DC        CL8' '              DDNAME TO ALLOCATE\nDSNAME   DC        CL80' '             DSNAME TO ALLOCATE\nDSNAMEX  DC        CL80' '             WRKBUFFER\nMEMBER   DC        CL8' '              MEMBER NAME FOR PDS ALLOC\nCMSXXX   DC        CL8' '              USED IN CMS ONLY\nCMSYYY   DC        CL8' '\nCMSZZZ   DC        CL2' '\nDISP1    DC        F'2'                DISP (0=NEW,1=OLD,2=SHR)\nDISP2    DC        F'3'                DISP (0=UNCAT,1=CAT,3=KEEP)\nINOUT    DC        F'2'                0=INPUT,1=OUTPUT,2=INOUT)\nRECFMX   DC        F'1'                1=FB,2=VBS\nBLKSIZEX DC        F'3600'             FOR NEW DATA SETS ONLY\nLRECLX   DC        F'80'               ....\nDEV      DC        CL8'SYSDA'          DEVICE\nTRACK    DC        F'20'               # TRACKS TO ALLOC FOR NEW DSETS\nDYNALCRC DC        F'0'                RETURN CODE FROM FUNCTION\nWRKBUFF  DS        CL280\nPREFIX   DC        CL8' '              USERS DSET PREFIX FROM UPT\nPCOUT    DC        CL20'=::C::::::CCD:B:E:::'                           0000000\nASCIIX   DC        CL1'H'                                               0000000\nPCIN     DC        CL20' '                                              0000000\nPREFIXL  DC        F'0'                PREFIX LENGTH-1\nDDELAY   DC        F'2000'             DEFAULT DELAY TIME\nDELAY    DS        F                   DELAY TIME\n*\n*  THIS IS THE DYNALC PARM LIST USED FOR BOTH ALLOCATION AND\n*  CREATION OF  DATA SETS.\n*\nDYNAPARM DS 0F\n DC A(IDSYS,DDNAME,DSNAME,MEMBER,CMSXXX,CMSYYY,CMSZZZ,DISP1,DISP2)\n DC A(INOUT,RECFMX,BLKSIZEX,LRECLX,DEV,TRACK)\n DC X'80',AL3(DYNALCRC)\n*\n* TABLE TO TRANSLATE TO UPPER CASE\n*\nUPPER    DC    256AL1(*-UPPER)\n         ORG   UPPER+X'81'\n         DC    C'ABCDEFGHI'\n         ORG   UPPER+X'91'\n         DC    C'JKLMNOPQR'\n         ORG   UPPER+X'A2'\n         DC    C'STUVWXYZ'\n         ORG\n* THIS IS THE TABLE TO SET SENDPACKS PARITY TO MARK FOR CX80\nHIBITON  DC        X'808182838485868788898A8B8C8D8E8F'\n         DC        X'909192939495969798999A9B9C9D9E9F'\n         DC        X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'\n         DC        X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC        X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC        X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC        X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC        X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'\n         DC        X'808182838485868788898A8B8C8D8E8F'\n         DC        X'909192939495969798999A9B9C9D9E9F'\n         DC        X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'\n         DC        X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC        X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC        X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC        X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC        X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'\n*THIS IS THE ORIGINAL EBCDIC TO ASCII CONVERSION TABLE\n*CHARACTERS NOT REPRESENTABLE IN ASCII ARE REPLACED BY A NULL\n*ETOA    DC        X'000102030009007F0000000B0C0D0E0F'\n*G       DC        X'1011121300000800181900001C1D1E1F'\n*        DC        X'10111213000D0800181900001C1D1E1F'\n*        DC        X'00000000000A171B0000000000050607'\n*        DC        X'0000160000000004000000001415001A'\n*        DC        X'20000000000000000000002E3C282B7C'\n*        DC        X'2600000000000000000021242A293B5E'\n*        DC        X'2D2F00000000000000007C2C255F3E3F'\n*        DC        X'000000000000000000603A2340273D22'\n*        DC        X'00616263646566676869007B00000000'\n*        DC        X'006A6B6C6D6E6F707172007D00000000'\n*        DC        X'007E737475767778797A0000005B0000'\n*        DC        X'000000000000000000000000005D0000'\n*        DC        X'7B414243444546474849000000000000'\n*        DC        X'7D4A4B4C4D4E4F505152000000000000'\n*        DC        X'5C00535455565758595A000000000000'\n*        DC        X'303132333435363738397C0000000000'\n* THIS IS THE PRC MODIFIED ASCII TO EBCDIC TABLE 6/28/85 9:00\n*                    0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F.                   0000000\nATOE     DC        X'00010203372D2E2F1605250B0C0D0E0F'\n         DC        X'101112133C3D322618193F271C1D1E1F'\n         DC        X'405A7F7B5B6C507D4D5D5C4E6B604B61'\n         DC        X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'\n         DC        X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'\n         DC        X'D7D8D9E2E3E4E5E6E7E8E9ADCFBDB06D'\n         DC        X'BF818283848586878889919293949596'\n         DC        X'979899A2A3A4A5A6A7A8A98B4F9B5F07'\n*THIS IS THE PRC MODIFIED EBCDIC TO ASCII CONVERSION TABLE 6/28/85 9:00\n*CHARACTERS NOT REPRESENTABLE IN ASCII ARE REPLACED BY A NULL\n*                    0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F.                   0000000\nETOA     DC        X'000102030009007F0000000B0C0D0E0F'\n         DC        X'10111213000D0800181900001C1D1E1F'\n         DC        X'00000000000A171B0000000000050607'\n         DC        X'0000160000000004000000001415001A'\n         DC        X'20000000000000000000002E3C282B7C'\n         DC        X'2600000000000000000021242A293B7E'\n         DC        X'2D2F00000000000000007C2C255F3E3F'\n         DC        X'000000000000000000603A2340273D22'\n         DC        X'00616263646566676869007B00000000'\n         DC        X'006A6B6C6D6E6F707172007D00000000'\n         DC        X'007E737475767778797A0000005B0000'\n         DC        X'5E0000000000000000000000005D0060'\n         DC        X'7B41424344454647484900000000005C'\n         DC        X'7D4A4B4C4D4E4F505152000000000000'\n         DC        X'5C00535455565758595A000000000000'\n         DC        X'303132333435363738397C0000000000'\n*\n* TABLE OF ERROR MESSAGES (IN CASE WE ABORT)\nERRTAB   DC        CL20'Bad send-packet size'    ERR MSG #0\n         DC        CL20'Bad message number'      ERR MSG #1\n         DC        CL20'Unrecognized state'      ERR MSG #2\n         DC        CL20'No SOH encountered'      ERR MSG #3\n         DC        CL20'Bad character count'     ERR MSG #4\n         DC        CL20'Bad checksum'            ERR MSG #5\n         DC        CL20'Disk is full'            ERR MSG #6\n         DC        CL20'Illegal packet type'     ERR MSG #7\n         DC        CL20'Lost a packet'           ERR MSG #8\n         DC        CL20'Micro sent a NAK'        ERR MSG #9\n         DC        CL20'Micro aborted'           ERR MSG #10\n         DC        CL20'Illegal file name'       ERR MSG #11\n         DC        CL20'Invalid lrecl'           ERR MSG #12\n         DC        CL20'Permanent I/O error'     ERR MSG #13\n         DC        CL20'Disk is read-only'       ERR MSG #14\n         DC        CL20'Recfm conflict'          ERR MSG #15\n         DC        CL20'Err allocating space'    ERR MSG #16\nDATASET CAMLST     NAME,DSNAME,,WRKBUFF\nKERIN DCB DDNAME=KERIN,DSORG=PS,MACRF=(GM),                            X\n               EODAD=INEOF\nKEROUT DCB DDNAME=KEROUT,DSORG=PS,MACRF=(PM),LRECL=80,BLKSIZE=84,      X\n               RECFM=VB\nDEBUG  DCB DDNAME=DEBUG,DSORG=PS,MACRF=(PM),LRECL=260,BLKSIZE=2048,    X\n               RECFM=VB\nMODDCBF DCB DDNAME=KEROUT,DSORG=PS,MACRF=(PM),LRECL=80,BLKSIZE=80,     X\n               RECFM=FB\nMODDCBFL EQU *-MODDCBF\nMODDCBV DCB DDNAME=KEROUT,DSORG=PS,MACRF=(PM),LRECL=80,BLKSIZE=84,     X\n               RECFM=VB\nMODDCBVL EQU *-MODDCBV\n         END KERMIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "KERMITT$": {"ttr": 16134, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06?\\x01\\x02\\x06? H\\x00 \\x00 \\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-04T00:00:00", "modifydate": "2002-03-04T20:48:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "SYZYGY1"}, "text": "//C7KERM  JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=SYZYGY1,\n//       MSGCLASS=A\n//ASMFCL PROC  CLASS=A,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='SYZYGY.PDS.DATA',\n//             LOAD='SYZYGY.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='LOAD,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD.(&MEM),DISP=SHR\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=KERMITT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "KILL": {"ttr": 16136, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x02\\x06?\\x01\\x02\\x06O 2\\x00\\xae\\x00\\xad\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2002-03-04T00:00:00", "modifydate": "2002-03-05T20:32:00", "lines": 174, "newlines": 173, "modlines": 0, "user": "SYZYGY1"}, "text": "         MACRO\n&LABEL   TPUTR &MSG,&LEN\n&LABEL   LA    R1,&MSG\n         LA    R0,&LEN\n         BAL   R14,TPUT\n         MEND\n         SPACE 3\n         PRINT NOGEN\n         CVT   DSECT=YES\n         IHAASVT\n         IHAASCB\n         IHAPSA\n         PRINT GEN\n         EJECT\n$KILL    CSECT\n         STM   14,12,12(13)\n         LR    10,15              SETUP BASE REGISTER\n         USING $KILL,10\n         ST    13,SAVE+4          BACKCHAIN\n         LR    12,13\n         LA    13,SAVE\n         ST    13,8(12)           FRONTCHAIN\n*\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n*\n         EJECT\n         TPUTR HEADER,L'HEADER\n         TPUTR SPACES,1\n         L     R3,CVTPTR\n         L     R3,CVTASVT-CVT(R3)\n         L     R4,ASVTMAXU-ASVT(R3)\n         LA    R5,ASVTENTY-ASVT(R3)\n         SLR   R9,R9\n         SPACE 3\nLOOP     DS    0H             SHOW ASID#S FOR ALL ACTIVE TASKS\n         LA    R9,1(R9)\n         L     R6,0(R5)\n         LTR   R6,R6\n         BM    ASIDINCR\n         CH    R9,ASCBASID-ASCB(R6)\n         BNE   MISMATCH\n         LM    R7,R8,ASCBJBNI-ASCB(R6)\n         LTR   R7,R7\n         BZ    *+10\n         MVC   TPUTJBN,0(R7)       INITIATED JOB NAME\n         LTR   R8,R8\n         BZ    *+10\n         MVC   TPUTSMLN,0(R8)      START/MOUNT/LOGON ID\n         CVD   R9,DBLWORD\n         UNPK  TPUTASID,DBLWORD\n         OI    TPUTASID+L'TPUTASID-1,X'F0'\n         TPUTR ASIDPRT,L'ASIDPRT\n         MVC   ASIDPRT,ASIDPRT-1\nASIDINCR DS    0H\n         LA    R5,4(R5)\n         BCT   R4,LOOP\n         SPACE 3\n         TPUTR SPACES,1\n         TCLEARQ INPUT\n         TPUTR REQ1MSG,L'REQ1MSG\n         TGET  ANSAREA,L'ANSAREA\n         LTR   R15,R15\n         BNZ   OUT\n         AH    R1,=H'-1'\n         BM    OUT\n         EX    R1,CHKASID\n         BNZ   OUT\n         EX    R1,PACKASID\n         UNPK  REQ2ASID,DBLWORD\n         OI    REQ2ASID+L'REQ2ASID-1,X'F0'\n         CVB   R2,DBLWORD\n         CH    R2,=H'2'       DONT LET USER KILL ASM OR MASTER A/S\n         BNH   OUT\n         C     R2,ASVTMAXU-ASVT(R3)\n         BH    OUT\n         LR    R5,R2          *** ASID TO KILL (MAYBE) ***\n         SLL   R2,2\n         L     R2,ASVTENTY-ASVT-4(R3,R2)\n         LTR   R2,R2          ADDRSPC ASSIGNED?\n         BNP   OUT\n         CH    R5,ASCBASID-ASCB(R2)\n         BNE   MISMATCH\n         LM    R1,R2,ASCBJBNI-ASCB(R2)\n         LTR   R1,R1\n         BZ    *+10\n         MVC   REQ2JBN,0(R1)\n         LTR   R2,R2\n         BZ    *+10\n         MVC   REQ2SMLN,0(R2)\n         TCLEARQ INPUT\n         TPUTR REQ2MSG,L'REQ2MSG\n         MVC   ANSAREA,ANSAREA-1\n         TGET  ANSAREA,L'ANSAREA\n         LTR   R15,R15\n         BNZ   OUT\n         CLC   ANSAREA,CONTANSR\n         BNE   OUT\n         SPACE 3\n         LA    R0,0\n         LA    R1,1\n         SVC   244\n         MODESET KEY=ZERO,MODE=SUP\n         ST    R13,R13SAVE\n         LA    R13,RTMSAVE\n         CALLRTM TYPE=MEMTERM,ASID=(R5),COMPCOD=(R5)\n         L     R13,R13SAVE\n         MODESET KEY=NZERO,MODE=PROB\n         LA    R1,0\n         SVC   244\n         TPUTR DONEMSG,L'DONEMSG\n         B     GOBACK\n         SPACE 3\nOUT      TPUTR ERRMSG,L'ERRMSG\n         SPACE 1\nGOBACK   L     13,SAVE+4\n         SR    R15,R15\n         L     14,12(13)\n         LM    0,12,20(13)\n         BR    14\n         SPACE 3\nTPUT     DS    0H\n         TPUT  (1),(0)\n         BR    R14\n         SPACE 3\nMISMATCH TPUTR MISMMSG,L'MISMMSG\n         B     GOBACK\n         EJECT\nPACKASID PACK  DBLWORD,ANSAREA(1)\nCHKASID  TRT   ANSAREA(1),NUMERIC\n         SPACE 2\nDBLWORD  DS    D\nNUMERIC  DC    256XL1'FF'\n         ORG   NUMERIC+C'0'\n         DC    10XL1'0'\n         ORG   NUMERIC+256-4-18*4\nR13SAVE  DS    F\nSAVE     DS    18F\nRTMSAVE  DS    18F\n         DC    CL1' '\nANSAREA  DC    CL12' '\nCONTANSR DC    CL(L'ANSAREA)'PEPPER'\nSPACES   DC    CL1' '\nASIDPRT  DC    C'00000                  '\nTPUTASID EQU   ASIDPRT,5\nTPUTJBN  EQU   ASIDPRT+6,8\nTPUTSMLN EQU   ASIDPRT+15,8\nREQ1MSG  DC    C'SPECIFY ASID# OF ADDRSPC TO BE TERMINATED'\nREQ2MSG  DC    C'VERIFY ASID XXXXX NAME ++++++++ ++++++++ FOR MEMTERM'\nREQ2ASID EQU   REQ2MSG+12,5\nREQ2JBN  EQU   REQ2MSG+23,8\nREQ2SMLN EQU   REQ2MSG+32,8\nHEADER   DC    C'ASID# JOBNAME  STCNAME'\nDONEMSG  DC    C'''$KILL'' PROCESSING COMPLETE'\nERRMSG   DC    C'''$KILL'' TERMINATED BEFORE INVOKING RTM'\n         LTORG\nMISMMSG  DC    C'''ASCBASID'' DOES NOT MATCH POSITION IN ''ASVT'''\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "KILL$": {"ttr": 16140, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06?\\x01\\x02\\x06? Q\\x00 \\x00 \\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-04T00:00:00", "modifydate": "2002-03-04T20:51:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "SYZYGY1"}, "text": "//C7BKILL JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=SYZYGY1,\n//       MSGCLASS=A,CLASS=A\n//ASMFCL PROC  CLASS=A,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='SYZYGY.PDS.DATA',\n//             LOAD='SYZYGY.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='LOAD,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD.(&MEM),DISP=SHR\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=KILL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOCATE": {"ttr": 16142, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06?\\x01\\x02\\x06?!\\x06\\x01@\\x01@\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-04T00:00:00", "modifydate": "2002-03-04T21:06:00", "lines": 320, "newlines": 320, "modlines": 0, "user": "SYZYGY1"}, "text": "*********************************************************************** 00049\n*                                                                     * 00050\n*  THIS PROGRAM IS A TSO COMMAND PROCESSOR THAT WILL LIST ON THE TER- * 00051\n*  MINAL TO WHICH VOLUME A DATA SET IS CATALOGED AND ON WHICH         * 00052\n*  ONLINE DIRECT ACCESS VOLUMES THE DATA SET CAN BE FOUND.            * 00053\n*                                                                     * 00054\n*           STOLEN AND MODIFIED BY BRIAN WESTERMAN 12/07/82           * 00055\n*                                                                     * 00056\n*********************************************************************** 00057\n         EJECT                                                          00058\n*********************************************************************** 00059\n*  INITIALIZE.                                                        * 00060\n*********************************************************************** 00061\nLOCDSN   CSECT                                                          00062\nSTART    EQU   *                                                        00063\n         STM   R14,R12,12(R13)         SAVE REGISTERS                   00064\n         LR    R12,R15                 LOAD BASE REGISTER               00065\n         USING START,R12                                                00066\n         LR    R2,R1                   SAVE CPPL PTR                    00067\n         LA    R0,DEND-DSTART          GET SIZE OF DSECT                00068\n         GETMAIN   R,LV=(R0)                                            00069\n         LR    R11,R1                  LOAD DSECT BASE REGISTER         00070\n         USING GOTTEN,R11                                               00071\n         ST    R13,SAVE+4              ESTABLISH SAVE                   00072\n         ST    R11,8(R13)                             AREA CHAINING     00073\n         LR    R13,R11                 PTR TO MY SAVE AREA INTO R13     00074\n         EJECT                                                          00075\n*********************************************************************** 00076\n*  SEARCH UCBS FOR DIRECT ACCESS DEVICES. BUILD A TABLE OF VOLUME     * 00077\n*  SERIAL NUMBERS OF ALL ONLINE NON-VIO DIRECT ACCESS DEVICES.        * 00078\n*********************************************************************** 00079\n         XC    VOLCNT,VOLCNT           ZERO VOLUME COUNT                00080\n         L     R4,16                   ADDRESS OF CVT INTO R4           00081\n         L     R5,40(R4)               UCB LOOKUP LIST FROM CVT         00082\nUCBSCAN  EQU   *                                                        00083\n         LH    R6,0(R5)                GET ADDRESS OF A UCB             00084\n         LTR   R6,R6                   TEST FOR VALID                   00085\n         BZ    UCBINC                  NOT UCB ADDRESS                  00086\n         BM    UCBEND                  END OF LIST                      00087\n         CLI   2(R6),X'FF'             CHECK FOR UCB ID                 00088\n         BNE   RETURN                  SOMETHING IS WRONG GET OUT       00089\n         TM    18(R6),X'20'            IS IT DIRECT ACCESS              00090\n         BNO   UCBINC                  NO                               00091\n         TM    0(R6),X'80'             IS IT VIRTUAL DEVICE             00092\n         BO    UCBINC                  YES-- DO NOT WANT VIRTUAL        00093\n         TM    3(R6),X'80'             IS IT ONLINE                     00094\n         BNO   UCBINC                  NO                               00095\n         LA    R7,DASDLIST             GET START OF TABLE               00096\n         LH    R8,VOLCNT               CURRENT VOLUME COUNT FOR LOOP    00097\n         LTR   R8,R8                   TEST VOLUME COUNT                00098\n         BZ    NEWVOL                  IF ZERO THIS IS FIRST VOLUME     00099\nVOLSRCH  EQU   *                       LOOP THRU VOLUMES ALREADY FOUND  00100\n         CLC   0(6,R7),28(R6)          TABLE ENTRY VS VOL IN UCB        00101\n         BE    UCBINC                  VOLUME ALREADY IN TABLE          00102\n         LA    R7,6(R7)                NEXT ENTRY IN TABLE              00103\n         BCT   R8,VOLSRCH              IF NOT ALL CHECK NEXT            00104\nNEWVOL   EQU   *                       NEW VOLUME FOUND                 00105\n         MVC   0(6,R7),28(R6)          MOVE VOL FROM UCB TO TABLE       00106\n         LH    R8,VOLCNT               GET VOLUME COUNT                 00107\n         LA    R8,1(R8)                ADD 1                            00108\n         STH   R8,VOLCNT               UPDATE                           00109\n         CH    R8,=H'256'              CHECK FOR TABLE LIMIT            00110\n         BE    UCBEND                  NO MORE ACCEPTED                 00111\nUCBINC   EQU   *                                                        00112\n         LA    R5,2(R5)                POINT TO NEXT UCB                00113\n         B     UCBSCAN                 GO LOOK AT IT                    00114\nUCBEND   EQU   *                                                        00115\n         EJECT                                                          00116\n*********************************************************************** 00117\n*  TEST FOR COMMAND OPERANDS.  RETURN IF THERE ARE NONE.  CALCULATE   * 00118\n*  THE ADDRESS AND LENGTH OF THE COMMAND OPERAND. CONVERT ANY LOWER   * 00119\n*  CASE LETTERS TO UPPER CASE AND INITIALIZE DSN WORK AREA.           * 00120\n*********************************************************************** 00121\n         L     R3,12(R2)               ECT PTR INTO R3                  00122\n         TM    28(R3),X'80'            ANY OPERANDS ?                   00123\n         BO    NOOPERS                 BRANCH NO                        00124\n         L     R3,0(R2)                CMD BUFFER PTR INTO R3           00125\n         LH    R4,0(R3)                BUFFER LENGTH INTO R4            00126\n         LA    R5,4                    SUBTRACT 4 TO ALLOW              00127\n         SR    R4,R5                            FOR LENGTH WORD         00128\n         SH    R4,2(R3)                SUBTRACT OFFSET TO ALLOW FOR CMD 00129\n         LA    R5,4(R3)                PTR TO CMD INTO R5               00130\n         AH    R5,2(R3)                PTR TO OPERAND INTO R5           00131\n         LR    R3,R5                   PTR TO OPERAND INTO R3           00132\n         LR    R5,R4                   SAVE DSN LENGTH IN R5            00133\n         BCTR  R5,0                    REDUCE BY 1 FOR EXECUTE INST     00134\n         EX    R5,LOWTOUP              CONVERT LOWER CASE TO UPPER      00135\n         LA    R5,44                   SET DSNLEN                       00136\n         STH   R5,DSNLEN                          TO 44                 00137\n         MVI   DSN,C' '                BLANK OUT                        00138\n         MVC   DSN+1(L43),DSN                    DSN AREA               00139\n         EJECT                                                          00140\n*********************************************************************** 00141\n*  CHECK TO SEE WHAT THE USER WANTS.  IF ALL HE WANTS IS A            * 00142\n*  PARTICULAR DATA SET, WRITE THE DSN ON THE TERMINAL AND GO CHECK    * 00143\n*  TO SEE IF LOGON ID NEEDS TO BE ADDED TO THE USER SUPPLIED DATA SET * 00144\n*  NAME.                                                              * 00145\n*********************************************************************** 00146\n         LR    R1,R3                   PTR TO DSN INTO R1               00147\n         LR    R0,R4                   DSN LENGTH INTO R0               00148\n         BAL   R10,TPUT                WRITE DSN TO TERMINAL            00149\n*********************************************************************** 00150\n*  CHECK TO SEE IF USER'S LOGON ID MUST BE APPENDED TO THE SUPPLIED   * 00151\n*  DSNAME AND DO SO IF IT IS NECESSARY.  MOVE THE FULLY QUALIFIED     * 00152\n*  DSNAME TO A CONTROL AREA IN PREPARATION FOR ISSUING THE LOCATE     * 00153\n*  MACRO.                                                             * 00154\n*********************************************************************** 00155\nCHEKQUOT LA    R6,44                   DSN AREA LENGTH INTO R6          00156\n         LA    R5,DSN                  PTR TO DSN AREA INTO R5          00157\n         CLI   0(R3),C''''             IS 1ST CHARACTER A QUOTE ?       00158\n         BE    SKIPQUOT                BRANCH YES                       00159\n         L     R7,8(R2)                PSCB PTR INTO R7                 00160\n         MVC   DSN(L7),0(R7)           MOVE USER ID TO DSN AREA         00161\nISITBLK  CLI   0(R5),C' '              IS THIS CHARACTER A BLANK ?      00162\n         BE    MOVEDOT                 BRANCH YES                       00163\n         LA    R5,1(R5)                BUMP OVER 1 CHARACTER            00164\n         BCT   R6,ISITBLK              REDUCE LENGTH BY 1 & LOOP        00165\nMOVEDOT  MVI   0(R5),C'.'              MOVE PERIOD AFTER USER ID        00166\n         LA    R5,1(R5)                BUMP OVER 1 CHARACTER            00167\n         BCT   R6,MOVEDSN              REDUCE LENGTH BY 1 & BRANCH      00168\nSKIPQUOT LA    R3,1(R3)                BUMP OVER 1 CHARACTER IN OPERAND 00169\n         BCTR  R4,0                    REDUCE OPERAND LENGTH BY 1       00170\nMOVEDSN  LTR   R4,R4                   IS THIS THE END OF THE OPERAND ? 00171\n         BZ    LOCATE                  BRANCH YES                       00172\n         CLI   0(R3),C''''             IS THIS CHARACTER A QUOTE ?      00173\n         BE    LOCATE                  BRANCH YES                       00174\n         MVC   0(L1,R5),0(R3)          MOVE 1 CHARACTER OF DSN OPERAND  00175\n         LA    R3,1(R3)                BUMP OVER 1 CHARACTER IN OPERAND 00176\n         LA    R5,1(R5)                BUMP OVER 1 CHARACTER IN DSN     00177\n         BCTR  R4,0                    REDUCE OPERAND LENGTH BY 1       00178\n         BCT   R6,MOVEDSN              REDUCE DSN LENGTH BY 1 AND LOOP  00179\n         EJECT                                                          00180\n*********************************************************************** 00181\n*  ISSUE THE LOCATE MACRO TO FIND THE VOLUME ON WHICH THE DATA SET    * 00182\n*  RESIDES.  IF THE DATA SET IS NOT CATALOGGED ISSUE AN INFORMATIVE   * 00183\n*  MESSAGE TO THE TERMINAL. IF THE DATA SET SPANS MORE THAN ONE     *   00184\n*  VOLUME ISSUE A MESSAGE INDICATING THAT THE DATA SET CANNOT BE PRO- * 00185\n*  CESSED AND RETURN.  IF LOCATE IS SUCCESSFUL CONTINUE PROCESSING.   * 00186\n*********************************************************************** 00187\nLOCATE   LA    R3,0                    ZERO R3                          00188\n         ST    R3,CAMLIST              ZERO WORD 1 OF CAMLIST           00189\n         MVI   CAMLIST,X'44'           INDICATE LOCATE OPTION           00190\n         ST    R3,CAMLIST+8            ZERO WORD 3 OF CAMLIST           00191\n         LA    R3,DSN                  DSN PTR INTO                     00192\n         ST    R3,CAMLIST+4                         WORD 2 OF CAMLIST   00193\n         LA    R3,SERAREA              SER PTR INTO                     00194\n         ST    R3,CAMLIST+12                        WORD 4 OF CAMLIST   00195\n         LOCATE  CAMLIST               FIND DSN IN CATALOG              00196\n         LTR   R15,R15                 LOCATE SUCCESSFUL ?              00197\n         BNZ   NOTCATLG                BRANCH NO                        00198\n         LA    R3,1                    DOES DATA SET SPAN MORE          00199\n         CH    R3,SERAREA                        THAN 1 VOLUME ?        00200\n         BNE   MORTHAN1                BRANCH YES                       00201\n         EJECT                                                          00202\n*********************************************************************** 00203\n*   ENTRY AT LOCATE2 PUTS OUT CATLOG MESSAGE.                         * 00204\n*   ENTRY AT SETLOOP OR DROP THRU SETS UP VOLUME LOOP FOR OBTAIN      * 00205\n*********************************************************************** 00206\nLOCATE2  EQU   *                                                        00207\n         LH    R0,MSG2                 SET MESSAGE LENGTH               00208\n         MVC   OUTLINE(28),MSG2+2      MOVE TO GOTTEN AREA              00209\n         MVC   OUTLINE+22(6),SERAREA+6    MOVE IN VOL SER               00210\n         LA    R1,OUTLINE              ADDRESS OF MESSAGE               00211\n         BAL   R10,TPUT                SEND CATLOGED MESSAGE            00212\nSETLOOP  EQU   *                                                        00213\n         LH    R0,MSG7                 SET MESSAGE LENGTH               00214\n         LA    R1,MSG7+2               ADDRESS OF MESSAGE               00215\n         BAL   R10,TPUT                SEND HEADER MESSAGE              00216\n         LH    R8,VOLCNT               SET UP LOOP CONTROL              00217\n         LA    R7,DASDLIST             POINT TO FIRST IN TABLE          00218\n         EJECT                                                          00219\n*********************************************************************** 00220\n*  OBTAIN THE FORMAT 1 DSCB FOR THE DATA SET.  IF THE OBTAIN IS NOT   * 00221\n*  SUCCESSFUL GO ON TO NEXT VOLUME ELSE DISPLAY VOLUME ON SCREEN      * 00222\n*********************************************************************** 00223\nOBTAIN1  LA    R3,0                    ZERO R3                          00224\n         ST    R3,CAMLIST              ZERO WORD 1 OF CAMLIST           00225\n         MVI   CAMLIST,X'C1'           INDICATE SEARCH OPTION OF OBTAIN 00226\n         LA    R3,DSN                  DSN PTR INTO                     00227\n         ST    R3,CAMLIST+4                         WORD 2 OF CAMLIST   00228\n*        LA    R3,SERAREA+6            SER PTR INTO                     00229\n         ST    R7,CAMLIST+8                         WORD 3 OF CAMLIST   00230\n         LA    R3,OBTAINWK             WORK PTR INTO                    00231\n         ST    R3,CAMLIST+12                         WORD 4 OF CAMLIST  00232\n         OBTAIN  CAMLIST               OBTAIN FORMAT 1 DSCB             00233\n         LTR   R15,R15                 OBTAIN SUCCESSFUL ?              00234\n         BNZ   LOOPCNTL                BRANCH NO                        00235\n         MVI   OUTLINE,X'40'           BLANK OUT MSG AREA               00236\n         MVC   OUTLINE+1(13),OUTLINE                                    00237\n         MVC   OUTLINE+4(6),0(R7)      PUT IN VOLSER                    00238\n         LA    R0,14                   LOAD LENGTH OF MESSAGE           00239\n         LA    R1,OUTLINE              ADDRESS OF MESSAGE               00240\n         BAL   R10,TPUT                SEND MESSAGE                     00241\nLOOPCNTL EQU   *                                                        00242\n         LA    R7,6(R7)                NEXT ENTRY IN TABLE              00243\n         BCT   R8,OBTAIN1              IF MORE VOLUMES GO BACK          00244\n         B     RETURN                  FINISHED                         00245\n         EJECT                                                          00246\n*********************************************************************** 00247\n*  RETURN TO THE SYSTEM AFTER FREEING WORK AREA                       * 00248\n*********************************************************************** 00249\nRETURN   EQU   *                                                        00250\n         LR    R1,R13                  PTR TO GOTTEN AREA INTO R1       00251\n         L     R13,SAVE+4              RESTORE R13                      00252\n         LA    R0,DEND-DSTART          GET SIZE OF DSECT                00253\n         FREEMAIN  R,LV=(R0),A=(R1)                                     00254\n         LM    R14,R12,12(R13)         RESTORE R14-R12                  00255\n         SR    R15,R15                 ZERO R15 FOR RETURN CODE         00256\n         BR    R14                     RETURN TO INVOKER                00257\n         EJECT                                                          00258\n*********************************************************************** 00259\n*  ROUTINE TO WRITE LINES TO THE TERMINAL.                            * 00260\n*********************************************************************** 00261\nTPUT     TPUT  (R1),(R0),R             WRITE MSG TO TERMINAL            00262\n         BR    R10                     RETURN TO INVOKER                00263\n         EJECT                                                          00264\n*********************************************************************** 00265\n*  ROUTINES TO ISSUE ERROR MESSAGES.                                  * 00266\n*********************************************************************** 00267\nNOTCATLG LH    R0,MSG1                 MSG LENGTH INTO R0               00268\n         LA    R1,MSG1+2               PTR TO MSG INTO R1               00269\n         BAL   R10,TPUT                WRITE MSG TO TERMINAL            00270\n         B     SETLOOP                 GO SEARCH VOLUMES                00271\nMORTHAN1 LH    R0,MSG3                 MSG LENGTH INTO R0               00272\n         LA    R1,MSG3+2               PTR TO MSG INTO R1               00273\n         BAL   R10,TPUT                WRITE MSG TO TERMINAL            00274\n         B     RETURN                  GO TO RETURN                     00275\nBADCATRD LH    R0,MSG4                 MSG LENGTH INTO R0               00276\n         LA    R1,MSG4+2               PTR TO MSG INTO R1               00277\n         BAL   R10,TPUT                WRITE MSG TO TERMINAL            00278\n         B     RETURN                  GO TO RETURN                     00279\nUNUSDIND LH    R0,MSG5                 MSG LENGTH INTO R0               00280\n         LA    R1,MSG5+2               PTR TO MSG INTO R1               00281\n         BAL   R10,TPUT                WRITE MSG TO TERMINAL            00282\n         B     RETURN                  GO TO RETURN                     00283\nNOOPERS  LH    R0,MSG6                 MSG LENGTH INTO R0               00284\n         LA    R1,MSG6+2               PTR TO MSG INTO R1               00285\n         BAL   R10,TPUT                WRITE MSG TO TERMINAL            00286\n         B     RETURN                  GO TO RETURN                     00287\n         EJECT                                                          00288\n*********************************************************************** 00289\n*  INSTRUCTION THAT WHEN EXECUTED WILL CONVERT LOWER CASE LETTERS TO  * 00290\n*  UPPER CASE.                                                        * 00291\n*********************************************************************** 00292\nLOWTOUP  OC    0(L0,R3),BLANKS         OBJECT OF EXECUTE INSTRUCTION    00293\n         EJECT                                                          00294\n*********************************************************************** 00295\n*  CONSTANTS.                                                         * 00296\n*********************************************************************** 00297\nMSG1     DC    H'29'                                                    00298\n         DC    CL29'DATA SET NOT FOUND IN CATALOG'                      00299\nMSG2     DC    H'28'                                                    00300\n         DC    CL28'DATA SET CATALOGED TO XXXXXX'                       00301\nMSG3     DC    H'53'                                                    00302\n         DC    CL53'DATA SET SPANS MORE THAN 1 VOLUME - UNABLE TO PROCE+00303\n               SS'                                                      00304\nMSG4     DC    H'21'                                                    00305\n         DC    CL21'ERROR IN CATALOG READ'                              00306\nMSG5     DC    H'12'                                                    00307\n         DC    CL12'UNUSED INDEX'                                       00308\nMSG6     DC    H'40'                                                    00309\n         DC    CL40'DATA SET NAME REQUIRED. PLEASE TRY AGAIN'           00310\nMSG7     DC    H'35'                                                    00311\n         DC    CL35'DATA SET FOUND ON FOLLOWING VOLUMES'                00312\nBLANKS   DC    CL80' '                                                  00313\n         EJECT                                                          00314\n*********************************************************************** 00315\n*  DSECT FOR GOTTEN STORAGE.                                          * 00316\n*********************************************************************** 00317\nGOTTEN   DSECT                                                          00318\nDSTART   EQU   *                                                        00319\nSAVE     DS    18F                                                      00320\nPARMWD1  DS    F                                                        00321\nPARMWD2  DS    F                                                        00322\n         DS    0H                                                       00323\nOUTLINE  DS    CL57                                                     00324\n         DS    0D                                                       00325\nSERAREA  DS    265C                                                     00326\n         ORG   *-249                                                    00327\nOBTAINWK DS    148C                                                     00328\nF3CCHHR  DS    CL5                                                      00329\nSERENDUP DS    96C                                                      00330\nDSNLEN   DS    H                                                        00331\nDSN      DS    CL44                                                     00332\nCAMLIST  DS    4F                                                       00333\nVOLCNT   DS    H                                                        00334\nDASDLIST DS    256CL6                                                   00335\nDEND     EQU   *                                                        00336\n         EJECT                                                          00337\n*********************************************************************** 00338\n*  EQUATES FOR LENGTH VALUES AND GENERAL REGISTERS.                   * 00339\n*********************************************************************** 00340\nL0       EQU   0                                                        00341\nL1       EQU   1                                                        00342\nL2       EQU   2                                                        00343\nL3       EQU   3                                                        00344\nL4       EQU   4                                                        00345\nL5       EQU   5                                                        00346\nL6       EQU   6                                                        00347\nL7       EQU   7                                                        00348\nL9       EQU   9                                                        00349\nL20      EQU   20                                                       00350\nL43      EQU   43                                                       00351\nR0       EQU   0                                                        00352\nR1       EQU   1                                                        00353\nR2       EQU   2                                                        00354\nR3       EQU   3                                                        00355\nR4       EQU   4                                                        00356\nR5       EQU   5                                                        00357\nR6       EQU   6                                                        00358\nR7       EQU   7                                                        00359\nR8       EQU   8                                                        00360\nR9       EQU   9                                                        00361\nR10      EQU   10                                                       00362\nR11      EQU   11                                                       00363\nR12      EQU   12                                                       00364\nR13      EQU   13                                                       00365\nR14      EQU   14                                                       00366\nR15      EQU   15                                                       00367\n         END                                                            00368\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOCATE$": {"ttr": 16390, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06?\\x01\\x02\\x06?!\\x06\\x00 \\x00 \\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-04T00:00:00", "modifydate": "2002-03-04T21:06:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "SYZYGY1"}, "text": "//C7BLOC  JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=SYZYGY1,\n//       MSGCLASS=A,CLASS=A\n//ASMFCL PROC  CLASS=O,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='SYZYGY.PDS.DATA',\n//             LOAD='SYZYGY.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='LOAD,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD.(&MEM),DISP=SHR\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=LOCATE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MEMBER": {"ttr": 16392, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06O\\x01\\x02\\x06O! \\x08,\\x08,\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-05T00:00:00", "modifydate": "2002-03-05T21:20:00", "lines": 2092, "newlines": 2092, "modlines": 0, "user": "SYZYGY1"}, "text": "         TITLE '   M E M B E R    '\n***********************************************************************\n*                                                                     *\n*        'MEMBER' TSO COMMAND                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\n*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.\n*        DATE WRITTEN. JANUARY 20 1977.\n*        DATE UPDATED. APRIL 10 1981.\n*        ATTRIBUTES. RE-ENTRANT.\n*        DESCRIPTION.\n*            THIS TSO COMMAND DISPLAYS THE INFORMATION RETURNED BY\n*            THE 'BLDL' MACRO. FOR LOAD MODULES, IT FORMATS THE\n*            INFORMATION CONTAINED IN THE USER DATA FIELD OF THE\n*            DIRECTORY ENTRY RETURNED BY THE 'BLDL' MACRO. FOR\n*            MEMBERS CREATED BY THE 'SPF' IBM PRODUCT, IT FORMATS\n*            THE SPF STATISTICS FROM THE USER DATA FIELD. FOR LOAD\n*            MODULES, IT CAN LIST ESD AND IDR INFORMATION.\n*\n*            THE SYNTAX IS\n*                MEMBER  'DSNAME(MEMBER)'  ESOTERIC DATA\n*                                          LIST  MAP  IDR\n*            OR\n*                MEMBER  MEMBER  SYS  ESOTERIC  WHERE\n*\n*            IF THE 'SYS' KEYWORD IS SPECIFIED, THE FIRST OPERAND\n*            IS ONLY A MEMBER NAME, AND THE SYSTEM LINK LIBRARIES\n*            ARE SEARCHED (AND STEPLIB IF THE SESSION HAS ONE).\n*\n*            THE 'WHERE' KEYWORD, VALID ONLY WITH 'SYS', CAUSES\n*            THE NUMBER OF THE SYSTEM LINK LIBRARY TO BE DISPLAYED.\n*\n*            THE 'ESOTERIC' KEYWORD CAUSES EXTRA INFORMATION THAT\n*            MOST USERS NEVER NEED TO KNOW TO BE DISPLAYED.\n*\n*            'LIST' 'MAP' 'IDR' AND 'CSECT' ARE NOT VALID WITH 'SYS'\n*            BECAUSE READING ESD AND IDR RECORDS REQUIRES A DCB\n*            AND THIS PROGRAM IS DOES NOT HAVE ACCESS TO THE\n*            SYSTEM LINKLIST DCB OR STEPLIB DCB.\n*\n*            THE 'LIST' KEYWORD CAUSES THE FIRST 48 BYTES OF THE\n*            LOAD MODULE TEXT TO BE DISPLAYED.  THIS IS USEFUL FOR\n*            MODULES ASSEMBLED WITH IDENTIFICATION INFORMATION\n*            NEAR THE TOP OF THE MODULE.\n*\n*            THE 'MAP' KEYWORD CAUSES 'CESD' (EXTERNAL SYMBOL\n*            DICTIONARY) INFORMATION IN THE MODULE TO BE DISPLAYED.\n*\n*            THE 'IDR' KEYWORD CAUSES 'IDR' (IDENTIFICATION RECORD)\n*            INFORMATION IN THE MODULE TO BE DISPLAYED. THERE ARE FOUR\n*            TYPES OF IDR'S - LINKEDIT, TRANSLATOR, ZAP, AND IDENTIFY.\n*            IF JUST 'IDR' IS SPECIFIED, ONLY LINKEDIT IS DISPLAYED.\n*            TO DISPLAY A TRANSLATOR, SPECIFY IDR(TRAN).\n*            TO DISPLAY A SECOND TRANSLATOR, SPECIFY IDR(PLS).\n*            TO DISPLAY ZAP RECORDS, SPECIFY IDR(ZAP).\n*            TO DISPLAY ZAP RECORD SPACE, SPECIFY IDR(SPACE).\n*            TO DISPLAY IDENTIFY RECORDS, SPECIFY IDR(ID).\n*            TO DISPLAY ALL OF THE ABOVE, EXCEPT SPACE,\n*               SPECIFY IDR(ALL) OR IDR(T Z I P).\n*\n*            THE CSECT('NAME') KEYWORD ALLOWS YOU TO RESTRICT THE\n*            MAP AND IDR DISPLAYS TO A SPECIFIC CSECT.\n*\n*            14SEP79 - GBLB ADDED FOR SVS/MVT VERSION.\n*                      SUBFIELD ADDED TO 'MAP' KEYWORD.\n*                      ESTAE REMOVED.\n*            18SEP79 - 'WHERE' KEYWORD ADDED.\n*            24OCT79 - MSG08 IMPROVED. MAPENTX LENGTHENED BY 1.\n*            10APR80 - TEST CVT+116 FOR MVS.\n*            09OCT80 - SPF STATISTICS DISPLAY ADDED.\n*            10OCT80 - FIRST OPERAND MAY NOW BE A LIST IN PARENS.\n*            19DEC80 - SPF SIZE FIELD 16 BITS, NOT 15.\n*            06JAN81 - SPF V.M IS BINARY, NOT DECIMAL.\n*            06JAN81 - SHOW SPF DATES AS MM/DD/YY INSTEAD OF JULIAN.\n*            27FEB81 - IDR DISPLAY ADDED. CSECT SELECTION ADDED.\n*            10APR81 - TEST OPT3I AT IDRIDENT. BUG FIXED (MAP(ALL)\n*                      BUG FIXED - WAS TESTING OPTION1 FOR OPT2A.\n         SPACE\n         GBLB  &MVS\n&MVS     SETB  ('&SYSPARM' NE 'OS')     1 = MVS   0 = OS/MVT\n         SPACE\nMEMBER   START\n         USING *,R12,R11\nORIGIN   B     @START-*(,15)\n         DC    AL1(8),CL11'MEMBER'\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL) SUBPOOL AND LENGTH\n@START   STM   14,12,12(13)\n         LR    R12,15\n         LA    R14,4095\n         LA    R11,1(R14,R12)      SECOND BASE REGISTER\n         LR    R2,R1\n         USING CPPL,R2\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         ST    13,4(,1)\n         ST    1,8(,13)\n         LR    13,1\n         LR    R9,R13\n         USING @DATA,R9\n         SPACE 1\n         MVI   CLEANUP,0\n         MVI   OPTION1,0\n         MVI   OPTION2,0\n         MVI   OPTION4,0\n         SR    R15,R15                                         *84027\n         STH   R15,RC\n         ST    R15,LINKAREA+4\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP IOPL FOR PUTLINE                           *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15                 IOPL\n         SPACE\n         AIF   (NOT &MVS).SKIP1\n         L     R15,16              LOAD CVT POINTER\n         TM    116(R15),X'13'      IS THIS MVS ?\n         BNO   PUTLOAD             BRANCH IF NOT MVS\n         TM    444(R15),X'80'      IS PUTLINE LOADED (VS2)\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,444(,R15)       YES - GET ADDRESS\n         B     PUTLODED            BRANCH AROUND LOAD\n.SKIP1   ANOP\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLODED ST    R15,MYPUTLEP        SAVE PUTLINE ADDRESS\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP PPL FOR PARSE                              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n*        L     R0,=A(MEMPCL)\n         LA    R0,PCLADDR\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         LA    R0,MYUWA\n         ST    R0,PPLUWA\n         DROP  R15                 PPL\n         SPACE 1\n************************************************************\n*                                                          *\n*        CALL THE PARSE SERVICE ROUTINE                    *\n*                                                          *\n************************************************************\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         AIF   (NOT &MVS).SKIP2\n         L     R15,16              CVTPTR\n         TM    116(R15),X'13'      IS THIS MVS ?\n         BNO   PARSELNK            BRANCH IF NOT MVS\n         TM    520(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,520(,R15)       CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK EQU   *\n.SKIP2   ANOP\n         LINK  EP=IKJPARS,SF=(E,LINKAREA)\nPARSEEXT EQU   *\n         SPACE 1\n         LTR   R15,R15\n         BZ    PARSEOK\n         LA    R1,MSG01\n         LA    R0,L'MSG01\n         BAL   R14,PUTMSG\n         LA    R15,12\n         CH    R15,RC                                          *84027\n         BNH   *+8                                             *84027\n         STH   R15,RC                                          *84027\n         B     EXIT\nPARSEOK  EQU   *\n         SPACE\n         L     R3,MYANS\n         USING IKJPARMD,R3\n         CLI   DATAKW+1,0\n         BE    *+8\n         OI    OPTION1,OPT1D       DATA\n         CLI   TESTKW+1,0\n         BE    *+8\n         OI    OPTION1,OPT1T       TEST\n         CLI   SYSTKW+1,0\n         BE    *+8\n         OI    OPTION1,OPT1S       SYSTEM\n         CLI   ESOKW+1,0\n         BE    *+8\n         OI    OPTION1,OPT1E       ESOTERIC\n         CLI   MAPKW+1,0           MAP\n         BE    *+8\n         OI    OPTION2,OPT2M\n         CLI   MAPSKW+1,1          MAP(ALL)\n         BNE   *+8\n         OI    OPTION2,OPT2A       MAP(ALL)\n         CLI   LISTKW+1,0\n         BE    *+8\n         OI    OPTION2,OPT2L       LIST\n         CLI   WHEREKW+1,0\n         BE    *+8\n         OI    OPTION1,OPT1W       WHERE\n         CLI   IDRKW+1,0\n         BE    NOIDRK\n         OI    OPTION2,OPT2I       IDR\n         CLI   IDRTRNKW+1,0\n         BE    *+8\n         OI    OPTION3,OPT3T       IDR(TRAN)\n         CLI   IDRPLSKW+1,0\n         BE    *+8\n         OI    OPTION3,OPT3T+OPT3P IDR(PLS)\n         CLI   IDRZAPKW+1,0\n         BE    *+8\n         OI    OPTION3,OPT3Z       IDR(ZAP)\n         CLI   IDRSPCKW+1,0\n         BE    *+8\n         OI    OPTION3,OPT3S       IDR(SPACE)\n         CLI   IDRIDEKW+1,0\n         BE    *+8\n         OI    OPTION3,OPT3I       IDR(IDENTIFY)\n         CLI   IDRALLKW+1,0\n         BE    *+8\n         OI    OPTION3,OPT3Z+OPT3T+OPT3P+OPT3I   IDR(ALL)\nNOIDRK   EQU   *\n         CLI   RETCODKW+1,0                                    *84027\n         BE    *+8                                             *84027\n         OI    OPTION4,OPT4R       RETRUN CODE ONLY            *84027\n         MVC   CNAME,=CL8' '\n         TM    CSECT+6,X'80'\n         BZ    NOCSECT\n         LA    R15,CSECT\n         L     R14,0(,R15)\n         LH    R1,4(,R15)\n         BCTR  R1,0\n         B     *+10\n         MVC   CNAME(0),0(R14)\n         EX    R1,*-6\nNOCSECT  EQU   *\n         SLR   R15,R15\n         ST    R15,KOUNT\n         SPACE\n************************************************************\n*                                                          *\n*        GET THE MEMBER NAME                               *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R8,DSN\n         B     DSNGO\nDSNLOOP  L     R8,24(,R8)\nDSNGO    ST    R8,DSNPTR\n         MVC   MEMBER8(8),=CL8' '\n         TM    14(R8),X'80'        MEMBER SPECIFIED?\n         BZ    NOMEMBER            NO - BRANCH\n         LH    R1,12(,R8)          GET LENGTH OF MEMBER\n         BCTR  R1,0                MINUS 1 FOR EX\n         L     R14,8(,R8)          GET ADDRESS OF MEMBER NAME\n         B     *+10\n         MVC   MEMBER8(0),0(R14)    MOVE MEMBER NAME\nSYSDSN   EX    R1,*-6\n         STH   R1,MEMBERL\n         B     OKMEMBER\nNOMEMBER EQU   *\n         TM    OPTION1,OPT1S       'SYSTEM' SPECIFIED?\n         BZ    NOMEMMSG            NO, BRANCH          14SEP79\n         LH    R1,4(,R8)           YES - LET DSN BE MEM IF NOT GT 8\n         CH    R1,=H'8'            IS IT TOO LONG?\n         BH    NOMEMMSG            YES - BRANCH\n         L     R14,0(,R8)          NO - POINT TO DSN\n         BCTR  R1,0\n         B     SYSDSN\nNOMEMMSG LA    R1,MSG07\n         LA    R0,L'MSG07\n         BAL   R14,PUTMSG\n         LA    R15,12\n         CH    R15,RC                                          *84027\n         BNH   *+8                                             *84027\n         STH   R15,RC                                          *84027\n         B     NEXTDSN\nOKMEMBER EQU   *\n         TM    OPTION1,OPT1S       'SYSTEM' SPECIFIED?\n         BZ    NOTSYS              NO - ALLOCATE THE DATASET\n         SLR   R4,R4               NULLIFY DCB POINTER FOR BLDL\n         B     SYSTEM1\nNOTSYS   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        QUALIFY THE DSNAME IF NECESSARY                   *\n*                                                          *\n************************************************************\n         SPACE\n         TM    6(R8),X'80'         IS DATASET NAME SPECIFIED?\n         BO    OKDSN               YES - BRANCH\n         LA    R1,MSG05            NO - JUST MEMBER NAME\n         LA    R0,L'MSG05\n         BAL   R14,PUTMSG\n         LA    R15,12\n         CH    R15,RC                                          *84027\n         BNH   *+8                                             *84027\n         STH   R15,RC                                          *84027\n         B     NEXTDSN\nOKDSN    EQU   *\n         MVI   DSNAME,C' '\n         MVC   DSNAME+1(45),DSNAME\n         LH    R1,4(,R8)           GET LENGTH\n         STH   R1,DSNAME\n         L     R14,0(,R8)          GET ADDRESS OF NAME\n         BCTR  R1,0\n         B     *+10\n         MVC   DSNAME+2(0),0(R14)\n         EX    R1,*-6\n         TM    6(R8),X'40'         IS IT QUOTED?\n         BO    DEFX                YES - SKIP DEFAULT SERVICE\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         LA    R14,MYDFPB\n         ST    R14,IOPLIOPB\n         USING DFPB,R14\n         XC    0(20,R14),0(R14)\n         LA    R0,DSNAME\n         ST    R0,DFPBDSN\n         OI    DFPBCODE,X'04'      SEARCH CAT AND PROMPT IF MULTI\n         MVC   DFPBPSCB,CPPLPSCB\n         MVI   DFPBCNTL,X'20'      PREFIX THE DSNAME\n         DROP  R14\n         SPACE\n         LA    R1,MYIOPL\n         SPACE\n         LR    R1,R15              POINT TO IOPL\n         AIF   (NOT &MVS).SKIP3\n         L     R15,16              CVTPTR\n         TM    116(R15),X'13'      IS THIS MVS ?\n         BNO   EHDEFLNK            BRANCH IF NOT MVS\n         TM    736(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   EHDEFLNK               THEN DO LINK, NOT CALL\n         L     R15,736(,R15)       CVTEHDEF\n         BALR  R14,R15             CALL IKJEHDEF\n         B     EHDEFEXT            SKIP AROUND LINK\nEHDEFLNK EQU   *\n.SKIP3   ANOP\n         LINK  EP=IKJEHDEF,SF=(E,LINKAREA)\nEHDEFEXT EQU   *\n         SPACE\n         B     DEFCODE(R15)\nDEFCODE  B     DEF00               SUCCESS\n         B     NEXTDSN              MSG ALREADY ISSUED\n         B     DEF08               INVALID NAME GT 44\n         B     NEXTDSN              MSG ALREADY ISUED\n         B     DEF16               NOT IN CATALOG\n         B     DEF20               NOT IN CATALOG\n         B     DEF24               IMPOSSIBLE\n         B     DEF28               COMMAND SYSTEM ERROR\n         B     DEF32               IMPOSSIBLE\n         B     DEF36               ?\nDEF08    EQU   *\nDEF16    EQU   *\n         B     DEF24\nDEF20    EQU   *\nLOCERR   EQU   *\n         MVC   MSGWK(L'MSG02),MSG02\n         LA    R15,MSGWK+L'MSG02\n         LA    R14,DSNAME\n         LH    R1,0(,R14)\n         BCTR  R1,0\n         B     *+10\n         MVC   MSGWK+L'MSG02(0),2(R14)\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         MVC   0(L'MSG02A,R15),MSG02A\n         LA    R0,L'MSG02+L'MSG02A+1(,R1)\n         LA    R1,MSGWK\n         BAL   R14,PUTMSG\n         LA    R15,12                                          *84027\n         CH    R15,RC                                          *84027\n         BNH   *+8                                             *84027\n         STH   R15,RC                                          *84027\n         B     NEXTDSN\nDEF24    EQU   *\nDEF28    EQU   *\nDEF32    EQU   *\nDEF36    EQU   *\n         LA    R1,MSG03\n         LA    R0,L'MSG03\n         BAL   R14,PUTMSG\n         LA    R15,12                                          *84027\n         CH    R15,RC                                          *84027\n         BNH   *+8                                             *84027\n         STH   R15,RC                                          *84027\n         B     NEXTDSN\n         SPACE\nDEF00    EQU   *\nDEFX     EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE DATASET                              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R1,MYDAPL\n         USING DAPL,R1\n         MVC   DAPLUPT(4),CPPLUPT\n         MVC   DAPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,DAPLECB\n         MVC   DAPLPSCB(4),CPPLPSCB\n         LA    R15,MYDAPB\n         ST    R15,DAPLDAPB\n         DROP  R1\n         USING DAPB08,R15\n         XC    0(84,R15),0(R15)\n         MVI   DA08CD+1,X'08'\n         LA    R0,DSNAME\n         ST    R0,DA08PDSN\n         MVC   DA08DDN(8),=CL8' '\n         MVC   DA08UNIT,=CL8' '\n         MVC   DA08SER,=CL8' '\n         MVC   DA08MNM,=CL8' '\n         MVC   DA08PSWD,=CL8' '\n         MVI   DA08DSP1,DA08SHR\n         MVI   DA08DPS2,DA08KEEP\n         MVI   DA08DPS3,DA08KEP\n         TM    22(R8),X'80'        PASSWORD SPECIFIED?\n         BZ    PASSX               NO - BRANCH\n         LH    R1,20(,R8)          GET LENGTH OF PSWD\n         BCTR  R1,0                MINUS 1 FOR EX\n         L     R14,16(,R8)         GET ADDRESS OF PSWD\n         B     *+10\n         MVC   DA08PSWD(0),0(R14)  MOVE PSWD\n         EX    R1,*-6\nPASSX    EQU   *\n         LA    R1,MYDAPL\n         SPACE\n         BAL   R14,CALLDAIR\n         LTR   R15,R15\n         BZ    OKDAIR\n         BAL   R14,DAIRFAIL\n         LA    R15,12\n         CH    R15,RC                                          *84027\n         BNH   *+8                                             *84027\n         STH   R15,RC                                          *84027\n         B     NEXTDSN\nOKDAIR   EQU   *\n         OI    CLEANUP,X'40'       TELL CLEANUP TO FREE IT\n         LA    R15,MYDAPB\n         MVC   DDSAVE,DA08DDN\n         TM    DA08DSO,X'02'       IS DSORG PARTITIONED?\n         BO    OKDSORGP            YES - BRANCH\n*\n*              DSORG IS NOT PO\n*              PS=X'40' ISAM=X'80' DA=X'20' VSAM=X'00' NONE=X'00'\n*\n         LA    R1,MSG06\n         LA    R0,L'MSG06\n         BAL   R14,PUTMSG\n         LA    R15,12\n         CH    R15,RC                                          *84027\n         BNH   *+8                                             *84027\n         STH   R15,RC                                          *84027\n         B     NEXTDSN\nOKDSORGP EQU   *\n         DROP  R15\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP THE DCB                                    *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   DCB(DCBLEN),DCBMODEL\n         LA    R4,DCB\n         USING IHADCB,R4\n         MVC   DCBDDNAM(8),DDSAVE\n         LA    R15,DYNEOD\n         IC    R0,DCBEODAD-1\n         ST    R15,DCBEODAD-1\n         STC   R0,DCBEODAD-1\n         LA    R15,DYNSYNAD\n         IC    R0,DCBSYNAD-1\n         ST    R15,DCBSYNAD-1\n         STC   R0,DCBSYNAD-1\n         MVC   OPEND(4),OPEN\n         SPACE\n         OPEN  ((R4),INPUT),MF=(E,OPEND)\n         SPACE\n         TM    DCBOFLGS,X'10'\n         BO    OKOPEN\n         LA    R1,MSG04\n         LA    R0,L'MSG04\n         BAL   R14,PUTMSG\n         LA    R15,12\n         CH    R15,RC                                          *84027\n         BNH   *+8                                             *84027\n         STH   R15,RC                                          *84027\n         B     NEXTDSN\nOKOPEN   EQU   *\n         OI    CLEANUP,X'80'       TELL CLEANUP TO CLOSE IT\n         SPACE\nSYSTEM1  EQU   *\n         MVI   SYNADSW,0           SET SYNAD SWITCH OFF\n         SPACE\n         LA    R15,BLDLW\n         XC    0(62,R15),0(R15)    CLEAR BLDL LIST\n         MVI   1(R15),1            NUMBER OF ENTRIES\n         MVI   3(R15),58           MAXIMUM LENGTH EXPECTED\n         MVC   4(8,R15),MEMBER8\n         LR    R0,R15              POINT R0 TO LIST\n         SPACE\n         BLDL  (R4),(0)\n         SPACE\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BE    OKIO                NO - BRANCH\nERRSYNAD LA    R1,SYNADMSG\n         LA    R0,78\n         BAL   R14,PUTMSG\n         LA    R15,12\n         CH    R15,RC                                          *84027\n         BNH   *+8                                             *84027\n         STH   R15,RC                                          *84027\n         B     NEXTDSN\nOKIO     EQU   *\n         LTR   R15,R15\n         BZ    OKBLDL\nNOTINSYS EQU   *\n         CH    R15,RC                                          *84027\n         BNH   *+8                                             *84027\n         STH   R15,RC                                          *84027\n         LA    R1,MSGWK\n         MVC   0(7,R1),MSG08\n         LA    R15,7(,R1)\n         MVC   0(8,R15),MEMBER8\n         AH    R15,MEMBERL\n         MVC   1(L'MSG08A,R15),MSG08A\n         LA    R15,L'MSG08A+1(,R15)\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTMSG\n         LA    R15,12\n         CH    R15,RC                                          *84027\n         BNH   *+8                                             *84027\n         STH   R15,RC                                          *84027\n         B     NEXTDSN\nOKBLDL   EQU   *\n         LA    R6,MSGWH\n         MVI   0(R6),C' '\n         MVC   1(L'MSGWH-1,R6),0(R6)\n         MVC   0(L'MSG09,R6),MSG09\n         LA    R6,L'MSG09(,R6)\n         LA    R5,L'MSG09\n         SPACE\n         LA    R1,BLDLW+4\n         LA    R15,BLDLX\n         LA    R0,60\n         BAL   R14,UNPACK          CONVERT TO HEX\n         SPACE\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(L'MSGWK-1),MSGWK\n         LA    R7,BLDLW+4\n         USING PDS,R7\n         LA    R8,BLDLX\n         MVC   MSGWK+2(8),PDSMEMBR\n         SPACE\n         MVC   MSGWK+11(6),(2*(PDSTTR-PDS))(R8)\n         SPACE\n         MVC   MSGWK+18(2),=C'NO'  SET ALIAS 'NO'\n         TM    PDSINDIC,X'80'      ALIAS?\n         BZ    *+10                NO - BRANCH\n         MVC   MSGWK+18(3),=C'YES' YES - MOVE YES\n         SPACE\n         MVI   MSGWK+24,C'0'       NO. OF TTR'S\n         TM    PDSINDIC,B'01100000'\n         BZ    FMT1\n         MVI   MSGWK+24,C'3'       NOT ZERO - TRY 3\n         BO    FMT1                BRANCH IF 3\n         MVI   MSGWK+24,C'1'       NOT 3 - TRY 1\n         TM    PDSINDIC,B'00100000'\n         BO    FMT1                BRANCH IF 1\n         MVI   MSGWK+24,C'2'       MUST BE 2\nFMT1     EQU   *\n         SPACE\n         SLR   R1,R1\n         IC    R1,PDSINDIC\n         STC   R1,BYTE\n         NI    BYTE,B'00011111'    ISOLATE LAST 5 BITS\n         IC    R1,BYTE\n         STH   R1,USERLEN\n         LA    R1,USERLEN+1\n         LA    R15,MSGWK+29\n         LA    R0,1\n         BAL   R14,UNPACK\n         SPACE\n         LH    R0,USERLEN\n         LTR   R0,R0               LENGTH ZERO?\n         BZ    NOTLINK             YES - BRANCH\n         CH    R0,=H'11'           LESS THAN 11 HALFWORDS?\n         BL    NOTLINK             YES - NOT CREATED BY LINK EDITOR\n*                                  COULD BE SPF-CREATED MEMBER\n*                                  (15 HALFWORDS), SO CHECK TTR BITS\n         TM    PDSINDIC,B'01100000' ANY TTR'S IN USER DATA AREA?\n         BZ    NOTLINK             NO, NOT CREATED BY LINKAGE EDITOR\n         SPACE\n         XC    LINKOFF(16),LINKOFF\n         LA    R15,33+2            SET OFFSET PAST REQUIRED DATA\n         TM    PDSATTR1,X'04'      SCATTER DATA PRESENT?\n         BZ    NOOFF1              NO - BRANCH\n         ST    R15,LINKOFF1        YES - SAVE OFFSET\n         OI    LINKOFF1,X'80'      SET SWITCH\n         LA    R15,8(,R15)         INCREMENT OFFSET PAST SCATTER DATA\nNOOFF1   TM    PDSINDIC,X'80'      ALIAS?\n         BZ    NOOFF2              NO - BRANCH\n         TM    PDSATTV,X'80'       VS?\n         BO    YSOFF2              YES - ALIAS DATA IS PRESENT\n         TM    PDSATTR1,X'C0'      OS - IS IT RENT OR REUS?\n         BZ    NOOFF2              NO - BRANCH\nYSOFF2   ST    R15,LINKOFF2        SAVE OFFSET OF ALIAS DATA\n         OI    LINKOFF2,X'80'      SET SWITCH\n         LA    R15,11(,R15)        SET OFFSET PAST ALIAS DATA\nNOOFF2   TM    PDSATTV,X'80'       VS BIT ON?\n         BNO   OFF3OS              NO - OS - BRANCH\n         TM    PDSATTV,X'10'       IS VS SSI BIT ON?\n         BO    YSOFF3              YES - BRANCH\n         B     NOOFF3              NO - BRANCH AROUND OS LOGIC\nOFF3OS   LR    R14,R15             COPY OFFSET INTO WORK REG\n         STC   R14,BYTE            SAVE OFFSET FOR EVEN/ODD CHECK\n         TM    BYTE,X'01'          IS IT ODD?\n         BZ    *+8                 NO - LEAVE IT\n         LA    R14,1(,R14)         YES - ADD 1\n         SH    R14,=H'14'          SUBTRACT LENGTH OF NON USER-DATA\n         SRL   R14,1               DIVIDE BY 2 FOR NO. OF HALFWORDS\n         CH    R14,USERLEN         IS COMPUTED LENGTH TOO SHORT?\n         BNL   NOOFF3              NO - THERE MUST NOT BE ANY SSI\nYSOFF3   STC   R15,BYTE            START EVEN/ODD CHECK\n         TM    BYTE,X'01'          IS IT ODD?\n         BZ    *+8                 NO - BRANCH\n         LA    R15,1(,R15)         YES - MAKE IT EVEN, (HALFWORD)\n         ST    R15,LINKOFF3        SAVE OFFSET OF SSI\n         OI    LINKOFF3,X'80'      SET SWITCH\n         LA    R15,4(,R15)         INCREMENT OFFSET PAST SSI\nNOOFF3   TM    PDSATTV,X'80'       IS VS BIT ON?\n         BZ    NOOFF4              NO - BRANCH\n         TM    PDSATTV,X'08'       IS VS APF BIT ON?\n         BZ    NOOFF4              NO - BRANCH\n         ST    R15,LINKOFF4        SAVE OFFSET OF APF CODE\n         OI    LINKOFF4,X'80'      SET SWITCH\nNOOFF4   EQU   *\n         MVC   0(L'MSG09A,R6),MSG09A\n         LA    R5,L'MSG09A(,R5)\n         MVC   MSGWK+33(4),(2*(PDSATTR-PDS))(R8)\n         MVC   MSGWK+38(6),(2*(PDSSIZE-PDS))(R8)\n         MVC   FULL+1(3),PDSSIZE\n         MVI   FULL,0\n         L     R1,FULL\n         NC    FULL,=X'FFFFFC00'  SET OFF BITS UNDER 1 K\n         CL    R1,FULL            WERE ANY BITS SET OFF?\n         SRL   R1,10              SHIFT OUT BITS UNDER 1 K\n         BE    SIZER              BRANCH ON CONDITION SET BY 'CL'\n         LA    R15,10\n         CLR   R1,R15             IF OVER 10K, ROUND TO NEAREST K\n         BH    SIZERUP            BRANCH IF OVER\n         MVC   FULL+1(3),PDSSIZE\n         NC    FULL,=X'000003FF'  SET OFF ALL EXCEPT UNDER 1 K\n         L     R15,FULL\n         SLR   R14,R14            SET UP REG PAIR FOR DIVIDE\n         D     R14,=F'100'        DIVIDE BY 100\n         LA    R15,1(,R15)        ROUND THE QUOTIENT UP\n         CH    R15,=H'9'          GREATER THAN 9?\n         BNH   *+8                NO - LEAVE IT\n         LA    R15,9              YES - MAKE IT 9\n         MH    R1,=H'10'          MULTIPLY K BY 10\n         ALR   R1,R15             ADD TENTH-OF-K UNITS TO K\n         CVD   R1,DOUBLE\n         LA    R15,MSGWK+45\n         MVC   0(8,R15),=X'40202020214B2040'\n         ED    0(7,R15),DOUBLE+5\n         MVI   0(R15),C'('\n         B     SIZLOOP\n         SPACE\nSIZERUP  AH    R1,=H'1'           SOME BITS WERE SET OFF - ADD 1 K\nSIZER    CVD   R1,DOUBLE          CONVERT K TO DECIMAL\n         LA    R15,MSGWK+45\n         MVC   0(8,R15),=X'4020202020202120'\n         ED    0(8,R15),DOUBLE+4\n         MVI   0(R15),C'('\nSIZLOOP  CLI   1(R15),C' '\n         BNE   SIZLX\n         MVC   1(6,R15),2(R15)\n         MVI   7(R15),C' '\n         B     SIZLOOP\nSIZLX    CLI   1(R15),C' '\n         BE    SIZLX2\n         LA    R15,1(,R15)\n         B     SIZLX\nSIZLX2   MVI   1(R15),C'K'\n         MVI   2(R15),C')'\n         SPACE\n         MVC   MSGWK+54(6),=C'ABSENT'\n         TM    LINKOFF3,X'80'      IS SSI PRESENT?\n         BZ    NOSSI               NO - BRANCH\n         LH    R15,LINKOFF3+2      GET OFFSET TO SSI\n         SLL   R15,1               DOUBLE IT (FOR HEX)\n         LA    R15,0(R15,R8)       POINT TO HEX COPY\n         MVC   MSGWK+54(8),0(R15)  MOVE HEX COPY\nNOSSI    EQU   *\n         SPACE\n         LA    R15,MSGWK+64\n         TM    PDSATTR1,X'80'\n         BZ    *+14\n         MVC   0(3,R15),=C'RE,'\n         LA    R15,3(,R15)\n         TM    PDSATTR1,X'40'\n         BZ    *+14\n         MVC   0(3,R15),=C'RU,'\n         LA    R15,3(,R15)\n         TM    PDSATTR2,X'01'\n         BZ    *+14\n         MVC   0(3,R15),=C'RF,'\n         LA    R15,3(,R15)\n         TM    PDSATTR1,X'20'\n         BZ    *+14\n         MVC   0(5,R15),=C'OVLY,'\n         LA    R15,5(,R15)\n         TM    PDSATTR1,X'10'\n         BZ    *+14\n         MVC   0(5,R15),=C'TEST,'\n         LA    R15,5(,R15)\n         TM    PDSATTR1,X'08'\n         BZ    *+14\n         MVC   0(3,R15),=C'OL,'\n         LA    R15,3(,R15)\n         TM    PDSATTR1,X'02'\n         BO    *+14\n         MVC   0(4,R15),=C'NEX,'\n         LA    R15,4(,R15)\n         TM    PDSATTR2,X'08'\n         BZ    *+14\n         MVC   0(3,R15),=C'NE,'\n         LA    R15,3(,R15)\n         TM    PDSATTR2,X'80'\n         BO    *+14\n         MVC   0(3,R15),=C'DC,'\n         LA    R15,3(,R15)\n         TM    PDSATTR2,X'04'\n         BZ    *+14\n         MVC   0(4,R15),=C'SYM,'\n         LA    R15,4(,R15)\n         TM    PDSATTV,X'A0'\n         BNO   *+14\n         MVC   0(5,R15),=C'PAGE,'\n         LA    R15,5(,R15)\n         BCTR  R15,0\n         MVI   0(R15),C' '\n         SPACE\n         LA    R1,MSGWH\n         LR    R0,R5\n         BAL   R14,PUTLINE         WRITE FIRST HEADER\n         LA    R1,MSGWK\n         LA    R0,80\n         BAL   R14,PUTLINE         WRITE LOAD MODULE BASIC INFO\n         SPACE\n************************************************************\n*                                                          *\n*         ESOTERIC                                         *\n*                                                          *\n************************************************************\n         SPACE\n         TM    OPTION1,OPT1E       'ESOTERIC' SPECIFIED?\n         BZ    NOESO               NO - BRANCH\n         LA    R1,MSG11\n         LA    R0,L'MSG11\n         TM    LINKOFF2,X'80'      ALIAS DATA PRESENT?\n         BO    *+8                 YES - BRANCH\n         LA    R0,43               NO - TRUNCATE HEADER\n         BAL   R14,PUTLINE\n         MVC   MSGWK+1(L'MSGWK-1),MSGWK\n         MVC   MSGWK+2(6),(2*(PDSTTRT-PDS))(R8)\n         MVC   MSGWK+10(6),(2*(PDSTTRN-PDS))(R8)\n         MVC   MSGWK+18(2),(2*(PDSTTRNO-PDS))(R8)\n         MVC   MSGWK+22(4),(2*(PDSFTXTL-PDS))(R8)\n         MVC   MSGWK+28(6),(2*(PDSENTRY-PDS))(R8)\n         MVC   MSGWK+36(2),(2*(PDSATTV-PDS))(R8)\n         SPACE\n         LA    R15,MSGWK+40\n         MVI   0(R15),C'*'\n         TM    LINKOFF4,X'80'      IS APF PRESENT?\n         BZ    APFX                NO - BRANCH\n         LH    R14,LINKOFF4+2      GET OFFSET TO APF\n         LA    R14,0(R14,R7)       POINT TO APF\n         MVI   0(R15),C'0'\n         CLC   0(2,R14),=X'0100'   IS IT AC(0)?\n         BE    APFX                YES - BRANCH\n         MVI   0(R15),C'1'\n         CLC   0(2,R14),=X'0101'   IS IT AC(1)?\n         BE    APFX                YES - BRANCH\n         MVI   0(R15),C'?'         SOMETHING UNEXPECTED\nAPFX     EQU   *\n         SPACE\n         TM    LINKOFF2,X'80'      ALIAS DATA PRESENT?\n         BZ    NOESOA              NO - BRANCH\n         LH    R14,LINKOFF2+2\n         LA    R1,0(R14,R7)\n         MVC   MSGWK+44(8),3(R1)\n         SLL   R14,1                DOUBLE FOR HEX\n         LA    R1,0(R14,R8)\n         MVC   MSGWK+54(6),0(R1)\nNOESOA   EQU   *\n         LA    R1,MSGWK\n         LA    R0,60\n         BAL   R14,PUTLINE\nNOESO    EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         DATA (UNFORMATTED)                               *\n*                                                          *\n************************************************************\n         SPACE\n         TM    OPTION1,OPT1D       'DATA' SPECIFIED?\n         BZ    NODATA              NO - BRANCH\n         LA    R1,MSG10\n         LA    R0,L'MSG10\n         BAL   R14,PUTLINE         WRITE HEADER FOR DATA\n         LH    R1,USERLEN\n         SLL   R1,2                DOUBLE FOR BYTES, DOUBLE FOR HEX\n         BCTR  R1,0\n         B     *+10\n         MVC   MSGWK+2(0),28(R8)\n         EX    R1,*-6\n         LA    R0,3(,R1)\n         LA    R1,MSGWK\n         BAL   R14,PUTLINE\nNODATA   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         WHERE                                            *\n*                                                          *\n************************************************************\n         SPACE\n         TM    OPTION1,OPT1S+OPT1W 'SYS' AND 'WHERE' SPECIFIED\n         BNO   NOWHERE             BRANCH IF NOT BOTH\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(59),MSGWK\n         CLI   PDSBLDL2,1          LINKLIST LIBRARY\n         BNE   WHRSTEP             NO, BRANCH\n         MVC   MSGWK(11),=C'SYSTEM LINK'\n         LA    R15,MSGWK+12\n         B     WHRCON\nWHRSTEP  MVC   MSGWK(13),=C'JOB/TASK/STEP'\n         LA    R15,MSGWK+14\nWHRCON   SLR   R1,R1\n         IC    R1,PDSBLDL1         GET CONCAT NUMBER\n         LA    R1,1(,R1)           BASE 0 TO BASE 1\n         CVD   R1,DOUBLE\n         MVC   0(14,R15),=C'LIBRARY NUMBER'\n         LA    R15,15(,R15)\n         UNPK  0(3,R15),DOUBLE+6(2)\n         OI    2(R15),X'F0'\n         LA    R0,2\nWHRSUP   CLI   0(R15),C'0'         LEADING ZERO\n         BNE   WHRSUPX\n         MVC   0(2,R15),1(R15)\n         MVI   2(R15),C' '\n         BCT   R0,WHRSUP\nWHRSUPX  EQU   *\n         LA    R1,MSGWK\n         LA    R0,60\n         BAL   R14,PUTLINE\nNOWHERE  EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         LIST / MAP / IDR                                 *\n*                                                          *\n************************************************************\n         SPACE\n         TM    OPTION2,OPT2M+OPT2L+OPT2I  MAP,LIST,IDR\n         BZ    NOMAP               NO - BRANCH\n         TM    OPTION1,OPT1S       'SYSTEM'?\n         BO    NOMAP               YES - MAP NOT SUPPORTED\n         L     R0,=A(32768)        (COULD BE REDUCED TO BLKSIZE)\n         GETMAIN R,LV=(0)\n         LR    R5,R1\n         SPACE\n         TM    OPTION2,OPT2I       'IDR' SPECIFIED?\n         BZ    NOIDR1              NO - BRANCH\n         L     R0,=A(32768)\n         GETMAIN R,LV=(0)\n         ST    R1,ESDPTR\nNOIDR1   EQU   *\n         SPACE\n         TM    OPTION2,OPT2L       'LIST' SPECIFIED?\n         BZ    NOLIST              NO - BRANCH\n         MVC   FULL,PDSTTRT\n         MVI   FULL+3,0\n         LA    R0,FULL\n         SPACE\n         POINT (R4),(0)\n         SPACE\nLISTREAD MVC   MYDECB(20),LFDECB   MOVE IN MODEL DECB\n         SPACE\n         READ  MYDECB,SF,(R4),(R5),32760,MF=E\n         SPACE\n         CHECK MYDECB\n         SPACE\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BNE   ERRSYNAD            YES, BRANCH\n         MVC   MSGWK(6),=C'  +0  '\n         MVC   MSGWK+6(48),0(R5)\n         TR    MSGWK+6(48),PERIODS\n         LA    R1,MSGWK\n         LA    R0,6+48\n         BAL   R14,PUTLINE\nNOLIST   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         MAP / IDR                                        *\n*                                                          *\n************************************************************\n         SPACE\n         TM    OPTION2,OPT2M+OPT2I 'MAP' OR 'IDR' SPECIFIED\n         BZ    MAPX                NO - BRANCH\n         SPACE\n         LA    R7,BLDLW+4          RESET PDS ADDRESSABILITY\n         MVC   FULL,PDSTTR\n         MVI   FULL+3,0\n         LA    R0,FULL\n         SPACE\n         POINT (R4),(0)\n         SPACE\n         MVC   MYDECB(20),LFDECB   MOVE IN MODEL DECB\nMAPREAD  XC    MYDECB(4),MYDECB    RESET THE ECB\n         SPACE\n         READ  MYDECB,SF,(R4),(R5),32760,MF=E\n         SPACE\n         CHECK MYDECB\n         SPACE\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BNE   ERRSYNAD            YES, BRANCH\n         SPACE\n         CLI   0(R5),X'20'         CESD RECORD?\n         BNE   MAPX                NO - BRANCH\n         LH    R6,6(,R5)           GET NUMBER OF BYTES\n         TM    OPTION2,OPT2I       IDR\n         BZ    NOIDR2\n         LH    R15,4(,R5)          GET ESDID OF FIRST ITEM\n         SLL   R15,4               MULTIPLY BY 16 TO GET OFFSET\n         A     R15,ESDPTR          ADD DICTIONARY ADDRESS TO OFFSET\n         BCTR  R6,0                LENGTH CODE FOR EX\n         B     *+10\n         MVC   0(0,R15),8(R5)      ADD RECORD TO OUR DICTIONARY\n         EX    R6,*-6\n         LA    R6,1(,R6)           RESTORE LENGTH\nNOIDR2   EQU   *\n         SRL   R6,4                DIV BY 16 = NO OF ENTRIES\n         LTR   R6,R6               ZERO?\n         BZ    MAPX                YES - BRANCH\n         MVC   ESDID,4(R5)         SAVE ESDID OF FIRST ITEM\n         LA    R7,8(,R5)           POINT TO 1ST ENTRY\nMAPENTRY EQU   *\n         CLI   CNAME,C' '          LOOKING FOR A SPECIFIC CSECT\n         BE    MAPALLC             NO, BRANCH\n         TM    8(R7),X'0F'         IS THIS AN SD\n         BNZ   MAPNEXT             NO, BRANCH\n         CLC   CNAME,0(R7)         IS THIS THE ONE\n         BNE   MAPNEXT             NO, BRANCH\n         MVC   CNAMEID,ESDID       YES, SAVE ITS ESDID\nMAPALLC  EQU   *\n         TM    OPTION2,OPT2M       MAP\n         BZ    MAPREAD             NO, BRANCH\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(50),MSGWK\n         CLI   0(R7),0             IS THERE A NAME\n         BE    *+10                NO, SKIP NEXT INSTRUCTION\n         MVC   MSGWK(8),0(R7)      MOVE EXTERNAL NAME\n         LA    R15,MAPENTX         POINT TO AREA FOR HEX\n         LA    R1,8(,R7)           POINT TO LAST 8 BYTES OF ENTRY\n         LA    R1,8(,R7)           POINT TO LAST 8 BYTES OF ENTRY\n         LA    R0,8\n         BAL   R14,UNPACK\n         SPACE\n         MVC   BYTE,8(R7)          MOVE TYPE\n         NI    BYTE,X'0F'          ZERO 1ST 4 BITS\n         LA    R15,=C'SD'\n         CLI   BYTE,X'00'\n         BE    MAPTYPEX\n         LA    R15,=C'PC'\n         CLI   BYTE,X'04'\n         BE    MAPTYPPC\n         LA    R15,=C'CM'\n         CLI   BYTE,X'05'\n         BE    MAPTYPEX\n         TM    OPTION2,OPT2A     MAP(ALL)            .BUGFIX.08APR81.\n         BZ    MAPNEXT           NO, BYPASS IT\n         LA    R15,=C'LR'\n         CLI   BYTE,X'03'\n         BE    MAPTYPEX\n         LA    R15,=C'PR'\n         CLI   BYTE,X'06'\n         BE    MAPTYPEX\n         LA    R15,=C'NU'\n         CLI   BYTE,X'07'\n         BE    MAPTYPEX\n         LA    R15,=C'ER'\n         CLI   BYTE,X'02'\n         BE    MAPTYPEX\n         LA    R15,=C'WX'\n         CLI   BYTE,X'0A'\n         BE    MAPTYPEX\n         LA    R15,=C'??'\n         B     MAPTYPEX\nMAPTYPPC TM    8(R7),X'10'         DELETED PC MEANS SEGTAB/ENTAB\n         BZ    MAPTYPEX\n         MVC   MSGWK(8),=C'-SEGTAB-'\nMAPTYPEX MVC   MSGWK+9(2),0(R15)\n         MVC   MSGWK+12(2),MAPENTX\n         MVC   MSGWK+15(6),MAPENTX+2\n         MVC   MSGWK+22(2),MAPENTX+8\n         MVC   MSGWK+25(6),MAPENTX+10\n         SPACE\n         LA    R1,MSGWK\n         LA    R0,31\n         BAL   R14,PUTLINE\nMAPNEXT  LA    R7,16(,R7)\n         LA    R1,1\n         AH    R1,ESDID\n         STH   R1,ESDID\n         BCT   R6,MAPENTRY\n         B     MAPREAD\nDYNEOD   EQU   *\n         B     IDRX\nMAPX     EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         IDR                                              *\n*                                                          *\n************************************************************\n         SPACE\n         TM    OPTION2,OPT2I       IDR\n         BZ    NOIDR3\n         CLI   0(R5),X'80'         IDR RECORD\n         BE    IDRIN               YES\n         TM    0(R5),X'01'         CCW RECORD\n         BO    IDRX                YES, THERE ARE NO IDR'S\n         B     IDRFIND             NO, READ UNTIL IDR FOUND\n         LA    R0,FULL             NO, START BACK AT BEGINNING\n         SPACE\n         POINT (R4),(0)\n         SPACE\nIDRFIND  MVC   MYDECB(20),LFDECB   MOVE IN MODEL DECB\nIDRFINDR XC    MYDECB(4),MYDECB    RESET THE ECB\n         SPACE\n         READ  MYDECB,SF,(R4),(R5),32760,MF=E\n         SPACE\n         CHECK MYDECB\n         SPACE\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BNE   ERRSYNAD            YES, BRANCH\n         SPACE\n         TM    0(R5),X'01'         CCW RECORD\n         BO    IDRX                YES, THERE ARE NO IDR'S\n         CLI   0(R5),X'80'         IDR RECORD?\n         BNE   IDRFINDR            NO, ASSUME NO MORE\nIDRIN    EQU   *\nIDRENTRY MVI   MSGWK,C' '\n         MVC   MSGWK+1(80),MSGWK\n         MVC   MSGWK(5),=C'IDR -'\n         TM    2(R5),X'01'         ZAP DATA\n         BO    IDRZAP\n         TM    2(R5),X'02'         LINKAGE EDITOR DATA\n         BO    IDRLINK\n         TM    2(R5),X'04'         TRANSLATOR DATA\n         BO    IDRTRAN\n         TM    2(R5),X'08'         USER IDENTIFY\n         BO    IDRIDENT\nIDRNEXT  EQU   *\n         XC    MYDECB(4),MYDECB    RESET THE ECB\n         SPACE\n         READ  MYDECB,SF,(R4),(R5),32760,MF=E\n         SPACE\n         CHECK MYDECB\n         SPACE\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BNE   ERRSYNAD            YES, BRANCH\n         SPACE\nIDRNEXTT CLI   0(R5),X'80'         IDR RECORD?\n         BE    IDRIN               YES, BRANCH\nIDRX     TM    OPTION2,OPT2I       IDR (MAY BE HERE FROM EOF)\n         BZ    NOIDR4              NO, BRANCH\n         L     R1,ESDPTR\n         L     R0,=A(32768)\n         FREEMAIN R,LV=(0),A=(1)\nNOIDR3   EQU   *\n         LR    R1,R5\n         L     R0,=A(32768)\n         FREEMAIN R,LV=(0),A=(1)\nNOIDR4   EQU   *\n         SPACE\nNOMAP    EQU   *\n         B     DONEMEM\n         SPACE\n************************************************************\n*                                                          *\n*         IDR FOR ZAP                                      *\n*                                                          *\n************************************************************\n         SPACE\nIDRZAP   EQU   *\n         TM    OPTION3,OPT3Z\n         BZ    IDRZAP4\n         SLR   R6,R6\n         IC    R6,3(,R5)           GET NUMBER OF ACTIVE ENTRIES\n         N     R6,=A(X'0000003F')  ISOLATE LAST 6 BITS\n         BZ    IDRZAP4             BRANCH IF NONE ACTIVE\n         LA    R7,4(,R5)           POINT TO FIRST ENTRY\nIDRZAP1  MVC   DOUBLE(2),0(R7)\n         LH    R15,DOUBLE          ESDID\n         SLL   R15,4               MULTIPLY BY 16 TO GET OFFSET\n         A     R15,ESDPTR          ADD DICTIONARY ADDRESS TO OFFSET\n         CLI   CNAME,C' '          ARE WE SELECTING A CSECT\n         BE    IDRZAP2             NO, PRINT ALL CSECT ZAPS\n         CLC   CNAME,0(R15)        IS THIS THE CSECT\n         BNE   IDRZAP3             NO, BRANCH\nIDRZAP2  MVI   MSGWK,C' '\n         MVC   MSGWK+1(80),MSGWK\n         MVC   MSGWK(8),0(R15)    MOVE NAME FROM DICTIONARY\n         MVC   MSGWK+9(10),=C'ZAPPED    '\n         UNPK  MSGWK+21(5),02(3,R7)\n         MVC   MSGWK+20(2),MSGWK+21\n         MVI   MSGWK+22,C'.'\n         MVC   MSGWK+27(8),5(R7)\n         LA    R1,MSGWK\n         LA    R0,72\n         BAL   R14,PUTLINE\nIDRZAP3  LA    R7,13(,R7)\n         BCT   R6,IDRZAP1\nIDRZAP4  TM    OPTION3,OPT3S      SPACE\n         BZ    IDRNEXT\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(80),MSGWK\n         MVC   MSGWK(40),=C'THERE ARE NO EMPTY SLOTS FOR ZAP IDRDATA'\n         SR    R0,R0\n         IC    R0,1(,R5)          GET LENGTH OF DATA (ALWAYS 250)\n         SH    R0,=H'3'           MINUS BYTES AT +1, +2, +3 = 247\n         SRDA  R0,32              SHIFT INTO DOUBLE REGISTER FOR DIVIDE\n         D     R0,=F'13'          GET NUMBER OF SLOTS (ALWAYS 19)\n         IC    R0,3(,R5)          NUMBER OF SLOTS USED\n         N     R0,=A(X'0000003F') ISOLATE LAST 6 BITS\n         SR    R1,R0              NUMBER OF SLOTS AVAILABLE\n         BNP   IDRZAP5\n         CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+10(2),DOUBLE+6(2)\n         CH    R1,=H'1'           ONE SLOT\n         BNE   IDRZAP5            NO, MESSAGE IS READY\n         MVC   MSGWK+6(3),=C'IS ' CHANGE ARE TO IS\n         MVI   MSGWK+23,C' '      CHANGE SLOTS TO SLOT\nIDRZAP5  LA    R1,MSGWK\n         LA    R0,40\n         BAL   R14,PUTLINE\n         B     IDRNEXT\n         SPACE\n************************************************************\n*                                                          *\n*         IDR FOR LINKAGE EDITOR                           *\n*                                                          *\n************************************************************\n         SPACE\nIDRLINK  EQU   *\n         MVC   MSGWK(8),MEMBER8\n         LA    R7,3(,R5)\n         MVC   MSGWK+9(23),=C'LINKEDITED YY.DDD USING'\n         UNPK  MSGWK+21(5),12(3,R7)\n         MVC   MSGWK+20(2),MSGWK+21\n         MVI   MSGWK+22,C'.'\n         MVC   MSGWK+33(10),0(R7)\n         MVC   MSGWK+44(7),=C'VERSION'\n         SLR   R0,R0\n         IC    R0,10(,R7)\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+52(2),DOUBLE+6(2)\n         IC    R0,11(,R7)\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+55(2),DOUBLE+6(2)\n         LA    R1,MSGWK\n         LA    R0,72\n         BAL   R14,PUTLINE\n         B     IDRNEXT\n         SPACE\n************************************************************\n*                                                          *\n*         IDR FOR TRANSLATORS                              *\n*                                                          *\n************************************************************\n         SPACE\nIDRTRAN  EQU   *\n         TM    OPTION3,OPT3T\n         BZ    IDRNEXT\n         XC    IDRLEN,IDRLEN\n         L     R0,=A(10240)        GET AN AREA TO MERGE RECORDS IN\n         ST    R0,IDRFREE\n         GETMAIN R,LV=(0)\n         ST    R1,IDRPTR\nIDRTRANA L     R15,IDRPTR\n         A     R15,IDRLEN\n         SR    R6,R6\n         IC    R6,1(,R5)           BYTES COUNT (THIS PLUS REST)\n         SH    R6,=H'3'\n         B     *+10\n         MVC   0(0,R15),3(R5)\n         EX    R6,*-6              MOVE RECORD TO IDR AREA\n         LA    R6,1(,R6)\n         A     R6,IDRLEN\n         ST    R6,IDRLEN\n         XC    MYDECB(4),MYDECB    RESET THE ECB\n         READ  MYDECB,SF,(R4),(R5),32760,MF=E\n         CHECK MYDECB\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BNE   ERRSYNAD            YES, BRANCH\n         CLI   0(R5),X'80'         IDR RECORD?\n         BNE   IDRTRANB\n         TM    2(R5),X'04'         FOR TRANSLATOR\n         BO    IDRTRANA            YES, ADD TO PREVIOUS RECORD\nIDRTRANB L     R1,IDRLEN\n         A     R1,IDRPTR\n         ST    R1,IDRPTRE          STORE END-OF-DATA ADDRESS\n         L     R7,IDRPTR\nIDRTRANC EQU   *\n         CLI   CNAME,C' '          SELECTING A CSECT\n         BE    IDRTRANF            NO, BRANCH\n         TM    0(R7),X'80'         ONLY ONE ESDID\n         BO    IDRTRANF            YES, SWAP NOT NECESSARY\n         LR    R6,R7               NO, SWAP SELECTED ESDID WITH FIRST\nIDRTRAND MVC   DOUBLE(2),0(R6)     COPY ESDID TO WORK AREA\n         NI    DOUBLE,X'7F'        TURN OFF FLAG BIT\n         CLC   CNAMEID,DOUBLE      IS THIS THE ONE WE WANT\n         BE    IDRTRANE            YES, BRANCH\n         TM    0(R6),X'80'         NO, IS THIS THE LAST ONE\n         BO    IDRTRANF            YES, NOT FOUND IN THIS SET\n         LA    R6,2(,R6)           POINT TO NEXT ESDID\n         B     IDRTRAND\nIDRTRANE CR    R6,R7               YES, IS IT THE FIRST\n         BE    IDRTRANF            YES, NO NEED TO SWAP\n         MVC   DOUBLE+2(2),0(R7)   SAVE FIRST ENTRY\n         MVC   0(2,R7),DOUBLE      PUT THIS ONE FIRST\n         TM    0(R6),X'80'         WAS THIS ONE LAST\n         MVC   0(2,R6),DOUBLE+2    MOVE SAVED FIRST ONE HERE\n         BZ    *+8                 BRANCH IF NOT LAST\n         OI    0(R6),X'80'         RESTORE END BIT\nIDRTRANF EQU   *\n         SPACE\n         MVC   DOUBLE(2),0(R7)\n         NI    DOUBLE,X'7F'\n         LH    R15,DOUBLE          ESDID\n         SLL   R15,4               MULTIPLY BY 16 TO GET OFFSET\n         A     R15,ESDPTR          ADD DICTIONARY ADDRESS TO OFFSET\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(80),MSGWK\n         MVC   MSGWK(8),0(R15)     MOVE NAME FROM DICTIONARY\n         MVC   MSGWK+9(23),=C'TRANSLATED YY.DDD USING'\n         SPACE\n         LR    R6,R7               START LOOKING FOR END OF ESDID LIST\nIDRTRAN1 TM    0(R6),X'80'         IS THIS THE LAST ONE\n         BO    IDRTRAN2            YES, BRANCH\n         LA    R6,2(,R6)           NO, BUMP ADDRESS BY 2\n         B     IDRTRAN1            KEEP LOOKING\nIDRTRAN2 LA    R6,2(,R6)           POINT PAST LAST ONE TO DATA\n         UNPK  MSGWK+21(5),13(3,R6)\n         MVC   MSGWK+20(2),MSGWK+21\n         MVI   MSGWK+22,C'.'\n         MVC   MSGWK+33(10),1(R6)\n         MVC   MSGWK+44(7),=C'VERSION'\n         SLR   R0,R0\n         IC    R0,11(,R6)\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+52(2),DOUBLE+6(2)\n         IC    R0,12(,R6)\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+55(2),DOUBLE+6(2)\n         CLI   CNAME,C' '          SELECTING A CSECT\n         BE    IDRTSEL1            NO, BRANCH\n         CLC   CNAME,MSGWK         IS THIS THE ONE WE WANT\n         BNE   IDRTSUP1            NO, BYPASS DISPLAY\nIDRTSEL1 LA    R1,MSGWK\n         LA    R0,57\n         BAL   R14,PUTLINE\nIDRTSUP1 EQU   *\n         SPACE\n         LA    R15,16(,R6)         POINT TO NEXT ESDID LIST\n         CLI   0(R6),X'01'         PLS PRE-COMPILER ID PRESENT\n         BNE   IDRTRAN3            NO, BRANCH\n         LA    R6,15(,R6)          YES, POINT R6 TO SECOND ENTRY\n         TM    OPTION3,OPT3P       IDR(PLS) SPECIFIED\n         BZ    IDRTRANP            NO, BRANCH\n         CLI   CNAME,C' '          SELECTING A CSECT\n         BE    IDRTSEL2            NO, BRANCH\n         CLC   CNAME,MSGWK         IS THIS THE ONE WE WANT\n         BNE   IDRTRANP            NO, BYPASS DISPLAY\nIDRTSEL2 MVI   MSGWK,C' '\n         MVC   MSGWK+1(80),MSGWK\n         MVC   MSGWK+27(5),=C'USING'\n         UNPK  MSGWK+21(5),13(3,R6)\n         MVC   MSGWK+20(2),MSGWK+21\n         MVI   MSGWK+22,C'.'\n         MVC   MSGWK+33(10),1(R6)\n         MVC   MSGWK+44(7),=C'VERSION'\n         SLR   R0,R0\n         IC    R0,11(,R6)\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+52(2),DOUBLE+6(2)\n         IC    R0,12(,R6)\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+55(2),DOUBLE+6(2)\n         LA    R1,MSGWK\n         LA    R0,57\n         BAL   R14,PUTLINE\nIDRTRANP LA    R15,16(,R6)         POINT TO NEXT ESDID LIST\n         SPACE\nIDRTRAN3 ST    R15,IDRPTRC         UPDATE CURRENT POINTER\n         TM    0(R7),X'80'         WAS THERE ONLY ONE ESDID\n         BO    IDRTRANY            YES, ALREADY DISPLAYED IT\n         CLI   CNAME,C' '          ARE WE SELECTING A CSECT\n         BNE   IDRTRANY            YES, DONT SHOW OTHER NAMES\n         LA    R6,2(,R7)           POINT TO SECOND ESDID\nIDRTRAN4 MVI   MSGWK,C' '\n         MVC   MSGWK+1(80),MSGWK\n         MVC   MSGWK+2(6),=C'ALSO -'\n         LA    R1,MSGWK+9\n         LA    R0,7                FIT 7 NAMES ON A LINE\nIDRTRAN5 MVC   DOUBLE(2),0(R6)\n         NI    DOUBLE,X'7F'\n         LH    R15,DOUBLE          ESDID\n         SLL   R15,4               MULTIPLY BY 16 TO GET OFFSET\n         A     R15,ESDPTR          ADD DICTIONARY ADDRESS TO OFFSET\n         MVC   0(8,R1),0(R15)      MOVE NAME FROM DICTIONARY\n         LA    R1,9(,R1)           POINT TO NEXT SLOT ON LINE\n         TM    0(R6),X'80'         WAS THAT LAST ID IN THIS RECORD\n         BO    IDRTRANX            YES, GO LIST THEM\n         LA    R6,2(,R6)           NO, POINT TO NEXT ESD ID\n         BCT   R0,IDRTRAN5         BRANCH IF LINE NOT FILLED\n         LA    R1,MSGWK\n         LA    R0,71\n         BAL   R14,PUTLINE\n         B     IDRTRAN4\nIDRTRANX EQU   *\n         LA    R1,MSGWK\n         LA    R0,71\n         BAL   R14,PUTLINE\nIDRTRANY L     R7,IDRPTRC          POINT TO NEXT ESDID LIST\n         C     R7,IDRPTRE          IS THAT ALL THERE IS\n         BL    IDRTRANC            NO, BRANCH\n         LM    R0,R1,IDRFREE\n         FREEMAIN R,LV=(0),A=(1)\n         B     IDRNEXTT            NEXT IDR IS ALREADY READ\n         SPACE\n************************************************************\n*                                                          *\n*         IDR FOR IDENTIFY                                 *\n*                                                          *\n************************************************************\n         SPACE\nIDRIDENT EQU   *\n         TM    OPTION3,OPT3I\n         BZ    IDRNEXT\n         XC    IDRLEN,IDRLEN\n         L     R0,=A(10240)\n         ST    R0,IDRFREE\n         GETMAIN R,LV=(0)\n         ST    R1,IDRPTR\nIDRIDENA L     R15,IDRPTR\n         A     R15,IDRLEN\n         SR    R6,R6\n         IC    R6,1(,R5)           BYTES COUNT (THIS PLUS REST)\n         SH    R6,=H'3'\n         B     *+10\n         MVC   0(0,R15),3(R5)\n         EX    R6,*-6              MOVE RECORD TO IDR AREA\n         LA    R6,1(,R6)\n         A     R6,IDRLEN\n         ST    R6,IDRLEN\n         XC    MYDECB(4),MYDECB    RESET THE ECB\n         READ  MYDECB,SF,(R4),(R5),32760,MF=E\n         CHECK MYDECB\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BNE   ERRSYNAD            YES, BRANCH\n         CLI   0(R5),X'80'         IDR RECORD?\n         BNE   IDRIDENB\n         TM    2(R5),X'08'         FOR IDENTIFY\n         BO    IDRIDENA            YES, ADD TO PREVIOUS RECORD\nIDRIDENB L     R1,IDRLEN\n         A     R1,IDRPTR\n         ST    R1,IDRPTRE          STORE END-OF-DATA ADDRESS\n         L     R7,IDRPTR\nIDRIDENC MVC   DOUBLE(2),0(R7)\n         LH    R15,DOUBLE          ESDID\n         SLL   R15,4               MULTIPLY BY 16 TO GET OFFSET\n         A     R15,ESDPTR          ADD DICTIONARY ADDRESS TO OFFSET\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(80),MSGWK\n         MVC   MSGWK(8),0(R15)    MOVE NAME FROM DICTIONARY\n         MVC   MSGWK+9(10),=C'IDENTIFIED'\n         UNPK  MSGWK+21(5),02(3,R7)\n         MVC   MSGWK+20(2),MSGWK+21\n         MVI   MSGWK+22,C'.'\n         SLR   R1,R1\n         IC    R1,5(,R7)\n         BCTR  R1,0\n         B     *+10\n         MVC   MSGWK+27(0),6(R7)\n         EX    R1,*-6\n         LA    R15,7(R1,R7)        POINT TO NEXT ENTRY\n         ST    R15,IDRPTRC\n         CLI   CNAME,C' '          SELECTING A CSECT\n         BE    IDRISEL1            NO, BRANCH\n         CLC   CNAME,MSGWK         IS THIS THE ONE WE WANT\n         BNE   IDRISUP1            NO, BYPASS DISPLAY\nIDRISEL1 LA    R1,MSGWK\n         LA    R0,68\n         BAL   R14,PUTLINE\nIDRISUP1 L     R7,IDRPTRC          POINT TO NEXT ESDID\n         C     R7,IDRPTRE          IS THAT ALL THERE IS\n         BL    IDRIDENC            NO, BRANCH\n         LM    R0,R1,IDRFREE\n         FREEMAIN R,LV=(0),A=(1)\n         B     IDRNEXTT            NEXT IDR IS ALREADY READ\n         SPACE\n************************************************************\n*                                                          *\n*         NON LOAD-MODULE MEMBERS                          *\n*                                                          *\n************************************************************\n         SPACE\nNOTLINK  TM    OPTION1,OPT1D       'DATA' SPECIFIED\n         BO    DATAPUT\n         CH    R0,=H'15'           SPF LENGTH\n         BNE   DATAPUT\n         LA    R0,10\n         SR    R6,R0\n         MVC   0(SPFHDRL,R6),SPFHDR\n         LA    R0,SPFHDRL(,R6)\n         LA    R1,MSGWH\n         SR    R0,R1\n         BAL   R14,PUTLINE\n         SLR   R0,R0\n         IC    R0,SPFV             VERSION OF V.M\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+24(2),DOUBLE+6(2)\n         MVI   MSGWK+26,C'.'\n         IC    R0,SPFM             MODIFICATION OF V.M\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+27(2),DOUBLE+6(2)\n         MVI   MSGWK+29,C' '\n         MVC   MSGWK+30(3),MSGWK+29\n*        MVC   MSGWK+33(2),(2*(SPFCREDT+1-PDS))(R8)\n*        MVI   MSGWK+35,C'.'\n*        MVC   MSGWK+36(3),(2*(SPFCREDT+2-PDS))(R8)\n         LA    R1,SPFCREDT\n         BAL   R14,JULIAN\n         MVC   MSGWK+31(8),JULIANO\n*        MVC   MSGWK+43(2),(2*(SPFMODDT+1-PDS))(R8)\n*        MVI   MSGWK+45,C'.'\n*        MVC   MSGWK+46(3),(2*(SPFMODDT+2-PDS))(R8)\n         LA    R1,SPFMODDT\n         BAL   R14,JULIAN\n         MVC   MSGWK+41(8),JULIANO\n         MVC   MSGWK+50(2),(2*(SPFMODTM+0-PDS))(R8)\n         MVI   MSGWK+52,C'.'\n         MVC   MSGWK+53(2),(2*(SPFMODTM+1-PDS))(R8)\n         LH    R0,SPFSIZE\n         N     R0,=A(X'0000FFFF') USE ALL 16 BITS, NO SIGN\n         CVD   R0,DOUBLE\n         MVC   MSGWK+55(6),=X'402020202120'\n         ED    MSGWK+55(6),DOUBLE+5\n         MVC   MSGWK+63(10),SPFID\n         LA    R1,MSGWK\n         LA    R0,73\n         BAL   R14,PUTLINE\n         B     DONEMEM\n         SPACE\nJULIAN   CLC   0(4,R1),JULIANI\n         BER   R14\n         MVC   JULIANI(4),0(R1)\n         MVC   DOUBLE(4),0(R1)\n         LH    R0,DOUBLE           GET 00YY\n         SLL   R0,4                SHIFT TO 00000YY0\n         STH   R0,DOUBLE+6\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         XC    DOUBLE(6),DOUBLE\n         CVB   R0,DOUBLE\n         UNPK  JULIANO+6(2),DOUBLE+6(2)\n         ST    R0,DOUBLE\n         MVC   JULIANW(26),JULIAND SET DAYS PER MONTH\n         TM    DOUBLE+3,X'03'      IS YEAR DIVISIBLE BY 4\n         BNZ   JULIAN1             NO\n         MVI   JULIANW+3,29        YES, CHANGE FEB TO 29\nJULIAN1  MVC   DOUBLE+4(4),0(R1)   GET 00YYDDDF\n         XC    DOUBLE(6),DOUBLE    GET DDDF\n         CVB   R1,DOUBLE           GET DDD IN BINARY\n         LA    R15,2               INDEX FOR TABLE\n         LR    R0,R15              INDEX INCREMENT\nJULIAN2  CH    R1,JULIANW-2(R15)   DAY .LT. OR .EQ. ENTRY\n         BNH   JULIAN3             YES, BRANCH\n         SH    R1,JULIANW-2(R15)   NO, SUBTRACT ENTRY FROM DDD\n         ALR   R15,R0              ADD 2 TO INDEX\n         B     JULIAN2             LOOP\nJULIAN3  SRL   R15,1               HALVE INDEX TO GET MM\n         CVD   R1,DOUBLE           CONVERT DD TO PACKED\n         OI    DOUBLE+7,X'0F'      SET SIGN OF DD\n         UNPK  JULIANO+3(2),DOUBLE+6(2) UNPACK DD\n         CVD   R15,DOUBLE          CONVERT MM TO PACKED\n         OI    DOUBLE+7,X'0F'      SET SIGN OF MM\n         UNPK  JULIANO+0(2),DOUBLE+6(2) UNPACK MM\n         MVI   JULIANO+2,C'/'\n         MVI   JULIANO+5,C'/'\n         BR    R14\n         SPACE\nDATAPUT  MVC   0(5,R6),=C'DATA-'\n         LA    R1,MSGWH\n         LA    R0,5(,R5)\n         BAL   R14,PUTLINE         WRITE BASIC HEADER\n         LH    R1,USERLEN\n         LTR   R1,R1\n         BZ    NOTLZRO\n         SLL   R1,2\n         BCTR  R1,0\n         B     *+10\n         MVC   MSGWK+L'MSG09(0),28(R8)\n         EX    R1,*-6\nNOTLZRO  LA    R0,5(R5,R1)\n         LA    R1,MSGWK\n         BAL   R14,PUTLINE         WRITE BASIC INFO AND DATA\n         SPACE\nDONEMEM  TM    OPTION1,OPT1T       'TEST' SPECIFIED?\n         BZ    NOTESTD\n         LA    R1,BLDLX\n         LH    R0,USERLEN\n         AH    R0,=H'7'\n         SLL   R0,2                DOUBLE TO BYTES, DOUBLE FOR HEX\n         BAL   R14,PUTLINE         DISPLAY ALL IN HEX FOR TESTING\nNOTESTD  EQU   *\n         LA    R15,0                                           *84027\n         CH    R15,RC                                          *84027\n         BNH   *+8                                             *84027\n         STH   R15,RC                                          *84027\n         B     NEXTDSN\n         SPACE\n         CH    R15,RC\n         BNH   *+8\n         STH   R15,RC\nNEXTDSN  TM    CLEANUP,X'80'\n         BZ    NOCLOSE\n         MVC   CLOSED,CLOSE\n         CLOSE ((R4)),MF=(E,CLOSED)\n         NI    CLEANUP,B'01111111'\nNOCLOSE  TM    CLEANUP,X'40'\n         BZ    NOFREE\n         LA    R1,MYDAPL\n         LA    R15,MYDAPB\n         USING DAPB18,R15\n         XC    0(40,R15),0(R15)\n         MVI   DA18CD+1,X'18'\n         MVC   DA18DDN,DDSAVE\n         MVC   DA18MNM(8),=CL8' '\n         MVC   DA18SCLS(2),=CL8' '\n         BAL   R14,CALLDAIR        UNALLOCATE\n         NI    CLEANUP,B'10111111'\nNOFREE   EQU   *\n         SPACE\n         TM    MYPUTLEP,X'80'     WAS PUTLINE LOADED BY ME?\n         BO    NODELETE           NO - USED CVTPUTL - BRANCH\n         LA    R0,=CL8'IKJPUTL '\n         DELETE EPLOC=(0)\nNODELETE EQU   *\n         SPACE\n         L     R8,DSNPTR\n         CLI   24(R8),X'FF'\n         BNE   DSNLOOP\n         B     EXIT\n         SPACE\n************************************************************\n*                                                          *\n*         CALL IKJDAIR SERVICE ROUTINE                     *\n*                                                          *\n************************************************************\n         SPACE\nCALLDAIR ST    R14,DAIRREGS\n         AIF   (NOT &MVS).SKIP4\n         L     R15,16\n         TM    116(R15),X'13'      IS THIS MVS ?\n         BNO   DAIRLINK            BRANCH IF NOT MVS\n         TM    X'2DC'(R15),X'80'  CVTDAIR\n         BNO   DAIRLINK\n         L     R15,X'2DC'(,R15)\n         BALR  R14,R15\n         B     DAIRFINI\nDAIRLINK EQU   *\n.SKIP4   ANOP\n         LINK  EP=IKJDAIR,SF=(E,LINKAREA)\nDAIRFINI L     R14,DAIRREGS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        DYNAMIC ALLOCATION FAILURE ROUTINE                *\n*                                                          *\n************************************************************\n         SPACE\nDAIRFAIL ST    R14,MYDFREGS\n         AIF   (NOT &MVS).SKIP5\n         LA    R1,MYDFPARM\n         USING DFDSECTD,R1\n         ST    R15,MYDFRC\n         LA    R15,MYDFRC\n         ST    R15,DFRCP\n         LA    R15,MYDAPL\n         ST    R15,DFDAPLP\n         SLR   R15,R15\n         ST    R15,MYJEFF02\n         LA    R15,MYJEFF02\n         ST    R15,DFJEFF02\n         LA    R15,DFDAIR\n         STH   R15,MYDFID\n         LA    R15,MYDFID\n         ST    R15,DFIDP\n         SLR   R15,R15\n         ST    R15,DFCPPLP\n         LINK  EP=IKJEFF18,SF=(E,LINKAREA)\n         L     R15,MYDFRC\n         DROP  R1\n.SKIP5   ANOP\n         AIF   (&MVS).SKIP6\n         LA    R1,MSGDAIR\n         LA    R0,L'MSGDAIR\n         BAL   R14,PUTMSG\n.SKIP6   ANOP\n         L     R14,MYDFREGS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*  UNPACK - CONVERT A FIELD TO HEXADECIMAL.                *\n*  REG 1 --> INPUT   REG 15 --> OUTPUT                     *\n*  REG 0  =  INPUT LENGTH  (OUTPUT IS TWICE PLUS 1 BLANK)  *\n*  REG 14 --> RETURN ADDRESS                               *\n*                                                          *\n************************************************************\n         SPACE\nUNPACK   MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),UNPACKT-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,UNPACK           DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R14                 RETURN TO CALLER\nUNPACKT  DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n************************************************************\n*                                                          *\n*        PUTMSG ROUTINE                                    *\n*                                                          *\n************************************************************\n         SPACE\nPUTMSG   EQU   *\n         TM    OPTION4,OPT4R                                   *84027\n         BO    NOWRT                                           *84027\n         STM   R14,R1,PUTLINS\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         L     R15,MYPUTLEP\n         LA    R1,MYIOPL\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        PUTLINE ROUTINE                                   *\n*                                                          *\n************************************************************\n         SPACE\nPUTLINE  EQU   *                                               *84027\n         TM    OPTION4,OPT4R                                   *84027\n         BO    NOWRT                                           *84027\n         STM   R14,R1,PUTLINS\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         L     R15,MYPUTLEP\n         LA    R1,MYIOPL\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTLINS\nNOWRT    BR    R14\n         SPACE\nEXIT0    SR    15,15\nEXIT     LR    1,13\n         L     0,@SIZE\n         L     13,4(,13)\n         LH    15,RC                                          *84027\n         ST    15,16(,13)\n         FREEMAIN R,A=(1),LV=(0)\n         LM    14,12,12(13)\n         BR    14\n         SPACE\n************************************************************\n*                                                          *\n*        SYNAD EXIT                                        *\n*                                                          *\n************************************************************\n         SPACE\n*        THIS ROUTINE IS ENTERED DURING THE 'CHECK' MACRO\n*        IF AN I/O ERROR OCCURS.\n         SPACE\nDYNSYNAD EQU   *\n         SYNADAF ACSMETH=BPAM\n         MVC   SYNADMSG(78),50(R1)\n         MVI   SYNADSW,X'FF'\n         SYNADRLS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\n         PRINT NOGEN\n         SPACE\nDCBMODEL DCB   DDNAME=DYNAM,DSORG=PO,MACRF=(R),                        +\n               EODAD=0,SYNAD=0\nDCBLEN   EQU   *-DCBMODEL\n         SPACE\n         PRINT GEN\n         SPACE\nOPEN     OPEN  0,MF=L\n         SPACE\nCLOSE    CLOSE 0,MF=L\n         SPACE\nLFDECB   READ  LFDECB1,SF,2,3,4,MF=L\nLFDECBL  EQU   *-LFDECB\n         SPACE\nJULIAND  DC    H'31,28,31,30,31,30,31,31,30,31,30,31,999'\n         SPACE\nMSG01    DC    C'ERROR IN PARSE SERVICE ROUTINE'\nMSG02    DC    C'IKJ58503I DATA SET '\nMSG02A   DC    C' NOT IN CATALOG'\nMSG03    DC    C'ERROR IN DEFAULT SERVICE ROUTINE'\nMSG04    DC    C'UNABLE TO OPEN DATASET'\nMSG05    DC    C'IKJ58509I DATA SET NAME REQUIRED WHEN MEMBER IS SPECIF+\n               IED'\nMSG06    DC    C'ORGANIZATION OF DATA SET MUST BE PARTITIONED'\nMSG07    DC    C'MEMBER NOT SPECIFIED'\nMSG08    DC    C'MEMBER '\nMSG08A   DC    C' NOT FOUND'\nMSG09    DC    C'--MEMBER---TTR----ALIAS-TTRN-CNT-'\nMSG09A   DC    C'ATTR-STORAGE---------SSI------'\nMSG10    DC    C'--DATA--'\nMSG11    DC    C'--TTR1----TTR2----OV--LFTX--EP------VS--AC--ALIAS OF--+\n               MAINEP-'\nSPFHDR   DC    C'  V.M    CREATED   LAST MODIFIED  SIZE    ID'\nSPFHDRL  EQU   *-SPFHDR\n         AIF   (&MVS).SKIP7\nMSGDAIR  DC    C'UNABLE TO ALLOCATE DATA SET'\n.SKIP7   ANOP\nPERIODS  DC    077C'.'                00-76    0-76\n         DC    C'(+'                  4D-4E   77-78\n         DC    C'.'                      4F      79\n         DC    X'50'                     50      80\n         DC    10C'.'                 51-5A   81-90\n         DC    C'$*)'                 5B-5D   91-93\n         DC    02C'.'                 5E-5F   94-95\n         DC    C'-/'                  60-61   96-97\n         DC    09C'.'                 62-6A   98-106\n         DC    C','                   6B      107\n         DC    15C'.'                 6C-7A  108-122\n         DC    C'#@',X'7D',C'='       7B-7E  123-126\n         DC    2C'.'                  7F-80  127-128\n         DC    C'ABCDEFGHI'           81-89  129-137\n         DC    7C'.'                  8A-90  138-144\n         DC    C'JKLMNOPQR'           91-99\n         DC    8C'.'                  9A-A1\n         DC    C'STUVWXYZ'            A2-A9\n         DC    23C'.'                 AA-C0\n         DC    C'ABCDEFGHI'           C1-C9\n         DC    7C'.'                  CA-D0\n         DC    C'JKLMNOPQR'           D1-D9\n         DC    8C'.'                  DA-E1\n         DC    C'STUVWXYZ'            E2-E9\n         DC    06C'.'                 EA-EF\n         DC    C'0123456789'          F0-F9\n         DC    6C'.'\n         LTORG\nPCLADDR  DC    0D'0'               END MAIN CSECT, BEGIN PCL CSECT\n         SPACE\n************************************************************\n*                                                          *\n*        PARSE PARAMETERS                                  *\n*                                                          *\n************************************************************\n         SPACE\n         PRINT NOGEN\nMEMPCL   IKJPARM\nDSN      IKJPOSIT DSNAME,PROMPT='DATA SET NAME',LIST\nDATAKW   IKJKEYWD\n         IKJNAME 'DATA'\nTESTKW   IKJKEYWD\n         IKJNAME 'TEST'\nSYSTKW   IKJKEYWD\n         IKJNAME 'SYSTEM'\nWHEREKW  IKJKEYWD\n         IKJNAME 'WHERE'\nRETCODKW IKJKEYWD\n         IKJNAME 'RETCODE'\nESOKW    IKJKEYWD\n         IKJNAME 'ESOTERIC'\nMAPKW    IKJKEYWD\n         IKJNAME 'MAP',SUBFLD=MAPSF\nLISTKW   IKJKEYWD\n         IKJNAME 'LIST'\nIDRKW    IKJKEYWD\n         IKJNAME 'IDR',SUBFLD=IDRSF\nCSECTKW  IKJKEYWD\n         IKJNAME 'CSECT',SUBFLD=CSECTSF\nMAPSF    IKJSUBF\nMAPSKW   IKJKEYWD\n         IKJNAME 'ALL'\n         IKJNAME 'SHORT'\nIDRSF    IKJSUBF\nIDRTRNKW IKJKEYWD\n         IKJNAME 'TRANSLATOR'\nIDRPLSKW IKJKEYWD\n         IKJNAME 'PLS'\nIDRZAPKW IKJKEYWD\n         IKJNAME 'ZAP'\nIDRSPCKW IKJKEYWD\n         IKJNAME 'SPACE'\nIDRIDEKW IKJKEYWD\n         IKJNAME 'IDENTIFY'\nIDRALLKW IKJKEYWD\n         IKJNAME 'ALL'\nCSECTSF  IKJSUBF\nCSECT    IKJIDENT 'CSECT NAME',                                        +\n               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=8,                +\n               PROMPT='CSECT NAME'\n         IKJENDP\n         PRINT GEN\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nLINKAREA DS    2F\nMYPPL    DS    7F\nMYANS    DS    F\nMYUWA    DS    F\nDSNPTR   DS    F\nMYECB    DS    F                  USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                 USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                 USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                  USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                 USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL128           USED BY PUTLINE ROUTINE\nPUTLINS  DS    4F                 USED BY PUTLINE ROUTINE\nMYDAPL   DS    5F\nMYDAPB   DS    21F\nMYDFPB   DS    5F\nDSNAME   DS    H,CL44\nCLEANUP  DS    X\nOPTION1  DS    X\nOPT1D    EQU   X'80'\nOPT1T    EQU   X'40'\nOPT1S    EQU   X'20'\nOPT1E    EQU   X'10'\nOPT1W    EQU   X'08'\nOPTION2  DS    X\nOPT2L    EQU   X'80'\nOPT2I    EQU   X'40'\nOPT2M    EQU   X'20'\nOPT2A    EQU   X'10'\nOPTION3  DS    X\nOPT3T    EQU   X'80'               TRAN\nOPT3P    EQU   X'40'               PLS\nOPT3Z    EQU   X'20'               ZAP\nOPT3I    EQU   X'10'               IDENT\nOPT3S    EQU   X'08'               SPACE\nOPTION4  DS    X\nOPT4R    EQU   X'80'               TRAN\nCNAME    DS    CL8\nCNAMEID  DS    H\nESDID    DS    H\nRC       DS    H\nRRC      DS    H\nESDPTR   DS    F\nIDRLEN   DS    F\nIDRFREE  DS    F\nIDRPTR   DS    F\nIDRPTRC  DS    F\nIDRPTRE  DS    F\nIDRR5    DS    F\nMSGWK    DS    CL128\nMSGWH    DS    CL80\nMYDFPARM DS    5F  USED BY DAIRFAIL\nMYDFREGS DS    F   USED BY DAIRFAIL\nMYDFRC   DS    F   USED BY DAIRFAIL\nMYJEFF02 DS    F   USED BY DAIRFAIL\nMYDFID   DS    H   USED BY DAIRFAIL\nDOUBLE   DS    D\nFULL     EQU   DOUBLE,4\nBYTE     EQU   DOUBLE,1\nDDSAVE   DS    CL8\nDAIRREGS DS    F\nOPEND    DS    0F\nCLOSED   DS    F\nKOUNT    DS    F\nDCB      DS    0D,XL(DCBLEN)\nMYDECB   DS    5F\nSYNADSW  DS    F\nSYNADMSG DS    CL78\nJULIANI  DS    F\nJULIANO  DS    CL8\nJULIANW  DS    13H\nMEMBER8  DS    D\nMEMBERL  DS    H\nUSERLEN  DS    H\nLINKOFF  DS    0F\nLINKOFF1 DS    F\nLINKOFF2 DS    F\nLINKOFF3 DS    F\nLINKOFF4 DS    F\nBLDLW    DS    CL64                4 + 11 + 2 + 47\nBLDLX    DS    CL129               2 * L'BLDLW + 1\nMAPENTX  DS    4F,C\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nPDSDSECT DSECT\nPDS      EQU   *\nPDSMEMBR DS    CL8                 MEMBER NAME\nPDSTTR   DS    XL3                 TTR OF 1ST BLOCK\nPDSBLDL1 DS    XL1                 CONCATENATION NUMBER\nPDSBLDL2 DS    XL1                 1 - LINKLIST  2 - STEPLIB\nPDSINDIC DS    XL1                 INDICATORS\n*              USER DATA FIELD\nPDSUSER  DS    0C\nPDSTTRT  DS    XL3                 TTR OF FIRST TEXT BLOCK\n         DS    XL1                 ZERO, FOR ALIGNMENT\nPDSTTRN  DS    XL3                 TTR OF NOTE LIST OR SCATTER\nPDSTTRNO DS    XL1                 NUMBER OF NOTE LIST ENTRIES\nPDSATTR  DS    0XL2                ATTRIBUTES\nPDSATTR1 DS    XL1                 ATTRIBUTES, BYTE 1\nPDSATTR2 DS    XL1                 ATTRIBUTES, BYTE 2\nPDSSIZE  DS    XL3                 CONTIGUOUS MAIN STORAGE REQUIRED\nPDSFTXTL DS    XL2                 LENGTH OF FIRST TEXT BLOCK\nPDSENTRY DS    XL3                 ENTRY POINT ADDRESS\nPDSFTXTO DS    0XL3                ORIGIN OF FIRST TEXT BLOCK (OS)\nPDSATTV  DS    XL3                 VS ATTRIBUTES\nPDSOPTIO EQU   *                   BEGIN OPTIONAL FIELDS\n         ORG   PDSUSER\nSPFV     DS    XL1                 VERSION\nSPFM     DS    XL1                 MODIFICATION LEVEL\n         DS    XL2\nSPFCREDT DS    PL4                 00YYDDDF\nSPFMODDT DS    PL4                 00YYDDDF\nSPFMODTM DS    XL2                 HHMM\nSPFSIZE  DS    XL2                 CURRENT SIZE\nSPFINIT  DS    XL2                 INITIAL SIZE\nSPFMOD   DS    XL2                 MODIFICATIONS\nSPFID    DS    CL10                USERID\n         SPACE\nIHADCB   DSECT\n         DS    32XL1\n         DS    XL1\nDCBEODAD DS    AL3\nDCBRECFM DS    X\nDCBEXLST DS    AL3\nDCBDDNAM DS    CL8\nDCBOFLGS DS    X\n         DS    7XL1\n         DS    X\nDCBSYNAD DS    AL3\n         SPACE\n         IKJCPPL\n         SPACE 3\n         IKJPPL\n         SPACE\n         IKJDFPB\n         SPACE 2\n         IKJUPT\n         SPACE 2\n         IKJIOPL\n         SPACE 2\n         IKJDAPL\n         SPACE 2\n         IKJDAP08\n         SPACE 2\n         IKJDAP18\n         SPACE 2\n         AIF   (NOT &MVS).SKIP8\n         IKJEFFDF DFDSECT=YES\n.SKIP8   ANOP\n         SPACE 2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MINIGEN": {"ttr": 17162, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06?\\x01\\x02\\x06?!\"\\x00G\\x00G\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-04T00:00:00", "modifydate": "2002-03-04T21:22:00", "lines": 71, "newlines": 71, "modlines": 0, "user": "SYZYGY1"}, "text": "//C7BMINIG JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=C7BRIAN,\n//       MSGCLASS=O,TIME=60\n//*\n//CP EXEC PGM=IEBGENER,REGION=512K\n//SYSPRINT DD SYSOUT=*\n//SYSUT2   DD  DSN=&&DUMMY(MINIMAC0),DISP=(,PASS),UNIT=SYSDA,\n//       DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120),SPACE=(TRK,(1,1,1)),\n//       VOL=SER=MVS802\n//SYSIN DD DUMMY\n//SYSUT1   DD  *\n         MACRO\n         MINIMAC0\n         NOP\n         MEND\n/*\n//SJCLIN1 EXEC PGM=GIMSMP,REGION=4096K,TIME=60\n//SMPCSI   DD  DSN=SMPE.GLOBAL.CSI,DISP=SHR\n//PARMLIB  DD  DSN=SYS1.APARMLIB,DISP=SHR\n//SMPOUT   DD  SYSOUT=*\n//SMPRPT   DD SYSOUT=*\n//SMPSNAP  DD SYSOUT=*\n//SYSABEND DD SYSOUT=*\n//SMPLIST  DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SYSUT2   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SYSUT3   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SMPHOLD  DD DUMMY\n//SYSUT4   DD UNIT=SYSDA,SPACE=(3120,(0038,0100)),\n//         DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB)\n//SMPWRK1  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK2  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK3  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK4  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK5  DD UNIT=SYSDA,\n//            SPACE=(6144,(0183,0380,195)),\n//            DCB=(RECFM=U,BLKSIZE=6144)\n//SMPCNTL  DD  *\n  SET BDY (M211TAA).\n  UCLIN.\n  DEL SYSMOD(MINIGEN).\n  ENDUCL.\n  RESETRC.\n  SET BDY (GLOBAL).\n  UCLIN.\n  DEL SYSMOD(MINIGEN).\n  ENDUCL.\n  RESETRC.\n  SET BDY (GLOBAL).\n  RECEIVE SELECT(MINIGEN).\n  SET BOUNDARY(M211TAA).\n  JCLIN.\n  APPLY  SELECT(MINIGEN) REDO BYPASS(ID).\n//SMPPTFIN DD  *\n++  FUNCTION(MINIGEN).\n++  VER(Z038).\n++  MAC(MINIMAC0) DISTLIB(AMODGEN) TXLIB(DUMMYMAC)\n ASSEM(IEFWMAS1,IEFWMSKA,IEFDEVPT,IEFEDTTB,IEECVUCM,IEAASU00,IEECVSUB).\n/*\n//SMPJCLIN DD  DSN=IPO1.STAGE2,DISP=SHR,\n//             UNIT=3350,VOL=SER=MVS002\n//DUMMYMAC DD  DSN=&&DUMMY,DISP=(OLD,DELETE)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OSDEBE2": {"ttr": 17410, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06?\\x01\\x02\\x06?!$\\x083\\x083\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-04T00:00:00", "modifydate": "2002-03-04T21:24:00", "lines": 2099, "newlines": 2099, "modlines": 0, "user": "SYZYGY1"}, "text": "*          DATA SET OSDEBE2    AT LEVEL 002 AS OF 03/07/81\n*          DATA SET OSDEBE     AT LEVEL 001 AS OF 05/16/74              00001\nOSDEBE   START 0                                                        00002\n         USING *,8,9,12  USING 3 BASE REGS                              00003\n         SPACE 5                                                        00004\n*********************************************************************** 00005\n*                                                                     * 00006\n*                         O S D E B E                                 * 00007\n*                                                                     * 00008\n*********************************************************************** 00009\n*                                                                       00010\n*                                                                       00011\n*  THE PURPOSE OF OSDEBE IS TO PROVIDE THE USER OF 360 OPERATING        00012\n*  SYSTEM THE FLEXIBILITY OF THE ORIGINAL DEBE.  FLEXIBILITY CAN        00013\n*  ONLY BE OBTAINED BY THE ELIMINATION OF DD CARDS.  ONLY ONE DD        00014\n*  CARD IS NECESSARY FOR OSDEBE, A SYSPRINT DD CARD FOR THE UNIT        00015\n*  THAT WILL BE USED AS THE OUTPUT WRITER.  ALL FUNCTIONS WHICH         00016\n*  ARE AVAILABLE WITH DEBE ARE PROVIDED IN OSDEBE.                      00017\n*                                                                       00018\n*********************************************************************** 00019\n*                                                                       00020\n*  CORE REQUIREMENTS - ABOUT 33,000 BYTES, 20,000 OF WHICH IS USED      00021\n*  AS AN I/O AREA, MOST OF WHICH IS USED FOR LARGE TAPE RECORDS.        00022\n*                                                                       00023\n*  ERROR RECOVERY - THE OPERATING SYSTEM PERFORMS ALL STANDARD          00024\n*  ERROR RECOVERY.  IF IT CANNOT RECOVER FROM AN ERROR, OSDEBE          00025\n*  WILL NOT EVEN TRY.                                                   00026\n*                                                                       00027\n*  ALL REPLIES TO OSDEBE ARE OF THE WTOR FORMAT,                        00028\n*          REPLY 00,'TP'                                                00029\n*  WHENEVER ANY INFORMATION IS REQUESTED BY OSDEBE, A REPLY OF          00030\n*  'EOJ' WILL TERMINATE THE SUBROUTINE OF OSDEBE.  A REPLY OF 'EOJ'     00031\n*  IN RESPONSE TO THE REQUEST FOR THE PROGRAM ID WILL TERMINATE         00032\n*  OSDEBE AND CONTROL IS RETURNED TO THE OPERATING SYSTEM.              00033\n*                                                                       00034\n*  ONCE A ROUTINE IS RUNNING IN OSDEBE, IT CAN ONLY BE TERMINATED       00035\n*  BY CANCELLING THE JOB, AND THE JOB MUST BE RESCHEDULED AGAIN.        00036\n*  AN ALTERNATIVE TO CANCELLING THE JOB IS TO CAUSE AN I/O ERROR        00037\n*  ON ONE OF THE UNITS BEING USED.  AN I/O ERROR WILL CAUSE THE         00038\n*  SUBROUTINE OF OSDEBE TO TERMINATE, BUT OSDEBE WILL STILL BE          00039\n*  IN CONTROL.                                                          00040\n*                                                                       00041\n*********************************************************************** 00042\n         EJECT                                                          00043\n         SAVE  (14,12)                                                  00044\nBEGIN    BALR  8,0                                                      00045\n         LA    2,6                 ALIGN BASE WITH USING STATMENT       00046\n         SR    8,2                                                      00047\nBEGIN1   EQU   *                                                        00048\n         L     9,BASE9             LOAD THE BASE 9 REG                  00049\n         L     12,BASE12                                                00050\n         LA    14,SAVEAREA                                              00051\n         ST    13,SAVEAREA+4                                            00052\n         ST    14,8(0,13)                                               00053\n         LR    13,14                                                    00054\n         SPACE 2                                                        00055\n*        GET PARM FIELD IF ANY                                          00056\n         SPACE                                                          00057\n         L     1,0(1)              GET POINTER TO LENGTH OF PARM        00058\n         LA    1,0(1)              CLEAR SIGN BIT                       00059\n         LH    2,0(1)              GET LENGTH OF PARM FIELD             00060\n         LTR   2,2                 SEE IF IS ANY PARM INFO              00061\n         BZ    NOPARM              BRANCH IF NO PARM                    00062\n         STC   2,MVCPARM+1         STORE LENGTH OF PARM FIELD           00063\nMVCPARM  MVC   ID(1),2(1)          MOVE PARM FIELD TO ID AREA           00064\nNOPARM   EQU   *                                                        00065\n         EJECT                                                          00066\n*********************************************************************** 00067\n*                                                                     * 00068\n*  THIS ROUTINE WILL MODIFY ALL WTO AND WTOR MACROS FOR MCS SUPPORT.  * 00069\n*                                                                     * 00070\n*********************************************************************** 00071\n         SPACE 2                                                        00072\n         LA    1,BUMPMOD           GET ADDRESS TO START SCAN            00073\n         LA    2,TDAREA            GET ADDRESS TO END SCAN              00074\nMODIFY   CLI   0(1),X'45'          SEE IF BAL                           00075\n         BNE   BUMPMOD             BRANCH NOT EQUAL                     00076\n         CLI   1(1),X'10'          SEE IF REG 1                         00077\n         BNE   BUMPMOD             BRANCH NOT EQUAL                     00078\n         CLI   4(1),X'00'          SEE IF WTO                           00079\n         BNE   NOTWTO              BRANCH NOT WTO                       00080\n         MVC   6(1,2),=X'0400'     INSERT NCS FLAGS           ********* 00081\n         B     BUMPMOD             GO LOOK FOR NEXT WTO OR WTOR         00082\nNOTWTO   CLI   12(1),X'00'         SEE IF WTOR                          00083\n         BNE   BUMPMOD             BRANCH NOT EQUAL                     00084\n         MVC   14(1,2),=X'0400'    INSERT MCS FLAGS           ********* 00085\nBUMPMOD  LA    1,2(1)              BUMP SEARCH ADRS                     00086\n         CLR   2,1                 SEE IF FINISHED                      00087\n         BH    MODIFY              BRANCH NOT FINISHED                  00088\n         EJECT                                                          00089\n         WTO   'FAIRCHILD DEBE VERSION 1'                               00090\n         SPACE 2                                                        00091\n         SPACE 2                                                        00092\n*  GET CVT POINTER                                                      00093\n         L     3,16             GET CVT POINTER                         00094\n         MVC   SYSTYP(1),116(3)    STORE SYSTEM TYPE IN PROB PROG       00095\n*  GET POINTER TO THE TCB POINTERS                                      00096\n         L     2,0(0,3)                                                 00097\n*  GET TCB POINTER                                                      00098\n         L     3,4(0,2)                                                 00099\n*  GET TCB ADDRESS FOR THE DEB'S                                        00100\n         ST    3,INDEB                                                  00101\n         ST    3,OUTDEB                                                 00102\n         SPACE                                                          00103\nFNDDCB   EQU   *                                                        00104\n         B     DEBFND                                                   00105\n         ABEND 1,DUMP                                                   00106\nCODE     DS    0F                                                       00107\n         DC    X'ABCFEDAD'                                              00108\nDEBFND   EQU   *                                                        00109\n         MVC   PMBBC(1),32(4)      GET FILE MASK                        00110\n         MVC   PMBBC+1(6),36(4)    GET SEEK ARG TO IOB                  00111\n         MVI   CHHR+3,1              SET RECORD ARG IN IOB              00112\n         SPACE                                                          00113\n         SR    1,1                                                      00114\n         L     0,CODE                                                   00115\n         SVC   254                                                      00116\n         SPACE 2                                                        00117\n*  ALL ROUTINES RETURN HERE WHEN THEY ARE FINISHED.                     00118\nASKAGN   EQU   *                                                        00119\n         CLI   MVCPARM+1,0         SEE IF PARM USED                     00120\n         BZ    PARM2               BRANCH IF PARM NOT USED              00121\nPARMSW   TS    PARMSW+1            SEE IF 2ND TIME THROUGH              00122\n         BC    4,EOJ               BRANCH 2 ND TIME THROUGH             00123\nPARM2    EQU   *                                                        00124\n         CLI   MVCPARM+1,0         SEE IF PARM USED                     00125\n         BNZ   PARM1               BRANCH IF PARM USED                  00126\n         SPACE 2                                                        00127\n         XC    ID+2(L'ID-2),ID+2   CLEAR ID AREA                        00128\n         WTOR 'ENTER RTN ID - XX OR EOJ - XXX',ID,40,REPLYECB           00129\n         BAL   11,WAITANS    GO WAIT FOR A REPLY                        00130\n         SPACE 2                                                        00131\nPARM1    EQU   *                                                        00132\n*        CLEAN UP AREAS FOR ALL ROUTINES                                00133\n         SPACE 1                                                        00134\n         XC    FILES,FILES         CLEAR FILES WORK AREA                00135\n         NI    INIOB,X'42'         CLEAN UP IOB S                       00136\n         NI    OUTIOB,X'42'        CLEAN UP IOB S                       00137\n         NI    TD3+1,X'0F'   RESET SWITCHES SET IN TP ROUTINE           00138\n         NI    TD6+1,X'0F'                                              00139\n         SPACE 2                                                        00140\n*        ROUTINE ID'S WHICH ARE SUPPORTED FOLLOW----                    00141\n         SPACE 1                                                        00142\n         OC    ID,=CL80' '        MAKE ALL CAPS                         00143\n         CLC   ID(3),=C'EOJ'       IS THE USER FINISHED WITH OS DEBE    00144\n         BE    EOJ                 IF YES--- RETURN TO OS               00145\n         CLC   ID(2),=C'BF'        BACK SPACE FILE                      00146\n         BE    BF                                                       00147\n         CLC   ID(2),=C'BS'        BACK SPACE RECORD                    00148\n         BE    BS                                                       00149\n         CLC   ID(2),=C'CC'        CARD TO CARD                         00150\n         BE    CC                                                       00151\n         CLC   ID(2),=C'CP'        CARD TO PRINT                        00152\n         BE    CP                                                       00153\n         CLC   ID(2),=C'CT'        CARD TO TAPE                         00154\n         BE    CT                                                       00155\n         CLC   ID(2),=C'RW'        REWIND                               00156\n         BE    RW                                                       00157\n         CLC   ID(2),=C'SF'        FORWARD SPACE FILE                   00158\n         BE    SF                                                       00159\n         CLC   ID(2),=C'SR'        FORWARD SPACE RECORD                 00160\n         BE    SR                                                       00161\n         CLC   ID(2),=C'TC'        TAPE TO CARD                         00162\n         BE    TC                                                       00163\n         CLC   ID(2),=C'TD'        TAPE TO PRINT HEX                    00164\n         BE    TD                                                       00165\n         CLC   ID(2),=C'TP'        TAPE TO PRINT                        00166\n         BE    TP                                                       00167\n         CLC   ID(2),=C'TT'        TAPE TO TAPE                         00168\n         BE    TT                                                       00169\n         CLC   ID(2),=C'TF'        TAPE TO PRINT FORMATED               00170\n         BE    TF                                                       00171\n         CLC   ID(2),=C'WT'        WRITE TAPE MARK                      00172\n         BE    WT                                                       00173\n*                                                                       00174\n*    EXTENDED  OPERATIONS ROUTINE                                       00175\n*                                                                       00176\n         CLC   ID(2),=C'FM'        SEE IF SHOULD WRITE FILE MARK        00177\n         BNE   *+14                BRANCH IF NOT                        00178\n         MVC   ID(2),=C'WT'        REPLACE FM WITH WT                   00179\n         B     WT                  GO WRITE TAPE MARK                   00180\n         CLC   ID(2),=C'TM'        SEE IF SHOULD WRITE FILE MARK        00181\n         BE    *-16                REPLACE TM WITH WT                   00182\n         CLC   ID(2),=C'BR'        SEE IF SHOULD BACKSPACE RECORD       00183\n         BNE   *+14                BRANCH IF NOT                        00184\n         MVC   ID(2),=C'BS'        REPLACE BR WITH BS                   00185\n         B     BS                  GO BACKSPACE RECORD                  00186\n         CLC   ID(2),=C'FF'        SEE IF SHOULD FOWARD SPACE FILE      00187\n         BNE   *+14                BRANCH IF NOT                        00188\n         MVC   ID(2),=C'SF'        SEE IF FORWARD SPACE FILE            00189\n         B     SF                  GO FOWARD SPACE FILE                 00190\n         CLC   ID(2),=C'RU'        SEE IF REWIND AND UNLOAD             00191\n         BE    RU                  BRANCH IF REWIND AND UNLOAD          00192\n         CLC   ID(1),=C'U'         SEE IF UNLOAD                        00193\n         BE    RU                  IF YES GO UNLOAD                     00194\n         CLC   ID(1),=C'R'         SEE IF REWIND                        00195\n         BE    RW                  BRANCH ID YES                        00196\n         CLC   ID(2),=C'CL'        SEE IF LABEL ROUTINE REQUESTED       00197\n         BE    CLIP                BRANCH TO LABEL ROUTINE              00198\n         CLC   ID(2),=C'LA'        SEE IF LABEL ROUTINE REQUESTED       00199\n         BE    CLIP                BRANCH TO LABEL ROUTINE              00200\n         CLC   ID(2),=C'FR'        SEE IF FORWARD SPACE RECORD          00201\n         BNE   *+14                BRANCH IF NOT                        00202\n         MVC   ID(2),=C'SR'        MOVE IN SR CHARACTERS                00203\n         B     SR                  GO TO SR ROUTINE                     00204\n*                                                                       00205\n         WTO   'ROUTINE ID ENTERED IS NOT SUPPORTED- PLEASE RETRY'      00206\n         B     ASKAGN                                                   00207\n         SPACE 1                                                        00208\nBASE9    DC    A(OSDEBE+4096)    ADD CON FOR SECOND BASE                00209\nBASE12   DC    A(OSDEBE+8192)       ADD CON FOR THIRD BASE              00210\n         SPACE 3                                                        00211\nEOJ      L     13,4(0,13)                                               00212\n         RETURN (14,12),RC=0                                            00213\n         EJECT                                                          00214\n*        SUB ROUTINE TO SEARCH FOR KEY LETTERS IN ROUTINE ID FIELD      00215\n*        RETURN CONDITION CODE WILL BE EQUAL OR UNEQUAL                 00216\n*                                                                       00217\n*        FORMAT                                                         00218\n*                 BAL 11,SEARCH       USED TO BRANCH TO THIS SUB-R      00219\n*                 DC  C'A'            CHARACTER TO BE SEARCHED          00220\n*                 DC  AL1(3)          LENGHT OF SEARCH                  00221\n*                                                                       00222\nSEARCH   STM   2,3,SHSAV           SAVE REG                             00223\n         LA    2,ID                GET ADDRESS OF ID AREA               00224\n         SR    3,3                 CLEAR REG                            00225\n         IC    3,1(11)             GET LENGTH OF SEARCH                 00226\nCLSHR    CLC   2(1,2),0(11)        SEE IF CHARACTER IS FOUND            00227\n         BE    SEARET              BRANCH IF FOUND                      00228\n         LA    2,1(2)              BUMP REG BY 1                        00229\n         BCT   3,CLSHR             TRY AGAIN                            00230\nSEARET   LM    2,3,SHSAV           RESTORE REGS                         00231\n         B     2(11)               RETURN                               00232\nSHSAV    DC    2F'0'               SAVE AREA                            00233\n*                                                                       00234\n*                                                                       00235\n*  BACKSPACE A FILE ON TAPE                                             00236\n         SPACE 1                                                        00237\nBF        EQU   *                                                       00238\n         BAL   10,TPOUTSET   DETERMINE WHICH TAPE UNIT AND SET UP       00239\nBF1      EQU   *                                                        00240\n         BAL   10,NBFILS           GET FILE CNT FRM ID FIELD            00241\n         BO    SFEXCP              BRANCH AROUND MSG                    00242\n         WTOR  'NUMBR OF FILES BACK SPACED - XXX',FILES+5,3,REPLYECB    00243\n         BAL   11,WAITANS          GO WAIT FOR A REPLY                  00244\n         B    SFEXCP                                                    00245\n         SPACE 1                                                        00246\n*  FORWARD SPACE A FILE ON TAPE                                         00247\n         SPACE 1                                                        00248\nSF       EQU   *                                                        00249\n         BAL   10,TPOUTSET   DETERMINE WHICH TAPE UNIT AND SET UP       00250\nSF1      EQU   *                                                        00251\n         BAL   10,NBFILS           GET FILE CNT FRM ID FIELD            00252\n         BO    SFEXCP              BRANCH AROUND MSG                    00253\n         WTOR  'NUMBR OF FILES FRWRD SPACED - XXX',FILES+5,3,REPLYECB   00254\n         BAL   11,WAITANS          GO WAIT FOR A REPLY                  00255\nSFEXCP   EQU   *                                                        00256\n         OC    FILES+5(3),=3C' '    MAKE UPPER CASE                     00257\n         CLC   FILES+5(3),=C'EOJ'   SEE IF END OF ROUTINE               00258\n         BE    ASKAGN              IF EQUAL EXIT ROUTINE                00259\n         TM    FILES+5,C'0'         SEE IF NUMERIC                      00260\n         BNO   ERMSGA              BRANCH TO ERROR MSG                  00261\n         TM    FILES+6,C'0'       SEE IF NUMERIC                        00262\n         BNO   ERMSGA              BRANCH TO ERROR MSG                  00263\n         TM    FILES+7,C'0'       SEE IF NUMERIC                        00264\n         BNO   ERMSGA              BRANCH TO ERROR MSG                  00265\n         PACK  FILES(8),FILES(8)     PACK INPUT                         00266\n         CVB   2,FILES              PUT NUMBER OF FILES IN REG          00267\nREPT     EQU   *                                                        00268\n         MVC   OUTCCW+8(8),SFCCW   MOVE IN SPACE FILE CCW               00269\n         CLC   ID(2),=C'SF'        SEE IF WAS A SPACE FILE              00270\n         BE    *+10                BRANCH IF SPACE FILE                 00271\n         MVC   OUTCCW+8(8),BFCCW   MOVE IN BACK SPACE FILE CCW          00272\n         BAL   11,IOOUT      GO EXECUTE THE CCW                         00273\n         CLI   OUTECB,X'7F'  WAS EVERYTHING OK                          00274\n         BE    *+8                 GO PERFORM NOOP                      00275\n         B     TAPERR              BRANCH TO ERROR ROUTINE              00276\n         MVC   OUTCCW+8(8),NOOP    MOVE IN NO-OP CCW                    00277\n         BAL   11,IOOUT            GO PERFORM NOOP TO WAIT FOR DEVICE   00278\n         CLI   OUTECB,X'7F'        SEE IF NOOP OK                       00279\n         BE    CNTFS               BRANCH IF OK                         00280\n         B     TAPERR              BRANCH IF ERROR                      00281\nERMSGA   EQU   *                                                        00282\n  WTO   'ERROR--- PLEASE ENTER 3 NUMERIC CHARACTERS FOR NUMBR OF FILES' 00283\n         CLC   ID(2),=C'BF'        FIND WHICH ROUTINE ASKED             00284\n         BE    BF1                 BRANCH TO THAT ROUTINE               00285\n         B     SF1                 BRANCH TO THE OTHER                  00286\nCNTFS    EQU   *                                                        00287\n         BCT   2,REPT              BRANCH IF NOT ZERO                   00288\n         B     ASKAGN              GET ANOTHER ROUTINE                  00289\n         EJECT                                                          00290\n*  BACKSPACE NNNN RECORDS ON TAPE                                       00291\n         SPACE 1                                                        00292\nBS       EQU   *                                                        00293\n         SPACE 1                                                        00294\n*  SKIP NNNN RECORDS ON TAPE                                            00295\n         SPACE 1                                                        00296\nSR       EQU   *                                                        00297\n         BAL   10,TPOUTSET   DETERMINE WHICH TAPE UNIT AND SET UP       00298\n         SPACE 2                                                        00299\n* THE FOLLOWING CODE IS FOR SEARCHING A RECORD COUNT WHEN A ONE         00300\n* LINE ENTRY IS USED.                                                   00301\n         SPACE 1                                                        00302\n         LA    2,ID                GET ADDRESS OF SEARCH                00303\n         LA    3,L'ID-5            GET LENGTH OF SEARCH                 00304\nRCRCNT   TM    2(2),X'C0'          SEE IF ALPHAMERIC                    00305\n         BO    BUMPR               BRANCH IF ALPHAMERIC                 00306\n         TM    7(2),X'C0'          SEE IF ALPHAMERIC                    00307\n         BO    BUMPR               BRANCH IF ALPHAMERIC                 00308\n         LA    4,4                GET NUMBER OF CHARACTERS              00309\n         BAL   11,ALPMRIC         GO SEE IF ALBHAMERIC                  00310\n         BNO   BUMPR              BRANCH NOT ALPHAMERIC                 00311\n         MVC   FILES+4(4),3(2)          MOVE REC CNT TO CNT AREA        00312\n         B     BYRCRD              BRANCH AROUND REQUEST FOR RECORD CNT 00313\nBUMPR    LA    2,1(2)              BUMP SEARCH ADDRESS                  00314\n         BCT   3,RCRCNT            LOOK AGAIN                           00315\n         SPACE 2                                                        00316\nRECRTY WTOR 'NUMBR OF REC''S TO BE SKIPPED - XXXX',FILES+4,4,REPLYECB   00317\n         BAL   11,WAITANS    GO WAIT FOR A REPLY                        00318\nBYRCRD   OC    FILES+4(3),=3C' '   MAKE ALL CAP'S                       00319\n         CLC   FILES+4(3),=C'EOJ'  SEE IF SHOULD END THIS ROUTINE       00320\n         BE    ASKAGN              YES,EXIT THIS ROUTINE                00321\n         TM    FILES+4,X'F0'       SEE IF NUMERIC ENTRY                 00322\n         BZ    ENTERR              BRANCH IF NOT                        00323\n         TM    FILES+5,X'F0'       SEE IF NUMERIC ENTRY                 00324\n         BZ    ENTERR              BRANCH IF NOT                        00325\n         TM    FILES+6,X'F0'       SEE IF NUMERIC ENTRY                 00326\n         BZ    ENTERR              BRANCH IF NOT                        00327\n         TM    FILES+7,X'F0'       SEE IF NUMERIC ENTRY                 00328\n         BZ    ENTERR              BRANCH IF NOT                        00329\n         PACK  FILES(8),FILES(8)                                        00330\n         CVB   2,FILES       PUT NUMBER OF REC'S IN REG 2               00331\n         CLC   ID(2),=C'SR'                                             00332\n         BE    SREX                                                     00333\nBSEX     MVC   OUTCCW+8(8),BSCCW   SET UP BS CCW                        00334\nBSAGN    EQU   *                                                        00335\n         BAL   11,IOOUT      EXECUTE THE CCW                            00336\n         CLI   OUTECB,X'7F'  EVERYTHING OK                              00337\n         BE    BCT6          YES, DO AGAIN TILL COUNT = 0               00338\n         B     TAPERR        NO, END THIS ROUTINE                       00339\nBCT6     EQU   *                                                        00340\n         BCT   2,BSAGN       DECREMENT THE COUNT AND DO AGAIN           00341\n         B     ASKAGN        ALL FINISHED WITH THIS ROUTINE             00342\nSREX     MVC   OUTCCW+8(8),SRCCW   SET UP SR CCW                        00343\n         B     BSAGN               GO DO AGAIN                          00344\n         SPACE 1                                                        00345\nENTERR   EQU   *                                                        00346\n         WTO   'NUMBR OF REC''S ENTRY MUST BE 4 NUMERIC CHARACTERS'     00347\n         B     RECRTY                                                   00348\n         SPACE 1                                                        00349\n         EJECT                                                          00350\n*  CARD TO CARD REPRODUCE                                               00351\n         SPACE 1                                                        00352\nCC       EQU   *                                                        00353\n         XC    SEQCNTR,SEQCNTR         CLEAR SEQ COUNTER                00354\n         BAL   11,SEARCH           LOOK FOR CHARACTER                   00355\n         DC    C'S'                SEE IF SHOULD SEQUENCE               00356\n         DC    AL1(20)             LENGTH OF SEARCH                     00357\n         MVI   SEQ+1,0             NO OP BRANCH                         00358\n         BE    *+8                 BRANCH IF SHOULD SEQUENCE            00359\n         MVI   SEQ+1,X'F0'         CAUSE BRANCH IF NOT TO SEQ           00360\n         BAL   11,RDRUCB           GO SET UP CCW,DEB,DEV ADRS FOR RDR   00361\n         BAL   11,PCHUCB           GO GET ADRS OF PUNCH                 00362\nCCPNCH   EQU   *                                                        00363\nCCLOOP   EQU   *                                                        00364\n         BAL   11,IOIN       READ A CARD                                00365\n         CLI   INECB,X'7F'         EVERYTHING OK                        00366\n         BE    CC1                 YES, BRANCH                          00367\n         TM    INSTAT+4,X'01'    EOF                                    00368\n         BC    1,FEEDBK            GO FEED TWO BLANK CARDS              00369\n         B     RDRERROR      READER ERROR, END THIS ROUTINE             00370\nCC1      EQU   *                                                        00371\nSEQ      NOP   *+8                 BRANCH NO SEQ                        00372\n         BAL   10,SEQCRD           GO TO SEQ ROUTINE                    00373\n         BAL   11,IOOUT      PUNCH A CARD                               00374\n         CLI   OUTECB,X'7F'        EVERYTHING OK                        00375\n         BE    CCLOOP        YES, LOOP                                  00376\n*                                                                       00377\nPCHERROR WTO   'PUNCH ERROR - EOJ'                                      00378\n         B     ASKAGN                                                   00379\n*                                                                       00380\nFEEDBK   MVI   TDAREA,X'40'        INSERT BLANK                         00381\n         MVC   TDAREA+1(79),TDAREA MAKE ALL BLANKS                      00382\n         BAL   11,IOOUT            GO PUNCH BLANK                       00383\n         CLI   OUTECB,X'7F'        SEE IF ERROR                         00384\n         BNE   PCHERROR            BRANCH IF ERROR                      00385\n         BAL   11,IOOUT            GO PUNCH BLANK                       00386\n         CLI   OUTECB,X'7F'        SEE IF ERROR                         00387\n         BNE   PCHERROR            BRANCH IF ERROR                      00388\n         B     ASKAGN              GO GET NEXT ROUTINE                  00389\n*                                                                       00390\n         SPACE 5                                                        00391\n*    SUB-ROUTINE TO SEQUENCE CARDS                                      00392\n*    LINKAGE   BAL 10,SEQCRD                                            00393\nSEQCRD   SR    11,11               CLEAR REG 11                         00394\n         L     11,SEQCNTR          GET COUNT                            00395\n         LA    11,10(11)           BUMP BY 10                           00396\n         ST    11,SEQCNTR          PUT BACK COUNT                       00397\n         CVD   11,UNPACKAR         UNPACK                               00398\n         L     2,OUTCCW            GET ADDRESS OF OUTPUT AREA           00399\n         UNPK  72(8,2),UNPACKAR(8) UNPACK SEQUENCE NUMBER               00400\n         OI    79(2),X'F0'         MAKE Z ONE PRINTABLE                 00401\n         BR    10                                                       00402\n*                                                                       00403\nUNPACKAR DC    D'0'                                                     00404\nSEQCNTR  DC    F'0'                                                     00405\n         EJECT                                                          00406\n*********************************************************************** 00407\n*                                                                     * 00408\n*   THIS IS A COMMON ROUTINE FOR FINDING A CARD READER TO BE USED BY  * 00409\n*   DEBE. IT WILL FIRST SCAN THE MESSAGE INPUT AREA FOR A READER      * 00410\n*   DEVICE ADDRESS. FAILING THAT IT WILL SCAN THE UCB'S FOR AN UN-    * 00411\n*   ALLOCATED ONLINE CARD READER. IF STILL NOT FOUND IT WILL ASK FOR  * 00412\n*   THE ADDRESS OF A USABLE CARD READER.                              * 00413\n*                                                                     * 00414\n*   LINKAGE TO THIS ROUTINE IS  BAL 11,RDRUCB                         * 00415\n*                                                                     * 00416\n*********************************************************************** 00417\n         SPACE                                                          00418\nRDRUCBSV DC    11F'0'                                                   00419\n         SPACE                                                          00420\nRDRUCB   STM   1,11,RDRUCBSV       SAVE WORK REGISTERS                  00421\n         SPACE                                                          00422\n         LA    2,ID                GET ADRS OF MSG AREA                 00423\n         LA    3,L'ID-5            GET LENTH OF SEARCH                  00424\nRDRUC1   TM    2(2),X'C0'          SEE IF CRT IN FRONT IS ALPHA         00425\n         BO    RDBPAG              BRANCH IF ALPHA                      00426\n         TM    6(2),X'C0'          SEE IF CRT IN BACK  IS ALPHA         00427\n         BO    RDBPAG              BRANCH IF ALPHA                      00428\n         LA    4,3                 GET NUMBER OF CHARACTERS IN ADRS     00429\n         LR    5,2                 GET ADRS OF SEARCH                   00430\nRDALP    TM    3(5),X'C0'          SEE IF NOT ALPHAMERIC                00431\n         BNO   RDBPAG              BRANCH IF NOT                        00432\n         LA    5,1(5)              BUMP ADRS OF SEARCH                  00433\n         BCT   4,RDALP             BRANCH TO LOOK AGAIN                 00434\n         MVC   READER1(3),0(2)     GET CARD READER ADRS FROM MSG AREA   00435\nRDUPPER  OC    READER1(3),=3X'40'  MAKE UPPER CASE                      00436\n         B     RDRPCS              BRANCH TO CONTINUE PROCESSING        00437\nRDBPAG   LA    2,1(2)              BUMP SEARCH ADRS                     00438\n         BCT   3,RDRUC1            GO GET NEXT CHARACTERS               00439\n         B     RDRADSNF            ASK FOR RDR ADRS                     00440\nRDNXTUCB LA    6,2(6)              BUMP POINTER TO UCB ADRS TABLE       00441\n         B     RUCBLOK             GO GET NEXT UCB ADRS                 00442\nRDRPCS   EQU   *                                                        00443\n         L     6,16                GET ADRS OF CVT                      00444\n         L     6,40(6)             GET ADRS OF UCB ADRS TABLE           00445\nRUCBLOK  LH    7,0(6)              GET UCB ADRS                         00446\n         LTR   7,7                 SEE IF GOOD ADRS                     00447\n         BZ    RDNXTUCB            BRANCH NO ADRS                       00448\n         BM    RDDEVNF             BRANCH - NO UCB FOUND                00449\n         CLI   2(7),X'FF'          SEE IF VALID UCB                     00450\n         BNE   RDNXTUCB            GET NEXT UCB                         00451\n         CLC   READER1(3),13(7)    SEE IF DEVICE ASKED FOR              00452\n         BNE   RDNXTUCB            BRANCH NOT ASKED FOR                 00453\n         CLI   18(7),X'08'         SEE IF UNIT RECORD DEVICE            00454\n         BNE   RDNXTUCB            GET NEXT UCB                         00455\n         CLI   19(7),X'01'         SEE IF 2540 READER                   00456\n         BE    CR2540              BRANCH IF 2540                       00457\n         CLI   19(7),X'06'         SEE IF 3505 READER                   00458\n         BE    CR2540              BRANCH IF 3505 CARD READER           00459\n         CLI   19(7),X'03'         SEE IF 1442 READ/PUNCH               00460\n         BE    RD1442              BRANCH 1442 READ/PUNCH               00461\n         CLI   19(7),X'04'         SEE IF 2501 CARD READER              00462\n         BE    RD2501              BRANCH IF 2501                       00463\n         CLI   19(7),X'05'         SEE IF 2520 READ/PUNCH               00464\n         BE    RD2520              BRANCH IF 2520 READ/PUNCH            00465\n         B     RDNXTUCB            GET NEXT UCB                         00466\nRD2501   EQU   *                                                        00467\nRD1442   EQU   *                                                        00468\nRD2520   EQU   *                                                        00469\n         CLI   16(7),X'01'         SEE IF PUNCH ONLY- FOR 2520/1442     00470\n         BE    RDNXTUCB            GET NEXT UCB IF YES                  00471\nCR2540   EQU   *                                                        00472\n         TM    SYSTYP,X'40'        SEE IF PCP SYSTEM                    00473\n         BO    RDCONTU             BRANCH IF YES                        00474\n         TM    3(7),X'08'          SEE IF DEVICE IS ALLOCATED           00475\n         BO    RDCLIPT             BRANCH ID ALLOCATED                  00476\nRDOFLINE EQU   *                                                        00477\n         CLI   3(7),X'C0'          SEE IF GOING OFFLINE                 00478\n         BNE   RDOFCHK             BRANCH NOT GOING OFFLINE             00479\n         MVC   RDDVOLN+32(3),13(7) GET DEVICE ADRS                      00480\nRDDVOLN  WTO   'DEBE WAITING FOR DEVICE XXX TO GO OFFLINE'              00481\nRDSTMR   EQU   *                                                        00482\n         STIMER WAIT,BINTVL=TIME                                        00483\n         CLI   3(7),X'C0'          SEE IF OFFLINE YET                   00484\n         BE    RDSTMR              BRANCH IF NOT OFFLINE                00485\nRDOFCHK  TM    3(7),X'80'          SEE IF ONLINE                        00486\n         BZ    RDDVOK              BRANCH IF OFFLINE                    00487\n         MVC   RDGNOFF+15(3),13(7) GET DEVICE ADRS                      00488\nRDGNOFF  WTO   'DEVICE XXX CHANGED TO OFFLINE STATUS - DEBE'            00489\n         NI    3(7),X'7F'          CHANGE TO OFFLINE                    00490\nRDDVOK   EQU   *                                                        00491\n         B     RDCONTU             USE DEVICE                           00492\nTIME     DC    A(500)              WAIT FOR 5 SECONDS                   00493\n*                                                                       00494\nRDDEVNF  EQU   *                                                        00495\n         MVC   RDNOUCB+38(3),READER1 GET ADRS SEARCHED                  00496\nRDNOUCB  WTO   'READER UCB NOT FOUND FOR ADRS XXX'                      00497\nRDRADSNF WTOR  'PLEASE ENTER READER ADRS - XXX',READER1,3,REPLYECB      00498\n         BAL   11,WAITANS          WAIT REPLY                           00499\n         B     RDUPPER             GET READER ADRS                      00500\n*                                                                       00501\nRDCLIPT  EQU   *                                                        00502\n         MVC   ASGNMSG+22(3),13(7) GET DEVICE ADRS                      00503\nASGNMSG WTOR 'DEVICE CUU IS ALLOCATED, REPLY ''W'' TO WAIT, ''C'' TO CAX00504\n               NCEL OR A NEW DEVICE ADRS ''CUU''',READER1,3,REPLYECB    00505\n         BAL   11,WAITANS          WAIT FOR REPLY                       00506\n         OC    READER1,=3X'40'     MAKE UPPER CASE                      00507\n         CLI   READER1,C'C'        SEE IF SHOULD CANCEL                 00508\n         BE    EOJ                 GO ASK FOR NEXT ROUTINE              00509\n         CLI   READER1,C'W'        SEE IF WAIT                          00510\n         BNE   RDRPCS              GO SEARCH UCB'S AGAIN                00511\nRDSTAL   STIMER WAIT,BINTVL=TIME                                        00512\n         TM    3(7),X'08'          SEE IF ALLOCATED                     00513\n         BO    RDOFLINE            BRANCH IF ALLOCATED                  00514\n*                                                                       00515\nRDCONTU  EQU   *                                                        00516\n         ST    7,INDEBMOD          STORE UCB ADRS IN DEB                00517\n         CLI   19(7),X'03'         SEE IF 1442                          00518\n         BE    RDCCW1RT            BRANCH IF 1442                       00519\n         CLI   19(7),X'05'         SEE IF 2520                          00520\n         BNE   RDCCW2RT            BRANCH TO 2540 CCW                   00521\nRDCCW1RT MVC   INCCW(8),RD82CCW    MOVE IN CCW FOR  1442/2520           00522\n         B     RDAMFN              BRANCH                               00523\nRDCCW2RT MVC   INCCW(8),RD02CCW    MOVE IN CCW FOR  2540                00524\n*                                                                       00525\nRDAMFN   LM    1,11,RDRUCBSV       RESTORE                              00526\n         BR    11                  RETURN TO USING ROUTINE              00527\n         SPACE 2                                                        00528\nRD82CCW  CCW   X'82',TDAREA,X'20',80  CCW FOR 1442/2520 READER          00529\nRD02CCW  CCW   X'02',TDAREA,X'20',80  CCW FOR 2540 READER               00530\n         EJECT                                                          00531\n*********************************************************************** 00532\n*                                                                     * 00533\n*  THIS IS A COMMON ROUTINE FOR FINDING A CARD PUNCH ADDRESS TO BE    * 00534\n*  USED BY DEBE.  IT WILL FIRST SCAN THE MESSAGE INPUT AREA FOR A     * 00535\n*  PUNCH DEVICE ADDRESS. FAILING THAT IT WILL SCAN THE UCB'S FOR AN   * 00536\n*  UN-ALLOCATED ONLINE CARD READER. IF STILL NOT FOUND IT WILL ASK    * 00537\n*  FOR THE ADDRESS OF A USABLE CARD PUNCH.                            * 00538\n*                                                                     * 00539\n*  LINKAGE TO THIS ROUTINE IS  BAL 11,PCHUCB                          * 00540\n*                                                                     * 00541\n*********************************************************************** 00542\n         SPACE 3                                                        00543\nPCHUCB   STM   1,11,RDRUCBSV       SAVE WORK REGISTERS                  00544\n         LA    2,ID                GET ADRS OF MSG AREA                 00545\n         LA    3,L'ID-5            GET LENGTH OF SEARCH                 00546\nPCHUC1   TM    2(2),X'C0'          SEE IF CHR IN FRONTIS ALPHA          00547\n         BO    PCBPAG              BRANCH IF ALPHA                      00548\n         TM    6(2),X'C0'          SEE IF CHR IN BACK IS ALPHA          00549\n         BO    PCBPAG              BRANCH IF ALPHA                      00550\n         LA    4,3                 GET NUMBER OF CHARACTERS IN ADRS     00551\n         LR    5,2                 GET ADRS OF SEARCH                   00552\nPCALP    TM    3(5),X'C0'          SEE IF ALPHAMERIC                    00553\n         BNO   PCBPAG              BRANCH IF NOT                        00554\n         LA    5,1(5)              BUMP ADRS OF SEARCH                  00555\n         BCT   4,PCALP             BRANCH TO LOOK AGAIN                 00556\n         MVC   PUNCH1(3),0(2)      GET CARD PUNCH ADRS FROM MSG AREA    00557\nPCUPPER  OC    PUNCH1(3),=3X'40'   MAKE UPPER CASE                      00558\n         B     PCHPCS              BRANCH TO CONTINUE PROCESSING        00559\nPCBPAG   LA    2,1(2)              BUMP SEARCH ADRS                     00560\n         BCT   3,PCHUC1            GO GET NEXT CARACTERS                00561\n         B     PCRADSNF            ASK FOR PUNCH ADRS                   00562\nPCHPCS   EQU   *                                                        00563\n         L     6,16                GET ADRS OF CVT                      00564\n         L     6,40(6)             GET ADRS OF UCB ADRS TABLE           00565\nPUCBLOK  LH    7,0(6)              GET UCB ADRS                         00566\n         LTR   7,7                 SEE IF GOOD ADRS                     00567\n         BZ    PCNXTUCB            BRANCH NO ADRS                       00568\n         BM    PCRADSNF      BR END OF TABLE SCAN AGAIN                 00569\n         CLI   2(7),X'FF'          SEE IF VALID UCB                     00570\n         BNE   PCNXTUCB            GET NEXT UCB                         00571\n         CLI   18(7),X'08'         SEE IF UNIT RECORD DEVICE            00572\n         BNE   PCNXTUCB            GET NEXT UCB                         00573\n         CLI   19(7),X'02'         SEE IF 2540 PUNCH                    00574\n         BE    PC2540              BRANCH IF 2540 PUNCH                 00575\n         CLI   19(7),X'0C'         SEE IF 3525 PUNCH                    00576\n         BE    PC2540              BRANCH IF 3525 PUNCH                 00577\n         CLI   19(7),X'03'         SEE IF 1442 READ/PUNCH               00578\n         BE    PC1442              BRANCH IF 1442 READ/PUNCH            00579\n         CLI   19(7),X'05'         SEE IF 2520 READ/PUNCH               00580\n         BE    PC2520              BRANCH IF 252O READ/PUNCH            00581\n         B     PCNXTUCB            GET NEXT UCB                         00582\nPC2520   EQU   *                                                        00583\nPC1442   EQU   *                                                        00584\n         TM    16(7),X'01'   SEE IF PUNCH ONLY FOR 2520.1442            00585\n         BZ    PCNXTUCB      BR IF NOT PUNCH                            00586\nPC2540   EQU   *                                                        00587\n         TM    3(7),X'80'          SEE IF DEVICE IS ONLINE              00588\n         BZ    PCSEASK             GET NEXT UCB                         00589\nPCASK    TM    3(7),X'08'          SEE IF DEVICE ALLOCATED              00590\n         BNO   PCCONTU             BRANCH NOT ALLOCATED                 00591\n         B     PCCLIPT             BRANCH IF ALLOCATED                  00592\nPCNXTUCB LA    6,2(6)              BUMP POINTER TO UCB ADRS TABLE       00593\n         B     PUCBLOK             GO GET NEXT UCB ADRS                 00594\nPCSEASK  CLC   PUNCH1(3),13(7)     SEE IF DEVICE ASKED FOR              00595\n         BE    PCASK               DEVICE REQUESTED - IGNORE OFF LINE   00596\n         B     PCNXTUCB            GET NEXT UCB                         00597\n         SPACE                                                          00598\nPCRADSNF WTOR  'ENTER PUNCH ADRS - XXX',PUNCH1,3,REPLYECB               00599\n         BAL   11,WAITANS          WAIT REPLY                           00600\n         B     PCUPPER             MAKE ADRS UPPER CASE                 00601\n         SPACE                                                          00602\nPCCLIPT  EQU   *                                                        00603\n         XC    TDAREA(3),TDAREA    CLEAR INPUT MSG AREA                 00604\n         TM    SYSTYP,X'40'        SEE IF PCP SYSTEM                    00605\n         BO    PCCONTU             BRANCH IF PCP                        00606\n         MVC   PSGNMSG+23(3),13(7) GET DEVICE ADRS                      00607\nPSGNMSG  WTOR  'DEVICE XXX IS ALLOCATED, STOP WRITER THEN REPLY ''U'' TX00608\n               O USE, ''C'' TO CANCEL OR A NEW DEVICE ADRS XXX',TDAREA,X00609\n               3,REPLYECB                                               00610\n         BAL   11,WAITANS          WAIT ANSWER                          00611\n         OC    TDAREA(3),=3X'40'   MAKE UPPER CASE                      00612\n         CLI   TDAREA,C'U'         SEE IF SHOULD USE                    00613\n         BE    PCCONTU             BRANCH TO CONTINUE                   00614\n         CLC   TDAREA,=C'EOJ'      SEE IF TO END ROUTINE                00615\n         BE    EOJ                 BRANCH TO EOJ                        00616\n         MVC   PUNCH1(3),TDAREA    GET NEW ADRS                         00617\n         B     PCHPCS              LOOK AT UCBS AGAIN                   00618\n         SPACE                                                          00619\nPCCONTU  EQU   *                                                        00620\n         ST    7,OUTDEBMD                                               00621\n         CLI   19(7),X'03'         SEE IF 1442                          00622\n         BE    PCCCWIRT            BRANCH NOT 1442                      00623\n         CLI   19(7),X'05'         SEE IF 252O                          00624\n         BE    PCCCWIRT            BRANCH NOT 2520                      00625\n         B     PC2540CC            BRANCH TO 2540 CCW                   00626\nPCCCWIRT MVC   OUTCCW(8),CCW1442   GET 1442/2520 CCW                    00627\n         B     PCAMFN              BRANCH AROUND NEXT CCW               00628\nPC2540CC MVC   OUTCCW(8),CCW2540   GET 2540 CCW                         00629\nPCAMFN   LM    1,11,RDRUCBSV       RESTORE REGISTERS                    00630\n         BR    11                  RETURN                               00631\n         SPACE 2                                                        00632\nCCW1442  CCW   X'81',TDAREA,X'20',80  CCW FOR 1442/2520 PUNCH           00633\nCCW2540  CCW   X'41',TDAREA,X'20',80  CCW FOR 2540 PUNCH                00634\n         EJECT                                                          00635\n*  CARD TO PRINTER - 80/80 LIST                                         00636\n         CNOP  0,4                                                      00637\n         SPACE 1                                                        00638\nCP       EQU   *                                                        00639\n         BAL   11,RDRUCB           GO SET UP CCW,DEB,DEV ADRS FOR RDR   00640\nCP2      EQU   *                                                        00641\n         BAL   11,OPENPRNT   OPEN SYSPRINT IF NOT OPEN                  00642\n         BAL   11,SKIPTO1    SKIP TO CHANNEL 1                          00643\nCPLOOP   EQU   *                                                        00644\n         BAL   11,IOIN       READ A CARD                                00645\n         CLI   INECB,X'7F'   EVERYTHING OK                              00646\n         BE    CP1           YES, BRANCH                                00647\n         TM    INSTAT+4,X'01'      EOF?                                 00648\n         BC    1,ASKAGN      YES, END THIS ROUTINE                      00649\nRDRERROR WTO   'READER ERROR - EOJ'                                     00650\n         B     ASKAGN              GET NEXT ROUTINE                     00651\nCP1      EQU   *                                                        00652\n         MVC   TDOUTAR(80),TDAREA      CLEAR UPPER PRINT LINE AFTER     00653\n         MVI   TDOUTAR+80,C' '     PUT IN BLANK                         00654\n         MVC   TDOUTAR+81(51),TDOUTAR+80  BLANK OUT AREA                00655\n         BAL   11,TDPRINT    PRINT A CARD                               00656\n         B     CPLOOP        LOOP                                       00657\n         EJECT                                                          00658\n*  CARD TO TAPE                                                         00659\n         SPACE 1                                                        00660\nCT       EQU   *                                                        00661\n         BAL   11,RDRUCB           GO SET UP CCW,DEB,DEV ADRS FOR RDR   00662\n*  SET UP TAPE'S DCB AND DEB                                            00663\n         BAL   10,TPOUTSET   DETERMINE WHICH TAPE UNIT AND SET UP       00664\n         MVC   OUTCCW+8(8),NOOP    MOVE IN NOOP CCW                     00665\n         BAL   11,IOOUT            GO PERFORM NOP                       00666\n         MVC   OUTCCW+8(8),CTCCW   SET UP WRITE CCW                     00667\n         SR    2,2           CLEAR A COUNTER                            00668\nCTLOOP   EQU   *                                                        00669\n         BAL   11,IOIN       READ A CARD                                00670\n         CLI   INECB,X'7F'         EVERYTHING OK                        00671\n         BE    CT1           YES, BRANCH                                00672\n         TM    INSTAT+4,X'01'      EOF                                  00673\n         BC    1,CTEOJ1      YES, WRITE A TAPE MARK                     00674\n         B     RDRERROR      READER ERROR, END THIS ROUTINE             00675\nCT1      EQU   *                                                        00676\n         LA    2,1(2)        INCREMENT A COUNTER                        00677\n         BAL   11,IOOUT      WRITE TO TAPE                              00678\n         CLI   OUTECB,X'7F'        EVERYTHING OK                        00679\n         BE    CTLOOP        YES, LOOP                                  00680\n         SPACE 1                                                        00681\n*  IF OS CAN'T RECOVER FROM THE ERROR, I SURELY WON'T TRY               00682\n         B     TAPERR                                                   00683\nCTEOJ1   EQU   *                                                        00684\n         MVC   COUNT(6),=X'402020202020'     EDIT THE COUNTER           00685\n         CVD   2,TDWK                                                   00686\n         ED    COUNT(6),TDWK+5                                          00687\n         LA    1,MESSAGE                                                00688\n         SVC   35      PRINT THE NUMBER OF CARDS THAT WENT TO TAPE      00689\nCTEOJ    EQU   *                                                        00690\n         MVC   OUTCCW+8(8),WTCCW       SET UP WTM CCW                   00691\n         OI    OUTCCW+12,X'60'     CHAIN IT TO A NOP                    00692\n         MVC   OUTCCW+16(8),=X'0300000020000001'                        00693\n         BAL   11,IOOUT      WRITE A TAPE MARK                          00694\n         CLI   OUTECB,X'7F'        EVERYTHING OK                        00695\n         BNE   TAPERR        NO, BRANCH                                 00696\n         BAL   10,RUOUT            GO REWIND OUTPUT IF ASKED            00697\n         CLC   ID(2),=C'TT'        SEE IF TAPE TO TAPE                  00698\n         BNE   *+8                 BRANCH IF NOT                        00699\n         BAL   10,RUIN             GO REWIND INPUT IF ASKED             00700\n         B     ASKAGN                                                   00701\n         SPACE 4                                                        00702\n*   TAPE TO CARD---WILL UNBLOCK AND PUNCH IN MULT OF 80 CHARACTERS      00703\n         SPACE 1                                                        00704\nTC       EQU   *                                                        00705\n         XC    CNTARA,CNTARA       CLEAR FILE COUNTER                   00706\n         XC    SEQCNTR,SEQCNTR         CLEAR SEQ COUNTER                00707\n         BAL   11,SEARCH           LOOK FOR CHARACTER                   00708\n         DC    C'S'                SEE IF SHOULD SEQUENCE               00709\n         DC    AL1(20)             LENGTH OF SEARCH                     00710\n         MVI   SEQ1+1,0            NO OP A BRANCH                       00711\n         BE    *+8                 BRANCH IF SEQ                        00712\n         MVI   SEQ1+1,X'F0'        SET UP FOR NO SEQ                    00713\n         MVI   CNTARA,0            CLEAR FILE COUNTER                   00714\n         MVI   SW80,0              RESET SWITCH                         00715\n         MVI   SW81,0              RESET SWITCH                         00716\n         MVI   SW82,0                   RESET SWITCH                    00717\n         BAL   10,TAPINSET         DETERMINE WHICH TAPE UNIT AND SET UP 00718\n         BAL   10,TPFILS           GO SEE HOW MANY FILES                00719\n         BAL   11,PCHUCB           GO GET ADRS OF PUNCH                 00720\nTCPCH    EQU   *                                                        00721\n         SPACE                                                          00722\n         MVC   SAVCCW(4),OUTCCW                                         00723\n         MVC   INCCW+8(8),NOOP     MOVE IN NOOP CCW                     00724\n         BAL   11,IOIN             GO PERFORM NOOP                      00725\n         MVC   INCCW+8(8),TDINCCW  SET UP READ CCW                      00726\nTCLOOP   EQU   *                                                        00727\n         MVC   OUTCCW(4),SAVCCW                                         00728\n         BAL   11,IOIN       READ A RECORD                              00729\n         CLI   INECB,X'7F'         EVERYTHING OK                        00730\n         BE    TC1            YES, BRANCH                               00731\n         TM    INSTAT+4,X'01'      EOF                                  00732\n         BC    8,TAPERROR               TAPE ERROR END ROUTINE          00733\n         CNOP  0,4                      ALIGN                           00734\n         BAL   10,NXTFL                 GO TO EOF SUBROUTINE            00735\n         DC    A(TCLOOP)                CONTINUE RETURN ADDRESS         00736\nTC1      EQU   *                                                        00737\n         MVI   SW82,0                   RESET SWITCH                    00738\n         LH    2,INSTAT+6          GET RESIDUAL COUNT                   00739\n         LH    3,TDINCCW+6         GET BEGINNING COUNT                  00740\n         SR    3,2                 GET BYTES READ IN                    00741\nTC2      EQU   *                                                        00742\n         C     3,=F'80'   SEE IF RESIDUAL CNT IS 80                     00743\n         BNL   SEQ1   BRANCH IF AT LEAST 1 MORE CARD TO PUNCH           00744\n         L     2,OUTCCW            GET ADDRESS OF OUTPUT AREA           00745\n         LA    2,0(3,2)            BUMP BY BYES TO BLANK OUT            00746\nTAG1     MVC   0(80,2),=80C' '      BLANK OUT FIELD                     00747\nSEQ1     NOP   *+8                 BRANCH IF NO SEQ                     00748\n         BAL   10,SEQCRD           GO TO SEQ ROUTINE                    00749\n         BAL   11,IOOUT      PUNCH 80 BYTES OF RECORD                   00750\n         CLI   OUTECB,X'7F'        EVERYTHING OK                        00751\n         BE    CNTDN               GO SEE IF SHOULD PUNCH AGAIN         00752\n         B     PCHERROR      PUNCH ERROR, END ROUTINE                   00753\nSAVCCW   DC    F'0'                                                     00754\n*                                                                       00755\nCNTDN    EQU   *                                                        00756\n         L     2,OUTCCW            GET ADDRESS OF OUTPUT AREA           00757\n         LA    2,80(2)             BUMP BY 80                           00758\n         ST    2,OUTCCW            STORE BUMPED OUTPUT ADDRESS          00759\n         MVC   OUTCCW(1),SAVCCW                                         00760\n*                                                                       00761\n         S     3,=F'80'            SUBTRACT 80 FROM BYTES READ          00762\n         BH    TC2                 BRANCH IF ALL OF RECORD NOT PUNCHED  00763\n         BE    TCLOOP              GO READ NEXT RECORD                  00764\n         TS    SW80                SEE IF MSG WRITTEN                   00765\n         BNZ   NOTE2               BRANCH IF MSG WRITTEN ONCE           00766\n         WTO   '***CAUTION***--CARD PUNCHED NOT MULT OF 80 CHARACTERS'  00767\nNOTE2    EQU   *                                                        00768\n       TS      SW81                SEE IF SECOND MESSAGE IS PRINTED     00769\n         BNZ   TCLOOP              BRANCH IF MSG WRITTEN ONCE           00770\n         WTO   'LAST WARNING--ANOTHER NON-80 CHARACTER CARD PUNCHED'    00771\n         B     TCLOOP              GO READ NEXT RECORD                  00772\n         SPACE 3                                                        00773\n*        ROUTINE FOR SENSING EOF - TC,TP & TD                           00774\n*                                                                       00775\n*        LINKAGE FOR EOF SUBROUTINE                                     00776\n*        BAL   10,NXTFL                 BRANCH TO SUBROUTINE            00777\n*        DC    A(LABEL TO CONTINUE PROCESSING)                          00778\n*                                                                       00779\nNXTFL    EQU   *                                                        00780\n         ST    10,SVRTNR           SAVE REG                             00781\n         SR    11,11               CLEAR REG                            00782\n         LH    11,CNTARA                GET CNT                         00783\n         LA    11,1(11)            ADD ONE                              00784\n         STH   11,CNTARA                STORE COUNT                     00785\n         CVD   11,TDWK             CONVERT TO DEC                       00786\n         UNPK  FICNT(3),TDWK+5(3)       UNPACK FILE CNT                 00787\n         OI    FICNT+2,X'F0'       MAKE SIGN A ZONE                     00788\n         CNOP  0,4                 ALIGN ON WORD                        00789\nMSGFIL   WTO   'OS-DEBE COMPLETED FILE 000'                             00790\nFICNT    EQU   *-5                 ADDRESS OF MSG CNT                   00791\n         CLC   ID(2),=C'TP'   SEE IF TP                                 00792\n         BE    TDRCT               BRANCH IF SAME                       00793\n         CLC   ID(2),=C'TD'   SEE IF TD                                 00794\n         BE    TDRCT               BRANCH IF SAME                       00795\n         CLC   ID(2),=C'TF'  DOS OS OLP                                 00796\n         BNE   FICNT1                                                   00797\n         BAL   11,SKIPTO2                                               00798\n         B     FICNT1                                                   00799\n         SPACE   3                                                      00800\nTDRCT    BAL   11,SPACE1           SPACE                                00801\n         BAL   11,SPACE1           SPACE                                00802\n         MVC   TDOUTAR+30(26),MSGFIL+8     GET FILE MSG                 00803\n         BAL   11,TDPRINT          GO PRINT                             00804\n         BAL   11,SKIPTO1          SKIP                                 00805\nFICNT1   CLC   FILES+5(3),=C'ALL'      SEE IF ALL                       00806\n         BNE   NXTFLA              BRANCH AROUND DBL FILE MAR TST       00807\n         TS    SW82                     SET EOF SWITCH                  00808\n         BC    4,*+8               SEE IF DOUBLE FILE MARK              00809\n         B     RETNRT                   GET NEXT RECORD                 00810\n         BAL   10,RUIN             GO SEE IF SHOULD REWIND/UNLOAD       00811\n         B     ASKAGN              GO GET NEXT ROUTINE ID               00812\n*                                                                       00813\nNXTFLA   CLC   CNTARA(2),FILES+6    SEE IF FINISHED                     00814\n         BL    RETNRT              BRANCH TO GET NEXT RECORD            00815\n         BAL   10,RUIN             GO SEE IF SHOULD REIND/UNLOAD        00816\n         CLC   ID(2),=C'TC'         SEE IF TAPE TO CARD                 00817\n         BE    FEEDCD              GO FEED CARDS                        00818\n         B     ASKAGN              BACK TO ROUTINE ID                   00819\n*                                                                       00820\n*        RETURN ROUTINE                                                 00821\nRETNRT   L     11,SVRTNR           GET RETURN POINTER                   00822\n         L     10,0(11)            GET RETURN ADDRESS                   00823\n         CLC   ID(2),=C'TF'  OLP TAPES                                  00824\n         BNE   RETNRT1                                                  00825\n         LA    10,RDTAPE                                                00826\nRETNRT1  DS    0H                                                       00827\n         BR    10                  RETURN                               00828\n*                                                                       00829\nFEEDCD   EQU   *                                                        00830\n         MVI   TDAREA,X'40'        GET BLANK                            00831\n         MVC   TDAREA+1(79),TDAREA MAKE BLANKS                          00832\n         LA    3,80                MAKE COUNT 80                        00833\n         STH   3,OUTCCW+6          STORE COUNT                          00834\n         BAL   11,IOOUT            FEED BLANK                           00835\n         BAL   11,IOOUT            FEED BLANK                           00836\n         B     ASKAGN              GET NEXT ROUTINE                     00837\n*                                                                       00838\nSVRTNR   DC    F'0'                RETURN ADDRESS SAVE AREA             00839\nCNTARA   DC    H'0000'             FILE COUNTER                         00840\nSW80     DC    X'00'               MESSAGE SW                           00841\nSW81     DC    X'00'               MESSAGE SW                           00842\nSW82     DC    X'00'                    FILES SWITCH                    00843\n         SPACE 4                                                        00844\n         EJECT                                                          00845\n         CNOP  0,4                                                      00846\n*  PRINT A TAPE                                                         00847\nTP       EQU   *                                                        00848\n*  TP USES THE TD ROUTINE WITHOUT THE HEX-TO-CHARACTER CONVERSION       00849\n         OI    TD3+1,X'F0'         SET SWITCHES IN TD                   00850\n         OI    TD6+1,X'F0'                                              00851\n         SPACE 1                                                        00852\n*  PRINT A TAPE IN HEX UNLESS SWITCHES SET BY TP                        00853\n         SPACE 1                                                        00854\nTD       EQU   *                                                        00855\n         MVI   SW82,0         RESET EOF SWITCH                          00856\n         BAL   11,OPENPRNT   OPEN SYSPRINT IF NECESSARY                 00857\n         BAL   11,SKIPTO1     SKIP TO CHANNEL 1                         00858\n         XC    CNTARA,CNTARA       CLEAR FILE COUNTER                   00859\n*  SET UP TAPE'S DCB AND DEB                                            00860\n         BAL   10,TAPINSET         DETERMINE WHICH TAPE UNIT AND SET UP 00861\n         BAL   10,TPFILS           SEE HOW MANY FILES                   00862\n         MVC   INCCW+8(8),NOOP     MOVE IN NOOP CCW                     00863\n         BAL   11,IOIN             GO PERFORM NOOP                      00864\n         MVC   INCCW+8(8),TDINCCW  SET UP READ CCW                      00865\n         BAL   11,TDPRINT    PRINT THE HEADING LINE                     00866\nTDAGN    BAL   11,SPACE1      SPACE A LINE                              00867\n         SP    RECCNT(3),RECCNT(3) CLEAR THE RECORD COUNTER             00868\nTDLOOP   EQU   *                                                        00869\n         BAL   11,IOIN        READ A RECORD                             00870\n         CLI   INECB,X'7F'         EVERYTHING OK                        00871\n         BE    TD1           YES, BRANCH                                00872\n         TM    INSTAT+4,X'01'      EOF                                  00873\n         BC    1,TDEOJ       YES, GO END ROUTINE                        00874\n         B     TAPERROR                                                 00875\n         SPACE 1                                                        00876\n*  IF OS CAN'T RECOVER FROM THE ERROR, I SURELY WON'T TRY               00877\nTD1      EQU   *                                                        00878\n         MVI   SW82,0         RESET EOF SWITCH                          00879\n         LH    2,INSTAT+6          GET RESIDUAL COUNT                   00880\n         LH    3,TDINCCW+6         GET BEGINING COUNT                   00881\n         SR    3,2                 GET BYTES READ IN                    00882\nUNFMTD   EQU   *                                                        00883\n         CVD   3,TDWK                                                   00884\n         MVI   TDOUTAR,C' '        CLEAR PRINT LINE                     00885\n         MVC   TDOUTAR+1(131),TDOUTAR                                   00886\n         MVC   TDOUTAR+102(23),RECHDG  SET UP LINE INFORMATION          00887\n         ED    TDOUTAR+119(6),TDWK+5                                    00888\n         AP    RECCNT(3),COND1(1)      INCREMENT RECORD COUNTER         00889\n         ED    TDOUTAR+105(6),RECCNT                                    00890\n         LA    2,TDAREA      GET READY FOR HEX CONVERSION               00891\n         LA    5,TDAREA                                                 00892\n         LA    7,80                                                     00893\nTD6      BC    0,TD7         SET TO BRANCH BY TP ROUTINE                00894\n*  R2 POINTS TO THE INPUT AREA                                          00895\n*  R5 POINTS TO THE OUTPUT AREA                                         00896\n         L     5,=A(TDAREA2)                                            00897\n         LA    7,50                                                     00898\n         BAL   14,UNPK       GO CONVERT 50 BYTES TO 100 HEX             00899\nTD7      EQU   *                                                        00900\n         CR    3,7           SHORT LINE TO BE PRINTED                   00901\n         BL    TD3           YES, GO DO THE MOVE                        00902\n         TM    TD6+1,X'F0'         SEE IF TP                            00903\n         BNO   HX                  BRANCH IF NOT TP                     00904\n         MVC   TDOUTAR(80),0(5)    DO 80 BYTE MVBE                      00905\n         B     TDPR                                                     00906\nHX       EQU   *                                                        00907\n         MVC   TDOUTAR(100),0(5)   ELSE DO 100 BYTE MOVE                00908\nTDPR     EQU   *                                                        00909\n         BAL   11,TDPRINT     PRINT A LINE                              00910\n         MVI   TDOUTAR,C' '        CLEAR OUTPUT AREA                    00911\n         MVC   TDOUTAR+1(131),TDOUTAR                                   00912\n         SR    3,7           DECREMENT BLKSIZE                          00913\n         BC    12,TD9         BRANCH IF BLOCK FINISHED                  00914\n         AR    2,7            ELSE, INCREMENT COUNTERS                  00915\n         AR    5,7                                                      00916\n         B     TD6           AND LOOP                                   00917\nTD3      BC    0,TD4         SET TO BRANCH BY TP ROUTINE                00918\n         LR    11,3          GET REMAINDER OF DATA IN 11                00919\n         AR    11,3          DOUBLE IT BECAUSE IT'S UNPACKED            00920\n         BCTR  11,0          DECREMENT ONE FOR THE MOVE                 00921\n         EX    11,MVCOML                                                00922\n         B     TDPR          GO PRINT SHORT LINE                        00923\nTD4      EQU   *                                                        00924\n         BCTR  3,0                                                      00925\n         EX    3,MVCOML                                                 00926\n         B     TDPR           GO PRINT SHORT LINE                       00927\nMVCOML   MVC   TDOUTAR(0),0(5)        COMMON MOVE INSTRUCTION           00928\nUNPK     EQU   *             CONVERT 50 BYTES TO 100 BYTES HEX          00929\n         UNPK  0(15,5),0(8,2)                                           00930\n         UNPK  14(15,5),7(8,2)                                          00931\n         UNPK  28(15,5),14(8,2)                                         00932\n         UNPK  42(15,5),21(8,2)                                         00933\n         UNPK  56(15,5),28(8,2)                                         00934\n         UNPK  70(15,5),35(8,2)                                         00935\n         UNPK  84(15,5),42(8,2)                                         00936\n         UNPK  98(3,5),49(2,2)                                          00937\n         TR    0(100,5),TDPTABLE-240                                    00938\n         BR    14                                                       00939\nTD9      EQU   *                                                        00940\n         BAL   11,SPACE1     SPACE A LINE AFTER WHOLE BLOCKED           00941\n         B     TDLOOP                                                   00942\nTDEOJ    EQU   *                                                        00943\n         CNOP  0,4                 ALIGN ON WORD BOUNDRY                00944\n         BAL   10,NXTFL            GO SEE IF MORE FILES                 00945\n         DC    A(TDAGN)            RETURN ADDRESS                       00946\n         B     ASKAGN                                                   00947\n         EJECT                                                          00948\n*********************************************************************** 00949\n*                                                                     * 00950\n*      THIS ROUTINE IS USED TO FORMAT PRINT A TAPE.  THE TAPE TO BE   * 00951\n*      PRINTED MAY BE BLOCKED OR UNBLOCKED.                           * 00952\n*                                                                     * 00953\n*********************************************************************** 00954\n         SPACE 1                                                        00955\n         CNOP  0,4                                                      00956\nTF       EQU   *                                                        00957\n         MVI   SW82,0              RESET END OF FILE SWITCH             00958\n         NI    OPENSW,0                                                 00959\n         CLOSE (PRINT)                                                  00960\n         MVI   PRINT+36,X'84'   ASA                                     00961\n         BAL   11,OPENPRNT        OPEN SYSPRINT IF NECESSARY            00962\n         MVI   OPCODE,C'1'   SKIP T  CHAN 1                             00963\n         BAL   11,SKIPTO2                                               00964\n         MVC   INCCW+8(8),TDINCCW  SET UP READ CCW                      00965\n         BAL   10,TAPINSET         GET TAPE ADRS AND MODE               00966\n         XC    CNTARA,CNTARA  CLEAR                                     00967\n         BAL   10,TPFILS           SEE HOW MANY FILES                   00968\n*                                                                       00969\nRDTAPE   EQU   *                                                        00970\n         BAL   11,IOIN             READ A TAPE RECORD                   00971\n         CLI   INECB,X'7F'         WAS AN ERROR ENCOUNTERED             00972\n         BE    TF1                 BRANCH NO ERROR                      00973\n         TM    INSTAT+4,X'01'      SEE ID EOF                           00974\n         BC    1,TFEOF                                                  00975\n         B     TAPERROR            BRANCH TO ERROR MSG                  00976\n         SPACE 1                                                        00977\n*    FIND RECORD LENGTH AND FORMAT IF POSSABLE.                         00978\n         SPACE 1                                                        00979\nTF1      EQU   *                                                        00980\n         XC    ADDR,ADDR     CLEAR                                      00981\n         MVI   TFBYP+1,0     RESET                                      00982\n         MVI   SW82,0              RESET EOF SWITCH                     00983\n         LH    2,INSTAT+6          GET RESIDUAL COUNT                   00984\n         LH    3,TDINCCW+6         GET BEGINNING COUNT                  00985\n         SR    3,2                 RESULT IS LENGTH OF RECORD           00986\n         SR    4,4                 CLEAR REGISTER                       00987\n         SR    5,5                 CLEAR REGISTER                       00988\n         LR    5,3                 GET RECORD LENGTH                    00989\n         LA    6,133               PUT 133 INTO REG                     00990\n         DR    4,6                 DIVIDE BY 133                        00991\n         C     4,=F'0'             SEE IF WAS MULT OF 133               00992\n         BE    FORMAT              BRANCH IF MULT OF 133                00993\n         SR    4,4                                                      00994\n         SR    5,5                                                      00995\n         LR    5,3                                                      00996\n         LA    6,134                                                    00997\n         DR    4,6           DOS OLP                                    00998\n         C     4,=F'0'       MULT OF 134                                00999\n         BNE   ONE21                                                    01000\n         LA    1,1                                                      01001\n         ST    1,ADDR                                                   01002\n         BCTR  6,0                                                      01003\n         B     FORMAT                                                   01004\nONE21    DS    0H                                                       01005\n*                                                                       01006\n         SR    4,4                 CLEAR REGISTER                       01007\n         SR    5,5                 CLEAR REGISTER                       01008\n         LR    5,3                 GET RECORD LENGTH                    01009\n         LA    6,121               PUT 121 INTO REG                     01010\n         DR    4,6                 DIVIDE BY 121                        01011\n         C     4,=F'0'             SEE IF WAS MULT OF 121               01012\n         BNE   UNFMTD                                                   01013\nFORMAT   DS    0H                                                       01014\n         LR    7,6           SAVE                                       01015\n         MVI   TDOUTAR,C' '                                             01016\n         MVC   TDOUTAR+1(131),TDOUTAR                                   01017\n         LA    5,TDAREA                                                 01018\n         BCTR  6,0           DECR FOR MOVE                              01019\nFMFPUT   DS    0H                                                       01020\n         CLI   0(5),X'00'    HDR                                        01021\n         BNE   TFENDTST                                                 01022\nTMSG1    MVC   RNO(6),1(5)   REPORT NO                                  01023\n         MVC   PNO(4),7(5)   PAPER NO                                   01024\n         XC    TFECB,TFECB   CLEAR                                      01025\n         MVI   TFID,C' '                                                01026\n         MVC   TFID+1(39),TFID                                          01027\n         LA    1,TFMSG                                                  01028\n         SVC   35                                                       01029\n         WAIT  ECB=TFECB                                                01030\n         OC    TFID(2),=C'  '   UPPER CASE                              01031\n         CLC   TFID(2),=C'GO'  PROCEED                                  01032\n         BE    TFHDR                                                    01033\n         CLC   TFID(2),=C'SF'  SPACE OLP FILE                           01034\n         BNE   TMSG1                                                    01035\n          MVI   TFBYP+1,X'F0'  SET BYPASS SW.                           01036\n         B     TFHDR                                                    01037\nTFENDTST  DS   0H                                                       01038\n         CLI   0(5),X'FF'    TRAILER                                    01039\n         BE    TFEOF                                                    01040\nTFBYP    BC    0,TFHDR                                                  01041\n         EX    6,MVCOML                                                 01042\n         BAL   11,TDPRINTA                                              01043\n         MVI   TDOUTAR,C' '                                             01044\n         MVC   TDOUTAR+1(131),TDOUTAR                                   01045\nTFHDR    DS    0H                                                       01046\n         S     3,ADDR                                                   01047\n         SR    3,7           DECR BLKSIZE                               01048\n         BC    12,RDTAPE   BR IF BLK FINISHED                           01049\n         A     5,ADDR                                                   01050\n         AR    5,7           NXT                                        01051\n         B     FMFPUT        NXT LINE                                   01052\nTFEOF    DS    0H                                                       01053\n         MVI   TFBYP+1,0     RESET                                      01054\n         LH    11,CNTARA                                                01055\n         LA    11,1(,11)                                                01056\n         STH   11,CNTARA                                                01057\n         CVD   11,TDWK                                                  01058\n         UNPK  TFCNT(3),TDWK+5(3)                                       01059\n         OI    TFCNT+2,X'F0'                                            01060\n         CNOP  0,4                                                      01061\n         WTO   'OS-DEBE COMPLETED FILE 000'                             01062\nTFCNT    EQU   *-5                                                      01063\n         CLC   FILES+5(3),=C'ALL'                                       01064\n         BNE   FMTA                                                     01065\n         TS    SW82                                                     01066\n         BC    4,*+8                                                    01067\n         B     RDTAPE                                                   01068\nTFEND    BAL   10,RUIN                                                  01069\n         NI    OPENSW,0                                                 01070\n         CLOSE (PRINT)                                                  01071\n         MVI   PRINT+36,X'82'   MACH                                    01072\n         B     ASKAGN                                                   01073\nFMTA     CLC   CNTARA(2),FILES+6   FINISHED                             01074\n         BL    RDTAPE                                                   01075\n         B     TFEND                                                    01076\nTDPRINTA DS    0H                                                       01077\n         PUT   PRINT,TDOUTAR                                            01078\n         BR    11                                                       01079\n*                                                                       01080\nTFMSG    DS    0F                                                       01081\n         DC    AL1(40)                                                  01082\n         DC    AL3(TFID)                                                01083\n         DC    A(TFECB)                                                 01084\n         DC    AL2(TFLEN)                                               01085\n         DC    H'0'                                                     01086\nTFMSG0   DC    C'REPORT - '                                             01087\nRNO      DC    C'XXXXXX'                                                01088\n         DC    C' PAPER - '                                             01089\nPNO      DC    C'XXXX'                                                  01090\n         DC    C' REPLY GO WHEN READY'                                  01091\nTFLEN    EQU   *-TFMSG0+4                                               01092\nTFECB    DC    F'0'                                                     01093\nADDR     DC    F'0'                                                     01094\nTFID     DC    CL40' '                                                  01095\n         EJECT                                                          01096\n*  TAPE TO TAPE COPY                                                    01097\n         SPACE 1                                                        01098\nTT       EQU   *                                                        01099\n         BAL   10,TAPINSET    DETERMINE WHICH TAPE UNIT AND SET UP      01100\n         BAL   10,TPFILS  GO SEE HOW MANY FILES TO PROCESS              01101\nTTZ      BAL   10,TPOUTSET    DETERMINE WHICH TAPE UNIT AND SET UP      01102\n         CLC INDEBMOD(4),OUTDEBMD    SEE IF THE SAME TAPE FOR IN - OUT  01103\n         BE    STERR              BRANCH IF SAME TAPE                   01104\n         MVC   INCCW+8(8),NOOP     MOVE IN NOOP CCW                     01105\n         BAL   11,IOIN             GO PERFORM NOOP                      01106\n         MVC   OUTCCW+8(8),NOOP    MOVE IN NOOP CCW                     01107\n         BAL   11,IOOUT            GO PERFORM NOP                       01108\n         MVC   INCCW+8(8),TDINCCW  SET UP READ CCW                      01109\n         MVI   EOFSW,X'00'         RESET EOF SWITCH                     01110\n         MVI   EOJTT+1,X'00'       NOP EOJ BRANCH                       01111\nTTLOOP   EQU   *                                                        01112\n         BAL   11,IOIN        READ A BLOCK                              01113\n         CLI   INECB,X'7F'                                              01114\n         BE    TT1           EVERYTHING OK, BRANCH                      01115\n         TM    INSTAT+4,X'01'                                           01116\n         BNO   TAPERROR            BRANCH IF NOT EOF                    01117\n         BAL   10,TTEOF            GO SEE IF MORE FILES                 01118\n         B     TTLOOP          GO GET NEXT RECORD                       01119\n         SPACE 1                                                        01120\n*  IF OS CAN'T RECOVER FROM THE ERROR, I SURELY WON'T TRY               01121\nTAPERROR EQU   *                                                        01122\n         BAL   10,RUIN             GO SEE IF TO REWIND INPUT            01123\n         CLC   ID(2),=C'TT'        SEE IF TAPE TO TAPE                  01124\n         BNE   *+8                 BRANCH IF NOT                        01125\n         BAL   10,RUOUT            SEE IF SHOULD REWIND/UNLOAD          01126\n         WTO   'INPUT TAPE ERROR - EOJ'                                 01127\n         B     ASKAGN                                                   01128\n         SPACE 3                                                        01129\nSTERR  WTO 'SAME TAPE FOR INPUT AND OUTPUT - USE ANOTHER OUTPUT TAPE'   01130\n         B     TTZ                 GET NEW TAPE ADDRESS                 01131\n         SPACE 3                                                        01132\nTT1      LH    2,INSTAT+6          GET RESIDUAL COUNT                   01133\n         LH    3,TDINCCW+6         GET BEGINNING COUNT                  01134\n         SR    3,2           COMPUTE BYTES READ IN                      01135\n         STH   3,TTCCWOUT+6        SET UP WRITE CCW                     01136\n         MVC   OUTCCW+8(8),TTCCWOUT                                     01137\n         MVI   EOFSW,X'00'         RESET EOF SWITCH                     01138\n         BAL   11,IOOUT      WRITE A BLOCK                              01139\n         CLI   OUTECB,X'7F'        EVERYTHING OK                        01140\n         BE    TTLOOP        YES, LOOP                                  01141\n         SPACE 1                                                        01142\n*  IF OS CAN'T RECOVER FROM THE ERROR, I SURELY WON'T TRY               01143\nTAPERR   EQU   *                                                        01144\n         BAL   10,RUOUT            GO SEE IF TO REWIND OUTPUT           01145\n         CLC   ID(2),=C'TT'        SEE IF TAPE TO TAPE                  01146\n         BNE   *+8                 BRANCH IF NOT                        01147\n         BAL   10,RUIN             SEE IF SHOULD REWIND/UNLOAD          01148\n         WTO   'OUTPUT TAPE ERROR - EOJ'                                01149\n         B     ASKAGN                                                   01150\n         EJECT                                                          01151\nRW       EQU   *                                                        01152\n         BAL   10,TPOUTSET         DETERMINE WHICH TAPE UNIT AND SET UP 01153\n         MVC   OUTCCW+8(8),RWCCW   SET UP REWIND CCW                    01154\n         BAL   11,IOOUT            EXECUTE THE REWIND                   01155\n         B     ASKAGN                                                   01156\n         SPACE 3                                                        01157\nWT       EQU   *                                                        01158\n         BAL   10,TPOUTSET     DETERMINE WHICH TAPE UNIT AND SET UP     01159\n         B     CTEOJ         GO WRITE A TAPE MARK                       01160\n       SPACE 3                                                          01161\n*    THIS ROUTINE IS USED TO CHANGE LABELS ON ALL DIRECT ACCESS DEVICES 01162\n*    EXECPT THE 2321.                                                   01163\n*    IT REQUIRES THE DISK PACK BE VARIED OFF LINE AND IS NOT BEING      01164\n*    USED BY THE OPERATING SYSTEM. THIS ROUTINE IS BRANCHED TO WHEN ONE 01165\n*    OF TWO SETS OF ROUTINE ID CHARACTERS ARE ENTERED. (CL OR LA)       01166\n       SPACE 3                                                          01167\nCLIP     EQU   *                                                        01168\n         MVC   ID(2),=C'CL'        MAKE ROUTINE CHACTERS CONSISTANT     01169\n         XC    TDAREA(80),TDAREA   CLEAR I/O AREA                       01170\n         SPACE 2                                                        01171\n* THE FOLLOWING CODE IS USED TO SEARCH THE ADDRESS TO BE CLIPPED        01172\n* WHEN A ONE LINE ENTRY IS USED.                                        01173\n         SPACE 1                                                        01174\nCLIP1    LA    2,ID                GET ADDRESS OF SEARCH                01175\n         LA    3,L'ID-6            GET LENGTH OF SEARCH                 01176\nADRCN    TM    2(2),X'C0'          SEE IF ALPHAMERIC                    01177\n         BO    BUMA                BRANCH IF ALPHAMERIC                 01178\n         TM    6(2),X'C0'          SEE IF ALPHAMERIC                    01179\n         BO    BUMA                BRANCH IF ALPHAMERIC                 01180\n         LA    4,3                GET NUMBER OF CHARACTERS              01181\n         BAL   11,ALPMRIC         GO SEE IF ALPHAMERIC                  01182\n         BNO   BUMA               BRANCH NOT ALPHAMERIC                 01183\n         MVC   DISK(3),3(2)        MOVE IN ADDRESS FOR CLIP             01184\n         B     BYCLP              BYPASS MSG                            01185\nBUMA     LA    2,1(2)              BUMP ADRS OF SEARCH                  01186\n         BCT   3,ADRCN             TRY AGAIN                            01187\n         SPACE 2                                                        01188\n         LA    2,ID                GET ADRS OF SEARCH                   01189\n         LA    3,L'ID-8            GET LENGTH OD SEARCH                 01190\nADRCP    TM    2(2),X'C0'          SEE IF ALPHAMERIC                    01191\n         BO    BUMB                BRANCH IF ALPHAMERIC                 01192\n         LA    4,5                 GET NUMBER OF CHARACTERS             01193\n         BAL   11,ALPMRIC          GO SEE IF ALPHAMERIC                 01194\n         BNO   BUMB                BRANCH IF ALPHAMERIC                 01195\n         MVC   TAPE(5),3(2)        MOVE IN ADRS FOR CLIP                01196\n         B     BYCLP               BYPASS MSG                           01197\nBUMB     LA    2,1(2)              BUMP SEARCH ADRS                     01198\n         BCT   3,ADRCP             TRY AGAIN                            01199\n         SPACE 2                                                        01200\n         XC    ID+4(L'ID-5),ID+4   CLEAR PART OF MSG AREA               01201\n WTOR 'DEVICE ADRS TO BE CLIPPED OR EOJ (XXX OR XXXXX)',ID+5,5,REPLYECB 01202\n         BAL   11,WAITANS          WAIT REPLY                           01203\n         B     CLIP1               GO FIND ADRS NOW                     01204\n         SPACE 2                                                        01205\nBYCLP    OC    DISK(3),=3C' '           MAKE UPPER CASE                 01206\n         CLC   DISK(3),=C'EOJ'          SEE IF SHOULD END ROUTINE       01207\n         BE    ASKAGN                   GET NEW ID                      01208\n         MVC   D1(3),DISK               GET DISK ADDRESS                01209\n         BAL   14,UCBLOKUP              GET UCB ADDRESS OF DEVICE       01210\n         LA    11,CLPCLR                LOAD ERROR RETURN ADDRESS       01211\n         BNE   NODEVICE                 GO PRINT NO DEVICE MSG          01212\n         ST    2,OUTDEBMD               STORE UCB ADDRESS IN DEB        01213\n         CLI   18(2),X'20'              SEE IF DIRECT ACCESS            01214\n         BNE   NOTDISK                  BRANCH TO NOT DISK MSG          01215\n         CLI   19(2),X'05'         SEE IF 2321                          01216\n         BE    NOTSUP              BRANCH IF 2321                       01217\n         MVC   OUTDEVT(1),19(2)    PUT UNIT TYPE INTO DCB               01218\n         OI    OUTDEVT,X'20'        FINISH IT                           01219\n         MVC   OUTCCW(32),RDLABL   GET READ LABEL CCWS                  01220\n         BAL   11,ENABLE           SEE IF SHLD PRINT ENABLE MSG         01221\n         SPACE 1                                                        01222\n         XC    TDAREA(80),TDAREA   CLEAR I/O AREA                       01223\n         BAL   11,IOOUT            READ OLD LABEL                       01224\n         CLI   OUTECB,X'7F'        SEE IF SUCCESSFUL                    01225\n         BNE   RDDKER              BRANCH IF ERROR                      01226\n         SPACE 1                                                        01227\n         BAL   10,OLDMSG           GET AND PRINT OLD LABEL              01228\n         BAL   10,ASKNEW           GO ASK FOR NEW LABEL                 01229\n         B     GETNEW              BRANCH TO WRITE LABLE                01230\n         SPACE 1                                                        01231\nOLDMSG   EQU   *                                                        01232\n         MVC   OLDLAB+16(6),TDAREA+4 GET OLD VOL ID TO MSG              01233\n         MVC   OLDLAB+34(10),TDAREA+41 GET OLD OWNER ID                 01234\n         CNOP  0,4                                                      01235\nOLDLAB   WTO   'OLD VOL=XXXXXX  OLD OWNER=XXXXXXXXXX'                   01236\n         TM    3(2),X'08'          SEE IF DEVICE ALLOCATED              01237\n         BNO   NOTALCT             BRANCH IF NOT ALLOCATED              01238\n         MVC   ALCTDVMG+15(3),13(2) GET DEVICE ADRS                     01239\nALCTDVMG WTO   'DEVICE DDD IS ALLOCATED AND WAS NOT CLIPPED'            01240\n         B     RDNEW               BYPASS WRITING VOL AND OWNER INFO    01241\nNOTALCT  EQU   *                                                        01242\n         BR    10                  BACK TO USING ROUTINE                01243\n         SPACE 1                                                        01244\nASKNEW   EQU   *                                                        01245\n         XC    LABL,LABL           CLEAR VOL AND OWNER AREAS            01246\n         MVC   OWNER(10),=10C' '   BLANK THE LABEL AREA                 01247\n         WTOR 'ENTER NEW VOL ID AND OWNER ID OR EOJ (VVVVVV,OOOOOOOOOO),01248\n               ',LABL,18,REPLYECB                                       01249\n         BAL   11,WAITANS          WAIT REPLY                           01250\n         BR    10                  BACK TO USING ROUTINE                01251\nLABL     DC    XL17'00'            STORAGE SPACE FOR VOLAND OWNER INFO  01252\nOWNER    EQU   LABL+7                                                   01253\n         SPACE 1                                                        01254\n         CNOP  0,4                                                      01255\nGETNEW   EQU   *                                                        01256\n         TM    LABL+6,X'40'        SEE IF LABL AND OWNER SEPTED         01257\n         BO    FMTMSG              GO PRINT MSG                         01258\n         MVC   TDAREA+4(6),LABL    GET NEW LABEL                        01259\n         CLI   OWNER,X'40'         SEE IF OWNER INFO                    01260\n         BE    BYIDNW              BRANCH IF NO OWNER INFO              01261\n         MVC   TDAREA+41(10),OWNER MOVE IN OWNER ID                     01262\nBYIDNW   EQU   *                                                        01263\n         MVI   OUTCCW+CLPCCW-RDLABL,X'05' CHANGE TO WRITE DATA          01264\n*                                                                       01265\n         BAL   11,IOOUT            WRITE NEW LABEL                      01266\n         CLI   OUTECB,X'7F'        SEE IF SUCCESSFUL                    01267\n         BNE   WRDKER              BRANCH IF ERROR                      01268\n*                                                                       01269\nRDNEW    EQU   *                                                        01270\n         MVI   OUTCCW+CLPCCW-RDLABL,X'06' CHANGE TO RD DATA             01271\n         XC    TDAREA(80),TDAREA   CLEAR I/O AREA                       01272\n         BAL   11,IOOUT            READ NEW LABEL                       01273\n         CLI   OUTECB,X'7F'        SEE IF SUCCESSFUL                    01274\n         BNE   LABCHK              BRANCH IF CANT READ NEW LABEL        01275\n         BAL   10,NEWMSG           GO PRINT NEW LABEL                   01276\n         B     ASKAGN                                                   01277\nFMTMSG   WTO   'NON-ALPHAMERIC CHARACTER MUST SEPARATE VOL AND OWNER'   01278\n         B     ASKNEW              GO ASK FOR INFO AGAIN                01279\n         SPACE 1                                                        01280\nNEWMSG   EQU   *                                                        01281\n         MVC   NLABCK+19(6),TDAREA+4 MOVE IN NEW VOL INFO               01282\n         MVC   NLABCK+37(10),TDAREA+41 MOVE IN NEW OWNER INFO           01283\n         CNOP  0,4                                                      01284\nNLABCK   WTO   'NEW VOL ID=VVVVVV  NEW OWNER=0000000000'                01285\n         BR    10                  BACK TO USING ROUTINE                01286\n*                                                                       01287\nCLPCLR   XC    ID+2(L'ID-2),ID+2    CLEAR ID AREA                       01288\n         B     CLIP                 BRANCH TO START OF ROUTINE          01289\n*                                                                       01290\nRDDKER   WTO   'ERROR READING OLD LABEL'                                01291\n         B     ASKAGN                                                   01292\nLABCHK   WTO   'ERROR READING NEW LABEL'                                01293\n         B     ASKAGN                                                   01294\nWRDKER   WTO   'ERROR WRITING NEW LABEL'                                01295\n         B     ASKAGN                                                   01296\n         SPACE 1                                                        01297\n*        THE FOLLOWING CODE IS FOR THE TAPE LABEL ROUTINE               01298\n         SPACE 1                                                        01299\nNOTDISK  MVC   OUTDEVT(1),19(2)    PUT UNIT TYPE INTO DCB               01300\n         BAL   10,TPOUTSET         SET UP FOR TAPE                      01301\n         MVC   OUTCCW+8(8),RWCCW   MOVE IN REWIND CCW                   01302\n         SPACE 1                                                        01303\n         BAL   11,IOOUT            GO REWIND TAPE                       01304\n         CLI   OUTECB,X'7F'        SEE IF OK                            01305\n         BNE   ERRWND              BRANCH IF ERROR                      01306\n         SPACE 1                                                        01307\n         BAL   11,SEARCH           SEE IF SHOULD BYPASS OLD LABEL READ  01308\n         DC    C'B'                KEY LETTER FOR SEARCH                01309\n         DC    AL1(20)             LENGTH OF SEARCH                     01310\n         BE    BYOLMSG             BRANCH IF FOUND                      01311\n         SPACE 1                                                        01312\n         MVC   OUTCCW+8(8),RDLBL   MOVE IN READ CCW                     01313\n         BAL   11,IOOUT            GO ATTEMPT TO READ OLD LABEL         01314\n         CLI   OUTECB,X'7F'        SEE IF READ OK                       01315\n         BE    LBCK                BRANCH IF READ OK                    01316\n         WTO   'COULD NOT READ OLD LABEL - DIFFERENT MODE OR NO LABEL'  01317\n         B     BYOLMSG             BYPASS PRINTING OF LABEL             01318\n         SPACE 1                                                        01319\nLBCK     CLC   TDAREA(3),=C'VOL'   SEE IF LABEL                         01320\n         BNE   BYOLMSG             BYPASS PRINTING OF OLD LABEL         01321\n         BAL   11,OLDMSG           GO PRINT OLD LABEL                   01322\n         SPACE 1                                                        01323\nBYOLMSG  BAL   10,ASKNEW           GET NEW LABEL                        01324\n         MVC   OUTCCW+8(8),RWCCW   MOVE IN REWIND CCW                   01325\n         BAL   11,IOOUT            GO REWIND                            01326\n         CLI   OUTECB,X'7F'        SEE IF OK                            01327\n         BNE   ERRWND              BRANCH IF ERROR ON REWIND            01328\n         SPACE 1                                                        01329\n         XC    TDAREA(80),TDAREA   CLEAR I/O AREA                       01330\n         MVC   TDAREA(4),=C'VOL1'  MOVE IN VOL1 INFO                    01331\n         MVC   TDAREA+4(6),LABL    MOVE IN LABEL                        01332\n         SPACE 1                                                        01333\n         MVC   OUTCCW+8(8),WRLAB   MOVE IN WRITE LABEL CCW              01334\n         BAL   11,IOOUT            GO WRITE TAPE                        01335\n         CLI   OUTECB,X'7F'        SEE IF WRITE OK                      01336\n         BNE   WRDKER              BRANCH ERROR WRITING NEW LABEL       01337\n         SPACE 1                                                        01338\n         XC    TDAREA(80),TDAREA   CLEAR I/O AREA                       01339\n         MVC   OUTCCW+8(8),RDLBL   MOVE IN READ LABEL CCW               01340\n         BAL   11,IOOUT            GO READ NEW LABEL                    01341\n         CLI   OUTECB,X'7F'        SEE IF OK                            01342\n         BNE   LABCHK              BRANCH TO ERROR MESSAGE              01343\n         BAL   10,NEWMSG           GO PRINT NEW LABEL                   01344\n         SPACE 1                                                        01345\n         MVC   OUTCCW(8),WTCCW     MOVE IN TAPE MARK CCW                01346\n         BAL   11,IOOUT            GO WRITE TAPE MARK                   01347\n         CLI   OUTECB,X'7F'        SEE IF WRITE OK                      01348\n         BE    TMERROR             BRANCH TO ERROR MSG                  01349\n         SPACE 1                                                        01350\n         MVC   OUTCCW+8(8),RWUN    MOVE IN REWIND/UNLOAD FOR TAPE       01351\n         BAL   11,IOOUT            GO REWIND/UNLOAD FOR TAPE            01352\n         CLI   OUTECB,X'7F'        SEE IF R/U OK                        01353\n         BNE   ASKAGN              GO GET NEW ROUTINE                   01354\n WTO 'I/O ERROR ATTEMPTING REWIND/UNLOAD OF TAPE - NEW LABEL OK'        01355\n         B     ASKAGN              GO GET NEW ROUTINE                   01356\nERRWND   WTO   'I/O ERROR ATTEMPTING TO REWIND TAPE'                    01357\n         B     ASKAGN              GO GET NEW ROUTINE                   01358\nTMERROR  WTO   'I/O ERROR ATTEMPTING TO WRITE TAPE MARK'                01359\n         B     ASKAGN              GO GET NEW ROUTINE                   01360\nDSKONL   WTO   'THE DEVICE ADRS ENTERED IS ONLINE'                      01361\n         B     DSKOFM              BRANCH TO OTHER MSG                  01362\nDSKASNG  WTO   'THE ADRS JUST ENTERED IS ASSIGNED BY OS'                01363\nDSKOFM   WTO   '*** DEVICES USED FOR CLIP MUST BE OFFLINE ***'          01364\n         B     CLPCLR              BRANCH BACK TO START OF ROUTINE      01365\nNOTSUP   WTO   'DEVICE ADRS ENTERED IS NOT SUPPORTED FOR CLIPPING'      01366\n         B     ASKAGN              GET NEXT ROUTINE                     01367\n        SPACE  5                                                        01368\n*  SUB-ROUTINE FOR REWIND OR REWIND/UNLOAD FOR INPUT TAPE               01369\n*  LINKAGE     BAL 10,RUIN                                              01370\n*                                                                       01371\nRUIN     BAL   11,SEARCH           GO SEE IF SHOULD UNLOAD              01372\n         DC    C'U'                KEY LETTER FOR REWIND/UNLOAD         01373\n         DC    AL1(20)             LENGTH OF SEARCH                     01374\n         BNE   RUIN1               BRANCH NO UNLOAD                     01375\n         MVC   INCCW(8),RWUN       MOVE IN REWIND & UNLOAD CCW          01376\n         BAL   11,IOIN             GO PERFORM I/O                       01377\n         BR    10                  BACK TO USING ROUTINE                01378\nRUIN1    BAL   11,SEARCH           GO SEE IF SHOULD REWIND              01379\n         DC    C'R'                KEY LETTER FOR REWIND                01380\n         DC    AL1(20)             LENGTH OF SEARCH                     01381\n         BNE   0(10)               BACK TO USING ROUTINE                01382\n         MVC   INCCW(8),RWCCW      MOVE IN REWIND CCW                   01383\n         BAL   11,IOIN             GO PERFORM I/O                       01384\n         BR    10                  BACK TO USING ROUTINE                01385\n         SPACE 5                                                        01386\n*   THIS SUB-ROUTINE IS USED TO CHECK THE READY BIT IN THE UCB OF I/O   01387\n*   DEVICES.  WHEN NOT READY, A MESSAGE IS ISSUED TO ENABLE THE DEVICE  01388\n*   WHICH WAS CHECKED.  REGISTER 2 MUST CONTAIN THE ADRS OF THE UCB.    01389\n         SPACE 1                                                        01390\n*   LINKAGE = BAL  11,ENABLE                                            01391\n         SPACE 1                                                        01392\nENABLE   TM    6(2),X'40'          SEE IF DEVICE IS READY               01393\n         BNO   0(11)               RETURN TO USING ROUTINE              01394\n         MVC   ENMSG+26(3),13(2)   MOVE IN DEVICE TO MESSAGE            01395\n         CNOP  0,4                                                      01396\nENMSG    WTO   '*** ENABLE DEVICE XXX - DEBE'                           01397\n         BR    11                  RETURN TO USING ROUTINE              01398\n         SPACE 5                                                        01399\n*   SUB-ROUTINE FOR REWIND OR REWIND/UNLOAD FOR OUTPUT TAPE             01400\n*   LINKAGE    BAL 10,RUOUT                                             01401\n*                                                                       01402\nRUOUT    BAL   11,SEARCH           GO SEE IF SHOULD UNLOAD              01403\n         DC    C'U'                KEY LETTER FOR REWIND/UNLOAD         01404\n         DC    AL1(20)             LENGTH OF SEARCH                     01405\n         BNE   RUOUT1              BRANCH NO UNLOAD                     01406\n         MVC   OUTCCW(8),RWUN      MOVE IN REWIND & UNLOAD CCW          01407\n         BAL   11,IOOUT            GO PERFORM I/O                       01408\n         BR    10                  BACK TO USING ROUTINE                01409\nRUOUT1   BAL   11,SEARCH           GO SEE IF SHOULD REWIND              01410\n         DC    C'R'                KEY LETTER FOR REWIND                01411\n         DC    AL1(20)             LENGTH OF SEARCH                     01412\n         BNE   0(10)               BACK TO USING ROUTINE                01413\n         MVC   OUTCCW(8),RWCCW     MOVE IN REWIND CCW                   01414\n         BAL   11,IOOUT            GO PERFORM I/O                       01415\n         BR    10                  BACK TO USING ROUTINE                01416\n*                                                                       01417\n         SPACE 5                                                        01418\n*                                                                       01419\n*        REWIND AND UNLOAD ROUTINE                                      01420\n*                                                                       01421\nRU       EQU   *                                                        01422\n         BAL   10,TPOUTSET   DETERMINE WHICH TAPE DRIVE                 01423\n         MVC   OUTCCW+8(8),RWUN    SET UP REWIND & UNLOAD CCW           01424\n         BAL   11,IOOUT      EXECUTE THE REWIND & UNLOAD                01425\n         B     ASKAGN                                                   01426\n*                                                                       01427\n         SPACE 5                                                        01428\n*        ROUTINE TO WRITE TAPE MARK AND/OR CHECK EOF                    01429\n*                                                                       01430\n*        ENTERED VIA BAL 10,TTEOF                                       01431\nTTEOF    EQU   *                                                        01432\n         CLC   FILES+5(3),=C'ALL'     SEE IF ALL                        01433\n         BNE   FLCNT     BRANCH AROUND DOUBLE FILE MK TEST              01434\n         TS    EOFSW               SET EOF SWITCH                       01435\n         BZ    FLCNT               BRANCH IF NO PREVIOUS EOF            01436\n         MVI   EOJTT+1,X'F0'       SET NOP TO BRANCH FOR EOJ            01437\nFLCNT    EQU   *                                                        01438\n         MVC   OUTCCW+8(8),WTCCW   SET UP WTM CCW                       01439\n         OI    OUTCCW+12,X'60'     CHAIN IT TO A NOP                    01440\n         MVC   OUTCCW+16(8),=X'0300000020000001'                        01441\n         BAL   11,IOOUT            WRITE A TAPE MARK                    01442\n         CLI   OUTECB,X'7F'        EVERY THING OK                       01443\n         BNE   TAPERR              BRANCH ON ERROR                      01444\nEOJTT    NOP   CTEOJ           GO WRITE TAPE MARK AND END ROUTINE       01445\n         CLC   FILES+5(3),=C'ALL'  SEE IF PROCESS ALL                   01446\n         BE    0(10)               BACK TO ROUTINE TILL 2 EOF S         01447\nTCEOF    LH    2,FILES+6           GET NUMBER OF FILES                  01448\n         BCTR  2,0                 SUBSTRACT 1                          01449\n         STH   2,FILES+6           PUT NEW NUMBER BACK                  01450\n         CH    2,=H'0000'          SEE IF MORE FILES                    01451\n         BH    0(10)               BRANCH IF MORE                       01452\n         B     CTEOJ           GO WRITE TAPE MARK FOR EOV               01453\nEOFSW    DC    X'0000'             END OF FILE SWITCH                   01454\n         SPACE 4                                                        01455\n*      THIS ROUTINE WILL ASK THE OPERATOR TO SUPPLY AN ADDRESS          01456\n*      FOR THE CARD PUNCH.                                              01457\n*                                                                       01458\n*      ROUTINE ENTRY= BAL 11,PUNCH                                      01459\n         SPACE 3                                                        01460\nPUNCH    EQU   *                                                        01461\n         CLC   PUNCH1(3),=3X'00'   SEE IF HAVE PUNCH ADDRESS            01462\n         BNE   0(11)               BRANCH IF HAVE ADDRESS               01463\n         WTOR  'CARD PUNCH - XXX',PUNCH1,3,REPLYECB                     01464\n         WAITR ECB=REPLYECB     WAIT FOR OPERATOR                       01465\n         XC    REPLYECB(4),REPLYECB      CLEAR REPLY ECB                01466\n         OC    PUNCH1(3),=C'   '    MAKE UPPER CASE                     01467\n         CLC   PUNCH1(3),=C'EOJ'     SEE IF SHOULD END DEBE             01468\n         BE    ASKAGN              GO GET NEW ID                        01469\n         BR    11               BACK TO USING ROUTINE                   01470\n         SPACE 4                                                        01471\n*        ROUTINE TO FIND NUMBER OF FILES WANTED                         01472\n*                                                                       01473\n*        ENTRY IS  BAL 10,TPFILS                                        01474\n*                                                                       01475\nTPFILS   EQU   *                                                        01476\n         XC    FILES(8),FILES      CLEAR FILES ENTRY AREA               01477\n         SPACE 2                                                        01478\n*  THE FOLLOWING CODE IS USED FOR SEARCHING OF FILE COUNT WHEN A        01479\n*  ONE LINE ENTRY IS USED.                                              01480\n         SPACE 1                                                        01481\n         LA    2,ID                GET ADRS OF SEARCH                   01482\n         LA    3,L'ID-5            GET LENGTH OF SEARCH                 01483\nCLCALL   TM    2(2),X'C0'          SEE IF ALPHAMERIC                    01484\n         BO    BUMP                BRANCH IS ALPHAMERIC                 01485\n         TM    6(2),X'C0'          SEE IF ALPHAMERIC                    01486\n         BO    BUMP                BRANCH IF ALPHAMERIC                 01487\n         LA    4,3                GET NUMBER OF CHARACTERS              01488\n         BAL   11,ALPMRIC         GO SEE IF ALBHAMERIC                  01489\n         BNO   BUMP               BRANCH NOT ALPHAMERIC                 01490\n         MVC   FILES+5(3),3(2)     MOVE IN NUMBER OF FILES OR ALL       01491\n         B     ALLBPS              BRANCH IF FOUND                      01492\nBUMP     LA    2,1(2)              BUMP SEARCH ADRS                     01493\n         BCT   3,CLCALL            BUMP CTR                             01494\n         SPACE 2                                                        01495\nTPFL WTOR  'HOW MANY FILES (ALL OR UP TO 999)-XXX',FILES+5,3,REPLYECB   01496\n         WAITR ECB=REPLYECB        WAIT FOR OPERATOR                    01497\n         XC    REPLYECB(4),REPLYECB      CLEAR REPLY ECB                01498\n         OC    FILES+5(3),=3C' '   MAKE ENTRY UPPER CASE                01499\nALLBPS   CLC   FILES+5(3),=C'ALL' SEE IF ALL FILES ARE TO BE PROCESSED  01500\n         BE    0(10)         GO BACK TO USING ROUTINE IF ALL            01501\n         CLC   FILES+5(3),=C'EOJ'     SEE IF FINISHED WITH ROUTINE      01502\n         BE    ASKAGN              GO GET NEXT ROUTINE                  01503\n         TM    FILES+5,C'0'    SEE IF NUMBER                            01504\n         BNO   OPMSG   TELL OPERATOR OF THE ERROR                       01505\n         TM    FILES+6,C'0'   SEE IF NUMBER                             01506\n         BNO   OPMSG   TELL OPERATOR OF THE ERROR                       01507\n         TM    FILES+7,C'0'   SEE IF NUMBER                             01508\n         BNO   OPMSG   TELL OPERATOR OF THE ERROR                       01509\n         PACK  FILES(8),FILES(8)                                        01510\n         CVB   2,FILES                                                  01511\n         ST    2,FILES+4                                                01512\n         BR    10                  BACK TO USING ROUTINE                01513\nOPMSG    WTO   'HOW MANY FILES ? - UP TO ''999'' OR ''ALL'''            01514\n         B     TPFL                GO TRY AGAIN                         01515\n         EJECT                                                          01516\n*  TEST TO SEE IF PRINTER HAS BEEN OPENED                               01517\n         SPACE 1                                                        01518\nOPENPRNT EQU   *                                                        01519\n         TM    OPENSW,X'FF'                                             01520\n         BC    1,OPENOK                                                 01521\n         OPEN (PRINT,(OUTPUT))                                          01522\n         OI    OPENSW,X'FF'                                             01523\nOPENOK   BR    11                                                       01524\nOPENSW   DC    X'0000'                                                  01525\n         SPACE 3                                                        01526\n*  COMMON PRINT ROUTINE                                                 01527\n         SPACE 1                                                        01528\nTDPRINT  EQU   *                                                        01529\n         ST    11,SV11  SAVE REG 11                                     01530\n         MVI   OPCODE,9            SPACE 1 AND PRINT                    01531\n         PUT   PRINT,OPCODE                                             01532\n         LH    1,C    INCREMENT LINE COUNTER                            01533\n         LA    0,1(1)                                                   01534\n         STH   0,C                                                      01535\n         CH    0,CLIMIT  AT END OF PAGE                                 01536\n         LA    11,*+8                                                   01537\n         BH    SKIPTO1                                                  01538\n         L     11,SV11  RESTORE REG 11                                  01539\n         BR    11                                                       01540\n         SPACE 1                                                        01541\n*  SKIP PRINTER TO CHANNEL 1                                            01542\n         SPACE 1                                                        01543\nSKIPTO1  EQU   *                                                        01544\n         MVI   OPCODE,X'8B'        SKIP TO 1                            01545\nSKIPTO2  DS    0H                                                       01546\n         MVI   TDOUTAR,C' '  BLANK PRINT LINE                           01547\n         MVC   TDOUTAR+1(131),TDOUTAR                                   01548\n         PUT   PRINT,OPCODE                                             01549\n         SR    0,0                                                      01550\n         STH   0,C  ZERO LINE COUNTER                                   01551\n         BR    11                                                       01552\n         SPACE 1                                                        01553\n*  SPACE PRINTER ONE LINE                                               01554\n         SPACE 1                                                        01555\nSPACE1   EQU   *                                                        01556\n         ST    11,SV11  SAVE REG 11                                     01557\n         MVI   TDOUTAR,C' '  BLANK PRINT LINE                           01558\n         MVC   TDOUTAR+1(131),TDOUTAR                                   01559\n         MVI   OPCODE,9            SPACE 1 AND PRINT                    01560\n         PUT   PRINT,OPCODE                                             01561\n         LH    1,C      INCREMENT LINE COUNTER                          01562\n         LA    0,1(1)                                                   01563\n         STH   0,C                                                      01564\n         CH    0,CLIMIT  END OF PAGE                                    01565\n         LA    11,*+8  LOAD RETURN ADDRESS IF BRANCHING                 01566\n         BH    SKIPTO1  END OF PAGE, BRANCH                             01567\n         L     11,SV11  RESTORE REG 11                                  01568\n         BR    11                                                       01569\n         EJECT                                                          01570\n*  ROUTINE TO CONVERT MM INTO A SET MODE COMMAND                        01571\n         SPACE 1                                                        01572\nCONVRTMM EQU   *                                                        01573\n         STM   2,3,SAVEUM    SAVE WORK REGISTERS                        01574\n         IC    2,MM+1        GET SECOND BYTE OF MM                      01575\n         TM    MM+1,X'F0'    IS IT NUMERIC                              01576\n         BC    1,MMMM1       YES, BRANCH                                01577\n         AH    2,=H'9'       CONVERT ALPHA TO NUMERIC                   01578\nMMMM1    SRDL  2,4           SAVE IT                                    01579\n         IC    2,MM          GET FIRST BYTE OF MM                       01580\n         TM    MM,X'F0'      IS IT NUMERIC                              01581\n         BC    1,MMMM2       YES, BRANCH                                01582\n         AH    2,=H'9'       CONVERT ALPHA TO NUMERIC                   01583\nMMMM2    SLDL  2,4                                                      01584\n         STC   2,MM          PUT MM  BACK IN HEX                        01585\n         LM    2,3,SAVEUM    RESTORE REGISTERS                          01586\n         BR    14                                                       01587\nSAVEUM   DS    2F                                                       01588\n         EJECT                                                          01589\n*********************************************************************** 01590\n*                                                                     * 01591\n*  THIS ROUTINE FINDS A UCB ADDRESS WHEN A DEVICE ADDRESS IS PROVIDED * 01592\n*  IN THE D1 AREA.  IF A UCB IS FOUND FOR THE DEVICE A CC OF ZERO IS  * 01593\n*  RETURNED TO THE USING ROUTINE.                                     * 01594\n*                                                                     * 01595\n*********************************************************************** 01596\n*                                                                       01597\n*  LINKAGE IS     BAL 14,UCBLOKUP                                       01598\n*                                                                       01599\n         SPACE 1                                                        01600\nUCBLOKUP EQU   *                                                        01601\n         OC    D1(3),=XL3'40'      MAKE UPPER CASE                      01602\n         L     2,16                GET CVT ADRS                         01603\n         L     3,40(2)             GET ADRS TO UCB ADRS TABLE           01604\nUCBSRH1  LH    2,0(3)              GET UCB ADRS                         01605\n         LTR   2,2                 SEE IF GOOD ADRS                     01606\n         BZ    UCBSRH              BRANCH NO ADDRESS                    01607\n         BM    0(14)               BRANCH--- END OF TABLE               01608\n         CLI   2(2),X'FF'          SEE IF UCB                           01609\n         BNE   UCBSRH              BRANCH NO UCB                        01610\n         CLC   D1(3),13(2)         SEE IF UCB FOR UNIT FOUND            01611\n         BE    0(14)               FRANCH IF FOUND                      01612\nUCBSRH   LA    3,2(3)              BUMP TO GET NEXT UCB ADRS            01613\n         B     UCBSRH1             BRANCH NOT END                       01614\n         SPACE 3                                                        01615\n*  ROUTINE TO ASK FOR THE INPUT TAPE                                    01616\n         SPACE 1                                                        01617\nTAPINSET EQU   *                                                        01618\n         XC    MM(5),MM            CLEAR AREA                           01619\n         SPACE 2                                                        01620\n* THE FOLLOWING CODE IS USED TO SEARCH AN INPUT TAPE ADDRESS            01621\n*  WHEN A ONE LINE ENTRY IS USED.                                       01622\n         SPACE 1                                                        01623\n         LA    2,ID                GET ADDRS OF SEARCH                  01624\n         LA    3,L'ID-7            GET LENGTH OF SEARCH                 01625\nTPCPR    TM    2(2),X'C0'          SEE IF ALPHAMERIC                    01626\n         BO    BMP                 BRANCH IF ALPHAMERIC                 01627\n         TM    8(2),X'C0'          SEE IF ALPHAMERIC                    01628\n         BO    BMP                 BRANCH IF ALPHAMERIC                 01629\n         LA    4,5                GET NUMBER OF CHARACTERS              01630\n         BAL   11,ALPMRIC         GO SEE IF ALBHAMERIC                  01631\n         BNO   BMP                BRANCH NOT ALPHAMERIC                 01632\n         ST    2,INFNDAD          STORE WHERE FOUND                     01633\n         ST    2,CRNTLOC           STORE LOCATION OF TAPE ADRS          01634\n         MVC   MM(5),3(2)          MOVE IN TAPE ADRS AND MODE           01635\n         BAL   11,BYWAIT           GO TO MODE & USB RTN                 01636\n         B     TPINSET             GO SET MODE AND UCB                  01637\nBMP      LA    2,1(2)              BUMP SEARCH ADRS                     01638\n         BCT   3,TPCPR             SEARCH AGAIN                         01639\n         SPACE 2                                                        01640\n         WTOR  'INPUT TAPE - MMXXX',MM,5,REPLYECB                       01641\n         BAL   11,WAITAPE    WAIT FOR A REPLY AND SET UP MODE           01642\nTPINSET  LA    11,TAPINSET         GET RETURN ADDRESS FOR MSG ROUTINE   01643\n         BNE   NODEVICE            GO PRINT NO DEVICE MSG               01644\n         TM    MM+4,X'BF'          SEE IF INPUT ERROR                   01645\n         BZ    INPTEROR            BRANCH IF INPUT ERROR                01646\n         MVC   INTRTCH(1),MM       SET UP TAPE'S DCB                    01647\n         MVI   INDEVT,X'81'                                             01648\n         LA    11,TAPINSET             GET RETURN ADDRESS               01649\n         CLI   18(2),X'80'       IS IT A TAPE (2 POINTS TO UCB)         01650\n         BNE   NTPMSG              BRANCH IF NOT A TAPE                 01651\n         TM    SYSTYP,X'40'        SEE IF PCP                           01652\n         BO    NCHECK              BRANCH IF PCP                        01653\n         TM    3(2),X'08'          IS IT BEING USED                     01654\n         BO    ASNGDMG             BRANCH IF BEING USED                 01655\n         TM    3(2),X'80'          SEE IF OFFLINE                       01656\n         BO    ONLINE              BRANCH IF ONLINE                     01657\nNCHECK   EQU   *                                                        01658\n         BAL   11,ENABLE           SEE IF SHOULD PRINT ENABLE MSG       01659\n         ST    2,INDEBMOD          STORE UCB ADDRESS IN DEB             01660\n         MVC   INDEBMOD(1),MM      PUT SET MODE CMD IN DEB              01661\n         OI    INIOB,X'40'         SET ON CHAINING                      01662\n         MVC   INCCW(1),MM       PUT SET MODE IN CCW                    01663\n         MVC   INCCW+1(7),=X'00000060000001'                            01664\n         BR    10                                                       01665\nINPTEROR WTO 'FORMAT ERROR - RETYPE LAST ENTRY'                         01666\n         B     TAPINSET            GO TRY AGAIN                         01667\nNTPMSG   EQU   *                                                        01668\n         WTO 'THE ADDRESS ENTERED IS NOT A TAPE DRIVE'                  01669\n         B     CLR                 BRANCH TO TAPE ADRS CLEAR ROUTINE    01670\nASNGDMG  EQU   *                                                        01671\n         WTO 'THE TAPE ADDRESS JUST ENTERED IS ASSIGNED BY THE SYSTEM'  01672\n         B     CLR                 BRANCH TO TAPE ADRS CLEAR ROUTINE    01673\n         SPACE 3                                                        01674\nONLINE   EQU   *                                                        01675\n     WTO   'THE TAPE SPECIFIED IS ONLINE - SHOULD BE OFFLINE FOR DEBE'  01676\n         B     CLR                 BRANCH TO TAPE ADRS CLEAR ROUTINE    01677\n         SPACE 3                                                        01678\n*        BLANK OUT BAD TAPE ADDRESS FOR RETRY                           01679\n         SPACE 1                                                        01680\nCLR      L     2,CRNTLOC           GET LOCATION OF TAPE ADDRESS         01681\n         LTR   2,2                 SEE IF DEVICE ADRS ENTERED           01682\n         BZ    0(11)               BRANCH IF NO ADDRESS                 01683\n         XC    CRNTLOC,CRNTLOC     CLEAR LOCATION OF TAPE ADRS          01684\n         MVC   3(5,2),=CL5' '      MOVE IN BLANKS                       01685\n         BR    11                  BRANCH TO USING ROUTINE              01686\n         SPACE 3                                                        01687\n*  ROUTINE TO ASK FOR THE OUTPUT TAPE                                   01688\n         SPACE 1                                                        01689\nTPOUTSET EQU   *                                                        01690\n         XC    MM(5),MM            CLEAR AREA                           01691\n         SPACE 2                                                        01692\n*  THE FOLLOWING CODE IS USED TO SEARCH AN OUTPUT TAPE ADDRESS WHEN     01693\n*  A ONE LINE ENTRY IS USED                                             01694\n         SPACE 1                                                        01695\n         LA    2,ID+L'ID-9         GET ADRS OF SEARCH                   01696\n         LA    3,L'ID-6            GET LENGTH OF SEARCH                 01697\nTPCPAR   TM    2(2),X'C0'          SEE IF ALPHAMERIC                    01698\n         BO    BMPIT               BRANCH IF ALPHAMERIC                 01699\n         TM    8(2),X'C0'          SEE IF ALPHAMERIC                    01700\n         BO    BMPIT               BRANCH IF ALPHAMERIC                 01701\n         LA    4,5                GET NUMBER OF CHARACTERS              01702\n         BAL   11,ALPMRIC         GO SEE IF ALBHAMERIC                  01703\n         BNO   BMPIT              BRANCH NOT ALPHAMERIC                 01704\n         CL    2,INFNDAD          SEE IF SAME ADDRESS                   01705\n         BE    NOTTHR             BRANCH IF SAME ADDRESS                01706\n         ST    2,CRNTLOC           STORE LOCATION OF TAPE ADRS          01707\n         MVC   MM(5),3(2)          MOVE IN TAPE ADRS                    01708\n         BAL   11,BYWAIT           GO SET UP MODE & UCB                 01709\n         B     TPOTSET             BRANCH AROUND CNT                    01710\nBMPIT    BCT   2,*+4               SUB 1                                01711\n         BCT   3,TPCPAR SEARCH AGAIN                                    01712\n         SPACE 2                                                        01713\nNOTTHR   WTOR  'OUTPUT TAPE - MMXXX',MM,5,REPLYECB                      01714\n         BAL   11,WAITAPE    WAIT FOR REPLY  AND SET UP MM              01715\nTPOTSET  LA    11,TPOUTSET         GET RETURN ADDRESS FOR MSG ROUTINE   01716\n         BNE   NODEVICE            GO PRINT NO DEVICE MSG               01717\n         TM    MM+4,X'BF'          SEE IF INPUT ERROR                   01718\n         BZ    OUTPTERR            BRANCH IF INPUT ERROR                01719\n         MVC   OUTTRTCH(1),MM                                           01720\n         MVI   OUTDEVT,X'81'                                            01721\n         LA    11,TPOUTSET             GET RETURN ADDRESS               01722\n         CLI   18(2),X'80'       IS IT A TAPE                           01723\n         BNE   NTPMSG              BRANCH IF NOT A TAPE                 01724\n         TM    SYSTYP,X'40'        SEE IF PCP                           01725\n         BO    NTCHECK             BRANCH IF PCP                        01726\n         TM    3(2),X'08'          IS IT BEING USED                     01727\n         BO    ASNGDMG             BRANCH IF BEING USED                 01728\n         TM    3(2),X'80'          SEE IF OFFLINE                       01729\n         BO    ONLINE              BRANCH IF ONLINE                     01730\nNTCHECK  EQU   *                                                        01731\n         BAL   11,ENABLE           SEE IF SHOULD PRINT ENABLE MSG       01732\n         ST    2,OUTDEBMD          STORE UCB ADDRESS IN DEB             01733\n         MVC   OUTDEBMD(1),MM                                           01734\n         OI    OUTIOB,X'40'      SET ON CHAINING FLAG                   01735\n         MVC   OUTCCW(1),MM      BUILD SET MODE COMMAND                 01736\n         MVC   OUTCCW+1(7),=X'00000060000001'                           01737\n         BR    10                                                       01738\nOUTPTERR WTO 'FORMAT ERROR - RETYPE LAST ENTRY'                         01739\n         B     TPOUTSET            GO ASK FOR OUTPUT TAPE AGAIN         01740\n         SPACE 2                                                        01741\n*  COMMON I/O ROUTINE FOR INPUT                                         01742\n         SPACE 1                                                        01743\nIOIN     EQU   *                                                        01744\n         XC    INECB(4),INECB                                           01745\n         EXCP  INIOB                                                    01746\n         WAIT  ECB=INECB                                                01747\n         NI    INDCB+44,X'3F'                                           01748\n         BR    11                                                       01749\n         SPACE 1                                                        01750\n*  COMMON WAIT FOR ALL REPLIES                                          01751\nWAITANS  EQU   *                                                        01752\n         WAIT  ECB=REPLYECB                                             01753\n         XC    REPLYECB,REPLYECB   CLEAR ECB                            01754\n         BR    11                                                       01755\n         SPACE 2                                                        01756\n*  COMMON I/O ROUTINE FOR OUTPUT                                        01757\n         SPACE 1                                                        01758\nIOOUT    EQU   *                                                        01759\n         XC    OUTECB(4),OUTECB                                         01760\n         EXCP  OUTIOB                                                   01761\n         WAIT  ECB=OUTECB                                               01762\n         NI    OUTDCB+44,X'3F'                                          01763\n         BR    11                                                       01764\n         SPACE 2                                                        01765\n*  ROUTINE TO WAIT ON THE REPLY AND CONVERT THE MM INTO A SET MODE      01766\nWAITAPE  EQU   *                                                        01767\n         WAIT  ECB=REPLYECB                                             01768\n         XC    REPLYECB(4),REPLYECB                                     01769\n         OC    MM(5),=C'     '     MAKE ALL CAPS                        01770\n         CLC   MM(3),=C'EOJ'                                            01771\n         BE    ASKAGN                                                   01772\nBYWAIT   MVC   TDOUTAR(5),MM  GET MMXXX FOR PRINTING ON LISTING         01773\n         MVI   TDOUTAR+5,C' '                                           01774\n         MVC   TDOUTAR+6(126),TDOUTAR+5                                 01775\n         MVC   TDOUTAR+5(24),=CL24' - MMXXX FOR INPUT TAPE.'            01776\n         MVC   TDOUTAR+50(47),=CL47'*** THIS IS NOT A DATA RECORD FROM X01777\n               THE TAPE ***'                                            01778\n         BAL   14,CONVRTMM                                              01779\n         OI    MM,X'03'            SET MODE COMMAND NOW IN MM           01780\n         MVC   D1(3),XXX                                                01781\n         BAL   14,UCBLOKUP                                              01782\n         BR    11                                                       01783\n         EJECT                                                          01784\n*  THIS SUB-ROUTINE IS USED TO CHECK FOR ALPHAMERIC CHARACTERS          01785\n*  IN THE ROUTINE ID AREA.  IF THEY ARE FOUND A CC OF 3                 01786\n*  IS RETURNED.      REG 2 = SEARCH AREA   REG 4 = NUMB OF CHARACTERS   01787\n         SPACE 1                                                        01788\n*                   LINKAGE  IS   BAL 11,ALPMRIC                        01789\nALPMRIC  LR    5,2                 GET ADRS OF SEARCH                   01790\nALPAGN   TM    3(5),X'C0'          SEE IF NOT ALPHA MERIC               01791\n         BNO   0(11)           RETURN WITH NOT CC 3 IF NOT ALPHAMERIC   01792\n         LA    5,1(5)              BUMP ADRS OF SEARCH                  01793\n         BCT   4,ALPAGN            BRANCH NOT FINISHED                  01794\n         B     0(11)               RETURN WITH CC OF 3 IF ALPHAMERIC    01795\n         SPACE  3                                                       01796\n*                                                                       01797\n*                                                                       01798\n*  THIS SUB-ROUTINE IS USED TO INFORM THE OPERATOR OF THE               01799\n*  NON-EXISTANCE OF DEVICE ADDRESS ENTERED VIA THE CONSOLE.             01800\n*                                                                       01801\n*  LINKAGE-  ROUTINE ENTERED VIA BRANCH, RETURN ADDRESS MUST            01802\n*    BE PROVIDED IN REGISTER 11 PRIOR TO BRANCHING TO SUB-ROUTINE.      01803\n*                                                                       01804\nNODEVICE WTO   'UCB NOT FOUND FOR DEVICE ADDRESS ENTERED'               01805\n         B     CLR                 GO CLEAR BAD ADRS                    01806\n         SPACE 2                                                        01807\n*  THIS SUB-ROUTINE IS USED TO SEARCH THE ROUTINE ID FIELD FOR THE      01808\n*  NUMBER OF FILES WHICH MUST BE FORWARD OR BACK SPACED.                01809\n*  A CONDITION CODE OF 3 IS PASSED BACK TO THE USING ROUTINE IF A FILE  01810\n*  COUNT IS FOUND. LINKAGE = BAL 10,NBFILS                              01811\n         SPACE 2                                                        01812\nNBFILS   XC    FILES(8),FILES      CLEAR FILES ENTRY AREA               01813\n         LA    2,ID                GET ADDRESS OF SEARCH                01814\n         LA    3,L'ID-5            GET LENGTH OF SEARCH                 01815\nFLCNTS   TM    2(2),X'C0'          SEE IF ALPHAMERIC                    01816\n         BO    BUMPFC              BRANCH IF ALPHAMERIC                 01817\n         TM    6(2),X'C0'          SEE IF ALPHAMERIC                    01818\n         BO    BUMPFC              BRANCH IF ALPHAMERIC                 01819\n         LA    4,3                 GET NUMBER OF CHARACTERS             01820\n         BAL   11,ALPMRIC          GO SEE IF ALPHAMERIC                 01821\n         BNO   BUMPFC              BRANCH IF NOT ALPHAMERIC             01822\n         MVC   FILES+5(3),3(2)     MOVE FILE CNT TO CNT AREA            01823\n         BR    10                  RETURN TO USING ROUTINE WITH CC=3    01824\nBUMPFC   LA    2,1(2)              BUMP SEARCH ADDRESS                  01825\n         BCT   3,FLCNTS            LOOK AGAIN                           01826\n         BR    10                RETURN TO USING ROUTINE WITH NOT CC=3  01827\n         SPACE 2                                                        01828\n         SPACE 5                                                        01829\nAPPEND   BR    14                                                       01830\n         EJECT                                                          01831\n*  SEE THE OS SYSTEM CONTROL BLOCKS MANUAL FOR THE FORMATS OF THE       01832\n*  FOLLOWING DCB'S, DEB'S, ECB'S, AND IOB'S.                            01833\n         SPACE 1                                                        01834\n*  DEB FOR INPUT DATA SET                                               01835\n         SPACE 1                                                        01836\n         CNOP  0,4                      ALIGN                           01837\nINIOVEC  EQU   *                                                        01838\n         DC    A(APPEND)                                                01839\n         DC    A(APPEND)                                                01840\n         DC    A(APPEND)                                                01841\n         DC    A(APPEND)                                                01842\n         DC    A(APPEND)                                                01843\n         DC    3F'0'                                                    01844\n         DC    X'06000000'                                              01845\nINDEB    DS    0F                                                       01846\n         DC    F'0'                                                     01847\n         DC    X'04'                                                    01848\n         DC    X'000000'                                                01849\n         DC    X'C0000000'                                              01850\n         DC    X'30000000'                                              01851\n         DC    2F'0'                                                    01852\n         DC    X'0F'                                                    01853\n         DC    AL3(INDCB)                                               01854\nINEXSC   DC    X'02'                                                    01855\n         DC    AL3(INIOVEC)                                             01856\nINDEBMOD DC    X'00'                                                    01857\nINDEBUCB DC    X'000000'                                                01858\nINRESV   DC    X'0000'             RESERVED                             01859\nINCYSEX  DC    X'0000'             CYL ADRS OS START OF EXTENT          01860\nINTKSEX  DC    X'0000'             TRK ADRS OF START OF EXTENT          01861\nINCYDEX  DC    X'0000'             CYL ADRS OF END OF EXTENT            01862\nINTRKDX  DC    X'0000'             TRK ADRS OF END OF EXTENT            01863\nINTKEXT  DC    X'0000'             NUMB OF TRKS TO EXTENT               01864\n         SPACE 1                       9                                01865\n*  DCB FOR INPUT DATA SET                                               01866\nINDCB    DS    0F                                                       01867\n         DC    4F'0'                                                    01868\nINTRTCH  EQU   *                                                        01869\nINMODSTK EQU   *                                                        01870\n         DC    X'00'                                                    01871\nINDEVT   DC    X'00'                                                    01872\nINDENS   DC    X'00'                                                    01873\n         DC    X'00'                                                    01874\n         DC    5F'0'                                                    01875\n         DC    H'0'                                                     01876\n         DC    BL2'1101000000001000'                                    01877\nINDBAD   DC    A(INDEB)                                                 01878\n         DC    X'10000000'                                              01879\n         DC    5F'0'                                                    01880\n         SPACE 1                                                        01881\n*  DEB FOR OUTPUT DATA SET                                              01882\n         SPACE 1                                                        01883\nOUTIOVEC EQU   *                                                        01884\n         DC    A(APPEND)                                                01885\n         DC    A(APPEND)                                                01886\n         DC    A(APPEND)                                                01887\n         DC    A(APPEND)                                                01888\n         DC    A(APPEND)                                                01889\n         DC    3F'0'                                                    01890\n         DC    X'06000000'                                              01891\nOUTDEB   DS    0F                                                       01892\n         DC    F'0'                                                     01893\n         DC    X'17000000'                                              01894\n         DC    X'C0000000'                                              01895\n         DC    X'30000000'                                              01896\n         DC    2F'0'                                                    01897\n         DC    X'0F'                                                    01898\n         DC    AL3(OUTDCB)                                              01899\nOUTEXS   DC    X'02'                                                    01900\n         DC    AL3(OUTIOVEC)                                            01901\nOUTDEBMD DC    X'00'                                                    01902\nOUTDBUCB DC    X'000000'                                                01903\nOUTRESV  DC    X'0000'             RESERVED                             01904\nOUTCYSEX DC    X'0000'             CYL ADRS OF START OF EXTENT          01905\nOUTTKSEX DC    X'0000'             TRK ADRS OF START OF EXTENT          01906\nOUTCYDEX DC    X'0000'             CYL ADRS OF END OF EXTENT            01907\nOUTTRKDX DC    X'0000'             TRK ADRS OF END OF EXTENT            01908\nOUTTKEXT DC    X'0001'             NUMB OF TRKS TO EXTENT               01909\n         SPACE 2                                                        01910\n*  DCB FOR OUTPUT DEVICE                                                01911\n         SPACE                                                          01912\n         DS    0F                                                       01913\nOUTDCB   DC    F'0'                                                     01914\n         DC    F'0'                                                     01915\n         DC    F'0'                                                     01916\n         DC    F'0'                                                     01917\nOUTTRTCH EQU   *                                                        01918\nOUTMDSTK EQU   *                                                        01919\n         DC    X'00'                                                    01920\nOUTDEVT  DC    X'00'                                                    01921\nOUTDENS  DC    X'00'                                                    01922\n         DC    X'00'                                                    01923\nOUTBUFNO DC    X'00'                                                    01924\nOUTBUFCB DC    X'000000'                                                01925\nOUTBUFL  DC    X'0000'                                                  01926\nOUTDSORG DC    X'4000'                                                  01927\nOUTIOBAD DC    A(OUTIOB)                                                01928\n         DC    X'00'                                                    01929\nOUTEODAD DC    X'000000'                                                01930\nOUTRECFM DC    X'00'                                                    01931\nOUTEXLST DC    X'000000'                                                01932\nOUTTIOT  DC    X'0000'                                                  01933\nOUTMACRE DC    X'0000'                                                  01934\nOUTFLGS  DC    X'00'                                                    01935\nOUTDEBAD DC    AL3(OUTDEB)                                              01936\nOUTFLOGS DC    X'00'                                                    01937\n         DC    X'000000'                                                01938\nOUTOPTCD DC    X'00'                                                    01939\n         DC    X'000000'                                                01940\n         DC    F'0'                                                     01941\n         DC    F'0'                                                     01942\n         DC    F'0'                                                     01943\n         DC    F'0'                                                     01944\n         SPACE 1                                                        01945\n         SPACE 1                                                        01946\n*  ECB FOR INPUT DATA SET                                               01947\n         SPACE 1                                                        01948\nINECB    DC    F'0'                                                     01949\n         SPACE 1                                                        01950\n*  IOB FOR INPUT DATA SET                                               01951\n         SPACE 1                                                        01952\nINIOB    DS    0F                                                       01953\n         DC    X'4200'                                                  01954\nINSENS   DC    H'0'                                                     01955\n         DC    X'7F'                                                    01956\n         DC    AL3(INECB)                                               01957\nINSTAT   DC    2F'0'                                                    01958\n         DC    A(INCCW)                                                 01959\n         DC    A(INDCB)                                                 01960\n         DC    F'0'                                                     01961\n         DC    H'1'                                                     01962\n         DC    H'0'                                                     01963\nINDASD   DC    X'00'                                                    01964\nINSEEK   DC    XL7'00'                                                  01965\n         SPACE 1                                                        01966\n*  ECB FOR OUTPUT DATA SET                                              01967\n         SPACE 1                                                        01968\nOUTECB   DC    F'0'                                                     01969\n         SPACE 1                                                        01970\n*  IOB FOR OUTPUT DATA SET                                              01971\n         SPACE 1                                                        01972\nOUTIOB   DS    0F                                                       01973\n         DC    X'4200'                                                  01974\nOUTSENS  DC    H'0'                                                     01975\n         DC    X'7F'                                                    01976\n         DC    AL3(OUTECB)                                              01977\nOUTSTAT  DC    2F'0'                                                    01978\n         DC    A(OUTCCW)                                                01979\n         DC    A(OUTDCB)                                                01980\n         DC    XL4'00'                                                  01981\n         DC    H'1'                                                     01982\n         DC    H'0'                                                     01983\nOUTDASD  DC    X'00'                                                    01984\nOUTSEEK  DC    X'00000000000003'        BBCCHHR                         01985\n*        IOB FOR PRINTER                                                01986\n         SPACE                                                          01987\n         DS    0F                                                       01988\nPRTIOB   EQU   *                                                        01989\n         DC    X'0200'                                                  01990\nPRTSNS   DC    H'0'                                                     01991\nECBCD    DC    X'7F'                                                    01992\n         DC    AL3(PRTECB)                                              01993\nPRTSTAT  DC    2F'0'                                                    01994\n         DC    A(PRTCCW)                                                01995\n         DC    A(PRINTAPG)                                              01996\nRPSM     DC    F'0'                                                     01997\nBLC1     DC    F'0'                                                     01998\nPMBBC    DC    F'0'                                                     01999\nCHHR     DC    F'0'                                                     02000\n         SPACE                                                          02001\n*        ECB FOR PRINTER                                                02002\n         SPACE                                                          02003\nPRTECB   DC    F'0'                                                     02004\n         SPACE                                                          02005\n         SPACE 1                                                        02006\n*  CONSTANTS AND CCW'S      * * * * * * * * * * * * * * * * * * * * *   02007\n         SPACE 3                                                        02008\nREADER1  DC    3X'00'              ADDRESS AREA FOR CARD READER         02009\nPUNCH1   DC    3X'00'              ADDRESS AREA FOR CARD PUNCH          02010\n         SPACE 3                                                        02011\nTAPE     DC    C'  '               MODE FOR TAPE ADRS                   02012\nDISK     DC    C'    '             DISK AND TAPE ADRS                   02013\n         SPACE 3                                                        02014\n*  CCW'S FOR OUTPUT DATA SET                                            02015\n         SPACE 1                                                        02016\nOUTCCW   DS    5D                                                       02017\n*  CCW'S FOR INPUT DATA SET                                             02018\n         SPACE 1                                                        02019\nINCCW    DS    5D                                                       02020\n         SPACE 3                                                        02021\nFILES    DC    D'0'                STORAGE + WORK AREA                  02022\nSFCCW    CCW   X'3F',SFCCW,X'20',1                                      02023\nBFCCW    CCW   X'2F',SFCCW,X'20',1                                      02024\nSRCCW    CCW   X'37',BSCCW,X'20',1                                      02025\nBSCCW    CCW   X'27',BSCCW,X'20',1                                      02026\nWRLAB    CCW   1,TDAREA,X'20',80   WRITE TAPE LABEL CCW                 02027\nCTCCW    CCW   X'41',TDAREA,X'20',80                                    02028\nRDLBL    CCW   2,TDAREA,X'00',80   READ LABEL CCW                       02029\nRWCCW    CCW   7,RWCCW,X'20',1                                          02030\nTDINCCW  CCW   2,TDAREA,X'20',32767                                     02031\nTTCCWOUT CCW   1,TDAREA,X'20',32767                                     02032\nWTCCW    CCW   31,TDAREA,X'20',1                                        02033\nRWUN     CCW   X'0F',RWUN,X'20',1                                       02034\nNOOP     CCW   X'03',*,X'20',1           NOOP CCW                       02035\nRDLABL   CCW   X'07',OUTSEEK,X'40',6      SEEK                          02036\nSHIDE    CCW   X'31',OUTSEEK+2,X'40',5  SID=                            02037\nTIC      CCW   X'08',OUTCCW+SHIDE-RDLABL,X'40',1  TIC                   02038\nCLPCCW   CCW   X'06',TDAREA,X'00',80   READ OR WRITE DATA               02039\nPRTCCW   CCW   X'03',TDOUTAR,X'00',132   PRINT DATA                     02040\n         SPACE 3                                                        02041\nPRINT DCB DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,RECFM=FM,LRECL=133,        X02042\n               BLKSIZE=133                                              02043\n         SPACE 3                                                        02044\nPRINTAPG DCB   DDNAME=SYSPRINT,MACRF=E,DSORG=PS,RECFM=FM,              X02045\n               IOBAD=PRTIOB                                             02046\n         SPACE 3                                                        02047\nTDWK     DS    D                                                        02048\nSAVEAREA DC    18F'0'                                                   02049\nTDPTABLE DC    C'0123456789ABCDEF'                                      02050\n         DS    0F                                                       02051\nMESSAGE  DC    AL2(THERE-*)     MESSAGE LENGTH                          02052\n         DC    AL2(0)                                                   02053\nCOUNT    DC    C'NUMBER '                                               02054\n         DC    C'RECORDS PROCESSED'                                     02055\nTHERE    EQU   *                                                        02056\nD1       DC    C'0'                                                     02057\nD2       DC    C'0'                                                     02058\nD3       DC    C'0'                                                     02059\nID       DC    CL40'00'                                                 02060\nMM       DC    C'00'                                                    02061\nXXX      DC    C'000'                                                   02062\nOF       DC    F'15'                                                    02063\nEOJECB   DC    F'0'                    EOJ ECB                          02064\nREPLYECB DC    F'0'                                                     02065\nINFNDAD  DC    F'0'               STORE WHERE INPUT TAPE ADRS FOUND     02066\nCRNTLOC  DC    F'0'                STORAGE AREA FOR LST TAPE ADRS FND   02067\n         SPACE 3                                                        02068\nGETMAIN1 DC    F'0'                ADDADDRESS FROM GETMAIN FOR DEB      02069\nPGMDEB1  DC    F'0'                ADDRESS OF DEB IN PGM                02070\nOLDEB1   DC    F'0'                ADDRESS OF DEB IN PGM FOR NEW DEB    02071\n         SPACE 2                                                        02072\nGETMAIN2 DC    F'0'                ADDRESS FROM GETMAIN FOR DEB         02073\nPGMDEB2  DC    F'0'                ADDRESS OF DEB IN PGM                02074\nOLDEB2   DC    F'0'                ADDRESS OF DEB IN PGM                02075\nBLANK    DC    F'0'                WORD OF ZEROS                        02076\nOPCODE   DC    X'00'                                                    02077\nTDOUTAR  DS    CL132                                                    02078\nRECCNT   DC    X'00000F'                                                02079\nCOND1    DC    X'1F'                                                    02080\nRECHDG   DC    C'REC '                                                  02081\n         DC    X'2020202020'                                            02082\n         DC    C', LENGTH '                                             02083\n         DC    X'2020202020'                                            02084\nSV11     DS    F                                                        02085\nC        DC    H'0'                                                     02086\nCLIMIT   DC    H'58'                                                    02087\nSYSTYP   DC    X'00'               SYSTEM TYPE STORAGE AREA             02088\n*                                  X'10' = MVT                          02089\n*                                  X'20' = MFT                          02090\n*                                  X'40' = PCP                          02091\n*                                                                       02092\n         SPACE 3                                                        02093\n         LTORG                                                          02094\n         SPACE 3                                                        02095\nTDAREA2  DS    CL101                                                    02096\nTDAREA   DS    132CL250                                                 02097\n         END   OSDEBE                                                   02098\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SHOWSS": {"ttr": 18181, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06O\\x01\\x02\\x06O!R\\x01\\xee\\x01\\xee\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-05T00:00:00", "modifydate": "2002-03-05T21:52:00", "lines": 494, "newlines": 494, "modlines": 0, "user": "SYZYGY1"}, "text": "         TITLE '   S H O W S S     '\n***********************************************************************\n*                                                                     *\n*        'SHOWSS' TSO COMMAND                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\n*  ATTRIBUTES. RE-ENTRANT.\n*   IF 'ZERO' OPERAND IS TO BE USED, MUST BE AUTHORIZED.\n*  DESCRIPTION.\n*   THIS TSO COMMAND DISPLAYS THE NAMES OF ALL SUBSYSTEMS IN THE\n*   SYSTEM AND THE ADDRESSES OF EACH SUBSYSTEM'S SSCT ENTRY AND SSVT.\n*   MAKE SURE YOU CHANGE TABLE AT LABEL \"SYSP\"\n*   OPTIONALLY, THE COMMAND WILL ZERO THE SSVT ADDRESS IN THE SSCT\n*   FOR A SPECIFIED SUBSYSTEM, THUS DISCONNECTING THE SUBSYSTEM\n*   FROM THE ACTIVE SUBSYSTEM INTERFACE.  THIS CAN BE USED TO GET\n*   AROUND THE JES2 'SUBSYSTEM INTERFACE NOT DORMANT' MESSAGE.\n*   THE SSVT IS NOT FREEMAINED.\n*  LOG OF CHANGES.\n*   15JUN82 - PARSE ADDED.  ZERO KEYWORD ADDED.\n         SPACE\nSHOWSS   START\n         USING *,R12\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'SHOWSS '\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(0),AL3(@DATAL)\n@PROLOG  STM   14,12,12(R13)\n         LR    R12,R15\n         LR    R2,R1\n         USING CPPL,R2\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         LR    R9,R1\n         USING @DATA,R9\n         LR    R0,R1               AREA TO BE CLEARED\n         L     R1,@SIZE            LENGTH TO BE CLEARED\n         SR    R14,R14             ZERO FROM ADDRESS\n         SR    R15,R15             ZERO FROM LENGTH\n         MVCL  R0,R14              ZERO IT ALL\n         SPACE\n         ST    R13,4(,R9)\n         ST    R9,8(,R13)\n         LR    R13,R9\n         SPACE\n************************************************************\n*                                                          *\n*        CHECK USERID                                      *\n*                                                          *\n************************************************************\n         SPACE\n         L     R1,548              PSAAOLD\n         L     R15,172(,R1)        ASCBJBNI\n         LTR   R15,R15             IS THIS A JOB\n         BNZ   IMPLEXEC            YES, QUIT\n         L     R15,60(,R1)         ASCBTSB\n         LTR   R15,R15             IS THIS A TSO SESSION\n         BZ    PROCEED             NO, BRANCH IF STARTED TASK\nAUTHID   L     R1,16               CVTPTR\n         L     R15,0(,R1)          TCB WORDS CVTTCBP\n         L     R15,4(,R15)         CURRENT TCB\n         L     R1,180(,R15)        TCBJSCB\n         L     R1,264(,R1)         JSCBPSCB\n         LTR   R1,R1               ANY PSCB?\n         BZ    IMPLEXEC            NO - NOT A TSO SESSION\n         USING PSCB,R1\n*        TM    PSCBATR1,PSCBCTRL   OPERATOR\n*        BZ    IMPLEXEC            NO - BRANCH\n         CLC   PSCBUSER(2),SYSP    SYSTEMS SUPPORT USERID\n         BE    PROCEED             YES, BRANCH\n         LA    R15,USERIDS\nAUTHLOOP CLI   0(R15),0            END OF LIST?\n         BE    IMPLEXEC            YES, NOT AUTHORIZED\n         CLC   PSCBUSER(7),0(R15)\n         BE    PROCEED\n         LA    R15,8(,R15)         POINT TO NEXT USERID\n         B     AUTHLOOP            GO CHECK IT\n         DROP  R1                  PSCB\nSYSP     DC    C'SY'               1ST 2 OF SYSTEMS TSOIDS\nUSERIDS  DC    0D'0'               ALIGN FOR EASY ZAPS\n         DC    8D'0'               ROOM FOR 8 USERIDS\n         DC    H'0'                END OF USERID LIST\n         SPACE\nIMPLEXEC EQU   *\n         L     R1,CPPLCBUF\n         XC    2(2,R1),2(R1)       SET CBUF TO IMPLICIT EXEC\n         L     R1,CPPLECT          GET ECT ADDRESS\n         USING ECT,R1\n         CLI   ECTSCMD,C' '        IS THIS A SUBCOMMAND\n         BNE   *+10                YES - SAY SUBCOMMAND NOT FOUND\n         MVC   ECTPCMD,=CL8'EXEC'  NO  - SAY COMMAND NOT FOUND\n         DROP  R1                  ECT\n         LR    R1,R13\n         L     R0,@SIZE\n         L     R13,4(,R13)\n         FREEMAIN R,A=(1),LV=(0)\n         L     R1,24(,R13)         RESTORE CPPL POINTER\n         LA    R15,12(,R13)        POINT TO 2-WORD XCTL PARM\n         XC    0(8,R15),0(R15)     CLEAR IT\n         XCTL  (2,12),EP=EXEC,SF=(E,(15))\nPROCEED  EQU   *\n         SPACE 1\n************************************************************\n*                                                          *\n*        SET UP IOPL FOR PUTLINE                           *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15                 IOPL\n         SPACE\n         L     R15,16              LOAD CVT POINTER\n         TM    444(R15),X'80'      IS PUTLINE LOADED? (VS2)\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,444(,R15)       YES - USE CVTPUTL\n         B     PUTLODED            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLODED ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP PPL FOR PARSE                              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n         L     R0,=A(SSPCL)\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         ST    R9,PPLUWA\n         DROP  R15                 PPL\n         SPACE 1\n************************************************************\n*                                                          *\n*        CALL THE PARSE SERVICE ROUTINE                    *\n*                                                          *\n************************************************************\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         L     R15,16              CVTPTR\n         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,524(,R15)       CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK EQU   *\n         LINK  EP=IKJPARS,SF=(E,LINKAREA)\nPARSEEXT EQU   *\n         SPACE 1\n         LTR   R15,R15             PARSE SUCCESSFUL?\n         BZ    PARSEOK             YES, BRANCH\n         LA    R1,MSG01\n         LA    R0,L'MSG01\n         BAL   R14,PUTMSG\n         B     EXIT12\nPARSEOK  EQU   *\n         L     R3,MYANS\n         USING IKJPARMD,R3\n         SPACE 1\n************************************************************\n*                                                          *\n*        IF ZERO(NAME) IS SPECIFIED, GET THE NAME          *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   ZNAM,=CL4' '\n         TM    ZERO+6,X'80'\n         BZ    NAMEX\n         L     R15,ZERO\n         LH    R1,ZERO+4\n         BCTR  R1,0\n         B     *+10\n         MVC   ZNAM(0),0(R15)\n         EX    R1,*-6\nNAMEX    EQU   *\n         SPACE 1\n************************************************************\n*                                                          *\n*        DISPLAY THE SUBSYSTEMS                            *\n*                                                          *\n************************************************************\n         SPACE\n         L     R1,16               CVTPTR\n         L     R4,X'128'(,R1)      CVTJESCT\n         USING JESCT,R4\n         LA    R4,JESSSCT-(SSCTSCTA-SSCT) POINT TO SSCT HEAD\n         USING SSCT,R4\nNEXTSSCT EQU   *\n         ICM   R4,15,SSCTSCTA      POINT TO NEXT SSCT\n         BZ    DONESSCT            IF END, EXIT\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         MVC   LINE(4),SSCTSNAM    SUBSYSTEM NAME\n         MVC   LINE+4(26),=C'  SSCT XXXXXX  SSVT XXXXXX'\n         ST    R4,FULL             SAVE SSCT ADDRESS\n         SPACE\n         LA    R1,FULL+1\n         LA    R15,LINE+11\n         LA    R0,3\n         BAL   R14,UNPACK\n         SPACE\n         LA    R1,SSCTSSVT+1\n         LA    R15,LINE+24\n         LA    R0,3\n         BAL   R14,UNPACK\n         SPACE\n         L     R1,SSCTSSVT\n         LTR   R1,R1\n         BNZ   *+10\n         MVC   LINE+32(9),=C'(DORMANT)'\n         SPACE\n         LA    R1,LINE\n         LA    R0,50\n         BAL   R14,PUTLINE\n         SPACE\n         CLI   ZNAM,C' '           IS ANY SUBSYSTEM TO BE UNPLUGGED\n         BE    ZERO9               NO\n         CLC   SSCTSNAM,ZNAM       IS THIS SUBSYSTEM TO BE UNPLUGGED\n         BNE   ZERO9               NO\n         SPACE\n************************************************************\n*                                                          *\n*        ZERO THE SSVT ADDRESS IF REQUESTED                *\n*                                                          *\n************************************************************\n         SPACE\n         L     R15,SSCTSSVT        GET ADDRESS TO BE ZEROED\n         LTR   R15,R15             IS IT ALREADY ZERO\n         BZ    ZALREADY            YES, BRANCH\n         SPACE\n         TESTAUTH FCTN=1\n         LTR   R15,R15\n         BNZ   ZERO9\n         SPACE\n         CLI   WTORKW+1,2\n         BE    WTORX\n         MVC   WTORW(CONFIRML),CONFIRM\n         MVC   WTORW+12+30,SSCTSNAM\n         SPACE\nZWTOR    XC    ECB,ECB\n         MVI   REPLY,C' '\n         WTOR  ,REPLY,,ECB,MF=(E,WTORW)\n         SPACE\n         WAIT  ECB=ECB\n         SPACE\n         OI    REPLY,X'40'         CAPS\n         CLI   REPLY,C'N'\n         BE    ZERO9\n         CLI   REPLY,C'Y'\n         BNE   ZWTOR\nWTORX    EQU   *\n         SPACE\n         LA R0,0\n         LA R1,1\n         SVC 244\n         MODESET KEY=ZERO\n         SPACE\n         XC    SSCTSSVT,SSCTSSVT   UNPLUG THE SUBSYSTEM\n         SPACE\n         MODESET KEY=NZERO\n         LA R1,0\n         SVC 244\n         SPACE\nZERO9    B     NEXTSSCT\n         SPACE\nZALREADY LA    R1,ALREADY\n         LA    R0,L'ALREADY\n         BAL   R14,PUTLINE\n         B     ZERO9\n         SPACE\n************************************************************\n*                                                          *\n*        SUBROUTINES                                       *\n*                                                          *\n************************************************************\n         SPACE\nUNPACK   MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),UNPACKT-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,UNPACK           DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R14                 RETURN TO CALLER\n         SPACE\n************************************************************\n*                                                          *\n*        PUTMSG ROUTINE                                    *\n*                                                          *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTLINS\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        PUTLINE ROUTINE                                   *\n*                                                          *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTLINS\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        TERMINATION                                       *\n*                                                          *\n************************************************************\n         SPACE\nDONESSCT EQU   *\n         SPACE 1\nEXIT0    SR    15,15\n         B     EXIT\nEXIT12   LA    R15,12\nEXIT     LR    R1,R13\n         L     R0,@SIZE\n         L     R13,4(,R13)\n         LR    R2,R15\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2\n         LM    0,12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nUNPACKT  DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\nCONFIRM  WTOR  'CONFIRM REQUEST TO DISCONNECT XXXX SUBSYSTEM (Y OR N)',X\n               VREPLY,3,VECB,ROUTCDE=(2),MF=L\nCONFIRML EQU   *-CONFIRM\nVREPLY   EQU   0\nVECB     EQU   0\n         SPACE\nMSG01    DC    C'ERROR IN PARSE'\nAUTHMSG  DC    C'ENVIRONMENT IS NOT APF AUTHORIZED - ZERO IGNORED'\nALREADY  DC    C'SSCTSSVT IS ALREADY ZERO'\n         DC    0D'0'\n         SPACE\n************************************************************\n*                                                          *\n*        PARSE PCL                                         *\n*                                                          *\n************************************************************\n         SPACE\n         PRINT NOGEN\nSSPCL    IKJPARM\nZEROKW   IKJKEYWD\n         IKJNAME 'ZERO',SUBFLD=ZEROSF\nWTORKW   IKJKEYWD\n         IKJNAME 'WTOR'\n         IKJNAME 'NOWTOR'\nZEROSF   IKJSUBF\nZERO     IKJIDENT 'SUBSYSTEM NAME',                                    X\n               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=4,                   X\n               PROMPT='NAME OF SUBSYSTEM TO BE DISCONNECTED'\n         IKJENDP\n         PRINT GEN\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nDOUBLE   DS    D\nLINKAREA DS    2F\nFULL     DS    F\nLINE     DS    CL50\nMYECB    DS    F                  USED BY PUTLINE AND PARSE\nMYIOPL   DS    4F                 USED BY PUTLINE ROUTINE\nMYPPL    DS    7F                 USED BY PARSE\nMYANS    DS    F                  USED BY PARSE\nMYPTPB   DS    3F                 USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                  USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                 USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL100           USED BY PUTLINE ROUTINE\nPUTLINS  DS    4F                 USED BY PUTLINE ROUTINE\nZNAM     DS    CL4\nECB      DS    F\nREPLY    DS    F\nWTORW    DS    0F,CL80\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\n         IKJCPPL\n         SPACE\n         IKJIOPL\n         SPACE\n         IKJPPL\n         SPACE\n         IKJPSCB\n         SPACE\n         IKJECT\n         SPACE\n         IEFJESCT\n         SPACE\n         IEFJSCVT\n         SPACE\n         IEFJSSVT\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SHOWSS$": {"ttr": 18436, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06O\\x01\\x02\\x06O!R\\x00%\\x00%\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-05T00:00:00", "modifydate": "2002-03-05T21:52:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "SYZYGY1"}, "text": "//C7BSS   JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=SYZYGY1,\n//       MSGCLASS=A\n//ASMFCL PROC  CLASS=A,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='SYZYGY.PDS.DATA',\n//*            LOAD='SYS1.APFLIB',\n//             LOAD='SYZYGY.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='LOAD,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1,RENT,REUS,REFR'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD.(&MEM),DISP=SHR\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=SHOWSS\n//LKED.SYSIN  DD   *\n  NAME SHOWSS(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SWAP": {"ttr": 18438, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06O\\x01\\x02\\x06O\"\\x18\\x05\\x05\\x05\\x05\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-05T00:00:00", "modifydate": "2002-03-05T22:18:00", "lines": 1285, "newlines": 1285, "modlines": 0, "user": "SYZYGY1"}, "text": "*          DATA SET CBT1083    AT LEVEL 004 AS OF 05/28/80\nSWAP     TITLE 'S W A P - System Workload Analysis Pgm - Version 4.5'   00001\n*********************************************************************** 00002\n*                                                                     * 00003\n*                              S W A P                                * 00004\n*                                                                     * 00005\n*                 System  Workload Analysis Program                   * 00006\n*                                                                     * 00007\n*     SWAP enables a TSO user to get a brief look at what the         * 00008\n*     system is doing. Various system and SRM values are displayed    * 00009\n*     for each ASID currently executing.                              * 00010\n*                                                                     * 00011\n*     SWAP may be executed as a CALLed program or as a CP. Various    * 00012\n*     subcommands are available to specify what information should    * 00013\n*     be displayed.                                                   * 00014\n*                                                                     * 00015\n*     If SWAP is to be used in conjunction with SPY via the 'L'       * 00016\n*     subcommand then SWAP must be APF-authorized and its name        * 00017\n*     should go in the IKJEFTE2 and IKJEFTE8 lists. If SWAP is        * 00018\n*     merely being used by itself APF authorization is unnecessary.   * 00019\n*                                                                     * 00020\n*                                                                     * 00021\n*  Command         Description                                        * 00022\n*                                                                     * 00023\n*     A     Display started tasks,batch jobs and TSO                  * 00024\n*     B     Display batch and started task jobs only                  * 00025\n*     E     Exit from SWAP                                            * 00026\n*     Fxxx  Display only those jobs whose name begins with 'xxx'.     * 00027\n*           SWAP will continue in this mode until 'F' is entered.     * 00028\n*     G     This mode will display general address space information. * 00029\n*           (As opposed to 'S' mode.)                                 * 00030\n*     I     This mode will display only those memories which are      * 00031\n*           either swapped in and runngin or swapped out but ready    * 00032\n*           to run.                                                   * 00033\n*     L     XCTL to 'SPY' operator console program.                   * 00034\n*     O     This mode will display all active memories in the system, * 00035\n*           regardless of location.                                   * 00036\n*     S     This mode will display SRM information. (As opposed to    * 00037\n*           'G' mode.)                                                * 00038\n*     T     Display TSO users only                                    * 00039\n*     Dxx   set 'wait mode' delay time to 'xx' tenths of a second.    * 00040\n*     Wxx   Enter automatic refresh mode. SWAP will automatically     * 00041\n*           refresh and update the screen every so often for 'xx'     * 00042\n*           seconds. If 'xx' is omitted, a default of 30 seconds is   * 00043\n*           Assumed. If 'xx' = 0, the timer will count UP instead of  * 00044\n*           down until 'PA1' is pressed.                              * 00045\n*     ?     Display this list of help for SWAP commands               * 00046\n*                                                                     * 00047\n*  Glossary of terms for output display:                              * 00048\n*                                                                     * 00049\n*    HH:MM:SS  Transaction time                                       * 00050\n*    R         Reason code for swap out (from OUCBEFL).               * 00051\n*              The following are the reason codes displayed:          * 00052\n*                    not swapped - in core                            * 00053\n*                O   Swap code 1 : Terminal output wait               * 00054\n*                I   Swap code 2 : Terminal input wait                * 00055\n*                W   Swap code 3 : Long wait                          * 00056\n*                A   Swap code 4 : Auxiliary storage shortage         * 00057\n*                R   Swap code 5 : Real storage shortage              * 00058\n*                V   Swap code 6 : MS0 detected wait                  * 00059\n*                S   SWap code 7 : REQSWAP SYSEVENT issued            * 00060\n*                E   SWap code 8 : ENQHOLD exchg by swap analysis     * 00061\n*                X   Swap code 9 : Exchg recommended by swap analysis * 00062\n*                $   Swap code a : Unilateral swapout                 * 00063\n*                ?               : probable error or SRM modification * 00064\n*    L         Current location of this memory:                       * 00065\n*                I  Swapped in and eligible to run.                   * 00066\n*                O  Swapped out but ready to run.                     * 00067\n*                W  Swapped out and not ready to run.                 * 00068\n*                $  Swapped in and V=R or non-swappable status.       * 00069\n*                ?  Transitioning between states.                     * 00070\n*                L  Logically swapped.                                * 00071\n*    Mem       Current amount of memory allocated to this memory.     * 00072\n*    WSS       SRM's view of the working set size for this memory.    * 00073\n*    DP        Dispatching priority of memory (in hex).               * 00074\n*    DQ        Relative position of memory on dispatching queue.      * 00075\n*    PG        Performance group                                      * 00076\n*    p         Performance group period                               * 00077\n*    Dm        Domain                                                 * 00078\n*    RM        Resource manager recommendation                        * 00079\n*    WR        Work load manager recommendation                       * 00080\n*    SU/S      Service rate (S.U.'s per second)                       * 00081\n*    S.U.      Service units (in interval if mode=S )                 * 00082\n*    I/O       EXCP's in interval (max=65K)                           * 00083\n*    ASID      Address space ID (hex)                                 * 00084\n*    CPU       Task CPU time                                          * 00085\n*    TCPU      The total CPU time used by this memory (task+SRB).     * 00086\n*    TRS       Service accumulated in the transaction.                * 00087\n*    SC        Number of times the memory has been swapped            * 00088\n*    MSL       MOUNT/START/LOGON initiated task                       * 00089\n*    TCB       Number of active TCBs                                  * 00090\n*    Procname  Procstepname for this step                             * 00091\n*    Stepname  Stepname                                               * 00092\n*    TSLS      Time since last swap action in seconds                 * 00093\n*                                                                     * 00094\n*    SWAP requires SYS1.AMODGEN as a MACLIB                           * 00095\n*                                                                     * 00096\n*    Registers used:                                                  * 00097\n*        R1 - buffer address         R6 - ptr to OUCB                 * 00098\n*        R2 - ptr to ASVT entry      R7 - R11  working regs           * 00099\n*        R3 - count of ASCBs         R12 - Base register              * 00100\n*        R4 - ptr to OUXB                                             * 00101\n*        R5 - ptr to ASCB                                             * 00102\n*                                                                     * 00103\n*                                                                     * 00104\n*                                                                     * 00113\n*********************************************************************** 00114\n         SPACE 4                                                        00115\nR0       EQU   0                                                        00116\nR1       EQU   1                                                        00117\nR2       EQU   2                                                        00118\nR3       EQU   3                                                        00119\nR4       EQU   4                                                        00120\nR5       EQU   5                                                        00121\nR6       EQU   6                                                        00122\nR7       EQU   7                                                        00123\nR8       EQU   8                                                        00124\nR9       EQU   9                                                        00125\nR10      EQU   10                                                       00126\nR11      EQU   11                                                       00127\nR12      EQU   12                                                       00128\nR13      EQU   13                                                       00129\nR14      EQU   14                                                       00130\nR15      EQU   15                                                       00131\n         EJECT                                                          00132\nSWAP     CSECT                                                          00133\n         B     100(R15)           branch around save areas              00134\n         DC    CL9'SWAP'          identifier                            00135\n         DC    CL9'&SYSDATE'                                            00136\n         DC    CL6'&SYSTIME'                                            00137\nSAVE     DC    18F'0'             save area                             00138\n         STM   R14,R12,12(R13)    save registers                        00139\n         LR    R12,R15            R12 = addr of entry point             00140\n         USING SWAP,R12           addresability to CSECT                00141\n         LA    R11,SAVE           R11 = addr of our save area           00142\n         ST    R13,SAVE+4         save pointer to callers save area     00143\n         ST    R11,8(R13)         save ptr to our save area in caller's 00144\n         LR    R13,R11            R13 = addr of our save area           00145\n         EJECT                                                          00146\n         BAL   R14,INITSCAN       initialize IKJSCAN parmlist           00147\n         LA    3,STAXLIST                                               00148\n         STAX  ATTNEXIT,MF=(E,(3)) attn exit trap                       00149\n         GTSIZE ,                 get terminal size                     00150\n         LTR   R0,R0              is it a hardcopy?                     00151\n         BZ    HARDCOPY           yes; branch                           00152\n         LR    R2,R0              R2 = number of lines per screen       00153\n         SH    R2,=H'2'           R2 = R2 - 2                           00154\n         MH    R2,=H'81'          R2 = number of bytes in screen bufr   00155\n         LA    R3,BUFFER          R3 = addr of start of buffer          00156\n         LA    R2,0(R2,R3)        R2 = addr of end of buffer            00157\n         ST    R2,ADBUF           save R2                               00158\n         STFSMODE ON,INITIAL=YES  turn on full screen mode for VTAM     00159\n         B     BOTHTYPE                                                 00160\nHARDCOPY STSIZE SIZE=80           set line size to 80                   00161\n         MVI   CRTFLAG,X'00'      we are using a hardcopy               00162\n         MVC   CLR(26),BLANKS     zap out cntrl chars                   00163\n         MVC   CMDCTRL1(2),BLANKS                                       00164\nBOTHTYPE MVC   HEADINGA(80),HEADING2   load general heading initially.  00165\n*********************************************************************** 00166\n*                                                                     * 00167\n*                        Locate CVT and ASVT pointers                 * 00168\n*                                                                     * 00169\n*********************************************************************** 00170\nFINDCVT  L     R2,16              CVT pointer                           00171\n         USING CVT,R2                                                   00172\n         L     R2,CVTASVT         ASVT pointer                          00173\n         DROP  R2                                                       00174\n         USING ASVT,R2                                                  00175\n         L     R3,ASVTMAXU        maximum number of entries             00176\n         LA    R2,ASVTFRST        first entry minus 4                   00177\n         ST    R2,FRSTASVT        save it for later                     00178\n         LA    R1,BUFFER          load address of output buffer.        00179\n         ST    R2,ASCBADDR        save ASCB address                     00180\n         CLC   JOBMASK(8),BLANKS  is the jobmask blank?                 00181\n         BNE   ASCBLOOP           no, so don't set page to 0            00182\n         MVI   PAGE,C'0'          reset page to page 0                  00183\n         EJECT                                                          00184\n*********************************************************************** 00185\n*                                                                     * 00186\n*            Major Loop (through all ASCB's)                          * 00187\n*                                                                     * 00188\n*********************************************************************** 00189\nASCBLOOP L     R2,ASCBADDR        R2 = addr of last ASCB entry          00190\n         LA    R2,4(R2)           increment to next ASCB entry          00191\n         ST    R2,ASCBADDR        save ASCB addr                        00192\n         ICM   R5,B'1111',0(R2)   ASCB pointer                          00193\n         USING ASCB,R5                                                  00194\n         BM    NOGOOD             branch if bad ptr                     00195\n         TM    102(R5),X'04'      test for swapped out                  00196\nINOROUT  BC    0,NOGOOD           branch if out and not ready to run    00197\n         L     R6,ASCBOUCB        OUCB pointer                          00198\n         USING OUCB,R6                                                  00199\n         L     R4,ASCBOUXB        OUXB pointer                          00200\n         USING OUXB,R4                                                  00201\n         TM    OUCBYFL,OUCBLOG    logon created user?                   00202\nTSOORNO  BC    1,NOGOOD           branch if batch only                  00203\nBATCHORN BC    0,NOGOOD           branch if TSO only                    00204\n         MVI   LINE+2,C' '        clear output line to blanks.          00205\n         MVC   LINE+3(77),LINE+2                                        00206\n*********************************************************************** 00207\n*                                                                     * 00208\n*                              Jobname                                * 00209\n*                                                                     * 00210\n*********************************************************************** 00211\n         MVC   JOB(8),START       initialize 'starting' jobname         00212\n         ICM   R7,B'1111',ASCBJBNI jobname pointer                      00213\n         BZ    NOTJOB             jobname not available                 00214\n         MVC   JOB,0(R7)          move in jobname                       00215\n         B     CONT1                                                    00216\nNOTJOB   ICM   R7,B'1111',ASCBJBNS S/M/L pointer                        00217\n         BZ    CONT1              S/M/L not available                   00218\n         MVC   JOB,0(R7)          move in jobname for S/M/L             00219\nCONT1    CLC   JOBMASK(8),BLANKS  is the job mask all blanks?           00220\n         BE    CONT1A             yes, so go on                         00221\n         LA    R8,JOBMASK         R8 = addr of jobmask                  00222\n         LA    R7,JOBMASK+7       R7 = addr of last char in mask        00223\nMASKLOOP CLI   0(R8),C' '         is the char a blank?                  00224\n         BE    GOTLEN             yes                                   00225\n         CR    R8,R7              is R8 = R7?                           00226\n         BE    GOTLEN             yes - end of mask                     00227\n         LA    R8,1(R8)           point to next char                    00228\n         B     MASKLOOP           check next char                       00229\nGOTLEN   LA    R7,JOBMASK+1       R7 = addr of first char in mask + 1   00230\n         SR    R8,R7              R8 = length of mask - 1               00231\n         EX    R8,VARCLC1         is the job mask = jobname?            00232\n         BNE   NOGOOD             no, so flush this ASCB                00233\n*********************************************************************** 00234\n*                                                                     * 00235\n*                             Swap count                              * 00236\n*                                                                     * 00237\n*********************************************************************** 00238\nCONT1A   LH    R7,OUCBSWC         R7 = swap count                       00239\n         CVD   R7,WORK            convert it to decimal.                00240\n         MVO   WORK,WORK                                                00241\n         MVI   WORK+7,X'0C'                                             00242\n         MVC   $UCBSWC(2),PTRN1+5                                       00243\n         ED    $UCBSWC-1(3),WORK+6                                      00244\n*********************************************************************** 00245\n*                                                                     * 00246\n*                          Swap Reason code - OUCBSRC                 * 00247\n*                                                                     * 00248\n*********************************************************************** 00249\nSWAPCODE TM    OUCBQFL,OUCBOUT    are we swapped out?                   00250\n         BZ    FORGET             no, swap code means nothing           00251\n         CLI   OUCBSRC,X'0A'      check for valid swap reason           00252\n         BH    BADCODE            no.                                   00253\n         CLI   OUCBSRC,X'00'                                            00254\n         BE    BADCODE            no.                                   00255\n         SR    R8,R8                                                    00256\n         IC    R8,OUCBSRC         use code number as offset into table  00257\n         SH    R8,=H'1'           decrease by 1                         00258\n         LA    R7,CODETABL                                              00259\n         LA    R7,0(R8,R7)        load addr of correct alpha code       00260\n         MVC   STATUS(1),0(R7)    move code to output                   00261\n         B     FORGET                                                   00262\nBADCODE  MVI   STATUS,C'?'        error in code or program logic        00263\n*********************************************************************** 00264\n*                                                                     * 00265\n*                    Address Space Queue Location                     * 00266\n*                                                                     * 00267\n*********************************************************************** 00268\nFORGET   MVI   LOC,C'I'           assume address space on 'in' queue    00269\n         MVI   LINE+1,X'E8'       attr byte - protected, hi intensity   00270\n         TM    OUCBSFL,OUCBNSW    address space - non-swap              00271\n*        BZ    LOGSQ              NO                                    00272\n         BZ    WAITQ              NO                                    00272\n         MVI   LOC,C'$'           MOVE IN NON-SWAP INDICATION.          00273\n         B     DONE                                                     00274\n*LOGSQ    TM    OUCBQFL,OUCBLSW    'LOGICAL SWAP' QUEUE                 00275\n*        BZ    WAITQ              NO                                    00276\n*        MVI   LOC,C'L'           'LOGICAL SWAP' QUEUE INDICATION       00277\n*        MVI   LINE+1,X'60'       ATTR BYTE - LOW INTENSITY             00278\n*        B     DONE                                                     00279\nWAITQ    TM    OUCBQFL,OUCBOFF    'WAIT' QUEUE                          00280\n         BZ    OUTQ               NO                                    00281\n         MVI   LOC,C'W'           'WAIT' QUEUE INDICATION               00282\n         MVI   LINE+1,X'60'       ATTR BYTE - LOW INTENSITY             00283\n         B     DONE                                                     00284\nOUTQ     TM    OUCBQFL,OUCBOUT    'OUT' QUEUE                           00285\n         BZ    TRANS              NO                                    00286\n         MVI   LOC,C'O'           'OUT' QUEUE INDICATION                00287\n         MVI   LINE+1,X'60'       ATTR BYTE - LOW INTENSITY             00288\n         B     DONE                                                     00289\nTRANS    TM    OUCBQFL,OUCBGOO+OUCBGOI+OUCBGOB    TRANSITIONING' STATUS 00290\n         BZ    DONE               NO                                    00291\n         MVI   LOC,C'?'           'transitioning' indication            00292\n*********************************************************************** 00293\n*                                                                     * 00294\n*                    Total CPU Time (task + SRB                       * 00295\n*                                                                     * 00296\n*********************************************************************** 00297\nDONE     LM    R8,R9,ASCBEJST     EJST (CPU time - task type)           00298\n         SRDL  R8,12              convert to microsec                   00299\n         LM    R10,R11,ASCBSRBT   srb time                              00300\n         SRDL  R10,12             convert to microsec                   00301\n         AR    R9,R11             total (task + SRB) CPU time           00302\n         BNO   NOOVFLO            branch if no overflow.                00303\n         A     R8,=F'1'           otherwise add one to high order.      00304\nNOOVFLO  AR    R8,R10             high order.                           00305\n         D     R8,=F'100000'      for divide.                           00306\n         CVD   R9,WORK            convert to decimal.                   00307\n         MVC   TCPU(6),PTRN2                                            00308\n         ED    TCPU-1(7),WORK+5                                         00309\n*********************************************************************** 00310\n*                                                                     * 00311\n*                 Frames Allocated to address space                   * 00312\n*                                                                     * 00313\n*********************************************************************** 00314\n         LH    R7,ASCBFMCT        allocated page frame count            00315\n         CVD   R7,WORK                                                  00316\n         MVC   MEM(3),PTRN1+4                                           00317\n         ED    MEM-1(4),WORK+6                                          00318\n         EJECT                                                          00319\n*********************************************************************** 00320\n*                                                                     * 00321\n*     'General' or 'S.R.M.' Mode?                                     * 00322\n*                                                                     * 00323\n*********************************************************************** 00324\n         CLI   SRMSW,X'00'                                              00325\n         BE    GENERAL                                                  00326\n*********************************************************************** 00327\n*  SRM Mode:                                                          * 00328\n*********************************************************************** 00329\n*                                                                     * 00330\n*                     Working Set size at swapin                      * 00331\n*                                                                     * 00332\n*********************************************************************** 00333\n         LH    R7,OUCBWSS         swapin frame count                    00334\n         CVD   R7,WORK                                                  00335\n         MVC   $UCBWSS(3),PTRN1+4                                       00336\n         ED    $UCBWSS-1(4),WORK+6                                      00337\n*********************************************************************** 00338\n*                                                                     * 00339\n*                        Dispatching priority                         * 00340\n*                                                                     * 00341\n*********************************************************************** 00342\n         XR    R7,R7              R7 = 0                                00343\n         IC    R7,ASCBDP          R7 = dispatching priority             00344\n         SRL   R7,4               convert first hex character           00345\n         IC    R8,HEX(R7)                                               00346\n         STC   R8,DP                                                    00347\n         IC    R7,ASCBDP          R7 = dispatching priority             00348\n         N     R7,=F'15'          convert second hex character          00349\n         IC    R8,HEX(R7)                                               00350\n         STC   R8,DP+1                                                  00351\n*********************************************************************** 00352\n*                                                                     * 00353\n*                   Position on Dispatching queue                     * 00354\n*                                                                     * 00355\n*********************************************************************** 00356\n         CLI   LOC,C'O'           memory swapped out ?                  00357\n         BE    NOPOS              if yes, forget about position.        00358\n         CLI   LOC,C'W'           wait status ?                         00359\n         BE    NOPOS              if yes, forget about position.        00360\n         LH    R7,ASCBSEQN        load dp queue position.               00361\n         CVD   R7,WORK            prepare for conversion to EBCDIC.     00362\n         UNPK  DQ,WORK+6(2)       convert to decimal.                   00363\n         OI    DQ+1,X'F0'                                               00364\n*********************************************************************** 00365\n*                                                                     * 00366\n*                  Resource Manager Recommendation                    * 00367\n*                                                                     * 00368\n*********************************************************************** 00369\nNOPOS    L     R7,OUCBCMRV        composite WLM recommendation value    00370\n         LTR   R7,R7              hi-order bit is on ?                  00371\n         BNM   RMROK              yes, WMR invalid                      00372\n         MVC   $UCBWMR,=C'**'     'not avail' indication                00373\n         MVI   $UCBWMS+4,C'-'     blank out the service counter.        00374\n         B     CONT3                                                    00375\nRMROK    SRL   R7,8               divide by 256                         00376\n         CVD   R7,WORK            convert to decimal .                  00377\n         UNPK  $UCBRMR,WORK+6(2)                                        00378\n         OI    $UCBRMR+1,X'F0'                                          00379\n         CP    WORK+6(2),=PL2'0'  RMR greater than 99 ?                 00380\n         BNE   CONT3              yes, double zero field.               00381\n         MVI   $UCBRMR,C' '       WMR less than 1.                      00382\n*********************************************************************** 00383\n*                                                                     * 00384\n*                         Performance Group                           * 00385\n*                                                                     * 00386\n*********************************************************************** 00387\nCONT3    XR    R7,R7              R7 = 0                                00388\n         ICM   R7,3,OUCBNPG       R7 = performance group                00389\n         CVD   R7,WORK            convert to decimal.                   00390\n         UNPK  $UCBPGN,WORK+6(2)                                        00391\n         OI    $UCBPGN+1,X'F0'                                          00392\n*********************************************************************** 00393\n*                                                                     * 00394\n*                      Performance Group Period                       * 00395\n*                                                                     * 00396\n*********************************************************************** 00397\n         XR    R7,R7              R7 = 0                                00398\n         IC    R7,OUCBPGP         performance group period offset       00399\n         SH    R7,=H'12'          - 12                                  00400\n         SRL   R7,4               / 16                                  00401\n         LA    R7,1(R7)                                                 00402\n         STC   R7,$UCBPGP                                               00403\n         OI    $UCBPGP,X'F0'                                            00404\n*********************************************************************** 00405\n*                                                                     * 00406\n*                         Domain                                      * 00407\n*                                                                     * 00408\n*********************************************************************** 00409\n         XR    R7,R7              R7 = 0                                00410\n         IC    R7,OUCBDMN         R7 = domain                           00411\n         CVD   R7,WORK            convert to decimal.                   00412\n         UNPK  $UCBDOM,WORK+6(2)                                        00413\n         OI    $UCBDOM+1,X'F0'                                          00414\n*********************************************************************** 00415\n*                                                                     * 00416\n*                      WLM Recommendation value                       * 00417\n*                                                                     * 00418\n*********************************************************************** 00419\n         L     R7,OUCBWMR         work load manager rec. value          00420\n         LTR   R7,R7              hi-order bit is on ?                  00421\n         BNM   WMROK              yes, WMR invalid                      00422\n         MVC   $UCBWMR,=C'NA'     'not avail' indication                00423\n         MVI   $UCBWMS+4,C'-'     blank out the service counter.        00424\n         B     NORECOM                                                  00425\nWMROK    SRL   R7,8               divide by 256                         00426\n         CVD   R7,WORK            convert to decimal .                  00427\n         UNPK  $UCBWMR,WORK+6(2)                                        00428\n         OI    $UCBWMR+1,X'F0'                                          00429\n         CP    WORK+6(2),=PL2'0'  WMR greater than 99 ?                 00430\n         BNE   NORECOM            yes, double zero field.               00431\n         MVI   $UCBWMR,C' '       WMR less than 1.                      00432\n*********************************************************************** 00433\n*                                                                     * 00434\n*                      In-Storage Service Rate                        * 00435\n*                                                                     * 00436\n*********************************************************************** 00437\nNORECOM  L     R10,16             R10 = addr of CVT                     00438\n         USING CVT,R10                                                  00439\n         L     R10,CVTOPCTP       R10 = addr of RMCT                    00440\n         DROP  R10                                                      00441\n         L     R10,X'7C'(R10)     R10 = current TOD                     00442\n         S     R10,OUCBTMW        WLM interval start time               00443\n         BP    PLUSRATE                                                 00444\n         MVC   SERATE(3),BLANKS                                         00445\n         B     NOSRV                                                    00446\nPLUSRATE L     R8,OUCBWMS         interval service units                00447\n         SRDL  R8,32              calculate sevice rate                 00448\n         M     R8,=F'976'                                               00449\n         DR    R8,R10                                                   00450\n         CVD   R9,WORK            convert to decimal                    00451\n         MVC   SERATE(3),PTRN1+4                                        00452\n         ED    SERATE-1(4),WORK+6                                       00453\n*********************************************************************** 00454\n*                                                                     * 00455\n*                   Interval Service Accumulation                     * 00456\n*                                                                     * 00457\n*********************************************************************** 00458\nNOSRV    L     R7,OUCBWMS         service units - transaction           00459\n         CVD   R7,WORK            convert to decimal.                   00460\n         MVC   $UCBWMS(6),PTRN1+1                                       00461\n         MVO   WORK,WORK                                                00462\n         MVI   WORK+7,X'0C'                                             00463\n         ED    $UCBWMS-1(7),WORK+4                                      00464\n*********************************************************************** 00465\n*                                                                     * 00466\n*              I/O Count used for Recommendation value                * 00467\n*                                                                     * 00468\n*********************************************************************** 00469\n         LH    R9,ASCBIOSM        R9 =  I/O service measure             00470\n         LH    R10,OUXBIOS        R10 = WLM base I/O measurement        00471\n         SLR   R9,10              I/O count for this in core interval   00472\n         N     R9,=X'0000FFFF'    clear high order bytes                00473\n         CVD   R9,WORK                                                  00474\n         MVC   IOC(5),PTRN1+2                                           00475\n         ED    IOC-1(6),WORK+5                                          00476\n*********************************************************************** 00477\n*                                                                     * 00478\n*              TSLS - TIME SINCE Last swap (seconds)                  * 00479\n*                                                                     * 00480\n*********************************************************************** 00481\n         L     R8,16              R8 = addr of CVT                      00482\n         USING CVT,R8                                                   00483\n         L     R8,CVTOPCTP        R8 = addr of RMCT                     00484\n         DROP  R8                                                       00485\n         L     R8,X'7C'(R8)       R8 = time-of-day                      00486\n         S     R8,OUCBTMS         subtract time of last swap action     00487\n         SRDL  R8,32              convert to HH.MM.SS                   00488\n         D     R8,=F'1024'        convert to seconds                    00489\n         CVD   R9,WORK                                                  00490\n         MVC   TSLS(5),PTRN1+2                                          00491\n         ED    TSLS-1(6),WORK+5                                         00492\n*                                                                       00493\n*                                                                       00494\n         B     LINEDONE                                                 00495\n         EJECT                                                          00496\n*********************************************************************** 00497\n*                                                                     * 00498\n*                      Elapsed Transaction time                       * 00499\n*                                                                     * 00500\n*********************************************************************** 00501\nGENERAL  L     R8,16              R8 = addr of CVT                      00502\n         USING CVT,R8                                                   00503\n         L     R8,CVTOPCTP        R8 = addr of RMCT                     00504\n         DROP  R8                                                       00505\n         L     R8,X'7C'(R8)       R8 = current TOD                      00506\n         S     R8,OUCBTMO         subtract transaction start time       00507\n         SRDL  R8,32              convert to HH.MM.SS                   00508\n         D     R8,=F'1024'        convert to seconds                    00509\n         ST    R9,TRANSSEC        store seconds for later               00510\n         SR    R8,R8              get hours                             00511\n         D     R8,=F'3600'                                              00512\n         CVD   R9,PACK                                                  00513\n         UNPK  HH,PACK+6(R2)                                            00514\n         OI    HH+1,X'F0'                                               00515\n         MVI   HH+2,C':'                                                00516\n         SRDL  R8,32              get minutes                           00517\n         D     R8,=F'60'                                                00518\n         CVD   R9,PACK                                                  00519\n         UNPK  MM(2),PACK+6(2)                                          00520\n         OI    MM+1,X'F0'                                               00521\n         MVI   MM+2,C':'          get seconds                           00522\n         CVD   R8,PACK                                                  00523\n         UNPK  SS(2),PACK+6(2)                                          00524\n         OI    SS+1,X'F0'                                               00525\n*********************************************************************** 00526\n*                                                                     * 00527\n*                          Address Space ID                           * 00528\n*                                                                     * 00529\n*********************************************************************** 00530\n         L     R9,ASCBADDR        R9 = addr of entry in ASVT table      00531\n         S     R9,FRSTASVT        minus addr of first entry             00532\n         SRL   R9,2               divide by 4 = ASID                    00533\n         LR    R7,R9              R7 = ASID                             00534\n         SRL   R7,4               convert first hex character           00535\n         IC    R8,HEX(R7)                                               00536\n         STC   R8,ASID                                                  00537\n         LR    R7,R9              R7 = ASID                             00538\n         N     R7,=F'15'          convert second hex character          00539\n         IC    R8,HEX(R7)                                               00540\n         STC   R8,ASID+1                                                00541\n*********************************************************************** 00542\n*                                                                     * 00543\n*                           Task CPU time                             * 00544\n*                                                                     * 00545\n*********************************************************************** 00546\n         LM    R8,R9,ASCBEJST     EJST (CPU time - task type)           00547\n         SRDL  R8,12              convert to microsec                   00548\n         D     R8,=F'100000'      convert to seconds x 10-3             00549\n         CVD   R9,WORK            convert to decimal.                   00550\n         MVC   CPU(6),PTRN2                                             00551\n         ED    CPU-1(7),WORK+5                                          00552\n*********************************************************************** 00553\n*                                                                     * 00554\n*                            Stepname                                 * 00555\n*                                                                     * 00556\n*********************************************************************** 00557\n         ICM   R7,B'1111',ASCBJBNI jobname pointer                      00558\n         BZ    SML                jobname not available                 00559\n         MVC   PROCSTEP(8),24(R7) move in procstepname                  00560\n         MVC   STEPNAME,56(R7)    move in stepname                      00561\n         B     CONT                                                     00562\nSML      ICM   R7,B'1111',ASCBJBNS S/M/L pointer                        00563\n         BZ    CONT               S/M/L not available                   00564\n         CLI   JOB,C'*'           is this *MASTER* ?                    00565\n         BE    TSO                yes, treat it like a userid           00566\n         TM    OUCBYFL,OUCBSTT    is this a started task?               00567\n         BNO   TSO                no, so use TSO stepname               00568\n         B     CONT                                                     00569\nTSO      MVC   STEPNAME,8(R7)     move in stepname for LOGON            00570\nCONT     EQU    *                                                       00571\n*********************************************************************** 00572\n*                                                                     * 00573\n*                    M/S/L                                            * 00574\n*                                                                     * 00575\n*********************************************************************** 00576\n         TM    OUCBYFL,OUCBSTT    START created task?                   00577\n         BZ    TEST2              no                                    00578\n         MVI   MSL,C'S'                                                 00579\n         B     CONT2                                                    00580\nTEST2    TM    OUCBYFL,OUCBLOG    LOGON created task?                   00581\n         BZ    TEST3              no                                    00582\n         MVI   MSL,C'L'                                                 00583\n         B     CONT2                                                    00584\nTEST3    TM    OUCBYFL,OUCBMNT    MOUNT created task?                   00585\n         BZ    CONT2              no                                    00586\n         MVI   MSL,C'M'                                                 00587\n*********************************************************************** 00588\n*                                                                     * 00589\n*                  # TCBs Active                                      * 00590\n*                                                                     * 00591\n*********************************************************************** 00592\nCONT2    L     R7,ASCBTCBS         R7 = no. of active TCBs              00593\n         CVD   R7,WORK                                                  00594\n         UNPK  TCBA,WORK+7(1)                                           00595\n         OI    TCBA,X'F0'                                               00596\n*********************************************************************** 00597\n*                                                                     * 00598\n*                  Transaction Service Accumulation                   * 00599\n*                                                                     * 00600\n*********************************************************************** 00601\n         TM    OUCBQFL,OUCBOUT    address space swapped in              00602\n         BO    OUTRANS            yes                                   00603\n         L     R7,OUXBTRS         accumulated service                   00604\n         CVD   R7,WORK            convert to decimal.                   00605\n         MVC   $UXBTRS(7),PTRN1                                         00606\n         ED    $UXBTRS-1(8),WORK+4                                      00607\n         B     LINEDONE                                                 00608\nOUTRANS  MVC   $UXBTRS(7),BLANKS  OUXB not available                    00609\n*                                                                       00610\n*        Move Line to buffer                                            00611\n*                                                                       00612\nLINEDONE MVC   0(81,R1),LINE      move the line to the 3270 buffer.     00613\n         LH    R7,SCRSIZE         increment 'TPUT' size                 00614\n         LA    R7,81(R7)          add 81 to current buffer length       00615\n         STH   R7,SCRSIZE         store away again                      00616\n         LA    R1,81(R1)          R1 = addr of bottom of buffer         00617\n         C     R1,ADBUF           have we reached the bottom?           00618\n         BE    PUTIT              yes, go put this screen.              00619\nNOGOOD   BCT   R3,ASCBLOOP        process next address space            00620\n         DROP  R4,R5,R6                                                 00621\n         EJECT                                                          00622\n*********************************************************************** 00623\n*                                                                     * 00624\n*              Put the SWAP buffer to the 3270 screen                 * 00625\n*                                                                     * 00626\n*********************************************************************** 00627\nPUTIT    CLC   JOBMASK(8),BLANKS  is the jobmask blank?                 00628\n         BNE   CHKTYPE            no, so skip                           00629\n         IC    R8,PAGE            load current page character           00630\n         LA    R8,1(R8)           add one to it                         00631\n         STC   R8,PAGE            store it back                         00632\n         CLC   SCRSIZE(2),=H'0'   is the screen empty?                  00633\n         BE    FINDCVT            yes - go do the screen over           00634\nCHKTYPE  CLI   CRTFLAG,X'FF'      is this a CRT?                        00635\n         BE    CRT1               yes                                   00636\n         LA    R1,ERROR           R1 = addr of first line               00637\n         LA    R0,79              R0 = length of heading                00638\n         ICM   R1,8,EDITFLG       edit mode                             00639\n         TPUT  (1),(0),R          write line                            00640\n         LA    R1,HEADINGA+1      R1 = addr of first line               00641\n         LA    R0,79              R0 = length of heading                00642\n         ICM   R1,8,EDITFLG       edit mode                             00643\n         TPUT  (1),(0),R          write line                            00644\n         LH    R7,SCRSIZE         R7 = total screensize                 00645\n         LA    R8,81              R8 = one line                         00646\n         LA    R1,BUFFER+2        set pointer to first line             00647\n         ICM   R1,8,EDITFLG       edit mode                             00648\n         LA    R0,79              R0 length of output line              00649\nNEXTL    LR    R2,R1              save R1 since TPUT zaps it            00650\n         TPUT  (1),(0),R          print one line                        00651\n         LA    R8,81(R8)          add 81 bytes                          00652\n         CR    R7,R8              have we printed last line?            00653\n         BL    CONTA              yes, continue                         00654\n         LA    R1,81(R2)          nope, point to next line              00655\n         LA    R0,79              load length                           00656\n         ICM   R1,8,EDITFLG       edit mode                             00657\n         B     NEXTL              print next line                       00658\nCRT1     LA    R1,CLEAR           R1 = addr of buffer                   00659\n         LA    R0,LENGTH          R0 = length of buffer                 00660\n         AH    R0,SCRSIZE         R0 = full length of buffer            00661\n         ICM   R1,8,FULLSCR       full screen mode                      00662\n         TPUT  (1),(0),R          put screen                            00663\nCONTA    MVC   ERROR(27),BLANKS   blank out error field                 00664\n         CLI   WAITSW,X'FF'       are we in wait mode?                  00665\n         BNE   GETCHAR            no, read from terminal                00666\n*********************************************************************** 00667\n*                                                                     * 00668\n*                           'Wait' mode                               * 00669\n*                                                                     * 00670\n*********************************************************************** 00671\n         STIMER WAIT,BINTVL=DELAY yes, wait 1 second                    00672\n         L     R10,COUNTER        load counter                          00673\n         BCTR  R10,0              counter = counter - 1                 00674\n         ST    R10,COUNTER        store back                            00675\n         CVD   R10,WORK           convert to decimal.                   00676\n         MVC   SCRATCH(4),PATTERN move in edit pattern                  00677\n         ED    SCRATCH(4),WORK+6  edit in time                          00678\n         MVC   TIME(3),SCRATCH+1  move in time                          00679\n         LTR   R10,R10            counter = 0 ?                         00680\n         BNZ   CONTINUE           refresh if still counting             00681\n         XI    WAITSW,X'FF'       counter up, do reads again            00682\n         MVC   TIME(3),BLANKS     clear counter field                   00683\n         B     CONTINUE           refresh one last time                 00684\n*********************************************************************** 00685\n*                                                                     * 00686\n*                       Read Command from user                        * 00687\n*                                                                     * 00688\n*********************************************************************** 00689\nGETCHAR  MVC   REPLY(33),BLANKS   blank out reply field                 00690\n         TGET  REPLY,33           get 79 characters from terminal       00691\n         CLI   REPLY,X'6E'        reshow code?                          00692\n         BE    GETCHAR            yes; ignore it                        00693\n         OC    REPLY(33),BLANKS   convert chars to upper case           00694\n         XC    CBUF+2(2),CBUF+2   clear offset                          00695\n         MVC   CSPLBLOK(24),CSPLSAVE  copy in CSPL blok                 00696\n         XC    CSOABLOK(8),CSOABLOK                                     00697\n         L     R2,SAVEJSCB        R2 = addr of JSCB                     00698\n         USING IEZJSCB,R2                                               00699\n*********************************************************************** 00700\n*                                                                     * 00701\n*     IKJSCAN is being called merely to allow the 'X' feature to      * 00702\n*     function if desired. If SWAP is being used in conjunction       * 00703\n*     with 'SPY', then SWAP must be APF authorized. Since 'X' will    * 00704\n*     not work with authorized programs, we flip off the auth bit     * 00705\n*     in the JSCB to fool it.                                         * 00706\n*                                                                     * 00707\n*********************************************************************** 00708\n*        NI    JSCBOPTS,X'FF'-JSCBAUTH turn off auth to fool PCFSCAN    00709\n         LA    R1,CSPLBLOK        R1 = addr of cmd scan parm list       00710\n         L     R15,ADDRSCAN       R15 = addr of IKJSCAN                 00711\n         BALR  R14,R15            invoke IKJSCAN                        00712\n*        OI    JSCBOPTS,JSCBAUTH  turn APF bits back on                 00713\n         DROP  R2                                                       00714\n         LA    R1,CSOABLOK        R1 = addr of cmd scan output area     00715\n         USING CSOA,R1                                                  00716\n         TM    CSOAFLG,CSOANOC    is the buffer empty?                  00717\n         BO    CONTINUE           yes; just go refresh                  00718\n         DROP  R1                                                       00719\n         SPACE 3                                                        00720\n*********************************************************************** 00721\n*                                                                     * 00722\n*                       W  --  Enter wait mode                        * 00723\n*                                                                     * 00724\n*********************************************************************** 00725\nWAITCHK  CLI   REPLY,C'W'         go into wait mode?                    00726\n         BNE   CDELAY             no                                    00727\n         XI    WAITSW,X'FF'       yes, toggle wait switch               00728\n         LA    R2,30              set default value = 30                00729\n         LA    R15,CONVBIN        branch to conversion rtn              00730\n         BALR  R14,R15            EBCDIC to binary                      00731\n         MVC   SCRATCH(4),PATTERN move in edit pattern                  00732\n         ED    SCRATCH(4),WORK+6  edit in time left                     00733\n         MVC   TIME(3),SCRATCH+1  move time left into place             00734\n         ST    R2,COUNTER         store starting timer value            00735\n         B     CONTINUE           all set - go display next page        00736\n         SPACE 3                                                        00737\n*********************************************************************** 00738\n*                                                                     * 00739\n*            D  --  Set timer delay in tenths of a second             * 00740\n*                                                                     * 00741\n*********************************************************************** 00742\nCDELAY   CLI   REPLY,C'D'         are we changing the time delay?       00743\n         BNE   ENDCHK             no, so continue                       00744\n         LA    R2,10              set default value = 10 tenths second  00745\n         LA    R15,CONVBIN        branch to conversion rtn              00746\n         BALR  R14,R15            EBCDIC to binary                      00747\n         MVC   SCRATCH(5),DPATTRN move in edit pattern                  00748\n         ED    SCRATCH(5),WORK+6  edit in delay time                    00749\n         MVC   PAUSE(3),SCRATCH+2 move time left into place             00750\n         MH    R2,=H'10'          convert to 100ths of a second         00751\n         ST    R2,DELAY           store wait delay value                00752\n         B     CONTINUE           all set - go display next page        00753\n         SPACE 3                                                        00754\n*********************************************************************** 00755\n*                                                                     * 00756\n*                          E  --  End SWAP                            * 00757\n*                                                                     * 00758\n*********************************************************************** 00759\nENDCHK   CLI   REPLY,C'E'         termination requested ?               00760\n         BE    STOP               all done                              00761\n         SPACE 3                                                        00762\n*********************************************************************** 00763\n*                                                                     * 00764\n*                   T  --  TSO Address spaces only                    * 00765\n*                                                                     * 00766\n*********************************************************************** 00767\nTSOCHK   CLI   REPLY,C'T'         TSO only ?                            00768\n         BNE   BATCHCHK           no                                    00769\n         MVI   MODESW,X'FF'       indicate change of modes.             00770\n         MVI   BATCHORN+1,X'80'   reset the branches                    00771\n         MVI   TSOORNO+1,X'00'    only TSO memories.                    00772\n         MVI   MODETBA,C'T'       set mode indicator                    00773\n         B     CONTINUE                                                 00774\n         SPACE 3                                                        00775\n*********************************************************************** 00776\n*                                                                     * 00777\n*                  B  --  Batch Address spaces only                   * 00778\n*                                                                     * 00779\n*********************************************************************** 00780\nBATCHCHK CLI   REPLY,C'B'         batch only ?                          00781\n         BNE   BOTHCHK            no                                    00782\n         MVI   MODESW,X'FF'       indicate change of modes.             00783\n         MVI   TSOORNO+1,X'10'    reset the branches                    00784\n         MVI   BATCHORN+1,X'00'   only batch (STC) memories.            00785\n         MVI   MODETBA,C'B'       set mode indicator                    00786\n         B     CONTINUE                                                 00787\n         SPACE 3                                                        00788\n*********************************************************************** 00789\n*                                                                     * 00790\n*             A  --  All Address Spaces (Batch and TSO)               * 00791\n*                                                                     * 00792\n*********************************************************************** 00793\nBOTHCHK  CLI   REPLY,C'A'         batch and TSO?                        00794\n         BNE   OUTCHK             no                                    00795\n         MVI   MODESW,X'FF'       indicate change of modes.             00796\n         MVI   TSOORNO+1,X'00'    yes, so NOP all the                   00797\n         MVI   BATCHORN+1,X'00'   selection branches.                   00798\n         MVI   MODETBA,C'A'       set mode indicator                    00799\n         B     CONTINUE                                                 00800\n         SPACE 3                                                        00801\n*********************************************************************** 00802\n*                                                                     * 00803\n*        O  --  Address Spaces which are 'out' and not ready          * 00804\n*                                                                     * 00805\n*********************************************************************** 00806\nOUTCHK   CLI   REPLY,C'O'         out mode ?                            00807\n         BNE   INCHK              no                                    00808\n         MVI   MODESW,X'FF'       indicate change of modes.             00809\n         MVI   INOROUT+1,X'00'    nop the branch                        00810\n         MVI   MODEIO,C'O'        set mode indicator                    00811\n         B     CONTINUE                                                 00812\n         SPACE 3                                                        00813\n*********************************************************************** 00814\n*                                                                     * 00815\n*             I  --  Address Spaces which are swapped in              * 00816\n*                                                                     * 00817\n*********************************************************************** 00818\nINCHK    CLI   REPLY,C'I'         in or ready mode ?                    00819\n         BNE   FINDCHK            no                                    00820\n         MVI   INOROUT+1,X'10'    branch                                00821\n         MVI   MODESW,X'FF'       indicate mode switch.                 00822\n         MVI   MODEIO,C'I'        set mode indicator                    00823\n         B     CONTINUE                                                 00824\n         SPACE 3                                                        00825\n*********************************************************************** 00826\n*                                                                     * 00827\n*                F  --  Display only certain jobnames                 * 00828\n*                                                                     * 00829\n*********************************************************************** 00830\nFINDCHK  CLI   REPLY,C'F'         should we set the jobmask?            00831\n         BNE   SRMCHK             no                                    00832\n         MVI   MODESW,X'FF'       indicate mode switch.                 00833\n         MVC   JOBMASK(8),REPLY+1 move mask into place                  00834\n         MVC   MASKNAME(8),JOBMASK move mask indicator into place       00835\n         CLC   JOBMASK(8),BLANKS  is jobmask blank?                     00836\n         BNE   CONTINUE           no, go on                             00837\n         MVC   MASKNAME(8),=C'  Page 1'                                 00838\n         B     CONTINUE                                                 00839\n         SPACE 3                                                        00840\n*********************************************************************** 00841\n*                                                                     * 00842\n*                      S  --  SRM display mode                        * 00843\n*                                                                     * 00844\n*********************************************************************** 00845\nSRMCHK   CLI   REPLY,C'S'         SRM mode ?                            00846\n         BNE   GENCHK             no                                    00847\n         MVI   SRMSW,X'FF'        indicate SRM mode                     00848\n         MVC   HEADINGA(80),HEADING1 move in SRM heading                00849\n         MVC   MODEGS(7),=C'S.R.M. ' set mode indicator                 00850\n         B     CONTINUE                                                 00851\n         SPACE 3                                                        00852\n*********************************************************************** 00853\n*                                                                     * 00854\n*                    G  --  General display mode                      * 00855\n*                                                                     * 00856\n*********************************************************************** 00857\nGENCHK   CLI   REPLY,C'G'         general mode ?                        00858\n         BNE   LINKSPY            no                                    00859\n         MVI   SRMSW,X'00'        indicate general mode                 00860\n         MVC   HEADINGA(80),HEADING2 move in general heading            00861\n         MVC   MODEGS(7),=C'General' set mode indicator                 00862\n         B     CONTINUE                                                 00863\n         SPACE 3                                                        00864\n*********************************************************************** 00865\n*                                                                     * 00866\n*                         L  --  Link to SPY                          * 00867\n*                                                                     * 00868\n*********************************************************************** 00869\nLINKSPY  CLI   REPLY,C'L'         XCTL to SPY?                          00870\n         BNE   NEEDHELP           no                                    00871\n         L     R13,SAVE+4         callers save area pointer.            00872\n         XCTL  (2,12),EP=OPCON    XCTL to SPY                           00873\n         SPACE 3                                                        00874\n*********************************************************************** 00875\n*                                                                     * 00876\n*               ?  --  Display help for SWAP commands                 * 00877\n*                                                                     * 00878\n*********************************************************************** 00879\nNEEDHELP CLI   REPLY,C'?'         user needs help page displayed?       00880\n         BNE   BADCMD                                                   00881\n         L     R1,HLP1ADDR        R1 = addr of help                     00882\n         LA    R0,HELPLEN1        R0 = length of help                   00883\n         ICM   R1,8,FULLSCR       full screen mode                      00884\n         TPUT  (1),(0),R          write help to screen                  00885\n         TGET  REPLY,33           go get a command                      00886\n         L     R1,HLP2ADDR        R1 = addr of help                     00887\n         LA    R0,HELPLEN2        R0 = length of help                   00888\n         ICM   R1,8,FULLSCR       full screen mode                      00889\n         TPUT  (1),(0),R          write help to screen                  00890\n         B     GETCHAR            go get a command                      00891\n         SPACE 3                                                        00892\n*********************************************************************** 00893\n*                                                                     * 00894\n*                     Blank or Invalid commands                       * 00895\n*                                                                     * 00896\n*********************************************************************** 00897\nBADCMD   CLI   REPLY,C' '         was a blank just entered?             00898\n         BE    CONTINUE                                                 00899\n         MVC   ERROR(27),ERRMSG2  move in bad command msg               00900\nCONTINUE MVC   SCRSIZE,=H'0'      reset screen size.                    00901\n         LA    R1,BUFFER          ---+                                  00902\n         LA    R6,BUFFER             :                                  00903\n         ICM   R6,8,C' '             : move character long to fill      00904\n         LA    R7,22*81              : screen buffer with blanks        00905\n         LA    R8,BUFFER             :                                  00906\n         SR    R9,R9                 :                                  00907\n         MVCL  R6,R8              ---+                                  00908\n         CLI   MODESW,X'FF'       change of modes ?                     00909\n         BNE   MODEOK             branch if same mode.                  00910\n         MVI   MODESW,X'00'       reset mode change.                    00911\n         B     FINDCVT            start over from beginning.            00912\nMODEOK   LTR   R3,R3              more memories to process ?            00913\n         BNZ   NOGOOD             yes.                                  00914\n         CLI   ATTNFLG,X'00'      was attn hit?                         00915\n         BE    FINDCVT            no                                    00916\n         MVI   ATTNFLG,X'00'      yes, reset flag                       00917\n         MVC   TIME(3),BLANKS     blank out timer field                 00918\n         MVI   WAITSW,X'00'       turn off wait flag                    00919\n         LA    R3,0               R3 = 0                                00920\n         ST    R3,COUNTER         set timer to 0                        00921\n         B     FINDCVT            otherwise, start over from the top.   00922\nSTOP     CLI   CRTFLAG,X'00'      is this a CRT?                        00923\n         BE    STOP1              no; don't clear                       00924\n         LA    R1,CLR             R1 = addr of clear string             00925\n         LA    R0,CLRLEN          R0 = length of clear string           00926\n         ICM   R1,8,FULLSCR       full screen mode                      00927\n         TPUT  (1),(0),R          clear the screen before we leave      00928\n         STFSMODE OFF             turn off fullscreen mode              00929\nSTOP1    L     R13,SAVE+4                                               00930\n         RETURN (14,12),RC=0                                            00931\nVARCLC1  CLC   JOBMASK(0),JOB                                           00932\n         EJECT                                                          00933\n*********************************************************************** 00934\n*                                                                     * 00935\n*            Convert EBCDIC numbers from user into binary             * 00936\n*                                                                     * 00937\n*********************************************************************** 00938\nCONVBIN  CVD   R2,WORK            convert to decimal.                   00939\n         CLI   REPLY+1,C' '       did he enter a number?                00940\n         BE    RTRN               no, use the default                   00941\n         CLI   REPLY+1,C'0'       is the hex code < 'F0' ?              00942\n         BL    BADCHAR            yes, error                            00943\n         CLI   REPLY+1,C'9'       is the hex code > 'F9' ?              00944\n         BH    BADCHAR            yes, error                            00945\n         PACK  WORK(8),REPLY+1(1) pack EBCDIC (assume 1 digit)          00946\n         CLI   REPLY+2,C' '       did he enter 2 digits?                00947\n         BE    CVB                no, dont do the 2 digit pack          00948\n         CLI   REPLY+2,C'0'       is the hex code < 'F0' ?              00949\n         BL    BADCHAR            yes, error                            00950\n         CLI   REPLY+2,C'9'       is the hex code > 'F9' ?              00951\n         BH    BADCHAR            yes, error                            00952\n         PACK  WORK(8),REPLY+1(2) pack again, with 2 digits this time   00953\nCVB      CVB   R2,WORK            get binary                            00954\nRTRN     BR    R14                return to mainline                    00955\nBADCHAR  MVC   ERROR(27),ERRMSG1  numeric error                         00956\n         B     RTRN                                                     00957\n         EJECT                                                          00958\n*********************************************************************** 00959\n*                                                                     * 00960\n*          Setup and Initialize Parameter list for IKJSCAN            * 00961\n*                                                                     * 00962\n*********************************************************************** 00963\nINITSCAN STM   R15,R4,SAVE154     save regs                             00964\n         L     R3,CVTPTR          R3 = addr of CVT                      00965\n         L     R3,0(R3)           R3 = addr of addr of TCB              00966\n         L     R3,4(R3)           R3 = addr of TCB                      00967\n         USING TCB,R3                                                   00968\n         ICM   R3,7,TCBJSCBB      R3 = addr of JSCB                     00969\n         ST    R3,SAVEJSCB        save addr of JSCB                     00970\n         DROP  R3                                                       00971\n         USING IEZJSCB,R3                                               00972\n         L     R4,JSCBPSCB        R4 = addr of PSCB                     00973\n         DROP  R3                                                       00974\n         USING PSCB,R4                                                  00975\n         L     R3,PSCBUPT         R3 = addr of UPT                      00976\n         ST    R3,SAVEUPT         save addr of UPT                      00977\n         LA    R2,CSPLSAVE        R2 = addr of cmd scan parm list       00978\n         USING CSPL,R2                                                  00979\n         ST    R3,CSPLUPT         save UPT addr                         00980\n         L     R3,PSCBRLGB        R3 = addr of relogon buffer           00981\n         L     R3,256(R3)         R3 = addr of ECT                      00982\n         ST    R3,CSPLECT         save ECT addr                         00983\n         LA    R3,CPECB           R3 = addr of fake ECB for this CP     00984\n         ST    R3,CSPLECB         save ECB addr                         00985\n         LA    R3,FLAGWORD        R3 = addr of CSPL flag word           00986\n         ST    R3,CSPLFLG         save flag addr                        00987\n         LA    R3,CSOABLOK        R3 = addr of cmd scan output area     00988\n         ST    R3,CSPLOA          save output area addr                 00989\n         LA    R3,CBUF            R3 = addr of 'cmd buffer'             00990\n         ST    R3,CSPLCBUF        save cbuf addr                        00991\n         DROP  R2,R4                                                    00992\n         LOAD  EP=IKJSCAN                                               00993\n         ST    R0,ADDRSCAN                                              00994\n         LM    R15,R4,SAVE154     restore regs 15 - 4                   00995\n         BR    R14                                                      00996\n         SPACE 2                                                        00997\n         DS    0F                                                       00998\nSAVE154  DS    6F                                                       00999\n         SPACE 1                                                        01000\nSAVEUPT  DS    F                   save addr of UPT                     01001\nSAVEJSCB DS    F                   save addr of JSCB                    01002\nCSPLBLOK DS    6F                  cmd scan parameter list              01003\nCSPLSAVE DS    6F                                                       01004\nCPECB    DC    F'0'                fake ECB for this CP                 01005\nFLAGWORD DC    F'0'                                                     01006\nCSOABLOK DS    2F                                                       01007\nCBUF     DC    AL2(37),AL2(0)                                           01008\nREPLY    DC    CL33' '             user's command input buffer          01009\nADDRSCAN DS    A                                                        01010\n         DROP  R12                                                      01011\n         EJECT                                                          01012\n*********************************************************************** 01013\n*                                                                     * 01014\n*                          A T T N E X I T                            * 01015\n*                                                                     * 01016\n*         Trap userd Attention Interrupts and flag for reset          * 01017\n*                                                                     * 01018\n*********************************************************************** 01019\nATTNEXIT SAVE  (14,12)            save the callers registers            01020\n         LR    R7,R15             establish                             01021\n         USING ATTNEXIT,R7        addressability.                       01022\n         LA    R11,SAVEA          set-up                                01023\n         ST    R13,SAVEA+4         save                                 01024\n         ST    R11,8(,R13)          area                                01025\n         LR    R13,R11               chaining                           01026\n         MVI   ATTNFLG,X'FF'      set attn flag                         01027\n         L     R13,SAVEA+4        callers save area pointer.            01028\n         RETURN (14,12),RC=0      and away we go...                     01029\nSAVEA    DS    18F                                                      01030\n         DROP  R7                                                       01031\n         EJECT                                                          01032\n*********************************************************************** 01033\n*                                                                     * 01034\n*                             Constants                               * 01035\n*                                                                     * 01036\n*********************************************************************** 01037\nSTAXLIST STAX  ATTNEXIT,MF=L                                            01038\nPACK     DS    D                                                        01039\nWORK     DS    D                                                        01040\nSCRATCH  DS    D                  scratch area                          01041\nASCBADDR DS    F                  ASCB addr save area                   01042\nFRSTASVT DS    F                  first ASVT entry save area            01043\nCOUNTER  DC    F'0'               wait counter                          01044\nTRANSSEC DS    F                  transaction time in seconds           01045\nDELAY    DC    F'100'             2 second delay for refresh            01046\nHLP1ADDR DC    A(HELP1)                                                 01047\nHLP2ADDR DC    A(HELP2)                                                 01048\nADBUF    DC    A(0)                                                     01049\nSCRSIZE  DC    H'0'                                                     01050\nATTNFLG  DC    X'00'              attention flag                        01051\nWAITSW   DC    X'00'              wait mode                             01052\nMODESW   DC    X'00'              mode change.                          01053\nSRMSW    DC    X'00'              SRM mode.                             01054\nPTRN1    DC    X'20202020202120'  edit pattern                          01055\nPTRN2    DC    X'202021204B202020'                                      01056\nPATTERN  DC    X'40202020'        edit pattern                          01057\nDPATTRN  DC    X'4021204B20'      edit pattern                          01058\nBLANKS   DC    CL40' '                                                  01059\n         SPACE 2                                                        01060\nCODETABL DC    C'O'  Swap Code 1 : Terminal output wait                 01061\n         DC    C'I'  Swap Code 2 : Terminal input wait                  01062\n         DC    C'W'  Swap Code 3 : Long Wait                            01063\n         DC    C'A'  Swap Code 4 : Auxiliary Storage Shortage           01064\n         DC    C'R'  Swap Code 5 : Real Storage Shortage                01065\n         DC    C'V'  Swap Code 6 : MS0 Detected Wait                    01066\n         DC    C'S'  Swap Code 7 : REQSWAP SYSEVENT Issued              01067\n         DC    C'E'  Swap Code 8 : ENQHOLD Exchg by swap analysis       01068\n         DC    C'X'  Swap Code 9 : EXCHG Recommended by swap analysis   01069\n         DC    C'$'  Swap Code A : Unilateral Swapout                   01070\nHEX      DC    C'0123456789ABCDEF'                                      01071\nSTART    DC    C'Starting'                                              01072\n         EJECT                                                          01073\n*********************************************************************** 01074\n*                                                                     * 01075\n*                        Format Display Line                          * 01076\n*                                                                     * 01077\n*********************************************************************** 01078\nX        DC    CL80' '                                                  01079\n         ORG   X                  Byte                                  01080\nLINE     DC    X'1D60'            0     Protected, low intensity        01081\nJOB      DC    CL8' '             2                                     01082\n         DC    C' '               10                                    01083\n         ORG   X+11               For General Listing                   01084\nPROCSTEP DC    CL8' '             11                                    01085\n         DC    C' '               19                                    01086\nSTEPNAME DC    CL8' '             20                                    01087\n         DC    CL3' '             28                                    01088\nASID     DC    CL2' '             31                                    01089\n         DC    CL2' '             33                                    01090\nCPU      DC    CL6' '             35                                    01091\n         DC    C' '               41                                    01092\n         ORG   X+11               For SRM Listing                       01093\n$UCBPGN  DC    CL2' '             11                                    01094\n         DC    C' '               13                                    01095\n$UCBPGP  DC    C' '               14                                    01096\n         DC    C' '               15                                    01097\n$UCBDOM  DC    CL2' '             16                                    01098\n         DC    C' '               18                                    01099\nDP       DC    CL2' '             19                                    01100\n         DC    C' '               21                                    01101\nDQ       DC    CL2' '             22                                    01102\n         DC    C' '               24                                    01103\n$UCBRMR  DC    CL2' '             25                                    01104\n         DC    C' '               27                                    01105\n$UCBWMR  DC    CL2' '             28                                    01106\n         DC    C' '               30                                    01107\nSERATE   DC    CL3' '             31                                    01108\n         DC    C' '               34                                    01109\n$UCBWMS  DC    CL6' '             35                                    01110\n         DC    C' '               41                                    01111\n         ORG   X+42               For General and SRM Listings          01112\nTCPU     DC    CL6' '             42                                    01113\n         DC    C' '               48                                    01114\n$UCBSWC  DC    CL2' '             49                                    01115\n         DC    C' '               51                                    01116\nSTATUS   DC    C' '               52                                    01117\n         DC    C' '               53                                    01118\nLOC      DC    C' '               54                                    01119\n         DC    C' '               55                                    01120\nMEM      DC    CL3' '             56                                    01121\n         DC    C' '               59                                    01122\n         ORG   X+60               For SRM listing                       01123\n$UCBWSS  DC    CL3' '             60                                    01124\n         DC    C' '               63                                    01125\nIOC      DC    CL5' '             64                                    01126\n         DC    C' '               69                                    01127\nTSLS     DC    CL5' '             70                                    01128\n         DC    C' '               75                                    01129\n         ORG   X+60               For General Listing                   01130\nHH       DC    CL2' '             60                                    01131\n         DC    C':'               62                                    01132\nMM       DC    CL2' '             63                                    01133\n         DC    C':'               65                                    01134\nSS       DC    CL2' '             66                                    01135\n         DC    C' '               68                                    01136\nMSL      DC    C' '               69                                    01137\n         DC    C' '               70                                    01138\n$UXBTRS  DC    CL7' '             71                                    01139\n         DC    C' '               78                                    01140\nTCBA     DC    CL1' '             79                                    01141\n         DC    C' '               80                                    01142\n         ORG X+90                                                       01143\nFULLSCR  DC    X'03'                                                    01144\nEDITFLG  DC    X'00'                                                    01145\nCRTFLAG  DC    X'FF'                                                    01146\nJOBMASK  DC    CL8'        '                                            01147\nERRMSG1  DC    CL27' ERROR - Non-numeric value '                        01148\nERRMSG2  DC    CL27' ERROR - Invalid command   '                        01149\n         LTORG                                                          01150\nHEADING1 DC CL80' Jobname  PG P Dm DP DQ RM WR SU/S  S.U.  TCPU  SC R LX01151\n                Mem WSS   I/O  TSLS       '                             01152\nHEADING2 DC CL80' Jobname  Procstep Stepname  ASID   CPU   TCPU  SC R LX01153\n                Mem HH:MM:SS MSL S.U. TCB '                             01154\nCLR      DC    X'C1'               WCC - Clear screen at end of pgm     01155\n         DC    X'115D7E'           SBA to row 24, col 79 (FSE 5.0)      01156\n         DC    X'114040'           SBA to row 1, col 1                  01157\n         DC    X'3C404000'         Fill screen with nulls               01158\n         DC    X'114040'           SBA to row 1, col 1                  01159\n         DC    X'13'               Insert cursor                        01160\nCLRLEN   EQU   *-CLR                                                    01161\nCLEAR    DC    X'C1'               WCC                                  01162\n         DC    X'115D7F'           SBA to row 24, col 80 (FSE 5.0)      01163\n         DC    X'114040'           SBA to row 1, col 1                  01164\n         DC    X'3C404000'         Fill screen with nulls               01165\nPHEADING DC    X'114040'           SBA to row 1, COL 1                  01166\n         DC    X'1D40'             ATTR Byte - unprotected, low intens. 01167\n         DC    X'13'               Insert cursor                        01168\n         DC    C'   '                                                   01169\nERROR    DC    CL30' '                                                  01170\nCMDCTRL1 DC    X'1DE8'             ATTR Byte - protected, hi intens.    01171\n         DC    CL7'Timer: '                                             01172\nTIME     DC    CL3'   '                                                 01173\nSLASH    DC    CL1'/'                                                   01174\nPAUSE    DC    CL3'1.0'                                                 01175\n         DC    CL5'     '                                               01176\n         DC    CL6'Mode: '                                              01177\nMODETBA  DC    CL1'B'                                                   01178\nMODEIO   DC    CL2'O '                                                  01179\nMODEGS   DC    CL9'General  '                                           01180\nMASKNAME DC    CL7'  Page '                                             01181\nPAGE     DC    CL1'1'                                                   01182\nHEADINGA DS    CL80' '                                                  01183\nBUFFER   DC    41CL81' '                                                01184\nLENGTH   EQU   BUFFER-CLEAR                                             01185\n         EJECT                                                          01186\nHELP1    DC    X'C1'               WCC                                  01187\n         DC    X'115D7F'           SBA to row 24, col 80 (FSE 5.0)      01188\n         DC    X'114040'           SBA to row 1, col 1                  01189\n         DC    X'3C404000'         Fill screen with nulls               01190\n         DC    X'114040',X'1DE8',C'Command      Description'            01191\n         DC    X'11C150'                                                01192\n         DC    X'11C260',C'   A         Display Started tasks, batch '  01193\n         DC    C'and TSO'                                               01194\n         DC    X'11C3F0',C'   B         Display Started tasks and '     01195\n         DC    C'batch only'                                            01196\n         DC    X'11C540',C'   DXX       Set delay to XX tenths seconds' 01197\n         DC    X'11C650',C'   E         End SWAP'                       01198\n         DC    X'11C760',C'   F         Display all Jobnames'           01199\n         DC    X'11C8F0',C'   FXXXXXXXX Display only Job ''XXXXXXXX'''  01200\n         DC    X'114A40',C'   G         General Information Will be '   01201\n         DC    C'displayed'                                             01202\n         DC    X'114B50',C'   I         Display only swapped-in '       01203\n         DC    C'memories'                                              01204\n         DC    X'114C60',C'   O         Display both in and out '       01205\n         DC    C'memories'                                              01206\n         DC    X'114DF0',C'   L         LINK to program SPY '           01207\n         DC    C'(if available)'                                        01208\n         DC    X'114F40',C'   S         SRM information displayed'      01209\n         DC    X'115050',C'   T         Display TSO jobs only'          01210\n         DC    X'11D160',C'   W         Start timer mode for 30 '       01211\n         DC    C'seconds'                                               01212\n         DC    X'11D2F0',C'   WXX       Start timer mode for XX '       01213\n         DC    C'seconds'                                               01214\n         DC    X'11D440',C'   W0        Start timer mode until '        01215\n         DC    C'interrUPT'                                             01216\n         DC    X'11D550',C'   ?         Display this page'              01217\n         DC    X'11D660'                                                01218\n         DC    X'11D7F0',C'Hitting INTERRUPT will stop the wait timer'  01219\n         DC    X'11D940'                                                01220\n         DC    X'115A50',C'*WARNING*  INTERRUPT may be ignored if '     01221\n         DC    C'timer is set too fast (< .4 sec)'                      01222\n         DC    X'115B60'                                                01223\n         DC    X'115CF0',C'Hit ENTER to continue'                       01224\n         DC    X'115DC61D40134040401DE8'                                01225\nHELPMRK1 EQU   *                                                        01226\nHELPLEN1 EQU   HELPMRK1-HELP1                                           01227\n         EJECT                                                          01228\nHELP2    DC    X'C1'               WCC                                  01229\n         DC    X'115D7F'           SBA to row 24, col 80 (FSE 5.0)      01230\n         DC    X'114040'           SBA to row 1, col 1                  01231\n         DC    X'3C404000'         Fill screen with nulls               01232\n         DC    X'114040',X'1DE8',C'Swap Code    Description'            01233\n         DC    X'11C150'                                                01234\n         DC    X'11C260',C'   A       Auxilary storage shortage'        01235\n         DC    X'11C260',C'   E       ENQHOLD exchange'                 01236\n         DC    X'11C3F0',C'   I       Terminal input wait'              01237\n         DC    X'11C540',C'   O       Terminal output wait'             01238\n         DC    X'11C650',C'   R       Real storage shortage'            01239\n         DC    X'11C760',C'   S       REQSWAP SYSEVENT issued'          01240\n         DC    X'11C8F0',C'   V       MS0 detected wait'                01241\n         DC    X'114A40',C'   W       Long wait'                        01242\n         DC    X'114B50',C'   X       Exchange swap'                    01243\n         DC    X'114C60',C'   $       Unilateral swapout'               01244\n         DC    X'114DF0',C'   ?       Unknown'                          01245\n         DC    X'114F40'                                                01246\n         DC    X'115050',C'Loc. Code   Description'                     01247\n         DC    X'11D160'                                                01248\n         DC    X'11D2F0',C'    I      Swapped in and eligible to run'   01249\n         DC    X'11D440',C'    O      Swapped out but ready to run'     01250\n         DC    X'11D550',C'    W      Swapped out and not ready to run' 01251\n         DC    X'11D660',C'    $      Swapped in: V=R or non-swappable' 01252\n         DC    X'11D7F0',C'    ?      In transition between states'     01253\n         DC    X'11D940',C'    L      Logically Swapped'                01254\n         DC    X'115A50'                                                01255\n         DC    X'115B60',C'Version 4.5'                                 01256\n         DC    X'115CF0',C'Hit ENTER to continue'                       01257\n         DC    X'115DC61D40134040401DE8'                                01258\nHELPMRK2 EQU   *                                                        01259\nHELPLEN2 EQU   HELPMRK2-HELP2                                           01260\n         EJECT                                                          01261\n*********************************************************************** 01262\n*                                                                     * 01263\n*                System Control Block Mapping DSECTs                  * 01264\n*                                                                     * 01265\n*     All macros can be found in either 'SYS1.MACLIB' or in           * 01266\n*     'SYS1.AMODGEN'.                                                 * 01267\n*                                                                     * 01268\n*********************************************************************** 01269\n         PRINT GEN                                                      01270\n         CVT   DSECT=YES          Communications Vector Table           01271\n         SPACE 2                                                        01272\n         IEZJSCB ,                Job Step Control Block                01273\n         SPACE 2                                                        01274\n         IHAASCB ,                Address Space Control Block           01275\n         SPACE 2                                                        01276\n         IHAASVT ,                Address Space Vector Table            01277\n         SPACE 2                                                        01288\n         IRAOUCB ,                SRM User Control Block                01289\n         SPACE 2                                                        01278\n         IHAOUXB ,                SRM User Extension Block              01279\n         SPACE 2                                                        01280\n         IKJCSOA ,                Command Scan OuTPUT Area              01281\n         SPACE 2                                                        01282\n         IKJCSPL ,                Command Scan Parameter List           01283\n         SPACE 2                                                        01284\n         IKJPSCB ,                Protected Step Control Block          01285\n         SPACE 2                                                        01286\n         IKJTCB  ,                Task Control Block                    01287\n         SPACE 2                                                        01290\n         END   SWAP                                                     01291\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SWAP$": {"ttr": 18949, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06O\\x01\\x02\\x06O\"\\x19\\x00%\\x00%\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-05T00:00:00", "modifydate": "2002-03-05T22:19:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "SYZYGY1"}, "text": "//ZSWAP    JOB (IS,OTS,M00,000,64),'SYSTEMS***BRIAN',\n//      CLASS=A,MSGCLASS=A,NOTIFY=SYZYGY1 TYPRUN=SCAN\n//ASMFCL PROC  CLASS=A,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='SYZYGY.PDS.DATA',\n//             LOAD='SYZYGY.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             DIR=1,              NUMBER OF DIRECTORY BLOCKS\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='OBJECT,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD,DISP=SHR,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.,&DIR.))\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=SWAP\n//LKED.SYSIN   DD   *\n   NAME SWAP(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYSTEM": {"ttr": 18951, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06O\\x01\\x02\\x06O\"!\\x00\\xeb\\x00\\xeb\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-05T00:00:00", "modifydate": "2002-03-05T22:21:00", "lines": 235, "newlines": 235, "modlines": 0, "user": "SYZYGY1"}, "text": " TITLE 'S Y S T E M   C O N F I G U R A T I O N   D I S P L A Y'\n*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*\n*                                                                     *\n*  SYSMVS IS THE OS/MVS VERSION OF THE SYSTEM CONFIGURATION DISPLAY   *\n*     COMMAND.  IT SHOWS A TSO USER THE OPERATING SYSTEM, RELEASE,    *\n*     CPU MODEL, SERIAL NUMBER(S), AND MAIN STORAGE SIZE, AND DATE.   *\n*                                                                     *\n*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*\n         MACRO , JVDENTER - V1M00 - 01/28/74\n&LABEL   JVDENTER                                                      +\n               &BASE=(11),                                             +\n               &REGS=(14,12),                                          +\n               &ID=,                                                   +\n               &VERSION=,                                              +\n               &DSA=72,                                                +\n               &ORIGIN=*,                                              +\n               &CFL=YES\n.*\n         LCLC  &EPID,&BASR,&START\n.*\n.BEGIN   AIF   ('&LABEL' EQ '').IDT\n.*\n         SPACE\n&LABEL   DS    0H\n         ENTRY &LABEL\n         SPACE\n.*\n.IDT     AIF   (T'&ID EQ 'O').IDD\n&EPID    SETC  '&ID'\n         AGO   .VER\n.IDD     AIF   ('&LABEL' EQ '').IDC\n&EPID    SETC  '&LABEL'\n         AGO   .VER\n.IDC     ANOP\n&EPID    SETC  '&SYSECT'\n.VER     AIF   (T'&VERSION EQ 'O').GEN\n&EPID    SETC  '&EPID-&VERSION-&SYSDATE-&SYSTIME'\n         MNOTE *,'       &EPID'\n.*\n.GEN     ANOP\n&BASR    SETC  '&BASE(1)'\n.*\n&START   SETC  '&ORIGIN'\n         AIF   ('&ORIGIN' NE '@').START\n&START   SETC  '&SYSECT'\n.START   AIF   ('&ORIGIN' EQ '*').HERE\n.*\n         USING &START,&BASR\n         SAVE  &REGS,,&EPID\n         BALR  &BASR,0\n         LA    14,*-&ORIGIN\n         SLR   &BASR,14\n         LR    2,13\n         SPACE\n.*\n         AGO   .GETDSA\n.HERE    ANOP\n.*\n         USING &START,&BASR\n         SAVE  &REGS,,&EPID\n         LR    &BASR,15\n         LR    2,13\n         SPACE\n.*\n.GETDSA  AIF   ('&DSA' EQ '0').NOCFL\n.*\n         LA    3,&DSA\n         GETMAIN R,LV=(3)\n         ST    3,0(1)\n         ST    13,4(1)\n         LR    13,1\n.*\n         AIF   ('&CFL' EQ 'NO').NOCFL\n.*\n         ST    1,8(2)\n.*\n.NOCFL   ANOP\n.*\n         LM    14,04,12(2)\n         SPACE\n.*\n         MEND\n         EJECT\n         MACRO\n&L       JVDEQU &O\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE\n.*\n         MEND\n         EJECT\n         MACRO , JVDLEAVE - V1M00 - 01/28/74\n&LABEL   JVDLEAVE                                                      +\n               &REGS=(14,12),                                          +\n               &RC=,                                                   +\n               &DSA=\n.*\n         LCLC  &L\n.*\n         AIF   ('&DSA' EQ '0').NODSA\n.*\n&LABEL   LH    0,2(13)\n         LR    1,13\n         L     13,4(13)\n.*\n         AIF   ('&RC' NE '(15)').FREE\n.*\n         LR    2,15\n.*\n.FREE    ANOP\n.*\n         FREEMAIN R,LV=(0),A=(1)\n.*\n.RCCHK   AIF   ('&RC' EQ '').NORC\n         AIF   ('&RC' NE '(15)').RTRN\n.*\n         LR    15,2\n.*\n         AGO   .RTRNN\n.RTRN    AIF   ('&RC'(1,1) NE '(').RTRNC\n.*\n         LR    15,&RC(1)\n.*\n.RTRNN   ANOP\n.*\n&L       RETURN &REGS,RC=(15)\n         SPACE\n.*\n         MEXIT\n.RTRNC   ANOP\n.*\n&L       RETURN &REGS,RC=&RC\n         SPACE\n.*\n         MEXIT\n.NORC    ANOP\n.*\n&L       RETURN &REGS\n         SPACE\n.*\n         MEXIT\n.NODSA   ANOP\n&L       SETC  '&LABEL'\n         AGO   .RCCHK\n.*\n         MEND\n         EJECT\nSYSMVS   CSECT\n         SPACE\n         JVDENTER DSA=(DSAEND-DSAWRK),VERSION=&SYSPARM\n         USING    DSAWRK,R13\n         EJECT\n         L     R10,CVTPTR\n         USING CVT,R10\n         L     R3,CVTSYSAD\n         LA    R5,0(R10)\n         S     R5,F8\n         MVC   BUFFER(BUFEND-BUFFER),MASK\n         MVC   BRLSE,4(R5)\n         MVC   BLEVL,6(R5)\n         MVI   BMODL,C'-'\n         LA    R15,16\n         IC    R14,CVTDCB\n         N     R14,VSMASK\n         SRL   R14,1\n         L     R9,CVTEORM\n         SRA   R9,10\n         LA    R9,1(R9)\n         CVD   R9,DWD\n         ED    BCORE,DWD+5\n         MVC   BIPLV,UCBVOLI-UCBOB(R3)\n         ED    BDATE,CVTDATE+1\n         L     R4,CVTPCCAT\n         L     R4,0(R4)      UNIPROCESSOR ONLY !!!!!!!!!\n         MVC   BSNUM,4+2(R4) PCCACPID\n         MVC   BMODL+1(4),4+8(R4)\n         EJECT\n         LA    R7,BUFEND-BUFFER\n         TPUT  BUFFER,(R7)\n         SPACE\n         JVDLEAVE\n         EJECT\nVSMASK   DC    F'2'\nF8       DC    F'8'\nMASK     DC    C'MVS R03.0A  S/370-168  #60116'\n         DC    X'402020202120',C'K  '\nMASKC    DC    C'IPL''D FROM DLIB36 ON 76.079'\n         ORG   MASKC+L'MASKC-6\n         DC    X'2120',C'.',X'202020'\n         LTORG\n         EJECT\nDSAWRK   DSECT\nSSA      DS   18F\nBUFFER   EQU  *\nBTYPE    DS   CL5\nBRLSE    DS   CL2\n         DS   C'.'\nBLEVL    DS   CL2\n         DS   C'  S/370'\nBMODL    DS   CL5\n         DS   C' '\nBSNUM    DS    CL6\nBCORE    DS    ZL6\n         DS    C'K  IPL''D FROM '\nBIPLV    DS    CL6\n         DS    C' ON '\nBDATE    DS    C'74.305'\nBUFEND   EQU   *\nDWD      DS    D\nDSAEND   EQU   *\n         SPACE\n         JVDEQU\n         EJECT\n         EJECT\nCVT      DSECT\n         CVT   LIST=YES\n         EJECT\n         IEFUCBOB\n         SPACE 2\n         END   SYSMVS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYSTEM$": {"ttr": 18956, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06O\\x01\\x02\\x06O\"\"\\x00 \\x00 \\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-05T00:00:00", "modifydate": "2002-03-05T22:22:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "SYZYGY1"}, "text": "//ZSYSTEM  JOB (3,19SW,0000,029),'307-BRIAN',CLASS=A,MSGCLASS=A,\n//   NOTIFY=SYZYGY1 TYPRUN=SCAN\n//ASMFCL PROC  CLASS=H,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='SYZYGY.PDS.DATA',\n//             LOAD='SYZYGY.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='LOAD,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD.(&MEM),DISP=SHR\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=SYSTEM\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VOLCH$": {"ttr": 18958, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06O\\x01\\x02\\x06O\"C\\x00 \\x00 \\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-05T00:00:00", "modifydate": "2002-03-05T22:43:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "SYZYGY1"}, "text": "//SYS5930C JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=SYZYGY1,\n//       MSGCLASS=A,CLASS=A\n//ASMFCL PROC  CLASS=V,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='SYZYGY.PDS.DATA',\n//             LOAD='SYZYGY.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='LOAD,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD.(&MEM),DISP=SHR\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=VOLCHECK\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VOLCHEC#": {"ttr": 18960, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06O\\x01\\x02\\x06O\"C\\x00\\n\\x00\\n\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-05T00:00:00", "modifydate": "2002-03-05T22:43:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "SYZYGY1"}, "text": "//VOLCHECK JOB  (5555),'SYSTEMS*BRIAN',MSGCLASS=A,CLASS=A,\n//         NOTIFY=SYZYGY1\n//*    NAME         DATE         CHANGE\n//*   BRIAN\n//* THIS JOB WILL READ THE PACK AND COMPARE FOR ALL NON CATALOGED DS\n//EXEC     EXEC  PGM=VOLCHECK,REGION=5000K\n//SYSPRINT DD    SYSOUT=*\n//SYSUT2   DD    DUMMY\n//VOLUME01 DD    UNIT=3350,DISP=SHR,VOL=SER=PUB001\n//VOLUME02 DD    UNIT=3350,DISP=SHR,VOL=SER=PUB000\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VOLCHECK": {"ttr": 19201, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06O\\x01\\x02\\x06O\"C\\x05\\xea\\x05\\xea\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-05T00:00:00", "modifydate": "2002-03-05T22:43:00", "lines": 1514, "newlines": 1514, "modlines": 0, "user": "SYZYGY1"}, "text": "         TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'\n         MACRO\n         #VTCFMT4\n         MNOTE *,'       #VTCFMT4  VERSION 002 09/22/75  06/08/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT4                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 4 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 4 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 4 DSCB DESCRIBES THE VOLUME TABLE OF     *\n.*                  CONTENTS.                                         *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT4                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT4DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT4                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*        002   06/08/76   VSAM DATA AREAS ADDED                      *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 4 DSCB DESCRIPTION                                    *\n*                                                                     *\n*        VTOC DESCRIPTION                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDS4KEY   DS    XL44                     KEY - VTOC NAME - 44X'04'\nDS4IDFMT DS    X                        FORMAT 4 ID X'F4'\nDS4HPCHR DS    XL5                      HIGHEST ADDR OF A FORMAT 1 DSCB\nDS4DSREC DS    XL2                      NUMBER OF AVAILABLE DSCB'S\nDS4HCCHH DS    XL4                      CCHH OF NEXT AVAILABLE ALT. TRK\nDS4NOATK DS    XL2                      NUMBER OF REMAINING ALT. TRACKS\nDS4VTOCI DS    X                        VTOC INDICATORS\nDS4NOEXT DS    X                        NUMBER OF EXTENTS, ALWAYS 1\n         DS    XL2                      RESERVED\nDS4DEVSZ DS    XL4                      DEVICE SIZE\nDS4DEVTK DS    XL2                      DEVICE TRACK LENGTH\nDS4DEVZ  DS    0XL2                     KEYED RECORD OVERHEAD\nDS4DEVI  DS    X                        NON-LAST KEYED RECORD OVERHEAD\nDS4DEVL  DS    X                        LAST KEYED RECORD OVERHEAD\nDS4DEVK  DS    X                        NON-KEYED RECORD OVERHEAD DIFF.\nDS4DEVFG DS    X                        FLAG BYTE\nDS4DEVTL DS    XL2                      DEVICE TOLERANCE\nDS4DEVDT DS    X                        NUMBER OF DSCB'S PER TRACK\nDS4DEVDB DS    X                        NUMBER OF DIRECTORY BLOCKS/TRK\nDS4AMTIM DS    XL8                      VSAM TIME STAMP\nDS4AMCAT DS    0XL3                     VSAM CATALOG INDICATORS\nDS4VSIND DS    X                        VSAM INDICATORS\n*              X'80'                      VOLUME OWNED BY VSAM CATALOG\nDS4VSCRA DS    XL2                      RELATIVE TRACK ADDRESS OF CRA\nDS4R2TIM DS    XL8                      VSAM VOLUME/CATALOG MATCH TIME\n         DS    XL5                      RESERVED\nDS4FTPTR DS    XL5                      POINTER TO FIRST FORMAT 6 DSCB\nDS4VTOCE DS    XL10                     VTOC EXTENT DESCRIPTION\n         DS    XL25                     RESERVED\n         MEND\n         MACRO\n         #VTCFMT3\n         MNOTE *,'       #VTCFMT3  VERSION 001 09/22/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT3                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 3 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 3 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 3 DSCB DESCRIBES DATA SET EXTENTS.       *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT3                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT3DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT3                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 3 DSCB DESCRIPTION                                    *\n*                                                                     *\n*        DESCRIPTION OF FOURTH THROUGH SIXTEENTH EXTENTS OF A         *\n*        DATA SET                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDS3KEY   DS    XL4                      KEY - 03030303\nDS3EXT01 DS    XL10                     EXTENT  4 DESCRIPTION\nDS3EXT02 DS    XL10                             5\nDS3EXT03 DS    XL10                             6\nDS3EXT04 DS    XL10                             7\nDS3FMTID DS    X                        DSCB FORMAT 3 IDENTIFIER, X'F3'\nDS3EXT05 DS    XL10                     EXTENT  8 DESCRIPTION\nDS3EXT06 DS    XL10                             9\nDS3EXT07 DS    XL10                            10\nDS3EXT08 DS    XL10                            11\nDS3EXT09 DS    XL10                            12\nDS3EXT10 DS    XL10                            13\nDS3EXT11 DS    XL10                            14\nDS3EXT12 DS    XL10                            15\nDS3EXT13 DS    XL10                            16\n         MEND\n         MACRO\n         #VTCFMT1\n         MNOTE *,'       #VTCFMT1  VERSION 002 09/22/75  03/20/78  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT1                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 1 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 1 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT1                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT1DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT1                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* UPDATE LOG                                                         *\n.*                                                                    *\n.*      DATE    VERSION     CHANGES                                   *\n.*    03/20/78    002       SU60 FIELDS ADDED                         *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 1 DSCB DESCRIPTION                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDS1DSNAM DS    CL44                     DSNAME\nDS1FMTID DS    X                        FORMAT 1 IDENTIFIER\nDS1DSSN  DS    CL6                      DATA SET SERIAL NUMBER\nDS1VOLSQ DS    XL2                      VOLUME SEQUENCE NUMBER\nDS1CREDT DS    XL3                      CREATION DATE\nDS1EXPDT DS    XL3                      EXPIRATION DATE\nDS1NOPEV DS    X                        NUMBER OF EXTENTS\nDS1NODBD DS    X                        NO OF BYTES USED IN LAST DIR BL\n         DS    X                        RESERVED\nDS1SYSCD DS    CL13                     SYSTEM CODE\nDS1REFD  DS    XL3                      LAST DATE REFERENCED - SU 60\n         DS    XL4                      RESERVED\nDS1DSORG DS    XL2                      DATA SET ORGANIZATION\nDS1RECFM DS    X                        RECORD FORMAT\nDS1OPTCD DS    X                        OPTION CODE\nDS1BLKL  DS    XL2                      BLOCKSIZE\nDS1LRECL DS    XL2                      RECORD LENGTH\nDS1KEYL  DS    X                        KEY LENGTH\nDS1RKP   DS    XL2                      RELATIVE KEY POSITION\nDS1DSIND DS    X                        DATA SET INDICATORS\n*              X'80'                      LAST VOLUME FOR DATA SET\n*              X'40'                      RACF DEFINED\n*              X'20'                      BLOCK LEN MULT OF 8\n*              X'10'                      READ/WRITE PASSWORD\n*              X'08'                      RESERVED\n*              X'04'                      MORE PASSWORD INDICATORS\n*              X'02'                      UPDATED - SU 60\n*              X'01'                      RESERVED\nDS1SCALO DS    XL4                      ALLOCATION PARAMETERS\nDS1LSTAR DS    XL3                      LAST BLOCK POINTER\nDS1TRBAL DS    XL2                      LL PORTION OF DS1LSTAR\n         DS    XL2                      RESERVED\nDS1EXT1  DS    XL10                     FIRST EXTENT DESCRIPTION\nDS1EXT2  DS    XL10                     SECOND EXTENT DESCRIPTION\nDS1EXT3  DS    XL10                     THIRD EXTENT DESCRIPTION\nDS1PTRDS DS    XL5                      CCHHTTR OF FORMAT 2 OR 3 DSCB\n         MEND\n         MACRO\n&NAME    #SORT &FIELDS=(1,1,CH,A),&FIRST=,&LAST=,&LENGTH=\n         MNOTE *,'       #SORT     VERSION 001 04/29/76  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #SORT                                                              *\n.*                                                                    *\n.* FUNCTION       GENERATE CODING TO SORT A TABLE IN ASCENDING OR     *\n.*                DESCENDING ORDER BASED ON A KEY FIELD IN EACH       *\n.*                ENTRY.                                              *\n.*                                                                    *\n.* DESCRIPTION    A BUBBLE SORT IS SORT IS PERFORMED.  THE KEYS       *\n.*                OF CONSECUTIVE ITEMS ARE COMPARED.  THE ITEMS       *\n.*                ARE SWITCHED IF NECESSARY.  PROCESSING PROCEEDS     *\n.*                TO THE NEXT PAIR OF ENTRIES.  AT THE END OF ONE     *\n.*                PASS, AT LEAST THE HIGHEST KEY IS IN THE PROPER     *\n.*                POSITION.  THE LIST IS REDUCED TO A SUBLIST         *\n.*                FROM THE FIRST ENTRY TO THE LAST ENTRY WHICH        *\n.*                WAS SWITCHED AND THE SUBLIST IS THEN PROCESSED      *\n.*                AS WAS THE ORIGINAL LIST.  THIS CONTINUES UNTIL     *\n.*                THE ENTIRE LIST HAS BEEN SORTED.  IF AT ANY POINT,  *\n.*                PROCESSING THE LIST RESULTS IN NO ENTRIES BEING     *\n.*                SWITCHED, THE LIST IS IN ORDER AND PROCESSING       *\n.*                IS TERMINATED.                                      *\n.*                                                                    *\n.*                REGISTERS 0, 1, 14, AND 15 ARE USED BY THE          *\n.*                SORT AND MUST NOT BE SPECIFIED AS FIRST OR          *\n.*                LAST VALUES.                                        *\n.*                                                                    *\n.* SYNTAX         NAME     #SORT FIELDS=(KEYPOS,KEYLEN,FMT,ORDER),    *\n.*                               FIRST=SYMBOL1,                       *\n.*                               LAST=SYMBOL2,                        *\n.*                               LENGTH=NUM                           *\n.*                                                                    *\n.*                NAME   - SPECIFIES THE SYMBOLIC TAG TO BE           *\n.*                         ASSIGNED TO THE FIRST INSTRUCTION          *\n.*                         GENERATED.  THIS OPERAND IS OPTIONAL.      *\n.*                                                                    *\n.*                FIELDS - SPECIFIES THE SORT PARAMETERS.             *\n.*                         KEYPOS - SPECIFIES THE RELATIVE KEY        *\n.*                                  POSITION IN THE RECORD.           *\n.*                         KEYLEN - SPECIFIES THE LENGTH OF THE KEY.  *\n.*                         FMT    - SPECIFIES THE FORMAT OF THE       *\n.*                                  DATA TO BE SORTED.  THE ONLY      *\n.*                                  VALID FORMAT IS CHARACTER (CH).   *\n.*                         ORDER  - SPECIFIES IF THE LIST IS TO BE    *\n.*                                  SORTED IN ASCENDING ORDER (A),    *\n.*                                  OR DESCENDING ORDER (D).  THE     *\n.*                                  DEFAULT IS A.                     *\n.*                                                                    *\n.*                FIRST  - SPECIFIES THE SYMBOLIC NAME OF THE FIRST   *\n.*                         ENTRY IN THE TABLE OR A REGISTER WHICH     *\n.*                         CONTAINS THE ADDRESS OF THE FIRST ENTRY.   *\n.*                         IF A SYMBOLIC NAME IS SPECIFIED, IT MUST   *\n.*                         BE ADDRESSABLE.  IF A REGISTER IS          *\n.*                         SPECIFIED, IT MUST BE ENCLOSED IN          *\n.*                         PARENTHESES.  THIS PARAMETER IS REQUIRED.  *\n.*                                                                    *\n.*                LAST   - SPECIFIES THE SYMBOLIC NAME OF THE LAST    *\n.*                         ENTRY IN THE TABLE OR A REGISTER WHICH     *\n.*                         CONTAINS THE ADDRESS OF THE LAST ENTRY.    *\n.*                         IF A SYMBOLIC NAME IS SPECIFIED, IT MUST   *\n.*                         BE ADDRESSABLE.  IF A REGISTER IS          *\n.*                         SPECIFIED, IT MUST BE ENCLOSED IN          *\n.*                         PARENTHESES.  THIS PARAMETER IS REQUIRED.  *\n.*                                                                    *\n.*                LENGTH - SPECIFIES THE LENGTH OF THE ENTRIES IN     *\n.*                         THE TABLE.  THIS PARAMETER IS REQUIRED.    *\n.*                                                                    *\n.*                                                                    *\n.* ERRORS         INVALID NUMBER OF ENTRIES IN FIELDS PARAMETER - 8   *\n.*                FORMAT TYPE NOT SUPPORTED                     - 8   *\n.*                FIRST VALUE NOT SPECIFIED                     - 8   *\n.*                LAST  VALUE NOT SPECIFIED                     - 8   *\n.*                LENGTH VALUE NOT SPECIFIED                    - 8   *\n.*                                                                    *\n.* EXAMPLE        SORT A TABLE OF ENTRIES WHERE THE FIRST 8 BYTES     *\n.*                ARE THE KEYS.  THE LENGTH OF EACH ENTRY IS 50       *\n.*                BYTES.                                              *\n.*                                                                    *\n.*                         #SORT FIELDS=(1,8,CH,A),LENGTH=50,         *\n.*                               FIRST=BEGIN,LAST=END                 *\n.*                                                                    *\n.*                BEGIN    DC    CL8'A',CL42'ENTRY 1'                 *\n.*                         DC    CL8'D',CL42'ENTRY 2'                 *\n.*                         DC    CL8'X',CL42'ENTRY 3'                 *\n.*                         DC    CL8'$',CL42'ENTRY 4'                 *\n.*                         DC    CL8'Q',CL42'ENTRY 5'                 *\n.*                END      DC    CL8'M',CL42'ENTRY 6'                 *\n.*                                                                    *\n.* GLOBALS                                                            *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS USED                                                        *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &X,&Y,&Z,&LEN\n         LCLC  &HI,&I\n.*\n&I       SETC  '#SOR'.'&SYSNDX'(2,3)\n&X       SETA  N'&FIELDS\n         AIF   (&X NE 4).ERR1\n         AIF   ('&FIELDS(3)' NE 'CH').ERR2\n&HI      SETC  'H'\n         AIF   ('&FIELDS(&X)' NE 'D').TESTA\n&HI      SETC  'L'\n         AGO   .SETREGS\n.TESTA   AIF   ('&FIELDS(&X)' EQ 'A').SETREGS\n         MNOTE *,'*** SORT TYPE NOT A OR D - A ASSUMED'\n.SETREGS ANOP\n&LEN     SETA  &LENGTH\n&X       SETA  &FIELDS(1)-1            OFFSET WITHIN RECORD\n&Y       SETA  &FIELDS(2)              LENGTH OF SORT-KEY\n&Z       SETA  &X+&LEN                 OFFSET WITHIN NEXT RECORD\n         AIF   ('&FIRST'  EQ '').ERR3\n         AIF   ('&LAST'   EQ '').ERR4\n         AIF   ('&LENGTH' EQ '').ERR5\n.*\n&NAME    LA    R0,&LENGTH              LOAD LENGTH OF AN ENTRY\n         AIF   ('&LAST'(1,1) EQ '(').RFORM1\n         LA    R1,&LAST                LOAD LAST ENTRY ADDRESS\n         AGO   .CONT1\n.RFORM1  LR    R1,&LAST                LOAD LAST ENTRY ADDRESS\n.CONT1   ANOP\n&I.A     SR    R14,R14                 CLEAR LAST SWITCH ADDRESS\n         AIF   ('&FIRST'(1,1) EQ '(').RFORM2\n         LA    R15,&FIRST              LOAD FIRST ENTRY ADDRESS\n         AGO   .CONT2\n.RFORM2  LR    R15,&FIRST              LOAD FIRST ENTRY ADDRESS\n.CONT2   SR    R1,R0                   POINT TO PENULTIMATE\n         CR    R15,R1                  TEST AGAINST FIRST ENTRY\n         BH    &I.D                    IF HIGH, LIST SORTED\n&I.B     CLC   &X.(&Y,R15),&Z.(R15)    COMPARE KEYS\n         BN&HI &I.C\n         XC    0(&LEN,R15),&LEN.(R15)  SWITCH ENTRIES\n         XC    &LEN.(&LEN,R15),0(R15)\n         XC    0(&LEN,R15),&LEN.(R15)\n         LR    R14,R15                 SAVE ADDRESS OF SWITCHED ENTRY\n&I.C     BXLE  R15,R0,&I.B             POINT TO NEXT ENTRY\n         LTR   R1,R14                  COPY AND TEST LAST SWITCHED ADDR\n         BNZ   &I.A\n&I.D     EQU   *\n         MEXIT\n.ERR1    MNOTE 8,'INVALID NO. OF ENTRIES IN FIELDS PARAMETER'\n         MEXIT\n.ERR2    MNOTE 8,'FORMAT TYPE IS NOT SUPPORTED'\n         MEXIT\n.ERR3    MNOTE 8,'FIRST ENTRY ADDRESS NOT SPECIFIED.'\n         MEXIT\n.ERR4    MNOTE 8,'LAST  ENTRY ADDRESS NOT SPECIFIED.'\n         MEXIT\n.ERR5    MNOTE 8,'LENGTH NOT SPECIFIED.'\n         MEND\n         MACRO\n&NAME    $RTRN &RC=0,&RENT=,&SP=1,&SPM=YES,&REST01=YES\n         MNOTE *,'       $RTRN     VERSION 002 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $RTRN                                                              *\n.*                                                                    *\n.* FUNCTION       GENERATE CODE REQUIRED TO RETURN CONTROL TO THE     *\n.*                CALLING PROGRAM.                                    *\n.*                                                                    *\n.* DESCRIPTION    STANDARD IBM LINKAGE CODE IS GENERATED BY THE MACRO *\n.*                TO RETURN CONTROL TO THE CALLING PROGRAM.  THE USER *\n.*                MAY SPECIFY THE RETURN CODE TO BE RETURNED.         *\n.*                RE-ENTRANT CODE IS SUPPORTED.                       *\n.*                                                                    *\n.*                REGISTERS 0 THROUGH 14 (OR OPTIONALLY, REGISTERS    *\n.*                2 THROUGH 14) WILL BE RESTORED TO THEIR STATUS      *\n.*                UPON ENTRY TO THE ROUTINE.  REGISTER 15 WILL BE     *\n.*                USED FOR A DEFAULT OR USER SPECIFIED RETURN CODE.   *\n.*                AN X'FF' WILL BE PLACED IN THE HIGH ORDER BYTE OF   *\n.*                WORD 4 OF THE OLD SAVE AREA TO INDICATE THAT        *\n.*                CONTROL HAS BEEN RETURNED TO THE CALLING PROGRAM    *\n.*                                                                    *\n.*                CODE IS ALSO GENERATED TO RESTORE THE PROGRAM MASK  *\n.*                TO ITS STATUS UPON ENTRY TO THE ROUTINE.  THE       *\n.*                VALUE OF THE MASK IS OBTAINED FROM THE HIGH ORDER   *\n.*                BYTE OF REGISTER 14.  THE ASSUMPTION IS MADE THAT   *\n.*                STANDARD LINKAGE WAS USED TO INVOKE THE ROUTINE,    *\n.*                THAT IS, THAT ENTRY WAS MADE BY A  BALR  R14,R15.   *\n.*                IF THIS IS NOT TRUE, THE PROGRAM MASK WILL BE       *\n.*                RESTORED INCORRECTLY.  IF SPM=NO IS SPECIFIED, THE  *\n.*                PROGRAM MASK WILL NOT BE ALTERED.                   *\n.*                                                                    *\n.*                IF RE-ENTRANT CODE IS BEING GENERATED, A DROP R2    *\n.*                STATEMENT IS GENERATED, SO THE USER SHOULD NOT USE  *\n.*                REGISTER 2 AS A BASE REGISTER.                      *\n.*                                                                    *\n.* SYNTAX         NAME     $RTRN     RC=NUM1                          *\n.*                                      (R15)                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUM2                          *\n.*                                   SPM=NO                           *\n.*                                   REST01=NO                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                RC     - SPECIFIES THE RETURN CODE TO BE PLACED IN  *\n.*                         REGISTER 15.  A NUMBER MAY BE SPECIFIED,   *\n.*                         OR (R15) INDICATES THAT THE RETURN CODE    *\n.*                         HAS ALREADY BEEN PLACED IN REGISTER 15 BY  *\n.*                         THE USER.  THE DEFAULT RETURN CODE IS 0.   *\n.*                                                                    *\n.*                RENT   - INDICATES THAT THE WORK AREA OBTAINED BY   *\n.*                         $ENTER IS TO BE FREED.  LEN SPECIFIES THE  *\n.*                         LENGTH OF THE AREA.  THE ADDRESS IS        *\n.*                         OBTAINED FROM REGISTER 13.                 *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL OF THE WORK AREA.    *\n.*                         IT MUST AGREE WITH THE SUBPOOL SPECIFIED   *\n.*                         IN $ENTER.  THE DEFAULT IS 1.              *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK     *\n.*                         IS NOT TO BE ALTERED.                      *\n.*                                                                    *\n.*                REST01 - REST01=NO SPECIFIES THAT THE CONTENTS      *\n.*                         OF REGISTERS 0 AND 1 ARE NOT TO BE         *\n.*                         RESTORED.  THIS OPTION SHOULD BE           *\n.*                         SPECIFIED WHEN DATA IS TO BE PASSED        *\n.*                         BACK TO THE CALLING PROGRAM IN             *\n.*                         REGISTERS 0 AND 1.                         *\n.*                                                                    *\n.* ERRORS         NO ERROR MESSAGES ARE GENERATED                     *\n.*                                                                    *\n.* EXAMPLE        EX1      $RTRN                                      *\n.*                                                                    *\n.*                EX2      $RTRN  RC=4                                *\n.*                                                                    *\n.*                EX3      $RTRN  RC=(R15),RENT=DSECTLEN              *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                FREEMAIN                                            *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        002   04/29/76   REST01 KEYWORD ADDED                       *\n.*                                                                    *\n.**********************************************************************\n.*\n         AIF   ('&RENT' EQ '').REGULAR\n&NAME    LR    R1,R13                   LOAD STORAGE ADDRESS\n         BALR  R2,0                     ESTABLISH BASE REG\n         USING *,R2                     DEFINE BASE REGISTER\n         L     R3,4(R13)                SAVE OLD SAVEAREA ADDR\n         LR    R4,R15                   SAVE RETURN CODE\n.FREE    MNOTE *,' FREEMAIN R,LV=&RENT,A=(1),SP=&SP'\n         FREEMAIN R,LV=&RENT,A=(1),SP=&SP FREE STORAGE\n* END FREEMAIN - $RTRN\n         AIF   ('&RC' NE '(R15)').RESSAV\n         LR    R15,R4                   RESTORE RETURN CODE\n.RESSAV  LR    R13,R3                   RESTORE OLD SAVEAREA\n         DROP  R2\n         AGO   .COMMON\n.REGULAR ANOP\n&NAME    L     R13,4(R13)               RESTORE OLD SAVEAREA\n.COMMON  AIF   ('&RC' EQ '(R15)').RES14\n         LA    R15,&RC                  SET RETURN CODE\n.RES14   L     R14,12(R13)              RESTORE RETURN ADDRESS\n         AIF   ('&REST01' EQ 'NO').REST2\n         LM    R0,R12,20(R13)           RESTORE REGS 0 - 12\n         AGO   .SETFLAG\n.REST2   LM    R2,R12,28(R13)           RESTORE REGS 2 - 12\n.SETFLAG MVI   12(R13),X'FF'            SET RETURNED FLAG\n.*-------TEST FOR SPM RESET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         SPM   R14                      RESTORE PROGRAM MASK\n.NOSPM   BR    R14                      RETURN\n         MEND\n         MACRO\n&NAME    $ENTER &BASE=R3,&CSECT=YES,&SAVE=,&RENT=,&SP=1,&SPM=YES,      +\n               &CHAIN=YES\n         MNOTE *,'       $ENTER    VERSION 003 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $ENTER                                                             *\n.*                                                                    *\n.* FUNCTION       PROVIDE ENTRY CODING TO ESTABLISH BASE REGISTERS,   *\n.*                ALLOCATE AND CHAIN SAVE AREAS, SET PROGRAM MASK,    *\n.*                AND OBTAIN WORK AREA FOR RE-ENTRANT PROGRAMS.       *\n.*                                                                    *\n.* DESCRIPTION    THE MACRO WILL GENERATE CODE TO ESTABLISH ONE OR    *\n.*                MORE BASE REGISTERS.  IT IS ASSUMED THAT STANDARD   *\n.*                IBM LINKAGE CONVENTIONS HAVE BEEN FOLLOWED AND THAT *\n.*                REGISTER 15 CONTAINS THE ADDRESS OF THE ENTRY       *\n.*                POINT.  USER SPECIFIED OR DEFAULT BASE REGISTERS    *\n.*                ARE INITIALIZED.  THE FIRST BASE REGISTER CONTAINS  *\n.*                THE ADDRESS OF THE ENTRY POINT, AND SUCCESSIVE BASE *\n.*                REGISTER ADDRESSES ARE INCREMENTED BY 4096.  THE    *\n.*                DEFAULT BASE REGISTER IS REGISTER 3.  IF REGISTER 2 *\n.*                IS SPECIFIED AS A BASE REGISTER, IT WILL BE         *\n.*                ALLOWED, BUT A WARNING MESSAGE WILL BE DISPLAYED.   *\n.*                REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE           *\n.*                SPECIFIED AS BASE REGISTERS.  ALL REGISTER          *\n.*                SPECIFICATIONS MUST BE MADE AS MNEMONICS (EG,       *\n.*                REGISTER 3 IS R3).                                  *\n.*                                                                    *\n.*                IDENTIFICATION CONSTANTS SPECIFYING THE DATE AND    *\n.*                TIME OF ASSEMBLY ARE CONSTRUCTED IN THE ENTRY       *\n.*                CODING.  THESE VALUES ARE DISPLAYED IN DUMPS AND    *\n.*                MAY BE USED TO VERIFY THAT THE PROPER VERSION OF    *\n.*                THE ROUTINE HAS BEEN USED.                          *\n.*                                                                    *\n.*                ALL BITS OF THE PROGRAM MASK ARE SET.  IBM          *\n.*                TRANSFERS CONTROL TO THE USER PROGRAM WITH ALL      *\n.*                PROGRAM MASK BITS OFF.  IF SPM=NO IS SPECIFIED,     *\n.*                THE PROGRAM MASK WILL BE UNALTERED.                 *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THE NAME OF A WORK AREA OF 18  *\n.*                FULLWORDS TO BE USED AS A SAVE AREA.  IF A USER     *\n.*                AREA IS NOT SUPPLIED, AN 18 FULLWORD AREA IS        *\n.*                ALLOCATED AND INITIALIZED TO ZERO.  THE ADDRESS OF  *\n.*                THE SAVE AREA IS LOADED INTO REGISTER 13 AND IT IS  *\n.*                CHAINED TO THE SAVE AREA OF THE CALLING PROGRAM.    *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THAT THE MACRO IS NOT TO       *\n.*                OBTAIN A SAVE AREA OR CHAIN SAVE AREAS BY           *\n.*                SPECIFYING CHAIN=NO.  THE USER IS THEN              *\n.*                RESPONSIBLE FOR SAVE AREA CHAINING.                 *\n.*                                                                    *\n.*                REGISTER EQUIVALENCES (R0  EQU  0, ETC.) ARE        *\n.*                GENERATED FOR THE FIRST USAGE OF THE MACRO.         *\n.*                                                                    *\n.*                A CSECT DEFINITION WILL BE GENERATED UNLESS         *\n.*                CSECT=NO IS SPECIFIED.  IF CSECT=NO IS SPECIFIED,   *\n.*                AN ENTRY STATEMENT WILL BE GENERATED.               *\n.*                                                                    *\n.*                RE-ENTRANT CODING IS SUPPORTED.  FOR RE-ENTRANT     *\n.*                CODING, THE USER MUST SPECIFY THE LENGTH OF A       *\n.*                WORK AREA.  THE WORK AREA IS OBTAINED FROM SUBPOOL  *\n.*                1 UNLESS OTHERWISE SPECIFIED.  THE FIRST 18 WORDS   *\n.*                OF THE WORK AREA ARE USED FOR THE SAVE AREA.        *\n.*                                                                    *\n.* SYNTAX         NAME     $ENTER    BASE=(REG1,...,REGN)             *\n.*                                   CSECT=NO                         *\n.*                                   SAVE=SYM                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUMBER                        *\n.*                                   SPM=NO                           *\n.*                                   CHAIN=NO                         *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                BASE   - THE REGISTERS TO BE USED AS BASE           *\n.*                         REGISTERS.  THE DEFAULT IS R3.  THE FIRST  *\n.*                         REGISTER SPECIFIED WILL CONTAIN THE        *\n.*                         ADDRESS OF THE ENTRY POINT, AND SUCCEEDING *\n.*                         BASE VALUES WILL BE INCREMENTED BY 4096.   *\n.*                         REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE  *\n.*                         SPECIFIED AS BASE REGISTERS.  REGISTERS    *\n.*                         MUST BE SPECIFIED IN MNEMONIC FORM (EG,    *\n.*                         R3 FOR REGISTER 3).                        *\n.*                                                                    *\n.*                CSECT  - CSECT=NO SPECIFIES THAT CODING FOR AN      *\n.*                         ENTRY POINT RATHER THAN A CSECT IS TO BE   *\n.*                         GENERATED.                                 *\n.*                                                                    *\n.*                SAVE   - SPECIFIES THE NAME OF A USER DEFINED 18    *\n.*                         WORD SAVE AREA TO BE USED INSTEAD OF       *\n.*                         GENERATING AN IN-LINE SAVE AREA.  IF RENT  *\n.*                         IS SPECIFIED, SAVE MUST SPECIFY THE NAME   *\n.*                         ASSIGNED TO THE FIRST 18 WORDS IN THE      *\n.*                         WORK AREA.                                 *\n.*                                                                    *\n.*                RENT   - SPECIFIES THAT RE-ENTRANT CODE IS TO BE    *\n.*                         GENERATED.  LEN IS THE LENGTH OF A WORK    *\n.*                         AREA TO BE OBTAINED BY A GETMAIN.          *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL FROM WHICH THE WORK  *\n.*                         AREA FOR RE-ENTRANT CODING IS TO BE        *\n.*                         OBTAINED.  DEFAULT IS SUBPOOL 1.           *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK IS  *\n.*                         NO TO BE ALTERED.                          *\n.*                                                                    *\n.*                CHAIN  - CHAIN=NO SPECIFIES THAT SAVE AREA ARE NOT  *\n.*                         TO BE CHAINED.  THIS OPTION IS INTENDED    *\n.*                         FOR USE ONLY BY HIGH ACTIVITY RE-ENTRANT   *\n.*                         MODULES WHERE THE OVERHEAD OF              *\n.*                         GETMAIN/FREEMAIN IS TO BE AVOIDED.         *\n.*                                                                    *\n.* ERRORS         THE NAME FIELD MUST BE SPECIFIED.  IF IT IS NOT, A  *\n.*                GENERATED NAME, $ENTNNNN WILL BE GENERATED AND A    *\n.*                SEVERITY 8 MNOTE IS GENERATED.  IF NO CODE WERE     *\n.*                GENERATED AND NO BASE REGISTER DEFINED, THE ERROR   *\n.*                LISTING WOULD BE LARGE.  TO REDUCE THE SIZE OF THE  *\n.*                ERROR LISTING AND ALLOW OTHER ERRORS TO BE FOUND,   *\n.*                THE MACRO WILL EXPAND.                              *\n.*                                                                    *\n.*                                                                    *\n.* EXAMPLE        EX1      $ENTER                                     *\n.*                                                                    *\n.*                EX2      $ENTER CSECT=NO                            *\n.*                                                                    *\n.*                EX3      $ENTER BASE=(R3,R4,R5)                     *\n.*                                                                    *\n.*                EX4      $ENTER BASE=R12,RENT=DSECTLEN,SAVE=SAVEAREA*\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NAME     TYPE  USE                                  *\n.*                                                                    *\n.*                &ENCOUNT   A   SET TO 1 AFTER REGISTER EQUIVALENCES *\n.*                               GENERATED TO PREVENT EQUIVALENCES    *\n.*                               FROM BEING GENERATED FOR LATER USES. *\n.*                                                                    *\n.* MACROS USED                                                        *\n.*                                                                    *\n.*                GETMAIN                                             *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        003   04/29/76   CHAIN KEYWORD ADDED                        *\n.*                                                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n         GBLA  &ENCOUNT\n.*\n         LCLA  &PARMNO,&REGNO\n         LCLC  &REG,&CHAR,&LAST,&USING,&TEMP,&ID,&FIRST\n.*\n&ID      SETC  '&NAME'\n         AIF   ('&NAME' NE '').CKCSECT\n&ID      SETC  '$ENT&SYSNDX'\n         MNOTE 8,'NAME OPERAND REQUIRED, NOT SPECIFIED. &ID WILL BE USE+\n               D.'\n.CKCSECT AIF   ('&CSECT' NE 'NO').CSECT\n         AIF   ('&SYSECT' NE '').CKEQU\n         MNOTE 8,'ENTRY POINT SPECIFIED, BUT NO CSECT DEFINED'\n.CSECT   ANOP\n         SPACE\n&ID      CSECT\n.CKEQU   AIF   (&ENCOUNT EQ 1).SKIPEQU\n         SPACE\n***********************************************************************\n*                                                                     *\n*                      REGISTER EQUIVALENCES                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.*\n&ENCOUNT SETA  1\n         SPACE\n.SKIPEQU AIF   ('&CSECT' NE 'NO').CSECT2\n         AIF   ('&SYSECT' EQ '').CSECT2\n.*-------ENTRY POINT\n         ENTRY &ID\n         USING &ID,R15                  DEFINE BASE REGISTER\n&ID      B     14(R15)                  BRANCH AROUND ID\n         DC    AL1(8)                   IDENTIFIER LENGTH\n         DC    CL8'&ID'                 ENTRY POINT NAME\n         DC    CL1' '                   SPACER\n         AGO   .STREGS\n.*-------CSECT\n.CSECT2  USING &ID,R15                  DEFINE BASE REGISTER\n         B     28(0,R15)                BRANCH AROUND ID\n         DC    AL1(23)                  IDENTIFIER LENGTH\n         DC    CL8'&ID'                 CSECT NAME\n         DC    CL1' '                   SPACER\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL1' '                   SPACER\n         DC    CL5'&SYSTIME'            TIME OF ASSEMBLY\n.STREGS  STM   R14,R12,12(R13)          SAVE REGISTERS\n&PARMNO  SETA  1                        INITIALIZE COUNTER\n.CKBASE  ANOP\n&REG     SETC  '&BASE(&PARMNO)'(1,3)\n         AIF   ('&REG'(1,1) NE 'R').SKIPBAS\n&TEMP    SETC  '&REG'(2,2)\n&REGNO   SETA  &TEMP\n         AIF   (&REGNO LT 2).BADBASE\n         AIF   (&REGNO GT 12).BADBASE\n         AIF   (&REGNO NE 2).SETBASE\n         MNOTE 0,'*** WARNING - R2 IS A BASE REGISTER. TRANSLATE AND TE+\n               ST INSTRUCTION WILL DESTROY CONTENTS.'\n.SETBASE ANOP\n         AIF   ('&FIRST' NE '').SETBAS2\n         LR    &REG,R15                 LOAD BASE ADDRESS\n&FIRST   SETC  '&REG'                   SAVE REGISTER\n         AGO   .SETLAST\n.SETBAS2 LA    &REG,4095(&LAST)         ADD 4095 TO LAST BASE\n         LA    &REG,1(&REG)             ADD 1 MORE\n.SETLAST ANOP\n&LAST    SETC  '&REG'\n&USING   SETC  '&USING.,&REG'\n         AGO   .NEXTBAS\n.SKIPBAS MNOTE 8,'*&REG* IS AN INVALID REGISTER FORM, IGNORED'\n         AGO   .NEXTBAS\n.BADBASE MNOTE 8,'*&REG* IS AN INVALID BASE REGISTER, IGNORED'\n.NEXTBAS ANOP\n&PARMNO  SETA  &PARMNO+1\n         AIF   (&PARMNO LE N'&BASE).CKBASE\n         DROP  R15                      DISCONTINUE R15 BASE\n         USING &ID.&USING               DEFINE BASE REGISTERS\n.*-------SEE IF PROGRAM MASK IS TO BE SET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         LA    R15,15                   LOAD PGM MASK SETTING\n         SLA   R15,24                   SHIFT TO BITS 4-7\n         SPM   R15                      SET PGM MASK AND COND\n.NOSPM   AIF   ('&CHAIN' EQ 'NO').DONE\n         AIF   ('&RENT' NE '').GETMAIN\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         AIF   ('&SAVE' NE '').LOADSAV\n         CNOP  0,4                      FULL WORD ALIGNMENT\n         BAL   R13,*+76                 LOAD SAVEAREA ADDR\n         DC    18F'0'                   SAVE AREA\n         AGO   .CHAIN\n.LOADSAV LA    R13,&SAVE                LOAD NEW SAVEAREA ADDR\n         AGO   .CHAIN\n.GETMAIN MNOTE *,' GETMAIN R,LV=&RENT,SP=&SP'\n         GETMAIN R,LV=&RENT,SP=&SP      GET STORAGE\n* END OF GETMAIN - $ENTER\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         LR    R13,R1                   LOAD STORAGE ADDRESS\n         USING &SAVE,R13                DEFINE BASE REGISTER\n         L     R1,24(R15)               RESTORE REG 1 CONTENTS\n.CHAIN   ST    R15,4(R13)               CHAIN SAVE AREAS\n         ST    R13,8(R15)\n.DONE    ANOP\n         MEND\n***********************************************************************\n*                                                                     *\n* INSTALLATION INSTRUCTIONS                                           *\n*                                                                     *\n*     THIS MODULE MAY BE ASSEMBLED AND LINKED INTO A LIBRARY IN THE   *\n*     LINK LIST OR SPECIFIED AS A STEPLIB IN THE EXECUTION JCL.       *\n*                                                                     *\n*     BEFORE ASSEMBLING THE MODULE, INSURE THAT ALL THE REQUIRED      *\n*     MACROS ARE AVAILABLE.  SOME MACROS FROM SYS1.AMODGEN MAY BE     *\n*     REQUIRED.  THE $ENTER MACRO USES SYSTEM VARIABLE SYMBOLS        *\n*     &SYSDATE AND &SYSTIME.  THESE SYMBOLS ARE NOT SUPPORTED BY ALL  *\n*     ASSEMBLERS.  IF THE ASSEMBLER TO BE USED DOES NOT SUPPORT THESE *\n*     SYMBOLS, THE $ENTER MACRO MUST BE MODIFIED.                     *\n*                                                                     *\n***********************************************************************\nSS0127   TITLE 'CATALOG/VTOC COMPARISON PROGRAM'\n***********************************************************************\n*                                                                     *\n* NAME         VOLCHECK                                               *\n*                                                                     *\n* FUNCTION     THIS PROGRAM WILL READ THE VOLUME TABLE OF CONTENTS    *\n*              (VTOC) OF UP TO 99 DIRECT ACCESS VOLUMES TO OBTAIN     *\n*              THE DATA SET NAME OF EACH DATA SET ON THE VOLUME.      *\n*              THE CATALOG ENTRY FOR EACH DATA SET WILL BE READ TO    *\n*              DETERMINE IF THE DATA SET IS CATALOGED, AND IF THE     *\n*              CATALOG INFORMATION IS CORRECT.                        *\n*                                                                     *\n* ENVIRONMENT  OS/VS2                                                 *\n*              OS/MVT                                                 *\n*              BACKGROUND                                             *\n*                                                                     *\n* DESCRIPTION  THE VTOC IS OPENED AS A SEQUENTIAL DATA SET AND READ   *\n*              USING BSAM.  THE PROGRAM MUST SUPPLY THE VTOC DSNAME   *\n*              BY READING AND MODIFYING THE JFCB AND PERFORMING AN    *\n*              OPEN TYPE=J.  EVERY ENTRY WHICH IS NOT A FORMAT 1      *\n*              DSCB IS IGNORED.  THE DSNAME IS OBTAINED FROM THE      *\n*              FORMAT 1 DSCB AND A LOCATE BY NAME IS ISSUED.  IF THE  *\n*              RETURN CODE IS NOT ZERO, THE DATA SET IS NOT CATALOGED *\n*              AND A MESSAGE IS ISSUED.                               *\n*                                                                     *\n*              IF THE RETURN CODE IS ZERO, THE VOLUME LIST RETURNED   *\n*              BY LOCATE IS SEARCHED TO BE SURE THAT THE LIST         *\n*              CONTAINS THE VOLUME SERIAL OF THE VOLUME BEING         *\n*              PROCESSED.  IF NOT, A MESSAGE IS ISSUED.               *\n*                                                                     *\n*              IF BOTH TESTS ARE MET, THE NEXT ENTRY IS PROCESSED.    *\n*              THIS CONTINUES UNTIL THE END OF DATA IS REACHED.       *\n*                                                                     *\n*              VSAM DATA SETS ARE IGNORED.                            *\n*                                                                     *\n* INPUT        THE INPUT CONSISTS OF A VTOC OF A VOLUME (DEFINED BY   *\n*              A DD STATEMENT), AND THE CATALOG (NO DD STATEMENT      *\n*              REQUIRED).                                             *\n*                                                                     *\n* OUTPUT       OUTPUT CONSISTS OF -                                   *\n*                   1.  A PRINTED REPORT LISTING THE DATA SETS ON THE *\n*                       VOLUME WHICH HAVE NO CATALOG ENTRIES, OR FOR  *\n*                       WHICH THE CATALOG ENTRY DOES NOT POINT TO THE *\n*                       VOLUME.                                       *\n*                                                                     *\n*                   2.  A FILE OF IEHPROGM SCRATCH STATEMENTS FOR     *\n*                       EACH UNCATALOGED OR MISCATALOGED DATA SET.    *\n*                                                                     *\n* PARAMETERS   NONE.                                                  *\n*                                                                     *\n* EXECUTION    EXEC         SPECIFIES THE PROGRAM NAME.  NO PARM      *\n*                           INFORMATION IS SPECIFIED.                 *\n*                                                                     *\n*              SYSPRINT DD  DEFINES THE OUTPUT MESSAGE DATA SET.      *\n*                                                                     *\n*              SYSUT2   DD  DEFINES THE OUTPUT IEHPROGM STATEMENTS.   *\n*                                                                     *\n*              VOLUMENN DD  DEFINES THE VOLUMES TO BE PROCESSED.      *\n*                           VOLUME01 FOR THE FIRST VOLUME,            *\n*                           VOLUME02 FOR THE SECOND VOLUME, ETC.      *\n*                                                                     *\n* EXAMPLE      LIST THE UNCATALOGED AND IMPROPERLY CATALOGED DATA     *\n*              SETS ON WK1101 AND WK1102.                             *\n*                                                                     *\n*              //LIST   EXEC  PGM=VOLCHECK                            *\n*              //SYSPRINT DD  SYSOUT=A                                *\n*              //SYSUT2   DD  SYSOUT=B                                *\n*              //VOLUME01 DD  DISP=OLD,UNIT=DISK,VOL=SER=WK1101       *\n*              //VOLUME02 DD  DISP=OLD,UNIT=DISK,VOL=SER=WK1102       *\n*                                                                     *\n* RETURN CODES                                                        *\n*               0 - SUCCESSFUL COMPLETION                             *\n*               4 - NOT USED                                          *\n*               8 - NOT USED                                          *\n*              12 - NOT USED                                          *\n*              16 - UNABLE TO OPEN SYSUT2, NO OUTPUT PRODUCED         *\n*                                                                     *\n* ABEND CODES  USER 0001 - UNABLE TO OPEN SYSPRINT, NO OUTPUT         *\n*                          PRODUCED.                                  *\n*                                                                     *\n* FPL MACROS USED -                                                   *\n*                                                                     *\n*              $ENTER    $RTRN                                        *\n*              #SORT                                                  *\n*              #VTCFMT1  #VTCFMT3  #VTCFMT4                           *\n*                                                                     *\n* IBM MACROS USED -                                                   *\n*                                                                     *\n*              OPEN      CLOSE     DCB       DCBD                     *\n*              READ      CHECK     PUT                                *\n*              RDJFCB    IEFJFCBN                                     *\n*              LOCATE    OBTAIN    CAMLST                             *\n*              GETMAIN   FREEMAIN                                     *\n*              ABEND                                                  *\n*              LINK                                                   *\n*                                                 9/76 GORDON P. WEST *\n***********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n* UPDATE LOG                                                          *\n*                                                                     *\n* 03/07/78  CORRECTED ERROR WHEN OVER 200 UNCATALOGED OR MISCATALOGED *\n*                DATA SETS FOUND                                      *\n*           ADDED 3350 TO DEVICE TABLE                                *\n*           ADDED 3380 TO DEVICE TABLE                                *\n*                                                                     *\n***********************************************************************\n         EJECT\nSS0127   $ENTER BASE=(R12,R11)         ENTRY CODING\n         OPEN  (SYSPRINT,OUTPUT)       OPEN SYSPRINT\n         TM    SYSPRINT+48,X'10'       TEST FOR SUCCESSFUL OPEN\n         BNZ   OPEN1OK\n         ABEND 0001                    OPEN FAILED, ABEND\nOPEN1OK  OPEN  (SYSUT2,OUTPUT)         OPEN SYSUT2\n         TM    SYSUT2+48,X'10'         TEST FOR SUCCESSFUL SYSUT2 OPEN\n         BNZ   OPEN2OK\n         PUT   SYSPRINT,ERROR8\n         MVI   CCODE+3,16              SET CONDITION CODE\n         B     RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        GET STORAGE FOR OUTPUT LINES                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nOPEN2OK  GETMAIN R,LV=26600,SP=1       STORAGE FOR 200 133 CHAR LINES\n         ST    R1,TABLEADR             SAVE TABLE ADDRESS\n         OI    SWITCH,X'02'            INDICATE FREEMAIN REQUIRED\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PUT DATE AND TIME IN HEADER LINE                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         TIME  DEC                     GET DATE AND TIME\n         BAL   R5,DATECON1             CONVERT DATE TO EBCDIC\n         MVC   HDRDATE,PDEC            COPY DATE TO HEADER\n         LR    R1,R0                   PROCESS TIME\n         SRL   R1,8                    GET RID OF LOW ORDER BITS\n         SLL   R1,4\n         ST    R1,PDEC\n         ED    TIME,PDEC               EDIT TIME\n         EJECT\n***********************************************************************\n*                                                                     *\n*        OPEN VTOC AND READ FORMAT 4 DSCB                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nREADJFCB AP    COUNTER,=P'1'           INCREMENT COUNTER\n         CP    COUNTER,=P'99'          TEST FOR MAXIMUM\n         BH    RETURN\n         L     R1,TABLEADR             LOAD TABLE ADDRESS\n         LA    R2,133                  LOAD LENGTH OF AN ENTRY\n         L     R3,=F'26600'            LOAD LENGTH OF TABLE\n         SR    R3,R2                   SUBRACT LENGTH OF ONE ENTRY\n         AR    R3,R1                   ADD TABLE ADDRESS\n         SR    R1,R2                   SUBTRACT LENGTH FROM TABLE ADDR\n         STM   R1,R3,SAVE              SAVE\n         UNPK  SYSUT1+46(2),COUNTER    PUT NUMBER IN DDNAME\n         OI    SYSUT1+47,X'F0'         SET ZONE TO F\n         RDJFCB SYSUT1                 READ SYSUT1 JFCB\n         MVC   JFCBDSNM,VTOCDSNM       SET VTOC DSNAME\n         MVC   VOLSER,JFCBVOLS         SAVE VOLUME SERIAL\n         DEVTYPE SYSUT1+40,DEVCODE     GET DEVICE CODE\n         OPEN  SYSUT1,TYPE=J           OPEN VTOC\n         TM    SYSUT1+48,X'10'         TEST FOR SUCCESSFUL OPEN\n         BZ    RETURN\n         PUT   SYSPRINT,HEADER         PRINT HEADER LINE\n*--------READ FORMAT 4 DSCB\n         READ  DECB4,SF,SYSUT1,FMT1DSCB,'S'      READ FORMAT 4 DSCB\n         CHECK DECB4                   WAIT UNTIL READ COMPLETE\n         MVC   TRKPRCYL,DS4DEVSZ+2     SAVE TRACKS PER CYLINDER\n         SR    R9,R9                   CLEAR TOTAL TRACKS ALLOCATED\n         NI    SWITCH,X'FF'-X'01'      RESET INDICATOR\n         SR    R2,R2                   CLEAR R2\n         IC    R2,DEVCODE+3            LOAD DEVICE CODE\n         SLA   R2,3                    MULTIPLY BY 8\n         LA    R2,DEVTABLE(R2)         LOAD TABLE ADDRESS\n         SR    R15,R15\n         IC    R15,0(R2)               INSERT DEVICE NAME LENGTH\n         LTR   R15,R15                 TEST NAME LENGTH\n         BNZ   BLANKOUT\n         PUT   SYSPRINT,WARN           PRINT WARNING MESSAGE\n         LA    R15,5                   SET LENGTH FOR SYSDA\nBLANKOUT MVC   SCRATCHV(14),=CL14' '   BLANK OUT DEVICE CODE & SERIAL\n         MVC   SCRATCHV(7),1(R2)       MOVE IN DEVICE NAME\n         LA    R1,SCRATCHV(R15)        LOAD ADDRESS FOR SERIAL\n         MVC   1(6,R1),VOLSER          COPY SERIAL TO SCRATCH RECORD\nFINDBLNK LA    R1,1(R1)\n         CLI   0(R1),C' '\n         BNE   FINDBLNK\n         MVI   0(R1),C','\n         EJECT\n***********************************************************************\n*                                                                     *\n*        READ VTOC RECORDS AND COMPARE TO CATALOG                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nREADVTOC READ  RDECB,SF,SYSUT1,FMT1DSCB,'S'      READ A VTOC RECORD\n         CHECK RDECB                   WAIT UNTIL READ COMPLETE\n         CLI   DS1FMTID,C'1'           TEST FOR FORMAT 1 DSCB\n         BNE   READVTOC\n         TM    DS1DSORG+1,X'08'        TEST FOR VSAM DATA SET\n         BNZ   READVTOC\n         MVC   DSNAME,DS1DSNAM         COPY DSNAME FOR LOCATE (LOCATE\n*                                           WILL CHANGE ALIAS NAME TO\n*                                           TRUE NAME).\n         LOCATE LOCLIST                READ CATALOG ENTRY\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   NOTCTLGD\n         LA    R8,CATBLOCK             LOAD CATALOG BLOCK ADDRESS\n         LH    R1,0(R8)                LOAD VOLUME COUNT\n         LA    R8,2(R8)                POINT TO FIRST VOLUME ENTRY\n         C     R1,=F'20'               TEST VOL COUNT AGAINST VS MAX\n         BNH   GETSER\n         LA    R1,20                   SET VOLUME COUNT TO 20\nGETSER   CLC   VOLSER,4(R8)            TEST VOL SER IN CAT TO THIS VOL\n         BE    READVTOC\n         LA    R8,12(R8)               INCREMENT TO NEXT VOLUME ENTRY\n         BCT   R1,GETSER               DECREMENT COUNT AND LOOP\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CATALOG DOES NOT POINT TO THIS VOLUME                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         MVC   DSN2,DS1DSNAM           INCORRECT CAT ENTRY, COPY DSNAME\n         MVC   SER2,VOLSER             COPY VOLUME SERIAL TO MESSAGE\n         LA    R2,ALLOC2               LOAD OUTPUT AREA ADDRESS\n         MVC   0(14,R2),=CL14' '       BLANK OUT OUTPUT AREA\n         BAL   R14,$ALLOC              GET ALLOCATION INFORMATION\n         AR    R9,R6                   ACCUMULATE TRACKS ALLOCATED\n         LA    R2,CRDATE2              LOAD OUTPUT AREA ADDRESS\n         MVC   0(14,R2),=CL14' '       BLANK OUT OUTPUT AREA\n         BAL   R14,$CRDATE             GET CREATION DATE\n         LM    R1,R3,SAVE              LOAD POINTERS\n         BXH   R1,R2,OVERFLOW          INCREMENT POINTERS\n         MVC   0(133,R1),ERROR2        MOVE LINE INTO STORAGE\n         STM   R1,R3,SAVE              SAVE POINTERS\n         OI    SWITCH,X'01'            INDICATE OUTPUT PRODUCED\n         B     READVTOC                GET ANOTHER ENTRY\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DATA SET IS NOT CATALOGED                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nNOTCTLGD MVC   DSN3,DS1DSNAM           NOT CATALOGED, COPY DSNAME\n         LA    R2,ALLOC3               LOAD OUTPUT AREA ADDRESS\n         MVC   0(14,R2),=CL14' '       BLANK OUT OUTPUT AREA\n         BAL   R14,$ALLOC              GET ALLOCATION INFORMATION\n         AR    R9,R6                   ACCUMULATE TRACKS ALLOCATED\n         LA    R2,CRDATE3              LOAD OUTPUT AREA ADDRESS\n         MVC   0(14,R2),=CL14' '       BLANK OUT OUTPUT AREA\n         BAL   R14,$CRDATE             GET CREATION DATE\n         LM    R1,R3,SAVE              LOAD POINTERS\n         BXH   R1,R2,OVERFLOW          INCREMENT POINTER\n         MVC   0(133,R1),ERROR3        MOVE LINE INTO STORAGE\n         STM   R1,R3,SAVE              SAVE POINTERS\n         OI    SWITCH,X'01'            INDICATE OUTPUT PRODUCED\n         B     READVTOC                GET ANOTHER ENTRY\n         EJECT\n***********************************************************************\n*                                                                     *\n*        GET ALLOCATION  (ALLOCATED, USED, AND EXTENTS)               *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R2        - OUTPUT AREA ADDRESS                              *\n*        R3        - RESERVED (DSNAME PDE POINTER)                    *\n*        R4        - NUMBER OF EXTENTS (COUNTER)                      *\n*        R5        - EXECUTE TABLE POINTER                            *\n*        R6        - TRACKS ALLOCATED                                 *\n*        R7        - EXTENT DESCRIPTION POINTER/TRACKS USED           *\n*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$ALLOC   CLC   DS1PTRDS,=XL5'00'       SEE IF FORMAT 3 DSCB IS NEEDED\n         BE    PROCESS\n         OBTAIN OBTAIN                 READ FORMAT 3 DSCB\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    PROCESS\n         MVC   DSN7,DS1DSNAM           MOVE DSNAME INTO MESSAGE\n         PUT   SYSPRINT,ERROR7         DISPLAY ERROR MESSAGE\n         MVI   CCODE+3,16              SET CONDITION CODE\n         B     CLOSEUT1\n*--------GET TRACK ALLOCATION\nPROCESS  SR    R4,R4                   CLEAR REGISTER 4\n         SR    R5,R5                   CLEAR REGISTER 5\n         SR    R6,R6                   CLEAR REGISTER 6\n         SR    R7,R7                   CLEAR REGISTER 7\n         IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS\n         LTR   R4,R4                   TEST NUMBER OF EXTENTS\n         BZ    ALLOCEND\nDSATTRKS EX    R0,DSATADDR(R5)         PROCESS EXTENT BLOCK\n         CLI   0(R7),X'00'\n         BE    DSATUTRK\n         LA    R7,2(R7)                LOAD ADDRESS OF STARTING TRACK\n         MVC   HALF(2),4(R7)           LOAD ENDING CYL NUMBER\n         LH    R1,HALF\n         MVC   HALF(2),0(R7)           LOAD STARTING CYL NUMBER\n         SH    R1,HALF                 SUBTRACT STARTING FROM ENDING\n         MH    R1,TRKPRCYL             MULTIPLY BY TRACKS PER CYL\n         MVC   HALF(2),6(R7)           LOAD ENDING TRACK\n         AH    R1,HALF                 ADD TO TRACK COUNT\n         MVC   HALF(2),2(R7)           LOAD STARTING TRACK\n         SH    R1,HALF                 SUBTRACT FROM TRACK COUNT\n         AR    R6,R1                   ACCUMULATE TOTAL\n         LA    R6,R1(R6)               ADD 1 TRACK\n         LA    R5,4(R5)\n         BCT   R4,DSATTRKS             DECREMENT EXTENT COUNT\nDSATUTRK CVD   R6,PDEC                 CONVERT TRACKS TO DECIMAL\n         MVC   DEC,=X'4020202020202120'      MOVE MASK\n         ED    DEC,PDEC+4              EDIT\n         MVC   0(5,R2),DEC+3           MOVE INTO MESSAGE\n*--------GET TRACKS USED\n         LH    R7,DS1LSTAR             LOAD TRACKS USED\n         CLC   DS1LSTAR,=X'000000'\n         BE    DSATXNTS\n         LA    R7,1(R7)                ADD 1\n         CVD   R7,PDEC                 CONVERT TO DECIMAL\n         MVC   DEC,=X'4020202020202120'  MOVE MASK\n         ED    DEC,PDEC+4              EDIT\n         MVC   6(5,R2),DEC+3           MOVE INTO MESSAGE\n*--------GET NUMBER OF EXTENTS\nDSATXNTS SR    R1,R1\n         IC    R1,DS1NOPEV             LOAD EXTENTS\n         CVD   R1,PDEC                 CONVERT TO DECIMAL\n         MVC   DEC,=X'4020202020202120'  MOVE MASK\n         ED    DEC,PDEC+4              EDIT\n         MVC   12(2,R2),DEC+6          MOVE INTO MESSAGE\nALLOCEND BR    R14                     RETURN\n         EJECT\n*--------DSCB'S\nDSATADDR LA    R7,DS1EXT1\n         LA    R7,DS1EXT2\n         LA    R7,DS1EXT3\n         LA    R7,DS3EXT01\n         LA    R7,DS3EXT02\n         LA    R7,DS3EXT03\n         LA    R7,DS3EXT04\n         LA    R7,DS3EXT05\n         LA    R7,DS3EXT06\n         LA    R7,DS3EXT07\n         LA    R7,DS3EXT08\n         LA    R7,DS3EXT09\n         LA    R7,DS3EXT10\n         LA    R7,DS3EXT11\n         LA    R7,DS3EXT12\n         LA    R7,DS3EXT13\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CREATION DATE                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$CRDATE  L     R1,DS1CREDT-1           LOAD CREATION DATE\n         BAL   R5,DATECONV             CONVERT IT\n         MVC   0(8,R2),PDEC            MOVE DATE INTO MESSAGE\n         BR    R14                     RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DATE CONVERSION ROUTINE                                      *\n*                                                                     *\n*             THIS SECTION WAS ADAPTED FROM AN INSTALLATION           *\n*             DATE CONVERSION ROUTINE TO AVOID HAVING MANY            *\n*             DIFFERENT DATE CONVERSION ROUTINES.  IT IS              *\n*             NECESSARY TO CONVERT THE DATE TO PACKED DECIMAL         *\n*             FORM (AS IS THE DATE RETURNED BY TIME) TO               *\n*             CONFORM TO THIS ROUTINE.                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDATECONV LA    R1,0(R1)                ZERO HIGH BYTE\n         TM    DS1DSORG+1,X'08'        TEST FOR VSAM\n         BO    DATECON1\n         LR    R0,R1                   SAVE DATE 00YYDDDD - BINARY\n         N     R0,=X'0000FFFF'                   0000DDDD - BINARY\n         CVD   R0,PDEC                           0000DDDS - DECIMAL\n         L     R0,PDEC+4                         0000DDDS - DECIMAL\n         N     R1,=X'00FF0000'                   00YY0000 - BINARY\n         SRA   R1,16                             000000YY - BINARY\n         CVD   R1,PDEC                           00000YYS - DECIMAL\n         L     R1,PDEC+4                         00000YYS - DECIMAL\n         SLL   R1,12                             00YYS000 - DECIMAL\n         N     R1,=X'00FF0000'                   00YY0000 - DECIMAL\n         OR    R1,R0                             00YYDDDS - DECIMAL\nDATECON1 ST    R1,WORK                 SAVE DATE\n         LA    R1,PDEC                 SAVE OUTPUT AREA ADDRESS\n         USING OUTPUT,R1               DEFINE OUTPUT AREA BASE REG\n         CP    DATE,=P'0'              TEST FOR ZERO DATE\n         BE    NODATE\n         UNPK  JULIAN,DATE             UNPACK DATE\n         OI    JULDAY+2,X'F0'          SET ZONE\n         MVI   BLANK,C' '              SET BLANK\n         MVC   TARGET,=PL3'0'          00 00 0C\n         MVO   YEAR2,YEAR              00 0Y YC\n         DP    TARGET,=P'4'            0Q QC RC\n         CP    REM,=P'0'               TEST REMAINDER\n         BE    LEAP\n         CP    DAY,=P'59'              TEST FOR BEFORE FEB 29\n         BNH   LEAP\n         AP    DAY,=P'1'               ADJUST TO LEAP YEAR\nLEAP     CP    DAY,=P'1'               TEST MINIMUM DAY\n         BL    BADDAY\n         CP    DAY,=P'366'             TEST MAXIMUM DAY\n         BH    BADDAY\n         LA    R6,CALTABLE             LOAD TABLE ADDRESS\n         USING CALENDAR,R6             SET BASE ADDRESS\n         ZAP   MONTHP,=P'1'            SET MONTH TO 1\nLOOP     CP    DAY,DAYS                SEE IF MORE DAYS THAN THIS MNTH\n         BNH   OUT\n         SP    DAY,DAYS                SUBTRACT DAYS IN THIS MONTH\n         AP    MONTHP,=P'1'            ADD 1 TO MONTH\n         LA    R6,LEN(R6)              INCREMENT TO NEXT MONTH\n         B     LOOP\nOUT      UNPK  MO,MONTHP               UNPACK MONTH\n         OI    MO+1,X'F0'              SET ZONE\n         UNPK  DA,DAY                  UNPACK DAY\n         OI    DA+1,X'F0'              SET ZONE\n         MVI   SLASH1,C'/'             SET SLASH\n         MVI   SLASH2,C'/'             SET SLASH\n         B     DATERTRN\nNODATE   MVC   0(12,R1),=CL12' '       BLANK OUTPUT FIELD\n         B     DATERTRN\nBADDAY   MVC   0(12,R1),=CL12'INVALID DATE'\nDATERTRN BR    R5                      RETURN\n         SPACE\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE - NUMBER OF DAYS IN EACH MONTH (LEAP YEAR)    *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALTABLE DC    PL2'31'                 JANUARY\n         DC    PL2'29'                 FEBRUARY\n         DC    PL2'31'                 MARCH\n         DC    PL2'30'                 APRIL\n         DC    PL2'31'                 MAY\n         DC    PL2'30'                 JUNE\n         DC    PL2'31'                 JULY\n         DC    PL2'31'                 AUGUST\n         DC    PL2'30'                 SEPTEMBER\n         DC    PL2'31'                 OCTOBER\n         DC    PL2'30'                 NOVEMBER\n         DC    PL2'31'                 DECEMBER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FINISHED PROCESSING VTOC AND CATALOG                         *\n*                                                                     *\n*        SORT RECORDS                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nOVERFLOW SR    R1,R2                   REDUCE POINTER ONE ENTRY\n         STM   R1,R3,SAVE              SAVE POINTERS\n         PUT   SYSPRINT,ERROR9         DISPLAY ERROR MESSAGE\n         PUT   SYSPRINT,HEADER         PRINT HEADER\nEOD1     CLOSE SYSUT1                  CLOSE DATA SETS\n         TM    SWITCH,X'01'            SEE IF ANY RECORDS\n         BZ    NONE\n         LM    R1,R3,SAVE              LOAD POINTERS\n         LR    R3,R1                   RESET LIMIT TO LAST ENTRY\n         L     R1,TABLEADR             LOAD TABLE ADDRESS\n         STM   R1,R3,SAVE              SAVE POINTERS\n         LR    R2,R1                   COPY FIRST TO R2\n         #SORT FIELDS=(2,              KEY IN POS 2                    +\n               44,                     KEY IS 44 BYTES LONG            +\n               CH,                     DATA IS CHARACTER FORMAT        +\n               A),                     SORT IN ASCENDING ORDER         +\n               FIRST=(R2),             FIRST ENTRY ADDRESS IN REG 2    +\n               LAST=(R3),              LAST ENTRY ADDRESS IN REG 3     +\n               LENGTH=133              RECORDS ARE 133 BYTES LONG\n         CVD   R9,PDEC                 CONVERT TOTAL TRACKS\n         MVC   DEC,=X'4020202020202120'     SET UP EDIT MASK\n         ED    DEC,PDEC+4              EDIT\n         MVC   TOTAL,DEC+3             COPY INTO MESSAGE\n         LA    R2,0                    INITIALIZE LINE COUNTER\n         LA    R8,1                    INCREMENT\n         LA    R9,50                   LIMIT\n         PUT   SYSPRINT,HEADER1\n         PUT   SYSPRINT,HEADER2\n         LM    R5,R7,SAVE              LOAD POINTERS\n         SR    R5,R6                   SUBTRACT LENGTH OF ONE ENTRY\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PRINT REPORT AND PUNCH SCRATCH STATEMENTS                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nREADLINE BXH   R5,R6,ENDVOL            POINT TO NEXT RECORD\n         BXLE  R2,R8,PRINT             INCREMENT LINE COUNT AND TEST\n         PUT   SYSPRINT,HEADER         PRINT HEADERS\n         PUT   SYSPRINT,HEADER1\n         PUT   SYSPRINT,HEADER2\n         LA    R2,1                    RESET LINE COUNTER\nPRINT    PUT   SYSPRINT,0(R5)          PRINT LINE\n         MVC   SCRATCHD,1(R5)          COPY DSNAME\n         PUT   SYSUT2,SCRATCH1         PUT SCRATCH RECORDS\n         PUT   SYSUT2,SCRATCH2\n         B     READLINE                LOOP\n         EJECT\n***********************************************************************\n*                                                                     *\n*        NO UNCATALOGED OR MISCATALOGED DATA SETS ON VOLUME           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nNONE     PUT   SYSPRINT,OK\n         B     CLOSEUT1\n         EJECT\n***********************************************************************\n*                                                                     *\n*        END OF VOLUME                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDVOL   PUT   SYSPRINT,DONE\nCLOSEUT1 CLOSE SYSUT1                  CLOSE SYSUT1\n         B     READJFCB\n         EJECT\n***********************************************************************\n*                                                                     *\n*        OUTPUT COMPLETE - TERMINATE                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRETURN   CLOSE (SYSPRINT,,SYSUT2)      CLOSE FILES\n         TM    SWITCH,X'02'            SEE IF FREEMAIN REQUIRED\n         BZ    RETURN2\n         L     R1,TABLEADR             LOAD STORAGE ADDRESS\n         FREEMAIN R,LV=26600,SP=1,A=(1)     FREE STORAGE\nRETURN2  L     R15,CCODE               SET RETURN CODE\n         $RTRN RC=(R15)                RETURN TO OS\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DATA                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\n         SPACE\nCCODE    DC    F'0'                    CONDITION CODE\nTABLEADR DS    A                       ADDRESS OF STORAGE AREA\nSAVE     DS    3A                      POINTERS TO ENTRIES IN STORAGE\nCOUNTER  DC    PL2'0'                  VOLUME COUNTER\nHALF     DS    H                       WORK AREA\nTRKPRCYL DS    H                       TRACKS PER CYLINDER\nSWITCH   DC    X'00'                   INDICATORS\n         DS    X                       NOT USED\nPDEC     DS    D                       WORK AREA\nDEC      DS    D                       WORK AREA\nDEVCODE  DS    D                       DEVTYPE INFORMATION\nDEVTABLE DC    X'00',CL7'SYSDA='         UNSUPPORTED\n         DC    X'04',CL7'2311='\n         DC    X'04',CL7'2301='\n         DC    X'04',CL7'2303='\n         DC    X'04',CL7'2302='\n         DC    X'04',CL7'2321='\n         DC    X'06',CL7'2305-1='\n         DC    X'06',CL7'2305-2='\n         DC    X'04',CL7'2314='\n         DC    X'04',CL7'3330='\n         DC    X'00',CL7'SYSDA='\n         DC    X'04',CL7'3350='\n         DC    X'00',CL7'SYSDA='\n         DC    X'06',CL7'3330-1='\n         DC    X'04',CL7'3380='\n         DC    X'00',CL7'SYSDA='\n         SPACE\nWORK     DS    0F                      DATE\n         DS    C                       FILLER\nDATE     DS    0CL3                    JULIAN DATE - PACKED DECIMAL\nYEAR     DS    C                       YEAR - NO SIGN\nDAY      DS    CL2                     DD DS\nMONTHP   DS    PL2                     0M MS\nTARGET   DS    0CL3                    00 0Y YS  -  0Q QS RS\n         DS    C                       0Q         PART OF QUOTIENT\nYEAR2    DS    0PL2                    0Y YS      YEAR AND SIGN\n         DS    C                       QS         QUOTIENT AND SIGN\nREM      DS    C                       RS         REMAINDER AND SIGN\n         SPACE\nDSNAME   DS    CL44\nVTOCDSNM DC    44X'04'                 VTOC DSNAME\nLOCLIST  CAMLST NAME,DSNAME,,CATBLOCK\nOBTAIN   CAMLST SEEK,DS1PTRDS,VOLSER,FMT3DSCB\n         EJECT\nFMT1DSCB DS    0F                      ALIGNMENT\n         #VTCFMT1\n         EJECT\n         ORG   FMT1DSCB\n         #VTCFMT4\n         ORG   FMT1DSCB+148\n         EJECT\nFMT3DSCB DS    0F                      ALIGNMENT\n         #VTCFMT3\n         ORG   FMT3DSCB+148\n         EJECT\nERROR2   DC    CL1' '                  CARRIAGE CONTROL          1    1\nDSN2     DC    CL44' '                 DSNAME                   44   45\n         DC    CL5' '                                            5   50\nALLOC2   DC    CL14' '                 ALLOCATION               14   64\n         DC    CL5' '                                            5   69\nCRDATE2  DC    CL8' '                  CREATION DATE             8   77\n         DC    CL5' '                                            5   82\n         DC    CL21' IS NOT CATALOGED ON '                      21  103\nSER2     DC    CL6' '                  VOLUME SERIAL             6  109\n         DC    CL24' '                 FILLER                   24  133\n         SPACE 2\nERROR3   DC    CL1' '                  CARRIAGE CONTROL          1    1\nDSN3     DC    CL44' '                 DSNAME                   44   45\n         DC    CL5' '                                            5   50\nALLOC3   DC    CL14' '                 ALLOCATION               14   64\n         DC    CL5' '                                            5   69\nCRDATE3  DC    CL8' '                  CREATION DATE             8   77\n         DC    CL5' '                                            5   82\n         DC    CL17' IS NOT CATALOGED'                          17   99\n         DC    CL34' '                 FILLER                   34  133\n         SPACE 2\nERROR7   DC    CL1'-'                                            1    1\n         DC    CL32'ERROR READING FORMAT 3 DSCB FOR '           32   33\nDSN7     DC    CL44' '                                          44   77\n         DC    CL56' '                                          56  133\n         SPACE 2\nERROR8   DC    CL133'-UNABLE TO OPEN SYSUT2 - STEP TERMINATED'\n         SPACE 2\nERROR9   DC    CL133'-LIST INCOMPLETE, TABLE EXCEEDED'\n         SPACE 2\nHEADER   DC    CL1'1'                                                 1\n         DC    CL28'CATALOG/VTOC COMPARISON FOR '                    29\nVOLSER   DC    CL6' '                                                35\n         DC    CL5' '                                                40\nHDRDATE  DC    CL8' '                                                48\n         DC    CL3' '                                                51\nTIME     DC    XL10'402020204B20204B2020'                            61\n         DC    CL72' '                                              133\n         SPACE 2\nHEADER1  DC    CL1'0'                                                 1\n         DC    CL44'-------------------DSNAME-------------------'    45\n         DC    CL5' '                                                50\n         DC    CL14'ALLOC  USED EX'                                  64\n         DC    CL5' '                                                69\n         DC    CL8'CR. DATE'                                         77\n         DC    CL56' '                                              133\n         SPACE 2\nHEADER2  DC    CL133'0'                                             133\n         SPACE 2\nOK       DC    CL133'-NO UNCATALOGED OR MISCATALOGED DATA SETS ON VOLUM+\n               E'\n         SPACE 2\nWARN     DC    CL133'-** WARNING **  DEVICE NAME COULD NOT BE DETERMINE+\n               D.  SYSDA USED.  SCRATCH RECORDS MAY REQUIRED MODIFICATI+\n               ON FOR MVS SYSTEMS.'\n         SPACE 2\nDONE     DC    CL50'0'                                               50\nTOTAL    DC    CL5' '                                                55\n         DC    CL78' '                                              133\n         SPACE 2\nSCRATCH1 DC    CL14'  SCRATCH VOL='                                  14\nSCRATCHV DC    CL57' '                                               71\n         DC    CL9'X'                                                80\n         SPACE 2\nSCRATCH2 DC    CL15' '                                               15\n         DC    CL7'DSNAME='                                          22\nSCRATCHD DC    CL44' '                                               66\n         DC    CL14' '                                               80\n         EJECT\nSYSPRINT DCB   DDNAME=SYSPRINT,        DDNAME IS SYSPRINT              +\n               DSORG=PS,               ORGAINZATION IS SEQUENTIAL      +\n               MACRF=PM,               PUT MOVE                        +\n               RECFM=FBA,              FIXED RECORDS WITH ASA CONTROL  +\n               LRECL=133,              RECORD LENGTH IS 133            +\n               BLKSIZE=133             BLOCKSIZE IS 133\n         EJECT\nSYSUT2   DCB   DDNAME=SYSUT2,          DDNAME IS SYSUT2                +\n               DSORG=PS,               ORGAINZATION IS SEQUENTIAL      +\n               MACRF=PM,               PUT MOVE                        +\n               RECFM=FB,               FIXED, BLOCKED RECORDS          +\n               LRECL=80,               RECORD LENGTH IS 80             +\n               BLKSIZE=80              BLOCKSIZE IS 80\n         EJECT\nSYSUT1   DCB   DDNAME=VOLUMENN,        DDNAME IS VOLUMENN              +\n               DSORG=PS,               ORGANIZATION IS SEQUENTIAL      +\n               MACRF=R,                READ MACRO WILL BE USED         +\n               KEYLEN=44,              44 BYTE KEYS (DSNAME)           +\n               RECFM=F,                RECORD FORMAT IS FIXED          +\n               BLKSIZE=96,             SIZE OF DSCB DATA PORTION       +\n               EODAD=EOD1,             ENE OF DATA ROUTINE ADDRESS     +\n               EXLST=EXLST1            EXIT LIST ADDRESS\n         SPACE 2\nEXLST1   DC    X'87',AL3(JFCBAREA)\n         SPACE 2\nJFCBAREA DS    0F                      AREA FOR JFCB\n         IEFJFCBN\n         EJECT\nCATBLOCK DS    0D                      ALIGNMENT\n         DS    265C                    AREA FOR CATALOG BLOCK\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE DSECT                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALENDAR DSECT\nDAYS     DS    PL2                     DAYS IN MONTH\nLEN      EQU   *-DAYS                  LENGTH OF ENTRY\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        OUTPUT AREA DSECT                                            *\n*                                                                     *\n***********************************************************************\n         SPACE\nOUTPUT   DSECT                         OUTPUT DSECT\nMO       DS    CL2                     MONTH\nSLASH1   DS    C                       SLASH\nDA       DS    CL2                     DAY\nSLASH2   DS    C                       SLASH\nJULIAN   DS    0CL5                    JULIAN DATE - EBCDIC\nYR       DS    CL2                     YEAR\nJULDAY   DS    CL3                     JULIAN DAY\nBLANK    DS    C                       BLANK\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTAMCHK": {"ttr": 19718, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06\\x8f\\x01\\x02\\x06\\x8f#\\x07\\x03-\\x03-\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-09T00:00:00", "modifydate": "2002-03-09T23:07:00", "lines": 813, "newlines": 813, "modlines": 0, "user": "SYZYGY1"}, "text": "*********************************************************************SL\n*                                                                    SL\n*        VTAMCHK IS A PROGRAM RUN IN A PROCEDURE THAT IS STARTED     SL\n*        BY AN 'AUTOMATIC COMMAND' IN PARMLIB(COMMNDXX): S VTAMCHK   SL\n*                                                                    SL\n*        VTAMCHK FIRST CHECKS THAT VTAM IS UP AND RUNNING, THEN      SL\n*        ISSUES ALL THE COMMANDS IN THE FILE DEFINED BY //SYSIN .    SL\n*        THESE COMMANDS ARE INTENDED TO START VTAM APPLIDS.          SL\n*                                                                    SL\n*        THE FOLLOWING OPTIONS ARE AVAILABLE AS PARM='... , ...'     SL\n*          DELAY=XX  TENTH-SECONDS TO WAIT BETWEEN COMMANDS, 10=1SEC SL\n*          COL=XX    COLUMN THAT BEGINS COMMENTS ON COMMANDS         SL\n*        AN EXAMPLE OF THE PROCEDURE FOLLOWS:                        SL\n*                                                                    SL\n*   //VTAMCHK  PROC  MEMBER=VTAMCHKA,DELAY=20                        SL\n*   //* REFER:  SYS1.PROCLIB(VTAMCHK)                                SL\n*   //* COMPID: OPER                                                 SL\n*   //* DOC:    THIS PROCEDURE IS USED TO ACTIVATE VTAM APPLICATIONS SL\n*   //*         AFTER INSURING THAT VTAM IS ACTIVE. IT IS STARTED ON SL\n*   //*         EACH SYSTEM AT IPL BY SYS1.PARMLIB(COMMND00).        SL\n*   //IEFPROC  EXEC  PGM=VTAMCHK,PARM='DELAY=&DELAY',REGION=200K     SL\n*   //SYSIN     DD DSN=SYS3.PARMLIB(&MEMBER),DISP=SHR                SL\n*   //ABNLIGNR  DD DUMMY       *** BYPASS ABEND-AID ***              SL\n*   //SYSUDUMP  DD SYSOUT=A                                          SL\n*                                                                    SL\n*        COMMANDS IN THE SYSIN STREAM ARE ISSUED EXACTLY AS SEEN.    SL\n*        A SEMICOLON (;) FOLLOWING THE COMMAND INDICATES SPECIAL     SL\n*        OPTIONS TO VTAMCHK. TO HAVE A SEMICOLON PASSED AS PART OF   SL\n*        THE COMMAND, CODE TWO CONSECUTIVE SEMICOLONS (;;).          SL\n*        THE FOLLOWING OPTIONS ARE AVAILABLE:                        SL\n*          ;DELAY=XX  TENTH-SECONDS TO WAIT BEFORE NEXT COMMAND      SL\n*          ;COL=XX    COLUMN THAT BEGINS COMMENTS ON FOLLOWING CMDS  SL\n*        AN EXAMPLE OF THE INPUT FOLLOWS:                            SL\n*                                                                    SL\n*   S TSO                                                            SL\n*   S NCCF.NCCF;DELAY=50                                             SL\n*   S CICS,REG=T1;COL=25                                             SL\n*   $SLOGON1                 START THE JES/SNA SESSION               SL\n*                                                                    SL\n*********************************************************************SL\n         EJECT                                                       SL\n         PRINT OFF                                                   SL\n         MACRO\n&NAME    BEGIN &ID,&E=,&R=8,&B=,&S=,&G=,&T=,&C=,&X=0,&BASE=11,&M=,     X\n               &TITLE=\n         GBLB  &VIREGSZ\n         GBLB  &BEGINSW\n         LCLA  &A,&AA\n         LCLA  &L,&L1\n         LCLA  &MA,&MB,&MC\n         LCLA  &MD\n         LCLA  &GETL\n         LCLC  &NAMT\n         LCLC  &BB\n         LCLC  &LBL,&D,&I,&I1,&NAM\n         LCLC  &SS\n         LCLC  &BASEX\n.*  NAME = CSECT NAME\n.*  ID = TITLE\n.*  E = N FOR NO EQUATES\n.*  R = NUMBER OF DBLE WDS FOR REPAREA (DEFAULT = 8)\n.*  B = EXTRA BASE REGS\n.*  S = SAVEAREA NAME\n.*  G = GO TO ADDR AFTER BEGIN ADDR (DEFAULT IS NSI)\n.*  T = RENT IF RENT\n.*  C = NO IS NO CSECT TO BE GENERATED\n.*  X = EXTENDED SAVEAREA LENGTH IN DBL WDS IF RENT\n.*  BASE = BASE REG IF T=RENT.  (DEFAULT = 11)\n.*  M = MULTIPLE ENTRY POINTS\n.*      FORM IS M=(B1,C1,B2,C2,...)\n.*                 BX = ENTRY NAME\n.*                 CX = GO TO NAME\n.*  INNER MACROS = GREG,FREG,GETMAIN\n.*  72.255\n         AIF   ('&S' EQ '').A020\n&SS      SETC  '&S'\n         AGO   .A040\n.A020    ANOP\n&SS      SETC  'WDC'.'&SYSNDX'.'1'\n.A040    ANOP\n         AIF   ('&ID' EQ '').A\n&I       SETC  '&ID'(1,1)\n&I1      SETC  '&ID'\n&L1      SETA  (K'&I1)\n.A       ANOP\n         AIF   ('&I' NE '''').AAAAAAA\n&I1      SETC  '&I1'(2,&L1-2) GET RID OF THE DAMN QUOTES\n.AAAAAAA ANOP\n&LBL     SETC  'WDC'.'&SYSNDX'\n         AIF   ('&NAME' EQ '').NNA\n&NAM     SETC  '&NAME'.'       '\n         AGO   .NNB\n.NNA     ANOP\n&NAM     SETC  '&LBL'\n.NNB     ANOP\n         AIF   (&BEGINSW).NNBX\n&NAMT    SETC  '&NAM'(1,4)\n.NNBX    ANOP\n         AIF   ('&ID' NE '').CCC\n         AIF   ('&NAME' NE '').CB\n&D       SETC  '&LBL'\n         AGO   .CD\n.CB      ANOP\n&D       SETC  '&NAME'\n         AIF   ('&TITLE' EQ 'N').CE\n         AGO   .CD\n.CCC     ANOP\n&NAMT    TITLE '&NAME &I1'\n         AGO   .CE\n.CD      ANOP\n&NAMT    TITLE '&D'\n.CE      AIF   ('&NAME' NE '').CF\n         AIF   ('&C' NE '').CG\n&LBL     CSECT\n         AGO   .CG\n.CF      ANOP\n         AIF   ('&C' EQ '').CF2\n&NAME    DS    0H\n         AGO   .CG\n.CF2     ANOP\n&NAME    CSECT\n.CG      AIF   ('&M' NE '').MENT\n.CGB     BALR  15,0\n         USING *,15\n         B     &LBL.A\n         AIF   ('&ID' NE '').CH\n         DC    AL1(8)\n         DC    CL8'&D'\n         AGO   .CI\n.MENT    ANOP\n&MA      SETA  N'&M\n&MB      SETA  &MA/2*2\n         AIF   (&MA EQ &MB).MENTA\n         MNOTE 8,'BEGIN--ODD NUMBER OF M PARMS'\n.MENTA   ANOP\n         AIF   (&MB EQ 0).CGB\n&MC      SETA  &MC+1\n         ENTRY &M(&MC)\n&MD      SETA  &MC/2+1\n&M(&MC)  LA    0,4*&MD\n         AIF   (&MB EQ 2).CGB\n&MD      SETA  4*&MB-4\n         B     &MD.(15)\n&MB      SETA  &MB-2\n&MC      SETA  &MC+1\n         AGO   .MENTA\n.CH      ANOP\n&L       SETA  K'&I1\n&L       SETA  &L+9\n         DC    AL1(&L)\n         DC    CL9'&NAM'\n         DC    C'&I1'\n.CI      DS    0F\n&LBL.A   STM   14,12,12(13)\n         AIF   ('&T' EQ 'RENT').G3\n         ST    13,&LBL.B+4\n         LR    12,13\n         LR    3,1\n         BAL   13,&LBL.Q\n         DROP  15\n         USING *,13\n&SS      DS    0F\n&LBL.B   DC    9C'SAVEAREA'\n         AGO   .G5\n.G3      ANOP\n         LR    12,13\n         LR    3,1\n&GETL    SETA  &X*8+72\n         GETMAIN R,LV=&GETL\n         ST    13,4(1)\n         LR    13,1\n&BASEX   SETC  '&BASE'\n         AIF   ('&BASEX' EQ '15').G5\n         AIF   ('&BASEX' EQ 'RF').G5\n         AIF   ('&BASEX' EQ 'R15').G5\n         BAL   &BASEX,&LBL.Q\n         DROP  15\n         USING *,&BASEX\n.G5      ANOP\n         AIF   ('&R' EQ '0').NOREPX\n         DC    &R.CL8'REPAREA'\n.NOREPX  ANOP\n&LBL.Q   ST    13,8(12)\n         AIF   (&BEGINSW).CC\n&BEGINSW SETB  1\n         AIF   ('&E' EQ 'N').EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nRA       EQU   10\nR10      EQU   10\nRB       EQU   11\nR11      EQU   11\nRC       EQU   12\nR12      EQU   12\nRD       EQU   13\nR13      EQU   13\nRE       EQU   14\nR14      EQU   14\nRF       EQU   15\nR15      EQU   15\n.EJECT   ANOP\n.CC      ANOP\n         GREG\n         FREG\n         AIF   ('&T' EQ 'RENT').END\n         AIF  ('&B' EQ '').END\n&A       SETA  0\n&BB      SETC  'R13'\n.C       ANOP\n&A       SETA  &A+1\n         LA    &B(&A),4095(&BB)\n         LA    &B(&A),1(&B(&A))\n&BB      SETC  '&B(&A)'\n         GREG  &B(&A)\n&AA      SETA  &AA+4096\n         USING &SS+&AA,&BB\n         AIF   (&A NE N'&B).C\n.END     AIF   ('&G' EQ '').MEND\n         AIF   ('&T' EQ '').A050\n         B     &G\n         AGO   .MEND\n.A050    ANOP\n         BAL   R15,*+8\n         DC    A(&G)\n         L     R15,0(R15)\n         BR    R15\n.MEND    AIF   ('&M' EQ '').EJECTX\n&MA      SETA  0\n&MB      SETA  N'&M\n&MC      SETA  &MB/2*2\n         AIF   (&MC EQ 0).EJECTX\n         CNOP  0,4\n         LR    15,0\n         L     15,*+2(15)\n         BR    15\n.MENTB   ANOP\n         AIF   (&MC EQ 0).EJECTX\n&MA      SETA  &MA+2\n         DC    A(&M(&MA))\n&MC      SETA  &MC-2\n         AGO   .MENTB\n.EJECTX  EJECT\n         MEND\n         MACRO\n&L       ENDIT &C\n         LCLA  &A,&B\n         LCLC  &LBL,&CD\n         AIF   ('&C' EQ '').AAA\n&CD      SETC  '&C'(1,1)\n.AAA     ANOP\n&LBL     SETC  'WFB'.'&SYSNDX'\n         AIF   ('&L' EQ '').A\n&L       EQU   *\n.A       AIF   ('&C' NE '').CC\n         SR    15,15\n.CA      L     13,4(13)\n         L     14,12(13)\n         LM    0,12,20(13)\n         BR    14\n         AIF   (&A LT 1).CAC\n         AIF   (&A EQ 1).CAA\n&LBL     DC    D'0'\n         MEXIT\n.CAA     ANOP\n&C       DC    H'0'\n.CAC     ANOP\n         MEXIT\n.CB      ANOP\n         LA    15,&C\n         AGO   .CA\n.CC      AIF   ('&CD' NE '(').CD\n         AIF   ('&SYSLIST(1)' EQ '(15)').CA\n         AIF   ('&SYSLIST(1)' EQ '(RF)').CA\n         AIF   ('&SYSLIST(1)' EQ '(R15)').CA\n         LR    15,&C(1)\n         AGO   .CA\n.CD      AIF  ('&CD' GT 'Z').CB\n         AIF   (T'&C NE 'U').CE\n.CDD     LH    15,&C\n&A       SETA  1\n         AGO   .CA\n.CE      AIF   (T'&C NE 'J').CF\n         L     13,4(13)\n         LM    14,12,12(13)\n         BR    14\n         MEXIT\n.CF      AIF   (T'&C EQ 'N').CB\n         AIF   (T'&C EQ 'H').CG\n         AIF   (T'&C EQ 'S').CG\n         AIF   (T'&C EQ 'Y').CH\n.CG      LH    15,&C\n         AGO   .CA\n.CH      AIF   (T'&C EQ 'D').CI\n         AIF   (T'&C NE 'W').CJ\n.CI      L     15,&C+4\n         AGO   .CA\n.CJ      AIF   (T'&C EQ 'A' OR T'&C EQ 'V').CK\n         AIF   (T'&C NE 'Q').CL\n.CK      L     15,&C\n         AGO   .CA\n.CL      AIF   (T'&C EQ 'P').CN\n         AIF   (T'&C EQ 'C').CM\n         AIF   (T'&C NE 'Z').CP\n.CM      PACK  &LBL,&C\n         AGO   .CO\n.CN      ZAP   &LBL,&C\n.CO      CVB   15,&LBL\n&A       SETA  2\n         AGO   .CA\n.CP      ANOP\n&A       SETA  L'&C\n&B       SETA  L'&C-4\n         AIF   ('&B' GT '0').CQ\n&B       SETA  0\n.CQ      ANOP\n&A       SETA  &A-&B\n         AIF   ('&L' EQ '').CPP\n&L       EQU   *\n.CPP     AIF   ('&A' GT '3').CR\n         SR    15,15\n.CR      IC    15,&C+&B\n&B       SETA  &B+1\n&A       SETA  &A+1\n         AIF   ('&A' LT '1').CA\n         SLL   15,8\n         AGO   .CR\n         MEND\n         MACRO\n&LABEL   GREG\n         GBLB  &VIREGSZ\n         GBLA  &VIREGSA(256)\n         GBLA  &VIREGS(16)\n         GBLC  &VIREGSE(256)\n         LCLA  &A,&B,&C,&D,&E\n         AIF   (&VIREGSZ).X22\n         AGO   .XXX\n.X22     ANOP\n**********************************************************************\n         DUMPR\n**********************************************************************\n.XXX     ANOP\n         AIF   ('&VIREGSE(1)' EQ 'R0').START\n.FL      ANOP\n&A       SETA  &A+1\n&B       SETA  &A-1\n&VIREGSE(&A) SETC 'R'.'&B'\n&VIREGSA(&A) SETA &A\n         AIF   (&A NE 16).FL\n&VIREGS(1) SETA 1\n&VIREGS(2) SETA 2\n&VIREGS(3) SETA 3\n&VIREGS(4) SETA 4\n&VIREGS(14) SETA 14\n&VIREGS(15) SETA 15\n&VIREGS(16) SETA 16\n&VIREGSE(17) SETC 'RA'\n&VIREGSE(18) SETC 'RB'\n&VIREGSE(19) SETC 'RC'\n&VIREGSE(20) SETC 'RD'\n&VIREGSE(21) SETC 'RE'\n&VIREGSE(22) SETC 'RF'\n&VIREGSA(17) SETA 11\n&VIREGSA(18) SETA 12\n&VIREGSA(19) SETA 13\n&VIREGSA(20) SETA 14\n&VIREGSA(21) SETA 15\n&VIREGSA(22) SETA 16\n&A       SETA  0\n&B       SETA  0\n.START   AIF   ('&LABEL' EQ '').LOOPX\n&LABEL   DS    0H\n.LOOPX   ANOP\n         AIF   (N'&SYSLIST NE 0).LOOP\n.LX      ANOP\n&A       SETA  &A+1\n&VIREGS(&A) SETA &A\n         AIF   (&A NE 16).LX\n         AGO   .END\n.LOOP    ANOP\n&C       SETA  0\n&A       SETA  &A+1\n&D       SETA  N'&SYSLIST(&A)\n         AIF   ('&SYSLIST(&A)' EQ '').END\n         AIF   (T'&SYSLIST(&A) EQ 'N').SELFDEF\n         AIF   ('&SYSLIST(&A)'(1,1) GE '0').SELFDEF\n         AIF   (N'&SYSLIST(&A) GT 1).ALIGN\n.L3      AIF   (&C EQ 16).NOREG\n&C       SETA  &C+1\n         AIF   (&VIREGS(&C) NE 0).L3\n         AGO   .L25\n.ALIGN   AIF   (&C EQ 16).NOREG\n&C       SETA  &C+1\n         AIF   (&VIREGS(&C) NE 0).ALIGN\n&B       SETA  &C/2\n&B       SETA  &B+&B\n         AIF   (&C EQ &B).ALIGN\n.AA      ANOP\n&D       SETA  &D-1\n         AIF   (&D EQ 0).GOTTEM\n&C       SETA  &C+1\n         AIF   (&C GT 16).NOREG\n         AIF   (&VIREGS(&C) NE 0).ALIGN\n         AGO   .AA\n.GOTTEM  ANOP\n&C       SETA  &B+1\n.L25     ANOP\n&D       SETA  1\n.B0      ANOP\n         AIF   ('&SYSLIST(&A,&D)'(1,1) GE '0').BADMID\n         AIF   (T'&SYSLIST(&A,&D) EQ 'N').BADMID\n&B       SETA  0\n.L2      ANOP\n&B       SETA  &B+1\n         AIF   (&B GT 256).NOMORE\n         AIF   ('&SYSLIST(&A,&D)' EQ '&VIREGSE(&B)').WARNA\n         AIF   ('&VIREGSE(&B)' NE '').L2\n&VIREGSE(&B) SETC '&SYSLIST(&A,&D)'\n&VIREGSA(&B) SETA &C\n&VIREGS(&C) SETA &B\n&C       SETA  &C-1\n&SYSLIST(&A,&D) EQU R&C\n&C       SETA  &C+2\n.B4      AIF   (&D EQ N'&SYSLIST(&A)).LOOP\n&D       SETA  &D+1\n         AGO   .B0\n.NOREG   MNOTE 8,'NO REGISTERS AVAILABLE FOR &SYSLIST(&A)'\n         AGO   .LOOP\n.NOMORE  MNOTE 8,'NO VIRTUAL REG AVAILABLE FOR &SYSLIST(&A,&D)'\n         AGO   .B4\n.WARNA   ANOP\n&E       SETA  &VIREGSA(&B)-1\n         AIF   (&VIREGS(&VIREGSA(&B)) EQ &B).BX\n         AIF   (&VIREGS(&VIREGSA(&B)) EQ 0).BY\n&E       SETA  &E+1\n MNOTE 8,'&SYSLIST(&A,&D) R&E IS NOW ASSIGNED TO &VIREGSE(&VIREGS(&E))'\n         AGO   .B4\n.BX      ANOP\n         MNOTE 0,'&SYSLIST(&A,&D) ALREADY ASSIGNED TO R&VIREGSA(&E)'\n         AGO   .B4\n.BY      ANOP\n&VIREGS(&VIREGSA(&B))  SETA &B\n         AGO   .B4\n.SELFDEF ANOP\n&C       SETA  &SYSLIST(&A)\n         AIF   (&C GT 15).NGSLF\n&C       SETA  &C+1\n         AIF   (&VIREGS(&C) EQ 0).OK\n&E       SETA  &VIREGS(&C)\n         MNOTE 8,'REG &SYSLIST(&A) IS ASSIGNED TO &VIREGSE(&E)'\n         AGO   .LOOP\n.OK      ANOP\n&VIREGS(&C) SETA &SYSLIST(&A)+1\n         AGO   .LOOP\n.NGSLF   MNOTE 8,'&SYSLIST(&A) IS AN INVALID REGISTER'\n         AGO   .LOOP\n.BADMID  MNOTE 8,'SELF DEFINING REG NOT PERMITTED IN ALIGNMENT'\n&B       SETA  0\n         AGO   .L2\n.END     MEND\n         MACRO\n&LABEL   FREG\n         GBLB  &VIREGSZ\n         GBLA  &VIREGSA(256),&VIREGS(16)\n         GBLC  &VIREGSE(256)\n         LCLA  &A,&B,&C\n         AIF   (&VIREGSZ).X22\n         AGO   .XXX\n.X22     ANOP\n**********************************************************************\n         DUMPR\n**********************************************************************\n.XXX     ANOP\n         AIF   ('&LABEL' EQ '').NOL\n&LABEL   DS    0H\n.NOL     AIF   ('&VIREGSE(16)' EQ 'R15').STARTX\n         MNOTE 0,'FREG AND SREG  MAY NOT PRECEED GREG, LREG OR PBEG'\n         MEXIT\n.STARTX  AIF   (N'&SYSLIST NE 0).START\n&A       SETA  4\n.SX      ANOP\n&A       SETA  &A+1\n&VIREGS(&A) SETA 0\n         AIF   (&A NE 13).SX\n         AGO   .END\n.START   ANOP\n&A       SETA  0\n.LOOP    ANOP\n&B       SETA  0\n&A       SETA  &A+1\n         AIF   ('&SYSLIST(&A)' EQ '').END\n         AIF   (T'&SYSLIST(&A) NE 'N').FIND\n&B       SETA  &SYSLIST(&A)\n         AIF   (&B LT 16).DD\n         MNOTE 0,'&SYSLIST(&A) IS AN INVALID REGISTER'\n         AGO   .LOOP\n.DD      ANOP\n&B       SETA  &B+1\n         AIF   (&VIREGS(&B) EQ 0).NOU\n&VIREGS(&B) SETA 0\n         AGO   .LOOP\n.NOU     MNOTE 0,'&SYSLIST(&A) IS NOT CURRENTLY USED'\n         AGO   .LOOP\n.FIND    ANOP\n&B       SETA  &B+1\n         AIF   ('&VIREGSE(&B)' EQ '').NOR\n         AIF   ('&VIREGSE(&B)' NE '&SYSLIST(&A)').FIND\n         AIF   (&VIREGS(&VIREGSA(&B)) EQ 0).UNUSED\n         AIF   (&VIREGS(&VIREGSA(&B)) EQ &B).FOK\n&C       SETA  &VIREGSA(&B)-1\n MNOTE '&SYSLIST(&A) = R&C ASSIGNED TO &VIREGSE(&VIREGS(&VIREGSA(&B)))'\n         AGO   .LOOP\n.FOK     ANOP\n&VIREGS(&VIREGSA(&B)) SETA 0\n         AGO   .LOOP\n.NOR     MNOTE 0,'&SYSLIST(&A) NOT ASSIGNED'\n         AGO   .LOOP\n.UNUSED  ANOP\n&B       SETA  &VIREGSA(&B)\n&B       SETA  &B-1\n         MNOTE 0,'&SYSLIST(&A) = R&B IS NOT CURRENTLY USED'\n         AGO   .LOOP\n.END     MEND\n         PRINT ON                                                    SL\nVTAMCHK  BEGIN 'START VTAM APPLS AFTER VTAM INIT VER 1.1 &SYSDATE ',R=0\n         LA    R12,SYSIN          GET DCB ADDRESS FOR ADDRESABILITY\n         USING IHADCB,R12         USE SYMBOLIC REFS FOR DCB\n         MODESET KEY=ZERO         GET PROTECT KEY ZERO FOR SVC 34\n         L     R1,16              POINTER TO CVT\n         L     R1,0(R1)           POINTER TO NEXT/CURRENT TCB\n         L     R1,4(R1)           POINTER TO OUR TCB\n         L     R1,12(R1)          POINTER TO TIOT\n         LA    R1,24(R1)          POINT TO FIRST DD ENTRY\n         SLR   R0,R0              CLEAR ENTRY LENGTH REGISTER\nA00100   DS    0H\n         ALR   R1,R0              POINT TO NEXT DD ENTRY\n         IC    R0,0(R1)           GET LENGTH OF THIS ENTRY\n         LTR   R0,R0              IS THIS END OF TIOT\n         BNP   A00200             YES - SYSIN DD CARD IS NOT PRESENT\n         CLC   DCBDDNAM,4(R1)     IS IT ENTRY FOR SYSIN\n         BNE   A00100             NO - CONTINUE SCAN OF TIOT\n         OPEN  (SYSIN,(INPUT))    OPEN SYSIN FILE\n         TM    DCBOFLGS,DCBOFOPN  WAS OPEN SUCCESSFUL\n         BO    A00140             YES - CONTINUE\n         WTO   'VTAMCHK01I - OPEN FAILED FOR DDNAME SYSIN'\n         MVI   RCODE+1,12         SET RETURN CODE TO TWELVE\n         B     A02000             DO NOT CONTINUE\nA00140   DS    0H\n         TM    FLAG1,BADRECFM     IS RECFM OK\n         BZ    A00160             YES, CONTINUE\n         WTO   'VTAMCHK03I - SYSIN RECFM MUST BE FIXED OR FIXED BLOCK'\n         MVI   RCODE+1,12         SET RETURN CODE TO TWELVE\n         B     A02000             DO NOT CONTINUE\nA00160   DS    0H\n         TM    FLAG1,BADLRECL     IS LRECL OK\n         BZ    A00180             YES, CONTINUE\n         WTO   'VTAMCHK04I - SYSIN LRECL SIZE MUST BE 140 OR LESS'\n         MVI   RCODE+1,12         SET RETURN CODE TO TWELVE\n         B     A02000             DO NOT CONTINUE\nA00180   DS    0H\n         LH    R15,DCBLRECL       GET THE LRECL LENGTH\n         SH    R15,HNINE          SUBTRACT 9 FOR ASSUMED SEQ NUMS\n         STH   R15,CMDCOLS        SET DEFAULT COMMAND COLUMN LENGTH\n         LA    R4,36              36 X ACBWAIT (5 SEC) = 3 MIN TOTAL\nA00184   DS    0H\n         OPEN  VTAMACB            ISSUE OPEN ACB TO SEE IF VTAM ACTIVE\n         LTR   R15,R15            IS OPEN ACB GOOD (VTAM IS ACTIVE)\n         BZ    A00196             YES, GO ISSUE SPECIFIED COMMANDS\n         CH    R15,HEIGHT         IS RETURN CODE GREATER THAN 8\n         BE    A00186             NO, CHECK ACB FOR ERROR CONDITIONS\n         WTO   'VTAMCHK20I - DISASTEROUS OPEN ACB FAILURE'\n         ABEND 100,DUMP\nA00186   DS    0H\n         SHOWCB ACB=VTAMACB,FIELDS=ERROR,AREA=ACBERROR,LENGTH=4,AM=VTAM\n         CLI   ACBERROR+3,92      IS VTAM INACTIVE\n         BE    A00190             YES, GO WAIT THEN TRY AGAIN\n         CLI   ACBERROR+3,90      IS APPLID INACTIVE\n         BE    A00188             YES, GO WAIT THEN TRY AGAIN\n         CLI   ACBERROR+3,20      IS THERE A TEMPORARY STORAGE SHORTAGE\n         BE    A00190             YES, GO WAIT THEN TRY AGAIN\n         CLI   ACBERROR+3,82      IS VTAM STOPPING\n         BE    A00190             YES, GO WAIT THEN TRY AGAIN\n         CLI   ACBERROR+3,88      IS VTAMCHK ACB ALREADY OPEN\n         BE    A00190             YES, GO WAIT THEN TRY AGAIN\n         CLI   ACBERROR+3,188     IS VTAMCHK ACB OPENING/CLOSING\n         BE    A00190             YES, GO WAIT THEN TRY AGAIN\nA00187   DS    0H\n         SLR   R1,R1              CLEAR REGISTER 1 FOR INSERT\n         IC    R1,ACBERROR+3      INSERT FOR CONVERSION\n         CVD   R1,DOUBLE          CONVERT ERROR FIELD TO PACKED DECIMAL\n         UNPK  MSG21ERR,DOUBLE+6(2) UNPACK ERROR FOR MESSAGE\n         OI    MSG21ERR+2,X'F0'   FIX THE SIGN BYTE\n         LA    R1,MSG21           POINT TO MESSAGE\n         WTO   MF=(E,(R1))        ISSUE THE MESSAGE\n         ABEND 200                TERMINATE PROCESSING\nA00188   DS    0H\n         BCT   R5,A00190          CONTINUE IF COUNT ALLOWS\n         B     A00187             DON'T WAIT ANY MORE\nA00190   DS    0H\n         STIMER WAIT,BINTVL=ACBWAIT  WAIT FOR SPECIFIED TIME\n         B     A00184             TRY TO OPEN THE ACB AGAIN\nA00196   DS    0H\n         CLOSE (VTAMACB)          FINISHED WITH VTAM\nA00200   DS    0H\n         L     R1,0(R3)           GET POINTER TO COMMAND LIST\n         LH    R0,0(R1)           GET LENGTH OF COMMAND LIST\n         LTR   R0,R0              ARE THERE ANY MORE COMMANDS IN LIST\n         BNP   A01800             NO - GO CHECK FOR MORE SYSIN CARDS\n         MVI   CMDSTART,C' '      INITIALIZE TO BLANK\n         MVC   CMDAREA,CMDSTART   CLEAR THE COMMAND WORK AREA\n         SLR   R4,R4              CLEAR THE COMMAND LENGTH REGISTER\n         LA    R5,2(R1)           POINT TO START OF COMMAND\nA00300   DS    0H\n         CLI   0(R5),C';'         IS IT SEMICOLON (COMMAND SEPERATOR)\n         BNE   A00400             NO - GO CHECK NEXT CHARACTER\n         LA    R5,1(R5)           POINT PAST THE SEMICOLON\n         BCTR  R0,0               SUBTRACT LENGTH OF SEMICOLON\n         CLI   0(R5),C';'         SECOND SEMICOLON MEANS NON CMD SEP\n         BNE   A00500             IF NOT, GO TERMINATE THIS COMMAND\n         LA    R4,1(R4)           ADD ONE TO LENGTH FOR PREVIOUS SEMI\n         LR    R15,R0             GET TOTAL LENGTH OF STRING\n         SR    R15,R4             SUBTRACT LENGTH SO FAR\n         LTR   R15,R15            IS ANYTHING LEFT TO MOVE\n         BNP   A00500             NO, GO ISSUE THIS COMMAND\n         BCTR  R15,R0             GET LENGTH CODE FOR MOVE\n         EX    R15,MOVESEMI       REMOVE SECOND SEMICOLON\n         B     A00300             CONTINUE SCAN\nA00400   DS    0H\n         LA    R4,1(R4)           ADD ONE TO LENGTH OF THIS COMMAND\n         LA    R5,1(R5)           POINT TO NEXT CHARACTER IN LIST\n         CLR   R0,R4              WAS THAT LAST CHARACTER IN LIST\n         BH    A00300             NO - CONTINUE SCAN FOR SEMICOLON\nA00500   DS    0H\n         SLR   R0,R4              SUBTRACT COMMAND LENGTH FROM TOTAL\n         STH   R0,0(R1)           SAVE NEW TOTAL BACK IN PARM LIST\n         LTR   R4,R4              IS COMMAND LENGTH GREATER THAN ZERO\n         BNP   A00600             NO - DO NOT TRY TO MOVE IT\n         CH    R4,H130            IS LENGTH GREATER THAN MAX\n         BNH   A00550             NO, GO MOVE IT TO CMD ISSUE AREA\n         WTO   'VTAMCHK05I - COMMAND NOT ISSUED, LENGTH >130'\n         MVI   RCODE+1,4          SET RETURN CODE TO 4\n         SLR   R4,R4              SET COMMAND LENGTH TO ZERO\n         B     A00600             GO ISSUE NULL COMMAND\nA00550   DS    0H\n         BCTR  R4,0               DECREMENT TO GET LENGTH CODE\n         EX    R4,MOVECMD         MOVE COMMAND FROM LIST TO WORK AREA\nA00600   DS    0H\n         LA    R4,6(R4)           SET TOTAL LENGTH OF COMMAND\n         STH   R4,CMDLEN          SAVE IN LENGTH WORK AREA\n         LTR   R4,R0              ARE THERE ANY MORE COMMANDS IN LIST\n         BNP   A00700             NO - DO NOT TRY TO MOVE IT\n         BCTR  R4,0               DECREMENT TO GET LENGTH CODE\n         EX    R4,MOVELIST        SHIFT REMAINING COMMAND(S) IN LIST\nA00700   DS    0H\n         CLC   CMDAREA(6),DELAY   IS A COMMAND DELAY TIME SPECIFIED\n         BNE   A01200             NO, GO ISSUE OPERATOR COMMAND\n         SLR   R4,R4              CLEAR LENGTH COUNTER\n         LA    R5,CMDAREA+6       POINT TO START OF DELAY OPERAND\n         LA    R6,4               SET FOR LOOP CNTL - MAX OF 3 DIGITS\nA00800   DS    0H\n         TM    0(R5),X'F0'        IS IT A NUMERIC DIGIT\n         BO    A01000             YES, CONTINUE\n         CLI   0(R5),C' '         ARE WE AT END\n         BE    A01100             YES, GET OUT OF LOOP\nA00900   DS    0H\n         WTO   'VTAMCHK02I - INVALID DELAY OPERAND SPECIFIED'\n         MVI   RCODE+1,8          SET BAD RETURN CODE\n         TM    DCBOFLGS,DCBOFOPN  IS SYSIN FILE OPEN\n         BO    A01900             YES, GO CLOSE IT\n         B     A02000             NO, DO NOT CLOSE IT\nA01000   DS    0H\n         LA    R4,1(R4)           INCREMENT LENGTH COUNTER\n         LA    R5,1(R5)           BUMP OPERAND POINTER\n         BCT   R6,A00800          CONTINUE CHECK FOR 3 DIGITS\n         B     A00900               - THEN INVALID OPERAND\nA01100   DS    0H\n         LTR   R4,R4              IS LENGTH COUNTER ZERO\n         BZ    A00900             YES, OPERAND IS INVALID\n         BCTR  R4,R0              DECREMENT TO GET LENGTH CODE\n         EX    R4,PKDELAY         PACK THE DELAY TIME\n         CVB   R6,DOUBLE          CONVERT DELAY TIME TO BINARY\n         MH    R6,HTEN            CONVERT 10THS TO 100THS OF SECONDS\n         ST    R6,DELAYTM         SAVE DELAY TIME FOR STIMER\n         OI    FLAG1,DELAYSW      INDICATE WE HAVE A DELAY TIME\n         B     A00200             GO CHECK FOR MORE COMMANDS\nA01200   DS    0H\n         CLC   CMDAREA(4),COL     IS A CARD COLUMN FOR CMDS SPECIFIED\n         BNE   A01700             NO, GO ISSUE OPERATOR COMMAND\n         SLR   R4,R4              CLEAR LENGTH COUNTER\n         LA    R5,CMDAREA+4       POINT TO START OF COLUMN OPERAND\n         LA    R6,4               SET FOR LOOP CNTL - MAX OF 3 DIGITS\nA01300   DS    0H\n         TM    0(R5),X'F0'        IS IT A NUMERIC DIGIT\n         BO    A01500             YES, CONTINUE\n         CLI   0(R5),C' '         ARE WE AT END\n         BE    A01600             YES, GET OUT OF LOOP\nA01400   DS    0H\n         WTO   'VTAMCHK02I - INVALID COL OPERAND SPECIFIED'\n         MVI   RCODE+1,8          SET BAD RETURN CODE\n         TM    DCBOFLGS,DCBOFOPN  IS SYSIN FILE OPEN\n         BO    A01900             YES, GO CLOSE IT\n         B     A02000             NO, DO NOT CLOSE IT\nA01500   DS    0H\n         LA    R4,1(R4)           INCREMENT LENGTH COUNTER\n         LA    R5,1(R5)           BUMP OPERAND POINTER\n         BCT   R6,A01300          CONTINUE CHECK FOR 3 DIGITS\n         B     A01400               - THEN INVALID OPERAND\nA01600   DS    0H\n         LTR   R4,R4              IS LENGTH COUNTER ZERO\n         BZ    A01400             YES, OPERAND IS INVALID\n         BCTR  R4,R0              DECREMENT TO GET LENGTH CODE\n         EX    R4,PKCOL           PACK THE COLUMN VALUE\n         CVB   R6,DOUBLE          CONVERT COLUMNS TO BINARY\n         CH    R6,DCBLRECL        IS COL VALUE MORE THAN LRECL LENGTH\n         BH    A01400             YES, DO NOT USE IT\n         STH   R6,CMDCOLS         SAVE COLLUMNS FOR SYSIN PROCESSING\n         B     A00200             GO CHECK FOR MORE COMMANDS\nA01700   DS    0H\n         SLR   R0,R0              CLEAR MCS REGISTER\n         LA    R1,CMDLEN          POINT TO COMMAND\n         SVC   34                 ISSUE OPERATOR COMMAND\n         TM    FLAG1,DELAYSW      IS A DELAY TIME WANTED BETWEEN CMDS\n         BZ    A00200             NO, GO PROCESS THE NEXT COMMAND\n         STIMER WAIT,BINTVL=DELAYTM  WAIT FOR APPROPRIATE INTERVAL\n         B     A00200             GO SEE IF MORE COMMANDS IN LIST\nA01800   DS    0H\n         TM    DCBOFLGS,DCBOFOPN  IS SYSIN FILE OPEN\n         BZ    A02000             NO - WE ARE ALL DONE\n         GET   SYSIN,CARD         READ ANOTHER COMMAND CARD\n         MVC   CARDLEN,CMDCOLS    SET THE CARD LIST LENGTH\n         LA    R3,CARDPTR         POINT TO CARD PARAMETER LIST\n         B     A00200             GO DO IT\nA01900   DS    0H\n         CLOSE (SYSIN)            CLOSE SYSIN FILE\nA02000   DS    0H\n         MODESET KEY=NZERO        GET ORIGINAL PROTECT KEY FOR RETURN\n         ENDIT RCODE\n         EJECT\n* OPEN EXIT TO CHECK SYSIN DCB CHARACTERISTICS\n*\nO00100   DS    0H\n         CLI   DCBRECFM,0         IS RECFM=0\n         BNE   O00200             NO, GO SEE IF IT IS FIXED LENGTH\n         MVI   DCBRECFM,DCBRECF   SET RECFM=F IF NONE SPECIFIED\nO00200   DS    0H\n         TM    DCBRECFM,DCBRECF   IS RECFM=F\n         BO    O00300             YES, CONTINUE\n         OI    FLAG1,BADRECFM     SET FLAG TO NOT PROCESS SYSIN\n         BR    R14                RETURN FROM OPEN EXIT\nO00300   DS    0H\n         CLC   DCBLRECL,HZERO     IS LRECL=0\n         BNE   O00400             NO, GO SEE IF IT IS TOO LARGE\n         MVI   DCBLRECL+1,80      SET DEFAULT LRECL=80\nO00400   DS    0H\n         CLC   DCBLRECL,H140      IS LRECL GREATER THAN MAX\n         BNH   O00500             NO, GO CHECK BLKSIZE\n         OI    FLAG1,BADLRECL     SET FLAG TO NOT PROCESS SYSIN\n         BR    R14                RETURN FROM OPEN EXIT\nO00500   DS    0H\n         CLC   DCBBLKSI,HZERO     IS BLKSIZE=0\n         BNE   O00600             NO, GO RETURN FROM OPEN EXIT\n         MVC   DCBBLKSI,DCBLRECL  SET BLKSIZE=LRECL\nO00600   DS    0H\n         BR    R14                RETURN FROM OPEN EXIT\n         EJECT\n*  E X E C E C U T E D   I N S T R U C T I O N S\n         SPACE\nMOVECMD  MVC   CMDAREA(0),2(R1)   MOVE COMMAND FROM LIST TO WORK AREA\nMOVELIST MVC   2(0,R1),0(R5)      SHIFT COMMAND(S) LEFT IN LIST\nMOVESEMI MVC   0(0,R5),1(R5)      SHIFT STRING TO DELETE SEMICOLON\nPKDELAY  PACK  DOUBLE,CMDAREA+6(0)  PACK DELAY TIME INTO DOUBLE WORD\nPKCOL    PACK  DOUBLE,CMDAREA+4(0)  PACK CMD COLUMNS INTO DOUBLE WORD\n         EJECT\n         PRINT NOGEN\nDOUBLE   DC    D'0'               DOUBLE WORD WORK AREA\nVTAMACB  ACB   AM=VTAM,APPLID=APPLID\nSYSIN    DCB   DSORG=PS,MACRF=GM,DDNAME=SYSIN,EODAD=A01900,            X\n               EXLST=OPENEXIT\nOPENEXIT DC    0F'0',X'85',AL3(O00100)\nACBWAIT  DC    A(100*5)           WAIT TIME FOR OPEN ACB STIMER (5 SEC)\nDELAYTM  DC    F'0'               WAIT TIME FOR COMMAND STIMER\nACBERROR DC    F'0'               SPECIFIC ERROR CODE FOR OPEN ACB FAIL\nCMDLEN   DC    AL2(0,0)           COMMAND LENGTH FOR SVC\nCMDSTART DC    C' '               START OF COMMAND MUST BE BLANK\nCMDAREA  DC    CL131' '           ACTUAL START OF COMMAND\nCMDCOLS  DC    H'71'              DEFAULT LENGTH OF SYSIN CARD LIST\nHZERO    DC    H'0'               HALFWORD OF ZERO\nHEIGHT   DC    H'8'               HALFWORD OF EIGHT\nHNINE    DC    H'9'               HALFWORD OF NINE\nHTEN     DC    H'10'              HALFWORD OF TEN\nH130     DC    H'130'             HALFWORD OF ONE HUNDRED THIRTY\nH140     DC    H'140'             HALFWORD OF ONE HUNDRED FOURTY\nCARDPTR  DC    A(CARDLEN)         POINTER TO SYSIN CARD PARAMETER LIST\nCARDLEN  DC    H'0'               LENGTH OF SYSIN CARD LIST\nCARD     DC    CL140' '           SYSIN CARD WORK AREA\nCOL      DC    C'COL='            COL PARM COMPARATOR\nDELAY    DC    C'DELAY='          DELAY PARM COMPARATOR\nAPPLID   DC    AL1(8),CL8'VTAMCHK' VTAM APPLICATION ID\nFLAG1    DC    X'00'              GENERAL PURPOSE SWITCHES\nDELAYSW  EQU   X'80'              DELAY TIME WANTED BETWEEN COMMANDS\nBADRECFM EQU   X'40'              SYSIN RECFM IS NOT F OR FB\nBADLRECL EQU   X'20'              SYSIN LRECL IS GREATER THAN 140\nMSG21    WTO   'VTAMCHK21I - OPEN ACB FAILURE ERROR CODE: XXX ',MF=L\nMSG21ERR EQU   MSG21+46,3\n         DCBD  DSORG=PS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTAMCHK$": {"ttr": 19977, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06\\x8f\\x01\\x02\\x06\\x8f#\\x06\\x00 \\x00 \\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-09T00:00:00", "modifydate": "2002-03-09T23:06:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "SYZYGY1"}, "text": "//VTAMCHK  JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=SYZYGY1,\n//       MSGCLASS=A,CLASS=A\n//ASMFCL PROC  CLASS=A,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='SYZYGY.PDS.DATA',\n//             LOAD='SYZYGY.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='LOAD,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD.(&MEM),DISP=SHR\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=VTAMCHK\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTAMOPE$": {"ttr": 19979, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06\\x8f\\x01\\x02\\x06\\x8f#\\x15\\x00&\\x00&\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-09T00:00:00", "modifydate": "2002-03-09T23:15:00", "lines": 38, "newlines": 38, "modlines": 0, "user": "SYZYGY1"}, "text": "//C7VTOP  JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=SYZYGY1,\n//       MSGCLASS=A\n//ASMFCL PROC  CLASS=A,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='SYZYGY.PDS.DATA',\n//             LOAD='SYZYGY.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             DIR=1,              NUMBER OF DIRECTORY BLOCKS\n//             ALLOC=TRK,          ALLOC INCREMENT\n//             LR=80,              LRECL\n//             BKI=9440,\n//             FM=FB               RECFM\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='OBJECT,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR,\n//             DCB=(RECFM=&FM.,LRECL=&LR.,BLKSIZE=&BKI.)\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=SYS1.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD.(VTOP),DISP=SHR,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.,&DIR.))\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=VTAMOPER\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTAMOPER": {"ttr": 19981, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06\\x8f\\x01\\x02\\x06\\x8f#\\x15\\x03R\\x03R\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-09T00:00:00", "modifydate": "2002-03-09T23:15:00", "lines": 850, "newlines": 850, "modlines": 0, "user": "SYZYGY1"}, "text": "         TITLE '* * *  POF - VTAM SECONDARY PROGRAM OPERATOR  * * *'\n***********************************************************************\n*                                                                     *\n*  PURPOSE - PROVIDE VTAM SECONDARY PROGRAM OPERATOR FOR USE IN TSO   *\n*            COMMAND.                                                 *\n*                                                                     *\n*  OPERATION - POF OPENS ITS OWN ACB, AND USING TPUT/TGET AND         *\n*              SENDCMD/RCVCMD ALLOWS AN AUTHORIZED TSO USER TO        *\n*              BE A VTAM SECONDARY PROGRAM OPERATOR.  THE COMMANDS    *\n*              AND RESPONSES ARE ALSO RECORDED ON SYSLOG.             *\n*                                                                     *\n*              VTAMOPER REQUIRES THAT THE USER HAVE OPERATOR          *\n*              AUTHORITY TO ISSUE VTAM COMMANDS.                      *\n*                                                                     *\n*     POF - DOUG MOORE, SCHERING-PLOUGH, INC                          *\n*           3030 JACKSON AVE, MEMPHIS, TN 38151                       *\n*           901/320-2883                                              *\n*                                                                     *\n*     POF - HOWARD DEAN, GTE DATA SERVICES, INC.                      *\n*           4750 LINCOLN BLVD. MARINA DEL REY, CA 90291               *\n*           213/821-0511                                              *\n*                                                                     *\n*     THIS VTAM SECONDARY PROGRAM OPERATOR ONLY RUNS UNDER TSO.       *\n*     THE TSO USER IS REQUIRED TO HAVE 'OPER' AUTHORIZATION. IT ALSO  *\n*     NECESSARY TO ADD THE FOLLOWING TO SYS1.VTAMLST(APPLIDS):        *\n*                                                                     *\n*     VTAMOPR1 APPL  PRTCT=OPERATOR,     TSO COMMAND VTAM SPO         *\n*                    AUTH=(ACQ,SPO),                                  *\n*                    EAS=1                                            *\n*     VTAMOPR2 APPL  PRTCT=OPERATOR,     TSO COMMAND VTAM SPO         *\n*                    AUTH=(ACQ,SPO),                                  *\n*                    EAS=1                                            *\n*     VTAMOPR3 APPL  PRTCT=OPERATOR,     TSO COMMAND VTAM SPO         *\n*                    AUTH=(ACQ,SPO),                                  *\n*                    EAS=1                                            *\n*                                                                     *\n*     SUPPORT ADDED FOR -   * = REPEAT LAST COMMAND         *HMD 08/81*\n*                       -   ? = SHOW LAST COMMAND           *HMD 08/81*\n*                       -   X = PCF EXIT                    *HMD 08/81*\n*                                                           *HMD 05/82*\n*     SUPPORT ADDED FOR -   PROGRAM FUNCTION KEYS           *HMD 05/82*\n*                                                           *HMD 05/82*\n*    ALL COMMANDS AND RESPONSES ARE LOGGED TO SYSLOG.                 *\n*    UP TO 3 TSO USERS AT A TIME MAY BE EXECUTING POF.                *\n*                                                                     *\n*  WRITTEN BY DOUG MOORE      - SEPTEMBER 1978                        *\n*  UPDATED BY HOWARD M. DEAN  - AUGUST, 1981                          *\n*  UPDATED BY HOWARD M. DEAN  - MARCH,  1983                *HMD 03/83*\n*                                                                     *\n*     PROGRAM FUNCTION KEY DEFINITIONS:                               *\n*                                                                     *\n*   +----------+----------+----------+                                *\n*   :   HELP   : D BFRUSE :   END    :                                *\n*   +----------+----------+----------+                                *\n*   : D PENDING: D APPLS  : D MAJNODE:                                *\n*   +----------+----------+----------+                                *\n*   : D LINES  : D CLSTRS : D TERMS  :                                *\n*   +----------+----------+----------+                                *\n*   : D E,ID=  : V ACT    : V INACT  :                                *\n*   +----------+----------+----------+                                *\n***********************************************************************\n         EJECT                                              *HMD 11/79*\n         MACRO\n&NAME    $POST &ECB=\n         GBLB  &DONE\n         L     14,&ECB .           ECB TO BE POSTED\n         L     15,$COMP .          COMPLETION BIT AND CODE TO BE\n*                                  COMPARED AND SWAPPED\n         TM    &ECB,X'80' .        WAIT BIT ON\n         BO    $PST&SYSNDX .       ...YES EXECUTE POST MACRO\n         N     14,$WAIT .          COMPARE OPERAND HAS WAIT BIT OFF\n         CS    14,15,&ECB .        COMPARE AND SWAP COMPETION BIT\n*                                  AND CODE\n         BZ    $CMP&SYSNDX .       BRANCH IF CS IS SUCCESSFUL\n$PST&SYSNDX DS    0H .\n         MNOTE '        POST  &ECB                DO THE POST'\n         POST  &ECB\n$CMP&SYSNDX DS    0H\n         AIF   (&DONE).BYPASS\n&DONE    SETB  1\n         B     $POSTEND\n         DS    0F\n$COMP    DC    X'40000000' .       COMPLETION CODE\n$WAIT    DC    X'7FFFFFFF' .       POST CODE\n         DS    0F\n$POSTEND DS    0H\n.BYPASS  ANOP\n         MEND\n         EJECT\nPOF      CSECT\n         SAVE  (14,12),,POF-&SYSDATE-&SYSTIME   SAVE REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         USING POF,R12\n         ST    R12,STMREXTA\n         LR    R2,R13              SAVE PREVIOUS RSA POINTER\n         LA    R13,POFRSA          POINT TO MY RSA\n         ST    R2,4(R13)           CHAIN SAVE AREAS\n         ST    R13,8(R2)           CHAIN SAVE AREAS\n         SPACE 2\n         USING PSA,R0              ADDRESS THE PSA          *HMD 08/81*\n         L     R2,PSAAOLD          GET A(ASCB)\n         USING ASCB,R2\n         ICM   R2,B'1111',ASCBTSB  GET A(TSB)\n*                                  Q. IS THIS TSO (A(TSB) NOT = 0)\n         BZ    POFRTN              ...NO, FORGET IT\n         USING CPPL,R1             ADDRESS THE CPPL         *HMD 08/81*\n         ST    R1,CPPLPTR          SAVE THE ADDR FOR SCAN   *HMD 08/81*\n         TM    CPPLCBUF,X'80'      CALL VIA THE 'CALL' CMD  *HMD 08/81*\n         BO    POFRTN              YES, NOT ALLOWED         *HMD 08/81*\n         MVC   CSPLUPT,CPPLUPT     GET A(UPT)               *HMD 08/81*\n         MVC   CSPLECT,CPPLECT     GET A(ECT)               *HMD 08/81*\n         L     R2,CPPLPSCB         GET A(PSCB)\n         USING PSCB,R2\n         DROP  R1                                           *HMD 08/81*\n         MVC   POFUSRID,PSCBUSER   SAVE USERID\n         TM    PSCBATR1,PSCBCTRL   Q. OPER AUTHORIZED\n         BO    POFAUTH             ...YES, OK TO PROCEED\n         CLC   PSCBUSER(4),=C'IS00'\n         BE    POFAUTH\n         CLC   PSCBUSER(4),=C'OT00'\n         BE    POFAUTH\n         MVC   POFOUT(19),=C'USER NOT AUTHORIZED'\n         TPUT  POFOUT,19\n         B     POFRTN              DONT LET THEM PLAY\n         DROP  R2\n         EJECT\nPOFAUTH  DS    0H\n         OPEN  (POFACB)            OPEN SPO ACB\n         LTR   R15,R15             Q. OPEN OK\n         BZ    POFOPNOK            ...YES, CONTINUE\n         SPACE 1                                            *HMD 08/81*\nPOFOPNF  DS    0H\n         LA    R2,POFACB           POINT TO ACB             *HMD 08/81*\n         USING IFGACB,R2           ADDRESS THE ACB          *HMD 08/81*\n         CLI   ACBOFLGS,X'02'      Q. POSSIBLE ACB OPENED?  *HMD 08/81*\n         BNE   POFOPNF2            ...NO, SOMETHING ELSE    *HMD 08/81*\n         CLI   ACBERFLG,X'58'      Q. POSSIBLE ACB OPENED?  *HMD 08/81*\n         BNE   POFOPNF2            ...NO, SOMETHING ELSE    *HMD 08/81*\n         CLC   =CL8'VTAMOPR3',POFACBAI+1                    *HMD 08/81*\n*                                  IS THIS THE LAST ONE?    *HMD 08/81*\n         BE    POFMAXU             YES..MAX USERS LOGGED ON *HMD 08/81*\n         AP    POFACB#,=PL1'1'     GET NEXT ACB NUMBER      *HMD 08/81*\n         UNPK  POFACBAI+8(1),POFACB#    MOVE IN ACB NO.     *HMD 05/82*\n         OI    POFACBAI+8,X'F0'    FIX SIGN UP              *HMD 05/82*\n         B     POFAUTH             RE-OPEN THE ACB          *HMD 08/81*\nPOFMAXU  DS    0H                  MAX USERS LOGGED ON      *HMD 08/81*\n         MVC   POFOUT(28),=C'MAXIMUM SPO USERS LOGGED ON '  *HMD 08/81*\n         TPUT  POFOUT,28\n         B     POFRTN              RETURN TO CALLER         *HMD 08/81*\n         SPACE\nPOFOPNF2 DS    0H\n         MVC   POFOUT(39),=C'OPEN FAILED FOR VTAM SPO ACB - XXXXXXXX'\n         MVC   POFOUT+31(8),POFACBAI+1  INSERT ACB NAME     *HMD 08/81*\n         TPUT  POFOUT,39                PUT TO TERMINAL     *HMD 08/81*\n         MVC   POFDBLWK+1(1),ACBOFLGS   GET OPEN FLAGS\n         UNPK  POFDBLWK(1),POFDBLWK+1(1)   PREPARE FOR CONVERSION\n         MVC   POFDBLWK+3(1),ACBERFLG   GET ERROR FLAGS\n         UNPK  POFDBLWK+2(1),POFDBLWK+3(1) PREPARE FOR CONVERSION\n         NC    POFDBLWK(4),=X'0F0F0F0F'    PREPARE FOR TRANSLATE\n         TR    POFDBLWK(4),POFTRTBL     TRANSLATE\n         MVC   POFMSG1(4),POFDBLWK    PUT IN MESSAGE\n         TPUT  POFMSG1,L'POFMSG1\n         B     POFRTN                 OPEN FAILED SO GET OUT\n         SPACE\n         DROP  R2\n         EJECT\nPOFOPNOK DS    0H\n         GTSIZE ,                  GET SCREEN SIZE          *HMD 05/82*\n         STC   R0,GTSIZE0          SAVE FOR LATER TEST      *HMD 05/82*\n         STC   R1,GTSIZE1          SAVE FOR LATER TEST      *HMD 05/82*\n         MVC   WTOLTH,=AL2(33)     LENGTH OF MESSAGE        *HMD 08/81*\n         MVC   WTOTXT(7),POFUSRID  PUT USERID IN MESSAGE    *HMD 08/81*\n         MVC   WTOTXT+7(14),=C' LOGGED ON TO '              *HMD 08/81*\n         MVC   WTOTXT+21(8),POFACBAI+1   PUT ACB IN MSG     *HMD 08/81*\n         WTO   MF=(E,WTOLIST)      WRITE LOGON TO SYSLOG\n         SPACE\n         MVC   POFOUT(40),=C'VTAM SPO FUNCTION ACTIVATED FOR XXXXXXXX'\n         MVC   POFOUT+32(8),POFACBAI+1   PUT ACB IN MSG     *HMD 08/81*\n         TPUT  POFOUT,40\n         B     POFRCV1             ...YES, DO FIRST RCVCMD\nPOFRCV1  DS    0H\n         RCVCMD RPL=POFRPLRC       ISSUE FIRST RCVCMD\n         LTR   R15,R15             Q. ACCEPTED\n         BZ    POFRQCMD            ...YES, GO REQUEST COMMANDS\n         BAL   R10,ABEND           ...NO, GIVE UP\n         SPACE 2\nPOFRQCMD DS    0H\n         MVC   POFOUT(18),=C'ENTER VTAM COMMAND'\n         TPUT  POFOUT,18\n         CLI   GTSIZE0,X'00'       IS THIS 3270 INPUT?      *HMD 05/82*\n         BNE   POF3270             ..YES DO 3270 PROCESSING *HMD 05/82*\n         TGET  POFIN,L'POFIN       GET THE COMMAND\n         LTR   R1,R1               Q. ANY INPUT\n         BZ    POFRQCMD            ...NO, GO ASK AGAIN\nPOFRQCHK DS    0H                                           *HMD 05/82*\n         OC    POFIN,=CL80' '      MAKE UPPERCASE FOR WRITING TO SYSLOG\n         SPACE 1                                            *HMD 08/81*\n         CH    R1,=H'1'            Q. LENGTH GT 1           *HMD 05/82*\n         BH    POFRQCH1                                     *HMD 05/82*\n         CLI   POFIN,C'E'          Q. THE END?              *HMD 05/82*\n         BE    POFEOJ              ..YES, GO TO EOJ         *HMD 05/82*\n         SPACE 1                                            *HMD 08/81*\n         CLI   POFIN,C'*'          Q. WANT TO DO SAME THING?*HMD 05/82*\n         BNE   POFCHKQ             ...NO, GO CHECK FOR QMARK*HMD 05/82*\n         L     R1,SAVECMDL         RELOAD LENGTH            *HMD 08/81*\n         MVC   POFIN,SAVECMD       RELOAD COMMAND           *HMD 08/81*\n         B     POFDOCMD            GO DO COMMAND            *HMD 08/81*\n         SPACE 1                                            *HMD 08/81*\nPOFCHKQ  DS    0H                                           *HMD 08/81*\n         CLI   POFIN,C'?'          Q. WANT TO SEE LAST CMD? *HMD 08/81*\n         BNE   POFSTORE            ...NO, GO SAVE THIS CMD  *HMD 08/81*\n         L     R1,SAVECMDL         RELOAD LENGTH            *HMD 08/81*\n         TPUT  SAVECMD,(1)         WRITE LAST COMMAND OUT   *HMD 08/81*\n         B     POFRQCMD            GO SEE WHAT TO DO        *HMD 08/81*\n         SPACE 1                                            *HMD 08/81*\nPOFRQCH1 CLC   =CL3'END',POFIN     Q. THE END\n         BE    POFEOJ              ...YES, GO TO EOJ\n         SPACE 1                                            *HMD 08/81*\nPOFSTORE DS    0H                                           *HMD 08/81*\n         ST    R1,SAVECMDL         SAVE LENGTH              *HMD 08/81*\n         MVC   SAVECMD,POFIN       SAVE COMMAND             *HMD 08/81*\nPOFDOCMD DS    0H                                           *HMD 08/81*\n         CH    R1,=H'1'            Q. LENGTH GT 1?          *HMD 05/82*\n         BH    POFDOCM1            A. YES, CHECK FOR HELP   *HMD 05/82*\n         CLI   POFIN,C'H'          Q. HELP WANTED?          *HMD 05/82*\n         BE    POFHELP             ..YES, GO PUT OUT HELP   *HMD 05/82*\nPOFDOCM1 DS    0H                                           *HMD 05/82*\n         CLC   =CL4'HELP',POFIN    Q. HELP WANTED?          *HMD 05/82*\n         BE    POFHELP             ...YES, GO DO HELP TEXT  *HMD 05/82*\n         CLC   =CL2'X ',POFIN      Q. X FOR PCF?            *HMD 08/81*\n         BE    PCFEXIT             ...YES, GO DO IT         *HMD 08/81*\n         SPACE 1                                            *HMD 08/81*\n* ISSUE THE COMMAND                                         *HMD 08/81*\n         LA    R2,POFRPLSC         POINT TO SENDCMD RPL\n         USING IFGRPL,R2\n         AH    R1,=H'4'            ADD HEADER LENGTH TO COMMAND LENGTH\n         ST    R1,RPLRLEN          STORE LENGTH IN RPL\n         DROP  R2\n         STH   R1,WTOLTH           STORE LENGTH IN WTO\n         MVC   WTOTXT(L'POFIN),POFIN   MOVE COMMAND TO WTO\n         WTO   MF=(E,WTOLIST)      WRITE COMMAND TO LOG\n         SENDCMD RPL=POFRPLSC\n         LTR   R15,R15             Q. SUCCESSFUL\n         BZ    $WAITCMD            ...YES, WAIT FOR CMD TO BE EXECUTED\n         BAL   R10,ABEND           ...NO, GIVE UP\n         EJECT                                              *HMD 08/81*\nPCFEXIT  DS    0H                                           *HMD 08/81*\n         XC    POFCECB,POFCECB     CLEAR ECB                *HMD 08/81*\n         XC    POFCBUF+2(2),POFCBUF+2                       *HMD 08/81*\n         MVC   POFCBUF+4(80),POFIN                          *HMD 08/81*\n         LA    R1,CSPLIST          GET C/S PARM LIST        *HMD 08/81*\n         CALLTSSR EP=IKJSCAN       CALL IKJSCAN ROUTINE     *HMD 08/81*\n         B     POFRQCMD            GET NEXT COMMAND         *HMD 08/81*\n         EJECT                                              *HMD 08/81*\nPOF3270  DS    0H                  POF 3270 PROCESSING      *HMD 05/82*\n         TGET  POFIN,L'POFIN,ASIS  GET THE COMMAND          *HMD 05/82*\n         LTR   R1,R1               Q. ANY INPUT?            *HMD 05/82*\n         BZ    POFRQCMD            ..NO, GO ASK AGAIN       *HMD 05/82*\n         L     R11,=A(AIDTABLE)    POINT TO AID TABLE    V2 *HMD 03/83*\n         LA    R10,NUMAIDS         NUMBER OF AIDS           *HMD 05/82*\nPOFAIDLP DS    0H                                           *HMD 05/82*\n         CLC   POFIN(1),0(R11)     Q. IS THIS THE AID       *HMD 05/82*\n         BE    POFGAID             ..YES, PROCEED           *HMD 05/82*\n         LA    R11,4(,R11)         ..POINT TO NEXT ENTRY    *HMD 05/82*\n         BCT   R10,POFAIDLP        LOOP UNTIL DONE          *HMD 05/82*\n* NO HITS POINTS TO DEFAULT ENTRY                           *HMD 05/82*\n         SPACE 1                                            *HMD 05/82*\nPOFGAID  L     R2,0(,R11)          GET ADDRESS OF AID TABLE *HMD 05/82*\n         CLI   0(R2),X'FF'         Q. ENTER KEY?            *HMD 05/82*\n         BNE   POFNOTEN            ..NO, PROCEED            *HMD 05/82*\n         MVC   WORKCMD,POFIN       SAVE COMMAND TEMPORARILY *HMD 05/82*\n         MVC   POFIN,BLNKLINE      BLANK OUT THE BUFFER     *HMD 05/82*\n         MVC   POFIN(L'POFIN-6),WORKCMD+6                   *HMD 05/82*\n         SH    R1,=H'6'            FIX LENGTH               *HMD 05/82*\n         BNP   POFRQCMD            NO INPUT, GET NEW CMD    *HMD 05/82*\n         B     POFRQCHK            RETURN TO NORMAL FLOW    *HMD 05/82*\nPOFNOTEN DS    0H                                           *HMD 05/82*\n         MVC   WORKCMD,POFIN       SAVE INPUT TEMPORARILY   *HMD 05/82*\n         MVC   POFIN,BLNKLINE                               *HMD 05/82*\n         CLI   0(R2),X'00'         Q. ANY PROCESSING?       *HMD 05/82*\n         BNE   POFAIDP             ..YES, PROCEED           *HMD 05/82*\nPOFNOOPS DS    0H                                           *HMD 05/82*\n         SLR   R3,R3               CLEAR REG FOR EXECUTE    *HMD 05/82*\n         IC    R3,1(,R2)           GET LENGTH FOR EXECUTE   *HMD 05/82*\n         EX    R3,AIDMVC           MOVE IN COMMAND          *HMD 05/82*\n         LA    R1,1(,R3)           PUT REAL LENGTH IN R1    *HMD 05/82*\n         B     POFRQCHK            CONTINUE WITH THE FLOW   *HMD 05/82*\nAIDMVC   MVC   POFIN(0),2(R2)      MOVE COMMAND TO BUFFER   *HMD 05/82*\nBLDMVC   MVC   0(0,R4),WORKCMD+6   BUILD NEW COMMAND        *HMD 05/82*\n         SPACE 1                                            *HMD 05/82*\nPOFAIDP  DS    0H                                           *HMD 05/82*\n         CLI   0(R2),X'01'         Q. FURTHER PROCESSING?   *HMD 05/82*\n         BNE   POFAIDF             ..NO, PROCEED            *HMD 05/82*\n         SH    R1,=H'6'            CORRECT LENGTH           *HMD 05/82*\n         BNP   POFNOOPS            BRANCH IF NO OPERANDS    *HMD 05/82*\n         SLR   R3,R3               CLEAR FOR EXECUTE        *HMD 05/82*\n         IC    R3,1(,R2)           GET LENGTH FOR EXECUTE   *HMD 05/82*\n         EX    R3,AIDMVC           MOVE IN 1ST PART OF CMD  *HMD 05/82*\n         LA    R4,POFIN+1(R3)      POINT TO END OF PIECE    *HMD 05/82*\n         BCTR  R1,0                DECREMENT FOR EXECUTE    *HMD 05/82*\n         EX    R1,BLDMVC           MOVE IN REMAINDER OF CMD *HMD 05/82*\n         LA    R1,2(R1,R3)         ADD NEW PART TO TOTAL    *HMD 05/82*\n         B     POFRQCHK            RETURN TO NORMAL FLOW    *HMD 05/82*\n         SPACE 1                                            *HMD 05/82*\nPOFAIDF  DS    0H                                           *HMD 05/82*\n         L     R11,=A(BADAID)      POINT TO UNSUPPORTED AID *HMD 05/82*\n         B     POFGAID             THROW IN THE TOWEL       *HMD 05/82*\n         EJECT                                              *HMD 05/82*\nPOFHELP  DS    0H\n         L     R11,=A(HELPTXT)     POINT TO TEXT            *HMD 05/82*\n         LA    R10,L'HELP1         LENGTH OF TPUT           *HMD 05/82*\nPOFHLOPA DS    0H                                           *HMD 05/82*\n         CLI   0(R11),X'FF'        END OF TEXT              *HMD 05/82*\n         BE    POFHLOPB            YES, GET OUT             *HMD 05/82*\n         LR    R1,R11              POINT TO TEXT            *HMD 05/82*\n         LR    R0,R10              LENGTH TO PUT            *HMD 05/82*\n         TPUT  (1),(0),R                                    *HMD 05/82*\n         LA    R11,0(R10,R11)      BUMP TO NEXT LINE        *HMD 05/82*\n         B     POFHLOPA            AND CONTINUE             *HMD 05/82*\nPOFHLOPB DS    0H                                           *HMD 05/82*\n         L     R11,=A(PFK1)        POINT TO PFK1            *HMD 05/82*\n         L     R10,=A(PFK13)       POINT TO PFK13           *HMD 05/82*\n         LA    R9,12               12* 2 PFKEYS             *HMD 05/82*\n         SLR   R2,R2               CLEAR REG                *HMD 05/82*\nPOFHLOOP DS    0H                                           *HMD 05/82*\n         MVC   POFOUT,BLNKLINE     CLEAR LINE               *HMD 05/82*\n         MVC   POFOUT(7),=C'PFKXX ='                        *HMD 05/82*\n         MVC   POFOUT+30(7),=C'PFKXX ='                     *HMD 05/82*\n         LA    R8,25               GET PFK NUMBER           *HMD 05/82*\n         SR    R8,R9                                        *HMD 05/82*\n         CVD   R8,POFDBLWK                                  *HMD 05/82*\n         UNPK  POFDBLWK(3),POFDBLWK+6(2)                    *HMD 05/82*\n         MVC   POFOUT+33(2),POFDBLWK+1                      *HMD 05/82*\n         OI    POFOUT+34,X'F0'                              *HMD 05/82*\n         SP    POFDBLWK+6(2),=P'12'                         *HMD 05/82*\n         UNPK  POFDBLWK(3),POFDBLWK+6(2)                    *HMD 05/82*\n         MVC   POFOUT+3(2),POFDBLWK+1                       *HMD 05/82*\n         OI    POFOUT+4,X'F0'                               *HMD 05/82*\n         IC    R2,1(R11)           GET LENGTH OF MSG        *HMD 05/82*\n         EX    R2,HELPMVC1         MOVE TO BUFFER           *HMD 05/82*\n         LA    R11,3(R2,R11)       POINT TO NEXT MESSAGE    *HMD 05/82*\n         IC    R2,1(R10)           GET LENGTH OF MSG        *HMD 05/82*\n         EX    R2,HELPMVC2         MOVE TO BUFFER           *HMD 05/82*\n         LA    R10,3(R2,R10)       POINT TO NEXT MESSAGE    *HMD 05/82*\n         LA    R0,39(0,R2)         GET REAL LENGTH          *HMD 05/82*\n         LA    R1,POFOUT           POINT TO OUTPUT BUFFER   *HMD 05/82*\n         ICM   R1,B'1000',=X'20'   SET TPUT PARMS           *HMD 05/82*\n         TPUT  (1),(0),R           PUT OUT THE MESSAGE      *HMD 05/82*\n         BCT   R9,POFHLOOP         LOOP UNTIL DONE          *HMD 05/82*\n         B     POFRQCMD            RETURN                   *HMD 05/82*\n         SPACE 1                                            *HMD 05/82*\nHELPMVC1 MVC   POFOUT+8(0),2(R11)  MOVE IN MESSAGE          *HMD 05/82*\nHELPMVC2 MVC   POFOUT+38(0),2(R10) MOVE IN MESSAGE          *HMD 05/82*\n         EJECT                                              *HMD 05/82*\n$WAITCMD DS    0H\n         STIMER REAL,STMREXT,DINTVL=DINTVL\n         WAIT  ECB=$WAITECB\n         TTIMER CANCEL,TU\n         XC    $WAITECB,$WAITECB   CLEAR WAIT BIT\n         B     POFRQCMD            ...GO GET ANOTHER COMMAND\n         EJECT\nABEND    DS    0H\n         LA    R1,1                SET DUMP OPTION\n         SLL   R1,31\n         ALR   R1,R15              SET ABEND CODE\n         ABEND (1)\n         EJECT\nPOFEOJ   DS    0H\n         CLOSE (POFACB)            CLOSE THE ACB\n         LTR   R15,R15             Q. CLOSE SUCCESSFUL\n         BZ    POFCLSOK            ...YES, PROCEED\n         MVC   POFOUT(29),=C'CLOSE FAILED FOR VTAM SPO ACB'\n         TPUT  POFOUT,29\n         SPACE 1                                            *HMD 08/81*\nPOFCLSF  DS    0H\n         LA    R2,POFACB           POINT TO ACB\n         USING IFGACB,R2\n         CLI   ACBERFLG,X'4C'      Q. MORE MESSAGES OUTSTNG?*HMD 05/82*\n         BNE   POFCLSF2            ..NO, PRESS ON           *HMD 05/82*\n         MVC   POFOUT(27),=C'OUTSTANDING MESSAGES PURGED'   *HMD 05/82*\n         TPUT  POFOUT,27                                    *HMD 05/82*\n         B     POFEOJ                   TRY CLOSE AGAIN     *HMD 05/82*\n         SPACE 1                                            *HMD 05/82*\nPOFCLSF2 DS    0H                                           *HMD 05/82*\n         MVC   POFDBLWK+1(1),ACBOFLGS   GET OPEN FLAGS\n         UNPK  POFDBLWK(1),POFDBLWK+1(1)   PREPARE FOR CONVERSION\n         MVC   POFDBLWK+3(1),ACBERFLG   GET ERROR FLAGS\n         UNPK  POFDBLWK+2(1),POFDBLWK+3(1) PREPARE FOR CONVERSION\n         NC    POFDBLWK(4),=X'0F0F0F0F'    PREPARE FOR TRANSLATE\n         TR    POFDBLWK(4),POFTRTBL     TRANSLATE\n         MVC   POFMSG1(4),POFDBLWK    PUT IN MESSAGE\n         TPUT  POFMSG1,L'POFMSG1\n         B     POFRTN                 CLOSE FAILED SO GET OUT\n         SPACE 2\nPOFCLSOK DS    0H\n         MVC   WTOLTH,=AL2(34)     LENGTH OF MESSAGE\n         MVC   WTOTXT(7),POFUSRID  PUT USERID IN MESSAGE\n         MVC   WTOTXT+7(15),=C' LOGGED OFF OF '\n         MVC   WTOTXT+22(8),POFACBAI+1   PUT ACB IN MSG     *HMD 08/81*\n         WTO   MF=(E,WTOLIST)      WRITE LOGOFF TO SYSLOG\n         SPACE\nPOFRTN   DS    0H\n         L     R13,4(R13)          RESTORE CALLERS RSA\n         RETURN (14,12),RC=0       RESTORE REGISTERS AND RETURN\n         SPACE\n         DROP  R12\n         EJECT\nPOFRCVEX DS    0H\n         LR    R12,R15             GET NEW BASE\n         USING POFRCVEX,R12\n         LR    R11,R14             SAVE RETURN REG\n         LR    R2,R1               SAVE RPL POINTER\n         USING IFGRPL,R2           ADDRESS RPL\n         LA    R13,POFRCVSA        POINT TO RSA\n         CHECK RPL=POFRPLRC        CHECK RCVCMD RPL\n         LTR   R15,R15             Q. SUCCESSFUL\n         BZ    POFRCVA             ...YES, PROCEED\n         BAL   R10,RCVEABND        ...NO, GIVE UP\n         SPACE 3\nPOFRCVA  DS    0H\n         CLC   =XL2'100D',RPLRTNCD Q. ACB CLOSED?           *HMD 08/81*\n         BE    POFRCVR             ..YES, DO NO MORE        *HMD 08/81*\n         CLC   =XL2'1470',RPLRTNCD Q. ACB CLOSING?       V2 *HMD 03/83*\n         BE    POFRCVR             ..YES, DO NO MORE     V2 *HMD 03/83*\n         TM    POFCMDI+1,X'C0'     Q. POSSIBLE NO DATA?     *HMD 08/81*\n         BC    9,POFRCVB           ..NO, CONTINUE           *HMD 08/81*\n*   BRANCH ONES OR ZEROS                                    *HMD 08/81*\n         TM    POFCMDI+1,X'80'     Q. END OF MULTI-LINE?    *HMD 08/81*\n         BO    POFRCVI             ...YES, NO OUTPUT        *HMD 08/81*\nPOFRCVB  DS    0H                                           *HMD 08/81*\n         ICM   R0,15,RPLRLEN       GET LENGTH OF REPLY\n         BZ    POFRCVI             ZERO LENGTH           V2 *HMD 03/83*\n         STH   R0,WTOLTH           STORE LENGTH FOR WTO\n         SH    R0,=H'4'               LESS HEADER LENGTH\n         BNP   POFRCVI             ZERO OR NEGATIVE      V2 *HMD 03/83*\n         LA    R1,POFIMSG          A(REPLY)                 *HMD 08/81*\n         TPUT  (1),(0),R           PUT OUT THE REPLY\n         SPACE\nPOFRCVN  DS    0H\n         CLC   IST314I,POFIMSG     IS THIS AN END MESSABE\n         BE    POSTIT\n         L     R1,=A(MSGTBL-MSGLEN)                         *HMD 03/83*\n*                                  LOAD MSGTBL ADDRESS-LEN  *HMD 03/83*\nPOFRCVL  DS    0H                  MESSAGE TABLE LOOP       *HMD 03/83*\n         LA    R1,MSGLEN(,R1)      LOAD ADDR OF NEXT MSG    *HMD 03/83*\n         CLI   0(R1),X'FF'         END OF TABLE?            *HMD 03/83*\n         BE    POFRCVN1            YES, NO ERROR MSG     V2 *HMD 03/83*\n         CLC   0(MSGLEN,R1),POFIMSG\n*                                  CHECK FOR ERROR MESSAGE  *HMD 03/83*\n         BNE   POFRCVL             NO, CONTINUE LOOP        *HMD 03/83*\nPOSTIT   DS    0H\n         $POST ECB=$WAITECB\nPOFRCVN1 DS    0H\n         MVC   WTOTXT(L'POFIMSG),POFIMSG  MOVE RESPONSE TO WTO\n         WTO   MF=(E,WTOLIST)      WRITE RESPONSE TO LOG\nPOFRCVI  DS    0H                                           *HMD 08/81*\n         RCVCMD RPL=POFRPLRC       ISSUE ANOTHER RCVCMD\n         LTR   R15,R15             Q. ACCEPTED\n         BZ    POFRCVR             ...YES, RETURN\n         BAL   R10,RCVEABND        ...NO, GIVE UP\nPOFRCVR  DS    0H\n         LR    R14,R11             RESTORE RETURN REG\n         BR    R14                 RETURN\n         SPACE 3\nRCVEABND DS    0H\n         LA    R1,1                SET DUMP OPTION\n         SLL   R1,31\n         ALR   R1,R15              SET ABEND CODE\n         ABEND (1)                 THIS ABEND WILL CAUSE A SVC DUMP\n*                                     ENTITLED 'VTAM IRB ABEND'\n         SPACE\n         DROP  R2,R12\n         SPACE\nPOFRCVSA DS    18F                 RSA FOR RCVCMD EXIT\n         EJECT\nPOFLERAD DS    0H\nPOFSYNAD DS    0H\n         LR    R12,R15             SET UP BASE\n         USING POFLERAD,R12\n         LR    R2,R1               SAVE RPL POINTER\n         USING IFGRPL,R2\n         LR    R11,R14             SAVE RETURN ADDRESS\n         CLC   =XL2'100D',RPLRTNCD   Q. IS ACB CLOSED?      *HMD 08/81*\n         BE    POFNOERR            ...YES, NOT AN ERROR     *HMD 08/81*\n         CLC   =XL2'1470',RPLRTNCD   Q. IS ACB CLOSING?  V2 *HMD 03/83*\n         BE    POFNOERR            ...YES, NOT AN ERROR  V2 *HMD 03/83*\n         CLC   =XL2'146E',RPLRTNCD   Q. IS THIS PSEUDO ERROR\n         BE    POFNOERR            ...YES, NOT REALLY AN ERROR\n         CLC   =XL2'1471',RPLRTNCD   Q. IS THIS PSEUDO ERROR\n         BE    POFNOERR            ...YES, NOT REALLY AN ERROR\n         SPACE\n         MVC   POFOUT(14),=C'UNKNOWN FAILED'\n         TM    RPLREQ,RPLRVCMD     Q. RCVCMD FAILED\n         BNO   POFREQ2             ...NO, TRY SENDCMD\n         MVC   POFOUT(7),=C'RCVCMD '  SHOW RCVCMD        V2 *HMD 03/83*\n         B     POFREQST                                     *HMD 08/81*\nPOFREQ2  DS    0H                                           *HMD 08/81*\n         TM    RPLREQ,RPLSDCMD     Q. SENDCMD FAILED?       *HMD 08/81*\n         BNO   POFREQST            ...NO, THAT'S IT         *HMD 08/81*\n         MVC   POFOUT(7),=C'SENDCMD'  SHOW SENDCMD          *HMD 08/81*\nPOFREQST DS    0H\n         TPUT  POFOUT,14\nPOFLEMSG DS    0H\n         MVC   POFDBLWK+1(1),RPLRTNCD   GET RETURN CODE\n         UNPK  POFDBLWK(1),POFDBLWK+1(1)   PREPARE FOR CONVERSION\n         MVC   POFDBLWK+3(1),RPLFDB2    GET FEEDBACK FIELD\n         UNPK  POFDBLWK+2(1),POFDBLWK+3(1) PREPARE FOR CONVERSION\n         NC    POFDBLWK(4),=X'0F0F0F0F'    PREPARE FOR TRANSLATE\n         TR    POFDBLWK(4),POFTRTBL     TRANSLATE\n         MVC   POFMSG2(4),POFDBLWK    PUT IN MESSAGE\n         TPUT  POFMSG2,L'POFMSG2\n         SPACE\nPOFLERTN DS    0H\n         LA    R15,BIT0            INDICATE SENDCMD/RCVCMD FAILURE\n         LR    R14,R11             RELOAD RETURN REG\n         BR    R14                 RETURN\n         SPACE\nPOFNOERR DS    0H\n         SLR   R15,R15             SET GOOD RETURN CODE\n         LR    R14,R11             RELOAD RETURN REG\n         BR    R14                 RETURN\n         SPACE\n         DROP  R2,R12\n         EJECT\nSTMREXT  DS    0H\n         USING *,R15\n         STM   R13,R6,R13SAVE      SAVE REGISTERS\n         LA    R13,SAVEAREA        NEW SAVE AREA\n         L     R12,STMREXTA        RESTORE BASEREG\n         DROP  R15\n         USING POF,R12\n         $POST ECB=$WAITECB\n         LM    R13,R6,R13SAVE      RESTORE REGISTERS\n         BR    R14                 RETURN FROM EXIT\nSAVEAREA DS    18F\nR13SAVE  DS    10F\nSTMREXTA DS    A(0)                POINTER TO PARM\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\nBIT0     EQU   X'80'\nBIT1     EQU   X'40'\nBIT2     EQU   X'20'\nBIT3     EQU   X'10'\nBIT4     EQU   X'08'\nBIT5     EQU   X'04'\nBIT6     EQU   X'02'\nBIT7     EQU   X'01'\n         EJECT\nPOFRSA   DS    18D                 REGISTER SAVE AREA\nPOFDBLWK DS    D                   DOUBLE WORD WORK AREA\n         SPACE 1                                            *HMD 08/81*\nCPPLPTR  DC    A(0)                POINTER TO CPPL          *HMD 08/81*\n         SPACE 1                                            *HMD 08/81*\nCSPLIST  EQU   *                   LIST OF CPPL ADDRESSES   *HMD 08/81*\nCSPLUPT  DC    A(0)                POINTER TO UPT           *HMD 08/81*\nCSPLECT  DC    A(0)                POINTER TO ECT           *HMD 08/81*\nCSPLECB  DC    A(POFCECB)          POINTER TO C/S ECB       *HMD 08/81*\nCSPLFLG  DC    A(POFCFLG)          POINTER TO C/S FLAGS     *HMD 08/81*\nCLPLOA   DC    A(POFCOA)           POINTER TO C/S OUT AREA  *HMD 08/81*\nCSPLCBUF DC    A(POFCBUF)          POINTER TO C/S CBUF      *HMD 08/81*\n         SPACE 1                                            *HMD 08/81*\nPOFCECB  DC    A(0)                ECB                      *HMD 08/81*\nPOFCFLG  DC    X'80',AL3(0)        FLAGS                    *HMD 08/81*\nPOFCOA   DC    XL8'00'             OUTPUT AREA              *HMD 08/81*\nPOFCBUF  EQU   *                                            *HMD 08/81*\n         DC    H'84'               LENGTH OF BUFFER         *HMD 08/81*\n         DC    H'0'                OFFSET                   *HMD 08/81*\n         DC    CL80' '             ACTUAL BUFFER            *HMD 08/81*\n         SPACE 1                                            *HMD 08/81*\nPOFTRTBL DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'          *HMD 08/81*\n         SPACE 1\nPOFOUT   DS    CL80                TPUT BUFFER\n         SPACE 1\nPOFCMDI  EQU   *                   COMMAND INPUT BUFFER (FROM VTAM)\n         DS    CL4                 COMMAND HEADER\nPOFIMSG  DS    CL126               MESSAGE                  *HMD 08/81*\nPOFCMDIL EQU   *-POFCMDI           LENGTH                   *HMD 08/81*\n         SPACE 1                                            *HMD 08/81*\nPOFCMDO  EQU   *                   COMMAND OUTPUT BUFFER (TO VTAM)\n         DC    X'00'                                        *HMD 08/81*\n         DC    X'03'               COMMAND HEADER           *HMD 08/81*\n         DC    X'0000'                                      *HMD 08/81*\nPOFIN    DS    CL80                TGET BUFFER              *HMD 08/81*\nPOFCMDOL EQU   *-POFCMDO           LENGTH OF COMMAND        *HMD 08/81*\nIST314I  DC    C'IST314I  END'     END OF DISPLAY MESSAGE   *HMD 03/83*\n         EJECT                                              *HMD 08/81*\n         SPACE 1                                            *HMD 08/81*\nSAVECMDL DC    F'0'                                         *HMD 08/81*\nSAVECMD  DC    CL80' '             SAVED COMMAND            *HMD 08/81*\nWORKCMD  DC    CL80' '             COMMAND WORK AREA        *HMD 05/82*\nBLNKLINE DC    CL80' '             FOR CLEARING OUT BUFFER  *HMD 05/82*\n         SPACE 2                                            *HMD 08/81*\nWTOLIST  WTO   ' ',MCSFLAG=HRDCPY,MF=L   WTO TO LOG CMDS & RESPONSES\n         SPACE 1\nWTOLTH   EQU   WTOLIST,2           LENGTH OF TEXT + 4\n         ORG   WTOLIST+4           POINT TO MESSAGE\nWTOTXT   DS    CL126               MESSAGE TEXT (MAX OF 126)\n         SPACE 2\nPOFUSRID DS    CL7                 TSO USER ID\nPOFMSG1  DC    C'XXXX = ACBOFLGS/ACBERFLG'\nPOFMSG2  DC    C'XXXX = RTNCD/FDBK2'\nGTSIZE0  DS    X                                            *HMD 05/82*\nGTSIZE1  DS    X                                            *HMD 05/82*\n         EJECT\nPOFACB   ACB   AM=VTAM,                                                *\n               APPLID=POFACBAI,                                        *\n               PASSWD=POFACBPW,                                        *\n               EXLST=POFACBEX,                                         *\n               MACRF=NLOGON\n         EJECT\nPOFACB#  DC    PL1'1'            POF ACB NUMBER             *HMD 08/81*\nPOFACBAI DC    X'08'\n         DC    CL8'VTAMOPR1'\nPOFACBPW DC    X'08'\n         DC    CL8'OPERATOR'\n$WAITECB DC    A(0)               ECB FOR SEND CMD EXIT TO POST\nDINTVL   DS    0D\n         DC    CL8'00000400'      WAIT 04 SECONDS           *HMD 12/79*\n         EJECT\nPOFACBEX EXLST AM=VTAM,                                                *\n               LERAD=POFLERAD,                                         *\n               SYNAD=POFSYNAD\n         EJECT\nPOFRPLSC RPL   AM=VTAM,                                                *\n               ACB=POFACB,                                             *\n               AREA=POFCMDO,                                           *\n               RECLEN=POFCMDOL,                                        *\n               OPTCD=(SYN)\n         EJECT\nPOFRPLRC RPL   AM=VTAM,                                                *\n               ACB=POFACB,                                             *\n               AREA=POFCMDI,                                           *\n               AREALEN=POFCMDIL,                                       *\n               EXIT=POFRCVEX,                                          *\n               OPTCD=(ASY,Q,TRUNC)\n         EJECT\n         LTORG\n         EJECT\nAIDTABLE DS    0F\n         DC    X'7D',AL3(ENTER)    ENTER KEY/SELECTOR LIGHT-PEN ATTN\n         DC    X'F1',AL3(PFK1)     PFK 1\n         DC    X'F2',AL3(PFK2)     PFK 2\n         DC    X'F3',AL3(PFK3)     PFK 3\n         DC    X'F4',AL3(PFK4)     PFK 4\n         DC    X'F5',AL3(PFK5)     PFK 5\n         DC    X'F6',AL3(PFK6)     PFK 6\n         DC    X'F7',AL3(PFK7)     PFK 7\n         DC    X'F8',AL3(PFK8)     PFK 8\n         DC    X'F9',AL3(PFK9)     PFK 9\n         DC    X'7A',AL3(PFK10)    PFK 10\n         DC    X'7B',AL3(PFK11)    PFK 11\n         DC    X'7C',AL3(PFK12)    PFK 12\n         DC    X'C1',AL3(PFK13)    PFK 13\n         DC    X'C2',AL3(PFK14)    PFK 14\n         DC    X'C3',AL3(PFK15)    PFK 15\n         DC    X'C4',AL3(PFK16)    PFK 16\n         DC    X'C5',AL3(PFK17)    PFK 17\n         DC    X'C6',AL3(PFK18)    PFK 18\n         DC    X'C7',AL3(PFK19)    PFK 19\n         DC    X'C8',AL3(PFK20)    PFK 20\n         DC    X'C9',AL3(PFK21)    PFK 21\n         DC    X'4A',AL3(PFK22)    PFK 22\n         DC    X'4B',AL3(PFK23)    PFK 23\n         DC    X'4C',AL3(PFK24)    PFK 24\n         DC    X'6E',AL3(PA2)      PA 2\n         DC    X'6B',AL3(PA3)      PA 3\nNUMAIDS  EQU   (*-AIDTABLE)/4      TOTAL NUMBER OF AIDS\nBADAID   DC    X'00',AL3(NOSUPT)   NOT SUPPORTED\n         EJECT\nENTER    DC    X'FF'               FLAGS\n         DC    AL1(ENTERL-3)       LENGTH FOR EXECUTED MOVE\n         DC    C' '                COMMAND\nENTERL   EQU   *-ENTER             LENGTH\nPFK1     DC    X'00'\n         DC    AL1(PFK1L-3)\n         DC    C'HELP'\nPFK1L    EQU   *-PFK1\nPFK2     DC    X'00'\n         DC    AL1(PFK2L-3)\n         DC    C'D NET,BFRUSE'\nPFK2L    EQU   *-PFK2\nPFK3     DC    X'00'\n         DC    AL1(PFK3L-3)\n         DC    C'END'\nPFK3L    EQU   *-PFK3\nPFK4     DC    X'00'\n         DC    AL1(PFK4L-3)\n         DC    C'D NET,PENDING'\nPFK4L    EQU   *-PFK4\nPFK5     DC    X'00'\n         DC    AL1(PFK5L-3)\n         DC    C'D NET,APPLS'\nPFK5L    EQU   *-PFK5\nPFK6     DC    X'00'\n         DC    AL1(PFK6L-3)\n         DC    C'D NET,MAJNODES'\nPFK6L    EQU   *-PFK6\nPFK7     DC    X'00'\n         DC    AL1(PFK7L-3)\n         DC    C'D NET,LINES,I'\nPFK7L    EQU   *-PFK7\nPFK8     DC    X'00'\n         DC    AL1(PFK8L-3)\n         DC    C'D NET,CLSTRS'\nPFK8L    EQU   *-PFK8\nPFK9     DC    X'00'\n         DC    AL1(PFK9L-3)\n         DC    C'D NET,TERMS'\nPFK9L    EQU   *-PFK9\nPFK10    DC    X'01'\n         DC    AL1(PFK10L-3)\n         DC    C'D NET,E,ID='\nPFK10L   EQU   *-PFK10\nPFK11    DC    X'01'\n         DC    AL1(PFK11L-3)\n         DC    C'V NET,ACT,ID='\nPFK11L   EQU   *-PFK11\nPFK12    DC    X'01'\n         DC    AL1(PFK12L-3)\n         DC    C'V NET,INACT,ID='\nPFK12L   EQU   *-PFK12\nPFK13    DC    X'00'\n         DC    AL1(PFK13L-3)\n         DC    C'HELP'\nPFK13L   EQU   *-PFK13\nPFK14    DC    X'00'\n         DC    AL1(PFK14L-3)\n         DC    C'D NET,BFRUSE'\nPFK14L   EQU   *-PFK14\nPFK15    DC    X'00'\n         DC    AL1(PFK15L-3)\n         DC    C'END'\nPFK15L   EQU   *-PFK15\nPFK16    DC    X'00'\n         DC    AL1(PFK16L-3)\n         DC    C'D NET,PENDING'\nPFK16L   EQU   *-PFK16\nPFK17    DC    X'00'\n         DC    AL1(PFK17L-3)\n         DC    C'D NET,APPLS'\nPFK17L   EQU   *-PFK17\nPFK18    DC    X'00'\n         DC    AL1(PFK18L-3)\n         DC    C'D NET,MAJNODES'\nPFK18L   EQU   *-PFK18\nPFK19    DC    X'00'\n         DC    AL1(PFK19L-3)\n         DC    C'D NET,LINES,I'\nPFK19L   EQU   *-PFK19\nPFK20    DC    X'00'\n         DC    AL1(PFK20L-3)\n         DC    C'D NET,CLSTRS'\nPFK20L   EQU   *-PFK20\nPFK21    DC    X'00'\n         DC    AL1(PFK21L-3)\n         DC    C'D NET,TERMS'\nPFK21L   EQU   *-PFK21\nPFK22    DC    X'01'\n         DC    AL1(PFK22L-3)\n         DC    C'D NET,E,ID='\nPFK22L   EQU   *-PFK22\nPFK23    DC    X'01'\n         DC    AL1(PFK23L-3)\n         DC    C'V NET,ACT,ID='\nPFK23L   EQU   *-PFK23\nPFK24    DC    X'01'\n         DC    AL1(PFK24L-3)\n         DC    C'V NET,INACT,ID='\nPFK24L   EQU   *-PFK24\nPA2      DC    X'00'\n         DC    AL1(PA2L-3)\n         DC    C'PA 2 KEY'\nPA2L     EQU   *-PA2\nPA3      DC    X'00'\n         DC    AL1(PA3L-3)\n         DC    C'PA 3 KEY'\nPA3L     EQU   *-PA3\nNOSUPT   DC    X'00'\n         DC    AL1(NOSUPTL-3)\n         DC    C'THIS AID NOT SUPPORTED.'\nNOSUPTL  EQU   *-NOSUPT\n         EJECT                                              *HMD 05/82*\nHELPTXT  DS    0C                                           *HMD 05/82*\nHELP1    DC    C'THE VTAMOPER COMMAND WILL ALLOW AN AUTHORIZED USER  '\nHELP2    DC    C'TO ENTER VTAM COMMANDS AND RECEIVE THE REPLYS.      '\nHELP3    DC    C'UP TO THREE CONCURRENT USERS MAY BE ACTIVE          '\nHELP4    DC    C'AT ANY ONE TIME.                                    '\nHELP5    DC    C'                                                    '\nHELP6    DC    C'THE FOLLOWING SUBCOMMANDS ARE SUPPORTED:            '\nHELP7    DC    C'                                                    '\nHELP8    DC    C' *   =  RE-EXECUTE THE LAST VTAM COMMAND ENTERED    '\nHELP9    DC    C' ?   =  DISPLAY THE LAST VTAM COMMAND ENTERED       '\nHELP10   DC    C' X   =  EXIT TO ANOTHER TSO COMMAND (PCF II ONLY)   '\nHELP11   DC    C'                                                    '\nHELP12   DC    C'FOR 3270 DISPLAY TERMINALS, THE PF KEYS ARE DEFINED '\nHELP13   DC    C'BELOW:                                              '\nHELP14   DC    C'                                                    '\nHELPEND  DC    X'FF'                                        *HMD 05/82*\n         EJECT                                              *HMD 03/83*\n******************************************************** V2 *HMD 03/83*\n**           M E S S A G E    T A B L E               ** V2 *HMD 03/83*\n******************************************************** V2 *HMD 03/83*\nMSGTBL   DS    0H                                           *HMD 03/83*\nIST511I  DC    C'IST511I'          ERROR MESSAGE            *HMD 03/83*\nMSGLEN   EQU   *-MSGTBL            LENGTH OF MESSAGE        *HMD 03/83*\nIST191I  DC    C'IST191I'          ERROR MESSAGE            *HMD 03/83*\nIST010I  DC    C'IST010I'          ERROR MESSAGE            *HMD 03/83*\nIST032I  DC    C'IST032I'          ERROR MESSAGE            *HMD 03/83*\nIST037I  DC    C'IST037I'          ERROR MESSAGE            *HMD 03/83*\nIST039I  DC    C'IST039I'          ERROR MESSAGE            *HMD 03/83*\nIST042I  DC    C'IST042I'          ERROR MESSAGE            *HMD 03/83*\nIST061I  DC    C'IST061I'          ERROR MESSAGE            *HMD 03/83*\nIST066I  DC    C'IST066I'          ERROR MESSAGE            *HMD 03/83*\nIST073I  DC    C'IST073I'          ERROR MESSAGE            *HMD 03/83*\nIST085I  DC    C'IST085I'          ERROR MESSAGE            *HMD 03/83*\nIST088I  DC    C'IST088I'          ERROR MESSAGE            *HMD 03/83*\nMSGEND   DC    X'FF'               END OF MESSAGE TABLE     *HMD 03/83*\n         EJECT                                              *HMD 05/82*\n         ISTDPOHD\n         EJECT\n         IFGACB AM=VTAM\n         EJECT\n         IFGRPL AM=VTAM\n         EJECT\n         IHAASCB\n         EJECT\n         IKJCPPL                                            *HMD 08/81*\n         EJECT                                              *HMD 08/81*\n         IKJPSCB\n         EJECT\n         IHAPSA                                             *HMD 08/81*\n         EJECT                                              *HMD 08/81*\n         CVT   LIST=YES,DSECT=YES                           *HMD 08/81*\n         END   POF\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTAMOPR#": {"ttr": 20485, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06\\x8f\\x01\\x02\\x06\\x8f#\\x16\\x00S\\x00S\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-09T00:00:00", "modifydate": "2002-03-09T23:16:00", "lines": 83, "newlines": 83, "modlines": 0, "user": "SYZYGY1"}, "text": "\n\n1  PURPOSE - PROVIDE VTAM SECONDARY PROGRAM OPERATOR FOR USE AS TSO\n             COMMAND.  WORKS FROM VTAM OR TCAM TSO.\n\n   OPERATION - POF OPENS ITS OWN ACB, AND USING TPUT/TGET AND\n               SENDCMD/RCVCMD ALLOWS AN AUTHORIZED TSO USER TO\n               BE A VTAM SECONDARY PROGRAM OPERATOR.  THE COMMANDS\n               AND RESPONSES ARE ALSO RECORDED ON SYSLOG.\n\n               VTAMOPER REQUIRES THAT THE USER HAVE OPERATOR\n               AUTHORITY TO ISSUE VTAM COMMANDS.\n\n\n      THIS VTAM SECONDARY PROGRAM OPERATOR ONLY RUNS UNDER TSO.\n      THE TSO USER IS REQUIRED TO HAVE 'OPER' AUTHORIZATION. IT ALSO\n      NECESSARY TO ADD THE FOLLOWING TO SYS1.VTAMLST(APPLIDS):\n\n      VTAMOPR1 APPL  PRTCT=OPERATOR,     TSO COMMAND VTAM SPO\n                     AUTH=(ACQ,SPO),\n                     EAS=1\n      VTAMOPR2 APPL  PRTCT=OPERATOR,     TSO COMMAND VTAM SPO\n                     AUTH=(ACQ,SPO),\n                     EAS=1\n      VTAMOPR3 APPL  PRTCT=OPERATOR,     TSO COMMAND VTAM SPO\n                     AUTH=(ACQ,SPO),\n                     EAS=1\n\n      SUPPORT ADDED FOR -   * = REPEAT LAST COMMAND\n                        -   ? = SHOW LAST COMMAND\n                        -   X = PCF EXIT\n\n      SUPPORT ADDED FOR -   PROGRAM FUNCTION KEYS\n\n     ALL COMMANDS AND RESPONSES ARE LOGGED TO SYSLOG.\n     UP TO 3 TSO USERS AT A TIME MAY BE EXECUTING POF.\n\n\n      PROGRAM FUNCTION KEY DEFINITIONS:\n\n    +----------+----------+----------+\n    :   HELP   : D BFRUSE :   END    :\n    +----------+----------+----------+\n    : D PENDING: D APPLS  : D MAJNODE:\n    +----------+----------+----------+\n    : D LINES  : D CLSTRS : D TERMS  :\n    +----------+----------+----------+\n    : D E,ID=  : V ACT    : V INACT  :\n    +----------+----------+----------+\n\n1)F    FUNCTION -\n       THE VTAMOPER COMMAND WILL ALLOW AN AUTHORIZED USER\n       TO ENTER VTAM COMMANDS AND RECEIVE THE REPLYS. VTAMOPER\n       RUNS UNDER TSO AS A VTAM APPLICATION. UP TO THREE\n       CONCURRENT USERS MAY BE ACTIVE AT ANY ONE TIME.\n\n )S    SUBCOMMANDS -\n\n       THE FOLLOWING SUBCOMMANDS ARE SUPPORTED:\n\n       *    =  RE-EXECUTE THE LAST VTAM COMMAND ENTERED\n       ?    =  DISPLAY THE LAST VTAM COMMAND ENTERED\n       X    =  EXIT TO ANOTHER TSO COMMAND (PCF ONLY)\n\n    PROGRAM FUNCTION KEY DEFINITIONS FOR 3270 DISPLAY TERMINALS:\n\n    +----------+----------+----------+\n    :   HELP   : D BFRUSE :   END    :\n    +----------+----------+----------+\n    : D PENDING: D APPLS  : D MAJNODE:\n    +----------+----------+----------+\n    : D LINES  : D CLSTRS : D TERMS  :\n    +----------+----------+----------+\n    : D E,ID=  : V ACT    : V INACT  :\n    +----------+----------+----------+\n\n)X    SYNTAX -\n      VTAMOPER\n\n      ALIAS - SPO\n\n)O    OPERANDS -\n      THERE ARE NO COMMAND LEVEL OPERANDS FOR VTAMOPER\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WTC": {"ttr": 20488, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06\\x8f\\x01\\x02\\x06\\x8f# \\x01!\\x01!\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-09T00:00:00", "modifydate": "2002-03-09T23:20:00", "lines": 289, "newlines": 289, "modlines": 0, "user": "SYZYGY1"}, "text": "         TITLE 'WTC--COMMAND PROCESSOR'\n*--------------------------------------------------------------------*\n*                                                                    *\n*        ' WRITE TO CONSOLE '  TSO COMMAND PROCESSOR                 *\n*                                                                    *\n*                                                                    *\n*        THIS TSO COMMAND IS ESSENTIALLY THE SAME AS DOING A SEND    *\n*        COMMAND TO THE CONSOLE OPERATOR EXCEPT THE MSG DOES NOT     *\n*        ROLL OFF THE SCREEN. IT ISSUES THE MSG WITH A ROUTCDE=(2)   *\n*        AND DESC=(2).  HANDY FOR WAKING UP THE OPERATOR.            *\n*                                                                    *\n*            WTC   'MESSAGE TEXT'                                    *\n*                                                                    *\n*        THIS PROGRAM REQUIRES YOU TO ENCORPORATE YOUR OWN SVC       *\n*        FOR GETTING YOURSELF IN AND OUT OF SUPERVISOR STATE.        *\n*                                                                    *\n*        REGISTER USAGE:                                             *\n*              R0  - WORK                                            *\n*              R1  - WORK                                            *\n*              R2  - ADDRESS THE CPPL                                *\n*              R3  - ADDRESS THE IKJPARMD                            *\n*              R4  - ADDRESS THE WTC PDE                             *\n*              R5  - ADDRESS OF PASSED MESSAGE                       *\n*              R6  - LENGTH OF MESSAGE                               *\n*              R7  - WORK                                            *\n*              R8  - NOT USED                                        *\n*              R9  - NOT USED                                        *\n*              R10 - NOT USED                                        *\n*              R11 - NOT USED                                        *\n*              R12 - NOT USED                                        *\n*              R13 - ADDRESS OF MYDSECT                              *\n*              R14 - CONVENTIONAL                                    *\n*              R15 - CONVENTIONAL                                    *\n*                                                                    *\n*        RETURN CODES:                                               *\n*              0  -  NORMAL                                          *\n*              8  -  NO TEXT ENTERED                                 *\n*              12 -  TOO LONG TEXT                                   *\n*                                                                    *\n* AUTHOR: UNKNOWN                                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE\nWTC      START\n         USING *,R12\n         B     32(,15)\n         DC    CL12'WTC'\n         DC    CL16' &SYSDATE &SYSTIME '\n         STM   14,12,12(13)\n         LR    R12,R15\n         GETMAIN R,LV=MYDSECTL\n         ST    13,4(,1)\n         ST    1,8(,13)\n         LR    14,13\n         LR    13,1\n         L     1,24(,14)\n         USING MYDSECT,R13\n         LR    R2,R1\n         USING CPPL,R2\n*--------------------------------------------------------------------*\n*        SET UP FOR PUTLINE\n*--------------------------------------------------------------------*\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n*--------------------------------------------------------------------*\n*        SET UP PPL FOR PARSE\n*--------------------------------------------------------------------*\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n         L     R0,=A(MYPCL)\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         XC    MYANS,MYANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         LA    R0,MYUWA\n         ST    R0,PPLUWA\n         DROP  R15\n         SPACE\n*--------------------------------------------------------------------*\n*        CALL THE PARSE SERVICE ROUTINE\n*--------------------------------------------------------------------*\n         SPACE\n         LR    R1,R15              POINT TO PPL\n         L     R15,16              CVTPTR\n         TM    X'020C'(R15),X'80'  IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,X'020C'(,R15)   CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK EQU   *\n         LINK  EP=IKJPARS\nPARSEEXT EQU   *\n         SPACE 1\n         LTR   R15,R15             NORMAL RETURN?\n         BNZ   PARSERR             NO - TERMINATE\n         L     R3,MYANS            POINT TO THE PDL\n         USING IKJPARMD,R3         PDL ADDRESSABLITY\n         LA    R4,WTCMSG           POINT TO PCE\n         TM    WTCMSG+6,X'80'      WAS THERE AN ENTRY?\n         BZ    ERRNOTXT            IMPOSSIBLE 'CAUSE A PROMPT\n         LH    R6,WTCMSG+4         GET TXT LENGTH\n         L     R5,WTCMSG           ADDRESS OF TXT\n         BNE   NOQUOTES            SKIP THE STRIP\n         SH    R6,=H'3'            SUB 3 FOR EX + QUOTES\n         LA    R5,1(R5)            PASS QUOTE\nRESUME1  LTR   R6,R6               SET CC\n         BNP   ERRNOTXT            GOT TO HAVE AT LEAST 1\n         CH    R6,=H'114'          HOW BIG?\n         BH    ERROVER             TOO LONG\n         B     *+10                BRANCH AROUND\n         MVC   MYREST(0),0(R5)     SET UP WTO\n         EX    R6,*-6              LOOP BACK TO MVC\n         LA    R7,16               POINTER TO ADDRESS OF CVT\n         L     R7,0(R7)            ADDRESS OF THE CVT\n         L     R7,0(R7)            DOUBLE WORD POINTER\n         L     R7,4(R7)            CURRENT TCB ADDRESS\n         L     R7,12(R7)           TIOT POINTER\n         MVC   JOBNAME,=C'  '      ESTHETICS\n         MVC   JOBNAME+2(8),0(R7)  JOBNAME\n         LA    R1,MYWTOL           BEGINNING ADDRESS\n         LA    R6,5(R6)            ORG LTH+4\n         LA    R1,0(R1,R6)         END OF LIST SO FAR\n         MVC   0(10,R1),JOBNAME    MOVE IN JOB NAME\n         LA    R6,10(R6)\n         STH   R6,MYTXTLTH         MOVE TO MY LIST\n         MVC   MYMCSFLG(2),WTOMDL+2 MODEL TO REAL\n         LA    R1,MYWTOL           SET UP\n         LA    R6,0(R1,R6)         DISPLACEMENT FOR LAST PARMS\n         MVC   0(4,R6),WTOMDL+9    DESC + ROUT\n         SPACE\n*--------------------------------------------------------------------*\n*        THIS IS THE PLACE YOU MUST PLACE YOUR CODE TO GET YOU\n*        INTO SUPERVISOR STATE. GENERALLY SOME SVC.\n*--------------------------------------------------------------------*\n         SPACE\nINSUP    EQU   *\n         LA    R0,0\n         LA    R1,1\n         SVC   244\n         SPACE\n         LA    R1,MYWTOL           POINT TO PARM LIST\n         WTO   MF=(E,(1))          MISSION ACCOMPLISHED\n         SPACE\nOUTSUP   EQU   *\n         SR    R1,R1\n         SVC   244\n         SPACE\n         SR    R15,R15             ALLSOK\n         B     EXIT\nNOQUOTES SH    R6,=H'1'            SUB 1 FROM LENGTH FOR EX\n         B     RESUME1           REST OF THE PROCESSING IS THE SAME\nERRNOTXT EQU   *\n         LA    R1,MSG02\n         LA    R0,L'MSG02\n         BAL   R14,PUTMSG\n         LA    R15,8\n         B     EXIT\nERROVER  EQU   *\n         LA    R1,MSG03\n         LA    R0,L'MSG03\n         BAL   R14,PUTMSG\n         LA    R15,12\n         B     EXIT\n*--------------------------------------------------------------------*\n*        PUTLINE ROUTINES\n*--------------------------------------------------------------------*\nPUTMSG   EQU   *\n         STM   R14,R1,PUTLINS\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1\n         ST    R14,MYOLD   NUMBER OF MESSAGE SEGMENTS\n         LA    R14,MYSEG1\n         ST    R14,MYOLD+4\n         LR    R14,R0\n         LA    R14,4(,R14)\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'\n         BE    *+16\n         LA    R14,1(,R14)    ADD 1 TO LENGTH\n         MVI   0(R15),C' '\n         LA    R15,1(,R15)   BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)\n         EX    R14,*-6\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),MF=(E,MYIOPL)\n         LM    R14,R1,PUTLINS\n         BR    R14\nPARSERR  EQU   *\n         LA    R1,MSG01\n         LA    R0,L'MSG01\n         BAL   R14,PUTMSG\n         LA    R15,12\n         B     EXIT\nEXIT0    LA    R15,0\nEXIT     EQU   *\n         ST    R15,RC\n         IKJRLSA MYANS\n         LR    R1,R13\n         L     R15,RC\n         L     13,4(,13)\n         ST    15,16(,13)\n         FREEMAIN R,A=(1),LV=MYDSECTL\n         LM    14,12,12(13)\n         BR    14\n         TITLE 'CONSTANTS'\nMSG01    DC    C'ERROR IN PARSE SERVICE ROUTINE'\nMSG02    DC    C'NO TEXT FOUND'\nMSG03    DC    C'TEXT CAN''T EXCEED 114.'\n         DS    0F\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         *\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\nWTOMDL   WTO   'DUMMY',ROUTCDE=(2),DESC=(2),MF=L\n         SPACE\n         LTORG\n         SPACE\n*--------------------------------------------------------------------*\n*        PARSE PARAMETERS\n*--------------------------------------------------------------------*\n         SPACE\n         PRINT NOGEN\nMYPCL    IKJPARM\nWTCMSG   IKJPOSIT STRING,ASIS,PROMPT='TEXT OF MESSAGE TO BE SENT'\n         IKJENDP\n         PRINT GEN\n         TITLE 'DSECTS'\n         SPACE\nMYDSECT  DSECT\n         DS    18F\nRC       DS    F\nMYPPL    DS    7F\nMYANS    DS    F\nMYUWA    DS    F\nMYECB    DS    F\nMYIOPL   DS    4F\nMYPTPB   DS    3F\nMYOLD    DS    2F\nMYSEG1   DS    2F,CL100\nPUTLINS  DS    4F\n         DS    0F\nMYWTOL   DS    0CL132\nMYTXTLTH DS    XL2\nMYMCSFLG DS    XL2\nMYREST   DS    CL128\nJOBNAME  DS    CL10\nMYDSECTL EQU   *-MYDSECT\n         SPACE\n         IKJIOPL\n         SPACE\n         IKJPPL\n         SPACE\n         IKJCPPL\nR0        EQU   0\nR1        EQU   1\nR2        EQU   2\nR3        EQU   3\nR4        EQU   4\nR5        EQU   5\nR6        EQU   6\nR7        EQU   7\nR8        EQU   8\nR9        EQU   9\nR10       EQU   10\nR11       EQU   11\nR12       EQU   12\nR13       EQU   13\nR14       EQU   14\nR15       EQU   15\n          END  WTC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WTC$": {"ttr": 20494, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06\\x8f\\x01\\x02\\x06\\x8f# \\x00!\\x00!\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-09T00:00:00", "modifydate": "2002-03-09T23:20:00", "lines": 33, "newlines": 33, "modlines": 0, "user": "SYZYGY1"}, "text": "//C7BWTC  JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=SYZYGY1,\n//       MSGCLASS=A\n//ASMFCL PROC  CLASS=A,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='SYZYGY.PDS.DATA',\n//*            LOAD='SYS1.APFLIB',\n//             LOAD='SYZYGY.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='LOAD,NODECK,XREF,RENT'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1,RENT'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=SYZYGY.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD.(&MEM),DISP=SHR\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=WTC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WTC#": {"ttr": 20496, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x02\\x06\\x8f\\x01\\x02\\x06\\x8f#!\\x00\\x11\\x00\\x11\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xf1@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2002-03-09T00:00:00", "modifydate": "2002-03-09T23:21:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "SYZYGY1"}, "text": ")F FUNCTION -\n  THE 'WTC' COMMAND SENDS A MSG TO THE OPERATOR CONSOLE.\n\n  IT DIFFERS FROM THE 'SEND' COMMAND IN THAT THE TEXT OF THE\n  MESSAGE IS WILL NOT ROLL OFF THE SCREEN. IT USES THE\n  EQUIVALENT OF ROUTCDE=(2),DESC=(2).\n\n)X SYNTAX  -\n        WTC     '.. MESSAGE ..'\n\n  EXAMPLES - WTC  'IS ANYONE THERE ?????? '\n\n  REQUIRED - MESSAGE\n  DEFAULTS - NONE\n  ALIAS    - NONE\n)O OPERANDS -\n  'MESSAGE' -  THE TEXT OF THE MESSAGE UP TO 114 CHARACTERS.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT077/FILE077.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT077", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}