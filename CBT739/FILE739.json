{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012708000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1175720, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 14, "INMDSNAM": "CBT.V500.FILE739.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1175720, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1175720, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE739.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x13\\x0e'", "DS1TRBAL": "b'\\x02\\xa8'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05\\t\\x00\\x02\\x05\\n\\x00\\x06\\x00\\x14'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04J\\x00\\x00\\x01\\x07\\x11O\\x01\\x07\\x11O\\x00\\x06\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf4@@@'", "ispf": {"version": "04.74", "flags": 0, "createdate": "2007-04-24T00:00:00", "modifydate": "2007-04-24T00:06:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-474"}, "text": "REGULAR CBT TAPE - VERSION 474    FILE:  739\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT474.FILE739\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 49 MEMBERS COUNTED; CUMULATIVE SIZE IS 10,527 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   04/24/07    00:06:38    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x06\\x03\\x7f\\x01\\x06\\x03\\x7f\\x10E\\x00\\x1f\\x00\\x1f\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-02-06T00:00:00", "modifydate": "2006-02-06T10:45:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:      Re: new contribution to CBT tape: ISPFCMDS\nFrom:         \"Ron Brown\" <ron_brown@hotmail.com>\nDate:         Mon, 06 Feb 2006 14:16:30 +0000\nTo:           sbgolob@cbttape.org\n\nHi Sam,\n\nHere is a file of ISPFCMDS 6.0,  which has been created for the\nCBTTAPE.\n\nAs I mentioned previously, ISPF version 5.5 introduced the\npossibility of multiple ISPF User & Site tables, and the tool has\nbeen updated to handle them.  However, I do not have an operating\nsystem which allows me to test that.  I have the offsets in the\nISPF configuration module for versions 5.5 & 5.6 and I simulated\nas much as I could without actual command tables.  I believe z/OS\n1.7 has ISPF 5.7, hence it could possibly have different offsets\nand the tool will assume that whatever tables are active are the\nonly ones defined.\n\nIt also displays the HELP panels for all known standard ISPF\ncommands (by line command 'H' on the list of commands), but I did\nnot have a way to find the HELP panels for any new commands after\nISPF 5.2 (z/OS 1.2).\n\nIt would be great if you could test it on a z/OS 1.6 system.\nLet me know how it goes.\n\nRegards,   Ron\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$IVP": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x05\\x01\\x06\\x04\\x0f\\x01\\x07\\x11?\\x18\\x12\\x00<\\x00:\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2006-02-09T00:00:00", "modifydate": "2007-04-23T18:12:05", "lines": 60, "newlines": 58, "modlines": 0, "user": "ZARBRO0"}, "text": "\n             Installation Verification Procedure      (version 7.0)\n            -------------------------------------\n\na) define multiple User and Site tables (if not already defined)\n   - ensure JSPxxxx components in libraries ISPPLIB & SYSEXEC\n   - allocate a Keyword File library (LRECL=255,RECFM=VB)\n   - start Extended Configuration dialog:  TSO %JSPCCONF\n   - provide name for Keyword File dataset\n   - select option 0 (Create/View Keyword File from ACTIVE ...)\n   - select option 5 (ISPDFLTS .... etc)\n   - enter multiple values in: APPLID for User & Site tables\n   - save the changes (and keyword file)\n   - select option 4 (Build Configuration Table Load Module)\n   - ensure the load library is allocated to ISPLLIB then restart ISPF\n\nb) use ISPFCMDS to create new User and Site tables\n   - ensure ISPFCMDS components in libraries ISPLLIB, ISPPLIB & SYSEXEC\n   - start ISPFCMDS:  TSO %ISPFCMDS\n   - enter primary cmd: '2' and check all table definitions are shown\n   - enter PF3 (END) then primary command: 'NEWSITE'\n   - select one of the multiple SITE table names\n   - select your table library (if one is not allocated - create one)\n   - press ENTER to confirm your table library\n   - repeat the above to create more SITE tables\n   - enter primary cmd: 'NEWUSER'\n   - select one of the multiple USER table names\n   - coninue to create a USER table the same as for the SITE tables\n   - repeat the above to create more USER tables\n   - exit from ISPFCMDS and restart ISPF\n\nc) check that new tables are properly created and some functions work\n   - start ISPFCMDS and check that all new USER & SITE tables are shown\n   - enter primary cmd: 2   and check all table details are shown\n   - enter PF3 (END) to return to main list\n   - enter line cmds: 'H' beside a command to see the HELP, then 'END'\n   - enter primary cmd: 'L DD' to check LOCATE works\n   - enter line cmds: 'S' beside command DDLIST to get invocation panel\n   - press HELP key to see command help, then END, then ENTER to invoke\n         command DDLIST, then END to return to command list\n   - enter line cmds: 'C' and 'A' to copy commands from ISPCMDS into\n         the new User and Site tables\n   - enter primary command: '1' to switch to also show command actions\n   - overtype some of the command names (and/or) actions, press ENTER\n         to dynamically update the active commands\n   - enter primary cmd: '3' to save modified User tables to disk\n   - enter primary cmd: 'SAVES' to save modified Site tables to disk\n   - enter primary command: '1' to show only command descriptions\n   - enter primary cmd: 'O' to check 'ONLY OVERRIDES' works\n   - enter line cmd: 'V' beside any cmd (marked with '*' '.' '+' or '-')\n         to view the command and its relationship to other commands\n   - enter primary cmd: 'RES' to reset the list back to all commands\n   - enter primary cmd: 'SORT' to change the display sequence\n   - enter primary cmd: 'F KEY' to check FIND works then 'F' to reset it\n   - enter primary cmd: 'S ISP' to check SELECT works then 'S' to reset\n   - enter primary cmd: 'T' to check 'ONLY TRUNCATED' works, then 'RES'\n   - at top right of list: deselect 'System table' and 'Site table(s)'\n         and check that it shows all (and only) User tables\n   - enter primary cmd: 'HELP' (or PF1) then 'C' and check that the help\n         shows the correct z/OS version and cmd table definitions\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$NOTES": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00U\\x01\\x06\\x02\\x0f\\x01\\x07\\x11?\\x18\\x13\\x00w\\x000\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "2006-01-20T00:00:00", "modifydate": "2007-04-23T18:13:55", "lines": 119, "newlines": 48, "modlines": 0, "user": "ZARBRO0"}, "text": "\n                ISPF Commands Tool (version 7.0)\n               ----------------------------------\n  This tool enables the user to dynamically display and modify all their\n  ISPF commands, from (almost) any ISPF panel.  It provides easy search\n  facilities and shows command relationships to simplify the management\n  of very large numbers of commands.  That empowers the user to fully\n  exploit the flexibility of commands for invoking all their ISPF\n  activities.\n  This tool is packaged with an \"Enhanced ISPF Configuration Utility\"\n  included to make it easier for users to configure their ISPF.\n\n\nWhy do you need this tool?\n--------------------------\nIt is possible for TSO users to have up to 8 active ISPF command tables,\nbut IBM still provide only the old option 3.9 \"Command Table Utility\" to\ndisplay or update them.  Particularly if you are going to use many\ncommand tables with a large number of commands you will benefit from a\nmuch more sophisticated tool to manage them.  This tool provides all the\nsame functionality (as 3.9) plus much more, including:\n\n 1) While in any ISPF application, it can display the full list of\n    available commands from all the command tables active in that\n    application, or you can select just particular tables.\n    It can also open inactive command tables for display and update.\n\n 2) The list of commands is in the standard ISPF order, or you can\n    sort the list into different orders (eg. command name order).\n\n 3) You can list only the commands with names matching a particular mask\n    (eg. listing only commands beginning with \"REF\").\n    You can list only the commands with a particular string in their\n    description or action (eg. listing only commands with \"KEY\").\n\n 4) It shows the relationships between commands in all the tables.  It\n    indicates commands which OVERRIDE others (and which are overridden)\n    It shows the valid TRUNCATIONS allowed for commands.  It tracks\n    command ALIAS chains to show the effective action of such commands.\n\n 5) It can display which libraries the active command tables are in,\n    plus some table statistics.\n\n 6) You can ADD, UPDATE or DELETE the commands in any active command\n    table.  You can also COPY or MOVE commands within or between tables.\n    All the changes are immediately active, without restarting ISPF.\n    Thus you can temporarily change the commands in any ISPF application\n    while you are actually using it.\n\n 7) You can permanently SAVE any command changes to disk, except for the\n    ISPCMDS table.\n\n 8) It can create new Application-, User- or Site- command tables.\n\nThere are extensive HELP panels detailing the functionality, plus much\ninformation about ISPF command tables and how to configure them.\n\n\nInstallation\n------------\n  This version is compatible with all ISPF releases from version 3.4 to\n  version 5.8 (z/OS 1.8).  The included Configuration Utility can get\n  your current ISPF configuration parameters only up to version 5.7,\n  but it will create a usable keyword file which can be used with later\n  versions of ISPF.\n\n  a) Assemble/Link members ISPFCMDL & ISPFCMDO\n\n  b) Copy ISPFCMDS member to a library in the SYSEXEC (or SYSPROC)\n     concatenation\n\n  c) Copy all other ISPFCMxx members into the ISPPLIB concatenation\n\n  d) Copy all JSPCxxxx members to a library in the SYSEXEC (or SYSPROC)\n     concatenation\n\n  e) Copy all JSPPCxxx members into the ISPPLIB concatenation\n\n  Notes:\n  - It is worthwhile to compile the Rexx module ISPFCMDS, to get better\n    performance (mainly because of its size).\n\n  - It is designed to be used from within every other ISPF application,\n    hence it should be in base libraries and not LIBDEF'd.\n\n  - This tool is most useful when User & Site command tables have been\n    defined in the ISPF configuration module, hence it is recommended\n    that some are defined.\n\n  - Control of the updating of the disk copy of any command tables is\n    left to an external security product (eg. RACF).\n\n  - After installation, the product can be quickly checked by following\n    the instructions in the $IVP member of this library.\n\n\nUse\n---\n  It is invoked by 'TSO %ISPFCMDS' or better yet - create a command\n  like the following:\n    Verb  . . . : CMDS\n    Trunc . . . : 0\n    Action  . . : SELECT CMD(%ISPFCMDS &ZPARM) SCRNAME(CMDS)\n    Description : 'ISPF Commands' tool\n\n  If ISPFCMDS is compiled use:\n    Action  . . : SELECT CMD(ISPFCMDS &ZPARM) SCRNAME(CMDS) LANG(CREX)\n\n  - It will work with future versions of ISPF by assuming that the names\n    of any tables which are defined but not active, can be found in an\n    ISPF configuration module with the same name and field offsets as\n    for ISPF for z/OS 1.7 (version 5.7).  That assumption will probably\n    be true for at least the next few ISPF releases.\n\n\nSupport\n-------\n  The author, Ron Brown, can be contacted at:  Ron_Brown@hotmail.com\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE739": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04J\\x00\\x00\\x01\\x07\\x11O\\x01\\x07\\x11O\\x00\\x06\\x00\\x94\\x00\\x94\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf4@@@'", "ispf": {"version": "04.74", "flags": 0, "createdate": "2007-04-24T00:00:00", "modifydate": "2007-04-24T00:06:00", "lines": 148, "newlines": 148, "modlines": 0, "user": "CBT-474"}, "text": "//***FILE 739 is from Ron Brown, and contains a package to update   *   FILE 739\n//*           your TSO session's ISPF command tables dynamically.   *   FILE 739\n//*           This is a heavy-duty package with lots of options     *   FILE 739\n//*           and tutorial.  It is a very good idea (and instruc-   *   FILE 739\n//*           tive too) to read the tutorials associated with the   *   FILE 739\n//*           ISPFCMDS package.                                     *   FILE 739\n//*                                                                 *   FILE 739\n//*           email:  Ron_Brown@hotmail.com                         *   FILE 739\n//*                                                                 *   FILE 739\n//*                ISPF Commands Tool (version 7.0)                 *   FILE 739\n//*               ----------------------------------                *   FILE 739\n//*    This tool enables the user to dynamically display and        *   FILE 739\n//*    modify all their ISPF commands, from (almost) any ISPF       *   FILE 739\n//*    panel.  It provides easy search facilities and shows         *   FILE 739\n//*    command relationships to simplify the management of          *   FILE 739\n//*    very large numbers of commands.  That empowers the           *   FILE 739\n//*    user to fully exploit the flexibility of commands for        *   FILE 739\n//*    invoking all their ISPF activities.  This tool is            *   FILE 739\n//*    packaged with an \"Enhanced ISPF Configuration Utility\"       *   FILE 739\n//*    included to make it easier for users to configure            *   FILE 739\n//*    their ISPF.                                                  *   FILE 739\n//*                                                                 *   FILE 739\n//*   Why do you need this tool?                                    *   FILE 739\n//*   --------------------------                                    *   FILE 739\n//*   It is possible for TSO users to have up to 8 active           *   FILE 739\n//*   ISPF command tables, but IBM still provide only the old       *   FILE 739\n//*   option 3.9 \"Command Table Utility\" to display or update       *   FILE 739\n//*   them.  Particularly if you are going to use many              *   FILE 739\n//*   command tables with a large number of commands you will       *   FILE 739\n//*   benefit from a much more sophisticated tool to manage         *   FILE 739\n//*   them.  This tool provides all the same functionality          *   FILE 739\n//*   (as 3.9) plus much more, including:                           *   FILE 739\n//*                                                                 *   FILE 739\n//*   1) While in any ISPF application, it can display the          *   FILE 739\n//*      full list of available commands from all the command       *   FILE 739\n//*      tables active in that application, or you can select       *   FILE 739\n//*      just particular tables.  It can also open inactive         *   FILE 739\n//*      command tables for display and update.                     *   FILE 739\n//*                                                                 *   FILE 739\n//*   2) The list of commands is in the standard ISPF order,        *   FILE 739\n//*      or you can sort the list into different orders (eg.        *   FILE 739\n//*      command name order).                                       *   FILE 739\n//*                                                                 *   FILE 739\n//*   3) You can list only the commands with names matching a       *   FILE 739\n//*      particular mask (eg. listing only commands beginning       *   FILE 739\n//*      with \"REF\").  You can list only the commands with a        *   FILE 739\n//*      particular string in their description or action           *   FILE 739\n//*      (eg. listing only commands with \"KEY\").                    *   FILE 739\n//*                                                                 *   FILE 739\n//*   4) It shows the relationships between commands in all         *   FILE 739\n//*      the tables.  It indicates commands which OVERRIDE          *   FILE 739\n//*      others (and which are overridden).  It shows the valid     *   FILE 739\n//*      TRUNCATIONS allowed for commands.  It tracks command       *   FILE 739\n//*      ALIAS chains to show the effective action of such          *   FILE 739\n//*      commands.                                                  *   FILE 739\n//*                                                                 *   FILE 739\n//*   5) It can display which libraries the active command          *   FILE 739\n//*      tables are in, plus some table statistics.                 *   FILE 739\n//*                                                                 *   FILE 739\n//*   6) You can ADD, UPDATE or DELETE the commands in any          *   FILE 739\n//*      active command table.  You can also COPY or MOVE           *   FILE 739\n//*      commands within or between tables.  All the changes        *   FILE 739\n//*      are immediately active, without restarting ISPF.           *   FILE 739\n//*      Thus you can temporarily change the commands in any        *   FILE 739\n//*      ISPF application while you are actually using it.          *   FILE 739\n//*                                                                 *   FILE 739\n//*   7) You can permanently SAVE any command changes to            *   FILE 739\n//*      disk, except for the ISPCMDS table.                        *   FILE 739\n//*                                                                 *   FILE 739\n//*   8) It can create new Application-, User- or Site-             *   FILE 739\n//*      command tables.                                            *   FILE 739\n//*                                                                 *   FILE 739\n//*   There are extensive HELP panels detailing the                 *   FILE 739\n//*   functionality, plus much information about ISPF command       *   FILE 739\n//*   tables and how to configure them.                             *   FILE 739\n//*                                                                 *   FILE 739\n//*                                                                 *   FILE 739\n//*   Installation                                                  *   FILE 739\n//*   ------------                                                  *   FILE 739\n//*    This version is compatible with all ISPF releases from       *   FILE 739\n//*    version 3.4 to version 5.8 (z/OS 1.8).  The included         *   FILE 739\n//*    Configuration Utility can get your current ISPF              *   FILE 739\n//*    configuration parameters only up to version 5.7, but         *   FILE 739\n//*    it will create a usable keyword file which can be used       *   FILE 739\n//*    with later versions of ISPF.                                 *   FILE 739\n//*                                                                 *   FILE 739\n//*    a) Assemble/Link members ISPFCMDL & ISPFCMDO                 *   FILE 739\n//*                                                                 *   FILE 739\n//*    b) Copy ISPFCMDS member to a library in the SYSEXEC          *   FILE 739\n//*       (or SYSPROC) concatenation                                *   FILE 739\n//*                                                                 *   FILE 739\n//*    c) Copy all other ISPFCMxx members into the ISPPLIB          *   FILE 739\n//*       concatenation                                             *   FILE 739\n//*                                                                 *   FILE 739\n//*    d) Copy all JSPCxxxx members to a library in the             *   FILE 739\n//*       SYSEXEC (or SYSPROC) concatenation                        *   FILE 739\n//*                                                                 *   FILE 739\n//*    e) Copy all JSPPCxxx members into the ISPPLIB                *   FILE 739\n//*       concatenation                                             *   FILE 739\n//*                                                                 *   FILE 739\n//*    Notes:                                                       *   FILE 739\n//*    - It is worthwhile to compile the Rexx module                *   FILE 739\n//*      ISPFCMDS, to get better performance (mainly because        *   FILE 739\n//*      of its size).                                              *   FILE 739\n//*                                                                 *   FILE 739\n//*    - It is designed to be used from within every other          *   FILE 739\n//*      ISPF application, hence it should be in base               *   FILE 739\n//*      libraries and not LIBDEF'd.                                *   FILE 739\n//*                                                                 *   FILE 739\n//*    - This tool is most useful when User & Site command          *   FILE 739\n//*      tables have been defined in the ISPF configuration         *   FILE 739\n//*      module, hence it is recommended that some are              *   FILE 739\n//*      defined.                                                   *   FILE 739\n//*                                                                 *   FILE 739\n//*    - Control of the updating of the disk copy of any            *   FILE 739\n//*      command tables is left to an external security             *   FILE 739\n//*      product (eg. RACF).                                        *   FILE 739\n//*                                                                 *   FILE 739\n//*    - After installation, the product can be quickly             *   FILE 739\n//*      checked by following the instructions in the $IVP          *   FILE 739\n//*      member of this library.                                    *   FILE 739\n//*                                                                 *   FILE 739\n//*   Use                                                           *   FILE 739\n//*   ---                                                           *   FILE 739\n//*    It is invoked by 'TSO %ISPFCMDS' or better yet -             *   FILE 739\n//*    create a command like the following:                         *   FILE 739\n//*                                                                 *   FILE 739\n//*      Verb  . . . : CMDS                                         *   FILE 739\n//*      Trunc . . . : 0                                            *   FILE 739\n//*      Action  . . : SELECT CMD(%ISPFCMDS &ZPARM) SCRNAME(CMDS)   *   FILE 739\n//*      Description : 'ISPF Commands' tool                         *   FILE 739\n//*                                                                 *   FILE 739\n//*    If ISPFCMDS is compiled use:                                 *   FILE 739\n//*  Action : SELECT CMD(ISPFCMDS &ZPARM) SCRNAME(CMDS) LANG(CREX)  *   FILE 739\n//*                                                                 *   FILE 739\n//*    - It will work with future versions of ISPF by               *   FILE 739\n//*      assuming that the names of any tables which are            *   FILE 739\n//*      defined but not active, can be found in an ISPF            *   FILE 739\n//*      configuration module with the same name and field          *   FILE 739\n//*      offsets as for ISPF for z/OS 1.7 (version 5.7).            *   FILE 739\n//*      That assumption will probably be true for at least         *   FILE 739\n//*      the next few ISPF releases.                                *   FILE 739\n//*                                                                 *   FILE 739\n//*   Support                                                       *   FILE 739\n//*   -------                                                       *   FILE 739\n//*    The author, Ron Brown, can be contacted at:                  *   FILE 739\n//*    Ron_Brown@hotmail.com                                        *   FILE 739\n//*                                                                 *   FILE 739\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMDC": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x003\\x01\\x00\\x13?\\x01\\x07\\x02_\\x18\\x05\\x00\\x82\\x00L\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "2000-05-12T00:00:00", "modifydate": "2007-01-25T18:05:33", "lines": 130, "newlines": 76, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRSNAB,ISR)\n/*-------------------------- ISPFCMDC --------------------------------*/\n/*  Panel for user to specify Copy parameters                         */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_)\n $ TYPE(TEXT)  INTENS(LOW)  COLOR(GREEN)\n @ TYPE(INPUT) INTENS(HIGH) COLOR(TURQ)  PADC(_)\n \u00f3 TYPE(INPUT) INTENS(HIGH) COLOR(TURQ)\n \u00a2 TYPE(CHAR) COLOR(GREEN)\n \\ TYPE(CHAR) COLOR(WHITE)\n \u00a7 AREA(DYNAMIC)\n)BODY WINDOW(58,13)\n+Command ==>_DUMMY                                       $\n+                                                        $\n$                                                        $\n$   Press%ENTER$to COPY the selected commands to target  $\n$   table..:\u00f3TABNAME +\n$\n+   Where in target table         Commands with same name$\n$     @Z$ALPHABETICALLY             @Z$NOREPLACE\n$     @Z$AT START                   @Z$REPLACE\n$     @Z$AT END                     @Z$DUPLICATES\n$                                                        $\n$   ........ or \u00a7TXTC4,SHDC4             \u00a7               $\n$                                                        $\n)INIT\n .ZVARS = '(WHA,DUPN,WHS,DUPR,WHE,DUPD)'\n .CURSOR = TABNAME\n &DUMMY = &Z\n IF (&TABNAME = &Z) &TABNAME = '----CMDS'\n IF (&WHA = &Z & &WHS = &Z & &WHE = &Z)    &WHA = '/'\n IF (&DUPN = &Z & &DUPR = &Z & &DUPD = &Z) &DUPN = '/'\n &ZWINTTL = 'Copy Commands'    /* heading for Pop-Up window */\n\n VGET ZKLUSE PROFILE\n &KLUSE = &ZKLUSE\n IF (&ZKLUSE = N)                      /* user has KEYLIST OFF */\n     &ZKLUSE = Y                       /* turn it ON           */\n     VPUT ZKLUSE PROFILE\n\n IF (VER(&EN,LEN,EQ,2)) &ES = '\\\\'\n IF (VER(&EN,LEN,EQ,3)) &ES = '\\\\\\'\n IF (&EN \u00ac= &Z & &CA \u00ac= &Z)\n     &TXTC4 = 'press &EN/&CA to CANCEL'\n     &SHDC4 = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2&ES\u00a2\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n IF (&EN \u00ac= &Z & &CA = &Z)\n     &TXTC4 = 'press &EN to CANCEL'\n     &SHDC4 = '\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n IF (&EN = &Z & &CA \u00ac= &Z)\n     &TXTC4 = 'press &CA to CANCEL'\n     &SHDC4 = '\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n IF (&EN = &Z & &CA = &Z)\n     &TXTC4 = 'enter END or CAN to CANCEL'\n     &SHDC4 = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\u00a2\u00a2\u00a2\u00a2\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n .HELP = ISPFCMHK\n)REINIT\n REFRESH(*)\n VGET ZKLUSE PROFILE\n &KLUSE = &ZKLUSE\n IF (&ZKLUSE = N)                      /* user has KEYLIST OFF */\n     &ZKLUSE = Y                       /* turn it ON           */\n     VPUT ZKLUSE PROFILE\n)PROC\n IF (&DUMMY = CAN,CANCEL,EXIT)\n     .RESP = END\n IF (.RESP = ENTER)\n     &ZERRSM = ''\n     &ZERRALRM = 'YES'\n     &ZERRHM = '*'\n     /*--------------------------------*/\n     /* validate the target table name */\n     /*--------------------------------*/\n     &TN1 = TRUNC(&TABNAME,1)\n     VER(&TN1,NB,ALPHA)            /* 1st char must be alphabetic */\n     &TN4 = .TRAIL\n     &TN2 = &Z                       /* get the middle characters */\n     IF (VER(&TN4,LEN,EQ,7))\n         &TN2 = TRUNC(&TN4,3)\n     IF (VER(&TN4,LEN,EQ,6))\n         &TN2 = TRUNC(&TN4,2)\n     IF (VER(&TN4,LEN,EQ,5))\n         &TN2 = TRUNC(&TN4,1)\n     VER(&TN2,INCLUDE,ALPHAB,NUM)      /* check middle characters */\n     &TN3 = .TRAIL\n     &ZERRLM = 'Target table name must end with ''CMDS'' '\n     VER(&TN3,NB,LIST,CMDS,MSG=ISRZ002)\n     /*-------------------------------------------*/\n     /* validate the action and location selected */\n     /*-------------------------------------------*/\n     IF (&WHS  \u00ac= &Z)\n         &WHS  = '/'\n     IF (&WHA  \u00ac= &Z)\n         &WHA  = '/'\n     IF (&WHE  \u00ac= &Z)\n         &WHE  = '/'\n     IF (&DUPR \u00ac= &Z)\n         &DUPR = '/'\n     IF (&DUPN \u00ac= &Z)\n         &DUPN = '/'\n     IF (&DUPD \u00ac= &Z)\n         &DUPD = '/'\n   IF (.MSG = &Z)                       /* no error message yet */\n       &WHVALS = '&WHS.&WHA.&WHE'\n       IF (&WHVALS \u00ac= '/')\n           &ZERRLM = 'Select (only) one location for ''Where in target table'''\n           .CURSOR = WHA\n           .MSG=ISRZ002\n   IF (.MSG = &Z)                       /* no error message yet */\n       &DUVALS = '&DUPR.&DUPN.&DUPD'\n       IF (&DUVALS \u00ac= '/')\n           &ZERRLM = 'Select (only) one action for ''Commands with same name'''\n           IF (&WHA = '/') .CURSOR = DUPN\n           ELSE            .CURSOR = DUPD\n           .MSG=ISRZ002\n   IF (.MSG = &Z)                       /* no error message yet */\n       IF (&WHA = &Z & &DUPD = &Z)\n           IF (&WHS = '/') &WH = 'AT START'\n           IF (&WHE = '/') &WH = 'AT END'\n           &DUPN = &Z\n           &DUPR = &Z\n           &ZERRLM = 'For copy &WH of table you must allow DUPLICATES'\n           .CURSOR = DUPD\n           .MSG=ISRZ002\n\n IF (.RESP = END)\n     IF (&KLUSE = N)                   /* user had KEYLIST OFF */\n         &ZKLUSE = N                   /* turn it OFF again    */\n         VPUT ZKLUSE PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMDD": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00Q\\x01\\x06\\x02\\x7f\\x01\\x07\\x02_\\x18\\x05\\x00\\xb5\\x00\\x82\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2006-01-27T00:00:00", "modifydate": "2007-01-25T18:05:51", "lines": 181, "newlines": 130, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRSNAB,ISR)\n/*-------------------------- ISPFCMDD --------------------------------*/\n/*  Panel for user to select User or Site Command table               */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_)\n $ TYPE(TEXT)  INTENS(LOW)  COLOR(GREEN)\n @ TYPE(INPUT) INTENS(HIGH) COLOR(TURQ)  PADC(_)\n \u00f3 TYPE(INPUT) INTENS(HIGH) COLOR(TURQ)\n ~ TYPE(OUTPUT) INTENS(HIGH) COLOR(TURQ)\n \u00a2 TYPE(CHAR) COLOR(GREEN)\n \\ TYPE(CHAR) COLOR(WHITE)\n \u00a7 AREA(DYNAMIC)\n)BODY WINDOW(58,13)\n+Command ==>_DUMMY                                       $\n+                                                        $\n$                                                        $\n$   Select one~Z   $Command table                        $\n$\n+     Table         Comment                              $\n$  @Z~STB1$    &CTB1\n$  @Z~STB2$    &CTB2\n$  @Z~STB3$    &CTB3\n$                                                        $\n$   ........ or \u00a7TXTC4,SHDC4             \u00a7               $\n$                                                        $\n)INIT\n .ZVARS = '(SAVTAB,ST1,ST2,ST3)'\n &DUMMY = &Z\n &ZWINTTL = '&SELDDACT Command Table'    /* heading for Pop-Up window */\n\n &ST1 = &Z\n &ST2 = &Z\n &ST3 = &Z\n IF (&SAVTAB = USER)\n     &STB1 = &USERPREF\n     IF (&USERPREF = &Z)\n         .ATTR(ST1) = 'TYPE(OUTPUT) PADC(NULLS)'\n         &CTB1 = ''\n     ELSE  /* &USERPREF \u00ac= &Z */\n         IF (&ZUCTPREF = &Z AND &SELDDACT = 'Save')\n             .ATTR(ST1) = 'TYPE(OUTPUT) PADC(NULLS)'\n             &CTB1 = ''\n         IF (&ZUCTPREF \u00ac= &Z AND &SELDDACT = 'Save')\n             &CTB1 = '&USERPREF.CMDS table'\n         IF (&ZUCTPREF = &Z AND &SELDDACT = 'Create')\n             &CTB1 = '&USERPREF.CMDS table is defined but not active'\n         IF (&ZUCTPREF \u00ac= &Z AND &SELDDACT = 'Create')\n             &CTB1 = 'active &USERPREF.CMDS table would be lost'\n\n     &STB2 = &USR2PREF\n     IF (&USR2PREF = &Z)\n         .ATTR(ST2) = 'TYPE(OUTPUT) PADC(NULLS)'\n         &CTB2 = ''\n     ELSE  /* &USR2PREF \u00ac= &Z */\n         IF (&ZUCTPRE2 = &Z AND &SELDDACT = 'Save')\n             .ATTR(ST2) = 'TYPE(OUTPUT) PADC(NULLS)'\n             &CTB2 = ''\n         IF (&ZUCTPRE2 \u00ac= &Z AND &SELDDACT = 'Save')\n             &CTB2 = '&USR2PREF.CMDS table'\n         IF (&ZUCTPRE2 = &Z AND &SELDDACT = 'Create')\n             &CTB2 = '&USR2PREF.CMDS table is defined but not active'\n         IF (&ZUCTPRE2 \u00ac= &Z AND &SELDDACT = 'Create')\n             &CTB2 = 'active &USR2PREF.CMDS table would be lost'\n\n     &STB3 = &USR3PREF\n     IF (&USR3PREF = &Z)\n         .ATTR(ST3) = 'TYPE(OUTPUT) PADC(NULLS)'\n         &CTB3 = ''\n     ELSE  /* &USR3PREF \u00ac= &Z */\n         IF (&ZUCTPRE3 = &Z AND &SELDDACT = 'Save')\n             .ATTR(ST3) = 'TYPE(OUTPUT) PADC(NULLS)'\n             &CTB3 = ''\n         IF (&ZUCTPRE3 \u00ac= &Z AND &SELDDACT = 'Save')\n             &CTB3 = '&USR3PREF.CMDS table'\n         IF (&ZUCTPRE3 = &Z AND &SELDDACT = 'Create')\n             &CTB3 = '&USR3PREF.CMDS table is defined but not active'\n         IF (&ZUCTPRE3 \u00ac= &Z AND &SELDDACT = 'Create')\n             &CTB3 = 'active &USR3PREF.CMDS table would be lost'\n\n IF (&SAVTAB = SITE)\n     &STB1 = &SITEPREF\n     IF (&SITEPREF = &Z)\n         .ATTR(ST1) = 'TYPE(OUTPUT) PADC(NULLS)'\n         &CTB1 = ''\n     ELSE  /* &SITEPREF \u00ac= &Z */\n         IF (&ZSCTPREF = &Z AND &SELDDACT = 'Save')\n             .ATTR(ST1) = 'TYPE(OUTPUT) PADC(NULLS)'\n             &CTB1 = ''\n         IF (&ZSCTPREF \u00ac= &Z AND &SELDDACT = 'Save')\n             &CTB1 = '&SITEPREF.CMDS table'\n         IF (&ZSCTPREF = &Z AND &SELDDACT = 'Create')\n             &CTB1 = '&SITEPREF.CMDS table is defined but not active'\n         IF (&ZSCTPREF \u00ac= &Z AND &SELDDACT = 'Create')\n             &CTB1 = 'active &SITEPREF.CMDS table would be lost'\n\n     &STB2 = &SIT2PREF\n     IF (&SIT2PREF = &Z)\n         .ATTR(ST2) = 'TYPE(OUTPUT) PADC(NULLS)'\n         &CTB2 = ''\n     ELSE  /* &SIT2PREF \u00ac= &Z */\n         IF (&ZSCTPRE2 = &Z AND &SELDDACT = 'Save')\n             .ATTR(ST2) = 'TYPE(OUTPUT) PADC(NULLS)'\n             &CTB2 = ''\n         IF (&ZSCTPRE2 \u00ac= &Z AND &SELDDACT = 'Save')\n             &CTB2 = '&SIT2PREF.CMDS table'\n         IF (&ZSCTPRE2 = &Z AND &SELDDACT = 'Create')\n             &CTB2 = '&SIT2PREF.CMDS table is defined but not active'\n         IF (&ZSCTPRE2 \u00ac= &Z AND &SELDDACT = 'Create')\n             &CTB2 = 'active &SIT2PREF.CMDS table would be lost'\n\n     &STB3 = &SIT3PREF\n     IF (&SIT3PREF = &Z)\n         .ATTR(ST3) = 'TYPE(OUTPUT) PADC(NULLS)'\n         &CTB3 = ''\n     ELSE  /* &SIT3PREF \u00ac= &Z */\n         IF (&ZSCTPRE3 = &Z AND &SELDDACT = 'Save')\n             .ATTR(ST3) = 'TYPE(OUTPUT) PADC(NULLS)'\n             &CTB3 = ''\n         IF (&ZSCTPRE3 \u00ac= &Z AND &SELDDACT = 'Save')\n             &CTB3 = '&SIT3PREF.CMDS table'\n         IF (&ZSCTPRE3 = &Z AND &SELDDACT = 'Create')\n             &CTB3 = '&SIT3PREF.CMDS table is defined but not active'\n         IF (&ZSCTPRE3 \u00ac= &Z AND &SELDDACT = 'Create')\n             &CTB3 = 'active &SIT3PRE3.CMDS table would be lost'\n\n VGET ZKLUSE PROFILE\n &KLUSE = &ZKLUSE\n IF (&ZKLUSE = N)                      /* user has KEYLIST OFF */\n     &ZKLUSE = Y                       /* turn it ON           */\n     VPUT ZKLUSE PROFILE\n\n IF (VER(&EN,LEN,EQ,2)) &ES = '\\\\'\n IF (VER(&EN,LEN,EQ,3)) &ES = '\\\\\\'\n IF (&EN \u00ac= &Z & &CA \u00ac= &Z)\n     &TXTC4 = 'press &EN/&CA to CANCEL'\n     &SHDC4 = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2&ES\u00a2\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n IF (&EN \u00ac= &Z & &CA = &Z)\n     &TXTC4 = 'press &EN to CANCEL'\n     &SHDC4 = '\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n IF (&EN = &Z & &CA \u00ac= &Z)\n     &TXTC4 = 'press &CA to CANCEL'\n     &SHDC4 = '\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n IF (&EN = &Z & &CA = &Z)\n     &TXTC4 = 'enter END or CAN to CANCEL'\n     &SHDC4 = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\u00a2\u00a2\u00a2\u00a2\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n\n .HELP = ISPFCMHC              /* ISPF Command Table Configuration */\n)REINIT\n REFRESH(*)\n VGET ZKLUSE PROFILE\n &KLUSE = &ZKLUSE\n IF (&ZKLUSE = N)                      /* user has KEYLIST OFF */\n     &ZKLUSE = Y                       /* turn it ON           */\n     VPUT ZKLUSE PROFILE\n)PROC\n IF (&DUMMY = CAN,CANCEL,EXIT)\n     .RESP = END\n IF (.RESP = ENTER)\n     &ZERRSM = ''\n     &ZERRALRM = 'YES'\n     &ZERRHM = '*'\n     /*------------------------*/\n     /* validate the selection */\n     /*------------------------*/\n     &STBSELS = '&ST1.&ST2.&ST3'\n     IF (VER(&STBSELS,LEN,EQ,1))       /* exactly 1 table selected */\n         IF (&ST1 \u00ac= &Z) &TABNAME = '&STB1.CMDS'\n         IF (&ST2 \u00ac= &Z) &TABNAME = '&STB2.CMDS'\n         IF (&ST3 \u00ac= &Z) &TABNAME = '&STB3.CMDS'\n     ELSE\n         IF (&ST1 \u00ac= &Z) &ST1 = '/'\n         IF (&ST2 \u00ac= &Z) &ST2 = '/'\n         IF (&ST3 \u00ac= &Z) &ST3 = '/'\n         &ZERRLM = 'Select (only) one table'\n         .MSG=ISRZ002\n\n IF (&KLUSE = N)                   /* user had KEYLIST OFF */\n     &ZKLUSE = N                   /* turn it OFF again    */\n     VPUT ZKLUSE PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMDL": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00\\x10\\x01\\x00\\x01\\x8f\\x01\\x06\\x03\\x7f\\x13B\\x00m\\x00M\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "2000-01-18T00:00:00", "modifydate": "2006-02-06T13:42:10", "lines": 109, "newlines": 77, "modlines": 0, "user": "ZARBRO0"}, "text": "//jobname  JOB 'ISPFCMDL',MSGCLASS=?,CLASS=?,NOTIFY=&SYSUID\n//*\n//ASM      EXEC PGM=ASMA90,\n//         PARM='NODECK,LIST,OBJECT'\n//SYSIN    DD  *\n         TITLE 'GET ADDRESS OF PROGRAM LOAD POINT'\n***********************************************************************\n* ISPFCMDL                                                            *\n* --------                                                            *\n* External REXX function to return the address of a loaded module.    *\n*                                                                     *\n*   Written by : Ron Brown - January 2000                             *\n***********************************************************************\nLOADPNT  RMODE ANY\nLOADPNT  AMODE 31\nLOADPNT  CSECT\n         USING LOADPNT,R15               SET UP ADDRESSABILITY\n         SAVE  (14,12)\n         LR    R12,R15\n         DROP  R15\n         USING LOADPNT,R12\n         B     START                     GO AROUND EYECATCHER\n*\nPROGNAME DC    CL8'ISPFCMDL'             EYECATCHER\n         DC    CL8' VERSION'\nVERSION  DC    CL6' 01.00'\nDATE_ASM DC    CL11' &SYSDATE'           DATE ASSEMBLED\nTIME_ASM DC    CL8' &SYSTIME'            TIME ASSEMBLED\n*\nSTART    DS    0H                        REXX STUFF:\n         USING EFPL,R1                        MAP EVAL PARM LIST\n         L     R2,EFPLEVAL                    LOAD EVAL POINTER\n         L     R11,0(R2)                      ADRESS OF EVAL BLOCK\n         USING EVALBLOCK,R11                  MAP EVAL BLOCK\n         L     R5,EFPLARG                     LOAD ARG LST PNTR\n         USING ARGTABLE_ENTRY,R5              MAP THE ENTRY\n*\n*----------------------------------------------------------------------\n*        GET PROGRAM NAME FROM PARM\n*----------------------------------------------------------------------\n         LM    R2,R3,ARGTABLE_ARGSTRING_PTR   LOAD ARG ADDR/LNGTH\n         C     R3,=F'8'                       > 8?\n         BH    BADPARM                        YES, GOTO BADPARM\n*        MVC   PGMNAME,0(R2)                  (only valid if length=8)\n         LA    R8,PGMNAME\n         LR    R9,R3\n         MVCL  R8,R2                          SET PGMNAME\n*\n         LA    R5,ARGTABLE_NEXT-ARGTABLE_ENTRY(R5) GET NEXT PARM\n*                                                ADDR/LENGTH\n         CLC   ARGTABLE_ARGSTRING_LENGTH,=8X'FF'   MORE PARMS?\n         BE    CSVQUERY                        NO, INVOKE QUERY\n*                                                ADDR/LENGTH\nBADPARM  LA    R15,8                           RC=8\n         B     EXIT\n*\n*----------------------------------------------------------------------\n*        INVOKE CSVQUERY TO GET THE ADDRESS\n*----------------------------------------------------------------------\nCSVQUERY DS    0H\n         CSVQUERY INEPNAME=PGMNAME,                                    X\n               OUTEPA=PGMADDR,                                         X\n               MF=S\n*\n*----------------------------------------------------------------------\n*        RETURN THE PROGRAM ADDRESS TO REXX EXEC\n*----------------------------------------------------------------------\n         NI    PGMADDR,X'7F'                  FIRST BIT SHOULD BE ZERO\n         MVC   EVALBLOCK_EVLEN,=F'4'          VALUE LENGTH\n         MVC   EVALBLOCK_EVDATA(4),PGMADDR    VALUE DATA\n*\n         LA    R15,0                     RC=0\nEXIT     DS    0H\n         RETURN (14,12),RC=(15)          RETURN TO CALLER\n*\n***********************************************************************\nCONSTNTS DS    0F\n*\nPGMNAME  DC CL8'        '                PROGRAM NAME\nPGMADDR  DS 1F\n*\n         YREGS\n         IRXEFPL\n         IRXEVALB\n         IRXARGTB\n         END   LOADPNT\n/*\n//****************************************************************\n//SYSLIN   DD  DSN=&&TEMPOBJ,DISP=(NEW,PASS),UNIT=VIO,\n//             SPACE=(TRK,(2,2),RLSE),DCB=(RECFM=FB,LRECL=80)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,5))\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//****************************************************************\n//*   LINK EDIT\n//****************************************************************\n//LINK    EXEC PGM=IEWL,COND=(4,LT,ASM),REGION=6M,\n// PARM='XREF,LIST,LET'\n//SYSLMOD  DD  DSN=your.ISPF.Load.library,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.LINKLIB,DISP=SHR\n//SYSLIN   DD  DSN=*.ASM.SYSLIN,DISP=(SHR,DELETE)\n//         DD  *\n NAME ISPFCMDL(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ISPFCMDO": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01)\\x00I\\x01\\x00\\x16\\x0f\\x01\\x06\\x03\\x7f\\x13C\\x01\\x84\\x00b\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.41", "flags": 0, "createdate": "2000-06-08T00:00:00", "modifydate": "2006-02-06T13:43:49", "lines": 388, "newlines": 98, "modlines": 0, "user": "ZARBRO0"}, "text": "//jobname  JOB 'ISPFCMDO',MSGCLASS=?,CLASS=?,NOTIFY=&SYSUID\n//*\n//ASM      EXEC PGM=ASMA90,\n//         PARM='NODECK,LIST,OBJECT'\n//SYSIN    DD  *\n         TITLE 'MARK COMMAND OVERRIDES FOR ISPF COMMANDS TOOL'\n*-----------------------*  FUNCTION  *--------------------------------*\n* ISPFCMDO                                                            *\n* --------                                                            *\n* To mark all overrides in the \"ISPF Commands\" command list table.    *\n*                                                                     *\n*---------------------------------------------------------------------*\n*   Written by : Ron Brown - June 2000                                *\n*   Updated by : Ron Brown - Jan  2006 (length CMDTORD: CL1 -> CL2)   *\n*---------------------------------------------------------------------*\n*                                                                     *\n*  RETURN CODE : 0  = ALL OK                                          *\n*                                                                     *\n***********************************************************************\nISPFCMDO RMODE ANY\nISPFCMDO AMODE 31\nISPFCMDO CSECT\n         SAVE  (14,12)                   SAVE CALLERS REGISTERS\n         BALR  R12,0                     SET BASE REGISTER\n         USING *,R12                     BASE REGISTER ESTABLISHED\n         LR    R5,R1                     SAVE REGISTER 1\n         LA    R15,SAVEAREA              R15 = ADDRESS OF SAVEAREA\n         ST    R13,4(R15)                CHAIN BACKWARDS\n         ST    R15,8(R13)                CHAIN FORWARDS\n         LR    R13,R15\n         B     START                     GO AROUND EYECATCHER\n*\nPROGNAME DC    CL8'ISPFCMDO'             EYECATCHER\n         DC    CL8' VERSION'\nVERSION  DC    CL6' 01.01'\nDATE_ASM DC    CL11' &SYSDATE'           DATE ASSEMBLED\nTIME_ASM DC    CL8' &SYSTIME'            TIME ASSEMBLED\n*\n*---------------------------------------------------------------------*\n*        PROCESS PARM - GET THE TABLE NAME\n*---------------------------------------------------------------------*\nSTART    DS    0H\n         LR    R1,R5                     RESTORE REGISTER 1\n         LTR   R1,R1                     ANY PARMS ?\n         BZ    NOPARM                    NO, EXIT RC=1\n         ICM   R1,B'1111',0(R1)          -> PARMS\n         BZ    MTPARM                    IF EMPTY PARM, EXIT RC=2\n         CLC   0(2,R1),=AL2(L'TABLNAME)  GOOD LENGTH ?\n         BH    BADLEN                     NO, EXIT RC=3\n\n         LA    R2,2(R1)                  -> PARM\n         LA    R3,L'TABLNAME             R3 = LENGTH OF PARM\n         LA    R8,TABLNAME\n         LR    R9,R3\n         MVCL  R8,R2                     SET TABLNAME\n*\n*---------------------------------------------------------------------*\n*        DEFINE ISPF VARIABLES\n*---------------------------------------------------------------------*\n         CALL  ISPLINK,(VDEFINE,NCMDTAB,CMDTAB,CHAR,L4),VL\n         CALL  ISPLINK,(VDEFINE,NCMDTORD,CMDTORD,CHAR,L2),VL\n         CALL  ISPLINK,(VDEFINE,NCMDOVER,CMDOVER,CHAR,L1),VL\n         CALL  ISPLINK,(VDEFINE,NCMDSEL,CMDSEL,CHAR,L1),VL\n         CALL  ISPLINK,(VDEFINE,NCMDALIAS,CMDALIAS,CHAR,L4),VL\n         CALL  ISPLINK,(VDEFINE,NCMDNUM,CMDNUM,CHAR,L4),VL\n         CALL  ISPLINK,(VDEFINE,NCMDFND,CMDFND,CHAR,L35),VL\n         CALL  ISPLINK,(VDEFINE,NCMDTRUNC,CMDTRUNC,CHAR,L8),VL\n         CALL  ISPLINK,(VDEFINE,NCMDMINL,CMDMINL,CHAR,L1),VL\n         CALL  ISPLINK,(VDEFINE,NZCTVERB,ZCTVERB,CHAR,L8),VL\n         CALL  ISPLINK,(VDEFINE,NZCTTRUNC,ZCTTRUNC,CHAR,L1),VL\n         CALL  ISPLINK,(VDEFINE,NZCTDESC,ZCTDESC,CHAR,L80),VL\n         CALL  ISPLINK,(VDEFINE,NZCTACT,ZCTACT,CHAR,L240),VL\n*\n*---------------------------------------------------------------------*\n*        ENSURE ALL CMDOVER COLUMNS ARE BLANK\n*---------------------------------------------------------------------*\n         CALL  ISPLINK,(TBTOP,TABLNAME),VL\n*        MVI   CMDOVER,C' '\n*\nBLNKLOOP DS    0H\n         CALL  ISPLINK,(TBSCAN,TABLNAME,ARGLIST1,,,NEXT,,,CNDLIST1),VL\n         LTR   R15,R15\n         BH    PROCTABL                 ALL BLANK; NOW PROCESS TABLE\n         MVI   CMDOVER,C' '\n         CALL  ISPLINK,(TBPUT,TABLNAME,,ORDER),VL\n         B     BLNKLOOP                 THAT WAS FUN, LET'S DO IT AGAIN\n*\n*---------------------------------------------------------------------*\n*        SCAN TABLE FOR EVERY ROW - UPDATE CMDOVER WHEN NECESSARY\n*---------------------------------------------------------------------*\nPROCTABL DS    0H\n         CALL  ISPLINK,(CONTROL,ERRORS,CANCEL),VL\n         CALL  ISPLINK,(TBTOP,TABLNAME),VL\n*---------------------------------------------------------------------*\n*        SKIP THROUGH EVERY ROW OF THE TABLE\n*---------------------------------------------------------------------*\nSKIPLOOP DS    0H\n         CALL  ISPLINK,(TBSKIP,TABLNAME),VL\n         LTR   R15,R15\n         BH    NORMEND                  NO MORE ROWS; FINISHED\n*\n         CLI   CMDOVER,C'-'\n         BE    SKIPLOOP                 IT'S OVERRIDDEN; TRY NEXT ROW\n         CLC   ZCTACT,BLANKS\n         BE    SKIPLOOP                 NO ACTION; TRY NEXT ROW\n         CLI   ZCTVERB,C' '\n         BE    SKIPLOOP                 1ST CHAR IS BLANK; TRY NEXT ROW\n         CLI   ZCTVERB+1,C' '\n         BE    SKIPLOOP                 2ND CHAR IS BLANK; TRY NEXT ROW\n         CLC   ZCTVERB,EMPTVERB\n         BNE   SCANPREP                 IT'S NOT A DUMMY 'EMPTY' ROW\n         CLC   ZCTDESC,EMPTDESC\n         BE    SKIPLOOP                 IT'S OVERRIDDEN; TRY NEXT ROW\n*\nSCANPREP DS    0H\n         MVI   OVERRIDE,C' '\n         MVC   THISNUM,CMDNUM\n         MVC   THISLENG,CMDMINL\n         MVC   THISVERB,ZCTVERB\n         MVC   THISVGEN,ZCTVERB         = ZCTVERB ARGUMENT FOR TBSCAN\n         CLI   CMDMINL,C'8'\n         BE    SCANROWS\nLENG7    CLI   CMDMINL,C'7'\n         BNE   LENG6\n         MVI   THISVGEN+7,C'*'\n         B     SCANROWS\nLENG6    CLI   CMDMINL,C'6'\n         BNE   LENG5\n         MVC   THISVGEN+6(2),=C'* '          ASTERIX\n         B     SCANROWS\nLENG5    CLI   CMDMINL,C'5'\n         BNE   LENG4\n         MVC   THISVGEN+5(3),=C'*  '         ASTERIX\n         B     SCANROWS\nLENG4    CLI   CMDMINL,C'4'\n         BNE   LENG3\n         MVC   THISVGEN+4(4),=C'*   '        ASTERIX\n         B     SCANROWS\nLENG3    CLI   CMDMINL,C'3'\n         BNE   LENG2\n         MVC   THISVGEN+3(5),=C'*    '       ASTERIX\n         B     SCANROWS\nLENG2    CLI   CMDMINL,C'2'\n         BNE   SKIPLOOP                INVALID CMDMINL; TRY NEXT ROW\n         MVC   THISVGEN+2(6),=C'*     '      ASTERIX\n         B     SCANROWS\n*---------------------------------------------------------------------*\n*        SCAN THROUGH THE FOLLOWING ROWS LOOKING FOR A MATCHING VERB\n*---------------------------------------------------------------------*\nSCANROWS DS    0H\n         MVC   ZCTVERB,THISVGEN\n         MVC   ZCTACT,BLANKS\n         CALL  ISPLINK,(TBSCAN,TABLNAME,ARGLIST2,,,NEXT,,,CNDLIST2),VL\n         LTR   R15,R15\n         BH    UPCMDOVR                END OF TABLE; UPDATE CMDOVER\n*---------------------------------------------------------------------*\n*        UPDATE CMDOVER FOR THE OVERRIDDEN COMMAND IN THE TABLE\n*---------------------------------------------------------------------*\n         CLI   ZCTVERB+2,C' '\n         BNE   SCLEN3\n         CLC   ZCTVERB(2),THISVERB\n         BE    CHKMINL\n         B     NOSUBSET\nSCLEN3   CLI   ZCTVERB+3,C' '\n         BNE   SCLEN4\n         CLC   ZCTVERB(3),THISVERB\n         BE    CHKMINL\n         B     NOSUBSET\nSCLEN4   CLI   ZCTVERB+4,C' '\n         BNE   SCLEN5\n         CLC   ZCTVERB(4),THISVERB\n         BE    CHKMINL\n         B     NOSUBSET\nSCLEN5   CLI   ZCTVERB+5,C' '\n         BNE   SCLEN6\n         CLC   ZCTVERB(5),THISVERB\n         BE    CHKMINL\n         B     NOSUBSET\nSCLEN6   CLI   ZCTVERB+6,C' '\n         BNE   SCLEN7\n         CLC   ZCTVERB(6),THISVERB\n         BE    CHKMINL\n         B     NOSUBSET\nSCLEN7   CLI   ZCTVERB+7,C' '\n         BNE   SCLEN8\n         CLC   ZCTVERB(7),THISVERB\n         BE    CHKMINL\n         B     NOSUBSET\nSCLEN8   CLC   ZCTVERB,THISVERB\n         BNE   NOSUBSET\n*\nCHKMINL  DS    0H\n         CLC   CMDMINL,THISLENG\n         BL    PARTOVER               CMDMINL < THISLENG; PART OVERRIDE\n         MVI   OVERRIDE,C'*'\n         MVI   CMDOVER,C'-'\n         B     PUTOVER                  NOW UPDATE THE ROW\n*\nNOSUBSET DS    0H\n         CLI   CMDMINL,C'2'\n         BNE   SCLNG3\n         CLC   ZCTVERB(2),THISVERB\n         BE    PARTOVER\n         B     MINL\nSCLNG3   CLI   CMDMINL,C'3'\n         BNE   SCLNG4\n         CLC   ZCTVERB(3),THISVERB\n         BE    PARTOVER\n         B     MINL\nSCLNG4   CLI   CMDMINL,C'4'\n         BNE   SCLNG5\n         CLC   ZCTVERB(4),THISVERB\n         BE    PARTOVER\n         B     MINL\nSCLNG5   CLI   CMDMINL,C'5'\n         BNE   SCLNG6\n         CLC   ZCTVERB(5),THISVERB\n         BE    PARTOVER\n         B     MINL\nSCLNG6   CLI   CMDMINL,C'6'\n         BNE   SCLNG7\n         CLC   ZCTVERB(6),THISVERB\n         BE    PARTOVER\n         B     MINL\nSCLNG7   CLI   CMDMINL,C'7'\n         BNE   SCANROWS\n         CLC   ZCTVERB(7),THISVERB\n         BE    PARTOVER\n*\nMINL     DS    0H\n         CLC   CMDMINL,THISLENG\n         BH    SCANROWS                CMDMINL > THISLENG; NEW SCAN\n*\nPARTOVER DS    0H                      PARTIALLY OVERRIDDEN COMMAND\n         CLI   OVERRIDE,C'*'\n         BE    PARTO2\n         MVI   OVERRIDE,C'+'\nPARTO2   CLI   CMDOVER,C'-'\n         BE    PUTOVER\n         MVI   CMDOVER,C'.'\nPUTOVER  DS    0H\n         CALL  ISPLINK,(TBPUT,TABLNAME,,ORDER),VL        UPDATE THE ROW\n         B     SCANROWS                 SCAN FOR NEXT MATCHING ROW\n*\n*\n*---------------------------------------------------------------------*\n*        UPDATE CMDOVER FOR THIS OVERRIDING CMD (IF OVERRIDE = * OR +)\n*---------------------------------------------------------------------*\nUPCMDOVR DS    0H\n         MVC   CMDNUM,THISNUM          RESTORE CMDNUM\n         CALL  ISPLINK,(TBSCAN,TABLNAME,ARGLIST3,,,NEXT),VL  GET ROW\n         CLI   CMDOVER,C'.'\n         BE    SKIPLOOP                 PROCESS NEXT ROW\n         CLI   CMDOVER,C'-'\n         BE    SKIPLOOP                 PROCESS NEXT ROW\n         CLI   OVERRIDE,C'.'\n         BE    SKIPLOOP                 PROCESS NEXT ROW\n         CLI   OVERRIDE,C'-'\n         BE    SKIPLOOP                 PROCESS NEXT ROW\n         CLI   OVERRIDE,C' '\n         BE    SKIPLOOP                 PROCESS NEXT ROW\n         MVC   CMDOVER,OVERRIDE\n         CALL  ISPLINK,(TBPUT,TABLNAME,,ORDER),VL        UPDATE THE ROW\n         B     SKIPLOOP                 PROCESS NEXT ROW\n*\n*\n*---------------------------------------------------------------------*\n* SETTING RETURN CODES FOR EXIT\n*---------------------------------------------------------------------*\nNORMEND  DS    0H                        NORMAL END\n         LA    R15,0                     RETURN CODE = 0\n         B     EXIT                      RETURN TO CALLER\n*\nNOPARM   DS    0H                        NO PARM\n         LA    R15,1                     RETURN CODE = 1\n         B     EXIT                      RETURN TO CALLER\n*\nMTPARM   DS    0H                        EMPTY PARM\n         LA    R15,2                     RETURN CODE = 2\n         B     EXIT                      RETURN TO CALLER\n*\nBADLEN   DS    0H                        BAD PARM LENGTH\n         LA    R15,3                     RETURN CODE = 3\n         B     EXIT                      RETURN TO CALLER\n*\n*---------------------------------------------------------------------*\n*        THAT'S ALL FOLKS\n*---------------------------------------------------------------------*\nEXIT     DS    0H\n         L     R13,4(R13)                RESTORE ADDR OF OLD SAVEAREA\n         RETURN (14,12),RC=(15)          RETURN TO CALLER\n         EJECT\n***********************************************************************\n         LTORG\n*\nCONSTNTS DS    0D\nSAVEAREA DS    18A\nTABLNAME DS    CL8\n*\nNCMDTAB   DC   C'(CMDTAB)'      table name prefix\nNCMDTORD  DC   C'(CMDTORD)'     table order (1,2x,3x or 4x)\nNCMDOVER  DC   C'(CMDOVER)'     override chars (*,+,- or .)\nNCMDSEL   DC   C'(CMDSEL)'      mark rows with / to be selected by SCAN\nNCMDALIAS DC   C'(CMDALIAS)'    alias group number (initially blank)\nNCMDNUM   DC   C'(CMDNUM)'      command order numbers (for sorting)\nNCMDFND   DC   C'(CMDFND)'      Description/Action find string\nNCMDTRUNC DC   C'(CMDTRUNC)'    real truncation length ('-' chars)\nNCMDMINL  DC   C'(CMDMINL)'     real minimum truncation length\nNZCTVERB  DC   C'(ZCTVERB)'     VERB  (command name)\nNZCTTRUNC DC   C'(ZCTTRUNC)'    TRUNC (truncation)\nNZCTDESC  DC   C'(ZCTDESC)'     DESC  (description)\nNZCTACT   DC   C'(ZCTACT)'      ACT   (action)\nCMDTAB   DS    CL4\nCMDTORD  DS    CL2\nCMDOVER  DS    CL1\nCMDSEL   DS    CL1\nCMDALIAS DS    CL4\nCMDNUM   DS    CL4\nCMDFND   DS    CL35\nCMDTRUNC DS    CL8\nCMDMINL  DS    CL1\nZCTVERB  DS    CL8\nZCTTRUNC DS    CL1\nZCTDESC  DS    CL80\nZCTACT   DS    CL240\n*\nCONTROL  DC    CL8'CONTROL '\nERRORS   DC    CL8'ERRORS  '\nRETURN   DC    CL8'RETURN  '\nCANCEL   DC    CL8'CANCEL  '\nVDEFINE  DC    CL8'VDEFINE '\nTBTOP    DC    CL8'TBTOP   '\nTBSCAN   DC    CL8'TBSCAN  '\nTBSKIP   DC    CL8'TBSKIP  '\nTBPUT    DC    CL8'TBPUT   '\nNEXT     DC    CL8'NEXT    '\nNE       DC    CL8'NE      '\nORDER    DC    CL8'ORDER   '\nARGLIST1 DC    C'(CMDOVER)'\nCNDLIST1 DC    C'(NE)'\nARGLIST2 DC    C'(ZCTVERB,ZCTACT)'\nCNDLIST2 DC    C'(EQ,NE)'\nARGLIST3 DC    C'(CMDNUM)'\nCHAR     DC    CL4'CHAR'\nL1       DC    F'1'\nL2       DC    F'2'\nL4       DC    F'4'\nL8       DC    F'8'\nL35      DC    F'35'\nL80      DC    F'80'\nL240     DC    F'240'\n*\nEMPTVERB DC    CL8'--------'\nEMPTDESC DC    CL80'<<< no commands in this table >>>'\nOVERRIDE DS    CL1\nTHISVERB DS    CL8\nTHISVGEN DS    CL8\nTHISLENG DS    CL1\nTHISNUM  DS    CL4\nBLANKS   DC    CL240' '\n*\n         YREGS\n*\n         END   ISPFCMDO\n/*\n//****************************************************************\n//SYSLIN   DD  DSN=&&TEMPOBJ,DISP=(NEW,PASS),UNIT=VIO,\n//             SPACE=(TRK,(2,2),RLSE),DCB=(RECFM=FB,LRECL=80)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,5))\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//****************************************************************\n//*   LINK EDIT\n//****************************************************************\n//LINK    EXEC PGM=IEWL,COND=(4,LT,ASM),REGION=6M,\n// PARM='XREF,LIST,LET'\n//SYSLMOD  DD  DSN=your.ISPF.Load.library,DISP=SHR   <== CHANGE\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.LINKLIB,DISP=SHR\n//         DD  DSN=ISP.SISPLOAD,DISP=SHR\n//SYSLIN   DD  DSN=*.ASM.SYSLIN,DISP=(SHR,DELETE)\n//         DD  *\n NAME ISPFCMDO(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMDS": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01*\\x00\\x11\\x01\\x06\\x01\\x7f\\x01\\x07\\x11?\\x15I\\x0f\\xc7\\x0e\\xab\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.42", "flags": 0, "createdate": "2006-01-17T00:00:00", "modifydate": "2007-04-23T15:49:11", "lines": 4039, "newlines": 3755, "modlines": 0, "user": "ZARBRO0"}, "text": "/*%NOCOMMENT  ==============>> REXX <<================================*/\n/*                                                                    */\n/*  ISPFCMDS   : This EXEC displays the contents of the currently     */\n/*               active command tables. It also enables the user to   */\n/*               (temporarily) update all the command tables, and to  */\n/*               (permanently) save the User-, Application- or Site-  */\n/*               tables to disk.  It can also create new command      */\n/*               tables and update inactive command tables on disk.   */\n/*                                                                    */\n/*               It can be invoked from any ISPF application, and     */\n/*               should be defined in a User or Site table as:        */\n/*               Verb  . . . : CMDS                                   */\n/*               Trunc . . . : 0                                      */\n/*               Action  . . : SELECT CMD(ISPFCMDS &ZPARM) LANG(CREX) */\n/*               Description : 'ISPF Commands' tool                   */\n/*                                                                    */\n/*  Externals  : pgms   ISPFCMDI,ISPFCMDO,ISPFCMDL                    */\n/*             : panels ISPFCMDn  (where n=0-9,C,D)                   */\n/*               (help) ISPFCMHn  (n=0-9,A,C,E,G,H,K,M,N,O,S,T,U)     */\n/*--------------------------------------------------------------------*/\n/*  Written by : Ron Brown                                            */\n/*                                                                    */\n/*  Version    : 7.0 (for z/OS 1.7)        Last updated: 25 Jan 2007  */\n/*--------------------------------------------------------------------*/\n/*  Changes    : - allow use in any zscreen (1-9,A-W)                 */\n/*--------------------------------------------------------------------*/\n/*  Notes      : This code uses the following conventions             */\n/*               a) variables in lower case: only used in Rexx        */\n/*               b) variables in UPPER CASE: used by ISPF             */\n/*               c) functions in Mixed Case: built-in Rexx functions  */\n/*               d) functions in UPPER CASE: subroutines in the code  */\n/*               e) Rexx keywords in Mixed Case                       */\n/*               f) Do .... End  has the 'End' indented               */\n/*               g) \"......\" is addressed to ISPEXEC                  */\n/*               h) '......' for all other strings                    */\n/*  Please keep these conventions if you modify the code!             */\n/*====================================================================*/\n  Address ISPEXEC                         /* commands -> ISPEXEC      */\n  \"CONTROL ERRORS RETURN\"                 /* handle return codes here */\n  /*------------------------------------------------------------------*/\n  /* Where are we, and what command tables could we have?             */\n  /* (including the extra possible tables introduced in z/OS 1.5)     */\n  /*------------------------------------------------------------------*/\n  \"VGET (ZAPPLID ZUCTPREF ZSCTPREF ZSCTSRCH ZSCREEN ZPDFREL) SHARED\"\n  \"VGET (ZUCTPRE2 ZUCTPRE3 ZSCTPRE2 ZSCTPRE3) SHARED\"  /* ISPF >= 5.5 */\n\n  /*------------------------------------------------------------------*/\n  /* Rexx program compiled/linked should be started with 'LANG(CREX)' */\n  /* If ISPFCMDS pgm invoked without LANG(CREX) - reinvoke correctly  */\n  /*------------------------------------------------------------------*/\n  If ZAPPLID = 'ZAPPLID' Then Do   /* VGET no good without LANG(CREX) */\n     Parse Arg zparm\n     \"SELECT CMD(ISPFCMDS\" zparm\") SCRNAME(CMDS) LANG(CREX)\"\n     Exit\n     End\n  /*------------------------------------------------------------------*/\n  /* Create new cmds_table, then load all active commands into it     */\n  /*------------------------------------------------------------------*/\n  Do n = 1 to 8  Until rc > 0       /* create unique table names      */\n     tsuf = ZSCREEN||n              /* up to 8 suffixes per ZSCREEN   */\n     cmds_table = 'CMDSTB'||tsuf    /* table for list of commands     */\n     \"TBQUERY\" cmds_table           /* check if table already exists  */\n     End\n  If rc = 0 Then Do                 /* table CMDSTBx8 is already open */\n     ZERRLM = 'Sorry, a maximum of 8 \"ISPF Commands\" dialogs can',\n              'run simultaneously in each screen - cannot continue.'\n     ZERRSM = ''\n     ZERRALRM = 'YES .WINDOW=LRESP' /* alarm, user must press ENTER   */\n     \"SETMSG MSG(ISRZ002)\"\n     Exit                           /* EXIT (and show message)        */\n     End\n  hex_tsuf = X2C(tsuf)              /* used in ZCTDESC of pending cmds*/\n  cmdtbs_table = 'CMDTBS'||tsuf     /* table for cmd table statistics */\n\n  /*------------------------------------------------------------------*/\n  /* Process parms and create a table of all the active commands      */\n  /*------------------------------------------------------------------*/\n  Parse Arg zparm\n  Call PROCESS_PARM                 /* process invocation parm(s)     */\n\n  Call LOAD_CMDSTABL                /* load commands into cmds_table  */\n\n  /*------------------------------------------------------------------*/\n  /* Check if cmds_table was created successfully                     */\n  /*------------------------------------------------------------------*/\n  If init_rc > 0 Then Do            /* rc=12 (pgm not found)          */\n     ZERRSM = ''                    /* rc=24 (use not authorised)     */\n     ZERRLM = '** Sorry, ISPFCMDS is not able to start, RC='init_rc '**'\n     ZERRALRM = 'YES .WINDOW=LRESP' /* alarm, user must press ENTER   */\n     \"SETMSG MSG(ISRZ002)\"\n     Exit\n     End\n\n  /*------------------------------------------------------------------*/\n  /* Sort the new commands table (cmds_table)                         */\n  /*------------------------------------------------------------------*/\n  \"VGET CUR#SORT PROFILE\"             /* get last displayed sort order*/\n  If CUR#SORT = '' | CUR#SORT = 'ALIAS' Then\n     CUR#SORT = 'REAL ORDER'          /* this is the DEFAULT order    */\n  If CUR#SORT = 'REAL ORDER' Then     /* current displayed sort order */\n     CMDSORT = CUR#SORT               /* actual sort order            */\n  Else Call SORT_CMDSTABL(CUR#SORT)\n\n  /*------------------------------------------------------------------*/\n  /* Prepare for table display (table: cmds_table on panel: ISPFCMD0) */\n  /*------------------------------------------------------------------*/\n  CMDFIND = ''                       /* display ALL commands          */\n  Call SETUP_SCAN                    /* set TBSARG for panel ISPFCMD0 */\n  Call READ_CONFIG                   /* get userpref & sitepref       */\n\n  null = '00'x                        /* used in some messages        */\n  ZCMD = ''\n  SELCMD = 'RESIZE'                   /* no Pop-up window wanted      */\n  csrrow = 0\n  COPYPEND = ''                       /* no pending move/copy         */\n  CMDSACT = ''                        /* intially use brief display   */\n  MODELIN2 = 'OMIT'                   /* omit the line from )MODEL    */\n  tbdispl_rc = 0                      /* RC from TBDISPL              */\n  ONLY = ''                           /* displayed on ISPFCMD0 panel  */\n  Call SET_ONLY                       /* set the ONLY variable        */\n\n  /*------------------------------------------------------------------*/\n  /* Initial display locked while SET_OVER marks the overriding cmds  */\n  /*------------------------------------------------------------------*/\n  updated = 'Y'                       /* so SETUP_OVER will be run    */\n  ZERRSM = 'Checking Overrides'       /* msg while SETUP_OVER runs    */\n  ZERRHM = '*'                        /* .HELP to appropriate panel   */\n  ZERRALRM = 'NO'\n  \"SETMSG MSG(ISRZ002)\"\n  \"CONTROL DISPLAY LOCK\"              /* initial table display locked */\n\n  Do tdloop = 1 to 9999\n    /*----------------------------------------------------------------*/\n    /* Prepare any pending selected cmd to be actioned by ISPFCMD0    */\n    /*----------------------------------------------------------------*/\n    cmdtop = ZTDTOP                   /* save the top line number     */\n    If pendcmds > 0 & tbdispl_rc = 0 Then Do\n       Call PREPARE_PENDCMD           /* put cmd into SELCMD variable */\n       \"CONTROL NONDISPL ENTER\"       /* panel ISPFCMD0 will enter cmd*/\n       End\n    If pendcmds > 1\n       Then PENDMSG = '*** Press ENTER for pending command ***'\n       Else If COPYPEND \u00ac= ''\n          Then PENDMSG = '***  Move / Copy  pending  ***'\n          Else PENDMSG = ''\n\n    /*----------------------------------------------------------------*/\n    /* Display a list of active Commands, (panel ISPFCMD0).           */\n    /*   - this panel has a variable model line so it can show either */\n    /*    one or two lines per command depending on the user's choice */\n    /*----------------------------------------------------------------*/\n     \"TBDISPL\" cmds_table \"PANEL(ISPFCMD0)\",\n        \"AUTOSEL(YES) CSRROW(\"csrrow\")\"\n     tbdispl_rc = RC\n\n     If pendcmds > 0 Then\n        Call DELETE_PENDCMD           /* delete pending cmd from table*/\n     If pendcmds > 0 Then             /* loop thru the pending cmds   */\n        Iterate tdloop\n     If tbdispl_rc >= 8 Then          /* RC=8: END, RETURN, CAN, EXIT */\n        Leave tdloop                  /* exitting from ISPFCMDS       */\n\n     /*---------------------------------------------------------------*/\n     /* Process any line commands  (ZTDSELS = no. of selected rows)   */\n     /*---------------------------------------------------------------*/\n     If ZCMD = 'COPY' ,               /* copy rows to another table   */\n     | COPYCMDS = YES Then\n        Call COPY_ROWS\n     If ZTDSELS > 0 Then Do           /* some rows were selected      */\n        \"TBTOP\" firstab               /* prepare to store pend selects*/\n        pendcmds = 0                  /* ..added to top of first table*/\n        End\n     last_ZTDSELS = 0                 /* checked by VALIDATE_CMDSTABL */\n     Do ZTDSELS                       /* only if some rows selected.. */\n        Call GET_ROW                  /* get selected row from table  */\n        If result = 0,\n         & Pos(SEL,'SVX') = 0 Then    /* for any update selection ..  */\n           Call VALIDATE_CMDSTABL     /* .... is cmds_table valid?    */\n        If result = 0 Then Select\n          When SEL = 'I' Then                /*  Insert a new command */\n             Call INSERT_CMD\n          When SEL = 'R' Then                /*  Repeat a command     */\n             Call REPEAT_CMD\n          When SEL = 'D' Then                /*  Delete the command   */\n             Call DELETE_CMD\n          When SEL = 'U' | SEL = 'E' Then    /*  Update the command   */\n             Call UPDATE_CMD\n          When SEL = ' ' Then                /*  Updated on ISPFCMD0  */\n             If CMDSACT = '/' Then           /*  Actions displayed    */\n                Call UPDATE_CMD\n          When SEL = 'V' Then                /*  View a command       */\n             Call VIEW_CMD\n          When SEL = 'A' | SEL = 'B' Then    /*  'after' or 'before'  */\n             Call COPY_CMD\n          When SEL = 'C' | SEL = 'M' Then    /*  Copy or Move command */\n             Call COPY_CMD\n          When SEL = 'S' Then                /*  Invoke the command   */\n             Call INVOKE_CMD\n          When SEL = 'X' Then                /*  Exclude the command  */\n             Call EXCLUDE_CMD\n          When SEL = 'H' Then                /*  Display command HELP */\n             Call DISPLAY_HELP\n          Otherwise                          /*  Invalid              */\n             Say '*** selection' SEL 'for' ZCTVERB 'ignored'\n          End\n        If ZTDSELS = 1 Then Leave     /* finished all selected rows   */\n        SEL = ''\n       \"TBDISPL\" cmds_table           /* get next selected row        */\n        tbdispl_rc = RC\n        If tbdispl_rc > 8 Then        /* some kind of ERROR           */\n           Leave tdloop               /* exitting from ISPFCMDS       */\n        End\n\n     /*---------------------------------------------------------------*/\n     /* Mark overriding and overridden commands with '*' and '-'      */\n     /*---------------------------------------------------------------*/\n     If updated = 'Y' Then Do         /* If the user updated the list */\n        If CMDSORT \u00ac= 'REAL ORDER' Then   /* CMDSORT = actual order   */\n           Call SORT_CMDSTABL('R')    /* sort for SETUP_OVER          */\n        Call SETUP_OVER               /* ... mark the overriding cmds */\n        If CUR#SORT \u00ac= 'REAL ORDER' Then  /* CUR#SORT = desired order */\n           Call SORT_CMDSTABL(CUR#SORT) /*.. & restore the sort order */\n        updated = 'N'\n        End\n     /*---------------------------------------------------------------*/\n     /* Process primary commands                                      */\n     /*---------------------------------------------------------------*/\n     Parse Upper Var ZCMD cmd cmdparm\n     Select\n      When cmd = '1' Then Do            /**** SWITCH DISPLAYS      ****/\n         If CMDSACT = '' Then CMDSACT = '/'\n                         Else CMDSACT = ''\n         End\n      When cmd = '2' Then               /**** DISPLAY TABLE INFO   ****/\n         Call DISPLAY_TABLINFO\n      When cmd = '3' Then Do            /**** SAVE/CREATE USER CMDS ***/\n         If ZUCTPREF || ZUCTPRE2 || ZUCTPRE3 = ''\n            Then Call CREATE_TABL('USER')\n            Else Call SAVE_TABL('USER')\n         End\n      When Pos(cmd,'SAVEUSER') = 1 ,    /**** SAVE USER COMMANDS   ****/\n       & Length(cmd) > 3 Then\n         Call SAVE_TABL('USER')\n      When cmd = 'SAVEUSR1' Then        /**** SAVE USR1 COMMANDS   ****/\n         Call SAVE_TABL('USR1')\n      When cmd = 'SAVEUSR2' Then        /**** SAVE USR2 COMMANDS   ****/\n         Call SAVE_TABL('USR2')\n      When cmd = 'SAVEUSR3' Then        /**** SAVE USR3 COMMANDS   ****/\n         Call SAVE_TABL('USR3')\n      When Pos(cmd,'SAVEAPPL') = 1 ,    /**** SAVE APPL COMMANDS   ****/\n       & Length(cmd) > 4 Then\n         Call SAVE_TABL('APPL')\n      When Pos(cmd,'SAVESITE') = 1 ,    /**** SAVE SITE COMMANDS   ****/\n       & Length(cmd) > 4 Then\n         Call SAVE_TABL('SITE')\n      When cmd = 'SAVESIT1' Then        /**** SAVE SIT1 COMMANDS   ****/\n         Call SAVE_TABL('SIT1')\n      When cmd = 'SAVESIT2' Then        /**** SAVE SIT2 COMMANDS   ****/\n         Call SAVE_TABL('SIT2')\n      When cmd = 'SAVESIT3' Then        /**** SAVE SIT3 COMMANDS   ****/\n         Call SAVE_TABL('SIT3')\n      When Pos(cmd,'NEWUSER') = 1 ,     /**** CREATE NEW USER TABLE ***/\n       & Length(cmd) > 3 Then\n         Call CREATE_TABL('USER')\n      When Pos(cmd,'NEWAPPL') = 1 ,     /**** CREATE NEW APPL TABLE ***/\n       & Length(cmd) > 3 Then\n         Call CREATE_APPLTABL\n      When Pos(cmd,'NEWSITE') = 1 ,     /**** CREATE NEW SITE TABLE ***/\n       & Length(cmd) > 3 Then\n         Call CREATE_TABL('SITE')\n      When cmd = 'L' Then               /**** LOCATE A COMMAND     ****/\n         Call LOCATE_ROW\n      When Pos(cmd,'SORT') = 1 ,        /**** SORT THE COMMANDS    ****/\n       & Length(cmd) > 1 Then\n         CMDSORT = cmdparm\n      When Pos(cmd,'OVER') = 1 Then Do  /**** SHOW ONLY OVERRIDES  ****/\n         ONLY = ' ONLY OVERRIDES'       /* text for panel ISPFCMD0    */\n         CUR#SCAN = '?????????'         /* so SETUP_SCAN is called    */\n         If CMDSORT = 'ALIAS' Then\n            CMDSORT = 'REAL ORDER'\n         End\n      When Pos(cmd,'NOVER') = 1 Then Do /**** SHOW NOT OVERRIDES   ****/\n         ONLY = ' NOT OVERRIDES'        /* text for panel ISPFCMD0    */\n         CUR#SCAN = '?????????'         /* so SETUP_SCAN is called    */\n         If CMDSORT = 'ALIAS' Then\n            CMDSORT = 'REAL ORDER'\n         End\n      When Pos(cmd,'ALIAS') = 1 Then Do /**** SHOW ONLY ALIASES    ****/\n         Call SORT_CMDSTABL('R')        /* sort into REAL ORDER       */\n         Call FIND_ALIASES              /* find all alias commands    */\n         ONLY = ' ONLY ALIASES'         /* text for panel ISPFCMD0    */\n         CMDSACT = '/'                  /* show command actions       */\n         CUR#SCAN = '?????????'         /* so SETUP_SCAN is called    */\n         Call SORT_CMDSTABL('AL')       /* sort to ALIAS order        */\n         End\n      When Pos(cmd,'TRUNC') = 1 Then Do /**** SHOW ONLY TRUNCATED  ****/\n         ONLY = ' ONLY TRUNCATED'       /* text for panel ISPFCMD0    */\n         CMDSACT = '/'                  /* show command actions       */\n         CUR#SCAN = '?????????'         /* so SETUP_SCAN is called    */\n         If CMDSORT = 'ALIAS' Then\n            CMDSORT = 'REAL ORDER'\n         End\n      When Pos(cmd,'RESET') = 1 ,       /**** RESET THE LIST       ****/\n       & Length(cmd) > 2 Then Do\n         COPYPEND = ''                  /* no pending move/copy       */\n         COPYCMDS = ''                  /* no pending copy cmds       */\n         Call SELECT_TABLES             /* update CMDSEL variables    */\n         ONLY = ''                      /* no 'ONLY' text on panel    */\n         Call SET_ONLY                  /* update the ONLY variable   */\n         Call SETUP_SCAN                /* new scan is required       */\n         If CMDSORT = 'ALIAS' Then\n            CMDSORT = 'REAL ORDER'\n         End\n      When Pos(cmd,'REFRESH') = 1 ,     /**** REFRESH THE LIST     ****/\n       & Length(cmd) > 2 Then Do\n         COPYPEND = ''                  /* no pending move/copy       */\n         COPYCMDS = ''                  /* no pending copy cmds       */\n         Call LOAD_CMDSTABL             /* recreate cmds_table        */\n         If CMDSORT \u00ac= 'REAL ORDER' Then  /* CMDSORT = actual order   */\n            Call SORT_CMDSTABL('R')     /* sort into REAL ORDER       */\n         Call SETUP_OVER                /* mark overriding commands   */\n         If ONLY = ' ONLY ALIASES' Then\n            Call FIND_ALIASES           /* find all alias commands    */\n      /* CMDSCAN = '' */                /* display ALL commands       */\n      /* CMDFIND = '' */                /* display ALL commands       */\n         Call SETUP_SCAN                /* new scan is required       */\n         If CUR#SORT \u00ac= 'REAL ORDER' Then /* CUR#SORT = desired order */\n            Call SORT_CMDSTABL(CUR#SORT)  /* back to current order    */\n         End\n      When Pos(cmd,'CONFIG') = 1,       /**** CONFIGURATION UTILITY ***/\n       & Length(cmd) > 3 Then Do\n         \"SELECT CMD(%JSPCCONF) NEWAPPL(ISR) PASSLIB\"     /* Extended */\n         If rc > 0 Then\n            \"SELECT CMD(%ISPCCONF) NEWAPPL(ISR) PASSLIB\"  /* standard */\n         End\n      Otherwise\n         csrrow = 0\n      End\n     /*---------------------------------------------------------------*/\n     /* Process any changes to the selected tables or the cmd scan    */\n     /*---------------------------------------------------------------*/\n     If CUR#TABS \u00ac= T1','T2','T3','T4 Then Do\n        Call SELECT_TABLES            /* update CMDSEL vars           */\n        Call SET_ONLY                 /* update the ONLY variable     */\n        new_tab_sel = 'Y'\n        End\n     Else new_tab_sel = 'N'           /* no new table selection       */\n\n     If CUR#FIND \u00ac= CMDFIND | CUR#SCAN \u00ac= CMDSCAN Then Do\n        Call SETUP_SCAN               /* setup row scan for TBDISPL   */\n        new_cmd_scan = 'Y'\n        End\n     Else new_cmd_scan = 'N'          /* no new command scan          */\n\n     If Left(CUR#SORT,1) \u00ac= Left(CMDSORT,1) Then Do\n        Call SORT_CMDSTABL(CMDSORT)   /* sort the displayed commands  */\n        new_cmd_sort = 'Y'\n        End\n     Else new_cmd_sort = 'N'          /* no new command sort          */\n\n     /*----------------------------*/\n     /* maintain top row displayed */\n     /*----------------------------*/\n     If  cmd \u00ac= 'L' ,\n      &  new_cmd_sort = 'N' ,\n      &  new_cmd_scan = 'N' ,\n      &  new_tab_sel  = 'N' Then Do\n        \"TBTOP\" cmds_table\n        \"TBSKIP\" cmds_table \"NUMBER(\"ZTDTOP\") NOREAD\"\n        End\n     End                              /* end of tdloop (Do loop)      */\n  /*------------------------------------------------------------------*/\n  /* Clean up and exit                                                */\n  /*------------------------------------------------------------------*/\n  \"VPUT CUR#SORT PROFILE\"             /* save last-used sort order    */\n  \"CONTROL ERRORS RETURN\"\n  \"TBQUERY\" cmdtbs_table\n  If rc = 0 Then\n     \"TBEND\" cmdtbs_table\n  \"TBEND\" cmds_table                  /* finished with the tables     */\n  If tbdispl_rc > 8 Then Do\n     ZERRSM = ''                      /* no short message             */\n     ZERRLM = '***  Error: TBDISPL of table' cmds_table',',\n              'using panel ISPFCMD0 has FAILED, rc =' tbdispl_rc\n     ZERRALRM = 'YES .WINDOW=LRESP'   /* alarm, user must press ENTER */\n     \"SETMSG MSG(ISRZ002)\"            /* standard IBM message         */\n     End\n  Return\n\n/*====================================================================*/\n/*====                    SUBROUTINES                             ====*/\n/*====================================================================*/\n\n/*==================================================================*/\n/* Process invocation parm(s)                                       */\n/*------------------------------------------------------------------*/\nPROCESS_PARM:\n    Parse Upper Value zparm With 1 mask1 'APPL(' applid ')' mask2\n    mask = mask1 mask2\n    /*--------------------------------------------------*/\n    /* process parms which include 'APPL(xx)' parameter */\n    /*--------------------------------------------------*/\n    If applid \u00ac= '' Then Do\n       If applid = ZAPPLID Then Do     /* same as current Appl-Id     */\n          CMDSCAN = Word(mask,1)\n          If applid = 'ISP' Then\n             only_syst = 'YES'       /* display only SYSTEM table     */\n          Else\n             only_appl = 'YES'       /* display only the APPL table   */\n          Return\n          End\n       Call CONFIRM_TABLE              /* ensure the table exists     */\n       If result > 0 Then Exit\n\n       If applid = ZUCTPREF | applid = ZUCTPRE2 | applid = ZUCTPRE3 ,\n        | applid = ZSCTPREF | applid = ZSCTPRE2 | applid = ZSCTPRE3 ,\n        | applid = 'ISP' Then\n          lib_type = '01'x               /* '01'x = library is known  */\n       /*-----------------------------------------------------------*/\n       /* re-invoke ISPFCMDS in the right appl-id to open the table */\n       /*-----------------------------------------------------------*/\n       Parse Source where_from\n       If Word(where_from,4) = '?' Then\n          \"SELECT CMD(ISPFCMDS\" lib_type mask \") SCRNAME(CMDS)\",\n             \"NEWAPPL(\"applid\") LANG(CREX) PASSLIB\"\n       Else\n          \"SELECT CMD(%ISPFCMDS\" lib_type mask \") SCRNAME(CMDS)\",\n             \"NEWAPPL(\"applid\") PASSLIB\"\n       If libdef_rc = 0 Then\n          \"LIBDEF ISPTLIB\"\n       If alloc_rc = 0 Then Do\n          \"TBOPEN XXXXX LIBRARY(XXX)\"  /* this makes the FREE work  */\n          Address TSO \"FREE FI(CMTEMP\"tsuf\")\"\n          End\n       Exit\n       End\n    /*--------------------------------------------*/\n    /* process parms without 'APPL(xx)' parameter */\n    /*--------------------------------------------*/\n    If Word(zparm,1) = '01'x ,\n     | Word(zparm,1) = '02'x Then Do /* ISPFCMDS has been re-invoked  */\n       If Word(zparm,1) = '02'x Then     /* 01 = known   02 = unknown */\n          appl_lib = 'unknown'       /* Cannot be sure which library  */\n                                     /* ... the table came from.      */\n       CMDSCAN = Word(zparm,2)\n       Select\n         When ZAPPLID = 'ISP' Then\n            only_syst = 'YES'        /* display only SYSTEM table     */\n         Otherwise\n            only_appl = 'YES'        /* display only the APPL table   */\n         End\n       End\n    Else\n       CMDSCAN = Word(zparm,1)       /* cmd-name mask, or display ALL */\n    Return\n\n/*==================================================================*/\n/* Ensure that an application table exists                          */\n/* - this is called by PROCESS_PARM and COPY_ROWS                   */\n/*------------------------------------------------------------------*/\nCONFIRM_TABLE:\n    /*----------------------------------*/\n    /* check status of the chosen table */\n    /*----------------------------------*/\n    \"TBSTATS\" applid\"CMDS STATUS1(s1) STATUS2(s2) STATUS3(s3)\"\n    If s3 = 2 Then                  /* table not avail for WRITE mode */\n       lib_type = '02'x             /* '02'x = open, library unknown  */\n    /*-------------------------------------------------------------*/\n    /* table not already open, library must be confirmed/specified */\n    /*-------------------------------------------------------------*/\n    Else Do\n       TABNAME = applid'CMDS'\n       LIBNAME = ''\n       VOLUME  = ''\n       If s1 = 1 Then                         /* table is in ISPTLIB  */\n          LIBNAME = FIND_MEMBER(TABNAME 'ISPTLIB')\n       conf_lib = LIBNAME\n       conf_vol = VOLUME\n       Call CONFIRM_LIBRARY        /* show window for user to confirm */\n       If result > 0 Then Return 8\n       /*----------------------------------------------------*/\n       /* allocate the library (using a LIBDEF) if necessary */\n       /*----------------------------------------------------*/\n       If COPYROWS \u00ac= 'YES' ,       /* not copying rows to this table */\n       & (LIBNAME \u00ac= conf_lib | VOLUME \u00ac= conf_vol) Then Do\n          If VOLUME \u00ac= ''\n             Then vol_parm = 'VOL('VOLUME')'\n             Else vol_parm = ''\n          Address TSO \"ALLOC FI(CMTEMP\"tsuf\") DSN('\"LIBNAME\"')\",\n             vol_parm \"SHR REUSE\"\n          alloc_rc = rc\n          \"LIBDEF ISPTLIB LIBRARY\",       /* ISPTUSR not concatenated */\n             \"ID(CMTEMP\"tsuf\") STACK\"\n          libdef_rc = rc\n          End\n       lib_type = '01'x                  /* '01'x = library is known  */\n       End\n    Return\n\n/*==================================================================*/\n/* Load the temporary CMDS table from the open command tables       */\n/* (in the correct order)                                           */\n/*------------------------------------------------------------------*/\nLOAD_CMDSTABL:\ntrace O\n    CMDSEL = '/'              /* rows to be selected by the SCAN      */\n    CMDALIAS = ''             /* alias commands initially blank       */\n    CMDOVER = ''              /* command overrides initially blank    */\n    CMDNUM = 90               /* command order numbers (for sorting)  */\n    CMDFND = ''               /* desc/action finds initially blank    */\n    firstab = ''              /* name of first command table          */\n    pendcmds = 0              /* no pending selected commands         */\n    \"TBQUERY\" Strip(ZUCTPREF)\"CMDS ROWNUM(qrows)\"\n    If qrows = 0 Then\n       user_empty = 'YES'     /* User table is empty (no commands)    */\n    \"TBQUERY\" Strip(ZSCTPREF)\"CMDS ROWNUM(qrows)\"\n    If qrows = 0 Then\n       site_empty = 'YES'     /* Site table is empty (no commands)    */\n  /*-----------------------------------------------------*/\n  /*  create a new temporary CMDS table                  */\n  /*  - table structure is documented in ISPFCMDI source */\n  /*-----------------------------------------------------*/\n  /*Address TSO \"CALL *(ISPFCMDI) '\"cmds_table\"'\" ** TBCREATE NOWRITE */\n\n    \"TBEND\" cmds_table        /* remove any existing temp table first */\n    \"TBCREATE\" cmds_table \"NOWRITE\",\n       \"NAMES(CMDTAB CMDTORD CMDOVER CMDSEL CMDALIAS CMDNUM CMDFND\",\n             \"CMDTRUNC CMDMINL ZCTVERB ZCTTRUNC ZCTDESC, ZCTACT)\"\n    init_rc = rc\n    If init_rc > 0 Then Return\n\n  /*-----------------------------------*/\n  /*  copy Appl table into cmds_table  */\n  /*-----------------------------------*/\n    If only_syst = 'YES' Then   /* If ISPFCMDS started with APPL(ISP) */\n       CMDSEL = ' '             /* don't display this table initially */\n    to_table = cmds_table       /* table to be copied to              */\n    If ZAPPLID \u00ac= 'ISP' Then Do /* the ISP table is not an Appl table */\n       from_table = ZAPPLID\"CMDS\"\n       CMDTAB = ZAPPLID\n       CMDTORD = 1              /* the command table order            */\n       Call COPY_TABLE          /* copy from_table into cmds_table    */\n       If result = 0 Then Do\n          T1 = '/'              /* indicates the table was copied     */\n          If firstab = '' Then\n             firstab = from_table\n          End\n       Else T1 = ''             /* indicates the table was not copied */\n       End\n    Else T1 = ''                /* set to blank if Applid = 'ISP'     */\n    If T1 = '' Then             /* NOAPPL is used by ISPFCMD0 panel   */\n       NOAPPL = 'YES'\n    If only_appl = 'YES' Then   /* If ISPFCMDS started with APPL(xx)  */\n       CMDSEL = ' '             /* don't display the following tables */\n  /*--------------------------------------*/\n  /*  copy User table(s) into cmds_table  */\n  /*--------------------------------------*/\n    If ZUCTPREF || ZUCTPRE2 || ZUCTPRE3 \u00ac= '' Then Do\n       T2 = ''\n       If ZUCTPREF \u00ac= '',       /* User table prefix, but only if open*/\n        & ZAPPLID \u00ac= ZUCTPREF Then Do       /* this is not Appl table */\n          from_table = Strip(ZUCTPREF)\"CMDS\"          /* User table   */\n          CMDTAB = ZUCTPREF\n          CMDTORD = '2A'        /* the command table order            */\n          Call COPY_TABLE       /* copy from_table into cmds_table    */\n          If result = 0 Then Do\n             T2 = '/'           /* indicates the table was copied     */\n             If firstab = '' Then\n                firstab = from_table\n             End\n          End\n       If ZUCTPRE2 \u00ac= '',        /* 2nd User table prefix, (iff open) */\n        & ZAPPLID \u00ac= ZUCTPRE2 Then Do       /* this is not Appl table */\n          from_table = Strip(ZUCTPRE2)\"CMDS\"          /* User table 2 */\n          CMDTAB = ZUCTPRE2\n          CMDTORD = '2B'        /* the command table order            */\n          Call COPY_TABLE       /* copy from_table into cmds_table    */\n          If result = 0 Then Do\n             T2 = '/'           /* indicates the table was copied     */\n             If firstab = '' Then\n                firstab = from_table\n             End\n          End\n       If ZUCTPRE3 \u00ac= '',        /* 3rd User table prefix, (iff open) */\n        & ZAPPLID \u00ac= ZUCTPRE3 Then Do       /* this is not Appl table */\n          from_table = Strip(ZUCTPRE3)\"CMDS\"          /* User table 3 */\n          CMDTAB = ZUCTPRE3\n          CMDTORD = '2C'        /* the command table order            */\n          Call COPY_TABLE       /* copy from_table into cmds_table    */\n          If result = 0 Then Do\n             T2 = '/'           /* indicates the table was copied     */\n             If firstab = '' Then\n                firstab = from_table\n             End\n          End\n       End\n    Else T2 = ''                /* set to blank if no User table open */\n  /*------------------------------------*/\n  /*  copy third table into cmds_table  */\n  /*------------------------------------*/\n    If ZSCTSRCH = 'A' Then Do\n       from_table = \"ISPCMDS\"                  /* System table */\n       CMDTAB = \"ISP\"\n       If only_syst = 'YES' Then\n          CMDSEL = '/'          /* display only this table initially  */\n       CMDTORD = 3              /* the command table order            */\n       Call COPY_TABLE          /* copy from_table into cmds_table    */\n       T3 = '/'                 /* indicates the table was copied     */\n       If firstab = '' Then\n          firstab = from_table\n       End\n    If ZSCTSRCH = 'B' Then Do\n       T3 = ''\n       If ZSCTPREF \u00ac= '',       /* Site table prefix, but only if open*/\n        & ZAPPLID \u00ac= ZSCTPREF Then Do       /* this is not Appl table */\n          from_table = Strip(ZSCTPREF)\"CMDS\"   /* Site table   */\n          CMDTAB = ZSCTPREF\n          CMDTORD = '3A'        /* the command table order            */\n          Call COPY_TABLE       /* copy from_table into cmds_table    */\n          If result = 0 Then Do\n             T3 = '/'           /* indicates the table was copied     */\n             If firstab = '' Then\n                firstab = from_table\n             End\n          End\n       If ZSCTPRE2 \u00ac= '',        /* 2nd Site table prefix, (iff open) */\n        & ZAPPLID \u00ac= ZSCTPRE2 Then Do       /* this is not Appl table */\n          from_table = Strip(ZSCTPRE2)\"CMDS\"   /* Site table 2 */\n          CMDTAB = ZSCTPRE2\n          CMDTORD = '3B'        /* the command table order            */\n          Call COPY_TABLE       /* copy from_table into cmds_table    */\n          If result = 0 Then Do\n             T3 = '/'           /* indicates the table was copied     */\n             If firstab = '' Then\n                firstab = from_table\n             End\n          End\n       If ZSCTPRE3 \u00ac= '',        /* 3rd User table prefix, (iff open) */\n        & ZAPPLID \u00ac= ZSCTPRE3 Then Do       /* this is not Appl table */\n          from_table = Strip(ZSCTPRE3)\"CMDS\"   /* Site table 3 */\n          CMDTAB = ZSCTPRE3\n          CMDTORD = '3C'        /* the command table order            */\n          Call COPY_TABLE       /* copy from_table into cmds_table    */\n          If result = 0 Then Do\n             T3 = '/'           /* indicates the table was copied     */\n             If firstab = '' Then\n                firstab = from_table\n             End\n          End\n       End\n  /*-------------------------------------*/\n  /*  copy fourth table into cmds_table  */\n  /*-------------------------------------*/\n    If ZSCTSRCH = 'B' Then Do\n       from_table = \"ISPCMDS\"                  /* System table */\n       CMDTAB = \"ISP\"\n       If only_syst = 'YES' Then\n          CMDSEL = '/'          /* display only this table initially  */\n       CMDTORD = 4              /* the command table order            */\n       Call COPY_TABLE          /* copy from_table into cmds_table    */\n       T4 = '/'                 /* indicates the table was copied     */\n       If firstab = '' Then\n          firstab = from_table\n       End\n    If ZSCTSRCH = 'A' Then Do\n       T4 = ''\n       If ZSCTPREF \u00ac= '',       /* Site table prefix, but only if open*/\n        & ZAPPLID \u00ac= ZSCTPREF Then Do       /* this is not Appl table */\n          from_table = Strip(ZSCTPREF)\"CMDS\"   /* Site table   */\n          CMDTAB = ZSCTPREF\n          CMDTORD = '4A'        /* the command table order            */\n          Call COPY_TABLE       /* copy from_table into cmds_table    */\n          If result = 0 Then Do\n             T4 = '/'           /* indicates the table was copied     */\n             If firstab = '' Then\n                firstab = from_table\n             End\n          End\n       If ZSCTPRE2 \u00ac= '',        /* 2nd Site table prefix, (iff open) */\n        & ZAPPLID \u00ac= ZSCTPRE2 Then Do       /* this is not Appl table */\n          from_table = Strip(ZSCTPRE2)\"CMDS\"   /* Site table 2 */\n          CMDTAB = ZSCTPRE2\n          CMDTORD = '4B'        /* the command table order            */\n          Call COPY_TABLE       /* copy from_table into cmds_table    */\n          If result = 0 Then Do\n             T4 = '/'           /* indicates the table was copied     */\n             If firstab = '' Then\n                firstab = from_table\n             End\n          End\n       If ZSCTPRE3 \u00ac= '',        /* 3rd User table prefix, (iff open) */\n        & ZAPPLID \u00ac= ZSCTPRE3 Then Do       /* this is not Appl table */\n          from_table = Strip(ZSCTPRE3)\"CMDS\"   /* Site table 3 */\n          CMDTAB = ZSCTPRE3\n          CMDTORD = '4C'        /* the command table order            */\n          Call COPY_TABLE       /* copy from_table into cmds_table    */\n          If result = 0 Then Do\n             T4 = '/'           /* indicates the table was copied     */\n             If firstab = '' Then\n                firstab = from_table\n             End\n          End\n       End\n    \"TBTOP\" cmds_table\n\n    /*---------------------------------*/\n    /* ISPFCMDS started with APPL(xx)  */\n    /*---------------------------------*/\n    If only_appl = 'YES' Then Do\n       only_appl = 'NO'               /* we want to do this only once */\n       Parse Value '/,,,' With T1','T2','T3','T4 /* reset 'Tx' vars */\n       End\n    If only_syst = 'YES' Then Do\n       only_syst = 'NO'\n       If ZSCTSRCH = 'A' Then         /* Site AFTER System table      */\n          Parse Value ',,/,' With T1','T2','T3','T4\n       If ZSCTSRCH = 'B' Then         /* Site BEFORE System table     */\n          Parse Value ',,,/' With T1','T2','T3','T4\n       End\n    /*-----------------------------------------------------------*/\n    /* Preserving any existing table selections (for RES or REF) */\n    /*-----------------------------------------------------------*/\n    If CUR#TABS \u00ac= 'CUR#TABS' Then Do /* these are the old selections */\n       curtabs = T1','T2','T3','T4 /* tables selected by LOAD_CMSTABL */\n       Parse Var CUR#TABS T1','T2','T3','T4        /* reset 'Tx' vars */\n       CUR#TABS = curtabs           /* keep previous table selection  */\n       End\n    Return\n\n/*==================================================================*/\n/* Copy a command table into the temporary CMDS table.              */\n/* This is called from LOAD_CMDSTABL, once for each open command    */\n/* table.  It is also called from SAVE_TABL.                        */\n/* Any running or pending commands are not copied.                  */\n/*------------------------------------------------------------------*/\nCOPY_TABLE:\n    Arg copy_type\n    If copy_type \u00ac= 'NODUMMY' Then Do\n       \"TBQUERY\" from_table \"ROWNUM(qrows)\"\n       If qrows = 0 Then Do\n          ZCTVERB  = '--------'\n          ZCTTRUNC = '0'\n          ZCTACT   = ''            /* null action = 'do nothing'    */\n          ZCTDESC  = '<<< no commands in this table >>>'\n          CMDNUM = CMDNUM + 10     /* number the row (for sorting)  */\n          CMDTRUNC = ''            /* no truncation                 */\n          \"TBADD\" to_table\n          Return 0\n          End\n       End\n    \"TBVCLEAR\" from_table\n    If rc > 0 Then Return 4          /* table not open -> return    */\n    \"TBTOP\" from_table\n    Do copying = 1 to 9999\n       \"TBSKIP\" from_table\n       If rc > 0 Then Leave copying         /* rc=8 at end of table */\n       If (Word(ZCTDESC,2) = '<<RUNNING>>' ,\n        |  Word(ZCTDESC,2) = '<<PENDING>>'),\n        &  Word(ZCTDESC,1) <= '99'x ,\n        &  Datatype(C2X(Word(ZCTDESC,1))) = 'NUM'\n           Then Iterate copying        /* pending cmd - try next row*/\n       CMDMINL = Length(Strip(ZCTVERB))    /* no. of chars required */\n       If ZCTTRUNC = 0 | ZCTTRUNC = CMDMINL Then\n          CMDTRUNC = ''\n       Else Do\n          If Datatype(ZCTTRUNC) <> 'NUM' Then Do  /* INVALID value| */\n             CMDMINL = 8\n             CMDTRUNC = '????????'\n             End\n          Else Do\n             CMDMINL = Max(2,ZCTTRUNC)                 /* minimum=2 */\n             CMDTRUNC = Copies('-',CMDMINL) /* underline in display */\n             End\n          End\n       CMDNUM = CMDNUM + 10        /* number the rows (for sorting) */\n       \"TBADD\" to_table \"MULT(200)\"     /* get storage for 200 rows */\n       End\n    Return 0\n\n/*==================================================================*/\n/* Search the table for ALIASes & update CMDALIAS variables         */\n/*  - Table has been already been sorted into REAL ORDER, and       */\n/*    will be sorted into ALIAS order for the next table display.   */\n/*    That sort uses CMDALIAS, which is either blank or it has a    */\n/*    unique number for each group of alias commands.               */\n/*  - This is called whenever user issues 'ALIAS' command.          */\n/*------------------------------------------------------------------*/\nFIND_ALIASES:\n    alias_list = ' '                /* list of all the ALIASes      */\n    \"TBTOP\" cmds_table              /* going from top to bottom     */\n    Do a = 1 To 9999                /* process up to 9999 rows||    */\n       \"TBSKIP\" cmds_table\n       If rc > 0 Then Leave         /* rc=8 when it's at the bottom */\n       CMDALIAS = ' '               /* blank = do not show this row */\n\n       If CMDTRUNC = '' Then Do     /* exact command verb matches   */\n          vpos = WordPos(ZCTVERB,alias_list)\n          If vpos > 0 Then\n             CMDALIAS = vpos        /* show this row                */\n          End\n       If CMDTRUNC \u00ac= '' Then       /* when truncation is allowed   */\n          Do b = ZCTTRUNC To Length(Strip(ZCTVERB))\n             vpos = WordPos(Left(ZCTVERB,b),alias_list)\n             If vpos > 0 Then Do    /* truncated verb in the list   */\n                CMDALIAS = vpos     /* show this row                */\n                Leave b\n                End\n             End\n\n       Parse Upper Var ZCTACT act          /* convert to upper case */\n       If Word(act,1) = 'ALIAS' Then Do\n          alias = Word(act,2)\n          apos = WordPos(alias,alias_list)\n          If apos > 0 Then                 /* already in alias_list */\n             CMDALIAS = apos                       /* show this row */\n          Else Do\n             If CMDALIAS = ' ' Then Do\n                alias_list = alias_list alias\n                CMDALIAS = Words(alias_list)       /* show this row */\n                End\n             Else Nop  /* alias of an alias - the row will be shown */\n             End\n          End\n\n       \"TBPUT\" cmds_table \"ORDER\"     /* update CMDALIAS in the row */\n       End\n    Return\n\n/*==================================================================*/\n/* Set up argument for the SCAN in the TBDISPL panel (ISPFCMD0)     */\n/* 1.If the user wants to find all cmds with a particular string in */\n/*   the description or action fields, it must examine every table  */\n/*   row and update the CMDFND field when there is a match.         */\n/* 2.The search arguments are then set up according to the user's   */\n/*   selections.                                                    */\n/*------------------------------------------------------------------*/\nSETUP_SCAN:\n    \"CONTROL NONDISPL ENTER\"         /* so panel can update ZTDMARK */\n    /*------------------------*/\n    /* FIND all matching rows */\n    /*------------------------*/\n    If CMDFIND \u00ac= '' & CMDFIND \u00ac= '*' Then Do\n       If Words(CMDFIND) > 1 ,\n        & (Word(CMDFIND,1) = 'NOT' | Word(CMDFIND,1) = '\u00ac')\n       Then Do       /* find all cmds WITHOUT this character string */\n          find_string = Subword(CMDFIND,2)\n          find_type = 'NOT'\n          End\n       Else Do      /* find all cmds MATCHING this character string */\n          find_string = CMDFIND\n          find_type = 'MATCH'\n          End\n       \"TBTOP\" cmds_table\n       \"TBSKIP\" cmds_table\n       Do Until rc > 0               /* rc=8 when it's at the bottom */\n          Parse Upper Var ZCTDESC upper_desc\n          Parse Upper Var ZCTACT  upper_act /* convert to upper case */\n          If (find_type = 'MATCH' & (Pos(find_string,upper_desc) > 0 ,\n                                  | Pos(find_string,upper_act) > 0 )),\n          |  (find_type = 'NOT'   & (Pos(find_string,upper_desc) = 0 ,\n                                  & Pos(find_string,upper_act) = 0 ))\n          Then Do\n             CMDFND = CMDFIND\n             \"TBPUT\" cmds_table \"ORDER\"  /* update CMDFND in the row */\n             End\n          \"TBSKIP\" cmds_table\n          End\n       End\n\n    /*------------------------------------------------------------*/\n    /* set up the TBSARG which is used for SCAN by panel ISPFCMD0 */\n    /*------------------------------------------------------------*/\n    \"TBVCLEAR\" cmds_table\n    If CMDSCAN = '' Then\n       ZCTVERB = '*'\n    Else If Right(CMDSCAN,1) \u00ac= '*'\n       Then ZCTVERB = CMDSCAN'*'\n       Else ZCTVERB = CMDSCAN\n    CMDSEL   = '/'\n    name_conds = 'ZCTVERB,EQ,CMDSEL,EQ'\n    If CMDFIND \u00ac= '' Then Do\n       \"TBTOP\" cmds_table\n       CMDFND = CMDFIND\n       name_conds = name_conds',CMDFND,EQ'\n       End\n    If ONLY = ' ONLY ALIASES' Then Do\n       CMDALIAS = ' '             /* CMDALIAS is numeric or blank*/\n       name_conds = name_conds',CMDALIAS,NE'\n       End\n    If ONLY = ' ONLY TRUNCATED' Then Do\n       CMDTRUNC = ' '             /* CMDTRUNC is numeric or '-'s */\n       name_conds = name_conds',CMDTRUNC,NE'\n       End\n    If ONLY = ' ONLY OVERRIDES' Then Do\n       CMDOVER = ' '              /* show CMDOVER = *, +, - or . */\n       name_conds = name_conds',CMDOVER,NE'\n       End\n    If ONLY = ' NOT OVERRIDES' Then Do\n       CMDOVER = ' '              /* show CMDOVER = ' ' only     */\n       name_conds = name_conds',CMDOVER,EQ'\n       End\n    \"TBSARG\" cmds_table \"NAMECOND(\"name_conds\")\"\n    Return\n\n/*==================================================================*/\n/* Update the ONLY variable if only one table selected              */\n/*------------------------------------------------------------------*/\nSET_ONLY:\n    If Word(ONLY,1) \u00ac= 'ONLY' & Word(ONLY,1) \u00ac= 'NOT' Then Do\n       Select\n         When T1','T2','T3','T4 = '/,,,' Then Do\n            Select\n              When ZAPPLID = ZUCTPREF Then ONLY = ' USER COMMANDS'\n              When ZAPPLID = ZUCTPRE2 Then ONLY = ' USER COMMANDS'\n              When ZAPPLID = ZUCTPRE3 Then ONLY = ' USER COMMANDS'\n              When ZAPPLID = ZSCTPREF Then ONLY = ' SITE COMMANDS'\n              When ZAPPLID = ZSCTPRE2 Then ONLY = ' SITE COMMANDS'\n              When ZAPPLID = ZSCTPRE3 Then ONLY = ' SITE COMMANDS'\n              When ZAPPLID = 'TOOL'   Then ONLY = '  ISPF TOOLS'\n              Otherwise ONLY = ''\n              End\n            End\n         When T1','T2','T3','T4 = ',/,,' Then\n            ONLY = ' USER COMMANDS'\n         When T1','T2','T3','T4 = ',,/,' Then Do\n            If ZSCTSRCH = 'B'\n               Then ONLY = ' SITE COMMANDS'\n               Else ONLY = 'SYSTEM COMMANDS'\n            End\n         When T1','T2','T3','T4 = ',,,/' Then Do\n            If ZSCTSRCH = 'A'\n               Then ONLY = ' SITE COMMANDS'\n               Else ONLY = 'SYSTEM COMMANDS'\n            End\n         Otherwise\n            ONLY = ''\n         End\n       End\n    Return\n\n/*==================================================================*/\n/* Check the correct value is in CMDSEL in every row of cmds_table  */\n/*  - the Tx variables are updated by the user and can be either    */\n/*    ' ' or '/'.  CMDSEL column is used for the table SCAN.        */\n/*------------------------------------------------------------------*/\nSELECT_TABLES:\n    \"TBTOP\" cmds_table\n    \"TBSKIP\" cmds_table\n    Do Until rc > 0                  /* rc=8 when it's at the bottom */\n       Select\n          When CMDTORD = 1 Then\n             If CMDSEL \u00ac= T1 Then Do       /* If the value is not OK */\n                CMDSEL = T1\n                \"TBPUT\" cmds_table \"ORDER\" /* ... update the row     */\n                End\n          When Left(CMDTORD,1) = 2 Then\n             If CMDSEL \u00ac= T2 Then Do\n                CMDSEL = T2\n                \"TBPUT\" cmds_table \"ORDER\"\n                End\n          When Left(CMDTORD,1) = 3 Then\n             If CMDSEL \u00ac= T3 Then Do\n                CMDSEL = T3\n                \"TBPUT\" cmds_table \"ORDER\"\n                End\n          When Left(CMDTORD,1) = 4 Then\n             If CMDSEL \u00ac= T4 Then Do\n                CMDSEL = T4\n                \"TBPUT\" cmds_table \"ORDER\"\n                End\n          Otherwise\n          End\n       \"TBSKIP\" cmds_table\n       End\n    \"CONTROL NONDISPL ENTER\"         /* so panel can update ZTDMARK  */\n    Return\n\n/*==================================================================*/\n/* Get the selected row from the temporary CMDS table.              */\n/* This is called whenever a line command or direct update is done, */\n/* because the ZCTACT field in ISPFCMD0 panel is only 66 bytes, but */\n/* ZCTACT field in the table can be up to 240 bytes.                */\n/*                                                                  */\n/* Note: 'TBDISPL .. PANEL(ISPFCMD0) AUTOSEL(YES)' will retrieve    */\n/*       the row in modified form (as displayed) so we must do a    */\n/*       'TBGET ...' from the table to get the original values.     */\n/*------------------------------------------------------------------*/\nGET_ROW:\n     /*----------------------------------*/\n     /* get row when line command issued */\n     /*----------------------------------*/\n     If SEL \u00ac= '' Then             /* 'in-place' update is ignored  */\n        \"TBGET\" cmds_table         /* get selected row from table   */\n     /*------------------------------------------------*/\n     /* get row when 'in-place' updating has been done */\n     /*------------------------------------------------*/\n     If SEL = '' Then Do           /* row updated on ISPFCMD0 panel */\n        Call COPY_ZCTVARS          /* copy ZCTxxx -> ZETxxx vars    */\n        If Length(CMDTRUNC) >= Length(Strip(ZCTVERB)) | CMDTRUNC = ''\n           Then ZETTRUNC = 0\n           Else ZETTRUNC = Max(2,Length(CMDTRUNC))   /* minimum = 2 */\n        \"TBGET\" cmds_table         /* get selected row from table   */\n        If ZETACT = Left(ZCTACT,66) Then  /* Action was not changed */\n           Parse Var ZCTACT 1 ZETACT ,\n              1 ZETACT1 61 ZETACT2 121 ZETACT3 181 ZETACT4\n\n        /*--------------------------------------------------*/\n        /* display panel for user to check the Action field */\n        /*--------------------------------------------------*/\n        If Length(ZCTACT) > 66 ,   /* Action longer than displayed  */\n         & ZETACT \u00ac= ZCTACT Then Do   /* ... and Action was changed */\n           Parse Var ZCTACT ,\n              1 ZCTACT1 61 ZCTACT2 121 ZCTACT3 181 ZCTACT4\n           /* keep old action values past byte 66 when probably OK */\n           If Substr(ZETACT,61,6) <> ' ',\n            & Substr(ZETACT,61,6) = Substr(ZCTACT,61,6) Then\n              Parse Var ZCTACT,\n                 61 ZETACT2 121 ZETACT3 181 ZETACT4\n           \"ADDPOP\"                /* next panel in Pop-Up window   */\n           Do dispno = 1 to 999 Until ZUCMKEY \u00ac= ''\n              Call CHECK_PFKEYS('ISRSNAB')\n              \"DISPLAY PANEL(ISPFCMD8)\"\n              If RC = 8 & ZUCMKEY = '' Then  /* user 'PF3' ie END   */\n                 ZUCMKEY = 'END'   /* .... allow update to be saved */\n              \"VGET ZVERB\"\n              If ZVERB = 'CANCEL' Then  /* user 'CANCEL' via PF Key */\n                 ZUCMKEY = 'CANCEL'\n              End\n           \"REMPOP\"\n           If ZUCMKEY = 'CANCEL' Then Do\n              ZERRSM = 'Update cancelled'\n              ZERRLM = ''\n              ZERRALRM = 'NO'\n              \"SETMSG MSG(ISRZ002)\"\n              Return 4\n              End\n           End\n        /*------------------------------------------------*/\n        /* preserve the (unseen) last 20 bytes of ZCTDESC */\n        /*------------------------------------------------*/\n        Parse Var ZCTDESC 61 ZETDESC2\n        End\n\n    /*--------------------------------------------------------------*/\n    /* save old values, to be checked by COMPARE_VARS when updating */\n    /*--------------------------------------------------------------*/\n    oldvars = ZCTVERB'|'ZCTTRUNC'|'ZCTDESC'|'ZCTACT\n    Return 0\n\n/*==================================================================*/\n/* locate a command name exactly matching the cmdparm value         */\n/* - if no match:  find the (first) command that should be after    */\n/*   the desired one, then position the list on the row before that */\n/*   (it looks for the first command starting with the same chars & */\n/*   scans from there - this finds a better position in tables that */\n/*   are mostly sorted into alphabetical order)                     */\n/*------------------------------------------------------------------*/\nLOCATE_ROW:\ntrace O\n    CMDSEL = '/'            /* only locate from the selected commands */\n    cmdparm = Strip(Left(cmdparm,8))\n    ZCTVERB = cmdparm\n    /*-------------------------*/\n    /* look for an exact match */\n    /*-------------------------*/\n    \"TBSCAN\" cmds_table \"NOREAD\",\n       \"ARGLIST(ZCTVERB,CMDSEL) CONDLIST(EQ,EQ) POSITION(csrrow)\"\n    If RC > 0 Then Do\n       ZCTVERB = cmdparm'*'     /* scan for same beginning characters */\n       \"TBSCAN\" cmds_table \"NOREAD\",\n          \"ARGLIST(ZCTVERB,CMDSEL) CONDLIST(EQ,EQ) POSITION(csrrow)\"\n       End\n\n    /*--------------------------------------*/\n    /* no exact matching command name found */\n    /*--------------------------------------*/\n    If RC > 0 Then Do\n       ZCTVERB = Left(cmdparm,1)'*' /* scan for same 1st character */\n       \"TBSCAN\" cmds_table \"NOREAD\",\n          \"ARGLIST(ZCTVERB,CMDSEL) CONDLIST(EQ,EQ) ROWID(rowid)\"\n       If RC > 0\n          Then rowid = 0\n          Else \"TBSKIP\" cmds_table \"NOREAD NUMBER(-1)\"  /* row before */\n       ZCTVERB = cmdparm\n       \"TBSCAN\" cmds_table \"NOREAD\", /* find row that should be after */\n          \"ARGLIST(ZCTVERB,CMDSEL) CONDLIST(GT,EQ)\"\n       /*--------------------------------------------*/\n       /* no following row with greater command name */\n       /*--------------------------------------------*/\n       If RC > 0 & rowid > 0 Then Do\n          \"TBSKIP\" cmds_table \"NOREAD ROW(\"rowid\")\"\n          ZCTVERB = Left(cmdparm,1)'*'\n          \"TBSCAN\" cmds_table \"NOREAD\",  /* scan for another 1st char */\n             \"ARGLIST(ZCTVERB,CMDSEL) CONDLIST(NE,EQ)\"\n          End\n       /*------------------------------------------------------*/\n       /* location found - position cursor on the previous row */\n       /*------------------------------------------------------*/\n       If RC = 0 Then\n          \"TBSKIP\" cmds_table \"NOREAD NUMBER(-1) POSITION(csrrow)\"\n       /*-----------------------------------------------------------*/\n       /* location not found - find bottom of the displayed rows    */\n       /*   - \"TBBOTTOM\" cmds_table \"NOREAD POSITION(csrrow)\" can't */\n       /*    be used because csrrow can be invalid when some of the */\n       /*    rows are not displayed.                                */\n       /*-----------------------------------------------------------*/\n       Else Do\n          \"TBSKIP\" cmds_table \"NOREAD ROW(\"rowid\")\" /* 1st char match */\n          Do until RC > 0\n             \"TBSCAN\" cmds_table \"NOREAD ROWID(rowid)\",\n                \"ARGLIST(CMDSEL) CONDLIST(EQ)\"\n             End\n          \"TBSKIP\" cmds_table \"NOREAD ROW(\"rowid\") POSITION(csrrow)\"\n          End\n       /*---------------------------------------*/\n       /* message shown if no exact match found */\n       /*---------------------------------------*/\n       ZERRHM = '*'\n       ZERRSM = 'Cmd \"'cmdparm'\" not found'\n       ZERRLM = 'Command \"'cmdparm'\" not located, but list scrolled',\n                'to where it should be'\n       ZERRALRM = 'NO'                  /* no alarm with the message */\n       \"SETMSG MSG(ISRZ002)\"            /* standard IBM message      */\n       End\ntrace O\n    Return\n\n/*==================================================================*/\n/* Delete the command from the live command table and cmds_table    */\n/*------------------------------------------------------------------*/\nDELETE_CMD:\n    If CUR#SORT \u00ac= 'REAL ORDER' Then\n       Call SORT_CMDSTABL('R')      /* sort into REAL ORDER         */\n\n    Call POSN_CSRS    /* position cursor on this row in both tables */\n    \"TBQUERY\" upd_table \"ROWNUM(qrows)\"\n    \"TBDELETE\" upd_table\n    If qrows = 1 Then Do           /* deleting last row from table  */\n       ZCTVERB  = '--------'\n       ZCTTRUNC = '0'\n       ZCTACT   = ''               /* null action = 'do nothing'    */\n       ZCTDESC  = '<<< no commands in this table >>>'\n       CMDTRUNC = ''               /* no truncation                 */\n       CMDALIAS = ''\n       CMDOVER  = ''\n       \"TBPUT\" cmds_table \"ORDER\"  /* replaced by the dummy row     */\n       End\n    Else \"TBDELETE\" cmds_table\n\n    If CUR#SORT \u00ac= 'REAL ORDER' Then\n      Call SORT_CMDSTABL(CUR#SORT)  /* sort back to current order   */\n\n    If temp_cmd \u00ac= 'Y' Then Do\n       ZERRSM = 'Command deleted'\n       ZERRLM = 'Command' ZCTVERB 'was deleted from' CMDTAB 'table'\n       ZERRALRM = 'NO'              /* no alarm with the message    */\n       \"SETMSG MSG(ISRZ002)\"        /* standard IBM message         */\n       updated = 'Y'                /* command list was updated     */\n       End\n    Return\n\n/*==================================================================*/\n/* Copy the ZCTxxx vars into the ZETxxx vars                        */\n/* - for the command View & Update panels (ISPFCMD5 & ISPFCMD4)     */\n/*------------------------------------------------------------------*/\nCOPY_ZCTVARS:\n    ZETVERB  = ZCTVERB                            /* command name     */\n    ZETTRUNC = ZCTTRUNC                           /* truncation       */\n\n    ZETDESC = Overlay(ZCTDESC,Copies(' ',80))     /* description      */\n    ZETDESC1 = Left(ZETDESC,60)\n    ZETDESC2 = Right(ZETDESC,20)\n\n    ZETACT = Overlay(ZCTACT,Copies(' ',240))      /* command action   */\n    Parse Var ZETACT ,\n       1 ZETACT1 61 ZETACT2 121 ZETACT3 181 ZETACT4\n\n    Return\n\n/*==================================================================*/\n/* Compare ZCTxxx vars before and after update                      */\n/*------------------------------------------------------------------*/\nCOMPARE_VARS:\n    /* oldvars = ZCTVERB'|'ZCTTRUNC'|'ZCTDESC'|'ZCTACT from GET_ROW */\n\n    ZETDESC1 = Overlay(ZETDESC1,Copies(' ',60))\n    ZETDESC = Strip(ZETDESC1||ZETDESC2)\n    ZETACT1 = Overlay(ZETACT1,Copies(' ',60))\n    ZETACT2 = Overlay(ZETACT2,Copies(' ',60))\n    ZETACT3 = Overlay(ZETACT3,Copies(' ',60))\n    ZETACT  = Strip(ZETACT1||ZETACT2||ZETACT3||ZETACT4)\n    newvars = ZETVERB'|'ZETTRUNC'|'ZETDESC'|'ZETACT\n\n    If newvars = oldvars\n       Then Return 4              /* no actual update done          */\n    Return 0\n\n/*==================================================================*/\n/* Copy the ZETxxx vars into the ZCTxxx vars                        */\n/* - from the command Update panel (ISPFCMD4)                       */\n/* - this sets up the variables for any command update to be saved  */\n/*------------------------------------------------------------------*/\nCOPY_ZETVARS:\n    ZCTVERB = ZETVERB\n    ZCTTRUNC = ZETTRUNC\n    ZETDESC1 = Overlay(ZETDESC1,Copies(' ',60))\n    ZCTDESC = Strip(ZETDESC1||ZETDESC2)\n    ZETACT1 = Overlay(ZETACT1,Copies(' ',60))\n    ZETACT2 = Overlay(ZETACT2,Copies(' ',60))\n    ZETACT3 = Overlay(ZETACT3,Copies(' ',60))\n    ZCTACT  = Strip(ZETACT1||ZETACT2||ZETACT3||ZETACT4)\n\n    /* Note: CMDTAB, CMDTORD, CMDSEL, CMDNUM & CMDALIAS not updated */\n    CMDMINL = Length(Strip(ZCTVERB))\n    If ZCTTRUNC = 0 | ZCTTRUNC = CMDMINL Then\n       CMDTRUNC = ''\n    Else Do\n       CMDMINL = ZCTTRUNC\n       CMDTRUNC = Copies('-',ZCTTRUNC)\n       End\n    CMDOVER = ''              /* this will be checked by SETUP_OVER */\n    CMDFND = ''\n    If CMDFIND \u00ac= '' Then Do                /* if FIND is active .. */\n       Parse Upper Var ZCTDESC upper_desc\n       If Pos(CMDFIND,upper_desc) > 0 ,\n        | Pos(CMDFIND,ZCTACT) > 0  Then Do\n          CMDFND = CMDFIND\n          End\n       End\n    Return\n\n/*==================================================================*/\n/* Use panel (based on IBM panel: ISPUCMX) to update a command      */\n/* - allow saving the command via PF3 (as is done by IBM)           */\n/* - do some validity checking                                      */\n/*   IBM state that a command must begin with A-Z, so that is what  */\n/*   this tool enforces, however my testing shows that only a few   */\n/*   characters are really invalid, as in the following code:       */\n/*     vi = Pos(Left(ZETVERB,1),':;0123456789=>')                   */\n/*     If vi > 0 Then vi = 1   /* vi=0 (valid) , vi=1 (invalid) */  */\n/*------------------------------------------------------------------*/\nUPDATE_PANEL:\n    \"CONTROL DISPLAY SAVE\"        /* save the TBDISPL display       */\n    \"ADDPOP\"                      /* next panel in Pop-Up window    */\n    CURSOR = 'ZETVERB'            /* position cursor on cmd name    */\n    Parse Var oldvars oldverb'|'oldtrunc'|'olddesc'|'oldact\n    If c_type = 'COPY' Then Do\n       ov_verb = ''\n       al_verb = ''\n       fov_verb = ''\n       pov_verb = ''\n       End\n    Else Do\n       ov_verb = oldverb\n       al_verb = oldverb\n       fov_verb = oldverb\n       pov_verb = oldverb\n       End\n    cmd_num_p = CMDNUM\n    cmd_min_l = CMDMINL\n    Do dispno = 1 to 999 Until ZUCMKEY \u00ac= ''\n       Call CHECK_PFKEYS('ISRSNAB')\n       \"DISPLAY PANEL(ISPFCMD4)\"  /* \"Command Update\" panel         */\n       If RC = 8 & ZUCMKEY = '' Then     /* user 'PF3' ie END       */\n          ZUCMKEY = 'END'         /* ..... allow update to be saved */\n       \"VGET ZVERB\"\n       If ZVERB = 'CANCEL' Then         /* user 'CANCEL' via PF Key */\n          ZUCMKEY = 'CANCEL'\n       If ZUCMKEY = 'CANCEL' Then Leave /* user 'CANCEL'            */\n       If ZETTRUNC = '' Then      /* null truncation value          */\n          ZETTRUNC = 0            /* .. set it to the default (0)   */\n       tn = Datatype(ZETTRUNC,'N')  /* check Trunc is numeric       */\n       vc = Datatype(Left(ZETVERB,1),'M') /* check 1st char in Verb */\n       /* vc = 1  *** uncomment this line to allow ANY command name */\n       vl = Length(ZETVERB)       /* get length of the command Verb */\n       If \u00acvc | \u00actn | ,           /* If invalid Verb | Trunc value  */\n          vl < 2 Then Do          /* Verb must be 2 - 8 characters. */\n          ZUCMKEY = ''            /* force redisplay of the panel   */\n          CURSOR = 'ZETVERB'      /* position cursor on ZETVERB     */\n          ZERRSM = ''\n          Select\n            When ZETVERB = '' Then\n              ZERRLM = \"** Command name (Verb) MUST be specified **\"\n            When vl = 1 Then\n              ZERRLM = '** Command name (Verb) must be at least',\n                       '2 characters **'\n            When \u00acvc Then         /* vc=0 if invalid 1st char       */\n              ZERRLM = '** Command name (Verb) must start with',\n                       'A - Z **'\n            When \u00actn Then Do      /* tn=0 if Trunc not numeric      */\n              ZERRLM = '** Truncation value must be numeric **'\n              CURSOR = 'ZETTRUNC' /* position cursor on ZETTRUNC    */\n              End\n            End\n          ZERRHM = '*'\n          ZERRALRM = 'YES'        /* alarm with the message         */\n          \"SETMSG MSG(ISRZ002)\"   /* standard IBM message           */\n          iterate dispno          /* redisplay the panel            */\n          End\n       If ZETTRUNC > vl Then   /* If Trunc > Verb length: fix it */\n          ZETTRUNC = 0         /* .. command entry is now valid  */\n       If ZETTRUNC = 1  Then   /* cmds must be at least 2 chars, */\n          ZETTRUNC = 2         /* so trunc=2 is equiv to trunc=1 */\n       If ZETTRUNC = 0\n          Then CMDMINL = vl\n          Else CMDMINL = ZETTRUNC\n       /*-----------------------------------------------------------*/\n       /* Correcting the Action syntax, (if necessary)              */\n       /* - This is an attempt to fix the most common user errors.  */\n       /*-----------------------------------------------------------*/\n       Parse Var ZETACT1 cm_start 'C(' cm_end\n       If cm_end \u00ac= '' & (cm_start = '' | cm_start = 'SELECT') Then\n          ZETACT1 = 'CMD('cm_end\n       Parse Var ZETACT1 cm_start 'CM(' cm_end\n       If cm_end \u00ac= '' & (cm_start = '' | cm_start = 'SELECT') Then\n          ZETACT1 = 'CMD('cm_end\n       Parse Var ZETACT1 cm_start 'COMMAND(' cm_end\n       If cm_end \u00ac= '' & (cm_start = '' | cm_start = 'SELECT') Then\n          ZETACT1 = 'CMD('cm_end\n       Parse Var ZETACT1 cm_start 'C=' cm_end1 cm_end2\n       If cm_end1 \u00ac= '' & (cm_start = '' | cm_start = 'SELECT') Then\n          ZETACT1 = 'CMD('cm_end1')' cm_end2\n       Parse Var ZETACT1 cm_start 'CM=' cm_end1 cm_end2\n       If cm_end1 \u00ac= '' & (cm_start = '' | cm_start = 'SELECT') Then\n          ZETACT1 = 'CMD('cm_end1')' cm_end2\n       Parse Var ZETACT1 cm_start 'CMD=' cm_end1 cm_end2\n       If cm_end1 \u00ac= '' & (cm_start = '' | cm_start = 'SELECT') Then\n          ZETACT1 = 'CMD('cm_end1')' cm_end2\n       Parse Var ZETACT1 cm_start 'COMMAND=' cm_end1 cm_end2\n       If cm_end1 \u00ac= '' & (cm_start = '' | cm_start = 'SELECT') Then\n          ZETACT1 = 'CMD('cm_end1')' cm_end2\n       Parse Var ZETACT1 pr_start 'PR(' pr_end\n       If pr_end \u00ac= '' & (pr_start = '' | pr_start = 'SELECT') Then\n          ZETACT1 = 'PGM('pr_end\n       Parse Var ZETACT1 pr_start 'PROG(' pr_end\n       If pr_end \u00ac= '' & (pr_start = '' | pr_start = 'SELECT') Then\n          ZETACT1 = 'PGM('pr_end\n       Parse Var ZETACT1 pr_start 'PROGRAM(' pr_end\n       If pr_end \u00ac= '' & (pr_start = '' | pr_start = 'SELECT') Then\n          ZETACT1 = 'PGM('pr_end\n       Parse Var ZETACT1 pr_start 'PR=' pr_end1 pr_end2\n       If pr_end1 \u00ac= '' & (pr_start = '' | pr_start = 'SELECT') Then\n          ZETACT1 = 'PGM('pr_end1')' pr_end2\n       Parse Var ZETACT1 pr_start 'PGM=' pr_end\n       If (pr_start = '' | pr_start = 'SELECT' | pr_start = 'EXEC'),\n        & pr_end \u00ac= '' Then Do\n          Parse Var pr_end pgm_name \",PARM=\" pr_parms\n          If pr_parms = '' Then\n             Parse Var pr_end pgm_name \" PARM=\" pr_parms\n          If pr_parms = '' Then\n             ZETACT1 = 'PGM('Word(pr_end,1)')' Subword(pr_end,2)\n          Else Do\n             Select\n               When Left(pr_parms,1) = \"'\" Then\n                  Parse Var pr_parms \"'\" pr_parms \"'\" pr_end\n               When Left(pr_parms,1) = \"(\" Then\n                  Parse Var pr_parms \"(\" pr_parms \")\" pr_end\n               Otherwise\n                  Parse Var pr_parms pr_parms pr_end\n               End\n             ZETACT1 = 'PGM('Strip(pgm_name)') PARM('pr_parms')' pr_end\n             End\n          End\n       Parse Var ZETACT1 pr_start 'PROG=' pr_end1 pr_end2\n       If pr_end1 \u00ac= '' & (pr_start = '' | pr_start = 'SELECT') Then\n          ZETACT1 = 'PGM('pr_end1')' pr_end2\n       Parse Var ZETACT1 pr_start 'PROGRAM=' pr_end1 pr_end2\n       If pr_end1 \u00ac= '' & (pr_start = '' | pr_start = 'SELECT') Then\n          ZETACT1 = 'PGM('pr_end1')' pr_end2\n       Parse Var ZETACT1 pn_start 'PAN(' pn_end\n       If pn_end \u00ac= '' & (pn_start = '' | pn_start = 'SELECT') Then\n          ZETACT1 = 'PANEL('pn_end\n       Parse Var ZETACT1 pn_start 'PNL(' pn_end\n       If pn_end \u00ac= '' & (pn_start = '' | pn_start = 'SELECT') Then\n          ZETACT1 = 'PANEL('pn_end\n       Parse Var ZETACT1 pn_start 'PANL(' pn_end\n       If pn_end \u00ac= '' & (pn_start = '' | pn_start = 'SELECT') Then\n          ZETACT1 = 'PANEL('pn_end\n       Parse Var ZETACT1 pn_start 'PAN=' pn_end1 pn_end2\n       If pn_end1 \u00ac= '' & (pn_start = '' | pn_start = 'SELECT') Then\n          ZETACT1 = 'PANEL('pn_end1')' pn_end2\n       Parse Var ZETACT1 pn_start 'PNL=' pn_end1 pn_end2\n       If pn_end1 \u00ac= '' & (pn_start = '' | pn_start = 'SELECT') Then\n          ZETACT1 = 'PANEL('pn_end1')' pn_end2\n       Parse Var ZETACT1 pn_start 'PANL=' pn_end1 pn_end2\n       If pn_end1 \u00ac= '' & (pn_start = '' | pn_start = 'SELECT') Then\n          ZETACT1 = 'PANEL('pn_end1')' pn_end2\n       Parse Var ZETACT1 pn_start 'PANEL=' pn_end1 pn_end2\n       If pn_end1 \u00ac= '' & (pn_start = '' | pn_start = 'SELECT') Then\n          ZETACT1 = 'PANEL('pn_end1')' pn_end2\n       correctn = ''\n       If Left(ZETACT1,4) = 'CMD(',\n        | Left(ZETACT1,4) = 'PGM(',\n        | Left(ZETACT1,6) = 'PANEL(' Then correctn = 'SEL'\n       If Left(ZETACT1,1) = '%',\n        | Left(ZETACT1,3) = 'EX ',\n        | Left(ZETACT1,5) = 'EXEC ' Then correctn = 'CMD'\n       If Left(ZETACT1,4) = 'TSO ' Then correctn = 'TSO'\n       If correctn \u00ac= '' Then Do\n          ZETACT  = Strip(ZETACT1||ZETACT2||ZETACT3||ZETACT4)\n          If correctn = 'SEL' Then\n             ZETACT = 'SELECT' ZETACT\n          If correctn = 'CMD' Then\n             ZETACT = 'SELECT CMD('ZETACT') SUSPEND MODE(FSCR)'\n          If correctn = 'TSO' Then\n             ZETACT = 'SELECT CMD('Substr(ZETACT,5)' &ZPARM )',\n                      'SUSPEND MODE(FSCR)'\n          ZETACT = Overlay(ZETACT,Copies(' ',240))\n          ZETACT1  = Left(ZETACT,60)\n          ZETACT2  = Substr(ZETACT,61,60)\n          ZETACT3  = Substr(ZETACT,121,60)\n          ZETACT4  = Right(ZETACT,60)\n          ZUCMKEY = ''            /* force redisplay of the panel   */\n          ZERRHM = '*'\n          ZERRSM = ''\n          ZERRLM = '** Action syntax corrected: please',\n                      'check it **'\n          ZERRALRM = 'YES'        /* alarm with the message         */\n          \"SETMSG MSG(ISRZ002)\"   /* standard IBM message           */\n          Iterate dispno          /* redisplay the panel            */\n          End\n       /*-----------------------------------------*/\n       /* checking for recognised Action keywords */\n       /*-----------------------------------------*/\n       action_list = 'SELECT ALIAS PASSTHRU SETVERB NOP',\n                     'ACTIONS CANCEL CRETRIEV CURSOR EXIT',\n                     'PRINT PRINT-HI PRINTG PTINTL PRINTLHI',\n                     'RETF RETP RETRIEVE SCRNAME SPLIT SPLIT-V',\n                     'SWAP WINDOW WS'\n       If actword \u00ac= Word(ZETACT1,1) Then Do\n          actword = Word(ZETACT1,1)\n          ZERRLM = ''\n          If actword \u00ac= '' ,      /* blank Action is valid          */\n           & Left(actword,1) \u00ac= '&' ,\n           & Wordpos(actword,action_list) = 0 Then\n             ZERRLM = '** Action not recognised: please check it **'\n          If ZETACT1 = '' & lastact \u00ac= 'blank' Then Do\n             ZERRLM = '** ISPF ignores any command with no action **'\n             lastact = 'blank'\n             End\n          If ZERRLM \u00ac= '' Then Do\n             ZUCMKEY = ''         /* force redisplay of the panel   */\n             CURSOR = 'ZETACT1'   /* position cursor on ZETACT1     */\n             ZERRHM = '*'\n             ZERRSM = ''\n             ZERRALRM = 'YES'     /* alarm with the message         */\n             \"SETMSG MSG(ISRZ002)\"/* standard IBM message           */\n             Iterate dispno       /* redisplay the panel            */\n             End\n          End\n       /*------------------------------------------*/\n       /* checking that a Description was supplied */\n       /*------------------------------------------*/\n       ZETDESC1 = Overlay(ZETDESC1,Copies(' ',60))\n       ZETDESC = Strip(ZETDESC1||ZETDESC2)\n       If ZETDESC = '' & lastdesc \u00ac= 'blank' Then Do\n          lastdesc = 'blank'\n          ZUCMKEY = ''            /* force redisplay of the panel   */\n          CURSOR = 'ZETDESC1'     /* position cursor on ZETDESC1    */\n          ZERRSM = ''\n          ZERRHM = '*'\n          ZERRLM = '** a Description is strongly recommended **'\n          ZERRALRM = 'YES'        /* alarm with the message         */\n          \"SETMSG MSG(ISRZ002)\"   /* standard IBM message           */\n          Iterate dispno          /* redisplay the panel            */\n          End\n       If CMDTAB = 'TOOL' & Pos('HELP(',ZETDESC) = 0,\n        & lastdesc \u00ac= ZETDESC Then Do\n          lastdesc = ZETDESC\n          ZUCMKEY = ''            /* force redisplay of the panel   */\n          CURSOR = 'ZETDESC2'     /* position cursor on ZETDESC2    */\n          ZERRSM = ''\n          ZERRHM = '*'\n          ZERRLM = \"** TOOL commands should have:\",\n                   \"'HELP(panelname)' in the Description **\"\n          ZERRALRM = 'YES'        /* alarm with the message         */\n          \"SETMSG MSG(ISRZ002)\"   /* standard IBM message           */\n          Iterate dispno          /* redisplay the panel            */\n          End\n       /*-----------------------------------------*/\n       /* check if new command will be overridden */\n       /*-----------------------------------------*/\n       If ZETVERB \u00ac= ov_verb,         /* this been checked already? */\n        | CMDMINL \u00ac= cmd_min_l Then Do\n          ov_verb = ZETVERB\n          cmd_min_l = CMDMINL\n          CMDOVER = ''\n          If ZETACT = '' Then Do  /* ignore commands with no action */\n             over_cmd = ''\n             part_cmds = ''\n             End\n          Else Call ISIT_OVERRIDDEN          /* find overriding cmd */\n          If over_cmd \u00ac= '' Then Do\n             CMDOVER = '-'\n             If part_cmds = '' Then ZERRLM =,\n                'Warning:' ZETVERB 'will be OVERRIDDEN by command',\n                Word(over_cmd,1) 'in table' Word(over_cmd,2)\n             Else Do\n                ZERRLM = 'Warning: it can only be invoked by entering'\n                If Length(part_cmds) < 30 Then\n                   m2 = part_cmds Copies(' ',30) ,\n                   null '        because it is partly overridden by'\n                Else\n                   m2 = part_cmds ' because it is partly overridden by'\n                ZERRLM = ZERRLM m2,\n                         Word(over_cmd,1) 'in table' Word(over_cmd,2)\n                End\n             ZUCMKEY = ''         /* force redisplay of the panel   */\n             ZERRSM = ''\n             ZERRHM = 'ISPFCMHO'  /* HELP for OVERRIDE              */\n             ZERRALRM = 'YES'     /* alarm with the message         */\n             \"SETMSG MSG(ISRZ002)\"         /* show message          */\n             Iterate dispno       /* redisplay the panel            */\n             End\n          End\n       /*--------------------------------------------------*/\n       /* will new command fully override other commands ? */\n       /*--------------------------------------------------*/\n       If ZETVERB \u00ac= fov_verb ,        /*  been checked already? */\n        & part_cmds \u00ac= '' Then Do\n          fov_verb = ZETVERB\n          CMDMINL = cmd_min_l\n          Call DOES_IT_OVERRIDE           /* find overridden cmds */\n          If fovrverb \u00ac= '' Then Do\n             ZERRLM = 'This will override command' fovrverb,\n                      'in table' fovrtabl\n             ZUCMKEY = ''         /* force redisplay of the panel   */\n             ZERRSM = ''\n             ZERRHM = 'ISPFCMHO'  /* HELP for OVERRIDE              */\n             ZERRALRM = 'YES'     /* alarm with the message         */\n             \"SETMSG MSG(ISRZ002)\"         /* show message          */\n             Iterate dispno       /* redisplay the panel            */\n             End\n          End\n       /*---------------------------------------------------*/\n       /* will new command partly override other commands ? */\n       /*---------------------------------------------------*/\n       If ZETVERB \u00ac= pov_verb ,        /*  been checked already? */\n        & part_cmds \u00ac= '' Then Do\n          pov_verb = ZETVERB\n          If povrverb \u00ac= '' Then Do\n             ZERRLM = 'Warning: this will partly override command',\n                      povrverb 'in table' povrtabl\n             ZUCMKEY = ''         /* force redisplay of the panel   */\n             ZERRSM = ''\n             ZERRHM = 'ISPFCMHO'  /* HELP for OVERRIDE              */\n             ZERRALRM = 'YES'     /* alarm with the message         */\n             \"SETMSG MSG(ISRZ002)\"         /* show message          */\n             Iterate dispno       /* redisplay the panel            */\n             End\n          End\n       /*--------------------------------------*/\n       /* checking the ALIASes of this command */\n       /*--------------------------------------*/\n       If ZETVERB \u00ac= al_verb Then Do  /* this been checked already? */\n          al_verb = ZETVERB\n          ZERRLM = ''\n          alias_cmds = FIND_ALIAS_CMDS()/* find ALIASes of this cmd */\n          If Pos(',',alias_cmds) > 0 Then\n             ZERRLM = 'Warning:' alias_cmds ' are ALIAS of' ZCTVERB\n          Else If alias_cmds \u00ac= '' Then\n             ZERRLM = 'Warning:' alias_cmds 'is ALIAS of' ZCTVERB\n          If ZERRLM \u00ac= '' Then Do\n             ZUCMKEY = ''         /* force redisplay of the panel   */\n             ZERRSM = ''\n             ZERRHM = 'ISPFCMHA'  /* HELP for ALIAS                 */\n             ZERRALRM = 'YES'     /* alarm with the message         */\n             \"SETMSG MSG(ISRZ002)\"         /* show message          */\n             Iterate dispno       /* redisplay the panel            */\n             End\n          End\n       /*------------------------------*/\n       /* check effective ALIAS action */\n       /*------------------------------*/\n       If ZETACT1 \u00ac= Left(oldact,60) ,\n        & Word(ZETACT1,1) = 'ALIAS' Then Do\n          oldact = ZETACT1        /* oldact = last action checked   */\n          ZCTACT = ZETACT1        /* used by FIND_ALIAS_ACTION      */\n          Call FIND_ALIAS_ACTION\n          If ZCTVERB = '' Then Do\n             CURSOR = 'ZETACT1'   /* position cursor on ZETACT1     */\n             ZERRLM = 'Warning:' ZETVERB 'will do NOTHING, because',\n                      'ALIAS command' Word(ZETACT1,2) 'not found'\n             ZUCMKEY = ''         /* force redisplay of the panel   */\n             ZERRSM = ''\n             ZERRHM = 'ISPFCMHA'  /* HELP for ALIAS                 */\n             ZERRALRM = 'YES'     /* alarm with the message         */\n             \"SETMSG MSG(ISRZ002)\"         /* show message          */\n             End\n          End\n\n       End                        /* end of: Do Until ZUMKEY \u00ac= ''  */\n    actword = ''\n    lastdesc = ''\n    \"REMPOP\"                      /* remove the Pop-Up window       */\n    \"CONTROL DISPLAY RESTORE\"     /* restore the TBDISPL display    */\n    \"TBTOP\" cmds_table\n    CMDNUM = cmd_num_p\n    \"TBSCAN\" cmds_table \"ARGLIST(CMDNUM)\"      /* refresh variables */\n    Return\n\n/*==================================================================*/\n/* Repeat a command (before the selected row)                       */\n/*------------------------------------------------------------------*/\nREPEAT_CMD:\n /* \"TBGET\" cmds_table  */        /* ensure whole ZCTDESC & ZCTACT  */\n    Call COPY_ZCTVARS             /* copy ZCTxx vars -> ZETxx vars  */\n\n    PNLTITLE = 'Repeat command' ZCTVERB 'in table' CMDTAB'CMDS'\n    PNLTITLE = Centre(PNLTITLE,55)\n    Call UPDATE_PANEL             /* use ISPFCMD4 panel for update  */\n\n    If ZUCMKEY = 'END' Then Do    /*** UPDATE ***/\n       If CUR#SORT \u00ac= 'REAL ORDER' Then\n          Call SORT_CMDSTABL('R')   /* sort into REAL ORDER         */\n\n       Call POSN_CSRS /* position cursor on this row in both tables */\n\n       Call COPY_ZETVARS          /* setup variables for new row    */\n\n       Call ADD_CMD('-')          /* add new command BEFORE ('-')   */\n\n       If CUR#SORT \u00ac= 'REAL ORDER' Then\n         Call SORT_CMDSTABL(CUR#SORT) /* sort back to current order */\n       ZERRSM = 'Command repeated'\n       ZERRLM = 'Command' ZCTVERB 'was repeated in' CMDTAB 'table'\n       updated = 'Y'              /* command list was updated       */\n       End\n    Else Do\n       ZERRSM = 'Repeat cancelled'\n       ZERRLM = 'No new command was created'\n       End\n    ZERRALRM = 'NO'               /* no alarm with the message      */\n    \"SETMSG MSG(ISRZ002)\"         /* standard IBM message           */\n    Return\n\n/*==================================================================*/\n/* Insert a new command (after the selected row)                    */\n/*------------------------------------------------------------------*/\nINSERT_CMD:\n    PNLTITLE = 'Insert command after' ZCTVERB 'in table' CMDTAB'CMDS'\n    PNLTITLE = Centre(PNLTITLE,55)\n\n    ZCTVERB = ''                  /* user must supply command name  */\n    ZCTTRUNC = 0                  /* default to whole command name  */\n    ZCTACT  = ''                  /* user should supply action      */\n    ZCTDESC = ''                  /* user should supply description */\n    Call COPY_ZCTVARS             /* copy ZCTxx vars -> ZETxx vars  */\n\n    Call UPDATE_PANEL             /* use ISPFCMD4 panel for update  */\n    If ZUCMKEY = 'END' Then Do    /*** UPDATE ***/\n       If CUR#SORT \u00ac= 'REAL ORDER' Then\n          Call SORT_CMDSTABL('R')   /* sort into REAL ORDER         */\n\n       Call POSN_CSRS /* position cursor on this row in both tables */\n\n       Call COPY_ZETVARS          /* setup variables for new row    */\n\n       Call ADD_CMD('+')          /* add new command AFTER ('+')    */\n\n       If CUR#SORT \u00ac= 'REAL ORDER' Then\n         Call SORT_CMDSTABL(CUR#SORT) /* sort back to current order */\n       ZERRSM = 'Command inserted'\n       ZERRLM = 'Command' ZETVERB 'was inserted in' CMDTAB 'table'\n       updated = 'Y'              /* command list was updated       */\n       End\n    Else Do\n       ZERRSM = 'Insert cancelled'\n       ZERRLM = 'No new command was created'\n       End\n    ZERRALRM = 'NO'               /* no alarm with the message      */\n    \"SETMSG MSG(ISRZ002)\"         /* standard IBM message           */\n    Return\n\n/*==================================================================*/\n/* Update an existing command                                       */\n/*------------------------------------------------------------------*/\nUPDATE_CMD:\n    PNLTITLE = 'Update command' ZCTVERB 'in table' CMDTAB'CMDS'\n    PNLTITLE = Centre(PNLTITLE,55)\n    If SEL \u00ac= ' ' Then Do         /* SEL = 'U' or 'E'               */\n       Call COPY_ZCTVARS          /* copy ZCTxx vars -> ZETxx vars  */\n       Call CHECK_RELATIONS       /* set msgs for any relationships */\n       End\n    Else                          /* updated in place on ISPFCMD0   */\n       \"CONTROL NONDISPL END\"\n\n    Call UPDATE_PANEL             /* use ISPFCMD4 panel for update  */\n    Call COMPARE_VARS             /* was anything actually updated? */\n    If result = 4 Then Return     /* .. if not - return             */\n\n    If ZUCMKEY = 'END' Then Do    /*** UPDATE ***/\n       If CUR#SORT \u00ac= 'REAL ORDER' Then\n          Call SORT_CMDSTABL('R')   /* sort into REAL ORDER         */\n\n       Call POSN_CSRS /* position cursor on this row in both tables */\n\n       Call COPY_ZETVARS          /* setup variables for new row    */\n\n       \"TBPUT\" upd_table          /* replace row in CMDS table      */\n       If rc = 8 Then             /* if upd_table is empty          */\n          \"TBADD\" upd_table       /* .. add the row instead         */\n       \"TBPUT\" cmds_table \"ORDER\" /* replace row in temp table      */\n\n       If CUR#SORT \u00ac= 'REAL ORDER' Then\n         Call SORT_CMDSTABL(CUR#SORT) /* sort back to current order */\n       ZERRSM = 'Command updated'\n       ZERRLM = 'Command' ZCTVERB 'was updated in' CMDTAB 'table'\n       updated = 'Y'              /* command list was updated       */\n       End\n    Else Do\n       ZERRSM = 'Update cancelled'\n       ZERRLM = ''\n       End\n    ZERRALRM = 'NO'               /* no alarm with the message      */\n    \"SETMSG MSG(ISRZ002)\"         /* standard IBM message           */\n    Return\n\n/*==================================================================*/\n/* Position the cursors on this selected row in both tables         */\n/* - this is done to ensure that we get the correct row in the      */\n/*   live table, in case that table has duplicate identical rows    */\n/* - cmds_table must be sorted in REAL ORDER before this            */\n/* This is used whenever a row is added, deleted or updated.        */\n/*------------------------------------------------------------------*/\nPOSN_CSRS:\n    \"TBTOP\" cmds_table\n    \"TBSCAN\" cmds_table ,           /* find first row of upd_table  */\n             \"ARGLIST(CMDTAB) NOREAD POSITION(firstrow)\"\n    \"TBSKIP\" cmds_table \"NOREAD NUMBER(-1)\"\n\n    \"TBSCAN\" cmds_table ,           /* find position of this row    */\n             \"ARGLIST(CMDNUM) NOREAD POSITION(thisrow)\"\n    rowskip = thisrow - firstrow + 1         /* relative row number */\n\n    /*--------------------------------------------------------------*/\n    /* Find equivalent row in the live table.  We cannot use:       */\n    /*   \"TBSKIP\" upd_table \"NOREAD NUMBER(\"rowskip\")\"              */\n    /* because there could be some pending commands, which we must  */\n    /* ignore.                                                      */\n    /* If the table is empty - CRP will remain at the top.          */\n    /*--------------------------------------------------------------*/\n    Call SAVE_VARS(\"ZCTVERB ZCTTRUNC ZCTACT ZCTDESC\")\n    row = 0\n    upd_table = CMDTAB'CMDS'        /* the live table to be updated */\n    \"TBTOP\" upd_table\n    Do posning = 1 to 9999\n       \"TBSKIP\" upd_table\n       If (Word(ZCTDESC,2) = '<<RUNNING>>' ,\n        |  Word(ZCTDESC,2) = '<<PENDING>>'),\n        &  Word(ZCTDESC,1) <= '99'x ,\n        &  Datatype(C2X(Word(ZCTDESC,1))) = 'NUM'\n           Then Iterate posning        /* pending cmd - try next row*/\n       row = row + 1\n       If row = rowskip Then Leave\n       End\n    Call RESTORE_VARS(\"ZCTVERB ZCTTRUNC ZCTACT ZCTDESC\")\n\n    Return\n\n/*==================================================================*/\n/* Add a command row to temporary and live command tables           */\n/*------------------------------------------------------------------*/\nADD_CMD:\n    Arg dirn                            /* dirn = '-' or '+'        */\n    If dirn = '-' Then\n       \"TBSKIP\" upd_table \"NOREAD NUMBER(-1)\"   /* position cursor  */\n    \"TBADD\" upd_table             /* insert new row in CMD table    */\n    If dirn = '+'\n       Then CMDNUM = CMDNUM + 2   /* create new CMDNUM for the new  */\n       Else CMDNUM = CMDNUM - 2   /* .. row in the temp table       */\n    If dirn = '-' Then\n       \"TBSKIP\" cmds_table \"NOREAD NUMBER(-1)\"\n    \"TBADD\" cmds_table            /* insert new row in temp table   */\n    added_cmd = CMDNUM CMDTAB\n\n    /*---------------------------------------*/\n    /* ensure there are no duplicate CMDNUMs */\n    /*---------------------------------------*/\n    copy_num = Word(COPYPEND,2)\n    Do forever\n       new_cmdnum = CMDNUM\n       \"TBSKIP\" cmds_table \"NUMBER(\"dirn\"1)\" /* previous or next row*/\n       If rc > 0 Then Leave             /* rc = 8 at end of table   */\n       If CMDNUM \u00ac= new_cmdnum Then Leave\n       If dirn = '+'                    /*--------------------------*/\n          Then CMDNUM = CMDNUM + 2      /* CMDNUM was the same, so  */\n          Else CMDNUM = CMDNUM - 2      /* update it & save the row */\n       \"TBPUT\" cmds_table               /*--------------------------*/\n       If copy_num = new_cmdnum Then\n          COPYPEND = Word(COPYPEND,1) CMDNUM Subword(COPYPEND,3)\n       End\n    Return\n\n  /*==================================================================*/\n  /* COPY the selected rows to another table                          */\n  /*   - invoked via the 'COPY' primary command                       */\n  /*------------------------------------------------------------------*/\n  /*  a) user must specify the target table in panel ISPFCMDC         */\n  /*  b) invoke CONFIRM_TABLE to check that the table exists          */\n  /*  c) if table not open, CONFIRM_TABLE invokes CONFIRM_LIBRARY to  */\n  /*     let user confirm one of the following:                       */\n  /*       1) it found the table in the desired library               */\n  /*       2) user must specify the desired library, then either      */\n  /*           - table found (in that library)                        */\n  /*           - if not found, invoke CONFIRM_SAVE for user to        */\n  /*             confirm creation of a new table                      */\n  /*  d) return to COPY_ROWS and allocate library to CMCOPYnn         */\n  /*  e) open/create the target table                                 */\n  /*  f) process the selected rows, copying then to the table         */\n  /*  g) close the target table                                       */\n  /*        1) if it was SHARED NOWRITE then only the in-storage copy */\n  /*           is updated, and user must save it separately from the  */\n  /*           active application in another split screen             */\n  /*        2) if it was SHARED WRITE then it is saved to disk, then  */\n  /*           free ddname CMCOPYnn                                   */\n  /*------------------------------------------------------------------*/\nCOPY_ROWS:\n    /*----------------------------------------------------*/\n    /* 'RESet' command (only) turns off pending copy cmds */\n    /*----------------------------------------------------*/\n    If Pos(ZCMD,'RESET') = 1 & Length(ZCMD) > 2 Then Do\n       Call CANCEL_COPY                    /* 'COPY Cancelled' msg    */\n       Return\n       End\n    COPYCMDS = YES                         /* 'copy cmds' is pending  */\n    /*----------------------------------------------------------*/\n    /* check that some commands have been selected to be copied */\n    /*----------------------------------------------------------*/\n    If ZTDSELS = 0 Then Do\n       ZERRSM = ''\n       ZERRHM = 'ISPFCMHK'\n       ZERRLM = \"  *** Select commands to be copied, or enter 'RES' to\",\n                'CANCEL the copying ***'\n       ZERRALRM = 'YES'                    /* alarm with the message  */\n       \"SETMSG MSG(ISRZ002)\"               /* standard IBM message    */\n       Return\n       End\n    If ZTDSELS = 1 & SEL = '' Then Do      /* ignore 1 auto-selection */\n       ZTDSELS = 0\n       Return\n       End\n    /*-------------------------------------------------*/\n    /* user to specify table name, action and location */\n    /*-------------------------------------------------*/\n    Call CHECK_PFKEYS('ISRSNAB')\n    \"ADDPOP\"\n    \"DISPLAY PANEL(ISPFCMDC)\"        /* Ask user to confirm or cancel */\n    conf_rc = rc          /* user replies: ENTER (rc=0) or END (rc=8) */\n    \"REMPOP\"\n    If conf_rc > 0 Then Do\n       Call CANCEL_COPY                    /* 'COPY Cancelled' msg    */\n       Return\n       End\n    /*------------------------------------------------------------*/\n    /* confirm the table exists; user may need to specify library */\n    /*------------------------------------------------------------*/\n    Parse Value TABNAME With applid 'CMDS'\n    Call CONFIRM_TABLE\n    If result > 0 Then Do\n       Call CANCEL_COPY                    /* 'COPY Cancelled' msg    */\n       Return\n       End\n    /*-----------------------*/\n    /* open the target table */\n    /*-----------------------*/\n    If lib_type = '02'x Then               /* table already active    */\n       \"TBOPEN\" TABNAME \"NOWRITE SHARE\"\n    Else Do                                /* lib_type = '01'x        */\n       /*------------------*/\n       /* allocate library */\n       /*------------------*/\n       If VOLUME \u00ac= ''\n          Then vol_parm = 'VOL('VOLUME')'\n          Else vol_parm = ''\n       Address TSO \"ALLOC FI(CMCOPY\"tsuf\") DSN('\"LIBNAME\"')\",\n          vol_parm \"SHR REUSE\"\n       alloc_rc = rc\n       /*-------------------------------*/\n       /* open (or create) target table */\n       /*-------------------------------*/\n       If create_copy_table = 'YES' Then Do\n          \"TBCREATE\" TABNAME \"LIBRARY(CMCOPY\"tsuf\") WRITE SHARE\",\n             \"NAMES(ZCTVERB ZCTTRUNC ZCTACT ZCTDESC)\"\n          create_copy_table = 'NO'\n          End\n       Else\n          \"TBOPEN\" TABNAME \"LIBRARY(CMCOPY\"tsuf\") WRITE SHARE\"\n       End\n\n    /*--------------------------------------------*/\n    /* copy the selected rows to the target table */\n    /*--------------------------------------------*/\n    cpynum = 0                          /* number of cmds copied      */\n    cpynot = 0                          /* number of cmds not copied  */\n    cpydup = 0                          /* number of cmds duplicated  */\n    cpyrep = 0                          /* number of cmds replaced    */\n    duplist = ','                       /* list of duplicate cmdnames */\n\n    If WHS = '/' Then\n       \"TBTOP\" TABNAME                  /* if commands go at start    */\n    If WHE = '/' Then\n       \"TBBOTTOM\" TABNAME \"NOREAD\"      /* if commands go at end      */\n\n    Do ZTDSELS                        /* repeat for each selected row */\n       Call GET_ROW                   /* get selected row from table  */\n       If SEL \u00ac= '' Then Do           /* bypass auto-selection        */\n          Select\n             When WHA = ' ' Then           /* Insert at start or end  */\n                \"TBADD\" TABNAME\n             Otherwise                     /* Insert alphabetically   */\n                \"TBTOP\" TABNAME\n                \"TBSCAN\" TABNAME \"NOREAD\", /* look for duplicate cmd */\n                   \"ARGLIST(ZCTVERB) CONDLIST(EQ)\"\n                If RC > 0 Then Do\n                   Call COPY_ALPHA   /* position cursor for insertion */\n                   \"TBADD\" TABNAME\n                   End\n                Else Do               /* duplicate command name found */\n                   duplist = duplist || ZCTVERB','\n                   If DUPD = '/' Then Do               /* DUPLICATES */\n                      cpydup = cpydup + 1\n                   /* \"TBSKIP\" TABNAME \"NOREAD NUMBER(-1)\" */\n                      \"TBADD\" TABNAME\n                      End\n                   If DUPR = '/' Then Do               /* REPLACE    */\n                      cpyrep = cpyrep + 1\n                      \"TBPUT\" TABNAME\n                      End\n                   If DUPN = '/' Then Do              /* NOREPLACE    */\n                      cpynot = cpynot + 1\n                      cpynum = cpynum - 1\n                      End\n                   End\n             End\n          cpynum = cpynum + 1\n          End\n       SEL = ''\n       If ZTDSELS > 1 Then\n         \"TBDISPL\" cmds_table         /* get next selected row        */\n       Else Do                        /* no more selected rows        */\n          /*-------------------------------------------------------*/\n          /* if target table is in command list - refresh the list */\n          /*-------------------------------------------------------*/\n          If lib_type = '02'x ,            /* table already active    */\n          & (TABNAME = 'ISPCMDS' | TABNAME = ZAPPLID'CMDS' |,\n             TABNAME = ZUCTPREF'CMDS'  | TABNAME = ZUCTPRE2'CMDS' |,\n             TABNAME = ZUCTPRE3'CMDS'  | TABNAME = ZSCTPREF'CMDS' |,\n             TABNAME = ZSCTPRE2'CMDS'  | TABNAME = ZSCTPRE3'CMDS' )\n            Then ZCMD = 'REFRESH'     /* refresh the command list     */\n            Else ZCMD = ''            /* nothing more to do           */\n          End\n       End\n    ZTDSELS = 0\n\n    /*----------------*/\n    /* create message */\n    /*----------------*/\n    ZERRSM = ''\n    If lib_type = '02'x Then               /* table already active    */\n       ZERRLM = cpynum 'commands copied to active table' TABNAME', but',\n                'not saved to disk.                              '\n    Else                                   /* lib_type = '01'x        */\n       ZERRLM = cpynum 'commands copied to table' TABNAME' in library',\n                LIBNAME\n    duplist = Strip(duplist,,',')\n    If DUPR = '/' & cpyrep > 0 Then                     /* REPLACE    */\n       ZERRLM = ZERRLM cpyrep 'commands replaced:' duplist\n    If DUPN = '/' & cpynot > 0 Then                     /* NOREPLACE  */\n       ZERRLM = ZERRLM cpynot 'commands not replaced:' duplist\n    If DUPD = '/' & cpydup > 0 Then                     /* DUPLICATES */\n       ZERRLM = ZERRLM cpydup 'duplicate commands:' duplist\n    ZERRALRM = 'NO'                     /* no alarm with the message  */\n    \"SETMSG MSG(ISRZ002)\"\n    /*----------*/\n    /* clean up */\n    /*----------*/\n    COPYCMDS = ''                          /* end 'copy cmds pending' */\n    If lib_type = '02'x Then              /* table was already active */\n       \"TBEND\" TABNAME\n    Else Do                             /* table was specially opened */\n       \"TBCLOSE\" TABNAME \"LIBRARY(CMCOPY\"tsuf\")\"\n       If rc > 0 Then Do\n          ZERRLM = 'Error saving table' TABNAME' in library' LIBNAME,\n                   ' return code =' rc\n          ZERRALRM = 'YES'                 /* alarm with the message  */\n          End\n       \"TBOPEN XXXXX LIBRARY(XXX)\"       /* this makes the FREE work  */\n       Address TSO \"FREE FI(CMCOPY\"tsuf\")\"\n       End\n    Return\n\n  /*==================================================================*/\n  /* COPY of selected commands was cancelled - show message           */\n  /*   - invoked by COPY_ROWS                                         */\n  /*------------------------------------------------------------------*/\nCANCEL_COPY:\n    Do ZTDSELS                             /* clear pending selects   */\n       SEL = ''\n       If ZTDSELS = 1 Then Leave\n       \"TBDISPL\" cmds_table\n       End\n    ZTDSELS = 0                            /* nothing more to select  */\n    ZCMD = ''                              /* reset primary command   */\n    COPYCMDS = ''                          /* end 'copy cmds pending' */\n    ZERRSM = 'COPY Cancelled'\n    ZERRLM = 'COPYING the selected commands to another table',\n             'was CANCELLED'\n    ZERRALRM = 'YES'                       /* alarm with the message  */\n    \"SETMSG MSG(ISRZ002)\"\n    Return\n\n  /*==================================================================*/\n  /* Position cursor for alphabetical copying of rows, when no exact  */\n  /* matching command name is found.                                  */\n  /*   - the basic logic is the same as in LOCATE_ROW                 */\n  /*   - invoked only by COPY_ROWS                                    */\n  /*------------------------------------------------------------------*/\nCOPY_ALPHA:\n    Parse Var oldvars cpyverb'|' .     /* oldvars from GET_ROW        */\n    ZCTVERB = Left(cpyverb,1)'*'\n    \"TBSCAN\" TABNAME \"NOREAD\",         /* scan for same 1st character */\n      \"ARGLIST(ZCTVERB) CONDLIST(EQ) ROWID(rowid)\"\n    If RC > 0\n       Then rowid = 0\n       Else \"TBSKIP\" TABNAME \"NOREAD NUMBER(-1)\"        /* row before */\n    ZCTVERB = cpyverb\n    \"TBSCAN\" TABNAME \"NOREAD\",       /* find row that should be after */\n      \"ARGLIST(ZCTVERB) CONDLIST(GT)\"\n    If RC > 0 & rowid > 0 Then Do                     /* no row found */\n       \"TBSKIP\" TABNAME \"NOREAD ROW(\"rowid\")\"\n       ZCTVERB = Left(cpyverb,1)'*'\n       \"TBSCAN\" TABNAME \"NOREAD\",        /* scan for another 1st char */\n          \"ARGLIST(ZCTVERB) CONDLIST(NE)\"\n       End\n    If RC = 0 Then            /* location found - csr on previous row */\n       \"TBSKIP\" TABNAME \"NOREAD NUMBER(-1)\"\n    Else                      /* location not found - go to bottom    */\n       \"TBBOTTOM\" TABNAME \"NOREAD\"\n    ZCTVERB = cpyverb                /* restore correct ZCTVERB value */\n    Return\n\n  /*==================================================================*/\n  /* MOVE or COPY a command                                           */\n  /*------------------------------------------------------------------*/\nCOPY_CMD:\n    /*-------------------------------------------------*/\n    /* building 'copy pending' information             */\n    /* - note that conflicting move/copy line commands */\n    /*   are prevented by the ISPFCMD0 panel, or they  */\n    /*   are ignored here (if there were more pending  */\n    /*   line commands and the user pressed PF3|)      */\n    /*-------------------------------------------------*/\n    If SEL = 'A' | SEL = 'B' Then Do\n       If Word(COPYPEND,1) = 'after' ,\n        | Word(COPYPEND,1) = 'before' Then Return\n       If SEL = 'A' Then\n          COPYPEND =   COPYPEND 'after' ZCTVERB CMDNUM CMDTAB CMDTORD\n       If SEL = 'B' Then\n          COPYPEND =   COPYPEND 'before' ZCTVERB CMDNUM CMDTAB CMDTORD\n       End\n    If SEL = 'C' | SEL = 'M' Then Do\n       If Word(COPYPEND,1) = 'COPY',\n        | Word(COPYPEND,1) = 'MOVE' Then Return\n       If SEL = 'C' Then\n          COPYPEND = 'COPY' CMDNUM COPYPEND\n       If SEL = 'M' Then\n          COPYPEND = 'MOVE' CMDNUM COPYPEND\n       End\n\n    If Words(COPYPEND) < 6 Then Return\n\n    /*-----------------------------*/\n    /* process a pending move/copy */\n    /*-----------------------------*/\n    Parse Var COPYPEND c_type c_row c_dirn c_name c_where c_tab c_tord\n    COPYPEND = ''\n\n    CMDNUM = c_row\n    \"TBTOP\" cmds_table\n    \"TBSCAN\" cmds_table \"ARGLIST(CMDNUM)\"\n\n    c_verb = ZCTVERB\n    If c_type = 'COPY' Then Do\n       PNLTITLE = 'Copy command' c_verb 'in table' CMDTAB'CMDS'\n       PNLTITLE = Centre(PNLTITLE,55)\n       Call COPY_ZCTVARS          /* copy ZCTxx vars -> ZETxx vars  */\n       If c_dirn = 'after' Then\n          CMDNUM = c_where + 1\n       If c_dirn = 'before' Then\n          CMDNUM = c_where - 1\n       CMDTAB = c_tab\n       Call UPDATE_PANEL          /* use ISPFCMD4 panel for update  */\n       End\n\n    If ZUCMKEY = 'END' | c_type = 'MOVE' Then Do      /*** UPDATE ***/\n       If CUR#SORT \u00ac= 'REAL ORDER' Then\n          Call SORT_CMDSTABL('R')   /* sort into REAL ORDER         */\n\n       If c_type = 'MOVE' Then Do\n          Call POSN_CSRS\n          \"TBDELETE\" upd_table\n          \"TBDELETE\" cmds_table\n          End\n       If c_type = 'COPY' Then\n          Call COPY_ZETVARS       /* setup variables for new row    */\n\n       CMDTAB = c_tab\n       CMDTORD = c_tord\n       CMDNUM = c_where\n       Call POSN_CSRS          /* position cursors for ADD_CMD   */\n\n       If c_dirn = 'after' Then\n          Call ADD_CMD('+')\n       If c_dirn = 'before' Then\n          Call ADD_CMD('-')\n\n       If CUR#SORT \u00ac= 'REAL ORDER' Then\n         Call SORT_CMDSTABL(CUR#SORT) /* sort back to current order */\n       ZERRSM = c_type 'done'\n       ZERRLM = c_type 'command' c_verb c_dirn 'command' c_name 'in',\n                c_tab 'table'\n       updated = 'Y'              /* command list was updated       */\n       End\n    Else Do\n       ZERRSM = c_type 'cancelled'\n       ZERRLM = c_type 'of command' c_verb 'was cancelled'\n       End\n    ZERRALRM = 'NO'               /* no alarm with the message      */\n    \"SETMSG MSG(ISRZ002)\"         /* standard IBM message           */\n    c_type = ''                   /* checked by UPDATE_PANEL        */\n    Return\n\n/*==================================================================*/\n/* View the details of a command                                    */\n/*   use View Command Definition panel derived from ISPUCMXR panel  */\n/*------------------------------------------------------------------*/\nVIEW_CMD:\n    PNLTITLE = 'View command' ZCTVERB 'in table' CMDTAB'CMDS'\n    PNLTITLE = Centre(PNLTITLE,55)\n\n    Call COPY_ZCTVARS             /* copy ZCTxx vars -> ZETxx vars  */\n\n    Call CHECK_RELATIONS          /* setup any relationship messages*/\n\n    \"CONTROL DISPLAY SAVE\"        /* save the TBDISPL display       */\n    \"ADDPOP\"                      /* next panel in Pop-Up window    */\n    Do While rc = 0\n       \"DISPLAY PANEL(ISPFCMD5)\"  /* View command definition: panel */\n       End\n    \"REMPOP\"                      /* remove the Pop-Up window       */\n    \"CONTROL DISPLAY RESTORE\"     /* restore the TBDISPL display    */\n    Return\n\n/*==================================================================*/\n/* Check relationships to this command                              */\n/*   called by VIEW_CMD and UPDATE_PANEL                            */\n/*------------------------------------------------------------------*/\nCHECK_RELATIONS:\n    cmd_num_r = CMDNUM                           /* where am I now? */\n    ZERRLM = ''\n    If ZCTACT = '' Then Do  /* ISPF ignores commands with no action */\n       over_cmd = ''\n       part_cmds = ''\n       End\n    Else Call ISIT_OVERRIDDEN             /* find overriding cmd(s) */\n    Select\n      When ZCTACT = '' Then\n         ZERRLM = '** ISPF will ignore this command because it',\n                  'has NO ACTION'\n      When Words(cmd_list) > 1 & over_cmd = '' Then Do\n         If ZERRLM \u00ac= '' Then ZERRLM = ZERRLM Copies(' ',50)\n         ZERRLM = ZERRLM '** This command is invoked by:'cmd_list\n         End\n      When over_cmd \u00ac= '' & part_cmds = '' Then Do\n         If ZERRLM \u00ac= '' Then ZERRLM = ZERRLM Copies(' ',50)\n         ZERRLM = ZERRLM '** This command cannot be invoked (directly)',\n                         'because it is OVERRIDDEN by   ',\n                         null '  command',\n                         Word(over_cmd,1) 'in table' Word(over_cmd,2)\n         End\n      When over_cmd \u00ac= '' & part_cmds \u00ac= '' Then Do\n         If ZERRLM \u00ac= '' Then ZERRLM = ZERRLM Copies(' ',50)\n         m1 = '** This command can be invoked only by entering'\n         If Length(part_cmds) < 30 Then\n            m2 = part_cmds Copies(' ',30) ,\n            null '  because it is partly overridden by'\n         Else\n            m2 = part_cmds ' because it is partly overridden by'\n         ZERRLM = m1 m2 Word(over_cmd,1) 'in table' Word(over_cmd,2)\n         End\n      Otherwise\n      End\n    If part_cmds \u00ac= '' Then Do\n       Call DOES_IT_OVERRIDE\n       If fovrverb \u00ac= '' Then Do\n          If ZERRLM \u00ac= '' Then ZERRLM = ZERRLM Copies(' ',50)\n          ZERRLM = ZERRLM '** It overrides command' fovrverb,\n                          'in table' fovrtabl\n          End\n       If povrverb \u00ac= '' Then Do\n          If ZERRLM \u00ac= '' Then ZERRLM = ZERRLM Copies(' ',50)\n          ZERRLM = ZERRLM '** It partly overrides command' povrverb,\n                          'in table' povrtabl\n          End\n       End\n    alias_cmds = FIND_ALIAS_CMDS()  /* find ALIASes of this command */\n    If Pos(',',alias_cmds) > 0 Then Do\n       If ZERRLM \u00ac= '' Then ZERRLM = ZERRLM Copies(' ',50)\n       ZERRLM = ZERRLM '** Commands:' alias_cmds ' are ALIAS of' ZCTVERB\n       End\n    Else If alias_cmds \u00ac= '' Then Do\n       If ZERRLM \u00ac= '' Then ZERRLM = ZERRLM Copies(' ',50)\n       ZERRLM = ZERRLM '** Command:' alias_cmds 'is ALIAS of' ZCTVERB\n       End\n    CMDNUM = cmd_num_r\n    Select\n      When Word(ZCTACT,1) = 'ALIAS' Then Do\n         Call FIND_ALIAS_ACTION\n         If ZCTVERB = '' Then Do\n            If ZERRLM \u00ac= '' Then ZERRLM = ZERRLM Copies(' ',72)\n            ZERRLM = ZERRLM ,\n                     '** This command does NOTHING because it is',\n                     'an ALIAS of command:' srch_alias Copies(' ',20),\n                     '              ' null ' ',\n                     'which is not after' ZETVERB 'in the ISPF command',\n                     'search order'\n            End\n         Else Do\n            If Word(ZCTACT,1) = 'SETVERB' Then Do\n               ZCTVERB = ZCTVERB Subword(ZCTACT,2)\n               ZCTACT = 'SETVERB'\n               End\n            If Length(ZERRLM) < 120 Then\n               msg = '** The effective action of this',\n                     'command is to invoke' Copies(' ',30),\n                     null '  Command:' ZCTVERB     Copies(' ',62),\n                     null '  Table  :' CMDTAB'CMDS'  Copies(' ',59),\n                     null '  Action :' ZCTACT\n            Else\n               msg = '** The effective action is to invoke command',\n                     ZCTVERB 'from table' CMDTAB'CMDS.         ',\n                     null '  Action :' ZCTACT\n            ZERRLM = ZERRLM Copies(' ',72) , /* start new line of msg */\n                     msg\n            End\n         End\n      Otherwise\n      End\n    If ZERRLM \u00ac= '' Then Do\n       If Right(ZERRLM,10) = '          ' Then\n          ZERRSM = ''\n       ZERRHM = '*'\n       ZERRALRM = 'NO .WINDOW=NORESP'\n       \"SETMSG MSG(ISRZ002)\"\n       End\n /* Say Length(ZERRLM)        maximum of 512 bytes */\n\n    CMDNUM = cmd_num_r                          /* now where was I? */\n    Return\n\n/*==================================================================*/\n/*  Find the effective action for an ALIAS command                  */\n/*  - this is called by VIEW_CMD and INVOKE_CMD                     */\n/*------------------------------------------------------------------*/\nFIND_ALIAS_ACTION:\n    srch_alias = Word(ZCTACT,2)       /* verb to search for         */\n    aparm = Subword(ZCTACT,3)         /* any parm to be passed      */\n\n    If CUR#SORT \u00ac= 'REAL ORDER' Then\n       Call SORT_CMDSTABL('R')        /* sort into REAL ORDER       */\n    \"TBTOP\" cmds_table\n    \"TBSCAN\" cmds_table \"NOREAD ARGLIST(CMDNUM)\" /* position cursor */\n    If SEL = 'R' Then                 /* repeated cmd maybe ALIAS   */\n       \"TBSKIP\" cmds_table \"NOREAD NUMBER(-1)\" /* .. of the old cmd */\n\n    lsa = Length(srch_alias)\n    Do al = 1 to 9999\n       \"TBSKIP\" cmds_table\n       If rc > 0 Then Do              /* rc=8 at end of table       */\n          ZCTVERB = ''\n          Leave al\n          End\n       If ZCTTRUNC = 0 Then ZCTTRUNC = Length(Strip(ZCTVERB))\n       If Left(ZCTVERB,lsa) = srch_alias,\n        & ZCTTRUNC <= lsa Then Do\n          If Word(ZCTACT,1) \u00ac= 'ALIAS' Then Leave al\n          srch_alias = Word(ZCTACT,2) /* it is an ALIAS of an ALIAS */\n          If Subword(ZCTACT,3) \u00ac= '' Then\n             aparm = Subword(ZCTACT,3) /* ISPF only knows last parm|*/\n          lsa = Length(srch_alias)\n          Iterate al                  /* follow the alias chain     */\n          End\n       End\n    If aparm \u00ac= '' Then Do\n       zp = Pos('&ZPARM',ZCTACT)      /* does the action use &ZPARM?*/\n       If zp > 0 Then                 /* parm replaces the '&ZPARM' */\n          ZCTACT = Left(ZCTACT,zp-1)||aparm||Substr(ZCTACT,zp+6)\n       Else\n          ZCTACT = ZCTACT aparm       /* add the parm to the action */\n       End\n\n    If CUR#SORT \u00ac= 'REAL ORDER' Then\n       Call SORT_CMDSTABL(CUR#SORT)   /* sort back to current order */\n    Return\n\n/*==================================================================*/\n/*  Make list of all commands that are ALIAS of ZCTVERB             */\n/*  - this is called by VIEW_CMD and UPDATE_PANEL                   */\n/*------------------------------------------------------------------*/\nFIND_ALIAS_CMDS:\n    alias_cmds = ''\n    If CUR#SORT \u00ac= 'REAL ORDER' Then\n       Call SORT_CMDSTABL('R')        /* sort into REAL ORDER       */\n\n    \"TBTOP\" cmds_table\n    cmd_num_a = CMDNUM\n    \"TBSCAN\" cmds_table \"ARGLIST(CMDNUM)\"        /* position cursor */\n\n    /* save some details about this command */\n    If CMDTRUNC = ''\n       Then this_len = Length(Strip(ZCTVERB))/* # of required chars */\n       Else this_len = Length(CMDTRUNC)\n    this_verb = ZCTVERB\n    this_over = CMDOVER                  /* is this cmd overridden? */\n\n    /*--------------------------------------------------------------*/\n    /* Check all the previous commands for 'ALIAS this_verb'.       */\n    /*  a) If this_cmd is overridden, we must stop when we reach    */\n    /*     the overriding command.                                  */\n    /*  b) When checking ALIAS, we must allow for truncation.  The  */\n    /*     matching name maybe shorter if this_verb can be truncated*/\n    /*--------------------------------------------------------------*/\n    Do alsrch = 1 to 9999\n       \"TBSKIP\" cmds_table \"NUMBER(-1)\"        /* get previous row  */\n       If rc > 0 Then Leave\n       If this_over = '-',               /* this cmd is overridden  */\n        & CMDOVER \u00ac= '' Then Do          /* possibly overriding cmd */\n          If CMDTRUNC = ''\n             Then ZCT_len = Length(Strip(ZCTVERB)) /* # req'd chars */\n             Else ZCT_len = Length(CMDTRUNC)\n          If Pos(this_verb,ZCTVERB) = 1 ,\n           & this_len >= ZCT_len\n             Then Leave alsrch          /* it is the overriding cmd */\n          End\n       If CMDOVER = '-' Then             /* overridden command      */\n          Iterate alsrch\n       If Word(ZCTACT,1) = 'ALIAS' Then Do\n          alias_verb = Word(ZCTACT,2)\n          If Pos(alias_verb,this_verb) = 1 ,   /* names match       */\n           & Length(alias_verb) >= this_len    /* truncation OK?    */\n             Then alias_cmds = ZCTVERB','alias_cmds\n          End\n       End\n    alias_cmds = Strip(alias_cmds,,',')\n\n    If CUR#SORT \u00ac= 'REAL ORDER' Then\n       Call SORT_CMDSTABL(CUR#SORT)   /* sort back to current order */\n\n    \"TBTOP\" cmds_table\n    CMDNUM = cmd_num_a\n    \"TBSCAN\" cmds_table \"ARGLIST(CMDNUM)\"      /* refresh variables */\n    Return alias_cmds\n\n/*==================================================================*/\n/*  Look for overriding command(s)                                  */\n/*  - creates a) list of overriding cmds & their tables: over_cmd   */\n/*            b) list of cmds that can invoke this one : part_cmds  */\n/*  - this is called by CHECK_RELATIONS and UPDATE_PANEL            */\n/*------------------------------------------------------------------*/\nISIT_OVERRIDDEN:\n    If CUR#SORT \u00ac= 'REAL ORDER' Then\n       Call SORT_CMDSTABL('R')        /* sort into REAL ORDER       */\n\n    valid_cmds = '.'\n    valid_lengths = ''\n    oververb = ''\n    overtabl = ''\n    cmd_list = ''\n    cmd_numo = CMDNUM\n    /*---------------------------------------------------------------*/\n    /* scan for each possible truncation of our command, looking for */\n    /* the first command that matches                                */\n    /*---------------------------------------------------------------*/\n/*  Say 'Verb' ZETVERB 'has CMDMINL =' CMDMINL */\n/*  Say 'Verb' ZETVERB 'has length:' Length(ZETVERB) */\n    Do ovsrch = CMDMINL To Length(Strip(ZETVERB))/* make list of all */\n       cmd_list = cmd_list Left(ZETVERB,ovsrch) /* poss. truncations */\n       End\n    \"TBTOP\" cmds_table\n    Do ovsrch = Words(cmd_list) To 1 By -1\n       ZCTVERB = Word(cmd_list,ovsrch)'*'\n       CMDMINL = Length(ZCTVERB) - 1\n       ZCTACT  = ''\n       \"TBSCAN\" cmds_table \"ARGLIST(ZCTVERB,CMDMINL,ZCTACT)\",\n                           \"CONDLIST(EQ,LE,NE)\"\n       If CMDNUM >= cmd_numo Then Do      /* no other cmd before it  */\n          valid_cmds = Word(cmd_list,ovsrch) 'or' valid_cmds\n          valid_lengths = Length(Word(cmd_list,ovsrch))||valid_lengths\n          End\n       Else                               /* scan found another cmd  */\n          If Pos(Strip(ZCTVERB)',',oververb) = 0 Then Do    /* new?  */\n             oververb = Strip(ZCTVERB)','oververb  /* add it to list */\n             overtabl = CMDTAB','overtabl\n             End\n       \"TBTOP\" cmds_table\n       End\n    overtabl = Strip(overtabl,,',')\n    If overtabl \u00ac= '' & Pos(',',overtabl) = 0 Then\n       overtabl = overtabl'CMDS'           /* only one table */\n    over_cmd = Strip(oververb,,',') overtabl\n    Parse Var valid_cmds part_cmds ' or .'\n    If part_cmds = '.' Then part_cmds = ''\n /*\n    say part_cmds\n    say valid_lengths\n */\n\n    If CUR#SORT \u00ac= 'REAL ORDER' Then\n       Call SORT_CMDSTABL(CUR#SORT)    /* sort back to current order */\n\n    \"TBTOP\" cmds_table\n    CMDNUM = cmd_numo\n    \"TBSCAN\" cmds_table \"ARGLIST(CMDNUM)\"       /* refresh variables */\n    Return\n\n/*==================================================================*/\n/*  Look for overridden command(s)                                  */\n/*  - uses    list of cmds that can invoke this one : part_cmds     */\n/*  - creates list of overridden cmds & their tables: dead_cmds     */\n/*  - this is called by CHECK_RELATIONS and UPDATE_PANEL            */\n/*------------------------------------------------------------------*/\nDOES_IT_OVERRIDE:\n    If CUR#SORT \u00ac= 'REAL ORDER' Then\n       Call SORT_CMDSTABL('R')        /* sort into REAL ORDER       */\n\n    fovrverb = ''                /* list of fully-overridden verbs  */\n    fovrtabl = ''                /* list of tables for fovrverb's   */\n    povrverb = ''                /* list of partly-overridden verbs */\n    povrtabl = ''                /* list of tables for povrverb's   */\n    this_verb = ZETVERB\n    this_num = CMDNUM\n    \"TBTOP\" cmds_table\n    CMDNUM = this_num\n    \"TBSCAN\" cmds_table \"ARGLIST(CMDNUM) CONDLIST(EQ) NOREAD\"\n    this_part = Word(part_cmds,1)        /* shortest valid command */\n    this_leng = Left(valid_lengths,1)    /* length of the shortest */\n\n    Do scan = 1 To 999\n       ZCTVERB = this_part'*'\n       ZCTACT = ''\n       \"TBSCAN\" cmds_table \"ARGLIST(ZCTVERB,ZCTACT)\",\n                           \"CONDLIST(EQ,NE)\"\n       If rc = 0 Then Do\n          /*-------------------------------------------------*/\n          /* update lists of fully- & partly-overridden cmds */\n          /*-------------------------------------------------*/\n          ZCTVERB = Strip(ZCTVERB)\n          found_lengths = '' /* list of valid lengths for found verb */\n          Do jj = CMDMINL To Length(ZCTVERB)\n             found_lengths = found_lengths||jj\n             End\n          If Length(ZCTVERB) <= Length(this_verb) Then Do\n             If Pos(ZCTVERB,this_verb) = 1 Then Do  /* name matches  */\n                If Pos(found_lengths,valid_lengths) > 0 Then Do\n                   fovrverb = fovrverb','ZCTVERB      /* add to list */\n                   fovrtabl = fovrtabl','CMDTAB\n                   End\n                Else Do                         /* partly overridden */\n                   povrverb = povrverb','ZCTVERB      /* add to list */\n                   povrtabl = povrtabl','CMDTAB\n                   End\n                End\n             End\n          Else Do         /* found verb name doesn't match this_verb */\n             If CMDMINL <= this_leng Then Do  /* partly overridden */\n                povrverb = povrverb','ZCTVERB      /* add to list */\n                povrtabl = povrtabl','CMDTAB\n                End\n             Else Do ll = 2 To Length(valid_lengths)\n                cleng = Substr(valid_lengths,ll,1) /* get next length */\n                If CMDMINL > cleng Then Iterate ll\n                If Left(ZCTVERB,cleng) = Left(this_verb,cleng) Then Do\n                   povrverb = povrverb','ZCTVERB      /* add to list */\n                   povrtabl = povrtabl','CMDTAB\n                   End\n                Leave ll\n                End\n             End\n          End\n       If rc = 8 Then Leave\n       End\n    /*-----------------------------------------------------------*/\n    /* cleanup the lists - they are displayed in an ISPF message */\n    /*-----------------------------------------------------------*/\n    fovrverb = Strip(fovrverb,,',')\n    fovrtabl = Strip(fovrtabl,,',')\n    If Pos(',',fovrtabl) = 0 Then          /* only one table */\n       fovrtabl = fovrtabl'CMDS'\n    povrverb = Strip(povrverb,,',')\n    povrtabl = Strip(povrtabl,,',')\n    If Pos(',',povrtabl) = 0 Then          /* only one table */\n       povrtabl = povrtabl'CMDS'\n\n    If CUR#SORT \u00ac= 'REAL ORDER' Then\n       Call SORT_CMDSTABL(CUR#SORT)    /* sort back to current order */\n\n    \"TBTOP\" cmds_table\n    CMDNUM = cmd_numo\n    \"TBSCAN\" cmds_table \"ARGLIST(CMDNUM)\"       /* refresh variables */\n    Return\n\n/*==================================================================*/\n/* Exclude a command                                                */\n/*------------------------------------------------------------------*/\nEXCLUDE_CMD:\n    CMDSEL = ' '\n    \"TBPUT\" cmds_table \"ORDER\"    /* update CMDSEL                  */\n    Return\n\n/*==================================================================*/\n/* Display HELP panel (if one is defined in ZCTDESC)                */\n/*------------------------------------------------------------------*/\nDISPLAY_HELP:\n    Parse Upper Var ZCTDESC . 'HELP(' hpanl ')'\n    If hpanl = '' & CMDTAB = 'ISP' Then\n       Call ISPCMDS_HELP      /* standard IBM help for this command */\n    If ZCTDESC = '<<< no commands in this table >>>' ,\n     & ZCTVERB = '--------' Then hpanl = 'ISPFCMHE'\n    If hpanl \u00ac= '' Then Do\n       CMDHLPNM = ZCTVERB\n       CMDHLPDE = ZCTDESC\n       CMDHLPTB = CMDTAB\n       \"VPUT (CMDHLPNM CMDHLPDE CMDHLPTB) SHARED\"\n       \"SELECT PGM(ISPTUTOR) PARM(\"hpanl\")\"\n       End\n    Else Do\n       ZERRSM = 'No HELP defined'\n       ZERRLM = 'No HELP panel defined in the description of command',\n                 ZCTVERB\n       ZERRALRM = 'YES'             /* alarm with the message       */\n       \"SETMSG MSG(ISRZ002)\"        /* standard IBM message         */\n       End\n    Return\n\n/*==================================================================*/\n/* Select appropriate (standard IBM) HELP panel for this command    */\n/* - most of these are the ones specified in panel ISP01305         */\n/* - this is up to date for ISPF 5.7 & z/OS 1.7                     */\n/*------------------------------------------------------------------*/\nISPCMDS_HELP:\n    Select\n      When ZCTVERB = 'ACTIONS'  Then hpanl = 'ISP01370'\n      When ZCTVERB = 'AUTOTYPE' Then hpanl = 'ISR00900'\n      When ZCTVERB = 'BACKWARD' Then hpanl = 'ISP01316'\n      When ZCTVERB = 'BOTTOM'   Then hpanl = 'ISP01316'\n      When ZCTVERB = 'CANCEL'   Then hpanl = 'ISP01390'\n      When ZCTVERB = 'CMDE'     Then hpanl = 'ISPCMDEH'\n      When ZCTVERB = 'COLOR'    Then hpanl = 'ISP06200'\n      When ZCTVERB = 'CRETRIEV' Then hpanl = 'ISP01391'\n      When ZCTVERB = 'CUAATTR'  Then hpanl = 'ISP06100'\n      When ZCTVERB = 'CURSOR'   Then hpanl = 'ISP01318'\n      When ZCTVERB = 'DDLIST'   Then hpanl = 'ISRDDNPT'\n      When ZCTVERB = 'DOWN'     Then hpanl = 'ISP01316'\n      When ZCTVERB = 'DSLIST'   Then hpanl = 'ISR34099'\n      When ZCTVERB = 'DTEST'    Then hpanl = 'ISP01904'\n      When ZCTVERB = 'END'      Then hpanl = 'ISP01313'\n      When ZCTVERB = 'ENVIRON'  Then hpanl = 'ISP05700'\n      When ZCTVERB = 'EPDF'     Then hpanl = 'ISREPDFT'\n      When ZCTVERB = 'EXHELP'   Then hpanl = 'ISP01367'\n      When ZCTVERB = 'EXIT'     Then hpanl = 'ISP01392'\n      When ZCTVERB = 'EXPAND'   Then hpanl = 'ISP01324'\n      When ZCTVERB = 'FKA'      Then hpanl = 'ISP01326'\n      When ZCTVERB = 'FORWARD'  Then hpanl = 'ISP01316'\n      When ZCTVERB = 'HELP'     Then hpanl = 'ISP01362'\n   /* When ZCTVERB = 'INT'      Then hpanl = '????????' */\n      When ZCTVERB = 'ISPDTLC'  Then hpanl = 'ISP0300'\n      When ZCTVERB = 'ISPFVAR'  Then hpanl = 'ISP01344'\n   /* When ZCTVERB = 'ISPFTTRC' Then hpanl = '????????' */\n      When ZCTVERB = 'ISPFWORK' Then hpanl = 'ISR00400'\n      When ZCTVERB = 'ISPLIBD'  Then hpanl = 'ISP01375'\n      When ZCTVERB = 'ISPPREP'  Then hpanl = 'ISP01340'\n   /* When ZCTVERB = 'ISPVCALL' Then hpanl = '????????' */\n      When ZCTVERB = 'ISRRLIST' Then hpanl = 'ISP01346'\n      When ZCTVERB = 'ISRROUTE' Then hpanl = 'ISP01348'\n      When ZCTVERB = 'KEYLIST'  Then hpanl = 'ISP01380'\n      When ZCTVERB = 'KEYS'     Then hpanl = 'ISP01320'\n      When ZCTVERB = 'KEYSHELP' Then hpanl = 'ISP01367'\n      When ZCTVERB = 'LEFT'     Then hpanl = 'ISP01316'\n      When ZCTVERB = 'LIST'     Then hpanl = 'ISP90200'\n      When ZCTVERB = 'LOG'      Then hpanl = 'ISP90200'\n      When ZCTVERB = 'MSGID'    Then hpanl = 'ISP01354'\n   /* When ZCTVERB = 'NRETRIEV' Then hpanl = '????????' */\n      When ZCTVERB = 'PANELID'  Then hpanl = 'ISP01322'\n      When ZCTVERB = 'PFSHOW'   Then hpanl = 'ISP01326'\n      When ZCTVERB = 'PRINTG'   Then hpanl = 'ISP05600'\n      When ZCTVERB = 'PRINT'    Then hpanl = 'ISP01319'\n      When ZCTVERB = 'PRINT-HI' Then hpanl = 'ISP01319'\n      When ZCTVERB = 'PRINTL'   Then hpanl = 'ISP01325'\n      When ZCTVERB = 'PRINTLHI' Then hpanl = 'ISP01325'\n      When ZCTVERB = 'PSCOLOR'  Then hpanl = 'ISP06100'\n      When ZCTVERB = 'RCHANGE'  Then hpanl = 'ISP01315'\n      When ZCTVERB = 'RETURN'   Then hpanl = 'ISP01314'\n      When ZCTVERB = 'RFIND'    Then hpanl = 'ISP01315'\n      When ZCTVERB = 'REFADDD'  Then hpanl = 'ISR00315'\n      When ZCTVERB = 'REFADDL'  Then hpanl = 'ISR00315'\n      When ZCTVERB = 'REFACTD'  Then hpanl = 'ISR00315'\n      When ZCTVERB = 'REFACTL'  Then hpanl = 'ISR00315'\n      When ZCTVERB = 'REFLISTD' Then hpanl = 'ISR00315'\n      When ZCTVERB = 'REFLISTL' Then hpanl = 'ISR00315'\n      When ZCTVERB = 'REFOPEND' Then hpanl = 'ISR00315'\n      When ZCTVERB = 'REFOPENL' Then hpanl = 'ISR00315'\n      When ZCTVERB = 'RESIZE'   Then hpanl = 'ISP01377'\n      When ZCTVERB = 'RETF'     Then hpanl = 'ISP01360'\n      When ZCTVERB = 'RETP'     Then hpanl = 'ISP01360'\n      When ZCTVERB = 'RETRIEVE' Then hpanl = 'ISP01360'\n      When ZCTVERB = 'RETURN'   Then hpanl = 'ISP01314'\n      When ZCTVERB = 'RIGHT'    Then hpanl = 'ISP01316'\n      When ZCTVERB = 'SAREA'    Then hpanl = 'ISPSAMHP'\n      When ZCTVERB = 'SCRNAME'  Then hpanl = 'ISPSM940'\n      When ZCTVERB = 'SETTINGS' Then hpanl = 'ISPSM000'\n      When ZCTVERB = 'SPLIT'    Then hpanl = 'ISP01312'\n      When ZCTVERB = 'SPLITV'   Then hpanl = 'ISP01330'\n      When ZCTVERB = 'START'    Then hpanl = 'ISP01361'\n      When ZCTVERB = 'SWAP'     Then hpanl = 'ISP01317'\n      When ZCTVERB = 'SWITCH'   Then hpanl = 'ISP01358'\n      When ZCTVERB = 'SYSNAME'  Then hpanl = 'ISP01327'\n      When ZCTVERB = 'TOP'      Then hpanl = 'ISP01316'\n      When ZCTVERB = 'TSO'      Then hpanl = 'ISP01321'\n      When ZCTVERB = 'TSOCMD'   Then hpanl = 'ISR60010'\n      When ZCTVERB = 'TSOGUI'   Then hpanl = 'ISP01384'\n      When ZCTVERB = 'TUTOR'    Then hpanl = 'ISP00000'\n      When ZCTVERB = 'UP'       Then hpanl = 'ISP01316'\n      When ZCTVERB = 'USERID'   Then hpanl = 'ISP01328'\n      When ZCTVERB = 'WINDOW'   Then hpanl = 'ISP01368'\n      When ZCTVERB = 'WS'       Then hpanl = 'ISP01388'\n      When ZCTVERB = 'WSCON'    Then hpanl = 'ISP01394'\n      When ZCTVERB = 'WSDISCON' Then hpanl = 'ISP01396'\n      When ZCTVERB = 'ZKEYS'    Then hpanl = 'ISP05300'\n      Otherwise hpanl = 'ISP01305'\n      End\n    Return\n\n/*==================================================================*/\n/* Invoke a command                                                 */\n/* (&ZPARM is taken from the command line or from panel ISPFCMD6)   */\n/*------------------------------------------------------------------*/\nINVOKE_CMD:\n    Select\n    When act = 'PASSTHRU' Then Return\n    When act = '' Then Return\n    When Left(ZCTACT,1) = '&' Then Return  /* variable substitution */\n    Otherwise\n       /*--------------------------------------------------------*/\n       /* The selected commands are written at the start of the  */\n       /* first command table, and invoked after all other line  */\n       /* commands have been processed.                          */\n       /*                                                        */\n       /* ZCTVERB is made unique unless it is a SETVERB command, */\n       /* by putting a hex prefix at the start.  This causes a   */\n       /* problem with ALIAS processing, so FIND_ALIAS_ACTION is */\n       /* used to get the effective action.  If the ZCTVERB is   */\n       /* changed to something like $TMPtt-nn (where tt = TSUF & */\n       /* nn = a unique number) the ALIAS processing works OK &  */\n       /* overridden ALIAS commands will search from the top for */\n       /* a matching cmd; but then the user may see these funny  */\n       /* verb names (when ISPFCMD0 panel shows an error msg) so */\n       /* the hex prefix method is used instead.                 */\n       /*                                                        */\n       /* ZCTDESC is changed so that it will be recognised later */\n       /* as a pending command; (and its length <= 80).          */\n       /*                                                        */\n       /* ZCTACT is unchanged except for ALIAS commands, which   */\n       /* have their effective action instead (unless there is   */\n       /* no matching cmd, then the original action is used -    */\n       /* perhaps it can find a matching cmd when it is invoked  */\n       /* from the top of the first table - see above).          */\n       /*--------------------------------------------------------*/\n       /*---------------------------------------------------*/\n       /* insert '<<PENDING>>' & HELP panel name in ZCTDESC */\n       /*---------------------------------------------------*/\n       Parse Upper Var ZCTDESC . 'HELP(' hpanl ')'\n       If hpanl = '' & CMDTAB = 'ISP' Then\n          Call ISPCMDS_HELP   /* standard IBM help for this command */\n       If hpanel = '' Then\n          ZCTDESC = Left(hex_tsuf '<<PENDING>>' ZCTDESC,80)\n       Else Do\n          ZCTDESC = Left(hex_tsuf '<<PENDING>>' ZCTDESC,65),\n                    'HELP('hpanl')'        /* HELP starts in col 67 */\n          End\n       /* ZCTDESC = Left(hex_tsuf '<<PENDING>>',                    */\n       /*           tsuf ZCTDESC,80)   * so tsuf can be easily read */\n       /*-----------------------------------------------*/\n       /* make ZCTVERB unique (unless Action='SETVERB') */\n       /*-----------------------------------------------*/\n       If Word(ZCTACT,1) \u00ac= 'SETVERB' Then Do\n       /* ZCTVERB = '$T'tsuf'-'pendcmds        * create unique name */\n          ZCTVERB = Left(hex_tsuf||ZCTVERB,8) /* create unique name */\n          ZCTTRUNC = 0\n          End\n       /*----------------------------------------------------*/\n       /* change Action from 'ALIAS' to the effective action */\n       /*----------------------------------------------------*/\n       If Word(ZCTACT,1) = 'ALIAS' Then Do\n          Call SAVE_VARS('ZCTVERB ZCTTRUNC ZCTACT ZCTDESC')\n          Call FIND_ALIAS_ACTION\n          If ZCTVERB = '' Then Do      /* no cmd matching alias */\n             Call RESTORE_VARS('ZCTVERB ZCTTRUNC ZCTACT ZCTDESC')\n             End\n          Else Do\n             If Word(ZCTACT,1) = 'SETVERB' Then\n                Call RESTORE_VARS('ZCTDESC')\n             Else\n                Call RESTORE_VARS('ZCTVERB ZCTTRUNC ZCTDESC')\n             End\n          End\n       /*----------------------------------------------------------*/\n       /* add cmd to top first table, after the other pending cmds */\n       /*----------------------------------------------------------*/\n       \"TBTOP\" firstab\n       \"TBSKIP\" firstab \"NOREAD NUMBER(\"pendcmds\")\"\n       \"TBADD\" firstab\n       pendcmds = pendcmds + 1\n    End\n    Return\n\n/*==================================================================*/\n/*  Check that rows in cmds_table match the actual live table       */\n/*  - this is used before any table updating                        */\n/*------------------------------------------------------------------*/\nVALIDATE_CMDSTABL:\n    /*-----------------------------------------------------------*/\n    /* only compare once when multiple rows are directly updated */\n    /*-----------------------------------------------------------*/\n    If ZTDSELS = last_ZTDSELS - 1 Then Do\n       If SEL = '' & last_ZTDSELS = '' Then Do     /* auto-selected */\n          last_ZTDSELS = ZTDSELS\n          last_SEL = SEL\n          Return 0\n          End\n       End\n    last_ZTDSELS = ZTDSELS\n    last_SEL = SEL\n    VALVERB = ZCTVERB          /* can be shown on ISPFCMD7 if error */\n\n    /*--------------------*/\n    /* prepare to compare */\n    /*--------------------*/\n    If CMDSORT \u00ac= 'REAL ORDER' Then       /* CMDSORT = actual order */\n       Call SORT_CMDSTABL('R')          /* sort into REAL ORDER */\n\n    Call SAVE_VARS('CMDTAB CMDTORD CMDOVER CMDSEL CMDALIAS CMDNUM',\n          'CMDFND CMDTRUNC CMDMINL ZCTVERB ZCTTRUNC ZCTDESC ZCTACT')\n\n    LIVE = CMDTAB\n    LIVETABL = CMDTAB'CMDS'\n    \"TBTOP\" LIVETABL\n    \"TBTOP\" cmds_table\n    \"TBSCAN\" cmds_table ,             /* find first row of LIVETABL */\n             \"ARGLIST(CMDTAB) NOREAD\"\n    \"TBSKIP\" cmds_table \"NOREAD NUMBER(-1)\"\n    retcode = 0\n    /*------------------------------------------*/\n    /* compare all rows that should be matching */\n    /*------------------------------------------*/\ntrace O\n    Do valno = 1 to 9999\n       \"TBSKIP\" LIVETABL\n       lskip_rc = rc\n       lvars = ZCTVERB'|'ZCTTRUNC'|'ZCTACT'|'ZCTDESC\n       If (Word(ZCTDESC,2) = '<<RUNNING>>' ,\n        |  Word(ZCTDESC,2) = '<<PENDING>>'),\n        &  Word(ZCTDESC,1) <= '99'x ,\n        &  Datatype(C2X(Word(ZCTDESC,1))) = 'NUM'\n           Then Iterate valno          /* pending cmd - try next row*/\n       \"TBSKIP\" cmds_table\n       cskip_rc = rc\n       If lskip_rc = 8 & valno = 1,            /* LIVETABL is empty */\n        & (ZCTDESC = '<<< no commands in this table >>>' ,\n        &  ZCTVERB = '--------') Then Leave valno\n       If (cskip_rc = 8 | CMDTAB \u00ac= LIVE ),\n        & lskip_rc = 8 Then Leave valno   /* end of tables */\n       If lskip_rc = 0 & cskip_rc = 0 Then Do\n          If lvars = ZCTVERB'|'ZCTTRUNC'|'ZCTACT'|'ZCTDESC\n             Then Iterate valno        /* rows matched - try next   */\n          End\n       /*------------------------*/\n       /* something didn't match */\n       /*------------------------*/\n       \"CONTROL DISPLAY SAVE\"          /* save the TBDISPL display  */\n       \"ADDPOP COLUMN(10)\"\n       \"DISPLAY PANEL(ISPFCMD7)\"       /* 'Validate ERROR' panel    */\n       \"REMPOP\"\n       \"CONTROL DISPLAY RESTORE\"       /* restore TBDISPL display   */\n       retcode = 8\n       Leave valno\n       End\n\n    Call RESTORE_VARS('CMDTAB CMDTORD CMDOVER CMDSEL CMDALIAS CMDNUM',\n          'CMDFND CMDTRUNC CMDMINL ZCTVERB ZCTTRUNC ZCTDESC ZCTACT')\n\n    If CUR#SORT \u00ac= 'REAL ORDER' Then\n       Call SORT_CMDSTABL(CUR#SORT)   /* restore the sort order     */\n    Return retcode                    /* retcode = 0 or 8           */\n\n/*==================================================================*/\n/* SAVE and RESTORE variables                                       */\n/* - used instead of VPUT/VGET so we don't pollute any SHARED pool  */\n/*------------------------------------------------------------------*/\nSAVE_VARS:\n    Arg vars\n    Do v = 1 to Words(vars)\n       savevar = Word(vars,v)\n       Interpret 'SAVED_'savevar '=' savevar\n       End\n    Return 0\n\nRESTORE_VARS:\n    Arg vars\n    Do v = 1 to Words(vars)\n       restvar = Word(vars,v)\n       Interpret restvar '= SAVED_'restvar\n       End\n    Return 0\n\n/*==================================================================*/\n/* Prepare any pending selected cmd to be actioned by ISPFCMD0      */\n/* - this works even if the number of pending rows \u00ac= pendcmds,     */\n/*   or the pending rows have been moved within the table           */\n/*------------------------------------------------------------------*/\nPREPARE_PENDCMD:\n     \"TBTOP\" firstab\n     Do sloop = 1 to 9999           /* get next pending cmd row     */\n        \"TBSKIP\" firstab ,          /* next row of table            */\n           \"POSITION(pendrow)\"      /* save the row number          */\n        If rc > 0 Then Do           /* end of table|                */\n           pendcmds = 0             /* no pending cmds              */\n           Leave sloop\n           End\n       If Left(ZCTDESC,1) \u00ac= hex_tsuf ,\n        | Word(ZCTDESC,2) \u00ac= '<<PENDING>>'\n          Then Iterate sloop        /* row is not pending cmd|      */\n\n        parm_rc = GET_PARMS()       /* get &ZPARM for cmd action    */\n        If parm_rc = 0 Then Do\n           If ZCMD = '' & Word(ZCTACT,1) = 'SETVERB' Then\n              ZCMD = Subword(ZCTACT,2)\n           SELCMD = ZCTVERB ZCMD    /* SELCMD is the cmd to enter   */\n           End\n        Leave sloop                 /* parm_rc = 0 or 8             */\n        End\n    \"TBTOP\" cmds_table\n    \"TBSKIP\" cmds_table \"NUMBER(\"cmdtop\") NOREAD\"\n     Return\n/*==================================================================*/\n/*  User given a chance to suppy parameters for a command           */\n/*------------------------------------------------------------------*/\nGET_PARMS:\n    zp = Pos('&ZPARM',ZCTACT)       /* does the action use &ZPARM?  */\n    If ZCTACT = 'SETVERB' ,         /* SETVERB can use parameters   */\n     | zp > 0 Then Do               /* put ZCMD where &ZPARM was    */\n       If ZCMD = '' Then Do\n          If ZCTACT = 'SETVERB'     /* show cmdname in window title */\n             Then IVERB = ZCTVERB            /* cmdname is the same */\n             Else IVERB = Substr(ZCTVERB,2)  /* original cmdname    */\n          Parse Upper Var ZCTDESC 67 'HELP(' HPANL ')'\n          ZETDESC = Subword(ZCTDESC,3) /* strip <<PENDING>> prefix  */\n          Parse Var ZCTACT,            /* vars to display Action    */\n             1 ZETACT1 61 ZETACT2 121 ZETACT3\n          CMDHLPNM = IVERB             /* var for HELP panel: hpanl */\n          CMDHLPDE = Left(ZETDESC,52)  /* var for HELP panel: hpanl */\n          \"VPUT (CMDHLPNM CMHLPDE) SHARED\"\n          \"CONTROL DISPLAY SAVE\"       /* save the TBDISPL display  */\n          Call CHECK_PFKEYS('ISRSNAB')\n          \"ADDPOP\"\n          \"DISPLAY PANEL(ISPFCMD6)\"    /* Ask user to supply &ZPARM */\n          parm_rc = rc  /* user replies: ENTER (rc=0) or END (rc=8) */\n          \"REMPOP\"\n          \"CONTROL DISPLAY RESTORE\"    /* restore TBDISPL display   */\n          If parm_rc > 0 Then Do\n             ZERRSM = 'Cancelled'\n             ZERRLM = 'Invocation of command' ZCTVERB 'was CANCELLED'\n             Return parm_rc\n             End\n          End\n    /* ZCTACT = Left(ZCTACT,zp-1)||ZCMD||Substr(ZCTACT,zp+6) */\n       End\n    /*--------------------------------------------------------------*/\n    /* Sometimes ISPF moves the CRP to the TOP of firstab ||        */\n    /* Hence, ensure its on the right row before trying to update.  */\n    /*--------------------------------------------------------------*/\n    \"TBTOP\" firstab\n    \"TBSKIP\" firstab \"NUMBER(\"pendrow\") NOREAD\"\n    pr = Pos('PENDING>>',ZCTDESC)\n    ZCTDESC = Overlay('RUNNING',ZCTDESC,pr)\n    \"TBPUT\" firstab            /* change <<PENDING>> to <<RUNNING>> */\n    Return 0\n\n/*==================================================================*/\n/* Remove any pending selected command row from the first table     */\n/* - this works even if the number of pending rows \u00ac= pendcmds,     */\n/*   or the pending rows have been moved within the table           */\n/*------------------------------------------------------------------*/\nDELETE_PENDCMD:\n    Call SAVE_VARS('CMDTAB CMDTORD CMDOVER CMDSEL CMDALIAS CMDNUM',\n          'CMDFND CMDTRUNC CMDMINL ZCTVERB ZCTTRUNC ZCTDESC ZCTACT')\n\n     Do ploop = 1 to pendcmds\n        \"TBTOP\" firstab\n        Do sloop = 1 to 9999          /* delete 1 pending cmd row     */\n           \"TBSKIP\" firstab\n           If rc > 0 Then Do\n              pendcmds = 0\n              Leave ploop\n              End\n           If Left(ZCTDESC,1) = hex_tsuf Then Do\n              \"TBDELETE\" firstab\n              pendcmds = pendcmds - 1\n              If pendcmds >= 1 Then   /* If pendcmds <= 0, then clean */\n                 Leave sloop          /* .. all remaining rows        */\n              End\n           End\n        If ZCMD \u00ac= 'REF',             /* REF deletes all pending cmds */\n         & ZCMD \u00ac= 'RES' Then Leave   /* RES deletes all pending cmds */\n        End\n\n    Call RESTORE_VARS('CMDTAB CMDTORD CMDOVER CMDSEL CMDALIAS CMDNUM',\n          'CMDFND CMDTRUNC CMDMINL ZCTVERB ZCTTRUNC ZCTDESC ZCTACT')\n     Return\n\n/*==================================================================*/\n/*  Mark which commands override others - in variable CMDOVER       */\n/*  1. '*' completely overriding other command(s)                   */\n/*     '+' partially overriding other command(s)                    */\n/*     '.' partially overridden command                             */\n/*     '-' completely overridden command                            */\n/*  2. The cmds_table has been first sorted into REAL ORDER         */\n/*  3. Each command is checked by scanning for any following verb   */\n/*       which would be overridden                                  */\n/*  This is invoked whenever any command(s) is updated.             */\n/*------------------------------------------------------------------*/\nSETUP_OVER:\n    \"SELECT CMD(CALL *(ISPFCMDO) '\"cmds_table\"') MODE(FSCR)\"\n    Return\n\n  /*\"SELECT PGM(ISPFCMDO) PARM(\"cmds_table\")\"   <--- not working yet  */\n  /*Address TSO \"CALL *(ISPFCMDO) '\"cmds_table\"'\"    <-- ISPF abend   */\n\n trace O\n    /*---------------------------*/\n    /* clear CMDOVER in all rows */\n    /*---------------------------*/\n    \"TBTOP\" cmds_table                    /* starting at top of table */\n    CMDOVER = ' '\n    Do oloop = 1 To 9999\n      \"TBSCAN\" cmds_table \"ARGLIST(CMDOVER) CONDLIST(NE)\"\n       If rc > 0 Then Leave oloop         /* we reached end of table  */\n       CMDOVER = ' '\n       \"TBPUT\" cmds_table \"ORDER\"\n       End\n\n    /*----------------------------------------------------------------*/\n    /* scan the table for every row, updating CMDOVER when necessary  */\n    /*----------------------------------------------------------------*/\n    \"TBTOP\" cmds_table                    /* starting at top of table */\n    Do sloop = 1 To 9999\n       \"TBSKIP\" cmds_table\n       If rc > 0 Then Leave sloop         /* we reached end of table  */\n\n       If CMDOVER = '-' Then              /* ignore overridden command*/\n          Iterate sloop\n       If ZCTACT  = ''  Then              /* ignore no-action command */\n          Iterate sloop\n       If ZCTDESC = '<<< no commands in this table >>>' ,\n        & ZCTVERB = '--------' Then Iterate sloop\n\n       this_verb = Strip(ZCTVERB)\n       this_leng = CMDMINL                /* no. of required chars    */\n       this_short = Left(this_verb,this_leng)  /* shortest cmd string */\n       this_num = CMDNUM\n       override = ''\n       Do scan = 1 To 999\n          ZCTVERB = this_short'*'\n          ZCTACT = ''\n          \"TBSCAN\" cmds_table \"ARGLIST(ZCTVERB,ZCTACT)\",\n                              \"CONDLIST(EQ,NE)\"\n          If rc = 0 Then Do\n             /*------------------------------------------------*/\n             /* update CMDOVER for overridden cmd in the table */\n             /*------------------------------------------------*/\n             ZCTVERB = Strip(ZCTVERB)\n             If Pos(ZCTVERB,this_verb) = 1 Then Do\n                If CMDMINL >= this_leng Then Do\n                   override = '*'\n                   CMDOVER = '-'\n                   End\n                Else Do\n                   If override \u00ac= '*' Then override = '+'\n                   If CMDOVER  \u00ac= '-' Then CMDOVER = '.'\n                   End\n                End\n             Else Do\n                If Pos(Left(ZCTVERB,CMDMINL),this_verb) = 1 ,\n                 | CMDMINL <= this_leng Then Do\n                   If override \u00ac= '*' Then override = '+'\n                   If CMDOVER  \u00ac= '-' Then CMDOVER = '.'\n                   End\n                End\n             \"TBPUT\" cmds_table \"ORDER\"\n             End\n          Else Do   /* no more matching commands found */\n             /*---------------------------------------------------*/\n             /* finally update CMDOVER for this_verb in the table */\n             /*---------------------------------------------------*/\n             CMDNUM = this_num\n             \"TBSCAN\" cmds_table \"ARGLIST(CMDNUM)\"\n             If (override = '*' & Pos(CMDOVER,'.-') = 0),\n              | (override = '+' & Pos(CMDOVER,'.-') = 0) Then Do\n                CMDOVER = override\n                \"TBPUT\" cmds_table \"ORDER\"\n                End\n             Iterate sloop\n             End\n          End\n       End\n    Return\n\n/*==================================================================*/\n/*  Sort user table into desired sequence                           */\n/*------------------------------------------------------------------*/\nSORT_CMDSTABL:\n    Arg CMDSORT\n    Select\n      When Left(CMDSORT,2) = 'AL' Then Do    /* sort by alias order */\n        CMDSORT = 'ALIAS'\n        \"TBSORT \"cmds_table \" FIELDS(CMDALIAS,N,A,CMDNUM,N,A)\"\n        End\n      When Left(CMDSORT,1) = 'R' Then Do  /* sort by original order */\n        CMDSORT = 'REAL ORDER'\n        \"TBSORT \"cmds_table \" FIELDS(CMDNUM,N,A)\"\n        End\n      When Left(CMDSORT,1) = 'T' Then Do  /* sort by Table & Verb   */\n        CMDSORT = 'TABLE'\n        \"TBSORT \"cmds_table \" FIELDS(CMDTORD,C,A,ZCTVERB,C,A)\"\n        End\n      When Left(CMDSORT,1) = 'A' Then Do  /* sort by Action & Verb  */\n        CMDSORT = 'ACTION'\n        \"TBSORT \"cmds_table \"FIELDS(ZCTACT,C,A,ZCTVERB,C,A,CMDNUM,N,A)\"\n        End\n      When Left(CMDSORT,1) = 'D' Then Do  /* sort by Desc & Verb    */\n        CMDSORT = 'DESCRIPTION'\n        \"TBSORT \"cmds_table \"FIELDS(ZCTDESC,C,A,ZCTVERB,C,A,CMDNUM,N,A)\"\n        End\n      When Left(CMDSORT,1) = 'C' Then Do  /* sort by Verb & Table   */\n           CMDSORT = 'COMMAND NAME'\n           \"TBSORT \"cmds_table \" FIELDS(ZCTVERB,C,A,CMDNUM,N,A)\"\n           End\n      Otherwise   /* when no parameter: 1st COMMAND, then flip/flop */\n        If CUR#SORT = 'COMMAND NAME' Then Do\n           CMDSORT = 'REAL ORDER'         /* sort by original order */\n           \"TBSORT \"cmds_table \" FIELDS(CMDNUM,N,A)\"\n           End\n        Else Do\n           CMDSORT = 'COMMAND NAME'       /* sort by Verb & Table   */\n           \"TBSORT \"cmds_table \" FIELDS(ZCTVERB,C,A,CMDNUM,N,A)\"\n           End\n      End\n    csrrow = 0\n    Return\n\n/*==================================================================*/\n/* Put table stats into a table and display it                      */\n/*------------------------------------------------------------------*/\nDISPLAY_TABLINFO:\n /* \"TBEND\" cmdtbs_table                     always renew the table */\n    \"TBCREATE\" cmdtbs_table \"NOWRITE KEYS(CMDTABL)\",\n       \"NAMES(CMDROWS,CMDDSN,CMDVOL,CMDDATE,CMDTIME,CMDUSER)\"\n    tbcreate_rc = rc              /* rc > 0 if table already exists */\n    If tabnames = 'TABNAMES' Then Do\n       tabnames =  TB2A TB2B TB2C TB3A TB3B TB3C TB4A TB4B TB4C\n       If ZAPPLID \u00ac= 'ISP' Then tabnames = ZAPPLID tabnames\n       End\n    Do t = 1 to Words(tabnames)\n       CMDTABL = Word(tabnames,t)'CMDS'\n       \"TBSTATS\" cmdtabl \"ROWCURR(CMDROWS) STATUS2(status2)\",\n          \"UDATE(CMDDATE) UTIME(CMDTIME) USER(CMDUSER)\"\n       If status2 \u00ac= 1 Then Do                   /* table is open    */\n          CMDROWS = Format(CMDROWS)   /* remove the leading zeros    */\n        /*If tbget_rc = 8  */  /* no existing row - get dataset name */\n          If CMDTABL = ZAPPLID'CMDS' & appl_lib = 'unknown' Then Do\n             CMDDSN = '-- unknown --'\n             CMDVOL = ''\n             End\n          Else Do\n             CMDDSN = FIND_MEMBER(cmdtabl 'ISPTLIB')\n             CMDVOL = VOLUME\n             /* If Length(CMDDSN) < 28 Then           */\n             /*    CMDDSN = Overlay(VOLUME,CMDDSN,29) */\n             End\n          \"TBMOD\" cmdtbs_table              /* update or add the row */\n          End\n       End\n    old_tbtop = ZTDTOP                      /* save old top line no. */\n    \"TBTOP\" cmdtbs_table\n    /*-------------------------------*/\n    /* display the table stats panel */\n    /*-------------------------------*/\n    \"TBDISPL\" cmdtbs_table \"PANEL(ISPFCMD3) AUTOSEL(NO)\"\n    If rc > 8 Then Do\n       ZERRLM   '***  Error: TBDISPL of table' cmdtbs_table',',\n                'using panel ISPFCMD3 has FAILED, rc =' rc\n       ZERRSM = ''                   /* no short message             */\n       ZERRALRM = 'YES .WINDOW=LRESP'/* alarm, user must press ENTER */\n       \"SETMSG MSG(ISRZ002)\"         /* standard IBM message         */\n       End\n    ZTDTOP = old_tbtop                      /* restore top line no.  */\n    Return\n\n/*==================================================================*/\n/* Look for 'member' in the 'file' concatenation                    */\n/*  - return the name of the first library with that member, and if */\n/*    it is accessed by a LIBDEF put '**' or '****' before the      */\n/*    dsname, plus put the volser into variable: VOLUME             */\n/*  - note that only Application cmd tables can come from a LIBDEF, */\n/*    User, Site & System tables must come from ISPTLIB.            */\n/*  - this code assumes that all concatenated datasets are catlg'd, */\n/*    which is true if TSO ALLOC was used for allocations           */\n/*------------------------------------------------------------------*/\nFIND_MEMBER:\n  trace O\n    Parse Upper Arg member file              /* file = ISPTLIB      */\n    If member = ZAPPLID'CMDS' Then Do        /* Application cmds    */\n       \"QLIBDEF\" file \"TYPE(libtype) ID(libid)\"\n       If rc = 0 Then Do                     /* a LIBDEF is active  */\n          dlist = Translate(libid,\"  \",\"',\") /* no quotes or commas */\n          /*----------------------------------*/\n          /* check user-level libraries first */\n          /*----------------------------------*/\n          If libtype = 'DATASET' Then Do\n             If Left(file,3) = 'ISP' Then\n                userlib = Left(file,4)'USR'  /* userlib = ISPTUSR   */\n             Call CHECK_1ST_DSN(userlib)     /* check first library */\n             If result = 0 Then Do\n                VOLUME = sysvolume\n                Return '****' sysdsname      /* '****' -> ISPTUSR   */\n                End\n             If result < 20 Then Do\n                Call FIND_DSNLIST(userlib)   /* get library list    */\n                If result = 0 Then Do i = 2 To Words(dsnlist)\n                   dsn = Word(dsnlist,i)\n                   x = Sysdsn(\"'\"dsn\"(\"member\")'\")\n                   If x = 'OK' Then Do       /* member found        */\n                      y = LISTDSI(\"'\"dsn\"'\")\n                      VOLUME = sysvolume\n                      Return '****' dsn      /* RETURN the DSNAME   */\n                      End\n                   End\n                End\n             End\n          /*-------------------------------*/\n          /* check normal LIBDEF libraries */\n          /*-------------------------------*/\n          If libtype = 'DATASET' Then        /* only catlg'd d'sets */\n             dsnlist = Translate(libid,\"  \",\"',\") /* no quote/comma */\n          If libtype = 'LIBRARY' Then Do\n             Call CHECK_1ST_DSN(libid)       /* check first library */\n             If result = 0 Then Do\n                VOLUME = sysvolume\n                Return '**' sysdsname       /* '***' -> LIBDEF     */\n                End\n             If result < 20 Then\n                Call FIND_DSNLIST(libid)     /* get library list    */\n             End\n          Do i = 1 To Words(dsnlist)\n             dsn = Word(dsnlist,i)\n             x = Sysdsn(\"'\"dsn\"(\"member\")'\")\n             If x = 'OK' Then Do             /* member found        */\n                y = LISTDSI(\"'\"dsn\"'\")\n                VOLUME = sysvolume\n                Return '**' dsn             /* RETURN the DSNAME   */\n                End\n             End\n          End\n       End\n\n    /*------------------------------------*/\n    /* check normally allocated libraries */\n    /*------------------------------------*/\n    Call CHECK_1ST_DSN(file)                 /* check first library */\n    If result = 0 Then Do\n       VOLUME = sysvolume\n       Return sysdsname\n       End\n    If result < 20 Then Do\n       Call FIND_DSNLIST(file)   /* get list of libraries allocated */\n       Do i = 2 To Words(dsnlist)\n          dsn = Word(dsnlist,i)\n          x = Sysdsn(\"'\"dsn\"(\"member\")'\")    /* look for the member */\n          If x = 'OK' Then Do                /* member found        */\n             y = LISTDSI(\"'\"dsn\"'\")\n             VOLUME = sysvolume\n             Return dsn                      /* RETURN the DSNAME   */\n             End\n          End\n       End\n    Return  '????? (uncataloged dataset)'    /* member not found    */\n\n/*==================================================================*/\n/* Check for the member in the first library in the ddname          */\n/*   - if BROWSE rc>0 then no panel would be displayed, and a dummy */\n/*     DISPLAY is done to use the pending 'END' command             */\n/*------------------------------------------------------------------*/\nCHECK_1ST_DSN: Arg ddfind\n\n    x = LISTDSI(ddfind 'FILE')               /* get 1st dsn & vol   */\n    If x > 0 Then Return 69\n\n    \"CONTROL DISPLAY SAVE\"                   /* save what we have   */\n    \"CONTROL NONDISPL END\"                   /* pending 'END' cmd   */\n    \"BROWSE DATASET('\"sysdsname\"(\"member\")') VOLUME(\"sysvolume\")\"\n    browse_rc = rc                           /* rc=0 when found     */\n    If browse_rc > 0 Then\n       \"DISPLAY PANEL(ISRBROM)\"              /* dummy display       */\n    \"CONTROL DISPLAY RESTORE\"                /* restore environment */\n\n    Return browse_rc                         /* rc=14,16: not found */\n\n/*==================================================================*/\n/* Return a list of the datasets in the specified file allocation   */\n/*   - This is called only by FIND_MEMBER & CREATE_TABL             */\n/*------------------------------------------------------------------*/\nFIND_DSNLIST:\n    Parse Upper Arg file\n\n    If var.0 = 'VAR.0' Then Do   /* do LISTA only once|             */\n       x = Outtrap('var.')       /* trap TSO messages in stem var.  */\n       Address TSO \"LISTA ST\"    /* list dataset allocations in TSO */\n       x = Outtrap('OFF')        /* end message trapping            */\n       End\n\n    ddname  = ''\n    dsnlist = ''\n    Do i = 2 To var.0 By 2       /* process the trapped messages    */\n       parse var var.i dsn .\n       If dsn = 'TERMFILE' | dsn = 'NULLFILE' then i = i - 1\n       Else Do\n          j = i + 1\n          Parse Var var.j newdd disp\n          If disp \u00ac= ' ' Then\n             ddname = Strip(newdd)   /* get a new DDNAME            */\n          End\n       If ddname = file Then         /* If it's the DDNAME we want  */\n          dsnlist = dsnlist dsn      /* .... add the dsn to dsnlist */\n       Else   /* ddname \u00ac= file */\n          If dsnlist \u00ac= '' Then      /* if dsnlist has been created */\n             Return 0\n       End\n    Return 8                         /* dsnlist not created         */\n\n/*==================================================================*/\n/*  Save table to disk                                              */\n/*  This is called for commands: SAVEAPPL,3,SAVE,SAVEUSER,SAVESITE. */\n/*  The target table is open SHARE NOWRITE, so we copy it to a      */\n/*  temporary table, then use TBSAVE with the NAME parameter to     */\n/*  write it to disk.                                               */\n/*   Note: that any user with UPDATE access to the library can      */\n/*         use this dialog to permanently update the table on disk. */\n/*   Hence, ensure that table libraries have appropriate protection.*/\n/*------------------------------------------------------------------*/\nSAVE_TABL:\n    Arg SAVTAB\n    ZERRSM = ''\n    Select\n      When SAVTAB = 'USER' & ZUCTPREF||ZUCTPRE2||ZUCTPRE3 \u00ac= '' Then Do\n         If (ZUCTPREF \u00ac= '') + (ZUCTPRE2 \u00ac= '') + (ZUCTPRE3 \u00ac= '') = 1 ,\n         Then      /* only 1 User Command table active */\n            from_table = Strip(ZUCTPREF||ZUCTPRE2||ZUCTPRE3)'CMDS'\n         Else Do\n          /*-------------------------------------------*/\n          /* user must select which User table to save */\n          /*-------------------------------------------*/\n            SELDDACT = 'Save'\n            Call CHECK_PFKEYS('ISRSNAB')\n            \"ADDPOP\"\n            \"DISPLAY PANEL(ISPFCMDD)\"     /* Ask user to select table */\n            selt_rc = rc  /* user replies: ENTER (rc=0) or END (rc=8) */\n            \"REMPOP\"\n            If selt_rc > 0 Then Do\n               ZERRSM = 'Save cancelled'\n               ZERRLM = 'No User Command table selected to be saved'\n               \"SETMSG MSG(ISRZ002)\"         /* standard IBM message  */\n               Return\n               End\n            If selt_rc = 0 Then\n               from_table = TABNAME\n            End\n         to_table = 'USERCM'||tsuf        /* make a unique table name */\n         End\n      When SAVTAB = 'USR1' & ZUCTPREF \u00ac= '' Then Do\n         from_table = Strip(ZUCTPREF)'CMDS'\n         to_table = 'USERCM'||tsuf        /* make a unique table name */\n         End\n      When SAVTAB = 'USR2' & ZUCTPRE2 \u00ac= '' Then Do\n         from_table = Strip(ZUCTPRE2)'CMDS'\n         to_table = 'USR2CM'||tsuf        /* make a unique table name */\n         End\n      When SAVTAB = 'USR3' & ZUCTPRE3 \u00ac= '' Then Do\n         from_table = Strip(ZUCTPRE3)'CMDS'\n         to_table = 'USR3CM'||tsuf        /* make a unique table name */\n         End\n      When SAVTAB = 'SITE' & ZSCTPREF||ZSCTPRE2||ZSCTPRE3 \u00ac= '' Then Do\n         If (ZSCTPREF \u00ac= '') + (ZSCTPRE2 \u00ac= '') + (ZSCTPRE3 \u00ac= '') = 1 ,\n         Then      /* only 1 Site Command table active */\n            from_table = Strip(ZSCTPREF||ZSCTPRE2||ZSCTPRE3)'CMDS'\n         Else Do\n          /*-------------------------------------------*/\n          /* user must select which Site table to save */\n          /*-------------------------------------------*/\n            SELDDACT = 'Save'\n            Call CHECK_PFKEYS('ISRSNAB')\n            \"ADDPOP\"\n            \"DISPLAY PANEL(ISPFCMDD)\"     /* Ask user to select table */\n            selt_rc = rc  /* user replies: ENTER (rc=0) or END (rc=8) */\n            \"REMPOP\"\n            If selt_rc > 0 Then Do\n               ZERRSM = 'Save cancelled'\n               ZERRLM = 'No Site Command table selected to be saved'\n               \"SETMSG MSG(ISRZ002)\"         /* standard IBM message  */\n               Return\n               End\n            If selt_rc = 0 Then\n               from_table = TABNAME\n            End\n         to_table = 'SITECM'||tsuf        /* make a unique table name */\n         End\n      When SAVTAB = 'SIT1' & ZSCTPREF \u00ac= '' Then Do\n         from_table = Strip(ZSCTPREF)'CMDS'\n         to_table = 'SITECM'||tsuf        /* make a unique table name */\n         End\n      When SAVTAB = 'SIT2' & ZSCTPRE2 \u00ac= '' Then Do\n         from_table = Strip(ZSCTPRE2)'CMDS'\n         to_table = 'SIT2CM'||tsuf        /* make a unique table name */\n         End\n      When SAVTAB = 'SIT3' & ZSCTPRE3 \u00ac= '' Then Do\n         from_table = Strip(ZSCTPRE3)'CMDS'\n         to_table = 'SIT3CM'||tsuf        /* make a unique table name */\n         End\n      When SAVTAB = 'APPL' & NOAPPL  \u00ac= 'YES' Then Do\n         from_table = Strip(ZAPPLID)'CMDS'\n         to_table = 'APPLCM'||tsuf        /* make a unique table name */\n         End\n      Otherwise\n       ZERRSM = 'No' SAVTAB 'commands'\n       ZERRLM = 'INVALID: there is no' SAVTAB ,\n                'Command table to be saved'\n       ZERRHM = 'ISPFCMHC'\n      End\n\n    If ZERRSM \u00ac= '' Then Do\n       ZERRALRM = 'YES'                  /* alarm with the message    */\n       \"SETMSG MSG(ISRZ002)\"             /* standard IBM message      */\n       Return\n       End\n\n    cmdfile = 'CMSAVE'||tsuf\n    Parse Var from_table CMDTAB 'CMDS'\n    Call VALIDATE_CMDSTABL            /* .... is cmds_table valid?    */\n    If result > 0 Then Return\n\n    \"TBEND\" to_table          /* remove any existing temp user table  */\n    \"TBCREATE\" to_table ,     /* create temporary table in WRITE mode */\n       \"NAMES(ZCTVERB ZCTTRUNC ZCTACT ZCTDESC) WRITE\"\n\n    /*------------------------------*/\n    /* create copy of Command Table */\n    /*------------------------------*/\n    Call COPY_TABLE('NODUMMY')    /* copy cmds to temp table xxxxCMyy */\n    If Result = 0 Then Do\n       If (Left(SAVTAB,2) = 'US' & user_empty = 'YES'),\n        | (Left(SAVTAB,2) = 'SI' & site_empty = 'YES') Then Do\n          /*----------------------------------------------*/\n          /* put list of ISPTLIB libraries in table CMTLIBS */\n          /*----------------------------------------------*/\n          SAVTABL = from_table\n          Call CREATE_CMTLIBS\n          /*----------------------------------------------------------*/\n          /* Display panel asking user to identify the target library */\n          /*----------------------------------------------------------*/\n          ZTDSELS = 0\n          Do until ZTDSELS > 0\n             \"TBDISPL CMTLIBS PANEL(ISPFCMD1)\",/* display ISPTLIB libs*/\n                \"AUTOSEL(NO)\"              /*  no auto-select of rows */\n             If rc > 0 Then Do\n                \"TBEND\" to_table\n                \"TBEND CMTLIBS\"\n                Return\n                End\n             End\n          \"TBEND CMTLIBS\"\n          End\n       /*-------------------------------------------------*/\n       /* get valid library name & allocate it to cmdfile */\n       /*-------------------------------------------------*/\n       Else Do\n          If SAVTAB = 'APPL' & appl_lib = 'unknown' Then Do\n             cmdlib = '-- unknown --'\n             VOLUME = ''\n             End\n          Else Do\n             cmdlib = FIND_MEMBER(from_table 'ISPTLIB')\n             If Words(cmdlib) = 2 Then      /* '***' if dsn in LIBDEF */\n                cmdlib = Word(cmdlib,2)\n             End\n          End\n       /*------------------------------------*/\n       /* get confirmation before continuing */\n       /*------------------------------------*/\n       conf_rc = CONFIRM_SAVE(from_table cmdlib)\n       If conf_rc > 0 Then Do\n          \"TBEND\" to_table\n          Return\n          End\n       If VOLUME = '' Then\n          Address TSO \"ALLOC FI(\"cmdfile\") DS('\"LIBNAME\"') SHR REUSE\"\n       Else\n          Address TSO \"ALLOC FI(\"cmdfile\") DS('\"LIBNAME\"')\",\n                      \"VOL(\"VOLUME\") SHR REUSE\"\n       /*-------------------------------------------------------------*/\n       /* SAVE temporary table, replacing any existing table on disk. */\n       /*-------------------------------------------------------------*/\n       \"TBSAVE\" to_table \"NAME(\"TABNAME\") LIBRARY(\"cmdfile\")\"\n       If rc = 0 Then Do\n          \"TBQUERY\" from_table \"ROWNUM(qrows)\"\n          If qrows = 0 Then Do\n             If Left(SAVTAB,2) = 'US' Then user_empty = 'YES'\n             If Left(SAVTAB,2) = 'SI' Then site_empty = 'YES'\n             End\n          Else Do    /* qrows \u00ac= 0  */\n             If Left(SAVTAB,2) = 'US' Then user_empty = 'NO'\n             If Left(SAVTAB,2) = 'SI' Then site_empty = 'NO'\n             End\n          ZERRSM = SAVTAB 'commands saved'\n          ZERRLM = SAVTAB 'command table saved in' LIBNAME'('TABNAME')'\n          ZERRALRM = 'NO'                /* no alarm with the message */\n          End\n       Else Do\n          ZERRSM = 'Commands not saved'\n          ZERRLM = 'Unable to save cmds in' LIBNAME 'dataset, rc='rc\n          ZERRALRM = 'YES'               /* alarm with the message    */\n          End\n       \"SETMSG MSG(ISRZ002)\"             /* standard IBM message      */\n       \"TBOPEN XXXXX LIBRARY(XXX)\"       /* this makes the FREE work  */\n       Address TSO \"FREE FI(\"cmdfile\")\"\n       End\n    \"TBEND\" to_table           /* finished with the temp user table   */\n    Return\n\n/*==================================================================*/\n/*  User to Confirm that the new table should be written to disk    */\n/*    - invoked from SAVE_TABL  & CREATE_TABL                       */\n/*------------------------------------------------------------------*/\nCONFIRM_SAVE:\n    Parse Arg TABNAME LIBNAME      /* get table name & library name */\n    If LIBNAME = '????? (uncataloged dataset)' Then Do\n       LIBNAME = ''\n       EXISTS = 24\n       End\n    Else Do          /* check if it will replace an existing member */\n       \"CONTROL DISPLAY SAVE\"                /* save what we have   */\n       \"CONTROL NONDISPL END\"                /* pending 'END' cmd   */\n       \"BROWSE DATASET('\"LIBNAME\"(\"TABNAME\")') VOLUME(\"VOLUME\")\"\n       browse_rc = rc                        /* rc=0 when found     */\n       If browse_rc > 0 Then\n          \"DISPLAY PANEL(ISRBROM)\"           /* dummy display       */\n       \"CONTROL DISPLAY RESTORE\"             /* restore environment */\n       EXISTS = browse_rc\n       End\n    TABFIRST = TABNAME      /* original table-name to show on panel */\n    Do cs = 1 to 99\n       Call CHECK_PFKEYS('ISRSNAB')\n       \"ADDPOP\"\n       \"DISPLAY PANEL(ISPFCMD2)\"   /* Ask user to confirm or cancel */\n       conf_rc = rc     /* user replies: ENTER (rc=0) or END (rc=8) */\n       \"REMPOP\"\n       If conf_rc > 0 & COPYCMDS \u00ac= 'YES' Then Do\n          ZERRSM = 'SAVE Cancelled'\n          ZERRLM = 'SAVE of Command Table' TABNAME 'was CANCELLED'\n          ZERRALRM = 'YES'               /* alarm with the message  */\n          \"SETMSG MSG(ISRZ002)\"          /* standard IBM message    */\n          Leave cs\n          End\n       Else Do  /* conf_rc = 0 */\n          \"CONTROL DISPLAY SAVE\"             /* save what we have   */\n          \"CONTROL NONDISPL END\"             /* pending 'END' cmd   */\n          \"BROWSE DATASET('\"LIBNAME\"(\"TABNAME\")') VOLUME(\"VOLUME\")\"\n          browse_rc = rc                     /* rc=0 when found     */\n          If browse_rc > 0 Then\n             \"DISPLAY PANEL(ISRBROM)\"        /* dummy display       */\n          \"CONTROL DISPLAY RESTORE\"          /* restore environment */\n          EXISTS = browse_rc\n          If EXISTS < 20  Then Leave cs\n          ZERRSM = ''\n          ZERRLM = \"*** ERROR: '\"LIBNAME\"' not found\"\n          If VOLUME = ''\n             Then ZERRLM = ZERRLM \"***\"\n             Else ZERRLM = ZERRLM \"on volume\" VOLUME \"***\"\n          ZERRALRM = 'YES .WINDOW=LNORESP' /* alarm, msg in window  */\n          \"SETMSG MSG(ISRZ002)\"          /* standard IBM message    */\n          End\n       End\n    Return conf_rc\n\n/*==================================================================*/\n/*  User to specify which library should be used to open table      */\n/*  - this is called only by CONFIRM_TABLE                          */\n/*------------------------------------------------------------------*/\nCONFIRM_LIBRARY:\n    Do co = 1 to 99\n       Call CHECK_PFKEYS('ISRSNAB')\n       If applid = 'TOOL' & COPYCMDS \u00ac= 'YES' Then\n          \"CONTROL NONDISPL ENTER\"\n       \"ADDPOP\"\n       \"DISPLAY PANEL(ISPFCMD9)\"   /* Ask user to confirm or cancel */\n       conf_rc = rc     /* user replies: ENTER (rc=0) or END (rc=8) */\n       \"REMPOP\"\n       If conf_rc > 0 Then Do\n          If COPYCMDS = 'YES' Then\n             Call CANCEL_COPY          /* 'COPY cancelled' message  */\n          Else Do\n             ZERRSM = 'OPEN Cancelled'\n             ZERRLM = 'OPEN of Command Table' TABNAME 'was CANCELLED'\n             ZERRALRM = 'YES'            /* alarm with the message  */\n             \"SETMSG MSG(ISRZ002)\"       /* standard IBM message    */\n             End\n          Leave co\n          End\n       Else Do  /* conf_rc = 0 */\n          \"CONTROL DISPLAY SAVE\"             /* save what we have   */\n          \"CONTROL NONDISPL END\"             /* pending 'END' cmd   */\n          \"BROWSE DATASET('\"LIBNAME\"(\"TABNAME\")') VOLUME(\"VOLUME\")\"\n          browse_rc = rc                     /* rc=0 when found     */\n          If browse_rc > 0 Then\n             \"DISPLAY PANEL(ISRBROM)\"        /* dummy display       */\n          \"CONTROL DISPLAY RESTORE\"          /* restore environment */\n          EXISTS = browse_rc\n          If EXISTS < 20  Then Leave co\n          ZERRSM = ''\n          ZERRLM = \"*** Library '\"LIBNAME\"' not found\"\n          If VOLUME \u00ac= '' Then\n             ZERRLM = ZERRLM \"on volume\" VOLUME\n          ZERRLM = ZERRLM Copies(' ',50)  null ,\n                   '   (the name must be fully qualified)'\n          ZERRALRM = 'YES .WINDOW=LNORESP' /* alarm, msg in window  */\n          \"SETMSG MSG(ISRZ002)\"          /* standard IBM message    */\n          End\n       End\n    If EXISTS = 14 | EXISTS = 16 Then Do        /* member not found */\n       CONFOPEN = 'YES'                   /* used by ISPFCMD2 panel */\n       If COPYCMDS = 'YES' Then Do\n          conf_rc = CONFIRM_SAVE(TABNAME LIBNAME)\n          If conf_rc = 0 Then create_copy_table = 'YES'\n          End\n       Else Do\n          new_appl_lib = LIBNAME\n          Call CREATE_APPLTABL\n          conf_rc = result\n          End\n       End\n    Return conf_rc\n\n/*==================================================================*/\n/*  Create a new Application Table                                  */\n/*  - this is called by MAINLINE or by CONFIRM_LIBRARY              */\n/*------------------------------------------------------------------*/\nCREATE_APPLTABL:\n    SAVTAB = 'APPL'\n    /*-------------------------------------------------*/\n    /* get valid library name & allocate it to cmdfile */\n    /*-------------------------------------------------*/\n    If new_appl_lib \u00ac= 'NEW_APPL_LIB' Then\n       cmdlib = new_appl_lib\n    Else Do\n       TABNAME = Strip(ZAPPLID)\"CMDS\"\n       cmdlib = FIND_MEMBER(TABNAME 'ISPTLIB')\n       If Words(cmdlib) = 2 Then          /* '***' if dsn in LIBDEF */\n          cmdlib = Word(cmdlib,2)\n       End\n    /*----------------------------------------------------------*/\n    /* get confirmation before continuing                       */\n    /* - user can change table-name & library name in the panel */\n    /*----------------------------------------------------------*/\n    conf_rc = CONFIRM_SAVE(TABNAME cmdlib)\n    If conf_rc > 0 Then\n       Return conf_rc              /* RETURN if PF3/PF12 from panel */\n    cmdfile = 'CM'ZAPPLID||tsuf         /* attempt unique file name */\n    If VOLUME = '' Then\n       Address TSO \"ALLOC FI(\"cmdfile\") DS('\"LIBNAME\"') SHR REUSE\"\n    Else\n       Address TSO \"ALLOC FI(\"cmdfile\") DS('\"LIBNAME\"')\",\n                   \"VOL(\"VOLUME\") SHR REUSE\"\n    /*-------------------------------------*/\n    /* create temp table & add 1 dummy row */\n    /*-------------------------------------*/\n    Parse Var TABNAME tabpref 'CMDS'\n    t_table = tabpref'CM'||tsuf      /* try to make a unique tbname */\n    \"TBEND\" t_table            /* ensure no temp table already open */\n    \"TBCREATE\" t_table,        /* create new user table, WRITE mode */\n       \"NAMES(ZCTVERB ZCTTRUNC ZCTACT ZCTDESC) WRITE\"\n    If COPYCMDS \u00ac= 'YES' Then Do\n       ZCTVERB  = '??'\n       ZCTTRUNC = '0'\n       ZCTACT   = ''               /* null action = 'do nothing'    */\n       ZCTDESC  = '<<< table created by' Userid() 'on' Date() '>>>'\n       \"TBADD\" t_table             /* add row to temp table         */\n       End\n    /*----------------------------------------*/\n    /* write new table into the table library */\n    /*----------------------------------------*/\n    \"TBCLOSE\" t_table ,            /* pad 500% to leave extra space */\n       \"NAME(\"TABNAME\") LIBRARY(\"cmdfile\") PAD(500)\"\n    save_rc = rc\n    If rc = 0 & COPYCMDS \u00ac= 'YES' Then Do\n       ZERRSM = TABNAME 'commands saved'\n       ZERRLM = TABNAME 'command table saved in' LIBNAME 'dataset'\n       ZERRALRM = 'NO'                 /* no alarm with the message */\n       End\n    Else If rc > 0 Then Do\n       ZERRSM = 'Commands not saved'\n       ZERRLM = 'Unable to save cmds in' LIBNAME 'dataset, rc='rc\n       ZERRALRM = 'YES'                /* alarm with the message    */\n       End\n    \"SETMSG MSG(ISRZ002)\"\n    \"TBOPEN XXXXX LIBRARY(XXX)\"        /* this makes the FREE work  */\n    Address TSO \"FREE FI(\"cmdfile\")\"\n    Return save_rc\n\n/*==================================================================*/\n/*  Create a new User or Site Command Table                         */\n/*------------------------------------------------------------------*/\nCREATE_TABL:\n    Arg SAVTAB\n    If (SAVTAB = 'USER' & USERPREF||USR2PREF||USR3PREF = '') ,\n     | (SAVTAB = 'SITE' & SITEPREF||SIT2PREF||SIT3PREF = '') Then Do\n       ZERRSM = ''\n       ZERRLM = 'INVALID:' SAVTAB 'Command Tables are not in use.',\n                'Enter HELP for details.'\n       ZERRHM = 'ISPFCMHC'          /* HELP: configuring cmd tables  */\n       ZERRALRM = 'YES'\n       \"SETMSG MSG(ISRZ002)\"\n       ZERRHM = '*'                 /* .HELP reset                   */\n       Return\n       End\n    If SAVTAB = 'USER' Then Do\n       If (USERPREF \u00ac= '') + (USR2PREF \u00ac= '') + (USR3PREF \u00ac= '') = 1 ,\n       Then      /* only 1 User Command table defined */\n          SAVTABL = Strip(USERPREF||USR2PREF||USR3PREF)'CMDS'\n       Else Do\n          /*---------------------------------------------*/\n          /* user must select which User table to create */\n          /*---------------------------------------------*/\n          SELDDACT = 'Create'\n          Call CHECK_PFKEYS('ISRSNAB')\n          \"ADDPOP\"\n          \"DISPLAY PANEL(ISPFCMDD)\"      /* Ask user to select table */\n          selt_rc = rc   /* user replies: ENTER (rc=0) or END (rc=8) */\n          \"REMPOP\"\n          If selt_rc > 0 Then Do\n             ZERRSM = 'Create cancelled'\n             ZERRLM = 'No User Command table selected to be created'\n             \"SETMSG MSG(ISRZ002)\"          /* standard IBM message  */\n             Return\n             End\n          If selt_rc = 0 Then\n             SAVTABL = TABNAME\n          End\n       End\n    If SAVTAB = 'SITE' Then Do\n       If (SITEPREF \u00ac= '') + (SIT2PREF \u00ac= '') + (SIT3PREF \u00ac= '') = 1 ,\n       Then      /* only 1 Site Command table defined */\n          SAVTABL = Strip(SITEPREF||SIT2PREF||SIT3PREF)'CMDS'\n       Else Do\n          /*---------------------------------------------*/\n          /* user must select which Site table to create */\n          /*---------------------------------------------*/\n          SELDDACT = 'Create'\n          Call CHECK_PFKEYS('ISRSNAB')\n          \"ADDPOP\"\n          \"DISPLAY PANEL(ISPFCMDD)\"      /* Ask user to select table */\n          selt_rc = rc   /* user replies: ENTER (rc=0) or END (rc=8) */\n          \"REMPOP\"\n          If selt_rc > 0 Then Do\n             ZERRSM = 'Create cancelled'\n             ZERRLM = 'No Site Command table selected to be created'\n             \"SETMSG MSG(ISRZ002)\"          /* standard IBM message  */\n             Return\n             End\n          If selt_rc = 0 Then\n             SAVTABL = TABNAME\n          End\n       End\n    /*----------------------------------------------*/\n    /* put list of ISPTLIB libraries in table CMTLIBS */\n    /*----------------------------------------------*/\n    Call CREATE_CMTLIBS\n    /*----------------------------------------------------------*/\n    /* Display panel asking user to identify the target library */\n    /*----------------------------------------------------------*/\n    ZTDSELS = 0\n    Do until (rc > 0 | ZTDSELS > 0)\n       \"TBDISPL CMTLIBS PANEL(ISPFCMD1)\", /* display list of ISPTLIB */\n          \"AUTOSEL(NO)\"                  /*  no auto-select of rows */\n       If ZTDSELS > 0 Then Do      /* if user selects a library ... */\n          /*------------------------------------*/\n          /* get confirmation before continuing */\n          /*------------------------------------*/\n          conf_rc = CONFIRM_SAVE(SAVTABL CMDLIB)\n          If conf_rc > 0 Then Do\n             \"TBEND CMTLIBS\"\n             Return\n             End\n          /* allocate library to unique ddname */\n          If SAVTAB = 'USER' Then cmdfile = 'CMDU'||tsuf\n          If SAVTAB = 'SITE' Then cmdfile = 'CMDS'||tsuf\n          Address TSO \"ALLOC FI(\"cmdfile\") DS('\"CMDLIB\"') SHR REUSE\"\n          alloc_rc = rc\n          /*-------------------------------------*/\n          /* create temp table & add 1 dummy row */\n          /*-------------------------------------*/\n          t_table = SAVTAB'CM'||tsuf /* try to make a unique tbname */\n          \"TBEND\" t_table      /* ensure no temp table already open */\n          \"TBCREATE\" t_table, /* create new user table, WRITE mode */\n             \"NAMES(ZCTVERB ZCTTRUNC ZCTACT ZCTDESC) WRITE\"\n          ZCTVERB  = '??'\n          ZCTTRUNC = '0'\n          ZCTACT   = ''            /* null action = 'do nothing'    */\n          ZCTDESC  = '<<< Dummy command for you to modify >>>'\n          If SAVTAB = 'APPL' Then\n            ZCTDESC  = '<<< table created by' Userid() 'on' Date() '>>>'\n          \"TBADD\" t_table          /* add row to temp table         */\n          /*----------------------------------------*/\n          /* write new table into the table library */\n          /*----------------------------------------*/\n          \"TBCLOSE\" t_table ,      /* pad 500% to leave extra space */\n             \"NAME(\"SAVTABL\") LIBRARY(\"cmdfile\") PAD(500)\"\n          If rc = 0 Then Do\n             If (SAVTAB = 'USER' &,    /* User table already exists */\n                 (ZUCTPREF = SAVTABL | ZUCTPRE2 = SAVTABL |,\n                  ZUCTPREF = SAVTABL) ),\n              | (SAVTAB = 'SITE' &,    /* Site table already exists */\n                 (ZSCTPREF = SAVTABL | ZSCTPRE2 = SAVTABL |,\n                  ZSCTPREF = SAVTABL) ),\n             Then Do\n                Call UPDATE_NEWTABL    /* ... update it             */\n                txt = 'Now'            /* text in ZERRLM message    */\n                End\n             Else                      /* no existing User table    */\n                txt = 'Next you should EXIT from ISPF,',\n                      'then start ISPF again and your',\n                      'new command table will be active.  Then'\n             ZERRLM = 'A new' SAVTAB 'Command Table ('SAVTABL') was',\n                      'created in' CMDLIB 'library. ' txt ,\n                      'use this \"ISPF Commands\" tool to',\n                      'update your' SAVTAB 'Commands table. ',\n                      'It contains a dummy command for you to modify,',\n                      'and you can add extra commands too. '\n             If SAVTAB = 'USER' Then ZERRLM = ZERRLM ||,\n                      'Then use option 3 to SAVE your new commands.'\n             If SAVTAB = 'SITE' Then ZERRLM = ZERRLM ||,\n                      'Then use command SAVESITE to SAVE the new table.'\n             ZERRSM = ''\n             End\n          Else Do\n             ZERRSM = 'Table not created'\n             ZERRLM = 'Unable to save a new' SAVTABL 'table in' CMDLIB ,\n                      'dataset, rc='rc ', ALLOC rc='alloc_rc\n             End\n          ZERRALRM = 'YES'             /* alarm with the message    */\n          \"SETMSG MSG(ISRZ002)\"        /* standard IBM message      */\n          \"TBOPEN XXXXX LIBRARY(XXX)\"  /* this makes the FREE work  */\n          Address TSO \"FREE FI(\"cmdfile\")\"\n          End\n       End\n       \"TBEND CMTLIBS\"\n    Return\n\n/*==================================================================*/\n/*  Create a table of the ISPTLIB datasets                          */\n/*  - ISPTLIB concatenation cannot be changed while ISPF is active  */\n/*      therefore CMTLIBS table can be shared.                      */\n/*  - these datasets are (almost) always cataloged, so SYSDSN can   */\n/*      be used to check for the member, and LISTDSI to get volume  */\n/*  - this is only called from CREATE_TABL and SAVE_TABL            */\n/*------------------------------------------------------------------*/\nCREATE_CMTLIBS:\n    \"TBCREATE CMTLIBS\",             /* table of libraries in ISPTLIB */\n       \"NAMES(POINT,CMDLIB,VOLUME) SHARE NOWRITE\"\n    If rc = 0 Then Do                  /* new table created          */\n       Call FIND_DSNLIST('ISPTLIB') /* get list of ISPTLIB libraries */\n       Do d = 1 to Words(dsnlist)\n          CMDLIB = Word(dsnlist,d)\n          y = LISTDSI(\"'\"CMDLIB\"'\")\n          VOLUME = sysvolume\n          If Sysdsn(\"'\"CMDLIB\"(\"SAVTABL\")'\") = 'OK' ,\n             Then POINT = '-->'        /* pointer if member found    */\n             Else POINT = ''\n          \"TBADD CMTLIBS\"              /* populate the table         */\n          End\n       End\n    Else Do                            /* table already existed      */\n       \"TBTOP CMTLIBS\"\n       Do d = 1 to 999\n          \"TBSKIP CMTLIBS\"\n          If rc > 0 Then Leave\n          If Sysdsn(\"'\"CMDLIB\"(\"SAVTABL\")'\") = 'OK' ,\n             Then POINT = '-->'        /* pointer if member found    */\n             Else POINT = ''\n          \"TBPUT CMTLIBS\"              /* update the table           */\n          End\n       End\n    \"TBTOP CMTLIBS\"\n    Return\n\n/*==================================================================*/\n/*  Update new User or Site command table                           */\n/*  - update existing active table to have only the dummy cmd       */\n/*  - refresh current table of commands                             */\n/*  - this is only called from CREATE_TABL                          */\n/*------------------------------------------------------------------*/\nUPDATE_NEWTABL:\n    \"TBTOP\" SAVTABL\n    Do until RC > 0                          /* delete all the rows */\n       \"TBSKIP\" SAVTABL \"NOREAD\"\n       \"TBDELETE\" SAVTABL\n       End\n    \"TBADD\" SAVTABL                          /* add the dummy cmd   */\n    If SAVTAB = 'USER' Then user_empty = 'NO'\n    If SAVTAB = 'SITE' Then site_empty = 'NO'\n    /*-----------------------------------*/\n    /* refresh current table of commands */\n    /*-----------------------------------*/\n    If Left(CUR#SORT,1) \u00ac= 'R' Then /* if sort order not standard - */\n       Call SORT_CMDSTABL('R')      /* sort back to original order  */\n    \"TBTOP\" cmds_table\n    Parse Var SAVTABL CMDTAB 'CMDS'\n    \"TBSCAN\" cmds_table \"ARGLIST(CMDTAB)\"\n    CMDOVER  = ''\n    CMDFND   = ''\n    CMDSEL   = '/'\n    CMDALIAS = ''\n    \"TBGET\" t_table                   /* get new row variables       */\n    \"TBPUT\" cmds_table \"ORDER\"        /* dummy row replaces 1st row  */\n    \"TBSCAN\" cmds_table \"ARGLIST(CMDTAB) NOREAD\"\n    Do while rc = 0                   /* deleting rest of the rows   */\n       \"TBDELETE\" cmds_table\n       \"TBSCAN\" cmds_table \"ARGLIST(CMDTAB) NOREAD\"\n       End\n    updated = 'Y'                     /* so SETUP_OVER will be run   */\n    /*--------------------------------------------------------------*/\n    /* select (only) the new table upon return to the command list  */\n    /*--------------------------------------------------------------*/\n    CMDSCAN = ''\n    CMDFIND = ''\n    If SAVTAB = 'USER' Then Do\n       T1 = ''\n       T2 = '/'\n       T3 = ''\n       T4 = ''\n       End\n    If SAVTAB = 'SITE' Then Do\n       T1 = ''\n       T2 = ''\n       If ZSCTSRCH = 'B'\n          Then T3 = '/'\n          Else T3 = ''\n       If ZSCTSRCH = 'A'\n          Then T4 = '/'\n          Else T4 = ''\n       End\n    Return\n\n/*==================================================================*/\n/*  Read the specified keylist to look for certain PF keys.         */\n/*  - looking for:  HELP, EXIT/END and CANCEL keys                  */\n/*  - only check the first 12 keys, since they are always available */\n/*------------------------------------------------------------------*/\nCHECK_PFKEYS:\n    Arg KEYLISTN                     /* usually = 'ISRSNAB'         */\n    \"TBTOP ISRPROF\"\n    \"TBSCAN ISRPROF ARGLIST(KEYLISTN)\"\n    If rc <> 0 Then Do\n       \"TBTOP ISRKEYS\"\n       \"TBSCAN ISRKEYS ARGLIST(KEYLISTN)\"\n       End\n    If Translate(KEY1DEF) = 'HELP'   /* this is default for ISRSNAB */\n       Then HE = 'F1'\n       Else HE = ''\n    Do key = 1 to 12 While HE = ''\n       Interpret 'kdef = Translate(KEY'key'DEF)'\n       If kdef = 'HELP'\n          Then HE = 'F'key\n       End\n    If Translate(KEY3DEF) = 'EXIT'   /* this is default for ISRSNAB */\n       Then EN = 'F3'\n       Else EN = ''\n    Do key = 1 to 12 While EN = ''\n       Interpret 'kdef = Translate(KEY'key'DEF)'\n       If kdef = 'EXIT' | kdef = 'END'\n          Then EN = 'F'key\n       End\n    If Translate(KEY12DEF) = 'CANCEL'    /* the default for ISRSNAB */\n       Then CA = 'F12'\n       Else CA = ''\n    Do key = 1 to 12 While CA = ''\n       Interpret 'kdef = Translate(KEY'key'DEF)'\n       If kdef = 'CAN'| kdef = 'CANCEL'\n          Then CA = 'F'key\n       End\n    Return\n\n/*==================================================================*/\n/*  Read ISPF configuration module to get USERCMDS and SITECMDS     */\n/*  - the values of ZUCTPREx & ZSCTPREx are assumed to be correct   */\n/*     for any ACTIVE tables, (then config module is not checked).  */\n/*  - offsets after ISPF 5.7 unknown, therefore in that case assume */\n/*     the configuration module name and the field offsets are the  */\n/*     same as in ISPF 5.7 (which will probably be true).           */\n/*------------------------------------------------------------------*/\nREAD_CONFIG:\n    \"VGET ZPDFREL SHARED\"                /* ISPF version 'PDF x.y'  */\n    USERPREF = ZUCTPREF\n    USR2PREF = ZUCTPRE2\n    USR3PREF = ZUCTPRE3\n    SITEPREF = ZSCTPREF\n    SIT2PREF = ZSCTPRE2\n    SIT3PREF = ZSCTPRE3\n    Select\n      When Word(ZPDFREL,2) < '4.2' Then Do\n         CONFMOD = ''                    /* no User/Site tables     */\n         End\n      When Word(ZPDFREL,2) = '4.2' Then Do\n         user_off = 564                  /* offset to USERCMDS parm */\n         site_off = 572                  /* offset to SITECMDS parm */\n         CONFMOD = 'ISRCONFG'\n         End\n      When Word(ZPDFREL,2) < '4.8' Then Do        /* 4.3, 4.4 & 4.5 */\n         user_off = 572\n         site_off = 580\n         CONFMOD = 'ISRCONFG'\n         End\n      When Word(ZPDFREL,2) <= '5.2' Then Do       /* 4.8, 5.0 & 5.2 */\n         user_off = 636\n         site_off = 640\n         CONFMOD = 'ISPCFIGU'\n         End\n      Otherwise                                   /* 5.5, 5.6 & 5.7 */\n         user_off = 636\n         site_off = 640\n         usr2_off = 2888\n         usr3_off = 2892\n         sit2_off = 2896\n         sit3_off = 2900\n         CONFMOD = 'ISPCFIG'\n      End\n    If CONFMOD \u00ac= '' Then Do\n       pgm_addr = ISPFCMDL(CONFMOD)      /* get pgm load address    */\n       dec_addr = X2D(C2X(pgm_addr))\n       If dec_addr > 0 Then Do           /* if program is loaded .. */\n          USERPRE1 = Storage( D2X(dec_addr + user_off), 4)\n          SITEPRE1 = Storage( D2X(dec_addr + site_off), 4)\n          If Word(ZPDFREL,2) < '5.5' Then\n             Parse Value '' With USERPRE2 USERPRE3 SITEPRE2 SITEPRE3\n          Else Do        /* extra cmd tables possible from ISPF 5.5 */\n             USERPRE2 = Storage( D2X(dec_addr + usr2_off), 4)\n             USERPRE3 = Storage( D2X(dec_addr + usr3_off), 4)\n             SITEPRE2 = Storage( D2X(dec_addr + sit2_off), 4)\n             SITEPRE3 = Storage( D2X(dec_addr + sit3_off), 4)\n             End\n          If USERPRE1 \u00ac= '' & USERPREF = '' Then\n             USERPREF = CMD_PREF(USERPRE1)\n          If USERPRE2 \u00ac= '' & USR2PREF = '' Then\n             USR2PREF = CMD_PREF(USERPRE2)\n          If USERPRE3 \u00ac= '' & USR3PREF = '' Then\n             USR3PREF = CMD_PREF(USERPRE3)\n          If SITEPRE1 \u00ac= '' & SITEPREF = '' Then\n             SITEPREF = CMD_PREF(SITEPRE1)\n          If SITEPRE2 \u00ac= '' & SIT2PREF = '' Then\n             SIT2PREF = CMD_PREF(SITEPRE2)\n          If SITEPRE3 \u00ac= '' & SIT3PREF = '' Then\n             SIT3PREF = CMD_PREF(SITEPRE3)\n          End\n       End\n    Return\n\n/*==================================================================*/\n/*  Resolve actual value of command table prefix.                   */\n/*  - check that prefix conforms to naming conventions              */\n/*  - ISPF 5.7 introduced the option of masks in these fields to    */\n/*    create a prefix from the MVS system name.                     */\n/*  - this invoked only by READ_CONFIG                              */\n/*------------------------------------------------------------------*/\nCMD_PREF:\n    Arg prefix\n    prefix = Strip(prefix,'T')\n    Select\n      When Word(ZPDFREL,2) <= '5.6' Then\n         resolved_prefix = prefix\n      When Left(prefix,1) \u00ac= '*' Then\n         resolved_prefix = prefix\n      Otherwise\n        \"VGET ZSYSID\"                 /* current MVS system name */\n        Select\n          When prefix = '*' Then\n             resolved_prefix = Left(zsysid,4)\n          When Length(prefix) = 2 Then Do     /* format:  *m     */\n             m = Substr(prefix,2)\n             If Verify(m,'12345678') = 0 Then /* value of m is valid */\n                resolved_prefix = Left(Substr(zsysid,m),4)\n             Else  /* value of m is invalid */\n                resolved_prefix = '????'\n             End\n          Otherwise                           /* format:  *m:n   */\n             m = Substr(prefix,2,1)\n             n = Substr(prefix,4,1)\n             resolved_prefix = '????'    /* m &/or n is invalid  */\n             If Verify(m,'12345678') = 0 ,\n             &  Verify(n,'12345678') = 0 Then Do\n                If  m <= n & n - m <= 3 Then  /* m & n are valid */\n                   resolved_prefix = Left(Substr(zsysid,m,1+n-m),4)\n                End\n          End\n      End\n    valid_chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@$#'\n    If Verify(Strip(resolved_prefix,'T'),valid_chars) > 0,\n     | Pos(Left(resolved_prefix,1),'0123456789') > 0 Then\n       resolved_prefix = ''      /* configured prefix is invalid */\n    Return Strip(resolved_prefix)\n\n/*========================  That's all folks  ========================*/\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMD0": {"ttr": 2568, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00F\\x00\\x98\\x19o\\x01\\x07\\x02_\\x17U\\x00\\xf5\\x00K\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "1998-07-15T00:00:00", "modifydate": "2007-01-25T17:55:46", "lines": 245, "newlines": 75, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRSPBC,ISR)\n/*-------------------------- ISPFCMD0 --------------------------------*/\n/*  Panel to display a table of the active ISPF commands              */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_)\n\u00ac TYPE(INPUT)  INTENS(HIGH) COLOR(RED)  CAPS(ON)  PADC(_)\n@ TYPE(INPUT)  INTENS(HIGH) COLOR(RED)  CAPS(ON)  PADC(-)\n| TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW) CAPS(ON)\n\u00f3 TYPE(OUTPUT) INTENS(HIGH) COLOR(TURQ) CAPS(OFF) SKIP(ON)\n# TYPE(OUTPUT) INTENS(LOW)  COLOR(GREEN)\n\u00df TYPE(OUTPUT) INTENS(HIGH) COLOR(RED)  CAPS(ON)\n\u00c4 TYPE(TEXT)   INTENS(HIGH) COLOR(YELLOW)\n$ TYPE(TEXT)   INTENS(HIGH) COLOR(TURQ) SKIP(ON)\n` TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)\n? TYPE(TEXT)   INTENS(LOW)  COLOR(BLUE)\n)BODY EXPAND(\u00d6\u00d6)   /* WIDTH(&ZSCREENW) */\n?-\u00d6-\u00d6-\u00c4ISPF Commands?-\u00d6-\u00d6-\n?Option%==>_ZCMD                                                         ?&TSUF\n? %1 `&OPT1                                   \u00acZ$Application Id :|Z   +\n? %2 `Display Command Table information       \u00acZ$User table(s)  :|TB2A|TB2B|TB2C\n? %3 `&OPT3                                   \u00acZ\u00f3DESC3         $:|TB3A|TB3B|TB3C\n     %&PENDMSG                  &ONLY         \u00acZ\u00f3DESC4         $:|TB4A|TB4B|TB4C\n?  Command  ?Table ?&DESC\n? @CMDSCAN ??-----@CMDFIND                            ? Sorted by\u00acCMDSORT\n)MODEL ROWS(SCAN)\n\u00acZ\u00f3Z|ZCTVERB \u00f3Z   #ZCTDESC                                                     +\n&MODELIN2\n)INIT\n/*  \u00dfCMDTRUNC\u00dfZCTACT\n.ZVARS = '(T1,ZAPPLID,T2, +\n           T3,T4,SEL,CMDOVER,CMDTAB)'\n\n/* IF (&PENDMSG = '*** Press ENTER for pending command ***')\n/*    .HELP = ISPFCMHP\n&CMHELP = .HELP\nIF (&CMHELP = &Z)\n    IF (&ONLY = ' ONLY ALIASES')\n        .HELP = ISPFCMHA\n    IF (&ONLY = ' ONLY OVERRIDES')\n        .HELP = ISPFCMHO\n    IF (&ONLY = ' NOT OVERRIDES')\n        .HELP = ISPFCMHO\n    IF (&ONLY = ' ONLY TRUNCATED')\n        .HELP = ISPFCMHT\n    IF (&ONLY = '  ISPF TOOLS')\n        .HELP = TOOL$HLP\n    &CMHELP = .HELP\n    IF (&CMHELP = &Z)\n        .HELP = ISPFCMH0\n\n&ZCMD     = '&SELCMD &ZCMD'         /* used for executing a command  */\n&SELCMD  = &Z\nIF (&PENDMSG \u00ac= &Z)                 /* something pending: sound alarm*/\n    .ALARM = YES\nIf (&MODELIN2 = 'OMIT')             /* setting text for first option */\n    &OPT1 = 'Also show Command Actions'\n    &DESC = 'Description'\nElse                                /* also &CMDSACT = '/'           */\n    &OPT1 = 'Show only Command Descriptions'\n    &DESC = 'Description / Action'\n&UPREFS = '&ZUCTPREF.&ZUCTPRE2.&ZUCTPRE3'\nIf (&UPREFS = &Z)                 /* no User table is active       */\n    &OPT3 = 'Create a new User Command table'\nElse\n    &OPT3 = 'Save your User Commands on disk'\n&SEL      = &Z\n&CUR#TABS = '&T1,&T2,&T3,&T4'       /* the tables currently selected */\n&CUR#SCAN = &CMDSCAN                /* mask for scan of command rows */\n&CUR#FIND = &CMDFIND                /* chars to find in Descr/Action */\n&CUR#SACT = &CMDSACT                /* the value of 'Show Actions'   */\n&CUR#SORT = &CMDSORT                /* the current sort order        */\n\nIf (&NOAPPL = YES)                  /* no Applid cmds table          */\n    .ATTR(ZAPPLID) = 'COLOR(BLUE)'\n&TB2A  = &ZUCTPREF                  /* User table prefix, if open    */\n&TB2B  = &ZUCTPRE2                  /* User table 2 prefix, if open  */\n&TB2C  = &ZUCTPRE3                  /* User table 2 prefix, if open  */\nIf (&ZAPPLID = &ZUCTPREF)           /* Applid same as User Table?    */\n    .ATTR(TB2A) = 'COLOR(BLUE)'\nIf (&ZAPPLID = &ZUCTPRE2)           /* Applid same as User Table 2?  */\n    .ATTR(TB2B) = 'COLOR(BLUE)'\nIf (&ZAPPLID = &ZUCTPRE3)           /* Applid same as User Table 3?  */\n    .ATTR(TB2C) = 'COLOR(BLUE)'\nIf (&ZSCTSRCH = B)                  /* variable from ISRCONFG module */\n    &DESC3 = 'Site table(s)'\n    &TB3A  = &ZSCTPREF              /* Site table prefix, if open    */\n    &TB3B  = &ZSCTPRE2              /* Site table 2 prefix, if open  */\n    &TB3C  = &ZSCTPRE3              /* Site table 3 prefix, if open  */\n    &DESC4 = 'System table'\n    &TB4A  = 'ISP'\n    If (&ZAPPLID = &ZSCTPREF)       /* Applid same as Site Table?    */\n        .ATTR(TB3A) = 'COLOR(BLUE)'\n    If (&ZAPPLID = &ZSCTPRE2)       /* Applid same as Site Table 2?  */\n        .ATTR(TB3B) = 'COLOR(BLUE)'\n    If (&ZAPPLID = &ZSCTPRE3)       /* Applid same as Site Table 3?  */\n        .ATTR(TB3C) = 'COLOR(BLUE)'\nElse                                /* &ZSCTSRCH = A                 */\n    &DESC3 = 'System table'\n    &TB3A  = 'ISP'\n    &DESC4 = 'Site table(s)'\n    &TB4A  = &ZSCTPREF\n    &TB4B  = &ZSCTPRE2\n    &TB4C  = &ZSCTPRE3\n    If (&ZAPPLID = &ZSCTPREF)       /* Applid is same as Site Table  */\n        .ATTR(TB4A) = 'COLOR(BLUE)'\n    If (&ZAPPLID = &ZSCTPRE2)       /* Applid same as Site Table 2?  */\n        .ATTR(TB4B) = 'COLOR(BLUE)'\n    If (&ZAPPLID = &ZSCTPRE3)       /* Applid same as Site Table 3?  */\n        .ATTR(TB4C) = 'COLOR(BLUE)'\n\n&ZSCROLLD = CSR                     /* always scroll by cursor pos'n */\nIf (&ZTDROWS,LT,&ZTDTOP)\n    &ZTDMARK = '                     ***  No matching commands  ***'\n    .ATTRCHAR(+) = 'COLOR(WHITE)'\nElse &ZTDMARK = '  ***************************** Bottom of list +\n                 *****************************'\n    .ATTRCHAR(+) = 'COLOR(BLUE)'\nIf (&MODELIN2 = 'OMIT')\n    .ATTR(ZCTVERB) = 'TYPE(OUTPUT)'          /* COLOR(YELLOW) */\n    .ATTRCHAR(#) = 'TYPE(OUTPUT)'          /* COLOR(GREEN)  */\n    .ATTRCHAR(\u00df) = 'TYPE(OUTPUT)'          /* COLOR(RED)    */\nElse\n    .ATTR(ZCTVERB) = 'TYPE(INPUT)'          /* COLOR(YELLOW) */\n    .ATTRCHAR(#) = 'TYPE(INPUT)'          /* COLOR(GREEN)  */\n    .ATTRCHAR(\u00df) = 'TYPE(INPUT)'          /* COLOR(RED)    */\n\n)REINIT\nREFRESH(*)                          /* refresh all variables         */\n&ZCMD     = '&SELCMD &ZCMD'         /* used for executing a command  */\n&SELCMD  = &Z\n\n)PROC\nIf (&ZCMD = CAN,CANCEL,EXIT)        /* recognise CANCEL or EXIT cmd  */\n    .RESP = END\n\nIf (&ZCMD = 1)                      /* switching display MODEL line  */\n    If (&MODELIN2 = 'OMIT')\n        &MODELIN2 = '    \u00dfCMDTRUNC\u00dfZCTACT' /* define 2nd )MODEL line */\n    Else\n        &MODELIN2 = 'OMIT'          /* do not display 2nd )MODEL line*/\n\nIf (&ZCMD = A,AL,ALI,ALIA,ALIAS,T,TR,TRU,TRUN,TRUNC)\n    &MODELIN2 = '    \u00dfCMDTRUNC\u00dfZCTACT' /* define 2nd )MODEL line     */\n\nIf (&ZTDSELS \u00ac= 0000)               /* at least one row selected     */\n    &ZERRSM = ''\n    &ZERRALRM = 'YES'\n    &ZERRHM = ISPFCMH3\n    If (&COPYPEND = &Z)\n        If (&COPYROWS = YES OR &ZCMD = COPY)\n            &ZERRHM = ISPFCMHK          /* HELP for copying commands */\n            &ZERRLM = 'Invalid value. Use C or S to select commands for COPY'\n            VER(&SEL,LIST,C,S,MSG=ISRZ002)\n        Else\n            &VALALL = 'S,H,V,E,U,I,R,D,X,C,M,A,B'\n            &ZERRLM = 'Invalid value. Enter one of the following: &VALALL'\n            VER(&SEL,LIST,S,H,V,E,U,I,R,D,X,C,M,A,B,MSG=ISRZ002)\n    Else\n        &CPWORD = TRUNC(&COPYPEND,4)\n        If (&CPWORD = MOVE,COPY)\n            &VALSAB = 'S,H,V,E,U,I,R,D,X,A,B'\n            &ZERRLM = 'Conflicts with pending MOVE/COPY, valid are: &VALSAB'\n            VER(&SEL,LIST,S,V,E,U,I,R,D,X,A,B,MSG=ISRZ002)\n        Else\n            &VALSCM = 'S,H,V,E,U,I,R,D,X,C,M'\n            &ZERRLM = 'Conflicts with pending MOVE/COPY, valid are: &VALSCM'\n            VER(&SEL,LIST,S,H,V,E,U,I,R,D,X,C,M,MSG=ISRZ002)\n    If (&ZCTVERB = '--------' & &ZCTDESC = '<<< no commands in this table >>>')\n        &ZERRHM = ISPFCMHE\n        If (&COPYROWS = YES OR &ZCMD = COPY)\n            &ZERRHM = ISPFCMHK          /* HELP for copying commands */\n            &ZERRLM = 'COPY is not allowed for <<<no commands>>> line'\n            VER(&SEL,LIST,' ',MSG=ISRZ002)\n        Else\n            &ZERRLM = 'Only: H,V,E,U,X are allowed for <<<no commands>>> line'\n            VER(&SEL,LIST,H,V,E,U,X,MSG=ISRZ002)\n    If (&SEL = S & .MSG = &Z)\n        &REASON = &Z\n        If (&ZCTACT = &Z)\n            &REASON = 'because it has NO ACTION'\n        If (&ZCTACT = 'PASSTHRU')\n            &REASON = 'here because it''s a PASSTHRU command'\n        &ACT1 = TRUNC(&ZCTACT,1)\n        &ACTW1 = TRUNC(&ZCTACT,' ')     /* 1st word of action */\n        &ACTT = .TRAIL\n        &ACTW2 = TRUNC(&ACTT,' ')       /* 2nd word of action */\n        If (&ACT1 = '&&')\n            &REASON = 'here - not able to do substitution for &ACTW1'\n        If (&ACTW1 = ALIAS)\n            If (&ACTW2 = SPLIT,SWAP,SCRNAME)\n                &REASON = 'that way - enter it as a primary command'\n        If (&REASON \u00ac= &Z)\n            &ZERRLM = '&ZCTVERB can''t be invoked &REASON',\n            .MSG = ISRZ002\n\nIf (&T1 \u00ac= &Z) &T1 = '/'\n    If (&NOAPPL = YES) &T1 = ' '    /* No Application command table  */\n    If (&ZAPPLID = 'ISP') &T1 = ' ' /* ISP is only the System table  */\n        If (&TB3A = ISP) &T3 = '/'\n        If (&TB4A = ISP) &T4 = '/'\nIf (&T2 \u00ac= &Z)\n    If (&UPREFS = &Z) &T2 = ' '     /* No User table open            */\n    Else &T2 = '/'                  /* User table exists             */\n    If (&ZAPPLID = &ZUCTPREF)       /* Applid is same as User Table| */\n        &T1 = '/'\n        &T2 = ' '\nIf (&T3 \u00ac= &Z) &T3 = '/'\n    If (&TB3A = &ZSCTPREF)\n        &SPREFS = '&ZSCTPREF.&ZSCTPRE2.&ZSCTPRE3'\n        If (&SPREFS = &Z) &T3 = ' ' /* No Site table open            */\n        If (&ZAPPLID = &ZSCTPREF)   /* Applid is same as Site Table| */\n            &T1 = '/'\n            &T3 = ' '\nIf (&T4 \u00ac= &Z) &T4 = '/'\n    If (&TB4A = &ZSCTPREF)\n        &SPREFS = '&ZSCTPREF.&ZSCTPRE2.&ZSCTPRE3'\n        If (&SPREFS = &Z) &T4 = ' ' /* No Site table open            */\n        If (&ZAPPLID = &ZSCTPREF)   /* Applid is same as Site Table| */\n            &T1 = '/'\n            &T4 = ' '\n\n&CMD1 = TRUNC(&ZCMD,2)              /* to save moving cursor .....   */\nIf (&CMD1 = 'S ')\n    &CMDSCAN = .TRAIL               /* select only cmds starting with*/\nIf (&CMD1 = 'F ')\n    &CMDFIND = .TRAIL               /* find descript/actions with .. */\nIf (&CMD1 = 'X ')\n    &TRAIL = .TRAIL\n    &CMDFIND = '\u00ac &TRAIL'         /* find descript/actions without */\n)FIELD\nFIELD(ZCTDESC)                    /* needs ISPF 5.2 or later          */\n/* If (&MODELIN2 \u00ac= 'OMIT')       this is not allowed for a variable\n/*     FIELD(ZCTACT)              model definition column ..... shame||\n)HELP\nFIELD(CMDSORT) PANEL(ISPFCMHS)\n/*  FIELD(ZCTVERB) PANEL(ISPFCMH6)\n/*  FIELD(ZCTACT)  PANEL(ISPFCMH8)\n/*  FIELD(ZCTDESC) PANEL(ISPFCMH9)\n)END\n\u00acZ\u00f3Z|ZCTVERB \u00f3Z   #ZCTDESC                                                     +\n\u00acZ\u00f3Z|ZCTVERB \u00f3Z   #ZCTDESC                                                 |Z\n.ZVARS = '(T1,ZAPPLID,T2,ZUCTPREF,T3,T4,SEL,CMDOVER,CMDTAB)'\n.ZVARS = '(T1,ZAPPLID,T2,ZUCTPREF,T3,T4,SEL,CMDOVER,CMDTAB,CMDNUM)'\n.ZVARS = '(T1,ZAPPLID,T2,ZUCTPREF,T3,T4,SEL,CMDOVER,CMDTAB,CMDMINL)'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMD1": {"ttr": 2819, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01,\\x00\\x02\\x00\\x98\\x18O\\x01\\x07\\x02_\\x17V\\x003\\x00'\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@\"", "ispf": {"version": "01.44", "flags": 0, "createdate": "1998-07-03T00:00:00", "modifydate": "2007-01-25T17:56:02", "lines": 51, "newlines": 39, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRSPBC,ISR)\n/*-------------------------- ISPFCMD1 --------------------------------*/\n/*  Panel for user to create a new table of ISPF User commands        */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_)\n\u00ac TYPE(INPUT)  INTENS(HIGH) COLOR(RED) CAPS(ON) PADC(_)\n@ TYPE(OUTPUT) INTENS(HIGH) COLOR(TURQ)\n| TYPE(OUTPUT) INTENS(HIGH) COLOR(BLUE) CAPS(OFF)\n* TYPE(TEXT)   INTENS(HIGH) COLOR(YELLOW)\n$ TYPE(TEXT)   INTENS(HIGH) COLOR(TURQ)\n` TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)\n)BODY EXPAND(\u00d6\u00d6)\n+-\u00d6-\u00d6-*ISPF Commands+-\u00d6-\u00d6-\n+Command%==>_ZCMD\n+\n`     Your new@Z   `command table (&SAVTAB1) will be stored in your &NTEXT1\n`     ISPF table library, which must be allocated in your ISPTLIB ddname\n`     concatenation. Select it from the following list by entering$'S'.\n`\n`     If you do not have &NTEXT2\n%       1)`exit from*\"ISPF Commands\"`by repeated$PF3`(END)\n%       2)`create a PDS library (RECFM=FB,LRECL=80) for &NTEXT3\n%       3)`exit from ISPF, then add the library to your ISPTLIB ddname\n%       4)`start ISPF, invoke*\"ISPF Commands\"`, then try this again.\n%\n%      Libraries allocated to ISPTLIB\n%     -------------------------------- +   $-->`shows existing &SAVTABL members\n)MODEL\n @Z  \u00acZ+|CMDLIB                                          |VOLUME+\n)INIT\n&ZCMD     = &Z\n.ZVARS = '(SAVTAB POINT SEL)'\n.CURSOR = SEL\n.CSRROW = 1                 /* cursor on 1st line of dataset list */\n&ZTDMARK = ' '              /* blank 'END OF DATA' line */\n&SAVTAB1 = &SAVTABL\nIf (&SAVTAB = USER)\n    &NTEXT1 = 'personal'\n    &NTEXT2 = 'your own ISPF table library yet:'\n    &NTEXT3 = 'your tables'\n    .HELP = ISPFCMHM\nIf (&SAVTAB = SITE)\n    &NTEXT1 = 'selected'\n    &NTEXT2 = 'an appropriate ISPF table library yet:'\n    &NTEXT3 = 'shared tables'\n    .HELP = ISPFCMHN\n)REINIT\nREFRESH(*)                  /* refresh all variables */\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMD2": {"ttr": 2821, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01C\\x00\\x11\\x00\\x98\\x19O\\x01\\x07\\x02_\\x17V\\x00r\\x00\\x13\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.67", "flags": 0, "createdate": "1998-07-13T00:00:00", "modifydate": "2007-01-25T17:56:11", "lines": 114, "newlines": 19, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRSNAB,ISR)\n/*-------------------------- ISPFCMD2 --------------------------------*/\n/*  Panel for user to confirm update of an ISPF table library         */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_)\n $ TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)\n _ TYPE(INPUT)  INTENS(HIGH) COLOR(TURQ)  CAPS(IN)\n \u00f3 TYPE(OUTPUT) INTENS(HIGH) COLOR(TURQ)\n \u00a2 TYPE(CHAR) COLOR(GREEN)\n \\ TYPE(CHAR) COLOR(WHITE)\n \u00a7 AREA(DYNAMIC)\n)BODY WINDOW(55,15)\n+Command ==>_DUMMY                                    $\n+                                                     $\n$                                                     $\n$   Press%ENTER$&TXTC1                                $\n\n$   Member :\u00f3TABNAME +\n$   Library:_LIBNAME\n$   Volume :_VOLUME+\n\n$  $&TXTC2                                            $\n+                                                +\n+   &TXTC3                                            +\n$                                                     $\n$   ........ or \u00a7TXTC4,SHDC4             \u00a7            $\n)INIT\n &DUMMY = &Z\n &ZWINTTL = 'Save &SAVTAB Commands'    /* heading for Pop-Up window */\n IF (&SAVTAB = APPL & &ZCMD = NEWAPPL | &CONFOPEN = YES)\n     &ZWINTTL = 'Create new Application command table'\n &TXTC1 = 'to SAVE table &TABFIRST to disk.'\n &TXTC2 = &Z\n &TXTC3 = &Z\n IF (&EXISTS = 0)\n     &TXTC2 = 'It will REPLACE the existing member.'\n     &TXTC3 = '(you can change Library && Volume)'\n ELSE IF (&SAVTAB = USER,SITE)\n         &TXTC3 = '(Library && Volume can be changed)'\n IF (&SAVTAB = APPL)\n     IF (&CONFOPEN \u00ac= YES)\n         .ATTR(TABNAME) = 'TYPE(INPUT)'\n         &TXTC3 = '(Member, Library && Volume can be changed)'\n     IF (&CONFOPEN = YES)\n         &TXTC3 = '(Library && Volume can be changed)'\n IF (&SAVTAB = APPL & &LIBNAME = &Z)\n     &TXTC2 = 'Please supply a library name.'\n     &TXTC3 = '(Member can be changed)'\n\n .CURSOR = LIBNAME\n VGET ZKLUSE PROFILE\n &KLUSE = &ZKLUSE\n IF (&ZKLUSE = N)                      /* user has KEYLIST OFF */\n     &ZKLUSE = Y                       /* turn it ON           */\n     VPUT ZKLUSE PROFILE\n\n IF (VER(&EN,LEN,EQ,2)) &ES = '\\\\'\n IF (VER(&EN,LEN,EQ,3)) &ES = '\\\\\\'\n IF (&EN \u00ac= &Z & &CA \u00ac= &Z)\n     &TXTC4 = 'press &EN/&CA to CANCEL'\n     &SHDC4 = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2&ES\u00a2\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n IF (&EN \u00ac= &Z & &CA = &Z)\n     &TXTC4 = 'press &EN to CANCEL'\n     &SHDC4 = '\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n IF (&EN = &Z & &CA \u00ac= &Z)\n     &TXTC4 = 'press &CA to CANCEL'\n     &SHDC4 = '\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n IF (&EN = &Z & &CA = &Z)\n     &TXTC4 = 'enter END or CAN to CANCEL'\n     &SHDC4 = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\u00a2\u00a2\u00a2\u00a2\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n\n IF (&COPYROWS = YES)\n     .HELP = ISPFCMHK                  /* HELP for Copying commands */\n ELSE\n     .HELP = ISPFCMH0                  /* HELP index panel          */\n)REINIT\n VGET ZKLUSE PROFILE\n &KLUSE = &ZKLUSE\n IF (&ZKLUSE = N)                      /* user has KEYLIST OFF */\n     &ZKLUSE = Y                       /* turn it ON           */\n     VPUT ZKLUSE PROFILE\n)PROC\n IF (&DUMMY = CAN,CANCEL,EXIT)\n     .RESP = END\n IF (.RESP = ENTER)\n     &ZERRSM = ''\n     &ZERRALRM = 'YES'\n     &ZERRHM = '*'\n     /*------------------------*/\n     /* validate TABNAME value */\n     /*------------------------*/\n     &TN1 = TRUNC (&TABNAME,1)\n     VER (&TN1,NB,ALPHA)           /* 1st char must be alphabetic */\n     &TN4 = .TRAIL\n     &TN2 = &Z                       /* get the middle characters */\n     IF (VER (&TN4,LEN,EQ,7))\n         &TN2 = TRUNC (&TN4,3)\n     IF (VER (&TN4,LEN,EQ,6))\n         &TN2 = TRUNC (&TN4,2)\n     IF (VER (&TN4,LEN,EQ,5))\n         &TN2 = TRUNC (&TN4,1)\n     VER (&TN2,INCLUDE,ALPHAB,NUM)     /* check middle characters */\n     &TN3 = .TRAIL\n     &ZERRLM = 'Member name must end with ''CMDS'' '\n     VER(&TN3,NB,LIST,CMDS,MSG=ISRZ002)\n\n     VER (&LIBNAME,NB,DSNAME)          /* valid library name required */\n     VER (&VOLUME,INCLUDE,ALPHAB,NUM)\n IF (.RESP = END)\n     IF (&KLUSE = N)                   /* user had KEYLIST OFF */\n         &ZKLUSE = N                   /* turn it OFF again    */\n         VPUT ZKLUSE PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMD3": {"ttr": 2824, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x005\\x01\\x07\\x02_\\x01\\x07\\x02_\\x15B\\x00d\\x00d\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2007-01-25T00:00:00", "modifydate": "2007-01-25T15:42:35", "lines": 100, "newlines": 100, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRSPBC,ISR)\n/*-------------------------- ISPFCMD3 --------------------------------*/\n/*  Panel to display statistics of the active ISPF Command tables     */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_)\n\u00ac TYPE(INPUT)  INTENS(HIGH) COLOR(RED)    PADC(_)     CAPS(ON)\n| TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW)\n~ TYPE(OUTPUT) INTENS(HIGH) COLOR(TURQ)   JUST(LEFT)  CAPS(OFF)\n\u00f3 TYPE(OUTPUT) INTENS(HIGH) COLOR(TURQ)   JUST(RIGHT) CAPS(OFF)\n# TYPE(OUTPUT) INTENS(LOW)  COLOR(GREEN)\n\u00a7 TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW) JUST(RIGHT)\n\u00df TYPE(OUTPUT) INTENS(HIGH) COLOR(RED)\n* TYPE(TEXT)   INTENS(HIGH) COLOR(YELLOW)\n$ TYPE(TEXT)   INTENS(HIGH) COLOR(TURQ)\n` TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)\n)BODY EXPAND(\u00d6\u00d6)\n+-\u00d6-\u00d6-*ISPF Commands+-\u00d6-\u00d6-\n+Command%==>_ZCMD                                       `Defined Command tables\n` These are the command tables active in the +\u00acZ$Application Id :|Z   +\n` current ISPF application.  ISPF searches   +\u00acZ$User table(s)  :|DT2A|DT2B|DT2C\n` them in the order they are shown below.    +\u00acZ~DESC3         $:|DT3A|DT3B|DT3C\n+                                            +\u00acZ~DESC4         $:|DT4A|DT4B|DT4C\n+ Table   No. of      Last Updated\n+ Name     Cmds   Date      Time     User      Dataset Name               Volume\n+-------- +----  ---------------------------  ----------------------------------\n)MODEL ROWS(ALL)\n\u00a7CMDTABL \u00f3Z   + #CMDDATE  #CMDTIME  #CMDUSER #CMDDSN                     #CMDVOL\n)INIT\n&ZCMD     = &Z\n.ZVARS = '(T1,ZAPPLID,T2,T3,T4,CMDROWS)'\n&CUR#TABS = '&T1,&T2,&T3,&T4'       /* the tables currently selected */\n.HELP = ISPFCMH4\nIf (&NOAPPL = YES)                  /* no Applid cmds table active   */\n    .ATTR(ZAPPLID) = 'COLOR(BLUE)'\n&DT2A  = &USERPREF\n&DT2B  = &USR2PREF\n&DT2C  = &USR3PREF\nIf (&ZAPPLID = &USERPREF OR &ZUCTPREF = &Z)\n    .ATTR(DT2A) = 'COLOR(BLUE)'\nIf (&ZAPPLID = &USR2PREF OR &ZUCTPRE2 = &Z)\n    .ATTR(DT2B) = 'COLOR(BLUE)'\nIf (&ZAPPLID = &USR3PREF OR &ZUCTPRE3 = &Z)\n    .ATTR(DT2C) = 'COLOR(BLUE)'\nIf (&ZSCTSRCH = B)                  /* variable from ISRCONFG module */\n    &DESC3 = 'Site table(s)'\n    &DT3A  = &SITEPREF              /* name of defined table prefix  */\n    &DT3B  = &SIT2PREF\n    &DT3C  = &SIT3PREF\n    &DESC4 = 'System table'\n    &DT4A  = 'ISP'\n    If (&ZAPPLID = &SITEPREF OR &ZSCTPREF = &Z)\n        .ATTR(DT3A) = 'COLOR(BLUE)'\n    If (&ZAPPLID = &SIT2PREF OR &ZSCTPRE2 = &Z)\n        .ATTR(DT3B) = 'COLOR(BLUE)'\n    If (&ZAPPLID = &SIT3PREF OR &ZSCTPRE3 = &Z)\n        .ATTR(DT3C) = 'COLOR(BLUE)'\nElse                                /* &ZSCTSRCH = A                 */\n    &DESC3 = 'System table'\n    &DT3A  = 'ISP'\n    &DESC4 = 'Site table(s)'\n    &DT4A  = &SITEPREF\n    &DT4B  = &SIT2PREF\n    &DT4C  = &SIT3PREF\n    If (&ZAPPLID = &SITEPREF OR &ZSCTPREF = &Z)\n        .ATTR(DT4A) = 'COLOR(BLUE)'\n    If (&ZAPPLID = &SIT2PREF OR &ZSCTPRE2 = &Z)\n        .ATTR(DT4B) = 'COLOR(BLUE)'\n    If (&ZAPPLID = &SIT3PREF OR &ZSCTPRE3 = &Z)\n        .ATTR(DT4C) = 'COLOR(BLUE)'\n&ZTDMARK = ' '\n)REINIT\nREFRESH(*)                          /* refresh all variables         */\n)PROC\nIf (&T1 \u00ac= &Z) &T1 = '/'\n    If (&NOAPPL = YES) &T1 = ' '    /* No Application command table  */\n    If (&ZAPPLID = 'ISP') &T1 = ' ' /* ISP is only the System table  */\n        If (&TB3 = ISP) &T3 = '/'\n        If (&TB4 = ISP) &T4 = '/'\nIf (&T2 \u00ac= &Z)\n    If (&ZUCTPREF = &Z) &T2 = ' '   /* No User table open            */\n    Else &T2 = '/'                  /* User table exists             */\n    If (&ZAPPLID = &ZUCTPREF)       /* Applid is same as User Table| */\n        &T1 = '/'\n        &T2 = ' '\nIf (&T3 \u00ac= &Z) &T3 = '/'\n    If (&TB3 = &ZSCTPREF)\n        If (&ZSCTPREF = &Z) &T3 = ' ' /* No Site table open          */\n        If (&ZAPPLID = &ZSCTPREF)   /* Applid is same as Site Table| */\n            &T1 = '/'\n            &T3 = ' '\nIf (&T4 \u00ac= &Z) &T4 = '/'\n    If (&TB4 = &ZSCTPREF)\n        If (&ZSCTPREF = &Z) &T4 = ' ' /* No Site table open          */\n        If (&ZAPPLID = &ZSCTPREF)   /* Applid is same as Site Table| */\n            &T1 = '/'\n            &T4 = ' '\n)FIELD\n FIELD(CMDDSN)\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMD4": {"ttr": 2827, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01C\\x00)\\x00\\x973\\x8f\\x01\\x07\\x02_\\x17V\\x00o\\x00V\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.67", "flags": 0, "createdate": "1997-12-04T00:00:00", "modifydate": "2007-01-25T17:56:29", "lines": 111, "newlines": 86, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRSNAB,ISR)\n/*-------------------------- ISPFCMD4 --------------------------------*/\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*--------------------------------------------------------------------*/\n/*  This is based on the ISPUCMX panel supplied with ISPF 4.5         */\n/*  - used to update an existing command or to specify a new command. */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_) FORMAT(MIX)\n @  TYPE(PT)\n |  TYPE(FP)\n $  TYPE(TEXT) COLOR(GREEN)\n ]  AREA(SCRL)\n /  TYPE(NT) SKIP(ON)\n \u00a6  TYPE(NEF) PADC(USER)\n \u00c4  TYPE(VOI) PADC(USER)\n {  TYPE(WASL) SKIP(ON) GE(ON)\n }  TYPE(ET)\n \u00dc  TYPE(NEF) CAPS(ON) PADC(USER)\n \u00a2  TYPE(CHAR) COLOR(GREEN)\n \\  TYPE(CHAR) COLOR(WHITE)\n \u00a7  AREA(DYNAMIC)\n)BODY WINDOW(76,17)\n$      @&PNLTITLE\n@Command ==>_ZCMD                                                          $\n]SAREA38                                                                   ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n)AREA SAREA38\n$  Make any changes then use the cursor to select}Update$or}Cancel$    $\n$  \u00a7UTXT,USHD                                                         \u00a7\n{{\n$ |Command . .\u00dcZETVERB /\n$ |Trunc . . .\u00a6Z/\n$ |Action  . .\u00dcZETACT1                                                     /\n$             \u00dcZETACT2                                                     /\n$             \u00dcZETACT3                                                     /\n$             \u00dcZETACT4                                                     /\n$ |Description\u00a6ZETDESC1                                                    /\n$             \u00a6ZETDESC2            /\n$ {{\n$ {                   $\u00c4ZUPDKEY ${             $\u00c4ZCANKEY $\n)INIT\n.ZVARS = '(ZETTRUNC)'\n&ZWINTTL = ''\n&HTEXT01 = 'Update'                /* text for panel ISPFCMH6 */\n.HELP = ISPFCMH5                   /* based on panel ISP39900 */\n.CURSOR = &CURSOR                  /* cursor positioned by dialog */\n&ZUCMKEY = ' '\n&ZUPDKEY = 'Update'\n&ZCANKEY = 'Cancel'\n.ATTR(ZETACT2) = 'JUST(ASIS)'\n.ATTR(ZETACT3) = 'JUST(ASIS)'\n.ATTR(ZETACT4) = 'JUST(ASIS)'\n.ATTR(ZETDESC2) = 'JUST(ASIS)'\n.ATTR(ZUPDKEY)='PAS(ON)'\n.ATTR(ZCANKEY)='PAS(ON)'\nVGET ZKLUSE PROFILE\n&KLUSE = &ZKLUSE\nIF (&ZKLUSE = N)                      /* user has KEYLIST OFF */\n    &ZKLUSE = Y                       /* turn it ON           */\n    VPUT ZKLUSE PROFILE\nIF (&EN \u00ac= &Z & &CA \u00ac= &Z)\n    &UTXT = 'Alternatively press &EN to UPDATE, or press &CA to CANCEL.'\n    &USHD = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\nIF (&EN \u00ac= &Z & &CA = &Z)\n    &UTXT = 'Alternatively press &EN to UPDATE, or enter CAN to CANCEL.'\n    &USHD = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\nIF (&EN = &Z & &CA \u00ac= &Z)\n    &UTXT = 'Alternatively enter END to UPDATE, or press &CA to CANCEL.'\n    &USHD = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\nIF (&EN = &Z & &CA = &Z)\n    &UTXT = 'Alternatively enter END to UPDATE, or enter CAN to CANCEL.'\n    &USHD = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n)REINIT\nVGET ZKLUSE PROFILE\n&KLUSE = &ZKLUSE\nIF (&ZKLUSE = N)                      /* user has KEYLIST OFF */\n    &ZKLUSE = Y                       /* turn it ON           */\n    VPUT ZKLUSE PROFILE\n&ZUCMKEY = ' '\n)PROC\nIF (&KLUSE = N)                       /* user had KEYLIST OFF */\n    &ZKLUSE = N                       /* turn it OFF again    */\n    VPUT ZKLUSE PROFILE\n)HELP\nFIELD(ZETVERB) PANEL(ISPFCMH6)     /* based on panel ISP39312 */\nFIELD(ZETTRUNC) PANEL(ISPFCMH7)    /* based on panel ISP39313 */\nFIELD(ZETACT1) PANEL(ISPFCMH8)     /* followed by ISP39314    */\nFIELD(ZETACT2) PANEL(ISPFCMH8)     /* followed by ISP39314    */\nFIELD(ZETACT3) PANEL(ISPFCMH8)     /* followed by ISP39314    */\nFIELD(ZETACT4) PANEL(ISPFCMH8)     /* followed by ISP39314    */\nFIELD(ZETDESC1) PANEL(ISPFCMH9)    /* based on panel ISP39315 */\nFIELD(ZETDESC2) PANEL(ISPFCMH9)    /* based on panel ISP39315 */\n)PNTS\nFIELD(ZUPDKEY) VAR(ZUCMKEY) VAL(END)\nFIELD(ZCANKEY) VAR(ZUCMKEY) VAL(CANCEL)\n)END\n)BODY WINDOW(76,17) CMD()\n$  Alternatively use}PF3$(END) to Update, or}PF12$(CANCEL) to Cancel.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMD5": {"ttr": 2830, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01!\\x008\\x00\\x98\\x12o\\x01\\x07\\x02_\\x17V\\x009\\x001\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.33", "flags": 0, "createdate": "1998-05-06T00:00:00", "modifydate": "2007-01-25T17:56:38", "lines": 57, "newlines": 49, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRSNAB,ISR)\n/*-------------------------- ISPFCMD5 --------------------------------*/\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*--------------------------------------------------------------------*/\n/*  This is based on the ISPUCMXR panel supplied with ISPF 4.5        */\n/*  - it is used to view an existing command definition.              */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_) FORMAT(MIX)                             /* ENGLISH */\n @  TYPE(PT)\n |  TYPE(FP)\n $  TYPE(NT)\n \u00c4  TYPE(VOI) PADC(USER) SKIP(OFF)\n ]  AREA(SCRL)\n \u00dc  TYPE(VOI) CAPS(ON) PADC(USER) SKIP(OFF)\n)BODY WINDOW(76,13)\n@      @&PNLTITLE\n Command ==>_ZCMD\n]SAREA38                                                                   ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n)AREA SAREA38\n  |Command . :\u00dcZETVERB $\n  |Trunc . . :\u00c4Z$\n  |Action  . :\u00dcZETACT1                                                     $\n              \u00dcZETACT2                                                     $\n              \u00dcZETACT3                                                     $\n              \u00dcZETACT4                                                     $\n  |Description\u00c4ZETDESC1                                                    $\n              \u00c4ZETDESC2            $\n)INIT\n.ZVARS = '(ZETTRUNC)'\n.ATTR(ZETACT2) = 'JUST(ASIS)'      /* show fields correctly */\n.ATTR(ZETACT3) = 'JUST(ASIS)'\n.ATTR(ZETACT4) = 'JUST(ASIS)'\n.ATTR(ZETDESC2) = 'JUST(ASIS)'\n&ZWINTTL = ''\n&HTEXT01 = 'View'                  /* text for panel ISPFCMH6 */\n.HELP = ISPFCMH5                   /* based on panel ISP39901 */\n)PROC\n)HELP\nFIELD(ZETVERB) PANEL(ISPFCMH6)     /* based on panel ISP39312 */\nFIELD(ZETTRUNC) PANEL(ISPFCMH7)    /* based on panel ISP39313 */\nFIELD(ZETACT1) PANEL(ISPFCMH8)     /* followed by ISP39314 */\nFIELD(ZETACT2) PANEL(ISPFCMH8)     /* followed by ISP39314 */\nFIELD(ZETACT3) PANEL(ISPFCMH8)     /* followed by ISP39314 */\nFIELD(ZETACT4) PANEL(ISPFCMH8)     /* followed by ISP39314 */\nFIELD(ZETDESC1) PANEL(ISPFCMH9)    /* based on panel ISP39315 */\nFIELD(ZETDESC2) PANEL(ISPFCMH9)    /* based on panel ISP39315 */\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMD6": {"ttr": 2832, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01-\\x00G\\x01\\x02\\x17o\\x01\\x07\\x02_\\x17V\\x00Q\\x00Q\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.45", "flags": 0, "createdate": "2002-06-25T00:00:00", "modifydate": "2007-01-25T17:56:47", "lines": 81, "newlines": 81, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRSNAB,ISR)\n/*-------------------------- ISPFCMD6 --------------------------------*/\n/*  Panel for user to invoke a command (which has &ZPARM parameter)   */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_)\n $ TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)\n @ TYPE(OUTPUT) INTENS(HIGH) COLOR(TURQ)   CAPS(OFF)\n # TYPE(OUTPUT) INTENS(HIGH) COLOR(RED)\n \u00a2 TYPE(CHAR) INTENS(LOW)  COLOR(GREEN)\n \\ TYPE(CHAR) INTENS(HIGH) COLOR(RED)\n ! TYPE(CHAR) INTENS(HIGH) COLOR(WHITE)\n \u00a7 AREA(DYNAMIC)\n)BODY WINDOW(77,15)\n+Command ==>_DUMMY                                            $\n$                                                             $\n$                                                             $\n$   Description:@ZETDESC                                                 +\n$   Action     :#ZETACT1\n$               #ZETACT2\n$                                                $\n$   You can (optionally) supply parameters for this command&INVTXT1\n$   \u00a7INVTXT2,INVSHD2                                                       \u00a7\n%   ==>_ZCMD\n$                                                             $\n$   \u00a7INVTXT4,INVSHD4                                                       \u00a7\n$                                                             $\n$   Press%ENTER$to INVOKE the command, or \u00a7INVTXT3,INVSHD3         \u00a7\n)INIT\n &DUMMY = &Z\n &ZWINTTL = 'Invoking Command: &IVERB'\n .CURSOR = ZCMD\n VGET ZKLUSE PROFILE\n &KLUSE = &ZKLUSE\n IF (&ZKLUSE = N)                      /* user has KEYLIST OFF */\n     &ZKLUSE = Y                       /* turn it ON           */\n     VPUT ZKLUSE PROFILE\n\n &INVTXT1 = '.'\n &INVTXT2 = 'Enter any parameter(s) here.'\n &INVSHD2 = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n IF (&ZETACT1 \u00ac= SETVERB)\n     &INVTXT1 = ', to be inserted'\n     &INVTXT2 = 'where &&ZPARM is in the Action above.  &INVTXT2'\n     &INVSHD2 = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\\\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2&INVSHD2'\n\n IF (VER(&EN,LEN,EQ,2)) &ES = '!!'\n IF (VER(&EN,LEN,EQ,3)) &ES = '!!!'\n IF (&EN \u00ac= &Z & &CA \u00ac= &Z)\n     &INVTXT3 = 'press &EN/&CA to CANCEL'\n     &INVSHD3 = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2&ES\u00a2!!!\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n IF (&EN \u00ac= &Z & &CA = &Z)\n     &INVTXT3 = 'press &EN to CANCEL'\n     &INVSHD3 = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2!!!\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n IF (&EN = &Z & &CA \u00ac= &Z)\n     &INVTXT3 = 'press &CA to CANCEL'\n     &INVSHD3 = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2!!!\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n IF (&EN = &Z & &CA = &Z)\n     &INVTXT3 = 'enter END or CAN to CANCEL'\n     &INVSHD3 = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2!!!\u00a2\u00a2\u00a2\u00a2!!!\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n\n IF (&HPANL \u00ac= &Z)\n     .HELP = &HPANL\n     IF (&HE = &Z)\n         &INVTXT4 = 'Enter HELP to see HELP information about this command'\n         &INVSHD4 = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2!!!!\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n     ELSE\n         &INVTXT4 = 'Press &HE to see HELP information about this command'\n         &INVSHD4 = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2!!!\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n ELSE\n     .HELP = ISPFCMH0\n     &INVTXT4 = ''\n     &INVSHD4 = ''\n)PROC\n IF (&DUMMY = CAN,CANCEL,EXIT)\n     .RESP = END\n IF (.RESP = END)\n     IF (&KLUSE = N)                   /* user had KEYLIST OFF */\n         &ZKLUSE = N                   /* turn it OFF again    */\n         VPUT ZKLUSE PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMD7": {"ttr": 3073, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00U\\x00\\x99 O\\x01\\x07\\x02_\\x17V\\x00,\\x00\\x1c\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "1999-07-23T00:00:00", "modifydate": "2007-01-25T17:56:55", "lines": 44, "newlines": 28, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRSNAB,ISR)\n/*-------------------------- ISPFCMD7 --------------------------------*/\n/*  Panel to show table validation error - preventing updates         */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_)\n + TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)\n \u00a2 TYPE(TEXT)   INTENS(HIGH) COLOR(TURQ)\n \\ TYPE(OUTPUT) INTENS(HIGH) COLOR(TURQ)   CAPS(OFF)\n ! TYPE(OUTPUT) INTENS(HIGH) COLOR(TURQ) JUST(RIGHT)\n)BODY WINDOW(44,11)\n+_DUMMY                                    +\n+!VALCMD  +&VALTXT1                        +\n+                                          +\n+ Command table:\\LIVETABL+has been updated +\n+ and no longer matches the displayed list +\n+ of commands.                             +\n+                                          +\n+ You can use the\u00a2REF+command to refresh   +\n+ your ISPF Commands list.  Then you can   +\n+ re-enter &VALTXT2         \\VALCM2        +\n+                                          +\n)INIT\n&ZWINTTL = 'Table Validation Error'\n\nIF (&SEL = &Z AND &ZTDSELS > 0000)     /* updated on ISPFCMD0 panel */\n    &VALTXT1 = 'command cannot be updated.'\n    &VALTXT2 = 'your update.'\n    &VALCMD = &VALVERB                 /* the updated &ZCTVERB      */\n    &VALCM2 = &Z\n\nELSE                                   /* line or primary command   */\n    &VALTXT1 = 'command is not allowed.'\n    &VALCMD = &SEL\n    IF (&VALCMD = &Z)\n        &VALCMD = &ZCMD\n    &VALCM2 = &VALCMD\n    IF (VER(&VALCMD,LEN,GT,1))\n        &VALTXT2 = 'primary command:'\n    ELSE\n        &VALTXT2 = 'the line command:'\n.HELP = ISPFCMH0\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMD8": {"ttr": 3075, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01%\\x00\\x03\\x00\\x992?\\x01\\x07\\x02_\\x17W\\x00k\\x00P\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.37", "flags": 0, "createdate": "1999-11-19T00:00:00", "modifydate": "2007-01-25T17:57:03", "lines": 107, "newlines": 80, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRSNAB,ISR)\n/*-------------------------- ISPFCMD8 --------------------------------*/\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*--------------------------------------------------------------------*/\n/*  This is based on the ISPUCMX panel supplied with ISPF 4.5         */\n/*  - used when a doubtful change is being made to a command Action.  */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_) FORMAT(MIX)\n @  TYPE(PT)\n |  TYPE(FP)\n $  TYPE(TEXT) COLOR(GREEN)\n ]  AREA(SCRL)\n /  TYPE(NT) SKIP(ON)\n \u00a6  TYPE(NEF) PADC(USER)\n \u00c4  TYPE(VOI) PADC(USER)\n {  TYPE(WASL) SKIP(ON) GE(ON)\n }  TYPE(ET)\n \u00dc  TYPE(NEF) CAPS(ON) PADC(USER)\n \u00a2  TYPE(CHAR) COLOR(GREEN)\n \\  TYPE(CHAR) COLOR(WHITE)\n \u00a7  AREA(DYNAMIC)\n)BODY WINDOW(76,20)\n$        @&PNLTITL\n$Command ==>_ZCMD                                                          $\n]SAREA38                                                                   ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n]                                                                          ]\n)AREA SAREA38\n$  You have updated a command Action which was longer than displayed on$\n$  the previous panel. Please check the Action. Correct it if necessary.\n$  \u00a7UTXT,USHD                                                          \u00a7\n$  Alternatively use the cursor to select}Update$or}Cancel$below.\n$\n$\n$ |New:\u00dcZETACT1                                                     /\n$      \u00dcZETACT2                                                     /\n$      \u00dcZETACT3                                                     /\n$      \u00dcZETACT4                                                     /\n$ |Old:\u00c4ZCTACT1                                                     /\n$      \u00c4ZCTACT2                                                     /\n$      \u00c4ZCTACT3                                                     /\n$      \u00c4ZCTACT4                                                     /\n$\n$                     $\u00c4ZUPDKEY ${             $\u00c4ZCANKEY $\n)INIT\n  &ZWINTTL = ''\n  &PNLTITL = 'Confirm new Action for command &ZETVERB in table &CMDTAB.CMDS'\n  .HELP = ISP39314                   /* IBM help for command Actions */\n  &ZUCMKEY = ' '\n  &ZUPDKEY = 'Update'\n  &ZCANKEY = 'Cancel'\n  .ATTR(ZCTACT2) = 'JUST(ASIS)'\n  .ATTR(ZCTACT3) = 'JUST(ASIS)'\n  .ATTR(ZCTACT4) = 'JUST(ASIS)'\n  .ATTR(ZETACT2) = 'JUST(ASIS)'\n  .ATTR(ZETACT3) = 'JUST(ASIS)'\n  .ATTR(ZETACT4) = 'JUST(ASIS)'\n  .ATTR(ZUPDKEY)='PAS(ON)'\n  .ATTR(ZCANKEY)='PAS(ON)'\n  .CURSOR = ZETACT1\n  VGET ZKLUSE PROFILE\n  &KLUSE = &ZKLUSE\n  IF (&ZKLUSE = N)                      /* user has KEYLIST OFF */\n      &ZKLUSE = Y                       /* turn it ON           */\n      VPUT ZKLUSE PROFILE\nIF (&EN \u00ac= &Z & &CA \u00ac= &Z)\n    &UTXT = 'Then press &EN to CONFIRM UPDATE, or press &CA to CANCEL.'\n    &USHD = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\nIF (&EN \u00ac= &Z & &CA = &Z)\n    &UTXT = 'Then press &EN to CONFIRM UPDATE, or enter CAN to CANCEL.'\n    &USHD = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\nIF (&EN = &Z & &CA \u00ac= &Z)\n    &UTXT = 'Then enter END to CONFIRM UPDATE, or press &CA to CANCEL.'\n    &USHD = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\nIF (&EN = &Z & &CA = &Z)\n    &UTXT = 'Then enter END to CONFIRM UPDATE, or enter CAN to CANCEL.'\n    &USHD = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n)REINIT\n  VGET ZKLUSE PROFILE\n  &KLUSE = &ZKLUSE\n  IF (&ZKLUSE = N)                      /* user has KEYLIST OFF */\n      &ZKLUSE = Y                       /* turn it ON           */\n      VPUT ZKLUSE PROFILE\n  &ZUCMKEY = ' '\n)PROC\n  IF (&KLUSE = N)                       /* user had KEYLIST OFF */\n      &ZKLUSE = N                       /* turn it OFF again    */\n      VPUT ZKLUSE PROFILE\n)PNTS\n  FIELD(ZUPDKEY) VAR(ZUCMKEY) VAL(END)\n  FIELD(ZCANKEY) VAR(ZUCMKEY) VAL(CANCEL)\n)END\n)BODY WINDOW(76,19) CMD()\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMD9": {"ttr": 3078, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x13\\x00\\x11\\x01\\x00\\x05_\\x01\\x07\\x02_\\x17W\\x00Q\\x004\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.19", "flags": 0, "createdate": "2000-02-24T00:00:00", "modifydate": "2007-01-25T17:57:11", "lines": 81, "newlines": 52, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRSNAB,ISR)\n/*-------------------------- ISPFCMD9 --------------------------------*/\n/*  Panel for user to confirm update of an ISPF table library         */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_)\n $ TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)\n _ TYPE(INPUT)  INTENS(HIGH) COLOR(TURQ)\n \u00f3 TYPE(OUTPUT) INTENS(HIGH) COLOR(TURQ)\n \u00a2 TYPE(CHAR) COLOR(GREEN)\n \\ TYPE(CHAR) COLOR(WHITE)\n \u00a7 AREA(DYNAMIC)\n)BODY WINDOW(60,13)\n+Command ==>_DUMMY                                        $\n+                                                         $\n$                                                         $\n$   &OPTXT1                                               $\n$   &OPTXT2                                               $\n$   Then press%ENTER$to continue.                         $\n$                                                         $\n$   Library:_LIBNAME\n$   Volume :_VOLUME$+(only required if not cataloged)\n$                                                         $\n$   ........ or \u00a7OPTXT3,OPSHD3           \u00a7                $\n$                                                         $\n$                                                         $\n)INIT\n &DUMMY = &Z\n &ZWINTTL = 'Open &APPLID Commands'    /* heading for Pop-Up window */\n IF (&COPYCMDS = YES)\n     &ZWINTTL = 'Copy to &TABNAME Table'\n .CURSOR = LIBNAME\n\n IF (&S1 = 1)\n     &OPTXT1 ='This table was found in your ISPTLIB libraries, as'\n     &OPTXT2 ='shown below. Please check it''s the desired library.'\n IF (&S1 = 2)\n     &OPTXT1 ='The table was not found in your ISPTLIB libraries.'\n     &OPTXT2 ='Therefore, please specify the desired library below.'\n VGET ZKLUSE PROFILE\n &KLUSE = &ZKLUSE\n IF (&ZKLUSE = N)                      /* user has KEYLIST OFF */\n     &ZKLUSE = Y                       /* turn it ON           */\n     VPUT ZKLUSE PROFILE\n\n IF (VER(&EN,LEN,EQ,2)) &ES = '\\\\'\n IF (VER(&EN,LEN,EQ,3)) &ES = '\\\\\\'\n IF (&EN \u00ac= &Z & &CA \u00ac= &Z)\n     &OPTXT3 = 'press &EN/&CA to CANCEL'\n     &OPSHD3 = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2&ES\u00a2\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n IF (&EN \u00ac= &Z & &CA = &Z)\n     &OPTXT3 = 'press &EN to CANCEL'\n     &OPSHD3 = '\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n IF (&EN = &Z & &CA \u00ac= &Z)\n     &OPTXT3 = 'press &CA to CANCEL'\n     &OPSHD3 = '\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n IF (&EN = &Z & &CA = &Z)\n     &OPTXT3 = 'enter END or CAN to CANCEL'\n     &OPSHD3 = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\\\\\\\u00a2\u00a2\u00a2\u00a2\\\\\\\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n\n IF (&COPYROWS = YES)\n     .HELP = ISPFCMHK                  /* HELP for Copying commands */\n ELSE\n     .HELP = ISPFCMH0                  /* HELP index panel          */\n)REINIT\n VGET ZKLUSE PROFILE\n &KLUSE = &ZKLUSE\n IF (&ZKLUSE = N)                      /* user has KEYLIST OFF */\n     &ZKLUSE = Y                       /* turn it ON           */\n     VPUT ZKLUSE PROFILE\n)PROC\n IF (&DUMMY = CAN,CANCEL,EXIT)\n     .RESP = END\n IF (.RESP = ENTER)\n     VER (&LIBNAME,NB,DSNAME)          /* valid library name required */\n     VER (&VOLUME,INCLUDE,ALPHAB,NUM)\n IF (.RESP = END)\n     IF (&KLUSE = N)                   /* user had KEYLIST OFF */\n         &ZKLUSE = N                   /* turn it OFF again    */\n         VPUT ZKLUSE PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMHA": {"ttr": 3081, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01)\\x00 \\x00\\x99\\x16\\x7f\\x01\\x07\\x02_\\x17W\\x00g\\x00,\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.41", "flags": 0, "createdate": "1999-06-16T00:00:00", "modifydate": "2007-01-25T17:57:20", "lines": 103, "newlines": 44, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHLP2,ISR)\n/*-------------------------- ISPFCMHA --------------------------------*/\n/*  HELP Panel for display of ISPF commands (ISPFCMDS)                */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*  - from panel ISPFCMD0.  Panel ISPFCMH1 follows.                   */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_)\n\u00ac TYPE(OUTPUT) INTENS(HIGH) COLOR(RED) PADC(_)\n} TYPE(OUTPUT) INTENS(HIGH) COLOR(RED) PADC(-)\n\u00b0 TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW)\n\u00f3 TYPE(OUTPUT) INTENS(HIGH) COLOR(TURQ) CAPS(OFF) SKIP(ON)\n\u00df TYPE(OUTPUT) INTENS(HIGH) COLOR(RED)\n# TYPE(TEXT)   INTENS(HIGH) COLOR(YELLOW)\n$ TYPE(TEXT)   INTENS(HIGH) COLOR(TURQ)\n@ TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)\n~ TYPE(TEXT)   INTENS(LOW)  COLOR(RED)\n\u00a7 AREA(SCRL) EXTEND(ON)\n)BODY EXPAND(\u00d6\u00d6)\n+HELP-\u00d6-\u00d6-#ISPF Commands+-\u00d6-\u00d6-HELP\n+Command ===>_ZCMD\n%                                  ALIAS\n+\n\u00a7INFO                                                                          \u00a7\n)AREA INFO\n@When the#ALIAS@command is used the list is refreshed to display only those\n@commands which use the ALIAS action or are used by the ALIAS action in another\n@command.\n+\n@Initially the list will display the command Actions and be sorted into logical\n@groups of commands, to help you see the ALIAS relationships.  In each group\n@the ALIAS command(s) is first, followed by the command which is invoked.\n+\n@The$V@line command will show the effective action of any ALIAS command.\n+\n@The#RES@command will reset this list to ALL commands (in your selected tables).\n+\n#Examples\n#--------\n@Command  Table  Description / Action\n~-------  ----- ----------------------------------- @Sorted by~STANDARD ORDER\n+ #CAT    $USER+invokes PUSSY  eg. 'CAT' -> CMD(PUSS) or 'CAT x' -> CMD(PUSS x)\n+         ~ALIAS PUSSY\n+ #PUSSY  $USER+invoked by 'PUSSY' or 'CAT'\n+         ~CMD(PUSS &&ZPARM)\n+ #BARK   $USER+invokes DOGGY -> PGM(SAY) PARM(WOOF WOOF)\n+         ~ALIAS DOG WOOF WOOF\n+ #DOGGY  $USER+invoked by BARK, or directly by DOG, DOGG or DOGGY\n~  ---     PGM(SAY) PARM(&&ZPARM)\n+ #ZERO   $USER+invoked by 'ZERO'\n+         ~PGM(NIL)\n+ #ZIP    $USER+does nothing because there's no ZERO command after this one\n+         ~ALIAS ZERO\n+ #ASS    $USER+invokes BUM, which invokes BOTTOM, which invokes 'DOWN MAX'\n+         ~ALIAS BUM JUNK\n%*#BOTTOM $USER+overrides BOTTOM in ISPCMDS. Invoked by BOT, BOTT, BOTTO, BOTTOM\n~  ---     PANEL(LOWEST)\n+ #BUM    $USER+invokes BOTTOM in ISPCMDS. (any parm is ignored by BOTTOM)\n+         ~ALIAS BOTTOM\n%-#BOTTOM $ISP +can only be invoked by 'ASS' or 'BUM'\n+         ~ALIAS DOWN MAX\n+ #DOWN   $ISP +\n+         ~SETVERB\n+\n#Command Order and Truncation\n#----------------------------\n@The order of the commands is important.  An ALIAS action will search through\n the FOLLOWING commands for the first matching command.  Therefore the example\n ZIP command finds no match, and command BOTTOM in table ISPCMDS is overridden\n but it is still used by BUM.\n\n Truncation is always checked when ISPF searches for a matching command.  For\n example: command BARK searches for a command 'DOG' and finds that the 'DOGGY'\n command matches because of its truncation.\n+\n#Passing Parameters\n#------------------\n@Commands with an ALIAS action can pass parameters.  If the defined Action has\n no parameters - you can specify some with the command (like CAT above).\n But if the Action definition includes any parameters they will be passed, and\n any parameters specified by the user will be ignored; see BARK above - if the\n user enters 'BARK xxxx' it still invokes 'PGM(SAY) PARM(WOOF WOOF)'.\n\n That also applies when there is a chain of ALIAS actions.  If the user enters\n 'BUM xx', the 'xx' would be passed to BOTTOM, but it would then pass 'MAX' to\n DOWN.  If the user enters 'ASS xxx' it would pass 'JUNK' to BUM, and BUM would\n pass 'JUNK' to BOTTOM, which would then pass 'MAX' to DOWN.\n\n+\n+                   Press ENTER for more HELP information\n+\n)INIT\n &ZCONT = ISPFCMH0\n VGET ZKLUSE PROFILE\n &KLUSE = &ZKLUSE\n IF (&ZKLUSE = N)                      /* user has KEYLIST OFF */\n     &ZKLUSE = Y                       /* turn it ON           */\n     VPUT ZKLUSE PROFILE\n)PROC\n IF (.RESP = END)\n     IF (&KLUSE = N)                   /* user had KEYLIST OFF */\n         &ZKLUSE = N                   /* turn it OFF again    */\n         VPUT ZKLUSE PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMHC": {"ttr": 3084, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x03\\x00\\x992?\\x01\\x07\\x02_\\x17\\x14\\x016\\x00*\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "1999-11-19T00:00:00", "modifydate": "2007-01-25T17:14:03", "lines": 310, "newlines": 42, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHLP2,ISR)\n/*-------------------------- ISPFCMHC --------------------------------*/\n/*  HELP Panel for display of ISPF commands (ISPFCMDS)                */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*  - from panel ISPFCMH0 or ISPFCMHD.                                */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_)\n# TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)\n\u00df TYPE(TEXT) INTENS(HIGH) COLOR(TURQ)\n$ TYPE(TEXT) INTENS(HIGH) COLOR(WHITE)\n| TYPE(TEXT) INTENS(LOW)  COLOR(GREEN)\n@ AREA(SCRL) EXTEND(ON)\n)BODY EXPAND(\u00d6\u00d6)\n+HELP-\u00d6-\u00d6-#ISPF Commands+-\u00d6-\u00d6-HELP\n+Command ===>_ZCMD\n|                          %COMMAND TABLE CONFIGURATION\n@INFO                                                                          @\n)AREA INFO\n  |\n  | Exactly what commands are active, depends on your ISPF configuration and\n    which table libraries are allocated.  Here are details about ISPF command\n    tables, how they are used, and the configuration of ISPF for using them.\n\n| |\n# ISPF Command Tables |\n# ------------------- |\n    The ISPF command tables are normal, unsorted, non-keyed ISPF tables with\n    one command definition in each row.  ISPF opens them in NOWRITE SHARE\n    mode.\n\n    The System table (called: \"ISPCMDS\") is always active, and it contains\n    the basic, standard ISPF commands.  In addition, each ISPF application\n    may have its own command table (called: \"xxxxCMDS\", where xxxx is the\n    ISPF Application-Id ), concatenated ahead of the ISPCMDS table.\n\n    You are currently using Version|&IR of ISPF.  Since ISPF Version 4.2\n    you can optionally use two extra types of command tables:\n     |1)\u00dfUser table|- for individual users to maintain their own commands\n     |2)\u00dfSite table|- for site specific commands to be available to many\n                      (or all) users.\n    These tables are called \"xxxxCMDS\", where xxxx is the prefix specified\n    in the ISPF configuration, (it can be from 1 to 4 bytes in length).\n\n    ISPF Version 5.5 (with z/OS 1.5) added the option of having up to three\n    User command tables and also up to three Site tables.\n    For example, it might be useful to define a hierachy of Site tables with\n    one of them in a library maintained by System Programmers to be used by\n    all users, and others in \"group libraries\" maintained by groups of users\n    to be shared just amongst themselves.\n\n    The User & Site tables are not automatically available.  They can only\n    be used if their names are defined in an ISPF configuration module\n    (ISRCONFG or ISPCFIGU), as described below.\n\n    Definitions in your current ISPF configuration module:\u00df&CONFMOD  |\n    | User Table prefix . . . :\u00df&USERPREF+&HCTEXTU1\n    |            prefix 2 . . :\u00df&USERPRE2+&HCTEXTU2\n    |            prefix 3 . . :\u00df&USERPRE3+&HCTEXTU3\n    | Site Table prefix . . . :\u00df&SITEPREF+&HCTEXTS1\n    |            prefix 2 . . :\u00df&SITEPRE2+&HCTEXTS2\n    |            prefix 3 . . :\u00df&SITEPRE3+&HCTEXTS3\n    | Site Table Search Order :\u00df&ZSCTSRCH+&HCTEXTO\n\n |  ISPF Version 5.7 (with z/OS 1.7) added the option of specifying these\n    prefix names as a mask to obtain the name from the current system name\n    in one of the following formats (up to 4 characters used):\n    | a)\u00df*    |system name from the start\n    | b)\u00df*m   |system name starting from character position m\n    | c)\u00df*m:n |system name from character position m to position n\n\n\n# Allocating command tables |\n# ------------------------- |\n    The\u00dfUser, Site|and\u00dfSystem|tables are stored as members of table\n    libraries which must be allocated in ddname ISPTLIB.  The tables are\n    opened when ISPF is started.  ISPF will not start without the System\n    table (ISPCMDS).  But if the User or Site table names are not defined\n    in the ISPF configuration module, or if they are not found, ISPF will\n    work without them; they cannot be added dynamically.\n\n    Any\u00dfApplication|command table must be stored either in your ISPTLIB\n    concatenation, or else in a library dynamically allocated (via LIBDEF)\n    to ISPTLIB.  If such a table exists, it is opened when the ISPF\n    application is started and closed again when it ends.  For example, SDSF\n    has its own Application command table called ISFCMDS, which is open\n    only while you are using SDSF, (it runs in Application-Id: ISF).\n\n    The#\"ISPF Commands\"|tool shows you the tables at the top right of its\n    displays.  They are shown in their search order.\n      The\u00dfACTIVE|command tables are shown in yellow.\n      The\u00dfINACTIVE|table names (shown in blue) are either:\n         +a)|open tables with duplicate table names\n       or+b)|configured table names but no table is open\n\n    Note that an active command table may have ZERO rows.  For example, the\n    system programmers could have created an empty User table in a protected\n    library in your ISPTLIB concatenation.  Then if you create a new User\n    command table (with \"ISPF Commands\" tool) all commands in it will be\n    IMMEDIATELY active, without restarting ISPF.\n\n\n# Command Table Search Order |\n# -------------------------- |\n    When you enter a command name, ISPF searches the command tables in the\n    row order until it finds the FIRST matching command definition.\n\n  | The Site table is either before or after the System table depending on\n    the configuration parameter.  In the configuration example in the next\n  | topic you will see the parameter SCTSRCH is set to 'A' so that the\n    SITECMDS table is searched AFTER the ISPCMDS table.  This ensures that\n    the standard ISPF commands cannot be accidentally overridden by the Site\n    commands.  Thus the order ISPF uses to search for commands would be as\n    follows:\n      1) Application command table   (if the application has one)\n      2) User command table          (if the user has one)\n      3) System command table\n      4) Site command table          (if a site table has been allocated)\n\n  | If multiple User or Site tables are active their order will be the same\n    as their configuration order (eg. USR1 before USR2 before USR3).\n\n\n  | WARNING: make sure that the names you use for the User or Site tables are\n    not the same as the Appl-Id of any ISPF application that you will use.\n    There are two potential problems:\n\n      a) If you start an ISPF application with the same name as your User\n         or Site table, it uses that command table FIRST in the search\n         order.  But since the table was already open, it is not read\n         again from disk.  Therefore the application cannot have its own\n         command table active.\n\n      b) If you start an ISPF application with the same name as your Site\n         table, it effectively puts your Site table FIRST in your command\n         search order.  If you had any commands in your User table to\n         OVERRIDE commands in the Site table - they will now be AFTER the\n         Site table commands, so now the Site table commands can override\n         your User table commands (the reverse of normal).\n\n    If the ISPF Application-Id is\u00dfISP|, ISPF does NOT use the ISPCMDS table\n    first in the search order (as an Application command table).  ISPCMDS is\n    always only the System table - last or second last in the search order.\n\n\n# Configuring ISPF versions 4.2 to 4.5 |\n# ------------------------------------ |\n    The names of the User & Site tables are defined in the ISRCONFG module,\n    which is usually in SYS1.SISPLPA, but could also be in a STEPLIB or\n    ISPLLIB dataset for testing.  Member ISRCNFIG of ISP.SISPSAMP is used to\n    customise it, as is described in ISPF Planning & Customization manual\n    topic on 'Tailoring PDF Defaults'.  By default, the names for these\n    tables are blank, which means that they are not used.\n\n    Here is a sample of a part of that member customised to add Site & User\n    tables called SITECMDS and MYCMDS respectively:\n  \u00df -----------------------------------------------------------------------\n  \u00df USERCMDS DC  CL4'MY  '          APPLID FOR USER COMMAND TABLE      \u00a7SM2\n  \u00df SCTSRCH  DC  CL1'A'             SITE COMMAND TABLE SEARCH ORDER    \u00a7SM2\n  \u00df *                               SPECIFY B FOR BEFORE ISP           \u00a7SM2\n  \u00df *                               SPECIFY A FOR AFTER ISP            \u00a7SM2\n  \u00df SITECMDS DC  CL4'SITE'          APPLID FOR SITE COMMAND TABLE      \u00a7SM2\n  \u00df -----------------------------------------------------------------------\n  | Now this site can maintain its own special commands in the SITECMDS\n    table.  Any user wanting their own commands can now create a MYCMDS\n    table in one of their own datasets.  The ISPCMDS table may be changed\n    in future releases of ISPF but it can always remain completely\n    standard, as supplied by IBM.\n\n    Note that the ISRCONFG module is normally customised via an SMP/E\n    USERMOD and that must be re-customised for each new ISPF release,\n    using the new ISRCNFIG member from the new ISPF sample library.\n\n\n# Configuring ISPF versions 4.8 onwards |\n# ------------------------------------- |\n    ISPF version 4.8 (part of OS/390 version 2.8) introduced an ISPF\n    Configuration Utility dialog.  The configuration settings are saved in\n    keyword format in a configuration table file, and the Utility allows\n    updating and verifying the table.  That dialog is meant to be used only\n    by systems programmers, but it works as follows:\n\n   \u00dfMIGRATING TO ISPF 4.8|\n    ---------------------\n    Invoke it from anywhere within an ISPF session by command\u00dfTSO ISPCCONF|\n    (or\u00dfTSO ISPCCONF DEBUG|to see the generated assembler source code).\n\n    From the+\"ISPF Configuration Utility\"|primary panel, select option:\n\n     \u00df5|+\"Convert Assembler Configuration Table to Keyword File\"|to\n          generate a new configuration table file from the assembler source\n          of an old ISRCONFG configuration module.  Then that can be used\n          as the basis for a new configuration module for version 4.8\n\n     \u00df2|+\"Edit Keyword File Configuration Table\"|can then be used to check\n          the output from option 5 and change any parameters as desired.\n\n     \u00df4|+\"Build Configuration Table Load Module\"|can read the output after\n          option 2 to generate a new ISPCFIGU (and possibly ISPCFIGV) load\n          module(s).  The customisation module(s) are then used by all the\n          users of ISPF.\n\n    This process preserves the site's old ISPF customisation values, then\n    lets the system programmer tailor the new configuration.  This should\n    also make it easier for future upgrades of ISPF to a new release.\n\n   \u00dfCREATING A PERSONAL CONFIGURATION|\n    ---------------------------------\n    If you want to use your own special names for ISPF command tables you\n    will need to create your own special configuration module.  IBM supply\n    an ISPF Configuration Utility which you can use as follows:\n    Copy the configuration table file, that was used to create the ISPCFIGU\n    (and possibly ISPCFIGV) module(s) by the system programmer, to your own\n    library.  If you don't have a copy of the existing configuration table\n    the ISPCCONF dialog will assume all the IBM default values, and you may\n    lose some other customisation.  Then start the dialog:\u00dfTSO ISPCCONF|\n\n      First you will see the +\"ISPF Configuration Utility\"|primary panel.\n      Select option\u00df1|for the+\"Create/Modify Settings\"|panel.\n      Select option\u00df5|for the+\"Modify ISPDFLTS and Other DM Settings\"|panel.\n      Then update the fields:\u00df\"Site Command Table Search Order\"\n                             \u00df\"APPLID for User Command Table\"\n                             \u00df\"APPLID for Site Command Table\"|\n\n      Return to the+\"ISPF Configuration Utility\"|primary panel, and select\n      option\u00df4|for+\"Build Configuration Table Load Module\"|to generate new\n      configuration table load module(s) in an appropriate load library,\n      which could be allocated to ddname ISPLLIB.\n\n   \u00dfExtended ISPF Configuration Utility|\n    -----------------------------------\n    There is an extended version of the Configuration Utility packaged with\n    the#\"ISPF Commands\"|tool. You can invoke via the\u00dfCONFIG|command.\n    It is based on the standard utility but it has an extra option:\n     \u00df0+\"Create Keyword File from ACTIVE Configuration\"|\n    That can be used to create a keyword file matching your current active\n    configuration module (ISPCFIGU).  Then select option\u00df1;5|to specify User\n    User and Site table names, and select option\u00df4|to create a new module.\n    That ensures that you don't lose any existing ISPF customisation when\n    adding your own User or Site table names.\n\n    The Extended ISPF Configuration Utility HELP panels provide more details\n    of the enhancements made to the standard Configuration Utility.\n\n    See|&OSRL ISPF Planning and Customizing manual for more details\n    about the Configuration Table and Configuration Utility.\n\n\n)INIT\n &ZCONT = ISPFCMH0                                 /* next help panel */\n .HHELP = ISP00006\n &JUNK1 = TRUNC(&ZENVIR,' ')\n &JUNK2 = .TRAIL\n &IR = TRUNC(&JUNK2,M)                        /* ISPF version.release */\n\n &OS = TRUNC(&ZOS390RL,7)                     /* 'z/OS' or 'OS/390'   */\n &RL = .TRAIL\n &OS = TRUNC(&OS,' ')                         /* no trailing blanks   */\n &RL = TRUNC(&RL,5)                           /* 'vv.mm'              */\n &OSRL = '&OS &RL'\n\n IF (&USERPRE1 \u00ac= &Z)\n     IF (&USERPREF \u00ac= &Z)\n         &HCTEXTU1 = 'table name: &USERPREF.CMDS'\n     ELSE\n         &HCTEXTU1 = 'invalid prefix, is ignored by ISPF'\n IF (&USERPRE2 \u00ac= &Z)\n     IF (&USR2PREF \u00ac= &Z)\n         &HCTEXTU2 = 'table name: &USR2PREF.CMDS'\n     ELSE\n         &HCTEXTU2 = 'invalid prefix, is ignored by ISPF'\n IF (&USERPRE3 \u00ac= &Z)\n     IF (&USR3PREF \u00ac= &Z)\n         &HCTEXTU3 = 'table name: &USR3PREF.CMDS'\n     ELSE\n         &HCTEXTU3 = 'invalid prefix, is ignored by ISPF'\n IF (&USERPRE1 = &Z AND &USERPRE2 = &Z AND &USERPRE3 = &Z)\n     &HCTEXTU1 = 'no USER command table can be used'\n IF (&SITEPRE1 \u00ac= &Z)\n     IF (&SITEPREF \u00ac= &Z)\n         &HCTEXTS1 = 'table name: &SITEPREF.CMDS'\n     ELSE\n         &HCTEXTS1 = 'invalid prefix, is ignored by ISPF'\n IF (&SITEPRE2 \u00ac= &Z)\n     IF (&SITEPRE2 \u00ac= &Z)\n         &HCTEXTS2 = 'table name: &SIT2PREF.CMDS'\n     ELSE\n         &HCTEXTS2 = 'invalid prefix, is ignored by ISPF'\n IF (&SITEPRE3 \u00ac= &Z)\n     IF (&SITEPRE3 \u00ac= &Z)\n         &HCTEXTS3 = 'table name: &SIT3PREF.CMDS'\n     ELSE\n         &HCTEXTS3 = 'invalid prefix, is ignored by ISPF'\n IF (&SITEPRE1 = &Z AND &SITEPRE2 = &Z AND &SITEPRE3 = &Z)\n     &HCTEXTS1 = 'no SITE command table can be used'\n IF (&ZSCTSRCH = B)\n     &HCTEXTO = 'Site table BEFORE the System table'\n IF (&ZSCTSRCH = A)\n     &HCTEXTO = 'Site table AFTER the System table'\n\n VGET ZKLUSE PROFILE\n &KLUSE = &ZKLUSE\n IF (&ZKLUSE = N)                      /* user has KEYLIST OFF */\n     &ZKLUSE = Y                       /* turn it ON           */\n     VPUT ZKLUSE PROFILE\n)PROC\n IF (.RESP = END)\n     IF (&KLUSE = N)                   /* user had KEYLIST OFF */\n         &ZKLUSE = N                   /* turn it OFF again    */\n         VPUT ZKLUSE PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMHE": {"ttr": 3332, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x006\\x01\\x00\\x13/\\x01\\x07\\x02_\\x17W\\x001\\x00\"\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "2000-05-11T00:00:00", "modifydate": "2007-01-25T17:57:36", "lines": 49, "newlines": 34, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHLP2,ISR)\n/*-------------------------- ISPFCMHE --------------------------------*/\n/*  HELP Panel for \"ISPF Commands\" tool                               */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_)\n\u00df TYPE(OUTPUT) INTENS(HIGH) COLOR(WHITE) JUST(RIGHT)\n\u00a7 TYPE(OUTPUT) INTENS(HIGH) COLOR(TURQ) CAPS(OFF)\n# TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)\n$ TYPE(TEXT) INTENS(HIGH) COLOR(TURQ)\n@ TYPE(TEXT) INTENS(HIGH) COLOR(RED)\n| TYPE(TEXT) INTENS(LOW)  COLOR(GREEN)\n)BODY EXPAND(\u00d6\u00d6)\n+HELP-\u00d6-\u00d6-$ISPF Commands+-\u00d6-\u00d6-HELP\n+Command ==>_ZCMD\n%                             EMPTY TABLE: &MTTAB\n|\n    If an empty table is active there will be a command list line like:\n\n +     Command   Table  Description\n @     --------  ----- -----------------------------------\n        #--------\u00a7MT  |<<< no commands in this table >>>\n\n    This cannot be invoked, but it is possible to update it to a normal valid\n    ISPF command via the%E|or%U|line command.  If the command list is showing\n    two lines for each command (ie. the Action is shown) - it can be updated\n    by overtyping the fields (Command, Description and Action) and pressing\n |  the$ENTER|key.\n\n |  Your new (updated) command will be active immediately.  More commands\n    could also be added to the table (via the%I|line command or copied from\n    other tables).  The updated command table can then be saved to disk via\n    the primary command:\u00a7MTSAVE\n|\n|\n)INIT\n /* VGET (CMDHLPNM, CMDHLPDE, CMDHLPTB) SHARED\n &ZCONT = ISPFCMH0\n IF (&CMDHLPNM = '--------' & &CMDHLPDE = '<<< no commands in this table >>>')\n     &MT = &CMDHLPTB\n     &MTTAB = '&CMDHLPTB.CMDS'\n     &MTSAVE = 'SAVEAppl'\n     IF (&CMDHLPTB = &ZSCTPREF) &MTSAVE = 'SAVESite'\n     IF (&CMDHLPTB = &ZUCTPREF) &MTSAVE = 'SAVEuser'\n IF (&MT = &Z)\n     &MT = USER\n IF (&MTSAVE = &Z)\n     &MTSAVE = 'SAVEuser'\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMHG": {"ttr": 3334, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00D\\x00\\x992/\\x01\\x07\\x02_\\x17W\\x00+\\x00(\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "1999-11-18T00:00:00", "modifydate": "2007-01-25T17:57:44", "lines": 43, "newlines": 40, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHELP,ISR)\n/*-------------------------- ISPFCMHG --------------------------------*/\n/*  HELP Panel for display of ISPF commands (ISPFCMDS)                */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*  - from panel ISPFCMH0.                                            */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_)\n# TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)\n* TYPE(TEXT) INTENS(HIGH) COLOR(TURQ)\n$ TYPE(TEXT) INTENS(HIGH) COLOR(WHITE)\n| TYPE(TEXT) INTENS(LOW)  COLOR(GREEN)\n)BODY EXPAND(\u00d6\u00d6)\n+HELP-\u00d6-\u00d6-#ISPF Commands+-\u00d6-\u00d6-HELP\n+Command ==>_ZCMD\n|                             %GENERAL INFORMATION\n+\n|The#\"ISPF Commands\"|tool displays commands from the active ISPF command tables.\n|The displayed list shows each command's name (verb), table and description, and\n|it can optionally show the command's action and truncation too.  More details\n|are given in the DISPLAY FIELDS help.\n|\n|You can tailor the list by restricting which tables to display, by changing the\n|sort order, by selecting the commands by name (matching a mask), or selecting\n|the commands by description or action (matching a character string).  You can\n|also select ALIAS commands, commands overriding other commands or commands that\n|can be truncated.  See HELP for primary commands:*SOrt,S,F,Alias,Over,Trunc.\n|\n|You can dynamically update, add, delete or move commands in any active table.\n|Commands can be updated either by overtyping fields on the displayed list, or\n|via line commands:*E,U,I,R,D,C,M|which are explained in the LINE COMMANDS help.\n|\n|New command tables can be created via primary commands*NEWAppl,NEWUser,NEWSite|\n|and any updated command tables can be saved permanently to disk via primary\n|commands*3,SAVEuser,SAVEAppl,SAVESite|as detailed in the PRIMARY COMMANDS help.\n|\n)INIT\n)PROC\n)END\n-----------------------------------------------------------------------\n@ AREA(SCRL) EXTEND(ON)\n@INFO                                                                          @\n)AREA INFO\n@\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMHH": {"ttr": 3336, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00R\\x00\\x992?\\x01\\x07\\x02_\\x17W\\x02\\x04\\x00*\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "1999-11-19T00:00:00", "modifydate": "2007-01-25T17:57:52", "lines": 516, "newlines": 42, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHLP2,ISR)\n/*-------------------------- ISPFCMHH --------------------------------*/\n/*  HELP Panel for display of ISPF commands (ISPFCMDS)                */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.1 */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT($@_)\n# TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)\n\u00df TYPE(TEXT) INTENS(HIGH) COLOR(TURQ)\n{ TYPE(TEXT) INTENS(HIGH) COLOR(RED)\n$ TYPE(TEXT) INTENS(HIGH) COLOR(WHITE)\n@ TYPE(TEXT) INTENS(LOW)  COLOR(BLUE)\n~ TYPE(TEXT) INTENS(LOW)  COLOR(GREEN)\n\u00a7 AREA(SCRL) EXTEND(ON)\n)BODY EXPAND(\u00d6\u00d6)\n@HELP-\u00d6-\u00d6-#ISPF Commands@-\u00d6-\u00d6-HELP\n@Command ===>_ZCMD\n~                               $HINTS AND TIPS\n\u00a7INFO                                                                          \u00a7\n)AREA INFO\n~\n   #\"ISPF Commands\"~tool makes it easy for you to create and maintain your own\n  ~ table of ISPF commands.  It also can be used to display and/or modify any\n  ~ other ISPF command tables.  This HELP has many topics about ISPF commands\n  ~ and how best to use this tool.\n~\n~\n# HELP for \"ISPF Commands\" ~\n# ----------------------- ~\n  ~ There are many HELP panels with this tool.  Any time you are not certain\n  ~ about the use of any \"ISPF Commands\" panel - try the\u00dfHELP~command (it is\n    usually the\u00dfF1~key) to see appropriate help information.\n~\n~\n# ISPF Command Tables ~\n# ------------------- ~\n  ~ Most of the primary commands that you use in ISPF are defined in command\n    tables, with each row specifying a command and an action.  There can be\n    up to four active command tables concatenated when you are using an ISPF\n    application.  The order is Application table first, the User table next,\n    then the Site and System tables, as is shown at the top right of all the\n    \"ISPF Commands\" displays.\n\n    The System table is called\u00dfISPCMDS~and it is always required by ISPF,\n    but the other tables are not always present.  User and Site tables can\n    only be used when their names are specified in the ISPF configuration\n    module, which is in the LINKLIST, or in a STEPLIB or ISPLLIB library.\n\n    See COMMAND TABLE CONFIGURATION help for more details.\n  ~\n  ~\n# Create your own User command table ~\n# ---------------------------------- ~\n    The best place for your personal ISPF commands is in your own User table\n    which you can create via the\u00dfNEWUSER~command in#\"ISPF Commands\"~tool.\n    See CREATING A NEW USER COMMAND TABLE help for more details.\n\n    Your User table will always be active, concatenated ahead of System and\n    Site tables.\n\n\n# Create your own commands~\n# ------------------------~\n  ~ Use this tool to add commands for many of the common actions you use\n    in ISPF.  This should be in your User table.\n\n    When you insert a new command you will see a panel for you to supply the\n    command name, truncation, action and description like the following:\n\n   @+---------------------------------------------------------------------+\n   @|               Insert command after CMDS in table USERCMDS           |\n   @| Command ==>                                                         |\n   @|                                                                     |\n   @| ~ Make any changes then use the cursor to select\u00dfUpdate~or\u00dfCancel  @|\n   @| ~ Alternatively press\u00dfF3~to UPDATE, or press\u00dfF12~to CANCEL.        @|\n   @|                                                                     |\n   @| ~ Command . .\u00dfmy                                                   @|\n   @| ~ Trunc . . .\u00df0                                                    @|\n   @| ~ Action  . .\u00dfselect cmd(%newcmd &&zparm)                          @|\n   @|                                                                     |\n   @|                                                                     |\n   @|                                                                     |\n   @| ~ Description\u00dfinvoke my newcmd exec, with an optional parameter    @|\n   @|              \u00dfHELP(myhlpnl)                                        @|\n   @|                                                                     |\n   @|                       \u00dfUpdate                   Cancel             @|\n   @|                                                                     |\n   @+---------------------------------------------------------------------+\n\n ~  - Command names must start with A - Z.  Make them short, then they are\n        easier to type, and thus more convenient for you to use.\n    - Check that your command names are not the same as any selection options\n        in any other ISPF application panels that you regularly use.\n    - Watch out that your new commands do not accidentally override any\n        existing commands (then a$'*'~or$'+'~will be shown before the name\n        when it is displayed in a list).\n    - Include a Description.  It makes it easier to recognise the function\n        of your commands, and you can use the\u00df'F xxx'~command to find them.\n    - If you have an ISPF HELP panel for a command put\u00df'HELP(panel-name)'~\n        in the Description, then line command#H~will display the HELP panel.\n        A good convention is to put the description text on the first line\n        and the 'HELP(pppp)' on the second line, as shown above.\n    - Provide a valid Action.  ISPF ignores commands with null, blank or\n        uninitialised-variables as Actions.\n    - When you create new commands - remember to save the command table to\n        disk via the\u00df'SAVE'~command.  Otherwise they are lost when you leave\n        ISPF.\n\n\n# Create a command to invoke ISPFCMDS  ~\n# -----------------------------------  ~\n  ~ \"ISPF Commands\" is designed to be used from any ISPF application, so\n    it is most convenient if you have a command to invoke it, stored in\n    either the Site or User command table.  Here is the suggested syntax:\n      @Command . . :\u00dfCMDS\n      @Trunc . . . :\u00df0\n      @Action  . . :\u00dfSELECT CMD(%ISPFCMDS &&ZPARM) SCRNAME(CMDS)\n      @Description :\u00dfISPF Commands tool\n\n  ~ If ISPCMDS is compiled the invocation should be slightly different:\n      @Action  . . :\u00dfSELECT CMD(ISPFCMDS &&ZPARM) SCRNAME(CMDS) LANG(CREX)\n\n  ~ Note that the action does not need 'SUSPEND' because ISPFCMDS removes\n    any Pop-up window by itself when it starts.\n\n\n# Starting ISPFCMDS  ~\n# -----------------  ~\n  ~ You can start \"ISPF Commands\" tool from the command line of any ISPF\n    application.\n    Just enter: \u00dfCMDS           @when you have the command recommended above\n          ~ or: \u00dfTSO ISPFCMDS   @if you have no special command\n\n  ~ You can use a parameter to list only the command(s) which have names\n    beginning with a particular string.\n    For example:\u00dfCMDS IS        @to list of all commands that start with 'IS'\n          ~ or: \u00dfTSO ISPFCMDS IS@\n\n  ~ You can also start \"ISPF Commands\" to run in a particular ISPF Appl-Id.\n    It checks all command overrides, but it lists only your selected table.\n    For example:\u00dfCMDS APPL(LL)  @to open the LLCMDS table (Appl-Id = 'LL')\n          ~ or: \u00dfTSO ISPFCMDS APPL(LL)@\n\n  ~ - If that application is already running in your TSO/ISPF session \"ISPF\n      Commands\" will display the command table that is already open (if one\n      exists).  This enables you to run an ISPF application in one logical\n      screen, and simultaneously run \"ISPF Commands\" in another logical screen\n      to display/update the commands in that application.\n      Thus you could update the commands from that table, but if you used the\n     \u00dfSAVEAPPL~command to save them to disk you would be prompted to specify\n      a library name.\n\n  ~ - This could also be used by an ISPF application developer to open their\n      Application command table when that application is not running.  You\n      would be prompted to confirm or specify the command table library, and\n      if the table doesn't exist - it can create a table with one dummy entry.\n\n  ~ You can even start \"ISPF Commands\" to open a particular ISPF Appl-Id, but\n    only list commands (from the selected table) which begin with a particular\n    string, like the following:\n           \u00dfCMDS APPL(TOOL) D   @only commands from TOOLCMDS starting with 'D'\n      ~ or:\u00dfTSO ISPFCMDS APPL(TOOL) D@\n\n\n# Finding a particular command ~\n# ---------------------------- ~\n    Sometimes you may want to find a command whose name you have forgotten.\n  ~ The command definitions have descriptions and actions which can be\n    searched by the\u00df'F xxx'~command.  When you use this command the list is\n    redisplayed showing only the commands that have the character string\n    'xxx' in their Action or Description fields.\n    Use\u00df'F  '~to reset the FIND argument, to show all commands again.\n\n    SORT the list to make it easier to find a command.  Use\u00df'SORT C'~to sort\n    all active commands by alphabetically by COMMAND NAME, or use\u00df'SORT T'~\n    to sort the commands alphabetically within each table.\n\n    If you know the name of the command you want to find, use\u00df'L xxx'~; it\n    locates the command named 'xxx' and puts the cursor next to it, ready\n    for you to enter a line command.\n    If it cannot find the command, it scrolls the list to where the command\n    would be in alphabetical order.  This can be useful when it is already\n    sorted in COMMAND NAME order.  For example, if you use\u00df'L R'~it will\n    scroll the list to the top of all the command names which begin with 'R'.\n\n    If you want to list only the command names beginning with a particular\n    string you can use\u00df'S xxx'~. For example, 'S REF' would show only\n    commands that start with 'REF'.\n    Use\u00df'S  '~to reset the SELECT argument, to show all commands again.\n\n\n# Excluding particular commands ~\n# ----------------------------- ~\n    You can exclude commands from a list.  The simplest method is to enter\n    the line command\u00df'X'~beside each command to be excluded from the list.\n\n    To exclude all commands which have a particular string in their action\n  ~ or description use the\u00df'X xxx'~or\u00df'F \u00ac xxx'~primary command.\n    Use\u00df'F  '~to reset the FIND argument, to show all commands again.\n\n\n\n# HELP for Commands ~\n# ----------------- ~\n    HELP information is automatically available for many commands.\n    Enter\u00df'H'~beside any listed command and the appropriate HELP panel will\n    be displayed (if one is defined).\n\n    - any command can have a HELP panel defined in its Description field, as\n         shown in the \"Create your own User Commands\" section above.\n    - for any command in the ISPCMDS table - it will show the standard IBM\n         HELP panel for that command, (if one is available).\n    - all commands from \"ISPF TOOLS\" have HELP panels defined\n\n\n# Empty tables ~\n# ------------ ~\n    If an empty table is active there will be a command list line like the\n    following:\n     @ Command   Table  Description / Action\n      {--------  ----- -----------------------------------\n        #--------\u00dfMY  ~<<< no commands in this table >>>\n\n    This cannot be invoked, but it is possible to update it to a normal valid\n    ISPF command via the\u00dfE~or\u00dfU~line command.  The new command will be active\n    immediately, and the updated table can then be saved to disk via one of\n    the\u00df3~,\u00dfSAVE~,\u00dfSAVEA~or\u00dfSAVES~primary commands.\n\n\n# Overriding a Command~\n# --------------------~\n    When you enter a command name, ISPF searches the command tables in the\n    row order until it finds the FIRST matching command definition.  Thus\n    it is easy for a user to define their own command, ahead of a standard\n    command definition, to override the one from the Sytem or Site table.\n\n    Use line command\u00df'R'~in \"ISPF Commands\" tool to REPEAT the existing\n    command.  When you see the Update window - change the Action to whatever\n    you want (and update the Description to show that it is YOUR command).\n    This new command will be inserted one row BEFORE the old command, and it\n    will be active until the command table is closed.\n\n\n# Temporarily disabling a command ~\n# ------------------------------- ~\n    When you enter a command string, ISPF first looks for a matching ISPF\n    command table definition.  If it doesn't find one, the string is passed\n    to the application.  If the application is showing a selection panel it\n    will look for a matching option, otherwise the string is passed to the\n    active application program.\n\n    Hence it is possible that an ISPF command table definition could prevent\n    you from selecting a panel option, or passing a command string to an\n    application.  In such a case you can use the \"ISPF Commands\" tool to\n    temporarily disable that command.\n\n    Here are three different methods to disable a command:\n    - Change the command name.\n    - Insert\u00df&&Z~into the Action, before whatever else is there.\n    - Repeat the command (via the\u00df'R'~line command) and set the Action\n       to\u00dfPASSTHRU~(this new command will be ahead of the old one).\n\n    Remember to put it back to normal again when you are finished.\n\n\n# What to do if your desired command is overridden ~\n# ------------------------------------------------ ~\n    Sometimes you want to use a command which is overridden by another\n    command.  In such a case use the \"ISPF Commands\" tool.\n\n    Here are three different methods:\n    - Use line command\u00df'S'~to invoke it; this works with most commands.\n    - Change the name (or truncation) of the overriding command, then\n       exit from \"ISPF Commands\" to use your command.\n    - Copy or Move your desired command before the overriding command\n       (via the\u00df'C'~or\u00df'M'~line command), then exit from \"ISPF Commands\"\n       to use your command.\n\n    Remember to put it back to normal again when you are finished.\n\n\n# Execute commands via the 'S' line command ~\n# ----------------------------------------- ~\n  ~ - Use this to test new or updated commands before saving the command\n        table to disk.\n    - Overridden commands can be invoked this way.\n    - It cannot invoke commands with actions that are (a) null\n        (b) a symbolic variable, or (c) ALIAS with no matching action.\n    - All updates and other line commands are processed before invoking\n        the commands with\u00df'S'~.\n    - Multiple selections are invoked in the order they are shown in the\n        list; the command list is displayed between the invocations with\n        the message:\u00df*** Press ENTER for pending command ***~.\n\n\n# Saving a table to disk ~\n# ---------------------- ~\n    \"ISPF Commands\" tool can save Application, User or Site tables to disk\n    via the\u00dfSAVEAPPL SAVE~or\u00dfSAVESITE~commands.  If you have multiple active\n    User or Site tables you will be prompted to select which one you wish to\n    save.  But it will not save the System table, because that table should\n    not be (permanently) modified by users.\n\n    When a table is being saved to disk you see a confirmation panel, which\n    shows the target library for the SAVE, and advises if it will REPLACE an\n    existing member.  The default target library is the one the table came\n    from.  The table member is updated 'in place' where possible, so you\n    usually cannot restore the old table member with any special PDS tools.\n\n    You can save the table to a different library by changing the target\n    library name and/or volume-serial fields on the panel, and if you are\n    saving an Application table you can change the member name too.  As long\n    as you have UPDATE access to the library - the SAVE should be successful.\n\n    \"ISPF Commands\" will save an empty table the same as one with commands.\n    If you want to delete the disk copy - you must delete the library member\n    by other normal methods.\n\n\n# Checking ALIAS Actions~\n# ---------------------- ~\n    If you want to check the effective action of a command which has the\n   \u00dfALIAS~action - use the line command\u00df'V'~and it will display the complete\n    command definition plus a message box which shows the effective action.\n      eg.  for command BOTTOM\n          \u00df.------------------------------------------------------.\n          \u00df| ** The effective action of this command is to invoke |\n          \u00df|    Command: DOWN MAX                                 |\n          \u00df|    Table  : ISPCMDS                                  |\n          \u00df|    Action : SETVERB                                  |\n          \u00df'------------------------------------------------------'\n\n  ~ In addition,\u00df'V'~command searches for any commands which are ALIAS of\n    your selected command and shows them in a message box.\n      eg.  for command DOWN\n          \u00df.----------------------------------------------------.\n          \u00df| ** Commands: BOTTOM,FORWARD  are ALIAS of DOWN     |\n          \u00df'----------------------------------------------------'\n\n  ~ The update line commands\u00df'E'~and\u00df'U'~will also show these message boxes.\n\n  ~ HELP for ALIAS has detailed explanation of commands with ALIAS action.\n\n\n# Checking Overridden Commands~\n# ---------------------------- ~\n    Overridden commands are marked with$'-'~or$'.'~before their name in a\n    command list.  If you want to check which commands override (or partly\n    override) such a command - use the line command\u00df'V'~and it will display\n    the complete command definition plus a message box.\n      eg.  for command BOTTOM\n          \u00df.------------------------------------------------------------.\n          \u00df| ** This command cannot be invoked (directly) because it is |\n          \u00df| OVERRIDDEN by command BOTTOM in table EJESCMDS             |\n          \u00df'------------------------------------------------------------'\n  ~   eg.  for command CANCEL\n          \u00df.-------------------------------------------------------------------.\n          \u00df| ** This command can be invoked only by entering CAN or CANCEL ,   |\n          \u00df| since it is PARTLY OVERRIDDEN by command CANCER in table USERCMDS |\n          \u00df'-------------------------------------------------------------------'\n  ~ The update line commands\u00df'E'~and\u00df'U'~will also show the same message box.\n\n  ~ Sometimes it is helpful to use the primary command\u00df'S xxxxx'~to restrict\n  ~ your list of commands to see both the overriding and overridden commands\n      eg. from\u00df'S BO'\n         @Command   Table  Description / Action\n         {BO        ----- ------------------------\n         $*#BOTTOM  \u00dfEJES~BOTTOM COMMAND\n         {  --       PASSTHRU\n         $-#BOTTOM  \u00dfISP ~SCROLL TO BOTTOM\n         {           ALIAS DOWN MAX\n\n  ~   eg. from\u00df'S CANC'\n         @Command   Table  Description / Action\n         {CANC      ----- ------------------------\n         $+#CANCER  \u00dfUSER~display zodiac information for CANCER\n         {  ----     SELECT CMD(%ZODIAC CANCER)\n         $.#CANCEL  \u00dfISP ~CANCEL\n         {  ---      CANCEL\n\n  ~ HELP for OVERRIDE has detailed explanation of command overrides.\n\n\n# Copying Commands to another table\n# --------------------------------- ~\n    \"ISPF Commands\" tool can copy commands from one table to another in two\n    different ways:\n     #1~When both tables are active and displayed - use line command\u00dfC~or\u00dfM~\n        (Copy or Move) with line command\u00dfA~or\u00dfB~(After or Before).\n        This copies only one command at a time.\n\n     #2~When at least the source table(s) are active and displayed - use the\n        primary command\u00dfCOPY~and line command\u00dfS~to select the commands to be\n        copied.  Press ENTER and a window will be displayed, asking you to\n        specify the target table name.  If necessary you can specify the\n        target library name too.  If the target table does not already exist\n        in the target library - it can create a new table for the copying.\n        Use HELP from the COPY window to see more details of this function.\n        This can copy many commands at a time.\n\n    If the target table was ALREADY ACTIVE - the COPY changes are immediately\n    active, but they are only temporary (ie. not copied to disk).\n\n    If the target table was NOT ACTIVE - the COPY changes are permanent (ie.\n    written in the table member on disk).\n\n\n# Creating new Command Tables\n# --------------------------- ~\n    \"ISPF Commands\" tool can create new command tables for User or Site\n    tables (via the\u00dfNEWUSER~or\u00dfNEWSITE~commands).  The new table names are\n    based on the definitions in your ISPF configuration module.  Note that\n    Site tables are normally created only by System Programmers, to hold\n    commands for sharing by all users.  The process for creating a Site table\n    by \"ISPF Commands\" is almost the same as creating a User table.  That is\n    explained in HELP for CREATING A NEW USER COMMAND TABLE.\n\n    System commands (ISPCMDS) are supplied as part of ISPF, and Application\n    command tables should be supplied with each application (if they are\n    needed).  Therefore you should not normally need to create such tables.\n\n    \"ISPF Commands\" tool can create new Application tables in two different\n    ways:\n     #1~Start it via command\u00dfCMDS APPL(xxx)~where 'xxx' is the new Appl-Id.\n        Then it will show the \"Open Table\" window with the message \"table not\n        found in your ISPTLIB libraries\".  Specify the desired library name\n        and press ENTER.  Next it shows the \"Create new table\" window.  Press\n        ENTER to confirm the new table creation.  The new table, which will\n        have one dummy command, will be immediately active and displayed for\n        you to update and use.  Command\u00dfSAVEAPPL~saves your updates to disk.\n\n     #2~When \"ISPF Commands\" tool is already started enter\u00dfNEWAPPL~command.\n        Then it shows the \"Create new table\" window.  Initially it shows the\n        table name for current Appl-Id and you can change that to whatever\n        name you want.  The desired library name should also be specified.\n        Then press ENTER to confirm the new table creation.  The new table,\n        with one dummy command, will be written to disk, but it will not be\n        active.\n\n    Warning: these 'NEWxxxx' commands can create a new table to\u00dfREPLACE~an\n    existing table, and if that is done accidentally you may not be able to\n    recover the previous version of the table.\n\n    \"ISPF Commands\" tool has no facility to copy or delete complete tables.\n    You can simply copy or delete the library members by normal methods.\n    Note that if you copy a table member to a different member name - ISPF\n    can then open it as a table with the name of the new member, (using that\n    new member as the table source).\n\n\n# Passing parameters to Actions~\n# --------------------------- ~\n    If you enter a command name folowed by parameters - ISPF will put those\n    parameters into variable ZPARM.  If the command's action is \u00dfSETVERB~-\n    the parameters are automatically appended.  All other actions ignore the\n    parameters unless\u00df&&ZPARM~is included in the definition.\n\n    Other variables can also be included.  The contents of the variables (in\n    the active ISPF application) are then inserted into the command when it\n    is invoked.  Here are some examples:\n         @Command   Table  Description / Action\n         {--------  ----- &&\n         $ #TSO     \u00dfISP ~INVOKE A TSO SERVICE\n         {           SELECT SUSPEND CMD(&&ZPARM)\n         $ #DTST    \u00dfUSER~ISPF dialog test (using the current APPLID)\n         {           SELECT PGM(ISPYXDR) PARM(&&ZAPPLID) NOCHECK\n         $ #RUNPGM  \u00dfAPPL~application supplies program name, user enters parms\n         {           SELECT PGM(&&PGMNAME) PARM(&&ZPARM) SUSPEND\n         $*#CAN     \u00dfAPPL~use application's CAN action instead of ISPF default\n         {           &&CAN\n\n~   See HELP for ALIAS for more examples of passing parameters, and how that\n    works with ALIAS commands.\n\n\n# Adding parameters to Actions~\n# --------------------------- ~\n    Some command actions cannot have parameters directly added to them.\n    For example, if you want to create a command with the action\u00dfSWAP LIST~\n    you must create one with action\u00dfALIAS SWAP LIST~and place it before\n    the standard SWAP command in ISPCMDS table.  This technique is necessary\n    for actions\u00dfSPLIT SWAP SCRNAME~and\u00dfSETVERB~; (action SETVERB is used by\n    commands RCHANGE RFIND UP DOWN LEFT and RIGHT).\n\n\n# Function Keys in \"ISPF Commands\"~\n# -------------------------------- ~\n    The \"ISPF Commands\" panels all have Command fields and you can also use\n    Program Funtion Keys.  It sets\u00df'KEYLIST ON'~for all the window-box panels\n    to use the function key definitions from a keylist (ISRSNAB).  These\n    definitions are checked, and the panels give advice about what keys to\n    press (eg. 'press$F12~to CANCEL').  If no appropriate key definition is\n    found the panels advise what command to use (eg. 'enter$CAN~to CANCEL').\n~\n    Any HELP panels which can be scrolled, also set 'KEYLIST ON' and use the\n    ISRHLP2 keylist so you can scroll UP and DOWN via$F7~and$F8~keys.\n~\n    If you use ISPF with 'KEYLIST OFF', note that it will temporarily change\n    to 'KEYLIST ON' while any of those panels is displayed, but it will\n    revert to 'KEYLIST OFF' immediately after.\n~\n~\n~\n)INIT\n&ZCONT = ISPFCMH0\n.HHELP = ISP00006\n VGET ZKLUSE PROFILE\n &KLUSE = &ZKLUSE\n IF (&ZKLUSE = N)                      /* user has KEYLIST OFF */\n     &ZKLUSE = Y                       /* turn it ON           */\n     VPUT ZKLUSE PROFILE\n)PROC\n IF (.RESP = END)\n     IF (&KLUSE = N)                   /* user had KEYLIST OFF */\n         &ZKLUSE = N                   /* turn it OFF again    */\n         VPUT ZKLUSE PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMHK": {"ttr": 3589, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x01\\x01\\x00\\x16\\x1f\\x01\\x07\\x02_\\x17X\\x00P\\x000\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2000-06-09T00:00:00", "modifydate": "2007-01-25T17:58:01", "lines": 80, "newlines": 48, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHLP2,ISR)\n/*-------------------------- ISPFCMHK --------------------------------*/\n/*  HELP Panel for \"ISPF Commands\" tool                               */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_)\n\u00df TYPE(OUTPUT) INTENS(HIGH) COLOR(WHITE) JUST(RIGHT)\n\u00a7 TYPE(OUTPUT) INTENS(HIGH) COLOR(TURQ) CAPS(OFF)\n# TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)\n$ TYPE(TEXT) INTENS(HIGH) COLOR(TURQ)\n@ TYPE(TEXT) INTENS(HIGH) COLOR(RED)\n| TYPE(TEXT) INTENS(LOW)  COLOR(GREEN)\n{ AREA(SCRL) EXTEND(ON)\n)BODY EXPAND(\u00d6\u00d6)\n+HELP-\u00d6-\u00d6-$ISPF Commands+-\u00d6-\u00d6-HELP\n+Command ==>_ZCMD\n%                       COPYING COMMANDS TO ANOTHER TABLE\n{INFO                                                                          {\n)AREA INFO\n|   The primary command$COPY|is used to copy commands to another table.\n\n|   Whenever you have a pending COPY message displayed like the following:\n   #*** Select commands to be copied, or enter 'RES' to CANCEL the copying ***\n|   the$RESet|command will cancel the copying, but not reset anything else.\n\n    If the target table is ALREADY ACTIVE the COPY changes will be TEMPORARY,\n    and if the target table is NOT ACTIVE the COPY changes will be PERMANENT.\n\n    The commands to be copied are selected by line command$C|or$S|, from any\n    of the displayed command list (except 'empty table' entries).\n\n    When ENTER is pressed, a window is displayed to specify the target table\n    name and also the following:\n\n      +   Where in target table         Commands with same name$\n            @/$ALPHABETICALLY             @/$NOREPLACE\n            @ $AT START                   @ $REPLACE\n            @ $AT END                     @ $DUPLICATES\n\n|   The commands can be copied to the START or END of the target table in the\n    order they are selected, or they can be copied 'alphabetically'.\n\n    When copying 'alphabetically', it checks the target table for commands\n    with same name.  If you choose REPLACE - it replaces the command; if you\n    choose DUPLICATES - it adds the new command after the existing command.\n    If no command is found with the same name - it attempts to insert the new\n    command in the appropriate place for alphabetic order: it puts each new\n    command with old commands starting with the same first letter, or else\n    it inserts each new command before the first old command with a 'greater'\n    first letter.\n\n|   If the target table is ALREADY ACTIVE, the COPY will update the active\n    table but NOT SAVE THE CHANGES TO DISK.  That also applies when the table\n    is active in another logical split screen.\n\n|   If the target table is NOT ACTIVE, you must confirm or specify a library\n    where the table will be written, as follows.  First your ISPTLIB library\n    concatenation is searched to find the table member.  If it is found - a\n    window is shown for you to confirm that it is the correct library (and\n    you can specify a different library if desired).  If the table was not\n    found - a window requests you to supply a library name.  The target\n    library must already exist.  If the table does not already exist in the\n    library - another window will ask you to confirm the creation of a new\n    table member.  Once the target library has been confirmed - the target\n    table is briefly opened, the COPY updates are made, then the table is\n    SAVED TO DISK (and closed).\n\n)INIT\n &ZCONT = ISPFCMH0\n VGET ZKLUSE PROFILE\n &KLUSE = &ZKLUSE\n IF (&ZKLUSE = N)                      /* user has KEYLIST OFF */\n     &ZKLUSE = Y                       /* turn it ON           */\n     VPUT ZKLUSE PROFILE\n)PROC\n IF (.RESP = END)\n     IF (&KLUSE = N)                   /* user had KEYLIST OFF */\n         &ZKLUSE = N                   /* turn it OFF again    */\n         VPUT ZKLUSE PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMHM": {"ttr": 3592, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01$\\x00\\t\\x00\\x98\\x18\\x8f\\x01\\x07\\x02_\\x17X\\x00*\\x00 \\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.36", "flags": 0, "createdate": "1998-07-07T00:00:00", "modifydate": "2007-01-25T17:58:09", "lines": 42, "newlines": 32, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHELP,ISR)\n/*-------------------------- ISPFCMHM --------------------------------*/\n/*  HELP Panel for display of ISPF commands (ISPFCMDS)                */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*  - from panel ISPFCMD1 or ISPFCMH3.  Panel ISPFCMH0 follows.       */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(*+_)\n# TYPE(TEXT) INTENS(HIGH) COLOR(TURQ)\n$ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)\n| TYPE(TEXT) INTENS(LOW)  COLOR(GREEN)\n)BODY EXPAND(\u00d6\u00d6)\n+HELP-\u00d6-\u00d6-$ISPF Commands+-\u00d6-\u00d6-HELP\n+Command ==>_ZCMD\n|                   *CREATING A NEW USER COMMAND TABLE\n|\n* 1.|You need a PDS (with RECFM=FB,LRECL=80) for your own ISPF table library\n|    included in the libraries allocated to your ddname ISPTLIB.\n|\n* 2.|Use command#NEWUSER|in this$\"ISPF Commands\"|tool.  A panel will then show\n|    your allocated libraries and ask you to select one.  Next, it will create\n|    a new User commands table, with one dummy command for you to modify.\n|\n* 3.|&H3\n|\n* 4.|&H4\n|    use the$\"ISPF Commands\"|tool to create your own commands, for example:\n+      Command . . :#CMDS\n+      Trunc . . . :#0\n+      Action  . . :#SELECT CMD(ISPFCMDS &&ZPARM) SCRNAME(CMDS)\n+      Description :#ISPF Commands tool\n|\n* 5.|Use command#3|or#SAVE|to write your updated table to disk.\n)INIT\n&ZCONT = ISPFCMH0\nIF (&ZUCTPREF = &Z)           /* no current active User command table */\n  &H3='Exit from \"ISPF Commands\" by repeated PF3, then exit from ISPF.'\n  &H4='Start ISPF again and your new command table will be active.  Now you can'\nELSE             /* existing active User command table to be replaced */\n  &H3='Select your ISPF table library, then press ENTER.'\n  &H4='Your new command table will be immediately active.  Then you can'\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMHN": {"ttr": 3594, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x17\\x01\\x00\\x08\\x7f\\x01\\x07\\x02_\\x17X\\x00*\\x00)\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2000-03-27T00:00:00", "modifydate": "2007-01-25T17:58:17", "lines": 42, "newlines": 41, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHELP,ISR)\n/*-------------------------- ISPFCMHN --------------------------------*/\n/*  HELP Panel for display of ISPF commands (ISPFCMDS)                */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*  - from panel ISPFCMD1 Panel ISPFCMH0 follows.                     */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(*+_)\n# TYPE(TEXT) INTENS(HIGH) COLOR(TURQ)\n$ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)\n| TYPE(TEXT) INTENS(LOW)  COLOR(GREEN)\n)BODY EXPAND(\u00d6\u00d6)\n+HELP-\u00d6-\u00d6-$ISPF Commands+-\u00d6-\u00d6-HELP\n+Command ==>_ZCMD\n|                   *CREATING A NEW SITE COMMAND TABLE\n|\n* 1.|There should be a shared ISPF table library, (a PDS with RECFM=FB,LRECL=80)\n|    included in the libraries allocated to your ddname ISPTLIB.\n|\n* 2.|Use command#NEWSITE|in this$\"ISPF Commands\"|tool.  A panel will then show\n|    your allocated libraries and ask you to select one.  Next, it will create\n|    a new Site commands table, with one dummy command for you to modify.\n|\n* 3.|&H3\n|\n* 4.|&H4\n|    use the$\"ISPF Commands\"|tool to create some shared commands, for example:\n+      Command . . :#CMDS\n+      Trunc . . . :#0\n+      Action  . . :#SELECT CMD(ISPFCMDS &&ZPARM) SCRNAME(CMDS)\n+      Description :#ISPF Commands tool\n|\n* 5.|Use command#SAVESITE|to write the updated table to disk.\n)INIT\n&ZCONT = ISPFCMH0\nIF (&ZSCTPREF = &Z)           /* no current active Site command table */\n  &H3='Exit from \"ISPF Commands\" by repeated PF3, then exit from ISPF.'\n  &H4='Start ISPF again and the new command table will be active.  Now you can'\nELSE             /* existing active User command table to be replaced */\n  &H3='Select the ISPF table library, then press ENTER.'\n  &H4='The new command table will be immediately active.  Then you can'\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMHO": {"ttr": 3596, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01%\\x00(\\x00\\x99\\x17?\\x01\\x07\\x02_\\x17\\x13\\x00m\\x00)\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.37", "flags": 0, "createdate": "1999-06-22T00:00:00", "modifydate": "2007-01-25T17:13:28", "lines": 109, "newlines": 41, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHLP2,ISR)\n/*-------------------------- ISPFCMHO --------------------------------*/\n/*  HELP Panel for display of ISPF commands (ISPFCMDS)                */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*  - from panel ISPFCMD0.  Panel ISPFCMH0 follows.                   */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%~_)\n\u00ac TYPE(OUTPUT) INTENS(HIGH) COLOR(RED) PADC(_)\n} TYPE(OUTPUT) INTENS(HIGH) COLOR(RED) PADC(-)\n| TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW)\n\u00f3 TYPE(OUTPUT) INTENS(HIGH) COLOR(TURQ) CAPS(OFF) SKIP(ON)\n\u00df TYPE(OUTPUT) INTENS(HIGH) COLOR(RED)\n# TYPE(TEXT)   INTENS(HIGH) COLOR(YELLOW)\n$ TYPE(TEXT)   INTENS(HIGH) COLOR(TURQ)\n@ TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)\n\u00a7 TYPE(TEXT)   INTENS(LOW)  COLOR(RED)\n{ AREA(SCRL) EXTEND(ON)\n)BODY EXPAND(\u00d6\u00d6)\n~HELP-\u00d6-\u00d6-#ISPF Commands~-\u00d6-\u00d6-HELP\n~Command ===>_ZCMD\n%                                   OVERRIDE\n~\n~\n{INFO                                                                          {\n)AREA INFO\n@The#OVER@command can be used to list only those commands which override other\n following commands or are themselves overridden by preceding commands.\n@The#NOVER@command lists commands which do not override and are not overridden.\n\n Overrides can occur only when commands have identical names, or start with the\n same characters.  When those commands are displayed by \"ISPF Commands\" - each\n command in the list is marked with%'-' '.' '*'@or%'+'@as follows:\n\n %-$ Overridden command.~CANNOT BE INVOKED directly because a preceding command\n                         gets invoked instead.\n %.$ Partly overridden. ~This command is defined with possible truncations, but\n                         at least one of them is overridden (and would invoke a\n                         preceding command instead of this one).\n %*$ Overriding command.~This command prevents a following command from being\n                         directly invoked.\n %+$ Partly overriding. ~This command prevents some, but not all, invocations of\n                         a following command.\n@\n#Examples\n#--------\n@Command  Table  Description / Action\n\u00a7-------  ----- ----------------------------------- @Sorted by\u00a7REAL ORDER\n%*#ON     $APPL~overrides the following ON command in the same table\n\u00a7          CMD(ONAGAIN)\n%-#ON     $APPL~cannot be invoked, overridden by previous ON command\n\u00a7          PANEL(ONTOP)\n%+#CAN    $APPL~partly overrides CANCEL in the ISPCMDS table\n\u00a7          CMD(CANDLE)\n%*#RIGHT  $APPL~overrides RIGHT and partly overrides RIGID\n\u00a7  --      &&SCRRIGHT\n%.#RIGID  $USER~can be invoked only 'RIGI' or 'RIGID'\n\u00a7  --      PGM(STIFF)\n%-#RIGHT  $ISP ~cannot be invoked. overridden by RIGHT in APPLCMDS table\n\u00a7          SETVERB\n%.#CANCEL $ISP ~can be invoked only by 'CANC', 'CANCE' or 'CANCEL'\n\u00a7  ---     CANCEL\n~\n@An overriding command can be in any command table as long as it is before the\n@overridden command in the ISPF search order (ie. 'REAL ORDER').  Even if your\n@command list is sorted in a different order (eg. 'COMMAND NAME') - all the\n@override markings:%'-' '.' '*'@and%'+'@are still valid.\n~\n@The$V@line command can be used to see more details about a particular command.\n@The full command definition is displayed plus messages listing any commands\n@which override this command, and any other commands which are overridden by it.\n~\n@The$S@line command will invoke commands, even if they are overridden.\n~\n@The#RES@command will reset this list to ALL commands (in your selected tables).\n~\n@It's possible for a command to be partly overridden and simultaneously override\n@another command.  In such cases - the command will be marked with%'.'\n~\n@It's possible for a command to simultaneously override one command completely\n@and another command partly. In such cases - the command will be marked with%'*'\n~\n@It's also possible for an overridden command (which can't be directly invoked),\n@to be invoked indirectly by another command with an ALIAS action.  See HELP for\n@ALIAS for an example.\n~\n@In the examples above the RIGHT command in table APPLCMDS has Action &&SCRRIGHT\n@to override the standard IBM action SETVERB.  This technique is used by some\n@applications to enable (logical) scrolling of a displayed panel which would not\n@normally allow the RIGHT command (shows message: \"RIGHT\" is not active).  When\n@the variable SCRRIGHT is set to 'PASSTHRU' the users command ('RI','RIG','RIGH'\n@or 'RIGHT') is passed through to the application and it must do another panel\n@display which is a logical scroll to the right.  If the SCRRIGHT variable is\n@set to null or not initialised - ISPF will ignore this command definition and\n@instead use the RIGHT command from the ISPCMDS table.\n~\n~                   Press ENTER for more HELP information\n)INIT\n &ZCONT = ISPFCMH0\n VGET ZKLUSE PROFILE\n &KLUSE = &ZKLUSE\n IF (&ZKLUSE = N)                      /* user has KEYLIST OFF */\n     &ZKLUSE = Y                       /* turn it ON           */\n     VPUT ZKLUSE PROFILE\n)PROC\n IF (.RESP = END)\n     IF (&KLUSE = N)                   /* user had KEYLIST OFF */\n         &ZKLUSE = N                   /* turn it OFF again    */\n         VPUT ZKLUSE PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMHS": {"ttr": 3599, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1b\\x005\\x00\\x992?\\x01\\x07\\x02_\\x17X\\x008\\x00*\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.27", "flags": 0, "createdate": "1999-11-19T00:00:00", "modifydate": "2007-01-25T17:58:35", "lines": 56, "newlines": 42, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHELP,ISR)\n/*-------------------------- ISPFCMHS --------------------------------*/\n/*  HELP Panel for display of ISPF commands (ISPFCMDS)                */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_)\n\u00ac TYPE(OUTPUT) INTENS(HIGH) COLOR(RED) PADC(_)\n} TYPE(OUTPUT) INTENS(HIGH) COLOR(RED) PADC(-)\n| TYPE(OUTPUT) INTENS(HIGH) COLOR(BLUE)\n\u00f3 TYPE(OUTPUT) INTENS(HIGH) COLOR(TURQ) CAPS(OFF) SKIP(ON)\n\u00a6 TYPE(TEXT)   INTENS(HIGH) COLOR(TURQ)\n\u00df TYPE(OUTPUT) INTENS(HIGH) COLOR(RED)\n# TYPE(TEXT)   INTENS(HIGH) COLOR(YELLOW)\n$ TYPE(TEXT)   INTENS(HIGH) COLOR(TURQ)\n@ TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)\n{ AREA(SCRL) EXTEND(ON)\n\u00a2 TYPE(CHAR) INTENS(LOW)  COLOR(GREEN)\n\\ TYPE(CHAR) INTENS(HIGH) COLOR(RED)\n! TYPE(CHAR) INTENS(HIGH) COLOR(WHITE)\n\u00a7 AREA(DYNAMIC)\n)BODY EXPAND(\u00d6\u00d6)\n+HELP-\u00d6-\u00d6-#ISPF Commands+-\u00d6-\u00d6-HELP\n+Command ==>_ZCMD                               $Application Id :|ZAPPLID\n%                          SORTING THE LIST     $User table(s)  :|TB2A|TB2B|TB2C\n+                                               \u00f3DESC3         +:|TB3A|TB3B|TB3C\n+  Command  +Table +Description / Action        \u00f3DESC4         +:|TB4A|TB4B|TB4C\n+ }CMDSCAN ++----- }CMDFIND                           +Sorted by\u00dfCMDSORT\n+\n@The order of the command list is shown in the+Sorted by@field. Default order is\n \u00a7STEXT,SSHAD\u00a7@(ie. the actual order of the commands/tables, as used by ISPF).\n \u00a7STEXT2,SSHAD2                                                              \u00a7\n@\n@Set the sort order via the\u00a6SORT@command or by overtyping the+Sorted by@field:\n  \u00a6o@Use\u00a6'SORT a'@to sort by 'a', where 'a' is R, C, T, A or D (first character\n       \u00a7STEXT3,SSHAD3                                                     \u00a7\n  \u00a6o@If the\u00a6SORT@command is used without a parameter it sorts by COMMAND NAME,\n      @except if already in COMMAND NAME order - it switches to REAL ORDER.\n  \u00a6o@When overtyping the+Sorted by@field, only the first character is needed.\n@\n@Your chosen sort order is stored in the ISPF application's profile so that the\n@same order will be used the next time the#\"ISPF Commands\"@tool is started.\n@\n@TABLE order is same as REAL ORDER except the commands within each table are\n@sorted alphabetically.\n)INIT\n&ZCONT = ISPFCMH0\n&STEXT = 'is REAL ORDER'\n&SSHAD  = '\u00a2\u00a2\u00a2\\\\\\\\\\\\\\\\\\\\'\n&STEXT2 = 'You can also sort the list by'\n&SSHAD2 = '\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n&STEXT2 = '&STEXT2 COMMAND NAME, TABLE, ACTION or DESCRIPTION.'\n&SSHAD2 = '&SSHAD2.\u00a2\\\\\\\\\\\\\\\\\\\\\\\\\u00a2\u00a2\\\\\\\\\\\u00a2\u00a2\\\\\\\\\\\\\u00a2\u00a2\u00a2\u00a2\\\\\\\\\\\\\\\\\\\\\\\u00a2'\n&STEXT3 = 'of Real order, Command name, Table, Action or Description).'\n&SSHAD3 = '\u00a2\u00a2\u00a2!\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2!\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2!\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2!\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2!\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2'\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMHT": {"ttr": 3601, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01*\\x00C\\x00\\x99\\x16\\x7f\\x01\\x07\\x02_\\x17X\\x00R\\x00\\x1f\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.42", "flags": 0, "createdate": "1999-06-16T00:00:00", "modifydate": "2007-01-25T17:58:43", "lines": 82, "newlines": 31, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHLP2,ISR)\n/*-------------------------- ISPFCMHT --------------------------------*/\n/*  HELP Panel for display of ISPF commands (ISPFCMDS)                */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*  - from panel ISPFCMD0.  Panel ISPFCMH0 follows.                   */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%~_)\n\u00ac TYPE(OUTPUT) INTENS(HIGH) COLOR(RED) PADC(_)\n} TYPE(OUTPUT) INTENS(HIGH) COLOR(RED) PADC(-)\n| TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW)\n\u00f3 TYPE(OUTPUT) INTENS(HIGH) COLOR(TURQ) CAPS(OFF) SKIP(ON)\n\u00df TYPE(OUTPUT) INTENS(HIGH) COLOR(RED)\n\u00a7 TYPE(TEXT)   INTENS(HIGH) COLOR(RED)\n# TYPE(TEXT)   INTENS(HIGH) COLOR(YELLOW)\n$ TYPE(TEXT)   INTENS(HIGH) COLOR(TURQ)\n@ TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)\n{ AREA(SCRL) EXTEND(ON)\n)BODY EXPAND(\u00d6\u00d6)\n~HELP-\u00d6-\u00d6-#ISPF Commands~-\u00d6-\u00d6-HELP\n~Command ===>_ZCMD\n%                                   TRUNCATION\n~\n~\n{INFO                                                                          {\n)AREA INFO\n@Commands can be defined so that users don't need to type the whole command name\n@to invoke them.  The~Trunc@parameter specfies the number of characters required\n#\"ISPF Commands\"@does not show the Trunc values when it displays a command list.\n@When a list has two lines per command, commands with truncation are underlined.\n~\n@When the#TRUNC@command is used in \"ISPF Commands\" tool the list is refreshed to\n@display only those commands which can be truncated when the user enters them.\n@Initially the list will display a second line for each command, underlining\n@the~Command@field to show the MINIMUM NUMBER OF CHARACTERS REQUIRED.\n~\n#Examples\n#--------\n@Command  Table  Description / Action\n\u00a7-------  ----- ----------------------------------- @Sorted by\u00a7REAL ORDER\n%+#CANCER $APPL~Trunc=3, invoked by: 'CAN', 'CANC', 'CANCE' or 'CANCER'\n\u00a7  ---     ALIAS ZODIAC CANCER\n% #RIGHT  $ISP ~Trunc=0, invoked only by: 'RIGHT'  (hence NOT UNDERLINED)\n\u00a7          SETVERB\n%.#CANCEL $ISP ~Trunc=3, but partly-overridden - invoked only by: 'CANCEL'\n\u00a7  ---     CANCEL\n~\n@If~Trunc=0@the whole command name is required, and that is how most commands\n@are defined.  Those commands are not underlined, and not displayed by#TRUNC\n~\n@Note when~Trunc=1@the minimum number of characters is actually 2.  In such a\n@case the first TWO characters would be underlined.\n~\n@Also, if the underlining is longer than the command name - that indicates the\n@truncate value is too big, and hence that command cannot be invoked.\n~\n@Use line command$V@to list all valid invocations of a command.  For example:\n%   ** This command is invoked by: CAN CANC CANCE CANCER\n~\n@The#RES@command will reset this list to ALL commands (in your selected tables).\n~\n@Normally the underlining shows the actual number of required characters, but if\n@a command is partly-overridden that may not be valid.   An example of that is\n@shown above where CANCER partly overrides CANCEL.  See HELP for OVERRIDE.\n@The line command$V@shows this too.  For our example:\n%   ** This command can be invoked only by entering CANCEL\n%      because it is partly overridden by CANCER in table APPLCMDS\n~\n~\n~                   Press ENTER for more HELP information\n)INIT\n &ZCONT = ISPFCMH0\n VGET ZKLUSE PROFILE\n &KLUSE = &ZKLUSE\n IF (&ZKLUSE = N)                      /* user has KEYLIST OFF */\n     &ZKLUSE = Y                       /* turn it ON           */\n     VPUT ZKLUSE PROFILE\n)PROC\n IF (.RESP = END)\n     IF (&KLUSE = N)                   /* user had KEYLIST OFF */\n         &ZKLUSE = N                   /* turn it OFF again    */\n         VPUT ZKLUSE PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMHU": {"ttr": 3843, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00R\\x01\\x00\\t_\\x01\\x07\\x02_\\x17X\\x00d\\x00k\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "2000-04-04T00:00:00", "modifydate": "2007-01-25T17:58:52", "lines": 100, "newlines": 107, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHLP2,ISR)\n/*-------------------------- ISPFCMHU --------------------------------*/\n/*  HELP Panel for display of ISPF commands (ISPFCMDS)                */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT($@_)\n# TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)\n\u00df TYPE(TEXT) INTENS(HIGH) COLOR(TURQ)\n{ TYPE(TEXT) INTENS(HIGH) COLOR(RED)\n$ TYPE(TEXT) INTENS(HIGH) COLOR(WHITE)\n@ TYPE(TEXT) INTENS(LOW)  COLOR(BLUE)\n~ TYPE(TEXT) INTENS(LOW)  COLOR(GREEN)\n\u00a7 AREA(SCRL) EXTEND(ON)\n)BODY EXPAND(\u00d6\u00d6)\n~HELP-\u00d6-\u00d6-#ISPF Commands~-\u00d6-\u00d6-HELP\n~Command ===>_ZCMD\n$                               UPDATING COMMANDS\n\u00a7INFO                                                                          \u00a7\n)AREA INFO\n    From any command list you can use the following line commands:\n      \u00dfE@ - UPDATE the command\n      \u00dfU@ - UPDATE the command\n      \u00dfI@ - INSERT a new command\n      \u00dfR@ - REPEAT the command\n      \u00dfC@ - COPY the command    ~\n\n    In each case an Update window will be shown, with all the command's\n    definition fields.  It will check the fields when you press ENTER or you\n    SAVE the command, as follows:\n      \u00dfCommand . . :@Required.~It must have a length of 2-8 characters,\n                         starting with A-Z.\n      \u00dfTrunc . . . :@Required.~A valid length will be automatically\n                         enforced.\n      \u00dfAction  . . :@Optional.~It is checked for a valid keyword; some\n                         common errors will be automatically corrected.\n      \u00dfDescription :@Optional,~but it recommends that you supply one.\n  ~\n    Here are some examples of the automatic correction of Actions:\n      @PNL(MYPANEL) SCRNAME(MYSTUFF)~-->@SELECT PANEL(MYPANEL) SCRNAME(MYSTUFF)\n      @%MYEXEC                      ~-->@SELECT CMD(%MYEXEC) SUSPEND MODE(FSCR)\n      @EXEC PGM=xxx,PARM='yyy zzz'  ~-->@SELECT PGM(xxx) PARM(yyy zzz)\n      @TSO LISTA                    ~-->@SELECT CMD(LISTA &&ZPARM) MODE(FSCR)\n  ~\n    When a command is updated all updated fields are checked.  If the update\n    changed the command's overrides or ALIASes - warning messages will then\n    shown, like the following:\n      \u00dfWarning: CMD1 is ALIAS of OLDCMD\n      \u00dfWarning: CMD2 will do NOTHING because ALIAS command xxxxxx not found\n      \u00dfWarning: NEWCMD will be OVERRIDDEN by cmd xxxx in table yyyCMDS\n      \u00dfWarning: it can only be invoked by entering ABCD\n                because it is partly overridden by ABCDEF in table USERCMDS\n      \u00dfWarning: this will partly override command ABCDE in table USERCMDS\n  ~\n    Alternatively, from any command list which shows the Actions, you can\n    directly overtype fields in the list to update any existing command(s).\n    When you press ENTER - the commands are immediately updated, and the\n    Update window is not (normally) displayed.  This enables faster updating\n    (specially for updating multiple commands at a time).  All the updated\n    fields are checked.  If the Action is not recognised or is automaticaly\n    corrected, or if there is a Warning - the Update window will be shown\n    with a warning message.\n\n    Note that all updates are immediately effective, but not permanent\n    unless you save the updated table to disk.\n\n\n~                   Press ENTER for more HELP information\n)INIT\n &ZCONT = ISPFCMH0\n VGET ZKLUSE PROFILE\n &KLUSE = &ZKLUSE\n IF (&ZKLUSE = N)                      /* user has KEYLIST OFF */\n     &ZKLUSE = Y                       /* turn it ON           */\n     VPUT ZKLUSE PROFILE\n)PROC\n IF (.RESP = END)\n     IF (&KLUSE = N)                   /* user had KEYLIST OFF */\n         &ZKLUSE = N                   /* turn it OFF again    */\n         VPUT ZKLUSE PROFILE\n)END\n@\n#Examples\n#--------\n@Command  Table  Description / Action\n\u00a7-------  ----- ----------------------------------- @Sorted by\u00a7REAL ORDER\n%*#ON     $APPL~overrides the following ON command in the same table\n\u00a7          CMD(ONAGAIN)\n%-#ON     $APPL~cannot be invoked, overridden by previous ON command\n\u00a7          PANEL(ONTOP)\n%+#CAN    $APPL~partly overrides CANCEL in the ISPCMDS table\n\u00a7          CMD(CANDLE)\n%*#RIGHT  $APPL~overrides RIGHT and partly overrides RIGID\n\u00a7  --      &&SCRRIGHT\n%.#RIGID  $USER~can be invoked only 'RIGI' or 'RIGID'\n\u00a7  --      PGM(STIFF)\n%-#RIGHT  $ISP ~cannot be invoked. overridden by RIGHT in APPLCMDS table\n\u00a7          SETVERB\n%.#CANCEL $ISP ~can be invoked only by 'CANC', 'CANCE' or 'CANCEL'\n\u00a7  ---     CANCEL\n~\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMH0": {"ttr": 3846, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01E\\x006\\x00\\x98\\x11?\\x01\\x07\\x11?\\x16\\x07\\x002\\x00\\x17\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.69", "flags": 0, "createdate": "1998-04-23T00:00:00", "modifydate": "2007-04-23T16:07:36", "lines": 50, "newlines": 23, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHELP,ISR)\n/*-------------------------- ISPFCMH0 --------------------------------*/\n/*  HELP Panel for display of ISPF commands (ISPFCMDS)                */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%\u00a2~)\n# TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)\n$ TYPE(TEXT) INTENS(HIGH) COLOR(TURQ)\n| TYPE(TEXT) INTENS(LOW)  COLOR(GREEN)\n)BODY EXPAND(\u00d6\u00d6)\n\u00a2HELP-\u00d6-\u00d6-#ISPF Commands\u00a2-\u00d6-\u00d6-HELP\n\u00a2Option ===>~ZCMD                                              $Version 7.0\n\u00a2\n|This tool displays the contents of the ISPF command tables that are active in\n|the current ISPF application (in which this was started).  It enables you to\n|change any commands temporarily, or to save any command changes permanently.\n|\n|\n|The following topics are presented in sequence, or may be selected by number:\n|\n    %0. #GENERAL INFORMATION          %5. #CREATING A NEW USER COMMAND TABLE\n    %1. #DISPLAY FIELDS               %6. #SORTING THE LIST\n    %2. #PRIMARY COMMANDS             %7. #TRUNCATION\n    %3. #LINE COMMANDS                %8. #ALIAS\n|   %4. #UPDATING COMMANDS            %9. #OVERRIDE\n|\n    %H. #HINTS AND TIPS               %S. #STANDARD (IBM) ISPF COMMANDS\n    %C. #COMMAND TABLE CONFIGURATION  %T. #ISPF TOOLS - COMMANDS\n|\n|\n|For further information contact Ron Brown at$Ron_Brown@hotmail.com\n)INIT\n &ZIND = YES\n)PROC\n &ZSEL = TRANS(&ZCMD\n              0,ISPFCMHG\n              1,ISPFCMH1\n              2,ISPFCMH2\n              3,ISPFCMH3\n              4,ISPFCMHU\n              H,ISPFCMHH\n              C,ISPFCMHC\n              5,ISPFCMHM\n              6,ISPFCMHS\n              7,ISPFCMHT\n              8,ISPFCMHA\n              9,ISPFCMHO\n              S,ISP01305\n              T,TOOL$HLP)\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMH1": {"ttr": 3848, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x011\\x00&\\x00\\x98\\x11\\x7f\\x01\\x07\\x02_\\x17Y\\x004\\x00'\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@\"", "ispf": {"version": "01.49", "flags": 0, "createdate": "1998-04-27T00:00:00", "modifydate": "2007-01-25T17:59:26", "lines": 52, "newlines": 39, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHELP,ISR)\n/*-------------------------- ISPFCMH1 --------------------------------*/\n/*  HELP Panel for display of ISPF commands (ISPFCMDS)                */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%~_)\n\u00ac TYPE(OUTPUT) INTENS(HIGH) COLOR(RED) PADC(_)\n} TYPE(OUTPUT) INTENS(HIGH) COLOR(RED) PADC(-)\n| TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW)\n\u00f3 TYPE(OUTPUT) INTENS(HIGH) COLOR(TURQ) CAPS(OFF) SKIP(ON)\n\u00df TYPE(OUTPUT) INTENS(HIGH) COLOR(RED)\n{ TYPE(TEXT)   INTENS(HIGH) COLOR(RED)\n# TYPE(TEXT)   INTENS(HIGH) COLOR(YELLOW)\n$ TYPE(TEXT)   INTENS(HIGH) COLOR(TURQ)\n@ TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)\n\u00a2 TYPE(CHAR) INTENS(LOW)  COLOR(GREEN)\n\\ TYPE(CHAR) INTENS(HIGH) COLOR(RED)\n! TYPE(CHAR) INTENS(HIGH) COLOR(WHITE)\n\u00a7 AREA(DYNAMIC)\n)BODY EXPAND(\u00d6\u00d6)\n~HELP-\u00d6-\u00d6-#ISPF Commands~-\u00d6-\u00d6-HELP\n~Command ==>_ZCMD                             \u00acZ$Application Id :|Z\n%                              DISPLAY FIELDS~\u00acZ$User table(s)  :|TB2A|TB2B|TB2C\n~                                             \u00acZ\u00f3DESC3         ~:|TB3A|TB3B|TB3C\n~  Command  ~Table ~Description / Action      \u00acZ\u00f3DESC4         ~:|TB4A|TB4B|TB4C\n~ }CMDSCAN ~~----- }CMDFIND                           ~Sorted by\u00dfCMDSORT\n@The active command tables are listed in order at the top right (in yellow).\n@When there is{/@next to the table name(s) - those commands are listed below.\n@Change any of the{/@symbols to a blank to NOT list commands from that table.\n@\n@If command#'S xxx'@is used, the#'xxx'@is shown under the~Command@field heading.\n@If command#'F xxx'@is used,#'xxx'@is shown under the~Description@field heading.\n@\n@The order of the command list is shown in the field:~Sorted by@.  It is sorted\n@in{REAL ORDER@by default (ie. the order in which ISPF searches them to find a\n@command), or else sorted by \u00a7DFTEXT,DFSHAD                                  \u00a7\n@\n%*@or%+@next to a command indicates that it overrides other command(s).\n%-@or%.@next to a command indicates it is overridden.  See HELP for#OVERRIDE\n@\n@When the command~Actions@are shown (in red),~Command@names are underlined if\n@you don't need to enter the whole command name to invoke that command.\n@Then only the required characters are underlined.  See HELP for#TRUNCATION\n)INIT\n  .ZVARS = '(T1,ZAPPLID,T2,T3,T4)'\n&DFTEXT = 'COMMAND NAME, TABLE, ACTION or DESCRIPTION.'\n&DFSHAD = '\\\\\\\\\\\\\\\\\\\\\\\\\u00a2\u00a2\\\\\\\\\\\u00a2\u00a2\\\\\\\\\\\\\u00a2\u00a2\u00a2\u00a2\\\\\\\\\\\\\\\\\\\\\\\u00a2'\nIf (&NOAPPL = YES)                  /* no Applid cmds table          */\n    .ATTR(ZAPPLID) = 'COLOR(BLUE)'\n)PROC\n)END\n@command), or else sorted by{COMMAND NAME, TABLE, ACTION@or{DESCRIPTION@.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMH2": {"ttr": 3850, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01@\\x005\\x00\\x98\\x16\\x7f\\x01\\x07\\x02_\\x17Y\\x00H\\x00#\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.64", "flags": 0, "createdate": "1998-06-16T00:00:00", "modifydate": "2007-01-25T17:59:35", "lines": 72, "newlines": 35, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHLP2,ISR)\n/*-------------------------- ISPFCMH2 --------------------------------*/\n/*  HELP Panel for display of ISPF commands (ISPFCMDS)                */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_)\n# TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)\n$ TYPE(TEXT) INTENS(HIGH) COLOR(WHITE)\n| TYPE(TEXT) INTENS(LOW)  COLOR(GREEN)\n\u00df TYPE(TEXT) INTENS(LOW)  COLOR(TURQ)\n{ TYPE(CHAR) INTENS(LOW)  COLOR(GREEN)\n\u00a6 TYPE(CHAR) INTENS(HIGH) COLOR(TURQ)\n} TYPE(CHAR) INTENS(HIGH) COLOR(WHITE)\n@ AREA(SCRL) EXTEND(ON)\n\u00a7 AREA(DYNAMIC)\n)BODY EXPAND(\u00d6\u00d6)\n+HELP-\u00d6-\u00d6-#ISPF Commands+-\u00d6-\u00d6-HELP\n+Command ==>_ZCMD\n@INFO                                                                          @\n)AREA INFO\n|           The following%PRIMARY COMMANDS|can be used:\n+\n$    1   |- Switch between: showing the command Actions, and NOT showing them\n$    2   |- Display command table statistics and the datasets they are stored in\n$    3   |- &HOPT3\n$\n$Alias   |- Show only commands that use an ALIAS or are used by an ALIAS\n$COPY    |- Copy selected commands into another table\n$F xxx   |- FIND all commands with characters$'xxx'|in the Description or Action\n$L xxx   |- LOCATE the (first) command named$'xxx'|in the displayed list\n$NEWAppl |- Create a NEW Application command table\n$NEWSite |- Create a NEW Site command table (only for System Programmers)\n$NEWUser |- Create a NEW User command table\n$Nover   |- Show only commands that do NOT OVERRIDE and are NOT OVERRIDDEN\n$Over    |- Show only commands that OVERRIDE or are OVERRIDDEN\n$REFresh |- REFRESH the list from the active command tables\n$RESet   |- RESET the list (ALIAS, OVER, TRUNC), or pending/excluded commands\n$S xxx   |- SHOW only commands with names starting with$'xxx'|\n$SAVEAppl|- SAVE the APPL command table (only for ISPF application developers)\n$SAVESite|- SAVE the SITE command table (only for use by System Programmers)\n$SAVEuser|- SAVE your USER command table to disk\n$SOrt a  |- \u00a7SRTTEXT1,SRTSHAD1                              \u00a7(first character of\n|           \u00a7SRTTEXT2,SRTSHAD2                                              \u00a7\n$Trunc   |- Show only commands that can be TRUNCATED\n$X yyy   |- EXCLUDE all commands with chars$'yyy'|in the Description or Action\n$\n$CONFig  |- Extended ISPF Configuration Utility (display/modify configuration)\n)INIT\n If (&ZUCTPREF = &Z)                 /* no User table is active       */\n     &HOPT3 = 'Create a new User Command table'\n Else\n     &HOPT3 = 'Save your User Commands on disk'\n &SRTTEXT1 ='SORT the list by ''a'', where a is R, C, T, A or D'\n &SRTSHAD1 ='{{{{{{{{{{{{{{{{{}}}{{{{{{{{}{{{{\u00a6{{\u00a6{{\u00a6{{\u00a6}{{{\u00a6'\n &SRTTEXT2 ='Real order, Command name, Table, Action or Description).'\n &SRTSHAD2 ='}{{{{{{{{{{{}{{{{{{{{{{{{{}{{{{{{}{{{{{{{{{}{{{{{{{{{{{{'\n .HHELP = ISP00006\n VGET ZKLUSE PROFILE\n &KLUSE = &ZKLUSE\n IF (&ZKLUSE = N)                      /* user has KEYLIST OFF */\n     &ZKLUSE = Y                       /* turn it ON           */\n     VPUT ZKLUSE PROFILE\n)PROC\n IF (.RESP = END)\n     IF (&KLUSE = N)                   /* user had KEYLIST OFF */\n         &ZKLUSE = N                   /* turn it OFF again    */\n         VPUT ZKLUSE PROFILE\n)END\n-----------------------------------------------------------------------\n$ SORTA  |- SORT the Application table alphabetically\n$ SORTS  |- SORT the Site table alphabetically\n$ SORTU  |- SORT the User table alphabetically\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMH3": {"ttr": 3853, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01!\\x00B\\x00\\x98\\x11\\x7f\\x01\\x07\\x02_\\x17Y\\x00\\'\\x00\"\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.33", "flags": 0, "createdate": "1998-04-27T00:00:00", "modifydate": "2007-01-25T17:59:42", "lines": 39, "newlines": 34, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHELP,ISR)\n/*-------------------------- ISPFCMH3 --------------------------------*/\n/*  HELP Panel for display of ISPF commands (ISPFCMDS)                */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_)\n# TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)\n* TYPE(TEXT) INTENS(HIGH) COLOR(TURQ)\n$ TYPE(TEXT) INTENS(HIGH) COLOR(WHITE)\n| TYPE(TEXT) INTENS(LOW)  COLOR(GREEN)\n)BODY EXPAND(\u00d6\u00d6)\n+HELP-\u00d6-\u00d6-#ISPF Commands+-\u00d6-\u00d6-HELP\n+Command ==>_ZCMD\n|The following%LINE COMMANDS|can be entered beside any listed command:\n|\n$    $S |- INVOKE command (you can use*Option|field to supply any parameters)\n|    $H |- HELP information about the command\n$    $V |- VIEW the command\n$E|or$U |- UPDATE the command\n$     I |- INSERT a new command (AFTER the current command, in the same table)\n$     R |- REPEAT the command (BEFORE the current command, in the same table)\n$     D |- DELETE the command\n$     X |- EXCLUDE the command from the displayed list\n|\n$     C |- COPY the command\n$     M |- MOVE the command\n$     A |- AFTER (used with COPY or MOVE)\n$     B |- BEFORE (used with COPY or MOVE)\n|\n  |Note that any command table changes made via this tool will be effective\n#immediately|and available for use.  Such changes are only#temporary|and remain\n|active until the command table is closed. They are NOT written to disk.\n|\n  |If you have made changes to your User commands and you want to save them\n#permanently|(on disk): use the*SAVE|command (see HELP for Primary Commands).\n)INIT\n&ZCONT = ISPFCMHU\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMH4": {"ttr": 3855, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\'\\x00\"\\x00\\x98\\x12o\\x01\\x07\\x02_\\x16\\x16\\x00B\\x001\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.39", "flags": 0, "createdate": "1998-05-06T00:00:00", "modifydate": "2007-01-25T16:16:22", "lines": 66, "newlines": 49, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHELP,ISR)\n/*-------------------------- ISPFCMH4 --------------------------------*/\n/*  HELP Panel for display of ISPF commands (ISPFCMDS)                */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*  - from panel ISPFCMD3.  Panel ISPFCMH0 follows.                   */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_)\n\u00ac TYPE(OUTPUT) INTENS(HIGH) COLOR(RED) PADC(_)\n\u00f3 TYPE(OUTPUT) INTENS(HIGH) COLOR(TURQ) CAPS(OFF) SKIP(ON)\n\u00df TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW) CAPS(OFF) SKIP(ON)\n# TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)\n\u00a7 TYPE(TEXT) INTENS(HIGH) COLOR(TURQ)\n| TYPE(TEXT) INTENS(LOW)  COLOR(GREEN)\n)BODY EXPAND(\u00d6\u00d6)\n+HELP-\u00d6-\u00d6-#ISPF Commands+-\u00d6-\u00d6-HELP\n+Command ==>_ZCMD                                       +Defined Command tables\n+                                           + \u00acZ\u00a7Application Id :\u00dfZ\n%                    ACTIVE COMMAND TABLES  + \u00acZ\u00a7User table(s)  :\u00dfDT2A\u00dfDT2B\u00dfDT2C\n+                                           + \u00acZ\u00f3DESC3         \u00a7:\u00dfDT3A\u00dfDT3B\u00dfDT3C\n+                                           + \u00acZ\u00f3DESC4         \u00a7:\u00dfDT4A\u00dfDT4B\u00dfDT4C\n+ Table   No. of      Last Updated\n+ Name     Cmds   Date      Time     User      Dataset Name               Volume\n+-------- +----  ---------------------------  ----------------------------------\n|The table name prefixes defined in your ISPF configuration are listed above.\n|The currently active tables are shown in#yellow|, inactive are shown in+blue|.\n Statistics of all the active tables are listed below.  Those statistics are\n from the tables in storage (and not necessarily the same as the disk copies).\n|\n The\u00a7User, Site|and\u00a7System|tables are stored in your ISPTLIB concatenation.\n They are opened when ISPF is started.  Hence, each+Dataset Name|is found by\n searching for the first occurrence of that member in your ISPTLIB libraries.\n|\n Any\u00a7Application|command table must also be stored in your ISPTLIB concatenation\n or in a dynamic allocation (LIBDEF) to ISPTLIB.  It's opened only when the ISPF\n application is started.  Hence, the+Dataset Name|is found by searching LIBDEF\n and ISPTLIB allocations.  When the table member is found in a LIBDEF'd dataset,\n this panel will show the+Dataset Name|preceeded by%**|(or%****|from ISPTUSR).\n The+Dataset Name|column can be scrolled LEFT/RIGHT when the cursor is on it.\n)INIT\n&ZCONT = ISPFCMHC\n.HHELP = ISP00006\n.ZVARS = '(T1,ZAPPLID,T2,T3,T4)'\nIf (&NOAPPL = YES)                  /* no Applid cmds table active   */\n    .ATTR(ZAPPLID) = 'COLOR(BLUE)'\nIf (&ZAPPLID = &USERPREF OR &ZUCTPREF = &Z)\n    .ATTR(DT2A) = 'COLOR(BLUE)'\nIf (&ZAPPLID = &USR2PREF OR &ZUCTPRE2 = &Z)\n    .ATTR(DT2B) = 'COLOR(BLUE)'\nIf (&ZAPPLID = &USR3PREF OR &ZUCTPRE3 = &Z)\n    .ATTR(DT2C) = 'COLOR(BLUE)'\nIf (&ZSCTSRCH = B)                  /* variable from ISRCONFG module */\n    If (&ZAPPLID = &SITEPREF OR &ZSCTPREF = &Z)\n        .ATTR(DT3A) = 'COLOR(BLUE)'\n    If (&ZAPPLID = &SIT2PREF OR &ZSCTPRE2 = &Z)\n        .ATTR(DT3B) = 'COLOR(BLUE)'\n    If (&ZAPPLID = &SIT3PREF OR &ZSCTPRE3 = &Z)\n        .ATTR(DT3C) = 'COLOR(BLUE)'\nElse                                /* &ZSCTSRCH = A                 */\n    If (&ZAPPLID = &SITEPREF OR &ZSCTPREF = &Z)\n        .ATTR(DT4A) = 'COLOR(BLUE)'\n    If (&ZAPPLID = &SIT2PREF OR &ZSCTPRE2 = &Z)\n        .ATTR(DT4B) = 'COLOR(BLUE)'\n    If (&ZAPPLID = &SIT3PREF OR &ZSCTPRE3 = &Z)\n        .ATTR(DT4C) = 'COLOR(BLUE)'\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMH5": {"ttr": 3857, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x00W\\x00\\x99\\x19_\\x01\\x07\\x02_\\x17Y\\x00(\\x00\\x1f\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "1999-07-14T00:00:00", "modifydate": "2007-01-25T17:59:57", "lines": 40, "newlines": 31, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHELP,ISR)\n/*-------------------------- ISPFCMH5 --------------------------------*/\n/*  HELP Panel for display of ISPF commands (ISPFCMDS)                */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*  - from panel ISPFCMD4 or ISPFCMD5.                                */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_)\n  @ TYPE(PT)\n  $ TYPE(NT)\n)BODY WINDOW(70,16)\n$                    @Help for Command &HTEXT01   $                  $\n$Option ==>_ZCMD\n\n$This panel displays the whole command definition.  You can &HTEXT02 $\n$the Command, Truncation, Action, and Description fields.            $\n$                                                                    $\n$They are arranged so you can cut and paste them to/from the similar $\n$IBM panel in ISPF option 3.9 'Command Table Utility'.               $\n$                                                                    $\n$Further information about these fields may be selected by number:   $\n$  %1.$Command                                                       $\n$  %2.$Truncation                                                    $\n$  %3.$Action                                                        $\n$  %4.$Description                                                   $\n$\n)INIT\n &ZWINTTL = ''\n IF (&HTEXT01 = 'View')\n     &HTEXT02 = 'see'\n IF (&HTEXT01 = 'Update')\n     &HTEXT02 = 'modify'\n)PROC\n &ZIND = YES\n &ZSEL = TRANS(&ZCMD\n              1,ISPFCMH6\n              2,ISPFCMH7\n              3,ISPFCMH8\n              4,ISPFCMH9)\n .HHELP = ISPFCMH0\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMH6": {"ttr": 3859, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x00\\x05\\x00\\x99\\x17/\\x01\\x07\\x02_\\x18\\x00\\x00\\x1a\\x00\\x15\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "1999-06-21T00:00:00", "modifydate": "2007-01-25T18:00:05", "lines": 26, "newlines": 21, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHELP,ISR)\n/*-------------------------- ISPFCMH6 --------------------------------*/\n/*  HELP Panel for display of ISPF commands (ISPFCMDS)                */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*  - from panel ISPFCMD4 or ISPFCMD5.                                */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_) FORMAT(MIX)\n  @ TYPE(PT)\n  $ TYPE(NT)\n)BODY WINDOW(67,11) CMD()\n$                     @Help for Command                           $\n$\n$This field is the name of the command; (IBM call it the Verb).\n+ o$It must be from 2 to 8 characters long.\n+ o$The first character must be alphabetic (A-Z).\n$\n$(Any first character other than: %0123456789:;=> $would also work,\n$ but this dialog enforces the official IBM standard above).\n$\n$It is stored in column ZCTVERB of the command table.\n$\n)INIT\n &ZWINTTL = ''\n &ZHTOP = ISPFCMH5\n .HHELP = ISP00006\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMH7": {"ttr": 3861, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x12\\x00\\x13\\x00\\x99\\x17/\\x01\\x07\\x02_\\x18\\x00\\x00\\x1f\\x00\\x18\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.18", "flags": 0, "createdate": "1999-06-21T00:00:00", "modifydate": "2007-01-25T18:00:13", "lines": 31, "newlines": 24, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHELP,ISR)\n/*-------------------------- ISPFCMH7 --------------------------------*/\n/*  HELP Panel for display of ISPF commands (ISPFCMDS)                */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*  - from panel ISPFCMD4 or ISPFCMD5.                                */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_) FORMAT(MIX)\n  @ TYPE(PT)\n  $ TYPE(NT)\n)BODY WINDOW(69,16) CMD()\n$                       @Help for Trunc                             $\n$\n$This field is the minimum number of characters that must be entered\n$to invoke the command.  But note the following special cases:\n$\n+ o$If Trunc =%0$then the whole command name (Verb) is required to\n$     match.  Trunc = 0 is the default when a new command is created.\n+ o$If Trunc =%1$then at least%2$matching characters are required.\n$     If \"ISPF Commands\" tool is used to create/update a command, it\n$     will not allow Trunc = 1, it will set Trunc = 2 instead.\n+ o$If Trunc > length of the command name then it will never match.\n$     If \"ISPF Commands\" tool is used to create/update a command, it\n$     will not allow that, it will set Trunc = 0 instead.\n$\n$It is stored in column ZCTTRUNC of the command table.\n$\n)INIT\n  &ZWINTTL = ''\n  &ZHTOP = ISPFCMH5\n  .HHELP = ISP00006\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMH8": {"ttr": 3863, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x00!\\x00\\x993\\x8f\\x01\\x07\\x02_\\x18\\x00\\x00\"\\x00\\x1a\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "1999-12-04T00:00:00", "modifydate": "2007-01-25T18:00:21", "lines": 34, "newlines": 26, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHELP,ISR)\n/*-------------------------- ISPFCMH8 --------------------------------*/\n/*  HELP Panel for display of ISPF commands (ISPFCMDS)                */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*  - from panel ISPFCMD4 or ISPFCMD5.                                */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(|+_) FORMAT(MIX)\n  @ TYPE(PT)\n  $ TYPE(NT)\n)BODY WINDOW(69,18) CMD()\n$                      @Help for Action                           $\n$\n$This field defines what the command will do.\n$\n+ o$There are many possible action keywords, but most User commands\n$   have Actions using ISPF SELECT services like the following:\n$    | SELECT CMD(cmdname &&ZPARM) NEWAPPL(applid)\n$    | SELECT PGM(pgmname) PARM(parameters) SUSPEND\n$    | SELECT PANEL(pnlname) OPT(option) ADDPOP\n$\n+ o$When you use \"ISPF Commands\" tool to update an Action, it checks\n$   that it starts with a recognised keyword.  If the Action syntax\n$   has one of some common errors - it attempts to correct it.\n$\n+ o$The Action is stored in column ZCTACT of the command table.\n$\n$  @Press ENTER for a complete list of valid action keywords.\n$\n)INIT\n   &ZWINTTL = ''\n   &ZHTOP = ISPFCMH5\n   &ZCONT = ISP39314     /* standard IBM help panel for Actions */\n   .HHELP = ISP00006\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMH9": {"ttr": 4098, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x17\\x00)\\x00\\x99\\x17?\\x01\\x07\\x02_\\x18\\x00\\x00\\x1c\\x00\\x18\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.23", "flags": 0, "createdate": "1999-06-22T00:00:00", "modifydate": "2007-01-25T18:00:29", "lines": 28, "newlines": 24, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHELP,ISR)\n/*-------------------------- ISPFCMH9 --------------------------------*/\n/*  HELP Panel for display of ISPF commands (ISPFCMDS)                */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*  - from panel ISPFCMD4 or ISPFCMD5.                                */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_) FORMAT(MIX)\n  @ TYPE(PT)\n  $ TYPE(NT)\n)BODY WINDOW(60,13) CMD()\n$                   @Help for Description                  $\n$\n$This field briefly describes the purpose of the command.\n$\n+ o$The description is optional, but it is strongly\n$   recommended since it can make it easier to:\n$    a) recognize the command\n$    b) find it (using the 'F' command in \"ISPF Commands\")\n$\n+ o$It can be up to 80 characters in length.\n$\n+ o$It is stored in column ZCTDESC of the command table.\n$\n)INIT\n  &ZWINTTL = ''\n  &ZHTOP = ISPFCMH5\n  .HHELP = ISP00006\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCMO3": {"ttr": 4100, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x018\\x00U\\x00\\x98\\x16\\x0f\\x01\\x07\\x02_\\x18\\x03\\x00c\\x00F\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.56", "flags": 0, "createdate": "1998-06-09T00:00:00", "modifydate": "2007-01-25T18:03:55", "lines": 99, "newlines": 70, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRSPBC,ISR)\n/*-------------------------- ISPFCMO3 --------------------------------*/\n/*  Panel to display statistics of the active ISPF Command tables     */\n/*  - displayed by exec ISPFCMDS (\"ISPF Commands\" tool)   Version 7.0 */\n/*  - (this copy of ISPFCMD3 works with ISPF versions before 5.2)     */\n/*--------------------------------------------------------------------*/\n)ATTR DEFAULT(%+_)\n\u00ac TYPE(INPUT)  INTENS(HIGH) COLOR(RED)    PADC(_)     CAPS(ON)\n| TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW)\n~ TYPE(OUTPUT) INTENS(HIGH) COLOR(TURQ)   JUST(LEFT)  CAPS(OFF)\n\u00f3 TYPE(OUTPUT) INTENS(HIGH) COLOR(TURQ)   JUST(RIGHT) CAPS(OFF)\n# TYPE(OUTPUT) INTENS(LOW)  COLOR(GREEN)\n\u00a7 TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW) JUST(RIGHT)\n\u00df TYPE(OUTPUT) INTENS(HIGH) COLOR(RED)\n* TYPE(TEXT)   INTENS(HIGH) COLOR(YELLOW)\n$ TYPE(TEXT)   INTENS(HIGH) COLOR(TURQ)\n` TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)\n)BODY EXPAND(\u00d6\u00d6)\n+-\u00d6-\u00d6-*ISPF Commands+-\u00d6-\u00d6-\n+Command%==>_ZCMD                                       `Defined Command tables\n` These are the command tables active in the +\u00acZ$Application Id :|Z   +\n` current ISPF application.  ISPF searches   +\u00acZ$User table(s)  :|DT2A|DT2B|DT2C\n` them in the order they are shown below.    +\u00acZ~DESC3         $:|DT3A|DT3B|DT3C\n+                                            +\u00acZ~DESC4         $:|DT4A|DT4B|DT4C\n+ Table   No. of      Last Updated\n+ Name     Cmds   Date      Time     User      Dataset Name               Volume\n+-------- +----  ---------------------------  ----------------------------------\n)MODEL ROWS(ALL)\n\u00a7CMDTABL \u00f3Z   + #CMDDATE  #CMDTIME  #CMDUSER #CMDDSN                     #CMDVOL\n)INIT\n&ZCMD     = &Z\n.ZVARS = '(T1,ZAPPLID,T2,T3,T4,CMDROWS)'\n&CUR#TABS = '&T1,&T2,&T3,&T4'       /* the tables currently selected */\n.HELP = ISPFCMH4\nIf (&NOAPPL = YES)                  /* no Applid cmds table active   */\n    .ATTR(ZAPPLID) = 'COLOR(BLUE)'\n&DT2A  = &USERPREF\n&DT2B  = &USR2PREF\n&DT2C  = &USR3PREF\nIf (&ZAPPLID = &USERPREF OR &ZUCTPREF = &Z)\n    .ATTR(DT2A) = 'COLOR(BLUE)'\nIf (&ZAPPLID = &USR2PREF OR &ZUCTPRE2 = &Z)\n    .ATTR(DT2B) = 'COLOR(BLUE)'\nIf (&ZAPPLID = &USR3PREF OR &ZUCTPRE3 = &Z)\n    .ATTR(DT2C) = 'COLOR(BLUE)'\nIf (&ZSCTSRCH = B)                  /* variable from ISRCONFG module */\n    &DESC3 = 'Site table(s)'\n    &DT3A  = &SITEPREF              /* name of defined table prefix  */\n    &DT3B  = &SIT2PREF\n    &DT3C  = &SIT3PREF\n    &DESC4 = 'System table'\n    &DT4A  = 'ISP'\n    If (&ZAPPLID = &SITEPREF OR &ZSCTPREF = &Z)\n        .ATTR(DT3A) = 'COLOR(BLUE)'\n    If (&ZAPPLID = &SIT2PREF OR &ZSCTPRE2 = &Z)\n        .ATTR(DT3B) = 'COLOR(BLUE)'\n    If (&ZAPPLID = &SIT3PREF OR &ZSCTPRE3 = &Z)\n        .ATTR(DT3C) = 'COLOR(BLUE)'\nElse                                /* &ZSCTSRCH = A                 */\n    &DESC3 = 'System table'\n    &DT3A  = 'ISP'\n    &DESC4 = 'Site table(s)'\n    &DT4A  = &SITEPREF\n    &DT4B  = &SIT2PREF\n    &DT4C  = &SIT3PREF\n    If (&ZAPPLID = &SITEPREF OR &ZSCTPREF = &Z)\n        .ATTR(DT4A) = 'COLOR(BLUE)'\n    If (&ZAPPLID = &SIT2PREF OR &ZSCTPRE2 = &Z)\n        .ATTR(DT4B) = 'COLOR(BLUE)'\n    If (&ZAPPLID = &SIT3PREF OR &ZSCTPRE3 = &Z)\n        .ATTR(DT4C) = 'COLOR(BLUE)'\n&ZTDMARK = ' '\n)REINIT\nREFRESH(*)                          /* refresh all variables         */\n)PROC\nIf (&T1 \u00ac= &Z) &T1 = '/'\n    If (&NOAPPL = YES) &T1 = ' '    /* No Application command table  */\n    If (&ZAPPLID = 'ISP') &T1 = ' ' /* ISP is only the System table  */\n        If (&TB3 = ISP) &T3 = '/'\n        If (&TB4 = ISP) &T4 = '/'\nIf (&T2 \u00ac= &Z)\n    If (&ZUCTPREF = &Z) &T2 = ' '   /* No User table open            */\n    Else &T2 = '/'                  /* User table exists             */\n    If (&ZAPPLID = &ZUCTPREF)       /* Applid is same as User Table| */\n        &T1 = '/'\n        &T2 = ' '\nIf (&T3 \u00ac= &Z) &T3 = '/'\n    If (&TB3 = &ZSCTPREF)\n        If (&ZSCTPREF = &Z) &T3 = ' ' /* No Site table open          */\n        If (&ZAPPLID = &ZSCTPREF)   /* Applid is same as Site Table| */\n            &T1 = '/'\n            &T3 = ' '\nIf (&T4 \u00ac= &Z) &T4 = '/'\n    If (&TB4 = &ZSCTPREF)\n        If (&ZSCTPREF = &Z) &T4 = ' ' /* No Site table open          */\n        If (&ZAPPLID = &ZSCTPREF)   /* Applid is same as Site Table| */\n            &T1 = '/'\n            &T4 = ' '\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JSPCATAB": {"ttr": 4103, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00\"\\x01\\x03\\x04O\\x01\\x07\\x01\\x0f\\x19\\x04\\x01\\x0c\\x01\\x07\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "2003-02-13T00:00:00", "modifydate": "2007-01-10T19:04:22", "lines": 268, "newlines": 263, "modlines": 0, "user": "ZARBRO0"}, "text": "/*****************************> REXX <*********************************/\n/* JSPCATAB: Build keyword file for the active ISPF config table      */\n/*                                                                    */\n/* 1 Program LOADPNT used to find address of ISPCFIGU module.         */\n/* 2 Find standard IBM skeleton ISPCSKEL and use it to map the ISPF   */\n/*     configuration module ISPCFIGU and generate ASM statements.     */\n/* 3 If in DEBUG mode - invoke EDIT of generated ASM file.            */\n/* 4 Call exec JSPCCONV to convert ASM statements to keyword file.    */\n/*                                                                    */\n/* Created: 29 May 2002    by: Ron Brown                              */\n/* Updated: 10 Jan 2007    by: Ron Brown        Version: 2.0          */\n/**********************************************************************/\n  Trace O\n  Parse Upper Arg debug\n  numeric digits 20\n  Address ISPEXEC\n  skel = 'ISPCSKEL'      /* standard IBM skeleton in SISPSLIB library */\n\n  /*-------------------------------------------------------*/\n  /* Find location of ISPF configuration module in storage */\n  /*-------------------------------------------------------*/\n  pgm_addr = LOADPNT('ISPCFIGU')     /* get pgm load address    */\n  dec_addr = X2D(C2X(pgm_addr))\n  If dec_addr > 0 Then              /* if program is loaded .. */\n     offset = 0\n  Else Do\n     Call ISPF_MSG('No ISPCFIGU module found, ISPF is running with',\n                   'the default configuration.      ',\n                   'You can use option 1 to generate a default',\n                   'Keyword File.')\n     Exit 4\n     End\n\n  /*--------------------------------------------------------------*/\n  /* Load skeleton into 'inskel.' array, and allocate output file */\n  /*--------------------------------------------------------------*/\n  skel_rc = GET_SKELETON()       /* load skeleton into 'inskel.' */\n  If skel_rc > 0 Then Exit 4\n\n  asma_rc = ALLOC_OUTPUT()       /* allocate file for asm output */\n  If asma_rc > 0 Then Exit 4\n\n  /*----------------------------------------------------------*/\n  /* Process the skeleton, creating output in 'outasm.' array */\n  /*----------------------------------------------------------*/\n  j = 0\n  Do i = 1 To inskel.0\n     Select\n       When Left(inskel.i,3) = ')CM' Then Iterate  /* ignore comment */\n       When Word(inskel.i,1) <> 'DC' ,\n          & Word(inskel.i,2) <> 'DC' Then Do\n          j = j + 1\n          outasm.j = inskel.i\n          End\n       Otherwise Call PROCESS_DC\n       End\n     End\n\n  /*------------------------------------------------------*/\n  /* write output to disk, and (optionally) EDIT the file */\n  /*------------------------------------------------------*/\n  Address TSO \"EXECIO * DISKW ICONFASM (FINIS STEM outasm.\"\n  write_rc = rc\n  If write_rc <> 0 Then Do\n     Call ISPF_MSG('Unable to write assembler output file' asmout,\n                   '    return code =' write_rc)\n     End\n  Else If debug = 'DEBUG' Then   /* if DEBUG - edit assembler file */\n     Call EDIT_ASM_FILE\n\n  Address TSO \"FREE FILE(ICONFASM)\"\n\n  /*-------------------------------------------------------------*/\n  /* Call exec to convert the assembler source to a Keyword File */\n  /*-------------------------------------------------------------*/\n  If write_rc = 0 Then\n     Address TSO \"%JSPCCONV\" ispf_ver\n\n  Exit         /* That's all folks */\n\n\n  /*=================================================================*/\n  /* setup an ISPF (long) message                                    */\n  /*-----------------------------------------------------------------*/\n ISPF_MSG:\n   Parse Arg ZERRLM\n   ZERRSM   = ''\n   ZERRALRM = 'YES'\n   ZERRHM   = '*'\n   \"SETMSG MSG(ISRZ002)\"\n   Return\n\n  /*=================================================================*/\n  /* load the skeleton into array inskel.                            */\n  /*-----------------------------------------------------------------*/\n GET_SKELETON:\n  \"FTOPEN TEMP\"                /* output -> DDNAME in ZTEMPN variable */\n  \"FTINCL\" skel \"NOFT\" /* no variable susbstitution or interpretation */\n  incl_rc = rc\n  \"FTCLOSE\"\n  If incl_rc > 0 Then Do\n     Call ISPF_MSG('Unable to read' skel 'skeleton.  FTINCL',\n                   'return code =' incl_rc )\n     Return incl_rc\n     End\n  \"VGET ZTEMPN\"\n  Address TSO \"EXECIO * DISKR\" ZTEMPN \"(FINIS STEM inskel.\"\n  read_rc = rc\n  If read_rc <> 0 Then\n     Call ISPF_MSG('Unable to read' skel 'skeleton. EXECIO rc='read_rc)\n  Else If inskel.0 = 0 Then Do\n     Call ISPF_MSG('The' skel 'skeleton is empty; unable to continue')\n     read_rc = 4\n     End\n  Select    /* relating the skeleton to an ISPF version */\n    When inskel.0 = 448 Then ispf_ver = '4.8'  /* OS/390 2.8          */\n    When inskel.0 = 480 Then ispf_ver = '5.0'  /* OS/390 2.10         */\n    When inskel.0 = 490 Then ispf_ver = '5.2'  /* ISPF 5.2 - z/OS 1.2 */\n    When inskel.0 = 494 Then ispf_ver = '5.2+' /* ISPF 5.2 - z/OS 1.4 */\n    When inskel.0 = 517 Then ispf_ver = '5.5'  /* ISPF 5.5 - z/OS 1.5 */\n    When inskel.0 = 533 Then ispf_ver = '5.6'  /* ISPF 5.6 - z/OS 1.6 */\n    When inskel.0 = 543 Then ispf_ver = '5.7'  /* ISPF 5.7 - z/OS 1.7 */\n    When inskel.0 > 543 Then ispf_ver = '5.8'  /* ISPF 5.8 - z/OS 1.8 */\n    Otherwise\n       ispf_ver = '4.5'\n    End\n\n  Return read_rc\n\n  /*=================================================================*/\n  /* edit the generated assembler file (matching ISPFIGU module)     */\n  /*-----------------------------------------------------------------*/\n EDIT_ASM_FILE:\n  \"CONTROL REFLIST NOUPDATE\"\n  \"LMINIT DATAID(data1) DATASET(\"zcnvsrce\")\"\n  IF ZERRMSG <> 'ZERRMSG' Then\n     \"SETMSG MSG(ZERRMSG)\"\n  Else Do\n     \"EDIT DATAID(\"data1\") MEMBER(\"zcnvsrcm\")\"\n     \"LMFREE DATAID(\"data1\")\"\n     End\n  \"CONTROL REFLIST UPDATE\"\n  Return\n\n  /*=================================================================*/\n  /* allocate output file (assembler mapping of the active table)    */\n  /*-----------------------------------------------------------------*/\n ALLOC_OUTPUT:\n  \"VGET (ZCNVSRCE ZCNVSRCM) PROFILE\"\n  If zcnvsrcm <> '' Then\n    If Left(zcnvsrce,1) = \"'\" Then\n      asmout = Strip(zcnvsrce,'T',\"'\")\"(\"zcnvsrcm\")'\"\n    Else\n      asmout = zcnvsrce\"(\"zcnvsrcm\")\"\n  Else\n    asmout = zcnvsrce\n  exists = Sysdsn(asmout)\n  If exists = 'OK' | exists = 'MEMBER NOT FOUND'\n     Then alloc_info = \"SHR\"\n     Else alloc_info = \"NEW UNIT(SYSDA) SPACE(1 1) TRACKS RECFM(F B)\",\n                      \"LRECL(80) DSORG(PS)\"\n\n  Address TSO \"ALLOC FILE(ICONFASM) DSN(\"asmout\")\" alloc_info \"REUSE\"\n  alloc_rc = rc\n  If alloc_rc > 0 Then\n     Call ISPF_MSG('Unable to allocate assembler output file',\n                   asmout '               ',\n                   \"ALLOC FILE(\"skel\") DSN('\"lib\"(\"skel\")') SHR REU\" v)\n\n  Return alloc_rc\n\n  /*=================================================================*/\n  /* process an assembler DC statement                               */\n  /*-----------------------------------------------------------------*/\n PROCESS_DC:\n  j = j + 1\n  Parse Var inskel.i defn '&' .\n  Parse Var inskel.i ' DC' type .\n  Select\n    /*---------*/\n    /* ADDRESS */\n    /*---------*/\n    When Left(type,1) = 'A' Then Do\n       Parse Var type 'AL' leng '(' rest\n       chars = GET_STOR()\n       dec = X2D(C2X(chars))\n       newdef = 'AL'leng\"(\"dec\")                 \"\n       dpos = Pos('  AL',inskel.i) + 2\n       End\n    /*-----------*/\n    /* CHARACTER */\n    /*-----------*/\n    When Left(type,1) = 'C' Then Do\n       Parse Var type 'CL' leng '&' rest\n       Parse Var leng leng \"'\" .\n       chars = GET_STOR()\n       chars = Strip(chars,'T')         /* remove trailing blanks */\n       If chars = ' ' Then chars = ' '  /* for long blank strings */\n       qpos = Pos(\"'\",chars)            /* double any quotes: ' */\n       If qpos > 0 Then Do until qpos = 0\n          chars = Left(chars,qpos)||Substr(chars,qpos)\n          qpos = Pos(\"'\",chars,qpos+2)\n          End\n       apos = Pos(\"&\",chars)            /* double any ands: & */\n       If apos > 0 Then Do until apos = 0\n          chars = Left(chars,apos)||Substr(chars,apos)\n          apos = Pos(\"'\",chars,apos+2)\n          End\n       newdef = 'CL'leng\"'\"chars\"'                 \"\n       dpos = Pos('  CL',inskel.i) + 2\n       End\n    /*----------*/\n    /* FULLWORD */\n    /*----------*/\n    When Left(type,1) = 'F' Then Do\n       If Substr(type,2,1) = 'L'\n          Then Parse Var type 'FL' leng '&' rest\n          Else leng = 4\n       remain = offset // leng\n       If remain > 0 Then offset = offset + leng - remain\n       chars = GET_STOR()\n       dec = X2D(C2X(chars))\n       If leng = 4\n          Then newdef = \"F'\"dec\"'        \"\n          Else newdef = \"FL\"leng\"'\"dec\"'        \"\n       dpos = Pos('  F',inskel.i) + 2\n       End\n    /*----------*/\n    /* HALFWORD */\n    /*----------*/\n    When Left(type,1) = 'H' Then Do\n       leng = 2\n       chars = GET_STOR()\n       dec = X2D(C2X(chars))\n       newdef = \"H'\"dec\"'       \"\n       dpos = Pos('  H',inskel.i) + 2\n       End\n    /*-------------*/\n    /* HEXIDECIMAL */\n    /*-------------*/\n    When Left(type,1) = 'X' Then Do\n       Parse Var type 'XL' leng '&' rest\n       chars = GET_STOR()\n       hex = C2X(chars)\n       newdef = 'XL'leng\"'\"hex\"'                 \"\n       dpos = Pos('  XL',inskel.i) + 2\n       End\n    /*-------------------------------*/\n    /* All the rest remain unchanged */\n    /*-------------------------------*/\n    Otherwise\n       outasm.j = defn\n       Return\n    End\n  /*---------------------------------------------*/\n  /* Update the line with the value from storage */\n  /*---------------------------------------------*/\n  outasm.j = Overlay(newdef,inskel.i,dpos)\n  offset = offset + leng   /* point offset to next field in storage */\n  Return\n\n  /*=================================================================*/\n  /* get the required bytes from storage                             */\n  /*-----------------------------------------------------------------*/\n GET_STOR:\n   addr = D2X(dec_addr + offset)\n   chars = Storage(addr,leng)\n   Return chars\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JSPCCONF": {"ttr": 4108, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x19\\x01\\x02\\x14\\x9f\\x01\\x07\\x01\\x0f\\x19\\x05\\x01\\xe0\\x01\\xc4\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "2002-05-29T00:00:00", "modifydate": "2007-01-10T19:05:19", "lines": 480, "newlines": 452, "modlines": 0, "user": "ZARBRO0"}, "text": "/*REXX****************************************************************/\n/* EXEC NAME := JSPCCONF (based on IBM exec: ISPCCONF from ISPF 5.7) */\n/*                                                                   */\n/* DESCRIPTIVE_NAME := Configuration table main driver               */\n/*                                                                   */\n/* FUNCTION  = Main driver exec for the configuration table dialog   */\n/*                                                                   */\n/* $M1= CONLEY  z/OSR5  06/19/2001 020136:  Force ISPCCONF to run    */\n/*  under application id ISR                                         */\n/* $01=OA09639 2004/11/04 HO: Debug not passed on recursion          */\n/*-------------------------------------------------------------------*/\n/* MODIFICATIONS (for \"Extended ISPF Configuration Utility\"):        */\n/*    1) use panel JSPPCONF  (instead of IBM panel: ISPPCONF)        */\n/*    2) add extra option 0, to invoke %JSPCATAB                     */\n/*    3) change option 5, to invoke %JSPCCONV                        */\n/*                                                                   */\n/* Last Updated: 10 Jan 2007      by: Ron Brown        Version: 2.0  */\n/*********************************************************************/\nTrace o\nParse Upper Arg debug\nAddress ispexec\n'VGET (ZAPPLID) SHARED'                                       /* @M1A*/\nIf zapplid \u00ac= 'ISR' Then                                      /* @M1A*/\n  Do                                                          /* @M1A*/\n    'SELECT CMD(ISPCCONF 'debug') NEWAPPL(ISR)'               /* @01C*/\n    Exit                                                      /* @M1A*/\n  End                                                         /* @M1A*/\n'CONTROL ERRORS RETURN'\n'VGET (ZCNVSRCE ZCNVSRCM ZCNVKWD ZCNVKWD2 ZCNVOPT) PROFILE'\n'VGET (ZCNVLOAD ZCNVOBJ) PROFILE'\nm = ''\nc = 'ZCMD'\nlocal_zcmd = ''\ndsrc = 0\ndisplay_rc = 0\ndisplay_rc2 = 0\nDo While display_rc = 0\n  If m \u00ac= ' ' Then\n    msg = 'MSG('m')'\n  Else\n    msg = ''\n  If dsrc > 0 Then\n    zcmd = local_zcmd\n  'DISPLAY PANEL(JSPPCONF)' msg 'CURSOR('c')'        /** Ron **/\n  display_rc = rc\n  m = ''\n  c = 'ZCMD'\n  local_zcmd = zcmd\n  zcmd = ''\n  dsrc = 0\n  If display_rc = 0 Then\n    Do\n      'VPUT (ZCNVSRCE ZCNVSRCM ZCNVKWD ZCNVKWDM ZCNVOPT) PROFILE'\n      Select\n        When local_zcmd = ' ' Then\n          m = 'ISRU292 '\n        /* ---- start of lines added by Ron ----------------------- */\n        When local_zcmd = 0 Then\n          Do\n            m = 'ISPC255'\n            If zcnvsrce = '' Then Do    /* no file name specified */\n               zuser = Userid()\n               If Sysvar(SYSPREF) <> zuser & Sysvar(SYSPREF) <> '' Then\n                  zuser = Sysvar(SYSPREF)||'.'||zuser\n               zcnvsrce = \"'\"zuser\".JSPCCONF.ASM'\"\n               'VPUT (ZCNVSRCE) PROFILE'\n            End\n            Address TSO '%JSPCATAB' debug\n            If rc > 0 Then\n              m = 'ISPC256'\n            'VGET (ZCNVCSR) PROFILE'\n            c = zcnvcsr\n          End\n        /* ---- end of lines added by Ron ------------------------- */\n        When local_zcmd = 1 Then\n          Do\n            m = 'ISPC250'\n            Call verify_keyword_file\n            If dsrc = 0 Then\n              Do\n                c = 'ZCMD'\n                Address TSO ispcmod\n                dsrc = rc\n                'VGET (ZCNVOUTN) SHARED'\n                If dsrc > 0 Then\n                  m = ''\n                If dsrc = 4 Then\n                  dsrc = 0\n              End\n          End\n        When local_zcmd = 2 Then\n          Do\n            m = 'ISPC271'\n            Call verify_keyword_file\n            If dsrc = 0 Then\n              Do\n                c = 'ZCMD'\n                'CONTROL REFLIST NOUPDATE'\n                \"LMINIT DATASET(\"zcnvkwd\") DATAID(DATA1)\"\n                'CONTROL REFLIST UPDATE'\n                \"EDIT DATAID(\"data1\") MEMBER(\"zcnvkwdm\")\",\n                      \"PANEL(ISPCEDIT)\"\n                e_rc = rc\n                \"LMFREE DATAID(\"data1\")\"\n                If e_rc = 0 Then\n                  Do\n                    'ADDPOP'\n                    'DISPLAY PANEL(ISPPVERQ)'\n                    ver_rc = rc\n                    'REMPOP'\n                    If ver_rc = 0 Then\n                      Do\n                        Address TSO ispcverf\n                        dsrc = rc\n                        Address ISPEXEC 'VGET (ZKWD) SHARED'\n                        If dsrc > 0 Then\n                          m = 'ISPC272'\n                      End\n                    Else\n                      m = 'ISPC273'\n                  End\n                Else\n                  Do\n                    m = ''\n                    If e_rc > 4 Then\n                      'SETMSG MSG(ISRZ002)'\n                  End\n              End\n          End\n        When local_zcmd = 3 Then\n          Do\n            m = 'ISPC251'\n            Call verify_keyword_file\n            If dsrc = 0 Then\n              Do\n                c = 'ZCMD'\n                Address TSO ispcverf\n                dsrc = rc\n                If dsrc > 0 Then\n                  m = 'ISPC252'\n              End\n          End\n        When (local_zcmd = 4 | local_zcmd = 6) Then\n          Do\n            If local_zcmd = 4 Then\n              Do\n                zcnvtype = 'LOAD'\n                build_panel = 'ISPPBLD'\n                'VGET (ZCNVLOAD ZCNVOBJ ZCNVKWD) PROFILE'\n                'VGET (ZCNVMEM ZCNVMEM2 ZCNVKWDM) PROFILE'\n              End\n            Else\n              Do\n                zcnvtype = 'SMPE'\n                build_panel = 'ISPPSMP'\n                'VGET (ZCNVKWD ZCNVKWDM ZCNVSMPE ZCNVFMID) PROFILE'\n                'VGET (ZCNVSMID ZCNVSSRC ZCNVSLOD) PROFILE'\n                'VGET (ZCNVSUP1 ZCNVDSRC ZCNVDLOD) PROFILE'\n                'VGET (ZCNVSUP2 ZCNVSUP3 ZCNVSUP4) PROFILE'\n              End\n            dsrc = 0\n            Do Until dsrc = 0 | display_rc2 > 0\n              dsrc = 0\n              If m \u00ac= ' ' Then\n                msg = 'MSG('m')'\n              Else\n                msg = ''\n              'ADDPOP'\n              'DISPLAY PANEL('build_panel')' msg 'CURSOR('c')'\n              display_rc2 = rc\n              'REMPOP'\n              m = ''\n              c = 'ZCMD'\n              If display_rc2 = 0 Then\n                Do\n                  If zcnvtype = 'LOAD' Then\n                    Do\n                    'VPUT (ZCNVLOAD ZCNVOBJ ZCNVKWD) PROFILE'\n                    'VPUT (ZCNVMEM ZCNVMEM2 ZCNVKWDM) PROFILE'\n                    End\n                  Else\n                    Do\n                    'VPUT (ZCNVKWD ZCNVKWDM ZCNVSMPE ZCNVFMID) PROFILE'\n                    'VPUT (ZCNVSMID ZCNVSSRC ZCNVSLOD) PROFILE'\n                    'VPUT (ZCNVSUP1 ZCNVDSRC ZCNVDLOD) PROFILE'\n                    'VPUT (ZCNVSUP2 ZCNVSUP3 ZCNVSUP4) PROFILE'\n                    End\n                  Call verify_keyword_file\n                  If dsrc = 0 & zcnvtype = 'LOAD' Then\n                    Call verify_load_datasets\n                  If dsrc = 0 & zcnvtype = 'SMPE' Then\n                    Call verify_smp_dataset\n                  If dsrc = 0 Then\n                    Do\n                      c = 'ZCMD'\n                      Address TSO ispcverf\n                      dsrc = rc\n                      If dsrc = 0 Then\n                        Do\n                          Address TSO ispcbld zcnvtype debug\n                          dsrc = rc\n                          Select\n                            When dsrc = 0 Then\n                              m = 'ISPC265'\n                            When dsrc = 1 Then\n                              Do\n                                m = 'ISPC253'\n                                dsrc = 0\n                              End\n                            When dsrc = 2 Then\n                              Do\n                                m = 'ISPC294'\n                                dsrc = 0\n                              End\n                            When dsrc < 8 Then  /* catches 4 & 5 */\n                              Do\n                                If zcnvmem = '' Then\n                                  zcnvmod1 = 'ISPCFIGU'\n                                Else\n                                  zcnvmod1 = zcnvmem\n                                If zcnvmem2 = '' Then\n                                  zcnvmod2 = 'ISPCFIGV'\n                                Else\n                                  zcnvmod2 = zcnvmem2\n                                If dsrc = 4 Then\n                                  m = 'ISPC264'\n                                Else\n                                  m = 'ISPC260'\n                                dsrc = 0\n                              End\n                            When dsrc = 8 Then\n                              Do\n                                If zcnvmem = '' Then\n                                  zcnvmod = 'ISPCFIGU'\n                                Else\n                                  zcnvmod = zcnvmem\n                                m = 'ISPC254'\n                              End\n                            When dsrc = 9 Then\n                              Do\n                                If zcnvmem2 = '' Then\n                                  zcnvmod = 'ISPCFIGV'\n                                Else\n                                  zcnvmod = zcnvmem2\n                                m = 'ISPC254'\n                              End\n                            When dsrc = 10 Then\n                              Do\n                                m = 'ISPC234'\n                              End\n                            Otherwise\n                              Nop\n                          End   /* end select ISPCBLD msg */\n                        End  /* end call ISPCBLD */\n                      Else\n                        m = 'ISPC252'\n                    End\n                End\n            End\n          End\n        When local_zcmd = 5 Then\n          Do\n            m = 'ISPC255'\n            Call verify_old_config\n            If dsrc = 0 Then\n              Call verify_keyword_file\n            If dsrc = 0 Then\n              Do\n                If notfound = 0 Then\n                  Do\n                    'ADDPOP'\n                    'DISPLAY PANEL(ISPPCONQ)'\n                    qrc = rc\n                    'REMPOP'\n                  End\n                Else\n                  qrc = 0\n                If qrc = 0 Then\n                  Do\n                    Address TSO JSPCCONV /* ispcconv -> jspcconv, Ron */\n                    If rc > 0 Then\n                      m = 'ISPC256'\n                    'VGET (ZCNVCSR) PROFILE'\n                    c = zcnvcsr\n                  End\n                Else\n                  m = ''\n              End\n          End\n        Otherwise\n          m = 'ISPD241'\n      End\n    End\nEnd\nExit\n/* */\nverify_old_config:\n/* Check source data set */\nc = 'ZCNVSRCE'\nIf pos('(',zcnvsrce) > 0 Then\n  Do\n    'SETMSG MSG(ISPC282)'\n    dsrc=4\n  End\nIf dsrc = 0 Then\n  Do\n    'CONTROL REFLIST NOUPDATE'\n    'LMINIT DATAID(AA) ENQ(SHR) DATASET('zcnvsrce')'\n    dsrc=rc\n    'CONTROL REFLIST UPDATE'\n    If dsrc=0 Then\n      Do\n        'LMOPEN DATAID('aa') OPTION(INPUT) ORG(ORG)'\n        dsrc=rc\n        If dsrc = 0 Then\n          If org = 'PO' Then\n            If zcnvsrcm \\= '' Then\n              Do\n                If dsrc=0 Then\n                  'LMMFIND DATAID('aa') MEMBER('zcnvsrcm') STATS(NO)'\n                dsrc=rc\n                If dsrc = 8 Then\n                  c = 'ZCNVSRCM'\n              End\n            Else\n              Do\n                c = 'ZCNVSRCM'\n                'SETMSG MSG(ISRU007)'\n                dsrc=4\n              End\n          Else\n            If zcnvsrcm \\= '' Then\n              Do\n                c = 'ZCNVSRCM'\n                'SETMSG MSG(ISRG081)'\n                dsrc=4\n              End\n        Else\n          Nop\n      End\n  End\nIf dsrc>7 Then\n  'SETMSG MSG(ISRZ002)'\n'LMFREE DATAID('aa')'\nReturn\n/* */\nverify_keyword_file:\n/* Check target data set */\nnotfound = 0\nc = 'ZCNVKWD'\nIf pos('(',zcnvkwd) > 0 Then\n  Do\n    'SETMSG MSG(ISPC282)'\n    dsrc=4\n  End\nIf dsrc = 0 Then\n  Do\n    'CONTROL REFLIST NOUPDATE'\n    'LMINIT DATAID(BB) ENQ(SHR) DATASET('zcnvkwd')'\n    dsrc=rc\n    'CONTROL REFLIST UPDATE'\n    If dsrc=0 Then\n      Do\n        'LMOPEN DATAID('bb') OPTION(INPUT) ORG(ORG) LRECL(LRECL)'\n        dsrc = rc\n        If dsrc = 0 Then\n          If org \u00ac= 'PO' | lrecl < 251 Then\n            Do\n              'SETMSG MSG(ISPC268)'\n              dsrc=4\n            End\n          Else\n            If zcnvkwdm = '' Then\n              Do\n                c = 'ZCNVKWDM'\n                'SETMSG MSG(ISRU007)'\n                dsrc=4\n              End\n            Else\n              Do\n                'LMMFIND DATAID('bb') MEMBER('zcnvkwdm') STATS(NO)'\n                dsrc = rc\n                If dsrc = 8 Then\n                  If (local_zcmd = 1 | local_zcmd = 5) Then\n                    Do\n                      notfound = 1\n                      dsrc = 0\n                    End\n                  Else\n                    c = 'ZCNVKWDM'\n              End\n      End\n  End\nIf dsrc>7 Then\n  'SETMSG MSG(ISRZ002)'\n'LMFREE DATAID('bb')'\n'VPUT (NOTFOUND) SHARED'\nReturn\n/* */\nverify_smp_dataset:\n/* Check target data set for USERMOD */\nc = 'ZCNVSMPE'\nIf pos('(',zcnvsmpe) > 0 Then     /* included member name */\n  Do\n    'SETMSG MSG(ISPC297)'\n    dsrc=4\n  End\nIf dsrc = 0 Then\n  Do\n    'CONTROL REFLIST NOUPDATE'\n    'LMINIT DATAID(DD) ENQ(SHR) DATASET('zcnvsmpe')'\n    dsrc=rc\n    'CONTROL REFLIST UPDATE'\n    If dsrc=0 Then\n      Do\n        'LMOPEN DATAID('dd') OPTION(INPUT) ORG(ORG) LRECL(LRECL)',\n        'RECFM(smpfm)'\n        dsrc = rc\n        If dsrc = 0 Then\n          If org \u00ac= 'PO' | lrecl \u00ac= 80 | smpfm \u00ac= 'FB' Then\n            Do\n              'SETMSG MSG(ISPC298)'\n              dsrc=4\n            End\n      End\n  End\nIf dsrc > 7 Then\n  'SETMSG MSG(ISRZ002)'\n'LMFREE DATAID('dd')'\n'VPUT (NOTFOUND) SHARED'\nReturn\n/* */\nverify_load_datasets:\n/* Check load data set */\nc = 'ZCNVLOAD'\nret=listdsi(zcnvload) /* Check for existance of data set*/\nParse Var zcnvload before'('member')'after\n'CONTROL REFLIST NOUPDATE'\n'LMINIT DATAID(CC) ENQ(SHR) DATASET('before||after')'\ndsrc=rc\n'CONTROL REFLIST UPDATE'\nIf dsrc=0 Then\n  Do\n    'LMOPEN DATAID('cc') OPTION(INPUT) ORG(ORG)'\n    dsrc = rc\n    If dsrc = 0 & member \u00ac= '' Then\n      Do\n         'SETMSG MSG(ISPC257)'\n         dsrc=4\n      End\n  End\nIf dsrc>7 Then\n  'SETMSG MSG(ISRZ002)'\n'LMFREE DATAID('cc')'\nIf dsrc = 0 & zcnvobj \u00ac= '' Then\n  Do\n    /* Check object data set */\n    c = 'ZCNVOBJ'\n    ret=listdsi(zcnvobj) /* Check for existance of data set*/\n    Parse Var zcnvobj before'('member')'after\n    'CONTROL REFLIST NOUPDATE'\n    'LMINIT DATAID(CC) ENQ(SHR) DATASET('before||after')'\n    dsrc=rc\n    'CONTROL REFLIST UPDATE'\n    If dsrc=0 Then\n      Do\n        'LMOPEN DATAID('cc') OPTION(INPUT) ORG(ORG)'\n        dsrc = rc\n        If dsrc = 0 & member \u00ac= '' Then\n          Do\n             'SETMSG MSG(ISPC257)'\n             dsrc=4\n          End\n      End\n    If dsrc>7 Then\n      'SETMSG MSG(ISRZ002)'\n    'LMFREE DATAID('cc')'\n  End\nReturn\n        /*  5694-A01 (C) COPYRIGHT IBM CORP. 1999, 2004 */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JSPCCONV": {"ttr": 4359, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x1b\\x00'\\x01\\x06\\x04_\\x01\\x07\\x01\\x0f\\x19\\t\\x05\\x12\\x04\\x1e\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@\"", "ispf": {"version": "01.27", "flags": 0, "createdate": "2006-02-14T00:00:00", "modifydate": "2007-01-10T19:09:27", "lines": 1298, "newlines": 1054, "modlines": 0, "user": "ZARBRO0"}, "text": "/*REXX****************************************************************/\n/*                                                                   */\n/* EXEC NAME := JSPCCONV (based on IBM exec: ISPCCONV from ISPF 5.0) */\n/*                                                                   */\n/* Modified to accept assembler input from all ISPF versions from    */\n/* 4.8 to 5.7 and create a keyword output file for the desired ISPF  */\n/* version (which defaults to the current version).                  */\n/*                                                                   */\n/* This is invoked by \"Exended ISPF Configuration Utility\" option 5  */\n/* and the new option 0 (to generate an assembler source and keyword */\n/* file from the ACTIVE configuration module ISPCFIGU).              */\n/* Then %JSPCATAB invokes this: %JSPCCONV ispfver                    */\n/*                                                                   */\n/* Created: 28 May 2002    by: Ron Brown                             */\n/* Updated: 07 Jan 2007    by: Ron Brown        Version: 2.0         */\n/*********************************************************************/\n/* DESCRIPTIVE_NAME := Configuration table conversion routine        */\n/*                                                                   */\n/* FUNCTION  = Converts configuration table assembler file into      */\n/*             keyword format used in ISPF for OS/390 R8 and later.  */\n/*                                                                   */\n/* NOTES = none                                                      */\n/*                                                                   */\n/* INPUT := Configuration table assembler source                     */\n/*                                                                   */\n/* OUTPUT := Configuration table flat file.                          */\n/*                                                                   */\n/*********************************************************************/\nTrace o\narg ispfver                      /* get ISPF version (from JSPCATAB) */\naddress ispexec\nexec_rc = 0\n'VGET (ZCNVSRCE ZCNVSRCM ZCNVKWD ZCNVKWDM ZCNVOPT) PROFILE'\nzcnvcsr = 'ZCMD'\ncall convert\nexit exec_rc\n\n/* Convert: Main processing logic **********************************/\nconvert:\naddress tso\ncall initialize_variables\nIf exec_rc = 0 Then\n  call initialize_files\nIf exec_rc = 0 Then\n  call create_header\nIf exec_rc = 0 Then\n  call get_values_from_asm_source\nIf exec_rc = 0 Then\n  call get_default_values\nIf exec_rc = 0 Then\n  call rectify_differences\nIf exec_rc = 0 Then\n  Do\n    If (zcnvopt = 'ALL' ) Then\n      Do\n        aa = lastgroup + 1\n        If grouptitle.aa \u00ac= '' Then\n          Do aaa = aa to groups\n            call addline '/*'copies('-',68)\n            call addline('/*'center(grouptitle.aaa,68)'*/')\n            call addline '/*'copies('-',68)\n            aa = aa + 1\n          End\n      End\n  End\nIf exec_rc = 0 Then\n  call view_output\nx = msg('OFF')\n'FREE F(OUTFILE INFILE)'\nx = msg('ON')\nreturn\n\n/* Initialize_Files: Allocate input and output and read isrcnfig ***/\n\ninitialize_files:\n  call msg 'ON'\n  /* Allocate assembler input                                        */\n  If zcnvsrcm \u00ac= '' Then\n    If substr(zcnvsrce,1,1) = \"'\" Then\n      srcname = \"'\"strip(zcnvsrce,'B',\"'\")\"(\"zcnvsrcm\")'\"\n    Else\n      srcname = strip(zcnvsrce,'B',\"'\")\"(\"zcnvsrcm\")\"\n  Else\n    srcname = zcnvsrce\n  'ALLOC F(INFILE) DA('srcname') SHR REU'\n  If rc > 0 Then\n    Do\n      exec_rc = 8\n      Address ISPEXEC 'SETMSG MSG(ISPC269)'\n    End\n  If exec_rc = 0 Then\n    Do\n      /* Read assembler file into a stem variable                    */\n      'EXECIO * DISKR INFILE (FINIS STEM CONFIG.'\n      If rc > 0 Then\n        Do\n          exec_rc = 8\n          Address ISPEXEC 'SETMSG MSG(ISPC270)'\n        End\n      If config.0 = 0 Then\n        Do\n          exec_rc = 8\n          Address ISPEXEC 'SETMSG MSG(ISPC286)'\n        End\n    End\n  Do qq = 1 to config.0 while substr(config.qq,1,1) = '*'\n  End\n  If pos('ISPCFIGU CSECT',config.qq) = 0 ,               /* Ron */\n   & pos('ISRCONFG CSECT',config.qq) = 0 Then\n    Do\n      exec_rc = 8\n      Address ISPEXEC 'SETMSG MSG(ISPC287)'\n      'FREE FI(INFILE)'\n    End\n  If exec_rc = 0 Then\n    Do\n      If substr(zcnvkwd,1,1) = \"'\" Then\n        kwdname = \"'\"strip(zcnvkwd,'B',\"'\")\"(\"zcnvkwdm\")'\"\n      Else\n        kwdname = strip(zcnvkwd,'B',\"'\")\"(\"zcnvkwdm\")\"\n      zkwd = kwdname\n      Address ISPEXEC 'VPUT (ZKWD) SHARED'\n      'ALLOC F(OUTFILE) REUSE SHR DA('kwdname')'\n      If rc > 0 Then\n        Do\n          exec_rc = 8\n          Address ISPEXEC 'SETMSG MSG(ISPC261)'\n          'FREE FI(INFILE)'\n        End\n    End\nreturn\n\n/* Get_Default_Values: Read old and new names and defaults from ****/\n/*                     The comments in this exec (See below) *******/\n/*                     And place in stem variable defaults.  *******/\n\nget_default_values: procedure expose defaultlines defaults. oldnames ,\n                                     groups group. grouptitle. maxlen.\n  a = 1\n  defaultlines= 0\n  defaults.='??';\n  oldnames=''\n  inlist='NO'\n  do until substr(line,1,5)='**END'\n     line = translate(sourceline(a))\n     If substr(line,1,8)='        ' | ,        /* Shift if    OW40528*/\n        datatype(substr(line,1,8),'N')=1 Then  /* blank or    OW40528*/\n        line=delstr(line,1,8)                  /* line num    OW40528*/\n     if inlist='NO' & substr(line,1,7)='/*START' then\n       inlist='YES'\n     if inlist='YES' & substr(line,1,7)='**END' then\n       inlist='NO '\n     if inlist = 'YES' & substr(line,1,2)\u00ac='/*' then\n       do\n         parse var line oldname title\n         if oldname ='*GROUP' then\n           do\n             groups = groups + 1\n             grouptitle.groups = space(title)\n           end\n         else\n           do\n             parse var title title '=' .\n             maxlen.groups=max(maxlen.groups,length(space(title))+2)\n             oldnames=oldnames oldname\n             defaultlines=defaultlines+1\n             group.defaultlines = groups\n             defaults.defaultlines=space(line)\n           end\n       end\n     a=a+1\n  end\n  return\n\n/* Get_Values_From_Asm_Source: Parse assembler source into *********/\n/*                              Stem variable configname.  *********/\n\nget_values_from_asm_source: procedure expose configname. config. ,\n                            continue\n  configname.='??'\n  do a = 1 to config.0\n    parse upper var config.a cname dc cvalue comment\n    if dc = 'DC' then\n      do\n        type=substr(cvalue,1,1)\n        select\n          when(type='C') then parse var config.a \"'\"cvalue\"' \" ./*Ron*/\n          when(type='F') then parse var cvalue . \"'\"cvalue\"'\" .\n          when(type='A') then parse var cvalue . \"(\"cvalue\")\" .\n          when(type='H') then parse var cvalue . \"'\"cvalue\"'\" .\n          when(type='X') then parse var cvalue . \"'\"cvalue\"'\" . /*Ron*/\n          otherwise nop\n        end\n        cvalue=remove_double_ampersands(cvalue)\n        line=cname cvalue\n        configname.cname=line\n      end\n    if substr(config.a,72,1)\u00ac=' ' then /* If continuation in col 72*/\n      continue = 1                     /* Mark for a later message */\n  end\n  return\n\n/* Rectify_Differences: Compare isrconfg with defaults and create **/\n/*                      Lines to be written to the output file *****/\nrectify_differences:\n  dlen=0;\n  do pass = 1 to 3\n    lastgroup=0\n    do a = 1 to defaultlines\n      parse upper value defaults.a with oldname newname'='default\n  /* start of new lines added by Ron -----------------------------*/\n      /* new fields added with ISPF 5.7 */\n      old57 = 'ZSETSSD ZSETUID PDFDLIBD'\n      if ispfver < '5.7' & wordpos(oldname,old57) > 0 then\n         iterate\n      /* new fields added with ISPF 5.6 */\n      old56 = 'PDFDPDSE PDFDPDSP PDFDPDSF PDFDPDSR PDFC0BLK',\n              'PDFCT0PQ PDFCT0SQ PDFLSXPQ PDFLSXSQ PDFC0LRC'\n      if ispfver < '5.6' & wordpos(oldname,old56) > 0 then\n         iterate\n      /* new fields added with ISPF 5.5 */\n      old55 = 'PDFDSML PDFDSMLF PDFDSMIN PDFDSMAX PDFDSCVR',\n              'USR2CMDS USR3CMDS SIT2CMDS SIT3CMDS'\n      if ispfver < '5.5' & wordpos(oldname,old55) > 0 then\n         iterate\n      /* new field added with ISPF 5.2 APAR OW56583 */\n      old54 = 'RFNDCHG'\n      if ispfver < '5.2+' & wordpos(oldname,old54) > 0 then\n         iterate\n      /* new fields added with ISPF 5.2 */\n      old52 = 'ZLMFLOCK PDFFVBRL PDFEVBRL EDITCUT EDITPAST',\n              'PDFDSCRL PDFDSTAT'\n      if ispfver < '5.2' & wordpos(oldname,old52) > 0 then\n         iterate\n      /* old fields removed with ISPF 5.2 */\n      pre52 = 'LMFSVCNO CBLKSIZE CLRECL CSIZE CPRIMQTY CSECQTY CDBLKS',\n              'MBLKSIZE MLRECL MSIZE MPRIMQTY MSECQTY MDBLKS'\n      if ispfver > '5.0' & wordpos(oldname,pre52) > 0 then\n         iterate\n      /* new fields added with ISPF 5.0 */\n      old50 = 'ZLOGCLAL LOGCLALF ZLSTCLAL LSTCLALF SUPCLSPR',\n              'SUPCLSSC SUPCUPPR SUPCUPSC OPT34HLQ PID PIDF',\n              'ZDEFPPAN ZSHOWENQ ZDEFLANG ZTMPUNIT ZCTLPQTY',\n              'ZCTLSQTY ZWRKPQTY ZWRKSQTY ZTMPQUAL'\n      if ispfver < '5.0' & wordpos(oldname,old50) > 0 then\n         iterate\n      /* old fields removed with ISPF 5.0 */\n      pre50 = 'ZGAPPN ZGMAXWAT'\n      if ispfver > '4.8' & wordpos(oldname,pre50) > 0 then\n         iterate\n      asmlabel = oldname\n  /* end of new lines added by Ron -------------------------------*/\n      oldlineno=outlines\n      if configname.oldname \u00ac= '??' then\n        do\n          if  lastgroup\u00ac=group.a then\n            do\n              lastgroup=group.a\n              if (zcnvopt = 'ALL' ) | pass=3 then\n                do\n                  call addline '/*'copies('-',68)\n                  call addline('/*'center(grouptitle.lastgroup,68)'*/')\n                  call addline '/*'copies('-',68)\n                end\n            end\n          parse var configname.oldname . ncvalue\n  /* start of new lines added by Ron -----------------------------*/\n          if newname = 'LOG_DISPLAY_REQUIRED' & ncvalue = 'Y' then\n            ncvalue = 'YES'\n          if newname = 'LOG_DISPLAY_REQUIRED' & ncvalue = 'N' then\n            ncvalue = 'NO'\n          if newname = 'LOG_KEPT' & ncvalue = 'Y' then\n            ncvalue = 'YES'\n          if newname = 'LOG_KEPT' & ncvalue = 'N' then\n            ncvalue = 'NO'\n          if newname = 'LOG_MESSAGE_ID' & ncvalue = 'Y' then\n            ncvalue = 'YES'\n          if newname = 'LOG_MESSAGE_ID' & ncvalue = 'N' then\n            ncvalue = 'NO'\n          if newname = 'LIST_DISPLAY_REQUIRED' & ncvalue = 'Y' then\n            ncvalue = 'YES'\n          if newname = 'LIST_DISPLAY_REQUIRED' & ncvalue = 'N' then\n            ncvalue = 'NO'\n          if newname = 'LIST_KEPT' & ncvalue = 'Y' then\n            ncvalue = 'YES'\n          if newname = 'LIST_KEPT' & ncvalue = 'N' then\n            ncvalue = 'NO'\n          if newname = 'SCREEN_FORMAT' & ncvalue = 'S' then\n            ncvalue = 'STD'\n          if newname = 'HOST_COLORS' & ncvalue = '' then\n            ncvalue = 'OFF'\n          if newname = 'PC_COLORS' & ncvalue = '' then\n            ncvalue = 'OFF'\n          if newname = 'DEFAULT_MESSAGE_ID' & ncvalue = '1' then\n            ncvalue = 'OFF'\n          if newname = 'DEFAULT_PANEL_ID' & ncvalue = '1' then\n            ncvalue = 'OFF'\n          if newname = 'DEFAULT_SCREEN_NAME' & ncvalue = '1' then\n            ncvalue = 'OFF'\n          if newname = 'ENABLE_EURO_SYMBOL' & ncvalue = 'Y' then\n            ncvalue = 'YES'\n          if newname = 'ENABLE_EURO_SYMBOL' & ncvalue = 'N' then\n            ncvalue = 'NO'\n          if newname = 'GUI_DISPLAY_ENTER_KEY' & ncvalue = '/' then\n            ncvalue = 'YES'\n          if newname = 'GUI_DISPLAY_ENTER_KEY' & ncvalue = '' then\n            ncvalue = 'NO'\n          if newname = 'SAVE_GUI_VALUES' & ncvalue = 'Y' then\n            ncvalue = 'YES'\n          if newname = 'SAVE_GUI_VALUES' & ncvalue = '' then\n            ncvalue = 'NO'\n          if newname = 'GUI_ACCELERATOR_SUPPORT' & ncvalue = '/' then\n            ncvalue = 'YES'\n          if newname = 'GUI_ACCELERATOR_SUPPORT' & ncvalue = '' then\n            ncvalue = 'NO'\n          if newname = 'GUI_DOWNLOAD_IMAGES' & ncvalue = '/' then\n            ncvalue = 'YES'\n          if newname = 'GUI_DOWNLOAD_IMAGES' & ncvalue = '' then\n            ncvalue = 'NO'\n          if newname = 'GUI_MAKEPATH_FOR_IMAGES' & ncvalue = '/' then\n            ncvalue = 'YES'\n          if newname = 'GUI_MAKEPATH_FOR_IMAGES'  & ncvalue = '' then\n            ncvalue = 'NO'\n          if newname = 'CONTINUE_3270_AFTER_LOSS_OF_WS_CONNECTION' &,\n             ncvalue = '/' then\n            ncvalue = 'YES'\n          if newname = 'CONTINUE_3270_AFTER_LOSS_OF_WS_CONNECTION' &,\n             ncvalue = '' then\n            ncvalue = 'NO'\n          if newname = 'BROWSE_FTP_ERRORS' & ncvalue = '/' then\n            ncvalue = 'YES'\n          if newname = 'BROWSE_FTP_ERRORS' & ncvalue = '' then\n            ncvalue = 'NO'\n          if newname = 'CREATE_DIRECTORY_ON_WSA_DOWNLOAD' &,\n             ncvalue = '/' then\n            ncvalue = 'YES'\n          if newname = 'CREATE_DIRECTORY_ON_WSA_DOWNLOAD' &,\n             ncvalue = '' then\n            ncvalue = 'NO'\n          if newname = 'WSA_DOWNLOAD_DATA_SET' Then Do\n            If left(ncvalue,1) = \"'\" then\n               ncvalue = Substr(ncvalue,2,Length(ncvalue)-2)\n          end\n          if newname = 'FRAME_COLOR' then\n            ncvalue = Left(ncvalue,1)\n          if newname = 'FRAME_INTENSITY' then\n            ncvalue = Right(ncvalue,1) / 4\n          if newname = 'ENABLE_ISPF_EXITS' & ncvalue = '60' then\n            ncvalue = 'NO'\n          if newname = 'ENABLE_ISPF_EXITS' & ncvalue = 'E0' then\n            ncvalue = 'YES'\n          if newname = 'USE_MVS_OPEN_EDITION_SOCKETS' &,\n             ncvalue = '0' then\n            ncvalue = 'NO'\n          if newname = 'USE_MVS_OPEN_EDITION_SOCKETS' &,\n             ncvalue = '1' then\n            ncvalue = 'YES'\n          if newname = 'USE_MVS_OPEN_EDITION_SOCKETS' &,\n             config.0 > 495 then     /* 495 lines in 5.6 asm source */\n             newname = 'USE_ZOS_UNIX_SOCKETS'   /* parm name changed */\n          if newname = 'APPLID_FOR_USER_COMMAND_TABLE' &,\n             config.0 > 469 then do  /* 469 lines in 5.2+ asm source */\n             if pass = 1 then do\n                ncvalue = strip(ncvalue)\n                if oldname = 'USERCMDS' then u1cmds = '('ncvalue','\n                if oldname = 'USR2CMDS' then u2cmds = ncvalue','\n                if oldname = 'USR3CMDS' then u3cmds = ncvalue')'\n             end\n             if pass = 2 then do\n                if oldname = 'USERCMDS' then do\n                   ncvalue = u1cmds||u2cmds||u3cmds\n                   if ncvalue = '(,,)' then ncvalue = 'NONE'\n                   if right(ncvalue,3) = ',,)' then\n                      parse var ncvalue '(' ncvalue ',,)'\n                end\n                if oldname = 'USR2CMDS' then iterate\n                if oldname = 'USR3CMDS' then iterate\n             end\n          end\n          if newname = 'APPLID_FOR_SITE_COMMAND_TABLE' &,\n             config.0 > 469 then do  /* 469 lines in 5.2+ asm source */\n             if pass = 1 then do\n                ncvalue = strip(ncvalue)\n                if oldname = 'SITECMDS' then s1cmds = '('ncvalue','\n                if oldname = 'SIT2CMDS' then s2cmds = ncvalue','\n                if oldname = 'SIT3CMDS' then s3cmds = ncvalue')'\n             end\n             if pass = 2 then do\n                if oldname = 'SITECMDS' then do\n                   ncvalue = s1cmds||s2cmds||s3cmds\n                   if ncvalue = '(,,)' then ncvalue = 'NONE'\n                   if right(ncvalue,3) = ',,)' then\n                      parse var ncvalue '(' ncvalue ',,)'\n                end\n                if oldname = 'SIT2CMDS' then iterate\n                if oldname = 'SIT3CMDS' then iterate\n             end\n          end\n          if newname = 'DEFAULT_SYSTEM_NAME' & ncvalue = '2' then\n            ncvalue = 'ON'\n          if newname = 'DEFAULT_SYSTEM_NAME' & ncvalue = '1' then\n            ncvalue = 'OFF'\n          if newname = 'DEFAULT_USERID_DISP' & ncvalue = '2' then\n            ncvalue = 'ON'\n          if newname = 'DEFAULT_USERID_DISP' & ncvalue = '1' then\n            ncvalue = 'OFF'\n          /* the next entries are to correct errors */\n          if newname = 'SCROLL_MEMBER_LIST' & ncvalue = ' ' then\n            ncvalue = 'YES'\n          if newname = 'RESET_SCROLL_MEMBER_LIST' & ncvalue = ' ' then\n            ncvalue = 'NO'\n          if newname = 'SCROLL_MIN' &,\n             (ncvalue < 0 | ncvalue > 9999) then\n            ncvalue = '0'\n          if newname = 'SCROLL_MAX' &,\n             (ncvalue < 0 | ncvalue > 9999) then\n            ncvalue = '9999'\n          if newname = 'RESET_SCROLL_VALUE' & ncvalue = ' ' then\n            ncvalue = 'NO'\n          if newname = 'ISPCTL0_BLOCK_SIZE' &,\n             (ncvalue < 0 | ncvalue > 32760) then\n            ncvalue = '800'\n          if newname = 'ISPCTL0_RECORD_LENGTH' &,\n             (ncvalue < 0 | ncvalue > 32760) then\n            ncvalue = '80'\n          if newname = 'ISPCTL0_PRIMARY_QUANTITY' &,\n             (ncvalue < 0 | ncvalue > 32760) then\n            ncvalue = '10'\n          if newname = 'ISPCTL0_SECONDARY_QUANTITY' &,\n             (ncvalue < 0 | ncvalue > 32760) then\n            ncvalue = '100'\n          if newname = 'ISPLST_PRIMARY_QUANTITY' &,\n             (ncvalue < 0 | ncvalue > 32760) then\n            ncvalue = '10'\n          if newname = 'ISPLST_SECONDARY_QUANTITY' &,\n             (ncvalue < 0 | ncvalue > 32760) then\n            ncvalue = '100'\n          if newname = 'DEFAULT_SYSTEM_NAME' & ncvalue = ' ' then\n            ncvalue = 'OFF'\n          if newname = 'DEFAULT_USERID_DISP' & ncvalue = ' ' then\n            ncvalue = 'OFF'\n          if newname = 'DEFAULT_LIBDEF_PROCESSING_OPTION' &,\n             ncvalue = ' ' then\n            ncvalue = 'UNCOND'\n  /* end of new lines added by Ron -------------------------------*/\n          if ncvalue='' then ncvalue='NONE'\n          if newname = 'COMMAND_LINE_PLACEMENT' & ncvalue = 'NONE' Then\n            ncvalue = 'BOTTOM'\n          if newname = 'SITE_COMMAND_TABLE_SEARCH_ORDER' &,\n             ncvalue = 'A' Then\n            ncvalue = 'AFTER'\n          if newname = 'SITE_COMMAND_TABLE_SEARCH_ORDER' &,\n             ncvalue = 'B' Then\n            ncvalue = 'BEFORE'\n          if newname = 'ALLOWED_ALLOCATION_UNITS' & ncvalue = 'A' Then\n            ncvalue = 'ANY'\n          if newname = 'USE_KEYLISTS' & ncvalue = 'Y' Then\n            ncvalue = 'YES'\n          if newname = 'USE_KEYLISTS' & ncvalue = 'N' Then\n            ncvalue = 'NO'\n          if newname = 'GLOBAL_COLORS' & ncvalue = 'NONE' Then\n            ncvalue = '1234567'\n          if newname = 'USE_ALTERNATE_DIALOG_TEST_PANEL' &,\n                       ncvalue = 'NO' Then\n            ncvalue = 1\n          if currver > '4.8' then do           /* added by Ron */\n             if newname = 'SUPERC_LIST_DATA_SET_BLOCK_SIZE' &,\n                ncvalue = '13566' Then\n               ncvalue = '0'\n             if newname = 'SUPERC_UPDATE_DATA_SET_BLOCK_SIZE' &,\n                ncvalue = '13680' Then\n               ncvalue = '0'\n             if newname = 'SUPERC_PROFILE_DATA_SET_BLOCK_SIZE' &,\n                ncvalue = '13680' Then\n               ncvalue = '0'\n             if newname = 'SUPERC_STATEMENTS_DATA_SET_BLOCK_SIZE' &,\n                ncvalue = '13680' Then\n               ncvalue = '0'\n          end                                  /* added by Ron */\n          if newname = 'PRINTDS_DEST_OR_WRITER_OPTION' Then\n            if oldname = 'PDSOPR1' & ncvalue \u00ac= 'DEST' Then\n              Iterate\n            else\n              if oldname = 'PDSOPR2' & ncvalue \u00ac= 'WRITER' Then\n                Iterate\n          indent = 0     /* Lines start in col 1 */\n   /*-----------------------------------------------------------------*/\n   /* This loop was used to check each word of the value, and finally */\n   /* write only the first word of the value into the keyword file,   */\n   /* which doesn't make much sense to me.  Therefore this loop is no */\n   /* longer used (now whole multi-word values go into the file)  Ron */\n   /*-----------------------------------------------------------------*/\n/*        do until ncvalue='' ** Process multi-Word values ..... Ron */\n/*          len=maxlen.lastgroup       */\n            len=44\n            if ((pass=2 & zcnvopt = 'CHG' )) then\n              len=45\n            if pass=2 & zcnvopt\\='ALL' then len=dlen\n            len=len-indent\n/*          parse var ncvalue cvalue ncvalue    ???? .... Ron */\n   /*-----------------------------------------------------------------*/\n   /* instead of the previous line we'll write the whole value into   */\n   /* the keyword file (required for multi-word values).          Ron */\n   /*-----------------------------------------------------------------*/\n            ncvalue = Strip(ncvalue,'L')   /* no leading blanks   Ron */\n            if ncvalue \u00ac= default then     /* cvalue -> ncvalue   Ron */\n              if zcnvopt='CHG' & pass = 3 then nop\n              else\n                if pass=1 then\n                   dlen=max(dlen,length(space(newname)))\n                else\n                  if pass=2 then\n                    call addline left(newname,len)'= 'ncvalue  /* Ron */\n                else nop\n            else\n              if zcnvopt='CHG' & pass <3 then nop\n              else\n                if zcnvopt='CHG' & pass = 3 then\n                  call addline '/*'left(newname,len-2)||,\n                               '= 'ncvalue                    /* Ron */\n                else\n                  if zcnvopt = 'ALL' then\n                   call addline left(newname,len)'= 'ncvalue  /* Ron */\n /*         if pass>1 &,\n               oldlineno<outlines & 0<wordpos(oldname,color) then\n              call add_color_comments */\n            indent = 2    /* Continuations start in col 3 */\n /*       end       ** end of \"do until ncvalue='' \" .........  Ron */\n          indent = 0     /* Lines start in col 1 */\n        end\n      else\n        do\n          if  lastgroup\u00ac=group.a then\n            do\n              lastgroup=group.a\n              if (zcnvopt = 'ALL' ) | pass=3 then\n                do\n                  call addline '/*'copies('-',68)\n                  call addline('/*'center(grouptitle.lastgroup,68)'*/')\n                  call addline '/*'copies('-',68)\n                end\n            end\n          if zcnvopt='CHG' & pass = 3 then\n            call addline '/*'left(newname,len-2)|| '= 'default\n          else\n            if zcnvopt = 'ALL' then\n              call addline left(newname,len)'= 'default\n        end\n     end\n     if pass = 2 then\n       do\n         if zcnvopt \\= 'CHG' then return/* Pass 3 is for change only*/\n         call addline '/*'copies('-',68)\n         call addline '/*'center(,\n           ' The following values match the ISPF Defaults ',68)\n         call addline '/*'copies('-',68)\n       end\n   end\n  return\n\n/* Initialize_Variables: Basic setup of global variables  **********/\ninitialize_variables:\n  color='ABSC ABSL ABUC AMT CT CEF CH DT ET EE FP'\n  color=color' FK IMT LEF LID LI NEF NT PID PIN PT PDAC'\n  color=color' PDUAC RP SI SAC SUC VOI WMT WT WASL PS'\n  colork.=''\n  colork.1 ='ACTION_BAR_SELECTED_CHOICE'\n  colork.2 ='ACTION_BAR_SEPARATOR_LINE'\n  colork.3 ='ACTION_BAR_UNSELECTED_CHOICE'\n  colork.4 ='ACTION_MESSAGE_TEXT'\n  colork.5 ='CAUTION_TEXT'\n  colork.6 ='CHOICE_ENTRY_FIELD'\n  colork.7 ='COLUMN_HEADING'\n  colork.8 ='DESCRIPTIVE_TEXT'\n  colork.9 ='EMPHASIZED_TEXT'\n  colork.10='ERROR_EMPHASIS'\n  colork.11='FIELD_PROMPT'\n  colork.12='FUNCTION_KEYS'\n  colork.13='INFORMATIONAL_MESSAGE_TEXT'\n  colork.14='LIST_ENTRY_FIELD'\n  colork.15='LIST_ITEM_DESCRIPTION'\n  colork.16='LIST_ITEM'\n  colork.17='NORMAL_ENTRY_FIELD'\n  colork.18='NORMAL_TEXT'\n  colork.19='PANEL_ID'\n  colork.20='PANEL_INFORMATION'\n  colork.21='PANEL_TITLE'\n  colork.22='POINT_AND_SHOOT'\n  colork.23='PULLDOWN_AVAILABLE_CHOICE'\n  colork.24='PULLDOWN_UNAVAILABLE_CHOICE'\n  colork.25='REFERENCE_PHRASE'\n  colork.26='SCROLL_INFORMATION'\n  colork.27='SELECTION_AVAILABLE_CHOICE'\n  colork.28='SELECTION_UNAVAILABLE_CHOICE'\n  colork.29='VARIABLE_OUTPUT_INFORMATION'\n  colork.30='WARNING_MESSAGE_TEXT'\n  colork.31='WARNING_MESSAGE'\n  colork.32='WORKAREA_SEPARATOR_LINE'\n  colors.1='Blue  '\n  colors.2='Red   '\n  colors.3='Pink  '\n  colors.4='Green '\n  colors.5='Turq  '\n  colors.6='Yellow'\n  colors.7='White '\n  intens.0='Low '\n  intens.2='High'\n  hilite.0='None  '\n  hilite.1='Blink '\n  hilite.2='Rev   '\n  hilite.4='Uscore'\n  continue = 0  /* No assembler continuation found */\n  outlines=0    /* number of output lines is zero */\n  indent = 0    /* lines start in column  1 */\n  groups = 0    /* start with no settings groups */\n  group. = ''\n  grouptitle.=''\n  maxlen.=0;    /* set max name lengths for groups */\n  pass=2;\n  pds = ''\n  return\n\n/* Create_Header: Make output file comments and init variables    **/\n\ncreate_header:\n  /* -------- start of lines modified by Ron ----------------------*/\n  call addline '/* ISPF Configuration table definition.',\n               'Generated by Rexx JSPCCONV'\n  Address ISPEXEC 'VGET ZSYSID'\n  call addline '/* Created 'time()' on 'date()', for user 'userid(),\n               'on system' zsysid\n  /* -------- start of lines added by Ron -------------------------*/\n  call addline '/*'\n  address ISPEXEC 'VGET ZENVIR'\n  currver = Substr(ZENVIR,6,3)\n  if currver = '5.2' then do\n     address ISPEXEC 'VGET ZOS390RL'\n     if Substr(ZOS390RL,12,1) = '4' then     /* 'z/OS   01.04.00' */\n        currver = '5.2+'\n  end\n  if Left(zcnvsrce,1) <> \"'\" then do /* where is assembler source? */\n     dspref = Sysvar(SYSPREF)\n     if dspref <> ''\n        then asmsrce = dspref'.'zcnvsrce\n        else asmsrce = zcnvsrce              /* TSO NOPREFIX */\n  End\n  Else asmsrce = Strip(zcnvsrce,'B',\"'\")     /* remove the quotes */\n  if ispfver <> '' then do                /* invoked from JSPCATAB */\n     call addline '/*   ISPF' ispfver 'assembler source was first',\n                  'generated by Rexx JSPCATAB'\n     call addline '/*   from the current ACTIVE ISPF' currver,\n                  'configuration module ISPCFIGU'\n     aa = 'into'\n  end\n  if ispfver = '' then do     /* no version as invocation argument */\n     ispfver = currver        /* use current ISPF version          */\n     call addline '/*   The supplied configuration assembler',\n                  'program source was read'\n     aa = 'from'\n  end\n  if zcnvsrcm \u00ac= '' then\n    call addline '/*   'aa' library member' asmsrce'('zcnvsrcm')'\n  else\n    call addline '/*   'aa' file 'asmsrce\n  call addline '/*   Then JSPCCONV converted that to this ISPF',\n               ispfver 'Keyword File.'\n  call addline '/*'\n  /* -------- end of lines added by Ron ---------------------------*/\n  /* --------- lines removed by Ron ----------------------------------*/\n  /* If zcnvsrcm \u00ac= '' Then                                           */\n  /*   call addline '**   Converted from 'zcnvsrce' member 'zcnvsrcm  */\n  /* Else                                                             */\n  /*   call addline '**   Converted from 'zcnvsrce                    */\n  /* call addline '**   by user 'userid()'.'                          */\n  /*------------------------------------------------------------------*/\n  if zcnvopt = 'CHG' then\n    call addline '/*   Defaults were included as comments.'\n  Else if zcnvopt = 'ALL' then\n    call addline '/*   All values were included.'\n  Else\n    call addline '/*   Only values which differ from the defaults were',\n                 ||' included.'\n  call addline '/*'\n  return\n\n\n/* Remove_Double_Ampersands: Convert && To & From assembler source**/\nremove_double_ampersands:\n  arg setting\n  do until p=0\n    p=pos('&&',setting)\n    if p>0 then setting=delstr(setting,p,1)\n  end\n  return setting\n\n/* Add_Color: Annotate lines with 3 digit color numbers*/\nadd_color:\n  Parse arg val\n  parse var val c 2 i 3 h 4 .\n  output.outlines=strip(output.outlines,'T')\n  p=pos('*/',output.outlines)\n  if p>0 then output.outlines=strip(delstr(output.outlines,p,2))\n  output.outlines=output.outlines' /*'||colors.c intens.i hilite.h\n  output.outlines=left(output.outlines,max(lengtH(line),70))||'*/'\n  return\n\n/* Addline: Generic routine to add a line to the output file  ******/\naddline: procedure expose outlines output. indent pass colork. ,\n                          colors. intens. hilite.\n  if pass=1 then return\n  parse arg line\n  line = strip(line,'T')\n  outlines = outlines + 1\n  if substr(line,1,2)='/*' & substr(line,length(line)-1,2)\u00ac='*/' then\n   line=left(line,max(lengtH(line),70))||'*/'\n  output.outlines = copies(' ',indent)line\n  parse var output.outlines key . val\n  ck = 1\n  do while colork.ck \u00ac= '' & colork.ck \u00ac= key\n    ck = ck + 1\n  End\n  if colork.ck = key then\n    call add_color val\n  return\n\n/* View_Output: View and free data sets ****************************/\nview_output:\n  j = 0\n  old_key = ''\n  Do i = 1 to outlines\n    Parse var output.i key . val\n    If i > 1 & (key = old_key & key \u00ac= '/*') Then\n      iterate\n    Else\n      Do\n        old_key = key\n        j = j + 1\n        output2.j = output.i\n      End\n  End\n  if continue=1 then\n   do\n    say 'A contination character was found in Column 72 of the',\n        'assembler source.'\n    say 'Results may not be complete.'\n   end\n  'EXECIO 'j' DISKW OUTFILE (FINIS STEM OUTPUT2.'\n  execio_rc = rc\n  If execio_rc = 0 Then\n    Do\n      'ALLOC REU F(OUTFILE) DA('zcnvkwd') SHR'\n      member = 'MEMBER('zcnvkwdm')'\n      address ispexec 'LMINIT DATAID(CNVRT) DDNAME(OUTFILE) ENQ(SHRW)'\n      address ispexec 'VIEW DATAID('cnvrt')' member\n      If member \u00ac= '' Then\n        address ispexec 'LMMSTATS DATAID('cnvrt')' member\n      address ispexec 'LMFREE DATAID('cnvrt')'\n    End\n  Else\n    Address ISPEXEC 'SETMSG MSG(ISPC289)'\nreturn\n\n\n/*   removed the following 4 keywords\nLoglrecl        Log_Data_Set_Record_Length=125\nTcntlrcl        Record_Length_For_Temporary_Cntl_Data_Sets=80\nTlstlrcl        Record_Length_For_Temporary_List_Data_Sets=121\nTwrklrcl        Record_Length_For_Temporary_Work_Data_Sets=256\n     removed the above 4 keywords    */\n\n/*-------------------------------------------------------------------*/\n/* The following list has the assembler label names and equivalent   */\n/* keywords with their default values (keyword=value).               */\n/* All keywords in the following section were in Mixed Case, and all */\n/* changes made by Ron are in CAPITALS, to make them easy to see.    */\n/* For full list of changes see the comments at the end.         Ron */\n/*-------------------------------------------------------------------*/\n/*Start -- Do not change this comment line!!!\n*GROUP PDF Exits\nAllocpgm        Data_Set_Allocation_Program_Exit=None\nPrtpgm          Print_Utility_Program_Exit=None\nPrtclist        Print_Utility_Command_Exit=None\nCmppgm          Compress_Utility_Program_Exit=None\nCmpclist        Compress_Utility_Clist_Exit=None\nDslstpgm        Data_Set_List_Filter_Program_Exit=None\nMlfpgm          Member_List_Filter_Program_Exit=None\nNmchgpgm        Data_Set_Name_Change_Program_Exit=None\n/* spelling corrected on next line                           @ow56583*/\nDsllcpgm        Data_Set_List_Line_Command_Program_Exit=None\nInstacct        Activity_Monitoring_Program_Exit=None\nMemcpext        Member_List_Line_Command_Program_Exit=None\nMemccext        Member_List_Line_Command_Command_Exit=None\n*GROUP Data Set Allocation Settings\nPdfunit         Pdf_Default_Unit=Sysallda\nUnitauth        Allowed_Allocation_Units=Any\nPcfalloc        Allocate_Before_Uncatalog=No\nCheckexp        Verify_Expiration_Date=Yes\nDelvol          Volume_Of_Migrated_Data_Sets=Migrat\nDelcmd          Command_To_Delete_Migrated_Data_Sets=Hdelete\n*GROUP Outlist data set specifications\nOlrecl          Outlist_Record_Length=133\nOblksize        Outlist_Block_Size=13566\nOprimqty        Outlist_Primary_Quantity=200\nOsecqty         Outlist_Secondary_Quantity=100\n*GROUP SuperC data set specifications\nSupclblk        Superc_List_Data_Set_Block_Size=0\nSupcublk        Superc_Update_Data_Set_Block_Size=0\nSupcpblk        Superc_Profile_Data_Set_Block_Size=0\nSupcsblk        Superc_Statements_Data_Set_Block_Size=0\nSupcpgm         Use_Superc_Program_Interface=Yes\nSUPCLSPR        Superc_Listing_Primary_Quanity=50\nSUPCLSSC        Superc_Listing_Secondary_Quanity=100\nSUPCUPPR        Superc_Update_Primary_Quanity=15\nSUPCUPSC        Superc_Update_Secondary_Quanity=30\n*GROUP LMF\nlmflock         fail_on_lmf_lock=Yes\nCblksize        Control_Status_Block_Size=13600\nClrecl          Control_Status_Record_Length=160\nCsize           Control_Status_Lines_Per_Page=50\nCprimqty        Control_Status_Primary_Quantity=200\nCsecqty         Control_Status_Secondary_Quantity=100\nCdblks          Control_Status_Directory_Blocks=10\nMblksize        Member_Status_Block_Size=13600\nMlrecl          Member_Status_Record_Length=160\nMsize           Member_Status_Lines_Per_Page=50\nMprimqty        Member_Status_Primary_Quantity=200\nMsecqty         Member_Status_Secondary_Quantity=100\nMdblks          Member_Status_Directory_Blocks=10\n*GROUP Edit recovery data set specifications\nEblksize        Edit_Recovery_Block_Size=13680\nEprimqty        Edit_Recovery_Primary_Quantity=40\nEsecqty         Edit_Recovery_Secondary_Quantity=200\n*GROUP Move/Copy Settings\nCopyrc          Maximum_Good_Iebcopy_Return_Code=0\nCopyopt         Use_Iebcopy_Copy_Or_Copymod_Option=2\nIebcopt         When_To_Use_Iebcopy=0\nUmcalloc        Allow_Data_Set_Creation_For_Move_Copy=Yes\n*GROUP Edit related settings\nEdtproft        Maximum_Edit_Profiles=25\nSclmchk         Sclm_Warning_Level=Warn\nUndosize        Undo_Storage_Size=0\nAnycolor        Allow_Edit_Highlighting=Yes\nDfltcolr        Default_Edit_Display=3\nEditstor        Maximum_Storage_Allowed_For_Edit=0\nAsmvideo        Enable_Assembler_Continuation_Errors=Yes\nTRUNCWRN        Warn_On_Truncation_Of_Trailing_Blanks=Yes\nPdfceimacro     Site_Wide_Initial_Macro=None\nTflow           Text_Flow_Terminators=.:&<....\nEDITCUT         Edit_Cut_Default=Replace\nEDITPAST        Edit_Paste_Default=Keep\nEcralloc        Allow_Data_Set_Creation_For_Create_Replace=Yes\nRFNDCHG         FORCE_ISRE776_FOR_RCHANGE=NO\nPDFFVBRL        FORCE_PRESERVE_VB_RECORD_LENGTH=NO\nPDFEVBRL        PRESERVE_VB_RECORD_LENGTH=NO\nclipnum         Maximum_Number_Of_Edit_Clipboards=11\nclipsize        Maximum_Edit_Clipboard_Size=0\nVSAMEE          Vsam_Edit_Enabled=No\nVSAMEC          Vsam_Edit_Command=Ditto ve /\nVSAMBE          Vsam_Browse_Enabled=No\nVSAMBC          Vsam_Browse_Command=Ditto vb /\nVSAMVE          Vsam_View_Enabled=No\nVSAMVC          Vsam_View_Command=Ditto vb /\n*group edit site wide profile customizations\nEditstat        Stats=On\nEditstatf       Force_Stats=No\nEditrec         Recovery=Off\nEditrecf        Force_Recovery=No\nEditrecw        Recovery_Warning_Message=Warn\nEditrecwf       Force_Recovery_Warning_Message=No\nEditsetu        Setundo=On\nEditsetuf       Force_Setundo=No\nEditpack        Pack=Off\nEditpackf       Force_Pack=No\nEditusermac     Imacro=None\nEditusermacf    Force_Imacro=No\nEditcaps        Caps=Off\nEditnote        Note=On\nEdithex         Hex=Off\nEditnull        Nulls=Std\nEditnumd        Display_Sequence_Numbers=On\nEditnumc        Cobol_Numbers=Off\nEditnums        Standard_Numbers=On\nEditauton       Autonum=Off\nEditprt         Autolist=Off\nEditlock        Profile=Unlock\nEditasave       Autosave=On\nEditasavp       Autosave_Prompt=Prompt\nEditcolor       Hilite=Off\nEditdologic     Hilite_Dologic=Off\nEditiflogic     Hilite_Iflogic=Off\nEditparen       Hilite_Paren=Off\nEditfind        Hilite_Find=On\nEditcursor      Hilite_Cursor=On\nEdithilang      Hilite_Language=1\n*group ispf site wide profile customizations\nZvermod         Version_Level_Of_Sitewide_Defaults=43000\nZtps            Tab_To_Point_And_Shoot=No\nZtpsf           Reset_Tab_To_Point_And_Shoot=No\nZta             Tab_To_Action_Bars=Yes\nZtaf            Reset_Tab_To_Action_Bars=No\nZsm             Use_Session_Manager=No\nZsmf            Reset_Use_Session_Manager=No\nZjmp            Jump_From_Leader_Dots=Yes\nZjmpf           Reset_Jump_From_Leader_Dots=No\nZasl            Show_Split_Line=Yes\nZaslf           Reset_Show_Split_Line=No\nZlmp            Long_Messages_In_Popup=Yes\nZlmpf           Reset_Long_Messages_In_Popup=No\nZepdsc          Edit_Printds_Command=No\nZepdscf         Reset_Edit_Printds_Command=No\nZttr            Restore_Test_Trace_Options=Yes\nZttrf           Reset_Restore_Test_Trace_Options=No\nZcuah           Display_Panels_In_Cua_Mode=Yes\nZcuahf          Reset_Display_Panels_In_Cua_Mode=No\nZlogfdsp        Log_Data_Set_Disposition=None\nZlogfdf         Reset_Log_Data_Set_Disposition=No\nZlstfdsp        List_Data_Set_Disposition=None\nZlstfdf         Reset_List_Data_Set_Disposition=No\nZplace          Command_Line_Placement=Bottom\nZplf            Reset_Command_Line_Placement=No\nZkluse          Use_Keylists=Yes\nZklf            Reset_Use_Keylists=No\nZpfshow         Show_Pfkeys=On\nZpff            Reset_Show_Pfkeys=No\nPDFDSML         SCROLL_MEMBER_LIST=YES\nPDFDSMLF        RESET_SCROLL_MEMBER_LIST=NO\nPDFDSCRL        Scroll_Default=Page\nPDFDSMIN        SCROLL_MIN=0\nPDFDSMAX        SCROLL_MAX=9999\nPDFDSCVR        RESET_SCROLL_VALUE=NO\nPDFDPDSE        DISPLAY_EMPTY_MEMBER_LIST=NO\nPDFDPDSP        DISPLAY_EMPTY_MEMBER_LIST_PATTERN=NO\nPDFDPDSF        DISPLAY_EMPTY_MEMBER_LIST_FUNCTION=YES\nPDFDPDSR        RESET_EMPTY_MEMBER_LIST_OPTIONS=NO\nPDFDSTAT        Status_Area_Default=SES\nLstblk#         List_Data_Set_Records_Per_Block=26\nLogblksz        Log_Data_Set_Block_Size=129\nTpcblksz        Block_Size_For_Temporary_Cntl_Data_Sets=800\nTplblksz        Block_Size_For_Temporary_List_Data_Sets=3146\nTwrkblks        Block_Size_For_Temporary_Work_Data_Sets=2560\nPDFC0BLK        ISPCTL0_BLOCK_SIZE=800\nPDFCT0PQ        ISPCTL0_PRIMARY_QUANTITY=10\nPDFCT0SQ        ISPCTL0_SECONDARY_QUANTITY=100\nZctlpqty        ISPCTL_Primary_Quantity=10\nZctlsqty        ISPCTL_Secondary_Quantity=100\nPDFLSXPQ        ISPLST_PRIMARY_QUANTITY=10\nPDFLSXSQ        ISPLST_SECONDARY_QUANTITY=100\nZwrkpqty        ISPWRK_Primary_Quantity=10\nZwrksqty        ISPWRK_Secondary_Quantity=100\nZtmpunit        Use_PDFCUNIT_for_Temp_ISPF_Data_sets=No\nZtmpqual        ISPF_Temporary_Data_set_Qualifier=None\nPDSOPR          Printds_Dest_Or_Writer_Option=Dest\nLocalprt        Local_Printds_Options=Nonum\nPdsyfpalt       Use_Alternate_Dialog_Test_Panel=1\n*GROUP default cua color settings\nAbsc            Action_Bar_Selected_Choice=600\nAbscf           Reset_Action_Bar_Selected_Choice=No\nAbsl            Action_Bar_Separator_Line=100\nAbslf           Reset_Action_Bar_Separator_Line=No\nAbuc            Action_Bar_Unselected_Choice=720\nAbucf           Reset_Action_Bar_Unselected_Choice=No\nAmt             Action_Message_Text=220\nAmtf            Reset_Action_Message_Text=No\nCt              Caution_Text=620\nCtf             Reset_Caution_Text=No\nCef             Choice_Entry_Field=504\nCeff            Reset_Choice_Entry_Field=No\nCh              Column_Heading=120\nChf             Reset_Column_Heading=No\nDt              Descriptive_Text=400\nDtf             Reset_Descriptive_Text=No\nEt              Emphasized_Text=520\nEtf             Reset_Emphasized_Text=No\nEe              Error_Emphasis=622\nEef             Reset_Error_Emphasis=No\nFp              Field_Prompt=400\nFpf             Reset_Field_Prompt=No\nFk              Function_Keys=100\nFkf             Reset_Function_Keys=No\nImt             Informational_Message_Text=720\nImtf            Reset_Informational_Message_Text=No\nLef             List_Entry_Field=504\nLeff            Reset_List_Entry_Field=No\nLid             List_Item_Description=400\nLidf            Reset_List_Item_Description=No\nLi              List_Item=700\nLif             Reset_List_Item=No\nNef             Normal_Entry_Field=504\nNeff            Reset_Normal_Entry_Field=No\nNt              Normal_Text=400\nNtf             Reset_Normal_Text=No\nPid             Panel_ID=100\nPidf            Reset_Panel_ID=No\nPin             Panel_Information=400\nPinf            Reset_Panel_Information=No\nPt              Panel_Title=100\nPtf             Reset_Panel_Title=No\nPs              Point_And_Shoot=520\nPsf             Reset_Point_And_Shoot=No\nPdac            Pulldown_Available_Choice=700\nPdacf           Reset_Pulldown_Available_Choice=No\nPduac           Pulldown_Unavailable_Choice=100\nPduacf          Reset_Pulldown_Unavailable_Choice=No\nRp              Reference_Phrase=720\nRpf             Reset_Reference_Phrase=No\nSi              Scroll_Information=720\nSif             Reset_Scroll_Information=No\nSac             Selection_Available_Choice=700\nSacf            Reset_Selection_Available_Choice=No\nSuc             Selection_Unavailable_Choice=100\nSucf            Reset_Selection_Unavailable_Choice=No\nVoi             Variable_Output_Information=500\nVoif            Reset_Variable_Output_Information=No\nWmt             Warning_Message_Text=620\nWmtf            Reset_Warning_Message_Text=No\nWt              Warning_Message=220\nWtf             Reset_Warning_Message=No\nWasl            Workarea_Separator_Line=100\nWaslf           Reset_Workarea_Separator_Line=No\n*GROUP Miscellaneous settings\nLMFSVCNO        LMF_SVC_NUMBER=109\nAcexedma        Monitor_Edit_Macro_Commands=No\nBrsubmit        Allow_Submit_From_Browse=Yes\nVwsubmit        Allow_Submit_From_View=Yes\nRenamgdg        Warn_On_Rename_To_Gdg_Name=Yes\nDslmeml         Default_Edit/Browse/View_Member_List=Yes\nSuppview        Is_View_Supported=Yes\nTsopanel        Use_Alternate_Panel_Isrtsoa=No\nIcfprt          Print_Using_Icf=No\nOPT34HLQ        Disallow_Wildcards_In_HLQ=No\nScrmax          Maximum_Number_Of_Split_Screens=8\nUsercmds        Applid_For_User_Command_Table=None\nUSR2CMDS        APPLID_FOR_USER_COMMAND_TABLE=NONE\nUSR3CMDS        APPLID_FOR_USER_COMMAND_TABLE=NONE\nSitecmds        Applid_For_Site_Command_Table=None\nSIT2CMDS        APPLID_FOR_SITE_COMMAND_TABLE=NONE\nSIT3CMDS        APPLID_FOR_SITE_COMMAND_TABLE=NONE\nSctsrch         Site_Command_Table_Search_Order=Before\nYear2000        Year_2000_Sliding_Rule=65\nzshowenq        Show_Enq_Displays=YES\nzdeflang        Default_session_language=ENGLISH\n*GROUP Values formerly in ISPDFLTS\nTBADDROW        Number_Of_Rows_For_Tbadd=1\nRETCMDSZ        Retrieve_Command_Stack_Size=512\nISPFEXIT        Enable_Ispf_Exits=No\nTCPDATA         Sas/c_Tcpip_Data_Value=Default\nTCPPREF         Sas/c_Tcpip_Prefix_Value=Default\nUSEOE           Use_Mvs_Open_Edition_Sockets=NO\n*GROUP VSAM DATA SET RESTRICTIONS\nvsamb           Vsam_Restricted_Browse_Dataset=None\nvsame           Vsam_Restricted_Edit_Dataset=None\nvsamv           Vsam_Restricted_View_Dataset=None\n*GROUP ISPSPROF General Values\nzllgjob1        Log/List_Job_Card1=None\nzllgjob2        Log/List_Job_Card2=None\nzllgjob3        Log/List_Job_Card3=None\nzllgjob4        Log/List_Job_Card4=None\nzlogchar        Log_Data_Set_Unique_Character=1\nzlogcla         Log_Sysout_Class=None\nlogclaf         Reset_Log_Sysout_Class=No\nzlogclal        Local_Log_Sysout_Class=None\nlogclalf        Reset_Local_Log_Sysout_Class=No\nzlogidsp        Log_Display_Required=No\nzlogkept        Log_Kept=No\nzloglin         Log_Lines_Per_Page=60\nzlogmid         Log_Message_Id=No\nzlogpid2        Log_Local_Printer_Id=None\nlogpid2f        Reset_Log_Local_Printer_Id=No\nzlog1pg         Log_Pages_Primary_Quantity=10\nzlog2pg         Log_Pages_Secondary_Quantity=10\nzlstchar        List_Data_Set_Unique_Character=1\nzlstcla         List_Sysout_Class=None\nlstclaf         Reset_List_Sysout_Class=No\nzlstclal        Local_List_Sysout_Class=None\nlstclalf        Reset_Local_List_Sysout_Class=No\nzlstidsp        List_Display_Required=No\nzlstkept        List_Kept=No\nzlstlin         List_Lines_Per_Page=60\nzlstllen        List_Line_Length=120\nzlstpid2        List_Local_Printer_Id=None\nlstpid2f        Reset_List_Local_Printer_Id=No\nzlstrcfm        List_Record_Format=FBA\nzlstrecl        List_Logical_Record_Length=121\nzlst1pg         List_Pages_Primary_Quantity=100\nzlst2pg         List_Pages_Secondary_Quantity=200\nzjchar          Unique_Job_Character=None\nzfmt            Screen_Format=STD\nzterm           Terminal_Type=3278\nzfamprt         Family_Printer=2\nzdevnam         Device_Name=None\ndevnamf         Reset_Device_Name=No\nzaspect         Aspect_Ratio=0\nzpadc           Pad_Character=B\nzdel            Delimiter=;\nzretminl        Retrieve_Minimum_Length=1\nzretposc        Retrieve_Cursor_Position=1\nzenbldmp        Enable_Dump=Off\nztermtdd        Termtrac_DD_Name=ISPSNAP\ntermtddf        Reset_Termtrac_DD_Name=No\nztermtr         Environ_Termtrac_Value=Off\nzpprfx          Pfkey_Prefix=Yes\nzfka            Fka_Setting=Long\nzkeys           Number_Of_Pfkeys=12\nzcharlm         Character_Set_Load_Module=ISP3278\ncharlmf         Reset_Character_Set_Load_Module=No\nzframic         Frame_Color=1\nzframic         Frame_Intensity=2\nztputbsz        Tput_Buffer_Blocksize=0\nzgcolors        Global_Colors=1234567\nzggcolrs        Gui_Global_Colors=01041302030600\nzghcolr         Host_Colors=Off\nzgpcolr         PC_Colors=Off\nzsetmds         Default_Message_Id=Off\nzsetpds         Default_Panel_Id=Off\nzsetsds         Default_Screen_Name=Off\nZSETSSD         DEFAULT_SYSTEM_NAME=OFF\nZSETUID         DEFAULT_USERID_DISP=OFF\nZDEFPPAN        Default_Primary_Panel=ISP@MSTR\nPDFDLIBD        DEFAULT_LIBDEF_PROCESSING_OPTION=UNCOND\nzchareur        Enable_Euro_Symbol=No\nchareurf        Reset_Enable_Euro_Symbol=No\nzdatefd         Date_Format_Zdatefd=DEFAULT\nzdatef          Date_Format_Zdatef=DEFAULT\nZTSEP           Default_Time_Separator=D\n*GROUP ISPSPROF Workstation Defaults\nzguiappc        Gui_Appc_Address=None\nzguiapp2        Gui_Appc_Address2=None\nzguiapp3        Gui_Appc_Address3=None\nzguiapp4        Gui_Appc_Address4=None\nzguiapp5        Gui_Appc_Address5=None\nzguicl          Gui_Close_Window=1\nzguien          Gui_Display_Enter_Key=Yes\nzguifr          Gui_Window_Frame=1\nzguinet         Gui_Network=1\nzguion          Gui_Switch=1\nzguisave        Save_Gui_Values=Yes\nzguitcp         Gui_Tcp_Address=None\nzguitcp2        Gui_Tcp_Address2=None\nzguitcp3        Gui_Tcp_Address3=None\nzguitcp4        Gui_Tcp_Address4=None\nzguitcp5        Gui_Tcp_Address5=None\nzguitit         Gui_Title=None\nZGAPPN          GUI_APPLICATION_NAME=NONE\nZGMAXWAT        WEB_SERVER_MAX_WAIT=0\nzguiaccl        Gui_Accelerator_Support=Yes\nzguicdpg        Host_Code_Page=0000\nguicdpgf        Reset_Host_Code_Page=No\nzguichst        Host_Character_Set=0000\nguichstf        Reset_Host_Character_Set=No\nzguidbc         Gui_Default_Background_Color=1\nzguidown        Gui_Download_Images=Yes\nzguimpth        Gui_Makepath_For_Images=No\nzgui3270        Continue_3270_After_Loss_Of_WS_Connection=Yes\n*GROUP ISPSPROF Workstation Download Defaults\nzdtvopt         Wsa_Download_Option=1\nzwsawarn        Wsa_Down_Level_Warning=Yes\nzwsdadd         Wsa_Download_Ftp_Address=None\nzwsdbro         Browse_Ftp_Errors=Yes\nzwsdcre         Create_Directory_On_Wsa_Download=No\nzwsddir         Wsa_Download_Directory=None\nzwsdmthd        Wsa_Download_Method=None\nzwsdpds         Wsa_Download_Data_Set='ISP.SISPGUI'\nwsdpdsf         Reset_Wsa_Download_Data_Set=No\nzwsdplat        Wsa_Download_Platform=None\nzwsdusr         Wsa_Download_Ftp_User=None\n*GROUP VALID KEYWORDS NOT SHOWN BY IBM\nLoglrecl        Log_Data_Set_Record_Length=125\nPDFC0LRC        ISPCTL0_RECORD_LENGTH=80\nTcntlrcl        Record_Length_For_Temporary_Cntl_Data_Sets=80\nTlstlrcl        Record_Length_For_Temporary_List_Data_Sets=121\nTwrklrcl        Record_Length_For_Temporary_Work_Data_Sets=256\n**End   -- Do Not Change This Comment Line!!!                       */\n\n/*   keywords required but missing for ISPF 4.8  ............ Ron  */\nLMFSVCNO        LMF_SVC_NUMBER=109\n\n/*   default vaues changed migrating from ISPF 4.8 -> 5.0 ... Ron  */\nSupclblk        Superc_List_Data_Set_Block_Size=0\nSupcublk        Superc_Update_Data_Set_Block_Size=0\nSupcpblk        Superc_Profile_Data_Set_Block_Size=0\nSupcsblk        Superc_Statements_Data_Set_Block_Size=0\n\n/*   old keywords removed migrating from ISPF 4.8 -> 5.0 .... Ron  */\nZGAPPN          GUI_APPLICATION_NAME=NONE\nZGMAXWAT        WEB_SERVER_MAX_WAIT=0\n\n/*   LMF keywords removed migrating from ISPF 5.0 -> 5.2 .... Ron  */\n*GROUP LMF Control Status data set specifications\nCblksize        Control_Status_Block_Size=13600\nClrecl          Control_Status_Record_Length=160\nCsize           Control_Status_Lines_Per_Page=50\nCprimqty        Control_Status_Primary_Quantity=200\nCsecqty         Control_Status_Secondary_Quantity=100\nCdblks          Control_Status_Directory_Blocks=10\n*GROUP LMF Member Status data set specifications\nMblksize        Member_Status_Block_Size=13600\nMlrecl          Member_Status_Record_Length=160\nMsize           Member_Status_Lines_Per_Page=50\nMprimqty        Member_Status_Primary_Quantity=200\nMsecqty         Member_Status_Secondary_Quantity=100\nMdblks          Member_Status_Directory_Blocks=10\n\n/*   new keywords added migrating from ISPF 5.0 -> 5.2 .... Ron  */\n*GROUP LMF\nlmflock         fail_on_lmf_lock=Yes\neditcutdef      Edit_Cut_Default=Replace\neditpasdef      Edit_Paste_Default=Keep\nzcnvdsc         Scroll_Default=Page\nzcnvdst         Status_Area_Default=SES\n\n/*   keywords required but missing for ISPF 5.2  ....... Ron  */\nPDFFVBRL        FORCE_PRESERVE_VB_RECORD_LENGTH=NO\nPDFEVBRL        PRESERVE_VB_RECORD_LENGTH=NO\n\n/*   corrected the following keywords for ISPF 5.2  .... Ron  */\n  Wrong       Right         Description\n----------  --------  ------------------------------------------\nSupcslpr    SUPCLSPR  Superc_Listing_Primary_Quanity=50\nSupcslsc    SUPCLSSC  Superc_Listing_Secondary_Quanity=100\nSupcsupr    SUPCUPPR  Superc_Update_Primary_Quanity=15\nSupcsusc    SUPCUPSC  Superc_Update_Secondary_Quanity=30\nEditvbwarn  TRUNCWRN  Warn_On_Truncation_Of_Trailing_Blanks=Yes\neditcutdef  EDITCUT   Edit_Cut_Default=Replace\neditpasdef  EDITPAST  Edit_Paste_Default=Keep\nvsamedite   VSAMEE    Vsam_Edit_Enabled=No\nvsameditc   VSAMEC    Vsam_Edit_Command=Ditto ve /\nvsambrowsee VSAMBE    Vsam_Browse_Enabled=No\nvsambrowsec VSAMBC    Vsam_Browse_Command=Ditto vb /\nvsamviewe   VSAMVE    Vsam_View_Enabled=No\nvsamviewc   VSAMVC    Vsam_View_Command=Ditto vb /\nzcnvdsc     PDFDSCRL  Scroll_Default=Page\nzcnvdst     PDFDSTAT  Status_Area_Default=SES\nPdsopr1     PDSOPR    Printds_Dest_Or_Writer_Option=Dest\nPdsopr2     PDSOPR    Printds_Dest_Or_Writer_Option=Writer\nLocalprt    LOCALPR1  Local_Printds_Options=Nonum\nPdfdhlq     OPT34HLQ  Disallow_Wildcards_In_HLQ=No\ntbadd#      TBADDROW  Number_Of_Rows_For_Tbadd=1\nretrcmdsz   RETCMDSZ  Retrieve_Command_Stack_Size=512\nispfexits   ISPFEXIT  Enable_Ispf_Exits=No\ntcpipdata   TCPDATA   Sas/c_Tcpip_Data_Value=Default\ntcpippref   TCPPREF   Sas/c_Tcpip_Prefix_Value=Default\nmvsoe       USEOE     Use_Mvs_Open_Edition_Sockets=NO\nzframc      ZFRAMIC   Frame_Color=1\nzframi      ZFRAMIC   Frame_Intensity=2\nzcnvtdpp    ZDEFPPAN  Default_Primary_Panel=ISP@MSTR\nztimesep    ZTSEP     Default_Time_Separator=D\n\n/*   keywords added for ISPF 5.2 + APAR OW56583 (z/OS 1.4)... Ron  */\nRFNDCHG         FORCE_ISRE776_FOR_CHANGE=NO\n\n/*   keywords added for ISPF 5.5 ....................... Ron  */\nPDFDSML         SCROLL_MEMBER_LIST=YES\nPDFDSMLF        RESET_SCROLL_MEMBER_LIST=NO\nPDFDSMIN        SCROLL_MIN=0\nPDFDSMAX        SCROLL_MAX=9999\nPDFDSCVR        RESET_SCROLL_VALUE=NO\nUSR2CMDS        APPLID_FOR_USER_COMMAND_TABLE=NONE\nUSR3CMDS        APPLID_FOR_USER_COMMAND_TABLE=NONE\nSIT2CMDS        APPLID_FOR_SITE_COMMAND_TABLE=NONE\nSIT3CMDS        APPLID_FOR_SITE_COMMAND_TABLE=NONE\n\n/*   keywords added for ISPF 5.6  ...................... Ron  */\nPDFDPDSE        DISPLAY_EMPTY_MEMBER_LIST=NO\nPDFDPDSP        DISPLAY_EMPTY_MEMBER_LIST_PATTERN=NO\nPDFDPDSF        DISPLAY_EMPTY_MEMBER_LIST_FUNCTION=YES\nPDFDPDSR        RESET_EMPTY_MEMBER_LIST_OPTIONS=NO\nPDFC0BLK        ISPCTL0_BLOCK_SIZE=800\nPDFCT0PQ        ISPCTL0_PRIMARY_QUANTITY=10\nPDFCT0SQ        ISPCTL0_SECONDARY_QUANTITY=100\nPDFLSXPQ        ISPLST_PRIMARY_QUANTITY=10\nPDFLSXSQ        ISPLST_SECONDARY_QUANTITY=100\n\n/*   keywords defined but left out for ISPF 5.6  ....... Ron  */\nPDFC0LRC        ISPCTL0_RECORD_LENGTH=80\n\n/*   keywords added for ISPF 5.7  ...................... Ron  */\nZSETSSD         DEFAULT_SYSTEM_NAME=OFF\nZSETUID         DEFAULT_USERID_DISP=OFF\nPDFDLIBD        DEFAULT_LIBDEF_PROCESSING_OPTION=UNCOND\n\n/*   keyword changed for ISPF 5.7  ...................... Ron  */\nUSEOE           Use_Mvs_Open_Edition_Sockets=NO     (old name)\nUSEOE           USE_ZOS_UNIX_SOCKETS=NO             (new name)\n\n/*** FUTURE CHANGES ***/\n/*   keywords added for ISPF 5.8  ...................... Ron  */\n????????        DSLIST_RM_ENABLED=NO\n????????        DSLIST_RM_COMMAND=%EDGRPD034\n????????        DSLIST_RM_APPLID=EDG\n????????        HILITE_MARGIN_C=(*,*)\n????????        HILITE_MARGIN_PLI=(*,*)\n????????        HILITE_MARGIN_PLX=(*,*)\n????????        PATHNAME_SUBSTITUTION_CHARACTER=|\n\n/*   keywords removed in ISPF 5.8  ...................... Ron  */\nTCPDATA         Sas/c_Tcpip_Data_Value=Default\nTCPPREF         Sas/c_Tcpip_Prefix_Value=Default\nUSEOE           USE_ZOS_UNIX_SOCKETS=NO\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JSPPCONF": {"ttr": 4872, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x0f\\x005\\x01\\x02\\x16/\\x01\\x07\\x11?\\x17'\\x00`\\x00[\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@\"", "ispf": {"version": "01.15", "flags": 0, "createdate": "2002-06-11T00:00:00", "modifydate": "2007-04-23T17:27:35", "lines": 96, "newlines": 91, "modlines": 0, "user": "ZARBRO0"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "JSPPC000": {"ttr": 4875, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00V\\x01\\x07\\x01\\x1f\\x01\\x07\\x11?\\x171\\x00<\\x008\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2007-01-11T00:00:00", "modifydate": "2007-04-23T17:31:56", "lines": 60, "newlines": 56, "modlines": 0, "user": "ZARBRO0"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "JSPPC001": {"ttr": 4877, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x08\\x01\\x07\\x01\\x1f\\x01\\x07\\x11?\\x171\\x000\\x00+\\x00\\x00\\xe9\\xc1\\xd9\\xc2\\xd9\\xd6\\xf0@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2007-01-11T00:00:00", "modifydate": "2007-04-23T17:31:08", "lines": 48, "newlines": 43, "modlines": 0, "user": "ZARBRO0"}, "text": ")PANEL KEYLIST(ISRHLP2,ISR)\n)ATTR DEFAULT(%+~) FORMAT(MIX)            /* ISPPC110 - ENGLISH - 5.5 */\n {  TYPE(PT)\n #  TYPE(FP)\n $  TYPE(NT)\n *  TYPE(ET)\n 26 TYPE(NEF) CAPS(ON) PADC(USER)\n 27 AREA(SCRL) EXTEND(ON)\n)BODY  EXPAND(\\\\) CMD(ZCMD)\n{Tutorial{\\-\\ Extended ISPF Configuration Utility - Enhancements \\-\\Tutorial\n#Command ===>\u0017Z                                                                $\n\u001bSAREA39                                                                       \u001b\n)AREA SAREA39\n$With this extension of the IBM dialog you will be able to check your own\n$active ISPF configuration, customise it however you want, and not affect\n$anyone else's configuration.\n$\n$The differences from the standard Configuration Utility are:                  $\n$\n$o*  Option 0$has been added.  It generates a Keyword file from the ACTIVE\n$    ISPF configuration module ISPCFIGU.  First a matching assembly source\n$    file is generated, then that is converted to an equivalent Keyword\n$    file using the same program as Option 5.\n$\n$o*  Option 5$has been updated. A replacement program is used which can\n$    create a valid Keyword file for whatever version of ISPF is active,\n$    from OS/390 2.8 (ISPF 4.8) up to z/OS 1.7 (ISPF 5.7).\n$\n$o$  Field*Debug$has been added to invoke the standard debugging in the IBM\n$    programs.  In the case of the new Option 0, Debug='YES' will show the\n$    generated assembly source before it converts that to the Keyword file.\n$\n$  The standard Utility Option 4 uses skeleton ISPCSKEL to create assembly\n$  source for creating an ISPCFIGU module.  The new Option 0 uses the same\n$  skeleton as a map to reverse engineer your active ISPCFIGU module into\n$  the correct fields in a generated matching assembly source.\n$\n$\n$  For any more information contact Ron Brown at:*Ron_Brown@hotmail.com\n$\n$  The following HELP panels, describe the standard Configuration Utility.\n$\n)INIT\n.ZVARS = '(ZCMD)'\n&ZCMD = ' '\n)PROC\n&ZUP = JSPPC000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT739/FILE739.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT739", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}