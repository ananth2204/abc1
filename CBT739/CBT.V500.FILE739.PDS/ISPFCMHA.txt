)PANEL KEYLIST(ISRHLP2,ISR)
/*-------------------------- ISPFCMHA --------------------------------*/
/*  HELP Panel for display of ISPF commands (ISPFCMDS)                */
/*  - displayed by exec ISPFCMDS ("ISPF Commands" tool)   Version 7.0 */
/*  - from panel ISPFCMD0.  Panel ISPFCMH1 follows.                   */
/*--------------------------------------------------------------------*/
)ATTR DEFAULT(%+_)
¬ TYPE(OUTPUT) INTENS(HIGH) COLOR(RED) PADC(_)
} TYPE(OUTPUT) INTENS(HIGH) COLOR(RED) PADC(-)
° TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW)
ó TYPE(OUTPUT) INTENS(HIGH) COLOR(TURQ) CAPS(OFF) SKIP(ON)
ß TYPE(OUTPUT) INTENS(HIGH) COLOR(RED)
# TYPE(TEXT)   INTENS(HIGH) COLOR(YELLOW)
$ TYPE(TEXT)   INTENS(HIGH) COLOR(TURQ)
@ TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)
~ TYPE(TEXT)   INTENS(LOW)  COLOR(RED)
§ AREA(SCRL) EXTEND(ON)
)BODY EXPAND(ÖÖ)
+HELP-Ö-Ö-#ISPF Commands+-Ö-Ö-HELP
+Command ===>_ZCMD
%                                  ALIAS
+
§INFO                                                                          §
)AREA INFO
@When the#ALIAS@command is used the list is refreshed to display only those
@commands which use the ALIAS action or are used by the ALIAS action in another
@command.
+
@Initially the list will display the command Actions and be sorted into logical
@groups of commands, to help you see the ALIAS relationships.  In each group
@the ALIAS command(s) is first, followed by the command which is invoked.
+
@The$V@line command will show the effective action of any ALIAS command.
+
@The#RES@command will reset this list to ALL commands (in your selected tables).
+
#Examples
#--------
@Command  Table  Description / Action
~-------  ----- ----------------------------------- @Sorted by~STANDARD ORDER
+ #CAT    $USER+invokes PUSSY  eg. 'CAT' -> CMD(PUSS) or 'CAT x' -> CMD(PUSS x)
+         ~ALIAS PUSSY
+ #PUSSY  $USER+invoked by 'PUSSY' or 'CAT'
+         ~CMD(PUSS &&ZPARM)
+ #BARK   $USER+invokes DOGGY -> PGM(SAY) PARM(WOOF WOOF)
+         ~ALIAS DOG WOOF WOOF
+ #DOGGY  $USER+invoked by BARK, or directly by DOG, DOGG or DOGGY
~  ---     PGM(SAY) PARM(&&ZPARM)
+ #ZERO   $USER+invoked by 'ZERO'
+         ~PGM(NIL)
+ #ZIP    $USER+does nothing because there's no ZERO command after this one
+         ~ALIAS ZERO
+ #ASS    $USER+invokes BUM, which invokes BOTTOM, which invokes 'DOWN MAX'
+         ~ALIAS BUM JUNK
%*#BOTTOM $USER+overrides BOTTOM in ISPCMDS. Invoked by BOT, BOTT, BOTTO, BOTTOM
~  ---     PANEL(LOWEST)
+ #BUM    $USER+invokes BOTTOM in ISPCMDS. (any parm is ignored by BOTTOM)
+         ~ALIAS BOTTOM
%-#BOTTOM $ISP +can only be invoked by 'ASS' or 'BUM'
+         ~ALIAS DOWN MAX
+ #DOWN   $ISP +
+         ~SETVERB
+
#Command Order and Truncation
#----------------------------
@The order of the commands is important.  An ALIAS action will search through
 the FOLLOWING commands for the first matching command.  Therefore the example
 ZIP command finds no match, and command BOTTOM in table ISPCMDS is overridden
 but it is still used by BUM.

 Truncation is always checked when ISPF searches for a matching command.  For
 example: command BARK searches for a command 'DOG' and finds that the 'DOGGY'
 command matches because of its truncation.
+
#Passing Parameters
#------------------
@Commands with an ALIAS action can pass parameters.  If the defined Action has
 no parameters - you can specify some with the command (like CAT above).
 But if the Action definition includes any parameters they will be passed, and
 any parameters specified by the user will be ignored; see BARK above - if the
 user enters 'BARK xxxx' it still invokes 'PGM(SAY) PARM(WOOF WOOF)'.

 That also applies when there is a chain of ALIAS actions.  If the user enters
 'BUM xx', the 'xx' would be passed to BOTTOM, but it would then pass 'MAX' to
 DOWN.  If the user enters 'ASS xxx' it would pass 'JUNK' to BUM, and BUM would
 pass 'JUNK' to BOTTOM, which would then pass 'MAX' to DOWN.

+
+                   Press ENTER for more HELP information
+
)INIT
 &ZCONT = ISPFCMH0
 VGET ZKLUSE PROFILE
 &KLUSE = &ZKLUSE
 IF (&ZKLUSE = N)                      /* user has KEYLIST OFF */
     &ZKLUSE = Y                       /* turn it ON           */
     VPUT ZKLUSE PROFILE
)PROC
 IF (.RESP = END)
     IF (&KLUSE = N)                   /* user had KEYLIST OFF */
         &ZKLUSE = N                   /* turn it OFF again    */
         VPUT ZKLUSE PROFILE
)END
