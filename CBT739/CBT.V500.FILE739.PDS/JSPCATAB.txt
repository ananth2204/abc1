/*****************************> REXX <*********************************/
/* JSPCATAB: Build keyword file for the active ISPF config table      */
/*                                                                    */
/* 1 Program LOADPNT used to find address of ISPCFIGU module.         */
/* 2 Find standard IBM skeleton ISPCSKEL and use it to map the ISPF   */
/*     configuration module ISPCFIGU and generate ASM statements.     */
/* 3 If in DEBUG mode - invoke EDIT of generated ASM file.            */
/* 4 Call exec JSPCCONV to convert ASM statements to keyword file.    */
/*                                                                    */
/* Created: 29 May 2002    by: Ron Brown                              */
/* Updated: 10 Jan 2007    by: Ron Brown        Version: 2.0          */
/**********************************************************************/
  Trace O
  Parse Upper Arg debug
  numeric digits 20
  Address ISPEXEC
  skel = 'ISPCSKEL'      /* standard IBM skeleton in SISPSLIB library */

  /*-------------------------------------------------------*/
  /* Find location of ISPF configuration module in storage */
  /*-------------------------------------------------------*/
  pgm_addr = LOADPNT('ISPCFIGU')     /* get pgm load address    */
  dec_addr = X2D(C2X(pgm_addr))
  If dec_addr > 0 Then              /* if program is loaded .. */
     offset = 0
  Else Do
     Call ISPF_MSG('No ISPCFIGU module found, ISPF is running with',
                   'the default configuration.      ',
                   'You can use option 1 to generate a default',
                   'Keyword File.')
     Exit 4
     End

  /*--------------------------------------------------------------*/
  /* Load skeleton into 'inskel.' array, and allocate output file */
  /*--------------------------------------------------------------*/
  skel_rc = GET_SKELETON()       /* load skeleton into 'inskel.' */
  If skel_rc > 0 Then Exit 4

  asma_rc = ALLOC_OUTPUT()       /* allocate file for asm output */
  If asma_rc > 0 Then Exit 4

  /*----------------------------------------------------------*/
  /* Process the skeleton, creating output in 'outasm.' array */
  /*----------------------------------------------------------*/
  j = 0
  Do i = 1 To inskel.0
     Select
       When Left(inskel.i,3) = ')CM' Then Iterate  /* ignore comment */
       When Word(inskel.i,1) <> 'DC' ,
          & Word(inskel.i,2) <> 'DC' Then Do
          j = j + 1
          outasm.j = inskel.i
          End
       Otherwise Call PROCESS_DC
       End
     End

  /*------------------------------------------------------*/
  /* write output to disk, and (optionally) EDIT the file */
  /*------------------------------------------------------*/
  Address TSO "EXECIO * DISKW ICONFASM (FINIS STEM outasm."
  write_rc = rc
  If write_rc <> 0 Then Do
     Call ISPF_MSG('Unable to write assembler output file' asmout,
                   '    return code =' write_rc)
     End
  Else If debug = 'DEBUG' Then   /* if DEBUG - edit assembler file */
     Call EDIT_ASM_FILE

  Address TSO "FREE FILE(ICONFASM)"

  /*-------------------------------------------------------------*/
  /* Call exec to convert the assembler source to a Keyword File */
  /*-------------------------------------------------------------*/
  If write_rc = 0 Then
     Address TSO "%JSPCCONV" ispf_ver

  Exit         /* That's all folks */


  /*=================================================================*/
  /* setup an ISPF (long) message                                    */
  /*-----------------------------------------------------------------*/
 ISPF_MSG:
   Parse Arg ZERRLM
   ZERRSM   = ''
   ZERRALRM = 'YES'
   ZERRHM   = '*'
   "SETMSG MSG(ISRZ002)"
   Return

  /*=================================================================*/
  /* load the skeleton into array inskel.                            */
  /*-----------------------------------------------------------------*/
 GET_SKELETON:
  "FTOPEN TEMP"                /* output -> DDNAME in ZTEMPN variable */
  "FTINCL" skel "NOFT" /* no variable susbstitution or interpretation */
  incl_rc = rc
  "FTCLOSE"
  If incl_rc > 0 Then Do
     Call ISPF_MSG('Unable to read' skel 'skeleton.  FTINCL',
                   'return code =' incl_rc )
     Return incl_rc
     End
  "VGET ZTEMPN"
  Address TSO "EXECIO * DISKR" ZTEMPN "(FINIS STEM inskel."
  read_rc = rc
  If read_rc <> 0 Then
     Call ISPF_MSG('Unable to read' skel 'skeleton. EXECIO rc='read_rc)
  Else If inskel.0 = 0 Then Do
     Call ISPF_MSG('The' skel 'skeleton is empty; unable to continue')
     read_rc = 4
     End
  Select    /* relating the skeleton to an ISPF version */
    When inskel.0 = 448 Then ispf_ver = '4.8'  /* OS/390 2.8          */
    When inskel.0 = 480 Then ispf_ver = '5.0'  /* OS/390 2.10         */
    When inskel.0 = 490 Then ispf_ver = '5.2'  /* ISPF 5.2 - z/OS 1.2 */
    When inskel.0 = 494 Then ispf_ver = '5.2+' /* ISPF 5.2 - z/OS 1.4 */
    When inskel.0 = 517 Then ispf_ver = '5.5'  /* ISPF 5.5 - z/OS 1.5 */
    When inskel.0 = 533 Then ispf_ver = '5.6'  /* ISPF 5.6 - z/OS 1.6 */
    When inskel.0 = 543 Then ispf_ver = '5.7'  /* ISPF 5.7 - z/OS 1.7 */
    When inskel.0 > 543 Then ispf_ver = '5.8'  /* ISPF 5.8 - z/OS 1.8 */
    Otherwise
       ispf_ver = '4.5'
    End

  Return read_rc

  /*=================================================================*/
  /* edit the generated assembler file (matching ISPFIGU module)     */
  /*-----------------------------------------------------------------*/
 EDIT_ASM_FILE:
  "CONTROL REFLIST NOUPDATE"
  "LMINIT DATAID(data1) DATASET("zcnvsrce")"
  IF ZERRMSG <> 'ZERRMSG' Then
     "SETMSG MSG(ZERRMSG)"
  Else Do
     "EDIT DATAID("data1") MEMBER("zcnvsrcm")"
     "LMFREE DATAID("data1")"
     End
  "CONTROL REFLIST UPDATE"
  Return

  /*=================================================================*/
  /* allocate output file (assembler mapping of the active table)    */
  /*-----------------------------------------------------------------*/
 ALLOC_OUTPUT:
  "VGET (ZCNVSRCE ZCNVSRCM) PROFILE"
  If zcnvsrcm <> '' Then
    If Left(zcnvsrce,1) = "'" Then
      asmout = Strip(zcnvsrce,'T',"'")"("zcnvsrcm")'"
    Else
      asmout = zcnvsrce"("zcnvsrcm")"
  Else
    asmout = zcnvsrce
  exists = Sysdsn(asmout)
  If exists = 'OK' | exists = 'MEMBER NOT FOUND'
     Then alloc_info = "SHR"
     Else alloc_info = "NEW UNIT(SYSDA) SPACE(1 1) TRACKS RECFM(F B)",
                      "LRECL(80) DSORG(PS)"

  Address TSO "ALLOC FILE(ICONFASM) DSN("asmout")" alloc_info "REUSE"
  alloc_rc = rc
  If alloc_rc > 0 Then
     Call ISPF_MSG('Unable to allocate assembler output file',
                   asmout '               ',
                   "ALLOC FILE("skel") DSN('"lib"("skel")') SHR REU" v)

  Return alloc_rc

  /*=================================================================*/
  /* process an assembler DC statement                               */
  /*-----------------------------------------------------------------*/
 PROCESS_DC:
  j = j + 1
  Parse Var inskel.i defn '&' .
  Parse Var inskel.i ' DC' type .
  Select
    /*---------*/
    /* ADDRESS */
    /*---------*/
    When Left(type,1) = 'A' Then Do
       Parse Var type 'AL' leng '(' rest
       chars = GET_STOR()
       dec = X2D(C2X(chars))
       newdef = 'AL'leng"("dec")                 "
       dpos = Pos('  AL',inskel.i) + 2
       End
    /*-----------*/
    /* CHARACTER */
    /*-----------*/
    When Left(type,1) = 'C' Then Do
       Parse Var type 'CL' leng '&' rest
       Parse Var leng leng "'" .
       chars = GET_STOR()
       chars = Strip(chars,'T')         /* remove trailing blanks */
       If chars = ' ' Then chars = ' '  /* for long blank strings */
       qpos = Pos("'",chars)            /* double any quotes: ' */
       If qpos > 0 Then Do until qpos = 0
          chars = Left(chars,qpos)||Substr(chars,qpos)
          qpos = Pos("'",chars,qpos+2)
          End
       apos = Pos("&",chars)            /* double any ands: & */
       If apos > 0 Then Do until apos = 0
          chars = Left(chars,apos)||Substr(chars,apos)
          apos = Pos("'",chars,apos+2)
          End
       newdef = 'CL'leng"'"chars"'                 "
       dpos = Pos('  CL',inskel.i) + 2
       End
    /*----------*/
    /* FULLWORD */
    /*----------*/
    When Left(type,1) = 'F' Then Do
       If Substr(type,2,1) = 'L'
          Then Parse Var type 'FL' leng '&' rest
          Else leng = 4
       remain = offset // leng
       If remain > 0 Then offset = offset + leng - remain
       chars = GET_STOR()
       dec = X2D(C2X(chars))
       If leng = 4
          Then newdef = "F'"dec"'        "
          Else newdef = "FL"leng"'"dec"'        "
       dpos = Pos('  F',inskel.i) + 2
       End
    /*----------*/
    /* HALFWORD */
    /*----------*/
    When Left(type,1) = 'H' Then Do
       leng = 2
       chars = GET_STOR()
       dec = X2D(C2X(chars))
       newdef = "H'"dec"'       "
       dpos = Pos('  H',inskel.i) + 2
       End
    /*-------------*/
    /* HEXIDECIMAL */
    /*-------------*/
    When Left(type,1) = 'X' Then Do
       Parse Var type 'XL' leng '&' rest
       chars = GET_STOR()
       hex = C2X(chars)
       newdef = 'XL'leng"'"hex"'                 "
       dpos = Pos('  XL',inskel.i) + 2
       End
    /*-------------------------------*/
    /* All the rest remain unchanged */
    /*-------------------------------*/
    Otherwise
       outasm.j = defn
       Return
    End
  /*---------------------------------------------*/
  /* Update the line with the value from storage */
  /*---------------------------------------------*/
  outasm.j = Overlay(newdef,inskel.i,dpos)
  offset = offset + leng   /* point offset to next field in storage */
  Return

  /*=================================================================*/
  /* get the required bytes from storage                             */
  /*-----------------------------------------------------------------*/
 GET_STOR:
   addr = D2X(dec_addr + offset)
   chars = Storage(addr,leng)
   Return chars
