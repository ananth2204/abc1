{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012755000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE774.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE774.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x02\\x13'", "DS1TRBAL": "b'\\n\\xc2'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05J\\x00\\x04\\x05J\\x00\\x06\\x00\\x03'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04K\\x00\\x00\\x01\\x075?\\x01\\x075?!\\x05\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf5@@@'", "ispf": {"version": "04.75", "flags": 0, "createdate": "2007-12-19T00:00:00", "modifydate": "2007-12-19T21:05:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-475"}, "text": "REGULAR CBT TAPE - VERSION 475    FILE:  774\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT475.FILE774\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 5 MEMBERS COUNTED; CUMULATIVE SIZE IS 511 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/19/07    21:05:14    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00S\\x01\\x074\\x1f\\x01\\x074\\x1f\\t2\\x00\\x15\\x00\\x15\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-12-07T00:00:00", "modifydate": "2007-12-07T09:32:53", "lines": 21, "newlines": 21, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:     Emailing: compress.asc\nFrom:        \"Rice, Richard L\" <Richard.L.Rice@conocophillips.com>\nDate:        Fri, 07 Dec 2007 06:24:42 -0500\nTo:          sbgolob@cbttape.org\n\n <<compress.asc>>\nSam,\nThis is a small extension to the CBT compression.\nIt hit me that in the right situation, a source type record could be\n'compressed' to 1 byte.  If the compressed data length is exactly 5,\nThen it means that the entire record contains the same character in all\n80 bytes.  All you need to save is the character that is repeated.\n\nThe advantage is that the output will always be the same or smaller..\nNever\nLarger than the compression being used now and the decompress will\nStill work for any data already compressed by the older technique.\n\n\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE774": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04K\\x00\\x00\\x01\\x075?\\x01\\x075?!\\x05\\x00\\x12\\x00\\x12\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf5@@@'", "ispf": {"version": "04.75", "flags": 0, "createdate": "2007-12-19T00:00:00", "modifydate": "2007-12-19T21:05:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "CBT-475"}, "text": "//***FILE 774 is from Richard L. Rice and contains a compression-   *   FILE 774\n//*           decompression program that is similar in function     *   FILE 774\n//*           to the CBT973 compression program which is used to    *   FILE 774\n//*           make the (actual) CBT Tape.  This program extends     *   FILE 774\n//*           the compression algorithm if all 80 bytes from the    *   FILE 774\n//*           input record are the same.                            *   FILE 774\n//*                                                                 *   FILE 774\n//*           This program is not being used \"officially\" to        *   FILE 774\n//*           produce the CBT Tapes (at this point), because some   *   FILE 774\n//*           administrative issues have yet to be resolved.  But   *   FILE 774\n//*           it is being presented here for the enjoyment of all.  *   FILE 774\n//*           You can use it to decompress files from the existing  *   FILE 774\n//*           CBT Tapes.                                            *   FILE 774\n//*                                                                 *   FILE 774\n//*           Thanks, Richard !!                                    *   FILE 774\n//*                                                                 *   FILE 774\n//*   email: \"Rice, Richard L\" <Richard.L.Rice@conocophillips.com>  *   FILE 774\n//*                                                                 *   FILE 774\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COMPRESS": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00W\\x01\\x074\\x1f\\x01\\x074\\x1f\\t3\\x00\\xe4\\x00\\xea\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2007-12-07T00:00:00", "modifydate": "2007-12-07T09:33:57", "lines": 228, "newlines": 234, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*     Data compression                                                *\n*                                                                     *\n*     This is a small extension of the CBT compression.               *\n*     CBT compression uses a bit map to indicate blank or non-blank   *\n*     characters.  This results in variable length records with       *\n*     record lengths ranging from 14 to 94.  By adding a small        *\n*     amount of logic, it is possible to reduce the record length     *\n*     to 5 in specific cases.  This subroutine can decompress         *\n*     data from the older 14-to-94 byte technique.                    *\n*                                                                     *\n*     This subroutine is 31-bit, reentrant, uses no external work     *\n*     area.                                                           *\n*                                                                     *\n*                                                                     *\n*     There are two forms of compressed data                          *\n*                                                                     *\n*     If a source record contains the same character repeated in      *\n*     all 80 columns, the compressed record length will be 5 bytes.   *\n*     Bytes 1-4 are normal variable length record length (two bytes   *\n*     of length and two bytes of zeros).  The fifth byte is the       *\n*     character that was repeated in all 80 bytes of the source.      *\n*                                                                     *\n*                                                                     *\n*     If a source record does not contain the same character in all   *\n*     80 bytes, a bit map is created the indicates which bytes in     *\n*     the source record were non-blank.  A zero in the bit map        *\n*     indicates a blank in the source, a one in the bit map           *\n*     indicates a non-blank in the source.                            *\n*                                                                     *\n*                                                                     *\n*     Compressed data will have record lengths 5 or 14-94.            *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*     At entry R0 is the function code                                *\n*              R1 address of parms                                    *\n*                                                                     *\n*                                                                     *\n*     Function codes:                                                 *\n*         zero      compress                                          *\n*         non-zero  de-compress                                       *\n*                                                                     *\n*                                                                     *\n*     Parm list:                                                      *\n*         +0     address of source record                             *\n*         +4     address of compressed data                           *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   Source record is 80-bytes                                         *\n*                                                                     *\n*                                                                     *\n*   Compressed record is VB form record:                              *\n*                                                                     *\n*     bytes                                                           *\n*      1-2       length of this                                       *\n*      3-4       binary zeros                                         *\n*      5-14      bit map                                              *\n*      15-94     non-blank characters from source                     *\n*                                                                     *\n*       or                                                            *\n*                                                                     *\n*     bytes                                                           *\n*      1-2       length of this                                       *\n*      3-4       binary zeros                                         *\n*      5         character repeated in all 80 bytes of source data    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*  ----------------------------------------------------------------   *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*     Sample of code to call for compress:                            *\n*                                                                     *\n*       SR    R0,R0                                                   *\n*       LA    R1,COMPRESS_PARMS                                       *\n*       L     R15,V_COMPRESS                                          *\n*       BALR  R14,R15                                                 *\n*                                                                     *\n*                                                                     *\n*    Sample of code to call for de-compress:                          *\n*                                                                     *\n*       LA    R0,1                                                    *\n*       LA    R1,COMPRESS_PARMS                                       *\n*       L     R15,V_COMPRESS                                          *\n*       BALR  R14,R15                                                 *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*     V_COMPRESS          DC   V(COMPRESS)                            *\n*     COMPRESS_PARMS      DS   0A                                     *\n*                         DC   A(UNCOMPRESSED_DATA)                   *\n*                         DC   A(COMPRESSED_DATA)                     *\n*     UNCOMPRESSED_DATA   DC   CL80' '                                *\n*     COMPRESSED_DATA     DC   CL94' '                                *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOMPRESS CSECT\nCOMPRESS AMODE 31\nCOMPRESS RMODE ANY\n         USING COMPRESS,R15\n         STM   R14,R12,12(R13)           SAVE REGISTERS\n         B     INIT0000\n         DC    CL8'COMPRESS'\n         DC    CL6'&SYSDATE'\n         DC    CL6'&SYSTIME'\nINIT0000 DS    0H\n         LR    R12,R15                   COPY BASE\n         DROP  R15\n         USING COMPRESS,R12\n         LM    R10,R11,0(R1)             PARM ADDRESSES\n         USING COMPRESSED_RECORD,R11\n         LTR   R0,R0                     COMPRESS?\n         BNZ   MAIN1000                  NO\n* ------------------------------------------------------------------- *\n*        COMPRESS                                                     *\n* ------------------------------------------------------------------- *\n         XC    COMPRESSED_RECORD,COMPRESSED_RECORD\n         CLC   1(79,R10),0(R10)          SAME IN ALL 80 BYTES?\n         BE    MAIN0100                  YES\n         LA    R2,COMPRESSED_BITMAP      1ST BYTE OF BIT MAP\n         LA    R3,COMPRESSED_NONBLANK    1ST NON-BLANK DATA\n         LA    R4,10                     NBR OF BIT MAP BYTES\n         LA    R5,COMPRESSED_PREFIX_LENGTH INITIALIZE OUTPUT LENGTH\nMAIN0010 DS    0H\n         LA    R6,8                      BITS IN A BYTE\n         LA    R1,X'80'                  INITIALIZE BIT MASK\nMAIN0020 DS    0H\n         CLI   0(R10),C' '               BLANK?\n         BE    MAIN0030                  YES\n         EX    R1,OR_BIT                 USE LENGTH TEMPORARILY\n         MVC   0(1,R3),0(R10)            COPY DATA BYTE\n         LA    R3,1(,R3)                 NEXT IN NON-BLANK DATA\n         LA    R5,1(,R5)                 ADD TO OUTPUT LENGTH\nMAIN0030 DS    0H\n         SRL   R1,1                      SHIFT THE MASK\n         LA    R10,1(,R10)               NEXT IN SOURCE\n         BCT   R6,MAIN0020               LOOP FOR BITS IN BYTE\n         LA    R2,1(,R2)                 NEXT BIT MAP BYTE\n         BCT   R4,MAIN0010               LOOP FOR BYTES\n         STCM  R5,3,COMPRESSED_LENGTH    SET LENGTH\n         B     EXITEXIT\nMAIN0100 DS    0H\n         MVC   COMPRESSED_LENGTH,H5      SET LENGTH\n         MVC   COMPRESSED_BITMAP(1),0(R10) COPY REPEATED BYTE\n         B     EXITEXIT\n* ------------------------------------------------------------------- *\n*        DE-COMPRESS                                                  *\n* ------------------------------------------------------------------- *\nMAIN1000 DS    0H\n         CLC   COMPRESSED_LENGTH,H5      LENGTH = 5?\n         BE    MAIN1040                  YES\n         MVC   0(80,R10),BLANKS          INITIALIZE OUTPUT\n         LA    R2,COMPRESSED_BITMAP      1ST BYTE OF BIT MAP\n         LA    R3,COMPRESSED_NONBLANK    1ST NON-BLANK DATA\n         LA    R4,10                     NBR OF BIT MAP BYTES\nMAIN1010 DS    0H\n         LA    R6,8                      BITS IN A BYTE\n         LA    R1,X'80'                  INITIALIZE BIT MASK\nMAIN1020 DS    0H\n         EX    R1,TEST_BIT               THIS BIT ON?\n         BZ    MAIN1030                  NO\n         MVC   0(1,R10),0(R3)            COPY TO SOURCE RECORD\n         LA    R3,1(,R3)                 NEXT NON-BLANK\nMAIN1030 DS    0H\n         SRL   R1,1                      SHIFT MASK 1 BIT\n         LA    R10,1(,R10)               NEXT IN DE-COMPRESSED\n         BCT   R6,MAIN1020               LOOP FOR BITS IN BYTE\n         LA    R2,1(,R2)                 NEXT BIT MAP BYTE\n         BCT   R4,MAIN1010               LOOP FOR BYTES\n         B     EXITEXIT\nMAIN1040 DS    0H\n         MVC   0(1,R10),COMPRESSED_BITMAP\n         MVC   1(79,R10),0(R10)          REPEAT THE CHARACTER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXITEXIT DS    0H\n         LM    R14,R12,12(R13)           RESTORE REGISTERS\n         SR    R15,R15                   SET RC\n         BR    R14                       EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nOR_BIT   OI    0(R2),0                   SET BIT MAP BIT\nTEST_BIT TM    0(R2),0                   TEST BIT MAP BIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nH5       DC    H'5'\nBLANKS   DC    CL80' '\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOMPRESSED_RECORD        DS   0CL94\nCOMPRESSED_LENGTH        DS   XL2\n                         DS   XL2\nCOMPRESSED_BITMAP        DS   XL10\nCOMPRESSED_PREFIX_LENGTH EQU  *-COMPRESSED_RECORD\nCOMPRESSED_NONBLANK      DS   XL80\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nR0       EQU     0\nR1       EQU     1\nR2       EQU     2\nR3       EQU     3\nR4       EQU     4\nR5       EQU     5\nR6       EQU     6\nR7       EQU     7\nR8       EQU     8\nR9       EQU     9\nR10      EQU     10\nR11      EQU     11\nR12      EQU     12\nR13      EQU     13\nR14      EQU     14\nR15      EQU     15\n         END     COMPRESS\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COMPRS38": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x004\\x01\\x075?\\x01\\x075?!\\x04\\x00\\xe8\\x00\\xe4\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2007-12-19T00:00:00", "modifydate": "2007-12-19T21:04:34", "lines": 232, "newlines": 228, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*     This is a version that may assemble better with the IFOX00      *\n*     Assembler on MVS 3.8.  Of course the RMODE and AMODE statements *\n*     had to be commented out.  The long names have been changed to   *\n*     shorter ones, but I think there are no unsupported instructions *\n*     coded here.  (SBG)                                              *\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*     Data compression                                                *\n*                                                                     *\n*     This is a small extension of the CBT compression.               *\n*     CBT compression uses a bit map to indicate blank or non-blank   *\n*     characters.  This results in variable length records with       *\n*     record lengths ranging from 14 to 94.  By adding a small        *\n*     amount of logic, it is possible to reduce the record length     *\n*     to 5 in specific cases.  This subroutine can decompress         *\n*     data from the older 14-to-94 byte technique.                    *\n*                                                                     *\n*     This subroutine is 31-bit, reentrant, uses no external work     *\n*     area.                                                           *\n*                                                                     *\n*                                                                     *\n*     There are two forms of compressed data                          *\n*                                                                     *\n*     If a source record contains the same character repeated in      *\n*     all 80 columns, the compressed record length will be 5 bytes.   *\n*     Bytes 1-4 are normal variable length record length (two bytes   *\n*     of length and two bytes of zeros).  The fifth byte is the       *\n*     character that was repeated in all 80 bytes of the source.      *\n*                                                                     *\n*                                                                     *\n*     If a source record does not contain the same character in all   *\n*     80 bytes, a bit map is created the indicates which bytes in     *\n*     the source record were non-blank.  A zero in the bit map        *\n*     indicates a blank in the source, a one in the bit map           *\n*     indicates a non-blank in the source.                            *\n*                                                                     *\n*                                                                     *\n*     Compressed data will have record lengths 5 or 14-94.            *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*     At entry R0 is the function code                                *\n*              R1 address of parms                                    *\n*                                                                     *\n*                                                                     *\n*     Function codes:                                                 *\n*         zero      compress                                          *\n*         non-zero  de-compress                                       *\n*                                                                     *\n*                                                                     *\n*     Parm list:                                                      *\n*         +0     address of source record                             *\n*         +4     address of compressed data                           *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   Source record is 80-bytes                                         *\n*                                                                     *\n*                                                                     *\n*   Compressed record is VB form record:                              *\n*                                                                     *\n*     bytes                                                           *\n*      1-2       length of this                                       *\n*      3-4       binary zeros                                         *\n*      5-14      bit map                                              *\n*      15-94     non-blank characters from source                     *\n*                                                                     *\n*       or                                                            *\n*                                                                     *\n*     bytes                                                           *\n*      1-2       length of this                                       *\n*      3-4       binary zeros                                         *\n*      5         character repeated in all 80 bytes of source data    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*  ----------------------------------------------------------------   *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*     Sample of code to call for compress:                            *\n*                                                                     *\n*       SR    R0,R0                                                   *\n*       LA    R1,COMPRESS_PARMS                                       *\n*       L     R15,V_COMPRESS                                          *\n*       BALR  R14,R15                                                 *\n*                                                                     *\n*                                                                     *\n*    Sample of code to call for de-compress:                          *\n*                                                                     *\n*       LA    R0,1                                                    *\n*       LA    R1,COMPRESS_PARMS                                       *\n*       L     R15,V_COMPRESS                                          *\n*       BALR  R14,R15                                                 *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*     V_COMPRESS          DC   V(COMPRESS)                            *\n*     COMPRESS_PARMS      DS   0A                                     *\n*                         DC   A(UNCOMPRESSED_DATA)                   *\n*                         DC   A(COMPRESSED_DATA)                     *\n*     UNCOMPRESSED_DATA   DC   CL80' '                                *\n*     COMPRESSED_DATA     DC   CL94' '                                *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOMPRESS CSECT\n         USING COMPRESS,R15\n         STM   R14,R12,12(R13)           SAVE REGISTERS\n         B     INIT0000\n         DC    CL8'COMPRESS'\n         DC    CL6'&SYSDATE'\n         DC    CL6'&SYSTIME'\nINIT0000 DS    0H\n         LR    R12,R15                   COPY BASE\n         DROP  R15\n         USING COMPRESS,R12\n         LM    R10,R11,0(R1)             PARM ADDRESSES\n         USING C_REC,R11\n         LTR   R0,R0                     COMPRESS?\n         BNZ   MAIN1000                  NO\n* ------------------------------------------------------------------- *\n*        COMPRESS                                                     *\n* ------------------------------------------------------------------- *\n         XC    C_REC(94),C_REC           INITIALIZE OUTPUT\n         CLC   1(79,R10),0(R10)          SAME IN ALL 80 BYTES?\n         BE    MAIN0100                  YES\n         LA    R2,C_BITMAP               1ST BYTE OF BIT MAP\n         LA    R3,C_NBLANK               1ST NON-BLANK DATA\n         LA    R4,10                     NBR OF BIT MAP BYTES\n         LA    R5,C_PRFXL                INITIALIZE OUTPUT LENGTH\nMAIN0010 DS    0H\n         LA    R6,8                      BITS IN A BYTE\n         LA    R1,X'80'                  INITIALIZE BIT MASK\nMAIN0020 DS    0H\n         CLI   0(R10),C' '               BLANK?\n         BE    MAIN0030                  YES\n         EX    R1,OR_BIT                 USE LENGTH TEMPORARILY\n         MVC   0(1,R3),0(R10)            COPY DATA BYTE\n         LA    R3,1(,R3)                 NEXT IN NON-BLANK DATA\n         LA    R5,1(,R5)                 ADD TO OUTPUT LENGTH\nMAIN0030 DS    0H\n         SRL   R1,1                      SHIFT THE MASK\n         LA    R10,1(,R10)               NEXT IN SOURCE\n         BCT   R6,MAIN0020               LOOP FOR BITS IN BYTE\n         LA    R2,1(,R2)                 NEXT BIT MAP BYTE\n         BCT   R4,MAIN0010               LOOP FOR BYTES\n         STCM  R5,3,C_LEN                SET LENGTH\n         B     EXITEXIT\nMAIN0100 DS    0H\n         MVC   C_LEN,H5                  SET LENGTH\n         MVC   C_BITMAP(1),0(R10)        COPY REPEATED BYTE\n         B     EXITEXIT\n* ------------------------------------------------------------------- *\n*        DE-COMPRESS                                                  *\n* ------------------------------------------------------------------- *\nMAIN1000 DS    0H\n         CLC   C_LEN,H5                  LENGTH = 5?\n         BE    MAIN1040                  YES\n         MVI   0(R10),C' '\n         MVC   1(79,R10),0(R10)          INITIALIZE OUTPUT\n         LA    R2,C_BITMAP               1ST BYTE OF BIT MAP\n         LA    R3,C_NBLANK               1ST NON-BLANK DATA\n         LA    R4,10                     NBR OF BIT MAP BYTES\nMAIN1010 DS    0H\n         LA    R6,8                      BITS IN A BYTE\n         LA    R1,X'80'                  INITIALIZE BIT MASK\nMAIN1020 DS    0H\n         EX    R1,TEST_BIT               THIS BIT ON?\n         BZ    MAIN1030                  NO\n         MVC   0(1,R10),0(R3)            COPY TO SOURCE RECORD\n         LA    R3,1(,R3)                 NEXT NON-BLANK\nMAIN1030 DS    0H\n         SRL   R1,1                      SHIFT MASK 1 BIT\n         LA    R10,1(,R10)               NEXT IN DE-COMPRESSED\n         BCT   R6,MAIN1020               LOOP FOR BITS IN BYTE\n         LA    R2,1(,R2)                 NEXT BIT MAP BYTE\n         BCT   R4,MAIN1010               LOOP FOR BYTES\n         B     EXITEXIT\nMAIN1040 DS    0H\n         MVC   0(1,R10),C_BITMAP\n         MVC   1(79,R10),0(R10)          REPEAT THE CHARACTER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXITEXIT DS    0H\n         LM    R14,R12,12(R13)           RESTORE REGISTERS\n         SR    R15,R15                   SET RC\n         BR    R14                       EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nOR_BIT   OI    0(R2),0                   SET BIT MAP BIT\nTEST_BIT TM    0(R2),0                   TEST BIT MAP BIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nH5       DC    H'5'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nC_REC    DSECT\nC_LEN    DS   XL2\n         DS   XL2\nC_BITMAP DS   XL10\nC_PRFXL  EQU  *-C_REC\nC_NBLANK DS   XL80\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nR0       EQU     0\nR1       EQU     1\nR2       EQU     2\nR3       EQU     3\nR4       EQU     4\nR5       EQU     5\nR6       EQU     6\nR7       EQU     7\nR8       EQU     8\nR9       EQU     9\nR10      EQU     10\nR11      EQU     11\nR12      EQU     12\nR13      EQU     13\nR14      EQU     14\nR15      EQU     15\n         END     COMPRESS\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT774/FILE774.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT774", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}