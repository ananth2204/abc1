* ------------------------------------------------------------------- *
*     This is a version that may assemble better with the IFOX00      *
*     Assembler on MVS 3.8.  Of course the RMODE and AMODE statements *
*     had to be commented out.  The long names have been changed to   *
*     shorter ones, but I think there are no unsupported instructions *
*     coded here.  (SBG)                                              *
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*     Data compression                                                *
*                                                                     *
*     This is a small extension of the CBT compression.               *
*     CBT compression uses a bit map to indicate blank or non-blank   *
*     characters.  This results in variable length records with       *
*     record lengths ranging from 14 to 94.  By adding a small        *
*     amount of logic, it is possible to reduce the record length     *
*     to 5 in specific cases.  This subroutine can decompress         *
*     data from the older 14-to-94 byte technique.                    *
*                                                                     *
*     This subroutine is 31-bit, reentrant, uses no external work     *
*     area.                                                           *
*                                                                     *
*                                                                     *
*     There are two forms of compressed data                          *
*                                                                     *
*     If a source record contains the same character repeated in      *
*     all 80 columns, the compressed record length will be 5 bytes.   *
*     Bytes 1-4 are normal variable length record length (two bytes   *
*     of length and two bytes of zeros).  The fifth byte is the       *
*     character that was repeated in all 80 bytes of the source.      *
*                                                                     *
*                                                                     *
*     If a source record does not contain the same character in all   *
*     80 bytes, a bit map is created the indicates which bytes in     *
*     the source record were non-blank.  A zero in the bit map        *
*     indicates a blank in the source, a one in the bit map           *
*     indicates a non-blank in the source.                            *
*                                                                     *
*                                                                     *
*     Compressed data will have record lengths 5 or 14-94.            *
*                                                                     *
*                                                                     *
*                                                                     *
*     At entry R0 is the function code                                *
*              R1 address of parms                                    *
*                                                                     *
*                                                                     *
*     Function codes:                                                 *
*         zero      compress                                          *
*         non-zero  de-compress                                       *
*                                                                     *
*                                                                     *
*     Parm list:                                                      *
*         +0     address of source record                             *
*         +4     address of compressed data                           *
*                                                                     *
*                                                                     *
*                                                                     *
*   Source record is 80-bytes                                         *
*                                                                     *
*                                                                     *
*   Compressed record is VB form record:                              *
*                                                                     *
*     bytes                                                           *
*      1-2       length of this                                       *
*      3-4       binary zeros                                         *
*      5-14      bit map                                              *
*      15-94     non-blank characters from source                     *
*                                                                     *
*       or                                                            *
*                                                                     *
*     bytes                                                           *
*      1-2       length of this                                       *
*      3-4       binary zeros                                         *
*      5         character repeated in all 80 bytes of source data    *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*  ----------------------------------------------------------------   *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*     Sample of code to call for compress:                            *
*                                                                     *
*       SR    R0,R0                                                   *
*       LA    R1,COMPRESS_PARMS                                       *
*       L     R15,V_COMPRESS                                          *
*       BALR  R14,R15                                                 *
*                                                                     *
*                                                                     *
*    Sample of code to call for de-compress:                          *
*                                                                     *
*       LA    R0,1                                                    *
*       LA    R1,COMPRESS_PARMS                                       *
*       L     R15,V_COMPRESS                                          *
*       BALR  R14,R15                                                 *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*     V_COMPRESS          DC   V(COMPRESS)                            *
*     COMPRESS_PARMS      DS   0A                                     *
*                         DC   A(UNCOMPRESSED_DATA)                   *
*                         DC   A(COMPRESSED_DATA)                     *
*     UNCOMPRESSED_DATA   DC   CL80' '                                *
*     COMPRESSED_DATA     DC   CL94' '                                *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
COMPRESS CSECT
         USING COMPRESS,R15
         STM   R14,R12,12(R13)           SAVE REGISTERS
         B     INIT0000
         DC    CL8'COMPRESS'
         DC    CL6'&SYSDATE'
         DC    CL6'&SYSTIME'
INIT0000 DS    0H
         LR    R12,R15                   COPY BASE
         DROP  R15
         USING COMPRESS,R12
         LM    R10,R11,0(R1)             PARM ADDRESSES
         USING C_REC,R11
         LTR   R0,R0                     COMPRESS?
         BNZ   MAIN1000                  NO
* ------------------------------------------------------------------- *
*        COMPRESS                                                     *
* ------------------------------------------------------------------- *
         XC    C_REC(94),C_REC           INITIALIZE OUTPUT
         CLC   1(79,R10),0(R10)          SAME IN ALL 80 BYTES?
         BE    MAIN0100                  YES
         LA    R2,C_BITMAP               1ST BYTE OF BIT MAP
         LA    R3,C_NBLANK               1ST NON-BLANK DATA
         LA    R4,10                     NBR OF BIT MAP BYTES
         LA    R5,C_PRFXL                INITIALIZE OUTPUT LENGTH
MAIN0010 DS    0H
         LA    R6,8                      BITS IN A BYTE
         LA    R1,X'80'                  INITIALIZE BIT MASK
MAIN0020 DS    0H
         CLI   0(R10),C' '               BLANK?
         BE    MAIN0030                  YES
         EX    R1,OR_BIT                 USE LENGTH TEMPORARILY
         MVC   0(1,R3),0(R10)            COPY DATA BYTE
         LA    R3,1(,R3)                 NEXT IN NON-BLANK DATA
         LA    R5,1(,R5)                 ADD TO OUTPUT LENGTH
MAIN0030 DS    0H
         SRL   R1,1                      SHIFT THE MASK
         LA    R10,1(,R10)               NEXT IN SOURCE
         BCT   R6,MAIN0020               LOOP FOR BITS IN BYTE
         LA    R2,1(,R2)                 NEXT BIT MAP BYTE
         BCT   R4,MAIN0010               LOOP FOR BYTES
         STCM  R5,3,C_LEN                SET LENGTH
         B     EXITEXIT
MAIN0100 DS    0H
         MVC   C_LEN,H5                  SET LENGTH
         MVC   C_BITMAP(1),0(R10)        COPY REPEATED BYTE
         B     EXITEXIT
* ------------------------------------------------------------------- *
*        DE-COMPRESS                                                  *
* ------------------------------------------------------------------- *
MAIN1000 DS    0H
         CLC   C_LEN,H5                  LENGTH = 5?
         BE    MAIN1040                  YES
         MVI   0(R10),C' '
         MVC   1(79,R10),0(R10)          INITIALIZE OUTPUT
         LA    R2,C_BITMAP               1ST BYTE OF BIT MAP
         LA    R3,C_NBLANK               1ST NON-BLANK DATA
         LA    R4,10                     NBR OF BIT MAP BYTES
MAIN1010 DS    0H
         LA    R6,8                      BITS IN A BYTE
         LA    R1,X'80'                  INITIALIZE BIT MASK
MAIN1020 DS    0H
         EX    R1,TEST_BIT               THIS BIT ON?
         BZ    MAIN1030                  NO
         MVC   0(1,R10),0(R3)            COPY TO SOURCE RECORD
         LA    R3,1(,R3)                 NEXT NON-BLANK
MAIN1030 DS    0H
         SRL   R1,1                      SHIFT MASK 1 BIT
         LA    R10,1(,R10)               NEXT IN DE-COMPRESSED
         BCT   R6,MAIN1020               LOOP FOR BITS IN BYTE
         LA    R2,1(,R2)                 NEXT BIT MAP BYTE
         BCT   R4,MAIN1010               LOOP FOR BYTES
         B     EXITEXIT
MAIN1040 DS    0H
         MVC   0(1,R10),C_BITMAP
         MVC   1(79,R10),0(R10)          REPEAT THE CHARACTER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXITEXIT DS    0H
         LM    R14,R12,12(R13)           RESTORE REGISTERS
         SR    R15,R15                   SET RC
         BR    R14                       EXIT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
OR_BIT   OI    0(R2),0                   SET BIT MAP BIT
TEST_BIT TM    0(R2),0                   TEST BIT MAP BIT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
H5       DC    H'5'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
C_REC    DSECT
C_LEN    DS   XL2
         DS   XL2
C_BITMAP DS   XL10
C_PRFXL  EQU  *-C_REC
C_NBLANK DS   XL80
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
R0       EQU     0
R1       EQU     1
R2       EQU     2
R3       EQU     3
R4       EQU     4
R5       EQU     5
R6       EQU     6
R7       EQU     7
R8       EQU     8
R9       EQU     9
R10      EQU     10
R11      EQU     11
R12      EQU     12
R13      EQU     13
R14      EQU     14
R15      EQU     15
         END     COMPRESS
