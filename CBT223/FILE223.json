{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011526000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 293930, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE223.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE223.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x06\\x08'", "DS1TRBAL": "b'}\\xc6'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\x9b\\x00\\x0e\\x01\\x9c\\x00\\x05\\x00\\x07'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$DOC": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x94)\\x7f\\x00\\x95\\x08\\x0f\\x18A\\x00e\\x00\\x18\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1994-10-24T00:00:00", "modifydate": "1995-03-21T18:41:00", "lines": 101, "newlines": 24, "modlines": 0, "user": "SBGCSC"}, "text": "                   FREE TAPE MANAGEMENT SYSTEM\n\n    This is the Free Tape Management System (FTMS, pseudonym ITMS)\nwhich has been submitted semi-anonymously.  Please direct inquiries\nto Sam Golob  908-901-0943 or 718-403-8666.  If these numbers become\nincorrect, please call the NaSPA office 414-423-2420, membership\nofficer, to find out what my current address is.  I am not the author\nof this system, but I will be glad to direct you to him for advice\nand/or support.\n\n    This is a complete Tape Management System which can keep track\nof a tape library of any size.  As written, it will not kick down\na wrong tape, but it will tell you everything that has happened in\nyour tape library.  All tape activity is logged.\n\n    This system keeps full track of all the tapes in your library,\nand you have a sizable collection of reports to tell you what tapes\nare soon to reach \"scratch status\", etc.  See member ITMSFUNC to\nlook at the number of reports and other functions which are available\nwith this system.\n\n    Members of this PDS are as follows:\n\n    ITMS000A  -  This is assembler source for the main program\n                 which runs ITMS.\n\n    ITMPAR01  -  This is assembler source for the ITMS parser.\n\n    ITMDBDEF  -  This is JCL to define the control datasets that\n                 are needed to run ITMS.\n\n    ITMSFUNC  -  This member supplies sample execution parms\n                 to execute the various functions which ITMS\n                 is capable of providing.\n\n    ITMS705I  -  This is an AOC clist to drive the ITMS system.\n                 It gets kicked off by the IEC705I tape message,\n                 through the ITMS705M message table entry in AOC.\n                 If you have a different automated operations\n                 package than IBM's AOC, this member can be\n                 adapted to the other system.\n\n    ITMS705M  -  This is an AOC/Netview message table entry to\n                 drive the ITMS clist from the IEC705I console\n                 message.  If you have a different automated\n                 operations package than IBM's AOC, this member\n                 can be adapted to the other system.\n\n    ITMSRUN   -  The started proc that runs ITMS.  Kicked off\n                 by the clist.\n\n    ITMSJOB   -  (On File 224).  Sample printout of an ITMS run.\n\n\n    To install, you do the following:\n\n        A.  Assemble and linkedit the two modules, ITMS000A and\n            ITMPAR01.  They should go into a linklist library.\n            I don't think they have to be authorized.  Experiment.\n\n        B.  Customize and run the ITMDBDEF job to create the\n            datasets necessary to run ITMS.  Be sure to add\n            enough room for growth, for your environment.\n            The illustrated environment controls about 2000\n            tapes.\n\n        C.  Put the ITMSRUN member into your PROCLIB as ITMS.\n            Customize as needed with your own dataset names.\n\n        D.  Install the ITMS705M message table entry and the\n            ITMS705I clist into the appropriate places so they\n            get kicked off by AOC.  Examine the ITMS705I clist\n            so you understand how it works.  If necessary,\n            customize as appropriate for any other automations\n            package that you have.  (If you get this to work\n            on another automated operations package, please\n            send the modified members to me, so I can include\n            them in this file.)\n\n    The sequence of events in executing this system is as follows:\n\n        1.  The tape job produces an IEC705I mount message.\n\n        2.  The Netview message table entry intercepts the IEC705I\n            message and kicks off the ITMS705I clist, which starts\n            the ITMS proc using appropriate parameters that were\n            parsed from the IEC705I message.\n\n        3.  The ITMS started task updates the ITMS database.\n            See the sample report from File 224.\n\n        4.  You run \"any of many\" executions of ITMS with\n            appropriate parameters (see member ITMSFUNC) to\n            produce all the reports you need and want.\n\n    Good luck in setting this system up.  If this documentation is\ninadequate, please call Sam Golob (information above), and I'll try\nto fix it for the next people (and for you).\n\n    For support, also call Sam Golob.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ITMDBDEF": {"ttr": 519, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94)\\x7f\\x00\\x94)\\x7f\\x11B\\x00E\\x00E\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-10-24T00:00:00", "modifydate": "1994-10-24T11:42:00", "lines": 69, "newlines": 69, "modlines": 0, "user": "SBGCSC"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "ITMPAR01": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94)\\x7f\\x00\\x94)\\x7f\\x11B\\x01\\xaf\\x01\\xaf\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-10-24T00:00:00", "modifydate": "1994-10-24T11:42:00", "lines": 431, "newlines": 431, "modlines": 0, "user": "SBGCSC"}, "text": "  TITLE '**ITMPAR01** ITMS TAPE MANAGEMENT SYSTEM ** INPUT PARSER  **'\nITMPAR01 CSECT\n         STM   14,12,12(13)        SAVE REGS OF CALLING PGM IN ITS AREA\n         LR    R12,R15             LOAD R12 WITH BASE ADDR\n         USING ITMPAR01,R12        TELL ASSEMBLER WHERE BASE POS IS\n         ST    R13,SAVPAREA+4      SAVE REG 13 IN MY SAVE AREA\n         LA    R13,SAVPAREA        PUT ADDR OF MY SAVE AREA INTO REG13\n         SPACE\n         B     INPARSR\n         DC    C'**ITMPAR01** ITMS PARSER PGM'\n         DC    C'  ASSEMBLED &SYSTIME &SYSDATE'\n         DS    H\nINPARSR  EQU   * HERE WE PARSE INPUT FOR SETUP PARMS\n         LR    R9,R1               GET PARMLIST ADDR.\n         USING ITMPARSL,R9         TELL ASSEMBLER WHAT WE'RE UP TO\n         CLC   PRUNTYP(2),=CL2'UI' WE DOIN UTIL RUN W/SYSIN INPUT\n         BNE   INPARS3             NOPE!\n         LA    R7,IPARAREA         ELSE! GET @ OF RECORD INPUT\n         TRT   0(80,R7),BLANKTAB   LOOK FOR INPUT RECLEN\n         BZ    INPARS2             IE INVALID INPUT\n         SR    R1,R7               GET LEN OF INPUT\n         CH    R1,=H'69'           IE CURR. MAX. LEN.\n         BH    INPARS2             IE INVALID INPUT\n         STH   R1,IPARLEN          SAVE RECLEN\n         CLI   IPARAREA,C'C'       ONLY SUPPORTED SYSIN OPTION\n         BNE   PRSBADR             IE INVALID RUN TYPE\n         XR    R4,R4               ZERO R4\n         B     PARRUNC             OK! WE'RE SET UP SO LETS DO IT\n         SPACE\nINPARS2  XR    R4,R4               ZERO R4\n         LA    R4,69               TO SHOW PROPER OFFSET\n         B     PRSBADL             IE INVALID PARM INPUT\nINPARS3  LA    R7,IPARAREA         GET INPUT PARM ADDR.\n         XR    R4,R4               ZERO R4 (IE = 1 IN MACH. LANG)\n         EX    R4,TRTCHAR          FIRST CHAR. IN MSG VALID ???\n         BZ    PRSBADR             IE INVALID RUNTYPE\n         MVC   PRUNTYP(1),0(R7)    MOVE RUNTYPE PARM TO WORKAREA\n         SPACE\nPARRUNC  EQU   * PARSER FOR RUN TYPE 'C'\n         CLI   0(R7),C'C'          IE 'CREATE' RUN\n         BNE   PARRUNX             NOPE ! CHECK NEXT RUNTYPE\n         CLI   1(R7),C','          IE COMMA (AFTER RUNTYPE)\n         BE    PRUNC1              GOOD KEEP GOING\n         AH    R4,=H'1'            ELSE! SHOW OFFSET INTO PARMLIST\n         B     PRSBADL             SHOW PARMLIST INVALID\nPRUNC1   AH    R7,=H'2'            BUMP LOC. PTR\n         AH    R4,=H'2'            BUMP OFFSET CTR\n         CLI   6(R7),C','          IE COMMA (AFTER VOLID)\n         BE    PRUNC2              GOOD KEEP GOING\n         B     PRSBADL             SHOW PARMLIST INVALID\nPRUNC2   MVC   IVOLSR(6),0(R7)     MOVE VOLID TO WORKAREA\n         AH    R7,=H'7'            BUMP LOC. PTR\n         AH    R4,=H'7'            BUMP OFFSET CTR\n         CLI   7(R7),C','          IE COMMA (AFTER CDATE)\n         BE    PRUNC3              GOOD KEEP GOING\n         B     PRSBADL             SHOW PARMLIST INVALID\nPRUNC3   MVC   ICDATE(7),0(R7)     MOVE CDATE TO WORKAREA\n         AH    R7,=H'8'            BUMP LOC. PTR\n         AH    R4,=H'8'            BUMP OFFSET CTR\n         CLI   7(R7),C','          IE COMMA (AFTER EDATE)\n         BE    PRUNC4              GOOD KEEP GOING\n         B     PRSBADL             SHOW PARMLIST INVALID\nPRUNC4   MVC   IEDATE(7),0(R7)     MOVE CDATE TO WORKAREA\n         AH    R7,=H'8'            BUMP LOC. PTR\n         AH    R4,=H'8'            BUMP OFFSET CTR\n         LH    R3,IPARLEN          GET ORIG. INPUT LEN\n         SR    R3,R4               LESS CURRENT OFFSET\n         CH    R3,=H'1'            MIN. DSN LENGTH\n         BNH   PRSBADL             SHOW PARMLIST INVALID\n         BCTR  R3,0                IE FOR MACH. LEN\n         EX    R3,MOVTDSN          MOVE TAPE DSN TO WORKAREA\n         B     PRSEXIT             GOOD! NOW FOR THE REAL WORK\n         SPACE\nPARRUNX  EQU   * PARSER FOR RUN TYPE 'X'\n         CLI   0(R7),C'X'          IE 'EXPIRATION' RUN\n         BNE   PARRUNR             NOPE ! CHECK NEXT RUNTYPE\n         CLC   1(7,R7),=C',EDATE='  IE VALID FORMAT\n         BE    PRUNX1              GOOD KEEP GOING\n         AH    R4,=H'1'            ELSE! SHOW OFFSET INTO PARMLIST\n         B     PRSBADL             SHOW PARMLIST INVALID\nPRUNX1   AH    R7,=H'8'            BUMP LOC. PTR\n         AH    R4,=H'8'            BUMP OFFSET CTR\n         LH    R3,IPARLEN          GET ORIG. INPUT LEN\n         SR    R3,R4               LESS CURRENT OFFSET\n         CH    R3,=H'7'            IE EDATE LEN.\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         MVC   REDATE(7),0(R7)     OK! MOVE TO WORKAREA\n         B     PRSEXIT             GOOD! NOW FOR THE REAL WORK\n         SPACE\nPARRUNR  EQU   * PARSER FOR RUN TYPE 'R'\n         CLI   0(R7),C'R'          IE 'REPORT' RUN\n         BNE   PARRUNU             NOPE ! CHECK NEXT RUNTYPE\n         CLC   1(6,R7),=C',TYPE='  IE VALID FORMAT\n         BE    PRUNR1              GOOD KEEP GOING\n         AH    R4,=H'1'            ELSE! SHOW OFFSET INTO PARMLIST\n         B     PRSBADL             SHOW PARMLIST INVALID\nPRUNR1   AH    R7,=H'7'            BUMP LOC. PTR\n         AH    R4,=H'7'            BUMP OFFSET CTR\n         CLC   0(5,R7),=C'AVAIL'   IE AVAIL REPORT\n         BNE   PRUNR2              NOPE! KEEP LOOKING\n         MVI   PSUBRUN,C'V'        OK SHOW REPORT TYPE\n         B     PRSEXIT             ...AND GO DO IT!\nPRUNR2   CLC   0(5,R7),=C'CREAT'   IE UNEXP TAPE REPRT\n         BNE   PRUNR3              NOPE! KEEP LOOKING\n         MVI   PSUBRUN,C'C'        OK SHOW REPORT TYPE\n         B     PRSEXIT             ...AND GO DO IT!\nPRUNR3   CLC   0(3,R7),=C'ALL'     IE LOG PRINT REPRT\n         BNE   PRUNR4              NOPE! KEEP LOOKING\n         MVI   PSUBRUN,C'A'        OK SHOW REPORT TYPE\n         B     PRSEXIT             ...AND GO DO IT!\nPRUNR4   CLC   0(3,R7),=C'LOG'     IE LOG PRINT REPRT\n         BNE   PRUNR5              NOPE! KEEP LOOKING\n         MVI   PSUBRUN,C'L'        OK SHOW REPORT TYPE\n         B     PRSEXIT             ...AND GO DO IT!\nPRUNR5   CLC   0(6,R7),=C'FOREC,'  IE FORECAST REPRT\n         BNE   PRUNR6              NOPE! KEEP LOOKING\n         MVI   PSUBRUN,C'F'        OK SHOW REPORT TYPE\n         AH    R7,=H'6'            BUMP LOC. PTR\n         AH    R4,=H'6'            BUMP OFFSET CTR\n         CLC   0(6,R7),=C'FDATE='  IE VALID FORMAT\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         AH    R7,=H'6'            BUMP LOC. PTR\n         AH    R4,=H'6'            BUMP OFFSET CTR\n         LH    R3,IPARLEN          GET ORIG. INPUT LEN\n         SR    R3,R4               LESS CURRENT OFFSET\n         CH    R3,=H'7'            IE EDATE LEN.\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         MVC   RFDATE(7),0(R7)     OK! MOVE TO WORKAREA\n         B     PRSEXIT             GOOD! NOW FOR THE REAL WORK\n         SPACE\nPRUNR6   CLC   0(5,R7),=C'FIND,'   IE 'FIND' REPRT\n         BNE   PRUNR8              NOPE! KEEP LOOKING\n         MVI   PSUBRUN,C'S'        OK SHOW REPORT TYPE\n         AH    R7,=H'5'            BUMP LOC. PTR\n         AH    R4,=H'5'            BUMP OFFSET CTR\n         CLC   0(4,R7),=C'DSN='    IE VALID FORMAT\n         BNE   PRUNR7              NOPE! KEEP CHKING\n         AH    R7,=H'4'            BUMP LOC. PTR\n         AH    R4,=H'4'            BUMP OFFSET CTR\n         LH    R3,IPARLEN          GET ORIG. INPUT LEN\n         SR    R3,R4               LESS CURRENT OFFSET\n         CH    R3,=H'1'            IE MIN. DSN LEN\n         BL    PRSBADL             SHOW PARMLIST INVALID\n         BCTR  R3,0                IE MACH LEN\n         EX    R3,MOVRDSN          MOVE DSN TO WORKAREA\n         STH   R3,PERROFF          SAVE L'DSN FOR ACTUAL COMPARE\n         MVI   PSUBRNA,C'D'        SHOW REPORT TYPE\n         B     PRSEXIT             GOOD! NOW FOR THE REAL WORK\nPRUNR7   CLC   0(4,R7),=C'VOL='    IE VALID FORMAT\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         AH    R7,=H'4'            BUMP LOC. PTR\n         AH    R4,=H'4'            BUMP OFFSET CTR\n         LH    R3,IPARLEN          GET ORIG. INPUT LEN\n         SR    R3,R4               LESS CURRENT OFFSET\n         CH    R3,=H'6'            IE VOLSER LEN.\n         BNE   PRUNR7A             ??? VOLSER RANGE\n         MVC   RVOLLO(6),0(R7)     OK! MOVE TO WORKAREA\n         B     PRSEXIT             GOOD! NOW FOR THE REAL WORK\nPRUNR7A  CH    R3,=H'15'           IE VALID FORMAT\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         CLI   0(R7),C'('          IE LEFT BANANA\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         CLI   14(R7),C')'         IE RIGHT BANANA\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         CLI   7(R7),C'-'          IE DASH\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         MVC   RVOLLO(6),1(R7)     OK! MOVE TO WORKAREA\n         MVC   RVOLHI(6),8(R7)     OK! MOVE TO WORKAREA\n         B     RANGECHK            GO VERIFY RANGE VALID\n         SPACE\nPRUNR8   CLC   0(7,R7),=C'EXEP,X=' IE EXEPTION REPRT\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         MVI   PSUBRUN,C'X'        OK SHOW REPORT TYPE\n         AH    R7,=H'7'            BUMP LOC. PTR\n         AH    R4,=H'7'            BUMP OFFSET CTR\n         CLC   0(3,R7),=C'ALL'     IE VALID FORMAT\n         BNE   PRUNR8A             NOPE! KEEP CHKING\n         MVI   RXFLAG,C'A'         OK SHOW REPORT TYPE\n         B     PRSEXIT             GOOD! NOW FOR THE REAL WORK\nPRUNR8A  CLI   0(R7),C'U'          IE UNKNOWN TYPES\n         BNE   PRUNR8B             NOPE! KEEP CHKING\n         MVI   RXFLAG,C'U'         OK SHOW REPORT TYPE\n         B     PRSEXIT             GOOD! NOW FOR THE REAL WORK\nPRUNR8B  CLI   0(R7),C'O'          IE OVERLAY TYPES\n         BNE   PRSBADL             NOPE! SHOW PARMLIST INVALID\n         MVI   RXFLAG,C'O'         OK SHOW REPORT TYPE\n         B     PRSEXIT             GOOD! NOW FOR THE REAL WORK\n         SPACE\nPARRUNU  EQU   * PARSER FOR RUN TYPE 'U'\n         CLC   0(2,R7),=C'U,'      IE 'UTILITY' RUN\n         BNE   PRSBADR             IE INVALID RUNTYPE\n         CLC   1(6,R7),=C',TYPE='  IE VALID FORMAT\n         BE    PRUNU1              GOOD KEEP GOING\n         AH    R4,=H'2'            ELSE! SHOW OFFSET INTO PARMLIST\n         B     PRSBADL             SHOW PARMLIST INVALID\nPRUNU1   AH    R7,=H'7'            BUMP LOC. PTR\n         AH    R4,=H'7'            BUMP OFFSET CTR\n         CLC   0(5,R7),=C'XPDAT'   IE EXP DATE ALTER\n         BNE   PRUNU2              NOPE! KEEP LOOKING\n         AH    R7,=H'5'            BUMP LOC. PTR\n         AH    R4,=H'5'            BUMP OFFSET CTR\n         CLC   0(5,R7),=C',VOL='   IE VALID FORMAT\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         AH    R7,=H'5'            BUMP LOC. PTR\n         AH    R4,=H'5'            BUMP OFFSET CTR\n         CLC   6(7,R7),=C',EDATE=' IE VALID FORMAT\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         MVC   RVOLLO(6),0(R7)     MOVE VOLSER TO WORKAREA\n         AH    R7,=H'13'           BUMP LOC. PTR\n         AH    R4,=H'13'           BUMP OFFSET CTR\n         LH    R3,IPARLEN          GET ORIG. INPUT LEN\n         SR    R3,R4               LESS CURRENT OFFSET\n         CH    R3,=H'7'            IE DATE LEN.\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         MVC   REDATE(7),0(R7)     OK! MOVE TO WORKAREA\n         MVI   PSUBRUN,C'X'        SHOW UTILITY RUN\n         B     PRSEXIT             GOOD! NOW FOR THE REAL WORK\n         SPACE\nPRUNU2   CLC   0(9,R7),=C'FLAG,VOL='   IE FLAG ALTER RUN\n         BNE   PRUNU3              NOPE! KEEP LOOKING\n         AH    R7,=H'9'            BUMP LOC. PTR\n         AH    R4,=H'9'            BUMP OFFSET CTR\n         CLI   6(R7),C','          IE VALID FORMAT\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         MVC   RVOLLO(6),0(R7)     ELSE! MOVE VOLSER TO PARMLIST\n         AH    R7,=H'7'            BUMP LOC. PTR\n         AH    R4,=H'7'            BUMP OFFSET CTR\n         CLC   0(5,R7),=C'FLAG='   IE VALID FORMAT\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         AH    R7,=H'5'            BUMP LOC. PTR\n         AH    R4,=H'5'            BUMP OFFSET CTR\n         CLI   0(R7),C'S'          IE VALID FORMAT\n         BNE   PRUNU2B             GO CHK OTHER ALLOW. VALUE\n         CLI   7(R7),C'C'          IE VALID FORMAT\n         BE    PRUNU2A             SO FAR SO GOOD\n         CLI   7(R7),C'E'          IE VALID FORMAT\n         BNE   PRSBADL             THATS ALL WE SUPPORT NOW\nPRUNU2A  MVC   RUFLAG(1),0(R7)     SAVE FLAG PARM\n         MVC   RUFVAL(1),7(R7)     SAVE FLAG PARM\n         B     PRUNU2C             THATS ALL WE SUPPORT NOW\nPRUNU2B  CLI   0(R7),C'X'          IE OTHER VALID VALUE\n         BNE   PRSBADL             THATS ALL WE SUPPORT NOW\n         CLI   7(R7),C'B'          IE VALID FORMAT\n         BNE   PRUNU2U             MAYBE A 'U'\n         MVC   RUFLAG(1),0(R7)     SAVE FLAG PARM\n         MVI   RUFVAL,X'40'        IE, 'B' = BLANK\n         B     PRUNU2C             THATS ALL FOR NOW FOLKS\nPRUNU2U  CLI   7(R7),C'U'          IE VALID FORMAT\n         BE    PRUNU2A             SO FAR SO GOOD\n         CLI   7(R7),C'O'          IE VALID FORMAT\n         BNE   PRSBADL             THATS ALL WE SUPPORT NOW\n         B     PRUNU2A             SO FAR SO GOOD\nPRUNU2C  CLC   1(6,R7),=C',NVAL='  IE VALID FORMAT\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         AH    R4,=H'8'            BUMP OFFSET CTR\n         LH    R3,IPARLEN          GET ORIG. INPUT LEN\n         SR    R3,R4               LESS CURRENT OFFSET\n         LTR   R3,R3               IE WE END OF PARMLIST\n         BNZ   PRSBADL             SHOW PARMLIST INVALID\n         MVI   PSUBRUN,C'F'        ELSE! SHOW FLAG TYPE\n         B     PRSEXIT             GOOD! NOW FOR THE REAL WORK\n         SPACE\nPRUNU3   CLC   0(5,R7),=C'ADDE,'   IE ADD SCRATCH RUN\n         BNE   PRUNU4              NOPE! KEEP CHKING\n         AH    R7,=H'5'            BUMP LOC. PTR\n         AH    R4,=H'5'            BUMP OFFSET CTR\n         CLC   0(4,R7),=C'VOL='    IE VALID FORMAT\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         AH    R7,=H'4'            BUMP LOC. PTR\n         AH    R4,=H'4'            BUMP OFFSET CTR\n         LH    R3,IPARLEN          GET ORIG. INPUT LEN\n         SR    R3,R4               LESS CURRENT OFFSET\n         CH    R3,=H'6'            IE VOLSER LEN.\n         BNE   PRUNU3A             ??? VOLSER RANGE\n         MVI   PSUBRUN,C'S'        SHOW SCRATCH ADDITION\n         MVI   PSUBRNA,C'S'        ...OF SINGLE SCRATCH\n         MVC   RVOLLO(6),0(R7)     OK! MOVE TO WORKAREA\n         B     PRSEXIT             GOOD! NOW FOR THE REAL WORK\nPRUNU3A  CH    R3,=H'15'           IE VALID FORMAT\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         CLI   0(R7),C'('          IE LEFT BANANA\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         CLI   14(R7),C')'         IE RIGHT BANANA\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         CLI   7(R7),C'-'          IE DASH\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         MVC   RVOLLO(6),1(R7)     OK! MOVE TO WORKAREA\n         MVC   RVOLHI(6),8(R7)     OK! MOVE TO WORKAREA\n         MVI   PSUBRUN,C'S'        ...OF VOL-RANGE SCRATCH\n         MVI   PSUBRNA,C'R'        ...OF VOL-RANGE SCRATCH\n         B     RANGECHK            GO VERIFY RANGE VALID\n         SPACE\nPRUNU4   CLC   0(5,R7),=C'ADDC,'   IE ADD NON-SCRATCH RUN\n         BNE   PRUNU5              NOPE! KEEP CHKING\n         AH    R7,=H'5'            BUMP LOC. PTR\n         AH    R4,=H'5'            BUMP OFFSET CTR\n         CLC   0(4,R7),=C'VOL='    IE VALID FORMAT\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         AH    R7,=H'4'            BUMP LOC. PTR\n         AH    R4,=H'4'            BUMP OFFSET CTR\n         CLC   0(5,R7),=C'SYSIN'   IE VALID FORMAT\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         MVI   PSUBRUN,C'I'        ...OF DATASET INPUT\n         B     PRSEXIT             GOOD! NOW FOR THE REAL WORK\n         SPACE\nPRUNU5   CLC   0(4,R7),=C'DEL,'    IE DELETE VOL REC RUN\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         AH    R7,=H'4'            BUMP LOC. PTR\n         AH    R4,=H'4'            BUMP OFFSET CTR\n         CLC   0(4,R7),=C'VOL='    IE VALID FORMAT\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         AH    R7,=H'4'            BUMP LOC. PTR\n         AH    R4,=H'4'            BUMP OFFSET CTR\n         LH    R3,IPARLEN          GET ORIG. INPUT LEN\n         SR    R3,R4               LESS CURRENT OFFSET\n         CH    R3,=H'6'            IE VOLSER LEN.\n         BNE   PRSBADL             SHOW PARMLIST INVALID\n         MVI   PSUBRUN,C'D'        SHOW DELETE REC RUN\n         MVI   PSUBRNA,C'S'        ...OF SINGLE VOL REC\n         MVC   RVOLLO(6),0(R7)     OK! MOVE TO WORKAREA\n         B     PRSEXIT             GOOD! NOW FOR THE REAL WORK\n         SPACE\nRANGECHK EQU   * FOR VOL RANGES MUST ALL NUMERIC & (VOLA < VOLB)\n         CLC   RVOLHI,RVOLLO       COMPARE VOLB TO VOLA\n         BH    RANGNUM             SO FAR SO GOOD\n         XR    R15,R15             ELSE! SHOW ERROR\n         LA    R15,12              SHOW RET CODE OF 12\n         B     RETURN              ....LET ITMS000A HANDLE IT\nRANGNUM  TRT   RVOLLO(6),NUMRTAB   CHECK IF ALL NUMERICS\n         BNZ   RANGERR             OH OH OH\n         TRT   RVOLHI(6),NUMRTAB   CHECK IF ALL NUMERICS\n         BNZ   RANGERR             OH OH OH\n         B     PRSEXIT             GOOD! GO ZERO RET CODE\nRANGERR  XR    R15,R15             CLR R15\n         LA    R15,16              SHOW RET CODE OF 12\n         B     RETURN              ....LET ITMS000A HANDLE IT\nPRSBADR  EQU   * IE RUNTYPE NOT VALID\n         XR    R15,R15             CLR R15\n         LA    R15,4               SHOW RET CODE OF 4\n         B     RETURN              ....LET ITMS000A HANDLE IT\nPRSBADL  EQU   * IE PARMLIST MISSING PARMS\n         ST    R4,PERROFF          SHOW OFFSET INTO PLIST WHERE BAD\n         XR    R15,R15             CLR R15\n         LA    R15,8               SHOW RET CODE OF 8\n         B     RETURN              ....LET ITMS000A HANDLE IT\nPRSEXIT  EQU   * IE EVERYTHING'S COOL\n         XR    R15,R15             CLR R15 TO SHOW 0 RET CODE\n         B     RETURN              ....AND GO HOME!\n         SPACE 2\nTRTCHAR  TRT   0(0,R7),CHARTAB     LOOK FOR VALID RUNTYPE\nMOVTDSN  MVC   ICTDSN(0),0(R7)     MOVE NEW TAPE DSN TO WORKAREA\nMOVRDSN  MVC   RTDSN(0),0(R7)      MOVE NEW TAPE DSN TO WORKAREA\n         SPACE 2\nRETURN   L     R13,SAVPAREA+4      RECOVER ADDR OF SAVE AREA\n         L     R14,12(R13)         RESTORE REG 14\n* R15 IS NOT RESTORED BECAUSE THATS WHERE WE'LL CARRY OUR RET. CODE\n         LM    R0,R12,20(R13)      RESTORE REST OF REGS\n         BR    R14                 BRANCH BACK TO CALLING PGM\n  TITLE '**ITMPAR01** ITMS TAPE MANAGEMENT SYSTEM *** CONSTANTS  ***'\nSAVPAREA DS    18F                 REG SAVE AREA\nBLANKTAB DC    XL256'00'\n         ORG   BLANKTAB+X'40'      IE, BLANKETY BLANK\n         DC    X'FF'\nCHARTAB  DC    XL256'00'\n         ORG   CHARTAB+C'C'        RUNTYPE CREATE\n         DC    X'FF'\n         ORG   CHARTAB+C'R'        RUNTYPE REPORT\n         DC    X'FF'\n         ORG   CHARTAB+C'U'        RUNTYPE UTILITY\n         DC    X'FF'\n         ORG   CHARTAB+C'X'        RUNTYPE EXPIRATION\n         DC    X'FF'\n         ORG\nNUMRTAB  DC    256X'FF'\n         ORG   NUMRTAB+C'0'        IE ZONED ZERO\n         DC    10X'00'\n         ORG\nITMPARSL DSECT           PARMLIST AREA FROM/TO ITMS000A/ITMPAR01\nIPARLEN  DS    H                   LEN' OF INPUT PARMS\nIPARAREA DS    CL80                INPUT PARMS SAVEAREA\nPRUNTYP  DS    C                   RUNTYPE FLAG\nPSUBRUN  DS    C                   SECOND RUNTYPE FLAG\nPSUBRNA  DS    C                   THIRD RUNTYPE FLAG\n* FOLL. LAYOUT FOR CREATE TYPE RUN IS EQUAL TO ITMCFILE REC. LAYOUT\nPCTYP    DS    0C          }  FOLL. = CREATE TYPE INPUT\nIVOLSR   DS    CL6                 INPUT VOLSER\nIEDATE   DS    CL7                 INPUT EXPIR. DATE YYYYDDD\nICTDSN   DS    CL44                INPUT TAPE DSN (44 MAX.)\nICDATE   DS    CL7                 TAPE CREATION DATE\nICFLG1   DS    C                   TAPE STATUS FLAG1\nICFLG2   DS    C                   TAPE STATUS FLAG2\nICFLG3   DS    C                   TAPE STATUS FLAG3\nICFLG4   DS    C                   TAPE STATUS FLAG4\nICFILL   DS    CL12                 'FILLER' FOR FUTURE USE\n         ORG   PCTYP               REDEFINE\n* REDEFINE LAYOUT FOR NON-'CREATE' TYPE RUN\nPXRUTYP  DS    0C                  NON-CREATE TYPE PARM INPUT\nPTYPE    DS    CL5                 INPUT TYPE= PARM\nRVOLLO   DS    CL6                 INPUT VOL=  (LO FOR RANGE)\nRVOLHI   DS    CL6                 (VOLLO-VOLHI) HI FOR RANGE\nREDATE   DS    CL7                 RUN EXPIR. DATE\nRFDATE   DS    CL7                 RUN FORECAST DATE\nRTDSN    DS    CL44                INPUT TAPE DSN  (FOR 'FIND' OPTION)\nRXFLAG   DS    C                   INPUT EXCEPTION REP. FLAG\nRUFLAG   DS    CL2                 UTIL. ALTER FLAG NUMBER\nRUFVAL   DS    C                   UTIL. ALTER FLAG VALUE\nRFILLL   DS    C                   RESERVED\n         SPACE\nPERROFF  DS    F                   OFFSET INTO PLIST W/ERROR\n         SPACE 2                   RESET\nITMPAR01 CSECT                     RESUME ORIG. CSECT\n         LTORG\n  TITLE '**ITMPAR01** ITMS TAPE MANAGEMENT SYSTEM ** REG EQUATES **'\n*        REGISTER EQUATES:\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10                  BAL REGISTER\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   ITMPAR01\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ITMSFUNC": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94)\\x7f\\x00\\x94)\\x7f\\x11B\\x00(\\x00(\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-10-24T00:00:00", "modifydate": "1994-10-24T11:42:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "SBGCSC"}, "text": "\n\n  ===> V2.M5            'ITMS' FUNCTIONS ( AND THEIR CODES )\n\n\n\n  S ITMSPROC,PARM='PLIST'\n\n  PLIST='C,VOLID,CDATE,EDATE,DSN' >>  FOR NEW D/B ENTRY\n\n  PLIST='X,EDATE=YYYYDDD'         >>  FOR EXPIRATION RUN\n\n  PLIST='R,TYPE=AVAIL'            >>  FOR LIST OF SCRATCH TAPES\n\n        'R,TYPE=CREAT'            >>  FOR LIST OF NON-SCRATCH TAPES\n\n        'R,TYPE=ALL'              >>  FOR LIST OF ALL TAPES\n\n        'R,TYPE=FOREC,FDATE=YYYYDDD' >> FORECAST TO A SPECIFIC DATE\n\n        'R,TYPE=FIND,DSN=?????'   >>  TO FIND VOLSER FOR DSN\n                    ,VOL=(XXX-XXX) >> TO REPORT ON VOL(S)\n\n        'R,TYPE=EXEP,X=' (ALL,U,O) >> FOR EXCEPTION REPORT\n\n        'R,TYPE=LOG'               >> FOR FULL LOG PRINT\n\n  PLIST='U,TYPE=XPDAT,VOL=??,EDATE=??' >> TO ALTER EXPIRATN DATE\n\n        'U,TYPE=FLAG,VOL=??,FLAG=??,NVAL=??' >> TO ALTER STATUS FLAG\n               FOR FLAG= 'S'  NVAL = 'C' , 'E'\n               FOR FLAG= 'X'  NVAL = 'B' , 'U' , 'O'\n\n        'U,TYPE=ADDE,VOL=(XXX-XXX)'    >> TO ADD SCRATCHES\n\n        'U,TYPE=ADDC,VOL=SYSIN'        >> TO ADD NON-SCRATCHES WITH ...\n                                       >> 'C' TYPE PLIST VIA SYSIN\n\n        'U,TYPE=DEL,VOL=VVVVVV'        >> TO DELETE A REC FROM ITMS D/B\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ITMSRUN": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94)\\x7f\\x00\\x94)\\x7f\\x18G\\x00\\x13\\x00\\x13\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-10-24T00:00:00", "modifydate": "1994-10-24T18:47:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "SBGCSC"}, "text": "//ITMS     PROC P1=,P2=,P3=,P4=,P5=\n//*\n//ITMSTEP    EXEC PGM=ITMS000A,PARM=('&P1&P2&P3&P4&P5')\n//*\n//STEPLIB    DD DISP=SHR,DSN=SYS2.AFCX.LOADLIB\n//*\n//ITMSENQ    DD DISP=OLD,DSN=ITMS.ENQUEUE\n//*\n//OUTDD1     OUTPUT DEST=TA3800,OUTDISP=KEEP\n//ITMPRINT   DD SYSOUT=*,DCB=(LRECL=121,BLKSIZE=1210)\n//ITMREPT    DD SYSOUT=A,DCB=(LRECL=121,BLKSIZE=1210,RECFM=FBA),\n//          OUTPUT=(*.OUTDD1)\n//*\n//ITMCNTL    DD DISP=SHR,DSN=ITMS.CNTLFIL\n//ITMLOGA    DD DISP=SHR,DSN=ITMS.ITMLOGA\n//ITMLOGB    DD DISP=SHR,DSN=ITMS.ITMLOGB\n//*\n//ITMSCIN    DD DUMMY\n//SYSUDUMP   DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ITMS000A": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94)\\x7f\\x00\\x94)\\x7f\\x11B\\x07\\x0f\\x07\\x0f\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-10-24T00:00:00", "modifydate": "1994-10-24T11:42:00", "lines": 1807, "newlines": 1807, "modlines": 0, "user": "SBGCSC"}, "text": "    TITLE '**ITMS000A** TAPE MANAGEMENT SYSTEM  ** MAINLINE **'\n         PRINT ON,NOGEN\nITMS000A CSECT\n         STM   14,12,12(13)        SAVE REGS OF CALLING  IN ITS AREA\n         LR    R10,R15             LOAD R10 WITH BASE ADDR\n         USING ITMS000A,R10,R11,R12    TELL ASSEMBLER WHATS WHAT\n         LH    R11,=H'4096'        LOAD R11 WITH BUMP FACTOR\n         AR    R11,R10             SET R11 FOR SECOND BASE REG.\n         LH    R12,=H'4096'        LOAD R12 WITH BUMP FACTOR\n         AR    R12,R11             SET R12 FOR THIRD BASE REG.\n         ST    R13,SAVEAREA+4      SAVE REG 13 IN MY SAVE AREA\n         LA    R13,SAVEAREA        PUT ADDR OF MY SAVE AREA INTO R13\n         ST    R1,SAVORINP         SAVE ADDR. OF PARM INPUT\n         B     STARTPGM\n         SPACE\n         LTORG\n         SPACE\n         DC    C'**ITMS000A** TAPE MANAGER PGM'\n         DC    C'  ASSEMBLED &SYSTIME &SYSDATE'\n         DS    H\nSTARTPGM EQU   *\n* FIRST! LET'S OPEN OUR SYSOUT FILE FOR STATUS MESSAGE RECORDING\n         OPEN  (ITMPRINT,OUTPUT)     OPEN SYSOUT FILE DCB\n         OPEN  (ITMREPT,OUTPUT)      OPEN SYSOUT FILE DCB\n* FIRST LET'S SHOHH WE'RE CRANKING\n         LA    R9,ITMI00           PICK MSG ADDR.\n         BAL   R2,TELLWRLD         GO TELL THE WORLD\n* NOW  LET'S GET OUR INPUT AND SEE WHAT THE USER WANTS\n         SPACE\n         XC    SAV15RTC(4),SAV15RTC INIT R15 SAVE AREA\n         MVI   PAGNEW,C'Y'         INIT NEW PAGE SWITCH\n         MVI   ITMCLSW,C'Y'        INIT DB CLOS SWITCH\n         MVI   SYSRUN,C'N'         INIT SYSIN-UTIL RUN SWITCH\n         MVI   RNODF,C'Y'          INIT NO DATA FND SWITCH\n         XR    R15,R15             INIT REG R15\n         L     R1,SAVORINP         REST ADDR. OF PARM INPUT\n         L     R1,0(R1)            PICK INPUT ADDR.\n         LH    R3,0(R1)            PICK UP PARMIN LENGTH\n         LTR   R3,R3               ANYTHING??\n         BZ    ITMER001            NOPE ! GO SHOW ERROR\n         MVI   PRSAREA,X'40'       ELSE! LETS GET GOING\n         MVC   PRSAREA+1(PPLEN-1),PRSAREA   LETS CLEAR IT OUT FIRST\n         STH   R3,PPARLEN          OK! NOW PUT INTO PARSER WORKAREA\n         LA    R4,2(,R1)           POINT TO ACTUAL INPUT\n         BCTR  R3,0                SET TO MACH. LEN\n         EX    R3,MOVPARM          ... AND MOVE TO PARSER WORKAREA\n         LA    R1,PRSAREA          POINT TO PARSER WORKAREA\n         L     R15,=V(ITMPAR01)    GET PARSER'S ADDR.\n         BALR  R14,R15             ...AND GO DO IT!\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BNZ   ITMER002            NG GO TO ERROR RTN\n         SPACE 2\n* SO FAR SO GOOD SO LETS GO OPEN THE ITMS DATABASE AND LOG FILES\n         BAL   R2,OPNITMDB         GO OPEN ITMS DATABASE\n         SPACE\n         LA    R9,ITMI01           PICK MSG ADDR.\n         BAL   R2,TELLWRLD         GO TELL THE WORLD\n         SPACE\n* OK NOW LET'S SEE WHAT THE PARSER RETURNED TO US\n         CLI   PPRUNTYP,C'C'       WE DOING A CREATE RUN\n         BNE   CHKEXPR             NOPE! MAYB EXPIRATION ??\n         MVC   LOGREQ,=C'INIT'     YUP! SHOW INITIAL LOG ENTRY\n         BAL   R2,LOGHNDLR         GO LOG IT\n         MVC   LOGREQ,=C'INIB'     YUP! SHOW INITIAL PRS ENTRY\n         BAL   R2,LOGHNDLR         GO LOG IT\n         BAL   R2,DOITMCRT         GO DO IT\n         B     ITMS0END            ...AND GO HOME!!\nCHKEXPR  CLI   PPRUNTYP,C'X'       WE DOING A EXPIRATION RUN\n         BNE   CHKREPT             NOPE! MAYB REPORT ??\n         MVC   LOGREQ,=C'INIT'     YUP! SHOW INITIAL LOG ENTRY\n         BAL   R2,LOGHNDLR         GO LOG IT\n         MVC   LOGREQ,=C'INIB'     SHOW INITIAL PRS ENTRY\n         BAL   R2,LOGHNDLR         GO LOG IT\n         BAL   R2,DOITMEXP         GO DO IT\n         B     ITMS0END            ...AND GO HOME!!\nCHKREPT  CLI   PPRUNTYP,C'R'       WE DOING A REPORT RUN\n         BNE   CHKUTIL             NOPE! MAYB UTIL??\n         MVI   NOLOGSW,C'N'        YUP! TURN OFF LOGGING\n         MVC   LOGREQ,=C'INIT'     SHOW INITIAL LOG ENTRY\n         BAL   R2,LOGHNDLR         GO LOG IT (IE TO SYSOUT ONLY)\n         MVC   LOGREQ,=C'INIB'     SHOW INITIAL PRS ENTRY\n         BAL   R2,LOGHNDLR         GO LOG IT (IE TO SYSOUT ONLY)\n         BAL   R2,DOITMREP         YUP! GO DO IT\n         B     ITMS0END            ...AND GO HOME!!\nCHKUTIL  CLI   PPRUNTYP,C'U'       WE DOING A UTILITY RUN\n         BNE   ITMER000            NOPE! MAYB ERROR???????????\n         MVC   LOGREQ,=C'INIT'     YUP! SHOW INITIAL LOG ENTRY\n         BAL   R2,LOGHNDLR         GO LOG IT\n         MVC   LOGREQ,=C'INIB'     SHOW INITIAL PRS ENTRY\n         BAL   R2,LOGHNDLR         GO LOG IT\n         BAL   R2,DOITMUTL         GO DO IT\n         B     ITMS0END            ...AND GO HOME!!\n         SPACE\nITMS0END EQU   * WE'RE DONE SO LETS CALL IT MILLER TIME\n         BAL   R2,CLSITMDB         GO CLOSE DOWN\n         SPACE\n         LA    R9,ITMI03           PICK MSG ADDR.\n         BAL   R2,TELLWRLD         GO TELL THE WORLD\n         SPACE\n         CLOSE ITMPRINT            CLOSE ITM SYSOUT FILE\n         CLOSE ITMREPT             CLOSE ITM SYSOUT FILE\n         SPACE\n         L     R13,SAVEAREA+4      RESTORE REG 13\n         L     R14,12(,R13)        RESTORE REG 14\n         L     R15,SAV15RTC        PICK RET CODE IN R15\n         LM    R0,R12,20(R13)      RESTORE REST EXCEPT R15\n         BR    R14                 RETURN TO CALLER (IE OS)\n         SPACE 2\nMOVPARM  MVC   PPPAREA(0),0(R4)    MOVE INPUT TO PARSER WORKAREA\n  TITLE '**ITMS000A** TAPE MANGMNT SYSTEM  ** DATABASE OPEN RTNS.**'\nOPNITMDB EQU   *\n         ST    R2,OPN10SAV         SAVE RET. REG\n         CLI   PPRUNTYP,C'R'       IS THIS REPORT RUN\n         BNE   OPNITOUT            NOPE! MUST OPEN THE DB FOR OUTPT\n         SPACE\n         OPEN  ITMCNTL             OPEN CNTLFILE INPUT ACB\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    OCLSW1              GOOD! GO SHOW OPEN\n         LA    R9,ITMCNTL          ELSE! SHOW ERROR\n         LA    R8,=CL5'OPEN '      SHOW ERROR REQ\n         MVI   SHOFLAG,C'A'        SHOW ACB ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nOCLSW1   MVI   ITMCLSW,C'N'        OK ! SHOW DB = OPEN\n         B     OPNEXIT             GOOD JOB! RETURN TO CALLER\n         SPACE\nOPNITOUT EQU   * FOR UPDATE RUNS WE OPEN DB FOR UPDT & ALSO THE LOGS\n         MODCB ACB=ITMCNTL,MACRF=(OUT)\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    OCLSW2              GOOD! GO SHOW OPEN\n         LA    R9,ITMCNTL          ELSE! SHOW ERROR\n         LA    R8,=CL5'MODCB'      SHOW ERROR REQ\n         MVI   SHOFLAG,C'A'        SHOW ACB ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nOCLSW2   OPEN  ITMCNTL             OPEN CNTLFILE IN/OUT ACB\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    OCLSW3              GOOD! GO SHOW OPEN\n         LA    R9,ITMCNTL          ELSE! SHOW ERROR\n         LA    R8,=CL5'OPEN '      SHOW ERROR REQ\n         MVI   SHOFLAG,C'A'        SHOW ACB ERROR\n         B     ITMER003            ...AND GO TO ERRORS\nOCLSW3   MVI   ITMCLSW,C'N'        OK ! SHOW DB = OPEN\n         SPACE\n         GET   RPL=CRECRPL         READ CNTLREC FOR CURR. LOG EXTENT\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    OPNLAB1             GOOD!\n         LA    R9,CRECRPL          ELSE! PICK RPL ADDR.\n         LA    R8,=CL5'GET C'      SHOW VSAM REQ.\n         MVI   SHOFLAG,C'R'        SHOW VSAM REQ.\n         BAL   R2,ITMERLOG         .AND! GO SHOH ERROR\n         B     OPNEXIT             ....AND GO HOME\n         SPACE\nOPNLAB1  MODCB ACB=ITMLOGX,DDNAME=(*,CCUREX),MACRF=OUT\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    OPNLAB2             GOOD!\n         LA    R9,ITMLOGX          ELSE! PICK ACB ADDR.\n         LA    R8,=CL5'MODCB'      SHOW VSAM REQ.\n         MVI   SHOFLAG,C'A'        SHOW VSAM REQ.\n         BAL   R2,ITMERLOG         .AND! GO SHOH ERROR\n         B     OPNEXIT             ....AND GO HOME\n         SPACE\nOPNLAB2  OPEN  ITMLOGX             OPEN CUURENT LOG EXTENT ACB\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    OPNEXIT             GOOD! WE'RE DONE!\n         LA    R9,ITMLOGX          ELSE! PICK ACB ADDR.\n         LA    R8,=CL5'OPEN '      SHOW VSAM REQ.\n         MVI   SHOFLAG,C'A'        SHOW VSAM REQ.\n         BAL   R2,ITMERLOG         .AND! GO SHOH ERROR\n         B     OPNEXIT             ....AND GO HOME\n         SPACE\nOPNEXIT  EQU   * GOOD JOB! RETURN TO CALLER\n         L     R2,OPN10SAV         RESTORE BAL REG\n         BR    R2                  SAYONAAAAAAAAAAAAARA\n         SPACE\n  TITLE '**ITMS000A** TAPE MANGMNT SYSTEM  ** DATABASE CLOSE RTN.**'\nCLSITMDB EQU   *\n         ST    R2,CLS10SAV         SAVE RET. REG\n         SPACE\n         CLI   ITMCLSW,C'Y'        IS ITMS DB ALREADY CLOSED\n         BE    CLSEXIT             YUP! SKIP ITM CLOSE\n         CLOSE ITMCNTL             ELSE! CLOSE IT!\n         SPACE\n         CLI   PPRUNTYP,C'R'       IS THIS REPORT RUN\n         BE    CLSEXIT             YUP! SKIP LOG CLOSE\n         CLI   NOLOGSW,C'N'        WAS LOGGING TURNED OFF\n         BE    CLSEXIT             YUP! SKIP LOG CLOSE\n         CLOSE ITMLOGX             ELSE! CLOSE IT!\n         SPACE\n         LA    R9,ITMI02           PICK MSG ADDR.\n         BAL   R2,TELLWRLD         GO TELL THE WORLD\n         SPACE\nCLSEXIT  EQU   * GOOD JOB! RETURN TO CALLER\n         L     R2,CLS10SAV         RESTORE BAL REG\n         BR    R2                  SAYONAAAAAAAAAAAAARA\n  TITLE '**ITMS000A** TAPE MANGMNT SYSTEM  ** CREATE TAPE PROCSNG**'\nDOITMCRT EQU   *\n         ST    R2,CRT10SAV           SAVE RET ADDR.\n         SPACE\n         MVC   SRCHKY(6),PVOLSR    SET UP SEARCH ON REQ. VOLSER\n         MODCB RPL=CNTLRPL,OPTCD=(DIR,UPD),ARG=SRCHKY\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    GETCRT1             GOOD! GET THE RECORD\n         LA    R9,CNTLRPL          ELSE! SHOW ERROR\n         LA    R8,=CL5'MODCB'      SHOW ERROR REQ\n         MVI   SHOFLAG,C'R'        SHOW RPL ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nGETCRT1  GET   RPL=CNTLRPL         READ CNTLFIL FOR REQ. VOLSER\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    CRTCHK              FOUND! LETS CHK THE REC'S STATUS\n         SPACE\n         SHOWCB AREA=VERFDBK,LENGTH=4,FIELDS=FDBK,                     X\n               RPL=CNTLRPL\n         SPACE\n         CLI   VERFDBK+3,X'10'     RECORD NOT FOUND??\n         BE    CRTDOCRA            GOOD! GO ADD THIS TAPE\n         LA    R9,CNTLRPL          ELSE! SHOW ERROR\n         LA    R8,=CL5'GET D'      SHOW 'GET DIR' ERROR\n         MVI   SHOFLAG,C'R'        SHOW RPL ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nCRTCHK   EQU   * IF REC FOUND ON CREATE RUN WE LOG OLD REC IMAGE\n         CLI   CCFLG1,C'E'         IS A SCRATCH REC.\n         BE    CRTDOCRB            OK GO FILL IN REST OF REC.\n         MVC   LOGREQ(4),=C'OLDR'  ELSE! SET UP FOR LOGGER\n         BAL   R2,LOGHNDLR         ...AND GO LOG IT!!\n         SPACE\n         MVI   CVOLSR,X'40'        OK! NOW CLR IT OUT\n         MVC   CVOLSR+1(79),CVOLSR    DITTO\n         CLI   PPRUNTYP,C'U'       WE DOIN' UTIL RUN\n         BE    CRTDOCR2            YUP! BYPASS OV FLAG\n         MVI   CCFLG2,C'O'         SHOW THIS AS AN 'OVERLAY'\n         B     CRTDOCR2            OK GO FILL IN REST OF REC.\n         SPACE\nCRTDOCRA MODCB RPL=CNTLRPL,OPTCD=(DIR,NUP),ARG=SRCHKY\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    CRTDOCR             GOOD! GET THE RECORD\n         LA    R9,CNTLRPL          ELSE! SHOW ERROR\n         LA    R8,=CL5'MODCB'      SHOW ERROR REQ\n         MVI   SHOFLAG,C'R'        SHOW RPL ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nCRTDOCR  EQU   * HERE WE SET UP TO ADD A NEW 'CREATE' TAPE RECORD\n         MVI   NEWRCS,C'N'         SHOW THIS IS NEW REC\nCRTDOCRB MVI   CVOLSR,X'40'        FIRST CLEAR IT OUT\n         MVC   CVOLSR+1(79),CVOLSR    DITTO\nCRTDOCR2 MVC   CVOLSR(6),SRCHKY    MOVE VOLSER TO RECORD\n         MVC   CEDATE(7),PEDATE    MOVE EXP. DATE TO REC.\n         CLC   CEDATE(7),=7X'F0'   IE UNKNOWN EXP DATE\n         BNE   CRTDOCR4            NOPE!\n         CLI   CCFLG2,C'O'         IS THIS AN OVERLAY\n         BNE   CRTDOCR3            NOPE!\n         MVI   CCFLG2,C'B'         ELSE! SHOW BOTH OVL & UNKNWN\n         B     CRTDOCR4            & CONTINUE\nCRTDOCR3 MVI   CCFLG2,C'U'         SHOW THIS REC AS UNKNWN\nCRTDOCR4 MVC   CCTDSN(44),PCTDSN   MOVE DSN TO RECORD\n         MVC   CCDATE(7),PCDATE    MOVE CREATDATE TO REC.\n         MVI   CCFLG1,C'C'         SHOW THIS IS A 'CREATE'\n         SPACE\n         PUT   RPL=CNTLRPL         WRITE IT TO ITMS DB\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    CRTLAB              GOOD! GO ADD TO CTR\n         LA    R9,CNTLRPL          ELSE! SHOW ERROR\n         LA    R8,=CL5'PUT D'      SHOW 'PUT DIR' ERROR\n         MVI   SHOFLAG,C'R'        SHOW RPL ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nCRTLAB   CLI   NEWRCS,C'N'         IS THIS A NEW REC\n         BE    CRTLAB1             YUP! GO UPDATE NEWREC CTR\n         AP    UPDCTR(3),=P'1'     ELSE! BUMP UPDATED REC CTR\n         MVC   LOGREQ(4),=C'UPDR'  SET UP FOR LOGGER\n         B     CRTLAB2             .... AND GO DO IT\nCRTLAB1  MVC   LOGREQ(4),=C'NEWR'  SHOW THIS IS NEW REC\n         AP    NEWCTR(3),=P'1'     BUMP NEW RECORD  CTR\nCRTLAB2  BAL   R2,LOGHNDLR         ...AND GO LOG IT!!\n         CLI   SYSRUN,C'S'         WE IN MIDDLE OF 'SYSIN' UTIL RUN\n         BE    CRTEXIT             YUP! GO BACK FOR MORE\nCRTLAB3  BAL   R2,PUTNCTR          GO PUT OUT COUNTER\n         B     CRTEXIT             ....AND GO HOME\n         SPACE\nCRTEXIT  EQU   *\n         L     R2,CRT10SAV         REST. RET ADDR.\n         BR    R2                  RETURN TO CALLER\n  TITLE '**ITMS000A** TAPE MANGMNT SYSTEM  ** EXPIRATION PROCSNG**'\nDOITMEXP EQU   *\n         ST    R2,EXP10SAV           SAVE RET ADDR.\n         CLC   PREDATE(7),UNPKDATE+1 REQ. EXPIR. DATE >= TODAY\n         BL    ITMER00F            NOPE! QUIT NOW\n         SPACE\n         MODCB RPL=CNTLRPL,OPTCD=(KEY,SEQ,UPD),ARG=CRECARG\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    GETEXP1             GOOD! GET THE RECORD\n         LA    R9,CNTLRPL          ELSE! SHOW ERROR\n         LA    R8,=CL5'MODCB'      SHOW ERROR REQ\n         MVI   SHOFLAG,C'R'        SHOW RPL ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nGETEXP1  POINT RPL=CNTLRPL         IE, POSITION TO EOF\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    GETEXP2             OK! START READING\n         SPACE\n         LA    R9,CNTLRPL          ELSE! SHOW ERROR\n         LA    R8,=CL5'POINT'      SHOW ERROR REQ\n         MVI   SHOFLAG,C'R'        SHOW RPL ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nGETEXP2  GET   RPL=CNTLRPL         READ CNTLFIL SEQ'LY\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    PUTEXP1             OK! GO PUT IT BACK (TO FREE RPL)\n         SPACE\n         LA    R9,CNTLRPL          ELSE! SHOW ERROR\n         LA    R8,=CL5'GETSC'      SHOW ERROR REQ\n         MVI   SHOFLAG,C'R'        SHOW RPL ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nPUTEXP1  PUT   RPL=CNTLRPL         OK! WRITE IT BACK\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    CNTLCHK             OK! THE 1ST ONE MUST BE THE CNTLREC\n         SPACE\n         LA    R9,CNTLRPL          ELSE! SHOW ERROR\n         LA    R8,=CL5'PUTSC'      SHOW ERROR REQ\n         MVI   SHOFLAG,C'R'        SHOW RPL ERROR\n         B     ITMER003            ...AND GO TO ERRORS\nCNTLCHK  EQU   * LETS MAKE SURE THIS IS THE CNTL REC\n         CLC   CVOLSR(6),CRECARG   IS THIS THE CNTL REC??\n         BNE   ITMFERR1            THIS IS FATAL!!\nDONEXP   EQU   * OK NOW LETS GET THE REST OF THE RECS AND PROCESS THEM\n         GET   RPL=CNTLRPL         READ CNTLFIL SEQ'LY\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    DOEXLAB1            OK! LETS CHECK IT OUT\n         SPACE\n         LA    R9,CNTLRPL          ELSE! SHOW ERROR\n         LA    R8,=CL5'GET S'      SHOW ERROR REQ\n         MVI   SHOFLAG,C'R'        SHOW RPL ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nDOEXLAB1 MVI   EXPLF,C'N'          PRIME LOGR FLAG\n         CLI   CCFLG1,C'E'         IS A SCRATCH REC.\n         BE    DOEXLAB4            YUP! SKIP THIS ONE\n         CLC   CEDATE(7),=7X'F0'   IE UNKNOWN EXP DATE\n         BE    DOEXLAB3            YUP! WE EXPIRE IT\n         CLC   CEDATE(7),PREDATE   WE EXPIRED YET\n         BNH   DOEXLAB3            LOOKS SO!\n         B     DOEXLAB4            NOPE!\nDOEXLAB3 MVI   CCFLG1,C'E'         EXPIRE THIS GUY\n         MVI   EXPLF,C'Y'          SET TO BE LOGGED FLAG\nDOEXLAB4 PUT   RPL=CNTLRPL         OK! WRITE IT BACK\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    EXPRLOG             GOOD! LETS LOG & KEEP GOING\n         SPACE\n         LA    R9,CNTLRPL          ELSE! SHOW ERROR\n         LA    R8,=CL5'PUT S'      SHOW ERROR REQ\n         MVI   SHOFLAG,C'R'        SHOW RPL ERROR\n         B     ITMER003            ...AND GO TO ERRORS\nEXPRLOG  CLI   EXPLF,C'N'          THIS REC TO BE LOGGED\n         BE    DONEXP              YUP! SKIP LOGGING ON THIS ONE\n         MVC   LOGREQ(4),=C'EXPR'  SET UP FOR LOGGER\n         BAL   R2,LOGHNDLR         ...AND GO LOG IT!!\n         AP    NEWCTR(3),=P'1'     ADD ONE NOTCH TO GRIP\n         B     DONEXP              GOOD! LETS LOG & KEEP GOING\n         SPACE\nCNTLEOF  EQU   * AT EOF ITS TIME TO WRITE OUT STATUS AND GO HOME\n         MVI   PUTFLG,C'E'         SHOW EXP RUN\n         BAL   R2,PUTNCTR          GO SHOW COUNTS.\nEXPEXIT  EQU   *\n         L     R2,EXP10SAV         REST. RET ADDR.\n         BR    R2                  RETURN TO CALLER\n  TITLE '**ITMS000A** TAPE MANGMNT SYSTEM  ** DB REPORT PROCSNG **'\nDOITMREP EQU   * FIRST WE'LL DETERMINE WHICH REPT TYPE IS REQUESTED\n         ST    R2,REP10SAV         SAVE RET ADDR.\n         SPACE\n         CLI   PPSUBRUN,C'L'       IS LOG RPINT REQ.\n         BE    DOITMRLG            YUP! GO TO LOG PR RTN\n         SPACE\n         MODCB EXLST=CNTLXLST,EODAD=CNTLEREP\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    GETREP1             GOOD! GET THE RECORD\n         B     ITMER004            ELSE! GO TO ERRORS\n         SPACE\nGETREP1  GET   RPL=CNTLRPL         READ CNTLFIL SEQ'LY\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    CNTLCHKR            OK! THE 1ST ONE MUST BE THE CNTLREC\n         SPACE\n         LA    R9,CNTLRPL          ELSE! SHOW ERROR\n         LA    R8,=CL5'GET S'      SHOW ERROR REQ\n         MVI   SHOFLAG,C'R'        SHOW RPL ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nCNTLCHKR EQU   * LETS MAKE SURE THIS IS THE CNTL REC\n         CLC   CVOLSR(6),CRECARG   IS THIS THE CNTL REC??\n         BNE   ITMFERR1            THIS IS FATAL!!\n         MVI   REPFSW,C'X'         INIT THIS SWITCH\nDOLREP   EQU   * OK NOW LETS GET THE REST OF THE RECS AND PROCESS THEM\n         GET   RPL=CNTLRPL         READ CNTLFIL SEQ'LY\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    DORPLAB1            OK! LETS CHECK IT OUT\n         SPACE\n         LA    R9,CNTLRPL          ELSE! SHOW ERROR\n         LA    R8,=CL5'GET S'      SHOW ERROR REQ\n         MVI   SHOFLAG,C'R'        SHOW RPL ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nDORPLAB1 CLI   PPSUBRUN,C'A'       'ALL' REP REQ.\n         BE    DORPLOG             ITS A HIT GO LOG IT\n         CLI   PPSUBRUN,C'V'       'AVAIL' REP REQ.\n         BNE   DORPLAB2            NOPE!\n         CLI   CCFLG1,C'E'         IS REC EXPIRED\n         BE    DORPLOG             ITS A HIT GO LOG IT\n         B     DOLREP              NOH! SKIP THIS ONE\n         SPACE\nDORPLAB2 CLI   PPSUBRUN,C'C'       'CREAT' REP REQ.\n         BNE   DORPLAB3            NOPE!\n         CLI   CCFLG1,C'C'         IS REC IN CREATED STATUS\n         BE    DORPLOG             ITS A HIT GO LOG IT\n         B     DOLREP              NOH! SKIP THIS ONE\n         SPACE\nDORPLAB3 CLI   PPSUBRUN,C'X'       'EXCEP' REP REQ.\n         BNE   DORPLAB4            NOPE!\n         CLI   CCFLG2,X'40'        ANYTHING??\n         BE    DOLREP              NOH! SKIP THIS ONE\n         CLI   PRXFLAG,C'A'        'ALL' EXPT'S WANTED\n         BE    DORPLOG             ITS A HIT GO LOG IT\n         CLI   CCFLG2,C'B'         'BOTH' EXEP ON?\n         BE    DORPLOG             YUP! GO LOG IT\n         CLC   PRXFLAG(1),CCFLG2   THIS THE ONE REQUESTED\n         BE    DORPLOG             ITS A HIT GO LOG IT\n         B     DOLREP              NOH! SKIP THIS ONE\n         SPACE\nDORPLAB4 CLI   PPSUBRUN,C'F'       'FORECAST' REP REQUESTED\n         BNE   DORPLAB5            NOPE!\n         CLC   PRFDATE(7),UNPKDATE+1 REQ. FOREC >= TODAY\n         BL    ITMER00F            NOPE! QUIT NOW\n         CLI   CCFLG1,C'E'         THIS REC EXP. ALREADY\n         BE    DOLREP              YUP! SKIP THIS ONE\n         CLC   CEDATE(7),=7X'F0'   IE UNKNOWN EXP DATE\n         BE    DORPLOG             ITS A HIT GO LOG IT\n         CLC   CEDATE(7),PRFDATE   WE BE EXPIRED BY FOREC. DATE???\n         BNH   DORPLOG             LOOKS LIKE A HIT!\n         B     DOLREP              NOH! SKIP THIS ONE\n         SPACE\nDORPLAB5 CLI   PPSUBRUN,C'S'       'FIND' REP REQUESTED\n         BNE   REPEXIT             IF NOT ONE OF THE ABOVE, I GIVE UP\n         CLI   PPSUBRNA,C'D'       FIND BY DSN\n         BNE   DORPLAB6            NOPE!\n         LH    R3,PPERROFF         PICK UP DSN LEN\n         EX    R3,COMPDSN          ....FOR COMPARE\n         BNE   DOLREP              NOP! SKIP THIS ONE\n         MVI   REPFSW,C'F'         SHOW WE GOT SOME\n         B     DORPLOG             ITS A HIT GO LOG IT\n         SPACE\nCOMPDSN  CLC   CCTDSN(0),PRTDSN    WE THE SAME??\n         SPACE\nDORPLAB6 CLC   CVOLSR(6),PRVOLLO   ONE WE LOOKING FOR ?\n         BNE   DORPLAB8            NOPE!\n         CLC   PRVOLHI(6),=6X'40'  WAS RANGE SPECIFIED?\n         BNE   DORPLAB7            YES! SO WE MUST LOOK FOR REST\n         MVI   REPFSW,C'D'         ELSE! SHOW WERE DONE\n         B     DORPLOG             ....AND GO TO LOGGER\nDORPLAB7 MVI   REPFSW,C'F'         SHOW WE GOT SOME\n         B     DORPLOG             ....AND GO TO LOGGER\nDORPLAB8 BL    DOLREP              WE CANT MAKE IT , GET NEX REC\n         CLC   PRVOLHI(6),=6X'40'  WAS RANGE SPECIFIED?\n         BE    CNTLEREP            NOPE LOOKS LIKE WERE OVER THE TOP\n         CLC   CVOLSR(6),PRVOLHI   ONE WE LOOKING FOR ?\n         BH    CNTLEREP            NOPE LOOKS LIKE WERE OVER THE TOP\n         MVI   REPFSW,C'F'         ELSE! SHOW WE GOT ONE\n         B     DORPLOG             ....AND GO TO LOGGER\n         SPACE\nDORPLOG  CLI   EXPLF,C'N'          THIS REC TO BE LOGGED\n         BE    DONEXP              YUP! SKIP LOGGING ON THIS ONE\n         MVC   LOGREQ(4),=C'REPT'  SET UP FOR LOGGER\n         BAL   R2,LOGHNDLR         ...AND GO LOG IT!!\n         AP    NEWCTR(3),=P'1'     ADD ONE NOTCH TO GRIP\n         CLI   PPSUBRUN,C'S'       WAS 'FIND' REP REQUESTED\n         BNE   DLOGCN1             NOPE! SKIP THIS STUFF\n         CLI   REPFSW,C'D'         WE DONE??\n         BE    CNTLEREP            YUP! WE'RE DONE!!!!\nDLOGCN1  B     DOLREP              OK! LETS KEEP GOING\n         SPACE 2\nCNTLEREP EQU   * AT EOF ITS TIME TO WRITE OUT STATUS AND GO HOME\n         CP    NEWCTR(3),=P'00'    WAS ANYTHING FOUND\n         BNE   CNTLER2             OK! SKIP NEXT\n         MVI   RNODF,C'N'          ELSE! SHOW NO DATA FND\n         BAL   R2,REPTPRT          ...AND GO TO RPT WRITER\nCNTLER2  CLI   PPSUBRUN,C'S'       WAS 'FIND' REP REQUESTED\n         BNE   EREPCN1             NOPE! SKIP THIS STUFF\n         CLI   REPFSW,C'X'         WAS ANYTHING FOUND?\n         BE    ITMER00G            NOPE! SHOW ERROR\nEREPCN1  MVI   PUTFLG,C'R'         SHOW REP RUN\n         BAL   R2,PUTNCTR          GO SHOW COUNTS.\nREPEXIT  EQU   *\n         L     R2,REP10SAV         REST. RET ADDR.\n         BR    R2                  RETURN TO CALLER\n  TITLE '**ITMS000A** TAPE MANGMNT SYSTEM  ** LOG PRINT FORMATTER **'\nDOITMRLG EQU   * FOR LOG PRINT REPORTS WE'LL PRINT THE LOGS BWDS (IE,\n**               IN CHRONOLOGICAL ORDER ) **\n         MVI   LEXSW,C'F'          SHOW WE'RE ON FIRST EXTENT\n         GET   RPL=CRECRPL         READ CNTLFIL FOR CURR. LOG EXTENT\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    RPLLAB2             GOOD! KEEP GOING!\n         LA    R9,CRECRPL          ELSE! PICK ACB ADDR.\n         LA    R8,=CL5'GET C'      SHOW VSAM REQ.\n         MVI   SHOFLAG,C'R'        SHOW VSAM REQ.\n         B     ITMER003            .AND! GO SHOH ERROR\n         SPACE\nRPLLAB2  EQU   *\nOPENCUR  MODCB ACB=ITMLOGX,DDNAME=(*,CCUREX)\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    RPLLAB3             GOOD! KEEP GOING!\n         LA    R9,ITMLOGX          ELSE! PICK ACB ADDR.\n         LA    R8,=CL5'MODCB'      SHOW VSAM REQ.\n         MVI   SHOFLAG,C'A'        SHOW VSAM REQ.\n         B     ITMER003            .AND! GO SHOH ERROR\n         SPACE\nRPLLAB3  OPEN  ITMLOGX             OPEN NEW EXTENT\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    RPLLAB4             GOOD! KEEP GOING!\n         LA    R9,ITMLOGX          ELSE! PICK ACB ADDR.\n         LA    R8,=CL5'OPEN '      SHOW VSAM REQ.\n         MVI   SHOFLAG,C'A'        SHOW VSAM REQ.\n         B     ITMER003            .AND! GO SHOH ERROR\n         SPACE\nRPLLAB4  EQU   * OK! NOW SET RPL TO READ BACKWARDS\n         BAL   R2,SHOWLGX          GO SHOW CURRENT LOG XTNT\n         MODCB RPL=LOGXRPL,OPTCD=(ADR,SEQ,LRD,BWD)\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    RPLLAB5             GOOD! NOW LETS POSITION IT\n         LA    R9,LOGXRPL          ELSE! SHOW ERROR\n         LA    R8,=CL5'MODCB'      SHOW ERROR REQ\n         MVI   SHOFLAG,C'R'        SHOW RPL ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nRPLLAB5  POINT RPL=LOGXRPL         IE, POSITION TO EOF\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    RPLLAB6             OK! START READING\n         SPACE\n         LA    R9,LOGXRPL          ELSE! SHOW ERROR\n         LA    R8,=CL5'POINT'      SHOW ERROR REQ\n         MVI   SHOFLAG,C'R'        SHOW RPL ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nRPLLAB6  GET   RPL=LOGXRPL         READ LOG SEQ'LY BWD'S\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    RPLLAB7             SO FAR SO GOOD\n         SPACE\n         LA    R9,LOGXRPL          ELSE! SHOW ERROR\n         LA    R8,=CL5'GET B'      SHOW ERROR REQ\n         MVI   SHOFLAG,C'R'        SHOW RPL ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nRPLLAB7  MVC   LOGREQ(4),=C'RLOG'  SET UP FOR LOGGER\n         BAL   R2,LOGHNDLR         ...AND GO LOG IT!!\n         AP    NEWCTR(3),=P'1'     ADD ONE NOTCH TO GRIP\n         B     RPLLAB6             ..AND GO REST OF THEM\n         SPACE\nLOGXEOF  EQU   *\n         CLOSE ITMLOGX             CLOSE ITM LOG FILE\n         SPACE\n         LTR   R15,R15             HOW ! WE DOIN'\n         BZ    LOGXEOF2            GOOD!\n         LA    R9,ITMLOGX          ELSE! SHOW ERROR\n         LA    R8,=CL5'CLOSE'      SHOW ERROR REQ\n         MVI   SHOFLAG,C'A'        SHOW ACB ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nLOGXEOF2 CLI   LEXSW,C'S'          WE ON SECOND EXTENT\n         BE    EREPCN1             GREAT! WE'RE DONE\n         CLI   CCSEXL,C'S'         WAS SECOND LOG XNTN EVER CRTED\n         BE    SWITLX              YUP! TIME TO SWITCH EXNTENTS\n         B     EREPCN1             ELSE! WE'RE DONE\n         SPACE\nSWITLX   CLI   CCUREX+6,C'A'       WE DOIN' 'A' EXTENT\n         BNE   LOGXL1              NOPE! GO SET A AS CURRENT\n         MVI   CCUREX+6,C'B'       ELSE! SET B AS CURR.\n         B     LOGXL2              GO DO IT\nLOGXL1   MVI   CCUREX+6,C'A'       SET A AS CURR.\nLOGXL2   MVI   LEXSW,C'S'          WE ON SECOND EXTENT\n         B     RPLLAB2             GO OPEN NEXT EXTENT\n         SPACE 2\nSHOWLGX  EQU   * HERE WE SHOW LOG EXTENT WE'RE CURRENTLY PRINTING\n         ST    R2,LGE10SAV         SAVE RET REG\n         MVC   WLGX(1),CCUREX+6    SHOW LOG XTNT\n         WTO   MF=(E,WTOLGX)\n         SPACE\n         MVI   POUTFIL,X'40'         CLR OUT PRINTLINE\n         MVC   POUTVAR(POUTLEN-1),POUTFIL   DITTO\n         MVC   POUTVAR(LWLGX-3),WTOLGX+3   MOVE MSG TO PRTLINE\n         SPACE\n         PUT   ITMPRINT,ITMPOUT      WRITE IT TO SYSOUT\n         SPACE\n         L     R2,LGE10SAV           REST RET REG\n         BR    R2                    GO HOME\n         SPACE 3\n  TITLE '**ITMS000A** TAPE MANGMNT SYSTEM  ** LOG HANDLER **'\nLOGHNDLR EQU   *\n         ST    R2,LOG10SAV         SAVE RET. REG\n         CLC   LOGREQ,=C'INIT'     INITIAL LOG ENTRY ??\n         BNE   DOINIB              NOPE! CHECK NEXT REQTYPE\n         BAL   R2,TIMERTN          OK! LETS GET THE DATE & TIME\n         MVI   LOGOFIL,X'40'       CLEAR WORKAREA\n         MVC   LOGOFIL+1(LOGOLEN),LOGOFIL  DITTO\n         MVC   LOGODAT(7),UNPKDATE+1 MOVE DATESTAMP TO LOG REC\n         MVC   LOGOTIM(6),UNPKTIME+1 MOVE TIMESTAMP TO LOG REC\n         MVC   LOGOMSG(25),LOGIMSG MOVE DESCR. TO LOG REC\n         CLI   PPRUNTYP,C'U'       THIS UTIL RUN\n         BNE   INITOVR             NOPE! SKIP NEXT\n         CLI   PPPAREA,C'U'        THIS 1ST PASS OF UTIL RUN\n         BE    INITOVR             YES! SKIP NEXT\n         MVC   LOGOMSG(25),LOGTMSG ELSE! MOVE 'U' DESCR. TO LOG REC\nINITOVR  MVC   LOGOVAR,PPPAREA     MOVE ORIG. INPUT IMAGE TO LOG REC\n         B     PUTLOG              WRITE IT OUT TO LOG\n         SPACE\nDOINIB   CLC   LOGREQ,=C'INIB'     ELSE! PARSER OUTPUT LOG ENTRY?\n         BNE   NLOGREQA            NOPE! CHECK NEXT REQTYPE\n         MVI   LOGOFIL,X'40'       CLEAR WORKAREA\n         MVC   LOGOFIL+1(LOGOLEN),LOGOFIL  DITTO\n         MVC   LOGODAT(7),UNPKDATE+1 MOVE DATESTAMP TO LOG REC\n         MVC   LOGOTIM(6),UNPKTIME+1 MOVE TIMESTAMP TO LOG REC\n         MVC   LOGOMSG(25),LOGBMSG MOVE DESCR. TO LOG REC\n         MVC   LOGOVAR(80),PPRUNTYP MOV PARSER OUTPUT TO LOG REC\n         B     PUTLOG              OK! GO DO WRITE\n         SPACE\nNLOGREQA EQU   *\n         CLC   LOGREQ,=C'NEWR'     ELSE! NEW REC TO BE LOGD ??\n         BNE   NLOGREQB            NOPE! CHECK NEXT REQTYPE\n         BAL   R2,TIMERTN          OK! LETS GET THE DATE & TIME\n         MVI   LOGOFIL,X'40'       CLEAR WORKAREA\n         MVC   LOGOFIL+1(LOGOLEN),LOGOFIL  DITTO\n         MVC   LOGODAT(7),UNPKDATE+1 MOVE DATESTAMP TO LOG REC\n         MVC   LOGOTIM(6),UNPKTIME+1 MOVE TIMESTAMP TO LOG REC\n         MVC   LOGOMSG(25),LOGNMSG MOVE DESCR. TO LOG REC\n         MVC   LOGOVAR(80),VITMSREC MOV NEW REC TO LOG REC\n         B     PUTLOG              OK! GO DO WRITE\n         SPACE\nNLOGREQB EQU   *\n         CLC   LOGREQ,=C'OLDR'     ELSE! OLD REC TO BE LOGD ??\n         BNE   NLOGREQC            NOPE! CHECK NEXT REQTYPE\n         BAL   R2,TIMERTN          OK! LETS GET THE DATE & TIME\n         MVI   LOGOFIL,X'40'       CLEAR WORKAREA\n         MVC   LOGOFIL+1(LOGOLEN),LOGOFIL  DITTO\n         MVC   LOGODAT(7),UNPKDATE+1 MOVE DATESTAMP TO LOG REC\n         MVC   LOGOTIM(6),UNPKTIME+1 MOVE TIMESTAMP TO LOG REC\n         MVC   LOGOMSG(25),LOGPMSG MOVE DESCR. TO LOG REC\n         MVC   LOGOVAR(80),VITMSREC MOV NEW REC TO LOG REC\n         B     PUTLOG              OK! GO DO WRITE\n         SPACE\nNLOGREQC EQU   *\n         CLC   LOGREQ,=C'UPDR'     ELSE! UPD REC TO BE LOGD ??\n         BNE   NLOGREQD            NOPE! CHECK NEXT REQTYPE\n         BAL   R2,TIMERTN          OK! LETS GET THE DATE & TIME\n         MVI   LOGOFIL,X'40'       CLEAR WORKAREA\n         MVC   LOGOFIL+1(LOGOLEN),LOGOFIL  DITTO\n         MVC   LOGODAT(7),UNPKDATE+1 MOVE DATESTAMP TO LOG REC\n         MVC   LOGOTIM(6),UNPKTIME+1 MOVE TIMESTAMP TO LOG REC\n         MVC   LOGOMSG(25),LOGUMSG MOVE DESCR. TO LOG REC\n         MVC   LOGOVAR(80),VITMSREC MOV UPD REC TO LOG REC\n         B     PUTLOG              OK! GO DO WRITE\n         SPACE\nNLOGREQD EQU   *\n         CLC   LOGREQ,=C'EXPR'     ELSE! XPD REC TO BE LOGD ??\n         BNE   NLOGREQE            NOPE! CHECK NEXT REQTYPE\n         BAL   R2,TIMERTN          OK! LETS GET THE DATE & TIME\n         MVI   LOGOFIL,X'40'       CLEAR WORKAREA\n         MVC   LOGOFIL+1(LOGOLEN),LOGOFIL  DITTO\n         MVC   LOGODAT(7),UNPKDATE+1 MOVE DATESTAMP TO LOG REC\n         MVC   LOGOTIM(6),UNPKTIME+1 MOVE TIMESTAMP TO LOG REC\n         MVC   LOGOMSG(25),LOGEMSG MOVE DESCR. TO LOG REC\n         MVC   LOGOVAR(80),VITMSREC MOV UPD REC TO LOG REC\n         B     PUTLOG              OK! GO DO WRITE\n         SPACE\nNLOGREQE EQU   *\n         CLC   LOGREQ,=C'REPT'     ELSE! THIS REPORT OUTPUT ??\n         BNE   NLOGREQF            NOPE! CHECK NEXT REQTYPE\n         MVI   NOLOGSW,C'N'        MAKE SURE NO LOGGING\n         MVI   LOGOFIL,X'40'       CLEAR WORKAREA\n         MVC   LOGOFIL+1(LOGOLEN),LOGOFIL  DITTO\n         MVC   LOGOMSG(25),LOGRMSG MOVE DESCR. TO LOG REC\n         MVC   LOGOVAR(80),VITMSREC MOV REP REC TO LOG REC\n         B     PUTLOG              OK! GO DO WRITE\n         SPACE\nNLOGREQF EQU   *\n         CLC   LOGREQ,=C'RLOG'     ELSE! THIS LOG PRINT OUTPUT ??\n         BNE   NLOGREQG            NOPE! CHECK NEXT REQTYPE\n         MVI   NOLOGSW,C'N'        MAKE SURE NO LOGGING\n         B     PUTLOG              OK! GO DO WRITE\n         SPACE\nNLOGREQG EQU   *\n         B     SKIPLOG\n         SPACE\nPUTLOG   EQU   * IF LOGGING ON WE LOG ELSE WE WRITE ONLY TO ITMPRINT\n         CLI   NOLOGSW,C'N'        IS LOGGING DISABLED\n         BE    SKIPLOG             SHUCKKKS\n         PUT   RPL=LOGXRPL         WRITE IT OUT TO LOG\n         SPACE\n         LTR   R15,R15             WRITE OK??\n         BZ    SKIPLOG             GREAT! NOW LETS TO SYSOUT FILE\n         B     LOGSMNGR            UHOH! CHK IF LOG SWITCH REQUIRED\n         SPACE\nSKIPLOG  PUT ITMPRINT,VLOGXREC     WRITE LOG RECORD TO SYSOUT\n         B     LOGHEXIT            ...AND GO HOME\n  TITLE '**ITMS000A** TAPE MANGMNT SYSTEM  ** LOG SWITCH MNGR **'\nLOGSMNGR EQU   * IF ERR = EOF WE DO A SWITCH ELSE WE TURN OFF LOGGING\n         SHOWCB AREA=VERFDBK,LENGTH=4,FIELDS=FDBK,                     X\n               RPL=LOGXRPL\n         SPACE\n         CLI   VERFDBK+3,X'1C'     HAVE WE REACHED END OF FILE\n         BE    LOGSWIT             OK! GO CLOSE IT & OPEN NEXT ONE\nLOG9ERR  LA    R9,LOGXRPL          ELSE! PICK RPL ADDR.\n         LA    R8,=CL5'PUT L'      SHOW VSAM REQ.\n         MVI   SHOFLAG,C'R'        SHOW VSAM REQ.\n         BAL   R2,ITMERLOG         .AND! GO SHOH ERROR\nLOGSWIT  EQU   *\n         CLOSE ITMLOGX             CLOSE CURRENT EXTENT\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    LOGLAB1             GOOD! KEEP GOING!\n         LA    R9,ITMLOGX          ELSE! PICK ACB ADDR.\n         LA    R8,=CL5'CLOSE'      SHOW VSAM REQ.\n         MVI   SHOFLAG,C'A'        SHOW VSAM REQ.\n         BAL   R2,ITMERLOG         .AND! GO SHOH ERROR\n         B     LOGITMPT            ....AND GO HOME\n         SPACE\nLOGLAB1  MODCB RPL=CRECRPL,OPTCD=UPD\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    LOGSWI2             GOOD! KEEP GOING!\n         LA    R9,CRECRPL          ELSE! PICK ACB ADDR.\n         LA    R8,=CL5'MODCB'      SHOW VSAM REQ.\n         MVI   SHOFLAG,C'R'        SHOW VSAM REQ.\n         BAL   R2,ITMERLOG         .AND! GO SHOH ERROR\n         B     LOGITMPT            ....AND GO HOME\n         SPACE\nLOGSWI2  GET   RPL=CRECRPL         READ CNTLFIL FOR REQ. VOLSER\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    LOGLAB2             GOOD! KEEP GOING!\n         LA    R9,CRECRPL          ELSE! PICK ACB ADDR.\n         LA    R8,=CL5'GET  '      SHOW VSAM REQ.\n         MVI   SHOFLAG,C'R'        SHOW VSAM REQ.\n         BAL   R2,ITMERLOG         .AND! GO SHOH ERROR\n         B     LOGITMPT            ....AND GO HOME\n         SPACE\nLOGLAB2  MVC   LEX1(1),CCUREX+6    SET UP FOR WTO LATER\n         CLI   CCUREX+6,C'A'       WE DOIN' 'A' EXTENT\n         BNE   SETACUR             NOPE! GO SET A AS CURRENT\n         MVI   CCUREX+6,C'B'       ELSE! SET B AS CURR.\n         MVI   LEX2,C'B'           SET UP FOR WTO LATER\n         B     SETNEX              GO DO IT\nSETACUR  MVI   CCUREX+6,C'A'       SET A AS CURR.\n         MVI   LEX2,C'A'           SET UP FOR WTO LATER\n* FOLL. WILL POINT ACB TO NEW EXTENT AND CLEAR THE NEW EXT. AT OPEN\nSETNEX   MODCB ACB=ITMLOGX,MACRF=(RST,OUT),DDNAME=(*,CCUREX)\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    LOGLAB3             GOOD! KEEP GOING!\n         LA    R9,ITMLOGX          ELSE! PICK ACB ADDR.\n         LA    R8,=CL5'MODCB'      SHOW VSAM REQ.\n         MVI   SHOFLAG,C'A'        SHOW VSAM REQ.\n         BAL   R2,ITMERLOG         .AND! GO SHOH ERROR\n         B     LOGITMPT            ....AND GO HOME\n         SPACE\nLOGLAB3  OPEN  ITMLOGX             OPEN NEW EXTENT\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    LOGLAB4             GOOD! KEEP GOING!\n         LA    R9,ITMLOGX          ELSE! PICK ACB ADDR.\n         LA    R8,=CL5'OPEN '      SHOW VSAM REQ.\n         MVI   SHOFLAG,C'A'        SHOW VSAM REQ.\n         BAL   R2,ITMERLOG         .AND! GO SHOH ERROR\n         B     LOGITMPT            ....AND GO HOME\n         SPACE\nLOGLAB4  BAL   R2,TIMERTN          GO UPDATE TIMER\n         MVC   COEDAT(13),CCEDAT   MOVE TIMSTMP OF CURR. TO OLD\n         MVC   CCEDAT(7),UNPKDATE+1 MOV CURR. EXT CREATE TO CNTLREC\n         MVC   CCETIM(6),UNPKTIME+1 MOV CURR. EXT CREATE TO CNTLREC\n         MVI   CCSEXL,C'S'         SHOW SECOND LOG XNTN CREATED\n         SPACE\n         PUT   RPL=CRECRPL         WRITE OUT LOG CNTL REC\n         SPACE\n         LTR   R15,R15             WRITE OK??\n         BZ    LOGLAB5             GOOD! KEEP GOING!\n         LA    R9,CRECRPL          ELSE! PICK RPL ADDR.\n         LA    R8,=CL5'PUT C'      SHOW VSAM REQ.\n         MVI   SHOFLAG,C'R'        SHOW VSAM REQ.\n         BAL   R2,ITMERLOG         .AND! GO SHOH ERROR\n         B     LOGITMPT            ....AND GO HOME\nLOGLAB5  CLOSE ITMCNTL,TYPE=T      FORCE WRITE OF LOG CNTL REC.\n         SPACE\n         LTR   R15,R15             WRITE OK??\n         BZ    LOGLAB6             GOOD! KEEP GOING!\n         LA    R9,ITMCNTL          ELSE! SHOW ERROR\n         LA    R8,=CL5'CLOST'      SHOW ERROR REQ\n         MVI   SHOFLAG,C'A'        SHOW ACB ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nLOGLAB6  WTO   MF=(E,WTOLOGS)      TELL THE WORLD\n         SPACE\n         PUT   RPL=LOGXRPL         OK! LETS TRY LOG WRITE AGAIN\n         SPACE\n         LTR   R15,R15             WRITE OK??\n         BZ    LOGITMPT            GOOD! HOME TIME!\n         LA    R9,LOGXRPL          ELSE! PICK RPL ADDR.\n         LA    R8,=CL5'PUT L'      SHOW VSAM REQ.\n         MVI   SHOFLAG,C'R'        SHOW VSAM REQ.\n         BAL   R2,ITMERLOG         .AND! GO SHOH ERROR\n         B     LOGITMPT            ....AND GO HOME\nLOGITMPT EQU   *\n         PUT ITMPRINT,VLOGXREC     WRITE LOG RECORD TO SYSOUT\n         SPACE\nLOGHEXIT EQU   *\n         CLC   LOGREQ,=C'EXPR'     XPD REC TO BE LOGD ??\n         BNE   LOGCHR              NOPE! SEE IF REPORT REC\n         BAL   R2,REPTPRT          ELSE! GO TO 'REPT' WRITER\n         B     LOGOHOM             .... AND GO HOME\nLOGCHR   CLC   LOGREQ,=C'REPT'     THIS REPORT OUTPUT ??\n         BNE   LOGOHOM             NOPE! JUST GO HOME\n         BAL   R2,REPTPRT          ELSE! GO TO 'REPT' WRITER\nLOGOHOM  L     R2,LOG10SAV         RESTORE RET. ADDR.\n         BR    R2                  ....AND GO THERE\n  TITLE '**ITMS000A** TAPE MANGMNT SYSTEM  ** REPORT FORMATTER **'\nREPTPRT  EQU   * HERE WE FORMAT & PRINT OUTPUT TO 'ITMREPT' SYSOUT\n         ST    R2,RPT10SAV           SAVE RET ADDR.\n         SPACE\n         CLI   PAGNEW,C'Y'         THIS A NEW PAGE?\n         BNE   REPLAB2             NOPE! KEEP GOING\nREPLAB1  MVC   HDR1TIM(6),UNPKTIME+1 MOV CURR. TIME TO PAGE HDR\n         MVC   HDR1TIM+7(7),UNPKDATE+1 MOV CURR. DATE TO PAGE HDR\n         PUT  ITMREPT,PAGEHDR1     WRITE HDR RECORD TO SYSOUT\n         SPACE\n         CLI   PPRUNTYP,C'X'       THIS EXPIRATION RUN\n         BNE   REPLABA             NOPE! KEEP GOING\n         MVC   PAGEHDR2+36(22),EXPRHDR  MOVE DESC. HDR TO PRTLIN\n         B     REPLAB$             ..AND KEEP GOING\nREPLABA  CLI   PPRUNTYP,C'R'       THIS ?REPORT? RUN\n         BNE   REPLAB$             NOPE! KEEP GOING\n         CLI   PPSUBRUN,C'A'       THIS 'ALL VOL' RUN\n         BNE   REPLABB             NOPE! KEEP GOING\n         MVC   PAGEHDR2+37(21),ALLVHDR  MOVE DESC. HDR TO PRTLIN\n         B     REPLAB$             ..AND KEEP GOING\nREPLABB  CLI   PPSUBRUN,C'V'       THIS 'AVAIL VOL' REPT\n         BNE   REPLABC             NOPE! KEEP GOING\n         MVC   PAGEHDR2+31(32),AVAVHDR  MOVE DESC. HDR TO PRTLIN\n         B     REPLAB$             ..AND KEEP GOING\nREPLABC  CLI   PPSUBRUN,C'C'       THIS 'CREAT VOL' REPT\n         BNE   REPLABD             NOPE! KEEP GOING\n         MVC   PAGEHDR2+34(26),SCRTHDR  MOVE DESC. HDR TO PRTLIN\n         B     REPLAB$             ..AND KEEP GOING\nREPLABD  CLI   PPSUBRUN,C'F'       THIS 'FORECAST' REPT\n         BNE   REPLABE             NOPE! KEEP GOING\n         MVC   PAGEHDR2+32(31),SCRFHDR  MOVE DESC. HDR TO PRTLIN\n         B     REPLAB$             ..AND KEEP GOING\nREPLABE  CLI   PPSUBRUN,C'X'       THIS 'EXCEPTION' REPT\n         BNE   REPLABF             NOPE! KEEP GOING\n         MVC   PAGEHDR2+30(34),EXCPHDR  MOVE DESC. HDR TO PRTLIN\n         B     REPLAB$             ..AND KEEP GOING\nREPLABF  CLI   PPSUBRUN,C'S'       THIS 'FIND' REPT\n         BNE   REPLAB$             NOPE! KEEP GOING\n         MVC   PAGEHDR2+37(21),SVDSHDR  MOVE DESC. HDR TO PRTLIN\n         SPACE\nREPLAB$  UNPK  UNPKWK(5),PAGCTR(3) UNPACK PAGE CTR\n         OI    UNPKWK+4,X'F0'      FLIP LAST SIGN\n         MVC   HDR2PGN(3),UNPKWK+2 MOV PGE # TO PAGE HDR\n         PUT  ITMREPT,PAGEHDR2     WRITE HDR RECORD TO SYSOUT\n         SPACE\n         PUT  ITMREPT,PAGEHDR3     WRITE HDR RECORD TO SYSOUT\n         SPACE\n         AP    PAGCTR,=PL3'1'      BUMP PAGE CTR\n         ZAP   LINCTR,=PL3'10'     RESET LINE CTR\nREPLAB2  AP    LINCTR,=PL3'1'      BUMP LINE CTR\n         CP    LINCTR,=PL3'60'     WE AT E O P\n         BNH   REPLAB3             NOPE! GO FORMAT PRTLINE\n         MVI   PAGNEW,C'Y'         ELSE! SHOW TOP OF PAGE\n         B     REPLAB1             .AND GO FORMAT NEW PAGE\nREPLAB3  MVI   PAGELIN,X'40'       CLR OUT PRTLINE\n         MVC   PAGELIN+1(PGLINL-1),PAGELIN\n         CLI   PAGNEW,C'Y'         THIS TOP OF PAGE\n         BNE   REPLAB4             NOPE! KEEP GOING\n         MVI   PAGNEW,C'M'         SHOW NOT TOP OF PAGE\n         MVI   PAGCC,C'0'          MOVE CARR. CNTRL TO PRTLINE\n         CLI   RNODF,C'N'          WE GOT ANYTHING TO SHOW\n         BNE   REPLAB4             YUP! GO SHOW IT\n         MVC   PAGVS+6(35),NODAHDR  ELSE! SHOW WE GOT NADA!\n         B     REPLABX             ...AND WERE DONE\nREPLAB4  MVC   PAGVS(6),CVOLSR     MOVE TAPE VOLSER TO PRTLIN\n         MVC   PAGED(7),CEDATE     MOVE TAPE EXPIR. DATE YYYYDDD\n         MVC   PAGCD(7),CCDATE     MOVE TAPE CREATION DATE\n         MVC   PAGDS(44),CCTDSN    MOVE TAPE DSN (44 MAX.)\n         CLI   CCFLG1,C'C'         THIS VOL NOT-EXPIRED\n         BNE   REPLABG             NOPE! KEEP GOING\n         MVC   PAGS1(7),CREATC     SHOW VOL IN USE\n         B     REPLABH             KEEP GOING\nREPLABG  MVC   PAGS1(7),SCRATC     SHOW VOL = SCRATCH\nREPLABH  CLI   CCFLG2,X'40'        IE, NO XCPTIONS\n         BE    REPLABX             YUP! WERE DONE\n         CLI   CCFLG2,C'B'         IE, 'BOTH' XCPTIONS\n         BNE   REPLABI             NOPE! KEEP GOING\n         MVC   PAGS2(4),BOTHCC     ELSE! SHOW BOTH XCPTNS\n         B     REPLABX             ...AND WERE DONE\nREPLABI  CLI   CCFLG2,C'U'         IE, 'UNKN' XCPTIONS\n         BNE   REPLABJ             NOPE! KEEP GOING\n         MVC   PAGS2(4),UNKNCC     ELSE! SHOW UNKN XCPTN\n         B     REPLABX             ...AND WERE DONE\nREPLABJ  CLI   CCFLG2,C'O'         IE, 'OVLY' XCPTIONS\n         BNE   REPLABX             NOPE! ????????\n         MVC   PAGS2(4),OVLYCC     ELSE! SHOW OVLY XCPTN\n         SPACE\nREPLABX  PUT  ITMREPT,PAGELIN      WRITE LINE REC TO SYSOUT\n         SPACE\nREPTXIT  L     R2,RPT10SAV         RESTORE RET. ADDR.\n         BR    R2                  ....AND GO THERE\n         SPACE\n   TITLE '**ITMS000A** TAPE MANGMNT SYSTEM  ** UTILITY PROCSNG **'\nDOITMUTL EQU   *\n         ST    R2,UTL10SAV           SAVE RET ADDR.\n         SPACE\n         CLI   PPSUBRUN,C'S'         IS THIS A SCRATCH RUN\n         BNE   ITMUTNFA              NOPE! CHK NEXT FUNCTION\n         MVC   SRCHKY(6),PRVOLLO     SET UP SEARCH ON REQ. VOLSER\n         B     DOADDES               ...AND GO DO IT\n         SPACE\nDOADDES  MODCB RPL=CNTLRPL,OPTCD=DIR,ARG=SRCHKY\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    GETULOP1            GOOD! GET THE RECORD\n         LA    R9,CNTLRPL          ELSE! SHOW ERROR\n         LA    R8,=CL5'MODCB'      SHOW ERROR REQ\n         MVI   SHOFLAG,C'R'        SHOW RPL ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nGETULOP1 GET   RPL=CNTLRPL         READ CNTLFIL FOR REQ. VOLSER\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    UTLADDEE            SHOW ERROR (CANT ADD WHATS THERE)\n         SPACE\n         SHOWCB AREA=VERFDBK,LENGTH=4,FIELDS=FDBK,                     X\n               RPL=CNTLRPL\n         SPACE\n         CLI   VERFDBK+3,X'10'     RECORD NOT FOUND??\n         BE    UTADDSC             GOOD! GO ADD THIS TAPE\n         LA    R9,CNTLRPL          ELSE! SHOW ERROR\n         LA    R8,=CL5'GET D'      SHOW 'GET DIR' ERROR\n         MVI   SHOFLAG,C'R'        SHOW RPL ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nUTADDSC  EQU   * HERE WE SET UP TO ADD A NEW SCRATCH TAPE\n         MVI   CVOLSR,X'40'        FIRST CLEAR IT OUT\n         MVC   CVOLSR+1(79),CVOLSR    DITTO\n         MVC   CVOLSR(6),SRCHKY    MOVE VOLSER TO RECORD\n         MVI   CCFLG1,C'E'         SHOW THIS IS A SCRATCH\n         PUT   RPL=CNTLRPL         WRITE IT TO ITMS DB\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    UTALAB              GOOD! GO ADD TO CTR\n         LA    R9,CNTLRPL          ELSE! SHOW ERROR\n         LA    R8,=CL5'PUT D'      SHOW 'PUT DIR' ERROR\n         MVI   SHOFLAG,C'R'        SHOW RPL ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nUTALAB   AP    NEWCTR(3),=P'1'     ADD ONE NOTCH TO GRIP\n         MVC   LOGREQ(4),=C'NEWR'  SET UP FOR LOGGER\n         BAL   R2,LOGHNDLR         ...AND GO LOG IT!!\n         SPACE\nUTADDS2  CLI   PPSUBRNA,C'S'       IS THIS A SINGLE ADD\n         BE    ADDSCEX             OK! WE'RE DONE\n         XC    PACKWK(8),PACKWK    ELSE! CLR AREA\n         PACK  PACKWK+4(4),SRCHKY  SET KEY FOR ADDING\n         NI    PACKWK+7,X'F0'      TO BE SURE SIGN IS OK\n         OI    PACKWK+7,X'0C'      TO BE SURE SIGN IS OK\n         CVB   R3,PACKWK           SO WE CAN ADD TO IT\n         LA    R3,1(,R3)           BUMP BY ONE\n         CVD   R3,PACKWK           OK! BACK TO THE REAL WORLD\n         UNPK  UNPKWK(7),PACKWK+4(4)  \"   \"    \"    \"     \"\n         OI    UNPKWK+6,X'F0'      TO BE SURE SIGN IS OK\n         CLC   UNPKWK+1(6),PRVOLHI COMPARE TO HI VOLSER OF RANGE\n         BH    ADDSCEX             OK! WE'RE DONE\n         MVC   SRCHKY(6),UNPKWK+1  ELSE! NEW SEARCH KEY\n         B     GETULOP1            ...AND! GO GET NEXT ONE\n         SPACE\nADDSCEX  BAL   R2,PUTNCTR          GO PUT OUT COUNTER\n         B     UTLEXIT             ....AND GO HOME\n         SPACE\nUTLADDEE EQU   * SHOW ADDE ERROR BECAUSE REC ALREADY EXISTS\n         BAL   R2,ITMER005         GO SHOW ERRO\n         B     UTADDS2             && GO CHECK NEXT ONE\n         SPACE\nITMUTNFA EQU   *\n         CLI   PPSUBRUN,C'I'       IS THIS A 'SYSIN' RUN\n         BNE   ITMUTNFB            NOPE! CHK NEXT FUNCTION\n         SPACE\n         OPEN  ITMSCIN             OPEN INPUT FILE\n         SPACE\n         MVI   SYSRUN,C'S'         SHOW WE DOIN' SYSIN RUN\nUTSINLAB MVI   PPPAREA,X'40'       OK NOW CLR OUT PARMAREA\n         MVC   PPPAREA+1(79),PPPAREA\n         MVI   PPCTYP,X'40'        KEEP CLRNG OUT PARMAREA\n         MVC   PPCTYP+1(PPALEN-1),PPCTYP\n         GET   ITMSCIN,PPPAREA     READ A RECORD\n         SPACE\n         AP    GETCTR,=PL3'1'      BUMP GETCTR\n         MVC   LOGREQ,=C'INIT'     GO LOG IT\n         BAL   R2,LOGHNDLR         GO LOG IT\n         LA    R1,PRSAREA          POINT TO PARSER WORKAREA\n         L     R15,=V(ITMPAR01)    GET PARSER'S ADDR.\n         BALR  R14,R15             ...AND GO DO IT!\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    UTSIN01             GOOD! GO PROCS INPUT\n         SPACE 2\n         BAL   R2,ITMER00S         GO SHOW ERROR\n         B     UTSINLAB            ..AND RETURN FOR MORE\nUTSIN01  MVC   LOGREQ,=C'INIB'     SHOW INITIAL PRS ENTRY\n         BAL   R2,LOGHNDLR         GO LOG IT\n         BAL   R2,DOITMCRT         GO DO IT\n         B     UTSINLAB            ..AND RETURN FOR MORE\n         SPACE\nINOMORE  EQU   *\n         CLOSE ITMSCIN             CLOSE SYSIN FILE\n         BAL   R2,PUTNCTR          WRITE COUNTERS TO JOBLOG\n         B     UTLEXIT             ..AND RETURN FOR GOOD\n         SPACE 3\nITMUTNFB EQU   *\n         CLI   PPSUBRUN,C'X'       IS THIS A 'XPDAT' RUN\n         BE    ITMUTXF             OK GO DO IT\n         CLI   PPSUBRUN,C'F'       IS THIS A 'FLAG' RUN\n         BE    ITMUTXF             OK GO DO IT\n         CLI   PPSUBRUN,C'D'       IS THIS A 'DELETE' RUN\n         BNE   ITMUTNFC            NOPE! CHK NEXT FUNCTION\nITMUTXF  EQU   * HERE WE DO 'XPDAT' 'DELETE' AND 'FLAG' UTIL RUNS\n         MODCB RPL=CNTLRPL,OPTCD=(KEY,DIR,UPD),ARG=PRVOLLO\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    ITMUTXF1            GOOD! GET THE RECORD\n         LA    R9,CNTLRPL          ELSE! SHOW ERROR\n         LA    R8,=CL5'MODCB'      SHOW ERROR REQ\n         MVI   SHOFLAG,C'R'        SHOW RPL ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nITMUTXF1 GET   RPL=CNTLRPL         GET REQ. RECORD FOR UPDATE\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    ITMUTXF2            OK! GO PROCESS\n         SPACE\n         SHOWCB AREA=VERFDBK,LENGTH=4,FIELDS=FDBK,                     X\n               RPL=CNTLRPL\n         SPACE\n         CLI   VERFDBK+3,X'10'     RECORD NOT FOUND??\n         BE    ITMER00X            HEY! CAINT UPDT WHAT I AINT GOT\n         LA    R9,CNTLRPL          ELSE! SHOW ERROR\n         LA    R8,=CL5'GET D'      SHOW 'GET DIR' ERROR\n         MVI   SHOFLAG,C'R'        SHOW RPL ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nITMUTXF2 MVC   LOGREQ(4),=C'OLDR'  SET UP FOR LOGGER\n         BAL   R2,LOGHNDLR         ...AND GO LOG IT!!\n         CLI   PPSUBRUN,C'D'       IS THIS A 'DELET' RUN\n         BE    ITMUTDL1            YUP! GO DO IT\n         CLI   PPSUBRUN,C'X'       IS THIS A 'XPDAT' RUN\n         BNE   ITMUTXF3            NO GO DO FLAG BIT\n         MVC   CEDATE(7),PREDATE   ELSE! MOVE UPDATED DATE TO REC\n         B     ITMUTXFA            AND GO WRITE REC BACK TO FILE\n         SPACE\nITMUTXF3 CLI   PRUFLAG,C'S'        IE SC/EXP FLAG CHNG\n         BNE   ITMUXF3A            NO! DO NEXT FLAG\n         MVC   CCFLG1(1),PRUFVAL   OK MOVE NEW VAL TO REC\n         B     ITMUTXFA            AND GO WRITE REC BACK TO FILE\nITMUXF3A MVC   CCFLG2(1),PRUFVAL   ELSE! CHNG EXECP STAT FLAG\n         SPACE\nITMUTXFA PUT   RPL=CNTLRPL         OK! WRITE IT BACK\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         BZ    ITMUTXFB            GOOD! LETS LOG & KEEP GOING\n         SPACE\n         LA    R9,CNTLRPL          ELSE! SHOW ERROR\n         LA    R8,=CL5'PUT D'      SHOW ERROR REQ\n         MVI   SHOFLAG,C'R'        SHOW RPL ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE 2\nITMUTXFB MVC   LOGREQ(4),=C'UPDR'  SET UP FOR LOGGER\n         BAL   R2,LOGHNDLR         ...AND GO LOG IT!!\n         B     UTLEXIT             GOOD! LETS KEEP GOING\n         SPACE\nITMUTDL1 ERASE RPL=CNTLRPL         OK! DELETE THIS REC\n         SPACE\n         LTR   R15,R15             CHECK FOR ANY RETURN CODE\n         B     UTLEXIT             GOOD! LETS KEEP GOING\n         SPACE\n         LA    R9,CNTLRPL          ELSE! SHOW ERROR\n         LA    R8,=CL5'ERASE'      SHOW ERROR REQ\n         MVI   SHOFLAG,C'R'        SHOW RPL ERROR\n         B     ITMER003            ...AND GO TO ERRORS\n         SPACE\nITMUTNFC EQU   *\nUTLEXIT  EQU   *\n         L     R2,UTL10SAV         REST. RET ADDR.\n         BR    R2                  RETURN TO CALLER\n  TITLE '**ITMS000A** TAPE MANGMNT SYSTEM  ** MISC. ROUTINES **'\nTIMERTN  EQU   * THIS RTN WILL GET THE CURRENT DATE & TIME\n         ST    R2,TIM10SAV        SAVE RET ADDR.\n         SPACE\n         TIME DEC,TIMERET,LINKAGE=SYSTEM\n         LTR   R15,R15            HOW WE DOIN' ???\n         BZ    TIMLAB1             GOOD! KEEP GOING!\n         XC    TIMWFLD(8),TIMWFLD  ELSE! ZERO OUT RET FLD TO SHOW ERROR\n         SPACE\nTIMLAB1  MVC   TIMWFLD(4),TIMERET MOVE TIME TO RET FIELD\n         MVI   TIMWFLD+3,X'0C'    SET 'SIGN' BIT FOR TIME PORTION\n         L     R2,TIMERET+8       GET DATE PORTION\n         SLL   R2,4               SHIFT OUT UPPER ZERO\n         ST    R2,DATWFLD         SET DATE PORTION\n         OI    DATWFLD+3,X'0C'    SET 'SIGN' BIT FOR DATE PORTION\n         SPACE\n         UNPK  UNPKDATE(8),DATWFLD(4)  UNPACK JULIAN DATE\n         OI    UNPKDATE+7,X'F0'         FLIP LAST SIGN\n         UNPK  UNPKTIME(8),TIMWFLD(4)  UNPACK CURR. TIME\n         OI    UNPKTIME+7,X'F0'         FLIP LAST SIGN\n         SPACE\nTIMREXIT EQU  * HERE WE GO HOME\n         L     R2,TIM10SAV        RELOAD RETURN ADDR.\n         BR    R2                 ........SAYONARA\n         EJECT\nPUTNCTR  EQU   *\n         ST    R2,CTR10SAV             SAVE RET REG\n         UNPK  UNPKWK(5),NEWCTR(3)     UNPACK COUNT OF NEW RECS\n         OI    UNPKWK+4,X'F0'          FLIP LAST SIGN\n         CLI   PUTFLG,C'E'             THIS AN EXPIRATION RUN\n         BE    EXPCTR                  YUP! DO EXP WTO\n         CLI   PUTFLG,C'R'             THIS AN REPORT RUN\n         BE    REPCTR                  YUP! DO REP WTO\n         SPACE\n         CLI   PPRUNTYP,C'U'           WE DOIN UTIL RUN\n         BNE   CRTCTR                  NOT! SKIP NEXT\n         UNPK  UNPKWK(5),GETCTR(3)     UNPACK COUNT OF SYSIN RECS\n         OI    UNPKWK+4,X'F0'          FLIP LAST SIGN\n         MVC   GCNTR(4),UNPKWK+1       MOVE TO WTO AREA\n         WTO   MF=(E,WTOCNTRG)\n         UNPK  UNPKWK(5),NEWCTR(3)     UNPACK COUNT OF NEW RECS\n         OI    UNPKWK+4,X'F0'          FLIP LAST SIGN\nCRTCTR   MVC   ACNTR(4),UNPKWK+1       MOVE TO WTO AREA\n         WTO   MF=(E,WTOCNTRA)\n         UNPK  UNPKWK(5),UPDCTR(3)     UNPACK COUNT OF NEW RECS\n         OI    UNPKWK+4,X'F0'          FLIP LAST SIGN\n         MVC   UCNTR(4),UNPKWK+1       MOVE TO WTO AREA\n         WTO   MF=(E,WTOCNTRU)\n         B     PUTEXIT                 MILLER TIME!\n         SPACE\nEXPCTR   MVC   ECNTR(4),UNPKWK+1       MOVE TO WTO AREA\n         WTO   MF=(E,WTOCNTRE)\n         B     PUTEXIT                 MILLER TIME!\n         SPACE\nREPCTR   MVC   RCNTR(4),UNPKWK+1       MOVE TO WTO AREA\n         WTO   MF=(E,WTOCNTRR)\n         B     PUTEXIT                 MILLER TIME!\n         SPACE\nPUTEXIT  L     R2,CTR10SAV            REST RET REG\n         BR    R2                     GO HOME\n         EJECT\nTELLWRLD EQU   *\n         ST    R2,TWD10SAV           SAVE RET REG\n         WTO   MF=(E,(R9))           SHOW ON LOG\n         SPACE\n         MVI   POUTFIL,X'40'         CLR OUT PRINTLINE\n         MVC   POUTVAR(POUTLEN-1),POUTFIL   DITTO\n         LH    R2,0(R9)              PICK MSG LEN.\n         EX    R2,MVCOUT             MOVE MSG TO PRINTLINE\n         SPACE\n         PUT   ITMPRINT,ITMPOUT      WRITE IT TO SYSOUT\n         SPACE\n         L     R2,TWD10SAV           REST RET REG\n         BR    R2                    GO HOME\n         SPACE\nMVCOUT   MVC   POUTVAR(0),2(R9)      MOVE MSG TO PRINTLINE\n         SPACE\nSHOWFDBK EQU   *\n         ST    R2,SHO10SAV           SAVE RET REG\n         CLI   SHOFLAG,C'A'          WE LOOKING AT AN ACB\n         BNE   SHOWRPL               NOPE! MUST BE AN RPL\n         SHOWCB AREA=VERFDBK,LENGTH=4,FIELDS=ERROR,                    X\n               ACB=(R9)\n         SPACE\n         B     SHOTRAN               OK! GO TRANSLATE ERR CODE\nSHOWRPL  SHOWCB AREA=VERFDBK,LENGTH=4,FIELDS=FDBK,                     X\n               RPL=(R9)\n         SPACE\nSHOTRAN  MVI   VERFDBK+4,X'0C'     SET SIGN FOR UNPACK\n         UNPK  UNPKWK(9),VERFDBK(5) UNPACK IT\n         NC    UNPKWK(8),ANDZEROS  TURN OFF ALL ZONES\n         TR    UNPKWK(8),DISPLTAB    TRANSLATE INTO DISPLA'BL CHAR.\n         SPACE\n         L     R2,SHO10SAV           REST RET REG\n         BR    R2                    GO HOME\n         SPACE\n      TITLE '**ITMS000A** TAPE MANGMNT SYSTEM  ** ERROR RTNS  **'\nITMERLOG EQU   * FOR ANY VSAM ERR ON THE LOGS WE COME HERE\n         ST    R2,LER10SAV           SAVE RET REG\n         BAL   R2,SHOWFDBK           GO PICK VSAM ERR CODE\n         SPACE\n         MVC   ELEX(1),CCUREX+6      PICK UP CURR. LOG EXTENT\n         MVC   EVREQ(5),0(R8)        PICK UP VSAM REQ TYPE\n         CLI   SHOFLAG,C'A'          ?? ACB\n         BNE   ITMERPL               MUST BE RPL\n         MVC   EACBRP(3),=C'ACB'     == ACB\n         B     DOITMEW               GO ISSUE WTO\nITMERPL  MVC   EACBRP(3),=C'RPL'     == RPL\nDOITMEW  MVC   LOGEVE(8),UNPKWK      MOVE VSAM ERR CODE\n         WTO   MF=(E,WTOLOGE)\n         SPACE\n         MVI   POUTFIL,X'40'         CLR OUT PRINTLINE\n         MVC   POUTVAR(POUTLEN-1),POUTFIL   DITTO\n         MVC   POUTVAR(LOGEL-3),WTOLOGE+3   MOVE MSG TO PRTLINE\n         SPACE\n         PUT   ITMPRINT,ITMPOUT      WRITE IT TO SYSOUT\n         SPACE\n         MVI   NOLOGSW,C'N'          SHOW LOGGING DISABLED\n         LA    R15,8                 SET RET. CODE\n         ST    R15,SAV15RTC          SAV RET. CODE\n         L     R2,LER10SAV           REST RET REG\n         BR    R2                    GO HOME\n         SPACE 3\nITMER000 EQU   * INVALID PARMLIST DETECTED BY ITMS00A\n         LA    R9,ITME00             PICK MSG TEXT\n         BAL   R2,TELLWRLD           GO DO IT\n         LA    R15,16                SET RET. CODE\n         ST    R15,SAV15RTC          SAV RET. CODE\n         B     ITMS0END              GO HOME\n         SPACE\nITMER001 EQU   * ZERO LENGTH PARMLIST RECEIVED BY ITMS00A\n         LA    R9,ITME00             PICK MSG TEXT\n         BAL   R2,TELLWRLD           GO DO IT\n         LA    R15,16                SET RET. CODE\n         ST    R15,SAV15RTC          SAV RET. CODE\n         B     ITMS0END              GO HOME\n         SPACE\nITMER002 EQU   * NONZERO RETCODE FROM ITMPAR01\n         B     *+0(R15)              BRANCH ON RET CODE\n         B     ITME221               IE, RET CODE 4\n         B     ITME222               IE, RET CODE 8\n         B     ITME223               IE, RET CODE 12\n         B     ITME224               IE, RET CODE 16\nITME221  LA    R9,ITME021            PICK MSG TEXT\n         BAL   R2,TELLWRLD           GO DO IT\n         B     ITME2XT               GO HOME\nITME222  LA    R9,ITME022            PICK MSG TEXT\n         L     R4,PPERROFF           PICK UP PARML ERR OFFSET\n         CVD   R4,PACKWK             PICK UP PARML ERR OFFSET\n         UNPK  UNPKWK(7),PACKWK+4(4)  \"   \"    \"    \"     \"\n         OI    UNPKWK+6,X'F0'        TO BE SURE SIGN IS OK\n         MVC   ER2OFF(2),UNPKWK+5    PUT INTO MSG AREA\n         BAL   R2,TELLWRLD           GO DO IT\n         B     ITME2XT               GO HOME\nITME223  LA    R9,ITME023            PICK MSG TEXT\n         BAL   R2,TELLWRLD           GO DO IT\n         B     ITME2XT               GO HOME\nITME224  LA    R9,ITME024            PICK MSG TEXT\n         BAL   R2,TELLWRLD           GO DO IT\nITME2XT  LA    R15,16                SET RET. CODE\n         ST    R15,SAV15RTC          SAV RET. CODE\n         B     ITMS0END              GO HOME\n         SPACE\nITMER003 EQU   * WE COME HERE FOR ALL VSAM ERRORS ON ITMCNTL FILE\n         BAL   R2,SHOWFDBK           GO PICK VSAM ERR CODE\n         SPACE\n         MVC   ER3REQ(5),0(R8)       PICK UP VSAM REQ TYPE\n         CLI   SHOFLAG,C'A'          ?? ACB\n         BNE   ITMERPL2              MUST BE RPL\n         MVC   ER3AR(3),=C'ACB'      == ACB\n         B     DOITMEWT              GO ISSUE WTO\nITMERPL2 MVC   ER3AR(3),=C'RPL'      == RPL\nDOITMEWT MVC   ER3VE(8),UNPKWK       MOVE VSAM ERR CODE\n         WTO   MF=(E,WTOERR3)\n         SPACE\n         MVI   POUTFIL,X'40'         CLR OUT PRINTLINE\n         MVC   POUTVAR(POUTLEN-1),POUTFIL   DITTO\n         MVC   POUTVAR(LOGE3-3),WTOERR3+3   MOVE MSG TO PRTLINE\n         SPACE\n         PUT   ITMPRINT,ITMPOUT      WRITE IT TO SYSOUT\n         SPACE\n         LA    R15,12                SET RET. CODE\n         ST    R15,SAV15RTC          SAV RET. CODE\n         B     ITMS0END              GO HOME\n         SPACE 2\nITMER004 EQU   * MODCB ON THE CNTL EXLST FAILED\n          WTO   'ITMER004: MODCB ON CNTLFILE ''EXLST'' FAILED , ITMS000X\n               A TERMINATING',ROUTCDE=15\n         LA    R15,12                SET RET. CODE\n         ST    R15,SAV15RTC          SAV RET. CODE\n         B     ITMS0END              ....&&& GO HOME\nITMFERR1 EQU   * FIRST REC ON FILE NOT CNTL REC = FATAL ERROR\n         WTO   'ITMFERR1: FATAL ERROR DETECTED , ITMS000A ABENDING',   X\n               ROUTCDE=15\n**\n         ABEND 299,DUMP,STEP\n**\n         SPACE 2\nITMER005 EQU   * SCRATCH VOL TO BE ADDED ALREADY EXISTS\n         ST    R2,ER510SAV           SAVE RET REG\n         MVC   ER5VOL(6),SRCHKY      MOVE REQUESTED VOLSER TO MSG\n         WTO   MF=(E,WTOERR5)\n         SPACE\n         MVI   POUTFIL,X'40'         CLR OUT PRINTLINE\n         MVC   POUTVAR(POUTLEN-1),POUTFIL   DITTO\n         MVC   POUTVAR(LOGE5-3),WTOERR5+3   MOVE MSG TO PRTLINE\n         SPACE\n         PUT   ITMPRINT,ITMPOUT      WRITE IT TO SYSOUT\n         SPACE\n         LA    R15,4                 SET RET. CODE\n         ST    R15,SAV15RTC          SAV RET. CODE\n         L     R2,ER510SAV           REST RET REG\n         BR    R2                    GO HOME\n         SPACE 2\nITMER00X EQU   * REQ VOLSER FOR UITL UPDT NOT FOUND\n         MVC   ERXVOL(6),PRVOLLO     MOVE REQUESTED VOLSER TO MSG\n         WTO   MF=(E,WTOERRX)\n         SPACE\n         MVI   POUTFIL,X'40'         CLR OUT PRINTLINE\n         MVC   POUTVAR(POUTLEN-1),POUTFIL   DITTO\n         MVC   POUTVAR(LOGEX-3),WTOERRX+3   MOVE MSG TO PRTLINE\n         SPACE\n         PUT   ITMPRINT,ITMPOUT      WRITE IT TO SYSOUT\n         SPACE\n         LA    R15,8                 SET RET. CODE\n         ST    R15,SAV15RTC          SAV RET. CODE\n         B     ITMS0END              GO HOME\n         SPACE 2\nITMER00F EQU   * ERROR ON FORECAST DATE SPECIFICATION\n         CLI   PPRUNTYP,C'X'         WAS THIS AN EXPRTN REPORT\n         BE    MER0FE                YUP! DO EXPRTN ERROR MSG\n         WTO   MF=(E,WTOERF)         ISSUE WTO\n         SPACE\n         MVI   POUTFIL,X'40'         CLR OUT PRINTLINE\n         MVC   POUTVAR(POUTLEN-1),POUTFIL   DITTO\n         MVC   POUTVAR(LOGEF-3),WTOERF+3   MOVE MSG TO PRTLINE\n         B     PUTERFE               GO PRINT IT\n         SPACE\nMER0FE   WTO   MF=(E,WTOERFE)        ISSUE WTO\n         SPACE\n         MVI   POUTFIL,X'40'         CLR OUT PRINTLINE\n         MVC   POUTVAR(POUTLEN-1),POUTFIL   DITTO\n         MVC   POUTVAR(LOGEFE-3),WTOERFE+3   MOVE MSG TO PRTLINE\n         SPACE\nPUTERFE  PUT   ITMPRINT,ITMPOUT      WRITE IT TO SYSOUT\n         SPACE\n         LA    R15,8                 SET RET. CODE\n         ST    R15,SAV15RTC          SAV RET. CODE\n         B     ITMS0END              GO HOME\n         SPACE 2\nITMER00G EQU   * REQUESTED VOL/DSN ON 'FIND' REPT NOT FOUND\n         CLI   PPSUBRNA,C'D'         WAS THIS A DSN 'FIND'\n         BNE   ERGPVOL               NOPE! SO MOVE 'VOL' TO MSG\n         MVC   ERGREQ(3),=CL3'DSN'   SET UP MSG\n         B     DOERGWTO              ....AND GO DO IT\nERGPVOL  MVC   ERGREQ(3),=CL3'VOL'   SET UP MSG\nDOERGWTO WTO   MF=(E,WTOERG)\n         SPACE\n         MVI   POUTFIL,X'40'         CLR OUT PRINTLINE\n         MVC   POUTVAR(POUTLEN-1),POUTFIL   DITTO\n         MVC   POUTVAR(LOGEG-3),WTOERG+3   MOVE MSG TO PRTLINE\n         SPACE\n         PUT   ITMPRINT,ITMPOUT      WRITE IT TO SYSOUT\n         SPACE\n         LA    R15,8                 SET RET. CODE\n         ST    R15,SAV15RTC          SAV RET. CODE\n         B     ITMS0END              GO HOME\n         SPACE 2\nITMER00S EQU   * NONZERO RETCODE FROM ITMPAR01 ON SYSIN INPUT\n         ST    R2,UTE10SAV           SAVE RET REG\n         B     *+0(R15)              BRANCH ON RET CODE\n         B     ITMES01               IE, RET CODE 4\n         B     ITMES02               IE, RET CODE 8\nITMES01  LA    R9,ITMESE1            PICK MSG TEXT\n         BAL   R2,TELLWRLD           GO DO IT\n         B     ITMESXT               GO HOME\nITMES02  LA    R9,ITMESE2            PICK MSG TEXT\n         L     R4,PPERROFF           PICK UP PARML ERR OFFSET\n         CVD   R4,PACKWK             PICK UP PARML ERR OFFSET\n         UNPK  UNPKWK(7),PACKWK+4(4)  \"   \"    \"    \"     \"\n         OI    UNPKWK+6,X'F0'        TO BE SURE SIGN IS OK\n         MVC   UTEOFF(2),UNPKWK+5    PUT INTO MSG AREA\n         BAL   R2,TELLWRLD           GO DO IT\nITMESXT  XR    R15,R15               CLR RET. CODE\n         LA    R15,4                 SET RET. CODE\n         ST    R15,SAV15RTC          SAV RET. CODE\n         L     R2,UTE10SAV           REST RET REG\n         BR    R2                    GO HOME\n         SPACE\n    TITLE '**ITMS000A** TAPE MANAGEMENT SYSTEM  ** VSAM CNTLBLKS **'\n* NOTE! THE FOL'NG CNTL BLKS ARE MODIFD AT RUNTIME VIA THE MODCB MACRO\n*\n* CONTROL BLOCKS FOR THE ITMS CNTL FILE DATABASE\nITMCNTL  ACB   AM=VSAM,                                                X\n               DDNAME=ITMCNTL,                                         X\n               MACRF=(SEQ,DIR,IN,KEY),                                 X\n               EXLST=CNTLXLST\n         SPACE 2\nCNTLRPL  RPL   ACB=ITMCNTL,          ITMS CNTL FILE GEN. PURP. RPL     X\n               AM=VSAM,                                                X\n               AREA=VITMSREC,                                          X\n               AREALEN=80,                                             X\n               RECLEN=80,                                              X\n               OPTCD=(KEY,SEQ,SYN,NUP,MVE,ARD,FWD,KEQ,FKS)\n         SPACE 2\nCRECRPL  RPL   ACB=ITMCNTL,          ITMS CNTL FILE CNTL REC.  RPL     X\n               AM=VSAM,                                                X\n               ARG=CRECARG,                                            X\n               AREA=VCNTLREC,                                          X\n               AREALEN=80,                                             X\n               RECLEN=80,                                              X\n               OPTCD=(KEY,DIR)\n         SPACE 2\nCNTLXLST EXLST EODAD=CNTLEOF\n         SPACE 2\n* CONTROL BLOCKS FOR THE ITMS LOG FILE(S)\nITMLOGX  ACB   AM=VSAM,                                                X\n               DDNAME=ITMLOGX,                                         X\n               EXLST=LOGXXLST                                          X\n               MACRF=(ADR,SEQ,IN,OUT)\n         SPACE 2\nLOGXRPL  RPL   ACB=ITMLOGX,                                            X\n               AM=VSAM,                                                X\n               AREA=VLOGXREC,                                          X\n               AREALEN=121,                                            X\n               RECLEN=121,                                             X\n               OPTCD=(ADR)   (IE, DEFAULT IS GOOD ON REST)\n         SPACE 2\nLOGXXLST EXLST EODAD=LOGXEOF\n         SPACE 2\n    TITLE '**ITMS000A** TAPE MANAGEMENT SYSTEM  ** QSAM CNTLBLKS **'\n*        QSAM CONTROL BLOCKS:\nITMPRINT DCB   DSORG=PS,DDNAME=ITMPRINT,MACRF=PM\n*\n         SPACE 2\nITMREPT  DCB   DSORG=PS,DDNAME=ITMREPT,MACRF=PM\n*\n         SPACE 2\nITMSCIN  DCB   DSORG=PS,DDNAME=ITMSCIN,MACRF=GM,RECFM=F,LRECL=80,      X\n               EODAD=INOMORE\n         SPACE 2\n    TITLE '**ITMS000A** TAPE MANAGEMENT SYSTEM  *** WORKAREAS  ***'\nSAVEAREA DS    18F                 REG SAVE AREA\nSAV15RTC DS    F\nSAVORINP DS    F                   ORIGINAL PARMLIST ADDR. SAVEAREA\nOPN10SAV DS    F                   BALREG SAV FOR XXX ROUTINE\nCLS10SAV DS    F                   BALREG SAV FOR XXX ROUTINE\nTIM10SAV DS    F                   BALREG SAV FOR XXX ROUTINE\nLOG10SAV DS    F                   BALREG SAV FOR XXX ROUTINE\nCRT10SAV DS    F                   BALREG SAV FOR XXX ROUTINE\nUTL10SAV DS    F                   BALREG SAV FOR XXX ROUTINE\nCTR10SAV DS    F                   BALREG SAV FOR XXX ROUTINE\nTWD10SAV DS    F                   BALREG SAV FOR XXX ROUTINE\nSHO10SAV DS    F                   BALREG SAV FOR XXX ROUTINE\nLER10SAV DS    F                   BALREG SAV FOR XXX ROUTINE\nER510SAV DS    F                   BALREG SAV FOR XXX ROUTINE\nEXP10SAV DS    F                   BALREG SAV FOR XXX ROUTINE\nREP10SAV DS    F                   BALREG SAV FOR XXX ROUTINE\nLGE10SAV DS    F                   BALREG SAV FOR XXX ROUTINE\nRPT10SAV DS    F                   BALREG SAV FOR XXX ROUTINE\nUTE10SAV DS    F                   BALREG SAV FOR XXX ROUTINE\n         SPACE 2\nTIMERET  DS    4F                  WORKAREA FOR TIME MACRO\nTIMWFLD  DS    XL4                 RETURNED TIME WORK FIELD\nDATWFLD  DS    XL4                 RETURNED DATE WORK FIELD\n         DS    0D                  OK NOW FOR SOME ALIGNMENT\nUNPKDATE DS    XL8                 DATE UNPACK WORK AREA\nUNPKTIME DS    XL8                 TIME UNPACK WORK AREA\nPACKWK   DS    XL8                 GENERAL PAKN'G WORK AREA\nPACKFIL  DS    XL8                 GENERAL PAKN'G WORK AREA\nUNPKWK   DS    XL8                 GENERAL UNPK'G WORK AREA\nUNPKFIL  DS    XL8                 GENERAL UNPK'G WORK AREA\n         SPACE 2\n         DC    C'VSAM ERROR FDBK WORD'\nVERFDBK  DC    F'00'\nVERFIL   DC    F'00'\n         DC    C'UPD  COUNTER:'\nUPDCTR   DC    PL3'0'\n         DC    C'NEW  COUNTER:'\nNEWCTR   DC    PL3'0'\n         DC    C'PAGE COUNTER:'\nPAGCTR   DC    PL3'1'\n         DC    C'LINE COUNTER:'\nLINCTR   DC    PL3'0'\n         DC    C'READ COUNTER:'\nGETCTR   DC    PL3'0'\n         SPACE 2\nSRCHKY   DS    CL6                 INPUT VOLSER\n**  AREA=VITMSREC,AREALEN=80 = MAP OF ITMS DB TAPE RECORD\nVITMSREC DS    0CL80\nCVOLSR   DS    CL6                 INPUT VOLSER\nCEDATE   DS    CL7                 INPUT EXPIR. DATE YYYYDDD\nCCTDSN   DS    CL44                INPUT TAPE DSN (44 MAX.)\nCCDATE   DS    CL7                 TAPE CREATION DATE\nCCFLG1   DS    C                   TAPE STATUS FLAG1\nCCFLG2   DS    C                   TAPE STATUS FLAG2\nCCFLG3   DS    C                   TAPE STATUS FLAG3\nCCFLG4   DS    C                   TAPE STATUS FLAG4\nCCFILL   DS    CL12                 'FILLER' FOR FUTURE USE\n         SPACE 2\nCRECARG  DC    XL6'CCCCCCCCCCCC'   FIXED KEY OF CONTROL REC\n**  AREA=VCNTLREC,AREALEN=80 = MAP OF ITMS CONTROL RECORD\nVCNTLREC DS    0CL80\nCRECKY   DS    CL6                 REC. KEY AS ABOVE\nCCUREX   DS    CL8                 CURRENT LOG EXTENT (ITMLOGA/B)\nCCEDAT   DS    CL7                 DATE OF CURR LOG EXTENT CREATE\nCCETIM   DS    CL6                 TIME OF CURR LOG EXTENT CREATE\nCOEDAT   DS    CL7                 DATE OF PREV LOG EXTENT CREATE\nCOETIM   DS    CL6                 TIME OF PREV LOG EXTENT CREATE\nCCSEXL   DS    C                   SECOND LOG XNTNT CRTED INDIC.\nCRECFIL  DS    CL40                'RESERVED'\n         SPACE 2\nPAGNEW   DS    C                   NEW PAGE SWITCH\nITMCLSW  DS    C                   ITM DB CLOSED SWITCH\nNOLOGSW  DS    C                   LOGGING ON/OFF SWITCH\nSYSRUN   DS    C                   UTILITY 'SYSIN' RUN SWITCH\nRNODF    DS    C                   NO DATA FOUND SWITCH\nSHOFLAG  DS    C                   ACB/RPL SWITCH\nPUTFLG   DS    C                   PUTCNTR RTN FLAG\nEXPLF    DS    C                   EXP. LOG FLAG\nREPFSW   DS    C                   DONE SW FOR 'FIND' REPORT\nLEXSW    DS    C                   LOG EXTENT SWITCH\nNEWRCS   DC    X'40'               NEW REC SWITCH\nLOGREQ   DS    CL4                 REQ. INDIC. FOR LOGGER\n**  AREA=VLOGXREC,AREALEN=121 = MAP OF LOG RECORD\nVLOGXREC DS    0CL121\nLOGOFIL  DS    C\nLOGODAT  DS    CL8\nLOGOTIM  DS    CL7\nLOGOMSG  DS    CL25\nLOGOVAR  DS    CL80\nLOGOLEN  EQU   *-VLOGXREC\n         SPACE 2\n**  AREA=ITMPOUT,AREALEN=121 = ITMPRINT SYSOUT FILE OUTAREA\nITMPOUT  DS    0CL121\nPOUTFIL  DS    C\nPOUTVAR  DS    CL120\nPOUTLEN  EQU   *-ITMPOUT\n         SPACE 2\n**\n** FOLLOWING IS A MAP OF THE INTERNAL PARMLIST TO/FROM ITMPAR01\n**\nPRSAREA  DS    0F        PARMLIST AREA FROM/TO ITMS000A/ITMPAR01\nPPARLEN  DS    H                   LEN' OF INPUT PARMS\nPPPAREA  DS    CL80                INPUT PARMS SAVEAREA\nPPRUNTYP DS    C                   RUNTYPE FLAG\nPPSUBRUN DS    C                   SECOND RUNTYPE FLAG\nPPSUBRNA DS    C                   THIRD RUNTYPE FLAG\n* FOLL. LAYOUT FOR CREATE TYPE RUN IS EQUAL TO ITMCFILE REC. LAYOUT\nPPCTYP   DS    0C          }  FOLL. = CREATE TYPE INPUT\nPVOLSR   DS    CL6                 INPUT VOLSER\nPEDATE   DS    CL7                 INPUT EXPIR. DATE YYYYDDD\nPCTDSN   DS    CL44                INPUT TAPE DSN (44 MAX.)\nPCDATE   DS    CL7                 TAPE CREATION DATE\nPCFLG1   DS    C                   TAPE STATUS FLAG1\nPCFLG2   DS    C                   TAPE STATUS FLAG2\nPCFLG3   DS    C                   TAPE STATUS FLAG3\nPCFLG4   DS    C                   TAPE STATUS FLAG4\nPCFILL   DS    CL12                 'FILLER' FOR FUTURE USE\n         ORG   PPCTYP              REDEFINE\n* REDEFINE LAYOUT FOR NON-'CREATE' TYPE RUN\nPXRUPRM  DS    0C                  NON-CREATE TYPE PARM INPUT\nPPTYPE   DS    CL5                 INPUT TYPE= PARM\nPRVOLLO  DS    CL6                 INPUT VOL=  (LO FOR RANGE)\nPRVOLHI  DS    CL6                 (VOLLO-VOLHI) HI FOR RANGE\nPREDATE  DS    CL7                 RUN EXPIR. DATE\nPRFDATE  DS    CL7                 RUN FORECAST DATE\nPRTDSN   DS    CL44                INPUT TAPE DSN  (FOR 'FIND' OPTION)\nPRXFLAG  DS    C                   INPUT EXCEPTION REP. FLAG\nPRUFLAG  DS    CL2                 UTIL. ALTER FLAG NUMBER\nPRUFVAL  DS    C                   UTIL. ALTER FLAG VALUE\nPRFILLL  DS    C                   RESERVED\nPPERROFF DS    F                   OFFSET INTO PLIST W/ERROR\nPPALEN   EQU   *-PPCTYP            PARSED PLIST LENGTH\nPPLEN    EQU   *-PRSAREA           FULL PLIST LENGTH\n** END OF THE INTERNAL PARMLIST TO/FROM ITMPAR01\n         SPACE 2\nANDZEROS DC    XL8'0F0F0F0F0F0F0F0F'  FOR SIGN OFF'S\nDISPLTAB DC    CL16'0123456789ABCDEF'\n         SPACE 2\nLOGIMSG  DC    CL25'INIT NTRY, INPUT IMAGE = '\nLOGTMSG  DC    CL25'UTIL NTRY, INPUT IMAGE = '\nLOGBMSG  DC    CL25'INIT NTRY, PARSD PLIST = '\nLOGNMSG  DC    CL25'NEW RECORD CREATED REC = '\nLOGUMSG  DC    CL25'UPDATED RECORD IMAGE   = '\nLOGPMSG  DC    CL25'PREV. RECORD IMAGE WAS = '\nLOGEMSG  DC    CL25'FOLL. REC IS NOW EXPRD = '\nLOGRMSG  DC    CL25'REQUESTED RECORD  =      '\n********************     W T O WORK AREAS       ***********************\nITMI00   WTO   'ITMI000: ITMS000A HAS STARTED',ROUTCDE=15,MF=L\nITMI01   WTO   'ITMI001: ITMS DATABASE HAS BEEN OPENED',ROUTCDE=15,MF=L\nITMI02   WTO   'ITMI002: ITMS DATABASE CLOSED DOWN',ROUTCDE=15,MF=L\nITMI03   WTO   'ITMI003: ITMS000A HAS ENDED ',ROUTCDE=15,MF=L\nITME00   WTO   'ITMER000: INVALID PARMLIST DETECTED BY ITMS00A',       X\n               ROUTCDE=15,MF=L\n*\nITME01   WTO   'ITMER001: PARMLIST NOT FOUND , TERMINATING ',          X\n               ROUTCDE=15,MF=L\n*\nITME021  WTO   'ITMER102: INVALID RUN-TYPE SPECIFIED , TERMINATING',   X\n               ROUTCDE=15,MF=L\n*\nITME022  WTO   'ITMER202: PARMLIST INVALID , OFFSET = +XX ',           X\n               ROUTCDE=15,MF=L\n         ORG ITME022+43\nER2OFF   DS    CL2\n         ORG\n*\nITME023  WTO   'ITMER302: RANGE PARM INVALID , NOT ASCENDING ORDER',   X\n               ROUTCDE=15,MF=L\n*\nITME024  WTO   'ITMER402: RANGE PARM INVALID , VOLSERS NOT NUMERIC',   X\n               ROUTCDE=15,MF=L\n*\nITMESE1  WTO   'ITMER0US: INVALID RUN-TYPE SPECIFIED , RECORD DISREGARDX\n               ED',ROUTCDE=15,MF=L\n*\nITMESE2  WTO   'ITMER2US: PARMLIST INVALID , OFFSET = +XX , RECORD DISRX\n               EGARDED',ROUTCDE=15,MF=L\n         ORG ITMESE2+43\nUTEOFF   DS    CL2\n         ORG\n*\n*\nWTOCNTRA WTO   'ITMI009: NUMBER OF RECS ADDED TO ITMCNTL  = XXXX ',    X\n               ROUTCDE=15,MF=L\n         ORG WTOCNTRA+48\nACNTR    DS    CL4\n         ORG\n*\nWTOCNTRU WTO   'ITMI010: NUMBER OF RECS UPDATED IN ITMCNTL  = XXXX ',  X\n               ROUTCDE=15,MF=L\n         ORG WTOCNTRU+50\nUCNTR    DS    CL4\n         ORG\n*\nWTOCNTRE WTO   'ITMI00A: NUMBER OF RECS EXPIRED = XXXX',               X\n               ROUTCDE=15,MF=L\n         ORG WTOCNTRE+38\nECNTR    DS    CL4\n         ORG\n*\nWTOCNTRR WTO   'ITMI00B: NUMBER OF RECS REPORTED = XXXX',              X\n               ROUTCDE=15,MF=L\n         ORG WTOCNTRR+39\nRCNTR    DS    CL4\n         ORG\n*\nWTOCNTRG WTO   'ITMI00S: NUMBER OF RECS READ FROM SYSIN = XXXX',       X\n               ROUTCDE=15,MF=L\n         ORG WTOCNTRG+46\nGCNTR    DS    CL4\n         ORG\n********************     W T O WORK AREAS       ***********************\nWTOLOGS  WTO   'ITMI004: ITMS LOG NOW SWITCHED FROM ''X'' TO ''Y'' ',  X\n               ROUTCDE=15,MF=L\n         ORG WTOLOGS+41\nLEX1     DS    C\n         ORG WTOLOGS+48\nLEX2     DS    C\n         ORG\n**\nWTOLOGE  WTO  'ITME099: ITMSLOG? VSAM ERROR ON ????? ??? , LOGGING NOW X\n               DISABLED VSAM ERR CODE = XXXXXXXX',ROUTCDE=15,MF=L\n         ORG WTOLOGE+20\nELEX     DS    C\n         ORG WTOLOGE+35\nEVREQ    DS    5C\n         ORG WTOLOGE+46\nEACBRP   DS    3C\n         ORG WTOLOGE+85\nLOGEVE   DS    8C\n         ORG\nLOGEL    EQU   *-WTOLOGE\n**\nWTOERR3  WTO  'ITME003: ITMCNTL VSAM XXXXX ERROR ??? ERR CODE = XXXXXXXX\n               X , ITMS00A TERMINATING',ROUTCDE=15,MF=L\n         ORG WTOERR3+26\nER3REQ   DS    5C\n         ORG WTOERR3+38\nER3AR    DS    3C\n         ORG WTOERR3+53\nER3VE    DS    8C\n         ORG\nLOGE3    EQU   *-WTOERR3\n**\nWTOERR5  WTO  'ITME005: SCRATCH VOLUME XXXXXX ALREADY EXITS , REQUEST BX\n               YPASSED',ROUTCDE=15,MF=L\n         ORG WTOERR5+28\nER5VOL   DS    6C\n         ORG\nLOGE5    EQU   *-WTOERR5\n**\nWTOERRX  WTO  'ITME00X: VOLUME XXXXXX NOT FOUND , REQUEST IGNORED',    X\n               ROUTCDE=15,MF=L\n         ORG WTOERRX+20\nERXVOL   DS    6C\n         ORG\nLOGEX    EQU   *-WTOERRX\n**\nWTOERFE  WTO   'ITMER0FE: EXPIRATION DATE INVALID , MUST NOT BE LESS THX\n               AN CURRENT DATE',ROUTCDE=15,MF=L\nLOGEFE   EQU   *-WTOERFE\n**\nWTOERF   WTO   'ITMER00F: FORECAST DATE INVALID! , MUST BE GREATER THANX\n               CURRENT DATE',ROUTCDE=15,MF=L\nLOGEF    EQU   *-WTOERF\n**\nWTOERG   WTO   'ITMER00G: REQUESTED XXX NOT FOUND !',ROUTCDE=15,MF=L\n         ORG WTOERG+24\nERGREQ   DS    3C\n         ORG\nLOGEG    EQU   *-WTOERG\n**\nWTOLGX   WTO   'NOW PRINTING ITMLOG ''X'' EXTENT',ROUTCDE=15,MF=L\n         ORG WTOLGX+25\nWLGX     DS    C\n         ORG\nLWLGX    EQU   *-WTOLGX\n*****************     END   W T O WORK AREAS       *******************\n****************** REPORT FORMATNG WORK AREAS *********************\nEXPRHDR  DC    CL22'EXPIRED VOLUMES REPORT'\nAVAVHDR  DC    CL32'AVAILABLE SCRATCH VOLUMES REPORT'\nSCRTHDR  DC    CL26'NON-SCRATCH VOLUMES REPORT'\nALLVHDR  DC    CL21'ITMS DATABASE LISTING'\nSCRFHDR  DC    CL31'SCRATCH VOLUMES FORECAST REPORT'\nEXCPHDR  DC    CL34'VOLUMES IN EXCEPTION STATUS REPORT'\nSVDSHDR  DC    CL21'VOL/DSN SEARCH REPORT'\nNODAHDR  DC    CL35'NO DATA FOUND FOR REQUESTED REPORT '\nCREATC   DC    CL7'IN-USE '\nSCRATC   DC    CL7'SCRATCH'\nBOTHCC   DC    CL4'BOTH'\nUNKNCC   DC    CL4'UNKN'\nOVLYCC   DC    CL4'OVLY'\nPAGEHDR1 DS    0CL121\n         DC    C'1'\n         DC    43C' '\n         DC    C'ITMS000A'\n         DC    43C' '\nHDR1TIM  DC    14X'40'\n         DC    12C' '\nPAGEHDR2 DS    0CL121\n         DC    C'-'\n         DC    94C' '\n         DC    C'PAGE '\nHDR2PGN  DC    C'XXX'\n         DC    18C' '\nPAGEHDR3 DS    0CL121\n         DC    C'-'\n         DC    C'VOLSER   CREATION DATE   EXPIRATN DATE   VOL STATUS'\n         DC    C'   XPT STATUS   DATASET NAME                       '\n         DC    20C' '\nPAGELIN  DS    0CL121\nPAGCC    DC    C'0'                    CARR. CONTROL\nPAGVS    DC    CL6'VSVSVS'             VOL SER #\n         DC    3C' '                   BLANKS\nPAGCD    DC    CL7'YYYYDDD'            CREATION DATE\n         DC    9C' '                   BLANKS\nPAGED    DC    CL7'YYYYDDD'            EXPIRTN DATE\n         DC    9C' '                  BLANKS\nPAGS1    DC    CL7'SCNSCSC'            VOL, STATUS\n         DC    6C' '                  BLANKS\nPAGS2    DC    CL4'UNKN'               VOL, EXCEP STATUS\n         DC    9C' '\nPAGDS    DC    44C' '                  VOL, DSN\n         DC    9C' '\nPGLINL   EQU   *-PAGELIN\n  TITLE '**ITMS000A** TAPE MANAGEMENT SYSTEM  ** REG EQUATES **'\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2                   BAL REGISTER\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10                  BASE REG 1\nR11      EQU   11                  BASE REG 2\nR12      EQU   12                  BASE REG 3\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   ITMS000A\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ITMS705I": {"ttr": 1540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x94)\\x7f\\x00\\x94)\\x7f\\x19\\x15\\x00w\\x00w\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1994-10-24T00:00:00", "modifydate": "1994-10-24T19:15:00", "lines": 119, "newlines": 119, "modlines": 0, "user": "SBGCSC"}, "text": "ITMS507I CLIST\n&CONTROL ERR\n*\n*  PARSE MESSAGE IEC705I\n*\n*  MESSAGE   = IEC705I TAPE ON XXX,070023,SL,COMP,JOBN,PROCSTEP,TAPEDSN\n*  VARIABLES = MSGID   TAPE ON U   VOLSER LT C    JN   PN       DSN\n*\n*\nGETMLINE LINE 1\nPARSEL2R LINE MSGID TAPE ON P4 P5\n*\n*  PARSE OUT 4TH PARAMETER FROM ABOVE BUT NOW USING \",\" AS THE\n*  DELIMITER\n*\nPARSEL2R P4 U /,/ VOLSER /,/ LT /,/ C /,/ JN /,/ PN /,/ DSN\n*\n*  SET EXPIRATION DATE AND RETENTION PERIOD TO 0\n*\n&EXPDATE = 0000000\n&RETPERD = 0000\n*\n*  GET THE CURRENT DATE FROM THE SYSTEM\n*\n&WAIT CONTWAIT SUPPRESS\n&WAIT 'MVS D T' *30=-ERROR *ERROR=-ERROR IEE136I=-GOTIT\n-GOTIT\nGETMLINE IEELINE 1\nPARSEL2R IEELINE MSGID2 LOCAL TIME DATE REST\n&YEAR = &SUBSTR &DATE 6 4\n&DAY  = &SUBSTR &DATE 11 3\n&CURDATE = &CONCAT &YEAR &DAY\n*\n&IF .&DSN = . &THEN &GOTO -NODSN\n*\n*  LOOKUP THE RETENTION PERIOD FOR THE TAPE DATASET\n*\n&IF &SUBSTR &DSN 1 4   = IAT.                   &THEN &RETPERD = 210\n&IF &SUBSTR &DSN 1 12  = TDB2.ARCHLOG           &THEN &RETPERD = 14\n&IF &SUBSTR &DSN 1 20  = TDB2.WEEKLY.IMAGCOPY   &THEN &RETPERD = 14\n&IF &SUBSTR &DSN 1 12  = DDB2.ARCHLOG           &THEN &RETPERD = 14\n&IF &SUBSTR &DSN 1 20  = DDB2.WEEKLY.IMAGCOPY   &THEN &RETPERD = 14\n&IF &SUBSTR &DSN 1 22  = DDB2.MAINTMGT.IMAGCOPY &THEN &RETPERD = 14\n&IF &SUBSTR &DSN 1 21  = DDB2.SURFACE.IMAGCOPY  &THEN &RETPERD = 14\n&IF &SUBSTR &DSN 1 12  = QDB2.ARCHLOG           &THEN &RETPERD = 14\n&IF &SUBSTR &DSN 1 20  = QDB2.WEEKLY.IMAGCOPY   &THEN &RETPERD = 14\n&IF &SUBSTR &DSN 1 22  = QDB2.MAINTMGT.IMAGCOPY &THEN &RETPERD = 14\n&IF &SUBSTR &DSN 1 21  = QDB2.SURFACE.IMAGCOPY  &THEN &RETPERD = 14\n&IF &SUBSTR &DSN 1 12  = PDB2.ARCHLOG           &THEN &RETPERD = 49\n&IF &SUBSTR &DSN 1 20  = PDB2.WEEKLY.IMAGCOPY   &THEN &RETPERD = 49\n&IF &SUBSTR &DSN 1 22  = PDB2.MAINTMGT.IMAGCOPY &THEN &RETPERD = 49\n&IF &SUBSTR &DSN 1 21  = PDB2.SURFACE.IMAGCOPY  &THEN &RETPERD = 49\n&IF &SUBSTR &DSN 1 22  = PDB2.BLACKLST.IMAGCOPY &THEN &RETPERD = 49\n&IF &SUBSTR &DSN 1 12  = CDB2.ARCHLOG           &THEN &RETPERD = 14\n&IF &SUBSTR &DSN 1 20  = CDB2.WEEKLY.IMAGCOPY   &THEN &RETPERD = 14\n&IF &SUBSTR &DSN 1 22  = CDB2.MAINTMGT.IMAGCOPY &THEN &RETPERD = 14\n&IF &SUBSTR &DSN 1 21  = CDB2.SURFACE.IMAGCOPY  &THEN &RETPERD = 14\n&IF &SUBSTR &DSN 1 22  = CDB2.BLACKLST.IMAGCOPY &THEN &RETPERD = 14\n&IF &SUBSTR &DSN 1 13  = AFCPROD.OLMAC          &THEN &RETPERD = 30\n&IF &SUBSTR &DSN 1 16  = AFCPROD.DB2TABLE       &THEN &RETPERD = 761\n&IF &SUBSTR &DSN 1 16  = AFCPROD.TKTSTOCK       &THEN &RETPERD = 761\n&IF &SUBSTR &DSN 1 13  = AFCQUAL.OLMAC          &THEN &RETPERD = 30\n&IF &SUBSTR &DSN 1 13  = AFCDEVL.OLMAC          &THEN &RETPERD = 1\n&IF &SUBSTR &DSN 1 13  = AFCUNIT.OLMAC          &THEN &RETPERD = 1\n&IF &SUBSTR &DSN 1 13  = AFCBCRG.OLMAC          &THEN &RETPERD = 60\n&IF &SUBSTR &DSN 1 16  = AFCBCRG.BLACKLST       &THEN &RETPERD = 60\n&IF &SUBSTR &DSN 1 13  = AFCACRG.OLMAC          &THEN &RETPERD = 1\n&IF &SUBSTR &DSN 1 10  = DUMP.DAILY             &THEN &RETPERD = 13\n&IF &SUBSTR &DSN 1 11  = DUMP.WEEKLY            &THEN &RETPERD = 20\n&IF &SUBSTR &DSN 1 12  = DUMP.LOGICAL           &THEN &RETPERD = 30\n&IF &SUBSTR &DSN 1 13  = SYSP.DMS.ARCH          &THEN &RETPERD = 30\n&IF &SUBSTR &DSN 1 13  = SYSP.DMS.COPY          &THEN &RETPERD = 30\n&IF &SUBSTR &DSN 1 16  = SMF.AFC1.MONTHLY       &THEN &RETPERD = 365\n&IF &SUBSTR &DSN 1 16  = SMF.AFC2.MONTHLY       &THEN &RETPERD = 365\n&IF &SUBSTR &DSN 1 20  = AFCBCRG.RAD.EU65ARCH   &THEN &RETPERD = 2560\n&IF &SUBSTR &DSN 1 19  = AFCBCRG.RAD.INVARCH    &THEN &RETPERD = 1550\n&IF &SUBSTR &DSN 1 28 = AFCBCRG.RAD.PEU65LGM.ARCHIVE &THEN &RETPERD = 60\n&IF &SUBSTR &DSN 1 28 = AFCBCRG.RAD.PEU65LGD.ARCHIVE &THEN &RETPERD = 60\n&IF &SUBSTR &DSN 1 27 = AFCBCRG.RAD.TUSAGEM.ARCHIVE &THEN &RETPERD = 60\n&IF &SUBSTR &DSN 1 27 = AFCBCRG.RAD.TSALESM.ARCHIVE &THEN &RETPERD = 60\n*\n* IF DSN IS NOT IN THE TABLE DO NOT SET AN EXPIRATION DATE\n*\n&IF &RETPERD = 0000 &THEN &GOTO -NODSN\n*\n* SET EXPIRATION DAY AND EXPIRATION YEAR\n*\n&EXPYEAR = &YEAR\n&EXPDAY = &DAY + &RETPERD\n*\n* HANDLE EXPIRATION DAY BEING GREATER THAN 365\n*\n-YEARCHK\n&IF &EXPDAY LE 365 &THEN &GOTO -SETEXPDT\n&EXPYEAR = &EXPYEAR + 1\n&EXPDAY = &EXPDAY - 365\n&GOTO -YEARCHK\n*\n* SET THE EXPIRATION DATE\n*\n-SETEXPDT\n&IF &LENGTH &EXPDAY = 1 &THEN &EXPDAY = &CONCAT 00 &EXPDAY\n&IF &LENGTH &EXPDAY = 2 &THEN &EXPDAY = &CONCAT 0 &EXPDAY\n&EXPDATE = &CONCAT &EXPYEAR &EXPDAY\n*\n* IF DATA SET NAME DOES NOT MATCH ANY TABLE ENTRY, THEN LEAVE\n* EXPIRATION DATE AS 0000000, ITMS PROGRAM WILL HANDLE AS AN\n* EXCEPTION\n*\n-NODSN\n&WRITE S ITMS,P1=C,P2=,&VOLSER,P3=,&CURDATE,P4=,&EXPDATE,P5=,&DSN\nMVS S ITMS,P1='C,',P2='&VOLSER,',P3='&CURDATE,',P4='&EXPDATE,',P5=&DSN\n&EXIT 0\n-ERROR\n*\n* TIMEOUT ERROR WHEN NETVIEW ATTEMPTS TO FIND OUT THE CURRENT DATE\n*\nWTOR ITMS FAILED TO RECORD TAPE VOLSER, NOTIFY SYSTEM SUPPORT\n&EXIT 8\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ITMS705M": {"ttr": 1543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94)\\x7f\\x00\\x94)\\x7f\\x11B\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-10-24T00:00:00", "modifydate": "1994-10-24T11:42:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SBGCSC"}, "text": "************************************************************************\n*  AOC/NETVIEW MESSAGE TABLE ENTRY TO DRIVE ITMS SUBSYSTEM\n*\n*  AUTOMATE THE IEC705I MESSAGE FOR ITMS\n*\n************************************************************************\n*\n IF MSGID='IEC705I'\n        & DOMAINID='XXXXX'\n   THEN EXEC( CMD('ITMS705I ') ROUTE(ONE AUTO1))\n        DISPLAY(Y) NETLOG(Y);\n*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT223/FILE223.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT223", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}