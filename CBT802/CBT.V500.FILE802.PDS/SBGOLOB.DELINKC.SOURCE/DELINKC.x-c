#include <string.h>
#include <stdio.h>

// ****************** structs ******************

typedef struct rld_tag * rld_ptr;
typedef struct rld_tag {
    long    address;
    rld_ptr next;
    short   esd;
    char    flgs;
} rld_r;

typedef struct txt_tag * txt_ptr;
typedef struct txt_tag {
    unsigned char * text;
    long    textlen;
    long    address;
    txt_ptr next;
} txt_r;

typedef struct esd_tag * esd_ptr;
typedef struct esd_tag {
    long    address;
    long    length;
    esd_ptr next;
    rld_ptr rld;
    txt_ptr txt;
    char  * idr;
    char  * idy;
    short   esd;
    short   new_esd;
    char    type;
    char    name Ý9¨;
    char    flag;
} esd_r;

typedef struct obj_tag * obj_ptr;
typedef struct obj_tag {
    esd_ptr esd;
    obj_ptr next;
} obj_r;

typedef struct pds_tag * pds_ptr;
typedef struct pds_tag {
    unsigned int ttrt:24;
    unsigned int zero1:8;
    unsigned int ttrn:24;
    unsigned int zero2:8;
    int rent:1; int reus:1; int ovly:1; int test:1; int load:1; int sctr:1; int exec:1; int blk1:1;
    int flvl:1; int org0:1; int ep0:1;  int nrld:1; int nrep:1; int tstn:1; int lef:1;  int refr:1;
    unsigned int stor1:8; // Size
    unsigned int stor2:8; // Size
    unsigned int stor3:8; // Size
    unsigned int ftbl1:8; // corrected for alignment
    unsigned int ftbl2:8; // corrected for alignment
    unsigned int epa1:8;  // Entry Point Address
    unsigned int epa2:8;  // Entry Point Address
    unsigned int epa3:8;  // Entry Point Address
    int aosle:1;int big:1;  int paga:1; int ssi:1;  int apflg:1; int pgmo:1;  int fill1:1; int fill2:1;
    int fill3:1;int fill4:1;int fill5:1;int lrmod:1; unsigned int aamod:2; unsigned int mamod:2;
    unsigned int ftb3:8;  // aux-data starts just past this byte
} pds_r;

typedef struct sctr_tag * sctr_ptr;
typedef struct sctr_tag {
    unsigned short slsz;
    unsigned short ttsz;
    unsigned short esdt;
    unsigned short esdc;
} sctr_r;

typedef struct alias_tag * alias_ptr;
typedef struct alias_tag {
    unsigned int  epm:24; // Is aligned
    unsigned char mnm Ý8¨;
} alias_r;

typedef struct ssi_tag * ssi_ptr;
typedef struct ssi_tag {
    unsigned int chlvl:8;
    unsigned int filler:1;
    unsigned int force:1;
    unsigned int usrch:1;
    unsigned int emfix:1;
    unsigned int depch:1;
    unsigned int cmsgn:1;
    unsigned int ptsgn:1;
    unsigned int ibmmb:1;
    unsigned int mbrsn:16;
} ssi_r;

typedef struct apf_tag * apf_ptr;
typedef struct apf_tag {
    unsigned int apfct:8;
    unsigned int apfac:8;
} apf_r;

// ****************** member dir processing ******************

static pds_ptr glob_p; // Mandatory pointer to the user-data

static sctr_ptr  glob_sctr = NULL; // Optional aux. user-data pointers..
static alias_ptr glob_alias = NULL;
static ssi_ptr   glob_ssi = NULL;
static apf_ptr   glob_apf = NULL;

static          long alias = 0; // Was it an alias to a member?
static          long link_edit_data_len = 0;
static unsigned char link_edit_data Ý64¨; // directory user-data
static          long epa;    // Entry Point Address

// ****************** member data processing ******************

static long data = 0;        // Not initially, need a CTL Record first

static long ctldcnt;         // Bytes in Control Data area
static char ctldata Ý32768¨; // Control Data - overkill on space though
static long ctladdr;         // Address where program text would start

static esd_ptr head = NULL;  // Full list of ESDs
static obj_ptr objs = NULL;  // ESDs separated into discrete objects
static long next_esd1;       // When rebuilding, this resequences ESD IDS
static long next_esd2;       // When rebuilding, this resequences LD ESD IDS

// ****************** create object processing ******************

static unsigned char esd Ý80¨ = {
   0x02, 'E', 'S', 'D', ' ', ' ', ' ', ' ', ' ', ' ',0x00,0x10, ' ', ' ', ' ', ' ',
    ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
    ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
    ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
    ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '
};
static unsigned char txt Ý80¨ = {
   0x02, 'T', 'X', 'T', ' ',0x00,0x00,0x00, ' ', ' ',0x00,0x00, ' ', ' ',0x00,0x01
};
static unsigned char rld Ý80¨ = {
   0x02, 'R', 'L', 'D', ' ', ' ', ' ', ' ', ' ', ' ',0x00,0x00, ' ', ' ', ' ', ' '
};
static unsigned char end Ý80¨ = {
   0x02, 'E', 'N', 'D', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
    ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
    '1', '5', '7', '4', '1', 'S', 'C', '1', '0', '3', ' ', '0', '2', '0', '1', '0',
    '9', '0', '0', '1', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
    ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', '0', '0', '0', '0', '0', '0', '0'
};

// ****************** code ******************

int add_esd (unsigned char * p, short esd) {
    long i;
    esd_ptr s;
    esd_ptr e = (esd_ptr)malloc (sizeof (esd_r));
    if (e) {
        e->txt = NULL;
        e->rld = NULL;
        e->esd = esd;
        e->idr = NULL;
        e->idy = NULL;

        memcpy (e->name, p, 8);
        e->name Ý8¨ = 0;
        i = 7;
        while (e->name Ýi¨ == ' ')
            e->name Ýi--¨ = 0;

        e->type = p Ý8¨;
        e->address = (p Ý9¨ << 16) | (p Ý10¨ << 8) | p Ý11¨;
        e->flag = p Ý12¨;
        e->length = (p Ý13¨ << 16) | (p Ý14¨ << 8) | p Ý15¨;

        if ((head == NULL) || // Empty - just add it
            (e->type == 0x0A) || // Put WX records first so we skip them when building the objects
            (head->address > e->address) || // Sort by addresses
            ((head->type != 0x0A) &&    // As long as it's not a WX,
             (head->address == e->address) &&
             (e->type < head->type))) { // insert lower types first
            e->next = head;
            head = e;
        } else {
            s = head;
            while ((s->next) &&
                   ((s->next->address < e->address) ||
                    (s->next->type == 0x0A) ||           // This type isn't 0x0A...
                    ((s->next->address == e->address) && // If the address is equal,
                     (e->type > s->next->type))))        // put SD records first.
                s = s->next;

            e->next = s->next;
            s->next = e;
        }
        return (0);
    }
    printf ("Out of memory allocating an ESD record\n");
    return (1);
}

int add_rld (short f_esd, short s_esd, long address, short f) {
    rld_ptr r;
    rld_ptr t;
    esd_ptr s = head;
    while ((s) && (s->esd != s_esd))
        s = s->next;

    if (s) { // Found the correct location
        r = (rld_ptr)malloc (sizeof (rld_r));
        if (r) {
            r->esd = f_esd;
            r->address = address;
            r->flgs = f & 0xFE;
            r->next = NULL;
            if (s->rld == NULL) {
                s->rld = r;
            } else {
                t = s->rld;
                while (t->next)
                    t = t->next;
                t->next = r;
            }
            return (0);
        } else
            printf ("Out of memory allocating an RLD record\n");
    } else
        printf ("Couldn't locate required ESD record (%04X)\n", s_esd);
    return (1);
}

int splittxt (unsigned char * b, short l) { // l is not used
    int i = 0;
    short esd;
    short len;
    esd_ptr s;
    txt_ptr t;
    txt_ptr u;
    char * c;

    while (i < ctldcnt) {
        esd = *((short *)(&(ctldata Ýi + 0¨)));
        len = *((short *)(&(ctldata Ýi + 2¨)));

        s = head;
        while (s) {
            if (s->esd == esd)
                break;
            s = s->next;
        }
        if (s == NULL) {
            printf ("Couldn't locate required ESD record (%04X)\n", esd);
            return (1);
        }
        u = (txt_ptr)malloc (sizeof (txt_r));
        if (u == NULL) {
            printf ("Out of memory creating a new txt record\n");
            return (1);
        }
        u->text = (unsigned char *)malloc (len);
        if (u->text == NULL) {
            printf ("Out of memory creating a new text area\n");
            return (1);
        }
        memcpy (u->text, b, len);
        u->textlen = len;
        u->address = ctladdr - s->address; // Convert to relative address
        u->next = NULL;
        if (s->txt == NULL)
            s->txt = u;
        else {
            t = s->txt;
            while (t->next)
                t = t->next;
            t->next = u;
        }
        ctladdr += len;
        b += len;
        i += 4;
    }
    return (0);
}

int process (unsigned char * b, short l) { // l is not used
    long  i;
    long  j;
    long  k;
    short f_esd;
    short s_esd;
    short length;
    unsigned char * p;
    esd_ptr s;

    short i_esd Ý127¨; // max allowed for idr
    char ts Ý20¨; // space for a decoded IDR record + nul terminator

    switch (b Ý0¨) {
        case 0x40: // SYM Record
            break; // Do Nothing

        case 0x10: // SCATTER/TRANSLATION Record
            break; // Do Nothing

        case 0x20: // CESD Record
            f_esd = *((short *)(&(b Ý4¨)));
            length = *((short *)(&(b Ý6¨)));
            p = &(b Ý8¨);
            while (length >= 16) {
                if (add_esd (p, f_esd++))
                    return (1);
                p += 16;
                length -= 16;
            }
            break;

        case 0x80: // IDR Record
            if ((b Ý2¨ & 0x0F) == 0x04) {        // Trans IDR
                length = b Ý1¨ + 1;
                k = 3;
                while (k < length) {
                    i = 0;
                    do {
                        i_esd Ýi++¨ = *((unsigned short *)&(b Ýk¨));
                        k += 2;
                    } while ((i_esd Ýi-1¨ & 0x8000) == 0);
                    i_esd Ýi-1¨ &= 0x7FFF; // Remove top bit
                    k++; // skip nul byte
                    j = 0;
                    while (j < 10)
                        ts Ýj++¨ = b Ýk++¨;
                    while (j < 19) {
                        ts Ýj++¨ = (b Ýk¨ >> 4) + '0';
                        ts Ýj++¨ = (b Ýk¨ &0xF) + '0'; k++;
                    }
                    ts Ýj-1¨ = 0; // didn't want the last char

                    j = 0;
                    while (j < i) { // for each esd found
                        s = head;
                        while (s) { // find the esd record
                            if (s->esd == i_esd Ýj¨) {
                                s->idr = (char *)malloc (20); // add the idr data
                                if (s->idr)
                                    strcpy (s->idr, ts);
                                break;
                            }
                            s = s->next;
                        }
                        j++;
                    }
                }
            } else if ((b Ý2¨ & 0x0F) == 0x08) { // Users IDR
                length = b Ý1¨ + 1;
                k = 3;
                while (k < length) {
                    f_esd = *((unsigned short *)&(b Ýk¨));
                    k += 5; // Skip coded date
                    j = b Ýk++¨; // Get length

                    s = head;
                    while (s) { // find the esd record
                        if (s->esd == f_esd) {
                            s->idy = (char *)malloc (j + 1); // add the idy data
                            if (s->idy) {
                                memcpy (s->idy, &(b Ýk¨), j);
                                s->idy Ýj¨ = 0;
                            }
                            break;
                        }
                        s = s->next;
                    }
                    k += j; // Is there a 'next' record?
                }
            } // else ignore this record
            break;

        case 0x01: // CTL Record
        case 0x05:
        case 0x0D:
            data = 1;
            ctldcnt = *((short *)(&(b Ý4¨)));
            ctladdr = *((long *)(&(b Ý8¨))) & 0x00FFFFFF;
            memcpy (ctldata, &(b Ý16¨), ctldcnt);
            break;

        case 0x03: // RLD/CTL Record
        case 0x07:
        case 0x0F:
            data = 1;
            ctldcnt = *((short *)(&(b Ý4¨)));
            length = *((short *)(&(b Ý6¨)));
            ctladdr = *((long *)(&(b Ý8¨))) & 0x00FFFFFF;
            memcpy (ctldata, &(b Ý16 + length¨), ctldcnt);
            // *** Drop through ***

        case 0x02: // RLD Record
        case 0x06:
        case 0x0E:
            length = *((short *)(&(b Ý6¨))); // May already be set :(
            p = &(b Ý16¨);
            j = 1;
            while (length > 0) {
                if (j) {
                    f_esd = *((short *)(&(p Ý0¨)));
                    s_esd = *((short *)(&(p Ý2¨)));
                    k = 4;
                } else
                    k = 0;
                if ((p Ýk¨ & 0x01) == 0x01)
                    j = 0;
                else
                    j = 1;
                if (add_rld (f_esd, s_esd, *((long *)(&(p Ýk¨))) & 0x00FFFFFF, p Ýk¨))
                    return (1);
                length -= (k + 4);
                p += (k + 4);
            }
            break;
    }
    return (0);
}

esd_ptr add_o_esd (obj_ptr n, esd_ptr s, long ext) {
    esd_ptr p = (esd_ptr)malloc (sizeof (esd_r));
    if (p == NULL) {
        printf ("Out of memory creating a new esd\n");
        return (NULL);
    }
    memcpy (p, s, sizeof (esd_r));
    p->next = NULL;
    p->rld = NULL;
    if ((ext) || (p->type != 0x03)) // Not an LD - use the main counter
        p->new_esd = next_esd1++;
    else
        p->new_esd = next_esd2++;

    if ((ext) && (p->type != 0x0A)) // If not Weak, this is an external reference to it
        p->type = 0x02;
    else if (p->type == 0x03) // Is the Loadmodules type = LD
        p->type = 0x01; // Convert it to object deck type LD

    if (n->esd == NULL) // Add the new esd to the current end of the objects list
        n->esd = p;
    else {
        s = n->esd;
        while (s->next)
            s = s->next;
        s->next = p;
    }
    return (p);
}

int make (char * ifn) {
    long i;
    unsigned long j;
    long k;
    obj_ptr n = NULL;
    obj_ptr o;
    esd_ptr p;
    esd_ptr s;
    rld_ptr t;
    txt_ptr u;
    txt_ptr v;

    s = head;
    while (s) {
        switch (s->type) {
            case 0x00: // SD - Start a new object deck
                next_esd1 = 1;
                next_esd2 = 1;
                o = (obj_ptr)malloc (sizeof (obj_r));
                if (o == NULL) {
                    printf ("Out of memory creating a new object\n");
                    goto makeerr;
                }
                o->esd = NULL;
                o->next = NULL;
                if (objs == NULL)
                    objs = o;
                else
                    n->next = o;
                n = o;
                // *** Drop through ***

            case 0x03: // LD - Add to the current object deck
                if (n == NULL)
                    break; // Can't happen

                if (add_o_esd (n, s, 0) == NULL) // Add as a local define
                    goto makeerr;

                t = s->rld; // Any ERs? (Should only happen for SDs)
                while (t) {
                    p = n->esd; // Is the esd already in the object?
                    while (p) {
                        if (p->esd == t->esd)
                            break;   // Yes
                        p = p->next;
                    }
                    if (p == NULL) { // No
                        p = head;    // Find it in the full list
                        while (p) {
                            if (p->esd == t->esd)
                                break;
                            p = p->next;
                        }
                        if (p) // Found it...
                            p = add_o_esd (n, p, 1); // Add it as an external define
                        else
                            printf ("Couldn't locate required ESD record (%04X)\n", t->esd);
                    }
                    if (p) { // Hope there's enough memory
                        t->esd = p->new_esd; // Translate the loadmodule esd to the new objects one
                        t->address -= n->esd->address;

                        i = t->address; // find the base
                        u = s->txt; // Now we have a localised RLD record, fix the txt pointers
                        while (u) {
                            if ((u->address <= i) && (u->address + u->textlen > i)) {
                                i -= u->address; // Find the correct offset within the block
                                if (p->type >= 2) { // It's external, just blank it out...
                                    if ((t->flgs & 0xC) == 0xC) { // Check size of relocation
                                        u->text Ýi++¨ = 0;
                                        if (u->textlen <= i) {i = 0; u = u->next;}
                                    }
                                    u->text Ýi++¨ = 0;
                                    if (u->textlen <= i) {i = 0; u = u->next;}
                                    u->text Ýi++¨ = 0;
                                    if (u->textlen <= i) {i = 0; u = u->next;}
                                    u->text Ýi¨   = 0;
                                    break;
                                }
                                v = u; // Remember start positions
                                k = i;
                                if ((t->flgs & 0xC) == 0xC) { // Check size of relocation
                                    j = u->text Ýi++¨ << 24;
                                    if (u->textlen <= i) {i = 0; u = u->next;}
                                } else
                                    j = 0;
                                j |= u->text Ýi++¨ << 16;
                                if (u->textlen <= i) {i = 0; u = u->next;}
                                j |= u->text Ýi++¨ << 8;
                                if (u->textlen <= i) {i = 0; u = u->next;}
                                j |= u->text Ýi¨;

                                j -= n->esd->address; // Fix the relocation

                                i = k; // Reset to start
                                u = v;
                                if ((t->flgs & 0xC) == 0xC) { // Check size of relocation
                                    u->text Ýi++¨ = ((j >> 24) & 0xFF);
                                    if (u->textlen <= i) {i = 0; u = u->next;}
                                }
                                u->text Ýi++¨ = ((j >> 16) & 0xFF);
                                if (u->textlen <= i) {i = 0; u = u->next;}
                                u->text Ýi++¨ = ((j >> 8) & 0xFF);
                                if (u->textlen <= i) {i = 0; u = u->next;}
                                u->text Ýi¨   = ((j) & 0xFF);
                                break; // All done
                            }
                            u = u->next;
                        }
                    } else {
makeerr:
                        printf ("Ending make for %s\n", ifn);
                        return (1);
                    }
                    t = t->next;
                }
                if (s->rld) {// Should only happen for SDs
                    if (s->type != 0) {
                        printf ("Unexpected RLD from ESD type %02X\n", s->type);
                        goto makeerr;
                    }
                    n->esd->rld = s->rld;
                }
                break;

            case 0x0A: // WX - Do nothing with these records, they are for reference only
                break;
        }
        s = s->next;
    }
    return (0);
}

void dump (FILE * f, int parms, char * filename) {
    long i;
    long k;
    long l = 1; // Line Numbers
    char st Ý9¨;
    char ep Ý9¨;
    char op Ý80¨;
    char tp Ý80¨;
    obj_ptr o;
    esd_ptr s;
    rld_ptr t;
    txt_ptr u;
    char * reus_attr;
    char * load_attr;
    char * m;

    ep Ý0¨ = 0; // If no name, don't emit ENTRY
    o = objs;
    while (o) {
        s = o->esd;
        while (s) {
            if ((ep Ý0¨ == 0) && (s->address == epa)) // Found the entry name?
                strcpy (ep, s->name);

            *((short *)&(esd Ý14¨)) = s->new_esd;
            sprintf (st, "%-8s", s->name);
            memcpy (&(esd Ý16¨), st, 8);
            esd Ý24¨ = (unsigned char)s->type;
            esd Ý25¨ = 0;
            esd Ý26¨ = 0; // Address is zero except for LDs...
            esd Ý27¨ = 0;
            if (s->type == 0) {        // SD
                esd Ý28¨ = (unsigned char)s->flag;
                esd Ý29¨ = (unsigned char)(s->length >> 16);
                esd Ý30¨ = (unsigned char)(s->length >> 8);
                esd Ý31¨ = (unsigned char)(s->length);
            } else if (s->type == 1) { // LD
                i = (s->address - o->esd->address); // Calculate correct offset
                esd Ý25¨ = (unsigned char)(i >> 16);
                esd Ý26¨ = (unsigned char)(i >> 8);
                esd Ý27¨ = (unsigned char)(i);
                esd Ý28¨ = ' ';
                esd Ý29¨ = 0;
                esd Ý30¨ = 0;
                esd Ý31¨ = 1;
            } else {                   // ER/WX
                esd Ý28¨ = ' ';
                esd Ý29¨ = ' ';
                esd Ý30¨ = ' ';
                esd Ý31¨ = ' ';
            }
            sprintf (st, "%08d", l++); // Emit the line number
            memcpy (&(esd Ý72¨), st, 8);
            fwrite (esd, 1, 80, f);
            s = s->next;
        }
        u = o->esd->txt;
        while (u) {
            // trim textlen if it passes the obj size (happens due to U records?)
            if ((u->next == NULL) &&
                (u->address + u->textlen > o->esd->length)) // probably by 2/4 bytes
                u->textlen -= ((u->address + u->textlen) - o->esd->length);

            i = 0;
            while (i < u->textlen) {
                k = u->textlen - i;
                if (k > 56)
                    k = 56;
                txt Ý5¨ = (unsigned char)((u->address + i) >> 16);
                txt Ý6¨ = (unsigned char)((u->address + i) >> 8);
                txt Ý7¨ = (unsigned char)((u->address + i));
                *((short *)&(txt Ý10¨)) = k;
                memcpy (&(txt Ý16¨), &(u->text Ýi¨), k);
                if (k < 56) // Need to pad the record?
                    memset (&(txt Ý16 + k¨), 0x40, 56 - k);
                sprintf (st, "%08d", l++); // Emit the line number
                memcpy (&(txt Ý72¨), st, 8);
                fwrite (txt, 1, 80, f);
                i += k;
            }
            u = u->next;
        }
        k = 1;
        t = o->esd->rld;
        while (t) {
            i = 16;
            memset (&(rld Ý16¨), 0x40, 56);
            while ((t) && (i + 4 + (k * 4) <= 72)) {
                if (k) {
                    rld Ýi++¨ = (unsigned char)(t->esd >> 8);
                    rld Ýi++¨ = (unsigned char)(t->esd);
                    rld Ýi++¨ = 0;
                    rld Ýi++¨ = 1;
                }
                rld Ýi++¨ = t->flgs;

                if ((t->next) &&
                    (t->esd == t->next->esd) &&
                    (i + 3 + 4 <= 72)) {
                    rld Ýi-1¨ |= 1;
                    k = 0;
                } else
                    k = 1;

                rld Ýi++¨ = (unsigned char)(t->address >> 16);
                rld Ýi++¨ = (unsigned char)(t->address >> 8);
                rld Ýi++¨ = (unsigned char)(t->address);

                t = t->next;
            }
            rld Ý11¨ = i - 16;
            sprintf (st, "%08d", l++); // Emit the line number
            memcpy (&(rld Ý72¨), st, 8);
            fwrite (rld, 1, 80, f);
        }

        if (o->esd->idr) // did we find an idr record?
            memcpy (&(end Ý33¨), o->esd->idr, 19);
        sprintf (st, "%08d", l); // Emit the line number
        memcpy (&(end Ý72¨), st, 8);
        fwrite (end, 1, 80, f);
        o = o->next;
        l = 1; // Line numbers back to 1 for the next object deck
    }
    s = head;
    while (s) { // parse the esd records
        if (s->idy) { // Has it got user IDENTIFY data?
            memset (op, 0x40, 80);
            sprintf (tp, "IDENTIFY %s('%s')", s->name, s->idy);
            memcpy (&(op Ý1¨), tp, strlen (tp));
            fwrite (op, 1, 80, f);
        }
        s = s->next;
    }
    if (glob_p->ssi) {
        memset (op, 0x40, 80);
        memcpy (&(op Ý1¨), "SETSSI ", 7);
        i = 0;
        k = (long)glob_ssi - (long)glob_p;
        while (i < 8) {
            op Ý8 + i++¨ = '0' + (link_edit_data Ýk¨ >> 4);
            op Ý8 + i++¨ = '0' + (link_edit_data Ýk++¨ & 0xF);
        }
        fwrite (op, 1, 80, f);
    }
    if ((glob_p->apflg) && (glob_apf->apfct == 0x01) &&
                           (glob_apf->apfac == 0x01)) {
        memset (op, 0x40, 80);
        memcpy (&(op Ý1¨), "SETCODE AC(1)", 13);
        fwrite (op, 1, 80, f);
    }
    if (parms) {
        reus_attr = "NONE";
        if (glob_p->reus) reus_attr = "SERIAL";
        if (glob_p->rent) reus_attr = "RENT";
        if (glob_p->refr) reus_attr = "REFR";
        if (glob_p->load) load_attr = "OL";
        else              load_attr = "NOOL";
        sprintf (tp, "SETOPT PARM(REUS(%s),%s)", reus_attr, load_attr);
        memset (op, 0x40, 80);
        memcpy (&(op Ý1¨), tp, strlen (tp));
        fwrite (op, 1, 80, f);

        if (alias == 0)
            i = glob_p->mamod;
        else
            i = glob_p->aamod;
        if (i == 1) {
            memset (op, 0x40, 80);
            memcpy (&(op Ý1¨), "MODE AMODE(24)", 14);
            fwrite (op, 1, 80, f);
        } else if (i == 2) {
            memset (op, 0x40, 80);
            if (glob_p->lrmod)
                memcpy (&(op Ý1¨), "MODE AMODE(31),RMODE(ANY)", 25);
            else
                memcpy (&(op Ý1¨), "MODE AMODE(31),RMODE(24)", 24);
            fwrite (op, 1, 80, f);
        } else if (i == 3) {
            memset (op, 0x40, 80);
            memcpy (&(op Ý1¨), "MODE AMODE(ANY)", 15);
            fwrite (op, 1, 80, f);
        }
    }
    if (ep Ý0¨) {
        memset (op, 0x40, 80);
        memcpy (&(op Ý1¨), "ENTRY", 5);
        memcpy (&(op Ý7¨), ep, strlen (ep));
        fwrite (op, 1, 80, f);
    }
    if (parms) {
        strcpy (tp, filename);
        m = strstr (tp, ")");
        if (m) {
            m Ý0¨ = 0;
            m = strstr (tp, "(");
            if (m) {
                m++; // Got the member name
                strncpy (st, m, 8);
                st Ý8¨ = 0;
                strupr (st);
                memset (op, 0x40, 80);
                sprintf (tp, "NAME %s(R)", st);
                memcpy (&(op Ý1¨), tp, strlen (tp));
                fwrite (op, 1, 80, f);
            }
        }
    }
}
/*
void dump2 (FILE * f) {
    long i;
    obj_ptr o;
    esd_ptr s;
    rld_ptr t;
    txt_ptr u;

    o = objs;
    while (o) {
        s = o->esd;
        while (s) {
            fprintf (f, "%02X %-8s %04X %06X %06X %02X\n",
                s->type, s->name, s->new_esd, s->address, s->length, s->flag);
            s = s->next;
        }
        u = o->esd->txt;
        while (u) {
            fprintf (f, " TXT %06X %06X\n", u->address, u->textlen);
            u = u->next;
        }
        i = 0;
        t = o->esd->rld;
        while (t) {
            fprintf (f, " %04X=>%06X", t->esd, t->address);
            t = t->next;
            i++;
            if ((i >= 6) || (t == NULL)) {
                fprintf (f, "\n");
                i = 0;
            }
        }
        fprintf (f, "\n");
        o = o->next;
    }
}

void dump3 (FILE * f) {
    long i;
    obj_ptr o;
    esd_ptr s;
    rld_ptr t;
    txt_ptr u;

    s = head;
    while (s) {
        fprintf (f, "%02X %-8s %04X %06X %06X %02X\n",
            s->type, s->name, s->esd, s->address, s->length, s->flag);

        u = s->txt;
        while (u) {
            fprintf (f, " TXT %06X %06X\n", u->address, u->textlen);
            u = u->next;
        }
        i = 0;
        t = s->rld;
        while (t) {
            fprintf (f, " %04X=>%06X", t->esd, t->address);
            t = t->next;
            i++;
            if ((i >= 6) || (t == NULL)) {
                fprintf (f, "\n");
                i = 0;
            }
        }
        s = s->next;
    }
}
*/

#define endmark "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
#define SKIP_MASK ((int) 0x1F)
#define ALIAS_MASK ((int) 0x80)

long get_link (char * infile) {
    char   i Ý64¨;
    char   line Ý256¨;
    char   member Ý9¨;
    char * a;
    char * c;
    FILE * f;
    long   j;
    long   quit;
    int    info_byte;
    short  l;
    short  b;
    short  count;
    short  skip;
    long   rc = -1;

    strcpy (i, infile);
    a = strstr (i, ")");
    c = strstr (i, "(");
    if ((a) && (c) && (a - c > 1)) {
        a Ý0¨ = 0;
        c Ý0¨ = 0;
        c++; // c now points to the member
        strupr (c);

        f = fopen (i, "rb,klen=0,lrecl=256,blksize=256,recfm=u,force");
        if (f) {
            fread (&l, 1, 2, f); /* Skip U length */

            quit = 0;
            while (fread (line, 1, 256, f) == 256) {

                a = &(line Ý2¨);
                b = ((short *)&(line Ý0¨)) Ý0¨;
                count = 2;
                while (count < b) {
                    if (memcmp (a, endmark, 8) == 0) {
                        quit = 1;
                        break;
                    }
                    memcpy (member, a, 8);
                    j = 7;
                    while (member Ýj¨ == ' ') j--;
                    member Ý++j¨ = 0;
                    //a += 8;
                    //i = (((int *)a) Ý0¨) & 0xFFFFFF00; // TTR of member
                    //a += 3; // All this is unused...
                    a += 11;
                    info_byte = (int)(*a);
                    a++;
                    skip = (info_byte & SKIP_MASK) * 2;
                    if (strcmp (c, member) == 0) {
                        if ((info_byte & ALIAS_MASK) != 0)
                            alias = 1;
                        if (skip >= 4) { // User data is present
                            link_edit_data_len = skip;
                            memcpy (link_edit_data, a, skip);
                            rc = (((int *)a) Ý0¨) & 0xFFFFFF00;
                        }
                        quit = 1;
                        break;
                    }
                    a += skip;
                    count += (8 + 4 + skip);
                }
                if (quit) break;
                fread (&l, 1, 2, f); /* Skip U length */
            }
            fclose (f);
        } else {
            printf ("get_link couldn't open the directory\n");
        }
    } else {
        printf ("get_link couldn't determine the member\n");
    }
    return (rc);
}

int main (int argc, char * argv Ý¨) {
    FILE * f;
    FILE * o;
    unsigned char b Ý32768¨; // buffer space for a track
    short l;
    long ttr; // First-text-byte of loadmodule code TTR0 pointer
    long i;
    long rc = 8; // Assume the worst
    long parm = 0;
    long info = 0;

    if ((argc != 3) && (argc != 4) && (argc != 5)) {
        printf ("Usage: DELINK //DSN:MY.LOAD(MYPGM) //DSN:MY.OBJ(MYPGM) {setopt} {info}\n");
        printf ("The setopt flag is optional: object deck will have various options set\n");
        printf ("The info flag is optional: directory flags will be printed\n");
        return (rc);
    }
    i = 3;
    while (i < argc) {
        if (stricmp (argv Ýi¨, "info") == 0) {
            info = 1;
        } else if (stricmp (argv Ýi¨, "setopt") == 0) {
            parm = 1;
        } else {
            printf ("Invalid option specified: %s\n", argv Ýi¨);
            return (rc);
        }
        i++;
    }
    f = fopen (argv Ý1¨, "rb");
    if (f) {
        ttr = get_link (argv Ý1¨);
        if (ttr == -1) {
            fclose (f);
            printf ("get_link(%s) didn't find any user-data\n", argv Ý1¨);
            return (rc);
        }
        glob_p = (pds_ptr)&(link_edit_data Ý0¨);
        epa = (glob_p->epa1 << 16) | (glob_p->epa2 << 8) | glob_p->epa3;
        if (info) {
            //printf ("get_link returned a user-data TTR of %08X\n", ttr);
            i = 0;
            printf ("UserData: ");
            while (i < link_edit_data_len)
                printf ("%02X", link_edit_data Ýi++¨);

            printf ("\nXlated: ");
            if (glob_p->rent)  printf ("RENT ");
            if (glob_p->reus)  printf ("REUS ");
            if (glob_p->ovly)  printf ("OVLY ");
            if (glob_p->test)  printf ("TEST ");
            if (glob_p->load)  printf ("LOAD ");
            if (glob_p->sctr)  printf ("SCATTER ");
            if (glob_p->exec)  printf ("EXEC ");
            if (glob_p->blk1)  printf ("BLOCK ");
            if (glob_p->flvl)  printf ("FLVL ");
            if (glob_p->org0)  printf ("ZERO-ORG ");
            if (glob_p->ep0)   printf ("EP0 ");
            else               printf ("EP%06X ", epa);
            if (glob_p->nrld)  printf ("NRLD ");
            if (glob_p->nrep)  printf ("NREP ");
            if (glob_p->tstn)  printf ("TSTN ");
            if (glob_p->lef)   printf ("LEF ");
            if (glob_p->refr)  printf ("REFR ");
            if (glob_p->ssi)   printf ("SSI ");
            if (glob_p->apflg) printf ("APFLG ");
            if (glob_p->lrmod) printf ("LRMOD ");
            printf ("AMODE=A%d,M%d", glob_p->aamod, glob_p->mamod);
            printf ("\n");
        }

        if (glob_p->sctr) { // Work out aux. pointers, we really only want the APF one though
            glob_sctr = (sctr_ptr)((long)glob_p + 21);
            if (alias)
                glob_alias = (alias_ptr)((long)glob_sctr + 8);
        } else {
            if (alias)
                glob_alias = (alias_ptr)((long)glob_p + 21);
        }
        if (glob_p->ssi) { // ssi
            if (alias) {
                glob_ssi = (ssi_ptr)((long)glob_alias + 11); // Is already half-word aligned
            } else {
                if (glob_p->sctr)
                   glob_ssi = (ssi_ptr)((long)glob_sctr + 9); // 1-extra for halfword alignment
                else
                   glob_ssi = (ssi_ptr)((long)glob_p + 22); // 1 extra for halfword alignment
            }
        }
        if (glob_p->apflg) {       // Find the correct offset:
                              glob_apf = (apf_ptr)((long)glob_p + 21);
            if (glob_p->sctr) glob_apf = (apf_ptr)((long)glob_sctr + 8);
            if (alias)        glob_apf = (apf_ptr)((long)glob_alias + 11);
            if (glob_p->ssi)  glob_apf = (apf_ptr)((long)glob_ssi + 4);
        }
        if ((alias) && (info)) {
            memcpy (b, glob_alias->mnm, 8);
            b Ý8¨ = 0;
            printf ("Information: This is an alias of member: %s\n", b);
        }
        o = fopen (argv Ý2¨, "wb");
        if (o) {
            while (fread (&l, 1, 2, f)) {
                fread (b, 1, l, f);
                if (data) {
                    data = 0;
                    if (splittxt (b, l)) {
                        printf ("Ending due to a detected error\n");
                        goto err;
                    }
                } else {
                    if (process (b, l)) {
                        printf ("Ending due to a detected error\n");
                        goto err;
                    }
                }
            }
            if (make (argv Ý1¨)) { // Build the object
                printf ("Ending due to a detected error\n");
                goto err;
            }
            dump (o, parm, argv Ý1¨); // Pass in the input filename (for the member-name)
            printf ("Object dumped without any errors\n");
            rc = 0; // All OK
err:
            fclose (o);
        } else {
            printf ("Cannot open output file (%s)\n", argv Ý2¨);
        }
        fclose (f);

    } else {
        printf ("Cannot open input file (%s)\n", argv Ý1¨);
    }
    return (rc);
}
