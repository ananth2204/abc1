{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012504000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE624.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE624.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\t'", "DS1TRBAL": "b'a\\x16'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\x8e\\x00\\x05\\x04\\x8e\\x00\\x08\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04c\\x004\\x01 \\x03\\x0f\\x01 \\x03\\x0f\\x10G\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf9@@@'", "ispf": {"version": "04.99", "flags": 0, "createdate": "2020-01-30T00:00:00", "modifydate": "2020-01-30T10:47:34", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-499"}, "text": "REGULAR CBT TAPE - VERSION 499    FILE:  624\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT499.FILE624\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 9 MEMBERS COUNTED; CUMULATIVE SIZE IS 825 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/30/20    10:47:34    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x16\\x01\\x03\\x11O\\x01\\x03\\x12o\\x136\\x00J\\x008\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2003-04-24T00:00:00", "modifydate": "2003-05-06T13:36:16", "lines": 74, "newlines": 56, "modlines": 0, "user": "TS0710"}, "text": "FUNCTION\n========\nSearches for partial or fully entered DSNAME(S) on a list of partial or fully\nstated VOLUME ID's. Creates an ISPF browse-able report (see below for ex.).\nFormat of call : 'TSO FIND PARTIAL.DS PARTIALVOL' -or- 'TSO FIND' (it prompts).\n               : Using \"*\" as a VOLID mask searches ALL DASD.\n\nContents of this CBT entry consist of :\n=====================================\n1. $DOC   - This document\n2. FIND   - A REXX that searches all occurrences of a dsname\n3. TSOUCB - A pgm that scans and prints all UCBs (called when no dsnames found)\n4. ASMUCB - JCL to ASMLK TSOUCB\n\nInstall Instructions\n====================\n1. Copy REXX 'FIND' to an EXEC dataset. If FIND is already used, change its name\n   to something else.\n   * You may have to include 'UNIT(SYSALLDA)' in the four allocations if your\n     SMS environment doesn't support the allocations as they exist in the REXX.\n2. Copy ASSEMBLER pgm TSOUCB to a source dataset.\n3. Copy JCL ASMUCB to a JCL/Utility dataset.\n   * Alter Jobcard.\n   * Alter SRCLIB variable to point to source dataset (see item #2, above).\n   * Alter LODLIB variable to point to a target loadlib.\n4. Submit member ASMUCB. Only RC=0 is acceptable.\n5. If target loadlib is in LNKLST, refresh its pointers to pick it up ..\n   \"F LLA,UPDATE=??\". If target loadlib is NOT in the LNKLST, update REXX\n   Program call for TSOUCB, see near bottom of REXX marked 'P O S S I B L E\n   C H A N G E'.\n6. Ensure IKJTSOxx has IDCAMS as an authorized program.\n   Example :\n     AUTHPGM NAMES(               /* AUTHORIZED PROGRAMS */      +\n        IDCAMS                    /* VSAM                */      +\n     * Copy current IKJTSOxx to IKJTSOyy\n     * Update it as shown above\n     * In option 6 enter \"PARMLIB UPDATE(yy)\"\n     * Make sure IKJTSOxx is also updated for future IPLs\n\nUSE Instructions\n================\nExamples of call\n\n1. \"TSO FIND ABC.D VOLI\"\n   Finds all \"ABC.D**\" datasets on volumes named VOLI**\n2. \"TSO FIND ABC V\"\n   Finds all \"ABC**\" datasets on volumes named V*****\n3. \"TSO FIND ABC.DEF\"\n   Finds all \"ABC.DEF**\" datasets. REXX prompts for volume IDs (full or partial)\n4. \"TSO FIND\"\n   REXX prompts for both DSNAMES & VOLIDs (full or partial)\n5. \"TSO FIND ABC.D *\"\n   REXX prompts to ask if you REALLY mean to search for ABC.D** in ALL DASD.\n                                                                   ---\nSAMPLE \"TSO FIND TSO710 MYVOL\" results\n======================================\n**************************************************************\n* -SYST-                                   04/24/03  13:04:57\n* Search target  : TS0710\n* Search mask    : MYVOL\n**************************************************************\nVolumes Searched : MYVOL1 MYVOL2 MYVOL3 MYVOL9 MYVOLA MYVOLB\nNO. Dataset Hits : 4\nNO. Vols Scanned : 6\nVOLUME  CTLGD ?  DSNAME\n------  -------  ------\nMYVOL1     N     TS0710J.IPCSDDIR.INDEX\nMYVOL1     N     TS0710J.IPCSDDIR.DATA\nMYVOL9     N     TS0710J.JUNK\nMYVOLB     Y     TS0710.LOADLIB\n\n\nFinal Note : a volid of ****** will search only the SYSRES volume.\n----- ----\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$LOADLIB": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x18\\x01 \\x03\\x0f\\x01 \\x03\\x0f\\x10C\\x00&\\x00&\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-01-30T00:00:00", "modifydate": "2020-01-30T10:43:18", "lines": 38, "newlines": 38, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "$README": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00W\\x01\\x03\\x12\\x0f\\x01 \\x03\\x0f\\x10C\\x00\\r\\x00\\x0f\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-04-30T00:00:00", "modifydate": "2020-01-30T10:43:57", "lines": 13, "newlines": 15, "modlines": 0, "user": "SBGOLOB"}, "text": "Important Note for the FIND REXX to be able to run correctly.\n\n  A \"CALL IDCAMS\" TSO command will have to call IDCAMS in\n  APF authorized mode.  This is accomplished by putting an\n  entry for IDCAMS in the active IKJTSOxx member in PARMLIB,\n  in the AUTHPGM NAMES( ) section.  Also, you can see CBT\n  Tape files 185 and 186 for a way to accomplish this APF\n  authorization for a limited group of users, or for yourself\n  only.  Or you can use a PARMLIB TSO command, if you have\n  authority to do so.\n\n  Note by Sam Golob - 04/30/03      sbgolob@cbttape.org\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE624": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x04c\\x00'\\x01 \\x03\\x0f\\x01 \\x03\\x0f\\x10G\\x00\\x16\\x00\\x16\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf9@@@\"", "ispf": {"version": "04.99", "flags": 0, "createdate": "2020-01-30T00:00:00", "modifydate": "2020-01-30T10:47:27", "lines": 22, "newlines": 22, "modlines": 0, "user": "CBT-499"}, "text": "//***FILE 624 is from Bob Glover and contains a very useful TSO     *   FILE 624\n//*           REXX command to FIND datasets by name, whether they   *   FILE 624\n//*           are cataloged or not, on a given set of disk packs.   *   FILE 624\n//*           There is also a standalone command included, called   *   FILE 624\n//*           TSOUCB, which will display all the disk packs in      *   FILE 624\n//*           your system by their names.  TSOUCB is sometimes      *   FILE 624\n//*           used in conjunction with the FIND REXX, but it will   *   FILE 624\n//*           also function by itself.                              *   FILE 624\n//*                                                                 *   FILE 624\n//*           An important note in running this FIND REXX, is that  *   FILE 624\n//*           your TSO session has to be able to issue              *   FILE 624\n//*                                                                 *   FILE 624\n//*              CALL IDCAMS                                        *   FILE 624\n//*                                                                 *   FILE 624\n//*           in APF authorized mode.  For this to happen, you      *   FILE 624\n//*           have to include the name IDCAMS in your AUTHPGM       *   FILE 624\n//*           NAMES( ) section of IKJTSOxx in PARMLIB, or the       *   FILE 624\n//*           equivalent.  See member $README for mention of some   *   FILE 624\n//*           other ways to accomplish the same thing.              *   FILE 624\n//*                                                                 *   FILE 624\n//*           email:  Bob.Glover@fnf.com                            *   FILE 624\n//*                                                                 *   FILE 624\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ASMUCB": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x008\\x00\\x98\\x07\\x8f\\x01\\x03\\x11\\x9f\\t\\x02\\x00/\\x008\\x00\\n\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1998-03-19T00:00:00", "modifydate": "2003-04-29T09:02:38", "lines": 47, "newlines": 56, "modlines": 10, "user": "TS0710"}, "text": "//...YOUR JOB CARD HERE...\n//*\n//* ASMLK PGM (NAME=TSOUCB)\n//*\n//ASMLK  PROC  AREGION=2048K,\n//             LREGION=2048K,\n//             UNIT='SYSALLDA',\n//             CLASS='*',\n//             SYSLIB1='SYS1.MACLIB',\n//             SYSLIB2='SYS1.MODGEN',\n//             SRCLIB=TEMPNAME,\n//             LODLIB=TEMPNAME,\n//             RENT='NO',  /* ENTER RENT=NO FOR NON REENTRANT */\n//             SRCMOD='TEMPNAME',\n//             LODMOD='TEMPNAME'\n//*\n//ASM    EXEC  PGM=IEV90,PARM='NODECK,OBJECT,&RENT.RENT',\n//             REGION=&AREGION\n//SYSLIB   DD  DSN=&SYSLIB1.,DISP=SHR\n//         DD  DSN=&SYSLIB2.,DISP=SHR\n//SYSIN    DD  DSN=&SRCLIB.(&SRCMOD.),DISP=SHR\n//SYSUT1   DD  UNIT=(&UNIT.,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  DUMMY\n//SYSPRINT DD SYSOUT=&CLASS.,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSALLDA,SPACE=(CYL,(5,5,0)),\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//*\n//LNK  EXEC  PGM=IEWL,\n//  PARM='MAP,LET,LIST,NCAL,&RENT.RENT,AMODE=24,RMODE=24',\n//             REGION=&LREGION.,COND=(0,LT,ASM)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=&LODLIB.(&LODMOD.),DISP=SHR\n//SYSUT1   DD  UNIT=&UNIT.,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=&CLASS.,DCB=(RECFM=FB,BLKSIZE=3509)\n// PEND\n//*\n//STEP1 EXEC ASMLK,CLASS='*',\n//           RENT='NO',   /* ''=RENT, 'NO'=NON-RENT */\n//           SRCLIB='...YOUR SOURCE LIB HERE...',\n//           LODLIB='...YOUR LOADLIB HERE...',\n//           SRCMOD=TSOUCB,\n//           LODMOD=TSOUCB\n//*-------------------------------------\n//LNK.SYSIN  DD *\n  NAME TSOUCB(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FIND": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x005\\x01\\x03\\x12/\\x01\\x03\\x12_\\x15@\\x01T\\x01>\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0\\xd1@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2003-05-02T00:00:00", "modifydate": "2003-05-05T15:40:35", "lines": 340, "newlines": 318, "modlines": 0, "user": "TS0710J"}, "text": "/* REXX */\n/* FIND a Dataset - using volid mask as search criterion */\n/*                  \"*\" searches ALL DASD volumes        */\nmsg_status = MSG('OFF')\nmyid=SYSVAR(SYSUID)\nparse upper arg dsn vol\nvolx=1\nmydate=date('U')\nmytime=time()\nCVTSNAME   = D2X(C2d(Storage(10,4)) + 340)      /* Point to CVTSNAME */\nSysid      = strip(Storage(CVTSNAME,8))         /* SYSID             */\ncylpri=20                                       /* rpt file size-pri */\ncylsec=20                                       /* rpt file size-sec */\n/*================ M A I N L I N E ======================*/\ncall getargs           /* secure dsname/volid mask       */\ncall cleanup           /* cleanup temp datasets          */\ncall allocate          /* allocate DCOLLECT ds's         */\ncall bldinput          /* build DCOLLECT input stmnts    */\ncall dcollect          /* execute DCOLLECT               */\ncall scan              /* read DCOLLECT output           */\ncall bldoutput         /* build volser output            */\ncall view              /* view report                    */\ncall cleanup2          /* cleanup temp datasets          */\ncall goodbye           /* issue parting message          */\nexit\n/*=================S U B R O T I N E S ==================*/\n/*================ OBTAIN DSNAME AND VOLID MASK =========*/\nGETARGS:\n  maskdsn=strip(dsn,b,\" \")\n  maskdsn=strip(maskdsn,b,\"'\")\n  if maskdsn /= '' then\n    do\n      if maskdsn = '?' then\n        signal showucbs\n      x=SYSDSN(dsn)\n      if pos('INVALID',x) /= 0 then\n        do\n          say 'Dsname invalid ...'\n          dsn = ''\n        end\n    end\n  if dsn = '' then\n    do forever\n      say 'Enter Dataset name to search (1-44 chars), partial is OK'\n      parse upper pull dsn\n      maskdsn=strip(dsn,b,\" \")\n      maskdsn=strip(maskdsn,b,\"'\")\n      if maskdsn = '?' then\n        signal showucbs\n      x=SYSDSN(maskdsn)\n      if pos('INVALID',x) /= 0 then\n        iterate\n      else\n        leave\n    end\n  if vol = '' then\n    do forever\n     say 'Enter VOL mask (1-6 chars), partial is OK (\"*\" for ALL DASD)'\n      parse upper pull vol\n      maskvol=strip(vol,b,\" \")\n      if maskvol /= '' then\n          leave\n    end\n  else\n    maskvol=vol\n  dsnlen=length(maskdsn)\n  vollen=length(maskvol)\n  maskvol2=maskvol\n  if maskvol /= '*' then\n    if vollen < 6 then\n      maskvol2=maskvol||'*'\n  if maskvol2='*' then\n    do forever\n      say 'You are asking to search ALL volumes. Are you sure ? (Y/N)'\n      parse upper pull YN\n      if YN /= 'N' then\n        if YN /= 'Y' then\n          do\n            say '-- RESPONSE invalid --'\n            say ' '\n            iterate\n          end\n      if yn = 'N' then\n        do\n          call cleanup\n          call goodbye\n          exit\n        end\n      else\n        do\n          cylpri=200   /* enlarge rpt size when asking for all dasd */\n          cylsec=200\n          leave\n        end\n    end\nreturn\n/* =================== ALLOCATE DCOLLECT DS =======================*/\nALLOCATE:\n  ADDRESS TSO\n  \"ALLOC F(SYSIN) DA('\"myid\".DC.SYSIN') SPACE(1,1) TRACKS NEW\n         CATALOG REUSE RECFM(F) BLKSIZE(80) UNIT(SYSALLDA)\"\n  if rc \u00ac= 0 then\n    do\n      say DCOLLECT SYSIN ' NOT ALLOCATED .... Check error'\n      say 'dataset : 'myid'.DC.SYSIN'\n      call cleanup\n      exit\n    end\n  \"ALLOC F(SYSPRINT) DA('\"myid\".DC.SYSPRINT') SPACE(2,1) CYLINDERS\n     NEW CATALOG REUSE RECFM(F) BLKSIZE(133) UNIT(SYSALLDA)\"\n  if RC \u00ac= 0 then\n    do\n      say 'DCOLLECT SYSPRINT dataset allocation error !'\n      say 'dataset : 'myid'.DC.SYSPRINT'\n      call cleanup\n      exit\n    end\n  \"ALLOC F(DCOUT) DA('\"myid\".DC.DCOUT') SPACE(\"cylpri\",\"cylsec\")\n     cylinders NEW CATALOG REUSE RECFM(V,B) LRECL(768) BLKSIZE(27998)\n     UNIT(SYSALLDA)\"\n  if RC \u00ac= 0 then\n    do\n      say 'DCOLLECT OUTPUT dataset allocation error !'\n      say 'dataset : 'myid'.DC.DCOUT'\n      call cleanup\n      exit\n    end\n  \"ALLOC F(REPORT) DA('\"myid\".DC.REPORT') SPACE(1,1) CYLINDERS\n     NEW CATALOG REUSE RECFM(F,B) LRECL(80) BLKSIZE(7200)\n     UNIT(SYSALLDA)\"\n  if RC \u00ac= 0 then\n    do\n      say 'REPORT OUTPUT dataset allocation error !'\n      say 'dataset : 'myid'.DC.REPORT'\n      call cleanup\n      exit\n    end\nreturn\n/* =================== BUILD/WRITE DCOLLECT INPUT =================*/\nBLDINPUT:\n  d.1 ='  DCOLLECT -'\n  d.2 ='       OUTFILE(DCOUT) -'\n  d.3 ='       VOLUMES( -'\n  d.4 ='               ' maskvol2 ' -'\n  d.5 ='               )'\n  \"EXECIO * DISKW SYSIN (STEM d. FINIS\"\nreturn\n/* =================== EXEC DCOLLECT ==============================*/\nDCOLLECT:\n  ADDRESS TSO \"CALL 'SYS1.LINKLIB(IDCAMS)'\"\n  if RC > 4 then\n    do\n      say 'DCOLLECT error ! RC='rc\n      \"ISPEXEC BROWSE DATASET('\"myid\".DC.SYSPRINT')\"\n      call cleanup\n      exit\n    end\nreturn\n/* =================== SCAN DCOLLECT OUTPUT =======================*/\nSCAN:\n  vl=1\n  #vols=0\n  rc=0\n  say ' S C A N N I N G . . .'\n  say ' P l e a s e   W a i t'\n  do while RC=0\n    \"EXECIO 1 DISKR DCOUT\"\n    if rc /=0 then\n      do\n        \"EXECIO 0 DISKR DCOUT (FINIS\"\n        leave\n      end\n    PULL RECORD\n    if substr(RECORD,5,1)   = 'V' then\n      do\n        hotvol=substr(RECORD,25,6)\n        #vols=#vols+1\n        call storvols\n        iterate\n      end\n    if substr(RECORD,5,1)  = 'D'  then\n      do\n        if substr(RECORD,25,dsnlen) = maskdsn then\n          do\n            hotdsn=substr(record,25,44)\n            rec.vl=hotvol||hotdsn\n            vl=vl+1\n          end\n      end\n  end\nreturn\n/* =================== Store VOLIDS ===============================*/\nSTORVOLS:\n  do x=1 to volx by 1\n    if voltb.volx = hotvol then return\n  do\n    voltb.volx=hotvol\n    volx=volx+1\n  end\n  return\n/* =================== BUILD FINAL OUTPUT =========================*/\nBLDOUTPUT:\n  if vl=1 then\n    do\n      say '*========================================================'\n      say '* NO hits for :'\n      say '*              DSN ='dsn\n      say '*              MASK='vol\n      say '*========================================================'\n      say 'Do you wish to see ALL AVAIL VOLSERS in the system ? (Y/N)'\n      do forever\n        parse upper pull YN\n        if YN /= 'Y' then\n        if YN /= 'N' then\n          do\n            say '-- RESPONSE invalid --'\n            say ' '\n            iterate\n          end\n        if yn = 'Y' then\n          do\n            call showucbs  /* ucb scan/display */\n            return\n          end\n        call cleanup\n        exit\n      end\n    end\n/*=========*/\n  pt.1 = '**************************************************************'\n  pt.2 = '* -'Sysid'-                                   'mydate'  'mytime\n  pt.3 = '* Search target  : 'dsn\n  pt.4 = '* Search mask    : 'vol\n  pt.5 = '**************************************************************'\n  pt.6 = ' '\n  ptx=6\n  voltbx=1\n  totvols=#vols\n  #lines=#vols/6\n  #lines=format(#lines,4,0)\n  if #lines = 0 then #lines = 1\n  sfx='Volumes Searched : '\n  do x = 1 to #lines by 1        /* outer */\n    vlx=#vols-6\n    if vlx < 1 then\n      vlx=#vols\n    else\n      vlx=6\n    do y = 1 to vlx by 1        /* inner */\n      sfx=sfx || substr(voltb.voltbx,1,6) || ' '\n      voltbx=voltbx+1\n    end\n    ptx=ptx+1\n    pt.ptx=sfx\n    sfx='                   '\n    #vols=#vols-6\n  end\n  ptx=ptx+1\n  pt.ptx = ' '\n  ptx=ptx+1\n  pt.ptx = 'NO. Dataset Hits : 'vl-1\n  ptx=ptx+1\n  pt.ptx = 'NO. Vols Scanned : 'totvols\n  ptx=ptx+1\n  pt.ptx = ' '\n  ptx=ptx+1\n  pt.ptx = 'VOLUME  CTLGD ?  DSNAME'\n  ptx=ptx+1\n  pt.ptx = '------  -------  ------'\n  rp=ptx\n  vl=vl-1\n  do x1=1 to vl by 1\n    ptvol=substr(rec.x1,1,6)\n    ptdsn=strip(substr(rec.x1,7,44))\n    ptdsn=\"'\"||ptdsn\n    ptdsn=ptdsn||\"'\"\n    rc=listdsi(ptdsn)\n    if sysreason = 0 then\n      ptcat='  Y    '\n    else\n      ptcat='  N    '\n    rp=rp+1\n    pt.rp = ptvol  ' ' ptcat   ptdsn\n  end\nreturn\n/* =================== VIEW Report ================================*/\nVIEW:\n  address TSO\n  'EXECIO  *  DISKW REPORT (STEM pt. FINIS)'\n  \"ISPEXEC BROWSE DATASET('\"myid\".DC.REPORT')\"\nreturn\n/* =================== CLEANUP FILES ==============================*/\nCLEANUP:\n  address TSO\n  \"FREE FI(SYSIN,SYSPRINT,DCOUT,REPORT)\"\n  \"DELETE ('\"myid\".DC.SYSIN')\"\n  \"DELETE ('\"myid\".DC.SYSPRINT')\"\n  \"DELETE ('\"myid\".DC.DCOUT')\"\n  \"DELETE ('\"myid\".DC.REPORT')\"\nreturn\n/* =================== CLEANUP FILES (minus report) ===============*/\nCLEANUP2:\n  address TSO\n  \"FREE FI(SYSIN,SYSPRINT,DCOUT,REPORT)\"\n  \"DELETE ('\"myid\".DC.SYSIN')\"\n  \"DELETE ('\"myid\".DC.SYSPRINT')\"\n  \"DELETE ('\"myid\".DC.DCOUT')\"\nreturn\n/* =================== CLEANUP FILES ==============================*/\nGOODBYE:\n  say ' '\n  say ' '\n  say '***'\n  say 'REXX Complete'\nreturn\n/* ///////////////////////////////////////////////////////////////////// */\n/* ///////////////////////////////////////////////////////////////////// */\nSHOWUCBS:\n  /* Display all dasd volids */\n  address ispexec\n  ADDRESS TSO\n    \"FREE FI(ERRORS,VOLSERS)\"\n    \"DELETE ('\"myid\".UCB.ERRORS')\"\n    \"DELETE ('\"myid\".UCB.VOLSERS')\"\n    \"ALLOC FI(ERRORS) DA('\"myid\".UCB.ERRORS') NEW CATALOG\n           SPACE(1,1) TRACKS RECFM(F) BLKSIZE(80)\"\n    \"ALLOC FI(VOLSERS) DA('\"myid\".UCB.VOLSERS') NEW CATALOG\n           SPACE(2,1) TRACKS RECFM(F) BLKSIZE(80)\"\n/*=================== P O S S I B L E  C H A N G E ===========================*/\n  ADDRESS LINKPGM \"TSOUCB\"  /* use this if TSOUCB in LINKLIST*/\n/*ADDRESS TSO \"CALL 'Your.LOADLIB(TSOUCB)'\" use this if TSOUCB not in linklist*/\n/*=================== P O S S I B L E  C H A N G E ===========================*/\n  if rc = 0 then\n    \"ISPEXEC BROWSE DATASET('\"myid\".UCB.VOLSERS')\"\n  else\n    \"ISPEXEC BROWSE DATASET('\"myid\".UCB.ERRORS')\"\n  \"DELETE ('\"myid\".UCB.ERRORS')\"\n  \"DELETE ('\"myid\".UCB.VOLSERS')\"\n  \"FREE FI(VOLSERS,ERRORS)\"\nexit\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOUCB": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x15\\x00\\x98\\x07\\x7f\\x01 \\x03\\x0f\\x107\\x00\\xfc\\x00g\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "1998-03-18T00:00:00", "modifydate": "2020-01-30T10:37:15", "lines": 252, "newlines": 103, "modlines": 0, "user": "SBGOLOB"}, "text": "*=====================================================================*\n* TSOUCB : INPUT  = NONE                                              *\n*          OUTPUT = DATASET W/ ALL AVAILABLE VOLSERS (SORTED)         *\n*                                                                     *\n*          2 DD'S MUST BE ALLOCATED PRIOR TO PGM ENTRY :              *\n*            \"ERRORS\" : REPORTS ANY UNTOWARD ACTIVITY                 *\n*            \"VOLSERS\": VOLSER REPORT                                 *\n*                                                                     *\n* THIS CAN BE EXPANDED TO PLACE OTHER INFO BESIDES THE VOLSERS INTO   *\n* THE PRINT LINES.                                                    *\n*                                                                     *\n* UPDATE:  01/30/20 - SAM GOLOB                                       *\n*          MADE DCB'S HAVE LRECL=80 TO AVOID GARBAGE ON A LINE,       *\n*          IF THE ALLOCATED LINE WAS WIDER THAN 80 BYTES.             *\n*=====================================================================*\nTSOUCB   CSECT\n         USING *,R15\n         B     AROUND\n         DC    AL1(23)\n         DC    CL9'&SYSDATE'\n         DC    CL5'&SYSTIME'\nAROUND   DS    0H\n         STM   R14,R12,12(R13)\n         ST    R13,SAVEAREA+4\n         LA    R7,SAVEAREA\n         ST    R7,8(R13)\n         LA    R13,SAVEAREA\n         DROP  R15\n         USING SAVEAREA,R13\n         B     BEGIN\nSAVEAREA DC    18F'0'\nBEGIN    DS    0H\n         L     R3,CORE                 R5 ==> GETMAIN SIZE\n         GETMAIN EC,LV=(R3),A=AUCBS    GET STORAGE\n         LTR   R15,R15                 CORE AQUIRED ?\n         BNZ   MAINERR                 NOPE...\n         L     R5,16(R0)               R5 ==> A(CVT)\n         USING CVT,R5\n         MVC   MYSYSID(4),CVTSNAME     SAVE SYSID\n         DROP  R5\n         L     R4,AUCBS                R4 ==> A(GETMAINED AREA)\n         LR    R6,R4                   R6 DITTO\n         AR    R4,R3                   R4 ==> A(END GETMAIN AREA)\n         BCTR  R4,0                    -1\n         ST    R4,ATOOFAR              SAVE IT\n         LA    R5,UCBAREA              DSECT THE UCB\n         USING UCB,R5\n         SR    R9,R9                   VOLID CTR\nUCBLOOP  EQU   *\n         PRINT NOGEN\n         UCBSCAN COPY,WORKAREA=UCBWORK,UCBAREA=UCBAREA,DEVN=0,         X\n               DYNAMIC=YES,RANGE=ALL,DEVCLASS=DASD\n         PRINT GEN\n         LTR   R15,R15                 SCAN END ?\n         BNZ   SCANEND                 YES..END OF SCAN\n         C     R6,ATOOFAR              BUSTING OUT OF GETMAIN ?\n         BNL   TOOMANY                 YUP...ERR\n         CLI   UCBVOLI,C'A'            VALID VOLSER ?\n         BL    UCBLOOP                 NO..DROP UCB\n         MVC   0(6,R6),UCBVOLI         SAVE VOLSER\n         DROP  R5\n         LA    R9,1(R9)                BUMP CTR\n         LA    R6,6(R6)                BUMP TO NEXT SLOT\n         B     UCBLOOP                 RETURN TO CALL NEXT UCB\n         SPACE 3\nSCANEND  EQU   *\n         ST    R6,AEND                 SAVE A(LASTVOLSER+6)\n         ST    R9,#VOLIDS              SAVE #VOLIDS\n***\n* ALL UCB VOLSERS OBTAINED\n* SORT VOLSERS BY ASCENDING ORDER\n***\nSTRTSORT EQU   *\n         LM    R3,R5,SORTPTRS\n         MVC   0(6,R5),=8C'9'\n         SR    R5,R4\nBUBBLOOP EQU   *\n         LR    R2,R3\nEXCHLOOP EQU   *\n         CLC   0(6,R3),6(R2)         BUBBLE SORT\n         BNH   ENDEXCH               *\n         MVC   SORTNAME(6),0(R3)     *\n         MVC   0(6,R3),6(R2)         *\n         MVC   6(6,R2),SORTNAME      *\nENDEXCH  EQU   *\n         BXLE  R2,R4,EXCHLOOP\n         BXLE  R3,R4,BUBBLOOP\n         SPACE\n***\n* WRITE VOLSERS TO DS\n***\n         SPACE\n         OPEN  (VOLSERS,(OUTPUT))\n         L     R6,AUCBS                R1=A(GETMAIN/VOLIDS)\n         L     R5,#VOLIDS              R5=#ENTRIES\n         LA    R7,5                    R7=#ENTRIES PER PT LINE\n         LA    R8,WORKA+1              R8=A(PT LINE)\n         CVD   R5,DOUB\n         MVC   TITLE+28(L'MASK),MASK\n         ED    TITLE+28(L'MASK),DOUB+5\n         BAL   R11,TOF                 HEADERS\n*\n         LA    R7,10                   R7=#ENTRIES PER PT LINE\nINNERS   EQU   *\n         MVC   0(6,R8),0(R6)           VOL TO PT LINE\n         LA    R6,6(R6)                BUMP VOL PTR\n         LA    R8,8(R8)                BUMP PT LINE PTR\n         BCT   R5,OUTERS               WHEN > 0 BRANCH\n         B     FINAL                   WHEN = 0 ... EXIT\nOUTERS   EQU   *\n         BCT   R7,INNERS               FILL PT LINE\n         BAL   R11,WRITEIT             WRITE PT LINE\n         CP    LINECNT,=P'60'          60 LINES PRINTED ?\n         BL    SAMEPGS                 NO\n         BAL   R11,TOF                 YES..DO TOF\nSAMEPGS  EQU   *\n         LA    R7,10                   RELOAD PT CTR\n         LA    R8,WORKA+1              R7=A(PT LINE)\n         B     INNERS                  START PT FOR NXT LINE\n         B     EXIT\nFINAL    EQU   *                       NO MO UCB'S\n         BAL   R11,WRITEIT             WRITE PT LINE\n         CLOSE (VOLSERS)\n         XC    RC,RC                   SET RC0\n         B     EXIT\n         SPACE\nEXIT     EQU   *\n         FREEMAIN EU,LV=60000,A=AUCBS\n         L     R15,RC\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=(15)        RC IN R15\n         LTORG\n         SPACE 5\n***\n* TOF - TOP OF FORMS\n***\n         SPACE\n         DC    CL8'TOF',F'0'\nTOF      ST    R11,TOF-4\n         BAL   R11,WRITEIT\n         MVC   WORKA(L'DASHES),DASHES\n         BAL   R11,WRITEIT\n         MVC   WORKA(L'TITLE),TITLE\n         BAL   R11,WRITEIT\n         MVC   WORKA(L'DASHES),DASHES\n         BAL   R11,WRITEIT\n         BAL   R11,WRITEIT\n         ZAP   LINECNT,=P'5'\n         L     R11,TOF-4\n         BALR  R11,R11\n         SPACE 3\n***\n* WRITEIT - WRITE VOLID INFO\n***\n         SPACE\n         DC    CL8'WRITEIT',F'0'\nWRITEIT  ST    R11,WRITEIT-4\n         PUT   VOLSERS,WORKA\n         MVC   WORKA+1(79),WORKA         CLEAR PT LINE\n         AP    LINECNT,=P'1'\n         L     R11,WRITEIT-4\n         BALR  R11,R11\n         SPACE 3\n***\n* MAINERR - GETMAIN ERROR\n***\n         SPACE\n         DC    CL8'MAINERR',F'0'\nMAINERR  ST    R11,MAINERR-4\n         ST    R15,RC\n         OPEN  (ERRORS,(OUTPUT))\n         CVD   R15,DOUB                  RC\n         UNPK  ERR1+17(4),DOUB+5(3)\n         OI    ERR1+20,X'F0'\n         MVC   WORKA(L'ERR1),ERR1\n         PUT   ERRORS,WORKA\n         MVC   RC(4),=F'12'\n         CLOSE (ERRORS)\n         B     EXIT\n         SPACE 3\n***\n* TOOMANY - TOO MANY UCB'S IN THE SYSTEM FOR OUR TABLE\n***\n         SPACE\nTOOMANY  EQU   *\n         OPEN  (ERRORS,(OUTPUT))\n         MVC   WORKA(L'ERR2),ERR2\n         PUT   ERRORS,WORKA\n         CLOSE (ERRORS)\n         MVC   RC(4),=F'12'\n         B     EXIT\n         SPACE 3\n         LTORG\n         EJECT\n*=====================================================================*\n*                         W O R K  A R E A S                          *\n*=====================================================================*\n         SPACE\nUCBWORK  DC    XL100'00'\nUCBAREA  DS    CL48\nLINECNT  DC    PL2'0'\nMASK     DC    X'402020202120'\nTRTAB    DC    C'0123456789ABCDEF'\nERR1     DC    C' GETMAIN ERR,R15=XXXX'\nERR2     DC    C' # UCBS EXCEEDS PROGRAM''S TABLE SIZE ... ENLARGE'\nDASHES   DC    C' ************'\nTITLE    DC    C' *          *  NO. VOLIDS  :XXXXXX'\n         ORG   TITLE+3\nMYSYSID  DS    CL8\n         ORG\nCORE     DC    F'60000'     GETMAIN SIZE (MAX=10000 UCB'S)\nRC       DC    F'0'\nWORKA    DC    CL80' '\nDOUB     DS    D\nATOOFAR  DS    A\n*\nSORTPTRS DS    0D\nAUCBS    DS    A     R3\nNAMELEN  DC    F'6'  R4\nAEND     DS    A     R5\n#VOLIDS  DC    F'0'\nSORTNAME DC    CL6' '\n*\n         DS   0D\n         PRINT NOGEN\nERRORS   DCB  DDNAME=ERRORS,DSORG=PS,MACRF=PM,LRECL=80\nVOLSERS  DCB  DDNAME=VOLSERS,DSORG=PS,MACRF=PM,LRECL=80\n         SPACE 5\n*=====================================================================*\n*                            D S E C T S                              *\n*=====================================================================*\n         SPACE 3\nUCB      DSECT\n         IEFUCBOB\nMYCVT    CVT   DSECT=YES,LIST=YES\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOUCB$": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00Y\\x01 \\x03\\x0f\\x01 \\x03\\x0f\\x10#\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-01-30T00:00:00", "modifydate": "2020-01-30T10:23:59", "lines": 27, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(TSOUCB)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   TSOUCB\n SETSSI  CB499624\n ENTRY   TSOUCB\n NAME    TSOUCB(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT624/FILE624.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT624", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}