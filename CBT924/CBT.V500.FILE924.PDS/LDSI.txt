/* REXX */
/* ------------------------------------------------------------------ */
/*                      File Information                              */
/*                                                                    */
/* In 3.4, gives attributes of a multi-volume dataset                 */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* ------------------------------------------------------------------ */
Signal main
/*                                                                    */
/*                                                                    */
/* ------------------------------------------------------------------ */
/*                  Procedure Division                                */
/* ------------------------------------------------------------------ */
/*                                                                    */
/*                                                                    */
/* ------------------------------------------------------------------ */
/*                  Procedure: DO_ATTRIB                              */
/*                  Does basic DSN attribute info                     */
/* ------------------------------------------------------------------ */
/*                                                                    */
DO_ATTRIB: procedure expose cyls SYSLRECL SYSRECFM SYSLRECL,
           SYSBLKSIZE SYSEXTENTS SYSDSORG SYSREASON
   ARG dsn

  x = listdsi("'"dsn"'" )

  if SYSREASON = 3 | SYSREASON = 5 | SYSREASON = 9 | SYSREASON = 22 |,
    SYSREASON = 24 | SYSREASON = 25 then do
        SYSDSORG = ??
        SYSRECFM = ??
        SYSLRECL = ??
        SYSBLKSIZE = ??
        SYSEXTENTS = ??
      end /* End if SYSREASON */

  Say 'ATTRIBUTES:'
  say '-----------'

  say 'DATASET ORGANIZATION:' SYSDSORG '    RECORD FORMAT:' SYSRECFM
  say 'LRECL:               ' SYSLRECL
  say 'BLOCK SIZE:          ' SYSBLKSIZE
  say 'EXTENTS:             ' SYSEXTENTS

  say '   '

return    /* end Calculate_CYLS  */
/*                                                                    */
/*                                                                    */
/*                                                                    */
/* ------------------------------------------------------------------ */
/*                  Procedure: DO_TAPE_ATTRIB                         */
/*                  Does basic DSN attribute info for TAPE DSN's      */
/* ------------------------------------------------------------------ */
/*                                                                    */
DO_TAPE_ATTRIB: procedure
   ARG dsn

  x = listdsi("'"dsn"'" )

   DSNAME = "'"dsn"'"
   OPFLAG = 'NO'

   Z = OUTTRAP('DDN.')
   "LISTC ENTRY("DSNAME") ALL"
   "NEWSTACK"
    Do X = 1 to DDN.0
       LINE = DDN.X                    /* get HI-ALLOC and USED lines */
       SELECT
         When substr(LINE,8,6) = 'VOLSER' then do
              VOLSER = substr(LINE,21,12)
              VOLSER = strip(VOLSER)
              VOLSER = strip(VOLSER,b,'-')
              DEVUNIT = substr(LINE,45,20)
              DEVUNIT = strip(DEVUNIT)
              DEVUNIT = strip(DEVUNIT,l,'-')
          End   /* End KEYLEN       */
         Otherwise NOP
       End /* End SELECT  */
    End /* End X counter */
   Z = OUTTRAP('OFF')
    DEVUNIT = substr(DEVUNIT,7,4)
    Select
       When DEVUNIT = 8080 then DEVICE = 3480
       When DEVUNIT = 8081 then DEVICE = 3490
       Otherwise DEVICE = DEVUNIT
    End /* End select */

  Say 'DATASET IS ON TAPE:'  dsn
  say '-------------------'

  say 'VOLSER: 'VOLSER '       ',
      'DEVICE TYPE: 'DEVICE

return    /* end DO_TAPE_ATTRIB  */
/*                                                                    */
/*                                                                    */
/* ------------------------------------------------------------------ */
/*                  Procedure: DO_V_ATTRIB                            */
/*                  Does basic DSN attribute info                     */
/* ------------------------------------------------------------------ */
/*                                                                    */
DO_V_ATTRIB: procedure
   ARG dsn

  STPSET = 0
  AIXCHK = 0
  STACHK = 0
  PTHCHK = 0
   DSNAME = "'"dsn"'"
   zlag = 1
   i_count = 0
   OPFLAG = 'NO'         /* Counter for OPTIONS */

   Z = OUTTRAP('DDN.')
   "LISTC ENTRY("DSNAME") ALL"
   "NEWSTACK"
    Do X = 1 to DDN.0
     If zlag = 1 then do
       LINE = DDN.X                    /* get HI-ALLOC and USED lines */
       SELECT
         WHEN SUBSTR(LINE,8,6) = 'PATH--' THEN DO
              PTHCHK  = '1'
          End   /* End aixchk       */
         WHEN SUBSTR(LINE,8,6) = 'AIX---' THEN DO
              AIXCHK  = '1'
          End   /* End aixchk       */
         When substr(LINE,8,6) = 'KEYLEN' then do
              KEYLEN1 = substr(LINE,21,12)
              KEYLEN2 = strip(KEYLEN1)
              KEYLEN = strip(KEYLEN2,b,'-')
              AVG1 = substr(LINE,45,20)
              AVG2 = strip(AVG1)
              AVGRECL = strip(AVG2,b,'-')
              DCISZ = substr(LINE,102,19)
              DCISZ = strip(DCISZ)
              DCISZ = strip(DCISZ,b,'-')
          End   /* End KEYLEN       */
         WHEN SUBSTR(LINE,8,3) = 'RKP' THEN DO
              OFF1 = substr(line,21,12)
              OFF2 = strip(OFF1)
              OFFSET = strip(OFF2,b,'-')
              MAX1 = substr(LINE,45,20)
              MAX2 = strip(MAX1)
              MAXRECL = strip(MAX2,b,'-')
         End    /* End rkp  */
         WHEN SUBSTR(LINE,8,12) = 'STRIPE-COUNT' THEN DO
              STP1 = SUBSTR(LINE,21,12)
              STP2 = STRIP(STP1)
              STPSET = STRIP(STP2,B,'-')
         End    /* End strip count  */
         When substr(LINE,8,9) = 'REC-TOTAL' then do
              REC1 = substr(line,21,12)
              REC2 = strip(REC1)
              REC3 = strip(REC2,b,'-')
              RECTOT = strip(REC3,b,'*')
         End    /* End REC-TOTAL    */
         WHEN SUBSTR(LINE,6,13) = 'STATISTICS  (' THEN DO
              STACHK  = '1'
              OPFLAG = 'NO'
          END   /* END AIXCHK       */
         When substr(LINE,6,10) = 'STATISTICS' then do
              OPFLAG = 'NO'
         End /*  End STATISTICS  */
         When OPFLAG = 'YES' then do
              COUNT = COUNT + 1
              OTHER.COUNT = strip(LINE,b,' ')
         End /* End OPFLAG  */
         When substr(LINE,8,8) = 'SHROPTNS' then do
              COUNT   = 1
              OTHER.COUNT = strip(LINE,b,' ')
              OPFLAG = 'YES'
         End  /* END SHROPTNS  */
         When substr(LINE,37,13) = 'FREESPACE-%CI' then do
              FREE1 = substr(line,52,10)
              FREE1 = strip(FREE1,l,'-')
              FREE1 = strip(FREE1,b,' ')
              FREE1 = STRIP(FREE1,B,'*')
         End  /* END FREE-CI   */
         When substr(LINE,37,13) = 'FREESPACE-%CA' then do
              FREE2 = substr(line,52,10)
              FREE2 = strip(FREE2,l,'-')
              FREE2 = strip(FREE2,b,' ')
              FREE2 = STRIP(FREE2,B,'*')
              zlag = 0         /* Change FLAG to 0 after 1st vsam inf */
         End  /* END SHROPTNS  */
         Otherwise NOP
       End /* End SELECT  */
     End /* END FLAG */
/*   For index portion                             */
     LINE = DDN.X
     IF   substr(LINE,8,6) = 'KEYLEN' then do
              i_count = i_count + 1
              ICISZ = substr(LINE,102,19)
              ICISZ = strip(ICISZ)
              ICISZ = strip(ICISZ,b,'-')
              if i_count = 1 then ICISZ = 00000
          End  /*  End KEYLEN (ICISIZE)  */
    End /* End X counter */

   Z = OUTTRAP('OFF')

/* --------------------------------------------------------------- */
   IF AIXCHK = 1 & PTHCHK = 0 THEN do
 SAY 'VSAM INFORMATION:  **** DATASET HAS ALTERNATE INDICES **'
 SAY '-----------------'
 end
   IF AIXCHK = 1 & PTHCHK = 1 THEN DO
 SAY 'VSAM INFORMATION:  **** DATASET IS AN ALTERNATE INDEX ****  '
 SAY '-----------------'
 end
   IF AIXCHK = 0 & STACHK = 1 THEN DO
 SAY 'VSAM INFORMATION:  **** RECORD VALUE MAY BE INCORRECT *** '
 SAY '-----------------'
 end
   IF AIXCHK = 0 & PTHCHK = 0 & STACHK = 0 THEN DO
 SAY 'VSAM INFORMATION:   '
 SAY '-----------------'
 end

   SAY 'xxxxxxxxxx:' avgrecl maxrecl rectot
 SAY 'KEY LENGTH: 'format(KEYLEN,6) ' OFFSET:  'format(OFFSET,9),
   '  FREE SPACE: ' format(FREE1,3) format(FREE2,3)
 SAY 'AVG LRECL:  'format(AVGRECL,6) ' MAX LRECL:  'format(MAXRECL,6) ,
   '  TOTAL RECORDS: ' format(RECTOT,10)
 SAY 'CONTROL INT SIZE:   DATA:      'format(DCISZ,7) '  INDEX:     ',
  format(ICISZ,7)
 SAY 'OPTIONS:'
    Do  Z = 1 to COUNT
        say OTHER.Z
    end /* end z */
 say '-------------------------------------------------'

return    /* end DO_V_ATTRIB  */
/*                                                                    */
/* ------------------------------------------------------------------ */
/*                  Procedure: DO_SMS_ATRIB                           */
/*                  RETURNS SMS INFORMATION IF SMS MANAGED            */
/* ------------------------------------------------------------------ */
/*                                                                    */
DO_SMS_ATTRIB: procedure expose STORCLASS
   ARG dsn
  STPSET = 0
   SMSFLAG = 'NO'
   STORCLASS = 'NONSMS'
   DSNAME = "'"dsn"'"

   Z = OUTTRAP('DDN.')
   "LISTC ENTRY("DSNAME") ALL"
   "NEWSTACK"
    DO X = 1 TO DDN.0
       LINE = DDN.X                   /* PARSE THROUGH LINE BY LINE  */
       SELECT

      WHEN SUBSTR(LINE,6,7)  = 'SMSDATA' THEN DO
              SMSFLAG = 'YES'
         END /* END CHECK FOR SMS MANAGED DATASET  */
      WHEN SUBSTR(LINE,6,7)  = 'RLSDATA' THEN DO
              RLSFLAG = 'YES'
         END /* END CHECK FOR SMS MANAGED DATASET  */

         WHEN SUBSTR(LINE,8,12) = 'STORAGECLASS' THEN DO
              STORCL1 = SUBSTR(LINE,21,12)
              STORCL2 = STRIP(STORCL1)
              STORCLASS = STRIP(STORCL2,B,'-')
              MANAGE1 = SUBSTR(LINE,52,14)
              MANAGE2 = STRIP(MANAGE1)
              MANAGECLS = STRIP(MANAGE2,B,'-')
         END /* END STORAGECLASS */

         WHEN SUBSTR(LINE,8,9) = 'DATACLASS' THEN DO
              DATACL1 = SUBSTR(LINE,18,14)
              DATACL2 = STRIP(DATACL1)
              DATACLASS = STRIP(DATACL2,B,'-')
         END /* END DATACLASS */
         WHEN SUBSTR(LINE,8,12) = 'STRIPE-COUNT' THEN DO
              STP1 = SUBSTR(LINE,21,12)
              STP2 = STRIP(STP1)
              STPSET = STRIP(STP2,B,'-')
         END    /* END STRIP COUNT  */

      WHEN SUBSTR(LINE,8,5) = 'LOG -' THEN DO
              RLS1 = SUBSTR(LINE,12,22)
              RLS2 = STRIP(RLS1)
              RLSSET = STRIP(RLS2,B,'-')
         END /* END CHECK FOR RLS MANAGED DATASET  */

      WHEN SUBSTR(LINE,37,10) = 'RLS IN USE' THEN DO
              USE1 = SUBSTR(LINE,48,13)
              USE2 = STRIP(USE1)
              USESET = STRIP(USE2,B,'-')
         END /* END CHECK FOR RLS MANAGED DATASET  */

      WHEN SUBSTR(LINE,8,11) = 'LOGSTREAMID' THEN DO
              LOG1 = SUBSTR(LINE,19,35)
              LOG2 = STRIP(LOG1)
              LOGSET = STRIP(LOG2,B,'-')
         END /* END CHECK FOR RLS MANAGED DATASET  */

         OTHERWISE NOP
       END /* END SELECT  */
    END /* END X COUNTER */
   Z = OUTTRAP('OFF')

SELECT
WHEN SMSFLAG = 'YES' THEN DO
 SAY 'SMS INFO:    DATA CLASS:       ' DATACLASS
 SAY '             STORAGE CLASS:    ' STORCLASS
 SAY '             MANAGEMENT CLASS: ' MANAGECLS
  IF   STPSET = 0 THEN DO
     SAY'             STRIPE COUNT :    '        FORMAT(STPSET,2)
  END
  IF   STPSET ¬= 0 THEN DO
     SAY'             STRIPE COUNT :    '        FORMAT(STPSET,2)
  END

  IF   RLSFLAG = YES THEN DO
 SAY 'RLS DATA:'  'LOG:'RLSSET 'USE:'USESET 'LOGSTREAMID:'LOGSET
 end

 SAY '-------------------------------------------------'

END /* END IF SMSFLAG = YES  */

WHEN SMSFLAG = 'NO'  THEN DO
 SAY 'SMS INFO:    DATASET IS NON-SMS MANAGED'
 SAY '-------------------------------------------------'
END /* END IF SMSFLAG = NO  */
END /* END SELECT           */

RETURN    /* END DO_SMS_ATTRIB */
/*                                                                    */
/* ------------------------------------------------------------------ */
/*                  PROCEDURE: WRITE_SPACE_HEADER                     */
/*                                                                    */
/*      WRITES TOTALS FOR EACH VOLUME                                 */
/*      WRITES THE FOLLOWING INFO:                                    */
/*      VOLUME    SPACE ALLOCATED    SPACE USED    PERCENT USED       */
/*      AND COUNTS SPACE ALLOCATED AND SPACE USED FOR TOTAL ALLOCATED,*/
/*          TOTAL USED AND PERCENT USED.                              */
/* ------------------------------------------------------------------ */
/*                                                                    */
WRITE_SPACE_HEADER: PROCEDURE
   ARG PRISPACE SECSPACE

SAY 'TRACKS: PRIMARY SPACE:   'PRISPACE'     SECONDARY SPACE:   ',
SECSPACE
SAY ' '
SAY 'VOLUME   TRKS ALLOC  TRKS USED   PERCENT USED'
SAY '------   ----------  ---------   ------------'
return    /* end Write_space_Header */
/*                                                                    */
/*                                                                    */
/* ------------------------------------------------------------------ */
/*                  Procedure: Write_INDEX_header                     */
/*                                                                    */
/*      Writes totals for each volume                                 */
/*      Writes the following info:                                    */
/*      Volume    Space allocated    Space used    Percent Used       */
/*      And counts space allocated and space used for total allocated,*/
/*          total used and percent used.                              */
/* ------------------------------------------------------------------ */
/*                                                                    */
Write_INDEX_header: procedure

say '------------------------------'
say 'INDEX PORTION:'
say '--------------'
return    /* end Write_space_Header */
/*                                                                    */
/* ------------------------------------------------------------------ */
/*                  Procedure: PROCESS_VSAM_TOTALS                    */
/*                                                                    */
/*      Writes totals for each volume                                 */
/*      Writes the following info:                                    */
/*      Volume    Space allocated    Space used    Percent Used       */
/*      And counts space allocated and space used for total allocated,*/
/*          total used and percent used.                              */
/* ------------------------------------------------------------------ */
/*                                                                    */
PROCESS_VSAM_TOTALS: procedure expose total_alloc total_used
   ARG volser alloc pctused extents

used = alloc * pctused
percent = pctused * 100
say volser'    'format(alloc,6,0)'     'format(used,6,1)'     ',
format(percent,3,1)'%'

total_alloc = total_alloc + alloc
total_used = total_used + used

return    /* end DO_VSAM_ALLOC   */
/*                                                                    */
/* ------------------------------------------------------------------ */
/*                  Procedure: PROCESS_VSAM_ALL                       */
/*                                                                    */
/*      Writes totals for each volume                                 */
/*      Writes the following info:                                    */
/*      Volume    Space allocated    Space used    Percent Used       */
/*      And counts space allocated and space used for total allocated,*/
/*          total used and percent used.                              */
/* ------------------------------------------------------------------ */
/*                                                                    */
PROCESS_VSAM_ALL: procedure
   ARG total_alloc total_used cand p_type

      IF total_alloc = 0 then total_alloc = 1
tot_pctused =   total_used / total_alloc
tot_pctused = tot_pctused * 100
cyl_alloc = total_alloc / 15
cyl_used  = total_used / 15
say'-------'
say 'TOTALS: 'format(total_alloc,8,0)'   'format(total_used,8,1),
'     'format(tot_pctused,3,1)'%'
Select
 When p_type = 'DATA' then
   say 'CYLS:   'format(cyl_alloc,8,0)'   'format(cyl_used,8,1)
 When p_type = 'INDEX' then
   say 'CYLS:   'format(cyl_alloc,8,0)'   'format(cyl_used,8,1)
End /* End Select */
say 'CANDIDATE VOLUMES: 'cand

return    /* end DO_VSAM_ALLOC   */
/* ------------------------------------------------------------------ */
/*                  Procedure: DO_VSAM_ALLOC_V2                       */
/*                  Calculates space based on tracks used for each    */
/*                                   volume allocated to.             */
/*     !!!!  This procedure replaces DO_VSAM_ALLOC              !!!!  */
/* ------------------------------------------------------------------ */
/*                                                                    */
DO_VSAM_ALLOC_V2: procedure expose STORCLASS
   ARG dsn

/*   Set defaults     */

   DSNAME = "'"dsn"'"
   Alloc_type = 'TRK'
   cand = 0
   CANDFLAG = 0
   total_used = 0
   total_alloc = 0
   last_flag = 0
   used = 0
   alloc = 0
   STORCLASS_check = substr(STORCLASS,1,2)
   VOLSER = 'XXXXXX'
   prispace = 0
   secspace = 0
   INDEXFLAG = 0                    /* separate index & data space */
   p_type = 'DATA'                  /* to distinguish CYLS for D&I */

 /* Do list cat alloc on dataset */

   Z = OUTTRAP('DDN.')
/* "LISTC ENTRY("DSNAME") ALLOCATION"*/
   "LISTC ENTRY("DSNAME") ALL"
   "NEWSTACK"
   volchk = 0
    Do X = 1 to DDN.0
    IF POS("VOLSER",DDN.X) > 0 THEN VOLCHK = VOLCHK + 1
      INDEXER = substr(DDN.X,4,5)
      IF INDEXER = 'INDEX' then INDEXFLAG = 1
        If INDEXFLAG = 0 then do    /* Data space calculation portion */

           ALLOC_check = substr(DDN.X,24,8)
               IF ALLOC_check = 'CYLINDER' then ALLOC_Type = 'CYL'
                  ELSE ALLOC_check = 'TRK'

           PRI_check = substr(DDN.X,8,9)
               IF PRI_check = 'SPACE-PRI' then do
                  prispace = strip(substr(DDN.X,24,8),b,'-')
                  /* if cyls, convert to tracks  */
                  if ALLOC_Type = CYL then prispace = prispace * 15
               End /* end pri_check  */

           SEC_check = substr(DDN.X,8,9)
               IF SEC_check = 'SPACE-SEC' then do
                  secspace = strip(substr(DDN.X,24,8),b,'-')
                  /* if cyls, convert to tracks  */
                  if ALLOC_Type = CYL then secspace = secspace * 15
                  say ' '
                  say 'DATA PORTION:'
                  say '-------------'
                  CALL Write_space_header prispace secspace
               End /* end SEC_check  */

           VOLSER_check = substr(DDN.X,8,6)
               IF VOLSER_check ='VOLSER' then do
                  VOLFLAG = 1
                  SELECT
                    When VOLSER = 'XXXXXX' then NOP
                    When VOLFLAG = 0 then NOP
                    When VOLSER = '*' then do
                         cand = cand + 1
                    End /* end when VOLSER = * */
                    Otherwise do
                     If hiused = 0 and hialloc = 0 then
                        pctused = 0
            If hialloc > 0 then pctused =  hiused / hialloc
                          CALL PROCESS_VSAM_TOTALS volser alloc,
                                                   pctused extents
                     End /* End otherwise           */
                  End /* End Select              */
           End /* End  IF volser check */

           HI_ALLOC_check = substr(DDN.X,66,4)
           If HI_ALLOC_check = 'HI-A' then do
                         /* Initialize alloc & used */
                         alloc = 0
                         pctused = 0
                         extents = 0
                         VOLSER = strip(substr(DDN.X,26,6),b,'-')
                         VOLFLAG = 0
                         hialloc = strip(substr(DDN.X,78,15),b,'-')
                         hialloc = strip(hialloc,b,' ')
                         if hialloc = 0 then alloc =  prispace * .00001
                         extents = strip(substr(DDN.X,110,20),b,'-')
                         extents = strip(extents,b,' ')
           End /* End HI_ALLOC_Check */

           DEV_check = substr(DDN.X,8,7)
               IF DEV_check = 'DEVTYPE' then do
                  hiused = strip(substr(DDN.X,78,15),l,'-')
                  hiused = strip(hiused,b,' ')
                  hiused2 = hiused
           End /* End DEV_check */

           TRACK_check = substr(DDN.X,8,8)
                IF TRACK_check = 'LOW-CCHH' then do
                  TRACKS = strip(substr(DDN.X,78,15),l,'-')
                  TRACKS = strip(TRACKS,b,' ')
                  ALLOC = ALLOC + TRACKS  /* add to alloc trks in VOL */
           End /* end TRACK_check  */
           If SUBSTR(ddn.x,37,7) = 'FREESPC'   THEN DO
              FRESP = SUBSTR(ddn.x,51,12)
              FRESP = STRIP(FRESP,L,'-')
              FRESP = STRIP(FRESP,B,' ')
              FRESP = STRIP(FRESP,B,'*')
            end

        end /* End INDEXFLAG = 0 */

        If INDEXFLAG = 1 then do    /* For pulling last volume data   */
           If last_flag = 0 then do
                  SELECT
                    When VOLSER = '*' then do
                         cand = cand + 1
                          CALL PROCESS_VSAM_ALL total_alloc total_used,
                                                cand p_type
                    End /* end when VOLSER = * */
                    Otherwise do
                     If hiused = 0 and hialloc = 0 then
                        pctused = 0 /*this spot*/
  if hialloc > 0 & volchk = 1 then pctused = hiused2 / hialloc
  if hialloc > 0 & volchk > 1 then pctused = fresp / hialloc
                          CALL PROCESS_VSAM_TOTALS volser alloc,
                                                   pctused extents
                          CALL PROCESS_VSAM_ALL total_alloc total_used,
                                                cand p_type
                     End /* End otherwise           */
                  End /* End Select              */
                  cand = 0
                  CANDFLAG = 0
                  total_used = 0
                  total_alloc = 0
                  last_flag = 0
                  used = 0
                  alloc = 0
                  STORCLASS_check = substr(STORCLASS,1,2)
                  VOLSER = 'XXXXXX'
                  prispace = 0
                  secspace = 0
                  VOLSER = 'XXXXXX'
                  CALL Write_INDEX_header
                  last_flag = 1
           End /* end last_flag  */

           ALLOC_check = substr(DDN.X,24,8)
               IF ALLOC_check = 'CYLINDER' then ALLOC_Type = 'CYL'
                  ELSE ALLOC_check = 'TRK'

           PRI_check = substr(DDN.X,8,9)
               IF PRI_check = 'SPACE-PRI' then do
                  prispace = strip(substr(DDN.X,24,8),b,'-')
                  /* if cyls, convert to tracks  */
                  if ALLOC_Type = CYL then prispace = prispace * 15
               End /* end pri_check  */

           SEC_check = substr(DDN.X,8,9)
               IF SEC_check = 'SPACE-SEC' then do
                  secspace = strip(substr(DDN.X,24,8),b,'-')
                  /* if cyls, convert to tracks  */
                  if ALLOC_Type = CYL then secspace = secspace * 15
                  CALL Write_space_header prispace secspace
               End /* end SEC_check  */

           VOLSER_check = substr(DDN.X,8,6)
               IF VOLSER_check ='VOLSER' then do
                  VOLFLAG = 1
                  SELECT
                    When VOLSER = 'XXXXXX' then NOP
                    When VOLFLAG = 0 then NOP
                    When VOLSER = '*' then do
                         cand = cand + 1
                    End /* end when VOLSER = * */
                    Otherwise do
                     If hiused = 0 and hialloc = 0 then
                        pctused = 0
                     If hialloc > 0 then pctused = hiused / hialloc
                          CALL PROCESS_VSAM_TOTALS volser alloc,
                                                   pctused extents
                     End /* End otherwise           */
                  End /* End Select              */
           End /* End  IF volser check */

           HI_ALLOC_check = substr(DDN.X,66,4)
           If HI_ALLOC_check = 'HI-A' then do
                         /* Initialize alloc & used */
                         alloc = 0
                         pctused = 0
                         extents = 0
                         VOLSER = strip(substr(DDN.X,26,6),b,'-')
                         VOLFLAG = 0
                         hialloc = strip(substr(DDN.X,78,15),b,'-')
                         hialloc = strip(hialloc,b,' ')
                         if hialloc = 0 then alloc = prispace * .00001
                         extents = strip(substr(DDN.X,110,20),b,'-')
                         extents = strip(extents,b,' ')
           End /* End HI_ALLOC_Check */

           DEV_check = substr(DDN.X,8,7)
               IF DEV_check = 'DEVTYPE' then do
                  hiused = strip(substr(DDN.X,78,15),l,'-')
                  hiused = strip(hiused,b,' ')
           End /* End DEV_check */

           TRACK_check = substr(DDN.X,8,8)
                IF TRACK_check = 'LOW-CCHH' then do
                  TRACKS = strip(substr(DDN.X,78,15),l,'-')
                  TRACKS = strip(TRACKS,b,' ')
                  ALLOC = ALLOC + TRACKS  /* add to alloc trks in VOL */
           End /* end TRACK_check  */


        End /* end if indexflag = 1 */

    End /* End X counter: parsing through the LISTC */

                  SELECT
                    When VOLSER = '*' then do
                         cand = cand + 1
                    End /* end when VOLSER = * */
                    Otherwise do
                     If hiused = 0 and hialloc = 0 then
                        pctused = 0
                     If hialloc > 0 then pctused = hiused / hialloc
                          CALL PROCESS_VSAM_TOTALS volser alloc,
                                                   pctused extents
                     End /* End otherwise           */
                  End /* End Select              */
/* Now, sum up all space and give totals.  */

p_type = 'INDEX'
CALL PROCESS_VSAM_ALL total_alloc total_used cand p_type

return    /* end DO_VSAM_ALLOC_V2   */
/*                                                                    */
/* ------------------------------------------------------------------ */
/*                  Procedure: DO_VOLS                                */
/*                  Does VOL information                              */
/* Please note: Procedure was made with the help of RAY LIM           */
/* ------------------------------------------------------------------ */
/*                                                                    */
DO_VOLS: procedure expose cyls SYSUNITS SYSALLOC SYSREASON alloc,
         SYSVOLUME SYSUSED
   ARG dsn

  ANS1 = "'"dsn"'"

  Say 'SPACE INFORMATION:'
  say '------------------'
  say 'VOLUME  ALLOCATED   USED  '
  say '          CYLS      CYLS  '
  say '------  ---------   ----  '
  GENNAME =  ANS1
  LNUM  =  LENGTH(GENNAME)
  N = 0
  C2 = 0
  U2 = 0
  Z = OUTTRAP('DDN.')
 "LISTC ENTRY("GENNAME") VOLUME"
 "NEWSTACK"
  DO I = 1 TO DDN.0
   NAME = STRIP(DDN.I,'L')
   IF SUBSTR(NAME,1,6) ¬= 'VOLSER' THEN NOP
     ELSE DO
     N = N + 1
     PUSH NAME
     END
   END
   Do X = N to 1 by -1
      Pull SITEM
      Volume.X = substr(SITEM,19,6)
   End
   Z = OUTTRAP('OFF')
    DO Y = 1 to N
     VOLID = Volume.Y
     Select
     When VOLID = '-----*' then NOP
     Otherwise do
   DSINFO = LISTDSI(GENNAME 'VOLUME('VOLID')' )
     B1 = SYSVOLUME
     C1 = SYSALLOC
     U1 = SYSUSED
     D1 = SYSUNITS
     If D1 = 'TRACK' then do
           C1 = C1 / 15
           U1 = U1 / 15
        end /* end block */
/*   if C1 < 1 then C1 = 1
     if U1 < 1 then U1 = 1       */
     C2 = C2 + C1
     U2 = U2 + U1
     SAY B1'    'format(C1,6)'      'format(U1,6)
     End /* End otherwise */
    End /* End Select */
    END /* End Do y = 1 to n */
     If C2 > 0 then P1 = U2 / C2
        ELSE P1 = 0
     PERCENT = P1 * 100
     SAY '------------------------'
     SAY 'TOTALS:   'format(C2,6)'      'format(U2,6)'   PERCENT USED:',
          format(PERCENT,3,1)' %'
   "DELSTACK"

return    /* end DO_VOLS         */
/*                                                                    */
/* ------------------------------------------------------------------ */
/*                  Procedure: DO_Header                              */
/*                  Does Header                                       */
/* ------------------------------------------------------------------ */
/*                                                                    */
Do_Header: procedure
   ARG dsn

   CLRSCRN
   say '_________________________________________________'
   say 'DATASET: ' dsn
   say '  '

return    /* end DO_Header       */
/*                                                                    */
/* ------------------------------------------------------------------ */
/*                  Main                                              */
/* ------------------------------------------------------------------ */
/*                                                                    */
main:
do
   arg dataset dummier
   STORCLASS = ' '
   dsn = strip(dataset,b,"'")            /* strip all ticks (') */
   z = listdsi("'"dsn"'" )
   CALL Do_Header dsn
      SELECT
         When SYSREASON = 3 then
           say '** Dataset type cannot be processed **'
         When SYSREASON = 5 then
           say '** Dataset not catalogued **'
         When SYSREASON = 9 then
           say '** DATASET IS MIGRATED:' dsn ' **'
         When SYSREASON = 25 then
           say '** DATASET IS MIGRATED:' dsn ' **'
         When SYSREASON = 22 then
           say '** Volume  NOT MOUNTED **'
         When SYSREASON = 24 then
           say '** DATASET NOT FOUND **'
         When SYSREASON = 8 then
           CALL Do_TAPE_ATTRIB dsn
         When SYSREASON = 12 then do
           CALL Do_V_ATTRIB dsn
           CALL Do_SMS_ATTRIB dsn
           CALL Do_VSAM_ALLOC_V2 dsn
          end /* End SYSREASON = 12 */
         Otherwise do
           CALL Do_ATTRIB dsn
           CALL Do_SMS_ATTRIB dsn
           CALL Do_VOLS dsn
          end  /* End otherwise  */
   end  /* end Select */
   say '_________________________________________________'
end  /* end main */
