{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013455000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE924.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE924.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x06'", "DS1TRBAL": "b'uF'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\tX\\x00\\x0c\\tY\\x00\\x00\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04Z\\x00!\\x01\\x143\\x7f\\x01\\x143\\x7f\\x127\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf0@@@'", "ispf": {"version": "04.90", "flags": 0, "createdate": "2014-12-03T00:00:00", "modifydate": "2014-12-03T12:37:21", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-490"}, "text": "REGULAR CBT TAPE - VERSION 490    FILE:  924\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT490.FILE924\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 3 MEMBERS COUNTED; CUMULATIVE SIZE IS 811 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/03/14    12:37:21    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE924": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04Z\\x00\\x13\\x01\\x143\\x7f\\x01\\x143\\x7f\\x127\\x00\\x08\\x00\\x08\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf0@@@'", "ispf": {"version": "04.90", "flags": 0, "createdate": "2014-12-03T00:00:00", "modifydate": "2014-12-03T12:37:13", "lines": 8, "newlines": 8, "modlines": 0, "user": "CBT-490"}, "text": "//***FILE 924 is from Robert Cichetti and contains a REXX exec      *   FILE 924\n//*           called LDSI that exploits the LISTDSI function to     *   FILE 924\n//*           tell you about datasets.  LDSI is designed primarily  *   FILE 924\n//*           to run from an ISPF 3.4 dataset list.                 *   FILE 924\n//*                                                                 *   FILE 924\n//*           email:  rcichett@us.ibm.com                           *   FILE 924\n//*                   dasdmanx@yahoo.com                            *   FILE 924\n//*                                                                 *   FILE 924\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LDSI": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x17\\x01\\x06\\x14o\\x01\\x14&\\x8f\\x168\\x03\\x17\\x03\\x19\\x00\\x00\\xc8\\xc6\\xd9\\xd6\\xc3\\xc9\\xc3@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2006-05-26T00:00:00", "modifydate": "2014-09-25T16:38:17", "lines": 791, "newlines": 793, "modlines": 0, "user": "HFROCIC"}, "text": "/* REXX */\n/* ------------------------------------------------------------------ */\n/*                      File Information                              */\n/*                                                                    */\n/* In 3.4, gives attributes of a multi-volume dataset                 */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n/* ------------------------------------------------------------------ */\nSignal main\n/*                                                                    */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n/*                  Procedure Division                                */\n/* ------------------------------------------------------------------ */\n/*                                                                    */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n/*                  Procedure: DO_ATTRIB                              */\n/*                  Does basic DSN attribute info                     */\n/* ------------------------------------------------------------------ */\n/*                                                                    */\nDO_ATTRIB: procedure expose cyls SYSLRECL SYSRECFM SYSLRECL,\n           SYSBLKSIZE SYSEXTENTS SYSDSORG SYSREASON\n   ARG dsn\n\n  x = listdsi(\"'\"dsn\"'\" )\n\n  if SYSREASON = 3 | SYSREASON = 5 | SYSREASON = 9 | SYSREASON = 22 |,\n    SYSREASON = 24 | SYSREASON = 25 then do\n        SYSDSORG = ??\n        SYSRECFM = ??\n        SYSLRECL = ??\n        SYSBLKSIZE = ??\n        SYSEXTENTS = ??\n      end /* End if SYSREASON */\n\n  Say 'ATTRIBUTES:'\n  say '-----------'\n\n  say 'DATASET ORGANIZATION:' SYSDSORG '    RECORD FORMAT:' SYSRECFM\n  say 'LRECL:               ' SYSLRECL\n  say 'BLOCK SIZE:          ' SYSBLKSIZE\n  say 'EXTENTS:             ' SYSEXTENTS\n\n  say '   '\n\nreturn    /* end Calculate_CYLS  */\n/*                                                                    */\n/*                                                                    */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n/*                  Procedure: DO_TAPE_ATTRIB                         */\n/*                  Does basic DSN attribute info for TAPE DSN's      */\n/* ------------------------------------------------------------------ */\n/*                                                                    */\nDO_TAPE_ATTRIB: procedure\n   ARG dsn\n\n  x = listdsi(\"'\"dsn\"'\" )\n\n   DSNAME = \"'\"dsn\"'\"\n   OPFLAG = 'NO'\n\n   Z = OUTTRAP('DDN.')\n   \"LISTC ENTRY(\"DSNAME\") ALL\"\n   \"NEWSTACK\"\n    Do X = 1 to DDN.0\n       LINE = DDN.X                    /* get HI-ALLOC and USED lines */\n       SELECT\n         When substr(LINE,8,6) = 'VOLSER' then do\n              VOLSER = substr(LINE,21,12)\n              VOLSER = strip(VOLSER)\n              VOLSER = strip(VOLSER,b,'-')\n              DEVUNIT = substr(LINE,45,20)\n              DEVUNIT = strip(DEVUNIT)\n              DEVUNIT = strip(DEVUNIT,l,'-')\n          End   /* End KEYLEN       */\n         Otherwise NOP\n       End /* End SELECT  */\n    End /* End X counter */\n   Z = OUTTRAP('OFF')\n    DEVUNIT = substr(DEVUNIT,7,4)\n    Select\n       When DEVUNIT = 8080 then DEVICE = 3480\n       When DEVUNIT = 8081 then DEVICE = 3490\n       Otherwise DEVICE = DEVUNIT\n    End /* End select */\n\n  Say 'DATASET IS ON TAPE:'  dsn\n  say '-------------------'\n\n  say 'VOLSER: 'VOLSER '       ',\n      'DEVICE TYPE: 'DEVICE\n\nreturn    /* end DO_TAPE_ATTRIB  */\n/*                                                                    */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n/*                  Procedure: DO_V_ATTRIB                            */\n/*                  Does basic DSN attribute info                     */\n/* ------------------------------------------------------------------ */\n/*                                                                    */\nDO_V_ATTRIB: procedure\n   ARG dsn\n\n  STPSET = 0\n  AIXCHK = 0\n  STACHK = 0\n  PTHCHK = 0\n   DSNAME = \"'\"dsn\"'\"\n   zlag = 1\n   i_count = 0\n   OPFLAG = 'NO'         /* Counter for OPTIONS */\n\n   Z = OUTTRAP('DDN.')\n   \"LISTC ENTRY(\"DSNAME\") ALL\"\n   \"NEWSTACK\"\n    Do X = 1 to DDN.0\n     If zlag = 1 then do\n       LINE = DDN.X                    /* get HI-ALLOC and USED lines */\n       SELECT\n         WHEN SUBSTR(LINE,8,6) = 'PATH--' THEN DO\n              PTHCHK  = '1'\n          End   /* End aixchk       */\n         WHEN SUBSTR(LINE,8,6) = 'AIX---' THEN DO\n              AIXCHK  = '1'\n          End   /* End aixchk       */\n         When substr(LINE,8,6) = 'KEYLEN' then do\n              KEYLEN1 = substr(LINE,21,12)\n              KEYLEN2 = strip(KEYLEN1)\n              KEYLEN = strip(KEYLEN2,b,'-')\n              AVG1 = substr(LINE,45,20)\n              AVG2 = strip(AVG1)\n              AVGRECL = strip(AVG2,b,'-')\n              DCISZ = substr(LINE,102,19)\n              DCISZ = strip(DCISZ)\n              DCISZ = strip(DCISZ,b,'-')\n          End   /* End KEYLEN       */\n         WHEN SUBSTR(LINE,8,3) = 'RKP' THEN DO\n              OFF1 = substr(line,21,12)\n              OFF2 = strip(OFF1)\n              OFFSET = strip(OFF2,b,'-')\n              MAX1 = substr(LINE,45,20)\n              MAX2 = strip(MAX1)\n              MAXRECL = strip(MAX2,b,'-')\n         End    /* End rkp  */\n         WHEN SUBSTR(LINE,8,12) = 'STRIPE-COUNT' THEN DO\n              STP1 = SUBSTR(LINE,21,12)\n              STP2 = STRIP(STP1)\n              STPSET = STRIP(STP2,B,'-')\n         End    /* End strip count  */\n         When substr(LINE,8,9) = 'REC-TOTAL' then do\n              REC1 = substr(line,21,12)\n              REC2 = strip(REC1)\n              REC3 = strip(REC2,b,'-')\n              RECTOT = strip(REC3,b,'*')\n         End    /* End REC-TOTAL    */\n         WHEN SUBSTR(LINE,6,13) = 'STATISTICS  (' THEN DO\n              STACHK  = '1'\n              OPFLAG = 'NO'\n          END   /* END AIXCHK       */\n         When substr(LINE,6,10) = 'STATISTICS' then do\n              OPFLAG = 'NO'\n         End /*  End STATISTICS  */\n         When OPFLAG = 'YES' then do\n              COUNT = COUNT + 1\n              OTHER.COUNT = strip(LINE,b,' ')\n         End /* End OPFLAG  */\n         When substr(LINE,8,8) = 'SHROPTNS' then do\n              COUNT   = 1\n              OTHER.COUNT = strip(LINE,b,' ')\n              OPFLAG = 'YES'\n         End  /* END SHROPTNS  */\n         When substr(LINE,37,13) = 'FREESPACE-%CI' then do\n              FREE1 = substr(line,52,10)\n              FREE1 = strip(FREE1,l,'-')\n              FREE1 = strip(FREE1,b,' ')\n              FREE1 = STRIP(FREE1,B,'*')\n         End  /* END FREE-CI   */\n         When substr(LINE,37,13) = 'FREESPACE-%CA' then do\n              FREE2 = substr(line,52,10)\n              FREE2 = strip(FREE2,l,'-')\n              FREE2 = strip(FREE2,b,' ')\n              FREE2 = STRIP(FREE2,B,'*')\n              zlag = 0         /* Change FLAG to 0 after 1st vsam inf */\n         End  /* END SHROPTNS  */\n         Otherwise NOP\n       End /* End SELECT  */\n     End /* END FLAG */\n/*   For index portion                             */\n     LINE = DDN.X\n     IF   substr(LINE,8,6) = 'KEYLEN' then do\n              i_count = i_count + 1\n              ICISZ = substr(LINE,102,19)\n              ICISZ = strip(ICISZ)\n              ICISZ = strip(ICISZ,b,'-')\n              if i_count = 1 then ICISZ = 00000\n          End  /*  End KEYLEN (ICISIZE)  */\n    End /* End X counter */\n\n   Z = OUTTRAP('OFF')\n\n/* --------------------------------------------------------------- */\n   IF AIXCHK = 1 & PTHCHK = 0 THEN do\n SAY 'VSAM INFORMATION:  **** DATASET HAS ALTERNATE INDICES **'\n SAY '-----------------'\n end\n   IF AIXCHK = 1 & PTHCHK = 1 THEN DO\n SAY 'VSAM INFORMATION:  **** DATASET IS AN ALTERNATE INDEX ****  '\n SAY '-----------------'\n end\n   IF AIXCHK = 0 & STACHK = 1 THEN DO\n SAY 'VSAM INFORMATION:  **** RECORD VALUE MAY BE INCORRECT *** '\n SAY '-----------------'\n end\n   IF AIXCHK = 0 & PTHCHK = 0 & STACHK = 0 THEN DO\n SAY 'VSAM INFORMATION:   '\n SAY '-----------------'\n end\n\n   SAY 'xxxxxxxxxx:' avgrecl maxrecl rectot\n SAY 'KEY LENGTH: 'format(KEYLEN,6) ' OFFSET:  'format(OFFSET,9),\n   '  FREE SPACE: ' format(FREE1,3) format(FREE2,3)\n SAY 'AVG LRECL:  'format(AVGRECL,6) ' MAX LRECL:  'format(MAXRECL,6) ,\n   '  TOTAL RECORDS: ' format(RECTOT,10)\n SAY 'CONTROL INT SIZE:   DATA:      'format(DCISZ,7) '  INDEX:     ',\n  format(ICISZ,7)\n SAY 'OPTIONS:'\n    Do  Z = 1 to COUNT\n        say OTHER.Z\n    end /* end z */\n say '-------------------------------------------------'\n\nreturn    /* end DO_V_ATTRIB  */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n/*                  Procedure: DO_SMS_ATRIB                           */\n/*                  RETURNS SMS INFORMATION IF SMS MANAGED            */\n/* ------------------------------------------------------------------ */\n/*                                                                    */\nDO_SMS_ATTRIB: procedure expose STORCLASS\n   ARG dsn\n  STPSET = 0\n   SMSFLAG = 'NO'\n   STORCLASS = 'NONSMS'\n   DSNAME = \"'\"dsn\"'\"\n\n   Z = OUTTRAP('DDN.')\n   \"LISTC ENTRY(\"DSNAME\") ALL\"\n   \"NEWSTACK\"\n    DO X = 1 TO DDN.0\n       LINE = DDN.X                   /* PARSE THROUGH LINE BY LINE  */\n       SELECT\n\n      WHEN SUBSTR(LINE,6,7)  = 'SMSDATA' THEN DO\n              SMSFLAG = 'YES'\n         END /* END CHECK FOR SMS MANAGED DATASET  */\n      WHEN SUBSTR(LINE,6,7)  = 'RLSDATA' THEN DO\n              RLSFLAG = 'YES'\n         END /* END CHECK FOR SMS MANAGED DATASET  */\n\n         WHEN SUBSTR(LINE,8,12) = 'STORAGECLASS' THEN DO\n              STORCL1 = SUBSTR(LINE,21,12)\n              STORCL2 = STRIP(STORCL1)\n              STORCLASS = STRIP(STORCL2,B,'-')\n              MANAGE1 = SUBSTR(LINE,52,14)\n              MANAGE2 = STRIP(MANAGE1)\n              MANAGECLS = STRIP(MANAGE2,B,'-')\n         END /* END STORAGECLASS */\n\n         WHEN SUBSTR(LINE,8,9) = 'DATACLASS' THEN DO\n              DATACL1 = SUBSTR(LINE,18,14)\n              DATACL2 = STRIP(DATACL1)\n              DATACLASS = STRIP(DATACL2,B,'-')\n         END /* END DATACLASS */\n         WHEN SUBSTR(LINE,8,12) = 'STRIPE-COUNT' THEN DO\n              STP1 = SUBSTR(LINE,21,12)\n              STP2 = STRIP(STP1)\n              STPSET = STRIP(STP2,B,'-')\n         END    /* END STRIP COUNT  */\n\n      WHEN SUBSTR(LINE,8,5) = 'LOG -' THEN DO\n              RLS1 = SUBSTR(LINE,12,22)\n              RLS2 = STRIP(RLS1)\n              RLSSET = STRIP(RLS2,B,'-')\n         END /* END CHECK FOR RLS MANAGED DATASET  */\n\n      WHEN SUBSTR(LINE,37,10) = 'RLS IN USE' THEN DO\n              USE1 = SUBSTR(LINE,48,13)\n              USE2 = STRIP(USE1)\n              USESET = STRIP(USE2,B,'-')\n         END /* END CHECK FOR RLS MANAGED DATASET  */\n\n      WHEN SUBSTR(LINE,8,11) = 'LOGSTREAMID' THEN DO\n              LOG1 = SUBSTR(LINE,19,35)\n              LOG2 = STRIP(LOG1)\n              LOGSET = STRIP(LOG2,B,'-')\n         END /* END CHECK FOR RLS MANAGED DATASET  */\n\n         OTHERWISE NOP\n       END /* END SELECT  */\n    END /* END X COUNTER */\n   Z = OUTTRAP('OFF')\n\nSELECT\nWHEN SMSFLAG = 'YES' THEN DO\n SAY 'SMS INFO:    DATA CLASS:       ' DATACLASS\n SAY '             STORAGE CLASS:    ' STORCLASS\n SAY '             MANAGEMENT CLASS: ' MANAGECLS\n  IF   STPSET = 0 THEN DO\n     SAY'             STRIPE COUNT :    '        FORMAT(STPSET,2)\n  END\n  IF   STPSET \u00ac= 0 THEN DO\n     SAY'             STRIPE COUNT :    '        FORMAT(STPSET,2)\n  END\n\n  IF   RLSFLAG = YES THEN DO\n SAY 'RLS DATA:'  'LOG:'RLSSET 'USE:'USESET 'LOGSTREAMID:'LOGSET\n end\n\n SAY '-------------------------------------------------'\n\nEND /* END IF SMSFLAG = YES  */\n\nWHEN SMSFLAG = 'NO'  THEN DO\n SAY 'SMS INFO:    DATASET IS NON-SMS MANAGED'\n SAY '-------------------------------------------------'\nEND /* END IF SMSFLAG = NO  */\nEND /* END SELECT           */\n\nRETURN    /* END DO_SMS_ATTRIB */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n/*                  PROCEDURE: WRITE_SPACE_HEADER                     */\n/*                                                                    */\n/*      WRITES TOTALS FOR EACH VOLUME                                 */\n/*      WRITES THE FOLLOWING INFO:                                    */\n/*      VOLUME    SPACE ALLOCATED    SPACE USED    PERCENT USED       */\n/*      AND COUNTS SPACE ALLOCATED AND SPACE USED FOR TOTAL ALLOCATED,*/\n/*          TOTAL USED AND PERCENT USED.                              */\n/* ------------------------------------------------------------------ */\n/*                                                                    */\nWRITE_SPACE_HEADER: PROCEDURE\n   ARG PRISPACE SECSPACE\n\nSAY 'TRACKS: PRIMARY SPACE:   'PRISPACE'     SECONDARY SPACE:   ',\nSECSPACE\nSAY ' '\nSAY 'VOLUME   TRKS ALLOC  TRKS USED   PERCENT USED'\nSAY '------   ----------  ---------   ------------'\nreturn    /* end Write_space_Header */\n/*                                                                    */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n/*                  Procedure: Write_INDEX_header                     */\n/*                                                                    */\n/*      Writes totals for each volume                                 */\n/*      Writes the following info:                                    */\n/*      Volume    Space allocated    Space used    Percent Used       */\n/*      And counts space allocated and space used for total allocated,*/\n/*          total used and percent used.                              */\n/* ------------------------------------------------------------------ */\n/*                                                                    */\nWrite_INDEX_header: procedure\n\nsay '------------------------------'\nsay 'INDEX PORTION:'\nsay '--------------'\nreturn    /* end Write_space_Header */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n/*                  Procedure: PROCESS_VSAM_TOTALS                    */\n/*                                                                    */\n/*      Writes totals for each volume                                 */\n/*      Writes the following info:                                    */\n/*      Volume    Space allocated    Space used    Percent Used       */\n/*      And counts space allocated and space used for total allocated,*/\n/*          total used and percent used.                              */\n/* ------------------------------------------------------------------ */\n/*                                                                    */\nPROCESS_VSAM_TOTALS: procedure expose total_alloc total_used\n   ARG volser alloc pctused extents\n\nused = alloc * pctused\npercent = pctused * 100\nsay volser'    'format(alloc,6,0)'     'format(used,6,1)'     ',\nformat(percent,3,1)'%'\n\ntotal_alloc = total_alloc + alloc\ntotal_used = total_used + used\n\nreturn    /* end DO_VSAM_ALLOC   */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n/*                  Procedure: PROCESS_VSAM_ALL                       */\n/*                                                                    */\n/*      Writes totals for each volume                                 */\n/*      Writes the following info:                                    */\n/*      Volume    Space allocated    Space used    Percent Used       */\n/*      And counts space allocated and space used for total allocated,*/\n/*          total used and percent used.                              */\n/* ------------------------------------------------------------------ */\n/*                                                                    */\nPROCESS_VSAM_ALL: procedure\n   ARG total_alloc total_used cand p_type\n\n      IF total_alloc = 0 then total_alloc = 1\ntot_pctused =   total_used / total_alloc\ntot_pctused = tot_pctused * 100\ncyl_alloc = total_alloc / 15\ncyl_used  = total_used / 15\nsay'-------'\nsay 'TOTALS: 'format(total_alloc,8,0)'   'format(total_used,8,1),\n'     'format(tot_pctused,3,1)'%'\nSelect\n When p_type = 'DATA' then\n   say 'CYLS:   'format(cyl_alloc,8,0)'   'format(cyl_used,8,1)\n When p_type = 'INDEX' then\n   say 'CYLS:   'format(cyl_alloc,8,0)'   'format(cyl_used,8,1)\nEnd /* End Select */\nsay 'CANDIDATE VOLUMES: 'cand\n\nreturn    /* end DO_VSAM_ALLOC   */\n/* ------------------------------------------------------------------ */\n/*                  Procedure: DO_VSAM_ALLOC_V2                       */\n/*                  Calculates space based on tracks used for each    */\n/*                                   volume allocated to.             */\n/*     !!!!  This procedure replaces DO_VSAM_ALLOC              !!!!  */\n/* ------------------------------------------------------------------ */\n/*                                                                    */\nDO_VSAM_ALLOC_V2: procedure expose STORCLASS\n   ARG dsn\n\n/*   Set defaults     */\n\n   DSNAME = \"'\"dsn\"'\"\n   Alloc_type = 'TRK'\n   cand = 0\n   CANDFLAG = 0\n   total_used = 0\n   total_alloc = 0\n   last_flag = 0\n   used = 0\n   alloc = 0\n   STORCLASS_check = substr(STORCLASS,1,2)\n   VOLSER = 'XXXXXX'\n   prispace = 0\n   secspace = 0\n   INDEXFLAG = 0                    /* separate index & data space */\n   p_type = 'DATA'                  /* to distinguish CYLS for D&I */\n\n /* Do list cat alloc on dataset */\n\n   Z = OUTTRAP('DDN.')\n/* \"LISTC ENTRY(\"DSNAME\") ALLOCATION\"*/\n   \"LISTC ENTRY(\"DSNAME\") ALL\"\n   \"NEWSTACK\"\n   volchk = 0\n    Do X = 1 to DDN.0\n    IF POS(\"VOLSER\",DDN.X) > 0 THEN VOLCHK = VOLCHK + 1\n      INDEXER = substr(DDN.X,4,5)\n      IF INDEXER = 'INDEX' then INDEXFLAG = 1\n        If INDEXFLAG = 0 then do    /* Data space calculation portion */\n\n           ALLOC_check = substr(DDN.X,24,8)\n               IF ALLOC_check = 'CYLINDER' then ALLOC_Type = 'CYL'\n                  ELSE ALLOC_check = 'TRK'\n\n           PRI_check = substr(DDN.X,8,9)\n               IF PRI_check = 'SPACE-PRI' then do\n                  prispace = strip(substr(DDN.X,24,8),b,'-')\n                  /* if cyls, convert to tracks  */\n                  if ALLOC_Type = CYL then prispace = prispace * 15\n               End /* end pri_check  */\n\n           SEC_check = substr(DDN.X,8,9)\n               IF SEC_check = 'SPACE-SEC' then do\n                  secspace = strip(substr(DDN.X,24,8),b,'-')\n                  /* if cyls, convert to tracks  */\n                  if ALLOC_Type = CYL then secspace = secspace * 15\n                  say ' '\n                  say 'DATA PORTION:'\n                  say '-------------'\n                  CALL Write_space_header prispace secspace\n               End /* end SEC_check  */\n\n           VOLSER_check = substr(DDN.X,8,6)\n               IF VOLSER_check ='VOLSER' then do\n                  VOLFLAG = 1\n                  SELECT\n                    When VOLSER = 'XXXXXX' then NOP\n                    When VOLFLAG = 0 then NOP\n                    When VOLSER = '*' then do\n                         cand = cand + 1\n                    End /* end when VOLSER = * */\n                    Otherwise do\n                     If hiused = 0 and hialloc = 0 then\n                        pctused = 0\n            If hialloc > 0 then pctused =  hiused / hialloc\n                          CALL PROCESS_VSAM_TOTALS volser alloc,\n                                                   pctused extents\n                     End /* End otherwise           */\n                  End /* End Select              */\n           End /* End  IF volser check */\n\n           HI_ALLOC_check = substr(DDN.X,66,4)\n           If HI_ALLOC_check = 'HI-A' then do\n                         /* Initialize alloc & used */\n                         alloc = 0\n                         pctused = 0\n                         extents = 0\n                         VOLSER = strip(substr(DDN.X,26,6),b,'-')\n                         VOLFLAG = 0\n                         hialloc = strip(substr(DDN.X,78,15),b,'-')\n                         hialloc = strip(hialloc,b,' ')\n                         if hialloc = 0 then alloc =  prispace * .00001\n                         extents = strip(substr(DDN.X,110,20),b,'-')\n                         extents = strip(extents,b,' ')\n           End /* End HI_ALLOC_Check */\n\n           DEV_check = substr(DDN.X,8,7)\n               IF DEV_check = 'DEVTYPE' then do\n                  hiused = strip(substr(DDN.X,78,15),l,'-')\n                  hiused = strip(hiused,b,' ')\n                  hiused2 = hiused\n           End /* End DEV_check */\n\n           TRACK_check = substr(DDN.X,8,8)\n                IF TRACK_check = 'LOW-CCHH' then do\n                  TRACKS = strip(substr(DDN.X,78,15),l,'-')\n                  TRACKS = strip(TRACKS,b,' ')\n                  ALLOC = ALLOC + TRACKS  /* add to alloc trks in VOL */\n           End /* end TRACK_check  */\n           If SUBSTR(ddn.x,37,7) = 'FREESPC'   THEN DO\n              FRESP = SUBSTR(ddn.x,51,12)\n              FRESP = STRIP(FRESP,L,'-')\n              FRESP = STRIP(FRESP,B,' ')\n              FRESP = STRIP(FRESP,B,'*')\n            end\n\n        end /* End INDEXFLAG = 0 */\n\n        If INDEXFLAG = 1 then do    /* For pulling last volume data   */\n           If last_flag = 0 then do\n                  SELECT\n                    When VOLSER = '*' then do\n                         cand = cand + 1\n                          CALL PROCESS_VSAM_ALL total_alloc total_used,\n                                                cand p_type\n                    End /* end when VOLSER = * */\n                    Otherwise do\n                     If hiused = 0 and hialloc = 0 then\n                        pctused = 0 /*this spot*/\n  if hialloc > 0 & volchk = 1 then pctused = hiused2 / hialloc\n  if hialloc > 0 & volchk > 1 then pctused = fresp / hialloc\n                          CALL PROCESS_VSAM_TOTALS volser alloc,\n                                                   pctused extents\n                          CALL PROCESS_VSAM_ALL total_alloc total_used,\n                                                cand p_type\n                     End /* End otherwise           */\n                  End /* End Select              */\n                  cand = 0\n                  CANDFLAG = 0\n                  total_used = 0\n                  total_alloc = 0\n                  last_flag = 0\n                  used = 0\n                  alloc = 0\n                  STORCLASS_check = substr(STORCLASS,1,2)\n                  VOLSER = 'XXXXXX'\n                  prispace = 0\n                  secspace = 0\n                  VOLSER = 'XXXXXX'\n                  CALL Write_INDEX_header\n                  last_flag = 1\n           End /* end last_flag  */\n\n           ALLOC_check = substr(DDN.X,24,8)\n               IF ALLOC_check = 'CYLINDER' then ALLOC_Type = 'CYL'\n                  ELSE ALLOC_check = 'TRK'\n\n           PRI_check = substr(DDN.X,8,9)\n               IF PRI_check = 'SPACE-PRI' then do\n                  prispace = strip(substr(DDN.X,24,8),b,'-')\n                  /* if cyls, convert to tracks  */\n                  if ALLOC_Type = CYL then prispace = prispace * 15\n               End /* end pri_check  */\n\n           SEC_check = substr(DDN.X,8,9)\n               IF SEC_check = 'SPACE-SEC' then do\n                  secspace = strip(substr(DDN.X,24,8),b,'-')\n                  /* if cyls, convert to tracks  */\n                  if ALLOC_Type = CYL then secspace = secspace * 15\n                  CALL Write_space_header prispace secspace\n               End /* end SEC_check  */\n\n           VOLSER_check = substr(DDN.X,8,6)\n               IF VOLSER_check ='VOLSER' then do\n                  VOLFLAG = 1\n                  SELECT\n                    When VOLSER = 'XXXXXX' then NOP\n                    When VOLFLAG = 0 then NOP\n                    When VOLSER = '*' then do\n                         cand = cand + 1\n                    End /* end when VOLSER = * */\n                    Otherwise do\n                     If hiused = 0 and hialloc = 0 then\n                        pctused = 0\n                     If hialloc > 0 then pctused = hiused / hialloc\n                          CALL PROCESS_VSAM_TOTALS volser alloc,\n                                                   pctused extents\n                     End /* End otherwise           */\n                  End /* End Select              */\n           End /* End  IF volser check */\n\n           HI_ALLOC_check = substr(DDN.X,66,4)\n           If HI_ALLOC_check = 'HI-A' then do\n                         /* Initialize alloc & used */\n                         alloc = 0\n                         pctused = 0\n                         extents = 0\n                         VOLSER = strip(substr(DDN.X,26,6),b,'-')\n                         VOLFLAG = 0\n                         hialloc = strip(substr(DDN.X,78,15),b,'-')\n                         hialloc = strip(hialloc,b,' ')\n                         if hialloc = 0 then alloc = prispace * .00001\n                         extents = strip(substr(DDN.X,110,20),b,'-')\n                         extents = strip(extents,b,' ')\n           End /* End HI_ALLOC_Check */\n\n           DEV_check = substr(DDN.X,8,7)\n               IF DEV_check = 'DEVTYPE' then do\n                  hiused = strip(substr(DDN.X,78,15),l,'-')\n                  hiused = strip(hiused,b,' ')\n           End /* End DEV_check */\n\n           TRACK_check = substr(DDN.X,8,8)\n                IF TRACK_check = 'LOW-CCHH' then do\n                  TRACKS = strip(substr(DDN.X,78,15),l,'-')\n                  TRACKS = strip(TRACKS,b,' ')\n                  ALLOC = ALLOC + TRACKS  /* add to alloc trks in VOL */\n           End /* end TRACK_check  */\n\n\n        End /* end if indexflag = 1 */\n\n    End /* End X counter: parsing through the LISTC */\n\n                  SELECT\n                    When VOLSER = '*' then do\n                         cand = cand + 1\n                    End /* end when VOLSER = * */\n                    Otherwise do\n                     If hiused = 0 and hialloc = 0 then\n                        pctused = 0\n                     If hialloc > 0 then pctused = hiused / hialloc\n                          CALL PROCESS_VSAM_TOTALS volser alloc,\n                                                   pctused extents\n                     End /* End otherwise           */\n                  End /* End Select              */\n/* Now, sum up all space and give totals.  */\n\np_type = 'INDEX'\nCALL PROCESS_VSAM_ALL total_alloc total_used cand p_type\n\nreturn    /* end DO_VSAM_ALLOC_V2   */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n/*                  Procedure: DO_VOLS                                */\n/*                  Does VOL information                              */\n/* Please note: Procedure was made with the help of RAY LIM           */\n/* ------------------------------------------------------------------ */\n/*                                                                    */\nDO_VOLS: procedure expose cyls SYSUNITS SYSALLOC SYSREASON alloc,\n         SYSVOLUME SYSUSED\n   ARG dsn\n\n  ANS1 = \"'\"dsn\"'\"\n\n  Say 'SPACE INFORMATION:'\n  say '------------------'\n  say 'VOLUME  ALLOCATED   USED  '\n  say '          CYLS      CYLS  '\n  say '------  ---------   ----  '\n  GENNAME =  ANS1\n  LNUM  =  LENGTH(GENNAME)\n  N = 0\n  C2 = 0\n  U2 = 0\n  Z = OUTTRAP('DDN.')\n \"LISTC ENTRY(\"GENNAME\") VOLUME\"\n \"NEWSTACK\"\n  DO I = 1 TO DDN.0\n   NAME = STRIP(DDN.I,'L')\n   IF SUBSTR(NAME,1,6) \u00ac= 'VOLSER' THEN NOP\n     ELSE DO\n     N = N + 1\n     PUSH NAME\n     END\n   END\n   Do X = N to 1 by -1\n      Pull SITEM\n      Volume.X = substr(SITEM,19,6)\n   End\n   Z = OUTTRAP('OFF')\n    DO Y = 1 to N\n     VOLID = Volume.Y\n     Select\n     When VOLID = '-----*' then NOP\n     Otherwise do\n   DSINFO = LISTDSI(GENNAME 'VOLUME('VOLID')' )\n     B1 = SYSVOLUME\n     C1 = SYSALLOC\n     U1 = SYSUSED\n     D1 = SYSUNITS\n     If D1 = 'TRACK' then do\n           C1 = C1 / 15\n           U1 = U1 / 15\n        end /* end block */\n/*   if C1 < 1 then C1 = 1\n     if U1 < 1 then U1 = 1       */\n     C2 = C2 + C1\n     U2 = U2 + U1\n     SAY B1'    'format(C1,6)'      'format(U1,6)\n     End /* End otherwise */\n    End /* End Select */\n    END /* End Do y = 1 to n */\n     If C2 > 0 then P1 = U2 / C2\n        ELSE P1 = 0\n     PERCENT = P1 * 100\n     SAY '------------------------'\n     SAY 'TOTALS:   'format(C2,6)'      'format(U2,6)'   PERCENT USED:',\n          format(PERCENT,3,1)' %'\n   \"DELSTACK\"\n\nreturn    /* end DO_VOLS         */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n/*                  Procedure: DO_Header                              */\n/*                  Does Header                                       */\n/* ------------------------------------------------------------------ */\n/*                                                                    */\nDo_Header: procedure\n   ARG dsn\n\n   CLRSCRN\n   say '_________________________________________________'\n   say 'DATASET: ' dsn\n   say '  '\n\nreturn    /* end DO_Header       */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\n/*                  Main                                              */\n/* ------------------------------------------------------------------ */\n/*                                                                    */\nmain:\ndo\n   arg dataset dummier\n   STORCLASS = ' '\n   dsn = strip(dataset,b,\"'\")            /* strip all ticks (') */\n   z = listdsi(\"'\"dsn\"'\" )\n   CALL Do_Header dsn\n      SELECT\n         When SYSREASON = 3 then\n           say '** Dataset type cannot be processed **'\n         When SYSREASON = 5 then\n           say '** Dataset not catalogued **'\n         When SYSREASON = 9 then\n           say '** DATASET IS MIGRATED:' dsn ' **'\n         When SYSREASON = 25 then\n           say '** DATASET IS MIGRATED:' dsn ' **'\n         When SYSREASON = 22 then\n           say '** Volume  NOT MOUNTED **'\n         When SYSREASON = 24 then\n           say '** DATASET NOT FOUND **'\n         When SYSREASON = 8 then\n           CALL Do_TAPE_ATTRIB dsn\n         When SYSREASON = 12 then do\n           CALL Do_V_ATTRIB dsn\n           CALL Do_SMS_ATTRIB dsn\n           CALL Do_VSAM_ALLOC_V2 dsn\n          end /* End SYSREASON = 12 */\n         Otherwise do\n           CALL Do_ATTRIB dsn\n           CALL Do_SMS_ATTRIB dsn\n           CALL Do_VOLS dsn\n          end  /* End otherwise  */\n   end  /* end Select */\n   say '_________________________________________________'\nend  /* end main */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT924/FILE924.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT924", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}