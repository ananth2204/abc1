{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012718000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE747.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE747.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x05'", "DS1TRBAL": "b'\\x86\\xac'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05\\x1a\\x00\\x00\\x05\\x1a\\x00\\x04\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04I\\x00\\x00\\x01\\x060\\x7f\\x01\\x060\\x7f\\x07#\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf3@@@'", "ispf": {"version": "04.73", "flags": 0, "createdate": "2006-11-03T00:00:00", "modifydate": "2006-11-03T07:23:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-473"}, "text": "REGULAR CBT TAPE - VERSION 473    FILE:  747\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT473.FILE747\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 8 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,372 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/03/06    07:23:11    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x06\\x01\\x060\\x7f\\x01\\x060\\x7f\\x07!\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2006-11-03T00:00:00", "modifydate": "2006-11-03T07:21:06", "lines": 30, "newlines": 30, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:     Re: File 736 is on the Updates page\nFrom:        mark.naughton@ba.com\nDate:        Thu, 28 Sep 2006 07:45:36 +0100\nTo:          Sam Golob <sbgolob@cbttape.org>\n\nMark Naughton,\nMVS Software,\nIM/Core Technologies,\nWaterside Asia 2A, HDA2\nTel: 44 20 8738 8342               Fax : 44 20 8738 9976\nInternet: mark.naughton@ba.com       (British Airways)\n\nHi Sam,\n\nI have updated my IODF script (for File 736) which I'll send to\nyou soon...well it was back in April but the project to upgrade\nthe processors and z/OS took a while.  I have also written a\nprogram to access the OPERLOG data using multiblocks.  It has\nseveral parameters including start/end date & time, extract\nspecified messages/system data/job, and to display it either as\nSYSLOG or its own format.  It gives the advantage in that it will\nnot abend if there is a gap in the data which IEAMDBLG does\n(during our z/Series upgrade, the ICFs were down due to the PORs\n- hence gaps in the data).\n\nIf you would like me to send these through, just let me know.\n\nChat soon,\nMark.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE747": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04I\\x00\\x00\\x01\\x060\\x7f\\x01\\x060\\x7f\\x07!\\x00;\\x00;\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf3@@@'", "ispf": {"version": "04.73", "flags": 0, "createdate": "2006-11-03T00:00:00", "modifydate": "2006-11-03T07:21:00", "lines": 59, "newlines": 59, "modlines": 0, "user": "CBT-473"}, "text": "//***FILE 747 is from Mark Naughton of British Airways and contains *   FILE 747\n//*           a program to read the OPERLOG.                        *   FILE 747\n//*                                                                 *   FILE 747\n//*           email:  mark.naughton@ba.com                          *   FILE 747\n//*                   mark@blue-shantung.co.uk                      *   FILE 747\n//*                                                                 *   FILE 747\n//*     L O G R 64 - SYSTEM LOGGER READER         |                 *   FILE 747\n//*     Mark Naughton 2001-2006                                     *   FILE 747\n//*                                                                 *   FILE 747\n//*     History                                                     *   FILE 747\n//*     -------                                                     *   FILE 747\n//*     25/09/2001 - 1.0.0 - LOGREAD is working correctly now.      *   FILE 747\n//*                           (History to end of Version 1.0.9      *   FILE 747\n//*                           deleted)                              *   FILE 747\n//*     11/08/2003 - 1.0.9 - Support for multiple jobnames added.   *   FILE 747\n//*     17/07/2006 - 2.0.0 - Started 64-bit version.                *   FILE 747\n//*     14/08/2006 -        - Finished 64-bit version - runs        *   FILE 747\n//*                           faster, more features than            *   FILE 747\n//*                           before! Testing complete.             *   FILE 747\n//*                                                                 *   FILE 747\n//*     Parameters                                                  *   FILE 747\n//*     ----------                                                  *   FILE 747\n//*                                                                 *   FILE 747\n//*     All parameters are specified in the SYSIN DD.               *   FILE 747\n//*                                                                 *   FILE 747\n//*     START(yyyjjj.hhmm)   -> Start date and time                 *   FILE 747\n//*     END(yyyyjjj.hhmm)    -> End date and time                   *   FILE 747\n//*     SYS(ssss)            -> System name                         *   FILE 747\n//*     MSG(mmmmmmmmmmmm)    -> Message ID                          *   FILE 747\n//*     JOB(jjjjjjjjjjjj)    -> Jobname                             *   FILE 747\n//*     SYSLOG               -> Display output like SYSLOG          *   FILE 747\n//*     NOHEADER             -> Do not display the header in        *   FILE 747\n//*                             the display                         *   FILE 747\n//*     TODAY                -> Use todays date from 00:00 to       *   FILE 747\n//*                             current time                        *   FILE 747\n//*     YESTERDAY            -> Use yesterday's date from           *   FILE 747\n//*                             00:00 to 23:59                      *   FILE 747\n//*                                                                 *   FILE 747\n//*     If the date/time parameters are not specified, the          *   FILE 747\n//*     program abends with U0001 or U0002.                         *   FILE 747\n//*                                                                 *   FILE 747\n//*     You can specify multiple systems, messages and              *   FILE 747\n//*     jobnames separated by a space, for the length of the        *   FILE 747\n//*     line).                                                      *   FILE 747\n//*                                                                 *   FILE 747\n//*     ERROR CODES                                                 *   FILE 747\n//*     -----------                                                 *   FILE 747\n//*                                                                 *   FILE 747\n//*     ABEND U0001 - Invalid Start Date parameter                  *   FILE 747\n//*     ABEND U0002 - Invalid End Date parameter                    *   FILE 747\n//*     ABEND U0003 - No SYSIN DD specified                         *   FILE 747\n//*     ABEND U0004 - Incorrect specification for parameter         *   FILE 747\n//*     ABEND U0005 - Cannot connect to logstream                   *   FILE 747\n//*     ABEND U0006 - Cannot start a browse function in             *   FILE 747\n//*                   logstream                                     *   FILE 747\n//*     ABEND U0007 - Cannot read from the logstream                *   FILE 747\n//*                                                                 *   FILE 747\n//*     R6 and R7 contain RETCODE and RSNCODE for diagnosis.        *   FILE 747\n//*                                                                 *   FILE 747\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LOGJCL": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x02\\x01\\x00T\\x00\\x98\\x04?\\x01\\x06'/\\x12\\t\\x00\\x13\\x00\\x16\\x00\\x00\\xe4\\xf6\\xf8\\xf1\\xf5\\xf1\\xf2@@@\"", "ispf": {"version": "02.01", "flags": 0, "createdate": "1998-02-12T00:00:00", "modifydate": "2006-09-29T12:09:54", "lines": 19, "newlines": 22, "modlines": 0, "user": "U681512"}, "text": "//SOWLOGCP JOB (OWS,1300-MN),'MARK',NOTIFY=&SYSUID\n//*MAIN CLASS=SYSTEM\n//STEP1      EXEC ASMACL,REGION=4M,\n//           PARM.C='OPTABLE(YOP)',\n//           PARM.L='MAP,LET,XREF,LIST,NCAL,AC=1'\n//C.SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//           DD DSN=SYS1.MODGEN,DISP=SHR\n//           DD DSN=SYS1.SIATMAC,DISP=SHR\n//C.SYSUT1   DD UNIT=VIO\n//C.SYSLIN   DD UNIT=VIO\n//C.SYSIN    DD DISP=SHR,DSN=OWDATA.LOGREAD(LOGR64)\n//L.SYSUT1   DD UNIT=VIO\n//L.SYSLMOD  DD DISP=SHR,DSN=OWDATA.LOADLIB\n//L.SYSIN    DD *\n  MODE  AMODE(64)\n  MODE  RMODE(24)\n  ENTRY LOGR64\n  NAME  LOGR64(R)\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOGJCL$": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x02\\x01\\x00\\x13\\x00\\x98\\x04?\\x01\\x06'o\\x10\\t\\x00\\x14\\x00\\x16\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "02.01", "flags": 0, "createdate": "1998-02-12T00:00:00", "modifydate": "2006-10-03T10:09:13", "lines": 20, "newlines": 22, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//STEP1      EXEC ASMACL,REGION=4M,\n//           PARM.C='OPTABLE(YOP)',\n//           PARM.L='MAP,LET,XREF,LIST,NCAL,AC=1'\n//C.SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//           DD DSN=SYS1.MODGEN,DISP=SHR\n//*          DD DSN=SYS1.SIATMAC,DISP=SHR     (DON'T NEED JES3 MACROS)\n//C.SYSUT1   DD UNIT=VIO\n//C.SYSLIN   DD UNIT=VIO\n//C.SYSIN    DD DISP=SHR,DSN=SBGOLOB.NAUGHTON.FILE747(LOGR64)\n//L.SYSUT1   DD UNIT=VIO\n//L.SYSLMOD  DD DISP=SHR,DSN=SBGOLOB.FILE747.LOADLIB\n//L.SYSIN    DD *\n  MODE  AMODE(64)\n  MODE  RMODE(24)\n  ENTRY LOGR64\n  NAME  LOGR64(R)\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOGLIVE": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x02\\x01\\x00\\x12\\x00\\x98\\x04?\\x01\\x06'/\\x12\\x10\\x00!\\x00\\x16\\x00\\x00\\xe4\\xf6\\xf8\\xf1\\xf5\\xf1\\xf2@@@\"", "ispf": {"version": "02.01", "flags": 0, "createdate": "1998-02-12T00:00:00", "modifydate": "2006-09-29T12:10:12", "lines": 33, "newlines": 22, "modlines": 0, "user": "U681512"}, "text": "//SOWLOGR  JOB (OWS,1300-MN),'MARK',NOTIFY=&SYSUID\n//*MAIN CLASS=SYSTEM\n//STEP1     EXEC PGM=LOGR64\n//STEPLIB   DD DISP=SHR,DSN=OWDATA.LOADLIB\n//SYSPRINT  DD SYSOUT=*\n//SYSUDUMP  DD SYSOUT=*\n//LOGOUT    DD SYSOUT=*,OUTLIM=2000000\n//SYSIN     DD *\n  TODAY\n  SYSLOG\n/*\n//* ------------------------------------------------------------------\n//* PARAMETERS\n//* ----------\n//*\n//* ALL PARAMETERS ARE SPECIFIED IN THE SYSIN DD.\n//*\n//* START(YYYJJJ.HHMM)  -> START DATE AND TIME\n//* END(YYYYJJJ.HHMM)   -> END DATE AND TIME\n//* SYS(SSSS)           -> SYSTEM NAME\n//* MSG(MMMMMMMMMMMM)   -> MESSAGE ID\n//* JOB(JJJJJJJJJJJJ)   -> JOBNAME\n//* SYSLOG              -> DISPLAY OUTPUT LIKE SYSLOG\n//* NOHEADER            -> DO NOT DISPLAY THE HEADER IN THE DISPLAY\n//* TODAY               -> USE TODAYS DATE FROM 00:00 TO CURRENT TIME\n//* YESTERDAY           -> USE YESTERDAYS DATE FROM 00:00 TO 23:59\n//*\n//* IF THE DATE/TIME PARAMETERS ARE NOT SPECIFIED, THE PROGRAM ABENDS\n//* WITH U0001 OR U0002.\n//*\n//* YOU CAN SPECIFY MULTIPLE SYSTEMS, MESSAGES AND JOBNAMES SEPARATED\n//* BY A SPACE, FOR THE LENGTH OF THE LINE).\n//* ------------------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOGLIVE$": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x01\\x00\\x00\\x00\\x98\\x04?\\x01\\x06\\'o\\x10\\x04\\x00\"\\x00\\x16\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "02.01", "flags": 0, "createdate": "1998-02-12T00:00:00", "modifydate": "2006-10-03T10:04:00", "lines": 34, "newlines": 22, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//STEP1     EXEC PGM=LOGR64\n//STEPLIB   DD DISP=SHR,DSN=SBGOLOB.W$$.LINKLIB\n//SYSPRINT  DD SYSOUT=*\n//SYSUDUMP  DD SYSOUT=*\n//LOGOUT    DD SYSOUT=*,OUTLIM=2000000\n//SYSIN     DD *\n  TODAY\n  SYSLOG\n/*\n//* ------------------------------------------------------------------\n//* PARAMETERS\n//* ----------\n//*\n//* ALL PARAMETERS ARE SPECIFIED IN THE SYSIN DD.\n//*\n//* START(YYYJJJ.HHMM)  -> START DATE AND TIME\n//* END(YYYYJJJ.HHMM)   -> END DATE AND TIME\n//* SYS(SSSS)           -> SYSTEM NAME\n//* MSG(MMMMMMMMMMMM)   -> MESSAGE ID\n//* JOB(JJJJJJJJJJJJ)   -> JOBNAME\n//* SYSLOG              -> DISPLAY OUTPUT LIKE SYSLOG\n//* NOHEADER            -> DO NOT DISPLAY THE HEADER IN THE DISPLAY\n//* TODAY               -> USE TODAYS DATE FROM 00:00 TO CURRENT TIME\n//* YESTERDAY           -> USE YESTERDAYS DATE FROM 00:00 TO 23:59\n//*\n//* IF THE DATE/TIME PARAMETERS ARE NOT SPECIFIED, THE PROGRAM ABENDS\n//* WITH U0001 OR U0002.\n//*\n//* YOU CAN SPECIFY MULTIPLE SYSTEMS, MESSAGES AND JOBNAMES SEPARATED\n//* BY A SPACE, FOR THE LENGTH OF THE LINE).\n//* ------------------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOGR64": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x02\\x01\\x005\\x01\\x03\\x07\\x9f\\x01\\x06'\\x9f\\x07D\\x04\\x8d\\x04D\\x00\\x00\\xe4\\xf6\\xf8\\xf1\\xf5\\xf1\\xf2@@@\"", "ispf": {"version": "02.01", "flags": 0, "createdate": "2003-03-20T00:00:00", "modifydate": "2006-10-06T07:44:35", "lines": 1165, "newlines": 1092, "modlines": 0, "user": "U681512"}, "text": "**********************************************************************\n* L O G R 64 - SYSTEM LOGGER READER        | Mark Naughton 2001-2006 *\n**********************************************************************\n*                                                                    *\n* History                                                            *\n* -------                                                            *\n* 25/09/2001 - 1.0.0 - LOGREAD is working correctly now.             *\n*                      (History to end of Version 1.0.9 deleted)     *\n* 11/08/2003 - 1.0.9 - Support for multiple jobnames added.          *\n* 17/07/2006 - 2.0.0 - Started 64-bit version.                       *\n* 14/08/2006 -       - Finished 64-bit version - runs faster, more   *\n*                      features than before! Testing complete.       *\n* 06/10/2006 - 2.0.1 - Thanks to Steve Mowles for reporting a bug    *\n*                      in the LeapSeconds/TimeOffset. Steve gave a   *\n*                      a fix, and it now works East/West of GMT -    *\n*                      Thanks Steve!                                 *\n*                                                                    *\n* ------------------------------------------------------------------ *\n* Parameters                                                         *\n* ----------                                                         *\n*                                                                    *\n* All parameters are specified in the SYSIN DD.                      *\n*                                                                    *\n* START(yyyjjj.hhmm)  -> Start date and time                         *\n* END(yyyyjjj.hhmm)   -> End date and time                           *\n* SYS(ssss)           -> System name                                 *\n* MSG(mmmmmmmmmmmm)   -> Message ID                                  *\n* JOB(jjjjjjjjjjjj)   -> Jobname                                     *\n* SYSLOG              -> Display output like SYSLOG                  *\n* NOHEADER            -> Do not display the header in the display    *\n* TODAY               -> Use todays date from 00:00 to current time  *\n* YESTERDAY           -> Use yesterdays date from 00:00 to 23:59     *\n*                                                                    *\n* If the date/time parameters are not specified, the program abends  *\n* with U0001 or U0002.                                               *\n*                                                                    *\n* You can specify multiple systems, messages and jobnames separated  *\n* by a space, for the length of the line).                           *\n*                                                                    *\n**********************************************************************\n* ERROR CODES                                                        *\n* -----------                                                        *\n*                                                                    *\n* ABEND U0001 - Invalid Start Date parameter                         *\n* ABEND U0002 - Invalid End Date parameter                           *\n* ABEND U0003 - No SYSIN DD specified                                *\n* ABEND U0004 - Incorrect specification for parameter                *\n* ABEND U0005 - Cannot connect to logstream                          *\n* ABEND U0006 - Cannot start a browse function in logstream          *\n* ABEND U0007 - Cannot read from the logstream                       *\n*                                                                    *\n* R6 and R7 contain RETCODE and RSNCODE for diagnosis.               *\n*                                                                    *\n**********************************************************************\n         TITLE 'LOGR64 - SYSTEM LOGGER READER'\n         PRINT NOGEN\n         CVT   DSECT=YES\n         IHAPSA\n         IHAECVT DSECT=YES\n         IXGCON\n         IXGANSAA LIST=YES\n         IXGQBUF\n         IXGBRMLT\n         IEESMCA\n         IEAVG132\n         IEAVM105\n         PRINT NOGEN\n*--------------------------------------------------------------------*\n* Defines AMODE and REGISTERS                                        *\n*--------------------------------------------------------------------*\nLOGR64   AMODE 64\nLOGR64   RMODE ANY\n*\n&LOGVR   SETC  '2.0.1'\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE\n         EJECT\n*--------------------------------------------------------------------*\n* Define CSECT, EYECATCHER and setup ENVIRONMENT                     *\n* R10 - Base                                                         *\n* R12 - LTORG Base                                                   *\n* R13 - Workarea                                                     *\n*--------------------------------------------------------------------*\nLOGR64   CSECT\n         SYSSTATE ASCENV=P,AMODE64=YES,ARCHLVL=2     SPECIFY 64BIT MODE\n         PRINT NOGEN\n         COPY  IEABRC                             USE RELATIVE BRANCHES\n         STMG  R14,R12,8(R13)                     CREATE THE SAVE AREA\n         LARL  R14,SAVEAR64\n         MVC   4(4,R13),=C'F4SA'-SAVEAR64(R14)    USE FORMAT4\n         STG   R13,128(,R14)\n         STG   R14,136(,R13)\n         LGR   R13,R14\n         USING (SAVEAR64,LTORGEND),R13       CREATE BASE FROM SAVEAREA\n         MVC   SAVEAR64+4,=C'F4SA'           ...PAST LTORG LOCATION\n         B     LOGREAD1                      SKIP EYECATCHER\n*\nEYECATCH DC    CL40'LOGR64 &LOGVR;&SYSDATE &SYSTIME;'\nLOGREAD1 EQU   *\n*\n         STORAGE OBTAIN,LENGTH=WORKLEN,LOC=(RES,64)\n         LAE   R12,0(,R1)\n         USING WORKAREA,R12                 GET STORAGE FOR WORKAREA\n         LLGTR R12,R12\n*\n         LA    R3,LOG_REQ           POINT TO FIRST MESSAGE ELEMENT\n         MVC   0(1,R3),=C' '        THEN BLANK IT OUT\n         MVC   1(239,R3),0(R3)\n         MVI   VARS,C' '            BLANK OUT THE VARIABLE ARRAYS\n         MVC   VARS+1(123),VARS\n         MVI   VARS1,C' '\n         MVC   VARS1+1(159),VARS1\n*\n         USING PSA,R0                ADDRESS PSA\n         L     R9,FLCCVT\n         USING CVTMAP,R9             ADDRESS CVT\n         L     R9,CVTEXT2\n         USING CVTXTNT2,R9\n         LG    R4,CVTLDTO            GET LOCAL TIME OFFSET\n         STG   R4,TIMEOFFST          STORE FOR LATER USE\n         LG    R4,CVTLSO             GET LEAP SECONDS\n         STG   R4,LEAPSECS           STORE FOR LATER USE\n         DROP  R9\n*--------------------------------------------------------------------*\n* Now we open our DDs and test for the SYSIN                         *\n* R0  - Base for PSA                                                 *\n* R2  - SYSIN                                                        *\n* R10 - Base                                                         *\n* R12 - Work Area                                                    *\n* R13 - Save Area & LTORG                                            *\n*--------------------------------------------------------------------*\nPG_01    EQU   *\n         OPEN  (LOGOUT,OUTPUT)\n         OPEN  (SYSIN,INPUT)      OPEN FOR BUSINESS\n         LA    R2,SYSIN           SET R2 TO SYSIN\n         USING IHADCB,R2\n         LLGTR R2,R2\n         TM    DCBOFLGS,DCBOFOPN  CHECK THE DATASET IS OPEN\n         BO    PG_02_1            IF NOT, ABEND WITH ERROR\n         SAM24\n         XC    MSGT2,MSGT2\n         MVC   MSGT2(32),=C'LOGR007E No SYSIN specified!'\n         MVC   MSGT2+47(80),BLANKS\n         PUT   LOGOUT,MSGT2\n         SAM64\n         ABEND 3,DUMP             ABEND U0003 IF NO SYSIN\n*--------------------------------------------------------------------*\n* Now we retrieve our parameters                                     *\n* R0  - Base for PSA                                                 *\n* R3  - Storage for reading SYSIN                                    *\n* R10 - Base                                                         *\n* R12 - Work Area                                                    *\n* R13 - Save Area & LTORG                                            *\n*--------------------------------------------------------------------*\nPG_02_1  EQU   *\n         DROP  R2\nPG_02    EQU   *\n         SLR   R3,R3\n         LA    R3,TMPPARM         NEEDED FOR STORAGE FOR R3 ELSE 0C4!\n         MVC   PARM,BLANKS        BLANK OUT VARIABLES FOR PARSING\n         MVC   DATAV,BLANKS\n         SAM24\n         GET   SYSIN              GET DATA (IN 24BIT MODE)\n         SAM64\n         LA    R1,2(R1)\n         MVC   0(78,R3),0(R1)     COPY DATA\n         LLGTR R3,R3              CLEAR HI-ORDER\n         LGR   R4,R3              COPY THE PARAMETER FOR COMPARE\n*--------------------------------------------------------------------*\n* Handle parameters that will not use brackets in their use          *\n*--------------------------------------------------------------------*\nSE_00_01 CLC   0(6,R3),PSYSLOG    IF SYSLOG SPECIFIED,\n         BNE   SE_00_02           IF NOT, CONTINUE\n         MVC   PARM(6),0(R3)      ELSE STORE IN PARM THEN\n         B     SE_11              ...BRANCH TO STORE\nSE_00_02 CLC   0(8,R3),PNOHDR     IF NOHEADER SPECIFIED\n         BNE   SE_00_03           IF NOT,CONTINUE\n         MVC   PARM(8),0(R3)      ELSE STORE IN PARM THEN\n         B     SE_12              ...BRANCH TO STORE\nSE_00_03 CLC   0(5,R3),PTODAY     IF TODAY SPECIFIED\n         BNE   SE_00_04           IF NOT, CONTINUE\n         MVC   PARM(5),0(R3)      ELSE STORE IN PARM THEN\n         B     SE_13              ...BRANCH TO STORE\nSE_00_04 CLC   0(9,R3),PYESTER    IF YESTERDAY SPECIFIED\n         BNE   SE_01              IF NOT, CONTINUE\n         MVC   PARM(9),0(R3)      ELSE STORE IN PARM THEN\n         B     SE_14              ...BRANCH TO STORE\n*--------------------------------------------------------------------*\n* Parse the parameters and copy into array                           *\n* R0  - Base for PSA                                                 *\n* R3  - Storage for data                                             *\n* R4  - Copy of original data, starting at original address          *\n* R5  - Temporary register for calculation                           *\n* R10 - Base                                                         *\n* R12 - Work Area                                                    *\n* R13 - Save Area & LTORG                                            *\n*--------------------------------------------------------------------*\nSE_01    B     SE_03\nSE_02    LA    R3,1(R3)\nSE_03    CLC   0(1,R3),=C'('      CHECK FOR BRACKET\n         BNE   SE_02              IF NOT FOUND, STEP FORWARD\nSE_04    LGR   R5,R3              COPY PARAMETER FOR SUBTRACTION\n         SGR   R5,R4              GET LENGTH OF DATA BEFORE (\n         BZ    PG_SYSIN           IF NO DATA, STOP READING PARAMETERS\n         BCTGR R5,0               DECREMENT BEFORE EXECUTE\n         LLGTR R5,R5\n         EX    R5,PARAMETR        COPY DATA BEFORE (\n         LA    R3,1(R3)           STEP OVER THE (\n         LLGTR R3,R3\n         LGR   R4,R3              COPY DATA LEFT TO TEMP STORE\n         B     SE_06\n*\nSE_05    LA    R3,1(R3)\nSE_06    CLC   0(1,R3),=C')'      SEARCH FOR END BRACKET\n         BNE   SE_05              IF NOT FOUND, STEP FORWARD\n         LGR   R5,R3              COPY DATA\n         SGR   R5,R4              SUBTRACT TO GET BLANK SPACE AT END\n         BZ    PG_SYSIN           NOW SUB FROM STORE TO GET GOOD LEN\n         BCTGR R5,0               DECREMENT BEFORE EXECUTE\n         EX    R5,DATAVAL         EXTRACT PARM DATA\n         LA    R3,DATAV           SET ADDRESS\n**\n         CLC   PARM(5),=C'START'  IS THE PARAMETER 'START'?\n         BNE   SE_07\n         MVC   VARS+0,0(R3)       COPY INTO THE PARAMETER ARRAY\n         MVC   START_DAT(7),0(R3)   COPY START DATE FOR LATER\n         MVC   START_DAT+7(4),8(R3) COPY TIME AFTER DATE FOR COMPARE\n         B     PG_02              GET THE NEXT PARAMETER\n*\nSE_07    CLC   PARM(3),=C'END'    IS THE PARAMETER 'END'?\n         BNE   SE_08\n         MVC   VARS+15,0(R3)      COPY INTO THE PARAMETER ARRAY\n         MVC   END_DAT(7),0(R3)   COPY START DATE FOR LATER\n         MVC   END_DAT+7(4),8(R3) COPY TIME AFTER DATE FOR COMPARE\n         B     PG_02              GET THE NEXT PARAMETER\n*\nSE_08    CLC   PARM(3),=C'MSG'    IS THE PARAMETER 'MSG'?\n         BNE   SE_09\n         MVC   VARS1+0(80),0(R3)  COPY INTO THE PARAMETER ARRAY\n         B     PG_02              GET THE NEXT PARAMETER\n*\nSE_09    CLC   PARM(3),=C'SYS'    IS THE PARAMETER 'SYS'?\n         BNE   SE_10\n         MVC   VARS+44(80),0(R3)  COPY INTO THE PARAMETER ARRAY\n         B     PG_02              GET THE NEXT PARAMETER\n*\nSE_10    CLC   PARM(3),=C'JOB'    IS THE PARAMETER 'JOB'?\n         BNE   SE_11\n         MVC   VARS1+80(80),0(R3) COPY INTO THE PARAMETER ARRAY\n         B     PG_02              GET THE NEXT PARAMETER\n*\nSE_11    CLC   PARM(6),PSYSLOG    IS THE PARAMETER 'SYSLOG'?\n         BNE   SE_12\n         LA    R3,PARM\n         MVC   VARS+30(6),0(R3)   COPY INTO THE PARAMETER ARRAY\n         B     PG_02              GET THE NEXT PARAMETER\n*\nSE_12    CLC   PARM(8),PNOHDR       IS THE PARAMETER 'NOHEADER'?\n         BNE   SE_13\n         LA    R3,PARM\n         MVC   VARS+36(8),0(R3)   COPY INTO THE PARAMETER ARRAY\n         B     PG_02              GET THE NEXT PARAMETER\n*\nSE_13    CLC   PARM(5),PTODAY     IS THE PARAMETER 'TODAY'?\n         BNE   SE_14\n         B     SETTIME            IF YES, SET THE DATE/TIME\n*\nSE_14    CLC   PARM(8),PYESTER    IS THE PARAMETER 'YESTERDAY'?\n         BNE   PG_02\n         B     SETTIME            IF YES, SET THE DATE/TIME\nEND_SE   EQU   *\n         B     PG_SYSIN           IF NO DATA, STOP READING PARAMETERS\n*--------------------------------------------------------------------*\n* If there are no more parameters, close SYSIN.                      *\n* Check to see if Start Date is specified correctly, else abend U0001*\n* Check to see if End Date is specified correctly, else abend U0002. *\n* R0  - Base for PSA                                                 *\n* R3  - Storage for data                                             *\n* R10 - Base                                                         *\n* R12 - Work Area                                                    *\n* R13 - Save Area & LTORG                                            *\n*--------------------------------------------------------------------*\nPG_SYSIN EQU   *                  WE SHOULD BE HERE IF SYSIN RUNS OUT\n         CLOSE SYSIN              CLOSE SYSIN\nVAL_P_01 CLC   VARS+0(1),=C' '    CHECK THE START DATE IS NOT BLANK\n         BE    VAL_P_AA           IF YES, ABEND\n         LA    R3,VARS\n         TRT   0(12,R3),TRTTABLE  TEST FOR NUMERICS AND DOT\n         BNZ   VAL_P_AA           IF NO, ABEND\n         CLC   7(1,R3),=C'.'      CHECK POSITION OF DOT\n         BE    VAL_P_02           CONTINUE IF OK\nVAL_P_AA EQU   *\n         SAM24\n         XC    MSGT2,MSGT2\n         MVC   MSGT2(32),=C'LOGR001E Incorrect start date - '\n         MVC   MSGT2+32(15),VARS+0\n         MVC   MSGT2+47(80),BLANKS\n         PUT   LOGOUT,MSGT2\n         SAM64\n         ABEND 1,DUMP             ABEND U0001 IF START DATE INCORRECT\nVAL_P_02 CLC   VARS+15(1),=C' '   CHECK THE END DATE IS NOT BLANK\n         BE    VAL_P_AB\n         LA    R3,VARS\n         LA    R3,15(R3)          STEP OVER THE START DATE\n         TRT   0(12,R3),TRTTABLE  TEST FOR NUMERICS AND DOT\n         BNZ   VAL_P_AB           IF NO, ABEND\n         CLC   7(1,R3),=C'.'      CHECK POSITION OF DOT\n         BE    DISPHDR            CONTINUE IF OK\nVAL_P_AB EQU   *\n         SAM24\n         XC    MSGT2,MSGT2\n         MVC   MSGT2,=C'LOGR002E Incorrect end date - '\n         MVC   MSGT2+30(15),VARS+15\n         MVC   MSGT2+45(80),BLANKS\n         PUT   LOGOUT,MSGT2\n         SAM64\n         ABEND 2,DUMP             ABEND U0002 IF END DATE INCORRECT\n*--------------------------------------------------------------------*\n* Display the output/header                                          *\n*--------------------------------------------------------------------*\nDISPHDR  EQU   *\n*--------------------------------------------------------------------*\n* If we have specified NOHEADER then skip this                       *\n* R0  - Base for PSA                                                 *\n* R3  - Storage for data                                             *\n* R10 - Base                                                         *\n* R12 - Work Area                                                    *\n* R13 - Save Area & LTORG                                            *\n*--------------------------------------------------------------------*\n         LA    R3,VARS\n         CLC   36(8,R3),=C'NOHEADER'    IF NOHEADER, SKIP THE DISPLAY\n         BE    DISPHDR7\n*--------------------------------------------------------------------*\n* Display the main header                                            *\n* We use a space character and fill across the 240 char-gap.         *\n* R0  - Base for PSA                                                 *\n* R3  - Storage for data                                             *\n* R4  - Base for ECVT                                                *\n* R9  - Base for CVT                                                 *\n* R10 - Base                                                         *\n* R12 - Work Area                                                    *\n* R13 - Save Area & LTORG                                            *\n*--------------------------------------------------------------------*\n         SAM24\n         MVC   MSGT1,TITLE1     DISPLAY 1ST LINE OF HEADER\n         LA    R3,MSGT1\n         LA    R3,66(R3)\n         MVC   1(174,R3),0(R3)\n         PUT   LOGOUT,MSGT1\n*\n         SAM64\n         MVC   MSGT1,TITLE2          DISPLAY 2ND LINE\n         LA    R3,MSGT1\n         LA    R3,66(R3)             SET R3 TO HYPHEN\n         MVC   1(174,R3),0(R3)       COPY HYPHEN THROUGH MSGT1\n         L     R9,FLCCVT\n         USING CVT,R9                ADDRESS CVT\n         L     R4,CVTECVT            ADDRESS ECVT OFF CVT\n         USING ECVT,R4\n         MVC   MSGT1+32(2),ECVTLPNM  MOVE IN LPARNAME\n         MVC   MSGT1+40(6),ECVTPNAM  MOVE IN O/S PRODUCT NAME\n         MVC   MSGT1+47(2),ECVTPVER  MOVE IN PRODUCT VERSION\n         MVC   MSGT1+50(2),ECVTPREL  MOVE IN PRODUCT RELEASE\n         MVC   MSGT1+53(2),ECVTPMOD  MOVE IN PRODUCT MODIFICATION\n         SAM24\n         PUT   LOGOUT,MSGT1          OUTPUT HEADER\n         MVC   MSGT1,BLANKS          DISPLAY 3RD LINE\n         LA    R3,MSGT1\n         LA    R3,66(R3)             SET R3 TO HYPHEN\n         MVC   1(174,R3),0(R3)       COPY HYPHEN THROUGH MSGT1\n         PUT   LOGOUT,MSGT1\n         MVC   MSGT1,TITLE3          MOVE IN HEADER LINE\n         LA    R3,MSGT1\n         LA    R3,66(R3)             SET R3 TO HYPHEN\n         MVC   1(174,R3),0(R3)       COPY HYPHEN THROUGH MSGT1\n         LA    R4,VARS\n         MVC   MSGT1+7(4),0(R4)      COPY IN START DATE\n         MVC   MSGT1+12(3),4(R4)\n         MVC   MSGT1+16(2),8(R4)     COPY IN START TIME\n         MVC   MSGT1+19(2),10(R4)\n         LA    R4,15(R4)\n         MVC   MSGT1+25(4),0(R4)     COPY IN END DATE\n         MVC   MSGT1+30(3),4(R4)\n         MVC   MSGT1+34(2),8(R4)     COPY IN END TIME\n         MVC   MSGT1+37(2),10(R4)\n         PUT   LOGOUT,MSGT1          OUTPUT HEADER\n*--------------------------------------------------------------------*\n* Check if SYSTEMS are specified, if so, output the header           *\n*--------------------------------------------------------------------*\n         LA    R3,VARS\n         LA    R3,44(R3)\n         CLC   0(1,R3),=C' '         CHECK FOR SYSTEM PARAMETER\n         BE    DISPHDR3              IF NOT, CONTINUE\nDISPHDR2 EQU   *\n         XC    MSGT1,MSGT1           ELSE DISPLAY IN HEADER\n         MVC   MSGT1,HDRSYS\n         MVC   MSGT1+14(80),VARS+44\n         LA    R3,MSGT1\n         LA    R3,93(R3)             COPY SPACE THROUGH THE LINE\n         MVC   1(146,R3),0(R3)\n         PUT   LOGOUT,MSGT1          OUTPUT HEADER LINE\n*--------------------------------------------------------------------*\n* Check if JOBNAME was specified, if so, output the header           *\n*--------------------------------------------------------------------*\nDISPHDR3 EQU   *\n         LA    R3,VARS1\n         LA    R3,80(R3)\n         CLC   0(1,R3),=C' '         CHECK FOR JOBNAME PARAMETER\n         BE    DISPHDR4              IF NOT, CONTINUE\n         XC    MSGT1,MSGT1           ELSE DISPLAY IN HEADER\n         MVC   MSGT1,HDRJOB\n         MVC   MSGT1+14(80),VARS1+80\n         LA    R3,MSGT1\n         LA    R3,93(R3)             COPY SPACE THROUGH THE LINE\n         MVC   1(146,R3),0(R3)\n         PUT   LOGOUT,MSGT1          OUTPUT HEADER LINE\n*--------------------------------------------------------------------*\n* Check if MESSAGE was specified, if so, output the header           *\n*--------------------------------------------------------------------*\nDISPHDR4 EQU   *\n         LA    R3,VARS1\n         CLC   0(1,R3),=C' '         CHECK FOR MESSAGE PARAMETER\n         BE    DISPHDR5              IF NOT, CONTINUE\n         XC    MSGT1,MSGT1           ELSE DISPLAY IN HEADER\n         MVC   MSGT1,HDRMSG\n         MVC   MSGT1+14(80),VARS1+0\n         LA    R3,MSGT1\n         LA    R3,93(R3)             COPY SPACE THROUGH LINE\n         MVC   1(146,R3),0(R3)\n         PUT   LOGOUT,MSGT1          OUTPUT HEADER LINE\n*--------------------------------------------------------------------*\n* Check if SYSLOG COMPATIBILITY is specified                         *\n*--------------------------------------------------------------------*\nDISPHDR5 EQU   *\n         LA    R3,VARS\n         LA    R3,30(R3)\n         CLC   0(1,R3),=C' '         CHECK FOR SYSLOG PARAMETER\n         BE    DISPHDR6              IF NOT, CONTINUE\n         XC    MSGT1,MSGT1\n         MVC   MSGT1,HDRSYC\n         LA    R3,MSGT1              COPY SPACE THROUGH LINE\n         LA    R3,27(R3)\n         MVC   1(213,R3),0(R3)\n         PUT   LOGOUT,MSGT1          OUTPUT HEADER LINE\n*--------------------------------------------------------------------*\n* Print the bottom line                                              *\n*--------------------------------------------------------------------*\nDISPHDR6 EQU   *\n         MVC   MSGT1(240),TITLE1\n         LA    R3,MSGT1\n         LA    R3,66(R3)             COPY HYPHEN THROUGH LINE\n         MVC   1(174,R3),0(R3)\n         PUT   LOGOUT,MSGT1          OUTPUT HEADER LINE\n*\nDISPHDR7 EQU   *\n         DROP  R4\n         DROP  R9\n*--------------------------------------------------------------------*\n* Convert dates to STCK. Obtain storage for buffer and issue         *\n* IXGCONN to connect to the logstream.                               *\n* R3  - Storage for dates                                            *\n* R4  - Converted date                                               *\n* R10 - Base                                                         *\n* R11 - Storage for LOGGER data                                      *\n* R12 - Work Area                                                    *\n* R13 - Save Area & LTORG                                            *\n*--------------------------------------------------------------------*\nLOGR_00  EQU   *\n         MVC   START_D(7),VARS             COPY START DATE/TIME\n         MVC   END_D(7),VARS+15            COPY END DATE/TIME\n         LA    R3,START_D                  CONVERT START DATE TO STCK\n         LA    R4,SSTCK\n         BAS   R14,CONVSTCK\n         LA    R3,END_D                    CONVERT END DATE TO STCK\n         LA    R4,ESTCK\n         BAS   R14,CONVSTCK\n         STORAGE OBTAIN,LENGTH=XQBUFFL,BNDRY=PAGE,LOC=(RES,64)\n         LR    R11,R1\n         USING XQBUF,R11                   GET STORAGE FOR BUFFER\n         XC    XQBUF,XQBUF\n         SAM31                          CONNECT TO THE OPERLOG\n         IXGCONN REQUEST=CONNECT,                                      X\n               STREAMNAME=LSNAME,                                      X\n               AUTH=READ,                                              X\n               STREAMTOKEN=LSTOKEN,                                    X\n               ANSAREA=ANSWER,                                         X\n               RSNCODE=RSNCODE,                                        X\n               RETCODE=RETCODE,                                        X\n               ANSLEN=ANSLEN\n         SAM64\n         CLC   RETCODE,=AL4(IXGRETCODEERROR) CHECK IF ERROR?\n         BL    LOGR_20                     NO, LETS MOVE ON\nLOGR_10  L     R6,RETCODE                  ..ELSE SET RSN/RETCODE\n         L     R7,RSNCODE\n         ABEND 5,DUMP                      ABEND U0005\n*--------------------------------------------------------------------*\n* Start IXGBRWSE to connect to logstream at the SEARCH datestamp     *\n* R10 - Base                                                         *\n* R11 - Storage for LOGGER data                                      *\n* R12 - Work Area                                                    *\n* R13 - Save Area & LTORG                                            *\n*--------------------------------------------------------------------*\nLOGR_20  SAM31                          START THE BROWSE\n         IXGBRWSE REQUEST=START,                                       X\n               STREAMTOKEN=LSTOKEN,                                    X\n               SEARCH=SSTCK,                                           X\n               GMT=NO,                                                 X\n               BROWSETOKEN=BRSTOKEN,                                   X\n               ANSAREA=ANSWER,                                         X\n               ANSLEN=ANSLEN,                                          X\n               RSNCODE=RSNCODE,                                        X\n               RETCODE=RETCODE\n         SAM64\n         CLC   RETCODE,=AL4(IXGRETCODEERROR) CHECK IF ERROR\n         BL    LOGR_30                       NO SO CONTINUE\n         L     R6,RETCODE                    ELSE SET RET/RSNCODE\n         L     R7,RSNCODE                    AND...\n         ABEND 6,DUMP                        ABEND U0006\n*--------------------------------------------------------------------*\n* Issue READBLOCK to read data.                                      *\n* R10 - Base                                                         *\n* R11 - Storage for LOGGER data                                      *\n* R12 - Work Area                                                    *\n* R13 - Save Area & LTORG                                            *\n*--------------------------------------------------------------------*\nLOGR_30  EQU   *\n         XC    XQBUF,XQBUF                CLEAR THE BUFFER\n         SAM31                            READ BLOCKS OF DATA\n         IXGBRWSE REQUEST=READCURSOR,                                  X\n               STREAMTOKEN=LSTOKEN,                                    X\n               BUFFER=XQBUF,                                           X\n               BUFFLEN=XQBUFLEN,                                       X\n               BUFFALET=ALET,                                          X\n               BLKSIZE=BLKSIZE,                                        X\n               DIRECTION=OLDTOYOUNG,                                   X\n               BROWSETOKEN=BRSTOKEN,                                   X\n               MODE=SYNC,                                              X\n               ANSAREA=ANSWER,                                         X\n               ANSLEN=ANSLEN,                                          X\n               RSNCODE=RSNCODE,                                        X\n               RETBLOCKINFO=NO,                                        X\n               MULTIBLOCK=YES,                                         X\n               RETCODE=RETCODE,                                        X\n               MF=S\n         SAM64\n         CLC   RETCODE,=AL4(IXGRETCODEERROR) CHECK IF ERROR\n         BL    LOGR_50                       NO, SO CONTINUE\n         L     R6,RETCODE                    ELSE SET RET/RSNCODE\n         L     R7,RSNCODE\n         ABEND 7,DUMP                        ABEND U0007\n*--------------------------------------------------------------------*\n* Now step through the buffer, extracting MDB information for the    *\n* message.                                                           *\n* R3  - Number of Log Blocks                                         *\n* R6  - End address of Log Block (used to check for more data)       *\n* R7  - IXGBRMLT_NEXTOFFSET to be added to the Buffer Base           *\n* R8  - Working copy of Logger data (MULTIBLOCK and MDB)             *\n* R9  - Working copy of Logger data (then dropped)                   *\n* R10 - Base                                                         *\n* R11 - Storage for LOGGER data                                      *\n* R12 - Work Area                                                    *\n* R13 - Save Area & LTORG                                            *\n*--------------------------------------------------------------------*\n*--------------------------------------------------------------------*\n* Retrieve the Log Block offset and number of log blocks from the    *\n* Log Block Header control block.                                    *\n*--------------------------------------------------------------------*\nLOGR_50  EQU   *\n         LR    R8,11                      MAKE A WORKING COPY OF DATA\n         USING IXGBRMHD,R8                SET TO MULTIBLOCK HEADER\n         L     R3,IXGBRMHD_NUMLOGBLOCKS   GET NUMBER OF BLOCKS\n         LA    R5,IXGBRMHD_FIRSTBRMLT     POINT TO FIRST BLOCK\n         LR    R9,R5\n         DROP  R8\n*--------------------------------------------------------------------*\n* Read Log Block Header Information                                  *\n*--------------------------------------------------------------------*\nLOGR_50A EQU   *\n         USING IXGBRMLT,R9              SET BASE TO LOGBLOCK\n         MVC   LOG_CBS+4(1),=C'L'\n         L     R7,IXGBRMLT_NEXTOFFSET   STORE BASE TO NEXT LOGBLOCK\n*\n         TM    IXGBRMLT_FLAGS,IXGBRMLT_DATARETURNED    IS THERE DATA?\n         BNO   LOGR_30                              IF NOT, READ NEXT\n         AH    R9,IXGBRMLT_LENGTH\n         LR    R8,R9                    COPY POINTER TO LOGBLOCK\n*--------------------------------------------------------------------*\n* Step through Log Block, getting MDB data                           *\n*--------------------------------------------------------------------*\nLOGR_51  EQU   *\n         USING MDB,R8                   SET BASE TO MDB\n         LR    R6,R8                    COPY MDB BASE\n         AH    R6,MDBLEN                ADD THE LENGTH\n         ST    R6,MDB_LEN             STORE TO CHECK END OF DATA LATER\n         MVC   LOG_CBS(1),=C'M'\n         CLC   MDBTYPE,=X'0001'         CHECK MDB TYPE IS GEN OBJ\n         BNE   LOGR_541                 IF NOT, CHECK FOR OTHER\n         LA    R8,MDBHLEN(R8)           ADD HEADER LENGTH TO BASE\nLOGR_51A EQU   *\n         USING MDBG,R8                  SET BASE TO MDB GEN OBJ\n         MVC   LOG_CBS+1(1),=C'G'\n         MVC   LOG_REC(1),BLANKS        BLANK ELEMENTS IN MESSAGE\n         MVC   LOG_REQ(1),BLANKS\n         MVC   LOG_ROU(7),BLANKS\n         MVC   LOG_SYS(8),BLANKS\n         MVC   LOG_DAT(7),BLANKS\n         MVC   LOG_TIM(11),BLANKS\n         MVC   LOG_JOB(8),BLANKS\n         MVC   LOG_MLM(8),BLANKS\n         MVC   WORK_DAT(11),BLANKS\n         MVC   LOG_DAT(7),MDBGDSTP      COPY DATE\n         MVC   LOG_TIM(11),MDBGTIMH     COPY TIME\n         MVC   LOG_TIM+2(1),COLON\n         MVC   LOG_TIM+5(1),COLON\n         MVC   WORK_DAT(7),MDBGDSTP     COPY DATE/TIME FOR CHECKING\n         LA    R4,MDBGTIMH\n         MVC   WORK_DAT+7(2),0(R4)\n         MVC   WORK_DAT+9(2),3(R4)\n*\n*--------------------------------------------------------------------*\n* Check if we have data between our dates                            *\n*--------------------------------------------------------------------*\n         CLC   WORK_DAT,START_DAT    HAVE WE REACHED THE START DATE?\n         BL    LOGR_60               NO, SO CONTINUE THROUGH THE BUFFER\nLOGR_52A CLC   WORK_DAT,END_DAT      HAVE WE REACHED THE END DATE?\n         BH    LOGR_END              NOT YET, SO CONTINUE\n*\nLOGR_53  MVC   LOG_SYS(8),MDBGOSNM   COPY SYSTEM NAME\n         MVC   LOG_JOB(8),MDBGJBNM   COPY JOBNAME\n*\n         SR    R15,R15               CONVERT SEQUENCE TO MLM ID\n         ICM   R15,7,MDBGSEQ\n         CVD   R15,TEMPWORD\n         UNPK  MULTI_ID,TEMPWORD\n         OI    MULTI_ID+2,C'0'\n*\n*--------------------------------------------------------------------*\n* Check System of Log Block against the specified Systems            *\n*--------------------------------------------------------------------*\nLOGR_53A EQU   *\n         CLC   VARS+44(1),BLANKS    IS SYSTEM SPECIFIED?\n         BE    LOGR_53K             NO, CONTINUE\nLOGR_53B EQU   *\n         LA    R5,VARS+44           SET REG TO SYSTEM PARM\n         LR    R6,R5                COPY FOR POINTER TO START OF PARM\n         LA    R4,79(R5)            SET REG TO END OF PARM\n         B     LOGR_53D\nLOGR_53C LA    R5,1(R5)\nLOGR_53D CLI   0(R5),C' '           LOOK FOR SPACE\n         BNE   LOGR_53C\n         CR    R5,R4                COMPARE CURRENT TO END\n         BE    LOGR_60              IF NO MORE DATA, CONTINUE\n         LA    R0,X'40'\n         LA    R1,MDBGOSNM\n         CLST  R6,R1                SEARCH FOR SYSTEM\n         BE    LOGR_53K             IF FOUND, CONTINUE\n         LA    R6,1(R5)             SET START TO NEXT CHARACTER\n         B     LOGR_53C             CONTINUE SEARCHING\n*--------------------------------------------------------------------*\n* Check Jobname of Log Block against the specified Jobnames          *\n*--------------------------------------------------------------------*\nLOGR_53K EQU   *\n         CLC   VARS1+80(1),BLANKS   IS JOBNAME SPECIFIED?\n         BE    LOGR_54              NO, CONTINUE\nLOGR_53L EQU   *\n         LA    R5,VARS1+80          SET REG TO JOBNAME PARM\n         LR    R6,R5                COPY FOR POINTER TO START OF PARM\n         LA    R4,79(R5)            SET REG TO END\n         B     LOGR_53N\nLOGR_53M LA    R5,1(R5)\nLOGR_53N CLI   0(R5),C' '           LOOK FOR SPACE\n         BNE   LOGR_53M\n         CR    R5,R4                COMPARE CURRENT TO END\n         BE    LOGR_60              IF NO MORE DATA, CONTINUE\n         LR    R10,R5               STORE REG\n         SR    R5,R6                SUBTRACT TO GET JOBNAME LENGTH\n         BCTR  R5,0\n         EX    R5,CHKJOB            COMPARE JOBNAME AGAINST PARM\n         BE    LOGR_54              IF A MATCH, CONTINUE\n         LR    R5,R10               RESTORE REG\n         LA    R6,1(R5)             SET START TO NEXT CHARACTER\n         B     LOGR_53M             CONTINUE SEARCHING\n*--------------------------------------------------------------------*\n* Read the MDB Control Object                                        *\n*--------------------------------------------------------------------*\nLOGR_54  EQU   *\n         AH    R8,MDBGLEN             ADD OFFSET FROM GEN TO CP OBJECT\nLOGR_541 EQU   *\n         MVC   LOG_CBS+2(1),=C'C'\n         USING MDBSCP,R8              SET BASE TO MDB CONTROL OBJ\n         CLC   MDBCTYPE,=X'0002'      CHECK MDB TYPE IS GEN OBJ OR HDR\n         BNE   LOGR_59                IF NOT, CHECK OTHER\n         MVC   CONSID,MDBCCNID        STORE CONSOLE ID\n         MVC   CONSNM,MDBCCNNM        STORE CONSOLE NAME\n*--------------------------------------------------------------------*\n* Retrieve WTL, MLM and Request flags for Message                    *\n*--------------------------------------------------------------------*\n         MVC   WTLFLAG,=CL2'N '       DEFAULT WTL FLAG\n         MVI   REQFLAG,C' '           DEFAULT REQUEST TYPE FLAG\n*\n         UNPK  DECWORK(9),MDBCERC(5)    UNPACK ROUTING CODES\n         TR    DECWORK,HEXTABLE         TRANSLATE TO HEX\n         MVC   LOG_ROU,DECWORK          STORE IN MESSAGE\n*\n         UNPK  DECWORK(9),MDBCXMOD(5)   UNPACK REQUEST FLAGS\n         TR    DECWORK(8),HEXTABLE      TRANSLATE TO HEX\n         MVC   LOG_REQFL,DECWORK        STORE IN MESSAGE\n*\n         SLR   R6,R6                  RESET MLM LINE COUNT\n         CLC   MDBCLCNT,=F'1'         ARE WE MULTI-LINE?\n         BE    LOGR_54A               NO, CONTINUE\n         MVC   WTLFLAG,=CL2'MF'       SET FLAG TO MULTI LINE AND FIRST\n         B     LOGR_54B               SKIP WTLFLAG CHECK\nLOGR_54A EQU   *\n         TM    MDBMLVL1,MDBMLR        IS THIS A WTOR?\n         BNO   LOGR_54B\n         MVI   WTLFLAG,C'W'           IF SO, LETS STATE IT\n         B     LOGR_55\nLOGR_54B EQU   *\n         TM    MDBCATT1,MDBCMCSC      IS THIS A COMMAND RESPONSE?\n         BNO   LOGR_54C\n         MVI   REQFLAG,C'R'           IF SO, LETS STATE IT\n         B     LOGR_55\nLOGR_54C EQU   *\n         TM    MDBCMSC2,MDBCOCMD      IS THIS AN OPERATOR COMMAND?\n         BNO   LOGR_54D\n         MVI   REQFLAG,C'C'           IF SO, LETS STATE IT\n         B     LOGR_55\nLOGR_54D EQU   *\n         TM    MDBCMSC2,MDBCICMD      IS THIS AN INTERNAL COMMAND?\n         BNO   LOGR_55\n         MVI   REQFLAG,C'I'           IF SO, LETS STATE IT\n         B     LOGR_55A               ..AND GET THE CONSOLE NAME\n*--------------------------------------------------------------------*\n* Retrieve Console Name and Console ID                               *\n*--------------------------------------------------------------------*\nLOGR_55  EQU   *\n         CLC   LOG_JOB(8),BLANKS       IS THE JOBNAME BLANK?\n         BNE   LOGR_58                 ITS NOT, SO CONTINUE\nLOGR_55A CLC   CONSID,=F'128'          IS THE CONSOLE ID =128?\n         BNE   LOGR_56                 ITS NOT, SO CONTINUE\n         MVC   CONSNM(8),=CL8'INSTREAM' SET THE DEFAULT CONSOLE NAME\n         B     LOGR_57\nLOGR_56  EQU   *\n         CLC   CONSID,=F'0'            IS THE CONSOLE ID =0?\n         BNE   LOGR_57                 ITS NOT, SO CONTINUE\n         MVC   CONSNM(8),=CL8'INTERNAL' SET THE DEFAULT CONSOLE NAME\nLOGR_57  EQU   *\n         MVC   LOG_JOB(8),CONSNM       COPY CONSOLE NAME INTO MESSAGE\n*--------------------------------------------------------------------*\n* Add the length of MDBSCP to get to the Text Object                 *\n*--------------------------------------------------------------------*\nLOGR_58  EQU   *\n         AH    R8,MDBCLEN              ADD OFFSET FROM CP TO TXT OBJECT\n         MVI   LOG_READL,X'0'          CLEAR 'READ_FIRST_LINE' FLAG\n*--------------------------------------------------------------------*\n* Access Message Text Object                                         *\n*--------------------------------------------------------------------*\nLOGR_59  EQU   *\n         USING MDBT,R8                 SET BASE TO MDB TEXT OBJECT\n         MVC   LOG_CBS+3(1),=C'T'\n         CLC   MDBTTYPE,=X'0004'       CHECK MDB TYPE IS TXT OBJ\n         BNE   LOGR_59N                IF NOT GO TO PARSE IT\n         LH    R4,MDBTLEN              GET LENGTH OF MESSAGE TEXT\n         S     R4,=A(MDBTMSGT-MDBTLEN)\n         BNP   LOGR_61                 IF NO MESSAGE, CONTINUE\n         MVI   LOG_TXT,C' '            BLANK MESSAGE TEXT\n         MVC   LOG_TXT+1(189),LOG_TXT\n         LA    R5,MDBTMSGT\n         BCTR  R4,0\n         EX    R4,WTLPULL              COPY MESSAGE TEXT\n*--------------------------------------------------------------------*\n* Now we check to see if the Message (if specified), is found        *\n*--------------------------------------------------------------------*\nLOGR_59A EQU   *\n         TM    LOG_READL,LINEREAD  HAVE WE MATCHED THE FIRST LINE?\n         BO    LOGR_59F            IF SO, DISPLAY REMAINING TEXT\n         CLC   VARS1(1),BLANKS     HAS USER ASKED FOR CERTAIN MESSAGES?\n         BE    LOGR_59F            NO, SO CONTINUE\nLOGR_59B EQU   *\n         LA    R5,VARS1            SET REG TO MESSAGE PARM\n         LR    R9,R5               COPY FOR POINTER TO START OF PARM\n         LA    R4,79(R5)           SET REG TO END\n         B     LOGR_59D\nLOGR_59C LA    R5,1(R5)\nLOGR_59D CLI   0(R5),C' '          LOOK FOR SPACE\n         BNE   LOGR_59C\n         CR    R5,R4               COMPARE CURRENT TO END\n         BE    LOGR_61             IF NO MORE DATA, CONTINUE\n         LR    R10,R5              PRESERVE REG\n         SR    R5,R9               SUBTRACT TO GET MESSAGE\n         BCTR  R5,0\n         EX    R5,CHKMSG           COMPARE MESSAGE AGAINST PARM\n         BE    LOGR_59E            IF IT MATCHES, CONTINUE\n         LR    R5,R10              RESTORE REG\n         LA    R9,1(R5)            SET START TO NEW CHARACTER\n         B     LOGR_59C            CONTINUE SEARCHING\nLOGR_59E EQU   *\n         OI    LOG_READL,LINEREAD     FLAG THE FIRST MLM WAS DISPLAYED\n*--------------------------------------------------------------------*\n* Check if we are Multi-Line Message                                 *\n*--------------------------------------------------------------------*\nLOGR_59F EQU   *\n         CLC   WTLFLAG,=CL2'N '    IF WE'RE NOT MLM, SKIP MLM CODES\n         BE    LOGR_59J\n         CLC   WTLFLAG,=CL2'MF'    IF WE'RE MLM (AND FIRST LINE), SKIP\n         BE    LOGR_59J            ..OTHER CODES\n         MVC   LOG_JOB(8),BLANKS       BLANK JOBNAME NAME AS MLM LINE\n         MVC   LOG_JOB+5(3),MULTI_ID   COPY IN THE MLM ID\n*--------------------------------------------------------------------*\n* If we are MLM, set the Record Type                                 *\n*--------------------------------------------------------------------*\n         TM    MDBTLNT1,MDBTLABT   HOWEVER IF WE ARE A LABEL...\n         BNO   LOGR_59G\n         MVI   WTLFLAG,C'L'        SET LABEL\n         B     LOGR_59I\nLOGR_59G EQU   *\n         TM    MDBTLNT1,MDBTDATT   IF WE ARE A DATA LINE...\n         BNO   LOGR_59H\n         MVI   WTLFLAG,C'D'        SET DATA LINE\nLOGR_59H EQU   *\n         TM    MDBTLNT1,MDBTENDT   IF WE ARE THE END LINE...\n         BNO   LOGR_59I\n         MVI   WTLFLAG,C'E'        SET END LINE\nLOGR_59I EQU   *\n         MVC   LOG_ROU(7),BLANKS   BLANK ELEMENTS IF MLM\n         MVC   LOG_SYS(8),BLANKS\n         MVC   LOG_DAT(7),BLANKS\n         MVC   LOG_TIM(11),BLANKS\n*--------------------------------------------------------------------*\n* Build Message and print                                            *\n*--------------------------------------------------------------------*\nLOGR_59J EQU   *\n         MVC   LOG_REC(1),WTLFLAG   COPY THE RECORD TYPE INTO MSG\n         MVC   LOG_REQ(1),REQFLAG   COPY THE REQUEST TYPE INTO MSG\n         MVI   MSGT1,C' '           BLANK OUT THE MSG TEXT\n         MVC   MSGT1+1(239),MSGT1\nLOGR_59K EQU   *\n         CLC   VARS+30(1),BLANKS    TEST FOR SYSLOG-COMP DISPLAY\n         BE    LOGR_59L             IF BLANK, DISPLAY OTHER TYPE\n*\n         MVC   MSGT1+0(1),LOG_REC    COPY RECORD TYPE INTO MESSAGE\n         MVC   MSGT1+1(1),LOG_REQ    COPY REQUEST TYPE INTO MESSAGE\n         MVC   MSGT1+2(7),LOG_ROU    COPY ROUTE CODES INTO MESSAGE\n         MVC   MSGT1+10(8),LOG_SYS   COPY SYSTEM INTO MESSAGE\n         MVC   MSGT1+19(7),LOG_DAT   COPY DATE INTO MESSAGE\n         MVC   MSGT1+27(11),LOG_TIM  COPY TIME INTO MESSAGE\n         MVC   MSGT1+39(8),LOG_JOB   COPY JOBNAME/CONSOLE INTO MESSAGE\n         MVC   MSGT1+48(8),LOG_REQFL   COPY REQUEST FLAGS INTO MESSAGE\n         MVC   MSGT1+57,LOG_TXT      COPY MSG TEXT INTO MESSAGE\n*        MVC   MSGT1+234(5),LOG_CBS  WHAT CONTROL BLOCKS WE HAVE READ\n*\n         B     LOGR_59M             NOW LETS PRINT IT\nLOGR_59L EQU   *\n         MVC   MSGT1+1(7),LOG_DAT    COPY DATE INTO MESSAGE\n         MVC   MSGT1+9(11),LOG_TIM   COPY TIME INTO MESSAGE\n         MVC   MSGT1+21(8),LOG_SYS   COPY SYSTEM INTO MESSAGE\n         MVC   MSGT1+28(8),LOG_JOB   COPY JOBNAME/CONSOLE INTO MESSAGE\n         MVC   MSGT1+39(1),LOG_REC   COPY RECORD TYPE INTO MESSAGE\n         MVC   MSGT1+41,LOG_TXT      COPY MSG TEXT INTO MESSAGE\n*        MVC   MSGT1+234(5),LOG_CBS  WHAT CONTROL BLOCKS WE HAVE READ\nLOGR_59M EQU   *\n         SAM24\n         PUT   LOGOUT,MSGT1        PRINT THE LINE\n         SAM64\n         MVC   LOG_CBS(5),BLANKS\n*--------------------------------------------------------------------*\n* If we are MLM, loop back to display the next                       *\n*--------------------------------------------------------------------*\n         MVC   WTLFLAG,=CL2'M '    RESET WTLFLAG TO MLM\n         C     R7,=F'0'            CHECK IF THE NEXT OFFSET IS BLANK\n         BE    LOGR_30             (NO MORE BLOCKS) SO READ SOME MORE\nLOGR_59N EQU   *\n         L     R6,MDB_LEN\n         AH    R8,MDBTLEN          ADD TEXT OBJECT LENGTH\n         CLC   WTLFLAG(1),=C'M'\n         BNE   LOGR_59P\nLOGR_59P CR    R8,R6               COMPARE END OF MDB BLOCK\n         BL    LOGR_59             IF STILL DATA, LETS PARSE AGAIN\n*--------------------------------------------------------------------*\n* Add the lengths to get to MDB Text Object (to step through data)   *\n*--------------------------------------------------------------------*\nLOGR_60  EQU   *\n         LR    R8,R6               MAKE R8 POINT TO NEXT BLOCK\n*--------------------------------------------------------------------*\n* Loop back if there is another MDB in the log block                 *\n*--------------------------------------------------------------------*\nLOGR_61  EQU   *\n         C     R7,=F'0'            CHECK IF THE NEXT OFFSET IS BLANK\n         BE    LOGR_30             (NO MORE BLOCKS) SO READ SOME MORE\n         AR    R7,R11              ADD THE NEXT OFFSET TO BUFFER BASE\n         LR    R9,R7               COPY BACK TO REG FOR IXGBRMLT\n         BCT   R3,LOGR_50A         DECR LOGBLOCKS, & RETURN TO PROCESS\n         B     LOGR_END            STOP READING\n*--------------------------------------------------------------------*\n* Issue IXGBRWSE to end the logstream request and disconnect.        *\n* Then release the storage for the buffer.                           *\n*--------------------------------------------------------------------*\nLOGR_END SAM31                       STOP BROWSING\n         IXGBRWSE REQUEST=END,                                         X\n               STREAMTOKEN=LSTOKEN,                                    X\n               BROWSETOKEN=BRSTOKEN,                                   X\n               MODE=SYNC,                                              X\n               ANSAREA=ANSWER,                                         X\n               ANSLEN=ANSLEN,                                          X\n               RSNCODE=RSNCODE,                                        X\n               MF=S,                                                   X\n               RETCODE=RETCODE\n*                                     DISCONNECT FROM OPERLOG\n         IXGCONN REQUEST=DISCONNECT,                                   X\n               STREAMTOKEN=LSTOKEN,                                    X\n               ANSAREA=ANSWER,                                         X\n               MF=S,                                                   X\n               ANSLEN=ANSLEN\n         SAM64\n         PRINT NOGEN\nMN       EQU   *                               RELEASE LOGBLOCK BUFFER\n         STORAGE RELEASE,LENGTH=XQBUFFL,ADDR=(R11)\n*--------------------------------------------------------------------*\n* Close Output file, free storage and exit                           *\n*--------------------------------------------------------------------*\nRETURN   EQU   *                           CLOSE SYSPRINT\n         CLOSE LOGOUT\nRETURN1  EQU   *                              RELEASE WORKAREA BUFFER\n         STORAGE RELEASE,ADDR=(R12),LENGTH=WORKLEN\n         LGHI    R15,0                        SET RETURN CODE\n         LG      R13,128(,R13)                RESTORE SAVEAREA\n         LG      R14,8(,R13)\n         LMG     R0,R12,24(R13)\n         BR      R14                          LETS LEAVE!\n*\n*--------------------------------------------------------------------*\n* Date conversion routine from IEAMDBLG (IBM supplied) to convert    *\n* from YYYYDDD to STCK format                                        *\n*--------------------------------------------------------------------*\nCONVSTCK BAKR  R14,0\n         CLC   0(7,R3),=XL7'0'\n         BE    CONVDONE\n         PACK  CONVDATE,0(7,R3)\n         SP    CONVDATE,=P'1900000'\n         CONVTOD CONVVAL=CONVWORK,                                     X\n               TODVAL=(R4),                                            X\n               TIMETYPE=BIN,                                           X\n               DATETYPE=YYDDD\n         LTR   R15,R15\n         BZ    CONVDONE\n         SAM24\n         XC    MSGT2,MSGT2\n         MVC   MSGT2,=C'LOGR005E Cannot convert date to STCK- '\n         LA    R3,7(R3)\n         MVC   MSGT2+38(15),0(R3)\n         MVC   MSGT2+53(80),BLANKS\n         PUT   LOGOUT,MSGT2\n         SAM64\n         ABEND 4,DUMP             ABEND U0004 IF NO CONVERSION\nCONVDONE PR    ,\n*\n*--------------------------------------------------------------------*\n* Static declarations                                                *\n*--------------------------------------------------------------------*\nSAVEAR64 DC    18FD'0'                   SAVE AREA\n         LTORG                           LITERAL POOL AREA\n*\nBUFFLEN  DC    F'256'                    BUFFER LENGTH\nALET     DC    F'0'                      ACCESS LIST ENTRY TABLE\nXQBUFFL  EQU   128*1024                  BUFFER SIZE\nXQBUFLEN DC    A(XQBUFFL)                POINTER TO BUFFER SIZE\nLSNAME   DC    CL26'SYSPLEX.OPERLOG'     LOGSTREAM NAME\nANSWER   DS    CL(ANSAA_LEN+256)         ANSWER AREA FOR REQ=START\nANSLEN   DC    A(L'ANSWER)               ANSWER AREA LENGTH\n*\n*--------------------------------------------------------------------*\n* EXECUTE combinations..                                             *\n*--------------------------------------------------------------------*\nPARAMETR MVC   PARM(0),0(R4)             GET PARAMETER\nDATAVAL  MVC   DATAV(0),0(R4)            GET PARAMETER\nWTLPULL  MVC   LOG_TXT(*-*),0(R5)        EXTRACT MESSAGE TEXT\nCHKJOB   CLC   LOG_JOB(0),0(R6)          COMPARE JOBNAME\nCHKMSG   CLC   LOG_TXT+1(0),0(R9)        COMPARE MESSAGE\n*\n*--------------------------------------------------------------------*\n* If the user specifies TODAY, lets give them today's date/time      *\n*--------------------------------------------------------------------*\nSETTIME  EQU   *\n         TIME STCK,DECTIME,LINKAGE=SYSTEM      GET TIME\n         LG    R7,TIMEOFFST                    STORE LOCAL TIME OFFSET\n         SLG   R7,LEAPSECS                     SUBTRACT LEAP SECS\n         ALG   R7,DECTIME                      ADD GMT TIME\n         STG   R7,DECTIME                      STORE\n         CLC   PARM(8),PYESTER                 WAS YESTERDAY SPECIFIED?\n         BNE   SETTIME1                        IF NO, CONTINUE\n         LG    R7,DECTIME                      LETS GET THE TIME AGAIN\n         SLG   R7,MINUSDAY                     SUBTRACT ONE DAY\n         STG   R7,DECTIME                      STORE\nSETTIME1 EQU   *                               CONVERT TIME\n         STCKCONV STCKVAL=DECTIME,CONVVAL=DECWORK,                     X\n               TIMETYPE=DEC,DATETYPE=YYYYDDD\n         LA    R6,DECWORK\n         LA    R8,DECTIME\n         MVC   0(8,R8),8(R6)                   COPY DATE\n         UNPK  DECCHAR(8),DECTIME(5)           UNPACK\n         MVC   START_DAT(7),DECCHAR            COPY DATE TO START DATE\n         MVC   START_DAT+7,ZEROMIN             ADD MIDNIGHT\n         MVC   VARS+0(7),START_DAT             COPY TO PARAMETERS\n         MVC   VARS+7(1),DOT\n         MVC   VARS+8(4),ZEROMIN\n         MVC   END_DAT,START_DAT               COPY START TO END DATE\n         XC    DECTIME,DECTIME\n         MVC   0(2,R8),0(R6)                   COPY CURRENT TIME\n         UNPK  DECCHAR(5),DECTIME(3)           UNPACK\n*        ABEND 10,DUMP\n         MVC   VARS+15(7),END_DAT              COPY TO PARAMETERS\n         MVC   VARS+22(1),DOT\n         MVC   VARS+23(4),DECCHAR              PUT IN CURRENT TIME\n         MVC   END_DAT+7(4),DECCHAR\n         CLC   PARM(8),PYESTER                 CHECK FOR YESTERDAY?\n         BNE   SETTIME3                        IF NO, CONTINUE\n         MVC   VARS+23(4),ENDMIN               ELSE SET TO 23:59\n         MVC   END_DAT+7(4),ENDMIN\nSETTIME3 B     PG_02                BRANCH BACK TO CONTINUE PARSING\n*--------------------------------------------------------------------*\n* More declarations...                                               *\n*--------------------------------------------------------------------*\nLINEREAD EQU   X'01'                      FLAG FOR READING FIRST MLM\nCOLON    DC    C':'\nMINUSDAY DC    X'000141DD76000000'        TOD TIME FOR ONE DAY\nZEROMIN  DC    C'0000'\nENDMIN   DC    C'2359'\nDOT      DC    C'.'\n*\nBLANKS   DC    CL160' '\n*\nRETCODE  DS    F                          PARAMETERS FOR LOGGER CONN.\nRSNCODE  DS    F\nBLKSIZE  DS    F\nLSTOKEN  DC    XL16'00'\nTIMESTMP DS    2F,2F\nBRSTOKEN DS    CL4\nREPLY    DS    CL4\nCONVWORK DC    4F'0'                      WORK VARIABLES FOR STCK/TOD\nCONVDATE EQU   CONVWORK+8,4\n*                                         TRANSLATION TABLE\n*\nTRTTABLE DC    XL16'000102030405060708090A0B0C0D0E0F'\n         DC    XL16'101112131415161718191A1B1C1D1E1F'\n         DC    XL16'202122232425262728292A2B2C2D2E2F'\n         DC    XL16'303132333435363738393A3B3C3D3E3F'\n         DC    XL16'404142434445464748494A004C4D4E4F'\n         DC    XL16'505152535455565758595A5B5C5D5E5F'\n         DC    XL16'606162636465666768696A6B6C6D6E6F'\n         DC    XL16'707172737475767778797A7B7C7D7E7F'\n         DC    XL16'808182838485868788898A8B8C8D8E8F'\n         DC    XL16'909192939495969798999A9B9C9D9E9F'\n         DC    XL16'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'\n         DC    XL16'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    XL16'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    XL16'00000000000000000000FAFBFCFDFEFF'\nHEXTABLE EQU   *-240\n         DC    C'0123456789ABCDEF'         HEXTABLE FOR TRANSLATION\n*\nHDRMSG   DC    C' Message(s) : '           HEADER MESSAGES\nHDRJOB   DC    C' Jobname(s) : '\nHDRSYS   DC    C' System(s)  : '\nHDRSYC   DC    C' SYSLOG compatibility mode  '\n*\nPNOHDR   DC    C'NOHEADER'           PARAMETERS WITHOUT BRACKETS\nPSYSLOG  DC    C'SYSLOG'\nPTODAY   DC    C'TODAY'\nPYESTER  DC    C'YESTERDAY'\nMULTI_ID DC    C'   '                MULTI-LINE INDICATOR\n*\nLOGOUT   DCB   DDNAME=LOGOUT,DSORG=PS,MACRF=(PM),DEVD=DA,LRECL=240\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GL),EODAD=PG_SYSIN\n*--------------------------------------------------------------------*\n* Display Header                                                     *\n*--------------------------------------------------------------------*\n*\nTITLE1   DC    C'------------------------------------------------------X\n               -----------  '\nTITLE2   DC    C' L O G R E A D  64 - running on XX with XXXXXX XX.XX.XX\n               X  (v&LOGVR) '\nTITLE3   DC    C' Dates XXXX.XXX XX:XX to XXXX.XXX XX:XX               X\n                            '\n*\nLTORGEND  DS    0D              END OF LTORG SECTION\n*--------------------------------------------------------------------*\n* Main DSECT & DCBs                                                  *\n*--------------------------------------------------------------------*\nWORKAREA  DSECT\nVARS      DS    CL15               START DATE & TIME\n          DS    CL15               END DATE & TIME\n          DS    CL6                SYSLOG COMP\n          DS    CL8                NOHEADER\n          DS    CL80               SYSTEMS\nVARS1     DS    CL80               MESSAGE IDS\n          DS    CL80               JOBNAMES\nPARMLEN   DS    H                  LENGTH OF PARM DATA IN SYSIN\nTMPPARM   DS    CL80               STORAGE FOR SYSIN PARM\nMSGT1     DS    CL240              FULL LENGTH MESSAGE BUFFER\nMSGT2     DS    CL80               MESSAGE BUFFER\nLOG_REC   DS    CL1                SYSLOG MESSAGE RECORD TYPE\nLOG_REQ   DS    CL1                SYSLOG MESSAGE REQUEST TYPE\nLOG_ROU   DS    CL7                SYSLOG MESSAGE ROUTING CODES\nLOG_SYS   DS    CL8                SYSLOG MESSAGE SYSTEM\nLOG_DAT   DS    CL7                SYSLOG MESSAGE DATESTAMP\nLOG_TIM   DS    CL11               SYSLOG MESSAGE TIMESTAMP\nLOG_JOB   DS    CL8                SYSLOG MESSAGE JOBNAME/CONSOLE\nLOG_MLM   DS    CL8                SYSLOG MESSAGE MULTI-LINE MSG FLAG\nLOG_REQFL DS    CL8                SYSLOG MESSAGE MULTI-LINE MSG FLAG\nLOG_TXT   DS    CL190              SYSLOG MESSAGE TEXT\nLOG_CBS   DS    CL5                CONTROL BLOCKS READ\nLOG_READL DS    X                  MLM FIRST LINE FLAG\nSTART_DAT DS    CL11               WORKING START DATE/TIME\nEND_DAT   DS    CL11               WORKING END DATE/TIME\nSTART_D   DS    CL7                TEMPORARY START DATE FOR CONVSTCK\nEND_D     DS    CL7                TEPORARY END DATE FOR CONVSTCK\nWORK_DAT  DS    CL11               WORKING DATE VARIABLE\nPARM      DS    CL80               PARAMETER STORE\nDATAV     DS    CL80               PARAMETER STORE\nSSTCK     DS    2F                 START DATE CONVERTED TO TOD\nESTCK     DS    2F                 END DATE CONVERTED TO TOD\nCONSNM    DS    CL8                CONSOLE NAME\nCONSID    DS    XL4                CONSOLE ID\nWTLFLAG   DS    CL2                WTL FLAG FOR MESSAGES\nREQFLAG   DS    C                  REQUEST FLAG FOR MESSAGES\nDECTIME   DS    4F                 STCK TIME VALUE\nDECCHAR   DS    CL7                UNPACKED VALUE OF TOD\n          DS    0D                 PREVENT OVERWRITE OF TIME\nTEMPWORD  DS    D                  TEMPORARY DBL WORD FOR SEQUENCE NUM\nLEAPSECS  DS    D                  LEAP SECONDS (FROM CVT)\nTIMEOFFST DS    D                  LOCALTIME OFFSET (FROM CVT)\nDECWORK   DS    CL16               CONVERTED STCK TO TOD VALUE\nMDB_LEN   DS    F\nWORKLEN   EQU   *-WORKAREA\n*--------------------------------------------------------------------*\n* DSECTS                                                             *\n*--------------------------------------------------------------------*\nXQBUF    DSECT                     BUFFER FOR IXGBROWSE\n         ORG   *+XQBUFFL\n         DS    0D\n*--------------------------------------------------------------------*\n* Macro for DCBs                                                     *\n*--------------------------------------------------------------------*\n         SPACE\n         DCBD  DEVD=DA,DSORG=PO\n         END\n**********************************************************************\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT747/FILE747.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT747", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}