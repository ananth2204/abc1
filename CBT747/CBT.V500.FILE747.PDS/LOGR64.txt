**********************************************************************
* L O G R 64 - SYSTEM LOGGER READER        | Mark Naughton 2001-2006 *
**********************************************************************
*                                                                    *
* History                                                            *
* -------                                                            *
* 25/09/2001 - 1.0.0 - LOGREAD is working correctly now.             *
*                      (History to end of Version 1.0.9 deleted)     *
* 11/08/2003 - 1.0.9 - Support for multiple jobnames added.          *
* 17/07/2006 - 2.0.0 - Started 64-bit version.                       *
* 14/08/2006 -       - Finished 64-bit version - runs faster, more   *
*                      features than before! Testing complete.       *
* 06/10/2006 - 2.0.1 - Thanks to Steve Mowles for reporting a bug    *
*                      in the LeapSeconds/TimeOffset. Steve gave a   *
*                      a fix, and it now works East/West of GMT -    *
*                      Thanks Steve!                                 *
*                                                                    *
* ------------------------------------------------------------------ *
* Parameters                                                         *
* ----------                                                         *
*                                                                    *
* All parameters are specified in the SYSIN DD.                      *
*                                                                    *
* START(yyyjjj.hhmm)  -> Start date and time                         *
* END(yyyyjjj.hhmm)   -> End date and time                           *
* SYS(ssss)           -> System name                                 *
* MSG(mmmmmmmmmmmm)   -> Message ID                                  *
* JOB(jjjjjjjjjjjj)   -> Jobname                                     *
* SYSLOG              -> Display output like SYSLOG                  *
* NOHEADER            -> Do not display the header in the display    *
* TODAY               -> Use todays date from 00:00 to current time  *
* YESTERDAY           -> Use yesterdays date from 00:00 to 23:59     *
*                                                                    *
* If the date/time parameters are not specified, the program abends  *
* with U0001 or U0002.                                               *
*                                                                    *
* You can specify multiple systems, messages and jobnames separated  *
* by a space, for the length of the line).                           *
*                                                                    *
**********************************************************************
* ERROR CODES                                                        *
* -----------                                                        *
*                                                                    *
* ABEND U0001 - Invalid Start Date parameter                         *
* ABEND U0002 - Invalid End Date parameter                           *
* ABEND U0003 - No SYSIN DD specified                                *
* ABEND U0004 - Incorrect specification for parameter                *
* ABEND U0005 - Cannot connect to logstream                          *
* ABEND U0006 - Cannot start a browse function in logstream          *
* ABEND U0007 - Cannot read from the logstream                       *
*                                                                    *
* R6 and R7 contain RETCODE and RSNCODE for diagnosis.               *
*                                                                    *
**********************************************************************
         TITLE 'LOGR64 - SYSTEM LOGGER READER'
         PRINT NOGEN
         CVT   DSECT=YES
         IHAPSA
         IHAECVT DSECT=YES
         IXGCON
         IXGANSAA LIST=YES
         IXGQBUF
         IXGBRMLT
         IEESMCA
         IEAVG132
         IEAVM105
         PRINT NOGEN
*--------------------------------------------------------------------*
* Defines AMODE and REGISTERS                                        *
*--------------------------------------------------------------------*
LOGR64   AMODE 64
LOGR64   RMODE ANY
*
&LOGVR   SETC  '2.0.1'
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
         EJECT
*--------------------------------------------------------------------*
* Define CSECT, EYECATCHER and setup ENVIRONMENT                     *
* R10 - Base                                                         *
* R12 - LTORG Base                                                   *
* R13 - Workarea                                                     *
*--------------------------------------------------------------------*
LOGR64   CSECT
         SYSSTATE ASCENV=P,AMODE64=YES,ARCHLVL=2     SPECIFY 64BIT MODE
         PRINT NOGEN
         COPY  IEABRC                             USE RELATIVE BRANCHES
         STMG  R14,R12,8(R13)                     CREATE THE SAVE AREA
         LARL  R14,SAVEAR64
         MVC   4(4,R13),=C'F4SA'-SAVEAR64(R14)    USE FORMAT4
         STG   R13,128(,R14)
         STG   R14,136(,R13)
         LGR   R13,R14
         USING (SAVEAR64,LTORGEND),R13       CREATE BASE FROM SAVEAREA
         MVC   SAVEAR64+4,=C'F4SA'           ...PAST LTORG LOCATION
         B     LOGREAD1                      SKIP EYECATCHER
*
EYECATCH DC    CL40'LOGR64 &LOGVR;&SYSDATE &SYSTIME;'
LOGREAD1 EQU   *
*
         STORAGE OBTAIN,LENGTH=WORKLEN,LOC=(RES,64)
         LAE   R12,0(,R1)
         USING WORKAREA,R12                 GET STORAGE FOR WORKAREA
         LLGTR R12,R12
*
         LA    R3,LOG_REQ           POINT TO FIRST MESSAGE ELEMENT
         MVC   0(1,R3),=C' '        THEN BLANK IT OUT
         MVC   1(239,R3),0(R3)
         MVI   VARS,C' '            BLANK OUT THE VARIABLE ARRAYS
         MVC   VARS+1(123),VARS
         MVI   VARS1,C' '
         MVC   VARS1+1(159),VARS1
*
         USING PSA,R0                ADDRESS PSA
         L     R9,FLCCVT
         USING CVTMAP,R9             ADDRESS CVT
         L     R9,CVTEXT2
         USING CVTXTNT2,R9
         LG    R4,CVTLDTO            GET LOCAL TIME OFFSET
         STG   R4,TIMEOFFST          STORE FOR LATER USE
         LG    R4,CVTLSO             GET LEAP SECONDS
         STG   R4,LEAPSECS           STORE FOR LATER USE
         DROP  R9
*--------------------------------------------------------------------*
* Now we open our DDs and test for the SYSIN                         *
* R0  - Base for PSA                                                 *
* R2  - SYSIN                                                        *
* R10 - Base                                                         *
* R12 - Work Area                                                    *
* R13 - Save Area & LTORG                                            *
*--------------------------------------------------------------------*
PG_01    EQU   *
         OPEN  (LOGOUT,OUTPUT)
         OPEN  (SYSIN,INPUT)      OPEN FOR BUSINESS
         LA    R2,SYSIN           SET R2 TO SYSIN
         USING IHADCB,R2
         LLGTR R2,R2
         TM    DCBOFLGS,DCBOFOPN  CHECK THE DATASET IS OPEN
         BO    PG_02_1            IF NOT, ABEND WITH ERROR
         SAM24
         XC    MSGT2,MSGT2
         MVC   MSGT2(32),=C'LOGR007E No SYSIN specified!'
         MVC   MSGT2+47(80),BLANKS
         PUT   LOGOUT,MSGT2
         SAM64
         ABEND 3,DUMP             ABEND U0003 IF NO SYSIN
*--------------------------------------------------------------------*
* Now we retrieve our parameters                                     *
* R0  - Base for PSA                                                 *
* R3  - Storage for reading SYSIN                                    *
* R10 - Base                                                         *
* R12 - Work Area                                                    *
* R13 - Save Area & LTORG                                            *
*--------------------------------------------------------------------*
PG_02_1  EQU   *
         DROP  R2
PG_02    EQU   *
         SLR   R3,R3
         LA    R3,TMPPARM         NEEDED FOR STORAGE FOR R3 ELSE 0C4!
         MVC   PARM,BLANKS        BLANK OUT VARIABLES FOR PARSING
         MVC   DATAV,BLANKS
         SAM24
         GET   SYSIN              GET DATA (IN 24BIT MODE)
         SAM64
         LA    R1,2(R1)
         MVC   0(78,R3),0(R1)     COPY DATA
         LLGTR R3,R3              CLEAR HI-ORDER
         LGR   R4,R3              COPY THE PARAMETER FOR COMPARE
*--------------------------------------------------------------------*
* Handle parameters that will not use brackets in their use          *
*--------------------------------------------------------------------*
SE_00_01 CLC   0(6,R3),PSYSLOG    IF SYSLOG SPECIFIED,
         BNE   SE_00_02           IF NOT, CONTINUE
         MVC   PARM(6),0(R3)      ELSE STORE IN PARM THEN
         B     SE_11              ...BRANCH TO STORE
SE_00_02 CLC   0(8,R3),PNOHDR     IF NOHEADER SPECIFIED
         BNE   SE_00_03           IF NOT,CONTINUE
         MVC   PARM(8),0(R3)      ELSE STORE IN PARM THEN
         B     SE_12              ...BRANCH TO STORE
SE_00_03 CLC   0(5,R3),PTODAY     IF TODAY SPECIFIED
         BNE   SE_00_04           IF NOT, CONTINUE
         MVC   PARM(5),0(R3)      ELSE STORE IN PARM THEN
         B     SE_13              ...BRANCH TO STORE
SE_00_04 CLC   0(9,R3),PYESTER    IF YESTERDAY SPECIFIED
         BNE   SE_01              IF NOT, CONTINUE
         MVC   PARM(9),0(R3)      ELSE STORE IN PARM THEN
         B     SE_14              ...BRANCH TO STORE
*--------------------------------------------------------------------*
* Parse the parameters and copy into array                           *
* R0  - Base for PSA                                                 *
* R3  - Storage for data                                             *
* R4  - Copy of original data, starting at original address          *
* R5  - Temporary register for calculation                           *
* R10 - Base                                                         *
* R12 - Work Area                                                    *
* R13 - Save Area & LTORG                                            *
*--------------------------------------------------------------------*
SE_01    B     SE_03
SE_02    LA    R3,1(R3)
SE_03    CLC   0(1,R3),=C'('      CHECK FOR BRACKET
         BNE   SE_02              IF NOT FOUND, STEP FORWARD
SE_04    LGR   R5,R3              COPY PARAMETER FOR SUBTRACTION
         SGR   R5,R4              GET LENGTH OF DATA BEFORE (
         BZ    PG_SYSIN           IF NO DATA, STOP READING PARAMETERS
         BCTGR R5,0               DECREMENT BEFORE EXECUTE
         LLGTR R5,R5
         EX    R5,PARAMETR        COPY DATA BEFORE (
         LA    R3,1(R3)           STEP OVER THE (
         LLGTR R3,R3
         LGR   R4,R3              COPY DATA LEFT TO TEMP STORE
         B     SE_06
*
SE_05    LA    R3,1(R3)
SE_06    CLC   0(1,R3),=C')'      SEARCH FOR END BRACKET
         BNE   SE_05              IF NOT FOUND, STEP FORWARD
         LGR   R5,R3              COPY DATA
         SGR   R5,R4              SUBTRACT TO GET BLANK SPACE AT END
         BZ    PG_SYSIN           NOW SUB FROM STORE TO GET GOOD LEN
         BCTGR R5,0               DECREMENT BEFORE EXECUTE
         EX    R5,DATAVAL         EXTRACT PARM DATA
         LA    R3,DATAV           SET ADDRESS
**
         CLC   PARM(5),=C'START'  IS THE PARAMETER 'START'?
         BNE   SE_07
         MVC   VARS+0,0(R3)       COPY INTO THE PARAMETER ARRAY
         MVC   START_DAT(7),0(R3)   COPY START DATE FOR LATER
         MVC   START_DAT+7(4),8(R3) COPY TIME AFTER DATE FOR COMPARE
         B     PG_02              GET THE NEXT PARAMETER
*
SE_07    CLC   PARM(3),=C'END'    IS THE PARAMETER 'END'?
         BNE   SE_08
         MVC   VARS+15,0(R3)      COPY INTO THE PARAMETER ARRAY
         MVC   END_DAT(7),0(R3)   COPY START DATE FOR LATER
         MVC   END_DAT+7(4),8(R3) COPY TIME AFTER DATE FOR COMPARE
         B     PG_02              GET THE NEXT PARAMETER
*
SE_08    CLC   PARM(3),=C'MSG'    IS THE PARAMETER 'MSG'?
         BNE   SE_09
         MVC   VARS1+0(80),0(R3)  COPY INTO THE PARAMETER ARRAY
         B     PG_02              GET THE NEXT PARAMETER
*
SE_09    CLC   PARM(3),=C'SYS'    IS THE PARAMETER 'SYS'?
         BNE   SE_10
         MVC   VARS+44(80),0(R3)  COPY INTO THE PARAMETER ARRAY
         B     PG_02              GET THE NEXT PARAMETER
*
SE_10    CLC   PARM(3),=C'JOB'    IS THE PARAMETER 'JOB'?
         BNE   SE_11
         MVC   VARS1+80(80),0(R3) COPY INTO THE PARAMETER ARRAY
         B     PG_02              GET THE NEXT PARAMETER
*
SE_11    CLC   PARM(6),PSYSLOG    IS THE PARAMETER 'SYSLOG'?
         BNE   SE_12
         LA    R3,PARM
         MVC   VARS+30(6),0(R3)   COPY INTO THE PARAMETER ARRAY
         B     PG_02              GET THE NEXT PARAMETER
*
SE_12    CLC   PARM(8),PNOHDR       IS THE PARAMETER 'NOHEADER'?
         BNE   SE_13
         LA    R3,PARM
         MVC   VARS+36(8),0(R3)   COPY INTO THE PARAMETER ARRAY
         B     PG_02              GET THE NEXT PARAMETER
*
SE_13    CLC   PARM(5),PTODAY     IS THE PARAMETER 'TODAY'?
         BNE   SE_14
         B     SETTIME            IF YES, SET THE DATE/TIME
*
SE_14    CLC   PARM(8),PYESTER    IS THE PARAMETER 'YESTERDAY'?
         BNE   PG_02
         B     SETTIME            IF YES, SET THE DATE/TIME
END_SE   EQU   *
         B     PG_SYSIN           IF NO DATA, STOP READING PARAMETERS
*--------------------------------------------------------------------*
* If there are no more parameters, close SYSIN.                      *
* Check to see if Start Date is specified correctly, else abend U0001*
* Check to see if End Date is specified correctly, else abend U0002. *
* R0  - Base for PSA                                                 *
* R3  - Storage for data                                             *
* R10 - Base                                                         *
* R12 - Work Area                                                    *
* R13 - Save Area & LTORG                                            *
*--------------------------------------------------------------------*
PG_SYSIN EQU   *                  WE SHOULD BE HERE IF SYSIN RUNS OUT
         CLOSE SYSIN              CLOSE SYSIN
VAL_P_01 CLC   VARS+0(1),=C' '    CHECK THE START DATE IS NOT BLANK
         BE    VAL_P_AA           IF YES, ABEND
         LA    R3,VARS
         TRT   0(12,R3),TRTTABLE  TEST FOR NUMERICS AND DOT
         BNZ   VAL_P_AA           IF NO, ABEND
         CLC   7(1,R3),=C'.'      CHECK POSITION OF DOT
         BE    VAL_P_02           CONTINUE IF OK
VAL_P_AA EQU   *
         SAM24
         XC    MSGT2,MSGT2
         MVC   MSGT2(32),=C'LOGR001E Incorrect start date - '
         MVC   MSGT2+32(15),VARS+0
         MVC   MSGT2+47(80),BLANKS
         PUT   LOGOUT,MSGT2
         SAM64
         ABEND 1,DUMP             ABEND U0001 IF START DATE INCORRECT
VAL_P_02 CLC   VARS+15(1),=C' '   CHECK THE END DATE IS NOT BLANK
         BE    VAL_P_AB
         LA    R3,VARS
         LA    R3,15(R3)          STEP OVER THE START DATE
         TRT   0(12,R3),TRTTABLE  TEST FOR NUMERICS AND DOT
         BNZ   VAL_P_AB           IF NO, ABEND
         CLC   7(1,R3),=C'.'      CHECK POSITION OF DOT
         BE    DISPHDR            CONTINUE IF OK
VAL_P_AB EQU   *
         SAM24
         XC    MSGT2,MSGT2
         MVC   MSGT2,=C'LOGR002E Incorrect end date - '
         MVC   MSGT2+30(15),VARS+15
         MVC   MSGT2+45(80),BLANKS
         PUT   LOGOUT,MSGT2
         SAM64
         ABEND 2,DUMP             ABEND U0002 IF END DATE INCORRECT
*--------------------------------------------------------------------*
* Display the output/header                                          *
*--------------------------------------------------------------------*
DISPHDR  EQU   *
*--------------------------------------------------------------------*
* If we have specified NOHEADER then skip this                       *
* R0  - Base for PSA                                                 *
* R3  - Storage for data                                             *
* R10 - Base                                                         *
* R12 - Work Area                                                    *
* R13 - Save Area & LTORG                                            *
*--------------------------------------------------------------------*
         LA    R3,VARS
         CLC   36(8,R3),=C'NOHEADER'    IF NOHEADER, SKIP THE DISPLAY
         BE    DISPHDR7
*--------------------------------------------------------------------*
* Display the main header                                            *
* We use a space character and fill across the 240 char-gap.         *
* R0  - Base for PSA                                                 *
* R3  - Storage for data                                             *
* R4  - Base for ECVT                                                *
* R9  - Base for CVT                                                 *
* R10 - Base                                                         *
* R12 - Work Area                                                    *
* R13 - Save Area & LTORG                                            *
*--------------------------------------------------------------------*
         SAM24
         MVC   MSGT1,TITLE1     DISPLAY 1ST LINE OF HEADER
         LA    R3,MSGT1
         LA    R3,66(R3)
         MVC   1(174,R3),0(R3)
         PUT   LOGOUT,MSGT1
*
         SAM64
         MVC   MSGT1,TITLE2          DISPLAY 2ND LINE
         LA    R3,MSGT1
         LA    R3,66(R3)             SET R3 TO HYPHEN
         MVC   1(174,R3),0(R3)       COPY HYPHEN THROUGH MSGT1
         L     R9,FLCCVT
         USING CVT,R9                ADDRESS CVT
         L     R4,CVTECVT            ADDRESS ECVT OFF CVT
         USING ECVT,R4
         MVC   MSGT1+32(2),ECVTLPNM  MOVE IN LPARNAME
         MVC   MSGT1+40(6),ECVTPNAM  MOVE IN O/S PRODUCT NAME
         MVC   MSGT1+47(2),ECVTPVER  MOVE IN PRODUCT VERSION
         MVC   MSGT1+50(2),ECVTPREL  MOVE IN PRODUCT RELEASE
         MVC   MSGT1+53(2),ECVTPMOD  MOVE IN PRODUCT MODIFICATION
         SAM24
         PUT   LOGOUT,MSGT1          OUTPUT HEADER
         MVC   MSGT1,BLANKS          DISPLAY 3RD LINE
         LA    R3,MSGT1
         LA    R3,66(R3)             SET R3 TO HYPHEN
         MVC   1(174,R3),0(R3)       COPY HYPHEN THROUGH MSGT1
         PUT   LOGOUT,MSGT1
         MVC   MSGT1,TITLE3          MOVE IN HEADER LINE
         LA    R3,MSGT1
         LA    R3,66(R3)             SET R3 TO HYPHEN
         MVC   1(174,R3),0(R3)       COPY HYPHEN THROUGH MSGT1
         LA    R4,VARS
         MVC   MSGT1+7(4),0(R4)      COPY IN START DATE
         MVC   MSGT1+12(3),4(R4)
         MVC   MSGT1+16(2),8(R4)     COPY IN START TIME
         MVC   MSGT1+19(2),10(R4)
         LA    R4,15(R4)
         MVC   MSGT1+25(4),0(R4)     COPY IN END DATE
         MVC   MSGT1+30(3),4(R4)
         MVC   MSGT1+34(2),8(R4)     COPY IN END TIME
         MVC   MSGT1+37(2),10(R4)
         PUT   LOGOUT,MSGT1          OUTPUT HEADER
*--------------------------------------------------------------------*
* Check if SYSTEMS are specified, if so, output the header           *
*--------------------------------------------------------------------*
         LA    R3,VARS
         LA    R3,44(R3)
         CLC   0(1,R3),=C' '         CHECK FOR SYSTEM PARAMETER
         BE    DISPHDR3              IF NOT, CONTINUE
DISPHDR2 EQU   *
         XC    MSGT1,MSGT1           ELSE DISPLAY IN HEADER
         MVC   MSGT1,HDRSYS
         MVC   MSGT1+14(80),VARS+44
         LA    R3,MSGT1
         LA    R3,93(R3)             COPY SPACE THROUGH THE LINE
         MVC   1(146,R3),0(R3)
         PUT   LOGOUT,MSGT1          OUTPUT HEADER LINE
*--------------------------------------------------------------------*
* Check if JOBNAME was specified, if so, output the header           *
*--------------------------------------------------------------------*
DISPHDR3 EQU   *
         LA    R3,VARS1
         LA    R3,80(R3)
         CLC   0(1,R3),=C' '         CHECK FOR JOBNAME PARAMETER
         BE    DISPHDR4              IF NOT, CONTINUE
         XC    MSGT1,MSGT1           ELSE DISPLAY IN HEADER
         MVC   MSGT1,HDRJOB
         MVC   MSGT1+14(80),VARS1+80
         LA    R3,MSGT1
         LA    R3,93(R3)             COPY SPACE THROUGH THE LINE
         MVC   1(146,R3),0(R3)
         PUT   LOGOUT,MSGT1          OUTPUT HEADER LINE
*--------------------------------------------------------------------*
* Check if MESSAGE was specified, if so, output the header           *
*--------------------------------------------------------------------*
DISPHDR4 EQU   *
         LA    R3,VARS1
         CLC   0(1,R3),=C' '         CHECK FOR MESSAGE PARAMETER
         BE    DISPHDR5              IF NOT, CONTINUE
         XC    MSGT1,MSGT1           ELSE DISPLAY IN HEADER
         MVC   MSGT1,HDRMSG
         MVC   MSGT1+14(80),VARS1+0
         LA    R3,MSGT1
         LA    R3,93(R3)             COPY SPACE THROUGH LINE
         MVC   1(146,R3),0(R3)
         PUT   LOGOUT,MSGT1          OUTPUT HEADER LINE
*--------------------------------------------------------------------*
* Check if SYSLOG COMPATIBILITY is specified                         *
*--------------------------------------------------------------------*
DISPHDR5 EQU   *
         LA    R3,VARS
         LA    R3,30(R3)
         CLC   0(1,R3),=C' '         CHECK FOR SYSLOG PARAMETER
         BE    DISPHDR6              IF NOT, CONTINUE
         XC    MSGT1,MSGT1
         MVC   MSGT1,HDRSYC
         LA    R3,MSGT1              COPY SPACE THROUGH LINE
         LA    R3,27(R3)
         MVC   1(213,R3),0(R3)
         PUT   LOGOUT,MSGT1          OUTPUT HEADER LINE
*--------------------------------------------------------------------*
* Print the bottom line                                              *
*--------------------------------------------------------------------*
DISPHDR6 EQU   *
         MVC   MSGT1(240),TITLE1
         LA    R3,MSGT1
         LA    R3,66(R3)             COPY HYPHEN THROUGH LINE
         MVC   1(174,R3),0(R3)
         PUT   LOGOUT,MSGT1          OUTPUT HEADER LINE
*
DISPHDR7 EQU   *
         DROP  R4
         DROP  R9
*--------------------------------------------------------------------*
* Convert dates to STCK. Obtain storage for buffer and issue         *
* IXGCONN to connect to the logstream.                               *
* R3  - Storage for dates                                            *
* R4  - Converted date                                               *
* R10 - Base                                                         *
* R11 - Storage for LOGGER data                                      *
* R12 - Work Area                                                    *
* R13 - Save Area & LTORG                                            *
*--------------------------------------------------------------------*
LOGR_00  EQU   *
         MVC   START_D(7),VARS             COPY START DATE/TIME
         MVC   END_D(7),VARS+15            COPY END DATE/TIME
         LA    R3,START_D                  CONVERT START DATE TO STCK
         LA    R4,SSTCK
         BAS   R14,CONVSTCK
         LA    R3,END_D                    CONVERT END DATE TO STCK
         LA    R4,ESTCK
         BAS   R14,CONVSTCK
         STORAGE OBTAIN,LENGTH=XQBUFFL,BNDRY=PAGE,LOC=(RES,64)
         LR    R11,R1
         USING XQBUF,R11                   GET STORAGE FOR BUFFER
         XC    XQBUF,XQBUF
         SAM31                          CONNECT TO THE OPERLOG
         IXGCONN REQUEST=CONNECT,                                      X
               STREAMNAME=LSNAME,                                      X
               AUTH=READ,                                              X
               STREAMTOKEN=LSTOKEN,                                    X
               ANSAREA=ANSWER,                                         X
               RSNCODE=RSNCODE,                                        X
               RETCODE=RETCODE,                                        X
               ANSLEN=ANSLEN
         SAM64
         CLC   RETCODE,=AL4(IXGRETCODEERROR) CHECK IF ERROR?
         BL    LOGR_20                     NO, LETS MOVE ON
LOGR_10  L     R6,RETCODE                  ..ELSE SET RSN/RETCODE
         L     R7,RSNCODE
         ABEND 5,DUMP                      ABEND U0005
*--------------------------------------------------------------------*
* Start IXGBRWSE to connect to logstream at the SEARCH datestamp     *
* R10 - Base                                                         *
* R11 - Storage for LOGGER data                                      *
* R12 - Work Area                                                    *
* R13 - Save Area & LTORG                                            *
*--------------------------------------------------------------------*
LOGR_20  SAM31                          START THE BROWSE
         IXGBRWSE REQUEST=START,                                       X
               STREAMTOKEN=LSTOKEN,                                    X
               SEARCH=SSTCK,                                           X
               GMT=NO,                                                 X
               BROWSETOKEN=BRSTOKEN,                                   X
               ANSAREA=ANSWER,                                         X
               ANSLEN=ANSLEN,                                          X
               RSNCODE=RSNCODE,                                        X
               RETCODE=RETCODE
         SAM64
         CLC   RETCODE,=AL4(IXGRETCODEERROR) CHECK IF ERROR
         BL    LOGR_30                       NO SO CONTINUE
         L     R6,RETCODE                    ELSE SET RET/RSNCODE
         L     R7,RSNCODE                    AND...
         ABEND 6,DUMP                        ABEND U0006
*--------------------------------------------------------------------*
* Issue READBLOCK to read data.                                      *
* R10 - Base                                                         *
* R11 - Storage for LOGGER data                                      *
* R12 - Work Area                                                    *
* R13 - Save Area & LTORG                                            *
*--------------------------------------------------------------------*
LOGR_30  EQU   *
         XC    XQBUF,XQBUF                CLEAR THE BUFFER
         SAM31                            READ BLOCKS OF DATA
         IXGBRWSE REQUEST=READCURSOR,                                  X
               STREAMTOKEN=LSTOKEN,                                    X
               BUFFER=XQBUF,                                           X
               BUFFLEN=XQBUFLEN,                                       X
               BUFFALET=ALET,                                          X
               BLKSIZE=BLKSIZE,                                        X
               DIRECTION=OLDTOYOUNG,                                   X
               BROWSETOKEN=BRSTOKEN,                                   X
               MODE=SYNC,                                              X
               ANSAREA=ANSWER,                                         X
               ANSLEN=ANSLEN,                                          X
               RSNCODE=RSNCODE,                                        X
               RETBLOCKINFO=NO,                                        X
               MULTIBLOCK=YES,                                         X
               RETCODE=RETCODE,                                        X
               MF=S
         SAM64
         CLC   RETCODE,=AL4(IXGRETCODEERROR) CHECK IF ERROR
         BL    LOGR_50                       NO, SO CONTINUE
         L     R6,RETCODE                    ELSE SET RET/RSNCODE
         L     R7,RSNCODE
         ABEND 7,DUMP                        ABEND U0007
*--------------------------------------------------------------------*
* Now step through the buffer, extracting MDB information for the    *
* message.                                                           *
* R3  - Number of Log Blocks                                         *
* R6  - End address of Log Block (used to check for more data)       *
* R7  - IXGBRMLT_NEXTOFFSET to be added to the Buffer Base           *
* R8  - Working copy of Logger data (MULTIBLOCK and MDB)             *
* R9  - Working copy of Logger data (then dropped)                   *
* R10 - Base                                                         *
* R11 - Storage for LOGGER data                                      *
* R12 - Work Area                                                    *
* R13 - Save Area & LTORG                                            *
*--------------------------------------------------------------------*
*--------------------------------------------------------------------*
* Retrieve the Log Block offset and number of log blocks from the    *
* Log Block Header control block.                                    *
*--------------------------------------------------------------------*
LOGR_50  EQU   *
         LR    R8,11                      MAKE A WORKING COPY OF DATA
         USING IXGBRMHD,R8                SET TO MULTIBLOCK HEADER
         L     R3,IXGBRMHD_NUMLOGBLOCKS   GET NUMBER OF BLOCKS
         LA    R5,IXGBRMHD_FIRSTBRMLT     POINT TO FIRST BLOCK
         LR    R9,R5
         DROP  R8
*--------------------------------------------------------------------*
* Read Log Block Header Information                                  *
*--------------------------------------------------------------------*
LOGR_50A EQU   *
         USING IXGBRMLT,R9              SET BASE TO LOGBLOCK
         MVC   LOG_CBS+4(1),=C'L'
         L     R7,IXGBRMLT_NEXTOFFSET   STORE BASE TO NEXT LOGBLOCK
*
         TM    IXGBRMLT_FLAGS,IXGBRMLT_DATARETURNED    IS THERE DATA?
         BNO   LOGR_30                              IF NOT, READ NEXT
         AH    R9,IXGBRMLT_LENGTH
         LR    R8,R9                    COPY POINTER TO LOGBLOCK
*--------------------------------------------------------------------*
* Step through Log Block, getting MDB data                           *
*--------------------------------------------------------------------*
LOGR_51  EQU   *
         USING MDB,R8                   SET BASE TO MDB
         LR    R6,R8                    COPY MDB BASE
         AH    R6,MDBLEN                ADD THE LENGTH
         ST    R6,MDB_LEN             STORE TO CHECK END OF DATA LATER
         MVC   LOG_CBS(1),=C'M'
         CLC   MDBTYPE,=X'0001'         CHECK MDB TYPE IS GEN OBJ
         BNE   LOGR_541                 IF NOT, CHECK FOR OTHER
         LA    R8,MDBHLEN(R8)           ADD HEADER LENGTH TO BASE
LOGR_51A EQU   *
         USING MDBG,R8                  SET BASE TO MDB GEN OBJ
         MVC   LOG_CBS+1(1),=C'G'
         MVC   LOG_REC(1),BLANKS        BLANK ELEMENTS IN MESSAGE
         MVC   LOG_REQ(1),BLANKS
         MVC   LOG_ROU(7),BLANKS
         MVC   LOG_SYS(8),BLANKS
         MVC   LOG_DAT(7),BLANKS
         MVC   LOG_TIM(11),BLANKS
         MVC   LOG_JOB(8),BLANKS
         MVC   LOG_MLM(8),BLANKS
         MVC   WORK_DAT(11),BLANKS
         MVC   LOG_DAT(7),MDBGDSTP      COPY DATE
         MVC   LOG_TIM(11),MDBGTIMH     COPY TIME
         MVC   LOG_TIM+2(1),COLON
         MVC   LOG_TIM+5(1),COLON
         MVC   WORK_DAT(7),MDBGDSTP     COPY DATE/TIME FOR CHECKING
         LA    R4,MDBGTIMH
         MVC   WORK_DAT+7(2),0(R4)
         MVC   WORK_DAT+9(2),3(R4)
*
*--------------------------------------------------------------------*
* Check if we have data between our dates                            *
*--------------------------------------------------------------------*
         CLC   WORK_DAT,START_DAT    HAVE WE REACHED THE START DATE?
         BL    LOGR_60               NO, SO CONTINUE THROUGH THE BUFFER
LOGR_52A CLC   WORK_DAT,END_DAT      HAVE WE REACHED THE END DATE?
         BH    LOGR_END              NOT YET, SO CONTINUE
*
LOGR_53  MVC   LOG_SYS(8),MDBGOSNM   COPY SYSTEM NAME
         MVC   LOG_JOB(8),MDBGJBNM   COPY JOBNAME
*
         SR    R15,R15               CONVERT SEQUENCE TO MLM ID
         ICM   R15,7,MDBGSEQ
         CVD   R15,TEMPWORD
         UNPK  MULTI_ID,TEMPWORD
         OI    MULTI_ID+2,C'0'
*
*--------------------------------------------------------------------*
* Check System of Log Block against the specified Systems            *
*--------------------------------------------------------------------*
LOGR_53A EQU   *
         CLC   VARS+44(1),BLANKS    IS SYSTEM SPECIFIED?
         BE    LOGR_53K             NO, CONTINUE
LOGR_53B EQU   *
         LA    R5,VARS+44           SET REG TO SYSTEM PARM
         LR    R6,R5                COPY FOR POINTER TO START OF PARM
         LA    R4,79(R5)            SET REG TO END OF PARM
         B     LOGR_53D
LOGR_53C LA    R5,1(R5)
LOGR_53D CLI   0(R5),C' '           LOOK FOR SPACE
         BNE   LOGR_53C
         CR    R5,R4                COMPARE CURRENT TO END
         BE    LOGR_60              IF NO MORE DATA, CONTINUE
         LA    R0,X'40'
         LA    R1,MDBGOSNM
         CLST  R6,R1                SEARCH FOR SYSTEM
         BE    LOGR_53K             IF FOUND, CONTINUE
         LA    R6,1(R5)             SET START TO NEXT CHARACTER
         B     LOGR_53C             CONTINUE SEARCHING
*--------------------------------------------------------------------*
* Check Jobname of Log Block against the specified Jobnames          *
*--------------------------------------------------------------------*
LOGR_53K EQU   *
         CLC   VARS1+80(1),BLANKS   IS JOBNAME SPECIFIED?
         BE    LOGR_54              NO, CONTINUE
LOGR_53L EQU   *
         LA    R5,VARS1+80          SET REG TO JOBNAME PARM
         LR    R6,R5                COPY FOR POINTER TO START OF PARM
         LA    R4,79(R5)            SET REG TO END
         B     LOGR_53N
LOGR_53M LA    R5,1(R5)
LOGR_53N CLI   0(R5),C' '           LOOK FOR SPACE
         BNE   LOGR_53M
         CR    R5,R4                COMPARE CURRENT TO END
         BE    LOGR_60              IF NO MORE DATA, CONTINUE
         LR    R10,R5               STORE REG
         SR    R5,R6                SUBTRACT TO GET JOBNAME LENGTH
         BCTR  R5,0
         EX    R5,CHKJOB            COMPARE JOBNAME AGAINST PARM
         BE    LOGR_54              IF A MATCH, CONTINUE
         LR    R5,R10               RESTORE REG
         LA    R6,1(R5)             SET START TO NEXT CHARACTER
         B     LOGR_53M             CONTINUE SEARCHING
*--------------------------------------------------------------------*
* Read the MDB Control Object                                        *
*--------------------------------------------------------------------*
LOGR_54  EQU   *
         AH    R8,MDBGLEN             ADD OFFSET FROM GEN TO CP OBJECT
LOGR_541 EQU   *
         MVC   LOG_CBS+2(1),=C'C'
         USING MDBSCP,R8              SET BASE TO MDB CONTROL OBJ
         CLC   MDBCTYPE,=X'0002'      CHECK MDB TYPE IS GEN OBJ OR HDR
         BNE   LOGR_59                IF NOT, CHECK OTHER
         MVC   CONSID,MDBCCNID        STORE CONSOLE ID
         MVC   CONSNM,MDBCCNNM        STORE CONSOLE NAME
*--------------------------------------------------------------------*
* Retrieve WTL, MLM and Request flags for Message                    *
*--------------------------------------------------------------------*
         MVC   WTLFLAG,=CL2'N '       DEFAULT WTL FLAG
         MVI   REQFLAG,C' '           DEFAULT REQUEST TYPE FLAG
*
         UNPK  DECWORK(9),MDBCERC(5)    UNPACK ROUTING CODES
         TR    DECWORK,HEXTABLE         TRANSLATE TO HEX
         MVC   LOG_ROU,DECWORK          STORE IN MESSAGE
*
         UNPK  DECWORK(9),MDBCXMOD(5)   UNPACK REQUEST FLAGS
         TR    DECWORK(8),HEXTABLE      TRANSLATE TO HEX
         MVC   LOG_REQFL,DECWORK        STORE IN MESSAGE
*
         SLR   R6,R6                  RESET MLM LINE COUNT
         CLC   MDBCLCNT,=F'1'         ARE WE MULTI-LINE?
         BE    LOGR_54A               NO, CONTINUE
         MVC   WTLFLAG,=CL2'MF'       SET FLAG TO MULTI LINE AND FIRST
         B     LOGR_54B               SKIP WTLFLAG CHECK
LOGR_54A EQU   *
         TM    MDBMLVL1,MDBMLR        IS THIS A WTOR?
         BNO   LOGR_54B
         MVI   WTLFLAG,C'W'           IF SO, LETS STATE IT
         B     LOGR_55
LOGR_54B EQU   *
         TM    MDBCATT1,MDBCMCSC      IS THIS A COMMAND RESPONSE?
         BNO   LOGR_54C
         MVI   REQFLAG,C'R'           IF SO, LETS STATE IT
         B     LOGR_55
LOGR_54C EQU   *
         TM    MDBCMSC2,MDBCOCMD      IS THIS AN OPERATOR COMMAND?
         BNO   LOGR_54D
         MVI   REQFLAG,C'C'           IF SO, LETS STATE IT
         B     LOGR_55
LOGR_54D EQU   *
         TM    MDBCMSC2,MDBCICMD      IS THIS AN INTERNAL COMMAND?
         BNO   LOGR_55
         MVI   REQFLAG,C'I'           IF SO, LETS STATE IT
         B     LOGR_55A               ..AND GET THE CONSOLE NAME
*--------------------------------------------------------------------*
* Retrieve Console Name and Console ID                               *
*--------------------------------------------------------------------*
LOGR_55  EQU   *
         CLC   LOG_JOB(8),BLANKS       IS THE JOBNAME BLANK?
         BNE   LOGR_58                 ITS NOT, SO CONTINUE
LOGR_55A CLC   CONSID,=F'128'          IS THE CONSOLE ID =128?
         BNE   LOGR_56                 ITS NOT, SO CONTINUE
         MVC   CONSNM(8),=CL8'INSTREAM' SET THE DEFAULT CONSOLE NAME
         B     LOGR_57
LOGR_56  EQU   *
         CLC   CONSID,=F'0'            IS THE CONSOLE ID =0?
         BNE   LOGR_57                 ITS NOT, SO CONTINUE
         MVC   CONSNM(8),=CL8'INTERNAL' SET THE DEFAULT CONSOLE NAME
LOGR_57  EQU   *
         MVC   LOG_JOB(8),CONSNM       COPY CONSOLE NAME INTO MESSAGE
*--------------------------------------------------------------------*
* Add the length of MDBSCP to get to the Text Object                 *
*--------------------------------------------------------------------*
LOGR_58  EQU   *
         AH    R8,MDBCLEN              ADD OFFSET FROM CP TO TXT OBJECT
         MVI   LOG_READL,X'0'          CLEAR 'READ_FIRST_LINE' FLAG
*--------------------------------------------------------------------*
* Access Message Text Object                                         *
*--------------------------------------------------------------------*
LOGR_59  EQU   *
         USING MDBT,R8                 SET BASE TO MDB TEXT OBJECT
         MVC   LOG_CBS+3(1),=C'T'
         CLC   MDBTTYPE,=X'0004'       CHECK MDB TYPE IS TXT OBJ
         BNE   LOGR_59N                IF NOT GO TO PARSE IT
         LH    R4,MDBTLEN              GET LENGTH OF MESSAGE TEXT
         S     R4,=A(MDBTMSGT-MDBTLEN)
         BNP   LOGR_61                 IF NO MESSAGE, CONTINUE
         MVI   LOG_TXT,C' '            BLANK MESSAGE TEXT
         MVC   LOG_TXT+1(189),LOG_TXT
         LA    R5,MDBTMSGT
         BCTR  R4,0
         EX    R4,WTLPULL              COPY MESSAGE TEXT
*--------------------------------------------------------------------*
* Now we check to see if the Message (if specified), is found        *
*--------------------------------------------------------------------*
LOGR_59A EQU   *
         TM    LOG_READL,LINEREAD  HAVE WE MATCHED THE FIRST LINE?
         BO    LOGR_59F            IF SO, DISPLAY REMAINING TEXT
         CLC   VARS1(1),BLANKS     HAS USER ASKED FOR CERTAIN MESSAGES?
         BE    LOGR_59F            NO, SO CONTINUE
LOGR_59B EQU   *
         LA    R5,VARS1            SET REG TO MESSAGE PARM
         LR    R9,R5               COPY FOR POINTER TO START OF PARM
         LA    R4,79(R5)           SET REG TO END
         B     LOGR_59D
LOGR_59C LA    R5,1(R5)
LOGR_59D CLI   0(R5),C' '          LOOK FOR SPACE
         BNE   LOGR_59C
         CR    R5,R4               COMPARE CURRENT TO END
         BE    LOGR_61             IF NO MORE DATA, CONTINUE
         LR    R10,R5              PRESERVE REG
         SR    R5,R9               SUBTRACT TO GET MESSAGE
         BCTR  R5,0
         EX    R5,CHKMSG           COMPARE MESSAGE AGAINST PARM
         BE    LOGR_59E            IF IT MATCHES, CONTINUE
         LR    R5,R10              RESTORE REG
         LA    R9,1(R5)            SET START TO NEW CHARACTER
         B     LOGR_59C            CONTINUE SEARCHING
LOGR_59E EQU   *
         OI    LOG_READL,LINEREAD     FLAG THE FIRST MLM WAS DISPLAYED
*--------------------------------------------------------------------*
* Check if we are Multi-Line Message                                 *
*--------------------------------------------------------------------*
LOGR_59F EQU   *
         CLC   WTLFLAG,=CL2'N '    IF WE'RE NOT MLM, SKIP MLM CODES
         BE    LOGR_59J
         CLC   WTLFLAG,=CL2'MF'    IF WE'RE MLM (AND FIRST LINE), SKIP
         BE    LOGR_59J            ..OTHER CODES
         MVC   LOG_JOB(8),BLANKS       BLANK JOBNAME NAME AS MLM LINE
         MVC   LOG_JOB+5(3),MULTI_ID   COPY IN THE MLM ID
*--------------------------------------------------------------------*
* If we are MLM, set the Record Type                                 *
*--------------------------------------------------------------------*
         TM    MDBTLNT1,MDBTLABT   HOWEVER IF WE ARE A LABEL...
         BNO   LOGR_59G
         MVI   WTLFLAG,C'L'        SET LABEL
         B     LOGR_59I
LOGR_59G EQU   *
         TM    MDBTLNT1,MDBTDATT   IF WE ARE A DATA LINE...
         BNO   LOGR_59H
         MVI   WTLFLAG,C'D'        SET DATA LINE
LOGR_59H EQU   *
         TM    MDBTLNT1,MDBTENDT   IF WE ARE THE END LINE...
         BNO   LOGR_59I
         MVI   WTLFLAG,C'E'        SET END LINE
LOGR_59I EQU   *
         MVC   LOG_ROU(7),BLANKS   BLANK ELEMENTS IF MLM
         MVC   LOG_SYS(8),BLANKS
         MVC   LOG_DAT(7),BLANKS
         MVC   LOG_TIM(11),BLANKS
*--------------------------------------------------------------------*
* Build Message and print                                            *
*--------------------------------------------------------------------*
LOGR_59J EQU   *
         MVC   LOG_REC(1),WTLFLAG   COPY THE RECORD TYPE INTO MSG
         MVC   LOG_REQ(1),REQFLAG   COPY THE REQUEST TYPE INTO MSG
         MVI   MSGT1,C' '           BLANK OUT THE MSG TEXT
         MVC   MSGT1+1(239),MSGT1
LOGR_59K EQU   *
         CLC   VARS+30(1),BLANKS    TEST FOR SYSLOG-COMP DISPLAY
         BE    LOGR_59L             IF BLANK, DISPLAY OTHER TYPE
*
         MVC   MSGT1+0(1),LOG_REC    COPY RECORD TYPE INTO MESSAGE
         MVC   MSGT1+1(1),LOG_REQ    COPY REQUEST TYPE INTO MESSAGE
         MVC   MSGT1+2(7),LOG_ROU    COPY ROUTE CODES INTO MESSAGE
         MVC   MSGT1+10(8),LOG_SYS   COPY SYSTEM INTO MESSAGE
         MVC   MSGT1+19(7),LOG_DAT   COPY DATE INTO MESSAGE
         MVC   MSGT1+27(11),LOG_TIM  COPY TIME INTO MESSAGE
         MVC   MSGT1+39(8),LOG_JOB   COPY JOBNAME/CONSOLE INTO MESSAGE
         MVC   MSGT1+48(8),LOG_REQFL   COPY REQUEST FLAGS INTO MESSAGE
         MVC   MSGT1+57,LOG_TXT      COPY MSG TEXT INTO MESSAGE
*        MVC   MSGT1+234(5),LOG_CBS  WHAT CONTROL BLOCKS WE HAVE READ
*
         B     LOGR_59M             NOW LETS PRINT IT
LOGR_59L EQU   *
         MVC   MSGT1+1(7),LOG_DAT    COPY DATE INTO MESSAGE
         MVC   MSGT1+9(11),LOG_TIM   COPY TIME INTO MESSAGE
         MVC   MSGT1+21(8),LOG_SYS   COPY SYSTEM INTO MESSAGE
         MVC   MSGT1+28(8),LOG_JOB   COPY JOBNAME/CONSOLE INTO MESSAGE
         MVC   MSGT1+39(1),LOG_REC   COPY RECORD TYPE INTO MESSAGE
         MVC   MSGT1+41,LOG_TXT      COPY MSG TEXT INTO MESSAGE
*        MVC   MSGT1+234(5),LOG_CBS  WHAT CONTROL BLOCKS WE HAVE READ
LOGR_59M EQU   *
         SAM24
         PUT   LOGOUT,MSGT1        PRINT THE LINE
         SAM64
         MVC   LOG_CBS(5),BLANKS
*--------------------------------------------------------------------*
* If we are MLM, loop back to display the next                       *
*--------------------------------------------------------------------*
         MVC   WTLFLAG,=CL2'M '    RESET WTLFLAG TO MLM
         C     R7,=F'0'            CHECK IF THE NEXT OFFSET IS BLANK
         BE    LOGR_30             (NO MORE BLOCKS) SO READ SOME MORE
LOGR_59N EQU   *
         L     R6,MDB_LEN
         AH    R8,MDBTLEN          ADD TEXT OBJECT LENGTH
         CLC   WTLFLAG(1),=C'M'
         BNE   LOGR_59P
LOGR_59P CR    R8,R6               COMPARE END OF MDB BLOCK
         BL    LOGR_59             IF STILL DATA, LETS PARSE AGAIN
*--------------------------------------------------------------------*
* Add the lengths to get to MDB Text Object (to step through data)   *
*--------------------------------------------------------------------*
LOGR_60  EQU   *
         LR    R8,R6               MAKE R8 POINT TO NEXT BLOCK
*--------------------------------------------------------------------*
* Loop back if there is another MDB in the log block                 *
*--------------------------------------------------------------------*
LOGR_61  EQU   *
         C     R7,=F'0'            CHECK IF THE NEXT OFFSET IS BLANK
         BE    LOGR_30             (NO MORE BLOCKS) SO READ SOME MORE
         AR    R7,R11              ADD THE NEXT OFFSET TO BUFFER BASE
         LR    R9,R7               COPY BACK TO REG FOR IXGBRMLT
         BCT   R3,LOGR_50A         DECR LOGBLOCKS, & RETURN TO PROCESS
         B     LOGR_END            STOP READING
*--------------------------------------------------------------------*
* Issue IXGBRWSE to end the logstream request and disconnect.        *
* Then release the storage for the buffer.                           *
*--------------------------------------------------------------------*
LOGR_END SAM31                       STOP BROWSING
         IXGBRWSE REQUEST=END,                                         X
               STREAMTOKEN=LSTOKEN,                                    X
               BROWSETOKEN=BRSTOKEN,                                   X
               MODE=SYNC,                                              X
               ANSAREA=ANSWER,                                         X
               ANSLEN=ANSLEN,                                          X
               RSNCODE=RSNCODE,                                        X
               MF=S,                                                   X
               RETCODE=RETCODE
*                                     DISCONNECT FROM OPERLOG
         IXGCONN REQUEST=DISCONNECT,                                   X
               STREAMTOKEN=LSTOKEN,                                    X
               ANSAREA=ANSWER,                                         X
               MF=S,                                                   X
               ANSLEN=ANSLEN
         SAM64
         PRINT NOGEN
MN       EQU   *                               RELEASE LOGBLOCK BUFFER
         STORAGE RELEASE,LENGTH=XQBUFFL,ADDR=(R11)
*--------------------------------------------------------------------*
* Close Output file, free storage and exit                           *
*--------------------------------------------------------------------*
RETURN   EQU   *                           CLOSE SYSPRINT
         CLOSE LOGOUT
RETURN1  EQU   *                              RELEASE WORKAREA BUFFER
         STORAGE RELEASE,ADDR=(R12),LENGTH=WORKLEN
         LGHI    R15,0                        SET RETURN CODE
         LG      R13,128(,R13)                RESTORE SAVEAREA
         LG      R14,8(,R13)
         LMG     R0,R12,24(R13)
         BR      R14                          LETS LEAVE!
*
*--------------------------------------------------------------------*
* Date conversion routine from IEAMDBLG (IBM supplied) to convert    *
* from YYYYDDD to STCK format                                        *
*--------------------------------------------------------------------*
CONVSTCK BAKR  R14,0
         CLC   0(7,R3),=XL7'0'
         BE    CONVDONE
         PACK  CONVDATE,0(7,R3)
         SP    CONVDATE,=P'1900000'
         CONVTOD CONVVAL=CONVWORK,                                     X
               TODVAL=(R4),                                            X
               TIMETYPE=BIN,                                           X
               DATETYPE=YYDDD
         LTR   R15,R15
         BZ    CONVDONE
         SAM24
         XC    MSGT2,MSGT2
         MVC   MSGT2,=C'LOGR005E Cannot convert date to STCK- '
         LA    R3,7(R3)
         MVC   MSGT2+38(15),0(R3)
         MVC   MSGT2+53(80),BLANKS
         PUT   LOGOUT,MSGT2
         SAM64
         ABEND 4,DUMP             ABEND U0004 IF NO CONVERSION
CONVDONE PR    ,
*
*--------------------------------------------------------------------*
* Static declarations                                                *
*--------------------------------------------------------------------*
SAVEAR64 DC    18FD'0'                   SAVE AREA
         LTORG                           LITERAL POOL AREA
*
BUFFLEN  DC    F'256'                    BUFFER LENGTH
ALET     DC    F'0'                      ACCESS LIST ENTRY TABLE
XQBUFFL  EQU   128*1024                  BUFFER SIZE
XQBUFLEN DC    A(XQBUFFL)                POINTER TO BUFFER SIZE
LSNAME   DC    CL26'SYSPLEX.OPERLOG'     LOGSTREAM NAME
ANSWER   DS    CL(ANSAA_LEN+256)         ANSWER AREA FOR REQ=START
ANSLEN   DC    A(L'ANSWER)               ANSWER AREA LENGTH
*
*--------------------------------------------------------------------*
* EXECUTE combinations..                                             *
*--------------------------------------------------------------------*
PARAMETR MVC   PARM(0),0(R4)             GET PARAMETER
DATAVAL  MVC   DATAV(0),0(R4)            GET PARAMETER
WTLPULL  MVC   LOG_TXT(*-*),0(R5)        EXTRACT MESSAGE TEXT
CHKJOB   CLC   LOG_JOB(0),0(R6)          COMPARE JOBNAME
CHKMSG   CLC   LOG_TXT+1(0),0(R9)        COMPARE MESSAGE
*
*--------------------------------------------------------------------*
* If the user specifies TODAY, lets give them today's date/time      *
*--------------------------------------------------------------------*
SETTIME  EQU   *
         TIME STCK,DECTIME,LINKAGE=SYSTEM      GET TIME
         LG    R7,TIMEOFFST                    STORE LOCAL TIME OFFSET
         SLG   R7,LEAPSECS                     SUBTRACT LEAP SECS
         ALG   R7,DECTIME                      ADD GMT TIME
         STG   R7,DECTIME                      STORE
         CLC   PARM(8),PYESTER                 WAS YESTERDAY SPECIFIED?
         BNE   SETTIME1                        IF NO, CONTINUE
         LG    R7,DECTIME                      LETS GET THE TIME AGAIN
         SLG   R7,MINUSDAY                     SUBTRACT ONE DAY
         STG   R7,DECTIME                      STORE
SETTIME1 EQU   *                               CONVERT TIME
         STCKCONV STCKVAL=DECTIME,CONVVAL=DECWORK,                     X
               TIMETYPE=DEC,DATETYPE=YYYYDDD
         LA    R6,DECWORK
         LA    R8,DECTIME
         MVC   0(8,R8),8(R6)                   COPY DATE
         UNPK  DECCHAR(8),DECTIME(5)           UNPACK
         MVC   START_DAT(7),DECCHAR            COPY DATE TO START DATE
         MVC   START_DAT+7,ZEROMIN             ADD MIDNIGHT
         MVC   VARS+0(7),START_DAT             COPY TO PARAMETERS
         MVC   VARS+7(1),DOT
         MVC   VARS+8(4),ZEROMIN
         MVC   END_DAT,START_DAT               COPY START TO END DATE
         XC    DECTIME,DECTIME
         MVC   0(2,R8),0(R6)                   COPY CURRENT TIME
         UNPK  DECCHAR(5),DECTIME(3)           UNPACK
*        ABEND 10,DUMP
         MVC   VARS+15(7),END_DAT              COPY TO PARAMETERS
         MVC   VARS+22(1),DOT
         MVC   VARS+23(4),DECCHAR              PUT IN CURRENT TIME
         MVC   END_DAT+7(4),DECCHAR
         CLC   PARM(8),PYESTER                 CHECK FOR YESTERDAY?
         BNE   SETTIME3                        IF NO, CONTINUE
         MVC   VARS+23(4),ENDMIN               ELSE SET TO 23:59
         MVC   END_DAT+7(4),ENDMIN
SETTIME3 B     PG_02                BRANCH BACK TO CONTINUE PARSING
*--------------------------------------------------------------------*
* More declarations...                                               *
*--------------------------------------------------------------------*
LINEREAD EQU   X'01'                      FLAG FOR READING FIRST MLM
COLON    DC    C':'
MINUSDAY DC    X'000141DD76000000'        TOD TIME FOR ONE DAY
ZEROMIN  DC    C'0000'
ENDMIN   DC    C'2359'
DOT      DC    C'.'
*
BLANKS   DC    CL160' '
*
RETCODE  DS    F                          PARAMETERS FOR LOGGER CONN.
RSNCODE  DS    F
BLKSIZE  DS    F
LSTOKEN  DC    XL16'00'
TIMESTMP DS    2F,2F
BRSTOKEN DS    CL4
REPLY    DS    CL4
CONVWORK DC    4F'0'                      WORK VARIABLES FOR STCK/TOD
CONVDATE EQU   CONVWORK+8,4
*                                         TRANSLATION TABLE
*
TRTTABLE DC    XL16'000102030405060708090A0B0C0D0E0F'
         DC    XL16'101112131415161718191A1B1C1D1E1F'
         DC    XL16'202122232425262728292A2B2C2D2E2F'
         DC    XL16'303132333435363738393A3B3C3D3E3F'
         DC    XL16'404142434445464748494A004C4D4E4F'
         DC    XL16'505152535455565758595A5B5C5D5E5F'
         DC    XL16'606162636465666768696A6B6C6D6E6F'
         DC    XL16'707172737475767778797A7B7C7D7E7F'
         DC    XL16'808182838485868788898A8B8C8D8E8F'
         DC    XL16'909192939495969798999A9B9C9D9E9F'
         DC    XL16'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'
         DC    XL16'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    XL16'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    XL16'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    XL16'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    XL16'00000000000000000000FAFBFCFDFEFF'
HEXTABLE EQU   *-240
         DC    C'0123456789ABCDEF'         HEXTABLE FOR TRANSLATION
*
HDRMSG   DC    C' Message(s) : '           HEADER MESSAGES
HDRJOB   DC    C' Jobname(s) : '
HDRSYS   DC    C' System(s)  : '
HDRSYC   DC    C' SYSLOG compatibility mode  '
*
PNOHDR   DC    C'NOHEADER'           PARAMETERS WITHOUT BRACKETS
PSYSLOG  DC    C'SYSLOG'
PTODAY   DC    C'TODAY'
PYESTER  DC    C'YESTERDAY'
MULTI_ID DC    C'   '                MULTI-LINE INDICATOR
*
LOGOUT   DCB   DDNAME=LOGOUT,DSORG=PS,MACRF=(PM),DEVD=DA,LRECL=240
SYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GL),EODAD=PG_SYSIN
*--------------------------------------------------------------------*
* Display Header                                                     *
*--------------------------------------------------------------------*
*
TITLE1   DC    C'------------------------------------------------------X
               -----------  '
TITLE2   DC    C' L O G R E A D  64 - running on XX with XXXXXX XX.XX.XX
               X  (v&LOGVR) '
TITLE3   DC    C' Dates XXXX.XXX XX:XX to XXXX.XXX XX:XX               X
                            '
*
LTORGEND  DS    0D              END OF LTORG SECTION
*--------------------------------------------------------------------*
* Main DSECT & DCBs                                                  *
*--------------------------------------------------------------------*
WORKAREA  DSECT
VARS      DS    CL15               START DATE & TIME
          DS    CL15               END DATE & TIME
          DS    CL6                SYSLOG COMP
          DS    CL8                NOHEADER
          DS    CL80               SYSTEMS
VARS1     DS    CL80               MESSAGE IDS
          DS    CL80               JOBNAMES
PARMLEN   DS    H                  LENGTH OF PARM DATA IN SYSIN
TMPPARM   DS    CL80               STORAGE FOR SYSIN PARM
MSGT1     DS    CL240              FULL LENGTH MESSAGE BUFFER
MSGT2     DS    CL80               MESSAGE BUFFER
LOG_REC   DS    CL1                SYSLOG MESSAGE RECORD TYPE
LOG_REQ   DS    CL1                SYSLOG MESSAGE REQUEST TYPE
LOG_ROU   DS    CL7                SYSLOG MESSAGE ROUTING CODES
LOG_SYS   DS    CL8                SYSLOG MESSAGE SYSTEM
LOG_DAT   DS    CL7                SYSLOG MESSAGE DATESTAMP
LOG_TIM   DS    CL11               SYSLOG MESSAGE TIMESTAMP
LOG_JOB   DS    CL8                SYSLOG MESSAGE JOBNAME/CONSOLE
LOG_MLM   DS    CL8                SYSLOG MESSAGE MULTI-LINE MSG FLAG
LOG_REQFL DS    CL8                SYSLOG MESSAGE MULTI-LINE MSG FLAG
LOG_TXT   DS    CL190              SYSLOG MESSAGE TEXT
LOG_CBS   DS    CL5                CONTROL BLOCKS READ
LOG_READL DS    X                  MLM FIRST LINE FLAG
START_DAT DS    CL11               WORKING START DATE/TIME
END_DAT   DS    CL11               WORKING END DATE/TIME
START_D   DS    CL7                TEMPORARY START DATE FOR CONVSTCK
END_D     DS    CL7                TEPORARY END DATE FOR CONVSTCK
WORK_DAT  DS    CL11               WORKING DATE VARIABLE
PARM      DS    CL80               PARAMETER STORE
DATAV     DS    CL80               PARAMETER STORE
SSTCK     DS    2F                 START DATE CONVERTED TO TOD
ESTCK     DS    2F                 END DATE CONVERTED TO TOD
CONSNM    DS    CL8                CONSOLE NAME
CONSID    DS    XL4                CONSOLE ID
WTLFLAG   DS    CL2                WTL FLAG FOR MESSAGES
REQFLAG   DS    C                  REQUEST FLAG FOR MESSAGES
DECTIME   DS    4F                 STCK TIME VALUE
DECCHAR   DS    CL7                UNPACKED VALUE OF TOD
          DS    0D                 PREVENT OVERWRITE OF TIME
TEMPWORD  DS    D                  TEMPORARY DBL WORD FOR SEQUENCE NUM
LEAPSECS  DS    D                  LEAP SECONDS (FROM CVT)
TIMEOFFST DS    D                  LOCALTIME OFFSET (FROM CVT)
DECWORK   DS    CL16               CONVERTED STCK TO TOD VALUE
MDB_LEN   DS    F
WORKLEN   EQU   *-WORKAREA
*--------------------------------------------------------------------*
* DSECTS                                                             *
*--------------------------------------------------------------------*
XQBUF    DSECT                     BUFFER FOR IXGBROWSE
         ORG   *+XQBUFFL
         DS    0D
*--------------------------------------------------------------------*
* Macro for DCBs                                                     *
*--------------------------------------------------------------------*
         SPACE
         DCBD  DEVD=DA,DSORG=PO
         END
**********************************************************************
