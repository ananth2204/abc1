{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012114000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1116934, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE461.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1116934, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1116934, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE461.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x12\\x07'", "DS1TRBAL": "b'w\\xcc'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03g\\x00\\x08\\x03h\\x00\\x0b\\x00\\x13'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"#CONTENT": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "MEMBER        DESCRIPTION\n---------     ----------------------------------------------------------\n\nCLASS1        BOB ZIMMERMAN OF CNA INSURANCE\n              EXAMPLE HANDOUT FOR INTRODUCTORY CLASS TO DIALOG MANAGER\n              and its concepts.\n              last modified 8503\n\nCTABLE        GUIDE ISPF PROJECT (BOB ZIMMERMAN OF CNA INSURANCE)\n              HANDOUT ON COMMAND TABLES FROM GUIDE 61.\n              INFORMATION ON MORE THEN 2 SPLIT SCREENS, BROWSE AND\n              edit from any screen and more...\n              last modified 8503\n\nDODONT01      DENNIS BUSWELL OF STATE OF MONTANA / ADMINISTRATION\n              SOME GUIDELINES HIS INSTALLATION USES FOR DOS AND DONTS OF\n              dialog coding.\n              last modified 8505\n\nSTANDARD      GUIDE ISPF PROJECT (CINDY STEGEMEIER OF PENZOIL)\n              GUIDE 60 DOCUMENT OF ISPF STANDARDS FOR DIALOG WRITERS.\n              last modified 8506\n\nUNDOC         BOB ZIMMERMAN OF CNA INSURANCE\n              SOME UNDOCUMENTED FEATURES OF ISPF VERSION 2\n              last modified 8505\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CLASS1": {"ttr": 518, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "1\n\n\n                   *  An Introduction to Dialog Manager  *\n\n\n\n\n\n\n\n\n\n\n            DIRECT ANY QUESTIONS TO DEVELOPMENT TECHNICAL SUPPORT\n                8 South / x5719, 5745, 5969, 6786, 4226, 5232\n1Introduction to Dialog Manager                                       Page i\n\n\n                                                                    CONTENTS\n+                                                                   ________\n\n\n\n\n\n   General Overview and Description  . . . . . . . . . . . . . . . . . . . 1\n\n   Features of a Dialog Manager  . . . . . . . . . . . . . . . . . . . . . 2\n\n   Components of a Dialog Manager  . . . . . . . . . . . . . . . . . . . . 3\n\n   ISPF/PDF  DDNAMES . . . . . . . . . . . . . . . . . . . . . . . . . . . 4\n\n   CLISTS and Programs . . . . . . . . . . . . . . . . . . . . . . . . . . 5\n\n   ISPF/PDF Variables  . . . . . . . . . . . . . . . . . . . . . . . . . . 6\n\n   ISPF Variable Search Order  . . . . . . . . . . . . . . . . . . . . .  10\n\n   ISPF Panels . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  11\n\n   ISPF Skeletons Overview . . . . . . . . . . . . . . . . . . . . . . .  13\n\n   ISPF Skeletons  . . . . . . . . . . . . . . . . . . . . . . . . . . .  14\n\n   ISPF Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  16\n\n   ISPF Messages . . . . . . . . . . . . . . . . . . . . . . . . . . . .  17\n\n   Accessing the test Dialogs for class  . . . . . . . . . . . . . . . .  18\n\n   Steps for Developing an ISPF DIALOG . . . . . . . . . . . . . . . . .  19\n\n   Example Dialog Specs  . . . . . . . . . . . . . . . . . . . . . . . .  20\n\n   Example Dialog Flowchart  . . . . . . . . . . . . . . . . . . . . . .  21\n\n   Document the flow of the Function . . . . . . . . . . . . . . . . . .  22\n\n   Example List of Components  . . . . . . . . . . . . . . . . . . . . .  24\n1Introduction to Dialog Manager                                      Page ii\n\n\n   Creating a DISPLAY Panel  . . . . . . . . . . . . . . . . . . . . . .  25\n\n   Example Screen Image  . . . . . . . . . . . . . . . . . . . . . . . .  26\n\n   Attribute Section . . . . . . . . . . . . . . . . . . . . . . . . . .  27\n\n   Body Section  . . . . . . . . . . . . . . . . . . . . . . . . . . . .  31\n\n   Example BODY Layout of Screen . . . . . . . . . . . . . . . . . . . .  35\n\n   ISPF System Variables . . . . . . . . . . . . . . . . . . . . . . . .  36\n\n   INITIALIZATION Section  . . . . . . . . . . . . . . . . . . . . . . .  39\n\n   PROCEDURE Section . . . . . . . . . . . . . . . . . . . . . . . . . .  45\n\n   Dynamic Message Generation  . . . . . . . . . . . . . . . . . . . . .  48\n\n   Example Image Solution  . . . . . . . . . . . . . . . . . . . . . . .  49\n\n   Example Screen Solution . . . . . . . . . . . . . . . . . . . . . . .  50\n\n   File Tailoring  . . . . . . . . . . . . . . . . . . . . . . . . . . .  52\n\n   File Tailoring Example  . . . . . . . . . . . . . . . . . . . . . . .  56\n\n   Invoking ISPF Services from a CLIST . . . . . . . . . . . . . . . . .  58\n\n   Invoking the CONTROL Service  . . . . . . . . . . . . . . . . . . . .  59\n\n   Invoking the DISPLAY Service  . . . . . . . . . . . . . . . . . . . .  63\n\n   Invoking FILE TAILORING Services  . . . . . . . . . . . . . . . . . .  65\n\n   Opening the FILE TAILORING file (FTOPEN)  . . . . . . . . . . . . . .  66\n\n   Generating the FILE TAILORING file (FTINCL) . . . . . . . . . . . . .  67\n\n   Closing the FILE TAILORING file (FTCLOSE) . . . . . . . . . . . . . .  68\n\n   The ISPF Test Facility (PDF OPTION 7) . . . . . . . . . . . . . . . .  69\n1Introduction to Dialog Manager                                     Page iii\n\n\n   Coding an Example CLIST . . . . . . . . . . . . . . . . . . . . . . .  71\n\n   Coding a Menu Panel . . . . . . . . . . . . . . . . . . . . . . . . .  73\n\n   Coding a Tutorial Panel . . . . . . . . . . . . . . . . . . . . . . .  74\n\n   ISPF Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  75\n\n   Example Table Display CLIST . . . . . . . . . . . . . . . . . . . . .  79\n1Introduction to Dialog Manager                                       Page 1\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                    General Overview and Description                    |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n\n \u00ae  Dialog\n\n    A Discussion or Communication between 2 or more\n\n\n\n\n \u00ae  Manager\n\n    One who controls and directs\n\n\n\n\n \u00ae  Dialog Manager\n\n    Controls Communication / Interaction\n    Between User and Processor\n\n    A structured technique used to transfer data\n1Introduction to Dialog Manager                                       Page 2\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                      Features of a Dialog Manager                      |\n |                                                                        |\n |________________________________________________________________________|\n\n    Feature                           Dialog Component\n+   _______                           ______ _________\n\n\n\n\n    \u00ae  Formatted Displays               - Panels\n\n\n\n\n    \u00ae  General Edits                    - Panels\n\n\n\n\n    \u00ae  Generates Data                   - Skeletons\n\n\n\n\n    \u00ae  Organizes Data                   - Tables\n\n\n\n\n    \u00ae  Display of tables                - Tables\n\n\n\n\n    \u00ae  Diagnostic / Error messages      - Messages\n1Introduction to Dialog Manager                                       Page 3\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                     Components of a Dialog Manager                     |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n \u00ae  CLISTS\n\n\n\n \u00ae  Programs\n\n\n\n \u00ae  Variables\n\n\n\n \u00ae  Panels\n\n\n\n \u00ae  Skeletons\n\n\n\n \u00ae  Tables\n\n\n\n \u00ae  Messages\n1Introduction to Dialog Manager                                       Page 4\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                                                                        |\n |  ISPF/PDF  DDNAMES                                                     |\n |                                                                        |\n |                                                                        |\n |                                                                        |\n |       ~ISPPLIB    -     Panel Libraries                                |\n |                                                                        |\n |                                                                        |\n |                                                                        |\n |       ~ISPSLIB    -     Skeleton Library (input)                       |\n |                                                                        |\n |                                                                        |\n |                                                                        |\n |        ISPFILE    -     Skeleton Library (output)                      |\n |                                                                        |\n |                                                                        |\n |                                                                        |\n |       ~ISPLLIB    -     ISPF Program Libraries                         |\n |                                                                        |\n |                                                                        |\n |                                                                        |\n |       ~ISPTLIB    -     Table Library (input)                          |\n |                                                                        |\n |                                                                        |\n |                                                                        |\n |        ISPTABL    -     Table Library (output)                         |\n |                                                                        |\n |                                                                        |\n |                                                                        |\n |        ISPMLIB    -     Message Library                                |\n |                                                                        |\n |                                                                        |\n |                                                                        |\n |       ~ISPPROF    -     User Profile Library                           |\n |                                                                        |\n |                                                                        |\n |________________________________________________________________________|\n\n      ~  these files are required by ISPF at all times.\n1Introduction to Dialog Manager                                       Page 5\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                           CLISTS and Programs                          |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n \u00ae  Function\n\n    Controls the flow of a dialog\n\n\n\n\n \u00ae  Pros of using a DIALOG PROGRAM\n\n\n    1.  Execution speed is excellent.\n\n    2.  Edits and Calculations are coded very easily.\n\n    3.  Almost all high-level languages are supported.\n\n\n\n\n \u00ae  Pros of using a DIALOG CLIST\n\n\n    1.  Easy to write quick short CLISTs.\n\n    2.  Short CLISTS are easy to maintain.\n\n    3.  Immediate test and execution - no compile step.\n1Introduction to Dialog Manager                                       Page 6\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                           ISPF/PDF Variables                           |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n \u00ae  Definition\n\n\n    A character string that may vary in length, referred to by a symbol.\n\n\n\n\n \u00ae  Variable Pools\n\n\n    A \"Variable Pool\" is a set/collection of variables.\n\n    Variable Pools are maintained by ISPF.\n\n    Variables are maintained by Dialog Manager Services.\n1Introduction to Dialog Manager                                       Page 7\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                     ISPF/PDF Variables (continued)                     |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n                                    |\n\n           Session 1                |                  Session 2\n\n  Function 1       Function 2       |      Function 1             Function 2\n\n %__________\u00ac     %___________\u00ac     |     %____________\u00ac\n %_____________\u00ac |          |     |           |           |            |\n |             | |  Func    |     |  Func     |     |     |  Func      |\n |   Func      | |          |     |           |           |            |\n |             | >__________<     >___________<     |     >____________<\n >_____________<\n\n %____________________________\u00ac     |\n %___________________________________\u00ac |                            |\n |                                   | |       S h a r e d          |     |\n |        S  h  a  r  e  d           | |                            |\n |                                   | >____________________________<     |\n >___________________________________<\n\n %_________________________________________________________________________-\n ___\u00ac |\n | |                P   r   o   f   i   l   e\n | |\n |\n >_________________________________________________________________________-\n ___<\n1Introduction to Dialog Manager                                       Page 8\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                     ISPF/PDF Variables (continued)                     |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n\n\n\n \u00ae  Function Pool\n\n\n    ~ Variables are associated with a single ISPF Function.\n\n    ~ An ISPF Function is a single CLIST, Program or Menu panel.\n\n    ~ ISPF does not initialize a users Function Pool with any variables.\n\n    A Function Pool is not reusable.  ~ The function pool is always deleted\n    at the end of the function.\n\n\n\n\n \u00ae  SHARED Pool\n\n    ~ Variables are shared across functions in a single ISPF session.\n\n    ~ When a user first enters ISPF, a Shared Pool is created.\n\n    ~ A different Shared Pool is maintained for both parts of a split\n    screen.\n\n    ~ A Shared Pool is deleted when the user exits its split screen.\n\n    ~ Once a variable is in the Shared Pool, you are unable to delete it.\n1Introduction to Dialog Manager                                       Page 9\n\n\n\n    _______________________________________________________________________\n    |                                                                     |\n    |                                                                     |\n    |                  ISPF/PDF Variables (continued)                     |\n    |                                                                     |\n    |_____________________________________________________________________|\n\n\n\n \u00ae  PROFILE Pool\n\n\n    ~ Variables are associated with a given user.\n\n    ~ The Profile Pool is maintained across ISPF sessions.\n\n    ~ The Profile Pool is never deleted by ISPF.\n\n    ~ Once a variable is in the Profile Pool, you are unable to delete it.\n1Introduction to Dialog Manager                                      Page 10\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                       ISPF Variable Search Order                       |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n\n \u00ae  Description\n\n    ISPF Services search the variable pools for access to variables.\n\n\n\n    The Search Order is:\n\n\n\n       1.  Function Pool\n\n       2.  Shared Pool\n\n       3.  Profile Pool\n\n\n\n \u00ae  Functionality\n\n    When a variable is found, it is always maintained in the Function Pool.\n\n    A variable found in the SHARED or PROFILE pool is copied/created in the\n    Function Pool.\n1Introduction to Dialog Manager                                      Page 11\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                               ISPF Panels                              |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n \u00ae  Description\n\n    A predefined display image.\n    A formatted layout of a screen image.\n\n\n\n \u00ae  Types of ISPF panels\n\n\n    There are four types:\n\n\n     1.  Selection or Menu Panels\n\n     2.  Data Entry Panels\n\n     3.  Data Display Panels\n\n     4.  Tutorial Panels\n\n\n     For the different types of panels, there are different rules and\n     considerations.\n1Introduction to Dialog Manager                                      Page 12\n\n\n\n    _______________________________________________________________________\n    |                                                                     |\n    |                                                                     |\n    |                      ISPF Panels (continued)                        |\n    |                                                                     |\n    |_____________________________________________________________________|\n\n\n\n \u00ae  Components of a Panel\n\n\n\n    Attribute Section - Describes field characteristics\n\n\n    Body Section      - Defines the screen layout\n\n\n    Model Section     - Optional image used for table displays\n\n\n    Init Section      - Describes any initialization code\n\n\n    Proc Section      - Identifies any Procedural code to be executed\n                        This includes edits, assignment statements...\n1Introduction to Dialog Manager                                      Page 13\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                         ISPF Skeletons Overview                        |\n |                                                                        |\n |________________________________________________________________________|\n\n\n             %________________________________________________\u00ac\n             |                                                |\n             |          I S P F     S K E L E T O N           |\n             |                                                |\n             |             D E F I N I T I O N S              |\n             |                                                |\n             |          (Input to ISPF/PDF Services)          |\n             >________________________________________________<\n\n                                    |\n\n                                    |\n                     %________________________________\u00ac\n                     |                                |\n                     |          I  S  P  F            |\n                     |                                |\n                     |      S  E  R  V  I  C  E  S    |\n                     |                                |\n                     >________________________________<\n\n                                    |\n\n                                    |\n\n             %________________________________________________\u00ac\n             |                                                |\n             |          I S P F     S K E L E T O N           |\n             |                                                |\n             |   F I L E   T A I L O R I N G   O U T P U T    |\n             |                                                |\n             |         (Output from ISPF/PDF Services)        |\n             >________________________________________________<\n1Introduction to Dialog Manager                                      Page 14\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                             ISPF Skeletons                             |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n \u00ae  Description\n\n    A generalized representation of data.\n\n    Data may optionally be customized by a DIALOG.\n\n\n\n \u00ae  Functionality of File Tailoring Services\n\n\n    ~  Symbolic substitution\n\n    ~  Conditional symbolic substitution\n\n    ~  Conditional generation of data\n\n    ~  Variable assignment statements\n\n    ~  Tabbing data\n\n    ~  Imbedding other Skeletons\n\n    ~  Table Processing\n\n    ~  Commenting\n\n    ~  Very similar to JCL Cataloged Procedures...\n\n    ~  Dynamic allocation of output files...\n1Introduction to Dialog Manager                                      Page 15\n\n\n\n    _______________________________________________________________________\n    |                                                                     |\n    |                                                                     |\n    |                    ISPF Skeletons (continued)                       |\n    |                                                                     |\n    |_____________________________________________________________________|\n\n\n\n \u00ae  Restrictions\n\n    All skeletons must be in a skeleton library.\n\n    Under ISPF/PDF Release 1 - LRECL of File Tailoring output must be 80.\n1Introduction to Dialog Manager                                      Page 16\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                               ISPF Tables                              |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n \u00ae  Description\n\n    A set of occurring data items\n\n    Similar to an occurring COBOL level.\n\n\n\n\n \u00ae  Benefits and Features\n\n\n    ~  Supports Keyed or non-keyed access\n\n    ~  Optional extension variables\n\n    ~  Table Services allows simple display\n\n    ~  Skeleton Services allows simple extraction\n\n    ~  Allows a table to be saved across sessions and users\n\n\n\n\n \u00ae  Restrictions\n\n    Tables are maintained in core (Region Size)\n\n    Clist services have a lot of overhead\n1Introduction to Dialog Manager                                      Page 17\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                              ISPF Messages                             |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n \u00ae  Description\n\n    A comment providing special information for a user.\n\n\n \u00ae  Uses...\n\n    Alerts a user to errors\n\n    Notifies a user of completion status\n\n    Provides a mini-tutorial service\n\n    Used for logging messages to ISPF log.\n\n\n\n\n \u00ae  CNA Modifications\n\n    Messages of all types have been greatly improved at CNA.\n\n    You will learn these techniques this week.\n1Introduction to Dialog Manager                                      Page 18\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                  Accessing the test Dialogs for class                  |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n \u00ae  Use LOGON PROC \"DIALOG\"\n\n    Override Logon Proc when logging on\n\n    When typing in your account number add PR(DIALOG)\n\n\n\n \u00ae  Option 10 under ISPF\n1Introduction to Dialog Manager                                      Page 19\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                   Steps for Developing an ISPF DIALOG                  |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n   1.  List all requirements\n\n\n   2.  Document the Flow of the Dialog\n\n       Dialog flow (Menu Panels to CLIST, Programs...)\n\n       Function flow (Clist and Programs)\n\n\n   3.  List all Dialog Components\n\n\n   4.  Create Panels, Skeletons, Tables, Messages...\n\n\n   5.  Code CLIST or PROGRAM\n\n\n   6.  Testing, Implementation and further Documentation\n1Introduction to Dialog Manager                                      Page 20\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                          Example Dialog Specs                          |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n \u00ae  Scope\n\n    A Dialog to do Background COBOL Compiles from Panvalet\n\n\n \u00ae  Requirements...\n\n\n    1.  Default Panvalet Library to Library found on P.2\n\n    2.  Member name should be remembered from session to session\n\n    3.  Compiler output should optionally be routed to SYSOUT\n\n    4.  Compiler output should optionally be routed to TSDA\n\n    5.  Optional CPYSTAMP (Pipe Processor)\n\n    6.  Compile parms should be remembered and modifiable\n\n    7.  Copy Libraries should be generated before default ones\n\n    8.  Copy Libraries should be remembered across sessions\n\n    9.  Optional Link routine should be available\n\n    10. Systerm should always be routed to MSGCLASS\n\n    11. Job cards should be maintained by menu panel\n\n    12. Enable the user to submit one or more compiles with a job\n1Introduction to Dialog Manager                                      Page 21\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                        Example Dialog Flowchart                        |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n                         %___________________\u00ac\n                         |                   |\n                         |   Menu Panel for  |\n                         |   Pan Background  |\n                         |                   |\n                         >_________\u00a2_________<\n                                   |\n         %____________\u00a2____________+___________\u00a2___________\u00a2___________\u00ac\n        1|           2|           3|          4|          5|          6|\n    %____$___\u00ac   %____$____\u00ac  %____$____\u00ac %____$____\u00ac %____$____\u00ac\n %____$____\u00ac\n    | CLIST  |   | CLIST   |  | CLIST   | | CLIST   | | CLIST   | | CLIST\n |\n    | BCOMP1 |   | BCOMP2  |  | BCOMP3  | | BCOMP4  | | BCOMP5  | | BCOMP6\n |\n    |        |   |         |  |         | |         | |         | |\n |\n    >________<   >_________<  >_________< >_________< >_________<\n >_________<\n\n  All Clists are stored in TESTE.LIFE.SPF.CLIST\n1Introduction to Dialog Manager                                      Page 22\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                    Document the flow of the Function                   |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n   1.  Initialization\n\n       Test for Debugging mode (will set CONLIST SYMLIST etc...)\n       Set ISPF ERROR mode to RETURN\n       Do any variable initialization neccessary\n\n\n   2.  Display the Panel\n\n\n   3.  Process Panel Return Code\n\n       When Return Code = 8, PF3 was hit\n       When Return Code = 0, the enter key was hit\n\n\n   4.  Edit for valid Panvalet file\n\n       Allocate CNAPANDD to Panvalet file\n       If not found, set-up error message and go to display panel\n\n\n   5.  Verify all COPY Libraries exist\n\n\n   6.  PAN LIST member DD(CNAPANDD)\n\n       Verify Member exists on PAN library\n       If not, issue error message, go to display panel\n1Introduction to Dialog Manager                                      Page 23\n\n\n\n       ____________________________________________________________________\n       |                                                                  |\n       |                                                                  |\n       |         Document the flow of the Function (continued)            |\n       |                                                                  |\n       |__________________________________________________________________|\n\n\n\n\n   7.  Convert all DSNAMES to JCL Syntax (use MODEL)\n\n       Fully qualified without quotes - unlike ISPF naming conventions.\n\n\n   8.  Generate JCL\n\n\n   9.  Use the CNAJCL interface for submitting JCL\n\n       If return code is 4 - loop to step 2\n       If return code is not 4 - exit CLIST\n1Introduction to Dialog Manager                                      Page 24\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                       Example List of Components                       |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n \u00ae  Panels\n    1.  COBOL Compile Panel\n        User will specify what library and member to COMPILE\n        Name = 'TESTE.LIFE.SPF.PANELS(BPANCOBx)'\n                                     where x is your group number\n\n \u00ae  Skeletons\n\n    1.  Skeleton with Job cards in them (IBM supplied ISRJSJC)\n\n    2.  Skeleton with COMPILE JCL\n        Name = 'TESTE.LIFE.SPF.SKELETON(CNAPCBx)'\n                                     where x is your group number\n\n    3.  Skeleton with LINK JCL\n        A CLIST will take care of this.\n\n \u00ae  Messages\n    None - Dynamic message generation will be used.\n\n \u00ae  Tables\n    None\n\n \u00ae  CLISTS\n    1.  Clist to \"drive\" the Background Compile function\n        Name = 'TESTE.LIFE.SPF.CLIST(BCOMPx)'\n                                     where x is your group number\n\n \u00ae  Programs\n    None\n1Introduction to Dialog Manager                                      Page 25\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                        Creating a DISPLAY Panel                        |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n \u00ae  Components\n\n    ~ Attribute Section\n       Defines the charactersitics of all fields\n\n\n    ~ Body Section\n       Defines the image (layout) of the panel\n\n\n    ~ Initialization Section\n       Contains all houskeeping code (conversions etc..)\n\n\n    ~ Procedure Section\n       Contains all edits, procedural assignments, internal variable\n       manipulation...\n1Introduction to Dialog Manager                                      Page 26\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                          Example Screen Image                          |\n |                                                                        |\n |________________________________________________________________________|\n\n ---------------------------  DATA SET UTILITY  ---------------------------\n OPTION  ===>\n\n    A - Allocate new data set                 C - Catalog data set\n    R - Rename entire data set                U - Uncatalog data set\n    D - Delete entire data set\n    blank - Display data set information\n\n ISPF LIBRARY:\n    PROJECT ===> TESTE\n    LIBRARY ===> LIFE\n    TYPE    ===> DIVPLIB2\n\n OTHER PARTITIONED OR SEQUENTIAL DATA SET:\n    DATA SET NAME  ===>\n    VOLUME SERIAL  ===>          (If not cataloged, required for option \"C\")\n\n DATA SET PASSWORD ===>          (If password protected)\n1Introduction to Dialog Manager                                      Page 27\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                            Attribute Section                           |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n \u00ae  Syntax\n\n    )ATTR        - must begin in column 1.\n\n    )ATTR (abc)  - may be used to override defaults.\n\n           a     = Text field, high intensity  (default = %)\n           b     = Text field, low intensity   (defualt = +)\n           c     = Input field, high intensity (defualt = _)\n\n\n\n \u00ae  Attribute Section Definition\n\n         char        Keyword(value)      Keyword(value) ....\n\n    where \"char\"    = any 1 byte field delimiter\n\n    Keyword         = any valid keyword (full list follows)\n\n    \"value\"         = the appropriate value for the keyword\n1Introduction to Dialog Manager                                      Page 28\n\n\n\n        ___________________________________________________________________\n        |                                                                 |\n        |                                                                 |\n        |                Attribute Section (continued)                    |\n        |                                                                 |\n        |_________________________________________________________________|\n\n\n\n\n \u00ae  KEYWORDS...\n\n\n    1.  TYPE (TEXT | INPUT | OUTPUT)\n\n        specifies the type of field this character represents:\n\n        TEXT    represents fixed data (literal) that is to be displayed\n\n        INPUT   represents a variable whos data is displayed and modifiable\n\n        OUTPUT  represents a variable whos data is display only\n\n\n    2.  INTENS (HIGH | LOW | NON)\n\n        Specifies the intensity (brightness) used for this type of field:\n\n        HIGH    represents a bright intensity field\n\n        LOW     represents a normal intensity field\n\n        NON     represents a non-display field (valid only for input)\n1Introduction to Dialog Manager                                      Page 29\n\n\n\n        ___________________________________________________________________\n        |                                                                 |\n        |                                                                 |\n        |                Attribute Section (continued)                    |\n        |                                                                 |\n        |_________________________________________________________________|\n\n\n\n\n    3.  CAPS (ON | OFF)\n\n        Specifies whether upper-case translation should occur:\n\n        ON      designates all data should be set to uppercase\n\n        OFF     designates all data should be left as typed\n\n\n    4.  JUST (LEFT | RIGHT | ASIS)\n\n        Specifies how the contents of the field should be justified:\n\n        LEFT    Left justify all data\n\n        RIGHT   Right justify all data\n\n        ASIS    No justification should occur\n\n\n    5.  PAD (NULLS | char)\n\n        Specifies the \"pad\" character used for input/output fields:\n\n        NULLS   represents that low-values (nulls) be used\n\n        char    is any character enclosed in single quotes be used\n1Introduction to Dialog Manager                                      Page 30\n\n\n\n        ___________________________________________________________________\n        |                                                                 |\n        |                                                                 |\n        |                Attribute Section (continued)                    |\n        |                                                                 |\n        |_________________________________________________________________|\n\n\n\n\n    6.  SKIP (ON | OFF)\n\n        Specifies whether the autoskip attribute be used:\n\n        ON      The cursor should skip to the next input field\n\n        OFF     The cursor will not skip - the keyboard will lock.\n\n\n    7.  ATTN (ON | OFF)\n\n        Not applicable at CNA\n\n\n \u00ae  Defaults\n\n     %  TYPE(TEXT) INTENS(HIGH)\n\n     +  TYPE(TEXT) INTENS(LOW)\n\n     _  TYPE(INPUT) INTENS(HIGH)\n1Introduction to Dialog Manager                                      Page 31\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                              Body Section                              |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n \u00ae  Creating the Panel Image\n\n    Using the Attributes defined in the ATTRIBUTE Section\n\n    Define literals, input and output fields\n\n\n\n \u00ae  Standards...\n\n    \u00e6  IBM Conventions...\n\n    \u00e6  Consistency...\n\n    \u00e6  Standardization...\n\n    \u00e6  The PROFESSIONAL Touch\n\n\n\n \u00ae  On the following pages are exerpts from the ISPF manual...\n1Introduction to Dialog Manager                                      Page 35\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                      Example BODY Layout of Screen                     |\n |                                                                        |\n |________________________________________________________________________|\n\n )BODY\n %----------------------------  DATA SET UTILITY\n ---------------------------- %OPTION  ===>_ZCMD\n + %\n %   A+- Allocate new data set                %C+- Catalog data set\n %   R+- Rename entire data set               %U+- Uncatalog data set\n %   D+- Delete entire data set\n %   blank+- Display data set information\n +\n +ISPF LIBRARY:\n +   PROJECT%===>_PROJECT +\n +   LIBRARY%===>_LIBRARY +\n +   TYPE   %===>_TYPE    +\n +\n +OTHER PARTITIONED OR SEQUENTIAL DATA SET:\n +   DATA SET NAME %===>_DSN\n + +   VOLUME SERIAL %===>_VOL   +  (If not cataloged, required for option\n \"C\") +\n +DATA SET PASSWORD%===>\u00acPSWD    +(If password protected)\n1Introduction to Dialog Manager                                      Page 36\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                          ISPF System Variables                         |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n 1.  ZUSER     - User Id\n\n 2.  ZPREFIX    - TSO user prefix\n\n 3.  ZLOGON     - Stepname of TSO LOGON procedure\n\n 4.  ZTIME      - Time of day (formatted hh:mm)\n\n 5.  ZDATE      - Current date (format yy/mm/dd)\n\n 6.  ZJDATE     - Day of year date (format yy.ddd)\n\n 7.  ZDAY       - Day of month (2 characters)\n\n 8.  ZMONTH     - Month of the year (2 characters)\n\n 9.  ZYEAR      - Year (2 characters)\n\n 10. ZTEMPF     - Name of temporary file for file tailoring output\n\n 11. ZAPPLID    - Application Identifier\n\n 12. Z          - Null Variable\n\n 13. ZTERM      - Terminal Type\n\n 14. ZKEYS      - Number of Pfkeys\n\n 15. ZPFxx      - Setting for PF keys\n\n 16. ZERRMSG    - Error message id\n1Introduction to Dialog Manager                                      Page 37\n\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                    ISPF System Variables (Continued)                   |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n 17. ZERRSM     - Short Error Message text\n\n 18. ZERRLM     - Long Error Message text\n\n 19. ZERRHM     - Name of help panel associated with error message\n\n 20. ZVERB      - Command verb after a command table (SETVERB) action\n\n 21. ZTDTOP     - Current top row upon return from table display\n\n 22. ZSCBR      - Scroll amount for the BROWSE service\n\n 23. ZSCED      - Scroll amount for the EDIT service\n\n 24. ZSCML      - Scroll amount for Member Lists\n\n 25. ZUP        - Name of Parent Panel (tutorial)\n\n 26. ZCONT      - Name of next continuation panel (tutorial)\n\n 27. ZIND       - Yes specifies an index page (tutorial)\n\n 28. ZHTOP      - Name of top panel (tutorial)\n\n 29. ZHINDEX    - Name of first Index Panel (tutorial)\n\n 30. ZCMD       - Command Input field\n\n 31. ZSEL       - Command selected by menu panels\n\n 32. ZPARENT    - Parent menu name (in explicit chain mode only)\n1Introduction to Dialog Manager                                      Page 38\n\n\n 33. ZPRIM      - Yes specifies panel is a primary option panel\n1Introduction to Dialog Manager                                      Page 39\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                         INITIALIZATION Section                         |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n \u00ae  Syntax\n\n    )INIT        - must begin in column 1.\n\n    Nothing else may be found on the line.\n\n\n\n \u00ae  Assignment Statements...\n\n    variable = value\n\n\n    1.  &A = ' '      will set the variable A to null\n\n    2.  &A = &Z       will set the variable A to null\n\n    3.  &COUNT = 5    will set the variable COUNT to 5\n\n    4.  &DSN = '''SYS1.MACLIB'''\n        will set variable DSN to 'SYS1.MACLIB'\n\n    5.  &BB = &C      will set BB to the contents of variable C\n1Introduction to Dialog Manager                                      Page 40\n\n\n\n        ___________________________________________________________________\n        |                                                                 |\n        |                                                                 |\n        |              INITIALIZATION Section (Continued)                 |\n        |                                                                 |\n        |_________________________________________________________________|\n\n\n\n\n \u00ae  TRUNC (variable,value)\n\n\n    \"value\"    can be a numeric value\n\n               will truncate the \"value\" amount of bytes\n\n\n    \"value\"    can be a one-byte character\n\n               will truncate at that character\n\n               character must be enclosed in quotes\n\n\n\n\n    1.  &A = TRUNC (&XYZ,3)\n\n        will set the variable A to the first 3 bytes represented by variable\n        XYZ.\n\n        If XYZ is less than 4 bytes, variables A and XYZ will be identical.\n1Introduction to Dialog Manager                                      Page 41\n\n\n\n        ___________________________________________________________________\n        |                                                                 |\n        |                                                                 |\n        |              INITIALIZATION Section (Continued)                 |\n        |                                                                 |\n        |_________________________________________________________________|\n\n\n\n\n \u00ae  TRANS (variable  value,value ... MSG=value)\n\n\n    \"value,value\"  will translate from first value to second value\n\n                   unlimited amount of value,value pairs\n\n\n    \"MSG=value\"    is optional and will display a message if no value found\n\n\n\n    1.  &A = TRANS (&XYZ NO,N,YES,Y,*,&Z)\n\n    2.  &A = TRANS (TRUNC ( &ABC,1) N,NO,Y,YES,MSG=ERR1)\n1Introduction to Dialog Manager                                      Page 42\n\n\n\n        ___________________________________________________________________\n        |                                                                 |\n        |                                                                 |\n        |              INITIALIZATION Section (Continued)                 |\n        |                                                                 |\n        |_________________________________________________________________|\n\n\n\n\n \u00ae  IF ( variable operator value,value...)\n\n\n    \"operator\"     may be \"=\" or \"\u00ac=\" only\n\n    \"value\"        may be any value or variable\n\n\n\n    1.  IF (&ZUSER = 'C1307','C5708','C7836')\n           &ABC = X\n\n    2.  IF (&ZUSER \u00ac= 'C1307','C5708','C7836')\n           &ABC = Y\n\n\n\n \u00ae  Special Variables\n\n\n    .CURSOR = field\n\n    .HELP = panel\n\n    .RESP = ENTER or END\n\n    .ZVARS = '(variable,variable)'\n\n    .TRAIL represents the remainder of a TRUNC\n\n    .MSG = message\n1Introduction to Dialog Manager                                      Page 45\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                            PROCEDURE Section                           |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n \u00ae  Syntax\n\n    )PROC        - must begin in column 1.\n\n    Nothing else may be found on the line.\n\n\n\n \u00ae  All statements found in INIT are valid in PROC\n\n\n \u00ae  VER (variable, NONBLANK, keyword,value... MSG=value)\n\n\n    \"variable\"    represents the variable you wish to edit\n\n    \"NONBLANK\"    is optional and says the variable must not be null\n\n                  NONBLANK may be abbreviated as NB\n\n\n    \"keyword\"     represents a valid edit keyword\n1Introduction to Dialog Manager                                      Page 46\n\n\n\n        ___________________________________________________________________\n        |                                                                 |\n        |                                                                 |\n        |                PROCEDURE Section (Continued)                    |\n        |                                                                 |\n        |_________________________________________________________________|\n\n\n\n\n    1.  PICT - the variable must conform to a picture\n\n        VER (&SSN,NB,PICT,NNN-NN-NNNN)\n\n        will verify that &SSN is not blank and is entered as a valid Social\n        Security Number.\n\n\n    2.  ALPHA\n\n\n        VER (&ABC,ALPHA)\n\n        Will ensure that if &ABC is entered, is contains only alpha\n        characters\n\n    3.  NUM\n\n        VER (&ABC,NONBLANK,NUM,MSG=ABC001)\n\n        Ensures that &ABC is entered and is numeric. If not, message ABC001\n        will be displayed.\n\n    4.  HEX\n\n        Verifies the variable is all valid hexadecimal digits.\n\n    5.  BIT\n\n        Verifies the variable is all \"0\"s and \"1\"s.\n1Introduction to Dialog Manager                                      Page 47\n\n\n\n        ___________________________________________________________________\n        |                                                                 |\n        |                                                                 |\n        |                PROCEDURE Section (Continued)                    |\n        |                                                                 |\n        |_________________________________________________________________|\n\n\n\n\n    6.  NAME\n\n        Verifies the variable is in valid member name syntax.\n\n    7.  DSNAME\n\n        Verifies the variable is in valid Dataset Name syntax.\n\n    8.  RANGE\n\n        Verifies the variable is within a range of the values that follow.\n\n        VER (&NUM,RANGE,1,1300)\n\n    9.  LIST\n\n        Verifies the variable is one of the following values in the list.\n\n        VER (&OPT,LIST,A,B,C,D,E,F)\n\n\n\n \u00ae  VPUT name-list pool-name\n\n    name-list      is the list of variables enclosed in parends.\n\n    pool-name      is ASIS, SHARED or PROFILE\n1Introduction to Dialog Manager                                      Page 48\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                       Dynamic Message Generation                       |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n \u00ae  Components of a message\n\n    24 byte error message in top left corner\n\n    78 byte error message shown on the third line of the display\n\n\n\n \u00ae  Special Message Names\n\n    DTS001  thru  DTS049\n\n    Displays variables UMSG1  thru  UMSG49 in the 24 byte area\n\n    Displays variables LMSG1  thru  LMSG49 in the 78 byte area\n\n\n\n \u00ae  SPF Processing of Error Messages\n\n    If the 24 byte message is = spaces - ignore - display 78 byte one.\n\n    If the 78 byte message is = spaces - ignore - display the tutorial.\n\n\n\n \u00ae  Directing Error Message to a specific tutorial panel\n\n    DTS050 thru DTS069 directs the PF1 key (HELP key) to a specific tutorial\n    panel.\n1Introduction to Dialog Manager                                      Page 49\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                         Example Image Solution                         |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n\n\n   ---------------------------  EDIT - ENTRY PANEL\n --------------------------\n   COMMAND ===>\n\n   ISPF LIBRARY:\n      PROJECT ===> TESTE\n      LIBRARY ===> LIFE.SPF  ===>           ===>           ===>\n      TYPE    ===> CLIST\n      MEMBER  ===>                 (Blank for member selection list)\n\n   OTHER PARTITIONED OR SEQUENTIAL DATA SET:\n      DATA SET NAME  ===>\n      VOLUME SERIAL  ===>          (If not cataloged)\n\n   DATA SET PASSWORD ===>          (If password protected)\n\n   PROFILE NAME      ===>          (Blank defaults to data set type)\n1Introduction to Dialog Manager                                      Page 50\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                         Example Screen Solution                        |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n\n\n )ATTR\n   \u00ac TYPE(INPUT) INTENS(NON)\n )BODY\n %-------------------------  EDIT - ENTRY PANEL\n ----------------------------- %COMMAND ===>_ZCMD\n + %\n +ISPF LIBRARY:\n +   PROJECT%===>_PROJECT +\n +   LIBRARY%===>_LIBRARY % ===>_LIB2    % ===>_LIB3    % ===>_LIB4    +\n +   TYPE   %===>_TYPE    +\n +   MEMBER %===>_MEMBER  +       (Blank for member selection list)\n +\n +OTHER PARTITIONED OR SEQUENTIAL DATA SET:\n +   DATA SET NAME %===>_DSN\n +   VOLUME SERIAL %===>_VOL   +  (If not cataloged)\n +\n +DATA SET PASSWORD%===>\u00acPASSWD  +(If password protected)\n +\n +PROFILE NAME     %===>_Z       +(Blank defaults to data set type)\n )INIT\n    .HELP = ISR20000\n    .ZVARS = '(EDPR)'\n )PROC\n  IF (&ZCMD \u00ac= &Z)\n     .MSG = ZCMD001\n\n  IF (&DSN = &Z)\n     VER (&PROJECT,NB,NAME,MSG=DTS001)\n     VER (&LIBRARY,NB,NAME,MSG=DTS002)\n     VER (&LIB2,NAME,MSG=DTS002)\n1Introduction to Dialog Manager                                      Page 51\n\n\n     VER (&LIB3,NAME,MSG=DTS002)\n     VER (&LIB4,NAME,MSG=DTS002)\n     VER (&TYPE,NAME,MSG=DTS003)\n\n  VER (&DSN,DSNAME)\n  VER (&VOL,NAME,MSG=DTS004)\n  &VOL = TRUNC (&VOL,6)\n  &TRAIL = .TRAIL\n  IF (&TRAIL \u00ac= &Z)\n      .MSG = DTS004\n\n  &UMSG1 = 'INVALID PROJECT NAME'\n  &LMSG1 = 'EXPECTED VALID PROJECT NAME TO BUILD THE EDIT DSNAME WITH'\n  &UMSG2 = 'INVALID LIBRARY NAME'\n  &LMSG2 = 'EXPECTED A VALID LIBRARY NAME TO BUILD THE EDIT DSNAME WITH'\n  &UMSG3 = 'INVALID TYPE SPECIFIED'\n  &LMSG3 = 'EXPECTED A VALID TYPE TO BUILD THE EDIT DSNAME WITH'\n  &UMSG4 = 'INVALID VOLSER'\n  &LMSG4 = 'EXPECTED A VOLSER NOT GREATER THAN 6 BYTES LONG'\n  VPUT (EDPR) PROFILE\n )END\n1Introduction to Dialog Manager                                      Page 52\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                             File Tailoring                             |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n \u00ae  JCL is maintained in the \"skeleton library\"\n\n\n\n \u00ae  JCL or Data of any kind may be generated\n\n\n\n \u00ae  All ampersands are treated as variables and are subsituted at File\n    Tailoring time.\n\n\n\n \u00ae  Double ampersands generate as a single ampersand.\n\n\n\n \u00ae  Data may not expand beyond column 80.\n\n\n\n \u00ae  Blank lines are not generated.\n1Introduction to Dialog Manager                                      Page 53\n\n\n\n        ___________________________________________________________________\n        |                                                                 |\n        |                                                                 |\n        |                  File Tailoring (Continued)                     |\n        |                                                                 |\n        |_________________________________________________________________|\n\n\n\n\n \u00ae  The Skeleton may contain the following commands:\n\n    Note:      All commands start in column 1.\n\n    1.  )SEL      relational-expression\n        )ENDSEL\n\n\n        By surrounding part of the skeleton with the above commands, the\n        skeleton will be conditionally generated.\n\n\n        If the relational expression is true, the skeleton is generated.\n\n\n        )SEL &SW = 0\n\n        data...\n\n        )ENDSEL\n\n\n\n    2.  )SET     variable = value or expression\n\n\n        Will assign a variable a value during the file tailoring.\n\n\n        )SET SW = 1\n1Introduction to Dialog Manager                                      Page 54\n\n\n\n        ___________________________________________________________________\n        |                                                                 |\n        |                                                                 |\n        |                  File Tailoring (Continued)                     |\n        |                                                                 |\n        |_________________________________________________________________|\n\n\n\n\n    3.  )CM    comments\n\n\n        Allows imbedding of comments in the skeleton.\n\n        These lines will not be generated by the File Tailoring Services.\n\n\n\n    4.  )TB   tab columns\n\n        Used to set the Tab Columns.\n\n        Default is one setting at column 80.\n        The exclamation mark (!) is the default tab character.\n\n\n\n    5.  )IM   skeleton name NT OPT\n\n        Used to include other skeletons.\n\n        Optional keywords NT will not File Tailor.\n1Introduction to Dialog Manager                                      Page 55\n\n\n\n             ______________________________________________________________\n             |                                                            |\n             |                                                            |\n             |               File Tailoring (Continued)                   |\n             |                                                            |\n             |____________________________________________________________|\n\n\n\n\n    6.  )DEFAULT   abcdefg\n\n        Used to set the default characters used by the File Tailoring\n        Service.\n\n        Defaults are:\n                 a     )  represents the character used to denote FT\n             command.\n                 b     &  denotes a variable\n                 c     ?  denotes a FT continuation\n                 d     !  used to tab\n                 e     <  denotes the left side of a conditional value\n                 f     |  represents the \"or\" sign of a conditional value\n                 g     >  represents the right side of a conditional value\n1Introduction to Dialog Manager                                      Page 56\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                         File Tailoring Example                         |\n |                                                                        |\n |________________________________________________________________________|\n\n )SEL &FRSTTIME = Y && &JOB1 \u00ac= &Z\n &JOB1\n )ENDSEL\n )SEL &FRSTTIME = Y && &JOB2 \u00ac= &Z\n &JOB2\n )ENDSEL\n )SEL &FRSTTIME = Y && &JOB3 \u00ac= &Z\n &JOB3\n )ENDSEL\n )SEL &FRSTTIME = Y && &JOB4 \u00ac= &Z\n &JOB4\n )ENDSEL\n //*****************************************************************\n //**\n //**       THIS IS THE LIBRARY CROSS REFERENCE FUNCTION\n //**\n //*****************************************************************\n //XREFLIBS  EXEC PGM=ZCNAJ3,PARM=&PGMOPT\n //STEPLIB     DD DSN=SYS1.SPF.CNALOAD,DISP=SHR\n //SORTLIB     DD DSN=SYS1.SORTLIB,DISP=SHR\n //SORTMSGS    DD  SYSOUT=&WTR\n //SYSPRINT    DD  SYSOUT=&WTR\n //SYSUDUMP    DD  SYSOUT=&WTR\n //REPORT      DD  SYSOUT=&WTR,DCB=BLKSIZE=1330,COPIES=&COP\n //SYSIN       DD  *\n ++PRINT 0-UP\n //SYSPUNCH    DD  UNIT=SYSDA,SPACE=(CYL,(1,1)),\n //             DCB=(RECFM=FB,BLKSIZE=800,LRECL=80)\n //WKFILE01    DD  UNIT=SYSDA,SPACE=(CYL,(2,2)),DISP=(MOD,DELETE)\n //SORTWK01    DD  UNIT=SYSDA,SPACE=(CYL,(6),,CONTIG)\n //SORTWK02    DD  UNIT=SYSDA,SPACE=(CYL,(6),,CONTIG)\n //SORTWK03    DD  UNIT=SYSDA,SPACE=(CYL,(6),,CONTIG)\n //SORTWK04    DD  UNIT=SYSDA,SPACE=(CYL,(6),,CONTIG)\n //SORTWK05    DD  UNIT=SYSDA,SPACE=(CYL,(6),,CONTIG)\n //CONTROL     DD DUMMY,DCB=(RECFM=F,BLKSIZE=80,LRECL=80)\n1Introduction to Dialog Manager                                      Page 57\n\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                   File Tailoring Example (Continued)                   |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n )SEL    &LIB1 = Y\n //&LIT1.LIB&CG1.1  DD DSN=&DSN1,DISP=SHR\n )ENDSEL\n )SEL    &LIB2 = Y\n //&LIT2.LIB&CG2.2  DD DSN=&DSN2,DISP=SHR\n )ENDSEL\n )SEL    &LIB3 = Y\n //&LIT3.LIB&CG3.3  DD DSN=&DSN3,DISP=SHR\n )ENDSEL\n )SEL  &LIB4 = Y\n //&LIT4.LIB&CG4.4  DD DSN=&DSN4,DISP=SHR\n )ENDSEL\n )SEL  &LIB5 = Y\n //&LIT5.LIB&CG5.5  DD DSN=&DSN5,DISP=SHR\n )ENDSEL\n )SEL  &LIB6 = Y\n //&LIT6.LIB&CG6.6  DD DSN=&DSN6,DISP=SHR\n )ENDSEL\n1Introduction to Dialog Manager                                      Page 58\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                   Invoking ISPF Services from a CLIST                  |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n \u00ae  SYNTAX\n\n    ISPEXEC   service-name  parameters\n\n\n\n    ISPEXEC       must be coded as shown.\n\n    service-name  is the appropriate service you wish to invoke.\n\n    parameters    are any valid parms associated with the service.\n\n\n\n \u00ae  Notes about ISPF Services\n\n    ~ All Variables in a CLIST are implicit.\n\n    ~ If ISPEXEC is issued from outside ISPF, LASTCC = 12.\n1Introduction to Dialog Manager                                      Page 59\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                      Invoking the CONTROL Service                      |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n \u00ae  SYNTAX\n\n    ISPEXEC   CONTROL   type    mode\n\n\n\n    ISPEXEC       must be coded as shown.\n\n    CONTROL       is the service-name and should be coded as shown.\n\n    type          should be a valid CONTROL type as found in the ISPF\n                  manual.\n\n    mode          should be a valid \"mode\" for the \"type\" selected.\n\n\n\n \u00ae  Setting Error Modes\n\n\n    ISPEXEC CONTROL ERRORS CANCEL\n\n    or\n\n    ISPEXEC CONTROL ERRORS RETURN\n\n\n    Tells SPF to handle or ignore return codes greater than 12.\n    Only affects ISPEXEC Services.\n1Introduction to Dialog Manager                                      Page 60\n\n\n\n    _______________________________________________________________________\n    |                                                                     |\n    |                                                                     |\n    |               Invoking the CONTROL Service (continued)              |\n    |                                                                     |\n    |_____________________________________________________________________|\n\n\n\n\n \u00ae  Setting DISPLAY Refresh mode\n\n\n    ISPEXEC CONTROL DISPLAY REFRESH\n\n\n    Will send the entire screen image when the next panel is displayed.\n\n    Automatically set by entering Line Mode.\n\n\n\n \u00ae  Setting DISPLAY Line Mode\n\n\n    ISPEXEC CONTROL DISPLAY LINE START(number)\n\n\n    Tells SPF to enter Line Mode and will place cursor at line \"number\".\n\n    Number \"0\" will place cursor at end of panel.\n\n\n\n \u00ae  Setting DISPLAY LOCK\n\n\n    ISPEXEC CONTROL DISPLAY LOCK\n\n\n    Tells SPF not to free the keyboard when the next screen is displayed.\n1Introduction to Dialog Manager                                      Page 61\n\n\n\n    _______________________________________________________________________\n    |                                                                     |\n    |                                                                     |\n    |               Invoking the CONTROL Service (continued)              |\n    |                                                                     |\n    |_____________________________________________________________________|\n\n\n\n\n \u00ae  Setting DISPLAY SAVE / RESTORE\n\n\n    ISPEXEC CONTROL DISPLAY SAVE\n\n    or\n\n    ISPEXEC CONTROL DISPLAY RESTORE\n\n\n    Saves or restores the current environments control blocks.\n\n\n\n \u00ae  Setting NONDISPL mode\n\n\n    ISPEXEC CONTROL NONDISPL ENTER\n\n    or\n\n    ISPEXEC CONTROL NONDISPL END\n\n\n    When the next display of a screen is issued, do not display the screen.\n    Simulate the ENTER or END key being hit.\n1Introduction to Dialog Manager                                      Page 62\n\n\n\n    _______________________________________________________________________\n    |                                                                     |\n    |                                                                     |\n    |               Invoking the CONTROL Service (continued)              |\n    |                                                                     |\n    |_____________________________________________________________________|\n\n\n\n\n \u00ae  Setting SPLIT mode\n\n\n    ISPEXEC CONTROL SPLIT ENABLE\n\n    or\n\n    ISPEXEC CONTROL SPLIT DISABLE\n\n\n    Enable or Disable the SPLIT Screen function.\n    If Split Screen is already entered, set bad Return Code.\n1Introduction to Dialog Manager                                      Page 63\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                      Invoking the DISPLAY Service                      |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n \u00ae  SYNTAX\n\n    ISPEXEC DISPLAY PANEL(panel) MSG(message) CURSOR(field)\n\n\n    ISPEXEC        must be coded as shown\n\n    DISPLAY        must be coded as shown\n\n    PANEL(panel)   is optional.\n                   Code the panel name to be displayed.\n\n    MSG(message)   is optional.\n                   Code a Message id if one is to be displayed.\n\n    CURSOR(field)  is optional.\n                   Code a Variable name for the cursor to be placed at.\n\n\n\n \u00ae  Return Codes\n\n    0    Normal completion.\n    8    User hit PF3 or his END key.\n    12   The panel, message or cursor field could not be found.\n    16   Truncation or Translation error in storing defined variables.\n    20   Severe Error Occurred.\n1Introduction to Dialog Manager                                      Page 64\n\n\n\n    _______________________________________________________________________\n    |                                                                     |\n    |                                                                     |\n    |             Invoking the DISPLAY Service (continued)                |\n    |                                                                     |\n    |_____________________________________________________________________|\n\n\n\n\n \u00ae  Special Notes\n\n    Leaving the Panel blank will redisplay the current panel.\n\n    Leaving Message blank will issue no message.\n\n    Leaving Cursor blank will have normal cursor placement execute.\n1Introduction to Dialog Manager                                      Page 65\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                    Invoking FILE TAILORING Services                    |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n \u00ae  Description\n\n    File Tailoring Services will generate data found in the skeleton\n    library.\n\n    A regular Open, Write and Close file logic must be invoked.\n\n\n\n \u00ae  Opening a the FTS file\n\n    Use the ISPEXEC FTOPEN service\n\n\n\n \u00ae  Generating (writing) the FTS file\n\n    Use the ISPEXEC FTINCL service\n\n\n\n \u00ae  Closing the FTS file\n\n    Use the ISPEXEC FTCLOSE service\n1Introduction to Dialog Manager                                      Page 66\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                Opening the FILE TAILORING file (FTOPEN)                |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n \u00ae  Syntax\n\n    ISPEXEC   FTOPEN  TEMP\n\n\n    ISPEXEC        must be coded as shown\n\n    FTOPEN         must be coded as shown\n\n    TEMP           is optional.\n                   If coded, it must be coded as shown.\n\n\n\n \u00ae  Description\n\n    Open a File Tailoring Output file.\n\n    TEMP  keyword says the file is a temporary one.\n    ISPF will dynamically allocate a file for you.\n\n    The files fully qualified name without quotes is found in the shared\n    pool as variable ZTEMPF.\n\n    If TEMP is not used, the output file must be allocated by a user to the\n    DDNAME ISPFILE.\n1Introduction to Dialog Manager                                      Page 67\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |               Generating the FILE TAILORING file (FTINCL)              |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n \u00ae  Syntax\n\n    ISPEXEC   FTINCL  skel-name   NOFT\n\n\n    ISPEXEC        must be coded as shown\n\n    FTINCL         must be coded as shown\n\n    skel-name      should be a valid skeleton name.\n\n    NOFT           is optional.\n                   If coded it must be coded as shown.\n                   It tells the File Tailoring not to process the skeleton.\n\n\n\n \u00ae  Description\n\n    Include into the File Tailoring Output file the named skeleton.\n\n    NOFT  keyword says not to do any variable subsitution or processing of\n    the ) control cards.\n\n    An FTOPEN must have been executed successfully.\n1Introduction to Dialog Manager                                      Page 68\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                Closing the FILE TAILORING file (FTCLOSE)               |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n \u00ae  Syntax\n\n    ISPEXEC   FTCLOSE\n\n\n    ISPEXEC        must be coded as shown\n\n    FTCLOSE        must be coded as shown\n\n\n\n \u00ae  Description\n\n    Closes the File Tailoring output file so you may submit JCL or process\n    the data generated.\n\n    There are other parameters on the FTCLOSE not covered here.\n1Introduction to Dialog Manager                                      Page 69\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                  The ISPF Test Facility (PDF OPTION 7)                 |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n \u00ae  Describing the what a \"TEST\" environment is...\n\n    When ISPF get a panel from ISPPLIB...\n\n    ~  It normally will do a BLDL and reuse the BLDL for the panel.\n\n    ~  After updating the panel description, the BLDL is still pointing to\n       the old version.\n\n    ~  PA1 or the ATTN key hit twice returns you to the Primary Option Menu.\n\n\n\n In a TEST mode...\n\n    ~  ISPF does a fresh BLDL every time a panel is displayed...\n\n    ~  PA1 or the ATTN key will exit ISPF immediately.\n\n\n\n \u00ae  Invoking the \"TEST\" mode...\n\n    PDF TEST\n    PDF TESTX\n    PDF TRACE\n    PDF TRACEX\n\n    Enter Option 7 while in ISPF.\n1Introduction to Dialog Manager                                      Page 70\n\n\n\n    _______________________________________________________________________\n    |                                                                     |\n    |                                                                     |\n    |                The ISPF Test Facility (continued)                   |\n    |                                                                     |\n    |_____________________________________________________________________|\n\n\n\n\n \u00ae  Using Option 7\n\n    Option 7.1    -    will test a \"function\"\n\n    Option 7.2    -    will test/display a data entry panel\n\n    Option 7.3    -    display/update variables in all pools\n\n    Option 7.4    -    allows a user to maintain ISPF tables\n\n    Option 7.5    -    browses a users ISPF LOG.\n\n    Option 7.6    -    allows the user to type any ISPEXEC commands\n\n    Option 7.7    -    allows the user to trace variables/functions\n\n    Option 7.8    -    allows the user to set breakpoints\n\n    Option 7.T    _    is a full tutorial on the above functions\n1Introduction to Dialog Manager                                      Page 71\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                         Coding an Example CLIST                        |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n \u00ae The following is an example CLIST\n\n    /******************************************************************\n    /*     DETERMINE IF WE ARE RUNNING IN DEBUG MODE                  *\n    /*     AND SET CONTROL ACCORDINGLY                                *\n    /******************************************************************\n             CONTROL NOFLUSH NOMSG\n             ISPEXEC VGET SPFDBUG PROFILE\n             IF &LASTCC \u00ac= 0 THEN SET &SPFDBUG = N\n             IF &SPFDBUG = Y THEN CONTROL LIST MSG SYMLIST CONLIST\n             ELSE CONTROL NOLIST NOMSG NOSYMLIST NOCONLIST\n    /******************************************************************\n    /*               INITIALIZATION                                   *\n    /******************************************************************\n             SET MESSAGE =\n             SET CURSOR =\n             SET PANEL = EDSAMPLE\n    /******************************************************************\n    /*               MAIN CLIST LOGIC                                 *\n    /******************************************************************\n    LOOP:    +\n             ISPEXEC DISPLAY PANEL(&PANEL) MSG(&MESSAGE) CURSOR(&CURSOR)\n    /******************************************************************\n    /*             REINITIALIZATION                                   *\n    /******************************************************************\n             SET MESSAGE =\n             SET CURSOR =\n             SET PANEL = EDSAMPLE\n    /******************************************************************\n    /*       DO THE SCOPE OF THE CLIST WORK                           *\n    /******************************************************************\n              .\n1Introduction to Dialog Manager                                      Page 72\n\n\n\n    _______________________________________________________________________\n    |                                                                     |\n    |                                                                     |\n    |                Coding an Example Clist (continued)                  |\n    |                                                                     |\n    |_____________________________________________________________________|\n\n\n\n\n              .\n              .\n              IF error occurred THEN DO\n                  SET UMSG1 = &STR(short message)\n                  SET LMSG1 = &STR(long message)\n                  SET MESSAGE = &STR(DTS001)\n        optional  SET PANEL =\n                  SET CURSOR = field name in error\n                  GOTO LOOP\n                  END\n1Introduction to Dialog Manager                                      Page 73\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                           Coding a Menu Panel                          |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n \u00ae  Special Considerations for coding a Menu Panel\n\n    Use standard Model under ISPF/PDF EDIT to begin\n\n\n\n \u00ae  The PROC Section\n\n    &ZSEL = TRANS ( TRUNC (&ZCMD,'.')\n                   value, ' string '\n                   value, ' string '\n                     ' ',' '\n                     '*','?'  )\n\n\n    value      is the value the user enters\n\n    string     is a valid string to follow the ISPEXEC SELECT command\n1Introduction to Dialog Manager                                      Page 74\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                         Coding a Tutorial Panel                        |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n \u00ae  The PROC Section may be the same as a Menu Panel\n\n\n    To set up a \"menu\" of help panels.\n\n    The \"string\" value that &ZSEL is assigned must be a panel name.\n\n    If the panel name is preceded by a \"*\", the panel will not be\n    automatically selected by ISPF services (when the user hits enter with\n    nothing else.\n\n\n\n \u00ae  &ZCONT parameter\n\n    Used to specify a panel which is a continuation of the current one.\n\n\n\n \u00ae  &ZUP parameter\n\n    Connects a panel to an upper level panel.\n\n    Used only when this panel is displayed before the upper level panel.\n    If the upper panel is displayed first, ISPF will remember.\n\n\n\n \u00ae  Testing the tutorial service\n\n    ISPEXEC SELECT PGM(ISPTUTOR) PARM(panel name)\n1Introduction to Dialog Manager                                      Page 75\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                               ISPF Tables                              |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n \u00ae  Overview\n\n\n    Tables consists of rows (records) of data\n\n    Rows consists of variables (fields) of data\n\n    _____________\u00a2_____________________\u00a2___________________________\u00ac\n                 |  &NAME              |  &ADDRESS                 |\n    _____________+_____________________+___________________________@\n    Row number 1 |  Bob Zimmerman      |  1234 State Street        |\n    _____________+_____________________+___________________________@\n    Row number 2 |  Bruce Lomar        |  1236 Wabash Street       |\n    _____________$_____________________$___________________________<\n\n\n\n \u00ae  ISPF Table Services\n\n\n    \u20ac  Creates a table\n\n    \u20ac  Opens a table previously closed\n\n    \u20ac  Saves a table (permanent tables)\n\n    \u20ac  Closes a table with or without saving it\n\n    \u20ac  Deletes tables\n1Introduction to Dialog Manager                                      Page 76\n\n\n\n       ____________________________________________________________________\n       |                                                                  |\n       |                                                                  |\n       |                    ISPF Tables (continued)                       |\n       |                                                                  |\n       |__________________________________________________________________|\n\n\n\n\n \u00ae  ISPF Tables Services for rows of the table\n\n\n    \u20ac  A row can have unlimited amount of variables (fields)\n\n    \u20ac  The data the row represents is limited to 32k\n\n    \u20ac  Pointing to row \"x\" will fill the variables of the table with the\n       data of that row.\n\n    \u20ac  Any single row can be \"extended\" with extra variables pertinent to\n       that row.\n\n\n\n    \u00ae  ISPF Tables Services for columns of a table\n\n\n       \u20ac  You may scan a table for a specific value(s) in a given\n       variable(s).\n\n\n\n \u00ae  Temporary tables  vs.  Permanent Tables\n\n    Permanent tables are saved on DISK (ISPTABL) and may be opened from disk\n    (ISPTLIB).\n\n    Temporary tables exist only in storage and are deleted from storage.\n\n    Permanent tables may be shared across users (for read only).\n1Introduction to Dialog Manager                                      Page 77\n\n\n\n    _______________________________________________________________________\n    |                                                                     |\n    |                                                                     |\n    |                      ISPF Tables (continued)                        |\n    |                                                                     |\n    |_____________________________________________________________________|\n\n\n\n\n \u00ae  Keyed  vs.  non-Keyed tables\n\n    Any row variable(s) can be designated as the key to the table.\n\n    Duplicate keys are not allowed.\n\n    In ISPF RELEASE 2, keyed tables are maintained in key sequence.\n\n    Rows of a keyed table may be accessed directly by a key.\n\n\n\n \u00ae  Displaying the data of a table\n\n    Any single row can be displayed/updated by a data entry panel.\n\n    Display of 2 or more rows requires a special TABLE DISPLAY panel.\n\n    On the Table Display panel, you may select which variables of the row\n    should be displayed.\n\n    Table Display panels do not support )PROC section.\n    This is only Release 1.\n    This only applies to the table variables.\n\n    The display is maintained by ISPF (Scrollable).\n1Introduction to Dialog Manager                                      Page 78\n\n\n\n    _______________________________________________________________________\n    |                                                                     |\n    |                                                                     |\n    |                      ISPF Tables (continued)                        |\n    |                                                                     |\n    |_____________________________________________________________________|\n\n\n\n\n \u00ae  LIMITATIONS\n\n    There is no SORT Facility in release 1 to SORT the tables.\n\n    Permanent tables should be limited in size because of overhead.\n1Introduction to Dialog Manager                                      Page 79\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                       Example Table Display CLIST                      |\n |                                                                        |\n |________________________________________________________________________|\n\n PROC 0\n /******************************************************************\n /*     DETERMINE IF WE ARE RUNNING IN DEBUG MODE                  *\n /*     AND SET CONTROL ACCORDINGLY                                *\n /******************************************************************\n          CONTROL NOFLUSH NOMSG\n          ISPEXEC VGET SPFDBUG PROFILE\n          IF &LASTCC \u00ac= 0 THEN SET &SPFDBUG = N\n          IF &SPFDBUG = Y THEN CONTROL LIST MSG SYMLIST CONLIST\n          ELSE CONTROL NOLIST NOMSG NOSYMLIST NOCONLIST\n /******************************************************************\n /*       MAIN CLIST LOGIC\n /*       OPEN TABLE THAT CONTAINS DOCUMENTS\n /******************************************************************\n          SET MSG =\n          SET CURSOR =\n          SET PANEL = DTSDOCS\n          SET CSRROW =\n          SET ZTDTOP = 1\n          SET LERROR =\n          ISPEXEC CONTROL ERRORS RETURN\n          ISPEXEC TBOPEN DTSDOCS NOWRITE\n          SET LCC = &LASTCC\n          IF &LCC \u00ac= 0 AND &LCC \u00ac= 12 THEN +\n              DO\n              ISPEXEC CONTROL DISPLAY LINE START(0)\n              WRITE SEVERE ERROR OCCURRED PROCESSING DOCUMENT TABLE\n              WRITE OPEN FAILED\n              WRITE NOTIFY DEVELOPMENT TECHNICAL SUPPORT (X5719)\n              EXIT CODE(&LCC)\n              END\n\n /******************************************************************\n /*       THIS THE CODE THAT LOOPS THRU TABLE PROCESSING\n /******************************************************************\n1Introduction to Dialog Manager                                      Page 80\n\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                 Example Table Display Clist (continued)                |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n LOOP:    +\n          IF &LERROR = OR &LERROR = &CSRROW OR &LERROR = 0 THEN\n          ELSE +\n              DO\n              ISPEXEC TBTOP DTSDOCS\n              SET LCC = &LASTCC\n              ISPEXEC TBSKIP DTSDOCS NUMBER(&LERROR)\n              SET LCC = &LASTCC\n              SET LSEL =\n              ISPEXEC TBPUT DTSDOCS\n              SET LCC = &LASTCC\n              END\n\n          ISPEXEC TBTOP DTSDOCS\n          SET LCC = &LASTCC\n          ISPEXEC TBSKIP DTSDOCS NUMBER(&ZTDTOP)\n          SET LCC = &LASTCC\n\n          ISPEXEC TBDISPL DTSDOCS PANEL(&PANEL)   +\n                                  MSG(&MSG)       +\n                                  CURSOR(&CURSOR) +\n                                  CSRROW(&CSRROW)\n          SET PCC = &LASTCC\n          IF &PCC > 8 THEN +\n              DO\n              ISPEXEC CONTROL DISPLAY LINE START(0)\n              WRITE SEVERE ERROR OCCURRED PROCESSING DOCUMENT SCREEN\n              WRITE TBDISPL OF SCREEN FAILED\n              WRITE NOTIFY DEVELOPMENT TECHNICAL SUPPORT (X5719)\n              EXIT CODE(&LCC)\n              END\n1Introduction to Dialog Manager                                      Page 81\n\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                 Example Table Display Clist (continued)                |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n          IF &MSG = THEN SET LERROR =\n          ELSE SET LERROR = &CSRROW\n          SET MSG =\n          SET CURSOR =\n          SET PANEL = DTSDOCS\n          SET CSRROW =\n          IF &STR(&PCMD) = RES THEN SET PCMD = RESET\n\n          ISPEXEC TBQUERY DTSDOCS POSITION(CRP)\n          SET LCC = &LASTCC\n          IF &CRP = 0 THEN GOTO PRIM\n          SET LSEL = &STR(&LSEL)\n          IF &STR(&PCMD) = RESET THEN SET LSEL =\n\n /******************************************************************\n /*       LINE COMMAND EQUAL TO SPACES\n /******************************************************************\n          IF &STR(&LSEL) = THEN +\n              DO\n              GOTO NEXTLC\n              END\n\n /******************************************************************\n /*       LINE COMMAND EQUAL TO \"S\" OR \"P\" TO SUBMIT JOB TO PRINT\n /******************************************************************\n          IF &STR(&LSEL) = S OR &STR(&LSEL) = P THEN +\n              DO\n              IF &LENGTH(&JCL) < 9 THEN +\n                  ISPEXEC SELECT PANEL(&JCL)\n              ELSE +\n                  DO\n1Introduction to Dialog Manager                                      Page 82\n\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                 Example Table Display Clist (continued)                |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n                  SET TEMP = &CRP - &ZTDTOP\n                  SET TEMP = &TEMP + 12\n                  IF &TEMP > 22 THEN SET &TEMP = 22\n                  ISPEXEC CONTROL DISPLAY LINE START(&TEMP)\n                  CONTROL MSG PROMPT\n                  SUB &JCL\n                  IF &SPFDBUG \u00ac= Y THEN CONTROL NOMSG NOPROMPT\n                  END\n              SET LSEL =\n              GOTO NEXTLC\n              END\n\n /******************************************************************\n /*       LINE COMMAND EQUAL TO \"B\"\n /******************************************************************\n          IF &STR(&LSEL) = B THEN +\n              DO\n              IF &STR(&BRDSNAME) = THEN +\n                  DO\n                  SET UMSG1 = &STR(NO BROWSEABLE DOCUMENT)\n                  SET LMSG1 = &STR(THERE IS NO DOCUMENT AVAILABLE +\n                  FOR INTERACTIVE BROWSE)\n                  SET MSG = &STR(DTS001)\n                  SET CURSOR = LSEL\n                  SET CSRROW = &CRP\n                  END\n              ELSE +\n                  DO\n                  SET BRTITLE = &STR(&DOC - &DESC)\n                  ISPEXEC BROWSE DATASET(&BRDSNAME)\n                  SET LCC = &LASTCC\n1Introduction to Dialog Manager                                      Page 83\n\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                 Example Table Display Clist (continued)                |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n                  SET BRTITLE =\n                  IF &LCC \u00ac= 0 THEN +\n                      DO\n                      SET UMSG1 = &STR(BROWSE ERROR OCCURRED)\n                      SET LMSG1 = &STR(TRIED TO BROWSE &DOC AND +\n                      BROWSE RETURN NON-ZERO RETURN CODE)\n                      SET MSG = &STR(DTS001)\n                      SET CURSOR = LSEL\n                      SET CSRROW = &CRP\n                      END\n                  ELSE SET LSEL =\n                  END\n              GOTO NEXTLC\n              END\n\n /******************************************************************\n /*       INVALID LINE COMMAND\n /******************************************************************\n          SET UMSG1 = &STR(INVALID LINE COMMAND)\n          SET LMSG1 = &STR(THE ONLY VALID LINE COMMANDS ARE 'S', 'P' +\n          AND 'B')\n          SET MSG = &STR(DTS001)\n          SET CURSOR = LSEL\n          SET CSRROW = &CRP\n\n /******************************************************************\n /*       CHECK FOR MORE LINE COMMANDS\n /******************************************************************\n NEXTLC:  +\n          ISPEXEC TBPUT DTSDOCS\n          SET LCC = &LASTCC\n1Introduction to Dialog Manager                                      Page 84\n\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                 Example Table Display Clist (continued)                |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n          IF &MSG = THEN +\n              DO\n              IF &PCC = 4 OR &PCC = 8 THEN +\n                  DO\n                  SET PANEL =\n                  GOTO LOOP\n                  END\n              END\n          ELSE +\n              DO\n              GOTO LOOP\n              END\n\n /******************************************************************\n /*       PRIMARY COMMAND AREA\n /******************************************************************\n PRIM:    +\n          IF &PCC = 8 AND &LERROR =  THEN +\n              DO\n              ISPEXEC TBEND DTSDOCS\n              SET LCC = &LASTCC\n              EXIT CODE(&LASTCC)\n              END\n\n          IF &STR(&PCMD) = THEN GOTO LOOP\n          IF &STR(&PCMD) = RESET THEN +\n              DO\n              SET PCMD =\n              GOTO LOOP\n              END\n1Introduction to Dialog Manager                                      Page 85\n\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                 Example Table Display Clist (continued)                |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n          IF &STR(&PCMD) = PRINT THEN +\n              DO\n              ALLOC F(ISPFILE) SYSOUT(P) +\n                  LRECL(80) BLKSIZE(80) DSORG(PS) RECFM(F A) REUSE\n              SET LCC = &LASTCC\n              ISPEXEC FTOPEN\n              SET LCC = &LASTCC\n              ISPEXEC FTINCL DTSDOCS\n              SET LCC = &LASTCC\n              ISPEXEC FTCLOSE\n              SET LCC = &LASTCC\n              FREE F(ISPFILE)\n              SET PCMD =\n              SET UMSG1 = &STR(LIST OF DOCS PRINTED)\n              SET LMSG1 = &STR(THE ENTIRE LISTING OF DOCUEMNTS SHOWN +\n              HERE HAS BEEN PRINTED)\n              SET MSG = &STR(DTS001)\n              GOTO LOOP\n              END\n\n          SET SYSDVAL = &STR(&PCMD)\n          READDVAL COMMAND PARMS EXTRA\n\n          IF &STR(&EXTRA) \u00ac= THEN +\n              DO\n              SET UMSG1 = &STR(TOO MANY PARAMETERS)\n              SET LMSG1 = &STR(YOU HAVE ENTERED TOO MANY PARAMETER FOR +\n              THIS FUNCTION)\n              SET MSG = &STR(DTS001)\n              GOTO LOOP\n              END\n1Introduction to Dialog Manager                                      Page 86\n\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                 Example Table Display Clist (continued)                |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n          IF &STR(&PARMS) = THEN +\n              DO\n              SET UMSG1 = &STR(EXPECTED A PARAMETER)\n              SET LMSG1 = &STR(THE LOCATE COMMAND EXPECTS A PARAMETER +\n              TO SEARCH ON)\n              SET MSG = &STR(DTS001)\n              GOTO LOOP\n              END\n\n          IF &STR(&COMMAND) = L OR &STR(&COMMAND) = LOC THEN +\n              DO\n              ISPEXEC TBTOP DTSDOCS\n              SET LCC = &LASTCC\n              SET DOC = &STR(&PARMS)&STR(*)\n              ISPEXEC TBSCAN DTSDOCS ARGLIST(DOC)\n              SET LCC = &LASTCC\n              IF &LCC = 8 THEN +\n                  DO\n                  SET UMSG1 = &STR(PREFIX NOT FOUND)\n                  SET LMSG1 = &STR(NO DOCUMENTS BEGIN WITH &PARMS)\n                  SET MSG = &STR(DTS001)\n                  GOTO LOOP\n                  END\n              ISPEXEC TBQUERY DTSDOCS POSITION(ZTDTOP)\n              SET PCMD =\n              GOTO LOOP\n              END\n\n          SET UMSG1 = &STR(INVALID COMMAND)\n          SET LMSG1 = &STR(THE COMMAND ENTERED IS NOT VALID FOR THIS +\n          FUNCTION)\n1Introduction to Dialog Manager                                      Page 87\n\n\n\n __________________________________________________________________________\n |                                                                        |\n |                                                                        |\n |                 Example Table Display Clist (continued)                |\n |                                                                        |\n |________________________________________________________________________|\n\n\n\n\n          SET MSG = &STR(DTS001)\n          GOTO LOOP\n1Introduction to Dialog Manager                                      Page 88\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n SCLIB\n DMCLASS\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CTABLE": {"ttr": 1795, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "1\n\n\n\n\n\n\n ___________________________________________________________\n |                                                         |\n |                                                         |\n |                 ISPF/PDF Command Tables                 |\n |                                                         |\n |_________________________________________________________|\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                Bob Zimmerman\n                                Development Technical Support\n                                CNA Insurance\n                                CNA Plaza - 8CS\n                                Chicago, Il  60685\n                                (312)  822 - 5719\n\n\n\n\n\n\n\n\n\n\n\n                             -1-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n                           Overview\n ____________________________________________________________\n\n\n\n\n\n      *  Allows entry of commands from any panel\n\n\n\n\n      *  A user may enter a command by\n\n\n         . Keying the command on the command line\n\n\n         . Pressing a PF key which represents the command(s)\n\n\n         . Using a Lightpen or Cursor Select key\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                             -1-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n                     Overview (continued)\n ____________________________________________________________\n\n\n\n\n\n\n      *  Some familiar commands\n\n\n\n         . TSO < a tso command >\n\n           to execute a TSO command from any screen\n\n\n\n\n\n         . SPLIT\n\n           to SPLIT screen\n\n\n\n\n\n         . HELP\n\n           to invoke the ISPF Tutorial Service\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                             -2-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n                           Features\n ____________________________________________________________\n\n\n\n\n\n      *  Command tables execute Independent of a Dialog\n\n\n\n      *  Different ISPF Applications have different commands\n\n\n\n\n\n      *  Multiple commands may be stacked on the command line\n\n\n         . Supported via Command Delimiter\n\n\n         . Default Delimiter is semicolon (;)\n\n\n         . ISPF option 0.1 can modify this delimiter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                             -3-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n                      Why Command Tables\n ____________________________________________________________\n\n\n\n\n\n      *  Installation Dependent Commands\n\n\n         . Query System Status\n\n\n\n\n\n      *  Application Dependent Commands\n\n\n         . Query Application Status/Options\n\n\n\n\n\n      *  Restricted Command Access\n\n\n         . Disallow Commands\n\n\n         . Assign Command Aliases\n\n\n\n\n\n\n\n\n\n\n\n\n\n                             -4-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n                   What a Command can do...\n ____________________________________________________________\n\n\n\n      *  Invoke any ISPF Function via SELECT service\n\n\n         . SELECT PGM(a dialog program) PARM(parms)\n\n\n         . SELECT CMD(a TSO command)\n\n\n         . SELECT PANEL(an ISPF menu panel)\n\n\n\n\n\n      *  Assign Aliases to Existing Commands\n\n\n         . Assign the word QUIT the same function as END\n\n\n\n\n\n      *  Define a Function Command\n\n\n         . Automatically Parses the Command\n\n\n         . Allows Dialog Access to System Commands (UP, DOWN)\n\n\n\n\n\n\n\n\n\n                             -5-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n                   Command Table Structure\n ____________________________________________________________\n\n\n\n\n\n      *  Regular ISPF Table\n\n\n         . Created and Maintained via ISPF Table Services\n\n\n\n\n\n      *  Application Command Table\n\n\n         . One Table per Application (optional)\n\n\n\n\n\n      *  System Command Table\n\n\n         . One per ISPF Session (required)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                             -6-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n             Command Table Structure (continued)\n ____________________________________________________________\n\n\n\n\n\n\n      *  Command Table Search\n\n\n\n         . For every command entered on a Command Line\n\n\n\n         . Search current Application Command Table\n\n\n\n         . Search System Command Table\n\n\n\n         . If in neither - pass it to Dialog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                             -7-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n            Invoking an Application Command Table\n ____________________________________________________________\n\n\n\n\n\n      *  Use NEWAPPL Keyword on Select Service\n\n\n         . ISPEXEC SELECT ... NEWAPPL(XXXX)\n\n           where XXXX is the Application ID\n\n\n\n\n      *  Command Table Location\n\n\n         . Command Tables reside on ISPTLIB\n\n\n         . Treated as a regular ISPF Table.\n\n\n\n\n      *  Command Table Naming Conventions\n\n\n         . Application Id followed by CMDS\n\n           In above example, XXXXCMDS\n\n\n\n\n\n\n\n\n\n\n\n                             -8-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n                  Command Table Availability\n ____________________________________________________________\n\n\n\n\n\n      *  Duration of an Application Command Table\n\n\n         . Activated by Select Service with NEWAPPL\n\n\n         . Deactivated at Function Termination\n\n\n         . Suspended by Invoking of Another Application\n\n\n         . Command Tables DO NOT Stack\n\n\n\n\n      *  Duration of the System Command Table\n\n\n         . Activated by ISPF when ISPF begins\n\n\n         . Deactivated at ISPF Termination\n\n\n         . Never Suspended - only Overridden\n\n\n         . System Command Table is called ISPCMDS\n\n\n\n\n\n\n\n\n                             -9-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n                  Command Table Maintenance\n ____________________________________________________________\n\n\n\n\n\n      *  Input  vs  Output\n\n\n\n         . Input members on ISPTLIB\n\n\n\n         . Output members on ISPTABL\n\n\n\n\n\n\n      *  Application Command Table Maintenance\n\n\n\n         . PDF Option 3.9\n\n\n           Enter Application ID\n\n\n           Checks ISPTLIB for current Command Table\n\n\n           If not found, creates one in core\n\n\n\n\n\n\n\n\n\n                             -10-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n                        PDF Option 3.9\n ____________________________________________________________\n\n\n\n\n\n      Put 3.9 Screen here ================================\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                             -11-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n            Command Table Maintenance (continued)\n ____________________________________________________________\n\n\n\n\n\n      *  System Command Table Maintenance\n\n\n\n         . Unable to edit table ISPCMDS\n\n\n\n         . Copy ISPCMDS to dummy table (e.g. TSTCMDS)\n\n\n           You can use PDF Option 3.3\n\n\n\n         . Store dummy table in ISPTLIB library\n\n\n\n         . Access dummy table via option 3.9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                             -12-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n                   Updating a Command Table\n ____________________________________________________________\n\n\n\n\n\n      *  The  VERB  field\n\n\n         . ISPF Command Name\n\n           Command user enters on the Command Line\n\n\n\n\n      *  The  T  field\n\n\n         . Truncation Amount\n\n           ISPF requires this many bytes of the VERB\n\n           Truncate Value 0  =  no truncation\n\n\n\n\n      *  The  ACTION  field\n\n\n         . Processing for the specified VERB\n\n\n\n\n      *  Description\n\n\n         . User description of Command (documentation)\n\n\n\n\n                             -13-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n                    Command Table Actions\n ____________________________________________________________\n\n\n\n\n\n      *  SELECT\n\n\n         . Causes the CMD, PGM or PANEL to begin\n\n\n\n\n\n      *  ALIAS\n\n\n         . Allows Command Aliases\n\n\n\n\n\n      *  PASSTHRU\n\n\n         .  Passes command thru to Dialog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                             -14-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n              Command Table Actions (continued)\n ____________________________________________________________\n\n\n\n\n\n      *  SETVERB\n\n\n         .  Passes command thru to Dialog\n\n\n         .  Command in variable ZVERB\n\n\n         .  Command parms in variable ZPARM\n\n\n\n\n\n      *  NOP\n\n\n         . Disables a command\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                             -15-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n             Put example of system command table\n ____________________________________________________________\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                             -16-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n                        Some Examples\n ____________________________________________________________\n\n\n\n\n\n               On the following pages you will find\n\n                    example modifications to a\n\n                  SYSTEM COMMAND TABLE (ISPCMDS).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                             -17-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n                      The  HOLD  command\n ____________________________________________________________\n\n\n\n\n\n      *  Description\n\n\n         . \"HOLD\" your current ISPF session.\n\n\n         . \"Restart\" ISPF (stacking new session)\n\n\n\n\n\n      *  Effect\n\n\n         . User may already be in SPLIT SCREEN\n\n\n         . User types HOLD on screen\n\n\n         . Primay Option Menu is displayed\n\n\n         . When user enters  =X  to exit\n           Held function resumes\n\n\n\n\n\n\n\n\n\n\n\n\n                             -18-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n                  HOLD  Command Installation\n ____________________________________________________________\n\n\n\n\n\n   *  Update Command Table\n\n\n      . VERB   =   HOLD\n\n\n      . T      =   0\n\n\n      . ACTION =   SELECT PANEL(ISR@PRIM)\n\n                    OPT(&ZPARM) NEWAPPL(ISR)\n\n\n\n\n\n   *  SYNTAX\n\n\n      . User enters from any Command Line\n\n\n        HOLD  < option  >\n\n\n        where  \"option\"  is an option you would like invoked.\n\n\n\n\n\n\n\n\n\n\n\n                             -19-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n                       The  BR  Command\n ____________________________________________________________\n\n\n\n\n\n      *  Description\n\n\n         . Invoke ISPF Browse on a dataset\n\n\n\n\n\n\n      *  Effect\n\n\n         . User does not have to display Browse entry panel\n\n\n         . Will stack Browse over your current dialog\n\n\n         . After Browse, current dialog resumes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                             -20-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n                   BR  Command Installation\n ____________________________________________________________\n\n\n\n\n\n      *  Update Command Table\n\n\n         . VERB   =   BR\n\n\n         . T      =   0\n\n\n         . ACTION =   SELECT CMD(%BROWE &ZPARM)\n\n\n\n\n\n      *  SYNTAX\n\n\n         . User enter from any Command Line\n\n\n           BR  dsname VOLUME(volser) PASSWORD(password)\n\n\n           where \"dsname\" is a TSO-Syntax dsname\n\n           where \"volser\" is an optional Volume Serial\n\n           where \"password\" is an optional Password\n\n\n\n\n\n\n\n\n\n                             -21-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n             BR  Command Installation (continued)\n ____________________________________________________________\n\n\n\n\n\n      *  Install CLIST\n\n\n         . Install the following CLIST in SYSPROC\n           Member name is BROWE\n\n\n           PROC 1 DSN VOLUME() PASSWORD()\n\n           ISPEXEC CONTROL ERRORS RETURN\n           ISPEXEC BROWSE DATASET(&DSN) +\n                          VOLUME(&VOLUME) +\n                          PASSWORD(&PASSWORD)\n\n           IF &LASTCC NE 0 THEN +\n               ISPEXEC SETMSG MSG(&ZERRMSG)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                             -22-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n                       The  ED  Command\n ____________________________________________________________\n\n\n\n\n\n      *  Description\n\n\n         . Invoke ISPF EDIT on a dataset\n\n\n\n\n\n\n      *  Effect\n\n\n         . User does not have to display Edit entry panel\n\n\n         . Will stack Edit over your current dialog\n\n\n         . After Edit, current dialog resumes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                             -23-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n                   ED  Command Installation\n ____________________________________________________________\n\n\n\n\n\n      *  Update Command Table\n\n\n         . VERB   =   ED\n\n\n         . T      =   0\n\n\n         . ACTION =   SELECT CMD(%EDITE &ZPARM)\n\n\n\n      *  SYNTAX\n\n\n         . User enter from any Command Line\n\n\n           ED  dsname VOLUME(volser) PASSWORD(password)\n                      PROFILE(profile) MACRO(macro)\n\n\n           where \"dsname\" is a TSO-Syntax dsname\n\n           where \"volser\" is an optional Volume Serial\n\n           where \"profile\" is an optional edit profile\n\n           where \"macro\" is an optional edit macro\n\n\n\n\n\n\n\n\n                             -24-\n1\n\n\n ISPF Command Tables                                 Guide 61\n\n\n\n\n ____________________________________________________________\n             ED  Command Installation (continued)\n ____________________________________________________________\n\n\n\n\n\n      *  Install CLIST\n\n\n         . Install the following CLIST in SYSPROC\n           Member name is EDITE\n\n\n           PROC 1 DSN VOLUME() PASSWORD() +\n                      MACRO() PROFILE()\n\n           ISPEXEC CONTROL ERRORS RETURN\n           ISPEXEC EDIT   DATASET(&DSN)     +\n                          VOLUME(&VOLUME)   +\n                          MACRO(&MACRO)     +\n                          PROFILE(&PROFILE) +\n                          PASSWORD(&PASSWORD)\n\n           IF &LASTCC NE 0 THEN +\n               ISPEXEC SETMSG MSG(&ZERRMSG)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                             -25-\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DODONT01": {"ttr": 2310, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n\n       START UNDERSCORE = EX PT LOS\n       END       \"        EX PT LOC\n       SKIP PAGE          !T+99     (LOWER CASE T)\n\n\n\n   !t+99\n                  ***** GENERAL INFORMATION *****\n\n1. \"DIALOGUE MANAGER\" IS A RELATIVELY NEW FEATURE OF, AND RUNS UNDER\n   THE NEW PRODUCT KNOWN AS \"ISPF\". WHAT YOU ARE USED TO CALLING\n   \"\u00acSPF\u00a2\" HAS BEEN RENAMED TO \"\u00acPDF\u00a2\", AND IT, TOO, RUNS UNDER\n   ISPF. DIALOGUE MANAGER IS A SORT OF POOR MANS' CICS; THE POINT OF\n   IT IS TO ALLOW A PERSON TO BUILD A SYSTEM THAT WILL DISPLAY PANELS\n   TO AN END-USER, GET THAT USER TO FILL IN ANY NEEDED INFORMATION (IN\n   BUILT-IN INPUT FIELDS IN THE PANELS), AND THEN RETURN THAT\n   INFORMATION TO SOME SORT OF PROCESSING PROGRAM WHICH HANDLES\n   IT IN THE USUAL MANNER - UPDATE DISK FILES, PERFORM CALCULATIONS,\n   ETC. OR, MAYBE THE USER FURNISHES SOME SORT OF SEARCH\n   KEY TO THE PROCESSING PROGRAM WHICH IN TURN RETURNS TO\n   THE USER WHATEVER INFORMATION HE NEEDS, VIA MORE PANEL DISPLAYS.\n   AN ENTIRE SYSTEM OF PROGRAMS AND PANELS IS COLLECTIVELY REFERRED\n   TO AS A \"DIALOGUE\".  A WELL WRITTEN \"DIALOGUE\" WILL LOOK AND ACT VERY MUCH\n   LIKE PDF. BEAR IN MIND THAT IT'S JUST A DISPLAY MECHANISM - I.E.\n   YOU CANNOT WRITE A COMPLETE PRODUCTIVE SYSTEMS JUST USING THE\n   DIALOGUE MANAGER. IT'S ALMOST ALWAYS NECESSARY TO WRITE A PROBLEM\n   PROGRAM TO DO WHATEVER PROCESSING YOU NEED DONE, WITH THE PROGRAM\n   USING THE DIALOGUE MANAGER TO DO THE SCREEN DISPLAYING, DATA\n   COLLECTION, SIMPLE EDITING, ETC.\n\n   THERE ARE A NUMBER OF ADVANTAGES TO USING DIALOGUE MANAGER:\n\n   A. EVERY DIALOGUE RUNS UNDER TSO/ISPF, AND THEREFORE IN A REGION\n      OF ITS OWN.  THIS MEANS THAT WE DON'T HAVE TO WORRY ABOUT\n      ONE USER'S DIALOGUE DAMAGING ANOTHER'S ACCIDENTALLY, AND YOU DON'T\n      HAVE TO WORRY ABOUT DEVELOPING YOUR DIALOGUE ON A \"TEST\" SYSTEM\n      AND THEN HAVING IT CHECKED OUT BEFORE TRANSFER TO A \"PRODUCTION\"\n      SYSTEM. \u00acA DIALOGUE CAN'T DAMAGE ANYTHING EXCEPT ITSELF.\u00a2\n\n   B. PANEL LAYOUT, DESIGN, AND TESTING COULDN'T BE ANY NICER OR\n      EASIER.  YOU CAN LITERALLY GO FROM CHANGING A PANEL TO SEEING\n      HOW THE CHANGES LOOK IN A SECOND OR TWO, VIA THE SPLIT SCREEN\n      FUNCTION.\n\n   C. ASSUMING THAT YOU GET A LITTLE EDUCATION FIRST, AND DON'T GO\n      HOG-WILD WITH ALL THE FANCY FEATURES - WHICH ARE MOSTLY NOT\n      NECESSARY ANYWAY - THE REST OF DIALOGUE MANAGER IS REALLY\n      FAIRLY EASY TO USE, ONCE YOU GET USED TO IT. THE IMPORTANT\n      THING TO KEEP IN MIND IS THAT THERE ARE A LOT OF COMPLICATED\n      UNNECESSARY FEATURES BUILT INTO IT, AND IF YOU GET TANGLED UP\n      IN THESE IT CAN MAKE LIFE MISERABLE. TRYING TO LEARN IT FROM\n      THE IBM MANUAL IS NOT A GOOD IDEA, BECAUSE IT TENDS TO GET\n      YOU INVOLVED IN FEATURES THAT YOU DON'T NEED.\n\n   D. THERE ARE A NUMBER OF INTERACTIVE DEBUGGING FACILITIES TO\n      HELP YOU AS YOU TEST YOUR SYSTEM - INCLUDING THE ABILITY TO\n      SET \"BREAKPOINTS\", DISPLAY VARIABLE POOLS , VIEW THE PDF\n      LOG, ETC. SOME OF THESE USER AIDS ARE A LITTLE CONFUSING TO USE\n      AND SOME DON'T WORK ALL THAT WELL, BUT THEY ARE AVAILABLE, AND\n      BETTER THAN NOTHING.\n\n   E. SINCE USING DIALOGUE MANAGER TO DEVELOP A SYSTEM IS VERY MUCH\n      LIKE PDF, IT HAS A NATURAL \"FEEL\" TO IT, AND LESS TIME IS\n      WASTED ADJUSTING TO A DIFFERENT WAY OF DOING THINGS.\n\n2. THERE ARE TWO MANUALS YOU MUST HAVE:\n\n    A. \"ISPF DIALOGUE MANAGEMENT SERVICES\", IBM PUBLICATION NUMBER\n       SC34-2088-1.  THIS IS THE MANUAL I'LL REFER TO AS THE \"REFERENCE\n       MANUAL\".\n\n    B. \"ISPF DIALOGUE MANAGEMENT SERVICES EXAMPLES\", PUBLICATION NUMBER\n       SC34-2085-1.\n\n   IF YOU TAKE THE CSD CLASS IN DIALOGUE MANGER, YOU'LL GET BOTH THESE\n   BOOKS AS PART OF THE REGISTRATION COST.  OTHERWISE YOU HAVE TO\n   ORDER THEM YOURSELF DIRECTLY FROM IBM; THE COST OF THE SET IS\n   SOMEWHERE AROUND $20.00.\n\n3. ALTHOUGH THE EXAMPLES IN THE 2ND MANUAL MENTIONED IN 1.B ARE PRETTY\n   RIDICULOUS WHEN YOU SEE THEM RUNNING, THE BOOK ITSELF IS VERY\n   HANDY WHEN YOU NEED TO SEE HOW TO ACTUALLY CODE THE VARIOUS SERVICES\n   OF DIALOGUE MANAGER.  THE LAYOUT OF THIS MANUAL CAN BE VERY CON-\n   FUSING; JUST KEEP IN MIND THAT THE ENTIRE BOOK CONSISTS OF ONLY TWO\n   SEPARATE EXAMPLES, BUT EACH EXAMPLE IS A COMPLETE \"SYSTEM\" -- I.E.\n   THEY ARE SHOWING ALL THE PANELS, MESSAGES, PROGRAMS, ETC. THAT YOU\n   WILL NEED.  MOREOVER, EACH EXAMPLE IS SHOWN IN EACH OF FIVE LANGUAGES -\n   -COBOL, CLIST, PL/1, FORTRAN AND EXEC2.  (EXEC2 IS NOT AVAILABLE ON\n   OUR SYSTEM, SO IGNORE THOSE EXAMPLES)\n\n4. IN BOTH MANUALS, YOU'LL SEE SECTIONS ABOUT AND REFERENCES TO \"DOS\",\n   \"VSE\", \"VM\" AND \"EXEC\" OR \"EXEC2\" - IGNORE THESE AS THEY DON'T\n   APPLY TO OUR SHOP.  ONLY THE SECTIONS CONCERNING \"MVS\" NEED CONCERN\n   YOU.\n\n5. IT'S NOT ADVISABLE TO TRY TO USE DIALOGUE  MANAGER WITHOUT SOME\n   EDUCATION FIRST.  CSD WILL OFFER CLASSES IN ITS USE, AND WILL\n   PROBABLY ALSO OFFER SELF STUDY COURSES.\n\n6. THE SECOND IBM EXAMPLE, IN FOUR OF THE FIVE LANGUAGES SHOWN IN THE\n   BOOK (COBOL, PL/1, FORTRAN, AND CLIST) IS ACTUALLY RUNNING.  THIS\n   EXAMPLE WAS ALSO CONVERTED TO ASSEMBLER AND IS RUNNABLE.  SEE BUZZY\n   IF YOU WANT TO SEE THESE EXAMPLES RUN, OR RUN THEM YOURSELF.  WE ALSO\n   HAVE THE FIRST EXAMPLE RUNNING IN CLIST.\n\n\n   !t+99\n                      ***** DO'S & DON'TS *****\n\n1. \u00acDON'T MIX LANGUAGES;\u00a2 THERE IS NOTHING PHYSICALLY STOPPING A\n   PERSON FROM DESIGNING A DIALOGUE THAT CONTAINS A LONG CHAIN OF\n   MENUS, PANELS, INTERLEAVED WITH ASSORTED PROGRAMS WRITTEN IN PL/1,\n   FORTRAN, COBOL, ASSEMBLER AND CLIST.  JUST REMEMBER THAT\n   WHEN THINGS GO SOUR AND YOU END UP WITH A DUMP, THE MESS\n   IS GOING TO BE COMPLICATED ENOUGH WHAT WITH BOTH TSO AND ISPF/\n   DIALOGUE MANAGER IN THERE, ALONG WITH YOUR CODE.  MOREOVER,\n   MULTI-LANGUAGE SYSTEMS ARE A NIGHTMARE TO MAINTAIN OR MODIFY\n   FOR WHOEVER INHERITS THEM IN THE FUTURE. THE ONE EXCEPTION TO\n   THIS RULE INVOLVES OPENING YOUR OWN DATASETS SUCH AS MASTERFILES,\n   TRAN FILES, WORK FILES, ETC.  IF IT'S NOT POSSIBLE TO ISSUE THE\n   ALLOCATE STATEMENTS FOR THESE FILES VIA A CLIST EXECUTED\n   \u00acBEFORE\u00a2 YOUR DIALOGUE IS STARTED, YOU CAN CALL A SPECIAL CLIST\n   OF YOUR OWN, FROM YOUR PROGRAM AS IT'S RUNNING, AND THAT CLIST\n   CAN TAKE CARE OF FREEING/ALLOCATING ANY NEEDED DATASETS. THIS IS\n   DONE VIA A CALL TO ISPLINK WITH THE \"SELECT\" OPTION.\n\n2. IF AT ALL POSSIBLE, STICK TO THE LANGUAGE YOU ARE MOST FAMILIAR\n   WITH - COBOL OR PL/1 FOR MOST PEOPLE. YOU'RE GOING TO HAVE ENOUGH\n   TROUBLE LEARNING THE QUIRKS OF DIALOGUE MANAGER WITHOUT HAVING TO\n   FIGHT THOSE OF A NEW LANGUAGE AT THE SAME TIME.\n\n3. AVOID LINEAR DESIGN SEQUENCES, SUCH AS THE FOLLOWING, AS MUCH\n   POSSIBLE:\n     PROG1 CALLS PANEL 1 WHICH CALLS PROG 2 WHICH CALLS PANEL 2\n     WHICH CALLS PROG 3 . . . . . , ETC.\n     THE BEST DESIGNS ARE THOSE WITH ONE LARGE WELL DOCUMENTED\n     AND SUBROUTINED CENTRAL PROGRAM THAT DISPLAYS ALL PANELS,\n     AND THE PANELS ALWAYS RETURN TO THAT PROGRAM.  HOWEVER, THERE IS\n     NOTHING WRONG WITH CHAINING PANELS (PANEL 1 CALLING PANEL 2,\n     ETC.), AS LONG AS YOU DON'T GET TOO CARRIED AWAY WITH IT.\n\n4. \u00acDON'T DESIGN CROWDED, HYPER-COMPLICATED PANELS\u00a2; KEEP THEM\n   SIMPLE AND CLEAN.  THE MORE THAT YOUR SYSTEM LOOKS LIKE AND\n   ACTS LIKE THE REST OF SPF THE BETTER.  THERE ARE SOME\n   EXCELLENT COMMON SENSE SUGGESTIONS ON PANEL DESIGN IN YOUR\n   REFERENCE MANUAL (SC34-2088-1) IN CHAPTER 7, UNDER THE SECTION\n   TITLED \"FORMATTING GUIDELINES\", PAGES 190 - 192.\n\n5. IF YOU ARE USING A PROGRAM WRITTEN IN ONE OF THE STANDARD\n   LANGUAGES (COBOL, PL/1, ETC) INSTEAD OF CLIST YOU'LL ALSO HAVE TO\n   USE \"VDEFINE\", \"VREPLACE\", AND \"VCOPY\" IN ORDER TO GET\n   VARIABLES IN AND OUT OF YOUR PROGRAM.  YOU HAVE TO BE\n   EXTREMELY CAREFUL WITH THESE SERVICES, PARTICULARLY \"VCOPY\".\n   THE CRITICAL ITEM IS THE LENGTH PARAMETER; IF YOU PASS A\n   LENGTH PARAMETER THAT IS TOO LONG, \"ISPLINK\" WILL COPY THE\n   VARIABLE DATA INTO THE SECTION YOU SPECIFIED, BUT WILL OVERLAY\n   OTHER UNRELATED DATA OR LOGIC IN THE PROCESS.  THIS CAN CAUSE\n   SOME PRETTY NASTY DUMPS THAT WILL BE DIFFICULT TO DEBUG IN A\n   HIGH LEVEL LANGUAGE.\n\n6. IN DESIGNING PANELS \u00acDON'T USE THE \")ATTR/DEFAULT\" STATEMENT UNLESS\n   IT IS COMPLETELY UNAVOIDABLE\u00a2.  STICK WITH THE DEFAULTS ATTRIBUTE\n   CHARACTERS - \"%, +, _\".  CHANGING THEIR VALUES IS JUST GOING\n   TO MAKE THINGS CONFUSING FOR BOTH YOU AND ANYONE ELSE WHO HAS\n   TO WORK ON YOUR SYSTEM IN THE FUTURE. THE DEFAULT VALUES ARE:\n        \"+\" ---> PROTECTED FIELD, LOW INTENSITY\n        \"%\" ---> PROTECTED FIELD, HIGH INTENSITY\n        \"_\" ---> UNPROTECTED (INPUT) FIELD\n\n7. GENERALLY YOU'LL NEED TO START YOUR DIALOGUE VIA A TSO CLIST;\n   IN THIS INITIAL CLIST YOU SHOULD  ALLOCATE/DEALLOCATE\n   ANY DATASETS YOUR DIALOGUE WILL BE NEEDING. HOWEVER, IT IS POSSIBLE\n   TO BUILD ADDITIONAL CLISTS INTO YOUR DIALOGUE, CALLING THEM FROM\n   EITHER A PANEL, OR YOUR PROGRAM. AVOID DOING THIS UNLESS YOU:\n\n   A. NEED TO DYNAMICALLY ALLOCATE/DEALLOCATE DATASETS FOR YOUR\n      DIALOGUE; CLIST IS THE ONLY WAY YOU CAN DO THIS.\n\n   B. ARE ALREADY EXPERIENCED WITH CLISTS\n\n   C. DON'T CARE ABOUT THE EFFICIENCY, RESPONSE TIME, OR COST.\n\n   \u00acCLISTS ARE SLOW AND INEFFICIENT\u00a2, DUE MOSTLY TO THE FACT THAT, LIKE\n   BASIC, THE CLIST PROCESSOR IS AN INTERPRETER AS OPPOSED TO A\n   COMPILER.  THIS MEANS THAT EACH SOURCE STATEMENT MUST BE\n   RE-TRANSLATED TO MACHINE LANGUAGE EACH AND EVERY TIME THAT\n   THAT STATEMENT IS PASSED THROUGH.\n\n   ALTHOUGH CLIST IS FAIRLY EASY TO USE - IF YOU MANAGE TO\n   LIVE THROUGH THE LEARNING PROCESS - LEARNING IT ISN'T EASY\n   BECAUSE THE MANUALS ARE SO POOR.  MOREOVER IT IS QUITE\n   SIMILAR TO A NUMBER OF OTHER LANGUAGES IN SYNTAX (BASIC,\n   PANEL LANGUAGE, PL/1), ETC, BUT THERE ARE A NUMBER OF\n   ARBITRARY, UNNECESSARY SYNTACTICAL DIFFERENCES THAT MAKE\n   IT VERY CONFUSING WHEN YOU'RE WORKING WITH BOTH CLIST AND A\n   LANGUAGE SIMULTANEOUSLY.  FOR EXAMPLE, THE FOLLOWING\n   STATEMENTS ARE EXACTLY EQUIVALENT:\n\n     IF &NAME = THEN DO    (CLIST - BLANK IS IMPLIED)\n\n     IF (&NAME = ' ')      (PANEL LANGUAGE - BLANK IS EXPLICIT)\n\n     IF NAME = ' '         (PL/1 - BLANK IS EXPLICIT)\n\n8. SINCE THERE ARE NO RESTRICTIONS AS TO WHAT TYPE OF FUNCTION\n   IS AT THE HEAD OF A DIALOGUE, (YOU CAN MAKE THE FIRST ITEM\n   TO GET CONTROL IN YOUR DIALOGUE A MENU, PANEL, PROGRAM, OR\n   CLIST), AND SINCE PDF ITSELF ALWAYS BEGINS WITH A MENU PANEL\n   (WITH GOOD REASON), YOU'LL FIND THAT MOST OF THE IBM EXAMPLES\n   ALWAYS START WITH A MENU THAT CALLS A PROGRAM THAT CALLS\n   PANELS, ETC.  THIS IS NOT ALWAYS A GOOD IDEA.  JUST REMEMBER\n   THAT EACH TIME YOUR USER WORKS HIS WAY BACK AND FORTH BETWEEN\n   THAT MENU AND THE PANELS, THE SYSTEM HAS TO GO THROUGH A LOT\n   OF OVER-HEAD IN RE-LOADING AND TERMINATING THE PROGRAM.\n   SOMETIMES IT IS BETTER TO BEGIN WITH A PROGRAM, AND HAVE IT\n   ALTERNATELY DISPLAY THE MAIN MENU AND THE WORKING PANELS.  AS A\n   GENERAL RULE, IF YOUR DIALOGUE IS LARGE AND COMPLICATED, SUCH\n   THAT YOU DON'T WANT TO WRITE ONE MONSTER PROGRAM TO DO ALL THE\n   WORK, THEN DESIGN BY THE IBM METHOD - THE TOP OF THE CHAIN BEING\n   A MENU, WITH EACH MENU CHOICE CALLING A DIFFERENT PROGRAM, WHICH\n   IN TURN DISPLAYS ITS OWN PANELS.  ON THE OTHER HAND, IF ALL YOUR\n   PROCESSING CAN BE BUILT INTO ONE REASONABLY SIZED PROGRAM, THEN\n   MAKE THAT PROGRAM THE STARTING POINT IN YOUR DIALOGUE AND HAVE IT\n   DISPLAY BOTH THE MAIN MENU AND PANELS.\n\n9. BE SURE TO PICK A CLEAR, MEANINGFUL, NAMING CONVENTION FOR YOUR\n   DIALOGUE, AND FOLLOW IT FOR EVERYTHING - PANELS, PROGRAMS,\n   MESSAGES, CLISTS, SKELETONS, ETC.  WHEN YOU CHOOSE ONE, KEEP IN\n   MIND THE RESTRICTIONS ON MESSAGE IDS AND MESSAGE LIBRARY MEMBER\n   NAMES. FOR EXAMPLE, THE PANVALET FUNCTION IN PDF (FUNCTION 8)\n   HAS ALL OF ITS FUNCTIONS NAMED WITH A PREFIX OF \"PANPDF\".\n\n10. \u00acDON'T CLUTTER UP THE PROFILE DATASET\u00a2. THE MORE VARIABLES THAT\n   PROGRAMMERS \"VPUT\" INTO A USER'S PROFILE, THE MESSIER THINGS ARE\n   GOING TO GET.  MOREOVER, VARIABLES WILL STAY IN A PROFILE  FOREVER\n   - OLD UNUSED VARIABLES WILL NOT BE CLEANED OUT AUTOMATICALLY, AND\n   THERE IS NO IBM UTILITY TO DELETE THEM. SO, DON'T USE THE PROFILE\n   DATSET AS  CASUAL CATCH-ALL.  THE PROPER USE FOR IT IS TO SAVE\n   CRITICAL INFORMATION, SO THAT IT CAN BE CARRIED ACROSS FROM THE\n   END OF ONE SESSION TO THE BEGINNING OF THE NEXT.  REMEMBER THAT\n   EACH USER OF YOUR APPLICATION MAY POSSIBLY BE USING OTHER\n   DIALOGUE MANAGER APPLICATIONS, AND IF YOU AND THE PROGRAMMER THAT\n   DEVELOPED THE OTHER DIALOGUE BOTH HAPPEN TO PICK THE SAME NAME FOR\n   A VARIABLE AND BOTH DO A VPUT TO THE PROFILE DATASET, THE TWO OF\n   YOU ARE GOING TO TAKE TURNS WIPING OUT EACH OTHER'S VALUE IN THAT\n   PARTICULAR USER'S PROFILE. THAT MEANS YOU HAD BEST BE VERY CAREFUL\n   TO PICK UNIQUE NAMES FOR ANY VARIABLES THAT YOU INTEND TO VPUT\n   INTO THE PROFILE DATASET. PROBABLY THE BEST METHOD IS TO EMBED\n   SOMETHING LIKE AGENCY NUMBER IN YOUR VARIABLE NAME TO MAKE IT\n   UNIQUE.\n\n11. WHEN YOU USE THE VARIOUS FUNCTIONS OF ISPLINK, STICK TO THE\n   SIMPLE STRAIGHT-FORWARD OPTIONS - I.E. \"MOVE\" MODE, \"CHARACTER\"\n   MODE, ETC. MOVE MODE WORKS WITH VARIABLES DIRECTLY IN THE STORAGE\n   OF YOUR PROGRAM, USING THE FIELD NAMES THAT YOU HAVE CHOSEN.\n   \"LOCATE\" MODE BYPASSES THE NAMES AND MERELY PROVIDES YOU WITH\n   THE \u00acADDRESSES\u00a2 OF THE VARIABLES, AND IS BOUND TO BE MORE\n   COMPLICATED IN A HIGH LEVEL LANGUAGE. CHARACTER MODE TRANSFERS\n   ALL DATA STRICTLY AS EBCIDIC CHARACTERS, AND ONCE THE DATA IS\n   IN YOUR STORAGE YOU CAN CONVERT IT AS YOU NORMALLY DO FOR YOUR\n   LANGUAGE - I.E. TO BINARY, PACKED DECIMAL, FLOATING POINT, ETC.\n   SINCE YOU'RE ALREADY FAMILIAR WITH CONVERSION IN THE HIGH LEVEL\n   LANGUAGE YOU USE, USING CHARACTER WILL AVOID ALL THE COMPLICATIONS\n   AND THE LEARNING CURVE ASSOCIATED WITH HAVING ISPLINK DO THE\n   CONVERSIONS AND TRYING TO GET YOUR PROGRAM FIELDS DEFINED PROPERLY\n   TO MATCH. MOREOVER, THE CONVERSION HAS TO BE DONE EITHER WAY, AND I\n   DOUBT THAT THERE WILL BE ANY DIFFERENCE IN OVERALL EFFICIENCY.\n\n12. WHEN ALLOCATING YOUR PANEL, MESSAGE, SKELETON, AND CLIST LIBRARIES\n   MAKE THE RECORD LENGTH 80 AND THE BLOCK SIZE 6160. THE BLOCK SIZE\n   IS IMPORTANT AS YOUR LIBRARIES WILL BE THE FIRST IN A CONCATENATION\n   STRING FOR EACH SPF DD STATEMENT, AND MUST THE THE LARGEST FOR\n   PURPOSES OF BUFFER ALLOCATION.\n   !t+99\n              ********* PANEL DESIGN *********\n\n1. \u00acPANELS CAN BE BUILT AND SAVED VIA NORMAL PDF EDIT AND SAVE USING\n   ANY 80 BYTE LIBRARY\u00a2. YOU COULD BUILD THEM IN YOUR TSO LIB AND THEN\n   COPY THEM INTO YOUR PANEL LIBRARY LATER, BUT IT IS BETTER TO\n   BUILD THEM DIRECTLY INTO YOUR PANEL LIBRARY IN THE FIRST PLACE.\n\n2. FUNCTION 7.2 IS DESIGNED TO CHECK INDIVIDUAL PANELS FOR ERRORS\n   \u00acWITHOUT ACTUALLY GOING ON TO EXECUTE ANY OF THE ASSOCIATED PROGRAMS\n   OR CLISTS\u00a2. ALTHOUGH BUILDING PANELS IS EASY, THE ERROR DIAGNOSTICS\n   IN 7.2 ARE WORTHLESS, WHEN YOU DO MAKE A MISTAKE. LUCKILY, THE\n   POSSIBLE MISTAKES ARE QUITE LIMITED; FOLLOWING ARE THE MAJOR ONES:\n\n     A. \u00acCOLUMNS 73 - 80 MUST BE BLANK ON ANY SORT OF COMMAND IN PANEL\n        LANGUAGE\u00a2 - E.G. \")INIT\", \")VER\", ETC. SINCE THESE COLUMNS DO\n        NOT DISPLAY DURING EDIT UNLESS YOU SHIFT THE SCREEN RIGHT,\n        THE MISTAKE ISN'T EASILY SEEN. THE EASIEST WAY TO GET INTO\n        THIS SITUATION, WITHOUT REALIZING IT, IS BY HAVING \"NUM ON\"\n        IN YOUR PROFILE, CAUSING TSO LINE NUMBERS TO BE AUTOMATICALLY\n        BUILT IN 73-80. THIS ONLY APPLIES TO PANEL LANGUAGE COMMANDS -\n        WHICH ARE NOT VISIBLE WHEN THE PANEL IS USED. IT IS OK\n        TO USE 73-80 ON DISPLAYABLE PANEL LINES.\n\n     B. \u00acA PANEL CANNOT BE LONGER THAN THE LENGTH OF YOUR PHYSICAL\n        SCREEN, VERTICALLY\u00a2. DON'T GET THE IDEA THAT YOU CAN BUILD LONG\n        PANELS, AND THEN USE THE SCROLL KEY TO DISPLAY THE BOTTOM HALF\n        DURING EXECUTION - THIS ISN'T ALLOWED. YOU'LL JUST HAVE\n        TO BREAK THE LARGE PANEL UP INTO SMALLER ONES, CHAINING THEM\n        TOGETHER.\n\n     C. THE \")\" IN PANEL LANGUAGE COMMANDS MUST START IN POSITION\n        1: OTHERWISE YOU'LL EITHER END UP WITH ONE OF THE MYSTERY ERROR\n        MESSAGES, OR IT WILL TREAT THE COMMAND AS DISPLAYABLE DATA.\n\n     D. A FIELD OF ANY TYPE (INPUT, OUTPUT-PROTECTED, ETC) HAS A\n        SPECIAL SYMBOL TO MARK ITS START - E.G. \"+,%,_\". \u00acHOWEVER\n        THERE IS NO SPECIAL SYMBOL TO MARK THE END OF THE FIELD\u00a2;\n        THE THING THAT TERMINATES A FIELD IS THE SPECIAL SYMBOL\n        MARKING THE START OF THE NEXT FIELD. THIS CAN PARTICULARLY\n        CAUSE TROUBLE ON INPUT FIELDS, SO MAKE SURE YOU EXPLICITLY\n        TERMINATE THEM. FOR EXAMPLE:  \"_INPUTFLD+\" WHERE THE \"+\"\n        TERMINATES AND SETS THE LENGTH OF THE VARIABLE \"INPUTFLD\"\n        TO 8 POSITIONS - NEITHER THE \"_\" NOR THE \"+\" COUNT.\n\n     E. THE LENGTH OF THE VARIABLE ASSOCIATED WITH AN INPUT FIELD IS\n        AUTOMATICALLY SET TO MATCH THE LENGTH OF THE NAME. IN THE\n        EXAMPLE ABOVE, THE LENGTH OF \"INPUTFLD\" IS 8 CHARACTERS,\n        AND IF A USER WERE TO TYPE INTO THIS FIELD IN A RUNNING\n        DIALOGUE, THEY WOULD BE ABLE TO ENTER A FULL 8 CHARACTERS.\n        THIS CAN CAUSE INCONVENIENCE, AS IT IS A GOOD IDEA TO\n        PICK NAMES FOR INPUT VARIABLES THAT ARE LONG ENOUGH TO BE\n        DESCRIPTIVE, EVEN WHEN THE LENGTH YOU WANT FOR THE VARIABLE\n        ITSELF IS MUCH SHORTER. THERE ISN'T ANY CLEAN WAY AROUND\n        THIS PROBLEM, THAT I'VE FOUND YET, ANYWAY. ONE METHOD IS TO\n        PASS THE TOO-LONG VARIABLE THROUGH TO THE PROGRAM, AND EDIT\n        IT FOR LENGTH THERE, LETTING THE PROGRAM RE-DISPLAY THE\n        PANEL WITH AN ERROR MESSAGE IF THE FIELD IS TOO LONG. A BETTER\n        METHOD, IS TO USE AN INPUT VARIABLE OF THE RIGHT LENGTH BUT\n        WITH A MEANINGLESS NAME, AND THEN TRANSFER ITS VALUE TO\n        ANOTHER VARIABLE WITH A MEANINGFUL NAME IN THE \")PROC\"\n        SECTION, AS IN THE FOLLOWING EXAMPLE:\n\n        .\n        .\n        +MAN NUMBER:_ABCD+          (ENTER 4 DIGIT MAN #)\n        .\n        .\n        )PROC\n        &CSDMAN# = &ABCD\n        .\n        .\n\n     F. FAILING TO INDENT PROPERLY WHEN USING USING THE \"IF\"\n        COMMAND IN PANEL LANGUAGE WILL CAUSE A LOGIC ERROR.\n        REMEMBER THERE IS NO \"END\" ASSOCIATED WITH \"IF\",\n        LIKE THERE IS IN CLIST OR PL/1. THE WAY THAT THE \"IF\" COMMAND\n        WORKS IS AS FOLLOWS: IF THE CONDITION SPECIFIED IN THE \"IF\"\n        COMMAND IS MET, THEN THE SYSTEM WILL  EXECUTE ANY IMMEDIATELY\n        FOLLOWING STATEMENTS THAT ARE INDENTED ONE OR MORE POSITIONS\n        TO THE RIGHT OF THE \"I\" IN THE \"IF\". OTHERWISE, IT WILL SKIP\n        ALL THE INDENTED STATEMENTS AND EXECUTE THE NEXT STATEMENT IT\n        CAN FIND THAT BEGINS IN THE SAME COLUMN AS THE \"I\", OR TO THE\n        LEFT OF IT.\n             THE \"IF\" INDENTATION PROBLEM IS ESSENTIALLY EXTREMELY\n        POOR DESIGN, BUT THERE IS NOTHING WE CAN DO TO CORRECT IT;\n        YOU'LL JUST HAVE TO LIVE WITH IT.\n\n     G. FAILING TO PUT YOUR CONDITION IN PARENTHESES - THEY ARE NOT\n        OPTIONAL. FOR EXAMPLE:\n\n        IF (&FIELD = 'A')\n\n\n\n\n\n   !t+99\n                      ***** POOLS *****\n\n     \u00acPROBABLY THE MOST IMPORTANT OF THE UNIQUE IDEAS IN DIALOGUE\nMANAGER IS THAT OF \"VARIABLE POOLS\"\u00a2. A POOL IS SIMPLY A MEANS OF\nGETTING DATA FROM ONE FUNCTION (PANEL, MENU, PROGRAM OR CLIST) OF\nA DIALOGUE TO ANOTHER, WITHOUT GETTING INVOLVED IN \"SENDING\"\nDATA BACK AND FORTH BETWEEN FUNCTIONS, WHICH WOULD INVOLVE SOME\nSORT OF ADDRESSING SCHEME; THAT WOULD, IN TURN, COMPLICATE THINGS WHEN\nIT CAME TIME TO ADD OR MODIFY FUNCTIONS.  THERE ARE 3+ TYPES OF POOLS\nYOU CAN USE:\n\n     1. THE LOWEST LEVEL IS THE \"FUNCTION POOL\" WHICH COMES IN TWO\n        TYPES; HOWEVER, THE DISTINCTION IS KIND OF SILLY AS YOU\n        HANDLE THE TWO IDENTICALLY.  THE FIRST TYPE IS THE \"IMPLICIT\n        FUNCTION POOL\"; ONE OF THESE WILL BE BUILT AUTOMATICALLY FOR\n        EACH AND EVERY FUNCTION (PANEL, MENU, PROGRAM OR CLIST) IN\n        YOUR \"DIALOGUE\", AND WILL CONTAIN THE NAMES AND CONTENTS OF\n        EVERY VARIABLE IN THAT FUNCTION.  THE \"EXPLICIT FUNCTION\n        POOL\" APPLIES ONLY TO FUNCTIONS THAT ARE PROGRAMS (COBOL,\n        FORTRAN, PL/1, OR ASSEMBLER) AND IS CREATED ONLY WHEN THE\n        PROGRAM DOES ONE OR MORE \"VDEFINES\". A PROGRAM CAN HAVE\n        BOTH TYPES SIMULTANEOUSLY. AS LONG AS A VARIABLE REMAINS\n        ONLY IN A PARTICULAR FUNCTION POOL, ONLY THAT FUNCTION\n        CAN USE IT. \"VPUT\" AND \"VGET\" ARE USED TO COPY VARIABLES\n        AND THEIR VALUES FROM POOL TO POOL.\n\n     2. THE NEXT LEVEL IS THE \"SHARED VARIABLE POOL\". THERE IS JUST\n        ONE OF THESE FOR YOUR ENTIRE SYSTEM OR \"DIALOGUE\", AND AS\n        THE NAME IMPLIES ANY FUNCTION CAN GET AT ANY VARIABLE IN IT,\n        BUT NOT DIRECTLY.  VARIABLES GET INTO THE SHARED POOL WHEN\n        ANY PARTICULAR FUNCTION ISSUES A \"VPUT\" TO COPY ONE OR\n        MORE OF ITS FUNCTION POOL VARIABLES (AND THEIR RESPECTIVE\n        CONTENTS) TO THE SHARED POOL. SO, VARIABLES GET THERE\n        \u00acONLY WHEN THE FUNCTION THAT ORIGINALLY OWNED THEM PUTS\n        THEM THERE\u00a2.  ANYTHING IN THE SHARED POOL CAN BE ACCESSED\n        BY ANY OTHER FUNCTION, BUT THE FUNCTION THAT WANTS IT MUST\n        SPECIFICALLY ASK FOR THOSE VARIABLES BY NAME BY ISSUING\n        A \"VGET\", WHICH COPIES THE REQUESTED VARIABLES/CONTENTS TO\n        THAT FUNCTION'S (AND ONLY THAT FUNCTION'S) FUNCTION POOL.\n        ONE PARTIAL EXCEPTION TO THE ABOVE IS FOR MENUS AND PANELS.\n        ANYTHING IN THE SHARED POOL IS AUTOMATICALLY COPIED TO ALL\n        OF THE INDIVIDUAL FUNCTION POOLS FOR ALL MENUS AND PANELS.\n        HOWEVER, THE OPPOSITE DOES NOT HOLD TRUE; A MENU/PANEL HAS\n        TO ISSUE A \"VPUT\" TO PUT THINGS INTO THE SHARED POOL; THEY\n        WILL NOT TRANSFER AUTOMATICALLY IN THAT DIRECTION.\n\n     3. THE LAST TYPE OF VARIABLE POOL IS THE \"PROFILE POOL\". THIS\n        POOL IS BUILT FROM ALL THE VARIABLES AND THEIR ASSOCIATED\n        DATA EXTRACTED FROM THE \"PROFILE\" OF THE USER WHO HAS\n        ACTUALLY SIGNED ON TO YOUR DIALOGUE AT THE TIME IT RUNS.\n        CONVERSELY, WHEN THE USER ENDS YOUR DIALOGUE, HIS PROFILE\n        IS REWRITTEN WITH ALL THE OLD (AND POSSIBLY SOME NEW)\n        VARIABLES AND THEIR CONTENTS THAT EXIST IN THE PROFILE\n        POOL AT THAT TIME. VARIABLES CAN BE COPIED BACK AND FORTH\n        BETWEEN THE PROFILE POOL AND THE SHARED POOL USING VGET\n        AND VPUT. THEY CAN'T BE COPIED DIRECTLY TO OR FROM A FUNCTION\n        POOL HOWEVER; YOU HAVE TO DO THAT INDIRECTLY VIA THE SHARED\n        POOL, AND TWO SETS OF VPUTS OR VGETS.\n\n     4. THAT TAKES CARE OF THE POOLS, AND IF YOU'RE USING A TSO CLIST\n        TO DO YOUR PROCESSING THAT'S AS FAR AS YOU NEED TO GO.\n        DUE TO THE FACT THAT A CLIST IS NOT COMPILED (AS IS ANY\n        NORMAL PROGRAM), BUT RATHER IS INTERPRETED INTERACTIVELY,\n        A CLIST CAN CREATE, GET AT, AND CHANGE ANY VARIABLE IN ITS\n        FUNCTION POOL MERELY BY USING IT. THIS IS DEFINITELY NOT\n        TRUE FOR ANY OTHER TYPE OF PROGRAM - ASSEMBLER, COBOL,\n        PL/1 OR FORTRAN.  \u00acFOR THESE YOU MUST GO THROUGH AN EXTRA\n        STEP, IN ADDITION TO THE ABOVE, IN ORDER TO ACCESS\n        DIRECTLY (CHANGE THE VALUE OF) ONE OR MORE VARIABLES\u00a2. THE\n        COMMANDS THAT YOU MUST ISSUE IN YOUR PROGRAMS AND WHAT THEY\n        DO ARE AS FOLLOWS:\n\n        A. \"VDEFINE\" BUILDS A \u00acBRAND NEW VARIABLE\u00a2 AND SETS ITS INITIAL\n           VALUE, IN ITS CORRESPONDING FUNCTION POOL. IT GETS THE VALUE\n           TO USE FROM WHATEVER YOU INITIALIZED THE FIELD TO BE IN YOUR\n           PROGRAM, AND YOU EFFECTIVELY PASS THE ADDRESS OF THIS FIELD\n           AS ONE OF THE PARAMETERS WHEN YOU INVOKE \"VDEFINE\". THIS\n           SERVICE MOVES DATA IN AN OUTWARD DIRECTION - I.E. FROM YOUR\n           PROGRAM TO THE FUNCTION POOL.\n\n        B. \"VCOPY\" COPIES AN \u00acOLD\u00a2 (PRE-EXISTING) VARIABLE'S CONTENTS\n           OR VALUE FROM THE CORRESPONDING FUNCTION POOL INTO A\n           SPOT IN YOUR PROGRAM THAT YOU HAVE DESIGNATED, USING THE\n           LENGTH YOU FURNISHED. DATA IS MOVED IN AN INWARD DIRECTION\n           - I.E. FROM THE FUNCTION POOL TO YOUR PROGRAM.\n\n        C. \"VREPLACE\" CHANGES THE VALUE OF AN \u00acOLD VARIABLE\u00a2 IN THE\n           CORRESPONDING FUNCTION POOL, TO A NEW VALUE THAT YOU\n           HAVE SET IN THE DESIGNATED FIELD OF YOUR PROGRAM.\n           IN OTHER WORDS IT COPIES THE DATA YOU'VE GOT IN ONE OF\n           YOUR PROGRAMS FIELDS INTO ONE OF THE VARIABLES IN THE\n           FUNCTION POOL. VREPLACE MOVES DATA IN AN OUTWARD\n           DIRECTION - FROM THE PROGRAM TO THE FUNCTION POOL.\n\n\n\n\n\n   !t+99\n                     ***** ISPLINK & ISPEXEC *****\n\nANY TIME YOU WANT TO USE ANY SERVICE PROVIDED BY THE\nDIALOGUE MANAGER, YOU MUST REQUEST IT IN A SPECIAL WAY.  THERE ARE\nMANY SERVICES AVAILABLE (SEE CHAPTER 6 OF YOUR REFERENCE MANUAL);\nTYPICAL ONES WOULD BE:\n\n   \"VPUT\"\n   \"VGET\"\n   \"VDEFINE\"\n   \"CONTROL\"\n   \"EDIT\"\n\nTHESE SERVICES ARE THE ONLY MEANS OF CONTROLLING THE MOVEMENT OF YOUR\nVARIABLES BETWEEN POOLS, DEFINING NEW VARIABLES, ETC.  THE WAY THE\nSERVICES ARE INVOKED DIFFERS DEPENDING ON THE LANGUAGE YOU'RE\nUSING:\n\n1. FOR TSO CLIST YOU MUST USE THE KEYWORD \"ISPEXEC\" FOLLOWED BY\n   THE NAME OF THE SERVICE YOU WANT (E.G. \"VPUT\", \"SELECT\", ETC).\n   FOLLOWING THAT YOU MUST SPECIFY ALL THE REQUIRED AND OPTIONAL\n   PARAMETERS PECULIAR TO THAT PARTICULAR SERVICE.\n\n2. FOR ALL OTHER LANGUAGES (ASSEMBLER, PL/1, COBOL, FORTRAN), YOU\n   CANNOT USE \"ISPEXEC\" OR ANY OTHER KEYWORD; YOU MUST ISSUE A STANDARD\n   \"CALL\" WITHIN YOUR PROGRAM TO A MODULE (PROGRAM) WHOSE NAME\n   IS \"ISPLINK\".  WHEN YOU ISSUE THE CALL YOU HAVE TO PROVIDE\n   A PARAMETER LIST CONTAINING THE NAME OF THE SERVICE DESIRED\n   ALONG WITH VARIOUS OTHER PARAMETERS REQUIRED FOR THAT PAR-\n   TICULAR SERVICE.  ALTHOUGH THE PHRASE \"CALL\" IS IDENTICAL IN ALL\n   FOUR LANGUAGES, THE SYTAX NECESSARY TO POINT TO THE PARM LIST\n   VARIES. - SEE THE FOLLOWING SECTION \"SAMPLE USAGE OF ISPLINK\n   & ISPEXEC\".\n\n3. FOR THOSE SERVICES THEY DO HAVE IN COMMON, (WHICH IS MOST OF THEM)\n   ISPEXEC AND A CALL TO ISPLINK DO EXACTLY THE SAME THING.  THE\n   REASON THAT NOT EVERY SERVICE IS COMMON TO BOTH IS SIMPLY\n   BECAUSE CERTAIN SERVICES WILL BE PERFORMED AUTOMATICALLY BY\n   CLIST, SO THAT THERE IS NO NEED TO USE ISPEXEC FOR THESE.\n   EXAMPLES OF SERVICES NOT NECESSARY ARE: \"VDEFINE\", \"VCOPY\",\n   AND \"VREPLACE\". MOREOVER, THEY ARE NOT ONLY UNNECESSARY, THEY\n   ARE ILLEGAL.\n\n4. WHEN YOU COMPILE YOUR SOURCE CODE, YOU MUST PROVIDE A DD\n   STATEMENT, OR DSN VIA SYMBOLIC SUBSTITUTION, SO THAT THE LINKAGE\n   EDITOR CAN INCLUDE THE NECESSARY INTERFACE MODULE TO ISPLINK.\n   SEE \"SAMPLE JCL FOR COMPILING\".\n\n\n\n   !t+99\n                    ***** TESTING & PRODUCTION *****\n\n1. FOR EITHER TESTING OR PRODUCTION YOU'RE GOING TO NEED A NUMBER\n   OF LIBRARIES TO PUT YOUR PANELS, PROGRAMS AND MESSAGES IN.  YOU\n   WILL NOT BE ALLOWED TO PUT YOUR THINGS INTO THE CSD ISPF/PDF PRODUC-\n   TION LIBRARIES.  SO, IT WILL BE NECESSARY TO GO THROUGH A SERIES OF\n   \"FREE/ALLOCATE\" STEPS IN ORDER TO CONCATENATE YOUR LIBRARIES TO\n   THE CSD SPF/PDF LIBRARIES.  THIS CAN BE DONE VIA A TSO CLIST AND\n   COULD EVEN BE HANDLED AUTOMATICALLY FOR YOU OR YOUR USER IF YOU\n   NAME THE CLIST \"@LOGON\".  WE HAVE PROVIDED A SUB-FUNCTION UNDER\n   \"CSD UTILITIES\" ON THE PDF PRIMARY OPTION MENU THAT WILL BUILD A\n   CLIST FOR YOU.\n\n   THE EASIEST WAY TO TEST AND DEVELOP A NEW DIALOGUE IS VIA PDF\n   FUNCTION 7.1 WHICH WILL RUN AN ENTIRE DIALOGUE, INCLUDING ALL THE\n   PANELS, PROGRAMS, ETC.  (FUNCTION 7.2 CAN BE USED TO DISPLAY ONLY\n   INDIVIDUAL PANELS, BOTH TO CHECK FOR ERRORS AND TO EXAMINE THEM\n   FOR APPEARANCE). REMEMBER, THOUGH, THE ERROR MESSAGES YOU GET ARE\n   EXTREMELY POOR - YOU'D BETTER KNOW WHAT YOU'RE DOING.\n\n   ONE OF THE NICEST PARTS OF DE-BUGGING A DIALOGUE IS THE ABILITY\n   TO USE SPLIT SCREEN UNDER PDF.  FOR EXAMPLE, ON THE TOP SCREEN\n   YOU CAN CHOOSE 7.1 AND RUN YOUR DIALOGUE UNTIL YOU REACH THE\n   PANEL YOU'RE INTERESTED IN FIXING.  AT THIS POINT YOU CAN SWITCH\n   TO THE LOWER SCREEN, EDIT THAT SAME PANEL, MAKE YOUR CHANGES, AND\n   SAVE THEM.  NOW SWITCH BACK TO THE TOP HALF, PRESS \"END\" ONCE AND\n   THEN \"ENTER\" TO SEE THE NEWLY MODIFIED PANEL.  SWITCHING BACK AND\n   FORTH LIKE THIS MAKES PANEL DESIGN EXTREMELY CONVENIENT.\n\n   WHEN YOU'RE READY TO PUT YOUR DIALOGUE INTO PRODUCTION YOU HAVE\n   TWO MAIN THINGS TO WORRRY ABOUT:\n\n   A.  GETTING ALL YOUR LIBRARIES ALLOCATED; THIS CAN BE DONE EXACTLY\n       AS OUTLINED FOR TEST ABOVE. YOU'LL ALSO NEED TO DO ALLOCATES\n       FOR ANY OF YOUR OWN DATASETS - MASTERFILES REQUIRED BY YOUR\n       SYSTEM, WORK FILES, ETC.\n\n   B.  SINCE YOU WILL NOT BE ALLOWED TO ADD YOUR DIALOGUE AS AN OPTION\n       ON THE MAIN SPF/PDF PANEL, YOU'RE GOING TO HAVE TO HAVE SOME\n       SMOOTH SIMPLE MEANS FOR YOUR USER TO GET INTO YOUR DIALOGUE.\n       TECHNICALLY THERE IS NO REASON WHY YOU CAN'T USE 7.1 FOR\n       PRODUCTION, AND YOU ARE FREE TO DO SO IF YOU LIKE, BUT IT'S NOT\n       REAL TIDY.  A BETTER METHOD IS TO ENTER YOUR DIALOGUE DIRECTLY\n       FROM TSO, SKIPPING THE ISPF/PDF PRIMARY OPTION MENU ALTOGETHER.\n       SINCE YOU ARE PROBABLY GOING TO NEED TO ALLOCATE DATASETS ANYWAY,\n       THE USER WILL ENTER THE NAME OF YOUR CLIST AFTER THE TSO READY\n       PROMPT, AND YOU CAN ISSUE THE ISPSTART WITHIN THAT CLIST.\n       FOLLOWING ARE THE THREE FORMS OF ISPSTART:\n\n       ISPSTART PANEL(PANLNAME)\n              - OR -\n       ISPSTART CMD(CLISTNM)\n              - OR -\n       ISPSTART PGM(PROGNAME)\n\n       (DEPENDING ON WHETHER YOUR DIALOGUE BEGINS WITH A MENU/\n       PANEL, CLIST, OR PROGRAM)\n\n\n\n       YOU CAN ALSO PASS A PARM IF YOU LIKE:\n\n       ISPSTART PGM(PGMNAME) PARM(XX......XX)\n\n     THIS \"ISPSTART\" BUSINESS IS SORT OF A BACK DOOR INTO ISPF, AND\nDOES NOT GO THROUGH THE NORMAL MENUS YOU'RE USED TO SEEING - WHICH ARE\nREALLY A PART OF PDF ANYWAY. FOR PRODUCTION PURPOSES, YOU MIGHT\nCOMBINE ALL OF THE FREE AND ALLOCATE STATEMENTS NECESSARY ALONG WITH\nTHE CALL TO ISPSTART INTO ONE CLIST. LET'S SAY YOU NAME YOUR CLIST\n\"PRODJOB\"; THEN ALL YOUR USER WOULD HAVE TO DO IS TYPE \"%PRODJOB\"\nIMMEDIATELY AFTER THE TSO \"READY\" PROMPT, AND THE NEXT THING HE WOULD\nSEE WOULD BE YOUR FIRST PANEL OR MENU.  IF YOU NAME THIS PARTICULAR\nCLIST \"@LOGON\", THEN HE WOULDN'T HAVE TO TYPE ANYTHING; JUST LOGGING\nON WOULD TAKE HIM STRAIGHT INTO YOUR DIALOGUE.  JUST REMEMBER THOUGH\nIF YOU USE THE \"@LOGON\" METHOD, THE USER WON'T BE ABLE TO DO ANYTHING\nELSE BUT YOUR DIALOGUE.  YOU MAY GET INTO A SITUATION WHERE YOU NEED\nTO COMBINE BOTH IDEAS - FOR EXAMPLE YOU MIGHT NEED TO USE \"@LOGON\"\nTO FREE AND REALLOCATE THE CLIST LIBRARY, SO THAT WHEN THE USER\nTYPES IN \"%PRODJOB\" THE SYSTEM GETS \"PRODJOB\" FROM YOUR SPECIAL\nCLIST LIBRARY.\n\n\n   !t+99\n                    ***** FILE TAILORING *****\n\n\"FILE TAILORING\" IS A SPECIAL FATURE OF THE DIALOGUE MANAGER\nTHAT YOU MOST LIKELY WILL NOT HAVE ANY USE FOR.  THE REASON IT\nEVEN EXISTS IS BECAUSE PDF NEEDS AND USES IT, AND APPARENTLY IBM\nDECIDED THAT AS LONG AS IT WAS NECESSARY FOR PDF, THEY MIGHT JUST\nAS WELL DESIGN IT IN SUCH A WAY THAT IT COULD BE USED AS A FEATURE\nOF DIALOGUE MANAGER.\n\n\u00acTHE MAIN PURPOSE OF FILE TAILORING IS TO ALLOW DYNAMIC BUILDING OF\nJCL STREAMS\u00a2.  IN OPERATION IT IS VERY SIMILAR TO THE ASSEMBLER\nMACRO PROCESSOR.\n\nYOU HAVE TO START OUT WITH WHAT IS CALLED A \"SKELETON FILE\" WHICH\nMUST BE A MEMBER OF A SPECIAL \"SKELTON LIBRARY\".  THE MEMBER WILL\nCONTAIN A NUMBER OF JCL STATEMENTS THAT DON'T LOOK QUITE RIGHT,\nSINCE ANY POSITION THAT WOULD NORMALLY CONTAIN A JCL\nPARAMETER MIGHT CONTAIN A SYMBOLIC VARIABLE INSTEAD.  FOR EXAMPLE:\n\n   //&DDNAME  DD  SYSOUT=&CLASS\n\nWOULD BE A VALID JCL PROTOTYPE STATEMENT IN A SKELETON FILE.\n\"&DDNAME\" AND \"&CLASS\" ARE BOTH VARIABLES THAT WILL BE SUBSTITUTED\nTO SOME FINAL VALUE.  THE SUBSTITUTION WILL BE DONE FROM ANY\nCORRESPONDING VARIABLES FOUND IN THE VARIABLE POOLS.  THESE ARE\nTHE SAME POOLS THAT YOU WOULD BE USING TO DISPLAY PANELS, ETC.\nTHIS PART OF FILE TAILORING IS VERY SIMILAR TO THE SYMBOLIC\nSUBSTITUTION PROCESS THAT YOU'RE USED TO USING WHEN YOU BUILD\n\"PROCS\" FOR BATCH JOBS.\n\nTHE SECOND PART OF FILE TAILORING IS A CONDITIONAL PROCESS - A\nSORT OF PICK AND CHOOSE DEPENDING ON THE VALUE OF A VARIABLE YOU\nHAVE CHOSEN.  THE BASIC IDEA IS THAT YOU INCLUDE A LOT OF EXTRA JCL\nPROTOTYPE STATEMENTS IN YOUR SKELETON FILE (MEMBER) AND THEN\nDYNAMICALLY CHOOSE WHICH PROTOTYPE STATEMENT (OR GROUP OF STATEMENTS)\nYOU WANT TO USE, DEPENDING ON THE VALUE OF ONE OF YOUR VARIABLES.\n\nIN ORDER TO CONTROL THIS PROCESS THERE IS NATURALLY GOING TO BE\nANOTHER \"LANGUAGE\" TO LEARN, WHICH I'LL CALL \"SKELETON LANGUAGE\".\nIT'S PRETTY SIMPLE:\n\n   \")SEL XXXXX\" MARKS THE START OF A JCL PROTOTYPE STATEMENT OR\n   GROUP OF STATEMENTS FOR POSSIBLE INCLUSION OR EXCLUSION.  THE\n   \"XXXXX\" REPRESENTS SOME SORT OF LOGICAL OPERATION THAT\n   DETERMINES WHETHER OR NOT THAT GROUP IS TO BE \"SELECTED\".\n\n   \")ENDSEL\" SIMPLY MARKS THE END OF A \"SELECT\" GROUP.\n\n   \")CM\" IS USED FOR COMMENTS.\n\n   \")IM XXXXXXXX\" STANDS FOR \"IMBED\" AND ALLOWS YOU TO INCLUDE,\n   OR COPY INTO THAT SPOT, AN ENTIRELY DIFFERENT MEMBER FROM YOUR\n   SKELETON LIBRARY, WITH A MEMBER NAME OF \"XXXXXXXX\".  THIS\n   INCLUDED MEMBER COULD BE READY TO GO JCL, OR IT MIGHT REQUIRE\n   SOME MORE SELECTION AND VARIABLE SUBSTITUTION PROCESSING.\n\nHERE'S A SHORT EXAMPLE; LET'S SAY YOU WANT TO BUILD A JCL STREAM\nOF SOME SORT, AND DEPENDING ON THE CHOICES YOUR USER MAKES ON A\nPANEL YOU MAY NEED TO INCLUDE AN EXTRA STEP TO DELETE A DATASET:\n   .\n   .\n   )SEL &DELETE = YES\n   // EXEC PGM=IEFBR14\n   //DD1 DD DSN=&USERDSN,DISP=(OLD,DELETE)\n   )ENDSEL\n   .\n   .\n\nTHE TWO JCL STATEMENTS ARE INCLUDED IN THE FINAL PRODUCT ONLY IF\nTHE VARIABLE \"&DELETE\" EXISTS IN ONE OF THE POOLS AND HAS A VALUE\nOF \"YES\".  \"&USERDSN\" WILL BE SUBSTITUTED TO WHATEVER VALUE IT\nHAS IN WHICHEVER POOL IT IS LOCATED IN.\n\nTHE FINAL OUTPUT FROM THE FILE TAILORING PROCESS WILL BE WRITTEN\nTO THE \"FILE TAILORING OUTPUT LIBRARY\"; FROM THERE IT CAN BE\nSUBMITTED AS A JOB, EITHER MANUALLY, OR AUTOMATICALLY VIA A\nSUBMIT COMMAND IN A TSO CLIST.\n\nTHERE IS NOTHING SAYING YOU HAVE TO LIMIT FILE TAILORING TO BUILD TO\nJCL; YOU COULD PUT MOST ANY KIND OF STATEMENTS YOU LIKE IN A\nSKELETON LIBRARY MEMBER, BUT IT'S MOST COMMON USE IS JCL BUILDING.\nNATURALLY THERE'S MORE TO IT THAN WHAT I'VE OUTLINED HERE, AND\nIF YOU DECIDE TO USE IT, YOU'D BEST STUDY THE VARIOUS SECTIONS\nOF YOUR REFERENCE MANUAL ON FILE TAILORING.\n\n\n\n   !t+99\n                    ***** TABLE I/O *****\n\nTABLE I/O IS A SERVICE OF DIALOGUE MANAGER THAT LOOKS PRETTY NICE\nAT FIRST GLANCE, BUT THE DEEPER YOU GET INTO IT, THE MORE YOU REALIZE\nTHAT IT CAN BE TRICKY TO USE AND IS REALLY QUITE COMPLICATED.  WORST\nOF ALL IS THE FACT THAT IT IS NOT ACCESSIBLE BY ANYTHING BUT\nDIALOGUE MANAGER, A FACT THAT YOUR REFERENCE MANUAL FAILS TO MENTION.\n\n\u00acALL TABLE I/O IS CAPABLE OF DOING, REALLY, IS READING AND WRITING\nRECORDS INTO A DATASET\u00a2.  THE TROUBLE LIES IN THE FACT THAT IT DOES\nSO IN SUCH A FASHION THAT ALTHOUGH IT IS PHYSICALLY POSSIBLE TO READ THE\nRECORDS WITH A NORMAL BATCH JOB, THE DATA IS SO SCRAMBLED THAT\nYOU'RE GOING TO HAVE TO WRITE (AND DEBUG) A LOT OF CODE IN ORDER\nTO PUT YOUR DATA BACK IN USABLE FORM. IN OTHER WORDS, ANY DATA YOU\nSAVE USING TABLE I/O, CAN'T BE USED BY ANYTHING EXCEPT ANOTHER SESSION\nOF DIALOGUE MANAGER. THERE IS AN AUXILIARY FUNCTION REFERRED TO AS\n\"TABLE DISPLAY\"; WITH THIS YOU CAN CAUSE THE DIALOGUE MANAGER TO\nDISPLAY YOUR TABLE I/O DATA FIELDS, USING SPECIAL MAPS WHICH YOU'VE\nPREDEFINED.\n\nALL IN ALL, IT'S FAR MORE TROUBLE THAN IT'S WORTH.  IT'S MUCH SIMPLER\nTO BUILD, READ, AND WRITE RECORDS YOURSELF, USING VARIABLES\nRETURNED FROM DISPLAY PANELS TO BUILD THOSE RECORDS.  THE ONLY\nCONSIDERATION IS THAT ANY FILES YOU OPEN WILL HAVE TO HAVE BEEN PRE-\nALLOCATED BEFORE YOUR DIALOGUE STARTS.  YOU CAN DO THIS IN THE SAME\nCLIST THAT YOU USE TO CONCATENATE YOUR PANEL LIBRARIES.\n\nIF YOU DO DECIDE TO USE THE TABLE I/O FEATURE, YOU'D BEST SPEND A\nLOT OF TIME STUDYING THE VARIOUS SECTIONS IN YOUR REFERENCE MANUAL\nON \"TABLE SERVICES\".\n\n\n\n   !t+99\n                    ***** MESSAGES *****\n\n\nDIALOGUE MANAGER HAS A VERY NICE, WELL DESIGNED MEANS OF\nDISPLAYING MESSAGES.  THEY ARE HANDLED AND DISPLAYED EXACTLY LIKE\nPDF DOES - I.E. - A SHORT MESSAGE IN THE UPPER RIGHT HAND CORNER,\nFOLLOWED BY A LONGER EXPANDED MESSAGE A COUPLE LINES DOWN FROM\nTHE TOP IF THE USER PRESSES HELP.\n\nYOU MUST BUILD YOUR MESSAGES IN RELATED GROUPS, EACH GROUP BEING\nSAVED AS A MEMBER IN YOUR MESSAGE LIBRARY.  THE MESSAGE ID MUST\nBEGIN IN COLUMN ONE FOR THE FIRST (SHORT) MESSAGE LINE.  EITHER\nFORM OF THE MESSAGE CAN CONTAIN SYMBOLIC VARIABLES WHICH WILL BE\nREPLACED BY THE CURRENT VALUE OF THAT VARIABLE FROM THE VARIABLE\nPOOLS.  MAX LENGTH OF SHORT MESSAGES (AFTER SUBSTITUTION) IS\n24 CHARACTERS; FOR LONG MESSAGES IT'S 78.\n\nALL MESSAGES IN A MEMBER MUST BE KEPT IN ASCENDING ORDER BY MESSAGE\nID.  MOREOVER, THERE HAS TO BE A STRANGE CONVOLUTED RELATIONSHIP\nBETWEEN THE MESSAGE IDS YOU USE AND THE NAME OF THE MEMBER WHERE\nYOU STORE THOSE MESSAGES; READ THE \"MESSAGE LIBRARY\" SECTION IN\nREFERENCE MANUAL CAREFULLY BEFORE YOU SET UP EITHER YOUR MESSAGE\nID PREFIXES OR MEMBER NAMES. THE MANUAL HAS SOME GOOD EXAMPLES OF\nMESSAGES SET UP IN A MEMBER OF A MESSAGE LIBRARY.\n\n\n   !t+99\n           ****** TESTING VIA FUNCTION 7 *****\n\n       IN ORDER TO MAKE TESTING A COMPLICATED DIALOGUE A LITTLE\nEASIER, DIALOGUE MANAGER OFFERS SOME TEST/DEBUG FEATURES. THESE\nCAN BE USED INTERACTIVELY - I.E. YOU CAN VIEW AND CHANGE THINGS\nAS THEY ARE OCCURRING WITHIN YOUR DIALOGUE.\n     THE FIRST OF THESE AIDS YOU'LL NEED TO UNDERSTAND IS THAT OF\nBREAKPOINTS. THERE IS NOTHING NEW ABOUT THE IDEA, AS LOTS OF\nCOMPILERS AND INTERPRETERS OFFER BREAKPOINTS IN VARIOUS FORMS.\nTHE BASIC IDEA IS SIMPLY THAT OF GIVING YOU A MEANS OF STOPPING\nEXECUTION OF SOMETHING AT CERTAIN POINTS THAT YOU PICK, AND ALSO\nALLOWING YOU TO VIEW AND MODIFY THE CONTENTS OF VARIOUS FIELDS.\nBEAR IN MIND THAT THIS CASE IS DIFFERENT IN THAT YOUR DIALOGUE\nIS A MIXTURE OF YOUR PROGRAMS, PANELS, AND CALLS TO THE DIALOGUE\nMANAGER VIA ISPLINK. WHAT THIS MEANS IS THAT BREAKPOINTS\nCANNOT BE SET WITHIN YOUR PROGRAM CODE ITSELF, BUT MUST OCCUR\nWHEN THE DIALOGUE MANAGER HAS CONTROL - I.E. WHEN YOU GIVE\nUP CONTROL VIA THE CALLS TO ISPLINK THAT YOUR PROGRAM ISSUES.\n     SOME OF THE TERMS USED ASSOCIATED WITH BREAKPOINT CAN BE\nCONFUSING. SINCE YOU'LL NEED TO UNDERSTAND THEM IN ORDER TO\nSET UP YOUR BREAKPOINTS PROPERLY, WE'D BEST GET THEM STRAIGHT.\nWHEN THE IBM MANUAL OR THE BREAKPOINT PANEL TALKS ABOUT \"FUNCTION\"\nTHEY MEAN A PROGRAM OR CLIST. SINCE YOU'LL PROBABLY ONLY HAVE ONE\nOF THESE, YOU CAN SPECIFY \"ALL\" (THE DEFAULT) FOR FUNCTION.\n\"SERVICE\" REFERS TO THNGS LIKE VGET, VPUT, DISPLAY, ETC.\n\"QUALIFICATION\" (SEE BELOW) REFERS TO THE PARTICULAR PARAMETER\nCOMBINATION USED FOR A PARTICULAR SERVICE.\n     HERE'S HOW YOU USE IT: BEFORE STARTING UP YOUR DIALOGUE\nGO TO FUNCTION 7.8 AND SPECIFY THE NAME OF THE SERVICE WITHIN\nISPLINK THAT YOU WANT TO BREAK AT - E.G. \"VPUT\", \"VGET\", ETC.\nKEEP IN MIND THAT YOU MAY NOT BE ABLE TO CHOOSE A SPECIFIC \"VPUT\"\nOR \"VGET\"; WHEN YOU RUN YOUR DIALOGUE YOU MAY BE FORCED TO STOP AT\nEACH AND EVERY OCCURRENCE. YOU CAN ALSO SPECIFY WHETHER YOU\nWANT THE BREAKPOINT TO OCCUR BEFORE THE REQUESTED SERVICE IS\nPERFORMED, AFTER IT'S PERFORMED, OR BOTH. YOU CAN SET MORE THAN\nONE SERVICE THAT YOU WISH TO BREAK ON. THERE IS AN ADDITIONAL\nLEVEL YOU CAN SPECIFY FOR BREAKPOINT IF YOU WANT, CALLED\n\"QUALIFICATION\". LET'S SAY YOU SET A BREAKPOINT FOR THE SERVICE\n\"VGET\", BUT UNFORTUNATELY YOU HAVE A WHOLE BUNCH OF VGETS IN\nVARIOUS PLACES IN YOUR PROGRAM. THE WAY THINGS STAND, BREAKPOINT\nIS GOING TO STOP ON EVERY ONE OF THEM, EVEN THOUGH THERE MAY ONLY\nBE ONE YOU'RE INTERESTED IN. SOMETIMES YOU CAN CUT THIS DOWN\nUSING \"QUALIFICATION\". WHEN IN THE BREAKPOINT SCREEN TYPE IN\n\"QUAL\" ON THE PRIMARY COMMAND LINE; THIS WILL GIVE YOU A NEW\nSCREEN WHICH WILL ALLOW YOU TO SPECIFY \"QUALIFICATION PARAMETER\nVALUES\". WHAT THAT MEANS IS THAT IF YOU CAN FIND SOMETHING UNIQUE\nABOUT THE PARAMETER LIST BEING PASSED BY THE PARTICULAR VGET\nYOU NEED TO STOP ON, YOU CAN SPECIFY THAT INFORMATION AND THUS\nELIMINATE STOPPING NEEDLESSLY ON THE IRRELEVANT VGETS.  WHEN\nYOU'RE DONE, THE \"RESUME\" COMMAND WILL RETURN YOU TO THE ORIGINAL\nBREAKPOINT PANEL.\n    NEXT, GO TO FUNCTION 7.1 AND VIA THAT PANEL GET YOUR DIALOGUE\nSTARTED. IT WILL RUN JUST AS IT NORMALLY DOES UNTIL DIALOGUE MANAGER\nSENSES A REQUEST FOR ONE OF THE SERVICES YOU SET AS A BREAKPOINT,\nAT WHICH POINT YOUR NORMAL SCREEN DISAPPEARS, AND YOU GET A SPECIAL\n\"BREAKPOINT SCREEN\"; AT THIS POINT YOU CAN DO ALL SORTS OF THINGS,\nSUCH AS DISPLAYING THE VALUES OF THE VARIABLES IN THE VARIOUS POOLS,\nMODIFYING THOSE VALUES, DISPLAYING THE SPF LOG, ETC, ETC. WHEN\nYOU'RE READY, YOU CAN ENTER \"G\" FOR GO ON THE BREAKPOINT SCREEN\nAND RETURN TO RUNNING YOUR DIALOGUE, USING THE NEW VALUES YOU'VE\nOVVERRIDDEN. ANYTIME YOU NEED TO ADD, DELETE, OR MODIFY YOUR BREAK-\nPOINTS YOU CAN. WHATEVER BREAKPOINTS YOU SPECIFY WILL HOLD AS LONG\nAS YOU STAY WITHIN FUNCTION 7; IF YOU LEAVE 7, THEY'LL ALL BE\nLOST.\n\n     ANOTHER AID IS KNOWN AS \"TRACE\"; FUNCTION 7.7 WILL ALLOW YOU TO\nTO START A TRACE ON EITHER OR BOTH OF TWO TYPES OF ITEMS: FUNCTIONS\nAND VARIABLES. A FUNCTION IS ONE OF THE SERVICES OF ISPLINK - E.G/\nVCOPY, SETMSG, VREPLACE, ETC.  YOU JUST ENTER THE NAME OF THE\nPARTICULAR FUNCTION YOU WANT TO TRACE IN 7.7.1. FOR A VARIABLE\nTRACE YOU'LL NEED TO ENTER THE NAME OF THE DESIRED VARIABLE IN\n7.7.2. YOU CAN SIMALTANEOUSLY TRACE MORE THAN ONE FUNCTION OR\nVARIABLE AT A TIME.\n     THE TRACE ITSELF WILL BE IN THE SPF LOG DATASET, AND YOU\nCAN DISPLAY THE LOG VIA 7.5. BE SURE TO KEEP THE TRACE AS SHORT\nAND SIMPLE AS POSSIBLE, AVOIDING TRACING OF MULTIPLE VARIABLES\nAT ONCE, AS TRACE CAN PRODUCE AN AMAZING AMOUNT OF OUTPUT IN THE\nLOG, AND IT GETS DIFFICULT TO TELL WHAT'S WHAT IF YOU'RE NOT\nCAREFUL. ONE VERY IMPORTANT POINT TO NOTE IS THAT OUR STANDARD\nTSO PROC PRE-ALLOCATES THE LOG DATASET TO SYSOUT, FOR REASONS OF\nEFFICIENCY; UNFORTUNATELY, SPF CANNOT BROWSE A SYSOUT DATASET,\nWHICH MAKES BOTH THE LOG AND THE TRACE FUNCTION WORTHLESS FOR\nONLINE/INTERACTIVE PURPOSES. YOU CAN GET AROUND THIS PROBLEM BY\nFREEING THE LOG \u00acBEFORE\u00a2 YOU ENTER SPF, WHICH ALLOWS SPF TO\nDYNAMICALLY ALLOCATE THE LOG TO A NORMAL DISK DATASET, SO THAT\nIT CAN BE BROWSED; WHEN YOU LEAVE SPF IT WILL DISPLAY A SPECIAL\nSCREEN THAT WILL LET YOU EITHER PRINT THE LOG OR THROW IT AWAY.\nTHE FORMAT OF THE TSO FREE COMMAND YOU'LL NEED IS:\n\n     FREE FI(ISPLOG)\n\n     ONE THING THAT'S ODD ABOUT FUNCTION 7, AND WHICH CAN TRIP YOU\nUP IS THE USE OF SPLIT SCREEN. THE TEMPTATION IS TO SPLIT SCREEN WHILE\nYOU'RE TESTING A DIALOGUE, AND USE THE NEW HALF TO GO TO ONE OF THE\nSUBFUNCTIONS OF 7 IN ORDER TO SET BREAKPOINTS, DISPLAY VARIABLES, ETC.\n\u00acTHIS DOESN'T WORK\u00a2; THE REASON IS THAT WHEN YOU SPLIT SCREEN YOU GET\nA NEW VARIABLE POOL AND NEW BREAKPOINT CONTROL TO GO WITH THE NEW\nSCREEN, AND ANY MODIFICATIONS YOU MAKE TO IT WILL \u00acNOT\u00a2 AFFECT THE\nVARIABLE POOL AND BREAKPOINTS OF THE OLD HALF WHERE YOUR DIALOGUE IS\nRUNNING.\n   !t+99\n\n               ***** USING ISPEXEC/ISPLINK *****\n\n     THE FOLLOWING SECTIONS CONTAIN NOTES AND EXAMPLES ON OBTAINING\nSERVICES FROM THE DIALOGUE MANAGER VIA ISPEXEC AND ISPLINK. ISPEXEC\nIS USED ONLY WITHIN A CLIST. ISPEXEC AND ISPLINK BOTH DO EXACTLY\nTHE SAME THING, WITH THE EXCEPTION NOTED BELOW; THE REASON FOR THE\nDIFFERENCE IS SIMPLY BECAUSE YOU CAN'T ISSUE A \"CALL\" WITHIN A\nCLIST LIKE YOU CAN IN A PROGRAMMING LANGUAGE, SO THEY INVENTED A\nNEW CLIST KEYWORD FUNCTION, \"ISPEXEC\", WHICH ALLOWS YOU TO REQUEST\nSERVICES FROM DIALOGUE MANAGER. ALTHOUGH THE SYNTAX FOR ISPEXEC IS\nDIFFERENT THAT THAT FOR CALLING ISPLINK, THE ONLY REAL DIFFERENCE\nIS DUE TO THE FACT THAT SOME OF THE SERVICES YOU REQUEST VIA\nISPLINK (SUCH AS VCOPY, VDEFINE, VREPLACE, ETC) ARE NOT NECESSARY\n- AND THEREFORE INVALID - FOR ISPEXEC, SINCE THE CLIST PROCESSOR\nTAKES CARE OF THESE AUTOMATICALLY.  FOR ALL THE STANDARD PROGRAMMING\nLANGUAGES (COBOL, FORTRAN, PL/1 AND ASSEMBLER), YOU HAVE TO ISSUE A\nCALL TO ISPLINK (\"ISPLNK\" FOR FORTRAN), PASSING A PARAMETER LIST THAT\nWILL INDICATE THE PARTICULAR SERVICE YOU WANT, AND THE OPTIONS FOR\nTHAT SERVICE. ONLY THE COMMONLY USED SERVICES ARE COVERED - FOR\nEXAMPLE ALL SERVICES RELATED TO TABLE I/O HAVE BEEN OMITTED.\nMOREOVER, NOT ALL THE OPTIONS FOR ANY GIVEN SERVICE ARE COVERED -\nJUST THE COMMONLY USED ONES, SINCE THIS WRITE-UP IS\u00acNOT\u00a2 INTENDED TO\nBE A REPLACEMENT FOR YOUR REFERENCE MANUAL.\n   !t+99\n\n                     ***** CONTROL *****\n\n     THE CONTROL SERVICE IS CALLED TO SET OVERALL OPERATING CONDITIONS\nFOR YOUR DIALOGUE. YOU'LL NEED TO USE IT AT LEAST ONCE AT THE BEGINNING\nOF YOUR PROGRAM/CLIST IF YOU WANT DIALOGUE MANAGER TO RETURN TO YOU\nWHEN A SEVERE ERROR IS ENCOUNTERED. IF YOU SPECIFY THE RETURN OPTION,\nDIALOGUE MANAGER WILL RETURN TO YOUR PROGRAM OR CLIST IF THE RETURN\nCODE IS 0 -> 20; WITH THE CANCEL OPTION, IF THE RETURN CODE FROM ANY\nSERVICE IS 12 OR GREATER, YOUR ENTIRE DIALOGUE IS CANCELLED.\n\n     SAMPLES IN VARIOUS LANGUAGES:\n\n     ISPEXEC CONTROL ERRORS RETURN     (CLIST)\n\n\n\n\n\n\n\n\n\n\n\n     CONTROL PERFORMS A NUMBER OF OTHER FUNCTIONS AS WELL, SUCH AS\nSIMULATING ENTER/END KEYS FOR PANEL TESTING, SETTING THE BEGINNING\nPOSITION FOR TERMINAL LINE MODE OUTPUT, ETC. THE LATTER IS USED TO\nCONTROL WHERE ON YOUR PANEL THAT TSO BEGINS WRITING ITS MESSAGES/\nOUTPUT WHEN YOU INVOKE A TSO FUNCTION. IN OTHER WORDS, YOU CAN USE\nIT TO KEEP TSO FROM WRITING ALL OVER THE TOP OF YOUR PANELS. SEE\nYOUR REFERENCE MANUAL.\n   !t+99\n\n                     ***** DISPLAY *****\n\n     THE DISPLAY SERVICE IS HOW YOU GO ABOUT DISPLAYING ONE OF THE\nPANELS FROM YOUR PROGRAM. NOTE THAT CONTROL WILL ALWAYS RETURN TO THAT\nPROGRAM FROM THE PANEL - I.E. THE PANEL CAN'T CALL ANOTHER PANEL OR\nANOTHER PROGRAM; CONTRAST THIS WITH THE \"SELECT\" SERVICE. IF YOU WANT,\nYOU CAN ALSO SPECIFY A MESSAGE YOU WANT DISPLAYED WITH THE PANEL,\nAND/OR CONTROL THE POSITION OF THE CURSOR; THESE TWO FUNCTIONS ARE\nOPTIONAL.\n\n     SAMPLES IN VARIOUS LANGUAGES:\n\n     ISPEXEC DISPLAY PANEL(PANEL-NAME) MSG(MESSAGE-ID) CURSOR(FIELDNAME)\n\n\n\n\n\n\n\n\n\n\n\n   !t+99\n\n                     ***** EDIT *****\n\n     THE EDIT SERVICE ALLOWS YOU TO CALL THE REGULAR PDF EDITOR\nDIRECTLY - I.E. WITHOUT DISPLAYING THE MEMBER SELECTION SCREEN. YOUR\nUSER WILL BE ABLE TO DO MOST ANYTHING THAT HE COULD DO IN PDF EDIT,\nAND THE SCREEN WILL LOOK EXACTLY LIKE PDF EDIT. CONSEQUENTLY, IT'S\nA GOOD IDEA TO USE THE \"SETMSG\" SERVICE BEFORE YOU USE EDIT, TO\nDISPLAY A MESSAGE INFORMING THE USER THAT HE'S ONLY TEMPORARILY IN\nPDF EDIT AND WILL RETURN TO YOUR DIALOGUE. THE FOLLOWING EXAMPLES\nASSUME THE DATASET IS CATALOGUED. BE SURE TO PUT THE QUOTES AROUND\nTHE DSN IN CASE ONE OF YOUR USERS HAS TSO PREFIX ON.\n\n     SAMPLES IN VARIOUS LANGUAGES:\n\n     ISPEXEC EDIT DATASET('YOUR-DSN')     (CLIST)\n\n\n\n\n\n\n\n\n\n\n\n   !t+99\n\n                     ***** BROWSE *****\n\n     THE BROWSE SERVICE WORKS EXACTLY LIKE THE EDIT SERVICE, EXCEPT THAT\nYOU ENTER PDF BROWSE INSTEAD.\n\n     SAMPLES IN VARIOUS LANGUAGES:\n\n     ISPEXEC BROWSE DATASET('YOUR-DSN')\n\n\n\n\n\n\n\n\n\n\n\n   !t+99\n                     ***** LOG *****\n\n     THE LOG SERVICE IS USED TO TAKE ONE OF THE MESSAGES IN YOUR\nMESSAGE LIBRARY AND WRITE IT TO THE SPF LOG FOR THAT USER. THIS CAN\nBE HANDY FOR BUILDING AND TESTING A NEW DIALOGUE, BUT DOESN'T MAKE\nMUCH SENSE FOR A PRODUCTION DIALOGUE UNLESS YOU SET UP YOUR END USERS\nSPF OPTIONS TO PRINT THE LOG, AND THEN HAVE SOMEBODY EXAMINING THOSE\nLOGS.\n\n     SAMPLES IN VARIOUS LANGUAGES:\n\n     ISPEXEC LOG MSG(YOUR-MESSAGE-ID)\n\n\n\n\n\n\n\n\n\n\n\n\n   !t+99\n                     ***** SELECT *****\n\n     SELECT IS ONE OF THE MORE IMPORTANT SERVICES, AND HAS TWO MAIN\nUSES: THE FIRST IS TO ALLOW YOU TO DISPLAY A PANEL, BUT UNLIKE\nTHE \"DISPLAY\" SERVICE, THE PANEL DOES \u00acNOT\u00a2 HAVE TO IMMEDIATELY\nRETURN TO THE POINT WHERE THE SELECT WAS ISSUED. IN OTHER WORDS,\nTHE PANEL CAN IN TURN INVOKE ANOTHER PANEL OR ANOTHER PROGRAM.\nMOREOVER, BY USING THE \"OPT\" PARAMETER, YOU CAN SELECT A PANEL AND\nPASS IT AN OPTION THAT IS VALID FOR IT, AND THAT OPTION WILL BE\nINVOKED WITHOUT ACTUALLY DISPLAYING THE PANEL.\n     THE SECOND USE FOR SELECT IS THAT OF PASSING CONTROL TO ANOTHER\nPROGRAM OR CLIST. FOR EXAMPLE, LET'S SAY YOUR COBOL PROGRAM REACHES\nA POINT WHERE IT DECIDES ITS NECESSARY TO DYNAMICALLY FREE/ALLOCATE\nA SPECIAL DATASET. YOU CANNOT DO A FREE OR ALLOCATE WITHIN A COBOL\nPROGRAM, BUT YOU CAN WITHIN A CLIST. SO, YOU BUILD A SPECIAL CLIST\nTO DO THE JOB, AND THEN CALL ISPLINK/SELECT TO PASS CONTROL TO THE\nCLIST. SINCE YOU CAN PASS A PARM TO THE CLIST, YOU COULD HAVE THE\nCLIST DO A NUMBER OF DIFFERENT FUNCTIONS, CONTROLLED BY THE PARM.\n     SINCE YOU COULD USE SELECT TO CALL ANOTHER COBOL PROGRAM,\nOR YOU COULD ALSO USE A REGULAR COBOL CALL TO DO THE SAME THING,\nYOU'RE PROBABLY WONDERING WHAT DIFFERENCE IT MAKES WHICH METHOD\nYOU PICK.  IT DEFINITELY DOES MAKE A DIFFERENCE, AND THE GENERAL\nRULE TO FOLLOW IS THIS: IF THE PROGRAM YOU'RE CALLING HAS NOTHING\nTO DO WITH DIALOGUE MANAGER - I.E. HAS NO CALLS TO ISPLINK - THEN\nYOU CAN PASS CONTROL TO IT EITHER BY USING A STANDARD COBOL CALL\nOR THROUGH ISPLINK/SELECT. A TYPICAL EXAMPLE OF THIS WOULD BE\nCALLING A GENERAL PURPOSE DATE CONVERSION ROUTINE. BUT, IF THE\nCALLED PROGRAM CONTAINS CALLS TO ISPLINK, \u00acTHEN YOU HAVE TO USE\nTHE ISPLINK/SELECT METHOD\u00a2. NATURALLY, THE SAFEST METHOD IS TO\nALWAYS USE SELECT TO PASS CONTROL, BUT IT'S BOUND TO ADD SOME\nOVERHEAD. HOWEVER, FAILING TO USE IT WHEN IT'S NEEDED CAN RESULT\nIN SOME VERY STRANGE BUGS AND MESSY SCREENS.\n\n     SAMPLES IN VARIOUS LANGUAGES:\n\n\n\n\n\n\n\n\n\n\n   !t+99\n                     ***** SETMSG *****\n\n     SETMSG IS A SPECIAL PURPOSE SERVICE THAT ALLOWS YOU TO SPECIFY\nTHE MESSAGE ID OF ONE OF THE MESSAGES YOU'VE BUILT IN YOUR MESSAGE\nLIBRARY, AND THAT MESSAGE WILL BE DISPLAYED ON THE \u00acNEXT\u00a2 PANEL\nTHAT GETS DISPLAYED, \u00acREGARDLESS OF WHETHER OR NOT THAT NEXT PANEL\nBELONGS TO YOU.\u00a2 ONE PLACE YOU'VE PROBABLY SEEN THIS USED IS BY\nTHE EDIT FUNCTION OF PDF. LET'S SAY YOU'RE IN EDIT, AND GO UP TO THE\nPRIMARY COMMAND LINE AND TYPE IN \"END\" OR HIT PF3. WHEN YOU NEXT\nSEE THE EDIT SELECT SCREEN, THERE WILL BE A \"XXXXXXXX SAVED\" MESSAGE IN\nTHE UPPER RIGHT HAND CORNER. THAT MESSAGE GOT THERE BECAUSE EDIT\nREQUESTED THE SETMSG SERVICE.\n\n     SAMPLES IN VARIOUS LANGUAGES:\n\n\n\n\n\n\n\n\n\n\n   !t+99\n                     ***** VCOPY *****\n\n     VCOPY IS A VERY IMPORTANT SERVICE THAT YOU'LL PROBABLY BE\nUSING A LOT. \u00acIT DOES NOT APPLY TO CLISTS, AND THEREFORE IS INVALID\nFOR ISPEXEC\u00a2. VCOPY IS THE LAST STEP IN A CHAIN OF SERVICES THAT\nARE NECESSARY TO GET DATA FROM A PANEL INTO YOUR PROGRAM; IT IS\nTHE SERVICE THAT COPIES THE VALUES OF THE VARIABLES YOU REQUEST\nFROM THE FUNCTION POOL FOR YOUR PROGRAM \u00acINTO THE STORAGE AREA\nOF YOUR PROGRAM\u00a2 THAT YOU'VE DESIGNATED.  VCOPY CAN CAUSE YOU A\nLOT OF HEADACHES IF YOU'RE NOT CAREFUL OR IF YOU DON'T KNOW WHAT\nYOU'RE DOING.  THIS IS BECAUSE IT IS QUITE CAPABLE OF CHEERFULLY\nOVERLAYING ALL SORTS OF GOOD DATA IN YOUR PROGRAM IF YOU CODE\nTHE CALL IMPROPERLY. DEPENDING ON WHAT GETS OVERLAID IN YOUR PROGRAM,\nTHIS COULD RESULT IN GARBAGE BEING DISPLAY ON SUBSEQUENT SCREENS,\nINCORRECT OUTPUT FROM YOUR PROGRAM, OR OUTRIGHT ABENDS THAT WILL\nNOT BE EASY TO DEBUG IN A HIGH LEVEL LANGUAGE.\n\nFOLLOWING ARE THE IMPORTANT THINGS TO KEEP IN MIND:\n\n     A. YOU CAN COPY MORE THAN ONE VARIABLE AT A TIME; THIS IS A\n        GOOD IDEA AS IT ELIMINATES THE OVERHEAD OF MULTIPLE CALLS\n        TO ISPLINK.  HOWEVER, COPYING MULTIPLE VARIABLES AT A TIME\n        CAN MAKE THE SITUATION EVEN RISKIER IN TERMS OF OVERLAYING\n        DATA, BECAUSE OF THE WAY DIALOGUE MANAGER HANDLES THE MOVE.\n     B. IN THE PARAMETER LIST YOU MUST SPECIFY THREE KEY THINGS;\n        THE FIRST IS A CHARACTER LIST OF THE \u00acNAMES OF THE VARIABLES\n        IN THE VARIABLE POOL\u00a2; (THIS IS \u00acNOT\u00a2 A LIST OF THE NAMES\n        OF THE FIELDS IN YOUR PROGRAM WHERE THE DATA WILL BE PUT).\n        THE SECOND IS A CONTIGUOUS GROUP OF FULLWORDS; EACH FULLWORD\n        MUST CONTAIN, IN BINARY, THE LENGTH OF THE DATA THAT YOU\n        EXPECT FOR THE ASSOCIATED VARIABLE. THE THIRD THING IS ONE\n        LARGE CONTIGUOUS STORAGE AREA IN YOUR PROGRAM WHERE THE\n        VARIABLES THEMSELVES WILL ACTUALLY BE COPIED. YOU'LL\n        PROBABLY WANT TO MAKE THIS A STRUCTURE WITH THE HIGHEST\n        LEVEL REPRESENTING THE OVERALL LARGE AREA, AND THE LOWER\n        LEVELS REPRESENTING EACH INDIVIDUAL VARIABLE. THE IMPORTANT\n        THING TO REMEMBER IS THAT \u00acISPLINK IS NOT AWARE OF YOUR\n        LOWER LEVEL ELEMENTS\u00a2; IN OTHER WORDS IT IS NOT DOING\n        INDIVIDUAL MOVES FROM EACH VARIABLE INTO EACH ONE OF YOUR\n        LOWER LEVEL ELEMENTS. WHAT IT IS DOING IS MOVING THE FIRST\n        VARIABLE YOU REQUESTED INTO THE BEGINNING ADDRESS OF THE\n        LARGE STORAGE AREA, THEN ADDING THE LENGTH THAT YOU\n        SPECIFIED FOR THAT VARIABLE TO THE BEGINNING ADDRESS TO\n        DEVELOP THE ADDRESS FOR THE SECOND VARIABLE, WHICH IT\n        THEN MOVES IN, AND SO ON. NOTE THAT IT WILL USE THE LENGTH\n        YOU SPECIFIED EVEN IF THE VARIABLE IS TOO SHORT TO FILL IT.\n        A SHORT VARIABLE IS LEFT JUSTIFIED AND RIGHT BLANK FILLED.\n        CONSEQUENTLY YOU HAVE TO MAKE SURE THAT THE LENGTH ARRAY\n        YOU SET UP MATCHES EXACTLY THE STRUCTURE YOU SET UP, AND\n        YOU DON'T MODIFY ONE WITHOUT MODIFYING THE OTHER. REMEMBER\n        THAT NEITHER THE COBOL COMPILER NOR ISPLINK WILL CHECK TO\n        MAKE SURE THIS IS CORRECT; YOU'LL HAVE TO DO IT YOURSELF.\n        LIKEWISE, YOU CAN'T JUST UP AND DEFINE A NEW FIELD IN\n        THE STRUCTURE WITHOUT MODIFYING BOTH THE LENGTH ARRAY AND\n        THE VARIABLE NAME LIST TO MATCH. NOR CAN YOU STICK A\n        FIELD IN THAT STRUCTURE THAT ISN'T INTENDED TO RECEIVE\n        A VARIABLE; IF YOU DO, IT WILL GET WIPED AND THE REST OF\n        YOUR STRUCTURE FROM THERE ON DOWN WILL BE OUT OF WHACK.\n        C. A PARTICULARLY CRITICAL AND TRICKY QUIRK OF THIS SERVICE\n        IS THE LENGTH ARRAY YOU SPECIFY; \u00acISPLINK MODIFIES THIS\n        EVERY TIME YOU CALL IT\u00a2. THIS MEANS THAT YOU HAVE TO\n        RE-INITIALIZE THE LENGTH ARRAY \u00acBEFORE YOUR LOGIC PASSES\n        THROUGH THAT PARTICULAR CALL AGAIN\u00a2. THE REASON FOR THIS IS\n        FAIRLY SIMPLE; SINCE VARIABLES CAN (AND OFTEN ARE) SHORTER\n        THAN THEIR DEFINED LENGTH, ISPLINK WILL STORE INTO THE ARRAY\n        THE ACTUAL LENGTH OF THAT VARIABLE AT THAT TIME, IN \u00acBINARY\u00a2.\n        THIS IS HANDY AS IT SAVES YOU HAVING TO SCAN EACH VARIABLE TO\n        DETERMINE ITS LENGTH. IT CAN ALSO BE DISASTEROUS IF YOU FORGET\n        TO REINITIALIZE THE ARRAY, SINCE ON THE NEXT CALL IT WILL BE\n        MOVING VARIABLES INTO YOUR STRUCTURE USING SHORT LENGTHS LEFT\n        OVER FROM THE PREVIOUS CALL, AND THESE WILL NO LONGER MATCH\n        YOUR LOWER LEVEL ELEMENTS. THE BEST WAY TO HANDLE THIS IS\n        TO MAKE EACH LOW LEVEL ELEMENT IN YOUR PROGRAM THE EXACT SAME\n        LENGTH AS THE DEFINED (MAXIMUM) LENGTH OF ITS CORRESPONDING\n        VARIABLE IN YOUR PANEL DEFINITION, AND THEN RE-INITIALIZE\n        THE LENGTH ARRAY BEFORE EACH CALL.\n        D. THE BOOK SHOWS TWO DIFFERENT MODES OF OPERATION FOR\n        VCOPY - \"MOVE\" AND \"LOCATE\". STAY AWAY FROM LOCATE, WHICH\n        UNFORTUNATELY IS THE DEFAULT. LOCATE MODE IS DESIGNED TO\n        RETURN THE \u00acADDRESSES\u00a2 OF THE VARIABLES TO THE PROGRAM,\n        WHICH CAN BE CLUMSY TO HANDLE IN A HIGH LEVEL LANGUAGE.\n        MOVE MODE ACTUALLY PLACES THE VARIABLES VALUES IN YOUR\n        STORAGE, AS OUTLINED ABOVE. ONCE YOU GET TO THIS STAGE, IT'S\n        NOT A BIT DIFFERENT FROM READING A CARD INTO A STRUCTURE.\n\n     SAMPLES IN VARIOUS LANGUAGES:\n\n\n\n\n\n\n\n\n\n\n   !t+99\n                     ***** VDEFINE *****\n     THE VDEFINE SERVICE IS ONE THAT ALTHOUGH IT MAY APPEAR OTHERWISE,\nYOU SHOULDN'T NEED TO USE VERY OFTEN. THE BASIC IDEA IS THE SAME AS\nTHAT OF \"VREPLACE\" - I.E. DATA IS TRANSFERRED \u00acFROM YOUR PROGRAM TO\nTHE FUNCTION POOL\u00a2. THE MAIN DIFFERENCE IS THAT WITH VDEFINE YOU\nARE \u00acCREATING A NEW VARIABLE IN THE POOL THAT DID NOT EXIST BEFORE\u00a2,\nAS WELL AS SETTING THE VALUE OF THAT VARIABLE, WHEREAS VREPLACE MERELY\nCHANGES THE CONTENTS OF A VARIABLE THAT ALREADY EXISTS IN THE POOL.\nTHE REASON THAT YOU SHOULDN'T GENERALLY NEED VDEFINE IS BECAUSE\nIT IS SIMPLER AND LESS MESSY TO LET ALL VARIABLES BE \u00acIMPLICITLY\u00a2\nDEFINED IN THE PANEL WHERE THEY ARE TO BE USED ANYWAY, AND THEN LET\nVPUT AND VGET RIPPLE THEM THROUGHOUT THE FUNCTION POOLS AND THE\nSHARED POOL.\n     IF YOU DO FIND A NEED TO USE IT, KEEP IN MIND THAT IF YOU DECIDE\nTO VDEFINE MORE THAN ONE VARIABLE PER CALL TO ISPLINK THAT \u00acALL OF THE\nVARIABLES IN THAT CALL MUST HAVE EXACTLY THE SAME LENGTH AND THE SAME\nFORMAT\u00a2.  THIS RESTRICTION MAKES VDEFINE PRETTY IMPRACTICAL TO USE\nBECAUSE MOST PRACTICAL SYSTEMS AREN'T SO LUCKY THAT ALL THEIR\nVARIABLES ARE THE SAME LENGTH. NATURALLY YOU CAN GET AROUND THIS\nBY SETTING UP AS MANY VDEFINES AS YOU HAVE VARIABLES, OR GROUPING\nTHEM BY LENGTH, BUT THIS IS BOUND TO CAUSE A LOT OF NEEDLESS OVERHEAD\nDUE TO THE MULTIPLE CALLS TO ISPLINK, AND DOESN'T MAKE YOUR CODE\nANY EASIER TO FOLLOW EITHER. IF YOU TRY TO IGNORE THIS RESTRICTION,\nYOU'LL FIND THAT ISPLINK WILL TREAT ALL YOUR VARIABLES AS THOUGH\nTHEY \u00acARE\u00a2 THE SAME LENGTH, AND YOU'LL WIND UP WITH SCRAMBLED\nVARIABLES AND MAYBE AN ABEND, TOO.\n     THE REFERENCE MANUAL SHOWS A NUMBER OF DIFFERENT \"FORMATS\" YOUR\nDATA CAN HAVE, AND ISPLINK IS CAPABLE OF CONVERTING THESE VARIOUS\nFORMATS TO CHARACTER SO THAT A PANEL CAN DISPLAY THEM. MY ADVICE\nIS TO STICK STRICTLY TO CHARACTER FORMAT, AND TAKE CARE OF ANY\nCONVERSIONS YOURSELF WITHIN THE LANGUAGE YOU'RE USING, WHERE YOU'RE\nFAMILIAR WITH WHAT YOU'RE DOING; IN OTHERWORDS GET EVERYTHING\nCONVERTED TO CHARACTER \u00acBEFORE\u00a2 YOU CALL ISPLINK.\n     THERE ARE FOUR ITEMS IN THE PARAMETER LIST THAT YOU HAVE TO PASS\nTO ISPLINK FOR VDEFINE. THE FIRST IS A LIST OF NAMES YOU WANT ASSIGNED\nTO THE VARIABLES WHEN THEY'RE PUT IN THE FUNCTION POOL. BEAR IN MIND\nTHAT THESE \u00acARE NOT\u00a2 NECESSARILY GOING TO BE THE NAMES THAT YOU ASSIGN\nTO THE FIELDS IN THE PROGRAM. THE SECOND ITEM IS THE NAME OF THE\nOVERALL AREA IN YOUR PROGRAM STORAGE WHERE THE \u00acVALUES\u00a2 YOU WANT\nASSIGNED TO THE VARIABLES WILL BE. THIS AREA HAS TO BE BIG ENOUGH\n(AND CONTIGUOUS!) TO CONTAIN ALL THE VALUES TOGETHER, ONE AFTER THE\nOTHER. AGAIN, REMEMBER THAT EVEN THOUGH YOU MAY SUB-MAP THIS STORAGE\nSO YOU CAN REFERENCE INDIVIDUAL VARIABLES WITHIN YOUR PROGRAM, ISPLINK\nPAYS ABSOLUTELY NO ATTENTION TO THIS SUBMAPPING. THE THIRD ITEM\nIS THE FORMAT YOUR DATA IS IN, WHICH SHOULD BE \"CHAR\". THE FOURTH ITEM\nIS A SINGLE BINARY FULLWORD CONTAINING THE LENGTH, AND AS NOTED ABOVE\nIT REPRESENTS THE LENGTH OF ANY VARIABLE SINCE THEY ALL HAVE TO BE\nIDENTICAL IN LENGTH.\n     VDEFINE IS ANOTHER OF THE ISPLINK SERVICES THAT IS NOT NECESSARY\nIN CLIST, AND IS IN FACT AN INVALID PARAMETER FOR ISPEXEC.\n\n     SAMPLES IN VARIOUS LANGUAGES:\n\n\n\n\n\n\n\n\n\n   !t+99\n                     ***** VDELETE *****\n\n     VDELETE IS ANOTHER SERVICE YOU PROBABLY WON'T NEED. IT'S PURPOSE\nIS TO REMOVE A VARIABLE FROM THE PROGRAM'S FUNCTION POOL, WHICH ALSO\nREMOVES THE VARIABLES VALUE AS WELL, NATURALLY. NOTE THAT IT ONLY\nDOES THIS FOR THE PROGRAM'S FUNCTION POOL, \u00acNOT\u00a2 FOR SHARED POOL,\nTHE PROFILE POOL, OR SOME OTHER FUNCTION POOL. FOR MOST SYSTEMS,\nYOU CAN SIMPLY BLANK OUT THE CONTENTS OF A VARIABLE USING \"VREPLACE\"\nIF YOU NO LONGER NEED IT, EITHER TEMPORARILY OR PERMANENTLY. USING\nVDEFINE AND VDELETE TO CREATE/INITIALIZE AND ELIMINATE A VARIABLE\nOVER AND OVER IS GOING TO DRIVE UP OVERHEAD MORE THAN SIMPLY BLANKING\nIT OUT AND LEAVING IT ALONE UNTIL YOU NEED IT AGAIN.\n     VDELETE IS NEITHER NEEDED NOR VALID FOR CLIST/ISPEXEC. THE\nONLY PARAMETER YOU NEED PASS IT IS JUST A STANDARD NAMELIST CONTAINING\nTHE NAMES OF THE VARIABLES TO BE DELETED.\n\n     SAMPLES IN VARIOUS LANGUAGES:\n\n\n\n\n\n\n   !t+99\n                     ***** VGET*****\n\n     VGET IS A SERVICE YOU'LL USE A LOT. ITS PURPOSE IS TO COPY\nAN ALREADY EXISTING VARIABLE FROM EITHER THE SHARED POOL OR THE\nPROFILE POOL INTO THE FUNCTION POOL FOR YOUR PROGRAM. NOTE THAT THIS\nDOES NOT MEAN THAT IT COPIES THE VARIABLES VALUE INTO YOUR PROGRAM\nITSELF - YOU HAVE TO USE \"VCOPY\" TO DO THAT AS SHOWN ABOVE. IF\nTHE VARIABLE ALREADY EXISTS IN YOUR PROGRAM'S FUNCTION POOL, VGET\nWILL UPDATE IT; OTHERWISE IT CREATES AND INITIALIZES IT.\n     THERE ARE TWO PARAMETERS FOR VGET; THE FIRST IS A STANDARD\nNAMELIST CONTAINING THE NAMES OF ALL THE VARIABLES YOU WANT DONE.\nDO AS MANY AS YOU CAN PER VGET IN ORDER TO AVOID NEEDLESS OVERHEAD.\nTHE SECOND SPECIFIES WHICH SOURCE POOL YOU HAVE IN MIND; \"SHARED\"\nCAUSES VGET TO LOOK ONLY IN THE SHARED POOL FOR THE VARIABLES,\nWHILE \"PROFILE\" RESTRICTS IT TO LOOKING IN THE PROFILE POOL. A THIRD\nCHOICE, \"ASIS\" WILL CAUSE IT TO LOOK IN BOTH, THE ORDER OF SEARCH\nBEING THE SHARED POOL FIRST, AND IF IT'S NOT THERE THEN THE\nPROFILE POOL.\n\n     SAMPLES IN VARIOUS LANGUAGES:\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STANDARD": {"ttr": 2823, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "1\n-\n-\n-\n-\n                     ISPF PROJECT: ISPF STANDARDS TASK FORCE\n-                                 March 15, 1985\n-          Co-Chairmen:       Cindy Stegemeier\n                              Pennzoil Co.\n                              P. O. Box 2967\n                              Houston, Texas 77252-2967\n                              (713) 546-8318\n-                             Brian Vohs\n                              Exxon Co., USA\n                              P. O. Box 2180\n                              Houston, Texas 77001\n                              (713) 965-7534\n-\n-\n           Project Manager:   Ross R. Pavlac\n                              First National Bank of Chicago\n                              1 First National Plaza, Suite 0272\n                              Chicago, Illinois 60670\n                              (312) 407-1549\n-\n-\n-\n0\n-\n1\n-\n-\n             ********************************************************\n             *  This is a draft copy of the document.  The final    *\n             *  draft will be available as a GUIDE publication.     *\n             ********************************************************\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n\n-\n1\n-\n-\n-\n-                               TABLE OF CONTENTS\n-\n                                                                   page\n0          1.   INTRODUCTION . . . . . . . . . . . . . . . . . . . .  1\n0          2.   NAMING STANDARDS . . . . . . . . . . . . . . . . . .  2\n0                 General  . . . . . . . . . . . . . . . . . . . . .  2\n                  Requirements . . . . . . . . . . . . . . . . . . .  2\n                  Identifiers  . . . . . . . . . . . . . . . . . . .  3\n                  Some Naming Standards Which Are in Use Now . . . .  5\n0          3.   PANELS . . . . . . . . . . . . . . . . . . . . . . .  7\n0                 General  . . . . . . . . . . . . . . . . . . . . .  7\n                  Highlighting and Color Use . . . . . . . . . . . .  9\n                  Panel Components . . . . . . . . . . . . . . . . . 11\n                  Data Entry Panel . . . . . . . . . . . . . . . . . 15\n                  Multiple Column Data Entry Panel . . . . . . . . . 18\n                  Selection Menu . . . . . . . . . . . . . . . . . . 20\n                  Table Display Panel  . . . . . . . . . . . . . . . 23\n                  Tutorial Text Panel  . . . . . . . . . . . . . . . 25\n                  Tutorial Selection Menu  . . . . . . . . . . . . . 27\n                  Confirmation Panel . . . . . . . . . . . . . . . . 30\n                  Informatory Panel  . . . . . . . . . . . . . . . . 31\n                  Non-Display Panel  . . . . . . . . . . . . . . . . 32\n0          4.   MESSAGES . . . . . . . . . . . . . . . . . . . . . . 34\n0          5.   TABLES . . . . . . . . . . . . . . . . . . . . . . . 36\n0          6.   FILE TAILORING . . . . . . . . . . . . . . . . . . . 39\n0          7.   MODELS . . . . . . . . . . . . . . . . . . . . . . . 40\n-\n                                            - ii -\n-\n1\n-\n-\n           8.   USING DIALOG MANAGEMENT SERVICES IN PROGRAMS . . . . 42\n0          9.   USER CUSTOMIZATION OF SYSTEM-WIDE DIALOG COMPONENTS  48\n0          10.  CONCATENATION SEQUENCES FOR ISPF LIBRARIES . . . . . 50\n0                 General  . . . . . . . . . . . . . . . . . . . . . 50\n                  Some Possible Concatenation Sequences  . . . . . . 51\n                  Combining ISPF Libraries From Different Sources  . 54\n0          11.  TRACKING CHANGES IN ISPF AND ISPF/PDF  . . . . . . . 56\n0          12.  STEPS OF DIALOG DEVELOPMENT  . . . . . . . . . . . . 57\n0          13.  CLISTS . . . . . . . . . . . . . . . . . . . . . . . 59\n0          14.  NEW APPLICATION PROFILES . . . . . . . . . . . . . . 60\n-          Appendix                                                page\n0          A.   A SAMPLE MODEL FOR TABLE DISPLAY PROCESSING  . . . . 62\n0          B.   SAMPLE PANELS USED TO ADD MODELS . . . . . . . . . . 67\n0          C.   ENFORCING A CONCATENATION SEQUENCE FOR ISPF FILES  . 74\n0          D.   RESETTING PF KEY VALUES FOR NEW PROFILE MEMBERS  . . 81\n0          E.   SAMPLE MODELS  . . . . . . . . . . . . . . . . . . . 87\n0          F.   CONTRIBUTORS . . . . . . . . . . . . . . . . . . .  101\n-          BIBLIOGRAPHY  . . . . . . . . . . . . . . . . . . . . .  103\n-          INDEX . . . . . . . . . . . . . . . . . . . . . . . . .  107\n-          READER COMMENT CARD . . . . . . . . . . . . . . . . . .  114\n-\n0                                          - iii -\n-\n1\n-\n-\n                                 1.  INTRODUCTION\n0          This publication is  intended to meet the needs  of ISPF in-\n           stallations which are  developing their own ISPF  dialogs or\n           installing IBM  or other vendor  products which use  ISPF as\n           their dialog  manager.   The objectives of  this publication\n           are to:\n0             1.  Establish  standards for  ISPF  dialogs to  ensure\n+                 _________\n                  that all dialogs which follow these standards will\n                  act in  a consistent  manner.   Major  emphasis is\n                  placed on  how a dialog  looks to the  user (panel\n                  layouts, message formats, etc.).  Because ISPF/PDF\n                  is  the dialog  which  has  the broadest  base  of\n                  users,  the  standards proposed here are  based on\n                  the way in which ISPF/PDF interacts with the user.\n0             2.  Document some of  the more common pitfalls  in de-\n+                 ________\n                  signing and writing ISPF dialogs.\n0             3.  Discuss concerns  related to the  installation and\n+                 _______\n                  maintenance of  ISPF dialogs  (naming conventions,\n                  library concatenations,  making changes to system-\n                  wide dialog components, etc.).\n0             4.  Propose  some intermediate  solutions to  problems\n+                 _______\n                  caused by deficiencies in  ISPF (e.g.  freeing and\n                  re-allocating  ISPF files  while executing  ISPF).\n                  It  is hoped  that IBM  will  eventually make  the\n                  changes to  ISPF which are necessary  to eliminate\n                  these deficiencies.\n-\n-\n-\n-\n-                                           - 1 -\n-\n1\n-\n-\n                               2.  NAMING STANDARDS\n0          2.1   GENERAL\n+                _______\n0          Naming standards must be established for the member names of\n           ISPF components (panels, messages, CLISTs, etc.)  to prevent\n           member name  conflicts.   Member names should  also identify\n           the dialog or application in which the member is used or the\n           group which developed the dialog or application.\n0          Conflicting member names are a  concern because most instal-\n           lations run ISPF  as a concatenation of  libraries from dif-\n           ferent sources.    The IBM ISPF  and ISPF/PDF  libraries are\n           concatenated with other  vendor ISPF libraries and  with li-\n           braries of dialogs developed at the installation.   Some in-\n           stallations have many different ISPF libraries corresponding\n           to different groups of users.    If no naming convention has\n           been established,   libraries which  contain members  of the\n           same name may be concatenated.  When multiple members of the\n           same name exist  in a concatenation,  only  the first member\n           found with the specified name is accessible.\n0          There may not be any one  naming standard which is appropri-\n           ate for every installation.   The purpose here is to propose\n           several possible naming standards and discuss their relative\n           advantages and disadvantages.\n0          Naming conventions  should be established  for all  parts of\n           the dialog (panels,  messages,  skeletons,  CLISTs,  tables,\n           programs).  Naming conventions should be established for all\n           Profile pool variables within a given profile (identified by\n           the NEWAPPL id).   Naming  conventions should be established\n           for all Shared pool variables within a given NEWPOOL.\n-\n           2.2   REQUIREMENTS\n+                ____________\n0          Any naming standard should meet the following requirements:\n0             1.  Member names  must be unique across  any libraries\n                  which are  concatenated together.   If  the System\n                  Modification Program (SMP)  is to be used to main-\n-                                           - 2 -\n-\n1\n-\n-\n                  tain the dialogs,  each distinct component of each\n                  dialog must be uniquely named across all libraries\n                  that SMP will maintain.\n0             2.  The member name should identify  the dialog or ap-\n                  plication which  the component  belongs to.    The\n                  naming standard should  also accomodate components\n                  which are used by many different dialogs.\n0             3.  The naming  standard should use as  few characters\n                  as possible, so that the dialog developer has some\n                  characters  for  his/her own  use.    Because  the\n                  length of  the names is  limited to  8 characters,\n                  each  character required  by  the naming  standard\n                  must be justified.\n0          In addition to the above,  the naming standard should,  ide-\n           ally, encourage the use of mnemonics in names.   Well-chosen\n           mnemonics are useful in  communicating information about the\n           function of the component.\n-\n           2.3   IDENTIFIERS\n+                ___________\n0          The member name should include some of the following identi-\n           fiers:\n0             1.  SYSTEM ID - identify the  system to which the dia-\n                  log belongs\n0                 A system id identifies  the application system but\n                  not the dialog  to which a specific  component be-\n                  longs.  A list of system ids must be maintained to\n                  ensure uniqueness.\n0             2.  GROUP ID - identify the  group or department which\n                  developed the dialog\n0                 If group id is used,  the group which is responsi-\n                  ble for the dialog is easily identified when prob-\n                  lems occur or changes need  to be made.   This may\n                  not be important if each group  has its own set of\n-                                           - 3 -\n-\n1\n-\n-\n                  ISPF libraries concatenated.   A list of group ids\n                  must be maintained to ensure uniqueness.\n0             3.  DIALOG ID - identify the  dialog to which the mem-\n                  ber belongs\n0                 Member names  which identify  the dialog  to which\n                  the member  belongs are useful in  maintaining the\n                  ISPF libraries.  All components of a dialog can be\n                  identified if  each member name contains  a dialog\n                  ID.   When  a problem  with a  specific member  is\n                  found,  it is  easy to determine which  dialog and\n                  which other ISPF components  may be affected.   If\n                  dialog id is  used,  a list of dialog  ids must be\n                  maintained to ensure uniqueness.\n0                 Dialog id could be used in conjunction with system\n                  id or group id to  further identify the component.\n                  For example,  system  id or group id  could be de-\n                  fined  as a  3-character code  and dialogs  within\n                  each  system/group   could  be  identified   by  a\n                  1-character code.\n0             4.  TYPE - the type of ISPF component\n                         @ for Primary Option Menu (POM) panels\n                         $ for non-POM Selection menus\n                         B for table display panels\n                         D for display/data entry panels\n                         E for CLISTs\n                         H for Help/Tutorial panels\n                         K for skeletons\n                         L for models\n                         T for tables\n                         0 (zero) for load modules\n                         P for profile variables\n                         S for shared variables\n                         F for function variables (recommended)\n0                 The  type indicator  is useful  in naming  components\n                  which  are maintained  by SMP  (because every  member\n                  name must  be unique across all  libraries maintained\n                  by SMP).   It  can also be useful  in differentiating\n                  between the different types of  panels within a panel\n                  library.\n0                                           - 4 -\n-\n1\n-\n-\n              5.  VERSION - version of the member,  dialog or appli-\n                  cation\n0             6.  INSTALLATION CODE - may be used to designate which\n                  system the member is to be used in (e.g.  V for VM\n                  or M for MVS)\n-\n           2.4   SOME NAMING STANDARDS WHICH ARE IN USE NOW\n+                ____ ______ _________ _____ ___ __ ___ ___\n0          Because of  the connection  between message-ids  and message\n           member names,  some of the following naming conventions can-\n           not be applied to message member names.\n0          The number of  characters specified in the  following naming\n           standards are given as an  example.   Each installation will\n           have  different requirements  for the  number of  characters\n           used for an identifier.\n0          1.\n              Characters Value\n+             __________ _____\n                 1-4     Dialog ID / Group ID / System ID\n                   5     Type of component\n                 6-8     specified by developer\n0             Comments - this convention allows the dialog developer to\n                choose a meaningful naming scheme  for part of the mem-\n                ber name,   while still providing information  which is\n                useful in identifying the component.\n0          2.\n              Characters Value\n+             __________ _____\n                 1-3     Dialog ID / Group ID / System ID\n                   4     Type of component\n                 5-8     each character is an alphameric\n                         character which indicates the option\n                         number at the at the 1st, 2nd, 3rd\n                         and 4th level of the dialog hierarchy\n0             Advantages -  the member  name indicates  where the  ISPF\n                component belongs in the dialog hierarchy.\n-\n                                            - 5 -\n-\n1\n-\n-\n              Disadvantages  - If  the organization  of  the dialog  is\n                changed,  the member names would  need to be changed to\n                reflect the new hierarchy.\n0          3.\n              Characters Value\n+             __________ _____\n                   1     Type of component\n                 2-5     Dialog ID / Group ID / System ID\n                   6     alphanumeric character\n                 7-8     Version\n0             Advantages - Version  may be useful information  for some\n                installations.\n0             Disadvantages - Only  1 character is left  for the devel-\n                oper to specify.  Also, in a member selection list, the\n                different types of panels which  belong to a dialog are\n                not grouped together.\n0          4.\n              Characters Value\n+             __________ _____\n                   1     Installation Code\n                 2-4     Dialog ID / Group ID / System ID\n                   5     Type of component\n                 6-8     specified by developer\n0             Comments -  Installation code  may be  useful information\n                for installations which support more than one operating\n                system.\n0          5. IBM has no PUBLISHED naming standards for their ISPF mem-\n              ber names.  For the ISPF and ISPF/PDF products, they GEN-\n              ERALLY follow a convention of\n0             Characters Value\n+             __________ _____\n                 1-3     ISR or ISP, depending upon the product\n                         to which the member belongs\n                   4     ISPF/PDF option ID (e.g. E for Edit)\n                 5-8     free-form\n0             Installations  should not  begin member  names of  dialog\n              components with the characters ISR or ISP because of this\n              convention.\n-                                           - 6 -\n-\n1\n-\n-\n                                    3.  PANELS\n0          3.1   GENERAL\n+                _______\n0             1.  Installation-developed  panels should  be as  con-\n                  sistent as possible with ISPF/PDF panels.\n0             2.  All dialogs should make use of the HELP facility.\n0             3.  All  dialogs should  support both  short and  long\n                  messages.\n0             4.  Always  use the  default message  area to  display\n                  messages.  This is an important part of the format\n                  to which dialog users have become accustomed.  The\n                  default area  for the short  message is  the upper\n                  right hand corner of the panel (line 1).   The de-\n                  fault  area for  the long  message  is the  entire\n                  third line of the panel.\n0             5.  Be careful in the use of color.  The user needs to\n                  know  where  to  focus his/her  attention  on  the\n                  screen.  An excess of color and/or highlighting on\n                  a panel  is confusing and  can also cause  eye fa-\n                  tigue.\n0             6.  Panel formats should generally be designed for the\n                  standard terminal screen size (24  rows by 80 col-\n                  umns).\n0             7.  To display large amounts of information,  use more\n                  panels with less information per panel rather than\n                  fewer panels with more information per panel.\n0             8.  If  it is  necessary to  pad an  input field  with\n                  something other than null  characters,  always pad\n                  with underscores.   Padding allows the user to see\n                  exactly how long  an input field is,   but has the\n                  disadvantage of preventing the user from using in-\n                  sert mode to insert characters in the field.  Pad-\n                  ding with underscores may be  used to make a panel\n                  more closely resemble a paper form which the panel\n                  is replacing.\n-                                           - 7 -\n-\n1\n-\n-\n              9.  Minimize the  use of lengthy  application commands\n                  within a dialog.   Panels should  be used to build\n                  and issue any lengthy commands.   For example, as-\n                  sume the  following command is  used to  perform a\n                  search:\n0                    SEARCH  TABLE  FIRST(JOHN)   MIDDLE(Q)   LAST(DOE)\n                     FOR(EMPLOYEE_NUMBER)\n0                 The user should not be required to enter the command.\n                  Instead,  the dialog should use  panels to gather the\n                  information and  should construct and issue  the com-\n                  mand.\n0             10. When writing  dialogs to  be used  by non-program-\n                  mers,  consider using the word \"screen\" instead of\n                  \"panel\" in panel text which refers to panels being\n                  displayed.   \"Screen\" is the  correct term for the\n                  physical image  displayed on  the terminal  and is\n                  also more likely to  be understood by non-program-\n                  mers.\n0             11. All panels must have a  COMMAND or OPTION field on\n                  line 2.  This provides users with a standard place\n                  to enter \"extended jump\" options (e.g. \"=3.1\") and\n                  TSO or CMS commands.\n0             12. The last line on the  panel should always be blank\n                  to allow  the user to split-screen  without losing\n                  any information.\n0             13. Use upper and  lower case in text  fields;  it has\n                  proven to be more readable  than text which is all\n                  in upper case.\n0             14. Do not change the default attribute characters un-\n                  less  one of  the default  characters must  appear\n                  within the text of the panel.\n0             15. Identify panels with comments (who,  where,  calls\n                  who, called by, etc.)  in the )ATTR section of the\n                  panel definition.   See the model  of a panel com-\n                  ment block in Figure 14 of Appendix E for an exam-\n                  ple.\n0                                           - 8 -\n-\n1\n-\n-\n              16. All panel definitions should  contain all sections\n                  - the )ATTR, )BODY, )REINIT, )INIT and )PROC.  Any\n                  sections which  are not actually  used by  a panel\n                  should be left empty.  Table display panels should\n                  also contain a )MODEL section.\n0             17. Many installations find that  including a time-of-\n                  day field  on every panel  is useful  in debugging\n                  problems which occur while  in ISPF.   Also,  some\n                  ISPF users find that having  the time displayed on\n                  each panel keeps them aware of time spent in a lo-\n                  gon session.   If time is  included as part of the\n                  installation standard panel  format,  the position\n                  of the time field should  be consistent within the\n                  installation.   The  recommended position  for the\n                  time field is right justified  on line 3.   Line 3\n                  is blank  except for the  time field,  and  when a\n                  long message is displayed,   the time is automati-\n                  cally overlayed  with the message text  or blanks.\n                  If date,  userid or other  fields are defined as a\n                  panel standard for an installation, their position\n                  on the panels should also be consistent within the\n                  installation.\n0             18. Your installation may want to display the PDF ver-\n                  sion number on the Primary Option menu.  This will\n                  allow users to  report the version they  are using\n                  when ISPF problems are  encountered (in an instal-\n                  lation which runs multiple versions of ISPF).  One\n                  disadvantage of  displaying the version  number is\n                  that users tend to  attribute many unrelated prob-\n                  lems to a change in ISPF/PDF  if they are aware of\n                  a new version being implemented.\n-\n           3.2   HIGHLIGHTING AND COLOR USE\n+                ____________ ___ _____ ___\n0             1.  The majority of  the panel should be  displayed in\n                  low intensity output and in upper and lower case.\n0             2.  Do not  overuse high  intensity.   High  intensity\n                  draws  attention to  important fields  on a  panel\n-                                           - 9 -\n-\n1\n-\n-\n                  when they contrast with the  majority of the panel\n                  fields.   Too much high intensity on a panel mini-\n                  mizes this effect.\n0             3.  Output fields\n0                 a) High intensity - should be used sparingly.  The\n                     only universally highlighted  sequence of char-\n                     acters are  the title line,  the  command line,\n                     and the arrows.\n0                 b) Low intensity  - should be the  predominant at-\n                     tribute for fields in the body of the panel.\n0             4.  Input fields\n0                 a) High intensity -  should be used for  all input\n                     fields, except for those in table displays.  In\n                     the case of table displays  it should always be\n                     used with the selection field.  Other important\n                     table display  input fields  may also  be high-\n                     lighted.\n0                 b) Low intensity -  should only be used  for table\n                     display input fields.\n0             5.  Do not depend on the use of color;  some users may\n                  not have a color terminal.  For example:  the fol-\n                  lowing instruction would be unclear to users with-\n                  out a color terminal:\n                       Enter report number on the RED line below:\n-\n-\n-\n-\n-                                           - 10 -\n-\n1\n-\n-\n           3.3   PANEL COMPONENTS\n+                _____ __________\n0          The sample panel format in Figure 1 provides a basis for the\n           following discussion on  panel layouts.   The terms  used in\n           the description of each panel type are defined below.\n-          -------------------------  TITLE LINE  --------------------------\n           COMMAND ===>\n0                                  Function Line\n0          ------------------\n                            |\n                            |\n                            |------->   Body of Panel\n                            |\n                            |\n           ------------------\n0             Directive Line\n-                         Figure 1. SAMPLE PANEL FORMAT\n-\n           General\n0             1.  The panel  )BODY section should always  be defined\n                  with the  standard number  of lines  which can  be\n                  displayed on the terminals  being used (usually 24\n                  lines).   This  can minimize the errors  made when\n                  adding to an existing panel definition.\n0             2.  Each line should begin with  a '+' attribute char-\n                  acter unless  some other  attribute is  necessary.\n                  This  prevents  unintentional  continuation  of  a\n                  field from the previous line.\n-\n-\n                                            - 11 -\n-\n1\n-\n-\n           Title Line (Line 1)\n0             1.  Should be the first line on the panel.\n0             2.  Should  be displayed  in a  high intensity  output\n                  field.\n0             3.  Should be in upper case.\n0             4.  The title should be centered on the title line.\n0             5.  Separate the title  from the dashes by  at least 1\n                  (and preferably 2) blanks.\n0          Command Line (Line 2)\n0             1.  Reserved for OPTION ===> or COMMAND ===>.   OPTION\n                  should be used on all  selection menus and COMMAND\n                  should be used on all other panels.\n0             2.  Should be in upper case.\n0             3.  Should  be displayed  in a  high intensity  output\n                  field.\n0             4.  The input field should NOT be terminated until the\n                  beginning of the next line,   to allow the user to\n                  enter long CMS or TSO commands.\n0          Standard Arrow Symbol\n0             1.  All input fields should be immediately preceded by\n                  the ISPF standard arrow symbol ( ===> ).\n0             2.  Should be used ONLY to precede input fields.\n0             3.  Should  always be  displayed in  a high  intensity\n                  output field.\n0             4.  Line  up the  arrows  vertically,  within  logical\n                  groups, on the panel.  If possible, line up all of\n                  the arrows on  the panel.   The text  fields which\n                  precede the arrow symbols should be left-justified\n                  within logical groups.\n0                                           - 12 -\n-\n1\n-\n-\n                  For example:\n                      SYSOUT CLASS     ===>\n                      LOCAL PRINTER ID ===>\n0          Long Message Line (Line 3)\n0             1.  Should always be blank.    (Some output fields may\n                  be positioned on  this line.   This is  the normal\n                  position for a time-of-day field).\n0          Function Line (optional, Line 4)\n0             1.  Can be used to display a  subtitle on a panel,  if\n                  one is necessary.\n0             2.  Should be in upper and lower case.\n0             3.  Should  be displayed  in a  high intensity  output\n                  field.\n0             4.  Can be used to  provide simple instructions,  such\n                  as \"Enter all of the Reports to be Run\"\n0          Directive Line (Line 22,23)\n0             1.  The directive line directs the user on how to pro-\n                  ceed from  this panel.   The  wording of  the line\n                  should be consistent with ISPF/PDF.\n0             2.  To indicate  an action,  display the  following on\n                  line 23:\n0                 Press ENTER key to process; Enter END command to terminate.\n0                 If ENTER and END meanings  are different from nor-\n                  mal PDF use, use two lines to display the instruc-\n                  tions (this  will help draw  attention to  the in-\n                  structions):\n0                      Press ENTER key to ----------\n                       Enter END command to --------\n0                 where dashes indicate action.  For example,\n-                                           - 13 -\n-\n1\n-\n-\n                       Press ENTER key to DELETE the data set\n                       Enter END command to CANCEL the delete request\n0                 If two directive lines  are necessary,  place them\n                  on lines 22 and 23.\n0             3.  The directive line(s)  should  be in the following\n                  format:  the words END and ENTER are in upper case\n                  and displayed in high intensity output fields, the\n                  rest of the line(s)  should  be in upper and lower\n                  case and displayed in low intensity output fields.\n0                 Example of a standard format directive line, coded\n                  using default attribute characters:\n0                 +Press%ENTER+key to process; Enter%END+command to terminate\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-                                           - 14 -\n-\n1\n-\n-\n           3.4   DATA ENTRY PANEL\n+                ____ _____ _____\n-           ----------------  TITLE FOR DATA ENTRY PANEL  ------------------\n            COMMAND ===>\n0           Instructions\n0             DESCRIPTION FIELD 1 ===> INPUT FIELD 1  (information)\n              DESCRIPTION FIELD 2 ===> INPUT FIELD 2  (information)\n              DESCRIPTION FIELD 3 ===> INPUT FIELD 3  (information)\n0           Directive Line\n0                       Figure 2. SAMPLE DATA ENTRY PANEL\n-\n           Instructions\n0             1.  Should be brief, preferably one line.\n0             2.  Should be in upper and lower case.\n0             3.  Should  be displayed  in  a  low intensity  output\n                  field.\n0          Description fields\n0             1.  Should be brief, limited to one line when possible\n                  and never exceeding two lines.\n0             2.  Should  be lined  up to  the left  or placed  just\n                  above the corresponding input field.\n0             3.  Should  be displayed  in  a  low intensity  output\n                  field.\n0             4.  Should be in upper case.\n-\n-\n                                            - 15 -\n-\n1\n-\n-\n           Input fields\n0             1.  If it is necessary to  pad input fields with some-\n                  thing other than null characters,  always pad with\n                  underscores.  (See Section 3.1 for more discussion\n                  of this standard).\n0             2.  Unused padding  characters should  not need  to be\n                  removed by the user (i.e.,  use the PAD keyword in\n                  the  )ATTR  section  of the  panel  to  pad  input\n                  fields).\n0             3.  Should  be displayed  in  a  high intensity  input\n                  field.\n0             4.  Should be  initialized to either a  previously en-\n                  tered value, or a default value, if one can be de-\n                  termined.\n0             5.  Limit the number of input  fields on a panel.  IBM\n                  studies show that  between 12 and 16  input fields\n                  per panel is optimal.\n0             6.  Input fields should line up vertically,  if at all\n                  possible.   This allows the  most effective use of\n                  the cursor positioning keys.\n0          Information\n0             1.  Used to display the possible values for the corre-\n                  sponding input field.\n0             2.  Should  be displayed  in  a  low intensity  output\n                  field.\n0             3.  Should be in upper and lower case.\n0             4.  Be consistent in the use of displayed values, i.e.\n                  either always use Y and N or YES and NO.\n0             5.  The recommended values for Yes/No fields are Y and\n                  N.\n-\n                                            - 16 -\n-\n1\n-\n-\n              6.  If there  are only  2 valid  entries for  an input\n                  field, list the entries separated by 'or',  i.  e.\n                  (Y or N) to be consistent with ISPF/PDF panels.\n0             7.  To list more  than two valid entries  for an input\n                  field,  separate the items by a comma and a blank.\n                  For example, ISPF/PDF Version 2 uses the following\n                  format on its 3.4 panel:\n                     (QUICK, SHORT or LONG)\n0          Directive Line\n0              See description in Panel Components section.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-                                           - 17 -\n-\n1\n-\n-\n           3.5   MULTIPLE COLUMN DATA ENTRY PANEL\n+                ________ ______ ____ _____ _____\n-          --------  TITLE FOR MULTIPLE COLUMN DATA ENTRY PANEL  -----------\n           COMMAND ===>\n0          Instructions\n0            Heading 1   Heading 2   Heading 3   Heading 4\n0            ---------   ---------   ---------   ---------\n             ---------   ---------   ---------   ---------\n             ---------   ---------   ---------   ---------\n             ---------   ---------   ---------   ---------\n-               Figure 3. SAMPLE MULTIPLE COLUMN DATA ENTRY PANEL\n-\n           Instructions (Optional)\n0             1.  Composed of one or more lines (beginning with line\n                  4 or 5)  containing information  about the type of\n                  input to be entered,  as  well as special instruc-\n                  tions for data entry on the panel.\n0             2.  Use only when necessary.\n0             3.  Should be in upper and lower case.\n0             4.  Should  be displayed  in  a  low intensity  output\n                  field.\n0          Columnar Headings\n0             1.  Should normally be left-justified.\n0             2.  Should  be displayed  in a  high intensity  output\n                  field.\n0             3.  Should be in upper and lower case.\n-\n                                            - 18 -\n-\n1\n-\n-\n           Input Fields\n0             1.  Should  be displayed  in  a  high intensity  input\n                  field.\n0             2.  Should be padded with underscores.\n0             3.  Should be organized  so that the user  enters data\n                  across a row instead of  down a column.   In other\n                  words, logical groupings of data (e.g., data items\n                  related to a single record) should be input across\n                  a row, not down a column.   The reason for this is\n                  that the  cursor can  be moved  across the  screen\n                  more easily than it can be moved down the screen.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0                                           - 19 -\n-\n1\n-\n-\n           3.6   SELECTION MENU\n+                _________ ____\n-           ----------------  TITLE FOR SELECTION MENU  --------------------\n            OPTION ===>\n0           Instructions\n0             1  OPTION 1  -  Brief description of option 1\n              2  OPTION 2  -  Brief description of option 2\n              3  OPTION 3  -  Brief description of option 3\n              4  OPTION 4  -  Brief description of option 4\n0             X  EXIT\n0           Directive Line\n0                        Figure 4. SAMPLE SELECTION MENU\n-\n           Instructions (Optional)\n0             1.  Should be used only when necessary.\n0             2.  Should be in upper and lower case.\n0             3.  Should be displayed in a low intensity field.\n0          Option Lines\n0             1.  Composed of three sections.\n0                 a) Option Code\n0                    i)    Should be numbers (preferred) or capital-\n                           ized letters.\n0                    ii)   Should be on separate lines.\n0                    iii)  Use Arabic numerals, not Roman numerals.\n-\n0                                           - 20 -\n-\n1\n-\n-\n                     iv)   Should be  displayed in a  high intensity\n                           field.\n0                    v)    Do not  use '.'  or ')'  with the  Option\n                           Code.\n0                          Example of  the CORRECT format of  an op-\n                           tion line:\n                              1  OPTION 1 - Description of option 1\n0                          Examples of INCORRECT formats  for an op-\n                           tion line:\n                              1) OPTION 1 - Description of option 1\n                              1. OPTION 1 - Description of option 1\n                              1 - OPTION 1  Description of option 1\n0                    vi)   Use 'X' for EXIT only.\n0                 b) Option Title\n0                    i)    Should be in upper case.\n0                 c) Option Description\n0                    i)    Should be worded as a statement, not as a\n                           question.\n0                    ii)   Should begin with a capital letter.\n0             2.  Align each of the three sections vertically.\n0             3.  Put the  options with  the highest  probability of\n                  being  chosen at  the top  of the  list to  reduce\n                  reading time.   If there is no obvious pattern for\n                  ordering options,  put them in alphabetical or nu-\n                  meric order.\n0             4.  If both alphabetic and numeric options are used on\n                  a menu,  list the numeric  options in order first,\n                  followed by the alphabetic options, in order.\n0             5.  When the X (EXIT)  option  is displayed,  place it\n                  near the bottom of the panel, distinctly separated\n                  from the rest of the options.\n0                                           - 21 -\n-\n1\n-\n-\n              6.  For those options which correspond to ISPF/PDF op-\n                  tions, use the same Option Codes and Option Titles\n                  as are used in ISPF/PDF.\n0          Directive Line\n0             1.  Selection menus generally do not require directive\n                  lines,  but they may be used to explain how to re-\n                  turn to a higher level selection menu.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                            - 22 -\n-\n1\n-\n-\n           3.7   TABLE DISPLAY PANEL\n+                _____ _______ _____\n-          --------------  TITLE FOR TABLE DISPLAY PANEL  ------------------\n           COMMAND ===>                                     SCROLL ===>\n0          Instructions\n0          Directive Line\n0                  COLUMN2    COLUMN3    COLUMN4    COLUMN5\n           SELECT  HEADING    HEADING    HEADING    HEADING\n           ______  ________   ________   ________   _________\n0                      Figure 5. SAMPLE TABLE DISPLAY PANEL\n-\n           Instructions\n0             1.  Consist of  one or more  lines which  instruct the\n                  user on the function of this panel.\n0             2.  Should include  a list of  the valid  select codes\n                  (line commands).\n0             3.  Should be in upper and lower case.\n0             4.  Should  be displayed  in  a  low intensity  output\n                  field.\n0          Directive Line\n0             1.  Instructs the user  on how to exit  from the table\n                  display.\n0          Columnar Headings\n0             1.  Should be left-justified with respect to the input\n                  fields beneath them.\n0             2.  Should be displayed in a high intensity field.\n-\n                                            - 23 -\n-\n1\n-\n-\n           Selection Field\n0             1.  Should be the left-most field for ease of use.\n0             2.  Should  be displayed  in  a  high intensity  input\n                  field.\n0             3.  For functions that have ISPF/PDF equivalents,  use\n                  the same code, e.g.\n                          B - Browse\n                          D - Delete\n                          E - Edit\n                          P - Print\n                          S - Select\n0             4.  If  selection  codes  differ  from  their  use  in\n                  ISPF/PDF, then the instructions should state this.\n0          Input Fields\n0             1.  Should be  arranged in a columnar  fashion beneath\n                  their respective headings.\n0             2.  Most  should  be displayed  using  low  intensity;\n                  highlight only the most important fields.\n0             3.  Should be padded with underscores.\n0             4.  Each row  should constitute a logical  grouping of\n                  data.\n0             5.  Align numeric  data to the  right when a  table is\n                  displayed by storing the values  in the table with\n                  the correct number of leading blanks.\n-\n-\n-\n-                                           - 24 -\n-\n1\n-\n-\n           3.8   TUTORIAL TEXT PANEL\n+                ________ ____ _____\n-           TUTORIAL ------  TITLE FOR TUTORIAL TEXT PANEL  ------- TUTORIAL\n            COMMAND ===>\n0           Tutorial Text\n-           Directive Line\n0                      Figure 6. SAMPLE TUTORIAL TEXT PANEL\n-\n           Title Line\n0             1.  The word  TUTORIAL should appear  on both  ends of\n                  the line.\n0          Tutorial Text\n0             1.  Should be displayed using low intensity, and high-\n                  lighting only important information.\n0             2.  When explaining a dialog input field,  display the\n                  field on the  tutorial panel as it  appears on the\n                  dialog panel (except  that it should be  a text or\n                  output field).\n0          Directive Line (optional)\n0             1.  In tutorials, the directive line is only used on a\n                  panel which continues to another panel.   The cor-\n                  rect format of the directive line is:  '(Continued\n                  on next page)'.\n0             2.  Should  be displayed  in a  high intensity  output\n                  field.\n0             3.  Should be  consistently placed within the  body of\n                  the panel (preferably centered on line 23).\n-\n                                            - 25 -\n-\n1\n-\n-\n           General\n0             1.  Set &ZUP on every tutorial panel.  This avoids the\n                  confusion of determining when  &ZUP is really nec-\n                  essary.\n0             2.  Wherever necessary, use continuation tutorial pan-\n                  els to explain a dialog panel.   Using more panels\n                  with less  text per panel  is more  effective than\n                  using fewer panels with more text per panel.\n0             3.  All dialogs should have an overview topic included\n                  in their tutorial.  An overview is useful for ori-\n                  enting users who are unfamiliar with the dialog.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0                                           - 26 -\n-\n1\n-\n-\n           3.9   TUTORIAL SELECTION MENU\n+                ________ _________ ____\n-           TUTORIAL ----  TITLE FOR TUTORIAL SELECTION MENU  ----- TUTORIAL\n            OPTION ===>\n0           Tutorial Text\n0           Instruction Line\n                 1 - Brief Description of Option 1\n                 2 - Brief Description of Option 2\n-                    Figure 7. SAMPLE TUTORIAL SELECTION MENU\n-\n           Title Line\n0             1.  The word  TUTORIAL should appear  on both  ends of\n                  the line.\n0          Tutorial Text\n0             1.  Should be displayed using low intensity, and high-\n                  lighting only important information.\n0             2.  When explaining a dialog input field,  display the\n                  field on the  tutorial panel as it  appears on the\n                  dialog panel (except  that it should be  a text or\n                  output field).\n0          Instruction Line\n0             1.  Should  be displayed  in  a  low intensity  output\n                  field.\n0             2.  Generally reads:  \"The following  topics are pres-\n                  ented in sequence,  or may be selected by number:\"\n                  or \"The following topics are presented only if se-\n                  lected by number:\".\n-\n0                                           - 27 -\n-\n1\n-\n-\n           Option Lines\n0             1.  Composed of two sections.\n0                 a) Option Code\n0                    i)    Should be numbers (preferred) or letters.\n0                    ii)   Should be  displayed in a  high intensity\n                           output field.\n0                    iii)  When a  tutorial option corresponds  to a\n                           selection menu  option,  the  same option\n                           code should be used for both.\n0                    iv)   If the characters B, S,  T,  U,  or I are\n                           used as  selection options on  a tutorial\n                           panel,  the user will not  be able to use\n                           them  to specifiy  the tutorial  commands\n                           BACK, SKIP, TOP, UP, and INDEX.\n0                 b) Option Description\n0                    i)    Describes  the specific  area covered  by\n                           the tutorial option.\n0             2.  Align the option codes and the option descriptions\n                  vertically.\n0             3.  Put the  options with  the highest  probability of\n                  being  chosen at  the top  of the  list to  reduce\n                  reading time.   Match the order  of the options to\n                  those found  on the corresponding  Selection Menu.\n                  If there is still no  obvious pattern for ordering\n                  options, put them in alphabetical order.\n0          General\n0             1.  Set &ZUP on every tutorial panel.  This avoids the\n                  confusion of determining when  &ZUP is really nec-\n                  essary.\n-\n0                                           - 28 -\n-\n1\n-\n-\n              2.  Use a tutorial hierarchy that  has a logical order\n                  (i.e. follows the hierarchy of the dialog).   Ide-\n                  ally,  there should  be a minimum of  one tutorial\n                  panel for every dialog panel.\n0             3.  All dialogs  should have  an overview  topic.   An\n                  overview is useful for orienting users who are un-\n                  familiar with the dialog.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0                                           - 29 -\n-\n1\n-\n-\n           3.10   CONFIRMATION PANEL\n+                 ____________ _____\n-           ---------------  TITLE FOR CONFIRMATION PANEL  ----------------\n            COMMAND ===>\n0           Text lines\n-           Directive lines\n-                      Figure 8. SAMPLE CONFIRMATION PANEL\n-\n           Text lines\n0             1.  Should  be a  brief explanation  of the  situation\n                  which requires confirmation.\n0             2.  Should be displayed using low intensity, and high-\n                  lighting only important information.\n0          Directive Line\n0             See the Panel Components section for a description.\n-\n-\n-\n-\n-\n-\n                                            - 30 -\n-\n1\n-\n-\n           3.11   INFORMATORY PANEL\n+                 ___________ _____\n-           ----------------  TITLE FOR INFORMATORY PANEL  -----------------\n            COMMAND ===>\n0           Text lines\n-                       Figure 9. SAMPLE INFORMATORY PANEL\n-\n           Text lines\n0             1.  Should be  a brief  explanation of  the processing\n                  status.\n0             2.  Should be displayed using low intensity, and high-\n                  lighting only important information.\n0          General\n0             When a dialog  function executes for a  long time without\n              any user interaction (e.g.  when searching a large file),\n              an INFORMATORY  panel may be used  to inform the  user of\n              the status  of the  processing.   The  panel itself  is a\n              standard panel containing only  text fields.   Before the\n              panel is displayed,  the CONTROL  service is invoked with\n              the DISPLAY and LOCK parameters.   The panel is displayed\n              with the keyboard locked and the function continues proc-\n              essing without waiting for any user response.\n0             Although the user cannot respond to the panel (other than\n              by using the  \"break\" key),  the dialog  has informed the\n              user of its status.   An Informatory panel can be used to\n              give the  user an  idea of how  much processing  has been\n              done and how soon it will be finished.\n-\n-\n0                                           - 31 -\n-\n1\n-\n-\n           3.12   NON-DISPLAY PANEL\n+                 ___________ _____\n0             Non-Display panels are generally used when the panel lan-\n              guage provides a function needed in a CLIST, EXEC or pro-\n              gram dialog function.  For example, the VER statement can\n              be used to  verify that a variable contains  a valid data\n              set name instead of using complicated program code.\n0             Non-Display panels are processed  using the DISPLAY serv-\n              ice but are not displayed to  the user.   Before the DIS-\n              PLAY service is invoked,  the  CONTROL service is invoked\n              with the NONDISPL and the ENTER or END parameters.   This\n              causes the  panel processing  to be  performed as  if the\n              user had pressed the ENTER or  END keys.   When the ENTER\n              parameter is specified,  the panel will be displayed with\n              a message if .MSG is set  by panel processing.   When the\n              END parameter is  specified,  the panel is  not displayed\n              even if .MSG is set by panel processing.\n0             There are two approaches to  using non-display panels for\n              the purpose  of using the  panel language  VER statement.\n              The first  approach causes  the non-display  panel to  be\n              displayed (with the appropriate error message) if a vari-\n              able does not  pass a VER test.   The  CONTROL service is\n              invoked with the NONDISPL and ENTER parameters.   In this\n              case, the non-display panel should comply with all of the\n              general panel  standards because the  panel will  be dis-\n              played to the  user if a verification  fails.   The )BODY\n              section of the  panel should use the  standard format for\n              an Informatory type panel.\n0             The  second approach  does  not  display the  non-display\n              panel even if a variable fails  a VER test.   The CONTROL\n              service is invoked with the  NONDISPL and END parameters.\n              In the panel,  the value of .MSG should be examined after\n              the VER statement.   If .MSG  is nonblank,  then a dialog\n              variable should be set to the  value of .MSG.   When con-\n              trol is returned to the dialog function, the function ex-\n              amines the value  of the dialog variable  to determine if\n              an error occurred.   Following are excerpts from a sample\n              non-display panel and  a CLIST dialog function  which use\n              this approach.\n-\n                                            - 32 -\n-\n1\n-\n-\n                  In the panel processing section:\n0                     )PROC\n                         ...\n                         VER(&NUM,NUM)\n                         IF (.MSG \u00ac= &Z)\n                             &MESSAGE = .MSG\n                         ...\n                      )END\n0                 In the CLIST dialog function:\n0                     00120002     ISPEXEC CONTROL NONDISPL END\n                      00130000     ISPEXEC DISPLAY PANEL(NONDISP)\n                      00140000     IF &MESSAGE \u00ac= &STR()   +\n                      00150001         THEN ISPEXEC SETMSG MSG(&MESSAGE)\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-                                           - 33 -\n-\n1\n-\n-\n                                   4.  MESSAGES\n0          General guidelines:\n0             1.  Use vocabulary which is familiar to the user.\n0             2.  Use standard punctuation.\n0             3.  Messages should  have a consistent  format.  Place\n                  any user action  first in the long  message,  fol-\n                  lowed by an explanation of the error or the conse-\n                  quences of the action.\n0             4.  Use positive statements wherever possible, e.g.\n0                      \"Select an option from the list below\"\n                               instead of\n                       \"Option selected is invalid\".\n0             5.  Use active rather than passive statements, e.g.\n0                      \"Enter the name of the data set\"\n                               instead of\n                       \"Data set name must be entered\"\n0             6.  There is a  good article on designing  messages by\n                  M.  Dean,  entitled \"How a Computer Should Talk to\n                  People\"  which was  published in  the IBM  Systems\n                  Journal (see the bibliography).\n0             7.  Do not use CLIST,  EXEC  or program output facili-\n                  ties to display messages.   All messages should be\n                  displayed using the ISPF message facility.\n0          Specific suggestions:\n0             1.  Always use  the default  message areas  to display\n                  ISPF messages.\n0             2.  Messages  should  not  overlay  any  panel  fields\n                  (other than text  fields used to  display time-of-\n                  day, date or userid).\n-\n                                            - 34 -\n-\n1\n-\n-\n              3.  Each message should have both short and long text.\n0             4.  Always use .ALARM=YES with error messages.\n0             5.  Informatory  messages  should   be  used  wherever\n                  needed.\n0             6.  Put as much  information as possible in  the short\n                  message text.\n0             7.  The .HELP parameter should  be used whenever there\n                  is a specific tutorial panel  which relates to the\n                  message.\n0             8.  Position the cursor  to the field in  error when a\n                  message is displayed;  this helps the user to find\n                  and correct the error.\n0             9.  Use the value from the field  in error in the long\n                  message to increase the informational content (the\n                  same value should  be displayed in the  short mes-\n                  sage, if possible).\n0             10. Use dialog variables in messages  to make the mes-\n                  sage more meaningful.   When possible,  the dialog\n                  variable should be used in both the short and long\n                  message.   For example, an input dialog could dis-\n                  play the record number that  was processed as part\n                  of the \"record processed\" short and long messages.\n0             11. If processing efficiency is an important consider-\n                  ation,  guidelines  may be  established concerning\n                  the size of message members.  Message members will\n                  be accessed most efficiently if  the total size of\n                  the member is kept under the blocksize of the data\n                  set.  For example, if the blocksize of the library\n                  is 6160 (the recommended  blocksize),  then a mes-\n                  sage member of  77 lines (77 x 80 =  6160)  is the\n                  maximum that will fit in one block.\n-\n-\n                                            - 35 -\n-\n1\n-\n-\n                                    5.  TABLES\n0          Tables should only  be used for one-to-one  mappings.   ISPF\n           tables were designed to provide a way to store,  process and\n           display a basic array structure.    Attempts to use ISPF ta-\n           bles as  a sophisticated database  will result  in extremely\n           complex (and slow) table processing logic.  Do not use a ta-\n           ble row as a linked list.\n-          Specific suggestions:\n0             1.  Do not  redefine the scroll  PF keys  to different\n                  functions.  User confidence is undermined when the\n                  meanings of the PF keys  change from one dialog to\n                  another.\n0             2.  If possible,  do not use  extension variables in a\n                  table.    The presence of extension variables will\n                  add complexity to table processing which will make\n                  the dialog  harder to maintain.    Using extension\n                  variables in permanent tables  will complicate the\n                  logic of every dialog which accesses the table.\n0                 Extension variables may be  necessary for display-\n                  ing error  or informatory messages within  a table\n                  row.\n0             3.  Display informative messages  during user process-\n                  ing of the table.   When the message is related to\n                  a function command, use the ISPF message facility.\n                  When the message  is related to a  particular row,\n                  display the message in a  column of the table dis-\n                  play  which has  been reserved  for that  purpose.\n                  For  permanent tables,   this can  be best  accom-\n                  plished by using an  extension variable to display\n                  the message.   For temporary tables, define a mes-\n                  sage field in each row  when the table is created,\n                  to avoid the use of extension variables.\n0             4.  The first input field in  the table display should\n                  be  the leftmost  field.   To  be consistent  with\n                  ISPF/PDF table displays,  this  field should start\n                  in column 1.\n0                                           - 36 -\n-\n1\n-\n-\n              5.  Emulate  PDF processing  of tables  as closely  as\n                  possible (for example,  member  selection lists in\n                  PDF option 3.1).\n0             6.  A  model for  Table Display  processing should  be\n                  made available.  The example and discussion of ta-\n                  ble display processing provided in the Dialog Man-\n                  agement Services  manual will  not generate  main-\n                  tainable and consistent code.   A well-coded model\n                  should help encourage correct and consistent table\n                  processing across  dialogs developed  by different\n                  groups.  See Appendix A for a sample model.\n0             7.  The processing  of the command  field can  be done\n                  either before or after processing the rows.  There\n                  are two advantages to processing the command field\n                  after processing the rows:\n0                 a) Installation-developed dialogs will be consist-\n                     ent with ISPF/PDF dialogs.\n0                 b) A set of row modifications  can be made and one\n                     \"global\" command can be entered  as a final act\n                     of panel processing.\n0                 The advantage of processing  the command field before\n                  the rows are processed, is that it allows the command\n                  to  affect the  action to  be taken  for all  entered\n                  lines.\n0                 Because consistent behavior is so important to dialog\n                  users,  it is recommended that command field process-\n                  ing be done after row processing,  in accordance with\n                  ISPF/PDF table  processing.   However,   if a  CANCEL\n                  function is  provided by  the dialog,   it should  be\n                  processed prior to all row processing (i. e.  no rows\n                  are processed).\n0             8.  When designing a dialog  which displays tables,  a\n                  decision must be made about  the processing of the\n                  END and RETURN commands.  When the user enters END\n                  or RETURN,  there may  be row modifications and/or\n                  application commands which have not yet been proc-\n-                                           - 37 -\n-\n1\n-\n-\n                  essed.  If row processing is NOT done after an END\n                  or RETURN  command,  the user  will be  allowed to\n                  exit the  table display without  correcting errors\n                  which have previously been  detected.   If row and\n                  command field  processing IS done  before allowing\n                  the END  or RETURN to  take effect,  a  CANCEL (or\n                  equivalent)  command  should be provided  to allow\n                  the user a chance to abort the operation.\n0                 The example of table processing  given in the Dia-\n                  log  Management  Services manual  processes  table\n                  rows, but not the command field, when the user en-\n                  ters the END or RETURN command.   The sample model\n                  which appears in Appendix A follows this approach.\n0             9.  In general,  production dialogs should not need to\n                  include code to handle  table service return codes\n                  greater than 8.    Two exceptions to this  are the\n                  TBOPEN and the TBQUERY services.  The return codes\n                  from these services should be checked to determine\n                  whether a table is open.\n0             10. Any variable  which is specified  in a  MODEL line\n                  but which is not part of  the actual table (as de-\n                  fined using the TBCREATE service)  must be cleared\n                  before each  re-display of the table.    This pre-\n                  vents propagation of the value  of the variable in\n                  one row of the table through  each row of the dis-\n                  played table.    (This type  of variable  is often\n                  used to display a SELECT  CODE field for line com-\n                  mands).\n0             11. The enqueue mechanism provided by ISPF is intended\n                  to prevent  concurrent updating of the  same table\n                  by multiple users.   The mechanism is based on the\n                  assumption that  all users updating a  given table\n                  will have  the same  first library  definition for\n                  ISPTLIB.   Dialog  developers should  be aware  of\n                  this when designing dialogs which  will be used by\n                  concurrent users to update a table.\n-\n-                                           - 38 -\n-\n1\n-\n-\n                                6.  FILE TAILORING\n0             1.  Some current uses are the generation of:\n0                 JCL, Control Cards,  customized CLIST or EXEC com-\n                  mand lists, reports,  SCRIPT input files,  program\n                  skeletons, and correspondence.\n0             2.  There is  a perceptible amount  of wait  time when\n                  file tailoring is performed online; when feasible,\n                  perform file tailoring in batch mode.\n0             3.  Skeletons should be commented,   just as programs,\n                  CLISTs, EXECs and panels should be commented.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0                                           - 39 -\n-\n1\n-\n-\n                                    7.  MODELS\n0             1.  Dialog developers  should be  strongly discouraged\n                  from making their own copy of the model menus (IS-\n                  REMCMD, ISREMPNL, etc.).   If they do create their\n                  own copies of these menus,  they will not have ac-\n                  cess to  changes to these  menus made in  new ver-\n                  sions of ISPF/PDF or changes made by the installa-\n                  tion.     Each  installation   should  provide   a\n                  mechanism for users and/or groups to add their own\n                  models.  This can be done by adding U (User) and G\n                  (Group) options to the model menus accessed by ev-\n                  eryone in the installation.  Following are two ap-\n                  proaches to  adding models.   The first  method is\n                  recommended  because it  does  not complicate  the\n                  MODEL command used to  imbed the IBM-supplied mod-\n                  els.  Sample model panels to implement each method\n                  are provided in Appendix B.\n0                 a) Method 1:\n0                    Place User and Group options  on the Class menu\n                     and User,  Group,  and  Installation options on\n                     the model options menu for each class.\n0                    Advantages - Standard ISPF  models are accessi-\n                        ble  at the  first  level  of the  hierarchy\n                        (e.g.  the TBCREATE model can be imbedded in\n                        a CLIST using the command 'MODEL TBCREATE').\n0                    Disadvantages  -  User models  are  placed  one\n                        level lower  in the  hierarchy than  the IBM\n                        models.\n0                 b) Method 2:\n0                    Insert a menu  between the Class menu  and each\n                     of the  option menus.    On the  inserted menu,\n                     place options  for ISPF services  and Installa-\n                     tion, Group and User options.\n0                    Advantages - All model options  are at the same\n                        level in the hierarchy;  the model hierarchy\n                        can be organized more logically.\n0                                           - 40 -\n-\n1\n-\n-\n                     Disadvantages  - The  command used  to imbed  a\n                        model into  a data  set (without  displaying\n                        the  model  menus)  requires  an  additional\n                        qualifier  to  identify  which  section  the\n                        model belongs to (ISPF, Installation,  Group\n                        or User).  For example: the command required\n                        to imbed the TBCREATE  model would be  MODEL\n                        1.TBCREATE if IBM-supplied  ISPF models were\n                        option 1.   Also,  if users are not familiar\n                        with which models are  IBM-supplied ISPF and\n                        which are  'home-grown',  they  may have  to\n                        search one  section before  discovering that\n                        it is contained in  the other.   This search\n                        may be frustrating because  an 'END' command\n                        on  any  model menu  terminates  the  entire\n                        MODEL command.\n0             2.  Within the  skeleton member,  NOTEs should  be in-\n                  cluded to explain any options or parameters avail-\n                  able to the user or areas which need to be custom-\n                  ized by  the user.    The text  within NOTE  lines\n                  should be in mixed upper and lower case to improve\n                  readablility.\n0             3.  All models which are longer  than ten lines should\n                  begin with  a NOTE  that explains  the use  of the\n                  model.\n-\n-\n-\n-\n-\n-\n                                            - 41 -\n-\n1\n-\n-\n                 8.  USING DIALOG MANAGEMENT SERVICES IN PROGRAMS\n0             1.  Specifying the lengths to VCOPY and VREPLACE:\n0                 Use one  array for each set  of data to  be moved.\n                  Before the service is invoked,  store the array in\n                  a \"temporary\" array  and use this as  the argument\n                  to the service.   This technique  has been used in\n                  ISPF dialog  functions which display  many panels.\n                  VCOPY and VREPLACE  are used to move  data between\n                  the function pool and program variables.\n0                 Example (using PL/I):\n0                    DCL TMP_ARRAY(4) FIXED BIN(31),\n                         LENGTHS1(4)  FIXED BIN(31) INIT(4,4,2,0);\n                     ...\n                     initialize BUFFER with data to be displayed\n                     ...\n                     TMP_ARRAY = LENGTHS1;\n                     CALL ISPLINK('VREPLACE','(name list)',\n                                  TMP_ARRAY,BUFFER);\n                     ...\n                     display a panel to allow user to modify data\n                     ...\n                     TMP_ARRAY = LENGTHS1;\n                     CALL ISPLINK('VCOPY   ', '(name list)',\n                                  TMP_ARRAY, BUFFER, 'MOVE');\n                     ...\n                     process data entered on panel\n                     ...\n0                 This method has two advantages:  the length array can\n                  be initialized in  one line of code  and the original\n                  length  values are  not written  over  by the  dialog\n                  service.\n0             2.  Saving the return code from an ISPF service:\n0                 Immediately after each dialog  service call,  save\n                  the return code value in a program variable.  This\n                  is necessary to:\n-\n                                            - 42 -\n-\n1\n-\n-\n                  a) prevent the  return code value from  being lost\n                     (overwritten by another call).\n0                 b) allow the  return code to  be printed  when the\n                     program is being debugged.\n0                 c) allow  the return  code to  be  displayed in  a\n                     panel or ISPF message (if the variable has been\n                     VDEFINEd).\n0             3.  Using CLIST or EXEC in dialog development:\n0                 a) Develop and debug the  display processing using\n                     a CLIST or EXEC first.\n0                    It is generally easier to use the CLIST or EXEC\n                     language to develop and debug dialog functions.\n                     During  development  and design  review,   many\n                     changes are made to  dialog functions.   Dialog\n                     functions coded in CLIST or  EXEC are much eas-\n                     ier to  change than  functions which  are coded\n                     using languages which must be compiled.\n0                 b) Convert the  CLIST or EXEC dialog  functions to\n                     programs.\n0                    When the design of the dialog function has sta-\n                     bilized, the function may be coded using a pro-\n                     gramming language for more efficient execution,\n                     or for the arithmetic,   string-handling or I/O\n                     facilities provided by a programming language.\n0                 c) Finish all further processing in the program.\n0                    Special care  should be  taken with  regards to\n                     CLIST/EXEC function  variables which  were used\n                     in panels, messages, or skeletons.  The program\n                     does not  share any variables with  ISPF unless\n                     specifically stated in a VDEFINE.\n-\n-\n                                            - 43 -\n-\n1\n-\n-\n              4.  Using models:\n0                 Use the  available models for invoking  the dialog\n                  services.  Develop additional  models for declara-\n                  tions of ISPLINK (ISPLNK)  and any standard varia-\n                  bles or modules used by ISPF dialog programs.\n0             5.  LOADing versus LINKing the ISPLINK module:\n0                 Programs which use ISPF services  may load the IS-\n                  PLINK module or the program may be linkedited with\n                  ISPLINK.    A language-dependent  facility may  be\n                  used to load the ISPLINK  program at the beginning\n                  of each program-based dialog and  delete it at the\n                  end.   This dynamic call of ISPLINK will allow for\n                  the installation  of new versions of  ISPF without\n                  relinking all of the programs  that use ISPF serv-\n                  ices in the installation.\n0                 For example, in a PL/I program,  the FETCH and RE-\n                  LEASE statements could be used:\n0                              FETCH...\n                               ...\n                               CALL ISPLINK...\n                               ...\n                               CALL ISPLINK...\n                               ...\n                               CALL ISPLINK...\n                               ...\n                               RELEASE...\n0                 The  disadvantages of  using  a  dynamic call  are\n                  higher overhead and greater  difficulty in problem\n                  determination.   Also, excessive memory usage, I/O\n                  overhead and elapsed time may be caused by failure\n                  to RELEASE the module due  to program logic errors\n                  or ABENDs.\n0                 If a dynamic call facility is not used,  or is not\n                  available, then the ISPLINK module must be linked-\n                  ited in with the programs that call it.   New ver-\n                  sions of ISPF may require  that all programs which\n-                                           - 44 -\n-\n1\n-\n-\n                  are linkedited with ISPLINK be linked with the new\n                  version of the module.\n0             6.  Using the VDEFINE service:\n0                 a) Use the same variable name  in both the program\n                     and on the ISPF panel.    This is not required;\n                     however,  it will make  the application program\n                     easier to debug and maintain.\n0                 b) When the variable being VDEFINEd corresponds to\n                     a panel input  field,  make sure the  length of\n                     the panel input field is the same as the length\n                     of the variable in the application program.  If\n                     the length of the program variable is less than\n                     the  length of  the  corresponding panel  input\n                     field, a dialog error will result when the user\n                     enters  a value  whose length  is greater  than\n                     that of the program variable.\n0                 c) Code an  internal subroutine  or perform  para-\n                     graph that  contains VDEFINE  calls for  all of\n                     the variables that will be  VDEFINEd by the ap-\n                     plication program.  This section of code should\n                     parallel a corresponding  VDELETE subroutine or\n                     perform paragraph (which should  be executed at\n                     the end of the program).\n0                 d) The following  subroutine may  be used  by PL/I\n                     programs to  reduce the  margin for  error when\n                     calling the VDEFINE function  to define charac-\n                     ter data.  This subroutine reduces the complex-\n                     ity of the call and  should reduce testing time\n                     and errors.   The subroutine  cannot be used to\n                     define variables  for numeric  data or  numeric\n                     picture data.\n0                    /* start of subroutine */\n                     VDEFSUB: PROC(NAME,VARIABLE) OPTIONS(REENTRANT) REORDER;\n                         DECLARE\n                             NAME     CHAR(*),\n                             VARIABLE CHAR(*),\n                             BINARY   BUILTIN,\n                             LENGTH   BUILTIN,\n0                                           - 45 -\n-\n1\n-\n-\n                             ISPLINK  ENTRY(CHAR(8),\n                                            CHAR(8),\n                                            CHAR(*),\n                                            CHAR(*),\n                                            FIXED BIN(31))\n                                      OPTIONS(ASM INTER RETCODE);\n                         CALL ISPLINK('VDEFINE ',NAME,VARIABLE,\n                              'CHAR ',BINARY( LENGTH(VARIABLE), 31));\n                     END VDEFSUB;\n                     /* end of subroutine */\n0                    When using  this subroutine,  the call  used to\n                     VDEFINE a variable would be changed from:\n0                    CALL ISPLINK('VDEFINE ','VARX    ',\n                                  VARX,'CHAR ',BINARY(20,15) );\n                           to\n                     CALL VDEFSUB('VARX',VARX);\n0             7.  Using the VDELETE service:\n0                 a) Code an  internal subroutine  or perform  para-\n                     graph that  contains VDELETE  calls for  all of\n                     the variables  that have  been VDEFINEd  by the\n                     application  program.    This section  of  code\n                     should  parallel  a corresponding  VDEFINE  su-\n                     broutine or perform paragraph.\n0                 b) The following  subroutine may  be used  by PL/I\n                     programs to  reduce the  margin for  error when\n                     calling the VDELETE function.    Using this su-\n                     broutine reduces the complexity of the call and\n                     should reduce testing time and errors.\n0                    /* start of subroutine */\n                     VDELSUB: PROC(NAME) OPTIONS(REENTRANT) REORDER;\n                         DECLARE\n                             NAME     CHAR(*),\n                             ISPLINK  ENTRY(CHAR(8),\n                                            CHAR(8))\n                                      OPTIONS(ASM INTER RETCODE);\n                         CALL ISPLINK('VDELETE ',NAME );\n                     END VDELSUB;\n                     /* end of subroutine */\n0                                           - 46 -\n-\n1\n-\n-\n                     When using this subroutine,   the call would be\n                     changed from\n0                    CALL ISPLINK('VDELETE ','VARX    ');\n                             to\n                     CALL VDELSUB('VARX');\n0             8.  Using the ISPEXEC call format:\n0                 Use the  call format of  ISPEXEC in  program func-\n                  tions which are being  converted from CLISTs (this\n                  facility was made available in ISPF V.  2).   This\n                  should decrease  the effort required to  convert a\n                  dialog function  from CLIST or  EXEC to  a progam.\n                  Also,  the ISPEXEC format is more readable because\n                  of the use of keyword parameters.\n0                 Example of ISPEXEC format in a CLIST:\n                      ISPEXEC DISPLAY PANELX MSG(MSG001)\n0                 Example of ISPLINK call format (in a PL/I program):\n                      CALL ISPLINK ('DISPLAY', 'PANELX', 'MSG001')\n0                 Example of ISPEXEC call format (in a PL/I program):\n                       ...set BUFFER_LNGTH equal to 26...\n                      CALL ISPEXEC (BUFFER_LNGTH,'DISPLAY PANELX MSG(MSG001)');\n-\n-\n-\n-\n-\n-\n0                                           - 47 -\n-\n1\n-\n-\n             9.  USER CUSTOMIZATION OF SYSTEM-WIDE DIALOG COMPONENTS\n0             Dialog developers should be strongly discouraged from ov-\n              erriding system-wide dialog components with their custom-\n              ized version of  these components.   When ISPF  users are\n              allowed to override system-wide components,  two problems\n              occur:\n0                1.  System-wide components are  inadvertently over-\n                     ridden by  users,  resulting  in dialog  errors\n                     which can be difficult to diagnose.\n0                2.  When modifications  are made  to dialog  compo-\n                     nents in the system-wide  libraries,  the user-\n                     customized  components  prevent the  user  from\n                     seeing new or enhanced features.  The most com-\n                     mon examples  of this are  user-customized Pri-\n                     mary Option menus.   A user overriding the Pri-\n                     mary  Option  menu  is unaware  of  changes  or\n                     additions which have  been made in the  menu in\n                     the system-wide libraries.\n0             A program which front-ends the ISPF command processor can\n              be used  to enforce a  concatenation sequence  which your\n              installation has defined as standard.   The following al-\n              gorithm describes  the program  for the  TSO environment.\n              (Sample code for the program is given in Appendix C).\n0                1.  GETMAIN a save area for  system services to use\n                     while  this  program  is  executing.    Perform\n                     standard chaining of the save areas.\n0                2.  Verify that the user is in TSO (non-JOB)  mode.\n                     Do not  enforce concatenations  for batch  ISPF\n                     sessions.\n0                3.  Find the TIOT for the TSO User.\n0                4.  For each DD entry in the TIOT:\n0                    a) Search the table of ISPF ddnames (this table\n                        has  been initialized  in  the program  data\n                        area).   Each entry in the table contains an\n-                                           - 48 -\n-\n1\n-\n-\n                        ISPF ddname  and the  name of  the data  set\n                        which must be first in the concatenation ac-\n                        cording to installation standards.\n0                    b) If the ddname  from the TIOT entry  is found\n                        in the  table,  compare  the first  data set\n                        name in the concatenation (in the JFCB) with\n                        the data set name in the table entry.\n0                    c) If the data set names do not match,  write a\n                        message to the  user and set the  error flag\n                        to indicate that ISPF should not be invoked.\n0                5.  FREEMAIN the save area.\n0                6.  Check the error flag.  If it has been set,  re-\n                     turn to the  caller.   If it has  not been set,\n                     load up the caller's  registers,  get the entry\n                     point of the  ISPF command processor in  REG 15\n                     (GPR15) and go to the processor.\n-\n-\n-\n-\n-\n-\n-\n-\n0                                           - 49 -\n-\n1\n-\n-\n                 10.  CONCATENATION SEQUENCES FOR ISPF LIBRARIES\n-\n0          10.1   GENERAL\n+                 _______\n0          A standard concatenation sequence  for ISPF libraries should\n           be established by each installation.    For purposes of this\n           discussion, we have identified four categories of libraries:\n0             1.  IBM-supplied ISPF and/or ISPF/PDF libraries\n0             2.  System  wide applications  (Installation-developed\n                  and Vendor)\n0             3.  Group  applications   (Installation-developed  and\n                  Vendor)\n0             4.  User applications (Installation-developed and Ven-\n                  dor).\n0          In each category,  there are two possible types of libraries\n           -- installation developed and vendor purchased.   Vendor li-\n           braries are often part of the system-wide category,  but may\n           also exist in the group and  user categories for the follow-\n           ing business reasons:\n0             1.  Only one group  needs access to a  particular ven-\n                  dor-supplied application.\n0             2.  One group  has purchased  its own  vendor-supplied\n                  application and does not want  anyone else to have\n                  access to it.\n0             3.  One group has purchased  a proprietary application\n                  and is restricted by the licensing agreement to be\n                  the only users of the application.\n-\n-\n0                                           - 50 -\n-\n1\n-\n-\n           10.2   SOME POSSIBLE CONCATENATION SEQUENCES\n+                 ____ ________ _____________ _________\n0          Following  is a  list  of  some possible  concatenation  se-\n           quences.  The relative advantages and disadvantages for each\n           are given.\n-          Concatenation Sequence 1\n+          _____________ ________ _\n0             1.  IBM-supplied ISPF and/or ISPF/PDF libraries\n0             2.  System wide applications\n0             3.  Group applications\n0             4.  User applications\n0             Advantages:\n0             1.  SMP can be used to keep track of all modifications\n                  to IBM libraries.\n0             2.  Only  one  copy  of  each  IBM-supplied  ISPF  and\n                  ISPF/PDF component exists.\n0             3.  Dialog  developers  cannot override  ISPF/PDF  and\n                  system-wide components.\n0             Disadvantages:\n0             1.  The ISPF  maintenance staff must be  familiar with\n                  SMP.\n0             2.  Making installation-modifications  to IBM-supplied\n                  ISPF and ISPF/PDF libraries makes the installation\n                  of a new version of ISPF a little more difficult.\n0          Concatenation Sequence 2\n+          _____________ ________ _\n0             1.  System wide applications\n0             2.  IBM-supplied ISPF and/or ISPF/PDF libraries\n-\n                                            - 51 -\n-\n1\n-\n-\n              3.  Group applications\n0             4.  User applications\n0             Advantages:\n0             1.  ISPF maintenance  staff need not be  familiar with\n                  SMP.\n0             2.  There  are  no  mods   to  IBM-supplied  ISPF  and\n                  ISPF/PDF libraries.\n0             3.  Dialog  developers  cannot override  ISPF/PDF  and\n                  system-wide components.\n0             Disadvantages:\n0             1.  More than one  copy of each IBM-supplied  ISPF and\n                  ISPF/PDF component may  exist,  making maintenance\n                  difficult.\n0          Concatenation Sequence 3\n+          _____________ ________ _\n0             1.  System wide applications\n0             2.  Group applications\n0             3.  IBM-supplied ISPF and/or ISPF/PDF libraries\n0             4.  User applications\n0             Advantages:\n0             1.  ISPF maintenance  staff need not be  familiar with\n                  SMP.\n0             2.  There  are  no  mods   to  IBM-supplied  ISPF  and\n                  ISPF/PDF libraries.\n0             3.  Groups  can customize  IBM-supplied  ISPF to  meet\n                  their specific needs.\n-\n0                                           - 52 -\n-\n1\n-\n-\n           Disadvantages:\n0             1.  User errors may occur  when an IBM-supplied compo-\n                  nent is inadvertently overridden. These errors can\n                  be difficult to diagnose.\n0             2.  More than one  copy of each IBM-supplied  ISPF and\n                  ISPF/PDF component may  exist,  making maintenance\n                  difficult.\n0          Concatenation Sequence 4\n+          _____________ ________ _\n0             1.  System wide applications\n0             2.  Group applications\n0             3.  User applications\n0             4.  IBM-supplied ISPF and/or ISPF/PDF libraries.\n0             Advantages:\n0             1.  Groups and individual users can customize IBM-sup-\n                  plied ISPF to meet their specific needs.\n0             Disadvantages:\n0             1.  Encourages lack of consistency  throughout the in-\n                  stallation.\n0             2.  User errors may occur  when an IBM-supplied compo-\n                  nent is inadvertently overridden. These errors can\n                  be difficult to diagnose.\n0             3.  More than one  copy of each IBM-supplied  ISPF and\n                  ISPF/PDF component may  exist,  making maintenance\n                  difficult.\n0          Concatenation Sequence 5\n+          _____________ ________ _\n0             1.  User applications\n0             2.  Group applications\n-                                           - 53 -\n-\n1\n-\n-\n              3.  System wide applications\n0             4.  IBM-supplied ISPF and/or ISPF/PDF libraries.\n0             Advantages:\n0             1.  Enhancements or updates to existing dialogs can be\n                  tested easily.\n0             2.  Groups and individual users can customize IBM-sup-\n                  plied ISPF to meet their specific needs.\n0             Disadvantages:\n0             1.  Encourages lack of consistency  throughout the in-\n                  stallation.\n0             2.  User errors may occur when an IBM-supplied or sys-\n                  tem  wide component  is inadvertently  overridden.\n                  These errors can be difficult to diagnose.\n0             3.  More than one  copy of each IBM-supplied  ISPF and\n                  ISPF/PDF component may  exist,  making maintenance\n                  difficult.\n-\n           10.3   COMBINING ISPF LIBRARIES FROM DIFFERENT SOURCES\n+                 _________ ____ _________ ____ _________ _______\n0          For each  category of libraries  (system wide,   group,  and\n           user),  the Installation-developed libraries  and Vendor li-\n           braries may be combined in a single library.   There are ad-\n           vantages and disadvantages to  combining these libraries for\n           any category.\n0          Advantages of combining libraries:\n0             1.  The overall  directory search is faster  (there is\n                  only one directory to search).\n0             2.  Obtain faster access  (there is only one  data set\n                  to read).\n-\n                                            - 54 -\n-\n1\n-\n-\n           Disadvantages of combining libraries:\n0             1.  A test  library must be  concatenated in  front of\n                  the production library  to test a new  version (if\n                  it  is substituted,   other  applications will  be\n                  lost).\n0             2.  There is the possibility  of a 'fall-through' dur-\n                  ing test (a dialog component which is missing from\n                  the test  library is  fetched from  the production\n                  library instead of the test library).\n0             3.  Obsolete members  remain in  the combined  library\n                  when a replacement  version of a library  from one\n                  source is merged into  the combined library.   The\n                  maintenance staff must  determine which components\n                  are no longer used and  manually delete these mem-\n                  bers.\n0          Advantages of separate libraries:\n0             1.  A simple substitution of libraries (test for prod-\n                  uction)  allows a new version  of a single library\n                  to be tested.\n0          Disadvantages of separate libraries:\n0             1.  There is a performance  degradation with each suc-\n                  cessive library in the concatenation.\n-\n-\n-\n-\n-\n0                                           - 55 -\n-\n1\n-\n-\n                    11.  TRACKING CHANGES IN ISPF AND ISPF/PDF\n0             Some suggested approaches:\n0                1.  Make all  mods to  IBM-supplied modules  in IBM\n                     libraries.  (This approach assumes that IBM li-\n                     braries  are  first in  the  concatenation  se-\n                     quence).   SMP MUST be used  to perform all al-\n                     terations in IBM supplied  libraries.   (SMP is\n                     an IBM  program that  can keep  track of  every\n                     message,  module,  panel,  etc.   in the system\n                     along with all changes made to them).\n0                2.  When IBM mods are applied,  make the SMP target\n                     library different from  the production library.\n                     Have a set  of test procedures to  evaluate the\n                     changes.  An advantage of using a separate test\n                     library is that  the changes can be  tested be-\n                     fore being made production.   A disadvantage of\n                     the method is that code that is not part of the\n                     SMP supported  libraries could get out  of sync\n                     with the rest of the dialog.\n0                3.  SMP may not be used to track changes if librar-\n                     ies  from  other sources  are  concatenated  in\n                     front of the IBM-supplied ISPF and ISPF/PDF li-\n                     braries.   Manual inspection or  a text compare\n                     program may  be used to detect  differences be-\n                     tween different versions of members.\n0                4.  Use an  ISPF panel-driven  dialog which  uses a\n                     library database manager such as FOCUS or RAMIS\n                     to track the changes.\n0                5.  Use a Data Dictionary  facility to provide com-\n                     prehensive cross-reference, documentation,  and\n                     problem and change control for applications.\n-\n-\n-                                           - 56 -\n-\n1\n-\n-\n                         12.  STEPS OF DIALOG DEVELOPMENT\n0          A method for developing ISPF dialogs is outlined below:\n0             1.  Determine what information the  user needs to sup-\n                  ply and what information the  dialog can derive or\n                  obtain from some other  source.   Also,  determine\n                  which user input values  should be retained across\n                  ISPF sessions.   The output of this step should be\n                  a rough description of the structure of the dialog\n                  - how many panels will be necessary, what informa-\n                  tion each panel will retrieve,  and a general idea\n                  of the processing  which will be required  to per-\n                  form the user's task (program to be executed,  job\n                  to be submitted, etc.).\n0             2.  Design the panel layouts.\n0                 Verify  that the  panels get  all the  information\n                  which the user must supply to the dialog.  Concen-\n                  trate on how the panels look to the user.   Do the\n                  panels have the standard format or \"look\" of other\n                  ISPF  panels?    Consistent formats  minimize  the\n                  learning curve  for using new  applications effec-\n                  tively and increase user confidence.\n0             3.  Create the panels.\n0                 Create the panel )BODY sections.   Use the DISPLAY\n                  option of Dialog Test to review their format.\n0             4.  Develop the  )INIT and )PROC  sections in  each of\n                  the panels.    Review the panel layout  and \"flow\"\n                  with the user.\n0             5.  Write a rough  draft of each function  executed in\n                  the dialog.\n0                 In general,   we recommend  that the  functions be\n                  coded first as CLISTs or  EXECs.   The changes re-\n                  quired during  debugging and design review  can be\n                  implemented  easier and  faster in  CLIST or  EXEC\n                  code than in a programming language.\n-                                           - 57 -\n-\n1\n-\n-\n              6.  Test the rough draft functions using the FUNCTIONS\n                  Dialog Test option.\n0             7.  Complete the  validation and  error processing  in\n                  the functions.\n0                 Code  validation and  error  processing to  ensure\n                  that there is not any user action which will cause\n                  the dialog to ABEND.  Code the necessary error and\n                  informatory messages.\n0                 Verify that  the validation code is  working prop-\n                  erly  and that  all  messages  are displayed  cor-\n                  rectly.\n0             8.  Create the tutorial panels for the dialog.\n0             9.  Convert CLISTs to programs.\n0                 This step is optional;  it may or may not be cost-\n                  effective,  depending on the  dialog.   Many func-\n                  tions can  be dramatically  improved in  execution\n                  time or  validation capabilities if they  are con-\n                  verted from CLISTs to programs.\n0          There are two papers from  past GUIDE Proceedings which con-\n           tain more extensive information  on ISPF Dialog Development.\n           They are:\n0             1.  GUIDE 56, Session No. MP-57, \"ISPF Dialog Manager:\n                  Hazards and Pitfalls.\"\n0             2.  GUIDE 58, Session No. MP-7857, \"ISPF Dialog Devel-\n                  opment Methods\".\n-\n-\n-\n-                                           - 58 -\n-\n1\n-\n-\n                                   13.  CLISTS\n0             1.  CLISTs should  be invoked  by prefixing  a percent\n                  sign (%) to the CLIST name:\n0                      %clistname\n0                 If the percent sign is not used to invoke a CLIST,\n                  line mode display  is initiated and the  screen is\n                  cleared.\n0             2.  Global variables which exist  when ISPF is started\n                  are not  available to  CLISTs running  under ISPF.\n                  These global variables are restored when ISPF ter-\n                  minates.   Global  variables which are  created in\n                  CLISTs running  under ISPF  are deleted  when ISPF\n                  terminates.\n0             3.  ATTN  exits should  not be  used  in ISPF  CLISTs;\n                  their use will cause unpredictable results.\n0             4.  The TERMIN command procedure statement is not sup-\n                  ported under ISPF.\n0             5.  Use ISPF file tailoring or PDF EDIT Macros instead\n                  of TSO EDIT to format output data sets (JCL, input\n                  files, control cards, etc.).\n-\n-\n-\n-\n-\n-\n                                            - 59 -\n-\n1\n-\n-\n                          14.  NEW APPLICATION PROFILES\n0          When a user invokes a NEWAPPL dialog for the first time, the\n           ISPSPROF member is  copied from the ISPTLIB file  to the new\n           profile member.   This  member of the ISPTLIB  file contains\n           the installation defaults for ISPF system profile variables.\n           Many ISPF/PDF users change the meaning of their PF keys once\n           they are familiar with ISPF/PDF.    These users are confused\n           by the change in the values of their PF keys for the NEWAPPL\n           dialogs.   A technique  for resetting the user's  PF keys to\n           the user's  ISPF/PDF default values  when the dialog  is in-\n           voked is described below.\n-          To invoke a NEWAPPL dialog:\n0             1.  Invoke  a standard  CLIST  (called SAVPFKEY  here)\n                  with NEWAPPL(ISR).   Pass SAVPFKEY the name of the\n                  panel,  CLIST or program  which begins the dialog,\n                  the NEWAPPL ID and any  parameters to be passed to\n                  the CLIST or program.\n0             2.  SAVPFKEY performs file tailoring on a CLIST skele-\n                  ton.  The file  tailoring output is a  CLIST which\n                  assigns the  PF key  values from  the ISR  profile\n                  pool to the PF key variables.  This CLIST is saved\n                  (it is not executed until step 4).\n0             3.  SAVPFKEY invokes a second  CLIST (called SETPFKEY)\n                  with NEWAPPL and the NEWAPPL  ID specified for the\n                  dialog.   SAVPFKEY passes all  other parameters on\n                  to SETPFKEY.\n0             4.  SETPFKEY executes the file tailored CLIST, setting\n                  the  PF key  variables  to  their ISRPROF  values.\n                  SETPFKEY then invokes the panel, CLIST, or program\n                  which begins the dialog.\n0          See Appendix D  for sample code for the  CLISTs SAVPFKEY and\n           SETPFKEY and the CLIST skeleton.\n-\n-                                           - 60 -\n-\n1\n-\n-\n           If dialogs in  your installation assign their  own values to\n           PF keys,  the code in Appendix  D should be changed to check\n           for the  existence of the  NEWAPPL profile member.    If the\n           member already exists,   the PF keys should not  be reset to\n           the user's ISPF/PDF values.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0                                           - 61 -\n-\n1\n-\n-\n-\n-                                   Appendix A\n0                  A SAMPLE MODEL FOR TABLE DISPLAY PROCESSING\n-\n           NOTE:  This model was written using ISPF version 1.\n-          PROC 0 DEBUG\n           )N\n           )N\n           )N       THIS IS A MODEL OF A CLIST WHICH DISPLAYS A\n           )N       TABLE AND PROCESSES THE LINES MODIFIED BY THE\n           )N       USER AND ANY FUNCTION COMMANDS.\n           )N\n           )N       YOU WILL PROBABLY WANT TO TAILOR THIS CLIST TO YOUR\n           )N       APPLICATION BY ALTERING THE AREAS WHICH ARE NOTED\n           )N       BELOW.\n           )N\n               IF DEBUG = &DEBUG THEN CONTROL SYMLIST LIST CONLIST MSG\n               CONTROL END(ENDO) NOFLUSH\n           )N\n           )N       CHANGE \"TABLENAM\" TO THE NAME OF YOUR TABLE AND\n           )N       \"PANELNAM\" TO THE NAME OF YOUR PANEL\n           )N\n           )N\n                SET &TABLE = TABLENAM\n                SET &PANEL = &PANELNAM\n                SET &CRP =\n                SET &ACTION =\n                SET &MESSAGE =\n                SET &CURSOR =\n                SET &FIRST = YES\n                /******************************************/\n                /* POSITION TABLE TO DISPLAY FROM 1ST ROW */\n                /******************************************/\n                ISPEXEC TBTOP &TABLE\n-                                           - 62 -\n-\n1\n-\n-\n                /***********************************************/\n                /* DISPLAY THE TABLE AND PROCESS USER ENTRIES  */\n                /* UNTIL THE USER ENTERS END OR RETURN COMMAND */\n                /***********************************************/\n                DO WHILE (&ACTION \u00ac= USEREND)\n                    IF &FIRST = YES  +\n                      THEN DO\n                        SET &FIRST = NO\n                        ISPEXEC TBDISPL &TABLE PANEL(&PANEL)      +\n                            MSG(&MESSAGE) CSRROW(&CRP) CURSOR(&CURSOR)\n                        SET &RC = &LASTCC\n                        ENDO\n                      ELSE DO\n                        /******************************************/\n                        /* ISPF WILL CORRECTLY POSITION THE TABLE */\n                        /* IF THE PANEL NAME IS NOT RE-SPECIFIED  */\n                        /******************************************/\n                        IF &MESSAGE = &STR()  +\n                            THEN ISPEXEC TBDISPL &TABLE\n                            ELSE ISPEXEC TBDISPL &TABLE   +\n                                MSG(&MESSAGE) CSRROW(&CRP) CURSOR(&CURSOR)\n                        SET &RC = &LASTCC\n                        ENDO\n                    /******************************************************/\n                    /* RC = 0  - ONE LINE MODIFIED AND/OR COMMAND ENTERED */\n                    /* RC = 4  - TWO OR MORE LINES MODIFIED; USER MAY HAVE*/\n                    /*           ENTERED A FUNCTION COMMAND               */\n                    /* RC = 8  - USER ENTERED END OR RETURN COMMAND       */\n                    /******************************************************/\n                    IF &RC = 0  THEN SET &ACTION = ONEROW\n                        ELSE IF &RC = 4  THEN SET &ACTION = MULTIROW\n                            ELSE IF &RC = 8  THEN SET &ACTION = USEREND\n0                   /***********************************************/\n                    /* PROCESS EACH ROW WHICH THE USER HAS ALTERED */\n                    /***********************************************/\n                    SET &ROWSDONE = NO\n                    SET &LASTROW = NO\n                    SET &COMMAND = NO\n                    SET &CRP =\n                    SET &CURSOR =\n                    SET &MESSAGE =\n0                   DO WHILE (&ROWSDONE = NO)\n0                                           - 63 -\n-\n1\n-\n-\n                        IF &LASTROW = YES OR &ACTION = ONEROW  +\n                            THEN SET &ROWSDONE = YES\n0                       ISPEXEC TBQUERY &TABLE POSITION(CRP)\n                        IF &ACTION \u00ac= MULTIROW OR &LASTROW = YES  +\n                          THEN DO\n                            /********************************************/\n                            /* CRP = 0  - NO MORE LINES MODIFIED; A     */\n                            /*            COMMAND MAY HAVE BEEN ENTERED */\n                            /********************************************/\n                            IF &CRP = 0  +\n                              THEN DO\n                                IF &ACTION = USEREND   +\n                                    THEN GOTO ENDPROC\n                                  ELSE DO   /* COMMAND ENTERED */\n                                    SET &COMMAND = YES\n                                    SET &ROWSDONE = YES\n                                    ENDO\n                                ENDO\n                            ENDO\n0                       IF &COMMAND = NO  +\n                          THEN DO\n                            /************************************/\n                            /* UPDATE TABLE WITH NEXT ROW WHICH */\n                            /* THE USER HAS MODIFIED.           */\n                            /************************************/\n                            ISPEXEC TBPUT &TABLE\n           )N\n           )N                     DO ANY VERIFICATION OR PROCESSING\n           )N                     FOR THE ROW AFTER THE TBPUT.\n           )N\n           )N                     FOR EXAMPLE:\n           )N                         IF &ROWVAR > 100  +\n           )N                           THEN DO\n           )N                             SET &MESSAGE = TBERR000\n           )N                             SET &CURSOR = ROWVAR1\n           )N                             ENDO\n           )N\n                            /******************************************/\n                            /* WERE ANY USER ERRORS FOUND IN THIS ROW */\n                            /******************************************/\n                            IF &MESSAGE \u00ac= &STR()  +\n                              THEN DO\n0                                           - 64 -\n-\n1\n-\n-\n                                /***************************************/\n                                /* DO NOT END IF THERE IS A USER ERROR */\n                                /***************************************/\n                                IF &ACTION = USEREND  +\n                                    THEN SET &ACTION =\n                                GOTO ROWERROR\n                                ENDO\n                            IF &ROWSDONE = YES AND &ZCMD \u00ac= &STR()  +\n                              THEN DO\n                                /***********************/\n                                /* COMMAND WAS ENTERED */\n                                /***********************/\n                                SET &COMMAND = YES\n                                SET &ROWSDONE = YES\n                                ENDO\n                            IF &ROWSDONE = NO  +\n                              THEN DO\n                                /******************************/\n                                /* RETRIEVE NEXT MOFIFIED ROW */\n                                /******************************/\n                                ISPEXEC TBDISPL &TABLE\n                                SET &RC = &LASTCC\n                                IF &ACTION = MULTIROW  +\n                                  THEN DO\n                                    IF &RC = 0  THEN SET &LASTROW = YES\n                                    ENDO\n                                ENDO\n                            ENDO\n                        ENDO\n0                   IF &COMMAND = YES  +\n                      THEN DO\n                        /****************************/\n                        /* PROCESS FUNCTION COMMAND */\n                        /****************************/\n           )N\n           )N              YOU CAN VALIDATE THE FUNCTION COMMAND HERE:\n           )N\n           )N              FOR EXAMPLE:\n           )N                IF &ZCMD \u00ac= ADD OR &ZCMD \u00ac= DEL  +\n           )N                  THEN DO\n           )N                    SET &MESSAGE = TBL001\n           )N                    SET &CURSOR = ZCMD\n           )N                    ENDO\n0                                           - 65 -\n-\n1\n-\n-\n           )N\n                        ENDO\n           ROWERROR:  +\n                    ENDO\n                /***********************************************/\n                /* TABLE DISPLAY PROCESSING HAS BEEN COMPLETED */\n                /***********************************************/\n           ENDPROC:  +\n           )N\n           )N   IF YOU ARE THROUGH USING THIS TABLE, INSERT A TBCLOSE OR\n           )N   TBEND STATEMENT HERE (THE VIRTUAL STORAGE COPY OF THE\n           )N   TABLE WILL BE DELETED).\n           )N\n                END\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0                                           - 66 -\n-\n1\n-\n-\n-\n-                                   Appendix B\n0                        SAMPLE PANELS USED TO ADD MODELS\n-\n           Method 1:\n              Add Group  and User options on  the Class menu  and User,\n              Group and Installation options on  the model option menus\n              for each class.\n0             The Model Class  Menu in Figure 1 provides a  Group and a\n              User Class option to allow groups  and users to add their\n              own classes.   If option 1 (CLIST class) is selected, the\n              Command Models menu (Figure 2) is displayed.  The Command\n              Models menu provides an Installation,  a Group and a User\n              models option.   If the  Installation option is selected,\n              the Installation Command Models menu  (Figure 3)  is dis-\n              played.   The model to be  imbedded is selected from this\n              menu.\n0             Example:\n                   the command \"MODEL  TBCREATE\" would  imbed the  ISPF\n                      TBCREATE model\n0                  the command \"MODEL  I.TABLDISP\" would imbed  the in-\n                      stallation model TABLDISP\n-\n           Method 2:\n              Insert a  menu between  the Class  menu and  each of  the\n              model option menus.  On the inserted menu, add the Group,\n              User and Installation options.\n0             The Model Class  Menu in Figure 4 provides a  Group and a\n              User Class option to allow groups  and users to add their\n              own classes.   If option 1 (CLIST class) is selected, the\n-                                           - 67 -\n-\n1\n-\n-\n              Command Model Options menu (Figure 5) is displayed.   The\n              Command Model  Options menu provides an  Installation,  a\n              Group and a User models option.   If the Installation op-\n              tion is  selected,  the Installation Command  Models menu\n              (Figure 3) is displayed.  The model to be imbedded is se-\n              lected from this menu.\n0             Example:\n                   the command \"MODEL 1.TBCREATE\" would  imbed the ISPF\n                      model for TBCREATE\n0                  the command \"MODEL  2.TABLDISP\" would imbed  the in-\n                      stallation model TABLDISP\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-                                           - 68 -\n-\n1\n-\n-\n            ----------------------  MODEL  CLASSES  ------------------------\n            OPTION ===>\n0              1  CLIST        - ISPF services in CLISTs\n               2  COBOL        - ISPF services in COBOL programs\n               3  EXEC         - ISPF services in EXEC commands\n               4  FORTRAN      - ISPF services in FORTRAN programs\n               5  MSGS         - Message format\n               6  PANELS       - Panel formats and statements\n               7  PLI          - ISPF services in PLI programs\n               8  SKELS        - File tailoring control statements\n               9  PASCAL       - ISPF services in PASCAL programs\n               I  INSTALLATION - Installation specified class\n               G  GROUP        - Group specified class\n               U  USER         - User specified class\n-\n            Enter END command to cancel MODEL command.\n-\n                      Figure 1.  Model Classes menu for Method 1.\n-\n-\n-\n-\n-\n-\n-\n0                                           - 69 -\n-\n1\n-\n-\n            ---------------------  COMMAND MODELS  -------------------------\n            OPTION ===>\n0              TABLES (General)      TABLES (Row)           VARIABLES\n               G1   TBCREATE         R1   TBADD             V1   VGET\n               G2   TBOPEN           R2   TBDELETE          V2   VPUT\n               G3   TBQUERY          R3   TBGET\n               G4   TBSAVE           R4   TBPUT\n               G5   TBCLOSE          R5   TBMOD             MISCELLANEOUS\n               G6   TBEND            R6   TBEXIST           M1   SELECT\n               G7   TBERASE          R7   TBSARG            M2   CONTROL\n                                     R8   TBSCAN            M3   BROWSE\n                                     R9   TBTOP             M4   EDIT\n                                     R10  TBBOTTOM          M5   LOG\n                                     R11  TBSKIP\n                                     R12  TBVCLEAR\n               FILE TAILORING\n               F1   FTOPEN           DISPLAY                 I   INSTALLATION\n               F2   FTINCL           D1   DISPLAY            G   GROUP\n               F3   FTCLOSE          D2   TBDISPL            U   USER\n               F4   FTERASE          D3   SETMSG\n0           Enter END command to cancel MODEL command.\n-\n                     Figure 2.  Command Models Menu for Method 1.\n-\n-\n-\n-\n-\n-\n                                            - 70 -\n-\n1\n-\n-\n            ---------------  INSTALLATION COMMAND MODELS  ------------------\n            OPTION ===>\n-                     1  CLIST    - Standard format for CLISTs\n0                     2  CHECKDS  - Invoke the CHECKDS CLIST\n0                     3  TABLDISP - Display an ISPF table and process\n                                    user entries\n0                     4  FILETLR  - ISPF File Tailor Processing\n-\n0                           Figure 3.  Installation Command Models\n                                       menu for Methods 1 and 2.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                            - 71 -\n-\n1\n-\n-\n            ---------------------  MODEL  CLASSES  --------------------------\n            OPTION ===>\n0              1  CLIST        - CLIST commands\n               2  COBOL        - COBOL programs\n               3  EXEC         - EXEC commands\n               4  FORTRAN      - FORTRAN\n               5  MSGS         - Message format\n               6  PANELS       - Panel formats and statements\n               7  PLI          - PLI\n               8  SKELS        - File tailoring control statements\n               9  PASCAL       - PASCAL programs\n               I  INSTALLATION - Installation specified\n               G  GROUP        - Group specified\n               U  USER         - User specified\n-\n0                     Figure 4.  Model Classes menu for Method 2.\n-\n-\n-\n-\n-\n-\n-\n-\n0                                           - 72 -\n-\n1\n-\n-\n            -------------------  COMMAND MODEL OPTIONS ---------------------\n            OPTION ===>\n-                     1  ISPF         - ISPF Services in CLIST Commands\n0                     2  INSTALLATION - Installation specified CLIST Commands\n0                     3  GROUP        - Group specified CLIST Commands\n0                     4  USER         - User specified CLIST Commands\n-\n0                    Figure 5.  Command Model Options\n                                menu for Method 2.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0                                           - 73 -\n-\n1\n-\n-\n-\n-                                   Appendix C\n0               ENFORCING A CONCATENATION SEQUENCE FOR ISPF FILES\n-\n           This appendix  contains sample code  for a program  which is\n           used to  enforce a  concatenation sequence  for ISPF  files.\n           See the section on User  Customization of System-Wide Dialog\n           Components for a description of this program.\n0                   PUNCH '++USERMOD(MOD_ID) .                            '\n                    PUNCH '++VER(Z038) FMID(HDV2102) .                    '\n                    PUNCH '++JCLIN /* DEFINES SYSLMOD AND DISTLIB */ .    '\n                    PUNCH '//JOBNAME JOB DUMMY                            '\n                    PUNCH '// EXEC PGM=IEWL,PARM=''XREF,LIST,RENT,REUS''  '\n                    PUNCH '//SYSLMOD DD DSN=SYS1.ISPLOAD,DISP=SHR         '\n                    PUNCH '//MVSMODS DD DSN=SYS1.MVSMODS,DISP=SHR         '\n                    PUNCH '//SYSLIN  DD *                                 '\n                    PUNCH '  INCLUDE MVSMODS(ISPREFIX)                    '\n                    PUNCH '  INCLUDE ISPLOAD(ISRPCP)                      '\n                    PUNCH '  ORDER   ISPREFIX                             '\n                    PUNCH '  ORDER   ISRPCP                               '\n                    PUNCH '  ALIAS   ISPF                                 '\n                    PUNCH '  ALIAS   ISPICP                               '\n                    PUNCH '  ALIAS   ISPSTART                             '\n                    PUNCH '  ALIAS   PDF                                  '\n                    PUNCH '  ALIAS   SPF                                  '\n                    PUNCH '  NAME    ISRPCP(R)                            '\n                    PUNCH '++MOD(ISPREFIX) DISTLIB(MVSMODS) .             '\n                    EJECT\n           *******************************************************************\n           *                                                                 *\n           *                      I  S  P  R  E  F  I  X                     *\n           *                                                                 *\n           *        PROGRAM TO 'FRONT-END' THE ISPF COMMAND PROCESSOR        *\n           *        TO CHECK THE ORDER OF CONCATENATION OF THE ISPMLIB,      *\n           *        ISPPLIB, ISPSLIB, ISPTLIB LIBRARIES BEFORE PASSING       *\n           *        CONTROL TO THE PROCESSOR.                                *\n0                                           - 74 -\n-\n1\n-\n-\n           *                                                                 *\n           *     NOTES:                                                      *\n           *                                                                 *\n           *        1) THE CODE IS RE-ENTERANT.                              *\n           *                                                                 *\n           *                                                                 *\n           *     CHANGES:                                                    *\n           *                                                                 *\n           *        1) NONE AT THIS TIME.                                    *\n           *                                                                 *\n           *                                                                 *\n           *                                                                 *\n           *******************************************************************\n                    SPACE 2\n           *******************************************************************\n           *                                                                 *\n           * PROGRAM FLOW:                                                   *\n           *                                                                 *\n           *    1) GET A SAVE AREA FOR SYSTEM SERVICES TO USE WHILE THIS     *\n           *       ROUTINE IS RUNNING AND PERFORM STANDARD CHAINING OF       *\n           *       THE SAVE AREAS.                                           *\n           *                                                                 *\n           *    2) VERIFY THAT WE ARE IN TSO (NON-JOB) MODE.  DO NOT ENFORCE *\n           *       THE CONCATENATIONS FOR ISPF THAT IS BEING RUN IN BATCH.   *\n           *                                                                 *\n           *    3) FIND THE TIOT FOR THE TSO USER.                           *\n           *                                                                 *\n           *    4) FOR AN ENTRY IN THE TIOT, SCAN THE TABLE OF DDNAMES       *\n           *       FOR AN ENTRY.  IF ONE IS FOUND THEN COMPARE THE FIRST     *\n           *       DATASET NAME IN THE CONCATENATION (IN THE JFCB) WITH      *\n           *       THE DATASET NAME IN THE TABLE.  IF THEY DO NOT MATCH,     *\n           *       SET THE ERROR REG (R11) TO KICK THE USER OUT AND PUT      *\n           *       OUT A MESSAGE TO THE USER AT THE TUBE.                    *\n           *                                                                 *\n           *    5) LOOP IN STEP 4 FOR ALL ENTRIES IN THE TIOT.               *\n           *                                                                 *\n           *    6) FREEMAIN THE SAVE AREA.                                   *\n           *                                                                 *\n           *    7) CHECK THE ERROR FLAG.  IF IT HAS BEEN SET, RETURN         *\n           *       TO THE CALLER.  IF IT HAS NOT BEEN SET, LOAD UP THE       *\n           *       CALLER'S REGISTERS, GET THE ENTRY POINT OF THE COMMAND    *\n           *       PROCESSOR IN REG 15 (R15) AND GO TO THE PROCESSOR.        *\n           *                                                                 *\n           *******************************************************************\n0                                           - 75 -\n-\n1\n-\n-\n                    EJECT\n           *******************************************************************\n           *                                                                 *\n           *                                                                 *\n           *              R E G I S T E R     U S A G E                      *\n           *                                                                 *\n           *                                                                 *\n           *  GPR0    STANDARD OS LINKAGE REGISTER                           *\n           *  GPR1    STANDARD OS LINKAGE REGISTER                           *\n           *  GPR2    WORK REGISTER (POINTS TO TCB, TIOT, ETC.)              *\n           *  GPR3    WORK REGISTER (COMPUTE NEXT TIOT ENTRY ADDRESS)        *\n           *  GPR4    NOT USED                                               *\n           *  GPR5    POINTER TO ENTRY IN DDNAME TABLE                       *\n           *  GPR6    LOOP COUNTER FOR DDNAME TABLE                          *\n           *  GPR7    POINTER TO JFCB FOR MATCHED DD ENTRY                   *\n           *  GPR8    NOT USED                                               *\n           *  GPR9    NOT USED                                               *\n           *  GPR10   NOT USED                                               *\n           *  GPR11   ERROR FLAG                                             *\n           *  GPR12   BASE REGISTER FOR THE MODULE                           *\n           *  GPR13   POINTER TO SAVE AREA                                   *\n           *  GPR14   STANDARD OS LINKAGE REGISTER                           *\n           *  GPR15   STANDARD OS LINKAGE REGISTER                           *\n           *                                                                 *\n           *                                                                 *\n           *******************************************************************\n                    EJECT\n           ISPREFIX CSECT\n                    SPACE 2\n           *******************************************************************\n           *                                                                 *\n           *    STANDARD ENTRY PROCEDURE WITH GETMAIN FOR SAVE AREA          *\n           *                                                                 *\n           *******************************************************************\n                    SPACE 2\n                    STM   R14,R12,12(R13)    SAVE CALLER'S REGISTERS\n                    SPACE 2\n                    LR    R12,R15            SET BASE REG FOR CODE\n                    USING ISPREFIX,R12       TELL ASSEMBLER ABOUT A BASE REG\n                    SPACE 2\n                    GETMAIN RU,LV=72,SP=0    GO GET SOME CORE\n                    SPACE 2\n                    ST    R1,8(R13)          CHAIN FORWARDS\n                    ST    R13,4(R1)          CHAIN BACKWARDS\n0                                           - 76 -\n-\n1\n-\n-\n                    LR    R13,R1             KEEP POINTER TO SAVE AREA\n                    EJECT\n           *******************************************************************\n           *                                                                 *\n           *    INITIAL HOUSEKEEPING AND CHECK FOR JOB VS TSO                *\n           *                                                                 *\n           *******************************************************************\n                    SPACE 2\n                    SLR   R11,R11            SET FLAG FOR NO ERRORS\n                    SPACE 2\n                    USING PSA,R0             SET BASE FOR PSA\n                    L     R2,PSAAOLD         R2 ---> MY ASCB\n                    SPACE 2\n                    USING ASCB,R2            SET BASE FOR ASCB\n                    CLC   ASCBJBNI(4),ZER0   IS THIS A JOB OR TSO?\n                    BNE   EXITNOW            JOB - DON'T CARE AT ALL\n                    DROP  R2                 DROP ASCB BASE\n                    SPACE 2\n                    L     R2,PSATOLD         R2 ---> MY TCB\n                    DROP  R0                 DROP PSA BASE\n                    SPACE 2\n                    USING TCB,R2             SET BASE FOR TCB\n                    L     R2,TCBTIO          R2 ---> TIOT\n                    DROP  R2                 DROP BASE FOR TCB\n                    SPACE 2\n                    USING TIOT,R2            SET BASE FOR TIOT PREFIX\n                    LA    R2,TIOENTRY        R2 ---> 1ST ENTRY IN TIOT\n                    DROP  R2                 DROP BASE FOR TIOT PREFIX\n                    EJECT\n           *******************************************************************\n           *                                                                 *\n           *    LOOP THROUGH THE TIOT CHECKING EACH ENTRY                    *\n           *                                                                 *\n           *******************************************************************\n                    SPACE 2\n                    USING TIOENTRY,R2        SET BASE FOR TIOT ENTRY\n           TIOTLOOP EQU   *\n                    SPACE 2\n                    CLI   TIOELNGH,0         IS THIS END OF THE TIOT?\n                    BE    GOTOSPF            YES - ALL IS COOL...\n                    SPACE 2\n                    LA    R5,DDNTBL          POINT TO THE TABLE\n                    LA    R6,DDNCNT          COUNT OF ENTRIES IN TABLE\n                    SPACE 2\n0                                           - 77 -\n-\n1\n-\n-\n           DDNLOOP  EQU   *\n                    SPACE 2\n                    CLC   TIOEDDNM,0(R5)     IS THIS DDNAME IN THE TABLE?\n                    BE    DDNFOUND           YES - DON'T BLOW HIM OUT YET\n                    SPACE 2\n                    LA    R5,ENTLNGH(R5)     STEP TO NEXT NAME IN TABLE\n                    BCT   R6,DDNLOOP         LOOP FOR ALL DDNAMES IN TABLE\n                    SPACE 2\n           NEXTDDN  EQU   *\n                    SPACE 2\n                    SR    R3,R3              CLEAR A WORKREG\n                    IC    R3,TIOELNGH        GET COUNT OF BYTES IN ENTRY\n                    LA    R2,0(R3,R2)        AND STEP TO NEXT TIOT ENTRY\n                    B     TIOTLOOP           LOOP FOR ALL TIOT ENTRIES\n                    EJECT\n           *******************************************************************\n           *                                                                 *\n           *    DDNAME FOUND IN TABLE - CHECK DATASET NAMES                  *\n           *                                                                 *\n           *******************************************************************\n                    SPACE 2\n           DDNFOUND EQU   *\n                    SPACE 2\n                    ICM   R7,7,12(R2)        PICK UP JFCB POINTER OUT OF TIOT\n                    SPACE 2\n                    CLC   16(44,R7),8(R5)    COMPARE FOR VALID DSNAMES\n                    BE    NEXTDDN            GOOD - LET HIM GO ON\n                    SPACE 2\n                    LA    R11,1(,R11)        SET FOR ERROR FOUND\n                    TPUT  DDNMSG-DDNTBL(R5),32 PUT OUT THE 'BAD CONCAT' MESSAGE\n                    B     NEXTDDN            GO FOR NEXT DD\n                    EJECT\n           *******************************************************************\n           *                                                                 *\n           *               E X I T     C O D E                               *\n           *                                                                 *\n           *******************************************************************\n                    SPACE 2\n           GOTOSPF  EQU   *\n                    SPACE 2\n                    LTR   R11,R11            ERRORS FOUND?\n                    BZ    EXITNOW            NO - GET OUT NOW\n                    SPACE 2\n                    TPUT  CONTACT1,L'CONTACT1 PUT OUT CONTACT MESSAGE\n0                                           - 78 -\n-\n1\n-\n-\n                    TPUT  CONTACT2,L'CONTACT2 PUT OUT CONTACT MESSAGE\n                    TPUT  CONTACT3,L'CONTACT3 PUT OUT CONTACT MESSAGE\n                    SPACE 2\n           EXITNOW  EQU   *\n                    SPACE 2\n                    L     R2,4(,R13)         GET POINTER TO CALLER'S SAVEAREA\n                    FREEMAIN RU,A=(R13),LV=72,SP=0\n                    LR    R13,R2             GET POINTER TO CALLER'S SAVE AREA\n                    SPACE 2\n                    LTR   R11,R11            ERRORS?\n                    BNZ   BADCONCT           YES - DO NOT GO TO SPF\n                    SPACE 2\n                    L     R14,12(R13)        RESTORE CALLER'S REGS\n                    L     R15,VSPF           POINT TO REAL SPF\n                    LM    R0,R12,20(R13)     RESTORE CALLER'S REGS\n                    BR    R15                AND XCTL TO THE REAL SPF\n                    SPACE 2\n           BADCONCT LM    R14,R12,12(R13)    RESTORE CALLER'S REGISTERS\n                    LA    R15,4              SET RETURN CODE\n                    BR    R14                RETURN TO CALLER\n                    EJECT\n           *******************************************************************\n           *                                                                 *\n           *               D A T A     A R E A S                             *\n           *                                                                 *\n           *******************************************************************\n                    SPACE 2\n           ZER0     DC    F'0'               END OF TIOT FLAG\n           VSPF     DC    V(ISRPCP)          ADDRESS OF ENTRY POINT IN ISPF\n                    SPACE 2\n           DDNTBL   DC    CL8'ISPMLIB'\n                    DC    CL44'SYS1.ISPMLIB'\n           DDNMSG   DC    CL32'INVALID CONCATENATION OF ISPMLIB'\n           ENTLNGH  EQU   *-DDNTBL\n                    DC    CL8'ISPPLIB'\n                    DC    CL44'SYS1.ISPPLIB'\n                    DC    CL32'INVALID CONCATENATION OF ISPPLIB'\n                    DC    CL8'ISPSLIB'\n                    DC    CL44'SYS1.ISPSLIB'\n                    DC    CL32'INVALID CONCATENATION OF ISPSLIB'\n                    DC    CL8'ISPTLIB'\n                    DC    CL44'SYS1.ISPTLIB'\n                    DC    CL32'INVALID CONCATENATION OF ISPTLIB'\n           DDNCNT   EQU   (*-DDNTBL)/(ENTLNGH)\n0                                           - 79 -\n-\n1\n-\n-\n                    SPACE 2\n           CONTACT1 DC    C'************* NOTICE !!!!!!! *************'\n           CONTACT2 DC    C'ISPF MAY NOT BE INVOKED WITHOUT THE IBM STANDARD\n                    ''SYS1X.'' ISPF DATASETS FIRST'\n           CONTACT3 DC    C'********* ACCESS TO ISPF DENIED ***********'\n                    EJECT\n           *******************************************************************\n           *                                                                 *\n           *                      D S E C T S                                *\n           *                                                                 *\n           *******************************************************************\n                    SPACE 2\n                    PRINT OFF\n                    IKJTCB\n                    IHAPSA\n                    IHAASCB\n           TIOT     DSECT\n                    IEFTIOT1\n           ISPREFIX CSECT\n           R0       EQU   0\n           R1       EQU   1\n           R2       EQU   2\n           R3       EQU   3\n           R4       EQU   4\n           R5       EQU   5\n           R6       EQU   6\n           R7       EQU   7\n           R8       EQU   8\n           R9       EQU   9\n           R10      EQU   10\n           R11      EQU   11\n           R12      EQU   12\n           R13      EQU   13\n           R14      EQU   14\n           R15      EQU   15\n                    PRINT ON\n                    END\n-\n-\n-                                           - 80 -\n-\n1\n-\n-\n-\n-                                   Appendix D\n0                RESETTING PF KEY VALUES FOR NEW PROFILE MEMBERS\n-\n                              Figure 1.  SAVPFKEY CLIST\n-          PROC 1 APPLID CLIST(NONE) PGM(NONE) PANEL(NONE)  +\n                  OPT(NONE) PARMPASS DEBUG\n           /**************************************************************/\n           /* THIS CLIST IS USED TO INVOKE AN ISPF DIALOG WITH \"NEWAPPL\" */\n           /* SPECIFIED.  THE PURPOSE OF THIS CLIST IS TO PROVIDE A      */\n           /* METHOD OF INITIALIZING A NEW PROFILE MEMBER WITH THE PF    */\n           /* KEY VALUES WHICH THE USER HAS SPECIFIED FOR THE PROGRAM    */\n           /* DEVELOPMENT FACILITY.                                      */\n           /*------------------------------------------------------------*/\n           /* PARAMETERS:                                                */\n           /*   APPLID - REQUIRED; THE APPLICATION ID WHICH WILL BE      */\n           /*            USED TO INVOKE THE DIALOG                       */\n           /*   CLIST  - THE NAME OF THE CLIST WHICH BEGINS THE DIALOG   */\n           /*   PGM    - THE NAME OF THE PROGRAM WHICH BEGINS THE DIALOG */\n           /*   PANEL  - THE NAME OF THE PANEL WHICH BEGINS THE DIALOG   */\n           /*   OPT    - OPTION TO BE PASSED TO THE PANEL                */\n           /*   PARMPASS - SPECIFIED IF THERE ARE PARAMETERS TO BE       */\n           /*            PASSED.  SEE \"PASSING PARAMETERS TO YOUR        */\n           /*            DIALOG\", BELOW                                  */\n           /*------------------------------------------------------------*/\n           /* EXAMPLE CALL:                                              */\n           /*   IN THE PANEL WHICH IS TO INVOKE THE \"NEWAPPL\" DIALOG,    */\n           /*   USE THE FOLLOWING CODE:                                  */\n           /*                                                            */\n           /*   &ZSEL = TRANS(&ZCMD                                      */\n           /*     1,'CMD(%SAVPFKEY AAAA PANEL(AAAAXXXX)) NEWAPPL(ISR)'   */\n           /*       ETC.                                                 */\n           /*                                                            */\n           /*     WHERE:    AAAA IS YOUR NEWAPPL ID                      */\n           /*                        AND                                 */\n0                                           - 81 -\n-\n1\n-\n-\n           /*           AAAAXXXX IS THE PANEL WHICH STARTS THE DIALOG    */\n           /*------------------------------------------------------------*/\n           /*     PASSING PARAMETERS TO YOUR DIALOG                      */\n           /*                                                            */\n           /* TO PASS PARAMETERS TO A CLIST OR PROGRAM WHICH BEGINS      */\n           /* YOUR DIALOG, SET THE VARIABLE &PARMPASS TO A LIST OF THE   */\n           /* OF THE PARAMETERS TO BE PASSED AND PASS THE LITERAL,       */\n           /* \"PARMPASS\", TO SAVPFKEY.                                   */\n           /*                                                            */\n           /*  EXAMPLE (IN A PANEL PROCESSING SECTION):                  */\n           /*        &PARMPASS = 'DSNAME(TEMP.DATA) DB(TST)'             */\n           /*        &ZSEL = TRANS(&ZCMD                                 */\n           /*            1,'CMD(%SAVPFKEY AAAA CLIST(AAAAXXXX) PARMPASS  */\n           /*               NEWAPPL(ISR)'                                */\n           /*            ETC.                                            */\n           /*                                                            */\n           /**************************************************************/\n                IF &DEBUG = DEBUG  +\n                    THEN CONTROL SYMLIST CONLIST LIST MSG\n                CONTROL END(ENDO)\n                IF &CLIST = NONE AND &PANEL = NONE AND &PGM = NONE  +\n                  THEN DO\n                    ISPEXEC SETMSG MSG(RDUN001)\n                    GOTO DONE\n                    ENDO\n                IF (&CLIST \u00ac= NONE AND &PANEL \u00ac= NONE) OR  +\n                   (&CLIST \u00ac= NONE AND &PGM \u00ac= NONE) OR    +\n                   (&PANEL \u00ac= NONE AND &PGM \u00ac= NONE)       +\n                  THEN DO\n                    ISPEXEC SETMSG MSG(RDUN002)\n                    GOTO DONE\n                    ENDO\n0               IF &PARMPASS = PARMPASS  +\n                  THEN DO\n                    /*****************************************/\n                    /* GET THE PARAMETER VALUES TO BE PASSED */\n                    /*****************************************/\n                    ISPEXEC VGET PARMPASS SHARED\n                    /*****************************************/\n                    /* PASS A FLAG TO THE SETPFKEY CLIST TO  */\n                    /* INDICATE THAT PARMS WERE PASSED.      */\n                    /*****************************************/\n                    SET &PASS = PARMPASS\n0                                           - 82 -\n-\n1\n-\n-\n                    END\n                  ELSE SET &PASS =\n0               ISPEXEC FTOPEN TEMP\n                ISPEXEC FTINCL SAVPFKEY\n                ISPEXEC FTCLOSE\n0               ISPEXEC SELECT CMD(%SETPFKEY     +\n                                   CLIST(&CLIST) +\n                                   PANEL(&PANEL) +\n                                   PGM(&PGM)     +\n                                   OPT(&OPT)     +\n                                   &PASS         +\n                                   &DEBUG)   NEWAPPL(&APPLID)\n           DONE:   +\n                END\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-                                           - 83 -\n-\n1\n-\n-\n                              Figure 2.  SAVPFKEY SKELETON\n0          )DEFAULT )@?!<|>\n           )CM *********************************************************\n           )CM * THIS CLIST SKELETON IS USED TO SAVE THE PF KEY VALUES *\n           )CM * BEFORE THE NEW APPLICATION IS INVOKED.  WHEN THE FILE *\n           )CM * TAILORED OUTPUT OF THIS SKELETON IS EXECUTED, THE PF  *\n           )CM * KEY VALUES ARE RESET TO THE SAVED VALUES.             *\n           )CM *********************************************************\n           PROC 0 DEBUG\n               IF &DEBUG = DEBUG  +\n                   THEN CONTROL SYMLIST LIST CONLIST MSG\n               SET ZPF01 = &STR(@ZPF01)\n               SET ZPF02 = &STR(@ZPF02)\n               SET ZPF03 = &STR(@ZPF03)\n               SET ZPF04 = &STR(@ZPF04)\n               SET ZPF05 = &STR(@ZPF05)\n               SET ZPF06 = &STR(@ZPF06)\n               SET ZPF07 = &STR(@ZPF07)\n               SET ZPF08 = &STR(@ZPF08)\n               SET ZPF09 = &STR(@ZPF09)\n               SET ZPF10 = &STR(@ZPF10)\n               SET ZPF11 = &STR(@ZPF11)\n               SET ZPF12 = &STR(@ZPF12)\n               SET ZPF13 = &STR(@ZPF13)\n               SET ZPF14 = &STR(@ZPF14)\n               SET ZPF15 = &STR(@ZPF15)\n               SET ZPF16 = &STR(@ZPF16)\n               SET ZPF17 = &STR(@ZPF17)\n               SET ZPF18 = &STR(@ZPF18)\n               SET ZPF19 = &STR(@ZPF19)\n               SET ZPF20 = &STR(@ZPF20)\n               SET ZPF21 = &STR(@ZPF21)\n               SET ZPF22 = &STR(@ZPF22)\n               SET ZPF23 = &STR(@ZPF23)\n               SET ZPF24 = &STR(@ZPF24)\n               ISPEXEC VPUT (ZPF01 ZPF02 ZPF03 ZPF04   +\n                             ZPF05 ZPF06 ZPF07 ZPF08   +\n                             ZPF09 ZPF10 ZPF11 ZPF12   +\n                             ZPF13 ZPF14 ZPF15 ZPF16)  +\n                             PROFILE\n               ISPEXEC VPUT (ZPF17 ZPF18 ZPF19 ZPF20   +\n                             ZPF21 ZPF22 ZPF23 ZPF24)  +\n                             PROFILE\n0                                           - 84 -\n-\n1\n-\n-\n           )CM *****************************************************\n           )CM * SAVE THE PARM VALUES TO BE PASSED BY PLACING THEM *\n           )CM * IN THE FILE TAILORED CLIST.  THIS IS THE ONLY WAY *\n           )CM * TO COMMUNICATE ACROSS A NEWAPPL BOUNDARY.         *\n           )CM *****************************************************\n               SET &PARMPASS = &STR(@PARMPASS)\n               ISPEXEC VPUT PARMPASS SHARED\n               END\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0                                           - 85 -\n-\n1\n-\n-\n                              Figure 3.  SETPFKEY CLIST\n0          PROC 0  +\n             CLIST(NONE) PGM(NONE) PANEL(NONE) OPT(NONE) PARMPASS DEBUG\n               IF &DEBUG = DEBUG  +\n                   THEN CONTROL SYMLIST CONLIST LIST MSG\n               CONTROL END(ENDO)\n               /*********************************************/\n               /* EXECUTE THE FILE TAILORED CLIST TO RESET  */\n               /* THE PF KEY VALUES TO THE VALUES WHICH THEY*/\n               /* HAVE IN THE ISR PROFILE.                  */\n               /*********************************************/\n               ISPEXEC VGET ZTEMPF\n               EXEC '&ZTEMPF' '&DEBUG'\n               /*******************************/\n               /* INVOKE THE DIALOG SPECIFIED */\n               /*******************************/\n               SET &COMMAND =\n               IF &CLIST \u00ac= NONE  +\n                 THEN DO\n                   IF &PARMPASS = PARMPASS +\n                     THEN DO\n                       ISPEXEC VGET &PARMPASS SHARED\n                       SET &COMMAND = CMD(%&CLIST &PARMPASS)\n                       ENDO\n                   ENDO\n               IF &PGM \u00ac= NONE  +\n                 THEN DO\n                   SET &COMMAND = PGM(&PGM)\n                   IF &PARMPASS = PARMPASS  +\n                     THEN DO\n                       ISPEXEC VGET &PARMPASS SHARED\n                       SET &COMMAND = &COMMAND PARM(&PARMPASS)\n                       ENDO\n                   ENDO\n               IF &PANEL \u00ac= NONE  +\n                 THEN DO\n                   SET &COMMAND = PANEL(&PANEL)\n                   IF &OPT \u00ac= NONE   +\n                       THEN SET &COMMAND = &COMMAND OPT(&OPT)\n                   ENDO\n               ISPEXEC SELECT &COMMAND\n               END\n-                                           - 86 -\n-\n1\n-\n-\n-\n-                                   Appendix E\n0                                 SAMPLE MODELS\n-\n           The models in this Appendix have  been supplied by Ross Pav-\n           lac of First National Bank of  Chicago.   These models are a\n           few of the many models which are in use there.   Some of the\n           program and  CLIST models included here  display information\n           to the user via program or  CLIST I/O.   When the program or\n           CLIST is moved into a production environment,  this informa-\n           tion should be communicated to the user via ISPF messages or\n           panels.\n-\n                         Figure 1.  Model for a table structure definition\n                                    in an Assembler program.\n0          )N  DO a \"C TEMPLATE CSECTNAME\"\n           )N  THEN DO A \"C TEMP TABLENAME ALL\"\n           )N  IMPORTANT:  TABLENAME SHOULD BE <= 4 CHARACTERS\n           )N  THIS MODEL IS DESIGNED FOR TABLES WITH FIXED-LENGTH ENTRIES.\n                    TITLE 'TEMP:  ??? TABLE'\n           *********************************************************************\n           *\n           * TEMP:  ??? TABLE\n           *\n           *********************************************************************\n           TEMP     DS    0F            START OF TEMP TABLE\n           TEMPTCNT DC    Y((TEMPTE-TEMPTS)/TEMPELEN)  NUMBER OF ENTRIES\n                    SPACE 2\n           **** FORMAT OF A SINGLE ENTRY\n           *\n           TEMPTS   DS    0F            START OF A TABLE ENTRY\n           )N  BELOW HERE DEFINE A TABLE ENTRY VIA DS'S\n           FIELD1   DS    ....          FIELD1 OF A TABLE ENTRY\n           FIELD2   DS    ....          FIELD2 OF A TABLE ENTRY\n0                                           - 87 -\n-\n1\n-\n-\n           ETC.\n           TEMPELEN EQU   *-TEMPTS      LENGTH OF AN ENTRY\n                    SPACE 2\n                    ORG   TEMPTS        ACTUAL START OF TABLE ENTRIES\n                    SPACE 2\n           **** TABLE BODY\n           *\n           )N  TABLE ENTRIES GO HERE.\n           TEMPTE   EQU   *             END OF TABLE ENTRIES\n           TEMPLEN  EQU   (*-TEMP)      LENGTH OF TABLE\n           TEMPLATE CSECT ,             RETURN TO CSECT\n-\n0                       Figure 2.  Model for a half-line comment box in an\n                                   Assembler program.\n0                   SPACE 4\n           *                                       *****************************\n           *                                       *\n           *                                       *\n           *                                       *****************************\n-\n0                       Figure 3.  Model for a comment box in an\n                                   Assembler program.\n0                   SPACE 4\n           *********************************************************************\n           *********************************************************************\n           **\n           **\n           *********************************************************************\n           *********************************************************************\n-\n-\n-                                           - 88 -\n-\n1\n-\n-\n                        Figure 4.  Model of a typical file tailoring sequence\n                                   in a CLIST.\n0          )N THIS IS A MODEL OF A TYPICAL FILE TAILORING SEQUENCE.\n           )N THE STANDARD ERROR EXIT IS REQUIRED.\n           /********************************************************************\n           /* PERFORM FILE TAILORING\n           /********************************************************************\n            ISPEXEC FTOPEN\n           )N   OPTION - TEMP  -- IF &ZTEMPF TAILORING OUTPUT FILE IS USED\n            IF &RETCODE >= 8 THEN +\n               DO  /* ERROR - TAILORING IN PROGRESS OR FATAL ERROR */\n                   SET &RETCODE = 0\n                   ISPEXEC FTCLOSE\n                   IF &RETCODE >= 8 THEN +\n                      DO\n                         WRITE ****** ERROR - FILE TAILORING OPEN PROBLEM\n                         WRITE ****** WILL ATTEMPT RE-OPEN ANYWAY\n                         SET &RETCODE = 0\n                         ENDO\n                   ISPEXEC FTOPEN\n           )N               TEMP IF TEMPORARY FILE\n                   IF &RETCODE >= 8 THEN +\n                      DO\n                         WRITE ****** FILE TAILORING RE-OPEN FAILED\n                         EXIT CODE(8)\n                         ENDO\n                   ENDO\n            ISPEXEC FTINCL <SKEL-NAME>\n           )N NOTE - USE OPTION \"NOFT\" TO COPY WITH NO FILE TAILORING\n            ISPEXEC FTCLOSE <NAME(MEMBER-NAME)>\n            IF &RETCODE >= 8 THEN +\n               DO\n                  WRITE ****** FILE TAILORING ERROR\n                  WRITE ****** ERROR CODE: &RETCODE\n                  EXIT CODE(&RETCODE)\n                  ENDO\n           )N         SPECIFY MEMBER-NAME ONLY IF\n           )N         OUTPUT TAILOR FILE IS A PDS\n            IF &RETCODE = 8 THEN +\n               DO\n                  WRITE ****** FILE NOT OPEN.  TAILORING FAILS!\n                  EXIT CODE(8)\n                  ENDO\n0                                           - 89 -\n-\n1\n-\n-\n                        Figure 5.  Model of the standard CLIST error exit used\n                                   by First National Bank of Chicago.\n0           CONTROL NOFLUSH\n           )N  DO A \"C TEMPLATE CLISTNAME ALL\" TO PROPAGATE CLIST NAME\n           )N\n           )N  IMPORTANT:  IF YOU CHOOSE TO USE THIS STANDARD ERROR EXIT, ANY\n           )N              CHECKING OF RETURN CODES DONE BY THE CLIST MUST\n           )N              EXAMINE &RETCODE RATHER THAN &LASTCC.\n           )N              ALSO, IF MINOR ERRORS OCCUR, &RETCODE WILL GET SET\n           )N              AND WILL *NOT* BE RESET -- YOU WILL HAVE TO DO THIS\n           )N              YOURSELF -- IF YOU DON'T, SOME TESTS FOR RETURN CODES\n           )N              OF ZERO WILL BE IN ERROR.\n           /********************************************************************\n           /*  STANDARD ERROR EXIT CODE:\n           /*       &RETCODE  - SET TO &LASTCC SO CLIST CAN DO ITS OWN HANDLING\n           /*       &RETLEVEL - THRESHOLD LEVEL FOR ABORTING; IF &LASTCC IS <=\n           /*                   &RETLEVEL, CONTROL WILL BE RETURNED BACK TO\n           /*                   WHERE THE ERROR OCCURRED FOR FURTHER HANDLING.\n           /*       NOTE:  A SYSTEM ABEND WILL BEHAVE AS A NEGATIVE (E.G., SB37)\n           /********************************************************************\n            ERROR                                 /******** ERROR EXIT ********/\n              DO\n                  SET &RETCODE = &LASTCC          /* SAVE BAD CODE FOR LATER USE\n                                                  /* IGNORE NON-FATAL ERRORS\n                  IF &RETCODE <= &RETLEVEL && &RETCODE > 0 THEN RETURN\n                  IF &RETCODE = 12 AND &SYSPCMD = FREE THEN +\n                     DO  /* IGNORE FREE COMMAND ERRORS */\n                        SET &RETCODE = 0\n                        RETURN\n                        ENDO\n                  DO        /* GENERAL-PURPOSE ERROR-HANDLING CODE */\n                     WRITE ======> CLIST TEMPLATE: FATAL INTERNAL ERROR  <======\n                     WRITE ======> FATAL RETURN CODE WAS     : &RETCODE  <======\n                     WRITE ======> MOST RECENT TSO COMMAND   : &SYSPCMD  <======\n                     WRITE ======> MOST RECENT TSO SUBCOMMAND: &SYSSCMD  <======\n                     WRITE ======> IMPLICIT INVOKING CLIST   : &SYSICMD  <======\n                     WRITE ======> WAS THIS CLIST NESTED ?   : &SYSNEST  <======\n                     IF &RETCODE < 0 THEN SET &RETCODE = 16 /* IF SYSTEM ABEND *\n                     EXIT CODE(&RETCODE)\n                     ENDO\n                  ENDO\n            SET &RETCODE = 0     /* INITIALIZE RETURN CODE HOLDER */\n            SET &RETLEVEL = 8    /* NO ABORT IF &LASTCC <= &RETLEVEL */\n0                                           - 90 -\n-\n1\n-\n-\n                        Figure 6.  Model of a comment line in a CLIST.\n0           /*\n-\n0                       Figure 7.  Model of a comment box in a CLIST.\n0           /*******************************************************************\n            /*\n            /*\n            /*******************************************************************\n-\n0                       Figure 8.  Model of a double comment box in a CLIST.\n0           /*******************************************************************\n            /*******************************************************************\n            /**\n            /**\n            /**\n            /*******************************************************************\n            /*******************************************************************\n-\n-\n-\n-\n-\n-\n0                                           - 91 -\n-\n1\n-\n-\n                        Figure 9.  Model of JCL to execute the IEBCOPY utility.\n0          //*\n           //*\n           //STEP10  EXEC PGM=IEBCOPY\n           //SYSPRINT DD SYSOUT=M\n           //SYSUT3   DD UNIT=SYSDA,SPACE=(80,(120,112))\n           //SYSUT4   DD UNIT=SYSDA,SPACE=(80,(15,7)),DCB=KEYLEN=8\n           )N  BELOW IS A SAMPLE DD FOR A DATASET TO BE COPIED.\n           //INDS     DD DSN=INDATASET,\n           //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120),\n           //            DISP=OLD\n           )N  BELOW IS A SAMPLE DD FOR A DATASET TO BE COPIED TO.\n           //OUTDS    DD DSN=OUTDATASET,\n           //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120),\n           //            DISP=OLD\n           //SYSIN    DD *\n           )N DDNAMES FOR BOTH INPUT AND OUTPUT DATA SETS MUST BE SUPPLIED\n            COPY INDD=INDS,OUTDD=OUTDS\n            SELECT MEMBER=((MEMBER1,MEMBER2,R))\n-\n-\n-\n-\n-\n-\n-\n-\n0                                           - 92 -\n-\n1\n-\n-\n                        Figure 10.  Model for a JCL procedure.\n0          )N  JCL PROC MODEL.\n           )N  DO A \"C TEMPLATE PROCNAME ALL\" TO PROPAGATE PROC NAME\n           //TEMPLATE PROC\n           )N  PARMS GO HERE.\n           //*******************************************************************\n           //*\n           //*   I. IDENTIFICATION.\n           //*      PROC:   TEMPLATE\n           )N  FILL IN SYSTEM NAME AND DESCRIPTION.\n           //*      SYSTEM:\n           )N  FILL IN AUTHOR NAME.\n           //*      AUTHOR:\n           )N  FILL IN MONTH AND YEAR WRITTEN.\n           //*      WRITTEN:  XXXXXXXX, 198X\n           //*      MODIFIED: N/A\n           //*\n           )N  DESCRIBE THE PURPOSE OF THE PROC\n           //*  II. PURPOSE.\n           //*\n           //* III. USAGE.\n           //*\n           //*      SYMBOL    REQ?   DEFAULT         MEANING\n           //*      --------  ----   ------------    ---------------------------\n           )N\n           )N  LIST ALL PROC PARAMETERS AND APPROPRIATE INFORMATION, E.G.,\n           )N       WTR       OPT    *               SYSOUT CLASS FOR PRINT FILE\n           //*\n           //*\n           //*******************************************************************\n           )N\n           )N  WHEN CODING INFIVIDUAL STEPS, PLEASE FOLLOW THESE RULES:\n           )N\n           )N     1. NUMBER STEPS BY 10, TO ALLOW FOR INSERTION OF INTERVENING\n           )N        STEPS LATER AND TO PROVIDE AN EASY WAY OF TELLING HOW FAR I\n           )N        THE EXECUTION A GIVEN JOB IS.\n           )N     2. BEGIN EXEC CARDS IN COLUMN 11.\n           )N     3. BEGIN DD   CARDS IN COLUMN 12.\n           )N     4. BEGIN ALL CONTINUATION CARDS IN COLUMN 16.\n           )N     5. EACH STEP SHOULD HAVE, AFTER THE EXEC CARD, A COMMENT BOX\n           )N        DESCRIBING WHAT THE STEP IS TO ACCOMPLISH.\n           )N     6. THERE SHOULD BE AT LEAST TWO BLANK COMMENTS BETWEEN JOB STE\n           )N\n0                                           - 93 -\n-\n1\n-\n-\n           //*\n           //STEP10  EXEC PGM=IEFBR14\n           //* *****************************************************************\n           //* *\n           )N  DESCRIPTION OF JOB STEP FUNCTION GOES HERE.\n           //*\n           //*\n           //* *****************************************************************\n           //*\n           //*\n           //STEP20  EXEC PGM=IEFBR14\n           //* *****************************************************************\n           //* *\n           )N  DESCRIPTION OF JOB STEP FUNCTION GOES HERE.\n           //*\n           //*\n           //* *****************************************************************\n           )N\n           )N  FOR EACH DD CARD POINTING TO A SYSOUT, A DESCRIPTION<SHOULD BE\n           )N  PROVIDED, EXPLAINING WHY THE DD IS PRESENT.  FOR EXAMPLE:\n           )N\n           //SYSPRINT DD SYSOUT=&WTR             PL/I PRINT DATASET\n           //SYSUDUMP DD SYSOUT=&WTR             PL/I DUMP  DATASET\n           )N\n           )N  THE LAST LINE OF THE PROC SHOULD BE A CENTERED COMMENT LINE\n           )N  CONTAINING THE NAME OF THE PROC AND INDICATING THE PROC IS DONE.\n           )N\n           /************************* END OF TEMPLATE PROC *********************\n-\n-\n-\n-\n-\n-                                           - 94 -\n-\n1\n-\n-\n                        Figure 11.  Model which illustrates use of the COND\n                                    parameter on a JCL EXEC statement.\n0          )N   MODEL FOR THE COND= PARAMETER ON AN EXEC\n           )N\n           )N   TO NOT EXECUTE A SINGLE EXEC STEP WITHIN A PROC:\n           )N\n           )N      //STEPNAME EXEC PROCNAME,COND.STEPNAME=(0,LE)\n           )N\n           )N     NEVER RUN:                         COND=(0,LE)\n           )N     RUN IF RETURN CODE < N:            COND=(N,LE)\n           )N     RUN IF X <= RETURN CODE <= Y:      COND=(X,GT,Y,LT)\n           )N     RUN IF RETURN CODE = N:            COND=(N,NE)\n           )N     RUN IF RETURN CODE \u00ac= N:           COND=(N,EQ)\n           )N     ALWAYS RUN:                        COND=(0,GT)\n           )N     RUN EVEN IF PREVIOUS STEP ABENDED: COND=EVEN\n           )N\n           )N     IMPORTANT: COND CANNOT BE USED WITH THE FIRST STEP OF A JOB\n           )N                BECAUSE THERE IS NO PREVIOUS STEP; IT WILL BE IGNOR\n           )N\n-\n0                       Figure 12.  Model of a date line in an ISPF panel.\n0          %                                                              +DATE:\n-\n0                       Figure 13.  Model of a time line in an ISPF panel.\n0          %                                                              +TIME:\n-\n-\n-\n-                                           - 95 -\n-\n1\n-\n-\n                        Figure 14.  Model of the comment block which should be\n                                    included in the )ATTR section of every panel\n0          )N\n           )N   THIS IS A MODEL OF THE COMMENT BLOCK WHICH SHOULD BE INCLUDED IN\n           )N   THE )ATTR SECTION OF EVERY PANEL DEFINITION.\n           )N\n           )N   DO A \"C TEMPLATE PANELNAME ALL\" TO PROPAGATE THE PANEL NAME.\n           )N\n           /********************************************************************\n           /*  PANEL       -  TEMPLATE\n           )N\n           )N  BE SURE TO FILL IN PURPOSE, AUTHOR, DATE WRITTEN, ETC.\n           )N\n           /*  PURPOSE     - ??\n           /*  AUTHOR      - ??\n           /*  WRITTEN     - mm/dd/yy\n           /*  MODIFIED    - N/A\n           /*  IN DIALOG   - dialog name\n           /*  INVOKED BY  - module name\n           /*  COMMENTS    -\n           /*  MODS        - date/userid/description of change\n           /********************************************************************\n-\n-\n-\n-\n-\n-\n-\n0                                           - 96 -\n-\n1\n-\n-\n                        Figure 15.  Model of ISPF panel code used to validate\n                                    and fully-qualify a data set name in a panel\n0          )N\n           )N  MODEL TO VALIDATE A DATASET NAME.\n           )N\n           )N  DO \"C AAAA XXXX ALL\" WITH FULL APPLICATION ID\n           )N  DO \"C BBB  XXX  ALL\" TO GET VARIABLE NAME\n           )N\n           )N  AFTER PROCESSING, VARIABLE &AAAAPBBB IS VERIFIED AS A VALID DSNAM\n           )N        IT CAN BE SPECIFIED WITH OR WITHOUT QUOTES.  IF NO QUOTES,\n           )N        THEN THE TSO USERID WILL BE PREFIXED FOR LOCAL USE.\n           )N\n           )N   VARIABLE &AAAAFBBB IS GENERATED AS A FUNCTION VARIABLE, CONTAINI\n           )N        THE FULLY-QUALIFIED VARIABLE WITHOUT QUOTES (READY FOR\n           )N        INSERTION INTO JCL)\n           )N\n           )N   A VER(&AAAAPBBB,NONBLANK) MAY BE DESIRED.\n           )N\n           /***********************************************************/\n           /*    VALIDATE &AAAAPBBB INTO STANDARD DATASET NAME        */\n           /***********************************************************/\n             VER (&AAAAPBBB,DSNAME)  /* MUST BE VALID DATASET NAME, IF PRESENT *\n             IF (&AAAAPBBB \u00ac= &Z)    /* IF DSNAME IS PRESENT, FULLY QUALIFY IT *\n                 &TEMP1 = TRUNC(&AAAAPBBB,1)  /* GET FIRST CHAR (QUOTE?)       *\n                 &TEMP2 = .TRAIL\n                 IF (&TEMP1 \u00ac= '''')  /* NO QUOTE, THEREFORE, QUALIFY IT */\n                     &AAAAFBBB = '&ZUSER.&AAAAPBBB'\n                 IF (&TEMP1 = '''')   /* ALREADY QUALIFIED */\n                     &AAAAFBBB = TRUNC(&TEMP2,'''')  /* LOP OF TRAILING QUOTE */\n-\n-\n-\n-\n-\n                                            - 97 -\n-\n1\n-\n-\n                        Figure 16.  Model of a comment line in a PL/I program.\n0           /*\n-\n0                       Figure 17.  Model of a comment box in a PL/I program.\n0           %SKIP(002);\n            /*******************************************************************\n            /*\n            /*\n            /*\n            /*******************************************************************\n-\n0                      Figure 18.  Model of a double comment box in a PL/I progr\n0           %SKIP(004);\n            /*******************************************************************\n            /*******************************************************************\n            /**\n            /**\n            /**\n            /**\n            /*******************************************************************\n            /*******************************************************************\n-\n-\n-\n-\n-\n                                            - 98 -\n-\n1\n-\n-\n                       Figure 19.  Model of an error on-unit in a PL/I program.\n0           %SKIP(2);\n            /*******************************************************************\n            /*\n            /*  RUN-TIME ERROR HANDLING\n            /*\n            /*******************************************************************\n            ON ERROR\n               BEGIN;\n                   ON ERROR SYSTEM;  /* PREVENT RECURSIVE ERROR LOOPING */\n           )N DO ANY CLEANUP HERE\n           )N CALL ANY SPECIAL TERMINATION ROUTINES\n                   PUT FILE(SYSPRINT) EDIT\n                       ('ONLOC IS ',ONLOC)\n                       (SKIP,A,A);\n                   SIGNAL ERROR;  /*  INSURE THAT THE PROGRAM STOPS  */\n                   END;\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                            - 99 -\n-\n1\n-\n-\n                       Figure 20.  Model of a SELECT clause in a PL/I program.\n0           SELECT (EXPRESSION);\n           )N IF (EXPRESSION) IS NOT SUPPLIED, INDIVIDUAL WHEN'S ARE TRUTH-TESTE\n               WHEN (RESULT1)   /* RESULT OF EXPRESSION = RESULT1 */\n           )N  YOU CAN ALSO USE: (RESULT1, RESULT2, ETC.)\n                   DO;\n           )N         ACTION1\n                   END;\n               OTHERWISE         /* NONE OF THE ABOVE */\n                   DO;\n           )N         OTHER ACTION\n                   END;\n               END;     /* SELECT ON EXPRESSION */\n           )N IT IS IMPORTANT TO SPECIFY THE EXPRESSION AT THE END OF THE SELECT\n           )N     SO THAT YOU CAN MATCH UP ENDS MORE EASILY.\n           )N IF NO (EXPRESSION) ON SELECT, YOU CAN DO SUCH THINGS AS:\n           )N     WHEN ( (X = 1) | (Y > 3))\n-\n0                      Figure 21.  Model of an edit-directed GET statement\n                                   in a PL/I program.\n0           GET FILE(FILENAME)\n                EDIT (VARIABLES)\n                     (FORMATS);\n-\n-\n-\n-\n-\n-                                          - 100 -\n-\n1\n-\n-\n-\n-                                   Appendix F\n0                                  CONTRIBUTORS\n-\n           Fred Bauer\n0          Sharon L. Brian\n           Texas Instruments Inc.\n           P.O. Box 225621 MS 3915\n           Dallas, TX  75265\n0          Art Burchfield\n           IBM\n           P.O. Box 390\n           Poughkeepsie, NY  12602\n0          Joe Jankowski\n           New York Life Insurance\n           Cokesbury Road\n           Lebanon, NJ  08833\n0          James W. Lorenger\n           Lockheed - California Company\n           Burbank, CA  91520-8319\n           (818)847-7335\n0          John McConnell\n           AT&T Information Systems\n           Orlando, FL\n0          Harvey Miller\n           Fireman's Fund Insurance / CPD\n           1600 Los Gamos Dr.\n           San Rafael, CA  93911\n           (415) 492-5520\n-\n                                           - 101 -\n-\n1\n-\n-\n           Neil H. Nix\n           Lockheed-Georgia Co.\n           Dept. 87-11 Zone 450\n           Marietta, GA  30063\n           (404) 424-2296\n0          Ross Pavlac\n           First National Bank of Chicago\n           1 First National Plaza, Suite 0272\n           Chicago, IL 60670\n           (312) 407-1549\n0          Cindy Stegemeier\n           Pennzoil Corp.\n           P.O. Box 2967\n           Houston, TX 77252-2967\n           (713) 546-8318\n0          Gus Trujillo\n           Continental Bank\n           231 South La Salle Street\n           Chicago, IL  60693\n0          Brian J. Vohs\n           Exxon Co. USA\n           P.O. Box 2180\n           Houston, TX 77001\n           (713) 965-7534\n0          Keith Warltier\n           IBM ISG\n           Loc J307 Dept 873\n           1241 E. Main St.\n           Stamford, CT  06902\n-\n-\n-\n-                                          - 102 -\n-\n1\n-\n-\n-\n-                                  BIBLIOGRAPHY\n0          Bauer, Fred.  \"ISPF Experience at Moore-McCormack Lines\".\n              GUIDE 54 Proceedings, May, 1982, pp. 749-754.\n+             _____ __ ___________\n0          Biafore, John.  \"Enhancing SPF by Adding Menus\".  GUIDE 50\n+                                                            _____ __\n              Proceedings, May, 1980, pp. 1123-1146.\n+             ___________\n0          Bork, Alfred.  Learning with Computers.  Digital Press,\n+                         ________ ____ _________\n              Bedford, Mass.,  1981, 286 pp.\n0          Brooks, Jr., Frederick P.  The Mythical Man-Month.  Addison-\n+                                     ___ ________ _________\n              Wesley, Reading, Mass.,  1975.\n0          Brown, P.J.  \"Error Messages: the Neglected Area of the\n              Man/Machine Interface?\".  Communications of the ACM,\n+                                       ______________ __ ___ ___\n              April, 1983, pp. 246-249.\n0          Clark, I.A.  \"Software Simulation As a Tool For Usable\n              Product Design\".  IBM Systems Journal, No. 3, 1981, pp.\n+                               ___ _______ _______\n              272-293.\n0          Currier, Richard L.  \"The Secret of 'User Friendliness'\".\n              ICP Interface, Jan-Feb 1983, pp. 15-16.\n+             ___ _________\n0          Dean, M.  \"How a Computer Should Talk to People\".  IBM\n+                                                             ___\n              Systems Journal, No. 4, 1982, pp. 424-453.\n+             _______ _______\n0          DeVoe, Cort.  \"SPF - A Tutorial\".  GUIDE 53 Proceedings,\n+                                             _____ __ ___________\n              November 8-13, 1981, pp. 517-536.\n0          Fitzgerald, Kathy.  \"Flawed Screen Formats Corrected by\n              Designers\".  Software News, 12/7/81, pg. 40.\n+                          ________ ____\n0          Fried, Louis.  \"Nine Principles for Ergonomic Software\".\n              Datamation, November, 1982, pp. 163-166.\n+             __________\n0          Galitz, Wilbert.  \"Human Engineering in Screen Design\".\n              Journal of Systems Management, May, 1983, pp. 6-11.\n+             _______ __ _______ __________\n0                                          - 103 -\n-\n1\n-\n-\n           Gilb, Tom, and Weinberg, Gerald M.  Humanized Input:\n+                                              _________ _____\n              Techniques for Reliable Keyed Input.  Winthrop\n+             __________ ___ ________ _____ _____\n              Publishers, Cambridge, Massachusetts, 1977, 283 pp.\n0          Gilb, Tom.  \"Laws of Unreliability\".  Datamation, March,\n+                                                __________\n              1975, pp. 81-85.\n0          Gutz, Steve, Wasserman, Anthony I., and Spier, Michael J.\n              \"Personal Development Systems for the Professional\n              Programmer\".  Computer, April, 1981, pp. 45-53.\n+                           ________\n0          Hansen, W. J.  \"User Engineering Principles for Interactive\n              Systems\".  Proceedings of the Fall Joint Computer\n+                        ___________ __ ___ ____ _____ ________\n              Conference, 39, AFIPS Press, Montvale, New Jersey, 1971,\n+             __________\n              pp. 523-532.\n0          Helander, G.A.  \"Improving System Usability for Business\n              Professionals\".  IBM Systems Journal, No. 3, 1981, pp.\n+                              ___ _______ _______\n              294-305.\n0          Hoernes, Gerry.  \"Using the System Productivity Facility\n              (SPF) to Provide Function to the End User\".  GUIDE 52\n+                                                          _____ __\n              Proceedings, May 10-14, 1981, pp. 445-465.\n+             ___________\n0          Hoernes, Gerry.  \"SPF Control and Flow\".  SHARE 58\n+                                                    _____ __\n              Proceedings, March, 1982, pp. 1541-1550.\n+             ___________\n0          IBM Corporation.  IBM 3270 Screen Design Student Text.  IBM\n+                            ___ ____ ______ ______ _______ ____\n              Corp., 1974, 69 pp. IBM #SR20-4441.\n0          Johnson, Bengt, et al.  \"The Human-Computer Interface in\n              Commercial Systems Investigations of Dialog Design\n              Factors and Usability with Alphanumeric Display\n              Terminals\". 1981, NTIS document PB81-191785.\n0          Joslin, Phil H.  \"System Productivity Facility\".  IBM\n+                                                            ___\n              Systems Journal (reprint no. G321-5155), No. 4, 1981, pp.\n+             _______ _______\n              388-406.\n0          Kidder, Tracy.  The Soul of a New Machine.  Atlantic-Little,\n+                          ___ ____ __ _ ___ _______\n              Brown, 1981, 293 pp.\n0          Kostyun, Jan.  \"IBM ISPF dialog manager: More than meets the\n              eye\".  Computerworld, September 24, 1984, p. 69.\n0                                          - 104 -\n-\n1\n-\n-\n           Kreiser, Frederick Jr.  \"Using the 'Structured Programming\n              Facility' of TSO\".  GUIDE Proceedings, November, 1975,\n+                                 _____ ___________\n              pp. 746-750 and 1221-1225.\n0          Martin, James.  Design of Man-Computer Dialogues.  Prentice-\n+                          ______ __ ____________ _________\n              Hall, Englewood Cliffs, New Jersey, 1973, 559 pp.\n0          Maurer, M. E.  \"Full-screen testing of interactive\n              applications\".  IBM Systems Journal (reprint no.\n+                             ___ _______ _______\n              G321-5194), Vol. 22, No. 3, 1983, pp. 246-261.\n0          Morland, D. Verne.  \"Friendliness\".  Datamation February,\n+                                               __________\n              1982, pg. 224.\n0          Morland, D. Verne.  \"Human Factors Guidelines for Terminal\n              Interface Design\".  Communications of the ACM, July,\n+                                 ______________ __ ___ ___\n              1983, pp. 484-494.\n0          Norman, Donald L.  \"Design Rules Based on Analyses of Human\n              Error\".  Communications of the ACM, April, 1983, pp.\n+                      ______________ __ ___ ___\n              254-258.\n0          Pavlac, Ross.  \"SPF User Experience\".  GUIDE 53 Proceedings,\n+                                                 _____ __ ___________\n              November 8-13, 1981, pp. 662-670.\n0          Pavlac, Ross.  \"ISPF Hazards and Pitfalls\".  GUIDE 56\n+                                                       _____ __\n              Proceedings, May, 1983, pp. 800-810.\n+             ___________\n0          Pavlac, Ross.  \"ISPF Table Handling:  A Report from the\n              Combat Zone\".  This paper was presented at GUIDE 57,\n              November 6-11, 1983.  Contact the GUIDE ISPF Project\n              Manager for a copy (see address on Reader Comment Card).\n0          Pirsig, R.  Zen and the Art of Motorcycle Maintenance.\n+                      ___ ___ ___ ___ __ __________ ___________\n              Morrow and Co., 1974.\n0          Relles, Nathan, and Price, Lynne A.  \"A User Interface for\n              Online Assistance\".  Proceedings of the 5th International\n+                                  ___________ __ ___ ___ _____________\n              Conference on Software Engineering IEEE, 1981, pp.\n+             __________ __ ________ ___________\n              400-408.\n0          Roberts, Teresa L., and Moran, Thomas P.  \"The Evaluation of\n              Text Editors:  Methodology and Empirical Results\".\n              Communications of the ACM, April, 1983, pp. 265-283.\n+             ______________ __ ___ ___\n0                                          - 105 -\n-\n1\n-\n-\n           Schneiderman, Ben.  Software Psychology: Human Factors in\n+                              ________ __________  _____ _______ __\n              Computer and Information Systems.  Winthrop Publishers,\n+             ________ ___ ___________ _______\n              Cambridge, Massachusetts, 1980, 320 pp.\n0          Schneiderman, Ben.  \"Designing Computer System Messages\".\n              Communications of the ACM, September, 1982, pp. 610-611.\n+             ______________ __ ___ ___\n0          Snyders, Jan.  \"User Manuals That Make Sense\".  Computer\n+                                                          ________\n              Decisions, April, 1981, pp. 127-186.\n+             _________\n0          Stegemeier, Cindy.  \"ISPF Dialog Development Methods\".\n              GUIDE 58 Proceedings, March 1984, pp. 837-847.\n+             _____ __ ___________\n0          Sterling, Theodor D.  \"Guidelines for Humanizing\n              Computerized Information Systems:  A Report from Stanley\n              House\".  Communications of the ACM, November, 1974, pp.\n+                      ______________ __ ___ ___\n              609-613.\n0          Wasserman, Anthony I.  \"The Design of 'Idiot-proof'\n              Interactive Programs\".  Proceedings of the National\n+                                     ___________ __ ___ ________\n              Computer Conference, 42, AFIPS Press, Montvale, New\n+             ________ __________\n              Jersey, 1973, pp. M34-38.\n0          Wasserman, Anthony I.  \"User Software Engineering and the\n              Design of Interactive Systems\".  Proceedings of the 5th\n+                                              ___________ __ ___ ___\n              International Conference on Software Engineering, IEEE,\n+             _____________ __________ __ ________ ___________\n              1981, pp. 387-393.\n0          Weinberg, Gerald M.  The Psychology of Computer Programming,\n+                               ___ __________ __ ________ ___________\n              Van Nostrand Reinhold, New York, 1971.\n0          Weiss, Edmond H.  \"Fair-Weather Friendliness\".  Datamation,\n+                                                          __________\n              November, 1983, pp. 327-328.\n-\n-\n-\n-\n                                           - 106 -\n-\n1\n-\n-\n-\n-                                           INDEX\n-\n           % sign ... see CLISTs\n0          application commands ... see panels\n           ATTN exits ... see CLISTs\n           attribute characters ... see panel format\n0          CLISTs ... 59\n              % sign, invoking a CLIST with ... 59\n              ATTN exits ... 59\n              file tailoring vs. TSO EDIT ... 59\n              global variables ... 59\n              line mode display ... 59\n              TERMIN command ... 59\n           color use ... see panel format\n           concatenation sequence ... see ISPF libraries\n           CONTROL service ... 31\n              subparameters\n                 DISPLAY ... 31\n                 END ... 32\n                 ENTER ... 32\n                 LOCK ... 31\n                 NONDISPL ... 32\n           customization ... see ISPF libraries\n0          dialog functions\n              error processing ... 58\n              testing ... see dialog test\n              verifying input values ... 58\n           dialog test (ISPF/PDF option 7) ... 57\n              FUNCTIONS option\n                 testing functions ... 57\n           DISPLAY option ... see dialog test\n              testing panel formats ... 57\n-\n                                           - 107 -\n-\n1\n-\n-\n           END command ... see tables\n0          file tailoring ... 60, also see CLISTs\n              batch vs. online execution ... 39\n              skeletons ... 39\n              uses of ... 39\n           FUNCTIONS option ... see dialog test\n0          global variables ... see CLISTs\n0          highlighting ... see panel format\n0          intensity ... see highlighting\n           ISPEXEC ... see programs\n           ISPF libraries ... also see ISPTLIB\n              combining ISPF libraries ... 54\n              concatenation sequence\n                 enforcing installation standard ... 48, 74\n                 list of possible sequences ... 51\n              customization of system-wide ISPF components ... 48\n              production library ... 55, 56\n              test library ... 55, 56\n              tracking changes\n                 by manual inspection ... 56\n                 using a Data Dictionary ... 56\n                 using ISPF panel-driven system ... 56\n                 using SMP ... 56\n                 using text compare program ... 56\n              using SMP for library maintenance ... 51\n           ISPLINK ... see programs\n           ISPLNK ... see ISPLINK\n           ISPTLIB ... see tables, see new application profiles\n0          line mode display ... CLISTs\n           locking the keyboard ... see CONTROL service\n0          member names ... see naming standards\n           messages ... 34\n              alarm ... 35\n              coding ... 58\n              default message area ... 7, 34\n              designing ... 34\n              format ... 34\n              help panels ... 35\n0                                          - 108 -\n-\n1\n-\n-\n              in table displays ... see tables\n              informatory ... 35\n              long message ... 7\n              message data set blocksize and member size ... 35\n              optimizing message retrieval ... 35\n              output facilities ... 34\n              overlaying panel fields ... 34\n              positioning the cursor ... 35\n              punctuation ... 34\n              short message ... 7\n              vocabulary ... 34\n           models ... 40, also see tables\n              adding models and classes ... 40\n                 examples ... 67\n                 model hierarchy ... 40\n                 two possible methods ... 40\n              NOTE lines ... 41\n              sample models ... 87\n0          naming standards ... 2\n              examples ... 5\n              identifiers\n                 dialog id ... 4\n                 group id ... 3\n                 installation code ... 5\n                 system id ... 3\n                 type ... 4\n                 version ... 5\n              member names ... 3\n                 IBM standard ... 6\n                 messages ... 5\n              variables ... 2\n           new application profiles ... 60\n              NEWAPPL parameter ... 60\n              PF keys\n                 resetting values ... 60, 81\n              profile copied from ISPTLIB ... 60\n           NEWAPPL ... see new application profiles\n0          padding ... see panel format\n           panel format\n              )BODY section ... 11, 32\n                 attribute character ... 11\n                 field continuation ... 11\n0                                          - 109 -\n-\n1\n-\n-\n                 number of lines ... 11\n              attribute characters ... 8\n              columnar headings ... 18, 23\n              command line ... 8, 10, 12\n              comment lines ... 8\n              date field ... 9\n              description fields ... 15\n              directive line ... 13, 17, 22, 23, 25, 30\n                 contents ... 25\n              displaying PDF version number ... 9\n              ENTER and END meanings ... 13\n              exiting from a panel ... 23\n              field justification ... 18, 23\n              fields in upper case ... 12, 14, 15, 21\n              function line ... 13\n              high intensity fields ... 9, 10\n              highlighting ... 24\n              highlighting and color use ... 7, 9, 10\n              information fields\n                 listing valid input values ... 16, 17\n              input fields ... 7, 12, 16, 19, 24, 25, 27\n                 numeric data in a table ... 24\n                 padding ... 7, 16, 24\n                 placement ... 19, 24\n              instruction fields ... 20\n              instruction line(s) ... 15, 18, 23, 27\n              line commands ... 23\n              long message line ... 13\n              low intensity fields ... 10\n              option lines ... 20, 28\n                 alignment of ... 21, 28\n                 option code ... 20, 22, 28\n                 option description ... 21, 28\n                 option title ... 21, 22\n                 order of ... 21, 28\n              padding ... 19\n              panel components ... 11\n              reducing reading time ... 28\n              reserved lines\n                 line  1 (also see title line) ... 12\n                 line  2 (also see command line) ... 12\n                 line  3 (also see long message line) ... 13\n                 line 22 (also see directive line) ... 13\n                 line 23 (also see directive line) ... 13\n0                                          - 110 -\n-\n1\n-\n-\n              sample panel format ... 11\n              selection field ... 24\n              split-screen ... 8\n              standard arrow symbol ... 10, 12\n              text fields ... 8\n              text lines ... 30, 31\n              time-of-day field ... 9, 13\n              titles\n                 subtitles ... 13\n                 title line ... 10, 12, 25, 27\n              tutorials\n                 continuation panels ... 26\n                 hierarchy ... 28\n                 options which conflict with ISPF commands ... 28\n                 overview topic ... 26, 29\n                 text ... 25, 27\n              types of panels\n                 confirmation panel ... 30\n                 data entry panel ... 15\n                 informatory panel ... 31\n                 multiple column data entry panel ... 18\n                 non-display panel ... 32\n                 selection menu ... 20\n                 table display panel ... 23\n                 tutorial selection menu ... 27\n                 tutorial text panel ... 25\n              userid field ... 9\n              ZUP ... 26, 28\n           panels ... 7\n              )ATTR section ... 9\n              )BODY section ... 9, 57, also see panel format\n              )INIT section ... 9, 57\n              )MODEL section ... 9\n              )PROC section ... 9, 57\n              )REINIT section ... 9\n              application commands ... 8\n              default message areas ... see messages\n              designing panel layouts ... 57\n              testing ... also see dialog test\n              types of panels ... see panel format\n           performance\n              improved search time for ISPF members ... 54\n           PF key values ... see new application profiles\n           PL/I ... see programs\n0                                          - 111 -\n-\n1\n-\n-\n           programs ... 44\n              converting CLISTs/EXECs to programs ... 58\n              function variables in programs ... 43\n              ISPEXEC\n                 in ISPF Version 2 ... 47\n              ISPLINK module ... 44\n                 dynamic LOAD of ISPLINK ... 44\n                 FETCH, RELEASE ISPLINK ... 44\n              length arrays for VCOPY and VREPLACE ... 42\n              linkediting ... 44\n              saving ISPF service return codes ... 42\n              VDEFINE service ... 43, 45\n                 reducing complexity of call from PL/I ... 45\n              VDELETE service ... 45\n                 reducing complexity of call from PL/I ... 46\n0          RETURN command ... see tables\n0          screens ... 8, see panels\n           SMP (System Modification Program) ... also see ISPF\n              libraries\n              member name requirements ... 3\n           split-screen ... see panel format\n0          tables ... 36\n              command field processing ... 37\n              display processing\n                 model for ... 37, 62\n              extension variables ... 36\n              ISPF/PDF table processing ... 37\n              ISPTLIB enqueue ... 38\n              messages ... 36\n              MODEL line ... 38\n              processing the END or RETURN command ... 37\n              processing user-modified rows ... 37\n              providing a CANCEL command ... 38\n              scroll PF keys ... 36\n              select code field ... 38\n              table service return codes ... 38\n                 from TBOPEN service ... 38\n                 from TBQUERY service ... 38\n              TBCREATE service ... 38\n              TBDISPL ... see table display processing\n              values propagated through table rows ... 38\n0                                          - 112 -\n-\n1\n-\n-\n           TBCREATE service ... see tables\n           TBDISPL service ... see tables\n           TBOPEN service ... see tables\n           TBQUERY service ... see tables\n           TERMIN command ... see CLISTs\n           TSO EDIT ... see CLISTs\n           tutorials ... see panel format\n0          variables ... see naming standards\n           VCOPY service ... see programs\n           VDEFINE service ... see programs\n           VER statement ... 32\n           verifying input values ... 58, see VER statement\n           VREPLACE service ... see programs\n0          ZUP ... see panel format\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-                                          - 113 -\n-\n1\n-\n-\n                               READER COMMENT CARD\n-\n           Please use  this page to  comment on this  GUIDE publication\n           and mail it to:\n0                GUIDE International Corporation\n                 ISPF Project Manager\n                 111 East Wacker Drive\n                 Suite 600\n                 Chicago, Illinois  60601\n-          Was this document applicable to your installation?\n-\n0          Was this document clear and understandable?\n-\n0          Did this  document help you to  set up a  better environment\n           for the users of your installation?\n-\n0          Please include any other comments that would help us to make\n           this a better publication.\n-\n0          Please complete the  following information,  so that  we can\n           respond to your comments.\n0          Name   : _________________________________  Date: __________\n           Company: _________________________________\n           Mailing: _________________________________\n           Address  _________________________________\n-                                          - 114 -\n-\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UNDOC": {"ttr": 4614, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "          ISPF/PDF edit contains 2 line command that are not documented.\n\n          First is the UC command.\n          It will take data and translate it to upper-case.\n          You may specify UC on a single line or UC followed by a\n          number. For example, UC99 will set the next 99 lines to upper\n          case. The block command is UUC, UCC or UCUC. They all work.\n\n          Next is the LC command.\n          It will take data and translate it to lower-case.\n          You may specify LC on a single line or LC followed by a\n          number. For example, LC99 will set the next 99 lines to lower\n          case. The block command is LLC, LCC or LCLC. They all work.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT461/FILE461.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT461", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}