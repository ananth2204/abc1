{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011939000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE406.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE406.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\x0c'", "DS1TRBAL": "b'\\x1b\\xa0'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\xec\\x00\\x05\\x02\\xec\\x00\\n\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04a\\x00V\\x01\\x19\\t\\x7f\\x01\\x19\\t\\x7f\\x16D\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf7@@@'", "ispf": {"version": "04.97", "flags": 0, "createdate": "2019-04-07T00:00:00", "modifydate": "2019-04-07T16:44:56", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-497"}, "text": "REGULAR CBT TAPE - VERSION 497    FILE:  406\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT497.FILE406\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 10 MEMBERS COUNTED; CUMULATIVE SIZE IS 2,224 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   04/07/19    16:44:56    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE01": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00#\\x01\\x16\\x17?\\x01\\x16\\x17?\\x17T\\x00$\\x00\\x17\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2016-06-21T00:00:00", "modifydate": "2016-06-21T17:54:23", "lines": 36, "newlines": 23, "modlines": 0, "user": "SBGOLOB"}, "text": "Notes about CQX.\n\nThe CQ program, called CQX by me, will cancel jobs in the print queue,\njobs that ALL HAVE THE SAME NAME.  Sometimes CQX will cancel active\njobs too, so you have to be careful.\n\nCQX uses IBM subsystem calls to determine the status of jobs, and\nalso to cancel them.  By nullifying return code 28 from the SSOBRETN\ncall, you can use CQX to purge Started Tasks and TSU's which are on\nthe print queue, as well as being able to purge jobs.  See the code\nfor details how to do this.  The code is shipped with normal RC=28\nprocessing in place.\n\nSince CQX uses IBM system services, and they may change over system\nreleases, we have only as much control as we can have, manipulating\nthe IBM services.  (In other words, this isn't completely \"our\nprogram\".)\n\nI haven't tested CQX enough, either with RC=28 nullified or not, to\nknow if, and when, it will (for sure) cancel running jobs, as well as\njobs that are merely on the print queue (see next paragraph).\n\n(Found out that it will cancel running JOB's either way, but not\nrunning STC's or TSU's, the way it is currently coded.  STC's and\nTSU's on print queue are cancelled if RC=28 is nullified, but\nrunning STC's or TSU's are not cancelled.)\n\nIn macro IEFSSCS (now in SYS1.MODGEN, formerly in SYS1.MACLIB long\nago), IBM has added a new return code 32, for the SSOBRETN call.\nI haven't tested that either, but I changed the program to\naccommodate it, with a new message if it ever occurs.\n\n\nS. Golob   (sbgolob@cbttape.org)   June 2016\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE406": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04a\\x00P\\x01\\x19\\t\\x7f\\x01\\x19\\t\\x7f\\x16D\\x00P\\x00P\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf7@@@'", "ispf": {"version": "04.97", "flags": 0, "createdate": "2019-04-07T00:00:00", "modifydate": "2019-04-07T16:44:50", "lines": 80, "newlines": 80, "modlines": 0, "user": "CBT-497"}, "text": "//***FILE 406 is from Ed Molnar of Computer Data Systems and        *   FILE 406\n//*           contains two TSO command processors.  This file was   *   FILE 406\n//*           originally on the CBT Tape many years ago, before     *   FILE 406\n//*           Arnie Casinghino started doing his wholesale          *   FILE 406\n//*           deletions.  I put it back because the programs,       *   FILE 406\n//*           although old, are very useful.  The two CPs are:      *   FILE 406\n//*           CQ (I call it CQX), and FIND.                         *   FILE 406\n//*                                                                 *   FILE 406\n//*           email:  sbgolob@cbttape.org                           *   FILE 406\n//*                                                                 *   FILE 406\n//*       Descriptions:                                             *   FILE 406\n//*                                                                 *   FILE 406\n//*           A. CQX  (renamed from CQ)                             *   FILE 406\n//*                                                                 *   FILE 406\n//*              (Modified by S.Golob to increase GETMAIN sizes.)   *   FILE 406\n//*                                                                 *   FILE 406\n//*              This CP is used to cancel and delete all jobs      *   FILE 406\n//*              with a given jobname, off the input and output     *   FILE 406\n//*              queues.  This command only authorizes itself       *   FILE 406\n//*              when calling the subsystem interface.  This        *   FILE 406\n//*              command, as coded, uses an \"authorizing SVC\",      *   FILE 406\n//*              but if you authorize it during linkedit, and       *   FILE 406\n//*              run it from an APF authorized library, you don't   *   FILE 406\n//*              need the SVC.  The SVC number must be changed for  *   FILE 406\n//*              the authorizing of this function to what ever      *   FILE 406\n//*              number is used for your installation.  This        *   FILE 406\n//*              should be the only installation dependent item     *   FILE 406\n//*              in this code.  The format for this command is:     *   FILE 406\n//*              \"CQ jobname\", which will purge all jobs having     *   FILE 406\n//*              the given jobname (even running ones), or          *   FILE 406\n//*                                                                 *   FILE 406\n//*              \"CQ (jobname(jobid),jobname(jobid)....jobname)\"    *   FILE 406\n//*                                                                 *   FILE 406\n//*              which will only kill the jobs having the given     *   FILE 406\n//*              job numbers.                                       *   FILE 406\n//*                                                                 *   FILE 406\n//*              Be very careful.                                   *   FILE 406\n//*                                                                 *   FILE 406\n//*              (Tested on z/OS 2.2 and it seems to purge          *   FILE 406\n//*              running jobs, but when RC=28 from SSOBRETN is      *   FILE 406\n//*              nullified, it purges STC's and TSU's in the        *   FILE 406\n//*              print queue, but not those that are running.)      *   FILE 406\n//*              See the code to find out how to nullify RC=28      *   FILE 406\n//*              from the SSOBRETN call.  The code is not being     *   FILE 406\n//*              shipped to do that.  (Safer.)                      *   FILE 406\n//*                                                                 *   FILE 406\n//*           B. FIND                                               *   FILE 406\n//*                                                                 *   FILE 406\n//*              Fixed for z/OS 2.2.  UCB routines, DASD types      *   FILE 406\n//*              updated.  (Original program, written in 1978, is   *   FILE 406\n//*              still included as member FIND01.)                  *   FILE 406\n//*                                                                 *   FILE 406\n//*              This is a data set search routine.  The idea is    *   FILE 406\n//*              to find cataloged and all uncataloged copies of    *   FILE 406\n//*              the data set name.                          .      *   FILE 406\n//*                                                                 *   FILE 406\n//*              The CP prompts for the dataset name, and does      *   FILE 406\n//*              some standard ckecking.  It the searches the       *   FILE 406\n//*              catalog to find the entry.  After the catalog is   *   FILE 406\n//*              searched it then searches the UCB entries and      *   FILE 406\n//*              compares them with our DASD types.  This list is   *   FILE 406\n//*              incorprated within the code and may be added to    *   FILE 406\n//*              easily.  It obtains the volume name and ckecks     *   FILE 406\n//*              the VTOC for the Format 1 DSCB.  Also, if there    *   FILE 406\n//*              is a alternate path there is a second address in   *   FILE 406\n//*              the tabel pointing to the device.  Therfore a      *   FILE 406\n//*              second search is done and if a 'hit' is made a     *   FILE 406\n//*              second message is produced.  A second character    *   FILE 406\n//*              table is put in for the convenience of others.     *   FILE 406\n//*                                                                 *   FILE 406\n//*                                                                 *   FILE 406\n//*              Sample output of FIND:                             *   FILE 406\n//*                                                                 *   FILE 406\n//*              SYS1.W$$.LINKLIB                                   *   FILE 406\n//*              DATASET CATALOGED ON VOL: VPWRKA                   *   FILE 406\n//*              DEV ADDRESS: D30 VOL: VPWRKA TYPE: 3390            *   FILE 406\n//*              DEV ADDRESS: D32 VOL: VPWRKC TYPE: 3390            *   FILE 406\n//*                                                                 *   FILE 406\n//*              (lower report also shows uncataloged copies)       *   FILE 406\n//*                                                                 *   FILE 406\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CQX": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x00\\x18\\x00\\x95!o\\x01\\x19\\t\\x7f\\x161\\x01z\\x01i\\x00(\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "1995-08-04T00:00:00", "modifydate": "2019-04-07T16:31:18", "lines": 378, "newlines": 361, "modlines": 40, "user": "SBGOLOB"}, "text": "CQ       CSECT\n*\n*        WRITTEN BY: ED MOLNAR\n*                    COMPUTER DATA SYSTEMS,INC. (CDSI)\n*                    BETHSDA MD.\n*                    (301) 567-1730 EXT.343\n*\n*        SUPPORT EMAIL:   SBGOLOB@CBTTAPE.ORG\n*\n*       THIS CP IS USED TO CANCEL AND DELETE ALL DATA SETS OFF THE\n*       QUEUE.  THIS COMMAND ONLY AUTHORIZES ITSELF WHEN CALLING\n*       SUBSYSTEM INTERFACE.  THE SVC NUMBER MUST BE CHANGED FOR THE\n*       AUTHORIZING OF THIS FUNCTION TO WHAT EVER NUMBER IS USED FOR\n*       YOUR INSTALLATION.  THIS SHOULD BE THE ONLY INSTALATION\n*       DEPENDENT ITEM IN THIS CODE.  THE FORMAT FOR THIS COMMAND IS:\n*       \"CQ JOBNAME\" OR \"CQ (JOBNAME(JOBID),JOBNAME(JOBID)....JOBNAME)\"\n*       THIS WILL REMOVE ONLY SELECTED JOBS WHEN GIVEN THE JOBID OR\n*       ALL JOBS WITH A SPECIFIED JOBNAME AND NO JOBID.  BE CAREFUL.\n*\n*       NULLIFYING RC=28 FROM SSOBRETN WILL ALLOW CANCELING OF\n*       STC'S AND TSU'S.  SEE COMMENTS IN SUBROUTINE CKRETN.\n*       RC=32 FROM SSOBRETN IS NEW, FROM IBM.\n*\n         SAVE      (14,12),,CQ-&SYSTIME-&SYSDATE\n         LR        R12,R15\n         USING     CQ,R12\n         LA        R11,SAVEAREA\n         ST        R11,8(,R13)\n         ST        R13,SAVEAREA+4\n         LR        R13,R11\n         USING     CPPL,R2                  CPPL DSECT.\n         LR        R2,R1                    SAVE CPPL.\n********************************************************************\n*\n*        GET USER INFO OFF CPPL.\n*\n********************************************************************\n         L         R1,CPPLPSCB              GET THE PSCB.\n         IC        R3,7(,R1)                GET USER ID LENGTH.\n         BCTR      R3,0                     SUBTRACT 1.\n         STH       R3,USERLEN               SAVE IT.\n         EX        R3,USER                  GET THE USERID.\n         CLI       16(R1),X'80'             OPER SET?\n         BL        SETUPARS                 NOPE.\n         OI        AUTHUSER,1               SET OPER FLAG.\nSETUPARS DS        0H\n         USING     PPL,R15                  PPL DSECT.\n         LA        R15,MYPPL                ADDRESS OF MYPPL.\n         MVC       PPLUPT(4),CPPLUPT        SAVE UPT.\n         MVC       PPLECT(4),CPPLECT        SAVE ECT.\n         LA        R0,MYECB                 ADDRESS OF MY ECB.\n         ST        R0,PPLECB                STORE IN PPL.\n         XC        MYECB,MYECB              CLEAR IT.\n         L         R0,=A(JOBS)              ADDRESS OF IKJPARS START.\n         ST        R0,PPLPCL                STORE IT IN PPL.\n         LA        R0,MYANS                 ADDRESS OF MY ANSWER.\n         ST        R0,PPLANS                STORE IT IN PPL.\n         MVC       PPLCBUF(4),CPPLCBUF      ADDRESS OF COMMAND BUFFER.\n         LA        R0,DUMMY                 DUMMY ROUTINE.\n         ST        R0,PPLUWA                STORE IT IN PPL\n         DROP      R15\nCALLPARS DS        0H\n         CALLTSSR  EP=IKJPARS,MF=(E,MYPPL)   CALL IKJPARS.\n         LTR       R15,R15                   GOOD RETURN?\n         BZ        OKPARS                    YEP,CONTINUE FORWARD.\n         XC        MSG1,MSG1                 OH NO,CLEAR MSG.\n         MVC       MSG1(14),=C'IKJPARS FAILED'  MOVE MSG.\n         BAL       R10,PUTMSG                LET THEM CRY.\n         B         FREEAREA                  GO CLEAN UP.\nOKPARS   DS        0H\n***********************************************************************\n*\n*            INIT FOR SUBSYSTEM INTERFACE.\n*\n***********************************************************************\nINITSSI  DS        0H\n         L         R0,GETSIZE               GET NUMBER OF BYTES.\n         GETMAIN   R,LV=(0)                 GET SOME MEMORY.\n         LR        R7,R1                    SAVE THE ADDRESS.\n         USING     SSOB,R7                  SET ADDRESABILITY.\n         LA        R5,SSCSBGN               GET THE BEGINING.\n         XC        SSOBEGIN(SSOBHSIZ),SSOBEGIN   CLEAR THE AREA.\n         MVC       SSOBID,=C'SSOB'          MOVE IN SSOB ID.\n         MVC       SSOBLEN,=AL2(SSOBHSIZ)   MOVE IN THE SIZE.\n         ST        R5,SSOBINDV              SAVE ADDR. OF REQUEST AREA.\n         ST        R7,SSOBPTR               SAVE POINTER OF OUR AREA.\n         OI        SSOBPTR,X'80'            SET FOR FUNCTION.\n***********************************************************************\n*\n*            SET TO READ IKJPARS.\n*\n***********************************************************************\n         USING     IKJPARMD,R11              DSECT FOR RETURNED INFO.\n         L         R11,MYANS                 ADDRESS OF ANSWER.\n         LA        R3,JOBNAME0               ADDRESS OF IKJ PROMPT.\nNEXTJOB  DS        0H\n         L         R5,0(,R3)                 GET THE ADDRESS.\n         TM        AUTHUSER,1                AUTH USER?\n         BO        CONTJOB                   YES,CONTINUE.\n         LH        R10,USERLEN               LENGTH OF USERID -1.\n         EX        R10,USERCOMP              COMPARE\n         BE        CONTJOB                   OK,JOB HAS USERID.\n         XC        MSG1,MSG1                 CLEAR MSG.\n         MVC       MSG1(32),=C'JOB MUST START WITH YOUR USER ID'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCONTJOB  DS        0H\n         LH        R4,4(,R3)                 GET THE LENGTH.\n         BCTR      R4,0                      SUBTRACT 1.\n         MVC       JOBNAME,=CL8' '           BLANK OUT THE JOB NAME.\n         MVC       JOBID,=CL8' '             BLANK OUT THE JOB ID.\n         EX        R4,NAME                   MOVE JOBNAME IN PLACE.\n         TM        14(R3),X'80'              TEST FOR JOB ID.\n         BNO       NOJOBID                   NOT FOUND.\n         LH        R4,12(,R3)                ITS HERE,GET THE LENGTH.\n         L         R5,8(,R3)                 GET THE ADDRESS.\n         BCTR      R4,0                      SUBTRACT 1 FROM LENGTH.\n         EX        R4,NAME2                  MOVE IN THE JOB ID.\n         MVC       SSOBFUNC,=AL2(SSOBCANC)   TELL IT THE NEW FUNCTION.\n         MVC       SSCSDIMP,=H'16'           TELL IT THE NEW ARRAY SIZ.\n         OI        SSCSFLGS,SSCSCOUT         SET THE PURGE FLAGS.\n         MVC       SSCSJOBN,JOBNAME          MOVE IN JOBNAME.\n         MVC       SSCSJOBI,JOBID            MOVE IN JOBID.\n         BAL       R10,CALLSSI               CALL THE SUBSYSTEM.\n         BAL       R10,CKRETN                CHECK THE RETURN CODE.\n         XC        MSG1,MSG1                 CLEAR THE MSG.\n         MVC       MSG1(8),SSCSJOBN          MOVE IN THE JOBNAME.\n         MVC       MSG1+9(8),SSCSJOBI        MOVE IN THE JOBID.\n         MVC       MSG1+18(8),=C'CANCELED'   TELL THEM ITS CANCELED.\n         BAL       R10,PUTMSG                GIVE THE MSG.\n         B         NEXTPDE                   GO CKECK FOR ANOTHER.\nNOJOBID  DS        0H\n         NI        SSCSFLGS,SSCSCOUT         SET THE PURGE FLAGS OFF.\n***********************************************************************\n*\n*            SET UP TO GET JOBNUMBERS.\n*                  JOB STATUS.\n***********************************************************************\nJOBSTAT  DS        0H\n         XC        SSCSBGN(SSCSIZE),SSCSBGN  CLEAR OUR REQUEST AREA.\n         MVC       SSCSLEN,=AL2(SSCSIZE)     MOVE IN THE SIZE.\n         MVC       SSOBFUNC,=AL2(SSOBSTAT)   MOVE IN THE FUNCTION.\n         MVC       SSCSJOBN,JOBNAME          MOVE IN JOBNAME.\n         MVC       SSCSJOBI,=CL8' '          BLANK OUT THE JOB ID.\n         MVC       SSCSDIMP,=XL2'FE80'       TELL IT THE SPACE IT HAS.\n         BAL       R10,CALLSSI               GET JOBID.\n         BAL       R10,CKRETN                CHECK RETURN CODE.\n         LH        R5,SSCSDIMR               GET THE SPACE IT USED.\n         SRL       R5,4                      DIVIDE BY BYTES IN ARRAY.\n         LA        R6,SSCSARAY               GET THE ARRAY ADDRESS.\n***********************************************************************\n*\n*            SET UP TO CANCEL.\n*\n***********************************************************************\n         MVC       SSOBFUNC,=AL2(SSOBCANC)   TELL IT THE NEW FUNCTION.\n         MVC       SSCSDIMP,=H'16'           TELL IT THE NEW ARRAY SIZ.\n         OI        SSCSFLGS,SSCSCOUT         SET THE PURGE FLAGS.\nNOJOBID1 DS        0H\n         MVC       SSCSJOBI,0(R6)            MOVE IN THE JOB ID.\n         BAL       R10,CALLSSI               CALL THE SUBSYSTEM.\n         BAL       R10,CKRETN                CKECK THE RETURN CODE.\n         XC        MSG1,MSG1                 CLEAR THE MSG.\n         MVC       MSG1(8),SSCSJOBN          MOVE IN THE JOB NAME.\n         MVC       MSG1+9(8),SSCSJOBI        MOVE IN THE JOB ID.\n         MVC       MSG1+18(8),=C'CANCELED'   MOVE IN MSG.\n         BAL       R10,PUTMSG                GIVE THEM THE MSG.\n         LA        R6,16(,R6)                GET NEXT ARRAY.\n         BCT       R5,NOJOBID1               GO PROCESS IT.\n         XC        MSG1,MSG1                 CLEAR THE MSG.\n         MVC       MSG1(8),SSCSJOBN          MOVE IN THE JOB NAME.\n         MVC       MSG1+9(11),=C'JOBS PURGED' MOVE IN MSG.\n         BAL       R10,PUTMSG                TELL THEM.\nNEXTPDE  DS        0H\n         L         R3,16(,R3)                ADDRESS OF NEXT PDE.\n         C         R3,=X'FF000000'           VALID?\n         BNZ       NEXTJOB                   YES,GO PROCESS.\nFREEAREA DS        0H                        CLEAN UP.\n         L         R0,GETSIZE\n         FREEMAIN  R,LV=(0),A=(R7)\nHOMEWARD DS        0H\n         IKJRLSA   MYANS\n*-------------------------------------------------------------------\n         L         13,SAVEAREA+4\n         ST        15,16(,13)\n         RETURN    (14,12),T\n***********************************************************************\n*\n*            CALL SUBSYSTEM INTERFACE.\n*\n***********************************************************************\nCALLSSI  DS        0H\n         L         R9,16            A(CVT)\n         L         R9,296(,R9)      A(JESCT)\n*        L         R0,=C'ON  '      LOAD COMMAND CODE               SBG\n*        LA        R0,0             TURN AUTH ON                    SBG\n*        SVC       223              ISSUE SVC                       SBG\n         MODESET   MODE=SUP         GET SUPER\n         LA        R1,SSOBPTR       ADDR OF PTR TO SSOB\n         L         R15,20(,R9)      A(JESSSREQ)\n         BALR      R14,R15          GO TO IT.\n         LR        R9,R15           SAVE RETURN CODE\n         MODESET   MODE=PROB        BACK TO NORMAL\n*        L         R0,=C'OFF '      LOAD COMMAND CODE\n*        LA        R0,4             TURN AUTH OFF                   SBG\n*        SVC       223              ISSUE SVC                       SBG\n         SLL       R9,1\n         B         *+8(R9)\n         B         ENDSSI          DUMMY BRANCH.\n         MVI       MSG1,C'0' 0  - SUCCESSFUL INSTRUCTION\n         B         ENDSSI\n         MVI       MSG1,C'4' 4  - SS DOESN'T SUPPORT THIS FUNCTION\n         B         SSIERR\n         MVI       MSG1,C'8' 8  - SS EXIST, BUT IS NOT UP\n         B         SSIERR\n         MVI       MSG1,C'C' 12 - SS DOES NOT EXIST\n         B         SSIERR\n         MVI       MSG1,C'G' 16 - FUNCTION NOT SUPPORTED\n         B         SSIERR\n         MVI       MSG1,C'H' 20 - LOGICAL ERROR\n*\nSSIERR   DS        0H\n         XC        MSG1,MSG1\n         MVC       MSG1+2(33),=C'RETURN CODE FROM SSI CALL SYSTEMS'\n         BAL       R10,PUTMSG\n         B         HOMEWARD\nENDSSI   DS        0H\n         BR        R10              GO BACK.\n***********************************************************************\n*\n*                  CHECK THE RETURN CODE FROM STATUS AND CANCEL\n*\n***********************************************************************\nCKRETN   DS        0H\n         XC        MSG1,MSG1\n         L         R1,SSOBRETN\n         B         *+4(R1)\n         B         CKRETN0           0  - GOOD RETURN\n         B         CKRETN4           4  - JOBNAME NOT FOUND\n         B         CKRETN8           8  - INVALID JOBNAME/JOB COMBO.\n         B         CKRETN12          12 - JOB NOT CANCELED - DUPLICATE\n         B         CKRETN16          16 - STATUS ARRAY TO SMALL\n         B         CKRETN20          20 - JOB NOT CANCELED ON OUTPUT\n         B         CKRETN24          24 - JOBID WITH INVALID SYNTAX\n* ----------------------------------------------------------------- *\n*                                                                   *\n*    COMMENT OUT ONE, OR THE OTHER, OF THE FOLLOWING LINES, BUT     *\n*    NOT BOTH OF THEM.  (THIS IS A BRANCH TABLE....)                *\n*                                                                   *\n         B         CKRETN28      28 - INVALID JOB, TSO USER OR STC  *\n*        B         CKRETN0       NULLIFY CODE 28                    *\n*                                                                   *\n* ----------------------------------------------------------------- *\n         B         CKRETN32          32 TSO USER NOT AUTH FOR JOB\nCKRETN0  BR        R10                    GOOD RETURN\n*        MVC       MSG1(11),=C'GOOD RETURN'\n*        BAL       R10,PUTMSG\n*        B         NEXTPDE\nCKRETN4  MVC       MSG1(8),SSCSJOBN\n         MVC       MSG1+9(8),SSCSJOBI\n         MVC       MSG1+18(16),=C'JOB(S) NOT FOUND'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCKRETN8  MVC       MSG1(25),=C'INVALID JOBNAME/JOB COMBO'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCKRETN12 MVC       MSG1(28),=C'JOB NOT CANCELED - DUPLICATE'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCKRETN16 MVC       MSG1(21),=C'STATUS ARRAY TO SMALL'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCKRETN20 MVC       MSG1(26),=C'JOB NOT CANCELED ON OUTPUT'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCKRETN24 MVC       MSG1(25),=C'JOBID WITH INVALID SYNTAX'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCKRETN28 MVC       MSG1(28),=C'INVALID JOB, TSO USER OR STC'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCKRETN32 MVC       MSG1(31),=C'TSO USER CANNOT ACCESS THIS JOB'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\n**********************************************************************\n*\n* GET MSG ROUTINE.\n*\n**********************************************************************\nGETMSG   DS        0H\n         L         R8,CPPLUPT\n         L         R9,CPPLECT\n         GETLINE   PARM=GETBLOCK,UPT=(R8),ECT=(R9),ECB=ECBADS,         *\n               MF=(E,IOPLADS)\n         BR        R10\n**********************************************************************\n*\n*        PUTMSG ROUTINE.\n*\n**********************************************************************\nPUTMSG   DS        0H\n         L         R8,CPPLUPT\n         L         R9,CPPLECT\n         PUTLINE   PARM=PUTBLOCK,UPT=(R8),ECT=(R9),                    *\n               ECB=ECBADS,OUTPUT=(PROMPT,TERM,SINGLE,DATA),            *\n               MF=(E,IOPLADS)\n         BR        R10\n**********************************************************************\n*\n*        DUMMY ROUTINE FOR IKJPARS.\n*\n**********************************************************************\nDUMMY    DS      0H\n         LA      R15,0\n         BR      R14\n**********************************************************************\n*\n*\n*\n**********************************************************************\n*\n*\n*------------------------ VARIALBELS -------------------------------\nUSER     MVC     USERID(1),0(R1)\nUSERCOMP CLC     USERID(1),0(R5)\nNAME     MVC     JOBNAME(1),0(R5)\nNAME2    MVC     JOBID(1),0(R5)\nJOBNAME  DC      CL8' '\nJOBID    DC      CL8' '\nCOMMAND  DC      CL8' '\nUSERID   DC      CL8' '\nUSERLEN  DC      H'00'\nAUTHUSER DC      X'00'\nGETSIZE  DC      A(900000)\nSSOBPTR  DS      F\nMYPPL    DS      7F\nMYANS    DS      F\nMYECB    DS      F\nMYUPT    DS      F\nMYECT    DS      F\nPARSAREA DS      D\nECBADS   DC      F'0'\nIOPLADS  DC      4F'0'\nPROMPT   DS      0F\n         DC      H'76',H'0'\nMSG1     DC      CL72' '\nPUTBLOCK PUTLINE MF=L\nGETBLOCK GETLINE INPUT=(TERM,PHYSICAL),TERMGET=(EDIT,WAIT),MF=L\n*-------------------------------------------------------------------\nJOBS     IKJPARM\nJOBNAME0 IKJPOSIT JOBNAME,LIST,PROMPT='ENTER JOBNAME'\n         IKJENDP\nSAVEAREA DS      18F\nR0       EQU       0\nR1       EQU       1\nR2       EQU       2\nR3       EQU       3\nR4       EQU       4\nR5       EQU       5\nR6       EQU       6\nR7       EQU       7\nR8       EQU       8\nR9       EQU       9\nR10      EQU       10\nR11      EQU       11\nR12      EQU       12\nR13      EQU       13\nR14      EQU       14\nR15      EQU       15\n         LTORG\n         IKJCPPL\n         EJECT\n         IKJPPL\n         EJECT\n         IEFJSSOB  (SO,CS),CONTIG=YES\n         EJECT\n         CVT LIST=YES,DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CQX$": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x15\\x01\\x01\\x05\\x1f\\x01\\x19\\t\\x7f\\x162\\x00\\x1c\\x00\\x1f\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2001-02-20T00:00:00", "modifydate": "2019-04-07T16:32:15", "lines": 28, "newlines": 31, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB (CCMVS),'HI FOLKS',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT497.FILE406(CQX)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB497406\n SETCODE AC(1)\n NAME    CQX(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CQX01": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x95!o\\x01\\x01\\x05O\\x14G\\x01i\\x01i\\x00\\x05\\xd6\\xd9\\xc9\\xc7\\xd5\\xc1\\xd3@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1995-08-04T00:00:00", "modifydate": "2001-02-23T14:47:00", "lines": 361, "newlines": 361, "modlines": 5, "user": "ORIGNAL"}, "text": "CQ       CSECT\n*\n*        WRITTEN BY: ED MOLNAR\n*                    COMPUTER DATA SYSTEMS,INC. (CDSI)\n*                    BETHSDA MD.\n*                    (301) 567-1730 EXT.343\n*\n*       THIS CP IS USED TO CANCEL AND DELETE ALL DATA SETS OFF THE\n*       QUEUE.  THIS COMMAND ONLY AUTHORIZES ITSELF WHEN CALLING\n*       SUBSYSTEM INTERFACE.  THE SVC NUMBER MUST BE CHANGED FOR THE\n*       AUTHORIZING OF THIS FUNCTION TO WHAT EVER NUMBER IS USED FOR\n*       YOUR INSTALLATION.  THIS SHOULD BE THE ONLY INSTALATION\n*       DEPENDENT ITEM IN THIS CODE.  THE FORMAT FOR THIS COMMAND IS:\n*       \"CQ JOBNAME\" OR \"CQ (JOBNAME(JOBID),JOBNAME(JOBID)....JOBNAME)\"\n*       THIS WILL REMOVE ONLY SELECTED JOBS WHEN GIVEN THE JOBID OR\n*       ALL JOBS WITH A SPECIFIED JOBNAME AND NO JOBID.  BE CAREFUL.\n*\n*\n         SAVE      (14,12),,CQ-&SYSTIME-&SYSDATE\n         LR        12,15\n         USING     CQ,12\n         LA        11,SAVEAREA\n         ST        11,8(13)\n         ST        13,SAVEAREA+4\n         LR        13,11\n         USING     CPPL,R2                  CPPL DSECT.\n         LR        R2,R1                    SAVE CPPL.\n********************************************************************\n*\n*        GET USER INFO OFF CPPL.\n*\n********************************************************************\n         L         R1,CPPLPSCB              GET THE PSCB.\n         IC        R3,7(R1)                 GET USER ID LENGTH.\n         BCTR      R3,0                     SUBTRACT 1.\n         STH       R3,USERLEN               SAVE IT.\n         EX        R3,USER                  GET THE USERID.\n         CLI       16(R1),X'80'             OPER SET?\n         BL        SETUPARS                 NOPE.\n         OI        AUTHUSER,1               SET OPER FLAG.\nSETUPARS DS        0H\n         USING     PPL,R15                  PPL DSECT.\n         LA        R15,MYPPL                ADDRESS OF MYPPL.\n         MVC       PPLUPT(4),CPPLUPT        SAVE UPT.\n         MVC       PPLECT(4),CPPLECT        SAVE ECT.\n         LA        R0,MYECB                 ADDRESS OF MY ECB.\n         ST        R0,PPLECB                STORE IN PPL.\n         XC        MYECB,MYECB              CLEAR IT.\n         L         R0,=A(JOBS)              ADDRESS OF IKJPARS START.\n         ST        R0,PPLPCL                STORE IT IN PPL.\n         LA        R0,MYANS                 ADDRESS OF MY ANSWER.\n         ST        R0,PPLANS                STORE IT IN PPL.\n         MVC       PPLCBUF(4),CPPLCBUF      ADDRESS OF COMMAND BUFFER.\n         LA        R0,DUMMY                 DUMMY ROUTINE.\n         ST        R0,PPLUWA                STORE IT IN PPL\n         DROP      R15\nCALLPARS DS        0H\n         CALLTSSR  EP=IKJPARS,MF=(E,MYPPL)   CALL IKJPARS.\n         LTR       R15,R15                   GOOD RETURN?\n         BZ        OKPARS                    YEP,CONTINUE FORWARD.\n         XC        MSG1,MSG1                 OH NO,CLEAR MSG.\n         MVC       MSG1(14),=C'IKJPARS FAILED'  MOVE MSG.\n         BAL       R10,PUTMSG                LET THEM CRY.\n         B         FREEAREA                  GO CLEAN UP.\nOKPARS   DS        0H\n***********************************************************************\n*\n*            INIT FOR SUBSYSTEM INTERFACE.\n*\n***********************************************************************\nINITSSI  DS        0H\n         L         R0,GETSIZE               GET NUMBER OF BYTES.\n         GETMAIN   R,LV=(0)                 GET SOME MEMORY.\n         LR        R7,R1                    SAVE THE ADDRESS.\n         USING     SSOB,R7                  SET ADDRESABILITY.\n         LA        R5,SSCSBGN               GET THE BEGINING.\n         XC        SSOBEGIN(SSOBHSIZ),SSOBEGIN   CLEAR THE AREA.\n         MVC       SSOBID,=C'SSOB'          MOVE IN SSOB ID.\n         MVC       SSOBLEN,=AL2(SSOBHSIZ)   MOVE IN THE SIZE.\n         ST        R5,SSOBINDV              SAVE ADDR. OF REQUEST AREA.\n         ST        R7,SSOBPTR               SAVE POINTER OF OUR AREA.\n         OI        SSOBPTR,X'80'            SET FOR FUNCTION.\n***********************************************************************\n*\n*            SET TO READ IKJPARS.\n*\n***********************************************************************\n         USING     IKJPARMD,R11              DSECT FOR RETURNED INFO.\n         L         R11,MYANS                 ADDRESS OF ANSWER.\n         LA        R3,JOBNAME0               ADDRESS OF IKJ PROMPT.\nNEXTJOB  DS        0H\n         L         R5,0(R3)                  GET THE ADDRESS.\n         TM        AUTHUSER,1                AUTH USER?\n         BO        CONTJOB                   YES,CONTINUE.\n         LH        R10,USERLEN               LENGTH OF USERID -1.\n         EX        R10,USERCOMP              COMPARE\n         BE        CONTJOB                   OK,JOB HAS USERID.\n         XC        MSG1,MSG1                 CLEAR MSG.\n         MVC       MSG1(32),=C'JOB MUST START WITH YOUR USER ID'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCONTJOB  DS        0H\n         LH        R4,4(R3)                  GET THE LENTH.\n         BCTR      R4,0                      SUBTRACT 1.\n         MVC       JOBNAME,=CL8' '           BLANK OUT THE JOB NAME.\n         MVC       JOBID,=CL8' '             BLANK OUT THE JOB ID.\n         EX        R4,NAME                   MOVE JOBNAME IN PLACE.\n         TM        14(R3),X'80'              TEST FOR JOB ID.\n         BNO       NOJOBID                   NOT FOUND.\n         LH        R4,12(R3)                 ITS HERE,GET THE LENGTH.\n         L         R5,8(R3)                  GET THE ADDRESS.\n         BCTR      R4,0                      SUBTRACT 1 FROM LENGTH.\n         EX        R4,NAME2                  MOVE IN THE JOB ID.\n         MVC       SSOBFUNC,=AL2(SSOBCANC)   TELL IT THE NEW FUNCTION.\n         MVC       SSCSDIMP,=H'16'           TELL IT THE NEW ARRAY SIZ.\n         OI        SSCSFLGS,SSCSCOUT         SET THE PURGE FLAGS.\n         MVC       SSCSJOBN,JOBNAME          MOVE IN JOBNAME.\n         MVC       SSCSJOBI,JOBID            MOVE IN JOBID.\n         BAL       R10,CALLSSI               CALL THE SUBSYSTEM.\n         BAL       R10,CKRETN                CHECK THE RETURN CODE.\n         XC        MSG1,MSG1                 CLEAR THE MSG.\n         MVC       MSG1(8),SSCSJOBN          MOVE IN THE JOBNAME.\n         MVC       MSG1+9(8),SSCSJOBI        MOVE IN THE JOBID.\n         MVC       MSG1+18(8),=C'CANCELED'   TELL THEM ITS CANCELED.\n         BAL       R10,PUTMSG                GIVE THE MSG.\n         B         NEXTPDE                   GO CKECK FOR ANOTHER.\nNOJOBID  DS        0H\n         NI        SSCSFLGS,SSCSCOUT         SET THE PURGE FLAGS OFF.\n***********************************************************************\n*\n*            SET UP TO GET JOBNUMBERS.\n*                  JOB STATUS.\n***********************************************************************\nJOBSTAT  DS        0H\n         XC        SSCSBGN(SSCSIZE),SSCSBGN  CLEAR OUR REQUEST AREA.\n         MVC       SSCSLEN,=AL2(SSCSIZE)     MOVE IN THE SIZE.\n         MVC       SSOBFUNC,=AL2(SSOBSTAT)   MOVE IN THE FUNCTION.\n         MVC       SSCSJOBN,JOBNAME          MOVE IN JOBNAME.\n         MVC       SSCSJOBI,=CL8' '          BLANK OUT THE JOB ID.\n         MVC       SSCSDIMP,=XL2'FE80'       TELL IT THE SPACE IT HAS.\n         BAL       R10,CALLSSI               GET JOBID.\n         BAL       R10,CKRETN                CHECK RETURN CODE.\n         LH        R5,SSCSDIMR               GET THE SPACE IT USED.\n         SRL       R5,4                      DIVIDE BY BYTES IN ARRAY.\n         LA        R6,SSCSARAY               GET THE ARRAY ADDRESS.\n***********************************************************************\n*\n*            SET UP TO CANCEL.\n*\n***********************************************************************\n         MVC       SSOBFUNC,=AL2(SSOBCANC)   TELL IT THE NEW FUNCTION.\n         MVC       SSCSDIMP,=H'16'           TELL IT THE NEW ARRAY SIZ.\n         OI        SSCSFLGS,SSCSCOUT         SET THE PURGE FLAGS.\nNOJOBID1 DS        0H\n         MVC       SSCSJOBI,0(R6)            MOVE IN THE JOB ID.\n         BAL       R10,CALLSSI               CALL THE SUBSYSTEM.\n         BAL       R10,CKRETN                CKECK THE RETURN CODE.\n         XC        MSG1,MSG1                 CLEAR THE MSG.\n         MVC       MSG1(8),SSCSJOBN          MOVE IN THE JOB NAME.\n         MVC       MSG1+9(8),SSCSJOBI        MOVE IN THE JOB ID.\n         MVC       MSG1+18(8),=C'CANCELED'   MOVE IN MSG.\n         BAL       R10,PUTMSG                GIVE THEM THE MSG.\n         LA        R6,16(R6)                 GET NEXT ARRAY.\n         BCT       R5,NOJOBID1               GO PROCESS IT.\n         XC        MSG1,MSG1                 CLEAR THE MSG.\n         MVC       MSG1(8),SSCSJOBN          MOVE IN THE JOB NAME.\n         MVC       MSG1+9(11),=C'JOBS PURGED' MOVE IN MSG.\n         BAL       R10,PUTMSG                TELL THEM.\nNEXTPDE  DS        0H\n         L         R3,16(R3)                 ADDRESS OF NEXT PDE.\n         C         R3,=X'FF000000'           VALID?\n         BNZ       NEXTJOB                   YES,GO PROCESS.\nFREEAREA DS        0H                        CLEAN UP.\n         L         R0,GETSIZE\n         FREEMAIN  R,LV=(0),A=(R7)\nHOMEWARD DS        0H\n         IKJRLSA   MYANS\n*-------------------------------------------------------------------\n         L         13,SAVEAREA+4\n         ST        15,16(13)\n         RETURN    (14,12),T\n***********************************************************************\n*\n*            CALL SUBSYSTEM INTERFACE.\n*\n***********************************************************************\nCALLSSI  DS        0H\n         L         R9,16            A(CVT)\n         L         R9,296(R9)       A(JESCT)\n*        L         R0,=C'ON  '      LOAD COMMAND CODE               SBG\n*        LA        R0,0             TURN AUTH ON                    SBG\n*        SVC       223              ISSUE SVC                       SBG\n         MODESET   MODE=SUP         GET SUPER\n         LA        R1,SSOBPTR       ADDR OF PTR TO SSOB\n         L         R15,20(R9)       A(JESSSREQ)\n         BALR      R14,R15          GO TO IT.\n         LR        R9,R15           SAVE RETURN CODE\n         MODESET   MODE=PROB        BACK TO NORMAL\n*        L         R0,=C'OFF '      LOAD COMMAND CODE\n*        LA        R0,4             TURN AUTH OFF                   SBG\n*        SVC       223              ISSUE SVC                       SBG\n         SLL       R9,1\n         B         *+8(R9)\n         B         ENDSSI          DUMMY BRANCH.\n         MVI       MSG1,C'0' 0  - SUCCESSFUL INSTRUCTION\n         B         ENDSSI\n         MVI       MSG1,C'4' 4  - SS DOESN'T SUPPORT THIS FUNCTION\n         B         SSIERR\n         MVI       MSG1,C'8' 8  - SS EXIST, BUT IS NOT UP\n         B         SSIERR\n         MVI       MSG1,C'C' 12 - SS DOES NOT EXIST\n         B         SSIERR\n         MVI       MSG1,C'G' 16 - FUNCTION NOT SUPPORTED\n         B         SSIERR\n         MVI       MSG1,C'H' 20 - LOGICAL ERROR\n*\nSSIERR   DS        0H\n         XC        MSG1,MSG1\n         MVC       MSG1+2(33),=C'RETURN CODE FROM SSI CALL SYSTEMS'\n         BAL       R10,PUTMSG\n         B         HOMEWARD\nENDSSI   DS        0H\n         BR        R10              GO BACK.\n***********************************************************************\n*\n*                  CHECK THE RETURN CODE FROM STATUS AND CANCEL\n*\n***********************************************************************\nCKRETN   DS        0H\n         XC        MSG1,MSG1\n         L         R1,SSOBRETN\n         B         *+4(R1)\n         B         CKRETN0           0  - GOOD RETURN\n         B         CKRETN4           4  - JOBNAME NOT FOUND\n         B         CKRETN8           8  - INVALID JOBNAME/JOB COMBO.\n         B         CKRETN12          12 - JOB NOT CANCELED - DUPLICATE\n         B         CKRETN16          16 - STATUS ARRAY TO SMALL\n         B         CKRETN20          20 - JOB NOT CANCELED ON OUTPUT\n         B         CKRETN24          24 - JOBID WITH INVALID SYNTAX\n         B         CKRETN28          28 - INVALID JOB, TSO USER OR STC\nCKRETN0  BR        R10                    GOOD RETURN\n*        MVC       MSG1(11),=C'GOOD RETURN'\n*        BAL       R10,PUTMSG\n*        B         NEXTPDE\nCKRETN4  MVC       MSG1(8),SSCSJOBN\n         MVC       MSG1+9(8),SSCSJOBI\n         MVC       MSG1+18(16),=C'JOB(S) NOT FOUND'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCKRETN8  MVC       MSG1(25),=C'INVALID JOBNAME/JOB COMBO'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCKRETN12 MVC       MSG1(28),=C'JOB NOT CANCELED - DUPLICATE'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCKRETN16 MVC       MSG1(21),=C'STATUS ARRAY TO SMALL'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCKRETN20 MVC       MSG1(26),=C'JOB NOT CANCELED ON OUTPUT'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCKRETN24 MVC       MSG1(25),=C'JOBID WITH INVALID SYNTAX'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCKRETN28 MVC       MSG1(28),=C'INVALID JOB, TSO USER OR STC'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\n**********************************************************************\n*\n* GET MSG ROUTINE.\n*\n**********************************************************************\nGETMSG   DS        0H\n         L         R8,CPPLUPT\n         L         R9,CPPLECT\n         GETLINE   PARM=GETBLOCK,UPT=(R8),ECT=(R9),ECB=ECBADS,         *\n               MF=(E,IOPLADS)\n         BR        R10\n**********************************************************************\n*\n*        PUTMSG ROUTINE.\n*\n**********************************************************************\nPUTMSG   DS        0H\n         L         R8,CPPLUPT\n         L         R9,CPPLECT\n         PUTLINE   PARM=PUTBLOCK,UPT=(R8),ECT=(R9),                    *\n               ECB=ECBADS,OUTPUT=(PROMPT,TERM,SINGLE,DATA),            *\n               MF=(E,IOPLADS)\n         BR        R10\n**********************************************************************\n*\n*        DUMMY ROUTINE FOR IKJPARS.\n*\n**********************************************************************\nDUMMY    DS      0H\n         LA      R15,0\n         BR      R14\n**********************************************************************\n*\n*\n*\n**********************************************************************\n*\n*\n*------------------------ VARIALBELS -------------------------------\nUSER     MVC     USERID(1),0(R1)\nUSERCOMP CLC     USERID(1),0(R5)\nNAME     MVC     JOBNAME(1),0(R5)\nNAME2    MVC     JOBID(1),0(R5)\nJOBNAME  DC      CL8' '\nJOBID    DC      CL8' '\nCOMMAND  DC      CL8' '\nUSERID   DC      CL8' '\nUSERLEN  DC      H'00'\nAUTHUSER DC      X'00'\nGETSIZE  DC      A(900000)\nSSOBPTR  DS      F\nMYPPL    DS      7F\nMYANS    DS      F\nMYECB    DS      F\nMYUPT    DS      F\nMYECT    DS      F\nPARSAREA DS      D\nECBADS   DC      F'0'\nIOPLADS  DC      4F'0'\nPROMPT   DS      0F\n         DC      H'76',H'0'\nMSG1     DC      CL72' '\nPUTBLOCK PUTLINE MF=L\nGETBLOCK GETLINE INPUT=(TERM,PHYSICAL),TERMGET=(EDIT,WAIT),MF=L\n*-------------------------------------------------------------------\nJOBS     IKJPARM\nJOBNAME0 IKJPOSIT JOBNAME,LIST,PROMPT='ENTER JOBNAME'\n         IKJENDP\nSAVEAREA DS      18F\nR0       EQU       0\nR1       EQU       1\nR2       EQU       2\nR3       EQU       3\nR4       EQU       4\nR5       EQU       5\nR6       EQU       6\nR7       EQU       7\nR8       EQU       8\nR9       EQU       9\nR10      EQU       10\nR11      EQU       11\nR12      EQU       12\nR13      EQU       13\nR14      EQU       14\nR15      EQU       15\n         LTORG\n         IKJCPPL\n         EJECT\n         IKJPPL\n         EJECT\n         IEFJSSOB  (SO,CS),CONTIG=YES\n         EJECT\n         CVT LIST=YES,DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CQX02": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00\\x10\\x00\\x95!o\\x01\\x16\\x17?\\x13\\x14\\x01z\\x01i\\x00\\x17\\xd9\\xc5\\xe5\\xc9\\xe2\\xc5\\xc4@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "1995-08-04T00:00:00", "modifydate": "2016-06-21T13:14:10", "lines": 378, "newlines": 361, "modlines": 23, "user": "REVISED"}, "text": "CQ       CSECT\n*\n*        WRITTEN BY: ED MOLNAR\n*                    COMPUTER DATA SYSTEMS,INC. (CDSI)\n*                    BETHSDA MD.\n*                    (301) 567-1730 EXT.343\n*\n*        SUPPORT EMAIL:   SBGOLOB@CBTTAPE.ORG\n*\n*       THIS CP IS USED TO CANCEL AND DELETE ALL DATA SETS OFF THE\n*       QUEUE.  THIS COMMAND ONLY AUTHORIZES ITSELF WHEN CALLING\n*       SUBSYSTEM INTERFACE.  THE SVC NUMBER MUST BE CHANGED FOR THE\n*       AUTHORIZING OF THIS FUNCTION TO WHAT EVER NUMBER IS USED FOR\n*       YOUR INSTALLATION.  THIS SHOULD BE THE ONLY INSTALATION\n*       DEPENDENT ITEM IN THIS CODE.  THE FORMAT FOR THIS COMMAND IS:\n*       \"CQ JOBNAME\" OR \"CQ (JOBNAME(JOBID),JOBNAME(JOBID)....JOBNAME)\"\n*       THIS WILL REMOVE ONLY SELECTED JOBS WHEN GIVEN THE JOBID OR\n*       ALL JOBS WITH A SPECIFIED JOBNAME AND NO JOBID.  BE CAREFUL.\n*\n*       NULLIFYING RC=28 FROM SSOBRETN WILL ALLOW CANCELING OF\n*       STC'S AND TSU'S.  SEE COMMENTS IN SUBROUTINE CKRETN.\n*       RC=32 FROM SSOBRETN IS NEW, FROM IBM.\n*\n         SAVE      (14,12),,CQ-&SYSTIME-&SYSDATE\n         LR        12,15\n         USING     CQ,12\n         LA        11,SAVEAREA\n         ST        11,8(13)\n         ST        13,SAVEAREA+4\n         LR        13,11\n         USING     CPPL,R2                  CPPL DSECT.\n         LR        R2,R1                    SAVE CPPL.\n********************************************************************\n*\n*        GET USER INFO OFF CPPL.\n*\n********************************************************************\n         L         R1,CPPLPSCB              GET THE PSCB.\n         IC        R3,7(R1)                 GET USER ID LENGTH.\n         BCTR      R3,0                     SUBTRACT 1.\n         STH       R3,USERLEN               SAVE IT.\n         EX        R3,USER                  GET THE USERID.\n         CLI       16(R1),X'80'             OPER SET?\n         BL        SETUPARS                 NOPE.\n         OI        AUTHUSER,1               SET OPER FLAG.\nSETUPARS DS        0H\n         USING     PPL,R15                  PPL DSECT.\n         LA        R15,MYPPL                ADDRESS OF MYPPL.\n         MVC       PPLUPT(4),CPPLUPT        SAVE UPT.\n         MVC       PPLECT(4),CPPLECT        SAVE ECT.\n         LA        R0,MYECB                 ADDRESS OF MY ECB.\n         ST        R0,PPLECB                STORE IN PPL.\n         XC        MYECB,MYECB              CLEAR IT.\n         L         R0,=A(JOBS)              ADDRESS OF IKJPARS START.\n         ST        R0,PPLPCL                STORE IT IN PPL.\n         LA        R0,MYANS                 ADDRESS OF MY ANSWER.\n         ST        R0,PPLANS                STORE IT IN PPL.\n         MVC       PPLCBUF(4),CPPLCBUF      ADDRESS OF COMMAND BUFFER.\n         LA        R0,DUMMY                 DUMMY ROUTINE.\n         ST        R0,PPLUWA                STORE IT IN PPL\n         DROP      R15\nCALLPARS DS        0H\n         CALLTSSR  EP=IKJPARS,MF=(E,MYPPL)   CALL IKJPARS.\n         LTR       R15,R15                   GOOD RETURN?\n         BZ        OKPARS                    YEP,CONTINUE FORWARD.\n         XC        MSG1,MSG1                 OH NO,CLEAR MSG.\n         MVC       MSG1(14),=C'IKJPARS FAILED'  MOVE MSG.\n         BAL       R10,PUTMSG                LET THEM CRY.\n         B         FREEAREA                  GO CLEAN UP.\nOKPARS   DS        0H\n***********************************************************************\n*\n*            INIT FOR SUBSYSTEM INTERFACE.\n*\n***********************************************************************\nINITSSI  DS        0H\n         L         R0,GETSIZE               GET NUMBER OF BYTES.\n         GETMAIN   R,LV=(0)                 GET SOME MEMORY.\n         LR        R7,R1                    SAVE THE ADDRESS.\n         USING     SSOB,R7                  SET ADDRESABILITY.\n         LA        R5,SSCSBGN               GET THE BEGINING.\n         XC        SSOBEGIN(SSOBHSIZ),SSOBEGIN   CLEAR THE AREA.\n         MVC       SSOBID,=C'SSOB'          MOVE IN SSOB ID.\n         MVC       SSOBLEN,=AL2(SSOBHSIZ)   MOVE IN THE SIZE.\n         ST        R5,SSOBINDV              SAVE ADDR. OF REQUEST AREA.\n         ST        R7,SSOBPTR               SAVE POINTER OF OUR AREA.\n         OI        SSOBPTR,X'80'            SET FOR FUNCTION.\n***********************************************************************\n*\n*            SET TO READ IKJPARS.\n*\n***********************************************************************\n         USING     IKJPARMD,R11              DSECT FOR RETURNED INFO.\n         L         R11,MYANS                 ADDRESS OF ANSWER.\n         LA        R3,JOBNAME0               ADDRESS OF IKJ PROMPT.\nNEXTJOB  DS        0H\n         L         R5,0(R3)                  GET THE ADDRESS.\n         TM        AUTHUSER,1                AUTH USER?\n         BO        CONTJOB                   YES,CONTINUE.\n         LH        R10,USERLEN               LENGTH OF USERID -1.\n         EX        R10,USERCOMP              COMPARE\n         BE        CONTJOB                   OK,JOB HAS USERID.\n         XC        MSG1,MSG1                 CLEAR MSG.\n         MVC       MSG1(32),=C'JOB MUST START WITH YOUR USER ID'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCONTJOB  DS        0H\n         LH        R4,4(R3)                  GET THE LENTH.\n         BCTR      R4,0                      SUBTRACT 1.\n         MVC       JOBNAME,=CL8' '           BLANK OUT THE JOB NAME.\n         MVC       JOBID,=CL8' '             BLANK OUT THE JOB ID.\n         EX        R4,NAME                   MOVE JOBNAME IN PLACE.\n         TM        14(R3),X'80'              TEST FOR JOB ID.\n         BNO       NOJOBID                   NOT FOUND.\n         LH        R4,12(R3)                 ITS HERE,GET THE LENGTH.\n         L         R5,8(R3)                  GET THE ADDRESS.\n         BCTR      R4,0                      SUBTRACT 1 FROM LENGTH.\n         EX        R4,NAME2                  MOVE IN THE JOB ID.\n         MVC       SSOBFUNC,=AL2(SSOBCANC)   TELL IT THE NEW FUNCTION.\n         MVC       SSCSDIMP,=H'16'           TELL IT THE NEW ARRAY SIZ.\n         OI        SSCSFLGS,SSCSCOUT         SET THE PURGE FLAGS.\n         MVC       SSCSJOBN,JOBNAME          MOVE IN JOBNAME.\n         MVC       SSCSJOBI,JOBID            MOVE IN JOBID.\n         BAL       R10,CALLSSI               CALL THE SUBSYSTEM.\n         BAL       R10,CKRETN                CHECK THE RETURN CODE.\n         XC        MSG1,MSG1                 CLEAR THE MSG.\n         MVC       MSG1(8),SSCSJOBN          MOVE IN THE JOBNAME.\n         MVC       MSG1+9(8),SSCSJOBI        MOVE IN THE JOBID.\n         MVC       MSG1+18(8),=C'CANCELED'   TELL THEM ITS CANCELED.\n         BAL       R10,PUTMSG                GIVE THE MSG.\n         B         NEXTPDE                   GO CKECK FOR ANOTHER.\nNOJOBID  DS        0H\n         NI        SSCSFLGS,SSCSCOUT         SET THE PURGE FLAGS OFF.\n***********************************************************************\n*\n*            SET UP TO GET JOBNUMBERS.\n*                  JOB STATUS.\n***********************************************************************\nJOBSTAT  DS        0H\n         XC        SSCSBGN(SSCSIZE),SSCSBGN  CLEAR OUR REQUEST AREA.\n         MVC       SSCSLEN,=AL2(SSCSIZE)     MOVE IN THE SIZE.\n         MVC       SSOBFUNC,=AL2(SSOBSTAT)   MOVE IN THE FUNCTION.\n         MVC       SSCSJOBN,JOBNAME          MOVE IN JOBNAME.\n         MVC       SSCSJOBI,=CL8' '          BLANK OUT THE JOB ID.\n         MVC       SSCSDIMP,=XL2'FE80'       TELL IT THE SPACE IT HAS.\n         BAL       R10,CALLSSI               GET JOBID.\n         BAL       R10,CKRETN                CHECK RETURN CODE.\n         LH        R5,SSCSDIMR               GET THE SPACE IT USED.\n         SRL       R5,4                      DIVIDE BY BYTES IN ARRAY.\n         LA        R6,SSCSARAY               GET THE ARRAY ADDRESS.\n***********************************************************************\n*\n*            SET UP TO CANCEL.\n*\n***********************************************************************\n         MVC       SSOBFUNC,=AL2(SSOBCANC)   TELL IT THE NEW FUNCTION.\n         MVC       SSCSDIMP,=H'16'           TELL IT THE NEW ARRAY SIZ.\n         OI        SSCSFLGS,SSCSCOUT         SET THE PURGE FLAGS.\nNOJOBID1 DS        0H\n         MVC       SSCSJOBI,0(R6)            MOVE IN THE JOB ID.\n         BAL       R10,CALLSSI               CALL THE SUBSYSTEM.\n         BAL       R10,CKRETN                CKECK THE RETURN CODE.\n         XC        MSG1,MSG1                 CLEAR THE MSG.\n         MVC       MSG1(8),SSCSJOBN          MOVE IN THE JOB NAME.\n         MVC       MSG1+9(8),SSCSJOBI        MOVE IN THE JOB ID.\n         MVC       MSG1+18(8),=C'CANCELED'   MOVE IN MSG.\n         BAL       R10,PUTMSG                GIVE THEM THE MSG.\n         LA        R6,16(R6)                 GET NEXT ARRAY.\n         BCT       R5,NOJOBID1               GO PROCESS IT.\n         XC        MSG1,MSG1                 CLEAR THE MSG.\n         MVC       MSG1(8),SSCSJOBN          MOVE IN THE JOB NAME.\n         MVC       MSG1+9(11),=C'JOBS PURGED' MOVE IN MSG.\n         BAL       R10,PUTMSG                TELL THEM.\nNEXTPDE  DS        0H\n         L         R3,16(R3)                 ADDRESS OF NEXT PDE.\n         C         R3,=X'FF000000'           VALID?\n         BNZ       NEXTJOB                   YES,GO PROCESS.\nFREEAREA DS        0H                        CLEAN UP.\n         L         R0,GETSIZE\n         FREEMAIN  R,LV=(0),A=(R7)\nHOMEWARD DS        0H\n         IKJRLSA   MYANS\n*-------------------------------------------------------------------\n         L         13,SAVEAREA+4\n         ST        15,16(13)\n         RETURN    (14,12),T\n***********************************************************************\n*\n*            CALL SUBSYSTEM INTERFACE.\n*\n***********************************************************************\nCALLSSI  DS        0H\n         L         R9,16            A(CVT)\n         L         R9,296(R9)       A(JESCT)\n*        L         R0,=C'ON  '      LOAD COMMAND CODE               SBG\n*        LA        R0,0             TURN AUTH ON                    SBG\n*        SVC       223              ISSUE SVC                       SBG\n         MODESET   MODE=SUP         GET SUPER\n         LA        R1,SSOBPTR       ADDR OF PTR TO SSOB\n         L         R15,20(R9)       A(JESSSREQ)\n         BALR      R14,R15          GO TO IT.\n         LR        R9,R15           SAVE RETURN CODE\n         MODESET   MODE=PROB        BACK TO NORMAL\n*        L         R0,=C'OFF '      LOAD COMMAND CODE\n*        LA        R0,4             TURN AUTH OFF                   SBG\n*        SVC       223              ISSUE SVC                       SBG\n         SLL       R9,1\n         B         *+8(R9)\n         B         ENDSSI          DUMMY BRANCH.\n         MVI       MSG1,C'0' 0  - SUCCESSFUL INSTRUCTION\n         B         ENDSSI\n         MVI       MSG1,C'4' 4  - SS DOESN'T SUPPORT THIS FUNCTION\n         B         SSIERR\n         MVI       MSG1,C'8' 8  - SS EXIST, BUT IS NOT UP\n         B         SSIERR\n         MVI       MSG1,C'C' 12 - SS DOES NOT EXIST\n         B         SSIERR\n         MVI       MSG1,C'G' 16 - FUNCTION NOT SUPPORTED\n         B         SSIERR\n         MVI       MSG1,C'H' 20 - LOGICAL ERROR\n*\nSSIERR   DS        0H\n         XC        MSG1,MSG1\n         MVC       MSG1+2(33),=C'RETURN CODE FROM SSI CALL SYSTEMS'\n         BAL       R10,PUTMSG\n         B         HOMEWARD\nENDSSI   DS        0H\n         BR        R10              GO BACK.\n***********************************************************************\n*\n*                  CHECK THE RETURN CODE FROM STATUS AND CANCEL\n*\n***********************************************************************\nCKRETN   DS        0H\n         XC        MSG1,MSG1\n         L         R1,SSOBRETN\n         B         *+4(R1)\n         B         CKRETN0           0  - GOOD RETURN\n         B         CKRETN4           4  - JOBNAME NOT FOUND\n         B         CKRETN8           8  - INVALID JOBNAME/JOB COMBO.\n         B         CKRETN12          12 - JOB NOT CANCELED - DUPLICATE\n         B         CKRETN16          16 - STATUS ARRAY TO SMALL\n         B         CKRETN20          20 - JOB NOT CANCELED ON OUTPUT\n         B         CKRETN24          24 - JOBID WITH INVALID SYNTAX\n* ----------------------------------------------------------------- *\n*                                                                   *\n*    COMMENT OUT ONE, OR THE OTHER, OF THE FOLLOWING LINES, BUT     *\n*    NOT BOTH OF THEM.  (THIS IS A BRANCH TABLE....)                *\n*                                                                   *\n*        B         CKRETN28      28 - INVALID JOB, TSO USER OR STC  *\n         B         CKRETN0       NULLIFY CODE 28                    *\n*                                                                   *\n* ----------------------------------------------------------------- *\n         B         CKRETN32          32 TSO USER NOT AUTH FOR JOB\nCKRETN0  BR        R10                    GOOD RETURN\n*        MVC       MSG1(11),=C'GOOD RETURN'\n*        BAL       R10,PUTMSG\n*        B         NEXTPDE\nCKRETN4  MVC       MSG1(8),SSCSJOBN\n         MVC       MSG1+9(8),SSCSJOBI\n         MVC       MSG1+18(16),=C'JOB(S) NOT FOUND'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCKRETN8  MVC       MSG1(25),=C'INVALID JOBNAME/JOB COMBO'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCKRETN12 MVC       MSG1(28),=C'JOB NOT CANCELED - DUPLICATE'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCKRETN16 MVC       MSG1(21),=C'STATUS ARRAY TO SMALL'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCKRETN20 MVC       MSG1(26),=C'JOB NOT CANCELED ON OUTPUT'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCKRETN24 MVC       MSG1(25),=C'JOBID WITH INVALID SYNTAX'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCKRETN28 MVC       MSG1(28),=C'INVALID JOB, TSO USER OR STC'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\nCKRETN32 MVC       MSG1(31),=C'TSO USER CANNOT ACCESS THIS JOB'\n         BAL       R10,PUTMSG\n         B         NEXTPDE\n**********************************************************************\n*\n* GET MSG ROUTINE.\n*\n**********************************************************************\nGETMSG   DS        0H\n         L         R8,CPPLUPT\n         L         R9,CPPLECT\n         GETLINE   PARM=GETBLOCK,UPT=(R8),ECT=(R9),ECB=ECBADS,         *\n               MF=(E,IOPLADS)\n         BR        R10\n**********************************************************************\n*\n*        PUTMSG ROUTINE.\n*\n**********************************************************************\nPUTMSG   DS        0H\n         L         R8,CPPLUPT\n         L         R9,CPPLECT\n         PUTLINE   PARM=PUTBLOCK,UPT=(R8),ECT=(R9),                    *\n               ECB=ECBADS,OUTPUT=(PROMPT,TERM,SINGLE,DATA),            *\n               MF=(E,IOPLADS)\n         BR        R10\n**********************************************************************\n*\n*        DUMMY ROUTINE FOR IKJPARS.\n*\n**********************************************************************\nDUMMY    DS      0H\n         LA      R15,0\n         BR      R14\n**********************************************************************\n*\n*\n*\n**********************************************************************\n*\n*\n*------------------------ VARIALBELS -------------------------------\nUSER     MVC     USERID(1),0(R1)\nUSERCOMP CLC     USERID(1),0(R5)\nNAME     MVC     JOBNAME(1),0(R5)\nNAME2    MVC     JOBID(1),0(R5)\nJOBNAME  DC      CL8' '\nJOBID    DC      CL8' '\nCOMMAND  DC      CL8' '\nUSERID   DC      CL8' '\nUSERLEN  DC      H'00'\nAUTHUSER DC      X'00'\nGETSIZE  DC      A(900000)\nSSOBPTR  DS      F\nMYPPL    DS      7F\nMYANS    DS      F\nMYECB    DS      F\nMYUPT    DS      F\nMYECT    DS      F\nPARSAREA DS      D\nECBADS   DC      F'0'\nIOPLADS  DC      4F'0'\nPROMPT   DS      0F\n         DC      H'76',H'0'\nMSG1     DC      CL72' '\nPUTBLOCK PUTLINE MF=L\nGETBLOCK GETLINE INPUT=(TERM,PHYSICAL),TERMGET=(EDIT,WAIT),MF=L\n*-------------------------------------------------------------------\nJOBS     IKJPARM\nJOBNAME0 IKJPOSIT JOBNAME,LIST,PROMPT='ENTER JOBNAME'\n         IKJENDP\nSAVEAREA DS      18F\nR0       EQU       0\nR1       EQU       1\nR2       EQU       2\nR3       EQU       3\nR4       EQU       4\nR5       EQU       5\nR6       EQU       6\nR7       EQU       7\nR8       EQU       8\nR9       EQU       9\nR10      EQU       10\nR11      EQU       11\nR12      EQU       12\nR13      EQU       13\nR14      EQU       14\nR15      EQU       15\n         LTORG\n         IKJCPPL\n         EJECT\n         IKJPPL\n         EJECT\n         IEFJSSOB  (SO,CS),CONTIG=YES\n         EJECT\n         CVT LIST=YES,DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FIND": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\n\\x005\\x01\\x01\\x07\\x8f\\x01\\x16\\x17\\x0f\\x10'\\x01\\xe3\\x01\\xb9\\x01\\x05\\xe4\\xd7\\xc4\\xc1\\xe3\\xc5\\xc4@@@\"", "ispf": {"version": "01.10", "flags": 0, "createdate": "2001-03-19T00:00:00", "modifydate": "2016-06-18T10:27:35", "lines": 483, "newlines": 441, "modlines": 261, "user": "UPDATED"}, "text": "FIND     CSECT\n*\n* WROTE BY: ED MOLNAR\n*           COMPUTER DATA SYSTEMS, INC.\n*           BETHESDA MD.\n*\n* UPDATED JUNE 18 2016 FOR UCB LOGIC AND 3380/3390, 4-DIGIT UNIT  .MOD.\n* UPDATED CODE MARKED WITH .MOD. OR +.MOD. IF JUST COMMENT ADDED. .MOD.\n*\n*       THIS IS A DATA SET SEARCH ROUTINE.  THIS USES CP REQUESTS\n*       THE DATA SET NAME AND DOES SOME STANDARD CKECKING.  IT\n*       THE SEARCHES THE CATALOG TO FIND THE ENTRY.  AFTER THE\n*       CATALOG IS SEARCHED IT THEN SEARCHES THE UCB ENTRIES AND\n*       COMPARES THEM WITH OUR DASD TYPES.  THIS LIST IS INCORPRATED\n*       WITHIN THE CODE AND MAY BE ADDED TO EASILY.  IT OBTAINS THE\n*       VOLUME NAME AND CKECKS THE VTOC FOR THE FORMAT 1 DSCB. ALSO,\n*       IF THERE IS A ALTERNATE PATH THERE IS A SECOND ADDRESS IN THE\n*       TABEL POINTING TO THE DEVICE, THERFORE A SECOND SEARCH IS DONE\n*       AND IF A 'HIT' IS MADE A SECOND MESSAGE IS PRODUCED.\n*       A SECOND CHARATER TABLE IS PUT IN FOR THE CONVIENCE OF OTHERS.\n*\n         SAVE      (14,12),,FIND-&SYSTIME-&SYSDATE\n         LR        12,15\n         USING     FIND,12\n         LA        11,SAVEAREA\n         ST        11,8(13)\n         ST        13,SAVEAREA+4\n         LR        13,11\n*----------------------- SOURCE CODE -------------------------------\n         L         R8,4(R1)         GET UPT.\n         L         R9,12(R1)        GET ECT.\n***********************************************************************\n*\n*        CKECK THE COMMAND BUFFER FOR PARMS.\n*\n***********************************************************************\n         L         R2,0(R1)         GET COMMAND BUFFER.\n         LH        R3,0(R2)         GET LENGTH\n         LH        R4,2(R2)         GET OFFSET\n         LR        R5,R4            SAVE LENGTH OF COMMAND.\n         BCTR      R5,0             SET UP FOR EXECUTE.\n         EX        R5,CMD           SAVE COMMAND.\n         SH        R3,=H'4'         SUBTRACT BYTES FOR FIRST WORD.\n         SR        R3,R4            TAKE OFF COMMAND LENGTH.\n         LA        R2,4(R2)         ADD 4 TO POINT PAST FIRST WORD.\n         AR        R2,R4            POINT TO PARM FIELD.\n         CH        R3,=H'0'         IS IT IN THE COMMAND BUFFER?\n         BH        BLANKCK          YES,GO CKECK FOR BLANKS.\n***********************************************************************\n*\n*        GET INFORMATION FROM PUTLINE.\n*\n***********************************************************************\nNEEDDSN  DS        0H\n         XC        MSG1,MSG1\n         MVC       MSG1(19),=C'ENTER DATASET NAME:'\n         BAL       R5,PUTMSG        BRANCH TO PUTLINE.\n         BAL       R5,GETMSG        BRANCH TO GETLINE.\n         LA        R2,GETBLOCK\n         L         R2,4(R2)\n         LH        R3,0(R2)         GET LENGTH\n         LH        R4,2(R2)         GET OFFSET\n         CH        R3,=H'4'         CHECK LENGTH.\n         BE        NEEDDSN          FORGOT TO ENTER.\nPARMLEN  SH        R3,=H'4'         TRUE LENGTH.\n         LA        R4,4(R4)         TRUE OFFSET TO PARM.\n         AR        R2,R4            ADD REG TO POINT TO PARM.\n***********************************************************************\n*\n*        CKECK FOR PRECEEDING BLANKS.\n*\n***********************************************************************\nBLANKCK  DS        0H\n         CLI       0(R2),X'40'      BLANK?\n         BNE       BLANKEND         NO,SKIP.\n         LA        R2,1(R2)         ADD 1 TO PTR.\n         BCT       R3,BLANKCK       CONTINUE ONWARD.\nBLANKEND DS        0H\n***********************************************************************\n*\n*        CKECK FOR ENDING BLANKS.\n*\n***********************************************************************\n         LR        R4,R2            GET STARTING ADDRESS.\n         LR        R5,R3            GET NUMBER OF BYTES.\n         AR        R4,R3\n         BCTR      R4,0             TAKE AWAY 1.\nENDCK    DS        0H\n         CLI       0(R4),X'40'      IS LAST BYTE BLANK?\n         BNE       ENDCKEND         NOPE.\n         BCTR      R3,0             YEP,TAKE AWAY ONE FROM LENGTH.\n         BCTR      R4,0             YEP,TAKE AWAY ONE FOR NEXT CHECK.\n         BCT       R5,ENDCK         CKECK NEXT BYTE.\nENDCKEND DS        0H               END OF LOOP.\n***********************************************************************\n*\n*        CKECK FOR VALID LENGTH.\n*\n***********************************************************************\nLENGTH   DS        0H\n         CH        R3,=H'1'         CKECK LENGTH.\n         BL        NEEDDSN          TO SHORT,GO GET NAME.\n         CH        R3,=H'44'        CHECK THE LENGTH AGAIN.\n         BH        BADNAME          TO LONG,SEND MSG.\n*                                   R3 NOW HAS THE LENGTH.\n*                                   R2 NOW HAS ADDRESS OF REAL START.\n***********************************************************************\n*\n*                  MAKE CAPS AND CKECK FOR VALID CHARACTERS.\n*\n***********************************************************************\n         LR        R4,R2            GET STARTING ADDRESS.\n         LR        R5,R3            GET NUMBER OF BYTES.\nCHARCK0  DS        0H\n         LA        R6,CHARE         GET NUMBER OF BYTES IN TABEL.\n         LA        R7,CHARB         GET START OF TABEL.\n         OI        0(R4),X'40'      MAKE CAPS.\nCHARCK1  DS        0H\n         CLC       0(1,R4),0(R7)    GOOD BYTE.\n         BE        CHARCKE0         YES,NEXT BYTE.\n         LA        R7,1(R7)         MOVE TO NEXT BYTE.\n         BCT       R6,CHARCK1       NO,COMPARE NEXT ENTRY.\n         B         BADNAME          NOT HERE,GO TELL THEM.\nCHARCKE0 DS        0H\n         LA        R4,1(R4)         ADD 1 FOR NEXT CHAR.\n         BCT       R5,CHARCK0       GO SEARCH THE LIST.\n***********************************************************************\n*\n*                  CHECK FIRST BYTE FOR ALPHA.\n*\n***********************************************************************\n         LR        R4,R2            GET STARTING ADDRESS.\n         LR        R5,R3            GET NUMBER OF BYTES.\nALPHA0   DS        0H\n         LA        R6,CHARA         GET NUMBER OF ALPHA BYTES.\n         LA        R7,CHARB         GET START OF TABEL.\nALPHA1   DS        0H\n         CLC       0(1,R4),0(R7)    GOOD BYTE.\n         BE        ALPHA2           MOVE ALONG.\n         LA        R7,1(R7)         NO,MOVE TO NEXT BYTE.\n         BCT       R6,ALPHA1        COMPARE NEXT ENTRY.\n         B         BADNAME          END,GO GIVE MSG.\nALPHA2   DS        0H\n         LA        R4,1(R4)         ADD 1 FOR NEXT CHAR.\n         BCTR      R5,0             SUBTRACT ONE.\n         CH        R5,=H'0'         LAST BYTE?\n         BE        ALPHAE           YES,LEAVE.\n         CLI       0(R4),X'4B'      IS IT A PERIOD?\n         BNE       ALPHA2           NO,NEXT BYTE.\n         BCTR      R5,0             SUBTRACT ONE.\n         CH        R5,=H'0'         LAST BYTE?\n         BE        BADNAME          OH NO CANT END IN PERIOD.\n         LA        R4,1(R4)         OK, POINT TO NEXT CHAR.\n         B         ALPHA0           GO CKECK FOR VALID CHAR.\nALPHAE   DS        0H\n*\n         BCTR      R3,0             REDUCE BY 1 FOR EXECUTE.\n         B         MOVENAME         SKIP AROUND BADNAME ROUTINE.\n***********************************************************************\n*\n*                  BAD NAME.\n*\n***********************************************************************\nBADNAME  DS        0H\n         XC        MSG1,MSG1        CLEAR MSG.\n         MVC       MSG1(22),=C'INVALID DATA SET NAME:'\n         BAL       R5,PUTMSG        TELL THE STORY.\n         B         NEEDDSN          GO GET ANOTHER NAME.\n***********************************************************************\n*\n*                  MOVE NAME IN ALL THE RIGHT PALCES.\n*\n***********************************************************************\nMOVENAME DS        0H\n         EX        R3,NAME          MOVE IN FOR LENGTH OF NAME.\n         XC        MSG1,MSG1        CLEAR MSG.\n         EX        R3,NAME2         MOVE NAME INTO MSG.\n         BAL       R5,PUTMSG        SHOW NAME.\n*\n*\n***********************************************************************\n*\n*                  SET UP AND SEARCH CATALOG.\n*\n***********************************************************************\n         MVC       DDDSN(4),=XL4'44000000'\n         MVC       DDDSN+8(4),=XL4'00000000'\n*\n*\n         LOCATE    DDDSN\n         LTR       R15,R15\n         BNZ       NOTCAT\n***********************************************************************\n*\n*                  GIVE THE RESULTS.\n*\n***********************************************************************\n         XC        MSG1,MSG1\n         MVC       MSG1(25),=C'DATASET CATALOGED ON VOL:'\n         MVC       MSG1+26(6),VOLNAME\n         BAL       R5,PUTMSG\n         B         SERCHUCB\nNOTCAT   DS        0H\n         MVC       MSG1(22),=C'DATASET NOT CATALOGED:'\n         BAL       R5,PUTMSG\n***********************************************************************\n*\n*                  SEARCH ALL DASD VOLUMES FOR DATA SET.\n*\n*                  FIND UCB.\n***********************************************************************\nSERCHUCB DS      0H\n         L       R5,16                     ADDRESS OF CVT\n         TM      116(R5),X'80'             CVTMAP,CVTMVSE (XA)    .MOD.\n         BZ      UCBNOTXA                                         .MOD.\n         SR      R4,R4                     INDICATE XA            .MOD.\n         XC      DEVWORK(100),DEVWORK                             .MOD.\nNEXTXA   DS      0H                                               .MOD.\n         UCBSCAN COPY,WORKAREA=DEVWORK,DEVCLASS=DASD,RANGE=ALL,   .MOD.X\n               DEVNCHAR=DEVNCHAR,UCBAREA=DEVAREA,DYNAMIC=YES      .MOD.\n         LTR     15,15                                            .MOD.\n         BNZ     HOMEWARD                                         .MOD.\n         LA      R6,DEVAREA                                       .MOD.\n         TM      3(R6),X'80'               UCBSTAT,UCBONLI        .MOD.\n         BZ      NEXTXA                    BRANCH IF NOT ONLINE   .MOD.\n         B       CKDASD                                           .MOD.\nUCBNOTXA L       R4,40(R5)                 CVTILK2                .MOD.\nNEXTUCB  EQU     *\n         CLC     0(2,R4),=X'FFFF'          LAST ENTRY?\n         BE      HOMEWARD                  THATS ALL FOKES.\n         ICM     R6,B'0011',0(R4)          LOAD UCB.\n         CLI     2(R6),X'FF'               VALID ENTRY?\n         BNE     ADDUCB                    NOPE,NEXT.\n***********************************************************************\n*\n*                  CHECK FOR DEVTYPE.\n*\n***********************************************************************\nCKDASD   DS      0H\n         CLI     18(R6),X'20'              UCBTBYT3,UCB3DACC     +.MOD.\n         BNE     ADDUCB\n         CLI     28(R6),X'00'              UCBVOLI               +.MOD.\n         BE      ADDUCB\n         CLI     19(R6),X'0F'                                     .MOD.\n         BNE     *+14                                             .MOD.\n         MVC     DASD(6),=C'3390  '                               .MOD.\n         B       GETNAME                                          .MOD.\n         CLI     19(R6),X'0E'                                     .MOD.\n         BNE     *+14                                             .MOD.\n         MVC     DASD(6),=C'3380  '                               .MOD.\n         B       GETNAME                                          .MOD.\n         CLI     19(R6),X'06'\n         BNE     *+14\n         MVC     DASD(6),=C'2305  '\n         B       GETNAME\n         CLI     19(R6),X'07'\n         BNE     *+14\n         MVC     DASD(6),=C'2305  '\n         B       GETNAME\n         CLI     19(R6),X'09'\n         BNE     *+14\n         MVC     DASD(6),=C'3330  '\n         B       GETNAME\n         CLI     19(R6),X'0A'\n         BNE     *+14\n         MVC     DASD(6),=C'3340  '\n         B       GETNAME\n         CLI     19(R6),X'0B'\n         BNE     *+14\n         MVC     DASD(6),=C'3350  '\n         B       GETNAME\n         CLI     19(R6),X'0D'\n         BNE     *+14\n         MVC     DASD(6),=C'3330-1'\n         B       GETNAME\n         B       ADDUCB                    NEXT,NONE OF OUR DEVICES.\n***********************************************************************\n*\n*                  CHECK NUMBER OF PATHS.\n*\n***********************************************************************\nGETNAME  DS      0H\n         MVC     VOLNAME,28(R6)             MOVE VOL IN.\n         OBTAIN  DSCBNAME                   GO CHECK IT.\n         LTR     R15,R15                    FOUND?\n         BNZ     ADDUCB                     NOT HERE,NEXT.\n***********************************************************************\n*\n*                  SET UP THE MESSAGE AND GIVE IT.\n*\n***********************************************************************\n         MVC     STATUS,=CL30' '\n         LTR     R4,R4                     TEST FOR XA            .MOD.\n         BZ      STATUSX1                  SKIP OLD PRE-XA UCBCHM .MOD.\n         MVC     STATUS,STATUS2             REBUILD STATUS LINE.\n         TM      8(R6),B'10000000' PRIMARY CPU 0 NOT AVAILABLE\n         BNO     *+10\n         MVC     STATUS(6),=C'0 P NA'\n         TM      8(R6),B'01000000' SECONDARY CPU 0 NOT AVAILABLE\n         BNO     *+10\n         MVC     STATUS+7(6),=C'0 S NA'\n         TM      8(R6),B'00100000' PRIMARY CPU 1 NOT AVAILABLE\n         BNO     *+10\n         MVC     STATUS+14(6),=C'1 P NA'\n         TM      8(R6),B'00010000' SECONDARY CPU 1 NOT AVAILABLE\n         BNO     *+10\n         MVC     STATUS+21(6),=C'1 S NA'\nSTATUSX1 DS      0H                                               .MOD.\n         XC      MSG1,MSG1\n         MVC     MSG1(12),=C'DEV ADDRESS:'\n         MVC     MSG1+13(3),13(R6)         UCBNAME\n         LTR     R4,R4                     TEST FOR XA            .MOD.\n         BNZ     OKUNIT3                   BRANCH IF NOT XA       .MOD.\n         MVC     MSG1+12(4),DEVNCHAR       COPY 4-CHAR UNIT ADDR  .MOD.\n         CLI     MSG1+12,C'0'              REPLACE LEADING ZERO   .MOD.\n         BNE     *+8                       WITH                   .MOD.\n         MVI     MSG1+12,C' '               SPACE                 .MOD.\nOKUNIT3  DS      0H                                               .MOD.\n         MVC     MSG1+17(4),=C'VOL:'\n         MVC     MSG1+22(6),28(R6)         UCBVOLI               +.MOD.\n         MVC     MSG1+29(5),=C'TYPE:'\n         MVC     MSG1+35(6),DASD\n         LTR     R4,R4                     TEST FOR XA            .MOD.\n         BZ      STATUSX2                  BRANCH IF XA           .MOD.\n         MVC     MSG1+42(5),=C'PATH:'\n         MVC     MSG1+48(30),STATUS\nSTATUSX2 DS      0H                                               .MOD.\n         BAL     R5,PUTMSG\n***********************************************************************\n*\n*                  SET UP FOR NEXT ENTRY.\n*\n***********************************************************************\nADDUCB   DS      0H\n         LTR     R4,R4                     TEST FOR XA            .MOD.\n         BZ      NEXTXA                                           .MOD.\n         LA      R4,2(R4)\n         B       NEXTUCB\n***********************************************************************\n*\n*                  CLEAN UP AND HOMEWARD BOUND.\n*\n***********************************************************************\nHOMEWARD DS        0H\n*-------------------------------------------------------------------\n         L         13,SAVEAREA+4\n         ST        15,16(13)\n         RETURN    (14,12),T\n*\n*\nGETMSG   DS        0H\n         GETLINE   PARM=GETBLOCK,UPT=(R8),ECT=(R9),ECB=ECBADS,         *\n               MF=(E,IOPLADS)\n         BR        R5\n*\n*\nPUTMSG   DS        0H\n         PUTLINE   PARM=PUTBLOCK,UPT=(R8),ECT=(R9),                    *\n               ECB=ECBADS,OUTPUT=(PROMPT,TERM,SINGLE,DATA),            *\n               MF=(E,IOPLADS)\n         BR        R5\n*\n*\n*------------------------ VARIALBELS -------------------------------\nCMD      MVC     COMMAND(1),4(R2)\nNAME     MVC     CAMNAME(1),0(R2)\nNAME2    MVC     MSG1(1),0(R2)\nDDDSN    CAMLST  NAME,CAMNAME,,VCB\nDSCBNAME CAMLST  SEARCH,CAMNAME,VOLNAME,CAMFILL\nCAMNAME  DC      CL44' '\nVCB      DS      0D\nVOLNUM   DS      CL2\nDEVTYP   DS      CL4\nVOLNAME  DS      CL6\nDATASEQ# DS      CL2\nCAMFILL  DS      CL251\nCOMMAND  DC      CL8' '\nDASD     DS      CL6\nSTATUS   DS      CL30\nSTATUS2  DC      CL30'0 P AV 0 S AV 1 P AV 1 S AV'\nDEVAREA  DS      12F                                              .MOD.\nDEVWORK  DS      25F                                              .MOD.\nDEVNCHAR DS      CL4                                              .MOD.\nECBADS   DC      F'0'\nIOPLADS  DC      4F'0'\nPROMPT   DS      0F\n         DC      H'84',H'0'\nMSG1     DC      CL80' '\nPUTBLOCK PUTLINE MF=L\nGETBLOCK GETLINE INPUT=(TERM,PHYSICAL),TERMGET=(EDIT,WAIT),MF=L\n*-------------------------------------------------------------------\nSAVEAREA DS      18F\nBADCHARB DS      0H\n         DC      X'4A'           \u00a2 CENT.\n         DC      X'4C'           < LESS THAN.\n         DC      X'4D'           ( LEFT PARREN.\n         DC      X'4F'           | BAR.\n         DC      X'50'           & ANPERSAN.\n         DC      X'5A'           ! EXLAMATION.\n         DC      X'5C'           * ASTERISK.\n         DC      X'5D'           ) RIGHT PERREN.\n         DC      X'5E'           ; SEMI COLON.\n         DC      X'5F'           \u00ac NOT SIGN.\n         DC      X'60'           - DASH.\n         DC      X'61'           / SLASH.\n         DC      X'6A'           \u00a6 SPLIT BAR.\n         DC      X'6B'           , CAMMA.\n         DC      X'6C'           % PERCENT SIGN.\n         DC      X'6D'           _ UNDER SCORE.\n         DC      X'6E'           > GREATER THAN.\n         DC      X'6F'           ? QUESTION MARK.\n         DC      X'79'           ` APOSTRAPHY.\n         DC      X'7A'           : COLON.\n         DC      X'7D'           ' QUOTE.\n         DC      X'7E'           = EQUAL.\n         DC      X'7F'           \" QUOTE.\n         DC      X'A1'           ~ NOR.\n         DC      X'C0'           { BRACKET.\n         DC      X'D0'           } BRACKET.\n         DC      X'E0'           \\ BACK SLASH\n         DC      X'FA'           | BAR.\nBADCHARE EQU     *-BADCHARB\nCHARB    DS      0H\n         DC      X'4B'           . PERIOD.\n         DC      X'5B'           $ DOLLAR SIGN.\n         DC      X'7C'           @ AT SIGN.\n         DC      X'7B'           # POUND SIGN.\n         DC      X'C1'           A\n         DC      X'C2'           B\n         DC      X'C3'           C\n         DC      X'C4'           D\n         DC      X'C5'           E\n         DC      X'C6'           F\n         DC      X'C7'           G\n         DC      X'C8'           H\n         DC      X'C9'           I\n         DC      X'D1'           J\n         DC      X'D2'           K\n         DC      X'D3'           L\n         DC      X'D4'           M\n         DC      X'D5'           N\n         DC      X'D6'           O\n         DC      X'D7'           P\n         DC      X'D8'           Q\n         DC      X'D9'           R\n         DC      X'E2'           S\n         DC      X'E3'           T\n         DC      X'E4'           U\n         DC      X'E5'           V\n         DC      X'E6'           W\n         DC      X'E7'           X\n         DC      X'E8'           Y\n         DC      X'E9'           Z\nCHARA    EQU     *-CHARB\n         DC      X'F0'           1\n         DC      X'F1'           2\n         DC      X'F2'           3\n         DC      X'F3'           4\n         DC      X'F4'           5\n         DC      X'F5'           6\n         DC      X'F6'           7\n         DC      X'F7'           8\n         DC      X'F8'           9\n         DC      X'F9'           0\nCHARE    EQU     *-CHARB\nR0       EQU       0\nR1       EQU       1\nR2       EQU       2\nR3       EQU       3\nR4       EQU       4\nR5       EQU       5\nR6       EQU       6\nR7       EQU       7\nR8       EQU       8\nR9       EQU       9\nR10      EQU       10\nR11      EQU       11\nR12      EQU       12\nR13      EQU       13\nR14      EQU       14\nR15      EQU       15\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FIND$": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x05\\x01\\x126?\\x01\\x16\\x17\\x0f\"(\\x00\\x1b\\x00\\x1c\\x00\\x00\\xc1\\xe2\\xd4\\xd3\\xd1\\xc3\\xd3@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2012-12-28T00:00:00", "modifydate": "2016-06-18T22:28:05", "lines": 27, "newlines": 28, "modlines": 0, "user": "ASMLJCL"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(FIND)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   FIND\n SETSSI  CB491406\n SETCODE AC(0)\n NAME    FIND(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FIND01": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x07\\x8f\\x01\\x01\\x07\\x8f\\x16#\\x01\\xb9\\x01\\xb9\\x00\\x00\\xe5\\xc5\\xd9\\xe2\\xf2\\xf4\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-03-19T00:00:00", "modifydate": "2001-03-19T16:23:00", "lines": 441, "newlines": 441, "modlines": 0, "user": "VERS249"}, "text": "FIND     CSECT\n*\n* WROTE BY: ED MOLNAR\n*           COMPUTER DATA SYSTEMS, INC.\n*           BETHESDA MD.\n*\n*\n*       THIS IS A DATA SET SEARCH ROUTINE.  THIS USES CP REQUESTS\n*       THE DATA SET NAME AND DOES SOME STANDARD CKECKING.  IT\n*       THE SEARCHES THE CATALOG TO FIND THE ENTRY.  AFTER THE\n*       CATALOG IS SEARCHED IT THEN SEARCHES THE UCB ENTRIES AND\n*       COMPARES THEM WITH OUR DASD TYPES.  THIS LIST IS INCORPRATED\n*       WITHIN THE CODE AND MAY BE ADDED TO EASILY.  IT OBTAINS THE\n*       VOLUME NAME AND CKECKS THE VTOC FOR THE FORMAT 1 DSCB. ALSO,\n*       IF THERE IS A ALTERNATE PATH THERE IS A SECOND ADDRESS IN THE\n*       TABEL POINTING TO THE DEVICE, THERFORE A SECOND SEARCH IS DONE\n*       AND IF A 'HIT' IS MADE A SECOND MESSAGE IS PRODUCED.\n*       A SECOND CHARATER TABLE IS PUT IN FOR THE CONVIENCE OF OTHERS.\n*\n         SAVE      (14,12),,FIND-&SYSTIME-&SYSDATE\n         LR        12,15\n         USING     FIND,12\n         LA        11,SAVEAREA\n         ST        11,8(13)\n         ST        13,SAVEAREA+4\n         LR        13,11\n*----------------------- SOURCE CODE -------------------------------\n         L         R8,4(R1)         GET UPT.\n         L         R9,12(R1)        GET ECT.\n***********************************************************************\n*\n*        CKECK THE COMMAND BUFFER FOR PARMS.\n*\n***********************************************************************\n         L         R2,0(R1)         GET COMMAND BUFFER.\n         LH        R3,0(R2)         GET LENGTH\n         LH        R4,2(R2)         GET OFFSET\n         LR        R5,R4            SAVE LENGTH OF COMMAND.\n         BCTR      R5,0             SET UP FOR EXECUTE.\n         EX        R5,CMD           SAVE COMMAND.\n         SH        R3,=H'4'         SUBTRACT BYTES FOR FIRST WORD.\n         SR        R3,R4            TAKE OFF COMMAND LENGTH.\n         LA        R2,4(R2)         ADD 4 TO POINT PAST FIRST WORD.\n         AR        R2,R4            POINT TO PARM FIELD.\n         CH        R3,=H'0'         IS IT IN THE COMMAND BUFFER?\n         BH        BLANKCK          YES,GO CKECK FOR BLANKS.\n***********************************************************************\n*\n*        GET INFORMATION FROM PUTLINE.\n*\n***********************************************************************\nNEEDDSN  DS        0H\n         XC        MSG1,MSG1\n         MVC       MSG1(19),=C'ENTER DATASET NAME:'\n         BAL       R5,PUTMSG        BRANCH TO PUTLINE.\n         BAL       R5,GETMSG        BRANCH TO GETLINE.\n         LA        R2,GETBLOCK\n         L         R2,4(R2)\n         LH        R3,0(R2)         GET LENGTH\n         LH        R4,2(R2)         GET OFFSET\n         CH        R3,=H'4'         CHECK LENGTH.\n         BE        NEEDDSN          FORGOT TO ENTER.\nPARMLEN  SH        R3,=H'4'         TRUE LENGTH.\n         LA        R4,4(R4)         TRUE OFFSET TO PARM.\n         AR        R2,R4            ADD REG TO POINT TO PARM.\n***********************************************************************\n*\n*        CKECK FOR PRECEEDING BLANKS.\n*\n***********************************************************************\nBLANKCK  DS        0H\n         CLI       0(R2),X'40'      BLANK?\n         BNE       BLANKEND         NO,SKIP.\n         LA        R2,1(R2)         ADD 1 TO PTR.\n         BCT       R3,BLANKCK       CONTINUE ONWARD.\nBLANKEND DS        0H\n***********************************************************************\n*\n*        CKECK FOR ENDING BLANKS.\n*\n***********************************************************************\n         LR        R4,R2            GET STARTING ADDRESS.\n         LR        R5,R3            GET NUMBER OF BYTES.\n         AR        R4,R3\n         BCTR      R4,0             TAKE AWAY 1.\nENDCK    DS        0H\n         CLI       0(R4),X'40'      IS LAST BYTE BLANK?\n         BNE       ENDCKEND         NOPE.\n         BCTR      R3,0             YEP,TAKE AWAY ONE FROM LENGTH.\n         BCTR      R4,0             YEP,TAKE AWAY ONE FOR NEXT CHECK.\n         BCT       R5,ENDCK         CKECK NEXT BYTE.\nENDCKEND DS        0H               END OF LOOP.\n***********************************************************************\n*\n*        CKECK FOR VALID LENGTH.\n*\n***********************************************************************\nLENGTH   DS        0H\n         CH        R3,=H'1'         CKECK LENGTH.\n         BL        NEEDDSN          TO SHORT,GO GET NAME.\n         CH        R3,=H'44'        CHECK THE LENGTH AGAIN.\n         BH        BADNAME          TO LONG,SEND MSG.\n*                                   R3 NOW HAS THE LENGTH.\n*                                   R2 NOW HAS ADDRESS OF REAL START.\n***********************************************************************\n*\n*                  MAKE CAPS AND CKECK FOR VALID CHARACTERS.\n*\n***********************************************************************\n         LR        R4,R2            GET STARTING ADDRESS.\n         LR        R5,R3            GET NUMBER OF BYTES.\nCHARCK0  DS        0H\n         LA        R6,CHARE         GET NUMBER OF BYTES IN TABEL.\n         LA        R7,CHARB         GET START OF TABEL.\n         OI        0(R4),X'40'      MAKE CAPS.\nCHARCK1  DS        0H\n         CLC       0(1,R4),0(R7)    GOOD BYTE.\n         BE        CHARCKE0         YES,NEXT BYTE.\n         LA        R7,1(R7)         MOVE TO NEXT BYTE.\n         BCT       R6,CHARCK1       NO,COMPARE NEXT ENTRY.\n         B         BADNAME          NOT HERE,GO TELL THEM.\nCHARCKE0 DS        0H\n         LA        R4,1(R4)         ADD 1 FOR NEXT CHAR.\n         BCT       R5,CHARCK0       GO SEARCH THE LIST.\n***********************************************************************\n*\n*                  CHECK FIRST BYTE FOR ALPHA.\n*\n***********************************************************************\n         LR        R4,R2            GET STARTING ADDRESS.\n         LR        R5,R3            GET NUMBER OF BYTES.\nALPHA0   DS        0H\n         LA        R6,CHARA         GET NUMBER OF ALPHA BYTES.\n         LA        R7,CHARB         GET START OF TABEL.\nALPHA1   DS        0H\n         CLC       0(1,R4),0(R7)    GOOD BYTE.\n         BE        ALPHA2           MOVE ALONG.\n         LA        R7,1(R7)         NO,MOVE TO NEXT BYTE.\n         BCT       R6,ALPHA1        COMPARE NEXT ENTRY.\n         B         BADNAME          END,GO GIVE MSG.\nALPHA2   DS        0H\n         LA        R4,1(R4)         ADD 1 FOR NEXT CHAR.\n         BCTR      R5,0             SUBTRACT ONE.\n         CH        R5,=H'0'         LAST BYTE?\n         BE        ALPHAE           YES,LEAVE.\n         CLI       0(R4),X'4B'      IS IT A PERIOD?\n         BNE       ALPHA2           NO,NEXT BYTE.\n         BCTR      R5,0             SUBTRACT ONE.\n         CH        R5,=H'0'         LAST BYTE?\n         BE        BADNAME          OH NO CANT END IN PERIOD.\n         LA        R4,1(R4)         OK, POINT TO NEXT CHAR.\n         B         ALPHA0           GO CKECK FOR VALID CHAR.\nALPHAE   DS        0H\n*\n         BCTR      R3,0             REDUCE BY 1 FOR EXECUTE.\n         B         MOVENAME         SKIP AROUND BADNAME ROUTINE.\n***********************************************************************\n*\n*                  BAD NAME.\n*\n***********************************************************************\nBADNAME  DS        0H\n         XC        MSG1,MSG1        CLEAR MSG.\n         MVC       MSG1(22),=C'INVALID DATA SET NAME:'\n         BAL       R5,PUTMSG        TELL THE STORY.\n         B         NEEDDSN          GO GET ANOTHER NAME.\n***********************************************************************\n*\n*                  MOVE NAME IN ALL THE RIGHT PALCES.\n*\n***********************************************************************\nMOVENAME DS        0H\n         EX        R3,NAME          MOVE IN FOR LENGTH OF NAME.\n         XC        MSG1,MSG1        CLEAR MSG.\n         EX        R3,NAME2         MOVE NAME INTO MSG.\n         BAL       R5,PUTMSG        SHOW NAME.\n*\n*\n***********************************************************************\n*\n*                  SET UP AND SEARCH CATALOG.\n*\n***********************************************************************\n         MVC       DDDSN(4),=XL4'44000000'\n         MVC       DDDSN+8(4),=XL4'00000000'\n*\n*\n         LOCATE    DDDSN\n         LTR       R15,R15\n         BNZ       NOTCAT\n***********************************************************************\n*\n*                  GIVE THE RESULTS.\n*\n***********************************************************************\n         XC        MSG1,MSG1\n         MVC       MSG1(25),=C'DATASET CATALOGED ON VOL:'\n         MVC       MSG1+26(6),VOLNAME\n         BAL       R5,PUTMSG\n         B         SERCHUCB\nNOTCAT   DS        0H\n         MVC       MSG1(22),=C'DATASET NOT CATALOGED:'\n         BAL       R5,PUTMSG\n***********************************************************************\n*\n*                  SEARCH ALL DASD VOLUMES FOR DATA SET.\n*\n*                  FIND UCB.\n***********************************************************************\nSERCHUCB DS      0H\n         L       R5,16                     ADDRESS OF CVT\n         L       R4,40(R5)                 CVTILK2\nNEXTUCB  DS      0H\n         CLC     0(2,R4),=X'FFFF'          LAST ENTRY?\n         BE      HOMEWARD                  THATS ALL FOKES.\n         ICM     R6,B'0011',0(R4)          LOAD UCB.\n         CLI     2(R6),X'FF'               VALID ENTRY?\n         BNE     ADDUCB                    NOPE,NEXT.\n***********************************************************************\n*\n*                  CHECK FOR DEVTYPE.\n*\n***********************************************************************\nCKDASD   DS      0H\n         CLI     18(R6),X'20'\n         BNE     ADDUCB\n         CLI     28(R6),X'00'\n         BE      ADDUCB\n         CLI     19(R6),X'06'\n         BNE     *+14\n         MVC     DASD(6),=C'2305  '\n         B       GETNAME\n         CLI     19(R6),X'07'\n         BNE     *+14\n         MVC     DASD(6),=C'2305  '\n         B       GETNAME\n         CLI     19(R6),X'09'\n         BNE     *+14\n         MVC     DASD(6),=C'3330  '\n         B       GETNAME\n         CLI     19(R6),X'0A'\n         BNE     *+14\n         MVC     DASD(6),=C'3340  '\n         B       GETNAME\n         CLI     19(R6),X'0B'\n         BNE     *+14\n         MVC     DASD(6),=C'3350  '\n         B       GETNAME\n         CLI     19(R6),X'0D'\n         BNE     *+14\n         MVC     DASD(6),=C'3330-1'\n         B       GETNAME\n         B       ADDUCB                    NEXT,NONE OF OUR DEVICES.\n***********************************************************************\n*\n*                  CHECK NUMBER OF PATHS.\n*\n***********************************************************************\nGETNAME  DS      0H\n         MVC     VOLNAME,28(R6)             MOVE VOL IN.\n         OBTAIN  DSCBNAME                   GO CHECK IT.\n         LTR     R15,R15                    FOUND?\n         BNZ     ADDUCB                     NOT HERE,NEXT.\n***********************************************************************\n*\n*                  SET UP THE MESSAGE AND GIVE IT.\n*\n***********************************************************************\n         MVC     STATUS,STATUS2             REBUILD STATUS LINE.\n         TM      8(R6),B'10000000' PRIMARY CPU 0 NOT AVAILABLE\n         BNO     *+10\n         MVC     STATUS(6),=C'0 P NA'\n         TM      8(R6),B'01000000' SECONDARY CPU 0 NOT AVAILABLE\n         BNO     *+10\n         MVC     STATUS+7(6),=C'0 S NA'\n         TM      8(R6),B'00100000' PRIMARY CPU 1 NOT AVAILABLE\n         BNO     *+10\n         MVC     STATUS+14(6),=C'1 P NA'\n         TM      8(R6),B'00010000' SECONDARY CPU 1 NOT AVAILABLE\n         BNO     *+10\n         MVC     STATUS+21(6),=C'1 S NA'\n         XC      MSG1,MSG1\n         MVC     MSG1(12),=C'DEV ADDRESS:'\n         MVC     MSG1+13(3),13(R6)\n         MVC     MSG1+17(4),=C'VOL:'\n         MVC     MSG1+22(6),28(R6)\n         MVC     MSG1+29(5),=C'TYPE:'\n         MVC     MSG1+35(6),DASD\n         MVC     MSG1+42(5),=C'PATH:'\n         MVC     MSG1+48(30),STATUS\n         BAL     R5,PUTMSG\n***********************************************************************\n*\n*                  SET UP FOR NEXT ENTRY.\n*\n***********************************************************************\nADDUCB   DS      0H\n         LA      R4,2(R4)\n         B       NEXTUCB\n***********************************************************************\n*\n*                  CLEAN UP AND HOMEWARD BOUND.\n*\n***********************************************************************\nHOMEWARD DS        0H\n*-------------------------------------------------------------------\n         L         13,SAVEAREA+4\n         ST        15,16(13)\n         RETURN    (14,12),T\n*\n*\nGETMSG   DS        0H\n         GETLINE   PARM=GETBLOCK,UPT=(R8),ECT=(R9),ECB=ECBADS,         *\n               MF=(E,IOPLADS)\n         BR        R5\n*\n*\nPUTMSG   DS        0H\n         PUTLINE   PARM=PUTBLOCK,UPT=(R8),ECT=(R9),                    *\n               ECB=ECBADS,OUTPUT=(PROMPT,TERM,SINGLE,DATA),            *\n               MF=(E,IOPLADS)\n         BR        R5\n*\n*\n*------------------------ VARIALBELS -------------------------------\nCMD      MVC     COMMAND(1),4(R2)\nNAME     MVC     CAMNAME(1),0(R2)\nNAME2    MVC     MSG1(1),0(R2)\nDDDSN    CAMLST  NAME,CAMNAME,,VCB\nDSCBNAME CAMLST  SEARCH,CAMNAME,VOLNAME,CAMFILL\nCAMNAME  DC      CL44' '\nVCB      DS      0D\nVOLNUM   DS      CL2\nDEVTYP   DS      CL4\nVOLNAME  DS      CL6\nDATASEQ# DS      CL2\nCAMFILL  DS      CL251\nCOMMAND  DC      CL8' '\nDASD     DS      CL6\nSTATUS   DS      CL30\nSTATUS2  DC      CL30'0 P AV 0 S AV 1 P AV 1 S AV'\nECBADS   DC      F'0'\nIOPLADS  DC      4F'0'\nPROMPT   DS      0F\n         DC      H'84',H'0'\nMSG1     DC      CL80' '\nPUTBLOCK PUTLINE MF=L\nGETBLOCK GETLINE INPUT=(TERM,PHYSICAL),TERMGET=(EDIT,WAIT),MF=L\n*-------------------------------------------------------------------\nSAVEAREA DS      18F\nBADCHARB DS      0H\n         DC      X'4A'           \u00a2 CENT.\n         DC      X'4C'           < LESS THAN.\n         DC      X'4D'           ( LEFT PARREN.\n         DC      X'4F'           | BAR.\n         DC      X'50'           & ANPERSAN.\n         DC      X'5A'           ! EXLAMATION.\n         DC      X'5C'           * ASTERISK.\n         DC      X'5D'           ) RIGHT PERREN.\n         DC      X'5E'           ; SEMI COLON.\n         DC      X'5F'           \u00ac NOT SIGN.\n         DC      X'60'           - DASH.\n         DC      X'61'           / SLASH.\n         DC      X'6A'           \u00a6 SPLIT BAR.\n         DC      X'6B'           , CAMMA.\n         DC      X'6C'           % PERCENT SIGN.\n         DC      X'6D'           _ UNDER SCORE.\n         DC      X'6E'           > GREATER THAN.\n         DC      X'6F'           ? QUESTION MARK.\n         DC      X'79'           ` APOSTRAPHY.\n         DC      X'7A'           : COLON.\n         DC      X'7D'           ' QUOTE.\n         DC      X'7E'           = EQUAL.\n         DC      X'7F'           \" QUOTE.\n         DC      X'A1'           ~ NOR.\n         DC      X'C0'           { BRACKET.\n         DC      X'D0'           } BRACKET.\n         DC      X'E0'           \\ BACK SLASH\n         DC      X'FA'           | BAR.\nBADCHARE EQU     *-BADCHARB\nCHARB    DS      0H\n         DC      X'4B'           . PERIOD.\n         DC      X'5B'           $ DOLLAR SIGN.\n         DC      X'7C'           @ AT SIGN.\n         DC      X'7B'           # POUND SIGN.\n         DC      X'C1'           A\n         DC      X'C2'           B\n         DC      X'C3'           C\n         DC      X'C4'           D\n         DC      X'C5'           E\n         DC      X'C6'           F\n         DC      X'C7'           G\n         DC      X'C8'           H\n         DC      X'C9'           I\n         DC      X'D1'           J\n         DC      X'D2'           K\n         DC      X'D3'           L\n         DC      X'D4'           M\n         DC      X'D5'           N\n         DC      X'D6'           O\n         DC      X'D7'           P\n         DC      X'D8'           Q\n         DC      X'D9'           R\n         DC      X'E2'           S\n         DC      X'E3'           T\n         DC      X'E4'           U\n         DC      X'E5'           V\n         DC      X'E6'           W\n         DC      X'E7'           X\n         DC      X'E8'           Y\n         DC      X'E9'           Z\nCHARA    EQU     *-CHARB\n         DC      X'F0'           1\n         DC      X'F1'           2\n         DC      X'F2'           3\n         DC      X'F3'           4\n         DC      X'F4'           5\n         DC      X'F5'           6\n         DC      X'F6'           7\n         DC      X'F7'           8\n         DC      X'F8'           9\n         DC      X'F9'           0\nCHARE    EQU     *-CHARB\nR0       EQU       0\nR1       EQU       1\nR2       EQU       2\nR3       EQU       3\nR4       EQU       4\nR5       EQU       5\nR6       EQU       6\nR7       EQU       7\nR8       EQU       8\nR9       EQU       9\nR10      EQU       10\nR11      EQU       11\nR12      EQU       12\nR13      EQU       13\nR14      EQU       14\nR15      EQU       15\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT406/FILE406.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT406", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}