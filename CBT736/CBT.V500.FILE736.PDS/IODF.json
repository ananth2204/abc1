{"INMR01": {"INMLRECL": 80, "INMFNODE": "NODENAME", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20061003132758000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1587222, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 420, "INMBLKSZ": 27720, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "SBGOLOB.NAUGHTON.FILE736", "INMMEMBR": "SBGOLOB.NAUGHTON.FILE736", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1587222, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1587222, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"SBGOLOB.NAUGHTON.FILE736": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 27720, "DS1LRECL": 420, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12304, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 1113, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "060276", "DS1SCEXT": "b'\\x80lH'", "DS1SCALO": "b'P\\x00\\x00\\x0f'", "DS1LSTAR": "b'\\x00\\x16\\x06'", "DS1TRBAL": "b'&\\xc8'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f$\\x80\\x00\\x04\\x89pP'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f$\\x80\\x00\\x04\\x89pP'", "b'X\\xf3\\xe9\\x10\\x00\\x00\\x03\\xf0\\x00\\x03\\x03\\xf2\\x00\\x01\\x00\\x1d'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$INTRO": {"ttr": 5633, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x06\\x00\\x00\\x01\\x06'o\\x01\\x06'o\\t&\\x00h\\x00h\\x00\\x00\\xe4\\xf6\\xf8\\xf1\\xf5\\xf1\\xf2@@@\"", "ispf": {"version": "01.06", "flags": 0, "createdate": "2006-10-03T00:00:00", "modifydate": "2006-10-03T09:26:00", "lines": 104, "newlines": 104, "modlines": 0, "user": "U681512"}, "text": "IODF.CGI Documentation\n------------------------------------------------------------------------------------------\n\n------------------------------------------------------------------------------------------\nIntroduction\n------------------------------------------------------------------------------------------\nThis PERL script runs on the MVS Webserver and produces a table, in HTML, of channels,\nassociated control units and devices. It also displays switch information.\n\nIt has been tested with IOCPs created for Amdahl and IBM z/Series machines running\nz/OS 1.4.\n\nA Sample:\n\nCHP CSS PCHID System   Type Switch CU    CUA Unit Link UA     Devices  Attributes\n------------------------------------------------------------------------------------------\n01   0   160   S1 S4   CNC  06     7000  0   3990 A3   00,256 7000,256 STADET=Y,UNIT=3390\n                                   7100  1   3990 A3   00,256 7100,256 STADET=Y,UNIT=3390\n                                   7200  1   3990 A3   00,256 7200,256 STADET=Y,UNIT=3390\n                                   7300  1   3990 B7   00,256 7300,256 STADET=Y,UNIT=3390\n\n\n------------------------------------------------------------------------------------------\nConfiguration\n------------------------------------------------------------------------------------------\n1.  Update the 1st line of the script to point to your PERL interpreter.\n\n2.  Copy the script into a directory - making sure you update the cgi_directory\n    variable above. Make sure the script is named iodf.cgi.\n\n3.  Copy the IOCPs/IODFs (as text files) into the directory you have specified in\n    data_directory. We use the naming convention of IODFxx.PROC where xx is the two\n    digit ID of the IODF.\n\n3.1 There is a sample JCL step at the bottom of this file which we use to copy the\n    production IODF/IOCPs into our USS directories.\n\n4.  Update the title variable in the sript.\n\n5.  Update the device_sw_list to display CU types for certain IODEVICE unit types in the\n    Switch display.\n\n6.  Then try it through your browser! Currently the Cascading Style Sheet uses\n    IE-specific options.\n\n\n------------------------------------------------------------------------------------------\nSample JCL Step for copying IODF/IOCP to USS\n------------------------------------------------------------------------------------------\n\n//*********************************************************************\n//** Produce IOCP decks from HCD for WEBIODF\n//** ---------------------------------------\n//**\n//** Change IODF parameters in step at the bottom of this job!\n//**\n//**\n//*********************************************************************\n//WEBIODF  PROC IODF='',IPARM='',DECK=NULLFILE\n//GO       EXEC PGM=CBDMGHCP,REGION=0M,PARM=&IPARM\n//HCDIODFS DD   DSN=&IODF,DISP=SHR\n//HCDDECK  DD   PATH='&DECK',\n//         PATHOPTS=(OWRONLY,OCREAT,OEXCL),\n//         PATHMODE=(SIRWXU,SIRWXG,SIRWXO),\n//         RECFM=FB,LRECL=80,BLKSIZE=6080\n//HCDMLOG  DD   SYSOUT=*,DCB=(RECFM=FBA,LRECL=133,BLKSIZE=6650)\n//SYSPRINT DD   DSN=&&IOCPOUT,DCB=(RECFM=FBA,LRECL=133,BLKSIZE=6650),\n//         SPACE=(CYL,(30,2)),DISP=(NEW,PASS,DELETE),UNIT=SYSALLDA\n//SYSIN    DD   DSN=&&TEMP,DISP=(NEW,DELETE),SPACE=(CYL,(1,1)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=6080),UNIT=SYSALLDA\n//*-------------------------------------------------------------------\n//*        PRINT IOCP REPORT ONLY IF ERROR OCCURRED\n//*-------------------------------------------------------------------\n//PRINT    EXEC PGM=IEBGENER,COND=(0,EQ,GO)\n//SYSUT1   DD DSN=&&IOCPOUT,DISP=(OLD,DELETE)\n//SYSUT2   DD SYSOUT=*\n//SYSIN    DD DUMMY\n//SYSPRINT DD DUMMY\n//*------------------------------------------------------------------\n//*        OTHERWISE CLEAN UP FOR NEXT STEPS\n//*------------------------------------------------------------------\n//CLEANUP  EXEC PGM=IEFBR14,COND=(0,NE,GO)\n//SYSUT1   DD DSN=&&IOCPOUT,DISP=(OLD,DELETE)\n//         PEND\n//*********************************************************************\n//*********************************************************************\n//CIOCP EXEC PROC=WEBIODF,\n//        IPARM='(IOCDS,,K7X5J,D,SA)',               <---- change the processor name\n//      IODF='SWDATAVS.IODF07',                      <---- change the dataset name\n//      DECK='/S2/BA/mvsweb/data/iodf/iodf07.k7x5j'  <---- change the filename\n//GO.HCDCNTL DD *\nIODF07                                               <---- change the IODF name\n/*\n//\n\n\n------------------------------------------------------------------------------------------\nSupport\n------------------------------------------------------------------------------------------\nVersion: 1.6 (15th April 2006)\n\nEmail  : mark@blue-shantung.co.uk\n\n------------------------------------------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IODF": {"ttr": 8, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x06\\x00\\x00\\x01\\x06'o\\x01\\x06'o\\x086\\x06\\xd6\\x06\\xd6\\x00\\x00\\xe4\\xf6\\xf8\\xf1\\xf5\\xf1\\xf2@@@\"", "ispf": {"version": "01.06", "flags": 0, "createdate": "2006-10-03T00:00:00", "modifydate": "2006-10-03T08:36:00", "lines": 1750, "newlines": 1750, "modlines": 0, "user": "U681512"}, "text": "#!/usr/local/bin/perl\n##########################################################################################################\n#\n# I O D F . C G I\n# --------------------------------------------------------------------------------------------------------\n# HTML, PERL/CGI scripts written by Mark Naughton in November 2005.\n#\n# Any questions, contact me at: mark@blue-shantung.co.uk\n#\n# --------------------------------------------------------------------------------------------------------\n# Version  Date        Inits  Change\n# -------  ----------  -----  ----------------------------------------------------------------------------\n# 1.0      15/11/2005  MDN    Initial release of script.\n# 1.1      18/11/2005  MDN    Added comments and added code to change status bar to indicate what processing\n#                             is happening.\n# 1.2      22/11/2005  MDN    Added code to display switch connections per processor. As the HCD job writes\n#                             to the USS file, the file does not become separated by newlines so added code\n#                             to split the IODF when it is read for the menu and for processing.\n# 1.3      16/12/2005  MDN    Added code to create drop-down list of devices to enable easier viewing of\n#                             specific devices.\n#          19/12/2005  MDN    Fixed problem with IOCPs containing TOK instead of SCR. Fixed problem with\n#                             counting of CHPs, CUs and devices. Reworked menu. Now adds CU units to the\n#                             drop-down list. Multiple paths use multiple links so we now split the\n#                             multi-links to their correct path. Removed CU units from drop-down list.\n# 1.4      13/01/2006  MDN    Changed display of matrix to make the lines smaller. Now working to support\n#                             CSS, MAXDEV and PCHID....\n#          16/01/2006  MDN    Changed CHP code to add PCHID to the structure. Changed CU and IODEVICE\n#                             parse code to read until the end of the data as new IOCPs now include\n#                             IODEVICE under the CU instead of grouping them together.\n#          17/01/2006  MDN    Fixed code so that CSS, CU PATH and LINK work together. PARTITION for\n#                             IODEVICES is now translated into SYS=. Added support for CPATH. Updated\n#                             Unused CHPIDS to display more information. Added support to display switch\n#                             information for a selected IODEVICE unit type by associating CU types with\n#                             the unit.\n# 1.5      15/03/2006  MDN    Added display for sorted Physical Channel IDs.\n#          04/04/2006  MDN    Now supports \"Build IOCP Statements\" from HCD dialog. Added drop-down menu\n#                             for systems.\n# 1.6      15/04/2006  MDN    Now supports TPATH in the CHPID statement.\n#\n##########################################################################################################\n# COPYRIGHT NOTICE\n##########################################################################################################\n# This program remains the copyright of Mark Naughton and British Airways. Unlimited copying and use of\n# this material is allowed, however it must not be sold for commercial reasons. A reasonable fee for a CD\n# or DVD containing this program may be charged. This program works-as-is and we hold no responsibility if\n# the program does not do what it says, or causes any mayhem in your system.\n#\n##########################################################################################################\n\n##########################################################################################################\n# ONLY CHANGE THESE USER PARAMETERS\n##########################################################################################################\n$data_directory = \"/S2/BA/mvsweb/data/iodf\";\n$cgi_directory  = \"/cgi-bin\";\n$script_name    = \"iodf.cgi\";\n$title          = \"British Airways Infrastructure Software:\";\n\n%device_sw_list = (\n                    \"3278\", \"3174\",\n                    \"3279\", \"3174\",\n                    \"3390\", \"3990\",\n                    \"3490\", \"3490 9490 9840\" ,\n                    \"3590\", \"9840\"\n                  );\n\n##########################################################################################################\n# END OF USER PARAMETERS\n##########################################################################################################\n\n##########################################################################################################\n# INSTALLATION\n#\n# 1. Update the 1st line to point to your PERL interpreter.\n# 2. Copy this script into a directory - making sure you update the cgi_directory variable above.\n# 3. Copy the IOCPs/IODFs (as text files) into the directory you have specified in data_directory. We use\n#    the naming convention of IODFxx.PROC where xx is the two digit ID of the IODF.\n# 4. Update the title variable above.\n# 5. Update the device_sw_list above to display CU types for certain IODEVICE unit types.\n# 6. Then try it through your browser! Currently the Cascading Style Sheet uses IE-specific options.\n#\n#\n# NOTES\n#\n# 1. This script was written based on pre-z/Series IOCPs so the parsing of the IOCP is sequential as in\n#    all IODEVICES are processed, then the CUs and then the CHPs. As our site does not have more than\n#    1 x CSS, it is not known if this will cause a problem - please send me an email if it doesn't and\n#    we'll get it fixed.\n#\n##########################################################################################################\n\n\n##########################################################################################################\n# ARRAY STRUCTURE:\n#\n#  0. (Channel SubSystem) CSS:CHPID\n#  1. SYSTEM\n#  2. TYPE\n#  3. SWITCH\n#  4. CONTROL UNIT\n#  5. CONTROL UNIT ADDRESS\n#  6. UNIT\n#  7. LINK\n#  8. UNIT ADDRESS\n#  9. DEVICE\n# 10. DEVICE ATTRIBUTES\n# 11. Blank or DUP - specifies that this entry has been duplicated from within the data - for example as\n#     in splitting the paths to a CU.\n# 12. Number - specifies the number of following (and including) entries that relate this the CHPID or\n#     Switch.\n# 13. PCHID\n# 14. Miscellaneous CHPID Information\n#\n##########################################################################################################\n\n\n\n##########################################################################################################\n##########################################################################################################\n#                                   M A I N  C O D E  F O R  D I S P L A Y\n##########################################################################################################\n##########################################################################################################\n$version = \"1.6 (15th April 2006)\";\nprint \"Content-type: text/html\\n\\n\";\n\n##########################################################################################################\n# First, we retrieve the userid from the command line of the script call. Then we print the Content-type\n# so we can start displaying HTML code.\n##########################################################################################################\n$parameter_line = $ENV{'QUERY_STRING'};\n($parm1,$parm2,$parm3) = split(/&/,$parameter_line);\n($name,$iodf) = split(/=/,$parm1);\n$iodf =~ s/ //g;\n($name,$url_system) = split(/=/,$parm2);\n$url_system =~ s/ //g;\nif($url_system eq \"\") { $url_system = \"ALL\"; }\n\n($name2,$url_device_type) = split(/=/,$parm3);\nif($url_device_type eq \"\") { $url_device_type = \"ALL\"; }\n\n##########################################################################################################\n# First we display the main body of the page.\n##########################################################################################################\nprint <<ENDHTML_S;\n<HTML>\n\n<HEAD>\n<TITLE>$title IODFs & IOCPs</TITLE>\n<style>\n.heading {\n font           : bold 24px Arial, Verdana;\n color          : white;\n height         : 26px;\n text-decoration: none;\n text-align     : left;\n filter         : progid:DXImageTransform.Microsoft.Gradient(GradientType=0,StartColorStr=#3970CA,EndColorStr=#254E8E)\n}\n.box {\n border-style   : solid;\n border-color   : black;\n border-width   : 1px;\n}\n.box_head_l {\n border-width   : 1px 0px 1px 1px;\n border-style   : solid;\n border-color   : black;\n}\n.box_head_r {\n border-width   : 1px 1px 1px 1px;\n border-style   : solid;\n border-color   : black;\n}\n.box_l {\n border-width   : 0px 0px 1px 1px;\n border-style   : solid;\n border-color   : black;\n}\n.box_r {\n border-width   : 0px 1px 1px 1px;\n border-style   : solid;\n border-color   : black;\n}\n.button_blue {\n font           : 11px Verdana;\n color          : black;\n text-decoration: none;\n width          : 100px;\n border         : solid 1px black;\n clear          : both;\n filter         : progid:DXImageTransform.Microsoft.Gradient(GradientType=0,StartColorStr=#FFFFFF,EndColorStr=#CDD9EF)\n}\n.button_high {\n font           : 11px Verdana;\n color          : black;\n text-decoration: none;\n width          : 100px;\n border         : solid 1px black;\n clear          : both;\n filter         : progid:DXImageTransform.Microsoft.Gradient(GradientType=0,StartColorStr=#FFFFFF,EndColorStr=#eeddaa)\n}\n.oth_heading {\n font           : bold 24px Arial, Verdana;\n color          : white;\n height         : 26px;\n text-decoration: none;\n border-color   : black;\n border-style   : solid;\n filter         : progid:DXImageTransform.Microsoft.Gradient(GradientType=0,StartColorStr=#990000,EndColorStr=#F0F0F0)\n}\n</style>\n<META HTTP-EQUIV=\"Expires\" CONTENT=\"-1\">\n<META HTTP-EQUIV=\"Pragma\" CONTENT=\"no-cache\">\n</HEAD>\n\n<BODY bgcolor=\"#F0F0F0\" LINK=\"#330099\" VLINK=\"#006600\" leftmargin=0 topmargin=0 rightmargin=0 marginheight=0 marginwidth=0 bottommargin=0 onunload=\"Check_Logout();\">\n<TABLE align=\"center\" WIDTH=\"100%\" cellpadding=0 cellspacing=0>\n<tr>\n<td align=\"left\" class=\"heading\" style=\"font-family:arial,verdana; font-size:20px; color:#FFFFFF; line-height:30px\">\n&nbsp;&nbsp;<b>$title IODFs & IOCPs</b>\n</td>\n</tr></table>\n\n<TABLE align=\"center\" WIDTH=\"90%\" cellpadding=0 cellspacing=0><tr>\n<td valign=\"top\" align=\"left\" style=\"font-family:arial,verdana; font-size:12px; color:#000000; line-height:14px\">\n\nENDHTML_S\n\n##########################################################################################################\n# We do not have any parameters so we just display a list of the IODFs.\n##########################################################################################################\nif($iodf eq \"\") {\n   $iodf_list   = \"\";\n   @iodf_pfiles = ( \"\" );\n   $iodf_pfiles_c = 0;\n\n   print \"<BR><BR><BR>The following IODFs have been found in <b>$data_directory</b> : <BR><BR>\";\n\n##########################################################################################################\n# Read the directory, and get the information\n##########################################################################################################\n   opendir(DIR,$data_directory);\n   @iodf_files = readdir(DIR);\n   closedir(DIR);\n   $removedot = shift(@iodf_files);\n   $removedot = shift(@iodf_files);\n   @iodf_files = sort(iodf_sort @iodf_files);\n   foreach $iodf_files (@iodf_files) {\n       if($iodf_files eq \".\" || $iodf_files eq \"..\") { next; }\n       $data_filename = \"$data_directory/$iodf_files\";\n       if(open(DATAFILE,\"$data_filename\")) {\n          flock(DATAFILE,2);\n          seek(DATAFILE,0,0);\n          @iodf_data = <DATAFILE>;\n          close(DATAFILE);\n       } else {\n          next;\n       }\n       if(scalar @iodf_data eq 1) {\n          $tiodf_data_hcd = $iodf_data\u00dd0\u00a8;\n          @iodf_data = unpack(\"A80\" x (length($tiodf_data_hcd)/80),$tiodf_data_hcd);\n       }\n       if(index($iodf_data\u00dd0\u00a8,\"TITLE '\") eq -1) {\n          $iodf_name = substr($iodf_data\u00dd0\u00a8,21,6);\n          if(index($iodf_data\u00dd2\u00a8,\"SCR=\") ne -1) {\n             $t_iodf    = index($iodf_data\u00dd2\u00a8,\"SCR=\");\n             $iodf_proc = substr($iodf_data\u00dd2\u00a8,$t_iodf,12);\n             $iodf_proc =~ s/SCR=//g;\n          } else {\n             $t_iodf_comma = index($iodf_data\u00dd2\u00a8,\",\");\n             $iodf_proc = substr($iodf_data\u00dd2\u00a8,1,$t_iodf_comma-1);\n             $iodf_proc =~ s/TOK=\\(//g;\n             $iodf_proc =~ s/\\'//g;\n          }\n       } else {\n          $iodf_title2 = trim($iodf_data\u00dd2\u00a8);\n          $iodf_title2 =~ s/,/ /g;\n          @iodf_title2_words = split(/ /,$iodf_title2);\n          $iodf_proc = $iodf_title2_words\u00dd1\u00a8;\n          $iodf_proc =~ s/NAME=//;\n          $iodf_name = substr(trim($iodf_data\u00dd5\u00a8),5,6);\n       }\n       $iodf_proc =~ s/ //g;\n\n##########################################################################################################\n# Insert the IODF and related data into an array\n##########################################################################################################\n       if(index($iodf_list,$iodf_name) eq -1) { $iodf_list .= \"$iodf_name \"; }\n       $iodf_pfiles_c++;\n       $iodf_pfiles\u00dd$iodf_pfiles_c\u00a8 = \"$iodf_name $iodf_proc $iodf_files\";\n       undef @iodf_data;\n   }\n\n##########################################################################################################\n# Split the IODFs into an array, sort the data and count it\n##########################################################################################################\n   @iodf_file = split(/ /,$iodf_list);\n   @iodf_file = sort(iodf_menu_sort @iodf_file);\n\n   $iodf_menu_width = scalar @iodf_file;\n\n##########################################################################################################\n# Now step through the data and display the table\n##########################################################################################################\n   print \"<TABLE align=\\\"left\\\" WIDTH=\\\"90%\\\" class=\\\"box\\\" cellpadding=0 cellspacing=0>\";\n   for($i=0; $i<scalar @iodf_file; $i=$i+$iodf_menu_width ) {\n       print \"<tr>\";\n       for($j=0; $j<$iodf_menu_width; $j++) {\n           $border_width = \"border-width: 0px 1px 1px 0px;\";\n           if($j eq $iodf_menu_width -1) { $border_width = \"border-width: 0px 0px 1px 0px;\"; }\n           print \"<td valign=\\\"top\\\" align=\\\"center\\\" class=\\\"oth_heading\\\" style=\\\"$border_width font-family:arial,verdana; font-size:16px; line-height:18px\\\">$iodf_file\u00dd$j\u00a8</td>\";\n       }\n       print \"</tr>\";\n       print \"<tr>\";\n       for($j=0; $j<$iodf_menu_width; $j++) {\n           $border_width = \"border-width: 0px 1px 0px 0px; border-color: black; border-style: solid;\";\n           if($j eq $iodf_menu_width -1) { $border_width = \"border-width: 0px 0px 0px 0px;border-color: black; border-style: solid;\"; }\n           print \"<td valign=\\\"top\\\" align=\\\"center\\\" style=\\\"$border_width font-family:arial,verdana; font-size:14px; color:#000000; line-height:16px\\\"><BR>\";\n           foreach $iodf_pfiles (@iodf_pfiles) {\n               @t_iodf_pfiles = split(/ /,$iodf_pfiles);\n               if(index($iodf_pfiles,$iodf_file\u00dd$j\u00a8) ne -1) {\n                  print \"<button type=\\\"button\\\" class=\\\"button_blue\\\" onmouseover=\\\"this.className='button_high'\\\" onmouseout=\\\"this.className='button_blue'\\\" value=\\\"$t_iodf_pfiles\u00dd1\u00a8\\\" ONCLICK=\\\"javascript:parent.window.location = '$cgi_directory/$script_name?iodf=$t_iodf_pfiles\u00dd2\u00a8&sys=ALL'; window.status='-->> Processing $t_iodf_pfiles\u00dd0\u00a8 for $t_iodf_pfiles\u00dd1\u00a8...'\\\"><b>$t_iodf_pfiles\u00dd1\u00a8</b></button><BR>\";\n               }\n           }\n           print \"<BR></td>\";\n       }\n       print \"</tr>\";\n   }\n   print \"</table>\";\n\n##########################################################################################################\n# Close tables and finish the display\n##########################################################################################################\n   print \"</td></tr>\";\n   print \"<tr><td valign=\\\"top\\\" align=\\\"left\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:#000000; line-height:14px\\\">\";\n   print \"<BR><BR>&nbsp;&nbsp;Version: <b>$version</b>\";\n   print \"<BR><BR><BR>&nbsp;&nbsp;Need to check the CTC connections? <A HREF=\\\"$cgi_directory/iodf_ctc.cgi\\\"><SMALL>(click here)</SMALL></A>\";\n   print \"<BR><hr size=1 width=\\\"100%\\\" color=black></td></tr></table><br><br></body><HEAD>\";\n   print \"<META HTTP-EQUIV=\\\"Expires\\\" CONTENT=\\\"-1\\\"><META HTTP-EQUIV=\\\"Pragma\\\" CONTENT=\\\"no-cache\\\"></HEAD></html>\";\n   exit;\n\n} else {\n##########################################################################################################\n# We read the IODF and join all lines that are 'continued' together\n##########################################################################################################\n   $data_filename = \"$data_directory/$iodf\";\n   if(open(DATAFILE,\"$data_filename\")) {\n      flock(DATAFILE,2);\n      seek(DATAFILE,0,0);\n      @tiodf_data = <DATAFILE>;\n      close(DATAFILE);\n      foreach $tiodf_data (@tiodf_data) {\n          chomp($tiodf_data);\n      }\n   } else {\n      display_error(\"Unable to open $data_filename for reading.\");\n      exit;\n   }\n   if(scalar @tiodf_data eq 1) {\n      $tiodf_data_hcd = $tiodf_data\u00dd0\u00a8;\n      @tiodf_data = unpack(\"A80\" x (length($tiodf_data_hcd)/80),$tiodf_data_hcd);\n   }\n   @iodf_data = (\"\");\n   $iodf_counter = -1;\n   $temp_iodf = \"\";\n   foreach $tiodf_data (@tiodf_data) {\n       if(substr($tiodf_data,71,1) eq \"*\") {\n          $t_iodf = trim(substr($tiodf_data,0,71));\n          $temp_iodf .= $t_iodf;\n        } else {\n          $iodf_counter++;\n          $tt_iodf = trim(substr($tiodf_data,0,71));\n          $iodf_data\u00dd$iodf_counter\u00a8 .= $temp_iodf . $tt_iodf;\n          $temp_iodf = \"\";\n        }\n   }\n   undef @tiodf_data;\n\n##########################################################################################################\n# Go through the IODF and remove any commas before keywords which makes parsing easier later.\n##########################################################################################################\n   @iodevices = (\"\");\n   $ioddevice_count = -1;\n   $start_chpid = -1;\n   $start_cu    = -1;\n   $start_iod   = -1;\n   $num_chps    = 0;\n   $num_cus     = 0;\n   $num_iod     = 0;\n   foreach $iodf_data (@iodf_data) {\n       $tmp_iodf_data = $iodf_data;\n       $found = 0;\n       if(index($iodf_data,\"CHPID\") ne -1) {\n          $tmp_iodf_data =~ s/,PATH/ PATH/ig;\n          $tmp_iodf_data =~ s/,CPATH/ CPATH/ig;\n          $tmp_iodf_data =~ s/,TYPE/ TYPE/ig;\n          $tmp_iodf_data =~ s/,SHARED/ SHARED/ig;\n          $tmp_iodf_data =~ s/,PARTITION/ PARTITION/ig;\n          $tmp_iodf_data =~ s/,PCHID/ PCHID/ig;\n          $tmp_iodf_data =~ s/,SWITCH/ SWITCH/ig;\n          $tmp_iodf_data =~ s/,SWPORT/ SWPORT/ig;\n          $tmp_iodf_data =~ s/,DESC/ DESC/ig;\n          $tmp_iodf_data =~ s/,TPATH/ TPATH/ig;\n          $found = 1;\n       }\n       if(index($iodf_data,\"CNTLUNIT\") ne -1) {\n          $tmp_iodf_data =~ s/,CUNUMBR/ CUNUMBR/ig;\n          $tmp_iodf_data =~ s/,PATH/ PATH/ig;\n          $tmp_iodf_data =~ s/,LINK/ LINK/ig;\n          $tmp_iodf_data =~ s/,UNIT/ UNIT/ig;\n          $tmp_iodf_data =~ s/,CUADD/ CUADD/ig;\n          $tmp_iodf_data =~ s/,PROTOCL/ PROTOCL/ig;\n          $tmp_iodf_data =~ s/,SHARED/ SHARED/ig;\n          $tmp_iodf_data =~ s/,DESC/ DESC/ig;\n          $tmp_iodf_data =~ s/,SWPORT/ SWPORT/ig;\n          $found = 2;\n       }\n       if(index($iodf_data,\"IODEVICE ADDRESS\") ne -1) {\n          $tmp_iodf_data =~ s/,CUNUMBR/ CUNUMBR/ig;\n          $tmp_iodf_data =~ s/,STADET/ STADET/ig;\n          $tmp_iodf_data =~ s/,UNIT/ UNIT/ig;\n          $tmp_iodf_data =~ s/,PARTITION/ PARTITION/ig;\n          $tmp_iodf_data =~ s/,TIMEOUT/ TIMEOUT/ig;\n          $tmp_iodf_data =~ s/,MODEL/ MODEL/ig;\n          $tmp_iodf_data =~ s/,DESC/ DESC/ig;\n          $found = 3;\n       }\n       if($found ne 0) {\n          $iodevice_count++;\n          if(index($iodf_data,\"CHPID\") ne -1) {\n             if($start_chpid eq -1) { $start_chpid = $iodevice_count; }\n             $num_chps++;\n          }\n          if(index($iodf_data,\"CNTLUNIT\") ne -1) {\n             if($start_cu eq -1)    { $start_cu    = $iodevice_count; }\n             $num_cus++;\n          }\n          if(index($iodf_data,\"IODEVICE ADDRESS\") ne -1) {\n             if($start_iod eq -1)   { $start_iod   = $iodevice_count; }\n             $num_iod++;\n          }\n          $iodevices\u00dd$iodevice_count\u00a8 = $tmp_iodf_data;\n       }\n   }\n\n##########################################################################################################\n# Format the size of the array to three times the size of the IODEVICES. This allows multiple channels to\n# be added which go to the same device. Each element defines the CHPID, CU to one device statement.\n# Define the switch array.\n##########################################################################################################\n   $max_len = (scalar @iodevices) * 3;\n   $max_elements = 15;\n   for($k=0; $k<$max_len; $k++) {\n       $IODF\u00dd$k\u00a8   = \u00dd\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\" \u00a8;\n       $SWDATA\u00dd$k\u00a8 = \u00dd\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\" \u00a8;\n       $PCDATA\u00dd$k\u00a8 = \u00dd\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\" \u00a8;\n   }\n\n##########################################################################################################\n# Parse the data and get the title of the IODF and the list of LPARs defined.\n##########################################################################################################\n   foreach $iodf_data (@iodf_data) {\n       if(index($iodf_data,\"ID    MSG\") ne -1) {\n          $iodf_title = $iodf_data;\n       }\n       if(index($iodf_data,\"TITLE '\") ne -1) {\n          $iodf_title = $iodf_data;\n       }\n       if(index($iodf_data,\"ID NAME\") ne -1) {\n          $iodf_title2 = $iodf_data;\n       }\n       if(index($iodf_data,\"RESOURCE\") ne -1) {\n          $iodf_resource = $iodf_data;\n          last;\n       }\n   }\n##########################################################################################################\n# This code handles the normal IOCP statements from a production IODF\n##########################################################################################################\n   $a = index($iodf_title,\"MSG1\");\n   if($a ne -1) {\n      $b = index($iodf_title,\"SCR\")-1;\n      if($b eq -2) { $b = index($iodf_title,\"TOK\")-1; }\n      $iodf_title2 = substr($iodf_title,$a,$b-$a);\n      ($msg1,$msg2,$system) = split(/,/,$iodf_title2);\n      $iodf_name = $msg1;\n      $iodf_name =~ s/MSG1=//;\n      $iodf_name =~ s/\\'//g;\n      $iodf_proc = substr($iodf_title,($b+1)+4,8);\n      $iodf_proc =~ s/\\(//g;\n      $iodf_proc =~ s/\\'//g;\n\n      $iodf_date = $msg2;\n      $iodf_date =~ s/MSG2=//;\n      $iodf_date =~ s/\\'//g;\n      ($dataset,$iodf_d) = split(/ - /,$iodf_date);\n      $iodf_sys = $system;\n      $iodf_sys =~ s/SYSTEM=\\(//;\n      $iodf_sys = substr($iodf_sys,0,4);\n   }\n##########################################################################################################\n# This code handles the IOCP statements from HCD dialog\n##########################################################################################################\n   $a = index($iodf_title,\"TITLE '\");\n   if($a ne -1) {\n      $iodf_date = $iodf_title;\n      $iodf_date =~ s/TITLE//;\n      $iodf_date =~ s/\\'//g;\n      ($dataset,$iodf_d) = split(/ - /,$iodf_date);\n   }\n   $a = index($iodf_title2,\"ID NAME\");\n   if($a ne -1) {\n      $iodf_title2 =~ s/,/ /g;\n      @iodf_title2_words = split(/ /,$iodf_title2);\n      $iodf_sys = $iodf_title2_words\u00dd2\u00a8;\n      $iodf_sys =~ s/UNIT=//;\n      $iodf_proc = $iodf_title2_words\u00dd1\u00a8;\n      $iodf_proc =~ s/NAME=//;\n      $iodf_name = trim(substr($iodf_title2,length($iodf_title2)-9,8));\n   }\n\n##########################################################################################################\n# Now we display the IODF/IOCP information\n##########################################################################################################\n   print \"<BR><BR><TABLE align=\\\"left\\\" class=\\\"box\\\" WIDTH=\\\"100%\\\" bgcolor=\\\"#444444\\\" cellpadding=0 cellspacing=0>\";\n   print \"<tr><td align=\\\"left\\\" style=\\\"font-family:arial,verdana; font-size:20px; color:white; line-height:30px\\\">&nbsp;$iodf_name on Processor $iodf_proc</td></tr>\";\n   print \"</table>\";\n   print \"<BR><BR><BR>IODF resides in $dataset, and was created on $iodf_d.<BR>\";\n   print \"Machine limited to a $iodf_sys processor.<BR><BR>\";\n\n   if(index($iodf_resource,\"MAXDEV\") ne -1) {\n      $a = index($iodf_resource,\"MAXDEV=\");\n      $maxdev = substr($iodf_resource,$a);\n      $maxdev =~ s/MAXDEV=//;\n      $maxdev = substr($maxdev,1,length($maxdev)-2);\n      @css_maxdev = split(/\\),\\(/,$maxdev);\n      print \"<b>Maximum devices set:</b><BR><BR>\";\n      foreach $css_maxdev (@css_maxdev) {\n          if(substr($css_maxdev,0,1) eq \"(\") { $css_maxdev = substr($css_maxdev,1); }\n          if(substr($css_maxdev,length($css_maxdev)-1,1) eq \")\") { $css_maxdev = substr($css_maxdev,0,length($css_maxdev)-1); }\n          if($css_maxdev ne \"(\") {\n             ($css,$devs) = split(/,/,$css_maxdev);\n             $devs =~ s/\\)\\)//;\n             print \"$css has a limit of $devs devices.<BR>\";\n          }\n      }\n      print \"<BR>\";\n      $iodf_resource = substr($iodf_resource,0,$a-1);\n   }\n   $iodf_resource =~ s/RESOURCE PARTITION=\\(//;\n   $iodf_resource = trim($iodf_resource);\n   print \"<b>IODF contains definitions for LPARs:</b> <BR>\";\n   $system_list = \"\";\n   if(index($iodf_resource,\"CSS(\") eq -1) {\n      print \"<BR>\";\n      @lpars = split(/\\),\\(/,$iodf_resource);\n      foreach $lpars (@lpars) {\n          $lpars =~ s/\\(//g;\n          $lpars =~ s/\\)//g;\n          ($lpar_sys,$lpar_num) = split(/\\,/,$lpars);\n          print \"$lpar_sys with LPAR ID $lpar_num<BR>\";\n          if(index($system_list,$lpar_sys) eq -1) {\n             $system_list .= \" $lpar_sys\";\n          }\n      }\n   } else {\n      $csslpar = substr($iodf_resource,1,length($csslpar)-2);\n      @css_lpars = split(/\\),\\(/,$csslpar);\n      foreach $css_lpars (@css_lpars) {\n          if(substr($css_lpars,0,1) eq \"(\") { $css_lpars= substr($css_lpars,1); }\n          if(substr($css_lpars,length($css_lpars)-1,1) eq \")\") { $css_lpars= substr($css_lpars,0,length($css_lpars)-1); }\n          if(index($css_lpars,\"CSS\") ne -1) {\n             $css_lpars =~ s/\\(/ /g;\n             ($css,$cssn) = split(/ /,$css_lpars);\n             $css_lpars = \"<BR><u>$css($cssn)</u><BR>\";\n          } else {\n             ($lpar_sys,$lpar_num) = split(/\\,/,$css_lpars);\n             $css_lpars = \"$lpar_sys with LPAR ID $lpar_num\";\n             if(index($system_list,$lpar_sys) eq -1) {\n                $system_list .= \" $lpar_sys\";\n             }\n          }\n          print \"$css_lpars<BR>\";\n      }\n   }\n   print \"<BR><BR><b>There are $num_chps CHPIDs, $num_cus Control Units and $num_iod IODevice statements defined.</b><BR>\";\n   print \"<BR><BR><SMALL><b>Note:</b><BR>\";\n   print \"1. Currently SHARED access to CUs is not shown.<BR>\";\n   print \"2. PROTOCOL is not shown for CUs.<BR>\";\n   print \"<BR><BR></SMALL>\";\n\n##########################################################################################################\n# Now we parse the data\n##########################################################################################################\n   $IODF_count = 0;\n   $unit_list  = \"#ALL \";\n   @iodevices = reverse @iodevices;\n   for($k=0; $k<scalar @iodevices; $k++) {\n\n##########################################################################################################\n# We extract each IODEVICE from the IODF and extract the address.\n##########################################################################################################\n       if(index($iodevices\u00dd$k\u00a8,\"IODEVICE ADDRESS\") ne -1) {\n          $device_css = \"0\";\n          $device_num = \"\";\n          $device_cu  = \"\";\n          $device_attrs = \"\";\n          @temp_iod = split(/ /,$iodevices\u00dd$k\u00a8);\n          $temp_iod\u00dd1\u00a8 =~ s/ADDRESS=//g;\n          $temp_iod\u00dd1\u00a8 =~ s/\\(//g;\n          $temp_iod\u00dd1\u00a8 =~ s/\\)//g;\n          if(index($iodevices\u00dd$k\u00a8,\"UNIT=\") ne -1) {\n             $new_unit = substr($iodevices\u00dd$k\u00a8,index($iodevices\u00dd$k\u00a8,\"UNIT=\"));\n             $new_unit =~ s/UNIT=//g;\n             if(index($unit_list,$new_unit) eq -1) {\n                $unit_list .= \"$new_unit \";\n             }\n          }\n          if(index($url_device_type,$new_unit) eq -1 && $url_device_type ne \"ALL\") { next; }\n\n##########################################################################################################\n# We extract the CU and the device attributes, chaining the latter together.\n##########################################################################################################\n          $device_num  = $temp_iod\u00dd1\u00a8;\n          foreach $temp_iod (@temp_iod) {\n              if(index($temp_iod,\"CUNUMBR\") ne -1) {\n                 $temp_iod=~ s/CUNUMBR=//g;\n                 $temp_iod=~ s/\\,/ /g;\n                 $temp_iod=~ s/\\(//g;\n                 $temp_iod=~ s/\\)//g;\n                 $device_cu = $temp_iod;\n              }\n\n              $found_attr = 0;\n#              if(index($temp_iod,\"PARTITION=\") ne -1) {\n#                 if(index($temp_iod,\"CSS(\") ne -1) { $device_css = substr($temp_iod,index($temp_iod,\"CSS(\")+4,1); }\n#                 $found_attr = 1;\n#              }\n              if(index($temp_iod,\"PARTITION=\") ne -1) {\n                 $temp_iod =~ s/PARTITION=//g;\n                 $temp_iod =~ s/\\,/ /g;\n                 $temp_iod =~ s/CSS\\(0\\)//g;\n                 $temp_iod =~ s/CSS\\(1\\)//g;\n                 $temp_iod =~ s/CSS\\(2\\)//g;\n                 $temp_iod =~ s/CSS\\(3\\)//g;\n                 $temp_iod =~ s/\\(//g;\n                 $temp_iod =~ s/\\)//g;\n                 $temp_iod =~ s/=//g;\n                 $temp_iod = trim($temp_iod);\n                 $temp_iod = \"SYS=\" . $temp_iod;\n                 $found_attr = 1;\n              }\n              if(index($temp_iod,\"UNIT=\") ne -1)      { $found_attr = 1; }\n              if(index($temp_iod,\"UNITADD=\") ne -1)   { $found_attr = 1; }\n              if(index($temp_iod,\"STADET=\") ne -1)    { $found_attr = 1; }\n              if(index($temp_iod,\"TIMEOUT=\") ne -1)   { $found_attr = 1; }\n              if(index($temp_iod,\"MODEL=\") ne -1)     { $found_attr = 1; }\n              if($found_attr eq 1) {\n                 if(length($device_attrs) ne 0) { $device_attrs .= \",\"; }\n                 $device_attrs .= $temp_iod;\n              }\n          }\n##########################################################################################################\n# Now we assign to the array.\n# $IODF\u00dd$IODF_count\u00a8\u00dd9\u00a8  = device;\n# $IODF\u00dd$IODF_count\u00a8\u00dd10\u00a8 = device attributes;\n# $IODF\u00dd$IODF_count\u00a8\u00dd4\u00a8  = control unit;\n#\n# We also blank out the IODEVICE we have processed.\n##########################################################################################################\n          $IODF\u00dd$IODF_count\u00a8\u00dd9\u00a8  = $device_num;\n          $IODF\u00dd$IODF_count\u00a8\u00dd10\u00a8 = $device_attrs;\n          $IODF\u00dd$IODF_count\u00a8\u00dd4\u00a8  = $device_cu;\n#          $IODF\u00dd$IODF_count\u00a8\u00dd13\u00a8 = $device_css;\n#           print \">>$IODF\u00dd$IODF_count\u00a8\u00dd0\u00a8,$IODF\u00dd$IODF_count\u00a8\u00dd1\u00a8,$IODF\u00dd$IODF_count\u00a8\u00dd2\u00a8,$IODF\u00dd$IODF_count\u00a8\u00dd3\u00a8,$IODF\u00dd$IODF_count\u00a8\u00dd4\u00a8,$IODF\u00dd$IODF_count\u00a8\u00dd5\u00a8,$IODF\u00dd$IODF_count\u00a8\u00dd6\u00a8,$IODF\u00dd$IODF_count\u00a8\u00dd7\u00a8,$IODF\u00dd$IODF_count\u00a8\u00dd8\u00a8,$IODF\u00dd$IODF_count\u00a8\u00dd9\u00a8,$IODF\u00dd$IODF_count\u00a8\u00dd10\u00a8<< >$IODF\u00dd$IODF_count\u00a8\u00dd11\u00a8,$IODF\u00dd$IODF_count\u00a8\u00dd12\u00a8,$IODF\u00dd$IODF_count\u00a8\u00dd13\u00a8< <BR>\\n\";\n          $IODF_count++;\n          $iodevices\u00dd$k\u00a8 = \"EMPTY\";\n       }\n\n##########################################################################################################\n# Now we process the CONTROL UNITS\n##########################################################################################################\n       if(index($iodevices\u00dd$k\u00a8,\"CNTLUNIT\") ne -1) {\n          $cu_num = \"\";\n          $cu_cua = \"\";\n          $cu_unit= \"\";\n          $cu_link= \"\";\n          $cu_ua  = \"\";\n          $cu_path= \"\";\n          @temp_cu = split(/ /,$iodevices\u00dd$k\u00a8);\n##########################################################################################################\n# We extract the CU, the PATH and other attributes.\n##########################################################################################################\n          $cu_num  = $temp_cu\u00dd1\u00a8;\n          $cu_num  =~ s/CUNUMBR=//g;\n          $temp_cu\u00dd2\u00a8 =~ s/PATH=//g;\n          if(index($temp_cu\u00dd2\u00a8,\"CSS\") ne -1) {\n             @css_path = split(/\\),\\(/,$temp_cu\u00dd2\u00a8);\n             foreach $css_path (@css_path) {\n                 $css_path =~ s/\\)/ /g;\n                 $css_path =~ s/\\(//g;\n                 $css_path =~ s/\\,/ /g;\n                 @t_css_path = split(/ /,$css_path);\n                 $t_css_path\u00dd0\u00a8 =~ s/CSS//;\n                 for($a=1; $a<scalar @t_css_path; $a++) {\n                     if($t_css_path\u00dd$a\u00a8 eq \"\") { next; }\n                     $cu_path .= $t_css_path\u00dd0\u00a8 . \":\" . $t_css_path\u00dd$a\u00a8 . \" \";\n                 }\n             }\n          } else {\n             $cu_path = $temp_cu\u00dd2\u00a8;\n             $cu_path =~ s/\\,/ /g;\n             $cu_path =~ s/\\(//g;\n             $cu_path =~ s/\\)//g;\n          }\n          foreach $temp_cu (@temp_cu) {\n              if(index($temp_cu,\"UNIT=\") ne -1)    { $temp_cu =~ s/UNIT=//g; $cu_unit = $temp_cu; }\n              if(index($temp_cu,\"UNITADD=\") ne -1) { $temp_cu =~ s/UNITADD=//g; $temp_cu =~ s/\\(//g; $temp_cu =~ s/\\)//g; $cu_ua = $temp_cu; }\n              if(index($temp_cu,\"CUADD=\") ne -1)   { $temp_cu =~ s/CUADD=//g; $cu_cua = $temp_cu; }\n              if(index($temp_cu,\"LINK=\") ne -1)    {\n                 $temp_cu =~ s/LINK=//g;\n                 if(index($temp_cu,\"CSS\") ne -1) {\n                    @css_link = split(/\\),\\(/,$temp_cu);\n                    foreach $css_link (@css_link) {\n                        $css_link =~ s/\\)/ /g;\n                        $css_link =~ s/\\(//g;\n                        $css_link =~ s/\\,/ /g;\n                        @t_css_link = split(/ /,$css_link);\n                        $t_css_link\u00dd0\u00a8 =~ s/CSS//;\n                        for($a=1; $a<scalar @t_css_link; $a++) {\n                            if($t_css_link\u00dd$a\u00a8 eq \"\") { next; }\n                            $cu_link .= $t_css_link\u00dd0\u00a8 . \":\" . $t_css_link\u00dd$a\u00a8 . \" \";\n                        }\n                    }\n                 } else {\n                   $temp_cu =~ s/\\(//g;\n                   $temp_cu =~ s/\\)//g;\n                   $temp_cu =~ s/\\,/ /g;\n                   $cu_link = $temp_cu;\n                 }\n              }\n          }\n##########################################################################################################\n# We now traverse the main array and insert the CU attributes into the array if the device's CU matches\n# ours. Since we perform additional function later, we ignore any that have already been processed.\n#\n# We also blank out the CU we have processed.\n# If we find that there are multiple paths to the CU, we now traverse the array and insert the current\n# device and CU in another element with the next path.\n##########################################################################################################\n          for($a=0; $a<$IODF_count; $a++) {\n              if($IODF\u00dd$a\u00a8\u00dd9\u00a8 eq \"\") { last; }\n              if($IODF\u00dd$a\u00a8\u00dd4\u00a8 eq $cu_num && $IODF\u00dd$a\u00a8\u00dd11\u00a8 ne \"DUP\") {\n                 $IODF\u00dd$a\u00a8\u00dd5\u00a8 = $cu_cua;\n                 $IODF\u00dd$a\u00a8\u00dd6\u00a8 = $cu_unit;\n                 $IODF\u00dd$a\u00a8\u00dd8\u00a8 = $cu_ua;\n                 @temp_paths = split(/ /,$cu_path);\n                 $IODF\u00dd$a\u00a8\u00dd0\u00a8 = $temp_paths\u00dd0\u00a8;\n                 @temp_links = split(/ /,$cu_link);\n                 $IODF\u00dd$a\u00a8\u00dd7\u00a8 = $temp_links\u00dd0\u00a8;\n                 $iodevices\u00dd$k\u00a8 = \"EMPTY\";\n                 $len_path = scalar @temp_paths;\n                 if($len_path > 1) {\n                    for($pt=1; $pt<$len_path; $pt++) {\n                        $IODF\u00dd$IODF_count\u00a8\u00dd9\u00a8 = $IODF\u00dd$a\u00a8\u00dd9\u00a8;\n                        $IODF\u00dd$IODF_count\u00a8\u00dd10\u00a8= $IODF\u00dd$a\u00a8\u00dd10\u00a8;\n                        $IODF\u00dd$IODF_count\u00a8\u00dd4\u00a8 = $IODF\u00dd$a\u00a8\u00dd4\u00a8;\n                        $IODF\u00dd$IODF_count\u00a8\u00dd5\u00a8 = $IODF\u00dd$a\u00a8\u00dd5\u00a8;\n                        $IODF\u00dd$IODF_count\u00a8\u00dd6\u00a8 = $IODF\u00dd$a\u00a8\u00dd6\u00a8;\n                        $IODF\u00dd$IODF_count\u00a8\u00dd7\u00a8 = $temp_links\u00dd$pt\u00a8;\n                        $IODF\u00dd$IODF_count\u00a8\u00dd8\u00a8 = $IODF\u00dd$a\u00a8\u00dd8\u00a8;\n                        $IODF\u00dd$IODF_count\u00a8\u00dd0\u00a8 = $temp_paths\u00dd$pt\u00a8;\n                        $IODF\u00dd$IODF_count\u00a8\u00dd11\u00a8= \"DUP\";\n                        $IODF_count++;\n                    }\n                 }\n              }\n          }\n       }\n   }\n\n##########################################################################################################\n# Provide a drop-down menu of all devices and systems\n##########################################################################################################\n   print \"<form name=\\\"iodf_form\\\" >\";\n   @unit_types = split(/ /,$unit_list);\n   @unit_types = sort(iodf_menu_sort @unit_types);\n   $unit_types\u00dd0\u00a8 = \"ALL\";\n   print \"<b>Select Device Type:</b> <select name=\\\"unit\\\" style=\\\"font-family:verdana; color:#000000; font-size:11px; text-decoration:none; line-height:12px;\\\">\";\n   foreach $unit_type (@unit_types) {\n       if($url_device_type eq $unit_type) {\n          print \"<option value=\\\"$unit_type\\\" selected>$unit_type</option>\";\n       } else {\n          print \"<option value=\\\"$unit_type\\\">$unit_type</option>\";\n       }\n   }\n   print \"</select>\";\n\n##########################################################################################################\n# Provide a drop-down menu of all systems\n##########################################################################################################\n   @conn_systems = split(/ /,$system_list);\n   @conn_systems = sort(iodf_menu_sort @conn_systems);\n   $conn_systems\u00dd0\u00a8 = \"ALL\";\n   print \"&nbsp&nbsp;&nbsp;<b>Select System:</b> <select name=\\\"system\\\" style=\\\"font-family:verdana; color:#000000; font-size:11px; text-decoration:none; line-height:12px;\\\">\";\n   foreach $conn_systems (@conn_systems) {\n       if($url_system eq $conn_systems) {\n          print \"<option value=\\\"$conn_systems\\\" selected>$conn_systems</option>\";\n       } else {\n          print \"<option value=\\\"$conn_systems\\\">$conn_systems</option>\";\n       }\n   }\n   print \"</select> &nbsp;&nbsp;&nbsp;&nbsp;<button onclick=\\\"\";\n   print \"parent.window.location=\\'$cgi_directory/$script_name?iodf=$iodf&sys='+document.iodf_form.system.options\u00dddocument.iodf_form.system.selectedIndex\u00a8.value+'&dev='+document.iodf_form.unit.options\u00dddocument.iodf_form.unit.selectedIndex\u00a8.value+'\\'\";\n   print \"\\\" type=\\\"button\\\" class=\\\"button_blue\\\" onmouseover=\\\"this.className='button_high'\\\" onmouseout=\\\"this.className='button_blue'\\\" style=\\\"font-size:11px; width:60px; line-height:14px; font-weight:bold\\\">Go</button></form>\";\n\n##########################################################################################################\n# Now we process the CHPIDS\n##########################################################################################################\n   for($k=$start_chp; $k<scalar @iodevices; $k++) {\n       if(index($iodevices\u00dd$k\u00a8,\"CHP\") ne -1) {\n          $chp_num = \"\";\n          $chp_sys = \"\";\n          $chp_type= \"\";\n          $chp_sw  = \"\";\n          $chp_phy = \"\";\n          $chp_extra = \"\";\n          @temp_chp = split(/ /,$iodevices\u00dd$k\u00a8);\n          $chp_num  = $temp_chp\u00dd1\u00a8;\n          $chp_num =~ s/PATH=//g;\n          $chp_num  =~ s/\\(//g;\n          $chp_num  =~ s/\\)//g;\n##########################################################################################################\n# We get the type, switch and partition data for the CHPID.\n##########################################################################################################\n          foreach $temp_chp (@temp_chp) {\n              if(index($temp_chp,\"TYPE=\") ne -1)     { $temp_chp =~ s/TYPE=//g;   $chp_type = $temp_chp; }\n              if(index($temp_chp,\"SWITCH=\") ne -1)   { $temp_chp =~ s/SWITCH=//g; $chp_sw = $temp_chp;   }\n              if(index($temp_chp,\"PCHID=\") ne -1)    { $temp_chp =~ s/PCHID=//g;  $chp_phy = $temp_chp;  }\n              if(index($temp_chp,\"PARTITION=\") ne -1) {\n                 $temp_chp =~ s/PARTITION=//g;\n                 $temp_chp =~ s/\\,/ /g;\n                 $temp_chp =~ s/\\(//g;\n                 $temp_chp =~ s/\\)//g;\n                 $temp_chp =~ s/=//g;\n                 $chp_sys = $temp_chp;\n              }\n              if(index($temp_chp,\"CPATH=\") ne -1) {\n                 $temp_chp =~ s/\\,/:/g;\n                 $temp_chp =~ s/CSS//g;\n                 $temp_chp =~ s/\\(//g;\n                 $temp_chp =~ s/\\)//g;\n                 $chp_extra = $temp_chp;\n              }\n              if(index($temp_chp,\"TPATH=\") ne -1) {\n                 $temp_chp =~ s/TPATH=//g;\n                 $temp_chp =~ s/\\,/:/g;\n#                 $temp_chp =~ s/CSS//g;\n                 $temp_chp =~ s/\\(//g;\n                 $temp_chp =~ s/\\)//g;\n                 (@temp_tpath) = split(/CSS/,$temp_chp);\n                 @tpath_a = split(/:/,$temp_tpath\u00dd1\u00a8);\n                 @tpath_b = split(/:/,$temp_tpath\u00dd2\u00a8);\n                 $chp_extra = \"<BR><BR><b>Connect to $tpath_a\u00dd1\u00a8</b>,<BR>CHP: $tpath_a\u00dd0\u00a8:$tpath_a\u00dd2\u00a8\";\n                 if(scalar @tpath_a > 3) { $chp_extra .= \", CU: $tpath_a\u00dd3\u00a8, DEV: $tpath_a\u00dd4\u00a8\"; }\n                 $chp_extra .= \"<BR><BR>\";\n                 $chp_extra .=\"<b>This side:</b> CHP: $tpath_b\u00dd0\u00a8:$tpath_b\u00dd2\u00a8\";\n                 if(scalar @tpath_b > 3) { $chp_extra .= \", CU: $tpath_b\u00dd3\u00a8, DEV: $tpath_b\u00dd4\u00a8\"; }\n              }\n          }\n\n##########################################################################################################\n# We now search the array and insert the data for the named CHPID.\n##########################################################################################################\n          for($a=0; $a<$IODF_count; $a++) {\n              if($IODF\u00dd$a\u00a8\u00dd9\u00a8 eq \"\") { next; }\n              if(index($chp_num,\"CSS\") eq -1) {\n                 if($chp_num eq $IODF\u00dd$a\u00a8\u00dd0\u00a8) {\n                    $IODF\u00dd$a\u00a8\u00dd1\u00a8 = $chp_sys;\n                    $IODF\u00dd$a\u00a8\u00dd2\u00a8 = $chp_type;\n                    $IODF\u00dd$a\u00a8\u00dd3\u00a8 = $chp_sw;\n                    $IODF\u00dd$a\u00a8\u00dd13\u00a8 = $chp_phy;\n#                    $IODF\u00dd$a\u00a8\u00dd14\u00a8 = $chp_extra;\n                    $iodevices\u00dd$k\u00a8 = \"EMPTY\";\n                 }\n              } else {\n                 $chan_num = substr($chp_num,length($chp_num)-2,2);\n                 $chp_num  = substr($chp_num,0,length($chp_num)-2);\n                 $chp_num  =~ s/ //g;\n                 $chp_num  =~ s/,/ /g;\n                 $chp_num  =~ s/CSS//g;\n                 @css_words = split(/ /,$chp_num);\n                 foreach $css_words (@css_words) {\n                     $new_css_chp = $css_words . \":\" . $chan_num;\n                     for($b=0; $b<$IODF_count; $b++) {\n                         if($IODF\u00dd$b\u00a8\u00dd9\u00a8 eq \"\") { last; }\n                         if($new_css_chp eq $IODF\u00dd$b\u00a8\u00dd0\u00a8) {\n                            $IODF\u00dd$b\u00a8\u00dd1\u00a8 = $chp_sys;\n                            $IODF\u00dd$b\u00a8\u00dd2\u00a8 = $chp_type;\n                            $IODF\u00dd$b\u00a8\u00dd3\u00a8 = $chp_sw;\n                            $IODF\u00dd$b\u00a8\u00dd13\u00a8 = $chp_phy;\n                            $IODF\u00dd$b\u00a8\u00dd14\u00a8 = $chp_extra;\n                            $iodevices\u00dd$k\u00a8 = \"EMPTY\";\n                         }\n                     }\n                 }\n              }\n          }\n##########################################################################################################\n       }\n   }\n##########################################################################################################\n# We copy the array for use with Switches.\n##########################################################################################################\n   for($ki=0; $ki<$IODF_count; $ki++) {\n       for($kl=0; $kl<$max_elements; $kl++) {\n           $SWDATA\u00dd$ki\u00a8\u00dd$kl\u00a8 = $IODF\u00dd$ki\u00a8\u00dd$kl\u00a8;\n           $PCDATA\u00dd$ki\u00a8\u00dd$kl\u00a8 = $IODF\u00dd$ki\u00a8\u00dd$kl\u00a8;\n       }\n   }\n##########################################################################################################\n# Now we adjust the size of the array, and sort it in CHPID order.\n##########################################################################################################\n   $#IODF -= ($max_len - $IODF_count);\n   @IODF = sort(new_iodf_sort @IODF);\n\n##########################################################################################################\n# Now we display the table headings\n##########################################################################################################\n   print \"<TABLE align=\\\"center\\\" class=\\\"box\\\" WIDTH=\\\"100%\\\" cellpadding=0 cellspacing=0>\\n\";\n   print \"<tr><td align=\\\"left\\\" bgcolor=\\\"#444444\\\" style=\\\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\\\">&nbsp;Channels, Control Units and Devices</td></tr></table>\\n\";\n   print \"<BR>\\n\";\n   print \"<TABLE align=\\\"center\\\" WIDTH=\\\"100%\\\" cellpadding=2 cellspacing=0>\\n\";\n   print \"<tr>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">CHP</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">CSS</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">PCHID</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"8%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">System</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Type</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Switch</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"4%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#009900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">CU</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#009900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">CUA</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"4%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#009900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Unit</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"4%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#009900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Link</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#009900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">UA</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#000099\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Devices</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"20%\\\" valign=\\\"top\\\" class=\\\"box_head_r\\\" bgcolor=\\\"#000099\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Attributes</td>\\n\";\n   print \"</tr>\\n\";\n\n##########################################################################################################\n# Before we display the data, we traverse the array in order to blank out common elements. First we check\n# the CHPIDS. We get the number of the first occurrence and then search to get the last occurrence - each\n# stored in start_one and last_one. This forms the count that is stored in the first element and contains\n# the number of subsequent entries associated with this CHPID.\n#\n# We then compare each element within this range against its previous one. If they match an element then\n# the element of the later element is blanked out - hence why we loop backwards.\n##########################################################################################################\n   for($k=0; $k<$IODF_count; $k++) {\n       $last_one = $k;\n       for($j=$k; $j<$IODF_count; $j++) {\n           if($IODF\u00dd$j\u00a8\u00dd0\u00a8 ne $IODF\u00dd$k\u00a8\u00dd0\u00a8) {\n              $last_one = $j;\n              last;\n           }\n       }\n       if($last_one eq $k) { $last_one = $IODF_count; }\n       $start_one = $k;\n       $last_one--;\n       $IODF\u00dd$k\u00a8\u00dd12\u00a8 = ($last_one - $start_one) + 1;\n       for($l=$last_one; $l>$start_one; $l--) {\n           $n = $l - 1;\n           $shall_we_leave = 0;\n           for($kl=0; $kl<$max_elements; $kl++) {\n               if($IODF\u00dd$l\u00a8\u00dd$kl\u00a8 ne $IODF\u00dd$n\u00a8\u00dd$kl\u00a8) { $shall_we_leave = 1; }\n               if($shall_we_leave eq 1) { last; }\n               $IODF\u00dd$l\u00a8\u00dd$kl\u00a8 = \"\";\n           }\n       }\n       $k = $start_one;\n   }\n\n#     for($k=0; $k<$IODF_count; $k = $k + ($IODF\u00dd$k\u00a8\u00dd12\u00a8)) {\n#     for($k=0; $k<$IODF_count; $k++) {\n#         print \"$k is our current element. $IODF_count\";\n#         print \">>$IODF\u00dd$k\u00a8\u00dd0\u00a8,$IODF\u00dd$k\u00a8\u00dd1\u00a8,$IODF\u00dd$k\u00a8\u00dd2\u00a8,$IODF\u00dd$k\u00a8\u00dd3\u00a8,$IODF\u00dd$k\u00a8\u00dd4\u00a8,$IODF\u00dd$k\u00a8\u00dd5\u00a8,$IODF\u00dd$k\u00a8\u00dd6\u00a8,$IODF\u00dd$k\u00a8\u00dd7\u00a8,$IODF\u00dd$k\u00a8\u00dd8\u00a8,$IODF\u00dd$k\u00a8\u00dd9\u00a8,$IODF\u00dd$k\u00a8\u00dd10\u00a8<< >$IODF\u00dd$k\u00a8\u00dd11\u00a8,$IODF\u00dd$k\u00a8\u00dd12\u00a8< <BR>\\n\";\n#    }\n#    exit;\n\n##########################################################################################################\n# We traverse the array, incrementing the element by the count from above, extracting the data for the\n# CHPID. If any of these are blank, we insert a non-breakable space. We use the count from above and\n# add the number of line breaks to pad out the array.\n##########################################################################################################\n   for($k=0; $k<$IODF_count; $k = $k + ($IODF\u00dd$k\u00a8\u00dd12\u00a8)) {\n       $chp_extra = \"\";\n       if($IODF\u00dd$k\u00a8\u00dd14\u00a8 ne \"\") {\n          $chp_extra = \"<BR><b>$IODF\u00dd$k\u00a8\u00dd14\u00a8</b>\";\n       }\n       if(index($IODF\u00dd$k\u00a8\u00dd0\u00a8,\":\") ne -1) {\n          ($css_id,$chp_num) = split(/:/,$IODF\u00dd$k\u00a8\u00dd0\u00a8);\n       } else {\n          $css_id = \"&nbsp;\";\n          $chp_num = $IODF\u00dd$k\u00a8\u00dd0\u00a8;\n       }\n       $chp_sys = $IODF\u00dd$k\u00a8\u00dd1\u00a8;\n       if($url_system ne \"ALL\" && index($chp_sys,$url_system) eq -1) { next; }\n\n       $chp_type = $IODF\u00dd$k\u00a8\u00dd2\u00a8;\n       $chp_sw = $IODF\u00dd$k\u00a8\u00dd3\u00a8;\n       if($IODF\u00dd$k\u00a8\u00dd0\u00a8 eq \"\") { $IODF\u00dd$k\u00a8\u00dd0\u00a8 = \"&nbsp;\"; }\n       if($IODF\u00dd$k\u00a8\u00dd1\u00a8 eq \"\") { $IODF\u00dd$k\u00a8\u00dd1\u00a8 = \"&nbsp;\"; }\n       if($IODF\u00dd$k\u00a8\u00dd2\u00a8 eq \"\") { $IODF\u00dd$k\u00a8\u00dd2\u00a8 = \"&nbsp;\"; }\n       if($IODF\u00dd$k\u00a8\u00dd3\u00a8 eq \"\") { $IODF\u00dd$k\u00a8\u00dd3\u00a8 = \"&nbsp;\"; }\n       if($IODF\u00dd$k\u00a8\u00dd3\u00a8 ne \"&nbsp;\")  {\n          $IODF\u00dd$k\u00a8\u00dd3\u00a8 .= \"<BR>\" x ($IODF\u00dd$k\u00a8\u00dd12\u00a8 - 1);\n       }\n       if($IODF\u00dd$k\u00a8\u00dd13\u00a8 eq \"\") { $IODF\u00dd$k\u00a8\u00dd13\u00a8 = \"&nbsp;\"; }\n       print \"<tr>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$chp_num</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$css_id</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$IODF\u00dd$k\u00a8\u00dd13\u00a8</td>\\n\";\n       print \"<td align=\\\"left\\\" width=\\\"8%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$IODF\u00dd$k\u00a8\u00dd1\u00a8$chp_extra</td>\\n\";\n       print \"<td align=\\\"left\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$IODF\u00dd$k\u00a8\u00dd2\u00a8</td>\\n\";\n       print \"<td align=\\\"left\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$IODF\u00dd$k\u00a8\u00dd3\u00a8</td>\\n\";\n##########################################################################################################\n# Loop and display all CU data.\n##########################################################################################################\n       print \"<td align=\\\"left\\\" width=\\\"4%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\";\n       $max_cu_pos = $k+$IODF\u00dd$k\u00a8\u00dd12\u00a8;\n       if($k + 1 eq $IODF_count) { $max_cu_pos++; }\n       for($a=$k; $a<$max_cu_pos; $a++) {\n           if($IODF\u00dd$a\u00a8\u00dd4\u00a8 eq \"\") { $IODF\u00dd$a\u00a8\u00dd4\u00a8 = \"&nbsp;\"; }\n           print \"$IODF\u00dd$a\u00a8\u00dd4\u00a8<BR>\";\n       }\n       print \"</td>\\n\";\n##########################################################################################################\n# Loop and display all CUA data.\n##########################################################################################################\n       print \"<td align=\\\"left\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\";\n       for($a=$k; $a<$max_cu_pos; $a++) {\n           if($IODF\u00dd$a\u00a8\u00dd5\u00a8 eq \"\") { $IODF\u00dd$a\u00a8\u00dd5\u00a8 = \"&nbsp;\"; }\n           print \"$IODF\u00dd$a\u00a8\u00dd5\u00a8<BR>\";\n       }\n       print \"</td>\\n\";\n##########################################################################################################\n# Loop and display all UNIT data.\n##########################################################################################################\n       print \"<td align=\\\"left\\\" width=\\\"4%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\";\n       for($a=$k; $a<$max_cu_pos; $a++) {\n           if($IODF\u00dd$a\u00a8\u00dd6\u00a8 eq \"\") { $IODF\u00dd$a\u00a8\u00dd6\u00a8 = \"&nbsp;\"; }\n           print \"$IODF\u00dd$a\u00a8\u00dd6\u00a8<BR>\";\n       }\n       print \"</td>\\n\";\n##########################################################################################################\n# Loop and display all LINK data.\n##########################################################################################################\n       print \"<td align=\\\"left\\\" width=\\\"4%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\";\n       for($a=$k; $a<$max_cu_pos; $a++) {\n           $cu_link = $IODF\u00dd$a\u00a8\u00dd7\u00a8;\n           if(index($IODF\u00dd$a\u00a8\u00dd7\u00a8,\":\") ne -1) { ($cu_css,$cu_link) = split(/:/,$IODF\u00dd$a\u00a8\u00dd7\u00a8); }\n           if($IODF\u00dd$a\u00a8\u00dd7\u00a8 eq \"\") { $IODF\u00dd$a\u00a8\u00dd7\u00a8 = \"&nbsp;\"; }\n#           print \"$IODF\u00dd$a\u00a8\u00dd7\u00a8<BR>\";\n           print \"$cu_link<BR>\";\n       }\n       print \"</td>\\n\";\n##########################################################################################################\n# Loop and display all UNIT ADDRESS data.\n##########################################################################################################\n       print \"<td align=\\\"left\\\" width=\\\"4%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\";\n       for($a=$k; $a<$max_cu_pos; $a++) {\n           if($IODF\u00dd$a\u00a8\u00dd8\u00a8 eq \"\") { $IODF\u00dd$a\u00a8\u00dd8\u00a8 = \"&nbsp;\"; }\n           print \"$IODF\u00dd$a\u00a8\u00dd8\u00a8<BR>\";\n       }\n       print \"</td>\\n\";\n##########################################################################################################\n# Loop and display all DEVICE data.\n##########################################################################################################\n       print \"<td align=\\\"left\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\";\n       for($a=$k; $a<$max_cu_pos; $a++) {\n           if($IODF\u00dd$a\u00a8\u00dd9\u00a8 eq \"\") { $IODF\u00dd$a\u00a8\u00dd9\u00a8 = \"&nbsp;\"; }\n           print \"$IODF\u00dd$a\u00a8\u00dd9\u00a8<BR>\";\n       }\n       print \"</td>\\n\";\n##########################################################################################################\n# Loop and display all DEVICE ATTRIBUTES data.\n##########################################################################################################\n       print \"<td align=\\\"left\\\" width=\\\"20%\\\" valign=\\\"top\\\" class=\\\"box_r\\\" style=\\\"font-family:arial,verdana; font-size:10px; color:black; line-height:14px\\\">\";\n       for($a=$k; $a<$max_cu_pos; $a++) {\n           if($IODF\u00dd$a\u00a8\u00dd10\u00a8 eq \"\") { $IODF\u00dd$a\u00a8\u00dd10\u00a8 = \"&nbsp;\"; }\n           print \"$IODF\u00dd$a\u00a8\u00dd10\u00a8<BR>\";\n       }\n       print \"</td>\\n\";\n       print \"</tr>\\n\";\n##########################################################################################################\n# If we are at the end of the array, then lets get out!\n##########################################################################################################\n       if($k + 1 eq $IODF_count) { last; }\n   }\n   print \"</table><BR><BR>\";\n\n##########################################################################################################\n# Display unused CHPIDS\n##########################################################################################################\nif($url_device_type eq \"ALL\" && $url_system eq \"ALL\") {\n   print \"<TABLE align=\\\"center\\\" WIDTH=\\\"100%\\\" cellpadding=0 cellspacing=0>\\n\";\n   print \"<tr><td colspan=6 align=\\\"left\\\" class=\\\"box\\\" bgcolor=\\\"#444444\\\" style=\\\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\\\">&nbsp;Defined but Not Used Channels, Control Units & IO Devices</td></tr>\\n\";\n   print \"<tr><td align=\\\"left\\\" valign=top width=\\\"40%\\\" style=\\\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\\\">\";\n   print \"<BR>\";\n\n   print \"<TABLE align=\\\"left\\\" WIDTH=\\\"90%\\\" cellpadding=2 cellspacing=0>\\n\";\n   print \"<tr>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">CHP</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">CSS</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">PCHID</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"30%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">System</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Type</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_head_r\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Switch</td>\\n\";\n   print \"</tr>\\n\";\n\n   for($k=0; $k<scalar @iodevices; $k++) {\n       if($iodevices\u00dd$k\u00a8 ne \"EMPTY\" && index($iodevices\u00dd$k\u00a8,\"CHPID\") ne -1) {\n          $chp_num = \"&nbsp;\";\n          $chp_sys = \"&nbsp;\";\n          $chp_type= \"&nbsp;\";\n          $chp_sw  = \"&nbsp;\";\n          $chp_pchid = \"&nbsp;\";\n          $chp_css = \"&nbsp;\";\n          $chp_extra = \"\";\n          @temp_chp = split(/ /,$iodevices\u00dd$k\u00a8);\n          $chp_num  = $temp_chp\u00dd1\u00a8;\n          $chp_num =~ s/PATH=//g;\n          $chp_num  =~ s/\\(//g;\n          $chp_num  =~ s/\\)//g;\n          foreach $temp_chp (@temp_chp) {\n              if(index($temp_chp,\"TYPE=\") ne -1)     { $temp_chp =~ s/TYPE=//g; $chp_type = $temp_chp; }\n              if(index($temp_chp,\"PCHID=\") ne -1)    { $temp_chp =~ s/PCHID=//g; $chp_pchid = $temp_chp; }\n              if(index($temp_chp,\"SWITCH=\") ne -1)   { $temp_chp =~ s/SWITCH=//g; $chp_sw = $temp_chp; }\n              if(index($temp_chp,\"PARTITION=\") ne -1) {\n                 $temp_chp =~ s/PARTITION=//g;\n                 $temp_chp =~ s/\\,/ /g;\n                 $temp_chp =~ s/\\(//g;\n                 $temp_chp =~ s/\\)//g;\n                 $temp_chp =~ s/=//g;\n                 $chp_sys = $temp_chp;\n              }\n              if(index($temp_chp,\"CPATH=\") ne -1) {\n                 $temp_chp =~ s/\\,/:/g;\n                 $temp_chp =~ s/CSS//g;\n                 $temp_chp =~ s/\\(//g;\n                 $temp_chp =~ s/\\)//g;\n                 $chp_extra = \"<BR><b>$temp_chp</b>\";\n              }\n              if(index($temp_chp,\"TPATH=\") ne -1) {\n                 $temp_chp =~ s/TPATH=//g;\n                 $temp_chp =~ s/\\,/:/g;\n#                 $temp_chp =~ s/CSS//g;\n                 $temp_chp =~ s/\\(//g;\n                 $temp_chp =~ s/\\)//g;\n                 (@temp_tpath) = split(/CSS/,$temp_chp);\n                 @tpath_a = split(/:/,$temp_tpath\u00dd1\u00a8);\n                 @tpath_b = split(/:/,$temp_tpath\u00dd2\u00a8);\n                 $chp_extra = \"<BR><BR><b>Connect to $tpath_a\u00dd1\u00a8</b>,<BR>CHP: $tpath_a\u00dd0\u00a8:$tpath_a\u00dd2\u00a8\";\n                 if(scalar @tpath_a > 3) { $chp_extra .= \", CU: $tpath_a\u00dd3\u00a8, DEV: $tpath_a\u00dd4\u00a8\"; }\n                 $chp_extra .= \"<BR><BR>\";\n                 $chp_extra .=\"<b>This side:</b> CHP: $tpath_b\u00dd0\u00a8:$tpath_b\u00dd2\u00a8\";\n                 if(scalar @tpath_b > 3) { $chp_extra .= \", CU: $tpath_b\u00dd3\u00a8, DEV: $tpath_b\u00dd4\u00a8\"; }\n              }\n          }\n          if($url_system ne \"ALL\" && index($chp_sys,$url_system) eq -1) { next; }\n          $css_id = \"&nbsp;\";\n          if(index($chp_num,\"CSS\") ne -1) {\n             $chp_num  =~ s/,/ /g;\n             $chp_num  =~ s/CSS//g;\n             ($css_id,$tchp_num) = split(/ /,$chp_num);\n             $chp_num = $tchp_num;\n          }\n          print \"<tr>\\n\";\n          print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\\n$chp_num\\n</td>\\n\";\n          print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\\n$css_id\\n</td>\\n\";\n          print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\\n$chp_pchid\\n</td>\\n\";\n          print \"<td align=\\\"center\\\" width=\\\"30%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\\n$chp_sys$chp_extra\\n</td>\\n\";\n          print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\\n$chp_type\\n</td>\\n\";\n          print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_r\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\\n$chp_sw\\n</td>\\n\";\n          print \"</tr>\\n\";\n       }\n   }\n   print \"<tr>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">&nbsp;</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">&nbsp;</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">&nbsp;</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"30%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">&nbsp;</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">&nbsp;</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_r\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">&nbsp;</td>\\n\";\n   print \"</tr>\\n\";\n   print \"</table>\";\n\n   print \"</td>\";\n\n##########################################################################################################\n# Display spacer between the columns\n##########################################################################################################\n   print \"<td align=\\\"left\\\" valign=top width=\\\"3%\\\" style=\\\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\\\">&nbsp;</td>\";\n\n##########################################################################################################\n# Display unused CUs\n##########################################################################################################\n   print \"<td align=\\\"left\\\" valign=top width=\\\"20%\\\" style=\\\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\\\">\";\n\n   print \"<BR><TABLE align=\\\"left\\\" WIDTH=\\\"40%\\\" cellpadding=2 cellspacing=0>\\n\";\n   print \"<tr>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#009900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">CU</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#009900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">CUA</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#009900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Unit</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#009900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Link</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_head_r\\\" bgcolor=\\\"#009900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">UA</td>\\n\";\n   print \"</tr>\\n\";\n\n   for($k=0; $k<scalar @iodevices; $k++) {\n       if($iodevices\u00dd$k\u00a8 ne \"EMPTY\" && index($iodevices\u00dd$k\u00a8,\"CNTLUNIT\") ne -1) {\n          $cu_num = \"&nbsp;\";\n          $cu_cua = \"&nbsp;\";\n          $cu_unit= \"&nbsp;\";\n          $cu_link= \"&nbsp;\";\n          $cu_ua  = \"&nbsp;\";\n          $cu_path= \"&nbsp;\";\n          @temp_cu = split(/ /,$iodevices\u00dd$k\u00a8);\n          $cu_num  = $temp_cu\u00dd1\u00a8;\n          $cu_path = $temp_cu\u00dd2\u00a8;\n          $cu_num  =~ s/CUNUMBR=//g;\n          $cu_path =~ s/PATH=//g;\n          $cu_path =~ s/\\,/ /g;\n          $cu_path =~ s/\\(//g;\n          $cu_path =~ s/\\)//g;\n          foreach $temp_cu (@temp_cu) {\n              if(index($temp_cu,\"UNIT=\") ne -1)    { $temp_cu =~ s/UNIT=//g; $cu_unit = $temp_cu; }\n              if(index($temp_cu,\"UNITADD=\") ne -1) { $temp_cu =~ s/UNITADD=//g; $temp_cu =~ s/\\(//g; $temp_cu =~ s/\\)//g; $cu_ua = $temp_cu; }\n              if(index($temp_cu,\"CUADD=\") ne -1)   { $temp_cu =~ s/CUADD=//g; $cu_cua = $temp_cu; }\n              if(index($temp_cu,\"LINK=\") ne -1)    { $temp_cu =~ s/LINK=//g; $temp_cu =~ s/\\(//g; $temp_cu =~ s/\\)//g; $cu_link = $temp_cu; }\n          }\n          print \"<tr>\\n\";\n          print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\\n$cu_num\\n</td>\\n\";\n          print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\\n$cu_cua\\n</td>\\n\";\n          print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\\n$cu_unit\\n</td>\\n\";\n          print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\\n$cu_link\\n</td>\\n\";\n          print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_r\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\\n$cu_ua\\n</td>\\n\";\n          print \"</tr>\\n\";\n       }\n   }\n   print \"<tr>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">&nbsp;</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">&nbsp;</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">&nbsp;</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">&nbsp;</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_r\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">&nbsp;</td>\\n\";\n   print \"</tr>\\n\";\n   print \"</table>\";\n   print \"</td>\";\n\n##########################################################################################################\n# Display spacer between the columns\n##########################################################################################################\n   print \"<td align=\\\"left\\\" valign=top width=\\\"3%\\\" style=\\\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\\\">&nbsp;</td>\";\n\n##########################################################################################################\n# Display unused IO Devices\n##########################################################################################################\n   print \"<td align=\\\"left\\\" valign=top width=\\\"20%\\\" style=\\\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\\\">\";\n\n   print \"<BR><TABLE align=\\\"left\\\" WIDTH=\\\"40%\\\" cellpadding=2 cellspacing=0>\\n\";\n   print \"<tr>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#000099\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Device</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#000099\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">CU</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"35%\\\" valign=\\\"top\\\" class=\\\"box_head_r\\\" bgcolor=\\\"#000099\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Attributes</td>\\n\";\n   print \"</tr>\\n\";\n\n   for($k=0; $k<scalar @iodevices; $k++) {\n       if($iodevices\u00dd$k\u00a8 ne \"EMPTY\" && index($iodevices\u00dd$k\u00a8,\"IODEVICE\") ne -1) {\n          $device_num = \"&nbsp;\";\n          $device_cu  = \"&nbsp;\";\n          $device_attrs = \"&nbsp;\";\n          @temp_iod = split(/ /,$iodevices\u00dd$k\u00a8);\n          $temp_iod\u00dd1\u00a8 =~ s/ADDRESS=//g;\n          $temp_iod\u00dd1\u00a8 =~ s/\\(//g;\n          $temp_iod\u00dd1\u00a8 =~ s/\\)//g;\n          $device_num  = $temp_iod\u00dd1\u00a8;\n          foreach $temp_iod (@temp_iod) {\n              if(index($temp_iod,\"CUNUMBR\") ne -1) {\n                 $temp_iod=~ s/CUNUMBR=//g;\n                 $temp_iod=~ s/\\,/ /g;\n                 $temp_iod=~ s/\\(//g;\n                 $temp_iod=~ s/\\)//g;\n                 $device_cu = $temp_iod;\n              }\n              $found_attr = 0;\n              if(index($temp_iod,\"UNIT=\") ne -1)    { $found_attr = 1; }\n              if(index($temp_iod,\"UNITADD=\") ne -1) { $found_attr = 1; }\n              if(index($temp_iod,\"STADET=\") ne -1)  { $found_attr = 1; }\n              if(index($temp_iod,\"TIMEOUT=\") ne -1) { $found_attr = 1; }\n              if(index($temp_iod,\"MODEL=\") ne -1)   { $found_attr = 1; }\n              if($found_attr eq 1) {\n                 if(length($device_attrs) ne 0) { $device_attrs .= \",\"; }\n                 $device_attrs .= $temp_iod;\n              }\n          }\n          print \"<tr>\\n\";\n          print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\\n$device_num\\n</td>\\n\";\n          print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\\n$device_cu\\n</td>\\n\";\n          print \"<td align=\\\"center\\\" width=\\\"35%\\\" valign=\\\"top\\\" class=\\\"box_r\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\\n$device_attrs\\n</td>\\n\";\n          print \"</tr>\\n\";\n       }\n   }\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">&nbsp;</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">&nbsp;</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"35%\\\" valign=\\\"top\\\" class=\\\"box_r\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">&nbsp;</td>\\n\";\n   print \"</table>\";\n   print \"</td>\";\n\n##########################################################################################################\n# Finish the table\n##########################################################################################################\n   print \"<td align=\\\"left\\\" valign=top width=\\\"24%\\\" style=\\\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\\\">&nbsp;</td>\";\n   print \"</tr></table><BR><BR>\";\n}\n##########################################################################################################\n# Display Switches\n##########################################################################################################\n   print \"<TABLE align=\\\"center\\\" WIDTH=\\\"100%\\\" cellpadding=0 cellspacing=0>\\n\";\n   print \"<tr><td colspan=6 align=\\\"left\\\" class=\\\"box\\\" bgcolor=\\\"#444444\\\" style=\\\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\\\">&nbsp;Switches</td></tr>\\n\";\n   print \"<tr><td align=\\\"left\\\" valign=top width=\\\"20%\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\";\n   print \"<BR>\";\n\n##########################################################################################################\n# Step through the IODF array, and add the switch to a string, making sure we do not repeat any!\n# Put the string into an array, sort it, and then remove any blank entries.\n##########################################################################################################\n   $switches = \"\";\n   for($k=0; $k<$IODF_count; $k = $k + ($IODF\u00dd$k\u00a8\u00dd12\u00a8)) {\n       if($url_device_type ne \"ALL\") {\n          $mk = 0;\n          if(index($IODF\u00dd$k\u00a8\u00dd6\u00a8,$url_device_type) ne -1) { $mk = 1; }\n          $switch_list = $device_sw_list{$url_device_type};\n          if(index($switch_list,$IODF\u00dd$k\u00a8\u00dd6\u00a8) ne -1) { $mk = 1; }\n          if($mk eq 0) { next; }\n       }\n       if($url_system ne \"ALL\") {\n          $mk = 0;\n          if(index($IODF\u00dd$k\u00a8\u00dd1\u00a8,$url_system) ne -1) { $mk = 1; }\n          if($mk eq 0) { next; }\n       }\n\n#       if(index($IODF\u00dd$k\u00a8\u00dd6\u00a8,$url_device_type) eq -1 && $url_device_type ne \"ALL\") { next; }\n#       $chp_num = $IODF\u00dd$k\u00a8\u00dd0\u00a8;\n#       $chp_sw  = $IODF\u00dd$k\u00a8\u00dd3\u00a8;\n#       $cu_name = $IODF\u00dd$k\u00a8\u00dd4\u00a8;\n#       $cu_type = $IODF\u00dd$k\u00a8\u00dd6\u00a8;\n#       $cu_link = $IODF\u00dd$k\u00a8\u00dd7\u00a8;\n\n       $IODF\u00dd$k\u00a8\u00dd3\u00a8 =~ s/<BR>//g;\n       if(index($switches,$IODF\u00dd$k\u00a8\u00dd3\u00a8) eq -1) {\n          $switches .= $IODF\u00dd$k\u00a8\u00dd3\u00a8 . \" \";\n       }\n   }\n   @switch = split(/ /,$switches);\n   @switch = sort(switch_sort @switch);\n   for($a=0; $a<scalar @switch; $a++) {\n       if($switch\u00dd$a\u00a8 eq \"\" || $switch\u00dd$a\u00a8 eq \" \" || $switch\u00dd$a\u00a8 eq \"&nbsp;\") {\n          splice(@switch,$a,1);\n       }\n   }\n   $switch_count = scalar @switch;\n   print \"<b>There are $switch_count switches defined.</b><BR><BR>\";\n\n   if($iodf_sys eq \"2086\") {\n      print \"Outbound Port = CSS:Port<BR>CHPID = CSS:CHP<BR><BR>\";\n   }\n\n##########################################################################################################\n# Blank the DUP column in the array.\n##########################################################################################################\n   for($a=0; $a<scalar @SWDATA; $a++) {\n       $SWDATA\u00dd$a\u00a8\u00dd11\u00a8= \"\";\n   }\n\n##########################################################################################################\n# Step through the array, and split the Links into their separate entry.\n##########################################################################################################\n   $SWDATA_count = $IODF_count;\n   for($a=0; $a<scalar @SWDATA; $a++) {\n       if($SWDATA\u00dd$a\u00a8\u00dd7\u00a8 eq \"\") { next; }\n       if($SWDATA\u00dd$a\u00a8\u00dd11\u00a8 eq \"DUP\") { last; }\n       @temp_links = split(/,/,$SWDATA\u00dd$a\u00a8\u00dd7\u00a8);\n       $SWDATA\u00dd$a\u00a8\u00dd7\u00a8 = $temp_links\u00dd0\u00a8;\n       $len_links = scalar @temp_links;\n       if($len_links > 1) {\n          for($pt=1; $pt<$len_links; $pt++) {\n              $SWDATA\u00dd$IODF_count\u00a8\u00dd9\u00a8 = $SWDATA\u00dd$a\u00a8\u00dd9\u00a8;\n              $SWDATA\u00dd$IODF_count\u00a8\u00dd10\u00a8= $SWDATA\u00dd$a\u00a8\u00dd10\u00a8;\n              $SWDATA\u00dd$IODF_count\u00a8\u00dd4\u00a8 = $SWDATA\u00dd$a\u00a8\u00dd4\u00a8;\n              $SWDATA\u00dd$IODF_count\u00a8\u00dd5\u00a8 = $SWDATA\u00dd$a\u00a8\u00dd5\u00a8;\n              $SWDATA\u00dd$IODF_count\u00a8\u00dd6\u00a8 = $SWDATA\u00dd$a\u00a8\u00dd6\u00a8;\n              $SWDATA\u00dd$IODF_count\u00a8\u00dd7\u00a8 = $temp_links\u00dd$pt\u00a8;\n              $SWDATA\u00dd$IODF_count\u00a8\u00dd8\u00a8 = $SWDATA\u00dd$a\u00a8\u00dd8\u00a8;\n              $SWDATA\u00dd$IODF_count\u00a8\u00dd0\u00a8 = $SWDATA\u00dd$a\u00a8\u00dd0\u00a8;\n              $SWDATA\u00dd$IODF_count\u00a8\u00dd11\u00a8= \"DUP\";\n              $SWDATA_count++;\n          }\n       }\n   }\n##########################################################################################################\n# Now we adjust the size of the array, and sort it in SWITCH, LINK, CHPID, CU order.\n##########################################################################################################\n   $#SWDATA -= ($max_len - $SWDATA_count);\n   @SWDATA = sort(switch_iodf_sort @SWDATA);\n   for($a=0; $a<scalar @SWDATA; $a++) {\n       if($SWDATA\u00dd$a\u00a8\u00dd3\u00a8 ne \"\") {\n          splice(@SWDATA,0,$a);\n          $SWDATA_count -= $a;\n          last;\n       }\n   }\n\n##########################################################################################################\n# Before we display the data, we traverse the array in order to blank out common elements. First we check\n# the SWITCH. We get the number of the first occurrence and then search to get the last occurrence - each\n# stored in start_one and last_one. This forms the count that is stored in the first element and contains\n# the number of subsequent entries associated with this SWITCH.\n#\n# We then compare each element within this range against its previous one. If they match an element then\n# the element of the later element is blanked out - hence why we loop backwards. We check the LINK, CHPID,\n# CU and UNIT type.\n##########################################################################################################\n   for($k=0; $k<$SWDATA_count; $k++) {\n       $last_one = $k;\n       for($j=$k; $j<$SWDATA_count; $j++) {\n           if($SWDATA\u00dd$j\u00a8\u00dd3\u00a8 ne $SWDATA\u00dd$k\u00a8\u00dd3\u00a8) {\n              $last_one = $j;\n              last;\n           }\n       }\n       if($last_one eq $k) { $last_one = $SWDATA_count; }\n       $start_one = $k;\n       $last_one--;\n       $SWDATA\u00dd$k\u00a8\u00dd12\u00a8 = ($last_one - $start_one) + 1;\n       for($l=$last_one; $l>$start_one; $l--) {\n           $n = $l - 1;\n           $shall_we_leave = 0;\n           if($SWDATA\u00dd$l\u00a8\u00dd3\u00a8 eq $SWDATA\u00dd$n\u00a8\u00dd3\u00a8) { $SWDATA\u00dd$l\u00a8\u00dd3\u00a8 = \"\"; $shall_we_leave = 1; }\n           if($SWDATA\u00dd$l\u00a8\u00dd7\u00a8 eq $SWDATA\u00dd$n\u00a8\u00dd7\u00a8 && $shall_we_leave eq 1) { $SWDATA\u00dd$l\u00a8\u00dd7\u00a8 = \"\"; $shall_we_leave = 2; }\n           if($SWDATA\u00dd$l\u00a8\u00dd0\u00a8 eq $SWDATA\u00dd$n\u00a8\u00dd0\u00a8 && $shall_we_leave eq 2) { $SWDATA\u00dd$l\u00a8\u00dd0\u00a8 = \"\"; $shall_we_leave = 3; }\n           if($SWDATA\u00dd$l\u00a8\u00dd4\u00a8 eq $SWDATA\u00dd$n\u00a8\u00dd4\u00a8 && $shall_we_leave eq 3) { $SWDATA\u00dd$l\u00a8\u00dd4\u00a8 = \"\"; $shall_we_leave = 4; }\n           if($SWDATA\u00dd$l\u00a8\u00dd6\u00a8 eq $SWDATA\u00dd$n\u00a8\u00dd6\u00a8 && $shall_we_leave eq 4) { $SWDATA\u00dd$l\u00a8\u00dd6\u00a8 = \"\"; $shall_we_leave = 5; }\n       }\n       $k = $start_one;\n   }\n\n##########################################################################################################\n# In order to place 3 switches per row, we start a table, then loop through the switches, using a modulus\n# to determine when to place the rows and colum spacings.\n##########################################################################################################\n   print \"<TABLE align=\\\"center\\\" WIDTH=\\\"100%\\\" cellpadding=0 cellspacing=0>\\n\";\n\n   for($swc=0; $swc<$switch_count; $swc++) {\n       $result = $swc % 3;\n       if($result eq 0) { print \"<tr>\\n\"; }\n       if($result ne 0) {\n          print \"<td width=\\\"5%\\\" align=\\\"center\\\" valign=\\\"top\\\" style=\\\"font-family:arial,verdana; font-size:14px; color:white; line-height:16px\\\">&nbsp;</td>\\n\";\n       }\n       print \"<td width=\\\"30%\\\" align=\\\"center\\\" valign=\\\"top\\\" style=\\\"font-family:arial,verdana; font-size:14px; color:white; line-height:16px\\\">\\n\";\n       print \"<TABLE WIDTH=\\\"100%\\\" cellpadding=2 cellspacing=0>\\n\";\n       print \"<tr><td align=\\\"left\\\" colspan=4 valign=\\\"top\\\" bgcolor=\\\"#000000\\\" style=\\\"font-family:arial,verdana; font-size:14px; color:white; line-height:16px\\\">&nbsp;<b>Switch $switch\u00dd$swc\u00a8</b></td></tr>\\n\";\n       print \"<tr>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"8%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#999900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Outbound Port</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"8%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#999900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">CHPID</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"8%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#999900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Control Unit</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"8%\\\" valign=\\\"top\\\" class=\\\"box_head_r\\\" bgcolor=\\\"#999900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Unit Type</td>\\n\";\n       print \"</tr>\\n\";\n\n##########################################################################################################\n# For this particular switch, we find our switch in the array, and then loop forward using the counter\n# and so we display the data. If an entry is blank, then we ignore it.\n##########################################################################################################\n       for($k=0; $k<$SWDATA_count; $k = $k + ($SWDATA\u00dd$k\u00a8\u00dd12\u00a8)) {\n           if($SWDATA\u00dd$k\u00a8\u00dd6\u00a8 eq \"\") { next; }\n\n           if($SWDATA\u00dd$k\u00a8\u00dd3\u00a8 eq $switch\u00dd$swc\u00a8) {\n              print \"<tr>\\n\";\n              print \"<td align=\\\"center\\\" width=\\\"8%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\";\n              for($a=$k; $a<($k + $SWDATA\u00dd$k\u00a8\u00dd12\u00a8); $a++) {\n                  if($SWDATA\u00dd$a\u00a8\u00dd7\u00a8 eq \"\" && $SWDATA\u00dd$a\u00a8\u00dd0\u00a8 eq \"\" && $SWDATA\u00dd$a\u00a8\u00dd4\u00a8 eq \"\" && $SWDATA\u00dd$a\u00a8\u00dd6\u00a8 eq \"\") { next;}\n                  if($url_system ne \"ALL\" && index($SWDATA\u00dd$a\u00a8\u00dd1\u00a8,$url_system) eq -1) { next; }\n                  print \"$SWDATA\u00dd$a\u00a8\u00dd7\u00a8<BR>\";\n              }\n              print \"</td>\\n\";\n              print \"<td align=\\\"center\\\" width=\\\"8%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\";\n              for($a=$k; $a<($k + $SWDATA\u00dd$k\u00a8\u00dd12\u00a8); $a++) {\n                  if($SWDATA\u00dd$a\u00a8\u00dd7\u00a8 eq \"\" && $SWDATA\u00dd$a\u00a8\u00dd0\u00a8 eq \"\" && $SWDATA\u00dd$a\u00a8\u00dd4\u00a8 eq \"\" && $SWDATA\u00dd$a\u00a8\u00dd6\u00a8 eq \"\") { next;}\n                  if($url_system ne \"ALL\" && index($SWDATA\u00dd$a\u00a8\u00dd1\u00a8,$url_system) eq -1) { next; }\n                  print \"$SWDATA\u00dd$a\u00a8\u00dd0\u00a8<BR>\";\n              }\n              print \"</td>\\n\";\n              print \"<td align=\\\"center\\\" width=\\\"8%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\";\n              for($a=$k; $a<($k + $SWDATA\u00dd$k\u00a8\u00dd12\u00a8); $a++) {\n                  if($SWDATA\u00dd$a\u00a8\u00dd7\u00a8 eq \"\" && $SWDATA\u00dd$a\u00a8\u00dd0\u00a8 eq \"\" && $SWDATA\u00dd$a\u00a8\u00dd4\u00a8 eq \"\" && $SWDATA\u00dd$a\u00a8\u00dd6\u00a8 eq \"\") { next;}\n                  if($url_system ne \"ALL\" && index($SWDATA\u00dd$a\u00a8\u00dd1\u00a8,$url_system) eq -1) { next; }\n                  print \"$SWDATA\u00dd$a\u00a8\u00dd4\u00a8<BR>\";\n              }\n              print \"</td>\\n\";\n              print \"<td align=\\\"center\\\" width=\\\"8%\\\" valign=\\\"top\\\" class=\\\"box_r\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\";\n              for($a=$k; $a<($k + $SWDATA\u00dd$k\u00a8\u00dd12\u00a8); $a++) {\n                  if($SWDATA\u00dd$a\u00a8\u00dd7\u00a8 eq \"\" && $SWDATA\u00dd$a\u00a8\u00dd0\u00a8 eq \"\" && $SWDATA\u00dd$a\u00a8\u00dd4\u00a8 eq \"\" && $SWDATA\u00dd$a\u00a8\u00dd6\u00a8 eq \"\") { next;}\n                  if($url_system ne \"ALL\" && index($SWDATA\u00dd$a\u00a8\u00dd1\u00a8,$url_system) eq -1) { next; }\n                  print \"$SWDATA\u00dd$a\u00a8\u00dd6\u00a8<BR>\";\n              }\n              print \"</td>\\n\";\n              print \"</tr>\\n\";\n           }\n       }\n       print \"</table><BR><BR>\\n\";\n       print \"</td>\\n\";\n       if($result eq 2) { print \"</tr>\\n\"; }\n   }\n\n   print \"</table></td></tr></table>\\n\";\n\n#     for($k=0; $k<$SWDATA_count; $k++) {\n#         print \">>$SWDATA\u00dd$k\u00a8\u00dd3\u00a8,$SWDATA\u00dd$k\u00a8\u00dd7\u00a8,$SWDATA\u00dd$k\u00a8\u00dd0\u00a8,$SWDATA\u00dd$k\u00a8\u00dd4\u00a8,$SWDATA\u00dd$k\u00a8\u00dd6\u00a8<< >$SWDATA\u00dd$k\u00a8\u00dd11\u00a8,$SWDATA\u00dd$k\u00a8\u00dd12\u00a8< <BR>\\n\";\n#     }\n\n##########################################################################################################\n# Display PCHIDs\n##########################################################################################################\n   if($url_device_type eq \"ALL\" && index($iodf_resource,\"CSS(\") ne -1 && $url_system eq \"ALL\") {\n      for($k=0; $k<$max_len; $k++) {\n          $PDATA\u00dd$k\u00a8 = \u00dd\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\" \u00a8;\n      }\n##########################################################################################################\n# Now we sort in PCHID and CHP order.\n##########################################################################################################\n      @PCDATA = sort(pchid_iodf_sort @PCDATA);\n      $PDATA_count = 0;\n      for($ki=0; $ki<scalar @PCDATA; $ki++) {\n          if($PCDATA\u00dd$ki\u00a8\u00dd0\u00a8 eq \"\") { next; }\n          for($kl=0; $kl<$max_elements; $kl++) {\n              $PDATA\u00dd$PDATA_count\u00a8\u00dd$kl\u00a8 = $PCDATA\u00dd$ki\u00a8\u00dd$kl\u00a8;\n          }\n          $PDATA_count++;\n      }\n      $#PDATA = $PDATA_count;\n\n##########################################################################################################\n# Before we display the data, we traverse the array in order to blank out common elements. First we check\n# the SWITCH. We get the number of the first occurrence and then search to get the last occurrence - each\n# stored in start_one and last_one. This forms the count that is stored in the first element and contains\n# the number of subsequent entries associated with this SWITCH.\n#\n# We then compare each element within this range against its previous one. If they match an element then\n# the element of the later element is blanked out - hence why we loop backwards. We check the LINK, CHPID,\n# CU and UNIT type.\n##########################################################################################################\n      for($k=0; $k<$PDATA_count; $k++) {\n          $last_one = $k;\n          for($j=$k; $j<$PDATA_count; $j++) {\n              if($PDATA\u00dd$j\u00a8\u00dd13\u00a8 ne $PDATA\u00dd$k\u00a8\u00dd13\u00a8) {\n                 $last_one = $j;\n                 last;\n              }\n          }\n          if($last_one eq $k) { $last_one = $PDATA_count; }\n          $start_one = $k;\n          $last_one--;\n          $PDATA\u00dd$k\u00a8\u00dd12\u00a8 = ($last_one - $start_one) + 1;\n          for($l=$last_one; $l>$start_one; $l--) {\n              $n = $l - 1;\n              $shall_we_leave = 0;\n              if($PDATA\u00dd$l\u00a8\u00dd13\u00a8 eq $PDATA\u00dd$n\u00a8\u00dd13\u00a8) { $PDATA\u00dd$l\u00a8\u00dd13\u00a8 = \"\"; $shall_we_leave = 1; }\n              if($PDATA\u00dd$l\u00a8\u00dd0\u00a8 eq $PDATA\u00dd$n\u00a8\u00dd0\u00a8 && $shall_we_leave eq 1) { $PDATA\u00dd$l\u00a8\u00dd0\u00a8 = \"\"; $shall_we_leave = 2; }\n          }\n          $k = $start_one;\n      }\n\n      print \"<BR><TABLE align=\\\"center\\\" WIDTH=\\\"100%\\\" cellpadding=0 cellspacing=0>\\n\";\n      print \"<tr><td align=\\\"left\\\" class=\\\"box\\\" bgcolor=\\\"#444444\\\" style=\\\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\\\">&nbsp;Physical Channel IDs </td></tr>\\n\";\n      print \"<tr><td align=\\\"left\\\" valign=top width=\\\"40%\\\" style=\\\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\\\">\";\n      print \"<BR>\";\n\n      print \"<TABLE align=\\\"left\\\" WIDTH=\\\"50%\\\" cellpadding=2 cellspacing=0>\\n\";\n      print \"<tr>\\n\";\n      print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">CSS</td>\\n\";\n      print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">PCHID</td>\\n\";\n      print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">CHP</td>\\n\";\n      print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Type</td>\\n\";\n      print \"<td align=\\\"center\\\" width=\\\"20%\\\" valign=\\\"top\\\" class=\\\"box_head_r\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">System</td>\\n\";\n      print \"</tr>\\n\";\n\n      for($k=0; $k<$PDATA_count; $k++) {\n          if($PDATA\u00dd$k\u00a8\u00dd0\u00a8 eq \"\") { next; }\n          $chp_extra = \"\";\n          if($PDATA\u00dd$k\u00a8\u00dd14\u00a8 ne \"\") {\n             $chp_extra = \"<BR><b>$PDATA\u00dd$k\u00a8\u00dd14\u00a8</b>\";\n          }\n          if(index($PDATA\u00dd$k\u00a8\u00dd0\u00a8,\":\") ne -1) {\n             ($css_id,$chp_num) = split(/:/,$PDATA\u00dd$k\u00a8\u00dd0\u00a8);\n          }\n          if($PDATA\u00dd$k\u00a8\u00dd1\u00a8 eq \"\") { $PDATA\u00dd$k\u00a8\u00dd1\u00a8 = \"&nbsp;\"; }\n          if($PDATA\u00dd$k\u00a8\u00dd13\u00a8 eq \"\") { $PDATA\u00dd$k\u00a8\u00dd13\u00a8 = \"&nbsp;\"; }\n          print \"<tr>\\n\";\n          print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\\n$css_id\\n</td>\\n\";\n          print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\\n$PDATA\u00dd$k\u00a8\u00dd13\u00a8\\n</td>\\n\";\n          print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\\n$chp_num\\n</td>\\n\";\n          print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\\n$PDATA\u00dd$k\u00a8\u00dd2\u00a8\\n</td>\\n\";\n          print \"<td align=\\\"center\\\" width=\\\"20%\\\" valign=\\\"top\\\" class=\\\"box_r\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">\\n$PDATA\u00dd$k\u00a8\u00dd1\u00a8$chp_extra\\n</td>\\n\";\n          print \"</tr>\\n\";\n      }\n      print \"<tr>\\n\";\n      print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">&nbsp;</td>\\n\";\n      print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">&nbsp;</td>\\n\";\n      print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">&nbsp;</td>\\n\";\n      print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">&nbsp;</td>\\n\";\n      print \"<td align=\\\"center\\\" width=\\\"20%\\\" valign=\\\"top\\\" class=\\\"box_r\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">&nbsp;</td>\\n\";\n      print \"</tr>\\n\";\n      print \"</table>\\n\";\n      print \"</tr>\\n\";\n      print \"</table>\";\n   }\n##########################################################################################################\n# And now we finish the main body of the page.\n##########################################################################################################\n}\nprint <<ENDHTML_E;\n<BR><BR>\n<hr size=1 width=\"100%\" color=black>\n<small>End</small><BR>\n</td></tr></table>\n<br><br>\n</body>\n<HEAD>\n<META HTTP-EQUIV=\"Expires\" CONTENT=\"-1\">\n<META HTTP-EQUIV=\"Pragma\" CONTENT=\"no-cache\">\n</HEAD>\n</html>\nENDHTML_E\n\nexit;\n\n##########################################################################################################\n# Routines\n##########################################################################################################\n\n##########################################################################################################\n# Sort IODFs into numeric order\n##########################################################################################################\nsub iodf_sort {\n    ($aa,$a1) = split(/\\./,$a);\n    ($bb,$b1) = split(/\\./,$b);\n    $aa = lc $aa;\n    $bb = lc $bb;\n    $aa =~ s/iodf//g;\n    $bb =~ s/iodf//g;\n    return int($aa) <=> int($bb);\n}\n\n##########################################################################################################\n# Display an error\n##########################################################################################################\nsub display_error {\n    print \"<BR><BR><TABLE align=\\\"center\\\" class=\\\"box\\\" WIDTH=\\\"70%\\\" cellpadding=0 cellspacing=0>\";\n    print \"<tr><td align=\\\"left\\\" class=\\\"err_heading\\\" style=\\\"font-family:arial,verdana; font-size:20px; color:#FFFFFF; line-height:30px\\\">&nbsp;&nbsp;<b>ERROR:</b></td></tr>\";\n    print \"<tr><td align=\\\"left\\\" style=\\\"font-family:arial,verdana; font-size:14px; color:black; font-weight:bold; line-height:16px\\\"><BR><BR>&nbsp;&nbsp;$_\u00dd0\u00a8<BR><BR></td></tr>\";\n    print \"<tr><td align=\\\"left\\\" style=\\\"font-family:arial,verdana; font-size:14px; color:black; line-height:16px\\\">&nbsp;&nbsp;<A HREF=\\\"$cgi_directory/$script_name\\\">Back To IODF Menu</A><BR><BR></td></tr>\";\n    print \"</table>\";\n\n}\n\n##########################################################################################################\n# Remove leading and trailing blanks\n##########################################################################################################\nsub trim {\n    my $str = $_\u00dd0\u00a8;\n    $str =~ s/\u00ac *//;\n    $str =~ s/ *$//;\n    return $str;\n}\n\n##########################################################################################################\n# Sort IODF array on CHPID, CU and IODEVICE.\n##########################################################################################################\nsub new_iodf_sort {\n    $t_a = $a->\u00dd0\u00a8;\n    $t_b = $b->\u00dd0\u00a8;\n    $t_a =~ s/://;\n    $t_b =~ s/://;\n#    $p1 = hex $a->\u00dd0\u00a8 <=> hex $b->\u00dd0\u00a8;\n    $p1 = hex $t_a <=> hex $t_b;\n    $p2 = hex $a->\u00dd4\u00a8 <=> hex $b->\u00dd4\u00a8;\n    ($t_pa1,$t_pa2) = split(/,/,$a->\u00dd9\u00a8);\n    ($t_pb1,$t_pb2) = split(/,/,$b->\u00dd9\u00a8);\n    $p3 = hex $t_pa1 <=> hex $t_pb1;\n    if($p1 ne 0) { return $p1; }\n    if($p2 ne 0) { return $p2; }\n    if($p3 ne 0) { return $p3; }\n    return 0;\n}\n\n##########################################################################################################\n# Sort Switch array.\n##########################################################################################################\nsub switch_sort {\n    return hex $a <=> hex $b;\n}\n\n##########################################################################################################\n# IODF Menu sort\n##########################################################################################################\nsub iodf_menu_sort {\n    return $a cmp $b;\n}\n\n##########################################################################################################\n# Sort Switch array.\n##########################################################################################################\nsub switch_iodf_sort {\n    $p1 = hex $a->\u00dd3\u00a8 <=> hex $b->\u00dd3\u00a8;\n    $p2 = hex $a->\u00dd7\u00a8 <=> hex $b->\u00dd7\u00a8;\n    $p3 = hex $a->\u00dd0\u00a8 <=> hex $b->\u00dd0\u00a8;\n    $p4 = hex $a->\u00dd4\u00a8 <=> hex $b->\u00dd4\u00a8;\n    if($p1 ne 0) { return $p1; }\n    if($p2 ne 0) { return $p2; }\n    if($p3 ne 0) { return $p3; }\n    if($p4 ne 0) { return $p4; }\n    return 0;\n}\n\n##########################################################################################################\n# Sort PCHID array.\n##########################################################################################################\nsub pchid_iodf_sort {\n#    if($a->\u00dd13\u00a8 eq \"\") { return -1; }\n#    if($b->\u00dd13\u00a8 eq \"\") { return 0; }\n    $t_a = substr($a->\u00dd0\u00a8,0,1);\n    $t_b = substr($b->\u00dd0\u00a8,0,1);\n#    $t_a =~ s/://;\n#    $t_b =~ s/://;\n    $p1 = hex $a->\u00dd13\u00a8 <=> hex $b->\u00dd13\u00a8;\n    $p2 = $t_a <=> $t_b;\n    if($p1 ne 0) { return $p1; }\n    if($p2 ne 0) { return $p2; }\n    return 0;\n}\n##########################################################################################################\n#                                             END of program and routines\n##########################################################################################################\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IODFCTC": {"ttr": 3585, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x06\\x00\\x00\\x01\\x06'o\\x01\\x06'o\\x086\\x04\\x17\\x04\\x17\\x00\\x00\\xe4\\xf6\\xf8\\xf1\\xf5\\xf1\\xf2@@@\"", "ispf": {"version": "01.06", "flags": 0, "createdate": "2006-10-03T00:00:00", "modifydate": "2006-10-03T08:36:00", "lines": 1047, "newlines": 1047, "modlines": 0, "user": "U681512"}, "text": "#!/usr/local/bin/perl\n##########################################################################################################\n#\n# I O D F _ C T C . C G I\n# --------------------------------------------------------------------------------------------------------\n# HTML, PERL/CGI scripts written by Mark Naughton in November 2005.\n#\n# Any questions, contact me at: mark@blue-shantung.co.uk\n#\n# --------------------------------------------------------------------------------------------------------\n# Version  Date        Inits  Change\n# -------  ----------  -----  ----------------------------------------------------------------------------\n# 1.0      03/04/2006  MDN    Initial version - ported from IODF.CGI.\n#          07/04/2006  MDN    Version completed.\n# 1.1      10/04/2006  MDN    Added column to display if the connection can be made based on BCTC to BCTC,\n#                             SCTC to SCTC and CNC to CTC (or vice versa).\n#          15/04/2006  MDN    Fixed bug which meant a non-CSS IODF (Source) could not match a CSS IODF\n#                             (Destination) - needed to handle the CSS value!\n#\n##########################################################################################################\n# COPYRIGHT NOTICE\n##########################################################################################################\n# This program remains the copyright of Mark Naughton and British Airways. Unlimited copying and use of\n# this material is allowed, however it must not be sold for commercial reasons. A reasonable fee for a CD\n# or DVD containing this program may be charged. This program works-as-is and we hold no responsibility if\n# the program does not do what it says, or causes any mayhem in your system.\n#\n##########################################################################################################\n\n##########################################################################################################\n# ONLY CHANGE THESE USER PARAMETERS\n##########################################################################################################\n$data_directory = \"/S2/BA/mvsweb/data/iodf\";\n$cgi_directory  = \"/cgi-bin\";\n$script_name    = \"iodf_ctc.cgi\";\n$title          = \"British Airways Infrastructure Software:\";\n\n##########################################################################################################\n# END OF USER PARAMETERS\n##########################################################################################################\n\n##########################################################################################################\n# INSTALLATION\n#\n# 1. Update the 1st line to point to your PERL interpreter.\n# 2. Copy this script into a directory - making sure you update the cgi_directory variable above.\n# 3. Copy the IOCPs/IODFs (as text files) into the directory you have specified in data_directory. We use\n#    the naming convention of IODFxx.PROC where xx is the two digit ID of the IODF.\n# 4. Update the title variable above.\n# 5. Then try it through your browser! Currently the Cascading Style Sheet uses IE-specific options.\n#\n#\n# NOTES\n#\n# 1. This script was written based on pre-z/Series IOCPs so the parsing of the IOCP is sequential as in\n#    all IODEVICES are processed, then the CUs and then the CHPs. As our site does not have more than\n#    1 x CSS, it is not known if this will cause a problem - please send me an email if it doesn't and\n#    we'll get it fixed.\n#\n##########################################################################################################\n\n\n##########################################################################################################\n# ARRAY STRUCTURE:\n#\n#  0. (Channel SubSystem) CSS:CHPID\n#  1. SYSTEM\n#  2. TYPE\n#  3. SWITCH\n#  4. CONTROL UNIT\n#  5. CONTROL UNIT ADDRESS\n#  6. UNIT\n#  7. LINK\n#  8. UNIT ADDRESS\n#  9. DEVICE\n# 10. DEVICE ATTRIBUTES\n# 11. Blank or DUP - specifies that this entry has been duplicated from within the data - for example as\n#     in splitting the paths to a CU.\n# 12. Number - specifies the number of following (and including) entries that relate this the CHPID or\n#     Switch.\n# 13. CHPID SWITCH PORT\n# 14. DEVICE UA\n# 15. DEVICE EXPLICIT SYSTEM\n# 16. IODF NAME\n# 17. PROCESSOR NAME\n# 18. NUMBER OF DEVICES DEFINED IN SINGLE IODEVICE STATEMENT\n# 19. DEVICE UNIT TYPE\n#\n##########################################################################################################\n\n\n\n##########################################################################################################\n##########################################################################################################\n#                                   M A I N  C O D E  F O R  D I S P L A Y\n##########################################################################################################\n##########################################################################################################\n$version = \"1.1 (10th April 2006)\";\nprint \"Content-type: text/html\\n\\n\";\n\n##########################################################################################################\n# First we display the main body of the page.\n##########################################################################################################\nprint <<ENDHTML_S;\n<HTML>\n<HEAD>\n<TITLE>$title IODFs & IOCPs - CTCs</TITLE>\n<style>\n.heading {\n font           : bold 24px Arial, Verdana;\n color          : white;\n height         : 26px;\n text-decoration: none;\n text-align     : left;\n filter         : progid:DXImageTransform.Microsoft.Gradient(GradientType=0,StartColorStr=#3970CA,EndColorStr=#254E8E)\n}\n.box {\n border-style   : solid;\n border-color   : black;\n border-width   : 1px;\n}\n.box_head_l {\n border-width   : 1px 0px 1px 1px;\n border-style   : solid;\n border-color   : black;\n}\n.box_head_r {\n border-width   : 1px 1px 1px 1px;\n border-style   : solid;\n border-color   : black;\n}\n.box_l {\n border-width   : 0px 0px 1px 1px;\n border-style   : solid;\n border-color   : black;\n}\n.box_r {\n border-width   : 0px 1px 1px 1px;\n border-style   : solid;\n border-color   : black;\n}\n.button_blue {\n font           : 11px Verdana;\n color          : black;\n text-decoration: none;\n width          : 100px;\n border         : solid 1px black;\n clear          : both;\n filter         : progid:DXImageTransform.Microsoft.Gradient(GradientType=0,StartColorStr=#FFFFFF,EndColorStr=#CDD9EF)\n}\n.button_high {\n font           : 11px Verdana;\n color          : black;\n text-decoration: none;\n width          : 100px;\n border         : solid 1px black;\n clear          : both;\n filter         : progid:DXImageTransform.Microsoft.Gradient(GradientType=0,StartColorStr=#FFFFFF,EndColorStr=#eeddaa)\n}\n.oth_heading {\n font           : bold 24px Arial, Verdana;\n color          : white;\n height         : 26px;\n text-decoration: none;\n border-color   : black;\n border-style   : solid;\n filter         : progid:DXImageTransform.Microsoft.Gradient(GradientType=0,StartColorStr=#990000,EndColorStr=#F0F0F0)\n}\n</style>\n<META HTTP-EQUIV=\"Expires\" CONTENT=\"-1\">\n<META HTTP-EQUIV=\"Pragma\" CONTENT=\"no-cache\">\n</HEAD>\n\n<BODY bgcolor=\"#F0F0F0\" LINK=\"#330099\" VLINK=\"#006600\" leftmargin=0 topmargin=0 rightmargin=0 marginheight=0 marginwidth=0 bottommargin=0 onunload=\"Check_Logout();\">\n<TABLE align=\"center\" WIDTH=\"100%\" cellpadding=0 cellspacing=0>\n<tr>\n<td align=\"left\" class=\"heading\" style=\"font-family:arial,verdana; font-size:20px; color:#FFFFFF; line-height:30px\">\n&nbsp;&nbsp;<b>$title IODFs & IOCPs - CTCs</b>\n</td>\n</tr></table>\n\n<TABLE align=\"center\" WIDTH=\"90%\" cellpadding=0 cellspacing=0><tr>\n<td valign=\"top\" align=\"left\" style=\"font-family:arial,verdana; font-size:12px; color:#000000; line-height:14px\">\n\nENDHTML_S\n\n##########################################################################################################\n# As we use the same script to process the data, we must first display a list of IODFs for the user to\n# select.\n##########################################################################################################\n\nif($ENV{'REQUEST_METHOD'} ne 'POST') {\n\n##########################################################################################################\n# We do not have any parameters so we just display a list of the IODFs.\n##########################################################################################################\n   $iodf_list   = \"\";\n   @iodf_pfiles = ( \"\" );\n   $iodf_pfiles_c = 0;\n   print \"<BR>This program will check the CTC connections between the Source and Destination IODF/IOCPs. However each file must be created through the HCD dialog, option 2 (Activate) then option 10 (Build I/O configuration statements). <b>It must be created using the Production IODF.</b>\";\n   print \"<BR><BR>The following IODFs have been found in <b>$data_directory</b> : <BR><BR>\";\n\n##########################################################################################################\n# Read the directory, and get the information\n##########################################################################################################\n   opendir(DIR,$data_directory);\n   @iodf_files = readdir(DIR);\n   closedir(DIR);\n   $removedot = shift(@iodf_files);\n   $removedot = shift(@iodf_files);\n   @iodf_files = sort(iodf_sort @iodf_files);\n   foreach $iodf_files (@iodf_files) {\n       if($iodf_files eq \".\" || $iodf_files eq \"..\") { next; }\n       $data_filename = \"$data_directory/$iodf_files\";\n       if(open(DATAFILE,\"$data_filename\")) {\n          flock(DATAFILE,2);\n          seek(DATAFILE,0,0);\n          @iodf_data = <DATAFILE>;\n          close(DATAFILE);\n       } else {\n          next;\n       }\n       if(scalar @iodf_data eq 1) {\n          $tiodf_data_hcd = $iodf_data\u00dd0\u00a8;\n          @iodf_data = unpack(\"A80\" x (length($tiodf_data_hcd)/80),$tiodf_data_hcd);\n       }\n       if(index($iodf_data\u00dd0\u00a8,\"TITLE '\") eq -1) {\n          $iodf_name = substr($iodf_data\u00dd0\u00a8,21,6);\n          if(index($iodf_data\u00dd2\u00a8,\"SCR=\") ne -1) {\n             $t_iodf    = index($iodf_data\u00dd2\u00a8,\"SCR=\");\n             $iodf_proc = substr($iodf_data\u00dd2\u00a8,$t_iodf,12);\n             $iodf_proc =~ s/SCR=//g;\n          } else {\n             $t_iodf_comma = index($iodf_data\u00dd2\u00a8,\",\");\n             $iodf_proc = substr($iodf_data\u00dd2\u00a8,1,$t_iodf_comma-1);\n             $iodf_proc =~ s/TOK=\\(//g;\n             $iodf_proc =~ s/\\'//g;\n          }\n       } else {\n          $iodf_title2 = trim($iodf_data\u00dd2\u00a8);\n          $iodf_title2 =~ s/,/ /g;\n          @iodf_title2_words = split(/ /,$iodf_title2);\n          $iodf_proc = $iodf_title2_words\u00dd1\u00a8;\n          $iodf_proc =~ s/NAME=//;\n          $iodf_name = substr(trim($iodf_data\u00dd5\u00a8),5,6);\n       }\n       $iodf_proc =~ s/ //g;\n##########################################################################################################\n# Insert the IODF and related data into an array\n##########################################################################################################\n       if(index($iodf_list,$iodf_name) eq -1) { $iodf_list .= \"$iodf_name \"; }\n       $iodf_pfiles_c++;\n       $iodf_pfiles\u00dd$iodf_pfiles_c\u00a8 = \"$iodf_name $iodf_proc $iodf_files\";\n       undef @iodf_data;\n   }\n\n##########################################################################################################\n# Split the IODFs into an array, sort the data and count it\n##########################################################################################################\n   @iodf_file = split(/ /,$iodf_list);\n   @iodf_file = sort(iodf_menu_sort @iodf_file);\n   @iodf_pfiles = sort(iodf_menu_sort @iodf_pfiles);\n   $iodf_menu_width = scalar @iodf_file;\n\n##########################################################################################################\n# Now step through the data and display the table\n##########################################################################################################\n\n   print \"<form name=\\\"phase_one\\\" method=post action=\\\"$cgi_directory/$script_name\\\">\";\n   print \"<TABLE align=\\\"center\\\" WIDTH=\\\"50%\\\" class=\\\"box\\\" cellpadding=0 cellspacing=0>\";\n   print \"<tr><td valign=\\\"top\\\" colspan=2 width=\\\"10%\\\" align=\\\"center\\\" class=\\\"oth_heading\\\" style=\\\"border-width: 0px 1px 1px 0px; border-color: black; border-style: solid; font-family:arial,verdana; font-size:16px; line-height:18px\\\">Source IOCP</td>\";\n   print \"<td valign=\\\"top\\\" colspan=2 width=\\\"10%\\\" align=\\\"center\\\" class=\\\"oth_heading\\\" style=\\\"border-width: 0px 0px 1px 0px; border-color: black; border-style: solid; font-family:arial,verdana; font-size:16px; line-height:18px\\\">Destination IOCP</td></tr>\";\n\n   print \"<tr>\";\n   print \"<td valign=\\\"top\\\" width=\\\"3%\\\" align=\\\"left\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:#000000; line-height:16px\\\">&nbsp;</td>\";\n   print \"<td valign=\\\"top\\\" width=\\\"10%\\\" align=\\\"left\\\" style=\\\"border-width: 0px 1px 0px 0px; border-color: black; border-style: solid; font-family:arial,verdana; font-size:12px; color:#000000; line-height:16px\\\"><BR>\";\n   $i = 0;\n   foreach $iodf_pfiles (@iodf_pfiles) {\n       @t_iodf_pfiles = split(/ /,$iodf_pfiles);\n       if($t_iodf_pfiles\u00dd0\u00a8 ne \"\") {\n          $i++;\n          $checked = \"\";\n          if($i eq 1) { $checked = \"checked\"; }\n          print \"<input type=\\\"radio\\\" name=\\\"first_iodf\\\" $checked value=\\\"$t_iodf_pfiles\u00dd2\u00a8\\\">$t_iodf_pfiles\u00dd0\u00a8 on $t_iodf_pfiles\u00dd1\u00a8</input><BR>\";\n       }\n   }\n   print \"<BR></td>\";\n   print \"<td valign=\\\"top\\\" width=\\\"3%\\\" align=\\\"left\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:#000000; line-height:16px\\\">&nbsp;</td>\";\n   print \"<td valign=\\\"top\\\" width=\\\"10%\\\" align=\\\"left\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:#000000; line-height:16px\\\"><BR>\";\n   $i = 0;\n   foreach $iodf_pfiles (@iodf_pfiles) {\n       @t_iodf_pfiles = split(/ /,$iodf_pfiles);\n       if($t_iodf_pfiles\u00dd0\u00a8 ne \"\") {\n          $i++;\n          $checked = \"\";\n          if($i eq 1) { $checked = \"checked\"; }\n          print \"<input type=\\\"radio\\\" name=\\\"second_iodf\\\" $checked value=\\\"$t_iodf_pfiles\u00dd2\u00a8\\\">$t_iodf_pfiles\u00dd0\u00a8 on $t_iodf_pfiles\u00dd1\u00a8</input><BR>\";\n       }\n   }\n   print \"<BR></td>\";\n   print \"</tr>\";\n   print \"<tr><td valign=\\\"top\\\" colspan=4 align=\\\"left\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:#000000; line-height:16px\\\">\";\n   print \"<input type=\\\"submit\\\" style=\\\"width:100%; font-family:arial,verdana; font-weight:bold; font-size:14px\\\" class=\\\"button_blue\\\" onmouseover=\\\"this.className='button_high'\\\" onmouseout=\\\"this.className='button_blue'\\\" name=\\\"Submit\\\" tabindex=\\\"5\\\" value=\\\"Check CTC Connections\\\">\";\n   print \"</td></tr>\";\n   print \"</table>\";\n\n   print \"</form>\";\n\n##########################################################################################################\n# Close tables and finish the display\n##########################################################################################################\n   print \"</td></tr>\";\n   print \"<tr><td valign=\\\"top\\\" align=\\\"left\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:#000000; line-height:14px\\\">\";\n   print \"<BR>&nbsp;&nbsp;Version: <b>$version</b>\";\n   print \"<BR><BR>&nbsp;&nbsp;Need to check the IODF/IOCPs? <A HREF=\\\"$cgi_directory/iodf.cgi\\\"><SMALL>(click here)</SMALL></A>\";\n   print \"<BR><hr size=1 width=\\\"100%\\\" color=black></td></tr></table><br><br></body><HEAD>\";\n   print \"<META HTTP-EQUIV=\\\"Expires\\\" CONTENT=\\\"-1\\\"><META HTTP-EQUIV=\\\"Pragma\\\" CONTENT=\\\"no-cache\\\"></HEAD></html>\";\n   exit;\n\n##########################################################################################################\n# Otherwise we read the form data, get the IODF, process the data and display it.\n# We join all lines that are 'continued' together.\n##########################################################################################################\n} else {\n\n    read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});\n    @pairs = split(/&/, $buffer);\n    foreach $pair (@pairs) {\n\t  ($name, $value) = split(/=/, $pair);\n        $value =~ tr/+/ /;\n        $value =~ s/%28/%4D/g;\n        $value =~ s/%29/%5D/g;\n        $value =~ s/%2C/%6B/g;\n        $value =~ s/%3A/%7A/g;\n        $value =~ s/%3D/%7E/g;\n        $value =~ s/%3F/%6F/g;\n        $value =~ s/%0A//g;\n        $value =~ s/%(\u00dda-fA-F0-9\u00a8\u00dda-fA-F0-9\u00a8)/pack(\"C\", hex($1))/eg;\n        $FORM{$name} = $value;\n   }\n   $iodf_to_check\u00dd0\u00a8 = $FORM{'first_iodf'};\n   $iodf_to_check\u00dd1\u00a8 = $FORM{'second_iodf'};\n\n\n##########################################################################################################\n# Read and process the IODF, returning it in an array.\n##########################################################################################################\n   $kj = scalar @iodf_to_check;\n   foreach $iodf_to_check (@iodf_to_check) {\n       $iodf = $iodf_to_check;\n\n##########################################################################################################\n# Format the size of the array to three times the size of the IODEVICES. This allows multiple channels to\n# be added which go to the same device. Each element defines the CHPID, CU to one device statement.\n# Define the switch array.\n##########################################################################################################\n       $max_elements = 18;\n       undef @IODF;\n       $IODF\u00dd0\u00a8   = \u00dd\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\u00a8;\n       $IODF_count = 0;\n\n       $data_filename = \"$data_directory/$iodf\";\n       if(open(DATAFILE,\"$data_filename\")) {\n          flock(DATAFILE,2);\n          seek(DATAFILE,0,0);\n          @tiodf_data = <DATAFILE>;\n          close(DATAFILE);\n          foreach $tiodf_data (@tiodf_data) {\n              chomp($tiodf_data);\n          }\n       } else {\n          display_error(\"Unable to open $data_filename for reading.\");\n          exit;\n       }\n\n       if(scalar @tiodf_data eq 1) {\n          $tiodf_data_hcd = $tiodf_data\u00dd0\u00a8;\n          @tiodf_data = unpack(\"A80\" x (length($tiodf_data_hcd)/80),$tiodf_data_hcd);\n       }\n       @iodf_data = (\"\");\n       $iodf_counter = -1;\n       $temp_iodf = \"\";\n       foreach $tiodf_data (@tiodf_data) {\n           if(substr($tiodf_data,71,1) eq \"*\") {\n              $t_iodf = trim(substr($tiodf_data,0,71));\n              $temp_iodf .= $t_iodf;\n           } else {\n              $iodf_counter++;\n              $tt_iodf = trim(substr($tiodf_data,0,71));\n              $iodf_data\u00dd$iodf_counter\u00a8 .= $temp_iodf . $tt_iodf;\n              $temp_iodf = \"\";\n           }\n       }\n\n##########################################################################################################\n# Go through the IODF and remove any commas before keywords which makes parsing easier later.\n##########################################################################################################\n       my @iodevices = (\"\");\n       $ioddevice_count = -1;\n       foreach $iodf_data (@iodf_data) {\n           $tmp_iodf_data = $iodf_data;\n           $found = 0;\n           if(index($iodf_data,\"CHPID\") ne -1) {\n              $tmp_iodf_data =~ s/,PATH/ PATH/ig;\n              $tmp_iodf_data =~ s/,CPATH/ CPATH/ig;\n              $tmp_iodf_data =~ s/,TYPE/ TYPE/ig;\n              $tmp_iodf_data =~ s/,SHARED/ SHARED/ig;\n              $tmp_iodf_data =~ s/,PARTITION/ PARTITION/ig;\n              $tmp_iodf_data =~ s/,PCHID/ PCHID/ig;\n              $tmp_iodf_data =~ s/,SWITCH/ SWITCH/ig;\n              $tmp_iodf_data =~ s/,SWPORT/ SWPORT/ig;\n              $tmp_iodf_data =~ s/,DESC/ DESC/ig;\n              $tmp_iodf_data =~ s/,TPATH/ TPATH/ig;\n              $found = 1;\n           }\n           if(index($iodf_data,\"CNTLUNIT\") ne -1 && index($tmp_iodf_data,\"UNIT=SCTC\") ne -1) {\n              $found = 2;\n              $tmp_iodf_data =~ s/,CUNUMBR/ CUNUMBR/ig;\n              $tmp_iodf_data =~ s/,PATH/ PATH/ig;\n              $tmp_iodf_data =~ s/,LINK/ LINK/ig;\n              $tmp_iodf_data =~ s/,UNIT/ UNIT/ig;\n              $tmp_iodf_data =~ s/,CUADD/ CUADD/ig;\n              $tmp_iodf_data =~ s/,PROTOCL/ PROTOCL/ig;\n              $tmp_iodf_data =~ s/,SHARED/ SHARED/ig;\n              $tmp_iodf_data =~ s/,SWPORT/ SWPORT/ig;\n              $tmp_iodf_data =~ s/,DESC/ DESC/ig;\n           }\n           if(index($iodf_data,\"IODEVICE ADDRESS\") ne -1 && (index($tmp_iodf_data,\"UNIT=SCTC\") ne -1 || index($tmp_iodf_data,\"UNIT=BCTC\") ne -1)) {\n              $tmp_iodf_data =~ s/,CUNUMBR/ CUNUMBR/ig;\n              $tmp_iodf_data =~ s/,STADET/ STADET/ig;\n              $tmp_iodf_data =~ s/,UNIT/ UNIT/ig;\n              $tmp_iodf_data =~ s/,PARTITION/ PARTITION/ig;\n              $tmp_iodf_data =~ s/,TIMEOUT/ TIMEOUT/ig;\n              $tmp_iodf_data =~ s/,MODEL/ MODEL/ig;\n              $tmp_iodf_data =~ s/,DESC/ DESC/ig;\n              $found = 3;\n           }\n           if($found ne 0) {\n              $iodevice_count++;\n              $iodevices\u00dd$iodevice_count\u00a8 = $tmp_iodf_data;\n           }\n       }\n\n##########################################################################################################\n# Parse the data and get the title of the IODF and the list of LPARs defined.\n##########################################################################################################\n       $iodf_title2 = \"\";\n       foreach $iodf_data (@iodf_data) {\n           if(index($iodf_data,\"ID    MSG\") ne -1) { $iodf_title = $iodf_data;  }\n           if(index($iodf_data,\"TITLE '\") ne -1)   { $iodf_title = $iodf_data;  }\n           if(index($iodf_data,\"ID NAME\") ne -1)   { $iodf_title2 = $iodf_data; }\n           if(index($iodf_data,\"RESOURCE\") ne -1)  { $iodf_resource = $iodf_data; last; }\n       }\n\n##########################################################################################################\n# This code handles the normal IOCP statements from a production IODF\n##########################################################################################################\n       $a = index($iodf_title,\"MSG1\");\n       if($a ne -1) {\n          $b = index($iodf_title,\"SCR\")-1;\n          if($b eq -2) { $b = index($iodf_title,\"TOK\")-1; }\n          $iodf_title2 = substr($iodf_title,$a,$b-$a);\n          ($msg1,$msg2,$system) = split(/,/,$iodf_title2);\n          $iodf_name = $msg1;\n          $iodf_name =~ s/MSG1=//;\n          $iodf_name =~ s/\\'//g;\n          $iodf_proc = substr($iodf_title,($b+1)+4,8);\n          $iodf_proc =~ s/\\(//g;\n          $iodf_proc =~ s/\\'//g;\n       }\n\n###########################################################################################################\n# This code handles the IOCP statements from HCD dialog\n##########################################################################################################\n       $a = index($iodf_title2,\"ID NAME\");\n       if($a ne -1) {\n          $iodf_title2 =~ s/,/ /g;\n          @iodf_title2_words = split(/ /,$iodf_title2);\n          $iodf_proc = $iodf_title2_words\u00dd1\u00a8;\n          $iodf_proc =~ s/NAME=//;\n          $iodf_name = trim(substr($iodf_title2,length($iodf_title2)-9,8));\n       }\n\n##########################################################################################################\n# Now we parse the data\n##########################################################################################################\n##########################################################################################################\n# We extract each IODEVICE from the IODF and extract the address. However we are only interested in BCTC\n# and SCTC devices.\n##########################################################################################################\n       @iodevices = reverse @iodevices;\n       for($k=0; $k<scalar @iodevices; $k++) {\n           if($iodevices\u00dd$k\u00a8 eq \"\") { last; }\n           if(index($iodevices\u00dd$k\u00a8,\"IODEVICE ADDRESS\") ne -1) {\n              $device_css = \"0\";\n              $device_num = \"\";\n              $device_cu  = \"\";\n              $device_attrs = \"\";\n              $device_exp_sys = \"\";\n              $device_unit_add = \"\";\n              @temp_iod = split(/ /,$iodevices\u00dd$k\u00a8);\n              $temp_iod\u00dd1\u00a8 =~ s/ADDRESS=//g;\n              $temp_iod\u00dd1\u00a8 =~ s/\\(//g;\n              $temp_iod\u00dd1\u00a8 =~ s/\\)//g;\n\n##########################################################################################################\n# We extract the CU and the device attributes, chaining the latter together.\n##########################################################################################################\n              $device_num  = $temp_iod\u00dd1\u00a8;\n              foreach $temp_iod (@temp_iod) {\n                  if(index($temp_iod,\"CUNUMBR\") ne -1) {\n                     $temp_iod=~ s/CUNUMBR=//g;\n                     $temp_iod=~ s/\\,/ /g;\n                     $temp_iod=~ s/\\(//g;\n                     $temp_iod=~ s/\\)//g;\n                     $device_cu = $temp_iod;\n                  }\n                  $found_attr = 0;\n                  if(index($temp_iod,\"PARTITION=\") ne -1) {\n                     $temp_iod =~ s/PARTITION=//g;\n                     $temp_iod =~ s/\\,/ /g;\n                     $temp_iod =~ s/CSS\\(0\\)//g;\n                     $temp_iod =~ s/CSS\\(1\\)//g;\n                     $temp_iod =~ s/CSS\\(2\\)//g;\n                     $temp_iod =~ s/CSS\\(3\\)//g;\n                     $temp_iod =~ s/\\(//g;\n                     $temp_iod =~ s/\\)//g;\n                     $temp_iod =~ s/=//g;\n                     $temp_iod = trim($temp_iod);\n                     $device_exp_sys = $temp_iod;\n                  }\n                  if(index($temp_iod,\"UNITADD=\") ne -1)   {\n                     $temp_iod =~ s/UNITADD=//g;\n                     $device_unit_add = $temp_iod;\n                  }\n                  if(index($temp_iod,\"UNIT=\") ne -1)      {\n                     $temp_iod =~ s/UNIT=//g;\n                     $device_unit_type = $temp_iod;\n                  }\n                  if(index($temp_iod,\"STADET=\") ne -1)    { $found_attr = 1; }\n                  if(index($temp_iod,\"TIMEOUT=\") ne -1)   { $found_attr = 1; }\n                  if(index($temp_iod,\"MODEL=\") ne -1)     { $found_attr = 1; }\n                  if($found_attr eq 1) {\n                     if(length($device_attrs) ne 0) { $device_attrs .= \",\"; }\n                     $device_attrs .= $temp_iod;\n                  }\n              }\n##########################################################################################################\n# Now we assign to the array.\n# $IODF\u00dd$IODF_count\u00a8\u00dd9\u00a8  = device;\n# $IODF\u00dd$IODF_count\u00a8\u00dd10\u00a8 = device attributes;\n# $IODF\u00dd$IODF_count\u00a8\u00dd4\u00a8  = control unit;\n#\n# We also blank out the IODEVICE we have processed.\n##########################################################################################################\n              $loop_devices = 1;\n              if(index($device_num,\",\") ne -1) {\n                 $device_num =~ s/,/ /;\n                 ($device_numa,$loop_devices) = split(/ /,$device_num);\n                 $device_num = $device_numa;\n              }\n              $IODF\u00dd$IODF_count\u00a8\u00dd9\u00a8  = sprintf(\"%04s\",$device_num);\n              $IODF\u00dd$IODF_count\u00a8\u00dd10\u00a8 = $device_attrs;\n              $IODF\u00dd$IODF_count\u00a8\u00dd4\u00a8  = $device_cu;\n              $IODF\u00dd$IODF_count\u00a8\u00dd15\u00a8 = $device_exp_sys;\n              $IODF\u00dd$IODF_count\u00a8\u00dd14\u00a8 = $device_unit_add;\n              $IODF\u00dd$IODF_count\u00a8\u00dd16\u00a8 = $iodf_name;\n              $IODF\u00dd$IODF_count\u00a8\u00dd17\u00a8 = $iodf_proc;\n              $IODF\u00dd$IODF_count\u00a8\u00dd18\u00a8 = $loop_devices;\n              $IODF\u00dd$IODF_count\u00a8\u00dd19\u00a8 = $device_unit_type;\n              $IODF_count++;\n              $iodevices\u00dd$k\u00a8 = \"EMPTY\";\n##########################################################################################################\n# Expand the number of devices into a full list\n##########################################################################################################\n#              if(index($device_num,\",\") ne -1) {\n#                 $device_num =~ s/,/ /;\n#                 ($device_numa,$loop_devices) = split(/ /,$device_num);\n#                 $a = $IODF_count - 1;\n#                 $IODF\u00dd$a\u00a8\u00dd9\u00a8 = sprintf(\"%04s\",$device_numa);\n#                 $dec_device_num = hex $device_numa;\n#                 $dec_device_ua = hex $device_unit_add;\n#                 for($i=1; $i<int($loop_devices); $i++) {\n#                     $IODF\u00dd$IODF_count\u00a8\u00dd9\u00a8  = sprintf(\"%04X\",$dec_device_num + $i);\n#                     $IODF\u00dd$IODF_count\u00a8\u00dd10\u00a8 = $device_attrs;\n#                     $IODF\u00dd$IODF_count\u00a8\u00dd4\u00a8  = $device_cu;\n#                     $IODF\u00dd$IODF_count\u00a8\u00dd15\u00a8 = $device_exp_sys;\n#                     $IODF\u00dd$IODF_count\u00a8\u00dd16\u00a8 = $iodf_name;\n#                     $IODF\u00dd$IODF_count\u00a8\u00dd17\u00a8 = $iodf_proc;\n#                     if($device_unit_add ne \"\") {\n#                        $IODF\u00dd$IODF_count\u00a8\u00dd14\u00a8  = sprintf(\"%02X\",$dec_device_ua + $i);\n#                     }\n#                     $IODF_count++;\n#                 }\n#              }\n           }\n\n##########################################################################################################\n# Now we process the CONTROL UNITS\n##########################################################################################################\n           if(index($iodevices\u00dd$k\u00a8,\"CNTLUNIT\") ne -1) {\n              $cu_num = \"\";\n              $cu_cua = \"\";\n              $cu_unit= \"\";\n              $cu_link= \"\";\n              $cu_ua  = \"\";\n              $cu_path= \"\";\n              @temp_cu = split(/ /,$iodevices\u00dd$k\u00a8);\n##########################################################################################################\n# We extract the CU, the PATH and other attributes.\n##########################################################################################################\n              $cu_num  = $temp_cu\u00dd1\u00a8;\n              $cu_num  =~ s/CUNUMBR=//g;\n              $temp_cu\u00dd2\u00a8 =~ s/PATH=//g;\n              if(index($temp_cu\u00dd2\u00a8,\"CSS\") ne -1) {\n                 @css_path = split(/\\),\\(/,$temp_cu\u00dd2\u00a8);\n                 foreach $css_path (@css_path) {\n                     $css_path =~ s/\\)/ /g;\n                     $css_path =~ s/\\(//g;\n                     $css_path =~ s/\\,/ /g;\n                     @t_css_path = split(/ /,$css_path);\n                     $t_css_path\u00dd0\u00a8 =~ s/CSS//;\n                     for($a=1; $a<scalar @t_css_path; $a++) {\n                         if($t_css_path\u00dd$a\u00a8 eq \"\") { next; }\n                         $cu_path .= $t_css_path\u00dd0\u00a8 . \":\" . $t_css_path\u00dd$a\u00a8 . \" \";\n                     }\n                 }\n              } else {\n                 $cu_path = $temp_cu\u00dd2\u00a8;\n                 $cu_path =~ s/\\,/ /g;\n                 $cu_path =~ s/\\(//g;\n                 $cu_path =~ s/\\)//g;\n              }\n              foreach $temp_cu (@temp_cu) {\n                  if(index($temp_cu,\"UNIT=\") ne -1)    { $temp_cu =~ s/UNIT=//g; $cu_unit = $temp_cu; }\n                  if(index($temp_cu,\"UNITADD=\") ne -1) { $temp_cu =~ s/UNITADD=//g; $temp_cu =~ s/\\(//g; $temp_cu =~ s/\\)//g; $cu_ua = $temp_cu; }\n                  if(index($temp_cu,\"CUADD=\") ne -1)   { $temp_cu =~ s/CUADD=//g; $cu_cua = $temp_cu; }\n                  if(index($temp_cu,\"LINK=\") ne -1)    {\n                     $temp_cu =~ s/LINK=//g;\n                     if(index($temp_cu,\"CSS\") ne -1) {\n                        @css_link = split(/\\),\\(/,$temp_cu);\n                        foreach $css_link (@css_link) {\n                            $css_link =~ s/\\)/ /g;\n                            $css_link =~ s/\\(//g;\n                            $css_link =~ s/\\,/ /g;\n                            @t_css_link = split(/ /,$css_link);\n                            $t_css_link\u00dd0\u00a8 =~ s/CSS//;\n                            for($a=1; $a<scalar @t_css_link; $a++) {\n                                if($t_css_link\u00dd$a\u00a8 eq \"\") { next; }\n                                $cu_link .= $t_css_link\u00dd0\u00a8 . \":\" . $t_css_link\u00dd$a\u00a8 . \" \";\n                            }\n                        }\n                     } else {\n                        $temp_cu =~ s/\\(//g;\n                        $temp_cu =~ s/\\)//g;\n                        $temp_cu =~ s/\\,/ /g;\n                        $cu_link = $temp_cu;\n                     }\n                  }\n              }\n##########################################################################################################\n# We now traverse the main array and insert the CU attributes into the array if the device's CU matches\n# ours. Since we perform additional function later, we ignore any that have already been processed.\n#\n# We also blank out the CU we have processed.\n# If we find that there are multiple paths to the CU, we now traverse the array and insert the current\n# device and CU in another element with the next path.\n##########################################################################################################\n              for($a=0; $a<$IODF_count; $a++) {\n                  if($IODF\u00dd$a\u00a8\u00dd9\u00a8 eq \"\") { last; }\n                  if($IODF\u00dd$a\u00a8\u00dd4\u00a8 eq $cu_num && $IODF\u00dd$a\u00a8\u00dd11\u00a8 ne \"DUP\") {\n                     $IODF\u00dd$a\u00a8\u00dd5\u00a8 = $cu_cua;\n                     $IODF\u00dd$a\u00a8\u00dd6\u00a8 = $cu_unit;\n                     $IODF\u00dd$a\u00a8\u00dd8\u00a8 = $cu_ua;\n                     undef @temp_paths, @temp_links;\n                     @temp_paths = split(/ /,$cu_path);\n                     $IODF\u00dd$a\u00a8\u00dd0\u00a8 = $temp_paths\u00dd0\u00a8;\n                     @temp_links = split(/ /,$cu_link);\n                     $IODF\u00dd$a\u00a8\u00dd7\u00a8 = $temp_links\u00dd0\u00a8;\n                     $iodevices\u00dd$k\u00a8 = \"EMPTY\";\n                     $len_path = scalar @temp_paths;\n                     if($len_path > 1) {\n                        for($pt=1; $pt<$len_path; $pt++) {\n                            $IODF\u00dd$IODF_count\u00a8\u00dd9\u00a8 = $IODF\u00dd$a\u00a8\u00dd9\u00a8;\n                            $IODF\u00dd$IODF_count\u00a8\u00dd10\u00a8= $IODF\u00dd$a\u00a8\u00dd10\u00a8;\n                            $IODF\u00dd$IODF_count\u00a8\u00dd4\u00a8 = $IODF\u00dd$a\u00a8\u00dd4\u00a8;\n                            $IODF\u00dd$IODF_count\u00a8\u00dd5\u00a8 = $IODF\u00dd$a\u00a8\u00dd5\u00a8;\n                            $IODF\u00dd$IODF_count\u00a8\u00dd6\u00a8 = $IODF\u00dd$a\u00a8\u00dd6\u00a8;\n                            $IODF\u00dd$IODF_count\u00a8\u00dd7\u00a8 = $temp_links\u00dd$pt\u00a8;\n                            $IODF\u00dd$IODF_count\u00a8\u00dd8\u00a8 = $IODF\u00dd$a\u00a8\u00dd8\u00a8;\n                            $IODF\u00dd$IODF_count\u00a8\u00dd0\u00a8 = $temp_paths\u00dd$pt\u00a8;\n                            $IODF\u00dd$IODF_count\u00a8\u00dd11\u00a8= \"DUP\";\n                            $IODF_count++;\n                        }\n                     }\n                  }\n              }\n           }\n\n##########################################################################################################\n# Now we process the CHPIDS\n##########################################################################################################\n           if(index($iodevices\u00dd$k\u00a8,\"CHPID\") ne -1) {\n              $chp_num = \"\";\n              $chp_sys = \"\";\n              $chp_type= \"\";\n              $chp_sw  = \"\";\n              $chp_port  = \"\";\n              @temp_chp = split(/ /,$iodevices\u00dd$k\u00a8);\n              $chp_num  = $temp_chp\u00dd1\u00a8;\n              $chp_num =~ s/PATH=//g;\n              $chp_num  =~ s/\\(//g;\n              $chp_num  =~ s/\\)//g;\n##########################################################################################################\n# We get the type, switch and partition data for the CHPID.\n##########################################################################################################\n              foreach $temp_chp (@temp_chp) {\n                  if(index($temp_chp,\"TYPE=\") ne -1)     { $temp_chp =~ s/TYPE=//g;   $chp_type = $temp_chp; }\n                  if(index($temp_chp,\"SWITCH=\") ne -1)   { $temp_chp =~ s/SWITCH=//g; $chp_sw = $temp_chp;   }\n                  if(index($temp_chp,\"PARTITION=\") ne -1) {\n                     $temp_chp =~ s/PARTITION=//g;\n                     $temp_chp =~ s/\\,/ /g;\n                     $temp_chp =~ s/\\(//g;\n                     $temp_chp =~ s/\\)//g;\n                     $temp_chp =~ s/=//g;\n                     $chp_sys = $temp_chp;\n                  }\n                  if(index($temp_chp,\"SWPORT=\") ne -1) {\n                     $temp_chp =~ s/SWPORT=//g;\n                     $temp_chp =~ s/\\,/ /g;\n                     $temp_chp =~ s/\\(//g;\n                     $temp_chp =~ s/\\)//g;\n                     ($temp_sw,$chp_port) = split(/ /,$temp_chp);\n                  }\n              }\n\n##########################################################################################################\n# We now search the array and insert the data for the named CHPID.\n##########################################################################################################\n              for($a=0; $a<$IODF_count; $a++) {\n                  if($IODF\u00dd$a\u00a8\u00dd9\u00a8 eq \"\") { next; }\n                  if(index($chp_num,\"CSS\") eq -1) {\n                     if($chp_num eq $IODF\u00dd$a\u00a8\u00dd0\u00a8) {\n                        $IODF\u00dd$a\u00a8\u00dd1\u00a8 = $chp_sys;\n                        $IODF\u00dd$a\u00a8\u00dd2\u00a8 = $chp_type;\n                        $IODF\u00dd$a\u00a8\u00dd3\u00a8 = $chp_sw;\n                        $IODF\u00dd$a\u00a8\u00dd13\u00a8 = $chp_port;\n                        if($IODF\u00dd$a\u00a8\u00dd15\u00a8 eq \"\") { $IODF\u00dd$a\u00a8\u00dd15\u00a8 = $chp_sys; }\n                        $iodevices\u00dd$k\u00a8 = \"EMPTY\";\n                     }\n                  } else {\n                     $chan_num = substr($chp_num,length($chp_num)-2,2);\n                     $chp_num  = substr($chp_num,0,length($chp_num)-2);\n                     $chp_num  =~ s/ //g;\n                     $chp_num  =~ s/,/ /g;\n                     $chp_num  =~ s/CSS//g;\n                     @css_words = split(/ /,$chp_num);\n                     foreach $css_words (@css_words) {\n                         $new_css_chp = $css_words . \":\" . $chan_num;\n                         for($b=0; $b<$IODF_count; $b++) {\n                             if($IODF\u00dd$b\u00a8\u00dd9\u00a8 eq \"\") { last; }\n                             if($new_css_chp eq $IODF\u00dd$b\u00a8\u00dd0\u00a8) {\n                                $IODF\u00dd$b\u00a8\u00dd1\u00a8 = $chp_sys;\n                                $IODF\u00dd$b\u00a8\u00dd2\u00a8 = $chp_type;\n                                $IODF\u00dd$b\u00a8\u00dd3\u00a8 = $chp_sw;\n                                $IODF\u00dd$b\u00a8\u00dd13\u00a8 = $chp_port;\n                                if($IODF\u00dd$b\u00a8\u00dd15\u00a8 eq \"\") { $IODF\u00dd$b\u00a8\u00dd15\u00a8 = $chp_sys; }\n                                $iodevices\u00dd$k\u00a8 = \"EMPTY\";\n                             }\n                         }\n                     }\n                  }\n              }\n##########################################################################################################\n           }\n       }\n\n##########################################################################################################\n# Now we adjust the size of the array, and sort it in CHPID order.\n##########################################################################################################\n      $#IODF = $IODF_count - 1;\n      $a = scalar @IODF;\n      @IODF = sort(iodf_sort_cua @IODF);\n\n##########################################################################################################\n# With the list sorted, we now parse the list and insert the device UA, but only if they haven't already\n# been filled. We adjust the UA as we do not expand the list of devices to include all of them.\n##########################################################################################################\n      $prev_cu = \"\";\n      for($m=0; $m<$IODF_count; $m++) {\n          if($IODF\u00dd$m\u00a8\u00dd9\u00a8 eq \"\") { last; }\n          if($IODF\u00dd$m\u00a8\u00dd4\u00a8 ne $prev_cu) {\n             $prev_cu = $IODF\u00dd$m\u00a8\u00dd4\u00a8;\n             ($new_cu_ua = $IODF\u00dd$m\u00a8\u00dd8\u00a8) =~ s/,/ /;\n             ($cu_numa,$loop_cu) = split(/ /,$new_cu_ua);\n             $dec_cu_num = hex $cu_numa;\n             $incr = 0;\n             $i = 0;\n             while ($IODF\u00dd$m+$incr\u00a8 eq $prev_cu) {\n                 if($IODF\u00dd$m+$incr\u00a8\u00dd14\u00a8 eq \"\") {\n                    $IODF\u00dd$m+$incr\u00a8\u00dd14\u00a8  = sprintf(\"%02X\",$dec_cu_num + $i);\n                 }\n                 $i = $i + ($IODF\u00dd$m+$incr\u00a8\u00dd18\u00a8 - 1);\n                 $incr++;\n             }\n          }\n      }\n\n##########################################################################################################\n# We now finished processing the IODF/IOCP and so we copy across to the respective arrays.\n##########################################################################################################\n      if($iodf eq $FORM{'first_iodf'}) {\n         $iodf = $second_iodf;\n         $FI_IODF_count = $IODF_count;\n         @FI_IODF = splice(@IODF,0,$IODF_count);\n      }\n      if($iodf eq $FORM{'second_iodf'}) {\n         $SI_IODF_count = $IODF_count;\n         @SI_IODF = splice(@IODF,0,$IODF_count);\n      }\n   }\n\n##########################################################################################################\n# Output the information\n##########################################################################################################\n#   for($k=0; $k<$FI_IODF_count; $k++) {\n#       print \"($k) $FI_IODF\u00dd$k\u00a8\u00dd16\u00a8 >>$FI_IODF\u00dd$k\u00a8\u00dd9\u00a8 (CU $FI_IODF\u00dd$k\u00a8\u00dd4\u00a8, SW=$FI_IODF\u00dd$k\u00a8\u00dd3\u00a8, OUT_PORT=$FI_IODF\u00dd$k\u00a8\u00dd13\u00a8, IN_PORT=$FI_IODF\u00dd$k\u00a8\u00dd7\u00a8, CUA=$FI_IODF\u00dd$k\u00a8\u00dd5\u00a8, UA=$FI_IODF\u00dd$k\u00a8\u00dd8\u00a8) ------------->> UA=$FI_IODF\u00dd$k\u00a8\u00dd14\u00a8, DES=$FI_IODF\u00dd$k\u00a8\u00dd15\u00a8<< <BR>\\n\";\n#   }\n#   print \"<BR><BR><BR>\";\n#   for($k=0; $k<$SI_IODF_count; $k++) {\n#       print \"($k) $SI_IODF\u00dd$k\u00a8\u00dd16\u00a8 >>$SI_IODF\u00dd$k\u00a8\u00dd9\u00a8 (CU $SI_IODF\u00dd$k\u00a8\u00dd4\u00a8, SW=$SI_IODF\u00dd$k\u00a8\u00dd3\u00a8, OUT_PORT=$SI_IODF\u00dd$k\u00a8\u00dd13\u00a8, IN_PORT=$SI_IODF\u00dd$k\u00a8\u00dd7\u00a8, CUA=$SI_IODF\u00dd$k\u00a8\u00dd5\u00a8, UA=$SI_IODF\u00dd$k\u00a8\u00dd8\u00a8) ------------->> UA=$SI_IODF\u00dd$k\u00a8\u00dd14\u00a8, DES=$SI_IODF\u00dd$k\u00a8\u00dd15\u00a8<< <BR>\\n\";\n#   }\n\n##########################################################################################################\n# Check that the IODF/IOCP contain the necessary SWPORT information.\n##########################################################################################################\n    if($FI_IODF\u00dd0\u00a8\u00dd13\u00a8 eq \"\") {\n       display_error(\"ERROR: SOURCE IODF $FI_IODF\u00dd0\u00a8\u00dd16\u00a8 does not contain SWPORT information.\");\n       exit;\n    }\n    if($SI_IODF\u00dd0\u00a8\u00dd13\u00a8 eq \"\") {\n       display_error(\"ERROR: DESTINATION IODF $SI_IODF\u00dd0\u00a8\u00dd16\u00a8 does not contain SWPORT information.\");\n       exit;\n    }\n\n##########################################################################################################\n# Now we display the table headings\n##########################################################################################################\n   print \"<BR><BR><TABLE align=\\\"center\\\" class=\\\"box\\\" WIDTH=\\\"100%\\\" cellpadding=0 cellspacing=0>\\n\";\n   print \"<tr><td align=\\\"center\\\" bgcolor=\\\"#444444\\\" style=\\\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\\\">$FI_IODF\u00dd0\u00a8\u00dd16\u00a8 ($FI_IODF\u00dd0\u00a8\u00dd17\u00a8)&nbsp;&nbsp; => CTC Connections <= &nbsp;&nbsp;$SI_IODF\u00dd0\u00a8\u00dd16\u00a8 ($SI_IODF\u00dd0\u00a8\u00dd17\u00a8)</td></tr></table>\\n\";\n   print \"<BR>\\n\";\n   print \"<TABLE align=\\\"center\\\" WIDTH=\\\"100%\\\" cellpadding=2 cellspacing=0>\\n\";\n   print \"<tr>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"4%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Proc</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">System</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Device</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">CHP</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Type</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Switch</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#009900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Entry<BR>Port</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#009900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">CU</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#009900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">CU<BR>LA</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#009900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">CUA</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#009900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Rng</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#000099\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">UA</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#FFFFFF\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">Conn</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"4%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Proc</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">System</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Device</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">CHP</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Type</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#990000\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Switch</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#009900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">Entry<BR>Port</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#009900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">CU</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_l\\\" bgcolor=\\\"#009900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">CU<BR>LA</td>\\n\";\n   print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_head_r\\\" bgcolor=\\\"#009900\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\\\">CUA</td>\\n\";\n   print \"</tr>\\n\";\n\n##########################################################################################################\n# Now we match the Source and the Destination IOCPs and check for the CTC connections.\n##########################################################################################################\n   for($k=0; $k<$FI_IODF_count; $k++) {\n       if($FI_IODF\u00dd$k\u00a8\u00dd5\u00a8 eq \"\") { $FI_IODF\u00dd$k\u00a8\u00dd5\u00a8 = \"&nbsp;\"; }\n       print \"<tr>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"4%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$FI_IODF\u00dd$k\u00a8\u00dd17\u00a8</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$FI_IODF\u00dd$k\u00a8\u00dd15\u00a8</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$FI_IODF\u00dd$k\u00a8\u00dd9\u00a8</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$FI_IODF\u00dd$k\u00a8\u00dd0\u00a8</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$FI_IODF\u00dd$k\u00a8\u00dd2\u00a8</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$FI_IODF\u00dd$k\u00a8\u00dd3\u00a8</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$FI_IODF\u00dd$k\u00a8\u00dd13\u00a8</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$FI_IODF\u00dd$k\u00a8\u00dd4\u00a8</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$FI_IODF\u00dd$k\u00a8\u00dd7\u00a8</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$FI_IODF\u00dd$k\u00a8\u00dd5\u00a8</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$FI_IODF\u00dd$k\u00a8\u00dd18\u00a8</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$FI_IODF\u00dd$k\u00a8\u00dd14\u00a8</td>\\n\";\n\n       @found = grep { $_->\u00dd3\u00a8 eq $FI_IODF\u00dd$k\u00a8\u00dd3\u00a8 &&\n#                       $_->\u00dd7\u00a8 eq $FI_IODF\u00dd$k\u00a8\u00dd13\u00a8 &&\n                       index(substr($_->\u00dd7\u00a8,length($_->\u00dd7\u00a8)-2,2),substr($FI_IODF\u00dd$k\u00a8\u00dd13\u00a8,length($FI_IODF\u00dd$k\u00a8\u00dd13\u00a8)-2,2)) ne -1 &&\n                       index(substr($FI_IODF\u00dd$k\u00a8\u00dd7\u00a8,length($FI_IODF\u00dd$k\u00a8\u00dd7\u00a8)-2,2),substr($_->\u00dd13\u00a8,length($_->\u00dd13\u00a8)-2,2)) ne -1 &&\n                       $_->\u00dd14\u00a8 eq $FI_IODF\u00dd$k\u00a8\u00dd14\u00a8 }\n                       @SI_IODF ;\n       $conn_state = \"\";\n       $a = \"\";\n       $b = \"\";\n       $c = \"\";\n       $d = \"\";\n       $e = \"\";\n       $f = \"\";\n       $g = \"\";\n       $h = \"\";\n       $i = \"\";\n       $j = \"\";\n       if(scalar @found > 0) {\n          foreach $found (@found) {\n              $a = $found->\u00dd17\u00a8 . \"<BR>\";\n              $b = $found->\u00dd15\u00a8 . \"<BR>\";\n              $c = $found->\u00dd9\u00a8 . \"<BR>\";\n              $d = $found->\u00dd0\u00a8 . \"<BR>\";\n              $e = $found->\u00dd2\u00a8 . \"<BR>\";\n              $f = $found->\u00dd3\u00a8 . \"<BR>\";\n              $g = $found->\u00dd13\u00a8 . \"<BR>\";\n              $h = $found->\u00dd4\u00a8 . \"<BR>\";\n              $i = $found->\u00dd7\u00a8 . \"<BR>\";\n              $j = $found->\u00dd5\u00a8 . \"<BR>\";\n              $match = 0;\n              if($found->\u00dd19\u00a8 eq \"BCTC\" && $FI_IODF\u00dd$k\u00a8\u00dd19\u00a8 eq \"BCTC\") { $match++; }\n              if($found->\u00dd19\u00a8 eq \"SCTC\" && $FI_IODF\u00dd$k\u00a8\u00dd19\u00a8 eq \"SCTC\") { $match++; }\n              if($found->\u00dd2\u00a8 eq \"CTC\" && $FI_IODF\u00dd$k\u00a8\u00dd2\u00a8 eq \"CNC\")    { $match++; }\n              if($found->\u00dd2\u00a8 eq \"CNC\" && $FI_IODF\u00dd$k\u00a8\u00dd2\u00a8 eq \"CTC\")    { $match++; }\n              if($match > 1) {\n                 $conn_state .= \"<b>Yes</b><BR>\";\n              }\n          }\n       }\n       if(length($conn_state) eq 0) { $conn_state = \"&nbsp;\"; }\n       if(length($a) eq 0) { $a = \"&nbsp;\"; }\n       if(length($b) eq 0) { $b = \"&nbsp;\"; }\n       if(length($c) eq 0) { $c = \"&nbsp;\"; }\n       if(length($d) eq 0) { $d = \"&nbsp;\"; }\n       if(length($e) eq 0) { $e = \"&nbsp;\"; }\n       if(length($f) eq 0) { $f = \"&nbsp;\"; }\n       if(length($g) eq 0) { $g = \"&nbsp;\"; }\n       if(length($h) eq 0) { $h = \"&nbsp;\"; }\n       if(length($i) eq 0) { $i = \"&nbsp;\"; }\n       if(length($j) eq 0) { $j = \"&nbsp;\"; }\n       print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" bgcolor=\\\"#aaaaaa\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$conn_state</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"4%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$a</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"5%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$b</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$c</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$d</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$e</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$f</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$g</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$h</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_l\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$i</td>\\n\";\n       print \"<td align=\\\"center\\\" width=\\\"3%\\\" valign=\\\"top\\\" class=\\\"box_r\\\" style=\\\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\\\">$j</td>\\n\";\n       print \"</tr>\";\n       undef @found;\n   }\n   print \"</table><BR><BR>\";\n\n##########################################################################################################\n# Now finish the display\n##########################################################################################################\n}\nprint <<ENDHTML_E;\n<BR><BR>\n<hr size=1 width=\"100%\" color=black>\n<small>End</small><BR>\n</td></tr></table>\n<br><br>\n</body>\n<HEAD>\n<META HTTP-EQUIV=\"Expires\" CONTENT=\"-1\">\n<META HTTP-EQUIV=\"Pragma\" CONTENT=\"no-cache\">\n</HEAD>\n</html>\nENDHTML_E\n\nexit;\n\n\n\n##########################################################################################################\n# Routines\n##########################################################################################################\n\n##########################################################################################################\n# Sort IODFs into numeric order\n##########################################################################################################\nsub iodf_sort {\n    ($aa,$a1) = split(/\\./,$a);\n    ($bb,$b1) = split(/\\./,$b);\n    $aa = lc $aa;\n    $bb = lc $bb;\n    $aa =~ s/iodf//g;\n    $bb =~ s/iodf//g;\n    return int($aa) <=> int($bb);\n}\n\n##########################################################################################################\n# Display an error\n##########################################################################################################\nsub display_error {\n    print \"<BR><BR><TABLE align=\\\"center\\\" class=\\\"box\\\" WIDTH=\\\"70%\\\" cellpadding=0 cellspacing=0>\";\n    print \"<tr><td align=\\\"left\\\" class=\\\"err_heading\\\" style=\\\"font-family:arial,verdana; font-size:20px; color:#FFFFFF; line-height:30px\\\">&nbsp;&nbsp;<b>ERROR:</b></td></tr>\";\n    print \"<tr><td align=\\\"left\\\" style=\\\"font-family:arial,verdana; font-size:14px; color:black; font-weight:bold; line-height:16px\\\"><BR><BR>&nbsp;&nbsp;$_\u00dd0\u00a8<BR><BR></td></tr>\";\n    print \"<tr><td align=\\\"left\\\" style=\\\"font-family:arial,verdana; font-size:14px; color:black; line-height:16px\\\">&nbsp;&nbsp;<A HREF=\\\"$cgi_directory/$script_name\\\">Back To IODF Menu</A><BR><BR></td></tr>\";\n    print \"</table>\";\n\n}\n\n##########################################################################################################\n# Remove leading and trailing blanks\n##########################################################################################################\nsub trim {\n    my $str = $_\u00dd0\u00a8;\n    $str =~ s/\u00ac *//;\n    $str =~ s/ *$//;\n    return $str;\n}\n\n##########################################################################################################\n# Sort IODF array on DEVICE and CU.\n##########################################################################################################\nsub iodf_sort_cua {\n    $p1 = $a->\u00dd15\u00a8 <=> $b->\u00dd15\u00a8;\n    $p2 = hex $a->\u00dd9\u00a8 <=> hex $b->\u00dd9\u00a8;\n    $p3 = hex $a->\u00dd4\u00a8 <=> hex $b->\u00dd4\u00a8;\n    if($p1 ne 0) { return $p1; }\n    if($p2 ne 0) { return $p2; }\n    if($p3 ne 0) { return $p3; }\n    return 0;\n}\n\n##########################################################################################################\n# IODF Menu sort\n##########################################################################################################\nsub iodf_menu_sort {\n    return $a cmp $b;\n}\n\n##########################################################################################################\n#                                             END of program and routines\n##########################################################################################################\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT736/CBT.V500.FILE736.PDS/IODF.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT736/CBT.V500.FILE736.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}