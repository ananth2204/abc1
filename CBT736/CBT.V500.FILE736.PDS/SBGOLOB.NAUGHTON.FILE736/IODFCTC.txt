#!/usr/local/bin/perl
##########################################################################################################
#
# I O D F _ C T C . C G I
# --------------------------------------------------------------------------------------------------------
# HTML, PERL/CGI scripts written by Mark Naughton in November 2005.
#
# Any questions, contact me at: mark@blue-shantung.co.uk
#
# --------------------------------------------------------------------------------------------------------
# Version  Date        Inits  Change
# -------  ----------  -----  ----------------------------------------------------------------------------
# 1.0      03/04/2006  MDN    Initial version - ported from IODF.CGI.
#          07/04/2006  MDN    Version completed.
# 1.1      10/04/2006  MDN    Added column to display if the connection can be made based on BCTC to BCTC,
#                             SCTC to SCTC and CNC to CTC (or vice versa).
#          15/04/2006  MDN    Fixed bug which meant a non-CSS IODF (Source) could not match a CSS IODF
#                             (Destination) - needed to handle the CSS value!
#
##########################################################################################################
# COPYRIGHT NOTICE
##########################################################################################################
# This program remains the copyright of Mark Naughton and British Airways. Unlimited copying and use of
# this material is allowed, however it must not be sold for commercial reasons. A reasonable fee for a CD
# or DVD containing this program may be charged. This program works-as-is and we hold no responsibility if
# the program does not do what it says, or causes any mayhem in your system.
#
##########################################################################################################

##########################################################################################################
# ONLY CHANGE THESE USER PARAMETERS
##########################################################################################################
$data_directory = "/S2/BA/mvsweb/data/iodf";
$cgi_directory  = "/cgi-bin";
$script_name    = "iodf_ctc.cgi";
$title          = "British Airways Infrastructure Software:";

##########################################################################################################
# END OF USER PARAMETERS
##########################################################################################################

##########################################################################################################
# INSTALLATION
#
# 1. Update the 1st line to point to your PERL interpreter.
# 2. Copy this script into a directory - making sure you update the cgi_directory variable above.
# 3. Copy the IOCPs/IODFs (as text files) into the directory you have specified in data_directory. We use
#    the naming convention of IODFxx.PROC where xx is the two digit ID of the IODF.
# 4. Update the title variable above.
# 5. Then try it through your browser! Currently the Cascading Style Sheet uses IE-specific options.
#
#
# NOTES
#
# 1. This script was written based on pre-z/Series IOCPs so the parsing of the IOCP is sequential as in
#    all IODEVICES are processed, then the CUs and then the CHPs. As our site does not have more than
#    1 x CSS, it is not known if this will cause a problem - please send me an email if it doesn't and
#    we'll get it fixed.
#
##########################################################################################################


##########################################################################################################
# ARRAY STRUCTURE:
#
#  0. (Channel SubSystem) CSS:CHPID
#  1. SYSTEM
#  2. TYPE
#  3. SWITCH
#  4. CONTROL UNIT
#  5. CONTROL UNIT ADDRESS
#  6. UNIT
#  7. LINK
#  8. UNIT ADDRESS
#  9. DEVICE
# 10. DEVICE ATTRIBUTES
# 11. Blank or DUP - specifies that this entry has been duplicated from within the data - for example as
#     in splitting the paths to a CU.
# 12. Number - specifies the number of following (and including) entries that relate this the CHPID or
#     Switch.
# 13. CHPID SWITCH PORT
# 14. DEVICE UA
# 15. DEVICE EXPLICIT SYSTEM
# 16. IODF NAME
# 17. PROCESSOR NAME
# 18. NUMBER OF DEVICES DEFINED IN SINGLE IODEVICE STATEMENT
# 19. DEVICE UNIT TYPE
#
##########################################################################################################



##########################################################################################################
##########################################################################################################
#                                   M A I N  C O D E  F O R  D I S P L A Y
##########################################################################################################
##########################################################################################################
$version = "1.1 (10th April 2006)";
print "Content-type: text/html\n\n";

##########################################################################################################
# First we display the main body of the page.
##########################################################################################################
print <<ENDHTML_S;
<HTML>
<HEAD>
<TITLE>$title IODFs & IOCPs - CTCs</TITLE>
<style>
.heading {
 font           : bold 24px Arial, Verdana;
 color          : white;
 height         : 26px;
 text-decoration: none;
 text-align     : left;
 filter         : progid:DXImageTransform.Microsoft.Gradient(GradientType=0,StartColorStr=#3970CA,EndColorStr=#254E8E)
}
.box {
 border-style   : solid;
 border-color   : black;
 border-width   : 1px;
}
.box_head_l {
 border-width   : 1px 0px 1px 1px;
 border-style   : solid;
 border-color   : black;
}
.box_head_r {
 border-width   : 1px 1px 1px 1px;
 border-style   : solid;
 border-color   : black;
}
.box_l {
 border-width   : 0px 0px 1px 1px;
 border-style   : solid;
 border-color   : black;
}
.box_r {
 border-width   : 0px 1px 1px 1px;
 border-style   : solid;
 border-color   : black;
}
.button_blue {
 font           : 11px Verdana;
 color          : black;
 text-decoration: none;
 width          : 100px;
 border         : solid 1px black;
 clear          : both;
 filter         : progid:DXImageTransform.Microsoft.Gradient(GradientType=0,StartColorStr=#FFFFFF,EndColorStr=#CDD9EF)
}
.button_high {
 font           : 11px Verdana;
 color          : black;
 text-decoration: none;
 width          : 100px;
 border         : solid 1px black;
 clear          : both;
 filter         : progid:DXImageTransform.Microsoft.Gradient(GradientType=0,StartColorStr=#FFFFFF,EndColorStr=#eeddaa)
}
.oth_heading {
 font           : bold 24px Arial, Verdana;
 color          : white;
 height         : 26px;
 text-decoration: none;
 border-color   : black;
 border-style   : solid;
 filter         : progid:DXImageTransform.Microsoft.Gradient(GradientType=0,StartColorStr=#990000,EndColorStr=#F0F0F0)
}
</style>
<META HTTP-EQUIV="Expires" CONTENT="-1">
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
</HEAD>

<BODY bgcolor="#F0F0F0" LINK="#330099" VLINK="#006600" leftmargin=0 topmargin=0 rightmargin=0 marginheight=0 marginwidth=0 bottommargin=0 onunload="Check_Logout();">
<TABLE align="center" WIDTH="100%" cellpadding=0 cellspacing=0>
<tr>
<td align="left" class="heading" style="font-family:arial,verdana; font-size:20px; color:#FFFFFF; line-height:30px">
&nbsp;&nbsp;<b>$title IODFs & IOCPs - CTCs</b>
</td>
</tr></table>

<TABLE align="center" WIDTH="90%" cellpadding=0 cellspacing=0><tr>
<td valign="top" align="left" style="font-family:arial,verdana; font-size:12px; color:#000000; line-height:14px">

ENDHTML_S

##########################################################################################################
# As we use the same script to process the data, we must first display a list of IODFs for the user to
# select.
##########################################################################################################

if($ENV{'REQUEST_METHOD'} ne 'POST') {

##########################################################################################################
# We do not have any parameters so we just display a list of the IODFs.
##########################################################################################################
   $iodf_list   = "";
   @iodf_pfiles = ( "" );
   $iodf_pfiles_c = 0;
   print "<BR>This program will check the CTC connections between the Source and Destination IODF/IOCPs. However each file must be created through the HCD dialog, option 2 (Activate) then option 10 (Build I/O configuration statements). <b>It must be created using the Production IODF.</b>";
   print "<BR><BR>The following IODFs have been found in <b>$data_directory</b> : <BR><BR>";

##########################################################################################################
# Read the directory, and get the information
##########################################################################################################
   opendir(DIR,$data_directory);
   @iodf_files = readdir(DIR);
   closedir(DIR);
   $removedot = shift(@iodf_files);
   $removedot = shift(@iodf_files);
   @iodf_files = sort(iodf_sort @iodf_files);
   foreach $iodf_files (@iodf_files) {
       if($iodf_files eq "." || $iodf_files eq "..") { next; }
       $data_filename = "$data_directory/$iodf_files";
       if(open(DATAFILE,"$data_filename")) {
          flock(DATAFILE,2);
          seek(DATAFILE,0,0);
          @iodf_data = <DATAFILE>;
          close(DATAFILE);
       } else {
          next;
       }
       if(scalar @iodf_data eq 1) {
          $tiodf_data_hcd = $iodf_dataÝ0¨;
          @iodf_data = unpack("A80" x (length($tiodf_data_hcd)/80),$tiodf_data_hcd);
       }
       if(index($iodf_dataÝ0¨,"TITLE '") eq -1) {
          $iodf_name = substr($iodf_dataÝ0¨,21,6);
          if(index($iodf_dataÝ2¨,"SCR=") ne -1) {
             $t_iodf    = index($iodf_dataÝ2¨,"SCR=");
             $iodf_proc = substr($iodf_dataÝ2¨,$t_iodf,12);
             $iodf_proc =~ s/SCR=//g;
          } else {
             $t_iodf_comma = index($iodf_dataÝ2¨,",");
             $iodf_proc = substr($iodf_dataÝ2¨,1,$t_iodf_comma-1);
             $iodf_proc =~ s/TOK=\(//g;
             $iodf_proc =~ s/\'//g;
          }
       } else {
          $iodf_title2 = trim($iodf_dataÝ2¨);
          $iodf_title2 =~ s/,/ /g;
          @iodf_title2_words = split(/ /,$iodf_title2);
          $iodf_proc = $iodf_title2_wordsÝ1¨;
          $iodf_proc =~ s/NAME=//;
          $iodf_name = substr(trim($iodf_dataÝ5¨),5,6);
       }
       $iodf_proc =~ s/ //g;
##########################################################################################################
# Insert the IODF and related data into an array
##########################################################################################################
       if(index($iodf_list,$iodf_name) eq -1) { $iodf_list .= "$iodf_name "; }
       $iodf_pfiles_c++;
       $iodf_pfilesÝ$iodf_pfiles_c¨ = "$iodf_name $iodf_proc $iodf_files";
       undef @iodf_data;
   }

##########################################################################################################
# Split the IODFs into an array, sort the data and count it
##########################################################################################################
   @iodf_file = split(/ /,$iodf_list);
   @iodf_file = sort(iodf_menu_sort @iodf_file);
   @iodf_pfiles = sort(iodf_menu_sort @iodf_pfiles);
   $iodf_menu_width = scalar @iodf_file;

##########################################################################################################
# Now step through the data and display the table
##########################################################################################################

   print "<form name=\"phase_one\" method=post action=\"$cgi_directory/$script_name\">";
   print "<TABLE align=\"center\" WIDTH=\"50%\" class=\"box\" cellpadding=0 cellspacing=0>";
   print "<tr><td valign=\"top\" colspan=2 width=\"10%\" align=\"center\" class=\"oth_heading\" style=\"border-width: 0px 1px 1px 0px; border-color: black; border-style: solid; font-family:arial,verdana; font-size:16px; line-height:18px\">Source IOCP</td>";
   print "<td valign=\"top\" colspan=2 width=\"10%\" align=\"center\" class=\"oth_heading\" style=\"border-width: 0px 0px 1px 0px; border-color: black; border-style: solid; font-family:arial,verdana; font-size:16px; line-height:18px\">Destination IOCP</td></tr>";

   print "<tr>";
   print "<td valign=\"top\" width=\"3%\" align=\"left\" style=\"font-family:arial,verdana; font-size:12px; color:#000000; line-height:16px\">&nbsp;</td>";
   print "<td valign=\"top\" width=\"10%\" align=\"left\" style=\"border-width: 0px 1px 0px 0px; border-color: black; border-style: solid; font-family:arial,verdana; font-size:12px; color:#000000; line-height:16px\"><BR>";
   $i = 0;
   foreach $iodf_pfiles (@iodf_pfiles) {
       @t_iodf_pfiles = split(/ /,$iodf_pfiles);
       if($t_iodf_pfilesÝ0¨ ne "") {
          $i++;
          $checked = "";
          if($i eq 1) { $checked = "checked"; }
          print "<input type=\"radio\" name=\"first_iodf\" $checked value=\"$t_iodf_pfilesÝ2¨\">$t_iodf_pfilesÝ0¨ on $t_iodf_pfilesÝ1¨</input><BR>";
       }
   }
   print "<BR></td>";
   print "<td valign=\"top\" width=\"3%\" align=\"left\" style=\"font-family:arial,verdana; font-size:12px; color:#000000; line-height:16px\">&nbsp;</td>";
   print "<td valign=\"top\" width=\"10%\" align=\"left\" style=\"font-family:arial,verdana; font-size:12px; color:#000000; line-height:16px\"><BR>";
   $i = 0;
   foreach $iodf_pfiles (@iodf_pfiles) {
       @t_iodf_pfiles = split(/ /,$iodf_pfiles);
       if($t_iodf_pfilesÝ0¨ ne "") {
          $i++;
          $checked = "";
          if($i eq 1) { $checked = "checked"; }
          print "<input type=\"radio\" name=\"second_iodf\" $checked value=\"$t_iodf_pfilesÝ2¨\">$t_iodf_pfilesÝ0¨ on $t_iodf_pfilesÝ1¨</input><BR>";
       }
   }
   print "<BR></td>";
   print "</tr>";
   print "<tr><td valign=\"top\" colspan=4 align=\"left\" style=\"font-family:arial,verdana; font-size:12px; color:#000000; line-height:16px\">";
   print "<input type=\"submit\" style=\"width:100%; font-family:arial,verdana; font-weight:bold; font-size:14px\" class=\"button_blue\" onmouseover=\"this.className='button_high'\" onmouseout=\"this.className='button_blue'\" name=\"Submit\" tabindex=\"5\" value=\"Check CTC Connections\">";
   print "</td></tr>";
   print "</table>";

   print "</form>";

##########################################################################################################
# Close tables and finish the display
##########################################################################################################
   print "</td></tr>";
   print "<tr><td valign=\"top\" align=\"left\" style=\"font-family:arial,verdana; font-size:12px; color:#000000; line-height:14px\">";
   print "<BR>&nbsp;&nbsp;Version: <b>$version</b>";
   print "<BR><BR>&nbsp;&nbsp;Need to check the IODF/IOCPs? <A HREF=\"$cgi_directory/iodf.cgi\"><SMALL>(click here)</SMALL></A>";
   print "<BR><hr size=1 width=\"100%\" color=black></td></tr></table><br><br></body><HEAD>";
   print "<META HTTP-EQUIV=\"Expires\" CONTENT=\"-1\"><META HTTP-EQUIV=\"Pragma\" CONTENT=\"no-cache\"></HEAD></html>";
   exit;

##########################################################################################################
# Otherwise we read the form data, get the IODF, process the data and display it.
# We join all lines that are 'continued' together.
##########################################################################################################
} else {

    read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});
    @pairs = split(/&/, $buffer);
    foreach $pair (@pairs) {
	  ($name, $value) = split(/=/, $pair);
        $value =~ tr/+/ /;
        $value =~ s/%28/%4D/g;
        $value =~ s/%29/%5D/g;
        $value =~ s/%2C/%6B/g;
        $value =~ s/%3A/%7A/g;
        $value =~ s/%3D/%7E/g;
        $value =~ s/%3F/%6F/g;
        $value =~ s/%0A//g;
        $value =~ s/%(Ýa-fA-F0-9¨Ýa-fA-F0-9¨)/pack("C", hex($1))/eg;
        $FORM{$name} = $value;
   }
   $iodf_to_checkÝ0¨ = $FORM{'first_iodf'};
   $iodf_to_checkÝ1¨ = $FORM{'second_iodf'};


##########################################################################################################
# Read and process the IODF, returning it in an array.
##########################################################################################################
   $kj = scalar @iodf_to_check;
   foreach $iodf_to_check (@iodf_to_check) {
       $iodf = $iodf_to_check;

##########################################################################################################
# Format the size of the array to three times the size of the IODEVICES. This allows multiple channels to
# be added which go to the same device. Each element defines the CHPID, CU to one device statement.
# Define the switch array.
##########################################################################################################
       $max_elements = 18;
       undef @IODF;
       $IODFÝ0¨   = Ý"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""¨;
       $IODF_count = 0;

       $data_filename = "$data_directory/$iodf";
       if(open(DATAFILE,"$data_filename")) {
          flock(DATAFILE,2);
          seek(DATAFILE,0,0);
          @tiodf_data = <DATAFILE>;
          close(DATAFILE);
          foreach $tiodf_data (@tiodf_data) {
              chomp($tiodf_data);
          }
       } else {
          display_error("Unable to open $data_filename for reading.");
          exit;
       }

       if(scalar @tiodf_data eq 1) {
          $tiodf_data_hcd = $tiodf_dataÝ0¨;
          @tiodf_data = unpack("A80" x (length($tiodf_data_hcd)/80),$tiodf_data_hcd);
       }
       @iodf_data = ("");
       $iodf_counter = -1;
       $temp_iodf = "";
       foreach $tiodf_data (@tiodf_data) {
           if(substr($tiodf_data,71,1) eq "*") {
              $t_iodf = trim(substr($tiodf_data,0,71));
              $temp_iodf .= $t_iodf;
           } else {
              $iodf_counter++;
              $tt_iodf = trim(substr($tiodf_data,0,71));
              $iodf_dataÝ$iodf_counter¨ .= $temp_iodf . $tt_iodf;
              $temp_iodf = "";
           }
       }

##########################################################################################################
# Go through the IODF and remove any commas before keywords which makes parsing easier later.
##########################################################################################################
       my @iodevices = ("");
       $ioddevice_count = -1;
       foreach $iodf_data (@iodf_data) {
           $tmp_iodf_data = $iodf_data;
           $found = 0;
           if(index($iodf_data,"CHPID") ne -1) {
              $tmp_iodf_data =~ s/,PATH/ PATH/ig;
              $tmp_iodf_data =~ s/,CPATH/ CPATH/ig;
              $tmp_iodf_data =~ s/,TYPE/ TYPE/ig;
              $tmp_iodf_data =~ s/,SHARED/ SHARED/ig;
              $tmp_iodf_data =~ s/,PARTITION/ PARTITION/ig;
              $tmp_iodf_data =~ s/,PCHID/ PCHID/ig;
              $tmp_iodf_data =~ s/,SWITCH/ SWITCH/ig;
              $tmp_iodf_data =~ s/,SWPORT/ SWPORT/ig;
              $tmp_iodf_data =~ s/,DESC/ DESC/ig;
              $tmp_iodf_data =~ s/,TPATH/ TPATH/ig;
              $found = 1;
           }
           if(index($iodf_data,"CNTLUNIT") ne -1 && index($tmp_iodf_data,"UNIT=SCTC") ne -1) {
              $found = 2;
              $tmp_iodf_data =~ s/,CUNUMBR/ CUNUMBR/ig;
              $tmp_iodf_data =~ s/,PATH/ PATH/ig;
              $tmp_iodf_data =~ s/,LINK/ LINK/ig;
              $tmp_iodf_data =~ s/,UNIT/ UNIT/ig;
              $tmp_iodf_data =~ s/,CUADD/ CUADD/ig;
              $tmp_iodf_data =~ s/,PROTOCL/ PROTOCL/ig;
              $tmp_iodf_data =~ s/,SHARED/ SHARED/ig;
              $tmp_iodf_data =~ s/,SWPORT/ SWPORT/ig;
              $tmp_iodf_data =~ s/,DESC/ DESC/ig;
           }
           if(index($iodf_data,"IODEVICE ADDRESS") ne -1 && (index($tmp_iodf_data,"UNIT=SCTC") ne -1 || index($tmp_iodf_data,"UNIT=BCTC") ne -1)) {
              $tmp_iodf_data =~ s/,CUNUMBR/ CUNUMBR/ig;
              $tmp_iodf_data =~ s/,STADET/ STADET/ig;
              $tmp_iodf_data =~ s/,UNIT/ UNIT/ig;
              $tmp_iodf_data =~ s/,PARTITION/ PARTITION/ig;
              $tmp_iodf_data =~ s/,TIMEOUT/ TIMEOUT/ig;
              $tmp_iodf_data =~ s/,MODEL/ MODEL/ig;
              $tmp_iodf_data =~ s/,DESC/ DESC/ig;
              $found = 3;
           }
           if($found ne 0) {
              $iodevice_count++;
              $iodevicesÝ$iodevice_count¨ = $tmp_iodf_data;
           }
       }

##########################################################################################################
# Parse the data and get the title of the IODF and the list of LPARs defined.
##########################################################################################################
       $iodf_title2 = "";
       foreach $iodf_data (@iodf_data) {
           if(index($iodf_data,"ID    MSG") ne -1) { $iodf_title = $iodf_data;  }
           if(index($iodf_data,"TITLE '") ne -1)   { $iodf_title = $iodf_data;  }
           if(index($iodf_data,"ID NAME") ne -1)   { $iodf_title2 = $iodf_data; }
           if(index($iodf_data,"RESOURCE") ne -1)  { $iodf_resource = $iodf_data; last; }
       }

##########################################################################################################
# This code handles the normal IOCP statements from a production IODF
##########################################################################################################
       $a = index($iodf_title,"MSG1");
       if($a ne -1) {
          $b = index($iodf_title,"SCR")-1;
          if($b eq -2) { $b = index($iodf_title,"TOK")-1; }
          $iodf_title2 = substr($iodf_title,$a,$b-$a);
          ($msg1,$msg2,$system) = split(/,/,$iodf_title2);
          $iodf_name = $msg1;
          $iodf_name =~ s/MSG1=//;
          $iodf_name =~ s/\'//g;
          $iodf_proc = substr($iodf_title,($b+1)+4,8);
          $iodf_proc =~ s/\(//g;
          $iodf_proc =~ s/\'//g;
       }

###########################################################################################################
# This code handles the IOCP statements from HCD dialog
##########################################################################################################
       $a = index($iodf_title2,"ID NAME");
       if($a ne -1) {
          $iodf_title2 =~ s/,/ /g;
          @iodf_title2_words = split(/ /,$iodf_title2);
          $iodf_proc = $iodf_title2_wordsÝ1¨;
          $iodf_proc =~ s/NAME=//;
          $iodf_name = trim(substr($iodf_title2,length($iodf_title2)-9,8));
       }

##########################################################################################################
# Now we parse the data
##########################################################################################################
##########################################################################################################
# We extract each IODEVICE from the IODF and extract the address. However we are only interested in BCTC
# and SCTC devices.
##########################################################################################################
       @iodevices = reverse @iodevices;
       for($k=0; $k<scalar @iodevices; $k++) {
           if($iodevicesÝ$k¨ eq "") { last; }
           if(index($iodevicesÝ$k¨,"IODEVICE ADDRESS") ne -1) {
              $device_css = "0";
              $device_num = "";
              $device_cu  = "";
              $device_attrs = "";
              $device_exp_sys = "";
              $device_unit_add = "";
              @temp_iod = split(/ /,$iodevicesÝ$k¨);
              $temp_iodÝ1¨ =~ s/ADDRESS=//g;
              $temp_iodÝ1¨ =~ s/\(//g;
              $temp_iodÝ1¨ =~ s/\)//g;

##########################################################################################################
# We extract the CU and the device attributes, chaining the latter together.
##########################################################################################################
              $device_num  = $temp_iodÝ1¨;
              foreach $temp_iod (@temp_iod) {
                  if(index($temp_iod,"CUNUMBR") ne -1) {
                     $temp_iod=~ s/CUNUMBR=//g;
                     $temp_iod=~ s/\,/ /g;
                     $temp_iod=~ s/\(//g;
                     $temp_iod=~ s/\)//g;
                     $device_cu = $temp_iod;
                  }
                  $found_attr = 0;
                  if(index($temp_iod,"PARTITION=") ne -1) {
                     $temp_iod =~ s/PARTITION=//g;
                     $temp_iod =~ s/\,/ /g;
                     $temp_iod =~ s/CSS\(0\)//g;
                     $temp_iod =~ s/CSS\(1\)//g;
                     $temp_iod =~ s/CSS\(2\)//g;
                     $temp_iod =~ s/CSS\(3\)//g;
                     $temp_iod =~ s/\(//g;
                     $temp_iod =~ s/\)//g;
                     $temp_iod =~ s/=//g;
                     $temp_iod = trim($temp_iod);
                     $device_exp_sys = $temp_iod;
                  }
                  if(index($temp_iod,"UNITADD=") ne -1)   {
                     $temp_iod =~ s/UNITADD=//g;
                     $device_unit_add = $temp_iod;
                  }
                  if(index($temp_iod,"UNIT=") ne -1)      {
                     $temp_iod =~ s/UNIT=//g;
                     $device_unit_type = $temp_iod;
                  }
                  if(index($temp_iod,"STADET=") ne -1)    { $found_attr = 1; }
                  if(index($temp_iod,"TIMEOUT=") ne -1)   { $found_attr = 1; }
                  if(index($temp_iod,"MODEL=") ne -1)     { $found_attr = 1; }
                  if($found_attr eq 1) {
                     if(length($device_attrs) ne 0) { $device_attrs .= ","; }
                     $device_attrs .= $temp_iod;
                  }
              }
##########################################################################################################
# Now we assign to the array.
# $IODFÝ$IODF_count¨Ý9¨  = device;
# $IODFÝ$IODF_count¨Ý10¨ = device attributes;
# $IODFÝ$IODF_count¨Ý4¨  = control unit;
#
# We also blank out the IODEVICE we have processed.
##########################################################################################################
              $loop_devices = 1;
              if(index($device_num,",") ne -1) {
                 $device_num =~ s/,/ /;
                 ($device_numa,$loop_devices) = split(/ /,$device_num);
                 $device_num = $device_numa;
              }
              $IODFÝ$IODF_count¨Ý9¨  = sprintf("%04s",$device_num);
              $IODFÝ$IODF_count¨Ý10¨ = $device_attrs;
              $IODFÝ$IODF_count¨Ý4¨  = $device_cu;
              $IODFÝ$IODF_count¨Ý15¨ = $device_exp_sys;
              $IODFÝ$IODF_count¨Ý14¨ = $device_unit_add;
              $IODFÝ$IODF_count¨Ý16¨ = $iodf_name;
              $IODFÝ$IODF_count¨Ý17¨ = $iodf_proc;
              $IODFÝ$IODF_count¨Ý18¨ = $loop_devices;
              $IODFÝ$IODF_count¨Ý19¨ = $device_unit_type;
              $IODF_count++;
              $iodevicesÝ$k¨ = "EMPTY";
##########################################################################################################
# Expand the number of devices into a full list
##########################################################################################################
#              if(index($device_num,",") ne -1) {
#                 $device_num =~ s/,/ /;
#                 ($device_numa,$loop_devices) = split(/ /,$device_num);
#                 $a = $IODF_count - 1;
#                 $IODFÝ$a¨Ý9¨ = sprintf("%04s",$device_numa);
#                 $dec_device_num = hex $device_numa;
#                 $dec_device_ua = hex $device_unit_add;
#                 for($i=1; $i<int($loop_devices); $i++) {
#                     $IODFÝ$IODF_count¨Ý9¨  = sprintf("%04X",$dec_device_num + $i);
#                     $IODFÝ$IODF_count¨Ý10¨ = $device_attrs;
#                     $IODFÝ$IODF_count¨Ý4¨  = $device_cu;
#                     $IODFÝ$IODF_count¨Ý15¨ = $device_exp_sys;
#                     $IODFÝ$IODF_count¨Ý16¨ = $iodf_name;
#                     $IODFÝ$IODF_count¨Ý17¨ = $iodf_proc;
#                     if($device_unit_add ne "") {
#                        $IODFÝ$IODF_count¨Ý14¨  = sprintf("%02X",$dec_device_ua + $i);
#                     }
#                     $IODF_count++;
#                 }
#              }
           }

##########################################################################################################
# Now we process the CONTROL UNITS
##########################################################################################################
           if(index($iodevicesÝ$k¨,"CNTLUNIT") ne -1) {
              $cu_num = "";
              $cu_cua = "";
              $cu_unit= "";
              $cu_link= "";
              $cu_ua  = "";
              $cu_path= "";
              @temp_cu = split(/ /,$iodevicesÝ$k¨);
##########################################################################################################
# We extract the CU, the PATH and other attributes.
##########################################################################################################
              $cu_num  = $temp_cuÝ1¨;
              $cu_num  =~ s/CUNUMBR=//g;
              $temp_cuÝ2¨ =~ s/PATH=//g;
              if(index($temp_cuÝ2¨,"CSS") ne -1) {
                 @css_path = split(/\),\(/,$temp_cuÝ2¨);
                 foreach $css_path (@css_path) {
                     $css_path =~ s/\)/ /g;
                     $css_path =~ s/\(//g;
                     $css_path =~ s/\,/ /g;
                     @t_css_path = split(/ /,$css_path);
                     $t_css_pathÝ0¨ =~ s/CSS//;
                     for($a=1; $a<scalar @t_css_path; $a++) {
                         if($t_css_pathÝ$a¨ eq "") { next; }
                         $cu_path .= $t_css_pathÝ0¨ . ":" . $t_css_pathÝ$a¨ . " ";
                     }
                 }
              } else {
                 $cu_path = $temp_cuÝ2¨;
                 $cu_path =~ s/\,/ /g;
                 $cu_path =~ s/\(//g;
                 $cu_path =~ s/\)//g;
              }
              foreach $temp_cu (@temp_cu) {
                  if(index($temp_cu,"UNIT=") ne -1)    { $temp_cu =~ s/UNIT=//g; $cu_unit = $temp_cu; }
                  if(index($temp_cu,"UNITADD=") ne -1) { $temp_cu =~ s/UNITADD=//g; $temp_cu =~ s/\(//g; $temp_cu =~ s/\)//g; $cu_ua = $temp_cu; }
                  if(index($temp_cu,"CUADD=") ne -1)   { $temp_cu =~ s/CUADD=//g; $cu_cua = $temp_cu; }
                  if(index($temp_cu,"LINK=") ne -1)    {
                     $temp_cu =~ s/LINK=//g;
                     if(index($temp_cu,"CSS") ne -1) {
                        @css_link = split(/\),\(/,$temp_cu);
                        foreach $css_link (@css_link) {
                            $css_link =~ s/\)/ /g;
                            $css_link =~ s/\(//g;
                            $css_link =~ s/\,/ /g;
                            @t_css_link = split(/ /,$css_link);
                            $t_css_linkÝ0¨ =~ s/CSS//;
                            for($a=1; $a<scalar @t_css_link; $a++) {
                                if($t_css_linkÝ$a¨ eq "") { next; }
                                $cu_link .= $t_css_linkÝ0¨ . ":" . $t_css_linkÝ$a¨ . " ";
                            }
                        }
                     } else {
                        $temp_cu =~ s/\(//g;
                        $temp_cu =~ s/\)//g;
                        $temp_cu =~ s/\,/ /g;
                        $cu_link = $temp_cu;
                     }
                  }
              }
##########################################################################################################
# We now traverse the main array and insert the CU attributes into the array if the device's CU matches
# ours. Since we perform additional function later, we ignore any that have already been processed.
#
# We also blank out the CU we have processed.
# If we find that there are multiple paths to the CU, we now traverse the array and insert the current
# device and CU in another element with the next path.
##########################################################################################################
              for($a=0; $a<$IODF_count; $a++) {
                  if($IODFÝ$a¨Ý9¨ eq "") { last; }
                  if($IODFÝ$a¨Ý4¨ eq $cu_num && $IODFÝ$a¨Ý11¨ ne "DUP") {
                     $IODFÝ$a¨Ý5¨ = $cu_cua;
                     $IODFÝ$a¨Ý6¨ = $cu_unit;
                     $IODFÝ$a¨Ý8¨ = $cu_ua;
                     undef @temp_paths, @temp_links;
                     @temp_paths = split(/ /,$cu_path);
                     $IODFÝ$a¨Ý0¨ = $temp_pathsÝ0¨;
                     @temp_links = split(/ /,$cu_link);
                     $IODFÝ$a¨Ý7¨ = $temp_linksÝ0¨;
                     $iodevicesÝ$k¨ = "EMPTY";
                     $len_path = scalar @temp_paths;
                     if($len_path > 1) {
                        for($pt=1; $pt<$len_path; $pt++) {
                            $IODFÝ$IODF_count¨Ý9¨ = $IODFÝ$a¨Ý9¨;
                            $IODFÝ$IODF_count¨Ý10¨= $IODFÝ$a¨Ý10¨;
                            $IODFÝ$IODF_count¨Ý4¨ = $IODFÝ$a¨Ý4¨;
                            $IODFÝ$IODF_count¨Ý5¨ = $IODFÝ$a¨Ý5¨;
                            $IODFÝ$IODF_count¨Ý6¨ = $IODFÝ$a¨Ý6¨;
                            $IODFÝ$IODF_count¨Ý7¨ = $temp_linksÝ$pt¨;
                            $IODFÝ$IODF_count¨Ý8¨ = $IODFÝ$a¨Ý8¨;
                            $IODFÝ$IODF_count¨Ý0¨ = $temp_pathsÝ$pt¨;
                            $IODFÝ$IODF_count¨Ý11¨= "DUP";
                            $IODF_count++;
                        }
                     }
                  }
              }
           }

##########################################################################################################
# Now we process the CHPIDS
##########################################################################################################
           if(index($iodevicesÝ$k¨,"CHPID") ne -1) {
              $chp_num = "";
              $chp_sys = "";
              $chp_type= "";
              $chp_sw  = "";
              $chp_port  = "";
              @temp_chp = split(/ /,$iodevicesÝ$k¨);
              $chp_num  = $temp_chpÝ1¨;
              $chp_num =~ s/PATH=//g;
              $chp_num  =~ s/\(//g;
              $chp_num  =~ s/\)//g;
##########################################################################################################
# We get the type, switch and partition data for the CHPID.
##########################################################################################################
              foreach $temp_chp (@temp_chp) {
                  if(index($temp_chp,"TYPE=") ne -1)     { $temp_chp =~ s/TYPE=//g;   $chp_type = $temp_chp; }
                  if(index($temp_chp,"SWITCH=") ne -1)   { $temp_chp =~ s/SWITCH=//g; $chp_sw = $temp_chp;   }
                  if(index($temp_chp,"PARTITION=") ne -1) {
                     $temp_chp =~ s/PARTITION=//g;
                     $temp_chp =~ s/\,/ /g;
                     $temp_chp =~ s/\(//g;
                     $temp_chp =~ s/\)//g;
                     $temp_chp =~ s/=//g;
                     $chp_sys = $temp_chp;
                  }
                  if(index($temp_chp,"SWPORT=") ne -1) {
                     $temp_chp =~ s/SWPORT=//g;
                     $temp_chp =~ s/\,/ /g;
                     $temp_chp =~ s/\(//g;
                     $temp_chp =~ s/\)//g;
                     ($temp_sw,$chp_port) = split(/ /,$temp_chp);
                  }
              }

##########################################################################################################
# We now search the array and insert the data for the named CHPID.
##########################################################################################################
              for($a=0; $a<$IODF_count; $a++) {
                  if($IODFÝ$a¨Ý9¨ eq "") { next; }
                  if(index($chp_num,"CSS") eq -1) {
                     if($chp_num eq $IODFÝ$a¨Ý0¨) {
                        $IODFÝ$a¨Ý1¨ = $chp_sys;
                        $IODFÝ$a¨Ý2¨ = $chp_type;
                        $IODFÝ$a¨Ý3¨ = $chp_sw;
                        $IODFÝ$a¨Ý13¨ = $chp_port;
                        if($IODFÝ$a¨Ý15¨ eq "") { $IODFÝ$a¨Ý15¨ = $chp_sys; }
                        $iodevicesÝ$k¨ = "EMPTY";
                     }
                  } else {
                     $chan_num = substr($chp_num,length($chp_num)-2,2);
                     $chp_num  = substr($chp_num,0,length($chp_num)-2);
                     $chp_num  =~ s/ //g;
                     $chp_num  =~ s/,/ /g;
                     $chp_num  =~ s/CSS//g;
                     @css_words = split(/ /,$chp_num);
                     foreach $css_words (@css_words) {
                         $new_css_chp = $css_words . ":" . $chan_num;
                         for($b=0; $b<$IODF_count; $b++) {
                             if($IODFÝ$b¨Ý9¨ eq "") { last; }
                             if($new_css_chp eq $IODFÝ$b¨Ý0¨) {
                                $IODFÝ$b¨Ý1¨ = $chp_sys;
                                $IODFÝ$b¨Ý2¨ = $chp_type;
                                $IODFÝ$b¨Ý3¨ = $chp_sw;
                                $IODFÝ$b¨Ý13¨ = $chp_port;
                                if($IODFÝ$b¨Ý15¨ eq "") { $IODFÝ$b¨Ý15¨ = $chp_sys; }
                                $iodevicesÝ$k¨ = "EMPTY";
                             }
                         }
                     }
                  }
              }
##########################################################################################################
           }
       }

##########################################################################################################
# Now we adjust the size of the array, and sort it in CHPID order.
##########################################################################################################
      $#IODF = $IODF_count - 1;
      $a = scalar @IODF;
      @IODF = sort(iodf_sort_cua @IODF);

##########################################################################################################
# With the list sorted, we now parse the list and insert the device UA, but only if they haven't already
# been filled. We adjust the UA as we do not expand the list of devices to include all of them.
##########################################################################################################
      $prev_cu = "";
      for($m=0; $m<$IODF_count; $m++) {
          if($IODFÝ$m¨Ý9¨ eq "") { last; }
          if($IODFÝ$m¨Ý4¨ ne $prev_cu) {
             $prev_cu = $IODFÝ$m¨Ý4¨;
             ($new_cu_ua = $IODFÝ$m¨Ý8¨) =~ s/,/ /;
             ($cu_numa,$loop_cu) = split(/ /,$new_cu_ua);
             $dec_cu_num = hex $cu_numa;
             $incr = 0;
             $i = 0;
             while ($IODFÝ$m+$incr¨ eq $prev_cu) {
                 if($IODFÝ$m+$incr¨Ý14¨ eq "") {
                    $IODFÝ$m+$incr¨Ý14¨  = sprintf("%02X",$dec_cu_num + $i);
                 }
                 $i = $i + ($IODFÝ$m+$incr¨Ý18¨ - 1);
                 $incr++;
             }
          }
      }

##########################################################################################################
# We now finished processing the IODF/IOCP and so we copy across to the respective arrays.
##########################################################################################################
      if($iodf eq $FORM{'first_iodf'}) {
         $iodf = $second_iodf;
         $FI_IODF_count = $IODF_count;
         @FI_IODF = splice(@IODF,0,$IODF_count);
      }
      if($iodf eq $FORM{'second_iodf'}) {
         $SI_IODF_count = $IODF_count;
         @SI_IODF = splice(@IODF,0,$IODF_count);
      }
   }

##########################################################################################################
# Output the information
##########################################################################################################
#   for($k=0; $k<$FI_IODF_count; $k++) {
#       print "($k) $FI_IODFÝ$k¨Ý16¨ >>$FI_IODFÝ$k¨Ý9¨ (CU $FI_IODFÝ$k¨Ý4¨, SW=$FI_IODFÝ$k¨Ý3¨, OUT_PORT=$FI_IODFÝ$k¨Ý13¨, IN_PORT=$FI_IODFÝ$k¨Ý7¨, CUA=$FI_IODFÝ$k¨Ý5¨, UA=$FI_IODFÝ$k¨Ý8¨) ------------->> UA=$FI_IODFÝ$k¨Ý14¨, DES=$FI_IODFÝ$k¨Ý15¨<< <BR>\n";
#   }
#   print "<BR><BR><BR>";
#   for($k=0; $k<$SI_IODF_count; $k++) {
#       print "($k) $SI_IODFÝ$k¨Ý16¨ >>$SI_IODFÝ$k¨Ý9¨ (CU $SI_IODFÝ$k¨Ý4¨, SW=$SI_IODFÝ$k¨Ý3¨, OUT_PORT=$SI_IODFÝ$k¨Ý13¨, IN_PORT=$SI_IODFÝ$k¨Ý7¨, CUA=$SI_IODFÝ$k¨Ý5¨, UA=$SI_IODFÝ$k¨Ý8¨) ------------->> UA=$SI_IODFÝ$k¨Ý14¨, DES=$SI_IODFÝ$k¨Ý15¨<< <BR>\n";
#   }

##########################################################################################################
# Check that the IODF/IOCP contain the necessary SWPORT information.
##########################################################################################################
    if($FI_IODFÝ0¨Ý13¨ eq "") {
       display_error("ERROR: SOURCE IODF $FI_IODFÝ0¨Ý16¨ does not contain SWPORT information.");
       exit;
    }
    if($SI_IODFÝ0¨Ý13¨ eq "") {
       display_error("ERROR: DESTINATION IODF $SI_IODFÝ0¨Ý16¨ does not contain SWPORT information.");
       exit;
    }

##########################################################################################################
# Now we display the table headings
##########################################################################################################
   print "<BR><BR><TABLE align=\"center\" class=\"box\" WIDTH=\"100%\" cellpadding=0 cellspacing=0>\n";
   print "<tr><td align=\"center\" bgcolor=\"#444444\" style=\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\">$FI_IODFÝ0¨Ý16¨ ($FI_IODFÝ0¨Ý17¨)&nbsp;&nbsp; => CTC Connections <= &nbsp;&nbsp;$SI_IODFÝ0¨Ý16¨ ($SI_IODFÝ0¨Ý17¨)</td></tr></table>\n";
   print "<BR>\n";
   print "<TABLE align=\"center\" WIDTH=\"100%\" cellpadding=2 cellspacing=0>\n";
   print "<tr>\n";
   print "<td align=\"center\" width=\"4%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Proc</td>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">System</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Device</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">CHP</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Type</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Switch</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#009900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Entry<BR>Port</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#009900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">CU</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#009900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">CU<BR>LA</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#009900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">CUA</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#009900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Rng</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#000099\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">UA</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#FFFFFF\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">Conn</td>\n";
   print "<td align=\"center\" width=\"4%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Proc</td>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">System</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Device</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">CHP</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Type</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Switch</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#009900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Entry<BR>Port</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#009900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">CU</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#009900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">CU<BR>LA</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_r\" bgcolor=\"#009900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">CUA</td>\n";
   print "</tr>\n";

##########################################################################################################
# Now we match the Source and the Destination IOCPs and check for the CTC connections.
##########################################################################################################
   for($k=0; $k<$FI_IODF_count; $k++) {
       if($FI_IODFÝ$k¨Ý5¨ eq "") { $FI_IODFÝ$k¨Ý5¨ = "&nbsp;"; }
       print "<tr>\n";
       print "<td align=\"center\" width=\"4%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$FI_IODFÝ$k¨Ý17¨</td>\n";
       print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$FI_IODFÝ$k¨Ý15¨</td>\n";
       print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$FI_IODFÝ$k¨Ý9¨</td>\n";
       print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$FI_IODFÝ$k¨Ý0¨</td>\n";
       print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$FI_IODFÝ$k¨Ý2¨</td>\n";
       print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$FI_IODFÝ$k¨Ý3¨</td>\n";
       print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$FI_IODFÝ$k¨Ý13¨</td>\n";
       print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$FI_IODFÝ$k¨Ý4¨</td>\n";
       print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$FI_IODFÝ$k¨Ý7¨</td>\n";
       print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$FI_IODFÝ$k¨Ý5¨</td>\n";
       print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$FI_IODFÝ$k¨Ý18¨</td>\n";
       print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$FI_IODFÝ$k¨Ý14¨</td>\n";

       @found = grep { $_->Ý3¨ eq $FI_IODFÝ$k¨Ý3¨ &&
#                       $_->Ý7¨ eq $FI_IODFÝ$k¨Ý13¨ &&
                       index(substr($_->Ý7¨,length($_->Ý7¨)-2,2),substr($FI_IODFÝ$k¨Ý13¨,length($FI_IODFÝ$k¨Ý13¨)-2,2)) ne -1 &&
                       index(substr($FI_IODFÝ$k¨Ý7¨,length($FI_IODFÝ$k¨Ý7¨)-2,2),substr($_->Ý13¨,length($_->Ý13¨)-2,2)) ne -1 &&
                       $_->Ý14¨ eq $FI_IODFÝ$k¨Ý14¨ }
                       @SI_IODF ;
       $conn_state = "";
       $a = "";
       $b = "";
       $c = "";
       $d = "";
       $e = "";
       $f = "";
       $g = "";
       $h = "";
       $i = "";
       $j = "";
       if(scalar @found > 0) {
          foreach $found (@found) {
              $a = $found->Ý17¨ . "<BR>";
              $b = $found->Ý15¨ . "<BR>";
              $c = $found->Ý9¨ . "<BR>";
              $d = $found->Ý0¨ . "<BR>";
              $e = $found->Ý2¨ . "<BR>";
              $f = $found->Ý3¨ . "<BR>";
              $g = $found->Ý13¨ . "<BR>";
              $h = $found->Ý4¨ . "<BR>";
              $i = $found->Ý7¨ . "<BR>";
              $j = $found->Ý5¨ . "<BR>";
              $match = 0;
              if($found->Ý19¨ eq "BCTC" && $FI_IODFÝ$k¨Ý19¨ eq "BCTC") { $match++; }
              if($found->Ý19¨ eq "SCTC" && $FI_IODFÝ$k¨Ý19¨ eq "SCTC") { $match++; }
              if($found->Ý2¨ eq "CTC" && $FI_IODFÝ$k¨Ý2¨ eq "CNC")    { $match++; }
              if($found->Ý2¨ eq "CNC" && $FI_IODFÝ$k¨Ý2¨ eq "CTC")    { $match++; }
              if($match > 1) {
                 $conn_state .= "<b>Yes</b><BR>";
              }
          }
       }
       if(length($conn_state) eq 0) { $conn_state = "&nbsp;"; }
       if(length($a) eq 0) { $a = "&nbsp;"; }
       if(length($b) eq 0) { $b = "&nbsp;"; }
       if(length($c) eq 0) { $c = "&nbsp;"; }
       if(length($d) eq 0) { $d = "&nbsp;"; }
       if(length($e) eq 0) { $e = "&nbsp;"; }
       if(length($f) eq 0) { $f = "&nbsp;"; }
       if(length($g) eq 0) { $g = "&nbsp;"; }
       if(length($h) eq 0) { $h = "&nbsp;"; }
       if(length($i) eq 0) { $i = "&nbsp;"; }
       if(length($j) eq 0) { $j = "&nbsp;"; }
       print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" bgcolor=\"#aaaaaa\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$conn_state</td>\n";
       print "<td align=\"center\" width=\"4%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$a</td>\n";
       print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$b</td>\n";
       print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$c</td>\n";
       print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$d</td>\n";
       print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$e</td>\n";
       print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$f</td>\n";
       print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$g</td>\n";
       print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$h</td>\n";
       print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$i</td>\n";
       print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_r\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$j</td>\n";
       print "</tr>";
       undef @found;
   }
   print "</table><BR><BR>";

##########################################################################################################
# Now finish the display
##########################################################################################################
}
print <<ENDHTML_E;
<BR><BR>
<hr size=1 width="100%" color=black>
<small>End</small><BR>
</td></tr></table>
<br><br>
</body>
<HEAD>
<META HTTP-EQUIV="Expires" CONTENT="-1">
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
</HEAD>
</html>
ENDHTML_E

exit;



##########################################################################################################
# Routines
##########################################################################################################

##########################################################################################################
# Sort IODFs into numeric order
##########################################################################################################
sub iodf_sort {
    ($aa,$a1) = split(/\./,$a);
    ($bb,$b1) = split(/\./,$b);
    $aa = lc $aa;
    $bb = lc $bb;
    $aa =~ s/iodf//g;
    $bb =~ s/iodf//g;
    return int($aa) <=> int($bb);
}

##########################################################################################################
# Display an error
##########################################################################################################
sub display_error {
    print "<BR><BR><TABLE align=\"center\" class=\"box\" WIDTH=\"70%\" cellpadding=0 cellspacing=0>";
    print "<tr><td align=\"left\" class=\"err_heading\" style=\"font-family:arial,verdana; font-size:20px; color:#FFFFFF; line-height:30px\">&nbsp;&nbsp;<b>ERROR:</b></td></tr>";
    print "<tr><td align=\"left\" style=\"font-family:arial,verdana; font-size:14px; color:black; font-weight:bold; line-height:16px\"><BR><BR>&nbsp;&nbsp;$_Ý0¨<BR><BR></td></tr>";
    print "<tr><td align=\"left\" style=\"font-family:arial,verdana; font-size:14px; color:black; line-height:16px\">&nbsp;&nbsp;<A HREF=\"$cgi_directory/$script_name\">Back To IODF Menu</A><BR><BR></td></tr>";
    print "</table>";

}

##########################################################################################################
# Remove leading and trailing blanks
##########################################################################################################
sub trim {
    my $str = $_Ý0¨;
    $str =~ s/¬ *//;
    $str =~ s/ *$//;
    return $str;
}

##########################################################################################################
# Sort IODF array on DEVICE and CU.
##########################################################################################################
sub iodf_sort_cua {
    $p1 = $a->Ý15¨ <=> $b->Ý15¨;
    $p2 = hex $a->Ý9¨ <=> hex $b->Ý9¨;
    $p3 = hex $a->Ý4¨ <=> hex $b->Ý4¨;
    if($p1 ne 0) { return $p1; }
    if($p2 ne 0) { return $p2; }
    if($p3 ne 0) { return $p3; }
    return 0;
}

##########################################################################################################
# IODF Menu sort
##########################################################################################################
sub iodf_menu_sort {
    return $a cmp $b;
}

##########################################################################################################
#                                             END of program and routines
##########################################################################################################
