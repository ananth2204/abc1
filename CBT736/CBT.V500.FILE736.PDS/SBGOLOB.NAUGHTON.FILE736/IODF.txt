#!/usr/local/bin/perl
##########################################################################################################
#
# I O D F . C G I
# --------------------------------------------------------------------------------------------------------
# HTML, PERL/CGI scripts written by Mark Naughton in November 2005.
#
# Any questions, contact me at: mark@blue-shantung.co.uk
#
# --------------------------------------------------------------------------------------------------------
# Version  Date        Inits  Change
# -------  ----------  -----  ----------------------------------------------------------------------------
# 1.0      15/11/2005  MDN    Initial release of script.
# 1.1      18/11/2005  MDN    Added comments and added code to change status bar to indicate what processing
#                             is happening.
# 1.2      22/11/2005  MDN    Added code to display switch connections per processor. As the HCD job writes
#                             to the USS file, the file does not become separated by newlines so added code
#                             to split the IODF when it is read for the menu and for processing.
# 1.3      16/12/2005  MDN    Added code to create drop-down list of devices to enable easier viewing of
#                             specific devices.
#          19/12/2005  MDN    Fixed problem with IOCPs containing TOK instead of SCR. Fixed problem with
#                             counting of CHPs, CUs and devices. Reworked menu. Now adds CU units to the
#                             drop-down list. Multiple paths use multiple links so we now split the
#                             multi-links to their correct path. Removed CU units from drop-down list.
# 1.4      13/01/2006  MDN    Changed display of matrix to make the lines smaller. Now working to support
#                             CSS, MAXDEV and PCHID....
#          16/01/2006  MDN    Changed CHP code to add PCHID to the structure. Changed CU and IODEVICE
#                             parse code to read until the end of the data as new IOCPs now include
#                             IODEVICE under the CU instead of grouping them together.
#          17/01/2006  MDN    Fixed code so that CSS, CU PATH and LINK work together. PARTITION for
#                             IODEVICES is now translated into SYS=. Added support for CPATH. Updated
#                             Unused CHPIDS to display more information. Added support to display switch
#                             information for a selected IODEVICE unit type by associating CU types with
#                             the unit.
# 1.5      15/03/2006  MDN    Added display for sorted Physical Channel IDs.
#          04/04/2006  MDN    Now supports "Build IOCP Statements" from HCD dialog. Added drop-down menu
#                             for systems.
# 1.6      15/04/2006  MDN    Now supports TPATH in the CHPID statement.
#
##########################################################################################################
# COPYRIGHT NOTICE
##########################################################################################################
# This program remains the copyright of Mark Naughton and British Airways. Unlimited copying and use of
# this material is allowed, however it must not be sold for commercial reasons. A reasonable fee for a CD
# or DVD containing this program may be charged. This program works-as-is and we hold no responsibility if
# the program does not do what it says, or causes any mayhem in your system.
#
##########################################################################################################

##########################################################################################################
# ONLY CHANGE THESE USER PARAMETERS
##########################################################################################################
$data_directory = "/S2/BA/mvsweb/data/iodf";
$cgi_directory  = "/cgi-bin";
$script_name    = "iodf.cgi";
$title          = "British Airways Infrastructure Software:";

%device_sw_list = (
                    "3278", "3174",
                    "3279", "3174",
                    "3390", "3990",
                    "3490", "3490 9490 9840" ,
                    "3590", "9840"
                  );

##########################################################################################################
# END OF USER PARAMETERS
##########################################################################################################

##########################################################################################################
# INSTALLATION
#
# 1. Update the 1st line to point to your PERL interpreter.
# 2. Copy this script into a directory - making sure you update the cgi_directory variable above.
# 3. Copy the IOCPs/IODFs (as text files) into the directory you have specified in data_directory. We use
#    the naming convention of IODFxx.PROC where xx is the two digit ID of the IODF.
# 4. Update the title variable above.
# 5. Update the device_sw_list above to display CU types for certain IODEVICE unit types.
# 6. Then try it through your browser! Currently the Cascading Style Sheet uses IE-specific options.
#
#
# NOTES
#
# 1. This script was written based on pre-z/Series IOCPs so the parsing of the IOCP is sequential as in
#    all IODEVICES are processed, then the CUs and then the CHPs. As our site does not have more than
#    1 x CSS, it is not known if this will cause a problem - please send me an email if it doesn't and
#    we'll get it fixed.
#
##########################################################################################################


##########################################################################################################
# ARRAY STRUCTURE:
#
#  0. (Channel SubSystem) CSS:CHPID
#  1. SYSTEM
#  2. TYPE
#  3. SWITCH
#  4. CONTROL UNIT
#  5. CONTROL UNIT ADDRESS
#  6. UNIT
#  7. LINK
#  8. UNIT ADDRESS
#  9. DEVICE
# 10. DEVICE ATTRIBUTES
# 11. Blank or DUP - specifies that this entry has been duplicated from within the data - for example as
#     in splitting the paths to a CU.
# 12. Number - specifies the number of following (and including) entries that relate this the CHPID or
#     Switch.
# 13. PCHID
# 14. Miscellaneous CHPID Information
#
##########################################################################################################



##########################################################################################################
##########################################################################################################
#                                   M A I N  C O D E  F O R  D I S P L A Y
##########################################################################################################
##########################################################################################################
$version = "1.6 (15th April 2006)";
print "Content-type: text/html\n\n";

##########################################################################################################
# First, we retrieve the userid from the command line of the script call. Then we print the Content-type
# so we can start displaying HTML code.
##########################################################################################################
$parameter_line = $ENV{'QUERY_STRING'};
($parm1,$parm2,$parm3) = split(/&/,$parameter_line);
($name,$iodf) = split(/=/,$parm1);
$iodf =~ s/ //g;
($name,$url_system) = split(/=/,$parm2);
$url_system =~ s/ //g;
if($url_system eq "") { $url_system = "ALL"; }

($name2,$url_device_type) = split(/=/,$parm3);
if($url_device_type eq "") { $url_device_type = "ALL"; }

##########################################################################################################
# First we display the main body of the page.
##########################################################################################################
print <<ENDHTML_S;
<HTML>

<HEAD>
<TITLE>$title IODFs & IOCPs</TITLE>
<style>
.heading {
 font           : bold 24px Arial, Verdana;
 color          : white;
 height         : 26px;
 text-decoration: none;
 text-align     : left;
 filter         : progid:DXImageTransform.Microsoft.Gradient(GradientType=0,StartColorStr=#3970CA,EndColorStr=#254E8E)
}
.box {
 border-style   : solid;
 border-color   : black;
 border-width   : 1px;
}
.box_head_l {
 border-width   : 1px 0px 1px 1px;
 border-style   : solid;
 border-color   : black;
}
.box_head_r {
 border-width   : 1px 1px 1px 1px;
 border-style   : solid;
 border-color   : black;
}
.box_l {
 border-width   : 0px 0px 1px 1px;
 border-style   : solid;
 border-color   : black;
}
.box_r {
 border-width   : 0px 1px 1px 1px;
 border-style   : solid;
 border-color   : black;
}
.button_blue {
 font           : 11px Verdana;
 color          : black;
 text-decoration: none;
 width          : 100px;
 border         : solid 1px black;
 clear          : both;
 filter         : progid:DXImageTransform.Microsoft.Gradient(GradientType=0,StartColorStr=#FFFFFF,EndColorStr=#CDD9EF)
}
.button_high {
 font           : 11px Verdana;
 color          : black;
 text-decoration: none;
 width          : 100px;
 border         : solid 1px black;
 clear          : both;
 filter         : progid:DXImageTransform.Microsoft.Gradient(GradientType=0,StartColorStr=#FFFFFF,EndColorStr=#eeddaa)
}
.oth_heading {
 font           : bold 24px Arial, Verdana;
 color          : white;
 height         : 26px;
 text-decoration: none;
 border-color   : black;
 border-style   : solid;
 filter         : progid:DXImageTransform.Microsoft.Gradient(GradientType=0,StartColorStr=#990000,EndColorStr=#F0F0F0)
}
</style>
<META HTTP-EQUIV="Expires" CONTENT="-1">
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
</HEAD>

<BODY bgcolor="#F0F0F0" LINK="#330099" VLINK="#006600" leftmargin=0 topmargin=0 rightmargin=0 marginheight=0 marginwidth=0 bottommargin=0 onunload="Check_Logout();">
<TABLE align="center" WIDTH="100%" cellpadding=0 cellspacing=0>
<tr>
<td align="left" class="heading" style="font-family:arial,verdana; font-size:20px; color:#FFFFFF; line-height:30px">
&nbsp;&nbsp;<b>$title IODFs & IOCPs</b>
</td>
</tr></table>

<TABLE align="center" WIDTH="90%" cellpadding=0 cellspacing=0><tr>
<td valign="top" align="left" style="font-family:arial,verdana; font-size:12px; color:#000000; line-height:14px">

ENDHTML_S

##########################################################################################################
# We do not have any parameters so we just display a list of the IODFs.
##########################################################################################################
if($iodf eq "") {
   $iodf_list   = "";
   @iodf_pfiles = ( "" );
   $iodf_pfiles_c = 0;

   print "<BR><BR><BR>The following IODFs have been found in <b>$data_directory</b> : <BR><BR>";

##########################################################################################################
# Read the directory, and get the information
##########################################################################################################
   opendir(DIR,$data_directory);
   @iodf_files = readdir(DIR);
   closedir(DIR);
   $removedot = shift(@iodf_files);
   $removedot = shift(@iodf_files);
   @iodf_files = sort(iodf_sort @iodf_files);
   foreach $iodf_files (@iodf_files) {
       if($iodf_files eq "." || $iodf_files eq "..") { next; }
       $data_filename = "$data_directory/$iodf_files";
       if(open(DATAFILE,"$data_filename")) {
          flock(DATAFILE,2);
          seek(DATAFILE,0,0);
          @iodf_data = <DATAFILE>;
          close(DATAFILE);
       } else {
          next;
       }
       if(scalar @iodf_data eq 1) {
          $tiodf_data_hcd = $iodf_dataÝ0¨;
          @iodf_data = unpack("A80" x (length($tiodf_data_hcd)/80),$tiodf_data_hcd);
       }
       if(index($iodf_dataÝ0¨,"TITLE '") eq -1) {
          $iodf_name = substr($iodf_dataÝ0¨,21,6);
          if(index($iodf_dataÝ2¨,"SCR=") ne -1) {
             $t_iodf    = index($iodf_dataÝ2¨,"SCR=");
             $iodf_proc = substr($iodf_dataÝ2¨,$t_iodf,12);
             $iodf_proc =~ s/SCR=//g;
          } else {
             $t_iodf_comma = index($iodf_dataÝ2¨,",");
             $iodf_proc = substr($iodf_dataÝ2¨,1,$t_iodf_comma-1);
             $iodf_proc =~ s/TOK=\(//g;
             $iodf_proc =~ s/\'//g;
          }
       } else {
          $iodf_title2 = trim($iodf_dataÝ2¨);
          $iodf_title2 =~ s/,/ /g;
          @iodf_title2_words = split(/ /,$iodf_title2);
          $iodf_proc = $iodf_title2_wordsÝ1¨;
          $iodf_proc =~ s/NAME=//;
          $iodf_name = substr(trim($iodf_dataÝ5¨),5,6);
       }
       $iodf_proc =~ s/ //g;

##########################################################################################################
# Insert the IODF and related data into an array
##########################################################################################################
       if(index($iodf_list,$iodf_name) eq -1) { $iodf_list .= "$iodf_name "; }
       $iodf_pfiles_c++;
       $iodf_pfilesÝ$iodf_pfiles_c¨ = "$iodf_name $iodf_proc $iodf_files";
       undef @iodf_data;
   }

##########################################################################################################
# Split the IODFs into an array, sort the data and count it
##########################################################################################################
   @iodf_file = split(/ /,$iodf_list);
   @iodf_file = sort(iodf_menu_sort @iodf_file);

   $iodf_menu_width = scalar @iodf_file;

##########################################################################################################
# Now step through the data and display the table
##########################################################################################################
   print "<TABLE align=\"left\" WIDTH=\"90%\" class=\"box\" cellpadding=0 cellspacing=0>";
   for($i=0; $i<scalar @iodf_file; $i=$i+$iodf_menu_width ) {
       print "<tr>";
       for($j=0; $j<$iodf_menu_width; $j++) {
           $border_width = "border-width: 0px 1px 1px 0px;";
           if($j eq $iodf_menu_width -1) { $border_width = "border-width: 0px 0px 1px 0px;"; }
           print "<td valign=\"top\" align=\"center\" class=\"oth_heading\" style=\"$border_width font-family:arial,verdana; font-size:16px; line-height:18px\">$iodf_fileÝ$j¨</td>";
       }
       print "</tr>";
       print "<tr>";
       for($j=0; $j<$iodf_menu_width; $j++) {
           $border_width = "border-width: 0px 1px 0px 0px; border-color: black; border-style: solid;";
           if($j eq $iodf_menu_width -1) { $border_width = "border-width: 0px 0px 0px 0px;border-color: black; border-style: solid;"; }
           print "<td valign=\"top\" align=\"center\" style=\"$border_width font-family:arial,verdana; font-size:14px; color:#000000; line-height:16px\"><BR>";
           foreach $iodf_pfiles (@iodf_pfiles) {
               @t_iodf_pfiles = split(/ /,$iodf_pfiles);
               if(index($iodf_pfiles,$iodf_fileÝ$j¨) ne -1) {
                  print "<button type=\"button\" class=\"button_blue\" onmouseover=\"this.className='button_high'\" onmouseout=\"this.className='button_blue'\" value=\"$t_iodf_pfilesÝ1¨\" ONCLICK=\"javascript:parent.window.location = '$cgi_directory/$script_name?iodf=$t_iodf_pfilesÝ2¨&sys=ALL'; window.status='-->> Processing $t_iodf_pfilesÝ0¨ for $t_iodf_pfilesÝ1¨...'\"><b>$t_iodf_pfilesÝ1¨</b></button><BR>";
               }
           }
           print "<BR></td>";
       }
       print "</tr>";
   }
   print "</table>";

##########################################################################################################
# Close tables and finish the display
##########################################################################################################
   print "</td></tr>";
   print "<tr><td valign=\"top\" align=\"left\" style=\"font-family:arial,verdana; font-size:12px; color:#000000; line-height:14px\">";
   print "<BR><BR>&nbsp;&nbsp;Version: <b>$version</b>";
   print "<BR><BR><BR>&nbsp;&nbsp;Need to check the CTC connections? <A HREF=\"$cgi_directory/iodf_ctc.cgi\"><SMALL>(click here)</SMALL></A>";
   print "<BR><hr size=1 width=\"100%\" color=black></td></tr></table><br><br></body><HEAD>";
   print "<META HTTP-EQUIV=\"Expires\" CONTENT=\"-1\"><META HTTP-EQUIV=\"Pragma\" CONTENT=\"no-cache\"></HEAD></html>";
   exit;

} else {
##########################################################################################################
# We read the IODF and join all lines that are 'continued' together
##########################################################################################################
   $data_filename = "$data_directory/$iodf";
   if(open(DATAFILE,"$data_filename")) {
      flock(DATAFILE,2);
      seek(DATAFILE,0,0);
      @tiodf_data = <DATAFILE>;
      close(DATAFILE);
      foreach $tiodf_data (@tiodf_data) {
          chomp($tiodf_data);
      }
   } else {
      display_error("Unable to open $data_filename for reading.");
      exit;
   }
   if(scalar @tiodf_data eq 1) {
      $tiodf_data_hcd = $tiodf_dataÝ0¨;
      @tiodf_data = unpack("A80" x (length($tiodf_data_hcd)/80),$tiodf_data_hcd);
   }
   @iodf_data = ("");
   $iodf_counter = -1;
   $temp_iodf = "";
   foreach $tiodf_data (@tiodf_data) {
       if(substr($tiodf_data,71,1) eq "*") {
          $t_iodf = trim(substr($tiodf_data,0,71));
          $temp_iodf .= $t_iodf;
        } else {
          $iodf_counter++;
          $tt_iodf = trim(substr($tiodf_data,0,71));
          $iodf_dataÝ$iodf_counter¨ .= $temp_iodf . $tt_iodf;
          $temp_iodf = "";
        }
   }
   undef @tiodf_data;

##########################################################################################################
# Go through the IODF and remove any commas before keywords which makes parsing easier later.
##########################################################################################################
   @iodevices = ("");
   $ioddevice_count = -1;
   $start_chpid = -1;
   $start_cu    = -1;
   $start_iod   = -1;
   $num_chps    = 0;
   $num_cus     = 0;
   $num_iod     = 0;
   foreach $iodf_data (@iodf_data) {
       $tmp_iodf_data = $iodf_data;
       $found = 0;
       if(index($iodf_data,"CHPID") ne -1) {
          $tmp_iodf_data =~ s/,PATH/ PATH/ig;
          $tmp_iodf_data =~ s/,CPATH/ CPATH/ig;
          $tmp_iodf_data =~ s/,TYPE/ TYPE/ig;
          $tmp_iodf_data =~ s/,SHARED/ SHARED/ig;
          $tmp_iodf_data =~ s/,PARTITION/ PARTITION/ig;
          $tmp_iodf_data =~ s/,PCHID/ PCHID/ig;
          $tmp_iodf_data =~ s/,SWITCH/ SWITCH/ig;
          $tmp_iodf_data =~ s/,SWPORT/ SWPORT/ig;
          $tmp_iodf_data =~ s/,DESC/ DESC/ig;
          $tmp_iodf_data =~ s/,TPATH/ TPATH/ig;
          $found = 1;
       }
       if(index($iodf_data,"CNTLUNIT") ne -1) {
          $tmp_iodf_data =~ s/,CUNUMBR/ CUNUMBR/ig;
          $tmp_iodf_data =~ s/,PATH/ PATH/ig;
          $tmp_iodf_data =~ s/,LINK/ LINK/ig;
          $tmp_iodf_data =~ s/,UNIT/ UNIT/ig;
          $tmp_iodf_data =~ s/,CUADD/ CUADD/ig;
          $tmp_iodf_data =~ s/,PROTOCL/ PROTOCL/ig;
          $tmp_iodf_data =~ s/,SHARED/ SHARED/ig;
          $tmp_iodf_data =~ s/,DESC/ DESC/ig;
          $tmp_iodf_data =~ s/,SWPORT/ SWPORT/ig;
          $found = 2;
       }
       if(index($iodf_data,"IODEVICE ADDRESS") ne -1) {
          $tmp_iodf_data =~ s/,CUNUMBR/ CUNUMBR/ig;
          $tmp_iodf_data =~ s/,STADET/ STADET/ig;
          $tmp_iodf_data =~ s/,UNIT/ UNIT/ig;
          $tmp_iodf_data =~ s/,PARTITION/ PARTITION/ig;
          $tmp_iodf_data =~ s/,TIMEOUT/ TIMEOUT/ig;
          $tmp_iodf_data =~ s/,MODEL/ MODEL/ig;
          $tmp_iodf_data =~ s/,DESC/ DESC/ig;
          $found = 3;
       }
       if($found ne 0) {
          $iodevice_count++;
          if(index($iodf_data,"CHPID") ne -1) {
             if($start_chpid eq -1) { $start_chpid = $iodevice_count; }
             $num_chps++;
          }
          if(index($iodf_data,"CNTLUNIT") ne -1) {
             if($start_cu eq -1)    { $start_cu    = $iodevice_count; }
             $num_cus++;
          }
          if(index($iodf_data,"IODEVICE ADDRESS") ne -1) {
             if($start_iod eq -1)   { $start_iod   = $iodevice_count; }
             $num_iod++;
          }
          $iodevicesÝ$iodevice_count¨ = $tmp_iodf_data;
       }
   }

##########################################################################################################
# Format the size of the array to three times the size of the IODEVICES. This allows multiple channels to
# be added which go to the same device. Each element defines the CHPID, CU to one device statement.
# Define the switch array.
##########################################################################################################
   $max_len = (scalar @iodevices) * 3;
   $max_elements = 15;
   for($k=0; $k<$max_len; $k++) {
       $IODFÝ$k¨   = Ý"", "", "", "", "", "", "", "", "", "", "", "", "", "", "" ¨;
       $SWDATAÝ$k¨ = Ý"", "", "", "", "", "", "", "", "", "", "", "", "", "", "" ¨;
       $PCDATAÝ$k¨ = Ý"", "", "", "", "", "", "", "", "", "", "", "", "", "", "" ¨;
   }

##########################################################################################################
# Parse the data and get the title of the IODF and the list of LPARs defined.
##########################################################################################################
   foreach $iodf_data (@iodf_data) {
       if(index($iodf_data,"ID    MSG") ne -1) {
          $iodf_title = $iodf_data;
       }
       if(index($iodf_data,"TITLE '") ne -1) {
          $iodf_title = $iodf_data;
       }
       if(index($iodf_data,"ID NAME") ne -1) {
          $iodf_title2 = $iodf_data;
       }
       if(index($iodf_data,"RESOURCE") ne -1) {
          $iodf_resource = $iodf_data;
          last;
       }
   }
##########################################################################################################
# This code handles the normal IOCP statements from a production IODF
##########################################################################################################
   $a = index($iodf_title,"MSG1");
   if($a ne -1) {
      $b = index($iodf_title,"SCR")-1;
      if($b eq -2) { $b = index($iodf_title,"TOK")-1; }
      $iodf_title2 = substr($iodf_title,$a,$b-$a);
      ($msg1,$msg2,$system) = split(/,/,$iodf_title2);
      $iodf_name = $msg1;
      $iodf_name =~ s/MSG1=//;
      $iodf_name =~ s/\'//g;
      $iodf_proc = substr($iodf_title,($b+1)+4,8);
      $iodf_proc =~ s/\(//g;
      $iodf_proc =~ s/\'//g;

      $iodf_date = $msg2;
      $iodf_date =~ s/MSG2=//;
      $iodf_date =~ s/\'//g;
      ($dataset,$iodf_d) = split(/ - /,$iodf_date);
      $iodf_sys = $system;
      $iodf_sys =~ s/SYSTEM=\(//;
      $iodf_sys = substr($iodf_sys,0,4);
   }
##########################################################################################################
# This code handles the IOCP statements from HCD dialog
##########################################################################################################
   $a = index($iodf_title,"TITLE '");
   if($a ne -1) {
      $iodf_date = $iodf_title;
      $iodf_date =~ s/TITLE//;
      $iodf_date =~ s/\'//g;
      ($dataset,$iodf_d) = split(/ - /,$iodf_date);
   }
   $a = index($iodf_title2,"ID NAME");
   if($a ne -1) {
      $iodf_title2 =~ s/,/ /g;
      @iodf_title2_words = split(/ /,$iodf_title2);
      $iodf_sys = $iodf_title2_wordsÝ2¨;
      $iodf_sys =~ s/UNIT=//;
      $iodf_proc = $iodf_title2_wordsÝ1¨;
      $iodf_proc =~ s/NAME=//;
      $iodf_name = trim(substr($iodf_title2,length($iodf_title2)-9,8));
   }

##########################################################################################################
# Now we display the IODF/IOCP information
##########################################################################################################
   print "<BR><BR><TABLE align=\"left\" class=\"box\" WIDTH=\"100%\" bgcolor=\"#444444\" cellpadding=0 cellspacing=0>";
   print "<tr><td align=\"left\" style=\"font-family:arial,verdana; font-size:20px; color:white; line-height:30px\">&nbsp;$iodf_name on Processor $iodf_proc</td></tr>";
   print "</table>";
   print "<BR><BR><BR>IODF resides in $dataset, and was created on $iodf_d.<BR>";
   print "Machine limited to a $iodf_sys processor.<BR><BR>";

   if(index($iodf_resource,"MAXDEV") ne -1) {
      $a = index($iodf_resource,"MAXDEV=");
      $maxdev = substr($iodf_resource,$a);
      $maxdev =~ s/MAXDEV=//;
      $maxdev = substr($maxdev,1,length($maxdev)-2);
      @css_maxdev = split(/\),\(/,$maxdev);
      print "<b>Maximum devices set:</b><BR><BR>";
      foreach $css_maxdev (@css_maxdev) {
          if(substr($css_maxdev,0,1) eq "(") { $css_maxdev = substr($css_maxdev,1); }
          if(substr($css_maxdev,length($css_maxdev)-1,1) eq ")") { $css_maxdev = substr($css_maxdev,0,length($css_maxdev)-1); }
          if($css_maxdev ne "(") {
             ($css,$devs) = split(/,/,$css_maxdev);
             $devs =~ s/\)\)//;
             print "$css has a limit of $devs devices.<BR>";
          }
      }
      print "<BR>";
      $iodf_resource = substr($iodf_resource,0,$a-1);
   }
   $iodf_resource =~ s/RESOURCE PARTITION=\(//;
   $iodf_resource = trim($iodf_resource);
   print "<b>IODF contains definitions for LPARs:</b> <BR>";
   $system_list = "";
   if(index($iodf_resource,"CSS(") eq -1) {
      print "<BR>";
      @lpars = split(/\),\(/,$iodf_resource);
      foreach $lpars (@lpars) {
          $lpars =~ s/\(//g;
          $lpars =~ s/\)//g;
          ($lpar_sys,$lpar_num) = split(/\,/,$lpars);
          print "$lpar_sys with LPAR ID $lpar_num<BR>";
          if(index($system_list,$lpar_sys) eq -1) {
             $system_list .= " $lpar_sys";
          }
      }
   } else {
      $csslpar = substr($iodf_resource,1,length($csslpar)-2);
      @css_lpars = split(/\),\(/,$csslpar);
      foreach $css_lpars (@css_lpars) {
          if(substr($css_lpars,0,1) eq "(") { $css_lpars= substr($css_lpars,1); }
          if(substr($css_lpars,length($css_lpars)-1,1) eq ")") { $css_lpars= substr($css_lpars,0,length($css_lpars)-1); }
          if(index($css_lpars,"CSS") ne -1) {
             $css_lpars =~ s/\(/ /g;
             ($css,$cssn) = split(/ /,$css_lpars);
             $css_lpars = "<BR><u>$css($cssn)</u><BR>";
          } else {
             ($lpar_sys,$lpar_num) = split(/\,/,$css_lpars);
             $css_lpars = "$lpar_sys with LPAR ID $lpar_num";
             if(index($system_list,$lpar_sys) eq -1) {
                $system_list .= " $lpar_sys";
             }
          }
          print "$css_lpars<BR>";
      }
   }
   print "<BR><BR><b>There are $num_chps CHPIDs, $num_cus Control Units and $num_iod IODevice statements defined.</b><BR>";
   print "<BR><BR><SMALL><b>Note:</b><BR>";
   print "1. Currently SHARED access to CUs is not shown.<BR>";
   print "2. PROTOCOL is not shown for CUs.<BR>";
   print "<BR><BR></SMALL>";

##########################################################################################################
# Now we parse the data
##########################################################################################################
   $IODF_count = 0;
   $unit_list  = "#ALL ";
   @iodevices = reverse @iodevices;
   for($k=0; $k<scalar @iodevices; $k++) {

##########################################################################################################
# We extract each IODEVICE from the IODF and extract the address.
##########################################################################################################
       if(index($iodevicesÝ$k¨,"IODEVICE ADDRESS") ne -1) {
          $device_css = "0";
          $device_num = "";
          $device_cu  = "";
          $device_attrs = "";
          @temp_iod = split(/ /,$iodevicesÝ$k¨);
          $temp_iodÝ1¨ =~ s/ADDRESS=//g;
          $temp_iodÝ1¨ =~ s/\(//g;
          $temp_iodÝ1¨ =~ s/\)//g;
          if(index($iodevicesÝ$k¨,"UNIT=") ne -1) {
             $new_unit = substr($iodevicesÝ$k¨,index($iodevicesÝ$k¨,"UNIT="));
             $new_unit =~ s/UNIT=//g;
             if(index($unit_list,$new_unit) eq -1) {
                $unit_list .= "$new_unit ";
             }
          }
          if(index($url_device_type,$new_unit) eq -1 && $url_device_type ne "ALL") { next; }

##########################################################################################################
# We extract the CU and the device attributes, chaining the latter together.
##########################################################################################################
          $device_num  = $temp_iodÝ1¨;
          foreach $temp_iod (@temp_iod) {
              if(index($temp_iod,"CUNUMBR") ne -1) {
                 $temp_iod=~ s/CUNUMBR=//g;
                 $temp_iod=~ s/\,/ /g;
                 $temp_iod=~ s/\(//g;
                 $temp_iod=~ s/\)//g;
                 $device_cu = $temp_iod;
              }

              $found_attr = 0;
#              if(index($temp_iod,"PARTITION=") ne -1) {
#                 if(index($temp_iod,"CSS(") ne -1) { $device_css = substr($temp_iod,index($temp_iod,"CSS(")+4,1); }
#                 $found_attr = 1;
#              }
              if(index($temp_iod,"PARTITION=") ne -1) {
                 $temp_iod =~ s/PARTITION=//g;
                 $temp_iod =~ s/\,/ /g;
                 $temp_iod =~ s/CSS\(0\)//g;
                 $temp_iod =~ s/CSS\(1\)//g;
                 $temp_iod =~ s/CSS\(2\)//g;
                 $temp_iod =~ s/CSS\(3\)//g;
                 $temp_iod =~ s/\(//g;
                 $temp_iod =~ s/\)//g;
                 $temp_iod =~ s/=//g;
                 $temp_iod = trim($temp_iod);
                 $temp_iod = "SYS=" . $temp_iod;
                 $found_attr = 1;
              }
              if(index($temp_iod,"UNIT=") ne -1)      { $found_attr = 1; }
              if(index($temp_iod,"UNITADD=") ne -1)   { $found_attr = 1; }
              if(index($temp_iod,"STADET=") ne -1)    { $found_attr = 1; }
              if(index($temp_iod,"TIMEOUT=") ne -1)   { $found_attr = 1; }
              if(index($temp_iod,"MODEL=") ne -1)     { $found_attr = 1; }
              if($found_attr eq 1) {
                 if(length($device_attrs) ne 0) { $device_attrs .= ","; }
                 $device_attrs .= $temp_iod;
              }
          }
##########################################################################################################
# Now we assign to the array.
# $IODFÝ$IODF_count¨Ý9¨  = device;
# $IODFÝ$IODF_count¨Ý10¨ = device attributes;
# $IODFÝ$IODF_count¨Ý4¨  = control unit;
#
# We also blank out the IODEVICE we have processed.
##########################################################################################################
          $IODFÝ$IODF_count¨Ý9¨  = $device_num;
          $IODFÝ$IODF_count¨Ý10¨ = $device_attrs;
          $IODFÝ$IODF_count¨Ý4¨  = $device_cu;
#          $IODFÝ$IODF_count¨Ý13¨ = $device_css;
#           print ">>$IODFÝ$IODF_count¨Ý0¨,$IODFÝ$IODF_count¨Ý1¨,$IODFÝ$IODF_count¨Ý2¨,$IODFÝ$IODF_count¨Ý3¨,$IODFÝ$IODF_count¨Ý4¨,$IODFÝ$IODF_count¨Ý5¨,$IODFÝ$IODF_count¨Ý6¨,$IODFÝ$IODF_count¨Ý7¨,$IODFÝ$IODF_count¨Ý8¨,$IODFÝ$IODF_count¨Ý9¨,$IODFÝ$IODF_count¨Ý10¨<< >$IODFÝ$IODF_count¨Ý11¨,$IODFÝ$IODF_count¨Ý12¨,$IODFÝ$IODF_count¨Ý13¨< <BR>\n";
          $IODF_count++;
          $iodevicesÝ$k¨ = "EMPTY";
       }

##########################################################################################################
# Now we process the CONTROL UNITS
##########################################################################################################
       if(index($iodevicesÝ$k¨,"CNTLUNIT") ne -1) {
          $cu_num = "";
          $cu_cua = "";
          $cu_unit= "";
          $cu_link= "";
          $cu_ua  = "";
          $cu_path= "";
          @temp_cu = split(/ /,$iodevicesÝ$k¨);
##########################################################################################################
# We extract the CU, the PATH and other attributes.
##########################################################################################################
          $cu_num  = $temp_cuÝ1¨;
          $cu_num  =~ s/CUNUMBR=//g;
          $temp_cuÝ2¨ =~ s/PATH=//g;
          if(index($temp_cuÝ2¨,"CSS") ne -1) {
             @css_path = split(/\),\(/,$temp_cuÝ2¨);
             foreach $css_path (@css_path) {
                 $css_path =~ s/\)/ /g;
                 $css_path =~ s/\(//g;
                 $css_path =~ s/\,/ /g;
                 @t_css_path = split(/ /,$css_path);
                 $t_css_pathÝ0¨ =~ s/CSS//;
                 for($a=1; $a<scalar @t_css_path; $a++) {
                     if($t_css_pathÝ$a¨ eq "") { next; }
                     $cu_path .= $t_css_pathÝ0¨ . ":" . $t_css_pathÝ$a¨ . " ";
                 }
             }
          } else {
             $cu_path = $temp_cuÝ2¨;
             $cu_path =~ s/\,/ /g;
             $cu_path =~ s/\(//g;
             $cu_path =~ s/\)//g;
          }
          foreach $temp_cu (@temp_cu) {
              if(index($temp_cu,"UNIT=") ne -1)    { $temp_cu =~ s/UNIT=//g; $cu_unit = $temp_cu; }
              if(index($temp_cu,"UNITADD=") ne -1) { $temp_cu =~ s/UNITADD=//g; $temp_cu =~ s/\(//g; $temp_cu =~ s/\)//g; $cu_ua = $temp_cu; }
              if(index($temp_cu,"CUADD=") ne -1)   { $temp_cu =~ s/CUADD=//g; $cu_cua = $temp_cu; }
              if(index($temp_cu,"LINK=") ne -1)    {
                 $temp_cu =~ s/LINK=//g;
                 if(index($temp_cu,"CSS") ne -1) {
                    @css_link = split(/\),\(/,$temp_cu);
                    foreach $css_link (@css_link) {
                        $css_link =~ s/\)/ /g;
                        $css_link =~ s/\(//g;
                        $css_link =~ s/\,/ /g;
                        @t_css_link = split(/ /,$css_link);
                        $t_css_linkÝ0¨ =~ s/CSS//;
                        for($a=1; $a<scalar @t_css_link; $a++) {
                            if($t_css_linkÝ$a¨ eq "") { next; }
                            $cu_link .= $t_css_linkÝ0¨ . ":" . $t_css_linkÝ$a¨ . " ";
                        }
                    }
                 } else {
                   $temp_cu =~ s/\(//g;
                   $temp_cu =~ s/\)//g;
                   $temp_cu =~ s/\,/ /g;
                   $cu_link = $temp_cu;
                 }
              }
          }
##########################################################################################################
# We now traverse the main array and insert the CU attributes into the array if the device's CU matches
# ours. Since we perform additional function later, we ignore any that have already been processed.
#
# We also blank out the CU we have processed.
# If we find that there are multiple paths to the CU, we now traverse the array and insert the current
# device and CU in another element with the next path.
##########################################################################################################
          for($a=0; $a<$IODF_count; $a++) {
              if($IODFÝ$a¨Ý9¨ eq "") { last; }
              if($IODFÝ$a¨Ý4¨ eq $cu_num && $IODFÝ$a¨Ý11¨ ne "DUP") {
                 $IODFÝ$a¨Ý5¨ = $cu_cua;
                 $IODFÝ$a¨Ý6¨ = $cu_unit;
                 $IODFÝ$a¨Ý8¨ = $cu_ua;
                 @temp_paths = split(/ /,$cu_path);
                 $IODFÝ$a¨Ý0¨ = $temp_pathsÝ0¨;
                 @temp_links = split(/ /,$cu_link);
                 $IODFÝ$a¨Ý7¨ = $temp_linksÝ0¨;
                 $iodevicesÝ$k¨ = "EMPTY";
                 $len_path = scalar @temp_paths;
                 if($len_path > 1) {
                    for($pt=1; $pt<$len_path; $pt++) {
                        $IODFÝ$IODF_count¨Ý9¨ = $IODFÝ$a¨Ý9¨;
                        $IODFÝ$IODF_count¨Ý10¨= $IODFÝ$a¨Ý10¨;
                        $IODFÝ$IODF_count¨Ý4¨ = $IODFÝ$a¨Ý4¨;
                        $IODFÝ$IODF_count¨Ý5¨ = $IODFÝ$a¨Ý5¨;
                        $IODFÝ$IODF_count¨Ý6¨ = $IODFÝ$a¨Ý6¨;
                        $IODFÝ$IODF_count¨Ý7¨ = $temp_linksÝ$pt¨;
                        $IODFÝ$IODF_count¨Ý8¨ = $IODFÝ$a¨Ý8¨;
                        $IODFÝ$IODF_count¨Ý0¨ = $temp_pathsÝ$pt¨;
                        $IODFÝ$IODF_count¨Ý11¨= "DUP";
                        $IODF_count++;
                    }
                 }
              }
          }
       }
   }

##########################################################################################################
# Provide a drop-down menu of all devices and systems
##########################################################################################################
   print "<form name=\"iodf_form\" >";
   @unit_types = split(/ /,$unit_list);
   @unit_types = sort(iodf_menu_sort @unit_types);
   $unit_typesÝ0¨ = "ALL";
   print "<b>Select Device Type:</b> <select name=\"unit\" style=\"font-family:verdana; color:#000000; font-size:11px; text-decoration:none; line-height:12px;\">";
   foreach $unit_type (@unit_types) {
       if($url_device_type eq $unit_type) {
          print "<option value=\"$unit_type\" selected>$unit_type</option>";
       } else {
          print "<option value=\"$unit_type\">$unit_type</option>";
       }
   }
   print "</select>";

##########################################################################################################
# Provide a drop-down menu of all systems
##########################################################################################################
   @conn_systems = split(/ /,$system_list);
   @conn_systems = sort(iodf_menu_sort @conn_systems);
   $conn_systemsÝ0¨ = "ALL";
   print "&nbsp&nbsp;&nbsp;<b>Select System:</b> <select name=\"system\" style=\"font-family:verdana; color:#000000; font-size:11px; text-decoration:none; line-height:12px;\">";
   foreach $conn_systems (@conn_systems) {
       if($url_system eq $conn_systems) {
          print "<option value=\"$conn_systems\" selected>$conn_systems</option>";
       } else {
          print "<option value=\"$conn_systems\">$conn_systems</option>";
       }
   }
   print "</select> &nbsp;&nbsp;&nbsp;&nbsp;<button onclick=\"";
   print "parent.window.location=\'$cgi_directory/$script_name?iodf=$iodf&sys='+document.iodf_form.system.optionsÝdocument.iodf_form.system.selectedIndex¨.value+'&dev='+document.iodf_form.unit.optionsÝdocument.iodf_form.unit.selectedIndex¨.value+'\'";
   print "\" type=\"button\" class=\"button_blue\" onmouseover=\"this.className='button_high'\" onmouseout=\"this.className='button_blue'\" style=\"font-size:11px; width:60px; line-height:14px; font-weight:bold\">Go</button></form>";

##########################################################################################################
# Now we process the CHPIDS
##########################################################################################################
   for($k=$start_chp; $k<scalar @iodevices; $k++) {
       if(index($iodevicesÝ$k¨,"CHP") ne -1) {
          $chp_num = "";
          $chp_sys = "";
          $chp_type= "";
          $chp_sw  = "";
          $chp_phy = "";
          $chp_extra = "";
          @temp_chp = split(/ /,$iodevicesÝ$k¨);
          $chp_num  = $temp_chpÝ1¨;
          $chp_num =~ s/PATH=//g;
          $chp_num  =~ s/\(//g;
          $chp_num  =~ s/\)//g;
##########################################################################################################
# We get the type, switch and partition data for the CHPID.
##########################################################################################################
          foreach $temp_chp (@temp_chp) {
              if(index($temp_chp,"TYPE=") ne -1)     { $temp_chp =~ s/TYPE=//g;   $chp_type = $temp_chp; }
              if(index($temp_chp,"SWITCH=") ne -1)   { $temp_chp =~ s/SWITCH=//g; $chp_sw = $temp_chp;   }
              if(index($temp_chp,"PCHID=") ne -1)    { $temp_chp =~ s/PCHID=//g;  $chp_phy = $temp_chp;  }
              if(index($temp_chp,"PARTITION=") ne -1) {
                 $temp_chp =~ s/PARTITION=//g;
                 $temp_chp =~ s/\,/ /g;
                 $temp_chp =~ s/\(//g;
                 $temp_chp =~ s/\)//g;
                 $temp_chp =~ s/=//g;
                 $chp_sys = $temp_chp;
              }
              if(index($temp_chp,"CPATH=") ne -1) {
                 $temp_chp =~ s/\,/:/g;
                 $temp_chp =~ s/CSS//g;
                 $temp_chp =~ s/\(//g;
                 $temp_chp =~ s/\)//g;
                 $chp_extra = $temp_chp;
              }
              if(index($temp_chp,"TPATH=") ne -1) {
                 $temp_chp =~ s/TPATH=//g;
                 $temp_chp =~ s/\,/:/g;
#                 $temp_chp =~ s/CSS//g;
                 $temp_chp =~ s/\(//g;
                 $temp_chp =~ s/\)//g;
                 (@temp_tpath) = split(/CSS/,$temp_chp);
                 @tpath_a = split(/:/,$temp_tpathÝ1¨);
                 @tpath_b = split(/:/,$temp_tpathÝ2¨);
                 $chp_extra = "<BR><BR><b>Connect to $tpath_aÝ1¨</b>,<BR>CHP: $tpath_aÝ0¨:$tpath_aÝ2¨";
                 if(scalar @tpath_a > 3) { $chp_extra .= ", CU: $tpath_aÝ3¨, DEV: $tpath_aÝ4¨"; }
                 $chp_extra .= "<BR><BR>";
                 $chp_extra .="<b>This side:</b> CHP: $tpath_bÝ0¨:$tpath_bÝ2¨";
                 if(scalar @tpath_b > 3) { $chp_extra .= ", CU: $tpath_bÝ3¨, DEV: $tpath_bÝ4¨"; }
              }
          }

##########################################################################################################
# We now search the array and insert the data for the named CHPID.
##########################################################################################################
          for($a=0; $a<$IODF_count; $a++) {
              if($IODFÝ$a¨Ý9¨ eq "") { next; }
              if(index($chp_num,"CSS") eq -1) {
                 if($chp_num eq $IODFÝ$a¨Ý0¨) {
                    $IODFÝ$a¨Ý1¨ = $chp_sys;
                    $IODFÝ$a¨Ý2¨ = $chp_type;
                    $IODFÝ$a¨Ý3¨ = $chp_sw;
                    $IODFÝ$a¨Ý13¨ = $chp_phy;
#                    $IODFÝ$a¨Ý14¨ = $chp_extra;
                    $iodevicesÝ$k¨ = "EMPTY";
                 }
              } else {
                 $chan_num = substr($chp_num,length($chp_num)-2,2);
                 $chp_num  = substr($chp_num,0,length($chp_num)-2);
                 $chp_num  =~ s/ //g;
                 $chp_num  =~ s/,/ /g;
                 $chp_num  =~ s/CSS//g;
                 @css_words = split(/ /,$chp_num);
                 foreach $css_words (@css_words) {
                     $new_css_chp = $css_words . ":" . $chan_num;
                     for($b=0; $b<$IODF_count; $b++) {
                         if($IODFÝ$b¨Ý9¨ eq "") { last; }
                         if($new_css_chp eq $IODFÝ$b¨Ý0¨) {
                            $IODFÝ$b¨Ý1¨ = $chp_sys;
                            $IODFÝ$b¨Ý2¨ = $chp_type;
                            $IODFÝ$b¨Ý3¨ = $chp_sw;
                            $IODFÝ$b¨Ý13¨ = $chp_phy;
                            $IODFÝ$b¨Ý14¨ = $chp_extra;
                            $iodevicesÝ$k¨ = "EMPTY";
                         }
                     }
                 }
              }
          }
##########################################################################################################
       }
   }
##########################################################################################################
# We copy the array for use with Switches.
##########################################################################################################
   for($ki=0; $ki<$IODF_count; $ki++) {
       for($kl=0; $kl<$max_elements; $kl++) {
           $SWDATAÝ$ki¨Ý$kl¨ = $IODFÝ$ki¨Ý$kl¨;
           $PCDATAÝ$ki¨Ý$kl¨ = $IODFÝ$ki¨Ý$kl¨;
       }
   }
##########################################################################################################
# Now we adjust the size of the array, and sort it in CHPID order.
##########################################################################################################
   $#IODF -= ($max_len - $IODF_count);
   @IODF = sort(new_iodf_sort @IODF);

##########################################################################################################
# Now we display the table headings
##########################################################################################################
   print "<TABLE align=\"center\" class=\"box\" WIDTH=\"100%\" cellpadding=0 cellspacing=0>\n";
   print "<tr><td align=\"left\" bgcolor=\"#444444\" style=\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\">&nbsp;Channels, Control Units and Devices</td></tr></table>\n";
   print "<BR>\n";
   print "<TABLE align=\"center\" WIDTH=\"100%\" cellpadding=2 cellspacing=0>\n";
   print "<tr>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">CHP</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">CSS</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">PCHID</td>\n";
   print "<td align=\"center\" width=\"8%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">System</td>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Type</td>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Switch</td>\n";
   print "<td align=\"center\" width=\"4%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#009900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">CU</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#009900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">CUA</td>\n";
   print "<td align=\"center\" width=\"4%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#009900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Unit</td>\n";
   print "<td align=\"center\" width=\"4%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#009900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Link</td>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#009900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">UA</td>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#000099\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Devices</td>\n";
   print "<td align=\"center\" width=\"20%\" valign=\"top\" class=\"box_head_r\" bgcolor=\"#000099\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Attributes</td>\n";
   print "</tr>\n";

##########################################################################################################
# Before we display the data, we traverse the array in order to blank out common elements. First we check
# the CHPIDS. We get the number of the first occurrence and then search to get the last occurrence - each
# stored in start_one and last_one. This forms the count that is stored in the first element and contains
# the number of subsequent entries associated with this CHPID.
#
# We then compare each element within this range against its previous one. If they match an element then
# the element of the later element is blanked out - hence why we loop backwards.
##########################################################################################################
   for($k=0; $k<$IODF_count; $k++) {
       $last_one = $k;
       for($j=$k; $j<$IODF_count; $j++) {
           if($IODFÝ$j¨Ý0¨ ne $IODFÝ$k¨Ý0¨) {
              $last_one = $j;
              last;
           }
       }
       if($last_one eq $k) { $last_one = $IODF_count; }
       $start_one = $k;
       $last_one--;
       $IODFÝ$k¨Ý12¨ = ($last_one - $start_one) + 1;
       for($l=$last_one; $l>$start_one; $l--) {
           $n = $l - 1;
           $shall_we_leave = 0;
           for($kl=0; $kl<$max_elements; $kl++) {
               if($IODFÝ$l¨Ý$kl¨ ne $IODFÝ$n¨Ý$kl¨) { $shall_we_leave = 1; }
               if($shall_we_leave eq 1) { last; }
               $IODFÝ$l¨Ý$kl¨ = "";
           }
       }
       $k = $start_one;
   }

#     for($k=0; $k<$IODF_count; $k = $k + ($IODFÝ$k¨Ý12¨)) {
#     for($k=0; $k<$IODF_count; $k++) {
#         print "$k is our current element. $IODF_count";
#         print ">>$IODFÝ$k¨Ý0¨,$IODFÝ$k¨Ý1¨,$IODFÝ$k¨Ý2¨,$IODFÝ$k¨Ý3¨,$IODFÝ$k¨Ý4¨,$IODFÝ$k¨Ý5¨,$IODFÝ$k¨Ý6¨,$IODFÝ$k¨Ý7¨,$IODFÝ$k¨Ý8¨,$IODFÝ$k¨Ý9¨,$IODFÝ$k¨Ý10¨<< >$IODFÝ$k¨Ý11¨,$IODFÝ$k¨Ý12¨< <BR>\n";
#    }
#    exit;

##########################################################################################################
# We traverse the array, incrementing the element by the count from above, extracting the data for the
# CHPID. If any of these are blank, we insert a non-breakable space. We use the count from above and
# add the number of line breaks to pad out the array.
##########################################################################################################
   for($k=0; $k<$IODF_count; $k = $k + ($IODFÝ$k¨Ý12¨)) {
       $chp_extra = "";
       if($IODFÝ$k¨Ý14¨ ne "") {
          $chp_extra = "<BR><b>$IODFÝ$k¨Ý14¨</b>";
       }
       if(index($IODFÝ$k¨Ý0¨,":") ne -1) {
          ($css_id,$chp_num) = split(/:/,$IODFÝ$k¨Ý0¨);
       } else {
          $css_id = "&nbsp;";
          $chp_num = $IODFÝ$k¨Ý0¨;
       }
       $chp_sys = $IODFÝ$k¨Ý1¨;
       if($url_system ne "ALL" && index($chp_sys,$url_system) eq -1) { next; }

       $chp_type = $IODFÝ$k¨Ý2¨;
       $chp_sw = $IODFÝ$k¨Ý3¨;
       if($IODFÝ$k¨Ý0¨ eq "") { $IODFÝ$k¨Ý0¨ = "&nbsp;"; }
       if($IODFÝ$k¨Ý1¨ eq "") { $IODFÝ$k¨Ý1¨ = "&nbsp;"; }
       if($IODFÝ$k¨Ý2¨ eq "") { $IODFÝ$k¨Ý2¨ = "&nbsp;"; }
       if($IODFÝ$k¨Ý3¨ eq "") { $IODFÝ$k¨Ý3¨ = "&nbsp;"; }
       if($IODFÝ$k¨Ý3¨ ne "&nbsp;")  {
          $IODFÝ$k¨Ý3¨ .= "<BR>" x ($IODFÝ$k¨Ý12¨ - 1);
       }
       if($IODFÝ$k¨Ý13¨ eq "") { $IODFÝ$k¨Ý13¨ = "&nbsp;"; }
       print "<tr>\n";
       print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$chp_num</td>\n";
       print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$css_id</td>\n";
       print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$IODFÝ$k¨Ý13¨</td>\n";
       print "<td align=\"left\" width=\"8%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$IODFÝ$k¨Ý1¨$chp_extra</td>\n";
       print "<td align=\"left\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$IODFÝ$k¨Ý2¨</td>\n";
       print "<td align=\"left\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">$IODFÝ$k¨Ý3¨</td>\n";
##########################################################################################################
# Loop and display all CU data.
##########################################################################################################
       print "<td align=\"left\" width=\"4%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">";
       $max_cu_pos = $k+$IODFÝ$k¨Ý12¨;
       if($k + 1 eq $IODF_count) { $max_cu_pos++; }
       for($a=$k; $a<$max_cu_pos; $a++) {
           if($IODFÝ$a¨Ý4¨ eq "") { $IODFÝ$a¨Ý4¨ = "&nbsp;"; }
           print "$IODFÝ$a¨Ý4¨<BR>";
       }
       print "</td>\n";
##########################################################################################################
# Loop and display all CUA data.
##########################################################################################################
       print "<td align=\"left\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">";
       for($a=$k; $a<$max_cu_pos; $a++) {
           if($IODFÝ$a¨Ý5¨ eq "") { $IODFÝ$a¨Ý5¨ = "&nbsp;"; }
           print "$IODFÝ$a¨Ý5¨<BR>";
       }
       print "</td>\n";
##########################################################################################################
# Loop and display all UNIT data.
##########################################################################################################
       print "<td align=\"left\" width=\"4%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">";
       for($a=$k; $a<$max_cu_pos; $a++) {
           if($IODFÝ$a¨Ý6¨ eq "") { $IODFÝ$a¨Ý6¨ = "&nbsp;"; }
           print "$IODFÝ$a¨Ý6¨<BR>";
       }
       print "</td>\n";
##########################################################################################################
# Loop and display all LINK data.
##########################################################################################################
       print "<td align=\"left\" width=\"4%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">";
       for($a=$k; $a<$max_cu_pos; $a++) {
           $cu_link = $IODFÝ$a¨Ý7¨;
           if(index($IODFÝ$a¨Ý7¨,":") ne -1) { ($cu_css,$cu_link) = split(/:/,$IODFÝ$a¨Ý7¨); }
           if($IODFÝ$a¨Ý7¨ eq "") { $IODFÝ$a¨Ý7¨ = "&nbsp;"; }
#           print "$IODFÝ$a¨Ý7¨<BR>";
           print "$cu_link<BR>";
       }
       print "</td>\n";
##########################################################################################################
# Loop and display all UNIT ADDRESS data.
##########################################################################################################
       print "<td align=\"left\" width=\"4%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">";
       for($a=$k; $a<$max_cu_pos; $a++) {
           if($IODFÝ$a¨Ý8¨ eq "") { $IODFÝ$a¨Ý8¨ = "&nbsp;"; }
           print "$IODFÝ$a¨Ý8¨<BR>";
       }
       print "</td>\n";
##########################################################################################################
# Loop and display all DEVICE data.
##########################################################################################################
       print "<td align=\"left\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">";
       for($a=$k; $a<$max_cu_pos; $a++) {
           if($IODFÝ$a¨Ý9¨ eq "") { $IODFÝ$a¨Ý9¨ = "&nbsp;"; }
           print "$IODFÝ$a¨Ý9¨<BR>";
       }
       print "</td>\n";
##########################################################################################################
# Loop and display all DEVICE ATTRIBUTES data.
##########################################################################################################
       print "<td align=\"left\" width=\"20%\" valign=\"top\" class=\"box_r\" style=\"font-family:arial,verdana; font-size:10px; color:black; line-height:14px\">";
       for($a=$k; $a<$max_cu_pos; $a++) {
           if($IODFÝ$a¨Ý10¨ eq "") { $IODFÝ$a¨Ý10¨ = "&nbsp;"; }
           print "$IODFÝ$a¨Ý10¨<BR>";
       }
       print "</td>\n";
       print "</tr>\n";
##########################################################################################################
# If we are at the end of the array, then lets get out!
##########################################################################################################
       if($k + 1 eq $IODF_count) { last; }
   }
   print "</table><BR><BR>";

##########################################################################################################
# Display unused CHPIDS
##########################################################################################################
if($url_device_type eq "ALL" && $url_system eq "ALL") {
   print "<TABLE align=\"center\" WIDTH=\"100%\" cellpadding=0 cellspacing=0>\n";
   print "<tr><td colspan=6 align=\"left\" class=\"box\" bgcolor=\"#444444\" style=\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\">&nbsp;Defined but Not Used Channels, Control Units & IO Devices</td></tr>\n";
   print "<tr><td align=\"left\" valign=top width=\"40%\" style=\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\">";
   print "<BR>";

   print "<TABLE align=\"left\" WIDTH=\"90%\" cellpadding=2 cellspacing=0>\n";
   print "<tr>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">CHP</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">CSS</td>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">PCHID</td>\n";
   print "<td align=\"center\" width=\"30%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">System</td>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Type</td>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_head_r\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Switch</td>\n";
   print "</tr>\n";

   for($k=0; $k<scalar @iodevices; $k++) {
       if($iodevicesÝ$k¨ ne "EMPTY" && index($iodevicesÝ$k¨,"CHPID") ne -1) {
          $chp_num = "&nbsp;";
          $chp_sys = "&nbsp;";
          $chp_type= "&nbsp;";
          $chp_sw  = "&nbsp;";
          $chp_pchid = "&nbsp;";
          $chp_css = "&nbsp;";
          $chp_extra = "";
          @temp_chp = split(/ /,$iodevicesÝ$k¨);
          $chp_num  = $temp_chpÝ1¨;
          $chp_num =~ s/PATH=//g;
          $chp_num  =~ s/\(//g;
          $chp_num  =~ s/\)//g;
          foreach $temp_chp (@temp_chp) {
              if(index($temp_chp,"TYPE=") ne -1)     { $temp_chp =~ s/TYPE=//g; $chp_type = $temp_chp; }
              if(index($temp_chp,"PCHID=") ne -1)    { $temp_chp =~ s/PCHID=//g; $chp_pchid = $temp_chp; }
              if(index($temp_chp,"SWITCH=") ne -1)   { $temp_chp =~ s/SWITCH=//g; $chp_sw = $temp_chp; }
              if(index($temp_chp,"PARTITION=") ne -1) {
                 $temp_chp =~ s/PARTITION=//g;
                 $temp_chp =~ s/\,/ /g;
                 $temp_chp =~ s/\(//g;
                 $temp_chp =~ s/\)//g;
                 $temp_chp =~ s/=//g;
                 $chp_sys = $temp_chp;
              }
              if(index($temp_chp,"CPATH=") ne -1) {
                 $temp_chp =~ s/\,/:/g;
                 $temp_chp =~ s/CSS//g;
                 $temp_chp =~ s/\(//g;
                 $temp_chp =~ s/\)//g;
                 $chp_extra = "<BR><b>$temp_chp</b>";
              }
              if(index($temp_chp,"TPATH=") ne -1) {
                 $temp_chp =~ s/TPATH=//g;
                 $temp_chp =~ s/\,/:/g;
#                 $temp_chp =~ s/CSS//g;
                 $temp_chp =~ s/\(//g;
                 $temp_chp =~ s/\)//g;
                 (@temp_tpath) = split(/CSS/,$temp_chp);
                 @tpath_a = split(/:/,$temp_tpathÝ1¨);
                 @tpath_b = split(/:/,$temp_tpathÝ2¨);
                 $chp_extra = "<BR><BR><b>Connect to $tpath_aÝ1¨</b>,<BR>CHP: $tpath_aÝ0¨:$tpath_aÝ2¨";
                 if(scalar @tpath_a > 3) { $chp_extra .= ", CU: $tpath_aÝ3¨, DEV: $tpath_aÝ4¨"; }
                 $chp_extra .= "<BR><BR>";
                 $chp_extra .="<b>This side:</b> CHP: $tpath_bÝ0¨:$tpath_bÝ2¨";
                 if(scalar @tpath_b > 3) { $chp_extra .= ", CU: $tpath_bÝ3¨, DEV: $tpath_bÝ4¨"; }
              }
          }
          if($url_system ne "ALL" && index($chp_sys,$url_system) eq -1) { next; }
          $css_id = "&nbsp;";
          if(index($chp_num,"CSS") ne -1) {
             $chp_num  =~ s/,/ /g;
             $chp_num  =~ s/CSS//g;
             ($css_id,$tchp_num) = split(/ /,$chp_num);
             $chp_num = $tchp_num;
          }
          print "<tr>\n";
          print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">\n$chp_num\n</td>\n";
          print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">\n$css_id\n</td>\n";
          print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">\n$chp_pchid\n</td>\n";
          print "<td align=\"center\" width=\"30%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">\n$chp_sys$chp_extra\n</td>\n";
          print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">\n$chp_type\n</td>\n";
          print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_r\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">\n$chp_sw\n</td>\n";
          print "</tr>\n";
       }
   }
   print "<tr>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">&nbsp;</td>\n";
   print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">&nbsp;</td>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">&nbsp;</td>\n";
   print "<td align=\"center\" width=\"30%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">&nbsp;</td>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">&nbsp;</td>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_r\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">&nbsp;</td>\n";
   print "</tr>\n";
   print "</table>";

   print "</td>";

##########################################################################################################
# Display spacer between the columns
##########################################################################################################
   print "<td align=\"left\" valign=top width=\"3%\" style=\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\">&nbsp;</td>";

##########################################################################################################
# Display unused CUs
##########################################################################################################
   print "<td align=\"left\" valign=top width=\"20%\" style=\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\">";

   print "<BR><TABLE align=\"left\" WIDTH=\"40%\" cellpadding=2 cellspacing=0>\n";
   print "<tr>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#009900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">CU</td>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#009900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">CUA</td>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#009900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Unit</td>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#009900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Link</td>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_head_r\" bgcolor=\"#009900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">UA</td>\n";
   print "</tr>\n";

   for($k=0; $k<scalar @iodevices; $k++) {
       if($iodevicesÝ$k¨ ne "EMPTY" && index($iodevicesÝ$k¨,"CNTLUNIT") ne -1) {
          $cu_num = "&nbsp;";
          $cu_cua = "&nbsp;";
          $cu_unit= "&nbsp;";
          $cu_link= "&nbsp;";
          $cu_ua  = "&nbsp;";
          $cu_path= "&nbsp;";
          @temp_cu = split(/ /,$iodevicesÝ$k¨);
          $cu_num  = $temp_cuÝ1¨;
          $cu_path = $temp_cuÝ2¨;
          $cu_num  =~ s/CUNUMBR=//g;
          $cu_path =~ s/PATH=//g;
          $cu_path =~ s/\,/ /g;
          $cu_path =~ s/\(//g;
          $cu_path =~ s/\)//g;
          foreach $temp_cu (@temp_cu) {
              if(index($temp_cu,"UNIT=") ne -1)    { $temp_cu =~ s/UNIT=//g; $cu_unit = $temp_cu; }
              if(index($temp_cu,"UNITADD=") ne -1) { $temp_cu =~ s/UNITADD=//g; $temp_cu =~ s/\(//g; $temp_cu =~ s/\)//g; $cu_ua = $temp_cu; }
              if(index($temp_cu,"CUADD=") ne -1)   { $temp_cu =~ s/CUADD=//g; $cu_cua = $temp_cu; }
              if(index($temp_cu,"LINK=") ne -1)    { $temp_cu =~ s/LINK=//g; $temp_cu =~ s/\(//g; $temp_cu =~ s/\)//g; $cu_link = $temp_cu; }
          }
          print "<tr>\n";
          print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">\n$cu_num\n</td>\n";
          print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">\n$cu_cua\n</td>\n";
          print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">\n$cu_unit\n</td>\n";
          print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">\n$cu_link\n</td>\n";
          print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_r\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">\n$cu_ua\n</td>\n";
          print "</tr>\n";
       }
   }
   print "<tr>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">&nbsp;</td>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">&nbsp;</td>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">&nbsp;</td>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">&nbsp;</td>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_r\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">&nbsp;</td>\n";
   print "</tr>\n";
   print "</table>";
   print "</td>";

##########################################################################################################
# Display spacer between the columns
##########################################################################################################
   print "<td align=\"left\" valign=top width=\"3%\" style=\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\">&nbsp;</td>";

##########################################################################################################
# Display unused IO Devices
##########################################################################################################
   print "<td align=\"left\" valign=top width=\"20%\" style=\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\">";

   print "<BR><TABLE align=\"left\" WIDTH=\"40%\" cellpadding=2 cellspacing=0>\n";
   print "<tr>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#000099\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Device</td>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#000099\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">CU</td>\n";
   print "<td align=\"center\" width=\"35%\" valign=\"top\" class=\"box_head_r\" bgcolor=\"#000099\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Attributes</td>\n";
   print "</tr>\n";

   for($k=0; $k<scalar @iodevices; $k++) {
       if($iodevicesÝ$k¨ ne "EMPTY" && index($iodevicesÝ$k¨,"IODEVICE") ne -1) {
          $device_num = "&nbsp;";
          $device_cu  = "&nbsp;";
          $device_attrs = "&nbsp;";
          @temp_iod = split(/ /,$iodevicesÝ$k¨);
          $temp_iodÝ1¨ =~ s/ADDRESS=//g;
          $temp_iodÝ1¨ =~ s/\(//g;
          $temp_iodÝ1¨ =~ s/\)//g;
          $device_num  = $temp_iodÝ1¨;
          foreach $temp_iod (@temp_iod) {
              if(index($temp_iod,"CUNUMBR") ne -1) {
                 $temp_iod=~ s/CUNUMBR=//g;
                 $temp_iod=~ s/\,/ /g;
                 $temp_iod=~ s/\(//g;
                 $temp_iod=~ s/\)//g;
                 $device_cu = $temp_iod;
              }
              $found_attr = 0;
              if(index($temp_iod,"UNIT=") ne -1)    { $found_attr = 1; }
              if(index($temp_iod,"UNITADD=") ne -1) { $found_attr = 1; }
              if(index($temp_iod,"STADET=") ne -1)  { $found_attr = 1; }
              if(index($temp_iod,"TIMEOUT=") ne -1) { $found_attr = 1; }
              if(index($temp_iod,"MODEL=") ne -1)   { $found_attr = 1; }
              if($found_attr eq 1) {
                 if(length($device_attrs) ne 0) { $device_attrs .= ","; }
                 $device_attrs .= $temp_iod;
              }
          }
          print "<tr>\n";
          print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">\n$device_num\n</td>\n";
          print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">\n$device_cu\n</td>\n";
          print "<td align=\"center\" width=\"35%\" valign=\"top\" class=\"box_r\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">\n$device_attrs\n</td>\n";
          print "</tr>\n";
       }
   }
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">&nbsp;</td>\n";
   print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">&nbsp;</td>\n";
   print "<td align=\"center\" width=\"35%\" valign=\"top\" class=\"box_r\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">&nbsp;</td>\n";
   print "</table>";
   print "</td>";

##########################################################################################################
# Finish the table
##########################################################################################################
   print "<td align=\"left\" valign=top width=\"24%\" style=\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\">&nbsp;</td>";
   print "</tr></table><BR><BR>";
}
##########################################################################################################
# Display Switches
##########################################################################################################
   print "<TABLE align=\"center\" WIDTH=\"100%\" cellpadding=0 cellspacing=0>\n";
   print "<tr><td colspan=6 align=\"left\" class=\"box\" bgcolor=\"#444444\" style=\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\">&nbsp;Switches</td></tr>\n";
   print "<tr><td align=\"left\" valign=top width=\"20%\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">";
   print "<BR>";

##########################################################################################################
# Step through the IODF array, and add the switch to a string, making sure we do not repeat any!
# Put the string into an array, sort it, and then remove any blank entries.
##########################################################################################################
   $switches = "";
   for($k=0; $k<$IODF_count; $k = $k + ($IODFÝ$k¨Ý12¨)) {
       if($url_device_type ne "ALL") {
          $mk = 0;
          if(index($IODFÝ$k¨Ý6¨,$url_device_type) ne -1) { $mk = 1; }
          $switch_list = $device_sw_list{$url_device_type};
          if(index($switch_list,$IODFÝ$k¨Ý6¨) ne -1) { $mk = 1; }
          if($mk eq 0) { next; }
       }
       if($url_system ne "ALL") {
          $mk = 0;
          if(index($IODFÝ$k¨Ý1¨,$url_system) ne -1) { $mk = 1; }
          if($mk eq 0) { next; }
       }

#       if(index($IODFÝ$k¨Ý6¨,$url_device_type) eq -1 && $url_device_type ne "ALL") { next; }
#       $chp_num = $IODFÝ$k¨Ý0¨;
#       $chp_sw  = $IODFÝ$k¨Ý3¨;
#       $cu_name = $IODFÝ$k¨Ý4¨;
#       $cu_type = $IODFÝ$k¨Ý6¨;
#       $cu_link = $IODFÝ$k¨Ý7¨;

       $IODFÝ$k¨Ý3¨ =~ s/<BR>//g;
       if(index($switches,$IODFÝ$k¨Ý3¨) eq -1) {
          $switches .= $IODFÝ$k¨Ý3¨ . " ";
       }
   }
   @switch = split(/ /,$switches);
   @switch = sort(switch_sort @switch);
   for($a=0; $a<scalar @switch; $a++) {
       if($switchÝ$a¨ eq "" || $switchÝ$a¨ eq " " || $switchÝ$a¨ eq "&nbsp;") {
          splice(@switch,$a,1);
       }
   }
   $switch_count = scalar @switch;
   print "<b>There are $switch_count switches defined.</b><BR><BR>";

   if($iodf_sys eq "2086") {
      print "Outbound Port = CSS:Port<BR>CHPID = CSS:CHP<BR><BR>";
   }

##########################################################################################################
# Blank the DUP column in the array.
##########################################################################################################
   for($a=0; $a<scalar @SWDATA; $a++) {
       $SWDATAÝ$a¨Ý11¨= "";
   }

##########################################################################################################
# Step through the array, and split the Links into their separate entry.
##########################################################################################################
   $SWDATA_count = $IODF_count;
   for($a=0; $a<scalar @SWDATA; $a++) {
       if($SWDATAÝ$a¨Ý7¨ eq "") { next; }
       if($SWDATAÝ$a¨Ý11¨ eq "DUP") { last; }
       @temp_links = split(/,/,$SWDATAÝ$a¨Ý7¨);
       $SWDATAÝ$a¨Ý7¨ = $temp_linksÝ0¨;
       $len_links = scalar @temp_links;
       if($len_links > 1) {
          for($pt=1; $pt<$len_links; $pt++) {
              $SWDATAÝ$IODF_count¨Ý9¨ = $SWDATAÝ$a¨Ý9¨;
              $SWDATAÝ$IODF_count¨Ý10¨= $SWDATAÝ$a¨Ý10¨;
              $SWDATAÝ$IODF_count¨Ý4¨ = $SWDATAÝ$a¨Ý4¨;
              $SWDATAÝ$IODF_count¨Ý5¨ = $SWDATAÝ$a¨Ý5¨;
              $SWDATAÝ$IODF_count¨Ý6¨ = $SWDATAÝ$a¨Ý6¨;
              $SWDATAÝ$IODF_count¨Ý7¨ = $temp_linksÝ$pt¨;
              $SWDATAÝ$IODF_count¨Ý8¨ = $SWDATAÝ$a¨Ý8¨;
              $SWDATAÝ$IODF_count¨Ý0¨ = $SWDATAÝ$a¨Ý0¨;
              $SWDATAÝ$IODF_count¨Ý11¨= "DUP";
              $SWDATA_count++;
          }
       }
   }
##########################################################################################################
# Now we adjust the size of the array, and sort it in SWITCH, LINK, CHPID, CU order.
##########################################################################################################
   $#SWDATA -= ($max_len - $SWDATA_count);
   @SWDATA = sort(switch_iodf_sort @SWDATA);
   for($a=0; $a<scalar @SWDATA; $a++) {
       if($SWDATAÝ$a¨Ý3¨ ne "") {
          splice(@SWDATA,0,$a);
          $SWDATA_count -= $a;
          last;
       }
   }

##########################################################################################################
# Before we display the data, we traverse the array in order to blank out common elements. First we check
# the SWITCH. We get the number of the first occurrence and then search to get the last occurrence - each
# stored in start_one and last_one. This forms the count that is stored in the first element and contains
# the number of subsequent entries associated with this SWITCH.
#
# We then compare each element within this range against its previous one. If they match an element then
# the element of the later element is blanked out - hence why we loop backwards. We check the LINK, CHPID,
# CU and UNIT type.
##########################################################################################################
   for($k=0; $k<$SWDATA_count; $k++) {
       $last_one = $k;
       for($j=$k; $j<$SWDATA_count; $j++) {
           if($SWDATAÝ$j¨Ý3¨ ne $SWDATAÝ$k¨Ý3¨) {
              $last_one = $j;
              last;
           }
       }
       if($last_one eq $k) { $last_one = $SWDATA_count; }
       $start_one = $k;
       $last_one--;
       $SWDATAÝ$k¨Ý12¨ = ($last_one - $start_one) + 1;
       for($l=$last_one; $l>$start_one; $l--) {
           $n = $l - 1;
           $shall_we_leave = 0;
           if($SWDATAÝ$l¨Ý3¨ eq $SWDATAÝ$n¨Ý3¨) { $SWDATAÝ$l¨Ý3¨ = ""; $shall_we_leave = 1; }
           if($SWDATAÝ$l¨Ý7¨ eq $SWDATAÝ$n¨Ý7¨ && $shall_we_leave eq 1) { $SWDATAÝ$l¨Ý7¨ = ""; $shall_we_leave = 2; }
           if($SWDATAÝ$l¨Ý0¨ eq $SWDATAÝ$n¨Ý0¨ && $shall_we_leave eq 2) { $SWDATAÝ$l¨Ý0¨ = ""; $shall_we_leave = 3; }
           if($SWDATAÝ$l¨Ý4¨ eq $SWDATAÝ$n¨Ý4¨ && $shall_we_leave eq 3) { $SWDATAÝ$l¨Ý4¨ = ""; $shall_we_leave = 4; }
           if($SWDATAÝ$l¨Ý6¨ eq $SWDATAÝ$n¨Ý6¨ && $shall_we_leave eq 4) { $SWDATAÝ$l¨Ý6¨ = ""; $shall_we_leave = 5; }
       }
       $k = $start_one;
   }

##########################################################################################################
# In order to place 3 switches per row, we start a table, then loop through the switches, using a modulus
# to determine when to place the rows and colum spacings.
##########################################################################################################
   print "<TABLE align=\"center\" WIDTH=\"100%\" cellpadding=0 cellspacing=0>\n";

   for($swc=0; $swc<$switch_count; $swc++) {
       $result = $swc % 3;
       if($result eq 0) { print "<tr>\n"; }
       if($result ne 0) {
          print "<td width=\"5%\" align=\"center\" valign=\"top\" style=\"font-family:arial,verdana; font-size:14px; color:white; line-height:16px\">&nbsp;</td>\n";
       }
       print "<td width=\"30%\" align=\"center\" valign=\"top\" style=\"font-family:arial,verdana; font-size:14px; color:white; line-height:16px\">\n";
       print "<TABLE WIDTH=\"100%\" cellpadding=2 cellspacing=0>\n";
       print "<tr><td align=\"left\" colspan=4 valign=\"top\" bgcolor=\"#000000\" style=\"font-family:arial,verdana; font-size:14px; color:white; line-height:16px\">&nbsp;<b>Switch $switchÝ$swc¨</b></td></tr>\n";
       print "<tr>\n";
       print "<td align=\"center\" width=\"8%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#999900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Outbound Port</td>\n";
       print "<td align=\"center\" width=\"8%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#999900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">CHPID</td>\n";
       print "<td align=\"center\" width=\"8%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#999900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Control Unit</td>\n";
       print "<td align=\"center\" width=\"8%\" valign=\"top\" class=\"box_head_r\" bgcolor=\"#999900\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Unit Type</td>\n";
       print "</tr>\n";

##########################################################################################################
# For this particular switch, we find our switch in the array, and then loop forward using the counter
# and so we display the data. If an entry is blank, then we ignore it.
##########################################################################################################
       for($k=0; $k<$SWDATA_count; $k = $k + ($SWDATAÝ$k¨Ý12¨)) {
           if($SWDATAÝ$k¨Ý6¨ eq "") { next; }

           if($SWDATAÝ$k¨Ý3¨ eq $switchÝ$swc¨) {
              print "<tr>\n";
              print "<td align=\"center\" width=\"8%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">";
              for($a=$k; $a<($k + $SWDATAÝ$k¨Ý12¨); $a++) {
                  if($SWDATAÝ$a¨Ý7¨ eq "" && $SWDATAÝ$a¨Ý0¨ eq "" && $SWDATAÝ$a¨Ý4¨ eq "" && $SWDATAÝ$a¨Ý6¨ eq "") { next;}
                  if($url_system ne "ALL" && index($SWDATAÝ$a¨Ý1¨,$url_system) eq -1) { next; }
                  print "$SWDATAÝ$a¨Ý7¨<BR>";
              }
              print "</td>\n";
              print "<td align=\"center\" width=\"8%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">";
              for($a=$k; $a<($k + $SWDATAÝ$k¨Ý12¨); $a++) {
                  if($SWDATAÝ$a¨Ý7¨ eq "" && $SWDATAÝ$a¨Ý0¨ eq "" && $SWDATAÝ$a¨Ý4¨ eq "" && $SWDATAÝ$a¨Ý6¨ eq "") { next;}
                  if($url_system ne "ALL" && index($SWDATAÝ$a¨Ý1¨,$url_system) eq -1) { next; }
                  print "$SWDATAÝ$a¨Ý0¨<BR>";
              }
              print "</td>\n";
              print "<td align=\"center\" width=\"8%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">";
              for($a=$k; $a<($k + $SWDATAÝ$k¨Ý12¨); $a++) {
                  if($SWDATAÝ$a¨Ý7¨ eq "" && $SWDATAÝ$a¨Ý0¨ eq "" && $SWDATAÝ$a¨Ý4¨ eq "" && $SWDATAÝ$a¨Ý6¨ eq "") { next;}
                  if($url_system ne "ALL" && index($SWDATAÝ$a¨Ý1¨,$url_system) eq -1) { next; }
                  print "$SWDATAÝ$a¨Ý4¨<BR>";
              }
              print "</td>\n";
              print "<td align=\"center\" width=\"8%\" valign=\"top\" class=\"box_r\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">";
              for($a=$k; $a<($k + $SWDATAÝ$k¨Ý12¨); $a++) {
                  if($SWDATAÝ$a¨Ý7¨ eq "" && $SWDATAÝ$a¨Ý0¨ eq "" && $SWDATAÝ$a¨Ý4¨ eq "" && $SWDATAÝ$a¨Ý6¨ eq "") { next;}
                  if($url_system ne "ALL" && index($SWDATAÝ$a¨Ý1¨,$url_system) eq -1) { next; }
                  print "$SWDATAÝ$a¨Ý6¨<BR>";
              }
              print "</td>\n";
              print "</tr>\n";
           }
       }
       print "</table><BR><BR>\n";
       print "</td>\n";
       if($result eq 2) { print "</tr>\n"; }
   }

   print "</table></td></tr></table>\n";

#     for($k=0; $k<$SWDATA_count; $k++) {
#         print ">>$SWDATAÝ$k¨Ý3¨,$SWDATAÝ$k¨Ý7¨,$SWDATAÝ$k¨Ý0¨,$SWDATAÝ$k¨Ý4¨,$SWDATAÝ$k¨Ý6¨<< >$SWDATAÝ$k¨Ý11¨,$SWDATAÝ$k¨Ý12¨< <BR>\n";
#     }

##########################################################################################################
# Display PCHIDs
##########################################################################################################
   if($url_device_type eq "ALL" && index($iodf_resource,"CSS(") ne -1 && $url_system eq "ALL") {
      for($k=0; $k<$max_len; $k++) {
          $PDATAÝ$k¨ = Ý"", "", "", "", "", "", "", "", "", "", "", "", "", "", "" ¨;
      }
##########################################################################################################
# Now we sort in PCHID and CHP order.
##########################################################################################################
      @PCDATA = sort(pchid_iodf_sort @PCDATA);
      $PDATA_count = 0;
      for($ki=0; $ki<scalar @PCDATA; $ki++) {
          if($PCDATAÝ$ki¨Ý0¨ eq "") { next; }
          for($kl=0; $kl<$max_elements; $kl++) {
              $PDATAÝ$PDATA_count¨Ý$kl¨ = $PCDATAÝ$ki¨Ý$kl¨;
          }
          $PDATA_count++;
      }
      $#PDATA = $PDATA_count;

##########################################################################################################
# Before we display the data, we traverse the array in order to blank out common elements. First we check
# the SWITCH. We get the number of the first occurrence and then search to get the last occurrence - each
# stored in start_one and last_one. This forms the count that is stored in the first element and contains
# the number of subsequent entries associated with this SWITCH.
#
# We then compare each element within this range against its previous one. If they match an element then
# the element of the later element is blanked out - hence why we loop backwards. We check the LINK, CHPID,
# CU and UNIT type.
##########################################################################################################
      for($k=0; $k<$PDATA_count; $k++) {
          $last_one = $k;
          for($j=$k; $j<$PDATA_count; $j++) {
              if($PDATAÝ$j¨Ý13¨ ne $PDATAÝ$k¨Ý13¨) {
                 $last_one = $j;
                 last;
              }
          }
          if($last_one eq $k) { $last_one = $PDATA_count; }
          $start_one = $k;
          $last_one--;
          $PDATAÝ$k¨Ý12¨ = ($last_one - $start_one) + 1;
          for($l=$last_one; $l>$start_one; $l--) {
              $n = $l - 1;
              $shall_we_leave = 0;
              if($PDATAÝ$l¨Ý13¨ eq $PDATAÝ$n¨Ý13¨) { $PDATAÝ$l¨Ý13¨ = ""; $shall_we_leave = 1; }
              if($PDATAÝ$l¨Ý0¨ eq $PDATAÝ$n¨Ý0¨ && $shall_we_leave eq 1) { $PDATAÝ$l¨Ý0¨ = ""; $shall_we_leave = 2; }
          }
          $k = $start_one;
      }

      print "<BR><TABLE align=\"center\" WIDTH=\"100%\" cellpadding=0 cellspacing=0>\n";
      print "<tr><td align=\"left\" class=\"box\" bgcolor=\"#444444\" style=\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\">&nbsp;Physical Channel IDs </td></tr>\n";
      print "<tr><td align=\"left\" valign=top width=\"40%\" style=\"font-family:arial,verdana; font-size:16px; font-weight:bold; color:white; line-height:18px\">";
      print "<BR>";

      print "<TABLE align=\"left\" WIDTH=\"50%\" cellpadding=2 cellspacing=0>\n";
      print "<tr>\n";
      print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">CSS</td>\n";
      print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">PCHID</td>\n";
      print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">CHP</td>\n";
      print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_head_l\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">Type</td>\n";
      print "<td align=\"center\" width=\"20%\" valign=\"top\" class=\"box_head_r\" bgcolor=\"#990000\" style=\"font-family:arial,verdana; font-size:12px; color:white; line-height:14px\">System</td>\n";
      print "</tr>\n";

      for($k=0; $k<$PDATA_count; $k++) {
          if($PDATAÝ$k¨Ý0¨ eq "") { next; }
          $chp_extra = "";
          if($PDATAÝ$k¨Ý14¨ ne "") {
             $chp_extra = "<BR><b>$PDATAÝ$k¨Ý14¨</b>";
          }
          if(index($PDATAÝ$k¨Ý0¨,":") ne -1) {
             ($css_id,$chp_num) = split(/:/,$PDATAÝ$k¨Ý0¨);
          }
          if($PDATAÝ$k¨Ý1¨ eq "") { $PDATAÝ$k¨Ý1¨ = "&nbsp;"; }
          if($PDATAÝ$k¨Ý13¨ eq "") { $PDATAÝ$k¨Ý13¨ = "&nbsp;"; }
          print "<tr>\n";
          print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">\n$css_id\n</td>\n";
          print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">\n$PDATAÝ$k¨Ý13¨\n</td>\n";
          print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">\n$chp_num\n</td>\n";
          print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">\n$PDATAÝ$k¨Ý2¨\n</td>\n";
          print "<td align=\"center\" width=\"20%\" valign=\"top\" class=\"box_r\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">\n$PDATAÝ$k¨Ý1¨$chp_extra\n</td>\n";
          print "</tr>\n";
      }
      print "<tr>\n";
      print "<td align=\"center\" width=\"3%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">&nbsp;</td>\n";
      print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">&nbsp;</td>\n";
      print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">&nbsp;</td>\n";
      print "<td align=\"center\" width=\"5%\" valign=\"top\" class=\"box_l\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">&nbsp;</td>\n";
      print "<td align=\"center\" width=\"20%\" valign=\"top\" class=\"box_r\" style=\"font-family:arial,verdana; font-size:12px; color:black; line-height:14px\">&nbsp;</td>\n";
      print "</tr>\n";
      print "</table>\n";
      print "</tr>\n";
      print "</table>";
   }
##########################################################################################################
# And now we finish the main body of the page.
##########################################################################################################
}
print <<ENDHTML_E;
<BR><BR>
<hr size=1 width="100%" color=black>
<small>End</small><BR>
</td></tr></table>
<br><br>
</body>
<HEAD>
<META HTTP-EQUIV="Expires" CONTENT="-1">
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
</HEAD>
</html>
ENDHTML_E

exit;

##########################################################################################################
# Routines
##########################################################################################################

##########################################################################################################
# Sort IODFs into numeric order
##########################################################################################################
sub iodf_sort {
    ($aa,$a1) = split(/\./,$a);
    ($bb,$b1) = split(/\./,$b);
    $aa = lc $aa;
    $bb = lc $bb;
    $aa =~ s/iodf//g;
    $bb =~ s/iodf//g;
    return int($aa) <=> int($bb);
}

##########################################################################################################
# Display an error
##########################################################################################################
sub display_error {
    print "<BR><BR><TABLE align=\"center\" class=\"box\" WIDTH=\"70%\" cellpadding=0 cellspacing=0>";
    print "<tr><td align=\"left\" class=\"err_heading\" style=\"font-family:arial,verdana; font-size:20px; color:#FFFFFF; line-height:30px\">&nbsp;&nbsp;<b>ERROR:</b></td></tr>";
    print "<tr><td align=\"left\" style=\"font-family:arial,verdana; font-size:14px; color:black; font-weight:bold; line-height:16px\"><BR><BR>&nbsp;&nbsp;$_Ý0¨<BR><BR></td></tr>";
    print "<tr><td align=\"left\" style=\"font-family:arial,verdana; font-size:14px; color:black; line-height:16px\">&nbsp;&nbsp;<A HREF=\"$cgi_directory/$script_name\">Back To IODF Menu</A><BR><BR></td></tr>";
    print "</table>";

}

##########################################################################################################
# Remove leading and trailing blanks
##########################################################################################################
sub trim {
    my $str = $_Ý0¨;
    $str =~ s/¬ *//;
    $str =~ s/ *$//;
    return $str;
}

##########################################################################################################
# Sort IODF array on CHPID, CU and IODEVICE.
##########################################################################################################
sub new_iodf_sort {
    $t_a = $a->Ý0¨;
    $t_b = $b->Ý0¨;
    $t_a =~ s/://;
    $t_b =~ s/://;
#    $p1 = hex $a->Ý0¨ <=> hex $b->Ý0¨;
    $p1 = hex $t_a <=> hex $t_b;
    $p2 = hex $a->Ý4¨ <=> hex $b->Ý4¨;
    ($t_pa1,$t_pa2) = split(/,/,$a->Ý9¨);
    ($t_pb1,$t_pb2) = split(/,/,$b->Ý9¨);
    $p3 = hex $t_pa1 <=> hex $t_pb1;
    if($p1 ne 0) { return $p1; }
    if($p2 ne 0) { return $p2; }
    if($p3 ne 0) { return $p3; }
    return 0;
}

##########################################################################################################
# Sort Switch array.
##########################################################################################################
sub switch_sort {
    return hex $a <=> hex $b;
}

##########################################################################################################
# IODF Menu sort
##########################################################################################################
sub iodf_menu_sort {
    return $a cmp $b;
}

##########################################################################################################
# Sort Switch array.
##########################################################################################################
sub switch_iodf_sort {
    $p1 = hex $a->Ý3¨ <=> hex $b->Ý3¨;
    $p2 = hex $a->Ý7¨ <=> hex $b->Ý7¨;
    $p3 = hex $a->Ý0¨ <=> hex $b->Ý0¨;
    $p4 = hex $a->Ý4¨ <=> hex $b->Ý4¨;
    if($p1 ne 0) { return $p1; }
    if($p2 ne 0) { return $p2; }
    if($p3 ne 0) { return $p3; }
    if($p4 ne 0) { return $p4; }
    return 0;
}

##########################################################################################################
# Sort PCHID array.
##########################################################################################################
sub pchid_iodf_sort {
#    if($a->Ý13¨ eq "") { return -1; }
#    if($b->Ý13¨ eq "") { return 0; }
    $t_a = substr($a->Ý0¨,0,1);
    $t_b = substr($b->Ý0¨,0,1);
#    $t_a =~ s/://;
#    $t_b =~ s/://;
    $p1 = hex $a->Ý13¨ <=> hex $b->Ý13¨;
    $p2 = $t_a <=> $t_b;
    if($p1 ne 0) { return $p1; }
    if($p2 ne 0) { return $p2; }
    return 0;
}
##########################################################################################################
#                                             END of program and routines
##########################################################################################################
