{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011408000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 6584032, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 10, "INMDSNAM": "CBT.V500.FILE171.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 6584032, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 6584032, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE171.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00e\\x05'", "DS1TRBAL": "b'\\x82('"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01)\\x00\\x06\\x010\\x00\\x02\\x00f'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04L\\x00\\x00\\x01\\x076O\\x01\\x076O\\x109\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf6@@@'", "ispf": {"version": "04.76", "flags": 0, "createdate": "2007-12-30T00:00:00", "modifydate": "2007-12-30T10:39:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-476"}, "text": "REGULAR CBT TAPE - VERSION 476    FILE:  171\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT476.FILE171\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 26 MEMBERS COUNTED; CUMULATIVE SIZE IS 61,986 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/30/07    10:39:24    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x00\\x00\\x91\\x13o\\x01\\x00)\\x9f\\x11A\\x003\\x00 \\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "2000-10-25T11:41:00", "lines": 51, "newlines": 32, "modlines": 0, "user": "WSBG"}, "text": "                       DOCUMENTATION OF FILE 171\n\n Revised 02/14/00.  Rework ISPF stats in ./ ADD NAME= cards.   (S.Golob)\n                    Fix some assembly errors in TAPEMAP.\n Revised 02/25/99.  Add FX utility which is a VTAM application (S.Golob)\n                    that is used to send data in bulk, between\n                    different MVS systems.\n Revised 08/07/98.  Add SMFSPLIT utility to pick SMF records   (S.Golob)\n                    by type and put to output datasets.\n Revised 04/12/95.  Add TPX exit and STC application.          (S.Golob)\n Revised 02/27/95.  Add member $DITCRTW for DITTO from\n                    David Cartwright.                          (S.Golob)\n Revised 02/02/94.  Upgrade to Disassembler to fix problems.   (S.Golob)\n Revised 11/24/93.  Added SUTL utility files.                  (S.Golob)\n Revised 11/12/93.  ./ ENDUP cards from REVIEW were removed.   (S.Golob)\n Revised 02/17/93.  All files were replaced.                   (S.Golob)\n Revised 07/15/92.  All files were replaced.                   (S.Golob)\n Revised 02/10/92.  Source for DITTO and DISASM were replaced. (S.Golob)\n\n This file was contributed semi-anonymously.  The submittor wishes that\n this material not be sold, but remain in the public domain.  I will\n take calls or questions on the material in this file.\n\n              Sam Golob\n              Sam Golob Systems Programming\n              P.O. Box 906\n              Tallman, New York 10982-0906\n\n\n Packages SUTL and SMFSPLIT were added later.\n\n There are three packages in this file currently (05/16/91).  These\n are DITTO, DISASM, and TAPEMAP.  DITTO is a public-domain program\n which runs even under MVS/ESA, and which does many of the usual\n functions expected of a program of that name.  TAPEMAP is a version\n of the program on File 299 of the CBT Tape, but which is broken into\n separate CSECTs instead of being \"spaghetti-coded\", as is the former\n program.  DISASM is a rework of the disassembler of File 217, also\n broken into CSECTs, but incorporating various improvements, such as\n the ability to use REAL MACROS for the purpose of name mapping.\n\n This file consists of seven IEBUPDTE or \"PDSLOAD\" unloaded PDS'es\n which are as individual members in this file.  Each of these members\n must be expanded into a separate PDS.  Before the expansion, all\n \"><\" strings in columns 1-2 of the source must be changed to \"./\"\n first.  If PDSLOAD is being used for the expansion (its load module\n is on File 035 of the CBT Tape), ISPF statistics will be stowed\n with the expansion.\n\n Good luck.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE171": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04L\\x00\\x00\\x01\\x076O\\x01\\x076O\\x109\\x00~\\x00~\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf6@@@'", "ispf": {"version": "04.76", "flags": 0, "createdate": "2007-12-30T00:00:00", "modifydate": "2007-12-30T10:39:00", "lines": 126, "newlines": 126, "modlines": 0, "user": "CBT-476"}, "text": "//***FILE 171 is a collection of several important utilities,       *   FILE 171\n//*           contributed by Richard Rice.                          *   FILE 171\n//*                                                                 *   FILE 171\n//*           email:   Richard.L.Rice@conocophillips.com            *   FILE 171\n//*                                                                 *   FILE 171\n//*      These utilities are:                                       *   FILE 171\n//*                                                                 *   FILE 171\n//* (Removed) DITTO   -  Removed because it doesn't work anymore    *   FILE 171\n//*                      with the latest z/OS operating systems.    *   FILE 171\n//*                                                                 *   FILE 171\n//*     (New) DLIUTILS - New. Utilities to unload and reload an     *   FILE 171\n//*                      IMS DL/I database.                         *   FILE 171\n//*                                                                 *   FILE 171\n//*           TAPEMAP -  A REWRITE OF THE PROGRAM THAT IS ON        *   FILE 171\n//*                      FILE 299, BUT BROKEN INTO SEPARATE         *   FILE 171\n//*                      CSECTS AND SUBROUTINE CALLS.  The reports  *   FILE 171\n//*                      look different from the ones produced by   *   FILE 171\n//*                      File 299's TAPEMAP.                        *   FILE 171\n//*                                                                 *   FILE 171\n//*           DISASM  -  A REDESIGN OF THE DISASSEMBLER ON          *   FILE 171\n//*                      FILE 217, BUT BROKEN INTO CSECTS.  THIS    *   FILE 171\n//*                      DISASSEMBLER CALLS THE ASSEMBLER AND       *   FILE 171\n//*                      ALLOWS YOU TO USE REAL MACROS AND THEIR    *   FILE 171\n//*                      DSECTS FOR LABEL MAPPING.                  *   FILE 171\n//*                                                                 *   FILE 171\n//*           SMFSPLIT - SMFSPLIT IS AN ASSEMBLER PROGRAM WHICH     *   FILE 171\n//*                      ALLOWS YOU TO BREAK UP SMF RECORDS BY      *   FILE 171\n//*                      TYPE, TO SEPARATE DATASETS.  THIS DEALS    *   FILE 171\n//*                      WITH THE RAW SMF RECORDS.  YOU CAN POST    *   FILE 171\n//*                      PROCESS THEM LATER.  I THINK THAT THIS     *   FILE 171\n//*                      UTILITY IS QUITE A RARE DEAL.  MOST SMF    *   FILE 171\n//*                      PROCESSING PROGRAMS PICK A TYPE, AND       *   FILE 171\n//*                      FORMAT A REPORT.  THIS PROGRAM ISOLATES    *   FILE 171\n//*                      ALL RECORDS OF A GIVEN TYPE TO AN          *   FILE 171\n//*                      EXTRACTION FILE.                           *   FILE 171\n//*                                                                 *   FILE 171\n//*           TPX     -  IF THE NETWORK PACKAGE, TPX, IS RUNNING    *   FILE 171\n//*                      ON AN ISOLATED MACHINE, AND USERS FROM     *   FILE 171\n//*                      THE PRODUCTION MACHINES ARE TRYING TO      *   FILE 171\n//*                      LOG ONTO TPX, THERE IS A PROBLEM IN        *   FILE 171\n//*                      SYNCHRONIZING RACF DATABASES FROM THE      *   FILE 171\n//*                      SEPARATE SYSTEMS TO PROPERLY VERIFY THE    *   FILE 171\n//*                      LOGON.  THIS IS A TPX EXIT AND AN STC,     *   FILE 171\n//*                      WHICH SOLVES THE PROBLEM VERY INGENIOUSLY. *   FILE 171\n//*                                                                 *   FILE 171\n//*           FX      -  THIS PACKAGE IS A VTAM APPLICATION THAT    *   FILE 171\n//*                      RUNS ON MULTIPLE SYSTEMS, AND ALLOWS       *   FILE 171\n//*                      YOU TO SEND DATA FILES IN BULK, FROM       *   FILE 171\n//*                      ONE SYSTEM TO ALL OF THEM.                 *   FILE 171\n//*                                                                 *   FILE 171\n//*           SYSTEM UTILITY (SUTL)  -  A VTAM LU 6.2 APPLICATION   *   FILE 171\n//*                      THAT ALLOWS A TSO USER TO OBTAIN INFORMA-  *   FILE 171\n//*                      TION ABOUT EXECUTING JOBS, THE APF LIST,   *   FILE 171\n//*                      IPL DATE/TIME/SYSRES, LINK LIST, ETC.      *   FILE 171\n//*                      MOST OF THIS INFORMATION IS USUALLY        *   FILE 171\n//*                      AVAILABLE VIA OTHER UTILITIES ALREADY IN   *   FILE 171\n//*                      USE, BUT THIS UTILITY ALLOWS THE TSO USER  *   FILE 171\n//*                      TO GET INFO FROM A SYSTEM THAT HE IS NOT   *   FILE 171\n//*                      LOGGED ON TO.                              *   FILE 171\n//*                                                                 *   FILE 171\n//*        (NOTE.  DAVE CARTWRIGHT, WHO CONTRIBUTED FILE 172 TO     *   FILE 171\n//*                THIS TAPE, HAS MADE SOME UPDATES TO A FEW OF     *   FILE 171\n//*                THE DITTO FILES.  THIS WAS FOR AN MVS/ESA 3.1    *   FILE 171\n//*                SYSTEM.  IF YOU FEEL YOU NEED THESE UPDATES,     *   FILE 171\n//*                THEY ARE INCLUDED HERE AS MEMBER $DITCRTW.)      *   FILE 171\n//*                                                                 *   FILE 171\n//*           - - - - - - - - - - - - - - - - - - - - -             *   FILE 171\n//*                                                                 *   FILE 171\n//*                    SYSTEM UTILITY (SUTL)                        *   FILE 171\n//*                                                                 *   FILE 171\n//*        SUTL IS A VTAM LU 6.2 APPLICATION THAT ALLOWS A TSO      *   FILE 171\n//*        USER TO OBTAIN INFORMATION ABOUT EXECUTING JOBS, THE     *   FILE 171\n//*        APF LIST, IPL DATE/TIME/SYSRES, LINK LIST, ETC.  MOST    *   FILE 171\n//*        OF THIS INFORMATION IS USUALLY AVAILABLE VIA OTHER       *   FILE 171\n//*        UTILITIES ALREADY IN USE, SO WHY BOTHER GOING TO THE     *   FILE 171\n//*        TROUBLE OF 'RE-INVENTING' THIS WHEEL AND ADDING VTAM     *   FILE 171\n//*        OVER-HEAD IN THE PROCESS?  BEING A VTAM APPLICATION      *   FILE 171\n//*        MEANS THAT A TSO USER CAN GET INFO FROM A SYSTEM         *   FILE 171\n//*        THAT HE IS NOT LOGGED ON TO.  IF YOU HAVE MULTIPLE       *   FILE 171\n//*        PROCESSORS OR LPARS, YOU CAN \"WATCH\" EXECUTING JOBS ON   *   FILE 171\n//*        ANY OF THE SYSTEMS NO MATTER WHICH SYSTEM YOU ARE        *   FILE 171\n//*        LOGGED ON TO.  BESIDES IT WAS A GOOD WAY TO LEARN        *   FILE 171\n//*        SOMETHING AND HAVE A USEFUL UTILITY WHEN IT WAS          *   FILE 171\n//*        WORKING.                                                 *   FILE 171\n//*                                                                 *   FILE 171\n//*        SUTL CONSISTS OF TWO BASIC COMPONENTS, (1) A DATA        *   FILE 171\n//*        COLLECTOR THAT WOULD PROBABLY BE BEST TO RUN AS A        *   FILE 171\n//*        STARTED TASK (STC) AND (2) THE TSO/SPF CODE THAT SENDS   *   FILE 171\n//*        REQUESTS TO THE DATA COLLECTOR AND DISPLAYS THE DATA.    *   FILE 171\n//*                                                                 *   FILE 171\n//*        THE DATA COLLECTOR (STC) SHOULD BE RUN ON EACH SYSTEM.   *   FILE 171\n//*        THE STC DOES REQUIRE APF AUTHORIZATION FOR THE UCB       *   FILE 171\n//*        FUNCTION.  IF YOU REMOVE THE UCB FUNCTION, SUTL WILL     *   FILE 171\n//*        NOT REQUIRE ANY SPECIAL PRIVILEGES.                      *   FILE 171\n//*                                                                 *   FILE 171\n//*        THE TSO/SPF PART REQUIRES ONE VTAM APPL ID PER ACTIVE    *   FILE 171\n//*        TSO USER.  THESE APPL IDS ARE ASSEMBLED AND LINK         *   FILE 171\n//*        EDITED INTO A LOAD MODULE AS PART OF THE INSTALLATION    *   FILE 171\n//*        STEPS.  I FELT THAT IT WOULD BE LESS OVERHEAD PER        *   FILE 171\n//*        INVOCATION TO SEARCH A PRE-ASSEMBLED/LINK EDITED LOAD    *   FILE 171\n//*        MODULE THAN TO READ A PARAMETER DATA SET (THIS WOULD     *   FILE 171\n//*        MEAN ALLOCATING THE DATA SET, OPENING IT, READING AND    *   FILE 171\n//*        SCANNING EACH STATEMENT, CLOSING, AND THEN               *   FILE 171\n//*        DE-ALLOCATING).                                          *   FILE 171\n//*                                                                 *   FILE 171\n//*   IEFUTL  -  A sample IEFUTL SMF exit which does the following  *   FILE 171\n//*              things:                                            *   FILE 171\n//*                                                                 *   FILE 171\n//*        If this is for a batch job or started                    *   FILE 171\n//*        task, allow to abend.                                    *   FILE 171\n//*                                                                 *   FILE 171\n//*        For TSO users:                                           *   FILE 171\n//*        Check user's access to a RACF resource.                  *   FILE 171\n//*        As is, this exit checks for the user's access to         *   FILE 171\n//*        class 'TIMEOUT', entity 'TSOUSER'.                       *   FILE 171\n//*                                                                 *   FILE 171\n//*        If permitted to resource                                 *   FILE 171\n//*          If wait time exceeded                                  *   FILE 171\n//*             extend time 5 minutes                               *   FILE 171\n//*                                                                 *   FILE 171\n//*        If CPU time exceeded                                     *   FILE 171\n//*          cancel                                                 *   FILE 171\n//*                                                                 *   FILE 171\n//*        If not permitted to resource                             *   FILE 171\n//*          cancel                                                 *   FILE 171\n//*                                                                 *   FILE 171\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DISASJCL": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04(\\x7f\\x01\\x04(\\x7f\\tS\\x02Q\\x02Q\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-10-13T00:00:00", "modifydate": "2004-10-13T09:53:00", "lines": 593, "newlines": 593, "modlines": 0, "user": "RLRICE"}, "text": "./ ADD NAME=$$$DOC   0103-04278-04285-1143-00040-00026-00000-RLRICE\n\n ** new as of Oct 2004.  The disassembler can process assembler\n    output with LRECL 121 or LRECL 133.  There is a new option\n    called &ASM that you need to set before assembling the\n    disassembler (install step 5).\n\n\n\n\n               Installing the disassembler\n\n 1. Allocate a SOURCE, MACRO, and JCL library (the source and macros\n    must in separate libraries, some members have the same names).\n    Space on a 3380 is 15 tracks for the source, 5 for the macros, and\n    2 for the JCL.  DCB info for all 3 is RECFM=FB,LRECL=80,BLKSIZE=3120\n\n 2. If you want to pre-process DSECTs allocate a PDS with\n    RECFM=VB, LRECL=33, and BLKSIZE=6000.  The block size can be\n    whatever is efficient for your disks.\n\n 3. If you want to keep the disassembler in a separate load library,\n    allocate this library, it does not have to be APF authorized.\n\n 4. Load the source, macro, and JCL libraries.\n\n 5. Edit member DISASMGB in the macro library to select the options you\n    want.\n\n 6. Edit the ASMLINK member of the JCL library to fit your library names\n\n 7. Run the ASMLINK member to assemble and link-edit the disassembler.\n\n 8. The disassembler should be ready for use.  Edit the DISASM and\n    DISASMU1 members of the JCL library to use your JOB card requirements\n    and the data set names to use your library names.  Member DISASMDC\n    and DISASMTS of the source library are documentation.\n\n 9. Optionally pre-process DSECTs using DISASMU1.\n\n10. Run the disassembler.\n./ ADD NAME=ALLOC    0101-04279-04285-1223-00021-00025-00000-RLRICE\n//........ JOB ....................\n//SOURCE   DD DSN=........SOURCE,DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSALLDA,VOL=SER=SWTS14,\n//            SPACE=(TRK,(15,5,5)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//MACLIB   DD DSN=........MACLIB,DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSALLDA,VOL=SER=SWTS14,\n//            SPACE=(TRK,(5,5,5)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//JCLLIB   DD DSN=........JCL,DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSALLDA,VOL=SER=SWTS14,\n//            SPACE=(TRK,(2,5,5)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//DSECT    DD DSN=........DSECT,DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSALLDA,VOL=SER=SWTS14,\n//            SPACE=(TRK,(5,5,5)),\n//            DCB=(RECFM=VB,LRECL=33,BLKSIZE=6000)\n//LOADLIB  DD DSN=........LOADLIB,DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSALLDA,VOL=SER=SWTS14,\n//            SPACE=(TRK,(5,5,5)),\n//            DCB=(RECFM=U,BLKSIZE=6144)\n./ ADD NAME=ASMLINK  0101-04275-04275-1226-00085-00083-00000-RLRICE\n//........ JOB ...................\n//ASMLINK  PROC NAME=,\n//             AP=,\n//             LIST='SYSOUT=*,FCB=2'\n//ASM      EXEC PGM=IEV90,COND=(4,LT),\n//             REGION=4096K,\n//             PARM='LINECOUNT(55),DECK,NOOBJECT,XREF(SHORT),&AP'\n//SYSPRINT DD   &LIST\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLIB   DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.MODGEN,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//         DD   DSN=.....DISASM.MACLIB,DISP=SHR         <--------------\n//SYSPUNCH DD   DSN=&&OBJ(&NAME),DISP=(OLD,PASS)\n//SYSIN    DD   DSN=.....DISASM.SOURCE(&NAME),DISP=SHR  <--------------\n// PEND\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           ALLOCATE TEMP OBJECT LIBRARY                            *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//ALLOC    EXEC PGM=IEFBR14\n//OBJ      DD DSN=&&OBJ,DISP=(NEW,PASS),\n//            UNIT=SYSDA,\n//            SPACE=(TRK,(15,15,15)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           ASSEMBLE ALL MODULES                                    *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//DISASM00 EXEC ASMLINK,NAME=DISASM00\n//DISASM01 EXEC ASMLINK,NAME=DISASM01\n//DISASM02 EXEC ASMLINK,NAME=DISASM02\n//DISASM03 EXEC ASMLINK,NAME=DISASM03\n//DISASM04 EXEC ASMLINK,NAME=DISASM04\n//DISASM05 EXEC ASMLINK,NAME=DISASM05\n//DISASM06 EXEC ASMLINK,NAME=DISASM06\n//DISASM07 EXEC ASMLINK,NAME=DISASM07\n//DISASM08 EXEC ASMLINK,NAME=DISASM08\n//DISASM09 EXEC ASMLINK,NAME=DISASM09\n//DISASM10 EXEC ASMLINK,NAME=DISASM10\n//DISASMB2 EXEC ASMLINK,NAME=DISASMB2\n//DISASMDB EXEC ASMLINK,NAME=DISASMDB\n//DISASMOP EXEC ASMLINK,NAME=DISASMOP\n//DISASMPR EXEC ASMLINK,NAME=DISASMPR\n//DISASMRR EXEC ASMLINK,NAME=DISASMRR\n//DISASMU1 EXEC ASMLINK,NAME=DISASMU1\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK DISASSEMBLER                                       *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINK     EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=&&OBJ,DISP=(OLD,DELETE)\n//SYSLMOD  DD  DSN=.............,DISP=SHR              <--------------\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(DISASM00)               COMMON MODULE\n  INCLUDE SYSLIB(DISASM01)               MAINLINE\n  INCLUDE SYSLIB(DISASM02)               PARAMETER READER/CONVERTER\n  INCLUDE SYSLIB(DISASM03)               MODULE READER\n  INCLUDE SYSLIB(DISASM04)               CESD RECORD PROCESSOR\n  INCLUDE SYSLIB(DISASM05)               RLD DATA PROCESSOR\n  INCLUDE SYSLIB(DISASM06)               TEXT PRINTER\n  INCLUDE SYSLIB(DISASM07)               DSECT INTERPRETER\n  INCLUDE SYSLIB(DISASM08)               REFERENCE TABLE GENERATOR\n  INCLUDE SYSLIB(DISASM09)               SOURCE CODE GENERATOR\n  INCLUDE SYSLIB(DISASM10)\n  INCLUDE SYSLIB(DISASMOP)               OPCODE TABLE\n  INCLUDE SYSLIB(DISASMB2)               B2 INSTRUCTION INTERPRETER\n  INCLUDE SYSLIB(DISASMDB)               DEBUG\n  INCLUDE SYSLIB(DISASMPR)               PRINTING\n  INCLUDE SYSLIB(DISASMRR)               OPERAND VERIFYING\n  ENTRY DISASM01\n  NAME DISASM(R)\n*\n  INCLUDE SYSLIB(DISASMU1)\n  ENTRY DISASMU1\n  NAME DISASMU1(R)\n/*\n//\n./ ADD NAME=DISASM   0111-03324-04285-1225-00039-00049-00000-RLRICE\n//......   JOB ..............\n//* ------------------------------------------------------------------*\n//*                                                                   *\n//*                                                                   *\n//*                                                                   *\n//* ------------------------------------------------------------------*\n//DISASM   EXEC PGM=DISASM,REGION=4096K\n//STEPLIB  DD DSN=.......LOADLIB,DISP=SHR       < ------------------\n//* ------------------------------------------------------------------*\n//*        UNNECESSARY DD'S                                           *\n//* ------------------------------------------------------------------*\n//ABNLIGNR DD DUMMY\n//SYSUDUMP DD SYSOUT=*\n//* ------------------------------------------------------------------*\n//*        ASSEMBLER DD'S                                             *\n//* ------------------------------------------------------------------*\n//SYSPRINT DD DSN=&&PRT,DISP=(NEW,PASS),\n//            UNIT=SYSDA,\n//            SPACE=(TRK,(15,15)),\n//            DCB=(RECFM=FBM,LRECL=121,BLKSIZE=12100)\n//SYSIN    DD DSN=&&IN,DISP=(NEW,PASS),\n//            UNIT=SYSDA,\n//            SPACE=(TRK,(15,15)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.MODGEN,DISP=SHR\n//         DD DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPUNCH DD DUMMY\n//* ------------------------------------------------------------------*\n//*        DIS-ASSEMBLER DD'S                                         *\n//* ------------------------------------------------------------------*\n//DISDEBUG DD SYSOUT=*\n//DISPRINT DD SYSOUT=*\n//STEPLIB  DD DSN=.......LOADLIB,DISP=SHR       < ------------------\n//DISDSECT DD DSN=.......DSECTS,DISP=SHR        < ------------------\n//DISIN    DD *\n/*\n//\n./ ADD NAME=DISASMU1 0109-04274-04285-1226-00038-00035-00000-RLRICE\n//.......  JOB ....................\n//* ------------------------------------------------------------\n//*\n//* ------------------------------------------------------------\n//ASM      EXEC PGM=IEV90,\n//            REGION=4096K,\n//            PARM='LINECOUNT(55),DECK,NOOBJECT,XREF(SHORT)'\n//SYSPRINT DD DSN=&&LIST,DISP=(NEW,PASS),\n//            UNIT=TSODA,\n//            SPACE=(TRK,(150,150))\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.MODGEN,DISP=SHR\n//         DD DSN=SYS1.AMODGEN,DISP=SHR\n//*        DD DSN=.......MACLIB,DISP=SHR    < - ANY OTHER LIBRARY(S)\n//SYSPUNCH DD DSN=&&OBJ,DISP=(NEW,DELETE,DELETE),\n//            UNIT=SYSDA,\n//            SPACE=(TRK,(15,15,15)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SYSIN    DD *\n         COPY  DISASMGB\n         DISOPT COMLIST=ON,                                            +\n               DALIST=ON\nDISASM00 DISASM00 TYPE=DSECT\n         COPY  DISASMDA\n         COPY  REGEQU\n         END\n/*\n//* ------------------------------------------------------------\n//*\n//* ------------------------------------------------------------\n//DISASMU1 EXEC PGM=DISASMU1,COND=(4,LT),\n//             PARM='.......DSECTS'             < ----\n//STEPLIB  DD DSN=.......LOADLIB,DISP=SHR       < ----\n//SYSUDUMP DD SYSOUT=*\n//SYSUT1   DD DSN=&&LIST,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//\n./ ADD NAME=SAMPLE1  0101-04278-04285-1241-00072-00071-00000-RLRICE\n//......   JOB ............................\n//* ------------------------------------------------------------------*\n//*                                                                   *\n//*                                                                   *\n//*                                                                   *\n//* ------------------------------------------------------------------*\n//DISASM   EXEC PGM=DISASM,REGION=4096K\n//STEPLIB  DD DSN=...............,DISP=SHR                < -----------\n//* ------------------------------------------------------------------*\n//*        UNNECESSARY DD'S                                           *\n//* ------------------------------------------------------------------*\n//ABNLIGNR DD DUMMY\n//SYSUDUMP DD SYSOUT=*\n//* ------------------------------------------------------------------*\n//*        ASSEMBLER DD'S                                             *\n//* ------------------------------------------------------------------*\n//SYSPRINT DD DSN=&&PRT,DISP=(NEW,PASS),\n//            UNIT=SYSDA,\n//            SPACE=(TRK,(15,15)),\n//            DCB=(RECFM=FBM,LRECL=121,BLKSIZE=12100)\n//SYSIN    DD DSN=&&IN,DISP=(NEW,PASS),\n//            UNIT=SYSDA,\n//            SPACE=(TRK,(15,15)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.MODGEN,DISP=SHR\n//         DD DSN=SYS1.AMODGEN,DISP=SHR\n//         DD DSN=.......MACLIB,DISP=SHR                  < -----------\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPUNCH DD DUMMY\n//* ------------------------------------------------------------------*\n//*        DIS-ASSEMBLER DD'S                                         *\n//* ------------------------------------------------------------------*\n//DISDEBUG DD SYSOUT=*\n//DISPRINT DD SYSOUT=*\n//DISPUNCH DD DSN=...............,DISP=SHR,               < -----------\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//DISMOD   DD DSN=...............,DISP=SHR                < -----------\n//DISDSECT DD DSN=...............,DISP=SHR                < -----------\n//DISIN    DD *\n* ------------------------------------------------------------------- *\n*                                                                     *\n*    There seems to be quite a bit of confusion on how to use the     *\n*    ASM START/ASM END statements to define DSECTs.                   *\n*                                                                     *\n*    This is a sample that will disassemble module DISASM04 of the    *\n*    disassembler itself.                                             *\n*                                                                     *\n*    Execute the disassembler with the following control statements.  *\n*    The SYSLIB DD must include the DISASM.MACLIB.                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n*        1    1    2    2    3    3    4    4    5    5    6    6    7\n*...+....0....+....0....+....0....5....0....5....0....5....0....5....0..\nLINES    55\nMODULE   DISASM\nCSECT    DISASM04\nUSING    DISASM00            R11\nUSING    ESDDATA             R4\nBASE     R12\nPREFIX   DASM\nSEQ LABEL\nASM START\n         COPY  DISASMGB\n         DISOPT COMLIST=ON,                                            +\n               DALIST=ON\nDISASM00 DISASM00 TYPE=DSECT\n         COPY  DISASMDA\n         COPY  REGEQU\nASM END\n/*\n//\n./ ADD NAME=SAMPLE2  0101-04278-04285-1244-00076-00076-00000-RLRICE\n//......   JOB ............................\n//* ------------------------------------------------------------------*\n//*                                                                   *\n//*                                                                   *\n//*                                                                   *\n//* ------------------------------------------------------------------*\n//DISASM   EXEC PGM=DISASM,REGION=4096K\n//STEPLIB  DD DSN=...............,DISP=SHR                < -----------\n//* ------------------------------------------------------------------*\n//*        UNNECESSARY DD'S                                           *\n//* ------------------------------------------------------------------*\n//ABNLIGNR DD DUMMY\n//SYSUDUMP DD SYSOUT=*\n//* ------------------------------------------------------------------*\n//*        ASSEMBLER DD'S                                             *\n//* ------------------------------------------------------------------*\n//SYSPRINT DD DSN=&&PRT,DISP=(NEW,PASS),\n//            UNIT=SYSDA,\n//            SPACE=(TRK,(15,15)),\n//            DCB=(RECFM=FBM,LRECL=121,BLKSIZE=12100)\n//SYSIN    DD DSN=&&IN,DISP=(NEW,PASS),\n//            UNIT=SYSDA,\n//            SPACE=(TRK,(15,15)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.MODGEN,DISP=SHR\n//         DD DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPUNCH DD DUMMY\n//* ------------------------------------------------------------------*\n//*        DIS-ASSEMBLER DD'S                                         *\n//* ------------------------------------------------------------------*\n//DISDEBUG DD SYSOUT=*\n//DISPRINT DD SYSOUT=*\n//DISPUNCH DD DSN=...............,DISP=SHR,               < -----------\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//DISMOD   DD DSN=...............,DISP=SHR                < -----------\n//DISDSECT DD DSN=...............,DISP=SHR                < -----------\n//*      1    1    2    2    3    3    4    4    5    5    6    6    7\n//* +....0....+....0....+....0....5....0....5....0....5....0....5....0..\n//DISIN    DD *\n* ------------------------------------------------------------------- *\n*                                                                     *\n*    This is another sample using ASM START/ASM END that will         *\n*    disassemble CSECT DITTDAIR of DITTO.                             *\n*                                                                     *\n*    Execute the disassembler with the following control statements.  *\n*    The SYSLIB DD must include the DITTO.MACLIB.                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLINES    55\nMODULE   DITTO\nCSECT    DITTDAIR\nUSING    IOB                 R3        476       FFFF\nUSING    IHADCB              R4        476       FFFF\nUSING    UCB       UCBOB     R5        FE        FFFF\nUSING    DYNBLOK             R6\nUSING    DEB                 R7\nUSING    DITTCOMM            R11\nBASE     R12\nPREFIX   DITT\nSEQ LABEL\nASM START\nDITTCOMM DITTCOMM TYPE=DSECT\nDYNBLOK  DYNBLOK  TYPE=DSECT\nUCB      DSECT\n         IEFUCBOB\n         IEZIOB\nIOBLEN   EQU   *-IOB\n         IEZDEB LIST=YES\n         DCBD  DSORG=PS\nDYNDCBL  EQU   *-IHADCB\n         COPY  REGEQU\nASM END\n/*\n//\n./ ADD NAME=SAMPLE3  0100-04278-04278-1502-00051-00051-00000-RLRICE\n//......   JOB ...................\n//* ------------------------------------------------------------\n//*\n//*  Pre-process DSECTs\n//*\n//* ------------------------------------------------------------\n//*\n//*        Assemble the DSECTs\n//*\n//* ------------------------------------------------------------\n//ASM      EXEC PGM=IEV90,\n//            REGION=4096K,\n//            PARM='LINECOUNT(55),DECK,NOOBJECT,XREF(SHORT)'\n//SYSPRINT DD DSN=&&LIST,DISP=(NEW,PASS),\n//            UNIT=TSODA,\n//            SPACE=(TRK,(150,150))\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.MODGEN,DISP=SHR\n//         DD DSN=SYS1.AMODGEN,DISP=SHR\n//SYSPUNCH DD DSN=&&OBJ,DISP=(NEW,DELETE,DELETE),\n//            UNIT=SYSDA,\n//            SPACE=(TRK,(15,15,15)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SYSIN    DD *\n         IHAPSA  DSECT=YES,LIST=YES\n         CVT     DSECT=YES,LIST=YES\n         IKJTCB  DSECT=YES,LIST=YES\n         IHAASCB DSECT=YES,LIST=YES\n         IHAASXB DSECT=YES,LIST=YES\n         IHAACEE\nTIOT     DSECT\n         IEFTIOT1\n         IEFUCBOB\n         DCBD    DSORG=PS\nCIB      IEZCIB\n         IEZWPL\n         IEZIOB\n/*\n//* ------------------------------------------------------------\n//*\n//*       Process the assembled DSECTs\n//*\n//* ------------------------------------------------------------\n//DISASMU1 EXEC PGM=DISASMU1,COND=(4,LT),\n//             PARM='your pre-processed DSECT PDS'\n//STEPLIB  DD DSN=...............,DISP=SHR\n//SYSUDUMP DD SYSOUT=*\n//SYSUT1   DD DSN=&&LIST,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//\n./ ADD NAME=SAMPLE4  0101-04278-04285-1245-00057-00057-00000-RLRICE\n//......   JOB ............................\n//* ------------------------------------------------------------------*\n//*                                                                   *\n//*                                                                   *\n//*                                                                   *\n//* ------------------------------------------------------------------*\n//DISASM   EXEC PGM=DISASM,REGION=4096K\n//STEPLIB  DD DSN=...............,DISP=SHR                < -----------\n//* ------------------------------------------------------------------*\n//*        UNNECESSARY DD'S                                           *\n//* ------------------------------------------------------------------*\n//ABNLIGNR DD DUMMY\n//SYSUDUMP DD SYSOUT=*\n//* ------------------------------------------------------------------*\n//*        ASSEMBLER DD'S                                             *\n//* ------------------------------------------------------------------*\n//SYSPRINT DD DSN=&&PRT,DISP=(NEW,PASS),\n//            UNIT=SYSDA,\n//            SPACE=(TRK,(15,15)),\n//            DCB=(RECFM=FBM,LRECL=121,BLKSIZE=12100)\n//SYSIN    DD DSN=&&IN,DISP=(NEW,PASS),\n//            UNIT=SYSDA,\n//            SPACE=(TRK,(15,15)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.MODGEN,DISP=SHR\n//         DD DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPUNCH DD DUMMY\n//* ------------------------------------------------------------------*\n//*        DIS-ASSEMBLER DD'S                                         *\n//* ------------------------------------------------------------------*\n//DISDEBUG DD SYSOUT=*\n//DISPRINT DD SYSOUT=*\n//DISPUNCH DD DSN=...............,DISP=SHR,               < -----------\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//DISMOD   DD DSN=...............,DISP=SHR                < -----------\n//DISDSECT DD DSN=...............,DISP=SHR                < -----------\n//*      1    1    2    2    3    3    4    4    5    5    6    6    7\n//* +....0....+....0....+....0....5....0....5....0....5....0....5....0..\n//DISIN    DD *\n* ------------------------------------------------------------------- *\n*                                                                     *\n*    This is the same example as SAMPLE1 except it expects the        *\n*    DSECTs to have been pre-processed by DISASMU1.                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLINES    55\nMODULE   DISASM\nCSECT    DISASM04\nUSING    DISASM00            R11\nUSING    ESDDATA             R4\nBASE     R12\nPREFIX   DASM\nSEQ LABEL\n/*\n//\n./ ADD NAME=SAMPLE4A 0100-04278-04278-1528-00046-00046-00000-RLRICE\n//........ JOB ....................\n//* ------------------------------------------------------------\n//*\n//*    This is a sample of using the DSECT pre-processor\n//*\n//*    DISASMU1 dynamically allocates the data set used for\n//*    the pre-processed DSECT output data.  The PARM on the\n//*    DISASMU1 step is the DSN for the output DSECT data.\n//*    Supply the same DSN on the DISDSECT DD when running\n//*    the disassembler.\n//*\n//* ------------------------------------------------------------\n//ASM      EXEC PGM=IEV90,\n//            REGION=4096K,\n//            PARM='LINECOUNT(55),DECK,NOOBJECT,XREF(SHORT)'\n//SYSPRINT DD DSN=&&LIST,DISP=(NEW,PASS),\n//            UNIT=TSODA,\n//            SPACE=(TRK,(150,150))\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.MODGEN,DISP=SHR\n//         DD DSN=SYS1.AMODGEN,DISP=SHR\n//         DD DSN=.......DISASM.MACLIB,DISP=SHR      < ----------\n//SYSPUNCH DD DSN=&&OBJ,DISP=(NEW,DELETE,DELETE),\n//            UNIT=SYSDA,\n//            SPACE=(TRK,(15,15,15)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SYSIN    DD *\n         COPY  DISASMGB\n         DISOPT COMLIST=ON,                                            +\n               DALIST=ON\nDISASM00 DISASM00 TYPE=DSECT\n         COPY  DISASMDA\n         COPY  REGEQU\n         END\n/*\n//* ------------------------------------------------------------\n//*\n//* ------------------------------------------------------------\n//DISASMU1 EXEC PGM=DISASMU1,COND=(4,LT),\n//             PARM='.......DISASM.DSECTS'           < ----------\n//STEPLIB  DD DSN=...............,DISP=SHR           < ----------\n//SYSUDUMP DD SYSOUT=*\n//SYSUT1   DD DSN=&&LIST,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//\n./ ADD NAME=SAMPLE4B 0102-04278-04285-1245-00057-00057-00000-RLRICE\n//......   JOB ............................\n//* ------------------------------------------------------------------*\n//*                                                                   *\n//*                                                                   *\n//*                                                                   *\n//* ------------------------------------------------------------------*\n//DISASM   EXEC PGM=DISASM,REGION=4096K\n//STEPLIB  DD DSN=...............,DISP=SHR                < -----------\n//* ------------------------------------------------------------------*\n//*        UNNECESSARY DD'S                                           *\n//* ------------------------------------------------------------------*\n//ABNLIGNR DD DUMMY\n//SYSUDUMP DD SYSOUT=*\n//* ------------------------------------------------------------------*\n//*        ASSEMBLER DD'S                                             *\n//* ------------------------------------------------------------------*\n//SYSPRINT DD DSN=&&PRT,DISP=(NEW,PASS),\n//            UNIT=SYSDA,\n//            SPACE=(TRK,(15,15)),\n//            DCB=(RECFM=FBM,LRECL=121,BLKSIZE=12100)\n//SYSIN    DD DSN=&&IN,DISP=(NEW,PASS),\n//            UNIT=SYSDA,\n//            SPACE=(TRK,(15,15)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.MODGEN,DISP=SHR\n//         DD DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPUNCH DD DUMMY\n//* ------------------------------------------------------------------*\n//*        DIS-ASSEMBLER DD'S                                         *\n//* ------------------------------------------------------------------*\n//DISDEBUG DD SYSOUT=*\n//DISPRINT DD SYSOUT=*\n//DISPUNCH DD DSN=...............,DISP=SHR,               < -----------\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//DISMOD   DD DSN=...............,DISP=SHR                < -----------\n//DISDSECT DD DSN=...............,DISP=SHR                < -----------\n//DISIN    DD *\n* ------------------------------------------------------------------- *\n*                                                                     *\n*    This is the same example as SAMPLE1 except it expects the        *\n*    DSECTs to have been pre-processed by DISASMU1.                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\n*        1    1    2    2    3    3    4    4    5    5    6    6    7\n*...+....0....+....0....+....0....5....0....5....0....5....0....5....0..\nLINES    55\nMODULE   DISASM\nCSECT    DISASM04\nUSING    DISASM00            R11\nUSING    ESDDATA             R4\nBASE     R12\nPREFIX   DASM\nSEQ LABEL\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DISASMAC": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04(\\x7f\\x01\\x04(\\x7f\\tQ\\x03\\xfb\\x03\\xfb\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-10-13T00:00:00", "modifydate": "2004-10-13T09:51:00", "lines": 1019, "newlines": 1019, "modlines": 0, "user": "RLRICE"}, "text": "./ ADD NAME=DBUGBLOK\n*---------------------------------------------------------------------*\n*                                                                     *\n*        DEBUG INTERFACE BLOCK                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n&NAME    DBUGBLOK &TYPE=\n         AIF      ('&TYPE' EQ 'DSECT').DSECT\n&NAME    DS       0A\n         AGO      .NODSECT\n.DSECT   ANOP\n         AIF      (T'&NAME EQ 'O').NONAME\n&NAME    DSECT\n.NODSECT ANOP\nDBUGDATA DC    A(0)                DEBUG DATA ADDRESS\nDBUGCMD  DC    C' '                COMMAND\n$DBUG    EQU   C' '                .. NORMAL DEBUG\n$DBUGHD  EQU   C'H'                .. PRINT SUB-HEADING\n$DBUGPRT EQU   C'P'                .. PRINT\n         MEXIT\n.NONAME  ANOP\n         MNOTE    12,'NAME REQUIRED WHEN TYPE=DSECT'\n         MEND\n./ ADD NAME=DISASMDA\n         AIF ('&DAPRT' EQ 'ON').DA010\n         PRINT OFF\n.DA010   ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     DISASM's data areas                                             *\n*                                                                     *\n*     There were so many different blocks that making up macros or    *\n*     copy members took more time than it was worth.  Most of the     *\n*     data areas are small, so it doesn't cost much to assemble them  *\n*     all in all the modules.                                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        BASE REGISTER DEFINITIONS                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nBASEDSCT DSECT\nBASENEXT DS   A                   NEXT BASE BLOCK\nBASEEYE  DS   CL8                 EYE CATCHER\nBASEBEGN DS   XL4                 STARTING DISPLACEMENT\nBASEEND  DS   XL4                 ENDING DISPLACEMENT\nBASEDISP DS   XL4                 DISPLACEMENT BASE REFERS TO\nBASEREG  DS   X                   BASE REGISTER\nBASEL    EQU  *-BASEDSCT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        DATA AREA DEFINITIONS                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDATADSCT DSECT\nDATANEXT DS   A                   NEXT DATA BLOCK\nDATAEYE  DS   CL8                 EYE CATCHER\nDATANAME DS   CL8                 DATA NAME (VCON AND Q TYPES)\nDATALBA  DS   A                   LABEL BLOCK ADDRESS FOR ADCON\nDATALBD  DS   XL4                 DISPLACEMENT FROM LABEL FOR ADCON\nDATABEGN DS   XL4                 STARTING DISPLACEMENT\nDATAEND  DS   XL4                 ENDING DISPLACEMENT\nDATALEN  DS   XL4                 LENGTH\nDATAFLAG DS   X                   SPECIAL FLAGS/INDICATORS\n$DATA31  EQU  X'80'               AD-CON WITH 31-BIT MODE BIT ON\nDATATYPE DS   X                   DATA TYPE\n$DATAUSR EQU  X'01'               .. USER DEFINED\n$DATAACN EQU  X'02'               .. A-CON\n$DATAVCN EQU  X'03'               .. V-CON\n$DATAINT EQU  X'04'               .. INTERNALLY DETECTED\n$DATACXD EQU  X'05'               .. PSEUDO AREA SIZE\n$DATAQ   EQU  X'06'               .. PSEUDO AREA DISPLACEMENT\nDATAL    EQU  *-DATADSCT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        DSECT DEFINITIONS                                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDSCTDSCT DSECT\nDSCTNEXT DS   A                   NEXT DSECT BLOCK\nDSCTEYE  DS   CL8                 EYE CATCHER\nDSCTNAME DS   CL8                 DSECT'S NAME\nDSCTLBA  DS   A                   FIRST LABEL BLOCK'S ADDRESS\nDSCTL    EQU  *-DSCTDSCT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        EQU DEFINITIONS                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEQUDATA  DSECT\nEQUNEXT  DS    A                  NEXT EQU BLOCK'S ADDRESS\nEQUEYE   DS    CL8                EYECATCHER\nEQULABEL DS    CL8                LABEL ON EQU STATEMENT\nEQUVALUE DS    X                  ASSOCIATED EQU VALUE\nEQUL     EQU   *-EQUDATA\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        ESD REFERENCES                                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nESDDATA  DSECT\nESDNEXT  DS    A                  NEXT ESD BLOCK'S ADDRESS\nESDEYE   DS    CL8                EYE CATCHER\nESDID    DS    H                  ESD ID\nESDNAME  DS    CL8                ENTRY POINT NAME\nESDTYPE  DS    X                  TYPE\n$ESDSD   EQU   X'00'              .. EXTERNAL SYMBOL\n$ESDER   EQU   X'02'              .. UNRESOLVED EXTERNAL REFERENCE\n$ESDLR   EQU   X'03'              .. LABEL REFERENCE\n$ESDPC   EQU   X'04'              .. PRIVATE CODE DEFINITION\n$ESDCM   EQU   X'05'              .. COMMON MODULE\n$ESDPR   EQU   X'06'              .. PSEUDO REGISTER\n$ESDNULL EQU   X'07'              .. NULL\n$ESDWX   EQU   X'0A'              .. UNRESOLVED WEAK EXTERNAL REFERENCE\n$ESDOV   EQU   X'14'              .. OVERLAY SEGMENT TABLE\nESDADDR  DS    AL3                ADDRESS OF ENTRY POINT\nESDSEG   DS    X                  SEGMENT NUMBER\nESDLEN   DS    AL3                ENTRY LENGTH\nESDL     EQU   *-ESDNAME          ESD DATA LENGTH\nESDDATAL EQU   *-ESDDATA\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        LABEL BLOCK                                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLABLDSCT DSECT\nLABLNEXT DS   A                   NEXT LABEL BLOCK\nLABLEYE  DS   CL8                 EYE CATCHER\nLABLNAME DS   CL8                 LABEL NAME\nLABLDISP DS   XL4                 DISPLACEMENT FROM BASE\nLABLEQU  DS   A                   FIRST EQU BLOCK ADDRESS\nLABLTYPE DS   C                   LABEL TYPE\n$LABLD   EQU  C'D'                .. LABEL AT DATA\n$LABLE   EQU  C'E'                .. LABEL FROM AN ESD ENTRY\n$LABLI   EQU  C'I'                .. LABEL AT AN INSTRUCTION\n$LABLR   EQU  C'R'                .. LABEL FROM AN RLD ENTRY\nLABLL    EQU  *-LABLDSCT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        OPCODE DEFINITIONS                                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nOPDSECT  DSECT\nOPMACH   DS    CL2           OPCODE\nOPMNEM   DS    CL6           MNEMONIC\nOPLENGTH DS    H             INSTRUCTION LENGTH\nOPFORM   DS    X             FORMAT\n$OPRR1   EQU   X'00'         .. RR FORMAT 1 (R1,R2)\n$OPRR2   EQU   X'01'         .. RR FORMAT 2 (SVC'S)\n$OPRR3   EQU   X'02'         .. RR FORMAT 3 (BRANCHES)\n$OPRX    EQU   X'03'         .. RX FORMAT\n$OPS     EQU   X'04'         .. S FORMAT\n$OPSI    EQU   X'05'         .. SI (IMMEDIATE) FORMAT\n$OPRS1   EQU   X'06'         .. RS FORMAT 1 (SHIFTS)\n$OPRS2   EQU   X'07'         .. RS FORMAT 2 (BXLE, BXH,  )\n$OPRS3   EQU   X'08'         .. RS FORMAT 3 (MASK TYPE.. CLM, ICM..)\n$OPSS1   EQU   X'09'         .. SS FORMAT 1 (CHARACTER)\n$OPSS2   EQU   X'0A'         .. SS FORMAT 2 (PACKED DECIMAL)\n$OPSS3   EQU   X'0B'         .. SS FORMAT 3 (MVCK, MVCS, MVCP)\n$OPSS4   EQU   X'0C'         .. SS FORMAT 4 (SRP)\n$OPB2    EQU   X'0D'         .. B2 (NO OPERANDS)\n$OPB2S   EQU   X'0E'         .. B2 S-FORMAT\n$OPB2R   EQU   X'0F'         .. B2 R FORMAT\n$OPB2RR  EQU   X'10'         .. B2 RR FORMAT\nOPFLAGS  DS    X             FLAGS\n$OPEXT   EQU   X'80'         .. EXTENDED MNEMONICS\n$OPSVC   EQU   X'40'         .. SVC\n$OPNCMNT EQU   X'20'         .. NO COMMENT\n$OPREF   EQU   X'10'         .. GENERATES A LABEL REFERENCE\n$OPCCA   EQU   X'08'         .. SETS CONDITION CODE, ARITHMETIC\n$OPCCC   EQU   X'04'         .. SETS CONDITION CODE, COMPARE\n$OPCCL   EQU   X'02'         .. SETS CONDITION CODE, LOGICAL\n$OPFLOAT EQU   X'01'         .. FLOATING POINT OPCODE\nOPREGS   DS    X             REGISTER RESTRICTIONS\n$OP1EVEN EQU   X'80'         .. OPERAND 1 MUST BE EVEN\n$OP10246 EQU   X'40'         .. OPERAND 1 MUST BE 0, 2, 4, OR 6\n$OP104   EQU   X'20'         .. OPERAND 1 MUST BE 0 OR 4\n$OP2EVEN EQU   X'08'         .. OPERAND 2 MUST BE EVEN\n$OP20246 EQU   X'04'         .. OPERAND 2 MUST BE 0, 2, 4, OR 6\n$OP204   EQU   X'02'         .. OPERAND 2 MUST BE 0 OR 4\nOPCMNT   DS    CL25          COMMENT IF PRESENT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        INSTRUCTION OPERAND REFERENCES                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nREFDSCT  DSECT\nREFNEXT  DS   A                   NEXT REFERENCE BLOCK\nREFEYE   DS   CL8                 EYE CATCHER\nREFOPER1 DS   A                   OPERAND 1 REFERENCE\nREFOPER2 DS   A                   OPERAND 2 REFERENCE\nREFDISP1 DS   XL4                 DISPLACEMENT FROM LABEL\nREFDISP2 DS   XL4                 DISPLACEMENT FROM LABEL\nREFDISPI DS   XL4                 REFERENCING INSTRUCTIONS DISPLACEMENT\nREFL     EQU  *-REFDSCT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        RELOCATION DATA REFERENCES                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nRLDDATA  DSECT\nRLDNEXT  DS    A                  NEXT RLD BLOCK'S ADDRESS\nRLDEYE   DS    CL8                EYE CATCHER\nRLDESD   DS    A                  CORRESPONDING ESD'S ADDRESS\nRLDLEN   DS    H                  CONSTANT'S LENGTH\nRLDDISP  DS    XL4                DISPLACEMENT TO CONSTANT\nRLDTYPE  DS    X                  RLD TYPE\n$RLDACON EQU   X'00'              .. ADCON\n$RLDVCON EQU   X'10'              .. VCON\n$RLDPSDP EQU   X'20'              .. PSEUDO AREA DISPLACEMENT (Q)\n$RLDPSSZ EQU   X'30'              .. PSEUDO AREA SIZE         (CXD)\n$RLDER1  EQU   X'80'              .. UNRESOLVED REFERENCE\n$RLDER2  EQU   X'90'              .. UNRESOLVED REFERENCE\nRLDPTR   DS    XL2                RLD POINTER\nRLDPP    DS    XL2                RLD POSITION POINTER\nRLDDIR   DS    C                  DIRECTION (+ OR -)\nRLDDATAL EQU   *-RLDDATA          RLD DATA LENGTH\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        USING DEFINITIONS                                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nUSNGDSCT DSECT\nUSNGNEXT DS   A                   NEXT USING BLOCK\nUSNGEYE  DS   CL8                 EYE CATCHER\nUSNGDSNM DS   CL8                 DSECT'S NAME\nUSNGLBNM DS   CL8                 LABEL WITHIN THE DSECT\nUSNGDSA  DS   A                   RELATED DSECT BLOCK'S ADDRESS\nUSNGLBA  DS   A                   LABEL BLOCK'S ADDRESS\nUSNGDISP DS   XL4                 LABEL'S DISPLACEMENT INTO THE DSECT\nUSNGBASE DS   X                   BASE\nUSNGFLAG DS   X                   FLAGS\n$USNGND  EQU  X'80'               .. NO DISPLACEMENTS\nUSNGBEGN DS   XL4                 STARTING DISPLACEMENT\nUSNGEND  DS   XL4                 ENDING DISPLACEMENT\nUSNGL    EQU  *-USNGDSCT\n         AIF  ('&DAPRT' EQ 'ON').DA020\n         PRINT ON\n.DA020   ANOP\n./ ADD NAME=DISASMGB 0103-04285-04285-1129-00014-00014-00000-RLRICE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     GLOBAL OPTIONS.  SEE MACRO DISOPT FOR EXPLANATION OF OPTIONS.   *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         GBLA  &TRNBRG,&MAXL,&MINL,&ASMG\n         GBLC  &TROPT,&DAPRT,&COMPRT\n         DISOPT COMLIST=OFF,        ASSEMBLER'S NAME                   +\n               DALIST=OFF,          DON'T PRINT DATA AREA              +\n               MAXLINE=55,          DEFAULT IS 55 LINES PER PAGE       +\n               MINLINE=10,          MINIMUM LINE COUNT ALLOWABLE IS 10 +\n               TRACE=ON,            GENERATE TRACE                     +\n               TRNBR=1000,          1000 TRACE ENTRIES                 +\n               ASM=133              ASSEMBLER'S LRECL\n./ ADD NAME=DISASM00 0106-03217-04275-1225-00330-00325-00000-RLRICE\n*---------------------------------------------------------------------*\n*                                                                     *\n*          COMMON AREA MAPPING MACRO                                  *\n*                                                                     *\n*     This macro will generate either the 'common' module CSECT or    *\n*     a DSECT to map the 'common' module.  'Common' is used for       *\n*     constants and work areas that are required by several modules   *\n*     allowing some elimination of duplicated data and to allow       *\n*     inter-module communication.                                     *\n*                                                                     *\n*     The trace table code is also incorporated into the 'DISASM00'.  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n&NAME    DISASM00 &TYPE=\n         GBLA  &TRNBRG,&MAXL,&MINL\n         GBLC  &TROPTG,&DAPRT,&COMPRT,&ASMNAME\n         AIF   (T'&NAME EQ 'O').NONAME\n         AIF   ('&TYPE' EQ 'CSECT').CSECT\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n         MNOTE 12,'INVALID TYPE'\n         MEXIT\n.CSECT   ANOP\n&NAME    CSECT\n         AGO   .NODSECT\n.DSECT   ANOP\n         AIF   ('&COMPRT' EQ 'ON').PRT010\n         PRINT OFF\n.PRT010  ANOP\n&NAME    DSECT\n.NODSECT ANOP\n*---------------------------------------------------------------------*\n*                                                                     *\n*          Double word for CVB/CVD                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMDWRD DC    D'0'\n*---------------------------------------------------------------------*\n*                                                                     *\n*          ADDRESS CONSTANTS                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DC    CL8'DISASM00'\nACOMM    DC    A(DISASM00)         COMMON MODULE\n         DC    CL8'DISASM01'\nA01      DC    V(DISASM01)         MAINLINE MODULE\n         DC    CL8'DISASM02'\nA02      DC    V(DISASM02)         PARAMETER READER\n         DC    CL8'DISASM03'\nA03      DC    V(DISASM03)         MODULE READER\n         DC    CL8'DISASM04'\nA04      DC    V(DISASM04)         CESD record processor\n         DC    CL8'DISASM05'\nA05      DC    V(DISASM05)         RLD record processor\n         DC    CL8'DISASM06'\nA06      DC    V(DISASM06)         MODULE TEXT PRINTER\n         DC    CL8'DISASM07'\nA07      DC    V(DISASM07)         DSECT INTERPRETER\n         DC    CL8'DISASM08'\nA08      DC    V(DISASM08)         ASSIGN LABELS\n         DC    CL8'DISASM09'\nA09      DC    V(DISASM09)         SOURCE GENERATOR\n         DC    CL8'DISASM10'\nA10      DC    V(DISASM10)\n         DC    CL8'DISASMB2'\nAB2      DC    V(DISASMB2)         OPCODE 'B2' INTERPRETER\n         DC    CL8'DISASMDB'\nADB      DC    V(DISASMDB)         DEBUG\n         DC    CL8'DISASMOP'\nAOP      DC    V(DISASMOP)         OPCODE TABLE\n         DC    CL8'DISASMPR'\nAPR      DC    V(DISASMPR)         PRINT MODULE ADDRESS\n         DC    CL8'DISASMRR'\nARR      DC    V(DISASMRR)         REGISTER CHECKER\n*---------------------------------------------------------------------*\n*                                                                     *\n*          TRACE CONTROL                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DS    0A\n         DC    CL4'1STX'           FIRST TRACE ENTRY\nTR1ST    DC    A(0)\n         DC    CL4'LAST'           LAST TRACE ENTRY\nTRLAST   DC    A(0)\n         DC    CL4'CURR'           CURRENT TRACE ENTRY\nTRCURR   DC    A(0)\nTRADDR   DC    A(0)                TRACE TABLE STORAGE ADDRESS\nTRR14    DC    A(0)                REGISTER 14 SAVE AREA\nTRDATA1  DC    CL8' '              TRACE DATA ITEM 1\nTRDATA2  DC    CL8' '              TRACE DATA ITEM 2\nTRSIZE   DC    A(&TRNBRG*32)       TRACE TABLE SIZE\n*---------------------------------------------------------------------*\n*                                                                     *\n*          GLOBAL DATA                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMIO   DC    A(0)                I/O BUFFER ADDRESS\n$IOSIZE  EQU   32760               I/O BUFFER SIZE\nCOMMESD  DC    A(0)                EXTERNAL SYMBOL TABLE ANCHOR\nCOMMRLD  DC    A(0)                RLD TABLE ANCHOR\nCOMMUSNG DC    A(0)                USING TABLE ANCHOR\nCOMMDSCT DC    A(0)                DSECT TABLE ANCHOR\nCOMMBASE DC    A(0)                BASE TABLE ANCHOR\nCOMMDATA DC    A(0)                DATA TABLE ANCHOR\nCOMMDISP DC    A(0)                INSTRUCTION DISPLACEMENT TABLE\nCOMMREF  DC    A(0)                REFERENCE TABLE ANCHOR\nCOMMLABL DC    A(0)                LABEL TABLE ANCHOR\nCOMMCSAD DC    A(0)                CSECT ADDRESS\nCOMMCSEP DC    A(0)                LINK EDIT ASSIGNED ENTRY POINT\nCOMMCSEA DC    A(0)                CSECT ENDING ADDRESS\nCOMMCSLN DC    A(0)                CSECT LENGTH\nCOMMTXT  DC    A(0)                TEXT'S STORAGE ADDRESS\n*---------------------------------------------------------------------*\n*                                                                     *\n*      Sub-heading length is actually a flag byte and a length byte   *\n*                                                                     *\n*        If first byte is X'00', heading is to be centered            *\n*        If first byte is X'FF', heading is not to be centered        *\n*                                                                     *\n*      Second byte is the length for centered and non-centered        *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMH4   DC    H'4'                CONSTANT\nCOMMH8   DC    H'8'                CONSTANT\nCOMMH32  DC    H'32'               CONSTANT\nCOMMSUBL DC    H'0'                SUB HEADING LENGTH\nCOMMPFXL DC    H'0'                LABEL PREFIX LENGTH\nCOMMESID DS    XL2                 CSECT's ESDID\nCOMMFLAG DC    X'00'               GLOBAL CONTROL FLAGS\n$ABORT   EQU   X'80'               .. SERIOUS ERROR, ABORT\n$ERROR   EQU   X'40'               .. ERROR HAS OCCURRED\n$CSECT   EQU   X'20'               .. CSECT LOCATED\n$ABEND   EQU   X'10'               .. ABEND AT EXIT\n$ASMIN   EQU   X'08'               .. ASSEMBLER INPUT PRESENT\n$SEQLABL EQU   X'04'               .. SEQUENTIALLY NUMBERED LABELS\n$NOFLOAT EQU   X'02'               .. NO FLOATING POINT INSTRUCTIONS\n$NOB2    EQU   X'01'               .. NO B2 INSTRUCTIONS\nCOMMFLG2 DC    X'00'               MORE FLAGS/INDICATORS\n$RLDWARN EQU   X'80'               .. PRINT DATA BLOCK MODS IN DISASM10\nCOMMDD   DC    X'00'               DD STATEMENT FLAGS\n$PRTDD   EQU   X'80'               .. DISPRINT DD PRESENT\n$INDD    EQU   X'40'               .. DISIN DD PRESENT\n$MODDD   EQU   X'20'               .. DISMOD DD PRESENT\n$PUNCHDD EQU   X'10'               .. DISPUNCH DD PRESENT\n$DEBUGDD EQU   X'08'               .. DISDEBUG DD PRESENT\n$DSECTDD EQU   X'04'               .. DISDSECT DD PRESENT\nCOMMMOD  DC    CL8' '              MODULE NAME\nCOMMCSNM DC    CL8' '              CSECT NAME\nCOMMPFX  DC    CL4' '              LABEL PREFIX\nCOMMSUBH DC    CL133' '            SUB-HEADING\nCOMMDBSH DC    CL35' '             DEBUG SUB-HEADING\nCOMM0F0F DC    8X'0F'\nCOMM1F1F DC    8X'1F'\nCOMMBLKS DC    80C' '\nCOMMHXCH DC    C'0123456789ABCDEF'\nCOMMCHHX DC    X'000A0B0C0D0E0F000000000000000000'\n         DC    X'00010203040506070809000000000000'\nCOMMNBR  DS    0C\n         DC    C'0 '\n         DC    C'1 '\n         DC    C'2 '\n         DC    C'3 '\n         DC    C'4 '\n         DC    C'5 '\n         DC    C'6 '\n         DC    C'7 '\n         DC    C'8 '\n         DC    C'9 '\n         DC    C'10'\n         DC    C'11'\n         DC    C'12'\n         DC    C'13'\n         DC    C'14'\n         DC    C'15'\n         DC    C'16'\n*---------------------------------------------------------------------*\n*                                                                     *\n*          Printable characters                                       *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMPRT  DC    256X'FF'\n         ORG   COMMPRT+X'40'\n         DC    X'00'\n         ORG   COMMPRT+X'4A'\n         DC    6X'00'\n         ORG   COMMPRT+X'5A'\n         DC    6X'00'\n         ORG   COMMPRT+X'60'\n         DC    2X'00'\n         ORG   COMMPRT+X'6A'\n         DC    6X'00'\n         ORG   COMMPRT+X'79'\n         DC    4X'00'\n         ORG   COMMPRT+X'7E'\n         DC    2X'00'\n         ORG   COMMPRT+X'81'\n         DC    9X'00'\n         ORG   COMMPRT+X'91'\n         DC    9X'00'\n         ORG   COMMPRT+X'A2'\n         DC    8X'00'\n         ORG   COMMPRT+X'C0'\n         DC    10X'00'\n         ORG   COMMPRT+X'D0'\n         DC    10X'00'\n         ORG   COMMPRT+X'E2'\n         DC    8X'00'\n         ORG   COMMPRT+X'F0'\n         DC    10X'00'\n         ORG   COMMPRT+256\n*---------------------------------------------------------------------*\n*                                                                     *\n*          Non-printable characters                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMNPRT DC    256X'00'\n         ORG   COMMNPRT+X'4A'\n         DC    X'FF'\n         ORG   COMMNPRT+X'4C'\n         DC    4X'FF'\n         ORG   COMMNPRT+X'5A'\n         DC    6X'FF'\n         ORG   COMMNPRT+X'60'\n         DC    2X'FF'\n         ORG   COMMNPRT+X'6A'\n         DC    X'FF'\n         ORG   COMMNPRT+X'6C'\n         DC    4X'FF'\n         ORG   COMMNPRT+X'79'\n         DC    4X'FF'\n         ORG   COMMNPRT+X'7E'\n         DC    2X'FF'\n         ORG   COMMNPRT+X'C0'\n         DC    10X'FF'\n         ORG   COMMNPRT+X'D0'\n         DC    10X'FF'\n         ORG   COMMNPRT+X'E2'\n         DC    8X'FF'\n         ORG   COMMNPRT+X'F0'\n         DC    10X'FF'\n         ORG   COMMNPRT+256\nCOMMMAXL DC    PL3'&MAXL'          MAXIMUM LINES PER PAGE\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*          ADD TRACE ENTRY                                            *\n*                                                                     *\n*  During program initialization, DISASM01 acquires storage for the   *\n*  trace table and sets COMM1ST, COMMLAST, and COMMCURR.  DISASM01    *\n*  also sets R11 to the address of DISASM00 and all other modules     *\n*  depend on this remaining unchanged.  Any module except this        *\n*  module may call the trace routine.  Macro ITRACE generates the     *\n*  calling sequence.  R14 is the only register altered by the trace   *\n*  macro.                                                             *\n*                                                                     *\n*  The trace table is a \"wrap-around\" table.  COMM1ST is the first    *\n*  entry's address, COMMLAST is the last entry's address, and         *\n*  COMMCURR is the address of the last entry added to the table.      *\n*  When a trace entry is added to the table, the calling module's     *\n*  name, an 8-byte ID, and up to 2 8-byte fields are captured.        *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*      This code depends on:                                          *\n*           R11  'DISASM00' address                                   *\n*           R12  current module's base address                        *\n*                and the module's name must be at 10 bytes (0A hex)   *\n*                into the module                                      *\n*           R14  trace id's address and R14 + 8 will be the return    *\n*                address                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nTRACE000 DS    0H\n         USING &NAME,R11           DEFINE BASE\n         USING TRENTRY,R1          DEFINE BASE\n         STM   R0,R15,TRCESAVE     SAVE ALL REGISTERS\n         ICM   R1,15,TRCURR        CURRENT TRACE ENTRY\n         BZ    TRACE020            NO TRACE TABLE\n         OC    0(TRENTRYL,R1),0(R1)    EMPTY ENTRY?\n         BZ    TRACE010            YES.. USE THIS ENTRY\n         LA    R1,TRENTRYL(R1)     NEXT TRACE ENTRY\n         C     R1,TRLAST           BEYOND END OF TABLE?\n         BNH   TRACE010            NO\n         L     R1,TR1ST            'WRAP' TRACE TABLE\nTRACE010 DS    0H\n         ST    R1,TRCURR           SAVE CURRENT TRACE ENTRY ADDRESS\n         MVC   TREMOD,10(R12)      COPY MODULE NAME\n         MVC   TREID,0(R14)        COPY TRACE ID\n         MVC   TREDATA1,TRDATA1    COPY TRACE DATA 1\n         MVC   TREDATA2,TRDATA2    COPY TRACE DATA 2\n         XC    TRDATA1,TRDATA1     CLEAR TRACE DATA\n         XC    TRDATA2,TRDATA2     CLEAR TRACE DATA\nTRACE020 DS    0H\n         LM    R0,R15,TRCESAVE     RESTORE ALL REGISTERS\n         B     8(R14)              RETURN\nTRCESAVE DS    16F                 REGISTER SAVE AREA\n         LTORG\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*          TRACE TABLE ENTRY                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nTRENTRY  DSECT\nTREMOD   DS    CL8                 MODULE NAME\nTREID    DS    CL8                 TRACE ID\nTREDATA1 DS    CL8                 TRACE DATA 1\nTREDATA2 DS    CL8                 TRACE DATA 2\nTRENTRYL EQU   *-TRENTRY           ENTRY LENGTH\n         SPACE 2\n         AIF   ('&COMPRT' EQ 'ON').PRT020\n         PRINT ON\n.PRT020  ANOP\n*---------------------------------------------------------------------*\n*                                                                     *\n*          ABEND REASON CODES                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\nABEND001 EQU   1                   REQUESTED VIA AN ABEND STATEMENT\nABEND002 EQU   2                   UNKNOWN RETURN CODE FROM BLDL\nABEND003 EQU   3                   UNKNOWN RLD ITEM TYPE\nABEND004 EQU   4                   RLD DATA REMAINING WENT NEGATIVE\nABEND005 EQU   5                   ATTEMPT TO GEN AN INSTR ON ODD ADDR\nABEND006 EQU   6                   UNKNOWN B2 INSTRUCTION IN DISASMB2\n         MEXIT\n.NONAME  ANOP\n         MNOTE 12,'NAME IS REQUIRE WHEN TYPE=DSECT'\n.MEXIT   ANOP\n         MEXIT\n         MEND\n./ ADD NAME=DISOPT   0102-04285-04285-1139-00176-00169-00000-RLRICE\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*         GLOBAL OPTIONS                                             *\n.*                                                                    *\n.*    THESE OPTIONS ALLOW CUSTOMIZED GENERATION OF DISASM.            *\n.*                                                                    *\n.*     OPTIONS YOU CAN SET ARE:                                       *\n.*                                                                    *\n.*           &TRACE   ON  - ITRACE MACROS WILL GENERATE THE CODE TO   *\n.*                          CAPTURE THE \"ID\" AND DATA1/RDATA1 AND     *\n.*                          DATA2/RDATA2, DISASM01 WILL ACQUIRE AND   *\n.*                          INITIALIZE THE TRACE TABLE CONTROL DATA   *\n.*                          IN DISASM00.                              *\n.*                    OFF - ITRACE MACROS WILL GENERATE NO CODE AT    *\n.*                          ALL.  DISASM01 WILL NOT ACQUIRE THE       *\n.*                          TRACE TABLE STORAGE.  GENERATING DISASM   *\n.*                          WITH &TRACE=OFF WILL REDUCE THE SIZE OF   *\n.*                          THE MODULE BY ABOUT 2K.                   *\n.*                                                                    *\n.*           &TRNBR   SPECIFIES THE NUMBER OF TRACE TABLE ENTRIES.    *\n.*                                                                    *\n.*           &MAXLINE SPECIFIES THE DEFAULT LINE COUNT PER PAGE ON    *\n.*                    DISPRINT AND DISDEBUG.                          *\n.*                                                                    *\n.*           &MINLINE SPECIFIES THE MINIMUM NUMBER OF LINES A USER    *\n.*                    CAN REQUEST VIA THE LINE/LINES/MAXLINES STATE-  *\n.*                    MENT.                                           *\n.*                                                                    *\n.*           &COMLIST ON  - THE COMMON DATA AREA LISTING WILL BE      *\n.*                          PRINTED ON THE ASSEMBLER LISTING.         *\n.*                    OFF - THE AREAS MAPPED BY DISASMDA WILL NOT     *\n.*                          BE PRINTED ON THE ASSEMBLER LISTING.      *\n.*                    ** NOTE THE COMLIST OPTION DOES NOT APPLY TO    *\n.*                    ** TO CSECT DISASM00.                           *\n.*                                                                    *\n.*                                                                    *\n.*           &DALIST  ON  - THE AREAS MAPPED BY DISASMDA WILL BE      *\n.*                          PRINTED ON THE ASSEMBLER LISTING.         *\n.*                    OFF - THE AREAS MAPPED BY DISASMDA WILL NOT     *\n.*                          BE PRINTED ON THE ASSEMBLER LISTING.      *\n.*                                                                    *\n.*           &ASM     121   INDICATES THE ASSEMBLER'S SYSPRINT LRECL  *\n.*                          IS 121                                    *\n.*                    123   INDICATES THE ASSEMBLER'S SYSPRINT LRECL  *\n.*                          IS 133                                    *\n.*                                                                    *\n.*                                                                    *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n         MACRO\n&NAME    DISOPT &COMLIST=OFF,                                          +\n               &DALIST=OFF,                                            +\n               &MAXLINE=55,                                            +\n               &MINLINE=10,                                            +\n               &TRACE=ON,                                              +\n               &TRNBR=1000,                                            +\n               &ASM=133\n         GBLA &TRNBRG,&MAXL,&MINL,&ASMG\n         GBLC &TROPT,&DAPRT,&COMPRT\n         LCLA &ERROR\n&ERROR   SETA 0\n         AIF  (T'&TRACE EQ 'O').OPT010\n         AIF  ('&TRACE' EQ 'ON').OPT020\n         AIF  ('&TRACE' EQ 'OFF').OPT020\n         MNOTE 12,'TRACE MUST BE EITHER -ON- OR -OFF-'\n&ERROR   SETA 1\n         AGO  .OPT030\n.OPT010  ANOP\n         MNOTE 12,'TRACE OPTION MUST BE SPECIFIED'\n&ERROR   SETA 1\n         AGO  .OPT030\n.OPT020  DS   0H\n&TROPT   SETC '&TRACE'\n.OPT030  ANOP\n         AIF  (T'&TRNBR EQ 'O').OPT040\n         AIF  (&TRNBR LT 0).OPT050\n         AIF  (&TRNBR GT 9999).OPT060\n&TRNBRG  SETA &TRNBR\n         AGO  .OPT070\n.OPT040  ANOP\n         MNOTE 12,'TRNBR MUST BE SPECIFIED'\n&ERROR   SETA 1\n         AGO  .OPT070\n.OPT050  ANOP\n         MNOTE 12,'TRNBR CANNOT BE LESS THAN ZERO'\n&ERROR   SETA 1\n         AGO  .OPT070\n.OPT060  ANOP\n         MNOTE 12,'TRNBR CANNOT BE GREATER THAN 9999'\n&ERROR   SETA 1\n.OPT070  ANOP\n         AIF  (T'&MAXLINE EQ 'O').OPT080\n         AIF  (&MAXLINE LT 0).OPT090\n         AIF  (&MAXLINE GT 9999).OPT100\n&MAXL    SETA &MAXLINE\n         AGO  .OPT110\n.OPT080  ANOP\n         MNOTE 12,'MAXLINE MUST BE SPECIFIED'\n&ERROR   SETA 1\n         AGO  .OPT110\n.OPT090  ANOP\n         MNOTE 12,'MAXLINE CANNOT BE LESS THAN 0'\n&ERROR   SETA 1\n         AGO  .OPT110\n.OPT100  ANOP\n         MNOTE 12,'MAXLINE CANNOT BE GREATER THAN 9999'\n&ERROR   SETA 1\n.OPT110  ANOP\n         AIF  (T'&MINLINE EQ 'O').OPT120\n         AIF  (&MINLINE LT 0).OPT130\n         AIF  (&MINLINE GT &MAXLINE).OPT140\n&MINL    SETA &MINLINE\n         AGO  .OPT150\n.OPT120  ANOP\n         MNOTE 12,'MINLINE MUST BE SPECIFIED'\n&ERROR   SETA 1\n         AGO  .OPT150\n.OPT130  ANOP\n         MNOTE 12,'MINLINE CANNOT BE LESS THAN ZERO'\n&ERROR   SETA 1\n         AGO  .OPT150\n.OPT140  ANOP\n         MNOTE 12,'MINLINE CANNOT BE GREATER THAN MAXLINE'\n&ERROR   SETA 1\n.OPT150  ANOP\n         AIF  (T'&DALIST EQ 'O').OPT160\n         AIF  ('&DALIST' EQ 'ON').OPT170\n         AIF  ('&DALIST' EQ 'OFF').OPT170\n         MNOTE 12,'DALIST MUST BE -ON- OR -OFF-'\n&ERROR   SETA 1\n         AGO  .OPT180\n.OPT160  ANOP\n         MNOTE 12,'DALIST MUST BE SPECIFIED'\n&ERROR   SETA 1\n         AGO  .OPT180\n.OPT170  ANOP\n&DAPRT   SETC '&DALIST'\n.OPT180  ANOP\n         AIF  (T'&COMLIST EQ 'O').OPT190\n         AIF  ('&COMLIST' EQ 'ON').OPT200\n         AIF  ('&COMLIST' EQ 'OFF').OPT200\n         MNOTE 12,'COMLIST MUST BE -ON- OR -OFF-'\n&ERROR   SETA 1\n         AGO  .OPT210\n.OPT190  ANOP\n         MNOTE 12,'COMLIST MUST BE SPECIFIED'\n&ERROR   SETA 1\n         AGO  .OPT210\n.OPT200  ANOP\n&COMPRT  SETC  '&COMLIST'\n.OPT210  ANOP\n         AIF  (T'&ASM EQ 'O').OPT220\n         AIF  (&ASM EQ 121).OPT230\n         AIF  (&ASM EQ 133).OPT240\n         MNOTE 12,'ASM MUST BE 121 OR 133'\n&ERROR   SETA 1\n         AGO  .OPT250\n.OPT220  ANOP\n         MNOTE 12,'ASM IS A REQUIRED PARAMETER'\n&ERROR   SETA 1\n         AGO  .OPT250\n.OPT230  ANOP\n&ASMG    SETA 121\n         AGO  .OPT250\n.OPT240  ANOP\n&ASMG    SETA 133\n.OPT250  ANOP\n         AIF  (&ERROR EQ 0).EXIT\n         MNOTE 12,'ERRORS IN SPECIFYING OPTIONS'\n.EXIT    ANOP\n         MEND\n         DISOPT TRACE=ON,                                              +\n               TRNBR=1000,                                             +\n               MAXLINE=100,                                            +\n               MINLINE=10,                                             +\n               DALIST=OFF\n./ ADD NAME=ITRACE\n.* ------------------------------------------------------------------*\n.*                                                                   *\n.*                        TRACE MACRO                                *\n.*                                                                   *\n.*       The trace function always captures the CSECT name (taken    *\n.*       from the module prefix data) and a TRACE ID (specified on   *\n.*       this macro).                                                *\n.*                                                                   *\n.*       One or two data elements (8 bytes each) may be captured at  *\n.*       any trace point.  The data to be captured may be specified  *\n.*       in either of two ways: DATA1 or RDATA1 and DATA2 or RDATA2. *\n.*       DATA1 and RDATA1 are mutually exclusive as are DATA2 and    *\n.*       RDATA2.  DATA1 and DATA2 specify the address of data to be  *\n.*       captured, RDATA1 and RDATA2 specify a register whose        *\n.*       contents are to be captured.                                *\n.*                                                                   *\n.*       For example:                                                *\n.*                                                                   *\n.*                 ITRACE ID=POINTA,DATA1=VALUE1,RDATA2=R4           *\n.*                                                                   *\n.*          In this case the trace entry would include the CSECT     *\n.*          name, the ID data \"POINTA\", 8 bytes of data beginning    *\n.*          at VALUE1's address and the contents of register 4.      *\n.*                                                                   *\n.* ------------------------------------------------------------------*\n         MACRO\n&NAME    ITRACE &ID=,&DATA1=,&DATA2=,&RDATA1=,&RDATA2=\n         GBLC  &TROPT\n         AIF   (T'&DATA1 NE 'O' AND T'&RDATA1 NE 'O').ERR0010\n         AIF   (T'&DATA2 NE 'O' AND T'&RDATA2 NE 'O').ERR0020\n         AIF   ('&TROPT' EQ 'OFF').MEXIT\n         AIF   (T'&DATA1 EQ 'O').DATA020\n         AIF   ('&DATA1'(1,1) EQ '(').DATA010\n         LA    R14,&DATA1         DATA ADDRESS\n         MVC   TRDATA1,0(R14)     MOVE DATA\n         AGO   .DATA030\n.DATA010 ANOP\n         MVC   TRDATA1,0&DATA1    MOVE DATA\n         AGO   .DATA030\n.DATA020 ANOP\n         AIF   (T'&RDATA1 EQ 'O').DATA030\n         STCM  &RDATA1,15,TRDATA1\n.DATA030 ANOP\n         AIF   (T'&DATA2 EQ 'O').DATA050\n         AIF   ('&DATA2'(1,1) EQ '(').DATA040\n         LA    R14,&DATA2         DATA ADDRESS\n         MVC   TRDATA2,0(R14)     MOVE DATA\n         AGO   .DATA060\n.DATA040 ANOP\n         MVC   TRDATA2,0&DATA2    MOVE DATA\n         AGO   .DATA060\n.DATA050 ANOP\n         AIF   (T'&RDATA2 EQ 'O').DATA060\n         STCM  &RDATA2,15,TRDATA2\n.DATA060 ANOP\n         BAL   R14,TRACE000       ENTER TRACE ROUTINE\n         AIF      (T'&ID EQ 'O').NOID\n&NAME    DC    CL8'&ID'           TRACE ID\n         AGO   .ID\n.NOID    ANOP\n         MNOTE 4,'NO ID GIVEN, ''**NO ID**'' GENERATED'\n&NAME    DC    CL8'**NOID**'\n.ID      ANOP\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'DATA1 AND RDATA1 ARE MUTUALLY EXCLUSIVE'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'DATA2 AND RDATA2 ARE MUTUALLY EXCLUSIVE'\n.MEXIT   ANOP\n         MEXIT\n         MEND\n./ ADD NAME=OPCODE\n         MACRO\n         OPCODE &MACH,                                                 +\n               &MNEM,                                                  +\n               &FORMAT,                                                +\n               &LENGTH,                                                +\n               &COMMENT,                                               +\n               &FLAGS=,                                                +\n               &REGS=,                                                 +\n               &TYPE=DEFINE\n         GBLB &OPSW\n         GBLC &OPTBL(256),&HEXTBL(16)\n         LCLA &SUB1,&SUB2,&SUB3\n         LCLC &OP1,&OP2,&OPTS\n         AIF  (&OPSW).LBL020\n&OPSW    SETB 1\n&SUB1    SETA 1\n.LBL010  ANOP\n&OPTBL(&SUB1) SETC '0'\n&SUB1    SETA &SUB1+1\n         AIF  (&SUB1 LE 256).LBL010\n&HEXTBL(01) SETC '0'\n&HEXTBL(02) SETC '1'\n&HEXTBL(03) SETC '2'\n&HEXTBL(04) SETC '3'\n&HEXTBL(05) SETC '4'\n&HEXTBL(06) SETC '5'\n&HEXTBL(07) SETC '6'\n&HEXTBL(08) SETC '7'\n&HEXTBL(09) SETC '8'\n&HEXTBL(10) SETC '9'\n&HEXTBL(11) SETC 'A'\n&HEXTBL(12) SETC 'B'\n&HEXTBL(13) SETC 'C'\n&HEXTBL(14) SETC 'D'\n&HEXTBL(15) SETC 'E'\n&HEXTBL(16) SETC 'F'\n.LBL020  ANOP\n         AIF  ('&TYPE' EQ 'INDEX').LBL100\n         AIF  ('&TYPE' NE 'DEFINE').ERR70\n         AIF  (T'&MACH EQ 'O').ERR010\n         AIF  (K'&MACH NE 2).ERR020\n         AIF  (T'&LENGTH EQ 'O').ERR080\n         AIF  (&LENGTH EQ 2).LBL025\n         AIF  (&LENGTH EQ 4).LBL025\n         AIF  (&LENGTH NE 6).ERR090\n.LBL025  ANOP\n&OP1     SETC '&MACH'(1,1)\n&OP2     SETC '&MACH'(2,1)\n&SUB1    SETA 1\n.LBL030  ANOP\n         AIF  ('&OP1' EQ '&HEXTBL(&SUB1)').LBL040\n         AIF  (&SUB1 EQ 16).ERR030\n&SUB1    SETA &SUB1+1\n         AGO  .LBL030\n.LBL040  ANOP\n&SUB2    SETA &SUB1\n&SUB1    SETA 1\n.LBL050  ANOP\n         AIF  ('&OP2' EQ '&HEXTBL(&SUB1)').LBL060\n         AIF  (&SUB1 EQ 16).ERR030\n&SUB1    SETA &SUB1+1\n         AGO  .LBL050\n.LBL060  ANOP\n&SUB3    SETA &SUB1\n&SUB1    SETA (16*(&SUB2-1))+&SUB3\n         AIF  ('&OPTBL(&SUB1)' NE '0').ERR040\n&OPTBL(&SUB1) SETC 'MACH&MACH'\n         AIF  (T'&MNEM EQ 'O').ERR050\n         AIF  (T'&FORMAT EQ 'O').ERR060\nMACH&MACH DC   CL2'&MACH'           MACHINE CODE FOR THIS INSTRUCTION\n          DC   CL06'&MNEM'          MNEMONIC\n          DC   AL2(&LENGTH)         INSTRUCTION LENGTH\n          DC   AL1(&FORMAT)         FORMAT CODE\n&OPTS    SETC '0'\n         AIF  (T'&FLAGS EQ 'O').LBL070\n&OPTS    SETC '&FLAGS'\n.LBL070  ANOP\n         AIF  (T'&COMMENT EQ 'O').LBL080\n          DC   AL1(&OPTS)           FLAGS\n         AGO   .LBL0090\n.LBL080  ANOP\n          DC   AL1(&OPTS+$OPNCMNT)  FLAGS + NO COMMENT INDICATOR\n.LBL0090 ANOP\n         AIF   (T'&REGS EQ 'O').LBL009A\n          DC    AL1(&REGS)\n         AGO   .LBL009B\n.LBL009A ANOP\n          DC    AL1(0)              NO REGISTER REQUIREMENTS\n.LBL009B ANOP\n         AIF   (T'&COMMENT EQ 'O').EXIT\n          DC   CL25&COMMENT         COMMENT\n         MEXIT\n.LBL100  ANOP\n&SUB1    SETA 1\n.LBL110  ANOP\n         DC    A(&OPTBL(&SUB1))\n         AIF   (&SUB1 EQ 256).EXIT\n&SUB1    SETA  &SUB1+1\n         AGO   .LBL110\n.ERR010  ANOP\n         MNOTE 12,'MACHINE CODE IS REQUIRED'\n         MEXIT\n.ERR020  ANOP\n         MNOTE 12,'MACHINE CODE MUST BE 2 CHARACTERS'\n         MEXIT\n.ERR030  ANOP\n         MNOTE 12,'MACHINE CODE CONTAINS INVALID HEX CHARACTER'\n         MEXIT\n.ERR040  ANOP\n         MNOTE 12,'MACHINE CODE &MACH IS DUPLICATELY DEFINED'\n         MEXIT\n.ERR050  ANOP\n         MNOTE 12,'MNEMONIC IS REQUIRED'\n         MEXIT\n.ERR060  ANOP\n         MNOTE 12,'INSTRUCTION FORMAT IS REQUIRED'\n         MEXIT\n.ERR070  ANOP\n         MNOTE 12,'INVALID TYPE PARAMETER'\n         MEXIT\n.ERR080  ANOP\n         MNOTE 12,'LENGTH IS REQUIRED'\n         MEXIT\n.ERR090  ANOP\n         MNOTE 12,'LENGTH MUST BE 2, 4, OR 6'\n.EXIT    ANOP\n         MEND\n./ ADD NAME=PRTBLOK\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PRINTER REQUEST BLOCK                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n&NAME    PRTBLOK  &TYPE=\n         AIF      ('&TYPE' EQ 'DSECT').DSECT\n&NAME    DS    0C\n         AGO      .NODSECT\n.DSECT   ANOP\n         AIF      (T'&NAME EQ 'O').NONAME\n&NAME    DSECT\n.NODSECT ANOP\nPRTCMD   DC    X'00'               COMMAND\n$PRTHEAD EQU   C'H'                .. PRINT HEADING\n$PRTSUBH EQU   C'S'                .. PRINT SUB-HEADING\n$PRTPRT  EQU   C'P'                .. PRINT\n$PRTMEM  EQU   C'M'                .. NEW MEMBER\n$PRTCLS  EQU   C'C'                .. CLOSE PRINT\nPRTCC    DC    C' '                CARRIAGE CONTROL\nPRTDATA  DC    CL132' '            PRINT DATA\n         MEXIT\n.NONAME  ANOP\n         MNOTE    12,'NAME REQUIRED WHEN TYPE=DSECT'\n         MEND\n./ ADD NAME=REGEQU\nR0       EQU    0\nR1       EQU    1\nR2       EQU    2\nR3       EQU    3\nR4       EQU    4\nR5       EQU    5\nR6       EQU    6\nR7       EQU    7\nR8       EQU    8\nR9       EQU    9\nR10      EQU    10\nR11      EQU    11\nR12      EQU    12\nR13      EQU    13\nR14      EQU    14\nR15      EQU    15\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DISASSRC": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x05#\\x0f\\x01\\x05#\\x0f\\x14\\x12#h#h\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-08-18T00:00:00", "modifydate": "2005-08-18T14:12:00", "lines": 9064, "newlines": 9064, "modlines": 0, "user": "RLRICE"}, "text": "./ ADD NAME=DISASMB2\n         TITLE 'DISASMB2 B2 OPCODE INTERPRETER'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: DISASMB2 - B2 opcode interpreter                      *\n*                                                                     *\n*  Function:                                                          *\n*   B2 opcodes are actually 2-byte opcodes.  All opcodes including    *\n*   B2 are defined in DISASMOP.  The first 256 bytes of DISASMOP is   *\n*   an index to the actual opcode definition.  To keep this index as  *\n*   simple as possible, this module is called to modify the B2 entry  *\n*   depending on the 2nd byte of the opcode.                          *\n*                                                                     *\n*   At entry                                                          *\n*                                                                     *\n*     R0  address of the instruction                                  *\n*     R1  address of the B2 entry in DISASMOP                         *\n*                                                                     *\n*   The B2 entry of DISASMOP will be modified:                        *\n*     .  The mnemonic will be set                                     *\n*     .  The instruction format will be set                           *\n*     .  \"flags\" (whether the instruction causes a data reference)    *\n*        will be set.                                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  DISASMGB\nDISASMB2 CSECT\nDISASMB2 AMODE 31\n         RMODE 24\n         USING DISASMB2,R12\n         USING DISASM00,R11\n         USING OPDSECT,R1            DEFINE OPCODE DSECT BASE\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               SET BASE REG\n         B     B20000                SKIP EYECATCHER\n         DC    CL8'DISASMB2'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nB20000   DS    0H\n         LR    R2,R0                 COPY INSTRUCTION ADDRESS\n         LA    R3,INSTTBLE           B2 INSTRUCTION TABLE ADDRESS\n         USING B2DSECT,R3            DEFINE BASE\nB20010   DS    0H\n         CLC   B2B2,1(R2)            ENTRY FOUND?\n         BE    B20020                YES\n         LA    R3,B2DSECTL(R3)       NEXT ENTRY\n         CLI   0(R3),X'FF'           END OF TABLE?\n         BNE   B20010                NO\n         ABEND ABEND006,DUMP,,USER\nB20020   DS    0H\n         MVC   OPMNEM,B2MNEM         COPY MNEMONIC\n         MVC   OPFORM,B2FORM         COPY FORMAT\n         MVC   OPFLAGS,B2FLAGS       COPY FLAGS\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         SPACE 1\nINSTTBLE DS    0C\n         DC    X'02',CL6'STIDP',AL1($OPB2S),AL1($OPREF+$OPNCMNT)\n         DC    X'04',CL6'SCK  ',AL1($OPB2S),AL1($OPREF+$OPNCMNT)\n         DC    X'05',CL6'STCK ',AL1($OPB2S),AL1($OPREF+$OPNCMNT)\n         DC    X'06',CL6'SCKC ',AL1($OPB2S),AL1($OPREF+$OPNCMNT)\n         DC    X'07',CL6'STCKC',AL1($OPB2S),AL1($OPREF+$OPNCMNT)\n         DC    X'08',CL6'SPT  ',AL1($OPB2S),AL1($OPREF+$OPNCMNT)\n         DC    X'09',CL6'STPT ',AL1($OPB2S),AL1($OPREF+$OPNCMNT)\n         DC    X'0A',CL6'SPKA ',AL1($OPB2S),AL1($OPREF+$OPNCMNT)\n         DC    X'0B',CL6'IPK  ',AL1($OPB2),AL1($OPNCMNT)\n         DC    X'0D',CL6'PTLB ',AL1($OPB2),AL1($OPNCMNT)\n         DC    X'10',CL6'SPX  ',AL1($OPB2S),AL1($OPREF+$OPNCMNT)\n         DC    X'11',CL6'STPX ',AL1($OPB2S),AL1($OPREF+$OPNCMNT)\n         DC    X'12',CL6'STAP ',AL1($OPB2S),AL1($OPREF+$OPNCMNT)\n         DC    X'18',CL6'PC   ',AL1($OPB2S),AL1($OPREF+$OPNCMNT)\n         DC    X'19',CL6'SAC  ',AL1($OPB2S),AL1($OPREF+$OPNCMNT)\n         DC    X'1A',CL6'CFC  ',AL1($OPB2S),AL1($OPREF+$OPNCMNT)\n         DC    X'21',CL6'IPTE ',AL1($OPB2RR),AL1($OPNCMNT)\n         DC    X'22',CL6'IPM  ',AL1($OPB2R),AL1($OPNCMNT)\n         DC    X'23',CL6'IVSK ',AL1($OPB2RR),AL1($OPNCMNT)\n         DC    X'24',CL6'IAC  ',AL1($OPB2RR),AL1($OPNCMNT)\n         DC    X'25',CL6'SSAR ',AL1($OPB2R),AL1($OPNCMNT)\n         DC    X'26',CL6'EPAR ',AL1($OPB2R),AL1($OPNCMNT)\n         DC    X'27',CL6'ESAR ',AL1($OPB2R),AL1($OPNCMNT)\n         DC    X'28',CL6'PT   ',AL1($OPB2RR),AL1($OPNCMNT)\n         DC    X'29',CL6'ISKE ',AL1($OPB2RR),AL1($OPNCMNT)\n         DC    X'2A',CL6'RRBE ',AL1($OPB2RR),AL1($OPNCMNT)\n         DC    X'2B',CL6'SSKE ',AL1($OPB2RR),AL1($OPNCMNT)\n         DC    X'2C',CL6'TB   ',AL1($OPB2RR),AL1($OPNCMNT)\n         DC    X'2D',CL6'DXR  ',AL1($OPB2RR),AL1($OPNCMNT)\n         DC    X'30',CL6'CSCH ',AL1($OPB2),AL1($OPNCMNT)\n         DC    X'31',CL6'HSCH ',AL1($OPB2),AL1($OPNCMNT)\n         DC    X'32',CL6'MSCH ',AL1($OPB2S),AL1($OPREF+$OPNCMNT)\n         DC    X'33',CL6'SSCH ',AL1($OPB2S),AL1($OPREF+$OPNCMNT)\n         DC    X'34',CL6'STSCH',AL1($OPB2S),AL1($OPREF+$OPNCMNT)\n         DC    X'35',CL6'TSCH ',AL1($OPB2S),AL1($OPREF+$OPNCMNT)\n         DC    X'36',CL6'TPI  ',AL1($OPB2S),AL1($OPREF+$OPNCMNT)\n         DC    X'37',CL6'SAL  ',AL1($OPB2),AL1($OPNCMNT)\n         DC    X'38',CL6'RSCH ',AL1($OPB2),AL1($OPNCMNT)\n         DC    X'39',CL6'STCRW',AL1($OPB2S),AL1($OPREF+$OPNCMNT)\n         DC    X'3A',CL6'STCPS',AL1($OPB2S),AL1($OPREF+$OPNCMNT)\n         DC    X'3B',CL6'RCHP ',AL1($OPB2),AL1($OPNCMNT)\n         DC    X'3C',CL6'SCHM ',AL1($OPB2),AL1($OPNCMNT)\n         DC    X'FF'\n         LTORG\n* ------------------------------------------------------------------ *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n* ------------------------------------------------------------------ *\nB2DSECT  DSECT\nB2B2     DS     X              2ND BYTE OF INSTRUCTION\nB2MNEM   DS     CL6            MNEMONIC\nB2FORM   DS     X              INSTRUCTION FORMAT\nB2FLAGS  DS     X              FLAGS\nB2DSECTL EQU    *-B2DSECT\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              DATA AREAS                                            *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         COPY  DISASMDA\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              COMMON DATA MAP                                       *\n*                                                                    *\n* ------------------------------------------------------------------ *\nDISASM00 DISASM00 TYPE=DSECT\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              EQUATES                                               *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         END  DISASMB2\n./ ADD NAME=DISASMDB\n         TITLE 'DISASMDB - DEBUG MODULE'\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISASMDB                                             *\n*                                                                    *\n*  Function:                                                         *\n*   If DISDEBUG DD is allocated, many internal fields and data       *\n*   chains will be printed for trouble shooting.                     *\n*                                                                    *\n*   There are two \"functions\".  Normal function is to print the      *\n*   internal fields and run the internal data chains.  The secondary *\n*   function is to print the assembler output for module DISASM07.   *\n*                                                                    *\n*   NOTE:  Several fields are copied to a work field before          *\n*          \"unpacking\" them for printing.  When \"unpacking\" the      *\n*          field, 1 more byte than printed is unpacked.  When the    *\n*          field is the last field in the data area, an S0C4 abend   *\n*          can occur.  Copying the field before unpacking was to     *\n*          prevent these S0C4 abends.  If any data area is modified  *\n*          and some other field is added to the end of the area,     *\n*          beware that if it is unpacked for printing it may need    *\n*          to be copied before unpacking.                            *\n*                                                                    *\n*--------------------------------------------------------------------*\n         COPY  DISASMGB\nDISASMDB CSECT\nDISASMDB AMODE 31\nDISASMDB RMODE 24\n         USING DISASMDB,R12\n         USING DISASM00,R11\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               SET BASE REG\n         B     DBUG0000              SKIP EYECATCHER\n         DC    CL8'DISASMDB'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nDBUG0000 DS    0H\n         LR    R9,R1                 COPY PARAMETER BLOCK ADDRESS\n         USING DBUGBLOK,R9           DEFINE BASE\n         LA    R1,SAVEDB             OUR SAVE AREA ADDRESS\n         ST    R13,4(R1)             CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         ITRACE ID=ENTRY,                                              +\n               DATA1=DBUGCMD\n         TM    COMMDD,$DEBUGDD       DEBUG DD PRESENT?\n         BNO   DBUG1000              NO, TRACE ENTRY BEFORE EXIT\n         TM    DBUGFLAG,$DBUGOPN     DEBUG ALREADY OPEN?\n         BO    DBUG0010              YES\n         OI    DBUGFLAG,$DBUGOPN     INDICATE DCB IS OPEN\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         OPEN  (DISDEBUG,OUTPUT)     OPEN DISDEBUG\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\nDBUG0010 DS    0H\n         CLI   DBUGCMD,$DBUGHD       HEADING?\n         BE    DBUG0300              YES\n         CLI   DBUGCMD,$DBUGPRT      PRINT?\n         BE    DBUG0310              YES\n         BAL   R10,HEAD0000          PRINT DEBUG HEADING\nDBUG0020 DS    0H\n* ------------------------------------------------------------------- *\n*             PRINT TRACE TABLE CONTROL                               *\n* ------------------------------------------------------------------- *\n         UNPK  PRTR1ST(9),TR1ST(5)   UNPACK TRACE 1ST\n         MVZ   PRTR1ST,COMM0F0F      TURN OFF ZONES\n         TR    PRTR1ST,COMMHXCH      TRANSLATE TO PRINTABLE\n         MVI   PRTR1ST+8,C' '        RESTORE BLANK\n         UNPK  PRTRLAST(9),TRLAST(5) UNPACK TRACE LAST\n         MVZ   PRTRLAST,COMM0F0F     TURN OFF ZONES\n         TR    PRTRLAST,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRTRLAST+8,C' '       RESTORE BLANK\n         UNPK  PRTRCURR(9),TRCURR(5) UNPACK TRACE CURRENT\n         MVZ   PRTRCURR,COMM0F0F     TURN OFF ZONES\n         TR    PRTRCURR,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRTRCURR+8,C' '       RESTORE BLANK\n         MVC   PRTDATA(PRTRL),PRTR   TRACE DATA\n         BAL   R10,PRT0000           PRINT TRACE DATA\n* ------------------------------------------------------------------- *\n*             PRINT DISMOD I/O AREA ADDRESS                           *\n* ------------------------------------------------------------------- *\n         UNPK  PRIOA(9),COMMIO(5)    UNPACK I/O BUFFER ADDRESS\n         MVZ   PRIOA,COMM0F0F        TURN OFF ZONES\n         TR    PRIOA,COMMHXCH        TRANSLATE TO PRINTABLE\n         MVI   PRIOA+8,C' '          RESTORE BLANK\n         MVC   PRTDATA(PRIOL),PRIO   TRACE DATA\n         BAL   R10,PRT0000           PRINT TRACE DATA\n* ------------------------------------------------------------------- *\n*             CHASE ESD CHAIN                                         *\n* ------------------------------------------------------------------- *\nDBUG0030 DS    0H\n         ITRACE ID=ESDCHAIN\n         ICM   R3,15,COMMESD         FIRST ESD ENTRY\n         USING ESDDATA,R3            DEFINE BASE\n         BZ    DBUG0050              NO ESD ENTRIES\n         MVI   PRTCC,C'0'            DOUBLE SPACE\nDBUG0040 DS    0H\n         ITRACE ID=ESDENTRY\n         ST    R3,COMMDWRD           USE DWRD FOR WORK AREA\n         UNPK  PRESDBA(9),COMMDWRD(5)\n         MVZ   PRESDBA,COMM0F0F      TURN OFF ZONES\n         TR    PRESDBA,COMMHXCH      TRANSLATE TO PRINTABLE\n         MVI   PRESDBA+8,C' '        RESTORE BLANK\n         UNPK  PRESDNXT(9),ESDNEXT(5)  NEXT BLOCK'S ADDRESS\n         MVZ   PRESDNXT,COMM0F0F     TURN OFF ZONES\n         TR    PRESDNXT,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRESDNXT+8,C' '       RESTORE BLANK\n         MVC   PRESDNM,ESDNAME       COPY ESD NAME\n         UNPK  PRESDTYP(3),ESDTYPE(2)\n         MVZ   PRESDTYP,COMM0F0F     TURN OFF ZONES\n         TR    PRESDTYP,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRESDTYP+2,C' '       RESTORE BLANK\n         UNPK  PRESDADR(7),ESDADDR(4)\n         MVZ   PRESDADR,COMM0F0F     TURN OFF ZONES\n         TR    PRESDADR,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRESDADR+6,C' '       RESTORE BLANK\n         UNPK  PRESDSEG(3),ESDSEG(2) UNPACK SEGMENT NUMBER\n         MVZ   PRESDSEG,COMM0F0F     TURN OFF ZONES\n         TR    PRESDSEG,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRESDSEG+2,C' '       RESTORE BLANK\n         MVC   WORKX,ESDLEN          COPY TO WORK AREA\n         UNPK  PRESDLEN(7),WORKX(4)  UNPACK LENGTH\n         MVZ   PRESDLEN,COMM0F0F     TURN OFF ZONES\n         TR    PRESDLEN,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRESDLEN+6,C' '       RESTORE BLANK\n         MVC   PRTDATA(PRESDL),PRESD COPY ESD DATA TO PRINT AREA\n         BAL   R10,PRT0000           PRINT ESD DATA\n         ICM   R3,15,ESDNEXT         NEXT ESD BLOCK\n         BNZ   DBUG0040              LOOP\n* ------------------------------------------------------------------- *\n*             CHASE RLD CHAIN                                         *\n* ------------------------------------------------------------------- *\nDBUG0050 DS    0H\n         ITRACE ID=RLDCHAIN\n         ICM   R3,15,COMMRLD         FIRST RLD ENTRY\n         USING RLDDATA,R3            DEFINE BASE\n         BZ    DBUG0070              NO RLD ENTRIES\n         MVI   PRTCC,C'0'            DOUBLE SPACE\nDBUG0060 DS    0H\n         ITRACE ID=RLDENTRY\n         ST    R3,COMMDWRD           USE DWRD AS WORK AREA\n         UNPK  PRRLDBA(9),COMMDWRD(5)\n         MVZ   PRRLDBA,COMM0F0F      TURN OFF ZONES\n         TR    PRRLDBA,COMMHXCH      TRANSLATE TO PRINTABLE\n         MVI   PRRLDBA+8,C' '        RESTORE BLANK\n         UNPK  PRRLDNXT(9),RLDNEXT(5)\n         MVZ   PRRLDNXT,COMM0F0F     TURN OFF ZONES\n         TR    PRRLDNXT,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRRLDNXT+8,C' '       RESTORE BLANK\n         UNPK  PRRLDDSP(9),RLDDISP(5)\n         MVZ   PRRLDDSP,COMM0F0F     TURN OFF ZONES\n         TR    PRRLDDSP,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRRLDDSP+8,C' '       RESTORE BLANK\n         UNPK  PRRLDTYP(3),RLDTYPE(2)\n         MVZ   PRRLDTYP,COMM0F0F     TURN OFF ZONES\n         TR    PRRLDTYP,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRRLDTYP+2,C' '       RESTORE BLANK\n         UNPK  PRRLDLEN(5),RLDLEN(3) UNPACK LENGTH\n         MVZ   PRRLDLEN,COMM0F0F     TURN OFF ZONES\n         TR    PRRLDLEN,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRRLDLEN+4,C' '       RESTORE BLANK\n         UNPK  PRRLDPTR(5),RLDPTR(3) UNPACK POINTER\n         MVZ   PRRLDPTR,COMM0F0F     TURN OFF ZONES\n         TR    PRRLDPTR,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRRLDPTR+4,C' '       RESTORE BLANK\n         UNPK  PRRLDPP(5),RLDPP(3)   UNPACK POSITION POINTER\n         MVZ   PRRLDPP,COMM0F0F      TURN OFF ZONES\n         TR    PRRLDPP,COMMHXCH      TRANSLATE TO PRINTABLE\n         MVI   PRRLDPP+4,C' '        RESTORE BLANK\n         MVC   PRRLDDIR,RLDDIR       MOVE DIRECTION\n         UNPK  PRRLDESD(9),RLDESD(5) UNPACK ESD BLOCK ADDRESS\n         MVZ   PRRLDESD,COMM0F0F     TURN OFF ZONES\n         TR    PRRLDESD,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRRLDESD+8,C' '       RESTORE BLANK\n         MVC   PRTDATA(PRRLDL),PRRLD MOVE RLD DATA\n         BAL   R10,PRT0000           PRINT RLD DATA\n         ICM   R3,15,RLDNEXT         NEXT RLD BLOCK\n         BNZ   DBUG0060              LOOP\n* ------------------------------------------------------------------- *\n*             CHASE USING CHAIN                                       *\n* ------------------------------------------------------------------- *\nDBUG0070 DS    0H\n         ITRACE ID=USNGCHN\n         ICM   R3,15,COMMUSNG        FIRST USING ENTRY\n         USING USNGDSCT,R3           DEFINE BASE\n         BZ    DBUG0090              NO USING ENTRIES\n         MVI   PRTCC,C'0'            DOUBLE SPACE\nDBUG0080 DS    0H\n         ITRACE ID=USNGNTRY\n         ST    R3,COMMDWRD           USE DWRD AS WORK AREA\n         UNPK  PRUSGBA(9),COMMDWRD(5)\n         MVZ   PRUSGBA,COMM0F0F      TURN OFF ZONES\n         TR    PRUSGBA,COMMHXCH      TRANSLATE TO PRINTABLE\n         MVI   PRUSGBA+8,C' '        RESTORE BLANK\n         UNPK  PRUSGNXT(9),USNGNEXT(5)\n         MVZ   PRUSGNXT,COMM0F0F     TURN OFF ZONES\n         TR    PRUSGNXT,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRUSGNXT+8,C' '       RESTORE BLANK\n         MVC   PRUSGNME,USNGDSNM     DSECT'S NAME\n         MVC   PRUSGLBL,USNGLBNM     LABEL WITHIN DSECT\n         MVC   PRUSGBSE,USNGBASE     COPY BASE REGISTER\n         TR    PRUSGBSE,COMMHXCH     TRANSLATE TO PRINTABLE\n         UNPK  PRUSGFLG(3),USNGFLAG(2)\n         MVZ   PRUSGFLG,COMM0F0F     TURN OFF ZONES\n         TR    PRUSGFLG,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRUSGFLG+2,C' '       RESTORE BLANK\n         UNPK  PRUSGBGN(9),USNGBEGN(5)\n         MVZ   PRUSGBGN,COMM0F0F     TURN OFF ZONES\n         TR    PRUSGBGN,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRUSGBGN+8,C'-'       RESTORE HYPHEN\n         UNPK  PRUSGDSP(9),USNGDISP(5)\n         MVZ   PRUSGDSP,COMM0F0F     TURN OFF ZONES\n         TR    PRUSGDSP,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRUSGDSP+8,C'-'       RESTORE HYPHEN\n         MVC   WORKX,USNGEND         COPY TO WORK FIELD\n         UNPK  PRUSGEND(9),WORKX(5)  UNPACK\n         MVZ   PRUSGEND,COMM0F0F     TURN OFF ZONES\n         TR    PRUSGEND,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRUSGEND+8,C' '       RESTORE BLANK\n         MVC   PRTDATA(PRUSNGL),PRUSNG\n         BAL   R10,PRT0000           PRINT USING DATA\n         ICM   R3,15,USNGNEXT        NEXT USING BLOCK\n         BNZ   DBUG0080              LOOP\n* ------------------------------------------------------------------- *\n*             CHASE DSECT CHAIN                                       *\n* ------------------------------------------------------------------- *\nDBUG0090 DS    0H\n         ITRACE ID=DSCTCHN\n         ICM   R3,15,COMMDSCT        FIRST DSECT ENTRY\n         USING DSCTDSCT,R3           DEFINE BASE\n         BZ    DBUG0120              NO DSECT ENTRIES\n         MVI   PRTCC,C'0'            DOUBLE SPACE\nDBUG0100 DS    0H\n         ITRACE ID=DSCTNTRY\n         ST    R3,COMMDWRD           USE DWRD AS WORK AREA\n         UNPK  PRDSBA(9),DSCTNEXT(5) UNPACK BLOCK ADDRESS\n         MVZ   PRDSBA,COMM0F0F       TURN OFF ZONES\n         TR    PRDSBA,COMMHXCH       TRANSLATE TO PRINTABLE\n         MVI   PRDSBA+8,C' '         RESTORE BLANK\n         UNPK  PRDSNXT(9),DSCTNEXT(5)\n         MVZ   PRDSNXT,COMM0F0F      TURN OFF ZONES\n         TR    PRDSNXT,COMMHXCH      TRANSLATE TO PRINTABLE\n         MVI   PRDSNXT+8,C' '        RESTORE BLANK\n         MVC   PRDSNAME,DSCTNAME     COPY DSECT'S NAME\n         MVC   WORKX,DSCTLBA         COPY ADDRESS TO WORK AREA\n         UNPK  PRDSLABL(9),WORKX(5)  UNPACK LABEL BLOCK ADDRESS\n         MVZ   PRDSLABL,COMM0F0F     TURN OFF ZONES\n         TR    PRDSLABL,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRDSLABL+8,C' '       RESTORE BLANK\n         MVC   PRTDATA(PRDSCTL),PRDSCT\n         BAL   R10,PRT0000           PRINT DSECT DATA\n         ICM   R4,15,DSCTLBA         FIRST LABEL FROM DSECT\n         BZ    DBUG0110              NO LABELS\n         BAL   R8,DBUG0190           FOLLOW LABEL CHAIN\nDBUG0110 DS    0H\n         ICM   R3,15,DSCTNEXT        NEXT DSECT\n         BNZ   DBUG0100              LOOP\n* ------------------------------------------------------------------- *\n*             CHASE BASE CHAIN                                        *\n* ------------------------------------------------------------------- *\nDBUG0120 DS    0H\n         ITRACE ID=BASECHN\n         ICM   R3,15,COMMBASE        FIRST BASE ENTRY\n         USING BASEDSCT,R3           DEFINE BASE\n         BZ    DBUG0140              NO DSECT ENTRIES\n         MVI   PRTCC,C'0'            DOUBLE SPACE\nDBUG0130 DS    0H\n         ITRACE ID=BASENTRY\n         ST    R3,COMMDWRD           USE DWRD AS WORK AREA\n         UNPK  PRBSEBA(9),COMMDWRD(5)\n         MVZ   PRBSEBA,COMM0F0F      TURN OFF ZONES\n         TR    PRBSEBA,COMMHXCH      TRANSLATE TO PRINTABLE\n         MVI   PRBSEBA+8,C' '        RESTORE BLANK\n         UNPK  PRBSENXT(9),BASENEXT(5)\n         MVZ   PRBSENXT,COMM0F0F     TURN OFF ZONES\n         TR    PRBSENXT,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRBSENXT+8,C' '       RESTORE BLANK\n         UNPK  PRBSEBGN(9),BASEBEGN(5)\n         MVZ   PRBSEBGN,COMM0F0F     TURN OFF ZONES\n         TR    PRBSEBGN,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRBSEBGN+8,C'-'       RESTORE BLANK\n         UNPK  PRBSEEND(9),BASEEND(5)\n         MVZ   PRBSEEND,COMM0F0F     TURN OFF ZONES\n         TR    PRBSEEND,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRBSEEND+8,C' '       RESTORE BLANK\n         UNPK  PRBSEDSP(9),BASEDISP(5)\n         MVZ   PRBSEDSP,COMM0F0F     TURN OFF ZONES\n         TR    PRBSEDSP,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRBSEDSP+8,C' '       RESTORE BLANK\n         MVC   PRBSEREG,BASEREG      COPY BASE REGISTER\n         TR    PRBSEREG,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVC   PRTDATA(PRBASEL),PRBASE\n         BAL   R10,PRT0000           PRINT BASE DATA\n         ICM   R3,15,BASENEXT        NEXT BASE BLOCK\n         BNZ   DBUG0130              LOOP\n* ------------------------------------------------------------------- *\n*             CHASE DATA BLOCK CHAIN                                  *\n* ------------------------------------------------------------------- *\nDBUG0140 DS    0H\n         ITRACE ID=DATACHN\n         ICM   R3,15,COMMDATA        FIRST DATA ENTRY\n         USING DATADSCT,R3           DEFINE BASE\n         BZ    DBUG0160              NO DSECT ENTRIES\n         MVI   PRTCC,C'0'            DOUBLE SPACE\nDBUG0150 DS    0H\n         ITRACE ID=DATANTRY\n         ST    R3,COMMDWRD           USE DWRD AS WORK AREA\n         UNPK  PRDTABA(9),COMMDWRD(5)\n         MVZ   PRDTABA,COMM0F0F      TURN OFF ZONES\n         TR    PRDTABA,COMMHXCH      TRANSLATE TO PRINTABLE\n         MVI   PRDTABA+8,C' '        RESTORE BLANK\n         UNPK  PRDTANXT(9),DATANEXT(5)\n         MVZ   PRDTANXT,COMM0F0F     TURN OFF ZONES\n         TR    PRDTANXT,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRDTANXT+8,C' '       RESTORE BLANK\n         UNPK  PRDTABGN(9),DATABEGN(5)\n         MVZ   PRDTABGN,COMM0F0F     TURN OFF ZONES\n         TR    PRDTABGN,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRDTABGN+8,C'-'       RESTORE HYPHEN\n         UNPK  PRDTAEND(9),DATAEND(5)\n         MVZ   PRDTAEND,COMM0F0F     TURN OFF ZONES\n         TR    PRDTAEND,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRDTAEND+8,C' '       RESTORE BLANK\n         UNPK  PRDTALEN(9),DATALEN(5)\n         MVZ   PRDTALEN,COMM0F0F     TURN OFF ZONES\n         TR    PRDTALEN,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRDTALEN+8,C' '       RESTORE BLANK\n         UNPK  PRDTATYP(3),DATATYPE(2)\n         MVZ   PRDTATYP,COMM0F0F     TURN OFF ZONES\n         TR    PRDTATYP,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRDTATYP+2,C' '       RESTORE BLANK\n         MVC   PRDTANME,DATANAME     COPY DATA NAME\n         UNPK  PRDTALBA(9),DATALBA(5)\n         MVZ   PRDTALBA,COMM0F0F     TURN OFF ZONES\n         TR    PRDTALBA,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRDTALBA+8,C'+'       RESTORE PLUS SIGN\n         UNPK  PRDTALBD(9),DATALBD(5)\n         MVZ   PRDTALBD,COMM0F0F     TURN OFF ZONES\n         TR    PRDTALBD,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRDTALBD+8,C' '       RESTORE BLANK\n         MVC   PRTDATA(PRDATAL),PRDATA\n         BAL   R10,PRT0000           PRINT DATA DATA\n         ICM   R3,15,DATANEXT        NEXT DATA BLOCK\n         BNZ   DBUG0150              LOOP\n* ------------------------------------------------------------------- *\n*             CHASE REFERENCE BLOCK CHAIN                             *\n* ------------------------------------------------------------------- *\nDBUG0160 DS    0H\n         ITRACE ID=REFCHAIN\n         ICM   R3,15,COMMREF         FIRST REFERENCE BLOCK\n         USING REFDSCT,R3            DEFINE BASE\n         BZ    DBUG0180              NO REF BLOCK'S\n         MVI   PRTCC,C'0'            DOUBLE SPACE\nDBUG0170 DS    0H\n         ITRACE ID=REFENTRY\n         ST    R3,COMMDWRD           USE DWRD AS WORK AREA\n         UNPK  PRREFBA(9),REFNEXT(5)\n         MVZ   PRREFBA,COMM0F0F      TURN OFF ZONES\n         TR    PRREFBA,COMMHXCH      TRANSLATE TO PRINTABLE\n         MVI   PRREFBA+8,C' '        RESTORE BLANK\n         UNPK  PRREFNXT(9),REFNEXT(5)\n         MVZ   PRREFNXT,COMM0F0F     TURN OFF ZONES\n         TR    PRREFNXT,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRREFNXT+8,C' '       RESTORE BLANK\n         UNPK  PRREFAD1(9),REFOPER1(5)\n         MVZ   PRREFAD1,COMM0F0F     TURN OFF ZONES\n         TR    PRREFAD1,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRREFAD1+8,C'-'       RESTORE HYPHEN\n         UNPK  PRREFO1D(9),REFDISP1(5)\n         MVZ   PRREFO1D,COMM0F0F     TURN OFF ZONES\n         TR    PRREFO1D,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRREFO1D+8,C' '       RESTORE BLANK\n         UNPK  PRREFAD2(9),REFOPER2(5)\n         MVZ   PRREFAD2,COMM0F0F     TURN OFF ZONES\n         TR    PRREFAD2,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRREFAD2+8,C'-'       RESTORE HYPHEN\n         UNPK  PRREFO2D(9),REFDISP2(5)\n         MVZ   PRREFO2D,COMM0F0F     TURN OFF ZONES\n         TR    PRREFO2D,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRREFO2D+8,C' '       RESTORE BLANK\n         MVC   WORKX,REFDISPI        COPY TO WORK AREA\n         UNPK  PRREFDSP(9),WORKX(5)  UNPACK\n         MVZ   PRREFDSP,COMM0F0F     TURN OFF ZONES\n         TR    PRREFDSP,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRREFDSP+8,C' '       RESTORE BLANK\n         MVC   PRTDATA(PRREFL),PRREF\n         BAL   R10,PRT0000           PRINT REF DATA\n         ICM   R3,15,REFNEXT         NEXT REF BLOCK\n         BNZ   DBUG0170              LOOP\n* ------------------------------------------------------------------- *\n*             CHASE LABEL CHAIN FOR CSECT                             *\n* ------------------------------------------------------------------- *\nDBUG0180 DS    0H\n         ITRACE ID=CSCTLABL\n         ICM   R4,15,COMMLABL        FIRST REFERENCE BLOCK\n         BZ    DBUG0210              NO CSECT LABELS\n         BAL   R8,DBUG0190           CHASE THE CHAIN\n         B     DBUG0210              PRINT DISPLACEMENT TABLE\n* ------------------------------------------------------------------- *\n*             CHASE LABEL CHAIN FOR DSECTS AND CSECTS                 *\n* ------------------------------------------------------------------- *\nDBUG0190 DS    0H\n         USING LABLDSCT,R4           DEFINE BASE\n         MVI   PRTCC,C'0'            DOUBLE SPACE\nDBUG0200 DS    0H\n         ITRACE ID=LABLNTRY\n         ST    R4,COMMDWRD           USE DWRD AS WORK AREA\n         UNPK  PRLBLBA(9),COMMDWRD(5)\n         MVZ   PRLBLBA,COMM0F0F      TURN OFF ZONES\n         TR    PRLBLBA,COMMHXCH      TRANSLATE TO PRINTABLE\n         MVI   PRLBLBA+8,C' '        RESTORE BLANK\n         UNPK  PRLBLNXT(9),LABLNEXT(5)\n         MVZ   PRLBLNXT,COMM0F0F     TURN OFF ZONES\n         TR    PRLBLNXT,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRLBLNXT+8,C' '       RESTORE BLANK\n         MVC   PRLBLNM,LABLNAME      COPY NAME\n         MVC   PRLBLTYP,LABLTYPE     COPY LABEL TYPE\n         UNPK  PRLBLDSP(9),LABLDISP(5)\n         MVZ   PRLBLDSP,COMM0F0F     TURN OFF ZONES\n         TR    PRLBLDSP,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRLBLDSP+8,C' '       RESTORE BLANK\n         UNPK  PRLBLEQU(9),LABLEQU(5)\n         MVZ   PRLBLEQU,COMM0F0F     TURN OFF ZONES\n         TR    PRLBLEQU,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   PRLBLEQU+8,C' '       RESTORE BLANK\n         MVC   PRTDATA(PRLABLL),PRLABL\n         BAL   R10,PRT0000           PRINT LABL DATA\n         ICM   R4,15,LABLNEXT        NEXT LABL BLOCK\n         BNZ   DBUG0200              LOOP\n         BR    R8                    RETURN\n* ------------------------------------------------------------------- *\n*             PRINT INSTRUCTION DISPLACEMENT TABLE                    *\n* ------------------------------------------------------------------- *\nDBUG0210 DS    0H\n         ICM   R3,15,COMMDISP        INSTRUCTION DISPLACEMENT TABLE\n         BZ    EXIT0000              TABLE NOT ACQUIRED\n         MVI   PRTCC,C'0'            DOUBLE SPACE\n         MVC   PRTDATA(PRDISPL),PRDISP\n         BAL   R10,PRT0000           PRINT HEADING\nDBUG0220 DS    0H\n         LA    R2,PRTDATA            PRINT DATA\n         LA    R1,10                 10 DISPLACEMENTS PER LINE\nDBUG0230 DS    0H\n         CLC   XFFFF,0(R3)           END OF DISPLACEMENT TABLE?\n         BE    DBUG0240              YES\n         UNPK  0(9,R2),0(5,R3)       UNPACK DISPLACEMENT\n         MVZ   0(8,R2),COMM0F0F      TURN OFF ZONES\n         TR    0(8,R2),COMMHXCH      TRANSLATE TO PRINTABLE\n         MVI   8(R2),C' '            RESTORE BLANK\n         LA    R2,9(R2)              NEXT IN PRINT AREA\n         LA    R3,4(R3)              NEXT DISPLACEMENT\n         BCT   R1,DBUG0230           LOOP\n         BAL   R10,PRT0000           PRINT DISPLACEMENT DATA\n         B     DBUG0220              BUILD A NEW LINE\nDBUG0240 DS    0H\n         CLC   PRTDATA,PRTDATA-1     LINE EMPTY?\n         BE    EXIT0000              YES, EXIT\n         BAL   R10,PRT0000           PRINT DISPLACEMENT DATA\n         B     EXIT0000              EXIT\n* ------------------------------------------------------------------- *\n*             PRINT SUBHEADING                                        *\n* ------------------------------------------------------------------- *\nDBUG0300 DS    0H\n         BAL   R10,HEAD0000          PRINT HEADING\n         B     EXIT0000              EXIT\n* ------------------------------------------------------------------- *\n*             PRINT DATA                                              *\n* ------------------------------------------------------------------- *\nDBUG0310 DS    0H\n         L     R1,DBUGDATA           DATA ADDRESS\n         MVC   PRTDATA(120),0(R1)    COPY DATA\n         BAL   R10,PRT0000           PRINT\n         B     EXIT0000              EXIT\n* ------------------------------------------------------------------- *\n*             NO DISDEBUG DD PRESENT                                  *\n* ------------------------------------------------------------------- *\nDBUG1000 DS    0H\n         ITRACE ID=NODEBUG           CAUSE TRACE ENTRY\n         B     EXIT0000              EXIT\nPRT0000  DS    0H\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         PUT   DISDEBUG,PRTCC        WRITE DEBUG OUTPUT\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         AP    LINECT,P1             ADD 1 TO LINE COUNT\n         CLI   PRTCC,C' '            SINGLE SPACED?\n         BNE   PRT0010               NO\n         AP    LINECT,P1             ADD 1 TO LINE COUNT\nPRT0010  DS    0H\n         MVC   PRTCC(PRTL),PRTCC-1   CLEAR PRINT I/O AREA\n         CP    LINECT,COMMMAXL       PAGE OVERFLOW?\n         BNHR  R10                   NO\nHEAD0000 DS    0H\n         MVC   PRTCC(DEBUGHDL),DEBUGHD\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         PUT   DISDEBUG,PRTCC        WRITE NEW HEADING\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         MVC   PRTCC(PRTL),PRTCC-1   CLEAR PRINT I/O AREA\n         MVC   PRTDATA(L'COMMDBSH),COMMDBSH\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         PUT   DISDEBUG,PRTCC        WRITE SUB HEADING\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         MVC   PRTCC(PRTL),PRTCC-1   CLEAR PRINT I/O AREA\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         PUT   DISDEBUG,PRTCC        BLANK LINE\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         ZAP   LINECT,P1             RESET LINE COUNT\n         BR    R10                   RETURN\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\nAM24     DS    0H\n         LA    R14,0(R14)         CLEAR HIGH BIT(S)\n         BSM   R0,R14             RETURN IN 24-BIT MODE\nAM31     DS    0H\n         LA    R14,0(R14)         CLEAR HIGH BIT(S)\n         O     R14,X80            SET 31-BIT MODE\n         BSM   R0,R14             RETURN IN 31-BIT MODE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nSAVEDB   DC    18F'0'                REGISTER SAVE AREA\nX80      DC    A(X'80000000')\nDBUGFLAG DC    X'00'\n$DBUGOPN EQU   X'80'                 DCB IS OPEN\nWORKX    DC    XL4'00'\nP1       DC    P'1'\nLINECT   DC    PL3'0'\nXFFFF    DC    X'FFFFFFFF'\n         SPACE 2\n         DC    C' '\nPRTCC    DC    C' '\nPRTDATA  DC    CL132' '\nPRTL     EQU   *-PRTCC\n         SPACE 2\nDEBUGHD  DS    0C\n         DC    C'1               DISASSEMBLER DEBUG'\nDEBUGHDL EQU   *-DEBUGHD\nPRTR     DS    0C\n         DC    C'TRACE TABLE FIRST '\nPRTR1ST  DC    CL8' '\n         DC    C'   LAST '\nPRTRLAST DC    CL8' '\n         DC    C'   CURRENT '\nPRTRCURR DC    CL8' '\n         DC    C' '\nPRTRL    EQU   *-PRTR\nPRIO     DS    0C\n         DC    C' DISMOD I/O AREA ADDRESS '\nPRIOA    DC    CL8' '\n         DC    C' '\nPRIOL    EQU   *-PRIO\nPRESD    DS    0C\n         DC    C'ESD BLOCK '\nPRESDBA  DC    CL8' '\n         DC    C' '\nPRESDNXT DC    CL8' '\n         DC    C'  NAME '\nPRESDNM  DC    CL8' '\n         DC    C'  TYPE '\nPRESDTYP DC    CL2' '\n         DC    C'  ADDRESS '\nPRESDADR DC    CL7' '\n         DC    C'  SEGMENT '\nPRESDSEG DC    CL2' '\n         DC    C'  LENGTH '\nPRESDLEN DC    CL7' '\n         DC    C' '\nPRESDL   EQU   *-PRESD\nPRRLD    DS    0C\n         DC    C'RLD BLOCK '\nPRRLDBA  DC    CL8' '\n         DC    C' '\nPRRLDNXT DC    CL8' '\n         DC    C'  DISP '\nPRRLDDSP DC    CL8' '\n         DC    C'  TYPE '\nPRRLDTYP DC    CL2' '\n         DC    C'  LENGTH '\nPRRLDLEN DC    CL4' '\n         DC    C'  POINTER '\nPRRLDPTR DC    CL4' '\n         DC    C'  POSITION '\nPRRLDPP  DC    CL4' '\n         DC    C'  DIR '\nPRRLDDIR DC    C' '\n         DC    C'  ESD '\nPRRLDESD DC    CL8' '\n         DC    C' '\nPRRLDL   EQU   *-PRRLD\nPRUSNG   DS    0C\n         DC    C'USING '\nPRUSGBA  DC    CL8' '\n         DC    C' '\nPRUSGNXT DC    CL8' '\n         DC    C'  DSECT '\nPRUSGNME DC    CL8' '\n         DC    C'  LABEL '\nPRUSGLBL DC    CL8' '\n         DC    C'  BASE '\nPRUSGBSE DC    C' '\n         DC    C'  FLAGS '\nPRUSGFLG DC    CL2' '\n         DC    C'  DISP '\nPRUSGDSP DC    CL8' '\n         DC    C'  BEGN/END'\nPRUSGBGN DC    CL8' '\n         DC    C'-'\nPRUSGEND DC    CL8' '\n         DC    C' '\nPRUSNGL  EQU   *-PRUSNG\nPRDSCT   DS    0C\n         DC    C'DSECT '\nPRDSBA   DC    CL8' '\n         DC    C' '\nPRDSNXT  DS    CL8' '\n         DC    C'  DSECT NAME '\nPRDSNAME DC    CL8' '\n         DC    C'  1ST LABEL '\nPRDSLABL DC    CL8' '\n         DC    C' '\nPRDSCTL  EQU   *-PRDSCT\nPRBASE   DS    0C\n         DC    C'BASE '\nPRBSEBA  DS    CL8' '\n         DC    C' '\nPRBSENXT DC    CL8' '\n         DC    C'  REGISTER '\nPRBSEREG DC    C' '\n         DC    C'  INSTRUCTION RANGE '\nPRBSEBGN DC    CL9' '\nPRBSEEND DC    CL9' '\n         DC    C'  DISP REFERRED TO '\nPRBSEDSP DC    CL9' '\nPRBASEL  EQU   *-PRBASE\nPRDATA   DS    0C\n         DC    C'DATA '\nPRDTABA  DC    CL8' '\n         DC    C' '\nPRDTANXT DC    CL8' '\n         DC    C'  DISP '\nPRDTABGN DC    CL8' '\n         DC    C'-'\nPRDTAEND DC    CL8' '\n         DC    C'  LENGTH '\nPRDTALEN DC    CL8' '\n         DC    C'  TYPE '\nPRDTATYP DC    CL2' '\n         DC    C'  NAME '\nPRDTANME DC    CL8' '\n         DC    C'  LABEL '\nPRDTALBA DC    CL8' '\n         DC    C'+'\nPRDTALBD DC    CL8' '\n         DC    C' '\nPRDATAL  EQU   *-PRDATA\nPRREF    DS    0C\n         DC    C'REF '\nPRREFBA  DC    CL8' '\n         DC    C' '\nPRREFNXT DC    CL8' '\n         DC    C'  LABEL 1 '\nPRREFAD1 DC    CL8' '\n         DC    C'-'\nPRREFO1D DC    CL8' '\n         DC    C'  LABEL 2 '\nPRREFAD2 DC    CL8' '\n         DC    C'-'\nPRREFO2D DC    CL9' '\n         DC    C'  INSTRUCTION DISP '\nPRREFDSP DC    CL8' '\n         DC    C' '\nPRREFL   EQU   *-PRREF\nPRLABL   DS    0C\n         DC    C'LABEL '\nPRLBLBA  DC    CL8' '\n         DC    C' '\nPRLBLNXT DC    CL8' '\n         DC    C'  LABEL NAME '\nPRLBLNM  DC    CL8' '\n         DC    C'  TYPE '\nPRLBLTYP DC    C' '\n         DC    C'  DISP '\nPRLBLDSP DC    CL8' '\n         DC    C'  EQUATE '\nPRLBLEQU DC    CL8' '\n         DC    C' '\nPRLABLL  EQU   *-PRLABL\nPRDISP   DC    C'INSTRUCTION DISPLACEMENTS:'\nPRDISPL  EQU   *-PRDISP\nDISDEBUG DCB   DDNAME=DISDEBUG,      DEBUG DCB                         +\n               DSORG=PS,             .. SEQUENTIAL                     +\n               LRECL=133,            .. RECORD SIZE                    +\n               RECFM=FBA,            .. RECORD FORMAT                  +\n               MACRF=PM              .. PUT-MOVE MODE\n         LTORG\n         SPACE 2\n         COPY  DISASMDA\n*---------------------------------------------------------------------*\n*                                                                     *\n*              INTERFACE BLOCK                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nDBUGBLOK DBUGBLOK TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nDISASM00 DISASM00 TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY REGEQU\n         END  DISASMDB\n./ ADD NAME=DISASMDC\n1                      DISASSEMBLER\n0 Change history:\n    Dec  93    added \"B2\" instruction module\n    Dec  93    converted code to run in 31-bit mode as much as possible\n    Dec  93    corrected S0C4 abend when generating DC's with 31-bit flag\n    Dec  93    added \"no float\" option\n    Jan  94    added test for 8 byte literal strings\n    Jan  94    added register tests for \"even-odd\", floating point\n    Jan  94    added samples to JCL library\n    Oct  04    allow user specified DATA areas to overlap RLD items\n               change to DISASM07 to properly process SYSPRINT from\n                 the the assembler with either SYSPRINT LRECL=121 or\n                 SYSPRINT LRECL=133.\n               added the ability to pre-process DSECTs\n\n0 DISASM is a multi-pass disassembler.  Source assembler statements are\n  produced from a CSECT of a linkedited module.  The module may contain\n  multiple CSECT's, however DISASM disassembles one CSECT per execution.\n0 Control statements:\n- Comment statement (optional)\n0 Columns  1 -  1     * (asterisk)\n                      Comments may be specified at any time.  Comments\n                      will be copied to the output listing.\n- ASM START statement (optional)\n0 Columns  1 -  9     Literal 'ASM START'.\n                      Delimits the start of input for the assembler.\n                      Any statements specified are also copied to the\n                      end of the disassembled punched output.  This\n                      allows DSECTs to be assembled so the labels\n                      can be used for data references.  Any DSECT used\n                      in a USING statement must be defined by this\n                      method.  Use care when defining your DSECTs, the\n                      disassembler requires the PRINT option to be on\n                      to determine the DSECT and label names.  If a\n                      macro or copy statement turns the PRINT off, the\n                      DSECT and labels will not be available.\n- ASM END statement (optional)\n0 Columns  1 -  7     Literal 'ASM END'.\n                      Delimits the end of the assembler input.\n- BASE statement (optional)\n0 Columns  1 -  4     Literal 'BASE'.\n          10 - 12     Base register.  Register 1 may be specfied as 1 or\n                      R1, register 10 may be specified as 10 or R10.\n                      Registers 10 to 15 may be specified as A to F or\n                      RA to RF.\n          20 - 27     Starting displacement into the CSECT that the base\n                      register is in effect.  Displacements are given as\n                      hex values 1 to 8 digits long, leading zeros are\n                      not required (0A0 is equivalent to A0).\n          30 - 37     Optional.  Ending displacement into the CSECT that\n                      the base register is in effect.  If omitted, the\n                      ending displacement will be 4096 from the starting\n                      value (in columns 20-27).  Coding is the same as\n                      for the starting displacement.\n          40 - 47     Displacement the base register refers to.  For\n                      example if the base register is R12 and R12 is\n                      used as the base in instructions starting at\n                      +X'20', and R12 is set to point to +X'22C' into\n                      the CSECT, the BASE statement would be:\n0                     BASE     R12       20        22C\n0                     If a base register is defined, a LABEL (or PREFIX)\n                      statement is also required.\n- CSECT statement (optional)\n0 Columns  1 -  5     Literal 'CSECT'.\n          10 - 17     CSECT's name.  If the CSECT is not specified, the\n                      first CSECT in the module will be disassembled.\n- DATA statement (optional)\n0 Columns  1 -  4     Literal 'DATA'.\n          10 - 17     Starting displacement into the CSECT where the data\n                      begins.  DATA statements allow you to identify\n                      areas that do not contain instructions.  See the\n                      BASE statement for displacement coding syntax.\n          20 - 27     Displacement where the data ends.\n- LABEL statement (optional)\n0 Columns  1 -  5     Literal 'LABEL'.\n             or\n           1 -  6     Literal 'PREFIX'.\n          10 - 14     1 to 4 character label prefix.  Labels generated\n                      due to references within the CSECT will be\n                      PPPPNNNN where PPPP is the prefix specified here\n                      and NNNN is the displacement into the CSECT or\n                      a sequential number (0010, 0020, 0030, etc).\n                      If the prefix is less than 4 characters long, the\n                      numeric portion will be padded on the left with\n                      zeros (labels will always be 8 characters long).\n                      If the LABEL/PREFIX statement is used, base\n                      registers must also be defined.\n- LINE/LINES/MAXLINES statement (optional).\n0 Columns  1 -  4     Literal 'LINE'\n             or\n           1 -  5     Literal 'LINES'\n             or\n           1 -  9     Literal 'MAXLINES'\n          10 - 12     Maximum number of lines to print per page on the\n                      DISPRINT and DISDEBUG data sets.  Line values are\n                      2 to 3 digits, minimum is 10 lines.  Specify the\n                      value left justified, leading zeros may be omitted.\n                      Default line count is 60 lines per page.\n- MODULE statement (required)\n0 Columns  1 -  6     Literal 'MODULE'.\n          10 - 17     Load module's name.  This module must be in the\n                      library specified in the DISMOD DD.\n- NO FLOAT statement (optional)\n0 Columns  1 -  8     Literal 'NO FLOAT'.\n             or\n  Colums   1 - 7      Literal 'NOFLOAT'.\n                      Suppresses floating point opcodes from being\n                      considered as valid opcodes.  When you are certain\n                      the module being processed does not use floating\n                      point, suppressing the floating point opcodes\n                      stops the disassembler from interpreting some of\n                      the data areas as instructions.\n1 RLD WARN statement  (optional)\n                      When an RLD item overlaps a user specified DATA\n                      area, DISASM will adjust the user defined DATA\n                      areas.  By default no messages are issued.  If\n                      you want to see how the disassembler is adjusting\n                      the DATA areas, include a \"RLD WARN\" statement.\n0 SEQ LABEL statement (optional)\n0 Columns  1 -  9     Literal 'SEQ LABEL'.\n                      Labels generated for labels within the CSECT will\n                      be PPPPNNNN where PPPP is the prefix specified on\n                      in the LABEL or PREFIX statement and NNNN is either\n                      the displacement of the label into the CSECT or a\n                      sequential number.  By default NNNN will be the\n                      displacement in hex.  SEQ LABEL requests the labels\n                      be generated with sequential numbers.  This may be\n                      desirable if the source is to be modified... the\n                      labels may no longer be at the same displacement.\n- USING statement (optional)\n0 Columns  1 -  5     Literal 'USING'.\n          10 - 17     DSECT's name.  Any DSECTs referenced on USING\n                      statements must be defined via assembler input.\n          20 - 27     Label within the DSECT.  In some cases the base\n                      register may be set to point to a label within the\n                      DSECT rather than at displacement zero.  If the\n                      base points to displacement zero, leave this\n                      parameter blank.\n          30 - 32     Base register.  See BASE statement for base reg\n                      syntax.\n          40 - 47     If the register specified as the base is used as\n            and       the base in all cases where it appears in the\n          50 - 57     code, leave these parameters blank.  If the base\n                      is only used as a base for the specified DSECT at\n                      in a range of instructions, specify the beginning\n                      displacement in columns 40-47 and the ending\n                      displacement in columns 50-57.  The same base may\n                      be specified for the same DSECT multiple times with\n                      different ranges if necessary.\n1                 JCL REQUIREMENTS\n0      //....     EXEC PGM=DISASM,REGION=nnnnK                 REQ\n       //STEPLIB  DD DSN=xxxx,DISP=SHR                         OPT\n       //SYSPRINT DD DSN=&&PRT,DISP=(NEW,PASS),                OPT\n       //            UNIT=SYSDA,\n       //            SPACE=(TRK,(15,15)),\n       //            DCB=(RECFM=FBM,LRECL=121,BLKSIZE=12100)\n       //SYSIN    DD DSN=&&IN,DISP=(NEW,PASS),                 OPT\n       //            UNIT=SYSDA,\n       //            SPACE=(TRK,(15,15)),\n       //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n       //SYSLIB   DD DSN=xxxx,DISP=SHR                         OPT\n       //SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(1,1))              OPT\n       //SYSPUNCH DD DUMMY                                     OPT\n       //DISDEBUG DD SYSOUT=*                                  OPT\n       //DISPRINT DD SYSOUT=*                                  REQ\n       //DISPUNCH DD SYSOUT=class                              OPT\n       //DISDSECT DD DSN=dddd,DISP=SHR                         OPT\n       //DISMOD   DD DSN=xxxx,DISP=SHR                         REQ\n       //DISIN    DD *                                         REQ\n             .\n             control statements\n             .\n       /*\n       //\n0If DISASM is an a LINKLST library the STEPLIB is not required.\n If the assembler input (ASM START/ASM END) is used SYSPRINT, SYSIN,\n SYSLIB, SYSUT1, and SYSPUNCH are required, otherwise they may be\n omitted.\n If the DISPUNCH DD is present, the source will be generated as an\n 80-byte file suitable for input to the assembler.\n Any macros or copy statements specified as assembler input must be\n available in a library in the SYSLIB concatenation.\n1                 ABEND CODES and MESSAGES\n0 ABEND 001     User requested an ABEND via the ABEND statement.\n0 ABEND 002     Unknown return code from BLDL.\n0 ABEND 003     Unknown RLD with unknown type encountered.\n0 ABEND 004     Internal error, RLD data remaining went negative in\n                DISASM05.\n0 ABEND 005     Internal error, attempt to generate an instruction on\n                on an odd address boundary.\n0 DISASM0101I   No DISPUNCH DD present, no source will be generated\n                Informational only.  The DISPUNCH DD was not present\n                in the JCL, no source deck will be produced.\n0 DISASM0102I   ABEND requested, program abnormally terminating\n                For diagnositic purposes, an ABEND command was added\n                to cause an abend just prior to freeing the trace table\n                and terminating.  This message is issued immediately\n                before the abend, and indicates the abend was due to\n                the user's request and not due to a problem.\n                DISASM will also have abended with a user 001.\n0 DISASM0103I   ******* Disassembly complete *******\n                Indicates that the disassembly was successful.\n0 DISASM0104E   DISIN DD statement missing, processing will be aborted\n                DISASM requires the DISIN DD statement.  DISASM must\n                know at minimum which module it is to disassemble.  The\n                MODULE and all other control statements are provided to\n                DISASM via DISIN.\n0 DISASM0105E   DISMOD DD statement missing, processing will be aborted\n                DISASM loads the module to be disassembled from the\n                library specified by the DISMOD DD, this DD is therefore\n                required.\n0 DISASM0106E   Error(s) in control statements, execution aborted\n                Error(s) were detected in the control statements by\n                module DISASM02.  Messages are issued to identify the\n                statement(s) in error.  Correct the control statements\n                and re-run.\n0 DISASM0107E   Error(s) in loading object module, execution aborted\n                Error(s) were encountered by DISASM03 in loading the\n                specified module.  One of the following occurred:\n                   1) the BLDL for the member failed\n                   2) if the specified member was an alias, the\n                      BLDL for the real member failed.\n                   3) the POINT for the member (or real member) failed\n                   4) the requested CSECT was not in the specified\n                      module\n                Further messages will have been issued to identify the\n                the cause.\n0 DISASM0108E   Error(s) in printing text, execution aborted\n                Should never occur.  At present there are no errors\n                detected by the text print module, DISASM06.\n0 DISASM0109E   Error(s) in assembling DSECTs, execution aborted\n                Either the return code from the assembler was greater\n                than 4, or some other error in interpreting the DSECTs\n                occurred.  Messages will have been issued to identify\n                the cause.\n0 DISASM0110E   Error(s) in generating label table, execution aborted\n                An error condition was detected by DISASM08.  Messages\n                will have been issued to identify the cause.\n0 DISASM0111E   Error(s) in generating source, execution aborted\n                An error condition was detected by DISASM09.  Messages\n                will have been issued to identify the cause.\n0 DISASM0202W   Sequentially numbered labels have already been requested\n                The SEQ LABEL statement is specified more than once in\n                the control statements.\n0 DISASM0203E   Invalid control statement\n                Columns 1-9 of a control statement contain an unknown\n                statement type.  See the list of control statements\n                for valid control statements and their syntax.\n0 DISASM0204E   Extraneous data in register parameter\n                DISASM checks for several blanks following a register\n                specification on BASE and USING statements.  This check\n                helps to make sure you specified parameters in the\n                correct columns.  If the blanks are not present, this\n                message is issued and the program abort flag set.\n0 DISASM0205E   Invalid register reference\n                The register specified on a BASE or USING statement is\n                invalid.  Valid values are 0-15, A-F, R0-R15, and RA-RF.\n0 DISASM0206E   End displacement is required when begin displacement is given\n                On USING statements the beginning and ending displacement\n                values are optional.  If the beginning displacement is\n                given, the ending displacement is also required.\n0 DISASM0207E   Begin displacement is larger than end displacement\n                The beginning and ending displacement values specify\n                a range of instruction displacements.  The end value\n                must be larger than the begin value.\n0 DISASM0208E   Bad hex digit in displacement\n                An invalid character was found in a hex value.  Valid\n                digits are 0-9 and A-F.\n0 DISASM0209E   Too many digits in displacement\n                Displacement values must be 8 characters or less.\n0 DISASM0210E   End displacement not allowed unless start displacement\n                is specified\n                On USING statements the beginning and ending displacement\n                values are optional.  If the ending displacement is\n                given, the beginning displacement is also required.\n0 DISASM0211E   Label prefix cannot be blank\n                The prefix value on a PREFIX or LABEL statement has a\n                blank in the first byte.\n0 DISASM0212E   Label prefixes must be 4 characters or less\n                The value on a PREFIX or LABEL statement is more than\n                4 characters long.  Label prefixes must be 4 characters\n                or less.\n0 DISASM0213E   Base register is blank\n                The base register on a BASE or USING statement is blank.\n0 DISASM0214E   Base register name exceeds 3 characters in length\n                The base register on a BASE or USING statement is more\n                than 3 characters long.  Valid values are 0-15, A-F,\n                R0-R15, and RA-RF.\n0 DISASM0215E   'DATA' is reserved for data area prefixes, choose\n                another prefix\n0 DISASM0216E   Invalid digit in LINE/LINES/MAXLINES statement\n                The line count limit specified contains a non-numeric\n                digit.\n0 DISASM0217E   Line count value on a LINE/LINES/MAXLINES statement is\n                too long or contains extraneous data\n                The line count value is 1 to 3 digits.  Either the value\n                is more than 3 digits or there is other data in the\n                next 6 spaces.\n0 DISASM0218E   Line count value on a LINE/LINES/MAXLINES statement is\n                below minimum allowed\n                A minimum allowable line count value is specified in the\n                global options (member DISASMGB) when DISASM is genned.\n                The value you are requesting is below this minimum.\n0 DISASM0219E   Label prefix has already been defined, choose one or the\n                other\n                DISASM only allows 1 label prefix value.  The PREFIX or\n                LABEL statement has been found more than once.  Choose\n                one of the prefixes and delete the second statement.\n0 DISASM0220E   Label prefix must be defined when base register(s) are\n                defined\n                When a BASE is defined, labels will be generated for\n                any points referenced within the CSECT.  Labels require\n                a 1 to 4 character prefix specified by either the LABEL\n                or PREFIX statement.\n0 DISASM0221E   Label prefix not valid unless base register(s) are defined\n                Labels for the CSECT cannot be generated unless a BASE\n                is defined.\n0 DISASM0222E   This area overlaps data at xxxx to xxxx\n                An area being defined as a DATA area overlaps another\n                area that has already been defined at xxxx to xxxx.\n0 DISASM0223E   Beginning displacement is larger than ending displacement\n                The beginning displacement is larger than the ending\n                displacement on a BASE statement.\n0 DISASM0301E   Specified CSECT not found\n                The CSECT specified on the CSECT statement is not a\n                part of the specified MODULE or the module contains no\n                CSECTs.\n0 DISASM0302E   Unknown return code from POINT macro\n                DISASM received a return code from the POINT macro that\n                it could not interpret.\n0 DISASM0303E   DCB EODAD routine driven, end of control records not\n                detected\n                The EODAD routine of the DISMOD DCB should never be\n                driven.  The last record of the requested CSECT should\n                be detected.  This is an internal logic error.\n0 DISASM0304E   Module does not exist in DISMOD library\n                The member specified on the MODULE statement was not\n                found in the DISMOD library.\n0 DISASM0305E   Permanent I/O error\n                BLDL received return code 08 with reason code 01.\n0 DISASM0306E   Insufficient virtual storage\n                BLDL received return code 08 with reason code 04.\n0 DISASM0307E   DEB not in KEY 0-7\n                BLDL received return code 08 with reason code 08.\n0 DISASM0308E   Device does not support block identifier\n                POINT received return code 04 with reason code 00.\n0 DISASM0309E   Incorrect parameter\n                POINT received return code 08 with reason code 01.\n0 DISASM0310E   Incorrect DEB or DEBCHK error\n                POINT received return code 08 with reason code 02.\n0 DISASM0311E   Environmental error\n                POINT received return code 08 with reason code 03.\n0 DISASM0312E   Unsuccessful call to ESTAE\n                POINT received return code 08 with reason code 0B.\n0 DISASM0313E   Unsuccessful GETMAIN\n                POINT received return code 08 with reason code 0C.\n0 DISASM0314E   Input/output error\n                POINT received return code 0C with reason code 00.\n0 DISASM0501E   Unknown RLD data type\n                RLD data contains an item that is of an unknown type.\n                DISASM will have abended with code user 003.\n0 DISASM0502E   RLD data remaining went negative\n                Internal logic error in module DISASM05.\n                DISASM will have abended with code user 004.\n0 DISASM0503E   RLD pointer larger than number of ESD items\n                Some RLD items have corresponding ESD items.  When\n                the pointer value is non-zero, it is the relative number\n                of the ESD item it is associated with.  In this case the\n                pointer value is larger than the number of ESD items.\n0 DISASM0701I   Assembler return code was xxxx\n                If the return code is greater than 4, DISASM will abort\n                processing.  If you need to view the assembler output,\n                allocate the DISDEBUG DD.\n0 DISASM0702I   No assembler input\n0 DISASM0703E   Error assembling DSECTs, check assembler output in DISDEBUG\n                The return code from the assembler was greater than 4.\n0 DISASM0801E   DSECT xxxxxxxx is not present, but is referenced on a\n                USING statement.\n                Either 1) the source for the DSECT was not provided\n                       2) the PRINT of the assembler was turned off\n                       3) the name is misspelled\n                If you are sure the name is correct and the source is\n                present, allocate DISDEBUG and check the assembler output.\n0 DISASM0802E   Instructions overlap data defined at xxxx to xxxx\n                Instruction lengths are determined by the opcodes.  If\n                a portion of an instruction overlaps into a DATA area,\n                this is considered an error condition.  Either increase\n                the size of the DATA area to include the entire instruc-\n                tion, or decrease the size of the DATA area so it does\n                not overlap the end of the instruction.\n0 DISASM0803W   aaaaaaaa displacement in a bbbbbbbb block is changed\n                from xxxx to yyyy to reference an instruction boundary\n                   aaaaaaaa is either BEGINNING or ENDING\n                   bbbbbbbb is either BASE or USING\n                The beginning and ending displacements on BASE and USING\n                statements must reference instruction boundaries.  This\n                is because the USING or DROP statements generated cannot\n                occur in the middle of an instruction.  If a displacement\n                is found that is not on instruction boundary, it is forced\n                to the beginning of the preceding instruction.\n0 DISASM0804E   Invalid opcode during reference table generation\n                Internal logic error in DISASM08.\n0 DISASM0805E   Label llllllll is not in DSECT dddddddd as requested on\n                a USING statement\n                If you are sure the label is in the DSECT, allocate\n                DISDEBUG to verify the assembler output.\n0 DISASM0806E   Label not found in DSECT during reference table generation\n                Internal logic error in DISASM08.\n0 DISASM0808E   Overlapping data areas not detected by DISASM02\n                Interal logic error.\n0 DISASM0809E   Attempt to locate an instruction on an odd displacement\n                boundary\n                Internal error in DISASM08, DISASM will abend with code\n                user 005.\n0 DISASM0901E   Data area overlaps an instruction, should have been\n                detected by DISASM08.\n                Internal logic error.  See explanation of DISASM0802E.\n0DISASM0902E    Invalid opcode detected\n                Internal error.\n0DISASM0903E    DC with length = zero detected\n                Internal error.\n0DISASM0904E    Attempt to generate an instruction on an odd address\n                boundary\n                Internal error.\n1                 Program description\n This disassembler attempts to re-create assembler source from object\n code.  Label references are generated if the base registers for the\n CSECT or DSECTs are defined.\n0CSECT labels will be generated for data referenced within the CSECT\n if BASE statements define the base register(s).  References to\n instructions will cause labels to be generated that occur at the\n displacement of the first byte of the instruction.  If the reference\n is not on the first byte of the instruction, the label will be referred\n to with a \"+displacement\".  For example if a program is self-modifying\n and sets the length in a MVC instruction with a STC that references the\n MVC instruction, the generated source might look like:\n0            .\n             STC   R1,MAIN002C+1\n             .\n             .\n    MAIN002C MVC  DATAOUT(1),0(R2)\n             .\n0Labels will also be generated for any ENTRY points defined in the ESD\n data for the CSECT.\n0DSECT labels require the DSECT's source to be assembled, and the base\n defined via a USING statement.  The assembler is dynamically\n invoked to assemble the DSECT(s).  The assembler output listing\n is scanned to determine the DSECT names, label names, and the displace-\n ment to the label in the DSECT.  In order for the disassembler to\n detect DSECTs and the labels, the assembler print must be on.  If any\n macro or copy code turns off the print, the DSECTs and labels will\n be unknown.  Any DSECT referred to by a USING statement must be defined\n by having the assembler assemble it.  DSECT source can be pre-processed\n by DISASMU1 or assembled at disassembly time.  DSECTs defined via\n ASM START/ASM END over-ride the same DSECT in the DISDSECT DD.\n0Assembler source statements are delimited by ASM START/ASM END.  Any\n statements between the ASM START and ASM END statements will be copied\n to the assembler input data set and appended onto the end of the source\n written to DISPUNCH.  Any macros not in the assembler input stream must\n be available in a library in the SYSLIB concatenation.  If the return\n code from the assembler is greater than 4, the disassembler discontinues\n any further processing.  If there is no assembler input, the SYSPRINT,\n SYSIN, SYSUT1, SYSPUNCH, and SYSLIB DD's may be omitted.\n0If the DISPUNCH DD is present, the generated code will also be\n written to this data set as 80-byte records suitable as input to the\n assembler.\n0Object code is considered to be an instruction if:\n    1) it is not in a defined data area\n    2) it is on an even address boundary\n    3) it is a valid opcode\n    4) it does not overlap into a defined data area or RLD item.\n    5) it is followed by another valid opcode or is an unconditional\n       branch or SVC.\n    6) a string of upper or lower case EBCDIC is not considered a valid\n       instruction.\n    7) if \"NO FLOAT\" was requested, the instruction cannot be a floating\n       point instruction.\n0THE VALID OPCODES INCLUDE XA, BUT NOT ESA (AR) INSTRUCTIONS.\n0Extended mnemonics are used if possible for branch instructions.\n0SVC's are interpreted if possible (SVC 0A is identified as GETMAIN).\n0The DISDEBUG DD statement is optional.  If present, many internal\n fields and data chains will be printed to aid in debugging problems\n with the disassembler.  The assembler output is copied to DISDEBUG\n for diagnosing errors with the assembler input.\n\n\n\nPre-processing DSECTs\nThe disassembler can generate labels for data referenced in DSECTs.\nrequires the DSECT's source to be assembled.  The disassembler then\nreads the assembler output (SYSPRINT) to learn the label names and\ntheir displacements.  DSECTs can be pre-processed or assembled during\na disassembly.  Pre-processing can save time.\n\nTo pre-process DSECTs, allocate a PDS with RECFM VB with LRECL=.\nUse a block size (BLKSIZE) that is efficient for your DASD.\nAssemble any DSECTs you want to pre-process and input the SYSPRINT\nto DISASMU1.  You can use member DISASMU1 as sample JCL to run\nthe assembler and DISASMU1 in one JOB.\n\nDISASMU1 will create one member per DSECT in the DISDSECT library.\nSome IBM provided MACROs actually generate multiple DSECTs.\nMembers in the DISDSECT library are cumulative.  Data for a given\nmember is not cumulative.  That is if you pre-process DSECTA in\none run and DSECTB in a second, the data for DSECTA will still\nbe in the the library.  If you pre-process DSECTA in a run, make\nchanges to the DSECT and re-process DSECTA, the info for DSECTA\nin the second run competely replaces the data from the first run.\n\nYou can pre-process IBM DSECTs, your own DSECTs, or those of a\n3rd party.. as long as you don't have duplicated DSECT names.\n\nThe DISDSECT DD can be a concatenation.  You may want to pre-process\nIBM DSECTs into an \"IBM\" only library, 3rd party DSECTs into a\nlibrary per vendor, and your own into a company library and then\nconcatenate the libraries that you need for the program you are\ndisassembling at a given time.\n\nThe disassembler only reads the members that are referenced on\nUSING statements.  It does not load in the entire contents of\nall pre-processed DSECTs.\n\nIf all the DSECTs referenced on USING statements are pre-processed\nby DISASMU1 and in the DISDSECT library(s) at disassembly time\nno ASM START/ASM END source is required for the dissembly and\nthe assembler will not need to be invoked.\n\nSomething that I have found is the DSECT names are not always\nwhat I expected.  For example IEZWPL generates the mapping for\na \"WTO   MF=L\".  Label WPLTXT is in DSECT WPLRF not WPL.  You\nmay want to re-name members in the pre-processed DSECT library\nor add ALIASes (like WPL as an alias to WPLRF).  Remember when\nthe disassembler looks for a pre-processed DSECT in the DISDSECT\nlibrary, it expects the member name to be the same as the DSECT\nname.  For the WPL example, you would need a USING statment that\nreads   \"USING     WPLRF     WPLTXT    Rx\".\n./ ADD NAME=DISASMOP\n          TITLE 'DISASMOP - OPCODE TABLE'\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISASMOP                                             *\n*                                                                    *\n*  Function:                                                         *\n*     Define valid machine opcodes.                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\n         COPY   DISASMGB\nDISASMOP CSECT\nDISASMOP AMODE  31\nDISASMOP RMODE  24\n         ORG    DISASMOP+(256*4)\n* ------------------------------------------------------------------- *\n*        OPCODE TABLE                                                 *\n* ------------------------------------------------------------------- *\n         OPCODE 00,DC,0,2                 DUMMY ENTRY FOR DC'S\n         OPCODE 04,SPM,$OPRR2,2\n         OPCODE 05,BALR,$OPRR1,2,'PERFORM'\n         OPCODE 06,BCTR,$OPRR1,2,'LOOP'\n         OPCODE 07,BCR,$OPRR3,2,FLAGS=$OPEXT\n         OPCODE 0A,SVC,$OPRR2,2,'SVC DESCRIPTION',FLAGS=$OPSVC\n         OPCODE 0B,BSM,$OPRR1,2\n         OPCODE 0C,BASSM,$OPRR1,2\n         OPCODE 0D,BASR,$OPRR1,2\n         OPCODE 0E,MVCL,$OPRR1,2,FLAGS=$OPCCA,REGS=$OP1EVEN+$OP2EVEN\n         OPCODE 0F,CLCL,$OPRR1,2,FLAGS=$OPCCA,REGS=$OP1EVEN+$OP2EVEN\n         OPCODE 10,LPR,$OPRR1,2,FLAGS=$OPCCA\n         OPCODE 11,LNR,$OPRR1,2,FLAGS=$OPCCA\n         OPCODE 12,LTR,$OPRR1,2,FLAGS=$OPCCA\n         OPCODE 13,LCR,$OPRR1,2,FLAGS=$OPCCA\n         OPCODE 14,NR,$OPRR1,2,FLAGS=$OPCCL\n         OPCODE 15,CLR,$OPRR1,2,FLAGS=$OPCCC\n         OPCODE 16,OR,$OPRR1,2,FLAGS=$OPCCL\n         OPCODE 17,XR,$OPRR1,2,FLAGS=$OPCCL\n         OPCODE 18,LR,$OPRR1,2\n         OPCODE 19,CR,$OPRR1,2,FLAGS=$OPCCC\n         OPCODE 1A,AR,$OPRR1,2,FLAGS=$OPCCA\n         OPCODE 1B,SR,$OPRR1,2,FLAGS=$OPCCA\n         OPCODE 1C,MR,$OPRR1,2,REGS=$OP1EVEN\n         OPCODE 1D,DR,$OPRR1,2,REGS=$OP1EVEN\n         OPCODE 1E,ALR,$OPRR1,2,FLAGS=$OPCCA\n         OPCODE 1F,SLR,$OPRR1,2,FLAGS=$OPCCA\n         OPCODE 20,LPDR,$OPRR1,2,FLAGS=$OPCCA+$OPFLOAT,                +\n               REGS=$OP10246+$OP20246\n         OPCODE 21,LNDR,$OPRR1,2,FLAGS=$OPCCA+$OPFLOAT,                +\n               REGS=$OP10246+$OP20246\n         OPCODE 22,LTDR,$OPRR1,2,FLAGS=$OPCCA+$OPFLOAT,                +\n               REGS=$OP10246+$OP20246\n         OPCODE 23,LCDR,$OPRR1,2,FLAGS=$OPCCA+$OPFLOAT,                +\n               REGS=$OP10246+$OP20246\n         OPCODE 24,HDR,$OPRR1,2,FLAGS=$OPFLOAT,                        +\n               REGS=$OP10246+$OP20246\n         OPCODE 25,LRDR,$OPRR1,2,FLAGS=$OPFLOAT,                       +\n               REGS=$OP10246+$OP204\n         OPCODE 26,MXR,$OPRR1,2,FLAGS=$OPFLOAT,                        +\n               REGS=$OP104+$OP204\n         OPCODE 27,MXDR,$OPRR1,2,FLAGS=$OPFLOAT,                       +\n               REGS=$OP10246+$OP20246\n         OPCODE 28,LDR,$OPRR1,2,FLAGS=$OPFLOAT,                        +\n               REGS=$OP10246+$OP20246\n         OPCODE 29,CDR,$OPRR1,2,FLAGS=$OPCCC+$OPFLOAT,                 +\n               REGS=$OP10246+$OP20246\n         OPCODE 2A,ADR,$OPRR1,2,FLAGS=$OPCCA+$OPFLOAT,                 +\n               REGS=$OP10246+$OP20246\n         OPCODE 2B,SDR,$OPRR1,2,FLAGS=$OPCCA+$OPFLOAT,                 +\n               REGS=$OP10246+$OP20246\n         OPCODE 2C,MDR,$OPRR1,2,FLAGS=$OPFLOAT,                        +\n               REGS=$OP10246+$OP20246\n         OPCODE 2D,DDR,$OPRR1,2,FLAGS=$OPFLOAT,                        +\n               REGS=$OP10246+$OP20246\n         OPCODE 2E,AWR,$OPRR1,2,FLAGS=$OPCCA+$OPFLOAT,                 +\n               REGS=$OP10246+$OP20246\n         OPCODE 2F,SWR,$OPRR1,2,FLAGS=$OPCCA+$OPFLOAT,                 +\n               REGS=$OP10246+$OP20246\n         OPCODE 30,LPER,$OPRR1,2,FLAGS=$OPCCA+$OPFLOAT,                +\n               REGS=$OP10246+$OP20246\n         OPCODE 31,LNER,$OPRR1,2,FLAGS=$OPCCA+$OPFLOAT,                +\n               REGS=$OP10246+$OP20246\n         OPCODE 32,LTER,$OPRR1,2,FLAGS=$OPCCA+$OPFLOAT,                +\n               REGS=$OP10246+$OP20246\n         OPCODE 33,LCER,$OPRR1,2,FLAGS=$OPCCA+$OPFLOAT,                +\n               REGS=$OP10246+$OP20246\n         OPCODE 34,HER,$OPRR1,2,FLAGS=$OPFLOAT,                        +\n               REGS=$OP10246+$OP20246\n         OPCODE 35,LRER,$OPRR1,2,FLAGS=$OPFLOAT,                       +\n               REGS=$OP10246+$OP20246\n         OPCODE 36,AXR,$OPRR1,2,FLAGS=$OPCCA+$OPFLOAT,                 +\n               REGS=$OP104+$OP204\n         OPCODE 37,SXR,$OPRR1,2,FLAGS=$OPCCA+$OPFLOAT,                 +\n               REGS=$OP104+$OP204\n         OPCODE 38,LER,$OPRR1,2,FLAGS=$OPFLOAT,                        +\n               REGS=$OP10246+$OP20246\n         OPCODE 39,CER,$OPRR1,2,FLAGS=$OPCCA+$OPFLOAT,                 +\n               REGS=$OP10246+$OP20246\n         OPCODE 3A,AER,$OPRR1,2,FLAGS=$OPCCA+$OPFLOAT,                 +\n               REGS=$OP10246+$OP20246\n         OPCODE 3B,SER,$OPRR1,2,FLAGS=$OPCCA+$OPFLOAT,                 +\n               REGS=$OP10246+$OP20246\n         OPCODE 3C,MER,$OPRR1,2,FLAGS=$OPFLOAT,                        +\n               REGS=$OP10246+$OP20246\n         OPCODE 3D,DER,$OPRR1,2,FLAGS=$OPFLOAT,                        +\n               REGS=$OP10246+$OP20246\n         OPCODE 3E,AUR,$OPRR1,2,FLAGS=$OPCCA+$OPFLOAT,                 +\n               REGS=$OP10246+$OP20246\n         OPCODE 3F,SUR,$OPRR1,2,FLAGS=$OPCCA+$OPFLOAT,                 +\n               REGS=$OP10246+$OP20246\n         OPCODE 40,STH,$OPRX,4,FLAGS=$OPREF\n         OPCODE 41,LA,$OPRX,4,FLAGS=$OPREF\n         OPCODE 42,STC,$OPRX,4,FLAGS=$OPREF\n         OPCODE 43,IC,$OPRX,4,FLAGS=$OPREF\n         OPCODE 44,EX,$OPRX,4,FLAGS=$OPREF\n         OPCODE 45,BAL,$OPRX,4,'PERFORM',FLAGS=$OPREF\n         OPCODE 46,BCT,$OPRX,4,'LOOP',FLAGS=$OPREF\n         OPCODE 47,BC,$OPRX,4,FLAGS=$OPEXT+$OPREF\n         OPCODE 48,LH,$OPRX,4,FLAGS=$OPREF\n         OPCODE 49,CH,$OPRX,4,FLAGS=$OPREF+$OPCCC\n         OPCODE 4A,AH,$OPRX,4,FLAGS=$OPREF+$OPCCA\n         OPCODE 4B,SH,$OPRX,4,FLAGS=$OPREF+$OPCCA\n         OPCODE 4C,MH,$OPRX,4,FLAGS=$OPREF\n         OPCODE 4D,BAS,$OPRX,4,FLAGS=$OPREF\n         OPCODE 4E,CVD,$OPRX,4,FLAGS=$OPREF\n         OPCODE 4F,CVB,$OPRX,4,FLAGS=$OPREF\n         OPCODE 50,ST,$OPRX,4,FLAGS=$OPREF\n         OPCODE 54,N,$OPRX,4,FLAGS=$OPREF+$OPCCL\n         OPCODE 55,CL,$OPRX,4,FLAGS=$OPREF+$OPCCC\n         OPCODE 56,O,$OPRX,4,FLAGS=$OPREF+$OPCCL\n         OPCODE 57,X,$OPRX,4,FLAGS=$OPREF+$OPCCL\n         OPCODE 58,L,$OPRX,4,FLAGS=$OPREF\n         OPCODE 59,C,$OPRX,4,FLAGS=$OPREF+$OPCCC\n         OPCODE 5A,A,$OPRX,4,FLAGS=$OPREF+$OPCCA\n         OPCODE 5B,S,$OPRX,4,FLAGS=$OPREF+$OPCCA\n         OPCODE 5C,M,$OPRX,4,FLAGS=$OPREF\n         OPCODE 5D,D,$OPRX,4,FLAGS=$OPREF,                             +\n               REGS=$OP1EVEN\n         OPCODE 5E,AL,$OPRX,4,FLAGS=$OPREF+$OPCCA\n         OPCODE 5F,SL,$OPRX,4,FLAGS=$OPREF+$OPCCA\n         OPCODE 60,STD,$OPRX,4,FLAGS=$OPREF+$OPFLOAT,                  +\n               REGS=$OP10246\n         OPCODE 67,MXD,$OPRX,4,FLAGS=$OPREF+$OPFLOAT,                  +\n               REGS=$OP104\n         OPCODE 68,LD,$OPRX,4,FLAGS=$OPREF+$OPFLOAT,                   +\n               REGS=$OP10246\n         OPCODE 69,CD,$OPRX,4,FLAGS=$OPREF+$OPCCC+$OPFLOAT,            +\n               REGS=$OP10246\n         OPCODE 6A,AD,$OPRX,4,FLAGS=$OPREF+$OPCCA+$OPFLOAT,            +\n               REGS=$OP10246\n         OPCODE 6B,SD,$OPRX,4,FLAGS=$OPREF+$OPCCA+$OPFLOAT,            +\n               REGS=$OP10246\n         OPCODE 6C,MD,$OPRX,4,FLAGS=$OPREF+$OPFLOAT,                   +\n               REGS=$OP10246\n         OPCODE 6D,DD,$OPRX,4,FLAGS=$OPREF+$OPFLOAT,                   +\n               REGS=$OP10246\n         OPCODE 6E,AW,$OPRX,4,FLAGS=$OPREF+$OPFLOAT,                   +\n               REGS=$OP10246\n         OPCODE 6F,SW,$OPRX,4,FLAGS=$OPREF+$OPCCA+$OPFLOAT,            +\n               REGS=$OP10246\n         OPCODE 70,STE,$OPRX,4,FLAGS=$OPREF+$OPFLOAT,                  +\n               REGS=$OP10246\n         OPCODE 78,LE,$OPRX,4,FLAGS=$OPREF+$OPFLOAT,                   +\n               REGS=$OP10246\n         OPCODE 79,CE,$OPRX,4,FLAGS=$OPREF+$OPCCC+$OPFLOAT,            +\n               REGS=$OP10246\n         OPCODE 7A,AE,$OPRX,4,FLAGS=$OPREF+$OPCCA+$OPFLOAT,            +\n               REGS=$OP10246\n         OPCODE 7B,SE,$OPRX,4,FLAGS=$OPREF+$OPCCA+$OPFLOAT,            +\n               REGS=$OP10246\n         OPCODE 7C,ME,$OPRX,4,FLAGS=$OPREF+$OPFLOAT,                   +\n               REGS=$OP10246\n         OPCODE 7D,DE,$OPRX,4,FLAGS=$OPREF+$OPFLOAT,                   +\n               REGS=$OP10246\n         OPCODE 7E,AU,$OPRX,4,FLAGS=$OPREF+$OPCCA+$OPFLOAT,            +\n               REGS=$OP10246\n         OPCODE 7F,SU,$OPRX,4,FLAGS=$OPREF+$OPCCA+$OPFLOAT,            +\n               REGS=$OP10246\n         OPCODE 80,SSM,$OPS,4,FLAGS=$OPREF\n         OPCODE 82,LPSW,$OPS,4,FLAGS=$OPREF\n         OPCODE 83,DIAG,$OPS,4\n         OPCODE 86,BXH,$OPRS2,4,FLAGS=$OPREF\n         OPCODE 87,BXLE,$OPRS2,4,FLAGS=$OPREF\n         OPCODE 88,SRL,$OPRS1,4\n         OPCODE 89,SLL,$OPRS1,4\n         OPCODE 8A,SRA,$OPRS1,4,FLAGS=$OPCCA\n         OPCODE 8B,SLA,$OPRS1,4,FLAGS=$OPCCA\n         OPCODE 8C,SRDL,$OPRS1,4,                                      +\n               REGS=$OP1EVEN\n         OPCODE 8D,SLDL,$OPRS1,4,                                      +\n               REGS=$OP1EVEN\n         OPCODE 8E,SRDA,$OPRS1,4,FLAGS=$OPCCA,                         +\n               REGS=$OP1EVEN\n         OPCODE 8F,SLDA,$OPRS1,4,FLAGS=$OPCCA,                         +\n               REGS=$OP1EVEN\n         OPCODE 90,STM,$OPRS2,4,FLAGS=$OPREF\n         OPCODE 91,TM,$OPSI,4,FLAGS=$OPREF+$OPCCL\n         OPCODE 92,MVI,$OPSI,4,FLAGS=$OPREF\n         OPCODE 93,TS,$OPS,4,FLAGS=$OPREF+$OPCCA\n         OPCODE 94,NI,$OPSI,4,FLAGS=$OPREF+$OPCCL\n         OPCODE 95,CLI,$OPSI,4,FLAGS=$OPREF+$OPCCC\n         OPCODE 96,OI,$OPSI,4,FLAGS=$OPREF+$OPCCL\n         OPCODE 97,XI,$OPSI,4,FLAGS=$OPREF+$OPCCL\n         OPCODE 98,LM,$OPRS2,4,FLAGS=$OPREF\n         OPCODE 99,TRACE,$OPRS2,4,FLAGS=$OPREF\n         OPCODE AC,STNSM,$OPSI,4,FLAGS=$OPREF\n         OPCODE AD,STOSM,$OPSI,4,FLAGS=$OPREF\n         OPCODE AE,SIGP,$OPRS2,4,FLAGS=$OPCCA\n         OPCODE AF,MC,$OPSI,4\n         OPCODE B1,LRA,$OPRX,4,FLAGS=$OPREF+$OPCCA\n*        OPCODE B2,DUMMY,$OPB2,4\n         OPCODE B6,STCTL,$OPRS2,4,FLAGS=$OPREF\n         OPCODE B7,LCTL,$OPRS2,4,FLAGS=$OPREF\n         OPCODE BA,CS,$OPRS2,4,FLAGS=$OPREF+$OPCCC\n         OPCODE BB,CDS,$OPRS2,4,FLAGS=$OPREF+$OPCCC,                   +\n               REGS=$OP1EVEN\n         OPCODE BD,CLM,$OPRS3,4,FLAGS=$OPREF+$OPCCC\n         OPCODE BE,STCM,$OPRS3,4,FLAGS=$OPREF\n         OPCODE BF,ICM,$OPRS3,4,FLAGS=$OPREF+$OPCCA\n         OPCODE D1,MVN,$OPSS1,6,FLAGS=$OPREF\n         OPCODE D2,MVC,$OPSS1,6,FLAGS=$OPREF\n         OPCODE D3,MVZ,$OPSS1,6,FLAGS=$OPREF\n         OPCODE D4,NC,$OPSS1,6,FLAGS=$OPREF+$OPCCL\n         OPCODE D5,CLC,$OPSS1,6,FLAGS=$OPREF+$OPCCC\n         OPCODE D6,OC,$OPSS1,6,FLAGS=$OPREF+$OPCCL\n         OPCODE D7,XC,$OPSS1,6,FLAGS=$OPREF+$OPCCL\n         OPCODE D9,MVCK,$OPSS3,6,FLAGS=$OPCCA\n         OPCODE DA,MVCP,$OPSS3,6,FLAGS=$OPCCA\n         OPCODE DB,MVCS,$OPSS3,6,FLAGS=$OPCCA\n         OPCODE DC,TR,$OPSS1,6,FLAGS=$OPREF\n         OPCODE DD,TRT,$OPSS1,6,FLAGS=$OPREF+$OPCCA\n         OPCODE DE,ED,$OPSS1,6,FLAGS=$OPREF+$OPCCA\n         OPCODE DF,EDMK,$OPSS1,6,FLAGS=$OPREF+$OPCCA\n         OPCODE E8,MVCIN,$OPSS1,6,FLAGS=$OPREF\n         OPCODE F0,SRP,$OPSS4,6,FLAGS=$OPREF+$OPCCA\n         OPCODE F1,MVO,$OPSS2,6,FLAGS=$OPREF\n         OPCODE F2,PACK,$OPSS2,6,FLAGS=$OPREF\n         OPCODE F3,UNPK,$OPSS2,6,FLAGS=$OPREF\n         OPCODE F8,ZAP,$OPSS2,6,FLAGS=$OPREF+$OPCCA\n         OPCODE F9,CP,$OPSS2,6,FLAGS=$OPREF+$OPCCC\n         OPCODE FA,AP,$OPSS2,6,FLAGS=$OPREF+$OPCCA\n         OPCODE FB,SP,$OPSS2,6,FLAGS=$OPREF+$OPCCA\n         OPCODE FC,MP,$OPSS2,6,FLAGS=$OPREF\n         OPCODE FD,DP,$OPSS2,6,FLAGS=$OPREF\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        INDEX TO OPCODE TABLE                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ORG    DISASMOP+0\nOPINDEX  DS     0A\n         OPCODE TYPE=INDEX\n         COPY   DISASMDA\n         END    DISASMOP\n./ ADD NAME=DISASMPR\n         TITLE 'DISASMPR PRINTER MODULE'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: DISASMPR - Printing module                            *\n*                                                                     *\n*  Function:                                                          *\n*   DISASM was written in multiple CSECTs to keep any one module from *\n*   being excessively large and avoid some base register concerns due *\n*   to size, and to functionally divide up the over-all logic.  Since *\n*   printing was to be necessary from many modules, it seemed best to *\n*   have a separate print module.  All printing except DISDEBUG is    *\n*   done here.                                                        *\n*                                                                     *\n*   The interface block is PRTBLOK.                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  DISASMGB\nDISASMPR CSECT\nDISASMPR AMODE 31\nDISASMPR RMODE 24\n         USING DISASMPR,R12\n         USING DISASM00,R11\n         USING PRTBLOK,R10           DEFINE PARAMETER BLOCK BASE\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               SET BASE REG\n         B     PRT0000               SKIP EYECATCHER\n         DC    CL8'DISASMPR'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nPRT0000  DS    0H\n         LA    R15,PRTSAVE           OUR SAVE AREA ADDRESS\n         ST    R13,4(R15)            CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R15,8(R13)            CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R15               SET SAVE AREA ADDRESS\n         LR    R10,R1                COPY PARM BLOCK ADDRESS\n         ITRACE ID=ENTRY,            TRACE PRINT MODULE ENTRY          +\n               DATA1=PRTCMD          .. TRACE COMMAND\n         CLI   PRTCMD,$PRTCLS        CLOSE FILES?\n         BE    PRT0300               YES\n         TM    PRTFLAG,$PRTOPEN      IS PRINT FILE OPEN?\n         BO    PRT0010               YES\n         ITRACE ID=PRTOPEN           TRACE PRINT DCB OPENING\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         OPEN  (DISPRINT,OUTPUT)     OPEN DISPRINT\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         OI    PRTFLAG,$PRTOPEN      SET 'OPEN' FLAG\nPRT0010  DS    0H\n         CLI   PRTCMD,$PRTHEAD       PRINT HEADING?\n         BE    PRT0100               YES\n         CLI   PRTCMD,$PRTSUBH       PRINT SUB-HEADING?\n         BE    PRT0110               YES\n         CLI   PRTCMD,$PRTPRT        PRINT DATA?\n         BE    PRT0020               YES\n         ABEND 1,DUMP,,USER          ABEND\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0020  DS    0H\n         ZAP   LINEWORK,P1           SET WORK TO 1\n         CLI   PRTCC,C' '            SINGLE SPACE?\n         BE    PRT0030               YES\n         AP    LINEWORK,P1           ADD 1 TO WORK\n         CLI   PRTCC,C'0'            DOUBLE SPACE\n         BE    PRT0030               YES\n         AP    LINEWORK,P1           ADD 1 TO WORK\nPRT0030  DS    0H\n         AP    LINEWORK,LINECT       NEW LINE COUNT\n         CP    LINEWORK,COMMMAXL     WILL PAGE OVERFLOW?\n         BNH   PRT0040               NO\n         ITRACE ID=PAGEFULL          PAGE IS FULL\n         BAL   R9,PRT0200            PRINT HEADING\nPRT0040  DS    0H\n         ITRACE ID=PRINT             PRINTING DATA\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         PUT   DISPRINT,PRTCC        PRINT\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         AP    LINECT,P1             ADD 1 TO LINE COUNT\n         CLI   PRTCC,C' '            SINGLE SPACE?\n         BE    PRT0050               YES\n         AP    LINECT,P1             ADD 1 TO LINE COUNT\n         CLI   PRTCC,C'0'            DOUBLE SPACE\n         BE    PRT0050               YES\n         AP    LINECT,P1             ADD 1 TO LINE COUNT\nPRT0050  DS    0H\n         MVI   PRTDATA,C' '          INTIALIZE PRINT\n         MVC   PRTDATA+1(L'PRTDATA-1),PRTDATA\n         B     PRT9900               EXIT\n* ------------------------------------------------------------------- *\n*             FORCED HEADINGS                                         *\n* ------------------------------------------------------------------- *\nPRT0100  DS    0H\n         ITRACE ID=FORCEDHD          FORCED HEADING\n         BAL   R9,PRT0200            PRINT HEADING\n         B     PRT9900               AND EXIT\n* ------------------------------------------------------------------- *\n*             FORCED SUB-HEADINGS                                     *\n* ------------------------------------------------------------------- *\nPRT0110  DS    0H\n         ITRACE ID=FORCESHD          FORCED SUB-HEADING\n         BAL   R9,PRT0210            PRINT HEADING\n         B     PRT9900               AND EXIT\n* ------------------------------------------------------------------- *\n*             PRINT HEADING                                           *\n* ------------------------------------------------------------------- *\nPRT0200  DS    0H\n         ITRACE ID=PRTHEAD           PRINTING HEADING\n         AP    PAGECT,P1             ADD 1 TO PAGE COUNT\n         MVC   HEADPAGE,PAGEEDWD     SET EDIT WORD\n         ED    HEADPAGE,PAGECT       EDIT PAGE NUMBER\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         PUT   DISPRINT,HEADING      WRITE HEADING\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         ZAP   LINECT,P1             SET LINE COUNT TO 1\nPRT0210  DS    0H\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,1,COMMSUBL+1       SUBHEADING LENGTH\n         BZR   R9                    NO SUB-HEADING\n         CLI   COMMSUBL,X'FF'        NON-CENTERED HEADING?\n         BE    PRT0220               YES\n         LA    R2,L'SUBHWORK         WORK AREA SIZE\n         SR    R2,R1                 MINUS SUBHEADING LENGTH\n         SRL   R2,1                  DIVIDED BY 2\n         MVI   SUBHWORK,C'-'         INITIALIZE WITH HYPHEN\n         MVC   SUBHWORK+1(L'SUBHWORK-1),SUBHWORK\n         LA    R2,SUBHWORK(R2)       ADDRESS FOR CENTERED SUB-HEADING\n         BCTR  R1,0                  FOR EXECUTE\n         EX    R1,SUBHMVC1           MOVE SUB-HEADING\n         B     PRT0230\nPRT0220  DS    0H\n         BCTR  R1,0                  MINUS 1\n         EX    R1,SUBHMVC2           MOVE NON-CENTERED\nPRT0230  DS    0H\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         PUT   DISPRINT,SUBHCC       PRINT SUBHEADING\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         AP    LINECT,P1             ADD 1 TO LINE COUNT\n         MVI   SUBHWORK,C' '         CLEAR WORK AREA\n         MVC   SUBHWORK+1(L'SUBHWORK-1),SUBHWORK\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         PUT   DISPRINT,SUBHCC       PRINT BLANK LINE\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         AP    LINECT,P1             ADD 1 TO LINE COUNT\n         BR    R9\n* ------------------------------------------------------------------- *\n*             CLOSE PRINTER                                           *\n* ------------------------------------------------------------------- *\nPRT0300  DS    0H\n         ITRACE ID=PRTCLOSE          CLOSING PRINT DCB\n         TM    PRTFLAG,$PRTOPEN      PRINTER OPEN?\n         BNO   PRT9900               NO.. EXIT\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         CLOSE DISPRINT              CLOSE PRINTER\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         NI    PRTFLAG,255-$PRTOPEN  TURN OPEN FLAG OFF\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\nPRT9900  DS    0H\n         ITRACE ID=EXIT              EXITING PRINT MODULE\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\nAM24     DS    0H\n         LA    R14,0(R14)         CLEAR HIGH BIT(S)\n         BSM   R0,R14             RETURN IN 24-BIT MODE\nAM31     DS    0H\n         LA    R14,0(R14)         CLEAR HIGH BIT(S)\n         O     R14,X80            SET 31-BIT MODE\n         BSM   R0,R14             RETURN IN 31-BIT MODE\nSUBHMVC1 MVC   0(0,R2),COMMSUBH      COPY SUBHEADING (CENTERED)\nSUBHMVC2 MVC   SUBHWORK(0),COMMSUBH  COPY SUBHEADING (NON-CENTERED)\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              WORK AREAS                                            *\n*                                                                    *\n* ------------------------------------------------------------------ *\nPRTSAVE  DC    18F'0'                REGISTER SAVE AREA\nX80      DC    A(X'80000000')\nPRTFLAG  DC    X'00'\n$PRTOPEN EQU   X'80'\nP1       DC    P'1'                  CONSTANT\nLINECT   DC    PL3'0'                LINE COUNT\nLINEWORK DC    PL3'0'                LINES ADDED BY THIS I/O\nPAGECT   DC    PL3'0'                PAGE COUNT\nPAGEEDWD DC    X'402020202120'       CONSTANT\nHEADING  DS    0C\n         DC    CL01'1'\n         DC    CL53' '\n         DC    CL15'DISASSEMBLER'\n         DC    CL54' '\n         DC    CL04'PAGE'\nHEADPAGE DC    CL06' '\nSUBHCC   DC    C'0'\nSUBHWORK DC    CL133' '\nDISPRINT DCB   DSORG=PS,                     PRINTER DCB               +\n               RECFM=FBA,                    .. RECORD FORMAT          +\n               LRECL=L'PRTCC+L'PRTDATA,      .. RECORD LENGTH          +\n               DDNAME=DISPRINT,              .. DD NAME                +\n               MACRF=PM                      .. MACRO FORMAT\n         LTORG\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              PRINT MODULE INTERFACE BLOCK                          *\n*                                                                    *\n* ------------------------------------------------------------------ *\nPRTBLOK  PRTBLOK  TYPE=DSECT\n         SPACE 2\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              COMMON DATA MAP                                       *\n*                                                                    *\n* ------------------------------------------------------------------ *\nDISASM00 DISASM00 TYPE=DSECT\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              EQUATES                                               *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         END  DISASMPR\n./ ADD NAME=DISASMRR\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: DISASMRR - Verify operands for RR format instructions *\n*                                                                     *\n*  Function:                                                          *\n*   Some instructions require that the operand(s) be even-odd pairs   *\n*   of registers.  This code verifies the operands for most 'RR'      *\n*   format instructions.                                              *\n*                                                                     *\n*   At entry R8 will be address of the current OPCODE table entry.    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  DISASMGB\nDISASMRR CSECT\nDISASMRR AMODE 31\nDISASMRR RMODE 24\n         USING DISASMRR,R12\n         USING OPDSECT,R8            DEFINE OPCODE DSECT BASE\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               SET BASE REG\n         B     VER0000               SKIP EYECATCHER\n         DC    CL8'DISASMRR'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nVER0000  DS    0H\n         TM    OPREGS,X'F0'          RESTRICTIONS ON OPERAND 1?\n         BZ    VER0100               NO\n         TM    1(R5),X'10'           OPERAND 1 AN ODD NUMBER?\n         BO    BAD0000               YES.. BAD\n         TM    OPREGS,$OP1EVEN       JUST INTERESTED IN AN EVEN NUMBER?\n         BO    VER0100               OPERAND 1 IS OK, CHECK OPERAND 2\n         TM    1(R5),X'80'           REGISTER NUMBER 8 OR GREATER?\n         BO    BAD0000               YES.. CANNOT BE VALID\n         TM    OPREGS,$OP10246       NEED 0, 2, 4, OR 6?\n         BO    VER0100               OPERAND 1 IS OK, CHECK OPERAND 2\n         TM    1(R5),X'20'           REGISTER 2 OR 6?\n         BO    BAD0000               YES.. NOT VALID\nVER0100  DS    0H\n         TM    OPREGS,X'0F'          RESTRICTIONS ON OPERAND 2?\n         BZ    GOOD0000              NO.. ALL OPERANDS ARE OK\n         TM    1(R5),X'01'           OPERAND 2 AN ODD NUMBER?\n         BO    BAD0000               YES.. BAD\n         TM    OPREGS,$OP2EVEN       JUST INTERESTED IN AN EVEN NUMBER?\n         BO    GOOD0000              ALL OPERANDS ARE OK\n         TM    1(R5),X'08'           REGISTER NUMBER 8 OR GREATER?\n         BO    BAD0000               YES.. CANNOT BE VALID\n         TM    OPREGS,$OP20246       NEED 0, 2, 4, OR 6?\n         BO    GOOD0000              ALL OPERANDS ARE OK\n         TM    1(R5),X'02'           REGISTER 2 OR 6?\n         BO    BAD0000               YES.. NOT VALID\nGOOD0000 DS    0H\n         SR    R15,R15               OPERAND(S) ARE OK\n         B     EXIT0000              EXIT\nBAD0000  DS    0H\n         LA    R15,8                 OPERAND(S) ARE NOT OK\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         L     R14,12(R13)           RESTORE R14                        ASE01680\n         LM    R0,R12,20(R13)        RESTORE OTHER REGISTERS            ASE01680\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              EQUATES                                               *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         COPY DISASMDA\n         COPY REGEQU\n         END  DISASMRR\n./ ADD NAME=DISASMTS\n1   I read the article on the disassembler by Alan Field in the\n February issue of Technical Support.  I have used the disassembler\n mentioned in the article (from file 217 of the CBT).  There are\n several things about this disassembler that I thought could be improved.\n For example, I wanted the disassembler listing to look as much like the\n original assembler list as possible.  The disassembler did allow DSECTs\n to be defined, but you had to code statements to do this yourself.\n Some parameters were entered via the \"PARM\" on the execute statement,\n others by SYSIN type statements.  There were some fixed size tables\n that could fill up.\n0   I wrote a new disassembler, borrowing from the one on the CBT.  The\n new program produces a listing very similar to assembler output.  DSECTs\n are defined by using the actual dsect source or macro.  There are no\n hardcoded fixed size tables that may fill up.  All control parameters\n are entered via \"SYSIN\" type statements.  I admitted up front that there\n would be problems that would be difficult to trouble shoot, so the\n program has a built in internal trace table.  There turned out to be\n so many internal control blocks that following the chains in a dump\n was very time consuming, so I wrote a \"debug\" program to run the chains\n and format the data at specific points.\n0   Whereas the \"old\" disassembler consisted of 3 modules, mine has 15.\n The individual CSECTs are:\n             DISASM00 - common data and trace table code\n             DISASM01 - mainline\n             DISASM02 - parameter reader/converter\n             DISASM03 - object code reader\n             DISASM04 - ESD data processor\n             DISASM05 - RLD data processor\n             DISASM06 - text printer\n             DISASM07 - assembler interface/dsect interpreter\n             DISASM08 - reference table builder\n             DISASM09 - source code generator\n             DISASMB2 - interprets \"B2xx\" opcodes\n             DISASMDB - debug\n             DISASMOP - opcode table\n             DISASMPR - printer\n             DISASMRR - verifies register operands\n Altogether the code comes to about 38K.\n0   As in the \"old\" disassembler, extended mnemonics are used if possible\n for branch instructions.  SVC's are interpreted (the macro is not re-\n coded).  Control statements allow the definition of areas that do not\n contain instructions.  If the DISPUNCH DD is allocated, an 80-byte\n card type source deck will be produced that may be used as input to the\n assembler.\n0   Labels generated for the disassembled CSECT have a form PPPPNNNN.\n If the label precedes an instruction, the PPPP is a 1 to 4 character\n user supplied prefix.  If the label preceeds a data area, PPPP is the\n literal \"DATA\".  NNNN is either the displacement into the CSECT where\n the label appears or is a sequentially assigned number (0010, 0020,\n etc).  Sequentially numbered labels may be more desirable if the source\n is to be modified because the label may no longer be at the same\n displacement.\n0   If the disassembler can determine a label, it will use it in the\n generated source.  Instead of a MVC instruction always looking like:\n \"MVC   324(18,R2),21(R3)\", it might look like \"MVC   FIELDB(18),FIELDA\".\n0   ENTRY points will be reproduced from the ESD data.  RLD items will\n cause an ADCON, VCON, Q, or CXD at the point the RLD item exists.\n ADCONs will cause a label to be generated at the point referenced by\n the ADCON.  VCONs and Q type items will have the name inserted:\n \"DC  V(nnnnn)\" or \"Q(nnnnn)\".\n0   I tried to make the program as self documenting and as uncluttered\n as possible.  By breaking it up into multiple CSECTs functions could\n be isolated.  This kept base register problems to a minimum and allowed\n some isolation of testing individual components.\n-                       PROGRAM DESCRIPTION\n   STEP   MODULE\n     1   DISASM01  Acquire trace table storage and initialize the trace\n                   control data in DISASM00.\n     2   DISASM01  Scan the TIOT to determine which DD's are present.\n     3   DISASM01  Verify that all required DD's were present.\n     4   DISASM01  Call the parameter reader, DISASM02.\n     5   DISASM02  Read all control statements.  Each statement is\n                   printed on the DISPRINT listing.  All parameters\n                   set fields or flags in the common module, DISASM00.\n     6   DISASM02  When end-of-file is reached on DISIN, verify that all\n                   required parameters were entered.\n     7   DISASM01  If there were errors detected by DISASM02, an error\n                   message is issued and the program terminates.\n     8   DISASM01  Acquire storage for object module I/O area.\n     9   DISASM01  Call the object module reader, DISASM03.\n    10   DISASM03  Issue a BLDL for the specified module.\n    11   DISASM03  If the BLDL was unsuccessful, interpret the return\n                     A) interpret the BLDL return code\n                     B) print an error message\n                     C) set the abort flag\n                     D) return to mainline\n    12   DISASM03  Interpret data from the directory data (text's TTR,\n                       entry point, module's length, etc).\n    13   DISASM03  Issue a POINT to prepare for reading the module.\n    14   DISASM03  If the POINT was unsuccessful\n                     A) interpret the POINT return code\n                     B) print an error message\n                     C) set the abort flag\n                     D) return to mainline\n    15   DISASM03  Read records from the object module:\n    16   DISASM03  If the record contains\n                     A) CESD records, process them internally.  If this\n                        is the requested CSECT's data, copy the data\n                        into the storage acquired by DISASM04.\n                     B) ESD data, call DISASM04 to process.\n         DISASM04       DISASM04 interprets and prints the ESD data.\n                        ESD info is saved in \"ESDDATA\" blocks chained\n                        from the common data module, DISASM00.  If the\n                        requested CSECT is found, acquire storage for\n                        text, and set the \"CSECT found\" flag.\n                     C) RLD data, call DISASM05 to process.\n         DISASM05       DISASM05 interprets and prints RLD data.  RLD\n                        info is saved in \"RLDDATA\" blocks chained from\n                        the common data module, DISASM00.  If an RLD\n                        item overlaps an area defined by a DATA\n                        statement, the DATA item's beginning and/or\n                        ending displacement will be adjusted.  A new\n                        DATA block will be created if necessary.\n                        RLD items are checked to see if they reference\n                        ESD items (like VCONs).  If an RLD item does\n                        reference an ESD entry, the ESD item is linked\n                        to the RLD item so the name can be generated.\n    17   DISASM01  If there were errors detected by DISASM03, DISASM04,\n                   or DISASM05, an error message is issued and the\n                   program terminates.\n    18   DISASM01  Call the object text printer DISASM06.\n    19   DISASM06  Prints the object module in dump type format.\n    20   DISASM01  Call the assembler interface and dsect interpreter,\n                   DISASM07.\n    21   DISASM07  If no assembler input was specified in the DISIN\n                   parameters, issue a message and return to mainline.\n    22   DISASM07  LOAD the assembler, IEV90.\n    23   DISASM07  Link to the assembler.\n    24   DISASM07  Print the assembler return code.\n    25   DISASM07  Read the assembler listing -\n                      A) when a DSECT is detected, add a new DSCTBLOK\n                         to the chain (CSECT's are treated the same\n                         as DSECT's).\n                      B) when a label is detected add it to the label\n                         chain from the current DSECT.\n    26   DISASM08  Chain the USING blocks to the DSECT blocks they\n                   refer to.\n    27   DISASM08  Scan the object code and determine the displacements\n                   where valid instructions occur. Generate DATA blocks\n                   for any areas that do not contain instructions.\n    28   DISASM08  Verify that all BASE and USINGs reference instruction\n                   boundaries.\n    29   DISASM08  Generate LABELs for ENTRY points in the requested\n                   CSECT.\n    30   DISASM08  Generate LABELs for ADCON references.\n    31   DISASM08  Generate the reference table.  If the disassembler\n                   can determine a label in the CSECT or a DSECT,\n                   the \"reference\" will be the address of the LABEL\n                   block and the displacement from that label.\n    32   DISASM09  Source code generation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n./ ADD NAME=DISASMU1\n         TITLE 'DISASMU1 - PREPROCESS DSECTS'\n         COPY  DISASMGB\n&DAPRT   SETC  'ON'\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISASMU1                                             *\n*                                                                    *\n*  Function:                                                         *\n*                                                                    *\n*   The disassembler can use actual assembler source for label       *\n*   mapping.  The source can be supplied to the disassembler         *\n*   during a disassembly run or pre-processed by this utility.       *\n*                                                                    *\n*   The assembler output is scanned to obtain DSECT names, label     *\n*   names, and the displacements to the labels.  In order for the    *\n*   utility to find names and displacements, the PRINT option        *\n*   must be ON.                                                      *\n*                                                                    *\n*   SYSUT1   SYSPRINT file from the assembler                        *\n*   SYSPRINT Messages generated by this utility                      *\n*   SYSUT2   Output.  This is the DSECT information that can be      *\n*            supplied to the disassembler via the DISDSECT DD.       *\n*                                                                    *\n*                                                                    *\n*   This utility dynamically allocates the DD's for SYSUT2.          *\n*   The data set name for the DSECT information output must          *\n*   be specified in the PARM on the JCL EXEC statement.              *\n*                                                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISASMU1 CSECT\nDISASMU1 AMODE 24\nDISASMU1 RMODE 24\n         USING DISASMU1,R12\n         USING DSCTDSCT,R10\n         USING LABLDSCT,R9\n         USING EQUDATA,R8\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               SET BASE REG\n         B     UTIL0000              SKIP EYECATCHER\n         DC    CL8'DISASMU1'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nUTIL0000 DS    0H\n         LA    R15,WK_SAVEAREA\n         ST    R13,4(R15)\n         ST    R15,8(R13)\n         LR    R13,R15\n         L     R2,0(R1)              PARM ADDRESS\n         SR    R3,R3                 CLEAR REGISTER\n         ICM   R3,3,0(R2)            LENGTH\n         BCTR  R3,0                  MINUS 1\n         EX    R3,DSNMVC             MOVE DATA SET NAME\n         OPEN  (SYSUT1,INPUT)        OPEN SYSUT1 FOR INPUT\n         OPEN  (SYSPRINT,OUTPUT)     OPEN SYSPRINT FOR OUTPUT\n         PUT   SYSPRINT,MSG00\n         SR    R10,R10               NO DSECT FOUND SO FAR\n         SR    R9,R9                 NO LABEL FOUND SO FAR\nUTIL0010 DS    0H\n         GET   SYSUT1,ASM_DATA       READ A SYSUT1 RECORD\n         CLI   ASM_LABEL,C'*'        COMMENT STATEMENT?\n         BE    UTIL0010              YES\n         CLC   ASM_DATA+43,SRCSTMT   ASSEMBLER HEADING LINE?\n         BE    UTIL0010              YES, IGNORE IT\n         CLC   XREF,ASM_DATA+45      START OF CROSS REFERENCE?\n         BNE   UTIL0020              NO\n         OI    WK_FLAGS,$XREF        SET CROSS REFERENCE FLAG\nUTIL0020 DS    0H\n         TM    WK_FLAGS,$XREF        CROSS REFERENCE FOUND?\n         BO    UTIL0010              YES\n         CLI   ASM_LABEL,C' '        LABEL PRESENT?\n         BE    UTIL0010              NO\n         LA    R6,ASM_LABEL          FIRST BYTE OF LABEL\n         LA    R2,WK_LABEL           FIRST BYTE OF WORK LABEL\n         MVC   WK_LABEL,BLANKS       CLEAR LABEL NAME\n         LA    R1,8                  MAX LOOPS\nUTIL0030 DS    0H\n         CLI   0(R6),C' '            BLANK?\n         BE    UTIL0040              YES\n         MVC   0(1,R2),0(R6)         COPY TO WORK LABEL\n         LA    R2,1(R2)              NEXT\n         LA    R6,1(R6)              NEXT\n         BCT   R1,UTIL0030           LOOP\n         CLI   0(R6),C' '            BLANK?\n         BE    UTIL0040              NO... TOO LONG FOR A LABEL\n         B     UTIL0010              READ NEXT SYSUT1 RECORD\nUTIL0040 DS    0H\n         LA    R1,8                  MAX LOOPS\nUTIL0050 DS    0H\n         CLI   0(R6),C' '            BLANK?\n         BNE   UTIL0060              NO\n         LA    R6,1(R6)              NEXT\n         BCT   R1,UTIL0050           LOOP\n         B     UTIL0110              ASSUME IT IS A LABEL\nUTIL0060 DS    0H\n         CLC   OP_DSECT(6),0(R6)     DSECT?\n         BE    UTIL0070              YES\n         CLC   OP_CSECT,0(R6)        CSECT?  (TREATED LIKE DSECTS)\n         BE    UTIL0070              YES\n         CLC   OP_EQU,0(R6)          EQUATE STATEMENT?\n         BNE   UTIL0110              NO\n         LTR   R9,R9                 LABEL FOUND YET?\n         BZ    UTIL0010              NO\n         CLC   =C'000',ASM_ADDR      FIRST 3 DIGITS ZEROS?\n         BNE   UTIL0010              NO\n         GETMAIN RU,                 LENGTH                            +\n               LV=EQUL,                                                +\n               LOC=BELOW\n         LR    R8,R1                 COPY EQU BLOCK ADDRESS\n         XC    EQUDATA(EQUL),EQUDATA INITIALIZE THE EQUATE BLOCK\n         MVC   EQUEYE,EQUID          IDENTIFY THIS BLOCK\n         MVC   EQUNEXT,LABLEQU       SET CHAIN ADDRESS\n         ST    R8,LABLEQU            SET NEW BLOCK'S ADDRESS IN LABEL\n         MVC   EQULABEL,WK_LABEL     SET LABEL\n         NC    ASM_ADDR+3(2),X1F1F   PREPARE FOR PACKING\n         TR    ASM_ADDR+3(2),CHXH    TRANSLATE FOR PACKING\n         PACK  WK_DISP_OUT(2),ASM_ADDR+3(3)\n         MVC   EQUVALUE,WK_DISP_OUT  COPY EQUATE VALUE\n         B     UTIL0010\nUTIL0070 DS    0H\n         LA    R2,WK_DSECT_CHAIN     DSECT ANCHOR\n         ICM   R10,15,WK_DSECT_CHAIN FIRST DSECT BLOCK\n         BZ    UTIL0090              NO DSECTS YET\nUTIL0080 DS    0H\n         CLC   DSCTNAME,WK_LABEL     ALREADY ON DSECT CHAIN?\n         BE    UTIL0100              YES.. EXIT WITH BASE SET\n         LR    R2,R10                COPY ADDRESS\n         ICM   R10,15,DSCTNEXT       NEXT DSECT BLOCK\n         BNZ   UTIL0080              LOOP\nUTIL0090 DS    0H\n         GETMAIN RU,                 ACQUIRE NEW DSECT BLOCK           +\n               LV=DSCTL,                                               +\n               LOC=BELOW\n         ST    R1,DSCTNEXT-DSCTDSCT(R2)   CHAIN NEW TO PREVIOUS BLOCK\n         LR    R10,R1                SET BASE\n         MVC   DSCTEYE,OP_DSECT      SET BLOCK ID\n         XC    DSCTNEXT,DSCTNEXT     ZERO 'NEXT' BLOCK ADDRESS\n         MVC   DSCTNAME,WK_LABEL     SET DSECT'S NAME\n         XC    DSCTLBA,DSCTLBA       CLEAR LABEL POINTER\n         SR    R9,R9                 CLEAR LABEL BLOCK ADDRESS\n         B     UTIL0010\nUTIL0100 DS    0H\n         B     UTIL0010\nUTIL0110 DS    0H\n         LTR   R10,R10               DSECT DETERMINED YET?\n         BZ    UTIL0010              NO\n         CLI   ASM_DISP,C'A'         VALID DISPLACEMENT?\n         BL    UTIL0010              NO\n         CLI   ASM_DISP,C'F'         VALID DISPLACEMENT?\n         BNH   UTIL0120              YES\n         CLI   ASM_DISP,C'0'         VALID DISPLACEMENT?\n         BL    UTIL0010              NO\n         CLI   ASM_DISP,C'9'         VALID DISPLACEMENT?\n         BH    UTIL0010              NO\nUTIL0120 DS    0H\n         MVC   WK_DISP_IN,ASM_DISP   COPY DISPLACEMENT\n         NC    WK_DISP_IN,X1F1F      PREPARE FOR TRANSLATE\n         TR    WK_DISP_IN,CHXH       TRANSLATE FOR PACKING\n         PACK  WK_DISP_OUT(4),WK_DISP_IN(7) PACK DISPLACEMENT\n         LA    R2,DSCTLBA            LABEL CHAIN ANCHOR\n         ICM   R9,15,DSCTLBA         FIRST LABEL\n         BZ    UTIL0140              NO LABELS\nUTIL0130 DS    0H\n         CLC   WK_DISP_OUT(3),LABLDISP+1 INSERT HERE?\n         BH    UTIL0140              YES\n         LR    R2,R9                 COPY ADDRESS\n         ICM   R9,15,LABLNEXT        NEXT LABEL\n         BNZ   UTIL0130              LOOP\nUTIL0140 DS    0H\n         GETMAIN RU,                 ACQUIRE NEW LABEL BLOCK           +\n               LV=LABLL,                                               +\n               LOC=BELOW\n         ST    R1,LABLNEXT-LABLDSCT(R2)  CHAIN PREVIOUS BLOCK TO NEW\n         ST    R9,LABLNEXT-LABLDSCT(R1)  CHAIN NEXT BLOCK TO NEW\n         LR    R9,R1                 SET BASE\n         MVC   LABLEYE,LABEL         SET BLOCK IDENTIFIER\n         MVC   LABLNAME,WK_LABEL     SET LABEL NAME\n         MVI   LABLDISP,X'00'        FORCE FIRST BYTE TO ZERO\n         MVC   LABLDISP+1(3),WK_DISP_OUT SET DISPLACEMENT TO LABEL\n         XC    LABLEQU,LABLEQU       INITIALIZE EQUATE BLOCK ADDRESS\n         MVI   LABLTYPE,$LABLD       DATA TYPE LABEL\n         B     UTIL0010\n*---------------------------------------------------------------------*\n*                                                                     *\n*    EOF on the assembler output has been reached.                    *\n*                                                                     *\n*    Print the info we have gathered and write it to the              *\n*    pre-processed DSECT info file.  One member per DSECT.            *\n*                                                                     *\n*---------------------------------------------------------------------*\nEOF0000  DS    0H\n         ICM   R10,15,WK_DSECT_CHAIN ANY DSECTS?\n         BZ    EOF0070               NO\n         B     EOF0020\nEOF0010  DS    0H\n         BAL   R11,PRT0000           PRINT A BLANK LINE\nEOF0020  DS    0H\n         MVC   MSG01_NAME,DSCTNAME   COPY DSECT NAME\n         MVC   PR_DATA(MSG01L),MSG01\n         BAL   R11,PRT0000\n         MVC   WK_MEMBER_NAME,DSCTNAME   COPY TO MEMBER NAME\n         BAL   R11,DAIR0000          ALLOCATE THE MEMBER\n         OPEN  (SYSUT2,OUTPUT)       OPEN MEMBER IN SYSUT2\n         OI    WK_FLAGS,$OPEN        SYSUT2 DCB IS OPEN\n         MVC   WK_IO_DATA(DSCTL),DSCTDSCT\n         LA    R1,DSCTL+4\n         STCM  R1,3,WK_IO_LENGTH\n         PUT   SYSUT2,WK_IO\n         ICM   R9,15,DSCTLBA         FIRST LABEL BLOCK\n         BZ    EOF0050\nEOF0030  DS    0H\n         MVC   MSG02_NAME,LABLNAME   COPY LABEL NAME\n         UNPK  MSG02_DISP(9),LABLDISP(5)\n         TR    MSG02_DISP,HEXCHAR\n         MVI   MSG02_DISP+8,C' '\n         MVC   MSG02_TYPE,LABLTYPE   COPY LABEL TYPE\n         MVC   PR_DATA(MSG02L),MSG02\n         BAL   R11,PRT0000           PRINT\n         MVC   WK_IO_DATA(LABLL),LABLDSCT\n         LA    R1,LABLL+4\n         STCM  R1,3,WK_IO_LENGTH\n         PUT   SYSUT2,WK_IO\n         ICM   R8,15,LABLEQU         FIRST EQU BLOCK\n         BZ    EOF0050\nEOF0040  DS    0H\n         MVC   MSG03_NAME,EQULABEL   COPY LABEL\n         MVC   WK_UNPACK(1),EQUVALUE\n         UNPK  MSG03_VALUE(3),WK_UNPACK(2)\n         TR    MSG03_VALUE,HEXCHAR\n         MVI   MSG03_VALUE+2,C' '\n         MVC   PR_DATA(MSG03L),MSG03\n         BAL   R11,PRT0000\n         MVC   WK_IO_DATA(EQUL),EQUDATA\n         LA    R1,EQUL+4\n         STCM  R1,3,WK_IO_LENGTH\n         PUT   SYSUT2,WK_IO\n         ICM   R8,15,EQUNEXT\n         BNZ   EOF0040\nEOF0050  DS    0H\n         ICM   R9,15,LABLNEXT\n         BNZ   EOF0030\nEOF0060  DS    0H\n         CLOSE (SYSUT2)\n         ICM   R10,15,DSCTNEXT\n         BNZ   EOF0010\n         B     EXIT0000              AND EXIT\nEOF0070  DS    0H\n         MVC   PR_DATA(MSG09L),MSG09\n         BAL   R11,PRT0000\n         B     EXIT0000\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDAIR0000 DS    0H\n         L     R1,WK_DD_NUMBER\n         LA    R1,1(R1)\n         ST    R1,WK_DD_NUMBER\n         UNPK  WK_UNPACK(9),WK_DD_NUMBER(5)\n         TR    WK_UNPACK,HEXCHAR\n         MVC   WK_DD_NAME,WK_UNPACK\n         MVI   WK_DD_NAME,C'D'\n         LA    R2,SYSUT2\n         USING IHADCB,R2\n         MVC   DCBDDNAM,WK_DD_NAME\n         DROP  R2\n         LA    R2,WK_RB\n         USING S99RB,R2\n         MVI   S99VERB,S99VRBAL      SET VERB\n         LA    R15,WK_TEXT_ADDR      TEXT UNIT LIST ADDRESS\n         ST    R15,S99TXTPP          SET TEXT ADDRESS\n         MVI   S99RBLN,S99RBEND-S99RB\n         LA    R1,WK_RB_ADDRESS      REQUEST BLOCK POINTER'S ADDRESS\n         SVC   99                    ISSUE SVC\n         LTR   R15,R15               SUCCESSFUL?\n         BZR   R11                   YES\n         DC    H'0'\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         CP    WK_LINE,P_65          TIME FOR HEADING?\n         BL    PRT0010               NO\n         PUT   SYSPRINT,MSG00\n         ZAP   WK_LINE,P_1\nPRT0010  DS    0H\n         PUT   SYSPRINT,PR_CC\n         MVC   PR_DATA,PR_CC\n         AP    WK_LINE,P_1\n         BR    R11\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         CLOSE SYSUT1\n         CLOSE SYSPRINT\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDSNMVC   MVC   WK_DS_NAME(0),2(R2)\n*---------------------------------------------------------------------*\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nWK_SAVEAREA    DC    18F'0'         REGISTER SAVE AREA\nWK_DSECT_CHAIN DC    A(0)\nWK_LABEL       DC    CL8' '\nWK_FLAGS       DC    X'00'\n$XREF          EQU   X'80'          .. CROSS REFERENCE HAS BEEN FOUND\n$OPEN          EQU   X'80'          .. SYSUT2 DCB IS OPEN\nWK_DD_NUMBER   DC    F'0'\nWK_UNPACK      DC    CL16' '\nWK_RB_ADDRESS  DC    A(WK_RB+X'80000000')\nWK_RB          DS    (S99RBEND-S99RB)X\nWK_TEXT_ADDR   DC    A(WK_DD_TEXT)\n               DC    A(WK_DS_TEXT)\n               DC    A(WK_MEMBER_TEXT)\n               DC    A(WK_DISP_TEXT)\n               DC    A(WK_FREE_TEXT+X'80000000')\n\nWK_DD_TEXT     DC    AL2(DALDDNAM)         DDNAME PARMS\n               DC    AL2(1)\n               DC    AL2(8)\nWK_DD_NAME     DC    CL8' '                DDNAME\n\nWK_DS_TEXT     DC    AL2(DALDSNAM)         DATASET NAME PARMS\n               DC    AL2(1)\n               DC    AL2(44)\nWK_DS_NAME     DC    CL44' '               DATASET NAME\n\nWK_MEMBER_TEXT DC    AL2(DALMEMBR)         MEMBER NAME PARMS\n               DC    AL2(1)\n               DC    AL2(8)\nWK_MEMBER_NAME DC    CL8' '                DATASET NAME\n\nWK_DISP_TEXT   DC    AL2(DALSTATS)         INITIAL DISPOSITION PARMS\n               DC    AL2(1)\n               DC    AL2(1)\n               DC    X'08'                 INITIAL DISPOSITION (SHR)\n\nWK_FREE_TEXT   DC    AL2(DALCLOSE)         FREE=CLOSE\n               DC    AL2(0)\n\nWK_IO          DS    0X\nWK_IO_LENGTH   DC    XL2'00'\n               DC    XL2'00'\nWK_IO_DATA     DC    100X'00'\n\nXREF           DC    C' CROSS REFERENCE '\n\nHEXCHAR  EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\n\nP_1      DC    P'1'\nP_65     DC    P'65'\nWK_LINE  DC    PL3'0'\n\nX1F1F    DC    8X'1F'\n         SPACE 1 0 1 2 3 4 5 6 7 8 9 A B C D E F\nCHXH     DC    X'000A0B0C0D0E0F000000000000000000'  00-0F\n         DC    X'00010203040506070809000000000000'  10-1F\n         SPACE 1\nASMHEAD  DC    CL35'ASSEMBLER OUTPUT'\nBLANKS   DC    CL8' '\nOP_DSECT DC    CL8'DSECT'\nOP_CSECT DC    CL8'CSECT'\nOP_EQU   DC    C'EQU '\nSRCSTMT  DC    C'SOURCE STATEMENT'\nWK_DISP_IN DC  CL7' '\nWK_DISP_OUT DC XL4'000000'\nLABEL    DC    CL8'LABEL'\nEQUID    DC    CL8'EQU'\n\nPR_CC    DC    C' '\nPR_DATA  DC    CL120' '\n\nMSG00    DC    CL121'1    DISASMUT1   Preprocessed DSECTs'\nMSG00L   EQU   *-MSG00\nMSG01          DS    0C\n               DC    C'DSECT '\nMSG01_NAME     DC    CL8' '\nMSG01L         EQU   *-MSG01\nMSG02          DS    0C\n               DC    C'  LABEL '\nMSG02_NAME     DC    CL8' '\n               DC    C'  DISP '\nMSG02_DISP     DC    CL8' '\n               DC    C' '\nMSG02_TYPE     DC    C' '\nMSG02L         EQU   *-MSG02\nMSG03          DS    0C\n               DC    C'    EQUATE '\nMSG03_NAME     DC    CL8' '\n               DC    C'  VALUE '\nMSG03_VALUE    DC    CL2' '\n               DC    C' '\nMSG03L         EQU   *-MSG03\nMSG09          DS    0C\n               DC    C'**  No DSECTS found'\nMSG09L         EQU   *-MSG09\n*---------------------------------------------------------------------*\n*                                                                     *\n*              ASSEMBLER OUTPUT DCB                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\nSYSUT1    DCB  DDNAME=SYSUT1,                                          +\n               DSORG=PS,                                               +\n               EODAD=EOF0000,                                          +\n               MACRF=GM\nSYSUT2    DCB  DDNAME=SYSUT2,                                          +\n               DSORG=PS,                                               +\n               LRECL=LABLL+4,                                          +\n               MACRF=PM\nSYSPRINT  DCB  DDNAME=SYSPRINT,                                        +\n               DSORG=PS,                                               +\n               RECFM=FBA,                                              +\n               LRECL=121,                                              +\n               MACRF=PM\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         LTORG\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n          AIF   (&ASMG EQ 133).GENASMA\nASM_DATA  DC    CL121' '\nASM_DATAL EQU   *-ASM_DATA\n          ORG   ASM_DATA+1\nASM_DISP  DS    CL6\n          ORG   ASM_DATA+29\nASM_ADDR  DS    CL5\n          ORG   ASM_DATA+41\nASM_LABEL DS    CL8\n          ORG   ASM_DATA+121\n          AGO   .GENASMB\n.GENASMA  ANOP\nASM_DATA  DC    CL133' '\nASM_DATAL EQU   *-ASM_DATA\n          ORG   ASM_DATA+1\nASM_DISP  DS    CL6\n          ORG   ASM_DATA+23\nASM_ADDR  DS    CL5\n          ORG   ASM_DATA+41\nASM_LABEL DS    CL8\n          ORG   ASM_DATA+133\n.GENASMB  ANOP\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY   DISASMDA\n*---------------------------------------------------------------------*\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DCBD   DSORG=PS\n         IEFZB4D0\n         IEFZB4D2\n         COPY REGEQU\n         END  DISASMU1\n./ ADD NAME=DISASM00\n         TITLE 'DISASM00 - COMMON DATA MODULE'\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISASM00                                             *\n*                                                                    *\n*  Function:                                                         *\n*              Common data module and trace table.                   *\n*              At initialization time, the mainline module, DISASM01,*\n*              sets R11 to the address of DISASM00.  All other       *\n*              modules depend on this address remaining unchanged.   *\n*                                                                    *\n*--------------------------------------------------------------------*\n         COPY  DISASMGB\nDISASM00 DISASM00 TYPE=CSECT\n         COPY  REGEQU\n         END\n./ ADD NAME=DISASM01\n         TITLE 'DISASM01 - MAINLINE'\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISASM01                                             *\n*                                                                    *\n*  Function:                                                         *\n*   Mainline module.                                                 *\n*                                                                    *\n*     STEP                                                           *\n*       1. Set R11 to address of DISASM00 (the common module).       *\n*       2. Acquire storage for the trace table and initialize the    *\n*          control data in DISASM00.                                 *\n*       3. Scan the TIOT to determine which DD's are present.        *\n*       4. Verify required DD's are present.                         *\n*       5. Call the parameter reader module, DISASM02.               *\n*       6. Call the debug module, DISASMDB to print internal data.   *\n*       7. If errors from DISASM02, print message, go to step 21.    *\n*       8. Call the module reader, DISASM03.                         *\n*       9. If errors from DISASM03, print message, go to step 21.    *\n*      10. Call the text printer module DISASM06.                    *\n*      11. Call the debug module, DISASMDB to print internal data.   *\n*      12. If errors from DISASM06, print message, go to step 21.    *\n*      13. Call assembler interface module, DISASM07 to assemble     *\n*          DSECTs and build dsect/dsect label chains.                *\n*      14. Call the debug module, DISASMDB to print internal data.   *\n*      15. If errors from DISASM07, print message, go to step 21.    *\n*      16. Call module DISASM08 to build the internal labels and     *\n*          the reference table.                                      *\n*      17. Call the debug module, DISASMDB to print internal data.   *\n*      18. If errors from DISASM08, print message, go to step 21.    *\n*      19. Call the source code generator, DISASM09.                 *\n*      20. If errors from DISASM09, print message.                   *\n*      21. Free the storage for all internal chains and the trace    *\n*          table.                                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\n         COPY  DISASMGB              COPY GLOBAL OPTIONS\nDISASM01 CSECT\nDISASM01 AMODE 31\nDISASM01 RMODE 24\n         USING DISASM01,R12\n         USING DISASM00,R11\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               SET BASE REG\n         B     MAIN0000              SKIP EYECATCHER\n         DC    CL8'DISASM01'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMAIN0000 DS    0H\n         L     R11,V00               DISASM00'S ADDRESS\n         LA    R1,SAVE01             OUR SAVE AREA ADDRESS\n         ST    R13,4(R1)             CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R1                SET SAVE AREA ADDRESS\n* ------------------------------------------------------------------- *\n*         Initialize trace table                                      *\n* ------------------------------------------------------------------- *\n         AIF   ('&TROPT' EQ 'OFF').NOTR1\n         L     R2,TRSIZE             TRACE TABLE'S SIZE\n         LA    R2,32(R2)             FOR BOUNDARY ROUNDING\n         GETMAIN RU,                 ACQUIRE STORAGE FOR TRACE TABLE   +\n               LV=(R2),              .. SIZE                           +\n               LOC=ANY               .. ANY AREA\n         ST    R1,TRADDR             SAVE TRACE TABLE ADDRESS\n         LA    R1,32(R1)             PLUS 32\n         SRL   R1,5                  ROUND THE ADDRESS TO...\n         SLL   R1,5                  ...NEAREST MULTIPLE OF 32\n         ST    R1,TR1ST              SET FIRST TRACE ENTRY ADDRESS\n         ST    R1,TRCURR             SET CURRENT TRACE ENTRY ADDRESS\n         XC    0(TRENTRYL,R1),0(R1)  INITIALIZE FIRST ENTRY\n         A     R1,TRSIZE             PLUS USED PORTION'S SIZE\n         SH    R1,COMMH32            MINUS 1 ENTRY\n         ST    R1,TRLAST             INITIALIZE LAST ENTRY ADDRESS\n         ITRACE ID=INIT,             INITIAL TRACE ENTRY               +\n               DATA1=TR1ST,          .. FIRST TRACE TABLE ENTRY ADDR   +\n               DATA2=TRLAST          .. LAST TRACE TABLE ENTRY ADDR\n.NOTR1   ANOP\n* ------------------------------------------------------------------- *\n*         Scan TIOT                                                   *\n* ------------------------------------------------------------------- *\n         USING PSA,R0                DEFINE BASE\n         L     R1,PSATNEW            MY TCB'S ADDRESS\n         USING TCB,R1                DEFINE TCB BASE\n         L     R2,TCBTIO             TIOT ADDRESS\n         USING TIOT1,R2              DEFINE BASE\n         LA    R3,TIOENTRY           FIRST TIOT ENTRY\n         USING TIOENTRY,R3           DEFINE BASE\n         SR    R4,R4                 CLEAR FOR LENGTHS\nMAIN0010 DS    0H\n         ICM   R4,1,TIOELNGH         LENGTH OF THIS ENTRY\n         BZ    MAIN0080              END OF TABLE\n         CLC   TIOEDDNM,INDD         DISIN DD?\n         BE    MAIN0030              YES\n         CLC   TIOEDDNM,PRTDD        DISPRINT DD?\n         BE    MAIN0040              YES\n         CLC   TIOEDDNM,LIBDD        DISMOD DD?\n         BE    MAIN0050              YES\n         CLC   TIOEDDNM,PUNCHDD      DISPUNCH DD?\n         BE    MAIN0060              YES\n         CLC   TIOEDDNM,DEBUGDD      DISDEBUG DD?\n         BE    MAIN0070              YES\n         CLC   TIOEDDNM,DSECTDD      DISDSECT DD?\n         BE    MAIN0075              YES\nMAIN0020 DS    0H\n         AR    R3,R4                 NEXT TIOT ENTRY\n         B     MAIN0010              LOOP\nMAIN0030 DS    0H\n         ITRACE ID=INDD              DISIN DD FOUND\n         OI    COMMDD,$INDD          INDICATE DISIN IS PRESENT\n         B     MAIN0020\nMAIN0040 DS    0H\n         ITRACE ID=PRTDD             DISPRINT DD FOUND\n         OI    COMMDD,$PRTDD         INDICATE DISPRINT IS PRESENT\n         B     MAIN0020\nMAIN0050 DS    0H\n         ITRACE ID=MODDD             DISMOD DD FOUND\n         OI    COMMDD,$MODDD         INDICATE DISMOD IS PRESENT\n         B     MAIN0020\nMAIN0060 DS    0H\n         ITRACE ID=PUNCHDD           DISPUNCH DD FOUND\n         OI    COMMDD,$PUNCHDD       INDICATE DISPUNCH IS PRESENT\n         B     MAIN0020\nMAIN0070 DS    0H\n         ITRACE ID=DEBUGDD           DISDEBUG DD FOUND\n         OI    COMMDD,$DEBUGDD       INDICATE DISDEBUG IS PRESENT\n         B     MAIN0020\nMAIN0075 DS    0H\n         ITRACE ID=DSECTDD           DISDSECT DD FOUND\n         OI    COMMDD,$DSECTDD       INDICATE DISDSECT IS PRESENT\n         B     MAIN0020\n* ------------------------------------------------------------------- *\n*         Determine DD'S present                                      *\n* ------------------------------------------------------------------- *\nMAIN0080 DS    0H\n         TM    COMMDD,$PRTDD         WAS PRINT DD FOUND?\n         BO    MAIN0090              YES\n         WTO   'DISPRINT DD STATEMENT MISSING, EXECUTION ABORTED'\n         OI    COMMFLAG,$ABORT+$ERROR SET FLAGS\n         B     EXIT0000              AND EXIT\nMAIN0090 DS    0H\n         MVI   PRTCMD,$PRTHEAD       SET COMMAND\n         LA    R1,PRTBLOK            PRINT INTERFACE BLOCK ADDRESS\n         L     R15,APR               PRINT MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO PRINT MODULE\n         TM    COMMDD,$INDD          IS DISIN DD PRESENT?\n         BO    MAIN0100              YES\n         MVC   PRTDATA(MSG04L),MSG04\n         BAL   R10,PRT0000           PRINT MESSAGE\n         OI    COMMFLAG,$ABORT+$ERROR SET FLAGS\nMAIN0100 DS    0H\n         TM    COMMDD,$MODDD         DISMOD DD PRESENT?\n         BO    MAIN0110              YES\n         MVC   PRTDATA(MSG05L),MSG05\n         BAL   R10,PRT0000           PRINT MESSAGE\n         OI    COMMFLAG,$ABORT+$ERROR SET FLAGS\nMAIN0110 DS    0H\n         TM    COMMDD,$PUNCHDD       DISPUNCH DD PRESENT?\n         BO    MAIN0120              YES\n         MVC   PRTDATA(MSG01L),MSG01 SET MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\nMAIN0120 DS    0H\n         TM    COMMFLAG,$ABORT       ABORT FLAG SET?\n         BO    EXIT0000              YES, EXIT\n* ------------------------------------------------------------------- *\n*         Call parameter reader                                       *\n* ------------------------------------------------------------------- *\n         L     R15,A02               PARAMETER READER ENTRY POINT\n         BALR  R14,R15               LINK TO PARAMETER CONVERTER\n         MVC   COMMDBSH,A02SUB       SET SUBHEADING\n         BAL   R10,DEBUG000          CALL DEBUG\n         TM    COMMFLAG,$ABORT       SERIOUS ERROR?\n         BNO   MAIN0130              NO\n         MVC   PRTDATA(MSG06L),MSG06 SET MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         B     EXIT0000              AND EXIT\n* ------------------------------------------------------------------- *\n*         Call object module reader                                   *\n* ------------------------------------------------------------------- *\nMAIN0130 DS    0H\n         GETMAIN RU,                 ACQUIRE STORAGE FOR I/O BUFFER    +\n               LV=$IOSIZE,           .. SIZE                           +\n               LOC=BELOW             .. 24-BIT AREA\n         ST    R1,COMMIO             SET ADDRESS IN COMM AREA\n         ITRACE ID=CALLA03           TRACE LINK TO MODULE 03\n         L     R15,A03               MODULE READER ENTRY POINT\n         BALR  R14,R15               LINK TO MODULE READER\n         TM    COMMFLAG,$ABORT       SERIOUS ERROR?\n         BNO   MAIN0140              NO\n         MVC   PRTDATA(MSG07L),MSG07 SET MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         B     EXIT0000              AND EXIT\n* ------------------------------------------------------------------- *\n*         Call object text printer                                    *\n* ------------------------------------------------------------------- *\nMAIN0140 DS    0H\n         L     R15,A06               MODULE TEXT PRINTER ENTRY POINT\n         BALR  R14,R15               LINK TO TEXT PRINTER\n         MVC   COMMDBSH,A06SUB       SET SUBHEADING\n         BAL   R10,DEBUG000          CALL DEBUG\n         TM    COMMFLAG,$ABORT       SERIOUS ERROR?\n         BNO   MAIN0150              NO\n         MVC   PRTDATA(MSG08L),MSG08 SET MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         B     EXIT0000              AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*         Call the assembler interface to assemble dsects and build   *\n*         the dsect/dsect label chains.                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0150 DS    0H\n         L     R15,A07               DSECT INTERPRETER ENTRY POINT\n         BALR  R14,R15               LINK TO DSECT INTERPRETER\n         MVC   COMMDBSH,A07SUB       SET SUBHEADING\n         BAL   R10,DEBUG000          CALL DEBUG\n         TM    COMMFLAG,$ABORT       SERIOUS ERROR?\n         BNO   MAIN0160              NO\n         MVC   PRTDATA(MSG09L),MSG09 SET MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         B     EXIT0000              AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*         Call internal label and reference table generator.          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0160 DS    0H\n         ITRACE ID=CALL08            CALLING LABEL TABLE GENERATOR\n         L     R15,A08               LABEL GENERATOR ENTRY POINT\n         BALR  R14,R15               LINK TO LABEL GENERATOR\n         MVC   COMMDBSH,A08SUB       SET SUBHEADING\n         BAL   R10,DEBUG000          CALL DEBUG\n         TM    COMMFLAG,$ERROR       ANY ERRORS?\n         BNO   MAIN0170              NO\n         MVC   PRTDATA(MSG10L),MSG10\n         BAL   R10,PRT0000           PRINT MESSAGE\n         B     EXIT0000              AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0170 DS    0H\n         ITRACE ID=CALL09            CALLING SOURCE GENERATOR\n         L     R15,A09               SOURCE GENERATOR ENTRY POINT\n         BALR  R14,R15               LINK TO SOURCE GENERATOR\n         TM    COMMFLAG,$ERROR       ANY ERRORS?\n         BO    MAIN0180              YES\n         ITRACE ID=SUCCESS\n         MVC   PRTDATA(MSG03L),MSG03 SET FINAL MESSAGE\n         BAL   R10,PRT0000           PRINT FINAL MESSAGE\n         B     EXIT0000              AND EXIT\nMAIN0180 DS    0H\n         MVC   PRTDATA(MSG11L),MSG11\n         BAL   R10,PRT0000           PRINT MESSAGE\n         B     EXIT0000              AND EXIT\n* ------------------------------------------------------------------- *\n*        Link to DEBUG module                                         *\n* ------------------------------------------------------------------- *\nDEBUG000 DS    0H\n         MVI   DBUGCMD,$DBUG         NORMAL DEBUG\n         LA    R1,DBUGBLOK           PARAMETER BLOCK ADDRESS\n         L     R15,ADB               DEBUG MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO DEBUG MODULE\n         BR    R10                   RETURN\nPRT0000  DS    0H\n         MVI   PRTCMD,$PRTPRT        SET COMMAND\n         LA    R1,PRTBLOK            SET PARAMETER BLOCK ADDRESS\n         L     R15,APR               PRINT MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO PRINT MODULE\n         BR    R10                   RETURN\nEXIT0000 DS    0H\n         TM    COMMFLAG,$ABEND       ABEND REQUESTED?\n         BNO   EXIT0010              NO\n         ITRACE ID=ABEND\n         MVC   PRTDATA(MSG02L),MSG02 SET MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         ABEND ABEND001,DUMP,,USER   GIVE 'EM WHAT THEY ASKED FOR\nEXIT0010 DS    0H\n         ICM   R1,15,COMMIO          I/O BUFFER ADDRESS\n         BZ    EXIT0020              NO BUFFER\n         ITRACE ID=FREEIO,           FREEING I/O STORAGE               +\n               RDATA1=R1             .. I/O AREA'S ADDRESS\n         FREEMAIN RU,A=(1),LV=$IOSIZE FREE I/O BUFFER\nEXIT0020 DS    0H\n         ICM   R1,15,COMMESD         FIRST ESD ENTRY\n         USING ESDDATA,R1            DEFINE BASE\n         BZ    EXIT0040              NO ESD ENTRIES\nEXIT0030 DS    0H\n         L     R2,ESDNEXT            NEXT ENTRY\n         ITRACE ID=FREEESD,          FREEING ESD BLOCK                 +\n               RDATA1=R1             .. BLOCK'S ADDRESS\n         FREEMAIN RU,A=(R1),LV=ESDDATAL\n         LTR   R1,R2                 COPY NEXT BLOCK'S ADDRESS\n         BNZ   EXIT0030              LOOP\nEXIT0040 DS    0H\n         ICM   R1,15,COMMTXT         TEXT'S STORAGE ADRESS\n         BZ    EXIT0050              NOT ACQUIRED\n         L     R2,COMMCSLN           STORAGE SIZE\n         LA    R2,32(R2)             PLUS FUDGE FACTOR (SEE DISASM04)\n         ITRACE ID=FREETEXT,         FREEING TEXT'S STORAGE            +\n               RDATA1=R1,            .. TEXT'S ADDRESS                 +\n               RDATA2=R2             .. TEXT'S LENGTH\n         FREEMAIN RU,A=(R1),LV=(R2)  FREE TEXT'S STORAGE\nEXIT0050 DS    0H\n         ICM   R1,15,COMMUSNG        FIRST USING BLOCK\n         USING USNGDSCT,R1           DEFINE BASE\n         BZ    EXIT0070              NO BLOCK'S TO FREE\nEXIT0060 DS    0H\n         L     R2,USNGNEXT           NEXT BLOCK ON CHAIN\n         ITRACE ID=FREEUSNG,         FREEING USING BLOCK'S STORAGE     +\n               RDATA1=R1             .. BLOCK'S ADDRESS\n         FREEMAIN RU,A=(1),LV=USNGL  FREE THE BLOCK\n         LTR   R1,R2                 COPY ADDRESS\n         BNZ   EXIT0060              FREE ALL BLOCKS\nEXIT0070 DS    0H\n         ICM   R1,15,COMMRLD         FIRST RLD BLOCK\n         USING RLDDATA,R1            DEFINE BASE\n         BZ    EXIT0100              NO RLD BLOCK'S TO FREE\nEXIT0090 DS    0H\n         L     R2,RLDNEXT            NEXT BLOCK'S ADDRESS\n         ITRACE ID=FREERLD,          FREEING RLD DATA                  +\n               RDATA1=R1             .. BLOCK'S ADDRESS\n         FREEMAIN RU,A=(1),LV=RLDDATAL\n         LTR   R1,R2                 COPY NEXT BLOCK'S ADDRESS\n         BNZ   EXIT0090              LOOP\nEXIT0100 DS    0H\n         ICM   R1,15,COMMBASE        FIRST BASE BLOCK\n         USING BASEDSCT,R1           DEFINE BASE\n         BZ    EXIT0120              NO BASE BLOCK'S TO FREE\nEXIT0110 DS    0H\n         L     R2,BASENEXT           NEXT BLOCK'S ADDRESS\n         ITRACE ID=FREEBASE,         FREEING BASE BLOCK                +\n               RDATA1=R1             .. BLOCK'S ADDRESS\n         FREEMAIN RU,A=(1),LV=BASEL  FREE BASE BLOCK STORAGE\n         LTR   R1,R2                 COPY NEXT BLOCK'S ADDRESS\n         BNZ   EXIT0110              LOOP\nEXIT0120 DS    0H\n         ICM   R1,15,COMMDATA        FIRST DATA BLOCK\n         USING DATADSCT,R1           DEFINE BASE\n         BZ    EXIT0140              NO DATA BLOCK'S TO FREE\nEXIT0130 DS    0H\n         L     R2,DATANEXT           NEXT BLOCK'S ADDRESS\n         ITRACE ID=FREEDATA,         FREEING DATA BLOCK                +\n               RDATA1=R1             .. BLOCK'S ADDRESS\n         FREEMAIN RU,A=(1),LV=DATAL  FREE DATA BLOCK STORAGE\n         LTR   R1,R2                 COPY NEXT BLOCK'S ADDRESS\n         BNZ   EXIT0130              LOOP\nEXIT0140 DS    0H\n         ICM   R3,15,COMMDSCT        FIRST DSECT BLOCK\n         USING DSCTDSCT,R3           DEFINE BASE\n         BZ    EXIT0200              NO DSECT BLOCK'S TO FREE\nEXIT0150 DS    0H\n         ICM   R4,15,DSCTLBA         FIRST LABEL IN THIS DSECT\n         USING LABLDSCT,R4           DEFINE BASE\n         BZ    EXIT0190              NO LABEL BLOCKS TO FREE\nEXIT0160 DS    0H\n         ICM   R1,15,LABLEQU         FIRST EQUATE BLOCK\n         BZ    EXIT0180              NO EQUATE BLOCKS\n         USING EQUDATA,R1            DEFINE BASE\nEXIT0170 DS    0H\n         L     R2,EQUNEXT            NEXT EQUATE BLOCK'S ADDRESS\n         ITRACE ID=FREEEQU,          FREEING AN EQU BLOCK              +\n               DATA1=EQULABEL,       .. EQUATE NAME                    +\n               RDATA2=R1             .. EQU BLOCK ADDRESS\n         FREEMAIN RU,A=(1),LV=EQUL   FREE EQUATE BLOCK\n         LTR   R1,R2                 COPY NEXT BLOCK'S ADDRESS\n         BNZ   EXIT0170              LOOP\nEXIT0180 DS    0H\n         L     R2,LABLNEXT           NEXT LABEL BLOCK'S ADDRESS\n         ITRACE ID=FREELABL,         FREEING A LABEL BLOCK             +\n               DATA1=LABLNAME,       .. LABEL NAME                     +\n               RDATA2=R4             .. BLOCK'S ADDRESS\n         FREEMAIN RU,A=(4),LV=LABLL  FREE LABEL BLOCK STORAGE\n         LTR   R4,R2                 COPY NEXT BLOCK'S ADDRESS\n         BNZ   EXIT0160              LOOP\nEXIT0190 DS    0H\n         L     R2,DSCTNEXT           NEXT BLOCK'S ADDRESS\n         ITRACE ID=FREEDSCT,         FREEING DSECT BLOCK               +\n               DATA1=DSCTNAME,       .. DSECT NAME                     +\n               RDATA2=R3             .. BLOCK'S ADDRESS\n         FREEMAIN RU,A=(3),LV=DSCTL  FREE DSECT BLOCK STORAGE\n         LTR   R3,R2                 COPY NEXT BLOCK'S ADDRESS\n         BNZ   EXIT0150              LOOP\nEXIT0200 DS    0H\n         ICM   R4,15,COMMLABL        FIRST CSECT LABEL\n         BZ    EXIT0220              NO CSECT LABELS\nEXIT0210 DS    0H\n         L     R2,LABLNEXT           NEXT LABEL BLOCK'S ADDRESS\n         ITRACE ID=FREELABL,         FREEING A LABEL BLOCK             +\n               DATA1=LABLNAME,       .. LABEL NAME                     +\n               DATA2=R4              .. BLOCK'S ADDRESS\n         FREEMAIN RU,A=(4),LV=LABLL  FREE LABEL BLOCK STORAGE\n         LTR   R4,R2                 COPY NEXT BLOCK'S ADDRESS\n         BNZ   EXIT0210              LOOP\nEXIT0220 DS    0H\n         ICM   R1,15,COMMREF         FIRST REFERENCE BLOCK\n         USING REFDSCT,R1            DEFINE BASE\n         BZ    EXIT0240              NO MORE BLOCK'S TO FREE\nEXIT0230 DS    0H\n         L     R2,REFNEXT            NEXT BLOCK'S ADDRESS\n         ITRACE ID=FREEREF,          FREEING REFERENCE BLOCK           +\n               RDATA1=R1             .. BLOCK'S ADDRESS\n         FREEMAIN RU,A=(1),LV=REFL   FREE REFERENCE BLOCK STORAGE\n         LTR   R1,R2                 COPY NEXT BLOCK'S ADDRESS\n         BNZ   EXIT0230              LOOP\nEXIT0240 DS    0H\n         ICM   R1,15,COMMDISP        DISPLACEMENT TABLE ACQUIRED?\n         BZ    EXIT0250              NO\n         L     R2,COMMCSLN           CSECT SIZE\n         LA    R2,4(R2)              PLUS 4\n         ITRACE ID=FREEDISP,         FREEMAINING DISPLACEMENT TABLE    +\n               RDATA1=R1,            .. STORAGE ADDRESS                +\n               RDATA2=R2             .. STORAGE SIZE\n         FREEMAIN RU,A=(1),LV=(2)\nEXIT0250 DS    0H\n         ITRACE ID=FREETRCE\n         ICM   R1,15,TRADDR          TRACE TABLE'S ADDRESS\n         BZ    EXIT0260              NOT ACQUIRED\n         L     R2,TRSIZE             TRACE TABLE'S SIZE\n         LA    R2,32(R2)             FOR BOUNDARY ROUNDING\n         FREEMAIN RU,A=(R1),LV=(R2)  FREEMAIN TRACE TABLE\nEXIT0260 DS    0H\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nSAVE01   DC    18F'0'                REGISTER SAVE AREA\nV00      DC    V(DISASM00)           COMMON MODULE'S ADDRESS\nINDD     DC    CL8'DISIN'\nPRTDD    DC    CL8'DISPRINT'\nLIBDD    DC    CL8'DISMOD'\nPUNCHDD  DC    CL8'DISPUNCH'\nDEBUGDD  DC    CL8'DISDEBUG'\nDSECTDD  DC    CL8'DISDSECT'\nA02SUB   DC    CL35'Internal data after module DISASM02'\nA06SUB   DC    CL35'Internal data after module DISASM06'\nA07SUB   DC    CL35'Internal data after module DISASM07'\nA08SUB   DC    CL35'Internal data after module DISASM08'\nMSG01    DC    C'DISASM0101I No DISPUNCH DD present, no source will be +\n               generated'\nMSG01L   EQU   *-MSG01\nMSG02    DC    C'DISASM0102I ABEND requested, program abnormally termin+\n               ating'\nMSG02L   EQU   *-MSG02\nMSG03    DC    C'DISASM0103I ******* Disassembly complete ******'\nMSG03L   EQU   *-MSG03\nMSG04    DC    C'DISASM0104E DISIN DD statement missing, processing wil+\n               l be aborted'\nMSG04L   EQU   *-MSG04\nMSG05    DC    C'DISASM0105E DISMOD DD statement missing, processing wi+\n               ll be aborted'\nMSG05L   EQU   *-MSG05\nMSG06    DC    C'DISASM0106E Error(s) in control parameters, execution +\n               aborted'\nMSG06L   EQU   *-MSG06\nMSG07    DC    C'DISASM0107E Error(S) in loading object module, executi+\n               on aborted'\nMSG07L   EQU   *-MSG07\nMSG08    DC    C'DISASM0108E Error(s) in printing text, execution abort+\n               ed'\nMSG08L   EQU   *-MSG08\nMSG09    DC    C'DISASM0109E Error(s) in assembling DSECTS, execution a+\n               borted'\nMSG09L   EQU   *-MSG09\nMSG10    DC    C'DISASM0110E Error(s) in generating label table, execut+\n               ion aborted'\nMSG10L   EQU   *-MSG10\nMSG11    DC    C'DISASM0111E Error(s) in generating source, execution a+\n               borted'\nMSG11L   EQU   *-MSG11\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRTBLOK  PRTBLOK  TYPE=CSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              DEBUG MODULE INTERFACE BLOCK                           *\n*                                                                     *\n*---------------------------------------------------------------------*\nDBUGBLOK DBUGBLOK TYPE=CSECT\n         SPACE 2\n         LTORG\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nDISASM00 DISASM00 TYPE=DSECT\n         COPY  DISASMDA\n*---------------------------------------------------------------------*\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY REGEQU\n         IHAPSA LIST=NO\n         IKJTCB LIST=NO\n         IEFTIOT1\n         END  DISASM01\n./ ADD NAME=DISASM02\n         TITLE 'DISASM02 - PARAMETER READER/INTERPRETER'\n         MACRO\n         REG &REG,&VALUE\n         DC     CL3'&REG'            REGISTER NAME\n         DC     AL1(&VALUE)          VALUE IN INSTRUCTIONS\n         MEND\n         COPY  DISASMGB              COPY GLOBAL DEFINITIONS\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISASM02                                             *\n*                                                                    *\n*  Function:                                                         *\n*   Read the parameter statements.  All parameter statements         *\n*   including comment statements are copied to DISPRINT.  See the    *\n*   DISASM documentation for a list of the parameter statements      *\n*   and their syntax.                                                *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISASM02 CSECT\nDISASM02 AMODE 31\nDISASM02 RMODE 24\n         USING DISASM02,R12,R10\n         USING DISASM00,R11\n         USING REGDSCT,R4            DEFINE BASE\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               SET BASE REG\n         LA    R10,2048(R12)         SET BASE 2..\n         LA    R10,2048(R10)         .. 4K FROM 1ST\n         B     PARM0000              SKIP EYECATCHER\n         DC    CL8'DISASM02'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nPARM0000 DS    0H\n         LA    R1,SAVE02             OUR SAVE AREA ADDRESS\n         ST    R13,4(R1)             CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         OPEN  (DISIN,INPUT)         OPEN DISIN\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         MVC   COMMSUBH(SUBHEADL),SUBHEAD\n         LA    R1,SUBHEADL           SUBHEADING LENGTH\n         STH   R1,COMMSUBL           SET LENGTH\nPARM0010 DS    0H\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         GET   DISIN,CTLSTMT         READ A CONTROL STATEMENT\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         MVC   PRTDATA(CTLSTMTL),CTLSTMT\n         BAL   R9,PRT0000            PRINT CONTROL STATEMENT\n         CLI   CTLSTMT,C'*'          IS IT A COMMENT?\n         BE    PARM0010              YES\n         LA    R1,CNTLTBLE           CONTROL TABLE ADDRESS\nPARM0020 DS    0H\n         CLI   0(R1),X'FF'           END OF TABLE?\n         BE    PARM0040              YES\n         CLC   CTLTYPE,0(R1)         DEFINED CONTROL STATEMENT?\n         BE    PARM0030              YES\n         LA    R1,13(R1)             NEXT KEYWORD/ADDRESS\n         B     PARM0020              LOOP\nPARM0030 DS    0H\n         ICM   R15,15,9(R1)          INSERT ADDRESS\n         BR    R15                   BRANCH TO PROPER ROUTINE\nPARM0040 DS    0H\n         MVC   PRTDATA(EMSG03L),EMSG03\n         BAL   R9,PRT0000            PRINT MESSAGE\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         B     PARM0010              READ NEXT STATEMENT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Set ABEND flag                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nABEND000 DS    0H\n         ITRACE ID=ABEND             ABEND AT EXIT\n         OI    COMMFLAG,$ABEND       SET ABEND FLAG\n         B     PARM0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Process assembler input                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nASM0000  DS    0H\n         ITRACE ID=ASMSTART\nASM0010  DS    0H\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         GET   DISIN,CTLSTMT         READ A CONTROL STATEMENT\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         MVC   PRTDATA(CTLSTMTL),CTLSTMT\n         BAL   R9,PRT0000            PRINT CONTROL STATEMENT\n         CLC   CTLTYPE,CNTLASME      ASSEMBLER INPUT (END)?\n         BE    ASM0030               YES\n         TM    PGMFLAG,$ASMOPEN      ASSEMBLER DCB OPEN?\n         BO    ASM0020               YES\n         OI    PGMFLAG,$ASMOPEN      INDICATE DCB IS OPEN\n         OI    COMMFLAG,$ASMIN       INDICATE ASSEMBLER INPUT PRESENT\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         OPEN  (SYSIN,OUTPUT)        OPEN SYSIN DCB\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\nASM0020  DS    0H\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         PUT   SYSIN,CTLSTMT         COPY CONTROL STATEMENT TO SYSIN\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         B     ASM0010               LOOP UNTIL EOF OR 'ASM END'\nASM0030  DS    0H\n         ITRACE ID=ASMEND\n         B     PARM0010              READ NEXT CONTROL STATEMENT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Process BASE statements                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nBASE0000 DS    0H\n         ITRACE ID=BASE\n         LA    R1,CTL10              REGISTER NAME'S ADDRESS\n         BAL   R9,REG0000            FIND REGISTER TABLE ENTRY\n* ------------------------------------------------------------------- *\n*       R4 POINTS TO REGISTER TABLE ENTRY                             *\n* ------------------------------------------------------------------- *\n         CLC   CTL20(20),COMMBLKS    START AND END ALL BLANK?\n         BE    BASE0020              YES\n         LA    R1,8                  MAX DIGITS\n         LA    R2,CTL20              FIRST CHARACTER OF DISPLACEMENT\n         BAL   R9,HEX0000            CONVERT DISPLACEMENT TO HEX\n         MVC   SAVEBEGN,DISPOUT      SAVE BEGINNING DISPLACEMENT\n         CLC   CTL30,COMMBLKS        ENDING DISPLACEMENT BLANK?\n         BE    BASE0010              YES\n         LA    R1,8                  MAX DIGITS\n         LA    R2,CTL30              FIRST CHARACTER OF DISPLACEMENT\n         BAL   R9,HEX0000            CONVERT DISPLACEMENT TO HEX\n         MVC   SAVEEND,DISPOUT       SAVE ENDING DISPLACEMENT\n         CLC   SAVEBEGN,SAVEEND      BEGIN LARGER THAN END?\n         BH    BASE0060              YES.. INVALID\n         B     BASE0030\nBASE0010 DS    0H\n         ICM   R1,15,SAVEBEGN        BEGINNING POINT\n         AH    R1,H4096              PLUS 4K\n         STCM  R1,15,SAVEEND         SAVE ENDING POINT\n         B     BASE0030\nBASE0020 DS    0H\n         XC    SAVEBEGN,SAVEBEGN     SET BEGIN TO ZERO\n         MVC   SAVEEND,XFFFF         SET END TO HEX FF'S\nBASE0030 DS    0H\n         LA    R1,8                  MAX DIGITS\n         LA    R2,CTL40              FIRST CHARACTER OF DISPLACEMENT\n         BAL   R9,HEX0000            CONVERT DISPLACEMENT TO HEX\n         LA    R5,COMMBASE           SET PREVIOUS FORWARD POINTER\n         ICM   R3,15,COMMBASE        FIRST BASE ENTRY\n         USING BASEDSCT,R3           DEFINE BASE\n         BZ    BASE0050              NO BLOCK'S ON CHAIN\nBASE0040 DS    0H\n         CLC   BASEBEGN,DISPOUT      INSERT IT HERE?\n         BL    BASE0050              YES\n         LA    R5,BASENEXT           FORWARD POINTER'S ADDRESS\n         ICM   R3,15,BASENEXT        NEXT BASE BLOCK\n         BNZ   BASE0040              LOOP\nBASE0050 DS    0H\n         GETMAIN RU,                 ACQUIRE STORAGE FOR NEW BASE BLOCK+\n               LV=BASEL,             .. SIZE                           +\n               LOC=ANY               .. ANY AREA\n         ITRACE ID=NEWBASE,          NEW BLOCK ACQUIRED                +\n               RDATA1=R1             .. CAPTURE STORAGE ADDRESS\n         ST    R1,0(R5)              CHAIN PREVIOUS BLOCK TO NEW BLOCK\n         ST    R3,BASENEXT-BASEDSCT(R1)   CHAIN NEXT BLOCK TO NEW BLOCK\n         LR    R3,R1                 SET BASE\n         MVC   BASEEYE,CNTLBASE      SET BLOCK IDENTIFIER\n         MVC   BASEBEGN,SAVEBEGN     SET STARTING DISPLACEMENT\n         MVC   BASEEND,SAVEEND       SET ENDING DISPLACEMENT\n         MVC   BASEREG,REGVALUE      SET BASE REGISTER\n         MVC   BASEDISP,DISPOUT      SET DISPLACEMENT BASE REFERS TO\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nBASE0060 DS    0H\n         MVC   PRTDATA(EMSG23L),EMSG23\n         OI    COMMFLAG,$ERROR+$ABORT\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Process CSECT statements                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCSCT0000 DS    0H\n         ITRACE ID=CSCTNAME,         CSECT NAME                        +\n               DATA1=CTLDATA\n         MVC   COMMCSNM,CTLDATA      SET CSECT NAME\n         B     PARM0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Process DATA statements                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDATA0000 DS    0H\n         ITRACE ID=DATA\n         LA    R1,8                  MAX DIGITS\n         LA    R2,CTL10              FIRST CHARACTER OF DISPLACEMENT\n         BAL   R9,HEX0000            CONVERT DISPLACEMENT TO HEX\n         MVC   SAVEBEGN,DISPOUT      SAVE BEGINNING DISPLACEMENT\n         LA    R1,8                  MAX DIGITS\n         LA    R2,CTL20              FIRST CHARACTER OF END DISP\n         BAL   R9,HEX0000            CONVERT END DISP TO HEX\n         LA    R2,COMMDATA           DATA BLOCK ANCHOR\n         ICM   R3,15,COMMDATA        FIRST DATA BLOCK\n         USING DATADSCT,R3           DEFINE BASE\n         BZ    DATA0030              NO DATA BLOCKS\nDATA0010 DS    0H\n         CLC   DATAEND,SAVEBEGN      BELOW THIS AREA?\n         BL    DATA0020              YES\n         CLC   DATABEGN,DISPOUT      ABOVE THIS AREA?\n         BH    DATA0030              YES\n         B     DATA0040              OVERLAPS PREVIOUSLY DEFINED AREA\nDATA0020 DS    0H\n         LA    R2,DATANEXT           FORWARD POINTER ADDRESS\n         ICM   R3,15,DATANEXT        NEXT DATA BLOCK\n         BNZ   DATA0010              LOOP\nDATA0030 DS    0H\n         GETMAIN RU,                 ACQUIRE STORAGE FOR NEW DATA BLOCK+\n               LV=DATAL,             .. SIZE                           +\n               LOC=ANY               .. IN ANY AREA\n         ITRACE ID=NEWDATA,          NEW DATA BLOCK ADQUIRED           +\n               RDATA1=R1             .. NEW BLOCK'S ADDRESS\n         ST    R1,0(R2)              PREVIOUS BLOCK TO NEW BLOCK\n         ST    R3,DATANEXT-DATADSCT(R1)   CHAIN NEXT BLOCK TO NEW BLOCK\n         LR    R3,R1                 SET BASE REG\n         MVC   DATAEYE,CNTLDATA      SET BLOCK IDENTIFIER\n         MVC   DATABEGN,SAVEBEGN     SET BEGINNING DISPLACEMENT\n         MVC   DATAEND,DISPOUT       SET ENDING DISPLACEMENT\n         ICM   R0,15,DATABEGN        BEGINNING DISPLACEMENT\n         ICM   R1,15,DATAEND         ENDING DISPLACEMENT\n         SR    R1,R0                 LENGTH - 1\n         LA    R1,1(R1)              TOTAL LENGTH\n         STCM  R1,15,DATALEN         SET LENGTH\n         MVI   DATATYPE,$DATAUSR     USER DEFINED DATA AREA\n         MVC   DATANAME,COMMBLKS     INITIALIZE NAME\n         XC    DATALBA,DATALBA       INITIALIZE DATA BLOCK'S ADDRESS\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nDATA0040 DS    0H\n         ITRACE ID=DATAOVLP          DATA AREA OVERLAP\n         UNPK  EMSG22A(5),DATABEGN(3)\n         MVZ   EMSG22A,COMM0F0F      TURN OFF ZONES\n         TR    EMSG22A,COMMHXCH      TRANSLATE TO PRINTABLE\n         MVI   EMSG22A+4,C' '        RESTORE BLANK\n         UNPK  EMSG22B(5),DATAEND(3) UNPACK ENDING DISPLACEMENT\n         MVZ   EMSG22B,COMM0F0F      TURN OFF ZONES\n         TR    EMSG22B,COMMHXCH      TRANSLATE TO PRINTABLE\n         MVI   EMSG22B+4,C' '        RESTORE BLANK\n         MVC   PRTDATA(EMSG22L),EMSG22\n         OI    COMMFLAG,$ERROR+$ABORT\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          LABEL or PREFIX statements                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLABL0000 DS    0H\n         ITRACE ID=LABEL\n         CLC   COMMPFX,COMMBLKS      PREFIX STILL BLANK?\n         BNE   LABL0030              NO.. DUPLICATED\n         CLI   CTL10,C' '            PREFIX BLANK?\n         BE    LABL0040              YES.. INVALID\n         CLC   CTL10(4),CNTLDATA     PREFIX 'DATA'?\n         BE    LABL0050              YES.. NOT VALID\n         LA    R1,CTL10              FIRST CHARACTER OF PREFIX\n         LA    R2,4                  MAXIMUM LENGTH\n         SR    R3,R3                 INITIALIZE FOR LENGTH\nLABL0010 DS    0H\n         CLI   0(R1),C' '            BLANK?\n         BE    LABL0020              YES\n         LA    R1,1(R1)              NEXT\n         LA    R3,1(R3)              ADD 1 TO LENGTH\n         BCT   R2,LABL0010           LOOP\nLABL0020 DS    0H\n         CLC   COMMBLKS(4),0(R1)     A FEW BLANKS?\n         BNE   LABL0060              NO\n         MVC   COMMPFX,CTL10         SET PREFIX\n         STH   R3,COMMPFXL           SET PREFIX LENGTH\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nLABL0030 DS    0H\n         OI    COMMFLAG,$ERROR+$ABORT\n         MVC   PRTDATA(EMSG19L),EMSG19\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nLABL0040 DS    0H\n         OI    COMMFLAG,$ERROR+$ABORT\n         MVC   PRTDATA(EMSG11L),EMSG11\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nLABL0050 DS    0H\n         OI    COMMFLAG,$ERROR+$ABORT\n         MVC   PRTDATA(EMSG15L),EMSG15\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nLABL0060 DS    0H\n         OI    COMMFLAG,$ERROR+$ABORT\n         MVC   PRTDATA(EMSG12L),EMSG12\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Line count statements                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLINE0000 DS    0H\n         ITRACE ID=LINES\n         MVC   LINEIN,LINEIN-1       INITIALIZE WITH ZEROS\n         LA    R1,CTL10              FIRST DIGIT\n         LA    R2,3                  MAX DIGITS\nLINE0010 DS    0H\n         CLI   0(R1),C' '            BLANK\n         BE    LINE0020              YES\n         CLI   0(R1),C'0'            INVALID DIGIT?\n         BL    LINE0030              YES\n         CLI   0(R1),C'9'            INVALID DIGIT?\n         BH    LINE0030              YES\n         MVC   LINEIN(L'LINEIN-1),LINEIN+1 SHIFT DIGITS LEFT 1\n         MVC   LINEIN+2(1),0(R1)     INSERT IN LOW ORDER POSITION\n         LA    R1,1(R1)              NEXT DIGIT\n         BCT   R2,LINE0010           LOOP\nLINE0020 DS    0H\n         CLC   0(6,R1),COMMBLKS      SEVERAL TRAILING BLANKS?\n         BNE   LINE0040              NO\n         PACK  LINEOUT,LINEIN        PACK LINE COUNT\n         CP    LINEOUT,PMIN          LESS THAN MINIMUM?\n         BL    LINE0050              YES\n         ZAP   COMMMAXL,LINEOUT      SET MAX LINE COUNT\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nLINE0030 DS    0H\n         MVC   PRTDATA(EMSG16L),EMSG16\n         OI    COMMFLAG,$ERROR+$ABORT\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010\nLINE0040 DS    0H\n         MVC   PRTDATA(EMSG17L),EMSG17\n         OI    COMMFLAG,$ERROR+$ABORT\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010\nLINE0050 DS    0H\n         MVC   PRTDATA(EMSG18L),EMSG18\n         OI    COMMFLAG,$ERROR+$ABORT\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Process MODULE Statements                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMOD0000  DS    0H\n         ITRACE ID=MODNAME,          MODULE NAME                       +\n               DATA1=CTLDATA\n         MVC   COMMMOD,CTLDATA       SET MODULE NAME\n         B     PARM0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Process NO FLOAT statements                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nNOB20000 DS    0H\n         ITRACE ID=NOB2              NO 'B2' INSTRUCTIONS\n         OI    COMMFLAG,$NOB2        SET 'NO B2 INSTRUCTIONS' FLAG\n         B     PARM0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Process NO FLOAT statements                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nNOFLOAT0 DS    0H\n         OI    COMMFLAG,$NOFLOAT     SET NO FLOATING POINT INSTR FLAG\n         B     PARM0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Process RLD WARN statements                                *\n*                                                                     *\n*   When a user define DATA area overlaps an RLD item, DISASM adjusts *\n*   the DATA block(s).  Normally DISASM does this without printing    *\n*   any messages.  If you want to know what \"adjustments\" DISASM      *\n*   may be making to your DATA areas, specify \"RLD WARN\" as a control *\n*   statement.                                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nRLD0000  DS    0H\n         OI    COMMFLG2,$RLDWARN     SET THE RLD WARN INDICATOR\n         B     PARM0010              CONTINUE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Set sequentially numbered labels flag                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSEQ0000  DS    0H\n         ITRACE ID=SEQLABEL\n         TM    COMMFLAG,$SEQLABL     ALREADY SET?\n         BO    SEQ0010               YES\n         OI    COMMFLAG,$SEQLABL     SET SEQUENTIALLY NUMBER LABEL FLAG\n         B     PARM0010\nSEQ0010  DS    0H\n         MVC   PRTDATA(WMSG02L),WMSG02\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Process USING statements                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nUSNG0000 DS    0H\n         ITRACE ID=USING             USING STATEMENT FOUND\n         LA    R3,COMMUSNG           CURRENT BLOCK IS ANCHOR\n         USING USNGDSCT,R3           DEFINE BASE\nUSNG0010 DS    0H\n         ICM   R1,15,USNGNEXT        NEXT BLOCK ON CHAIN\n         BZ    USNG0020              END OF CHAIN FOUND\n         LR    R3,R1                 COPY ADDRESS\n         B     USNG0010              KEEP FOLLOWING CHAIN\nUSNG0020 DS    0H\n         LA    R1,CTL30              REGISTER NAME'S ADDRESS\n         BAL   R9,REG0000            FIND REGISTER TABLE ENTRY\n* ------------------------------------------------------------------- *\n*       R3 POINTS TO LAST USING BLOCK OR ANCHOR                       *\n*       R4 POINTS TO REGISTER TABLE ENTRY                             *\n* ------------------------------------------------------------------- *\n         CLC   CTL40,COMMBLKS        STARTING DISPLACEMENT ALL BLANK?\n         BE    USNG0070              YES\n         CLC   CTL50,COMMBLKS        ENDING DISPLACEMENT ALL BLANK?\n         BE    USNG0050              YES.. NOT VALID\n         LA    R1,8                  MAXIMUM NUMBER OF DIGITS\n         LA    R2,CTL40              FIRST CHARACTER OF BEGIN DISP\n         BAL   R9,HEX0000            VERIFY/CONVERT BEGIN DISP\n         MVC   SAVEBEGN,DISPOUT      SAVE BEGINNING DISPLACEMENT\n         LA    R1,8                  MAXIMUM NUMBER OF DIGITS\n         LA    R2,CTL50              FIRST CHARACTER OF END DISP\n         BAL   R9,HEX0000            VERIFY/CONVERT END DISP\n         CLC   SAVEBEGN,DISPOUT      BEGIN LARGER THAN END?\n         BH    USNG0060              YES.. ERROR\nUSNG0030 DS    0H\n         GETMAIN RU,                 ACQUIRE STORAGE FOR USING ENTRY   +\n               LV=USNGL,             .. SIZE                           +\n               LOC=ANY               .. IN ANY AREA\n         ITRACE ID=NEWUSNG,                                            +\n               RDATA1=R1             .. TRACE NEW BLOCK'S ADDRESS\n         ST    R1,USNGNEXT           CHANGE TO PREVIOUS BLOCK\n         LR    R3,R1                 COPY BASE\n         MVC   USNGEYE,CNTLUSNG      SET BLOCK IDENTIFIER\n         XC    USNGNEXT,USNGNEXT     CLEAR FORWARD POINTER\n         MVI   USNGFLAG,0            SET ALL FLAGS OFF\n         MVC   USNGDSNM,CTL10        SET DSECT'S NAME\n         MVC   USNGLBNM,CTL20        SET LABEL WITHIN DSECT\n         XC    USNGDSA,USNGDSA       CLEAR DSECT BLOCK'S ADDRESS\n         XC    USNGLBA,USNGLBA       CLEAR LABEL BLOCK'S ADDRESS\n         XC    USNGDISP,USNGDISP     CLEAR LABEL DISP INTO DSECT\n         MVC   USNGBASE,REGVALUE     SET BASE VALUE\n         CLC   CTL40,COMMBLKS        STARTING DISPLACEMENT OMITTED?\n         BE    USNG0040              YES\n         MVC   USNGBEGN,SAVEBEGN     SET BEGINNING DISPLACEMENT\n         MVC   USNGEND,DISPOUT       SET ENDING DISPLACEMENT\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nUSNG0040 DS    0H\n         OI    USNGFLAG,$USNGND      NO DISPLACEMENTS\n         XC    USNGBEGN,USNGBEGN     CLEAR STARTING DISP\n         XC    USNGEND,USNGEND       CLEAR ENDING DISP\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nUSNG0050 DS    0H\n         MVC   PRTDATA(EMSG06L),EMSG06 SET MESSAGE\n         OI    COMMFLAG,$ERROR+$ABORT\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010\nUSNG0060 DS    0H\n         MVC   PRTDATA(EMSG07L),EMSG07 SET MESSAGE\n         OI    COMMFLAG,$ERROR+$ABORT\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010\nUSNG0070 DS    0H\n         CLC   CTL50,COMMBLKS        ENDING DISPLACEMENT BLANK?\n         BE    USNG0030              YES\n         MVC   PRTDATA(EMSG10L),EMSG10\n         OI    COMMFLAG,$ERROR+$ABORT\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Locate register table entry                                  *\n*                                                                     *\n*          R1  is register name's address                             *\n*          R9  is return address                                      *\n*                                                                     *\n*          At exit R4 will point to the register table entry.         *\n*                                                                     *\n*          If any error is found, control is passed to 'PARM0010'.    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nREG0000  DS    0H\n         ITRACE ID=CONVREG\n         CLI   0(R1),C' '            BLANK?\n         BE    REG0050               YES.. INVALID\n         CLC   3(7,R1),COMMBLKS      REFERENCE TOO LONG?\n         BNE   REG0060               YES.. INVALID\n         CLI   2(R1),C' '            3-CHARACTER NAME?\n         BNE   REG0010               YES\n         CLI   1(R1),C' '            2-CHARACTER NAME?\n         BNE   REG0020               YES\n         ITRACE ID=REG1\n         LA    R4,REGTBL1            1-CHARACTER NAME TABLE\n         SR    R2,R2                 SET LENGTH (1 BYTE)\n         B     REG0030               FIND TABLE ENTRY\nREG0010  DS    0H\n         ITRACE ID=REG3\n         LA    R4,REGTBL3            3-CHARACTER NAME TABLE\n         LA    R2,2                  SET LENGTH (3 BYTES)\n         B     REG0030               FIND TABLE ENTRY\nREG0020  DS    0H\n         ITRACE ID=REG2\n         LA    R4,REGTBL2            2-CHARACTER NAME TABLE\n         LA    R2,1                  SET LENGTH (2 BYTES)\nREG0030  DS    0H\n         CLI   0(R4),X'FF'           END OF TABLE?\n         BE    REG0040               YES.. INVALID\n         EX    R2,REGCLC             REGISTER NAME MATCH?\n         BER   R9                    YES\n         LA    R4,REGL(R4)           NEXT REGISTER ENTRY\n         B     REG0030               LOOP\nREG0040  DS    0H\n         ITRACE ID=BADREG\n         MVC   PRTDATA(EMSG05L),EMSG05 SET MESSAGE\n         OI    COMMFLAG,$ERROR+$ABORT\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010\nREG0050  DS    0H\n         ITRACE ID=REGBLANK\n         MVC   PRTDATA(EMSG13L),EMSG13 SET MESSAGE\n         OI    COMMFLAG,$ERROR+$ABORT\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010\nREG0060  DS    0H\n         ITRACE ID=REGLONG\n         MVC   PRTDATA(EMSG14L),EMSG14 SET MESSAGE\n         OI    COMMFLAG,$ERROR+$ABORT\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010\nREGCLC   CLC   REGNAME(0),0(R1)      TEST REGISTER NAME\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Convert character to hex                                   *\n*                                                                     *\n*          R1 should be the number of characters (up to 8)            *\n*          R2 should be the address of the first character            *\n*          R9 should be the return address                            *\n*                                                                     *\n*             At exit 'DISPOUT' will be the value in hex              *\n*                                                                     *\n*          If any error is found, control is passed to 'PARM0010'.    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nHEX0000  DS    0H\n         MVC   DISPIN,=C'00000000'   INITIALIZE DISP TO ZERO\nHEX0010  DS    0H\n         CLI   0(R2),C' '            END OF DISPLACEMENT?\n         BE    HEX0030               YES\n         CLI   0(R2),C'A'            TOO LOW FOR VALID HEX?\n         BL    HEX0040               YES\n         CLI   0(R2),C'F'            WITHIN A-F?\n         BNH   HEX0020               YES, VALID\n         CLI   0(R2),C'0'            TOO LOW FOR NUMERIC?\n         BL    HEX0040               YES\n         CLI   0(R2),C'9'            TOO HIGH FOR VALID NUMERIC?\n         BH    HEX0040               YES\nHEX0020  DS    0H\n         MVC   DISPIN(L'DISPIN-1),DISPIN+1    SHIFT LEFT 1 DIGIT\n         MVC   DISPIN+L'DISPIN-1(1),0(R2)     SET LOW ORDER DIGIT\n         LA    R2,1(R2)              NEXT DISP CHARACTER\n         BCT   R1,HEX0010            LOOP\n         CLI   0(R2),C' '            BLANK?\n         BNE   HEX0050               NO.. TOO MANY DIGITS\nHEX0030  DS    0H\n         NC    DISPIN,COMM1F1F       PREPARE FOR TRANSLATE\n         TR    DISPIN,COMMCHHX       TRANSLATE FOR PACKING\n         PACK  DISPOUT(5),DISPIN(9)  PACK\n         BR    R9                    GET OUTTA HERE\nHEX0040  DS    0H\n         MVC   PRTDATA(EMSG08L),EMSG08\n         OI    COMMFLAG,$ERROR+$ABORT\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010\nHEX0050  DS    0H\n         MVC   PRTDATA(EMSG09L),EMSG09\n         OI    COMMFLAG,$ERROR+$ABORT\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010\nPRT0000  DS    0H\n         TM    PGMFLAG,$SUBH         HAS SUB-HEADING BEEN PRINTED?\n         BO    PRT0010               YES\n         OI    PGMFLAG,$SUBH         SET FLAG\n         MVI   PRTCMD,$PRTSUBH       SET COMMAND\n         LA    R1,PRTBLOK            SET PARAMETER BLOCK ADDRESS\n         L     R15,APR               PRINT MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO PRINT MODULE\nPRT0010  DS    0H\n         MVI   PRTCMD,$PRTPRT        SET COMMAND\n         LA    R1,PRTBLOK            SET PARAMETER BLOCK ADDRESS\n         L     R15,APR               PRINT MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO PRINT MODULE\n         BR    R9                    RETURN\nEXIT0000 DS    0H\n         BAL   R14,AM31              FORCE 31-BIT MODE\n         ITRACE ID=PARMEOF           END OF FILE\n         TM    PGMFLAG,$ASMOPEN      ASSEMBLER INPUT OPEN?\n         BNO   EXIT0010              NO\n         ITRACE ID=CLOSEASM          CLOSING SYSIN DCB\n         NI    PGMFLAG,255-$ASMOPEN  INDICATE DCB IS CLOSED\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         CLOSE SYSIN\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\nEXIT0010 DS    0H\n         OC    COMMBASE,COMMBASE     BASE REGISTER(S) DEFINED?\n         BZ    EXIT0020              NO\n         CLC   COMMPFX,COMMBLKS      PREFIX DEFINED?\n         BNE   EXIT0030              YES\n         OI    COMMFLAG,$ERROR+$ABORT\n         MVC   PRTDATA(EMSG20L),EMSG20\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     EXIT0030              EXIT\nEXIT0020 DS    0H\n         CLC   COMMPFX,COMMBLKS      PREFIX DEFINED?\n         BE    EXIT0030              NO\n         OI    COMMFLAG,$ERROR+$ABORT\n         MVC   PRTDATA(EMSG21L),EMSG21\n         BAL   R9,PRT0000            PRINT MESSAGE\nEXIT0030 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\nAM24     DS    0H\n         LA    R14,0(R14)         CLEAR HIGH BIT(S)\n         BSM   R0,R14             RETURN IN 24-BIT MODE\nAM31     DS    0H\n         LA    R14,0(R14)         CLEAR HIGH BIT(S)\n         O     R14,X80            SET 31-BIT MODE\n         BSM   R0,R14             RETURN IN 31-BIT MODE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nSAVE02   DC    18F'0'                REGISTER SAVE AREA\nX80      DC    A(X'80000000')\nXFFFF    DC    X'FFFFFFFF'\nH4096    DC    H'4096'               4K IN DECIMAL\nPMIN     DC    PL3'&MINL'            MINIMUM LINE COUNT ALLOWED\nPGMFLAG  DC    X'00'\n$SUBH    EQU   X'80'                 SUBHEADING PRINTED\n$ASMOPEN EQU   X'40'                 ASSEMBLER INPUT DCB OPEN\n$BLANK   EQU   X'20'\n         SPACE 1\nDISPIN   DC    CL8' '\n         DC    X'00'                 PAD FOR PACKING\nDISPOUT  DC    XL4'00000000'\n         DC    X'00'                 PAD FOR PACKING\n         SPACE 1\n         DC    C'0'\nLINEIN   DC    CL3'000'\nLINEOUT  DC    PL3'0'\n         SPACE 1\nSAVEBEGN DS    XL4                   SAVED BEGINNING DISPLACEMENT\nSAVEEND  DS    XL4                   SAVED ENDING DISPLACEMENT\nSUBHEAD  DC    C' CONTROL STATEMENTS '\nSUBHEADL EQU   *-SUBHEAD\n*---------------------------------------------------------------------*\n*              WARNING MESSAGES                                       *\n*---------------------------------------------------------------------*\nWMSG02   DC    C'DISASM0202W Sequentially numbered labels have already +\n               been requested'\nWMSG02L  EQU   *-WMSG02\n*---------------------------------------------------------------------*\n*              ERROR MESSAGES                                         *\n*---------------------------------------------------------------------*\nEMSG03   DC    C'DISASM0203E Invalid control statement'\nEMSG03L  EQU   *-EMSG03\nEMSG04   DC    C'DISASM0204E Extraneous data in register parameter'\nEMSG04L  EQU   *-EMSG04\nEMSG05   DC    C'DISASM0205E Invalid register reference'\nEMSG05L  EQU   *-EMSG05\nEMSG06   DC    C'DISASM0206E End displacement is required when begin di+\n               splacement is given'\nEMSG06L  EQU   *-EMSG06\nEMSG07   DC    C'DISASM0207E Begin displacement is larger than end disp+\n               lacement'\nEMSG07L  EQU   *-EMSG07\nEMSG08   DC    C'DISASM0208E Bad hex digit in displacement'\nEMSG08L  EQU   *-EMSG08\nEMSG09   DC    C'DISASM0209E Too many digits in displacement'\nEMSG09L  EQU   *-EMSG09\nEMSG10   DC    C'DISASM0210E End displacement not allowed unless start +\n               displacement is specified'\nEMSG10L  EQU   *-EMSG10\nEMSG11   DC    C'DISASM0211E Label prefix cannot be blank'\nEMSG11L  EQU   *-EMSG11\nEMSG12   DC    C'DISASM0212E Label prefixes must be 4 characters or les+\n               s'\nEMSG12L  EQU   *-EMSG12\nEMSG13   DC    C'DISASM0213E Base register is blank'\nEMSG13L  EQU   *-EMSG13\nEMSG14   DC    C'DISASM0214E Base register name exceeds 3 characters in+\n                length'\nEMSG14L  EQU   *-EMSG14\nEMSG15   DC    C'DISASM0215E ''DATA'' is reserved for data area prefixe+\n               s, choose another prefix'\nEMSG15L  EQU   *-EMSG15\nEMSG16   DC    C'DISASM0216E Invalid digit in LINE/LINES/MAXLINES state+\n               ment'\nEMSG16L  EQU   *-EMSG16\nEMSG17   DC    C'DISASM0217E Line count value in LINE/LINES/MAXLINES st+\n               atement is too long or contains extraneous data'\nEMSG17L  EQU   *-EMSG17\nEMSG18   DC    C'DISASM0218E Line count value in LINE/LINES/MAXLINES st+\n               atement is below minimum allowed'\nEMSG18L  EQU   *-EMSG18\nEMSG19   DC    C'DISASM0219E Label prefix has already been defined, cho+\n               ose one or the other'\nEMSG19L  EQU   *-EMSG19\nEMSG20   DC    C'DISASM0220E Label prefix must be defined when base reg+\n               isters are defined'\nEMSG20L  EQU   *-EMSG20\nEMSG21   DC    C'DISASM0221E Label prefix not valid unless base registe+\n               r(s) are defined'\nEMSG21L  EQU   *-EMSG21\nEMSG22   DC    C'DISASM0222E This area overlaps area at '\nEMSG22A  DC    CL4' '\n         DC    C' to '\nEMSG22B  DC    CL4' '\n         DC    C' '\nEMSG22L  EQU   *-EMSG22\nEMSG23   DC    C'DISASM0223E Starting displacement is larger than endin+\n               g displacement'\nEMSG23L  EQU   *-EMSG23\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nCTLSTMT  DS    0CL80\nCTLTYPE  DC    CL09' '               STATEMENT TYPE\nCTLDATA  DC    CL71' '               RELATED DATA\nCTLSTMTL EQU   *-CTLSTMT\n         ORG   CTLDATA\nCTL10    DS    CL10                  DATA STARTING AT COLUMN 10\nCTL20    DS    CL10                  DATA STARTING AT COLUMN 20\nCTL30    DS    CL10                  DATA STARTING AT COLUMN 30\nCTL40    DS    CL10                  DATA STARTING AT COLUMN 40\nCTL50    DS    CL10                  DATA STARTING AT COLUMN 50\nCTL60    DS    CL10                  DATA STARTING AT COLUMN 60\nCTL70    DS    CL10                  DATA STARTING AT COLUMN 70\n         ORG   CTLSTMT+80\n         SPACE 1\nCNTLTBLE DS    0X\n         DC    CL09'ABEND    ',AL4(ABEND000)\n         DC    CL09'ASM START',AL4(ASM0000)\nCNTLBASE DC    CL09'BASE     ',AL4(BASE0000)\n         DC    CL09'CSECT    ',AL4(CSCT0000)\nCNTLDATA DC    CL09'DATA     ',AL4(DATA0000)\n         DC    CL09'LABEL    ',AL4(LABL0000)\n         DC    CL09'LINE     ',AL4(LINE0000)\n         DC    CL09'LINES    ',AL4(LINE0000)\n         DC    CL09'MAX LINES',AL4(LINE0000)\n         DC    CL09'MODULE   ',AL4(MOD0000)\n         DC    CL09'NO B2    ',AL4(NOB20000)\n         DC    CL09'NOB2     ',AL4(NOB20000)\n         DC    CL09'NO FLOAT ',AL4(NOFLOAT0)\n         DC    CL09'NOFLOAT  ',AL4(NOFLOAT0)\n         DC    CL09'PREFIX   ',AL4(LABL0000)\n         DC    CL09'RLD WARN ',AL4(RLD0000)\n         DC    CL09'SEQ LABEL',AL4(SEQ0000)\nCNTLUSNG DC    CL09'USING    ',AL4(USNG0000)\n         DC    X'FF'\nCNTLASME DC    CL09'ASM END'\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRTBLOK  PRTBLOK  TYPE=CSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              DCB'S                                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\nDISIN    DCB   DDNAME=DISIN,         CONTROL STATEMENT DCB             +\n               DSORG=PS,             .. SEQUENTIAL                     +\n               EODAD=EXIT0000,       .. EOF ADDRESS                    +\n               LRECL=80,             .. MUST BE LRECL=80               +\n               MACRF=GM              .. GET-MOVE MODE\nSYSIN    DCB   DDNAME=SYSIN,         ASSEMBLER'S INPUT DCB             +\n               DSORG=PS,             .. SEQUENTIAL                     +\n               LRECL=80,             .. MUST BE LRECL=80               +\n               BLKSIZE=3120,         .. BLOCK SIZE                     +\n               MACRF=PM              .. PUT-MOVE MODE\nREGTBL1  DS    0C                    1-CHARACTER REGISTER NAMES\n         REG   0,0\n         REG   1,1\n         REG   2,2\n         REG   3,3\n         REG   4,4\n         REG   5,5\n         REG   6,6\n         REG   7,7\n         REG   8,8\n         REG   9,9\n         REG   A,10\n         REG   B,11\n         REG   C,12\n         REG   D,13\n         REG   E,14\n         REG   F,15\n         DC    X'FF'\nREGTBL2  DS    0C                    2-CHARACTER REGISTER NAMES\n         REG   R0,0\n         REG   R1,1\n         REG   R2,2\n         REG   R3,3\n         REG   R4,4\n         REG   R5,5\n         REG   R6,6\n         REG   R7,7\n         REG   R8,8\n         REG   R9,9\n         REG   10,10\n         REG   11,11\n         REG   12,12\n         REG   13,13\n         REG   14,14\n         REG   15,15\n         REG   RA,10\n         REG   RB,11\n         REG   RC,12\n         REG   RD,13\n         REG   RE,14\n         REG   RF,15\n         DC    X'FF'\nREGTBL3  DS    0C                    3-CHARACTER REGISTER NAMES\n         REG   R10,10\n         REG   R11,11\n         REG   R12,12\n         REG   R13,13\n         REG   R14,14\n         REG   R15,15\n         DC    X'FF'\n         LTORG\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*              REGISTER TABLE                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\nREGDSCT  DSECT\nREGNAME  DS    CL3                   REGISTER NAME\nREGVALUE DS    AL1                   VALUE USED IN INSTRUCTIONS\nREGL     EQU   *-REGDSCT\n         COPY  DISASMDA\n*---------------------------------------------------------------------*\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nDISASM00 DISASM00 TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY REGEQU\n         END  DISASM02\n./ ADD NAME=DISASM03\n         TITLE 'DISASM03 - LOAD MODULE READER'\n         MACRO\n         PROC   &TYPE,&PROC1,&PROC2,&FLAGS\n         LCLC   &A,&OPTS\n&OPTS    SETC   '00'\n         AIF    (T'&FLAGS EQ 'O').PROC20\n&OPTS    SETC   '&FLAGS'\n.PROC20  ANOP\n         DC     X'&TYPE'             RECORD TYPE\n         DC     AL1(&OPTS)           FLAGS\n         AIF    (T'&PROC1 EQ 'O').PROC30\n         DC     AL2(&PROC1-DISASM03) DISPLACEMENT TO PROCESSING ROUTINE\n         AGO    .PROC40\n.PROC30  ANOP\n         DC     AL2(0)               NO PROCESSING ROUTINE\n.PROC40  ANOP\n         AIF    (T'&PROC2 EQ 'O').PROC50\n         DC     AL2(&PROC2-DISASM00) DISPLACEMENT TO MODULE'S ADDRESS\n         MEXIT\n.PROC50  ANOP\n         DC     AL2(0)               NO EXTERNAL PROCESSING MODULE\n         MEND\n         COPY   DISASMGB\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISASM03                                             *\n*                                                                    *\n*  Function:                                                         *\n*   Object module reader.  Many of the fields in the directory       *\n*   entry are interpreted and printed (module size, whether or not   *\n*   the module has the RENT, REUS, REFR flags, etc).  If the module  *\n*   name is an alias, the real module's directory info will be       *\n*   printed also.  The ESD and RLD info from the module is printed   *\n*   and control blocks built that will be used later for generating  *\n*   labels and ENTRY statements.  Module DISASM04 is called as a     *\n*   sub-function to interpret ESD data.  Module DISASM05 is called   *\n*   as a sub-function to interpret RLD data.                         *\n*                                                                    *\n*   If the module is successfully read and the requested CSECT       *\n*   located, COMMTXT will be set to the CSECT's storage address,     *\n*   COMMCSAD will be the CSECT's address within the load module,     *\n*   COMMCSEP will be the load module's entry point, COMMCSEA will    *\n*   be the CSECT's ending address within the load module, and        *\n*   COMMCSLN will the the CSECT's length.                            *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISASM03 CSECT\nDISASM03 AMODE 31\nDISASM03 RMODE 24\n         USING DISASM03,R12\n         USING DISASM00,R11\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               SET BASE REG\n         B     MOD0000               SKIP EYECATCHER\n         DC    CL8'DISASM03'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         LA    R1,SAVE03             OUR SAVE AREA ADDRESS\n         ST    R13,4(R1)             CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         OPEN  (DISMOD,INPUT)        OPEN DISMOD\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         MVC   COMMSUBH(SUBHD1L),SUBHD1\n         LA    R1,SUBHD1L            SUBHEADING LENGTH\n         STH   R1,COMMSUBL           SET LENGTH\n         MVC   DIRMEM,COMMMOD        SET MEMBER NAME = MODULE NAME\nMOD0010  DS    0H\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         BLDL  DISMOD,BLDLIST        ISSUE BLDL\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         LTR   R15,R15               BLDL SUCCESSFUL?\n         BNZ   ERR0010               NO\n         MVC   MSG01MEM,DIRMEM       SET MEMBER NAME\n         TM    DIRINDS,$ALIAS        IS THIS AN ALIAS?\n         BO    MOD0020               YES\n         MVC   MSG01ALS,NO           NOT AN ALIAS\n         B     MOD0030\nMOD0020  DS    0H\n         MVC   MSG01ALS,YES          MEMBER IS AN ALIAS\nMOD0030  DS    0H\n         UNPK  MSG01TXT(7),DIRTTTR(4)\n         MVZ   MSG01TXT,COMM0F0F     TURN OFF ZONES\n         TR    MSG01TXT,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   MSG01TXT+6,C' '       RESTORE BLANK\n         UNPK  MSG01NTE(7),DIRNTTR(4)\n         MVZ   MSG01NTE,COMM0F0F     TURN OFF ZONES\n         TR    MSG01NTE,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   MSG01NTE+6,C' '       RESTORE BLANK\n         MVC   PRTDATA(MSG01L),MSG01 SET MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         SR    R1,R1                 CLEAR REGISTER\n         IC    R1,DIR#NOTE           NUMBER OF NOTE LIST ENTRIES\n         CVD   R1,COMMDWRD           CONVERT TO DECIMAL\n         MVC   MSG02NTE,=X'40202120' INITIALIZE WITH EDIT WORD\n         ED    MSG02NTE,COMMDWRD+6   EDIT NOTE LIST\n         UNPK  MSG02SZ(7),DIRMSIZE(4) UNPACK MODULE SIZE\n         MVZ   MSG02SZ,COMM0F0F      TURN OFF ZONES\n         TR    MSG02SZ,COMMHXCH      TRANSLATE TO PRINTABLE\n         MVI   MSG02SZ+6,C' '        RESTORE BLANK\n         MVC   COMMCSEP+1,DIREPA     SAVE ENTRY POINT\n         UNPK  MSG02EPA(7),DIREPA(4) UNPACK ENTRY POINT\n         MVZ   MSG02EPA,COMM0F0F     TURN OFF ZONES\n         TR    MSG02EPA,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   MSG02EPA+6,C' '       RESTORE BLANK\n         MVC   MSG02MEM,COMMBLKS     CLEAR MEMBER NAME\n         TM    DIRINDS,$ALIAS        AN ALIAS?\n         BNO   MOD0040               NO\n         MVC   MSG02MEM,DIRRMEM      SET REAL MEMBER NAME\nMOD0040  DS    0H\n         MVC   PRTDATA(MSG02L),MSG02 SET MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         LA    R1,DIRSCTR            START OF VARIABLE PORTION\n         TM    DIRATTR3,$SSI         SSI INFO PRESENT?\n         BNO   MOD0050               NO\n         LA    R1,L'DIRSSI(R1)       SKIP SSI INFO\nMOD0050  DS    0H\n         TM    DIRINDS,$ALIAS        IS THIS AN ALIAS?\n         BNO   MOD0060               NO\n         LA    R1,L'DIRMEP+L'DIRRMEM(R1)\nMOD0060  DS    0H\n         TM    DIRATTR1,$SCTR        SCATTER LOAD?\n         BNO   MOD0070               NO\n         LA    R1,8(R1)              SKIP SCATTER STUFF\nMOD0070  DS    0H\n         UNPK  MSG03ATH(3),1(2,R1)   UNPACK AUTH CODE\n         MVZ   MSG03ATH,COMM0F0F     TURN OFF ZONES\n         TR    MSG03ATH,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   MSG03ATH+2,C' '       RESTORE BLANK\n         MVC   MSG03SSI,COMMBLKS     CLEAR SSI INFO\n         TM    DIRATTR3,$SSI         SSI INFO PRESENT?\n         BNO   MOD0100               NO\n         LA    R1,DIRSCTR            START OF VARIABLE PORTION\n         TM    DIRATTR1,$SCTR        SCATTER LOAD?\n         BNO   MOD0080               NO\n         TM    DIRINDS,$ALIAS        ALIAS?\n         BO    MOD0100               YES.. NO SSI\n         LA    R1,8(R1)              SKIP SCATTER STUFF\n         B     MOD0090\nMOD0080  DS    0H\n         TM    DIRINDS,$ALIAS        ALIAS?\n         BNO   MOD0090               NO\n         LA    R1,L'DIRMEP+L'DIRRMEM(R1)\nMOD0090  DS    0H\n         UNPK  MSG03SSI(9),0(5,R1)   UNPACK SSI INFO\n         MVZ   MSG03SSI,COMM0F0F     TURN OFF ZONES\n         TR    MSG03SSI,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   MSG03SSI+8,C' '       RESTORE BLANK\nMOD0100  DS    0H\n         TM    DIRATTR1,$RENT        RE-ENTRANT?\n         BO    MOD0110               YES\n         MVC   MSG03RNT,NO           NOT RE-ENTRANT\n         B     MOD0120\nMOD0110  DS    0H\n         MVC   MSG03RNT,YES          RE-ENTRANT\nMOD0120  DS    0H\n         TM    DIRATTR1,$REUS        REUSABLE?\n         BO    MOD0130               YES\n         MVC   MSG03RUS,NO           NOT REUSABLE\n         B     MOD0140\nMOD0130  DS    0H\n         MVC   MSG03RUS,YES          REUSABLE\nMOD0140  DS    0H\n         MVC   PRTDATA(MSG03L),MSG03 SET MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         TM    DIRATTR1,$OVRLY       OVERLAY?\n         BO    MOD0150               YES\n         MVC   MSG04OVR,NO           NOT OVERLAY\n         B     MOD0160\nMOD0150  DS    0H\n         MVC   MSG04OVR,YES          OVERLAY\nMOD0160  DS    0H\n         TM    DIRATTR1,$SCTR        SCATTER LOAD?\n         BO    MOD0170               YES\n         MVC   MSG04SCT,NO           NOT SCATTER LOAD\n         B     MOD0180\nMOD0170  DS    0H\n         MVC   MSG04SCT,YES          SCATTER LOAD\nMOD0180  DS    0H\n         TM    DIRATTR1,$EXEC        EXECUTABLE?\n         BO    MOD0190               YES\n         MVC   MSG04EXC,NO           NOT EXECUTABLE\n         B     MOD0200\nMOD0190  DS    0H\n         MVC   MSG04EXC,YES          EXECUTABLE\nMOD0200  DS    0H\n         TM    DIRATTR2,$REFR        REFRESHABLE?\n         BO    MOD0210               YES\n         MVC   MSG04RFR,NO           NO REFRESHABLE\n         B     MOD0220\nMOD0210  DS    0H\n         MVC   MSG04RFR,YES          REFRESHABLE\nMOD0220  DS    0H\n         MVC   PRTDATA(MSG04L),MSG04 SET MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         TM    DIRINDS,$ALIAS        AN ALIAS?\n         BNO   MOD0230               NO\n         MVC   PRTDATA(MSG05L),MSG05 SET MESSAGE\n         MVI   PRTCC,C'0'            SET DOUBLE SPACE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         MVC   DIRMEM,DIRRMEM        CHANGE NAMES\n         B     MOD0010               BLDL FOR REAL MEMBER\nMOD0230  DS    0H\n         MVI   DIRMTTRZ+3,X'00'      FORCE ZERO\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n*        POINT DISMOD,DIRMTTRZ,TYPE=REL\n         FIND  DISMOD,COMMMOD,D\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         LTR   R15,R15               POINT SUCCESSFUL?\n         BZ    MOD0260               YES\n         STC   R15,POINTR15          SAVE RETURN CODE\n         STC   R0,POINTR0            SAVE REASON CODE\n         LA    R1,PNTMSGS            MESSAGE TABLE ADDRESS\nMOD0240  DS    0H\n         CLI   0(R1),X'FF'           END OF TABLE?\n         BE    ERR0070               YES\n         CLC   PNTCODE,0(R1)         MESSAGE FOUND?\n         BE    MOD0250               YES\n         LA    R1,PNTMSGL(R1)        NEXT MESSAGE\n         B     MOD0240               LOOP\nMOD0250  DS    0H\n         MVC   PRTDATA(PNTMSGL-2),2(R1)\n         BAL   R10,PRT0000           PRINT MESSAGE\n         OI    COMMFLAG,$ERROR+$ABORT\n         B     EXIT0000              AND EXIT\nMOD0260  DS    0H\n         TM    MODFLAG,$MODEOF       EOF FLAG ON?\n         BO    EXIT0000              YES, EXIT\n         BAL   R10,READ0000          READ A RECORD\n         ITRACE ID=FINDPROC,                                           +\n               DATA1=(R3)            .. CAPTURE 8 BYTES OF DATA\n         LA    R9,PROCTBLE           FIRST PROCESSOR TABLE ENTRY\n         USING PROCDSCT,R9           DEFINE BASE\nMOD0270  DS    0H\n         CLI   0(R9),X'FF'           END OF TABLE\n         BE    MOD0310               NOT LOCATED.. FORGET IT\n         CLC   PROCTYPE,0(R3)        RECORD TYPE FOUND?\n         BE    MOD0280               YES\n         LA    R9,PROCL(R9)          NEXT ENTRY\n         B     MOD0270               LOOP\nMOD0280  DS    0H\n         ITRACE ID=PROCFND,                                            +\n               DATA1=PROCTYPE\n         TM    PROCFLAG,$CSECT       CSECT REQUIRED?\n         BNO   MOD0290               NO\n         TM    COMMFLAG,$CSECT       CSECT LOCATED?\n         BNO   ERR0060               NO\n         TM    0(R3),X'08'           END OF MODULE?\n         BNO   MOD0290               NO\n         ITRACE ID=EOF\n         OI    MODFLAG,$MODEOF       SET EOF FLAG\nMOD0290  DS    0H\n         SR    R15,R15               CLEAR REGISTER\n         ICM   R15,3,PROCXTNL        EXTERNAL PROCESSING MODULE DISP\n         BZ    MOD0300               NO EXTERNAL MODULE\n         AR    R15,R11               PLUS DISASM00 BASE ADDRESS\n         L     R15,0(R15)            RECORD PROCESSOR ENTRY POINT\n         ITRACE ID=CALLXTNL,         CALLING EXTERNAL RECORD PROCESSOR +\n               RDATA1=R15            .. PROCESSOR'S ENTRY POINT ADDR\n         BALR  R14,R15               LINK TO PROCESSOR\nMOD0300  DS    0H\n         SR    R15,R15               CLEAR REGISTER\n         ICM   R15,3,PROCINTL        INTERNAL PROCESSING RTN DISP\n         BZ    MOD0260               NO INTERNAL PROCESSING MODULE\n         AR    R15,R12               PLUS BASE REG\n         ITRACE ID=CALLINTL,         CALLING INTERNAL RECORD PROCESSOR +\n               RDATA1=R15            .. PROCESSOR'S ENTRY POINT ADDR\n         BR    R15                   CALL INTERNAL RECORD PROCESSOR\nMOD0310  DS    0H\n         ITRACE ID=NOPROC            NO PROCESSOR FOR THIS RECORD TYPE\n         B     MOD0260               READ NEXT RECORD\nCSCT0000 DS    0H\n         ITRACE ID=CSECT\n         L     R3,COMMIO             I/O AREA ADDRESS\n         TM    0(R3),X'02'           RLD AND CSECT?\n         BO    CSCT0010              YES\n         LA    R4,16(R3)             CESD ENTRY NUMBER ADDRESS\n         B     CSCT0020\nCSCT0010 DS    0H\n         LH    R4,6(R3)              RLD SECTION LENGTH\n         LA    R4,16(R3,R4)          CESD ENTRY NUMBER ADDRESS\nCSCT0020 DS    0H\n         LH    R5,4(R3)              CSECT INFO LENGTH\n         SRL   R5,2                  CONVERT TO NUMBER OF ENTRIES\n         ITRACE ID=CSECTNBR,                                           +\n               RDATA1=R4,            .. CSECT DATA'S ADDRESS           +\n               RDATA2=R5             .. NUMBER OF ENTRIES\n         SR    R6,R6                 INITIALIZE OFFSET\n         SR    R7,R7                 ASSUME LENGTH IS ZERO\nCSCT0030 DS    0H\n         CLC   COMMESID,0(R4)        CORRECT ESD ID?\n         BE    CSCT0040              YES\n         AH    R6,2(R4)              PLUS LENGTH OF THIS ESD\n         LA    R4,4(R4)              NEXT ESD ID ENTRY\n         BCT   R5,CSCT0030           LOOP\n         B     CSCT0050\nCSCT0040 DS    0H\n         ITRACE ID=ESDFND,                                             +\n               RDATA1=R4             .. ESD ADDRESS\n         LH    R7,2(R4)              TEXT LENGTH\nCSCT0050 DS    0H\n         SR    R2,R2                 CLEAR REGISTER\n         ICM   R2,7,9(R3)            ASSIGNED ADDRESS\n         ITRACE ID=READTEXT\n         BAL   R10,READ0000          READ NEXT TEXT BLOCK\n         LTR   R7,R7                 TEXT LENGTH ZERO?\n         BZ    MOD0260               YES\n         AR    R2,R6                 ADDRESS + DISPLACEMENT\n         S     R2,COMMCSAD           MINUS STARTING ADDRESS\n         A     R2,COMMTXT            PLUS TEXT'S BASE ADDRESS\n         A     R6,COMMIO             DISP + I/O BASE\n         ITRACE ID=MOVETEXT\n         LR    R3,R7                 COPY LENGTH\n         MVCL  R2,R6                 COPY TEXT (WHEW!)\n         B     MOD0260               DONE\nREAD0000 DS    0H\n         L     R3,COMMIO             I/O BUFFER'S ADDRESS\n         ITRACE ID=READ,                                               +\n               RDATA1=R3\n         XC    MODDECB,MODDECB       CLEAR ECB\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         READ  MODDECB,              READ LOAD MODULE                  +\n               SF,                   .. SEQUENTIALLY FORWARD           +\n               DISMOD,               .. FROM LODLIB DATA SET           +\n               (R3),                 .. I/O AREA'S ADDRESS             +\n               32760                 .. LENGTH FROM DCB\n         CHECK MODDECB               WAIT FOR READ\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         BR    R10                   RETURN\nEOD00000 DS    0H\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         ITRACE ID=EOD\n         OI    COMMFLAG,$ERROR+$ABORT SET FLAGS\n         MVC   PRTDATA(EMSG3L),EMSG3 SET MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         B     EXIT0000              EXIT\nERR0010  DS    0H\n         MVI   BLDLR0,0              INITIALIZE REASON CODE\n         STC   R15,BLDLR15           SAVE R15\n         CLI   BLDLR15,8             R15 = 8?\n         BNE   ERR0020               NO\n         STC   R0,BLDLR0             SAVE R0\nERR0020  DS    0H\n         LA    R1,BLDLMSGS           FIRST BLDL MESSAGE\nERR0030  DS    0H\n         CLI   0(R1),X'FF'           END OF TABLE?\n         BE    ERR0050               YES\n         CLC   BLDLCODE,0(R1)        PROPER MESSAGE FOUND?\n         BE    ERR0040               YES\n         LA    R1,BLDLMSGL(R1)       NEXT MESSAGE\n         B     ERR0040               LOOP\nERR0040  DS    0H\n         MVC   PRTDATA(BLDLMSGL-2),2(R1)\n         BAL   R10,PRT0000           PRINT MESSAGE\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         B     EXIT0000              AND EXIT\nERR0050  DS    0H\n         ITRACE ID=INVBLDLC,         INVALID BLDLCODE                  +\n               DATA1=BLDLCODE        ..\n         ABEND ABEND002,DUMP,,USER\nERR0060  DS    0H\n         MVC   PRTDATA(EMSG01L),EMSG01\n         BAL   R10,PRT0000           PRINT MESSAGE\n         OI    COMMFLAG,$ERROR+$ABORT\n         B     EXIT0000              AND EXIT\nERR0070  DS    0H\n         MVC   PRTDATA(EMSG02L),EMSG02\n         BAL   R10,PRT0000           PRINT MESSAGE\n         OI    COMMFLAG,$ERROR+$ABORT\n         B     EXIT0000              AND EXIT\nPRT0000  DS    0H\n         TM    MODFLAG,$SUBH         HAS SUB-HEADING BEEN PRINTED?\n         BO    PRT0010               YES\n         OI    MODFLAG,$SUBH         SET FLAG\n         MVI   PRTCMD,$PRTSUBH       SET COMMAND\n         LA    R1,PRTBLOK            SET PARAMETER BLOCK ADDRESS\n         L     R15,APR               PRINT MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO PRINT MODULE\nPRT0010  DS    0H\n         MVI   PRTCMD,$PRTPRT        SET COMMAND\n         LA    R1,PRTBLOK            SET PARAMETER BLOCK ADDRESS\n         L     R15,APR               PRINT MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO PRINT MODULE\n         BR    R10                   RETURN\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         CLOSE DISMOD                CLOSE DISMOD\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\nAM24     DS    0H\n         LA    R14,0(R14)         CLEAR HIGH BIT(S)\n         BSM   R0,R14             RETURN IN 24-BIT MODE\nAM31     DS    0H\n         LA    R14,0(R14)         CLEAR HIGH BIT(S)\n         O     R14,X80            SET 31-BIT MODE\n         BSM   R0,R14             RETURN IN 31-BIT MODE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nSAVE03   DC    18F'0'                REGISTER SAVE AREA\nX80      DC    A(X'80000000')\n* ------------------------------------------------------------------- *\nBLDLIST  DS    0F                                                     \u00a6\n         DC    H'1'                  ONE MEMBER                       \u00a6\n         DC    H'80'                 LENGTH PER MEMBER                \u00a6\nDIRDATA  DS    CL80                                                   \u00a6\n         ORG   DIRDATA                                                \u00a6\nDIRMEM   DC    CL8' '                MEMBER NAME                      \u00a6\nDIRMTTRZ DC    XL4'00000000'         MEMBER'S RELATIVE ADDRESS        \u00a6\n         DC    XL1'00'                                                \u00a6\nDIRINDS  DC    X'00'                 INDICATORS                       \u00a6\n$ALIAS   EQU   X'80'                 .. MEMBER IS AN ALIAS            \u00a6\nDIRTTTR  DC    XL3'000000'           TEXT'S RELATIVE ADDRESS          \u00a6\n         DC    XL1'00'                                                \u00a6\nDIRNTTR  DC    XL3'000000'           NOTE LIST (OR SCATTER LIST) TTR\nDIR#NOTE DC    X'00'                 NUMBER OF NOTE LIST ENTRIES      D\nDIRATTR1 DC    X'00'                 ATTRIBUTE FLAGS                  A\n$RENT    EQU   X'80'                 .. RE-ENTRANT                    T\n$REUS    EQU   X'40'                 .. REUSABLE                      A\n$OVRLY   EQU   X'20'                 .. OVERLAY\n$TEST    EQU   X'10'                 .. UNDER TEST                    R\n$LDONLY  EQU   X'08'                 .. LOAD ONLY                     E\n$SCTR    EQU   X'04'                 .. SCATTER FORMAT                T\n$EXEC    EQU   X'02'                 .. EXECUTABLE                    U\n$1TEXT   EQU   X'01'                 .. 1 TEXT, NO RLD RECORDS        R\nDIRATTR2 DC    X'00'                 ATTRIBUTE FLAGS                  N\n$NOLINK1 EQU   X'80'                 .. NOT PROCESSABLE BY LINK EDIT  E\n$ORGZERO EQU   X'40'                 .. TEXT ORIGIN IS ZERO           D\n$EPZERO  EQU   X'20'                 .. ENTRY POINT IS ZERO\n$NORLD   EQU   X'10'                 .. NO RLD RECORDS                B\n$NOLINK2 EQU   X'08'                 .. NOT PROCESSABLE BY LINK EDIT  Y\n$TESTRAN EQU   X'04'                 .. CONTAINS TESTRAN SYMBOLS\n$LINK    EQU   X'02'                 .. CREATED BY LINKAGE EDITOR     B\n$REFR    EQU   X'01'                 .. REFRESHABLE                   L\nDIRMSIZE DC    XL3'000000'           MODULE'S SIZE                    D\nDIRTXTL  DC    XL2'0000'             TEXT RECORD SIZE                 L\nDIREPA   DC    XL3'000000'           ENTRY POINT\nDIRATTR3 DC    X'00'                                                  \u00a6\n$OSLINK  EQU   X'80'                 .. PROCESSED BY O/S LINK EDITOR  \u00a6\n$PALIGN  EQU   X'20'                 .. PAGE ALIGNMENT REQUIRED       \u00a6\n$SSI     EQU   X'10'                 .. SSI PRESENT                   \u00a6\nDIRATTR4 DC    X'00'                 ATTRIBUTES                       \u00a6\n$RANY    EQU   X'10'                 .. RMODE=ANY                     \u00a6\n$AA31    EQU   X'08'                 .. AMODE=31 (ALIAS)              \u00a6\n$AA24    EQU   X'04'                 .. AMODE=24 (ALIAS)              \u00a6\n$AM31    EQU   X'02'                 .. AMODE=31 (MAIN)               \u00a6\n$AM24    EQU   X'01'                 .. AMODE=24 (MAIN)               \u00a6\nDIR#RLD  DC    X'00'                 NUMBER OF RLD'S AFTER 1ST TEXT   \u00a6\nDIRSCTR  DC    XL2'0000'             SCATTER LIST LENGTH              \u00a6\nDIRTRAN  DC    XL2'0000'             TRANSLATION TABLE LENGTH         \u00a6\nDIRTCEST DC    XL2'0000'             CESD NUMBER FOR 1ST TXT RECORD   \u00a6\nDIRECESD DC    XL2'0000'             CESD NUMBER FOR ENTRY POINT      \u00a6\n         ORG   DIRSCTR               RESET TO VARIABLE PORTION        \u00a6\nDIRMEP   DC    XL3'000000'           ENTRY POINT OF MEMBER NAME       \u00a6\nDIRRMEM  DC    CL8' '                REAL MEMBER NAME IF ALIAS        \u00a6\nDIRSSI   DC    XL4'00000000'         SSI INFO                         \u00a6\nDIRAUTHL DC    XL1'00'               AUTH CODE LENGTH                 \u00a6\nDIRAUTHC DC    XL1'00'               AUTH CODE                        \u00a6\n         ORG   DIRDATA+80                                             \u00a6\n* ------------------------------------------------------------------- *\n         SPACE 1\nMODFLAG  DC    X'00'                 PROGRAM FLAGS/SWITCHES\n$SUBH    EQU   X'80'                 .. SUBHEADING PRINTED\n$MODEOF  EQU   X'40'                 .. END OF CONTROL DATA\nBLDLCODE DS    0XL2                  BLDL RETURN CODE/REASON CODE\nBLDLR15  DC    X'00'                 .. R15\nBLDLR0   DC    X'00'                 .. R0\nPNTCODE  DS    0XL2                  POINT RETURN CODE/REASON CODE\nPOINTR15 DC    X'00'                 .. R15\nPOINTR0  DC    X'00'                 .. R0\nNO       DC    CL3'NO'\nYES      DC    CL3'YES'\nSUBHD1   DC    C' LOAD MODULE ATTRIBUTES '\nSUBHD1L  EQU   *-SUBHD1\nMSG01    DS    0C\n         DC    CL12'MEMBER NAME:'\nMSG01MEM DC    CL08' '\n         DC    CL10' '\n         DC    CL06'ALIAS:'\nMSG01ALS DC    CL03' '\n         DC    CL21' '\n         DC    CL09'TEXT TTR:'\nMSG01TXT DC    CL06' '\n         DC    CL15' '\n         DC    CL13'NOTELIST TTR:'\nMSG01NTE DC    CL06' '\n         DC    C' '\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL17'NOTELIST ENTRIES:'\nMSG02NTE DC    CL04' '\n         DC    CL09' '\n         DC    CL17'LOAD MODULE SIZE:'\nMSG02SZ  DC    CL06' '\n         DC    CL07' '\n         DC    CL12'ENTRY POINT:'\nMSG02EPA DC    CL06' '\n         DC    CL12' '\n         DC    CL17'REAL MEMBER NAME:'\nMSG02MEM DC    CL8' '\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL10'AUTH CODE:'\nMSG03ATH DS    CL02' '\n         DC    CL18' '\n         DC    CL09'SSI INFO:'\nMSG03SSI DC    CL08' '\n         DC    CL13' '\n         DC    CL11'RE-ENTRANT:'\nMSG03RNT DC    CL03' '\n         DC    CL16' '\n         DC    CL09'REUSABLE:'\nMSG03RUS DC    CL03' '\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    CL08'OVERLAY:'\nMSG04OVR DS    CL03' '\n         DC    CL19' '\n         DC    CL13'SCATTER LOAD:'\nMSG04SCT DC    CL03' '\n         DC    CL14' '\n         DC    CL11'EXECUTABLE:'\nMSG04EXC DC    CL03' '\n         DC    CL16' '\n         DC    CL12'REFRESHABLE:'\nMSG04RFR DC    CL03' '\nMSG04L   EQU   *-MSG04\nMSG05    DC    48C'-'\n         DC    CL24' REAL MODULE ATTRIBUTES '\n         DC    48C'-'\nMSG05L   EQU   *-MSG05\nEMSG01   DC    C'DISASM0301E Specified CSECT not found'\nEMSG01L  EQU   *-EMSG01\nEMSG02   DC    C'DISASM0302E Unknown return code from POINT macro'\nEMSG02L  EQU   *-EMSG02\nEMSG3    DC    C'DISASM0303E DCB EODAD routine driven, end of control r+\n               ecords not detected'\nEMSG3L   EQU   *-EMSG3\nBLDLMSGS DS    0C\n         DC    X'0400',CL55'DISASM0304E Module does not exist in DISMOD+\n                library'\nBLDLMSGL EQU   *-BLDLMSGS\n         DC    X'0800',CL55'DISASM0305E Permanent I/O error'\n         DC    X'0804',CL55'DISASM0306E Insufficient virtual storage'\n         DC    X'0808',CL55'DISASM0307E DEB not in KEY 0-7'\n         DC    X'FF'\nPNTMSGS  DS    0C\n         DC    X'0400',CL55'DISASM0308E Device does not support block i+\n               dentifier'\nPNTMSGL  EQU   *-PNTMSGS\n         DC    X'0801',CL55'DISASM0309E Incorrect parameter'\n         DC    X'0802',CL55'DISASM0310E Incorrect DEB or DEBCHK error'\n         DC    X'0803',CL55'DISASM0311E Environmental error'\n         DC    X'080B',CL55'DISASM0312E Unsuccessful call to ESTAE'\n         DC    X'080C',CL55'DISASM0313E Unsuccessful GETMAIN'\n         DC    X'0C00',CL55'DISASM0314E Input/output error'\n         DC    X'FF'\nPROCTBLE DS    0X\n         PROC  01,CSCT0000,,$CSECT            CSECT RECORDS\n         PROC  02,,A05,$CSECT                 RLD RECORDS\n         PROC  03,CSCT0000,A05,$CSECT         CSECT AND RLD RECORDS\n         PROC  05,CSCT0000,,$CSECT            CSECT RECORDS\n         PROC  06,,A05,$CSECT                 RLD RECORDS\n         PROC  07,CSCT0000,A05,$CSECT         CSECT AND RLD RECORDS\n         PROC  0D,CSCT0000,,$CSECT            CSECT RECORDS\n         PROC  0E,,A05,$CSECT                 RLD RECORDS\n         PROC  0F,CSCT0000,A05,$CSECT         CSECT AND RLD RECORDS\n         PROC  20,,A04                        CESD RECORDS\n         DC    X'FF'\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRTBLOK  PRTBLOK  TYPE=CSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              OBJECT MODULE LIBRARY DCB                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nDISMOD   DCB   DDNAME=DISMOD,        OBJECT MODULE LIBRARY DCB         +\n               DSORG=PO,             .. PARTITIONED DATA SET           +\n               RECFM=U,              .. UNDEFINED RECORD FORMAT        +\n               EODAD=EOD00000,       .. END OF DATA                    +\n               MACRF=R               .. READ ONLY\n         SPACE 2\n         LTORG\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PROCESSOR TABLE                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nPROCDSCT DSECT\nPROCTYPE DS   X                     RECORD CODE\nPROCFLAG DS   X                     FLAGS\nPROCINTL DS   AL2                   INTERNAL PROCESSING RTN\nPROCXTNL DS   AL2                   EXTERNAL PROCESSING MODULE\nPROCL    EQU  *-PROCDSCT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nDISASM00 DISASM00 TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY REGEQU\n         END  DISASM03\n./ ADD NAME=DISASM04\n         TITLE 'DISASM04 - ESD DATA PROCESSOR'\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISASM04                                             *\n*                                                                    *\n*  Function:                                                         *\n*   Process ESD data as a sub-function of DISASM03.  ESD data is     *\n*   printed and saved in ESDDATA blocks for use in generating labels *\n*   and ENTRY statements.                                            *\n*                                                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\n         COPY  DISASMGB\nDISASM04 CSECT\nDISASM04 AMODE 31\nDISASM04 RMODE 24\n         USING DISASM04,R12\n         USING DISASM00,R11\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               SET BASE REG\n         B     ESD0000               SKIP EYECATCHER\n         DC    CL8'DISASM04'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nESD0000  DS    0H\n         LA    R1,SAVE04             OUR SAVE AREA ADDRESS\n         ST    R13,4(R1)             CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         ITRACE ID=ENTRY\n         MVC   COMMSUBH(SUBHEADL),SUBHEAD\n         LA    R1,SUBHEADL           SUBHEADING LENGTH\n         STH   R1,COMMSUBL           SET LENGTH\n         MVI   COMMSUBL,X'FF'        INDICATE NON-CENTERED\n         TM    ESDFLAG,$SUBH         INITIAL SUB HEADING PRINTED?\n         BO    ESD0010               YES\n         OI    ESDFLAG,$SUBH         SET FLAG\n         MVC   PRTDATA(MSG01L),MSG01 SET MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         MVC   PRTDATA(SUBHEADL-1),SUBHEAD+1\n         BAL   R10,PRT0000           PRINT MESSAGE\nESD0010  DS    0H\n         LA    R4,COMMESD            FIRST ESD RECORD'S ADDRESS\n         USING ESDDATA,R4            DEFINE BASE\nESD0020  DS    0H\n         OC    ESDNEXT,ESDNEXT       MORE ON CHAIN?\n         BZ    ESD0030               NO\n         L     R4,ESDNEXT            FOLLOW THE CHAIN\n         B     ESD0020               LOOP\nESD0030  DS    0H\n         L     R3,COMMIO             I/O AREA ADDRESS\n         MVC   SAVEESD,4(R3)         SAVE ESD ID OF FIRST ITEM\n         LH    R5,6(R3)              SIZE OF ESD DATA\n         SRL   R5,4                  COMPUTE NUMBER OF ESD ENTRIES\n         LA    R6,8(R3)              FIRST ESD ITEM\n         ITRACE ID=PROCESD,                                            +\n               RDATA1=R5,            .. NUMBER OF ESD ENTRIES          +\n               RDATA2=R6             .. FIRST ESD DATA ADDRESS\nESD0040  DS    0H\n         GETMAIN RU,                 ACQUIRE STORAGE FOR ESD DATA      +\n               LV=ESDDATAL,          .. SIZE                           +\n               LOC=ANY\n         ITRACE ID=NEWESD,                                             +\n               RDATA1=R1             .. NEW ESD BLOCK'S ADDRESS\n         ST    R1,ESDNEXT            CHAIN FORWARD\n         LR    R4,R1                 SET NEW BLOCK ADDRESS\n         MVC   ESDEYE,ESD            SET EYECATCHER\n         XC    ESDNEXT,ESDNEXT       CLEAR NEXT BLOCK'S ADDRESS\n         MVC   ESDNAME(ESDL),0(R6)   COPY ESD DATA\n         LH    R1,SAVEESD            CURRENT ESD ID NUMBER\n         STCM  R1,3,ESDID            SET ESD ID\n         LA    R1,1(R1)              ADD 1 TO ESD ID NUMBER\n         STH   R1,SAVEESD            SAVE UPDATED ID\n         MVC   MSG02SYM,ESDNAME      SET NAME\n         OC    MSG02SYM,COMMBLKS     FORCE AT LEAST X'40'S\n         LA    R1,ESDTBLE            FIRST ESD TYPE/DESCRIPTOR\nESD0050  DS    0H\n         CLI   0(R1),X'FF'           END OF TABLE?\n         BE    ESD0060               YES\n         CLC   ESDTYPE,0(R1)         DESCRIPTOR FOUND?\n         BE    ESD0060               YES\n         LA    R1,ESDTBLEL(R1)       NEXT ESD DESCRIPTOR\n         B     ESD0050               LOOP\nESD0060  DS    0H\n         MVC   MSG02TYP,1(R1)        SET ESD TYPE\n         UNPK  MSG02ADR(7),ESDADDR(4)\n         MVZ   MSG02ADR,COMM0F0F     TURN OFF ZONES\n         TR    MSG02ADR,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   MSG02ADR+6,C' '       RESTORE BLANK\n         UNPK  MSG02SEG(3),ESDSEG(2) UNPACK SEGMENT NUMBER\n         MVZ   MSG02SEG,COMM0F0F     TURN OFF ZONES\n         TR    MSG02SEG,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   MSG02SEG+2,C' '       RESTORE BLANK\n         UNPK  MSG02LEN(7),ESDLEN(4) UNPACK LENGTH\n         MVZ   MSG02LEN,COMM0F0F     TURN OFF ZONES\n         TR    MSG02LEN,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   MSG02LEN+6,C' '       RESTORE BLANK\n         UNPK  MSG02ESD(5),ESDID(3)  UNPACK ESD ID\n         MVZ   MSG02ESD,COMM0F0F     TURN OFF ZONES\n         TR    MSG02ESD,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   MSG02ESD+4,C' '       RESTORE BLANK\n         MVC   MSG02MSG,COMMBLKS     CLEAR MESSAGE\n         CLI   ESDTYPE,$ESDSD        EXTERNAL SYMBOL?\n         BE    ESD0070               YES\n         CLI   ESDTYPE,$ESDPC        PRIVATE CODE?\n         BNE   ESD0090               NO\nESD0070  DS    0H\n         CLI   COMMCSNM,C' '         CSECT GIVEN?\n         BNE   ESD0080               YES\n         MVC   COMMCSNM,ESDNAME      SET NAME (WILL BE FIRST CSECT)\nESD0080  DS    0H\n         CLC   ESDNAME,COMMCSNM      CORRECT CSECT FOUND?\n         BNE   ESD0090               NO\n         ITRACE ID=CSECTFND\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,7,ESDADDR          CSECT'S ADDRESS\n         ST    R1,COMMCSAD           SET CSECT ADDRESS\n         SR    R2,R2                 CLEAR REGISTER\n         ICM   R2,7,ESDLEN           CSECT LENGTH\n         ST    R2,COMMCSLN           SET CSECT LENGTH\n         AR    R1,R2                 ADDRESS + LENGTH\n         BCTR  R1,0                  MINUS 1\n         ST    R1,COMMCSEA           SAVE ENDING ADDRESS\n         ITRACE ID=CSECTAD,DATA1=COMMCSAD,DATA2=COMMCSEA\n         LA    R2,32(R2)             PREVENT'S 0C4'S IN TEXT PRINTER\n         GETMAIN RU,                 ACQUIRE STORAGE FOR CSECT         +\n               LV=(R2),              .. SIZE                           +\n               LOC=BELOW\n         ST    R1,COMMTXT            SAVE TEXT'S STORAGE ADDRESS\n         MVC   COMMESID,ESDID        SAVE ESD ID OF CSECT\n         OI    COMMFLAG,$CSECT       CSECT HAS BEEN FOUND\n         MVC   MSG02MSG,MSGMSG       SET MESSAGE\nESD0090  DS    0H\n         MVC   PRTDATA(MSG02L),MSG02 SET MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         LA    R6,ESDL(R6)           NEXT ESD DATA\n         BCT   R5,ESD0040            LOOP\n         B     EXIT0000\nPRT0000  DS    0H\n         MVI   PRTCMD,$PRTPRT        SET COMMAND\n         LA    R1,PRTBLOK            SET INTERFACE BLOCK ADDRESS\n         L     R15,APR               PRINT MODULE ENTRY POINT\n         BALR  R14,R15               PRINT SUBHEADING\n         BR    R10                   EXIT\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nSAVE04   DC    18F'0'                REGISTER SAVE AREA\nSAVEESD  DC    H'0'\nESDFLAG  DC    X'00'\n$SUBH    EQU   X'80'                 INITIAL SUB HEADING PRINTED\nESD      DC    CL8'ESD'\nSUBHEAD  DC    C'0'\n         DC    CL08' '\n         DC    CL08' SYMBOL '\n         DC    CL02' '\n         DC    CL04'TYPE'\n         DC    CL02' '\n         DC    CL06' ADDR '\n         DC    CL02' '\n         DC    CL03'SEG'\n         DC    CL02' '\n         DC    CL06'LENGTH'\n         DC    CL02' '\n         DC    CL06'ESDID'\nSUBHEADL EQU   *-SUBHEAD\nMSG01    DC    48C'-'\n         DC    CL23' EXTERNAL SYMBOL TABLE '\n         DC    49C'-'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL08' '\nMSG02SYM DC    CL08' '                 EXTERNAL SYMBOL\n         DC    CL02' '\nMSG02TYP DC    CL04' '                 SYMBOL TYPE\n         DC    CL02' '\nMSG02ADR DC    CL06' '                 ADDRESS\n         DC    CL02' '\nMSG02SEG DC    CL02' '                 SEGMENT NUMBER\n         DC    CL03' '\nMSG02LEN DC    CL06' '                 LENGTH\n         DC    CL02' '\nMSG02ESD DC    CL04' '                 ESD ID\n         DC    CL02' '\nMSG02MSG DC    CL15' '                 MESSAGE\nMSG02L   EQU   *-MSG02\nMSGMSG   DC    CL15'REQUESTED CSECT'\nESDTBLE  DS    0C\n         DC    AL1($ESDSD),CL4' SD'\nESDTBLEL EQU   *-ESDTBLE\n         DC    AL1($ESDER),CL4' ER'\n         DC    AL1($ESDLR),CL4' LR'\n         DC    AL1($ESDPC),CL4' PC'\n         DC    AL1($ESDCM),CL4' CM'\n         DC    AL1($ESDPR),CL4' PS'\n         DC    AL1($ESDNULL),CL4'NULL'\n         DC    AL1($ESDWX),CL4' WX '\n         DC    AL1($ESDOV),CL4' OV '\n         DC    X'FF',CL4'UNKN'\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRTBLOK  PRTBLOK  TYPE=CSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              LITERALS                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         LTORG\n         COPY  DISASMDA\n*---------------------------------------------------------------------*\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nDISASM00 DISASM00 TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY REGEQU\n         END  DISASM04\n./ ADD NAME=DISASM05\n         TITLE 'DISASM05 - RLD DATA PROCESSOR'\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISASM05                                             *\n*                                                                    *\n*  Function:                                                         *\n*   Process RLD records.  This module runs as a sub-function of      *\n*   DISASM03.  RLD data is interpreted and individual fields are     *\n*   represented in RLDDATA blocks chained from field COMMRLD of      *\n*   the common module, DISASM00.                                     *\n*                                                                    *\n*--------------------------------------------------------------------*\n         COPY  DISASMGB\nDISASM05 CSECT\nDISASM05 AMODE 31\nDISASM05 RMODE 24\n         USING DISASM05,R12\n         USING DISASM00,R11\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               SET BASE REG\n         B     RLD0000               SKIP EYECATCHER\n         DC    CL8'DISASM05'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nRLD0000  DS    0H\n         LA    R1,SAVE05             OUR SAVE AREA ADDRESS\n         ST    R13,4(R1)             CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         ITRACE ID=ENTRY\n         MVC   COMMSUBH(SUBHEADL),SUBHEAD\n         LA    R1,SUBHEADL           SUBHEADING LENGTH\n         STH   R1,COMMSUBL           SET LENGTH\n         MVI   COMMSUBL,X'FF'        INDICATE NON-CENTERED\n         TM    RLDFLAG,$SUBH         SUBHEADING PRINTED?\n         BO    RLD0010               YES\n         OI    RLDFLAG,$SUBH         SET FLAG\n         MVC   PRTDATA(MSG01L),MSG01 SET MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         MVC   PRTDATA(SUBHEADL-1),SUBHEAD+1\n         BAL   R10,PRT0000           PRINT MESSAGE\nRLD0010  DS    0H\n         LA    R5,COMMRLD            FIRST RLD RECORD'S ADDRESS\n         USING RLDDATA,R5            DEFINE BASE\nRLD0020  DS    0H\n         OC    RLDNEXT,RLDNEXT       MORE ON CHAIN?\n         BZ    RLD0030               NO\n         L     R5,RLDNEXT            FOLLOW THE CHAIN\n         B     RLD0020               LOOP\nRLD0030  DS    0H\n         L     R4,COMMIO             I/O AREA ADDRESS\n         LH    R6,6(R4)              SIZE OF RLD DATA\n         LA    R7,16(R4)             FIRST RLD ITEM\n         ITRACE ID=PROCRLD,                                            +\n               RDATA1=R6,            .. RLD DATA LENGTH                +\n               RDATA2=R7             .. FIRST RLD DATA ADDRESS\nRLD0040  DS    0H\n         MVC   SAVEPTR,0(R7)         SAVE RLD POINTER\n         MVC   SAVEPP,2(R7)          SAVE POSITION POINTER\n         LA    R7,4(R7)              SKIP RLD AND POSITION POINTERS\n         SH    R6,COMMH4             MINUS LENGTH USED\n         BZ    EXIT0000              NO DATA.. EXIT\nRLD0050  DS    0H\n         ITRACE ID=NEWITEM,                                            +\n               RDATA1=R7,                                              +\n               DATA2=0(R7)\n         CLC   1(3,R7),COMMCSAD+1    ADDRESS TOO LOW?\n         BL    RLD0250               YES..\n         CLC   1(3,R7),COMMCSEA+1    ADDRESS TOO HIGH?\n         BH    RLD0250               YES..\n         GETMAIN RU,                 ACQUIRE STORAGE FOR RLD DATA      +\n               LV=RLDDATAL,          .. SIZE                           +\n               LOC=ANY\n         ITRACE ID=NEWRLD,                                             +\n               RDATA1=R1             .. NEW RLD BLOCK'S ADDRESS\n         ST    R1,RLDNEXT            CHAIN FORWARD\n         LR    R5,R1                 SET NEW BLOCK ADDRESS\n         MVC   RLDEYE,RLD            SET EYECATCHER\n         XC    RLDNEXT,RLDNEXT       CLEAR NEXT BLOCK'S ADDRESS\n         MVC   RLDLEN,0(R7)          SET LENGTH (SORT OF)\n         NI    RLDLEN,X'0F'          TURN OFF 'TYPE' BITS\n         SR    R1,R1                 CLEAR REGISTER\n         IC    R1,RLDLEN             LENGTH, DIRECTION, AND INDICATOR\n         SRL   R1,2                  SHIFT OUT DIRECTION AND INDICATOR\n         LA    R1,1(R1)              +1 = REAL LENGTH\n         STH   R1,RLDLEN             SAVE LENGTH\n         ICM   R1,7,1(R7)            CONSTANT'S ADDRESS\n         S     R1,COMMCSAD           DISPLACEMENT INTO THIS CSECT\n         STCM  R1,15,RLDDISP         SAVE DATA DISPLACEMENT\n         MVC   RLDPTR,SAVEPTR        SET RLD POINTER\n         MVC   RLDPP,SAVEPP          SET POSITION POINTER\n         MVC   RLDTYPE,0(R7)         SET RLD TYPE\n         NI    RLDTYPE,X'F0'         CLEAR LEN, DIRECTION, INDICATOR\n         TM    0(R7),X'02'           DIRECTION BACKWARD (-) ?\n         BO    RLD0060               YES\n         MVI   RLDDIR,C'+'           SET DIRECTION (PLUS)\n         B     RLD0070\nRLD0060  DS    0H\n         MVI   RLDDIR,C'-'           SET DIRECTION (MINUS)\nRLD0070  DS    0H\n         UNPK  MSG02PTR(5),RLDPTR(3) UNPACK RLD POINTER\n         MVZ   MSG02PTR,COMM0F0F     TURN OFF ZONES\n         TR    MSG02PTR,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   MSG02PTR+4,C' '       RESTORE BLANK\n         UNPK  MSG02PP(5),RLDPP(3)   UNPACK POSITION POINTER\n         MVZ   MSG02PP,COMM0F0F      TURN OFF ZONES\n         TR    MSG02PP,COMMHXCH      TRANSLATE TO PRINTABLE\n         MVI   MSG02PP+4,C' '        RESTORE BLANK\n         LA    R1,RLDTBLE            FIRST RLD TYPE/DESCRIPTOR\nRLD0080  DS    0H\n         CLI   0(R1),X'FF'           END OF TABLE?\n         BE    RLD0090               YES\n         CLC   RLDTYPE,0(R1)         DESCRIPTOR FOUND?\n         BE    RLD0090               YES\n         LA    R1,RLDTBLEL(R1)       NEXT RLD DESCRIPTOR\n         B     RLD0080               LOOP\nRLD0090  DS    0H\n         MVC   MSG02TYP,1(R1)        SET RLD TYPE\n         MVC   MSG02LEN,RLDLEN+1     MOVE LENGTH\n         OI    MSG02LEN,X'F0'        CONVERT TO EBCDIC\n         MVC   MSG02DIR,RLDDIR       COPY DIRECTION\n         UNPK  MSG02DSP(9),RLDDISP(5)\n         MVZ   MSG02DSP,COMM0F0F     TURN OFF ZONES\n         TR    MSG02DSP,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   MSG02DSP+8,C' '       RESTORE BLANK\n         MVC   MSG02ENM,COMMBLKS     CLEAR NAME\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,RLDPTR           RLD POINTER\n         BZ    RLD0150               IGNORE IF ZERO\n         L     R3,COMMESD            FIRST ESD ENTRY\n         USING ESDDATA,R3            DEFINE BASE\n         B     RLD0110               ENTER LOOP\nRLD0100  DS    0H\n         ICM   R3,15,ESDNEXT         NEXT ESD ENTRY\n         BZ    ERR0020               IF ZERO.. BAD NEWS\nRLD0110  DS    0H\n         BCT   R1,RLD0100            LOOP\nRLD0120  DS    0H\n         ST    R3,RLDESD             CHAIN RLD TO ESD\n         MVC   MSG02ENM,ESDNAME      COPY NAME\n         LA    R1,ESDTBLE            FIRST ESD TYPE/DESCRIPTOR\nRLD0130  DS    0H\n         CLI   0(R1),X'FF'           END OF TABLE?\n         BE    RLD0140               YES\n         CLC   ESDTYPE,0(R1)         DESCRIPTOR FOUND?\n         BE    RLD0140               YES\n         LA    R1,ESDTBLEL(R1)       NEXT ESD DESCRIPTOR\n         B     RLD0130               LOOP\nRLD0140  DS    0H\n         MVC   MSG02ETY,1(R1)        SET ESD TYPE\nRLD0150  DS    0H\n         MVC   PRTDATA(MSG02L),MSG02 SET MESSAGE\n         BAL   R10,PRT0000           PRINT RLD MESSAGE\n*--------------------------------------------------------------------*\n*      DETERMINE IF THE RLD DATA IS WITHIN A DEFINED DATA AREA       *\n*--------------------------------------------------------------------*\n         ICM   R0,15,RLDDISP         DISPLACEMENT TO RLD DATA\n         LH    R1,RLDLEN             RLD DATA LENGTH\n         AR    R1,R0                 PLUS BEGINNING DISPLACEMENT\n         BCTR  R1,0                  MINUS 1\n         STCM  R1,15,TEMPEND         ENDING DISPLACEMENT\nRLD0155  DS    0H\n         LA    R2,COMMDATA           'LAST' FORWARD POINTER\n         ICM   R8,15,COMMDATA        FIRST 'DATA' BLOCK\n         USING DATADSCT,R8           DEFINE BASE\n         BZ    RLD0170               NO DATA BLOCKS\nRLD0160  DS    0H\n         CLC   RLDDISP,DATABEGN      AT EXACT SAME LOCATION?\n         BE    RLD0230               YES\n         CLC   TEMPEND,DATABEGN      TOO LOW?\n         BL    RLD0170               NOT IN A DEFINED AREA\n         CLC   RLDDISP,DATAEND       TOO HIGH?\n         BNH   RLD0240               IN A DEFINED AREA\n         LA    R2,DATANEXT           LAST FORWARD POINTER\n         ICM   R8,15,DATANEXT        NEXT DATA BLOCK'S ADDRESS\n         BNZ   RLD0160               LOOP\n*--------------------------------------------------------------------*\n*      RLD DATA IS NOT IN A DEFINED AREA                             *\n*--------------------------------------------------------------------*\nRLD0170  DS    0H\n         GETMAIN RU,                 ACQUIRE DATA BLOCK STORAGE        +\n               LV=DATAL,             .. SIZE                           +\n               LOC=ANY\n         ITRACE ID=NEWDATA,          TRACE NEW BLOCKS                  +\n               RDATA1=R1\n         ST    R1,0(R2)              CHAIN TO PREVIOUS BLOCK\n         ST    R8,DATANEXT-DATADSCT(R1)\n         LR    R8,R1                 SET BASE\n         MVC   DATAEYE,DATA          SET EYECATCHER\n         MVC   DATABEGN,RLDDISP      DATA BEGINNING DISPLACEMENT\n         MVC   DATAEND,TEMPEND       DATA ENDING DISPLACEMENT\n         XC    DATALEN(2),DATALEN\n         MVC   DATALEN+2(2),RLDLEN   SET RLD DATA LENGTH\n         MVC   DATANAME,COMMBLKS     INITIALIZE NAME\n         XC    DATALBA,DATALBA       INITIALIZE LABEL BLOCK'S ADDRESS\n         CLI   RLDTYPE,$RLDACON      ADCON?\n         BE    RLD0180               YES\n         CLI   RLDTYPE,$RLDVCON      VCON?\n         BE    RLD0200               YES\n         CLI   RLDTYPE,$RLDER1       UNRESOLVED EXTERNAL REFERENCE?\n         BE    RLD0200               YES\n         CLI   RLDTYPE,$RLDER2       UNRESOLVED EXTERNAL REFERENCE?\n         BE    RLD0200               YES\n         CLI   RLDTYPE,$RLDPSSZ      PSEUDO AREA SIZE?\n         BE    RLD0210               YES\n         CLI   RLDTYPE,$RLDPSDP      PSEUDO AREA DISPLACEMENT?\n         BE    RLD0220               YES\n         MVC   PRTDATA(EMSG01L),EMSG01\n         BAL   R10,PRT0000           PRINT THE MESSAGE\n         OI    COMMFLAG,$ERROR+$ABORT\n         ABEND ABEND003,DUMP,,USER   ABEND\nRLD0180  DS    0H\n         CLC   ESDNAME,COMMCSNM      SAME AS REQUESTED CSECT NAME?\n         BNE   RLD0190               NO\n         MVI   DATATYPE,$DATAACN     ADCON\n         B     RLD0250               AND EXIT\nRLD0190  DS    0H\n         UNPK  MSG03DSP(9),RLDDISP(5)\n         MVZ   MSG03DSP,COMM0F0F     CLEAR ZONES\n         TR    MSG03DSP,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   MSG03DSP+8,C' '       RESTORE BLANK\n         MVC   PRTDATA(MSG03L),MSG03 COPY MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\nRLD0200  DS    0H\n         MVI   DATATYPE,$DATAVCN     VCON\n         MVC   DATANAME,ESDNAME      COPY NAME FOR VCON\n         B     RLD0250               AND EXIT\nRLD0210  DS    0H\n         MVI   DATATYPE,$DATACXD     PSEUDO AREA SIZE\n         B     RLD0250               AND EXIT\nRLD0220  DS    0H\n         MVI   DATATYPE,$DATAQ       PSEUDO AREA DISPLACEMENT\n         MVC   DATANAME,ESDNAME      COPY NAME FOR Q AREA\n         B     RLD0250\nRLD0230  DS    0H\n         CLC   RLDLEN,DATALEN+2      SAME LENGTH?\n         BNE   RLD0240               NO\n         CLI   DATATYPE,$DATAACN     IS DATA AN ADCON?\n         BNE   RLD0240               NO\n         CLI   RLDTYPE,$RLDACON      IS RLD ITEM AN ADCON?\n         BNE   RLD0240               NO\n         ITRACE ID=DUPADCON,                                           +\n               RDATA1=R7,                                              +\n               DATA2=0(R7)\n         MVC   PRTDATA(MSG04L),MSG04\n         BAL   R10,PRT0000           PRINT MESSAGE\n         B     RLD0250\nRLD0240  DS    0H\n         ITRACE ID=OVERLAP,                                            +\n               RDATA1=R5,            .. RLD ITEM ADDRESS               +\n               RDATA2=R8             .. DATA ITEM ADDRESS\n         L     R15,A10               DISASM10 ENTRY POINT\n         BALR  R14,R15               LINK TO DISASM10\n         B     RLD0155               CHECK OVERLAP(S) AGAIN\nRLD0250  DS    0H\n         TM    0(R7),X'01'           RLD/POS PTRS VALID FOR NEXT ITEM?\n         BO    RLD0260               YES\n         MVC   SAVEPTR,4(R7)         SAVE NEW RLD POINTER\n         MVC   SAVEPP,6(R7)          SAVE NEW POSITION POINTER\n         LA    R7,4(R7)              UPDATE DATA ADDRESS\n         SH    R6,COMMH4             MINUS LENGTH USED\n         BZ    EXIT0000              ALL DONE\nRLD0260  DS    0H\n         LA    R7,4(R7)              NEXT RLD ITEM\n         SH    R6,COMMH4             MINUS LENGTH USED\n         BH    RLD0050               PROCESS NEXT RLD ITEM\nERR0010  DS    0H\n         MVC   PRTDATA(EMSG02L),EMSG02\n         BAL   R10,PRT0000           PRINT ERROR MESSAGE\n         OI    COMMFLAG,$ERROR+$ABORT\n         ABEND ABEND004,DUMP,,USER\n         B     EXIT0000              AND EXIT\nERR0020  DS    0H\n         MVC   PRTDATA(EMSG03L),EMSG03\n         BAL   R10,PRT0000           PRINT ERROR MESSAGE\n         OI    COMMFLAG,$ERROR+$ABORT\n         B     EXIT0000              AND EXIT\nPRT0000  DS    0H\n         MVI   PRTCMD,$PRTPRT        SET COMMAND\n         LA    R1,PRTBLOK            SET INTERFACE BLOCK ADDRESS\n         L     R15,APR               PRINT MODULE ENTRY POINT\n         BALR  R14,R15               PRINT SUBHEADING\n         BR    R10                   EXIT\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nDWORD    DC    D'0'\nSAVE05   DC    18F'0'                REGISTER SAVE AREA\nRLDFLAG  DC    X'00'\n$SUBH    EQU   X'80'                 SUBHEADING PRINTED\nSAVEPTR  DC    XL2'0000'\nSAVEPP   DC    XL2'0000'\nTEMPEND  DC    XL4'0000'\nRLD      DC    CL8'RLD'\nDATA     DC    CL8'DATA'\nSUBHEAD  DS    0C\n         DC    CL08' '\n         DC    CL06'RELPTR'\n         DC    CL02' '\n         DC    CL16'POSITION POINTER'\n         DC    CL02' '\n         DC    CL10'   TYPE   '\n         DC    CL02' '\n         DC    CL06'LENGTH'\n         DC    CL02' '\n         DC    CL09'DIRECTION'\n         DC    CL05' '\n         DC    CL06' DISP '\n         DC    CL04' '\n         DC    CL10'ESD SYMBOL'\n         DC    CL02' '\n         DC    CL08'ESD TYPE'\nSUBHEADL EQU   *-SUBHEAD\nMSG01    DC    55C'-'\n         DC    CL10' RLD DATA '\n         DC    55C'-'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL09' '\nMSG02PTR DC    CL04' '                 RLD POINTER\n         DC    CL09' '\nMSG02PP  DC    CL04' '                 POSITION POINTER\n         DC    CL08' '\nMSG02TYP DC    CL10' '                 RLD TYPE\n         DC    CL05' '\nMSG02LEN DC    CL01' '                 LENGTH\n         DC    CL08' '\nMSG02DIR DC    CL01' '                 DIRECTION (+ OR -)\n         DC    CL07' '\nMSG02DSP DC    CL08' '                 DISPLACEMENT\n         DC    CL04' '\nMSG02ENM DC    CL08' '                 CORRESPONDING ESD ENTRY NAME\n         DC    CL04' '\nMSG02ETY DC    CL04' '                 CORRESPONDING ESD ENTRY TYPE\nMSG02L   EQU   *-MSG02\nMSG03    DC    C'DISASM0503W RLD item at '\nMSG03DSP DC    CL8' '\n         DC    C' changed from ADCON to VCON, reference is in a differe+\n               nt CSECT'\nMSG03L   EQU   *-MSG03\nMSG04    DC    C'DISASM0504W This RLD item references an ADCON previous+\n               ly encountered'\nMSG04L   EQU   *-MSG04\nEMSG01   DC    C'DISASM0501E Unknown RLD data type'\nEMSG01L  EQU   *-EMSG01\nEMSG02   DC    C'DISASM0502E RLD data remaining went negative'\nEMSG02L  EQU   *-EMSG02\nEMSG03   DC    C'DISASM0503E RLD pointer larger than number of ESD item+\n               s'\nEMSG03L  EQU   *-EMSG03\nRLDTBLE  DS    0C\n         DC    AL1($RLDACON),CL10'ADCON'\nRLDTBLEL EQU   *-RLDTBLE\n         DC    AL1($RLDVCON),CL10'VCON'\n         DC    AL1($RLDPSSZ),CL10'CXD'\n         DC    AL1($RLDPSDP),CL10'Q'\n         DC    AL1($RLDER1),CL10'UNRESOLVED'\n         DC    AL1($RLDER2),CL10'UNRESOLVED'\n         DC    X'FF',CL10'UNKNOWN'\nESDTBLE  DS    0C\n         DC    AL1($ESDSD),CL4' SD'\nESDTBLEL EQU   *-ESDTBLE\n         DC    AL1($ESDER),CL4' ER'\n         DC    AL1($ESDLR),CL4' LR'\n         DC    AL1($ESDPC),CL4' PC'\n         DC    AL1($ESDCM),CL4' CM'\n         DC    AL1($ESDPR),CL4' PS'\n         DC    AL1($ESDNULL),CL4'NULL'\n         DC    AL1($ESDWX),CL4' WX '\n         DC    AL1($ESDOV),CL4' OV '\n         DC    X'FF',CL4'UNKN'\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRTBLOK  PRTBLOK  TYPE=CSECT\n         SPACE 1\n         LTORG\n         SPACE 1\n         COPY  DISASMDA\n*---------------------------------------------------------------------*\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nDISASM00 DISASM00 TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY REGEQU\n         END  DISASM05\n./ ADD NAME=DISASM06\n         TITLE 'DISASM06 - TEXT PRINTER'\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISASM06                                             *\n*                                                                    *\n*  Function:                                                         *\n*   TEXT printer.  The object module will have already been read     *\n*   into storage by the module reader DISASM03.  Fields COMMTXT and  *\n*   COMMCSLN in DISASM00 will have been set to the address and       *\n*   length of the module in storage.                                 *\n*                                                                    *\n*--------------------------------------------------------------------*\n         COPY  DISASMGB\nDISASM06 CSECT\nDISASM06 AMODE 31\nDISASM06 RMODE 24\n         USING DISASM06,R12\n         USING DISASM00,R11\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               SET BASE REG\n         B     TEXT0000              SKIP EYECATCHER\n         DC    CL8'DISASM06'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nTEXT0000 DS    0H\n         LA    R1,SAVE06             OUR SAVE AREA ADDRESS\n         ST    R13,4(R1)             CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         MVC   COMMSUBH(SUBHEADL),SUBHEAD\n         LA    R1,SUBHEADL           SUBHEADING LENGTH\n         STH   R1,COMMSUBL           SET LENGTH\n         MVI   PRTCMD,$PRTHEAD       FORCED HEADING\n         BAL   R10,PRT0010           PRINT FORCED HEADING\n         L     R3,COMMCSLN           CSECT'S LENGTH\n         L     R4,COMMTXT            TEXT'S ADDRESS\n         XC    TEXTDISP,TEXTDISP     INITIALIZE DISPLACEMENT\nTEXT0020 DS    0H\n         LR    R5,R3                 COPY LENGTH\n         CH    R5,COMMH32            MORE THAN 1 LINE'S WORTH?\n         BNH   TEXT0030              NO\n         LH    R5,COMMH32            LIMIT TO 1 LINE\nTEXT0030 DS    0H\n         MVC   MSG01HX,COMMBLKS      INITIALIZE HEX DATA\n         MVC   MSG01CH,COMMBLKS      INITIALIZE CHARACTER DATA\n         UNPK  MSG01DSP(9),TEXTDISP(5)\n         MVZ   MSG01DSP,COMM0F0F     TURN OFF ZONES\n         TR    MSG01DSP,COMMHXCH     TRANSLATE TO PRINTABLE\n         MVI   MSG01DSP+8,C' '       RESTORE BLANK\n         UNPK  WORKHX1(9),00(5,R4)   UNPACK DATA\n         UNPK  WORKHX2(9),04(5,R4)   UNPACK DATA\n         UNPK  WORKHX3(9),08(5,R4)   UNPACK DATA\n         UNPK  WORKHX4(9),12(5,R4)   UNPACK DATA\n         UNPK  WORKHX5(9),16(5,R4)   UNPACK DATA\n         UNPK  WORKHX6(9),20(5,R4)   UNPACK DATA\n         UNPK  WORKHX7(9),24(5,R4)   UNPACK DATA\n         UNPK  WORKHX8(9),28(5,R4)   UNPACK DATA\n         MVZ   WORKHX1,COMM0F0F      TURN OFF ZONES\n         MVZ   WORKHX2,COMM0F0F      TURN OFF ZONES\n         MVZ   WORKHX3,COMM0F0F      TURN OFF ZONES\n         MVZ   WORKHX4,COMM0F0F      TURN OFF ZONES\n         MVZ   WORKHX5,COMM0F0F      TURN OFF ZONES\n         MVZ   WORKHX6,COMM0F0F      TURN OFF ZONES\n         MVZ   WORKHX7,COMM0F0F      TURN OFF ZONES\n         MVZ   WORKHX8,COMM0F0F      TURN OFF ZONES\n         TR    WORKHX1,COMMHXCH      TRANSLATE TO PRINTABLE\n         TR    WORKHX2,COMMHXCH      TRANSLATE TO PRINTABLE\n         TR    WORKHX3,COMMHXCH      TRANSLATE TO PRINTABLE\n         TR    WORKHX4,COMMHXCH      TRANSLATE TO PRINTABLE\n         TR    WORKHX5,COMMHXCH      TRANSLATE TO PRINTABLE\n         TR    WORKHX6,COMMHXCH      TRANSLATE TO PRINTABLE\n         TR    WORKHX7,COMMHXCH      TRANSLATE TO PRINTABLE\n         TR    WORKHX8,COMMHXCH      TRANSLATE TO PRINTABLE\n         MVI   WORKHX1+8,C' '        RESTORE BLANK\n         MVI   WORKHX2+8,C' '        RESTORE BLANK\n         MVI   WORKHX3+8,C' '        RESTORE BLANK\n         MVI   WORKHX4+8,C' '        RESTORE BLANK\n         MVI   WORKHX5+8,C' '        RESTORE BLANK\n         MVI   WORKHX6+8,C' '        RESTORE BLANK\n         MVI   WORKHX7+8,C' '        RESTORE BLANK\n         LR    R1,R5                 COPY LENGTH\n         LA    R1,LENTBLE(R1)        PRINT LENGTH'S ADDRESS\n         SR    R2,R2                 CLEAR REGISTER\n         IC    R2,0(R1)              PRINT LENGTH\n         BCTR  R2,0                  MINUS 1 FOR EXECUTE\n         EX    R2,HEXMVC             MOVE HEX DATA\n         LR    R1,R5                 COPY LENGTH\n         BCTR  R1,0                  MINUS 1 FOR EXECUTES\n         EX    R1,CHARMVC            MOVE CHARACTER\n         EX    R1,CHARTR             TRANSLATE UNPRINTABLES TO PERIODS\n         MVC   PRTDATA(MSG01L),MSG01 SET MESSAGE\n         BAL   R10,PRT0000           PRINT TEXT\n         ICM   R1,15,TEXTDISP        CURRENT DISPLACEMENT\n         LA    R1,32(R1)             UPDATE DISPLACEMENT\n         STCM  R1,15,TEXTDISP        SAVE UPDATED DISPLACEMENT\n         LA    R4,32(R4)             NEXT TEXT\n         SR    R3,R5                 MINUS LENGTH PRINTED\n         BNZ   TEXT0020              CONTINUE\n         B     EXIT0000              EXIT\nPRT0000  DS    0H\n         MVI   PRTCMD,$PRTPRT        SET COMMAND\nPRT0010  DS    0H\n         LA    R1,PRTBLOK            SET PARAMETER BLOCK ADDRESS\n         L     R15,APR               PRINT MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO PRINT MODULE\n         BR    R10                   RETURN\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\nHEXMVC   MVC   MSG01HX(0),HEXWORK    MOVE HEX TO PRINT MESSAGE\nCHARMVC  MVC   MSG01CH(0),0(R4)      MOVE CHARACTER TO PRINT\nCHARTR   TR    MSG01CH(0),PRTTABLE   TRANSLATE ALL TO PRINTABLE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nSAVE06   DC    18F'0'                REGISTER SAVE AREA\nTEXTDISP DC    XL4'00'\nSUBHEAD  DC    C' TEXT '\nSUBHEADL EQU   *-SUBHEAD\nMSG01    DS    0C\nMSG01DSP DC    CL08' '\n         DC    CL03' '\nMSG01HX  DC    CL73' '\n         DC    CL03' '\nMSG01CH  DC    CL32' '\nMSG01L   EQU   *-MSG01\nLENTBLE  DC    AL1(00)                  NOT USED\n         DC    AL1(02)                  WHEN LENGTH = 01\n         DC    AL1(04)                  WHEN LENGTH = 02\n         DC    AL1(06)                  WHEN LENGTH = 03\n         DC    AL1(08)                  WHEN LENGTH = 04\n         DC    AL1(11)                  WHEN LENGTH = 05\n         DC    AL1(13)                  WHEN LENGTH = 06\n         DC    AL1(15)                  WHEN LENGTH = 07\n         DC    AL1(17)                  WHEN LENGTH = 08\n         DC    AL1(20)                  WHEN LENGTH = 09\n         DC    AL1(22)                  WHEN LENGTH = 10\n         DC    AL1(24)                  WHEN LENGTH = 11\n         DC    AL1(26)                  WHEN LENGTH = 12\n         DC    AL1(29)                  WHEN LENGTH = 13\n         DC    AL1(31)                  WHEN LENGTH = 14\n         DC    AL1(33)                  WHEN LENGTH = 15\n         DC    AL1(35)                  WHEN LENGTH = 16\n         DC    AL1(40)                  WHEN LENGTH = 17\n         DC    AL1(42)                  WHEN LENGTH = 18\n         DC    AL1(44)                  WHEN LENGTH = 19\n         DC    AL1(46)                  WHEN LENGTH = 20\n         DC    AL1(49)                  WHEN LENGTH = 21\n         DC    AL1(51)                  WHEN LENGTH = 22\n         DC    AL1(53)                  WHEN LENGTH = 23\n         DC    AL1(55)                  WHEN LENGTH = 24\n         DC    AL1(58)                  WHEN LENGTH = 25\n         DC    AL1(60)                  WHEN LENGTH = 26\n         DC    AL1(62)                  WHEN LENGTH = 27\n         DC    AL1(64)                  WHEN LENGTH = 28\n         DC    AL1(67)                  WHEN LENGTH = 29\n         DC    AL1(69)                  WHEN LENGTH = 30\n         DC    AL1(71)                  WHEN LENGTH = 31\n         DC    AL1(73)                  WHEN LENGTH = 32\nHEXWORK  DS    0C\nWORKHX1  DC    CL8' '\n         DC    CL1' '\nWORKHX2  DC    CL8' '\n         DC    CL1' '\nWORKHX3  DC    CL8' '\n         DC    CL1' '\nWORKHX4  DC    CL8' '\n         DC    CL3' '\nWORKHX5  DC    CL8' '\n         DC    CL1' '\nWORKHX6  DC    CL8' '\n         DC    CL1' '\nWORKHX7  DC    CL8' '\n         DC    CL1' '\nWORKHX8  DC    CL8' '\n         DC    CL1' '\nPRTTABLE DC    256C'.'\n         ORG   PRTTABLE+X'40'\n         DC    C' '\n         ORG   PRTTABLE+X'4A'\n         DC    C'\u00a2.<(+\u00a6'\n         DC    X'50'\n         ORG   PRTTABLE+X'5A'\n         DC    C'!$*);\u00ac-/'\n         ORG   PRTTABLE+X'6B'\n         DC    C',%_>?'\n         ORG   PRTTABLE+X'7A'\n         DC    C':#@'\n         DC    X'7D'\n         DC    C'=\"'\n         ORG   PRTTABLE+X'C0'\n         DC    C'{ABCDEFGHI'\n         ORG   PRTTABLE+X'D0'\n         DC    C'}JKLMNOPQR'\n         ORG   PRTTABLE+X'E2'\n         DC    C'STUVWXYZ'\n         ORG   PRTTABLE+X'F0'\n         DC    C'0123456789'\n         ORG   PRTTABLE+256\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRTBLOK  PRTBLOK  TYPE=CSECT\n         SPACE 2\n         LTORG\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nDISASM00 DISASM00 TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY REGEQU\n         END  DISASM06\n./ ADD NAME=DISASM07\n         TITLE 'DISASM07 - DSECT ASSEMBLER AND INTERPRETER'\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISASM07                                             *\n*                                                                    *\n*  Function:                                                         *\n*   Dynamically invoke the assembler (IEV90) to assemble DSECTs.     *\n*   Any method of defining DSECTs that are valid to the assembler    *\n*   may be used.  They may be defined inline, by macros, or copy     *\n*   statements.  The disassembler links to the assembler to assemble *\n*   the source, then scans the assembler output to learn the DSECT   *\n*   names, label names, and displacements to the labels.  In order   *\n*   for DISASM to find the names and displacements, the PRINT option *\n*   of the assembler must be on.                                     *\n*                                                                    *\n*   Labels and DSECT names are limited to 8 characters in length.    *\n*                                                                    *\n*   Input to the assembler is delimited by ASM START and ASM END     *\n*   statements.  Any statements between the ASM START and ASM END    *\n*   are copied to SYSIN.  Assembler input statements are listed on   *\n*   the DISPRINT output, but are otherwise ignored.  Any macros not  *\n*   defined inline and any copy elements must be available to the    *\n*   assembler in a library in the SYSLIB concatenation.              *\n*                                                                    *\n*   If the return code from the assembler is greater than 4, the     *\n*   disassembly is aborted.  The assembler output is copied to the   *\n*   DISDEBUG data set if allocated.                                  *\n*                                                                    *\n*   The DSECTs are chained from field COMMDSCT of module DISASM00.   *\n*   The labels within the DSECT are chained from field DSCTLBA.      *\n*   DSCTDSCT maps the DSECT control blocks, LABLDSCT maps the label  *\n*   control blocks.                                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\n         COPY  DISASMGB\nDISASM07 CSECT\nDISASM07 AMODE 31\nDISASM07 RMODE 24\n         USING DISASM07,R12\n         USING DISASM00,R11\n         USING DSCTDSCT,R3           DEFINE BASE\n         USING LABLDSCT,R4           DEFINE BASE\n         USING EQUDATA,R5            DEFINE BASE\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               SET BASE REG\n         B     DSCT0000              SKIP EYECATCHER\n         DC    CL8'DISASM07'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nDSCT0000 DS    0H\n         XC    COMMSUBL,COMMSUBL     NO SUBHEADING\n         LA    R1,SAVE07             OUR SAVE AREA ADDRESS\n         ST    R13,4(R1)             CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         TM    COMMFLAG,$ASMIN       ANY ASSEMBLER INPUT?\n         BNO   DSCT0300              NO\n         LOAD  EP=IEV90              LOAD THE ASSEMBLER\n         ST    R0,ASMEP              SAVE ASSEMBLER'S ENTRY POINT\n         LR    R15,R0                COPY TO R15\n         LA    R1,AASMPARM           ASSEMBLER PARM LIST ADDRESS\n         ITRACE ID=CALLASM,          CALLING THE ASSEMBLER             +\n               RDATA1=R15,           .. ASSEMBLER'S ENTRY POINT        +\n               RDATA2=R1             .. ASSEMBLER'S PARM LIST ADDRESS\n         BASR  R14,R15               LINK TO ASSEMBLER\n         BAL   R14,AM31              FORCE 31-BIT MODE\n         ITRACE ID=ASMRC,            TRACE ASSEMBLER'S RETURN CODE     +\n               RDATA1=R15            .. RETURN CODE\n         STH   R15,ASMRC             SAVE ASSEMBLER RETURN CODE\n         CVD   R15,COMMDWRD          CONVERT TO DECIMAL\n         MVI   PRTCC,C'0'            DOUBLE SPACE\n         MVC   MSG01RC,=X'40202120'  SET EDIT WORD\n         ED    MSG01RC,COMMDWRD+6    EDIT RETURN CODE\n         MVC   PRTDATA(MSG01L),MSG01 SET MESSAGE\n         BAL   R10,PRT0000           PRINT RETURN CODE MESSAGE\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         OPEN  (SYSPRINT,INPUT)      OPEN SYSPRINT AS INPUT\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         MVC   COMMDBSH,ASMHEAD      SET HEADING\n         MVI   DBUGCMD,$DBUGHD       SET COMMAND\n         LA    R1,DBUGBLOK           DEBUG PARAMETER BLOCK ADDRESS\n         L     R15,ADB               DEBUG ENTRY POINT\n         BALR  R14,R15               PRINT DEBUG HEADING\n         MVI   DBUGCMD,$DBUGPRT      SET COMMAND\n         LA    R1,ASMSTMT+1          DATA ADDRESS FOR DEBUG\n         ST    R1,DBUGDATA           SET DATA ADDRESS\n         SR    R3,R3                 NO DSECT IS ACTIVE\n         SR    R4,R4                 NO LABEL IS ACTIVE\nDSCT0010 DS    0H\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         GET   SYSPRINT,ASMSTMT      READ A SYSPRINT RECORD\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         LA    R1,DBUGBLOK           DBUG PARAMETER BLOCK ADDRESS\n         L     R15,ADB               DEBUG ENTRY POINT\n         BALR  R14,R15               LINK TO DEBUG\n         CLC   ASMRC,COMMH4          ASSEMBLER ERROR?\n         BH    DSCT0010              YES\n         ITRACE ID=TEMP1,                                              +\n               DATA1=ASMLABL,                                          +\n               DATA2=ASMDISP\n         CLI   ASMLABL,C'*'          COMMENT STATEMENT?\n         BE    DSCT0010              YES\n         CLC   ASMSTMT+43,SRCSTMT    ASSEMBLER HEADING LINE?\n         BE    DSCT0010              YES, IGNORE IT\n         CLC   XREF,ASMSTMT+45       START OF CROSS REFERENCE?\n         BNE   DSCT0020              NO\n         OI    XREFFLAG,$XREF        SET CROSS REFERENCE FLAG\n         ITRACE ID=XREF              CROSS REFERENCE STARTED\nDSCT0020 DS    0H\n         TM    XREFFLAG,$XREF        CROSS REFERENCE FOUND?\n         BO    DSCT0010              YES\n         CLI   ASMLABL,C' '          LABEL PRESENT?\n         BE    DSCT0010              NO\n         LA    R6,ASMLABL            FIRST BYTE OF LABEL\n         LA    R2,WORKLABL           FIRST BYTE OF WORK LABEL\n         MVC   WORKLABL,COMMBLKS     CLEAR LABEL NAME\n         LA    R1,8                  MAX LOOPS\nDSCT0030 DS    0H\n         CLI   0(R6),C' '            BLANK?\n         BE    DSCT0040              YES\n         MVC   0(1,R2),0(R6)         COPY TO WORK LABEL\n         LA    R2,1(R2)              NEXT\n         LA    R6,1(R6)              NEXT\n         BCT   R1,DSCT0030           LOOP\n         CLI   0(R6),C' '            BLANK?\n         BE    DSCT0040              NO... TOO LONG FOR A LABEL\n         ITRACE ID=LONGLABL\n         B     DSCT0010              READ NEXT SYSPRINT RECORD\nDSCT0040 DS    0H\n         LA    R1,8                  MAX LOOPS\nDSCT0050 DS    0H\n         CLI   0(R6),C' '            BLANK?\n         BNE   DSCT0060              NO\n         LA    R6,1(R6)              NEXT\n         BCT   R1,DSCT0050           LOOP\n         B     DSCT0110              ASSUME IT IS A LABEL\nDSCT0060 DS    0H\n         CLC   DSECTOP(6),0(R6)      DSECT?\n         BE    DSCT0070              YES\n         CLC   CSECTOP,0(R6)         CSECT?  (TREATED LIKE DSECTS)\n         BE    DSCT0070              YES\n         CLC   EQUOP,0(R6)           EQUATE STATEMENT?\n         BNE   DSCT0110              NO\n         LTR   R4,R4                 LABEL BASE SET?\n         BZ    DSCT0010              NO\n         CLC   =C'000',ASMADDR2      FIRST 3 DIGITS ZEROS?\n         BNE   DSCT0010              NO\n         GETMAIN RU,                 LENGTH                            +\n               LV=EQUL,                                                +\n               LOC=ANY\n         LR    R5,R1                 COPY EQU BLOCK ADDRESS\n         ITRACE ID=NEWEQU,           NEW EQUATE                        +\n               RDATA1=R5\n         XC    EQUDATA(EQUL),EQUDATA INITIALIZE THE EQUATE BLOCK\n         MVC   EQUEYE,EQUID          IDENTIFY THIS BLOCK\n         MVC   EQUNEXT,LABLEQU       SET CHAIN ADDRESS\n         ST    R5,LABLEQU            SET NEW BLOCK'S ADDRESS IN LABEL\n         MVC   EQULABEL,WORKLABL     SET LABEL\n         NC    ASMADDR2+3(2),X1F1F   PREPARE FOR PACKING\n         TR    ASMADDR2+3(2),CHXH    TRANSLATE FOR PACKING\n         PACK  DISPOUT(2),ASMADDR2+3(3)\n         MVC   EQUVALUE,DISPOUT      COPY EQUATE VALUE\n         B     DSCT0010\nDSCT0070 DS    0H\n         ITRACE ID=SCANDSCT\n         LA    R2,COMMDSCT           DSECT ANCHOR\n         ICM   R3,15,COMMDSCT        FIRST DSECT BLOCK\n         BZ    DSCT0090              NO DSECTS YET\nDSCT0080 DS    0H\n         CLC   DSCTNAME,WORKLABL     ALREADY ON DSECT CHAIN?\n         BE    DSCT0100              YES.. EXIT WITH BASE SET\n         LR    R2,R3                 COPY ADDRESS\n         ICM   R3,15,DSCTNEXT        NEXT DSECT BLOCK\n         BNZ   DSCT0080              LOOP\nDSCT0090 DS    0H\n         GETMAIN RU,                 ACQUIRE NEW DSECT BLOCK           +\n               LV=DSCTL,                                               +\n               LOC=ANY\n         ST    R1,DSCTNEXT-DSCTDSCT(R2)   CHAIN NEW TO PREVIOUS BLOCK\n         ITRACE ID=NEWDSECT,         NEW DSECT BLOCK                   +\n               RDATA1=R1,            .. BLOCK'S ADDRESS                +\n               DATA2=WORKLABL        .. DSECT'S NAME\n         LR    R3,R1                 SET BASE\n         MVC   DSCTEYE,DSECTOP       SET BLOCK ID\n         XC    DSCTNEXT,DSCTNEXT     ZERO 'NEXT' BLOCK ADDRESS\n         MVC   DSCTNAME,WORKLABL     SET DSECT'S NAME\n         XC    DSCTLBA,DSCTLBA       CLEAR LABEL POINTER\n         B     DSCT0010\nDSCT0100 DS    0H\n         ITRACE ID=DUPDSECT\n         B     DSCT0010\nDSCT0110 DS    0H\n         LTR   R3,R3                 DSECT DETERMINED YET?\n         BZ    DSCT0010              NO\n         CLI   ASMDISP,C'A'          VALID DISPLACEMENT?\n         BL    DSCT0010              NO\n         CLI   ASMDISP,C'F'          VALID DISPLACEMENT?\n         BNH   DSCT0120              YES\n         CLI   ASMDISP,C'0'          VALID DISPLACEMENT?\n         BL    DSCT0010              NO\n         CLI   ASMDISP,C'9'          VALID DISPLACEMENT?\n         BH    DSCT0010              NO\nDSCT0120 DS    0H\n         MVC   DISPIN,ASMDISP        COPY DISPLACEMENT\n         NC    DISPIN,COMM1F1F       PREPARE FOR TRANSLATE\n         TR    DISPIN,COMMCHHX       TRANSLATE FOR PACKING\n         PACK  DISPOUT(4),DISPIN(7)  PACK DISPLACEMENT\n         LA    R2,DSCTLBA            LABEL CHAIN ANCHOR\n         ICM   R4,15,DSCTLBA         FIRST LABEL\n         BZ    DSCT0140              NO LABELS\nDSCT0130 DS    0H\n         CLC   DISPOUT(3),LABLDISP+1 INSERT HERE?\n         BH    DSCT0140              YES\n         LR    R2,R4                 COPY ADDRESS\n         ICM   R4,15,LABLNEXT        NEXT LABEL\n         BNZ   DSCT0130              LOOP\nDSCT0140 DS    0H\n         GETMAIN RU,                 ACQUIRE NEW LABEL BLOCK           +\n               LV=LABLL,                                               +\n               LOC=ANY\n         ITRACE ID=NEWLABL,          NEW LABEL BLOCK                   +\n               RDATA1=R1,            .. BLOCK'S ADDRESS                +\n               DATA2=WORKLABL        .. LABEL'S NAME\n         ST    R1,LABLNEXT-LABLDSCT(R2)  CHAIN PREVIOUS BLOCK TO NEW\n         ST    R4,LABLNEXT-LABLDSCT(R1)  CHAIN NEXT BLOCK TO NEW\n         LR    R4,R1                 SET BASE\n         MVC   LABLEYE,LABEL         SET BLOCK IDENTIFIER\n         MVC   LABLNAME,WORKLABL     SET LABEL NAME\n         MVI   LABLDISP,X'00'        FORCE FIRST BYTE TO ZERO\n         MVC   LABLDISP+1(3),DISPOUT SET DISPLACEMENT TO LABEL\n         MVI   LABLTYPE,$LABLD       DATA TYPE LABEL\n         B     DSCT0010\nDSCT0200 DS    0H\n         CLOSE SYSPRINT\n         BAL   R14,AM31              FORCE AMODE 31\n         CLC   ASMRC,COMMH4          ERROR DURING ASSEMBLY?\n         BNH   EXIT0000              NO\n         ITRACE ID=ASMERROR\n         OI    COMMFLAG,$ERROR+$ABORT\n         MVC   PRTDATA(EMSG01L),EMSG01\n         BAL   R10,PRT0000           PRINT MESSAGE\n         B     EXIT0000              AND EXIT\nDSCT0300 DS    0H\n         ITRACE ID=NOASMIN\n         MVI   PRTCC,C'0'            DOUBLE SPACE\n         MVC   PRTDATA(MSG99L),MSG99 SET MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         B     EXIT0000              AND EXIT\nPRT0000  DS    0H\n         MVI   PRTCMD,$PRTPRT        SET COMMAND\nPRT0010  DS    0H\n         LA    R1,PRTBLOK            SET PARAMETER BLOCK ADDRESS\n         L     R15,APR               PRINT MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO PRINT MODULE\n         BR    R10                   RETURN\nEXIT0000 DS    0H\n         OC    ASMEP,ASMEP           ASSEMBLER LOADED?\n         BZ    EXIT0010              NO\n         ITRACE ID=DELASM            DELETE ASSEMBLER\n         DELETE EP=IEV90\nEXIT0010 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\nAM24     DS    0H\n         LA    R14,0(R14)         CLEAR HIGH BIT(S)\n         BSM   R0,R14             RETURN IN 24-BIT MODE\nAM31     DS    0H\n         LA    R14,0(R14)         CLEAR HIGH BIT(S)\n         O     R14,X80            SET 31-BIT MODE\n         BSM   R0,R14             RETURN IN 31-BIT MODE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nSAVE07   DC    18F'0'                REGISTER SAVE AREA\nX80      DC    A(X'80000000')\nASMEP    DC    A(0)                  ASSEMBLER'S ENTRY POINT\nAASMPARM DC    A(ASMPARM+X'80000000') ASSEMBLER PARM'S\nASMRC    DC    H'0'                  ASSEMBLER'S RETURN CODE\nASMPARM  DC    Y(ASMPARML-2)\n         DC    C'DECK,NOOBJECT'\nASMPARML EQU   *-ASMPARM\nXREF     DC    C' CROSS REFERENCE '\nXREFFLAG DC    X'00'                 CROSS REFERENCE FLAG\n$XREF    EQU   X'80'                 .. CROSS REFERENCE HAS BEEN FOUND\nX1F1F    DC    8X'1F'\n         SPACE 1 0 1 2 3 4 5 6 7 8 9 A B C D E F\nCHXH     DC    X'000A0B0C0D0E0F000000000000000000'  00-0F\n         DC    X'00010203040506070809000000000000'  10-1F\n         SPACE 1\nDSECTOP  DC    CL8'DSECT'\nCSECTOP  DC    CL8'CSECT'\nEQUOP    DC    C'EQU '\nSRCSTMT  DC    C'SOURCE STATEMENT'\nWORKLABL DC    CL8' '\nDISPIN   DC    CL7' '\nDISPOUT  DC    XL4'000000'\nLABEL    DC    CL8'LABEL'\nEQUID    DC    CL8'EQU'\n         AIF   (&ASMG EQ 133).GENASMA\nASMSTMT  DC    CL121' '\nASMSTMTL EQU   *-ASMSTMT\n         ORG   ASMSTMT+1\nASMDISP  DS    CL6\n         ORG   ASMSTMT+29\nASMADDR2 DS    CL5\n         ORG   ASMSTMT+41\nASMLABL  DS    CL8\n         ORG   ASMSTMT+121\n         AGO   .GENASMB\n.GENASMA ANOP\nASMSTMT  DC    CL133' '\nASMSTMTL EQU   *-ASMSTMT\n         ORG   ASMSTMT+1\nASMDISP  DS    CL6\n         ORG   ASMSTMT+23\nASMADDR2 DS    CL5\n         ORG   ASMSTMT+41\nASMLABL  DS    CL8\n         ORG   ASMSTMT+133\n.GENASMB ANOP\nASMHEAD  DC    CL35'ASSEMBLER OUTPUT'\nMSG01    DC    C'DISASM0701I Assembler return code was '\nMSG01RC  DC    CL04' '\nMSG01L   EQU   *-MSG01\nMSG99    DC    C'DISASM0702I No assembler input'\nMSG99L   EQU   *-MSG99\nEMSG01   DC    C'DISASM0703E Error assembling DSECTS, check assembler o+\n               utput in DISDEBUG'\nEMSG01L  EQU   *-EMSG01\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRTBLOK  PRTBLOK  TYPE=CSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              DEBUG MODULE INTERFACE BLOCK                           *\n*                                                                     *\n*---------------------------------------------------------------------*\nDBUGBLOK DBUGBLOK TYPE=CSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              ASSEMBLER OUTPUT DCB                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\nSYSPRINT DCB   DDNAME=SYSPRINT,                                        +\n               DSORG=PS,                                               +\n               EODAD=DSCT0200,                                         +\n               MACRF=GM\n         SPACE 2\n         LTORG\n         SPACE 2\n         COPY     DISASMDA\n*---------------------------------------------------------------------*\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nDISASM00 DISASM00 TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY REGEQU\n         END  DISASM07\n./ ADD NAME=DISASM08\n         TITLE 'DISASM08 - CSECT LABEL ASSIGNER AND REFERENCE TABLE GEN+\n               ERATOR'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: DISASM08                                              *\n*                                                                     *\n*  FUNCTION:                                                          *\n*   1) Chain the USING blocks to the DSECT blocks they refer to.      *\n*   2) Scan the object code and                                       *\n*         A. Determine the displacements where valid instructions     *\n*            occur.                                                   *\n*         B. Add DATA blocks to represent any areas that do not       *\n*            contain valid instructions and are not already defined   *\n*            by data blocks.                                          *\n*   3) Verify that all BASE and USINGs reference displacements where  *\n*      a valid instruction occurs.  This is because a USING or DROP   *\n*      statement cannot be generated in the middle of an instruction. *\n*   4) Generate label blocks for entry points that occur within the   *\n*      csect.  This info comes from the ESD blocks built by module    *\n*      DISASM04.                                                      *\n*   5) Generate label blocks for the points referenced by ADCONs.     *\n*      This info comes from the RLD blocks built by module DISASM05.  *\n*   6) Scan the object code and generate the REF blocks for data      *\n*      references.                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  DISASMGB\nDISASM08 CSECT\nDISASM08 AMODE 31\nDISASM08 RMODE 24\n         USING DISASM08,R12\n         USING DISASM00,R11\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               SET BASE REG\n         B     LABL0000              SKIP EYECATCHER\n         DC    CL8'DISASM08'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nLABL0000 DS    0H\n         LA    R1,SAVE08             OUR SAVE AREA ADDRESS\n         USING SAVE08,R13\n         ST    R13,4(R1)             CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         ITRACE ID=ENTRY\n         TM    COMMDD,$DSECTDD       DISDSECT DD PRESENT?\n         BNO   LABL0020              NO\n         BAL   R14,AM24\n         OPEN  (PREDCB,INPUT)        OPEN THE DSECTS DCB\n         BAL   R14,AM31\n         LA    R1,PREDCB\n         USING IHADCB,R1\n         SR    R0,R0\n         ICM   R0,3,DCBBLKSI         GET BLOCK SIZE\n         ST    R0,PREIOSZ\n         GETMAIN RU,                                                   +\n               LV=(0),                                                 +\n               LOC=BELOW\n         ST    R1,PREIOA             SAVE I/O AREA\n* ------------------------------------------------------------------- *\n*        Chain USING blocks to their related DSECT blocks             *\n* ------------------------------------------------------------------- *\nLABL0020 DS    0H\n         ICM   R3,15,COMMUSNG        FIRST USING BLOCK'S ADDRESS\n         USING USNGDSCT,R3           DEFINE BASE\n         BZ    LABL0220              END OF CHAIN\nLABL0030 DS    0H\n         ITRACE ID=FINDDSCT,         STARTING SEARCH FOR A DSECT ENTRY +\n               DATA1=USNGDSNM        .. DSECT'S NAME\n         ICM   R2,15,COMMDSCT        FIRST DSECT ENTRY\n         USING DSCTDSCT,R2           DEFINE BASE\nLABL0040 DS    0H\n         BZ    LABL0050              NOT DEFINED IN ASM START/ASM END\n         ITRACE ID=TESTDSCT,         CHECKING A DSECT ENTRY            +\n               DATA1=DSCTNAME        .. DSECT'S NAME\n         CLC   USNGDSNM,DSCTNAME     DSECT FOUND?\n         BE    LABL0160              YES\n         ICM   R2,15,DSCTNEXT        NEXT DSECT BLOCK\n         B     LABL0040              LOOP\nLABL0050 DS    0H\n         ITRACE ID=CHKPRE            CHECKING PRE-PROCESSED DSECTS\n         FIND  PREDCB,USNGDSNM,D     'FIND' MEMBER\n         LTR   R15,R15               MEMBER IN DATASET?\n         BNZ   ERR0010               NO..\n         SR    R6,R6                 NO LABEL SO FAR\n         SR    R7,R7                 NO EQUATE SO FAR\n         USING LABLDSCT,R6\n         USING EQUDATA,R7\nLABL0060 DS    0H\n         BAL   R14,AM24\n         L     R4,PREIOA\n         READ  READECB,              READ ANOTHER BLOCK                +\n               SF,                                                     +\n               PREDCB,                                                 +\n               (R4),                                                   +\n               ,                                                       +\n               S\n         CHECK READECB\n         BAL   R14,AM31\n         LH    R5,0(R4)              TOTAL BLOCK SIZE\n         SH    R5,H4                 MINUS BDW LENGTH\n         LA    R4,4(R4)              FIRST RECORD IN BLOCK\nLABL0070 DS    0H\n         CLC   8(8,R4),DSCT_ID       DSECT?\n         BE    LABL0080\n         CLC   8(8,R4),LABL_ID       LABEL?\n         BE    LABL0090\n         CLC   8(8,R4),EQU_ID        EQUATE?\n         BE    LABL0120\n         ABEND 1,DUMP,,USER\nLABL0080 DS    0H\n         SR    R6,R6                 NO LABEL SO FAR\n         SR    R7,R7                 NO EQUATE SO FAR\n         GETMAIN RU,                                                   +\n               LV=DSCTL,                                               +\n               LOC=ANY\n         LR    R2,R1                 COPY NEW STORAGE ADDRESS\n         MVC   DSCTDSCT(DSCTL),4(R4) COPY FROM I/O AREA\n         MVC   DSCTNEXT,COMMDSCT     COPY FIRST BLOCK'S ADDRESS\n         ST    R2,COMMDSCT           ADD NEW BLOCK TO CHAIN\n         XC    DSCTLBA,DSCTLBA       CLEAR 1ST LABEL BLOCK ADDRESS\n         B     LABL0150\nLABL0090 DS    0H\n         SR    R7,R7                 NO EQUATE SO FAR\n         GETMAIN RU,                                                   +\n               LV=LABLL,                                               +\n               LOC=ANY\n         OC    DSCTLBA,DSCTLBA       LABEL ALREADY ON CHAIN?\n         BNZ   LABL0100              YES\n         ST    R1,DSCTLBA            CHAIN TO DSECT BLOCK\nLABL0100 DS    0H\n         LTR   R6,R6                 PREVIOUS LABEL BLOCK?\n         BZ    LABL0110              NO\n         ST    R1,LABLNEXT           CHHAIN NEW BLOCK TO PREVIOUS\nLABL0110 DS    0H\n         LR    R6,R1                 COPY STORAGE ADDRESS\n         MVC   LABLDSCT(LABLL),4(R4) COPY FROM I/O AREA\n         XC    LABLEQU,LABLEQU       CLEAR EQUATE BLOCK ADDRESS\n         B     LABL0150\nLABL0120 DS    0H\n         GETMAIN RU,                                                   +\n               LV=EQUL,                                                +\n               LOC=ANY\n         OC    LABLEQU,LABLEQU       EQAUTE ALREADY ON CHAIN?\n         BNZ   LABL0130              YES\n         ST    R1,LABLEQU            CHAIN TO EQUATE BLOCK\nLABL0130 DS    0H\n         LTR   R7,R7                 PREVIOUS EQUITE BLOCK\n         BZ    LABL0140              NO\n         ST    R1,EQUNEXT            CHHAIN NEW BLOCK TO PREVIOUS\nLABL0140 DS    0H\n         LR    R7,R1                 COPY STORAGE ADDRESS\n         MVC   EQUDATA(EQUL),4(R4)   COPY FROM I/O AREA\nLABL0150 DS    0H\n         SH    R5,0(R4)              MINUS THIS RECORD'S SIZE\n         BZ    LABL0060\n         AH    R4,0(R4)\n         B     LABL0070\n         DROP  R6,R7\nLABL0160 DS    0H\n         BAL   R14,AM31\n         ITRACE ID=DSCTFND,          DSECT ENTRY HAS BEEN FOUND        +\n               RDATA1=R2             .. DSECT BLOCK'S ADDRESS\n         ST    R2,USNGDSA            CHAIN DSECT BLOCK TO USING BLOCK\n         CLC   USNGLBNM,COMMBLKS     LABEL BLANK?\n         BE    LABL0200              YES\n         ICM   R9,15,DSCTLBA         FIRST LABEL IN THE DSECT\n         USING LABLDSCT,R9           DEFINE BASE\n         BZ    LABL0180              NO LABELS\nLABL0170 DS    0H\n         CLC   LABLNAME,USNGLBNM     LABEL LOCATED?\n         BE    LABL0190              YES\n         ICM   R9,15,LABLNEXT        NEXT LABEL\n         BNZ   LABL0170              LOOP\nLABL0180 DS    0H\n         MVC   EMSG05N,USNGLBNM      COPY LABEL NAME\n         MVC   EMSG05D,USNGDSNM      COPY DSECT NAME\n         MVC   PRTDATA(EMSG05L),EMSG05\n         BAL   R10,PRT0000           PRINT MESSAGE\n         OI    COMMFLAG,$ERROR+$ABORT\n         B     LABL0210\nLABL0190 DS    0H\n         ST    R9,USNGLBA            SET ASSOCIATED LABEL BLOCK ADDRESS\n         MVC   USNGDISP,LABLDISP     SET DISP TO LABEL\n         B     LABL0210              PROCESS NEXT USING\nLABL0200 DS    0H\n         ICM   R9,15,DSCTLBA         ANY LABELS?\n         BZ    LABL0210              NO\n         ST    R9,USNGLBA            SET ASSOCIATED LABEL BLOCK ADDRESS\n         XC    USNGDISP,USNGDISP     SET DISP TO ZERO\nLABL0210 DS    0H\n         ICM   R3,15,USNGNEXT        NEXT USING BLOCK\n         BNZ   LABL0030              LOOP\n         TM    COMMFLAG,$ABORT       SERIOUS ERROR?\n         BO    EXIT0000              YES, STOP NOW\n* ------------------------------------------------------------------- *\n*        Scan the object code and determine the displacements         *\n*        to all valid instructions.  This is necessary because        *\n*        some instructions may reference other instructions to        *\n*        modify them (like zapping in a length).  If an instruction   *\n*        references another at other than the opcode address, the     *\n*        generated label will be 'PRFXNNNN+D'.                        *\n*                                                                     *\n*        'DATA' blocks will be generated to indicate areas that do    *\n*        not have valid opcodes and are not already defined as being  *\n*        data.                                                        *\n*                                                                     *\n*        The hex value for character text is also valid opcodes.      *\n*        To prevent the disassembler from interpreting a string of    *\n*        character data as instructions, 6 consecutive characters     *\n*        will be considered data.                                     *\n*                                                                     *\n*        Each displacement will be 4-bytes.  Worst case would be a    *\n*        module that consists of only 2-byte opcodes.  Each entry     *\n*        will be a 4-byte displacement, so the table's length would   *\n*        be twice the CSECT's size at most.  Four additional bytes    *\n*        are added for end of table flag (X'FFFFFFFF').               *\n* ------------------------------------------------------------------- *\nLABL0220 DS    0H\n         L     R1,COMMCSLN           CSECT'S TOTAL LENGTH\n         SLL   R1,1                  DOUBLE IT\n         LA    R1,4(R1)              PLUS ROOM FOR END OF TABLE FLAG\n         GETMAIN RU,                 ACQUIRE STORAGE FOR INSTR DISP'S  +\n               LV=(1),               .. SIZE                           +\n               LOC=ANY\n         LR    R9,R1                 INITIALIZE DISP TABLE ADDRESS\n         ST    R1,COMMDISP           SAVE DISPLACEMENT TABLE'S ADDRESS\n         L     R5,COMMTXT            TEXT'S STORAGE ADDRESS\n         MVC   0(4,R9),XFFFF         INITIALIZE END OF TABLE FLAG\n         SR    R6,R6                 INITIALIZE DISPLACEMENT\nLABL0230 DS    0H\n         C     R6,COMMCSLN           BEYOND END OF CSECT?\n         BNL   LABL0440              TEST FOR FINAL DATA BLOCK\n         ICM   R7,15,COMMDATA        FIRST DATA BLOCK\n         BZ    LABL0260              NO DATA BLOCKS\n         USING DATADSCT,R7           DEFINE BASE\n         ITRACE ID=DATACHK1,         TESTING FOR DATA AREA             +\n               RDATA1=R6             .. CURRENT DISPLACEMENT\nLABL0240 DS    0H\n         CLM   R6,15,DATABEGN        DATA AREA BEGINNING DISPLACEMENT?\n         BL    LABL0250              THIS AREA IS BELOW CURRENT DISP\n         BE    LABL0430              DATA AREA FOUND\n         CLM   R6,15,DATAEND         TOO HIGH FOR THIS DATA AREA?\n         BH    LABL0250              YES\n         OC    DATASIZE,DATASIZE     DATA OVER-LAPPING DATA?\n         BNZ   ERR0060               YES.. DATA OVERLAPS DATA\n         B     ERR0020               INSTRUCTION OVERLAPS DATA\nLABL0250 DS    0H\n         ICM   R7,15,DATANEXT        NEXT DATA BLOCK\n         BNZ   LABL0240              LOOP\nLABL0260 DS    0H\n         STC   R6,COMMDWRD           SAVE LAST BYTE\n         TM    COMMDWRD,1            ON AN ODD BOUNDARY?\n         BO    LABL0400              YES\n         L     R0,COMMCSLN           CSECT TOTAL LENGTH\n         SR    R0,R6                 MINUS CURRENT DISPLACEMENT\n         CH    R0,COMMH8             8 OR MORE BYTES LEFT?\n         BL    LABL0280              NO\n         TRT   0(8,R5),ALPHATRT      8 ALPHA CHARACTERS IN A ROW?\n         BNZ   LABL0270              NO.. DON'T GIVE UP COMPLETELY\n         LA    R1,8                  SET FOR 8 BYTES\n         B     LABL0410              SKIP THESE 8\nLABL0270 DS    0H\n         TRT   0(6,R5),ALPHATRT      6 ALPHA CHARACTERS IN A ROW?\n         BNZ   LABL0280              NO\n         LA    R1,6                  SKIP 6 BYTES\n         B     LABL0410              SKIP ALL 6\nLABL0280 DS    0H\n         SR    R8,R8                 CLEAR REGISTER\n         ICM   R8,1,0(R5)            INSERT POSSIBLE OPCODE\n         BZ    LABL0400              NOT A VALID OPCODE\n         SLL   R8,2                  MULTIPLY BY 4\n         A     R8,AOP                PLUS BASE ADDRESS\n         ICM   R8,15,0(R8)           OPCODE ENTRY ADDRESS\n         USING OPDSECT,R8            DEFINE BASE\n         BZ    LABL0400              NOT A VALID OPCODE\n         TM    COMMFLAG,$NOFLOAT     FLOATING POINT ALLOWED?\n         BNO   LABL0290              YES\n         TM    OPFLAGS,$OPFLOAT      FLOATING POINT INSTRUCTION?\n         BO    LABL0400              YES.. NOT VALID\nLABL0290 DS    0H\n         CLI   OPREGS,0              ANY REGISTER RESTRICTIONS?\n         BE    LABL0300              NO\n         L     R15,ARR               REGISTER OPERAND CHECKER\n         BALR  R14,R15               CALL REGISTER OPERAND CHECKER\n         LTR   R15,R15               OPERAND(S) VALID?\n         BNZ   LABL0400              NO\nLABL0300 DS    0H\n         LH    R1,OPLENGTH           OPCODE LENGTH\n         AR    R1,R6                 DISPLACEMENT OF END OF INSTR + 1\n         BCTR  R1,0                  DISPLACEMENT OF END OF INSTR\n         ICM   R7,15,COMMDATA        FIRST DATA BLOCK\n         BZ    LABL0330              NO DATA BLOCKS\nLABL0310 DS    0H\n         CLM   R1,15,DATABEGN        TOO LOW?\n         BL    LABL0320              YES\n         CLM   R6,15,DATAEND         TOO HIGH?\n         BNH   LABL0400              NO, OVERLAPS INTO DATA\nLABL0320 DS    0H\n         ICM   R7,15,DATANEXT        NEXT DATA BLOCK\n         BNZ   LABL0310              LOOP\nLABL0330 DS    0H\n         ICM   R4,15,COMMESD         FIRST ESD BLOCK\n         USING ESDDATA,R4            DEFINE BASE\n         BZ    LABL0360              NO ESD BLOCKS\nLABL0340 DS    0H\n         CLM   R6,7,ESDADDR          ESD LABEL AT THIS POINT?\n         BE    LABL0390              YES.. FORCE DATA BLOCK NOW\n         BH    LABL0350              NO.. BEYOND THIS ESD ENTRY\n         CLM   R1,7,ESDADDR          SPAN THE ESD ITEM?\n         BH    LABL0400              YES.. INSTRUCTION WOULD SPAN LABEL\nLABL0350 DS    0H\n         ICM   R4,15,ESDNEXT         NEXT ESD ITEM\n         BNZ   LABL0340              LOOP\nLABL0360 DS    0H\n         LH    R1,OPLENGTH           OPCODE LENGTH\n         AR    R1,R6                 NEXT OPCODE'S DISPLACEMENT\n         L     R0,COMMCSLN           CSECT LENGTH\n         SR    R0,R1                 MINUS NEXT OPCODE'S DISPLACEMENT\n         CH    R0,COMMH8             8 OR MORE BYTES LEFT?\n         BL    LABL0390              ACCEPT THE OPCODE\n         LH    R1,OPLENGTH           OPCODE LENGTH\n         AR    R1,R5                 PLUS CURRENT INSTRUCTION ADDRESS\n         TRT   0(6,R1),ALPHATRT      6 ALPHA CHARACTERS IN A ROW?\n         BZ    LABL0370              YES.. CHECK FOR EXCEPTIONS\n         LH    R1,OPLENGTH           OPCODE LENGTH\n         AR    R1,R5                 PLUS CURRENT INSTRUCTION ADDRESS\n         SR    R14,R14               CLEAR REGISTER\n         ICM   R14,1,0(R1)           INSERT POSSIBLE OPCODE\n         BZ    LABL0370              NOT A VALID OPCODE\n         SLL   R14,2                 MULTIPLY BY 4\n         A     R14,AOP               PLUS BASE ADDRESS\n         ICM   R14,15,0(R14)         ANOTHER VALID OPCODE?\n         BZ    LABL0370              NO\n         TM    COMMFLAG,$NOFLOAT     FLOATING POINT ALLOWED?\n         BNO   LABL0390              YES\n         TM    OPFLAGS-OPDSECT(R14),$OPFLOAT  FLOATING POINT?\n         BNO   LABL0390              NO\nLABL0370 DS    0H\n         CLI   0(R5),X'05'           BRANCH AND LINK REGISTER?\n         BE    LABL0390              YES, ALLOW IT\n         CLI   0(R5),X'0A'           SVC?\n         BE    LABL0390              YES, ALLOW IT\n         CLI   0(R5),X'07'           BRANCH REGISTER?\n         BE    LABL0380              YES\n         CLI   0(R5),X'45'           SVC?\n         BE    LABL0390              YES, ALLOW IT\n         CLI   0(R5),X'47'           BRANCH?\n         BNE   LABL0400              NO.. NOT VALID OPCODE\nLABL0380 DS    0H\n         TM    1(R5),X'F0'           UNCONDITIONAL BRANCH?\n         BNO   LABL0400              NO.. NOT VALID OPCODE\nLABL0390 DS    0H\n         BAL   R10,LABL2000          ADD A NEW DATA BLOCK IF NECESSARY\n         STCM  R6,15,0(R9)           SAVE VALID DISPLACEMENT\n         LA    R9,4(R9)              NEXT DISPLACEMENT SLOT\n         MVC   0(4,R9),XFFFF         SET END OF TABLE\n         LH    R1,OPLENGTH           INSTRUCTION'S LENGTH\n         B     LABL0420\nLABL0400 DS    0H\n         LA    R1,1                  NEXT BYTE\nLABL0410 DS    0H\n         L     R0,DATASIZE           DATA AREA SIZE SO FAR\n         AR    R0,R1                 PLUS SKIP AMOUNT\n         ST    R0,DATASIZE           SAVE TOTAL\n         TM    PGMFLAG,$BGNDISP      DISPLACEMENT ALREADY SET?\n         BO    LABL0420              YES\n         OI    PGMFLAG,$BGNDISP      STARTING DISPLACEMENT IS KNOWN\n         ST    R6,DATADISP           SAVE STARTING DISPLACEMENT\nLABL0420 DS    0H\n         AR    R5,R1                 NEXT OBJECT CODE BYTE\n         AR    R6,R1                 NEXT NEXT DISPLACEMENT\n         B     LABL0230              LOOP\nLABL0430 DS    0H\n         BAL   R10,LABL2000          ADD DATA AREA IF NECESSARY\n         ICM   R6,15,DATAEND         ENDING DISPLACEMENT\n         LA    R6,1(R6)              NEXT BYTE\n         LR    R5,R6                 COPY DISPLACEMENT\n         A     R5,COMMTXT            PLUS BASE\n         ITRACE ID=DATASKIP,         DISPLACEMENT SKIPPED DUE TO DATA  +\n               RDATA1=R5,            .. NEW TEXT'S ADDRESS             +\n               RDATA2=R6             .. NEW DISPLACEMENT\n         B     LABL0230              LOOP\n* ------------------------------------------------------------------- *\n*        Add last data block if necessary                             *\n* ------------------------------------------------------------------- *\nLABL0440 DS    0H\n         BAL   R10,LABL2000          ADD DATA BLOCK\n* ------------------------------------------------------------------- *\n*        Verify that all BASE and USINGs reference data areas or      *\n*        instruction boundaries.  This is because DROP and USING      *\n*        statements cannot be generated in the middle of an           *\n*        instruction.  Also I will not generate DROPs or USINGs in    *\n*        data areas (I guess this may cause problems with \"S\" type    *\n*        DC instructions).                                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ICM   R3,15,COMMBASE        FIRST BASE ENTRY\n         USING BASEDSCT,R3\n         BZ    LABL0470              NO BASES DEFINED\nLABL0450 DS    0H\n         MVC   WORKDISP,BASEBEGN     SET BEGINNING DISPLACEMENT\n         MVC   EMSG03A,BEGNDISP      SET 'BEGINNING' IN MESSAGE\n         BAL   R2,LABL0500           CHECK BEGINNING DISPLACEMENT\n         MVC   BASEBEGN,WORKDISP     SET VERIFIED DISPLACEMENT\n         CLC   BASEEND,COMMCSLN      BEYOND END OF CSECT?\n         BNH   LABL0460              NO\n         MVC   BASEEND,COMMCSLN      LIMIT TO CSECT LENGTH\nLABL0460 DS    0H\n         MVC   WORKDISP,BASEEND      SET ENDING DISPLACEMENT\n         MVC   EMSG03A,ENDDISP       SET 'ENDING' IN MESSAGE\n         BAL   R2,LABL0500           CHECK ENDING DISPLACEMENT\n         MVC   BASEEND,WORKDISP      SET VERIFIED DISPLACMENT\n         ICM   R3,15,BASENEXT        NEXT BASE BLOCK\n         BNZ   LABL0450              LOOP\nLABL0470 DS    0H\n         ICM   R3,15,COMMUSNG        FIRST USING ENTRY\n         USING USNGDSCT,R3           DEFINE BASE\n         BZ    LABL0490              NO USINGS\nLABL0480 DS    0H\n         TM    USNGFLAG,$USNGND      DISPLACEMENTS?\n         BO    LABL0485              NO\n         MVC   WORKDISP,USNGBEGN     SET BEGINNING DISPLACEMENT\n         MVC   EMSG03A,BEGNDISP      SET 'BEGINNING' IN MESSAGE\n         BAL   R2,LABL0500           CHECK BEGINNING DISPLACEMENT\n         MVC   USNGBEGN,WORKDISP     SET VERIFIED DISPLACEMENT\n         MVC   WORKDISP,USNGEND      SET ENDING DISPLACEMENT\n         MVC   EMSG03A,ENDDISP       SET 'ENDING' IN MESSAGE\n         BAL   R2,LABL0500           CHECK ENDING DISPLACEMENT\n         MVC   USNGEND,WORKDISP      SET VERIFIED DISPLACEMENT\nLABL0485 DS    0H\n         ICM   R3,15,USNGNEXT        NEXT USING BLOCK\n         BNZ   LABL0480              LOOP\nLABL0490 DS    0H\n         TM    COMMFLAG,$ERROR       ERROR DETECTED YET?\n         BO    EXIT0000              YES.. STOP\n         B     LABL0570\nLABL0500 DS    0H\n         ICM   R7,15,COMMDATA        FIRST DATA\n         BZ    LABL0530              NO DATA AREAS\nLABL0510 DS    0H\n         CLC   WORKDISP,DATABEGN     POSSIBLY IN DATA?\n         BL    LABL0520              NO\n         CLC   WORKDISP,DATAEND      WITHIN DATA?\n         BNHR  R2                    YES, DISP IS OK\nLABL0520 DS    0H\n         ICM   R7,15,DATANEXT        NEXT DATA BLOCK\n         BNZ   LABL0510              LOOP\nLABL0530 DS    0H\n         L     R1,COMMDISP           DISPLACEMENT TABLE ADDRESS\nLABL0540 DS    0H\n         CLC   XFFFF,0(R1)           END OF TABLE REACHED?\n         BE    LABL0560              YES.. INVALID BOUNDARY\n         CLC   WORKDISP,0(R1)        DISPLACEMENT FOUND?\n         BER   R2                    YES.. GOOD\n         BL    LABL0560              INVALID BOUNDARY\nLABL0550 DS    0H\n         LA    R1,4(R1)              NEXT DISPLACEMENT\n         B     LABL0540              LOOP\nLABL0560 DS    0H\n         MVC   EMSG03B,4(R3)         SET BLOCK ID\n         UNPK  EMSG03O(9),WORKDISP(5)\n         MVZ   EMSG03O,COMM0F0F      PREPARE FOR TRANSLATE\n         TR    EMSG03O,COMMHXCH      TRANSLATE FOR PRINTING\n         MVI   EMSG03O+8,C' '        RESTORE BLANK\n         SH    R1,COMMH4             BACK-UP 1 INSTRUCTION\n         MVC   WORKDISP,0(R1)        FORCE DISP TO LAST INSTRUCTION\n         UNPK  EMSG03N(9),WORKDISP(5)\n         MVZ   EMSG03N,COMM0F0F      PREPARE FOR TRANSLATE\n         TR    EMSG03N,COMMHXCH      TRANSLATE FOR PRINTING\n         MVI   EMSG03N+8,C' '        RESTORE BLANK\n         MVC   PRTDATA(EMSG03L),EMSG03\n         BAL   R10,PRT0000           PRINT MESSAGE\n         BR    R2                    RETURN\n* ------------------------------------------------------------------- *\n*        Generate any labels for ENTRY points within the module       *\n* ------------------------------------------------------------------- *\nLABL0570 DS    0H\n         ICM   R4,15,COMMESD         FIRST ESD ENTRY\n         USING ESDDATA,R4            DEFINE BASE\n         BZ    LABL0610              NO ESD ENTRIES\nLABL0580 DS    0H\n         CLI   ESDTYPE,$ESDLR        LABEL?\n         BE    LABL0590              YES\n         CLI   ESDTYPE,$ESDPC        PRIVATE CODE?\n         BNE   LABL0600              NO\nLABL0590 DS    0H\n         CLC   ESDADDR,COMMCSAD+1    BELOW REQUESTED CSECT?\n         BL    LABL0600              YES\n         CLC   ESDADDR,COMMCSEA+1    ABOVE REQUESTED CSECT?\n         BH    LABL0600              YES\n         CLC   ESDNAME,COMMCSNM      CSECT'S NAME?\n         BE    LABL0600              YES\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,7,ESDADDR          SYMBOL'S ADDRESS IN THE CSECT\n         S     R1,COMMCSAD           CONVERT TO DISPLACEMENT\n         STCM  R1,15,WORKDISP        SET DISPLACEMENT\n         MVC   WORKLABL,ESDNAME      SET LABEL NAME\n         MVI   WORKTYPE,$LABLE       LABEL WILL BE FROM AN ESD ENTRY\n         BAL   R10,LABL1150          ADD LABEL\nLABL0600 DS    0H\n         ICM   R4,15,ESDNEXT         NEXT ESD ENTRY\n         BNZ   LABL0580              LOOP\n* ------------------------------------------------------------------- *\n*        Generate labels for ADCON references                         *\n* ------------------------------------------------------------------- *\nLABL0610 DS    0H\n         ICM   R7,15,COMMDATA        FIRST DATA BLOCK\n         BZ    LABL0690              NO DATA AREAS\nLABL0620 DS    0H\n         CLI   DATATYPE,$DATAACN     ADCON?\n         BNE   LABL0680              NO\n         ICM   R1,15,DATABEGN        DISPLACEMENT TO ADCON\n         A     R1,COMMTXT            PLUS BASE ADDRESS\n         CLI   DATALEN+3,4           4-BYTE ADCON?\n         BE    LABL0630              YES\n         CLI   DATALEN+3,3           3-BYTE ADCON?\n         BE    LABL0640              YES\n         CLI   DATALEN+3,2           2-BYTE ADCON?\n         BE    LABL0650              YES\n         XC    WORKDISP(3),WORKDISP  SET BYTES 1-3 TO ZERO\n         MVC   WORKDISP+3(1),0(R1)   COPY DISPLACEMENT\n         B     LABL0660\nLABL0630 DS    0H\n         MVC   WORKDISP,0(R1)        COPY DISPLACEMENT\n         B     LABL0660\nLABL0640 DS    0H\n         MVI   WORKDISP,X'00'        ZERO BYTE 1\n         MVC   WORKDISP+1(3),0(R1)   COPY DISPLACEMENT\n         B     LABL0660\nLABL0650 DS    0H\n         XC    WORKDISP(2),WORKDISP  CLEAR BYTES 1-2\n         MVC   WORKDISP+2(2),0(R1)   COPY DISPLACEMENT\nLABL0660 DS    0H\n         TM    WORKDISP,X'80'        31-BIT MODE BIT ON?\n         BNO   LABL0670              NO\n         OI    DATAFLAG,$DATA31      SET 31-BIT INDICATOR\n         NI    WORKDISP,X'7F'        TURN BIT OFF (NOT PART OF ADDRESS)\nLABL0670 DS    0H\n         MVI   WORKTYPE,$LABLR       LABEL WILL BE FOR RLD DATA\n         ST    R7,SAVERLD            SAVE DATA RLD ITEM'S ADDRESS\n         BAL   R10,LABL1040          ADD LABEL\n         L     R7,SAVERLD            RESTORE DATA RLD ITEM'S ADDRESS\n         MVC   DATALBA,WORKREF       SET LABEL BLOCK ADDRESS\n         MVC   DATALBD,WORKOPD       SET DISPLACEMENT FROM LABEL\nLABL0680 DS    0H\n         ICM   R7,15,DATANEXT        NEXT BLOCK\n         BNZ   LABL0620              LOOP\nLABL0690 DS    0H\n         MVI   WORKTYPE,C' '         CLEAR LABEL TYPE\n* ------------------------------------------------------------------- *\n*        Scan the object code and generate the reference table        *\n* ------------------------------------------------------------------- *\n         LA    R4,COMMREF            REFERENCE TABLE ANCHOR\n         USING REFDSCT,R4            DEFINE BASE\n         L     R5,COMMTXT            TEXT'S STORAGE ADDRESS\n         SR    R6,R6                 INITIALIZE DISPLACEMENT\nLABL0700 DS    0H\n         C     R6,COMMCSLN           BEYOND END OF CSECT?\n         BNL   LABL3000              YES, QUIT\n         ICM   R7,15,COMMDATA        FIRST DATA BLOCK\n         BZ    LABL0730              NOT WITHIN ANY DATA AREA\n         ITRACE ID=DATACHK2,         TESTING FOR DATA AREA             +\n               RDATA1=R6             .. CURRENT DISPLACEMENT\nLABL0710 DS    0H\n         CLM   R6,15,DATABEGN        TOO LOW FOR THIS DATA AREA?\n         BL    LABL0720              YES\n         CLM   R6,15,DATAEND         TOO HIGH FOR THIS DATA AREA?\n         BH    LABL0720              YES\n         ITRACE ID=DATA1             CURRENTLY IN A DATA AREA\n         ICM   R6,15,DATAEND         ENDING DISPLACEMENT\n         LA    R6,1(R6)              NEXT POSSIBLE INSTRUCTION DISP\n         LR    R5,R6                 COPY DISPLACEMENT\n         A     R5,COMMTXT            PLUS BASE ADDRESS\n         ITRACE ID=NEWADDR1,         NEW ADDRESS AND DISP SET          +\n               RDATA1=R5,            .. CURRENT TEXT ADDRESS           +\n               RDATA2=R6             .. CURRENT DISPLACEMENT\n         B     LABL0700              LOOP\nLABL0720 DS    0H\n         ICM   R7,15,DATANEXT        NEXT DATA BLOCK\n         BNZ   LABL0710              LOOP\nLABL0730 DS    0H\n         STC   R6,COMMDWRD           SAVE LAST BYTE\n         TM    COMMDWRD,1            ODD ADDRESS?\n         BO    ERR0070               YES\n         ITRACE ID=NEWOPCDE,         CHECKING AN OPCODE                +\n               DATA1=(R5),           .. CURRENT OPCODE                 +\n               RDATA2=R6             .. CURRENT DISPLACEMENT\n         SR    R8,R8                 CLEAR REGISTER\n         IC    R8,0(R5)              INSERT POSSIBLE OPCODE\n         SLL   R8,2                  MULTIPLY BY 4\n         A     R8,AOP                PLUS BASE ADDRESS\n         ICM   R8,15,0(R8)           OPCODE ENTRY ADDRESS\n         BZ    ERR0030               NOT A VALID OPCODE\n         USING OPDSECT,R8            DEFINE BASE\n         ITRACE ID=OPCODE,           VALID OPCODE                      +\n               RDATA1=R8,            .. OPCODE TABLE ENTRY'S ADDRESS   +\n               DATA2=(R8)            .. PART OF THE OPCODE TABLE ENTRY\n         TM    COMMFLAG,$NOB2        BYPASS B2 INSTRUCTIONS\n         BO    LABL0740              YES\n         CLI   0(R5),X'B2'           2-BYTE OPCODE?\n         BNE   LABL0740              NO\n         LR    R0,R5                 COPY INSTRUCTION ADDRESS\n         LR    R1,R8                 COPY OPCODE TABLE ENTRY ADDRESS\n         L     R15,AB2               'B2' OPCODES ENTRY POINT\n         BALR  R14,R15               LINK TO DISASMB2\nLABL0740 DS    0H\n         TM    OPFLAGS,$OPREF        REFERENCE GENERATED?\n         BNO   LABL0770              NO\n* ------------------------------------------------------------------- *\n*        Determine if operand 1 references a known BASE, DATA, or     *\n*        USING (DSECT).                                               *\n* ------------------------------------------------------------------- *\n         XC    WORKOP1,WORKOP1       CLEAR REFERENCE 1\n         XC    WORKOP2,WORKOP2       CLEAR REFERENCE 2\n         SR    R1,R1                 CLEAR REGISTER\n         IC    R1,2(R5)              INSERT BASE AND PART OF DISP\n         SRL   R1,4                  SHIFT BASE TO LOW ORDER BITS\n         STC   R1,WORKBASE           SAVE BASE REG\n         XC    WORKDISP,WORKDISP     CLEAR BYTES 1 AND 2\n         MVC   WORKDISP+2(2),2(R5)   COPY BASE AND DISP\n         NI    WORKDISP+2,X'0F'      LEAVE ONLY DISPLACEMENT\n         BAL   R10,LABL1000          DETERMINE REFERENCE\n         ITRACE ID=OP1REF,           OPERAND 1'S LABEL REFERENCE       +\n               DATA1=WORKREF,        .. LABEL BLOCK'S ADDRESS          +\n               DATA2=WORKOPD         .. DISPLACEMENT FROM LABEL\n         MVC   WORKOP1,WORKREF       SAVE OPERAND 1 REFERENCE\n         MVC   WORKOPD1,WORKOPD      SAVE DISPLACEMENT FROM LABEL\n         CLI   OPLENGTH,6            TWO OPERANDS?\n         BNE   LABL0750              NO\n* ------------------------------------------------------------------- *\n*        Determine if operand 2 references a known BASE, DATA, or     *\n*        USING (DSECT).                                               *\n* ------------------------------------------------------------------- *\nLABL0750 DS    0H\n         SR    R1,R1                 CLEAR REGISTER\n         IC    R1,4(R5)              INSERT BASE AND PART OF DISP\n         SRL   R1,4                  SHIFT BASE TO LOW ORDER BITS\n         STC   R1,WORKBASE           SAVE BASE REG\n         XC    WORKDISP,WORKDISP     CLEAR WORK AREA\n         MVC   WORKDISP+2(2),4(R5)   COPY BASE AND DISP\n         NI    WORKDISP+2,X'0F'      LEAVE ONLY DISPLACEMENT\n         BAL   R10,LABL1000          DETERMINE REFERENCE\n         ITRACE ID=OP2REF,           OPERAND 2'S LABEL REFERENCE       +\n               DATA1=WORKREF,        .. LABEL BLOCK'S ADDRESS          +\n               DATA2=WORKOPD         .. DISPLACEMENT FROM LABEL\n         MVC   WORKOP2,WORKREF       SAVE OPERAND 2 REFERENCE\n         MVC   WORKOPD2,WORKOPD      SAVE DISPLACEMENT FROM LABEL\nLABL0760 DS    0H\n         OC    WORKOP1(8),WORKOP1    BOTH REFERENCES ZERO?\n         BZ    LABL0770              YES\n         GETMAIN RU,                 ACQUIRE STORAGE FOR REF BLOCK     +\n               LV=REFL,              .. SIZE                           +\n               LOC=ANY\n         ITRACE ID=NEWREF,           NEW REFERENCE BLOCK               +\n               RDATA1=R1             .. BLOCK'S ADDRESS\n         ST    R1,REFNEXT            CHAIN TO PREVIOUS BLOCK\n         LR    R4,R1                 SET BASE\n         XC    REFNEXT(REFL),REFNEXT CLEAR BLOCK\n         MVC   REFEYE,REF            SET BLOCK ID TO 'REF'\n         MVC   REFOPER1,WORKOP1      SET OPERAND 1 REFERENCE ENTRY\n         MVC   REFOPER2,WORKOP2      SET OPERAND 2 REFERENCE ENTRY\n         MVC   REFDISP1,WORKOPD1     SET DISPLACEMENT FROM LABEL\n         MVC   REFDISP2,WORKOPD2     SET DISPLACEMENT FROM LABEL\n         STCM  R6,15,REFDISPI        REFERENCING INSTRUCTION'S DISP\nLABL0770 DS    0H\n         AH    R5,OPLENGTH           NEXT INSTRUCTION'S ADDRESS\n         AH    R6,OPLENGTH           NEXT INSTRUCTION'S DISPLACEMENT\n         B     LABL0700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Determine if base register is referencing a known BASE,      *\n*        DATA area, or DSECT.  The base register has been isolated    *\n*        in field 'WORKBASE'.                                         *\n*                                                                     *\n*        If a reference is found, 'WORKREF'  will be set to the       *\n*        'LABEL' block assigned to that location.  If no LABEL can    *\n*        determined, 'WORKREF' will be set to zero.                   *\n*                                                                     *\n*        R10 is the return address.                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLABL1000 DS    0H\n         ITRACE ID=FINDLABL,         ATTEMPTING TO FIND A LABEL        +\n               RDATA1=(R6),          .. INSTRUCTION'S DISPLACEMENT     +\n               RDATA2=(R5)           .. INSTRUCTION\n         XC    WORKREF,WORKREF       ASSUME NO VALID REFERENCE\n         ITRACE ID=SRCHBASE          SEARCHING BASE ENTRIES\n         ICM   R3,15,COMMBASE        FIRST BASE ENTRY\n         USING BASEDSCT,R3           DEFINE BASE\nLABL1010 DS    0H\n         BZ    LABL1200              NOT REFERENCING A KNOWN BASE\n         CLC   WORKBASE,BASEREG      CORRECT REGISTER?\n         BNE   LABL1020              NO\n         CLM   R6,15,BASEBEGN        TOO LOW?\n         BL    LABL1020              YES\n         CLM   R6,15,BASEEND         TOO HIGH?\n         BNH   LABL1030              THIS IS A DEFINED BASE\nLABL1020 DS    0H\n         ICM   R3,15,BASENEXT        NEXT BASE\n         B     LABL1010              LOOP\nLABL1030 DS    0H\n         ITRACE ID=BASEFND,          BASE REFERENCE FOUND              +\n               RDATA1=R3,            .. BASE FOR REFERENCE             +\n               DATA2=BASEBEGN        .. A PORTION OF THE ENTRY\n         ICM   R1,15,BASEDISP        DISPLACEMENT TO BASE\n         A     R1,WORKDISP           PLUS DISPLACEMENT FROM BASE\n         STCM  R1,15,WORKDISP        SAVE TOTAL DISPLACEMENT\nLABL1040 DS    0H\n         XC    WORKOPD,WORKOPD       CLEAR DISPLACEMENT FROM LABEL\n         ICM   R7,15,COMMDATA        FIRST DATA ENTRY\nLABL1050 DS    0H\n         BZ    LABL1090              NOT IN A DATA AREA\n         CLC   WORKDISP,DATABEGN     TOO LOW?\n         BL    LABL1060              YES\n         CLC   WORKDISP,DATAEND      TOO HIGH?\n         BNH   LABL1070              NO.. DATA REFERENCED\nLABL1060 DS    0H\n         ICM   R7,15,DATANEXT        NEXT DATA BLOCK\n         B     LABL1050              LOOP\n* ------------------------------------------------------------------- *\n*         DATA area referenced                                        *\n* ------------------------------------------------------------------- *\nLABL1070 DS    0H\n         ITRACE ID=DATAREF,          DATA REFERENCE FOUND              +\n               RDATA1=R7,            .. BASE FOR REFERENCE             +\n               DATA2=DATABEGN        .. A PORTION OF THE ENTRY\n         MVC   WORKLABL,DATA         SET NAME TO 'DATA    '\n         XC    WORKOPD,WORKOPD       ASSUME NO DISPLACEMENT\n         CLI   DATATYPE,$DATAUSR     USER DEFINED DATA?\n         BE    LABL1080              YES\n         CLI   DATATYPE,$DATAINT     INTERNALLY DETECTED DATA AREA?\n         BE    LABL1080              YES\n* ------------------------------------------------------------------- *\n*         Data referenced is an RLD item (ADCON, VCON, Q, or CXD).    *\n*         RLD items cannot be sub-divided (we cannot generate         *\n*         a label in the middle of a four byte ADCON for example).    *\n*         The reference will be changed so the label will be defined  *\n*         at the beginning of the RLD and a displacement from the     *\n*         label will be returned in WORKOPD.                          *\n* ------------------------------------------------------------------- *\n         ICM   R0,15,WORKDISP        DISPLACEMENT\n         ICM   R1,15,DATABEGN        DISPLACEMENT\n         STCM  R1,15,WORKDISP        CHANGE TO DATA ORIGIN\n         SR    R0,R1                 MINUS ORIGIN\n         STCM  R0,15,WORKOPD         DISPLACEMENT FROM LABEL\nLABL1080 DS    0H\n         CLI   WORKTYPE,$LABLR       LABEL FOR AN RLD REFERENCE?\n         BE    LABL1150              YES\n         MVI   WORKTYPE,$LABLD       DATA LABEL\n         B     LABL1150\n* ------------------------------------------------------------------- *\n*         CSECT reference from a defined BASE                         *\n* ------------------------------------------------------------------- *\nLABL1090 DS    0H\n         ITRACE ID=CSECTREF,         DATA REFERENCE FOUND              +\n               RDATA1=R3,            .. BASE FOR REFERENCE             +\n               DATA2=BASEBEGN        .. A PORTION OF THE ENTRY\n         CLI   WORKTYPE,$LABLR       WORKING ON A RLD ITEM?\n         BE    LABL1100              YES\n         MVI   WORKTYPE,$LABLI       INSTRUCTION LABEL\nLABL1100 DS    0H\n         MVC   WORKLABL,CHARZERO     SET NAME TO '0000'\n         SR    R15,R15               CLEAR REGISTER\n         ICM   R15,3,COMMPFXL        PREFIX'S LENGTH\n         BZ    LABL1110              PREFIX NOT DEFINED\n         BCTR  R15,0                 FOR EXECUTE\n         EX    R15,LABLBMVC          SET LABEL PREFIX\n         B     LABL1120\nLABL1110 DS    0H\n         MVC   WORKLABL,DATA         SET LABEL PREFIX\nLABL1120 DS    0H\n         L     R1,COMMDISP           DISPLACEMENT TABLE ADDRESS\nLABL1130 DS    0H\n         CLC   XFFFF,0(R1)           END OF TABLE?\n         BE    LABL1140              YES\n         CLC   WORKDISP,0(R1)        DISPLACEMENT FOUND?\n         BE    LABL1150              YES\n         BL    LABL1140              ONE TOO FAR\n         LA    R1,4(R1)              NEXT DISPLACEMENT\n         B     LABL1130              LOOP\nLABL1140 DS    0H\n         C     R1,COMMDISP           FIRST ONE?\n         BER   R10                   YES, NO VALID LABEL\n         SH    R1,COMMH4             BACK-UP 1 DISPLACEMENT\n         ICM   R0,15,WORKDISP        DISPLACEMENT TO DATA REFERENCED\n         S     R0,0(R1)              MINUS DISPLACEMENT TO LABEL\n         ST    R0,WORKOPD            SET DISPLACEMENT FROM LABEL\n         MVC   WORKDISP,0(R1)        SET DISPLACEMENT TO PREV INSTR\n* ------------------------------------------------------------------- *\n*         Determine where this LABEL goes in the CSECT LABEL chain    *\n* ------------------------------------------------------------------- *\nLABL1150 DS    0H\n         ITRACE ID=ADDLABEL,         CSECT REFERENCE                   +\n               DATA1=WORKDISP        .. DISPLACEMENT REFERENCED\n         LA    R3,COMMLABL           FORWARD POINTER'S ADDRESS\n         ICM   R9,15,COMMLABL        FIRST CSECT LABEL\n         USING LABLDSCT,R9           DEFINE BASE\n         BZ    LABL1170              INSERT ON END OF CHAIN\nLABL1160 DS    0H\n         CLC   LABLDISP,WORKDISP     TEST DISPLACEMENT\n         BE    LABL1190              DUPLICATE\n         BH    LABL1170              INSERT NEW NAME HERE\n         LA    R3,LABLNEXT           CURRENT BLOCK'S FWD POINTER ADDR\n         ICM   R9,15,LABLNEXT        NEXT CSECT LABEL\n         BNZ   LABL1160              LOOP\n* ------------------------------------------------------------------- *\n*         A new CSECT LABEL needs to be generated                     *\n* ------------------------------------------------------------------- *\nLABL1170 DS    0H\n         GETMAIN RU,                 ACQUIRE A NEW LABEL BLOCK         +\n               LV=LABLL,             .. SIZE                           +\n               LOC=ANY\n         ITRACE ID=NEWLABL,          NEW CSECT LABEL                   +\n               RDATA1=R1,            .. BLOCK'S ADRESS                 +\n               DATA2=WORKDISP        .. LABEL'S DISPLACEMENT\n         ST    R1,LABLNEXT-LABLDSCT(R3)  PREVIOUS BLOCK'S FWD POINTER\n         ST    R9,LABLNEXT-LABLDSCT(R1)  NEXT BLOCK'S ADDRESS\n         LR    R9,R1                 SET BASE\n         MVC   LABLEYE,LABL          SET BLOCK ID\n         CLI   WORKTYPE,$LABLE       ESD LABEL?\n         BE    LABL1180              YES\n         TM    COMMFLAG,$SEQLABL     SEQUENTIAL LABELS?\n         BO    LABL1180              YES.. SUFFIX WILL BE CREATED LATER\n         UNPK  WORKLABL+4(5),WORKDISP+2(3)\n         MVZ   WORKLABL+4(8),COMM0F0F  TURN OFF ZONES\n         TR    WORKLABL+4(8),COMMHXCH  TRANSLATE TO PRINTABLE\nLABL1180 DS    0H\n         MVC   LABLNAME,WORKLABL     SET LABEL'S NAME\n         MVC   LABLDISP,WORKDISP     SET DISPLACEMENT\n         MVC   LABLTYPE,WORKTYPE     SET LABEL TYPE\nLABL1190 DS    0H\n         ST    R9,WORKREF            SET REFERENCE TO THIS LABEL\n         CLI   LABLTYPE,$LABLD       LABEL TYPE CURRENTLY 'DATA'?\n         BER   R10                   YES\n         CLI   WORKTYPE,$LABLI       WAS REQUEST FOR INSTRUCTION LABEL?\n         BNER  R10                   NO\n         MVC   LABLNAME(4),WORKLABL  CHANGE PREFIX\n         BR    R10\nLABLBMVC MVC   WORKLABL(0),COMMPFX   SET PREFIX\n* ------------------------------------------------------------------- *\n*         No defined CSECT reference was found, try a DSECT           *\n* ------------------------------------------------------------------- *\nLABL1200 DS    0H\n         ITRACE ID=SRCHDSCT          SEARCHING DSECT ENTRIES\n         ICM   R3,15,COMMUSNG        FIRST USING BLOCK\n         USING USNGDSCT,R3           DEFINE BASE\nLABL1210 DS    0H\n         BZR   R10                   NOT REFERENCING A DSECT\n         CLC   WORKBASE,USNGBASE     CORRECT REGISTER?\n         BNE   LABL1220              NO\n         TM    USNGFLAG,$USNGND      DISPLACEMENTS ON USING STATEMENT?\n         BO    LABL1230              NO\n         CLM   R6,15,USNGBEGN        TOO LOW?\n         BL    LABL1220              YES\n         CLM   R6,15,USNGEND         TOO HIGH?\n         BNH   LABL1230              NO, DSECT REFERENCE LOCATED\nLABL1220 DS    0H\n         ICM   R3,15,USNGNEXT        NEXT USING BLOCK\n         B     LABL1210              LOOP\nLABL1230 DS    0H\n         L     R2,USNGDSA            ASSOCIATED DSECT BLOCK'S ADDRESS\n         ITRACE ID=DSCTFND,          DSECT REFERENCE                   +\n               RDATA1=R3,            .. USING BLOCK'S ADDRESS          +\n               RDATA2=R2             .. DSECT BLOCK'S ADDRESS\n         ICM   R9,15,DSCTLBA         FIRST LABEL BLOCK'S ADDRESS\n         BZR   R10                   NO VALID LABEL KNOWN\n         ICM   R0,15,USNGDISP        SET OFFSET INTO DSECT\nLABL1240 DS    0H\n         ICM   R1,15,LABLDISP        DISPLACEMENT TO LABEL\n         SR    R1,R0                 MINUS DISPLACEMENT TO LABEL\n         CLM   R1,15,WORKDISP        DISPLACEMENTS MATCH?\n         BNH   LABL1250              EQUAL OR LOW.. TAKE IT\n         ICM   R9,15,LABLNEXT        NEXT LABEL\n         BNZ   LABL1240              LOOP\n         BR    R10                   RETURN\nLABL1250 DS    0H\n         ITRACE ID=LABLFND,          LABEL WITHIN THE DSECT FOUND      +\n               RDATA1=R9,            .. LABEL BLOCK'S ADDRESS          +\n               DATA2=LABLNAME        .. LABEL\n         ICM   R0,15,WORKDISP        DISPLACEMENT FROM INSTRUCTION\n         SR    R0,R1                 DISPLACEMENT TO LABEL\n         STCM  R0,15,WORKOPD         SAVE DISPLACEMENT FROM THE LABEL\n         ST    R9,WORKREF            LABEL BLOCK'S ADDRESS\n         BR    R10                   RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Add DATA blocks                                              *\n*                                                                     *\n*        R10 is the return address                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLABL2000 DS    0H\n         OC    DATASIZE,DATASIZE     ANY DATA\n         BZR   R10                   NO DATA\n         LA    R2,COMMDATA           ANCHOR'S ADDRESS\n         ICM   R7,15,COMMDATA        FIRST DATA AREA\n         BZ    LABL2020              NO DATA AREAS\nLABL2010 DS    0H\n         CLC   DATABEGN,DATADISP     DOES IT GO HERE?\n         BH    LABL2020              YES\n         LA    R2,DATANEXT           NEXT BLOCK'S POINTER\n         ICM   R7,15,DATANEXT        NEXT DATA BLOCK'S ADDRESS\n         BNZ   LABL2010              LOOP\nLABL2020 DS    0H\n         GETMAIN RU,                 ACQUIRE STORAGE FOR DATA BLOCK    +\n               LV=DATAL,             .. SIZE                           +\n               LOC=ANY\n         ITRACE ID=NEWDATA,          NEW BLOCK DATA BLOCK              +\n               RDATA1=R1             .. BLOCK'S ADDRESS\n         ST    R1,0(R2)              CHAIN PREVIOUS BLOCK TO NEW\n         ST    R7,DATANEXT-DATADSCT(R1)   CHAIN NEXT BLOCK TO NEW BLOCK\n         LR    R7,R1                 SET BASE\n         MVC   DATAEYE,DATA          SET BLOCK IDENTIFIER\n         MVC   DATABEGN,DATADISP     STARTING DISPLACEMENT\n         LR    R1,R6                 CURRENT DISPLACEMENT\n         C     R1,COMMCSLN           BEYOND END OF CSECT?\n         BL    LABL2030              NO\n         L     R1,COMMCSLN           LIMIT TO CSECT LENGTH\n         B     LABL2040\nLABL2030 DS    0H\n         BCTR  R1,0\nLABL2040 DS    0H\n         STCM  R1,15,DATAEND         ENDING DISPLACEMENT\n         S     R1,DATABEGN           STARTING DISPLACEMENT\n         LA    R1,1(R1)              PLUS 1\n         STCM  R1,15,DATALEN         DATA AREA SIZE\n         XC    DATASIZE,DATASIZE     CLEAR DATA SKIPPED\n         XC    DATADISP,DATADISP     CLEAR STARTING DISPLACEMENT\n         MVI   DATATYPE,$DATAINT     INTERNALLY DETECTED DATA\n         MVC   DATANAME,COMMBLKS     INITIALIZE NAME\n         XC    DATALBA,DATALBA       INITIALIZE LABEL BLOCK ADDRESS\n         XC    DATALBD,DATALBD       INITIALIZE DISPLACEMENT FROM LABEL\n         NI    PGMFLAG,255-$BGNDISP  RESET FLAG\n         BR    R10\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        If sequential LABELs are desired, run the LABEL chain and    *\n*        set the suffix in the non-ESD LABELs.                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLABL3000 DS    0H\n         TM    COMMFLAG,$SEQLABL     SEQUENTIALLY NUMBERED LABELS?\n         BNO   EXIT0000              NO\n         ICM   R9,15,COMMLABL        FIRST LABEL\n         BZ    EXIT0000              NO LABELS TO NUMBER\n         ITRACE ID=SEQNBR\nLABL3010 DS    0H\n         CLI   LABLTYPE,$LABLE       ESD TYPE LABEL?\n         BE    LABL3020              YES, DON'T MODIFY IT\n         AP    LABLNBR,P10           ADD TO LABEL COUNTER\n         MVC   EDITWORK,EDITWORD     INITIALIZE WITH EDIT WORD\n         ED    EDITWORK,LABLNBR      EDIT LABEL NUMBER\n         MVC   LABLNAME+4(4),EDITWORK+2\nLABL3020 DS    0H\n         ICM   R9,15,LABLNEXT        NEXT LABEL BLOCK\n         BNZ   LABL3010              LOOP\n         B     EXIT0000              EXIT\nERR0010  DS    0H\n         MVC   EMSG01NM,USNGDSNM     SET DSECT'S NAME\n         MVC   PRTDATA(EMSG01L),EMSG01\n         BAL   R10,PRT0000           PRINT ERROR MESSAGE\n         OI    COMMFLAG,$ERROR+$ABORT\n         B     EXIT0000              AND EXIT\nERR0020  DS    0H\n         UNPK  EMSG02B(9),DATABEGN(5)\n         MVZ   EMSG02B,COMM0F0F      PREPARE FOR TRANSLATE\n         TR    EMSG02B,COMMHXCH      TRANSLATE FOR PRINTING\n         MVI   EMSG02B+8,C' '        RESTORE BLANK\n         UNPK  EMSG02E(9),DATAEND(5) UNPACK ENDING DISPLACEMENT\n         MVZ   EMSG02E,COMM0F0F      PREPARE FOR TRANSLATE\n         TR    EMSG02E,COMMHXCH      TRANSLATE FOR PRINTING\n         MVI   EMSG02E+8,C' '        RESTORE BLANK\n         MVC   PRTDATA(EMSG02L),EMSG02\n         BAL   R10,PRT0000           PRINT MESSAGE\n         OI    COMMFLAG,$ERROR+$ABORT\n         B     EXIT0000              AND EXIT\nERR0030  DS    0H\n         MVC   PRTDATA(EMSG04L),EMSG04\n         BAL   R10,PRT0000           PRINT ERROR MESSAGE\n         OI    COMMFLAG,$ERROR+$ABORT\n         B     EXIT0000              AND EXIT\nERR0040  DS    0H\n         MVC   PRTDATA(EMSG06L),EMSG06\n         BAL   R10,PRT0000           PRINT ERROR MESSAGE\n         OI    COMMFLAG,$ERROR+$ABORT\n         B     EXIT0000              AND EXIT\nERR0060  DS    0H\n         MVC   PRTDATA(EMSG08L),EMSG08\n         BAL   R10,PRT0000           PRINT ERROR MESSAGE\n         OI    COMMFLAG,$ERROR+$ABORT\n         B     EXIT0000              AND EXIT\nERR0070  DS    0H\n         MVC   PRTDATA(EMSG09L),EMSG09\n         BAL   R10,PRT0000           PRINT ERROR MESSAGE\n         OI    COMMFLAG,$ERROR+$ABORT\n         B     EXIT0000              AND EXIT\nPRT0000  DS    0H\n         MVI   PRTCMD,$PRTPRT        SET COMMAND\n         LA    R1,PRTBLOK            SET PARAMETER BLOCK ADDRESS\n         L     R15,APR               PRINT MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO PRINT MODULE\n         BR    R10                   RETURN\nEXIT0000 DS    0H\n         TM    COMMDD,$DSECTDD       DISDSECT DD PRESENT?\n         BNO   EXIT0010              NO\n         ITRACE ID=CLOSE\n         CLOSE PREDCB\n         L     R0,PREIOSZ            I/O AREA SIZE\n         L     R1,PREIOA             I/O AREA ADDRESS\n         FREEMAIN RU,                                                  +\n               A=(1),                                                  +\n               LV=(0)\nEXIT0010 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nAM24     DS    0H\n         LA    R14,0(R14)         CLEAR HIGH BIT(S)\n         BSM   R0,R14             RETURN IN 24-BIT MODE\nAM31     DS    0H\n         LA    R14,0(R14)         CLEAR HIGH BIT(S)\n         O     R14,X80            SET 31-BIT MODE\n         BSM   R0,R14             RETURN IN 31-BIT MODE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nSAVE08   DC    18F'0'                REGISTER SAVE AREA\nWORKOP1  DC    A(0)                  OPERAND 1 REFERENCE\nWORKOP2  DC    A(0)                  OPERAND 2 REFERENCE\nWORKREF  DC    A(0)                  REFERENCED LABEL BLOCK\nSAVERLD  DC    A(0)                  SAVED RLD DATA ITEM ADDRESS\nPREIOA   DC    A(0)                  PRE-PROCESSED DSECT I/O AREA\nPREIOSZ  DC    A(0)                  SIZE OF PREIOA\nX80      DC    A(X'80000000')\nWORKOPD  DC    XL4'00'               DISPLACEMENT FROM LABEL\nWORKOPD1 DC    XL4'00'               DISPLACEMENT FROM LABEL (OPER 1)\nWORKOPD2 DC    XL4'00'               DISPLACEMENT FROM LABEL (OPER 2)\nWORKDISP DC    XL4'00'               DISPLACEMENT FROM WORK BASE\nDATADISP DC    XL4'00'               STARTING DISPLACEMENT\nDATASIZE DC    XL4'00'               SIZE OF CURRENT DATA AREA\nH4       DC    H'4'\nPGMFLAG  DC    X'00'\n$BGNDISP EQU   X'01'                 .. DATA AREA BEGIN DISP KNOWN\nLABLNBR  DC    PL3'0'                COUNTER FOR SEQUENTIAL LABELS\nP10      DC    P'10'                 CONSTANT\nEDITWORK DC    X'F02020202020'       EDIT WORK AREA\nEDITWORD DC    X'F02020202020'       CONSTANT\nDSECTOFF DC    XL2'00'               DISPLACEMENT TO LABEL IN DSECT\nWORKLABL DC    CL9' '                TEMP LABEL NAME\nWORKBASE DC    X'00'                 BASE FOR CURRENT OPERAND\nWORKTYPE DC    C' '                  LABEL TYPE BEING CREATED\nDSCT_ID  DC    CL8'DSECT'\nLABL_ID  DC    CL8'LABEL'\nEQU_ID   DC    CL8'EQU'\nREF      DC    CL8'REF'\nESD      DC    CL8'ESD '\nDATA     DC    CL8'DATA'\nLABL     DC    CL8'LABL'\nCHARZERO DC    CL4'0000'\nXFFFF    DC    X'FFFFFFFF'\nBEGNDISP DC    CL09'BEGINNING'\nENDDISP  DC    CL09'ENDING   '\nEMSG01   DC    C'DISASM0801E DSECT '\nEMSG01NM DC    CL08' '\n         DC    C' is not present, but is referenced on a USING statemen+\n               t'\nEMSG01L  EQU   *-EMSG01\nEMSG02   DC    C'DISASM0802E instructions overlap data defined at '\nEMSG02B  DC    CL8' '\n         DC    C' to '\nEMSG02E  DC    CL8' '\n         DC    C' '\nEMSG02L  EQU   *-EMSG02\nEMSG03   DC    C'DISASM0803W '\nEMSG03A  DC    CL9' '\n         DC    C' Displacement in a '\nEMSG03B  DC    CL8' '\n         DC    C' block is changed from '\nEMSG03O  DC    CL8' '\n         DC    C' to '\nEMSG03N  DC    CL8' '\n         DC    C' to reference an instruction boundary'\nEMSG03L  EQU   *-EMSG03\nEMSG04   DC    C'DISASM0804E Invalid opcode during reference table gene+\n               ration'\nEMSG04L  EQU   *-EMSG04\nEMSG05   DC    C'DISASM0805E Label '\nEMSG05N  DC    CL8' '\n         DC    C' is not in DSECT '\nEMSG05D  DC    CL8' '\n         DC    C' as requested on a USING statement'\nEMSG05L  EQU   *-EMSG05\nEMSG06   DC    C'DISASM0806E Label not found in DSECT during reference +\n               table generation'\nEMSG06L  EQU   *-EMSG06\nEMSG08   DC    C'DISASM0808E overlapping data areas not detected by DIS+\n               ASM02'\nEMSG08L  EQU   *-EMSG08\nEMSG09   DC    C'DISASM0809E Attempt to locate an instruction on an odd+\n                displacement boundary'\nEMSG09L  EQU   *-EMSG09\nPREDCB   DCB   DSORG=PO,                                               +\n               DDNAME=DISDSECT,                                        +\n               EODAD=LABL0160,                                         +\n               RECFM=VB,                                               +\n               MACRF=R\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRTBLOK  PRTBLOK  TYPE=CSECT\n         SPACE 2\n         LTORG\nALPHATRT DS    0C 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'    00-0F\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'    10-1F\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'    20-2F\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'    30-3F\n         DC    X'00FFFFFFFFFFFFFFFFFFFF00FFFFFFFF'    40-4F BLANK AND .\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFF00FFFFFF'    50-5F *\n         DC    X'0000FFFFFFFFFFFFFFFFFF00FFFFFFFF'    60-6F - / AND ,\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'    70-7F\n         DC    X'FF000000000000000000FFFFFFFFFFFF'    80-8F LOWER A-I\n         DC    X'FF000000000000000000FFFFFFFFFFFF'    90-9F LOWER J-R\n         DC    X'FFFF0000000000000000FFFFFFFFFFFF'    A0-AF LOWER S-Z\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'    B0-BF\n         DC    X'FF000000000000000000FFFFFFFFFFFF'    C0-CF UPPER A-I\n         DC    X'FF000000000000000000FFFFFFFFFFFF'    D0-DF UPPER J-R\n         DC    X'FFFF0000000000000000FFFFFFFFFFFF'    E0-EF UPPER S-Z\n         DC    X'00000000000000000000FFFFFFFFFFFF'    F0-FF 0-9\n         SPACE 2\n         COPY  DISASMDA\n*---------------------------------------------------------------------*\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nDISASM00 DISASM00 TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         DCBD  DSORG=PO\n*---------------------------------------------------------------------*\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY REGEQU\n         END  DISASM08\n./ ADD NAME=DISASM09\n         TITLE 'DISASM09 - SOURCE CODE GENERATOR'\n         MACRO\n         SVCDEF &SVCNBR,&DESC\n         LCLA   &LEN\n&LEN     SETA   K'&DESC-2\n         DC     AL2(&LEN+5)          TOTAL ENTRY LENGTH\n         DC     AL2(&LEN)            DESCRIPTION'S LENGTH\n         DC     X'&SVCNBR'           SVC NUMBER\n         DC     C&DESC               DESCRIPTION\n         MEND\n         COPY   DISASMGB\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISASM09                                             *\n*                                                                    *\n*  Function:                                                         *\n*   Source code generator (This is it folks).                        *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISASM09 CSECT\nDISASM09 AMODE 31\nDISASM09 RMODE 24\n         USING DISASM09,R12,R10\n         USING DISASM00,R11\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               SET BASE REG\n         B     GEN0000               SKIP EYECATCHER\n         DC    CL8'DISASM09'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nGEN0000  DS    0H\n         LA    R10,2048(R12)         LOAD 2ND BASE..\n         LA    R10,2048(R10)         .. 4K FROM 1ST BASE\n         LA    R1,SAVE09             OUR SAVE AREA ADDRESS\n         ST    R13,4(R1)             CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         ITRACE ID=ENTRY\n         TM    COMMDD,$PUNCHDD       IS DISPUNCH DD PRESENT?\n         BNO   GEN0010               NO\n         ITRACE ID=OPENPNCH\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         OPEN  (DISPUNCH,OUTPUT)     OPEN DISPUNCH\n         BAL   R14,AM31              SWITCH TO 24-BIT MODE\nGEN0010  DS    0H\n         MVC   COMMSUBH(SUBHEADL),SUBHEAD\n         LA    R1,SUBHEADL           SUBHEADING LENGTH\n         STH   R1,COMMSUBL           SET LENGTH\n         MVI   COMMSUBL,X'FF'        SET NON-CENTERED INDICATOR\n         MVC   SRCLABL,COMMCSNM      SET CSECT NAME\n         MVC   SRCMNEM,CSCTOPCD      SET MNEMONIC TO 'CSECT'\n         MVC   SRCDISP,CHARZERO      DISPLACEMENT IS ZERO\n         MVC   PRTDATA(SRCL),SRC     SET PRINT DATA\n         BAL   R9,PRT0000            PRINT CSECT STATEMENT\n         BAL   R9,PUNCH000           PUNCH CSECT STATEMENT\n* ------------------------------------------------------------------- *\n*      Generate ENTRY statements                                      *\n* ------------------------------------------------------------------- *\n         ICM   R3,15,COMMESD         FIRST ESD ENTRY\n         USING ESDDATA,R3            DEFINE BASE\n         BZ    GEN0050               NO ESD ENTRIES\nGEN0020  DS    0H\n         CLI   ESDTYPE,$ESDLR        LABEL?\n         BE    GEN0030               YES\n         CLI   ESDTYPE,$ESDPC        PRIVATE CODE?\n         BNE   GEN0040               NO\nGEN0030  DS    0H\n         CLC   ESDADDR,COMMCSAD+1    TOO LOW FOR OUR CSECT?\n         BL    GEN0040               YES\n         CLC   ESDADDR,COMMCSEA+1    TOO HIGH FOR OUR CSECT?\n         BH    GEN0040               YES\n         CLC   ESDNAME,COMMCSNM      SAME AS THE CSECT NAME?\n         BE    GEN0040               YES\n         MVC   SRC(SRCL),SRC-1       CLEAR SOURCE AREA\n         MVC   SRCMNEM,ENTROPCD      SET OPCODE (ENTRY)\n         MVC   SRCOPER(L'ESDNAME),ESDNAME\n         MVC   PRTDATA(SRCL),SRC     SET PRINT DATA\n         BAL   R9,PRT0000            PRINT ENTRY STATEMENT\n         BAL   R9,PUNCH000           PUNCH ENTRY STATEMENT\nGEN0040  DS    0H\n         ICM   R3,15,ESDNEXT         NEXT ESD ENTRY\n         BNZ   GEN0020               LOOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nGEN0050  DS    0H\n         SR    R3,R3                 INITIALIZE INSTRUCTION DISP\n         STCM  R3,15,DISPI           SET INSTRUCTION DISPLACEMENT\n         L     R4,COMMTXT            INITIALIZE INSTRUCTION ADDRESS\n         ICM   R5,15,COMMLABL        FIRST CSECT LABEL\n         USING LABLDSCT,R5           DEFINE BASE\n         BZ    GEN0060               NO LABELS\n         MVC   DISPL,LABLDISP        SET LABEL DISPLACEMENT\n         B     GEN0070\nGEN0060  DS    0H\n         MVI   DISPL,X'FF'           SET EOF FLAG\nGEN0070  DS    0H\n         ICM   R6,15,COMMREF         FIRST REFERENCE ENTRY\n         USING REFDSCT,R6            DEFINE BASE\n         BZ    GEN0080               NO REFERENCES\n         MVC   DISPR,REFDISPI        SET REFERENCE DISP\n         B     GEN0090\nGEN0080  DS    0H\n         MVI   DISPR,X'FF'           SET EOF FLAG\nGEN0090  DS    0H\n         ICM   R7,15,COMMDATA        FIRST DATA AREA\n         USING DATADSCT,R7           DEFINE BASE\n         BZ    GEN0100               NO DATA AREAS\n         MVC   DISPD,DATABEGN        SET DATA AREA DISPLACEMENT\n         B     GEN0110\nGEN0100  DS    0H\n         MVI   DISPD,X'FF'           SET EOF FLAG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Beginning of source generation loop                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nGEN0110  DS    0H\n         ITRACE ID=GENLOOP,          STARTING GEN LOOP                 +\n               DATA1=DISPI,          .. INSTRUCTION DISPLACEMENT       +\n               DATA2=DISPD           .. NEXT DATA AREA DISPLACEMENT\n         C     R3,COMMCSLN           REACHED END OF MODULE?\n         BNL   GEN0700               YES.. COPY ASSEMBLER INPUT\n         CLC   DISPI,DISPL           GEN A LABEL AT THIS TIME?\n         BNE   GEN0130               NO\n* ------------------------------------------------------------------- *\n*        Generate a LABEL                                             *\n* ------------------------------------------------------------------- *\n         MVC   SRC(SRCL),SRC-1       CLEAR SOURCE STATEMENT AREA\n         UNPK  SRCDISP(9),DISPI(5)   UNPACK DISPLACEMENT\n         MVZ   SRCDISP,COMM0F0F      TURN OFF ZONES\n         TR    SRCDISP,COMMHXCH      TRANSLATE TO PRINTABLE\n         MVI   SRCDISP+8,C' '        RESTORE THE BLANK\n         MVC   SRCLABL,LABLNAME      SET LABEL\n         MVC   SRCMNEM,DSOPCD        SET OPCODE TO 'DS'\n         MVC   SRCOPER(L'OPER0H),OPER0H\n         TM    LABLTYPE,$LABLI       LABEL AT AN INSTRUCTION?\n         BO    GEN0115               YES\n         MVC   SRCOPER(L'OPER0C),OPER0C\nGEN0115  DS    0H\n         MVC   PRTDATA(SRCL),SRC     COPY STATEMENT TO PRINT\n         BAL   R9,PRT0000            PRINT SOURCE STATEMENT\n         BAL   R9,PUNCH000           PUNCH SOURCE STATEMENT\n         ICM   R5,15,LABLNEXT        NEXT LABEL\n         BNZ   GEN0120\n         MVI   DISPL,X'FF'           SET END OF FILE\n         B     GEN0130\nGEN0120  DS    0H\n         MVC   DISPL,LABLDISP        SET NEW LABEL DISPLACEMENT\n* ------------------------------------------------------------------- *\n*        Test for DATA area                                           *\n* ------------------------------------------------------------------- *\nGEN0130  DS    0H\n         CLC   DISPI,DISPD           IS THIS DATA?\n         BE    GEN0400               YES\n         BH    ERR0010               INTERNAL ERROR\n         TM    DISPI+3,X'01'         DISPLACEMENT ODD?\n         BO    ERR0040               YES\n* ------------------------------------------------------------------- *\n*        Generate DROP statements for USING blocks                    *\n* ------------------------------------------------------------------- *\n         ICM   R2,15,COMMUSNG        FIRST USING BLOCK\n         USING USNGDSCT,R2           DEFINE BASE\n         BZ    GEN0160               NO USING BLOCKS\nGEN0140  DS    0H\n         TM    USNGFLAG,$USNGND      DISPLACEMENTS?\n         BO    GEN0150               NO.. NEVER NEED A DROP\n         CLC   USNGEND,DISPI         TIME FOR 'DROP' STATEMENT?\n         BNE   GEN0150               NO\n         MVC   SRC(SRCL),SRC-1       CLEAR SOURCE AREA\n         MVC   SRCMNEM,DROPOPCD      SET OPCODE\n         MVI   SRCOPER,C'R'          SET REGISTER PREFIX\n         SR    R1,R1                 CLEAR REGISTER\n         IC    R1,USNGBASE           BASE REGISTER\n         SLL   R1,1                  MULTIPLY BY 2\n         LA    R1,COMMNBR(R1)        NUMBER'S ADDRESS\n         MVC   SRCOPER+1(2),0(R1)    MOVE NUMBER\n         MVC   PRTDATA(SRCL),SRC     SET PRINT DATA\n         BAL   R9,PRT0000            PRINT DROP STATEMENT\n         BAL   R9,PUNCH000           PUNCH DROP STATEMENT\nGEN0150  DS    0H\n         ICM   R2,15,USNGNEXT        NEXT USING BLOCK\n         BNZ   GEN0140               LOOP\n* ------------------------------------------------------------------- *\n*        Generate DROP statements for BASE blocks                     *\n* ------------------------------------------------------------------- *\nGEN0160  DS    0H\n         ICM   R2,15,COMMBASE        FIRST USING BLOCK\n         USING BASEDSCT,R2           DEFINE BASE\n         BZ    GEN0190               NO USING BLOCKS\nGEN0170  DS    0H\n         CLC   BASEEND,DISPI         TIME FOR 'DROP' STATEMENT?\n         BNE   GEN0180               NO\n         MVC   SRC(SRCL),SRC-1       CLEAR SOURCE AREA\n         MVC   SRCMNEM,DROPOPCD      SET OPCODE\n         MVI   SRCOPER,C'R'          SET REGISTER PREFIX\n         SR    R1,R1                 CLEAR REGISTER\n         IC    R1,BASEREG            BASE REGISTER\n         SLL   R1,1                  MULTIPLY BY 2\n         LA    R1,COMMNBR(R1)        NUMBER'S ADDRESS\n         MVC   SRCOPER+1(2),0(R1)    MOVE NUMBER\n         MVC   PRTDATA(SRCL),SRC     SET PRINT DATA\n         BAL   R9,PRT0000            PRINT DROP STATEMENT\n         BAL   R9,PUNCH000           PUNCH DROP STATEMENT\nGEN0180  DS    0H\n         ICM   R2,15,BASENEXT        NEXT BASE BLOCK\n         BNZ   GEN0170               LOOP\n* ------------------------------------------------------------------- *\n*        Generate USING statements for USING blocks                   *\n* ------------------------------------------------------------------- *\nGEN0190  DS    0H\n         ICM   R2,15,COMMUSNG        FIRST USING BLOCK\n         USING USNGDSCT,R2           DEFINE BASE\n         BZ    GEN0270               NO USING BLOCKS\nGEN0200  DS    0H\n         OC    DISPI,DISPI           INITIAL DISPLACEMENT?\n         BNZ   GEN0210               NO\n         TM    USNGFLAG,$USNGND      DISPLACEMENTS?\n         BO    GEN0230               NO..  GENERATE AT DISP ZERO\n         B     GEN0220               YES.. DISPLACEMENTS MUST MATCH\nGEN0210  DS    0H\n         TM    USNGFLAG,$USNGND      DISPLACEMENTS?\n         BO    GEN0260               NO\nGEN0220  DS    0H\n         CLC   USNGBEGN,DISPI        TIME FOR 'USING' STATEMENT?\n         BNE   GEN0260               NO\nGEN0230  DS    0H\n         MVC   SRC(SRCL),SRC-1       CLEAR SOURCE AREA\n         MVC   SRCMNEM,USNGOPCD      SET OPCODE\n         MVC   SRCOPER(8),USNGDSNM   SET DSECT'S NAME\n         CLC   USNGLBNM,COMMBLKS     LABEL NAME PRESENT?\n         BE    GEN0235               NO\n         MVC   SRCOPER(8),USNGLBNM   SET LABEL NAME\nGEN0235  DS    0H\n         LA    R1,SRCOPER            FIRST CHARACTER\nGEN0240  DS    0H\n         CLI   0(R1),C' '            BLANK?\n         BE    GEN0250               YES\n         LA    R1,1(R1)              NEXT\n         B     GEN0240               LOOP\nGEN0250  DS    0H\n         ST    R1,GENADDR            SET OUTPUT ADDRESS\n         BAL   R15,GENCOMMA          GENERATE COMMA\n         MVC   WORKREG,USNGBASE      COPY REGISTER\n         BAL   R15,GENREG00          GENERATE REGISTER\n         MVC   PRTDATA(SRCL),SRC     SET PRINT DATA\n         BAL   R9,PRT0000            PRINT USING STATEMENT\n         BAL   R9,PUNCH000           PUNCH USING STATEMENT\nGEN0260  DS    0H\n         ICM   R2,15,USNGNEXT        NEXT USING BLOCK\n         BNZ   GEN0200               LOOP\n* ------------------------------------------------------------------- *\n*        Generate using statements for BASE blocks                    *\n* ------------------------------------------------------------------- *\nGEN0270  DS    0H\n         ICM   R2,15,COMMBASE        FIRST USING BLOCK\n         USING BASEDSCT,R2           DEFINE BASE\n         BZ    GEN0330               NO BASE BLOCKS\nGEN0280  DS    0H\n         CLC   BASEBEGN,DISPI        TIME FOR 'USING' STATEMENT?\n         BNE   GEN0320               NO\n         MVC   SRC(SRCL),SRC-1       CLEAR SOURCE AREA\n         MVC   SRCMNEM,USNGOPCD      SET OPCODE\n         MVC   SRCOPER(8),COMMCSNM   SET OPERAND (CSECT'S NAME)\n         LA    R1,SRCOPER            CURRENT OUTPUT ADDRESS\nGEN0290  DS    0H\n         CLI   0(R1),C' '            BLANK?\n         BE    GEN0300               YES\n         LA    R1,1(R1)              NEXT\n         B     GEN0290               LOOP\nGEN0300  DS    0H\n         ST    R1,GENADDR            SET ADDRESS\n         ICM   R0,15,BASEDISP        DISPLACEMENT REFERRED TO\n         BZ    GEN0310               DIRECTLY AT CSECT\n         MVI   0(R1),C'+'            INSERT PLUS\n         LA    R1,1(R1)              NEXT\n         ST    R1,GENADDR            SET ADDRESS\n         STCM  R0,15,WORKNBR         SET VALUE\n         BAL   R15,GENNBR00          GENERATE NUMERIC VALUE\nGEN0310  DS    0H\n         BAL   R15,GENCOMMA          INSERT COMMA\n         MVC   WORKREG,BASEREG       COPY REGISTER\n         BAL   R15,GENREG00          GENERATE REGISTER\n         MVC   PRTDATA(SRCL),SRC     SET PRINT DATA\n         BAL   R9,PRT0000            PRINT USING STATEMENT\n         BAL   R9,PUNCH000           PUNCH USING STATEMENT\nGEN0320  DS    0H\n         ICM   R2,15,BASENEXT        NEXT BASE BLOCK\n         BNZ   GEN0280               LOOP\n* ------------------------------------------------------------------- *\n*        Generate an instruction                                      *\n* ------------------------------------------------------------------- *\nGEN0330  DS    0H\n         SR    R8,R8                 CLEAR REGISTER\n         ICM   R8,1,0(R4)            POSSIBLE OPCODE\n         BZ    ERR0020               NOT A VALID OPCODE\n         SLL   R8,2                  MULTIPLY BY 4\n         A     R8,AOP                PLUS OPCODE TABLE BASE ADDRESS\n         ICM   R8,15,0(R8)           OPCODE TABLE ENTRY ADDRESS\n         USING OPDSECT,R8            DEFINE BASE\n         BZ    ERR0020               NOT A VALID OPCODE\n         TM    COMMFLAG,$NOB2        BYPASS B2 INSTRUCTIONS?\n         BO    GEN0340               YES\n         CLI   0(R4),X'B2'           B2 INSTRUCTION?\n         BNE   GEN0340               NO\n         LR    R0,R4                 COPY OPCODE'S ADDRESS\n         LR    R1,R8                 COPY B2'S ADDRESS IN DISASMOP\n         L     R15,AB2               B2 INTERPRETER ENTRY POINT\n         BALR  R14,R15               INTERPRET B2 OPCODE\nGEN0340  DS    0H\n         ITRACE ID=GENINSTR,         GENERATING A VALID INSTRUCTION    +\n               DATA1=(R4),           .. INSTRUCTION                    +\n               DATA2=OPMNEM          .. OPCODE TABLE DATA\n         BAL   R9,GEN0620            GENERATE DISP AND HEX\n         SR    R15,R15               CLEAR REGISTER\n         IC    R15,OPFORM            OPCODE FORM\n         SLL   R15,2                 MULTIPLY BY 4\n         LA    R15,FMTTABLE(R15)     GENERATING ROUTINE'S ADDRESS\n         L     R15,0(R15)            LOAD THE ADDRESS\n         BR    R15                   GENERATE THE INSTRUCTION\nGEN0350  DS    0H\n         TM    OPFLAGS,$OPCCA+$OPCCL+$OPCCC   CONDITION CODE CHANGED?\n         BZ    GEN0360               NO\n         MVC   SAVEFLAG,OPFLAGS      SAVE CONDITION CODE FLAGS\nGEN0360  DS    0H\n         TM    OPFLAGS,$OPNCMNT      COMMENT PRESENT?\n         BO    GEN0370               NO\n         MVC   SRCCMNT,OPCMNT        SET COMMENT\nGEN0370  DS    0H\n         ITRACE ID=PRTSRC\n         MVC   PRTDATA(SRCL),SRC     SET PRINT DATA\n         BAL   R9,PRT0000            PRINT THE GENERATED INSTRUCTION\n         ITRACE ID=PUNCHSRC\n         BAL   R9,PUNCH000           PUNCH SOURCE STATEMENT\n         CLC   DISPI,DISPR           LABEL REFERENCE USED?\n         BNE   GEN0390               NO\n         ICM   R6,15,REFNEXT         NEXT REFERENCE BLOCK\n         BZ    GEN0380               NO MORE REFERENCE BLOCKS\n         MVC   DISPR,REFDISPI        SET DISPLACEMENT\n         ITRACE ID=NEXTREF,          WE HAVE A NEW REFERENCE BLOCK     +\n               DATA1=DISPR           .. INSTRUCTION'S DISPLACEMENT\n         B     GEN0390\nGEN0380  DS    0H\n         ITRACE ID=REFEOF            NO MORE REFERENCE BLOCKS\n         MVI   DISPR,X'FF'           SET EOF FLAG\nGEN0390  DS    0H\n         AH    R3,OPLENGTH           UPDATE DISPLACEMENT\n         AH    R4,OPLENGTH           UPDATE INSTRUCTION ADDRESS\n         STCM  R3,15,DISPI           UPDATE CONTROL DATA\n         ITRACE ID=NEWDISPI,         NEW DISPLACEMENT                  +\n               RDATA1=R3,            .. DISPLACEMENT                   +\n               RDATA2=R4             .. ASSOCIATED STORAGE ADDRESS\n         B     GEN0110               LOOP\n* ------------------------------------------------------------------- *\n*        Generate constants                                           *\n* ------------------------------------------------------------------- *\nGEN0400  DS    0H\n         ITRACE ID=GENDATA,          IN A DATA AREA                    +\n               DATA1=DATABEGN,       .. BEGINNING POINT                +\n               DATA2=DATAEND         .. ENDING POINT\n         L     R8,AOP                OPCODE TABLE ADDRESS\n         L     R8,0(R8)              DC'S DUMMY ENTRY ADDRESS\n         CLI   DATATYPE,$DATAACN     AD-CON?\n         BE    GEN0470               YES\n         CLI   DATATYPE,$DATAVCN     V-CON?\n         BE    GEN0520               YES\n         CLI   DATATYPE,$DATACXD     CXD (PSEUDO AREA SIZE)?\n         BE    GEN0550               YES\n         CLI   DATATYPE,$DATAQ       Q (PSEUDO AREA DISPLACEMENT)?\n         BE    GEN0560               YES\n         MVC   WORKNBR,DATAEND       ASSUME FULL DATA SIZE\n         SR    R9,R9                 CLEAR REGISTER\n         CLI   DISPL,X'FF'           END OF LABELS REACHED?\n         BE    GEN0410               YES\n         ICM   R9,15,DISPL           NEXT LABEL'S DISPLACEMENT\n         BCTR  R9,0                  MINUS 1\n         CLM   R9,15,WORKNBR         LABEL WITHIN DATA?\n         BH    GEN0410               NO\n         STCM  R9,15,WORKNBR         LIMIT TO 1 BYTE BEFORE LABEL\nGEN0410  DS    0H\n         ICM   R9,15,WORKNBR         END OF DATA DISPLACEMENT\n         ICM   R0,15,DISPD           STARTING DISPLACEMENT\n         SR    R9,R0                 NUMBER OF BYTES OF DATA MINUS 1\n         LA    R9,1(R9)              FULL NUMBER OF BYTES\n         CH    R9,COMMH8             MORE THAN 8 BYTES?\n         BNH   GEN0420               NO\n         LH    R9,COMMH8             LIMIT TO 8 BYTES\nGEN0420  DS    0H\n         ITRACE ID=DCLEN1,           LENGTH TO LABEL OR END OF AREA    +\n               RDATA1=R9\n         LTR   R9,R9                 LENGTH ZERO?\n         BZ    ERR0030               YES..\n         TRT   0(1,R4),COMMPRT       PRINTABLE CHARACTER?\n         BZ    GEN0450               YES\n         ITRACE ID=HEXDC\n         LR    R15,R9                COPY LENGTH\n         BCTR  R15,0                 MINUS 1\n         EX    R15,NPRTTRT           SCAN FOR ALL NON-PRINTABLE\n         BZ    GEN0430               ALL NON-PRINTABLE\n         LR    R9,R1                 STOPPING POINT\n         SR    R9,R4                 NUMBER OF BYTES SCANNED\nGEN0430  DS    0H\n         ITRACE ID=DCLEN2,           LENGTH OF HEX DATA                +\n               RDATA1=R9\n         STH   R9,OPLENGTH           SET LENGTH IN DC ENTRY\n         BAL   R9,GEN0620            GENERATE OBJECT AND MNEMONIC\n         MVC   SRCOPER(2),HEXDC      SET OPERAND TO X'\n         LA    R1,SRCOPER+2          STARTING DATA POINT\n         LH    R15,OPLENGTH          DATA LENGTH\nGEN0440  DS    0H\n         UNPK  0(3,R1),0(2,R4)       UNPACK DATA\n         MVZ   0(2,R1),COMM0F0F      TURN OFF ZONES\n         TR    0(2,R1),COMMHXCH      TRANSLATE TO PRINTABLE\n         LA    R1,2(R1)              NEXT IN OUTPUT\n         LA    R3,1(R3)              UPDATE DISPLACEMENT\n         LA    R4,1(R4)              NEXT OBJECT MODULE BYTE\n         BCT   R15,GEN0440           LOOP\n         MVI   0(R1),C''''           INSERT ENDING APOSTROPHE\n         B     GEN0600               PRINT/PUNCH\nGEN0450  DS    0H\n         ITRACE ID=CHARDC\n         LR    R15,R9                COPY LENGTH\n         BCTR  R15,0                 MINUS 1\n         EX    R15,PRTTRT            SCAN FOR ALL PRINTABLE\n         BZ    GEN0460               ALL PRINTABLE\n         LR    R9,R1                 COPY STOPPING POINT\n         SR    R9,R4                 NUMBER OF BYTES SCANNED\n         LR    R15,R9                COPY LENGTH\n         BCTR  R15,0                 MINUS 1\nGEN0460  DS    0H\n         ITRACE ID=DCLEN3,           TO END OF DATA OR HEX DATA        +\n               RDATA1=R9,                                              +\n               RDATA2=R15\n         STH   R9,OPLENGTH           SET LENGTH\n         BAL   R9,GEN0620            GENERATE OBJECT AND MNEMONIC\n         MVC   SRCOPER(2),CHARDC     SET OPERAND TO C'\n         EX    R15,CHDCMVC           MOVE CHARACTER DATA\n         LA    R1,SRCOPER+3(R15)     ENDING POINT\n         MVI   0(R1),C''''           INSERT ENDING APOSTROPHE\n         B     GEN0590\nGEN0470  DS    0H\n         ITRACE ID=GENADCON          GENERATING AN ADCON\n         MVC   OPLENGTH,DATALEN+2    SET LENGTH\n         BAL   R9,GEN0620            GENERATE OBJECT AND MNEMONIC\n         MVC   SRCOPER(2),=C'AL'     SET ADCON-LENGTH\n         MVC   SRCOPER+2(1),DATALEN+3\n         OI    SRCOPER+2,X'F0'       MAKE IT PRINTABLE\n         MVI   SRCOPER+3,C'('        OPEN PARENTHESIS\n         ICM   R1,15,DATALBA         LABEL BLOCK'S ADDRESS\n         MVC   SRCOPER+4(8),LABLNAME-LABLDSCT(R1)\n         LA    R1,SRCOPER+4\nGEN0480  DS    0H\n         CLI   0(R1),C' '            BLANK?\n         BE    GEN0490               YES\n         LA    R1,1(R1)              NEXT\n         B     GEN0480               LOOP\nGEN0490  DS    0H\n         ST    R1,GENADDR            SET CURRENT ADDRESS\n         SR    R0,R0                 CLEAR REGISTER\n         ICM   R0,15,DATALBD         DISPLACEMENT FROM LABEL\n         BZ    GEN0500               NO DISPLACEMENT\n         MVI   0(R1),C'+'            INSERT PLUS SIGN\n         LA    R1,1(R1)              NEXT\n         ST    R1,GENADDR            SAVE ADDRESS\n         STCM  R0,15,WORKNBR         SET DISPLACEMENT\n         BAL   R15,GENNBR00          GENERATE DISPLACEMENT\nGEN0500  DS    0H\n         L     R1,GENADDR            CURRENT ADDRESS\n         TM    DATAFLAG,$DATA31      31-BIT MODE BIT ON?\n         BNO   GEN0510               NO\n         MVC   0(AM31INDL,R1),AM31IND   GEN 31-BIT MODE\n         B     GEN0590               DONE\nGEN0510  DS    0H\n         BAL   R15,GENPRN2           GENERATE CLOSING PARENTHESIS\n         B     GEN0590               DONE\nGEN0520  DS    0H\n         ITRACE ID=GENVCON\n         MVC   OPLENGTH,DATALEN+2    SET LENGTH\n         BAL   R9,GEN0620            GENERATE OBJECT AND MNEMONIC\n         MVC   SRCOPER(2),=C'VL'     SET VCON-LENGTH\n         MVC   SRCOPER+2(1),DATALEN+3\n         OI    SRCOPER+2,X'F0'       MAKE IT PRINTABLE\n         MVI   SRCOPER+3,C'('        OPEN PARENTHESIS\n         MVC   SRCOPER+4(8),DATANAME COPY EXTERNAL SYMBOL NAME\n         LA    R1,SRCOPER+4\nGEN0530  DS    0H\n         CLI   0(R1),C' '            BLANK?\n         BE    GEN0540               YES\n         LA    R1,1(R1)              NEXT\n         B     GEN0530               LOOP\nGEN0540  DS    0H\n         MVI   0(R1),C')'            CLOSING PARENTHESIS\n         B     GEN0590\nGEN0550  DS    0H\n         MVC   OPLENGTH,DATALEN+2    SET LENGTH\n         BAL   R9,GEN0620            GENERATE OBJECT AND MNEMONIC\n         MVC   SRCMNEM,CXDOPCD       CHANGE OPCODE TO CXD\n         B     GEN0590\nGEN0560  DS    0H\n         ITRACE ID=GENQ\n         MVC   OPLENGTH,DATALEN+2    SET LENGTH\n         BAL   R9,GEN0620            GENERATE OBJECT AND MNEMONIC\n         MVC   SRCOPER(2),=C'QL'     SET Q-LENGTH\n         MVC   SRCOPER+2(1),DATALEN+3\n         OI    SRCOPER+2,X'F0'       MAKE IT PRINTABLE\n         MVI   SRCOPER+3,C'('        OPEN PARENTHESIS\n         MVC   SRCOPER+4(8),DATANAME COPY EXTERNAL SYMBOL NAME\n         LA    R1,SRCOPER+4\nGEN0570  DS    0H\n         CLI   0(R1),C' '            BLANK?\n         BE    GEN0580               YES\n         LA    R1,1(R1)              NEXT\n         B     GEN0570               LOOP\nGEN0580  DS    0H\n         MVI   0(R1),C')'            CLOSING PARENTHESIS\nGEN0590  DS    0H\n         AH    R3,OPLENGTH           UPDATE DISPLACEMENT\n         AH    R4,OPLENGTH           NEXT OBJECT MODULE BYTE\nGEN0600  DS    0H\n         MVC   PRTDATA(SRCL),SRC     SET DATA FOR PRINTING\n         BAL   R9,PRT0000            PRINT\n         BAL   R9,PUNCH000           PUNCH\n         STCM  R3,15,DISPI           SET NEW DISPLACEMENT\n         STCM  R3,15,DISPD           SET DATA DISPLACEMENT\n         ITRACE ID=DCDONE,           DC PROCESSING COMPLETE            +\n               DATA1=DISPD,          .. DATA DISPLACEMENT NOW          +\n               DATA2=DATAEND         .. END OF DATA AREA\n         CLC   DISPD,DATAEND         BEYOND END OF DATA AREA?\n         BNH   GEN0110               NO\n         ITRACE ID=NEXTDATA,                                           +\n               RDATA1=R7,            .. CURRENT DATA BLOCK ADDRESS     +\n               DATA2=DATANEXT        .. NEXT DATA BLOCK'S ADDRESS\n         ICM   R7,15,DATANEXT        NEXT DATA BLOCK\n         BNZ   GEN0610               SET NEXT DATA DISP\n         MVI   DISPD,X'FF'           SET END OF FILE\n         B     GEN0110\nGEN0610  DS    0H\n         MVC   DISPD,DATABEGN        SET BEGINNING OF NEXT DATA AREA\n         B     GEN0110\n* ------------------------------------------------------------------- *\n*        Generate displacement, mnemonic, and instruction in hex      *\n* ------------------------------------------------------------------- *\nGEN0620  DS    0H\n         MVC   SRC(SRCL),SRC-1       CLEAR SOURCE STATEMENT\n         UNPK  SRCDISP(9),DISPI(5)   UNPACK DISPLACEMENT\n         MVZ   SRCDISP,COMM0F0F      TURN OFF ZONES\n         TR    SRCDISP,COMMHXCH      TRANSLATE TO PRINTABLE\n         MVI   SRCDISP+8,C' '        RESTORE BLANK\n         MVC   SRCMNEM,OPMNEM        SET MNEMONIC\n         LH    R1,OPLENGTH           INSERT INSTRUCTION LENGTH\n         BCTR  R1,0                  ADJUST FOR EXECUTE\n         EX    R1,OBJMVC1            COPY FOR UNPACKING\n         UNPK  OBJOUT1(5),OBJIN(3)   UNPACK OBJECT CODE\n         MVZ   OBJOUT1,COMM0F0F      TURN OFF ZONES\n         TR    OBJOUT1,COMMHXCH      TRANSLATE TO PRINTABLE\n         MVI   OBJOUT1+4,C' '        RESTORE THE BLANK\n         UNPK  OBJOUT2(5),OBJIN+2(3) UNPACK OBJECT CODE\n         MVZ   OBJOUT2,COMM0F0F      TURN OFF ZONES\n         TR    OBJOUT2,COMMHXCH      TRANSLATE TO PRINTABLE\n         MVI   OBJOUT2+4,C' '        RESTORE THE BLANK\n         UNPK  OBJOUT3(5),OBJIN+4(3) UNPACK OBJECT CODE\n         MVZ   OBJOUT3,COMM0F0F      TURN OFF ZONES\n         TR    OBJOUT3,COMMHXCH      TRANSLATE TO PRINTABLE\n         MVI   OBJOUT3+4,C' '        RESTORE THE BLANK\n         SLL   R1,1                  MULTIPLY LENGTH BY 2\n         LA    R1,OBJLEN(R1)         TRANSLATE LENGTH TO OUTPUT LENGTH\n         LH    R1,0(R1)              OUTPUT LENGTH\n         EX    R1,OBJMVC2            COPY OUTPUT TO SOURCE AREA\n         LA    R1,SRCOPER            1ST OPERAND BYTE\n         ST    R1,GENADDR            SAVE CURRENT ADDRESS\n         BR    R9\nOBJMVC1  MVC   OBJIN(0),0(R4)        COPY DATA TO BE DISPLAYED\nOBJMVC2  MVC   SRCOBJ1(0),OBJOUT1    COPY DATA TO BE DISPLAYED\n* ------------------------------------------------------------------- *\n*        Copy assembler input statements                              *\n* ------------------------------------------------------------------- *\nGEN0700  DS    0H\n         TM    COMMFLAG,$ASMIN       ANY ASSEMBLER INPUT?\n         BNO   GEN0730               NO\n         ITRACE ID=ASMIN             COPYING ASSEMBLER INPUT\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         OPEN  (SYSIN,INPUT)         OPEN SYSIN\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\nGEN0710  DS    0H\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         GET   SYSIN                 READ A SYSIN STATEMENT\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         MVC   SRCLABL(80),0(R1)     COPY TO SOURCE STATEMENT AREA\n         BAL   R9,PUNCH000           COPY TO PUNCH FILE\n         B     GEN0710               LOOP\nGEN0720  DS    0H\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         ITRACE ID=ASMINEND          END OF SYSIN REACHED\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         CLOSE SYSIN                 CLOSE SYSIN\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         B     GEN0800\nGEN0730  DS    0H\n         ITRACE ID=NOASMIN           NO ASSEMBLER INPUT TO COPY\n* ------------------------------------------------------------------- *\n*        Generate REGEQU statement                                    *\n* ------------------------------------------------------------------- *\nGEN0800  DS    0H\n         MVC   SRC(SRCL),SRC-1       CLEAR SOURCE STATEMENT\n         MVC   SRCMNEM(L'REGEQU),REGEQU\n         BAL   R9,PUNCH000           PUNCH STATEMENT\n* ------------------------------------------------------------------- *\n*        Generate END statement                                       *\n* ------------------------------------------------------------------- *\n         DS    0H\n         MVC   SRC(SRCL),SRC-1       CLEAR SOURCE STATEMENT\n         MVC   SRCMNEM,ENDOPCD       SET OPCODE 'END'\n         MVC   SRCOPER(L'COMMCSNM),COMMCSNM\n         BAL   R9,PUNCH000           PUNCH END STATEMENT\n         B     EXIT0000              ALL DONE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate RR format 1 instructions                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENRR100 DS    0H\n         ITRACE ID=GENRR1            GENERATE SVC FORMAT INSTRUCTION\n         SR    R14,R14               CLEAR REGISTER\n         IC    R14,1(R4)             INSERT REGISTERS\n         SRL   R14,4                 SHIFT R1 TO LOW BITS\n         STC   R14,WORKREG           SET REGISTER\n         BAL   R15,GENREG00          GENERATE R1\n         BAL   R15,GENCOMMA          INSERT COMMA\n         MVC   WORKREG,1(R4)         COPY R1 AND R2\n         NI    WORKREG,X'0F'         LEAVE ONLY R2\n         BAL   R15,GENREG00          GENERATE R2\n         B     GEN0350               COMPLETE\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate RR format 2 instructions                      *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENRR200 DS    0H\n         ITRACE ID=GENRR2            GENERATE SVC FORMAT INSTRUCTION\n         XC    WORKNBR,WORKNBR       CLEAR NUMERIC\n         MVC   WORKNBR+3(1),1(R4)    COPY SVC NUMBER\n         BAL   R15,GENNBR00          GENERATE SVC NUMBER\n         TM    OPFLAGS,$OPSVC        IS THIS AN SVC?\n         BNO   GEN0350               NOPE\n         L     R1,ASVCDESC           SVC DESCRIPTIONS\n         USING SVCDSECT,R1           DEFINE BASE\nGENRR210 DS    0H\n         CLI   SVCLEN,X'FF'          END OF TABLE?\n         BE    GEN0350               YES.. NO SVC COMMENT\n         CLC   SVCNBR,1(R4)          SVC NUMBER LOCATED?\n         BE    GENRR220              YES\n         AH    R1,SVCLEN             NEXT SVC\n         B     GENRR210              LOOP\nGENRR220 DS    0H\n         SR    R15,R15               CLEAR REGISTER\n         ICM   R15,3,SVCCMNTL        COMMENT'S LENGTH\n         BCTR  R15,0                 MINUS 1\n         MVC   OPCMNT,COMMBLKS       INITIALIZE COMMENT\n         EX    R15,SVCCMVC           MOVE SVC COMMENT\n         B     GEN0350               COMPLETE\nSVCCMVC  MVC   OPCMNT(0),SVCCMNT     SET COMMENT\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate RR branch instructions                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENRR300 DS    0H\n         ITRACE ID=GENRRBR           GENERATE RR MASK TYPE INSTRUCTION\n         SR    R14,R14               CLEAR REGISTER\n         IC    R14,1(R4)             INSERT MASK\n         SRL   R14,4                 SHIFT TO LOW BITS\n         XC    WORKNBR,WORKNBR       ZERO BYTE 1-3\n         STC   R14,WORKNBR+3         SET BYTE 4\n         TM    SAVEFLAG,$OPCCA       ARITHMETIC MNEMONICS?\n         BO    GENRR310              YES\n         TM    SAVEFLAG,$OPCCC       COMPARE MNEMONICS?\n         BO    GENRR320              YES\n         LA    R1,GENRRCCL           LOGICAL EXTENDED MNEMONICS\n         B     GENRR330\nGENRR310 DS    0H\n         LA    R1,GENRRCCA           ARITHMETIC EXTENDED MNEMONICS\n         B     GENRR330\nGENRR320 DS    0H\n         LA    R1,GENRRCCC           COMPARE EXTENDED MNEMONICS\nGENRR330 DS    0H\n         CLI   0(R1),X'FF'           EXTENDED MNEMONIC NOT FOUND?\n         BE    GENRR340              NO\n         CLM   R14,1,0(R1)           MASK FOUND?\n         BE    GENRR350              YES\n         LA    R1,7(R1)              NEXT MASK/EXTENDED MNEMONIC\n         B     GENRR330              LOOP\nGENRR340 DS    0H\n         BAL   R15,GENNBR00          GENERATE MASK VALUE\n         BAL   R15,GENCOMMA          INSERT COMMA\n         B     GENRR360              GENERATE OPERAND\nGENRR350 DS    0H\n         MVC   SRCMNEM,1(R1)         SET EXTENDED MNEMONIC\nGENRR360 DS    0H\n         MVC   WORKREG,1(R4)         COPY REGISTER\n         NI    WORKREG,X'0F'         LEAVE ONLY REGISTER VALUE\n         BAL   R15,GENREG00          GENERATE REGISTER\n         B     GEN0350               COMPLETE\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate RX format instructions                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENRX00  DS    0H\n         ITRACE ID=GENRX             GENERATE RX FORMAT INSTRUCTION\n         TM    OPFLAGS,$OPEXT        EXTENDED FORMATS?\n         BO    GENB000               YES\n         SR    R14,R14               CLEAR REGISTER\n         IC    R14,1(R4)             INSERT R1 AND INDEX REGISTER\n         SRL   R14,4                 SHIFT R1 INTO LOW BITS\n         STC   R14,WORKREG           SET REGISTER\n         BAL   R15,GENREG00          GENERATE REGISTER\n         BAL   R15,GENCOMMA          INSERT COMMA\n         MVC   WORKX,1(R4)           COPY INDEX REGISTER\n         NI    WORKX,X'0F'           LEAVE ONLY INDEX REGISTER VALUE\n         MVI   WORKOPER,$OPER1+$OPERNDX\n         BAL   R9,GENOP000           GENERATE OPERAND\n         B     GEN0350               COMPLETE\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate S format instructions                         *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENS00   DS    0H\n         ITRACE ID=GENS              GENERATE S FORMAT INSTRUCTION\n         MVI   WORKOPER,$OPER1       SET OPERAND 1\n         BAL   R9,GENOP000           GENERATE OPERAND\n         B     GEN0350               COMPLETE\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate BRANCH instructions                           *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENB000  DS    0H\n         ITRACE ID=GENBRNCH          GENERATE BRANCH INSTRUCTIONS\n         SR    R14,R14               CLEAR REGISTER\n         IC    R14,1(R4)             INSERT CONDITION CODE AND REGISTER\n         SRL   R14,4                 SHIFT MASK INTO LOW BITS\n         XC    WORKNBR,WORKNBR       ZERO BYTE 1\n         STC   R14,WORKNBR+3         SET BYTE 4\n         TM    SAVEFLAG,$OPCCA       ARITHMETIC MNEMONICS?\n         BO    GENB010               YES\n         TM    SAVEFLAG,$OPCCC       COMPARE MNEMONICS?\n         BO    GENB020               YES\n         LA    R1,GENBCCL            RR FORM3 EXTENDED MNEMONIC TABLE\n         B     GENB030\nGENB010  DS    0H\n         LA    R1,GENBCCA            ARITHMETIC MNEMONICS\n         B     GENB030\nGENB020  DS    0H\n         LA    R1,GENBCCC            COMPARE MNEMONICS\nGENB030  DS    0H\n         CLI   0(R1),X'FF'           EXTENDED MNEMONIC NOT FOUND?\n         BE    GENB040               NO\n         CLM   R14,1,0(R1)           MASK FOUND?\n         BE    GENB050               YES\n         LA    R1,7(R1)              NEXT MASK/EXTENDED MNEMONIC\n         B     GENB030               LOOP\nGENB040  DS    0H\n         MVC   SRCMNEM,BCOPCD        SET OPCODE TO 'BC'\n         BAL   R15,GENNBR00          GENERATE MASK\n         BAL   R15,GENCOMMA          GENRATE COMMA\n         B     GENB060\nGENB050  DS    0H\n         MVC   SRCMNEM,1(R1)         SET EXTENDED MNEMONIC\nGENB060  DS    0H\n         MVI   WORKOPER,$OPER1+$OPERNDX\n         MVC   WORKX,1(R4)           COPY INDEX REGISTER\n         NI    WORKX,X'0F'           LEAVE ONLY INDEX REGISTER VALUE\n         BAL   R9,GENOP000           GENERATE OPERAND\n         B     GEN0350               COMPLETE\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate SI format instructions                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENSI00  DS    0H\n         ITRACE ID=GENSI             GENERATE SI FORMAT INSTRUCTION\n         MVI   WORKOPER,$OPER1       OPERAND 1\n         BAL   R9,GENOP000           GENERATE OPERAND\n         L     R15,GENADDR           CURRENT OUTPUT ADDRESS\n         CLC   DISPI,DISPR           LABEL REFERENCE?\n         BNE   GENSI30               NO\n         OC    REFDISP1,REFDISP1     DISPLACEMENT ZERO?\n         BNZ   GENSI30               NO\n         ICM   R2,15,REFOPER1        LABEL REFERENCE?\n         BZ    GENSI30               LABEL NOT REFERENCED\n         DROP  R5\n         USING LABLDSCT,R2           DEFINE BASE\n         ICM   R1,15,LABLEQU         FIRST EQUATE\n         USING EQUDATA,R1            DEFINE BASE\n         BZ    GENSI30\nGENSI10  DS    0H\n         CLC   EQUVALUE,1(R4)        EQUATE VALUE MATCH?\n         BE    GENSI20               YES\n         ICM   R1,15,EQUNEXT         NEXT EQUATE BLOCK\n         BNZ   GENSI10               LOOP\n         B     GENSI30\nGENSI20  DS    0H\n         MVI   0(R15),C','           INSERT COMMA\n         MVC   1(8,R15),EQULABEL     INSERT LABEL\n         B     GEN0350               COMPLETE\nGENSI30  DS    0H\n         MVC   0(3,R15),GENSIDLM     INSERT COMMA AND X'\n         MVC   3(2,R15),SRCOBJ1+2    COPY THE VALUE\n         MVI   5(R15),C''''          INSERT CLOSING QUOTE\n         B     GEN0350               COMPLETE\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate RS format instructions (SHIFTS)               *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENRS100 DS    0H\n         ITRACE ID=GENRS1            GENERATE SHIFT TYPE INSTRUCTIONS\n         SR    R14,R14               CLEAR REGISTER\n         IC    R14,1(R4)             INSERT R1\n         SRL   R14,4                 SHIFT R1 INTO LOW BITS\n         STC   R14,WORKREG           SET REGISTER NUMBER\n         BAL   R15,GENREG00          GENERATE REGISTER\n         BAL   R15,GENCOMMA          GENERATE COMMA\n         MVI   WORKOPER,$OPER1       OPERAND 1\n         BAL   R9,GENOP000           GENERATE OPERAND\n         B     GEN0350               COMPLETE\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate RS format instructions (BXH, BXLE, ..)        *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENRS200 DS    0H\n         ITRACE ID=GENRS2            GENERATE BXH, BXLE, ..\n         SR    R14,R14               CLEAR REGISTER\n         IC    R14,1(R4)             INSERT R1\n         SRL   R14,4                 SHIFT R1 INTO LOW BITS\n         STC   R14,WORKREG           SET REGISTER NUMBER\n         BAL   R15,GENREG00          GENERATE REGISTER\n         BAL   R15,GENCOMMA          GENERATE COMMA\n         MVC   WORKREG,1(R4)         SET R3\n         NI    WORKREG,X'0F'         LEAVE ONLY R3\n         BAL   R15,GENREG00          GENERATE REGISTER\n         BAL   R15,GENCOMMA          GENERATE COMMA\n         MVI   WORKOPER,$OPER1       OPERAND 1\n         BAL   R9,GENOP000           GENERATE OPERAND\n         B     GEN0350               DONE\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate RS format instructions (CLM, ICM, ..)         *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENRS300 DS    0H\n         ITRACE ID=GENRS3            GENERATE CLM, ICM..\n         SR    R14,R14               CLEAR REGISTER\n         IC    R14,1(R4)             INSERT R1\n         SRL   R14,4                 SHIFT R1 INTO LOW BITS\n         STC   R14,WORKREG           SET REGISTER NUMBER\n         BAL   R15,GENREG00          GENERATE REGISTER\n         BAL   R15,GENCOMMA          GENERATE COMMA\n         XC    WORKNBR,WORKNBR       SET WORK NUMERIC\n         MVC   WORKNBR+3(1),1(R4)    COPY MASK\n         NI    WORKNBR+3,X'0F'       LEAVE ONLY MASK\n         BAL   R15,GENNBR00          GENERATE MASK\n         BAL   R15,GENCOMMA          GENERATE COMMA\n         MVI   WORKOPER,$OPER1       SET FOR OPERAND 1\n         BAL   R9,GENOP000           GENERATE LABEL\n         B     GEN0350               DONE\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate SS character instructions                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENSS100 DS    0H\n         ITRACE ID=GENSS1            GENERATE SS CHARACTER INSTRUCTIONS\n         MVC   WORKX,1(R4)           SET LENGTH\n         MVI   WORKOPER,$OPER1+$OPERL\n         BAL   R9,GENOP000           GENERATE LABEL 1\n         BAL   R15,GENCOMMA          GENERATE COMMA\n         MVI   WORKOPER,$OPER2       OPERAND 2, NO LENGTH\n         BAL   R9,GENOP000           GENERATE LABEL 2\n         B     GEN0350               COMPLETE\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate SS packed decimal instructions                *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENSS200 DS    0H\n         ITRACE ID=GENSS2            GENERATE SS CHARACTER INSTRUCTIONS\n         SR    R1,R1                 CLEAR REGISTER\n         IC    R1,1(R4)              INSERT LENGTHS\n         SRL   R1,4                  SHIFT L1 TO LOW BITS\n         STC   R1,WORKX              SET LENGTH 1\n         MVI   WORKOPER,$OPER1+$OPERL\n         BAL   R9,GENOP000           GENERATE OPERAND 1\n         BAL   R15,GENCOMMA          GENERATE COMMA\n         MVC   WORKX,1(R4)           COPY LENGTHS\n         NI    WORKX,X'0F'           LEAVE ONLY L2\n         MVI   WORKOPER,$OPER2+$OPERL\n         BAL   R9,GENOP000           GENERATE OPERAND 2\n         B     GEN0350               COMPLETE\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate SS (MVCP, MVCS, MVCK)                         *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENSS300 DS    0H\n         ITRACE ID=GENSS3            GENERATE SS CHARACTER INSTRUCTIONS\n         SR    R14,R14               CLEAR REGISTER\n         IC    R14,1(R4)             INSERT R1 AND R3\n         SRL   R14,4                 SHIFT R1 TO LOW BITS\n         STC   R14,WORKX             SET R1 AS IF AN INDEX REGISTER\n         MVI   WORKOPER,$OPER1+$OPERNDX\n         BAL   R9,GENOP000           GENERATE OPERAND\n         BAL   R15,GENCOMMA          GENERATE COMMA\n         MVI   WORKOPER,$OPER2       OPERAND 2\n         BAL   R9,GENOP000           GENERATE OPERAND\n         BAL   R15,GENCOMMA          GENERATE COMMA\n         MVC   WORKREG,1(R4)         COPY R1 AND R3\n         NI    WORKREG,X'0F'         LEAVE ONLY R3\n         BAL   R15,GENREG00          GENERATE R3\n         B     GEN0350               COMPLETE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate SS (SRP)                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENSS400 DS    0H\n         ITRACE ID=GENSS4            GENERATE SS CHARACTER INSTRUCTIONS\n         SR    R14,R14               CLEAR REGISTER\n         IC    R14,1(R4)             INSERT R1 AND R3\n         SRL   R14,4                 SHIFT R1 TO LOW BITS\n         STC   R14,WORKX             SET R1 AS IF AN INDEX REGISTER\n         MVI   WORKOPER,$OPER1+$OPERL\n         BAL   R9,GENOP000           GENERATE OPERAND\n         BAL   R15,GENCOMMA          GENERATE COMMA\n         MVI   WORKOPER,$OPER2       OPERAND 2\n         BAL   R9,GENOP000           GENERATE OPERAND\n         BAL   R15,GENCOMMA          GENERATE COMMA\n         MVC   WORKREG,1(R4)         COPY R1 AND R3\n         NI    WORKREG,X'0F'         LEAVE ONLY R3\n         BAL   R15,GENREG00          GENERATE R3\n         B     GEN0350               COMPLETE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate B2 with no operand format                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENB2000 DS    0H\n         ITRACE ID=GENB2             GENERATE B2\n         B     GEN0350               COMPLETE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate B2 \"S\" format                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENB2S00 DS    0H\n         ITRACE ID=GENB2S            GENERATE B2 \"S\" FORMAT\n         MVI   WORKOPER,$OPER1       SET OPERAND 1\n         BAL   R9,GENOP000           GENERATE OPERAND\n         B     GEN0350               COMPLETE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate B2 \"R\" format                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENB2R00 DS    0H\n         ITRACE ID=GENB2R            GENERATE B2 \"R\" FORMAT\n         SR    R14,R14               CLEAR REGISTER\n         IC    R14,3(R4)             INSERT REGISTER\n         SRL   R14,4                 SHIFT TO LOW BITS\n         STC   R14,WORKREG           SET REGISTER\n         BAL   R15,GENREG00          GENERATE REGISTER\n         B     GEN0350               COMPLETE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate B2 \"RR\" format                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENB2RR0 DS    0H\n         ITRACE ID=GENB2RR           GENERATE B2 \"RR\" FORMAT\n         SR    R14,R14               CLEAR REGISTER\n         IC    R14,3(R4)             INSERT REGISTER\n         SRL   R14,4                 SHIFT TO LOW BITS\n         STC   R14,WORKREG           SET REGISTER\n         BAL   R15,GENREG00          GENERATE REGISTER R1\n         BAL   R15,GENCOMMA          GENERATE COMMA\n         MVC   WORKREG,3(R4)         COPY R1 AND R2\n         NI    WORKREG,X'0F'         CLEAR REGISTER R1\n         BAL   R15,GENREG00          GENERATE REGISTER R2\n         B     GEN0350               COMPLETE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate COMMAs                                        *\n*                                                                     *\n*   R15 is the return address                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENCOMMA DS    0H\n         L     R14,GENADDR           CURRENT ADDRESS\n         MVI   0(R14),C','           INSERT COMMA\n         LA    R14,1(R14)            NEXT\n         ST    R14,GENADDR           SAVE ADDRESS\n         BR    R15                   DONE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate OPEN parenthesis                              *\n*                                                                     *\n*   R15 is the return address                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENPRN1  DS    0H\n         L     R14,GENADDR           CURRENT ADDRESS\n         MVI   0(R14),C'('           INSERT OPEN PARENTHESIS\n         LA    R14,1(R14)            NEXT\n         ST    R14,GENADDR           SAVE ADDRESS\n         BR    R15                   DONE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate CLOSE parenthesis                             *\n*                                                                     *\n*   R15 is the return address                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENPRN2  DS    0H\n         L     R14,GENADDR           CURRENT ADDRESS\n         MVI   0(R14),C')'           INSERT CLOSE PARENTHESIS\n         LA    R14,1(R14)            NEXT\n         ST    R14,GENADDR           SAVE ADDRESS\n         BR    R15                   DONE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate REGISTERS                                     *\n*                                                                     *\n*   WORKREG  is the value of the register to Generate                 *\n*                                                                     *\n*   R15 is the return address                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENREG00 DS    0H\n         SR    R1,R1                 CLEAR REGISTER\n         IC    R1,WORKREG            INSERT REGISTER VALUE\n         SLL   R1,1                  MULTIPLY BY 2\n         LA    R1,COMMNBR(R1)\n         L     R14,GENADDR           CURRENT ADDRESS IN OPER AREA\n         MVI   0(R14),C'R'           SET REGISTER PREFIX\n         MVC   1(2,R14),0(R1)        COPY REGISTER VALUE\n         LA    R14,2(R14)            MINIMUM LENGTH\n         CLI   0(R14),C' '           BLANK?\n         BE    GENREG10              YES\n         LA    R14,1(R14)            2 DIGIT REGISTER NUMBER\nGENREG10 DS    0H\n         ST    R14,GENADDR           SAVE CURRENT ADDRESS\n         BR    R15                   DONE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate data operands with or without index           *\n*                                                                     *\n*   WORKOPER flags control Generated source                           *\n*                                                                     *\n*   R9 is the return address                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENOP000 DS    0H\n         CLC   DISPI,DISPR           LABEL REFERENCE?\n         BNE   GENOP070              NO\n         TM    WORKOPER,$OPER2       OPERAND 2?\n         BO    GENOP010              YES\n         MVC   WORKNBR,REFDISP1      COPY DISPLACEMENT\n         ICM   R2,15,REFOPER1        LABEL REFERENCE?\n         BZ    GENOP080              LABEL NOT REFERENCED\n         B     GENOP020\nGENOP010 DS    0H\n         MVC   WORKNBR,REFDISP2      COPY DISPLACEMENT\n         ICM   R2,15,REFOPER2        LABEL REFERENCE?\n         BZ    GENOP090              LABEL NOT REFERENCED\nGENOP020 DS    0H\n         L     R14,GENADDR           CURRENT ADDRESS IN SRCOPER\n         MVC   0(L'LABLNAME,R14),LABLNAME\nGENOP030 DS    0H\n         CLI   0(R14),C' '           BLANK?\n         BE    GENOP040              YES\n         LA    R14,1(R14)            NEXT\n         B     GENOP030              LOOP\nGENOP040 DS    0H\n         ST    R14,GENADDR           SAVE ADDRESS\n         OC    WORKNBR,WORKNBR       DISPLACEMENT ZERO?\n         BZ    GENOP050              YES, DIRECT REFERENCE\n         MVI   0(R14),C'+'           INSERT PLUS\n         LA    R14,1(R14)            NEXT\n         ST    R14,GENADDR           SAVE ADDRESS\n         BAL   R15,GENNBR00          GENERATE DISPLACEMENT\nGENOP050 DS    0H\n         TM    WORKOPER,$OPERL       LENGTH WITH OPERAND?\n         BO    GENOP060              YES\n         TM    WORKOPER,$OPERNDX     INDEX WITH OPERAND?\n         BNOR  R9                    NO, DONE\n         CLI   WORKX,0               INDEX ZERO?\n         BER   R9                    YES\n         BAL   R15,GENPRN1           OPEN PARENTHESIS\n         MVC   WORKREG,WORKX         SET REGISTER\n         BAL   R15,GENREG00          GEN REGISTER\n         BAL   R15,GENPRN2           CLOSE PARENTHESIS\n         BR    R9                    DONE\nGENOP060 DS    0H\n         BAL   R15,GENPRN1           OPEN PARENTHESIS\n         SR    R1,R1                 CLEAR REGISTER\n         IC    R1,WORKX              INSERT LENGTH\n         LA    R1,1(R1)              PLUS 1\n         STCM  R1,15,WORKNBR         SET LENGTH\n         BAL   R15,GENNBR00          GEN LENGTH\n         BAL   R15,GENPRN2           CLOSE PARENTHESIS\n         BR    R9                    DONE\nGENOP070 DS    0H\n         TM    WORKOPER,$OPER2       OPERAND 2?\n         BO    GENOP090              YES\nGENOP080 DS    0H\n         XC    WORKNBR,WORKNBR       CLEAR WORK NUMERIC\n         MVC   WORKNBR+2(2),2(R4)    COPY DISPLACEMENT\n         SR    R1,R1                 CLEAR REGISTER\n         IC    R1,2(R4)              INSERT BASE 1\n         B     GENOP100\nGENOP090 DS    0H\n         XC    WORKNBR,WORKNBR       CLEAR WORK NUMERIC\n         MVC   WORKNBR+2(2),4(R4)    COPY DISPLACEMENT\n         SR    R1,R1                 CLEAR REGISTER\n         IC    R1,4(R4)              INSERT BASE 2\nGENOP100 DS    0H\n         NI    WORKNBR+2,X'0F'       LEAVE ONLY DISPLACEMENT\n         SRL   R1,4                  SHIFT TO LOW BITS\n         STC   R1,WORKBASE           SAVE BASE\n         BAL   R15,GENNBR00          GENERATE DISPLACEMENT\n         TM    WORKOPER,$OPERL       LENGTH WITH OPERAND?\n         BO    GENOP120              YES\n         TM    WORKOPER,$OPERNDX     INDEX WITH OPERAND?\n         BNO   GENOP110              NO\n         OC    WORKX(2),WORKX        BASE AND INDEX ZERO?\n         BZR   R9                    YES, DONE\n         B     GENOP120\nGENOP110 DS    0H\n         CLI   WORKBASE,0            BASE ZERO?\n         BER   R9                    YES, DONE\nGENOP120 DS    0H\n         BAL   R15,GENPRN1           OPEN PARENTHESIS\n         TM    WORKOPER,$OPERNDX     INDEX?\n         BNO   GENOP140              NO\n         CLI   WORKX,0               INDEX ZERO?\n         BE    GENOP130              YES\n         MVC   WORKREG,WORKX         SET REGISTER\n         BAL   R15,GENREG00          GEN INDEX\n         CLI   WORKBASE,0            BASE ZERO?\n         BE    GENOP160              YES\nGENOP130 DS    0H\n         BAL   R15,GENCOMMA          GEN COMMA\nGENOP140 DS    0H\n         TM    WORKOPER,$OPERL       LENGTH PRESENT?\n         BNO   GENOP150              NO\n         SR    R1,R1                 CLEAR REGISTER\n         IC    R1,WORKX              INSERT LENGTH\n         LA    R1,1(R1)              PLUS 1\n         ST    R1,WORKNBR            SET LENGTH\n         BAL   R15,GENNBR00          GENERATE LENGTH\n         BAL   R15,GENCOMMA          GEN COMMA\nGENOP150 DS    0H\n         CLI   WORKBASE,0            BASE ZERO?\n         BE    GENOP160              YES\n         MVC   WORKREG,WORKBASE      SET REGISTER\n         BAL   R15,GENREG00          GENERATE BASE REGISTER\nGENOP160 DS    0H\n         BAL   R15,GENPRN2           CLOSING PARENTHESIS\n         BR    R9                    DONE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Generate lengths/displacements                         *\n*                                                                     *\n*   WORKNBR will be set to the length or displacement value           *\n*                                                                     *\n*   R15 is the return address                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\nGENNBR00 DS    0H\n         STCM  R15,15,GENNBRSV       SAVE R15\n         L     R1,WORKNBR            DISPLACEMENT VALUE\n         CVD   R1,COMMDWRD           CONVERT TO DECIMAL\n         MVC   DISPWORK,DISPEDWD     INITIALIZE WITH EDIT WORD\n         ED    DISPWORK,COMMDWRD+2   EDIT DISPLACEMENT\n         L     R14,GENADDR           CURRENT OUTPUT ADDRESS\n         LA    R15,DISPWORK+2        FIRST POSSIBLE DIGIT\n         LA    R1,10                 MAXIMUM DIGITS\nGENNBR10 DS    0H\n         CLI   0(R15),C' '           BLANK?\n         BE    GENNBR20              YES\n         MVC   0(1,R14),0(R15)       COPY THE DIGIT\n         LA    R14,1(R14)            NEXT\nGENNBR20 DS    0H\n         LA    R15,1(R15)            NEXT\n         BCT   R1,GENNBR10           LOOP\n         ST    R14,GENADDR           SAVE ADDRESS\n         ICM   R15,15,GENNBRSV       RESTORE R15\n         BR    R15                   DONE\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nERR0010  DS     0H\n         MVC   PRTDATA(EMSG01L),EMSG01\n         OI    COMMFLAG,$ERROR\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     EXIT0000              AND EXIT\nERR0020  DS    0H\n         MVC   PRTDATA(EMSG02L),EMSG02\n         OI    COMMFLAG,$ERROR\n         BAL   R9,PRT0000            PRINT MESSAGE\n         DC    H'0'\n         B     EXIT0000              AND EXIT\nERR0030  DS    0H\n         MVC   PRTDATA(EMSG03L),EMSG03\n         OI    COMMFLAG,$ERROR\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     EXIT0000              AND EXIT\nERR0040  DS    0H\n         MVC   PRTDATA(EMSG04L),EMSG04\n         OI    COMMFLAG,$ERROR\n         BAL   R9,PRT0000            PRINT MESSAGE\n         ABEND ABEND005,DUMP,,USER   ABEND\nPUNCH000 DS    0H\n         TM    COMMDD,$PUNCHDD       IS DISPUNCH DD PRESENT?\n         BNOR  R9                    NO\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         PUT   DISPUNCH,SRCLABL      PUNCH SOURCE STATEMENT\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         BR    R9                    RETURN\nPRT0000  DS    0H\n         TM    PRTFLAG,$SUBH         HAS SUB-HEADING BEEN PRINTED?\n         BO    PRT0010               YES\n         OI    PRTFLAG,$SUBH         SET FLAG\n         MVI   PRTCMD,$PRTHEAD       SET COMMAND\n         LA    R1,PRTBLOK            SET PARAMETER BLOCK ADDRESS\n         L     R15,APR               PRINT MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO PRINT MODULE\nPRT0010  DS    0H\n         MVI   PRTCMD,$PRTPRT        SET COMMAND\n         LA    R1,PRTBLOK            SET PARAMETER BLOCK ADDRESS\n         L     R15,APR               PRINT MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO PRINT MODULE\n         BR    R9                    RETURN\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\nAM24     DS    0H\n         LA    R14,0(R14)         CLEAR HIGH BIT(S)\n         BSM   R0,R14             RETURN IN 24-BIT MODE\nAM31     DS    0H\n         LA    R14,0(R14)         CLEAR HIGH BIT(S)\n         O     R14,X80            SET 31-BIT MODE\n         BSM   R0,R14             RETURN IN 31-BIT MODE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              EXECUTED INSTRUCTIONS                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\nNPRTTRT  TRT   0(0,R4),COMMNPRT      SCAN NON-PRINTABLE\nPRTTRT   TRT   0(0,R4),COMMPRT       SCAN PRINTABLE\nCHDCMVC  MVC   SRCOPER+2(0),0(R4)    COPY CHARACTER DATA\n*---------------------------------------------------------------------*\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nSAVE09   DC    18F'0'                REGISTER SAVE AREA\nX80      DC    A(X'80000000')\nASVCDESC DC    A(SVCDESC)            SVC DESCRIPTIONS\nFMTTABLE DS    0A\n         DC    A(GENRR100)           RR FORMAT 1\n         DC    A(GENRR200)           RR FORMAT 2 (SVC)\n         DC    A(GENRR300)           RR FORMAT 3 (MASK TYPE)\n         DC    A(GENRX00)            RX FORMAT\n         DC    A(GENS00)             S  FORMAT\n         DC    A(GENSI00)            SI FORMAT\n         DC    A(GENRS100)           RS FORMAT 1\n         DC    A(GENRS200)           RS FORMAT 2 (BXLE, BXH, ..)\n         DC    A(GENRS300)           RS FORMAT 3 (MASK TYPE-TM, CLM..)\n         DC    A(GENSS100)           SS FORMAT 1 (CHARACTER-CHARACTER)\n         DC    A(GENSS200)           SS FORMAT 2 (PACKED DECIMAL)\n         DC    A(GENSS300)           SS FORMAT 3 (MVCS, MVCP)\n         DC    A(GENSS400)           SS FORMAT 4 (SRP)\n         DC    A(GENB2000)           B2 WITH NO OPERAND\n         DC    A(GENB2S00)           B2 S FORMAT\n         DC    A(GENB2R00)           B2 R FORMAT\n         DC    A(GENB2RR0)           B2 RR FORMAT\n         SPACE 1\nGENADDR  DC    A(0)                  CURRENT ADDRESS IN SRCOPER AREA\n         SPACE 1\nGENNBRSV DC    A(0)                  R15 SAVE AREA FOR 'GENNBR'\n         SPACE 1\nDISPCNTL DS    0C\n         DC    CL8'INSTR'            EYECATCHER\nDISPI    DC    XL4'000000'           INSTRUCTION DISPLACEMENT\n         DC    CL8'LABEL'            EYECATCHER\nDISPL    DC    XL4'000000'           LABEL DISPLACEMENT\n         DC    CL8'DATA '            EYECATCHER\nDISPD    DC    XL4'000000'           DATA DISPLACEMENT\n         DC    CL8'REF  '            EYECATCHER\nDISPR    DC    XL4'000000'           REFERENCE DISPLACEMENT\n         SPACE 2\nWORKNBR  DC    XL4'00'               LENGTHS/DISPLACEMENTS WORK AREA\nWORKOPER DC    X'00'                 OPERAND TO GENERATE\n$OPER1   EQU   X'80'                 .. OPERAND 1\n$OPER2   EQU   X'40'                 .. OPERAND 2\n$OPERNDX EQU   X'20'                 .. INDEXED OPERAND\n$OPERL   EQU   X'10'                 .. OPERAND WITH LENGTH\nWORKX    DC    X'00'                 INDEX REGISTER OR LENGTH\nWORKBASE DC    X'00'                 BASE REGISTER\nWORKREG  DC    X'00'\n         SPACE 2\n* ------------------------------------------------------------------- *\n*           FLAG/SWITCH BYTES                                         *\n* ------------------------------------------------------------------- *\nPRTFLAG  DC    X'00'                 HEADING FLAGS\n$SUBH    EQU   X'80'                 .. SUBHEADING PRINTED\nSAVEFLAG DC    X'00'                 'FLAG' BYTE FOR EXTENDED MNEMONICS\n         SPACE 1\nAM31IND  DC    C'+X''80000000'')'\nAM31INDL EQU   *-AM31IND\n         SPACE 1\nDISPWORK DC    CL12' '\nDISPEDWD DC    X'402020202020202020202120'\nCSCTOPCD DC    CL6'CSECT'\nENTROPCD DC    CL6'ENTRY'\nDCOPCD   DC    CL6'DC'\nCXDOPCD  DC    CL6'CXD'\nDSOPCD   DC    CL6'DS'\nDROPOPCD DC    CL6'DROP'\nUSNGOPCD DC    CL6'USING'\nREGEQU   DC    C'COPY   REGEQU'\nENDOPCD  DC    CL6'END'\nBCOPCD   DC    CL6'BC'\nOPER0C   DC    CL02'0C'\nOPER0H   DC    CL02'0H'\nHEXDC    DC    C'X'''\nCHARDC   DC    C'C'''\nGENSIDLM DC    C',X'''               DELIMITER AND X'\nCHARZERO DC    CL8'00000000'         CONSTANT\nSUBHEAD  DS    0C\n         DC    CL08'  DISP  '\n         DC    CL02' '\n         DC    CL14'OBJECT CODE'\n         DC    CL05' '\n         DC    CL08' LABEL '\n         DC    CL01' '\n         DC    CL06'OPCODE'\n         DC    CL01' '\n         DC    CL25'OPERANDS'\n         DC    CL05' '\n         DC    CL07'COMMENT'\nSUBHEADL EQU   *-SUBHEAD\n         DC    C' '\nSRC      DS    0C\nSRCDISP  DC    CL08' '               DISPLACEMENT\n         DC    CL02' '\nSRCOBJ1  DC    CL04' '               OBJECT CODE BYTES 1 AND 2\n         DC    CL01' '\nSRCOBJ2  DC    CL04' '               OBJECT CODE BYTES 3 AND 4\n         DC    CL01' '\nSRCOBJ3  DC    CL04' '               OBJECT CODE BYTES 5 AND 6\n         DC    CL05' '\nSRCLABL  DC    CL08' '  01 - 08      LABEL\n         DC    CL01' '  09 - 09\nSRCMNEM  DC    CL06' '  10 - 15      MNEMONIC\n         DC    CL01' '  16 - 16\nSRCOPER  DC    CL35' '  17 - 51      OPERANDS\n         ORG   SRCLABL+46\nSRCCMNT  DC    CL25' '  46 - 71      COMMENTS\n         DC    CL01' '  72 - 72      CONTINUATION COLUMN\nSRCSEQ   DC    CL08' '  73 - 80      STATEMENT SEQUENCE NUMBER\nSRCL     EQU   *-SRC\nOBJIN    DC    CL8' '                INPUT STAGING AREA\nOBJOUT1  DC    CL4' '                OBJECT CODE BYTES 1 AND 2\n         DC    CL1' '\nOBJOUT2  DC    CL4' '                OBJECT CODE BYTES 3 AND 4\n         DC    CL1' '\nOBJOUT3  DC    CL4' '                OBJECT CODE BYTES 5 AND 6\n         DC    CL1' '\nOBJLEN   DS    0H\n         DC    H'01'                 02 BYTES OUT FOR 01 BYTE\n         DC    H'03'                 04 BYTES OUT FOR 02 BYTES\n         DC    H'06'                 07 BYTES OUT FOR 03 BYTES\n         DC    H'08'                 09 BYTES OUT FOR 04 BYTES\n         DC    H'11'                 12 BYTES OUT FOR 05 BYTES\n         DC    H'13'                 14 BYTES OUT FOR 06 BYTES\n         DC    H'13'                 14 BYTES OUT FOR 07 BYTES\n         DC    H'13'                 14 BYTES OUT FOR 08 BYTES\nEMSG01   DC    C'DISASM0901E Data area overlaps in instruction, should +\n               have been detected by DISASM08'\nEMSG01L  EQU   *-EMSG01\nEMSG02   DC    C'DISASM0902E Invalid opcode detected'\nEMSG02L  EQU   *-EMSG02\nEMSG03   DC    C'DISASM0903E DC with length = zero detected'\nEMSG03L  EQU   *-EMSG03\nEMSG04   DC    C'DISASM0904E Attempt to generate instruction on an odd +\n               address boundary'\nEMSG04L  EQU   *-EMSG04\n         SPACE 2\nGENRRCCA DS    0C                    COMPARE MNEMONICS\n         DC    X'00',CL6'NOPR  '     NO-OP\n         DC    X'01',CL6'BOR   '     BRANCH OVERFLOW\n         DC    X'02',CL6'BPR   '     BRANCH PLUS\n         DC    X'04',CL6'BMR   '     BRANCH MINUS\n         DC    X'07',CL6'BNZR  '     BRANCH NOT ZERO\n         DC    X'08',CL6'BZR   '     BRANCH IF ZERO\n         DC    X'0B',CL6'BNMR  '     BRANCH NOT MINUS\n         DC    X'0D',CL6'BNPR  '     BRANCH NOT PLUS\n         DC    X'0E',CL6'BNOR  '     BRANCH NOT OVERFLOW\n         DC    X'0F',CL6'BR    '     UNCONDITIONAL BRANCH\n         DC    X'FF'\nGENRRCCC DS    0C                    ARITHMETIC MNEMONICS\n         DC    X'00',CL6'NOPR  '     NO-OP\n         DC    X'02',CL6'BHR   '     BRANCH HIGH\n         DC    X'04',CL6'BLR   '     BRANCH LOW\n         DC    X'07',CL6'BNER  '     BRANCH NOT EQUAL\n         DC    X'08',CL6'BER   '     BRANCH EQUAL\n         DC    X'0B',CL6'BNLR  '     BRANCH NOT LOW\n         DC    X'0D',CL6'BNHR  '     BRANCH NOT HIGH\n         DC    X'0F',CL6'BR    '     UNCONDITIONAL BRANCH\n         DC    X'FF'\nGENRRCCL DS    0C                    LOGICAL MNEMONICS\n         DC    X'00',CL6'NOPR  '     NO-OP\n         DC    X'01',CL6'BOR   '     BRANCH ONES\n         DC    X'04',CL6'BMR   '     BRANCH MIXED\n         DC    X'07',CL6'BNZR  '     BRANCH NOT ZEROS\n         DC    X'08',CL6'BZR   '     BRANCH IF ZEROS\n         DC    X'0B',CL6'BNMR  '     BRANCH NOT MIXED\n         DC    X'0E',CL6'BNOR  '     BRANCH NOT ONES\n         DC    X'0F',CL6'BR    '     UNCONDITIONAL BRANCH\n         DC    X'FF'\nGENBCCA  DS    0C                    COMPARE MNEMONICS\n         DC    X'00',CL6'NOP   '     NO-OP\n         DC    X'01',CL6'BO    '     BRANCH OVERFLOW\n         DC    X'02',CL6'BP    '     BRANCH PLUS\n         DC    X'04',CL6'BM    '     BRANCH MINUS\n         DC    X'07',CL6'BNZ   '     BRANCH NOT ZERO\n         DC    X'08',CL6'BZ    '     BRANCH IF ZERO\n         DC    X'0B',CL6'BNM   '     BRANCH NOT MINUS\n         DC    X'0D',CL6'BNP   '     BRANCH NOT PLUS\n         DC    X'0E',CL6'BNO   '     BRANCH NOT OVERFLOW\n         DC    X'0F',CL6'B     '     UNCONDITIONAL BRANCH\n         DC    X'FF'\nGENBCCC  DS    0C                    ARITHMETIC MNEMONICS\n         DC    X'00',CL6'NOP   '     NO-OP\n         DC    X'02',CL6'BH    '     BRANCH HIGH\n         DC    X'04',CL6'BL    '     BRANCH LOW\n         DC    X'07',CL6'BNE   '     BRANCH NOT EQUAL\n         DC    X'08',CL6'BE    '     BRANCH EQUAL\n         DC    X'0B',CL6'BNL   '     BRANCH NOT LOW\n         DC    X'0D',CL6'BNH   '     BRANCH NOT HIGH\n         DC    X'0F',CL6'B     '     UNCONDITIONAL BRANCH\n         DC    X'FF'\nGENBCCL  DS    0C                    LOGICAL MNEMONICS\n         DC    X'00',CL6'NOP   '     NO-OP\n         DC    X'01',CL6'BO    '     BRANCH ONES\n         DC    X'04',CL6'BM    '     BRANCH MIXED\n         DC    X'07',CL6'BNZ   '     BRANCH NOT ZEROS\n         DC    X'08',CL6'BZ    '     BRANCH IF ZEROS\n         DC    X'0B',CL6'BNM   '     BRANCH NOT MIXED\n         DC    X'0E',CL6'BNO   '     BRANCH NOT ONES\n         DC    X'0F',CL6'B     '     UNCONDITIONAL BRANCH\n         DC    X'FF'\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRTBLOK  PRTBLOK  TYPE=CSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nDISPUNCH DCB   DDNAME=DISPUNCH,      SOURCE CODE PUNCHED OUTPUT        +\n               DSORG=PS,             .. SEQUENTIAL                     +\n               LRECL=80,             .. LRECL IS 80                    +\n               MACRF=PM              .. PUT-MOVE MODE\nSYSIN    DCB   DDNAME=SYSIN,         ASSEMBLER INPUT FILE              +\n               DSORG=PS,             .. SEQUENTIAL                     +\n               EODAD=GEN0720,        .. END OF DATA                    +\n               LRECL=80,             .. LRECL IS 80                    +\n               MACRF=GL              .. GET LOCATE MODE\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*              SVC DESCRIPTIONS                                       *\n*                                                                     *\n*---------------------------------------------------------------------*\nSVCDESC  DS    0C\n         SVCDEF 00,'EXCP/XDAP'\n         SVCDEF 01,'WAIT/WAITR/PRTOV'\n         SVCDEF 02,'POST'\n         SVCDEF 03,'EXIT'\n         SVCDEF 04,'GETMAIN'\n         SVCDEF 05,'FREEMAIN'\n         SVCDEF 06,'LINK/LINKX'\n         SVCDEF 07,'XCTL/XCTLX'\n         SVCDEF 08,'LOAD'\n         SVCDEF 09,'DELETE'\n         SVCDEF 0A,'GETMAIN/FREEMAIN'\n         SVCDEF 0B,'TIME'\n         SVCDEF 0C,'SYNCH/SYNCHX'\n         SVCDEF 0D,'ABEND'\n         SVCDEF 0E,'SPIE'\n         SVCDEF 0F,'ERREXCP'\n         SVCDEF 10,'PURGE'\n         SVCDEF 11,'RESTORE'\n         SVCDEF 12,'BLDL/FIND (TYPE D)'\n         SVCDEF 13,'OPEN'\n         SVCDEF 14,'CLOSE'\n         SVCDEF 15,'STOW'\n         SVCDEF 16,'OPEN (TYPE=J)'\n         SVCDEF 17,'CLOSE (TYPE=T)'\n         SVCDEF 18,'DEVTYPE'\n         SVCDEF 19,'TRKBAL'\n         SVCDEF 1A,'CATALOG/INDEX/LOCATE'\n         SVCDEF 1B,'OBTAIN'\n         SVCDEF 1D,'SCRATCH'\n         SVCDEF 1E,'RENAME'\n         SVCDEF 1F,'FEOV'\n         SVCDEF 20,'ALLOC'\n         SVCDEF 21,'IOHALT'\n         SVCDEF 22,'MGCR/QEDIT'\n         SVCDEF 23,'WTO/WTOR'\n         SVCDEF 24,'WTL'\n         SVCDEF 25,'SEGLD/SEGWT'\n         SVCDEF 27,'LABEL'\n         SVCDEF 28,'EXTRACT'\n         SVCDEF 29,'IDENTIFY'\n         SVCDEF 2A,'ATTACH/ATTACHX'\n         SVCDEF 2B,'CIRB'\n         SVCDEF 2C,'CHAP'\n         SVCDEF 2D,'OVLYBRCH'\n         SVCDEF 2E,'TIMER'\n         SVCDEF 2F,'STIMER'\n         SVCDEF 30,'DEQ'\n         SVCDEF 33,'SNAP/SNAPX/SDUMP/SDUMPX'\n         SVCDEF 34,'RESTART'\n         SVCDEF 35,'RELEX'\n         SVCDEF 36,'DISABLE'\n         SVCDEF 37,'EOV'\n         SVCDEF 38,'ENQ/RESERVE'\n         SVCDEF 39,'FREEDBUF'\n         SVCDEF 3A,'RELBUF/REQBUF'\n         SVCDEF 3B,'OLTEP'\n         SVCDEF 3C,'STAE/STAI-ESTAE/ESTAI'\n         SVCDEF 3D,'IKJEGS6A'\n         SVCDEF 3E,'DETACH'\n         SVCDEF 3F,'CHKPT'\n         SVCDEF 40,'RDJFCB'\n         SVCDEF 42,'BTAMTEST'\n         SVCDEF 44,'SYNADF/SYNADRLS'\n         SVCDEF 45,'BSP'\n         SVCDEF 46,'GSERV'\n         SVCDEF 47,'ASGNBFR/BUFINQ/RLSEBFR'\n         SVCDEF 49,'SPAR'\n         SVCDEF 4A,'DAR'\n         SVCDEF 4B,'DQUEUE'\n         SVCDEF 4C,'IFBSTAT'\n         SVCDEF 4E,'LSPACE'\n         SVCDEF 4F,'STATUS'\n         SVCDEF 51,'SETPRT'\n         SVCDEF 53,'SMFWTM'\n         SVCDEF 54,'GRAPHICS'\n         SVCDEF 55,'DDRSWAP'\n         SVCDEF 56,'ATLAS'\n         SVCDEF 57,'DOM'\n         SVCDEF 5B,'VOLSTAT'\n         SVCDEF 5C,'TCPEXCP'\n         SVCDEF 5D,'TGET/TPUT'\n         SVCDEF 5E,'TGET/TPUT'\n         SVCDEF 5F,'SYSEVENT'\n         SVCDEF 60,'STAX'\n         SVCDEF 61,'IKJEGS9G'\n         SVCDEF 62,'PROTECT'\n         SVCDEF 63,'DYNALLOC'\n         SVCDEF 64,'IKJEFFIB'\n         SVCDEF 65,'QTIP'\n         SVCDEF 66,'AQCTL'\n         SVCDEF 67,'XLATE'\n         SVCDEF 68,'TOPCTL'\n         SVCDEF 69,'IMGLIB'\n         SVCDEF 6B,'MODESET'\n         SVCDEF 70,'PGRLSE'\n         SVCDEF 71,'PGFIX/PGFREE/PGLOAD/PGOUT'\n         SVCDEF 72,'EXCPVR'\n         SVCDEF 75,'DEBCHK'\n         SVCDEF 77,'TESTAUTH'\n         SVCDEF 78,'GETMAIN/FREEMAIN'\n         SVCDEF 79,'VSAM'\n         SVCDEF 7B,'PURGEDQ'\n         SVCDEF 7C,'TPIO'\n         SVCDEF 7D,'EVENTS'\n         SVCDEF 7E,'MSS(ICB2SVC)'\n         SVCDEF 82,'RACHECK'\n         SVCDEF 83,'RACINIT'\n         SVCDEF 84,'RACLIST'\n         SVCDEF 85,'RACDEF'\n         SVCDEF 89,'ESR'\n         SVCDEF 8A,'PGSER'\n         SVCDEF 8B,'CVAFDIR'\n         DC    X'FF'\n         SPACE 2\n         LTORG\n         SPACE 2\n         COPY  DISASMDA\n*---------------------------------------------------------------------*\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nDISASM00 DISASM00 TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              SVC DSECT                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nSVCDSECT DSECT\nSVCLEN   DS   XL2                LENGTH OF THIS SVC DEFINITION\nSVCCMNTL DS   XL2                LENGTH OF DESCRIPTION\nSVCNBR   DS   X                  SVC NUMBER\nSVCCMNT  DS   0C                 DESCRIPTION\n*---------------------------------------------------------------------*\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY REGEQU\n         END  DISASM09\n./ ADD NAME=DISASM10\n         TITLE 'DISASM10 - RLD DATA PROCESSOR'\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISASM10                                             *\n*                                                                    *\n*  Function:                                                         *\n*   When RLD items overlap user defined DATA areas, this module      *\n*   will 'adjust' the DATA items.                                    *\n*                                                                    *\n*   There are five possibilities:                                    *\n*      1) the RLD item is exactly the same as the DATA item.         *\n*         In this case the 'type' is changed to reflect the RLD type *\n*      2) The DATA item spans the RLD item.                          *\n*         This requires \"breaking the DATA item in two\".             *\n*         The end result is a DATA item that starts at the user      *\n*         specified start point and ends immediately before the RLD  *\n*         item and a second that starts immediately after the RLD    *\n*         item and ends at the user specified point.                 *\n*      3) The RLD item overlaps the first part of the DATA item.     *\n*         In this case the beginning displacement in the DATA item   *\n*         is changed to reference the byte immediately following the *\n*         RLD item.                                                  *\n*      4) The RLD item overlaps the end of a DATA item.              *\n*         In this case the ending displacement in the DATA item is   *\n*         changed to reference the byte immediately preceding the    *\n*         RLD item.                                                  *\n*      5) The RLD item overlaps the entire DATA item.                *\n*         In this case the DATA block is removed from the DATA       *\n*         block chain.                                               *\n*                                                                    *\n*                                                                    *\n*  This module is 'called' from DISASM05.  The call does NOT follow  *\n*  standard subroutine linkage.                                      *\n*                                                                    *\n*    At the time of the call, R5 will be set to the address of the   *\n*    new RLDDATA block, R8 will be set to the address of the         *\n*    DATADSCT block.                                                 *\n*                                                                    *\n*--------------------------------------------------------------------*\n         COPY  DISASMGB\nDISASM10 CSECT\nDISASM10 AMODE 31\nDISASM10 RMODE 24\n         USING DISASM10,R12\n         USING DISASM00,R11\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               SET BASE REG\n         B     PROC0000              SKIP EYECATCHER\n         DC    CL8'DISASM10'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nPROC0000 DS    0H\n         LA    R1,SAVE10             OUR SAVE AREA ADDRESS\n         ST    R13,4(R1)             CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         USING RLDDATA,R5            DEFINE BASE\n         USING DATADSCT,R8           DEFINE BASE\n         ITRACE ID=ENTRY,                                              +\n               DATA1=RLDDISP,                                          +\n               DATA2=RLDLEN\n         ICM   R1,15,RLDDISP         DISPLACEMENT (BEGIN)\n         ST    R1,TEMPBEGN           SAVE BEGIN DISP\n         AH    R1,RLDLEN             PLUS LENGTH\n         BCTR  R1,0                  MINUS 1\n         ST    R1,TEMPEND            SAVE END DISP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*   Test for case 1.                                                  *\n*        RLD and DATA items reference the same area.                  *\n*                                                                     *\n*   Action taken:                                                     *\n*        Remove the DATA item.                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         CLC   TEMPBEGN,DATABEGN     SAME START?\n         BE    PROC1000              YES\n         B     PROC2000              OTHERWISE NO\nPROC1000 DS    0H\n         CLC   TEMPEND,DATAEND       SAME END\n         BE    PROC1010              YES\n         B     PROC2000              OTHERWISE NO\nPROC1010 DS    0H\n         ITRACE ID=CASE1\n         TM    COMMFLG2,$RLDWARN     PRINT WARNING MESSAGES?\n         BNO   PROC1020              NO\n         UNPK  MSG01BGN(9),DATABEGN(5)      BEGINNING DISPLACEMENT\n         MVZ   MSG01BGN,HEX0000      TURN OFF ZONES\n         TR    MSG01BGN,HEXCHAR      TRANSLATE TO PRINTABLE\n         MVI   MSG01BGN+8,C' '\n         UNPK  MSG01END(9),DATAEND(5)       ENDING DISPLACEMENT\n         MVZ   MSG01END,HEX0000      TURN OFF ZONES\n         TR    MSG01END,HEXCHAR      TRANSLATE TO PRINTABLE\n         MVI   MSG01END+8,C'.'\n         MVC   PRTDATA(MSG01L),MSG01\n         BAL   R10,PRT0000           PRINT\nPROC1020 DS    0H\n         LA    R1,COMMDATA           'POINTER' TO FIRST DATA BLOCK\nPROC1030 DS    0H\n         C     R8,0(R1)              POINTER TO OUR DATA BLOCK?\n         BE    PROC1040              YES\n         L     R1,0(R1)              NEXT BLOCK\n         B     PROC1030\nPROC1040 DS    0H\n         MVC   0(4,R1),DATANEXT      UNCHAIN THIS DATA BLOCK\n         ITRACE ID=FREEDATA,                                           +\n               RDATA1=R8\n         FREEMAIN RU,A=(R8),LV=DATAL\n         B     EXIT0000              AND EXIT\n* ------------------------------------------------------------------- *\n*   Test for case 2.                                                  *\n*         A DATA item spans the RLD item.                             *\n*         (The RLD item is in the middle of a user specified area)    *\n*                                                                     *\n*   Action taken:                                                     *\n*        The data item is \"split\" into two parts.                     *\n* ------------------------------------------------------------------- *\nPROC2000 DS    0H\n         CLC   DATABEGN,TEMPBEGN     DATA BEGIN < RLD BEGIN\n         BL    PROC2010              YES\n         B     PROC3000              OTHERWISE NO\nPROC2010 DS    0H\n         CLC   DATAEND,TEMPEND       DATA END > RLD END?\n         BH    PROC2020              YES\n         B     PROC3000              OTHERWISE NO\nPROC2020 DS    0H\n         ITRACE ID=CASE2\n         MVC   WORKB1,DATABEGN       COPY BEGIN FOR DATA ITEM 1\n         L     R1,TEMPBEGN           RLD BEGIN DISP\n         BCTR  R1,0                  MINUS 1\n         ST    R1,WORKE1             SAVE DATA ITEM END DISP\n         S     R1,WORKB1             MINUS STARTING DISPLACEMENT\n         LA    R1,1(R1)              PLUS 1\n         STH   R1,WORKL1             SAVE LENGTH\n         L     R1,TEMPEND            RLD END DISP\n         LA    R1,1(R1)              PLUS 1\n         ST    R1,WORKB2             SAVE BEGIN DISP FOR DATA ITEM 2\n         MVC   WORKE2,DATAEND        SAVE END DISP FOR DATA ITEM 2\n         L     R1,WORKE2             ENDING DISPLACEMENT\n         S     R1,WORKB2             MINUS STARTING DISPLACEMENT\n         LA    R1,1(R1)              PLUS 1\n         STH   R1,WORKL2             SAVE LENGTH\n         TM    COMMFLG2,$RLDWARN     PRINT WARNING MESSAGES?\n         BNO   PROC2030              NO\n         UNPK  MSG02BGN(9),DATABEGN(5)      BEGINNING DISPLACEMENT\n         MVZ   MSG02BGN,HEX0000      TURN OFF ZONES\n         TR    MSG02BGN,HEXCHAR      TRANSLATE TO PRINTABLE\n         MVI   MSG02BGN+8,C' '\n         UNPK  MSG02END(9),DATAEND(5)       ENDING DISPLACEMENT\n         MVZ   MSG02END,HEX0000      TURN OFF ZONES\n         TR    MSG02END,HEXCHAR      TRANSLATE TO PRINTABLE\n         MVI   MSG02END+8,C'.'\n         MVC   PRTDATA(MSG02L),MSG02\n         BAL   R10,PRT0000           PRINT\n         UNPK  MSG03B1(9),WORKB1(5)  BEGINNING DISPLACEMENT\n         MVZ   MSG03B1,HEX0000       TURN OFF ZONES\n         TR    MSG03B1,HEXCHAR       TRANSLATE TO PRINTABLE\n         MVI   MSG03B1+8,C' '\n         UNPK  MSG03E1(9),WORKE1(5)  ENDING DISPLACEMENT\n         MVZ   MSG03E1,HEX0000       TURN OFF ZONES\n         TR    MSG03E1,HEXCHAR       TRANSLATE TO PRINTABLE\n         MVI   MSG03E1+8,C' '\n         UNPK  MSG03B2(9),WORKB2(5)  BEGINNING DISPLACEMENT\n         MVZ   MSG03B2,HEX0000       TURN OFF ZONES\n         TR    MSG03B2,HEXCHAR       TRANSLATE TO PRINTABLE\n         MVI   MSG03B2+8,C' '\n         UNPK  MSG03E2(9),WORKE2(5)  ENDING DISPLACEMENT\n         MVZ   MSG03E2,HEX0000       TURN OFF ZONES\n         TR    MSG03E2,HEXCHAR       TRANSLATE TO PRINTABLE\n         MVI   MSG03E2+8,C' '\n         MVC   PRTDATA(MSG03L),MSG03\n         BAL   R10,PRT0000           PRINT\nPROC2030 DS    0H\n         MVC   DATAEND,WORKE1        CHANGE ENDING DISPLACEMENT\n         MVC   DATALEN,WORKL1        CHANGE LENGTH\n         GETMAIN RU,                                                   +\n               LV=DATAL,             .. SIZE                           +\n               LOC=ANY\n         MVC   DATANEXT-DATADSCT(L'DATANEXT,R1),DATANEXT\n         ST    R1,DATANEXT\n         MVC   DATAEYE-DATADSCT(L'DATAEYE,R1),DATAID\n         MVC   DATABEGN-DATADSCT(L'DATABEGN,R1),WORKB2\n         MVC   DATAEND-DATADSCT(L'DATAEND,R1),WORKE2\n         MVC   DATALEN-DATADSCT(L'DATALEN,R1),WORKL2\n         MVC   DATATYPE-DATADSCT(L'DATATYPE,R1),DATATYPE\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*   TEST FOR CASE 3.                                                  *\n*         A RLD ITEM OVERLAPS THE FIRST PORTION OF A DATA AREA.       *\n*                                                                     *\n*   Action taken:                                                     *\n*        CHANGE THE BEGINNING DISPLACEMENT IN THE DATA AREA           *\n* ------------------------------------------------------------------- *\nPROC3000 DS    0H\n         CLC   TEMPBEGN,DATABEGN     RLD BEGIN = OR < DATA BEGIN?\n         BE    PROC3010              YES\n         BL    PROC3010              YES\n         B     PROC4000              OTHERWISE NO\nPROC3010 DS    0H\n         CLC   TEMPEND,DATABEGN      RLD END = OR > DATA BEGIN?\n         BE    PROC3020              YES\n         BH    PROC3020              YES\n         B     PROC4000              OTHERWISE NO\nPROC3020 DS    0H\n         CLC   TEMPEND,DATAEND       RLD END < DATA END?\n         BL    PROC3030              YES\n         B     PROC4000              OTHERWISE NO\nPROC3030 DS    0H\n         ITRACE ID=CASE3\n         TM    COMMFLG2,$RLDWARN     PRINT RLD WARNING MESSAGES?\n         BNO   PROC3040              NO\n         UNPK  MSG04BGN(9),DATABEGN(5)      BEGINNING DISPLACEMENT\n         MVZ   MSG04BGN,HEX0000      TURN OFF ZONES\n         TR    MSG04BGN,HEXCHAR      TRANSLATE TO PRINTABLE\n         MVI   MSG04BGN+8,C' '\n         UNPK  MSG04END(9),DATAEND(5)       ENDING DISPLACEMENT\n         MVZ   MSG04END,HEX0000      TURN OFF ZONES\n         TR    MSG04END,HEXCHAR      TRANSLATE TO PRINTABLE\n         MVI   MSG04END+8,C'.'\n         MVC   PRTDATA(MSG04L),MSG04\n         BAL   R10,PRT0000           PRINT\nPROC3040 DS    0H\n         L     R1,TEMPEND            RLD END DISPLACEMENT\n         LA    R1,1(R1)              PLUS 1\n         ST    R1,DATABEGN           SET NEW BEGIN DISPLACEMENT\n         TM    COMMFLG2,$RLDWARN     PRINT RLD WARNING MESSAGES?\n         BNO   PROC3050              NO\n         UNPK  MSG05BGN(9),DATABEGN(5)      BEGIN DISPLACEMENT\n         MVZ   MSG05BGN,HEX0000      TURN OFF ZONES\n         TR    MSG05BGN,HEXCHAR      TRANSLATE TO PRINTABLE\n         MVI   MSG05BGN+8,C' '\n         BAL   R10,PRT0000           PRINT\nPROC3050 DS    0H\n         B     EXIT0000              EXIT\n* ------------------------------------------------------------------- *\n*   TEST FOR CASE 4.                                                  *\n*         A RLD ITEM OVERLAPS THE LAST PORTION OF A DATA AREA.        *\n*                                                                     *\n*   Action taken:                                                     *\n*        CHANGE THE ENDING DISPLACEMENT IN THE DATA AREA              *\n* ------------------------------------------------------------------- *\nPROC4000 DS    0H\n         CLC   TEMPBEGN,DATABEGN     RLD BEGIN > DATA BEGIN\n         BH    PROC4010              YES\n         B     PROC5000              OTHERWISE NO\nPROC4010 DS    0H\n         CLC   TEMPBEGN,DATAEND      RLD BEGIN = OR < DATA END?\n         BE    PROC4020              YES\n         BL    PROC4020              YES\n         B     PROC5000              OTHERWISE NO\nPROC4020 DS    0H\n         CLC   TEMPEND,DATAEND       RLD END > DATA END?\n         BH    PROC4030              YES\n         B     PROC5000              OTHERWISE NO\nPROC4030 DS    0H\n         ITRACE ID=CASE4\n         TM    COMMFLG2,$RLDWARN     PRINT RLD WARNING MESSAGES?\n         BNO   PROC4040              NO\n         UNPK  MSG06BGN(9),DATABEGN(5)      BEGINNING DISPLACEMENT\n         MVZ   MSG06BGN,HEX0000      TURN OFF ZONES\n         TR    MSG06BGN,HEXCHAR      TRANSLATE TO PRINTABLE\n         MVI   MSG06BGN+8,C' '\n         UNPK  MSG06END(9),DATAEND(5)       ENDING DISPLACEMENT\n         MVZ   MSG06END,HEX0000      TURN OFF ZONES\n         TR    MSG06END,HEXCHAR      TRANSLATE TO PRINTABLE\n         MVI   MSG06END+8,C'.'\n         MVC   PRTDATA(MSG06L),MSG06\n         BAL   R10,PRT0000           PRINT\nPROC4040 DS    0H\n         L     R1,TEMPBEGN           RLD BEGIN DISPLACEMENT\n         BCTR  R1,0                  MINUS 1\n         ST    R1,DATAEND            SET NEW ENDING DISPLACEMENT\n         TM    COMMFLG2,$RLDWARN     PRINT RLD WARNING MESSAGES?\n         BNO   PROC4050              NO\n         UNPK  MSG07END(9),DATAEND(5)      ENDING DISPLACEMENT\n         MVZ   MSG07END,HEX0000      TURN OFF ZONES\n         TR    MSG07END,HEXCHAR      TRANSLATE TO PRINTABLE\n         MVI   MSG07END+8,C' '\n         BAL   R10,PRT0000           PRINT\nPROC4050 DS    0H\n         B     EXIT0000              EXIT\n* ------------------------------------------------------------------- *\n*   TEST FOR CASE 5.                                                  *\n*         A RLD ITEM OVERLAPS AN ENTIRE DATA AREA                     *\n*                                                                     *\n*   Action taken:                                                     *\n*        DELETE THE DATA AREA.                                        *\n* ------------------------------------------------------------------- *\nPROC5000 DS    0H\n         CLC   TEMPBEGN,DATABEGN     RLD BEGIN = OR < DATA BEGIN\n         BE    PROC5010              YES\n         BL    PROC5010              YES\n         B     EXIT0000              OTHERWISE NO\nPROC5010 DS    0H\n         CLC   TEMPEND,DATAEND       RLD END = OR > DATA END\n         BE    PROC5020              YES\n         BH    PROC5020              YES\n         B     EXIT0000              OTHERWIZE NO\nPROC5020 DS    0H\n         ITRACE ID=CASE5\n         TM    COMMFLG2,$RLDWARN     PRINT RLD WARNING MESSAGES?\n         BNO   PROC5030              NO\n         UNPK  MSG08BGN(9),DATABEGN(5)      BEGINNING DISPLACEMENT\n         MVZ   MSG08BGN,HEX0000      TURN OFF ZONES\n         TR    MSG08BGN,HEXCHAR      TRANSLATE TO PRINTABLE\n         MVI   MSG08BGN+8,C' '\n         UNPK  MSG08END(9),DATAEND(5)       ENDING DISPLACEMENT\n         MVZ   MSG08END,HEX0000      TURN OFF ZONES\n         TR    MSG08END,HEXCHAR      TRANSLATE TO PRINTABLE\n         MVI   MSG08END+8,C','\n         MVC   PRTDATA(MSG08L),MSG08\n         BAL   R10,PRT0000           PRINT\nPROC5030 DS    0H\n         LA    R1,COMMDATA           'POINTER' TO FIRST DATA AREA\nPROC5040 DS    0H\n         C     R8,0(R1)              IS THIS OUR DATA AREA?\n         BE    PROC5050              YES\n         L     R1,0(R1)              NEXT BLOCK\n         B     PROC5040\nPROC5050 DS    0H\n         MVC   0(4,R1),DATANEXT      UNCHAIN THIS BLOCK\n         FREEMAIN RU,A=(R8),LV=DATAL\n         B     EXIT0000              EXIT\n*-------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         MVI   PRTCMD,$PRTPRT        SET COMMAND\n         LA    R1,PRTBLOK            SET INTERFACE BLOCK ADDRESS\n         L     R15,APR               PRINT MODULE ENTRY POINT\n         BALR  R14,R15               PRINT SUBHEADING\n         BR    R10                   EXIT\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nDWORD    DC    D'0'\nSAVE10   DC    18F'0'                REGISTER SAVE AREA\nTEMPBEGN DS    A\nTEMPEND  DS    A\nWORKB1   DS    A\nWORKE1   DS    A\nWORKL1   DS    H\nWORKB2   DS    A\nWORKE2   DS    A\nWORKL2   DS    H\nDATAID   DC    CL8'DATA'\nHEX0000  DC    16X'00'\nHEXCHAR  DC    C'0123456789ABCDEF'\nMSG01    DS    0C\n         DC    C'DISASM1001W RLD is the same as data item at '\nMSG01BGN DC    CL8' '\n         DC    C' to '\nMSG01END DC    CL8' '\n         DC    C'.  DATA item removed'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    C'DISASM1002W DATA area from '\nMSG02BGN DC    CL8' '\n         DC    C' to '\nMSG02END DC    CL8' '\n         DC    C'.  spans this RLD item.'\nMSG02L   equ   *-MSG02\nMSG03    DS    0C\n         DC    C'DISASM1003W DATA area(s) now from '\nMSG03B1  DC    CL8' '\n         DC    C' to '\nMSG03E1  DC    CL8' '\n         DC    C' and '\nMSG03B2  DC    CL8' '\n         DC    C' to '\nMSG03E2  DC    CL8' '\n         DC    C' '\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    C'DISASM1004W This RLD item overlaps first part of DATA +\n               area at '\nMSG04BGN DC    CL8' '\n         DC    C' to '\nMSG04END DC    CL8' '\nMSG04L   equ   *-MSG04\nMSG05    DS    0C\n         DC    C'DISASM1005W DATA area begin displacement changed to '\nMSG05BGN DC    CL8' '\n         DC    C' '\nMSG05L   equ   *-MSG05\nMSG06    DS    0C\n         DC    C'DISASM1006W This RLD item overlaps first part of DATA +\n               area at '\nMSG06BGN DC    CL8' '\n         DC    C' to '\nMSG06END DC    CL8' '\nMSG06L   EQU   *-MSG06\nMSG07    DS    0C\n         DC    C'DISASM1007W DATA area end displacement changed to '\nMSG07END DC    CL8' '\n         DC    C' '\nMSG07L   EQU   *-MSG07\nMSG08    DS    0C\n         DC    C'DISASM1008W This RLD item overlaps DATA area at '\nMSG08BGN DC    CL8' '\n         DC    C' to '\nMSG08END DC    CL8', DATA area deleted'\nMSG08L   EQU   *-MSG08\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRTBLOK  PRTBLOK  TYPE=CSECT\n         SPACE 1\n         LTORG\n         SPACE 1\n         COPY  DISASMDA\n*---------------------------------------------------------------------*\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nDISASM00 DISASM00 TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY REGEQU\n         END  DISASM10\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DLIUTIL$": {"ttr": 4871, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00Y\\x01\\x075/\\x01\\x076O\\x108\\x00\\x1a\\x00\\x16\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2007-12-18T00:00:00", "modifydate": "2007-12-30T10:38:59", "lines": 26, "newlines": 22, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:    Emailing: dli.utils.src\nFrom:       \"Rice, Richard L\" <Richard.L.Rice@conocophillips.com>\nDate:       Fri, 14 Dec 2007 10:26:57 -0600\nTo:         \"Sam Golob\" <sbgolob@cbttape.org>\n\n <<dli.utils.src>>\n\nSam,\nThis is a pair of DL/I utilities.\nThis is in the TRANSMIT/FTP format.\n\nThey were intended to be an IMS version independent back-up/restore.\nDLIUNLD will read any IMS DL/I data base with segments up to 32744 bytes\nlong.\n\nDLIUNLD has been run and tested.\n\nDLILOAD was never needed and has not been tested.\n\n  Later note from Richard about DLILOAD:\n    I finally heard from someone that tried using DLILOAD.\n    There were a couple of bugs.  They have been corrected.\n\nBoth utilities keep statistics.  The statistics on a load should match\nthe statistics for the un-load.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DLIUTILS": {"ttr": 4873, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x03\\x01\\x076\\x1f\\x01\\x076\\x1f\\x12@\\x03=\\x03=\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2007-12-27T00:00:00", "modifydate": "2007-12-27T12:40:03", "lines": 829, "newlines": 829, "modlines": 0, "user": "RLRICE"}, "text": "./ ADD NAME=$$NOTE1  0100-07361-07361-1235-00022-00022-00000-SBGOLOB\nSubject:    Emailing: dli.utils.src\nFrom:       \"Rice, Richard L\" <Richard.L.Rice@conocophillips.com>\nDate:       Fri, 14 Dec 2007 10:26:57 -0600\nTo:         \"Sam Golob\" <sbgolob@cbttape.org>\n\n <<dli.utils.src>>\n\nSam,\nThis is a pair of DL/I utilities.\nThis is in the TRANSMIT/FTP format.\n\nThey were intended to be an IMS version independent back-up/restore.\nDLIUNLD will read any IMS DL/I data base with segments up to 32744 bytes\nlong.\n\nDLIUNLD has been run and tested.\n\nDLILOAD has been debugged by a user.  See member $$NOTE2.\n\nBoth utilities keep statistics.  The statistics on a load should match\nthe statistics for the un-load.\n\n./ ADD NAME=$$NOTE2  0100-07361-07361-1237-00014-00014-00000-SBGOLOB\nSubject:    Emailing: dliutils\nFrom:       \"Rice, Richard L\" <Richard.L.Rice@conocophillips.com>\nDate:       Thu, 27 Dec 2007 11:07:49 -0600\nTo:         \"Sam Golob\" <sbgolob@cbttape.org>\n\nSam,\n\nI finally heard from someone that tried using DLILOAD.\nThere were a couple of bugs.  They have been corrected.\nDLIUNLD has been used and tested for a long time.\n\nI think you were going to call them DLIUTILS.\n\n\n./ ADD NAME=$DOC     0100-07361-07361-1058-00008-00008-00000-RLRICE\nTo install\n 1) Add a valid job card\n 2) change the IMS MACLIB data set name\n 3) change the IMS RESLIB data set name\n 4) change library name on the SYSLMOD DDs\n 5) Run DLILOAD and DLIUNLD to assemble and link the programs\n\nNeither program requires APF authorization\n./ ADD NAME=DLILOAD  0106-07341-07361-1059-00365-00366-00000-RLRICE\n//         JOB\n//* ------------------------------------------------------------\n//*\n//*          ASSEMBLE\n//*\n//* ------------------------------------------------------------\n//ASM      EXEC PGM=ASMA90,PARM='LIST,DECK,NOOBJECT,XREF(SHORT)'\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.MODGEN,DISP=SHR\n//SYSPUNCH DD DSN=&&OBJ,DISP=(NEW,PASS,DELETE),\n//            UNIT=TSODA,\n//            SPACE=(TRK,(15,15,15))\n//SYSIN    DD *\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     Re-load a data base from a DLIUNLD unload.                      *\n*                                                                     *\n*     The program uses the 1st PCB in the PSB.                        *\n*                                                                     *\n*     Input data is has variable length records (RECFM=V).            *\n*                                                                     *\n*     Format of input record is:                                      *\n*                                                                     *\n*         bytes   length    description                               *\n*         1 - 2     2       length of record                          *\n*         3 - 4     2       binary zero                               *\n*         5 -12     8       segment name                              *\n*         9 -??             length of segment                         *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*      The program requires two DD's                                  *\n*                                                                     *\n*        SYSPRINT    SYSOUT=?                                         *\n*        SYSUT1      Data to be re-loaded (SYSUT1 from DLIUNLD)       *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDLILOAD  CSECT\nDLILOAD  AMODE 31\nDLILOAD  RMODE 24\n         USING DLILOAD,R15             SPECIFY CSECT BASE\n         B     INIT0000\n         DC    CL8'DLILOAD'            DATE AND TIME COMPILED\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)         SAVE REGISTERS\n         LR    R12,R15                 LOAD NEW BASE REGISTER\n         DROP  R15                     DISCONTINUE OLD BASE\n         USING DLILOAD,R12             RESUME WITH A NEW BASE\n         L     R11,0(R1)               PCB ADDRESS\n         USING PCB,R11\n         GETMAIN RU,                   GETMAIN WORK AREA               +\n               LV=WORKL,                                               +\n               LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING WORKAREA,R13            SPECIFY THIRD BASE\n         ST    R11,IMS_PCB\n         MVC   WORK_TAPE(TAPEDCBL),TAPEDCBI\n         MVC   WORK_PRINTER(PRINTDCBL),PRINTDCBI\n         MVC   WORK_OPEN(OPENL),OPENI\n         MVC   WORK_CLOSE(CLOSEL),CLOSEI\n         MVI   PLINE-1,C' '\n         MVC   PLINE,PLINE-1\n         MVI   WORK_SEGMENT_NAME+8,C' '\n         LA    R1,F4                   NBR OF IMS PARMS\n         ST    R1,IMS_COUNT            SET ADDRESS\n         LA    R1,ISRT                 IMS FUNCTION CODE\n         ST    R1,IMS_FUNCTION         SET ADDRESS\n         ST    R11,IMS_PCB             SET PCB ADDRESS\n         LA    R1,TAPE_IO_AREA         I/O AREA ADDRESS\n         ST    R1,IMS_IO_AREA          SET ADDRESS\n         LA    R1,WORK_SSA             SSA ADDRESS\n         ST    R1,IMS_SSA_ADDRESS      SET ADDRESS\n         OI    IMS_SSA_ADDRESS,X'80'   FLAG END OF PARM LIST\n         OPEN  (WORK_TAPE,INPUT),                                      +\n               MODE=31,                                                +\n               MF=(E,WORK_OPEN)\n         OPEN  (WORK_PRINTER,OUTPUT),                                  +\n               MODE=31,                                                +\n               MF=(E,WORK_OPEN)\n         MVC   PLINE,PLINE-1\n         MVC   PLINE(HEADING_L),HEADING\n         BAL   R9,PRT0000              WRITE HEADING\n* ------------------------------------------------------------------- *\n*               INITIALIZE STATISTICS                                 *\n* ------------------------------------------------------------------- *\n         ZAP   WORK_TOTAL_SEGMENTS,P0  INITIALIZE TOTAL NBR OF SEGMENTS\n         LA    R15,$MAX_STATS          NBR OF STATUS COUNTERS\n         LA    R5,STATS_TABLE\n         USING STATS,R5\nINIT0030 DS    0H\n         MVC   STATS_SEGMENT,BLANKS    INITIALIZE SEGMENT NAME\n         ZAP   STATS_NBR,P0            INITIALIZE NBR OF SEGMENTS\n         LA    R5,STATS_L(,R5)         NEXT IN TABLE\n         BCT   R15,INIT0030            LOOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        READ BACK UP                                                 *\n*                                                                     *\n*-------------------------------------------------------------------- *\nMAIN0000 DS    0H\n         GET   WORK_TAPE,TAPE_RECORD\n* ------------------------------------------------------------------- *\n*        INSERT THE SEGENT                                            *\n*-------------------------------------------------------------------- *\n         MVC   WORK_SEGMENT_NAME,TAPE_SEGMENT_NAME\n         LA    R1,IMSPARMS              IMS PARM LIST\n         CALL  ASMTDLI                  CALL IMS\n*-------------------------------------------------------------------- *\n*               CHECK STATUS CODE                                     *\n*-------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         CLC   PCB_STATUS_CODE,BLANKS   BLANKS?\n         BE    MAIN0020                 YES\n         B     ERR0010                  OTHERWISE.. BAD NEWS\n*-------------------------------------------------------------------- *\n*               UPDATE STATISTICS                                     *\n*-------------------------------------------------------------------- *\nMAIN0020 DS    0H\n         AP    WORK_TOTAL_SEGMENTS,P1   ADD 1 TO NUMBER OF SEGMENTS\n         LA    R5,STATS_TABLE\nMAIN0030 DS    0H\n         CLC   STATS_SEGMENT,BLANKS     UNUSED ENTRY?\n         BE    MAIN0040                 YES\n         CLC   STATS_SEGMENT,TAPE_SEGMENT_NAME\n         BE    MAIN0050\n         LA    R5,STATS_L(,R5)          NEXT IN STATS TABLE\n         B     MAIN0030                 CHECK AGAIN\nMAIN0040 DS    0H\n         MVC   STATS_SEGMENT,TAPE_SEGMENT_NAME\nMAIN0050 DS    0H\n         AP    STATS_NBR,P1             ADD 1\n         B     MAIN0000                 READ NEXT SEGMENT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                     ERROR ROUTINES                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVC   PLINE(MSG_01_L),MSG_01\n         MVC   PLINE+(MSG_01_STATUS-MSG_01)(L'MSG_01_STATUS),PCB_STATUS+\n               _CODE\n         BAL   R9,PRT0000\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                     PRINT STATISTICS                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTATS000 DS    0H\n         MVC   PLINE(MSG_02_L),MSG_02   COPY MESSAGE\n         BAL   R9,PRT0000               PRINT MESSAGE\n         LA    R5,STATS_TABLE\nSTATS010 DS    0H\n         CLC   STATS_SEGMENT,BLANKS     UNUSED ENTRY?\n         BE    STATS020                 YES\n         MVC   PLINE(MSG_03_L),MSG_03\n         MVC   PLINE+(MSG_03_SEGMENT-MSG_03)(L'MSG_03_SEGMENT),STATS_SE+\n               GMENT\n         ED    PLINE+(MSG_03_NBR-MSG_03)(L'MSG_03_NBR),STATS_NBR\n         BAL   R9,PRT0000               PRINT STATUS\n         LA    R5,STATS_L(,R5)          NEXT SEGMENT\n         B     STATS010\nSTATS020 DS    0H\n         MVC   PLINE(MSG_03_L),MSG_03\n         MVC   PLINE+(MSG_03_SEGMENT-MSG_03)(L'MSG_03_SEGMENT),TOTAL\n         ED    PLINE+(MSG_03_NBR-MSG_03)(L'MSG_03_NBR),WORK_TOTAL_SEGME+\n               NTS\n         MVI   PLINE,C'-'               TRIPLE SPACE\n         BAL   R9,PRT0000               PRINT STATUS\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         PUT   WORK_PRINTER,PLINE\n         MVC   PLINE,PLINE-1\n         BR    R9\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         CLOSE WORK_PRINTER,                                           +\n               MODE=31,                                                +\n               MF=(E,WORK_CLOSE)\n         CLOSE WORK_TAPE,                                              +\n               MODE=31,                                                +\n               MF=(E,WORK_CLOSE)\n         LR    R1,R13\n         L     R13,4(,R13)              RESTORE REGSITER 13\n         FREEMAIN RU,                                                  +\n               A=(R1),                                                 +\n               LV=WORKL\n         L     R14,12(R13)              RESTORE REGISTER 14\n         LM    R0,R12,20(R13)           RESTORE REGISTERS 0-12\n         SR    R15,R15                  ZERO RETURN CODE\n         BR    R14                      RETURN\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                     CONSTANTS/LITERALS                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nF4              DC    F'4'               ARGUEMENT COUNT\nP0              DC    P'0'\nP1              DC    P'1'\n\nBLANKS          DC    CL8' '\nHEADING         DC    C'1 --- DL/1 DATABASE RE-LOAD UTILITY ---'\nHEADING_L       EQU   *-HEADING\n\nMSG_01          DC    C'- ****   BAD STATUS CODE RECEIVED ==> '\nMSG_01_STATUS   DC    CL2' '\nMSG_01_L        EQU   *-MSG_01\n\nMSG_02          DS    0C\n                DC    C' '\n                DC    C'SEGMENT NAME'\n                DC    C' '\n                DC    C'       NUMBER'\nMSG_02_L        EQU   *-MSG_02\n\nMSG_03          DS    0C\n                DC    C' '\nMSG_03_SEGMENT  DC    CL8' '\nMSG_03_NBR      DC    X'40206B2020206B2020206B2020206B202120'\nMSG_03_L        EQU   *-MSG_03\n\nTOTAL           DC    CL8'TOTAL'\nISRT            DC    CL4'ISRT'         DL/I FUNCTION (INSERT)\n\nPRINTDCBI DCB  DSORG=PS,                                               +\n               MACRF=PM,                                               +\n               DDNAME=PRINTER,                                         +\n               RECFM=FBA,                                              +\n               LRECL=132\nPRINTDCBL EQU  *-PRINTDCBI\nTAPEDCBI  DCB  DSORG=PS,                                               +\n               MACRF=GM,                                               +\n               DDNAME=TAPE,                                            +\n               EODAD=STATS000,                                         +\n               RECFM=VB,                                               +\n               LRECL=32756\nTAPEDCBL  EQU  *-TAPEDCBI\n\nOPENI     OPEN (*,OUTPUT),                                             +\n               MODE=31,                                                +\n               MF=L\nOPENL     EQU  *-OPENI\n\nCLOSEI    CLOSE *,                                                     +\n               MODE=31,                                                +\n               MF=L\nCLOSEL    EQU  *-CLOSEI\n\n               LTORG\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                     WORK AREAS                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWORKAREA            DSECT\n                    DS    18F\n\nWORK_PRINTER        DS    0F,(PRINTDCBL)X\nWORK_TAPE           DS    0F,(TAPEDCBL)X\nWORK_OPEN           DS    0F,(OPENL)X\nWORK_CLOSE          DS    0F,(CLOSEL)X\n\nIMSPARMS            DS    0F\nIMS_COUNT           DS    A               COUNT\nIMS_FUNCTION        DS    A               FUNCTION\nIMS_PCB             DS    A               PCB ADDRESS\nIMS_IO_AREA         DS    A               I/O AREA\nIMS_SSA_ADDRESS     DS    A\n\nWORK_SSA            DS    0CL9\nWORK_SEGMENT_NAME   DS    CL8\n                    DS    C               BLANK (UN-QUALIFIED SSA)\n\nWORK_TOTAL_SEGMENTS DS    PL7             NUMBER OF SEGMENTS ON TAPE\n\nSTATS_TABLE         DS    ($MAX_STATS*STATS_L)X\n\n                    DS    C\nPLINE               DS    CL121\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                 I/O AREA                                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPE_RECORD         DS    0F\nTAPE_LENGTH         DS    H\nTAPE_BB             DS    H\nTAPE_SEGMENT_NAME   DS    CL8\nTAPE_IO_AREA        DS    CL32760         I/O AREA\n\nWORKL               EQU   *-WORKAREA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                 PCB DSECT                                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPCB                 DSECT\nPCB_DBD             DS    CL8             DATABASE NAME\nPCB_LEVEL           DS    CL2             FEED-BACK LEVEL\nPCB_STATUS_CODE     DS    CL2             STATUS CODE\nPCB_OPTIONS         DS    CL4             PROCESS OPTIONS\nPCB_JCB             DS    F               JCB ADDRESS\nPCB_SEGMENT         DS    CL8             SEGMENT NAME\nPCB_KFA_LENGTH      DS    F               KEY FEED-BACK AREA LENGTH\n                    DS    F               NUMBER OF SEN SEGS IN PCB\nPCB_KFA             DS    CL75            KEY FEED-BACK AREA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTATS               DSECT\nSTATS_SEGMENT       DS    CL8             SEGMENT NAME\nSTATS_NBR           DS    PL7             NUMBER OF THIS SEGMENT\nSTATS_L             EQU   *-STATS\n$MAX_STATS          EQU   20\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   DLILOAD\n//*  --------------------------------------------------\n//*\n//*  --------------------------------------------------\n//LINK     EXEC PGM=HEWLH096,COND=(4,LT),\n//            PARM=('LIST,LET,XREF,MAP')\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD DSN=......ims reslib....,DISP=SHR\n//SYSLMOD  DD DSN=your load lib,DISP=SHR\n//OBJ      DD DSN=&&OBJ,DISP=(SHR,PASS)\n//SYSLIN   DD *\n  INCLUDE OBJ\n  ENTRY   DLILOAD\n  NAME    DLILOAD(R)\n/*\n//\n./ ADD NAME=DLIUNLD  0123-07158-07361-1059-00392-00302-00000-RLRICE\n//         JOB\n//* ------------------------------------------------------------\n//*\n//*          ASSEMBLE\n//*\n//* ------------------------------------------------------------\n//ASM      EXEC PGM=ASMA90,PARM='LIST,DECK,NOOBJECT,XREF(SHORT)'\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.MODGEN,DISP=SHR\n//         DD DSN=...ims maclib......,DISP=SHR\n//SYSPUNCH DD DSN=&&OBJ,DISP=(NEW,PASS,DELETE),\n//            UNIT=TSODA,\n//            SPACE=(TRK,(15,15,15))\n//SYSIN    DD *\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     Unload an IMS database to a 'flat' file.                        *\n*                                                                     *\n*     The program uses the 1st PCB in the PSB.                        *\n*                                                                     *\n*     Output data is has variable length records (RECFM=V).           *\n*                                                                     *\n*     Format of output record is:                                     *\n*                                                                     *\n*         bytes   length    description                               *\n*         1 - 2     2       length of record (segment length + 12)    *\n*         3 - 4     2       binary zero                               *\n*         5 -12     8       segment name                              *\n*         9 -??             length of segment (returned by IMS)       *\n*                                                                     *\n*     The program issues a GSCD call to obtain the address of         *\n*     the PST control block (mapped by the IPST macro).               *\n*     On each \"GN  \" call, IMS returns the length of the data         *\n*     in the I/O area in field PSTSGCR.                               *\n*                                                                     *\n*                                                                     *\n*     The program requires two DD's                                   *\n*                                                                     *\n*      SYSPRINT   SYSOUT=?      statistics/messages                   *\n*      SYSUT1     unloaded data                                       *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDLIUNLD  CSECT\nDLIUNLD  AMODE 31\nDLIUNLD  RMODE ANY\n         USING DLIUNLD,R15             SPECIFY CSECT BASE\n         B     INIT0000\n         DC    CL8'DLIUNLD'            DATE AND TIME COMPILED\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)         SAVE REGISTERS\n         LR    R12,R15                 LOAD NEW BASE REGISTER\n         DROP  R15                     DISCONTINUE OLD BASE\n         USING DLIUNLD,R12             RESUME WITH A NEW BASE\n         L     R11,0(R1)               PCB ADDRESS\n         USING PCB,R11\n         GETMAIN RU,                   GETMAIN WORK AREA               +\n               LV=WORKL,                                               +\n               LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING WORKAREA,R13            SPECIFY THIRD BASE\n         ST    R11,IMS_PCB\n         MVC   WORK_TAPE(TAPEDCBL),TAPEDCBI\n         MVC   WORK_PRINTER(PRINTDCBL),PRINTDCBI\n         MVC   WORK_OPEN(OPENL),OPENI\n         MVC   WORK_CLOSE(CLOSEL),CLOSEI\n         MVI   PLINE-1,C' '\n         MVC   PLINE,PLINE-1\n         LA    R1,F3                   NBR OF IMS PARMS\n         ST    R1,IMS_COUNT            SET ADDRESS\n         LA    R1,WORK_FUNCTION        IMS FUNCTION CODE\n         ST    R1,IMS_FUNCTION         SET ADDRESS\n         ST    R11,IMS_PCB             SET PCB ADDRESS\n         LA    R1,TAPE_IO_AREA         I/O AREA ADDRESS\n         ST    R1,IMS_IO_AREA          SET ADDRESS\n         OI    IMS_IO_AREA,X'80'       FLAG END OF PARM LIST\n         OPEN  (WORK_TAPE,OUTPUT),                                     +\n               MODE=31,                                                +\n               MF=(E,WORK_OPEN)\n         OPEN  (WORK_PRINTER,OUTPUT),                                  +\n               MODE=31,                                                +\n               MF=(E,WORK_OPEN)\n         MVC   PLINE,PLINE-1\n         MVC   PLINE(HEADING_L),HEADING\n         BAL   R9,PRT0000              WRITE HEADING\n* ------------------------------------------------------------------- *\n*               INITIALIZE STATISTICS                                 *\n* ------------------------------------------------------------------- *\n         ZAP   WORK_TOTAL_SEGMENTS,P0  INITIALIZE TOTAL NBR OF SEGMENTS\n         LA    R15,$MAX_STATS          NBR OF STATUS COUNTERS\n         LA    R5,STATS_TABLE\n         USING STATS,R5\nINIT0030 DS    0H\n         MVC   STATS_SEGMENT,BLANKS    INITIALIZE SEGMENT NAME\n         ZAP   STATS_NBR,P0            INITIALIZE NBR OF SEGMENTS\n         LA    R5,STATS_L(,R5)         NEXT IN TABLE\n         BCT   R15,INIT0030            LOOP\n* ------------------------------------------------------------------- *\n*                GET PST ADDRESS                                      *\n* ------------------------------------------------------------------- *\n         MVC   WORK_FUNCTION,GSCD      SET FUNCTION TO 'GSCD'\n         LA    R1,IMSPARMS             PARM LIST\n         CALL  ASMTDLI                 CALL IMS\n         CLC   PCB_STATUS_CODE,BLANKS  SUCCESSFUL?\n         BNE   ERR0010                 NO\n         L     R10,TAPE_IO_AREA+4      PST ADDRESS\n         USING PST,R10\n* ------------------------------------------------------------------- *\n*                SET FUNCTION CODE TO 'GN'                            *\n* ------------------------------------------------------------------- *\n         MVC   WORK_FUNCTION,GN         SET FUNCTION CODE TO 'GN'\n* ------------------------------------------------------------------- *\n*               MAKE 'GN' CALL                                       *\n*--------------------------------------------------------------------*\nMAIN0000 DS    0H\n         LA    R1,IMSPARMS              IMS PARM LIST\n         CALL  ASMTDLI                  CALL IMS\n*-------------------------------------------------------------------- *\n*               CHECK STATUS CODE                                     *\n*-------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         CLC   PCB_STATUS_CODE,GB       END OF DATA BASE?\n         BE    STATS000                 YES\n         CLC   PCB_STATUS_CODE,BLANKS   ACCEPTABLE STATUS?\n         BE    MAIN0020                 YES\n         CLC   PCB_STATUS_CODE,GA       ACCEPTABLE STATUS?\n         BE    MAIN0020                 YES\n         CLC   PCB_STATUS_CODE,GK       ACCEPTABLE STATUS?\n         BE    MAIN0020                 YES\n         B     ERR0010                  BAD STATUS\n*-------------------------------------------------------------------- *\n*               UPDATE STATISTICS                                     *\n*-------------------------------------------------------------------- *\nMAIN0020 DS    0H\n         AP    WORK_TOTAL_SEGMENTS,P1   ADD 1 TO NUMBER OF SEGMENTS\n         LA    R5,STATS_TABLE\nMAIN0030 DS    0H\n         CLC   STATS_SEGMENT,BLANKS     UNUSED ENTRY?\n         BE    MAIN0040                 YES\n         CLC   STATS_SEGMENT,PCB_SEGMENT\n         BE    MAIN0050\n         LA    R5,STATS_L(,R5)          NEXT IN STATS TABLE\n         B     MAIN0030                 CHECK AGAIN\nMAIN0040 DS    0H\n         MVC   STATS_SEGMENT,PCB_SEGMENT\nMAIN0050 DS    0H\n         AP    STATS_NBR,P1             ADD 1\n         MVC   TAPE_SEGMENT,PCB_SEGMENT MOVE SEGMENT NAME\n*-------------------------------------------------------------------- *\n*               WRITE TO OUTPUT                                       *\n*-------------------------------------------------------------------- *\n         LH    R1,PSTSEGCR              SEGMENT LENGTH\n         LA    R1,12(,R1)               PLUS PREFIX LENGTH\n         STH   R1,TAPE_LENGTH           STORE LENGTH IN TAPE RECORD\n         XC    TAPE_BB,TAPE_BB          CLEAR BB\n         PUT   WORK_TAPE,TAPE_LENGTH    WRITE TAPE RECORD\n         B     MAIN0000                 READ NEXT SEGMENT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                     ERROR ROUTINES                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVC   PLINE(MSG_01_L),MSG_01\n         MVC   PLINE+(MSG_01_STATUS-MSG_01)(L'MSG_01_STATUS),PCB_STATUS+\n               _CODE\n         MVC   PLINE+(MSG_01_FUNCTION-MSG_01)(L'MSG_01_FUNCTION),WORK_F+\n               UNCTION\n         BAL   R9,PRT0000\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                     PRINT STATISTICS                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTATS000 DS    0H\n         MVC   PLINE(MSG_02_L),MSG_02   COPY MESSAGE\n         BAL   R9,PRT0000               PRINT MESSAGE\n         LA    R5,STATS_TABLE\nSTATS010 DS    0H\n         CLC   STATS_SEGMENT,BLANKS     UNUSED ENTRY?\n         BE    STATS020                 YES\n         MVC   PLINE(MSG_03_L),MSG_03\n         MVC   PLINE+(MSG_03_SEGMENT-MSG_03)(L'MSG_03_SEGMENT),STATS_SE+\n               GMENT\n         ED    PLINE+(MSG_03_NBR-MSG_03)(L'MSG_03_NBR),STATS_NBR\n         BAL   R9,PRT0000               PRINT STATUS\n         LA    R5,STATS_L(,R5)          NEXT SEGMENT\n         B     STATS010\nSTATS020 DS    0H\n         MVC   PLINE(MSG_03_L),MSG_03\n         MVC   PLINE+(MSG_03_SEGMENT-MSG_03)(L'MSG_03_SEGMENT),TOTAL\n         ED    PLINE+(MSG_03_NBR-MSG_03)(L'MSG_03_NBR),WORK_TOTAL_SEGME+\n               NTS\n         MVI   PLINE,C'-'               TRIPLE SPACE\n         BAL   R9,PRT0000               PRINT STATUS\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         PUT   WORK_PRINTER,PLINE\n         MVC   PLINE,PLINE-1\n         BR    R9\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         CLOSE WORK_PRINTER,                                           +\n               MODE=31,                                                +\n               MF=(E,WORK_CLOSE)\n         CLOSE WORK_TAPE,                                              +\n               MODE=31,                                                +\n               MF=(E,WORK_CLOSE)\n         LR    R1,R13\n         L     R13,4(,R13)              RESTORE REGSITER 13\n         FREEMAIN RU,                                                  +\n               A=(R1),                                                 +\n               LV=WORKL\n         L     R14,12(R13)              RESTORE REGISTER 14\n         LM    R0,R12,20(R13)           RESTORE REGISTERS 0-12\n         SR    R15,R15                  ZERO RETURN CODE\n         BR    R14                      RETURN\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                     CONSTANTS/LITERALS                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nF3              DC    F'3'               ARGUEMENT COUNT\nP0              DC    P'0'\nP1              DC    P'1'\n\nBLANKS          DC    CL8' '\nHEADING         DC    C'1 --- DL/1 DATABASE UNLOAD UTILITY ---'\nHEADING_L       EQU   *-HEADING\n\nMSG_01          DC    C'- ****   BAD STATUS CODE RECEIVED ==> '\nMSG_01_STATUS   DC    C' '\n                DC    C'  ON '\nMSG_01_FUNCTION DC    C'    '\n                DC    C' CALL'\nMSG_01_L        EQU   *-MSG_01\n\nMSG_02          DS    0C\n                DC    C' '\n                DC    C'SEGMENT NAME'\n                DC    C' '\n                DC    C'       NUMBER'\nMSG_02_L        EQU   *-MSG_02\n\nMSG_03          DS    0C\n                DC    C' '\nMSG_03_SEGMENT  DC    CL8' '\nMSG_03_NBR      DC    X'40206B2020206B2020206B2020206B202120'\nMSG_03_L        EQU   *-MSG_03\n\nTOTAL           DC    CL8'TOTAL'\nGSCD            DC    CL4'GSCD'         GET SCD (AND PST) ADDRESS\nGN              DC    CL4'GN  '         GET-NEXT\nGB              DC    C'GB'\nGA              DC    C'GA'\nGK              DC    C'GK'\n\nPRINTDCBI DCB  DSORG=PS,                                               +\n               MACRF=PM,                                               +\n               DDNAME=PRINTER,                                         +\n               RECFM=FBA,                                              +\n               LRECL=132\nPRINTDCBL EQU  *-PRINTDCBI\nTAPEDCBI  DCB  DSORG=PS,                                               +\n               MACRF=PM,                                               +\n               DDNAME=TAPE,                                            +\n               RECFM=VB,                                               +\n               LRECL=32756,                                            +\n               BLKSIZE=32760\nTAPEDCBL  EQU  *-TAPEDCBI\n\nOPENI     OPEN (*,OUTPUT),                                             +\n               MODE=31,                                                +\n               MF=L\nOPENL     EQU  *-OPENI\n\nCLOSEI    CLOSE *,                                                     +\n               MODE=31,                                                +\n               MF=L\nCLOSEL    EQU  *-CLOSEI\n\n               LTORG\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                     WORK AREAS                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWORKAREA            DSECT\n                    DS    18F\n\nWORK_PRINTER        DS    0F,(PRINTDCBL)X\nWORK_TAPE           DS    0F,(TAPEDCBL)X\nWORK_OPEN           DS    0F,(OPENL)X\nWORK_CLOSE          DS    0F,(CLOSEL)X\n\nIMSPARMS            DS    0F\nIMS_COUNT           DS    A               COUNT\nIMS_FUNCTION        DS    A               FUNCTION\nIMS_PCB             DS    A               PCB ADDRESS\nIMS_IO_AREA         DS    A               I/O AREA\n\nWORK_FUNCTION       DS    CL4\nWORK_TOTAL_SEGMENTS DS    PL7             NUMBER OF SEGMENTS ON TAPE\n\nSTATS_TABLE         DS    ($MAX_STATS*STATS_L)X\n\n                    DS    C\nPLINE               DS    CL121\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                 I/O AREA                                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                    DS    0F\nTAPE_LENGTH         DS    H\nTAPE_BB             DS    H\nTAPE_SEGMENT        DS    CL8\nTAPE_IO_AREA        DS    CL32760         I/O AREA\n\nWORKL               EQU   *-WORKAREA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                 PCB DSECT                                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPCB                 DSECT\nPCB_DBD             DS    CL8             DATABASE NAME\nPCB_LEVEL           DS    CL2             FEED-BACK LEVEL\nPCB_STATUS_CODE     DS    CL2             STATUS CODE\nPCB_OPTIONS         DS    CL4             PROCESS OPTIONS\nPCB_JCB             DS    F               JCB ADDRESS\nPCB_SEGMENT         DS    CL8             SEGMENT NAME\nPCB_KFA_LENGTH      DS    F               KEY FEED-BACK AREA LENGTH\n                    DS    F               NUMBER OF SEN SEGS IN PCB\nPCB_KFA             DS    CL75            KEY FEED-BACK AREA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTATS               DSECT\nSTATS_SEGMENT       DS    CL8             SEGMENT NAME\nSTATS_NBR           DS    PL7             NUMBER OF THIS SEGMENT\nSTATS_L             EQU   *-STATS\n$MAX_STATS          EQU   20\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IPST\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         REQUATE\n         END   DLIUNLD\n//*  --------------------------------------------------\n//*\n//*  --------------------------------------------------\n//LINK     EXEC PGM=HEWLH096,COND=(4,LT),\n//            PARM=('LIST,LET,XREF,MAP')\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD DSN=ims reslib...,DISP=SHR\n//SYSLMOD  DD DSN=your load lib,DISP=SHR\n//OBJ      DD DSN=&&OBJ,DISP=(SHR,PASS)\n//SYSLIN   DD *\n  INCLUDE OBJ\n  ENTRY   DLIUNLD\n  NAME    DLIUNLD(R)\n/*\n//\n./ ADD NAME=DLIUTIL$ 0100-07352-07352-2249-00022-00022-00000-SBGOLOB\nSubject:    Emailing: dli.utils.src\nFrom:       \"Rice, Richard L\" <Richard.L.Rice@conocophillips.com>\nDate:       Fri, 14 Dec 2007 10:26:57 -0600\nTo:         \"Sam Golob\" <sbgolob@cbttape.org>\n\n <<dli.utils.src>>\n\nSam,\nThis is a pair of DL/I utilities.\nThis is in the TRANSMIT/FTP format.\n\nThey were intended to be an IMS version independent back-up/restore.\nDLIUNLD will read any IMS DL/I data base with segments up to 32744 bytes\nlong.\n\nDLIUNLD has been run and tested.\n\nDLILOAD was tried by a user and the bugs have been fixed.\n\nBoth utilities keep statistics.  The statistics on a load should match\nthe statistics for the un-load.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FXDOC": {"ttr": 5377, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x05o\\x01\\x00\\x04_\\t\\t\\x08\\x08\\x08\\x08\\x00\\x00\\xc6\\xe7`\\xd9\\xc5\\xd3\\xf1@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-02-25T00:00:00", "modifydate": "2000-02-14T09:09:00", "lines": 2056, "newlines": 2056, "modlines": 0, "user": "FX-REL1"}, "text": "./ ADD NAME=$DOC     0100-99056-99056-1500-00129-00129-00000-FX-REL1\n\n1          FX (file transmit)\n0FX is a file transmitter.  This utility as supplied will transmit\n a data set to up to 15 destinations.  The utility uses the IBM\n utilities DF/DSS and IEBCOPY for much of the \"dirty\" work, therefore\n both the sending and receiving ends must use a compatable version of\n of DF/DSS and IEBCOPY.\n0The utility utilizes the LU 6.2 protocol, so you must be at a level\n of VTAM that supports LU 6.2.  The \"master file\" is either a VSAM\n linear data set or a direct access (BDAM) data set.  If VSAM linear is\n used, the data is accessed via the DIV access method and utilizes a\n data space.  The data space is addressed using AR mode, so you must\n be at a level of MVS/DPV that supports DIV and AR mode (MVS/ESA).\n This utility is strictly MVS based, there is no provision for\n transmitting data sets to or from VSE, VM, PC's, AS/400's, etc.\n-The major component of FX is a started task (FXSTC).  Since this\n task must access any data sets that it is requested to transmit, and\n to re-create them on the receiving ends, it would have to have RACF\n access to do this.  It would probably be better to run the started\n task with the RACF TRUSTED attribute, rather than granting access to\n individual data sets.  Before FX will transmit a data set for a user,\n FX makes a third party check of that user's access to the data set\n to be transmitted.  The user must have READ level access to the data\n set on the sending system before FX will accept the request.  Each\n destination checks the user's access to the data set (the new name if\n a new name was given, or the original name if new name was omitted),\n the use must have ALTER level access before the data set will be\n restored.\n-Access to the started task is either via TSO or batch.  When a user\n accesses FX, FX checks their RACF access to a resource (the RACF\n CLASS and ENTITY are defined in module FXSUID).  If the user has\n READ level access to this resource, they will be a \"normal\" FX user.\n \"Normal\" users may enter transmission requests and inquire on the\n status of their own requests.  A normal user may CANCEL his own\n requests.  If the user has UPDATE level access, they have the\n additional authority to shut-down and snap-shot the FX started task.\n If the user has ALTER level access, they are an ADMINISTRATOR level\n user.  Administrators have the additional authority to inquire on\n any transmission requests, they may CANCEL any user's requests, and\n they may DELETE any user's requests.  CANCELing a request flags the\n request as CANCELLED, but it remains in the master file until running\n the offline purge program (FXPURGE).  DELETEing a request removes the\n request from the master file immediately.  The difference is that\n FXPURGE makes an audit or history file output of the requests that\n it \"purges\", so a record of the request may be saved.  If a request\n is DELETEd, there will be no record of the request in the FXPURGE\n history output file.\n-Basically how does FX work?  The FX started task must be brought\n up.  Then a user may enter a request via the TSO or batch interfaces.\n The data set must be cataloged.  The requesting user's RACF access to\n the requested data set is checked, they must have READ level access.\n The destination names are verified, and if all are valid, the request\n is \"accepted\" and recorded in the MASTER file.  FX then does a IDCAMS\n LISTCAT.  This tells FX the volumes where the data set resides, and if\n the data set is a VSAM data set, the component names (these are the\n names that appear in the VTOCs).  Then the VTOCs of the volumes where\n the data set resides are read.  The format-4 records of the VTOC tells\n FX the track size and number of tracks per cylinder for this device.\n From the extent information and this device information, FX calculates\n a total number of bytes that the extents contain.  If the total size\n excedes the MAX SIZE parameter, the request is rejected.  If the size\n is acceptable, using this total size, FX converts it into an\n equivalent number of tracks on a STAGE volume (stage volumes are\n defined via control statements), using the format-4 data from those\n volumes.  A \"staging\" data set is allocated using this calculated\n number of tracks, with a 10 percent secondary amount.  The staging\n data set is allocated using the RLSE parameter, so any unused space\n will be freed.  FX then allocates 2 more 1 track \"staging\" data sets,\n one for SYSIN, and one for SYSPRINT.  Control statements are built\n for DF/DSS or IEBCOPY to DUMP the data set or member.  A request is\n generated for either the DF/DSS or IEBCOPY subtask.  When the dump\n (or for IEBCOPY the unload) completes, if it was unsuccessful, the\n status is updated and the processing is essentially complete.  If\n If the dump was successful, the overall status is changed to\n \"READY TO TRANSMIT\".  When one of the receiving nodes is ready,\n FX transmits the dump or unloaded data to the receiving node.  The\n first record sent to the receiving node tells that node how large the\n staging data set was so it can convert the size into a staging data set\n on its own stage volumes.  Then as the data is transmitted by the\n sender, it is re-created on the receiving end.  When the data has been\n completely transmitted, the receiving node allocates 2 one track data\n sets, one for the SYSIN, and one for the SYSPRINT.  A request is\n generated for its DF/DSS or IEBCOPY subtask to restore the data set or\n member.  When the restore operation completes, the success or failure\n is recorded in the master file, and a \"success\" or \"failure\" status is\n transmitted to the sender to notify the sender of the status at the\n receiving end.  When the last (or only) destination has received and\n then responded with the success or failure of the restore operation,\n the over-all status is changed to COMPLETE.  On the receiving end the\n status is \"complete\"  when the restore operation completes, whether it\n was successful or not.\n-Since FX allocates staging data sets to transmit and receive files,\n these staging data sets may contain sensitive data.  FX uses the\n DF/DSS COMPRESS option, so the data is failry unreadable, but you\n may still want to RACF protect these staging data sets.  If DF/DSS\n or IEBCOPY return with a return code other than zero, the process\n (DUMP, RESTORE, or IEBCOPY unload or load) is considered to have\n failed.  The messages produced by DF/DSS or IEBCOPY will be in one\n of these staging data sets.  To allow users to see these messages,\n option \"O\" on the TSO inquiry causes the FX started task to read the\n messages and send them to the user where they can be browsed.\n-You may wonder why FX first dumps a data set and then transmits it.\n This serves several purposes.  First if a data set is to be transmitted\n to multiple destinations, you probably want all destinations to receive\n the same copy of the data.  Taking a DF/DSS DUMP or an IEBCOPY unload\n \"freezes\" the data at a given point in time, then if the original data\n set is updated or even deleted, the data sent to all the destinations\n will be the same.  Also for full data set transmissions, DF/DSS does\n a lot of \"dirty\" work like conversion to and from devices of unlike\n track size.  DF/DSS also re-creates the data set with the same space\n allocation, for PDSes the same number of directory blocks, for VSAM\n all the same CLUSTER options (like KEYS, SHR, RECORDSIZE, etc).\n The output from DF/DSS or IEBCOPY is always a sequential file, it\n is in a predictable form that can be easily read, transmitted,\n and written.  If the data set uses the direct access method (BDAM)\n or some other method, the DF/DSS ALLDATA option is used to cause all\n of the data to be dumped an restored reqardless of where the\n \"end-of-data\" indicator may point.  The the DF/DSS COMPRESS option\n option is also used to reduce the size of the dumped data sets, and\n the amount of time needed to transmit the data through a network.\n DF/DSS and IEBCOPY are also IBM supported products, if a new access\n method, device type, etc is developed, IBM will probably keep its own\n utilities updated to handle them.\n-A request is given an ID that is used in all messages.  The id is\n ENODE NNN.  Enode is the FX node where the request was entered.   NNN\n is a sequential number assigned when the request is accepted.\n-Formatting the master file resets the number to 1.  All FX messages\n at both the sending and receiving end(s) will use this ID to refer\n to activity related to the same requests.\n./ ADD NAME=FXBATCH  0100-99056-99056-1500-00134-00134-00000-FX-REL1\n\n1           FX (File Xmit) batch user interface parameters\n0Statements begin in column 1 and no statements may be continued.\n An asterisk (*) in column 1 denotes the statement as a comment.\n Comments may appear at any point in the control statements.\n-ALIAS                If transmitting a PDS member, any aliases will\n                      also be transmitted.  This statement is not valid\n                      unless the MEMBER= statement is also used.\n-ATTEMPTS=nnn         If the FX STC cannot be contacted, the user\n    or                interface will wait for the number of seconds\n ATTEMPTS=UNLIMITED   specified in the INTERVAL= parameter.  The\n                      number of tries is specified by the ATTEMPTS=\n                      parameter.  The value must be either 1 to 3 digits\n                      or 'UNLIMITED'.\n-FX=luname            Defines the LU name of the FX STC that the\n                      user wishes to communicate with.\n-DSN=dataset          For a transmission request, this is the data set\n                      to be transmitted.  The requesting user must have\n                      RACF ALTER level access to this data set.\n-DEST=destination     For a transmission request, this is one of (or the\n                      only destination) to receive the data set.  This\n                      destination must be defined as a DESTINATION or\n                      FXNODE in the control statements of the FX STC\n                      referenced in the FX= statement.\n-INTERVAL=nnn         If the FX STC cannot be contacted, the user\n                      interface will wait for the specified number of\n                      seconds and will try again.  The number of tries\n                      is controlled by the ATTEMPTS= parameter.\n-MEMBER=memname       For a transmission request, this is the name of\n                      a member in the PDS named on the DATASET=\n                      statement.  The name may be either a member name\n                      or an alias for the member.  If the ALIAS\n                      statement is used, the base member and all aliases\n                      will be transmitted whether the name used on this\n                      statement is the base name or one of its aliases.\n-NEWMEM=memname       When transmitting a PDS member it may be renamed\n                      at the receiving nodes.  This statement is not\n                      valid if the ALIAS statement is also used.\n-NEW DSN=name         For a transmission entry request, by default the\n                      data set will be restored with the same name as\n                      the original data set name.  NEWNAME= specifies\n                      that the data set is to be restored with a\n                      different name.  Note that if the data set is\n                      transmitted to multiple destinations it will have\n                      the same name at all receiving nodes.\n-REPLACE              If transmitting an entire data set, DF/DSS will\n                      replace an existing data set at each destination\n                      with the data being transmitted.  If transmitting\n                      a PDS member, it and any aliases transmitted will\n                      replace any like-named members in the receiving\n                      data set at each destination.\n-STATUS=enode,nbr     To inquire on the status of an existing request,\n                      use the STATUS= statement.  enode is the node\n                      where the request was entered and nbr is a\n                      sequential number assigned by the entry node.  FX\n                      always returns a message that gives the enode and\n                      nbr values when a request is accepted.\n-XMITFX=fxnode        When a tranmission request is entered, the default\n                      is for the entry FX STC to be the transmitting\n                      node.  the XMITFX= statement allows a request to\n                      be entered at a node other than the transmitting\n                      node.  For example if FX node A, B, and C exist\n                      in a network, a user could enter a request at node\n                      A to have a data set transmitted from node B to\n                      node C (the user does not have to enter the request\n                      at node B).  You may also enter a request at node\n                      A to have a data set transmitted from node B or C\n                      back to node A.\n-NOTES\n The DATASET, DEST, NEWNAME, and XMITFX statements are mutually\n exclusive with the STATUS statement.  You may only enter one transmission\n or status inquiry per execution.\n-The ALIAS statement is not valid unless the MEMBER= statement is used.\n-If transmitting a PDS member with its aliases, you cannot also rename\n the member at the same time.  Therefore the NEWMEM= statement is\n mutually exclusive with the ALIAS statement.\n-The NEWMEM statement is not allowed without a MEMBER statement.\n-To enter a request to transmit data set ABC.XYZ from NODEA to NODEB..\n0     FX=NODEA\n      DATASET=ABC.XYZ\n      DEST=NODEB\n0In this example data set ABC.XYZ would be transmitted from NODEA to\n NODEB and restored at NODEB with the same name (ABC.XYZ).  The request\n could be queried by:\n0     FX=NODEA\n      STATUS=NODEA,nnn   (depends on the number assigned)\n0The enode parameter is NODEA because that is the node where the request\n was entered.\n The same data set could have been transmitted by:\n0     FX=NODEB\n      XMITFX=NODEA\n      DATASET=ABC.XYZ\n      DEST=NODEB\n0In this case the enode on a STATUS statement would be NODEB because it\n is the node where the request was entered.  If you used:\n0     FX=NODEA\n      DATASET=ABC.XYZ\n      NEWNAME=DEF.XYZ\n      DEST=NODEB\n0The data set ABC.XYZ would be transmitted from NODEA to NODEB.  The\n enode value on a STATUS statement would still be NODEA.  The data set\n would be restored as DEF.XYZ at NODEB.\n0The request is known at both the transmitting and receiving nodes by\n the same ID (enode,nbr).  You may inquire on the status of the request\n at either the transmitting node or one of (or the only) receiving node.\n0     FX=NODEA\n      DATASET=ABC.XYZ\n      MEMBER=MEMA\n      NEWNAME=DEF.XYZ\n      DEST=NODEB\n0Member MEMA of data set ABC.XYZ would be transmitted to FX node NODEB,\n and copied into data set DEF.XYZ at NODEB.  If MEMA already exists in\n data set DEF.XYZ, it will not be replaced, and the request will still\n be considered successful (IEBCOPY will end with return code zero).\n0     FX=NODEA\n      DATASET=ABC.XYZ\n      MEMBER=MEMA\n      NEWNAME=DEF.XYZ\n      NEWMEM=MEM2\n      DEST=NODEB\n      REPLACE\n0Member MEMA of data set ABC.XYZ would be transmitted to FX node NODEB.\n At NODEB, the member would be copied into data set DEF.XYZ under the\n name MEM2.  If MEM2 already exists in data set DEF.XYZ it will be\n replaced.\n0     FX=NODEA\n      DATASET=ABC.XYZ\n      MEMBER=MEMA\n      NEWNAME=DEF.XYZ\n      DEST=NODEB\n      ALIAS\n0Member MEMA and any aliases of MEMA would be transmitted to FX node\n NODEB, and copied into data set DEF.XYZ at NODEB.  Like-named members\n already in data set DEF.XYZ will not be replaced.\n./ ADD NAME=FXPURGE  0100-99056-99056-1500-00030-00030-00000-FX-REL1\n\n1       FX (File Xmit) purge program control statements\n0Statements begin in column 1 and no statements may be continued.\n An asterisk (*) in column 1 denotes the statement as a comment.\n Comments may appear at any point in the control statements.\n-COPY         Entire master file is copied to NEWSEQ, the master\n              file is not altered.  Essentially this is a way to\n              turn the master file into a sequential file.\n-RETPDC=nnn   Retention period in days for requests that\n              are in a complete or error status.  1 to 3 digits.\n-RETPDU=nnn   Retention period in days for requests that\n              have not been completed.  In order for a request to\n              be in completed status, all destinations have to\n              respond with the status of the restore (success or\n              failure).  If for some reason a node does not or\n              cannot respond, the RETPDU allows the requests to\n              be purged.  RETPDU should probably be set to some\n              relatively long period.  1 to 3 digits.\n-      When COPY is requested, RETPDC and RETPDU must not be given.\n       When RETPDC is given, RETPDU is also required and vice-versa.\n       When a request is purged, the stage, sysin, and\n       sysprint datasets are scratched, the master file record\n       is copied to NEWSEQ, then reset to \"free\" status.\n0      When purging records (RETPDC and RETPDU are given), the\n       program expects to copy any records in OLDSEQ to NEWSEQ\n       and then copy any master file records being purged to\n       NEWSEQ.  This provides a cumulative history of requests\n       purged if the output of one run is input as OLDSEQ to\n       the next run.  The sample JCL in FX.JCLLIB illustrates this\n       using a GDG.\n./ ADD NAME=FXUSER   0100-99056-99056-1500-00177-00177-00000-FX-REL1\n\n1               FXUSER (User interface subroutine)\n0FXUSER provides the users with a means of entering and inquiring on\n transmission requests.  FXBATCH utilizes this same subroutine.  The\n parameter block is designed in a way that is usable by high level\n languages such as COBOL.\n0The parameter block is mapped by the USERPARM macro for assembler\n language and by USERCOB for COBOL.\n0\n-    ENTERING A TRANSMISSION REQUEST\n0Required fields for a new request are:\n            ASSEMBLER     COBOL\n       1.   PARMFX     FX-APPL-ID            LU of FX STC\n       2.   PARMODSN   FX-ORIGINAL-DSN       Data set to be transmitted\n                                             or data set containing the\n                                             member to be transmitted.\n       3.   PARMNDE#   FX-NUMBER-OF-NODES    Number of nodes in users\n                                             parm list (item 4).\n       4.   PARMNDNM   FX-NODE-NAME          At least 1 destination\n                                             node name.\n0Optional fields for a new request are:\n       1.   PARMXFX    FX-XMIT-APPL-ID       LU of FX STC that is to\n                                             transmit the data set.\n                                             If blank, the STC named in\n                                             PARMFX/FX-APPL-ID will\n                                             transmit.\n       2.   PARMOMEM   FX-ORIGINAL-MEMBER    Member name.  If blank,\n                                             the entire data set will\n                                             be transmitted.\n       3.   PARMDDSN   FX-DESTINATION-DSN    For full data set transmits\n                                             the data set will be\n                                             restored with this name.\n                                             For PDS member transmits,\n                                             the name of the PDS to\n                                             receive the member.  IF\n                                             blank the original data set\n                                             name is used.\n       4.   PARMDMEM   FX-DESTINATION-MEMBER For PDS member transmits,\n                                             the member will be restored\n                                             with this name.  Valid only\n                                             if the original member name\n                                             is given, and when ALIAS=N.\n       5.   PARMREPL   FX-REPLACE            If set to 'Y', the data set\n                                             or member will replace the\n                                             same data set or member at\n                                             each destination if they\n                                             already exist.\n       6.   PARMALAS   FX-ALIAS              If set to 'Y', the aliases\n                                             associated with the member\n                                             will also be transmitted.\n                                             Valid only when the original\n                                             member name is given, and\n                                             a new member name is not\n                                             given.\n       7.   PARMNDNM for nodes 2-n           A request can be entered to\n                                             have the data set sent to\n                                             multiple destinations.  Ask\n                                             the FX installer for the\n                                             maximum allowed.  Make sure\n                                             PARMNDE#/FX-NUMBER-OF-NODES\n                                             is set to at least the\n                                             number of nodes in the list.\n0\n-    INQUIRING ON A PREVIOUSLY ENTERED REQUEST\n0Required fields are:\n            ASSEMBLER  COBOL\n       1.   PARMFX     FX-APPL-ID             LU of FX STC\n       2.   The \"REQUEST ID\"\n            PARMENDE   FX-REQUEST-NODE        LU name of FX STC where\n                                              the request was entered.\n            PARMNBR    FX-REQUEST-NBR         Sequential number assigned\n                                              by the FX STC when the\n                                              request was entered.\n0Optional fields are:\n       1.   PARMUSER   FX-USER-ID             User ID of the person\n                                              that entered the request.\n                                              Valid only if you are\n                                              a ADMINSTRATOR level user.\n0\n-Data returned on all calls:\n            PARMMSG    FX-MESSAGE             Message describing the\n                                              errors or success of the\n                                              call.\n            PARMRC     FX-RETURN-CODE         Return code:\n                                              0   - successul.\n                                              4   - data truncated on a\n                                                    inquiry call.\n                                              8   - error detected in\n                                                    parameters, see\n                                                    message for further\n                                                    information.\n                                              20  - you are not authorized\n                                                    to use the FX STC.\n                                              32  - error communicating\n                                                    with the FX STC, see\n                                                    message for further\n                                                    information.\n0\n-Data returned on inquiry calls:\n            PARMSTAT   FX-REQUEST-STATUS      Request's over-all status.\n            PARMFX     FX-APPL-ID             FX STC where request was\n                                              entered.\n            PARMXFX    FX-XMIT-APPL-ID        Transmitting FX STC.\n            PARMODSN   FX-ORIGINAL-DSN        Original data set name or\n                                              data set containing the\n                                              PDS member.\n            PARMOMEM   FX-ORIGINAL-MEMBER     Original member name or\n                                              blank.\n            PARMDDSN   FX-DESTINATION-DSN     New data set name or blank.\n            PARMDMEM   FX-DESTINATION-MEMBER  New member name or blank.\n            PARMREPL   FX-REPLACE             Replace indicator (N, Y, or\n                                              blank.\n            PARMALAS   FX-ALIAS               Alias indicator (N, Y, or\n                                              blank.\n            PARMNDE#   FX-NUMBER-OF-NODES     Number of nodes returned in\n                                              the node list.\n         Node list, for each node:\n            PARMNDNM   FX-NODE-NAME           Node's LU name.\n            PARMNDST   FX-NODE-STATUS         Status to this node.\n            PARMNDTD   FX-NODE-XMIT-DATE      Date data was transmitted to\n                                              this node.\n            PARMNDTT   FX-NODE-XMIT-TIME      Time data was transmitted to\n                                              this node.\n            PARMNDRD   FX-NODE-RESTORE-DATE   Date restore notification was\n                                              received.\n            PARMNDRT   FX-NODE-RESTORE-TIME   Time restore notification was\n                                              received.\n0\n-Assembler example:\n0          .\n0          .\n0          .\n           MVC     PARMFX,luname          Set FX LU name\n           MVC     PARMODSN,dsn           Set data set name\n           MVC     PARMOMEM,BLANKS        No member name (not a PDS)\n           MVC     PARMDDSN,BLANKS        Restore using original nam    e\n           MVC     PARMDMEM,BLANKS        Must be blank (no member n    ame)\n           MVI     PARMREPL,C'Y'          Replace if it already exis    ts\n           MVI     PARMALAS,C'N'          Must be no (no member name    )\n *note*    MVC     PARMNDE#,H15           Set number of nodes in are    a\n           LA      R1,USERPARM            Parameter list address\n           L       R15,VFXUSER            Interface address\n           BALR    R14,R15                Link to user interface\n           OC      PARMRC,PARMRC          Successful?\n           BNZ     ......                 No\n           .\n           .\n           .\n0            ... in constants area ...\n   H15     DC      H'15'\n   VFXUSER DC      V(FXUSER)\n             ... in your work area ...\n           USERPARM DSECT=NO\n0\n-COBOL example:\n0            ... in working storage ...\n       01 FX-PARMS COPY USERCOB.\n0            ... procedure division ...\n           .\n           .\n           .\n           MOVE  luname TO FX-APPL-ID.\n           MOVE  dsn    TO FX-ORIGINAL-DSN.\n           MOVE  SPACES TO FX-ORIGINAL-MEMBER.\n           MOVE  SPACES TO FX-DESTINATION-DSN.\n           MOVE  SPACES TO FX-DESTINATION-MEMBER.\n           MOVE  'Y'    TO FX-REPLACE.\n           MOVE  'N'    TO FX-ALIAS.\n *note*    MOVE  15     TO FX-NUMBER-OF-NODES.\n           CALL  'FXUSER' USING FX-PARMS.\n           IF FX-RETURN-CODE NOT = ZERO\n             GO TO FX-ERROR.\n           .\n           .\n           .\n-*Note    The number of nodes can be changed during FX install, ask     the\n          FX installer for the number to use.\n./ ADD NAME=INSTALL  0100-99056-99056-1500-00088-00088-00000-FX-REL1\n\n1                 FX (File Xmit) INSTALLATION\n0 1. Create the following JCL to allocate the JCL library:\n-      //.....    JOB .........\n       //BLDJCL   EXEC PGM=IEBCOPY\n       //SYSPRINT DD SYSOUT=*\n       //FXJCL    DD DSN=xxxx.FX.JCLLIB,DISP=(NEW,CATLG),\n       //            UNIT=uuuu,VOL=SER=vvvvvv,\n       //            SPACE=(TRK,(5,5,5)),\n       //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n       //FILE1    DD DSN=FX.JCLLIB,DISP=OLD,\n       //            UNIT=uuuu,VOL=SER=FX0000,\n       //            LABEL=(1,SL,EXPDT=98000)\n       //SYSIN    DD *\n         COPY INDD=FILE1,OUTDD=FXJCL\n       /*\n       //\n0   Notes:\n        1. Add a JOB card valid at your installation.\n        2. Change the prefix on the data set name on the FXJCL DD\n           statement.\n        3. Change the UNIT and VOLSER on the FXJCL DD statement.\n        4. The SPACE is based on 3380's.\n        5. Change the UNIT to a suitable tape drive unit on the FILE1\n           DD statement.\n- 2. Allocate and load the FX datasets.  Edit and submit FX.JCLLIB\n     member ALLOC.\n- 3. Edit member OPTIONS in FX.MACLIB.   See member OPTIONS in\n     FX.DOC for a description of the option keywords.\n  ** Specially important is to select which type of MASTER file you want\n     (VSAM or BDAM).\n- 4. Assemble all FX modules.  Edit and submit JCLLIB member ASSEMBLE.\n- 5. Link-edit all FX modules.  Edit and submit JCLLIB member LINK.\n- 6. Define the master file.  For VSAM, submit member ALLOVSAM.\n     For BDAM, edit and submit member ALLOBDAM.\n- 7. Format the master file.  Edit and submit member FORMAT.\n- 8. Define the VTAM APPLs.  The FX started task has a control\n     statement (APPL=) that tells the STC which APPL id it should use,\n     and in step 3, ACB names are defined for the user interfaces to\n     use when communicating with the STC.  All of these names must be\n     defined to VTAM.  For example a member in VTAMLST could be:\n0                VBUILD TYPE=APPL\n       FXSTC     APPL  APPC=YES\n       FXAPPLA   APPL  APPC=YES\n                  .\n                  .\n                  .\n       FXAPPLJ   APPL  APPC=YES\n0     If the APPLs are defined in a separate member of VTAMLST, add it\n      to the list of nodes automatically activated at VTAM start-up.\n- 9. Edit the FX exec in FX.CLIST.  Change the FX_NODE = statement\n     to the name you will use for the FX STC APPL name (APPL= parameter\n     in the STC start-up JCL).  Change the prefix on the ISPPLIB LIBDEF\n     statement.\n-10  Edit the FX1 EXEC in FX.CLIST.  Change the prefix on the ISPPLIB\n     LIBDEF statement.\n-11. Edit the FXM EXEC in FX.CLIST.  Change data set name for the\n     master file to the name you used in the step 6.\n-12  Edit the FXM1 EXEC in FX.CLIST. Change the prefix on the ISPPLIB\n     LIBDEF statement.\n-13. Edit member FXSTC in FX.JCLLIB.  Change the prefix on the STEPLIB\n     and FXIN DD's.   Change the data set name in the MASTER DD to the\n     name of your master file.\n-14. Copy the FXSTC to a PROCLIB.\n-15. APF authorize the FX.LOADLIB.\n-16. You may want to add the FX.LOADLIB to your system's LNKLST.\n     If you do you may remove the STEPLIBs in all the JCLLIB\n     members.  If you do not, the library must be available to TSO users\n     and batch jobs.  For TSO users, you can add the library to the\n     STEPLIB or ISPLLIB in the user's TSO proc's or allocate it\n     dynamically in the FX exec if you have TSOPLUS or a similar\n     product.  For the batch jobs, add a STEPLIB to the user's jobs.\n-17. Create a start-up control statement member in FX.JCLLIB.  Member\n     STCPARM member of FX.JCLLIB may be used as a starting point.\n     See member STCPARM of FX.DOC for a description of the control\n     statements.\n-18. Add the FX STC to RACF module ICHRIN03 as a TRUSTED id, or grant\n     the STC access to all data sets it will dump/restore and to the\n     staging data sets it uses.\n-19. RACF protect the staging data sets.  See parameter STAGEPRFX in\n     FX.DOC(STCPARM) for how the stage data sets are named.\n-20. If you want FX to keep a running log of purged requests, define\n     a GDG base.  You probably should use the same data set name\n     prefix as the rest of FX and use a RACF profile that will protect\n     all FX data sets.\n-21. You should be able to start-up the FX STC.\n-22. Add the FX EXEC's to a library accessable to TSO users.\n-23. FX should be ready to go...\n./ ADD NAME=MAXNODE  0100-99056-99056-1500-00022-00022-00000-FX-REL1\n\n1\n   As supplied FX is designed with 15 destinations (max) per\n   transmission request.  If you wish to change this number\n   (upward or downward):\n\n   Just a warning... all FX nodes that communicate with each other\n   must have the same MAXNODE value in their install OPTIONS.\n\n   If you keep the output from FXPURGE as history or for audit\n   reasons, the output LRECL will change.  The previously purged\n   records will have to be kept on a separate history file.\n\n   Change the MAXNODE value in the OPTIONS member of FX.MACLIB.\n\n   Re-assemble and re-link all FX modules.\n\n   If you use the COBOL parameter copy book USERCOB, change the\n   \"OCCURS 1 TO nn TIMES\" value to the number used for MAXNODE.\n\n   Re-run the master file formatter... the numeric portion of the\n   request ID's will start over with 000001.\n./ ADD NAME=MESSAGE  0100-99056-99056-1500-01083-01083-00000-FX-REL1\n\n1           FX (File Xmit) messages\n-           MESSAGES FROM THE BATCH USER INTERFACE PARAMETERs\n0FXBPARM01I CONTROL STATEMENT: xxx...\n    The user batch interface program prints all control statements,\n    xxx... is an image of the user's control statement.\n0FXBPARM02E INVALID CONTROL STATEMENT\n    Self explanitory.\n0FXBPARM03E NO NEW XMIT REQUEST OR STATUS REQUEST FOUND\n    The user interface expects to either enter a new transmission request\n    or inquire on the status of a previously entered request.  You have\n    not supplied the control statements for either of these functions.\n0FXBPARM04E REQUIRED PARAMETER 'FX' NOT SPECIFIED OR BLANK\n    The user interface must know which FX STC it is to communicate with.\n    The VTAM LU name must be provided via a FX= statement.\n0FXBPARM05E BOTH XMIT REQUEST AND STATUS REQUEST FOUND\n    The batch user interface may either enter a new transmission request\n    or inquire on the status of an exisiting request, but only one\n    function per execution (you cannot enter a request and inquire on the\n    status of an existing request in the same execution).\n0FXBPARM06E DUPLICATE ALIAS STATEMENT\n    Self explanitory.\n0FXBPARM07E INVALID DIGIT IN ATTEMPTS VALUE\n    The ATTEMPTS= parameter specifies the number of tries the batch user\n    interface will make to contact the specified FX STC.  The ATTEMPTS=\n    value must be numeric, and an non-numeric value has been specified.\n0FXBPARM08E TOO MANY DIGITS in ATTEMPTS VALUE\n    The ATTEMPTS= parameter specifies the number of tries the batch user\n    interface will make to contact the specified FX STC.  The ATTEMPTS=\n    value must be numeric 1 to 3 digits, a value more than 3 characters\n    long has been specified.\n0FXBPARM09E NUMBER OF ATTEMPTS MAY NOT BE ZERO\n    The ATTEMPTS= statement specifies the number times the user interface\n    will attempt to contact the FX STC.  The number must be 1 to 3 digits\n    and may not be zero.\n0FXBPARM10E FX STC NAME OMITTED\n    The batch user interface must know which FX STC to communicate\n    with, you must supply a FX= statement to define the STC's LU name.\n0FXBPARM11E FX STC APPLID IS TOO LONG (MAX IS 8 CHARACTERS)\n    The value on the FX= statement is too long.  VTAM limits APPLIDs to\n    8 characters.\n0FXBPARM12E DUPLICATE FX STC APPL ID STATEMENT\n    The batch user interface may only communicate with one FX STC per\n    execution and mulitiple FX= statements have been encountered in the\n    control statements.  Remove unneeded FX= statement(s).\n0FXBPARM13E DUPLICATE DSN= STATEMENT\n    The batch user interface accepts only one transmission or inquiry\n    request per execution.  Multiple DSN= statements have been found\n    in the control statements.  Either submit transmission requests with\n    one data set per execution, or remove the unneeded DSN= statements.\n0FXBPARM14E DATASET NAME OMITTED\n    A DSN= statement was entered with a null or blank data set name.\n0FXBPARM15E DUPLICATE NEW DSN= STATEMENT\n    FX will restore the data set transmitted with a new name at the\n    destination(s), however it can only restore it with one name.\n    multiple NEW DSN= statements have been found.  Remove the unneeded\n    NEW DSN= statement(s).\n0FXBPARM16E NEW NAME OMITTED\n    A NEW DSN= statement was entered with a null or blank data set name.\n0FXBPARM17E DUPLICATE MEM= STATEMENT\n    FX will only accept one transmission request per execution.  If you\n    need to transmit mulitple PDS members, execute the utility multiple\n    times.\n0FXBPARM18E MEMBER NAME OMITTED\n    Self explanitory.\n0FXBPARM19E DUPLICATE NEW MEM= STATEMENT\n    FX will only accept one transmission request per execution, and\n    only one PDS member can be sent per request, and a given member\n    can only be renamed once.\n0FXBPARM20E DESTINATION NAME OMITTED\n    Self explanitory.\n0FXBPARM21E TOO MANY DESTINATIONS\n    The maximum number of destinations is set by the MAXNODE parameter\n    in the OPTIONS member of parmlib.  Either send the data via multiple\n    requests or re-install FX with a larger MAXNODE value.  See member\n    MAXNODE in the FX.DOC library for instructions on changing MAXNODE.\n0FXBPARM22E DUPLICATED DESTINATION DEFINITION\n    You have specified the same destination name on multiple DEST=\n    statements.  Remove the duplicated statement.\n    from 1 to 3 digits, and may not be zero.\n0FXBPARM23E INTERVAL MAY NOT BE ZERO\n    The INTERVAL= statement specifies the number of seconds that FX is\n    to wait between attempts to contact the FX STC.  The number of\n    attempts is given by the ATTEMPTS= statement.  The interval may be\n0FXBPARM24E INVALID DIGIT IN INTERVAL\n    The INTERVAL= statement specifies the number of seconds that FX is\n    to wait between attempts to contact the FX STC.  The interval must\n    be 1 to 3 numeric digits.\n0FXBPARM25E INTERVAL HAS TOO MANY DIGITS (3 IS MAX)\n    The INTERVAL= statement specifies the number of seconds that FX is\n    to wait between attempts to contact the FX STC.  The interval must\n    be 1 to 3 numeric digits.\n0FXBPARM26E DUPLICATE INTERVAL STATEMENT\n    Self explanitory.\n0FXBPARM27E DUPLICATE REPLACE STATEMENT\n    Self explanitory.\n0FXBPARM28E DUPLICATE STATUS REQUEST\n    The batch user interface only allows one status request (or one\n    transmission request) to be entered per execution.  You have supplied\n    multiple STATUS= statements.  If you need to inquire on the status\n    of multiple requests, execute the batch interface utility multiple\n    times.  Remove the extra STATUS= statements.\n0FXBPARM29E REQUEST NUMBER OMITTED\n    Format of the STATUS statement is enode,nbr where enode is the node\n    where the request was entered and nbr is the request number assigned\n    by that node when the request was accepted.  You have omitted the\n    nbr portion of the statement.\n0FXBPARM30E REQUEST NUMBER IS TOO LONG (9 DIGITS MAX)\n    The request number on a STATUS= statement must be 1 to 9 digits.\n    You have specified a value more than 9 digits long.\n0FXBPARM31E INVALID DIGIT IN REQUEST NUMBER\n    The request number on a STATUS= statement must be 1 to 9 digits.\n    You have specified a value with a non-numeric value.\n0FXBPARM32E NODE NAME OMITTED ON A STATUS REQUEST\n    Format of the STATUS= statement is enode,nbr where enode is the node\n    where the request was entered and nbr is a sequential number assigned\n    by the entry node when the request is accepted.  You have omitted the\n    enode value.\n0FXBPARM33E XMITFX NAME OMITTED\n    Self explanitory.\n0FXBPARM34E XMITFX NAME IS TOO LONG\n    The XMITFX= statement gives the LU name of the FX STC that is to\n    transmit the requested data set when the request is entered at a node\n    other than the transmitting node.  The LU name is limited by VTAM to\n    8 characters or less.\n0FXBPARM35E DUPLICATE XMITFX STATEMENT\n    A request may have only one transmitting node, but mutliple receiving\n    nodes.  Usually the transmitting node is the node where the request\n    is entered.  FX allows a node other than the node where the request\n    was entered to transmit the data set.  In this case the XMITFX=\n    statement specifies the transmitting node's LU name, only one XMITFX=\n    statement is allowed.  Remove the unneeded XMITFX= statement(s).\n0\n-           MESSAGES FROM THE BATCH USER INTERFACE QUERY\n0FXBREQI01W NODE DATA TRUNCATED DUE TO USER AREA SIZE\n    The MAXNODE parameter in the OPTIONS member of FX.MACLIB is used by\n    both the STC and batch user interface when they are assembled.  The\n    the MAXNODE parameter used for the FX STC assembly was larger than\n    the MAXNODE value used for the batch user interface assembly, and\n    the number of destinations in the request you queried is more than\n    the batch user interface MAXNODE value.  The status information\n    was truncated.  The batch user interface should be re-assembled\n    with the same MAXNODE value used for the FX STC.\n0FXBREQI02I OVER-ALL STATUS IS xxxxxxxxxxxx\n    As FX processes a request its status is updated to reflect the\n    state the request is in at any given time.\n0FXBREQI03I STATUS TO DESTINATION FXNODE nnnnnnnn IS: xxxxxxxxxxxxxxx\n    The transmitting node is the \"control\" point of a request.  As\n    FX transmits data and receives restore notifications, the status\n    to each receiving node is updated.  When the data has been\n    transmitted to all destinations, and the restore status has been\n    received from all destinations, the over-all status will be\n    \"complete\".\n0\n-           MESSAGES FROM THE MASTER FILE FORMATTER (FXFORMAT)\n0FXFORMAT01I CONTROL STATMENT:\n    The formatting program prints all control statements, xxx... is an\n    image of the user's control statement.\n0FXFORMAT02E INVALID CONTROL STATEMENT\n    Self explanitory.\n0FXFORMAT03E INVALID DIGIT IN RECORDS VALUE\n    The RECORDS parameter tells the formatting program the number of\n    4096 byte blocks that were allocated to the master file.  This\n    value must be 1 to 7 numeric digits.  You have entered a non-numeric\n    value.\n0FXFORMAT04E TOO MANY DIGITS IN RECORDS VALUE\n    The RECORDS parameter tells the formatting program the number of\n    4096 byte blocks that were allocated to the master file.  This\n    value must be 1 to 7 numeric digits.  You have entered too many\n    digits.\n0FXFORMAT05E RECORDS VALUE MAY NOT BE ZERO\n    The RECORDS parameter tells the formatting program the number of\n    4096 byte blocks that were allocated to the master file.  This\n    value may not be zero.\n0FXFORMAT06E ERROR(S) DETECTED, EXECUTION ABORTED\n    Error(s) have been detected in the control statements, execution\n    will be aborted.\n0FXFORMAT07E DIV FUNCTION ffffffff FAILED, RC=xxxx\n    The master file is accessed using the DIV access method.  One of\n    the DIV macros was unsuccessful.  The function being attempted was\n    ffffffff, and the return code from the macro is xxxx (hex).\n0FXFORMAT08E ALESERV FUNCTION ffffffff FAILED, RC=xxxx\n    The file formatter creates a dataspace and adds its ALET value to\n    its access list.  One of the ALESERV macros failed, the function was\n    ffffffff and the return code was xxxx (hex).\n0FXFORMAT09E DSPSERV FUNCTION ffffffff FAILED, RC=xxxx\n    The file formatter creates a data space for the master file.  One of\n    the DSPSERV macros failed, the return code was xxxx (hex).\n0FXFORMAT10I NUMBER OF REQUESTS IN MASTER FILE IS nnnnnnn\n    Using the number specified on the RECORDS= statement and the size\n    of the REQBLOK dsect, the file formatter calculates the number of\n    transmission requests that will fit in the master file.  This message\n    is to inform you of the number of requests that can be recorded in\n    the master file.\n0FXFORMAT11I NUMBER OF RECORDS NOT GIVEN\n    The RECORDS= statement is required to tell the formatter how large\n    the master file is in 4K blocks.\n0\n-           MESSAGES FROM THE OFFLINE PURGE PROGRAM (FXPURGE)\n0FXPURGE01I CONTROL STATEMENT: xxx...\n    The purge program prints all control statements, xxx... is an image\n    of the user's control statement.\n0FXPURGE02E INVALID CONTROL STATEMENT\n    Self explanitory.\n0FXPURGE03E DUPLICATE COPY STATEMENT\n    Self explanitory.\n0FXPURGE04E DUPLICATE RETPDC STATEMENT\n    The RETPDC statement specifies the number of days that requests in\n    complete or error status should be retained before being purged.\n    There can only be one value used per execution.  You have multiple\n    RETPDC statements.  Remove the unneeded statement.\n0FXPURGE05E DUPLICATE RETPDU STATEMENT\n    The RETPDU statement specifies the number of days that requests in\n    incomplete status should be retained before being purged.  There\n    can only be one value used per execution.  You have multiple RETPDU\n    statements.  Remove the unneeded statement.\n0FXPURGE06E INVALID DIGIT IN RETPD VALUE\n    RETPDC and RETPDU specify a number of days for a request to be\n    retained before being purged.  You have specified one of these with\n    a non-numeric value.\n0FXPURGE07E TOO MANY DIGITS IN RETPD VALUE\n    RETPDC and RETPDU specify a number of days for a request to be\n    retained before being purged.  These are limited to a maximum of\n    3 digits.\n0FXPURGE08E RETENTION PERIOD MAY NOT BE ZERO DAYS\n    RETPDC and RETPDU specify a number of days for a request to be\n    retained before being purged.  The number of days may not be zero.\n0FXPURGE09E BOTH RETPDC AND RETPDU ARE REQUIRED\n    For a 'purge' run, both the RETPDC and RETPDU values are required.\n0FXPURGE10E COPY IS NOT ALLOWED WITH RETPDC OR RETPDU\n    The FXPURGE utility either copies the master file to NEWSEQ in-\n    whole, or purges records from the master file (and writes the purged\n    ones to NEWSEQ).  The utility cannot do both a COPY and a 'purge'\n    at the same time.\n0FXPURGE11I REQUEST enode nbr PURGED\n    A request has been found that met either the RETPDC or RETPDU\n    criteria and has been purged.  enode nbr is the REQUEST ID.\n0FXPURGE12E DIV FUNCTION ffffffff FAILED, RC=xxxx\n    FXPURGE accesses the master file using the DIV access method.  One\n    of the DIV macros was unsuccessful.  The function being attempted\n    was ffffffff, and the return code from the macro is xxxx (hex).\n0FXPURGE13E DYNAMIC ALLOCATION ERROR, R15=xxxx ERROR=xxxx INFO=xxxx\n    When a request is purged, the staging data sets are deleted.\n    Dynamic allocation failed with the return code, error, and info\n    codes in the message.  FXPURGE abends itself after printing this\n    message so the SVC 99 parm list can be examined.\n0FXPURGE14E DSPSERV FUNCTION ffffffff FAILED, RC=xxxx\n    FXPURGE creates a dataspace for the master file.  One of the\n    DSPSERV macros failed, the return code was xxxx (hex).\n0FXPURGE15E ALESERV FUNCTION ffffffff FAILED, RC=xxxx\n    FXPURGE creates a dataspace and adds its ALET value to its access\n    list.  One of the ALESERV macros failed, the function attempted was\n    ffffffff and the return code was xxxx (hex).\n0FXPURGE16I RECORDS COPIED FROM OLDSEQ           nnnnnnnnn\n    When FXPURGE is purging records, it copies any records from OLDSEQ\n    to NEWSEQ to provide a cumulative history of purged records.  This\n    message informs you of the number of records found on the OLDSEQ\n    data set.\n0FXPURGE17I RECORDS WRITTEN TO NEWSEQ            nnnnnnnnn\n    Whether COPY or purge function is used, this message informs you of\n    the number of records written to the NEWSEQ dataset.\n0FXPURGE18I RECORDS PURGED IN IN-COMPLETE STATE nnnnnnnnn\n    When FXPURGE is purging records, it counts the number purged in\n    in-complete status.  This message informs you of this number.\n0FXPURGE19I RECORDS PURGED IN COMPLETED STATE    nnnnnnnnn\n    When FXPURGE is purging records, it counts the number purged in\n    complete status.  This message informs you of this number.\n0\n-           MESSAGES FROM THE ATTENTION EXIT\n0FXSATTN01I  SESSION WITH tttt NODE nnnnnnnn ESTABLISHED\n    Another FX STC or user (TSO or BATCH) has started a VTAM session\n    with this FX STC.   tttt is either FX or USER and nnnnnnnn is the\n    VTAM LU name of the other FX STC or USER.\n0FXSATTN02I  SESSION REJECTED, LU NAME nnnnnnnn\n    An FMH5 was received by the ATTN exit that was not a valid FX-to-FX\n    or FX-to-USER form.\n0FXSATTN03I  SESSION LOST TO tttt NODE nnnnnnnn\n    The VTAM session to another FX STC or user has ended.   tttt will be\n    either FX or USER and nnnnnnnnn will be the other FX or USER's LU\n    name.\n0\n-           MESSAGES FROM FXSLOSS (lost conversation clean-up)\n0FXSLOSS01I  TRANSMISSION REQUEST enode nbr dddddddd INTERRUPTED\n             BY LOSS OF VTAM CONVERSATION\n    FX was transmitting a data set (original data set name is in the\n    message) when the VTAM conversation was lost.  The status will be\n    reset, and the data set will be transmitted when the conversation\n    can be restored.  enode nbr is the REQUEST ID.\n0FXSLOSS02I  RECEIVE OF REQUEST enode nbr dataset INTERRUPTED\n             BY LOSS OF VTAM CONVERSATION\n    FX was receiving a data set (original data set name is in the\n    message) when the VTAM conversation was lost.  The master file\n    record will be reset to 'FREE' and the staging data set deleted.\n    The sending node will re-start the transmission when the conversation\n    can be re-established.  enode nbr is the REQUEST ID.\n0\n-           MESSAGES FROM FXSMAIN (STC mainline)\n0FXSMAIN01E  FXPRT DD STATEMENT IS NOT PRESENT\n    FXPRT is a required JCL DD statement.  Add the FXPRT DD to your\n    STC JCL, and restart the STC.\n0FXSMAIN02I  PRINT SUBTASK ATTACHED\n    FX runs as multiple tasks and has asynchronous VTAM exits.  This\n    means that multiple tasks could generate messages at the same time.\n    To keep messages in chronological order, and to prevent the need to\n    \"merge\" multiple sysout data sets to determine what happend in what\n    order, all sysprint is sent to the same output DD.  Rather than try\n    to serialize a DCB, all printing is done by a print subtask.  This\n    message informs you that the print subtask has been ATTACHed and is\n    active.\n0FXSMAIN03I  INITIALIZATION STARTING\n    Self explanitory.\n0FXSMAIN04E  REQUIRED DD dddddddd IS NOT PRESENT\n    See the FXSTC member of FX.JCLLIB for a sample of the STC JCL,\n    add the required DD statement and restart the STC.\n0FXSMAIN05E  ADD REQUIRED DD(S) TO YOUR JCL AND RE-SUBMIT\n    Refer to the FXSMAIN09E messages to find out which DD statements\n    you omitted.\n0FXSMAIN06I  EXTERNAL TRACE SUBTASK ATTACHED\n    FX has an internal trace table to aid in problem determination.  If\n    FX loops, it may be difficult to determine how the loop started. If\n    the FXSXTR DD is present in the start-up JCL, the entries recorded\n    in the internal trace table will also be written to this DD.  Like\n    print, trace entries are generated by multiple tasks.  Like printing\n    rather than serialize a DCB (and slow the main proccessing), the\n    trace entries are written by a separate subtask.  This message\n    informs you that the trace subtask has been ATTACHed and is active.\n0FXSMAIN07I  MASTER FILE INITIALIZATION COMPLETE\n    If FX was sending, receiving, dumping, or restoring a data set at\n    the time of a failure, appropriate \"clean-up\" or restart steps are\n    taken.  If any of these situations existed during the start-up,\n    messages will be issued describing the status the request was in,\n    what was done to \"clean-up\" or restart the request.  This message\n    implies that are all requests are in a known state and that FX\n    is proceding with start-up.\n0FXSMAIN08I  DF/DSS SUBTASK ATTACHED\n    Since FX has no control over what DF/DSS does (once DF/DSS gets\n    control, FX has to wait for it to complete before continuing), the\n    DF/DSS work is done under a separate subtask.  This message informs\n    you that the sub-task is attached and active.\n0FXSMAIN09I  IEBCOPY SUBTASK ATTACHED\n    FX has no control over what IEBCOPY does (once IEBCOPY gets control\n    FX has to wait for it to complete before continuing).  Also IEBCOPY\n    is prone to X37 abends.  For these reasons, the IEBCOPY work is done\n    under a subtask.  This message informs you that the subtask has\n    been successfully ATTACHed and is active.\n0FXSMAIN10I  ERROR(S) DETECTED IN CONTROL STATEMENTS, EXECUTION ABORTED\n    Errors were detected in the control statements, messages should have\n    been issued describing the problems.  Correct the control statements\n    and re-start the STC.\n0FXSMAIN11E  tttttt SUBTASK ATTACH FAILED, RC=xxxx EXECUTION ABORTED\n    One of the subtasks could not be attached.  tttttt is the task,\n    (DF/DSS, IEBCOPY, PRINT, or XTR), and xxxx is the return code from\n    the system ATTACH macro in hex.\n0FXSMAIN12E  tttttt SUBTASK DETACH FAILED, RC=xxxx\n    At STC shutdown, the subtasks are terminated and DETACHed.  One of\n    the DETACHs failed, the return code from the DETACH macro is xxxx.\n0FXSMAIN13E  MASTER FILE INITIALIZATION FAILED\n    If FX was sending, receiving, dumping, or restoring a data set at\n    the time of a failure, appropriate \"clean-up\" or restart steps are\n    taken.  If any of these situations existed during the start-up,\n    messages will be issued describing the status the request was in,\n    what was done to \"clean-up\" or restart the request.  This message\n    indicates that at least one request is in a state that will not\n    allow FX start-up to procede.\n0FXSMAIN90I  TERMINATION BEGINNING\n    FX STC has started its shut-down processing.\n0FXSMAIN91I  DF/DSS SUBTASK TERMINATED, ECB = xxxxxxxx\n    When FX shuts down, it signals the DF/DSS subtask that it should\n    terminate.  xxxxxxxx is the completion code of the DF/DSS subtask,\n    this should be all zero.\n0FXSMAIN92I  DF/DSS SUBTASK DETACHED\n    Self explanitory.\n0FXSMAIN93I  IEBCOPY SUBTASK TERMINATED, ECB = xxxxxxxx\n    When FX shuts down, it signals the IEBCOPY subtask that it should\n    terminate.  xxxxxxxx is the completion code of the IEBCOPY subtask,\n    this should be all zero.\n0FXSMAIN94I  IEBCOPY SUBTASK DETACHED\n    Self explanitory.\n0FXSMAIN95I  STARTING MASTER FILE CLOSE\n    The master file is a DIV linear data set accessed via a data space.\n    FX is starting to close the data set and delete the data space.\n0FXSMAIN96I  MASTER FILE CLOSED\n    The master file is closed, all changes should be saved, and the\n    dataspace is been deleted.\n0FXSMAIN99I  TERMINATION COMPLETE\n    The FX STC has shutdown successfully.\n0\n-           MESSAGES FROM FXSMINIT (master file initialization)\n0FXSMINIT01I TRANSMISSION OF enode nbr dddddddd INTERRUPTED\n    FX was transmitting a request when a system or FX failure occurred.\n    enode/nbr is the requset ID, dddddddd is the original data set\n    name.  The request status will be reset to 'READY TO TRANSMIT',\n    and the transmission will be retried.\n0FXSMINIT02I TRANSMISSION WILL BE RETRIED\n    Follows message FXSMINIT01I and is self explanitory.\n0FXSMINIT03I MASTER FILE INITIALIZATION STOPPED AT END OF MASTER FILE\n    The master file is only searched until an unused record is found.\n    In this case the intialization stopped due to reaching the end of\n    the master file.  This is not very likely to ever occur, and if it\n    does, it means your master file is completely full.\n0FXSMINIT04I DUMP FOR REQUEST enode nbr dddddddd INTERRUPTED\n    DF/DSS or IEBCOPY was \"dumping\" a data set or PDS member at the time\n    of a system or FX failure.  enode/nbr is the request ID, dddddddd is\n    the original data set name.\n0FXSMINIT05I RESTORE FOR REQUEST enode nbr dddddddd INTERRUPTED\n    FX was restoring a data set or PDS member when a system or\n    FX failure occurred.  enode/nbr is the request ID, dddddddd is the\n    data set name.  The request will be re-queued to the DF/DSS or\n    IEBCOPY subtask.\n0FXSMINIT06I RECEIVE OF OF enode nbr dddddddd INTERRUPTED\n    FX was receiving a data set from another FX ndoe when a system or\n    FX failure occurred.  enode/nbr is the request ID, dddddddd is the\n    original data set name.  The staging data set will be deleted,\n    and the master file record reset to 'free' status (the master file\n    and stage data sets will be re-updated when the sender re-starts\n    transmission).\n0FXSMINIT07I DATASET dddddddddd SUCCESSFULLY DELETED\n    As a part of master file clean-up/restart, some staging data sets\n    will be deleted (and re-allocated when the process is resumed).\n    This message is issued for any of these data sets that are deleted.\n0FXSMINIT08E DELETE FAILED ttttttt dddddddd SVC99 R15=xxxx ERROR=xxxx INFO=xxxx\n    A staging data set delete failed.  tttttttt is the type of staging\n    data set and may be: STAGING, SYSIN, or SYSPRINT, dddddddd is the\n    data set's name.  The dynamic allocation return code, error code,\n    and info codes are printed in hex.\n0\n-           MESSAGES FROM MASTER FILE ACCESS\n0FXSMSTR01E  DIV FUNCTION ffffffff FAILED, R15=xxxx\n    FX accesses the master file using the DIV access method.  One of\n    the DIV macros was unsuccessful.  The function being attempted was\n    ffffffff, and the return code from the macro is xxxx (hex).\n0FXSMSTR02E  DSPSERV FUNCTION ffffffff FAILED, R15=xxxx\n    FX creates a dataspace for the master file.  One of the DSPSERV\n    macros failed, the return code was xxxx (hex).\n0FXSMSTR03E  ALESERV FUNCTION ffffffff FAILED, R15=xxxx\n    FX creates a dataspace and adds its ALET value to its access list.\n    One of the ALESERV macros failed, the function attempted was ffffffff,\n    and the return code was xxxx (hex).\n0\n-           MESSAGES FROM THE STC PARAMETERS\n0FXSPARM01I  CONTROL STATEMENT: xxx...\n    The STC prints all control statements, xxx... is an image of the\n    user's control statement.\n0FXSPARM02E  INVALID CONTROL STATEMENT\n    Self explanitory.\n0FXSPARM03E  REQUIRED PARAMETER 'APPLID' NOT SPECIFIED OR BLANK\n    The STC must use an APPLID (ACB name) to identify itself to VTAM.\n    This name must be supplied via the APPLID= statement.  Either you\n    omitted the APPLID= statement, or the value was blank.\n0FXSPARM04E  NO STAGING VOLUMES DEFINED\n    FX requires staging data sets.  At least one STAGE volume must\n    be specified.\n0FXSPARM05E  STAGING DATASET PREFIX NOT GIVEN\n    Stage data sets have a name of the form prefix.Dyyddd.Thhmmss.Dnnnnnnn.\n    There is no default for the prefix, and no STAGEPRFX= statement was\n    found or the value was blank.\n0FXSPARM06I  ABEND FLAG SET\n    FX may be abended during shutdown before freeing control blocks\n    for diagnosing problems.  This message indicates this has been\n    requested.\n0FXSPARM07I  APPLID STATEMENT PROCESSED SUCCESSFULLY\n    Self explanitory.\n0FXSPARM08E  APPL NAME OMITTED\n    An APPLID statement was found with a blank APPLID (ACB name) value.\n0FXSPARM09E  APPLID IS TOO LONG (MAX IS 8 CHARACTERS)\n    VTAM limits the APPLID (ACB name really) to 8 characters or less.\n0FXSPARM10E  DUPLICATE APPLID STATEMENT\n    The STC may only use one APPL (or ACB name).  Multiple APPLID=\n    statements have been found.  Remove the unneeded statement.\n0FXSPARM11I  DESTINATION DEFINED SUCCESSFULLY\n    Self explanitory.\n0FXSPARM12E  DESTINATION NAME OMITTED\n    The format of the DESTINATION statement is DESTINATION=alias,luname.\n    A DESTINATION statement was found with both the alias and lunames\n    omitted.\n0FXSPARM13E  NODE NAME OMITTED\n    The format of the DESTINATION statement is DESTINATION=alias,luname.\n    The luname was blank or omitted.\n0FXSPARM14E  DUPLICATED DESTINATION DEFINITION\n    The same 'alias' has already been defined for this FX node.\n0FXSPARM15E  SPECIFIED NODE IS NOT DEFINED\n    The luname on a DESTINATION statement must be defined previously on\n    a FXNODE statement.   You have referenced a FX node lu name that\n    has not been defined.\n0FXSPARM16I  MAX FILE SIZE SET\n    Self explanitory.\n0FXSPARM17E  MAX FILE SIZE MAY NOT BE ZERO\n    Self explanitory.\n0FXSPARM18E  INVALID DIGIT IN MAX SIZE VALUE\n    MAX SIZE= sets the maximum file size in bytes that FX will attempt\n    to transmit.  This value must be 1 to 9 numeric digits.\n0FXSPARM19E  MAX SIZE VALUE HAS TOO MANY DIGITS (9 MAX)\n    MAX SIZE= sets the maximum file size in bytes that FX will attempt\n    to transmit.  This value must be 1 to 9 numeric digits.\n0FXSPARM20I  PDS MEMBER STAGE SPACE SET\n    Self explanitory.\n0FXSPARM21E  PDS MEMBER SPACE MAY NOT BE ZERO\n    Self explanitory.\n0FXSPARM22E  INVALID DIGIT IN PDS MEMBER SPACE\n    MEM SIZE= sets the stage data set size for PDS member transmissions.\n    This value must be 1 to 9 numeric digits.\n0FXSPARM23E  PDS MEMBER SPACE HAS TOO MANY DIGITS (9 MAX)\n    MEM SIZE= sets the stage data set size for PDS member transmissions.\n    This value must be 1 to 9 numeric digits.\n0FXSPARM24I  FX NODE DEFINED SUCCESSFULLY\n    Self explanitory.\n0FXSPARM25E  FX NODE IS DUPLICATELY DEFINED\n    All other FX nodes that this FX STC will \"talk\" to must be defined\n    via FXNODE= statements.   You have specified the same LU name on\n    multiple FXNODE= statements.\n0FXSPARM26E  NODE NAME OMITTED\n    The LU name on a FXNODE= statement is blank.\n0FXSPARM27E  FX NODE NAME IS TOO LONG\n    The value on FXNODE= statements is the LU name of another FX STC.\n    VTAM limits the LU names to 8 characters or less.\n0FXSPARM28I  STAGING DATASET PREFIX PROCESSED SUCCESSFULLY\n    Self explanitory.\n0FXSPARM29E  STAGING DATASET PREFIX ALREADY GIVEN\n    The staging data sets will be allocated with the prefix specified\n    by the STAGEPRFX= statement, however only one STAGEPRFX value\n    can be used per execution.  Remove the unneeded statements.\n0FXSPARM30E  PREFIX NAME OMITTED\n    A STAGEPRFX statement was found with a blank value for the prefix.\n0FXSPARM31E  STAGING DATASET PREFIX TOO LONG\n    Stage data sets have a name of the form prefix.Dyyddd.Thhmmss.Dnnnnnnn.\n    This leaves 20 characters for the prefix portion.  Your prefix value\n    is too long.\n0FXSPARM32I  VOLSER ADDED TO LIST\n    A RESTORE statement with the same prefix has been previously\n    defined.  The volser on this statement is added to the list of\n    volumes that the data set is eligible to be restored on.\n0FXSPARM33E  MORE THAN 20 VOLUMES ASSIGNED TO SAME DSN\n    A data set may be eligible to be restored on more than one volume.\n    You indicate this by specifying multiple RESTORE statements with\n    the same prefix and different volsers, however the number of volumes\n    is limited to 20.\n0FXSPARM34I  NEW DATASET PREFIX ADDED TO LIST\n    A valid RESTORE statement has been processed for a prefix that has\n    not been encountered up to this time.\n0FXSPARM35E  DSN AND VOLSER MISSING\n    The format of a RESTORE statement is RESTORE=prefix,vvvvvv.  A\n    RESTORE= statement has been found with no prefix or volser.\n0FXSPARM36E  DSN PREFIX ENDING DELIMITER MISSING\n    The format of a RESTORE statement is RESTORE=prefix,vvvvvv.  The\n    comma marking the end of the prefix was not found.\n0FXSPARM37E  VOLSER MISSING\n    The format of a RESTORE statement is RESTORE=prefix,vvvvvv.  The\n    volser following the delimiting comma was blank.\n0FXSPARM38E  VOLSER IS TOO LONG\n    The volser on a RESTORE statement is more than 6 characters long.\n0FXSPARM39I  SNAPSHOT SYSOUT CLASS SET\n    Self explanitory.\n0FXSPARM40E  SNAPSHOT SYSOUT CLASS CANNOT BE BLANK\n    Self explanitory.\n0FXSPARM41E  SNAPSHOT SYSOUT CLASS TOO LONG\n    Sysout class may only be 1 character long.\n0FXSPARM42I  SYSTEM NAME SET\n    Self explanitory.\n0FXSPARM43E  SYSTEM NAME BLANK\n    Self explanitory.\n0FXSPARM44I  STAGING VOLUME ADDED TO LIST\n    A valid STAGE statement has been processed. The volume specified\n    will be considered available for allocating staging data sets.\n0FXSPARM45E  DUPLICATE STAGING VOLUME DEFINITION\n    Multiple STAGE= statements have been found referencing the same\n    volume.  Remove the duplicate statements.\n0FXSPARM46E  STAGING VOLUME VOLSER IS TOO LONG\n    A STAGE= statement specifies a volser more than 6 characters long.\n0FXSPARM47E  VOLSER OMITTED\n    A STAGE statement was found with a blank value for the volser.\n0\n-           MESSAGES FROM FXSRECV\n0FXSRECV01I  RECEIVE OF REQUEST enode nbr dddddddd FROM NODE nnnnnn STARTED\n    FX has started receiving a data set from another FX node.  enode\n    nbr is the REQUEST ID, dddddddd is the original data set name, and\n    nnnnnnnn is the transmitting node.\n0FXSRECV02I  TRANSFER OF REQUEST enode nbr COMPLETE\n    A request was entered at another FX node that is to be transmitted\n    by this FX node.  The request has been transferred from the entry\n    node (enode) to the transmitting node (this node).  enode nbr is the\n    REQUEST ID.\n0FXSRECV03I  RECEIVE OF REQUEST enode nbr dddddddd FROM NODE nnnnnn COMPLETE\n    FX has successfully received a data set from another FX node.\n    enode nbr is the REQUEST ID, dddddddd is the original data set name,\n    and nnnnnnnn is the transmitting node.\n0FXSRECV04I  CONVERSATION WITH NODE nnnnnnnn DEALLOCATED BY PRIMARY END\n    When FX transmits a data set, it allocates a conversation, uses the\n    conversation to transmit the data, and de-allocates the conversation\n    when the transmission is complete, this is a normal message.\n0FXSRECV05E  CONVERSATION DEALLOCATED DURING RECEIVE OF REQUEST enode nbr dddddd\n    A data set was being received from another FX node when the\n    conversation was de-allocated prematurely.  The staging data set is\n    deleted, and the master file record status set to \"ERROR DURING\n    RECEIVE\".  enode nbr is the REQUEST ID.\n0FXSRECV06E  RESTORE FAILED AT NODE nnnnnn FOR REQUEST enode nbr dddddddd\n    This FX node previously transmitted a data set to node nnnnnnn.  The\n    DF/DSS or IEBCOPY restore failed at that node.  Use the TSO interface\n    to query the request at node nnnnnnnn, and use option 'O' to view the\n    messages produced by the utility.  enode nbr is the REQUEST ID.\n0FXSRECV07I  RESTORE SUCCESSFUL AT NODE nnnnnn FOR REQUEST enode nbr dddddddd\n    This FX node previously transmitted a data set to node nnnnnnn.  The\n    DF/DSS or IEBCOPY restore was successful at that node.  enode nbr is\n    the REQUEST ID.\n0FXSRECV08I  PROCESSING COMPLETE FOR REQUEST enode nbr dddddddd\n    When the last (or only destination) returns its restore status\n    (sucessful or not), the processing for the request is complete.\n    FXPURGE will now consider this request eligible for purging when\n    the RETPDC criteria is met.  enode nbr is the REQUEST ID.\n0FXSRECV09I  RESTORE STATUS RECEIVED FOR REQUEST enode nbr ddddddd,\n             MASTER RECORD NOT FOUND\n    This FX node previously transmitted a data set to node nnnnnnn.  The\n    request may have been DELETEd by an ADMINISTATOR level user, or\n    purged as in-complete.  The restore notification is ignored.  enode\n    nbr is the REQUEST ID.\n0FXSRECV10E  INSUFFICIENT SPACE ON STAGE DEVICES\n    When FX transmits a data set, it creates a \"dump\", and then\n    transmits the dump.  At a receiving node, the first record received\n    informs the receiving node of the size of the original data set\n    in bytes.  The receiving node then tries to allocate a staging\n    data set on its STAGE volume(s) of an equivalent size.  If there\n    is insufficient space on the STAGE volume(s), the data set cannot\n    be received.  The sender is notified, and the status at the sending\n    end for this node will be updated accordingly.\n0\n-           MESSAGES FROM THE STC REQUEST ENTRY PROCESSOR (FXSREQE)\n0FXSREQE01E nnnnnnnnn IS NOT A VALID TRANSMITTING NODE NAME\n    FX will accept \"aliases\" (defined on the DESTINATION= statements in\n    the FX STC start-up parameters) for receiving node names.   As of\n    now, if a request is entered at one node that is to be transmitted\n    by a different node, that node's LU name must be entered, \"aliases\"\n    are not valid.  The value you entered does not match a FX node\n    defined to the entry FX on a FXNODE= statement.\n0FXSREQE02E NODE nnnnnnnn IS INVALID\n    Destinations for a data set transmission must be defined to the\n    STC that will transmit the data set via either the FXNODE= or\n    DESTINATION= statements.  The node in the message is unknown to the\n    transmitting node.\n0FXSREQE03E MEM SIZE NOT DEFINED, PDS MEMBER TRANSMISSION NOT AVAILABLE\n    FX requires the STC start-up parameter MEM SIZE before it will\n    transmit a PDS member.  The MEM SIZE parameter was not given for the\n    FX STC where you are trying to enter the transmission request.  Add\n    the MEM SIZE parameter to the STC start-up parameters and re-start\n    the STC.\n0FXSREQE04I TRANSMISSION REQUEST enode nbr ACCEPTED\n    All required data for a transmission request has been entered and\n    verified as valid.  FX will attempt to transmit the data set.\n    enode nbr is the REQUEST ID and will appear in all messages\n    pertaining to this request.\n0FXSREQE05I MASTER FILE RECORD rrrrr REQUESTOR uuuuuuuu DATASET dddddddd\n    Follows message FXSREQE02I and gives further information for the\n    FX STC log of the transmission request just accepted.\n0FXSREQE06I TO NODES (ONLY FIRST FIVE WILL BE LISTED) nnnnn1 nnnn2 ... nnnn5\n    Follows message FXSREQE03I and gives further information for the\n    FX STC log of the transmission request just accepted.\n0FXSREQE07E YOU ARE NOT AUTHORIZED TO USE FX\n    When FX was installed, a RACF CLASS and resource (ENTITY) were\n    defined that you must have at least READ level access to before\n    you can use FX.\n0FXSREQE08E NODE nnnnnnnn IS DUPLICATED\n    You have specified the same node as a destination multiple times.\n    FX can only send the data to a given destination once per request.\n0FXSREQE09E YOU DO NOT HAVE ALTER LEVEL ACCESS TO REQUESTED DATA SET\n    Before FX will transmit a data set for you, you must have RACF\n    ALTER level access.  This is to prevent users from transmitting data\n    sets to other locations (possibly under a new data set name) where\n    they would have higher level of access to the data).  Also for full\n    data set transmissions, FX must re-create the data at the destinations\n    which requires alter level access.\n0FXSREQE10E TRANSMITTING NODE CANNOT ALSO BE A DESTINATION\n    FX cannot transmit a request from and to the same node, the\n    transmitting node cannot also be a receiving node.\n0\n-           MESSAGES FROM THE STC REQUEST INQUIRY PROCESSOR (FXSREQI)\n0FXSREQI01I ttttttt DATASET dddddddd DELETED FOR REQUEST enode nbr\n    When an ADMINISTRATOR level user DELETEs a request, the SYSIN,\n    SYSPRINT, and \"dump\" data sets are deleted (if they exist) and the\n    master file record is set to 'FREE'.  These messages list the data\n    sets deleted.  enode nbr is the REQUEST ID.\n0FXSREQI02I REQUEST enode nbr DELETED\n    An ADMINISTRATOR level user has DELETEd a request.  No \"history\" of\n    the request will be in the FXPURGE output file, the only record of\n    the deletion will be the FX STC log.  enode nbr is the REQUEST ID.\n0FXSREQI03I REQUEST enode nbr CANCELLED\n    A request has been cancelled.  No further processing of this request\n    will be done.  The request and the staging data sets will be retained\n    until FXPURGE purges the request.  enode nbr is the REQUEST ID.\n0\n-           MESSAGES FROM FXSSEND\n0FXSSEND01I  TRANSMISSION OF REQUEST enode nbr dddddddd TO NODE nnnnnnnn STARTED\n    FX has started transmitting a data set to another FX node.  enode\n    nbr is the REQUEST ID, dddddddd is the original data set name, and\n    nnnnnnnn is the receiving node.\n0FXSSEND02E  REQUEST enode nbr REJECTED BY NODE nnnnnnnn mmmm.......\n    When FX starts transmitting a request to a receiving node, it\n    first sends a record that informs the receiver about the data set\n    to be transmitted.  If the receiving node cannot accept the data\n    set (normally this will be due to insufficient staging space),\n    it will return a message indicating why it cannot accept the request.\n    mmm............ is the message returned from the receiving node.\n    The master file status for the receiving node will be set to an\n    'error' state and the request will not be retried to that destination.\n    enode nbr is the REQUEST ID.\n0FXSSEND03I  TRANSMISSION OF REQUEST enode nbr dddddddd TO NODE nnnnnnn COMPLETE\n    FX has successfully transmitted a data set to another FX node.\n    enode nbr is the REQUEST ID, dddddddd is the original data set name,\n    and nnnnnnnn was the receiving node.\n0FXSSEND04I  RESTORE NOTIFICATION SENT FOR REQUEST enode nbr TO NODE nnnnnnnn\n    After a data set has been received from another node, a request is\n    queued to the DF/DSS or IEBCOPY subtask to restore the data.  When\n    the restore operation is complete, the success or failure is updated\n    in the master file and the node that transmitted the data set is\n    also notified.  enode nbr is the REQUEST ID.\n0FXSSEND05I  REQUEST enode nbr TRANSFERRED TO NODE nnnnnnn\n    A request was entered at this node that is to be transmitted by\n    another FX node.  enode nbr is the REQUEST ID, nnnnnnnn is the\n    transmitting FX node's name.\n0FXSSEND06I  CONVERSATION WITH NODE nnnnnnnn DEALLOCATED, CID=xxxxxxxx\n    When FX communicates with another FX NODE, it allocates a\n    conversation with that node, transmits the data, and then de-allocates\n    the conversation, this is a normal message.\n0FXSSEND07E  WORK FILE ALLOCATION FAILED enode nbr R15=xxxx ERROR=xxxx INFO=xxx\n    When FX transmits a data set, it creates a \"dump\", and then transmits\n    the dump.  When a destination for the data set is active and ready\n    FXSSEND attempts to allocate the \"dump\" created earlier.  The\n    dynamic allocation failed.  enode nbr is the REQUEST ID.  The SVC 99\n    return code, error code, and info codes are printed in hex.\n0\n-           MESSAGES FROM THE STC SHUTDOWN (FXSSHUT)\n0FXSSHUT01I SHUTDOWN STARTED, REQUESTED BY uuuuuuuu\n    A user has requested that the FX STC \"shutdown\" or terminate.\n0FXSSHUT02E SHUTDOWN ALREADY IN PROGRESS\n    FX shutdown is already in progress.  Certain functions must be\n    allowed to complete before the STC can terminate.  If the STC\n    never shuts down, \"snapshot\" the STC to determine what is in\n    progress.\n0FXSSHUT03E SHUTDOWN REQUEST FROM USER uuuuuuuu, INSUFFICIENT AUTHORITY\n    A user with less than OPERATOR authority attempted to shutdown the\n    STC.  The shutdown request is ignored, this message is written to\n    the FX STC log to record the unauthorized attempt.\n0FXSSHUT04E YOU ARE NOT AUTHORIZED TO SHUTDOWN FX\n    A user with less than OPERATOR authority attempted to shutdown the\n    STC.  This message is returned to the user to inform them that the\n    request will not be honored.\n0\n-           MESSAGES FROM THE STC SNAPSHOT (FXSSNAP)\n0FXSSNAP01I SNAP SHOT REQUESTED BY uuuuuuuu\n    A user has requested that the FX STC \"snapshot\" its control blocks\n    and trace table.\n0FXSSNAP02E YOU ARE NOT AUTHORIZED TO SNAP SHOT FX\n    A user with less than OPERATOR authority attempted to snapshot the\n    STC.  The snapshot request is ignored, this message is returned to\n    the user to inform them that the request will not be honored.\n0\n-           MESSAGES FROM FXSSTGE (STAGE/DE-STAGE)\n0FXSSTGE01I  IEBCOPY ABENDED X37 ON REQUEST enode nbr dddddddd mmmmmmmm\n    The DF/DSS subtask should never abend because the data set size\n    is determined by the data from the VTOCs.  PDS member size is\n    specified on a start-up parameter and may not always be large\n    enough.  Also on the \"restore\" end, the output PDS may fill up or\n    may not have sufficient directory space.  FX detects X37 abends, and\n    re-attaches the IEBCOPY subtask when they occur.  enode nbr is the\n    REQUEST ID being processed at the time of failure.  If this is the\n    transmitting node, the request will be flagged 'MEMBER TOO LARGE',\n    if this is the receiving end, the status at this destination will be\n    'OUTPUT PDS IS FULL'.\n0FXSSTGE02I  IEBCOPY SUBTASK RE-ATTACHED\n    This should follow message FXSSTGE15I, and informs you that the\n    IEBCOPY subtask has been successfully re-attached.\n0FXSSTGE03E  NO 'RESTORE' STATEMENT FOUND FOR REQUEST enode nbr dddddddd\n    For full data set transmissions, FX must know which volumes are\n    eligible to receive a data set when it is restored.  This information\n    is provided to the STC by the RESTORE= statements in the STC start-\n    up parameters.  If no RESTORE criteria matches the name (new name\n    if the data set is to be renamed), FX does not know which volumes\n    to pass on to the DF/DSS subtask.  The request is flagged in an\n    error condition and will not be retried.  enode nbr is the REQUEST ID.\n0FXSSTGE04E  ERROR ALLOCATING tttttttt DAIR R15=xxxx ERROR=xxxx INFO=xxxx\n    FX utilizes the IBM utility DF/DSS or IEBCOPY to \"dump\" and \"restore\"\n    data sets or PDS members.  Three data sets are allocated, one for the\n    SYSIN, one for the SYSPRINT, and one for the \"dump\".  tttttttt is the\n    type of data set being allocated (SYSIN, SYSPRINT, or STAGING).  The\n    SVC 99 return code, error code, and info codes are in the message in\n    hex.\n0FXSSTGE05I  DUMP FOR REQUEST enode nbr dddddddd QUEUED TO DUMP SUBTASK\n    A request has been queued to the DF/DSS or IEBCOPY subtask to\n    create a dump of a data set or PDS member for transmission.  enode\n    nbr is the REQUEST ID.\n0FXSSTGE06I  RESTORE FOR REQUEST enode nbr dddddddd QUEUED TO RESTORE SUBTASK\n    A data set has been successfully received from another FX node.  A\n    a request to have the data set or PDS member \"restored\" has been\n    sent to the DF/DSS or IEBCOPY subtask.  enode nbr is the REQUEST ID.\n0FXSSTGE07I  DUMP SUCCESSFUL FOR REQUEST enode nbr dddddddddd\n    The DF/DSS DUMP or IEBCOPY unload was successful, the data is now\n    ready to be transmitted to the destinations.  enode nbr is the\n    REQUEST ID.\n0FXSSTGE08I  MEMBER SIZE EXCEEDS MEM SIZE PARAMETER enode nbr dddddddd  mmmmmmmm\n    If a PDS member \"dump\" operation fails with a X37 abend, FX knows\n    the member is too large for the stage data set.  The only way FX\n    can transmit this member is to have the MEM SIZE parameter increased.\n    enode nbr is the REQUEST ID.\n0FXSSTGE09E  DUMP FAILED FOR REQUEST enode nbr dddddddddd\n    The DF/DSS DUMP or IEBCOPY unload was not successful.  Use the TSO\n    interface and query the request, use option 'O' to view the messages\n    to determine why the dump was unsuccessful.  This request will be\n    flagged in an error condition and will not be retried.  enode nbr\n    is the REQUEST ID.\n0FXSSTGE10E  MEMBER NOT FOUND  enode nbr dddddddd mmmmmmmm\n    The requested member was not found in the source data set.  The\n    request is flagged in \"error\" state.  enode nbr is the REQUEST ID,\n    dddddddd is the source data set name, mmmmmmmm is the member name.\n0FXSSTGE11I  RESTORE SUCCESSFUL FOR REQUEST enode nbr dddddddd\n    After a data set is received a request is queued to the DF/DSS\n    or IEBCOPY subtask to restore the data set or PDS member.  The\n    RESTORE operation was successful.  The sending node will be notified\n    of the success.  The request is considered complete at the receiving\n    node.  enode nbr is the REQUEST ID.\n0FXSSTGE12I  OUTPUT DATA SET FULL enode nbr dddddddd mmmmmmmm\n    If a PDS member \"restore\" operation fails with a X37 abend, FX knows\n    the output data set is full.  Before the member can be transmitted,\n    the output PDS will have to be compressed, or have additional\n    directory blocks.  enode nbr is the REQUEST ID, dddddddd is the\n    output data set name, mmmmmmmm is the member name.\n0FXSSTGE13E  RESTORE FAILED FOR REQUEST enode nbr dddddddd\n    After a data set is received a request is queued to the DF/DSS\n    or IEBCOPY subtask to restore the data set or PDS member.  The\n    RESTORE operation was not successful.  The sending node will be\n    notified of the failure.  Use the TSO interface and use option 'O'\n    to view the messages to determine the cause of the failure.  The\n    request is considered complete at the receiving node.  enode nbr is\n    the REQUEST ID.\n0FXSSTGE14E  UNSUPPORTED DATASET ORG enode nbr DSN=dddddddd\n    At the current time the only unsupported data set organization is\n    ISAM.  enode/nbr is the request ID, dddddddd is the data set name.\n0FXSSTGE15E  DATASET NAME LENGTH IS ZERO OR NEGATIVE enode nbr DSN=ddddddd\n    Internal error.  FX examines the LISTCAT output to determine the\n    names that will appear in the VTOCs (mostly for VSAM data sets).\n    If this occurs, the format of the LISTCAT output will have changed,\n    and it will be necessary to change FXSSTGE to handle the new message\n    formats.  enode nbr is the REQUEST ID.\n0FXSSTGE16E  DATASET NOT CATALOGED, REQUEST enode nbr ddddddddd CANCELLED\n    FX requires that data sets it will transmit to be cataloged.  enode\n    nbr is the REQUEST ID.\n0FXSSTGE17E  DATASET SIZE EXCEEDS MAX ALLOWED, REQUEST enode nbr CANCELLED\n    The total size determined by the VTOC extent information and the\n    device information in the format-4 records is greater than the\n    MAXSIZE parameter in the OPTIONS, or the value in the start-up\n    MAX SIZE= statement.  enode nbr is the REQUEST ID.\n0FXSSTGE18E  ERROR DEALLOCATING tttttttt DAIR R15=xxxx ERROR=xxxx INFO=xxxx\n    When a \"dump\" or \"restore\" operation completes the sysin, sysprint,\n    \"dump\" (or staging), (and the PDS for PDS member transmissions) are\n    de-allocated.  tttttttt is the type of data set being released,\n    the SVC 99 return code, error code, and info code are printed in hex.\n0FXSSTGE19E  DATA SET IS NOT A PDS enode nbr dddddddd mmmmmmmm\n    You have specified a member name on a transmission request.  The\n    DSORG in the VTOC indicates that the data set is not a PDS.  The\n    request is flagged as being in \"error\" state.  enode nbr is the\n    REQUEST ID, dddddddd is the source data set name, mmmmmmmm is the\n    member name.\n0FXSSTGE20E  ERROR DELETING tttttttt DAIR R15=xxxx ERROR=xxxx INFO=xxxx\n    If you request to transmit a PDS member and the PDS member is not\n    found in the source data set, there is no need to keep the stage\n    data sets.  The delete failed for one of the deletions, tttttttt is\n    the type of data set being deleted (SYSIN, SYSPRINT, or STAGE),\n    the SVC 99 return code, error code, and info codes are printed in\n    hex.\n0FXSSTGE21E  ERROR ALLOCATING tttttttt for READ-BACK, DAIR R15=xxxx ERROR=xxxx\n             INFO=xxxx\n    A previously created stage data set could not be allocated for\n    transmission or for \"restore\".  tttttttt is the type of data set\n    being allocated, the SVC 99 return code, error code, and info codes\n    are printed in hex.\n0\n-           MESSAGES FROM THE STC USER IDENTIFICATION (FXSUID)\n0FXSUID01I   USER uuuuuuuu ON NODE nnnnnnnn HAS AUTH LEVEL xxxxxxxx\n    Whenever a user accesses FX his FX level of authority is checked.\n    The RACF CLASS and ENTITY are defined in the install options.\n    READ level gives the user NORMAL access, UPDATE level gives the\n    user OPERATOR access, and ALTER level gives the user ADMINISTRATOR\n    access.\n0\n-           MESSAGES FROM THE STC VTAM SUB-FUNCTIONs (FXSVSUB)\n0FXSVSUB01I  ACB OPENED\n    The STC has succesfully opened its ACB, and should be ready for\n    users to begin entering or inquiring on requests.\n0FXSVSUB02E  ffffffffff FAILED RC=xxxx\n    A VTAM macro did not complete sucessfully.  The function that was\n    being attempted is ffffffffff, the return code from the macro is\n    xxxx (hex).\n0FXSVSUB03I  ACB CLOSED\n    The STC has succesfully closed its ACB.\n0\n-           MESSAGES FROM THE STC VTAM MODULE  (FXSVTAM)\n0FXSVTAM01W  FX NODE nnnnnnnn NOT READY\n    A request is ready to transmit to node nnnnnnn, but node nnnnnnnn is\n    not in a ready state.  FX will try to contact the node at the\n    interval specified by the INTERVAL parameter in the OPTIONS set\n    during FX install.\n0FXSVTAM02W  FX NODE nnnnnnnn NOT DEFINED TO VTAM\n    A request is ready to transmit to node nnnnnnn, but node nnnnnnnn is\n    not an APPL known to VTAM.  FX will try to contact the node at the\n    interval specified by the INTERVAL parameter in the OPTIONS set\n    during FX install.\n0FXSVTAM03I  FX NODE nnnnnnnn NOW READY\n    A request is ready to transmit to node nnnnnnn, and node nnnnnnnn is\n    in a ready state.  FX will begin transmitting the data set.\n0FXSVTAM04I  CONVERSATION TO NODE nnnnnnnn READY, CID=xxxxxxxx\n    A request is ready to transmit to node nnnnnnn, the node is in ready\n    state, and a conversation has been allocated.\n0\n-           MESSAGES FROM THE TSO INTIALIZATION (FXTINIT)\n0FXTINIT01E ALL USER INTERFACE APPLID'S ARE BUSY, TRY LATER\n    As supplied FX allows up to 20 users to be communicating with the\n    FX STCs at one time.   This limit can be removed by hand-coding the\n    FXACB module.\n0FXTINIT02E FX IS NOT ACTIVE\n    The FX STC you wanted to communicate with is not active.\n0\n-           MESSAGES FROM THE TSO MAINLINE (FXTMAIN)\n0FXTMAIN01E INVALID FUNCTION CODE\n    You selected an option on the primary menu that is not valid.\n0FXTMAIN02I FX STC WAS SHUT DOWN, EXIT HAS BEEN FORCED\n    When an OPERATOR or ADMINISTRATOR uses the SHUTDOWN command, the\n    TSO interface will force exit if the user tries another command\n    (the FX STC will no longer be active, the VTAM session will be\n    broken by VTAM when the STC closes its ACB).\n0FXTMAIN03E THE FX APPLID IS A REQUIRED PARAMETER\n    When the FX TSO interface is invoked, it expects the APPLID of\n    the FX STC it is to communicate to be passed to it.  If the\n    sample FX exec is used, make sure that FX_NODE is set to\n    a valid FX STC APPLID.\n0FXTMAIN04E THE FX APPLID IS MORE THAN 8 CHARACTERS LONG\n    Either the FX_NODE parameter in the FX exec was set to a value\n    more than 8 characters long, or you over-rode the default value\n    when invoking the exec.  VTAM APPLIDs are limited to 8 characters\n    or less.\n0FXTMAIN05E YOU ARE NOT AUTHORIZED TO USE FX\n    When FX was installed, a RACF CLASS and resource (ENTITY) were\n    defined that you must have at least READ level access to before\n    you can use FX.\n0\n-           MESSAGES FROM THE NODE DISPLAY (FXTNODE)\n0FXTNODE01E INVALID COMMAND\n    Self explanitory.\n0FXTNODE02E INVALID HEX VALUE IN STATS ON NODE # nnn\n    Self explanitory.\n0FXTNODE03E INVALID STATUS VALUE ON NODE # nnn\n    See member REQBLOK in FX.MACLIB.  The equates following label\n    REQNDEST are the possible valid values.\n0FXTNODE04E NO PERIOD IN DATE ON NODE # nnn\n    Transmission and restore notify dates are in julian form.  The\n    period must be present.\n0FXTNODE05E INVALID DIGIT IN DATE ON NODE # nnn\n    Self explanitory.\n0FXTNODE06E INVALID DIGIT IN TIME ON NODE # nnn\n    Self explanitory.\n0FXTNODE07E EXIT NOT ALLOWED UNTIL ERROR(S) ARE CORRECTED\n    The node display requires that you correct any errors before exiting.\n0\n-           MESSAGES FROM THE TSO REQUEST ENTRY (FXTREQE)\n0FXTREQE01E DATASET NAME IS REQUIRED\n    FX must know which data set or PDS member you want transmitted.\n0FXTREQE02E REPLACE MUST SPECIFY EITHER YES OR NO\n    Self explanitory.\n0FXTREQE03E ALIAS MUST SPECIFY EITHER YES OR NO\n    Self explanitory.\n0FXTREQE04E NEW MEMBER NAME NOT ALLOWED WHEN SENDING ALIASES\n    FX will not rename a member if you are also sending aliases.  If\n    you want to send the member and also rename it, send it without the\n    aliases, or send the member with the aliases and rename it after the\n    restore completes.\n0FXTREQE05E MEMBER NAME REQUIRED WHEN SENDING ALIASES\n    Self explanitory.\n0FXTREQE06E INVALID COMMAND\n    Self explanitory.\n0FXTREQE07E NO DESTINATIONS HAVE BEEN ENTERED\n    FX must have at least 1 destination.\n0FXTREQE08E NEW MEMBER NAME NOT VALID WITHOUT ORIGINAL MEMBER NAME\n    Self explanitory.\n0\n-           MESSAGES FROM THE TSO REQUEST INQUIRY (FXTREQI)\n0FXTREQI01E INVALID COMMAND\n    You have entered a command on the inquiry status screen that is\n    invalid.\n0FXTREQI02I NO MORE REQUESTS FOUND\n    The master file has no more requests that match the search criteria.\n0FXTREQI03I NO REQUESTS FOUND\n    No records on the master file matched the search criteria.\n0FXTREQI04I REQUEST COMPLETE\n    You have either cancelled or deleted a record from the master file,\n    the action was successful.\n0FXTREQI05E UPDATE NOT ALLOWED\n    You do not have sufficient FX access authority to processes your\n    update request.\n0FXTREQI06E YOU ARE NOT AUTHORIZED TO USE FX\n    When FX was installed, a RACF CLASS and resource (ENTITY) were\n    defined that you must have at least READ level access to before\n    you can use FX.\n0FXTREQI07I REQUEST HAS BEEN DELETED, ACTION ABORTED\n    An ADMINISTRATOR level user had deleted a record from the master\n    file, no further processing for this request is possible.\n0FXTREQI08E REQUEST IS IN USE, CANNOT DELETE AT THIS TIME\n    Another task (file transission, receive, or dump/restore) is using\n    this master file record.  The request cannot be deleted until the\n    process has completed.\n0*** DF/DSS OUTPUT FILE HAS NOT BEEN ALLOCATED ***\n    If a user selects option 'O' on the status inquiry screen, and the\n    the SYSPRINT data set has not been allocated, this message will be\n    returned to the user to notify them.\n0\n-           MESSAGES FROM THE USER INTERFACE SUBROUTINE (FXUSER)\n0FXUSER01E   INVALID COMMAND\n    The 'command' in the parm list is invalid (not an E or an I).\n0FXUSER02E   NUMBER OF NODES IN USER AREA IS ZERO\n    The number of nodes in the node list area must be supplied on\n    every call to FXUSER.  This number tells FXUSER how many nodes\n    you allowed for in your parameter area (not how many nodes are\n    in the area).\n0FXUSER03E   DATA SET NAME IS BLANK\n    On request entry calls the data set name to be transmitted or the\n    data set containing the member to be transmitted is required.\n0FXUSER04E   DATA SET NAME IS INVALID\n    Self expanitory.\n0FXUSER05E   MEMBER NAME IS INVALID\n    Self expanitory.\n0FXUSER06E   NEW MEMBER NAME IS INVALID\n    Self expanitory.\n0FXUSER07E   ALIAS=Y NOT VALID WITH NEW MEMBER NAME\n    FX will not both transmit a member with its aliases and rename the\n    the member.\n0FXUSER08E   NEW DATA SET NAME IS INVALID\n    Self expanitory.\n0FXUSER09E   REPLACE FLAG IS INVALID\n    REPLACE must be 'N', 'Y', or blank.\n0FXUSER10E   ALIAS FLAG IS INVALID\n    ALIAS must be 'N', 'Y', or blank.\n0FXUSER11E   AT LEAST 1 DESTINATION IS REQUIRED\n    FX must have at least one destination on request entries.\n0FXUSER12E   ALIAS NOT VALID WITHOUT A MEMBER NAME\n    Self explanitory.\n0FXUSER13E   NEW MEMBER NAME NOT VALID WITHOUT ORIGINAL MEMBER NAME\n    Self explanitory.\n0FXUSER14E   ALL USER INTERFACE APPLID'S ARE BUSY, TRY LATER\n    As supplied FX allows up to 20 users to be communicating with the\n    FX STCs at one time.  This limit can be removed by hand-coding the\n    FXUAPPL module.\n0FXUSER15E   SETLOGON FAILED, RC=xxxx\n    During the VTAM initialization processing, the user interface issues\n    a SETLOGON.  The return code from SETLOGON was non-zero, and is xxxx\n    in hex.\n0FXUSER16E   FX IS NOT ACTIVE\n    The FX STC you wanted to communicate with is not active.\n0FXUSER17E   CNOS FAILED, RC=xxxxxxxx\n    When the user interface is establishing the link to the STC, it\n    issues a CNOS command (sets session limits).  The CNOS failed.\n    The RPL6RC in the RPL extension is xxxxxxxx in hex.\n0FXUSER18E   ALLOCD FAILED, RC=xxxxxxxx\n    When the user interface is establishing the link to the STC, it\n    issues an ALLOCD command (allocates the conversation).  The ALLOCD\n    failed.  The RPL6RC in the RPL extension is xxxxxxxx in hex.\n0FXUSER19E   COULD NOT DETERMINE YOUR USER ID\n    The first communication from the user interface is an \"identify\"\n    record.  The user interface gets your RACF id from the ACEE.  For\n    some reason the ACEE could not be located.\n0FXUSER20E   YOU ARE NOT AUTHORIZED TO USE FX\n    When FX was installed, a RACF CLASS and resource (ENTITY) were\n    defined that you must have at least READ level access to before\n    you can use FX.\n0FXUSER21I   STATUS INQUIRY COMPLETE\n    A request status inquiry was performed, the status data has been\n    returned in the parameter list.\n0FXUSER22E   REQUEST NOT FOUND\n    A request status inquiry was performed, the requested record was\n    not found on the master file.\n0FXUSER23E   VTAM SEND FAILED, RPL6RC=xxxxxxxx\n    The VTAM SEND to the FX STC failed.  The return code in the RPL\n    extension is xxxxxxxx in hex.\n0FXUSER24E   VTAM RECEIVE FAILED, RPL6RC=xxxxxxxx\n    The VTAM RECEIVE from the FX STC failed.  The return code in the\n    RPL extension is xxxxxxxx in hex.\n0FXUSER25E   VTAM CONVERSATION DEALLOCATE FAILED, RPL6RC=xxxxxxxx\n    When the user interface is terminating the link to the STC, it\n    deallocates the conversation.  The deallocate failed, the return\n    code in the RPL extension is xxxxxxxx in hex.\n./ ADD NAME=OPTIONS  0100-99056-99056-1500-00058-00058-00000-FX-REL1\n\n1           FX (File Xmit) global options\n0These options are parameters to an assembler language macro, and\n therefore coding must conform to assembler language coding rules.\n-INTERVL=   If FX attempts to contact another FX node to transmit\n            a data set and that node is not in a ready state, it will\n            wait a period of time before trying to contact that node\n            again.  INTERVL specifies the time in seconds between\n            attempts.\n-MASTER=    Sets the type of master file used.  This may be either\n            VSAM or BDAM.  If VSAM is used, you must be at a level of\n            MVS that supports DIV and AR mode (MVS/ESA).\n-MAXLINE=   Sets the number of lines per page on all FX SYSPRINT\n            output.\n-MAXNODE=   Sets the maximum number of destinations that a data set\n            may be sent to on one request.  If this number is changed\n            after FX is already installed, see member MAXNODE in FX.DOC.\n-MAXSIZE=   Sets the maximum file size in bytes that FX will accept.\n            Data sets that exceed this size will be rejected.  The\n            larger this size is, the more STAGE volume space will be\n            required.  This parameter may be over-ridden at STC start-up\n            by the MAX SIZE= statement.\n-TRACE=     Controls the internal trace macro (ITRACE).  If TRACE=ON,\n            the internal trace points will be generated.  If TRACE=OFF,\n            the internal trace points will not be generated.  The\n            internal trace points are very helpful in problem\n            determination, but they generate code that uses storage and\n            CPU time.  FXSTC will be about 5000 bytes smaller, FXTSO\n            will be about 1500 bytes smaller, and FXBATCH about 150\n            bytes smaller with TRACE=OFF.\n-TRSIZE=    Specifies the number of entries in the internal trace\n            table.  Each trace entry is 32 bytes long.\n-RACCLASS=  Sets the RACF CLASS used in checking the user's FX authority\n            level.\n-RACENT=    Sets the RACF ENTITY used in checking the user's FX\n            authority level.  Users that have READ level access to the\n            CLASS/ENTITY will be 'normal' users.  Users with UPDATE\n            level access are OPERATOR level users and may snap-shot and\n            shutdown the FX STC.   Users with ALTER level access are\n            ADMINISTRATOR users.  ADMINISTRATOR level users have all\n            normal user and OPERATOR user authority, plus ADMINISTATORs\n            may inquire on the status of another user's requests.\n            ADMINISTRATORs are the only users that may DELETE a request.\n-UACB=      Sets the names in the ACB names table that the user\n            interfaces (both TSO and BATCH) may use to communicate with\n            FX STCs.  Up to 20 names are allowed.\n-For example:\n0        FXOPT MAXLINES=60,                                            +\n               RACCLASS='RCLASS',       QUOTES ARE REQUIRED            +\n               RACENT='RENTITY ',       QUOTES ARE REQUIRED            +\n               UACB=(FXAPPLA,FXAPPLB,FXAPPLC,FXAPPLD,FXAPPLE,          +\n                      FXAPPLF,FXAPPLG,FXAPPLH,FXAPPLI,FXAPPLJ)\n-All FX SYSPRINT data sets will have 60 lines per page.\n The RACF class and entity will be RCLASS/RENTITY to determine the\n user's level of access to FX.   FXAPPLA, FXAPPLB, FXAPPLC, FXAPPLD,\n FXAPPLE, FXAPPLF, FXAPPLG, FXAPPLH, FXAPPLI, and FXAPPLJ will be\n ACB names available for user's to use when communicating with a FX\n STC.\n./ ADD NAME=STCPARM  0100-99056-99056-1500-00123-00123-00000-FX-REL1\n\n1           FX (File Xmit) STC parameters\n0Statements begin in column 1 and no statements may be continued.\n An asterisk (*) in column 1 denotes the statement as a comment.\n Comments may appear at any point in the control statements.\n-APPLID=applname      Defines the APPLID (ACB name really) that the\n                      STC will use to identify itself to VTAM.\n-FXNODE=applname,smfid Defines the APPLID of a partner FX node.  All\n                      nodes that this FX STC will allow data to be\n                      sent to or received from must be defined via\n                      FXNODE statements.  This is an attempt to prevent\n                      a \"hacker\" from requesting that a data set be\n                      transmitted to him or received from him.  Use\n                      as many FXNODE statements as required to define\n                      all the other FX STCs this FX STC will \"talk\"\n                      to.  applname is the VTAM APPLID of the partner\n                      FX node, smfid is the SMFID of the partner node.\n                      The SMF id is used to convert the user ids of\n                      requests coming from this partner (see the XUSER\n                      control statement).\n-DESTINATION=alias,applname  Most people don't or can not remember VTAM\n                      APPLID's.  The DESTINATION statement allows you to\n                      define an \"alias\" for the node.  You can define\n                      multiple \"aliases\" for the same node.  For example\n                      if you have a central site in Dallas, TX, you\n                      could define CENTRAL, DALLAS, BIGD, etc as\n                      aliases for the FX STC at that site.   The\n                      applname must be defined via a FXNODE statement\n                      before referring to it on a DESTINATION statement.\n-MAX SIZE=nnnnnnnnn   Applies to full data set transmisstions.\n                      Specifies the maximum file size in bytes that FX\n                      will accept.  The size is determined by multiplying\n                      the track size (determined from the format-4 in\n                      VTOC) times the number of tracks on each device\n                      the data set resides on.  For VSAM data sets all\n                      components (data and index, etc) count toward\n                      this total, alternate indexes will not be\n                      transmitted and would not count toward the size.\n                      Maximum value for MAX SIZE is 2GB.  Each data set\n                      that FX has 'in the works' requires 3 control\n                      data sets, one for a \"dump\" or \"unload\", one for\n                      SYSIN statements, and one for the SYSPRINT.  The\n                      The SYSIN and SYSPRINT data sets are always 1\n                      1 track.  These data sets are scratched when the\n                      request is DELETEd (requires ADMINISTRATOR level\n                      FX authority), or PURGED via the offline utility\n                      FXPURGE.   If you allow large data sets to be\n                      transmitted, the space required on the STAGE\n                      volumes (see the STAGE control statement will\n                      will be large accordingly.  Also the larger the\n                      data set being transmitted, the longer it will\n                      take to transmit through your network, and the\n                      more load it puts on your NCPs, transmission lines,\n                      etc.\n-MEM SIZE=nnnnnnnnn   Applies to PDS member transmission requests.\n                      Since there is no size information in PDS\n                      directories, the size could be determined by\n                      reading the member and calculating its size from\n                      the beginning and ending TTR.  This would mean\n                      reading PDS members being transmitted an extra\n                      time just to determine how large the stage data\n                      set needs to be.  Rather than waste the time and\n                      I/O's, the MEM SIZE is a \"one-size-fits-all\" PDS\n                      member stage data set size.  If a PDS member is\n                      too large, FX will not be able to transmit it.\n                      Stage data sets are allocated with the RLSE\n                      parameter so unused space is released.\n-RESTORE=dataset.prefix,volser  For full data set transmissions, once\n                      the data has been received by a destination FX\n                      it must be restored.   The volume(s) the\n                      data set is eligible to be restored on is given\n                      on RESTORE statements.  If a given data set may\n                      be restored to one of several volumes, use multiple\n                      RESTORE statements with the same prefix and each\n                      volume on a separate statement.  The search is a\n                      'first hit' type.  The prefix does not stop on a\n                      delimiter.  If you gave the statement:\n0                         RESTORE  SYS1.X,VOL000\n0                     data sets SYS1.XRAY, SYS1.X.Y.Z would match the\n                      restore statement criteria, and FX would attempt\n                      to restore it to volume VOL000.\n                      To prevent having to have a RESTORE statement for\n                      every possible data set name prefix, FX allows\n                      you to define RESTORE statements with the prefix\n                      \"DEFAULT\" which will match any data set prefix.\n                      So -\n0                         RESTORE  DEFAULT,VOLABC\n0                     would define volume VOLABC as the default.\n                      Multiple volumes may be given to DEFAULT the same\n                      as for a data set name prefix.  Since the search\n                      stops on the first match, put the most specific\n                      statements (usually the prefix is longer) first\n                      followed by the more general, and DEFAULT last.\n                      If FX cannot find a RESTORE statement to match the\n                      the data set being restored and no DEFAULT is given,\n                      the status is updated with as being in an error\n                      condition and processing for the request stops.\n-STAGE=vvvvvv         Defines a volume that FX may use to allocate\n                      staging data sets on.  FX uses staging data sets\n                      for \"dump\" and \"unload\", SYSIN, and SYSPRINT.\n-STAGEPRFX=prefix     Defines the prefix of the staging data sets.\n                      The data sets will have a name of the form:\n                      prefix.Dyyddd.Thhmmss.Dnnnnnnn.  The prefix may\n                      be up to 20 characters long.\n-SNAPCLASS=c          FX can \"snap shot\" many of its internal control\n                      blocks and internal trace to a sysout data set\n                      for diagnosing some problems without having to\n                      shut-down the STC.  The SNAPCLASS statement\n                      specifies the sysout class used for these snap-\n                      shots.\n-SYSNAME=name         FX users may enter and inquire on requests at\n                      multiple FX nodes.   This parameter provides a\n                      \"name\" that appears on the user's panels and on\n                      the SNAPSHOT sysout datasets to identify which\n                      FX STC the user is communicating with.\nXUSER=smfid,userid1,userid2   A user may have different id's depending\n                      on which system they have logged on to. this\n                      statement allows FX to translate the id's of\n                      external users to their local id.  smfid is the\n                      SMF id of the partner node (must have a matching\n                      entry on an FXNODE statement), userid1 is the\n                      user's id on the partner node, and userid2 is the\n                      user's id on the local node.\n./ ADD NAME=USER     0100-99056-99056-1500-00202-00202-00000-FX-REL1\n\n1          F(ile) X(mit) Users Guide\n FX will transmit sequential, direct access (DA), partitioned (PDS),\n and VSAM data sets.  A data set or PDS member can be sent to multiple\n destinations with the same request.  FX verifies that you have at least\n READ level access to the data on the sending end and ALTER level access\n on the receiving end(s).  When a request is entered, FX \"snapshots\" the\n data.  FX records the request in a data set of its own.  FX will\n transmit the data to each destination as soon as it they are available\n on the network.  By recording the request in a data set, FX can\n \"remember\" the request even if it or the entire system is shutdown or\n abends.  The \"snapshot\" of the data allows FX to send the same data\n to all destinations even if the data set is updated or deleted before\n all destinations are available to receive the data.\n0FX has 4 panels, the main menu, the request entry, request query,\n and node list.  At FX invocation, you will be presented with the\n main menu.  To enter a request, select option 1, to query on the status\n of a request that you entered earlier, select option 2.  To exit from\n FX, select option X or press PF3 or PF4.\n-          ENTERING A REQUEST\n To enter a request FX requires the data set name and at least 1\n destination.\n0For a full data set transmission:\n   Give the data set name, leave the member name blank.  If you want\n   the data set to have the same name at the destination(s), leave the\n   \"New name\" blank.  The member name and new member name must be blank.\n   If the \"replace\" option is left blank, or set to \"NO\":\n      If a new name was given, FX will try to create a data set with\n         the new name.  If a new name was not given, FX will try to\n         create a data set with the original name.\n      In either case, if a data set with the same name already exists,\n         FX will consider the result as a failure (error) condition and\n         the existing data set will not be altered.\n   If the \"replace\" option is set to \"YES\":\n      If a new name was given, FX will create a data set with this\n      name if no data set already exists, or will replace an existing\n      data set.  If no new name was given, FX will create a data set\n      with the original data set name if no data set already exists at\n      the destination(s) or will replace an existing data set.\n   The \"Alias\" option must be allowed to default or set to \"NO\".\n0For a PDS member transmission:\n   The data set name and member name must be given.  If the member\n   name is left blank, FX assumes you want to transmit the entire\n   data set.  FX will not transmit a PDS member to a sequential file,\n   the receiving data set at the destination(s) must be an existing PDS.\n   If the \"new name\" is left blank, FX will use the original data set\n   name as the name of the PDS to receive the member.  If the new member\n   name is left blank, FX will use the original member name.  If\n   \"replace\" is left blank, or set to \"NO\", the member will not be\n   replaced if it already exists.  NOTE: FX does NOT consider it an\n   error if a member already exists and you specify REPLACE=NO.  FX will\n   transmit a member and all aliases by specifying ALIAS=YES.  If\n   ALIAS=YES is used, REPLACE must be allowed to default or set to NO.\n   If the receiving data set does not exist, FX will NOT create it, it\n   is considered an error.\n0FX allows you to enter a request at one location, and have another\n location transmit the data.  For example if you are located at\n Bartlesville, and you want a data set on the Woking system transmitted\n to Bartlesville, you could invoke FX on the Bartlesville system and\n enter WOKING as the \"transmit node\" and Bartlesville as a (or the only)\n destination.  FX on the Bartlesville system will transfer the request\n to the Woking system.  FX on the Woking system will verify your access\n to the data set, and if you have the access, it will send the data to\n Bartlesville.\n0Once you have entered all the required data on the request entry panel,\n press ENTER or tab to the COMMAND line and enter an \"L\" to bring up\n the destination (or node list) display (the node list display is\n described later in this guide).  After returning to this panel from\n the node list display, enter an \"S\" on the command line and press\n ENTER.  FX will edit check the data you have entered and verify that\n you have READ access to the data set you want to have transmitted.\n If any errors are detected, FX will display messages at the bottom\n of the panel describing the problem.  If no errors were detected, FX\n will assign a \"request ID\" to the request and will display a message\n at the bottom of the panel with this ID.  All FX messages pertaining\n to a request will have the same ID at both the sending and all\n receiving ends.\n0When you select the \"enter a request' option (option 1) you will\n receive the following panel:\n0   +-----------------------------------------------------------------------+\n   1|              FX Transmission request from system:  xxxxxxxxxxxxxxx    |\n   2|                                                           User - xxxxx|\n   3|Name of data set to be transmitted                         Time - xxxxx|\n   4|Dataset name:                                                          |\n   5|Member name :               (blank if not PDS or for entire data set)  |\n   6|                                                                       |\n   7|Name at destination(s)      (leave blank to use original name)         |\n   8|New name:                                                              |\n   9|New member name:                                                       |\n  10|                                                                       |\n  11|Replace?       :            (Y or N, default is NO)                    |\n  12|                                                                       |\n  13|Aliases?       :            (Y or N, default is NO)                    |\n  14|                                                                       |\n  15|Transmit node  :            (Leave blank if from this node)            |\n  16|                                                                       |\n  17|        COMMAND:            (L for node list or S to submit request)   |\n    +-----------------------------------------------------------------------+\n0 Line  1. The \"name\" of the system that will record your transmission\n           request.\n  Line  2. Your user id.\n  Line  3. Time.\n  Line  4. Name of data set to be transmitted or the name of the data set\n           that contains the member to be transmitted.  Enter the fully\n           qualified data set name without quotes.  FX will verify that\n           you have at least READ level access to the data set before\n           before accepting the request.   This is a required field.\n  Line  5. Name of member to be transmitted.  If this is left blank, FX\n           assumes you want to transmit the entire data set.\n  Line  8. New data set name.  If this is left blank, the original data\n           set name (the name on line 4) will be used.\n  Line  9. New member name.  If this is left blank, the original member\n           name (the name on line 5) will be used.\n  Line 11. If set to \"NO\" or allowed to default, FX will not replace the\n           data set or member if it already exists.  If set to \"YES\",\n           the data set or member will be replaced if they exist.\n  Line 13. If set to \"NO\" or allowed to default, FX will not transmit\n           the aliases associated with a PDS member.  This is only valid\n           if a member name is given, and if replace is \"NO\".\n  Line 17. Enter \"L\" to view the destinations (node list), enter \"S\" when\n           all your data has been entered to submit the request to FX.\n-          QUERYING A REQUEST\n0 When you select the \"query a request\" option (option 2) you will\n  receive the following panel:\n   +---------------------------------------------------------------------+\n  1|          FX Transmission request status for user  xxxxxxx           |\n  2|          This system is:  xxxxxxxxxxxx                              |\n  3|                                                                     |\n  4|Date/time entered    : yyyy.ddd  hh.mm.ss                            |\n  5|Date/time completed  : yyyy.ddd  hh.mm.ss                            |\n  6|Over-all status      : xxxxxxxxxxxxxxxxxxxxxxxxx                     |\n  7|Request ID           : ssssssss  nnnnnnn    jjjjjjjjj                |\n  8|Transmitting node    : xxxxxxxx                                      |\n  9|Original DSN         : xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  |\n 10|Original member name : xxxxxxxx                                      |\n 11|DSN at destination   : xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  |\n 12|New member name      : xxxxxxxx                                      |\n 13|Replace?             : xxx                                           |\n 14|Aliases?             : xxx                                           |\n 15|                                                                     |\n 16|                                                                     |\n 17|       ENTER COMMAND _    (C to cancel, D to delete, O for DF/DSS or |\n 18|                           output, N for next, L for destination list|\n 19|                           or blank for refresh)                     |\n   +---------------------------------------------------------------------+\n0 The user that entered the request, and the system you are using are\n  displayed in the heading.\n  Line  4. Date and time the request was entered.\n  Line  5. Date and time the restore response was received from the last\n           (or only) destination.\n  Line  6. Over-all status.\n  Line  7. Request ID.  The request ID is assigned by FX when the request\n           is entered.  ssssssss is the network APPLID of the FX node\n           where the request was entered, nnnnnnn is a sequential number,\n           jjjjjjjj is the job name (when the request is entered via a\n           batch job).\n  Line  8. Transmitting FX node name.\n  Line  9. Original data set name.\n  Line 10. Original member name (blank if full data set transmission).\n  Line 11. Data set name at the destination(s).  If blank the original\n           data set name is used.\n  Line 12. New member name.  If blank the original member name is used.\n  Line 13. Replace flag (yes or no).\n  Line 14. Aliases flag (yes or no).\n  Line 17. Commands.  Enter a \"C\" to cancel the request.  Cancelling a\n           request does not cause FX to remove the request from its\n           master file.  Cancelling the request stops FX from doing any\n           further processing of a request, any activity already under\n           way is allowed to complete.  Enter a \"O\" to view the output\n           of the utility FX used to dump or restore the data.  If a\n           dump or restore error occurs, the messages from the utility\n           should give the reason.  Enter an \"L\" to view the destination\n           or node list (the node list display is described later in this\n           guide).\n-          DESTINATION (NODE LIST) DISPLAY\n The node list display panel looks like:\n +----------------------------------------------------------------------------+\n |   Nodename *-------- Status ----------* *---Transmit----* *Restore notify-*|\n | 1 nnnnnnnn xxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyy.ddd hhmmssth yyyy.ddd hhmmssth|\n | 2 nnnnnnnn xxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyy.ddd hhmmssth yyyy.ddd hhmmssth|\n | 3 nnnnnnnn xxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyy.ddd hhmmssth yyyy.ddd hhmmssth|\n | . nnnnnnnn xxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyy.ddd hhmmssth yyyy.ddd hhmmssth|\n | . nnnnnnnn xxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyy.ddd hhmmssth yyyy.ddd hhmmssth|\n | . nnnnnnnn xxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyy.ddd hhmmssth yyyy.ddd hhmmssth|\n |nn nnnnnnnn xxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyy.ddd hhmmssth yyyy.ddd hhmmssth|\n +----------------------------------------------------------------------------+\n0FX allows for multiple destinations per request.  The maximum number\n allowed for a request is an install option.  If more nodes are in the\n list (on a request entry, a blank line will be displayed for the maximum\n number of nodes), the scroll PF keys will move the display up or down.\n When entering a request the node name field is unprotected so you can\n enter your destinations.  The same node name may not be given more than\n once.  All destinations must be pre-defined to FX in its start-up\n parameters.  Aliases can be defined for destinations so you don't have\n to know or remember VTAM LU names, ask your FX system administrator for\n a list of valid names.  When querying a request, all fields are\n protected (you cannot over-type them).  The number of lines displayed\n will be limited to the number of nodes entered when the request was\n entered.  The status to each node will be displayed.  Each destination\n will respond with the success or failure to restore the data.  When\n the last destination has responded (successful or not), FX considers\n the request complete (the over-all status will be set to complete).\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FXJCL": {"ttr": 6149, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x05o\\x01\\x00\\x04_\\t\\x10\\x03\\xcd\\x03\\xcd\\x00\\x00\\xc6\\xe7`\\xd9\\xc5\\xd3\\xf1@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-02-25T00:00:00", "modifydate": "2000-02-14T09:10:00", "lines": 973, "newlines": 973, "modlines": 0, "user": "FX-REL1"}, "text": "./ ADD NAME=ALLOBDAM 0100-99056-99056-1500-00020-00020-00000-FX-REL1\n\n//........ JOB ..........                                               Z\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//* Before running this job                                           *\n//*     1) Add a valid job card                                       *\n//*     2) Change the data set name on the MASTER DD to the           *\n//*        name you want to use for your FX master file.              *\n//*     3) Change the VOLSER                                          *\n//*     4) Examine the assembly listing of FXFORMAT.  Convert the     *\n//*        length assigned to REQBLOKL to decimal and change the      *\n//*        the block size in the SPACE parameter to this value.       *\n//*     5) Change the SPACE parameters                                *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//ALLOMSTR EXEC PGM=IEFBR14\n//MASTER   DD DSN=your.master.file.name,DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSALLDA,VOL=SER=vvvvvv,\n//            SPACE=(lll,(nnn))\n//\n./ ADD NAME=ALLOC    0100-99056-99056-1500-00074-00074-00000-FX-REL1\n\n//........ JOB 'ALLOCATE FX DATA SETS'                                  Z\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*  Before running this job:                                         *\n//*                                                                   *\n//*    1.  Add a valid jobcard                                        *\n//*    2.  Change the prefix on the CLIST, DOC, ISPPLIB, MACLIB,      *\n//*        OBJECT, SOURCE, and LOADLIB DD's.                          *\n//*    3.  Change the unit and volsers to suitable units at your      *\n//*        installation on the CLIST, DOC, ISPPLIB, MACLIB, OBJECT,   *\n//*        SOURCE, and LOADLIB DD's.                                  *\n//*    4.  Change the UNIT parameter to a suitable tape unit on       *\n//*        THE FILE2 DD.                                              *\n//*    5.  The SPACE values are adequate for 3380 devices.            *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//ALLOC    EXEC PGM=IEBCOPY,REGION=4096K\n//SYSPRINT DD SYSOUT=*\n//CLIST    DD  DSN=prefix.FX.CLIST,DISP=(NEW,CATLG,DELETE),\n//             UNIT=uuuu,VOL=SER=vvvvvv,\n//             SPACE=(TRK,(5,5,5)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//DOC      DD  DSN=prefix.FX.DOC,DISP=(NEW,CATLG,DELETE),\n//             UNIT=uuuu,VOL=SER=vvvvvv,\n//             SPACE=(TRK,(5,5,5)),\n//             DCB=(RECFM=FBA,LRECL=80,BLKSIZE=3120)\n//ISPPLIB  DD  DSN=prefix.FX.ISPPLIB,DISP=(NEW,CATLG,DELETE),\n//             UNIT=uuuu,VOL=SER=vvvvvv,\n//             SPACE=(TRK,(2,2,2)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//MACLIB   DD  DSN=prefix.FX.MACLIB,DISP=(NEW,CATLG,DELETE),\n//             UNIT=uuuu,VOL=SER=vvvvvv,\n//             SPACE=(TRK,(15,5,10)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//OBJECT   DD  DSN=prefix.FX.OBJECT,DISP=(NEW,CATLG,DELETE),\n//             UNIT=uuuu,VOL=SER=vvvvvv,\n//             SPACE=(TRK,(10,5,10)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SOURCE   DD  DSN=prefix.FX.SOURCE,DISP=(NEW,CATLG,DELETE),\n//             UNIT=uuuu,VOL=SER=vvvvvv,\n//             SPACE=(TRK,(45,5,15)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//LOADLIB  DD  DSN=prefix.FX.LOADLIB,DISP=(NEW,CATLG,DELETE),\n//             UNIT=uuuu,VOL=SER=vvvvvv,\n//             SPACE=(TRK,(15,5,10)),\n//             DCB=(RECFM=U,BLKSIZE=6144)\n//FILE2    DD DSN=FX.CLIST,DISP=(NEW,KEEP),\n//            UNIT=tape,VOL=(,RETAIN,SER=FX0000),\n//            LABEL=(02,SL,EXPDT=98000)\n//FILE3    DD DSN=FX.DOC,DISP=(NEW,KEEP),\n//            UNIT=AFF=FILE2,VOL=(,RETAIN,SER=FX0000),\n//            LABEL=(03,SL,EXPDT=98000)\n//FILE4    DD DSN=FX.ISPPLIB,DISP=(NEW,KEEP),\n//            UNIT=AFF=FILE2,VOL=(,RETAIN,SER=FX0000),\n//            LABEL=(04,SL,EXPDT=98000)\n//FILE5    DD DSN=FX.MACLIB,DISP=(NEW,KEEP),\n//            UNIT=AFF=FILE2,VOL=(,RETAIN,SER=FX0000),\n//            LABEL=(05,SL,EXPDT=98000)\n//FILE6    DD DSN=FX.OBJECT,DISP=(NEW,KEEP),\n//            UNIT=AFF=FILE2,VOL=(,RETAIN,SER=FX0000),\n//            LABEL=(06,SL,EXPDT=98000)\n//FILE7    DD DSN=FX.SOURCE,DISP=(NEW,KEEP),\n//            UNIT=AFF=FILE2,VOL=(,RETAIN,SER=FX0000),\n//            LABEL=(07,SL,EXPDT=98000)\n//SYSIN    DD *\n  COPY INDD=FILE2,OUTDD=CLIST\n  COPY INDD=FILE3,OUTDD=DOC\n  COPY INDD=FILE4,OUTDD=ISPPLIB\n  COPY INDD=FILE5,OUTDD=MACLIB\n  COPY INDD=FILE6,OUTDD=OBJECT\n  COPY INDD=FILE7,OUTDD=SOURCE\n/*\n//\n./ ADD NAME=ALLOVSAM 0100-99056-99056-1500-00028-00028-00000-FX-REL1\n\n//........ JOB ..........                                               Z\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//* Before running this job                                           *\n//*     1) Add a valid job card                                       *\n//*     2) Change the cluster name on the delete and define           *\n//*        commands to the name you want to use for your FX           *\n//*        master file.                                               *\n//*     3) Change the VOLUMES parameter.                              *\n//*     4) Change the RECORDS parameter.                              *\n//*                                                                   *\n//* With MAXNODE set to 15, each request is 679 bytes long.           *\n//* This comes out to about 840 requests per 3380 cylinder.           *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//DEFMSTR  EXEC PGM=IDCAMS\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD *\n\n DELETE your.master.file.name\n\n DEFINE CLUSTER ( NAME (your.master.file.name) -\n                  VOLUMES (vvvvvv)       -\n                  RECORDS (nnn 0)        -\n                  LINEAR)\n/*\n//\n./ ADD NAME=ASSEMBLE 0100-99056-99056-1500-00089-00089-00000-FX-REL1\n\n//........ JOB .............                                            Z\n//* ------------------------------------------------------------------ *\n//*                                                                    *\n//*  Before running this job                                           *\n//*     1.  Add a valid job card                                       *\n//*     2.  Change the prefix on the FX.MACLIB, FX.OBJECT, and         *\n//*         FX.SOURCE DD's in the ASMFX PROC.                          *\n//*                                                                    *\n//* ------------------------------------------------------------------ *\n//ASMFX    PROC NAME=,\n//             AP=,\n//             LIST='SYSOUT=*,FCB=2'\n//ASM      EXEC PGM=IEV90,COND=(4,LT),\n//             REGION=4096K,\n//             PARM='LINECOUNT(55),DECK,NOOBJECT,XREF(SHORT),&AP'\n//SYSPRINT DD   &LIST\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLIB   DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.MODGEN,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//         DD   DSN=prefix.FX.MACLIB,DISP=SHR\n//         DD   DSN=prefix.FX.SOURCE,DISP=SHR\n//SYSPUNCH DD   DSN=prefix.FX.OBJECT(&NAME),DISP=SHR\n//SYSIN    DD   DSN=prefix.FX.SOURCE(&NAME),DISP=SHR\n// PEND\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           ASSEMBLE ALL MODULES                                    *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//FXACB    EXEC ASMFX,NAME=FXACB,AP=RENT       ACB NAMES\n//FXBCOMM  EXEC ASMFX,NAME=FXBCOMM             BATCH COMMON DATA\n//FXBMAIN  EXEC ASMFX,NAME=FXBMAIN,AP=RENT     BATCH MAINLINE\n//FXBPARM  EXEC ASMFX,NAME=FXBPARM,AP=RENT     BATCH PARM READER\n//FXBPRT   EXEC ASMFX,NAME=FXBPRT,AP=RENT      BATCH PRINTING\n//FXBREQE  EXEC ASMFX,NAME=FXBREQE,AP=RENT     BATCH REQUEST ENTRY\n//FXBREQI  EXEC ASMFX,NAME=FXBREQI,AP=RENT     BATCH REQUEST INQUIRY\n//FXDSNVER EXEC ASMFX,NAME=FXDSNVER,AP=RENT    DSN VERIFICATION\n//FXFORMAT EXEC ASMFX,NAME=FXFORMAT            MASTER FILE FORMATTER\n//FXLERAD  EXEC ASMFX,NAME=FXLERAD,AP=RENT     LERAD EXIT\n//FXMCOMM  EXEC ASMFX,NAME=FXMCOMM             FILE MAINTENANCE COMMON\n//FXMEMVER EXEC ASMFX,NAME=FXMEMVER,AP=RENT    MEMBER NAME VERIFICATION\n//FXMMAIN  EXEC ASMFX,NAME=FXMMAIN,AP=RENT     FILE MAINTENANCE MAIN\n//FXNTBLE  EXEC ASMFX,NAME=FXNTBLE             NODE DISPLAY CONTROL\n//FXPCOMM  EXEC ASMFX,NAME=FXPCOMM             PURGE UTILITY COMMON\n//FXPURGE  EXEC ASMFX,NAME=FXPURGE             OFFLINE REQUEST PURGE\n//FXSATTN  EXEC ASMFX,NAME=FXSATTN,AP=RENT     STC VTAM ATTN EXIT\n//FXSCOMM  EXEC ASMFX,NAME=FXSCOMM             STC COMMON\n//FXSCONS  EXEC ASMFX,NAME=FXSCONS,AP=RENT     STC CONS COMMUNICATION\n//FXSCONV  EXEC ASMFX,NAME=FXSCONV,AP=RENT     STC CONVBLOK ADD/DELETE\n//FXSCOPY  EXEC ASMFX,NAME=FXSCOPY,AP=RENT     STC IEBCOPY SUBTASK\n//FXSDAIR  EXEC ASMFX,NAME=FXSDAIR,AP=RENT     STC DYNAM ALLOC/DE-ALLOC\n//FXSDSS   EXEC ASMFX,NAME=FXSDSS,AP=RENT      STC DF/DSS SUBTASK\n//FXSLOSS  EXEC ASMFX,NAME=FXSLOSS,AP=RENT     STC VTAM LOSS CLEAN-UP\n//FXSMAIN  EXEC ASMFX,NAME=FXSMAIN,AP=RENT     STC MAINLINE\n//FXSMINIT EXEC ASMFX,NAME=FXSMINIT,AP=RENT    STC START-UP CLEAN-UP\n//FXSMSTR  EXEC ASMFX,NAME=FXSMSTR,AP=RENT     STC MASTER FILE I/O\n//FXSPARM  EXEC ASMFX,NAME=FXSPARM,AP=RENT     STC PARM READER\n//FXSPRTQ  EXEC ASMFX,NAME=FXSPRTQ,AP=RENT     STC PRINT QUEUEING\n//FXSPRTS  EXEC ASMFX,NAME=FXSPRTS,AP=RENT     STC PRINT SUBTASK\n//FXSRECV  EXEC ASMFX,NAME=FXSRECV,AP=RENT     STC FILE RECEIVE\n//FXSREQE  EXEC ASMFX,NAME=FXSREQE,AP=RENT     STC XMIT REQUEST ENTRY\n//FXSREQI  EXEC ASMFX,NAME=FXSREQI,AP=RENT     STC XMIT REQUEST INQUIRY\n//FXSRPLX  EXEC ASMFX,NAME=FXSRPLX,AP=RENT     STC RPL EXIT\n//FXSSEND  EXEC ASMFX,NAME=FXSSEND,AP=RENT     STC FILE SEND\n//FXSSESS  EXEC ASMFX,NAME=FXSSESS,AP=RENT     STC SESSBLOK ADD/DELETE\n//FXSSHUT  EXEC ASMFX,NAME=FXSSHUT,AP=RENT     STC SHUTDOWN\n//FXSSNAP  EXEC ASMFX,NAME=FXSSNAP,AP=RENT     STC SNAPSHOT\n//FXSSTGE  EXEC ASMFX,NAME=FXSSTGE,AP=RENT     STC STAGE/DE-STAGE\n//FXSTIMER EXEC ASMFX,NAME=FXSTIMER,AP=RENT    STC TIMER EXIT\n//FXSUID   EXEC ASMFX,NAME=FXSUID,AP=RENT      STC USER IDENTIFICATION\n//FXSVSUB  EXEC ASMFX,NAME=FXSVSUB,AP=RENT     STC VTAM SUB-FUNCTIONS\n//FXSVTAM  EXEC ASMFX,NAME=FXSVTAM,AP=RENT     STC VTAM COMMUNICATION\n//FXSVTOC  EXEC ASMFX,NAME=FXSVTOC,AP=RENT     STC VTOC FUNCTIONS\n//FXSXTR   EXEC ASMFX,NAME=FXSXTR,AP=RENT      STC EXTERNAL TRACE\n//FXTCOMM  EXEC ASMFX,NAME=FXTCOMM             TSO COMMON DATA\n//FXTINIT  EXEC ASMFX,NAME=FXTINIT,AP=RENT     TSO INITIALIZATION\n//FXTMAIN  EXEC ASMFX,NAME=FXTMAIN,AP=RENT     TSO MAINLINE\n//FXTNODE  EXEC ASMFX,NAME=FXTNODE,AP=RENT     NODE DISPLAY\n//FXTREQE  EXEC ASMFX,NAME=FXTREQE,AP=RENT     TSO REQUEST ENTRY\n//FXTREQI  EXEC ASMFX,NAME=FXTREQI,AP=RENT     TSO REQUEST INQUIRY\n//FXTSHUT  EXEC ASMFX,NAME=FXTSHUT,AP=RENT     TSO FX STC SHUTDOWN\n//FXTSNAP  EXEC ASMFX,NAME=FXTSNAP,AP=RENT     TSO FX STC SNAPSHOT\n//FXTTERM  EXEC ASMFX,NAME=FXTTERM,AP=RENT     TSO TERMINATION\n//FXTVAR   EXEC ASMFX,NAME=FXTVAR,AP=RENT      TSO SPF VARIABLE DEF/DEL\n//FXUSER   EXEC ASMFX,NAME=FXUSER,AP=RENT      USER INTERFACE SUBRTN\n//FX24     EXEC ASMFX,NAME=FX24,AP=RENT        24-BIT MODULE\n//\n./ ADD NAME=BATCH    0100-99056-99056-1500-00018-00018-00000-FX-REL1\n\n//.......  JOB .......                                                  Z\n//* ---------------------------------------------------------------- *\n//*                                                                  *\n//*  Before running this job:                                        *\n//*    1) Add a valid JOB card                                       *\n//*    2) Change the prefix on the STEPLIB DD.                       *\n//*                                                                  *\n//* ---------------------------------------------------------------- *\n//FXBATCH  EXEC PGM=FXBATCH,REGION=7500K\n//STEPLIB  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//FXPRT    DD  SYSOUT=*\n//FXIN     DD  *\n  .\n  .   control statements\n  .\n/*\n//\n./ ADD NAME=FMTMSTR  0100-99056-99056-1500-00022-00022-00000-FX-REL1\n\n//.......  JOB 'FORMAT FX MASTER FILE',......\n//FXFORMAT EXEC PGM=FXFORMAT\n//STEPLIB  DD   DSN=..............,DISP=SHR\n//MASTER   DD   DSN=..............,DISP=SHR\n//FXPRINT  DD   SYSOUT=*\n//ABNLIGNR DD   DUMMY\n//SYSUDUMP DD   SYSOUT=*\n//FXIN     DD   *\n* -------------------------------------------------------------------*\n*                                                                    *\n*  If the master file is VSAM:                                       *\n*    Number of records is one less than the records parameter used   *\n*    when defining the master file cluster, 7 digits maximum.        *\n*                                                                    *\n*  If the master fileis BDAM:                                        *\n*    Number of records is the number of blocks used in the SPACE     *\n*    parameter when the master file was allocated.                   *\n*                                                                    *\n* -------------------------------------------------------------------*\nRECORDS=999\n//\n./ ADD NAME=FORMAT   0100-99056-99056-1500-00029-00029-00000-FX-REL1\n\n//.......  JOB ......                                                   Z\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*  Before running this job                                          *\n//*    1) Add a valid JOB card.                                       *\n//*    2) Change the prefix on the STEPLIB DD.                        *\n//*    3) Change the data set name on the MASTER DD to the name       *\n//*       used for the cluster in the DEFMSTR job.                    *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//FXFORMAT EXEC PGM=FXFORMAT\n//STEPLIB  DD   DSN=prefix.FX.LOADLIB,DISP=SHR\n//MASTER   DD   DSN=your.master.file.name,DISP=SHR\n//FXPRINT  DD   SYSOUT=*\n//FXIN     DD   *\n* -------------------------------------------------------------------*\n*                                                                    *\n*  If the master file is VSAM:                                       *\n*    Number of records is one less than the records parameter used   *\n*    when defining the master file cluster, 7 digits maximum.        *\n*                                                                    *\n*  If the master fileis BDAM:                                        *\n*    Number of records is the number of blocks used in the SPACE     *\n*    parameter when the master file was allocated.                   *\n*                                                                    *\n* -------------------------------------------------------------------*\nRECORDS=nnn\n//\n./ ADD NAME=FXBATCH  0100-99056-99056-1500-00018-00018-00000-FX-REL1\n\n//FXBATCH  JOB ..................\n//* ---------------------------------------------------------------- *\n//*                                                                  *\n//*  Before running this job:                                        *\n//*    1) Add a valid JOB card                                       *\n//*    2) Change the prefix on the STEPLIB DD.                       *\n//*                                                                  *\n//* ---------------------------------------------------------------- *\n//FXBATCH  EXEC PGM=FXBATCH,REGION=7500K\n//STEPLIB  DD  DSN=............,DISP=SHR\n//FXPRT    DD  SYSOUT=*\n//FXIN     DD  *\nFX=stc appl id\nDSN=xxxxxxxx\nDEST=xxxx\n/*\n//\n./ ADD NAME=FXPURGE  0100-99056-99056-1500-00071-00071-00000-FX-REL1\n\n//FXPURGE  JOB ...........................\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//* Before running this job:                                          *\n//*   1) Add a valid JOB card.                                        *\n//*   2) Change the prefix on the STEPLIB DD.                         *\n//*   3) Change the data set name on the MASTER DD to your master     *\n//*      file name.                                                   *\n//*   4) Change the data set name on the OLDSEQ DD or change the      *\n//*      the DD to a \"DD DUMMY\".  If you use DUMMY, you will need     *\n//*      to use the DCB=BLKSIZE= parameter.  Since the output record  *\n//*      size is dependant on the MAXNODE value you used, the BLKSIZE *\n//*      will have to be determined by examining the assembly output  *\n//*      for FXPURGE.  Label REQBLOKL is an equate that is set to the *\n//*      record size, convert this to decimal and use it for the      *\n//*      BLKSIZE.                                                     *\n//*   5) Change the data set name on the NEWSEQ DD.                   *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//FXPURGE  EXEC PGM=FXPURGE\n//STEPLIB  DD   DSN=...............,DISP=SHR\n//ABNLIGNR DD   DUMMY\n//SYSUDUMP DD   SYSOUT=*\n//MASTER   DD   DSN=...............,DISP=SHR\n//FXPRINT  DD   SYSOUT=*\n//OLDSEQ   DD   DUMMY,DCB=BLKSIZE=799\n//NEWSEQ   DD   DSN=...............,DISP=SHR\n//FXIN     DD   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n*   Control statements:                                               *\n*                                                                     *\n*      COPY   Entire master file is copied to NEWSEQ, the master      *\n*             file is not altered.  Essentially this is a way to      *\n*             turn the master file into a sequential file.            *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*      RETPDC=nnn   Retention period in days for requests that        *\n*             are in a complete status.                               *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*      RETPDU=nnn   Retention period in days for requests that        *\n*             have not been completed.  In order for a request to     *\n*             be in completed status, all destinations have to        *\n*             respond with the status of the restore (success or      *\n*             failure).  If for some reason a node does not or        *\n*             cannot respond, the RETPDU allows the requests to       *\n*             be purged.  RETPDU should probably be set to some       *\n*             relatively long period.                                 *\n*                                                                     *\n*                                                                     *\n*      When COPY is requested, RETPDC and RETPDU must not be given.   *\n*      When RETPDC is given, RETPDU is also required and vice-versa.  *\n*      When a request is purged, the DF/DSS dump, sysin, and          *\n*      sysprint datasets are scratched and the master file record     *\n*      is copied to NEWSEQ, then reset to \"free\" status.              *\n*                                                                     *\n*      When purging records (RETPDC and RETPDU are given), the        *\n*      program expects to copy any records in OLDSEQ to NEWSEQ        *\n*      and then copy any master file records being purged to          *\n*      NEWSEQ.  This provides a cumulative history of requests        *\n*      purged if the output of one run is input as OLDSEQ to          *\n*      the next run.                                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nRETPDC=2                  PURGE COMPLETED REQUESTS AFTER 2 DAYS\nRETPDU=10                 PURGE INCOMPLETE REQUESTS AFTER 10 DAYS\n//\n./ ADD NAME=FXSTC    0100-99056-99056-1500-00015-00015-00000-FX-REL1\n\n//FXSTC    EXEC PGM=FXSTC,REGION=7500K\n//STEPLIB  DD  DSN=.............,DISP=SHR\n//MASTER   DD  DSN=.............,DISP=SHR\n//IDCI     DD  DSN=&&IDCI,DISP=(NEW,PASS),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(1,1)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//IDCP     DD  DSN=&&IDCP,DISP=(NEW,PASS),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(1,1)),\n//             DCB=(RECFM=VBA,LRECL=125,BLKSIZE=3120)\n//ABNLIGNR DD  DUMMY\n//FXPRT    DD  SYSOUT=*\n//FXIN     DD  DSN=fxparms,DISP=SHR\n./ ADD NAME=LINK     0100-99056-99056-1500-00486-00486-00000-FX-REL1\n\n//.... JOB ......\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//* Before running this job:                                          *\n//*   1) Add a valid JOB card                                         *\n//*   2) Change the DSN prefix on all SYSLIB and SYSLMOD DDs.         *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Link ACB names module                                   *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//ACB      EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXACB)\n  ENTRY FXACB\n  NAME FXACB(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Batch interface common                                  *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//BCOMM    EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXBCOMM)\n  ENTRY FXBCOMM\n  NAME FXBCOMM(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Batch interface main module                             *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//BMAIN    EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,AC=1,NCAL',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXBMAIN)                MAINLINE\n  INCLUDE SYSLIB(FXLERAD)                LERAD EXIT\n  INCLUDE SYSLIB(FXBREQE)                REQUEST ENTRY\n  INCLUDE SYSLIB(FXBREQI)                REQUEST INQUIRY\n  ENTRY FXBMAIN\n  NAME FXBATCH(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Batch interface parameter reader/interpreter            *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//BPARM    EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,AC=1,NCAL',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXBPARM)\n  ENTRY FXBPARM\n  NAME FXBPARM(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Batch interface print                                   *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//BPRT     EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,AC=1,NCAL',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXBPRT)\n  ENTRY FXBPRT\n  NAME FXBPRT(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Link master file formatter                              *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//FORMAT   EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXFORMAT)\n  ENTRY FXFORMAT\n  NAME FXFORMAT(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Link file maintenance main module                       *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//MAINT    EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=OLD\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXMMAIN)\n  INCLUDE SYSLIB(FXTNODE)\n  INCLUDE SYSLIB(FXTVAR)\n  ENTRY FXMMAIN\n  NAME FXMAINT(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Link file maintenance common                            *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//MCOMM    EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=OLD\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXMCOMM)\n  ENTRY FXMCOMM\n  NAME FXMCOMM(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Link node display SPF variables control table           *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//NTBLE    EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=OLD\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXNTBLE)\n  ENTRY FXNTBLE\n  NAME FXNTBLE(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Link master file purge common data module               *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//PCOMM    EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXPCOMM)\n  ENTRY FXPCOMM\n  NAME FXPCOMM(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Link master file purge                                  *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//PURGE    EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXPURGE)\n  ENTRY FXPURGE\n  NAME FXPURGE(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Link STC common                                         *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//SCOMM    EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXSCOMM)\n  ENTRY FXSCOMM\n  NAME FXSCOMM(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Link STC IEBCOPY subtask                                *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//SCOPY    EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXSCOPY)\n  ENTRY FXSCOPY\n  NAME FXSCOPY(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Link STC DF/DSS subtask                                 *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//SDSS     EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXSDSS)\n  ENTRY FXSDSS\n  NAME FXSDSS(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Link STC master file initialization                     *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//SMINIT   EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXSMINIT)\n  ENTRY FXSMINIT\n  NAME FXSMINIT(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Link master file I/O module                             *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//SMSTR    EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXSMSTR)\n  ENTRY FXSMSTR\n  NAME FXSMSTR(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Link STC parameter reader/interpreter                   *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//SPARM    EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXSPARM)\n  ENTRY FXSPARM\n  NAME FXSPARM(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Link STC print subtask                                  *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//SPRTS    EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXSPRTS)\n  ENTRY FXSPRTS\n  NAME FXSPRTS(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Link STC snap shot module                               *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//SSNAP    EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXSSNAP)\n  ENTRY FXSSNAP\n  NAME FXSSNAP(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Link FX STC main module                                 *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//STC      EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,AC=1,NCAL',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXSMAIN)                MAINLINE\n  INCLUDE SYSLIB(FXSATTN)                VTAM ATTN EXIT\n  INCLUDE SYSLIB(FXSCONS)                CONSOLE COMMUNICATION\n  INCLUDE SYSLIB(FXSCONV)                CONVBLOK ADD/DELETE\n  INCLUDE SYSLIB(FXSDAIR)                DAIR MODULE\n  INCLUDE SYSLIB(FXLERAD)                LERAD EXIT\n  INCLUDE SYSLIB(FXSLOSS)                CLEAN-UP AFTER A VTAM LOSS\n  INCLUDE SYSLIB(FXSPRTQ)                PRINT QUEUING MODULE\n  INCLUDE SYSLIB(FXSRECV)                FILE RECEIVE\n  INCLUDE SYSLIB(FXSREQE)                XMIT REQUEST ENTRY\n  INCLUDE SYSLIB(FXSREQI)                XMIT REQUEST INQUIRY\n  INCLUDE SYSLIB(FXSRPLX)                RPL EXIT\n  INCLUDE SYSLIB(FXSSEND)                FILE SEND\n  INCLUDE SYSLIB(FXSSESS)                SESSBLOK ADD/DELETE\n  INCLUDE SYSLIB(FXSSHUT)                STARTED TASK SHUTDOWN\n  INCLUDE SYSLIB(FXSSTGE)                STAGE/DESTAGE MODULE\n  INCLUDE SYSLIB(FXSTIMER)               TIMER EXIT\n  INCLUDE SYSLIB(FXSUID)                 USER IDENTIFICATION\n  INCLUDE SYSLIB(FXSVSUB)                VTAM SUB-FUNCTIONS\n  INCLUDE SYSLIB(FXSVTAM)                VTAM FUNCTIONS\n  INCLUDE SYSLIB(FXSVTOC)                VTOC FUNCTIONS\n  ENTRY FXSMAIN\n  NAME FXSTC(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Link external trace module                              *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//SXTR     EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXSXTR)\n  ENTRY FXSXTR\n  NAME FXSXTR(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Link TSO common                                         *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//TCOMM    EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXTCOMM)\n  ENTRY FXTCOMM\n  NAME FXTCOMM(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Link TSO interface main module                          *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//TSO      EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,AC=1,NCAL'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXTMAIN)                MAINLINE\n  INCLUDE SYSLIB(FXTINIT)                INITIALIZATION\n  INCLUDE SYSLIB(FXTNODE)                NODE DISPLAY\n  INCLUDE SYSLIB(FXTREQE)                TRANSMISSION REQUEST ENTRY\n  INCLUDE SYSLIB(FXTREQI)                TRANSMISSION REQUEST INQUIRY\n  INCLUDE SYSLIB(FXTSHUT)                FX STARTED TASK SHUTDOWN\n  INCLUDE SYSLIB(FXTSNAP)                FX STARTED TASK SNAP SHOT\n  INCLUDE SYSLIB(FXTTERM)                TERMINATION\n  INCLUDE SYSLIB(FXTVAR)                 SPF VARIABLE DELETE/DEFINE\n  INCLUDE SYSLIB(FXDSNVER)               DATA SET NAME VERIFICATION\n  INCLUDE SYSLIB(FXMEMVER)               MEMBER NAME VERIFICATION\n  INCLUDE SYSLIB(FXLERAD)                LERAD EXIT\n  ENTRY FXTMAIN\n  NAME FXTSO(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Link user interface subroutine                          *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKUSER EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FXUSER)\n  INCLUDE SYSLIB(FXDSNVER)\n  INCLUDE SYSLIB(FXMEMVER)\n  ENTRY FXUSER\n  NAME FXUSER(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           Link 24 bit functions module                            *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINK24   EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=prefix.FX.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FX24)\n  ENTRY FX24\n  NAME FX24(R)\n/*\n//* ------------------------------------------------------------------*\n//*                                                                   *\n//*                                                                   *\n//*                                                                   *\n//* ------------------------------------------------------------------*\n//COMPRESS EXEC PGM=IEBCOPY,REGION=4096K,\n//             COND=(4,LT)\n//SYSPRINT DD SYSOUT=*\n//IN       DD DSN=prefix.FX.LOADLIB,DISP=SHR\n//OUT      DD DSN=prefix.FX.LOADLIB,DISP=SHR\n//SYSIN    DD *\n  COPY INDD=IN,OUTDD=OUT\n/*\n//\n./ ADD NAME=PURGE    0100-99056-99056-1500-00045-00045-00000-FX-REL1\n\n//......... JOB ..........\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//* Before running this job:                                          *\n//*   1) Add a valid JOB card.                                        *\n//*   2) Change the prefix on the STEPLIB DD.                         *\n//*   3) Change the data set name on the MASTER DD to your master     *\n//*      file name.                                                   *\n//*   4) Change the data set name on the OLDSEQ DD or change the      *\n//*      the DD to a \"DD DUMMY\".  If you use DUMMY, you will need     *\n//*      to use the DCB=BLKSIZE= parameter.  Since the output record  *\n//*      size is dependant on the MAXNODE value you used, the BLKSIZE *\n//*      will have to be determined by examining the assembly output  *\n//*      for FXPURGE.  Label REQBLOKL is an equate that is set to the *\n//*      record size, convert this to decimal and use it for the      *\n//*      BLKSIZE.                                                     *\n//*   5) Change the data set name on the NEWSEQ DD.                   *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//FXPURGE  EXEC PGM=FXPURGE\n//STEPLIB  DD   DSN=prefix.fx.LOADLIB,DISP=SHR\n//MASTER   DD   DSN=your.master.file.name,DISP=SHR\n//FXPRINT  DD   SYSOUT=*\n//OLDSEQ   DD   DSN=previous.pur\n*                                                                     *\n*                                                                     *\n*      When COPY is requested, RETPDC and RETPDU must not be given.   *\n*      When RETPDC is given, RETPDU is also required and vice-versa.  *\n*      When a request is purged, the DF/DSS dump, sysin, and          *\n*      sysprint datasets are scratched and the master file record     *\n*      is copied to NEWSEQ, then reset to \"free\" status.              *\n*                                                                     *\n*      When purging records (RETPDC and RETPDU are given), the        *\n*      program expects to copy any records in OLDSEQ to NEWSEQ        *\n*      and then copy any master file records being purged to          *\n*      NEWSEQ.  This provides a cumulative history of requests        *\n*      purged if the output of one run is input as OLDSEQ to          *\n*      the next run.                                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\n* RETPDC=3                PURGE COMPLETED REQUESTS AFTER 5 DAYS\n* RETPDU=30               PURGE INCOMPLETE REQUESTS AFTER 30 DAYS\nCOPY                      COPY MASTER FILE TO NEWSEQ\n//\n./ ADD NAME=STCPARM  0100-99056-99056-1500-00045-00045-00000-FX-REL1\n\n* ------------------------------------------------------------------- *\n*        DEFINE VTAM APPL NAME                                        *\n* ------------------------------------------------------------------- *\nAPPLID=xxxxxxxxx\n* ------------------------------------------------------------------- *\n*        DEFINE SYSTEM NAME (APPEARS ON TSO PANELS AND IN SYSOUT)     *\n* ------------------------------------------------------------------- *\nSYSNAME=xxxxxxxx\n* ------------------------------------------------------------------- *\n*        DEFINE SNAP SHOT SYSOUT CLASS                                *\n* ------------------------------------------------------------------- *\nSNAPCLASS=c\n* ------------------------------------------------------------------- *\n*        DEFINE APPL NAMES OF OTHER FX NODES                          *\n* ------------------------------------------------------------------- *\nFXNODE=aaaaaaa\nFXNODE=bbbbbbb\n* ------------------------------------------------------------------- *\n*        DEFINE DESTINATIONS                                          *\n* ------------------------------------------------------------------- *\nDESTINATION=aaa,aaaaaaa\nDESTINATION=bbb,bbbbbbb\n* ------------------------------------------------------------------- *\n*        SPECIFY MAXIMUM ALLOWED FILE SIZE                            *\n* ------------------------------------------------------------------- *\nMAX SIZE=nnnnnnn\n* ------------------------------------------------------------------- *\n*        SPECIFY PDS member stage data set size                       *\n* ------------------------------------------------------------------- *\nMEM SIZE=nnnnnnn\n* ------------------------------------------------------------------- *\n*        SPECIFY PREFIX FOR STAGING DATASET NAMES                     *\n* ------------------------------------------------------------------- *\nSTAGEPRFX=prefix\n* ------------------------------------------------------------------- *\n*        SPECIFY VOLUMES STAGING DATASETS MAY BE ALLOCATED ON         *\n* ------------------------------------------------------------------- *\nSTAGE=vvvvvv\n* ------------------------------------------------------------------- *\n*        DEFINE DATASET PREFIXES AND VOLUMES FOR RESTORES             *\n* ------------------------------------------------------------------- *\nRESTORE=dsnpref1,vvvvvv\nRESTORE=dsnpref2,vvvvvv\nRESTORE=dsnpref3,vvvvvv\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FXMAC": {"ttr": 6410, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x05o\\x01\\x00\\x04_\\t\\x11\\x0b\\xbe\\x0b\\xbe\\x00\\x00\\xc6\\xe7`\\xd9\\xc5\\xd3\\xf1@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-02-25T00:00:00", "modifydate": "2000-02-14T09:11:00", "lines": 3006, "newlines": 3006, "modlines": 0, "user": "FX-REL1"}, "text": "./ ADD NAME=ABCODES  0100-99056-99056-1500-00117-00117-00000-FX-REL1\n\n         MACRO\n         ABCODES\n$U0001   EQU  1\n$U0002   EQU  2\n$U0003   EQU  3        INVALID COMMAND PASSED TO DAIR MODULE\n$U0004   EQU  4        INVALID FILE TYPE ON DAIR ALLOCATION\n$U0005   EQU  5        REQUEST BLOCK ON CHAIN IN FXDSS\n$U0006   EQU  6        INVALID COMMAND PASSED TO FXSMSTR\n$U0007   EQU  7        DIV ERROR IN FXMSTR\n$U0008   EQU  8        NO RESTORE CONTROL BLOCK FOR FXDSS\n$U0009   EQU  9        REQUEST BLOCK ON ON CHAIN IN FXSTGE\n$U0010   EQU  10       DSPSERV ERROR IN FXMSTR\n$U0011   EQU  11       ALESERV ERROR IN FXMSTR\n$U0012   EQU  12       VOLSER WITH NO DSN IN FXSTGE\n$U0013   EQU  13       NO STAGING DEVICES IN FXVTOC\n$U0014   EQU  14       FMT4 OBTAIN ERROR ON STGE DEVICE\n$U0015   EQU  15       FMT4 DOES NOT HAVE CORRECT ID ON STAGE DEVICE\n$U0016   EQU  16       DAIR DELETE CALL FAILED IN FXUREQI\n$U0017   EQU  17       CONVERSATION IN AN UNKNOWN STATE IN FXVTAM\n$U0018   EQU  18       INVALID COMMAND PASSED TO FXVTOC\n$U0019   EQU  19       FMT4 OBTAIN ERROR ON STGE DEVICE\n$U0020   EQU  20       FMT4 DOES NOT HAVE CORRECT ID ON STAGE DEVICE\n$U0021   EQU  21       FMT1 OBTAIN ERROR ON STGE DEVICE\n$U0022   EQU  22       FMT1 DOES NOT HAVE CORRECT ID ON STAGE DEVICE\n$U0023   EQU  23       FMT3 OBTAIN ERROR ON STGE DEVICE\n$U0024   EQU  24       FMT3 DOES NOT HAVE CORRECT ID ON STAGE DEVICE\n$U0025   EQU  25       MASTER FILE INITIALIZATION FAILED\n$U0026   EQU  26       RCVFHM5 FAILED\n$U0027   EQU  27       A 'USER' TRANSACTION ARRIVED FROM A FX NODE\n$U0028   EQU  28       SESSION REJECT FAILED IN FXSATTN\n$U0029   EQU  29\n$U0030   EQU  30       FXCOMM CDE ENTRY NOT FOUND BY TIMER EXIT\n$U0031   EQU  31       VTAM ERROR\n$U0032   EQU  32       BSAM READ ERROR\n$U0033   EQU  33       LERAD EXIT DRIVEN\n$U0034   EQU  34       INVALID COMMAND RECEIVED BY FXVSUB\n$U0035   EQU  35       RECORD IN INITIAL STATUS, BUT NOT ON SENDING END\n$U0036   EQU  36       DUMP/RESTORE FOR DATASET IN WRONG STATUS\n$U0037   EQU  37       ERROR LOCATING FXCOMM IN TIMER EXIT\n$U0038   EQU  38       NO ACB NAME AVAILABLE FOR USER INTERFACE\n$U0042   EQU  42       INVALID USER SESSION STATE IN FXVTAM\n$U0043   EQU  43       VDEFINE FAILED IN FXTINIT\n$U0044   EQU  44       ERROR IN FXTREQE\n$U0045   EQU  45       ERROR IN FXTREQI\n$U0046   EQU  46       ERROR IN FXTSTAT\n$U0047   EQU  47       ERROR IN FXTSNAP\n$U0048   EQU  48       ERROR IN FXTTERM\n$U0049   EQU  49       VDELETE FAILED IN FXTTERM\n$U0050   EQU  50       SESSION DE-ALLOCATE FAILED IN FXTTERM\n$U0051   EQU  51       SEND FAILED IN FXTREQE\n$U0052   EQU  52       RECEIVE FAILED IN FXTREQE\n$U0053   EQU  53       SEND FAILED IN FXTREQI\n$U0054   EQU  54       RECEIVE FAILED IN FXTREQI\n$U0055   EQU  55       SESSBLOK ADD FAILED IN ATTN EXIT\n$U0056   EQU  56       SESSBLOK DELETE FAILED IN ATTN EXIT\n$U0057   EQU  57       VTAM FUNCTION FAILED IN FXVTAM, RC IN TRACE\n$U0058   EQU  58       SEND FAILED IN FXTSHUT\n$U0059   EQU  59       RECEIVE FAILED IN FXTSHUT\n$U0060   EQU  60       DATASET SIZE IS ZERO AFTER LISTCAT IN FXSTGE\n$U0061   EQU  61       INVALID COMMAND PASSED TO FX24\n$U0062   EQU  62       FXPRT DD NOT PRESENT\n$U0063   EQU  63       SESSION DEALLOCATION FAILED IN FXSEND\n$U0064   EQU  64       'LAST' RECORD WITHOUT CONFIRM SET IN FXRECV\n$U0065   EQU  65       CONVBLOK NOT FOUND IN FXCONV\n$U0066   EQU  66       NODE NOT FOUND IN NODE LIST IN FXLOSS\n$U0067   EQU  67       REQUEST NOT IN TRANSMIT STATUS IN FXLOSS\n$U0068   EQU  68       REQUEST NOT IN RECEIVE STATUS IN FXLOSS\n$U0069   EQU  69       STAGING DATASET RELEASE FAILED IN FXLOSS\n$U0070   EQU  70       STAGING DATASET DELETE FAILED IN FXLOSS\n$U0071   EQU  71       ERROR IN FXTSHUT\n$U0072   EQU  72       ALLOCATE FOR FXSNAP FAILED IN FXUSNAP\n$U0073   EQU  73       DE-ALLOCATE FOR FXSNAP FAILED IN FXUSNAP\n$U0074   EQU  74       INVALID FIELD FORMAT IN FXUSNAP\n$U0075   EQU  75       INVALID COMMAND PASSED TO FXTVAR\n$U0076   EQU  76       INVALID VARIABLE ID PASSED TO FXTVAR\n$U0077   EQU  77       VDEFINE FAILED IN FXTVAR\n$U0078   EQU  78       VDELETE FAILED IN FXTVAR\n$U0079   EQU  79       DF/DSS LIST FILE ALLOCATION FAILED IN FXUREQI\n$U0080   EQU  80       DF/DSS LIST FILE DE-ALLOCATE FAILED IN FXUREQI\n$U0081   EQU  81       LMINIT FAILED IN FXTREQI\n$U0082   EQU  82       BROWSE FAILED IN FXTREQI\n$U0083   EQU  83       CONTROL RECORD BAD IN FXUREQE\n$U0084   EQU  84       NODE NOT FOUND IN DESTINATIONS IN FXSEND\n$U0085   EQU  85       UNKNOWN RECORD TYPE AFTER SEND POSTED IN FXSEND\n$U0086   EQU  86       ABEND REQUESTED BY USER IN BATCH\n$U0087   EQU  87       RPL DOES NOT BELONG TO ANY SESS OR CONV BLOCK\n$U0088   EQU  88       RPLX DRIVEN AT SESS LEVEL WITH NOTHING PENDING\n$U0089   EQU  89       RPLX DRIVEN AT CONV LEVEL WITH NOTHING PENDING\n$U0090   EQU  90       BAD RESTORE NOTIFICATION RECEIVED\n$U0091   EQU  91       PQUERY FAILED IN FXTNODE\n$U0092   EQU  92       VDATA VDELETE FAILED IN FXTNODE\n$U0093   EQU  93       VDATA VDEFINE FAILED IN FXTNODE\n$U0094   EQU  94       ERROR UN-ALLOCATING A DATA SET IN FXSSTGE\n$U0095   EQU  95       NODE NOT FOUND WHEN UPDATING XMIT TIME FXSVTAM\n$U0096   EQU  96       DF/DSS SUBTASK ABENDED\n$U0097   EQU  97       IEBCOPY SUBTASK ABENDED WITH CODE NOT X37\n$U0098   EQU  98       IEBCOPY X37 ABEND WITH NO DRREQ BLOCK IN FXSSTGE\n$U0099   EQU  99       IEBCOPY ATTACH FAILED IN FXSSTGE\n$U0100   EQU 100       I/O ERROR READING PDS DIRECTORY IN FXSCOPY\n$U0101   EQU 101       DEVTYPE FAILED IN FXSCOPY\n$U0102   EQU 102       VOLSER NOT FOUND READING LISTCAT DATA IN FXSSTGE\n$U0103   EQU 103       ERROR DELETING A DATA SET IN FXSSTGE\n$U0104   EQU 104       ERROR STAGE DATA SET FOR READ-BACK IN FXSSTGE\n$U0105   EQU 105       ERROR STAGE DATA SET FOR READ-BACK IN FXSSEND\n$U0106   EQU 106       ATTENTION EXIT ENTERED IN FXUSER\n$U0107   EQU 107       LERAD EXIT ENTERED IN FXUSER\n$U0108   EQU 108       QEDIT (DELETE CIB) FAILED IN FXSCONS\n$U0109   EQU 109       QEDIT (SET CIB LIMIT) FAILED IN FXCONS\n$U0110   EQU 110       POINT FAILED IN FXSSEND\n$U0111   EQU 111       NOTE FAILED IN FXSSEND\n$U0112   EQU 112       NODE NOT FOUND IN DEST LIST IN FXSLOSS\n$U0113   EQU 113       POINT FAILED IN FX24\n$U0114   EQU 114       PRINT DATA SET DD NOT FOUND IN TIOT IN FXSREQI\n$U0115   EQU 115       CAMLST FAILED FOR PRINT DATA SET IN FXSREQI\n$U0116   EQU 116       SMF NOT ACTIVE IN FXUSER\n         MEND\n./ ADD NAME=COMMCOMM 0100-99056-99056-1500-00125-00125-00000-FX-REL1\n\n         MACRO\n         COMMCOMM &COMMNAME=\n         GBLA  &INTV,&MAXL,&MAXNDE,&MAXSZ,&TRSZ\n         GBLB  &CHFLAG,&PTRFLAG,&VINIT\n         GBLC  &AREA,&RACFC,&RACFE,&TROPT,&VGEN\n         GBLC  &ACB(20),&VDEFGBL(1000)\n         GBLC  &MSTRACC\n         GBLC  &DDEST\n*---------------------------------------------------------------------*\n*                                                                     *\n*          Double word for CVB/CVD                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMDWRD DC    D'0'\nCOMMDXDA DC    A(0)                WORK AREA ABOVE THE LINE\n*---------------------------------------------------------------------*\n*                                                                     *\n*          Master file I/O work area address                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMIOWK DC    A(0)                MASTER FILE WORK AREA ADDRESS\nCOMMRECS DC    F'0'                NUMBER OF RECORDS IN MASTER FILE\n*---------------------------------------------------------------------*\n*                                                                     *\n*          EXTERNAL TRACE SUBTASK CONTROL                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMXTR  DC    A(0)                TRACE SUBTASK'S TCB ADDRESS\nXTRREQ   DC    A(0)                TRACE SUBTASK REQUEST QUEUE\nXTRTERM  DC    A(0)                TRACE SUBTASK TERMINATION ECB\nXTRWORK  DC    A(0)                TRACE WORK TO DO ECB\nAXTR     DC    A(0)                EXTERNAL TRACE MODULE ENTRY POINT\nXTRFLAG  DC    X'00'               TRACE FLAG\n$XTR     EQU   X'01'               .. EXTERNAL TRACE IS ACTIVE\n$XTREOJ  EQU   X'02'               .. SHUTDOWN TIME\n*---------------------------------------------------------------------*\n*                                                                     *\n*          ADD TRACE ENTRY                                            *\n*                                                                     *\n*  During program initialization, FXMAIN acquires storage for the     *\n*  trace table and sets TRFIRST, TRLAST, and TRCURR.  FXMAIN          *\n*  also sets R11 to the address of FXBCOMM and all other modules      *\n*  depend on this remaining unchanged.  Any module except this        *\n*  module may call the trace routine.  Macro ITRACE generates the     *\n*  calling sequence.  R14 is the only register altered by the trace   *\n*  macro.                                                             *\n*                                                                     *\n*  The trace table is a \"wrap-around\" table.  TRFIRST is the first    *\n*  entry's address, TRLAST is the last entry's address, and           *\n*  TRCURR is the address of the last entry added to the table.        *\n*  When a trace entry is added to the table, the calling module's     *\n*  name, an 8-byte ID, and up to 2 8-byte fields are captured.        *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*      This code depends on:                                          *\n*           R11  'FXBCOMM' address                                    *\n*           R12  current module's base address                        *\n*           R14  trace id's address and R14 + 8 will be the return    *\n*                address                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nTRACE000 DS    0H\n         USING MODPRFX,R12         DEFINE BASE\n         USING &COMMNAME,R11       DEFINE BASE\n         USING TRENTRY,R2          DEFINE BASE\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         ICM   R2,15,TRCURR        CURRENT TRACE ENTRY\n         BZ    TRACE020            NO TRACE TABLE\n         OC    0(TRENTRYL,R2),0(R2)    EMPTY ENTRY?\n         BZ    TRACE010            YES.. USE THIS ENTRY\n         LA    R2,TRENTRYL(R2)     NEXT TRACE ENTRY\n         C     R2,TRLAST           BEYOND END OF TABLE?\n         BNH   TRACE010            NO\n         L     R2,TRFIRST          'WRAP' TRACE TABLE\nTRACE010 DS    0H\n         ST    R2,TRCURR           SAVE CURRENT TRACE ENTRY ADDRESS\n         MVC   TREMOD,PFXMODNM     COPY MODULE NAME\n         MVC   TREID,0(R14)        COPY TRACE ID\n         MVC   TREDATA1,TRDATA1    COPY TRACE DATA 1\n         MVC   TREDATA2,TRDATA2    COPY TRACE DATA 2\n         XC    TRDATA1,TRDATA1     CLEAR TRACE DATA\n         XC    TRDATA2,TRDATA2     CLEAR TRACE DATA\nTRACE020 DS    0H\n         TM    XTRFLAG,$XTR        EXTERNAL TRACE ACTIVE?\n         BNO   TRACE040            NO\n         OC    XTRTERM,XTRTERM     HAS TRACE SUBTASK ABENDED?\n         BNZ   TRACE040            YES\n         GETMAIN RU,               ACQUIRE STORAGE FOR XTRRECD         +\n               LV=XTRRECDL,        .. SIZE                             +\n               LOC=BELOW           .. 24-BIT TYPE\n         LR    R4,R1               COPY STORAGE ADDRESS\n         USING XTRRECD,R4\n         XC    0(XTRRECDL,R4),0(R4)\n         MVC   XTREYE,XTRID        IDENTIFY THE STORAGE AREA\n         STCK  XTRTIME             SET TIME\n         MVC   XTRDATA(TRENTRYL),TRENTRY\nTRACE030 DS    0H\n         L     R1,XTRREQ           CURRENT POINTER\n         ST    R1,XTRNEXT          SET 'NEXT' BLOCK'S ADDRESS\n         CS    R1,R4,XTRREQ        CHANGE CURRENT POINTER\n         BNE   TRACE030            NOT SUCCESSFUL, TRY AGAIN\nTRACE040 DS    0H\n         LM    R14,R12,12(R13)     RESTORE REGISTERS\n         B     8(R14)              RETURN\nXTRID    DC    C'XTRRECD'\n*---------------------------------------------------------------------*\n*                                                                     *\n*          TRACE CONTROL                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DS    0A\n         DC    CL4'1STX'           FIRST TRACE ENTRY\nTRFIRST  DC    A(0)\n         DC    CL4'LAST'           LAST TRACE ENTRY\nTRLAST   DC    A(0)\n         DC    CL4'CURR'           CURRENT TRACE ENTRY\nTRCURR   DC    A(0)\nTRADDR   DC    A(0)                TRACE TABLE STORAGE ADDRESS\nTRR14    DC    A(0)                REGISTER 14 SAVE AREA\nTRDATA1  DC    CL8' '              TRACE DATA ITEM 1\nTRDATA2  DC    CL8' '              TRACE DATA ITEM 2\nTRSIZE   DC    A(&TRSZ*TRENTRYL)   TRACE TABLE SIZE\n         MEND\n./ ADD NAME=CONVBLOK 0100-99056-99056-1500-00068-00068-00000-FX-REL1\n\n         MACRO\n         CONVBLOK &DSECT=\n* ------------------------------------------------------------------- *\n*                                                                     *\n*      VTAM COMMUNICATION STATUS BLOCK                                *\n*                                                                     *\n*      CONVBLOK's are chained from SESSBLOKs.  APPC architecture      *\n*      allows for multiple convesations to be active on the same      *\n*      session at the same time.  There is no way (at least not       *\n*      that I could find) to single thread conversations.  FMH-5      *\n*      are \"expedited\" data, so before the end of one conversation    *\n*      can be guaranteed, the start of the next conversation is       *\n*      possible.                                                      *\n*                                                                     *\n*      There are two possible causes of a CONVBLOK being allocated.   *\n*        1) the ATTN exit is driven with a FMH-5                      *\n*        2) THERE IS A DATASET TO SEND.. FXSSEND WILL ALLOCATE A      *\n*           conversation to send the dataset on, and a CONVBLOK is    *\n*           allocated for that purpose.                               *\n*                                                                     *\n*      The CONVBLOK's are freed when                                  *\n*        1) on the sending end, when the confirmation to the          *\n*           conversation deallocate is received.                      *\n*        2) on the receiving end, when the SEND,QUALIFY=CONFRMD       *\n*           completes.                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF  (T'&DSECT EQ 'O').ERR0010\n         AIF  ('&DSECT' EQ 'NO').CSECT00\n         AIF  ('&DSECT' EQ 'YES').DSECT00\n         MNOTE 12,'INVALID ''DSECT'', MUST BE ''YES'' OR ''NO'' '\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'''DSECT'' PARAMETER IS REQUIRED'\n         MEXIT\n.CSECT00 ANOP\nCONVBLOK DS   0F\n         AGO  .COMMON\n.DSECT00 ANOP\nCONVBLOK DSECT\n.COMMON  ANOP\nCONVEYE  DS   CL8                  EYECATCHER\nCONVNEXT DS   A                    NEXT CONVERSATION BLOCK ADDRESS\nCONVRPL  DS   A                    RPL'S ADDRESS\nCONVRPLX DS   A                    RPL EXTENSION'S ADDRESS\nCONVDCB  DS   A                    DCB ADDRESS (STAGING FILE DCB)\nCONVDECB DS   A                    DECB ADDRESS\nCONVIOA  DS   A                    I/O AREA ADDRESS\nCONVREC# DS   AL2                  MASTER FILE RECORD NUMBER\nCONVTYPE DS   X                    CONVERSATION TYPE\n$CONVTP  EQU  C'P'                 .. PRIMARY END OF FX CONVERSATION\n$CONVTS  EQU  C'S'                 .. SECONDARY END OF FX CONVERSATION\n$CONVTU  EQU  C'U'                 .. USER\nCONVSTAT DS   X                    STATUS\n$CONVALO EQU  X'80'                .. ALLOC SENT OR RECEIVED\n$CONVRDY EQU  X'40'                .. CONVERSATION IS READY\n$CONVPND EQU  X'01'                .. VTAM OR BSAM FUNCTION PENDING\nCONVFUNC DS   C                    LAST FUNCTION ON THIS CONVERSATION\n$CONVFB  EQU  C'B'                 .. BSAM READ OR WRITE\n$CONVFC  EQU  C'C'                 .. VTAM SEND/CONFIRMED\n$CONVFD  EQU  C'D'                 .. DEALLOCATE WITH CONFIRM\n$CONVFR  EQU  C'R'                 .. VTAM RECEIVE\n$CONVFS  EQU  C'S'                 .. VTAM SEND\nCONVCID  DS   CL4                  CONVERSATION ID\nCONVCKPT DS   XL4                  NUMBER OF RECORDS WRITTEN TO STAGE\nCONVL    EQU  *-CONVBLOK\n         MEND\n./ ADD NAME=CONVREQ  0100-99056-99056-1500-00016-00016-00000-FX-REL1\n\n         MACRO\n         CONVREQ &DSECT=YES\n         AIF   ('&DSECT' EQ 'NO').LBL0010\nCONVREQ  DSECT\n         AGO  .LBL0020\n.LBL0010 ANOP\nCONVREQ  DS   0A\n.LBL0020 ANOP\nCONVADDR DS   A                   CONVERSATION BLOCK'S ADDRESS\nCONVSESS DS   A                   SESSION BLOCK'S ADDRESS\nCONVCMD  DS   X                   COMMAND\n$CONVADD EQU  X'01'               .. ADD A NEW CONVERSATION BLOCK\n$CONVDEL EQU  X'02'               .. DELETE A CONERSATION BLOCK\nCONVREQL EQU  *-CONVREQ\n         MEND\n./ ADD NAME=DAIRREQ  0100-99056-99056-1500-00040-00040-00000-FX-REL1\n\n         MACRO\n         DAIRREQ &DSECT=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*      DAIR REQUEST BLOCK                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF  (T'&DSECT EQ 'O').ERR0010\n         AIF  ('&DSECT' EQ 'YES').DSECT00\n         AIF  ('&DSECT' EQ 'NO').CSECT00\n         MNOTE 12,'INVALID ''DSECT'', MUST BE ''YES'' OR ''NO'' '\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'''DSECT'' PARAMETER IS REQUIRED'\n         MEXIT\n.CSECT00 ANOP\nDAIRREQ DS    0F\n         AGO  .COMMON\n.DSECT00 ANOP\nDAIRREQ DSECT\n.COMMON  ANOP\nDAIRCMD  DS   C                    COMMAND\n$DAIRALO EQU  C'A'                 .. ALLOCATE\n$DAIRREL EQU  C'R'                 .. RELEASE\n$DAIRDEL EQU  C'D'                 .. DELETE\nDAIRTYPE DS   C                    TYPE OF ALLOCATE\n$DAIRCPY EQU  X'01'                .. ALLOCATE IEBCOPY SYSIN/SYSPRINT\n$DAIRDSN EQU  X'02'                .. ALLOCATE SPECIFIED DSN\n$DAIRDSS EQU  X'03'                .. ALLOCATE DF/DSS SYSIN/SYSPRINT\n$DAIRPRT EQU  X'04'                .. SYSOUT DATA SET\n$DAIRSTG EQU  X'05'                .. ALLOCATE STAGING DATASET\nDAIRDDN  DS   CL8                  DDNAME NAME\nDAIRDSN  DS   CL44                 DATASET NAME\nDAIRSIZE DS   XL4                  SIZE OF DATASET\nDAIRR15  DS   XL2                  R15 FROM SVC99\nDAIRERR  DS   XL2                  ERROR CODE FROM SVC99\nDAIRINFO DS   XL2                  INFO CODE FROM SVC99\nDAIRL    EQU  *-DAIRREQ\n         MEND\n./ ADD NAME=DESTBLOK 0100-99056-99056-1500-00028-00028-00000-FX-REL1\n\n         MACRO\n         DESTBLOK &DSECT=\n* ------------------------------------------------------------------- *\n*                                                                     *\n*      DESTINATION BLOCK                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF  (T'&DSECT EQ 'O').ERR0010\n         AIF  ('&DSECT' EQ 'NO').CSECT00\n         AIF  ('&DSECT' EQ 'YES').DSECT00\n         MNOTE 12,'INVALID ''DSECT'', MUST BE ''YES'' OR ''NO'' '\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'''DSECT'' PARAMETER IS REQUIRED'\n         MEXIT\n.CSECT00 ANOP\nDESTBLOK DS   0F\n         AGO  .COMMON\n.DSECT00 ANOP\nDESTBLOK DSECT\n.COMMON  ANOP\nDESTEYE  DS   CL8                  EYECATCHER\nDESTNEXT DS   A                    NEXT DESTINATION BLOCK\nDESTNAME DS   CL8                  DESTINATION NAME\nDESTNODE DS   CL8                  NODE NAME\nDESTL    EQU  *-DESTBLOK           SIZE OF CONTROL BLOCK\n         MEND\n./ ADD NAME=DRREQ    0100-99056-99056-1500-00027-00027-00000-FX-REL1\n\n         MACRO\n         DRREQ &DSECT=YES\n         AIF   ('&DSECT' EQ 'YES').DSECT00\n         AIF   ('&DSECT' EQ 'NO').CSECT00\n         MNOTE 12,'''DSECT'' IS INVALID, MUST BE ''YES'' OR ''NO'' '\n         MEXIT\n.DSECT00 ANOP\nDRREQ    DSECT\n         AGO   .COMM\n.CSECT00 ANOP\nDRREQ    DS     0A\n.COMM    ANOP\nDREYE    DS    CL8                EYECATCHER\nDRRSTR   DS    A                  RESTORE BLOCK FOR THIS DATA SET\nDRR15    DS    XL2                RETURN CODE FROM DF/DSS OR IEBCOPY\nDRSTAT   DS    X                  STATUS OF REQUEST\n$DRSTRT  EQU   X'80'              .. PROCESSING STARTED\n$DRDONE  EQU   X'40'              .. PROCESSING COMPLETE\n$DRMEMX  EQU   X'20'              .. MEMBER NOT FOUND\nDRINDD   DS    CL8                DDNAME ASSIGNED TO SYSIN DATA SET\nDRPRTDD  DS    CL8                DDNAME ASSIGNED TO SYSPRINT DATA SET\nDRSTAGE  DS    CL8                DDNAME ASSIGNED TO STAGING DATA SET\nDRPDS    DS    CL8                DDNAME ASSIGNED TO INPUT OR OUTPT PDS\nDRRECD   DS    (REQBLOKL)X        RESERVE ROOM FOR I/O AREA\nDRREQL   EQU   *-DRREQ\n         MEND\n./ ADD NAME=DSNREQ   0100-99056-99056-1500-00020-00020-00000-FX-REL1\n\n         MACRO\n         DSNREQ &DSECT=YES\n         AIF   ('&DSECT' EQ 'YES').DSECT00\n         AIF   ('&DSECT' EQ 'NO').CSECT00\n         MNOTE 12,'''DSECT'' IS INVALID, MUST BE ''YES'' OR ''NO'' '\n         MEXIT\n.DSECT00 ANOP\nDSNREQ   DSECT\n         AGO   .COMM\n.CSECT00 ANOP\nDSNREQ   DS     0A\n.COMM    ANOP\nDSNADDR  DS    A                  DATA SET NAME ADDRESS\nDSNSTAT  DS    X                  STATUS\n$DSNOK   EQU   X'00'              .. DSN IS VALID\n$DSNBAD  EQU   X'01'              .. DSN IS NOT VALID\nDSNMSG   DS    CL71\nDSNREQL  EQU   *-DSNREQ\n         MEND\n./ ADD NAME=FDMPDATA 0100-99056-99056-1500-00014-00014-00000-FX-REL1\n\nFDMPDATA DSECT\nFDMPFLDN DS    CL8                FIELD'S NAME\nFDMPDISP DS    AL2                DISPLACEMENT TO FIELD\nFDMPFMT  DS    C                  DATA FORMAT\n$FMTBIN  EQU   C'B'               .. BINARY NUMERIC\n$FMTCHAR EQU   C'C'               .. CHARACTER\n$FMTDEC  EQU   C'D'               .. DECIMAL\n$FMTHEX  EQU   C'H'               .. HEX\nFDMPLEN  DS    AL2                SOURCE FIELD'S LENGTH\nFDMPFLAG DS    X                  FLAGS\n$FLAGCH  EQU   X'01'              CHAIN (POINTS TO NEXT BLOCK ON CHAIN)\nFDMPPTR  DS    AL4                SUB-CHAIN FORMATTING DATA ADDRESS\nFDMPDATAL EQU  *-FDMPDATA         LENGTH OF DATA PER FIELD\n./ ADD NAME=FMH5     0100-99056-99056-1500-00036-00036-00000-FX-REL1\n\n         MACRO\n         FMH5  &DSECT=,&TRAN=\n         LCLA  &LEN\n         AIF   ('&DSECT' EQ 'YES').DSECT00\n         AIF   ('&DSECT' EQ 'NO').CSECT00\n         MNOTE 12,'''DSECT'' IS INVALID, MUST BE ''YES'' OR ''NO'' '\n         MEXIT\n.DSECT00 ANOP\nFMH5     DSECT\n         AGO   .COMM\n.CSECT00 ANOP\nFMH5     DS    0A\n.COMM    ANOP\n         DC    AL1(FMH5L)            FMH LENGTH\n         DC    X'05'                 FMH TYPE\n         DC    XL2'02FF'             ATTACH COMMAND CODE\n         DC    X'00'                 FLAG BYTE\n         DC    X'03'                 LENGTH OF FIXED PARAMETERS FIELD\n         DC    X'D0'                 CONVERSATION TYPE (BASIC)\n         DC    X'00'                 RESERVED\n         DC    X'40'                 ALLOW CONFIRMS\n         AIF   ('&DSECT' EQ 'YES').DSECT01\n&LEN     SETA  K'&TRAN\nFMH5TRNL DC    AL1(&LEN)             TRANSACTION NAME LENGTH\nFMH5TRAN DC    C'&TRAN'              TRANSACTION NAME\n         AGO   .CSECT01\n.DSECT01 ANOP\nFMH5TRNL DS    X                     TRANSACTION NAME LENGTH\nFMH5TRAN DS    CL8                   TRANSACTION NAME\n.CSECT01 ANOP\n         DC    X'00'                 LENGTH OF SECURITY INFORMATION\n         DC    X'00'                 LENGTH OF LUW IDENTIFIER\n         DC    X'00'                 LENGTH OF CONVERSATION CORRELATOR\nFMH5L    EQU   *-FMH5                FMH LENGTH\n         MEND\n./ ADD NAME=FXBCOMM  0100-99056-99056-1500-00126-00126-00000-FX-REL1\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*        BATCH COMMON AREA MAPPING MACRO                              *\n*                                                                     *\n*     This macro will generate either the 'common' module CSECT or    *\n*     a DSECT to map the 'common' module.  'Common' is used for       *\n*     constants and work areas that are required by several modules   *\n*     allowing some elimination of duplicated data and to allow       *\n*     inter-module communication.                                     *\n*                                                                     *\n*     The trace table code is also incorporated into the 'common'     *\n*     area.                                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         FXBCOMM &TYPE=,&STCACB=BVFXT1\n         GBLA  &INTV,&MAXL,&MAXNDE,&MAXSZ,&TRSZ\n         GBLB  &CHFLAG,&PTRFLAG,&VINIT\n         GBLC  &AREA,&RACFC,&RACFE,&TROPT,&VGEN\n         GBLC  &ACB(20),&VDEFGBL(1000)\n         GBLC  &MSTRACC\n         GBLC  &DDEST\n         AIF   ('&TYPE' EQ 'CSECT').CSECT\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n         MNOTE 12,'INVALID TYPE'\n         MEXIT\n.CSECT   ANOP\nFXBCOMM  CSECT\nFXBCOMM  AMODE 31\nFXBCOMM  RMODE ANY\n         AGO   .NODSECT\n.DSECT   ANOP\nFXBCOMM  DSECT\n.NODSECT ANOP\n         COMMCOMM COMMNAME=FXBCOMM\n*---------------------------------------------------------------------*\n*                                                                     *\n*        31-BIT MODULE ENTRY POINTS                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DC    CL8'FXBCOMM'\nABCOMM   DC    A(FXBCOMM)          COMMON MODULE\n         DC    CL8'FXBMAIN'\nABMAIN   DC    A(0)                BATCH MAINLINE MODULE\n         DC    CL8'FXBPARM'\nABPARM   DC    A(0)                BATCH PARAMETER INTERPRETER\n         DC    CL8'FXBPRT'\nABPRT    DC    A(0)                BATCH PARAMETER INTERPRETER\n         DC    CL8'FXBREQE'\nABREQE   DC    A(0)                REQUEST ENTRY PROCESSOR\n         DC    CL8'FXBREQI'\nABREQI   DC    A(0)                REQUEST INQUIRY PROCESSOR\n         DC    CL8'FXUSER '\nAUSER    DC    A(0)                FXUSER SUBROUTINE ADDRESS\n*---------------------------------------------------------------------*\n*                                                                     *\n*        24-BIT WORK AREA ADDRESSES                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMPRMW DC    A(0)                FXBPARM WORK AREA ADDRESS\nCOMMPRTW DC    A(0)                FXBRT WORK AREA ADDRESS\n*---------------------------------------------------------------------*\n*                                                                     *\n*          GLOBAL DATA                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMPROC DC    A(0)                REQUEST PROCESSOR ADDRESS\nCOMMNBR  DC    F'0'                REQUEST NUMBER (ON STATUS REQUESTS)\nCOMMACB  DC    A(0)                ACB'S ADDRESS\nCOMMACBL DC    F'0'                ACB'S LENGTH\nCOMMRPL  DC    A(0)                RPL'S ADDRESS\nCOMMRPLL DC    F'0'                RPL'S LENGTH\nCOMMRPLX DC    A(0)                RPL EXTENSION'S ADDRESS\nCOMMRPXL DC    F'0'                RPL EXTENSION'S LENGTH\nCOMMNIB  DC    A(0)                NIB'S ADDRESS\nCOMMNIBL DC    F'0'                NIB'S LENGTH\nCOMMXLST DC    A(0)                EXLST'S ADDRESS\nCOMMXLSL DC    F'0'                EXLST'S LENGTH\nCOMMIOA  DC    A(0)                I/O AREA ADDRESS\nCOMMAPLL DC    AL1(8)              APPLID'S LENGTH\nCOMMAPLN DC    CL8' '              APPLID\nCOMMFX   DC    CL8'&STCACB'        FX STC'S ACB NAME\nCOMMNODE DC    CL8' '              NODE NAME (FOR INQUIRY REQUESTS)\nCOMMCID  DC    XL4'00'             CONVERSATION ID\nCOMMUID  DC    CL8' '              USER'S ID\nCOMMSYSN DC    CL20' '             FX SYSTEM'S NAME\nCOMMUATH DC    X'00'               USER'S AUTHORITY LEVEL\n$COMMUS1 EQU   X'01'               .. GENERAL USER\n$COMMUS2 EQU   X'02'               .. OPERATOR USER\n$COMMUS3 EQU   X'03'               .. ADMINISTRATOR\n$COMMUS4 EQU   X'04'               .. MASTER/BLASTER USER\nCOMMFLAG DC    X'00'               GLOBAL FLAGS\n$ABEND   EQU   X'80'               .. ABEND AT END OF JOB\n$ABORT   EQU   X'40'               .. SERIOUS ERROR, ABORT\n$ACBOPEN EQU   X'20'               .. ACB IS OPEN\n$SESSALO EQU   X'10'               .. SESSION ALLOCATED\n$EOJ     EQU   X'08'               .. SHUTTING DOWN\n$NOLIMIT EQU   X'04'               .. UNLIMITED NUMBER OF ATTEMPTS\nCOMMRC   DC    X'00'               RETURN CODE\nCOMMBLKS DC    CL80' '\nCOMMIOSZ EQU   32776               32K + 8\n*---------------------------------------------------------------------*\n*                                                                     *\n*          REQUEST DATA FROM PARMS                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMINTV DC    F'6000'             DEFAULT INTERVAL VALUE IS 60 SECONDS\nCOMMATTM DC    H'5'                DEFAULT NUMBER OF ATTEMPTS\nCOMMRID  DC    CL08' '             REQUESTOR'S ID\nCOMMTNDE DC    CL08' '             TRANSMITTING NODE\nCOMMODSN DC    CL44' '             ORIGINAL DATASET'S NAME\nCOMMOMEM DC    CL08' '             ORIGINAL DATASET'S NAME\nCOMMDDSN DC    CL44' '             DATA SET NAME AT DESTINATION(S)\nCOMMDMEM DC    CL08' '             MEMBER NAME AT DESTINATION(S)\nCOMMREPL DC    CL01'N'             REPLACE INDICATOR (DEFAULT IS NO)\nCOMMALAS DC    CL01'N'             SEND ALIASES (DEFAULT IS NO)\nCOMMNDE# DC    H'0'  '             NUMBER OF DESTINATIONS\nCOMMDEST DC    (&MAXNDE)CL8' '     DESTINATION(S)\n         EJECT\nCOMMEND  EQU   *\n         SPACE 2\n         COPY  TRENTRY\n         FXPRFX TYPE=DSECT\n         XTRRECD\n         MEND\n./ ADD NAME=FXCALL   0100-99056-99056-1500-00260-00260-00000-FX-REL1\n\n         MACRO\n         FXCALL &MOD,&PARM1,&PARM2,&PARM3,&PARM4,&PARM5\n.* ------------------------------------------------------------------ *\n.*                                                                    *\n.*   This macro call fills in the parameters for most of the internal *\n.*   \"subroutines\".  Use of this macro makes coding a subroutine      *\n.*   invocation shorter, and if the request block is updated, usually *\n.*   all that is required is an update to this macro and a            *\n.*   re-assembly.                                                     *\n.*                                                                    *\n.* -----------------------------------------------------------------  *\n.*           CONVERSATION BLOCK (CONV)                                *\n.*                                                                    *\n.*      FXCALL CONV                                                   *\n.*             ,<function>              either ADD or DELETE          *\n.*             ,<convblok address or>   .. register notation allowed  *\n.*             ,<sessblok address>      .. register notation allowed  *\n.* -----------------------------------------------------------------  *\n.*           DYNAMIC ALLOCATION (DAIR)                                *\n.*                                                                    *\n.*      FXCALL DAIR                                                   *\n.*             ,<function>              ALLOCATE, RELEASE, or DELETE  *\n.*             ,<type of allocate>      IEBCOPY, DATASET, DFDSS,      *\n.*                                      SYSOUT, or STAGING            *\n.*             ,<ddname address>        .. register notation allowed  *\n.*             ,<dsname address>        .. register notation allowed  *\n.*             ,<address of size>       .. register notation or       *\n.*                                         numeric value allowed      *\n.* -----------------------------------------------------------------  *\n.*           MASTER FILE I/O (MSTR)                                   *\n.*                                                                    *\n.*      FXCALL MSTR                                                   *\n.*             ,<function>              OPEN, READ, WRITE, or CLOSE   *\n.*             ,<record number address> .. register notation or       *\n.*                                         numeric value allowed      *\n.* -----------------------------------------------------------------  *\n.*           PRINT QUEUE (PRTQ)                                       *\n.*                                                                    *\n.*      FXCALL PRTQ                                                   *\n.*             ,<function>              HEADING or PRINT              *\n.* -----------------------------------------------------------------  *\n.*           SESSION BLOCK (SESS)                                     *\n.*                                                                    *\n.*      FXCALL SESS                                                   *\n.*             ,<function>              ADD or DELETE                 *\n.*             ,<lu name address>       .. register notation allowed  *\n.*             ,<sessblok address>      .. register notation allowed  *\n.*                                                                    *\n.* ------------------------------------------------------------------ *\n         AIF   (T'&MOD EQ 'O').ERR0010\n         AIF   ('&MOD' EQ 'FXSCONV').CONV000\n         AIF   ('&MOD' EQ 'CONV').CONV000\n         AIF   ('&MOD' EQ 'FXSDAIR').DAIR000\n         AIF   ('&MOD' EQ 'DAIR').DAIR000\n         AIF   ('&MOD' EQ 'FXSMSTR').MSTR000\n         AIF   ('&MOD' EQ 'MSTR').MSTR000\n         AIF   ('&MOD' EQ 'FXSPRTQ').PRTQ000\n         AIF   ('&MOD' EQ 'PRTQ').PRTQ000\n         AIF   ('&MOD' EQ 'FXSSESS').SESS000\n         AIF   ('&MOD' EQ 'SESS').SESS000\n         MNOTE 12,'UNKNOWN MODULE'\n         MEXIT\n.* ------------------------------------------------------------------ *\n.*                  CONVERSATION BLOCK ADD/DELETE (FXSCONV)           *\n.* ------------------------------------------------------------------ *\n.CONV000 ANOP\n         AIF   (T'&PARM4 NE 'O').ERR0020\n         AIF   (T'&PARM5 NE 'O').ERR0020\n         AIF   (T'&PARM1 EQ 'O').CONV030\n         AIF   ('&PARM1' EQ 'ADD').CONV010\n         AIF   ('&PARM1' EQ 'DELETE').CONV020\n         MNOTE 12,'INVALID CONVBLOK COMMAND'\n         MEXIT\n.CONV010 ANOP\n         MVI   CONVCMD,$CONVADD      SET COMMAND\n         AGO   .CONV030\n.CONV020 ANOP\n         MVI   CONVCMD,$CONVDEL      SET COMMAND\n.CONV030 ANOP\n         AIF   (T'&PARM2 EQ 'O').CONV050\n         AIF   ('&PARM2'(1,1) EQ '(').CONV040\n         MVC   CONVADDR,&PARM2       SET CONVBLOK ADDRESS\n         AGO   .CONV050\n.CONV040 ANOP\n         STCM  &PARM2(1),15,CONVADDR SET CONVBLOK ADDRESS\n.CONV050 ANOP\n         AIF   (T'&PARM3 EQ 'O').CONV070\n         AIF   ('&PARM3'(1,1) EQ '(').CONV060\n         MVC   CONVSESS,&PARM3       SET SESSBLOK ADDRESS\n         AGO   .CONV070\n.CONV060 ANOP\n         STCM  &PARM3(1),15,CONVSESS SET SESSBLOK ADDRESS\n.CONV070 ANOP\n         LA    R1,CONVREQ            REQUEST BLOCK ADDRESS\n         L     R15,ACONV             FXSCONV ENTRY POINT\n         BALR  R14,R15               LINK TO FXSCONV\n         MEXIT\n.* ------------------------------------------------------------------ *\n.*                  DYNAMIC ALLOCATION (FXSDAIR)                      *\n.* ------------------------------------------------------------------ *\n.DAIR000 ANOP\n         AIF   (T'&PARM1 EQ 'O').DAIR040\n         AIF   ('&PARM1' EQ 'ALLOCATE').DAIR010\n         AIF   ('&PARM1' EQ 'DELETE').DAIR020\n         AIF   ('&PARM1' EQ 'RELEASE').DAIR030\n         MNOTE 12,'INVALID DAIR FUNCTION'\n.DAIR010 ANOP\n         MVI   DAIRCMD,$DAIRALO      SET COMMAND\n         AGO   .DAIR040\n.DAIR020 ANOP\n         MVI   DAIRCMD,$DAIRDEL      SET COMMAND\n         AGO   .DAIR040\n.DAIR030 ANOP\n         MVI   DAIRCMD,$DAIRREL      SET COMMAND\n.DAIR040 ANOP\n         AIF   (T'&PARM2 EQ 'O').DAIR100\n         AIF   ('&PARM2' EQ 'IEBCOPY').DAIR050\n         AIF   ('&PARM2' EQ 'DATASET').DAIR060\n         AIF   ('&PARM2' EQ 'DFDSS').DAIR070\n         AIF   ('&PARM2' EQ 'SYSOUT').DAIR080\n         AIF   ('&PARM2' EQ 'STAGING').DAIR090\n         MNOTE 12,'INVALID DATASET TYPE'\n.DAIR050 ANOP\n         MVI   DAIRTYPE,$DAIRCPY     SET TYPE (IEBCOPY)\n         AGO   .DAIR100\n.DAIR060 ANOP\n         MVI   DAIRTYPE,$DAIRDSN     SET TYPE (BY DATASET NAME)\n         AGO   .DAIR100\n.DAIR070 ANOP\n         MVI   DAIRTYPE,$DAIRDSS     SET TYPE (DF/DSS)\n         AGO   .DAIR100\n.DAIR080 ANOP\n         MVI   DAIRTYPE,$DAIRPRT     SET TYPE (SYSOUT)\n         AGO   .DAIR100\n.DAIR090 ANOP\n         MVI   DAIRTYPE,$DAIRSTG     SET TYPE (STAGING)\n.DAIR100 ANOP\n         AIF   (T'&PARM3 EQ 'O').DAIR110\n         MVC   DAIRDDN,&PARM3        SET DDNAME\n.DAIR110 ANOP\n         AIF   (T'&PARM4 EQ 'O').DAIR120\n         MVC   DAIRDSN,&PARM4\n.DAIR120 ANOP\n         AIF   (T'&PARM5 EQ 'O').DAIR140\n         AIF   (T'&PARM5 EQ 'N').DAIR130\n         MVC   DAIRSIZE,&PARM5       SET DATA SET SIZE\n         AGO   .DAIR140\n.DAIR130 ANOP\n         MVC   DAIRSIZE,=AL4(&PARM5) SET DATA SET SIZE\n.DAIR140 ANOP\n         LA    R1,DAIRREQ            REQUEST BLOCK ADDRESS\n         L     R15,ADAIR             FXSDAIR ENTRY POINT\n         BALR  R14,R15               LINK TO FXSDAIR\n         MEXIT\n.* ------------------------------------------------------------------ *\n.*                  MASTER FILE (FXSMSTR)                             *\n.* ------------------------------------------------------------------ *\n.MSTR000 ANOP\n         AIF   (T'&PARM3 NE 'O').ERR0020\n         AIF   (T'&PARM4 NE 'O').ERR0020\n         AIF   (T'&PARM5 NE 'O').ERR0020\n         AIF   (T'&PARM1 EQ 'O').MSTR050\n         AIF   ('&PARM1' EQ 'OPEN').MSTR010\n         AIF   ('&PARM1' EQ 'READ').MSTR020\n         AIF   ('&PARM1' EQ 'WRITE').MSTR030\n         AIF   ('&PARM1' EQ 'CLOSE').MSTR040\n         MNOTE 12,'INVALID MASTER FILE FUNCTION'\n         MEXIT\n.MSTR010 ANOP\n         MVI   MSTRCMD,$MSTROPN      SET COMMAND\n         AGO   .MSTR050\n.MSTR020 ANOP\n         MVI   MSTRCMD,$MSTRRD       SET COMMAND\n         AGO   .MSTR050\n.MSTR030 ANOP\n         MVI   MSTRCMD,$MSTRWRT      SET COMMAND\n         AGO   .MSTR050\n.MSTR040 ANOP\n         MVI   MSTRCMD,$MSTRCLS      SET COMMAND\n.MSTR050 ANOP\n         AIF   (T'&PARM2 EQ 'O').MSTR080\n         AIF   (T'&PARM2 EQ 'N').MSTR060\n         AIF   ('&PARM2'(1,1) EQ '(').MSTR070\n         MVC   MSTRREC#,&PARM2       SET RECORD NUMBER\n         AGO   .MSTR080\n.MSTR060 ANOP\n         MVC   MSTRREC#,=AL2(&PARM2) SET RECORD NUMBER\n         AGO   .MSTR080\n.MSTR070 ANOP\n         STCM  &PARM2(1),3,MSTRREC#  SET RECORD NUMBER\n.MSTR080 ANOP\n         LA    R1,MSTRREQ            REQUEST BLOCK ADDRESS\n         L     R15,AMSTR             MASTER FILE I/O ENTRY POINT\n         BALR  R14,R15               LINK TO MASTER FILE I/O\n         MEXIT\n.* ------------------------------------------------------------------ *\n.*                  PRINT REQUEST (FXSPRTQ)                           *\n.* ------------------------------------------------------------------ *\n.PRTQ000 ANOP\n         AIF   (T'&PARM2 NE 'O').ERR0020\n         AIF   (T'&PARM3 NE 'O').ERR0020\n         AIF   (T'&PARM4 NE 'O').ERR0020\n         AIF   (T'&PARM5 NE 'O').ERR0020\n         AIF   (T'&PARM1 EQ 'O').PRTQ030\n         AIF   ('&PARM1' EQ 'PRINT').PRTQ010\n         AIF   ('&PARM1' EQ 'HEADING').PRTQ020\n         MNOTE 12,'INVALID PRINT REQUEST'\n         MEXIT\n.PRTQ010 ANOP\n         MVI   PRTCMD,$PRTPRT        SET COMMAND\n         AGO   .PRTQ030\n.PRTQ020 ANOP\n         MVI   PRTCMD,$PRTHEAD       SET COMMAND\n.PRTQ030 ANOP\n         LA    R1,PRTBLOK            PRINT QUEUE REQUEST BLOCK ADDRESS\n         L     R15,APRTQ             PRINT QUEUE ENTRY POINT\n         BALR  R14,R15               ADD THE PRINT REQUEST TO QUEUE\n         MEXIT\n.* ------------------------------------------------------------------ *\n.*                  SESSION BLOCKS (FXSSESS)                          *\n.* ------------------------------------------------------------------ *\n.SESS000 ANOP\n         AIF   (T'&PARM4 NE 'O').ERR0020\n         AIF   (T'&PARM5 NE 'O').ERR0020\n         AIF   (T'&PARM1 EQ 'O').SESS030\n         AIF   ('&PARM1' EQ 'ADD').SESS010\n         AIF   ('&PARM1' EQ 'DELETE').SESS020\n         MNOTE 12,'INVALID FXSSESS COMMAND'\n         MEXIT\n.SESS010 ANOP\n         MVI   SESSCMD,$SESSADD SET COMMAND\n         AGO   .SESS030\n.SESS020 ANOP\n         MVI   SESSCMD,$SESSDEL SET COMMAND\n.SESS030 ANOP\n         AIF   (T'&PARM2 EQ 'O').SESS050\n         AIF   ('&PARM2'(1,1) EQ '(').SESS040\n         MVC   SESSNODE,&PARM2  SET NODE NAME\n         AGO   .SESS050\n.SESS040 ANOP\n         MVC   SESSNODE,0&PARM2 SET NODE NAME\n.SESS050 ANOP\n         AIF   (T'&PARM3 EQ 'O').SESS070\n         AIF   ('&PARM3'(1,1) EQ '(').SESS060\n         MVC   SESSADDR,&PARM3  SET SESSBLOK ADDRESS\n         AGO   .SESS060\n.SESS060 ANOP\n         STCM  SESSADDR,15,&PARM3(1)  SET SESSBLOK ADDRESS\n.SESS070 ANOP\n         LA    R1,SESSREQ       REQUEST BLOCK ADDRESS\n         L     R15,ASESS        FXSSESS ENTRY POINT\n         BALR  R14,R15          LINK TO FXSSESS\n         MEXIT\n.ERR010  ANOP\n         MNOTE  12,'MODULE NAME IS REQUIRED'\n         MEXIT\n.ERR020  ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR MASTER FILE REQUEST'\n         MEND\n./ ADD NAME=FXMCOMM  0100-99056-99056-1500-00057-00057-00000-FX-REL1\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*        File maintenance common area mapping macro                   *\n*                                                                     *\n*     This macro will generate either the 'common' module CSECT or    *\n*     a DSECT to map the 'common' module.  'Common' is used for       *\n*     constants and work areas that are required by several modules   *\n*     allowing some elimination of duplicated data and to allow       *\n*     inter-module communication.                                     *\n*                                                                     *\n*     The trace table code is also incorporated into the 'common'     *\n*     area.                                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         FXMCOMM &TYPE=,&STCACB=BVFXT1\n         GBLA  &INTV,&MAXL,&MAXNDE,&MAXSZ,&TRSZ\n         GBLB  &CHFLAG,&PTRFLAG,&VINIT\n         GBLC  &AREA,&RACFC,&RACFE,&TROPT,&VGEN\n         GBLC  &ACB(20),&VDEFGBL(1000)\n         GBLC  &MSTRACC\n         GBLC  &DDEST\n         AIF   ('&TYPE' EQ 'CSECT').CSECT\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n         MNOTE 12,'INVALID TYPE'\n         MEXIT\n.CSECT   ANOP\nFXMCOMM  CSECT\nFXMCOMM  AMODE 31\nFXMCOMM  RMODE ANY\n         AGO   .NODSECT\n.DSECT   ANOP\nFXMCOMM  DSECT\n.NODSECT ANOP\n         COMMCOMM COMMNAME=FXMCOMM\n*---------------------------------------------------------------------*\n*                                                                     *\n*        31-BIT MODULE ENTRY POINTS                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DC    CL8'FXMCOMM'\nAMCOMM   DC    A(FXMCOMM)          COMMON MODULE\n         DC    CL8'FXMAINT'\nAMAINT   DC    A(0)                FILE MAINTENANCE MAINLINE\n         DC    CL8'FXSMSTR'\nAMSTR    DC    A(0)                MASTER FILE I/O\n         DC    CL8'ATNODE '\nATNODE   DC    A(0)                NODE (DESTINATION LIST) DISPLAY\n         DC    CL8'ATVAR  '\nATVAR    DC    A(0)                TSO/SPF VARIABLE MANAGER\nCOMMEND  EQU   *\n         SPACE 2\n         COPY  TRENTRY\n         XTRRECD\n         FXPRFX TYPE=DSECT\n         MEND\n./ ADD NAME=FXMTDATA 0100-99056-99056-1500-00041-00041-00000-FX-REL1\n\n         MACRO\n         FXMTDATA &DSECT=\n         AIF  ('&DSECT' EQ 'YES').LBL0010\n         AIF  ('&DSECT' EQ 'NO').LBL0020\n         MNOTE 12,'INVALID VALUE FOR DSECT PARAMETER'\n         MEXIT\n.LBL0010 ANOP\nFXMTDATA DSECT\n         AGO  .LBL0030\n.LBL0020 ANOP\nFXMTDATA DS   0C\n.LBL0030 ANOP\nZCMD     DC   CL80' '             COMMAND\nFXMKEY   DC   CL5' '              MASTER FILE RECORD NUMBER\nFXMREC   DC   CL5' '              MASTER FILE RECORD NUMBER\nFXMENODE DC   CL8' '              ENTRY NODE\nFXMNBR   DC   CL7' '              REQUEST NUMBER\nFXMESTOR DC   CL8' '              REQUESTOR'S ID\nFXMJOB   DC   CL8' '              JOB NAME (IF ENTERED VIA BATCH)\nFXMEDATE DC   CL8' '              DATE ENTERED\nFXMETIME DC   CL8' '              TIME ENTERED\nFXMCDATE DC   CL8' '              DATE COMPLETED\nFXMCTIME DC   CL8' '              TIME COMPLETED\nFXMTNODE DC   CL8' '              TRANSMITTING NODE\nFXMST    DC   CL2' '              STATUS\nFXMSTI   DC   CL25' '             STATUS (INTERPRETED)\nFXMUT    DC   CL2' '              UTILITY\nFXMFSIZE DC   CL9' '              FILE SIZE\nFXMODSN  DC   CL44' '             ORIGINAL DATA SET NAME\nFXMDDSN  DC   CL44' '             DATA SET NAME AT DESTINATION\nFXMWDSN  DC   CL44' '             WORK (STAGING DATA SET) NAME\nFXMIDSN  DC   CL44' '             SYSIN DATA SET NAME\nFXMSDSN  DC   CL44' '             SYSPRINT DATA SET NAME\nFXMOMEM  DC   CL08' '             ORIGINAL MEMBER NAME\nFXMDMEM  DC   CL08' '             MEMBER NAME AT DESTINATION\nFXMREPL  DC   CL03' '             REPLACE DATASET OR MEMBER FLAG\nFXMALIAS DC   CL03' '             TRANSMIT ALIASES\nFXMNDE   DC   CL03' '             NUMBER OF NODES\nFXMMSG   DC   CL72' '             MESSAGE\n         MEND\n./ ADD NAME=FXMVARS  0100-99056-99056-1500-00119-00119-00000-FX-REL1\n\n         MACRO\n         FXMVARS &GEN=\n         GBLA  &INTV,&MAXL,&MAXNDE,&MAXSZ,&TRSZ\n         GBLB  &CHFLAG,&PTRFLAG,&VINIT\n         GBLC  &AREA,&RACFC,&RACFE,&TROPT,&VGEN\n         GBLC  &ACB(20),&VDEFGBL(1000)\n         GBLC  &MSTRACC\n         GBLC  &DDEST\n&VGEN    SETC  '&GEN'\n         VDEF  NAME=SKEY,            DEFINE VARIABLE                   +\n               DATA=FXMKEY,          .. FIELD NAME IN DATA AREA        +\n               LENGTH=5,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=SREC,            DEFINE VARIABLE                   +\n               DATA=FXMREC,          .. FIELD NAME IN DATA AREA        +\n               LENGTH=5,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=SENODE,          DEFINE VARIABLE                   +\n               DATA=FXMENODE,        .. FIELD NAME IN DATA AREA        +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=SNBR,            DEFINE VARIABLE                   +\n               DATA=FXMNBR,          .. FIELD NAME IN DATA AREA        +\n               LENGTH=7,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=SESTOR,          DEFINE VARIABLE                   +\n               DATA=FXMESTOR,        .. FIELD NAME IN DATA AREA        +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=SJOB,            DEFINE VARIABLE                   +\n               DATA=FXMJOB,          .. FIELD NAME IN DATA AREA        +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=SEDATE,          DEFINE VARIABLE                   +\n               DATA=FXMEDATE,        .. FIELD NAME IN DATA AREA        +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=SETIME,          DEFINE VARIABLE                   +\n               DATA=FXMETIME,        .. FIELD NAME IN DATA AREA        +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=SCDATE,          DEFINE VARIABLE                   +\n               DATA=FXMCDATE,        .. FIELD NAME IN DATA AREA        +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=SCTIME,          DEFINE VARIABLE                   +\n               DATA=FXMCTIME,        .. FIELD NAME IN DATA AREA        +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=STNODE,          DEFINE VARIABLE                   +\n               DATA=FXMTNODE,        .. FIELD NAME IN DATA AREA        +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=ST,              DEFINE VARIABLE                   +\n               DATA=FXMST,           .. FIELD NAME IN DATA AREA        +\n               LENGTH=2,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=STI,             DEFINE VARIABLE                   +\n               DATA=FXMSTI,          .. FIELD NAME IN DATA AREA        +\n               LENGTH=25,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=SU,              DEFINE VARIABLE                   +\n               DATA=FXMUT,           .. FIELD NAME IN DATA AREA        +\n               LENGTH=2,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=SFSIZE,          DEFINE VARIABLE                   +\n               DATA=FXMFSIZE,        .. FIELD NAME IN DATA AREA        +\n               LENGTH=9,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=SODSN,           DEFINE VARIABLE                   +\n               DATA=FXMODSN,         .. FIELD NAME IN DATA AREA        +\n               LENGTH=44,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=SOMEM,           DEFINE VARIABLE                   +\n               DATA=FXMOMEM,         .. FIELD NAME IN DATA AREA        +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=SDDSN,           DEFINE VARIABLE                   +\n               DATA=FXMDDSN,         .. FIELD NAME IN DATA AREA        +\n               LENGTH=44,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=SDMEM,           DEFINE VARIABLE                   +\n               DATA=FXMDMEM,         .. FIELD NAME IN DATA AREA        +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=SWDSN,           DEFINE VARIABLE                   +\n               DATA=FXMWDSN,         .. FIELD NAME IN DATA AREA        +\n               LENGTH=44,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=SIDSN,           DEFINE VARIABLE                   +\n               DATA=FXMIDSN,         .. FIELD NAME IN DATA AREA        +\n               LENGTH=44,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=SSDSN,           DEFINE VARIABLE                   +\n               DATA=FXMSDSN,         .. FIELD NAME IN DATA AREA        +\n               LENGTH=44,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=SRP,             DEFINE VARIABLE                   +\n               DATA=FXMREPL,         .. FIELD NAME IN DATA AREA        +\n               LENGTH=3,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=SAL,             DEFINE VARIABLE                   +\n               DATA=FXMALIAS,        .. FIELD NAME IN DATA AREA        +\n               LENGTH=3,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=SND,             DEFINE VARIABLE                   +\n               DATA=FXMNDE,          .. FIELD NAME IN DATA AREA        +\n               LENGTH=3,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=SMSG,            DEFINE VARIABLE                   +\n               DATA=FXMMSG,          .. FIELD NAME IN DATA AREA        +\n               LENGTH=72,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=ZCMD,            DEFINE VARIABLE                   +\n               DATA=ZCMD,            .. FIELD NAME IN DATA AREA        +\n               LENGTH=80,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         MEND\n./ ADD NAME=FXNDATA  0100-99056-99056-1500-00012-00012-00000-FX-REL1\n\nLVLINE   DC   F'0'                LAST VISIBLE LINE\nVWIDTH   DC   F'0'                DYNAMIC AREA WIDTH\nVDEPTH   DC   F'0'                DYNAMIC AREA DEPTH\nVROW     DC   F'0'                DYNAMIC AREA ROW\nVCOL     DC   F'0'                DYNAMIC AREA COLUMN\nZSCROLLN DC   F'0'                NUMBER OF LINES TO SCROLL\nVTYPE    DC   CL8' '              DYNAMIC AREA TYPE\nZCMD     DC   CL80' '             COMMAND\nZSCROLLA DC   CL8' '              SCROLL AMOUNT\nZVERB    DC   CL8' '              SPF VERB\nNMSG     DC   CL80' '             MESSAGE AREA\n./ ADD NAME=FXNVARS  0100-99056-99056-1500-00051-00051-00000-FX-REL1\n\n         MACRO\n         FXNVARS &GEN=\n         GBLA  &INTV,&MAXL,&MAXNDE,&MAXSZ,&TRSZ\n         GBLB  &CHFLAG,&PTRFLAG,&VINIT\n         GBLC  &AREA,&RACFC,&RACFE,&TROPT,&VGEN\n         GBLC  &ACB(20),&VDEFGBL(1000)\n         GBLC  &MSTRACC\n         GBLC  &DDEST\n&VGEN    SETC  '&GEN'\n         VDEF  NAME=LVLINE,          DEFINE VARIABLE                   +\n               DATA=LVLINE,          .. FIELD NAME IN DATA AREA        +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=VCOL,            DEFINE VARIABLE                   +\n               DATA=VCOL,            .. FIELD NAME IN DATA AREA        +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=VDEPTH,          DEFINE VARIABLE                   +\n               DATA=VDEPTH,          .. FIELD NAME IN DATA AREA        +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=VROW,            DEFINE VARIABLE                   +\n               DATA=VROW,            .. FIELD NAME IN DATA AREA        +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=VTYPE,           DEFINE VARIABLE                   +\n               DATA=VTYPE,           .. FIELD NAME IN DATA AREA        +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=VWIDTH,          DEFINE VARIABLE                   +\n               DATA=VWIDTH,          .. FIELD NAME IN DATA AREA        +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=ZSCROLLA,        DEFINE VARIABLE                   +\n               DATA=ZSCROLLA,        .. FIELD NAME IN DATA AREA        +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=ZSCROLLN,        DEFINE VARIABLE                   +\n               DATA=ZSCROLLN,        .. FIELD NAME IN DATA AREA        +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=ZVERB,           DEFINE VARIABLE                   +\n               DATA=ZVERB,           .. FIELD NAME IN DATA AREA        +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=NMSG,            DEFINE VARIABLE                   +\n               DATA=NMSG,            .. FIELD NAME IN DATA AREA        +\n               LENGTH=80,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         MEND\n./ ADD NAME=FXOPT    0100-99056-99056-1500-00058-00058-00000-FX-REL1\n\n         MACRO\n         FXOPT &DEFDEST=,             DEFAULT DESTINATION              +\n               &INTERVL=6000,         VTAM CONTACT WAIT INTERVAL (SECS)+\n               &MAXSIZE=5000000,      DEFAULT MAX FILE SIZE            +\n               &MAXLINE=60,           LINES PER PAGE ON SYSOUT         +\n               &TRSIZE=500,           NUMBER OF TRACE TABLE ENTRIES    +\n               &MASTER=VSAM,          MASTER FILE ACCESS METHOD        +\n               &MAXNODE=15,           MAXIMUM NUMBER OF DESTINATIONS   +\n               &RACCLASS=,            RACF CLASS   (FOR USER AUTHORITY)+\n               &RACENT=,              RACF ENTITY  (FOR USER AUTHORITY)+\n               &TRACE=ON,             INTERNAL TRACE CONTROL           +\n               &UACB=                 SPECIFY USER INTERFACE ACB NAMES\n         GBLA  &INTV,&MAXL,&MAXNDE,&MAXSZ,&TRSZ\n         GBLB  &CHFLAG,&PTRFLAG,&VINIT\n         GBLC  &AREA,&RACFC,&RACFE,&TROPT,&VGEN\n         GBLC  &ACB(20),&VDEFGBL(1000)\n         GBLC  &MSTRACC\n         GBLC  &DDEST\n         LCLA  &INDX1\n         AIF   ('&MASTER' EQ 'BDAM').LBL0010\n         AIF   ('&MASTER' EQ 'VSAM').LBL0010\n         MNOTE 12,'INVALID MASTER FILE ORGANIZATION'\n         MEXIT\n.LBL0010 ANOP\n&MSTRACC SETC  '&MASTER'              SET MASTER FILE FORMATTER\n         AIF   (T'&DEFDEST EQ 'O').LBL0020\n&DDEST   SETC  '&DEFDEST'\n         AGO   .LBL0030\n.LBL0020 ANOP\n&DDEST   SETC  ' '\n.LBL0030 ANOP\n&INTV    SETA  &INTERVL\n&MAXSZ   SETA  &MAXSIZE\n&MAXL    SETA  &MAXLINE\n&TRSZ    SETA  &TRSIZE\n&MAXNDE  SETA  &MAXNODE\n&RACFC   SETC  '&RACCLASS'\n&RACFE   SETC  '&RACENT'\n&TROPT   SETC  '&TRACE'\n&INDX1   SETA  1\n.ACB00   ANOP\n&ACB(&INDX1)   SETC ' '\n         AIF   (&INDX1 EQ 20).ACB10\n&INDX1   SETA  &INDX1+1\n         AGO   .ACB00\n.ACB10   ANOP\n&INDX1   SETA  1\n.ACB20   ANOP\n         AIF   (T'&UACB(&INDX1) EQ 'O').ACB30\n&ACB(&INDX1)   SETC  '&UACB(&INDX1)'\n         AIF   (&INDX1 EQ N'&UACB).MEND\n&INDX1   SETA  &INDX1+1\n         AGO   .ACB20\n.ACB30 ANOP\n         MNOTE 12,'NULL ACB NAME NOT ALLOWED IN UACB LIST'\n.MEND    ANOP\n         MEND\n./ ADD NAME=FXPCOMM  0100-99056-99056-1500-00059-00059-00000-FX-REL1\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*          PURGE UTILITY COMMON DATA                                  *\n*                                                                     *\n*     This macro will generate either the 'common' module CSECT or    *\n*     a DSECT to map the 'common' module.  'Common' is used for       *\n*     constants and work areas that are required by several modules   *\n*     allowing some elimination of duplicated data and to allow       *\n*     inter-module communication.                                     *\n*                                                                     *\n*     The trace table code is also incorporated into the 'common'     *\n*     area.                                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         FXPCOMM &TYPE=\n         GBLA  &INTV,&MAXL,&MAXNDE,&MAXSZ,&TRSZ\n         GBLB  &CHFLAG,&PTRFLAG,&VINIT\n         GBLC  &AREA,&RACFC,&RACFE,&TROPT,&VGEN\n         GBLC  &ACB(20),&VDEFGBL(1000)\n         GBLC  &MSTRACC\n         GBLC  &DDEST\n         AIF   ('&TYPE' EQ 'CSECT').CSECT\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n         MNOTE 12,'INVALID TYPE'\n         MEXIT\n.CSECT   ANOP\nFXPCOMM  CSECT\nFXPCOMM  AMODE 31\nFXPCOMM  RMODE ANY\n         AGO   .NODSECT\n.DSECT   ANOP\nFXPCOMM  DSECT\n.NODSECT ANOP\n         COMMCOMM COMMNAME=FXPCOMM\n*---------------------------------------------------------------------*\n*                                                                     *\n*               MODULE ENTRY POINTS                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DC    CL8'FXPURGE '\nAMAIN    DC    A(0)                DSN VERIFICATION\n         DC    CL8'FXSMSTR '\nAMSTR    DC    A(0)                MASTER FILE I/O\n         DC    CL8'FXPCOMM'\nACOMM    DC    A(FXPCOMM)          COMMON MODULE\nCOMMEND  EQU   *\n         SPACE 2\n         COPY  TRENTRY\n*---------------------------------------------------------------------*\n*          EXTERNAL TRACE REQUEST BLOCK                               *\n*---------------------------------------------------------------------*\n         XTRRECD\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         FXPRFX TYPE=DSECT\n         MEND\n./ ADD NAME=FXPRFX   0100-99056-99056-1500-00057-00057-00000-FX-REL1\n\n.* ------------------------------------------------------------------ *\n.*                                                                    *\n.*       ALL MODULES START WITH A COMMON PREFIX SET OF INSTRUCTIONS   *\n.*       AND EYECATCHER.  THIS ALLOWS THE TRACE ROUTINE AND THE       *\n.*       ABEND EXITS TO DETERMINE WHICH MODULE IS IN CONTROL.         *\n.*                                                                    *\n.* ------------------------------------------------------------------ *\n         MACRO\n&NAME    FXPRFX &DESC,                                                 +\n               &TYPE=CSECT,                                            +\n               &COMM=FXSCOMM\n         AIF   ('&TYPE' EQ 'DSECT').L0010\n         AIF   (T'&DESC EQ 'O').ERR0010\n         AIF   (T'&NAME EQ 'O').ERR0020\nFX&NAME  CSECT\n         USING FX&NAME,R12                                              ASE00100\n         USING &COMM,R11                                                ASE00100\n         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS                 ASE00110\n         LR    R12,R15             LOAD PERMANENT BASE                  ASE00120\n         L     R10,COMMDXDA        WORK AREA ADDRESS (ABOVE THE LINE)\n         A     R10,DXDSTART        PLUS DISPLACEMENT TO OUR AREA\n         USING DXD&NAME,R10        DEFINE BASE\n         LR    R2,R13              SAVE OLD REGISTER SAVE AREA ADDRESS  ASE00130\n         LA    R13,DXDSAVE         POINT TO OUR SAVE AREA               ASE00140\n         ST    R13,8(R2)           CHAIN FORWARD                        ASE00150\n         ST    R2,4(R13)           CHAIN BACKWARD                       ASE00160\n         B     @@000001            BYPASS ID/TIME/DESCRIPTION\nMODID    DC    CL8'FX&NAME'        MODULE NAME\n         DC    CL8'&SYSDATE'       DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'       TIME OF ASSEMBLY\n         DC    C&DESC\n@@000001 DS    0H\n         MEXIT\n.L0010   ANOP\nMODPRFX  DSECT\n         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS                 ASE00110\n         LR    R12,R15             LOAD PERMANENT BASE                  ASE00120\n         L     R10,COMMDXDA        WORK AREA ADDRESS\n         A     R10,0               PLUS DISPLACEMENT TO OUR AREA\n         LR    R2,R13              SAVE OLD REGISTER SAVE AREA ADDRESS  ASE00130\n         LA    R13,0               POINT TO SAVE AREA                   ASE00140\n         ST    R13,8(R2)           CHAIN FORWARD                        ASE00150\n         ST    R2,4(R13)           CHAIN BACKWARD                       ASE00160\n         B     0(R0)               BRANCH AROUND MOD NAME/TIME/DESC\nPFXMODNM DS    CL8                 MODULE NAME\nPFXMODDT DS    CL8                 ASSEMBLY DATE\nPFXMODTM DS    CL6                 ASSEMBLY TIME\nPFXMODDS DS    C                   DESCRIPTION\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'DESCRIPTION IS REQUIRED'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'CSECT NAME IS REQUIRED'\n         MEXIT\n         MEND\n./ ADD NAME=FXSCOMM  0100-99056-99056-1500-00195-00195-00000-FX-REL1\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*          COMMON AREA MAPPING MACRO                                  *\n*                                                                     *\n*     This macro will generate either the 'common' module CSECT or    *\n*     a DSECT to map the 'common' module.  'Common' is used for       *\n*     constants and work areas that are required by several modules   *\n*     allowing some elimination of duplicated data and to allow       *\n*     inter-module communication.                                     *\n*                                                                     *\n*     The trace table code is also incorporated into the 'common'     *\n*     area.                                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         FXSCOMM &TYPE=\n         GBLA  &INTV,&MAXL,&MAXNDE,&MAXSZ,&TRSZ\n         GBLB  &CHFLAG,&PTRFLAG,&VINIT\n         GBLC  &AREA,&RACFC,&RACFE,&TROPT,&VGEN\n         GBLC  &ACB(20),&VDEFGBL(1000)\n         GBLC  &MSTRACC\n         GBLC  &DDEST\n         AIF   ('&TYPE' EQ 'CSECT').CSECT\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n         MNOTE 12,'INVALID TYPE'\n         MEXIT\n.CSECT   ANOP\nFXSCOMM  CSECT\nFXSCOMM  AMODE 31\nFXSCOMM  RMODE ANY\n         AGO   .NODSECT\n.DSECT   ANOP\nFXSCOMM  DSECT\n.NODSECT ANOP\n         COMMCOMM COMMNAME=FXSCOMM\n*---------------------------------------------------------------------*\n*                                                                     *\n*        31-BIT MODULE ENTRY POINTS                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DC    CL8'FXSATTN'\nAATTN    DC    A(0)                VTAM ATTN EXIT ENTRY POINT\n         DC    CL8'FXSCOMM'\nACOMM    DC    A(FXSCOMM)          COMMON MODULE\n         DC    CL8'FXSCOPY'\nACOPY    DC    A(0)                IEBCOPY SUBTASK MODULE ENTRY POINT\n         DC    CL8'FXSCONS'\nACONS    DC    A(0)                CONSOLE COMMUNICATION\n         DC    CL8'FXSCONV'\nACONV    DC    A(0)                ADD/DELETE CONVBLOK'S\n         DC    CL8'FXSDAIR'\nADAIR    DC    A(0)                DAIR MODULE ENTRY POINT\n         DC    CL8'FXSDSS'\nADSS     DC    A(0)                DF/DSS SUBTASK MODULE ENTRY POINT\n         DC    CL8'FXLERAD'\nALERAD   DC    A(0)                VTAM LERAD EXIT ENTRY POINT\n         DC    CL8'FXSLOSS'\nALOSS    DC    A(0)                PROCESS CLEAN-UP AFTER 'VTAM LOSS'ES\n         DC    CL8'FXSMAIN '\nAMAIN    DC    A(0)                MAINLINE MODULE ENTRY POINT\n         DC    CL8'FXSMSTR '\nAMSTR    DC    A(0)                MASTER FILE I/O SUBTASK MODULE\n         DC    CL8'FXSPRTQ'\nAPRTQ    DC    A(0)                PRINT QUEUING SUBROUTINE ENTRY POINT\n         DC    CL8'FXSPRTS'\nAPRTS    DC    A(0)                PRINT SUBTASK ENTRY POINT\n         DC    CL8'FXSRECV'\nARECV    DC    A(0)                FILE RECEIVE ENTRY POINT\n         DC    CL8'FXSRPLX'\nARPLX    DC    A(0)                RPL EXIT ADDRESS\n         DC    CL8'FXSSEND'\nASEND    DC    A(0)                FILE SEND ENTRY POINT\n         DC    CL8'FXSSESS'\nASESS    DC    A(0)                SESSBLOK ADD/DELETE ENTRY POINT\n         DC    CL8'FXSSTGE'\nASTGE    DC    A(0)                STAGE/DE-STAGE ENTRY POINT\n         DC    CL8'FXSTIMER'\nATIMER   DC    A(0)                TIMER EXIT ENTRY POINT\n         DC    CL8'FXSVTAM'\nAVTAM    DC    A(0)                VTAM COMMUNICATION\n         DC    CL8'FXSVSUB'\nAVSUB    DC    A(0)                VTAM SUB-FUNCTIONS\n         DC    CL8'FXSVTOC'\nAVTOC    DC    A(0)                VTOC FUNCTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*        USER FUNCTION PROCESSOR ENTRY POINTS                         *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMUMOD DS    0A\n         DC    CL8'FXSUID'         DETERMINE USER ID AUTHORITY\nAUID     DC    A(0)\n         DC    CL8'FXSREQE'        TRANSMISSION REQUEST ENTRY\nAREQE    DC    A(0)\n         DC    CL8'FXSREQI'        TRANSMISSION REQUEST INQUIRY\nAREQI    DC    A(0)\n         DC    CL8'FXSSHUT'        FX STARTED TASK SHUTDOWN\nASHUT    DC    A(0)\n*---------------------------------------------------------------------*\n*                                                                     *\n*        24-BIT MODULE ENTRY POINT                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DC    CL8'FXS24'\nA24      DC    A(0)                24-BIT FUNCTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*          GLOBAL DATA                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMACB  DC    A(0)                ACB'S ADDRESS\nCOMMXLST DC    A(0)                EXIT LIST'S ADDRESS\nCOMMRSTR DC    A(0)                RESTORE CONTROL BLOCK CHAIN\nCOMMSTGE DC    A(0)                STAGING VOLUME BLOCK CHAIN\nCOMMSESS DC    A(0)                VTAM SESSION BLOCK CHAIN\nCOMMDEST DC    A(0)                DESTINATION NAMES CHAIN\nCOMMXUSR DC    A(0)                EXTERNAL USERS CHAIN\nCOMMTECB DC    F'0'                ECB POSTED BY TIMER EXIT\nCOMMVECB DC    F'0'                ECB POSTED BY ATTN EXIT\nCOMMCECB DC    F'0'                ADDRESS OF COMM ECB (POSTED BY MVS)\nCOMMMAX  DC    F'&MAXSZ'           MAXIMUM FILE SIZE (DEFAULT 5 MEG)\nCOMMMEM  DC    F'0'                PDS MEMBER STAGE SPACE SIZE IN BYTES\nCOMMINTV DC    A(&INTV*100)        TIME BETWEEN CONTACT ATTEMPTS\nCOMMPREL DC    H'0'                LENGTH OF STAGING DATASET PREFIX\nCOMMAPLL DC    AL1(L'COMMAPLN)     LENGTH OF APPL ID\nCOMMAPLN DC    CL8' '              OUR VTAM APPL ID\nCOMMPREF DC    CL24' '             STAGING DATASET PREFIX\nCOMMSYSN DC    CL20' '             SYSTEM NAME\nCOMMSNPC DC    C'O'                SNAPSHOT SYSOUT CLASS\nCOMMMAXL DC    PL3'&MAXL'          LINES PER PAGE ON SYSOUT DATASETS\nCOMMDD#  DC    PL4'0'              NUMBER OF LAST DD ALLOCATED\nCOMMFLAG DC    X'00'               GLOBAL FLAGS\n$ABEND   EQU   X'80'               .. ABEND AT END OF JOB\n$ABORT   EQU   X'40'               .. SERIOUS ERROR, ABORT\n$COMMSTR EQU   X'20'               .. MASTER FILE I/O SUBTASK ACTIVE\n$COMMPRT EQU   X'10'               .. PRINT SUBTASK ACTIVE\n$COMMDSS EQU   X'08'               .. DF/DSS SUBTASK ACTIVE\n$COMMCPY EQU   X'04'               .. IEBCOPY SUBTASK ACTIVE\nCOMMEOJ  DC    X'00'               EOJ FLAGS\n$EOJ1    EQU   X'80'               .. EOJ PHASE 1 (NO NEW DUMP/RESTORES+\n                                                   WILL BE SCHEDULED TO+\n                                                   DF/DSS OR IEBCOPY   +\n                                                   SUBTASKS)\n$EOJ2    EQU   X'40'               .. EOJ PHASE 2  (ALL VTAM SESSIONS  +\n                                                    AND DUMP/RESTORE   +\n                                                    ACTIVITY COMPLETED)\n$EOJ3    EQU   X'20'               .. EOJ PHASE 3 (MODULES THAT HAVE   +\n                                                   AREAS TO FREEMAIN,  +\n                                                   RESOURCES TO RELEASE+\n                                                   ARE CALLED AT THIS  +\n                                                   TIME)\n$EOJ4    EQU   X'10'               .. EOJ PHASE 4 (MILLER TIME)\nCOMMBLKS DC    CL140' '            CONSTANT\nCOMMIOSZ EQU   65548               65K + 8\n*---------------------------------------------------------------------*\n*                                                                     *\n*          DF/DSS dump/restore subtask control                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMDSS  DC    A(0)                DF/DSS SUBTASK'S TCB ADDRESS\nDSSREQ   DC    A(0)                DF/DSS SUBTASK REQUEST\nDSSTERM  DC    A(0)                DF/DSS SUBTASK TERMINATION ECB\nDSSWORK  DC    A(0)                DF/DSS WORK TO DO ECB\nDSSECB   DC    A(0)                DF/DSS WORK COMPLETED ECB\n*---------------------------------------------------------------------*\n*                                                                     *\n*          IEBCOPY dump/restore subtask control                       *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMCOPY DC    A(0)                IEBCOPY SUBTASK'S TCB ADDRESS\nCOPYREQ  DC    A(0)                IEBCOPY SUBTASK REQUEST\nCOPYTERM DC    A(0)                IEBCOPY SUBTASK TERMINATION ECB\nCOPYWORK DC    A(0)                IEBCOPY WORK TO DO ECB\nCOPYECB  DC    A(0)                IEBCOPY WORK COMPLETED ECB\n*---------------------------------------------------------------------*\n*                                                                     *\n*          PRINT SUBTASK CONTROL                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMPRT  DC    A(0)                PRINT SUBTASK'S TCB ADDRESS\nPRTREQ   DC    A(0)                PRINT SUBTASK REQUEST QUEUE\nPRTTERM  DC    A(0)                PRINT SUBTASK TERMINATION ECB\nPRTWORK  DC    A(0)                PRINT WORK TO DO ECB\nCOMMEND  EQU   *\n         SPACE 2\n         COPY  TRENTRY\n         FXPRFX TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*          EXTERNAL TRACE REQUEST BLOCK                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         XTRRECD\n         MEND\n./ ADD NAME=FXTCOMM  0100-99056-99056-1500-00164-00164-00000-FX-REL1\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*          TSO COMMON AREA MAPPING MACRO                              *\n*                                                                     *\n*     This macro will generate either the 'common' module CSECT or    *\n*     a DSECT to map the 'common' module.  'Common' is used for       *\n*     constants and work areas that are required by several modules   *\n*     allowing some elimination of duplicated data and to allow       *\n*     inter-module communication.                                     *\n*                                                                     *\n*     The trace table code is also incorporated into the 'common'     *\n*     area.                                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         FXTCOMM &TYPE=\n         GBLA  &INTV,&MAXL,&MAXNDE,&MAXSZ,&TRSZ\n         GBLB  &CHFLAG,&PTRFLAG,&VINIT\n         GBLC  &AREA,&RACFC,&RACFE,&TROPT,&VGEN\n         GBLC  &ACB(20),&VDEFGBL(1000)\n         GBLC  &MSTRACC\n         GBLC  &DDEST\n         AIF   ('&TYPE' EQ 'CSECT').CSECT\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n         MNOTE 12,'INVALID TYPE'\n         MEXIT\n.CSECT   ANOP\nFXTCOMM  CSECT\nFXTCOMM  AMODE 31\nFXTCOMM  RMODE ANY\n         AGO   .NODSECT\n.DSECT   ANOP\nFXTCOMM  DSECT\n.NODSECT ANOP\n         COMMCOMM COMMNAME=FXTCOMM\n*---------------------------------------------------------------------*\n*                                                                     *\n*        31-BIT MODULE ENTRY POINTS                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DC    CL8'FXDSNVER'\nADSNVER  DC    A(0)                DSN VERIFICATION\n         DC    CL8'FXMEMVER'\nAMEMVER  DC    A(0)                MEMBER NAME VERFICATION\n         DC    CL8'FXTCOMM'\nACOMM    DC    A(FXTCOMM)          COMMON MODULE\n         DC    CL8'FXTINIT'\nATINIT   DC    A(0)                TSO INITIALIZATION MODULE\n         DC    CL8'FXTNODE'\nATNODE   DC    A(0)                NODE DISPLAY\n         DC    CL8'FXTMAIN'\nATMAIN   DC    A(0)                TSO MAINLINE MODULE\n         DC    CL8'FXTREQE'\nATREQE   DC    A(0)                REQUEST ENTRY PROCESSOR\n         DC    CL8'FXTREQI'\nATREQI   DC    A(0)                REQUEST INQUIRY PROCESSOR\n         DC    CL8'FXTSNAP'\nATSNAP   DC    A(0)                FX STARTED TASK SNAPSHOT PROCESSOR\n         DC    CL8'FXTSHUT'\nATSHUT   DC    A(0)                FX STARTED TASK SHUTDOWN PROCESSOR\n         DC    CL8'FXTTERM'\nATTERM   DC    A(0)                TSO TERMINATION MODULE\n         DC    CL8'FXTVTAM'\nATVTAM   DC    A(0)                TSO VTAM INTERFACE\n         DC    CL8'FXTVAR '\nATVAR    DC    A(0)                SPF VARIABLE DEFINE/DELETE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        24-BIT MODULE ENTRY POINTS                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DC    CL8'FX24T  '\nA24      DC    A(0)                24-BIT MODULE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SPF INTEFACE ENTRY POINT                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DC    CL8'ISPLINK'\nAISPLINK DC    A(0)                SPF INTERFACE ENTRY POINT\n*---------------------------------------------------------------------*\n*                                                                     *\n*          GLOBAL DATA                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMACB  DC    A(0)                ACB'S ADDRESS\nCOMMACBL DC    F'0'                ACB'S LENGTH\nCOMMRPL  DC    A(0)                RPL'S ADDRESS\nCOMMRPLL DC    F'0'                RPL'S LENGTH\nCOMMRPLX DC    A(0)                RPL EXTENSION'S ADDRESS\nCOMMRPXL DC    F'0'                RPL EXTENSION'S LENGTH\nCOMMNIB  DC    A(0)                NIB'S ADDRESS\nCOMMNIBL DC    F'0'                NIB'S LENGTH\nCOMMXLST DC    A(0)                EXLST'S ADDRESS\nCOMMXLSL DC    F'0'                EXLST'S LENGTH\nCOMMIOA  DC    A(0)                I/O AREA ADDRESS\nCOMMAPLL DC    AL1(8)              APPLID'S LENGTH\nCOMMAPLN DC    CL8' '              APPLID\nCOMMFX   DC    CL8' '              FX STC'S APPLID\nCOMMCID  DC    XL4'00'             CONVERSATION ID\nCOMMUATH DC    X'00'               USER'S AUTHORITY LEVEL\n$COMMUS1 EQU   X'01'               .. GENERAL USER\n$COMMUS2 EQU   X'02'               .. OPERATOR USER\n$COMMUS3 EQU   X'03'               .. ADMINISTRATOR\n$COMMUS4 EQU   X'04'               .. MASTER/BLASTER USER\nCOMMFLAG DC    X'00'               GLOBAL FLAGS\n$ABEND   EQU   X'80'               .. ABEND AT END OF JOB\n$ABORT   EQU   X'40'               .. SERIOUS ERROR, ABORT\n$VDEF    EQU   X'20'               .. VDEFINE'S PERFORMED\n$ACBOPEN EQU   X'10'               .. ACB IS OPEN\n$SESSALO EQU   X'08'               .. SESSION ALLOCATED\n$SHUT    EQU   X'04'               .. SHUTDOWN FUNCTION USED\nCOMMPANL DC    CL8' '              PANEL NAME\nCOMMRC   DC    X'00'               RETURN CODE\nCOMMBLKS DC    CL80' '\nCOMMIOSZ EQU   32776               32K + 8\n*\n* Any fields that are defined as SPF variables must be below COMMSYSN *\n*\nCOMMSYSN DC    CL20' '             FX SYSTEM'S NAME\nCOMMUID  DC    CL8' '              USER'S ID\nCOMMFNC  DS    CL1                 MENU FUNCTION CODE\nCOMMENDE DS    CL8                 NODE WHERE REQUEST WAS ENTERED\nCOMMNBR  DS    CL7                 REQUEST NUMBER\nCOMMRID  DS    CL8                 REQUESTOR'S ID\nCOMMJOB  DS    CL8                 REQUEST JOB NAME IF VIA BATCH\nCOMMEDTE DS    CL8                 DATE REQUEST WAS ENTERED\nCOMMETME DS    CL8                 TIME REQUEST WAS ENTERED\nCOMMCDTE DS    CL8                 DATE REQUEST WAS COMPLETED\nCOMMCTME DS    CL8                 TIME REQUEST WAS COMPLETED\nCOMMTNDE DS    CL8                 TRANSMITTING NODE\nCOMMSTAT DS    CL25                REQUEST'S STATUS\nCOMMODSN DS    CL44                ORIGINAL DATASET'S NAME\nCOMMOMEM DS    CL8                 ORIGINAL MEMBER NAME\nCOMMDDSN DS    CL44                NEW NAME AT DESTINATION\nCOMMDMEM DS    CL8                 MEMBER NAME AT DESTINATION\nCOMMWDSN DS    CL44                STAGING DATASET'S NAME\nCOMMIDSN DS    CL44                DF/DSS SYSIN DATASET'S NAME\nCOMMSDSN DS    CL44                DF/DSS SYSPRINT'S DATASET NAME\nCOMMREPL DS    CL03                REPLACE INDICATOR\nCOMMALAS DS    CL03                ALIAS INDICATOR\n         SPACE 1\nCOMMMSG  DS    0CL70               MESSAGE\nCOMMMSGI DS    CL11                .. MESSAGE ID\nCOMMMSGT DS    CL59                .. MESSAGE TEXT\n         SPACE 1\nCOMMZCMD DS    CL80                SPF COMMAND AREA\nCOMMDID  DS    CL8                 DATASET DATA ID (LMINIT)\n         VDEF  BASE=COMMSYSN\nFXTVTBLE DS    0C\n         FXTVARS GEN=YES\nCOMMEND  EQU   *\n         SPACE 2\n         COPY  TRENTRY\n*---------------------------------------------------------------------*\n*          EXTERNAL TRACE REQUEST BLOCK                               *\n*---------------------------------------------------------------------*\n         XTRRECD\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         FXPRFX TYPE=DSECT\n         MEND\n./ ADD NAME=FXTVARS  0100-99056-99056-1500-00115-00115-00000-FX-REL1\n\n         MACRO\n         FXTVARS &GEN=\n         GBLA  &INTV,&MAXL,&MAXNDE,&MAXSZ,&TRSZ\n         GBLB  &CHFLAG,&PTRFLAG,&VINIT\n         GBLC  &AREA,&RACFC,&RACFE,&TROPT,&VGEN\n         GBLC  &ACB(20),&VDEFGBL(1000)\n         GBLC  &MSTRACC\n         GBLC  &DDEST\n&VGEN    SETC  '&GEN'\n         VDEF  NAME=PSYSN,           DEFINE VARIABLE                   +\n               DATA=COMMSYSN,        .. FIELD NAME IN FXTCOMM          +\n               LENGTH=20,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PUID,            DEFINE VARIABLE                   +\n               DATA=COMMUID,         .. FIELD NAME IN FXTCOMM          +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PFNC,            DEFINE VARIABLE                   +\n               DATA=COMMFNC,         .. FIELD NAME IN FXTCOMM          +\n               LENGTH=1,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PENODE,          DEFINE VARIABLE                   +\n               DATA=COMMENDE,        .. FIELD NAME IN FXTCOMM          +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PNBR,            DEFINE VARIABLE                   +\n               DATA=COMMNBR,         .. FIELD NAME IN FXTCOMM          +\n               LENGTH=7,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PRID,            DEFINE VARIABLE                   +\n               DATA=COMMRID,         .. FIELD NAME IN FXTCOMM          +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PJOB,            DEFINE VARIABLE                   +\n               DATA=COMMJOB,         .. FIELD NAME IN FXTCOMM          +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PEDATE,          DEFINE VARIABLE                   +\n               DATA=COMMEDTE,        .. FIELD NAME IN FXTCOMM          +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PETIME,          DEFINE VARIABLE                   +\n               DATA=COMMETME,        .. FIELD NAME IN FXTCOMM          +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PCDATE,          DEFINE VARIABLE                   +\n               DATA=COMMCDTE,        .. FIELD NAME IN FXTCOMM          +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PCTIME,          DEFINE VARIABLE                   +\n               DATA=COMMCTME,        .. FIELD NAME IN FXTCOMM          +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PTNODE,          DEFINE VARIABLE                   +\n               DATA=COMMTNDE,        .. FIELD NAME IN FXTCOMM          +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PSTAT,           DEFINE VARIABLE                   +\n               DATA=COMMSTAT,        .. FIELD NAME IN FXTCOMM          +\n               LENGTH=25,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PODSN,           DEFINE VARIABLE                   +\n               DATA=COMMODSN,        .. FIELD NAME IN FXTCOMM          +\n               LENGTH=44,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=POMEM,           DEFINE VARIABLE                   +\n               DATA=COMMOMEM,        .. FIELD NAME IN FXTCOMM          +\n               LENGTH=08,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PDDSN,           DEFINE VARIABLE                   +\n               DATA=COMMDDSN,        .. FIELD NAME IN FXTCOMM          +\n               LENGTH=44,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PDMEM,           DEFINE VARIABLE                   +\n               DATA=COMMDMEM,        .. FIELD NAME IN FXTCOMM          +\n               LENGTH=08,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PWDSN,           DEFINE VARIABLE                   +\n               DATA=COMMWDSN,        .. FIELD NAME IN FXTCOMM          +\n               LENGTH=44,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PIDSN,           DEFINE VARIABLE                   +\n               DATA=COMMIDSN,        .. FIELD NAME IN FXTCOMM          +\n               LENGTH=44,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PSDSN,           DEFINE VARIABLE                   +\n               DATA=COMMSDSN,        .. FIELD NAME IN FXTCOMM          +\n               LENGTH=44,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PREPL,           DEFINE VARIABLE                   +\n               DATA=COMMREPL,        .. FIELD NAME IN FXTCOMM          +\n               LENGTH=03,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PALAS,           DEFINE VARIABLE                   +\n               DATA=COMMALAS,        .. FIELD NAME IN FXTCOMM          +\n               LENGTH=03,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PMSGI,           DEFINE VARIABLE                   +\n               DATA=COMMMSGI,        .. FIELD NAME IN FXTCOMM          +\n               LENGTH=11,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PMSGT,           DEFINE VARIABLE                   +\n               DATA=COMMMSGT,        .. FIELD NAME IN FXTCOMM          +\n               LENGTH=59,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=DID,             DEFINE VARIABLE                   +\n               DATA=COMMDID,         .. FIELD NAME IN FXTCOMM          +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=ZCMD,            DEFINE VARIABLE                   +\n               DATA=COMMZCMD,        .. FIELD NAME IN FXTCOMM          +\n               LENGTH=80,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         MEND\n./ ADD NAME=FX24     0100-99056-99056-1500-00008-00008-00000-FX-REL1\n\n         MACRO\n         FX24  &CMD\n         MVI   CMD24,&CMD           SET COMMAND\n         LA    R1,FX24PRM           24-BIT PARM LIST'S ADDRESS\n         L     R15,A24              24-BIT ENTRY POINT\n         BALR  R14,R15              LINK TO 24-BIT MODULE\n         MEND\n./ ADD NAME=FX24PRM  0100-99056-99056-1500-00053-00053-00000-FX-REL1\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*          24-bit functions request/status block                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         FX24PRM &DSECT=\n         AIF   ('&DSECT' EQ 'NO').LBL0010\n         AIF   ('&DSECT' EQ 'YES').LBL0020\n         MNOTE 12,'INVALID TYPE'\n         MEXIT\n.LBL0010 ANOP\nFX24PRM  DS     0A\n         AGO   .LBL0030\n.LBL0020 ANOP\nFX24PRM  DSECT\n.LBL0030 ANOP\nSAVE24A  DC    15F'0'           SAVE AREA FOR CALLER'S REGISTERS\nSAVE24B  DC    18F'0'           SAVE AREA FOR FX24\nDCB24    DC    A(0)             DCB ADDRESS\nDECB24   DC    A(0)             DECB ADDRESS\nEOF24    DC    A(0)             EOF ROUTINE ADDRESS\nIOA24    DC    A(0)             INPUT/OUTPUT AREA ADDRESS\nPARM24   DC    A(0)             PARM LIST ADDRESS FOR 'CALL'/ 'OBTAIN'\nEP24     DC    A(0)             ROUTINE ENTRY POINT FOR 'CALL'\nCAMLST24 DC    4A(0)            CAMLST WORK AREA\nTTR24    DC    F'0'             TTR FROM POINT (MUST BE FULLWORD ALIGN)\nCMD24    DC    X'00'            COMMAND\n$CALL    EQU   X'01'            .. CALL\n$CAMLSTA EQU   X'02'            .. OBTAIN WITH READ-BY-ADDRESS CAMLST\n$CAMLSTN EQU   X'03'            .. OBTAIN WITH READ-BY-DSN CAMLST\n$CHECK   EQU   X'04'            .. CHECK\n$CLOSE   EQU   X'05'            .. CLOSE FILE\n$GETL    EQU   X'06'            .. GET (LOCATE MODE)\n$GETM    EQU   X'07'            .. GET (MOVE MODE)\n$LOCATE  EQU   X'08'            .. ISSUE LOCATE BY DATA SET NAME\n$NOTE    EQU   X'09'            .. OPEN FILE INPUT\n$OPENI   EQU   X'0A'            .. OPEN FILE INPUT\n$OPENO   EQU   X'0B'            .. OPEN FILE OUTPUT\n$POINT   EQU   X'0C'            .. POINT\n$PUT     EQU   X'0D'            .. PUT\n$READ    EQU   X'0E'            .. BSAM READ\n$WRITE   EQU   X'0F'            .. BSAM WRITE\nLRECL24  DC    XL2'0000'        RECORD SIZE (FOR BSAM WRITES)\nCCHHR24  DC    XL5'00'          CYLINDER/HEAD/RECORD NUMBER FOR CAMLST\nVOL24    DC    CL6' '           VOLSER FOR CAMLST\nVTOC24   DS    0CL140           RETURNED VTOC DATA FROM CAMLST/OBTAIN\nDSN24    DC    CL44' '          .. DATASET NAME\n         DC    CL96' '          .. REMAINING VTOC DATA\nIO24     DC    CL80' '          I/O AREA FOR OUTPUT\nFX24L    EQU   *-FX24PRM        PARAMETER BLOCK LENGTH\n         MEND\n./ ADD NAME=GENACB   0100-99056-99056-1500-00018-00018-00000-FX-REL1\n\n         MACRO\n         GENACB\n         GBLA  &INTV,&MAXL,&MAXNDE,&MAXSZ,&TRSZ\n         GBLB  &CHFLAG,&PTRFLAG,&VINIT\n         GBLC  &AREA,&RACFC,&RACFE,&TROPT,&VGEN\n         GBLC  &ACB(20),&VDEFGBL(1000)\n         LCLA  &INDX\n&INDX    SETA  1\n.ACB10   ANOP\n         AIF   (&INDX GT 20).ACB20\n         AIF   ('&ACB(&INDX)' EQ ' ').ACB20\n         DC    CL8'&ACB(&INDX)'\n&INDX    SETA  &INDX+1\n         AGO   .ACB10\n.ACB20   ANOP\n         DC    8X'FF'\n         MEND\n./ ADD NAME=ITRACE   0100-99056-99056-1500-00078-00078-00000-FX-REL1\n\n.* ------------------------------------------------------------------*\n.*                                                                   *\n.*                        TRACE MACRO                                *\n.*                                                                   *\n.*       THE TRACE FUNCTION ALWAYS CAPTURES THE CSECT NAME (TAKEN    *\n.*       FROM THE MODULE PREFIX DATA) AND A TRACE ID (SPECIFIED ON   *\n.*       THIS MACRO OR \"**NOID**\" IF THE ID PARAMETER IS OMITTED.    *\n.*                                                                   *\n.*       ONE OR TWO DATA ELEMENTS (8 BYTES EACH) MAY BE CAPTURED AT  *\n.*       ANY TRACE POINT.  THE DATA TO BE CAPTURED MAY BE SPECIFIED  *\n.*       IN EITHER OF TWO WAYS: DATA1 OR RDATA1 AND DATA2 OR RDATA2. *\n.*       DATA1 AND RDATA1 ARE MUTUALLY EXCLUSIVE AS ARE DATA2 AND    *\n.*       RDATA2.  DATA1 AND DATA2 SPECIFY THE ADDRESS OF DATA TO BE  *\n.*       CAPTURED, RDATA1 AND RDATA2 SPECIFY A REGISTER WHOSE        *\n.*       CONTENTS ARE TO BE CAPTURED.                                *\n.*                                                                   *\n.*       FOR EXAMPLE:                                                *\n.*                                                                   *\n.*                 ITRACE ID=POINTA,DATA1=VALUE1,RDATA2=R4           *\n.*                                                                   *\n.*          IN THIS CASE THE TRACE ENTRY WOULD INCLUDE THE CSECT     *\n.*          NAME, THE ID DATA \"POINTA\", 8 BYTES OF DATA BEGINNING    *\n.*          AT VALUE1'S ADDRESS AND THE CONTENTS OF REGISTER 4.      *\n.*                                                                   *\n.* ------------------------------------------------------------------*\n         MACRO\n&NAME    ITRACE &ID=,&DATA1=,&DATA2=,&RDATA1=,&RDATA2=\n         GBLA  &INTV,&MAXL,&MAXNDE,&MAXSZ,&TRSZ\n         GBLB  &CHFLAG,&PTRFLAG,&VINIT\n         GBLC  &AREA,&RACFC,&RACFE,&TROPT,&VGEN\n         GBLC  &ACB(20),&VDEFGBL(1000)\n         GBLC  &MSTRACC\n         GBLC  &DDEST\n         AIF   (T'&DATA1 NE 'O' AND T'&RDATA1 NE 'O').ERR0010\n         AIF   (T'&DATA2 NE 'O' AND T'&RDATA2 NE 'O').ERR0020\n         AIF   ('&TROPT' EQ 'OFF').MEXIT\n         AIF   ('&SYSPARM' EQ 'NOTRACE').MEXIT\n         AIF   (T'&DATA1 EQ 'O').DATA020\n         AIF   ('&DATA1'(1,1) EQ '(').DATA010\n         LA    R14,&DATA1            DATA ADDRESS\n         MVC   TRDATA1,0(R14)        MOVE DATA\n         AGO   .DATA030\n.DATA010 ANOP\n         MVC   TRDATA1,0&DATA1       MOVE DATA\n         AGO   .DATA030\n.DATA020 ANOP\n         AIF   (T'&RDATA1 EQ 'O').DATA030\n         STCM  &RDATA1,15,TRDATA1    SAVE REGISTER CONTENTS\n.DATA030 ANOP\n         AIF   (T'&DATA2 EQ 'O').DATA050\n         AIF   ('&DATA2'(1,1) EQ '(').DATA040\n         LA    R14,&DATA2            DATA ADDRESS\n         MVC   TRDATA2,0(R14)        MOVE DATA\n         AGO   .DATA060\n.DATA040 ANOP\n         MVC   TRDATA2,0&DATA2       MOVE DATA\n         AGO   .DATA060\n.DATA050 ANOP\n         AIF   (T'&RDATA2 EQ 'O').DATA060\n         STCM  &RDATA2,15,TRDATA2    SAVE REGISTER CONTENTS\n.DATA060 ANOP\n         BAL   R14,TRACE000          ENTER TRACE ROUTINE\n         AIF      (T'&ID EQ 'O').NOID\n&NAME    DC    CL8'&ID'              TRACE ID\n         AGO   .ID\n.NOID    ANOP\n&NAME    DC    CL8'**NOID**'\n.ID      ANOP\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'DATA1 AND RDATA1 ARE MUTUALLY EXCLUSIVE'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'DATA2 AND RDATA2 ARE MUTUALLY EXCLUSIVE'\n.MEXIT   ANOP\n         MEXIT\n         MEND\n./ ADD NAME=MACGBL   0100-99056-99056-1500-00007-00007-00000-FX-REL1\n\n         GBLA  &INTV,&MAXL,&MAXNDE,&MAXSZ,&TRSZ\n         GBLB  &CHFLAG,&PTRFLAG,&VINIT\n         GBLC  &AREA,&RACFC,&RACFE,&TROPT,&VGEN\n         GBLC  &ACB(20),&VDEFGBL(1000)\n         GBLC  &MSTRACC\n         GBLC  &DDEST\n./ ADD NAME=MEMREQ   0100-99056-99056-1500-00020-00020-00000-FX-REL1\n\n         MACRO\n         MEMREQ &DSECT=YES\n         AIF   ('&DSECT' EQ 'YES').DSECT00\n         AIF   ('&DSECT' EQ 'NO').CSECT00\n         MNOTE 12,'''DSECT'' IS INVALID, MUST BE ''YES'' OR ''NO'' '\n         MEXIT\n.DSECT00 ANOP\nMEMREQ   DSECT\n         AGO   .COMM\n.CSECT00 ANOP\nMEMREQ   DS     0A\n.COMM    ANOP\nMEMADDR  DS    A                  MEMBER NAME ADDRESS\nMEMSTAT  DS    X                  STATUS\n$MEMOK   EQU   X'00'              .. MEMBER NAME IS VALID\n$MEMBAD  EQU   X'01'              .. MEMBER NAME IS NOT VALID\nMEMMSG   DS    CL71\nMEMREQL  EQU   *-MEMREQ\n         MEND\n./ ADD NAME=MINIT    0100-99056-99056-1500-00044-00044-00000-FX-REL1\n\n         MACRO\n         MINIT &BLANKS,&ZERO,&STAT,&BASE\n         MVC   REQESTOR,&BLANKS      INITIALIZE REQUESTOR\n         MVC   REQJOB,&BLANKS        INITIALIZE JOB NAME\n         ZAP   REQEDATE,&ZERO        INITIALIZE DATE ENTERED\n         XC    REQETIME,REQETIME     INITIALIZE TIME ENTERED\n         ZAP   REQCDATE,&ZERO        INITIALIZE DATE COMPLETED\n         XC    REQCTIME,REQCTIME     INITIALIZE TIME COMPLETED\n         MVC   REQENODE,&BLANKS      INITIALIZE ENTRY NODE\n         MVI   REQENST,0             INITIALIZE ENTRY NODE REPLY STATUS\n         XC    REQNBR,REQNBR         INITIALIZE RECORD NUMBER\n         MVC   REQTNODE,&BLANKS      INITIALIZE TRANSMITTING NODE\n         MVI   REQSTAT,&STAT         UNUSED BLOCK\n         MVI   REQUTIL,0             INITIALIZE UTILITY USED\n         XC    REQFSIZE,REQFSIZE     INITIALIZE STAGE DATA SET SIZE\n         MVC   REQODSNM,&BLANKS      INITIALIZE ORIGINAL DSN\n         MVC   REQOMEM,&BLANKS       INITIALIZE ORIGINAL MEMBER NAME\n         MVC   REQDDSNM,&BLANKS      INITIALIZE DESTINATION DSN\n         MVC   REQDMEM,&BLANKS       INITIALIZE DESTINATION MEMBER NAME\n         MVC   REQWDSNM,&BLANKS      INITIALIZE STAGING DSN\n         MVC   REQIDSNM,&BLANKS      INITIALIZE DF/DSS SYSIN DSN\n         MVC   REQSDSNM,&BLANKS      INITIALIZE DF/DSS SYSOUT DSN\n         MVI   REQREPL,C' '          INITIALIZE REPLACE INDICATOR\n         MVI   REQALIAS,C' '         INITIALIZE ALIAS INDICATOR\n         XC    REQNDE#,REQNDE#       INITIALIZE NUMBER OF NODES\n         LA    &BASE,REQNDENM        FIRST NODE NAME\n         LA    R15,$MAXNODE          NUMBER OF NODES\nINIT&SYSNDX DS 0H\n         MVC   0(L'REQNDENM,&BASE),&BLANKS\n         MVI   REQNDEST-REQNDENM(&BASE),0 INITIALIZE STATUS\n         ZAP   REQNDETD-REQNDENM(L'REQNDETD,&BASE),&ZERO\n         XC    REQNDETT-REQNDENM(L'REQNDETT,&BASE),REQNDETT-REQNDENM(&B+SE)\n               ASE)\n         ZAP   REQNDERD-REQNDENM(L'REQNDERD,&BASE),&ZERO\n         XC    REQNDERT-REQNDENM(L'REQNDERT,&BASE),REQNDERT-REQNDENM(&B+SE)\n               ASE)\n         XC    REQNDECR-REQNDENM(L'REQNDECR,&BASE),REQNDECR-REQNDENM(&B+SE)\n               ASE)\n         XC    REQNDECT-REQNDENM(L'REQNDECT,&BASE),REQNDECT-REQNDENM(&B+SE)\n               ASE)\n         LA    &BASE,REQNDEL(&BASE)  NEXT NODE\n         BCT   R15,INIT&SYSNDX       LOOP\n         MEND\n./ ADD NAME=MSTRREQ  0100-99056-99056-1500-00022-00022-00000-FX-REL1\n\n         MACRO\n         MSTRREQ &DSECT=\n         AIF   ('&DSECT' EQ 'YES').DSECT00\n         AIF   ('&DSECT' EQ 'NO').CSECT00\n         MNOTE 12,'''DSECT'' IS INVALID, MUST BE ''YES'' OR ''NO'' '\n         MEXIT\n.DSECT00 ANOP\nMSTRREQ  DSECT\n         AGO   .COMM\n.CSECT00 ANOP\nMSTRREQ  DS    0A\n.COMM    ANOP\nMSTRCMD  DS    X                  COMMAND\n$MSTRCLS EQU   C'C'               .. END-OF-JOB/CLEAN-UP\n$MSTROPN EQU   C'O'               .. OPEN\n$MSTRRD  EQU   C'R'               .. READ A RECORD\n$MSTRWRT EQU   C'W'               .. WRITE A RECORD\nMSTRREC# DS    AL2                RECORD NUMBER TO READ OR WRITE\nMSTRRECD DS    (REQBLOKL)X        RESERVE ROOM FOR I/O AREA\nMSTRL    EQU   *-MSTRREQ\n         MEND\n./ ADD NAME=NODEMSG  0100-99056-99056-1500-00016-00016-00000-FX-REL1\n\n         DC    AL1($REQNDEI),CL25' '\n         DC    AL1($REQNDET),CL25'TRANSMITTING'\n         DC    AL1($REQNDEC),CL25'TRANSMISSION COMPLETE'\n         DC    AL1($REQNDEE),CL25'TRANSMISSION ERROR'\n         DC    AL1($REQNDER),CL25'RESTORED'\n         DC    AL1($REQNDEX),CL25'RESTORE ERROR'\n         DC    AL1($REQNDEN),CL25'SENDER NOTIFIED'\n         DC    AL1($REQNDES),CL25'NO STAGE SPACE'\n         DC    AL1($REQNDEM),CL25'NO FREE MASTER RECORD'\n         DC    AL1($REQNDE2),CL25'NO MASTER RECORD'\n         DC    AL1($REQNDEL),CL25'TOO LARGE'\n         DC    AL1($REQNDEA),CL25'INSUFFICENT RACF ACCESS'\n         DC    AL1($REQNDEW),CL25'NO RESTORE DEFINITION'\n         DC    AL1($REQNDED),CL25'ALREADY CATALOGED'\n         DC    X'FF',CL25'UNKNOWN'\n./ ADD NAME=OPTIONS  0100-99056-99056-1500-00015-00015-00000-FX-REL1\n\n         GBLA  &INTV,&MAXL,&MAXNDE,&MAXSZ,&TRSZ\n         GBLB  &CHFLAG,&PTRFLAG,&VINIT\n         GBLC  &AREA,&RACFC,&RACFE,&TROPT,&VGEN\n         GBLC  &ACB(20),&VDEFGBL(1000)\n         GBLC  &MSTRACC\n         GBLC  &DDEST\n         FXOPT DEFDEST=WOKING,         DEFAULT DESTINATION             +\n               INTERVL=60,             WAIT 60 SECONDS BETWEEN ATTEMPTS+\n               MASTER=VSAM,            MASTER FILE ORGANIZATION        +\n               MAXNODE=15,             MAXIMUM DESTINATIONS PER REQUEST+\n               RACCLASS='APPL',        QUOTES ARE REQUIRED             +\n               RACENT='FX     ',       QUOTES ARE REQUIRED             +\n               TRACE=ON,               GENERATE INTERNAL TRACE         +\n               UACB=(FXU1,FXU2,FXU3,FXU4,FXU5,FXU6,FXU7,FXU8,FXU9)\n./ ADD NAME=PRTBLOK  0100-99056-99056-1500-00024-00024-00000-FX-REL1\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PRINTER REQUEST BLOCK                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         PRTBLOK &DSECT=YES\n         AIF   ('&DSECT' EQ 'YES').LBL0010\nPRTBLOK  DS    0A\n         AGO   .LBL0020\n.LBL0010 ANOP\nPRTBLOK  DSECT\n.LBL0020 ANOP\nPRTEYE   DS    CL8                 EYECATCHER\nPRTNEXT  DS    A                   NEXT BLOCK ON THE CHAIN\nPRTCMD   DS    C                   COMMAND\n$PRTHEAD EQU   C'H'                .. PRINT HEADING\n$PRTPRT  EQU   C'P'                .. PRINT\nPRTCC    DS    C                   CARRIAGE CONTROL\nPRTMSGID DS    CL11                MESSAGE ID\nPRTDATA  DS    CL120               PRINT DATA\nPRTBLOKL EQU   *-PRTBLOK\n         MEND\n./ ADD NAME=REGEQU   0100-99056-99056-1500-00017-00017-00000-FX-REL1\n\nR0       EQU    0\nR1       EQU    1\nR2       EQU    2\nR3       EQU    3\nR4       EQU    4\nR5       EQU    5\nR6       EQU    6\nR7       EQU    7\nR8       EQU    8\nR9       EQU    9\nR10      EQU    10\nR11      EQU    11\nR12      EQU    12\nR13      EQU    13\nR14      EQU    14\nR15      EQU    15\n./ ADD NAME=REQBLOK  0100-99056-99056-1500-00124-00124-00000-FX-REL1\n\n         MACRO\n         REQBLOK &DSECT=\n         GBLA  &INTV,&MAXL,&MAXNDE,&MAXSZ,&TRSZ\n         GBLB  &CHFLAG,&PTRFLAG,&VINIT\n         GBLC  &AREA,&RACFC,&RACFE,&TROPT,&VGEN\n         GBLC  &ACB(20),&VDEFGBL(1000)\n* ------------------------------------------------------------------- *\n*                                                                     *\n*      DATASET REQUEST/STATUS BLOCK                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF  (T'&DSECT EQ 'O').ERR0010\n         AIF  ('&DSECT' EQ 'NO').CSECT00\n         AIF  ('&DSECT' EQ 'YES').DSECT00\n         MNOTE 12,'INVALID ''DSECT'', MUST BE ''YES'' OR ''NO'' '\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'''DSECT'' PARAMETER IS REQUIRED'\n         MEXIT\n.CSECT00 ANOP\nREQBLOK  DS   0X\n         AGO  .COMMON\n.DSECT00 ANOP\nREQBLOK  DSECT\n.COMMON  ANOP\nREQREC#  DS   CL5                  MASTER FILE RECORD NUMBER\nREQESTOR DS   CL8                  ID OF REQUESTOR\nREQJOB   DS   CL8                  JOB NAME IF REQUESTED VIA BATCH\nREQEDATE DS   PL4                  DATE REQUEST WAS ENTERED\nREQETIME DS   XL4                  TIME REQUEST WAS ENTERED\nREQCDATE DS   PL4                  DATE REQUEST WAS COMPLETED\nREQCTIME DS   XL4                  TIME REQUEST WAS COMPLETED\nREQID    DS   0CL12                REQUEST ID\nREQENODE DS   CL8                  .. NODE WHERE REQUEST WAS ENTERED\nREQNBR   DS   XL4                  .. REQUEST NUMBER\nREQENST  DS   X                    REQUESTING NODE'S STATUS\nREQTNODE DS   CL8                  NODE TRANSMITTING THE DATASET\nREQSTAT  DS   X                    STATUS OF THIS REQUEST\n$REQFREE EQU  X'01'                .. AVAILABLE REQUEST BLOCK\n$REQINIT EQU  X'02'                .. INITIAL STATUS\n$REQDUMP EQU  X'03'                .. DATASET IS BEING DUMPED\n$REQXRDY EQU  X'04'                .. READY FOR TRANSMITTING\n$REQRECV EQU  X'05'                .. BEING RECEIVED\n$REQRCVD EQU  X'06'                .. RECEIVED, READY FOR RESTORE\n$REQRSTR EQU  X'07'                .. DATASET IS BEING RESTORED\n$REQXFRD EQU  X'08'                .. REQUEST TRANSFERRED TO XMITTER\n* ------------------ SUCCESSFUL COMPLETION -------------------------- *\n$REQDONE EQU  X'40'                .. REQUEST DONE (COMPLETE)\n$REQRSTC EQU  X'41'                .. RESTORE COMPLETE\n* ---------- ERRORS THAT DO NOT REQUIRE RESPONSE TO SENDER ---------- *\n$REQDERR EQU  X'80'                .. ERROR DURING DUMP\n$REQ4ERR EQU  X'81'                .. ERROR READING FORMAT-4\n$REQ1ERR EQU  X'82'                .. ERROR READING FORMAT-1\n$REQDSN0 EQU  X'83'                .. DATA SET NAME LENGTH ZERO OR LESS\n$REQXORG EQU  X'84'                .. UNSUPPORTED DATASET ORGANIZATION\n$REQSTGD EQU  X'85'                .. ERROR ALLOCATING STAGE (DUMP)\n$REQIND  EQU  X'86'                .. ERROR ALLOCATING SYSIN (DUMP)\n$REQPRTD EQU  X'87'                .. ERROR ALLOCATING SYSOUT (DUMP)\n$REQDSNF EQU  X'88'                .. DATASET NOT FOUND\n$REQUCAN EQU  X'89'                .. REQUEST CANCELLED BY USER\n$REQRCVE EQU  X'8A'                .. ERROR DURING RECEIVE\n$REQBIG  EQU  X'8B'                .. DATASET SIZE EXCEEDS MAX ALLOWED\n$REQMBIG EQU  X'8C'                .. MEMBER TOO LARGE\n$REQNPDS EQU  X'8D'                .. SOURCE DATA SET IS NOT A PDS\n$REQMEMX EQU  X'8E'                .. SPECIFIED MEMBER NOT FOUND\n$REQPDSD EQU  X'8F'                .. ERROR ALLOCATING PDS (DUMP)\n$REQNDEV EQU  X'90'                .. VOLUME IS NOT ON ANY DEVICE\n$REQNDA  EQU  X'91'                .. VOLUME IS NOT A DASD DEVICE\n$REQMIG  EQU  X'92'                .. DATA SET IS MIGRATED\n$REQOFFL EQU  X'93'                .. VOLUME IS OFFLINE\n* ------------ ERRORS THAT DO REQUIRE RESPONSE TO SENDER ------------ *\n$REQNFYE EQU  X'20'                .. ANY ERROR THAT REQUIRES NOTIFY\n$REQRERR EQU  X'A0'                .. ERROR DURING RESTORE\n$REQSTGR EQU  X'A1'                .. ERROR ALLOCATING STAGE (RESTORE)\n$REQINR  EQU  X'A2'                .. ERROR ALLOCATING SYSIN (RESTORE)\n$REQPRTR EQU  X'A3'                .. ERROR ALLOCATING SYSOUT (RESTORE)\n$REQNRVL EQU  X'A4'                .. NO RESTORE VOLUME DEFINED\n$REQPFUL EQU  X'A5'                .. OUTPUT PDS IS FULL\n$REQPDSR EQU  X'A6'                .. ERROR ALLOCATING PDS (RESTORE)\n* ------------------- CONTROL RECORD -------------------------------- *\n$REQCNTL EQU  X'FF'                .. CONTROL RECORD\nREQUTIL  DS   X                    UTILITY USED FOR STAGE/DE-STAGE\n$REQDSS  EQU  X'01'                .. DF/DSS\n$REQCOPY EQU  X'02'                .. IEBCOPY\nREQFSIZE DS   XL4                  ORIGINAL DATA SET SIZE IN BYTES\nREQODSNM DS   CL44                 NAME OF ORIGINAL DATASET\nREQDDSNM DS   CL44                 NAME OF DATASET AT DESTINATION\nREQWDSNM DS   CL44                 NAME OF WORK DATASET\nREQIDSNM DS   CL44                 NAME OF SYSIN DATASET\nREQSDSNM DS   CL44                 NAME OF SYSOUT DATASET\nREQOMEM  DS   CL8                  NAME OF MEMBER IN ORIGINAL DATASET\nREQDMEM  DS   CL8                  NAME OF MEMBER AT DESTINATION\nREQREPL  DS   C                    REPLACE DATA SET OR MEMBER (Y OR N)\nREQALIAS DS   C                    TRANSMIT WITH ALIASES (Y OR N)\nREQNDE#  DS   XL2                  NUMBER OF DESTINATIONS\n* ------------------- PER DESTINATION DATA -------------------------- *\nREQNDENM DS   CL8                  NAME(S) OF NODES IN SEND LIST\nREQNDEST DS   X                    STATUS OF REQUEST TO THIS NODE\n$REQNDEI EQU  X'00'                .. INITIAL STATUS\n$REQNDET EQU  X'01'                .. TRANSMISSION STARTED\n$REQNDEC EQU  X'02'                .. TRANSMISSION COMPLETE\n$REQNDEE EQU  X'03'                .. ERROR DURING TRANSMISSION\n$REQNDER EQU  X'04'                .. RESTORE COMPLETE\n$REQNDEX EQU  X'05'                .. ERROR DURING RESTORE\n$REQNDEN EQU  X'06'                .. SENDER NOTIFIED\n$REQNDES EQU  X'07'                .. UNABLE TO ALLOCATE STAGE DATASET\n$REQNDEM EQU  X'08'                .. NO FREE MASTER FILE RECORD\n$REQNDE2 EQU  X'09'                .. MASTER RECORD NOT FOUND (RESTART)\n$REQNDEL EQU  X'0A'                .. DATA SET IS TOO LARGE\n$REQNDEA EQU  X'0B'                .. USER DOES NOT HAVE RACF ACCESS\n$REQNDEW EQU  X'0C'                .. NO RESTORE BLOCK\n$REQNDED EQU  X'0D'                .. DUPLICATE DATA SET\nREQNDETD DS   PL4                  DATE TRANSMISSION STARTED\nREQNDETT DS   XL4                  TIME TRANSMISSION STARTED\nREQNDERD DS   PL4                  DATE RESTORE NOTIFICATION RECEIVED\nREQNDERT DS   XL4                  TIME RESTORE NOTIFICATION RECEIVED\nREQNDECR DS   XL4                  CHECKPOINT RECORD NUMBER\nREQNDECT DS   XL4                  CHECKPOINT TTR\nREQNDEL  EQU  *-REQNDENM\n         DS   (($MAXNODE-1)*REQNDEL)X\nREQBLOKL EQU  *-REQBLOK\n$MAXNODE EQU  &MAXNDE              MAXIMUM NUMBER OF NODES\n         MEND\n./ ADD NAME=REQMSG   0100-99056-99056-1500-00040-00040-00000-FX-REL1\n\n         DC    AL1(0),CL25'UNUSED RECORD'\n         DC    AL1($REQFREE),CL25'FREE'\n         DC    AL1($REQINIT),CL25'READY TO BE DUMPED'\n         DC    AL1($REQDUMP),CL25'DUMP IN PROGRESS'\n         DC    AL1($REQXRDY),CL25'READY FOR TRANSMISSION'\n         DC    AL1($REQRECV),CL25'BEING RECEIVED'\n         DC    AL1($REQRCVD),CL25'READY FOR RESTORE'\n         DC    AL1($REQRSTR),CL25'BEING RESTORED'\n         DC    AL1($REQXFRD),CL25'XFERRED TO XMITTING NODE'\n         DC    AL1($REQDONE),CL25'COMPLETED'\n         DC    AL1($REQRSTC),CL25'RESTORE COMPLETE'\n         DC    AL1($REQDERR),CL25'ERROR DURING DUMP'\n         DC    AL1($REQ4ERR),CL25'ERROR READING FORMAT-4'\n         DC    AL1($REQ1ERR),CL25'ERROR READING FORMAT-1'\n         DC    AL1($REQDSN0),CL25'DSN LENGTH ZERO OR MINUS'\n         DC    AL1($REQXORG),CL25'UNSUPPORTED DATASET ORG'\n         DC    AL1($REQSTGD),CL25'ERROR ALLOCATING STAGE DS'\n         DC    AL1($REQIND),CL25'ERROR ALLOCATING SYSIN'\n         DC    AL1($REQPRTD),CL25'ERROR ALLOCATING SYSPRINT'\n         DC    AL1($REQDSNF),CL25'DATASET NOT CATALOGED'\n         DC    AL1($REQUCAN),CL25'CANCELLED BY USER'\n         DC    AL1($REQRCVE),CL25'ERROR DURING RECEIVE'\n         DC    AL1($REQBIG),CL25'SIZE EXCEEDS MAX ALLOWED'\n         DC    AL1($REQMBIG),CL25'MEMBER TOO LARGE'\n         DC    AL1($REQNPDS),CL25'DATA SET IS NOT A PDS'\n         DC    AL1($REQMEMX),CL25'MEMBER NOT FOUND'\n         DC    AL1($REQPDSD),CL25'ERROR ALLOCATING PDS'\n         DC    AL1($REQNDEV),CL25'NO DEVICE FOR DATASET'\n         DC    AL1($REQNDA),CL25'NOT ON A DASD DEVICE'\n         DC    AL1($REQMIG),CL25'DATASET IS MIGRATED'\n         DC    AL1($REQOFFL),CL25'DEVICE IS OFFLINE'\n         DC    AL1($REQRERR),CL25'ERROR DURING RESTORE'\n         DC    AL1($REQSTGR),CL25'ERROR ALLOCATING STAGE DS'\n         DC    AL1($REQINR),CL25'ERROR ALLOCATING SYSIN'\n         DC    AL1($REQPRTR),CL25'ERROR ALLOCATING SYSOUT'\n         DC    AL1($REQPDSR),CL25'ERROR ALLOCATING PDS'\n         DC    AL1($REQNRVL),CL25'NO RESTORE VOLUME DEFINED'\n         DC    AL1($REQPFUL),CL25'OUTPUT PDS IS FULL'\n         DC    X'FF',CL25'UNKNOWN'\n./ ADD NAME=RSTRBLOK 0100-99056-99056-1500-00023-00023-00000-FX-REL1\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*        RESTORE CONTROL BLOCK                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         RSTRBLOK &DSECT=\n         AIF      ('&DSECT' EQ 'YES').DSECT\nRSTRBLOK DS    0H\n         AGO      .NODSECT\n.DSECT   ANOP\nRSTRBLOK DSECT\n.NODSECT ANOP\nRSTREYE  DS    CL8                 EYECATCHER\nRSTRNEXT DS    A                   NEXT RESTORE BLOCK'S ADDRESS\nRSTRDSNL DS    H                   DATASET PREFIX LENGTH\nRSTRVOL# DS    H                   NUMBER OF VOLUMES IN LIST\nRSTRDSN  DS    CL44                DATASET NAME PREFIX\nRSTRVOL  DS    (RSTRMAX)CL6        VOLSER'S AVAILABLE FOR RESTORE\nRSTRL    EQU   *-RSTRBLOK          LENGTH OF CONTROL BLOCK\nRSTRMAX  EQU   20\n         MEND\n./ ADD NAME=SESSBLOK 0100-99056-99056-1500-00075-00075-00000-FX-REL1\n\n         MACRO\n         SESSBLOK &DSECT=\n* ------------------------------------------------------------------- *\n*                                                                     *\n*      VTAM SESSION STATUS BLOCK                                      *\n*                                                                     *\n*      SESSBLOK's represent sessions to other FX's and users.         *\n*                                                                     *\n*      SESSBLOK's are allocated at two points:                        *\n*        1) During FX initialization any other FX node that this      *\n*           FX node is to communicate with must be defined on a       *\n*           FXNODE statement.   When a FXNODE statement is processed  *\n*           the SESSBLOK is allocated.                                *\n*        2) When the ATTN exit is driven when a user is logging on,   *\n*           a SESSBLOK is built for the user session.                 *\n*                                                                     *\n*                                                                     *\n*      The SESSBLOKs are deleted when:                                *\n*        1) For user sessions, when the user ends his FX dialog on    *\n*           TSO or a BATCH job ends, the ACB they were using is       *\n*           closed.  This drives the ATTN exit with a LOSS for the    *\n*           SESSION, and the SESSBLOK is deleted.                     *\n*        2) For FX nodes, the SESSBLOKs are deleted at program        *\n*           termination.                                              *\n*                                                                     *\n*                                                                     *\n*      SESSBLOKs are built and deleted by module FXSSESS.             *\n*                                                                     *\n*      Since APPC allows mulitple conversations concurrently on the   *\n*      same session, conversation specific data had to be moved to    *\n*      a separate control block (CONVBLOKs).                          *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF  (T'&DSECT EQ 'O').ERR0010\n         AIF  ('&DSECT' EQ 'NO').CSECT00\n         AIF  ('&DSECT' EQ 'YES').DSECT00\n         MNOTE 12,'INVALID ''DSECT'', MUST BE ''YES'' OR ''NO'' '\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'''DSECT'' PARAMETER IS REQUIRED'\n         MEXIT\n.CSECT00 ANOP\nSESSBLOK DS   0F\n         AGO  .COMMON\n.DSECT00 ANOP\nSESSBLOK DSECT\n.COMMON  ANOP\nSESSEYE  DS   CL8                  EYECATCHER\nSESSNEXT DS   A                    NEXT SESSION BLOCK\nSESSPREV DS   A                    PREVIOUS SESSION BLOCK\nSESSCONV DS   A                    FIRST CONVERSATION BLOCK\nSESSRPL  DS   A                    RPL'S ADDRESS\nSESSRPLX DS   A                    RPL EXTENSION'S ADDRESS\nSESSNIB  DS   A                    NIB'S ADDRESS\nSESSTIME DS   XL4                  TIME OF LAST ATTEMPT\nSESSDATE DS   XL4                  DATE OF LAST ATTEMPT\nSESSNAME DS   CL8                  PARTNER LU NAME\nSESSSMF  DS   CL4                  PARTNER LU SMF ID\nSESSUSER DS   CL8                  USER ID (FOR USER SESSIONS)\nSESSJOB  DS   CL8                  JOB NAME (FOR BATCH JOBS)\nSESSTYPE DS   C                    SESSION TYPE\n$SESSFX  EQU  C'F'                 .. FX-TO-FX SESSION\n$SESSUSR EQU  C'U'                 .. USER SESSION\nSESSUATH DS   X                    USER'S AUTHORITY\nSESSREC# DS   AL2                  MASTER FILE RECORD NUMBER\nSESSSTAT DS   X                    STATUS\n$SESSINQ EQU  X'80'                .. INQUIRE REQUEST SENT\n$SESSCS  EQU  X'40'                .. CNOS SENT OR RECEIVED\n$SESSRDY EQU  X'20'                .. READY FOR CONVERSATIONS\n$SESSPND EQU  X'10'                .. FUNCTION IS PENDING\n$SESSERR EQU  X'01'                .. ERROR ON LINK (OR NOT READY)\nSESSL    EQU  *-SESSBLOK\n         MEND\n./ ADD NAME=SESSREQ  0100-99056-99056-1500-00016-00016-00000-FX-REL1\n\n         MACRO\n         SESSREQ &DSECT=YES\n         AIF   ('&DSECT' EQ 'NO').LBL0010\nSESSREQ  DSECT\n         AGO  .LBL0020\n.LBL0010 ANOP\nSESSREQ  DS   0A\n.LBL0020 ANOP\nSESSADDR DS   A                   SESSION BLOCK'S ADDRESS\nSESSCMD  DS   X                   COMMAND\n$SESSADD EQU  X'01'               .. ADD A NEW SESSBLOK\n$SESSDEL EQU  X'02'               .. DELETE A SESSBLOK\nSESSNODE DS   CL8                 PARTNER'S LU NAME\nSESSREQL EQU  *-SESSREQ\n         MEND\n./ ADD NAME=SNAPFMT  0100-99056-99056-1500-00130-00130-00000-FX-REL1\n\n         MACRO\n.* ------------------------------------------------------------------ *\n.*                                                                    *\n.*     Define fields to be formatted by FXSSNAP.                      *\n.*                                                                    *\n.*        Parameters:                                                 *\n.*                                                                    *\n.*          TYPE      'BASE' to define a new area                     *\n.*                    'FIELD' to define a field within an area        *\n.*                                                                    *\n.*          FIELD     Field name (must be defined as a label in the   *\n.*                    area defined by the TYPE=BASE,FIELD=XXXXXX.     *\n.*                                                                    *\n.*          FORMAT    Source format.  Valid values are BIN for        *\n.*                    binary numeric, CHAR for character, DEC for     *\n.*                    packed decimal, and HEX for hexidecimal.        *\n.*                                                                    *\n.*          LENGTH    Optional.  Normally the source field length     *\n.*                    is determined by using the assembler L'         *\n.*                    value for the label specified in the FIELD      *\n.*                    parameter.  The LENGTH parameter is a means to  *\n.*                    over-ride the L' value.                         *\n.*                                                                    *\n.*          CHAIN     Optional.  Valid values are YES and NO.         *\n.*                    If CHAIN=YES is specified, it indicates that    *\n.*                    this is a 4 byte pointer to the next block of   *\n.*                    the same type, last block on the chain will     *\n.*                    have a hex zero in this field.  Only one        *\n.*                    field per TYPE=BASE is allowed to specify       *\n.*                    CHAIN=YES.                                      *\n.*                                                                    *\n.*          POINTER   Optional.  This indicates that this field is    *\n.*                    is the pointer to the first block on a chain    *\n.*                    dependent on the current control block.  Only   *\n.*                    one field per TYPE=BASE may be a POINTER.       *\n.*                    The value specified must be the name of the     *\n.*                    SNAPFMT table that defines the fields in the    *\n.*                    dependent control block.                        *\n.*                                                                    *\n.* ------------------------------------------------------------------ *\n&NAME    SNAPFMT &TYPE=,      EITHER A \"BASE\" OR A \"FIELD\"             +\n               &FIELD=,       EITHER AN \"AREA\" NAME, OR A FIELD NAME   +\n               &FORMAT=,      SOURCE FORMAT (BIN, CHAR, OR HEX)        +\n               &LENGTH=,      SOURCE LENGTH (OPTIONAL)                 +\n               &CHAIN=,       'FORWARD POINTER' TO NEXT BLOCK ON CHAIN +\n               &POINTER=      ANCHOR FOR ANOTHER CONTROL BLOCK CHAIN\n         GBLA  &INTV,&MAXL,&MAXNDE,&MAXSZ,&TRSZ\n         GBLB  &CHFLAG,&PTRFLAG,&VINIT\n         GBLC  &AREA,&RACFC,&RACFE,&TROPT,&VGEN\n         GBLC  &ACB(20),&VDEFGBL(1000)\n         LCLC  &FORMATC\n         AIF     (T'&TYPE EQ 'O').FLD000\n         AIF     ('&TYPE' EQ 'BASE').BASE000\n         AIF     ('&TYPE' EQ 'FIELD').FLD000\n         MNOTE   12,'INVALID ''TYPE'' PARAMETER'\n         MEXIT\n.BASE000 ANOP\n&AREA    SETC    '&FIELD'\n&NAME    DC      CL8'&FIELD'\n&CHFLAG  SETB    0\n&PTRFLAG SETB    0\n         MEXIT\n.FLD000  ANOP\n         AIF     ('&AREA' EQ '').ERR0040\n         AIF     (T'&FIELD EQ 'O').ERR0010\n         AIF     (T'&FORMAT EQ 'O').ERR0020\n         AIF     ('&FORMAT' EQ 'BIN').FLD010\n         AIF     ('&FORMAT' EQ 'CHAR').FLD020\n         AIF     ('&FORMAT' EQ 'DEC').FLD030\n         AIF     ('&FORMAT' EQ 'HEX').FLD040\n         MNOTE   12,'INVALID FIELD FORMAT'\n.FLD010  ANOP\n&FORMATC SETC    'B'\n         AGO     .FLD050\n.FLD020  ANOP\n&FORMATC SETC    'C'\n         AGO     .FLD050\n.FLD030  ANOP\n&FORMATC SETC    'D'\n         AGO     .FLD050\n.FLD040  ANOP\n&FORMATC SETC    'H'\n.FLD050  ANOP\n         AIF     (T'&CHAIN EQ 'O').FLD060\n         AIF     ('&CHAIN' EQ 'YES').FLD060\n         AIF     ('&CHAIN' EQ 'NO').FLD060\n         MNOTE   12,'INVALID ''CHAIN'' VALUE, MUST BE YES OR NO'\n.FLD060  ANOP\n         DC      CL8'&FIELD'           FIELD NAME\n         DC      AL2(&FIELD-&AREA)     DISPLACEMENT TO FIELD\n         DC      C'&FORMATC'           FIELD FORMAT\n         AIF     (T'&LENGTH EQ 'O').FLD070\n         DC      AL2(&LENGTH)          FIELD LENGTH (OVERRIDE)\n         AGO     .FLD080\n.FLD070  ANOP\n         DC      AL2(L'&FIELD)         FIELD LENGTH\n.FLD080  ANOP\n         AIF     ('&CHAIN' EQ 'YES').FLD090\n         DC      X'00'                 FLAG BYTE   (NOT CHAIN FIELD)\n         AGO     .FLD100\n.FLD090  ANOP\n         DC      X'01'                 FLAG BYTE (CHAIN FIELD)\n         AIF     (&CHFLAG).ERR0030     CHAIN FIELD ALREADY SPECIFIED?\n&CHFLAG  SETB    1\n.FLD100  ANOP\n         AIF     (T'&POINTER EQ 'O').FLD110\n         AIF     (&PTRFLAG).ERR0050\n&PTRFLAG SETB    1\n         DC      AL4(&POINTER)         SUB-CHAIN BLOCK FORMAT PARMS\n         MEXIT\n.FLD110  ANOP\n         DC      AL4(0)                NOT A SUB-CHAIN POINTER\n         MEXIT\n.ERR0010 ANOP\n         MNOTE   12,'FIELD NAME MUST BE SPECIFIED'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE   12,'FIELD FORMAT MUST BE SPECIFIED'\n         MEXIT\n.ERR0030 ANOP\n         MNOTE   12,'CHAIN FIELD ALREADY SPECIFIED'\n         MEXIT\n.ERR0040 ANOP\n         MNOTE   12,'TYPE=BASE MUST BE SPECIFIED TO DEFINE AREA THIS FI+\n               ELD IS A PART OF'\n         MEXIT\n.ERR0050 ANOP\n         MNOTE   12,'POINTER FIELD ALREADY SPECIFIED'\n         MEND\n./ ADD NAME=STGEDEV  0100-99056-99056-1500-00021-00021-00000-FX-REL1\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*        STAGING DEVICE BLOCK                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         STGEDEV &DSECT=YES\n         AIF      ('&DSECT' EQ 'YES').DSECT\nSTGEDEV  DS    0F\n         AGO      .NODSECT\n.DSECT   ANOP\nSTGEDEV  DSECT\n.NODSECT ANOP\nSTGEEYE  DS    CL8                 EYECATCHER\nSTGENEXT DS    A                   NEXT STAGING DEVICE BLOCK\nSTGETRSZ DS    F                   TRACK SIZE\nSTGETRCL DS    H                   TRACKS PER CYLINDER\nSTGEVOL  DS    CL6                 VOLSER\nSTGEL    EQU   *-STGEDEV           LENGTH OF CONTROL BLOCK\n         MEND\n./ ADD NAME=TNODEPRM 0100-99056-99056-1500-00023-00023-00000-FX-REL1\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*        NODE DISPLAY REQUEST BLOCK                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         TNODEPRM  &DSECT=YES\n         AIF   ('&DSECT' EQ 'YES').LBL0010\nTNODEPRM DS    0A\n         AGO   .LBL0020\n.LBL0010 ANOP\nTNODEPRM DSECT\n.LBL0020 ANOP\nTNODECMD DS    C                   COMMAND\n$TNODED  EQU   C'D'                .. DISPLAY ONLY\n$TNODEE  EQU   C'E'                .. NODE NAME ONLY ENTRY\n$TNODEU  EQU   C'U'                .. ALLOW UPDATES\nTNODESTA DS    C                   STATUS\n$TNODEM  EQU   C'M'                .. I/O AREA WAS UPDATED (MODIFIED)\nTNODEREQ DS    A                   ADDRESS OF REQBLOK\nTNODEZCM DS    A                   ADDRESS OF ZCMD DATA\n         MEND\n./ ADD NAME=TRENTRY  0100-99056-99056-1500-00012-00012-00000-FX-REL1\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*          TRACE TABLE ENTRY                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nTRENTRY  DSECT\nTREMOD   DS    CL8                 MODULE NAME\nTREID    DS    CL8                 TRACE ID\nTREDATA1 DS    CL8                 TRACE DATA 1\nTREDATA2 DS    CL8                 TRACE DATA 2\nTRENTRYL EQU   *-TRENTRY           ENTRY LENGTH\n./ ADD NAME=USERCOB  0100-99056-99056-1500-00026-00026-00000-FX-REL1\n\n01 FX-PARMS.\n   05 FX-COMMAND              PIC X.\n   05 FX-REQUEST-ID.\n      10 FX-REQUEST-NODE      PIC X(8).\n      10 FX-REQUEST-NUMBER    PIC S9(8) COMP.\n   05 FX-USER-ID              PIC X(8).\n   05 FX-MESSAGE              PIC X(80).\n   05 FX-RETURN-CODE          PIC S9(4) COMP.\n   05 FX-REQUEST-STATUS       PIC X(25).\n   05 FX-APPL-ID              PIC X(8).\n   05 FX-XMIT-APPL-ID         PIC X(8).\n   05 FX-ORIGINAL-DSN         PIC X(44).\n   05 FX-ORIGINAL-MEMBER      PIC X(8).\n   05 FX-DESTINATION-DSN      PIC X(44).\n   05 FX-DESTINATION-MEMBER   PIC X(8).\n   05 FX-REPLACE              PIC X.\n   05 FX-ALIAS                PIC X.\n   05 FX-NUMBER-OF-NODES      PIC S9(4) COMP.\n   05 FX-NODE-DATA OCCURS 1 TO 15 TIMES DEPENDING ON FX-NUMBER-OF-NODES.\n      10 FX-NODE-NAME         PIC X(8).\n      10 FX-NODE-STATUS       PIC X(25).\n      10 FX-NODE-XMIT-DATE    PIC X(8).\n      10 FX-NODE-XMIT-TIME    PIC X(8).\n      10 FX-NODE-RESTORE-DATE PIC X(8).\n      10 FX-NODE-RESTORE-DATE PIC X(8).\n./ ADD NAME=USERPARM 0100-99056-99056-1500-00056-00056-00000-FX-REL1\n\n         MACRO\n         USERPARM &DSECT=\n         GBLA  &INTV,&MAXL,&MAXNDE,&MAXSZ,&TRSZ\n         GBLB  &CHFLAG,&PTRFLAG,&VINIT\n         GBLC  &AREA,&RACFC,&RACFE,&TROPT,&VGEN\n         GBLC  &ACB(20),&VDEFGBL(1000)\n         AIF   ('&DSECT' EQ 'YES').DSECT00\n         AIF   ('&DSECT' EQ 'NO').CSECT00\n         MNOTE 12,'INVALID DSECT PARAMETER'\n         MEXIT\n.DSECT00 ANOP\nUSERPARM DSECT\n*-------------------------------------------------------------------- *\n*                                                                     *\n*      User interface parameter list                                  *\n*                                                                     *\n*-------------------------------------------------------------------- *\n         AGO   .COMM00\n.CSECT00 ANOP\nUSERPARM DS    0C\n.COMM00  ANOP\nPARMCMD  DC    C' '              COMMAND\n$ENTER   EQU   C'E'              .. ENTER A NEW REQUEST\n$INQUIRE EQU   C'I'              .. INQUIRE ON A PREVIOUS REQUEST\nPARMENDE DC    CL8' '            NODE           (FOR INQUIRE ONLY)\nPARMNBR  DC    XL4'00000000'     REQUEST NUMBER (FOR INQUIRE ONLY)\nPARMUSER DC    CL8' '            USER ID        (FOR INQUIRE ONLY)\n*-------------------------------------------------------------------- *\n*      Data returned                                                  *\n*-------------------------------------------------------------------- *\nPARMMSG  DC    CL80' '           RETURNED MESSAGE\nPARMRC   DC    XL2'0000'         RETURN CODE\nPARMSTAT DC    CL25' '           REQUEST STATUS (RETURNED ON INQUIRY)\n*-------------------------------------------------------------------- *\n*      Data for new transmission request submission                   *\n*-------------------------------------------------------------------- *\nPARMFX   DC    CL08' '           FX STC'S APPLID\nPARMXFX  DC    CL08' '           XMIT FX STC'S APPLID\nPARMODSN DC    CL44' '           ORIGINAL DATASET NAME\nPARMOMEM DC    CL08' '           ORIGINAL MEMBER NAME\nPARMDDSN DC    CL44' '           DATASET NAME AT DESTINATIONS\nPARMDMEM DC    CL08' '           DESTINATION MEMBER NAME\nPARMREPL DC    CL01' '           REPLACE OPTION (Y=YES, N=NO)\nPARMALAS DC    CL01' '           SEND ALIASES (Y=YES, N=NO)\nPARMNDE# DC    AL2(0)            NUMBER OF NODES\n*----- Data per node ------------------------------------------------ *\nPARMNDNM DC    CL08' '           NODE NAME\nPARMNDST DC    CL25' '           STATUS TO THIS NODE\nPARMNDTD DC    CL8' '            DATE TRANSMITTED\nPARMNDTT DC    CL8' '            TIME TRANSMITTED\nPARMNDRD DC    CL8' '            DATE RESTORE NOTIFICATION RECEIVED\nPARMNDRT DC    CL8' '            TIME RESTORE NOTIFICATION RECEIVED\nPARMNDL  EQU   *-PARMNDNM        LENGTH PER NODE\n         DC    (PARMNDL*&MAXNDE)X'00'\n         MEND\n./ ADD NAME=USERREQ  0100-99056-99056-1500-00032-00032-00000-FX-REL1\n\n         MACRO\n         USERREQ &DSECT=YES,&IOAREA=YES\n         AIF  ('&DSECT' EQ 'YES').USER000\n         AIF  ('&DSECT' EQ 'NO').USER010\n         MNOTE 12,'** INVALID DSECT VALUE'\n         MEXIT\n.USER000 ANOP\nUSERREQ  DSECT\n         AGO  .USER020\n.USER010 ANOP\nUSERREQ  DS   0C\n.USER020 ANOP\nUSERLEN  DS   XL2                 LENGTH OF DATA\nUSERMOD  DS   CL4                 PROCESSING MODULE'S SUFFIX\n         SPACE 1\n         AIF  ('&IOAREA' EQ 'YES').USER030\n         AIF  ('&IOAREA' EQ 'NO').USER040\n         MNOTE 12,'INVALID IOAREA PARAMETER'\n         MEXIT\n.USER030 ANOP\nUSERIO   DS   (COMMIOSZ)X         I/O AREA USED FOR SEND/RECEIVE\n         SPACE 1\n         ORG  USERIO\n.USER040 ANOP\nUSERRC   DS   X                   RETURN CODE FROM FX STC\nUSERMSG  DS   0CL70\nUSERMSGI DS   CL11                RETURNED ID\n         DS   C\nUSERMSGD DS   CL58                RETURNED MESSAGE\nUSERDATA DS   0C\n         MEND\n./ ADD NAME=VARDSECT 0100-99056-99056-1500-00013-00013-00000-FX-REL1\n\n* ------------------------------------------------------------------- *\n*              VARIABLE TABLE ENTRIES                                 *\n* ------------------------------------------------------------------- *\nVARDSECT DSECT\nVARNAME  DS    CL8                   NAME KNOWN TO SPF\nVARLEN   DS    AL4                   VARIABLE LENGTH\nVARFORM  DS    CL8                   VARIABLE FORMAT\nVARID    DS    AL2                   VARIABLE'S 'ID'\nVARDISP  DS    AL2                   DISPLACEMENT TO DATA\nVARFLAG  DS    X                     FLAGS\n$VDEFINE EQU   X'80'                 .. VARIABLE IS DEFINED TO SPF\nVARL     EQU   *-VARDSECT\n./ ADD NAME=VARID    0100-99056-99056-1500-00027-00027-00000-FX-REL1\n\n         MACRO\n         VARID &SPFNAME=\n         GBLA  &INTV,&MAXL,&MAXNDE,&MAXSZ,&TRSZ\n         GBLB  &CHFLAG,&PTRFLAG,&VINIT\n         GBLC  &AREA,&RACFC,&RACFE,&TROPT,&VGEN\n         GBLC  &ACB(20),&VDEFGBL(1000)\n         GBLC  &MSTRACC\n         GBLC  &DDEST\n         LCLA  &SUB\n         AIF   (T'&SPFNAME EQ 'O').ERR0010\n&SUB     SETA  1\n.LABL010 ANOP\n         AIF   ('&VDEFGBL(&SUB)' EQ ' ').ERR0020\n         AIF   ('&VDEFGBL(&SUB)' EQ '&SPFNAME').LABL020\n         AIF   (&SUB EQ 100).ERR0020\n&SUB     SETA  &SUB+1\n         AGO   .LABL010\n.LABL020 ANOP\n         DC    AL2(&SUB)              VARIABLE'S 'ID' NUMBER\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'SPFNAME IS A REQUIRED PARAMETER'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'VARIABLE IS NOT DEFINED VIA THE FXVARS MACRO'\n         MEND\n./ ADD NAME=VARREQ   0100-99056-99056-1500-00025-00025-00000-FX-REL1\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*        VARIABLE DEFINE/DELETE REQUEST                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         VARREQ  &DSECT=YES\n         AIF   ('&DSECT' EQ 'YES').LBL0010\nVARREQ   DS    0A\n         AGO   .LBL0020\n.LBL0010 ANOP\nVARREQ   DSECT\n.LBL0020 ANOP\nVARIDS   DS    A                   ID LIST ADDRESS\nVARTBLE  DS    A                   ADDRESS OF VARIABLE TABLE\nVARAREA  DS    A                   ADDRESS OF VARIABLE DATA AREA\nVARNBR   DS    H                   NUMBER OF VARIABLES IN ID LIST\nVARCMD   DS    C                   COMMAND\n$VARDEFA EQU   X'01'               .. DEFINE (ALL)\n$VARDEFS EQU   X'02'               .. DEFINE (SPECIFIC)\n$VARDEL  EQU   X'03'               .. DELETE (SPECIFIC)\n$VAREOJ  EQU   X'04'               .. DELETE (ALL)\nVARREQL  EQU   *-VARREQ\n         MEND\n./ ADD NAME=VDEF     0100-99056-99056-1500-00069-00069-00000-FX-REL1\n\n         MACRO\n         VDEF  &BASE=,               BASE ADDRESS OF VARIABLES AREA    +\n               &NAME=,               NAME DEFINED TO SPF               +\n               &DATA=,               DATA ADDRESS                      +\n               &LENGTH=,             DATA LENGTH                       +\n               &FORM=                DATA FORMAT\n         GBLA  &INTV,&MAXL,&MAXNDE,&MAXSZ,&TRSZ\n         GBLB  &CHFLAG,&PTRFLAG,&VINIT\n         GBLC  &AREA,&RACFC,&RACFE,&TROPT,&VGEN\n         GBLC  &ACB(20),&VDEFGBL(1000)\n         GBLC  &MSTRACC\n         GBLC  &DDEST\n         LCLA  &SUB\n         AIF   (T'&BASE EQ 'O').LBL0010\n&AREA    SETC  '&BASE'\n&VINIT   SETB  0                     NEW AREA... RESET INIT SWITCH\n         MEXIT\n.LBL0010 ANOP\n         AIF   (&VINIT).LBL0030\n&VINIT   SETB  1\n&SUB     SETA  1\n.LBL0020 ANOP\n&VDEFGBL(&SUB)  SETC ' '\n         AIF   (&SUB EQ 1000).LBL0030\n&SUB     SETA   &SUB+1\n         AGO   .LBL0020\n.LBL0030 ANOP\n         AIF   (T'&NAME EQ 'O').ERR0010\n         AIF   (T'&LENGTH  EQ 'O').ERR0020\n         AIF   (T'&FORM    EQ 'O').ERR0030\n&SUB     SETA  1\n.LBL0040 ANOP\n         AIF   ('&VDEFGBL(&SUB)' EQ ' ').LBL0050\n         AIF   ('&VDEFGBL(&SUB)' EQ '&NAME').ERR0040\n         AIF   (&SUB EQ 1000).ERR0050\n&SUB     SETA  &SUB+1\n         AGO   .LBL0040\n.LBL0050 ANOP\n&VDEFGBL(&SUB) SETC '&NAME'\n         AIF   ('&VGEN' EQ 'NO').LBL0060\n         AIF   ('&AREA' EQ '').ERR0060\n         DC    CL8'&NAME'             NAME KNOWN TO SPF\n         DC    AL4(&LENGTH)           LENGTH\n         DC    CL8'&FORM'             VARIABLE FORMAT\n         DC    AL2(&SUB)              VARIABLE'S 'ID' NUMBER\n         DC    AL2(&DATA-&AREA)       DISPLACEMENT TO DATA\n         DC    X'00'                  FLAG BYTE\n.LBL0060 ANOP\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'NAME IS A REQUIRED PARAMETER'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'LENGTH IS A REQUIRED PARAMETER'\n         MEXIT\n.ERR0030 ANOP\n         MNOTE 12,'FORM IS A REQUIRED PARAMETER'\n         MEXIT\n.ERR0040 ANOP\n         MNOTE 12,'VARIABLE NAME IS DUPLICATED'\n         MEXIT\n.ERR0050 ANOP\n         MNOTE 12,'VDEFGBL IS FULL'\n         MEXIT\n.ERR0060 ANOP\n         MNOTE 12,'BASE MUST BE DEFINED BEFORE VARIABLES CAN BE DEFINED+\n               '\n         MEND\n./ ADD NAME=VTAMBLOK 0100-99056-99056-1500-00036-00036-00000-FX-REL1\n\n         MACRO\n         VTAMBLOK &DSECT=\n* ------------------------------------------------------------------- *\n*                                                                     *\n*      VTAM SUB-FUNCTION COMMAND BLOCK                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF  (T'&DSECT EQ 'O').ERR0010\n         AIF  ('&DSECT' EQ 'NO').CSECT00\n         AIF  ('&DSECT' EQ 'YES').DSECT00\n         MNOTE 12,'INVALID ''DSECT'', MUST BE ''YES'' OR ''NO'' '\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'''DSECT'' PARAMETER IS REQUIRED'\n         MEXIT\n.CSECT00 ANOP\nVTAMBLOK DS   0F\n         AGO  .COMMON\n.DSECT00 ANOP\nVTAMBLOK DSECT\n.COMMON  ANOP\nVTAMSESS DS   A                    ADDRESS OF SESSION BLOCK\nVTAMCONV DS   A                    ADDRESS OF CONVERSATION BLOCK\nVTAMCMD  DS   X                    COMMAND\n$VTAMINT EQU  X'01'                .. INITIALIZATION\n$VTAMINQ EQU  X'02'                .. ISSUE INQUIRE\n$VTAMCNS EQU  X'03'                .. ISSUE CHANGE NUMBER OF SESSIONS\n$VTAMALO EQU  X'04'                .. ALLOCATE A SESSION\n$VTAMSND EQU  X'05'                .. ISSUE A SEND\n$VTAMRCV EQU  X'06'                .. ISSUE A RECEIVE\n$VTAMDLO EQU  X'07'                .. DEALLOCATE SESSION\n$VTAMCHK EQU  X'08'                .. ISSUE A CHECK\n$VTAMCFM EQU  X'09'                .. ISSUE SEND/CONFIRMED\nVTAML    EQU  *-VTAMBLOK\n         MEND\n./ ADD NAME=VTOCREQ  0100-99056-99056-1500-00044-00044-00000-FX-REL1\n\n         MACRO\n         VTOCREQ &DSECT=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*      VTOC REQUEST BLOCK                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF  (T'&DSECT EQ 'O').ERR0010\n         AIF  ('&DSECT' EQ 'YES').DSECT00\n         AIF  ('&DSECT' EQ 'NO').CSECT00\n         MNOTE 12,'INVALID ''DSECT'', MUST BE ''YES'' OR ''NO'' '\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'''DSECT'' PARAMETER IS REQUIRED'\n         MEXIT\n.CSECT00 ANOP\nVTOCREQ  DS   0F\n         AGO  .COMMON\n.DSECT00 ANOP\nVTOCREQ  DSECT\n.COMMON  ANOP\nVTOCDEV  DS   A                    STAGE DEVICE BLOCK ADDRESS\n         ORG  VTOCDEV\nVTOCVOL  DS   A                    VOLSER ADDRESS\nVTOCDSSZ DS   F                    DATASET SIZE (IN BYTES)\nVTOCDSN  DS   A                    DATASET NAME ADDRESS\n         ORG  VTOCDSN\nVTOCTRKP DS   F                    EQUIVALENT TRACKS (PRIMARY)\nVTOCTRKS DS   F                    EQUIVALENT TRACKS (SECONDARY)\nVTOCCMD  DS   C                    COMMAND\n$VTOCDEV EQU  C'1'                 .. DETERMINE DEVICE CHARACTERISTICS\n$VTOCXNT EQU  C'2'                 .. CALCULATE DATASET SIZE\n$VTOCTRK EQU  C'3'                 .. CONVERT DATASET SIZE TO TRACKS\n$VTOCDSO EQU  C'4'                 .. DETERMINE DSORG\nVTOCDSO  DS   C                    DATA SET ORGANIZATION\n$VTOCDA  EQU  C'D'                 .. DA (DIRECT ACCESS)\n$VTOCIS  EQU  C'I'                 .. ISAM\n$VTOCPO  EQU  C'P'                 .. PO (PDS)\n$VTOCPS  EQU  C'S'                 .. SEQUENTIAL\n$VTOCVS  EQU  C'V'                 .. VSAM\n$VTOCUKN EQU  C' '                 .. UNKNOWN\nVTOCL    EQU  *-VTOCREQ\n         MEND\n./ ADD NAME=XTRRECD  0100-99056-99056-1500-00011-00011-00000-FX-REL1\n\n         MACRO\n         XTRRECD\nXTRRECD  DSECT\nXTREYE   DS    CL8                   EYECATCHER\nXTRNEXT  DS    A                     NEXT BLOCK ON CHAIN\nXTRTIME  DS    XL8                   TIME STAMP\nXTRDATA  DS    (TRENTRYL)X           DATA\nXTRDATAL EQU   *-XTRTIME             LENGTH OF DATA WRITTEN TO TRACE\nXTRRECDL EQU   *-XTRRECD\n         MEND\n./ ADD NAME=XUSRBLOK 0100-99056-99056-1500-00021-00021-00000-FX-REL1\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*        EXTERNAL USER IDENTIFICATION BLOCK                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         XUSRBLOK &DSECT=\n         AIF      ('&DSECT' EQ 'YES').DSECT\nXUSRBLOK DS    0H\n         AGO      .NODSECT\n.DSECT   ANOP\nXUSRBLOK DSECT\n.NODSECT ANOP\nXUSREYE  DS    CL8                 EYECATCHER\nXUSRNEXT DS    A                   NEXT XUSRBLOK ADDRESS\nXUSRSMF  DS    CL4                 SMF ID\nXUSRID1  DS    CL8                 USER ID ON OTHER SYSTEM\nXUSRID2  DS    CL8                 USER ID ON THIS SYSTEM\nXUSRL    EQU   *-XUSRBLOK          LENGTH OF CONTROL BLOCK\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FXSRC": {"ttr": 7688, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x05o\\x01\\x00\\x04_\\t\\x12U\\x96U\\x96\\x00\\x00\\xc6\\xe7`\\xd9\\xc5\\xd3\\xf1@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-02-25T00:00:00", "modifydate": "2000-02-14T09:12:00", "lines": 21910, "newlines": 21910, "modlines": 0, "user": "FX-REL1"}, "text": "./ ADD NAME=BDAMFMT  0100-99056-99056-1500-00227-00227-00000-FX-REL1\n\n         TITLE 'FXFORMAT   Master file (BDAM) formatter'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: BDAMFMT                                               *\n*                                                                     *\n*   The master file may be either BDAM or VSAM linear.                *\n*                                                                     *\n*   FX expects the master file to be pre-formatted, this module       *\n*   provides this function for BDAM.                                  *\n*                                                                     *\n*   Since all records must be written, QSAM is used instead of BDAM   *\n*   for the formatting.                                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXFORMAT CSECT\nFXFORMAT AMODE 24\nFXFORMAT RMODE 24\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               COPY BASE ADDRESS\n         USING FXFORMAT,R12          DEFINE BASE\n         LA    R1,SAVEAREA           OUR SAVE AREA ADDRESS\n         ST    R1,8(R13)             CHAIN TO CALLER'S\n         ST    R13,4(R1)             CHAIN CALLERS TO OURS\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         OPEN  (FXIN,INPUT)          OPEN CONTROL STATEMENT FILE\n         OPEN  (FXPRINT,OUTPUT)      OPEN PRINT FILE\n         BAL   R10,HEAD0000          PRINT HEADING\nINIT0010 DS    0H\n         GET   FXIN,CTLSTMT          READ A CONTROL STATEMENT\n         MVC   MSG01TXT(CTLSTMTL),CTLSTMT\n         MVC   PLINE(MSG01L),MSG01   COPY MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         CLI   CTLSTMT,C'*'          COMMENT?\n         BE    INIT0010              YES\n         CLC   RECSSTMT,CTLSTMT      RECORDS STATEMENT?\n         BE    RECS0000              YES\n         MVC   PLINE(MSG02L),MSG02   INVALID STATEMENT\n         OI    FLAGS,$ERROR          INDICATE ERROR\n         BAL   R10,PRT0000           PRINT ERROR STATEMENT\n         B     INIT0010              READ NEXT STATEMENT\nRECS0000 DS    0H\n         LA    R1,CTLSTMT+L'RECSSTMT FIRST DIGIT IN NUMBER OF RECORDS\n         LA    R2,7                  MAXIMUM NUMBER OF DIGITS\n         MVC   NBRIN,NBRIN-1         INITIALIZE TO ZEROS\nRECS0010 DS    0H\n         CLI   0(R1),C' '            END OF VALUE?\n         BE    RECS0020              YES\n         CLI   0(R1),C'0'            INVALID DIGIT?\n         BL    RECS0030              YES\n         CLI   0(R1),C'9'            INVALID DIGIT?\n         BH    RECS0030              YES\n         MVC   NBRIN(L'NBRIN-1),NBRIN+1   SHIFT LEFT 1 DIGIT\n         MVC   NBRIN+L'NBRIN-1(1),0(R1)   COPY DIGIT\n         LA    R1,1(R1)              NEXT DIGIT\n         BCT   R2,RECS0010           LOOP\n         CLI   0(R1),C' '            BLANK?\n         BNE   RECS0040              TOO MANY DIGITS\nRECS0020 DS    0H\n         PACK  DWORD,NBRIN           PACK NUMBER OF RECORDS\n         CVB   R1,DWORD              CONVERT TO BINARY\n         LTR   R1,R1                 ZERO?\n         BZ    RECS0050              YES.. INVALID\n         ST    R1,RECORDS            SET NUMBER OF RECORDS\n         OI    FLAGS,$RECORDS        NUMBER OF RECORDS HAS BEEN SET\n         B     INIT0010              READ NEXT CONTROL STATEMENT\nRECS0030 DS    0H\n         MVC   PLINE(MSG03L),MSG03   INVALID DIGIT\n         OI    FLAGS,$ERROR          INDICATE ERROR\n         BAL   R10,PRT0000           PRINT ERROR STATEMENT\n         B     INIT0010              READ NEXT STATEMENT\nRECS0040 DS    0H\n         MVC   PLINE(MSG04L),MSG04   TOO MANY DIGITS\n         OI    FLAGS,$ERROR          INDICATE ERROR\n         BAL   R10,PRT0000           PRINT ERROR STATEMENT\n         B     INIT0010              READ NEXT STATEMENT\nRECS0050 DS    0H\n         MVC   PLINE(MSG05L),MSG05   RECORDS=0\n         OI    FLAGS,$ERROR          INDICATE ERROR\n         BAL   R10,PRT0000           PRINT ERROR STATEMENT\n         B     INIT0010              READ NEXT STATEMENT\nPROC0000 DS    0H\n         TM    FLAGS,$ERROR          ANY ERRORS?\n         BNO   PROC0010              NO\n         MVC   PLINE(MSG06L),MSG06   COPY MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         B     EXIT0000              AND EXIT\nPROC0010 DS    0H\n         TM    FLAGS,$RECORDS        NUMBER OF RECORDS GIVEN?\n         BO    PROC0020              YES\n         MVC   PLINE(MSG07L),MSG07   COPY MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         B     EXIT0000              AND EXIT\nPROC0020 DS    0H\n         OPEN  (MASTER,OUTPUT)       OPEN MASTER FILE\n         L     R9,RECORDS            NUMBER OF RECORDS TO FORMAT\n         MINIT BLANKS,P0,0,R2        INITIALIZE FIELDS\nMSTR0010 DS    0H\n         AP    RECCNT,P1             ADD 1 TO RECORD COUNTER\n         MVC   RECWORK,=X'F02020202021'\n         ED    RECWORK,RECCNT        EDIT RECORD NUMBER\n         MVC   REQREC#,RECWORK+1     SET RECORD NUMBER\n         TM    FLAGS,$CNTL           CONTROL RECORD WRITTEN\n         BO    MSTR0020              YES\n         OI    FLAGS,$CNTL           CONTROL RECORD WRITTEN\n         MVI   REQSTAT,$REQCNTL      INDICATE THIS IS CONTROL RECORD\n         MVC   REQFSIZE,RECORDS      SAVE SIZE OF FILE\n         B     MSTR0030\nMSTR0020 DS    0H\n         MVI   REQSTAT,0             STATUS IS 'UNUSED'\n         XC    REQFSIZE,REQFSIZE     CLEAR FILE SIZE\nMSTR0030 DS    0H\n         PUT   MASTER,REQBLOK        WRITE THE RECORD\n         BCT   R9,MSTR0010           INITIALIZE ALL RECORDS\n         CLOSE MASTER                CLOSE MASTER FILE\n         B     EXIT0000              EXIT\nPRT0000  DS    0H\n         PUT   FXPRINT,PLINE         WRITE TO FXPRINT\n         AP    LINECT,P1             ADD 1 TO LINE COUNT\n         CLI   PLINE,C' '            SINGLE SPACE?\n         BE    PRT0010               YES\n         AP    LINECT,P1             ADD 1 TO LINE COUNT\n         CLI   PLINE,C'0'            DOUBLE SPACE?\n         BE    PRT0010               YES\n         AP    LINECT,P1             ADD 1 TO LINE COUNT\nPRT0010  DS    0H\n         MVC   PLINE,PLINE-1         CLEAR PRINT AREA\n         CP    LINECT,MAXLINE        TIME FOR HEADING?\n         BLR   R10                   NO\nHEAD0000 DS    0H\n         AP    PAGECT,P1             ADD 1 TO PAGE COUNT\n         MVC   HEADPAGE,=X'40202120' INITIALIZE EDIT WORD\n         ED    HEADPAGE,PAGECT       EDIT PAGE NUMBER\n         MVC   PLINE(HEADINGL),HEADING\n         PUT   FXPRINT,PLINE         PRINT HEADING\n         MVC   PLINE,PLINE-1         CLEAR PRINT I/O AREA\n         ZAP   LINECT,P1             RESET LINE COUNT\n         BR    R10\n* ------------------------------------------------------------------- *\n*        EXIT                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         CLOSE FXIN\n         CLOSE FXPRINT\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDWORD    DC    D'0'\nSAVEAREA DS    18F\nRECORDS  DC    F'0'\nMASTER   DCB   DSORG=PS,             MASTER FILE DCB                   +\n               DDNAME=MASTER,        .. DD NAME                        +\n               RECFM=F,              .. FIXED/UNBLOCKED RECORDS        +\n               LRECL=REQBLOKL,       .. RECORD SIZE                    +\n               BLKSIZE=REQBLOKL,     .. BLOCK SIZE                     +\n               MACRF=PM              .. PUT/MOVE MODE\nRECCNT   DC    PL3'0'\nLINECT   DC    PL2'0'\nPAGECT   DC    PL2'0'\nP0       DC    P'0'\nP1       DC    P'1'\nMAXLINE  DC    P'&MAXL'\nRECWORK  DC    CL6' '\nFLAGS    DC    X'00'\n$RECORDS EQU   X'80'\n$ERROR   EQU   X'40'\n$CNTL    EQU   X'20'\nBLANKS   DC    CL44' '\nHEXCHAR  DC    C'0123456789ABCDEF'\n         SPACE 1\n         DC    C'0'\nNBRIN    DC    CL7'0000000'\n         SPACE 1\n         DC    C' '\nPLINE    DC    CL133' '\nCTLSTMT  DC    CL80' '\nCTLSTMTL EQU   *-CTLSTMT\n         SPACE 1\nHEADING  DS    0C\n         DC    CL50' '\n         DC    C'FX MASTER FILE FORMATTER'\n         DC    CL50' '\n         DC    C'PAGE'\nHEADPAGE DC    CL4' '\nHEADINGL EQU   *-HEADING\nMSG01    DS    0C\n         DC    C' FXFORMAT01I   CONTROL STATEMENT:'\nMSG01TXT DS    (CTLSTMTL)C\nMSG01L   EQU   *-MSG01\nMSG02    DC    C' FXFORMAT02E * INVALID CONTROL STATEMENT'\nMSG02L   EQU   *-MSG02\nMSG03    DC    C' FXFORMAT03E * INVALID DIGIT IN RECORDS VALUE'\nMSG03L   EQU   *-MSG03\nMSG04    DC    C' FXFORMAT04E * TOO MANY DIGITS IN RECORDS VALUE'\nMSG04L   EQU   *-MSG04\nMSG05    DC    C' FXFORMAT05E * RECORDS VALUE MAY NOT BE ZERO'\nMSG05L   EQU   *-MSG05\nMSG06    DC    C'-FXFORMAT06E * ERROR(S) DETECTED, EXECUTION ABORTED'\nMSG06L   EQU   *-MSG06\nMSG07    DC    C'-FXFORMAT07E * NUMBER OF RECORDS NOT GIVEN'\nMSG07L   EQU   *-MSG07\nRECSSTMT DC    C'RECORDS='\nFXIN     DCB   DDNAME=FXIN,             CONTROL STATEMENT DCB          +\n               DSORG=PS,                .. SEQUENTIAL                  +\n               LRECL=80,                .. 80 BYTE RECORDS             +\n               RECFM=FB,                .. FIXED, BLOCKED RECORDS      +\n               EODAD=PROC0000,          .. END OF DATA                 +\n               MACRF=GM                 .. GET/MOVE MODE\nFXPRINT  DCB   DDNAME=FXPRINT,          SYSOUT DCB                     +\n               DSORG=PS,                .. SEQUENTIAL                  +\n               LRECL=L'PLINE,           .. RECORD SIZE                 +\n               RECFM=FBA,               .. FIXED, BLOCKED, ASA         +\n               MACRF=PM\n         LTORG\n         REQBLOK DSECT=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n./ ADD NAME=BDAMMSTR 0100-99056-99056-1500-00229-00229-00000-FX-REL1\n\n         TITLE 'FXSMSTR   Master file access using BDAM'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: BDAMMSTR                                              *\n*                                                                     *\n*   The master file may be either a BDAM or a VSAM linear data set.   *\n*   If the master file is BDAM, this module provides the I/O for      *\n*   all FX functions.                                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXSMSTR  CSECT\nFXSMSTR  AMODE 24\nFXSMSTR  RMODE 24\n         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS\n         LR    R12,R15               COPY BASE ADDRESS\n         USING FXSMSTR,R12           DEFINE BASE\n         USING FXSCOMM,R11           DEFINE COMM AREA BASE\n         B     MSTR0000              SKIP EYECATCHER\n         DC    ((PFXMODNM-MODPRFX)-(*-FXSMSTR))X'00'\n         DC    CL8'MSTRBDAM'         MODULE NAME\n         DC    C'&SYSDATE'           DATE OF ASSEMBLY\n         DC    C'&SYSTIME'           TIME OF ASSEMBLY\nMSTR0000 DS    0H\n         LR    R9,R1                 COPY PARM LIST ADDRESS\n         USING MSTRREQ,R9            DEFINE BASE\n         ICM   R1,15,COMMIOWK        WORK AREA ACQUIRED?\n         BNZ   MSTR0010              YES\n         GETMAIN RU,                 ACQUIRE WORK AREA                 +\n               LV=WKL,               .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,COMMIOWK           SET WORK AREA ADDRESS\n         LR    R2,R1                 COPY WORK AREA ADDRESS\n         LR    R0,R1                 COPY WORK AREA ADDRESS\n         LA    R1,WKL                SIZE\n         SR    R14,R14               CLEAR ADDRESS 2\n         SR    R15,R15               CLEAR LENGTH 2\n         MVCL  R0,R14                CLEAR WORK AREA\n         ST    R13,4(R2)             SAVE CALLER'S SAVE AREA ADDRESS\n         ST    R2,8(R13)             CHAIN OUR WORK AREA TO CALLER'S\n         LR    R13,R2                SET SAVE AREA ADDRESS\n         USING WK,R13                DEFINE BASE\n         ITRACE ID=INIT\n         MVI   WKFLAG,0              INITIALIZE STATUS FLAGS\n         MVI   PRTCC,C' '            INITIALIZE PRINT I/O AREA\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         CLI   MSTRCMD,$MSTRCLS      END-OF-JOB?\n         BE    EXIT0000              YES\n         MVC   WKDCB(DCBL),DCBI      INITIALIZE DCB\n         MVC   WKOC(OPENL),OPENI     COPY OPEN PARM LIST\n         MVC   WKREAD(READL),READI   INITIALIZE READ\n         MVC   WKWRITE(WRITEL),WRITEI   AND WRITE\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         OPEN  (WKDCB,UPDAT),MF=(E,WKOC)\n         OI    WKFLAG,$OPEN          DCB IS OPEN\n         XC    WKBLOCK,WKBLOCK       SET BLOCK TO ZERO (1ST RECORD)\n         LA    R4,REQBLOK            OUR I/O AREA ADDRESS\n         USING REQBLOK,R4            DEFINE REQBLOK BASE\n         READ  WKREAD,               READ CONTROL RECORD               +\n               DI,                   .. READ DATA BY KEY               +\n               WKDCB,                .. DCB                            +\n               (R4),                 .. I/O AREA                       +\n               REQBLOKL,             .. BLOCK SIZE                     +\n               0,                    .. NO KEY ADDRESS                 +\n               WKBLOCK,              .. BLOCK NUMBER                   +\n               MF=(E,WKREAD)\n         CHECK WKREAD                WAIT FOR AND COMPLETE THE I/O\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         MVC   COMMRECS,REQFSIZE     SAVE NUMBER OF RECORDS IN MASTER\n         DROP  R4\n         B     MSTR0020\nMSTR0010 DS    0H\n         ST    R13,4(R1)             SAVE CALLER'S SAVE AREA ADDRESS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R1                SET SAVE AREA ADDRESS\nMSTR0020 DS    0H\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R9,            .. ADDRESS OF REQUEST BLOCK       +\n               DATA2=MSTRREQ         .. DATA IN REQUEST BLOCK\n         CLI   MSTRCMD,$MSTRCLS      SHUTDOWN?\n         BE    EXIT0000              YES.. EXIT\n         CLI   MSTRCMD,$MSTROPN      OPEN?\n         BE    EXIT0010              YES.. EXIT\nMSTR0030 DS    0H\n         MVC   WKBLOCK+1(2),MSTRREC# COPY BLOCK NUMBER\n         MVI   WKBLOCK,0             FIRST BYTE IS ALWAYS ZERO\n         CLI   MSTRCMD,$MSTRRD       READ A RECORD?\n         BE    MSTR0040              YES\n         CLI   MSTRCMD,$MSTRWRT      WRITE A RECORD?\n         BE    MSTR0050              YES\n         ABEND $U0006,DUMP,,USER\nMSTR0040 DS    0H\n         ITRACE ID=READ\n         LA    R4,REQBLOK            I/O AREA ADDRESS\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         READ  WKREAD,               READ THE MASTER FILE              +\n               DI,                   .. READ DATA BY KEY               +\n               WKDCB,                .. DCB                            +\n               (R4),                 .. I/O AREA                       +\n               REQBLOKL,             .. BLOCK SIZE                     +\n               0,                    .. NO KEY ADDRESS                 +\n               WKBLOCK,              .. BLOCK NUMBER                   +\n               MF=(E,WKREAD)\n         CHECK WKREAD                WAIT FOR AND COMPLETE THE I/O\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         LA    R0,MSTRRECD           USER'S I/O AREA ADDRESS\n         LA    R1,REQBLOKL           LENGTH\n         LR    R5,R1                 COPY LENGTH\n         MVCL  R0,R4                 COPY RECORD TO USER\n         B     EXIT0010              AND EXIT\nMSTR0050 DS    0H\n         ITRACE ID=WRITE\n         LA    R0,MSTRRECD           USER'S I/O AREA ADDRESS\n         LA    R1,REQBLOKL           LENGTH\n         LA    R4,REQBLOK            I/O AREA ADDRESS\n         LR    R5,R1                 LENGTH\n         MVCL  R4,R0                 COPY RECORD TO I/O AREA\n         LA    R4,REQBLOK            RESTORE I/O AREA ADDRESS\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         WRITE WKWRITE,              WRITE A RECORD                    +\n               DI,                   .. WRITE DATA BY KEY              +\n               WKDCB,                .. DCB                            +\n               (R4),                 .. I/O AREA                       +\n               REQBLOKL,             .. BLOCK SIZE                     +\n               0,                    .. NO KEY ADDRESS                 +\n               WKBLOCK,              .. BLOCK NUMBER                   +\n               MF=(E,WKWRITE)\n         CHECK WKWRITE               WAIT FOR AND COMPLETE THE I/O\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         B     EXIT0010              EXIT\n* ------------------------------------------------------------------- *\n*        PRINTING                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE\n         BR    R8                    RETURN\n* ------------------------------------------------------------------- *\n*        EXIT                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=CLEANUP           EXITING MASTER FILE I/O MODULE\n         TM    WKFLAG,$OPEN          IS THE DCB OPEN?\n         BNO   EXIT0010              NO\n         MVC   WKOC(CLOSEL),CLOSEI   INITIALIZE CLOSE PARM LIST\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         CLOSE (WKDCB),MF=(E,WKOC)   CLOSE THE DCB\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         ITRACE ID=EXIT              EXITING MASTER FILE I/O MODULE\n         NI    WKFLAG,255-$OPEN      RESET OPEN FLAG\n         LR    R1,R13                COPY WORK AREA ADDRESS\n         L     R13,4(R13)            RESTORE CALLER'S SAVE AREA ADDRESS\n         FREEMAIN RU,A=(1),LV=WKL    FREE WORK AREA\n         XC    COMMIOWK,COMMIOWK     CLEAR WORK AREA ADDRESS\n         B     EXIT0020\nEXIT0010 DS    0H\n         ITRACE ID=EXIT              EXITING MASTER FILE I/O MODULE\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\nEXIT0020 DS    0H\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\nAM24     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BITS\n         BSM   R0,R15                RETURN IN 24-BIT MODE\nAM31     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BITS\n         O     R15,X80               SET HIGH BIT\n         BSM   R0,R15                RETURN IN 31-BIT MODE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Constants                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nX80      DC    A(X'80000000')\nOPENI    OPEN  (*,UPDAT),MF=L\nOPENL    EQU   *-OPENI\nCLOSEI   CLOSE (*),MF=L\nCLOSEL   EQU   *-CLOSEI\nDCBI     DCB   DSORG=DA,             MASTER FILE DCB                   +\n               DDNAME=MASTER,        .. DDNAME                         +\n               BLKSIZE=REQBLOKL,     .. BLOCK SIZE                     +\n               MACRF=(RIC,WIC),      .. READ/WRITE BY BLOCK NUMBER     +\n               OPTCD=R               .. KEY IS BLOCK NUMBER\nDCBL     EQU   *-DCBI\nREADI    READ  READDECB,             BDAM READ                         +\n               DI,                   .. READ DATA (AND KEY)            +\n               *,                    .. DCB                            +\n               *,                    .. I/O AREA                       +\n               REQBLOKL,             .. BLOCK SIZE                     +\n               0,                    .. NO KEY ADDRESS                 +\n               *,                    .. BLOCK NUMBER                   +\n               MF=L\nREADL    EQU   *-READI\nWRITEI   WRITE WRTDECB,              WRITE A RECORD                    +\n               DI,                   .. WRITE DATA (AND KEY)           +\n               *,                    .. DCB                            +\n               *,                    .. I/O AREA                       +\n               REQBLOKL,             .. BLOCK SIZE                     +\n               0,                    .. NO KEY ADDRESS                 +\n               *,                    .. BLOCK NUMBER                   +\n               MF=L\nWRITEL   EQU   *-WRITEI\n         LTORG\n* ------------------------------------------------------------------- *\n*        Work areas                                                   *\n* ------------------------------------------------------------------- *\nWK       DSECT\nWKSAVE   DS    18F                   REGISTER SAVE AREA\nWKOC     DS    (OPENL)X              OPEN (AND CLOSE) PARM LIST\nWKDCB    DS    (DCBL)X               DCB\nWKREAD   DS    (READL)X              READ\nWKWRITE  DS    (WRITEL)X             WRITE\nWKBLOCK  DS    XL3                   RELATIVE BLOCK NUMBER\nWKFLAG   DS    X                     FLAGS/INDICATORS\n$OPEN    EQU   X'80'                 .. DCB IS OPEN\n         PRTBLOK DSECT=NO\n* --- REQBLOK needs to remain last, a separate base is established -- *\n         REQBLOK DSECT=NO\nWKL      EQU   *-WK\n         MSTRREQ DSECT=YES\n* ------------------------------------------------------------------- *\n*              Common data map                                        *\n* ------------------------------------------------------------------- *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              Equates                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n./ ADD NAME=FXACB    0100-99056-99056-1500-00020-00020-00000-FX-REL1\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  NAME: FXACB                                                        *\n*                                                                     *\n*  This module is only a list of ACB names for the TSO and batch      *\n*  users to use to communicate with the STC.  The only two methods    *\n*  of providing these ACB names I could think of is to assemble them  *\n*  into a module (like this), or to have them in a parm data set and  *\n*  read them at execution time.  I chose to use the load module       *\n*  because you don't have to allocate, open, read, interpret and      *\n*  edit-check, close, and de-allocate the parm data set.              *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  OPTIONS\nFXACB    CSECT\nFXACB    AMODE 31\nFXACB    RMODE ANY\n         GENACB\n         END   FXACB\n./ ADD NAME=FXBCOMM  0100-99056-99056-1500-00013-00013-00000-FX-REL1\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Name: FXBCOMM                                                      *\n*                                                                     *\n*  Batch interface common data and trace table manager                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  OPTIONS\n         FXBCOMM TYPE=CSECT\n         REQBLOK  DSECT=YES\n         COPY  REGEQU\n         END   FXBCOMM\n./ ADD NAME=FXBMAIN  0100-99056-99056-1500-00156-00156-00000-FX-REL1\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Name: FXBMAIN                                                      *\n*                                                                     *\n*  Batch interface mainline.                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  OPTIONS\nFXBMAIN  CSECT\nFXBMAIN  AMODE 31\nFXBMAIN  RMODE ANY\n         USING FXBMAIN,R12          DEFINE BASE\n         STM   R14,R12,12(R13)      SAVE ENTRY REGISTERS\n         LR    R12,R15              COPY BASE\n         B     @@000001             BRANCH AROUND EYECATCHER\n         DC    ((PFXMODNM-MODPRFX)-(*-FXBMAIN))X'00'\nMODID    DC    CL8'FXBMAIN'         MODULE NAME\n         DC    CL8'&SYSDATE'        DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'        TIME OF ASSEMBLY\n@@000001 DS    0H\n* ------------------------------------------------------------------- *\n*        Acquire storage for work areas                               *\n* ------------------------------------------------------------------- *\n         L     R3,DXDSIZE           WORK AREA SIZE\n         GETMAIN RU,                ACQUIRE WORK AREA STORAGE          +\n               LV=(R3),             .. WORK AREA SIZE IS IN R3         +\n               LOC=ANY              .. MAY BE ABOVE OR BELOW\n         LR    R4,R1                COPY STORAGE ADDRESS\n         LR    R10,R1               COPY STORAGE ADDRESS\n         LR    R2,R1                COPY WORK AREA ADDRESS\n         SR    R1,R1                CLEAR REGISTER\n         MVCL  R2,R0                CLEAR WORK AREA\n         A     R10,DXDSTART         PLUS DISPLACEMENT TO OUR PORTION\n         USING DXDBMAIN,R10         DEFINE WORK AREA BASE\n         MVC   DXDID,MODID          IDENTIFY WORK AREA OWNER\n         LA    R2,DXDSAVE           OUR SAVE AREA ADDRESS\n         ST    R13,4(R2)            CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R2,8(R13)            OUR SAVE AREA TO CALLER'S\n         LR    R13,R2               SET SAVE AREA ADDRESS\n* ------------------------------------------------------------------- *\n*        Load common data module  (FXBCOMM)                           *\n* ------------------------------------------------------------------- *\n         LOAD  EP=FXBCOMM           LOAD COMMON DATA MODULE\n         LR    R11,R0               COPY TO PERMANENT BASE\n         USING FXBCOMM,R11          DEFINE COMMON AREA BASE\n         ST    R12,ABMAIN           SET MAINLINE'S ADDRESS IN COMMON\n         ST    R4,COMMDXDA          SET DYNAMIC WORK AREA ADDRESS\n         MVC   ABREQE,VBREQE        SET REQUEST ENTRY PROCSSOR ADDR\n         MVC   ABREQI,VBREQI        SET REQUEST INQUIRY PROCESSOR ADDR\n         LOAD  EP=FXUSER            LOAD USER INTERFACE SUBOUTINE\n         ST    R0,AUSER             SET USER INTERFACE SUBROUTINE ADDR\n         LOAD  EP=FXBPRT            PRINT MODULE\n         ST    R0,ABPRT             SET PRINT MODULE ENTRY POINT\n* ------------------------------------------------------------------- *\n*        Acquire storage for trace table                              *\n* ------------------------------------------------------------------- *\n         L     R3,TRSIZE            TRACE TABLE SIZE\n         GETMAIN RU,                ACQUIRE STORAGE FOR TRACE TABLE    +\n               LV=(R3),             .. SIZE IS IN R3                   +\n               LOC=ANY              .. MAY BE ABOVE OR BELOW\n         ST    R1,TRADDR            SAVE TRACE TABLE STORAGE ADDRESS\n         SR    R0,R0                ASSUME ON A 32-BYTE BOUNDARY\n         TM    TRADDR+3,X'07'       ALREADY ON 32-BYTE BOUNDARY?\n         BNO   INIT0010             YES\n         SRL   R1,5                 SHIFT OUT LOW BITS ..\n         SLL   R1,5                 .. TO ROUND TO 32-BYTE BOUNDARY\n         LA    R1,32(R1)            PLUS 32\n         LA    R0,TRENTRYL          1 LESS TRACE ENTRY AVAILABLE\nINIT0010 DS    0H\n         ST    R1,TRFIRST           FIRST TRACE ENTRY\n         ST    R1,TRCURR            CURRENT TRACE ENTRY\n         A     R1,TRSIZE            LAST ENTRY IN TABLE\n         SH    R1,=Y(TRENTRYL)      MINUS 1 ENTRY\n         SR    R1,R0                MINUS 1 MORE IF NECESSARY\n         ST    R1,TRLAST            LAST TRACE ENTRY ADDRESS\n* ------------------------------------------------------------------- *\n*        Call parameter module                                        *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=CALLPARM\n         LOAD  EP=FXBPARM           LOAD PARAMETER CONVERTER\n         LR    R15,R0               COPY ENTRY POINT ADDRESS\n         BALR  R14,R15              LINK TO PARAMETER MODULE\n         DELETE EP=FXBPARM          DELETE PARAMETER CONVERTER\n         TM    COMMFLAG,$ABORT      ERRORS IN DURING FXBPARM?\n         BO    ERR0010              YES\n* ------------------------------------------------------------------- *\n*        Call request processor                                       *\n* ------------------------------------------------------------------- *\nMAIN0020 DS    0H\n         ICM   R15,15,COMMPROC      PROCESSOR ENTRY POINT (SET BY PARM)\n         BZ    EXIT0000             NO PROCESSOR ADDRESS\n         ITRACE ID=CALLPROC,        CALLING THE PROCESSOR              +\n               RDATA1=R15\n         BALR  R14,R15              LINK TO PROCESSOR\n         B     EXIT0000             AND EXIT\nERR0010  DS    0H\n         ITRACE ID=BADPARM          ERROR(S) IN PARM(S)\n         MVI   COMMRC,100           SET RETURN CODE TO 100\n         B     EXIT0000             AND EXIT\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         TM    COMMFLAG,$ABEND      ABEND FLAG SET?\n         BO    EXIT0010             YES\n         OI    COMMFLAG,$EOJ        SET EOJ\n         L     R15,ABPRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15              SHUTDOWN PRINT\n         DELETE EP=FXBPRT           DELETE PRINT MODULE\n         DELETE EP=FXUSER           DELETE USER INTERFACE SUBROUTINE\n         L     R0,TRSIZE            TRACE TABLE SIZE\n         L     R1,TRADDR            TRACE TABLE STORAGE ADDRESS\n         FREEMAIN RU,A=(1),LV=(0)   FREEMAIN TRACE TABLE STORAGE\n         L     R2,COMMDXDA          SAVE WORK AREA STORAGE ADDRESS\n         SR    R3,R3                CLEAR REGISTER\n         IC    R3,COMMRC            LOAD RETURN CODE\n         DELETE EP=FXBCOMM          DELETE COMMON MODULE\n         L     R0,DXDSIZE           WORK AREA STORAGE SIZE\n         L     R13,4(R13)           RESTORE CALLER'S SAVE AREA ADDRESS\n         FREEMAIN RU,A=(2),LV=(0)   FREEMAIN WORK AREA STORAGE\n         L     R14,12(R13)          RESTORE R14\n         LR    R15,R3               SET RETURN CODE\n         LM    R0,R12,20(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                  EXIT\nEXIT0010 DS    0H\n         ABEND $U0086,DUMP,,USER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Constants                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDBMAIN)          DISPLACEMENT TO WORK AREA\nDXDSIZE  CXD                        WORK AREA TOTAL SIZE\nVBREQE   DC    V(FXBREQE)           TRANSMISSION REQUEST ENTRY\nVBREQI   DC    V(FXBREQI)           TRANSMISSION REQUEST INQUIRY\nH8       DC    H'8'\nHEX0000  DC    8X'00'\nHEXCHAR  DC    C'0123456789ABCDEF'\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Work area                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDBMAIN DSECT\nDXDID    DS    CL8                  WORK AREA OWNER\nDXDSAVE  DS    18F                  REGISTER SAVE AREA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Common data module                                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         FXBCOMM TYPE=DSECT\n         COPY  REGEQU\n         ABCODES\n         END   FXBMAIN\n./ ADD NAME=FXBPARM  0100-99056-99056-1500-00918-00918-00000-FX-REL1\n\n         TITLE 'FXBPARM   PARAMETER INTERPRETER'\n         MACRO\n&NAME    STMT  &KW,&RTN\n         LCLA  &LEN\n         AIF   (T'&KW EQ 'O').NOKEY\n         AIF   (T'&RTN EQ 'O').NORTN\n&LEN     SETA  K'&KW-2\n         DC    AL1(&LEN)           LENGTH OF KEYWORD\n         DC    AL4(&RTN)           ADDRESS OF ROUTINE\n&NAME    DC    C&KW                KEYWORD\n         MEXIT\n.NOKEY   MNOTE 12,'NO KEYWORD'\n         MEXIT\n.NORTN   MNOTE 12,'NO PROCESSING ROUTINE'\n         MEND\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXBPARM                                               *\n*                                                                     *\n*  Batch interface control statement interpreter.                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXBPARM  CSECT\nFXBPARM  AMODE 31\nFXBPARM  RMODE 24\n         USING FXBPARM,R12,R8        DEFINE BASE\n         USING FXBCOMM,R11           DEFINE BASE\n         USING WORK,R10              DEFINE BASE\n         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS\n         LR    R12,R15               SET BASE\n         LA    R8,2048(R12)          SET BASE 2\n         LA    R8,2048(R8)           SET BASE 2\n         B     PARM0000\n         DC    ((PFXMODNM-MODPRFX)-(*-FXBPARM))X'00'\n         DC    CL8'FXBPARM'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nPARM0000 DS   0H\n         GETMAIN RU,                 ACQUIRE STORAGE FOR WORK AREA     +\n               LV=WORKL,             .. AMOUNT OF STORAGE REQUIRED     +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R10,R1                COPY WORK AREA ADDRESS\n         LA    R1,WORKSAVE           SAVE AREA ADDRESS IN WORK AREA\n         ST    R1,8(R13)             CHAIN TO PREVIOUS SAVE AREA\n         ST    R13,4(R1)             CHAIN PREVIOUS TO OURS\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         MVI   PRTCC,C' '            INITIALIZE PRINT\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         MVC   WKDCB(DCBL),DCBI      INITIALIZE DCB\n         MVC   WKOC(OPENL),OPENI     INITIALIZE OPEN\n         LA    R2,WKDCB              DCB ADDRESS\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         OPEN  ((R2),INPUT),MF=(E,WKOC)\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\nPARM0010 DS   0H\n         ITRACE ID=READCARD          READ A CONTROL STATEMENT\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         GET   WKDCB,CARDDATA        READ A CONTROL RECORD\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         MVC   PRTMSGID(MSG01L),MSG01\n         MVC   PRTMSGID+(MSG01D-MSG01)(L'MSG01D),CARDDATA\n         BAL   R9,PRT0000            PRINT CONTROL STATEMENT\n         LA    R1,STMTTBLE           STATEMENT/ROUTINE TABLE\n         SR    R15,R15               CLEAR REGISTER\n         USING STMTDSCT,R1           DEFINE BASE\nPARM0020 DS    0H\n         CLI   STMTLEN,X'FF'         END OF TABLE?\n         BE    PARM0040              YES\n         IC    R15,STMTLEN           LENGTH OF KEYWORD\n         BCTR  R15,0                 MINUS 1\n         EX    R15,STMTCLC           CONTROL KEYWORD FOUND?\n         BE    PARM0030              YES\n         LA    R1,STMTL+1(R1,R15)    NEXT STMT TABLE ENTRY\n         B     PARM0020              LOOP\nPARM0030 DS    0H\n         ICM   R15,15,STMTADDR       PROCESSING ROUTINE ADDRESS\n         BR    R15                   ENTER THE ROUTINE\nPARM0040 DS    0H\n         ITRACE ID=INVALID           INVALID STATEMENT\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG02L),MSG02\n         BAL   R9,PRT0000            PRINT ERROR MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nSTMTCLC  CLC   STMTKYWD(0),CARDDATA\nPARM0100 DS    0H\n         BAL   R15,AM31              RETURN TO 31-BIT MODE\n         TM    DXDFLAG,$XMIT+$STAT   BOTH XMIT AND STATUS?\n         BO    PARM0120              YES\n         TM    DXDFLAG,$XMIT         XMIT REQUEST?\n         BO    PARM0110              YES\n         TM    DXDFLAG,$STAT         STATUS REQUEST?\n         BO    PARM0140              YES\n         OI    COMMFLAG,$ABORT       SET ABORT\n         MVC   PRTMSGID(MSG03L),MSG03\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     EXIT0000              AND EXIT\nPARM0110 DS    0H\n         TM    COMMFLAG,$ABORT       ABORT FLAG SET?\n         BO    EXIT0000              YES.. EXIT NOW\n         MVC   COMMPROC,ABREQE       SET PROCESSOR ADDRESS\n         CLC   COMMFX,COMMBLKS       FX STC APPL NAME BLANK?\n         BNE   PARM0130              NO\n         MVC   PRTMSGID(MSG04L),MSG04\n         BAL   R9,PRT0000            PRINT MESSAGE\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\nPARM0120 DS    0H\n         OI    COMMFLAG,$ABORT       SET ABORT\n         MVC   PRTMSGID(MSG05L),MSG05\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     EXIT0000              AND EXIT\nPARM0130 DS    0H\n         MVC   COMMPROC,ABREQE       SET PROCESSOR ADDRESS\n         B     EXIT0000              AND EXIT\nPARM0140 DS    0H\n         MVC   COMMPROC,ABREQI       SET PROCESSOR ADDRESS\n         B     EXIT0000              AND EXIT\n*---------------------------------------------------------------------*\n*        Process ABEND statement                                      *\n*---------------------------------------------------------------------*\nABND0000 DS    0H\n         ITRACE ID=SETABEND          ABEND STATEMENT PROCESSED\n         OI    COMMFLAG,$ABEND       SET ABEND FLAG\n         B     PARM0010              READ NEXT STATEMENT\n*---------------------------------------------------------------------*\n*        Process ALIAS statement                                      *\n*---------------------------------------------------------------------*\nALIAS000 DS    0H\n         ITRACE ID=ALIAS\n         CLI   COMMALAS,C' '         ALIAS ALREADY GIVEN?\n         BE    ALIAS010              YES\n         MVI   COMMALAS,C'Y'         SET SEND ALIASES\n         B     PARM0010\nALIAS010 DS    0H\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG06L),MSG06       DUPLICATED ALIAS STATEMENT\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\n*---------------------------------------------------------------------*\n*        Process ATTEMPTS statement                                   *\n*---------------------------------------------------------------------*\nATTM0000 DS    0H\n         ITRACE ID=ATTEMPTS          ATTEMPTS STATEMENT PROCESSED\n         CLC   UNLIMIT,CARDDATA+L'ATTMSTMT\n         BE    ATTM0030              NO LIMIT TO ATTEMPTS\n         LA    R1,CARDDATA+L'ATTMSTMT FIRST DIGIT\n         MVC   DXDWORK(3),=C'000'    INITIALIZE TO ZERO\n         LA    R2,3                  MAXIMUM DIGITS\nATTM0010 DS    0H\n         CLI   0(R1),C' '            END OF DIGITS?\n         BE    ATTM0020              YES\n         CLI   0(R1),C'0'            INVALID DIGIT?\n         BL    ATTM0040              YES\n         CLI   0(R1),C'9'            INVALID DIGIT?\n         BH    ATTM0040              YES\n         MVC   DXDWORK(2),DXDWORK+1  SHIFT LEFT 1 DIGIT\n         MVC   DXDWORK+2(1),0(R1)    COPY DIGIT\n         LA    R1,1(R1)              NEXT DIGIT\n         BCT   R2,ATTM0010           LOOP\nATTM0020 DS    0H\n         CLI   0(R1),C' '            BLANK?\n         BNE   ATTM0050              NO.. TOO MANY DIGITS\n         PACK  COMMDWRD,DXDWORK(3)   PACK NUMBER OF ATTEMPTS\n         CVB   R1,COMMDWRD           CONVERT TO BINARY\n         LTR   R1,R1                 NUMBER OF ATTEMPTS ZERO?\n         BZ    ATTM0060              YES\n         ITRACE ID=ATTEMP#,          SETTING NUMBER OF ATTEMPTS        +\n               RDATA1=R1\n         STH   R1,COMMATTM           SAVE NUMBER OF ATTEMPTS\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nATTM0030 DS    0H\n         OI    COMMFLAG,$NOLIMIT     INDICATE NO LIMIT TO ATTEMPTS\n         B     PARM0010              READ NEXT STATEMENT\nATTM0040 DS    0H\n         ITRACE ID=BADDIGIT          BAD DIGIT\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG07L),MSG07       BAD DIGIT IN ATTEMPTS\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nATTM0050 DS    0H\n         ITRACE ID=LONGATTM          TOO MANY DIGITS\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG08L),MSG08       TOO MANY DIGITS\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nATTM0060 DS    0H\n         ITRACE ID=ATTMZERO          NUMBER OF ATTEMPTS IS ZERO\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG09L),MSG09       NUMBER OF ATTEMPTS IS ZERO\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\n*---------------------------------------------------------------------*\n*        Process FX statement                                         *\n*---------------------------------------------------------------------*\nFX0000   DS    0H\n         ITRACE ID=FX                FX STATEMENT BEING PROCESSED\n         TM    DXDFLAG,$FX           FX APPL ALREADY SPECIFIED?\n         BO    FX0030                YES\n         OI    DXDFLAG,$FX           SET FX STATEMENT FLAG\n         LA    R1,CARDDATA+L'FXSTMT FIRST CHARACTER OF APPL NAME\n         ST    R1,PARSEIN            SET INPUT DATA ADDRESS\n         LA    R1,72-L'FXSTMT        MAXIMUM INPUT LENGTH\n         STH   R1,PARSEIL            SET INPUT LENGTH\n         LA    R1,8                  MAXIMUM CHARACTERS IN NAME\n         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH\n         BAL   R9,PARSE000           LINK TO PARSE\n         OC    PARSEOL,PARSEOL       NAME LENGTH ZERO?\n         BZ    FX0010                YES\n         CLI   PARSEDLM,C' '         STOPPED ON A BLANK?\n         BNE   FX0020                NO.. NAME IS TOO LONG\n         ITRACE ID=GOODFX            FX NAME IS OK (AS FAR AS LENGTH)\n         MVC   COMMFX,PARSEOUT       SAVE FX STC APPL NAME\n         B     PARM0010              READ NEXT STATEMENT\nFX0010   DS    0H\n         ITRACE ID=NOFX              FX STC APPL NAME OMITTED\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG10L),MSG10       APPL NAME OMITTED\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nFX0020   DS    0H\n         ITRACE ID=LONGFX            FX STC APPL NAME IS TOO LONG\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG11L),MSG11       APPL NAME IS TOO LONG\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nFX0030   DS    0H\n         ITRACE ID=DUPFX             DUPLICATE FX STATEMENT\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG12L),MSG12\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\n*---------------------------------------------------------------------*\n*        Process DATASET statement                                    *\n*---------------------------------------------------------------------*\nDSN1000  DS    0H\n         ITRACE ID=DSN1\n         OI    DXDFLAG,$XMIT         NEW XMIT REQUEST\n         TM    DXDFLAG2,$DXDDSN1     DATA SET NAME ALREADY GIVEN?\n         BO    DSN1010               YES\n         OI    DXDFLAG2,$DXDDSN1     DATA SET NAME STATEMENT FOUND\n         LA    R1,CARDDATA+L'DSN1STMT\n         ST    R1,PARSEIN            PARSE INPUT STARTING ADDRESS\n         LA    R1,72-L'DSN1STMT      LENGTH OF DATA LEFT ON STATEMENT\n         STH   R1,PARSEIL            SET DATA LENGTH\n         LA    R1,44                 MAXIMUM DATASET NAME LENGTH\n         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH\n         BAL   R9,PARSE000           LINK TO PARSE\n         OC    PARSEOL,PARSEOL       OUTPUT LENGTH ZERO?\n         BZ    DSN1020               YES\n         MVC   COMMODSN,PARSEOUT     SAVE DATASET NAME\n         B     PARM0010              READ NEXT STATEMENT\nDSN1010  DS    0H\n         ITRACE ID=DUPDSN\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG13L),MSG13       DUPLICATE DSN STATEMENT\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nDSN1020  DS    0H\n         ITRACE ID=NODSN\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG14L),MSG14       DATASET NAME OMITTED\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\n*---------------------------------------------------------------------*\n*        PROCESS NEW DSN STATEMENT                                    *\n*---------------------------------------------------------------------*\nDSN2000  DS    0H\n         ITRACE ID=DSN2\n         OI    DXDFLAG,$XMIT         NEW XMIT REQUEST\n         TM    DXDFLAG2,$DXDDSN2     NEW DSN ALREADY GIVEN?\n         BO    DSN2010               YES\n         OI    DXDFLAG2,$DXDDSN2     NEW DSN STATEMENT FOUND\n         LA    R1,CARDDATA+L'DSN2STMT\n         ST    R1,PARSEIN            PARSE INPUT STARTING ADDRESS\n         LA    R1,72-L'DSN2STMT      LENGTH OF DATA LEFT ON STATEMENT\n         STH   R1,PARSEIL            SET DATA LENGTH\n         LA    R1,44                 MAXIMUM DATASET NAME LENGTH\n         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH\n         BAL   R9,PARSE000           LINK TO PARSE\n         OC    PARSEOL,PARSEOL       OUTPUT LENGTH ZERO?\n         BZ    DSN2020               YES\n         MVC   COMMDDSN,PARSEOUT     SAVE NEWNAME NAME\n         B     PARM0010              READ NEXT STATEMENT\nDSN2010  DS    0H\n         ITRACE ID=DUPDSN\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG15L),MSG15       DUPLICATE DSN STATEMENT\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nDSN2020  DS    0H\n         ITRACE ID=NODSN\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG16L),MSG16       DATASET NAME OMITTED\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\n*---------------------------------------------------------------------*\n*        Process MEMBER statement                                     *\n*---------------------------------------------------------------------*\nMEM1000  DS    0H\n         ITRACE ID=MEM1\n         OI    DXDFLAG,$XMIT         NEW XMIT REQUEST\n         TM    DXDFLAG2,$DXDMEM1     MEMBER NAME ALREADY GIVEN?\n         BO    MEM1010               YES\n         OI    DXDFLAG2,$DXDMEM1     MEMBER NAME GIVEN\n         LA    R1,CARDDATA+L'MEM1STMT\n         ST    R1,PARSEIN            PARSE INPUT STARTING ADDRESS\n         LA    R1,72-L'MEM1STMT      LENGTH OF DATA LEFT ON STATEMENT\n         STH   R1,PARSEIL            SET DATA LENGTH\n         LA    R1,8                  MAXIMUM NAME LENGTH\n         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH\n         BAL   R9,PARSE000           LINK TO PARSE\n         OC    PARSEOL,PARSEOL       OUTPUT LENGTH ZERO?\n         BZ    DSN1020               YES\n         MVC   COMMOMEM,PARSEOUT     COPY MEMBER NAME\n         B     PARM0010\nMEM1010  DS    0H\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG17L),MSG17       DUPLICATE MEMBER NAME\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nMEM1020  DS    0H\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG18L),MSG18       MEMBER NAME OMITTED\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\n*---------------------------------------------------------------------*\n*        Process NEW MEM statement                                    *\n*---------------------------------------------------------------------*\nMEM2000  DS    0H\n         OI    DXDFLAG,$XMIT         NEW XMIT REQUEST\n         TM    DXDFLAG2,$DXDMEM2     NEW MEMBER NAME ALREADY GIVEN?\n         BO    MEM2010               YES\n         OI    DXDFLAG2,$DXDMEM2     NEW MEMBER NAME GIVEN\n         LA    R1,CARDDATA+L'MEM2STMT\n         ST    R1,PARSEIN            PARSE INPUT STARTING ADDRESS\n         LA    R1,72-L'MEM2STMT      LENGTH OF DATA LEFT ON STATEMENT\n         STH   R1,PARSEIL            SET DATA LENGTH\n         LA    R1,8                  MAXIMUM NAME LENGTH\n         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH\n         BAL   R9,PARSE000           LINK TO PARSE\n         OC    PARSEOL,PARSEOL       OUTPUT LENGTH ZERO?\n         BZ    DSN2020               YES\n         MVC   COMMDMEM,PARSEOUT     COPY MEMBER NAME\n         B     PARM0010\nMEM2010  DS    0H\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG19L),MSG19       DUPLICATE MEMBER NAME\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nMEM2020  DS    0H\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG18L),MSG18       MEMBER NAME OMITTED\n         BAL   R9,PRT0000            PRINT\n*---------------------------------------------------------------------*\n*        Process DEST statement                                       *\n*---------------------------------------------------------------------*\nDEST0000 DS    0H\n         ITRACE ID=DEST\n         OI    DXDFLAG,$XMIT         NEW XMIT REQUEST\n         LA    R1,CARDDATA+L'DESTSTMT\n         ST    R1,PARSEIN            PARSE INPUT STARTING ADDRESS\n         LA    R1,72-L'DESTSTMT      LENGTH OF DATA LEFT ON STATEMENT\n         STH   R1,PARSEIL            SET DATA LENGTH\n         LA    R1,8                  MAXIMUM DESTINATION NAME LENGTH\n         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH\n         BAL   R9,PARSE000           LINK TO PARSE\n         OC    PARSEOL,PARSEOL       OUTPUT LENGTH ZERO?\n         BZ    DEST0050              YES\n         LH    R1,COMMNDE#           NUMBER OF NODES\n         CH    R1,=Y($MAXNODE)       TOO MANY DESTINATIONS?\n         BE    DEST0060              YES\n         LA    R1,1(R1)              ADD 1 TO DESTINATIONS\n         STH   R1,COMMNDE#           SAVE TOTAL\n         LA    R2,COMMDEST           FIRST DESTINATION\nDEST0010 DS    0H\n         CLC   0(L'COMMDEST,R2),COMMBLKS AVALABLE ENTRY?\n         BE    DEST0020                  YES\n         CLC   0(L'COMMDEST,R2),PARSEOUT DUPLICATED DESTINATION?\n         BE    DEST0070                  YES\n         LA    R2,L'COMMDEST(R2)         NEXT DESTINATION\n         B     DEST0010                  LOOP\nDEST0020 DS    0H\n         MVC   0(L'COMMDEST,R2),PARSEOUT SAVE DESTINATION NAME\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nDEST0050 DS    0H\n         ITRACE ID=NODEST            DESTINATION NAME OMITTED\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG20L),MSG20\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nDEST0060 DS    0H\n         ITRACE ID=TOOMANY           TOO MANY DESTINATIONS\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG21L),MSG21\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nDEST0070 DS    0H\n         ITRACE ID=DUPDEST           DUPLICATED DESTINATION DEFINITION\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG22L),MSG22\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\n*---------------------------------------------------------------------*\n*        Process INTERVAL statement                                   *\n*---------------------------------------------------------------------*\nINTV0000 DS    0H\n         ITRACE ID=INTERVAL          INTERVAL STATEMENT PROCESSED\n         TM    DXDFLAG2,$DXDINTV     INTERVAL STATEMENT ALREADY FOUND?\n         BO    INTV0060              YES\n         OI    DXDFLAG2,$DXDINTV     INTERVAL STATEMENT FOUND\n         LA    R1,CARDDATA+L'INTVSTMT FIRST DIGIT\n         MVC   DXDWORK(3),=C'000'    INITIALIZE TO ZERO\n         LA    R2,3                  MAXIMUM DIGITS\nINTV0010 DS    0H\n         CLI   0(R1),C' '            END OF DIGITS?\n         BE    INTV0020              YES\n         CLI   0(R1),C'0'            INVALID DIGIT?\n         BL    INTV0040              YES\n         CLI   0(R1),C'9'            INVALID DIGIT?\n         BH    INTV0040              YES\n         MVC   DXDWORK(2),DXDWORK+1  SHIFT LEFT 1 DIGIT\n         MVC   DXDWORK+2(1),0(R1)    COPY DIGIT\n         LA    R1,1(R1)              NEXT DIGIT\n         BCT   R2,INTV0010           LOOP\nINTV0020 DS    0H\n         CLI   0(R1),C' '            BLANK?\n         BNE   INTV0050              NO.. TOO MANY DIGITS\n         PACK  COMMDWRD,DXDWORK(3)   PACK NUMBER OF ATTEMPTS\n         CVB   R1,COMMDWRD           CONVERT TO BINARY\n         LTR   R1,R1                 ZERO?\n         BZ    INTV0030              YES\n         MH    R1,H100               MULTIPLY BY 100\n         ST    R1,COMMINTV           SET INTERVAL\n         ITRACE ID=INTVVAL,          SETTING INTERVAL VALUE            +\n               RDATA1=R1\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nINTV0030 DS    0H\n         ITRACE ID=INTVZERO          INTERVAL IS ZERO\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG23L),MSG23       INTERVAL IS ZERO\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nINTV0040 DS    0H\n         ITRACE ID=BADDIGIT          BAD DIGIT\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG24L),MSG24       BAD DIGIT IN INTERVAL\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nINTV0050 DS    0H\n         ITRACE ID=LONGINTV          TOO MANY DIGITS\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG25L),MSG25       TOO MANY DIGITS\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nINTV0060 DS    0H\n         ITRACE ID=DUPINTV           DUPLICATE INTERVAL STATEMENT\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG26L),MSG26       TOO MANY DIGITS\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\n*---------------------------------------------------------------------*\n*        Process REPLACE statement                                    *\n*---------------------------------------------------------------------*\nREPL0000 DS    0H\n         ITRACE ID=REPLACE\n         CLI   COMMREPL,C' '         REPLACE ALREADY GIVEN?\n         BE    REPL0010              YES\n         MVI   COMMREPL,C'Y'         SET DO REPLACE\n         B     PARM0010\nREPL0010 DS    0H\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG27L),MSG27     DUPLICATED REPLACE STATEMENT\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\n*---------------------------------------------------------------------*\n*        Process STATUS statement                                     *\n*---------------------------------------------------------------------*\nSTAT0000 DS    0H\n         ITRACE ID=STATUS            XMITFX STATEMENT BEING PROCESSED\n         OI    DXDFLAG,$STAT         STATUS REQUEST\n         OC    COMMNBR,COMMNBR       STATUS STATEMENT ALREADY FOUND?\n         BNE   STAT0020              YES\n         LA    R1,CARDDATA+L'STATSTMT FIRST DIGIT OF REQUEST NUMBER\n         ST    R1,PARSEIN            SET INPUT DATA ADDRESS\n         LA    R1,72-L'STATSTMT      MAXIMUM INPUT LENGTH\n         STH   R1,PARSEIL            SET INPUT LENGTH\n         LA    R1,8                  MAXIMUM CHARACTERS IN NODE NAME\n         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH\n         BAL   R9,PARSE000           LINK TO PARSE\n         OC    PARSEOL,PARSEOL       NAME LENGTH ZERO?\n         BZ    STAT0060              YES\n         CLI   PARSEDLM,C','         STOPPED ON A COMMA?\n         BNE   STAT0030              NO.. INVALID\n         MVC   COMMNODE,PARSEOUT     COPY NODE NAME\n         LA    R1,9                  MAXIMUM DIGITS IN REQUEST NUMBER\n         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH\n         BAL   R9,PARSE000           LINK TO PARSE\n         OC    PARSEOL,PARSEOL       REQUEST NUMBER LENGTH ZERO?\n         BZ    STAT0030\n         CLI   PARSEDLM,C' '         STOPPED ON A BLANK?\n         BNE   STAT0040              NO.. REQUEST NUMBER IS TOO LONG\n         LA    R1,PARSEOUT           FIRST DIGIT\n         LH    R2,PARSEOL            NUMBER OF DIGITS\nSTAT0010 DS    0H\n         CLI   0(R1),C'0'            VALID DIGIT?\n         BL    STAT0050              NO\n         CLI   0(R1),C'9'            VALID DIGIT?\n         BH    STAT0050              NO\n         LA    R1,1(R1)              NEXT DIGIT\n         BCT   R2,STAT0010           LOOP\n         LH    R2,PARSEOL            LENGTH (AGAIN)\n         BCTR  R2,0                  ADJUST FOR EX\n         EX    R2,STATPACK           PACK REQUEST NUMBER\n         CVB   R1,COMMDWRD           CONVERT TO BINARY\n         ST    R1,COMMNBR            SET REQUEST NUMBER\n         MVC   COMMDDSN,PARSEOUT     SAVE NEWNAME NAME\n         B     PARM0010              READ NEXT STATEMENT\nSTAT0020 DS    0H\n         OI    COMMFLAG,$ABORT       SET ABORT\n         MVC   PRTMSGID(MSG28L),MSG28       DUPLICATE STATUS STMT\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nSTAT0030 DS    0H\n         OI    COMMFLAG,$ABORT       SET ABORT\n         MVC   PRTMSGID(MSG29L),MSG29       REQUEST NUMBER OMITTED\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nSTAT0040 DS    0H\n         OI    COMMFLAG,$ABORT       SET ABORT\n         MVC   PRTMSGID(MSG30L),MSG30       REQUEST NUMBER TOO LONG\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nSTAT0050 DS    0H\n         OI    COMMFLAG,$ABORT       SET ABORT\n         MVC   PRTMSGID(MSG31L),MSG31       BAD DIGIT IN IN REQUEST #\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nSTAT0060 DS    0H\n         OI    COMMFLAG,$ABORT       SET ABORT\n         MVC   PRTMSGID(MSG32L),MSG32       NODE NAME OMITTED\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nSTATPACK PACK  COMMDWRD,PARSEOUT(1)  PACK REQUEST NUMBER\n*---------------------------------------------------------------------*\n*        Process XMITFX statement                                     *\n*---------------------------------------------------------------------*\nXMIT0000 DS    0H\n         ITRACE ID=XMITFX            XMITFX STATEMENT BEING PROCESSED\n         OI    DXDFLAG,$XMIT         NEW XMIT REQUEST\n         CLC   COMMTNDE,COMMBLKS     XMITFX ALREADY SPECIFIED?\n         BNE   XMIT0030              YES\n         LA    R1,CARDDATA+L'FXSTMT FIRST CHARACTER OF APPL NAME\n         ST    R1,PARSEIN            SET INPUT DATA ADDRESS\n         LA    R1,72-L'FXSTMT        MAXIMUM INPUT LENGTH\n         STH   R1,PARSEIL            SET INPUT LENGTH\n         LA    R1,8                  MAXIMUM CHARACTERS IN NAME\n         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH\n         BAL   R9,PARSE000           LINK TO PARSE\n         OC    PARSEOL,PARSEOL       NAME LENGTH ZERO?\n         BZ    XMIT0010              YES\n         CLI   PARSEDLM,C' '         STOPPED ON A BLANK?\n         BNE   XMIT0020              NO.. NAME IS TOO LONG\n         ITRACE ID=GOODXMIT          FX NAME IS OK (AS FAR AS LENGTH)\n         MVC   COMMTNDE,PARSEOUT     SAVE XMITFX NAME\n         B     PARM0010              READ NEXT STATEMENT\nXMIT0010 DS    0H\n         ITRACE ID=NOXMIT            XMITFX STC APPL NAME OMITTED\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG33L),MSG33       APPL NAME OMITTED\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nXMIT0020 DS    0H\n         ITRACE ID=LONGXMIT          XMITFX STC APPL NAME IS TOO LONG\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG34L),MSG34      XMIT APPL NAME IS TOO LONG\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nXMIT0030 DS    0H\n         ITRACE ID=DUPXMIT           DUPLICATE XMITFX STATEMENT\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG35L),MSG35\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Parsing                                                            *\n*                                                                     *\n*  At entry:                                                          *\n*     PARSEIN  must be set to the data starting address               *\n*     PARSEIL  must be set to the data length                         *\n*     PARSEOL  must be set to the maximum output length               *\n*                                                                     *\n*  At exit:                                                           *\n*     PARSEIN  will be set the address of the byte following the      *\n*              delimiter that stopped the scan                        *\n*     PARSEIL  will be set to the length of the data following the    *\n*              delimiter                                              *\n*     PARSEOUT will be the data up to but not including the delimiter *\n*     PARSEOL  will be set to the length of the data in PARSEOUT      *\n*     PARSEDLM will be set to the delimiter that stopped the scan or  *\n*              to a null if the scan stopped due to end of data       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARSE000 DS    0H\n         ITRACE ID=PARSE,            STARTING A PARSE                  +\n               DATA1=PARSEIN,        .. STARTING ADDRESS               +\n               DATA2=PARSEIL         .. INPUT AND OUTPUT LENGTHS\n         MVC   PARSEOUT,COMMBLKS     CLEAR OUTPUT DATA\n         LH    R1,PARSEIL            INPUT DATA LENGTH\n         LH    R2,PARSEOL            MAXIMUM OUTPUT LENGTH\n         L     R3,PARSEIN            INPUT DATA ADDRESS\n         LA    R4,PARSEOUT           OUTPUT DATA ADDRESS\n         SR    R5,R5                 INITIALIZE FOR OUTPUT LENGTH\n         MVI   PARSEDLM,0            SET DELIMITER TO A NULL\n         LTR   R1,R1                 ANY DATA LEFT?\n         BZ    PARSE050              NO\nPARSE010 DS    0H\n         CLI   0(R3),C' '            BLANK?\n         BNE   PARSE020              NO\n         LA    R3,1(R3)              NEXT\n         BCT   R1,PARSE010           LOOP\n         B     PARSE050\nPARSE020 DS    0H\n         CLI   0(R3),C' '            BLANK?\n         BE    PARSE040              YES\n         CLI   0(R3),C','            COMMA?\n         BE    PARSE040              YES\n         MVC   0(1,R4),0(R3)         COPY TO OUTPUT\n         LA    R3,1(R3)              NEXT\n         LA    R4,1(R4)              NEXT\n         LA    R5,1(R5)              PLUS 1 BYTE OF LENGTH\n         BCT   R1,PARSE030           MINUS 1 BYTE OF INPUT\n         B     PARSE050              FORCE EXIT\nPARSE030 DS    0H\n         BCT   R2,PARSE020           LOOP\n         CLI   0(R3),C' '            BLANK?\n         BE    PARSE040              YES\n         CLI   0(R3),C','            COMMA?\n         BNE   PARSE050              NO\nPARSE040 DS    0H\n         MVC   PARSEDLM,0(R3)        SAVE DELIMITER\n         LA    R3,1(R3)              SKIP DELIMITER\n         BCTR  R1,0                  MINUS BYTE USED BY DELIMITER\nPARSE050 DS    0H\n         STH   R1,PARSEIL            SAVE INPUT LENGTH LEFT\n         STH   R5,PARSEOL            SAVE OUTPUT LENGTH\n         ST    R3,PARSEIN            SAVE INPUT ENDING POINT\n         ITRACE ID=PARSEOUT,         PARSE ENDING                      +\n               DATA1=PARSEOUT,       .. PART OF OUTPUT DATA            +\n               DATA2=PARSEOL         .. OUTPUT LENGTH\n         LM    R1,R5,PARSESAV        RESTORE SAVED REGISTERS\n         BR    R9                    EXIT\n* ------------------------------------------------------------------- *\n*        PRINTING                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         ITRACE ID=PRINT\n         MVI   PRTCMD,$PRTPRT        SET COMMAND\n         LA    R1,PRTBLOK            PRINT PARAMETERS\n         L     R15,ABPRT             PRINT ENTRY POINT\n         BALR  R14,R15               LINK TO PRINT\n         MVI   PRTCC,C' '            CLEAR PRINT AREA\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         BR    R9                    RETURN\n* ------------------------------------------------------------------- *\n*        EXIT                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         MVC   WKOC(CLOSEL),CLOSEI   COPY CLOSE\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         LA    R2,WKDCB              DCB ADDRESS\n         CLOSE ((R2)),MF=(E,WKOC)    CLOSE DCB\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         ITRACE ID=EXIT              EXITING PARAMETER CONVERTER\n         LR    R1,R13                SAVE SAVE AREA ADDRESS\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         FREEMAIN RU,A=(1),LV=WORKL  FREEMAIN WORK AREA\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\nAM24     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         BSM   R0,R15                SWITCH TO 24-BIT MODE\nAM31     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         O     R15,X80               TURN ON 31-BIT MODE BIT\n         BSM   R0,R15                SWITCH TO 31-BIT MODE\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        CONSTANTS                                                   *\n*                                                                    *\n* ------------------------------------------------------------------ *\nX80      DC    A(X'80000000')\nH8       DC    H'8'                  CONSTANT\nH15      DC    H'15'                 CONSTANT\nH100     DC    H'100'                CONSTANT\nSTMTTBLE DS    0C\n         STMT  'ABEND',ABND0000\n         STMT  'ALIAS',ALIAS000\nATTMSTMT STMT  'ATTEMPTS=',ATTM0000\nDESTSTMT STMT  'DEST=',DEST0000\nDSN1STMT STMT  'DSN=',DSN1000\nFXSTMT   STMT  'FX=',FX0000\nINTVSTMT STMT  'INTERVAL=',INTV0000\nMEM1STMT STMT  'MEMBER=',MEM1000\nDSN2STMT STMT  'NEW DSN=',DSN2000\nMEM2STMT STMT  'NEW MEM=',MEM2000\n         STMT  'REPLACE ',REPL0000\nSTATSTMT STMT  'STATUS=',STAT0000\n         STMT  'XMITFX=',XMIT0000\n         DC    X'FF'\nUNLIMIT  DC    C'UNLIMITED '         UNLIMITED NUMBER OF WAITS\nMSG01    DS    0C\n         DC    CL11'FXBPARM01I'\n         DC    C'CONTROL STATEMENT:'\n         DC    C' '\nMSG01D   DC    CL80' '\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'FXBPARM02E'\n         DC    C'INVALID CONTROL STATEMENT'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'FXBPARM03E'\n         DC    C'NO NEW XMIT REQUEST OR STATUS REQUEST FOUND'\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    CL11'FXBPARM04E'\n         DC    C'REQUIRED PARAMETER ''FX'' NOT SPECIFIED OR BLANK'\nMSG04L   EQU    *-MSG04\nMSG05    DS    0C\n         DC    CL11'FXBPARM05E'\n         DC    C'BOTH XMIT REQUEST AND STATUS REQUEST FOUND'\nMSG05L   EQU   *-MSG05\nMSG06    DS    0C\n         DC    CL11'FXBPARM06E'\n         DC    C'DUPLICATE ALIAS STATEMENT'\nMSG06L   EQU   *-MSG06\nMSG07    DS    0C\n         DC    CL11'FXBPARM07E'\n         DC    C'INVALID DIGIT IN ATTEMPTS VALUE'\nMSG07L   EQU    *-MSG07\nMSG08    DS    0C\n         DC    CL11'FXBPARM08E'\n         DC    C'TOO MANY DIGITS IN ATTEMPTS VALUE'\nMSG08L   EQU    *-MSG08\nMSG09    DS    0C\n         DC    CL11'FXBPARM09E'\n         DC    C'NUMBER OF ATTEMPTS MAY NOT BE ZERO'\nMSG09L   EQU   *-MSG09\nMSG10    DS    0C\n         DC    CL11'FXBPARM10E'\n         DC    C'FX STC NAME OMITTED'\nMSG10L   EQU   *-MSG10\nMSG11    DS    0C\n         DC    CL11'FXBPARM11E'\n         DC    C'FX STC APPLID IS TOO LONG (MAX IS 8 CHARACTERS)'\nMSG11L   EQU   *-MSG11\nMSG12    DS    0C\n         DC    CL11'FXBPARM12E'\n         DC    C'DUPLICATE FX STC APPL ID STATEMENT'\nMSG12L   EQU   *-MSG12\nMSG13    DS    0C\n         DC    CL11'FXBPARM13E'\n         DC    C'DUPLICATE DSN= STATEMENT'\nMSG13L   EQU    *-MSG13\nMSG14    DS    0C\n         DC    CL11'FXBPARM14E'\n         DC    C'DATASET NAME OMITTED'\nMSG14L   EQU    *-MSG14\nMSG15    DS    0C\n         DC    CL11'FXBPARM15E'\n         DC    C'DUPLICATE NEW DSN= STATEMENT'\nMSG15L   EQU    *-MSG15\nMSG16    DS    0C\n         DC    CL11'FXBPARM16E'\n         DC    C'NEW NAME OMITTED'\nMSG16L   EQU    *-MSG16\nMSG17    DS    0C\n         DC    CL11'FXBPARM17E'\n         DC    C'DUPLICATE MEM= STATEMENT'\nMSG17L   EQU   *-MSG17\nMSG18    DS    0C\n         DC    CL11'FXBPARM18E'\n         DC    C'MEMBER NAME OMITTED'\nMSG18L   EQU   *-MSG18\nMSG19    DS    0C\n         DC    CL11'FXBPARM19E'\n         DC    C'DUPLICATE NEW MEM= STATEMENT'\nMSG19L   EQU   *-MSG19\nMSG20    DS    0C\n         DC    CL11'FXBPARM20E'\n         DC    C'DESTINATION NAME OMITTED'\nMSG20L   EQU   *-MSG20\nMSG21    DS    0C\n         DC    CL11'FXBPARM21E'\n         DC    C'TOO MANY DESTINATIONS'\nMSG21L   EQU   *-MSG21\nMSG22    DS    0C\n         DC    CL11'FXBPARM22E'\n         DC    C'DUPLICATED DESTINATION DEFINITION'\nMSG22L   EQU   *-MSG22\nMSG23    DS    0C\n         DC    CL11'FXBPARM23E'\n         DC    C'INTERVAL MAY NOT BE ZERO'\nMSG23L   EQU   *-MSG23\nMSG24    DS    0C\n         DC    CL11'FXBPARM24E'\n         DC    C'INVALID DIGIT IN INTERVAL'\nMSG24L   EQU   *-MSG24\nMSG25    DS    0C\n         DC    CL11'FXBPARM25E'\n         DC    C'INTERVAL HAS TOO MANY DIGITS (3 IS MAX)'\nMSG25L   EQU   *-MSG25\nMSG26    DS    0C\n         DC    CL11'FXBPARM26E'\n         DC    C'DUPLICATE INTERVAL STATEMENT'\nMSG26L   EQU   *-MSG26\nMSG27    DS    0C\n         DC    CL11'FXBPARM27E'\n         DC    C'DUPLICATE REPLACE STATEMENT'\nMSG27L   EQU   *-MSG27\nMSG28    DS    0C\n         DC    CL11'FXBPARM28E'\n         DC    C'DUPLICATE STATUS REQUEST'\nMSG28L   EQU   *-MSG28\nMSG29    DS    0C\n         DC    CL11'FXBPARM29E'\n         DC    C'REQUEST NUMBER OMITTED'\nMSG29L   EQU   *-MSG29\nMSG30    DS    0C\n         DC    CL11'FXBPARM30E'\n         DC    C'REQUEST NUMBER IS TOO LONG (9 DIGITS MAX)'\nMSG30L   EQU   *-MSG30\nMSG31    DS    0C\n         DC    CL11'FXBPARM31E'\n         DC    C'INVALID DIGIT IN REQUEST NUMBER'\nMSG31L   EQU   *-MSG31\nMSG32    DS    0C\n         DC    CL11'FXBPARM32E'\n         DC    C'NODE NAME OMITTED ON A STATUS REQUEST'\nMSG32L   EQU   *-MSG32\nMSG33    DS    0C\n         DC    CL11'FXBPARM33E'\n         DC    C'XMITFX NAME OMITTED'\nMSG33L   EQU   *-MSG33\nMSG34    DS    0C\n         DC    CL11'FXBPARM34E'\n         DC    C'XMITFX NAME IS TOO LONG'\nMSG34L   EQU   *-MSG34\nMSG35    DS    0C\n         DC    CL11'FXBPARM35E'\n         DC    C'DUPLICATE XMITFX STATEMENT'\nMSG35L   EQU   *-MSG35\nDCBI     DCB   DDNAME=FXIN,          CONTROL STATEMENT DCB             +\n               DSORG=PS,             .. SEQUENTIAL                     +\n               EODAD=PARM0100,       .. END OF DATA                    +\n               LRECL=80,             .. 80-BYTE RECORDS    0H          +\n               RECFM=FB,             .. FIXED/BLOCKED                  +\n               MACRF=GM              .. GET/MOVE MODE\nDCBL     EQU   *-DCBI\nOPENI    OPEN  (*,INPUT),MF=L\nOPENL    EQU   *-OPENI\nCLOSEI   CLOSE (*),MF=L\nCLOSEL   EQU   *-CLOSEI\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWORK     DSECT\nWORKSAVE DS    18F                   REGISTER SAVE AREA\nPARSESAV DS    5F                    REGISTER SAVE AREA FOR PARSE\nPARSEIN  DS    A                     PARSE DATA INPUT ADDRESS\nPARSEIL  DS    H                     LENGTH OF DATA AT PARSE IN\nPARSEOL  DS    H                     LENGTH OF DATA IN PARSE OUT\nDXDLEN   DS    H                     WORK LENGTH\nDXDFLAG  DS    X                     FLAGS\n$XMIT    EQU   X'80'                 NEW XMIT REQUEST\n$STAT    EQU   X'40'                 STATUS REQUEST\n$FX      EQU   X'20'                 FX STATEMENT PROCESSED\nDXDFLAG2 DS    X\n$DXDDSN1 EQU   X'80'\n$DXDDSN2 EQU   X'40'\n$DXDMEM1 EQU   X'20'\n$DXDMEM2 EQU   X'10'\n$DXDINTV EQU   X'08'\nPARSEOUT DS    CL80                  OUTPUT FROM PARSE\nPARSEDLM DS    C                     DELIMITER THAT STOPPED PARSE\nDXDWORK  DS    CL44                  WORK AREA\n         PRTBLOK  DSECT=NO\nCARDDATA DS    CL80\nWKDCB    DS    (DCBL)X\nWKOC     DS    (OPENL)X\nWORKL    EQU   *-WORK\n* ------------------------------------------------------------------- *\n*              CONTROL STATEMENT TABLE MAP                            *\n* ------------------------------------------------------------------- *\nSTMTDSCT DSECT\nSTMTLEN  DS    X                     KEYWORD LENGTH\nSTMTADDR DS    AL4                   PROCESSING ROUTINE ADDRESS\nSTMTKYWD DS    0C                    KEYWORD\nSTMTL    EQU   *-STMTDSCT            FIXED LENGTH PER ENTRY\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         FXBCOMM   TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              REQUEST BLOCK                                          *\n* ------------------------------------------------------------------- *\n         REQBLOK   DSECT=YES\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  FXBPARM\n./ ADD NAME=FXBPRT   0100-99056-99056-1500-00236-00236-00000-FX-REL1\n\n         TITLE 'FXBPRT    BATCH PRINT'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXBPRT                                                *\n*                                                                     *\n*   This module allows a common point for printing.  Also most of     *\n*   the code is 24-bit, I/O still must be done from 24-bit storage,   *\n*   so this module is linked separately with RMODE 24.                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXBPRT   CSECT\nFXBPRT   AMODE 31\nFXBPRT   RMODE 24\n         USING FXBPRT,R12            DEFINE BASE\n         USING FXBCOMM,R11           DEFINE BASE\n         STM   R14,R12,12(R13)       CHAIN REGISTERS\n         LR    R12,R15               COPY ENTRY POINT ADDRESS\n         LR    R7,R1                 COPY PRINT BLOCK ADDRESS\n         USING PRTBLOK,R7            DEFINE BASE\n         B     PRT0000\n         DC    ((PFXMODNM-MODPRFX)-(*-FXBPRT))X'00'\n         DC    CL8'FXBPRT'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nPRT0000  DS    0H\n         ICM   R1,15,COMMPRTW        WORK AREA ACQUIRED?\n         BNZ   PRT0010               YES\n         GETMAIN RU,                 ACQUIRE WORK AREA                 +\n               LV=WORKL,             .. AREA SIZE                      +\n               LOC=BELOW             .. FROM 24-BIT AREA\n         USING WORKAREA,R1           DEFINE BASE\n         ST    R1,COMMPRTW           SAVE WORK AREA ADDRESS\n         XC    WORKAREA+000(256),WORKAREA+000\n         XC    WORKAREA+256(WORKL-256),WORKAREA+000\nPRT0010  DS    0H\n         ST    R13,4(R1)             CHAIN PREVIOUS SAVE AREA TO OURS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO PREVIOUS\n         LR    R13,R1                COPY WORK AREA ADDRESS\n         ITRACE ID=ENTRY\n         DROP  R1\n         USING WORKAREA,R13          DEFINE BASE\n         TM    WKFLAG,$OPEN          IS DCB OPEN?\n         BO    PRT0020               YES\n         ITRACE ID=INIT\n         MVC   WKDCB(DCBL),DCBI      INITIALIZE DCB IN WORK AREA\n         MVI   WKCC,C' '             INITIALIZE CARRIAGE CONTROL\n         MVC   WKDATE(PRTLRECL-1),WKCC\n         MVC   WKOCPL(OCPLL),OCPLI   INITIALIZE OPEN/CLOSE PARM LIST\n         ZAP   WKLINE,P0             INITIALIZE LINE COUNT\n         ZAP   WKPAGE,P0             INITIALIGE PAGE COUNT\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         OPEN  (WKDCB,OUTPUT),MF=(E,WKOCPL)\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         OI    WKFLAG,$OPEN          INDICATE DCB IS OPEN\n         BAL   R9,PRT0200            PRINT INITIAL HEADING\nPRT0020  DS    0H\n         TM    COMMFLAG,$EOJ         SHUTDOWN?\n         BO    EXIT0000              YES\n         CLI   PRTCMD,$PRTHEAD       FORCED HEADING?\n         BE    PRT0090               YES\n         MVC   WKCC,PRTCC            COPY CARRIAGE CONTROL\n         TIME  DEC\n         STM   R0,R1,WKTIMDAY        SAVE TIME AND DATE\n         MVC   WKTIME,TIMEEDWD       INITIALIZE WITH EDIT WORD\n         ED    WKTIME,WKTIMDAY       EDIT TIME\n         MVC   WKDATE,DATEEDWD       INITIALIZE WITH EDIT WORD\n         ED    WKDATE,WKTIMDAY+5     EDIT DATE\n         MVC   WKMSGID,PRTMSGID      COPY MESSAGE ID\n         LA    R1,WKMSGID+(L'WKMSGID-1)\nPRT0030  DS    0H\n         CLI   0(R1),C' '            BLANK?\n         BNE   PRT0040               NO\n         BCT   R1,PRT0030            LOOP\nPRT0040  DS    0H\n         CLI   0(R1),C'E'            'ERROR' MESSAGE\n         BNE   PRT0050\n         MVI   WKMSGERR,C'*'         FLAG ERROR MESSAGE\nPRT0050  DS    0H\n         LA    R1,WKDATA             FIRST PRINT AREA BYTE\n         LA    R2,PRTDATA            PRINT OUTPUT AREA BYTE\n         LA    R3,L'PRTDATA          MAXIMUM LOOPS\nPRT0060  DS    0H\n         CLC   COMMBLKS(2),0(R2)     2 BLANKS IN A ROW?\n         BE    PRT0070               YES\n         MVC   0(1,R1),0(R2)         COPY TO OUTPUT AREA\n         LA    R1,1(R1)              NEXT OUTPUT BYTE\nPRT0070  DS    0H\n         LA    R2,1(R2)              NEXT INPUT BYTE\n         BCT   R3,PRT0060            LOOPS\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         PUT   WKDCB,WKCC            PRINT\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         AP    WKLINE,P1             ADD 1 TO LINE COUNT\n         CLI   WKCC,C' '             SINGLE SPACE\n         BE    PRT0080               YES\n         AP    WKLINE,P1             ADD 1 TO LINE COUNT\n         CLI   WKCC,C'0'             DOUBLE SPACE?\n         BE    PRT0080               YES\n         AP    WKLINE,P1             ADD 1 TO LINE COUNT\nPRT0080  DS    0H\n         MVI   WKCC,C' '             INITIALIZE CARRIAGE CONTROL\n         MVC   WKDATE(PRTLRECL-1),WKCC\n         CP    WKLINE,MAXLINE        TIME FOR HEADING?\n         BNH   EXIT0000              NOT YET\n         BAL   R9,PRT0200            PRINT HEADING\n         B     EXIT0000              EXIT\nPRT0090  DS    0H\n         ITRACE ID=FORCEHD\n         BAL   R9,PRT0200            PRINT HEADING\n         B     EXIT0000              AND EXIT\nPRT0200  DS    0H\n         AP    WKPAGE,P1             ADD 1 TO PAGE COUNT\n         MVC   WKDATA(HEADINGL),HEADING\n         MVC   WKDATA+(HEADPAGE-HEADING)(L'HEADPAGE),PAGEEDWD\n         ED    WKDATA+(HEADPAGE-HEADING)(L'HEADPAGE),WKPAGE\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         PUT   WKDCB,WKCC            PRINT\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         ZAP   WKLINE,P1             RESET LINE COUNT\n         MVI   WKCC,C' '             INITIALIZE CARRIAGE CONTROL\n         MVC   WKDATE(PRTLRECL-1),WKCC\n         BR    R9                    RETURN\n* ------------------------------------------------------------------- *\n*        ADDRESSING MODE SWITCHING                                    *\n* ------------------------------------------------------------------- *\nAM24     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         BSM   R0,R15                RETURN IN 24-BIT MODE\nAM31     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         O     R15,X80               SET HIGH BIT ON\n         BSM   R0,R15                RETURN IN 31-BIT MODE\n* ------------------------------------------------------------------- *\n*        EXIT                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         TM    COMMFLAG,$EOJ         SHUTDOWN?\n         BNO   EXIT0010              NO\n         ITRACE ID=CLOSE\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         CLOSE WKDCB,MF=(E,WKOCPL)   CLOSE DCB\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         LR    R1,R13                COPY WORK AREA ADDRESS\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         FREEMAIN R,A=(1),LV=WORKL   FREE WORK AREA\n         XC    COMMPRTW,COMMPRTW     CLEAR PRINT WORK AREA ADDRESS\n         B     EXIT0020\nEXIT0010 DS    0H\n         L     R13,4(R13)            RESTORE CALLER'S SAVE AREA ADDRESS\nEXIT0020 DS    0H\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\nPRTMVC   MVC   WKDATE(0),PRTDATA     COPY PRINT DATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nX80      DC    A(X'80000000')\nDATEEDWD DC    X'4021204B202020'\nTIMEEDWD DC    X'4021204B20204B2020'\nPAGEEDWD DC    X'402020202120'\nP0       DC    P'0'\nP1       DC    P'1'\nMAXLINE  DC    P'&MAXL'\nHEADING  DS    0C\n         DC    48C' '\n         DC    C'BATCH FX LOG'\n         DC    48C' '\n         DC    C'PAGE '\nHEADPAGE DC    CL6' '\nHEADINGL EQU   *-HEADING\nDCBI     DCB   DSORG=PS,                                               +\n               DDNAME=FXPRT,                                           +\n               RECFM=FBA,                                              +\n               LRECL=PRTLRECL,                                         +\n               MACRF=PM\nDCBL     EQU   *-DCBI\nOCPLI    OPEN  (*,OUTPUT),MF=L\nOCPLL    EQU   *-OCPLI\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWORKAREA DSECT\nWORKSAVE DS    18F                   REGISTER SAVE AREA\nWKTIMDAY DS    2F                    TIME/DATE\nWKLINE   DS    PL3\nWKPAGE   DS    PL3\nWKFLAG   DS    X                     FLAGS/INDICATORS\n$OPEN    EQU   X'80'                 .. PRINT DCB IS OPEN\nWKCC     DS    C                     CARRIAGE CONTROL\nWKDATE   DS    CL7                   DATE\n         DS    C\nWKTIME   DS    CL9                   TIME\n         DS    C\nWKMSGID  DS    CL11                  MESSAGE ID\n         DS    C\nWKMSGERR DS    C                     ERROR MESSAGE FLAG\n         DS    C\nWKDATA   DS    CL120                 PRINT DATA\nPRTLRECL EQU   *-WKCC\nWKDCB    DS    0A,(DCBL)X            RESERVE SPACE FOR DCB\nWKOCPL   DS    (OCPLL)X\nWORKL    EQU   *-WORKAREA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         FXBCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REQUEST BLOCK                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         REQBLOK  DSECT=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT REQUEST BLOCK                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         PRTBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  FXBPRT\n./ ADD NAME=FXBREQE  0100-99056-99056-1500-00103-00103-00000-FX-REL1\n\n         TITLE 'FXBREQE  BATCH TRANSMISSION REQUEST ENTRY'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: FXBREQE                                               *\n*                                                                     *\n*  Batch interface transmission request entry:                        *\n*   1) Build the request                                              *\n*   2) Send request to FX                                             *\n*   3) Print message returned by FX STC                               *\n*   4) Set return code for mainline                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nBREQE    FXPRFX 'BATCH INTERFACE TRANSMISSION REQUEST ENTRY',          +\n               COMM=FXBCOMM\nFXBREQE  AMODE 31\nFXBREQE  RMODE ANY\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    BREQ0010              YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         MVI   PRTCC,C' '            INITIALIZE PRINT I/O AREA\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\nBREQ0010 DS    0H\n         ITRACE ID=BLDREQ\n         MVC   PARMFX,COMMFX         SET NODE WHERE REQUEST WAS ENTERED\n         MVC   PARMXFX,COMMFX        ASSUME SAME FX WILL TRANSMIT\n         CLC   COMMTNDE,COMMBLKS     NODE NAME GIVEN BY USER?\n         BE    BREQ0020              NO\n         MVC   PARMXFX,COMMTNDE      OVER-RIDE NODE NAME\nBREQ0020 DS    0H\n         MVC   PARMODSN,COMMODSN     SET ORIGINAL DATASET'S NAME\n         MVC   PARMOMEM,COMMOMEM     SET ORIGINAL MEMBER NAME\n         MVC   PARMDDSN,COMMDDSN     SET DATASET NAME AT DESTINATION(S)\n         MVC   PARMDMEM,COMMDMEM     SET MEMBER NAME AT DESTINATION(S)\n         MVC   PARMREPL,COMMREPL     SET REPLACE INDICATOR\n         MVC   PARMALAS,COMMALAS     SET ALIAS INDICATOR\n         MVC   PARMNDE#,COMMNDE#     SET NUMBER OF NODES\n         LA    R1,PARMNDNM           FIRST DESTINATION NODE NAME\n         USING PARMNDNM,R1           DEFINE TEMP BASE\n         LA    R2,COMMDEST           FIRST DESTINATION\n         LA    R3,&MAXNDE            NUMBER OF NODES\nBREQ0030 DS    0H\n         MVC   PARMNDNM,0(R2)        COPY DESTINATION NAME\n         LA    R1,PARMNDL(R1)        NEXT NODE\n         LA    R2,L'COMMDEST(R2)     NEXT NODE\n         BCT   R3,BREQ0030           LOOP\n         DROP  R1\n         MVI   PARMCMD,$ENTER        ENTER A REQUEST\n         LH    R4,COMMATTM           NUMBER OF ATTEMPTS\nBREQ0040 DS    0H\n         LA    R1,USERPARM           PARM LIST\n         L     R15,AUSER             FXUSER ENTRY POINT\n         BALR  R14,R15               CALL FXUSER\n         CLC   PARMRC,H100           PARTNER NOT READY?\n         BNE   BREQ0060              FALSE\n         TM    COMMFLAG,$NOLIMIT     UNLIMITED ATTEMPTS?\n         BO    BREQ0050              YES\n         BCT   R4,BREQ0050           MINUS 1 ATTEMPT\n         B     BREQ0060              ALL ATTEMPTS HAVE FAILED\nBREQ0050 DS    0H\n         STIMER WAIT,BINTVL=COMMINTV WAIT FOR SPECIFIED AMOUNT OF TIME\n         B     BREQ0040              TRY AGAIN\nBREQ0060 DS    0H\n         MVC   COMMRC,PARMRC+1       SET RETURN CODE\n         MVC   PRTMSGID(L'PARMMSG),PARMMSG\n         MVI   PRTCMD,$PRTPRT        SET COMMAND (PRINT)\n         LA    R1,PRTBLOK            PRINT REQUST BLOCK ADDRESS\n         L     R15,ABPRT             PRINT MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO PRINT MODULE\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDBREQE)           DISPLACEMENT TO WORK AREA\nH100     DC    H'100'\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDBREQE DSECT\nDXDID    DS    CL8\nDXDSAVE  DS    18F\n         PRTBLOK  DSECT=NO\n         USERPARM DSECT=NO\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         FXBCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  FXBREQE\n./ ADD NAME=FXBREQI  0100-99056-99056-1500-00130-00130-00000-FX-REL1\n\n         TITLE 'FXBREQI  BATCH TRANSMISSION REQUEST INQUIRY'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXBREQI                                               *\n*                                                                     *\n*  Batch interface transmission request inquiry.                      *\n*   1) Send inquiry request using the criteria (request entry node    *\n*      and request number) to the FX STC                              *\n*   2) Print the data returned by the STC                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nBREQI    FXPRFX 'BATCH INTERFACE TRANSMISSION REQUEST INQUIRY',        +\n               COMM=FXBCOMM\nFXBREQI  AMODE 31\nFXBREQI  RMODE ANY\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    BREQ0010              YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         MVI   PRTCC,C' '            INITIALIZE PRINT I/O AREA\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\nBREQ0010 DS    0H\n         ITRACE ID=BLDREQ\n         MVI   PARMCMD,$INQUIRE      INQUIRE ON A REQUEST\n         MVC   PARMFX,COMMFX         SET FX STC APPL NAME\n         MVC   PARMENDE,COMMNODE     SET REQUEST ENTRY NODE NAME\n         MVC   PARMNBR,COMMNBR       SET REQUEST NUMBER\n         MVC   PARMNDE#,=Y(&MAXNDE)  MAXIMUM NUMBER OF RETURNED NODES\nBREQ0020 DS    0H\n         LA    R1,USERPARM           PARM LIST\n         L     R15,AUSER             FXUSER ENTRY POINT\n         BALR  R14,R15               CALL FXUSER\n         MVC   COMMRC,PARMRC+1       SET RETURN CODE\n         ITRACE ID=USERRC,           TRACE RETURN FROM FXUSER          +\n               DATA1=PARMRC,         .. RETURN CODE                    +\n               DATA2=PARMMSG+6       .. PORTION OF THE MESSAGE\n         CLC   H100,PARMRC           STC NOT READY?\n         BNE   BREQ0040              FALSE\n         TM    COMMFLAG,$NOLIMIT     UNLIMITED ATTEMPTS?\n         BO    BREQ0030              YES\n         BCT   R4,BREQ0030           MINUS 1 ATTEMPT\n         B     BREQ0040\nBREQ0030 DS    0H\n         STIMER WAIT,BINTVL=COMMINTV WAIT FOR SPECIFIED AMOUNT OF TIME\n         B     BREQ0020              TRY AGAIN\nBREQ0040 DS    0H\n         CLI   COMMRC,4              SUCCESSFUL?\n         BH    BREQ0070              NO\n         CLI   COMMRC,0              DATA TRUNCATED?\n         BE    BREQ0050              NO\n         MVC   PRTMSGID(MSG01L),MSG01\n         BAL   R8,PRT0000            PRINT\nBREQ0050 DS    0H\n         MVC   PRTMSGID(MSG02L),MSG02\n         MVC   PRTMSGID+(MSG02ST-MSG02)(L'MSG02ST),PARMSTAT\n         BAL   R8,PRT0000            PRINT\n         LA    R2,PARMNDNM           FIRST DESTINATION\n         USING PARMNDNM,R2           DEFINE BASE\n         SR    R3,R3                 CLEAR REGISTER\n         ICM   R3,3,PARMNDE#         NUMBER OF NODES\n         BZ    EXIT0000              NO NODES\nBREQ0060 DS    0H\n         MVC   PRTMSGID(MSG03L),MSG03\n         MVC   PRTMSGID+(MSG03NDE-MSG03)(L'MSG03NDE),PARMNDNM\n         MVC   PRTMSGID+(MSG03ST-MSG03)(L'MSG03ST),PARMNDST\n         BAL   R8,PRT0000            PRINT THE MESSAGE\n         LA    R2,PARMNDL(R2)        NEXT NODE\n         BCT   R3,BREQ0060           LOOP\n         B     EXIT0000              EXIT\n         DROP  R2\nBREQ0070 DS    0H\n         MVC   PRTMSGID(L'PARMMSG),PARMMSG   COPY MESSAGE FROM STC\n         BAL   R8,PRT0000            PRINT\n         B     EXIT0000              AND EXIT\nPRT0000  DS    0H\n         MVI   PRTCMD,$PRTPRT        SET COMMAND (PRINT)\n         LA    R1,PRTBLOK            PRINT REQUST BLOCK ADDRESS\n         L     R15,ABPRT             PRINT MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO PRINT MODULE\n         BR    R8\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDBREQI)           DISPLACEMENT TO WORK AREA\nH100     DC    H'100'\nMSG01    DS    0C\n         DC    CL11'FXBREQI01W'\n         DC    C'NODE DATA TRUNCATED DUE TO USER AREA SIZE'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'FXBREQI02I'\n         DC    C'OVER-ALL STATUS IS: '\nMSG02ST  DC    CL25' '\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'FXBREQI03I'\n         DC    C'STATUS TO DESTINATION '\nMSG03NDE DC    CL08' '\n         DC    C' IS: '\nMSG03ST  DC    CL25' '\nMSG03L   EQU   *-MSG03\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDBREQI DSECT\nDXDID    DS    CL8\nDXDSAVE  DS    18F\n         PRTBLOK  DSECT=NO\n         USERPARM DSECT=NO\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         FXBCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  FXBREQI\n./ ADD NAME=FXDSNVER 0100-99056-99056-1500-00155-00155-00000-FX-REL1\n\n         TITLE 'DSNVER  verify data set names are valid'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXDSNVER                                              *\n*                                                                     *\n*  Verify data set names follow proper conventions.                   *\n*                                                                     *\n*  1) Each qualifier must begin with an alpha or national character   *\n*  2) No qualifier is more than 8 characters long                     *\n*  3) No qualifier is zero characters long (abcd..efgh)               *\n*  4) No imbedded blanks                                              *\n*  5) No special characters                                           *\n*  6) No member or GDG relative generations                           *\n*                                                                     *\n*                                                                     *\n*  This may be more restrictive than JCL requires, but it is close    *\n*  to the \"SPF\" restrictions.                                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXDSNVER CSECT\nFXDSNVER AMODE 31\nFXDSNVER RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               COPY BASE\n         USING FXDSNVER,R12          DEFINE BASE\n         LR    R8,R1                 COPY PARM BLOCK ADDRESS\n         USING DSNREQ,R8             DEFINE BASE\n         L     R7,DSNADDR            DATA SET NAME'S ADDRESS\nDSN0000  DS    0H\n         MVI   DSNMSG,C' '           CLEAR MESSAGE\n         MVC   DSNMSG+1(L'DSNMSG-1),DSNMSG\n         SR    R2,R2                 CLEAR FOR QUALIFIER LENGTH\n         LA    R3,44                 STARTING LENGTH\nDSN0010  DS    0H\n         CLI   0(R7),C' '            BLANK?\n         BE    DSN0090               YES\n         CLI   0(R7),C'.'            DELIMITER?\n         BE    DSN0030               YES\n         CLI   0(R7),C'@'            AT-SIGN?\n         BE    DSN0020               YES\n         CLI   0(R7),C'#'            POUND SIGN?\n         BE    DSN0020               YES\n         CLI   0(R7),C'$'            DOLLAR SIGN?\n         BE    DSN0020               YES\n         CLI   0(R7),X'C1'           POSSIBLY A-I?\n         BL    DSN0050               NO\n         CLI   0(R7),X'CA'           DEFINELTY A-I?\n         BL    DSN0020               YES\n         CLI   0(R7),X'D1'           POSSIBLY J-R?\n         BL    DSN0050               NO\n         CLI   0(R7),X'DA'           DEFINETLY J-R?\n         BL    DSN0020               YES\n         CLI   0(R7),X'E2'           POSSIBLY S-Z?\n         BL    DSN0050               NO\n         CLI   0(R7),X'EA'           DEFINETLY S-Z?\n         BL    DSN0020               YES\n         LTR   R2,R2                 FIRST CHARACTER OF QUALIFIER?\n         BZ    DSN0050               NO.. INVALID FIRST CHARACTER\n         CLI   0(R7),C'0'            POSSIBLY 0-9?\n         BL    DSN0060               NO\n         CLI   0(R7),C'9'            POSSIBLY 0-9?\n         BH    DSN0060               NO\nDSN0020  DS    0H\n         LA    R2,1(R2)              ADD 1 TO QUALIFIER LENGTH\n         B     DSN0040\nDSN0030  DS    0H\n         LTR   R2,R2                 LAST QUALIFIER LENGTH = ZERO?\n         BZ    DSN0080               YES\n         CH    R2,H8                 QUALIFIER LENGTH > 8?\n         BH    DSN0070               YES\n         SR    R2,R2                 RESET QUALIFIER LENGTH\nDSN0040  DS    0H\n         LA    R7,1(R7)              NEXT CHARACTER IN DSN\n         BCT   R3,DSN0010            LOOP\n         CH    R2,H8                 QUALIFIER TOO LONG?\n         BH    DSN0070               YES\n         MVI   DSNSTAT,$DSNOK        GOOD\n         B     EXIT0000              AND EXIT\nDSN0050  DS    0H\n         LTR   R2,R2                 FIRST QUALIFIER?\n         BNZ   DSN0060               NO\n         MVI   DSNSTAT,$DSNBAD       NO GOOD\n         MVC   DSNMSG(MSG01L),MSG01  SET MESSAGE\n         B     EXIT0000\nDSN0060  DS    0H\n         MVI   DSNSTAT,$DSNBAD       NO GOOD\n         MVC   DSNMSG(MSG02L),MSG02  SET MESSAGE\n         B     EXIT0000\nDSN0070  DS    0H\n         MVI   DSNSTAT,$DSNBAD       NO GOOD\n         MVC   DSNMSG(MSG03L),MSG03  SET MESSAGE\n         B     EXIT0000\nDSN0080  DS    0H\n         MVI   DSNSTAT,$DSNBAD       NO GOOD\n         MVC   DSNMSG(MSG04L),MSG04  SET MESSAGE\n         B     EXIT0000\nDSN0090  DS    0H\n         LTR   R2,R2                 LAST QUALIFIER ZERO?\n         BZ    DSN0080               YES\n         CH    R2,H8                 LAST QUALIFIER TOO LONG?\n         BH    DSN0070               YES\n         LTR   R3,R3                 ANY LENGTH REMAINING?\n         BZ    EXIT0000              NO\n         BCTR  R3,0                  MINUS 1\n         EX    R3,DSNCLC             IS THE REST BLANK?\n         BE    DSN0100               YES\n         MVI   DSNSTAT,$DSNBAD\n         MVC   DSNMSG(MSG05L),MSG05  NO IMBEDDED BLANKS ALLOWED\n         B     EXIT0000\nDSN0100  DS    0H\n         MVI   DSNSTAT,$DSNOK        DATA SET NAME IS OK\nEXIT0000 DS    0H\n         LM    R14,R12,12(R13)       RESTORE REGISTERS\n         BR    R14                   RETURN TO CALLER\nDSNCLC   CLC   BLANKS(0),0(R7)\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nH8       DC    H'8'\nBLANKS   DC    CL44' '\nMSG01    DS    0C\n         DC    CL11'FXDSNVER01E'\n         DC    C' EACH QUALIFIER OF DSN MUST BEGIN WITH ALPHA OR NATION+\n               AL'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'FXDSNVER02E'\n         DC    C' INVALID CHARACTER IN DATA SET NAME'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'FXDSNVER03E'\n         DC    C' QUALIFIER IN DSN IS TOO LONG'\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    CL11'FXDSNVER04E'\n         DC    C' NULL QUALIFIER IN DSN'\nMSG04L   EQU   *-MSG04\nMSG05    DS    0C\n         DC    CL11'FXDSNVER05E'\n         DC    C' DATA SET NAME MAY NOT CONTAIN BLANKS'\nMSG05L   EQU   *-MSG05\n* ------------------------------------------------------------------- *\n*              DSN REQUEST BLOCK                                      *\n* ------------------------------------------------------------------- *\n         DSNREQ DSECT=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  FXDSNVER\n./ ADD NAME=FXFORMAT 0100-99056-99056-1500-00013-00013-00000-FX-REL1\n\n         TITLE 'FXFORMAT   MASTER FILE FORMATTER'\n         COPY  OPTIONS\n         AIF   ('&MSTRACC' EQ 'BDAM').BDAM\n         AIF   ('&MSTRACC' EQ 'VSAM').VSAM\n         MNOTE 12,'INVALID MASTER FILE ORGANIZATION'\n.BDAM    ANOP\n         COPY  BDAMFMT\n         AGO   .END\n.VSAM    ANOP\n         COPY  VSAMFMT\n.END     ANOP\n         END  FXFORMAT\n./ ADD NAME=FXLERAD  0100-99056-99056-1500-00056-00056-00000-FX-REL1\n\n         TITLE 'VTAM LERAD EXIT'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXLERAD                                               *\n*                                                                     *\n*  VTAM LERAD exit                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXLERAD  CSECT\nFXLERAD  AMODE 31\nFXLERAD  RMODE ANY\n         USING FXLERAD,R15           DEFINE BASE\n         B     LERAD010              SKIP ADDRESS AND EYECATCHER\n         DC    CL8'FXLERAD'          MODULE NAME\n         DC    C'&SYSDATE'           DATE OF ASSEMBLY\n         DC    C'&SYSTIME'           TIME OF ASSEMBLY\nLERAD010 DS    0H\n         USING IFGRPL,R1             DEFINE BASE\n         L     R2,RPLAAREA           RPL EXTENSION ADDRESS\n         USING ISTRPL6X,R2           DEFINE BASE\n         LA    R3,GOODRC             GOOD RETURN CODES TABLE\nLERAD020 DS    0H\n         CLI   0(R3),X'FF'           END OF TABLE\n         BE    LERAD030              NO GOOD\n         CLC   RPL6RC,0(R3)          ACCEPTABLE?\n         BE    EXIT0000              YES, EXIT\n         LA    R3,4(R3)              NEXT CODE\n         B     LERAD020              LOOP\nLERAD030 DS    0H\n         L     R4,RPL6RC             MAKE RC EASY TO FIND\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              CONSTANTS                                             *\n*                                                                    *\n* ------------------------------------------------------------------ *\nGOODRC   DS    0C\n         DC    X'00000000'           GOOD\n         DC    X'00000001'           CNOS ACCEPTED BY PARTNER\n         DC    X'FF'\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              EQUATES                                               *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         ABCODES\n         END  FXLERAD\n./ ADD NAME=FXMCOMM  0100-99056-99056-1500-00018-00018-00000-FX-REL1\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Name: FXMCOMM                                                      *\n*                                                                     *\n*  File maintenance common data and trace manager                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  OPTIONS\n         FXMCOMM  TYPE=CSECT\nFXMCOMM  CSECT\n         FXMTDATA DSECT=NO\nFXMVTBLE DS    0C\n         VDEF  BASE=FXMTDATA\n         FXMVARS GEN=YES\n         DC    X'FF'\n         COPY  REGEQU\n         END   FXMCOMM\n./ ADD NAME=FXMEMVER 0100-99056-99056-1500-00114-00114-00000-FX-REL1\n\n         TITLE 'MEMVER  verify member names are valid'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXMEMVER                                              *\n*                                                                     *\n*                                                                     *\n*  1) Member name must begin with an alpha or national character      *\n*  2) No imbedded blanks                                              *\n*  3) No special characters                                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXMEMVER CSECT\nFXMEMVER AMODE 31\nFXMEMVER RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               COPY BASE\n         USING FXMEMVER,R12          DEFINE BASE\n         LR    R8,R1                 COPY PARM BLOCK ADDRESS\n         USING MEMREQ,R8             DEFINE BASE\n         L     R7,MEMADDR            DATA SET NAME'S ADDRESS\nMEM0000  DS    0H\n         MVI   MEMMSG,C' '           CLEAR MESSAGE\n         MVC   MEMMSG+1(L'MEMMSG-1),MEMMSG\n         LA    R3,8                  STARTING LENGTH\n         SR    R2,R2                 CLEAR FOR LENGTH\nMEM0010  DS    0H\n         CLI   0(R7),C' '            BLANK?\n         BE    MEM0060               YES\n         CLI   0(R7),C'@'            AT-SIGN?\n         BE    MEM0020               YES\n         CLI   0(R7),C'#'            POUND SIGN?\n         BE    MEM0020               YES\n         CLI   0(R7),C'$'            DOLLAR SIGN?\n         BE    MEM0020               YES\n         CLI   0(R7),X'C1'           POSSIBLY A-I?\n         BL    MEM0030               NO\n         CLI   0(R7),X'CA'           DEFINELTY A-I?\n         BL    MEM0020               YES\n         CLI   0(R7),X'D1'           POSSIBLY J-R?\n         BL    MEM0030               NO\n         CLI   0(R7),X'DA'           DEFINETLY J-R?\n         BL    MEM0020               YES\n         CLI   0(R7),X'E2'           POSSIBLY S-Z?\n         BL    MEM0030               NO\n         CLI   0(R7),X'EA'           DEFINETLY S-Z?\n         BL    MEM0020               YES\n         LTR   R2,R2                 FIRST CHARACTER OF NAME?\n         BZ    MEM0030               NO.. INVALID FIRST CHARACTER\n         CLI   0(R7),C'0'            POSSIBLY 0-9?\n         BL    MEM0040               NO\n         CLI   0(R7),C'9'            POSSIBLY 0-9?\n         BH    MEM0040               NO\nMEM0020  DS    0H\n         LA    R2,1(R2)              ADD 1 TO LENGTH\n         LA    R7,1(R7)              NEXT CHARACTER IN NAME\n         BCT   R3,MEM0010            LOOP\n         MVI   MEMSTAT,$MEMOK        GOOD\n         B     EXIT0000              AND EXIT\nMEM0030  DS    0H\n         LTR   R2,R2                 FIRST?\n         BNZ   MEM0040               NO\n         MVI   MEMSTAT,$MEMBAD       NO GOOD\n         MVC   MEMMSG(MSG01L),MSG01  SET MESSAGE\n         B     EXIT0000\nMEM0040  DS    0H\n         MVI   MEMSTAT,$MEMBAD       NO GOOD\n         MVC   MEMMSG(MSG02L),MSG02  SET MESSAGE\n         B     EXIT0000\nMEM0060  DS    0H\n         LTR   R3,R3                 ANY LENGTH REMAINING?\n         BZ    EXIT0000              NO\n         BCTR  R3,0                  MINUS 1\n         EX    R3,MEMCLC             IS THE REST BLANK?\n         BE    MEM0070               YES\n         MVI   MEMSTAT,$MEMBAD\n         MVC   MEMMSG(MSG03L),MSG03  NO IMBEDDED BLANKS ALLOWED\n         B     EXIT0000\nMEM0070  DS    0H\n         MVI   MEMSTAT,$MEMOK        MEMBER NAME IS OK\nEXIT0000 DS    0H\n         LM    R14,R12,12(R13)       RESTORE REGISTERS\n         BR    R14                   RETURN TO CALLER\nMEMCLC   CLC   BLANKS(0),0(R7)\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nH8       DC    H'8'\nBLANKS   DC    CL8' '\nMSG01    DS    0C\n         DC    CL11'FXMEMVER01E'\n         DC    C' FIRST CHARACTER OF MEMBER NAME NOT ALPHA OR NATIONAL'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'FXMEMVER02E'\n         DC    C' INVALID CHARACTER IN MEMBER NAME'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'FXMEMVER03E'\n         DC    C' MEMBER NAME MAY NOT CONTAIN BLANKS'\nMSG03L   EQU   *-MSG03\n* ------------------------------------------------------------------- *\n*              MEMBER REQUEST BLOCK                                   *\n* ------------------------------------------------------------------- *\n         MEMREQ DSECT=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  FXMEMVER\n./ ADD NAME=FXMMAIN  0100-99056-99056-1500-00649-00649-00000-FX-REL1\n\n         TITLE 'FXMMAIN  MASTER FILE MAINTENANCE'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXMMAIN                                               *\n*                                                                     *\n*   File maintenace utility mainline.                                 *\n*                                                                     *\n*   Things are bound to happen and at times the master file is going  *\n*   to be botched.  If the master file is \"botched\", the STC may not  *\n*   be able to come up without abending.  This file maintenace        *\n*   utility allows most any field to be updated, and it makes litte   *\n*   assumption about \"consistency\" of the data (like the number of    *\n*   nodes not matching the number of names in the destination list).  *\n*   Just make sure you know what you are doing before updating the    *\n*   master file with this utility.                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXMMAIN  CSECT\nFXMMAIN  AMODE 31\nFXMMAIN  RMODE ANY\n         USING FXMMAIN,R12,R9        DEFINE BASE\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               COPY BASE ADDRESS\n         LA    R9,2048(R12)          INITIALIZE..\n         LA    R9,2048(R9)             ..2ND BASE REGISTER\n         B     @@000001              BRANCH AROUND EYECATCHER\n         DC    ((PFXMODNM-MODPRFX)-(*-FXMMAIN))X'00'\nMODID    DC    CL8'FXMMAIN'          MODULE NAME\n         DC    CL8'&SYSDATE'         DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'         TIME OF ASSEMBLY\n@@000001 DS    0H\n* ------------------------------------------------------------------- *\n*        ACQUIRE STORAGE FOR WORK AREAS                               *\n* ------------------------------------------------------------------- *\n         L     R3,DXDSIZE            WORK AREA SIZE\n         GETMAIN RU,                 ACQUIRE WORK AREA                 +\n               LV=(R3),              .. SIZE OF AREA                   +\n               LOC=ANY               .. FROM ANY AREA\n         LR    R4,R1                 COPY STORAGE ADDRESS\n         LR    R10,R1                COPY STORAGE ADDRESS\n         LR    R2,R1                 COPY WORK AREA ADDRESS\n         SR    R1,R1                 CLEAR LENGTH 2\n         MVCL  R2,R0                 CLEAR WORK AREA\n         A     R10,DXDSTART          PLUS DISPLACEMENT TO OUR PORTION\n         USING DXDMMAIN,R10          DEFINE WORK AREA BASE\n         MVC   DXDID,MODID           IDENTIFY WORK AREA OWNER\n         LA    R2,DXDSAVE            OUR SAVE AREA ADDRESS\n         ST    R13,4(R2)             CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R2,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R2                SET SAVE AREA ADDRESS\n* ------------------------------------------------------------------- *\n*        Load common data module (FXMCOMM)                            *\n* ------------------------------------------------------------------- *\n         LOAD  EP=FXMCOMM            LOAD COMMON DATA MODULE\n         LR    R11,R0                COPY TO PERMANENT BASE\n         USING FXMCOMM,R11           DEFINE BASE\n         ST    R12,AMAINT            SET MAINLINE'S ADDRESS IN COMMON\n         ST    R4,COMMDXDA           SET DYNAMIC WORK AREA ADDRESS\n         MVC   ATVAR,VTVAR           SET TSO/SPF VARIABLE MANAGER ADDR\n         MVC   ATNODE,VTNODE         SET NODE DISPLAY MODULE ADDRESS\n* ------------------------------------------------------------------- *\n*        Acquire storage for trace table                              *\n* ------------------------------------------------------------------- *\n         L     R3,TRSIZE             TRACE TABLE SIZE\n         GETMAIN RU,                 ACQUIRE STOAGE FOR TRACE TABLE    +\n               LV=(R3),              .. SIZE IS IN R3                  +\n               LOC=ANY               .. MAY BE ABOVE OR BELOW\n         ST    R1,TRADDR             SAVE TRACE TABLE STORAGE ADDRESS\n         SR    R0,R0                 ASSUME A 32-BYTE BOUNDARY\n         TM    TRADDR+3,X'07'        ALREADY ON A 32-BYTE BOUNDARY?\n         BNO   INIT0010              YES\n         SLR   R1,5                  SHIFT OUT LOW BITS..\n         SLL   R1,5                  .. TO ROUND TO 32-BYTE BOUNDARY\n         LA    R1,32(R1)             PLUS 32\n         LA    R0,TRENTRYL           1 LESS TRACE ENTRY AVAILABLE\nINIT0010 DS    0H\n         ST    R1,TRFIRST            FIRST TRACE ENTRY AVAILABLE\n         ST    R1,TRCURR             CURRENT TRACE ENTRY\n         A     R1,TRSIZE             LAST ENTRY IN TABLE\n         SH    R1,=Y(TRENTRYL)       MINUS 1 ENTRY\n         SR    R1,R0                 MINUS 1 MORE IF NECESSARY\n         ST    R1,TRLAST             SET LAST TRACE ENTRY ADDRESS\n         ITRACE ID=INITIAL           INITIAL TRACE ENTRY\n         LOAD  EP=ISPLINK            LOAD SPF INTERFACE\n         ST    R0,DXDSPFEP           SAVE SPF INTERFACE ADDRESS\n         LOAD  EP=FXSMSTR            LOAD MASTER FILE I/O\n         ST    R0,AMSTR              SAVE MASTER I/O MODULE ADDRESS\n*---------------------------------------------------------------------*\n*        OPEN MASTER FILE                                             *\n*---------------------------------------------------------------------*\n         ITRACE ID=OPENMSTR\n         FXCALL FXSMSTR,OPEN         OPEN MASTER FILE\n*---------------------------------------------------------------------*\n*        DEFINE VARIABLES TO SPF                                      *\n*---------------------------------------------------------------------*\nMSTR0010 DS    0H\n         ITRACE ID=VDEFINE           ISSUING DIV MAP\n         MVI   VARCMD,$VARDEFA       SET COMMAND (DEFINE ALL)\n         LA    R1,FXMTDATA           DATA\n         ST    R1,VARAREA            PASS DATA AREA ADDRESS\n         LA    R1,FXMVTBLE           CONTROL DATA ADDRESS\n         ST    R1,VARTBLE            PASS CONTROL DATA ADDRESS\n         LA    R1,VARREQ             VARIABLE REQUEST BLOCK\n         L     R15,VTVAR             VARIABLE MANAGER ENTRY POINT\n         BALR  R14,R15               LINK TO VARIABLE MANAGER\n         MVC   FXMKEY,BLANKS         INITIALIZE KEY\n         MVC   FXMMSG,BLANKS         INITIALIZE MESSAGE\n         MVC   ZCMD,BLANKS           INITIALIZE COMMAND\n*---------------------------------------------------------------------*\n*        DISPLAY MAINTENANCE PANEL                                    *\n*---------------------------------------------------------------------*\nMSTR0020 DS    0H\n         ITRACE ID=DISPLAY           DISPLAYING FIRST PANEL\n         LA    R1,DISPLAY            SPF COMMAND\n         ST    R1,DXDSPFP1           SET ADDRESS\n         LA    R1,PANLNAME           PANEL NAME\n         ST    R1,DXDSPFP2           SET ADDRESS\n         OI    DXDSPFP2,X'80'        FLAG END OF LIST\n         LA    R1,DXDSPFP            SPF PARM LIST ADDRESS\n         L     R15,DXDSPFEP          SPF INTERFACE ADDRESS\n         BALR  R14,R15               LINK TO SPF\n         ITRACE ID=DISPRC,           DISPLAY RETURN CODE               +\n               RDATA1=R15\n         CH    R15,H8                END?\n         BE    EXIT0000              YES\n         OC    ZCMD,BLANKS           FORCE UPPER CASE\n         MVC   FXMMSG,BLANKS         INITIALIZE MESSAGE\n         ITRACE ID=KEY,              RECORD NUMBER REQUESTED           +\n               DATA1=FXMKEY\n         LA    R1,FXMKEY             RECORD KEY\n         LA    R2,5                  NUMBER OF DIGITS\n         LA    R15,ERR0010           ERROR ROUTINE ADDRESS\n         BAL   R14,NUMR0000          TEST FOR NUMERIC\n         PACK  COMMDWRD,FXMKEY       PACK RECORD KEY\n         CVB   R14,COMMDWRD          CONVERT TO BINARY\n         LTR   R14,R14               RECORD ZERO?\n         BZ    ERR0020               YES\n         C     R14,COMMRECS          BEYOND MAXIMUM?\n         BH    ERR0020               YES\n         BCTR  R14,0                 MINUS 1\n         FXCALL FXSMSTR,READ,(R14)   READ MASTER FILE\n         LA    R6,MSTRRECD           REQUEST BLOCK IN PARM AREA\n         USING REQBLOK,R6            DEFINE BASE\n         CLC   FXMREC,REQREC#        SAME RECORD AS IN I/O AREA?\n         BNE   MSTR0400              NO\n         NI    DXDFLAG,255-$UPDATE   TURN OFF UPDATE FLAG\n         CLC   REQENODE,FXMENODE     SAME NODE?\n         BE    MSTR0030              YES\n         MVC   REQENODE,FXMENODE     CHANGE NODE\n         OI    DXDFLAG,$UPDATE       RECORD WAS UDPATED\nMSTR0030 DS    0H\n         LA    R1,FXMNBR             FIRST DIGIT\n         LA    R2,L'FXMNBR           NUMBER OF DIGITS\n         LA    R15,ERR0100           ERROR ROUTINE ADDRESS\n         BAL   R14,NUMR0000          CHECK FOR NUMERIC\n         PACK  COMMDWRD,FXMNBR       PACK REQUEST NUMBER\n         CVB   R1,COMMDWRD           CONVERT TO BINARY\n         CLM   R1,15,REQNBR          SAME REQUEST NUMBER?\n         BE    MSTR0040              YES\n         STCM  R1,15,REQNBR          SAVE REQUEST NUMBER\n         OI    DXDFLAG,$UPDATE       SET UPDATE FLAG\nMSTR0040 DS    0H\n         CLC   REQESTOR,FXMESTOR     REQUESTOR UPDATED?\n         BE    MSTR0050              NO\n         MVC   REQESTOR,FXMESTOR     CHANGE REQUESTOR\n         OI    DXDFLAG,$UPDATE       RECORD WAS UPDATED\nMSTR0050 DS    0H\n         CLC   REQJOB,FXMJOB         SAME JOB NAME?\n         BE    MSTR0060              YES\n         MVC   REQJOB,FXMJOB         CHANGE JOB NAME\n         OI    DXDFLAG,$UPDATE       RECORD WAS UPDATED\nMSTR0060 DS    0H\n         CLI   FXMEDATE+4,C'.'       PERIOD STILL PRESENT?\n         BNE   ERR0030               NO\n         LA    R1,FXMEDATE           FIRST DIGIT\n         LA    R2,4                  NUMBER OF DIGITS\n         LA    R15,ERR0040           ERROR ROUTINE ADDRESS\n         BAL   R14,NUMR0000          CHECK FOR NUMERIC\n         LA    R1,FXMEDATE+5         FIRST DIGIT\n         LA    R2,3                  NUMBER OF DIGITS\n         BAL   R14,NUMR0000          CHECK FOR NUMERIC\n         PACK  DXDWORK(3),FXMEDATE(5) PACK FIRST 4 DIGITS\n         PACK  DXDWORK+2(2),FXMEDATE+5(3) PACK LAST 3 DIGITS\n         CLC   REQEDATE,DXDWORK      SAME DATE?\n         BE    MSTR0070              YES\n         MVC   REQEDATE,DXDWORK      COPY NEW DATE\n         OI    DXDFLAG,$UPDATE       RECORD WAS UPDATED\nMSTR0070 DS    0H\n         LA    R1,FXMETIME           FIRST DIGIT\n         LA    R2,8                  NUMBER OF DIGITS\n         LA    R15,ERR0050           ERROR ROUTINE\n         BAL   R14,NUMR0000          CHECK FOR NUMERIC\n         MVC   DXDWORK(8),FXMETIME   COPY TIME\n         NC    DXDWORK(8),HEX1F      PREPARE FOR PACKING\n         TR    DXDWORK(8),CHARHEX    TRANSLATE FOR PACKING\n         PACK  COMMDWRD(5),DXDWORK(9) PACK TIME\n         CLC   REQETIME,COMMDWRD     SAME TIME?\n         BE    MSTR0080              YES\n         MVC   REQETIME,COMMDWRD     CHANGE TIME\n         OI    DXDFLAG,$UPDATE       RECORD WAS UPDATED\nMSTR0080 DS    0H\n         CLI   FXMCDATE+4,C'.'       PERIOD STILL PRESENT?\n         BNE   ERR0030               NO\n         LA    R1,FXMCDATE           FIRST DIGIT\n         LA    R2,4                  NUMBER OF DIGITS\n         LA    R15,ERR0040           ERROR ROUTINE ADDRESS\n         BAL   R14,NUMR0000          CHECK FOR NUMERIC\n         LA    R1,FXMCDATE+5         FIRST DIGIT\n         LA    R2,3                  NUMBER OF DIGITS\n         BAL   R14,NUMR0000          CHECK FOR NUMERIC\n         PACK  DXDWORK(3),FXMCDATE(5) PACK FIRST 4 DIGITS\n         PACK  DXDWORK+2(2),FXMCDATE+5(3) PACK LAST 3 DIGITS\n         CLC   REQCDATE,DXDWORK      SAME DATE?\n         BE    MSTR0090              YES\n         MVC   REQCDATE,DXDWORK      COPY NEW DATE\n         OI    DXDFLAG,$UPDATE       RECORD WAS UPDATED\nMSTR0090 DS    0H\n         LA    R1,FXMCTIME           FIRST DIGIT\n         LA    R2,8                  NUMBER OF DIGITS\n         LA    R15,ERR0050           ERROR ROUTINE\n         BAL   R14,NUMR0000          CHECK FOR NUMERIC\n         MVC   DXDWORK(8),FXMCTIME   COPY TIME\n         NC    DXDWORK(8),HEX1F      PREPARE FOR PACKING\n         TR    DXDWORK(8),CHARHEX    TRANSLATE FOR PACKING\n         PACK  COMMDWRD(5),DXDWORK(9) PACK TIME\n         CLC   REQCTIME,COMMDWRD     SAME TIME?\n         BE    MSTR0100              YES\n         MVC   REQCTIME,COMMDWRD     CHANGE TIME\n         OI    DXDFLAG,$UPDATE       RECORD WAS UPDATED\nMSTR0100 DS    0H\n         CLC   REQTNODE,FXMTNODE     SAME NODE?\n         BE    MSTR0110              YES\n         MVC   REQTNODE,FXMTNODE     CHANGE NODE\n         OI    DXDFLAG,$UPDATE       RECORD WAS UDPATED\nMSTR0110 DS    0H\n         LA    R1,FXMST              FIRST DIGIT OF STATUS\n         LA    R15,ERR0060           ERROR ROUTINE ADDRESS\n         BAL   R14,HEX0000           CHECK FOR VALID HEX\n         MVC   DXDWORK(2),FXMST      COPY STATUS\n         NC    DXDWORK(2),HEX1F      PREPARE FOR PACKING\n         TR    DXDWORK,CHARHEX       TRANSLATE FOR PACKING\n         PACK  DXDWORK+4(2),DXDWORK(3) PACK STATUS\n         CLC   REQSTAT,DXDWORK+4     SAME STATUS?\n         BE    MSTR0140              YES\n         MVC   REQSTAT,DXDWORK+4     CHANGE STATUS\n         OI    DXDFLAG,$UPDATE       RECORD WAS UDPATED\n         LA    R1,REQMSG             FIRST STATUS MESSAGE\nMSTR0120 DS    0H\n         CLI   0(R1),X'FF'           END OF TABLE?\n         BE    ERR0140               YES\n         CLC   REQSTAT,0(R1)         STATUS LOCATED?\n         BE    MSTR0130              YES\n         LA    R1,26(R1)             NEXT STATUS\n         B     MSTR0120              LOOP\nMSTR0130 DS    0H\n         MVC   FXMSTI,1(R1)          COPY STATUS MESSAGE\nMSTR0140 DS    0H\n         LA    R1,FXMUT              FIRST DIGIT OF UTILITY\n         LA    R15,ERR0090           ERROR ROUTINE ADDRESS\n         BAL   R14,HEX0000           CHECK FOR VALID HEX\n         MVC   DXDWORK(2),FXMUT      COPY UTILITY\n         NC    DXDWORK(2),HEX1F      PREPARE FOR PACKING\n         TR    DXDWORK,CHARHEX       TRANSLATE FOR PACKING\n         PACK  DXDWORK+4(2),DXDWORK(3) PACK UTILITY\n         CLC   REQUTIL,DXDWORK+4     SAME UTILITY?\n         BE    MSTR0150              YES\n         MVC   REQUTIL,DXDWORK+4     CHANGE UTILITY\n         OI    DXDFLAG,$UPDATE       RECORD WAS UPDATED\nMSTR0150 DS    0H\n         LA    R1,FXMFSIZE           FIRST DIGIT\n         LA    R2,L'FXMFSIZE         NUMBER OF DIGITS\n         LA    R15,ERR0110           ERROR ROUTINE ADDRESS\n         BAL   R14,NUMR0000          CHECK FOR NUMERIC\n         PACK  COMMDWRD,FXMFSIZE     PACK FILE SIZE\n         CVB   R1,COMMDWRD           CONVERT TO BINARY\n         CLM   R1,15,REQFSIZE        SAME FILE SIZE?\n         BE    MSTR0160              YES\n         STCM  R1,15,REQFSIZE        SAVE FILE SIZE\n         OI    DXDFLAG,$UPDATE       SET UPDATE FLAG\nMSTR0160 DS    0H\n         LA    R8,REQODSNM           FIRST DATASET NAME\n         LA    R2,FXMODSN            FIRST DATASET NAME\n         LA    R3,5                  NUMBER OF DATASET NAMES\nMSTR0180 DS    0H\n         CLC   0(L'REQODSNM,R8),0(R2) SAME DATASET NAME?\n         BE    MSTR0190               YES\n         MVC   0(L'REQODSNM,R8),0(R2) CHANGE DATASET NAME\n         OI    DXDFLAG,$UPDATE        RECORD WAS UPDATED\nMSTR0190 DS    0H\n         LA    R8,L'REQODSNM(R8)     NEXT DATASET NAME\n         LA    R2,L'REQODSNM(R2)     NEXT DATASET NAME\n         BCT   R3,MSTR0180           LOOP\n         CLC   REQOMEM,FXMOMEM       SAME ORIGINAL MEMBER NAME?\n         BE    MSTR0200              YES\n         MVC   REQOMEM,FXMOMEM       CHANGE MEMBER NAME\n         OI    DXDFLAG,$UPDATE       RECORD WAS UDPATED\nMSTR0200 DS    0H\n         CLC   REQDMEM,FXMDMEM       SAME DESTINATION MEMBER NAME?\n         BE    MSTR0210              YES\n         MVC   REQDMEM,FXMDMEM       CHANGE MEMBER NAME\n         OI    DXDFLAG,$UPDATE       RECORD WAS UPDATED\nMSTR0210 DS    0H\n         CLI   FXMREPL,C'Y'          VALID REPLACE FLAG?\n         BE    MSTR0220              YES\n         CLI   FXMREPL,C'N'          VALID REPLACE FLAG?\n         BNE   ERR0120               NO\nMSTR0220 DS    0H\n         CLC   REQREPL,FXMREPL       SAME FLAG?\n         BE    MSTR0230              YES\n         MVC   REQREPL,FXMREPL       CHANGE REPLACE INDICATOR\n         OI    DXDFLAG,$UPDATE       RECORD HAS BEEN UPDATED\nMSTR0230 DS    0H\n         CLI   FXMALIAS,C'Y'         VALID ALIAS FLAG?\n         BE    MSTR0240              YES\n         CLI   FXMALIAS,C'N'         VALID ALIAS FLAG?\n         BNE   ERR0150               NO\nMSTR0240 DS    0H\n         CLC   REQALIAS,FXMALIAS     SAME FLAG?\n         BE    MSTR0250              YES\n         MVC   REQALIAS,FXMALIAS     CHANGE ALIAS INDICATOR\n         OI    DXDFLAG,$UPDATE       RECORD HAS BEEN UPDATED\nMSTR0250 DS    0H\n         LA    R1,FXMNDE             FIRST DIGIT\n         LA    R2,3                  NUMBER OF DIGITS\n         LA    R15,ERR0070           ERROR ROUTINE ADDRESS\n         BAL   R14,NUMR0000          CHECK FOR NUMERIC\n         PACK  COMMDWRD,FXMNDE       PACK NUMBER OF NODES\n         CVB   R1,COMMDWRD           CONVERT TO BINARY\n         CLM   R1,3,REQNDE#          SAME NUMBER OF NODES?\n         BE    MSTR0260              YES\n         STCM  R1,3,REQNDE#          SAVE NUMBER OF NODES\n         OI    DXDFLAG,$UPDATE       SET UPDATE FLAG\nMSTR0260 DS    0H\n         TM    DXDFLAG,$UPDATE       RECORD UPDATED?\n         BNO   MSTR0300              NO\n         BAL   R5,SAVE0000           SAVE UPDATED RECORD\n         B     MSTR0400\nMSTR0300 DS    0H\n         CLC   ZCMD,BLANKS           COMMAND AREA BLANK?\n         BE    MSTR0400              YES\n         CLC   NODES,ZCMD            DISPLAY NODES?\n         BNE   ERR0130               NO\n         MVC   ZCMD,BLANKS           RESET COMMAND AREA\n         MVI   TNODECMD,$TNODEU      ALLOW UPDATING\n         ST    R6,TNODEREQ           PASS REQBLOK ADDRESS\n         LA    R1,ZCMD               SPF ZCMD AREA ADDRESS\n         ST    R1,TNODEZCM           PASS ADDRESS TO NODE DISPLAY\n         LA    R1,TNODEPRM           NODE DISPLAY PARM LIST\n         L     R15,ATNODE            NODE DISPLAY ENTRY POINT\n         BALR  R14,R15               LINK TO NODE DISPLAY\n         CLI   TNODESTA,$TNODEM      I/O AREA MODIFIED BY FXTNODE?\n         BNE   MSTR0400              NO\n         BAL   R5,SAVE0000           SAVE UPDATED RECORD\nMSTR0400 DS    0H\n         ITRACE ID=FORMAT            EDIT/FORMAT DATA FOR PANEL\n         MVC   FXMREC,REQREC#        COPY RECORD ID\n         MVC   FXMENODE,REQENODE     COPY NODE NAME\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,COMMDWRD           CONVERT TO DECIMAL\n         MVC   DXDWORK(8),=X'F020202020202020'\n         ED    DXDWORK(8),COMMDWRD+4 EDIT REQUEST NUMBER\n         MVC   FXMNBR,DXDWORK+1      COPY EDITED REQUEST NUMBER\n         MVC   FXMESTOR,REQESTOR     COPY REQUESTOR NAME\n         MVC   FXMJOB,REQJOB         COPY JOB NAME\n         MVC   DXDWORK(L'DATEEDWD),DATEEDWD\n         ED    DXDWORK(L'DATEEDWD),REQEDATE    EDIT DATE ENTERED\n         MVC   FXMEDATE,DXDWORK+1    COPY DATE ENTERED\n         UNPK  DXDWORK(9),REQETIME(5) UNPACK TIME ENTERED\n         MVZ   DXDWORK(8),NULLS      REMOVE ZONES\n         TR    DXDWORK(8),HEXCHAR    MAKE PRINTABLE\n         MVC   FXMETIME,DXDWORK      COPY TIME ENTERED\n         MVC   DXDWORK(L'DATEEDWD),DATEEDWD\n         ED    DXDWORK(L'DATEEDWD),REQCDATE    EDIT COMPLETION DATE\n         MVC   FXMCDATE,DXDWORK+1    COPY DATE COMPLETED\n         UNPK  DXDWORK(9),REQCTIME(5) UNPACK TIME COMPLETED\n         MVZ   DXDWORK(8),NULLS      REMOVE ZONES\n         TR    DXDWORK(8),HEXCHAR    MAKE PRINTABLE\n         MVC   FXMCTIME,DXDWORK      COPY TIME COMPLETED\n         MVC   FXMTNODE,REQTNODE     COPY TRANSMITTING NODE\n         UNPK  DXDWORK(3),REQSTAT(2) UNPACK STATUS\n         MVZ   DXDWORK(2),NULLS      REMOVE ZONES\n         TR    DXDWORK(2),HEXCHAR    MAKE PRINTABLE\n         MVC   FXMST,DXDWORK         COPY STATUS\n         LA    R1,REQMSG             FIRST STATUS MESSAGE\nMSTR0410 DS    0H\n         CLI   0(R1),X'FF'           END OF TABLE?\n         BE    MSTR0420              YES\n         CLC   REQSTAT,0(R1)         STATUS LOCATED?\n         BE    MSTR0420              YES\n         LA    R1,26(R1)             NEXT STATUS\n         B     MSTR0410              LOOP\nMSTR0420 DS    0H\n         MVC   FXMSTI,1(R1)          COPY STATUS MESSAGE\n         UNPK  DXDWORK(3),REQUTIL(2) UNPACK UTILITY\n         MVZ   DXDWORK(2),NULLS      REMOVE ZONES\n         TR    DXDWORK(2),HEXCHAR    MAKE PRINTABLE\n         MVC   FXMUT,DXDWORK         COPY UTILITY\n         ICM   R1,15,REQFSIZE        FILE SIZE\n         CVD   R1,COMMDWRD           CONVERT TO DECIMAL\n         MVC   DXDWORK(L'SIZEEDWD),SIZEEDWD\n         ED    DXDWORK,COMMDWRD+3    EDIT FILE SIZE\n         MVC   FXMFSIZE,DXDWORK+1    COPY FILE SIZE\n         MVC   FXMODSN,REQODSNM      COPY ORIGINAL DATASET NAME\n         MVC   FXMOMEM,REQOMEM       COPY ORIGINAL MEMBER NAME\n         MVC   FXMDDSN,REQDDSNM      COPY DESTINATION DATASET NAME\n         MVC   FXMDMEM,REQDMEM       COPY DESTINATION MEMBER NAME\n         MVC   FXMWDSN,REQWDSNM      COPY STAGING DATASET NAME\n         MVC   FXMIDSN,REQIDSNM      COPY SYSIN DATASET NAME\n         MVC   FXMSDSN,REQSDSNM      COPY SYSOUT DATASET NAME\n         CLI   REQREPL,C'Y'          REPLACE AT DESTINATION?\n         BE    MSTR0430              YES\n         MVC   FXMREPL,NO            INDICATE 'NO'\n         B     MSTR0440\nMSTR0430 DS    0H\n         MVC   FXMREPL,YES           INDICATE 'YES'\nMSTR0440 DS    0H\n         CLI   REQALIAS,C'Y'         TRANSMIT ALIASES?\n         BE    MSTR0450              YES\n         MVC   FXMALIAS,NO           INDICATE 'NO'\n         B     MSTR0460\nMSTR0450 DS    0H\n         MVC   FXMALIAS,YES          INDICATE 'YES'\nMSTR0460 DS    0H\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,REQNDE#          NUMBER OF NODES\n         CVD   R1,COMMDWRD           CONVERT TO DECIMAL\n         MVC   DXDWORK(L'NODEEDWD),NODEEDWD\n         ED    DXDWORK(L'NODEEDWD),COMMDWRD+6\n         MVC   FXMNDE,DXDWORK+1      COPY NUMBER OF NODES\n         B     MSTR0020              RE-DISPLAY\n         DROP  R6\nSAVE0000 DS    0H\n         ITRACE ID=UPDATE            RECORD WAS UPDATED, SAVE DIV OBJEC\n         FXCALL FXSMSTR,WRITE        RE-WRITE MASTER FILE RECORD\n         BR    R5                    RETURN\nNUMR0000 DS    0H\n         CLI   0(R1),C'0'            VALID DIGIT?\n         BLR   R15                   NO\n         CLI   0(R1),C'9'            VALID DIGIT?\n         BHR   R15                   NO\n         LA    R1,1(R1)              NEXT DIGIT\n         BCT   R2,NUMR0000           CHECK ALL DIGITS\n         BR    R14                   DONE\nHEX0000  DS    0H\n         LA    R7,2                  NUMBER OF DIGITS\nHEX0010  DS    0H\n         CLI   0(R1),C'A'            VALID DIGIT?\n         BLR   R15                   NO\n         CLI   0(R1),C'F'            VALID DIGIT?\n         BNH   HEX0020               YES\n         CLI   0(R1),C'0'            VALID DIGIT?\n         BLR   R15                   NO\n         CLI   0(R1),C'9'            VALID DIGIT?\n         BHR   R15                   NO\nHEX0020  DS    0H\n         LA    R1,1(R1)              NEXT DIGIT\n         BCT   R7,HEX0010            CHECK ALL DIGITS\n         BR    R14                   DONE\n* ------------------------------------------------------------------- *\n*        ERROR ROUTINES                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=KEYNUMER,         KEY NOT NUMERIC                   +\n               DATA1=FXMKEY\n         MVC   FXMMSG(MSG01L),MSG01  SET MESSAGE\n         B     MSTR0020              DISPLAY PANEL WITH MESSAGE\nERR0020  DS    0H\n         ITRACE ID=KEYRANGE,         KEY OUT OF RANGE                  +\n               DATA1=FXMKEY\n         MVC   FXMMSG(MSG02L),MSG02  SET MESSAGE\n         B     MSTR0020              DISPLAY PANEL WITH MESSAGE\nERR0030  DS    0H\n         ITRACE ID=DATEDELM          PERIOD NOT IN DATE\n         MVC   FXMMSG(MSG03L),MSG03  SET MESSAGE\n         B     MSTR0020              DISPLAY PANEL WITH MESSAGE\nERR0040  DS    0H\n         ITRACE ID=DATENUM           DATE NOT NUMERIC\n         MVC   FXMMSG(MSG04L),MSG04  SET MESSAGE\n         B     MSTR0020              DISPLAY PANEL WITH MESSAGE\nERR0050  DS    0H\n         ITRACE ID=TIMENUM           TIME NOT NUMERIC\n         MVC   FXMMSG(MSG05L),MSG05  SET MESSAGE\n         B     MSTR0020              DISPLAY PANEL WITH MESSAGE\nERR0060  DS    0H\n         ITRACE ID=BADSTAT           STATUS NOT VALID HEX\n         MVC   FXMMSG(MSG06L),MSG06  SET MESSAGE\n         B     MSTR0020              DISPLAY PANEL WITH MESSAGE\nERR0070  DS    0H\n         ITRACE ID=NODENUM           NUMBER OF NODES NOT NUMERIC\n         MVC   FXMMSG(MSG07L),MSG07  SET MESSAGE\n         B     MSTR0020              DISPLAY PANEL WITH MESSAGE\nERR0080  DS    0H\n         ITRACE ID=BADNSTAT          NODE STATUS NOT VALID HEX\n         MVC   FXMMSG(MSG08L),MSG08  SET MESSAGE\n         B     MSTR0020              DISPLAY PANEL WITH MESSAGE\nERR0090  DS    0H\n         ITRACE ID=BADUTIL           UTILITY  NOT VALID HEX\n         MVC   FXMMSG(MSG09L),MSG09  SET MESSAGE\n         B     MSTR0020              DISPLAY PANEL WITH MESSAGE\nERR0100  DS    0H\n         ITRACE ID=REQ#NUM           REQUEST NUMBER NOT NUMERIC\n         MVC   FXMMSG(MSG10L),MSG10  SET MESSAGE\n         B     MSTR0020              DISPLAY PANEL WITH MESSAGE\nERR0110  DS    0H\n         ITRACE ID=FSIZENUM          FILE SIZE NOT NUMERIC\n         MVC   FXMMSG(MSG11L),MSG11  SET MESSAGE\n         B     MSTR0020              DISPLAY PANEL WITH MESSAGE\nERR0120  DS    0H\n         ITRACE ID=BADREPL           REPLACE INDICATOR NOT 'Y' OR 'N'\n         MVC   FXMMSG(MSG13L),MSG13  SET MESSAGE\n         B     MSTR0020              DISPLAY PANEL WITH MESSAGE\nERR0130  DS    0H\n         ITRACE ID=BADCMD            BAD COMMAND IN ZCMD AREA\n         MVC   FXMMSG(MSG14L),MSG14  SET MESSAGE\n         B     MSTR0020              DISPLAY PANEL WITH MESSAGE\nERR0140  DS    0H\n         ITRACE ID=BADSTAT,          STATUS NOT DEFINED                +\n               DATA1=FXMST\n         MVC   FXMMSG(MSG15L),MSG15  SET MESSAGE\n         B     MSTR0020              DISPLAY PANEL WITH MESSAGE\nERR0150  DS    0H\n         ITRACE ID=BADALIAS          ALIAS INDICATOR NOT 'Y' OR 'N'\n         MVC   FXMMSG(MSG16L),MSG16  SET MESSAGE\n         B     MSTR0020              DISPLAY PANEL WITH MESSAGE\n* ------------------------------------------------------------------- *\n*        EXIT                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=VAREOJ\n         MVI   VARCMD,$VAREOJ        SET COMMAND (EOJ CLEAN-UP)\n         LA    R1,VARREQ             VARIABLE REQUEST BLOCK\n         L     R15,VTVAR             VARIABLE MANAGER ENTRY POINT\n         BALR  R14,R15               LINK TO VARIABLE MANAGER\n         DELETE EP=ISPLINK           DELETE SPF INTERFACE\n         FXCALL FXSMSTR,CLOSE        CLOSE MASTER FILE\n         DELETE EP=FXSMSTR           DELETE MASTER FILE I/O\n         L     R1,TRADDR             TRACE TABLE ADDRESS\n         L     R3,TRSIZE             TRACE TABLE SIZE\n         FREEMAIN RU,A=(1),LV=(R3)   FREE TRACE TABLE\n         L     R3,DXDSIZE            DYNAMIC WORK AREA SIZE\n         L     R4,COMMDXDA           DYNAMIC WORK AREA ADDRESS\n         DELETE EP=FXMCOMM           DELETE COMMON DATA MODULE\n         L     R13,4(R13)            RESTORE REGISTER 13\n         FREEMAIN RU,A=(4),LV=(3)    FREEMAIN WORK AREA\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS\n         SR    R15,R15               GIVE GOOD RETURN CODE\n         BR    R14                   RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSIZE  CXD\nDXDSTART DC    Q(DXDMMAIN)\nVTVAR    DC    V(FXTVAR)             VARIABLE MANAGER\nVTNODE   DC    V(FXTNODE)            NODE (DESTINATION LIST) DISPLAY\nH8       DC    H'8'\nNULLS    DC    8X'00'\nBLANKS   DC    CL80' '\nNODES    DC    C'NODES'\nHEX1F    DC    8X'1F'\nHEXCHAR  DC    C'0123456789ABCDEF'\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\nCHARHEX  DC    X'000A0B0C0D0E0F000000000000000000'  X'00-0F'\n         DC    X'00010203040506070809000000000000'  X'10-1F'\nDATEEDWD DC    X'F0212020204B202020'\nNODEEDWD DC    X'F0202020'\nSIZEEDWD DC    X'F0202020202020202120'\nNO       DC    CL3'NO '\nYES      DC    CL3'YES'\nDISPLAY  DC    CL8'DISPLAY'\nPANLNAME DC    CL8'FXMAINT1'\nMSG01    DC    C'INVALID DIGIT IN RECORD KEY'\nMSG01L   EQU   *-MSG01\nMSG02    DC    C'RECORD KEY OUT OF RANGE'\nMSG02L   EQU   *-MSG02\nMSG03    DC    C'PERIOD NOT PRESENT IN DATE'\nMSG03L   EQU   *-MSG03\nMSG04    DC    C'INVALID DIGIT IN DATE'\nMSG04L   EQU   *-MSG04\nMSG05    DC    C'INVALID DIGIT IN TIME'\nMSG05L   EQU   *-MSG05\nMSG06    DC    C'INVALID HEX DIGIT IN STATUS'\nMSG06L   EQU   *-MSG06\nMSG07    DC    C'INVALID DIGIT IN NUMBER OF NODES'\nMSG07L   EQU   *-MSG07\nMSG08    DC    C'INVALID HEX DIGIT IN NODE STATUS'\nMSG08L   EQU   *-MSG08\nMSG09    DC    C'INVALID HEX DIGIT IN UTILITY'\nMSG09L   EQU   *-MSG09\nMSG10    DC    C'INVALID DIGIT IN REQUEST NUMBER'\nMSG10L   EQU   *-MSG10\nMSG11    DC    C'INVALID DIGIT IN FILE SIZE'\nMSG11L   EQU   *-MSG11\nMSG13    DC    C'INVALID REPLACE FLAG'\nMSG13L   EQU   *-MSG13\nMSG14    DC    C'INVALID COMMAND'\nMSG14L   EQU   *-MSG14\nMSG15    DC    C'INVALID STATUS VALUE'\nMSG15L   EQU   *-MSG15\nMSG16    DC    C'INVALID ALIAS FLAG'\nMSG16L   EQU   *-MSG16\n         LTORG\nREQMSG   DS    0C\n         COPY  REQMSG\n* ------------------------------------------------------------------- *\n*        Work areas                                                   *\n* ------------------------------------------------------------------- *\nDXDMMAIN DSECT\nDXDID    DS    CL8\nDXDSAVE  DS    18F                   REGISTER SAVE AREA\nDXDSPFEP DS    A\n         SPACE 1\nDXDSPFP  DS    0A                    ISPF PARAMETER LIST\nDXDSPFP1 DS    A                     PARAMETER 1\nDXDSPFP2 DS    A                     PARAMETER 2\nDXDSPFP3 DS    A                     PARAMETER 3\nDXDSPFP4 DS    A                     PARAMETER 4\nDXDSPFP5 DS    A                     PARAMETER 5\nDXDFLAG  DS    X                     STATUS FLAGS\n$UPDATE  EQU   X'80'                 .. RECORD UPDATED\nDXDWORK  DS    CL10\n         VARREQ   DSECT=NO\n         TNODEPRM DSECT=NO\n         MSTRREQ  DSECT=NO\n* ------------------------------------------------------------------- *\n*        Master file record                                           *\n* ------------------------------------------------------------------- *\n         REQBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*        Common data                                                  *\n* ------------------------------------------------------------------- *\n         FXMCOMM TYPE=DSECT\n         COPY    XTRRECD\n* ------------------------------------------------------------------- *\n*        Data for SPF variables                                       *\n* ------------------------------------------------------------------- *\nFXMCOMM  DSECT\n         FXMTDATA DSECT=NO\nFXMVTBLE DS    0C\n         VDEF  BASE=FXMTDATA\n         FXMVARS GEN=YES\n* ------------------------------------------------------------------- *\n*              Equates                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  FXMMAIN\n./ ADD NAME=FXNTBLE  0100-99056-99056-1500-00024-00024-00000-FX-REL1\n\n* ------------------------------------------------------------------- *\n* Module name: FXNTBLE                                                *\n*                                                                     *\n* Node display module SPF variable control data.  Each entry in this  *\n* table is used to define and delete an SPF variable.  Module FXTVAR  *\n* uses the data to convert the internal variable id to the SPF        *\n* variable name, locate the storage associated with that variable,    *\n* determine the variable's data format and length, and sets flags to  *\n* indicate which variables are defined at any given time.  Since      *\n* flags are set (the data in the table is updated), this module may   *\n* not be linked re-entrant... therefore is is linked as a separate    *\n* load module.                                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXNTBLE  CSECT\nFXNTBLE  AMODE 31\nFXNTBLE  RMODE ANY\n         VDEF    BASE=FXNDATA\n         FXNVARS GEN=YES\n         DC    X'FF'\nFXNDATA  DSECT\n         COPY  FXNDATA\n         END   FXNTBLE\n./ ADD NAME=FXPCOMM  0100-99056-99056-1500-00014-00014-00000-FX-REL1\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Name: FXPCOMM                                                      *\n*                                                                     *\n*  TSO interface common data and trace table manager                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  OPTIONS\n         FXPCOMM TYPE=CSECT\nFXPCOMM  CSECT\n         DC    X'FF'\n         COPY  REGEQU\n         END   FXPCOMM\n./ ADD NAME=FXPURGE  0100-99056-99056-1500-00598-00598-00000-FX-REL1\n\n         TITLE 'FXPURGE  PURGE OLD REQUESTS FROM MASTER FILE'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXPURGE                                               *\n*                                                                     *\n*   Purge old requests from master file.  This prevents the master    *\n*   file from \"filling up\".  A request may be purged in one of        *\n*   two states.  If the request has been \"completed\", the retention   *\n*   period is specified by the RETPDC keyword.  If a request is in    *\n*   an uncompleted state (if some destination node has not become     *\n*   available for a long period of time for some reason), the         *\n*   request will be purged based on the RETPDU keyword.               *\n*                                                                     *\n*   A secondary function is to create a \"sequentialized\" master file. *\n*   If this function is used, no records are purged from the master   *\n*   file, all records whether in use or not are copied to the output  *\n*   file.                                                             *\n*                                                                     *\n*   When records are purged, you may want to either create a GDG      *\n*   and have each run generate a new generation with the records      *\n*   purged during that run.  On the other hand you may want to        *\n*   keep a cumulative history of purged records, taking the output    *\n*   from each purge run and feeding that back in and appending        *\n*   the records being purged on the current run.  To allow this,      *\n*   the OLDSEQ DD is the \"previous data\" and is copied to the NEWSEQ  *\n*   data set before any new records are purged.  If you do not want   *\n*   a cumulative history, allocate the OLDSEQ with a \"DD DUMMY\".      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXPURGE  CSECT\nFXPURGE  AMODE 31\nFXPURGE  RMODE 24\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               COPY BASE ADDRESS\n         USING FXPURGE,R12           DEFINE BASE\n         B     @@000001              BRANCH AROUND EYECATCHER\n         DC    ((PFXMODNM-MODPRFX)-(*-FXPURGE))X'00'\n         DC    CL8'FXMMAIN'          MODULE NAME\n         DC    CL8'&SYSDATE'         DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'         TIME OF ASSEMBLY\n@@000001 DS    0H\n         LA    R1,SAVEAREA           OUR SAVE AREA ADDRESS\n         ST    R1,8(R13)             CHAIN TO CALLER'S\n         ST    R13,4(R1)             CHAIN CALLERS TO OURS\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         USING SAVEAREA,R13          DEFINE 2ND BASE\n         LOAD  EP=FXPCOMM            LOAD COMMON MODULE\n         LR    R11,R0                SET BASE\n         USING FXPCOMM,R11           DEFINE BASE\n         ST    R12,AMAIN             SET MAIN MODULE ADDRESS\n         LOAD  EP=FXSMSTR            LOAD MASTER FILE I/O\n         ST    R0,AMSTR              SAVE MASTER FILE I/O ENTRY POINT\n         L     R3,TRSIZE             TRACE TABLE SIZE\n         GETMAIN RU,                 ACQUIRE STOAGE FOR TRACE TABLE    +\n               LV=(R3),              .. SIZE IS IN R3                  +\n               LOC=ANY               .. MAY BE ABOVE OR BELOW\n         ST    R1,TRADDR             SAVE TRACE TABLE STORAGE ADDRESS\n         SR    R0,R0                 ASSUME A 32-BYTE BOUNDARY\n         TM    TRADDR+3,X'07'        ALREADY ON A 32-BYTE BOUNDARY\n         BNO   INIT0000              YES\n         SLR   R1,5                  SHIFT OUT LOW BITS..\n         SLL   R1,5                  .. TO ROUND TO 32-BYTE BOUNDARY\n         LA    R1,32(R1)             PLUS 32\n         LA    R0,TRENTRYL           1 LESS TRACE ENTRY AVAILABLE\nINIT0000 DS    0H\n         ST    R1,TRFIRST            FIRST TRACE ENTRY AVAILABLE\n         ST    R1,TRCURR             CURRENT TRACE ENTRY\n         A     R1,TRSIZE             LAST ENTRY IN TABLE\n         SH    R1,=Y(TRENTRYL)       MINUS 1 ENTRY\n         SR    R1,R0                 MINUS 1 MORE IF NECESSARY\n         ST    R1,TRLAST             SET LAST TRACE ENTRY ADDRESS\n         ITRACE ID=INITIAL\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         OPEN  (FXIN,INPUT)          OPEN CONTROL STATEMENT FILE\n         OPEN  (FXPRINT,OUTPUT)      OPEN PRINT FILE\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         BAL   R10,HEAD0000          PRINT HEADING\nINIT0010 DS    0H\n         ITRACE ID=READCTL           READING A CONTROL STATEMENT\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         GET   FXIN,CTLSTMT          READ A CONTROL STATEMENT\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         MVC   MSG01TXT(CTLSTMTL),CTLSTMT\n         MVC   PLINE(MSG01L),MSG01   COPY MESSAGE\n         BAL   R10,PRT0000           PRINT CONTROL STATEMENT\n         CLI   CTLSTMT,C'*'          COMMENT?\n         BE    INIT0010              YES\n         ITRACE ID=CTLSTMT,                                            +\n               DATA1=CTLSTMT,                                          +\n               DATA2=CTLSTMT+8\n         CLC   COPYSTMT,CTLSTMT      COPY STATEMENT?\n         BE    COPY0000              YES\n         CLC   RETCSTMT,CTLSTMT      RETPDC STATEMENT?\n         BE    RETC0000              YES\n         CLC   RETUSTMT,CTLSTMT      RETPDU STATEMENT?\n         BE    RETU0000              YES\n         MVC   PLINE(MSG02L),MSG02   INVALID STATEMENT\n         BAL   R10,PRT0000           PRINT MESSAGE\n         OI    PROCFLAG,$ERROR       SET ERROR FLAG\n         B     INIT0010              READ NEXT CONTROL STATEMENT\nCOPY0000 DS    0H\n         ITRACE ID=COPY\n         TM    PROCFLAG,$COPY        COPY ALREADY REQUESTED?\n         BO    COPY0010              YES\n         OI    PROCFLAG,$COPY        SET COPY FLAG\n         B     INIT0010              READ NEXT CONTROL STATEMENT\nCOPY0010 DS    0H\n         ITRACE ID=DUPCOPY\n         MVC   PLINE(MSG03L),MSG03   DUPLICATED COPY STATEMENT\n         BAL   R10,PRT0000           PRINT MESSAGE\n         OI    PROCFLAG,$ERROR       SET ERROR FLAG\n         B     INIT0010              READ NEXT CONTROL STATEMENT\nRETC0000 DS    0H\n         ITRACE ID=RETC,                                               +\n               DATA1=CTLSTMT+L'RETCSTMT\n         TM    PROCFLAG,$RETPDC      ALREADY HAVE A RETPDC?\n         BO    RETC0010              YES\n         OI    PROCFLAG,$RETPDC      INDICATE RETPDC PRESENT\n         LA    R7,RETPDC             OUTPUT FIELD'S ADDRESS\n         LA    R1,CTLSTMT+L'RETCSTMT FIRST DIGIT\n         B     RETP0000              PROCESS A RETENTION PERIOD\nRETC0010 DS    0H\n         ITRACE ID=DUPRETC\n         MVC   PLINE(MSG04L),MSG04   DUPLICATED RETPDC VALUE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         OI    PROCFLAG,$ERROR       SET ERROR FLAG\n         B     INIT0010              READ NEXT CONTROL STATEMENT\nRETU0000 DS    0H\n         ITRACE ID=RETU,                                               +\n               DATA1=CTLSTMT+L'RETUSTMT\n         TM    PROCFLAG,$RETPDU      ALREADY HAVE A RETPDU?\n         BO    RETU0010              YES\n         OI    PROCFLAG,$RETPDU      INDICATE RETPDU PRESENT\n         LA    R7,RETPDU             OUTPUT FIELD'S ADDRESS\n         LA    R1,CTLSTMT+L'RETUSTMT FIRST DIGIT\n         B     RETP0000              PROCESS A RETENTION PERIOD\nRETU0010 DS    0H\n         ITRACE ID=DUPRETU\n         MVC   PLINE(MSG05L),MSG05   DUPLICATED RETPDU VALUE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         OI    PROCFLAG,$ERROR       SET ERROR FLAG\n         B     INIT0010              READ NEXT CONTROL STATEMENT\nRETP0000 DS    0H\n         MVC   NBRIN,=C'000'         INITIALIZE TO ZERO\n         LA    R2,3                  NUMBER OF DIGITS\nRETP0010 DS    0H\n         CLI   0(R1),C' '            BLANK?\n         BE    RETP0020              YES\n         CLI   0(R1),C'0'            VALID DIGIT?\n         BL    RETP0030              NO\n         CLI   0(R1),C'9'            VALID DIGIT?\n         BH    RETP0030              NO\n         MVC   NBRIN(2),NBRIN+1      SHIFT LEFT 1 DIGIT\n         MVC   NBRIN+2(1),0(R1)      COPY DIGIT\n         LA    R1,1(R1)              NEXT DIGIT\n         BCT   R2,RETP0010           LOOP\n         CLI   0(R1),C' '            BLANK?\n         BNE   RETP0040              NO\nRETP0020 DS    0H\n         PACK  DWORD,NBRIN           PACK NUMBER OF DAYS\n         CVB   R1,DWORD              CONVERT TO BINARY\n         LTR   R1,R1                 VALUE ZERO?\n         BZ    RETP0050              YES\n         STH   R1,0(R7)              SAVE RETENTION PERIOD\n         B     INIT0010              READ NEXT CONTROL STATEMENT\nRETP0030 DS    0H\n         MVC   PLINE(MSG06L),MSG06   INVALID DIGIT IN RETPD VALUE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         OI    PROCFLAG,$ERROR       SET ERROR FLAG\n         B     INIT0010              READ NEXT CONTROL STATEMENT\nRETP0040 DS    0H\n         MVC   PLINE(MSG07L),MSG07   TOO MANY DIGITS IN RETPD VALUE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         OI    PROCFLAG,$ERROR       SET ERROR FLAG\n         B     INIT0010              READ NEXT CONTROL STATEMENT\nRETP0050 DS    0H\n         MVC   PLINE(MSG08L),MSG08   RETPD IS ZERO DAYS\n         BAL   R10,PRT0000           PRINT MESSAGE\n         OI    PROCFLAG,$ERROR       SET ERROR FLAG\n         B     INIT0010              READ NEXT CONTROL STATEMENT\nPROC0000 DS    0H\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         ITRACE ID=CTLEOF\n         TM    PROCFLAG,$ERROR       ERROR ALREADY SET?\n         BO    EXIT0000              YES\n         TM    PROCFLAG,$COPY        WAS COPY REQUESTED?\n         BO    PROC0010              YES\n         TM    PROCFLAG,$RETPDC+$RETPDU   BOTH RETPDC AND RETPDU GIVEN?\n         BO    PROC0020              YES\n         MVC   PLINE(MSG09L),MSG09   RETPDC AND RETPDU ARE REQUIRED\n         BAL   R10,PRT0000           PRINT MESSAGE\n         OI    PROCFLAG,$ERROR       SET ERROR FLAG\n         B     EXIT0000              EXIT\nPROC0010 DS    0H\n         TM    PROCFLAG,$RETPDC+$RETPDU   RETPDC OR RETPDU GIVEN?\n         BZ    PROC0020              NO\n         MVC   PLINE(MSG10L),MSG10   COPY AND PURGE IN ONE EXECUTION\n         BAL   R10,PRT0000           PRINT MESSAGE\n         OI    PROCFLAG,$ERROR       SET ERROR FLAG\n         B     EXIT0000              EXIT\nPROC0020 DS    0H\n         ITRACE ID=OPENNEW\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         OPEN  (NEWSEQ,OUTPUT)       OPEN OUTPUT DATASET\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         TM    PROCFLAG,$COPY        COPYING RECORDS?\n         BO    PROC0060              YES\n         ITRACE ID=OPENOLD\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         OPEN  (OLDSEQ,INPUT)        OPEN PREVIOUS DATASET\n         B     PROC0040              SWITCH TO 31-BIT MODE\nPROC0030 DS    0H\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\nPROC0040 DS    0H\n         GET   OLDSEQ,REQBLOK        READ FROM PREVIOUS FILE\n         AP    OLDCT,P1              ADD 1 TO NUMBER OF OLD RECORDS\n         PUT   NEWSEQ,REQBLOK        COPY TO NEW FILE\n         AP    NEWCT,P1              ADD 1 TO NUMBER OF NEW RECORDS\n         B     PROC0030              COPY ALL RECORDS\nPROC0050 DS    0H\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\nPROC0060 DS    0H\n         XC    DWORD,DWORD           CLEAR WORK AREA\n         TIME  DEC\n         LR    R0,R1                 SAVE DATE IN JULIAN FORMAT\n         SRL   R1,12                 SHIFT DATE TO LOW NIBBLES\n         STCM  R1,3,DWORD+6          SAVE CYY (AND HIGH BYTE OF DAY)\n         OI    DWORD+7,X'0F'         FORCE LAST DIGIT TO SIGN\n         CVB   R1,DWORD              CONVERT YEAR TO BINARY\n         MH    R1,H365               TIMES DAYS PER YEAR\n         STCM  R0,3,DWORD+6          SAVE DAY\n         CVB   R0,DWORD              CONVERT DAY\n         AR    R1,R0                 DAYS SINCE JAN 1, 1900\n         ST    R1,CURRDAY            SAVE CURRENT DAY\n         LA    R5,DYNRB              DYNALLOC REQUEST BLOCK'S ADDRESS\n         USING S99RB,R5              DEFINE BASE\n         MVI   S99RBLN,S99RBEND-S99RB\n         LA    R1,DYNPARM            DDNAME PARM\n         ST    R1,S99TXTPP           SET FIRST TEXT UNIT ADDRESS\n         FXCALL FXSMSTR,OPEN         OPEN MASTER FILE\n         L     R9,COMMRECS           NUMBER OF RECORDS IN MASTER FILE\n         XC    MSTRREC#,MSTRREC#     FIRST RECORD NUMBER\nPURG0010 DS    0H\n         ITRACE ID=READMSTR,                                           +\n               DATA1=MSTRREC#,                                         +\n               RDATA2=R9\n         FXCALL FXSMSTR,READ         READ A RECORD\n         TM    PROCFLAG,$COPY        COPYING ONLY?\n         BO    PURG0070              YES\n         CLI   REQSTAT,X'FF'         CONTROL RECORD?\n         BE    PURG0080              YES.. NEVER PURGE IT\n         CLI   REQSTAT,$REQDUMP      NEVER USED, FREE, OR INIT STATE?\n         BL    PURG0080              YES.. SKIP IT\n         ICM   R1,15,REQEDATE        DATE IN JULIAN FORMAT\n         LR    R0,R1                 SAVE DATE IN JULIAN FORMAT\n         SRL   R1,12                 SHIFT DATE TO LOW NIBBLES\n         STCM  R1,3,DWORD+6          SAVE CYY (AND HIGH BYTE OF DAY)\n         OI    DWORD+7,X'0F'         FORCE LAST DIGIT TO SIGN\n         CVB   R1,DWORD              CONVERT YEAR TO BINARY\n         MH    R1,H365               TIMES DAYS PER YEAR\n         STCM  R0,3,DWORD+6          SAVE DAY\n         CVB   R0,DWORD              CONVERT DAY\n         AR    R1,R0                 DAYS SINCE JAN 1, 1900\n         L     R0,CURRDAY            CURRENT DAY\n         SR    R0,R1                 DAYS SINCE REQUEST WAS ENTERED\n         CLI   REQSTAT,$REQDONE      IN 'COMPLETE' (OR ERROR) STATUS?\n         BL    PURG0020              NO\n         CH    R0,RETPDC             TIME TO PURGE AS COMPLETED?\n         BL    PURG0080              NO\n         AP    PURGECCT,P1           ADD 1 TO COMPLETE-STATE PURGES\n         B     PURG0030\nPURG0020 DS    0H\n         CH    R0,RETPDU             TIME TO PURGE?\n         BL    PURG0080              NO\n         AP    PURGEUCT,P1           ADD 1 TO INCOMPLETE-STATE PURGES\nPURG0030 DS    0H\n         CLC   REQWDSNM,BLANKS       WORK DATASET PRESENT?\n         BE    PURG0040              NO\n         MVC   DSNAME,REQWDSNM       SET DSNAME\n         BAL   R10,DAIR0000          DELETE THE DATASET\nPURG0040 DS    0H\n         CLC   REQIDSNM,BLANKS       SYSIN DATASET PRESENT?\n         BE    PURG0050              NO\n         MVC   DSNAME,REQIDSNM       SET DSNAME\n         BAL   R10,DAIR0000          DELETE THE DATASET\nPURG0050 DS    0H\n         CLC   REQSDSNM,BLANKS       SYSPRINT DATASET PRESENT?\n         BE    PURG0060              NO\n         MVC   DSNAME,REQSDSNM       SET DSNAME\n         BAL   R10,DAIR0000          DELETE THE DATASET\nPURG0060 DS    0H\n         MVC   MSG11NDE,REQENODE     COPY ENTRY POINT NODE\n         MVC   MSG11NBR,=X'4021202020202020'\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DWORD              CONVERT TO DECIMAL\n         ED    MSG11NBR,DWORD+4      EDIT REQUEST NUMBER\n         MVC   PLINE(MSG11L),MSG11   COPY MESSAGE\n         BAL   R10,PRT0000           PRINT MESAGE\nPURG0070 DS    0H\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         PUT   NEWSEQ,REQBLOK        WRITE TO SEQUENTIAL FILE\n         AP    NEWCT,P1              ADD 1 TO NEW RECORDS\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         TM    PROCFLAG,$COPY        COPYING RECORDS?\n         BO    PURG0080              YES\n         MINIT BLANKS,P0,$REQFREE,R14 RESET MASTER FILE RECORD\n         FXCALL FXSMSTR,WRITE        RE-WRITE MASTER FILE RECORD\nPURG0080 DS    0H\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,MSTRREC#         CURRENT RECORD NUMBER\n         LA    R1,1(R1)              NEXT RECORD NUMBER\n         STCM  R1,3,MSTRREC#         SAVE RECORD NUMBER\n         BCT   R9,PURG0010           TEST ALL RECORDS\n         ITRACE ID=CLOSENEW\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         CLOSE NEWSEQ                OPEN OUTPUT FILE\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         B     EXIT0000              EXIT\nDAIR0000 DS    0H\n         MVI   S99VERB,S99VRBAL      SET VERB (ALLOCATE)\n         NI    DYNPARM,X'7F'         RESET END-OF-LIST\n         LA    R1,DYNRBA             POINTER'S ADDRESS\n         DYNALLOC                    ALLOCATE THE DATASET\n         LTR   R15,R15               ALLOCATE SUCCESSFUL?\n         BNZ   DAIR0010              NO\n         MVI   S99VERB,S99VRBUN      SET VERB (DE-ALLOCATE)\n         OI    DYNPARM,X'80'         SET END-OF-LIST\n         LA    R1,DYNRBA             POINTER'S ADDRESS\n         DYNALLOC                    DE-ALLOCATE THE DATASET\n         LTR   R15,R15               DE-ALLOCATE SUCCESSFUL?\n         BZR   R10                   YES\nDAIR0010 DS    0H\n         CLC   X1708,S99ERROR        DATA SET NOT FOUND?\n         BER   R10                   NOT, FOUND (ACCEPTABLE)\n         ST    R15,DWORD             SAVE RETURN CODE\n         UNPK  MSG13R15(5),DWORD+2(3) UNPACK R15\n         MVZ   MSG13R15,HEXZERO       CLEAR ZONES\n         TR    MSG13R15,HEXCHAR       TRANSLATE TO PRINTABLE\n         MVI   MSG13R15+4,C' '        RESTORE BLANK\n         UNPK  MSG13ERR(5),S99ERROR(3)\n         MVZ   MSG13ERR,HEXZERO      CLEAR ZONES\n         TR    MSG13ERR,HEXCHAR      TRANSLATE TO PRINTABLE\n         MVI   MSG13ERR+4,C' '       RESTORE BLANK\n         UNPK  MSG13INF(5),S99INFO(3)\n         MVZ   MSG13INF,HEXZERO      CLEAR ZONES\n         TR    MSG13INF,HEXCHAR      TRANSLATE TO PRINTABLE\n         MVI   MSG13INF+4,C' '       RESTORE BLANK\n         MVC   PLINE(MSG13L),MSG13   COPY MESSAGE\n         BAL   R10,PRT0000           PRINT IT\n         DC    H'0'\n         B     EXIT0000              AND EXIT\nPRT0000  DS    0H\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         PUT   FXPRINT,PLINE         PRINT\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         AP    LINECT,P1             ADD 1 TO LINE COUNT\n         CLI   PLINE,C' '            SINGLE SPACE?\n         BE    PRT0010               YES\n         AP    LINECT,P1             ADD 1 TO LINE COUNT\n         CLI   PLINE,C'0'            DOUBLE SPACE?\n         BE    PRT0010               YES\n         AP    LINECT,P1             ADD 1 TO LINE COUNT\nPRT0010  DS    0H\n         MVC   PLINE,PLINE-1         CLEAR PRINT I/O AREA\n         CP    LINECT,MAXLINE        TIME FOR HEADING?\n         BLR   R10                   NO\nHEAD0000 DS    0H\n         AP    PAGECT,P1             ADD 1 TO PAGE COUNT\n         MVC   HEADPAGE,=X'40202120' INITIALIZE WITH EDIT WORD\n         ED    HEADPAGE,PAGECT       EDIT PAGE COUNT\n         MVC   PLINE(HEADINGL),HEADING\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         PUT   FXPRINT,PLINE         PRINT HEADING\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         MVC   PLINE,PLINE-1         CLEAR PRINT I/O AREA\n         ZAP   LINECT,P1             RESET LINE COUNT\n         BR    R10\nAM24     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         BSM   R0,R15                RETURN IN 24-BIT MODE\nAM31     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         O     R15,X80               SET 31-BIT MODE\n         BSM   R0,R15                RETURN IN 24-BIT MODE\n* ------------------------------------------------------------------- *\n*        EXIT                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ED    MSG16CT,OLDCT         EDIT OLD FILE RECORD COUNT\n         MVC   PLINE(MSG16L),MSG16   COPY MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         ED    MSG17CT,NEWCT         EDIT NEW FILE RECORD COUNT\n         MVC   PLINE(MSG17L),MSG17   COPY MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         ED    MSG18CT,PURGEUCT      EDIT UNCOMPLETE-STATE PURGES\n         MVC   PLINE(MSG18L),MSG18   COPY MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         ED    MSG19CT,PURGECCT      EDIT COMPLETED-STATE PURGES\n         MVC   PLINE(MSG19L),MSG19   COPY MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         CLOSE FXIN\n         CLOSE FXPRINT\n         TM    PROCFLAG,$ERROR       ERRORS?\n         BO    EXIT0010              YES\n         CLOSE NEWSEQ                CLOSE OUTPUT FILE\n         TM    PROCFLAG,$COPY        COPYING?\n         BO    EXIT0010              YES\n         CLOSE OLDSEQ                CLOSE\nEXIT0010 DS    0H\n         BAL   R15,AM31              RETURN TO 31-BIT MODE\n         FXCALL FXSMSTR,CLOSE        CLOSE MASTER FILE\n         ITRACE ID=EXIT\n         L     R0,TRSIZE             TRACE TABLE SIZE\n         L     R1,TRADDR             TRACE TABLE ADDRESS\n         FREEMAIN RU,A=(1),LV=(0)    FREEMAIN TRACE TABLE\n         DELETE EP=FXPCOMM           DELETE COMMON\n         DELETE EP=FXSMSTR           DELETE MASTER FILE I/O MODULE\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDWORD    DC    D'0'\nSAVEAREA DS    18F\nX80      DC    X'80000000'\nX1708    DC    X'1708'\nCURRDAY  DC    F'0'                   CURRENT DAY SINCE JAN 1, 1900\nCURRDISP DC    F'0'                   CURRENT RECORD DISPLACEMENT\nRETPDC   DC    H'0'\nRETPDU   DC    H'0'\nH365     DC    H'365'\nRECCNT   DC    PL3'0'\nP0       DC    P'0'\nP1       DC    P'1'\nMAXLINE  DC    P'&MAXL'\nOLDCT    DC    PL5'0'\nNEWCT    DC    PL5'0'\nPURGEUCT DC    PL5'0'\nPURGECCT DC    PL5'0'\nLINECT   DC    PL2'0'\nPAGECT   DC    PL2'0'\nPROCFLAG DC    X'00'                  MAIN PROCESSING FLAGS\n$ERROR   EQU   X'80'                  .. ERROR(S) IN CONTROL STATEMENTS\n$RETPDC  EQU   X'40'                  .. RETPDC VALUE GIVEN\n$RETPDU  EQU   X'20'                  .. RETPDU VALUE GIVEN\n$COPY    EQU   X'10'                  .. FILE COPY REQUESTED\nHEXZERO  DC    8X'00'\nBLANKS   DC    CL44' '\nHEXCHAR  DC    C'0123456789ABCDEF'\nNBRIN    DC    CL3'000'\nRETCSTMT DC    C'RETPDC='\nRETUSTMT DC    C'RETPDU='\nCOPYSTMT DC    C'COPY '\nHEADING  DS    0C\n         DC    C'1'\n         DC    CL51' '\n         DC    C'FX MASTER FILE PURGE'\n         DC    CL52' '\n         DC    C'PAGE'\nHEADPAGE DC    CL4' '\nHEADINGL EQU   *-HEADING\nMSG01    DS    0C\n         DC    C' '\n         DC    C'FXPURGE01I   '\n         DC    C'CONTROL STATEMENT: '\nMSG01TXT DS    (CTLSTMTL)C\nMSG01L   EQU   *-MSG01\nMSG02    DC    C' FXPURGE02E * INVALID STATEMENT'\nMSG02L   EQU   *-MSG02\nMSG03    DC    C' FXPURGE03E * DUPLICATE COPY STATEMENT'\nMSG03L   EQU   *-MSG03\nMSG04    DC    C' FXPURGE04E * DUPLICATE RETPDC STATEMENT'\nMSG04L   EQU   *-MSG04\nMSG05    DC    C' FXPURGE05E * DUPLICATE RETPDU STATEMENT'\nMSG05L   EQU   *-MSG05\nMSG06    DC    C' FXPURGE06E * INVALID DIGIT IN RETPD VALUE'\nMSG06L   EQU   *-MSG06\nMSG07    DC    C' FXPURGE07E * TOO MANY DIGITS IN RETPD VALUE'\nMSG07L   EQU   *-MSG07\nMSG08    DC    C' FXPURGE08E * RETENTION PERIOD MAY NOT BE ZERO DAYS'\nMSG08L   EQU   *-MSG08\nMSG09    DC    C' FXPURGE09E * BOTH RETPDC AND RETPDU ARE REQUIRED'\nMSG09L   EQU   *-MSG09\nMSG10    DC    C' FXPURGE10E * COPY IS NOT ALLOWED WITH RETPDC OR RETPU+\n               '\nMSG10L   EQU   *-MSG10\nMSG11    DS    0C\n         DC    C' '\n         DC    C'FXPURGE11I   REQUEST '\nMSG11NDE DC    CL8' '\nMSG11NBR DC    CL8' '\n         DC    C' PURGED'\nMSG11L   EQU   *-MSG11\nMSG13    DS    0C\n         DC    C'-'\n         DC    C'FXPURGE13E * DYNAMIC ALLOCATION ERROR, R15='\nMSG13R15 DC    CL4' '\n         DC    C' ERROR='\nMSG13ERR DC    CL4' '\n         DC    C' INFO='\nMSG13INF DC    CL4' '\n         DC    C' '\nMSG13L   EQU   *-MSG13\nMSG16    DS    0C\n         DC    C'0'\n         DC    C'FXPURGE16I   RECORDS COPIED FROM OLDSEQ         '\nMSG16CT  DC    X'402020206B2020206B202120'\nMSG16L   EQU   *-MSG16\nMSG17    DS    0C\n         DC    C'0'\n         DC    C'FXPURGE17I   RECORDS WRITTEN TO NEWSEQ          '\nMSG17CT  DC    X'402020206B2020206B202120'\nMSG17L   EQU   *-MSG17\nMSG18    DS    0C\n         DC    C'0'\n         DC    C'FXPURGE18I   RECORDS PURGED IN IN-COMPLETE STATE'\nMSG18CT  DC    X'402020206B2020206B202120'\nMSG18L   EQU   *-MSG18\nMSG19    DS    0C\n         DC    C'0'\n         DC    C'FXPURGE19I   RECORDS PURGED IN COMPLETED STATE  '\nMSG19CT  DC    X'402020206B2020206B202120'\nMSG19L   EQU   *-MSG19\n         SPACE 1\n         DC    C' '\nPLINE    DC    CL133' '\nPLINEL   EQU   *-PLINE\n         SPACE 1\nCTLSTMT  DS    CL80\nCTLSTMTL EQU   *-CTLSTMT\n         SPACE 1\nDYNRBA   DC    A(DYNRB+X'80000000')\nDYNRB    DC    (S99RBEND-S99RB)X'00'\nDYNPARM  DC    A(DDNAMEP)\n         DC    A(DSNAMEP)\n         DC    A(DISPIP)\n         DC    A(DISPNP+X'80000000')\nDDNAMEP  DC    AL2(DALDDNAM)         DDNAME PARMS\n         DC    AL2(1)\n         DC    AL2(8)\n         DC    CL8'SCRDD'            DDNAME\nDSNAMEP  DC    AL2(DALDSNAM)         DATASET NAME PARMS\n         DC    AL2(1)\n         DC    AL2(44)\nDSNAME   DC    CL44' '               DATASET NAME\nDISPIP   DC    AL2(DALSTATS)         INITIAL DISPOSITION PARMS\n         DC    AL2(1)\n         DC    AL2(1)\n         DC    X'01'                 INITIAL DISPOSITION (OLD)\nDISPNP   DC    AL2(DALNDISP)         NORMAL DISPOSITION PARMS\n         DC    AL2(1)\n         DC    AL2(1)\n         DC    X'04'                 NORMAL DISPOSITION  (DELETE)\n         SPACE 1\nFXIN     DCB   DDNAME=FXIN,              CONTROL STATEMENT FILE        +\n               DSORG=PS,                 .. SEQUENTIAL FILE            +\n               RECFM=FB,                 .. FIXED BLOCK RECORDS        +\n               LRECL=CTLSTMTL,           .. RECORD SIZE                +\n               EODAD=PROC0000,           .. END OF DATA                +\n               MACRF=GM                  .. GET/MOVE MODE\nFXPRINT DCB    DDNAME=FXPRINT,           PRINT FILE                    +\n               DSORG=PS,                 .. SEQUENTIAL FILE            +\n               RECFM=FBA,                .. FIXED BLOCK RECORDS        +\n               LRECL=PLINEL,             .. RECORD SIZE                +\n               MACRF=PM                  .. PUT/MOVE MODE\nOLDSEQ   DCB   DDNAME=OLDSEQ,            PREVIOUS OUTPUT FILE          +\n               DSORG=PS,                 .. SEQUENTIAL FILE            +\n               RECFM=FB,                 .. FIXED BLOCK RECORDS        +\n               EODAD=PROC0050,           .. END OF DATA                +\n               MACRF=GM                  .. GET/MOVE MODE\nNEWSEQ   DCB   DDNAME=NEWSEQ,            OUTPUT FILE                   +\n               DSORG=PS,                 .. SEQUENTIAL FILE            +\n               RECFM=FB,                 .. FIXED BLOCK RECORDS        +\n               LRECL=REQBLOKL,           .. RECORD SIZE                +\n               BLKSIZE=REQBLOKL*20,      .. RECORD SIZE                +\n               MACRF=PM                  .. PUT/MOVE MODE\n         LTORG\n         MSTRREQ DSECT=NO\n         ORG     MSTRRECD\n         REQBLOK DSECT=NO\n* ------------------------------------------------------------------- *\n*              Common data map                                        *\n* ------------------------------------------------------------------- *\n         FXPCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         IEFZB4D0\n         IEFZB4D2\n         END  FXPURGE\n./ ADD NAME=FXSATTN  0100-99056-99056-1500-00366-00366-00000-FX-REL1\n\n         TITLE 'VTAM ATTN EXIT'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSATTN                                               *\n*                                                                     *\n*  VTAM ATTN exit.                                                    *\n*                                                                     *\n*   Register usage:                                                   *\n*                                                                     *\n*      R3   CONVREQ/SESSREQ block address                             *\n*      R4   FMH5 address                                              *\n*      R5   Return address                                            *\n*      R6   CONVBLOK address                                          *\n*      R7   SESSBLOK address                                          *\n*      R8   RPL extension address                                     *\n*      R9   RPL address                                               *\n*      R10  Parameter list passed by VTAM (EXITPARM DSECT)            *\n*      R11  FXSCOMM address                                           *\n*      R12  Program base                                              *\n*                                                                     *\n*  -----------------------------------------------------------------  *\n*                                                                     *\n*  For session establishment (FMH5 calls)                             *\n*    A) For an FX-to-FX link                                          *\n*         1) The SESSBLOK for the FX STC that is allocating the       *\n*            conversation should already be on the SESSBLOK chain,    *\n*            if not the conversation is rejected.                     *\n*         2) If the SESSBLOK for the partner FX is found, a CONVBLOK  *\n*            is added to the chain.                                   *\n*         3) A message is printed to log the conversation.            *\n*    B) For a user                                                    *\n*         1) The user's LU name must not also be defined as an FXNODE.*\n*         2) A SESSBLOK is added to the SESSBLOK chain.               *\n*         3) A CONVBLOK is chained from the new SESSBLOK.             *\n*         4) A message is printed to log the conversation.            *\n*                                                                     *\n*  For session termination (LOSS calls)                               *\n*    The \"error pending\" flag is set in the SESSBLOK.  The CONVBLOK   *\n*    (and for user sessions the SESSBLOK) is deleted by FXSLOSS.      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXSATTN  CSECT\nFXSATTN  AMODE 31\nFXSATTN  RMODE ANY\n         LR    R12,R15               LOAD BASE\n         USING FXSATTN,R12           DEFINE BASE\n         LR    R10,R1                COPY PARAMETER LIST ADDRESS\n         USING EXITPARM,R10          DEFINE BASE\n         LR    R5,R14                SAVE RETURN ADDRESS\n         B     ATTN0010              SKIP ADDRESS AND EYECATCHER\n         DC    ((PFXMODNM-MODPRFX)-(*-FXSATTN))X'00'\n         DC    CL8'FXSATTN'          MODULE NAME\n         DC    C'&SYSDATE'           DATE OF ASSEMBLY\n         DC    C'&SYSTIME'           TIME OF ASSEMBLY\nATTN0010 DS    0H\n         GETMAIN RU,LV=72,LOC=BELOW  ACQUIRE A SAVE AREA\n         LR    R13,R1                SAVE AREA ADDRESS\n         L     R1,EXITACB            ACB'S ADDRESS\n         USING IFGACB,R1             DEFINE BASE\n         L     R11,ACBUSER           COMMON DATA ADDRESS\n         USING FXSCOMM,R11           DEFINE BASE\n         L     R9,EXITRPL            RPL'S ADDRESS\n         USING IFGRPL,R9             DEFINE BASE\n         L     R8,RPLAAREA           RPL EXTENSTION'S ADDRESS\n         USING ISTRPL6X,R8           DEFINE BASE\n         ITRACE ID=ENTRY,                                              +\n               DATA1=EXITTYPE,       .. REASON FOR CALL                +\n               DATA2=RPL6LU          .. LU INVOLVED\n         ICM   R7,15,COMMSESS        FIRST SESSION BLOCK\n         USING SESSBLOK,R7           DEFINE BASE\n         BZ    ATTN0030              UNKNOWN LU\nATTN0020 DS    0H\n         CLC   RPL6LU,SESSNAME       SESSION BLOCK LOCATED?\n         BE    ATTN0030              YES\n         ICM   R7,15,SESSNEXT        NEXT SESSION BLOCK\n         BNZ   ATTN0020              LOOP\nATTN0030 DS    0H\n         CLC   EXITTYPE,CNOSTYPE     CNOS CALL?\n         BE    CNOS0000              YES\n         CLC   EXITTYPE,FMH5TYPE     FMH5 CALL?\n         BE    FMH50000              YES\n         CLC   EXITTYPE,LOSSTYPE     LOSS CALL?\n         BE    LOSS0000              YES\n         B     EXIT0000              OTHERWISE EXIT\n* ------------------------------------------------------------------- *\n*             CNOS                                                    *\n* ------------------------------------------------------------------- *\nCNOS0000 DS    0H\n         ITRACE ID=CNOS,             CNOS                              +\n               DATA1=SESSNAME,       .. LU NAME                        +\n               RDATA2=R7             .. SESSION BLOCK'S ADDRESS\n         B     EXIT0000              EXIT\n* ------------------------------------------------------------------- *\n*             FMH5                                                    *\n* ------------------------------------------------------------------- *\nFMH50000 DS    0H\n         ITRACE ID=FMH5,             FMH5 RECEIVED                     +\n               DATA1=RPL6LU          .. LU'S NAME\n         GETMAIN RU,                 ACQUIRE STORAGE FOR AN RPL        +\n               LV=RPLL,              .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R9,R1                 COPY RPL ADDRESS\n         MVC   0(RPLL,R9),RPLI       INITIALIZE RPL\n         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL EXTENSION +\n               LV=RPLEXTL,           .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R8,R1                 COPY ADDRESS\n         MVC   0(RPLEXTL,R8),RPLEXTI INITIALIZE RPL EXTENSION\n         ST    R8,RPLAAREA           SET EXTENSION ADDRESS IN THE RPL\n         MVC   RPLDACB,EXITACB       SET ACB ADDRESS\n         GETMAIN RU,                 ACQUIRE STORAGE FOR FMH5          +\n               LV=FMH5L,             .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R4,R1                 COPY FMH5 STORAGE ADDRESS\n         USING FMH5,R4               DEFINE BASE\n         ITRACE ID=RECVFMH5\n         APPCCMD CONTROL=RCVFMH5,    RECEIVE THE FMH5                  +\n               RPL=(R9),             .. RPL ADDRESS                    +\n               CONMODE=CS,           .. CONTINUE SPECIFIC              +\n               AREA=(R4),            .. FMH5 STORAGE ADDRESS           +\n               AREALEN=FMH5L,        .. FMH5 STORAGE SIZE              +\n               OPTCD=SYN             .. FORCE IT TO BE SYNCHRONOUS\n         OC    RPL6RC,RPL6RC         SUCCESSFUL?\n         BNZ   FMH50050              NO\n         LTR   R7,R7                 KNOWN SESSION?\n         BZ    FMH50010              NO\n         CLC   USER,FMH5TRAN         USER SESSION?\n         BE    FMH50060              YES.. BAD NEWS\n         ITRACE ID=NEWFX             NEW FX-TO-FX SESSION\n         MVI   SESSSTAT,$SESSRDY     SESSION STATUS IS 'READY'\n         GETMAIN RU,LV=CONVREQL      ACQUIRE STORAGE FOR REQUEST BLOCK\n         LR    R3,R1                 COPY STORAGE ADDRESS\n         USING CONVREQ,R3            DEFINE BASE\n         FXCALL FXSCONV,ADD,,(R7)    ADD A CONVERSATION BLOCK\n         L     R6,CONVADDR           RETURNED CONVERSATION BLOCK'S ADDR\n         USING CONVBLOK,R6           DEFINE BASE\n         MVI   CONVTYPE,$CONVTS      SECONDARY END OF FX CONVERSATION\n         MVI   CONVSTAT,$CONVRDY     CONVERSATION STATUS IS 'READY'\n         FREEMAIN RU,A=(R3),LV=CONVREQL   FREEMAIN PARM BLOCK\n         B     FMH50020              FREE STORAGE AND EXIT\nFMH50010 DS    0H\n         CLC   USER,FMH5TRAN         USER TRANSACTION?\n         BNE   FMH50070              NO.. BAD NEWS\n         ITRACE ID=NEWUSER           NEW USER SESSION\n         GETMAIN RU,LV=SESSREQL      ACQUIRE STORAGE FOR REQUEST BLOCK\n         LR    R3,R1                 COPY STORAGE ADDRESS\n         USING SESSREQ,R3            DEFINE BASE\n         ITRACE ID=ADDSESS           ADDING A SESSION BLOCK\n         FXCALL FXSSESS,ADD,RPL6LU   ADD A SESSION BLOCK\n         LTR   R15,R15               ADD SUCCESSFUL?\n         BNZ   ERR0010               NO.. INTERNAL ERROR\n         L     R7,SESSADDR           NEW SESSION BLOCK'S ADDRESS\n         MVI   SESSTYPE,$SESSUSR     INDICATE USER SESSION\n         FREEMAIN RU,A=(3),LV=SESSREQL\n         GETMAIN RU,LV=CONVREQL      ACQUIRE STORAGE FOR REQUEST BLOCK\n         LR    R3,R1                 COPY STORAGE ADDRESS\n         USING CONVREQ,R3            DEFINE BASE\n         FXCALL FXSCONV,ADD,,(R7)    ADD A CONVERSATION BLOCK\n         L     R6,CONVADDR           RETURNED CONVERSATION BLOCK'S ADDR\n         FREEMAIN RU,A=(R3),LV=CONVREQL   FREEMAIN PARM BLOCK\n         USING CONVBLOK,R6           DEFINE BASE\n         MVI   CONVTYPE,$CONVTU      USER SESSION\n         MVI   CONVSTAT,$CONVRDY     CONVERSATION STATUS IS 'READY'\nFMH50020 DS    0H\n         ITRACE ID=CID,              TRACE CONVERSATION ID'S           +\n               DATA1=RPL6CNVD        .. SAVE CONVERSATION ID\n         MVC   CONVCID,RPL6CNVD      SAVE CONVERSATION ID\n         MVI   SESSSTAT,$SESSRDY     SESSION STATUS IS 'READY'\n         NI    SESSSTAT,255-$SESSERR\n         FREEMAIN RU,A=(R4),LV=FMH5L FREE FMH5 STORAGE\n         FREEMAIN RU,A=(R8),LV=RPLEXTL\n         FREEMAIN RU,A=(R9),LV=RPLL\n         GETMAIN RU,                 ACQUIRE STORAGE FOR PRTBLOK       +\n               LV=PRTBLOKL           .. ACQUIRE STORAGE FOR PRINT BLOCK\n         USING PRTBLOK,R1            DEFINE BASE\n         MVI   PRTCC,C' '            INITIALIZE CARRIAGE CONTROL\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         MVC   PRTMSGID(MSG01L),MSG01 SET MESSAGE\n         MVC   PRTMSGID+(MSG01NDE-MSG01)(L'MSG01NDE),SESSNAME\n         CLI   SESSTYPE,$SESSFX      FX-TO-FX SESSION?\n         BE    FMH50030              YES\n         MVC   PRTMSGID+(MSG01TYP-MSG01)(L'MSG01TYP),USER\n         B     FMH50040\nFMH50030 DS    0H\n         MVC   PRTMSGID+(MSG01TYP-MSG01)(L'MSG01TYP),FX\nFMH50040 DS    0H\n         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE\n         FREEMAIN RU,A=(1),LV=PRTBLOKL\n         POST  COMMVECB              THERE IS WORK TO DO\n         B     EXIT0000              EXIT\nFMH50050 DS    0H\n         ITRACE ID=RCVFMH5F\n         LR    R2,R15                COPY RETURN CODE\n         ABEND $U0026,DUMP,,USER     ABEND\nFMH50060 DS    0H\n         ITRACE ID=BADFXTR           BAD TRANSACTION NAME FROM FX\n         ABEND $U0027,DUMP,,USER     ABEND\nFMH50070 DS    0H\n         ITRACE ID=BADSESS           SESSION REQUEST FROM UNKNOWN USER\n         APPCCMD CONTROL=REJECT,     ISSUE APPC COMMAND                +\n               QUALIFY=SESSION,      .. REJECT THE SESSION             +\n               DEACTYP=HEX0F,        .. DEACTIVATE TYPE (CLEAN-UP)     +\n               RPL=(R9),             .. RPL ADDRESS                    +\n               OPTCD=SYN             .. FORCE IT TO BE SYNCHRONOUS\n         OC    RPL6RC,RPL6RC         SUCCESSFUL?\n         BNZ   FMH50080              NO\n         FREEMAIN RU,A=(R4),LV=FMH5L FREE FMH5 STORAGE\n         FREEMAIN RU,A=(R8),LV=RPLEXTL\n         FREEMAIN RU,A=(R9),LV=RPLL\n         L     R9,EXITRPL            RPL PASSED BY VTAM\n         L     R8,RPLAAREA           RPL PASSED BY VTAM\n         GETMAIN RU,                 ACQUIRE STORAGE FOR PRTBLOK       +\n               LV=PRTBLOKL           .. ACQUIRE STORAGE FOR PRINT BLOCK\n         USING PRTBLOK,R1            DEFINE BASE\n         MVI   PRTCC,C' '            INITIALIZE CARRIAGE CONTROL\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         MVC   PRTMSGID(MSG02L),MSG02 SET MESSAGE\n         MVC   PRTMSGID+(MSG02NDE-MSG02)(L'MSG02NDE),RPL6LU\n         FXCALL PRTQ,PRINT           ADD PRINT REQUEST TO QUEUE\n         FREEMAIN RU,A=(1),LV=PRTBLOKL\n         B     EXIT0000              EXIT\nFMH50080 DS    0H\n         ITRACE ID=DACTFAIL,         SESSION REJECT FAILED             +\n               DATA1=RPL6RC          .. RETURN CODE FROM RPL EXTENSION\n         ABEND $U0028,DUMP,,USER     ABEND\n* ------------------------------------------------------------------- *\n*             LOSS                                                    *\n* ------------------------------------------------------------------- *\nLOSS0000 DS    0H\n         ITRACE ID=LOSS,             LOSS OF SESSION                   +\n               DATA1=SESSNAME        .. LU NAME\n         GETMAIN RU,                 ACQUIRE STORAGE FOR PRTBLOK       +\n               LV=PRTBLOKL           .. ACQUIRE STORAGE FOR PRINT BLOCK\n         USING PRTBLOK,R1            DEFINE BASE\n         MVI   PRTCC,C' '            INITIALIZE CARRIAGE CONTROL\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         MVC   PRTMSGID(MSG03L),MSG03 SET MESSAGE\n         MVC   PRTMSGID+(MSG03NDE-MSG03)(L'MSG03NDE),RPL6LU\n         LTR   R7,R7                 UNKNOWN LU?\n         BE    LOSS0020              YES\n         CLI   SESSTYPE,$SESSUSR     USER SESSION?\n         BE    LOSS0010              YES\n         MVC   PRTMSGID+(MSG03TYP-MSG03)(L'MSG03TYP),FX\n         B     LOSS0030\nLOSS0010 DS    0H\n         MVC   PRTMSGID+(MSG03TYP-MSG03)(L'MSG03TYP),USER\n         B     LOSS0030\nLOSS0020 DS    0H\n         MVC   PRTMSGID+(MSG03TYP-MSG03)(L'MSG03TYP),UNKN\nLOSS0030 DS    0H\n         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE\n         FREEMAIN RU,A=(1),LV=PRTBLOKL\n         LTR   R7,R7                 FOR A KNOWN LU?\n         BZ    LOSS0050              NO\nLOSS0040 DS    0H\n         ITRACE ID=ERRPND            ERROR PENDING FOR THIS SESSION\n         MVI   SESSSTAT,$SESSERR+$SESSPND   STATUS IS 'ERROR-PENDING'\n         B     EXIT0000              AND EXIT\nLOSS0050 DS    0H\n         ITRACE ID=UNKNLOSS          UNKNOWN SESSION LOST\n         B     EXIT0000              AND EXIT\n* ------------------------------------------------------------------- *\n*        SERIOUS ERRORS                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ABEND $U0055,DUMP,,USER     ADD SESSBLOK FAILED\nERR0020  DS    0H\n         ABEND $U0056,DUMP,,USER     DELETE SESSBLOK FAILED\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT              EXITING\n         FREEMAIN RU,A=(13),LV=72    FREEMAIN REGISTER SAVE AREA\n         BR    R5                    RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        CONSTANTS                                                   *\n*                                                                    *\n* ------------------------------------------------------------------ *\nHEX0F    DC    X'0F'\nCNOSTYPE DC    CL4'CNOS'             CHANGE NUMBER OF SESSIONS\nFMH5TYPE DC    CL4'FMH5'             FMH5\nLOSSTYPE DC    CL4'LOSS'             LOSS OF SESSION\nUSER     DC    CL4'USER'\nFX       DC    CL4'FX '\nUNKN     DC    CL4'UNKN'\nSESSID   DC    CL8'SESSBLOK'\nRPLI     RPL   AM=VTAM\nRPLL     EQU   *-RPLI\nRPLEXTI  ISTRPL6\nRPLEXTL  EQU   *-RPLEXTI\nMSG01    DS    0C\n         DC    CL11'FXSATTN01I'\n         DC    C'SESSION WITH '\nMSG01TYP DC    CL4' '\n         DC    C' NODE '\nMSG01NDE DC    CL8' '\n         DC    C' ESTABLISHED'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'FXSATTN02E'\n         DC    C'SESSION REJECTED, LU NAME '\nMSG02NDE DC    CL8' '\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'FXSATTN03I'\n         DC    C'SESSION LOST TO '\nMSG03TYP DC    CL4' '\n         DC    C' NODE '\nMSG03NDE DC    CL8' '\nMSG03L   EQU   *-MSG03\n* ------------------------------------------------------------------ *\n*              COMMON DATA MAP                                       *\n* ------------------------------------------------------------------ *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------ *\n*              SESSION BLOCK ADD/DELETE REQUEST BLOCK                *\n* ------------------------------------------------------------------ *\n         SESSREQ  DSECT=YES\n* ------------------------------------------------------------------ *\n*              VTAM SESSION BLOCK                                    *\n* ------------------------------------------------------------------ *\n         SESSBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              CONVERSATION BLOCK ADD/DELETE REQUEST BLOCK           *\n* ------------------------------------------------------------------ *\n         CONVREQ  DSECT=YES\n* ------------------------------------------------------------------ *\n*              VTAM CONVERSATION BLOCK                               *\n* ------------------------------------------------------------------ *\n         CONVBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              PRINT INTERFACE BLOCK                                 *\n* ------------------------------------------------------------------ *\n         PRTBLOK  DSECT=YES\n* ------------------------------------------------------------------ *\n*              FMH5                                                  *\n* ------------------------------------------------------------------ *\n         FMH5     DSECT=YES\n* ------------------------------------------------------------------ *\n*              PARAMETER LIST                                        *\n* ------------------------------------------------------------------ *\nEXITPARM DSECT\nEXITACB  DS   A                      ACB ADDRESS\n         DS   A                      RESERVED\n         DS   A                      RESERVED\nEXITTYPE DS   CL4                    TYPE OF CALL\nEXITRPL  DS   A                      RPL ADDRESS\n         DS   A                      RESERVED\n* ------------------------------------------------------------------ *\n*              ACB DSECT                                             *\n* ------------------------------------------------------------------ *\n         IFGACB AM=VTAM\n* ------------------------------------------------------------------ *\n*              RPL AND RPL EXTENSION DSECTS                          *\n* ------------------------------------------------------------------ *\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------ *\n*              EQUATES                                               *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         ABCODES\n         END  FXSATTN\n./ ADD NAME=FXSCOMM  0100-99056-99056-1500-00012-00012-00000-FX-REL1\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Name: FXSCOMM                                                      *\n*                                                                     *\n*  Started task common data and trace table manager                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  OPTIONS\n         FXSCOMM TYPE=CSECT\n         COPY  REGEQU\n         END   FXSCOMM\n./ ADD NAME=FXSCONS  0100-99056-99056-1500-00462-00462-00000-FX-REL1\n\n         TITLE 'CONSOLE COMMUNICATION'\n         COPY  OPTIONS\n         MACRO\n         CMD   &TEXT,&ADDR\n         LCLA  &LEN\n         AIF   (T'&TEXT EQ 'O').ERR0010\n         AIF   (T'&ADDR EQ 'O').ERR0020\n&LEN     SETA  K'&TEXT\n         DC    AL1(&LEN)\n         DC    AL4(&ADDR)\n         DC    C'&TEXT'\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'COMMAND TEXT IS REQUIRED'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'COMMAND PROCESSOR ADDRESS IS REQUIRED'\n         MEND\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSCONS                                               *\n*                                                                     *\n*  This module allows some commands to be entered via an MVS console. *\n*  Mostly this would be to allow an operator (or an automation        *\n*  product) to issue commands to shutdown FX.                         *\n*                                                                     *\n*    Commands allowed are                                             *\n*      \"F xxx,ACTIVE\" Displays the active FX-to-FX and FX-to-USER     *\n*                     activity.                                       *\n*      \"F xxx,SNAP\"   Snap shots the FX STC control blocks and trace  *\n*                     table.                                          *\n*      \"P xxx\"        Stops the FX STC.                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSCONS    FXPRFX 'CONSOLE COMMUNICATION'\nFXSCONS  AMODE 31\nFXSCONS  RMODE ANY\n         USING FXSCONS,R12           DEFINE BASE REGISTER\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    CONS0100              YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         GETMAIN RU,                 ACQUIRE STORAGE FOR EXTRACT       +\n               LV=EXTRACTL+4,        .. LENGTH                         +\n               LOC=BELOW             .. 24-BIT AREA\n         LR    R2,R1                 SAVE THE ADDRESS\n         LA    R3,EXTRACTL(R2)       RETURNED DATA ADDRESS\n         MVC   0(EXTRACTL,R2),EXTRACTI\n         EXTRACT (R3),               EXTRACT THE COMM LIST ADDRESS     +\n               FIELDS=COMM,          .. RETURN COMLIST ADDRESS         +\n               MF=(E,(R2))           .. EXECUTE FORM, LIST FORM ADDRESS\n         L     R9,0(R3)              COMM LIST ADDRESS\n         FREEMAIN RU,A=(2),LV=EXTRACTL+4   FREE THE EXTRACT WORK AREA\n         ITRACE ID=COMLIST,          TRACE COMLIST ADDRESS             +\n               RDATA1=R9\n         ST    R9,DXDCOMM            SAVE COMLIST ADDRESS\n         USING COMLIST,R9            DEFINE COMLIST BASE\n         MVC   COMMCECB,COMECBPT     PASS COMM ECB BACK TO MAINLINE\nCONS0010 DS    0H\n         ICM   R8,15,COMCIBPT        FIRST CIB\n         BZ    CONS0040              NO CIB'S\n         USING CIB,R8                DEFINE CIB BASE\nCONS0020 DS    0H\n         ITRACE ID=INITCIB,          TRACE EACH CIB                    +\n               RDATA1=R8,            .. CIB ADDRESS                    +\n               DATA2=CIBVERB         .. VERB FROM CIB\n         CLI   CIBVERB,CIBSTART      START COMMAND?\n         BE    CONS0030              YES\n         MVC   DXDCID+3(1),CIBCONID  COPY CONSOLE ID\n         MVC   DXDWTO(WTO01L),WTO01  COPY WTO\n         WTO   MF=(E,DXDWTO),        ISSUE WTO                         +\n               CONSID=DXDCID         .. BACK TO SAME CONSOLE\nCONS0030 DS    0H\n         L     R2,CIBNEXT            NEXT CIB\n         QEDIT ORIGIN=COMCIBPT,      FREE THIS CIB                     +\n               BLOCK=(R8)\n         LTR   R15,R15               QEDIT SUCCESSFUL?\n         BNZ   ERR0010               NO\n         LTR   R8,R2                 NEXT CIB'S ADDRESS\n         BNZ   CONS0020              LOOP\nCONS0040 DS    0H\n         ITRACE ID=SETCTR            SETTING CIB LIMIT\n         QEDIT ORIGIN=COMCIBPT,      SET CIB LIMIT                     +\n               CIBCTR=2              .. ALLOW 2 CIBS\n         LTR   R15,R15               SUCCESSFUL?\n         BNZ   ERR0020               NO\n         B     EXIT0000              AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCONS0100 DS    0H\n         ITRACE ID=PROCLIST          PROCESSING CIB LIST\n         L     R9,DXDCOMM            COMM LIST ADDRESS\n         ICM   R8,15,COMCIBPT        FIRST CIB ADDRESS\n         BZ    EXIT0000              STRANGE..\nCONS0110 DS    0H\n         ITRACE ID=PROCCIB,          TRACE EACH CIB                    +\n               RDATA1=R8,            .. CIB ADDRESS                    +\n               DATA2=CIBVERB         .. VERB FROM CIB\n         MVC   DXDCID+3(1),CIBCONID  SET CONSOLE ID\n         CLI   CIBVERB,CIBSTOP       STOP COMMAND?\n         BE    CONS0700              YES\n         CLI   CIBVERB,CIBMODFY      MODIFY?\n         BE    CONS0130              YES\n         MVC   DXDWTO(WTO02L),WTO02  COPY WTO\n         WTO   MF=(E,DXDWTO),        ISSUE WTO                         +\n               CONSID=DXDCID         .. TO SAME CONSOLE\nCONS0120 DS    0H\n         L     R2,CIBNEXT            NEXT CIB ADDRESS\n         QEDIT ORIGIN=COMCIBPT,      FREE THIS CIB                     +\n               BLOCK=(R8)\n         LTR   R15,R15               SUCCESSFUL?\n         BNZ   ERR0010               NO\n         LTR   R8,R2                 NEXT CIB ADDRESS\n         BNZ   CONS0110              PROCESS IT\n         B     EXIT0000              EXIT AT END OF CHAIN\nCONS0130 DS    0H\n         SR    R7,R7                 CLEAR REGISTER\n         ICM   R7,3,CIBDATLN         LENGTH OF DATA\n         LA    R6,CMDTBLE            OUR LIST OF COMMANDS\n         USING CMDDSECT,R6           DEFINE BASE\n         SR    R1,R1                 CLEAR REGISTER\nCONS0140 DS    0H\n         CLI   0(R6),X'FF'           END OF TABLE?\n         BE    CONS0160              YES\n         IC    R1,CMDTXTL            TEXT LENGTH\n         CLR   R7,R1                 LENGTH CORRECT?\n         BNE   CONS0150              NO\n         BCTR  R1,0                  MINUS 1 FOR EXECUTE\n         EX    R1,CMDCLC             COMMAND FOUND?\n         BE    CONS0170              YES\n         LA    R1,1(R1)              RESTORE LENGTH\nCONS0150 DS    0H\n         LA    R6,CMDL(R6,R1)        NEXT COMMAND\n         B     CONS0140              LOOP\nCMDCLC   CLC   CMDTXT,CIBDATA        COMMAND LOCATED?\nCONS0160 DS    0H\n         MVC   DXDWTO(WTO03L),WTO03  COPY WTO\n         WTO   MF=(E,DXDWTO),        ISSUE WTO                         +\n               CONSID=DXDCID         .. TO SAME CONSOLE\n         B     CONS0120              RELEASE THIS CIB\nCONS0170 DS    0H\n         ICM   R15,15,CMDADDR        COMMAND PROCESSOR ADDRESS\n         BR    R15                   PROCESS THE COMMAND\n* ------------------------------------------------------------------- *\n*   Display the active work                                           *\n*                                                                     *\n*   Data displayed is the status of the SESSBLOKs and the CONVBLOKs   *\n* ------------------------------------------------------------------- *\nCONS0300 DS    0H\n         ITRACE ID=ACTIVE\n         ICM   R7,15,COMMSESS        FIRST SESSION BLOCK\n         USING SESSBLOK,R7           DEFINE SESSBLOK BASE\n         BZ    CONS0510              NO SESSION BLOCKS\nCONS0310 DS    0H\n         MVC   DXDWTO(WTO07L),WTO07  COPY WTO\n         LA    R1,DXDWTO             WTO ADDRESS\n         USING WPL,R1                DEFINE WTO PARM LIST BASE\n         MVC   WPLTXT(MSG01L),MSG01  COPY MESSAGE TO WTO\n         MVC   WPLTXT+(MSG01LU-MSG01)(L'MSG01TYP),SESSNAME\n         CLI   SESSTYPE,$SESSFX      FX-TO-FX SESSION?\n         BE    CONS0320              YES\n         MVC   WPLTXT+(MSG01TYP-MSG01)(L'MSG01TYP),USER\n         MVC   WPLTXT+(MSG01SMF-MSG01)(L'MSG01SMF),SESSSMF\n         MVC   WPLTXT+(MSG01USR-MSG01)(L'MSG01USR),SESSUSER\n         MVC   WPLTXT+(MSG01JOB-MSG01)(L'MSG01JOB),SESSJOB\n         B     CONS0330\nCONS0320 DS    0H\n         MVC   WPLTXT+(MSG01TYP-MSG01)(L'MSG01TYP),FX\n         MVC   WPLTXT+(MSG01USR-MSG01)(L'MSG01USR),NA\n         MVC   WPLTXT+(MSG01JOB-MSG01)(L'MSG01JOB),NA\nCONS0330 DS    0H\n         TM    SESSSTAT,$SESSRDY     SESSION READY?\n         BO    CONS0340              YES\n         TM    SESSSTAT,$SESSCS      CNOS SENT?\n         BO    CONS0350              YES\n         TM    SESSSTAT,$SESSINQ     INQUIRE SENT?\n         BO    CONS0360              YES\n         MVC   WPLTXT+(MSG01ST-MSG01)(L'MSG01ST),INITIAL\n         B     CONS0370\nCONS0340 DS    0H\n         MVC   WPLTXT+(MSG01ST-MSG01)(L'MSG01ST),READY\n         B     CONS0370\nCONS0350 DS    0H\n         MVC   WPLTXT+(MSG01ST-MSG01)(L'MSG01ST),CNOS\n         B     CONS0370\nCONS0360 DS    0H\n         MVC   WPLTXT+(MSG01ST-MSG01)(L'MSG01ST),INQUIRE\nCONS0370 DS    0H\n         TM    SESSSTAT,$SESSPND     FUNCTION PENDING?\n         BNO   CONS0380              NO\n         MVC   WPLTXT+(MSG01PND-MSG01)(L'MSG01PND),PENDING\nCONS0380 DS    0H\n         WTO   MF=(E,DXDWTO),        ISSUE THE WTO                     +\n               CONSID=DXDCID         .. TO THE SAME CONSOLE\n         ICM   R6,15,SESSCONV        FIRST CONVERSATION\n         USING CONVBLOK,R6           DEFINE CONVBLOK BASE\n         BZ    CONS0500              NO CONVERSATIONS\nCONS0390 DS    0H\n         MVC   DXDWTO(WTO07L),WTO07  INITIALIZE WTO CONSTANTS\n         LA    R1,DXDWTO             WTO CONSTANTS\n         MVC   WPLTXT(MSG02L),MSG02  INITIALIZE MESSAGE\n         UNPK  WPLTXT+(MSG02CID-MSG02)(9),CONVCID(5)\n         MVZ   WPLTXT+(MSG02CID-MSG02)(9),HEXZERO\n         TR    WPLTXT+(MSG02CID-MSG02)(9),HEXCHAR\n         MVI   WPLTXT+(MSG02CID-MSG02)+8,C' '\n         CLI   CONVTYPE,$CONVTP      PRIMARY END?\n         BE    CONS0400              YES\n         CLI   CONVTYPE,$CONVTS      SECONDARY END?\n         BE    CONS0410              YES\n         MVC   WPLTXT+(MSG02TYP-MSG02)(L'MSG02TYP),USER\n         B     CONS0420\nCONS0400 DS    0H\n         MVC   WPLTXT+(MSG02TYP-MSG02)(L'MSG02TYP),PRIMARY\n         B     CONS0420\nCONS0410 DS    0H\n         MVC   WPLTXT+(MSG02TYP-MSG02)(L'MSG02TYP),SECNDARY\n         B     CONS0420\nCONS0420 DS    0H\n         CLI   CONVSTAT,$CONVRDY     CONVERSATION READY?\n         BE    CONS0430              YES\n         CLI   CONVSTAT,$CONVALO     ALLOC SENT OR RECEIVED?\n         BE    CONS0425              YES\n         MVC   WPLTXT+(MSG02ST-MSG02)(L'MSG02ST),INITIAL\n         B     CONS0490\nCONS0425 DS    0H\n         MVC   WPLTXT+(MSG02ST-MSG02)(L'MSG02ST),ALLOC\n         B     CONS0480\nCONS0430 DS    0H\n         MVC   WPLTXT+(MSG02ST-MSG02)(L'MSG02ST),READY\n         CLI   CONVFUNC,$CONVFB      BSAM FUNCTION?\n         BE    CONS0440              YES\n         CLI   CONVFUNC,$CONVFC      VTAM SEND CONFIRMED?\n         BE    CONS0450              YES\n         CLI   CONVFUNC,$CONVFD      DEALLOCATE WITH CONFIRM?\n         BE    CONS0460              YES\n         CLI   CONVFUNC,$CONVFR      VTAM RECEIVE?\n         BE    CONS0470              YES\n         CLI   CONVFUNC,$CONVFR      VTAM SEND?\n         BNE   CONS0480              NO\n         MVC   WPLTXT+(MSG02FNC-MSG02)(L'MSG02FNC),SEND\n         B     CONS0480\nCONS0440 DS    0H\n         MVC   WPLTXT+(MSG02FNC-MSG02)(L'MSG02FNC),BSAM\n         B     CONS0480\nCONS0450 DS    0H\n         MVC   WPLTXT+(MSG02FNC-MSG02)(L'MSG02FNC),CONFIRM\n         B     CONS0480\nCONS0460 DS    0H\n         MVC   WPLTXT+(MSG02FNC-MSG02)(L'MSG02FNC),DEALLOC\n         B     CONS0480\nCONS0470 DS    0H\n         MVC   WPLTXT+(MSG02FNC-MSG02)(L'MSG02FNC),RECEIVE\nCONS0480 DS    0H\n         TM    CONVSTAT,$CONVPND     PENDING?\n         BNO   CONS0490              NO\n         MVC   WPLTXT+(MSG02PND-MSG02)(L'MSG02PND),PENDING\nCONS0490 DS    0H\n         WTO   MF=(E,DXDWTO),        ISSUE THE WTO                     +\n               CONSID=DXDCID         .. TO THE SAME CONSOLE\n         ICM   R6,15,CONVNEXT        NEXT CONVERSATION\n         BNZ   CONS0390\nCONS0500 DS    0H\n         ICM   R7,15,SESSNEXT        NEXT SESSION BLOCK\n         BNZ   CONS0310\nCONS0510 DS    0H\n         B     CONS0120              RELEASE THIS CIB\n* ------------------------------------------------------------------- *\n*   Snap shot the STC control blocks                                  *\n* ------------------------------------------------------------------- *\nCONS0600 DS    0H\n         ITRACE ID=SNAP\n         SR    R7,R7                 NO SESSBLOK TO FXSSNAP\n         LOAD  EP=FXSSNAP            LOAD SNAP SHOT MODULE\n         LR    R15,R0                COPY FXSSNAP ENTRY PONT\n         BALR  R14,R15               LINK TO FXSSNAP\n         DELETE EP=FXSSNAP           DELETE SNAP SHOT MODULE\n         MVC   DXDWTO(WTO04L),WTO04  COPY WTO\n         WTO   MF=(E,DXDWTO),        ISSUE WTO                         +\n               CONSID=DXDCID         .. TO SAME CONSOLE\n         B     CONS0120              FREE THIS CIB\n* ------------------------------------------------------------------- *\n*   Shutdown the STC                                                  *\n* ------------------------------------------------------------------- *\nCONS0700 DS    0H\n         ITRACE ID=STOP\n         TM    COMMEOJ,$EOJ1         EOJ ALREADY IN PROGRESS?\n         BO    CONS0710              YES\n         OI    COMMEOJ,$EOJ1         SET EOJ FLAG\n         MVC   DXDWTO(WTO05L),WTO05  COPY WTO\n         WTO   MF=(E,DXDWTO),        ISSUE WTO                         +\n               CONSID=DXDCID         .. TO SAME CONSOLE\n         B     CONS0120              RELEASE THIS CIB\nCONS0710 DS    0H\n         MVC   DXDWTO(WTO06L),WTO06  COPY WTO\n         WTO   MF=(E,DXDWTO),        ISSUE WTO                         +\n               CONSID=DXDCID         .. TO SAME CONSOLE\n         B     CONS0120              RELEASE THIS CIB\n* ------------------------------------------------------------------- *\n*        Error routines                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=CIBDELF,          QEDIT (DELETE CIB) FAILED         +\n               RDATA1=R15            .. RETURN CODE\n         ABEND $U0108,DUMP,,USER\nERR0020  DS    0H\n         ITRACE ID=CIBCTRF,          QEDIT (SET CIB LIMIT) FAILED      +\n               RDATA1=R15            .. RETURN CODE\n         ABEND $U0109,DUMP,,USER\n* ------------------------------------------------------------------- *\n*        Exit                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            CALLER'S SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE CALLER'S REGISTERS\n         SR    R15,R15               ALWAYS A GOOD RETURN CODE\n         BR    R14                   RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDSCONS)           DISPLACEMENT TO WORK AREA\nEXTRACTI EXTRACT *,                  EXTRACT LIST FORM                 +\n               FIELDS=COMM,          .. COMLIST ADDRESS PLEASE         +\n               MF=L\nEXTRACTL EQU   *-EXTRACTI\nWTO01    WTO   'FXCONS01E * COMMAND NOT PROCESSED, FX INITIALIZATION NO+\n               T COMPLETE',                                            +\n               CONSID=,                                                +\n               MF=L\nWTO01L   EQU   *-WTO01\nWTO02    WTO   'FXCONS02E * INVALID CIB VERB, CIB IGNORED',            +\n               CONSID=,                                                +\n               MF=L\nWTO02L   EQU   *-WTO02\nWTO03    WTO   'FXCONS03E * INVALID COMMAND',                          +\n               CONSID=,                                                +\n               MF=L\nWTO03L   EQU   *-WTO03\nWTO04    WTO   'FXCONS06I   SNAP SHOT COMPLETE',                       +\n               CONSID=,                                                +\n               MF=L\nWTO04L   EQU   *-WTO04\nWTO05    WTO   'FXCONS07I   FX SHUTDOWN STARTING',                     +\n               CONSID=,                                                +\n               MF=L\nWTO05L   EQU   *-WTO05\nWTO06    WTO   'FXCONS07E   SHUTDOWN ALREADY IN PROGRESS',             +\n               CONSID=,                                                +\n               MF=L\nWTO06L   EQU   *-WTO06\nWTO07    WTO   '                                                       +\n                                                                     ',+\n               CONSID=,                                                +\n               MF=L\nWTO07L   EQU   *-WTO07\nMSG01    DS    0C\n         DC    C'FXSCONS08I  SESSION WITH LU '\nMSG01LU  DC    CL8' '\n         DC    C' TYPE='\nMSG01TYP DC    CL8' '\n         DC    C' SMFID/USERID/JOB='\nMSG01SMF DC    CL4' '\n         DC    C'/'\nMSG01USR DC    CL8' '\n         DC    C'/'\nMSG01JOB DC    CL8'**NONE**'\n         DC    C' STATUS='\nMSG01ST  DC    CL8' '\n         DC    C' '\nMSG01PND DC    CL8' '\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    C'FXSCONS09I  CID='\nMSG02CID DC    CL8' '\n         DC    C' TYPE='\nMSG02TYP DC    CL8' '\n         DC    C' STATUS='\nMSG02ST  DC    CL8' '\n         DC    C' LAST FUNCTION='\nMSG02FNC DC    CL8' '\n         DC    C' '\nMSG02PND DC    CL8' '\nMSG02L   EQU   *-MSG02\nALLOC    DC    CL8'ALLOCATE'\nBSAM     DC    CL8'BSAM'\nCNOS     DC    CL8'CNOS'\nCONFIRM  DC    CL8'CONFIRM'\nDEALLOC  DC    CL8'DEALLOC'\nFX       DC    CL8'FX-TO-FX'\nHEXZERO  DC    XL8'0000000000000000'\nHEXCHAR  DC    C'0123456789ABCDEF'\nINITIAL  DC    CL8'INITIAL'\nINQUIRE  DC    CL8'INQUIRE'\nNA       DC    CL8'** NA **'\nPENDING  DC    CL8'PENDING'\nPRIMARY  DC    CL8'PRIMARY'\nREADY    DC    CL8'READY'\nRECEIVE  DC    CL8'RECEIVE'\nSECNDARY DC    CL8'SECNDARY'\nSEND     DC    CL8'SEND'\nUSER     DC    CL8'USER'\n* ------------------------------------------------------------------- *\n*              COMMANDS TABLE                                         *\n* ------------------------------------------------------------------- *\nCMDTBLE  DS    0C\n         CMD   ACTIVE,CONS0300       DISPLAY ACTIVE PROCESSES\n         CMD   SHUT,CONS0700         SHUT (SHUTDOWN THE STC)\n         CMD   SNAP,CONS0600         SNAP SHOT\n         CMD   STOP,CONS0700         STOP (SHUTDOWN THE STC)\n         DC    X'FF'\n* ------------------------------------------------------------------- *\n*              WORK AREA                                              *\n* ------------------------------------------------------------------- *\nDXDSCONS DSECT\nDXDID    DS   CL8                    WORK AREA OWNER EYECATCHER\nDXDSAVE  DS   18F                    REGISTER SAVE AREA\nDXDCOMM  DS   F                      ADDRESS OF COMM LIST\nDXDCID   DS   F                      CONSOLE ID\nDXDWTO   DS   0F,CL200\n* ------------------------------------------------------------------- *\n*              COMMAND TABLE MAP                                      *\n* ------------------------------------------------------------------- *\nCMDDSECT DSECT\nCMDTXTL  DS   X                      COMMAND TEXT LENGTH\nCMDADDR  DS   AL4                    COMMAND PROCESSOR ENTRY POINT\nCMDL     EQU  *-CMDDSECT\nCMDTXT   DS   C                      COMMAND TEXT\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              VTAM SESSION BLOCK                                     *\n* ------------------------------------------------------------------- *\n         SESSBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              VTAM CONVERSATION BLOCK                                *\n* ------------------------------------------------------------------- *\n         CONVBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              COMM LIST                                              *\n* ------------------------------------------------------------------- *\n         IEZCOM\n* ------------------------------------------------------------------- *\n*              COMMAND INPUT BUFFER                                   *\n* ------------------------------------------------------------------- *\nCIB      DSECT\n         IEZCIB\n* ------------------------------------------------------------------- *\n*              WTO PARM LIST                                          *\n* ------------------------------------------------------------------- *\n         IEZWPL DSECT=YES\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  FXSCONS\n./ ADD NAME=FXSCONV  0100-99056-99056-1500-00190-00190-00000-FX-REL1\n\n         TITLE 'CONV  ADD AND DELETE CONVERSATION BLOCKS'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSCONV                                               *\n*                                                                     *\n*  PURPOSE: Add and delete CONVBLOKs.  Other FX STC nodes and users   *\n*           are represented by SESSBLOKs.  Conversations with the     *\n*           other FX nodes and users are represented by a CONVBLOK    *\n*           chained from the SESSBLOK.  This code runs as a           *\n*           subroutine, it does not follow \"normal\" FX linkage,       *\n*           it must not use a \"DXD\" type work area because it may     *\n*           be executed concurrently by multiple tasks.  This module  *\n*           does not establish its own save area, no macros can be    *\n*           issued that may require a save area, including ITRACE.    *\n*                                                                     *\n*                                                                     *\n*     Register usage:                                                 *\n*       R1  Work register                                             *\n*       R2  Work register                                             *\n*       R3  RPL address                                               *\n*       R6  CONVBLOK address                                          *\n*       R7  SESSBLOK address                                          *\n*       R10 Parameters passed by caller (CONVREQ DSECT)               *\n*       R11 FXSCOMM address                                           *\n*       R12 Program base                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXSCONV  CSECT\nFXSCONV  AMODE 31\nFXSCONV  RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               LOAD BASE\n         USING FXSCONV,R12           DEFINE BASE\n         USING FXSCOMM,R11           DEFINE BASE\n         B     CONV0000              SKIP EYECATCHER\n         DC    CL8'FXSCONV'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\n         DC    C'ADD/DELETE CONVERSATION BLOCKS'\nCONV0000 DS    0H\n         LR    R10,R1                COPY PARM BLOCK ADDRESS\n         USING CONVREQ,R10           DEFINE BASE\n         L     R7,CONVSESS           SESSION BLOCK'S ADDRESS\n         USING SESSBLOK,R7           DEFINE BASE\n         CLI   CONVCMD,$CONVDEL      DELETE A CONVERSATION?\n         BE    CONV0100              YES\n*---------------------------------------------------------------------*\n*                                                                     *\n*        INITIALIZE A NEW CONVBLOK                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         LA    R2,SESSCONV           CONVERSATION BLOCK ANCHOR POINT\n         ICM   R6,15,SESSCONV        FIRST CONVERSATION BLOCK'S ADDRESS\n         USING CONVBLOK,R6           DEFINE BASE\n         BZ    CONV0020              NO CONVERSATIONS\nCONV0010 DS    0H\n         LA    R2,CONVNEXT           CHAIN POINT\n         ICM   R7,15,CONVNEXT        NEXT CONVERSATION BLOCK'S ADDRESS\n         BNZ   CONV0010              LOOP\nCONV0020 DS    0H\n         GETMAIN RU,LV=CONVL         ACQUIRE STORAGE FOR CONVBLOK\n         ST    R1,0(R2)              ADD NEW BLOCK TO CHAIN\n         ST    R1,CONVADDR           PASS ADDRESS BACK TO CALLER\n         LR    R6,R1                 COPY STORAGE ADDRESS\n         XC    0(CONVL,R6),0(R6)     CLEAR STORAGE\n         MVC   CONVEYE,CONVID        IDENTIFY THE BLOCK\n         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL           +\n               LV=RPLL+4,            .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,CONVRPL            SET RPL'S ADDRESS\n         MVC   0(RPLL,R1),RPLI       INITIALIZE RPL\n         LR    R3,R1                 COPY RPL ADDRESS\n         USING IFGRPL,R3             DEFINE BASE\n         MVC   RPLDACB,COMMACB       SET ACB ADDRESS IN RPL\n         ST    R6,RPLL(R1)           SET POINTER BACK TO CONVBLOK\n         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL EXTENSION +\n               LV=RPLEXTL,           .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,CONVRPLX           SET RPL EXTENSION'S ADDRESS\n         MVC   0(RPLEXTL,R1),RPLEXTI INITIALIZE RPL EXTENSION\n         ST    R1,RPLAAREA           SET RPL EXTENSION ADDRESS\n         USING ISTRPL6X,R1           DEFINE BASE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR DCB           +\n               LV=DCBL,              .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,CONVDCB            SET DCB'S ADDRESS\n         XC    0(DCBL,R1),0(R1)      CLEAR THE STORAGE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR DECB          +\n               LV=DECBL,             .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,CONVDECB           SET DECB'S ADDRESS\n         MVC   0(DECBL,R1),DECBI     INITIALIZE DECB\n         GETMAIN RU,                 ACQUIRE STORAGE FOR I/O AREA      +\n               LV=COMMIOSZ,          .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,CONVIOA            SET I/O AREA'S ADDRESS\n         B     EXIT0000              AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        DELETE A CONVBLOK                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\nCONV0100 DS    0H\n         LA    R2,SESSCONV           CHAIN POINT\n         ICM   R6,15,SESSCONV        FIRST CONVERSATION BLOCK'S ADDRESS\n         BZ    CONV0120              BLOCK WAS NOT FOUND\nCONV0110 DS    0H\n         CLM   R6,15,CONVADDR        CONVERSATION BLOCK LOCATED?\n         BE    CONV0130              YES\n         LA    R2,CONVNEXT           CHAIN POINT\n         ICM   R6,15,CONVNEXT        NEXT CONVERSATION BLOCK\n         BNZ   CONV0110              LOOP\nCONV0120 DS    0H\n         ABEND $U0065,DUMP,,USER     CRASH AND BURN\nCONV0130 DS    0H\n         MVC   0(4,R2),CONVNEXT      CHAIN AROUND THIS BLOCK\n         L     R1,CONVIOA            I/O AREA ADDRESS\n         FREEMAIN RU,A=(1),LV=COMMIOSZ\n         L     R1,CONVDECB           DECB'S ADDRESS\n         FREEMAIN RU,A=(1),LV=DECBL  FREEMAIN DECB\n         L     R1,CONVDCB            DCB'S ADDRESS\n         FREEMAIN RU,A=(1),LV=DCBL   FREEMAIN DCB\n         L     R1,CONVRPLX           RPL EXTENSION'S ADDRESS\n         FREEMAIN RU,A=(1),LV=RPLEXTL\n         L     R1,CONVRPL            RPL'S ADDRESS\n         FREEMAIN RU,A=(1),LV=RPLL+4 FREEMAIN RPL\n         FREEMAIN RU,A=(6),LV=CONVL  FREEMAIN CONVERSATION BLOCK\nEXIT0000 DS    0H\n         L     R14,12(R13)           RESTORE R14\n         LM    R0,R12,20(R13)        RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCONVID   DC    C'CONVBLOK'\nRPLI     RPL   AM=VTAM,                                                +\n               AAREA=RPLEXTI\nRPLL     EQU   *-RPLI\nRPLEXTI  ISTRPL6\nRPLEXTL  EQU   *-RPLEXTI\nDUMMYDCB DCB   DSORG=PS,                                               +\n               DDNAME=DUMMY,                                           +\n               EODAD=*,                                                +\n               MACRF=R\nDCBL     EQU   *-DUMMYDCB\nDECBI    READ  BSAMECB,                                                +\n               SF,                                                     +\n               *,                                                      +\n               *,                                                      +\n               'S',                                                    +\n               MF=L\nDECBL    EQU   *-DECBI\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              CONVERSATION BLOCK ADD/DELETE REQUEST BLOCK            *\n* ------------------------------------------------------------------- *\n         CONVREQ\n* ------------------------------------------------------------------- *\n*              VTAM SESSION BLOCK                                     *\n* ------------------------------------------------------------------- *\n         SESSBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              VTAM CONVERSATION BLOCK                                *\n* ------------------------------------------------------------------- *\n         CONVBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              ACB DSECT                                              *\n* ------------------------------------------------------------------- *\n         IFGACB   AM=VTAM\n* ------------------------------------------------------------------- *\n*              EXIT LIST DSECT                                        *\n* ------------------------------------------------------------------- *\n         IFGEXLST AM=VTAM\n* ------------------------------------------------------------------- *\n*              RPL AND RPL EXTENSION DSECTS                           *\n* ------------------------------------------------------------------- *\n         IFGRPL   AM=VTAM\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  FXSCONV\n./ ADD NAME=FXSCOPY  0100-99056-99056-1500-00520-00520-00000-FX-REL1\n\n         TITLE 'FXSCOPY   IEBCOPY DUMP/RESTORE SUBTASK'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSCOPY                                               *\n*                                                                     *\n*   Drive the IEBCOPY DUMPs and RESTOREs.                             *\n*   IEBCOPY functions are done in a subtask to allow over-lap with    *\n*   other functions (like transmitting or receiving of data).         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXSCOPY  CSECT\nFXSCOPY  AMODE 31\nFXSCOPY  RMODE 24\n         USING FXSCOPY,R12           DEFINE BASE\n         USING DRREQ,R9              DEFINE BASE\n         USING FXSCOMM,R11           DEFINE BASE\n         STM   R14,R12,12(R13)       CHAIN REGISTERS\n         LR    R12,R15               COPY ENTRY POINT ADDRESS\n         L     R11,0(R1)             LOAD FXSCOMM'S ADDRESS\n         GETMAIN R,LV=WORKL          ACQUIRE STORAGE FOR WORK AREA\n         B     COPY0000\n         DC    ((PFXMODNM-MODPRFX)-(*-FXSCOPY))X'00'\n         DC    CL8'FXSCOPY'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nCOPY0000 DS    0H\n         USING WORKAREA,R1           DEFINE BASE\n         XC    WORKAREA+000(256),WORKAREA\n         XC    WORKAREA+256(WORKL-256),WORKAREA+256\n         ST    R13,4(R1)             CHAIN PREVIOUS SAVE AREA TO OURS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO PREVIOUS\n         LR    R13,R1                COPY WORK AREA ADDRESS\n         DROP  R1\n         USING WORKAREA,R13          DEFINE BASE\n         ST    R12,ACOPY             SET OUR ENTRY POINT IN COMMON\n         MVC   WKCDCB(CDCBL),CDCBI   INITIALIZE CTL STMT DCB\n         MVC   WKPDCB(PDCBL),PDCBI   INITIALIZE PDS DIRECTORY DCB\n         MVC   WKCCW1,CCW1           INITIALIZE SEARCH CCW\n         MVC   WKCCW2,CCW2           INITIALIZE TIC CCW\n         LA    R1,WKCCW1             SEARCH CCW ADDRESS\n         STCM  R1,7,WKCCW2+1         RE-LOCATE TIC ADDRESS\n         MVC   WKCCW3,CCW3           INITIALIZE READ CCW\n         MVI   CARDAREA,C' '         INITIALIZE\n         MVC   CARDAREA+1(L'CARDAREA-1),CARDAREA\n         LOAD  EP=IEBCOPY            LOAD IEBCOPY INITIAL MODULE\n         ST    R0,WKCOPYEP           SAVE ENTRY POINT ADDRESS\n         ITRACE ID=ENTRY\n         B     COPY0020              ENTER MAIN LOGIC\nCOPY0010 DS    0H\n         ITRACE ID=WORKWAIT          WAITING FOR WORK\n         TM    COPYWORK,X'40'        ECB POSTED?\n         BO    COPY0020              YES.. SKIP WAITING\n         LA    R1,COPYWORK           WORK TO DO ECB\n         WAIT  1,ECB=(1)             WAIT FOR WORK TO DO ECB\n         ITRACE ID=WOKEUP            TIME TO RISE AND SHINE\n         XC    COPYWORK,COPYWORK     RESET ECB\nCOPY0020 DS    0H\n         TM    COMMEOJ,$EOJ1         SHUTDOWN PHASE 1?\n         BO    EXIT0000              YES.. IT'S MILLER TIME\n         ICM   R9,15,COPYREQ         REQUEST BLOCK'S ADDRESS\n         BZ    COPY0010              FALSE ALARM.. GO WAIT\n         CLI   DRSTAT,0              PROCESSING STARTED OR COMPLETED?\n         BNE   COPY0010              YES.. GO WAIT\n         ITRACE ID=PROCESS,RDATA1=R9\n         OI    DRSTAT,$DRSTRT        PROCESSING STARTED\n         CLC   COMMAPLN,REQTNODE     ARE WE SENDING END?\n         BE    DUMP0000              YES\n         B     RSTR0000              WE'RE RECEIVING END\nCOPY0030 DS    0H\n         OI    DRSTAT,$DRDONE        PROCESSING COMPLETED\n         LA    R1,COPYECB            WE'RE DONE ECB\n         POST  (1),(R15)             POST THE ECB\n         B     COPY0010              WAIT FOR MORE WORK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        DUMP MEMBER                                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDUMP0000 DS    0H\n         ITRACE ID=DUMP\n         MVI   REQSTAT,$REQDUMP      STATUS IS 'DUMP IN PROGRESS'\n         LA    R2,WKCDCB             DCB IN WORK AREA\n         USING IHADCB,R2             DEFINE BASE\n         MVC   DCBDDNAM,DRINDD       SET DDNAME ASSIGNED\n         MVC   WKOC(OPENOL),OPENOI   INITIALIZE OPEN\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         OPEN  ((R2),OUTPUT),        OPEN DATASET FOR OUTPUT           +\n               MF=(E,WKOC)           .. EXECUTE FORM, LIST FORM ADDRESS\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         MVC   CARDAREA(COPY1L),COPY1\n         MVC   CARDAREA+(COPY1IN-COPY1)(L'COPY1IN),DRPDS\n         MVC   CARDAREA+(COPY1OUT-COPY1)(L'COPY1OUT),DRSTAGE\n         BAL   R8,PUNCH000           IEBCOPY CONTROL STATEMENT\nDUMP0010 DS    0H\n         LA    R3,WKPDCB             PDS DIRECTORY DCB\n         USING IHADCB,R3             DEFINE BASE\n         MVC   DCBDDNAM,DRPDS        SET DDNAME\n         MVC   WKOC(OPENIL),OPENII   INITIALIZE OPEN\n         ITRACE ID=OPENDIR\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         OPEN  ((R3),INPUT),         OPEN THE PDS DIRECTORY            +\n               MF=(E,WKOC)           .. EXECUTE FORM, LIST FORM ADDRESS\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         SR    R0,R0                 CLEAR REGISTER\n         ICM   R0,3,WKCCW3+6         I/O AREA SIZE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR I/O AREA      +\n               LV=(0),               .. MAJOR DUTY SIZE I/O AREA       +\n               LOC=BELOW             .. 24-BIT AREA\n         STCM  R1,7,WKCCW3+1         SET I/O AREA ADDRESS\n         GETMAIN RU,                 ACQUIRE STORAGE FOR IOB           +\n               LV=IOBLEN,            .. IOB LENGTH                     +\n               LOC=BELOW             .. 24-BIT AREA\n         LR    R4,R1                 SAVE IOB'S ADDRESS\n         USING IOB,R4                DEFINE BASE\n         LA    R1,IOBCC              CYLINDER NUMBER'S ADDRESS\n         STCM  R1,7,WKCCW1+1         RE-LOCATE CYLINDER ADDRESS\n         ST    R4,DCBIOBAD           SET IOB ADDRESS IN DCB\n         XC    0(IOBLEN,R4),0(R4)    CLEAR IOB\n         MVI   IOBFLAG1,X'02'        SET FLAG BYTE 1\n         ST    R3,IOBDCBPT           SET DCB ADDRESS IN IOB\n         LA    R1,WKECB              I/O ECB ADDRESS\n         STCM  R1,7,IOBECBPB         SET ECB ADDRESS IN IOB\n         LA    R1,WKCCW1             SRCH CCW'S ADDRESS\n         ST    R1,IOBSTART           SET CCW ADDRESS IN IOB\n         SR    R5,R5                 CLEAR REGISTER\n         ICM   R5,7,DCBDEBAD+1       DEB ADDRESS\n         SH    R5,=Y(DEBBASIC-DEB)   MINUS PREFIX LENGTH\n         USING DEB,R5                DEFINE BASE\n         OI    WKFLAG,$LOCATE        STARTING MEMBER LOCATE\n         NI    WKFLAG,255-$FOUND     MEMBER NOT FOUND YET\n         MVC   WKUCBA+1(3),DEBSUCBB  COPY UCB ADDRESS\n         MVC   WKDEVT(DEVTL),DEVTI   INITIALIZE DEVT LIST FORM\n         DEVTYPE ,(WKDEVTA,24),      REQUEST DEVICE INFO               +\n               UCBLIST=(WKUCBA,1),   .. UCB ADDRESS LIST/ # IN LIST    +\n               MF=(E,WKDEVT)         .. EXECUTE FORM, LIST FORM ADDRESS\n         LTR   R15,R15               DEVTYPE SUCCESSFUL?\n         BNZ   ERR0020               NO\n         ITRACE ID=DEVTOK,                                             +\n               DATA1=WKDEVT0,        .. WORDS 0 AND 1                  +\n               DATA2=WKDEVT2         .. WORDS 2 AND 3\nDUMP0020 DS    0H\n         LA    R1,DEBBASND           DASD EXTENSION OF THE DEB\n         USING DEBDASD,R1            DEFINE BASE\n         MVC   IOBCC,DEBSTRCC        SET STARTING CYLINDER\n         MVC   IOBHH,DEBSTRHH        SET STARTING HEAD\n         MVI   IOBR,0                ALWAYS READ FULL TRACKS\nDUMP0030 DS    0H\n         ITRACE ID=EXCP,                                               +\n               DATA1=IOBCC           .. I/O ADDRESS\n         XC    WKECB,WKECB           CLEAR THE ECB\n         EXCP  IOBSTDRD              READ A TRACK\n         WAIT  ECB=WKECB             WAIT FOR I/O COMPLETION\n         CLI   WKECB,X'44'           RETRY THE I/O?\n         BE    DUMP0020              YES\n         CLI   WKECB,X'7F'           SUCCESSFUL?\n         BNE   ERR0010               NO\n         SR    R1,R1                 CLEAR REGISTER\n         SR    R7,R7                 CLEAR REGISTER\n         ICM   R7,3,WKCCW3+6         TOTAL LENGTH\n         ICM   R1,3,IOBSTDRD+14      RESIDUAL LENGTH\n         SR    R7,R1                 LENGTH READ\n         ITRACE ID=DIRLEN,                                             +\n               RDATA1=R7\n         SR    R6,R6                 CLEAR REGISTER\n         ICM   R6,7,WKCCW3+1         I/O AREA ADDRESS\nDUMP0040 DS    0H\n         ITRACE ID=NEWBLOCK,                                           +\n               RDATA1=R6,            .. DATA ADDRESS                   +\n               RDATA2=R7             .. LENGTH REMAINING\n         STM   R6,R7,WKCURAL         SAVE CURRENT ADDRESS AND LENGTH\n         USING COUNT,R6              DEFINE BASE\n         SR    R1,R1                 CLEAR REGISTER\n         IC    R1,COUNTKL            KEY LENGTH\n         LA    R6,COUNTL(R1,R6)      DATA ADDRESS\n         LH    R7,0(R6)              LENGTH OF DATA IN RECORD\n         SH    R7,H2                 MINUS LENGTH OF LENGTH\n         LA    R6,2(R6)              SKIP LENGTH\n         USING DIRDSECT,R6           DEFINE BASE\nDUMP0050 DS    0H\n         ITRACE ID=DIRENTRY,                                           +\n               RDATA1=R6,            .. DATA ADDRESS                   +\n               DATA2=0(R6)           .. DATA\n         CLC   DIRNAME,X'FF'         END OF DIRECTORY?\n         BE    DUMP0100              YES\n         TM    WKFLAG,$LOCATE        LOCATING REQUESTED MEMBER?\n         BO    DUMP0060              YES\n         CLC   DIRTTR,WKTTR          SAME TTR?\n         BE    DUMP0070              YES\n         B     DUMP0080\nDUMP0060 DS    0H\n         CLC   DIRNAME,REQOMEM       MEMBER LOCATED?\n         BNE   DUMP0080              NO\n         ITRACE ID=MEMFOUND,                                           +\n               DATA1=DIRTTR\n         MVC   WKTTR,DIRTTR          SAVE TTR OF REQUEST MEMBER\n         NI    WKFLAG,255-$LOCATE    TURN OFF LOCATE FLAG\n         OI    WKFLAG,$FOUND         MEMBER WAS FOUND\n         CLI   REQALIAS,C'Y'         TRANSMIT ALIASES?\n         BE    DUMP0020              RE-START DIRECTORY SCAN\n         MVC   CARDAREA(COPY2L),COPY2\n         MVC   CARDAREA+(COPY2MEM-COPY2)(L'COPY2MEM),REQOMEM\n         BAL   R8,PUNCH000           IEBCOPY CONTROL STATEMENT\n         B     DUMP0100              EXIT\nDUMP0070 DS    0H\n         MVC   CARDAREA(COPY2L),COPY2\n         MVC   CARDAREA+(COPY2MEM-COPY2)(L'COPY2MEM),DIRNAME\n         BAL   R8,PUNCH000           IEBCOPY CONTROL STATEMENT\nDUMP0080 DS    0H\n         NI    DIRC,X'1F'            CLEAR ALL FLAGS\n         SR    R1,R1                 CLEAR REGISTER\n         IC    R1,DIRC               NUMBER OF USER HALFWORDS\n         LA    R1,DIRUSER-DIRDSECT(R1,R1)\n         AR    R6,R1                 NEXT DIRECTORY ENTRY\n         SR    R7,R1                 MINUS LENGTH OF THIS ENTRY\n         BH    DUMP0050              LOOP\n         LM    R6,R7,WKCURAL         RESTORE CURRENT BUFFER DATA\n         USING COUNT,R6              DEFINE BASE\n         SR    R1,R1                 CLEAR REGISTER\n         IC    R1,COUNTKL            KEY LENGTH\n         AH    R1,COUNTDL            PLUS DATA LENGTH\n         LA    R1,8(R1)              PLUS COUNT LENGTH\n         AR    R6,R1                 NEXT BLOCK FROM DIRECTORY TRACK\n         SR    R7,R1                 MINUS LENGTH USED\n         BH    DUMP0040              LOOP\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,IOBHH            CURRENT HEAD NUMBER\n         LA    R1,1(R1)              PLUS 1\n         CLM   R1,3,WKDEVT2+2        TIME FOR NEXT CYLINDER?\n         BE    DUMP0090              YES\n         STCM  R1,3,IOBHH            SET NEW HEAD NUMBER\n         B     DUMP0030              READ NEXT TRACK\nDUMP0090 DS    0H\n         ICM   R1,3,IOBCC            CURRENT CYLINDER NUMBER\n         LA    R1,1(R1)              PLUS 1\n         STCM  R1,3,IOBCC            SET NEW CYLINDER NUMBER\n         XC    IOBHH,IOBHH           RESET HEAD NUMBER\n         B     DUMP0030              READ NEXT TRACK\nDUMP0100 DS    0H\n         MVC   WKOC(CLOSEL),CLOSEI   INITIALIZE PARM LIST\n         ITRACE ID=CLOSEDIR\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         CLOSE ((R3)),               CLOSE DIRECTORY DCB               +\n               MF=(E,WKOC)           .. EXECUTE FORM, LIST FORM ADDRESS\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,7,WKCCW3+1         I/O AREA ADDRESS\n         SR    R0,R0                 CLEAR REGISTER\n         ICM   R0,3,WKCCW3+6         I/O AREA SIZE\n         FREEMAIN RU,A=(1),LV=(0)    FREE I/O AREA\n         FREEMAIN RU,A=(R4),LV=IOBLEN\n         TM    WKFLAG,$FOUND         MEMBER EVER FOUND?\n         BO    DUMP0110              YES\n         OI    DRSTAT,$DRMEMX        MEMBER NOT FOUND\nDUMP0110 DS    0H\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         MVC   WKOC(CLOSEL),CLOSEI   INITIALIZE PARM LIST\n         CLOSE ((R2)),               CLOSE IEBCOPY INPUT FILE          +\n               MF=(E,WKOC)           .. EXECUTE FORM, LIST FORM ADDRESS\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         TM    DRSTAT,$DRMEMX        MEMBER NOT FOUND?\n         BO    COPY0030              NOT FOUND\n         LA    R1,COPYPARM           PARM TO PASS TO IEBCOPY\n         L     R15,WKCOPYEP          ENTRY POINT ADDRESS\n         BASSM R14,R15               LINK TO IEBCOPY\n         LR    R1,R15                SAVE RETURN CODE\n         BAL   R15,AM31              FORCE AMODE TO 31\n         ITRACE ID=DUMPDONE,RDATA1=R1\n         STCM  R1,3,DRR15            PASS BACK IEBCOPY RETURN CODE\n         B     COPY0030\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Copy member to output PDS                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nRSTR0000 DS    0H\n         ITRACE ID=RESTORE\n         LA    R2,WKCDCB             DCB IN WORK AREA\n         USING IHADCB,R2             DEFINE BASE\n         MVC   DCBDDNAM,DRINDD       SET DDNAME ASSIGNED\n         MVC   WKOC(OPENOL),OPENOI   INITIALIZE OPEN\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         OPEN  ((R2),OUTPUT),        OPEN DATASET FOR OUTPUT           +\n               MF=(E,WKOC)           .. EXECUTE FORM, LIST FORM ADDRESS\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         MVC   CARDAREA(COPY1L),COPY1\n         LA    R1,CARDAREA+(COPY1IN-COPY1)\n         CLI   REQREPL,C'Y'          REPLACE?\n         BNE   RSTR0010              NO\n         MVC   0(2,R1),=C'(('        INSERT OPEN PARENS\n         LA    R1,2(R1)              ACCOUNT FOR PARENS\nRSTR0010 DS    0H\n         MVC   0(8,R1),DRSTAGE       INSERT INPUT DDNAME\n         LA    R1,8(R1)              UPDATE OUTPUT ADDRESS\n         CLI   REQREPL,C'Y'          REPLACE?\n         BNE   RSTR0020              NO\n         MVC   0(2,R1),=C',R'        INSERT \"REPLACE\" INDICATOR\n         LA    R1,2(R1)\nRSTR0020 DS    0H\n         CLI   REQREPL,C'Y'          REPLACE?\n         BNE   RSTR0030              NO\n         MVC   0(2,R1),=C'))'        INSERT CLOSING PARENS\n         LA    R1,2(R1)              ACCOUNT FOR PARENS\nRSTR0030 DS    0H\n         MVC   0(7,R1),=C',OUTDD='   INSERT OUTPUT DD KEYWORD\n         MVC   7(8,R1),DRPDS         INSERT OUTPUT DD NAME\n         BAL   R8,PUNCH000           PUNCH IEBCOPY CONTROL STATEMENT\n         CLC   REQDMEM,BLANKS        NEW MEMBER NAME?\n         BE    RSTR0080              NO\n         MVC   CARDAREA(COPY2L),COPY2\n         LA    R1,CARDAREA+(COPY2MEM-COPY2)\n         MVC   0(2,R1),=C'(('        INSERT OPEN PARENTHESIS\n         LA    R1,2(R1)              UPDATE OUTPUT ADDRESS\n         MVC   0(L'REQOMEM,R1),REQOMEM\nRSTR0040 DS    0H\n         CLI   0(R1),C' '            BLANK?\n         BE    RSTR0050              YES\n         LA    R1,1(R1)              UPDATE OUTPUT ADDRESS\n         B     RSTR0040              LOOP\nRSTR0050 DS    0H\n         MVI   0(R1),C','            INSERT COMMA\n         LA    R1,1(R1)              UPDATE OUTPUT ADDRESS\n         MVC   0(L'REQDMEM,R1),REQDMEM\nRSTR0060 DS    0H\n         CLI   0(R1),C' '            BLANK?\n         BE    RSTR0070              YES\n         LA    R1,1(R1)              UPDATE OUTPUT ADDRESS\n         B     RSTR0060              LOOP\nRSTR0070 DS    0H\n         MVC   0(2,R1),=C'))'        INSERT CLOSING PARENTHESIS\n         BAL   R8,PUNCH000           PUNCH IEBCOPY CONTROL STATEMENT\nRSTR0080 DS    0H\n         MVC   WKOC(CLOSEL),CLOSEI   INITIALIZE PARM LIST\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         CLOSE ((R2)),               CLOSE IEBCOPY INPUT FILE          +\n               MF=(E,WKOC)           .. EXECUTE FORM, LIST FORM ADDRESS\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         ITRACE ID=DRRSTR\n         LA    R1,COPYPARM           PARM PASSED TO IEBCOPY\n         L     R15,WKCOPYEP          ENTRY POINT ADDRESS\n         BASSM R14,R15               LINK TO IEBCOPY\n         LR    R1,R15                SAVE RETURN CODE\n         BAL   R15,AM31              FORCE AMODE TO 31\n         ITRACE ID=RSTRDONE,RDATA1=R1\n         STCM  R1,3,DRR15            PASS BACK IEBCOPY RETURN CODE\n         B     COPY0030\n*---------------------------------------------------------------------*\n*        WRITE CONTROL STATEMENTS                                     *\n*---------------------------------------------------------------------*\nPUNCH000 DS    0H\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         PUT   (R2),CARDAREA         PUNCH IEBCOPY CONTROL STATEMENT\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         MVI   CARDAREA,C' '         RE-INITIALIZE\n         MVC   CARDAREA+1(L'CARDAREA-1),CARDAREA\n         BR    R8                    RETURN\n* ------------------------------------------------------------------- *\n*        ADDRESSING MODE SWITCHING                                    *\n* ------------------------------------------------------------------- *\nAM24     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         BSM   R0,R15                RETURN IN 24-BIT MODE\nAM31     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         O     R15,X80               SET HIGH BIT ON\n         BSM   R0,R15                RETURN IN 31-BIT MODE\n* ------------------------------------------------------------------- *\n*        Unrecoverable errors                                         *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=IOERROR,          I/O ERROR                         +\n               DATA1=WKECB,          .. ECB                            +\n               RDATA2=R4             .. IOB ADDRESS\n         ABEND $U0100,DUMP,,USER\nERR0020  DS    0H\n         ITRACE ID=DEVTFAIL,         DEVTYPE FAILED                    +\n               DATA1=WKUCBA,         .. UCB ADDRESS                    +\n               RDATA2=R15            .. DEVTYPE RETURN CODE\n         ABEND $U0101,DUMP,,USER\n* ------------------------------------------------------------------- *\n*        EXIT                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT              EXITING PRINT MODULE\n         DELETE EP=IEBCOPY           RELEASE IEBCOPY\n         LR    R1,R13                COPY WORK AREA ADDRESS\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         FREEMAIN R,A=(1),LV=WORKL   FREE WORK AREA\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCCW1     CCW   X'31',*,CCWCC,5       SEARCH CCW\nCCW2     CCW   X'08',CCW1,0,0        TIC CCW\nCCW3     CCW   X'5E',*,CCWSILI,65535 READ (COUNT, KEY, DATA/MULTIPLE)\nX80      DC    A(X'80000000')        31-BIT MODE\n* ------------------- PARMS FOR IEBCOPY ----------------------------- *\n         SPACE 1\nCOPYPARM DC    A(OPTLIST+X'80000000')\n         NOPR  0\nOPTLIST  DC    H'0'                  OPTIONS LIST\n         NOPR  0\nDDLIST   DC    H'0'                  DDNAME LIST\n         NOPR  0\nHDNGLIST DC    H'0'                  HEADING LIST\n         SPACE 1\nCDCBI    DCB   DSORG=PS,             IEBCOPY CONTROL STATEMENT DCB     +\n               DDNAME=SYSIN,                                           +\n               LRECL=80,                                               +\n               BLKSIZE=3120,                                           +\n               MACRF=PM\nCDCBL    EQU   *-CDCBI\nPDCBI    DCB   DSORG=PS,             IEBCOPY CONTROL STATEMENT DCB     +\n               DDNAME=PDSDIR,                                          +\n               DEVD=DA,                                                +\n               MACRF=EXCP\nPDCBL    EQU   *-PDCBI\nOPENII   OPEN  (*,INPUT),MF=L\nOPENIL   EQU   *-OPENII\nOPENOI   OPEN  (*,OUTPUT),MF=L\nOPENOL   EQU   *-OPENOI\nCLOSEI   CLOSE (*),MF=L\nCLOSEL   EQU   *-CLOSEI\nDEVTI    DEVTYPE ,(*,24),UCBLIST=(*,1),MF=L\nDEVTL    EQU   *-DEVTI\nH2       DC    H'2'\nCOPY1    DC    C' COPY INDD='\nCOPY1IN  DC    CL8' '\n         DC    C',OUTDD='\nCOPY1OUT DC    CL8' '\nCOPY1L   EQU   *-COPY1\nCOPY2    DC    C' S M='\nCOPY2MEM DC    CL8' '\nCOPY2L   EQU   *-COPY2\nBLANKS   DC    CL44' '\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWORKAREA DSECT\nWORKSAVE DS    18F                   REGISTER SAVE AREA\nWKCCW1   DS    XL8                   SEARCH CCW\nWKCCW2   DS    XL8                   TIC CCW\nWKCCW3   DS    XL8                   READ CCW\nWKECB    DS    F                     I/O ECB\nWKCURAL  DS    2F\nWKCOPYEP DS    A                     IEBCOPY ENTRY POINT\n* ------------------------------------------------------------------- *\nWKDEVTA  DS    0F                    DEVT DATA\nWKDEVT0  DS    F\nWKDEVT1  DS    F\nWKDEVT2  DS    F\nWKDEVT3  DS    F\nWKDEVT4  DS    F\nWKDEVT5  DS    F\n* ------------------------------------------------------------------- *\nWKUCBA   DS    A                     ADDRESS OF UCB\nWKCDCB   DS    0A,(CDCBL)X           RESERVE SPACE FOR CTL STMT DCB\nWKPDCB   DS    0A,(PDCBL)X           RESERVE SPACE FOR PDS DIR DCB\nWKOC     DS    (OPENIL)X             OPEN LIST FORM\nWKDEVT   DS    0A,(DEVTL)X           RESERVE DEVT LIST FORM STORAGE\nCARDAREA DS    CL80\nWKFLAG   DS    X                     FLAGS/INDICATORS\n$LOCATE  EQU   X'80'                 .. LOCATING MEMBER\n$FOUND   EQU   X'40'                 .. MEMBER FOUND DURING \"LOCATE\"\nWKTTR    DS    XL3                   TTR OF REQUESTED MEMBER\nWORKL    EQU   *-WORKAREA\n         DRREQ    DSECT=YES\n         ORG      DRRECD\n         REQBLOK  DSECT=NO\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              DCB DSECT                                              *\n* ------------------------------------------------------------------- *\n         DCBD   DSORG=PS\n* ------------------------------------------------------------------- *\n*              DEB DSECT                                              *\n* ------------------------------------------------------------------- *\n         IEZDEB LIST=YES\n* ------------------------------------------------------------------- *\n*              IOB DSECT                                              *\n* ------------------------------------------------------------------- *\n         IEZIOB DSECT=YES\nIOBLEN   EQU   *-IOB\n* ------------------------------------------------------------------- *\n*              DASD COUNT                                             *\n* ------------------------------------------------------------------- *\nCOUNT    DSECT\nCOUNTCC  DS    XL2\nCOUNTHH  DS    XL2\nCOUNTR   DS    X\nCOUNTKL  DS    X\nCOUNTDL  DS    XL2\nCOUNTL   EQU   *-COUNT\n* ------------------------------------------------------------------- *\n*              PDS DIRECTORY ENTRY                                    *\n* ------------------------------------------------------------------- *\nDIRDSECT DSECT\nDIRNAME  DS    CL8\nDIRTTR   DS    CL3\nDIRC     DS    X\nDIRUSER  DS    0C\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\nCCWCC    EQU   X'40'\nCCWSILI  EQU   X'20'\n         END  FXSCOPY\n./ ADD NAME=FXSDAIR  0100-99056-99056-1500-00364-00364-00000-FX-REL1\n\n         TITLE 'FXSDAIR  DYNAMIC ALLOCATION/DE-ALLOCATION'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSDAIR                                               *\n*                                                                     *\n*   Interface with MVS's dynamic allocation interface routine (DAIR)  *\n*   to allocate or de-allocate the datasets being transmitted,        *\n*   staging datasets, or sysout data sets.                            *\n*                                                                     *\n*   The interface block is DAIRREQ.                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSDAIR    FXPRFX 'DYNAMIC ALLOACTION/DE-ALLOCATION'\nFXSDAIR  AMODE 31\nFXSDAIR  RMODE ANY\n         LR    R9,R1                 COPY PARAMETER BLOCK ADDRESS\n         USING DAIRREQ,R9            DEFINE BASE\n         USING S99RB,R2              DEFINE BASE\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    DAIR0010              YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         LA    R2,DXDRB              SVC 99 REQUEST BLOCK'S ADDRESS\n         ST    R2,DXDRBA             SET POINTER\n         OI    DXDRBA,X'80'          SET END OF LIST\n         MVC   DXDDDP(DAIRPL),DAIRPI INITIALIZE PARAMETERS\nDAIR0010 DS    0H\n         CLI   DAIRCMD,$DAIRALO      ALLOCATION?\n         BE    DAIR1000              YES\n         CLI   DAIRCMD,$DAIRREL      RELEASE?\n         BE    DAIR2000              YES\n         CLI   DAIRCMD,$DAIRDEL      DELETE?\n         BE    DAIR3000              YES\n         ITRACE ID=BADCMD\n         ABEND $U0003,DUMP,,USER     SORRY\nDAIR1000 DS    0H\n         ITRACE ID=ALLOCATE\n         CLI   DAIRTYPE,$DAIRCPY     IEBCOPY SYSIN/SYSPRINT DATA SET?\n         BE    DAIR1020              YES\n         CLI   DAIRTYPE,$DAIRDSN     EXISTING DATASET?\n         BE    DAIR1010              YES\n         CLI   DAIRTYPE,$DAIRDSS     SYSIN/SYSPRINT DATA SET?\n         BE    DAIR1030              YES\n         CLI   DAIRTYPE,$DAIRPRT     SYSOUT DATA SET?\n         BE    DAIR1080              YES\n         CLI   DAIRTYPE,$DAIRSTG     STAGING DATASET?\n         BE    DAIR1030              YES\n         ABEND $U0004,DUMP,,USER     SORRY AGAIN\nDAIR1010 DS    0H\n         ITRACE ID=ALOCDSN\n         AP    COMMDD#,P1            ADD 1 TO DD NUMBER\n         LA    R2,DXDRB              REQUEST BLOCK'S ADDRESS\n         MVC   DXDDD,DDEDWD          INITIALIZE WITH EDIT WORD\n         ED    DXDDD,COMMDD#         EDIT DD NUMBER\n         MVI   DXDDD,C'D'            SET DD NAME PREFIX \"D\"\n         MVC   DAIRDDN,DXDDD         PASS DD NAME BACK TO CALLER\n         MVC   DXDDSN,DAIRDSN        SET DATASET NAME\n         MVI   DXDDSPI,X'08'         SET DISPOSITION 'SHR'\n         XC    DXDRB(S99RBEND-S99RB),DXDRB\n         MVI   S99VERB,S99VRBAL      SET VERB\n         LA    R15,DXDDDP            DDNAME PARAMETER\n         ST    R15,DXDTXTP1          SET PARAMETER 1 ADDRESS\n         LA    R15,DXDDSNP           DDNAME PARAMETER\n         ST    R15,DXDTXTP2          SET PARAMETER 2 ADDRESS\n         LA    R15,DXDDSPIP          DISPOSITION PARAMETER\n         ST    R15,DXDTXTP3          SET PARAMETER 3 ADDRESS\n         OI    DXDTXTP3,X'80'        FLAG END OF LIST\n         BAL   R8,DAIR4000           GO ISSUE SVC 99\n         B     EXIT0000              AND EXIT\nDAIR1020 DS    0H\n         ITRACE ID=COPYSYS           IEBCOPY SYSIN OR SYSPRINT\n         MVC   DXDDD,DAIRDDN         SET DDNAME\nDAIR1030 DS    0H\n         ITRACE ID=SYSOUT            STAGING OR SYSIN/SYSPRINT\n         LA    R2,DXDRB              REQUEST BLOCK'S ADDRESS\n         CLI   DAIRTYPE,$DAIRCPY     IEBCOPY SYSIN/SYSPRINT DATA SET?\n         BE    DAIR1040              YES.. DDNAME PROVIDED BY CALLER\n         AP    COMMDD#,P1            ADD 1 TO DD NUMBER\n         MVC   DXDDD,DDEDWD          INITIALIZE WITH EDIT WORD\n         ED    DXDDD,COMMDD#         EDIT DD NUMBER\n         MVI   DXDDD,C'D'            SET DD NAME PREFIX \"D\"\n         MVC   DAIRDDN,DXDDD         PASS DD NAME BACK TO CALLER\nDAIR1040 DS    0H\n         MVC   DAIRDSN,COMMBLKS      INITIALIZE DATASET NAME\n         LH    R1,COMMPREL           STAGING DATASET PREFIX LENGTH\n         BCTR  R1,0                  MINUS 1\n         EX    R1,PRFXMVC            MOVE PREFIX\n         LA    R3,DAIRDSN+1(R1)      END OF PREFIX\n         TIME  DEC                   GET DATE AND TIME\n         STCM  R1,15,DXDWORK         SAVE DATE\n         MVC   1(6,R3),DAYEDWD       INITIALIZE WITH EDIT WORD\n         ED    1(6,R3),DXDWORK+1     EDIT DATE\n         MVC   0(2,R3),=C'.D'        SET DELIMITER AND \"DAY\" PREFIX\n         MVC   7(2,R3),=C'.T'        SET DELIMITER AND \"TIME\" PREFIX\n         STCM  R0,15,DXDWORK         SAVE TIME\n         UNPK  9(7,R3),DXDWORK(4)    UNPACK TIME\n         MVZ   9(6,R3),HEX0000       MOVE ZONES\n         TR    9(6,R3),HEXCHAR       TRANSLATE TO PRINTABLE\n         MVI   15(R3),C'.'           SET DELIMITER\n         MVC   16(8,R3),DAIRDDN      SET LAST QUALIFIER\n         MVC   DXDDSN,DAIRDSN        SET DATASET NAME\n         MVI   DXDDSPI,X'04'         SET INITIAL DISP 'NEW'\n         MVI   DXDDSPN,X'02'         SET NORMAL DISP 'CATLG'\n         XC    DXDRB(S99RBEND-S99RB),DXDRB\n         MVI   S99VERB,S99VRBAL      SET VERB\n         LA    R15,DXDDDP            DDNAME PARAMETER\n         ST    R15,DXDTXTP1          SET PARAMETER 1 ADDRESS\n         LA    R15,DXDDSNP           DATASET NAME PARAMETER\n         ST    R15,DXDTXTP2          SET PARAMETER 2 ADDRESS\n         LA    R15,DXDDSPIP          INITIAL DISPOSITION\n         ST    R15,DXDTXTP3          SET PARAMETER 3 ADDRESS\n         LA    R15,DXDDSPNP          NORMAL DISPOSITION\n         ST    R15,DXDTXTP4          SET PARAMETER 4 ADDRESS\n         LA    R15,DXDUNITP          UNIT PARAMETERS\n         ST    R15,DXDTXTP5          SET PARAMETER 5 ADDRESS\n         LA    R15,DXDVOLP           VOLSER PARAMETERS\n         ST    R15,DXDTXTP6          SET PARAMETER 6 ADDRESS\n         LA    R15,DXDTRKSP          TRACKS PARAMETER\n         ST    R15,DXDTXTP7          SET PARAMETER 7 ADDRESS\n         LA    R15,DXDPRIP           PRIMARY SPACE PARAMETER\n         ST    R15,DXDTXTP8          SET PARAMETER 8 ADDRESS\n         LA    R15,DXDSECP           SECONDARY SPACE PARAMETER\n         ST    R15,DXDTXTP9          SET PARAMETER 9 ADDRESS\n         LA    R15,DXDRELP           RELEASE UNUSED SPACE\n         ST    R15,DXDTXTPA          SET PARAMETER 10 ADDRESS\n         OI    DXDTXTPA,X'80'        FLAG END OF LIST\n         ICM   R7,15,COMMSTGE        FIRST STAGING DEVICE\n         USING STGEDEV,R7            DEFINE BASE\n         BZ    EXIT0000              NO DEVICES?\nDAIR1050 DS    0H\n         CLI   DAIRTYPE,$DAIRCPY     IEBCOPY SYSIN/SYSPRINT?\n         BE    DAIR1060              YES\n         CLI   DAIRTYPE,$DAIRDSS     SYSIN/SYSPRINT?\n         BE    DAIR1060              YES\n         ITRACE ID=ALOCSTG,                                            +\n               DATA1=DAIRSIZE\n         MVI   VTOCCMD,$VTOCTRK      SET COMMAND (CONVERT TO TRACKS)\n         ST    R7,VTOCDEV            SET STAGE DEVICE BLOCK ADDRESS\n         MVC   VTOCDSSZ,DAIRSIZE     SET DATASET SIZE IN BYTES\n         LA    R1,VTOCREQ            VTOC MODULE INTERFACE BLOCK\n         L     R15,AVTOC             VTOC MODULE ENTRY POINT\n         BALR  R14,R15               CONVERT SIZE TO TRACKS\n         MVC   DXDPRI,VTOCTRKP+1     SET PRIMARY SIZE\n         MVC   DXDSEC,VTOCTRKS+1     SET SECONDARY SIZE\n         B     DAIR1070\nDAIR1060 DS    0H\n         ITRACE ID=ONETRACK\n         MVC   DXDPRI,X000001        SET NUMBER OF TRACKS TO 1\n         MVC   DXDSEC,X000001        SET NUMBER OF TRACKS TO 1\nDAIR1070 DS    0H\n         MVC   DXDVOL,STGEVOL        SET VOLSER\n         BAL   R8,DAIR4000           GO ISSUE SVC 99\n         OC    DAIRR15,DAIRR15       SUCCESSFUL?\n         BZ    EXIT0000              YES\n         ICM   R7,15,STGENEXT        NEXT STAGING DEVICE\n         BNZ   DAIR1050              CHECK THIS DEVICE\n         B     EXIT0000              AND EXIT\nDAIR1080 DS    0H\n         ITRACE ID=ALOCPRT\n         MVC   DXDDD,DAIRDDN         SET DDNAME\n         LA    R2,DXDRB              REQUEST BLOCK'S ADDRESS\n         XC    DXDRB(S99RBEND-S99RB),DXDRB\n         MVI   S99VERB,S99VRBAL      SET VERB\n         LA    R15,DXDDDP            DDNAME PARAMETER\n         ST    R15,DXDTXTP1          SET PARAMETER 1 ADDRESS\n         LA    R15,DXDPRTP           SYSOUT PARAMETER\n         ST    R15,DXDTXTP2          SET PARAMETER 2 ADDRESS\n         MVC   DXDPRTC,COMMSNPC      SET SNAPSHOT SYSOUT CLASS\n         LA    R15,DXDFREEP          FREE=CLOSE PARAMETER\n         ST    R15,DXDTXTP3          SET PARAMETER 3 ADDRESS\n         OI    DXDTXTP3,X'80'        FLAG END-OF-LIST\n         BAL   R8,DAIR4000           ALLOCATE THE SYSOUT DATA SET\n         B     EXIT0000              AND EXIT\nDAIR2000 DS    0H\n         ITRACE ID=RELEASE\n         LA    R2,DXDRB              REQUEST BLOCK'S ADDRESS\n         MVC   DXDDD,DAIRDDN         SET DDNAME TO RELEASE\n         MVI   S99VERB,S99VRBUN      SET VERB\n         LA    R15,DXDDDP            DDNAME PARAMETER\n         ST    R15,DXDTXTP1          SET PARAMETER 1 ADDRESS\n         OI    DXDTXTP1,X'80'        FLAG END OF LIST\n         BAL   R8,DAIR4000           GO ISSUE SVC 99\n         B     EXIT0000              AND EXIT\nDAIR3000 DS    0H\n         ITRACE ID=DELETE\n         AP    COMMDD#,P1            ADD 1 TO DD NUMBER\n         LA    R2,DXDRB              REQUEST BLOCK'S ADDRESS\n         MVC   DXDDD,DDEDWD          INITIALIZE WITH EDIT WORD\n         ED    DXDDD,COMMDD#         EDIT DD NUMBER\n         MVI   DXDDD,C'D'            SET DD NAME PREFIX \"D\"\n         MVC   DAIRDDN,DXDDD         PASS DD NAME BACK TO CALLER\n         MVC   DXDDSN,DAIRDSN        SET DATASET NAME\n         MVI   DXDDSPI,X'01'         SET DISPOSITION 'OLD'\n         MVI   DXDDSPN,X'04'         SET DISPOSITION 'DELETE'\n         XC    DXDRB(S99RBEND-S99RB),DXDRB\n         MVI   S99VERB,S99VRBAL      SET VERB\n         LA    R15,DXDDDP            DDNAME PARAMETER\n         ST    R15,DXDTXTP1          SET PARAMETER 1 ADDRESS\n         LA    R15,DXDDSNP           DSN PARAMETER\n         ST    R15,DXDTXTP2          SET PARAMETER 2 ADDRESS\n         LA    R15,DXDDSPIP          INITIAL DISPOSITION PARAMETER\n         ST    R15,DXDTXTP3          SET PARAMETER 3 ADDRESS\n         LA    R15,DXDDSPNP          NORMAL DISPOSITION PARAMETER\n         ST    R15,DXDTXTP4          SET PARAMETER 4 ADDRESS\n         OI    DXDTXTP4,X'80'        FLAG END OF LIST\n         BAL   R8,DAIR4000           GO ISSUE SVC 99\n         LTR   R15,R15               ALLOCATE SUCCESSFUL?\n         BNZ   EXIT0000              NO\n         MVI   S99VERB,S99VRBUN      SET VERB\n         LA    R15,DXDDDP            DDNAME PARAMETER\n         ST    R15,DXDTXTP1          SET PARAMETER 1 ADDRESS\n         OI    DXDTXTP1,X'80'        FLAG END OF LIST\n         BAL   R8,DAIR4000           ISSUE SVC 99\n         B     EXIT0000              AND EXIT\nDAIR4000 DS    0H\n         MVI   S99RBLN,S99RBEND-S99RB\n         LA    R1,DXDTXTP1           FIRST TEXT UNIT POINTER\n         ST    R1,S99TXTPP           SET TEXT ADDRESS\n         LA    R1,DXDRBA             REQUEST BLOCK POINTER'S ADDRESS\n         ITRACE ID=SVC99,RDATA1=R1\n         SVC   99                    ISSUE SVC\n         ITRACE ID=SVC99RC,                                            +\n               RDATA1=R15\n         STCM  R15,3,DAIRR15         PASS RETURN CODE BACK TO CALLER\n         MVC   DAIRERR,S99ERROR      PASS ERROR CODE BACK TO CALLER\n         MVC   DAIRINFO,S99INFO      PASS INFO CODE BACK TO CALLER\n         BR    R8                    RETURN\n* ------------------------------------------------------------------- *\n*             EXECUTED INSTRUCTIONS                                   *\n* ------------------------------------------------------------------- *\nPRFXMVC  MVC   DAIRDSN(0),COMMPREF   MOVE PREFIX\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT              EXITING PRINT MODULE\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        CONSTANTS                                                   *\n*                                                                    *\n* ------------------------------------------------------------------ *\nDXDSTART DC    Q(DXDSDAIR)           DISPLACEMENT TO WORK AREA\nDDEDWD   DC    X'F02120202020202020' DD NUMBER EDIT WORD\nDAYEDWD  DC    X'F02020202020'\nX000001  DC    X'000001'             CONSTANT\nHEX0000  DC    8X'00'\nHEXCHAR  DC    C'0123456789ABCDEF'\nP1       DC    P'1'\nDAIRPI   DC    AL2(DALDDNAM)         DDNAME PARMS\n         DC    AL2(1)\n         DC    AL2(8)\n         DC    CL8' '                DDNAME\n         DC    AL2(DALDSNAM)         DATASET NAME PARMS\n         DC    AL2(1)\n         DC    AL2(44)\n         DC    CL44' '               DATASET NAME\n         DC    AL2(DALSTATS)         INITIAL DISPOSITION PARMS\n         DC    AL2(1)\n         DC    AL2(1)\n         DC    X'00'                 INITIAL DISPOSITION\n         DC    AL2(DALNDISP)         NORMAL DISPOSITION PARMS\n         DC    AL2(1)\n         DC    AL2(1)\n         DC    X'00'                 NORMAL DISPOSITION\n         DC    AL2(DALUNIT)          UNIT PARAMETERS\n         DC    AL2(1)\n         DC    AL2(8)\n         DC    CL8'SYSALLDA'         UNIT NAME\n         DC    AL2(DALVLSER)         VOLSER PARAMETERS\n         DC    AL2(1)\n         DC    AL2(6)\n         DC    CL6' '                VOLSER\n         DC    AL2(DALTRK)           ALLOCATION UNITS (TRACKS)\n         DC    AL2(0)\n         DC    AL2(DALPRIME)         PRIMARY SPACE PARAMETERS\n         DC    AL2(1)\n         DC    AL2(3)\n         DC    XL3'0'                PRIMARY SPACE (IN TRACKS)\n         DC    AL2(DALSECND)         SECONDARY SPACE PARAMETERS\n         DC    AL2(1)\n         DC    AL2(3)\n         DC    XL3'0'                SECONDARY SPACE (IN TRACKS)\n         DC    AL2(DALRLSE)          RELEASE UNUSED SPACE\n         DC    AL2(0)\n         DC    AL2(DALSYSOU)         ALLOCATE SYSOUT\n         DC    AL2(1)\n         DC    AL2(1)\n         DC    C'O'                  SYSOUT CLASS\n         DC    AL2(DALCLOSE)         SAME AS FREE=CLOSE ON A DD STMT\n         DC    AL2(0)\nDAIRPL   EQU   *-DAIRPI\n         LTORG\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        WORK AREAS                                                  *\n*                                                                    *\n* ------------------------------------------------------------------ *\nDXDSDAIR DSECT\nDXDID    DS    CL8                   WORK AREA OWNER ID\nDXDSAVE  DS    18F                   REGISTER SAVE AREA\nDXDRBA   DS    A                     REQUEST BLOCK'S ADDRESS\nDXDTXTP1 DS    A                     TEXT UNIT 1'S ADDRESS\nDXDTXTP2 DS    A                     TEXT UNIT 2'S ADDRESS\nDXDTXTP3 DS    A                     TEXT UNIT 3'S ADDRESS\nDXDTXTP4 DS    A                     TEXT UNIT 4'S ADDRESS\nDXDTXTP5 DS    A                     TEXT UNIT 5'S ADDRESS\nDXDTXTP6 DS    A                     TEXT UNIT 6'S ADDRESS\nDXDTXTP7 DS    A                     TEXT UNIT 7'S ADDRESS\nDXDTXTP8 DS    A                     TEXT UNIT 8'S ADDRESS\nDXDTXTP9 DS    A                     TEXT UNIT 9'S ADDRESS\nDXDTXTPA DS    A                     TEXT UNIT 10'S ADDRESS\nDXDRB    DS    (S99RBEND-S99RB)X     RESERVE SPACE FOR REQUEST BLOCK\nDXDDDP   DS    AL2,AL2,AL2           DDNAME PARMS\nDXDDD    DS    CL8                   DDNAME\nDXDDSNP  DS    AL2,AL2,AL2           DATASET NAME PARMS\nDXDDSN   DS    CL44                  DATASET NAME\nDXDDSPIP DS    AL2,AL2,AL2           INITIAL DISPOSITION PARMS\nDXDDSPI  DS    X                     INITIAL DISPOSITION\nDXDDSPNP DS    AL2,AL2,AL2           NORMAL DISPOSITION PARMS\nDXDDSPN  DS    X                     NORMAL DISPOSITION\nDXDUNITP DS    AL2,AL2,AL2           UNIT PARAMETERS\nDXDUNIT  DS    CL8                   UNIT NAME\nDXDVOLP  DS    AL2,AL2,AL2           VOLSER PARAMETERS\nDXDVOL   DS    CL6                   VOLSER\nDXDTRKSP DS    AL2,AL2               ALLOCATION UNITS (TRACKS)\nDXDPRIP  DS    AL2,AL2,AL2           PRIMARY SPACE PARAMETERS\nDXDPRI   DS    XL3                   PRIMARY SPACE (IN TRACKS)\nDXDSECP  DS    AL2,AL2,AL2           SECONDARY SPACE PARAMETERS\nDXDSEC   DS    XL3                   SECONDARY SPACE (IN TRACKS)\nDXDRELP  DS    AL2,AL2               RELEASE UNUSED SPACE (RLSE)\nDXDPRTP  DS    AL2,AL2,AL2           SYSOUT PARAMETERS\nDXDPRTC  DS    C                     SYSOUT CLASS\nDXDFREEP DS    AL2,AL2               FREE AT DE-ALLOCATION\nDXDPL    EQU   *-DXDDDP\nDXDWORK  DS    CL16\n         VTOCREQ DSECT=NO\n* ------------------------------------------------------------------ *\n*              DAIR INTEFACE BLOCK                                   *\n* ------------------------------------------------------------------ *\n         DAIRREQ  DSECT=YES\n* ------------------------------------------------------------------ *\n*              COMMON DATA MAP                                       *\n* ------------------------------------------------------------------ *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------ *\n*              STAGING DEVICE BLOCK                                  *\n* ------------------------------------------------------------------ *\n         STGEDEV  DSECT=YES\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              EQUATES                                               *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         ABCODES\n         IEFZB4D0\n         IEFZB4D2\n         END  FXSDAIR\n./ ADD NAME=FXSDSS   0100-99056-99056-1500-00391-00391-00000-FX-REL1\n\n         TITLE 'FXSDSS    DF/DSS DUMP/RESTORE SUBTASK'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSDSS                                                *\n*                                                                     *\n*   Drive the DF/DSS DUMPs and RESTOREs.                              *\n*   DF/DSS functions are done in a subtask to allow over-lap with     *\n*   other functions (like transmitting or receiving of data).         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXSDSS   CSECT\nFXSDSS   AMODE 31\nFXSDSS   RMODE 24\n         USING FXSDSS,R12            DEFINE BASE\n         USING DRREQ,R9              DEFINE BASE\n         USING REQBLOK,R7            DEFINE BASE\n         USING FXSCOMM,R11           DEFINE BASE\n         STM   R14,R12,12(R13)       CHAIN REGISTERS\n         LR    R12,R15               COPY ENTRY POINT ADDRESS\n         L     R11,0(R1)             LOAD FXSCOMM'S ADDRESS\n         GETMAIN R,LV=WORKL          ACQUIRE STORAGE FOR WORK AREA\n         B     DSS0000\n         DC    ((PFXMODNM-MODPRFX)-(*-FXSDSS))X'00'\n         DC    CL8'FXSDSS'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nDSS0000  DS    0H\n         USING WORKAREA,R1           DEFINE BASE\n         XC    WORKAREA+000(256),WORKAREA\n         XC    WORKAREA+256(WORKL-256),WORKAREA+256\n         ST    R13,4(R1)             CHAIN PREVIOUS SAVE AREA TO OURS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO PREVIOUS\n         LR    R13,R1                COPY WORK AREA ADDRESS\n         DROP  R1\n         USING WORKAREA,R13          DEFINE BASE\n         ITRACE ID=FINDSS            ENTRY\n         ST    R12,ADSS              SET OUR ENTRY POINT IN COMMON\n         MVC   WKDCB(DCBL),DCBI      INITIALIZE DCB IN WORK AREA\n         MVI   CARDAREA,C' '         RE-INITIALIZE\n         MVC   CARDAREA+1(L'CARDAREA-1),CARDAREA\n         MVI   WKDDLIST+1,48         SET DDLIST LENGTH\n         LA    R1,H0                 OPTIONS PARAMETER\n         ST    R1,WKPARMS+0          SET OPTIONS ADDRESS\n         LA    R1,WKDDLIST           DDNAMES LIST ADDRESS\n         ST    R1,WKPARMS+4          SET DDNAMES LIST ADDRESS\n         OI    WKPARMS+4,X'80'       FLAG END OF LIST\n         OI    WKOC,X'80'            SET END OF LIST\n         LOAD  EP=ADRDSSU            LOAD DF/DSS INITIAL MODULE\n         ST    R0,WKDSSEP            SAVE ENTRY POINT ADDRESS\n         ITRACE ID=FINDSMS           ATTEMPTING TO LOCATE SSCT ENTRY\n         L     R1,CVTPTR             CVT ADDRESS\n         USING CVT,R1                DEFINE CVT BASE\n         L     R2,CVTJESCT           JES SSCT ADDRESS\n         USING JESCT,R2              DEFINE BASE\n         ICM   R3,15,JESSSCT         FIRST SUBSYSTEM ENTRY\n         USING SSCT,R3               DEFINE SSCT BASE\nDSS0010  DS    0H\n         CLC   SSCTSNAM,SMS          SMS SUBSYSTEM ENTRY LOCATED?\n         BE    DSS0020               YES\n         ICM   R3,15,SSCTSCTA        NEXT SUBSYSTEM ADDRESS\n         BNZ   DSS0010               LOOP\n         B     DSS0040\nDSS0020  DS    0H\n         ITRACE ID=SMSACTIV\n         OI    WKFLAG,$SMS           SMS IS ACTIVE\n         B     DSS0040               ENTER MAIN LOGIC\nDSS0030  DS    0H\n         ITRACE ID=WORKWAIT          WAITING FOR WORK\n         TM    DSSWORK,X'40'         ECB POSTED?\n         BO    DSS0040               YES.. SKIP WAITING\n         LA    R1,DSSWORK            WORK TO DO ECB\n         WAIT  1,ECB=(1)             WAIT FOR WORK TO DO ECB\n         ITRACE ID=WOKEUP            TIME TO RISE AND SHINE\n         XC    DSSWORK,DSSWORK       RESET ECB\nDSS0040  DS    0H\n         TM    COMMEOJ,$EOJ1         SHUTDOWN PHASE 1?\n         BO    EXIT0000              YES.. IT'S MILLER TIME\n         ICM   R9,15,DSSREQ          REQUEST BLOCK'S ADDRESS\n         BZ    DSS0030               FALSE ALARM.. GO WAIT\n         CLI   DRSTAT,0              PROCESSING STARTED OR COMPLETE?\n         BNE   DSS0030               YES.. GO WAIT\n         ITRACE ID=PROCESS,RDATA1=R9\n         LA    R7,DRRECD             SET REQUEST BLOCK BASE\n         OI    DRSTAT,$DRSTRT        PROCESSING STARTED\n         CLC   COMMAPLN,REQTNODE     ARE WE SENDING END?\n         BE    DUMP0000              YES\n         B     RSTR0000              WE'RE RECEIVING END\nDSS0050  DS    0H\n         OI    DRSTAT,$DRDONE        PROCESSING COMPLETED\n         LA    R1,DSSECB             WE'RE DONE ECB\n         POST  (1),(R15)             POST THE ECB\n         B     DSS0030               WAIT FOR MORE WORK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        DUMP DATASET TO STAGING DATASET                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDUMP0000 DS    0H\n         ITRACE ID=DUMP\n         MVI   REQSTAT,$REQDUMP      STATUS IS 'DUMP IN PROGRESS'\n         LA    R2,WKDCB              DCB IN WORK AREA\n         USING IHADCB,R2             DEFINE BASE\n         MVC   DCBDDNAM,DRINDD       SET DDNAME ASSIGNED\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         MVC   WKOC(OPENL),OPENI     INITIALIZE OPEN PARM LIST\n         OPEN  ((R2),OUTPUT),        OPEN DATASET FOR OUTPUT           +\n               MF=(E,WKOC)           .. EXECUTE FORM, LIST FORM ADDRESS\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         MVC   CARDAREA(DUMP1L),DUMP1\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         MVC   CARDAREA(DUMP2L),DUMP2\n         MVC   CARDAREA+(DUMP2DDN-DUMP2)(L'DRSTAGE),DRSTAGE\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         MVC   CARDAREA(DUMP3L),DUMP3\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         MVC   CARDAREA(DUMP4L),DUMP4\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         MVC   CARDAREA(DUMP5L),DUMP5\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         MVC   CARDAREA(DUMP6L),DUMP6\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         MVC   CARDAREA(DUMP7L),DUMP7\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         MVC   CARDAREA+15(L'REQODSNM),REQODSNM\n         MVI   CARDAREA+15+L'REQODSNM+2,C'-'\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         MVC   CARDAREA(DUMP8L),DUMP8\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         MVC   WKOC(CLOSEL),CLOSEI   INITIALIZE CLOSE PARM LIST\n         CLOSE ((R2)),               CLOSE DF/DSS INPUT FILE           +\n               MF=(E,WKOC)           .. EXECUTE FORM, LIST FORM ADDRESS\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         ITRACE ID=DSSDUMP\n         MVC   WKINDD,DRINDD         SET SYSIN DD NAME\n         MVC   WKPRTDD,DRPRTDD       SET SYSPRINT DD NAME\n         LA    R1,WKPARMS            DF/DSS PARAMETER LIST ADDRESS\n         L     R15,WKDSSEP           ENTRY POINT ADDRESS\n         BALR  R14,R15               LINK TO DF/DSS\n         ITRACE ID=DUMPDONE,RDATA1=R15\n         STCM  R15,3,DRR15           PASS BACK DF/DSS RETURN CODE\n         B     DSS0050\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        RESTORE DATASET FROM STAGING DATASET                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nRSTR0000 DS    0H\n         ITRACE ID=RESTORE\n         LA    R2,WKDCB              DCB IN WORK AREA\n         USING IHADCB,R2             DEFINE BASE\n         MVC   DCBDDNAM,DRINDD       SET DDNAME ASSIGNED\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         OPEN  ((R2),OUTPUT),        OPEN DATASET FOR OUTPUT           +\n               MF=(E,WKOC)           .. EXECUTE FORM, LIST FORM ADDRESS\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         MVC   CARDAREA(RSTR1L),RSTR1\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         MVC   CARDAREA(RSTR2L),RSTR2\n         MVC   CARDAREA+(RSTR2DDN-RSTR2)(L'DRSTAGE),DRSTAGE\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         MVC   CARDAREA(RSTR3L),RSTR3\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         ICM   R3,15,DRRSTR          RESTORE BLOCK'S ADDRESS\n         BZ    ERR0010               BETTER NOT HAPPEN\n         USING RSTRBLOK,R3           DEFINE BASE\n         LH    R4,RSTRVOL#           NUMBER OF VOLUMES IN THE LIST\n         LA    R5,RSTRVOL            FIRST VOLUME IN LIST\nRSTR0010 DS    0H\n         MVC   CARDAREA(RSTR4L),RSTR4\n         MVC   CARDAREA+(RSTR4VOL-RSTR4)(L'RSTR4VOL),0(R5)\nRSTR0020 DS    0H\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         LA    R5,L'RSTRVOL(R5)      NEXT VOLUME\n         BCT   R4,RSTR0010           LOOP\n         MVC   CARDAREA(RSTR5L),RSTR5\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         MVC   CARDAREA(RSTR6L),RSTR6\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         MVC   CARDAREA(RSTR7L),RSTR7\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         TM    WKFLAG,$SMS           IS SMS IN THE SYSTEM?\n         BNO   RSTR0030              NO\n         MVC   CARDAREA(RSTR8L),RSTR8\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         MVC   CARDAREA(RSTR9L),RSTR9\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\nRSTR0030 DS    0H\n         CLI   REQREPL,C'Y'          REPLACE IF IT ALREADY EXISTS?\n         BNE   RSTR0040              NO\n         MVC   CARDAREA(RSTR10L),RSTR10\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\nRSTR0040 DS    0H\n         MVC   CARDAREA(RSTR11L),RSTR11\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         MVC   CARDAREA+15(L'REQODSNM),REQODSNM\n         MVI   CARDAREA+17+L'REQODSNM,C'-'\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         MVC   CARDAREA(RSTR5L),RSTR5\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         CLC   REQDDSNM,COMMBLKS     NEW NAME REQUESTED?\n         BE    RSTR0070              NO\n         MVC   CARDAREA(RSTR5L),RSTR5\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         MVC   CARDAREA(RSTR12L),RSTR12\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         MVC   CARDAREA+15(L'REQODSNM),REQODSNM\n         LA    R1,CARDAREA+15+L'REQODSNM\nRSTR0050 DS    0H\n         CLI   0(R1),C' '            END OF NAME FOUND?\n         BNE   RSTR0060              YES\n         BCT   R1,RSTR0050           LOOP\nRSTR0060 DS    0H\n         MVI   1(R1),C','            INSERT COMMA\n         MVI   CARDAREA+17+L'REQODSNM,C'-'\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         MVC   CARDAREA+15(L'REQDDSNM),REQDDSNM\n         MVI   CARDAREA+15+L'REQDDSNM+2,C'-'\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         MVC   CARDAREA(RSTR5L),RSTR5\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\nRSTR0070 DS    0H\n         MVC   CARDAREA(RSTR13L),RSTR13\n         BAL   R8,PUNCH000           PUNCH DF/DSS CONTROL STATEMENT\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         CLOSE ((R2)),               CLOSE DF/DSS INPUT FILE           +\n               MF=(E,WKOC)           .. EXECUTE FORM, LIST FORM ADDRESS\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         ITRACE ID=DRRSTR\n         MVC   WKINDD,DRINDD         SET SYSIN DD NAME\n         MVC   WKPRTDD,DRPRTDD       SET SYSPRINT DD NAME\n         LA    R1,WKPARMS            DF/DSS PARAMETER LIST ADDRESS\n         L     R15,WKDSSEP           ENTRY POINT ADDRESS\n         BALR  R14,R15               LINK TO DF/DSS\n         ITRACE ID=RSTRDONE,RDATA1=R15\n         STCM  R15,3,DRR15           PASS BACK DF/DSS RETURN CODE\n         B     DSS0050\n*---------------------------------------------------------------------*\n*        WRITE DF/DSS CONTROL STATEMENTS                              *\n*---------------------------------------------------------------------*\nPUNCH000 DS    0H\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         PUT   (R2),CARDAREA         PUNCH DF/DSS CONTROL STATEMENT\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         MVI   CARDAREA,C' '         RE-INITIALIZE\n         MVC   CARDAREA+1(L'CARDAREA-1),CARDAREA\n         BR    R8                    RETURN\n* ------------------------------------------------------------------- *\n*        ADDRESSING MODE SWITCHING                                    *\n* ------------------------------------------------------------------- *\nAM24     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         BSM   R0,R15                RETURN IN 24-BIT MODE\nAM31     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         O     R15,X80               SET HIGH BIT ON\n         BSM   R0,R15                RETURN IN 31-BIT MODE\n* ------------------------------------------------------------------- *\n*        EXIT                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT              EXITING PRINT MODULE\n         DELETE EP=ADRDSSU           RELEASE DF/DSS\n         LR    R1,R13                COPY WORK AREA ADDRESS\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         FREEMAIN R,A=(1),LV=WORKL   FREE WORK AREA\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------- *\n*        ERRORS                                                       *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=NORSTR            NO RESTORE BLOCK\n         ABEND $U0008,DUMP,,USER     TIME TO FIX FX\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nX80      DC    A(X'80000000')\nH0       DC    H'0'                  NO-OVERRIDDEN OPTIONS\nOPENI    OPEN  (*,OUTPUT),MF=L\nOPENL    EQU   *-OPENI\nCLOSEI   CLOSE (*),MF=L\nCLOSEL   EQU   *-CLOSEI\nDCBI     DCB   DSORG=PS,                                               +\n               DDNAME=DSSIN,                                           +\n               LRECL=80,                                               +\n               BLKSIZE=3120,                                           +\n               MACRF=PM\nDCBL     EQU   *-DCBI\nSMS      DC    CL4'SMS'              SMS SUBSYSTEM NAME\nDUMP1    DC    C' DUMP -'\nDUMP1L   EQU   *-DUMP1\nDUMP2    DC    C' OUTDDNAME ('\nDUMP2DDN DC    CL8' '\n         DC    C' ) -'\nDUMP2L   EQU   *-DUMP2\nDUMP3    DC    C' ALLEXCP -'\nDUMP3L   EQU   *-DUMP3\nDUMP4    DC    C' ALLDATA (*) -'\nDUMP4L   EQU   *-DUMP4\nDUMP5    DC    C' COMPRESS -'\nDUMP5L   EQU   *-DUMP5\nDUMP6    DC    C' TOLERATE (ENQFAILURE) -'\nDUMP6L   EQU   *-DUMP6\nDUMP7    DC    C' DATASET ( INCLUDE ( -'\nDUMP7L   EQU   *-DUMP7\nDUMP8    DC    C'         ))'\nDUMP8L   EQU   *-DUMP8\nRSTR1    DC    C' RESTORE -'\nRSTR1L   EQU   *-RSTR1\nRSTR2    DC    C' INDDNAME ( '\nRSTR2DDN DC    CL8' '\n         DC    C' ) -'\nRSTR2L   EQU   *-RSTR2\nRSTR3    DC    C' OUTDYNAM ( -'\nRSTR3L   EQU   *-RSTR3\nRSTR4    DC    C'           ('\nRSTR4VOL DC    CL06' '\n         DC    C',SYSALLDA) -'\nRSTR4L   EQU   *-RSTR4\nRSTR5    DC    C'             ) -'\nRSTR5L   EQU   *-RSTR5\nRSTR6    DC    C' CATALOG -'\nRSTR6L   EQU   *-RSTR6\nRSTR7    DC    C' SHARE -'\nRSTR7L   EQU   *-RSTR7\nRSTR8    DC    C' NULLMGMTCLAS -'\nRSTR8L   EQU   *-RSTR8\nRSTR9    DC    C' NULLSTORCLAS -'\nRSTR9L   EQU   *-RSTR9\nRSTR10   DC    C' REPLACE -'\nRSTR10L  EQU   *-RSTR10\nRSTR11   DC    C' DATASET ( INCLUDE ( -'\nRSTR11L  EQU   *-RSTR11\nRSTR12   DC    C' RENAMEUNCONDITIONAL (( -'\nRSTR12L  EQU   *-RSTR12\nRSTR13   DC    C'             )'\nRSTR13L  EQU   *-RSTR13\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWORKAREA DSECT\nWORKSAVE DS    18F                   REGISTER SAVE AREA\nWKDSSEP  DS    A                     DF/DSS ENTRY POINT\nWKPARMS  DS    0A\n         DS    A                     OPTIONS LIST ADDRESS\n         DS    A                     DDNAME LIST ADDRESS\nWKDDLIST DS    H                     LENGTH OF LIST\n         DC    XL8'0000000000000000' NOT USED\n         DC    XL8'0000000000000000' NOT USED\n         DC    XL8'0000000000000000' NOT USED\n         DC    XL8'0000000000000000' NOT USED\nWKINDD   DC    CL8' '                SYSIN DDNAME\nWKPRTDD  DC    CL8' '                SYSPRINT DD NAME\nCARDAREA DS    CL80\nWKDCB    DS    0A,(DCBL)X            RESERVE SPACE FOR DCB\nWKOC     DS    (OPENL)X              RESERVE SPACE FOR OPEN/CLOSE\nWKFLAG   DS    X                     FLAGS/INDICATORS\n$SMS     EQU   X'80'                 .. SMS IS ACTIVE\nWORKL    EQU   *-WORKAREA\n         REQBLOK  DSECT=YES\n         DRREQ    DSECT=YES\n         RSTRBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              DCB DSECT                                              *\n* ------------------------------------------------------------------- *\n         DCBD   DSORG=PS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         CVT   DSECT=YES,LIST=NO\n         IEFJESCT\n         IEFJSCVT\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  FXSDSS\n./ ADD NAME=FXSLOSS  0100-99056-99056-1500-00385-00385-00000-FX-REL1\n\n         TITLE 'CLEAN-UP AFTER A VTAM LOSS'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSLOSS                                               *\n*                                                                     *\n*  If a VTAM session is lost, any activity in progress on any         *\n*  conversation with that node is interrupted.  FX is notified of     *\n*  these lost sessions via the ATTN exit.                             *\n*                                                                     *\n*  The ATTN exit does not do the clean-up.  FX has no enqueue/dequeue *\n*  mechanism to prevent multiple tasks from updating the same master  *\n*  file record at the same time.  FX relies on all master file        *\n*  updates to be done from the same MVS task, and the ATTN exit runs  *\n*  under an IRB... a separately dispatchable unit of work.  The ATTN  *\n*  exit sets the error flag in the SESSBLOK, and when the main task   *\n*  finds the error set, it performs the clean-up.                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSLOSS    FXPRFX 'CLEAN-UP AFTER A VTAM LOSS'\nFXSLOSS  AMODE 31\nFXSLOSS  RMODE ANY\n         USING FXSLOSS,R12           DEFINE BASE REGISTER\n         LR    R8,R1                 COPY PARM ADDRESS\n         USING VTAMBLOK,R8           DEFINE BASE\n         L     R7,VTAMSESS           SESSION BLOCK'S ADDRESS\n         ITRACE ID=LOSTSESS,         SESSION LOST                      +\n               RDATA1=R7             .. SESSION BLOCK'S ADDRESS\n         USING SESSBLOK,R7           DEFINE BASE\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    LOSS0010              YES\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         MVI   PRTCC,C' '            INITIALIZE PRINT I/O AREA\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         GETMAIN RU,                 ACQUIRE 24-BIT PARM BLOCK         +\n               LV=FX24L,             .. AREA SIZE                      +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,DXD24              SAVE 24-BIT WORK AREA ADDRESS\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Scan the conversations.                                      *\n*                                                                     *\n*        If a FX-TO-FX session was lost, reset the master file        *\n*        status so the process can/will be restarted when the         *\n*        session can be re-established.                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nLOSS0010 DS    0H\n         L     R9,DXD24              24-BIT WORK AREA'S ADDRESS\n         USING FX24PRM,R9            DEFINE BASE\n         TM    COMMEOJ,$EOJ3         EOJ PHASE 3?\n         BO    EXIT0000              YES\nLOSS0020 DS    0H\n         ICM   R6,15,SESSCONV        FIRST CONVERSATION BLOCK'S ADDRESS\n         BZ    LOSS0200              NO SESSIONS EXIST\n         USING CONVBLOK,R6           DEFINE BASE\n         CLI   SESSTYPE,$SESSUSR     IS THIS A USER SESSION?\n         BE    LOSS0160              YES\n         CLI   CONVTYPE,$CONVTS      RECEIVING END OF FX-TO-FX?\n         BE    LOSS0080              YES\n*---------------------------------------------------------------------*\n*                                                                     *\n*        We were SENDing end of FX-to-FX conversation                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MVI   MSTRCMD,$MSTRRD       SET MASTER FILE COMMAND (READ)\n         MVC   MSTRREC#,CONVREC#     SET MASTER FILE RECORD NUMBER\n         BAL   R3,MSTR0000           READ MASTER FILE RECORD\n         LA    R5,MSTRRECD           MASTER FILE RECORD DATA ADDRESS\n         USING REQBLOK,R5            DEFINE BASE\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,REQNDE#          NUMBER OF NODES IN TRANSMIT LIST\n         LA    R4,REQNDENM           FIRST NODE NAME IN TRAMSMIT LIST\n         USING REQNDENM,R4           DEFINE BASE\nLOSS0030 DS    0H\n         CLC   REQNDENM,SESSNAME     SENDING TO THIS NODE?\n         BE    LOSS0040              YES\n         LA    R4,REQNDEL(R4)        NEXT NODE\n         BCT   R1,LOSS0030           LOOP\n         ABEND $U0066,DUMP,,USER\nLOSS0040 DS    0H\n         CLI   REQNDEST,0            ALREADY BEEN RESET?\n         BE    LOSS0170              DELETE THIS CONVERSATION BLOCK\n         CLI   REQNDEST,$REQNDET     TRANSMITTING?\n         BE    LOSS0050              YES\n         CLI   REQNDEST,$REQNDEC     TRANSMISSION COMPLETE?\n         BE    LOSS0050              YES\n         ABEND $U0067,DUMP,,USER\n*---------------------------------------------------------------------*\n*                                                                     *\n*        A file transmission was lost.                                *\n*                                                                     *\n*        1) Find the node's name in the node list.                    *\n*        2) If the last function was a BSAM read, issue a wait.       *\n*        3) Close the DCB used to read the staging dataset.           *\n*        4) Deallocate the staging dataset.                           *\n*        5) Reset the node's status to 'initial'.                     *\n*        6) Print the 'transmission lost' message.                    *\n*        7) Delete the conversation block.                            *\n*                                                                     *\n*---------------------------------------------------------------------*\nLOSS0050 DS    0H\n         ITRACE ID=XMITLOST,         FILE TRANSMISSION WAS LOST        +\n               RDATA1=R7,            .. SESSION BLOCK'S ADDRESS        +\n               RDATA2=R6             .. CONVERSATION BLOCK'S ADDRESS\n         CLI   REQNDEST,$REQNDEC     TRANSMISSION COMPLETE?\n         BE    LOSS0075              YES\n         CLI   CONVFUNC,$CONVFB      LAST FUNCTION A 'READ'?\n         BNE   LOSS0060              NO\n         L     R1,CONVDECB           DECB'S ADDRESS\n         TM    0(R1),X'40'           HAS READ COMPLETED?\n         BO    LOSS0060              YES\n         WAIT  1,ECB=(1)             WAIT FOR THE I/O TO COMPLETE\nLOSS0060 DS    0H\n         L     R2,CONVDCB            DCB'S ADDRESS\n         USING IHADCB,R2             DEFINE BASE\n         OC    DCBDDNAM,DCBDDNAM     WAS DCB EVER INITIALIZED?\n         BZ    LOSS0070              NO.. SKIP CLOSE AND RELEASE\n         ITRACE ID=XMITCLOS          CLOSE THE DCB\n         ST    R2,DCB24              SET DCB'S ADDRESS\n         FX24  $CLOSE                CLOSE THE DCB\n         FXCALL FXSDAIR,RELEASE,,    RELEASE THE DATASET               +\n               DCBDDNAM              .. DDNAME TO RELEASE\n         OC    DAIRR15,DAIRR15       RELEASE SUCCESSFUL?\n         BNZ   ERR0010               NO\nLOSS0070 DS    0H\n         MVI   REQNDEST,$REQNDEI     RESET STATUS\n         MVC   PRTMSGID(MSG01L),MSG01\n         MVC   PRTMSGID+(MSG01NDE-MSG01)(L'MSG01NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG01NBR-MSG01)(L'MSG01NBR),DXDDWORD+4\n         BAL   R3,PRT0000            QUEUE MESSAGE TO PRINT\n         MVI   MSTRCMD,$MSTRWRT      SET MASTER FILE COMMAND (WRITE)\n         BAL   R3,MSTR0000           UPDATE MASTER FILE RECORD\n         B     LOSS0170              DELETE THIS CONVERSATION BLOCK\nLOSS0075 DS    0H\n         MVC   PRTMSGID(MSG03L),MSG03\n         MVC   PRTMSGID+(MSG03NDE-MSG03)(L'MSG03NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG03NBR-MSG03)(L'MSG03NBR),DXDDWORD+4\n         BAL   R3,PRT0000            QUEUE MESSAGE TO PRINT\n         B     LOSS0170              DELETE THIS CONVERSATION BLOCK\n         DROP  R4\n*---------------------------------------------------------------------*\n*                                                                     *\n*        A dataset receive was interrupted.                           *\n*                                                                     *\n*        1) If the last function was a BSAM write, issue a WAIT.      *\n*        2) Close the DCB used to write to the staging dataset.       *\n*        3) If no checkpoints have been taken:                        *\n*             a) delete the stage data set                            *\n*             b) reset master file record to \"FREE\" status            *\n*           If checkpoints have been taken:                           *\n*             set master file status to \"INITIAL\".                    *\n*        4) Print the 'RECEIVE LOST' message.                         *\n*        5) Delete the conversation block.                            *\n*                                                                     *\n*---------------------------------------------------------------------*\nLOSS0080 DS    0H\n         ITRACE ID=RECVLOST,         A DATASET RECEIVE WAS LOST        +\n               RDATA1=R7,            .. SESSION BLOCK'S ADDRESS        +\n               RDATA2=R6             .. CONVERSATION BLOCK'S ADDRESS\n         MVI   MSTRCMD,$MSTRRD       SET MASTER FILE COMMAND (READ)\n         MVC   MSTRREC#,CONVREC#     SET MASTER FILE RECORD NUMBER\n         BAL   R3,MSTR0000           READ MASTER FILE RECORD\n         LA    R5,MSTRRECD           MASTER FILE RECORD DATA ADDRESS\n         USING REQBLOK,R5            DEFINE BASE\n         CLI   REQSTAT,$REQRECV      DATASET BEING RECEIVED?\n         BE    LOSS0090              YES\n         CLI   CONVFUNC,0            ANY FUNCTION EVER STARTED?\n         BE    LOSS0170              NO.. LOST BEFORE RECEIVE BEGAN\n         ABEND $U0068,DUMP,,USER\nLOSS0090 DS    0H\n         MVC   PRTMSGID(MSG02L),MSG02\n         MVC   PRTMSGID+(MSG02NDE-MSG02)(L'MSG02NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG02NBR-MSG02)(L'MSG02NBR),DXDDWORD+4\n         BAL   R3,PRT0000            QUEUE MESSAGE TO PRINT\n         CLI   CONVFUNC,$CONVFB      LAST FUNCTION A BSAM WRITE?\n         BNE   LOSS0100              NO\n         L     R1,CONVDECB           DECB'S ADDRESS\n         TM    0(R1),X'40'           WRITE COMPLETED?\n         BO    LOSS0100              YES\n         WAIT  1,ECB=(1)             ISSUE A WAIT\nLOSS0100 DS    0H\n         L     R2,CONVDCB            DCB'S ADDRESS\n         USING IHADCB,R2             DEFINE BASE\n         OC    DCBDDNAM,DCBDDNAM     WAS DCB EVER INITIALIZED?\n         BZ    LOSS0140              NO\n         ITRACE ID=RECVCLOS          CLOSING DCB\n         ST    R2,DCB24              SET DCB'S ADDRESS\n         FX24  $CLOSE                CLOSE THE DCB\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,REQNDE#          NUMBER OF NODES IN TRANSMIT LIST\n         LA    R4,REQNDENM           FIRST NODE NAME IN TRAMSMIT LIST\n         USING REQNDENM,R4           DEFINE BASE\nLOSS0110 DS    0H\n         CLC   REQNDENM,COMMAPLN     IS THIS US?\n         BE    LOSS0120              YES\n         LA    R4,REQNDEL(R4)        NEXT NODE\n         BCT   R1,LOSS0110           LOOP\n         ABEND $U0112,DUMP,,USER\nLOSS0120 DS    0H\n         OC    REQNDECR,REQNDECR     CHECKPOINT DATA PRESENT?\n         BZ    LOSS0130              NO\n         MVI   REQNDEST,$REQNDEI     RESET TO 'INITIAL' STATE\n         B     LOSS0150              UPDATE MASTER FILE RECORD\n         DROP  R4\nLOSS0130 DS    0H\n         FXCALL FXSDAIR,DELETE,,     DELETE THE DATASET                +\n               DCBDDNAM,             .. DDNAME                         +\n               REQWDSNM              .. DATASET NAME\n         OC    DAIRR15,DAIRR15       DELETE SUCCESSFUL?\n         BNZ   ERR0020               NO\nLOSS0140 DS    0H\n         MINIT COMMBLKS,P0,$REQFREE,R14 RESET MASTER FILE STATUS\nLOSS0150 DS    0H\n         MVI   MSTRCMD,$MSTRWRT      SET MASTER FILE COMMAND (WRITE)\n         BAL   R3,MSTR0000           UPDATE MASTER FILE RECORD\n         B     LOSS0170              DELETE THIS CONVERSATION BLOCK\n*---------------------------------------------------------------------*\n*                                                                     *\n*        A user session was lost.                                     *\n*                                                                     *\n*        No clean-up is needed for user sessions.                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nLOSS0160 DS    0H\n         ITRACE ID=USERLOST,         USER SESSION LOST (OR DEALLOCATED)+\n               RDATA1=R7,            .. SESSION BLOCK'S ADDRESS        +\n               RDATA2=R6             .. CONVERSATION BLOCK'S ADDRESS\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Delete the conversation block.                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nLOSS0170 DS    0H\n         ITRACE ID=DELCONV,          DELETING THE CONVERSATION BLOCK   +\n               RDATA1=R6             .. CONVBLOK'S ADDRESS\n         FXCALL FXSCONV,DELETE,      DELETE A CONVERSATION BLOCK       +\n               (R6),                 .. CONVBLOK'S ADDRESS             +\n               (R7)                  .. ASSOCIATED SESSBLOK'S ADDRESS\n         B     LOSS0020              PROCESS NEXT CONVERSATION\n*---------------------------------------------------------------------*\n*                                                                     *\n*        All conversations for this session have been cleaned-up      *\n*        and the CONVBLOK's have been deleted.  Now if the session    *\n*        was for a FX-TO-FX link, reset the '$SESSPND' flag.    If    *\n*        the session was for a user session, delete the SESSBLOK.     *\n*                                                                     *\n*---------------------------------------------------------------------*\nLOSS0200 DS    0H\n         MVC   VTAMSESS,SESSNEXT     SET NEXT SESSION BLOCK'S ADDRESS\n         CLI   SESSTYPE,$SESSUSR     USER SESSION?\n         BE    LOSS0210              YES\n         NI    SESSSTAT,255-$SESSPND RESET 'PENDING' FLAG\n         B     EXIT0010              AND EXIT\nLOSS0210 DS    0H\n         ITRACE ID=DELSESS,          DELETING A SESSION BLOCK          +\n               DATA1=SESSNAME,       .. LU'S NAME                      +\n               RDATA2=R7             .. SESSION BLOCK'S ADDRESS\n         FXCALL FXSSESS,DELETE,SESSNAME  DELETE THE SESSION BLOCK\n         B     EXIT0010              AND EXIT\n*---------------------------------------------------------------------*\n*        ERROR SITUATIONS                                             *\n*---------------------------------------------------------------------*\nERR0010  DS    0H\n         ITRACE ID=STGERELF,         STAGE FILE RELEASE FAILED         +\n               DATA1=DAIRR15         .. ERROR CODES\n         ABEND $U0069,DUMP,,USER\nERR0020  DS    0H\n         ITRACE ID=STGEDELF,         STAGE FILE RELEASE FAILED         +\n               DATA1=DAIRR15         .. ERROR CODES\n         ABEND $U0070,DUMP,,USER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Read or write master file records                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSTR0000 DS    0H\n         ITRACE ID=MSTRIO\n         FXCALL FXSMSTR              LINK TO MASTER FILE I/O\n         BR    R3                    RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        PRINT                                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         ITRACE ID=PRINT\n         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE\n         BR    R3                    DONE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        EXIT                                                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         FREEMAIN RU,A=(9),LV=FX24L FREEMAIN 24-BIT WORK AREA\nEXIT0010 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            CALLER'S SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE CALLER'S REGISTERS\n         SR    R15,R15               ALWAYS A GOOD RETURN CODE\n         BR    R14                   RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDSLOSS)           DISPLACEMENT TO WORK AREA\nP0       DC    P'0'\nMSG01    DS    0C\n         DC    CL11'FXSLOSS01I'\n         DC    C'TRANSMISSION REQUEST '\nMSG01NDE DC    CL8' '\nMSG01NBR DC    XL8'4021202020202020'\n         DC    C' INTERRUPTED BY LOSS OF VTAM CONVERSATION'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'FXSLOSS02I'\n         DC    C'RECEIVE OF REQUEST '\nMSG02NDE DC    CL8' '\nMSG02NBR DC    XL8'F021202020202020'\n         DC    C' INTERRUPTED BY LOSS OF VTAM CONVERSATION'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'FXSLOSS03I'\n         DC    C'TRANSMISSION LOST AFTER TRANSMISSION COMPLETED '\nMSG03NDE DC    CL8' '\nMSG03NBR DC    XL8'F021202020202020'\nMSG03L   EQU   *-MSG03\n* ------------------------------------------------------------------- *\n*              WORK AREA                                              *\n* ------------------------------------------------------------------- *\nDXDSLOSS DSECT\nDXDID    DS   CL8                    WORK AREA OWNER EYECATCHER\nDXDSAVE  DS   18F                    REGISTER SAVE AREA\nDXDDWORD DS   D                      CVD/CVB WORK AREA\nDXD24    DS   A                      24-BIT PARM AREA ADDRESS\n         PRTBLOK  DSECT=NO\n         MSTRREQ  DSECT=NO\n         DAIRREQ  DSECT=NO\n         SESSREQ  DSECT=NO\n         CONVREQ  DSECT=NO\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         VTAMBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              24-BIT MODULE PARAMETER BLOCK                          *\n* ------------------------------------------------------------------- *\n         FX24PRM DSECT=YES\n* ------------------------------------------------------------------- *\n*              VTAM SESSION BLOCK                                     *\n* ------------------------------------------------------------------- *\n         SESSBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              VTAM CONVERSATION BLOCK                                *\n* ------------------------------------------------------------------- *\n         CONVBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              MASTER FILE RECORD                                     *\n* ------------------------------------------------------------------- *\n         REQBLOK  DSECT=YES\n* ------------------------------------------------------------------- *\n*              DCB                                                    *\n* ------------------------------------------------------------------- *\n         DCBD   DSORG=PS\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  FXSLOSS\n./ ADD NAME=FXSMAIN  0100-99056-99056-1500-00875-00875-00000-FX-REL1\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Name: FXSMAIN                                                      *\n*                                                                     *\n*  Purpose: STC Mainline                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  OPTIONS\nFXSMAIN  CSECT\nFXSMAIN  AMODE 31\nFXSMAIN  RMODE ANY\n         USING FXSMAIN,R12,R9       DEFINE BASE\n         STM   R14,R12,12(R13)      SAVE ENTRY REGISTERS\n         LR    R12,R15              COPY BASE\n         LA    R9,2048(R12)         SET 2ND..\n         LA    R9,2048(R9)          .. BASE REGISTER\n         B     @@000001             BRANCH AROUND EYECATCHER\n         DC    ((PFXMODNM-MODPRFX)-(*-FXSMAIN))X'00'\nMODID    DC    CL8'FXSMAIN'         MODULE NAME\n         DC    CL8'&SYSDATE'        DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'        TIME OF ASSEMBLY\n@@000001 DS    0H\n* ------------------------------------------------------------------- *\n*        ACQUIRE STORAGE FOR WORK AREAS                               *\n* ------------------------------------------------------------------- *\n         L     R3,DXDSIZE           WORK AREA SIZE\n         GETMAIN RU,                ACQUIRE WORK AREA STORAGE          +\n               LV=(R3),             .. WORK AREA SIZE IS IN R3         +\n               LOC=ANY              .. MAY BE ABOVE OR BELOW\n         LR    R4,R1                COPY STORAGE ADDRESS\n         LR    R10,R1               COPY STORAGE ADDRESS\n         LR    R2,R1                COPY WORK AREA ADDRESS\n         SR    R1,R1                CLEAR REGISTER\n         MVCL  R2,R0                CLEAR WORK AREA\n         A     R10,DXDSTART         PLUS DISPLACEMENT TO OUR PORTION\n         USING DXDSMAIN,R10         DEFINE WORK AREA BASE\n         MVC   DXDID,MODID          IDENTIFY WORK AREA OWNER\n         LA    R2,DXDSAVE           OUR SAVE AREA ADDRESS\n         ST    R13,4(R2)            CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R2,8(R13)            OUR SAVE AREA TO CALLER'S\n         LR    R13,R2               SET SAVE AREA ADDRESS\n* ------------------------------------------------------------------- *\n*        Load common data module  (FXSCOMM)                           *\n* ------------------------------------------------------------------- *\n         LOAD  EP=FXSCOMM           LOAD COMMON DATA MODULE\n         LR    R11,R0               COPY TO PERMANENT BASE\n         USING FXSCOMM,R11          DEFINE COMMON AREA BASE\n         ST    R12,AMAIN            SET MAINLINE'S ADDRESS IN COMMON\n         ST    R4,COMMDXDA          SET DYNAMIC WORK AREA ADDRESS\n* ------------------------------------------------------------------- *\n*        Load master file I/O module (FXSMSTR)                        *\n* ------------------------------------------------------------------- *\n         LOAD  EP=FXSMSTR           LOAD MASTER FILE I/O MODULE\n         ST    R0,AMSTR             SET ADDRESS IN COMMON AREA\n         MVC   AATTN,VATTN          SET VTAM ATTN EXIT ADDRESS\n         MVC   ACONV,VCONV          SET CONVBLOK ADD/DELETE ADDRESS\n         MVC   ACONS,VCONS          SET CONSOLE COMMUNICATION ADDR\n         MVC   ADAIR,VDAIR          SET DAIR MODULE ADDRESS\n         MVC   ALERAD,VLERAD        SET LERAD EXIT ADDRESS\n         MVC   ALOSS,VLOSS          SET VTAM LOSS CLEAN-UP ADDRESS\n         MVC   APRTQ,VPRTQ          SET PRINTER QUEUEING MODULE ADDR\n         MVC   ARECV,VRECV          SET FILE RECEIVE MODULE ADDRESS\n         MVC   AREQE,VREQE          SET REQUEST ENTRY PROCESSOR\n         MVC   AREQI,VREQI          SET REQUEST INQUIRY PROCESSOR\n         MVC   ARPLX,VRPLX          SET RPL EXIT ADDRESS\n         MVC   ASEND,VSEND          SET FILE SEND MODULE ADDRESS\n         MVC   ASESS,VSESS          SET SESSION BLOCK ADD/DELETE\n         MVC   ASHUT,VSHUT          SET STARTED TASK SHUTDOWN ADDR\n         MVC   ASTGE,VSTGE          SET STAGE/DESTAGE MODULE ADDRESS\n         MVC   ATIMER,VTIMER        SET TIMER EXIT ADDRESS\n         MVC   AUID,VUID            SET USER IDENTIFICATION\n         MVC   AVTAM,VVTAM          SET VTAM MODULE ADDRESS\n         MVC   AVSUB,VVSUB          SET VTAM SUB-FUNCTION MODULE ADDR\n         MVC   AVTOC,VVTOC          SET VTOC MODULE ADDRESS\n* ------------------------------------------------------------------- *\n*        LOAD 24-BIT MODE MODULE  (FXS24)                             *\n* ------------------------------------------------------------------- *\n         LOAD  EP=FX24              24-BIT MODE MODULE\n         ST    R0,A24               SET ADDRESS IN COMMON MODULE\n* ------------------------------------------------------------------- *\n*        ACQUIRE STORAGE FOR TRACE TABLE                              *\n* ------------------------------------------------------------------- *\n         L     R3,TRSIZE            TRACE TABLE SIZE\n         GETMAIN RU,                ACQUIRE STORAGE FOR TRACE TABLE    +\n               LV=(R3),             .. SIZE IS IN R3                   +\n               LOC=ANY              .. MAY BE ABOVE OR BELOW\n         ST    R1,TRADDR            SAVE TRACE TABLE STORAGE ADDRESS\n         SR    R0,R0                ASSUME ON A 32-BYTE BOUNDARY\n         TM    TRADDR+3,X'07'       ALREADY ON 32-BYTE BOUNDARY?\n         BNO   INIT0010             YES\n         SRL   R1,5                 SHIFT OUT LOW BITS ..\n         SLL   R1,5                 .. TO ROUND TO 32-BYTE BOUNDARY\n         LA    R1,32(R1)            PLUS 32\n         LA    R0,TRENTRYL          1 LESS TRACE ENTRY AVAILABLE\nINIT0010 DS    0H\n         ST    R1,TRFIRST           FIRST TRACE ENTRY\n         ST    R1,TRCURR            CURRENT TRACE ENTRY\n         A     R1,TRSIZE            LAST ENTRY IN TABLE\n         SH    R1,=Y(TRENTRYL)      MINUS 1 ENTRY\n         SR    R1,R0                MINUS 1 MORE IF NECESSARY\n         ST    R1,TRLAST            LAST TRACE ENTRY ADDRESS\n* ------------------------------------------------------------------- *\n*        Determine DD's present                                       *\n* ------------------------------------------------------------------- *\n         USING PSA,R0               DEFINE BASE\n         L     R1,PSATNEW           OUR TCB ADDRESS FROM PSA\n         USING TCB,R1               DEFINE TCB BASE\n         L     R2,TCBTIO            TIOT ADDRESS FROM OUR TCB\n         USING TIOT1,R2             DEFINE TIOT BASE\n         LA    R3,TIOENTRY          FIRST TIOT ENTRY\n         USING TIOENTRY,R3          DEFINE TIOT ENTRY BASE\n         SR    R4,R4                CLEAR FOR LENGTHS\nINIT0020 DS    0H\n         ICM   R4,1,TIOELNGH        LENGTH OF THIS ENTRY\n         BZ    INIT0060             END OF TABLE\n         ITRACE ID=TIOTDDNM,        TRACE EACH TIOT ENTRY              +\n               DATA1=TIOEDDNM\n         LA    R5,DDTBLE            REQUIRED DDNAMES TABLE\n         USING DDDSECT,R5           DEFINE BASE\nINIT0030 DS    0H\n         CLI   0(R5),X'FF'          END OF TABLE?\n         BE    INIT0050             YES, NOT IN TABLE\n         CLC   TIOEDDNM,DDNAME      DD NAME FOUND?\n         BE    INIT0040             YES\n         LA    R5,DDL(R5)           NEXT DD\n         B     INIT0030             LOOP\nINIT0040 DS    0H\n         ITRACE ID=SETDDID,         SETTING DD ID                      +\n               DATA1=TIOEDDNM,      .. DDNAME                          +\n               DATA2=DDID           .. FLAG VALUE\n         OC    DXDDD,DDID           TURN ON MATCHING ID\nINIT0050 DS    0H\n         AR    R3,R4                NEXT ENTRY\n         B     INIT0020             LOOP\nINIT0060 DS    0H\n         ITRACE ID=TIOTDONE,        TIOT SCAN COMPLETE                 +\n               DATA1=DXDDD          .. INCLUDE FLAG BYTE\n         TM    DXDDD,X'40'          PRINT DD PRESENT?\n         BO    INIT0070             YES\n         GETMAIN RU,                ACQUIRE STORAGE FOR WTO            +\n               LV=WTO01L,           .. STORAGE SIZE REQUIRED           +\n               LOC=BELOW            .. FROM BELOW THE LINE\n         LR    R2,R1                COPY STORAGE ADDRESS\n         MVC   0(WTO01L,R2),WTO01   COPY WTO\n         WTO   MF=(E,(R2))          ISSUE WTO\n         FREEMAIN RU,A=(R2),LV=WTO01L\n         ABEND $U0062,DUMP,,USER\n* ------------------------------------------------------------------- *\n*        ATTACH print sub-task                                        *\n* ------------------------------------------------------------------- *\nINIT0070 DS    0H\n         MVC   DXDATTCH(ATTCHL),ATTCHI\n         MVC   DXDTASK,PRINT        TASK BEING ATTACHED\n         LA    R2,PRTTERM           TERMINATION ECB'S ADDRESS\n         LA    R3,DXDAPARM          PARM LIST ADDRESS\n         ITRACE ID=ATCHPRT          ATTACHING PRINT SUBTASK\n         ATTACH EP=FXSPRTS,         ATTACH PRINT SUBTASK               +\n               PARAM=((R11)),       .. PARAMETER IS COMMON MODULE ADDR +\n               ECB=(R2),            .. TERMINATION ECB'S ADDRESS       +\n               PURGE=QUIESCE,       .. FINISH UP I/O IN PROGRESS       +\n               MF=(E,(R3)),         .. SUBTASK PARM LIST               +\n               SF=(E,DXDATTCH)      .. EXECUTE FORM, LIST FORM ADDRESS\n         LTR   R15,R15              ATTACH SUCCESSFUL?\n         BNZ   ERR0030              NO\n         ST    R1,COMMPRT           SET TCB'S ADDRESS IN COMMON\n         ITRACE ID=PRTOK,           PRINT SUBTASK ATTACH SUCCESSFUL    +\n               RDATA1=R1            .. INCLUDE TCB ADDRESS IN TRACE\n         OI    COMMFLAG,$COMMPRT    PRINT SUBTASK IS ACTIVE\n* ------------------------------------------------------------------- *\n*        Print start-up messages                                      *\n* ------------------------------------------------------------------- *\n         MVI   PRTCC,C' '           SINGLE SPACE\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         FXCALL PRTQ,HEADING        ADD HEADING REQUEST TO QUEUE\n         MVC   PRTMSGID(MSG02L),MSG02\n         BAL   R8,PRT0000           PRINT MESSAGE\n         MVC   PRTMSGID(MSG03L),MSG03\n         BAL   R8,PRT0000           PRINT MESSAGE\n* ------------------------------------------------------------------- *\n*        Make sure all required DD's are present                      *\n* ------------------------------------------------------------------- *\n         LA    R5,DDTBLE            FIRST DDNAME\n         SR    R2,R2                CLEAR REGISTER\nINIT0080 DS    0H\n         TM    DDFLAG,$DDREQ        IS THIS A REQUIRED DD?\n         BNO   INIT0090             NO\n         IC    R2,DDID              INSERT DD ID\n         EX    R2,DDTM              IS DD PRESENT?\n         BO    INIT0090             YES\n         MVC   PRTMSGID(MSG04L),MSG04\n         MVC   PRTMSGID+(MSG04D-MSG04)(L'MSG04D),DDNAME\n         BAL   R8,PRT0000           PRINT MESSAGE\n         OI    COMMFLAG,$ABORT      SET ABORT FLAG\nINIT0090 DS    0H\n         LA    R5,DDL(R5)           NEXT DD\n         CLI   0(R5),X'FF'          END OF TABLE?\n         BNE   INIT0080             NO\n         TM    COMMFLAG,$ABORT      ABORT FLAG SET?\n         BNO   INIT0100             NO\n         MVC   PRTMSGID(MSG05L),MSG05\n         BAL   R8,PRT0000           PRINT MESSAGE\n         B     EXIT0000             EXIT\nDDTM     TM    DXDDD,X'00'          TEST FOR PRESENCE OF DD\n* ------------------------------------------------------------------- *\n*        ATTACH external trace subtask if FXSXTR DD was present       *\n* ------------------------------------------------------------------- *\nINIT0100 DS    0H\n         TM    DXDDD,X'04'          EXTERNAL TRACE (FXSXTR) DD PRESENT?\n         BNO   INIT0110             NO\n         MVC   DXDATTCH(ATTCHL),ATTCHI\n         MVC   DXDTASK,XTR          TASK BEING ATTACHED\n         LA    R2,XTRTERM           TERMINATION ECB'S ADDRESS\n         LA    R3,DXDAPARM          PARM LIST ADDRESS\n         ITRACE ID=ATCHXTR          ATTACHING EXTERNAL TRACE SUBTASK\n         ATTACH EP=FXSXTR,          ATTACH EXTERNAL TRACE SUBTASK      +\n               PARAM=((R11)),       .. PARAMETER IS COMMON MODULE ADDR +\n               ECB=(R2),            .. TERMINATION ECB'S ADDRESS       +\n               PURGE=QUIESCE,       .. FINISH UP I/O IN PROGRESS       +\n               MF=(E,(R3)),         .. SUBTASK PARM LIST               +\n               SF=(E,DXDATTCH)      .. EXECUTE FORM, LIST FORM ADDRESS\n         LTR   R15,R15              ATTACH SUCCESSFUL?\n         BNZ   ERR0030              NO\n         ST    R1,COMMXTR           SET TCB'S ADDRESS IN COMMON\n         ITRACE ID=XTROK,           EXTERNAL TRACE ATTACH SUCCESSFUL   +\n               RDATA1=R1            .. INCLUDE TCB ADDRESS IN TRACE\n         OI    XTRFLAG,$XTR         EXTERNAL TRACE SUBTASK IS ACTIVE\n         MVC   PRTMSGID(MSG06L),MSG06\n         BAL   R8,PRT0000           PRINT MESSAGE\n* ------------------------------------------------------------------- *\n*        Call parameter interpreter                                   *\n* ------------------------------------------------------------------- *\nINIT0110 DS    0H\n         LOAD  EP=FXSPARM           LOAD PARM CONVERTER\n         LR    R15,R0               PARAMETER MODULE ENTRY POINT\n         BALR  R14,R15              LINK TO PARAMETER INTERPRETER\n         DELETE EP=FXSPARM          DELETE PARAMETER CONVERTER\n         TM    COMMFLAG,$ABORT      ERRORS IN PARAMETERS?\n         BO    ERR0010              YES\n* ------------------------------------------------------------------- *\n*        Call VTOC module to determine staging device characteristics *\n* ------------------------------------------------------------------- *\n         MVI   VTOCCMD,$VTOCDEV     SET COMMAND\n         LA    R1,VTOCREQ           INTERFACE BLOCK'S ADDRESS\n         L     R15,AVTOC            VTOC MODULE ENTRY POINT\n         BALR  R14,R15              LINK TO VTOC MODULE\n* ------------------------------------------------------------------- *\n*        Open master file                                             *\n* ------------------------------------------------------------------- *\n         ITRACE ID=OPENMSTR\n         FXCALL FXSMSTR,OPEN        OPEN MASTER FILE\n* ------------------------------------------------------------------- *\n*        Call master file initialization                              *\n* ------------------------------------------------------------------- *\n         LOAD  EP=FXSMINIT          LOAD MASTER FILE INITIALIZATION\n         LR    R15,R0               COPY ENTRY POINT\n         BALR  R14,R15              LINK TO MASTER FILE INITIALIZATION\n         DELETE EP=FXSMINIT         DELETE MASTER FILE INITIALIZER\n         TM    COMMFLAG,$ABORT      ABORT FLAG SET?\n         BO    ERR0060              YES\n         MVC   PRTMSGID(MSG07L),MSG07\n         BAL   R8,PRT0000           PRINT MESSAGE\n* ------------------------------------------------------------------- *\n*        ATTACH DF/DSS dump/restore sub-task                          *\n* ------------------------------------------------------------------- *\n         LA    R2,DSSTERM           TERMINATION ECB'S ADDRESS\n         LA    R3,DXDAPARM          PARM LIST ADDRESS\n         ITRACE ID=ATCHDSS          ATTACHING DF/DSS SUBTASK\n         MVC   DXDTASK,DFDSS        TASK BEING ATTACHED\n         ATTACH EP=FXSDSS,          ATTACH DF/DSS SUBTASK              +\n               PARAM=((R11)),       .. PARAMETER IS COMMON MODULE ADDR +\n               ECB=(R2),            .. TERMINATION ECB'S ADDRESS       +\n               PURGE=QUIESCE,       .. FINISH UP I/O IN PROGRESS       +\n               MF=(E,(R3)),         .. SUBTASK PARM LIST               +\n               SF=(E,DXDATTCH)      .. EXECUTE FORM, LIST FORM ADDRESS\n         LTR   R15,R15              ATTACH SUCCESSFUL?\n         BNZ   ERR0030              NO\n         ST    R1,COMMDSS           SET TCB'S ADDRESS IN COMMON\n         ITRACE ID=DSSOK,           DF/DSS SUBTASK ATTACH SUCCESSFUL   +\n               RDATA1=R1            .. INCLUDE TCB ADDRESS IN TRACE\n         OI    COMMFLAG,$COMMDSS    DF/DSS SUBTASK ACTIVE\n         MVC   PRTMSGID(MSG08L),MSG08\n         BAL   R8,PRT0000           PRINT MESSAGE\n* ------------------------------------------------------------------- *\n*        ATTACH IEBCOPY dump/restore sub-task                         *\n* ------------------------------------------------------------------- *\n         LA    R2,COPYTERM          TERMINATION ECB'S ADDRESS\n         LA    R3,DXDAPARM          PARM LIST ADDRESS\n         ITRACE ID=ATCHCOPY         ATTACHING IEBCOPY SUBTASK\n         MVC   DXDTASK,IEBCOPY      TASK BEING ATTACHED\n         ATTACH EP=FXSCOPY,         ATTACH IEBCOPY SUBTASK             +\n               PARAM=((R11)),       .. PARAMETER IS COMMON MODULE ADDR +\n               ECB=(R2),            .. TERMINATION ECB'S ADDRESS       +\n               PURGE=QUIESCE,       .. FINISH UP I/O IN PROGRESS       +\n               MF=(E,(R3)),         .. SUBTASK PARM LIST               +\n               SF=(E,DXDATTCH)      .. EXECUTE FORM, LIST FORM ADDRESS\n         LTR   R15,R15              ATTACH SUCCESSFUL?\n         BNZ   ERR0030              NO\n         ST    R1,COMMCOPY          SET TCB'S ADDRESS IN COMMON\n         ITRACE ID=COPYOK,          IEBCOPY SUBTASK ATTACH SUCCESSFUL  +\n               RDATA1=R1            .. INCLUDE TCB ADDRESS IN TRACE\n         OI    COMMFLAG,$COMMCPY    IEBCOPY SUBTASK IS ACTIVE\n         MVC   PRTMSGID(MSG09L),MSG09\n         BAL   R8,PRT0000           PRINT MESSAGE\n         L     R15,ACONS            CONSOLE COMMUNCATION ENTRY POINT\n         BALR  R14,R15              ALLOW CONSOLE MODULE TO INITIALIZE\n         GETMAIN RU,                ACQUIRE STORAGE FOR WTO            +\n               LV=WTO14L,           .. STORAGE SIZE REQUIRED           +\n               LOC=BELOW            .. FROM BELOW THE LINE\n         LR    R2,R1                COPY STORAGE ADDRESS\n         MVC   0(WTO14L,R2),WTO14   COPY WTO\n         WTO   MF=(E,(R2))          ISSUE WTO\n         FREEMAIN RU,A=(R2),LV=WTO14L\n* ------------------------------------------------------------------- *\n*        Call console communication                                   *\n* ------------------------------------------------------------------- *\nPROC0000 DS    0H\n         L     R1,COMMCECB          COMMUNICATION ECB\n         ITRACE ID=CALLCONS,        TRACE CONSOLE ECB                  +\n               DATA1=0(R1)\n         TM    0(R1),X'40'          ECB POSTED?\n         BNO   PROC0010             NO\n         L     R15,ACONS            CONSOLE MODULE ENTRY POINT\n         BALR  R14,R15              LINK TO FXSCONS\n* ------------------------------------------------------------------- *\n*        Call stage/destage                                           *\n* ------------------------------------------------------------------- *\nPROC0010 DS    0H\n         POST  XTRWORK              POST EXTERNAL TRACE SUBTASK\n         ITRACE ID=CALLSTGE         CALL STAGE/DE-STAGE\n         L     R15,ASTGE            STAGE/DE-STAGE ENTRY POINT\n         BALR  R14,R15              LINK TO STAGE/DE-STAGE\n* ------------------------------------------------------------------- *\n*        Call VTAM module                                             *\n* ------------------------------------------------------------------- *\n         ITRACE ID=CALLVTAM         CALL VTAM MODULE\n         POST  XTRWORK              POST EXTERNAL TRACE SUBTASK\n         TM    COMMEOJ,$EOJ1        SHUTDOWN STARTED?\n         BNO   PROC0020             NO\n         OI    COMMEOJ,$EOJ2        ASSUME NO ACTIVITY IN PROGRESS\nPROC0020 DS    0H\n         L     R15,AVTAM            VTAM MODULE ENTRY POINT\n         BALR  R14,R15              LINK TO VTAM MODULE\n         TM    COMMFLAG,$ABORT      ABORT FLAG SET?\n         BO    ERR0050              YES\n         TM    COMMEOJ,$EOJ2        SHUTDOWN PHASE 2?\n         BO    EXIT0000             YES\n* ------------------------------------------------------------------- *\n*        Check the DF/DSS subtask, IEBCOPY subtask, and VTAM          *\n*        control block chains for any work that may have completed    *\n*        before issuing a wait.                                       *\n* ------------------------------------------------------------------- *\nPROC0030 DS    0H\n         ITRACE ID=WORKSRCH\n         SR    R4,R4                CLEAR FOR COUNTER\n         OC    DSSREQ,DSSREQ        DF/DSS REQUEST PRESENT?\n         BZ    PROC0040             NO REQUEST PRESENT\n         TM    DSSECB,X'40'         ECB POSTED?\n         BO    PROC0000             YES\n         LA    R4,1(R4)             PLUS 1 ECB\nPROC0040 DS    0H\n         OC    COPYREQ,COPYREQ      IEBCOPY REQUEST PRESENT?\n         BZ    PROC0050             NO REQUEST PRESENT\n         TM    COPYECB,X'40'        ECB POSTED?\n         BO    PROC0000             YES\n         LA    R4,1(R4)             PLUS 1 ECB\nPROC0050 DS    0H\n         TM    COMMVECB,X'40'       ATTN EXIT ECB POSTED?\n         BO    PROC0000             YES\n         ICM   R7,15,COMMSESS       FIRST SESSION BLOCK\n         USING SESSBLOK,R7          DEFINE BASE\n         BZ    PROC0130             NO SESSIONS\nPROC0060 DS    0H\n         CLI   SESSSTAT,$SESSRDY    SESSION IN READY STATUS?\n         BE    PROC0070             YES\n         TM    SESSSTAT,$SESSPND    ANYTHING PENDING?\n         BNO   PROC0120             NO\n         LA    R4,1(R4)             PLUS 1 ECB\n         B     PROC0120             NEXT SESSION\nPROC0070 DS    0H\n         ICM   R6,15,SESSCONV       FIRST CONVERSATION BLOCK\n         USING CONVBLOK,R6          DEFINE BASE\n         BZ    PROC0120             NO CONVERSATIONS ACTIVE\nPROC0080 DS    0H\n         CLI   CONVFUNC,$CONVFB     BSAM FUNCTION?\n         BE    PROC0090             YES\n         TM    CONVSTAT,$CONVPND    ANYTHING PENDING?\n         BNO   PROC0000             NO.. MUST BE COMPLETE\n         B     PROC0100             NO ECB FOR VTAM FUNCTIONS\nPROC0090 DS    0H\n         L     R1,CONVDECB          ECB ADDRESS\n         TM    0(R1),X'40'          I/O COMPLETE?\n         BO    PROC0000             YES\n         LA    R4,1(R4)             PLUS 1 ECB\nPROC0100 DS    0H\n         ICM   R6,15,CONVNEXT       NEXT CONVERSATION'S ADDRESS\n         BNZ   PROC0080             CHECK THIS CONVERSATION\nPROC0120 DS    0H\n         ICM   R7,15,SESSNEXT       NEXT SESSION\n         BNZ   PROC0060             LOOP\n* ------------------------------------------------------------------- *\n*        At the present time there is no work to do.                  *\n*        Build a ECB list and issue a wait.                           *\n* ------------------------------------------------------------------- *\nPROC0130 DS    0H\n         LA    R4,3(R4)             PLUS 3 FOR TIMER, CONSOLE, AND ATTN\n         ITRACE ID=WAITECBS,        NUMBER OF ECBS IN WAIT LIST        +\n               RDATA1=R4\n         SLL   R4,2                 MULTIPLY BY 4\n         GETMAIN RU,LV=(R4)         ACQUIRE WAIT LIST STORAGE\n         LR    R2,R1                COPY ADDRESS\n         ICM   R14,15,COMMCECB      CONSOLE ECB\n         BZ    PROC013A             NOT PRESENT\n         TM    0(R14),X'40'         POSTED NOW?\n         BO    PROC0240             YES..\n         ST    R14,0(R1)            SET ECB ADDRESS\n         LA    R1,4(R1)             NEXT ECB ADDRESS\nPROC013A DS    0H\n         LA    R14,COMMTECB         ECB POSTED BY TIMER EXIT\n         TM    0(R14),X'40'         POSTED NOW?\n         BO    PROC0240             YES\n         ST    R14,0(R1)            SET ECB ADDRESS\n         LA    R1,4(R1)             NEXT ECB ADDRESS\n         LA    R14,COMMVECB         ECB POSTED BY ATTN EXIT\n         TM    0(R14),X'40'         POSTED NOW?\n         BO    PROC0240             YES\n         ST    R14,0(R1)            SET ECB ADDRESS\n         LA    R1,4(R1)             NEXT ECB ADDRESS\n         OC    DSSREQ,DSSREQ        DF/DSS REQUEST PRESENT?\n         BZ    PROC0140             NO DF/DSS REQUEST IN PROGRESS\n         LA    R14,DSSECB           ECB'S ADDRESS\n         TM    0(R14),X'40'         POSTED NOW?\n         BO    PROC0240             YES\n         ST    R14,0(R1)            SET ADDRESS IN WAIT LIST\n         LA    R1,4(R1)             NEXT ECB ADDRESS\nPROC0140 DS    0H\n         OC    COPYREQ,COPYREQ      IEBCOPY REQUEST PRESENT?\n         BZ    PROC0150             NO IEBCOPY REQUEST IN PROGRESS\n         LA    R14,COPYECB          ECB'S ADDRESS\n         TM    0(R14),X'40'         POSTED NOW?\n         BO    PROC0240             YES\n         ST    R14,0(R1)            SET ADDRESS IN WAIT LIST\n         LA    R1,4(R1)             NEXT ECB ADDRESS\nPROC0150 DS    0H\n         ICM   R7,15,COMMSESS       FIRST SESSION BLOCK\n         BZ    PROC0230             NO SESSIONS\nPROC0160 DS    0H\n         CLI   SESSSTAT,$SESSRDY    SESSION IN READY STATUS?\n         BNE   PROC0220             NO\nPROC0170 DS    0H\n         ICM   R6,15,SESSCONV       FIRST CONVERSATION BLOCK\n         BZ    PROC0220             NO CONVERSATIONS\nPROC0180 DS    0H\n         CLI   CONVFUNC,$CONVFB     BSAM I/O?\n         BE    PROC0190             YES\n         TM    CONVSTAT,$CONVPND    ANYTHING PENDING?\n         BNO   PROC0240             NO\n         B     PROC0210             NO ECB FOR VTAM FUNCTIONS\nPROC0190 DS    0H\n         L     R14,CONVDECB         BSAM ECB'S ADDRESS\n         TM    0(R14),X'40'         POSTED?\n         BO    PROC0240             YES.. BYPASS WAIT\n         ST    R14,0(R1)            SET ADDRESS IN WAIT LIST\n         LA    R1,4(R1)             NEXT ECB ADDRESS\nPROC0210 DS    0H\n         ICM   R6,15,CONVNEXT       NEXT CONVERSATION\n         BNZ   PROC0180             CHECK THIS CONVERSATION\nPROC0220 DS    0H\n         ICM   R7,15,SESSNEXT       NEXT SESSION\n         BNZ   PROC0160             LOOP\nPROC0230 DS    0H\n         SH    R1,H4                BACK-UP TO LAST ECB\n         OI    0(R1),X'80'          SET END-OF-LIST\n         TM    COMMVECB,X'40'       POSTED NOW?\n         BO    PROC0240             YES.. BYPASS WAIT\n         XC    COMMVECB,COMMVECB    RESET ATTN EXIT ECB\n         L     R3,ATIMER            TIMER EXIT ENTRY POINT\n         XC    COMMTECB,COMMTECB    CLEAR ECB\n         STIMER REAL,               SET TIMER                          +\n               (R3),                .. EXIT'S ADDRESS                  +\n               BINTVL=WAITTIME      .. TIME INTERVAL\n         ITRACE ID=WAIT,            WAITING FOR WORK                   +\n               RDATA1=R2\n         WAIT  1,ECBLIST=(R2)       WAIT FOR AN ECB TO BE POSTED\n         ITRACE ID=WOKEUP\n         TTIMER CANCEL              CANCEL TIMER EXIT IF PENDING\nPROC0240 DS    0H\n         ITRACE ID=BYPWAIT,         BYPASSING WAIT                     +\n               RDATA1=R14           ADDRESS OF ECB THAT WAS POSTED\nPROC0250 DS    0H\n         XC    COMMTECB,COMMTECB    CLEAR ECB\n         XC    COMMVECB,COMMVECB    CLEAR ECB\n         FREEMAIN RU,A=(R2),LV=(R4) FREEMAIN ECB LIST\n         B     PROC0000             RE-DRIVE MAIN LOOP\n* ------------------------------------------------------------------- *\n*        ERROR ROUTINES                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVC   PRTMSGID(MSG10L),MSG10       ERRORS IN PARAMETERS\n         BAL   R8,PRT0000           PRINT MESSAGE\n         B     EXIT0000             AND EXIT\nERR0030  DS    0H\n         ITRACE ID=ATCHFAIL         SUBTASK ATTACH FAILED\n         STH   R15,DXDRC            SAVE RETURN CODE\n         MVC   PRTMSGID(MSG11L),MSG11\n         MVC   PRTMSGID+(MSG11T-MSG11)(L'MSG11T),DXDTASK\n         UNPK  PRTMSGID+(MSG11R-MSG11)(5),DXDRC(3)\n         MVZ   PRTMSGID+(MSG11R-MSG11)(L'MSG11R),HEX0000\n         TR    PRTMSGID+(MSG11R-MSG11)(L'MSG11R),HEXCHAR\n         MVI   PRTMSGID+(MSG11R-MSG11)+4,C' '\n         BAL   R8,PRT0000           PRINT MESSAGE\n         ABEND $U0006,DUMP,,USER    TIME TO FIX FX\nERR0040  DS    0H\n         ITRACE ID=DATCHFL          DF/DSS SUBTASK DETACH FAILED\n         STH   R15,DXDRC            SAVE RETURN CODE\n         MVC   PRTMSGID(MSG12L),MSG12\n         MVC   PRTMSGID+(MSG12T-MSG12)(L'MSG12T),DXDTASK\n         UNPK  PRTMSGID+(MSG12R-MSG12)(5),DXDRC(3)\n         MVZ   PRTMSGID+(MSG12R-MSG12)(L'MSG12R),HEX0000\n         TR    PRTMSGID+(MSG12R-MSG12)(L'MSG12R),HEXCHAR\n         MVI   PRTMSGID+(MSG12R-MSG12)+4,C' '\n         BAL   R8,PRT0000           PRINT MESSAGE\n         ABEND $U0007,DUMP,,USER    TIME TO FIX FX\nERR0050  DS    0H\n         ITRACE ID=VTAMERR          VTAM ERROR..\n         ABEND $U0031,DUMP,,USER    ABEND\nERR0060  DS    0H\n         ITRACE ID=MINITFL          MASTER FILE INITIALIZATION FAILED\n         MVC   PRTMSGID(MSG13L),MSG13\n         BAL   R8,PRT0000           PRINT MESSAGE\n         ABEND $U0025,DUMP,,USER\nPRT0000  DS    0H\n         ITRACE ID=PRINT\n         FXCALL PRTQ,PRINT          ADD REQUEST TO PRINT QUEUE\n         BR    R8                   COMPLETE\nEXIT0000 DS    0H\n         ITRACE ID=STARTEOJ\n         MVC   PRTMSGID(MSG90L),MSG90\n         BAL   R8,PRT0000           PRINT MESSAGE\n         OI    COMMEOJ,$EOJ1+$EOJ2  SET SHUTDOWN PHASE 1 AND 2\n         TM    COMMFLAG,$COMMDSS    DF/DSS SUBTASK ACTIVE?\n         BNO   EXIT0020             NO\n         OC    DSSTERM,DSSTERM      HAS DF/DSS SUBTASK TERMINATED?\n         BNZ   EXIT0010             YES\n         LA    R1,DSSWORK           DF/DSS SUBTASK ECB ADDRESS\n         POST  (1)                  WAKE SUBTASK FOR TERMINATION\n         LA    R1,DSSTERM           ECB POSTED WHEN SUBTASK COMPLETES\n         WAIT  1,ECB=(1)            WAIT FOR SUBTASK TO TERMINATE\nEXIT0010 DS    0H\n         MVC   PRTMSGID(MSG91L),MSG91\n         UNPK  PRTMSGID+(MSG91E-MSG91)(9),DSSTERM(5)\n         MVZ   PRTMSGID+(MSG91E-MSG91)(8),HEX0000\n         TR    PRTMSGID+(MSG91E-MSG91)(8),HEXCHAR\n         MVI   PRTMSGID+(MSG91E-MSG91)+8,C' '\n         BAL   R8,PRT0000           PRINT SUBTASK TERMINATION MSG\n         MVC   DXDTASK,DFDSS        TASK BEING DETACHED\n         LA    R1,COMMDSS           DF/DSS SUBTASK TCB ADDRESS\n         DETACH (1)                 DETACH DF/DSS SUBTASK\n         LTR   R15,R15              DETACH SUCCESSFUL?\n         BNZ   ERR0040              NO\n         MVC   PRTMSGID(MSG92L),MSG92\n         BAL   R8,PRT0000           PRINT MESSAGE\nEXIT0020 DS    0H\n         TM    COMMFLAG,$COMMCPY    IEBCOPY SUBTASK ACTIVE?\n         BNO   EXIT0050             NO\n         OC    COPYTERM,COPYTERM    HAS IEBCOPY SUBTASK TERMINATED?\n         BNZ   EXIT0040             YES\n         LA    R1,COPYWORK          IEBCOPY SUBTASK ECB ADDRESS\n         POST  (1)                  WAKE IEBCOPY FOR TERMINATION\n         LA    R1,COPYTERM          ECB POSTED WHEN SUBTASK COMPLETES\n         WAIT  1,ECB=(1)            WAIT FOR SUBTASK TO TERMINATE\nEXIT0040 DS    0H\n         MVC   PRTMSGID(MSG93L),MSG93\n         UNPK  PRTMSGID+(MSG93E-MSG93)(9),COPYTERM(5)\n         MVZ   PRTMSGID+(MSG93E-MSG93)(8),HEX0000\n         TR    PRTMSGID+(MSG93E-MSG93)(8),HEXCHAR\n         MVI   PRTMSGID+(MSG93E-MSG93)+8,C' '\n         BAL   R8,PRT0000           PRINT SUBTASK TERMINATION MSG\n         MVC   DXDTASK,IEBCOPY      TASK BEING DETACHED\n         LA    R1,COMMCOPY          IEBCOPY SUBTASK TCB ADDRESS\n         DETACH (1)                 DETACH IEBCOPY SUBTASK\n         LTR   R15,R15              DETACH SUCCESSFUL?\n         BNZ   ERR0040              NO\n         MVC   PRTMSGID(MSG94L),MSG94\n         BAL   R8,PRT0000           PRINT MESSAGE\nEXIT0050 DS    0H\n         TM    COMMFLAG,$ABEND      ABEND REQUESTED?\n         BNO   EXIT0060             NO\n         ITRACE ID=ABEND\n         ABEND 1,DUMP,,USER         ABEND\nEXIT0060 DS    0H\n         ICM   R1,15,COMMRSTR       FIRST RESTORE BLOCK\n         USING RSTRBLOK,R1          DEFINE BASE\n         BZ    EXIT0080             NO RESTORE BLOCKS\nEXIT0070 DS    0H\n         L     R2,RSTRNEXT          NEXT RESTORE BLOCK\n         ITRACE ID=FREERSTR,RDATA1=R1  FREEING A RESTORE BLOCK\n         FREEMAIN RU,A=(1),LV=RSTRL FREE RESTORE BLOCK\n         LTR   R1,R2                COPY NEXT BLOCK'S ADDRESS\n         BNZ   EXIT0070             FREE THIS BLOCK\nEXIT0080 DS    0H\n         ICM   R1,15,COMMSTGE       FIRST STAGING VOLUME BLOCK\n         USING STGEDEV,R1           DEFINE BASE\n         BZ    EXIT0100             NO STAGING VOLUME BLOCKS\nEXIT0090 DS    0H\n         L     R2,STGENEXT          NEXT STAGING VOLUME BLOCK\n         ITRACE ID=FREESTGE,RDATA1=R1\n         FREEMAIN RU,A=(1),LV=STGEL\n         LTR   R1,R2                COPY NEXT BLOCK'S ADDRESS\n         BNZ   EXIT0090             FREE THIS BLOCK\nEXIT0100 DS    0H\n         OI    COMMEOJ,$EOJ3        SIGNAL SHUTDOWN PHASE 3\n         ITRACE ID=MSTRCLS          CLOSING MASTER FILE\n         MVC   PRTMSGID(MSG95L),MSG95\n         BAL   R8,PRT0000           PRINT MESSAGE\n         FXCALL FXSMSTR,CLOSE       CLOSE MASTER FILE\n         DELETE EP=FXSMSTR          DELETE MASTER FILE I/O MODULE\n         ITRACE ID=MSTRCLSD         MASTER FILE IS CLOSED\n         MVC   PRTMSGID(MSG96L),MSG96\n         BAL   R8,PRT0000           PRINT MESSAGE\n         MVC   PRTMSGID(MSG99L),MSG99\n         BAL   R8,PRT0000           PRINT MESSAGE\n         L     R15,ALOSS            LOSS CLEAN-UP ENTRY POINT\n         BALR  R14,R15              ALLOW CLEAN-UP\n         L     R15,ARECV            FILE RECEIVE ENTRY POINT\n         BALR  R14,R15              ALLOW CLEAN-UP\n         L     R15,ASEND            FILE SEND ENTRY POINT\n         BALR  R14,R15              ALLOW CLEAN-UP\n         L     R15,AVTAM            VTAM FUNCTION ENTRY POINT\n         BALR  R14,R15              ALLOW VTAM CLEAN-UP\n         L     R15,ASESS            SESSION BLOCK ADD/DELETE\n         BALR  R14,R15              DELETE ALL SESSION BLOCKS\n         L     R15,ASTGE            STAGE/DE-STAGE ENTRY POINT\n         BALR  R14,R15              ALLOW FXSSTGE TO CLEAN-UP\n         L     R15,AVTOC            VTOC FUNCTION ENTRY POINT\n         BALR  R14,R15              ALLOW CLEAN-UP\n         OI    COMMEOJ,$EOJ4        SIGNAL SHUDOWN PHASE 4\n         ITRACE ID=PRTEOJ           SHUTTING DOWN PRINT\n         POST  PRTWORK              SHUTDOWN PRINT TASK\n         WAIT  1,ECB=PRTTERM        WAIT FOR PRINT SUBTASK TERMINATION\n         LA    R1,COMMPRT           PRINT SUBTASK TCB ADDRESS\n         ITRACE ID=DTCHPRT,         DETACHING PRINT SUBTASK            +\n               RDATA1=R1            .. PRINT SUBTASK'S TCB ADDRESS\n         MVC   DXDTASK,PRINT        TASK BEING DETACHED\n         DETACH (1)                 DETACH PRINT SUBTASK\n         TM    XTRFLAG,$XTR         EXTERNAL TRACE ACTIVE?\n         BNO   EXIT0120             NO\n         OC    XTRTERM,XTRTERM      HAS EXTERNAL TRACE ENDED?\n         BNZ   EXIT0110             YES\n         OI    XTRFLAG,$XTREOJ      SET EOJ FLAG\n         POST  XTRWORK              WAKE-UP EXTERNAL TRACE\n         WAIT  1,ECB=XTRTERM        WAIT FOR EXTERNAL TRACE TERMINATION\nEXIT0110 DS    0H\n         LA    R1,COMMXTR           EXTERNAL TRACE TCB ADDRESS\n         ITRACE ID=DTCHXTR,         DETACHING EXTERNAL TRACE           +\n               RDATA1=R1            .. EXTERNAL TRACE'S TCB ADDRESS\n         MVC   DXDTASK,XTR          TASK BEING DETACHED\n         DETACH (1)                 DETACH EXTERNAL TRACE SUBTASK\nEXIT0120 DS    0H\n         L     R0,TRSIZE            TRACE TABLE SIZE\n         L     R1,TRADDR            TRACE TABLE STORAGE ADDRESS\n         FREEMAIN RU,A=(1),LV=(0)   FREEMAIN TRACE TABLE STORAGE\n         L     R2,COMMDXDA          SAVE WORK AREA STORAGE ADDRESS\n         DELETE EP=FXSCOMM          DELETE COMMON MODULE\n         DELETE EP=FX24             DELETE \"BELOW THE LINE\" MODULE\n         L     R0,DXDSIZE           WORK AREA STORAGE SIZE\n         L     R13,4(R13)           RESTORE CALLER'S SAVE AREA ADDRESS\n         FREEMAIN RU,A=(2),LV=(0)   FREEMAIN WORK AREA STORAGE\n         LM    R14,R12,12(R13)      RESTORE CALLER'S REGISTERS\n         SR    R15,R15              CLEAR REGISTER\n         BR    R14                  EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDSMAIN)          DISPLACEMENT TO WORK AREA\nDXDSIZE  CXD                        WORK AREA TOTAL SIZE\nVATTN    DC    V(FXSATTN)           VTAM ATTENTION EXIT ENTRY POINT\nVCONS    DC    V(FXSCONS)           CONSOLE COMMUNICATION\nVCONV    DC    V(FXSCONV)           CONVBLOK ADD/DELETE\nVDAIR    DC    V(FXSDAIR)           DAIR MODULE ENTRY POINT\nVLERAD   DC    V(FXLERAD)           VTAM LERAD EXIT ENTRY POINT\nVLOSS    DC    V(FXSLOSS)           VTAM LOSS CLEAN-UP\nVPRTQ    DC    V(FXSPRTQ)           PRINTER MODULE ENTRY POINT\nVRECV    DC    V(FXSRECV)           FILE RECEIVE ENTRY POINT\nVRPLX    DC    V(FXSRPLX)           RPL EXIT ENTRY POINT\nVSEND    DC    V(FXSSEND)           FILE SEND ENTRY POINT\nVSESS    DC    V(FXSSESS)           SESSION BLOCK ADD/DELETE\nVSTGE    DC    V(FXSSTGE)           STAGE/DE-STAGE MODULE ENTRY POINT\nVTIMER   DC    V(FXSTIMER)          TIMER EXIT ENTRY POINT\nVUID     DC    V(FXSUID)            USER IDENTIFICATION\nVREQE    DC    V(FXSREQE)           TRANSMISSSION REQUEST ENTRY\nVREQI    DC    V(FXSREQI)           TRANSMISSION REQUEST INQUIRY\nVSHUT    DC    V(FXSSHUT)           STARTED TASK SHUTDOWN\nVVTAM    DC    V(FXSVTAM)           VTAM MODULE ENTRY POINT\nVVSUB    DC    V(FXSVSUB)           VTAM SUB-FUNCTION MODULE\nVVTOC    DC    V(FXSVTOC)           VTOC MODULE ENTRY POINT\nWAITTIME DC    F'1500'              WAIT TIME (15 SECONDS)\nH4       DC    H'4'\nHEX0000  DC    8X'00'\nHEXCHAR  DC    C'0123456789ABCDEF'\nDDTBLE   DS    0C\n         DC    CL8'FXIN',AL1($DDREQ),X'80'\n         DC    CL8'FXPRT',AL1($DDREQ),X'40'\n         DC    CL8'MASTER',AL1($DDREQ),X'20'\n         DC    CL8'IDCI',AL1($DDREQ),X'10'\n         DC    CL8'IDCP',AL1($DDREQ),X'08'\n         DC    CL8'FXSXTR',AL1(0),X'04'\n         DC    X'FF'\nDFDSS    DC    CL8'DF/DSS'\nIEBCOPY  DC    CL8'IEBCOPY'\nPRINT    DC    CL8'PRINT'\nXTR      DC    CL8'XTR'\nWTO01    WTO   'FXSMAIN01E * FXPRT DD STATEMENT IS NOT PRESENT',MF=L\nWTO01L   EQU   *-WTO01\nMSG02    DS    0C\n         DC    CL11'FXSMAIN02I'\n         DC    C'PRINT SUBTASK ATTACHED'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'FXSMAIN03I'\n         DC    C'INITIALIZATION STARTING'\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    CL11'FXSMAIN04E'\n         DC    C'REQUIRED DD '\nMSG04D   DC    CL8' '\n         DC    C' IS NOT PRESENT'\nMSG04L   EQU   *-MSG04\nMSG05    DS    0C\n         DC    CL11'FXSMAIN05E'\n         DC    C'ADD REQUIRED DD(S) TO YOUR JCL AND RE-SUBMIT'\nMSG05L   EQU   *-MSG05\nMSG06    DS    0C\n         DC    CL11'FXSMAIN06I'\n         DC    C'EXTERNAL TRACE SUBTASK ATTACHED'\nMSG06L   EQU   *-MSG06\nMSG07    DS    0C\n         DC    CL11'FXSMAIN07I'\n         DC    C'MASTER FILE INITIALIZATION COMPLETE'\nMSG07L   EQU   *-MSG07\nMSG08    DS    0C\n         DC    CL11'FXSMAIN08I'\n         DC    C'DF/DSS SUBTASK ATTACHED'\nMSG08L   EQU   *-MSG08\nMSG09    DS    0C\n         DC    CL11'FXSMAIN09I'\n         DC    C'IEBCOPY SUBTASK ATTACHED'\nMSG09L   EQU   *-MSG09\nMSG10    DS    0C\n         DC    CL11'FXSMAIN10E'\n         DC    C'ERROR(S) DETECTED IN CONTROL STATEMENTS, EXECUTION ABO+\n               RTED'\nMSG10L   EQU   *-MSG10\nMSG11    DS    0C\n         DC    CL11'FXSMAIN11E'\nMSG11T   DC    CL8' '\n         DC    C' SUBTASK ATTACH FAILED, RC='\nMSG11R   DC    CL4' '\n         DC    C' EXECUTION ABORTED'\nMSG11L   EQU   *-MSG11\nMSG12    DS    0C\n         DC    CL11'FXSMAIN12E'\nMSG12T   DC    CL8' '\n         DC    C' SUBTASK DETACH FAILED, RC='\nMSG12R   DC    CL4' '\n         DC    C' '\nMSG12L   EQU   *-MSG12\nMSG13    DS    0C\n         DC    CL11'FXSMAIN13E'\n         DC    C'MASTER FILE INITIALIZATION FAILED'\nMSG13L   EQU   *-MSG13\nWTO14    WTO   'FXSMAIN14I FXSTC INITIALIZATION COMPLETE',MF=L\nWTO14L   EQU   *-WTO14\nMSG90    DS    0C\n         DC    CL11'FXSMAIN90I'\n         DC    C'TERMINATION BEGINNING'\nMSG90L   EQU   *-MSG90\nMSG91    DS    0C\n         DC    CL11'FXSMAIN91I'\n         DC    C'DF/DSS SUBTASK TERMINATED, ECB ='\nMSG91E   DC    CL8' '\n         DC    C' '\nMSG91L   EQU   *-MSG91\nMSG92    DS    0C\n         DC    CL11'FXSMAIN92I'\n         DC    C'DF/DSS SUBTASK DETACHED'\nMSG92L   EQU   *-MSG92\nMSG93    DS    0C\n         DC    CL11'FXSMAIN93I'\n         DC    C'IEBCOPY SUBTASK TERMINATED, ECB ='\nMSG93E   DC    CL8' '\n         DC    C' '\nMSG93L   EQU   *-MSG93\nMSG94    DS    0C\n         DC    CL11'FXSMAIN94I'\n         DC    C'IEBCOPY SUBTASK DETACHED'\nMSG94L   EQU   *-MSG94\nMSG95    DS    0C\n         DC    CL11'FXSMAIN95I'\n         DC    C'STARTING MASTER FILE CLOSE'\nMSG95L   EQU   *-MSG95\nMSG96    DS    0C\n         DC    CL11'FXSMAIN96I'\n         DC    C'MASTER FILE CLOSED'\nMSG96L   EQU   *-MSG96\nMSG99    DS    0C\n         DC    CL11'FXSMAIN99I'\n         DC    C'TERMINATION COMPLETE'\nMSG99L   EQU   *-MSG99\nATTCHI   ATTACH EP=FXDSS,           ATTACH LIST FORM                   +\n               ECB=*,               .. TERMINATION ECB'S ADDRESS       +\n               PURGE=QUIESCE,       .. FINISH UP I/O IN PROGRESS       +\n               SF=L                 .. LIST FORM\nATTCHL   EQU   *-ATTCHI\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREA                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSMAIN DSECT\nDXDID    DS    CL8                  WORK AREA OWNER\nDXDSAVE  DS    18F                  REGISTER SAVE AREA\nDXDAPARM DS    A                    ATTACH PARM\nDXDATTCH DS    (ATTCHL)X            RESERVE ROOM FOR ATTACH LIST FORM\nDXDRC    DS    H                    RETURN CODE FROM SYSTEM MACRO\nDXDDD    DS    X                    DD'S PRESENT\nDXDTASK  DS    CL8                  SUBTASK BEING ATTACH/DETACHED\n         PRTBLOK  DSECT=NO\n         VTOCREQ  DSECT=NO\n         MSTRREQ  DSECT=NO\n* ------------------------------------------------------------------- *\n*        MASTER FILE RECORD FORMAT                                    *\n* ------------------------------------------------------------------- *\n         REQBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*        RESTORE BLOCK                                                *\n* ------------------------------------------------------------------- *\n         RSTRBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*        STAGING DEVICE BLOCK                                         *\n* ------------------------------------------------------------------- *\n         STGEDEV  DSECT=YES\n* ------------------------------------------------------------------- *\n*        VTAM SESSION BLOCK                                           *\n* ------------------------------------------------------------------- *\n         SESSBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*        VTAM CONVERSATION BLOCK                                      *\n* ------------------------------------------------------------------- *\n         CONVBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*        COMMON MODULE                                                *\n* ------------------------------------------------------------------- *\n         FXSCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*        DD TABLE DSECT                                               *\n* ------------------------------------------------------------------- *\nDDDSECT  DSECT\nDDNAME   DS    CL8\nDDFLAG   DS    X\n$DDREQ   EQU   X'80'\nDDID     DS    X\nDDL      EQU   *-DDDSECT\n* ------------------------------------------------------------------- *\n*        PSA, TCB, TIOT                                               *\n* ------------------------------------------------------------------- *\n         IHAPSA LIST=NO\n         IKJTCB LIST=NO\n         IEFTIOT1\n         COPY  REGEQU\n         ABCODES\n         END   FXSMAIN\n./ ADD NAME=FXSMINIT 0100-99056-99056-1500-00394-00394-00000-FX-REL1\n\n         TITLE 'FXSMINIT  MASTER FILE INITIALIZATION'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSMINIT                                              *\n*                                                                     *\n*   At start-up time FX must determine if \"in progress\" work needs    *\n*   to be backed-out.  For example a file may have been in the        *\n*   DUMP state (DF/DSS or IEBCOPY was dumping the data to a staging   *\n*   dataset) at the time FX or the system failed.                     *\n*                                                                     *\n*   The master file status will be reset to the state the request     *\n*   was in just before the interrupted activity began.                *\n*                                                                     *\n*   For an interrupted dump, the stage/sysin/sysprint data sets are   *\n*   scratched and the master file status is reset to \"initial\".       *\n*                                                                     *\n*   For an interrupted RESTORE, the master file status is reset to    *\n*   \"received\".                                                       *\n*                                                                     *\n*   For an interrupted SEND, the status for the node is reset, and    *\n*   the transmission date and time are zeroed.                        *\n*                                                                     *\n*   For an interrupted RECEIVE, the stage data set is scratched, and  *\n*   the master file record release (status is set to \"free\").         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXSMINIT CSECT\nFXSMINIT AMODE 31\nFXSMINIT RMODE ANY\n         USING FXSMINIT,R12          DEFINE BASE\n         USING FXSCOMM,R11           DEFINE BASE\n         USING WORKAREA,R10          DEFINE BASE\n         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS\n         LR    R12,R15               SET BASE\n         B     INIT0000\n         DC    ((PFXMODNM-MODPRFX)-(*-FXSMINIT))X'00'\n         DC    CL8'FXSMINIT'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nINIT0000 DS    0H\n         GETMAIN RU,                 ACQUIRE STORAGE FOR WORK AREA     +\n               LV=WORKL,             .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R10,R1                COPY WORK AREA ADDRESS\n         LA    R1,WORKSAVE           SAVE AREA ADDRESS IN WORK AREA\n         ST    R1,8(R13)             CHAIN TO PREVIOUS SAVE AREA\n         ST    R13,4(R1)             CHAIN PREVIOUS TO OURS\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         ITRACE ID=INIT\n         MVI   PRTCC,C' '            INITIALIZE PRINT\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         LA    R7,MSTRRECD           I/O AREA ADDRESS\n         USING REQBLOK,R7            DEFINE REQBLOK BASE\n         LA    R1,1                  INITIAL RECORD NUMBER\nINIT0010 DS    0H\n         ITRACE ID=READ,                                               +\n               RDATA1=R1\n         STCM  R1,3,MSTRREC#         SET RECORD NUMBER WANTED\n         MVI   MSTRCMD,$MSTRRD       SET MASTER FILE I/O COMMAND\n         BAL   R9,MSTR0000           REQUEST RECORD\n         ITRACE ID=MSTRRECD,         TRACE ALL MASTER RECORDS EXAMINED +\n               DATA1=REQREC#,        .. RECORD NUMBER                  +\n               DATA2=REQSTAT         .. STATUS\n         NI    WORKFLAG,255-$UPDATE  RESET UPDATED FLAG\n         CLI   REQSTAT,0             UNUSED RECORD?\n         BE    EXIT0000              YES, LOOK NO FURTHER\n         CLI   REQSTAT,$REQDUMP      DATASET BEING DUMPED?\n         BE    DUMP0000              YES\n         CLI   REQSTAT,$REQRSTR      DATASET BEING RESTORED?\n         BE    RSTR0000              YES\n         CLI   REQSTAT,$REQRECV      BEING RECEIVED?\n         BE    RECV0000              YES\n         CLI   REQSTAT,$REQXRDY      READY FOR TRANSMISSION?\n         BNE   INIT0050              NO.. NEXT RECORD\n         CLC   REQTNODE,COMMAPLN     REQUEST FROM THIS NODE?\n         BNE   INIT0040              NO, WE'RE RECEIVE END\n         SR    R6,R6                 CLEAR REGISTER\n         ICM   R6,3,REQNDE#          NUMBER OF NODES IN TRANSMIT LIST\n         ITRACE ID=NDESTAT,          CHECKING NODE'S STATUS            +\n               RDATA1=R6\n         LA    R5,REQNDENM           FIRST NODE IN TRANSMIT LIST\n         USING REQNDENM,R5           DEFINE BASE\nINIT0020 DS    0H\n         ITRACE ID=CHECKNDE,         CHECKING NODES STATUS             +\n               DATA1=REQNDENM,       .. NODE NAME                      +\n               DATA2=REQNDEST        .. STATUS\n         CLI   REQNDEST,$REQNDEE     ERROR DURING TRANSMISSION?\n         BE    INIT0030              YES.. DON'T BOTHER IT\n         CLI   REQNDEST,$REQNDET     TRANSMISSION STARTED?\n         BNE   INIT0030              NO\n* ------------------------------------------------------------------- *\n*        Interrupted during TRANSMIT                                  *\n* ------------------------------------------------------------------- *\n         OI    WORKFLAG,$UPDATE      RECORD UPDATED\n         MVI   REQNDEST,$REQNDEI     RESET TO INITIAL STATUS\n         ZAP   REQNDETD,P0           RESET TRANSMISSION DATE\n         XC    REQNDETT,REQNDETT     RESET TRANSMISSION TIME\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,COMMDWRD           CONVERT RECORD NUMBER TO DECIMAL\n         MVC   PRTMSGID(MSG01L),MSG01\n         MVC   PRTMSGID+(MSG01NDE-MSG01)(L'MSG01NDE),REQENODE\n         ED    PRTMSGID+(MSG01NBR-MSG01)(L'MSG01NBR),COMMDWRD+4\n         BAL   R9,PRT0000            PRINT MESSAGE\n         MVC   PRTMSGID(MSG02L),MSG02 SET MESSAGE\n         BAL   R9,PRT0000            PRINT MESSAGE\nINIT0030 DS    0H\n         LA    R5,REQNDEL(R5)        NEXT NODE\n         BCT   R6,INIT0020           CHECK ALL DESTINATIONS\n         DROP  R5\nINIT0040 DS    0H\n         TM    WORKFLAG,$UPDATE      RECORD UPDATED?\n         BNO   INIT0050              NO\n         ITRACE ID=UPDATE            UPDATING MASTER FILE\n         MVI   MSTRCMD,$MSTRWRT      SET MASTER FILE I/O COMMAND\n         BAL   R9,MSTR0000           UPDATE RECORD\nINIT0050 DS    0H\n         ITRACE ID=TESTNBR\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,MSTRREC#         RECORD NUMBER\n         LA    R1,1(R1)              NEXT RECORD NUMBER\n         C     R1,COMMRECS           AT END OF DATASET?\n         BNE   INIT0010              NO\n         MVC   PRTMSGID(MSG03L),MSG03 SET MESSAGE\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     EXIT0000              AND EXIT\n* ------------------------------------------------------------------- *\n*        Interrupted during a DUMP operation                          *\n* ------------------------------------------------------------------- *\nDUMP0000 DS    0H\n         ITRACE ID=DUMP              DUMP PROCESS WAS INTERRUPTED\n         OI    WORKFLAG,$UPDATE      RECORD UPDATED\n         MVC   PRTMSGID(MSG04L),MSG04\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,COMMDWRD           CONVERT RECORD NUMBER TO DECIMAL\n         MVC   PRTMSGID+(MSG04NDE-MSG04)(L'MSG04NDE),REQENODE\n         ED    PRTMSGID+(MSG04NBR-MSG04)(L'MSG04NBR),COMMDWRD+4\n         BAL   R9,PRT0000            PRINT MESSAGE\n         BAL   R8,DEL0000            DELETE STAGE, SYSIN, AND SYSPRINT\n         MVI   REQSTAT,$REQINIT      INITIAL STATUS\n         OI    WORKFLAG,$UPDATE      SET UPDATE FLAG\n         B     INIT0040              UPDATE THE RECORD\n* ------------------------------------------------------------------- *\n*        Interrupted during a RESTORE operation                       *\n* ------------------------------------------------------------------- *\nRSTR0000 DS    0H\n         ITRACE ID=RESTORE           RESTORE PROCESS WAS INTERRUPTED\n         OI    WORKFLAG,$UPDATE      RECORD UPDATED\n         MVC   PRTMSGID(MSG05L),MSG05\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,COMMDWRD           CONVERT RECORD NUMBER TO DECIMAL\n         MVC   PRTMSGID+(MSG05NDE-MSG05)(L'MSG05NDE),REQENODE\n         ED    PRTMSGID+(MSG05NBR-MSG05)(L'MSG05NBR),COMMDWRD+4\n         BAL   R9,PRT0000            PRINT MESSAGE\n         BAL   R8,DEL0000            DELETE SYSIN, AND SYSPRINT\n         MVI   REQSTAT,$REQRCVD      RESET TO 'RECEIVED' STATUS\n         OI    WORKFLAG,$UPDATE      SET UPDATE FLAG\n         B     INIT0040              UPDATE THE RECORD\n* ------------------------------------------------------------------- *\n*        DATASET BEING RECEIVED WAS INTERRUPTED                       *\n* ------------------------------------------------------------------- *\nRECV0000 DS    0H\n         ITRACE ID=RECV              DATASET RECEIVE WAS INTERRUPTED\n         OI    WORKFLAG,$UPDATE      RECORD UPDATED\n         MVC   PRTMSGID(MSG06L),MSG06\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,COMMDWRD           CONVERT RECORD NUMBER TO DECIMAL\n         MVC   PRTMSGID+(MSG06NDE-MSG06)(L'MSG06NDE),REQENODE\n         ED    PRTMSGID+(MSG06NBR-MSG06)(L'MSG06NBR),COMMDWRD+4\n         BAL   R9,PRT0000            PRINT MESSAGE\n         LA    R5,REQNDENM           NODE NAME\n         USING REQNDENM,R5           DEFINE BASE\nRECV0010 DS    0H\n         CLC   COMMAPLN,REQNDENM     NODE FOUND?\n         BE    RECV0020              YES\n         LA    R5,REQNDEL(R5)        NEXT NODE\n         B     RECV0010              LOOP\nRECV0020 DS    0H\n         OC    REQNDECR,REQNDECR     CHECKPOINT DATA PRESENT?\n         BNZ   INIT0040              YES.. KEEP RECORD FOR RESTART\n         BAL   R8,DEL0000            DELETE STAGE, SYSIN, AND SYSPRINT\n         MINIT COMMBLKS,P0,$REQFREE,R14 INITIALIZE ALL FIELDS\n         OI    WORKFLAG,$UPDATE      SET UPDATE FLAG\n         B     INIT0040              UPDATE THE RECORD\n* ------------------------------------------------------------------- *\n*        DELETE STAGE, SYSIN, AND SYSPRINT DATASETS                   *\n* ------------------------------------------------------------------- *\nDEL0000  DS    0H\n         MVI   DAIRCMD,$DAIRDEL      SET COMMAND\n         CLC   REQWDSNM,COMMBLKS     NAME BLANK?\n         BE    DEL0020               YES.. NOTHING TO DELETE\n         CLI   REQSTAT,$REQRSTR      RESTORE INTERRUPTED?\n         BE    DEL0020               YES.. DON'T DELETE STAGE DATA SET\n         MVC   WORKDSC,STAGING       DELETING STAGING DATASET\n         FXCALL FXSDAIR,,,,REQWDSNM  DELETE THE DATA SET\n         OC    DAIRR15(6),DAIRR15    DATASET DELETED?\n         BZ    DEL0010               YES\n         CLC   DAIRERR,X1708         DATASET NOT FOUND?\n         BNE   DEL0060               NO..\nDEL0010  DS    0H\n         MVC   PRTMSGID(MSG07L),MSG07\n         MVC   PRTMSGID+(MSG07DSC-MSG07)(L'MSG07DSC),WORKDSC\n         MVC   PRTMSGID+(MSG07DSN-MSG07)(L'MSG07DSN),REQWDSNM\n         BAL   R9,PRT0000            PRINT MESSAGE\n         MVC   REQWDSNM,COMMBLKS     CLEAR WORK DATASET NAME\nDEL0020  DS    0H\n         CLC   REQIDSNM,COMMBLKS     DATA SET NAME BLANK?\n         BE    DEL0040               YES.. NOTHING TO DELETE\n         MVC   WORKDSC,SYSIN         DELETING SYSIN DATASET\n         FXCALL FXSDAIR,,,,REQIDSNM  DELETE THE DATA SET\n         OC    DAIRR15(6),DAIRR15    DATASET DELETED?\n         BZ    DEL0030               YES\n         CLC   DAIRERR,X1708         DATASET NOT FOUND?\n         BNE   DEL0060               NO..\nDEL0030  DS    0H\n         MVC   PRTMSGID(MSG07L),MSG07\n         MVC   PRTMSGID+(MSG07DSC-MSG07)(L'MSG07DSC),WORKDSC\n         MVC   PRTMSGID+(MSG07DSN-MSG07)(L'MSG07DSN),REQIDSNM\n         BAL   R9,PRT0000            PRINT MESSAGE\n         MVC   REQIDSNM,COMMBLKS     CLEAR WORK SYSIN DATASET NAME\nDEL0040  DS    0H\n         CLC   REQSDSNM,COMMBLKS     DATASET NAME BLANK?\n         BER   R8                    YES.. NOTHING TO DELETE\n         MVC   WORKDSC,SYSPRINT      DELETING SYSPRINT DATASET\n         FXCALL FXSDAIR,,,,REQSDSNM  DELETE THE DATA SET\n         OC    DAIRR15(6),DAIRR15    DATASET DELETED?\n         BZ    DEL0050               YES\n         CLC   DAIRERR,X1708         DATASET NOT FOUND?\n         BNE   DEL0060               NO..\nDEL0050  DS    0H\n         MVC   PRTMSGID(MSG07L),MSG07\n         MVC   PRTMSGID+(MSG07DSC-MSG07)(L'MSG07DSC),WORKDSC\n         MVC   PRTMSGID+(MSG07DSN-MSG07)(L'MSG07DSN),REQSDSNM\n         BAL   R9,PRT0000            PRINT MESSAGE\n         MVC   REQSDSNM,COMMBLKS     CLEAR SYSPRINT DATASET NAME\n         BR    R8                    DONE\nDEL0060  DS    0H\n         ITRACE ID=DELFAIL           DELETE FAILED\n         MVC   PRTMSGID(MSG08L),MSG08\n         MVC   PRTMSGID+(MSG08DSC-MSG08)(L'MSG08DSC),WORKDSC\n         MVC   PRTMSGID+(MSG08DSN-MSG08)(L'MSG08DSN),DAIRDSN\n         UNPK  PRTMSGID+(MSG08R15-MSG08)(5),DAIRR15(3)\n         MVZ   PRTMSGID+(MSG08R15-MSG08)(4),HEX0000\n         TR    PRTMSGID+(MSG08R15-MSG08)(4),HEXCHAR\n         MVI   PRTMSGID+(MSG08R15-MSG08)+4,C' '\n         UNPK  PRTMSGID+(MSG08ERR-MSG08)(5),DAIRERR(3)\n         MVZ   PRTMSGID+(MSG08ERR-MSG08)(4),HEX0000\n         TR    PRTMSGID+(MSG08ERR-MSG08)(4),HEXCHAR\n         MVI   PRTMSGID+(MSG08ERR-MSG08)+4,C' '\n         UNPK  PRTMSGID+(MSG08INF-MSG08)(5),DAIRINFO(3)\n         MVZ   PRTMSGID+(MSG08INF-MSG08)(4),HEX0000\n         TR    PRTMSGID+(MSG08INF-MSG08)(4),HEXCHAR\n         MVI   PRTMSGID+(MSG08INF-MSG08)+4,C' '\n         BAL   R9,PRT0000            PRINT MESSAGE\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         DC    H'1'\n         B     INIT0050              GO ON TO NEXT MASTER FILE RECORD\n* ------------------------------------------------------------------- *\n*        MASTER FILE I/O                                              *\n* ------------------------------------------------------------------- *\nMSTR0000 DS    0H\n         FXCALL FXSMSTR              LINK TO MASTER FILE I/O\n         BR    R9                    RETURN\n* ------------------------------------------------------------------- *\n*        PRINTING                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         ITRACE ID=PRINT\n         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE\n         BR    R9                    RETURN\n* ------------------------------------------------------------------- *\n*        EXIT                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT              EXITING MASTER FILE INITIALIZATION\n         LR    R1,R13                SAVE SAVE AREA ADDRESS\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         FREEMAIN RU,A=(1),LV=WORKL  FREEMAIN WORK AREA\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        CONSTANTS                                                   *\n*                                                                    *\n* ------------------------------------------------------------------ *\nP0       DC    P'0'\nRECDEDWD DC    X'4020202020202120'\nX1708    DC    X'1708'\nSTAGING  DC    CL8'STAGING'\nSYSIN    DC    CL8'SYSIN'\nSYSPRINT DC    CL8'SYSPRINT'\nHEX0000  DC    8X'00'\nHEXCHAR  DC    C'0123456789ABCDEF'\nMSG01    DS    0C\n         DC    CL11'FXSMINIT01I'\n         DC    C'TRANSMISSION OF '\nMSG01NDE DC    CL8' '\n         DC    C' '\nMSG01NBR DC    XL8'4021202020202020'\n         DC    C' INTERRUPTED'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'FXSMINIT02I'\n         DC    C'TRANSMISSION WILL BE RETRIED'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'FXSMINIT03I'\n         DC    C'MASTER FILE INTIALIZATION STOPPED AT END OF MASTER FIL+\n               E'\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    CL11'FXSMINIT04I'\n         DC    C'DUMP FOR REQEUST '\nMSG04NDE DC    CL8' '\n         DC    C' '\nMSG04NBR DC    XL8'4021202020202020'\n         DC    C' INTERRUPTED'\nMSG04L   EQU   *-MSG04\nMSG05    DS    0C\n         DC    CL11'FXSMINIT05I'\n         DC    C'RESTORE FOR REQEUST '\nMSG05NDE DC    CL8' '\n         DC    C' '\nMSG05NBR DC    XL8'4021202020202020'\n         DC    C' INTERRUPTED'\nMSG05L   EQU   *-MSG05\nMSG06    DS    0C\n         DC    CL11'FXSMINIT06I'\n         DC    C'RECEIVE OF '\nMSG06NDE DC    CL8' '\n         DC    C' '\nMSG06NBR DC    XL8'4021202020202020'\n         DC    C' INTERRUPTED'\nMSG06L   EQU   *-MSG06\nMSG07    DS    0C\n         DC    CL11'FXSMINIT07I '\nMSG07DSC DC    CL8' '\n         DC    C' DATASET '\nMSG07DSN DC    CL44' '\n         DC    C' SUCCESSFULLY DELETED'\nMSG07L   EQU   *-MSG07\nMSG08    DS    0C\n         DC    CL11'FXSMINIT08E'\n         DC    C'DELETE FAILED '\nMSG08DSC DC    CL8' '\n         DC    C' '\nMSG08DSN DS    CL44' '\n         DC    C' SVC99 R15='\nMSG08R15 DS    CL4' '\n         DC    C' ERROR='\nMSG08ERR DC    CL04' '\n         DC    C' INFO='\nMSG08INF DC    CL04' '\n         DC    C' '\nMSG08L   EQU   *-MSG08\n         LTORG\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        Work areas                                                  *\n*                                                                    *\n* ------------------------------------------------------------------ *\nWORKAREA DSECT\nWORKSAVE DS    18F                   REGISTER SAVE AREA\nWORKFLAG DS    X                     FLAGS/INDICATORS\n$UPDATE  EQU   X'80'                 .. MASTER FILE RECORD UPDATED\nWORKDSC  DS    CL8\n* ------------------------------------------------------------------ *\n*              Printer interface block                               *\n* ------------------------------------------------------------------ *\n         PRTBLOK  DSECT=NO\n* ------------------------------------------------------------------ *\n*              Master file I/O request block                         *\n* ------------------------------------------------------------------ *\n         MSTRREQ DSECT=NO\n* ------------------------------------------------------------------ *\n*              DAIR interface                                        *\n* ------------------------------------------------------------------ *\n         DAIRREQ  DSECT=NO\nWORKL    EQU   *-WORKAREA\n* ------------------------------------------------------------------ *\n*              Master file record format                             *\n* ------------------------------------------------------------------ *\n         REQBLOK DSECT=NO\n* ------------------------------------------------------------------ *\n*              Common data map                                       *\n* ------------------------------------------------------------------ *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------ *\n*              Equates                                               *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         END  FXSMINIT\n./ ADD NAME=FXSMSTR  0100-99056-99056-1500-00013-00013-00000-FX-REL1\n\n         TITLE 'FXFORMAT   MASTER FILE FORMATTER'\n         COPY  OPTIONS\n         AIF   ('&MSTRACC' EQ 'BDAM').BDAM\n         AIF   ('&MSTRACC' EQ 'VSAM').VSAM\n         MNOTE 12,'INVALID MASTER FILE ORGANIZATION'\n.VSAM    ANOP\n         COPY  VSAMMSTR\n         AGO   .END\n.BDAM    ANOP\n         COPY  BDAMMSTR\n.END     ANOP\n         END  FXSMSTR\n./ ADD NAME=FXSPARM  0100-99056-99056-1500-01166-01166-00000-FX-REL1\n\n         TITLE 'FXSPARM   PARAMETER INTERPRETER'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSPARM                                               *\n*                                                                     *\n*   This module interprets the control statements entered via FXIN.   *\n*   Since the control statements are only read once, this module is   *\n*   linked separately.  FXSMAIN issue a LOAD, then calls this module, *\n*   and then DELETEs it.  This frees up the storage that would        *\n*   otherwise be wasted by having code that is only used at start-up  *\n*   in the region.                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXSPARM  CSECT\nFXSPARM  AMODE 31\nFXSPARM  RMODE ANY\n         USING FXSPARM,R12,R8        DEFINE BASE\n         USING FXSCOMM,R11           DEFINE BASE\n         USING WORKAREA,R10          DEFINE BASE\n         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS\n         LR    R12,R15               SET BASE\n         LA    R8,2048(R12)          SET BASE 2\n         LA    R8,2048(R8)           SET BASE 2\n         B     PARM0000\n         DC    ((PFXMODNM-MODPRFX)-(*-FXSPARM))X'00'\n         DC    CL8'FXSPARM'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nPARM0000 DS    0H\n         GETMAIN RU,                 ACQUIRE STORAGE FOR WORK AREA     +\n               LV=WORKL,             .. AMOUNT OF STORAGE REQUIRED     +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R10,R1                COPY WORK AREA ADDRESS\n         LA    R1,WORKSAVE           SAVE AREA ADDRESS IN WORK AREA\n         ST    R1,8(R13)             CHAIN TO PREVIOUS SAVE AREA\n         ST    R13,4(R1)             CHAIN PREVIOUS TO OURS\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         MVI   PRTCC,C' '            INITIALIZE PRINT\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         MVC   WORKDCB(DCBL),DCBI    INITIALIZE DCB\n         XC    FX24PRM(CMD24-FX24PRM),FX24PRM\n         LA    R1,WORKDCB            DCB'S ADDRESS\n         ST    R1,DCB24              PASS ADDRESS TO 24-BIT MODULE\n         LA    R1,CARDDATA           I/O AREA ADDRESS\n         ST    R1,IOA24              PASS ADDRESS TO 24-BIT MODULE\n         LA    R1,PARM0100           EOF ADDRESS\n         ST    R1,EOF24              PASS ADDRESS TO 24-BIT MODULE\n         OI    EOF24,X'80'           SET 31-BIT MODE\n         FX24  $OPENI                OPEN THE DCB\nPARM0010 DS    0H\n         ITRACE ID=READCARD          READ A CONTROL STATEMENT\n         FX24  $GETM                 MOVE MODE GET\n         MVC   PRTMSGID(MSG01L),MSG01\n         MVC   PRTMSGID+(MSG01D-MSG01)(L'MSG01D),CARDDATA\n         BAL   R9,PRT0000            PRINT CONTROL STATEMENT\n         CLI   CARDDATA,C'*'         COMMENT?\n         BE    PARM0010              YES\n         CLC   ABNDSTMT,CARDDATA     ABEND STATEMENT?\n         BE    ABND0000              YES\n         CLC   APPLSTMT,CARDDATA     APPLID STATEMENT?\n         BE    APPL0000              YES\n         CLC   DESTSTMT,CARDDATA     DESTINATION STATEMENT?\n         BE    DEST0000              YES\n         CLC   MAXSTMT,CARDDATA      MAX SIZE STATEMENT?\n         BE    MAX0000               YES\n         CLC   MEMSTMT,CARDDATA      (PDS) MEMBER SIZE STATEMENT?\n         BE    MEM0000               YES\n         CLC   NODESTMT,CARDDATA     NODE STATEMENT?\n         BE    NODE0000              YES\n         CLC   RSTRSTMT,CARDDATA     RESTORE STATEMENT?\n         BE    RSTR0000              YES\n         CLC   STGESTMT,CARDDATA     STAGE VOLUME STATEMENT?\n         BE    STGE0000              YES\n         CLC   PRFXSTMT,CARDDATA     STAGE DATASET PREFIX STATEMENT?\n         BE    PRFX0000              YES\n         CLC   SNPCSTMT,CARDDATA     SNAP SHOT SYSOUT CLASS STATEMENT?\n         BE    SNPC0000              YES\n         CLC   SYSNSTMT,CARDDATA     SYSTEM NAME STATEMENT?\n         BE    SYSN0000              YES\n         CLC   XUSRSTMT,CARDDATA     EXTERNAL USER STATEMENT?\n         BE    XUSR0000              YES\n         ITRACE ID=INVALID           INVALID STATEMENT\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG02L),MSG02\n         BAL   R9,PRT0000            PRINT ERROR MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nPARM0100 DS    0H\n         FX24  $CLOSE                CLOSE THE DCB\n         TM    COMMFLAG,$ABORT       ABORT FLAG SET?\n         BO    EXIT0000              YES.. EXIT NOW\n         CLC   COMMAPLN,COMMBLKS     APPL NAME BLANK?\n         BNE   PARM0110              NO\n         MVC   PRTMSGID(MSG03L),MSG03\n         BAL   R9,PRT0000            PRINT MESSAGE\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\nPARM0110 DS    0H\n         OC    COMMSTGE,COMMSTGE     ANY STAGING VOLUMES DEFINED?\n         BNZ   PARM0120              YES\n         MVC   PRTMSGID(MSG04L),MSG04\n         BAL   R9,PRT0000            PRINT MESSAGE\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\nPARM0120 DS    0H\n         CLC   COMMPREF,COMMBLKS     PREFIX BLANK?\n         BNE   EXIT0000              NO\n         MVC   PRTMSGID(MSG05L),MSG05\n         BAL   R9,PRT0000            PRINT MESSAGE\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         B     EXIT0000              AND EXIT\n*---------------------------------------------------------------------*\n*        Process ABEND statement                                      *\n*---------------------------------------------------------------------*\nABND0000 DS    0H\n         ITRACE ID=SETABEND          ABEND STATEMENT PROCESSED\n         OI    COMMFLAG,$ABEND       SET ABEND FLAG\n         MVC   PRTMSGID(MSG06L),MSG06\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\n*---------------------------------------------------------------------*\n*        Process APPLID statement                                     *\n*---------------------------------------------------------------------*\nAPPL0000 DS    0H\n         ITRACE ID=APPLID            APPLID STATEMENT BEING PROCESSED\n         CLC   COMMAPLN,COMMBLKS     APPLID ALREADY SPECIFIED?\n         BNE   APPL0030              YES\n         LA    R1,CARDDATA+L'APPLSTMT FIRST CHARACTER OF APPL NAME\n         ST    R1,PARSEIN            SET INPUT DATA ADDRESS\n         LA    R1,72-L'APPLSTMT      MAXIMUM INPUT LENGTH\n         STH   R1,PARSEIL            SET INPUT LENGTH\n         LA    R1,8                  MAXIMUM CHARACTERS IN NAME\n         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH\n         BAL   R9,PARSE000           LINK TO PARSE\n         OC    PARSEOL,PARSEOL       NAME LENGTH ZERO?\n         BZ    APPL0010              YES\n         CLI   PARSEDLM,C' '         STOPPED ON A BLANK?\n         BNE   APPL0020              NO.. NAME IS TOO LONG\n         ITRACE ID=GOODAPPL          APPL NAME IS OK (AS FAR AS LENGTH)\n         MVC   COMMAPLN,PARSEOUT     SAVE APPL NAME\n         MVC   PRTMSGID(MSG07L),MSG07\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT STATEMENT\nAPPL0010 DS    0H\n         ITRACE ID=NOAPPL            APPL NAME OMITTED\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG08L),MSG08       APPL NAME OMITTED\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nAPPL0020 DS    0H\n         ITRACE ID=LONGAPPL          APPL NAME IS TOO LONG\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG09L),MSG09       APPL NAME IS TOO LONG\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nAPPL0030 DS    0H\n         ITRACE ID=DUPAPPL           DUPLICATE APPL STATEMENT\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG10L),MSG10\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\n*---------------------------------------------------------------------*\n*        Process DESTINATION statement                                *\n*---------------------------------------------------------------------*\nDEST0000 DS    0H\n         ITRACE ID=DEST\n         LA    R1,CARDDATA+L'DESTSTMT\n         ST    R1,PARSEIN            PARSE INPUT STARTING ADDRESS\n         LA    R1,72-L'DESTSTMT      LENGTH OF DATA LEFT ON STATEMENT\n         STH   R1,PARSEIL            SET DATA LENGTH\n         LA    R1,8                  MAXIMUM DESTINATION NAME LENGTH\n         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH\n         BAL   R9,PARSE000           LINK TO PARSE\n         OC    PARSEOL,PARSEOL       OUTPUT LENGTH ZERO?\n         BZ    DEST0050              YES\n         CLI   PARSEDLM,0            DID PARSE STOP DUE TO END-OF-DATA?\n         BE    DEST0050              YES.. BAD\n         CLI   PARSEDLM,C' '         DID PARSE STOP DUE TO A BLANK?\n         BE    DEST0060              YES.. BAD\n         MVC   WORKWORK,PARSEOUT     SAVE DESTINATION NAME\n         LA    R1,8                  MAXIMUM NODE NAME LENGTH\n         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH\n         BAL   R9,PARSE000           LINK TO PARSE\n         OC    PARSEOL,PARSEOL       OUTPUT LENGTH ZERO?\n         BZ    DEST0060              YES\n         LA    R2,COMMDEST           DESTINATION CHAIN POINT\nDEST0010 DS    0H\n         ICM   R3,15,0(R2)           NEXT DESTINATION BLOCK\n         BZ    DEST0020              NO MORE DESTINATIONS\n         USING DESTBLOK,R3           DEFINE BASE\n         CLC   WORKWORK,DESTNAME     DUPLICATED DESTINATION?\n         BE    DEST0070              YES\n         LA    R2,DESTNEXT           CHAIN POINT\n         B     DEST0010              LOOP\nDEST0020 DS    0H\n         ICM   R4,15,COMMSESS        FIRST SESSION BLOCK\n         USING SESSBLOK,R4           DEFINE BASE\nDEST0030 DS    0H\n         BZ    DEST0080              NODE IS NOT VALID\n         CLC   SESSNAME,PARSEOUT     NODE NAME FOUND?\n         BE    DEST0040              YES\n         ICM   R4,15,SESSNEXT        NEXT SESSION BLOCK\n         B     DEST0030              LOOP\nDEST0040 DS    0H\n         GETMAIN RU,                 ACQUIRE STORAGE FOR DESTINATION   +\n               LV=DESTL              .. SIZE REQUIRED\n         ITRACE ID=NEWDEST,          NEW DESTINATION BLOCK             +\n               DATA1=WORKWORK,       .. DESTINATION NAME               +\n               RDATA2=R1             .. DESTINATION BLOCK'S ADDRESS\n         ST    R1,0(R2)              ADD DESTINATION TO CHAIN\n         LR    R3,R1                 COPY STORAGE ADDRESS\n         MVC   DESTEYE,DESTID        INITIALIZE EYECATCHER\n         XC    DESTNEXT,DESTNEXT     CLEAR 'NEXT' POINTER\n         MVC   DESTNAME,WORKWORK     SAVE DESTINATION NAME\n         MVC   DESTNODE,PARSEOUT     SAVE NODE NAME\n         MVC   PRTMSGID(MSG11L),MSG11\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nDEST0050 DS    0H\n         ITRACE ID=NODEST            DESTINATION NAME OMITTED\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG12L),MSG12\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nDEST0060 DS    0H\n         ITRACE ID=NONODE            NODE NAME OMITTED\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG13L),MSG13\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nDEST0070 DS    0H\n         ITRACE ID=DUPDEST           DUPLICATED DESTINATION DEFINITION\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG14L),MSG14\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nDEST0080 DS    0H\n         ITRACE ID=BADNODE           NODE REFERENCED IS NOT DEFINED\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG15L),MSG15\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\n*---------------------------------------------------------------------*\n*        Process MAX SIZE statement                                   *\n*---------------------------------------------------------------------*\nMAX0000  DS    0H\n         ITRACE ID=MAXSIZE\n         LA    R1,CARDDATA+L'MAXSTMT  FIRST DIGIT\n         MVC   WORKWORK(9),=C'000000000'\n         LA    R2,9                  MAXIMUM DIGITS\nMAX0010  DS    0H\n         CLI   0(R1),C' '            END OF DIGITS?\n         BE    MAX0020               YES\n         CLI   0(R1),C'0'            INVALID DIGIT?\n         BL    MAX0040               YES\n         CLI   0(R1),C'9'            INVALID DIGIT?\n         BH    MAX0040               YES\n         MVC   WORKWORK(8),WORKWORK+1 SHIFT LEFT 1 DIGIT\n         MVC   WORKWORK+8(1),0(R1)   COPY DIGIT\n         LA    R1,1(R1)              NEXT DIGIT\n         BCT   R2,MAX0010            LOOP\nMAX0020  DS    0H\n         CLI   0(R1),C' '            BLANK?\n         BNE   MAX0050               NO.. TOO MANY DIGITS\n         PACK  COMMDWRD,WORKWORK(9)  PACK NUMBER OF ATTEMPTS\n         CVB   R1,COMMDWRD           CONVERT TO BINARY\n         LTR   R1,R1                 ZERO?\n         BZ    MAX0030               YES\n         ST    R1,COMMMAX            SET MAX FILE SIZE\n         ITRACE ID=MAXVAL,           SETTING MAX FILE SIZE VALUE       +\n               RDATA1=R1\n         MVC   PRTMSGID(MSG16L),MSG16       MAX SIZE SET\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nMAX0030  DS    0H\n         ITRACE ID=MAXZERO           MAX SIZE IS ZERO\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG17L),MSG17       MAX SIZE IS ZERO\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nMAX0040  DS    0H\n         ITRACE ID=BADDIGIT          BAD DIGIT\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG18L),MSG18       BAD DIGIT IN MAX SIZE\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nMAX0050  DS    0H\n         ITRACE ID=MAXLONG           TOO MANY DIGITS\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG19L),MSG19       TOO MANY DIGITS\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\n*---------------------------------------------------------------------*\n*        Process MEM SIZE statement                                   *\n*                                                                     *\n* Normally FX determines the size of a staging data set by examining  *\n* the VTOC's of the volumes where the data set resides.  PDS members  *\n* are not so easy.  The only way I could think of to be sure of the   *\n* size would be to read the member once and use the TTR in the        *\n* directory for the starting point and the TTR when the end of the    *\n* member is reached to calculate the size.  This would mean reading   *\n* the member an additional time just to compute stage data set size.  *\n* Rather than do this, I opted to use a \"generic\" or \"one size fits   *\n* all\" size for any PDS member.  FX always allocates the stage        *\n* data sets with the RLSE parameter, so unused space is released,     *\n* but if the member is too large, FX will not be able to transmit it. *\n* The MEM SIZE specifies a size in bytes that is converted to an      *\n* equivalent number of tracks on the stage device (the calculation    *\n* is strictly by track size and does not factor in the wasted space   *\n* due to inter-record gaps).  The SPACE parameter will use one tenth  *\n* (1/10) of this size for the secondary quantity.                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nMEM0000  DS    0H\n         ITRACE ID=MEMSTMT\n         LA    R1,CARDDATA+L'MEMSTMT  FIRST DIGIT\n         MVC   WORKWORK(9),=C'000000000'\n         LA    R2,9                  MAXIMUM DIGITS\nMEM0010  DS    0H\n         CLI   0(R1),C' '            END OF DIGITS?\n         BE    MEM0020               YES\n         CLI   0(R1),C'0'            INVALID DIGIT?\n         BL    MEM0040               YES\n         CLI   0(R1),C'9'            INVALID DIGIT?\n         BH    MEM0040               YES\n         MVC   WORKWORK(8),WORKWORK+1 SHIFT LEFT 1 DIGIT\n         MVC   WORKWORK+8(1),0(R1)   COPY DIGIT\n         LA    R1,1(R1)              NEXT DIGIT\n         BCT   R2,MEM0010            LOOP\nMEM0020  DS    0H\n         CLI   0(R1),C' '            BLANK?\n         BNE   MEM0050               NO.. TOO MANY DIGITS\n         PACK  COMMDWRD,WORKWORK(9)  PACK NUMBER OF ATTEMPTS\n         CVB   R1,COMMDWRD           CONVERT TO BINARY\n         LTR   R1,R1                 ZERO?\n         BZ    MEM0030               YES\n         ST    R1,COMMMEM            SET MAX FILE SIZE\n         ITRACE ID=MEMSIZE,          SETTING MAX FILE SIZE VALUE       +\n               RDATA1=R1\n         MVC   PRTMSGID(MSG20L),MSG20       PDS MEMBER STAGE SIZE SET\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nMEM0030  DS    0H\n         ITRACE ID=MEMZERO           PDS MEMBER STAGE SIZE IS ZERO\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG21L),MSG21       MAX SIZE IS ZERO\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nMEM0040  DS    0H\n         ITRACE ID=BADDIGIT          BAD DIGIT\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG22L),MSG22       BAD DIGIT IN MAX SIZE\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nMEM0050  DS    0H\n         ITRACE ID=MEMLONG           TOO MANY DIGITS\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG23L),MSG23       TOO MANY DIGITS\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\n*---------------------------------------------------------------------*\n*        Process FXNODE statement                                     *\n*---------------------------------------------------------------------*\nNODE0000 DS    0H\n         ITRACE ID=NODE              FXNODE STATEMENT BEING PROCESSED\n         LA    R1,CARDDATA+L'NODESTMT FIRST CHARACTER OF NODE NAME\n         ST    R1,PARSEIN            SAVE PARSE STARTING POINT\n         LA    R1,72-L'NODESTMT      MAXIMUM INPUT TO SCAN\n         STH   R1,PARSEIL            SET INPUT LENGTH\n         LA    R1,8                  MAXIMUM OUTPUT LENGTH\n         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH\n         BAL   R9,PARSE000           LINK TO PARSE\n         OC    PARSEOL,PARSEOL       LENGTH ZERO?\n         BZ    NODE0040              YES.. NAME OMITTED\n         CLI   PARSEDLM,C' '         STOPPED ON A BLANK?\n         BE    NODE0060              YES.. SMF ID OMITTED\n         CLI   PARSEDLM,C','         STOPPED DUE TO A COMMA?\n         BNE   NODE0050              NO.. NAME TOO LONG\n         MVC   WORKWORK,PARSEOUT     SAVE NODE LU NAME\n         LA    R1,4                  MAXIMUM OUTPUT LENGTH\n         STH   R1,PARSEOL            MAXIMUM OUTPUT LENGTH\n         BAL   R9,PARSE000           LINK TO PARSE\n         CLI   PARSEDLM,C' '         STOPPED ON A BLANK?\n         BNE   NODE0070              NO.. SMFID IS TOO LONG\nNODE0020 DS    0H\n         ITRACE ID=ADDSESS,          DEFINING A NEW SESSION            +\n               DATA1=PARSEOUT        .. LU'S NAME\n         FXCALL FXSSESS,ADD,WORKWORK ADD THE SESSBLOK\n         LTR   R15,R15               DUPLICATE SESSION BLOCK?\n         BNZ   NODE0030              YES\n         L     R4,SESSADDR           RETURNED SESSION BLOCK'S ADDRESS\n         MVI   SESSTYPE,$SESSFX      THIS IS A FX-TO-FX DEFINITION\n         MVC   SESSSMF,PARSEOUT      COPY NODE SMF ID\n         MVC   PRTMSGID(MSG24L),MSG24\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nNODE0030 DS    0H\n         ITRACE ID=DUPNODE           DUPLICATED NODE DEFINITION\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG25L),MSG25\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nNODE0040 DS    0H\n         ITRACE ID=NONAME            NODE NAME OMITTED\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG26L),MSG26\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nNODE0050 DS    0H\n         ITRACE ID=BADNODE           NODE NAME TOO LONG\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG27L),MSG27\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nNODE0060 DS    0H\n         ITRACE ID=NOSMFID           SMFID OMITTED\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG48L),MSG48\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\nNODE0070 DS    0H\n         ITRACE ID=BADSMFID          SMFID TOO LONG\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG49L),MSG49\n         BAL   R9,PRT0000            PRINT\n         B     PARM0010              READ NEXT STATEMENT\n*---------------------------------------------------------------------*\n*        PROCESS STAGE DATASET PREFIX STATEMENT                       *\n*---------------------------------------------------------------------*\nPRFX0000 DS    0H\n         ITRACE ID=PREFIX            PREFIX STATEMENT BEING PROCESSED\n         CLC   COMMPREF,COMMBLKS     PREFIX ALREADY GIVEN?\n         BNE   PRFX0010              YES\n         LA    R1,CARDDATA+L'PRFXSTMT FIRST CHARACTER OF PREFIX\n         ST    R1,PARSEIN            PARSE STARTING POINT\n         LA    R1,72-L'PRFXSTMT      MAXIMUM INPUT LENGTH\n         STH   R1,PARSEIL            SET INPUT DATA LENGTH\n         LA    R1,20                 MAXIMUM CHARACTERS IN PREFIX\n         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH\n         BAL   R9,PARSE000           LINK TO PARSE\n         OC    PARSEOL,PARSEOL       PREFIX LENGTH ZERO?\n         BZ    PRFX0020              YES\n         CLI   PARSEDLM,C' '         STOP ON A BLANK?\n         BNE   PRFX0030              NO.. NAME IS TOO LONG\n         MVC   COMMPREF,PARSEOUT     COPY PREFIX\n         MVC   COMMPREL,PARSEOL      SAVE LENGTH\n         ITRACE ID=GOODPRFX          STAGE PREFIX SUCCESSFUL\n         MVC   PRTMSGID(MSG28L),MSG28\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nPRFX0010 DS    0H\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG29L),MSG29\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nPRFX0020 DS    0H\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG30L),MSG30\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nPRFX0030 DS    0H\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG31L),MSG31\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\n*---------------------------------------------------------------------*\n*        PROCESS RESTORE STATEMENT                                    *\n*---------------------------------------------------------------------*\nRSTR0000 DS    0H\n         ITRACE ID=RESTORE           RESTORE STATEMENT BEING PROCESSED\n         LA    R1,CARDDATA+L'RSTRSTMT\n         ST    R1,PARSEIN            PARSE STARTING POINT\n         LA    R1,72-L'RSTRSTMT      MAX INPUT LENGTH\n         STH   R1,PARSEIL            SET STARTING LENGTH\n         LA    R1,44                 MAXIMUM OUTPUT LENGTH\n         STH   R1,PARSEOL            SET MAX OUTPUT LENGTH\n         BAL   R9,PARSE000           LINK TO PARSE\n         OC    PARSEOL,PARSEOL       LENGTH ZERO?\n         BZ    RSTR0060              YES\n         CLI   PARSEDLM,C','         STOP ON A COMMA?\n         BNE   RSTR0070              NO\n         MVC   WORKWORK,PARSEOUT     SAVE DATASET PREFIX\n         MVC   WORKLEN,PARSEOL       SAVE OUTPUT LENGTH\n         LA    R1,6                  MAXIMUM OUTPUT LENGTH\n         STH   R1,PARSEOL            SET OUTPUT LENGTH\n         BAL   R9,PARSE000           LINK TO PARSE\n         OC    PARSEOL,PARSEOL       LENGTH ZERO?\n         BZ    RSTR0080              YES\n         CLC   PARSEOL,H6            LENGTH > 6?\n         BH    RSTR0090              YES.. TOO LONG\nRSTR0010 DS    0H\n         LA    R7,COMMRSTR           CHAIN ADDRESS\n         ICM   R6,15,COMMRSTR        RESTORE CONTROL CHAIN ANCHOR\n         USING RSTRBLOK,R6           DEFINE BASE\n         BZ    RSTR0050              NO RESTORE BLOCKS\nRSTR0020 DS    0H\n         ITRACE ID=RSTRSRCH,RDATA1=R6\n         CLC   WORKLEN,RSTRDSNL      LENGTH LESS THAN IN RSTRBLOK?\n         BL    RSTR0040              YES, KEEP LOOKING\n         LH    R1,RSTRDSNL           COPY LENGTH IN EXISTING BLOCK\n         BCTR  R1,0                  MINUS 1 FOR EXECUTE\n         EX    R1,RSTRDCLC           CHECK NAME\n         BNE   RSTR0040              NOT THE SAME\n         CLC   WORKLEN,RSTRDSNL      LENGTHS EQUAL?\n         BNE   RSTR0040              NO, KEEP LOOKING\n         ITRACE ID=ADDVOL\n         LH    R1,RSTRVOL#           NUMBER OF VOLUMES IN LIST\n         CH    R1,MAXVOLS            LIST ALREADY FULL?\n         BE    RSTR0030              YES\n         LA    R1,1(R1)              PLUS 1\n         STH   R1,RSTRVOL#           SAVE NEW VOLUME COUNT\n         BCTR  R1,0                  RE-ADJUST FOR RELATIVE TO ZERO\n         MH    R1,=Y(L'RSTRVOL)      TIMES LENGTH OF VOLSER\n         LA    R1,RSTRVOL(R1)        ADDRESS OF NEXT VOLSER\n         MVC   0(L'RSTRVOL,R1),PARSEOUT ADD NEW VOLSER TO LIST\n         MVC   PRTMSGID(MSG32L),MSG32\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nRSTR0030 DS    0H\n         ITRACE ID=OVERFLOW\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG33L),MSG33\n         BAL   R9,PRT0000            PRINT MESSAGE\nRSTR0040 DS    0H\n         LA    R7,RSTRNEXT           CHAIN ADDRESS\n         ICM   R6,15,RSTRNEXT        NEXT RESTORE BLOCK'S ADDRESS\n         BNZ   RSTR0020              LOOP\nRSTR0050 DS    0H\n         GETMAIN RU,LV=RSTRL         ACQUIRE A NEW RESTORE BLOCK\n         LR    R6,R1                 SET BASE\n         ST    R6,0(R7)              CHAIN TO PREVIOUS BLOCK\n         ITRACE ID=NEWRSTR,RDATA1=R6\n         XC    RSTRBLOK(RSTRL),RSTRBLOK\n         MVC   RSTREYE,RSTRID        SET EYECATCHER\n         MVC   RSTRDSNL,WORKLEN      SET PREFIX'S LENGTH\n         MVC   RSTRDSN,WORKWORK      INITIALIZE DATASET NAME\n         MVI   RSTRVOL#+1,1          INITIALIZE VOLSER COUNT TO 1\n         MVC   RSTRVOL,PARSEOUT      INITIALIZE VOLSER\n         MVC   PRTMSGID(MSG34L),MSG34\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010\nRSTR0060 DS    0H\n         ITRACE ID=NODSN\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG35L),MSG35\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nRSTR0070 DS    0H\n         ITRACE ID=NODSNDLM\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG36L),MSG36\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nRSTR0080 DS    0H\n         ITRACE ID=NOVOL\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG37L),MSG37\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nRSTR0090 DS    0H\n         ITRACE ID=LONGVOL\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG38L),MSG38\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nRSTRDCLC CLC   RSTRDSN(0),WORKWORK   SAME DATASET NAME PREFIX?\nRSTRVOLM MVC   RSTRVOL(0),0(R4)      COPY VOLSER TO RESTORE BLOCK\n*---------------------------------------------------------------------*\n*        PROCESS SNAPCLASS STATEMENT                                  *\n*---------------------------------------------------------------------*\nSNPC0000 DS    0H\n         ITRACE ID=SNAPCLAS          SNAPSHOT SYSOUT CLASS\n         CLI   CARDDATA+L'SNPCSTMT,C' '   BLANK?\n         BE    SNPC0010                   YES.. INVALID\n         CLI   CARDDATA+L'SNPCSTMT+1,C' ' BLANK?\n         BNE   SNPC0020                   NO.. INVALID\n         MVC   COMMSNPC,CARDDATA+L'SNPCSTMT\n         MVC   PRTMSGID(MSG39L),MSG39\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nSNPC0010 DS    0H\n         ITRACE ID=SNAPBLNK\n         MVC   PRTMSGID(MSG40L),MSG40\n         BAL   R9,PRT0000            PRINT MESSAGE\n         MVI   COMMFLAG,$ABORT       SET ABORT FLAG\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nSNPC0020 DS    0H\n         ITRACE ID=SNAPLONG\n         MVC   PRTMSGID(MSG41L),MSG41\n         BAL   R9,PRT0000            PRINT MESSAGE\n         MVI   COMMFLAG,$ABORT       SET ABORT FLAG\n         B     PARM0010              READ NEXT CONTROL STATEMENT\n*---------------------------------------------------------------------*\n*        PROCESS SYSNAME STATEMENT                                    *\n*---------------------------------------------------------------------*\nSYSN0000 DS    0H\n         ITRACE ID=SYSNAME           SYSTEM NAME\n         CLC   CARDDATA+L'SYSNSTMT(20),COMMBLKS  BLANK?\n         BE    SYSN0010              YES\n         MVC   COMMSYSN,CARDDATA+L'SYSNSTMT\n         MVC   PRTMSGID(MSG42L),MSG42\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nSYSN0010 DS    0H\n         MVC   PRTMSGID(MSG43L),MSG43\n         BAL   R9,PRT0000            PRINT MESSAGE\n         MVI   COMMFLAG,$ABORT       SET ABORT FLAG\n         B     PARM0010              READ NEXT CONTROL STATEMENT\n*---------------------------------------------------------------------*\n*        PROCESS STAGE DEVICE STATEMENT                               *\n*---------------------------------------------------------------------*\nSTGE0000 DS    0H\n         ITRACE ID=STAGE             STAGE STATEMENT BEING PROCESSED\n         MVC   WORKWORK,COMMBLKS     INITIALIZE VOLSER IN WORK AREA\n         LA    R1,CARDDATA+L'STGESTMT FIRST CHARACTER OF VOLSER\n         ST    R1,PARSEIN            SET PARSE STARTING POINT\n         LA    R1,6                  MAXIMUM OUTPUT LENGTH\n         STH   R1,PARSEOL            SET OUTPUT\n         BAL   R9,PARSE000           LINK TO PARSE\n         OC    PARSEOL,PARSEOL       LENGTH ZERO?\n         BZ    STGE0050              YES\n         CLC   PARSEOL,H6            TOO LONG?\n         BH    STGE0040              YES\n         LA    R3,COMMSTGE           STAGING BLOCK ANCHOR ADDRESS\nSTGE0010 DS    0H\n         ICM   R4,15,0(R3)           NEXT BLOCK'S ADDRESS\n         USING STGEDEV,R4            DEFINE BASE\n         BZ    STGE0020              END OF CHAIN FOUND\n         CLC   STGEVOL,WORKWORK      DUPLICATED STAGING DEVICE?\n         BE    STGE0030              YES\n         LA    R3,STGENEXT           CHAIN POINTER ADDRESS\n         B     STGE0010              LOOP\nSTGE0020 DS    0H\n         GETMAIN RU,LV=STGEL         ACQUIRE STORAGE FOR VOLUME\n         ITRACE ID=NEWSTGE,          TRACE NEW STAGING BLOCK           +\n               RDATA1=R3,            .. CHAIN POINTER ADDRESS          +\n               RDATA2=R1             .. NEW BLOCK'S ADDRESS\n         ST    R1,0(R3)              CHAIN TO PREVIOUS BLOCK\n         LR    R4,R1                 SET BASE\n         XC    STGEDEV(STGEL),STGEDEV\n         MVC   STGEEYE,STGEID        SET EYECATCHER\n         MVC   STGEVOL,PARSEOUT      COPY VOLSER\n         MVC   PRTMSGID(MSG44L),MSG44\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nSTGE0030 DS    0H\n         MVC   PRTMSGID(MSG45L),MSG45\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nSTGE0040 DS    0H\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG46L),MSG46\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nSTGE0050 DS    0H\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG47L),MSG47\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\n*---------------------------------------------------------------------*\n*        PROCESS XUSER STATEMENT                                      *\n*---------------------------------------------------------------------*\nXUSR0000 DS    0H\n         ITRACE ID=XUSER             EXTERNAL USER STATEMENT PROCESSED\n         LA    R1,CARDDATA+L'XUSRSTMT\n         ST    R1,PARSEIN            PARSE STARTING POINT\n         LA    R1,72-L'XUSRSTMT      MAX INPUT LENGTH\n         STH   R1,PARSEIL            SET STARTING LENGTH\n         LA    R1,4                  MAXIMUM OUTPUT LENGTH\n         STH   R1,PARSEOL            SET MAX OUTPUT LENGTH\n         BAL   R9,PARSE000           LINK TO PARSE\n         OC    PARSEOL,PARSEOL       LENGTH ZERO?\n         BZ    XUSR0050              YES\n         CLI   PARSEDLM,C' '         STOP ON A BLANK?\n         BE    XUSR0070              YES\n         CLI   PARSEDLM,C','         STOP ON A COMMA?\n         BNE   XUSR0060              NO\n         MVC   WORKWORK(4),PARSEOUT  SAVE SMF ID\n         LA    R1,8                  MAXIMUM OUTPUT LENGTH\n         STH   R1,PARSEOL            SET OUTPUT LENGTH\n         BAL   R9,PARSE000           LINK TO PARSE\n         OC    PARSEOL,PARSEOL       LENGTH ZERO?\n         BZ    XUSR0070              YES\n         CLI   PARSEDLM,C' '         STOP ON A BLANK?\n         BE    XUSR0090              YES\n         CLI   PARSEDLM,C','         STOP ON A COMMA?\n         BNE   XUSR0080              NO\n         MVC   WORKWORK+4(8),PARSEOUT   SAVE USER ID\n         LA    R1,8                  MAXIMUM OUTPUT LENGTH\n         STH   R1,PARSEOL            SET OUTPUT LENGTH\n         BAL   R9,PARSE000           LINK TO PARSE\n         OC    PARSEOL,PARSEOL       LENGTH ZERO?\n         BZ    XUSR0090              YES\n         CLI   PARSEDLM,C' '         STOP ON A BLANK?\n         BNE   XUSR0100              NO\n         ICM   R4,15,COMMSESS        FIRST SESSION BLOCK\n         USING SESSBLOK,R4           DEFINE BASE\n         BZ    XUSR0110              NO SESSBLOKS\nXUSR0010 DS    0H\n         CLC   SESSSMF,WORKWORK      SMF ID MATCH?\n         BE    XUSR0020              YES\n         ICM   R4,15,SESSNEXT        NEXT SESSBLOK\n         BZ    XUSR0110              NO MORE SESSBLOK'S\n         B     XUSR0010              LOOP\nXUSR0020 DS    0H\n         ITRACE ID=NEWXUSR           ADDING A NEW XUSRBLOK\n         GETMAIN RU,                 ACQUIRING A NEW XUSER BLOCK       +\n               LV=XUSRL,             .. SIZE                           +\n               LOC=ANY               .. FROM ANY AREA\n         LA    R14,COMMXUSR          CHAIN POINT\n         USING XUSRBLOK,R5           DEFINE XUSRBLOK BASE\nXUSR0030 DS    0H\n         ICM   R5,15,0(R14)          NEXT XUSR BLOCK\n         BZ    XUSR0040              END OF CHAIN\n         LA    R14,XUSRNEXT          CHAIN POINT\n         B     XUSR0030              LOOP\nXUSR0040 DS    0H\n         ST    R1,0(R14)             ADD NEW BLOCK TO CHAIN\n         LR    R5,R1                 SET BASE\n         XC    XUSRBLOK(XUSRL),XUSRBLOK\n         MVC   XUSREYE,XUSRID        SET EYECATCHER\n         MVC   XUSRSMF,WORKWORK      COPY SMF ID\n         MVC   XUSRID1,WORKWORK+4    COPY ID ON OTHER SYSTEM\n         MVC   XUSRID2,PARSEOUT      COPY ID ON OUR SYSTEM\n         MVC   PRTMSGID(MSG50L),MSG50\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nXUSR0050 DS    0H\n         ITRACE ID=NOSMF\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG51L),MSG51\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nXUSR0060 DS    0H\n         ITRACE ID=SMFLONG\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG52L),MSG52\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nXUSR0070 DS    0H\n         ITRACE ID=NOID1\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG53L),MSG53\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nXUSR0080 DS    0H\n         ITRACE ID=ID1LONG\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG54L),MSG54\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nXUSR0090 DS    0H\n         ITRACE ID=NOID2\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG55L),MSG55\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nXUSR0100 DS    0H\n         ITRACE ID=ID2LONG\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG56L),MSG56\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nXUSR0110 DS    0H\n         ITRACE ID=BADSMF\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG57L),MSG57\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Parsing                                                            *\n*                                                                     *\n*  At entry:                                                          *\n*     PARSEIN  must be set to the data starting address               *\n*     PARSEIL  must be set to the data length                         *\n*     PARSEOL  must be set to the maximum output length               *\n*                                                                     *\n*  At exit:                                                           *\n*     PARSEIN  will be set the address of the byte following the      *\n*              delimiter that stopped the scan                        *\n*     PARSEIL  will be set to the length of the data following the    *\n*              delimiter                                              *\n*     PARSEOUT will be the data up to but not including the delimiter *\n*     PARSEOL  will be set to the length of the data in PARSEOUT      *\n*     PARSEDLM will be set to the delimiter that stopped the scan or  *\n*              to a null if the scan stopped due to end of data       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARSE000 DS    0H\n         ITRACE ID=PARSE,            STARTING A PARSE                  +\n               DATA1=PARSEIN,        .. STARTING ADDRESS               +\n               DATA2=PARSEIL         .. INPUT AND OUTPUT LENGTHS\n         MVC   PARSEOUT,COMMBLKS     CLEAR OUTPUT DATA\n         LH    R1,PARSEIL            INPUT DATA LENGTH\n         LH    R2,PARSEOL            MAXIMUM OUTPUT LENGTH\n         L     R3,PARSEIN            INPUT DATA ADDRESS\n         LA    R4,PARSEOUT           OUTPUT DATA ADDRESS\n         SR    R5,R5                 INITIALIZE FOR OUTPUT LENGTH\n         MVI   PARSEDLM,0            SET DELIMITER TO A NULL\n         LTR   R1,R1                 ANY DATA LEFT?\n         BZ    PARSE050              NO\nPARSE010 DS    0H\n         CLI   0(R3),C' '            BLANK?\n         BNE   PARSE020              NO\n         LA    R3,1(R3)              NEXT\n         BCT   R1,PARSE010           LOOP\n         B     PARSE050\nPARSE020 DS    0H\n         CLI   0(R3),C' '            BLANK?\n         BE    PARSE040              YES\n         CLI   0(R3),C','            COMMA?\n         BE    PARSE040              YES\n         MVC   0(1,R4),0(R3)         COPY TO OUTPUT\n         LA    R3,1(R3)              NEXT\n         LA    R4,1(R4)              NEXT\n         LA    R5,1(R5)              PLUS 1 BYTE OF LENGTH\n         BCT   R1,PARSE030           MINUS 1 BYTE OF INPUT\n         B     PARSE050              FORCE EXIT\nPARSE030 DS    0H\n         BCT   R2,PARSE020           LOOP\n         CLI   0(R3),C' '            BLANK?\n         BE    PARSE040              YES\n         CLI   0(R3),C','            COMMA?\n         BNE   PARSE050              NO\nPARSE040 DS    0H\n         MVC   PARSEDLM,0(R3)        SAVE DELIMITER\n         LA    R3,1(R3)              SKIP DELIMITER\n         BCTR  R1,0                  MINUS BYTE USED BY DELIMITER\nPARSE050 DS    0H\n         STH   R1,PARSEIL            SAVE INPUT LENGTH LEFT\n         STH   R5,PARSEOL            SAVE OUTPUT LENGTH\n         ST    R3,PARSEIN            SAVE INPUT ENDING POINT\n         ITRACE ID=PARSEOUT,         PARSE ENDING                      +\n               DATA1=PARSEOUT,       .. PART OF OUTPUT DATA            +\n               DATA2=PARSEOL         .. OUTPUT LENGTH\n         LM    R1,R5,PARSESAV        RESTORE SAVED REGISTERS\n         BR    R9                    EXIT\n* ------------------------------------------------------------------- *\n*        PRINTING                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         ITRACE ID=PRINT\n         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE\n         BR    R9                    RETURN\n* ------------------------------------------------------------------- *\n*        EXIT                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT              EXITING PARAMETER CONVERTER\n         LR    R1,R13                SAVE SAVE AREA ADDRESS\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         FREEMAIN RU,A=(1),LV=WORKL  FREEMAIN WORK AREA\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        CONSTANTS                                                   *\n*                                                                    *\n* ------------------------------------------------------------------ *\nDCBI     DCB   DSORG=PS,                                               +\n               DDNAME=FXIN,                                            +\n               RECFM=FB,                                               +\n               LRECL=80,                                               +\n               EODAD=PARM0100,                                         +\n               MACRF=GM\nDCBL     EQU   *-DCBI\nMAXVOLS  DC    Y(RSTRMAX)            MAX VOLSER IN RESTORE LIST\nH6       DC    H'6'                  CONSTANT\nDESTID   DC    CL8'DESTBLOK'\nRSTRID   DC    CL8'RSTRBLOK'\nSTGEID   DC    CL8'STGEDEV '\nXUSRID   DC    CL8'XUSRBLOK'\nABNDSTMT DC    C'ABEND'              ABEND CONTROL STATEMENT\nAPPLSTMT DC    C'APPLID='            APPLID STATEMENT\nDESTSTMT DC    C'DESTINATION='       DESTINATION STATEMENT\nMAXSTMT  DC    C'MAX SIZE='          MAXIMUM FILE SIZE STATEMENT\nMEMSTMT  DC    C'MEM SIZE='          PDS MEMBER STAGE SPACE STATEMENT\nNODESTMT DC    C'FXNODE='            FX NODE STATEMENT\nPRFXSTMT DC    C'STAGEPRFX='         STAGE DATASET DSN PREFIX STATEMENT\nRSTRSTMT DC    C'RESTORE='           RESTORE STATEMENT\nSTGESTMT DC    C'STAGE='             STAGE DATASET VOLSER STATEMENT\nSNPCSTMT DC    C'SNAPCLASS='         SNAPSHOT SYSOUT CLASS STATEMENT\nSYSNSTMT DC    C'SYSNAME='           SYSTEM NAME STATEMENT\nXUSRSTMT DC    C'XUSER='             EXTERNAL USER STATEMENT\nMSG01    DS    0C\n         DC    CL11'FXSPARM01I'\n         DC    C'CONTROL STATEMENT:'\n         DC    C' '\nMSG01D   DC    CL80' '\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'FXSPARM02E'\n         DC    C'INVALID CONTROL STATEMENT'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'FXSPARM03E'\n         DC    C'REQUIRED PARAMETER ''APPLID'' NOT SPECIFIED OR BLANK'\nMSG03L   EQU    *-MSG03\nMSG04    DS    0C\n         DC    CL11'FXSPARM04E'\n         DC    C'NO STAGING VOLUMES DEFINED'\nMSG04L   EQU   *-MSG04\nMSG05    DS    0C\n         DC    CL11'FXSPARM05E'\n         DC    C'STAGING DATASET PREFIX NOT GIVEN'\nMSG05L   EQU   *-MSG05\nMSG06    DS    0C\n         DC    CL11'FXSPARM06I'\n         DC    C'ABEND FLAG SET'\nMSG06L   EQU   *-MSG06\nMSG07    DS    0C\n         DC    CL11'FXSPARM07I'\n         DC    C'APPLID STATEMENT PROCESSED SUCCESSFULLY'\nMSG07L   EQU   *-MSG07\nMSG08    DS    0C\n         DC    CL11'FXSPARM08E'\n         DC    C'APPL NAME OMITTED'\nMSG08L   EQU   *-MSG08\nMSG09    DS    0C\n         DC    CL11'FXSPARM09E'\n         DC    C'APPLID IS TOO LONG (MAX IS 8 CHARACTERS)'\nMSG09L   EQU   *-MSG09\nMSG10    DS    0C\n         DC    CL11'FXSPARM10E'\n         DC    C'DUPLICATE APPL ID STATEMENT'\nMSG10L   EQU   *-MSG10\nMSG11    DS    0C\n         DC    CL11'FXSPARM11I'\n         DC    C'DESTINATION DEFINED SUCCESSFULLY'\nMSG11L   EQU   *-MSG11\nMSG12    DS    0C\n         DC    CL11'FXSPARM12E'\n         DC    C'DESTINATION NAME OMITTED'\nMSG12L   EQU   *-MSG12\nMSG13    DS    0C\n         DC    CL11'FXSPARM13E'\n         DC    C'NODE NAME OMITTED'\nMSG13L   EQU   *-MSG13\nMSG14    DS    0C\n         DC    CL11'FXSPARM14E'\n         DC    C'DUPLICATED DESTINATION DEFINITION'\nMSG14L   EQU   *-MSG14\nMSG15    DS    0C\n         DC    CL11'FXSPARM15E'\n         DC    C'SPECIFIED NODE IS NOT DEFINED'\nMSG15L   EQU   *-MSG15\nMSG16    DS    0C\n         DC    CL11'FXSPARM16I'\n         DC    C'MAX FILE SIZE SET'\nMSG16L   EQU   *-MSG16\nMSG17    DS    0C\n         DC    CL11'FXSPARM17E'\n         DC    C'MAX FILE SIZE MAY NOT BE ZERO'\nMSG17L   EQU   *-MSG17\nMSG18    DS    0C\n         DC    CL11'FXSPARM18E'\n         DC    C'INVALID DIGIT IN MAX SIZE VALUE'\nMSG18L   EQU   *-MSG18\nMSG19    DS    0C\n         DC    CL11'FXSPARM19E'\n         DC    C'MAX SIZE VALUE HAS TOO MANY DIGITS (9 MAX)'\nMSG19L   EQU   *-MSG19\nMSG20    DS    0C\n         DC    CL11'FXSPARM20I'\n         DC    C'PDS MEMBER STAGE SPACE SET'\nMSG20L   EQU   *-MSG20\nMSG21    DS    0C\n         DC    CL11'FXSPARM21E'\n         DC    C'PDS MEMBER SPACE MAY NOT BE ZERO'\nMSG21L   EQU   *-MSG21\nMSG22    DS    0C\n         DC    CL11'FXSPARM22E'\n         DC    C'INVALID DIGIT IN PDS MEMBER SPACE'\nMSG22L   EQU   *-MSG22\nMSG23    DS    0C\n         DC    CL11'FXSPARM23E'\n         DC    C'PDS MEMBER SPACE HAS TOO MANY DIGITS (9 MAX)'\nMSG23L   EQU   *-MSG23\nMSG24    DS    0C\n         DC    CL11'FXSPARM24I'\n         DC    C'FX NODE DEFINED SUCCESSFULLY'\nMSG24L   EQU   *-MSG24\nMSG25    DS    0C\n         DC    CL11'FXSPARM25E'\n         DC    C'FX NODE IS DUPLICATELY DEFINED'\nMSG25L   EQU   *-MSG25\nMSG26    DS    0C\n         DC    CL11'FXSPARM26E'\n         DC    C'NODE NAME OMITTED'\nMSG26L   EQU   *-MSG26\nMSG27    DS    0C\n         DC    CL11'FXSPARM27E'\n         DC    C'FX NODE NAME IS TOO LONG'\nMSG27L   EQU   *-MSG27\nMSG28    DS    0C\n         DC    CL11'FXSPARM28I'\n         DC    C'STAGING DATASET PREFIX PROCESSED SUCCESSFULLY'\nMSG28L   EQU   *-MSG28\nMSG29    DS    0C\n         DC    CL11'FXSPARM29E'\n         DC    C'STAGING DATASET PREFIX ALREADY GIVEN'\nMSG29L   EQU   *-MSG29\nMSG30    DS    0C\n         DC    CL11'FXSPARM30E'\n         DC    C'PREFIX NAME OMITTED'\nMSG30L   EQU   *-MSG30\nMSG31    DS    0C\n         DC    CL11'FXSPARM31E'\n         DC    C'STAGING DATASET PREFIX TOO LONG'\nMSG31L   EQU   *-MSG31\nMSG32    DS    0C\n         DC    CL11'FXSPARM32I'\n         DC    C'VOLSER ADDED TO LIST'\nMSG32L   EQU   *-MSG32\nMSG33    DS    0C\n         DC    CL11'FXSPARM33E'\n         DC    C'MORE THAN 20 VOLUMES ASSIGNED TO SAME DSN'\nMSG33L   EQU   *-MSG33\nMSG34    DS    0C\n         DC    CL11'FXSPARM34I'\n         DC    C'NEW DATASET PREFIX ADDED TO LIST'\nMSG34L   EQU   *-MSG34\nMSG35    DS    0C\n         DC    CL11'FXSPARM35E'\n         DC    C'DSN AND VOLSER MISSING'\nMSG35L   EQU   *-MSG35\nMSG36    DS    0C\n         DC    CL11'FXSPARM36E'\n         DC    C'DSN PREFIX ENDING DELIMITER MISSING'\nMSG36L   EQU   *-MSG36\nMSG37    DS    0C\n         DC    CL11'FXSPARM37E'\n         DC    C'VOLSER MISSING'\nMSG37L   EQU   *-MSG37\nMSG38    DS    0C\n         DC    CL11'FXSPARM38E'\n         DC    C'VOLSER IS TOO LONG'\nMSG38L   EQU   *-MSG38\nMSG39    DS    0C\n         DC    CL11'FXSPARM39I'\n         DC    C'SNAPSHOT SYSOUT CLASS SET'\nMSG39L   EQU   *-MSG39\nMSG40    DS    0C\n         DC    CL11'FXSPARM40E'\n         DC    C'SNAPSHOT SYSOUT CANNOT BE BLANK'\nMSG40L   EQU   *-MSG40\nMSG41    DS    0C\n         DC    CL11'FXSPARM41E'\n         DC    C'SNAPSHOT SYSOUT CLASS TOO LONG'\nMSG41L   EQU   *-MSG41\nMSG42    DS    0C\n         DC    CL11'FXSPARM42I'\n         DC    C'SYSTEM NAME SET'\nMSG42L   EQU   *-MSG42\nMSG43    DS    0C\n         DC    CL11'FXSPARM43E'\n         DC    C'SYSTEM NAME BLANK'\nMSG43L   EQU   *-MSG43\nMSG44    DS    0C\n         DC    CL11'FXSPARM44I'\n         DC    C'STAGING VOLUME ADDED TO LIST'\nMSG44L   EQU   *-MSG44\nMSG45    DS    0C\n         DC    CL11'FXSPARM45E'\n         DC    C'DUPLICATED STAGING VOLUME DEFINITION'\nMSG45L   EQU   *-MSG45\nMSG46    DS    0C\n         DC    CL11'FXSPARM46E'\n         DC    C'STAGING VOLUME VOLSER IS TOO LONG'\nMSG46L   EQU   *-MSG46\nMSG47    DS    0C\n         DC    CL11'FXSPARM47E'\n         DC    C'VOLSER OMITTED'\nMSG47L   EQU   *-MSG47\nMSG48    DS    0C\n         DC    CL11'FXSPARM48E'\n         DC    C'SMF ID OMITTED'\nMSG48L   EQU   *-MSG48\nMSG49    DS    0C\n         DC    CL11'FXSPARM49E'\n         DC    C'SMF ID IS TOO LONG'\nMSG49L   EQU   *-MSG49\nMSG50    DS    0C\n         DC    CL11'FXSPARM50I'\n         DC    C'EXTERNAL USER DEFINED SUCCESSFULLY'\nMSG50L   EQU   *-MSG50\nMSG51    DS    0C\n         DC    CL11'FXSPARM51E'\n         DC    C'SMF ID OMITTED'\nMSG51L   EQU   *-MSG51\nMSG52    DS    0C\n         DC    CL11'FXSPARM52E'\n         DC    C'SMF ID TOO LONG'\nMSG52L   EQU   *-MSG52\nMSG53    DS    0C\n         DC    CL11'FXSPARM53E'\n         DC    C'EXTERNAL USER ID OMITTED'\nMSG53L   EQU   *-MSG53\nMSG54    DS    0C\n         DC    CL11'FXSPARM54E'\n         DC    C'EXTERNAL USER ID TOO LONG'\nMSG54L   EQU   *-MSG54\nMSG55    DS    0C\n         DC    CL11'FXSPARM55E'\n         DC    C'LOCAL USER ID OMITTED'\nMSG55L   EQU   *-MSG55\nMSG56    DS    0C\n         DC    CL11'FXSPARM56E'\n         DC    C'LOCAL USER ID TOO LONG'\nMSG56L   EQU   *-MSG56\nMSG57    DS    0C\n         DC    CL11'FXSPARM57E'\n         DC    C'NO FXNODE WITH MATCHING SMFID'\nMSG57L   EQU   *-MSG57\n         LTORG\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        WORK AREAS                                                  *\n*                                                                    *\n* ------------------------------------------------------------------ *\nWORKAREA DSECT\nWORKSAVE DS    18F                   REGISTER SAVE AREA\nPARSESAV DS    5F                    REGISTER SAVE AREA FOR PARSE\nPARSEIN  DS    A                     PARSE DATA INPUT ADDRESS\nPARSEIL  DS    H                     LENGTH OF DATA AT PARSE IN\nPARSEOL  DS    H                     LENGTH OF DATA IN PARSE OUT\nWORKLEN  DS    H                     WORK LENGTH\nPARSEOUT DS    CL80                  OUTPUT FROM PARSE\nCARDDATA DS    CL80                  CONTROL STATEMENT I/O AREA\nPARSEDLM DS    C                     DELIMITER THAT STOPPED PARSE\nWORKWORK DS    CL44                  WORK AREA\nWORKDCB  DS    0F,(DCBL)X            FXIN DCB\n         PRTBLOK  DSECT=NO\n         SESSREQ  DSECT=NO\n         FX24PRM  DSECT=NO\nWORKL    EQU   *-WORKAREA\n* ------------------------------------------------------------------ *\n*              DESTINATION CONTROL BLOCK                             *\n* ------------------------------------------------------------------ *\n         DESTBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              SESSION CONTROL BLOCK                                 *\n* ------------------------------------------------------------------ *\n         SESSBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              RESTORE CONTROL BLOCK                                 *\n* ------------------------------------------------------------------ *\n         RSTRBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              STAGING VOLUME BLOCK                                  *\n* ------------------------------------------------------------------ *\n         STGEDEV  DSECT=YES\n* ------------------------------------------------------------------ *\n*              EXTERNAL USER BLOCK                                   *\n* ------------------------------------------------------------------ *\n         XUSRBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              COMMON DATA MAP                                       *\n* ------------------------------------------------------------------ *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------ *\n*              EQUATES                                               *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         END  FXSPARM\n./ ADD NAME=FXSPRTQ  0100-99056-99056-1500-00091-00091-00000-FX-REL1\n\n         TITLE 'FXSPRTQ  QUEUE WORK TO PRINT SUB-TASK'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSPRTQ                                               *\n*                                                                     *\n*  Function:                                                          *\n*   Print may be generated under multiple tasks.  Print is done by    *\n*   a separate subtask.  This is a subroutine to add elements to the  *\n*   print subtask work queue.  This module does not follow the        *\n*   \"normal\" FX linkage or work area usage.  Any work areas must be   *\n*   allocated and released dynamically.                               *\n*                                                                     *\n*   At entry this routine expects                                     *\n*     R1  - PRTBLOK Address                                           *\n*     R11 - FXSCOMM address                                           *\n*     R13 - Callers save area address                                 *\n*     R14 - Return address                                            *\n*     R15 - Entry point address                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXSPRTQ  CSECT\nFXSPRTQ  AMODE 31\nFXSPRTQ  RMODE ANY\n         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS\n         LR    R12,R15               COPY BASE ADDRESS\n         USING FXSPRTQ,R12           DEFINE BASE\n         USING FXSCOMM,R11           DEFINE BASE\n         LR    R10,R1                COPY PRTBLOK ADDRESS\n         USING PRTBLOK,R10           DEFINE BASE\n         B     PRT0000               SKIP EYECATCHERS\n         DC    ((PFXMODNM-MODPRFX)-(*-FXSPRTQ))X'00'\n         DC    CL8'FXSPRTQ'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\n         DC    C'QUEUE WORK TO PRINT SUBTASK'\nPRT0000  DS    0H\n         GETMAIN RU,LV=72            ACQUIRE STORAGE FOR SAVE AREA\n         ST    R13,4(R1)             SAVE SAVE AREA ADDRESS\n         ST    R1,8(R13)             CHAIN TO PREVIOUS SAVE AREA\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         ITRACE ID=ENTRY\n         GETMAIN RU,                 ACQUIRE STORAGE FOR PRINT BLOCK   +\n               LV=PRTBLOKL           .. SIZE\n         MVC   0(PRTBLOKL,R1),PRTBLOK\n         MVI   PRTCC,C' '            CLEAR CARRIAGE CONTROL\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         LR    R10,R1                COPY BLOCK'S ADDRESS\n         MVC   PRTEYE,PRTID          SET EYECATCHER\nPRT0010  DS    0H\n         L     R2,PRTREQ             FIRST REQUEST BLOCK'S ADDRESS\n         ST    R2,PRTNEXT            SET CHAIN POINTER\n         CS    R2,R10,PRTREQ         ADD NEW BLOCK TO CHAIN\n         BNE   PRT0010               UNSUCCESSFUL.. TRY AGAIN\n         ITRACE ID=QUEUED,           NEW BLOCK IS ON THE QUEUE         +\n               RDATA1=R10,           .. NEW BLOCK'S ADDRESS            +\n               RDATA2=R2             .. PREVIOUS BLOCK'S ADDRESS\n         POST  PRTWORK               POST PRINT TASK ECB\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\n         ITRACE ID=EXIT\n         LR    R1,R13                COPY SAVE AREA ADDRESS\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         FREEMAIN RU,A=(1),LV=72     FREEMAIN SAVE AREA\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        CONSTANTS                                                   *\n*                                                                    *\n* ------------------------------------------------------------------ *\nPRTID    DC    CL8'PRTBLOK'\n         LTORG\n* ------------------------------------------------------------------ *\n*              PRINT REQUEST BLOCK                                   *\n* ------------------------------------------------------------------ *\n         PRTBLOK  DSECT=YES\n* ------------------------------------------------------------------ *\n*              COMMON DATA MAP                                       *\n* ------------------------------------------------------------------ *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              EQUATES                                               *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         END  FXSPRTQ\n./ ADD NAME=FXSPRTS  0100-99056-99056-1500-00238-00238-00000-FX-REL1\n\n         TITLE 'FXSPRTS    PRINT SUBTASK'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSPRTS                                               *\n*                                                                     *\n*   FX consists of multiple tasks and has asynchronous exits.  It is  *\n*   possible that multiple tasks would try to print at the same time. *\n*   Instead of trying to serialize a DCB, print was moved to this     *\n*   subtask.  Any other subtask or exit may queue work for this task  *\n*   from PRTREQ in the common area.                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXSPRTS  CSECT\nFXSPRTS  AMODE 31\nFXSPRTS  RMODE 24\n         USING FXSPRTS,R12           DEFINE BASE\n         USING PRTBLOK,R7            DEFINE BASE\n         USING FXSCOMM,R11           DEFINE BASE\n         STM   R14,R12,12(R13)       CHAIN REGISTERS\n         LR    R12,R15               COPY ENTRY POINT ADDRESS\n         L     R11,0(R1)             LOAD FXSCOMM'S ADDRESS\n         GETMAIN R,LV=WORKL          ACQUIRE STORAGE FOR WORK AREA\n         B     PRT0000\n         DC    ((PFXMODNM-MODPRFX)-(*-FXSPRTS))X'00'\n         DC    CL8'FXSPRTS'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nPRT0000  DS    0H\n         USING WORKAREA,R1           DEFINE BASE\n         XC    WORKAREA+000(256),WORKAREA+000\n         XC    WORKAREA+256(WORKL-256),WORKAREA+000\n         ST    R13,4(R1)             CHAIN PREVIOUS SAVE AREA TO OURS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO PREVIOUS\n         LR    R13,R1                COPY WORK AREA ADDRESS\n         DROP  R1\n         USING WORKAREA,R13          DEFINE BASE\n         ST    R12,APRTS             SET OUR ENTRY POINT IN COMMON\n         ITRACE ID=INIT\n         MVC   WKDCB(DCBL),DCBI      INITIALIZE DCB IN WORK AREA\n         MVI   WKCC,C' '             INITIALIZE CARRIAGE CONTROL\n         MVC   WKDATE(PRTLRECL-1),WKCC\n         MVC   WKOCPL(OCPLL),OCPLI   INITIALIZE OPEN/CLOSE PARM LIST\n         ZAP   WKLINE,P0             INITIALIZE LINE COUNT\n         ZAP   WKPAGE,P0             INITIALIGE PAGE COUNT\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         OPEN  (WKDCB,OUTPUT),MF=(E,WKOCPL)\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\nPRT0010  DS    0H\n         TM    PRTWORK,X'40'         ECB ALREADY POSTED?\n         BO    PRT0020               GET BUSY\n         LA    R1,PRTWORK            WORK TO DO ECB\n         ITRACE ID=WORKWAIT,         WAITING FOR WORK                  +\n               RDATA1=R1             .. ECB'S ADDRESS\n         WAIT  1,ECB=(1)             WAIT FOR WORK TO DO ECB\n         ITRACE ID=WOKEUP\nPRT0020  DS    0H\n         XC    PRTWORK,PRTWORK       RESET ECB\n         SR    R1,R1                 CLEAR REGISTER\nPRT0030  DS    0H\n         ICM   R10,15,PRTREQ         FIRST REQUEST BLOCK\n         BZ    PRT0210               NOTHING ON CHAIN\n         CS    R10,R1,PRTREQ         GET REQUEST CHAIN\n         BNE   PRT0030\n         USING PRTBLOK,R10           DEFINE BASE\n         ITRACE ID=HAVEQ,            WE HAVE THE QUEUE                 +\n               RDATA1=R10            .. FIRST (LAST) QUEUE BLOCK\nPRT0040  DS    0H\n         L     R2,PRTNEXT            NEXT BLOCK'S ADDRESS\n         ST    R1,PRTNEXT            SET POINTER\n         LR    R1,R10                SWITCH\n         LTR   R10,R2                SWITCH\n         BNZ   PRT0040               LOOP\n         LR    R10,R1                COPY FIRST BLOCK'S ADDRESS\nPRT0050  DS    0H\n         CLI   PRTCMD,$PRTHEAD       FORCED HEADING?\n         BE    PRT0120               YES\n         MVC   WKCC,PRTCC            COPY CARRIAGE CONTROL\n         TIME  DEC\n         STM   R0,R1,WKTIMDAY        SAVE TIME AND DATE\n         MVC   WKTIME,TIMEEDWD       INITIALIZE WITH EDIT WORD\n         ED    WKTIME,WKTIMDAY       EDIT TIME\n         MVC   WKDATE,DATEEDWD       INITIALIZE WITH EDIT WORD\n         ED    WKDATE,WKTIMDAY+5     EDIT DATE\n         MVC   WKMSGID,PRTMSGID      COPY MESSAGE ID\n         LA    R1,WKMSGID+(L'WKMSGID-1)\nPRT0060  DS    0H\n         CLI   0(R1),C' '            BLANK?\n         BNE   PRT0070               NO\n         BCT   R1,PRT0060            LOOP\nPRT0070  DS    0H\n         CLI   0(R1),C'E'            'ERROR' MESSAGE\n         BNE   PRT0080\n         MVI   WKMSGERR,C'*'         FLAG ERROR MESSAGE\nPRT0080  DS    0H\n         LA    R1,WKDATA             FIRST PRINT AREA BYTE\n         LA    R2,PRTDATA            PRINT OUTPUT AREA BYTE\n         LA    R3,L'PRTDATA          MAXIMUM LOOPS\nPRT0090  DS    0H\n         CLC   COMMBLKS(2),0(R2)     2 BLANKS IN A ROW?\n         BE    PRT0100               YES\n         MVC   0(1,R1),0(R2)         COPY TO OUTPUT AREA\n         LA    R1,1(R1)              NEXT OUTPUT BYTE\nPRT0100  DS    0H\n         LA    R2,1(R2)              NEXT INPUT BYTE\n         BCT   R3,PRT0090            LOOPS\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         PUT   WKDCB,WKCC            PRINT\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         AP    WKLINE,P1             ADD 1 TO LINE COUNT\n         CLI   WKCC,C' '             SINGLE SPACE\n         BE    PRT0110               YES\n         AP    WKLINE,P1             ADD 1 TO LINE COUNT\n         CLI   WKCC,C'0'             DOUBLE SPACE?\n         BE    PRT0110               YES\n         AP    WKLINE,P1             ADD 1 TO LINE COUNT\nPRT0110  DS    0H\n         MVI   WKCC,C' '             INITIALIZE CARRIAGE CONTROL\n         MVC   WKDATE(PRTLRECL-1),WKCC\n         CP    WKLINE,COMMMAXL       TIME FOR HEADING?\n         BNH   PRT0200               NOT YET\nPRT0120  DS    0H\n         AP    WKPAGE,P1             ADD 1 TO PAGE COUNT\n         MVC   WKDATA(HEADINGL),HEADING\n         MVC   WKDATA+(HEADPAGE-HEADING)(L'HEADPAGE),PAGEEDWD\n         ED    WKDATA+(HEADPAGE-HEADING)(L'HEADPAGE),WKPAGE\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         PUT   WKDCB,WKCC            PRINT\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         ZAP   WKLINE,P1             RESET LINE COUNT\n         MVI   WKCC,C' '             INITIALIZE CARRIAGE CONTROL\n         MVC   WKDATE(PRTLRECL-1),WKCC\nPRT0200  DS    0H\n         LR    R1,R10                COPY PRTBLOK ADDRESS\n         L     R10,PRTNEXT           NEXT BLOCK'S ADDRESS\n         FREEMAIN RU,A=(1),LV=PRTBLOKL\n         LTR   R10,R10               ANY MORE PRINT BLOCKS?\n         BNZ   PRT0050               YES\nPRT0210  DS    0H\n         TM    COMMEOJ,$EOJ3         SHUTDOWN PHASE 3?\n         BO    EXIT0000              YES.. IT'S MILLER TIME\n         B     PRT0010               NO, WAIT\n* ------------------------------------------------------------------- *\n*        ADDRESSING MODE SWITCHING                                    *\n* ------------------------------------------------------------------- *\nAM24     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         BSM   R0,R15                RETURN IN 24-BIT MODE\nAM31     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         O     R15,X80               SET HIGH BIT ON\n         BSM   R0,R15                RETURN IN 31-BIT MODE\n* ------------------------------------------------------------------- *\n*        EXIT                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         CLOSE WKDCB,MF=(E,WKOCPL)   CLOSE DCB\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         LR    R1,R13                COPY WORK AREA ADDRESS\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         FREEMAIN R,A=(1),LV=WORKL   FREE WORK AREA\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\nPRTMVC   MVC   WKDATE(0),PRTDATA     COPY PRINT DATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nX80      DC    A(X'80000000')\nDATEEDWD DC    X'4021204B202020'\nTIMEEDWD DC    X'4021204B20204B2020'\nPAGEEDWD DC    X'402020202120'\nP0       DC    P'0'\nP1       DC    P'1'\nHEADING  DS    0C\n         DC    51C' '\n         DC    C'FX LOG'\n         DC    51C' '\n         DC    C'PAGE '\nHEADPAGE DC    CL6' '\nHEADINGL EQU   *-HEADING\nDCBI     DCB   DSORG=PS,                                               +\n               DDNAME=FXPRT,                                           +\n               RECFM=FBA,                                              +\n               LRECL=PRTLRECL,                                         +\n               MACRF=PM\nDCBL     EQU   *-DCBI\nOCPLI    OPEN  (*,OUTPUT),MF=L\nOCPLL    EQU   *-OCPLI\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWORKAREA DSECT\nWORKSAVE DS    18F                   REGISTER SAVE AREA\nWKTIMDAY DS    2F                    TIME/DATE\nWKLINE   DS    PL3\nWKPAGE   DS    PL3\nWKCC     DS    C                     CARRIAGE CONTROL\nWKDATE   DS    CL7                   DATE\n         DS    C\nWKTIME   DS    CL9                   TIME\n         DS    C\nWKMSGID  DS    CL11                  MESSAGE ID\n         DS    C\nWKMSGERR DS    C                     ERROR MESSAGE FLAG\n         DS    C\nWKDATA   DS    CL120                 PRINT DATA\nPRTLRECL EQU   *-WKCC\nWKDCB    DS    0A,(DCBL)X            RESERVE SPACE FOR DCB\nWKOCPL   DS    (OCPLL)X\nWORKL    EQU   *-WORKAREA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT REQUEST BLOCK                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         PRTBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  FXSPRTS\n./ ADD NAME=FXSRECV  0100-99056-99056-1500-01177-01177-00000-FX-REL1\n\n         TITLE 'FILE TRANSMISSION RECEIVE'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSRECV                                               *\n*                                                                     *\n*       A partner node has either a new dataset to transmit to us     *\n*       or a dataset we have previously transmitted to the partner    *\n*       has been RESTORED.                                            *\n*                                                                     *\n*       If this is a new dataset being received, the first record is  *\n*       the control record from the sender's master file.  We must    *\n*       locate an available record in our master file to record the   *\n*       request.  The control record contains the size of the         *\n*       staging dataset.  The staging dataset is allocated and the    *\n*       DCB used to write to it is opened.  On each successive        *\n*       iteration the next block is received and written to the       *\n*       stage dataset.  When the last block has been received, the    *\n*       sender will notify us by a \"LAST\" indicator.                  *\n*                                                                     *\n*       When a dataset we previously transmitted to a partner has     *\n*       been restored by the partner, we will be notified of the      *\n*       success or failure of the RESTORE.  The partner will send     *\n*       the request's identification number and the status of the     *\n*       restore.  We must update the status of the request to this    *\n*       node.  If this is the last (or only) node to respond with     *\n*       the RESTORE status, the request can be flagged complete.      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSRECV    FXPRFX 'FILE TRANSMISSION RECEIVE'\nFXSRECV  AMODE 31\nFXSRECV  RMODE ANY\n         B     RECV0000\nDXDSTART DC    Q(DXDSRECV)           DISPLACEMENT TO WORK AREA\nRECV0000 DS    0H\n         LA    R4,2048(R12)          SET 2ND BASE\n         LA    R4,2048(R4)           SET 2ND BASE\n         USING FXSRECV,R12,R4        DEFINE BASE REGISTER\n         LR    R8,R1                 COPY PARM ADDRESS\n         USING VTAMBLOK,R8           DEFINE BASE\n         L     R7,VTAMSESS           SESSION BLOCK'S ADDRESS\n         USING SESSBLOK,R7           DEFINE BASE\n         L     R6,VTAMCONV           CONVERSATION BLOCK'S ADDRESS\n         USING CONVBLOK,R6           DEFINE BASE\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    RECV0010              YES\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         MVI   PRTCC,C' '            INITIALIZE PRINT I/O AREA\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         GETMAIN RU,                 ACQUIRE 24-BIT PARM BLOCK         +\n               LV=FX24L,             .. AREA SIZE                      +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,DXD24              SAVE 24-BIT WORK AREA ADDRESS\n         ITRACE ID=FX24PRM,          24-BIT WORK AREA ACQUIRED         +\n               RDATA1=R1             .. SAVE WORK AREA'S ADDRESS\n*---------------------------------------------------------------------*\n*                                                                     *\n*        This is a receive conversation.                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nRECV0010 DS    0H\n         TM    COMMEOJ,$EOJ3         SHUTDOWN PHASE 3?\n         BO    EXIT0000              YES\n         L     R9,DXD24              24-BIT PARM AREA ADDRESS\n         USING FX24PRM,R9            DEFINE BASE\n         ITRACE ID=LASTFUNC,         TRACE 'LAST FUNCTION'             +\n               DATA1=CONVFUNC        ..\n         CLI   CONVFUNC,0            ANY FUNCTION?\n         BNE   RECV0020              YES\n         ITRACE ID=1STRECV           STARTING A NEW RECEIVE PROCESS\n         L     R1,CONVDCB            DCB'S ADDRESS\n         L     R15,ADCBWI            'WRITE' DCB ADDRESS\n         MVC   0(DCBWL,R1),0(R15)    INITIALIZE 'WRITE' DCB\n         B     RECV0290\nRECV0020 DS    0H\n         ITRACE ID=RECVCONT,         CONTINUATION OF RECEIVE END       +\n               DATA1=SESSNAME,       .. LU NAME                        +\n               RDATA2=R6             .. CONVERSATION BLOCK'S ADDRESS\n         CLI   CONVFUNC,$CONVFC      LAST FUNCTION A SEND CONFIRM?\n         BE    RECV0530              YES\n         CLI   CONVFUNC,$CONVFR      LAST FUNCTION A VTAM RECEIVE?\n         BE    RECV0050              YES\n         CLI   CONVFUNC,$CONVFS      LAST FUNCTION A VTAM SEND?\n         BE    RECV0280              YES..\n         L     R2,CONVDECB           DECB ADDRESS\n         TM    0(R2),X'40'           ECB POSTED?\n         BNO   EXIT0010              NO.. NOTHING FURTHER TO DO HERE\n         ST    R2,DECB24             SET DECB ADDRESS\n         FX24  $CHECK                ISSUE CHECK\n         ITRACE ID=BSAMWTDN          BSAM WRITE COMPLETE\n         NI    CONVSTAT,255-$CONVPND WRITE IS NO LONGER PENDING\n         ICM   R1,15,CONVCKPT        NUMBER OF WRITES\n         LA    R1,1(R1)              PLUS 1\n         STCM  R1,15,CONVCKPT        SAVE TOTAL WRITES\n         SR    R0,R0                 CLEAR REGISTER\n         D     R0,F100               DIVIDE BY 100\n         LTR   R0,R0                 TIME FOR A CHECKPOINT?\n         BNZ   RECV0290              NO\n         MVC   DCB24,CONVDCB         SET DCB ADDRESS\n         FX24  $NOTE                 ISSUE NOTE\n         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)\n         MVC   MSTRREC#,CONVREC#     SET RECORD NUMBER\n         BAL   R14,MSTR0000          READ MASTER FILE RECORD\n         USING REQBLOK,R5            DEFINE BASE\n         LA    R3,REQNDENM           FIRST NODE NAME\n         USING REQNDENM,R3           DEFINE BASE\nRECV0030 DS    0H\n         CLC   REQNDENM,COMMAPLN     RIGHT NODE?\n         BE    RECV0040              YES\n         LA    R3,REQNDEL(R3)        NEXT NODE\n         B     RECV0030              LOOP\nRECV0040 DS    0H\n         MVC   REQNDECR,CONVCKPT     SAVE RECORD NUMBER\n         MVC   REQNDECT,TTR24        SAVE TTR\n         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)\n         BAL   R14,MSTR0000          READ MASTER FILE RECORD\n         B     RECV0290              ISSUE ANOTHER RECEIVE\n         DROP  R3\n*---------------------------------------------------------------------*\n*        A RECEIVE is pending.                                        *\n*---------------------------------------------------------------------*\nRECV0050 DS    0H\n         TM    CONVSTAT,$CONVPND     STILL PENDING?\n         BO    EXIT0010              YES.. NOTHING FURTHER TO DO NOW\n         MVI   VTAMCMD,$VTAMCHK      SET COMMAND (ISSUE A CHECK)\n         BAL   R14,VSUB0000          LINK TO VSUB\n         L     R1,CONVRPLX           RPL EXTENSION'S ADDRESS\n         USING ISTRPL6X,R1           DEFINE BASE\n         OC    RPL6RC,RPL6RC         ALL ZEROS?\n         BNZ   ERR0010               NO\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         USING USERREQ,R2            DEFINE BASE\n         ITRACE ID=RECVDONE,         VTAM RECEIVE COMPLETED            +\n               DATA1=USERMOD         .. DATA FROM THE RECEIVE\n         CLC   RESTART,USERMOD       RESTART?\n         BE    RECV0320              YES\n         CLC   RESTORE,USERMOD       RESTORE NOTIFICATION?\n         BE    RECV0400              YES\n         CLC   LAST,USERMOD          LAST RECORD?\n         BE    RECV0260              YES\n         CLC   XFER,USERMOD          REQUEST BEING TRANSFERRED TO US?\n         BE    RECV0230              YES\n         CLC   NULL,USERMOD          NULL (USED TO ASK FOR A CONFIRMED)\n         BE    RECV0270              YES\n         TM    RPL6RCV1,RPL6WDAL     DE-ALLOCATE RECEIVED?\n         BO    RECV0300              YES.. ERROR\n         CLC   FIRST,USERMOD         FIRST RECORD?\n         BE    RECV0060              YES\n*---------------------------------------------------------------------*\n*        Another DATA record has been received.                       *\n*        Start the WRITE to the staging dataset.                      *\n*---------------------------------------------------------------------*\n         ITRACE ID=RECVDATA\n         MVC   DCB24,CONVDCB         SET DCB ADDRESS\n         SR    R0,R0                 CLEAR REGISTER\n         ICM   R0,3,USERLEN          DATA LENGTH\n         SH    R0,=Y(USERIO-USERREQ) MINUS CONTROL DATA LENGTH\n         STCM  R0,3,LRECL24          PASS LENGTH TO FX24\n         LA    R0,USERIO             DATA ADDRESS\n         ST    R0,IOA24              SET I/O AREA ADDRESS\n         MVC   DECB24,CONVDECB       SET DECB ADDRESS\n         FX24  $WRITE                START WRITE\n         MVI   CONVFUNC,$CONVFB      LAST FUNCTION WAS BSAM\n         OI    CONVSTAT,$CONVPND     WRITE IS PENDING\n         B     EXIT0010              EXIT\n*---------------------------------------------------------------------*\n*        This is the first record for a new dataset being transmitted *\n*        to us.  First locate an available record on the master file  *\n*        to save the master file record in the I/O area, then         *\n*        allocate the staging dataset and open the DCB.               *\n*---------------------------------------------------------------------*\nRECV0060 DS    0H\n         ITRACE ID=RECV1ST\n         XC    MSTRREC#,MSTRREC#     INITIALIZE RECORD NUMBER\n         B     RECV0080\nRECV0070 DS    0H\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,MSTRREC#         CURRENT MASTER FILE RECORD NUMBER\n         LA    R1,1(R1)              NEXT MASTER FILE NUMBER\n         STCM  R1,3,MSTRREC#         SAVE NEW RECORD NUMBER\nRECV0080 DS    0H\n         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)\n         BAL   R14,MSTR0000          READ MASTER FILE RECORD\n         USING REQBLOK,R5            DEFINE BASE\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         LA    R2,USERDATA+DCBWL                  REQUEST BLOCK ADDRESS\n         ITRACE ID=XREQBLOK,RDATA1=R2\n         CLC   COMMAPLN,REQENODE-REQBLOK(R2)   ORIGINALLY ENTERED HERE?\n         BNE   RECV0090                        NO.. FIND AVAILABLE RECD\n         CLC   REQENODE,REQENODE-REQBLOK(R2)   ENTRY NODES MATCH?\n         BNE   RECV0070                        NO\n         CLC   REQNBR,REQNBR-REQBLOK(R2)       ID'S MATCH?\n         BNE   RECV0070                        NO\n         MVC   REQFSIZE,REQFSIZE-REQBLOK(R2)   SAVE STAGE DATASET SIZE\n         MVC   REQUTIL,REQUTIL-REQBLOK(R2)     SAVE UTILITY USED\n         B     RECV0110\nRECV0090 DS    0H\n         CLI   REQSTAT,$REQFREE      AVAILABLE RECORD?\n         BH    RECV0070              NO\n         LA    R0,REQESTOR-REQBLOK(R2)   DATA ADDRESS (INPUT)\n         LA    R1,REQNDENM-REQESTOR  LENGTH\n         LA    R14,REQESTOR          DATA ADDRESS (OUTPUT)\n         LR    R15,R1                DATA LENGTH\n         MVCL  R14,R0                COPY DATA TO MASTER FILE\n         LA    R14,REQNDENM-REQBLOK(R2)\n         LA    R3,REQNDENM           FIRST OUTPUT NODE NAME\n         USING REQNDENM,R3           DEFINE BASE\n         LA    R15,$MAXNODE          NUMBER OF NODES\nRECV0100 DS    0H\n         MVC   REQNDENM,0(R14)       COPY NODE NAME\n         MVI   REQNDEST,0            INITIALIZE NODE STATUS\n         ZAP   REQNDETD,P0           INITIALIZE TRANSMISSION DATE\n         XC    REQNDETT,REQNDETT     INITIALIZE TRANSMISSION TIME\n         ZAP   REQNDERD,P0           INITIALIZE RESTORE NOTIFY DATE\n         XC    REQNDERT,REQNDERT     INITIALIZE RESTORE NOTIFY TIME\n         XC    REQNDECR,REQNDECR     INITIALIZE CHECKPOINT RECORD\n         XC    REQNDECT,REQNDECT     INITIALIZE CHECKPOINT TTR\n         LA    R3,REQNDEL(R3)        NEXT NODE\n         LA    R14,REQNDEL(R14)      NEXT NODE\n         BCT   R15,RECV0100          LOOP\n         DROP  R3\nRECV0110 DS    0H\n         MVC   CONVREC#,MSTRREC#     SAVE MASTER FILE RECORD NUMBER\n         MVI   REQSTAT,$REQRECV      DATA SET BEING RECEIVED\n         MVC   REQIDSNM,COMMBLKS     CLEAR SYSIN DATASET NAME\n         MVC   REQSDSNM,COMMBLKS     CLEAR SYSPRINT DATASET NAME\n*---------------------------------------------------------------------*\n*                                                                     *\n*      Before accepting the request:                                  *\n*        1) Make sure the data set does not exceed our MAXSIZE        *\n*        2) Convert external userids to local ids                     *\n*        3) Make sure the user has access to the data set being       *\n*           received.                                                 *\n*        4) If this is a full data set transmit:                      *\n*           a) if REPLACE=N, make sure the data set is not already    *\n*              cataloged.                                             *\n*           b) make sure there is a RESTORE statement that covers     *\n*              the data set name.                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         CLC   REQFSIZE,COMMMAX      TOO LARGE?\n         BH    ERR0100               YES\n         ICM   R15,15,COMMXUSR       FIRST EXTERNAL ID BLOCK\n         BZ    RECV0150              NO EXTERNAL ID BLOCKS\n         USING XUSRBLOK,R15          DEFINE XUSRBLOK BASE\nRECV0120 DS    0H\n         CLC   XUSRSMF,SESSSMF       SMF ID MATCH?\n         BNE   RECV0130              NO\n         CLC   XUSRID1,REQESTOR      USER ID MATCH?\n         BE    RECV0140              YES\nRECV0130 DS    0H\n         ICM   R15,15,XUSRNEXT       NEXT EXTERNAL USER BLOCK\n         BZ    RECV0150              NO MATCHES\n         B     RECV0120              LOOP\nRECV0140 DS    0H\n         MVC   REQESTOR,XUSRID2      CHANGE TO LOCAL ID\nRECV0150 DS    0H\n         L     R1,ARACL              RACF LIST FORM ADDRESS\n         MVC   DXDRACL(RACLL),0(R1)  COPY LIST FORM\n         STM   R2,R5,DXDRACSV        SAVE REGISTERS USED BY RACROUTE\n         LA    R2,DSCLASS            'CLASS'\n         LA    R3,REQODSNM           'RESOURCE'\n         CLC   REQDDSNM,COMMBLKS     DESTINATION NAME BLANK?\n         BE    RECV0160              YES\n         LA    R3,REQDDSNM           CHANGE TO DESTINATION NAME\nRECV0160 DS    0H\n         LA    R15,REQESTOR          'USER ID' (THIRD PARTY CHECK)\n         LA    R5,SAFWORK            SAF WORK AREA ADDRESS\n         CLC   REQOMEM,COMMBLKS      PDS MEMBER?\n         BE    RECV0170              NO\n         RACROUTE REQUEST=AUTH,      CHECK USER'S ACCESS AUTHORITY     +\n               ATTR=UPDATE,          .. UPDATE LEVEL REQUIRED          +\n               CLASS=(R2),           .. CLASS                          +\n               ENTITY=((R3)),        .. RESOURCE                       +\n               USERID=(R15),         .. USER ID (THIRD PARTY CHECK)    +\n               WORKA=(R5),           .. SAF WORK AREA                  +\n               RELEASE=1.8.1,        .. 1.8.1 PARM LIST FORMAT         +\n               MF=(E,DXDRACL)        .. EXECUTE FORM/LIST FORM ADDRESS\n         B     RECV0180\nRECV0170 DS    0H\n         RACROUTE REQUEST=AUTH,      CHECK USER'S ACCESS AUTHORITY     +\n               ATTR=ALTER,           .. ALTER LEVEL REQUIRED           +\n               CLASS=(R2),           .. CLASS                          +\n               ENTITY=((R3)),        .. RESOURCE                       +\n               USERID=(R15),         .. USER ID (THIRD PARTY CHECK)    +\n               WORKA=(R5),           .. SAF WORK AREA                  +\n               RELEASE=1.8.1,        .. 1.8.1 PARM LIST FORMAT         +\n               MF=(E,DXDRACL)        .. EXECUTE FORM/LIST FORM ADDRESS\nRECV0180 DS    0H\n         LM    R2,R5,DXDRACSV        RESTORE REGISTERS\n         ITRACE ID=AUTHRC,           TRACE RETURN CODE                 +\n               RDATA1=R15            .. RETURN CODE\n         CH    R15,H4                0=AUTHORIZED, 4=UNPROTECTED\n         BH    ERR0110               .. USER DOES NOT HAVE ACCESS\n         CLC   REQOMEM,COMMBLKS      MEMBER NAME PRESENT?\n         BNE   RECV0220              YES.. NOT A FULL DATA SET\n         MVC   DSN24,REQODSNM        ASSUME NO NEW NAME\n         CLC   REQDDSNM,COMMBLKS     NEW NAME PRESENT?\n         BE    RECV0190              NO\n         MVC   DSN24,REQDDSNM        USE NEW NAME\nRECV0190 DS    0H\n         CLI   REQREPL,C'Y'          REPLACE?\n         BE    RECV0200              YES\n         FX24  $LOCATE               ISSUE LOCATE\n         ITRACE ID=LOCATERC,         TRACE LOCATE RETURN CODE          +\n               RDATA1=R15\n         LTR   R15,R15               SUCCESSFUL?\n         BZ    ERR0130               YES.. DATA SET ALREADY EXISTS\nRECV0200 DS    0H\n         ICM   R15,15,COMMRSTR       FIRST RESTORE BLOCK\n         BZ    ERR0120               NO RESTORE BLOCKS\n         USING RSTRBLOK,R15          DEFINE RSTRBLOK BASE\nRECV0210 DS    0H\n         CLC   DEFAULT,RSTRDSN       IS THIS THE DEFAULT ENTRY?\n         BE    RECV0220              YES.. MATCHES ANY DATA SET\n         LH    R1,RSTRDSNL           DATA SET NAME PREFIX LENGTH\n         BCTR  R1,0                  MINUS 1\n         EX    R1,DSNCLC             DATA SET PREFIX MATCH?\n         BE    RECV0220              YES\n         ICM   R15,15,RSTRNEXT       NEXT RESTORE BLOCK\n         BZ    ERR0120               NO RESTORE BLOCK\n         B     RECV0210              LOOP\nDSNCLC   CLC   RSTRDSN(0),DSN24      CHECK DATA SET NAME PREFIX\nRECV0220 DS    0H\n         FXCALL FXSDAIR,ALLOCATE,    CALL FXSDAIR TO ALLOCATE          +\n               STAGING,              .. TYPE IS STAGING                +\n               ,,                    .. DDNAME AND DSN OMITTED         +\n               REQFSIZE              .. SIZE IN TRACKS\n         OC    DAIRR15,DAIRR15       STAGING DATASET ALLOCATED?\n         BNZ   ERR0020               NO\n         MVC   REQWDSNM,DAIRDSN      SAVE STAGING DATASET NAME\n         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)\n         BAL   R14,MSTR0000          UPDATE MASTER FILE RECORD\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         USING USERREQ,R2            DEFINE BASE\n         LA    R1,USERDATA           INPUT DCB PASSED BY OTHER END\n         ITRACE ID=OPENOPUT,         OPENING STAGING FILE              +\n               DATA1=DAIRDDN         .. DD NAME RETURNED BY DAIR\n         L     R14,CONVDCB           DCB'S ADDRESS\n         USING IHADCB,R14            DEFINE BASE\n         MVC   DCBDDNAM,DAIRDDN      SET DDNAME\n         MVC   DCBBLKSI,DCBBLKSI-IHADCB(R1)    COPY BLOCK SIZE\n         MVC   DCBLRECL,DCBBLKSI-IHADCB(R1)    SAME LRECL AS BLOCK SIZE\n         MVC   DCBRECFM,DCBRECFM-IHADCB(R1)    COPY RECORD FORMAT\n         ST    R14,DCB24             SET DCB ADDRESS\n         FX24  $OPENO                OPEN THE DCB\n         XC    CONVCKPT,CONVCKPT     INITIALIZE NUMBER OF WRITES\n         L     R1,AMSG01             MESSAGE ADDRESS\n         MVC   PRTMSGID(MSG01L),0(R1)\n         MVC   PRTMSGID+(MSG01NDE-MSG01)(L'MSG01NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG01NBR-MSG01)(L'MSG01NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG01NDT-MSG01)(L'MSG01NDT),REQTNODE\n         BAL   R14,PRT0000           PRINT MESSAGE\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         USING USERREQ,R2            DEFINE BASE\n         MVI   USERRC,0              SET RETURN CODE\n         MVI   VTAMCMD,$VTAMSND      SET COMMAND (SEND)\n         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE SEND\n         B     EXIT0010              AND EXIT\n*---------------------------------------------------------------------*\n*        This is a request for us to transmit that was entered at     *\n*        another node and is now being transferred to us.             *\n*---------------------------------------------------------------------*\nRECV0230 DS    0H\n         ITRACE ID=RECVXFER\n         TM    RPL6RCV1,RPL6WDAL     DE-ALLOCATE RECEIVED?\n         BNO   ERR0060               NO.. ERROR\n         TM    RPL6RCV1,RPL6WCFM     CONFIRM REQUEST RECEIVED?\n         BNO   ERR0080               NO.. ERROR\n         XC    MSTRREC#,MSTRREC#     INITIALIZE RECORD NUMBER\n         B     RECV0250\nRECV0240 DS    0H\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,MSTRREC#         CURRENT MASTER FILE RECORD NUMBER\n         LA    R1,1(R1)              NEXT MASTER FILE NUMBER\n         STCM  R1,3,MSTRREC#         SAVE NEW RECORD NUMBER\nRECV0250 DS    0H\n         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)\n         BAL   R14,MSTR0000          READ MASTER FILE RECORD\n         USING REQBLOK,R5            DEFINE BASE\n         CLI   REQSTAT,$REQFREE      AVAILABLE RECORD?\n         BH    RECV0240              NO\n         MVC   CONVREC#,MSTRREC#     SAVE MASTER FILE RECORD NUMBER\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         LA    R0,USERDATA+L'REQREC# DATA ADDRESS (INPUT)\n         LA    R1,REQBLOKL-L'REQREC# LENGTH MINUS LENGTH OF RECORD #\n         LA    R14,REQBLOK+L'REQREC# DATA ADDRESS (OUTPUT)\n         LR    R15,R1                DATA LENGTH\n         MVCL  R14,R0                COPY DATA TO MASTER FILE\n         MVI   REQSTAT,$REQINIT      CHANGE STATUS TO 'INITIAL'\n         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)\n         BAL   R14,MSTR0000          UPDATE MASTER FILE RECORD\n         L     R1,AMSG02             MESSAGE ADDRESS\n         MVC   PRTMSGID(MSG02L),0(R1)\n         MVC   PRTMSGID+(MSG02NDE-MSG02)(L'MSG02NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG02NBR-MSG02)(L'MSG02NBR),DXDDWORD+4\n         BAL   R14,PRT0000           PRINT MESSAGE\n         B     RECV0520              EXIT\n*---------------------------------------------------------------------*\n*        The LAST record for a dataset has been received.             *\n*        Close the DCB, de-allocate the staging dataset, and          *\n*        flag the request in the master file.                         *\n*---------------------------------------------------------------------*\nRECV0260 DS    0H\n         ITRACE ID=RECVLAST\n         TM    RPL6RCV1,RPL6WDAL     DE-ALLOCATE RECEIVED?\n         BNO   ERR0060               NO.. ERROR\n         TM    RPL6RCV1,RPL6WCFM     CONFIRM REQUEST RECEIVED?\n         BNO   ERR0080               NO.. ERROR\n         MVC   DCB24,CONVDCB         COPY DCB ADDRESS\n         FX24  $CLOSE                SET COMMAND\n         L     R14,CONVDCB           DCB'S ADDRESS\n         USING IHADCB,R14            DEFINE BASE\n         FXCALL FXSDAIR,RELEASE,,DCBDDNAM   RELEASE THE DATA SET\n         OC    DAIRR15,DAIRR15       RELEASE SUCCESSFUL?\n         BNZ   ERR0040               NO\n         MVC   MSTRREC#,CONVREC#     SET RECORD NUMBER\n         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)\n         BAL   R14,MSTR0000          READ MASTER FILE\n         USING REQBLOK,R5            DEFINE BASE\n         MVI   REQSTAT,$REQRCVD      DATASET STATUS IS RECEIVED\n         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)\n         BAL   R14,MSTR0000          LINK TO MASTER FILE MODULE\n         L     R1,AMSG03             MESSAGE ADDRESS\n         MVC   PRTMSGID(MSG03L),0(R1)\n         MVC   PRTMSGID+(MSG03NDE-MSG03)(L'MSG03NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG03NBR-MSG03)(L'MSG03NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG03NDT-MSG03)(L'MSG03NDT),REQTNODE\n         BAL   R14,PRT0000           PRINT MESSAGE\n         MVI   VTAMCMD,$VTAMCFM      ISSUE A SEND CONFIRMED\n         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE RECEIVE\n         B     EXIT0010              AND EXIT\n*---------------------------------------------------------------------*\n*        A 'NULL' record has been received.                           *\n*---------------------------------------------------------------------*\nRECV0270 DS    0H\n         ITRACE ID=RECVNULL\n         TM    RPL6RCV1,RPL6WDAL     DE-ALLOCATE RECEIVED?\n         BNO   ERR0060               NO.. ERROR\n         TM    RPL6RCV1,RPL6WCFM     CONFIRM REQUEST RECEIVED?\n         BNO   ERR0080               NO.. ERROR\n         MVI   VTAMCMD,$VTAMCFM      ISSUE A SEND CONFIRMED\n         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE RECEIVE\n         B     EXIT0010              AND EXIT\n*---------------------------------------------------------------------*\n*        SEND (reply to initial (1ST ) record) has completed          *\n*---------------------------------------------------------------------*\nRECV0280 DS    0H\n         TM    CONVSTAT,$CONVPND     STILL PENDING?\n         BO    EXIT0010              YES.. NOTHING FURTHER TO DO NOW\n         ITRACE ID=SENDDONE\n         MVI   VTAMCMD,$VTAMCHK      SET COMMAND (CHECK)\n         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE CHECK\n         L     R1,CONVRPLX           RPL EXTENSION'S ADDRESS\n         USING ISTRPL6X,R1           DEFINE BASE\n         OC    RPL6RC,RPL6RC         ALL ZEROS?\n         BNZ   ERR0010               NO\n         L     R2,CONVIOA            I/O AREA ADDRESS\n*---------------------------------------------------------------------*\n*        Issue another RECEIVE on the conversation                    *\n*---------------------------------------------------------------------*\nRECV0290 DS    0H\n         ITRACE ID=RECEIVE\n         MVI   VTAMCMD,$VTAMRCV      SET COMMAND (RECEIVE)\n         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE RECEIVE\n         B     EXIT0010              AND EXIT\n*---------------------------------------------------------------------*\n*        The primary end has de-allocated the conversation.           *\n*        Receive was not complete.  Delete the stage dataset          *\n*        and set the status in the master file.                       *\n*---------------------------------------------------------------------*\nRECV0300 DS    0H\n         ITRACE ID=DEALLOC\n         OC    CONVREC#,CONVREC#     MASTER FILE RECORD PRESENT?\n         BZ    RECV0310              NO\n         L     R1,AMSG04             MESSAGE ADDRESS\n         MVC   PRTMSGID(MSG04L),0(R1) INITIALIZE MESSAGE\n         MVC   PRTMSGID+(MSG04NDE-MSG04)(L'MSG04NDE),SESSNAME\n         BAL   R14,PRT0000           PRINT MESSAGE\n         OC    CONVREC#,CONVREC#     MASTER FILE RECORD PRESENT?\n         BZ    RECV0310              NO\n         L     R14,CONVDCB           DCB'S ADDRESS\n         USING IHADCB,R14            DEFINE BASE\n         ST    R14,DCB24             COPY DCB ADDRESS\n         FX24  $CLOSE                SET COMMAND\n         FXCALL FXSDAIR,DELETE,,DCBDDNAM  DELETE THE DATA SET\n         OC    DAIRR15,DAIRR15       DELETE SUCCESSFUL?\n         BNZ   ERR0050               NO\n         MVC   MSTRREC#,CONVREC#     SET RECORD NUMBER\n         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)\n         BAL   R14,MSTR0000          READ MASTER FILE\n         USING REQBLOK,R5            DEFINE BASE\n         MVI   REQSTAT,$REQRCVE      ERROR DURING RECEIVE\n         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)\n         BAL   R14,MSTR0000          LINK TO MASTER FILE MODULE\n         L     R1,AMSG05             MESSAGE ADDRESS\n         MVC   PRTMSGID(MSG05L),0(R1) INITIALIZE MESSAGE\n         MVC   PRTMSGID+(MSG05NDE-MSG05)(L'MSG05NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG05NBR-MSG05)(L'MSG05NBR),DXDDWORD+4\n         BAL   R14,PRT0000           PRINT MESSAGE\nRECV0310 DS    0H\n         MVC   VTAMCONV,CONVNEXT     SET 'NEXT' ADDRESS FOR FXVTAM\n         FXCALL FXSCONV,DELETE,      DELETE THE CONVERSATION BLOCK     +\n               (R6),                 .. CONVBLOK'S ADDRESS             +\n               (R7)                  .. SESSBLOK'S ADDRESS\n         B     EXIT0020              AND EXIT\n*---------------------------------------------------------------------*\n*        A session was lost previously.  The sender is now restarting *\n*        the transmission.  The sender and receivers checkpoint every *\n*        100 records.  First we must locate the master record for     *\n*        request.  The stage data set was allocated when the transmit *\n*        originally started.  Once we have found the master record,   *\n*        the checkpoint data can be used to POINT to the corresponding*\n*        stage data set record, and we can begin the receive again.   *\n*---------------------------------------------------------------------*\nRECV0320 DS    0H\n         ITRACE ID=RESTART\n         XC    MSTRREC#,MSTRREC#     INITIALIZE RECORD NUMBER\n         B     RECV0340\nRECV0330 DS    0H\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,MSTRREC#         CURRENT MASTER FILE RECORD NUMBER\n         LA    R1,1(R1)              NEXT MASTER FILE NUMBER\n         STCM  R1,3,MSTRREC#         SAVE NEW RECORD NUMBER\nRECV0340 DS    0H\n         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)\n         BAL   R14,MSTR0000          READ MASTER FILE RECORD\n         USING REQBLOK,R5            DEFINE BASE\n         CLI   REQSTAT,0             UNUSED RECORD?\n         BE    ERR0090               YES.. NOT ON MASTER FILE\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         LA    R2,USERDATA+DCBWL     REQUEST BLOCK ADDRESS\n         ITRACE ID=XREQBLOK,RDATA1=R2\n         CLC   REQENODE,REQENODE-REQBLOK(R2)   ENTRY NODES MATCH?\n         BNE   RECV0330                        NO\n         CLC   REQNBR,REQNBR-REQBLOK(R2)       ID'S MATCH?\n         BNE   RECV0330                        NO\n         MVC   CONVREC#,MSTRREC#     SAVE MASTER FILE RECORD NUMBER\n         LA    R3,REQNDENM           FIRST NODE\n         USING REQNDENM,R3           DEFINE BASE\nRECV0350 DS    0H\n         CLC   REQNDENM,COMMAPLN     RIGHT DESTINATION?\n         BE    RECV0360              YES\n         LA    R3,REQNDEL(R3)        NEXT NODE\n         B     RECV0350              LOOP\nRECV0360 DS    0H\n         LA    R14,REQNDENM-REQBLOK(R2)   FIRST NODE IN RESTART DATA\nRECV0370 DS    0H\n         CLC   COMMAPLN,0(R14)       RIGHT DESTINATION?\n         BE    RECV0380              YES\n         LA    R14,REQNDEL(R14)      NEXT DESTINATION\n         B     RECV0370              LOOP\nRECV0380 DS    0H\n         ST    R14,DXDNDEDA          SAVE NODE DATA ADDRESS\n         FXCALL FXSDAIR,ALLOCATE,    CALL FXSDAIR TO ALLOCATE          +\n               DATASET,              .. TYPE IS EXISTING DATA SET      +\n               ,                     .. DDNAME WILL BE GENERATED       +\n               REQWDSNM              .. DATA SET NAME\n         L     R14,CONVDCB           DCB ADDRESS\n         ST    R14,DCB24              SET DCB ADDRESS\n         MVC   DCBDDNAM,DAIRDDN      COPY DD NAME\n         L     R1,CONVIOA            I/O AREA ADDRESS\n         LA    R1,USERDATA-USERREQ(R1) INPUT DCB PASSED BY OTHER END\n         MVC   DCBDDNAM,DAIRDDN      SET DDNAME\n         MVC   DCBBLKSI,DCBBLKSI-IHADCB(R1)    COPY BLOCK SIZE\n         MVC   DCBLRECL,DCBBLKSI-IHADCB(R1)    SAME AS BLOCK SIZE\n         MVC   DCBRECFM,DCBRECFM-IHADCB(R1)    COPY RECORD FORMAT\n         FX24  $OPENO                OPEN THE DCB\n         L     R14,DXDNDEDA          RESTORE NODE DATA ADDRESS\n         CLC   REQNDECR,REQNDECR-REQNDENM(R14)  CHECKPOINT DATA MATCH?\n         BNE   RECV0390              NO\n         ITRACE ID=GOSTRT            RESTART IS A GO\n         MVC   TTR24,REQNDECT        COPY CHECK POINT DATA\n         MVC   CONVCKPT,REQNDECR     COPY CHECK POINT RECORD NUMBER\n         FX24  $POINT                ISSUE POINT TO RE-POSITION\n         L     R1,AMSG11             MESSAGE ADDRESS\n         MVC   PRTMSGID(MSG11L),0(R1)\n         MVC   PRTMSGID+(MSG11NDE-MSG11)(L'MSG11NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG11NBR-MSG11)(L'MSG11NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG11NDT-MSG11)(L'MSG11NDT),REQTNODE\n         ICM   R1,15,REQNDECR-REQNDENM(R14)     CHECKPOINT RECORD #\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG11REC-MSG11)(L'MSG11REC),DXDDWORD+4\n         BAL   R14,PRT0000           PRINT MESSAGE\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         MVI   USERRC,0              RETURN 'GO' STATUS\n         MVI   VTAMCMD,$VTAMSND      SET COMMAND (SEND)\n         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE SEND\n         B     EXIT0010              AND EXIT\nRECV0390 DS    0H\n         ITRACE ID=NOGOSTRT          RESTART IS A NO-GO\n         XC    REQNDECR,REQNDECR     CLEAR CHECKPOINT RECORD\n         XC    REQNDECT,REQNDECT     CLEAR CHECKPOINT TTR\n         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)\n         BAL   R14,MSTR0000          UPDATE MASTER FILE\n         L     R1,AMSG13             MESSAGE ADDRESS\n         MVC   PRTMSGID(MSG13L),0(R1)\n         MVC   PRTMSGID+(MSG13NDE-MSG13)(L'MSG13NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG13NBR-MSG13)(L'MSG13NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG13NDT-MSG13)(L'MSG13NDT),REQTNODE\n         BAL   R14,PRT0000           PRINT MESSAGE\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         MVI   USERRC,8              RETURN 'NO-GO' STATUS\n         MVI   VTAMCMD,$VTAMSND      SET COMMAND (SEND)\n         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE SEND\n         B     EXIT0010              AND EXIT\n         DROP  R3\n*---------------------------------------------------------------------*\n*        A restore notification has been received.  Update the        *\n*        master file with the success or failure indication.          *\n*                                                                     *\n*        If this is the last node to return the restore status,       *\n*        the over-all status may be set to 'complete'.                *\n*---------------------------------------------------------------------*\nRECV0400 DS    0H\n         ITRACE ID=RSTRRECV\n         TM    RPL6RCV1,RPL6WDAL     DE-ALLOCATE RECEIVED?\n         BNO   ERR0060               NO.. ERROR\n         TM    RPL6RCV1,RPL6WCFM     CONFIRM REQUEST RECEIVED?\n         BNO   ERR0080               NO.. ERROR\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         LA    R2,USERDATA           MASTER RECORD RETURNED\n         XC    MSTRREC#,MSTRREC#     START AT FIRST RECORD\n         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)\nRECV0410 DS    0H\n         BAL   R14,MSTR0000          READ MASTER FILE\n         USING REQBLOK,R5            DEFINE BASE\n         CLI   REQSTAT,$REQFREE      UNUSED RECORD?\n         BL    RECV0510              RECORD IS NOT ON FILE\n         CLC   REQENODE,REQENODE-REQBLOK(R2)    SAME ENTRY NODE?\n         BNE   RECV0420                         NO\n         CLC   REQNBR,REQNBR-REQBLOK(R2)        SAME REQUEST NUMBER?\n         BE    RECV0430                         YES.. MUST BE IT\nRECV0420 DS    0H\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,MSTRREC#         CURRENT MASTER RECORD NUMBER\n         LA    R1,1(R1)              PLUS 1\n         STCM  R1,3,MSTRREC#         SAVE UPDATED NUMBER\n         B     RECV0410              READ NEXT MASTER RECORD\nRECV0430 DS    0H\n         LA    R3,REQNDENM           FIRST NODE NAME\n         USING REQNDENM,R3           DEFINE BASE\n         SR    R15,R15               CLEAR REGISTER\n         ICM   R15,3,REQNDE#         NUMBER OF NODES\nRECV0440 DS    0H\n         CLC   SESSNAME,REQNDENM     FOR THIS NODE?\n         BE    RECV0450              YES\n         LA    R3,REQNDEL(R3)        NEXT NODE\n         BCT   R15,RECV0440          LOOP\n         B     ERR0070               NODE NOT IN DESTINATION LIST\nRECV0450 DS    0H\n         TIME  DEC\n         STCM  R1,15,REQNDERD        SET RESTORE NOTIFICATION DATE\n         STCM  R0,15,REQNDERT        SET RESTORE NOTIFICATION TIME\n         CLI   REQSTAT-REQBLOK(R2),$REQRSTC RESTORE SUCCESSFUL?\n         BE    RECV0460              YES\n         MVI   REQNDEST,$REQNDEX     ERROR DURING RESTORE\n         L     R1,AMSG06             MESSAGE ADDRESS\n         MVC   PRTMSGID(MSG06L),0(R1)\n         MVC   PRTMSGID+(MSG06NDE-MSG06)(L'MSG06NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG06NBR-MSG06)(L'MSG06NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG06NDR-MSG06)(L'MSG06NDR),REQNDENM\n         BAL   R14,PRT0000           PRINT MESSAGE\n         B     RECV0470\nRECV0460 DS    0H\n         MVI   REQNDEST,$REQNDER     RESTORE SUCCESSFUL\n         L     R1,AMSG07             MESSAGE ADDRESS\n         MVC   PRTMSGID(MSG07L),0(R1)\n         MVC   PRTMSGID+(MSG07NDE-MSG07)(L'MSG07NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG07NBR-MSG07)(L'MSG07NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG07NDR-MSG07)(L'MSG07NDR),REQNDENM\n         BAL   R14,PRT0000           PRINT MESSAGE\nRECV0470 DS    0H\n         DROP  R3\n         LA    R3,REQNDENM           FIRST NODE NAME\n         USING REQNDENM,R3           RE-DEFINE BASE\n         SR    R15,R15               CLEAR REGISTER\n         ICM   R15,3,REQNDE#         NUMBER OF NODES\nRECV0480 DS    0H\n         CLI   REQNDEST,$REQNDEC     COMPLETE OR ERROR?\n         BL    RECV0500              NO.. NOT YET COMPLETED\nRECV0490 DS    0H\n         LA    R3,REQNDEL(R3)        NEXT NODE\n         BCT   R15,RECV0480          KEEP CHECKING\n         MVI   REQSTAT,$REQDONE      ALL NODES ARE COMPLETE\n         TIME  DEC\n         STCM  R1,15,REQCDATE        SET DATE COMPLETED\n         STCM  R0,15,REQCTIME        SET TIME COMPLETED\n         L     R1,AMSG08             MESSAGE ADDRESS\n         MVC   PRTMSGID(MSG08L),0(R1)\n         MVC   PRTMSGID+(MSG08NDE-MSG08)(L'MSG08NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG08NBR-MSG08)(L'MSG08NBR),DXDDWORD+4\n         BAL   R14,PRT0000           PRINT MESSAGE\nRECV0500 DS    0H\n         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)\n         BAL   R14,MSTR0000          LINK TO MASTER FILE MODULE\n         B     RECV0520              SEND CONFIRMED\nRECV0510 DS    0H\n         L     R1,AMSG09             MESSAGE ADDRESS\n         MVC   PRTMSGID(MSG09L),0(R1)\n         MVC   PRTMSGID+(MSG09NDE-MSG09)(L'MSG09NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG09NBR-MSG09)(L'MSG09NBR),DXDDWORD+4\n         BAL   R14,PRT0000           PRINT MESSAGE\nRECV0520 DS    0H\n         MVI   VTAMCMD,$VTAMCFM      ISSUE A SEND CONFIRMED\n         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE SEND/CONFRMD\n         B     EXIT0010              AND EXIT\n*---------------------------------------------------------------------*\n*        Confirmation to DEALLOCATE/CONFIRM has completed             *\n*---------------------------------------------------------------------*\nRECV0530 DS    0H\n         TM    CONVSTAT,$CONVPND     STILL PENDING?\n         BO    EXIT0010              YES.. EXIT\n         ITRACE ID=CONFIRMD\n         MVI   VTAMCMD,$VTAMCHK      ISSUE A A CHECK\n         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE CHECK\n         MVC   VTAMCONV,CONVNEXT     SET 'NEXT' ADDRESS FOR FXVTAM\n         FXCALL FXSCONV,DELETE,      DELETE THE CONVERSATION BLOCK     +\n               (R6),                 .. CONVBLOK'S ADDRESS             +\n               (R7)                  .. SESSBLOK'S ADDRESS\n         POST  COMMVECB              SIGNAL FXVTAM TO RE-SCAN SESSIONS\n         B     EXIT0020              EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nERR0010  DS    0H\n         USING ISTRPL6X,R1           DEFINE BASE\n         ITRACE ID=VTAMERR,          VTAM ERROR OF SOME SORT           +\n               DATA1=RPL6RC          .. ERROR CODES\n         ABEND $U0057,DUMP,,USER\nERR0020  DS    0H\n         ITRACE ID=STGEFAIL,         STAGING DATASET ALLOCATE FAILED   +\n               RDATA1=R6,            .. CONVERSATION BLOCK'S ADDRESS   +\n               DATA2=MSTRREC#        .. MASTER FILE RECORD NUMBER\n         CLC   DAIRERR,=X'4714'      INSUFFICIENT SPACE AVAILABLE?\n         BNE   ERR0030               NO.. SOME OTHER ERROR\n         BAL   R14,MINIT000          RESET THIS MASTER RECORD\n         XC    CONVREC#,CONVREC#     CLEAR RECORD NUMBER\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         MVI   USERDATA,$REQNDES     INSUFFICIENT STAGING SPACE\n         MVI   USERRC,8              SET RETURN CODE\n         MVC   USERMSG,COMMBLKS      CLEAR AREA FOR MESSAGE\n         L     R1,AMSG10             MESSAGE ADDRESS\n         MVC   USERMSG(MSG10L),0(R1) SET MESSAGE\n         MVI   VTAMCMD,$VTAMSND      SET COMMAND (SEND)\n         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE SEND\n         B     EXIT0010              AND EXIT\nERR0030  DS    0H\n         ABEND 2001,DUMP,,USER\nERR0040  DS    0H\n         ITRACE ID=DAIRRELF,         DAIR RELEASE FAILED               +\n               RDATA1=R6,            .. CONVERSATION BLOCK'S ADDRESS   +\n               DATA2=MSTRREC#        .. MASTER FILE RECORD NUMBER\n         ABEND 2002,DUMP,,USER\nERR0050  DS    0H\n         ITRACE ID=DAIRDELF,         DAIR DELETE FAILED                +\n               RDATA1=R6,            .. CONVERSATION BLOCK'S ADDRESS   +\n               DATA2=MSTRREC#        .. MASTER FILE RECORD NUMBER\n         ABEND 2003,DUMP,,USER\nERR0060  DS    0H\n         ITRACE ID=NODEALLO,         'LAST'/'NULL'/'XFER' WITHOUT DALO +\n               RDATA1=R6,            .. CONVERSATION BLOCK'S ADDRESS   +\n               DATA2=MSTRREC#        .. MASTER FILE RECORD NUMBER\n         ABEND 2004,DUMP,,USER\nERR0070  DS    0H\n         ITRACE ID=BADNODE,          'RSTR' FROM NODE NOT IN NODE LIST +\n               RDATA1=R7,            .. SESSION BLOCK ADDRESS          +\n               DATA2=MSTRREC#        .. MASTER FILE RECORD NUMBER\n         ABEND 2005,DUMP,,USER\nERR0080  DS    0H\n         ITRACE ID=NCONFIRM,         'LAST'/'NULL'/'XFER' WITHOUT CNFRM+\n               RDATA1=R6,            .. CONVERSATION BLOCK'S ADDRESS   +\n               DATA2=MSTRREC#        .. MASTER FILE RECORD NUMBER\n         ABEND $U0064,DUMP,,USER\nERR0090  DS    0H\n         ITRACE ID=NOTSTART,         MASTER RECORD NOT FOUND ON RESTART+\n               DATA1=0(R2),          .. DATA SENT FROM OTHER END       +\n               DATA2=8(R2)           .. MORE OF THE DATA\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         MVI   USERDATA,$REQNDE2     MASTER RECORD NOT FOUND\n         MVC   USERMSG,COMMBLKS      CLEAR AREA FOR MESSAGE\n         L     R1,AMSG12             MESSAGE ADDRESS\n         MVC   USERMSG(MSG12L),0(R1) SET MESSAGE\n         MVI   VTAMCMD,$VTAMSND      SET COMMAND (SEND)\n         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE SEND\n         B     EXIT0010              AND EXIT\nERR0100  DS    0H\n         ITRACE ID=TOOLARGE          DATA SET EXCEEDS MAXSIZE\n         XC    CONVREC#,CONVREC#     CLEAR RECORD NUMBER\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         MVI   USERRC,8              SET RETURN CODE\n         MVI   USERDATA,$REQNDEL     TOO LARGE\n         MVC   USERMSG,COMMBLKS      CLEAR AREA FOR MESSAGE\n         L     R1,AMSG14             MESSAGE ADDRESS\n         MVC   USERMSG(MSG14L),0(R1) SET MESSAGE\n         MVC   USERMSG+(MSG14NDE-MSG14)(L'MSG14NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    USERMSG+(MSG14NBR-MSG14)(L'MSG14NBR),DXDDWORD+4\n         BAL   R14,MINIT000          INITIALIZE MASTER RECORD\n         MVI   VTAMCMD,$VTAMSND      SET COMMAND (SEND)\n         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE SEND\n         B     EXIT0010              AND EXIT\nERR0110  DS    0H\n         ITRACE ID=RACFAIL           INSUFFICIENT RACF ACCESS\n         XC    CONVREC#,CONVREC#     CLEAR RECORD NUMBER\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         MVI   USERRC,8              SET RETURN CODE\n         MVI   USERDATA,$REQNDEA     INSUFFICIENT ACCESS\n         MVC   USERMSG,COMMBLKS      CLEAR AREA FOR MESSAGE\n         L     R1,AMSG15             MESSAGE ADDRESS\n         MVC   USERMSG(MSG15L),0(R1) SET MESSAGE\n         MVC   USERMSG+(MSG15NDE-MSG15)(L'MSG15NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    USERMSG+(MSG15NBR-MSG15)(L'MSG15NBR),DXDDWORD+4\n         BAL   R14,MINIT000          INITIALIZE MASTER RECORD\n         MVI   VTAMCMD,$VTAMSND      SET COMMAND (SEND)\n         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE SEND\n         B     EXIT0010              AND EXIT\nERR0120  DS    0H\n         ITRACE ID=NORSTR            NO RESTORE DEFINITION\n         XC    CONVREC#,CONVREC#     CLEAR RECORD NUMBER\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         MVI   USERRC,8              SET RETURN CODE\n         MVI   USERDATA,$REQNDEW     NO RESTORE DEFINITION\n         MVC   USERMSG,COMMBLKS      CLEAR AREA FOR MESSAGE\n         L     R1,AMSG16             MESSAGE ADDRESS\n         MVC   USERMSG(MSG16L),0(R1)    SET MESSAGE\n         MVC   USERMSG+(MSG16NDE-MSG16)(L'MSG16NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    USERMSG+(MSG16NBR-MSG16)(L'MSG16NBR),DXDDWORD+4\n         BAL   R14,MINIT000          INITIALIZE MASTER RECORD\n         MVI   VTAMCMD,$VTAMSND      SET COMMAND (SEND)\n         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE SEND\n         B     EXIT0010              AND EXIT\nERR0130  DS    0H\n         ITRACE ID=DUPCAT            INSUFFICIENT RACF ACCESS\n         XC    CONVREC#,CONVREC#     CLEAR RECORD NUMBER\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         MVI   USERRC,8              SET RETURN CODE\n         MVI   USERDATA,$REQNDED     DUPLICATE DATA SET\n         MVC   USERMSG,COMMBLKS      CLEAR AREA FOR MESSAGE\n         L     R1,AMSG17             MESSAGE ADDRESS\n         MVC   USERMSG(MSG17L),0(R1)    SET MESSAGE\n         MVC   USERMSG+(MSG17NDE-MSG17)(L'MSG17NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    USERMSG+(MSG17NBR-MSG17)(L'MSG17NBR),DXDDWORD+4\n         BAL   R14,MINIT000          INITIALIZE MASTER RECORD\n         MVI   VTAMCMD,$VTAMSND      SET COMMAND (SEND)\n         BAL   R14,VSUB0000          LINK TO VSUB TO ISSUE SEND\n         B     EXIT0010              AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        INITIALIZE MASTER FILE RECORD                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DROP  R3\nMINIT000 DS    0H\n         ST    R14,DXDLINK           SAVE RETURN ADDRESS\n         MINIT COMMBLKS,P0,$REQFREE,R14 RESET THIS MASTER RECORD\n         L     R14,DXDLINK           RESTORE RETURN ADDRESS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        LINK TO VSUB                                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVSUB0000 DS    0H\n         ST    R14,DXDLINK           SAVE RETURN ADDRESS\n         ITRACE ID=VSUB,             LINKING TO VSUB                   +\n               DATA1=VTAMCMD         .. COMMAND\n         LR    R1,R8                 PARM BLOCK'S ADDRESS\n         L     R15,AVSUB             VSUB ENTRY POINT\n         BALR  R14,R15               LINK TO VSUB\n         L     R14,DXDLINK           RESTORE RETURN ADDRESS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Read or write master file records                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSTR0000 DS    0H\n         ST    R14,DXDLINK           SAVE RETURN ADDRESS\n         ITRACE ID=MSTRIO\n         FXCALL FXSMSTR              LINK TO MASTER FILE I/O\n         LA    R5,MSTRRECD           SET DATA ADDRESS\n         L     R14,DXDLINK           RESTORE RETURN ADDRESS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        PRINT                                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         ST    R14,DXDLINK           SAVE RETURN ADDRESS\n         ITRACE ID=PRINT\n         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE\n         L     R14,DXDLINK           RESTORE RETURN ADDRESS\n         BR    R14                   DONE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        EXIT                                                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=FREE24\n         ICM   R1,15,DXD24           24-BIT PARM AREA ADDRESS\n         BZ    EXIT0010              NO ADDRESS\n         FREEMAIN RU,A=(1),LV=FX24L FREEMAIN 24-BIT PARM AREA\n         XC    DXD24,DXD24           CLEAR 24-BIT WORK AREA ADDRESS\n         B     EXIT0020              AND EXIT\nEXIT0010 DS    0H\n         MVC   VTAMCONV,CONVNEXT     SET 'NEXT' ADDRESS FOR FXVTAM\nEXIT0020 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            CALLER'S SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE CALLER'S REGISTERS\n         SR    R15,R15               ALWAYS A GOOD RETURN CODE\n         BR    R14                   RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nADCBWI   DC    A(DCBWI)\nARACL    DC    A(RACLI)\nAMSG01   DC    A(MSG01)\nAMSG02   DC    A(MSG02)\nAMSG03   DC    A(MSG03)\nAMSG04   DC    A(MSG04)\nAMSG05   DC    A(MSG05)\nAMSG06   DC    A(MSG06)\nAMSG07   DC    A(MSG07)\nAMSG08   DC    A(MSG08)\nAMSG09   DC    A(MSG09)\nAMSG10   DC    A(MSG10)\nAMSG11   DC    A(MSG11)\nAMSG12   DC    A(MSG12)\nAMSG13   DC    A(MSG13)\nAMSG14   DC    A(MSG14)\nAMSG15   DC    A(MSG15)\nAMSG16   DC    A(MSG16)\nAMSG17   DC    A(MSG17)\nF100     DC    F'100'\nH4       DC    H'4'\nH8       DC    H'8'\nDSCLASS  DC    AL1(7),CL7'DATASET'\nDATEEDWD DC    X'40202020204B202020'\nP0       DC    P'0'\nDATA     DC    CL4'DATA'\nDEFAULT  DC    C'DEFAULT '\nFIRST    DC    CL4'1ST'\nLAST     DC    CL4'LAST'\nNULL     DC    CL4'NULL'\nRESTORE  DC    CL4'RSTR'\nRESTART  DC    CL4'STRT'\nVOLSER   DC    CL6'VOLSER'\nXFER     DC    CL4'XFER'\n         LTORG\nDCBWI    DCB   DSORG=PS,                                               +\n               DDNAME=DDNAME,                                          +\n               MACRF=WP\nDCBWL    EQU   *-DCBWI\nRACLI    RACROUTE REQUEST=AUTH,      RACF AUTHORITY CHECK              +\n               USERID=*,             .. WILL BE THIRD PARTY CHECK      +\n               GENERIC=ASIS,         .. CHECK FOR GENERIC PROFILE      +\n               VOLSER=VOLSER,        .. VOLSER                         +\n               RELEASE=1.8.1,        .. 1.8.1 PARM LIST FORMAT         +\n               LOG=NONE,             .. DON'T LOG FAILURES             +\n               MF=L                  .. LIST FORM\nRACLL    EQU   *-RACLI\nMSG01    DS    0C\n         DC    CL11'FXSRECV01I'\n         DC    C'RECEIVE OF REQUEST '\nMSG01NDE DC    CL8' '\nMSG01NBR DC    XL8'4021202020202020'\n         DC    C' FROM NODE '\nMSG01NDT DC    CL8' '\n         DC    C' STARTED'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'FXSRECV02I'\n         DC    C'TRANSFER OF REQUEST '\nMSG02NDE DC    CL8' '\nMSG02NBR DC    XL8'4021202020202020'\n         DC    C' COMPLETE'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'FXSRECV03I'\n         DC    C'RECEIVE OF REQUEST '\nMSG03NDE DC    CL8' '\nMSG03NBR DC    XL8'4021202020202020'\n         DC    C' FROM NODE '\nMSG03NDT DC    CL8' '\n         DC    C' COMPLETE'\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    CL11'FXSRECV04I'\n         DC    C'CONVERSATION WITH NODE '\nMSG04NDE DC    CL08' '\n         DC    C' DEALLOCATED BY PRIMARY END'\nMSG04L   EQU   *-MSG04\nMSG05    DS    0C\n         DC    CL11'FXSRECV05E'\n         DC    C'CONVERSATION DEALLOCATED DURING RECEIVE OF REQUEST '\nMSG05NDE DC    CL8' '\nMSG05NBR DC    XL8'4021202020202020'\nMSG05L   EQU   *-MSG05\nMSG06    DC    CL11'FXSRECV06E'\n         DC    C'RESTORE FAILED AT NODE '\nMSG06NDR DC    CL08' '\n         DC    C' FOR REQUEST '\nMSG06NDE DC    CL8' '\nMSG06NBR DC    XL8'4021202020202020'\nMSG06L   EQU   *-MSG06\nMSG07    DC    CL11'FXSRECV07I'\n         DC    C'RESTORE SUCCESSFUL AT NODE '\nMSG07NDR DC    CL08' '\n         DC    C' FOR REQUEST '\nMSG07NDE DC    CL8' '\nMSG07NBR DC    XL8'4021202020202020'\nMSG07L   EQU   *-MSG07\nMSG08    DC    CL11'FXSRECV08I'\n         DC    C'PROCESSING COMPLETE FOR REQUEST '\nMSG08NDE DC    CL8' '\nMSG08NBR DC    XL8'4021202020202020'\nMSG08L   EQU   *-MSG08\nMSG09    DC    CL11'FXSRECV09I'\n         DC    C'RESTORE STATUS RECEIVED FOR REQUEST '\nMSG09NDE DC    CL8' '\nMSG09NBR DC    XL8'4021202020202020'\n         DC    C', MASTER RECORD NOT FOUND'\nMSG09L   EQU   *-MSG09\nMSG10    DS    0C\n         DC    CL11'FXSRECV10E'\n         DC    C'INSUFFICIENT SPACE ON STAGE DEVICES'\nMSG10L   EQU   *-MSG10\nMSG11    DS    0C\n         DC    CL11'FXSRECV11I'\n         DC    C'RECEIVE OF REQUEST '\nMSG11NDE DC    CL8' '\nMSG11NBR DC    XL8'4021202020202020'\n         DC    C' FROM NODE '\nMSG11NDT DC    CL8' '\n         DC    C' RESTARTED FROM BLOCK'\nMSG11REC DC    X'4020202020202021'\nMSG11L   EQU   *-MSG11\nMSG12    DS    0C\n         DC    CL11'FXSRECV12E'\n         DC    C'REQUEST NOT FOUND ON MASTER FILE'\nMSG12L   EQU   *-MSG12\nMSG13    DS    0C\n         DC    CL11'FXSRECV13I'\n         DC    C'RESTART OF REQUEST '\nMSG13NDE DC    CL8' '\nMSG13NBR DC    XL8'4021202020202020'\n         DC    C' FROM NODE '\nMSG13NDT DC    CL8' '\n         DC    C' FAILED, RESTART FROM BEGINNING'\nMSG13L   EQU   *-MSG13\nMSG14    DS    0C\n         DC    CL11'FXSRECV14E'\n         DC    C'DATA SET IS TOO LARGE FOR '\nMSG14NDE DC    CL8' '\nMSG14NBR DC    XL8'4021202020202020'\nMSG14L   EQU   *-MSG14\nMSG15    DS    0C\n         DC    CL11'FXSRECV15E'\n         DC    C'INSUFFICIENT ACCESS TO RESTORE '\nMSG15NDE DC    CL8' '\nMSG15NBR DC    XL8'4021202020202020'\nMSG15L   EQU   *-MSG15\nMSG16    DS    0C\n         DC    CL11'FXSRECV16E'\n         DC    C'NO RESTORE BLOCK FOR '\nMSG16NDE DC    CL8' '\nMSG16NBR DC    XL8'4021202020202020'\nMSG16L   EQU   *-MSG16\nMSG17    DS    0C\n         DC    CL11'FXSRECV17E'\n         DC    C'DATA SET ALREADY CATALOGED'\nMSG17NDE DC    CL8' '\nMSG17NBR DC    XL8'4021202020202020'\nMSG17L   EQU   *-MSG17\n* ------------------------------------------------------------------- *\n*              WORK AREA                                              *\n* ------------------------------------------------------------------- *\nDXDSRECV DSECT\nDXDID    DS   CL8                    WORK AREA OWNER EYECATCHER\nDXDSAVE  DS   18F                    REGISTER SAVE AREA\nDXDDWORD DS   D                      CVD/CVB WORK AREA\nDXD24    DS   A                      24-BIT PARM AREA ADDRESS\nDXDLINK  DS   A                      BAL/BR SAVE AREA\nDXDNDEDA DS   A                      NODE DATA ADDRESS\nDXDRACSV DS   4F                     RACROUTE REGISTER SAVE AREA\nDXDRACL  DS   (RACLL)X               RACROUTE LIST FORM\n         PRTBLOK  DSECT=NO\n         MSTRREQ  DSECT=NO\n         DAIRREQ  DSECT=NO\n         CONVREQ  DSECT=NO\nSAFWORK  DS   512X\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         VTAMBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              24-BIT MODULE PARAMETER BLOCK                          *\n* ------------------------------------------------------------------- *\n         FX24PRM DSECT=YES\n* ------------------------------------------------------------------- *\n*              VTAM SESSION BLOCK                                     *\n* ------------------------------------------------------------------- *\n         SESSBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              VTAM CONVERSATION BLOCK                                *\n* ------------------------------------------------------------------- *\n         CONVBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERREQ  DSECT=YES\n* ------------------------------------------------------------------- *\n*              MASTER FILE RECORD                                     *\n* ------------------------------------------------------------------- *\n         REQBLOK  DSECT=YES\n* ------------------------------------------------------------------- *\n*              RESTORE BLOCK                                          *\n* ------------------------------------------------------------------- *\n         RSTRBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              EXTERNAL USERS CONVERSION BLOCK                        *\n* ------------------------------------------------------------------- *\n         XUSRBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              RPL AND RPL EXTENSION DSECTS                           *\n* ------------------------------------------------------------------- *\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------- *\n*              DCB                                                    *\n* ------------------------------------------------------------------- *\n         DCBD   DSORG=PS\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  FXSRECV\n./ ADD NAME=FXSREQE  0100-99056-99056-1500-00448-00448-00000-FX-REL1\n\n         TITLE 'FXSREQE NEW TRANSMISSION REQUESTS'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSREQE                                               *\n*                                                                     *\n*  New transmission request entry.  This module is the complement of  *\n*  FXBREQE and FXTREQE.  As much edit checking as possible is done on *\n*  the requestor's end (to keep the STC from becoming the focal point *\n*  of performance problems and so the work is charged to the user and *\n*  not the STC).                                                      *\n*                                                                     *\n*  Once a request is received, further checking is done.  All         *\n*  destinations are verified to be valid (they were defined via       *\n*  FXNODE or DESTINATION statements at start-up).  A check is made    *\n*  to make sure no destination is duplicated.  The transmit node may  *\n*  not also be a destination.  If all edit checks are satisfied,      *\n*  an available master file record is found and used to record the    *\n*  request.  The submittor is notified of the acceptance or rejection.*\n*                                                                     *\n* ------------------------------------------------------------------- *\nSREQE    FXPRFX 'NEW TRANSMISSION REQUESTS'\nFXSREQE  AMODE 31\nFXSREQE  RMODE ANY\n         USING SESSBLOK,R7           ADDRESS PASSED BY FXVTAM\n         USING CONVBLOK,R6           ADDRESS PASSED BY FXVTAM\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    REQE0010              YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         MVI   PRTCC,C' '            INITIALIZE CARRIAGE CONTROL\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\nREQE0010 DS    0H\n         CLI   SESSUATH,0            IS USER AUTHORIZED TO USE FX?\n         BE    REQE0240              NO\n         L     R5,CONVIOA            COPY USERID\n         USING USERREQ,R5            DEFINE BASE\n         LA    R9,USERDATA           DATA ADDRESS\n         USING REQBLOK,R9            DEFINE BASE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Verify that the transmitting node is valid                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         CLC   REQTNODE,COMMAPLN     ARE WE TRANSMITTING?\n         BE    REQE0070              YES.. THAT'S VALID\n         ICM   R3,15,COMMSESS        FIRST SESSION BLOCK\n         BZ    REQE0030              NOT VALID\nREQE0020 DS    0H\n         CLC   REQTNODE,SESSNAME-SESSBLOK(R3)           NODE FOUND?\n         BE    REQE0070              YES.. VALID\n         ICM   R3,15,SESSNEXT-SESSBLOK(R3)\n         BNZ   REQE0020              KEEP LOOKING\nREQE0030 DS    0H\n         ICM   R3,15,COMMDEST        FIRST DESTINATION BLOCK\n         BZ    REQE0050              NOT VALID\nREQE0040 DS    0H\n         CLC   REQTNODE,DESTNAME-DESTBLOK(R3)\n         BE    REQE0060              VALID\n         ICM   R3,15,DESTNEXT-DESTBLOK(R3)\n         BNZ   REQE0040              LOOP\nREQE0050 DS    0H\n         ITRACE ID=BADTNODE,         BAD TRANSMITTING NODE NAME        +\n               DATA1=REQTNODE        .. INCLUDE NODE'S NAME\n         MVI   USERRC,8              SET RETURN CODE\n         MVC   USERMSG,COMMBLKS      INITIALIZE MESSAGE\n         MVC   USERMSG(MSG01L),MSG01 COPY INITIAL MESSAGE\n         MVC   USERMSG+(MSG01NDE-MSG01)(L'MSG01NDE),REQTNODE\n         B     EXIT0000              AND EXIT\nREQE0060 DS    0H\n         MVC   REQTNODE,DESTNODE-DESTBLOK(R3)         CHANGE TO NODE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Verify that all destinations are valid                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nREQE0070 DS    0H\n         LA    R4,REQNDENM           FIRST NODE NAME\n         SR    R15,R15               CLEAR REGISTER\n         ICM   R15,3,REQNDE#         NUMBER OF NODES\n* ------------------------------------------------------------------- *\n*        Scan the nodes                                               *\n* ------------------------------------------------------------------- *\nREQE0080 DS    0H\n         CLC   COMMAPLN,0(R4)        ARE WE THE DESTINATION?\n         BE    REQE0140              YES.. THAT'S VALID\n         ICM   R3,15,COMMSESS        FIRST SESSION BLOCK\n         BZ    REQE0100              INVALID NODE NAME\nREQE0090 DS    0H\n         CLC   0(L'SESSNAME,R4),SESSNAME-SESSBLOK(R3)   NODE FOUND?\n         BE    REQE0140              YES.. NODE NAME IS VALID\n         ICM   R3,15,SESSNEXT-SESSBLOK(R3)   NEXT SESSION BLOCK\n         BNZ   REQE0090              CHECK AGAIN\n* ------------------------------------------------------------------- *\n*        Scan the destinations                                        *\n* ------------------------------------------------------------------- *\nREQE0100 DS    0H\n         ICM   R3,15,COMMDEST        FIRST DESTINATION BLOCK\n         BZ    REQE0120              NO DESTINATIONS DEFINED\nREQE0110 DS    0H\n         CLC   0(L'DESTNAME,R4),DESTNAME-DESTBLOK(R3)   FOUND?\n         BE    REQE0130              YES\n         ICM   R3,15,DESTNEXT-DESTBLOK(R3)\n         BNZ   REQE0110              CHECK ALL DEFINED DESTINATIONS\nREQE0120 DS    0H\n         ITRACE ID=BADNODE,          INVALID NODE NAME                 +\n               DATA1=0(R4)           .. NODE NAME\n         MVI   USERRC,8              SET RETURN CODE\n         MVC   USERMSG,COMMBLKS      INITIALIZE MESSAGE\n         MVC   USERMSG(MSG02L),MSG02 COPY INITIAL MESSAGE\n         MVC   USERMSG+(MSG02NDE-MSG02)(L'MSG02NDE),0(R4)\n         B     EXIT0000              AND EXIT\nREQE0130 DS    0H\n         MVC   0(L'DESTNAME,R4),DESTNODE-DESTBLOK(R3) CHANGE TO NODE\nREQE0140 DS    0H\n         LA    R4,REQNDEL(R4)        NEXT NODE\n         BCT   R15,REQE0080          CHECK ALL NODES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Check for duplicated destination                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         LA    R3,REQNDENM           FIRST NODE NAME\n         LA    R4,REQNDEL(R3)        NEXT NODE NAME\n         SR    R15,R15               CLEAR REGISTER\n         ICM   R15,3,REQNDE#         NUMBER OF NODES\nREQE0150 DS    0H\n         LR    R14,R15               COPY NUMBER OF NODES\nREQE0160 DS    0H\n         CH    R14,H2                STILL HAVE 2 OR MORE?\n         BL    REQE0170              NO\n         CLC   0(L'REQNDENM,R3),0(R4)\n         BE    REQE0250              DUPLICATED NODE NAME\n         LA    R4,REQNDEL(R4)        NEXT NODE NAME\n         BCT   R14,REQE0160          LOOP\nREQE0170 DS    0H\n         LA    R3,REQNDEL(R3)        NEXT NODE NAME\n         BCT   R15,REQE0150          LOOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Make sure transmitting node is not also a destination        *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         LA    R3,REQNDENM           FIRST NODE NAME\n         SR    R15,R15               CLEAR REGISTER\n         ICM   R15,3,REQNDE#         NUMBER OF NODES\nREQE0180 DS    0H\n         CLC   REQTNODE,0(R3)        IS TRANSMITTOR ALSO A DESTINATION?\n         BE    REQE0270              YES\n         LA    R3,REQNDEL(R3)        NEXT NODE NAME\n         BCT   R15,REQE0180          LOOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        If the request is for a PDS member, make sure the            *\n*        MEM SIZE parameter was specified at start-up.                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         CLC   REQOMEM,COMMBLKS      MEMBER NAME PRESENT?\n         BE    REQE0190              NO\n         OC    COMMMEM,COMMMEM       MEMBER SIZE ZERO?\n         BNZ   REQE0190              YES\n         ITRACE ID=NOMEMSZ           MEMBER SIZE NOT GIVEN\n         MVI   USERRC,8              SET RETURN CODE\n         MVC   USERMSG,COMMBLKS      INITIALIZE MESSAGE\n         MVC   USERMSG(MSG03L),MSG03 COPY MESSAGE\n         B     EXIT0000              AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Check requestor's access to the requested data set           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nREQE0190 DS    0H\n         MVC   DXDRACL(RACLL),RACLI  COPY LIST FORM\n         LA    R2,DSCLASS            'CLASS'\n         LA    R3,REQODSNM           'RESOURCE'\n         LA    R4,SESSUSER           'USER ID' (THIRD PARTY CHECK)\n         LA    R8,SAFWORK            SAF WORK AREA ADDRESS\n         RACROUTE REQUEST=AUTH,      CHECK USER'S ACCESS AUTHORITY     +\n               ATTR=READ,            .. READ LEVEL REQUIRED            +\n               CLASS=(R2),           .. CLASS                          +\n               ENTITY=((R3)),        .. RESOURCE                       +\n               USERID=(R4),          .. USER ID (THIRD PARTY CHECK)    +\n               WORKA=(R8),           .. SAF WORK AREA                  +\n               RELEASE=1.8.1,        .. 1.8.1 PARM LIST FORMAT         +\n               MF=(E,DXDRACL)        .. EXECUTE FORM/LIST FORM ADDRESS\n         ITRACE ID=AUTHRC,           TRACE RETURN CODE                 +\n               RDATA1=R15            .. RETURN CODE\n         CH    R15,H4                0=AUTHORIZED, 4=UNPROTECTED\n         BH    REQE0260              .. USER DOES NOT HAVE ACCESS\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Find an available master file record                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=SRCHMSTR          STARTING MASTER FILE SEARCH\n         XC    MSTRREC#,MSTRREC#     INITIALIZE FOR RECORD NUMBER\n         FXCALL FXSMSTR,READ         READ MASTER FILE\n         MVC   CONVREC#,MSTRREC#     SAVE MASTER RECORD NUMBER\n         LA    R4,MSTRRECD           RETURNED MASTER FILE RECORD\n         DROP  R9\n         USING REQBLOK,R4            DEFINE NEW BASE\n         CLI   REQSTAT,$REQCNTL      CONTROL RECORD STILL INTACT?\n         BNE   ERR0010               NO..\n         ICM   R1,15,REQNBR          LAST REQUEST NUMBER USED\n         LA    R1,1(R1)              PLUS 1\n         STCM  R1,15,REQNBR          SAVE UPDATED NUMBER\n         ST    R1,DXDREQ#            SAVE REQUEST NUMBER\n         FXCALL FXSMSTR,WRITE        RE-WRITE MASTER RECORD\n         ITRACE ID=REQNBR,           TRACE REQUEST NUMBER ASSIGNED     +\n               DATA1=REQNBR          .. REQUEST NUMBER\n         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)\nREQE0200 DS    0H\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,MSTRREC#         CURRENT RECORD NUMBER\n         LA    R1,1(R1)              PLUS 1\n         FXCALL FXSMSTR,,(R1)        READ MASTER FILE\n         LA    R4,MSTRRECD           RETURNED MASTER FILE RECORD\n         MVC   CONVREC#,MSTRREC#     SAVE MASTER RECORD NUMBER\n         CLI   REQSTAT,$REQFREE      UNUSED OR FREE?\n         BH    REQE0200              NO\n         SR    R1,R1                 CLEAR REGISTER\n         MVC   REQESTOR,SESSUSER     SET REQUESTOR ID\n         MVC   REQJOB,SESSJOB        SET JOB NAME\n         TIME  DEC                   REQUEST DATE AND TIME\n         STCM  R1,15,REQEDATE        SET DATE OF REQUEST\n         STCM  R0,15,REQETIME        SET TIME OF REQUEST\n         MVC   REQENODE,REQENODE-REQBLOK(R9)    COPY ENTRY POINT NODE\n         MVC   REQNBR,DXDREQ#                   SET REQUEST NUMBER\n         MVC   REQTNODE,REQTNODE-REQBLOK(R9)    COPY XMIT NODE\n         MVI   REQSTAT,$REQINIT      REQUEST IS IN INITIAL STATE\n         CLC   REQENODE,REQTNODE     TO BE XMITTED BY A DIFFERENT NODE\n         BE    REQE0210              NO..\n         MVI   REQSTAT,$REQXRDY      STATUS IS 'READY TO TRANSMIT'\nREQE0210 DS    0H\n         MVC   REQODSNM,REQODSNM-REQBLOK(R9)    SET ORIGINAL DSN\n         MVC   REQOMEM,REQOMEM-REQBLOK(R9)      SET ORIGINAL MEM NAME\n         MVC   REQDDSNM,REQDDSNM-REQBLOK(R9)    SET NEW DATA SET NAME\n         MVC   REQDMEM,REQDMEM-REQBLOK(R9)      SET NEW MEMBER NAME\n         MVC   REQREPL,REQREPL-REQBLOK(R9)      SET REPLACE INDICATOR\n         MVC   REQALIAS,REQALIAS-REQBLOK(R9)    SET ALIAS INDICATOR\n         MVC   REQNDE#,REQNDE#-REQBLOK(R9)      SET NUMBER OF NODES\n         LA    R1,REQNDENM           FIRST NODE\n         LA    R14,REQNDENM-REQBLOK(R9)\n         LA    R15,$MAXNODE          NUMBER OF NODES\nREQE0220 DS    0H\n         MVC   REQNDENM-REQNDENM(L'REQNDENM,R1),0(R14)\n         MVI   REQNDEST-REQNDENM(R1),0\n         ZAP   REQNDETD-REQNDENM(L'REQNDETD,R1),P0\n         XC    REQNDETT-REQNDENM(L'REQNDETT,R1),REQNDETT-REQNDENM(R1)\n         ZAP   REQNDERD-REQNDENM(L'REQNDERD,R1),P0\n         XC    REQNDERT-REQNDENM(L'REQNDERT,R1),REQNDERT-REQNDENM(R1)\n         LA    R1,REQNDEL(R1)        NEXT NODE\n         LA    R14,REQNDEL(R14)      NEXT NODE\n         BCT   R15,REQE0220          LOOP\n         MVI   USERRC,0              SET RETURN CODE\n         MVC   USERMSG,COMMBLKS      INITIALIZE MESSAGE\n         MVC   USERMSG(MSG04L),MSG04 SET MESSAGE\n         MVC   USERMSG+(MSG04NDE-MSG04)(L'MSG04NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST'S NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    USERMSG+(MSG04NBR-MSG04)(L'MSG04NBR),DXDDWORD+4\n         MVC   PRTMSGID(MSG04L),USERMSG\n         BAL   R8,PRT0000            PRINT\n         MVC   PRTMSGID(MSG05L),MSG05 SET MESSAGE\n         MVC   PRTMSGID+(MSG05REC-MSG05)(L'MSG05REC),REQREC#\n         MVC   PRTMSGID+(MSG05USR-MSG05)(L'MSG05USR),REQESTOR\n         MVC   PRTMSGID+(MSG05DSN-MSG05)(L'MSG05DSN),REQODSNM\n         BAL   R8,PRT0000            PRINT\n         MVC   PRTMSGID(MSG06L),MSG06 SET MESSAGE\n         LA    R4,REQNDENM           FIRST NODE NAME\n         LA    R3,5                  ONLY 5 WILL BE IN THE MESSAGE\n         LA    R2,PRTMSGID+(MSG06NDE-MSG06)\nREQE0230 DS    0H\n         MVC   0(L'REQNDENM,R2),0(R4)\n         LA    R4,REQNDEL(R4)        NEXT NODE\n         LA    R2,L'REQNDENM+1(R2)    NEXT NODE\n         BCT   R3,REQE0230           LOOP\n         BAL   R8,PRT0000            PRINT\n         FXCALL FXSMSTR,WRITE        RE-WRITE MASTER FILE RECORD\n         B     EXIT0000              AND EXIT\nREQE0240 DS    0H\n         ITRACE ID=NOTAUTH\n         MVI   USERRC,20             SET RETURN CODE\n         MVC   USERMSG,COMMBLKS      INITIALIZE MESSAGE\n         MVC   USERMSG(MSG07L),MSG07 SET MESSAGE\n         B     EXIT0000              AND EXIT\nREQE0250 DS    0H\n         ITRACE ID=DUPNODE,          INVALID NODE NAME                 +\n               DATA1=0(R3)           .. NODE NAME\n         MVI   USERRC,8              SET RETURN CODE\n         MVC   USERMSG,COMMBLKS      INITIALIZE MESSAGE\n         MVC   USERMSG(MSG08L),MSG08 COPY INITIAL MESSAGE\n         MVC   USERMSG+(MSG08NDE-MSG08)(L'MSG08NDE),0(R3)\n         B     EXIT0000              AND EXIT\nREQE0260 DS    0H\n         ITRACE ID=AUTHFAIL,         AUTH CHECK FAILED                 +\n               DATA1=0(R15)          .. RACF RETURN CODE\n         MVI   USERRC,8              SET RETURN CODE\n         MVC   USERMSG,COMMBLKS      INITIALIZE MESSAGE\n         MVC   USERMSG(MSG09L),MSG09 COPY INITIAL MESSAGE\n         B     EXIT0000              AND EXIT\nREQE0270 DS    0H\n         ITRACE ID=TNODEDEST         TRANSMITTING NODE IS A DESTINATION\n         MVI   USERRC,8              SET RETURN CODE\n         MVC   USERMSG,COMMBLKS      INITIALIZE MESSAGE\n         MVC   USERMSG(MSG10L),MSG10 COPY INITIAL MESSAGE\n         B     EXIT0000              AND EXIT\nPRT0000  DS    0H\n         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE\n         BR    R8                    RETURN\nERR0010  DS    0H\n         ITRACE ID=CNTLBAD,          CONTROL RECORD IS BAD             +\n               RDATA1=R4,            .. ADDRESS OF MASTER FILE RECORD  +\n               DATA2=REQSTAT         .. STATUS IN THE RECORD\n         ABEND $U0083,DUMP,,USER\nEXIT0000 DS    0H\n         ITRACE ID=EXIT              EXITING PRINT MODULE\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        CONSTANTS                                                   *\n*                                                                    *\n* ------------------------------------------------------------------ *\nDXDSTART DC    Q(DXDSREQE)           DISPLACEMENT TO WORK AREA\nRACLI    RACROUTE REQUEST=AUTH,      RACF AUTHORITY CHECK              +\n               USERID=*,             .. WILL BE THIRD PARTY CHECK      +\n               GENERIC=ASIS,         .. CHECK FOR GENERIC PROFILE      +\n               VOLSER=VOLSER,        .. VOLSER                         +\n               RELEASE=1.8.1,        .. 1.8.1 PARM LIST FORMAT         +\n               LOG=NONE,             .. DON'T LOG FAILURES             +\n               MF=L                  .. LIST FORM\nRACLL    EQU   *-RACLI\nH2       DC    H'2'\nH4       DC    H'4'\nP0       DC    P'0'\n         SPACE 1\nDSCLASS  DS    0C\n         DC    AL1(7)\n         DC    CL7'DATASET'\n         SPACE 1\nVOLSER   DC    C'VOLSER'\nMSG01    DS    0C\n         DC    CL11'FXSREQE01E'\nMSG01NDE DC    CL8' '\n         DC    C' IS NOT A VALID TRANSMITTING NODE NAME'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'FXSREQE02E'\n         DC    C'NODE '\nMSG02NDE DC    CL8' '\n         DC    C' IS INVALID'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'FXSREQE03E'\n         DC    C'MEM SIZE NOT DEFINED, PDS MEMBER TRANSMISSION NOT AVAI+\n               LABLE'\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    CL11'FXSREQE04I'\n         DC    C'TRANSMISSION REQUEST '\nMSG04NDE DC    CL08' '\nMSG04NBR DC    XL08'4021202020202020'\n         DC    C' ACCEPTED'\nMSG04L   EQU   *-MSG04\nMSG05    DS    0C\n         DC    CL11'FXSREQE05I'\n         DC    C'MASTER FILE RECORD '\nMSG05REC DC    CL05' '\n         DC    C' REQUESTOR '\nMSG05USR DC    CL8' '\n         DC    C' DATASET '\nMSG05DSN DC    CL44' '\nMSG05L   EQU   *-MSG05\nMSG06    DS    0C\n         DC    CL11'FXSREQE06I'\n         DC    C'TO NODES (ONLY FIRST FIVE WILL BE LISTED) '\nMSG06NDE DC    CL45' '\nMSG06L   EQU   *-MSG06\nMSG07    DS    0C\n         DC    CL11'FXSREQE07E'\n         DC    C'YOU ARE NOT AUTHORIZED TO USE FX'\nMSG07L   EQU   *-MSG07\nMSG08    DS    0C\n         DC    CL11'FXSREQE08E'\n         DC    C'NODE '\nMSG08NDE DC    CL8' '\n         DC    C' IS DUPLICATED'\nMSG08L   EQU   *-MSG08\nMSG09    DS    0C\n         DC    CL11'FXSREQE09E'\n         DC    C'YOU DO NOT HAVE READ LEVEL ACCESS TO REQUESTED DATA SE+\n               T'\nMSG09L   EQU   *-MSG09\nMSG10    DS    0C\n         DC    CL11'FXSREQE10E'\n         DC    C'TRANSMITTING NODE CANNOT ALSO BE A DESTINATION'\nMSG10L   EQU   *-MSG10\n         LTORG\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        WORK AREAS                                                  *\n*                                                                    *\n* ------------------------------------------------------------------ *\nDXDSREQE DSECT\nDXDID    DS    CL8                   WORK AREA OWNER ID\nDXDSAVE  DS    18F                   REGISTER SAVE AREA\nDXDDWORD DS    D                     CVD/CVB WORK AREA\nDXDREQ#  DS    F                     NEW REQUEST'S REQUEST NUMBER\nDXDRACL  DS    (RACLL)X              RACROUTE PARM LIST\nSAFWORK  DS    (512)X                SAF WORK AREA\nDXDDSNL  DS    X                     DATA SET NAME LENGTH\nDXDDSN   DS    CL44                  DATA SET NAME\n         PRTBLOK  DSECT=NO\n         MSTRREQ  DSECT=NO\n* ------------------------------------------------------------------ *\n*              USER REQUEST/RESPONSE BLOCK                           *\n* ------------------------------------------------------------------ *\n         USERREQ\n* ------------------------------------------------------------------ *\n*              COMMON DATA MAP                                       *\n* ------------------------------------------------------------------ *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------ *\n*              SESSION BLOCK                                         *\n* ------------------------------------------------------------------ *\n         SESSBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              CONVERSATION BLOCK                                    *\n* ------------------------------------------------------------------ *\n         CONVBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              DESTINATION BLOCK                                     *\n* ------------------------------------------------------------------ *\n         DESTBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              MASTER FILE RECORD                                    *\n* ------------------------------------------------------------------ *\n         REQBLOK  DSECT=YES\n* ------------------------------------------------------------------ *\n*              EQUATES                                               *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         ABCODES\n         END  FXSREQE\n./ ADD NAME=FXSREQI  0100-99056-99056-1500-00567-00567-00000-FX-REL1\n\n         TITLE 'FXSREQI  TRANSMISSION REQUEST INQUIRY'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSREQI                                               *\n*                                                                     *\n*  Allow the users or administrators to check on the status of        *\n*  requests.  'Normal' users may only check on the status of their    *\n*  status of their own requests, and may CANCEL them if they wish.    *\n*  CANCELing a request does not remove the request from the master    *\n*  file, the request is flagged CANCELed.  FX will perform no further *\n*  transmissions of a request that has been CANCELed.  CANCELed       *\n*  requests will be removed from the master file according to the     *\n*  RETPDC (retention period for completed requests) criteria when     *\n*  the purge utility is run.  Administrator users may check on the    *\n*  status of any requests, and may CANCEL or DELETE them.  DELETEing  *\n*  a request removes the request from the master file immediately,    *\n*  no record of the deletion will exist.                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSREQI    FXPRFX 'TRANSMISSION REQUEST INQUIRY (AND UPDATE)'\nFXSREQI  AMODE 31\nFXSREQI  RMODE ANY\n         USING SESSBLOK,R7           ADDRESS PASSED BY FXSVTAM\n         USING CONVBLOK,R6           ADDRESS PASSED BY FXSVTAM\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    REQI0010              YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         MVI   PRTCC,C' '            INITIALIZE PRINT AREA\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\nREQI0010 DS    0H\n         ITRACE ID=ENTRY             TRACE ENTRY\n         GETMAIN RU,                 ACQUIRE 24-BIT PARM AREA          +\n               LV=FX24L,             .. SIZE OF AREA                   +\n               LOC=BELOW             .. FROM 24-BIT AREA\n         ST    R1,DXD24              SAVE 24-BIT WORK AREA ADDRESS\n         LR    R8,R1                 COPY ADDRESS\n         USING FX24PRM,R8            DEFINE BASE\n         CLI   SESSUATH,0            IS USER AUTHORIZED TO USE FX?\n         BE    REQI0220              NO\n         L     R5,CONVIOA            I/O AREA ADDRESS\n         USING USERREQ,R5            DEFINE BASE\n         ITRACE ID=CMD1,                                               +\n               DATA1=USERCMD,        .. CAPTURE COMMAND                +\n               DATA2=USERIDI         .. AND USER ID\n         ITRACE ID=CMD2,                                               +\n               DATA1=USERNODE,       .. CAPTURE ENTRY NODE             +\n               DATA2=USERNBR         .. AND REQUEST NUMBER\n         MVC   MSTRREC#,USERREC#     SET STARTING RECORD NUMBER\n         CLI   USERCMD,$USERINQ      GENERAL INQUIRY\n         BE    REQI0020              YES\n         CLI   USERCMD,$USERSTA      STATUS INQUIRY\n         BNE   REQI0040              NO.. UPDATE SPECIFIC RECORD\n         MVC   DXDUSER,COMMBLKS      ALLOW REQUEST TO BELONG TO ANYONE\n         B     REQI0040              START SEARCHING\nREQI0020 DS    0H\n         MVC   DXDUSER,SESSUSER      ASSUME ONLY USER'S OWN RECORDS\n         CLI   SESSUATH,3            ADMINISTRATOR OR HIGHER?\n         BL    REQI0040              NO\n         MVC   DXDUSER,USERIDI       SAVE ID PROVIDED BY CALLER\n         B     REQI0040              START SEARCH\nREQI0030 DS    0H\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,MSTRREC#         CURRENT RECORD NUMBER\n         LA    R1,1(R1)              PLUS 1\n         STCM  R1,3,MSTRREC#         SAVE UPDATED RECORD NUMBER\nREQI0040 DS    0H\n         ITRACE ID=READMSTR,         READ MASTER FILE                  +\n               DATA1=MSTRREC#,       .. RECORD NUMBER                  +\n               DATA2=DXDUSER         .. USER WE'RE LOOKING FOR\n         MVI   MSTRCMD,$MSTRRD       SET MASTER FILE COMMAND (READ)\n         BAL   R9,MSTR0000           READ MASTER FILE\n         USING REQBLOK,R2            DEFINE BASE\n         CLI   REQSTAT,X'FF'         CONTROL RECORD?\n         BE    REQI0030              YES.. NEVER RETURN IT\n         CLI   USERCMD,$USERPRT      RETURN SYSPRINT OUTPUT?\n         BE    REQI0250              YES\n         CLI   USERCMD,$USERINQ      GENERAL INQUIRY?\n         BE    REQI0050              YES\n         CLI   USERCMD,$USERSTA      STATUS INQUIRY?\n         BNE   REQI0090              NO.. MUST BE AN UPDATE\nREQI0050 DS    0H\n         CLI   REQSTAT,0             END OF RECORDS?\n         BE    REQI0080              YES\n         CLI   REQSTAT,$REQFREE      FREE RECORD?\n         BE    REQI0030              YES\n         CLC   DXDUSER,COMMBLKS      ANY USER?\n         BE    REQI0060              YES\n         CLC   DXDUSER,REQESTOR      CORRECT USER?\n         BNE   REQI0030              NO\nREQI0060 DS    0H\n         CLI   USERCMD,$USERINQ      GENERAL INQUIRY?\n         BE    REQI0070              YES.. ACCEPTABLE RECORD FOUND\n         CLC   USERNODE,REQENODE     ENTRY NODES MATCH?\n         BNE   REQI0030              NO\n         CLC   USERNBR,REQNBR        REQUEST NUMBERS MATCH?\n         BNE   REQI0030              NO\nREQI0070 DS    0H\n         ITRACE ID=RECFND            ACCEPTABLE RECORD FOUND\n         MVI   USERRC,0              SET RETURN CODE\n         LA    R1,(USERDATA-USERREQ)+REQBLOKL\n         STH   R1,USERLEN            SET LENGTH\n         LA    R0,USERDATA           1ST BYTE OF USER DATA\n         LA    R1,REQBLOKL           LENGTH\n         LR    R3,R1                 LENGTH\n         MVCL  R0,R2                 COPY RECORD TO I/O AREA\n         B     EXIT0000              AND EXIT\nREQI0080 DS    0H\n         ITRACE ID=RECNTFND          NO ACCEPTABLE RECORD FOUND\n         MVI   USERRC,8              SET RETURN CODE\n         LA    R1,USERDATA-USERREQ   LENGTH TO RETURN\n         B     EXIT0000              AND EXIT\nREQI0090 DS    0H\n         CLI   SESSUATH,1            MORE THAN A 'NORMAL' USER?\n         BH    REQI0100              YES..\n         CLI   USERCMD,$USERDEL      DELETE?\n         BE    REQI0210              NOT ALLOWED TO DELETE\n         CLC   REQESTOR,DXDUSER      IS IT USER'S OWN REQUEST?\n         BNE   REQI0210              NO.. MAY NOT CANCEL OR DELETE\nREQI0100 DS    0H\n         CLI   USERCMD,$USERCAN      CANCEL THE REQUEST?\n         BE    REQI0200              YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*    Request DELETE.  Before allowing the deletion, we must make      *\n*    sure no other activity is using the request.  Things to check    *\n*    are the DF/DSS and IEBCOPY subtasks, and the records associated  *\n*    with CONV blocks.                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=DELREQ            DELETING A REQUEST\n         ICM   R14,15,DSSREQ         REQUEST DF/DSS IS WORKING ON\n         BZ    REQI0110              NO REQUEST PRESENT\n         USING DRREQ,R14             DEFINE BASE\n         CLC   REQREC#,DRRECD+(REQREC#-REQBLOK)\n         BE    REQI0240              RECORD IS IN USE\nREQI0110 DS    0H\n         ICM   R14,15,COPYREQ        REQUEST IEBCOPY IS WORKING ON\n         BZ    REQI0120              NO REQUEST PRESENT\n         CLC   REQREC#,DRRECD+(REQREC#-REQBLOK)\n         BE    REQI0240              RECORD IS IN USE\nREQI0120 DS    0H\n         STM   R6,R7,DXDDELSV        SAVE SESS AND CONV BLOCK ADDRESSES\n         ICM   R7,15,COMMSESS        FIRST SESSION BLOCK\n         BZ    REQI0160              NO SESSIONS\nREQI0130 DS    0H\n         ICM   R6,15,SESSCONV        FIRST CONVERSATION\n         BZ    REQI0150              NO CONVERSATIONS\n         C     R6,DXDDELSV           MY OWN CONVERSATION?\n         BE    REQI0150              YES\nREQI0140 DS    0H\n         CLC   MSTRREC#,CONVREC#     RECORD IN USE?\n         BE    REQI0230              YES\n         ICM   R6,15,CONVNEXT        NEXT CONVERSATION\n         BNZ   REQI0140              LOOP\nREQI0150 DS    0H\n         ICM   R7,15,SESSNEXT        NEXT SESSION BLOCK\n         BNZ   REQI0130              LOOP\nREQI0160 DS    0H\n         LM    R6,R7,DXDDELSV        RESTORE OUR SESS AND CONV BLOCK\n         CLC   REQWDSNM,COMMBLKS     STAGING DATASET ALLOCATED?\n         BE    REQI0170              NO\n         MVC   DAIRDSN,REQWDSNM      SET DATASET NAME\n         MVI   DAIRCMD,$DAIRDEL      SET COMMAND (DELETE)\n         BAL   R9,DAIR0000           LINK TO DAIR MODULE TO DELETE\n         CLC   X1708,DAIRERR         FILE NOT FOUND?\n         BE    REQI0170              NOT FOUND.. ACCEPTABLE\n         MVC   PRTMSGID(MSG01L),MSG01\n         MVC   PRTMSGID+(MSG01NDE-MSG01)(L'MSG01NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG01NBR-MSG01)(L'MSG01NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG01DSC-MSG01)(L'STAGING),STAGING\n         MVC   PRTMSGID+(MSG01DSN-MSG01)(L'MSG01DSN),REQWDSNM\n         BAL   R9,PRT0000            QUEUE MESSAGE TO PRINT\nREQI0170 DS    0H\n         CLC   REQIDSNM,COMMBLKS     SYSIN DATASET ALLOCATED?\n         BE    REQI0180              NO\n         MVC   DAIRDSN,REQIDSNM      SET DATASET NAME\n         MVI   DAIRCMD,$DAIRDEL      SET COMMAND (DELETE)\n         BAL   R9,DAIR0000           LINK TO DAIR MODULE TO DELETE\n         CLC   X1708,DAIRERR         FILE NOT FOUND?\n         BE    REQI0180              NOT FOUND.. ACCEPTABLE\n         MVC   PRTMSGID(MSG01L),MSG01\n         MVC   PRTMSGID+(MSG01NDE-MSG01)(L'MSG01NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG01NBR-MSG01)(L'MSG01NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG01DSC-MSG01)(L'SYSIN),SYSIN\n         MVC   PRTMSGID+(MSG01DSN-MSG01)(L'MSG01DSN),REQIDSNM\n         BAL   R9,PRT0000            QUEUE MESSAGE TO PRINT\nREQI0180 DS    0H\n         CLC   REQSDSNM,COMMBLKS     SYSPRINT DATASET ALLOCATED?\n         BE    REQI0190              NO\n         MVC   DAIRDSN,REQSDSNM      SET DATASET NAME\n         MVI   DAIRCMD,$DAIRDEL      SET COMMAND (DELETE)\n         BAL   R9,DAIR0000           LINK TO DAIR MODULE TO DELETE\n         CLC   X1708,DAIRERR         FILE NOT FOUND?\n         BE    REQI0190              NOT FOUND.. ACCEPTABLE\n         MVC   PRTMSGID(MSG01L),MSG01\n         MVC   PRTMSGID+(MSG01NDE-MSG01)(L'MSG01NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG01NBR-MSG01)(L'MSG01NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG01DSC-MSG01)(L'SYSPRINT),SYSPRINT\n         MVC   PRTMSGID+(MSG01DSN-MSG01)(L'MSG01DSN),REQSDSNM\n         BAL   R9,PRT0000            QUEUE MESSAGE TO PRINT\nREQI0190 DS    0H\n         MVC   PRTMSGID(MSG02L),MSG02\n         MVC   PRTMSGID+(MSG02NDE-MSG02)(L'MSG02NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG02NBR-MSG02)(L'MSG02NBR),DXDDWORD+4\n         BAL   R9,PRT0000            QUEUE MESSAGE TO PRINT\n         MINIT COMMBLKS,P0,$REQFREE,R14 INITIALIZE REQUEST\n         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)\n         BAL   R9,MSTR0000           UPDATE MASTER FILE RECORD\n         LA    R1,(USERDATA-USERREQ) TOTAL LENGTH\n         STH   R1,USERLEN            SET LENGTH\n         MVI   USERRC,0              SET RETURN CODE\n         B     EXIT0000              EXIT\nREQI0200 DS    0H\n         ITRACE ID=CANREQ            CANCELLING A REQUEST\n         MVI   REQSTAT,$REQUCAN      SET STATUS TO CANCELLED\n         MVI   MSTRCMD,$MSTRWRT      SET COMMAND\n         BAL   R9,MSTR0000           UPDATE MASTER FILE\n         MVC   PRTMSGID(MSG03L),MSG03\n         MVC   PRTMSGID+(MSG03NDE-MSG03)(L'MSG03NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG03NBR-MSG03)(L'MSG03NBR),DXDDWORD+4\n         BAL   R9,PRT0000            QUEUE MESSAGE TO PRINT\n         LA    R1,(USERDATA-USERREQ) TOTAL LENGTH\n         MVI   USERRC,0              SET RETURN CODE\n         B     EXIT0000              EXIT\nREQI0210 DS    0H\n         ITRACE ID=NOTALLOW          REQUEST NOT ALLOWED\n         LA    R1,(USERDATA-USERREQ) TOTAL LENGTH\n         MVI   USERRC,8              SET RETURN CODE\n         B     EXIT0000              EXIT\nREQI0220 DS    0H\n         ITRACE ID=NOTAUTH           USER NOT AUTHORIZED TO USE FX\n         LA    R1,(USERDATA-USERREQ) TOTAL LENGTH\n         STH   R1,USERLEN            SET LENGTH\n         MVI   USERRC,20             'USER NOT AUTHORIZED'\n         B     EXIT0000              EXIT\nREQI0230 DS    0H\n         LM    R6,R7,DXDDELSV        RESTORE OUR SESS AND CONV BLOCKS\nREQI0240 DS    0H\n         ITRACE ID=INUSE             RECORD IN USE, CANNOT DELETE\n         LA    R1,(USERDATA-USERREQ) TOTAL LENGTH\n         STH   R1,USERLEN            SET LENGTH\n         MVI   USERRC,12             'RECORD IN USE'\n         B     EXIT0000              EXIT\nREQI0250 DS    0H\n         ITRACE ID=SYSPRINT          RETURN SYSPRINT TO USER\n         CLC   REQSDSNM,COMMBLKS     DATASET ALLOCATED?\n         BE    REQI0350              NO\n         FXCALL FXSDAIR,ALLOCATE,    CALL FXSDAIR TO ALLOCATE          +\n               DATASET,              .. EXISTING DATA SET              +\n               ,                     .. DDNAME WILL BE GENERATED       +\n               REQSDSNM              .. DATA SET NAME\n         CLC   X1708,DAIRERR         DATASET NOT FOUND?\n         BE    REQI0340              NOT FOUND...\n         OC    DAIRR15,DAIRR15       DAIR SUCCESSFUL?\n         BNZ   ERR0010               NO\n         USING PSA,R0                DEFINE PSA BASE\n         L     R14,PSATNEW           OUR TCB'S ADDRESS\n         USING TCB,R14               DEFINE TCB BASE\n         L     R15,TCBTIO            TIOT ADDRESS\n         USING TIOT1,R15             DEFINE BASE\n         LA    R1,TIOENTRY           FIRST TIOT ENTRY\n         USING TIOENTRY,R1           DEFINE BASE\n         SR    R14,R14               CLEAR REGISTER\nREQI0260 DS    0H\n         ICM   R14,1,TIOELNGH        LENGTH OF THIS ENTRY\n         BZ    ERR0030               TIOT ENTRY NOT FOUND\n         CLC   TIOEDDNM,DAIRDDN      TIOT ENTRY FOUND?\n         BE    REQI0270              YES\n         AR    R1,R14                NEXT TIOT ENTRY\n         B     REQI0260              LOOP\nREQI0270 DS    0H\n         SR    R15,R15               CLEAR REGISTER\n         ICM   R15,7,TIOEFSRT        UCB ADDRESS\n         USING UCBOB,R15             DEFINE UCB BASE\n         MVC   DSN24,DAIRDSN         COPY DATA SET NAME\n         MVC   VOL24,UCBVOLI         SET VOLSER\n         FX24  $CAMLSTN              OBTAIN VTOC DATA BY DATA SET NAME\n         LTR   R15,R15               CAMLST SUCCESSFUL?\n         BNZ   ERR0040               NO\n         LA    R14,VTOC24            RETURNED VTOC DATA\n         USING DSCB,R14              DEFINE BASE\n         OC    DS1BLKL,DS1BLKL       BLOCK SIZE = ZERO?\n         BZ    REQI0360              YES.. DATA SET NOT READY\n         L     R2,CONVDCB            DCB ADDRESS\n         MVC   0(DCBIL,R2),DCBI      INITIALIZE THE DCB\n         USING IHADCB,R2             DEFINE BASE\n         MVC   DCBDDNAM,DAIRDDN      SET DDNAME IN DCB\n         ST    R2,DCB24              SET DCB ADDRESS\n         FX24  $OPENI                OPEN THE DCB INPUT\n         MVC   USERRCSZ,DCBLRECL     COPY RECORD SIZE FROM DCB\n         MVC   USERBLKZ,DCBBLKSI     COPY BLOCK SIZE FROM DCB\n         MVC   USERRCFM,DCBRECFM     COPY RECORD FORMAT FROM DCB\n         LA    R3,USERLST-USERREQ    INITIAL LENGTH\n         LA    R4,USERLST            INITIAL OUTPUT ADDRESS\n         LA    R1,REQI0320           EOF ADDRESS\n         ST    R1,EOF24              SET EOF ADDRESS FOR FXS24\n         L     R9,=A(COMMIOSZ)       FULL I/O AREA SIZE\n         SR    R9,R3                 MINUS PREFIX DATA LENGTH\n         SH    R9,DCBLRECL           MINUS 1 RECORD FOR GOOD MEASURE\nREQI0280 DS    0H\n         ST    R4,IOA24              I/O AREA ADDRESS\n         FX24  $GETM                 READ/MOVE A RECORD\n         ITRACE ID=LISTLEN,RDATA1=R3\n         SR    R1,R1                 CLEAR REGISTER\n         TM    DCBRECFM,DCBRECV      VARIABLE LENGTH RECORDS?\n         BO    REQI0290              YES\n         ICM   R1,3,DCBLRECL         USE RECORD SIZE FROM DCB\n         B     REQI0300\nREQI0290 DS    0H\n         ICM   R1,3,0(R4)            USE SIZE FROM I/O AREA\nREQI0300 DS    0H\n         AR    R3,R1                 PLUS SIZE OF THIS RECORD\n         SR    R9,R1                 MINUS LENGTH FROM AMOUNT LEFT\n         BNH   REQI0310              I/O AREA IS FULL.. FORCE EXIT\n         AR    R4,R1                 NEXT RECORD IN I/O AREA\n         B     REQI0280              READ ANOTHER RECORD\nREQI0310 DS    0H\n         ITRACE ID=FORCEOF\n         B     REQI0330\nREQI0320 DS    0H\n         ITRACE ID=LISTEOF\nREQI0330 DS    0H\n         FX24  $CLOSE\n         FXCALL FXSDAIR,RELEASE      RELEASE THE DATA SET\n         OC    DAIRR15,DAIRR15       DAIR SUCCESSFUL?\n         BNZ   ERR0020\n         ITRACE ID=LISTTOT,RDATA1=R3\n         STCM  R3,3,USERLEN          SET TOTAL LENGTH\n         MVI   USERRC,0              SET RETURN CODE\n         B     EXIT0000              EXIT\nREQI0340 DS    0H\n         LA    R1,MSG04L             SET LRECL\n         STH   R1,USERRCSZ           SET RECORD SIZE\n         LA    R1,4(R1)              PLUS 4\n         STH   R1,USERBLKZ           SET BLOCK SIZE\n         MVI   USERRCFM,DCBRECV+DCBRECBR\n         MVC   USERLST(MSG04L),MSG04 SET MESSAGE\n         LA    R3,(USERLST-USERREQ)+MSG04L   TOTAL LENGTH\n         STCM  R3,3,USERLEN          SET TOTAL LENGTH\n         MVI   USERRC,0              SET RETURN CODE\n         B     EXIT0000              EXIT\nREQI0350 DS    0H\n         ITRACE ID=NOLIST            LIST DATASET NOT ALLOCATED\n         LA    R1,MSG05L             SET LRECL\n         STH   R1,USERRCSZ           SET RECORD SIZE\n         LA    R1,4(R1)              PLUS 4\n         STH   R1,USERBLKZ           SET BLOCK SIZE\n         MVI   USERRCFM,DCBRECV+DCBRECBR\n         MVC   USERLST(MSG05L),MSG05 SET MESSAGE\n         LA    R3,(USERLST-USERREQ)+MSG05L   TOTAL LENGTH\n         STCM  R3,3,USERLEN          SET TOTAL LENGTH\n         MVI   USERRC,0              SET RETURN CODE\n         B     EXIT0000              EXIT\nREQI0360 DS    0H\n         ITRACE ID=LSTNOPEN          LIST DATASET NEVER OPENED\n         FXCALL FXSDAIR,RELEASE      RELEASE THE DATA SET\n         OC    DAIRR15,DAIRR15       DAIR SUCCESSFUL?\n         BNZ   ERR0020               NO\n         LA    R1,MSG06L             SET LRECL\n         STH   R1,USERRCSZ           SET RECORD SIZE\n         LA    R1,4(R1)              PLUS 4\n         STH   R1,USERBLKZ           SET BLOCK SIZE\n         MVI   USERRCFM,DCBRECV+DCBRECBR\n         MVC   USERLST(MSG06L),MSG06 SET MESSAGE\n         LA    R3,(USERLST-USERREQ)+MSG06L   TOTAL LENGTH\n         STCM  R3,3,USERLEN          SET TOTAL LENGTH\n         MVI   USERRC,0              SET RETURN CODE\n         B     EXIT0000              EXIT\nMSTR0000 DS    0H\n         ITRACE ID=MASTERIO\n         FXCALL FXSMSTR              MASTER FILE I/O PARM BLOCK ADDR\n         LA    R2,MSTRRECD           RETURNED MASTER FILE RECORD ADDR\n         USING REQBLOK,R2            DEFINE BASE\n         MVC   CONVREC#,MSTRREC#     SAVE RECORD NUMBER\n         BR    R9                    RETURN\nPRT0000  DS    0H\n         ITRACE ID=PRINT\n         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE\n         BR    R9                    RETURN\nDAIR0000 DS    0H\n         ITRACE ID=CALLDAIR\n         FXCALL FXSDAIR              LINK TO FXSDAIR\n         OC    DAIRR15,DAIRR15       DAIR SUCCESSFUL?\n         BZR   R9                    YES, RETURN\n         CLC   X1708,DAIRERR         DATASET NOT FOUND?\n         BER   R9                    YES, RETURN\n         ITRACE ID=DAIRFAIL,         DAIR PROBLEMS                     +\n               DATA1=DAIRR15         .. TRACE R15, ERR, AND INFO CODES\n         ABEND $U0016,DUMP,,USER     OOPS\nERR0010  DS    0H\n         ITRACE ID=DSSAFAIL,         SYSPRINT LIST FILE ALLOCATE FAILED+\n               DATA1=DAIRR15         TRACE R15, ERR, AND INFO\n         ABEND $U0079,DUMP,,USER\nERR0020  DS    0H\n         ITRACE ID=RLSEFAIL,         SYSPRINT FILE RELEASE FAILED      +\n               DATA1=DAIRR15         TRACE R15, ERR, AND INFO\n         ABEND $U0080\nERR0030  DS    0H\n         ITRACE ID=NOTIOT,           DDNAME NOT FOUND IN TIOT          +\n               DATA1=DAIRDDN\n         ABEND $U0114,DUMP,,USER\nERR0040  DS    0H\n         ITRACE ID=CAMLSTF,          CAMLST FAILED FOR PRINT DSN       +\n               RDATA1=R15,           .. CAMLST RETURN CODE             +\n               RDATA2=R8             .. FX24 PARM BLOCK ADDRESS\n         ABEND $U0115,DUMP,,USER\nEXIT0000 DS    0H\n         ITRACE ID=EXIT              EXITING PRINT MODULE\n         ICM   R1,15,DXD24           24-BIT AREA ACQUIRED?\n         BZ    EXIT0010              NO\n         FREEMAIN RU,A=(1),LV=FX24L FREEMAIN 24-BIT WORK AREA\n         XC    DXD24,DXD24           CLEAR THE ADDRESS\nEXIT0010 DS    0H\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        CONSTANTS                                                   *\n*                                                                    *\n* ------------------------------------------------------------------ *\nDXDSTART DC    Q(DXDSREQI)           DISPLACEMENT TO WORK AREA\nP0       DC    P'0'\nX1708    DC    X'1708'\nSTAGING  DC    C'STAGING'\nSYSIN    DC    C'SYSIN'\nSYSPRINT DC    C'SYSPRINT'\nMSG01    DS    0C\n         DC    CL11'FXSREQI01I'\nMSG01DSC DC    CL8' '\n         DC    C' DATASET '\nMSG01DSN DC    CL44' '\n         DC    C' DELETED FOR REQUEST '\nMSG01NDE DC    CL8' '\nMSG01NBR DC    XL8'4021202020202020'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'FXSREQI02I'\n         DC    C'REQUEST '\nMSG02NDE DC    CL8' '\nMSG02NBR DC    XL8'4021202020202020'\n         DC    C' DELETED'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'FXSREQI03I'\n         DC    C'REQUEST '\nMSG03NDE DC    CL8' '\nMSG03NBR DC    XL8'4021202020202020'\n         DC    C' CANCELLED'\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    AL2(MSG04L)\n         DC    AL2(0)\n         DC    C'*** SYSPRINT FILE HAS BEEN DELETED ***'\nMSG04L   EQU   *-MSG04\nMSG05    DS    0C\n         DC    AL2(MSG05L)\n         DC    AL2(0)\n         DC    C'*** SYSPRINT FILE HAS NOT BEEN ALLOCATED ***'\nMSG05L   EQU   *-MSG05\nMSG06    DS    0C\n         DC    AL2(MSG06L)\n         DC    AL2(0)\n         DC    C'*** SYSPRINT FILE HAS NOT BEEN OPENED ***'\nMSG06L   EQU   *-MSG06\nDCBI     DCB   DDNAME=DDNAME,            MODEL DCB TO READ DF/DSS LIST +\n               DSORG=PS,                 .. SEQUENTIAL                 +\n               EODAD=*,                  .. EOF ADDRESS                +\n               MACRF=GM                  .. GET/MOVE MODE\nDCBIL    EQU   *-DCBI\n         LTORG\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        WORK AREAS                                                  *\n*                                                                    *\n* ------------------------------------------------------------------ *\nDXDSREQI DSECT\nDXDID    DS    CL8                   WORK AREA OWNER ID\nDXDSAVE  DS    18F                   REGISTER SAVE AREA\nDXDDWORD DS    D                     CVD/CVB WORK AREA\nDXDDELSV DS    2F                    SESS AND CONV BLOCK ADDR SAVE AREA\nDXD24    DS    A                     24-BIT WORK AREA ADDRESS\nDXDUSER  DS    CL8                   USERID REQUESTED\n         PRTBLOK DSECT=NO\n         DAIRREQ DSECT=NO\n* ------------------------------------------------------------------ *\n*              PRINT MODULE INTERFACE BLOCK                          *\n* ------------------------------------------------------------------ *\n         MSTRREQ DSECT=NO\n* ------------------------------------------------------------------ *\n*              USER REQUEST/RESPONSE BLOCK                           *\n* ------------------------------------------------------------------ *\n         USERREQ\nUSERCMD  DS    C               COMMAND FROM FXTREQI\n$USERINQ EQU   C'I'            .. INQUIRE\n$USERCAN EQU   C'C'            .. CANCEL REQUEST\n$USERDEL EQU   C'D'            .. DELETE REQUEST\n$USERPRT EQU   C'O'            .. RETURN DF/DSS LIST FILE\n$USERSTA EQU   C'S'            .. RETURN STATUS OF SPECIFIC REQUEST\nUSERREC# DS    XL2             STARTING RECORD NUMBER\nUSERIDI  DS    CL8             USER ID (FOR SPECIFIC USER REQUESTS)\nUSERNODE DS    CL8             NODE NAME (FOR SPECIFIC REQUESTS)\nUSERNBR  DS    XL4             REQUEST NUMBER (FOR SPECIFIC REQUESTS)\nUSERRCSZ DS    XL2             LRECL FROM DCB USED TO READ DF/DSS LIST\nUSERBLKZ DS    XL2             BLKSZ FROM DCB USED TO READ DF/DSS LIST\nUSERRCFM DS    X               RECFM FROM DCB USED TO READ DF/DSS LIST\nUSERLST  DS    0C\n* ------------------------------------------------------------------ *\n*              COMMON DATA MAP                                       *\n* ------------------------------------------------------------------ *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------ *\n*              SESSION BLOCK                                         *\n* ------------------------------------------------------------------ *\n         SESSBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              CONVERSATION BLOCK                                    *\n* ------------------------------------------------------------------ *\n         CONVBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              MASTER FILE RECORD                                    *\n* ------------------------------------------------------------------ *\n         REQBLOK  DSECT=YES\n* ------------------------------------------------------------------ *\n*              DUMP/RESTORE REQUEST BLOCK                            *\n* ------------------------------------------------------------------ *\n         DRREQ    DSECT=YES\n* ------------------------------------------------------------------ *\n*              24-BIT PARM AREA                                      *\n* ------------------------------------------------------------------ *\n         FX24PRM  DSECT=YES\n* ------------------------------------------------------------------ *\n*              DCB DSECT                                             *\n* ------------------------------------------------------------------ *\n         DCBD     DSORG=PS\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         IHAPSA   DSECT=YES,LIST=NO\n         IKJTCB   DSECT=YES,LIST=NO\nTIOT     DSECT\n         IEFTIOT1\n         IEFUCBOB LIST=NO\nDSCB     DSECT\n         IECSDSL1 1\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              EQUATES                                               *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         ABCODES\n         END  FXSREQI\n./ ADD NAME=FXSRPLX  0100-99056-99056-1500-00116-00116-00000-FX-REL1\n\n         TITLE 'VTAM RPL EXIT'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSRPLX                                               *\n*                                                                     *\n*  VTAM RPL exit                                                      *\n*                                                                     *\n*  When the storage for the RPLs associated with SESSBLOKs and        *\n*  CONVBLOKs is acquired, 4 bytes is added to the size to allow for   *\n*  a \"pointer\" that points back to the control block the RPL belongs  *\n*  to.  The pointer immediately follows the RPLs.  This prevents      *\n*  this exit from having to \"scan\" the SESSBLOKs and CONVBLOKs.       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXSRPLX  CSECT\nFXSRPLX  AMODE 31\nFXSRPLX  RMODE ANY\n         LR    R12,R15               LOAD BASE\n         USING FXSRPLX,R12           DEFINE BASE\n         LR    R10,R1                COPY PARAMETER LIST ADDRESS\n         USING IFGRPL,R10            DEFINE BASE\n         LR    R5,R14                SAVE RETURN ADDRESS\n         B     RPLX0010              SKIP ADDRESS AND EYECATCHER\n         DC    ((PFXMODNM-MODPRFX)-(*-FXSRPLX))X'00'\n         DC    CL8'FXSRPLX'          MODULE NAME\n         DC    C'&SYSDATE'           DATE OF ASSEMBLY\n         DC    C'&SYSTIME'           TIME OF ASSEMBLY\nRPLX0010 DS    0H\n         GETMAIN RU,LV=72,LOC=BELOW  ACQUIRE A SAVE AREA\n         LR    R13,R1                SAVE AREA ADDRESS\n         L     R1,RPLDACB            ACB'S ADDRESS\n         USING IFGACB,R1             DEFINE BASE\n         L     R11,ACBUSER           COMMON DATA ADDRESS\n         USING FXSCOMM,R11           DEFINE BASE\n         L     R7,RPLL(R10)          SESSBLOK OR CONVBLOK ADDRESS\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R10,           .. RPL'S ADDRESS                  +\n               RDATA2=R7             .. SESSBLOK OR CONVBLOK ADDRESS\n         USING SESSBLOK,R7           DEFINE BASE\n         CLC   SESSEYE,SESSID        IS THIS A SESSBLOK?\n         BNE   RPLX0020              NO\n         C     R10,SESSRPL           RPL BELONG TO THIS SESSBLOK?\n         BNE   ERR0010               ERROR\n         TM    SESSSTAT,$SESSPND     FUNCTION PENDING?\n         BNO   ERR0020               NO.. WE'RE LOST AGAIN\n         NI    SESSSTAT,255-$SESSPND RESET 'PENDING' INDICATOR\n         POST  COMMVECB              POST 'VTAM' ECB\n         B     EXIT0000              AND EXIT\nRPLX0020 DS    0H\n         L     R6,RPLL(R10)\n         USING CONVBLOK,R6           DEFINE BASE\n         CLC   CONVEYE,CONVID        IS THIS A CONVBLOK?\n         BNE   ERR0010               NO\n         C     R10,CONVRPL           RPL BELONG TO THIS CONVBLOK?\n         BNE   ERR0010               NO\n         TM    CONVSTAT,$CONVPND     FUNCTION PENDING?\n         BNO   ERR0030               NO.. LOST AGAIN\n         NI    CONVSTAT,255-$CONVPND RESET 'PENDING' INDICATOR\n         POST  COMMVECB              POST 'VTAM' ECB\n         B     EXIT0000              AND EXIT\n* ------------------------------------------------------------------- *\n*        SERIOUS ERRORS                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=UNKNRPL\n         ABEND $U0087,DUMP,,USER     RPL DOES NOT BELONG TO US\nERR0020  DS    0H\n         ITRACE ID=NOSESSP\n         ABEND $U0088,DUMP,,USER     SESS LEVEL WITH NOTHING PENDING\nERR0030  DS    0H\n         ITRACE ID=NOCONVP\n         ABEND $U0089,DUMP,,USER     CONV LEVEL WITH NOTHING PENDING\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT              EXITING\n         FREEMAIN RU,A=(13),LV=72    FREEMAIN REGISTER SAVE AREA\n         BR    R5                    RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        CONSTANTS                                                   *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         LTORG\nSESSID   DC    CL8'SESSBLOK'\nCONVID   DC    CL8'CONVBLOK'\n* ------------------------------------------------------------------ *\n*              COMMON DATA MAP                                       *\n* ------------------------------------------------------------------ *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------ *\n*              VTAM SESSION BLOCK                                    *\n* ------------------------------------------------------------------ *\n         SESSBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              VTAM CONVERSATION BLOCK                               *\n* ------------------------------------------------------------------ *\n         CONVBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              ACB DSECT                                             *\n* ------------------------------------------------------------------ *\n         IFGACB AM=VTAM\n* ------------------------------------------------------------------ *\n*              RPL AND RPL EXTENSION DSECTS                          *\n* ------------------------------------------------------------------ *\n         IFGRPL AM=VTAM\nRPLL     EQU   *-IFGRPL\n* ------------------------------------------------------------------ *\n*              EQUATES                                               *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         ABCODES\n         END  FXSRPLX\n./ ADD NAME=FXSSEND  0100-99056-99056-1500-00905-00905-00000-FX-REL1\n\n         TITLE 'FILE TRANSMISSION SEND'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSSEND                                               *\n*                                                                     *\n*        Earlier we found a request to transmit a dataset or a        *\n*        previously received dataset 'RESTORE' has completed.         *\n*                                                                     *\n*        The partner node is active and the conversation has been     *\n*        allocated.                                                   *\n*                                                                     *\n*        If this is a data set transmission request, this module      *\n*        performs the SEND end of transmission.  The data set has     *\n*        already been \"dumped\" by DF/DSS or IEBCOPY.  The dump        *\n*        data set is allocated, and the DCB used to read it is open.  *\n*        On each successive iteration, the next block will be read    *\n*        from the \"dump\" data set and transmitted to the other end.   *\n*        At EOD, a \"last\" record is transmitted to notify the         *\n*        receiver that the transmission is complete.                  *\n*                                                                     *\n*        If a RESTORE has completed, we need to inform the originator *\n*        of the success or failure of the RESTORE.                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSSEND    FXPRFX 'FILE TRANSMISSION SEND'\nFXSSEND  AMODE 31\nFXSSEND  RMODE ANY\n         USING FXSSEND,R12           DEFINE BASE REGISTER\n         LR    R8,R1                 COPY PARAMETER BLOCK ADDRESS\n         USING VTAMBLOK,R8           DEFINE BASE\n         L     R7,VTAMSESS           SESSION BLOCK'S ADDRESS\n         USING SESSBLOK,R7           DEFINE BASE\n         L     R6,VTAMCONV           CONVERSATION BLOCK'S ADDRESS\n         USING CONVBLOK,R6           DEFINE BASE\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    SEND0010              YES\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         MVI   PRTCC,C' '            INITIALIZE PRINT I/O AREA\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         GETMAIN RU,                 ACQUIRE 24-BIT PARM BLOCK         +\n               LV=FX24L,             .. AREA SIZE                      +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,DXD24              SAVE 24-BIT PARM AREA ADDRESS\nSEND0010 DS    0H\n         TM    COMMEOJ,$EOJ3         TIME TO CLEAN-UP?\n         BO    EXIT0000              YES\n         L     R9,DXD24              24-BIT PARM AREA ADDRESS\n         USING FX24PRM,R9            DEFINE BASE\n         CLI   CONVFUNC,0            ANY FUNCTION?\n         BNE   SEND0100              YES\n         ITRACE ID=STRTXMIT,         STARTING TRANSMISSION             +\n               DATA1=SESSNAME,       .. LU NAME                        +\n               DATA2=CONVREC#        .. MASTER FILE RECORD NUMBER\n         MVC   MSTRREC#,CONVREC#     SET RECORD NUMBER\n         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)\n         BAL   R4,MSTR0000           READ MASTER FILE\n         USING REQBLOK,R5            DEFINE BASE\n         CLI   REQSTAT,$REQRSTC      RESTORE COMPLETE?\n         BE    SEND0090              YES\n         TM    REQSTAT,$REQNFYE      ERROR REQUIRING SENDER NOTIFY?\n         BO    SEND0090              YES\n         CLC   REQTNODE,SESSNAME     TO BE TRANSMITTED BY PARTNER?\n         BE    SEND0080              YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        We have a data set to transmit.                              *\n*                                                                     *\n*        Verify this node is in the destination list.                 *\n*                                                                     *\n*        If the checkpoint data for this node is zero, this is the    *\n*        start of a new transmission.  If the checkpoint data is not  *\n*        zero, this is a transmission restart.                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,REQNDE#          NUMBER OF NODES\n         BZ    ERR0030               BAD NEWS\n         LA    R3,REQNDENM           FIRST NODE NAME\n         USING REQNDENM,R3           DEFINE BASE\nSEND0020 DS    0H\n         CLC   REQNDENM,SESSNAME     IS THIS THE RIGHT NODE?\n         BE    SEND0030              YES\n         LA    R3,REQNDEL(R3)        NEXT NODE\n         BCT   R1,SEND0020           CHECK NEXT NODE\n         B     ERR0030               NODE NOT FOUND\nSEND0030 DS    0H\n         MVI   REQNDEST,$REQNDET     STATUS IS 'BEING TRANSMITTED'\n         OC    REQNDECR,REQNDECR     CHECKPOINT DATA ZERO?\n         BNZ   SEND0040              NO.. THIS IS A RESTART\n         DROP  R3\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Starting a new data set transmission.                        *\n*                                                                     *\n*        Issue a message to log the transmission starting.            *\n*        Allocate the staging data set.                               *\n*        Open the DCB to be used to read the data set.                *\n*        Send the control record to the receiving node.               *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         OI    DXDFLAG,$DXDNEW       NEW TRANSMISSION\n         MVC   PRTMSGID(MSG01L),MSG01\n         MVC   PRTMSGID+(MSG01NDE-MSG01)(L'MSG01NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG01NBR-MSG01)(L'MSG01NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG01NDT-MSG01)(L'MSG01NDT),SESSNAME\n         B     SEND0050\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Restarting a transmission.                                   *\n*                                                                     *\n*        Both sending and receiving nodes \"checkpoint\" every 100      *\n*        stage data set physical blocks.  To restart:                 *\n*          1) Issue a message to log the restart.                     *\n*          2) Allocate the stage data set.                            *\n*          3) Open the DCB to read the data set.                      *\n*          4) Issue a POINT to re-position into the stage data set.   *\n*          5) Send a restart record to the receiver.                  *\n*                                                                     *\n*        When the receiver receives the restart record, it will       *\n*        verify that it also checkpointed on the same physical        *\n*        block.  If the checkpoint record matches, the restart        *\n*        will proceed.  If the checkpoint data does not match,        *\n*        the receiver (and we) will restart the transmission from     *\n*        the beginning.                                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSEND0040 DS    0H\n         NI    DXDFLAG,255-$DXDNEW   NOT A NEW TRANSMISSION\n         MVC   PRTMSGID(MSG08L),MSG08\n         MVC   PRTMSGID+(MSG08NDE-MSG08)(L'MSG08NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG08NBR-MSG08)(L'MSG08NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG08NDT-MSG08)(L'MSG08NDT),SESSNAME\n         ICM   R1,15,REQNDECR        CHECKPOINT RECORD NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG08REC-MSG08)(L'MSG08REC),DXDDWORD+3\nSEND0050 DS    0H\n         BAL   R4,PRT0000            PRINT MESSAGE\n         FXCALL FXSDAIR,ALLOCATE,    ALLOCATE THE DATA SET             +\n               DATASET,              .. EXISTING DATA SET              +\n               ,                     .. DD NAME WILL BE GENERATED      +\n               REQWDSNM              .. DATA SET NAME\n         OC    DAIRR15,DAIRR15       ALLOCATION SUCCESSFUL?\n         BNZ   ERR0020               NO\n         L     R14,CONVDCB           DCB'S ADDRESS\n         MVC   0(DCBRL,R14),DCBRI    COPY 'READ' DCB\n         USING IHADCB,R14            DEFINE BASE\n         MVC   DCBDDNAM,DAIRDDN      SET DDNAME\n         ST    R14,DCB24             SET DCB ADDRESS\n         FX24  $OPENI                OPEN DCB\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         USING USERREQ,R2            DEFINE BASE\n         LA    R0,(USERDATA-USERREQ)+DCBRL+REQBLOKL\n         STH   R0,USERLEN            SET LENGTH\n         TM    DXDFLAG,$DXDNEW       NEW TRANSMISSION?\n         BO    SEND0060              YES\n         MVC   USERMOD,RESTART       SET RECORD TYPE 'STRT' (RESTART)\n         B     SEND0070\nSEND0060 DS    0H\n         MVC   USERMOD,FIRST         SET RECORD TYPE '1ST '\nSEND0070 DS    0H\n         MVC   USERDATA(DCBRL),0(R14) COPY INPUT DCB\n         LA    R14,USERDATA+DCBRL    END OF PREFIX AND DCB\n         LA    R15,REQBLOKL          REQUEST BLOCK'S SIZE\n         LA    R0,MSTRRECD           REQUEST BLOCK'S ADDRESS\n         LR    R1,R15                REQUEST BLOCK'S SIZE\n         MVCL  R14,R0                COPY REQUEST BLOCK\n         MVI   MSTRCMD,$MSTRWRT      SET COMMAND\n         BAL   R4,MSTR0000           UPDATE MASTER FILE\n         B     SEND0310              SEND 1ST BLOCK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        We have a request entered at this node, but is to be         *\n*        transmitted by another node (the node in the SESSBLOK        *\n*        passed to us by FXVTAM).                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSEND0080 DS    0H\n         ITRACE ID=STRTXFER          STARTING TRANSFER TO XMIT NODE\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         LA    R0,(USERDATA-USERREQ)+REQBLOKL\n         STH   R0,USERLEN            SET LENGTH\n         MVC   USERMOD,XFER          SET RECORD TYPE 'XFER'\n         LA    R14,USERDATA          END OF PREFIX\n         LA    R15,REQBLOKL          REQUEST BLOCK'S SIZE\n         LA    R0,MSTRRECD           REQUEST BLOCK'S ADDRESS\n         LR    R1,R15                REQUEST BLOCK'S SIZE\n         MVCL  R14,R0                COPY REQUEST BLOCK\n         B     SEND0310              SEND 'XFER'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        A restore has completed (or failed).  It is time to          *\n*        notify the sender of the success or failure.                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSEND0090 DS    0H\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         LA    R0,(USERDATA-USERREQ)+REQBLOKL\n         STH   R0,USERLEN            SET THE LENGTH\n         MVC   USERMOD,RSTR          SET RECORD TYPE\n         LA    R14,USERDATA          MASTER RECORD AREA\n         LA    R15,REQBLOKL          MASTER RECORD SIZE\n         LA    R0,MSTRRECD           MASTER FILE RECORD ADDRESS\n         LR    R1,R15                COPY MASTER RECORD SIZE\n         MVCL  R14,R0                COPY MASTER RECORD TO I/O AREA\n         B     SEND0310              SEND NOTIFICATION TO ORIGINATOR\n*---------------------------------------------------------------------*\n*        This is a continuation of an established SEND.               *\n*                                                                     *\n*           If last function was a VTAM SEND and the VTAM ECB         *\n*           has been POSTed, start the READ for the next record       *\n*           from the stage dataset.                                   *\n*                                                                     *\n*           If last function was a BDAM READ and the BDAM ECB         *\n*           has been posted, start the VTAM SEND.                     *\n*                                                                     *\n*           At EOD on the stage dataset, we will send a \"LAST\"        *\n*           notification to the secondary end.  When the \"LAST\"       *\n*           has been processed, we can update the master file         *\n*           file to indicate that the dataset has been transmitted,   *\n*           and search the master file for another request for this   *\n*           node.                                                     *\n*---------------------------------------------------------------------*\nSEND0100 DS    0H\n         ITRACE ID=SENDCONT\n         CLI   CONVFUNC,$CONVFD      WAS LAST FUNCTION A DE-ALLOCATE?\n         BE    SEND0380              YES\n         CLI   CONVFUNC,$CONVFR      WAS LAST FUNCTION A RECEIVE?\n         BE    SEND0130              YES\n         CLI   CONVFUNC,$CONVFS      WAS LAST FUNCTION A SEND?\n         BE    SEND0110              YES\n         L     R3,CONVDECB           DECB'S ADDRESS\n         TM    0(R3),X'40'           HAS BSAM ECB BEEN POSTED?\n         BNO   EXIT0010              NO.. EXIT\n         ITRACE ID=RDCHECK           CHECKING READ COMPLETION\n         ST    R3,DECB24             SET DECB'S ADDRESS\n         LA    R1,SEND0280           EOF ADDRESS\n         ST    R1,EOF24              SET ADDRESS\n         OI    EOF24,X'80'           TURN ON 31-BIT MODE BIT\n         FX24  $CHECK                CALL CHECK IN 24-BIT MODULE\n         NI    CONVSTAT,255-$CONVPND READ IS NO LONGER PENDING\n         L     R14,CONVDCB           DCB'S ADDRESS\n         SR    R3,R3                 CLEAR REGISTER\n         ICM   R3,3,DCBBLKSI         BLOCK SIZE FROM DCB\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,7,DCBIOBA+1        IOB ADDRESS\n         LA    R1,IOBBSAMN-IOB(R1)   PLUS PREFIX LENGTH\n         USING IOBSTDRD,R1           DEFINE IOBSTDRD BASE\n         SH    R3,IOBSTDRD+14        MINUS RESIDUAL LENGTH\n         ITRACE ID=READLEN,          TRACE RECORD SIZE                 +\n               RDATA1=R3\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         LA    R3,USERIO-USERREQ(R3) PLUS PREFIX LENGTH\n         STCM  R3,3,USERLEN          SET RECORD SIZE\n         MVC   USERMOD,DATA          SET COMMAND\n         B     SEND0310              SEND THE DATA\nSEND0110 DS    0H\n         TM    CONVSTAT,$CONVPND     STILL PENDING?\n         BO    EXIT0010              YES.. EXIT\n         MVI   VTAMCMD,$VTAMCHK      SET COMMAND (ISSUE A CHECK)\n         BAL   R4,VSUB0000           LINK TO VSUB\n         ITRACE ID=SENDDONE          VTAM SEND COMPLETE\n         L     R1,CONVRPLX           RPL EXTENSION'S ADDRESS\n         USING ISTRPL6X,R1           DEFINE BASE\n         OC    RPL6RC,RPL6RC         ALL ZEROS?\n         BNZ   ERR0010               NO\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         CLC   FIRST,USERMOD         '1ST ' RECORD?\n         BE    SEND0120              YES\n         CLC   RESTART,USERMOD       'STRT' RECORD?\n         BE    SEND0120              YES\n         CLC   RSTR,USERMOD          RESTORE NOTIFICATION COMPLETE?\n         BE    SEND0320              YES\n         CLC   XFER,USERMOD          'XFER' SEND COMPLETE?\n         BE    SEND0370              YES\n         CLC   LAST,USERMOD          LAST SEND COMPLETE?\n         BE    SEND0250              YES\n         CLC   NULL,USERMOD          NULL SEND COMPLETE?\n         BE    SEND0260              YES\n         CLC   DATA,USERMOD          DATA SEND COMPLETE?\n         BE    SEND0210              YES\n         ABEND $U0085,DUMP,,USER\n*---------------------------------------------------------------------*\n*                                                                     *\n*      We have either just sent the first (1ST) or restart (STRT)     *\n*      record to the receiver.                                        *\n*         1) Issue a CHECK to complete the SEND.                      *\n*         2) Issue the RECEIVE to receive the GO/NOGO response from   *\n*            the receiver.                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\nSEND0120 DS    0H\n         ITRACE ID=RCVSTAT1\n         MVI   VTAMCMD,$VTAMCHK      SET COMMAND (CHECK)\n         BAL   R4,VSUB0000           LINK TO VSUB TO ISSUE CHECK\n         L     R1,CONVRPLX           RPL EXTENSION'S ADDRESS\n         OC    RPL6RC,RPL6RC         ALL ZEROS?\n         BNZ   ERR0010               NO\n         MVI   VTAMCMD,$VTAMRCV      SET COMMAND (ISSUE RECEIVE)\n         BAL   R4,VSUB0000           LINK TO VSUB TO ISSUE RECEIVE\n         B     EXIT0010              AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        We have sent the first (1ST) or restart (STRT) record to     *\n*        the receiver and are now waiting to receive the GO/NOGO      *\n*        response.                                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nSEND0130 DS    0H\n         TM    CONVSTAT,$CONVPND     STILL PENDING?\n         BO    EXIT0010              YES.. EXIT\n         ITRACE ID=RCVSTAT2          STATUS HAS BEEN RECEIVED\n         MVI   VTAMCMD,$VTAMCHK      SET COMMAND (CHECK)\n         BAL   R4,VSUB0000           LINK TO VSUB TO ISSUE CHECK\n         L     R1,CONVRPLX           RPL EXTENSION'S ADDRESS\n         OC    RPL6RC,RPL6RC         ALL ZEROS?\n         BNZ   ERR0010               NO\n         MVC   MSTRREC#,CONVREC#     SET RECORD NUMBER\n         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)\n         BAL   R4,MSTR0000           READ MASTER FILE RECORD\n         SR    R15,15                CLEAR REGISTER\n         ICM   R15,3,REQNDE#         NUMBER OF NODES\n         BZ    ERR0030               BAD NEWS\n         LA    R3,REQNDENM           FIRST NODE NAME\n         USING REQNDENM,R3           DEFINE BASE\nSEND0140 DS    0H\n         CLC   REQNDENM,SESSNAME     IS THIS THE RIGHT NODE?\n         BE    SEND0150              YES\n         LA    R3,REQNDEL(R3)        NEXT NODE\n         BCT   R15,SEND0140          CHECK NEXT NODE\n         B     ERR0030               NODE NOT FOUND\nSEND0150 DS    0H\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         CLI   USERRC,0              PERMISSION TO PROCEED?\n         BNE   SEND0160              NO\n         CLC   RESTART,USERMOD       WAS THIS A RESTART?\n         BE    SEND0190              YES.. ISSUE POINT\n         B     SEND0210              ISSUE A READ\nSEND0160 DS    0H\n         CLC   RESTART,USERMOD       WAS THIS A RESTART?\n         BE    SEND0200              YES.. RESTART FROM BEGINNING\n*---------------------------------------------------------------------*\n*                                                                     *\n*   A destination has rejected receiving a data set.                  *\n*   We need to:                                                       *\n*      We need to update the status for this destination              *\n*      If this was the last destination to respond, the over-all      *\n*         status should be set to COMPLETE                            *\n*      Close and release the stage data set we were going to transmit *\n*      Print the message returned by the rejecting node               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MVC   REQNDEST,USERDATA     SET STATUS\n         DROP  R3\n         LA    R3,REQNDENM           FIRST NODE\n         LH    R15,REQNDE#           NUMBER OF NODES\nSEND0170 DS    0H\n         CLI   REQNDEST,$REQNDEC     COMPLETE OR IN ERROR?\n         BL    SEND0180              NO\n         LA    R3,REQNDEL(R3)        NEXT NODE\n         BCT   R15,SEND0170          LOOP\n         MVI   REQSTAT,$REQDONE      OVER-ALL STATUS IS COMPLETE\nSEND0180 DS    0H\n         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)\n         BAL   R4,MSTR0000           UPDATE MASTER FILE RECORD\n         MVC   DCB24,CONVDCB         SET DCB'S ADDRESS\n         FX24  $CLOSE                CALL CLOSE IN 24-BIT MODULE\n         L     R14,CONVDCB           DCB'S ADDRESS\n         USING IHADCB,R14            DEFINE BASE\n         MVC   DAIRDDN,DCBDDNAM      SET DDNAME\n         FXCALL FXSDAIR,RELEASE,,DCBDDNAM\n         OC    DAIRR15,DAIRR15       RELEASE SUCCESSFUL?\n         BNZ   ERR0040               NO\n         MVC   PRTMSGID(MSG02L),MSG02\n         MVC   PRTMSGID+(MSG02NDE-MSG02)(L'MSG02NDE),SESSNAME\n         ICM   R15,15,REQNBR         REQUEST NUMBER\n         CVD   R15,DXDDWORD          CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG02NBR-MSG02)(L'MSG02NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG02NDT-MSG02)(L'MSG02NDT),SESSNAME\n         MVC   PRTMSGID+(MSG02MSG-MSG02)(L'MSG02MSG),USERMSG\n         BAL   R4,PRT0000            PRINT MESSAGE\n         ITRACE ID=SENDNULL\n         MVC   USERMOD,NULL          SET TYPE TO NULL\n         MVI   VTAMCMD,$VTAMSND      SET COMMAND (ISSUE A SEND)\n         BAL   R4,VSUB0000           LINK TO VSUB\n         B     EXIT0010              AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*    We have a GO response from the receiver.  If this is the start   *\n*    of a new transmission, just start reading the stage data set.    *\n*    If this is a restart, issue the POINT to reposition within the   *\n*    stage data set.                                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\nSEND0190 DS    0H\n         ITRACE ID=RESTART\n         MVC   DCB24,CONVDCB         SET DCB ADDRESS\n         MVC   TTR24,REQNDECT        SET TTR FOR POINT\n         FX24  $POINT                ISSUE POINT\n         LTR   R15,R15               POINT SUCCESSFUL?\n         BNZ   ERR0070               NO\n         B     SEND0240              START READING THE DATA SET\n*---------------------------------------------------------------------*\n*                                                                     *\n*    We have a NOGO response to a restart.                            *\n*       1) Issue a message.                                           *\n*       2) Clear the restart data.                                    *\n*       3) Start the read/transmit.                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\nSEND0200 DS    0H\n         ITRACE ID=STRTOVER          STARTING ALL-OVER\n         MVC   PRTMSGID(MSG09L),MSG09\n         MVC   PRTMSGID+(MSG09NDE-MSG09)(L'MSG09NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG09NBR-MSG09)(L'MSG09NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG09NDT-MSG09)(L'MSG09NDT),SESSNAME\n         BAL   R4,PRT0000            PRINT MESSAGE\n         XC    REQNDECR,REQNDECR     CLEAR RESTART RECORD NUMBER\n         XC    REQNDECT,REQNDECT     CLEAR RESTART TTR\n         B     SEND0240              START READING MASTER FILE\nSEND0210 DS    0H\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         CLC   DATA,USERMOD          DATA BLOCK JUST SENT?\n         BNE   SEND0240              NO\n         ICM   R1,15,CONVCKPT        NUMBER OF BLOCKS SENT\n         LA    R1,1(R1)              PLUS 1\n         STCM  R1,15,CONVCKPT        SAVE TOTAL\n         SR    R0,R0                 CLEAR REGISTER\n         D     R0,F100               DIVIDE BY 100\n         LTR   R0,R0                 TIME TO CHECKPOINT?\n         BNZ   SEND0240              NO\n         MVC   DCB24,CONVDCB         SET DCB ADDRESS\n         FX24  $NOTE                 ISSUE NOTE\n         LTR   R15,R15               NOTE SUCCESSFUL?\n         BNZ   ERR0080               NO\n         MVC   MSTRREC#,CONVREC#     SET RECORD NUMBER\n         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)\n         BAL   R4,MSTR0000           READ MASTER FILE\n         LA    R3,REQNDENM           FIRST NODE NAME\n         USING REQNDENM,R3           DEFINE BASE\nSEND0220 DS    0H\n         CLC   REQNDENM,SESSNAME     RIGHT NODE?\n         BE    SEND0230              YES\n         LA    R3,REQNDEL(R3)        NEXT NODE\n         B     SEND0220              LOOP\nSEND0230 DS    0H\n         MVC   REQNDECR,CONVCKPT     SAVE RECORD NUMBER\n         MVC   REQNDECT,TTR24        SAVE TTR\n         MVI   MSTRCMD,$MSTRWRT      SET COMMAND\n         BAL   R4,MSTR0000           UPDATE MASTER FILE\n         DROP  R3\nSEND0240 DS    0H\n         ITRACE ID=BSAMREAD\n         MVC   DCB24,CONVDCB         DCB ADDRESS\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         LA    R1,USERIO             PLUS DATA ADDRESS\n         ST    R1,IOA24              SET I/O AREA ADDRESS\n         LA    R1,SEND0280           EOF ADDRESS\n         ST    R1,EOF24              SET ADDRESS\n         OI    EOF24,X'80'           SET EOF ADDRESS\n         MVC   DECB24,CONVDECB       DECB ADDRESS\n         FX24  $READ                 CALL BSAM READ IN 24-BIT MODULE\n         MVI   CONVFUNC,$CONVFB      LAST FUNCTION WAS BSAM\n         OI    CONVSTAT,$CONVPND     READ IS PENDING\n         B     EXIT0010              AND EXIT\n* ------------------------------------------------------------------- *\n*    The send for the last record of a file has just been sent.       *\n*    De-allocate the conversation.                                    *\n* ------------------------------------------------------------------- *\nSEND0250 DS    0H\n         ITRACE ID=LSTSNDDN          LAST SEND DONE\n         B     SEND0270\n* ------------------------------------------------------------------- *\n*    The send for a 'NULL' has completed.                             *\n*    De-allocate the conversation.                                    *\n* ------------------------------------------------------------------- *\nSEND0260 DS    0H\n         ITRACE ID=NULLDONE          NULL SEND DONE\nSEND0270 DS    0H\n         MVI   VTAMCMD,$VTAMDLO      DE-ALLOCATE THE CONVERSATION\n         BAL   R4,VSUB0000           LINK TO VSUB\n         POST  COMMVECB              SIGNAL FXSVTAM TO SCAN SESSIONS\n         B     EXIT0010              EXIT\nSEND0280 DS    0H\n         ITRACE ID=STAGEEOF          EOF ON STAGING DATASET\n         NI    CONVSTAT,255-$CONVPND READ IS NO LONGER PENDING\n         MVC   MSTRREC#,CONVREC#     SET RECORD NUMBER\n         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)\n         BAL   R4,MSTR0000           READ MASTER FILE RECORD\n         SR    R1,R1\n         ICM   R1,3,REQNDE#          NUMBER OF NODES\n         BZ    ERR0030               BAD NEWS\n         LA    R3,REQNDENM           FIRST NODE NAME\n         USING REQNDENM,R3           DEFINE BASE\nSEND0290 DS    0H\n         CLC   REQNDENM,SESSNAME     WAS SEND TO THIS NODE?\n         BE    SEND0300              YES\n         LA    R3,REQNDEL(R3)        NEXT NODE\n         BCT   R1,SEND0290           LOOP\n         B     ERR0030               BAD NEWS\nSEND0300 DS    0H\n         MVI   REQNDEST,$REQNDEC     TRANSMISSION TO THIS NODE COMPLETE\n         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)\n         BAL   R4,MSTR0000           WRITE MASTER FILE RECORD\n         DROP  R3\n         MVC   PRTMSGID(MSG03L),MSG03\n         MVC   PRTMSGID+(MSG03NDE-MSG03)(L'MSG03NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG03NBR-MSG03)(L'MSG03NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG03NDT-MSG03)(L'MSG03NDT),SESSNAME\n         BAL   R4,PRT0000            PRINT MESSAGE\n         ITRACE ID=CLSEINPT          CLOSING INPUT DCB\n         MVC   DCB24,CONVDCB         SET DCB'S ADDRESS\n         FX24  $CLOSE                CALL CLOSE IN 24-BIT MODULE\n         L     R14,CONVDCB           DCB'S ADDRESS\n         USING IHADCB,R14            DEFINE BASE\n         FXCALL FXSDAIR,RELEASE,,DCBDDNAM\n         OC    DAIRR15,DAIRR15       RELEASE SUCCESSFUL?\n         BNZ   ERR0040               NO\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         LA    R1,USERDATA-USERREQ   LENGTH\n         STH   R1,USERLEN            SET LENGTH TO\n         MVC   USERMOD,LAST          SET RECORD TYPE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*    The reason for immediately issuing a receive when the \"FIRST\"    *\n*    block has just been sent is that the send does not cause the     *\n*    sender to be placed into receive state, VTAM expects us to issue *\n*    a command that causes us to go into receive state.  The send     *\n*    followed by the receive is valid, VTAM flushes the buffer,       *\n*    and posts the ECB when the receive completes.                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSEND0310 DS    0H\n         ITRACE ID=SEND,             SENDING DATA                      +\n               DATA1=SESSNAME        .. LU NAME\n         MVI   VTAMCMD,$VTAMSND      SET COMMAND\n         BAL   R4,VSUB0000           LINK TO VSUB TO ISSUE SEND\n         B     EXIT0010              AND EXIT\nSEND0320 DS    0H\n         NI    CONVSTAT,255-$CONVPND SEND IS NO LONGER PENDING\n         MVC   MSTRREC#,CONVREC#     SET RECORD NUMBER\n         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)\n         BAL   R4,MSTR0000           READ MASTER FILE RECORD\n         CLC   REQTNODE,SESSNAME     REPLY SENT TO TRANSMITTING NODE?\n         BNE   SEND0350              NO\n         SR    R1,R1\n         ICM   R1,3,REQNDE#          NUMBER OF NODES\n         BZ    ERR0030               BAD NEWS\n         LA    R3,REQNDENM           FIRST NODE NAME\n         USING REQNDENM,R3           DEFINE BASE\nSEND0330 DS    0H\n         CLC   REQNDENM,COMMAPLN     WAS SEND TO THIS NODE?\n         BE    SEND0340              YES\n         LA    R3,REQNDEL(R3)        NEXT NODE\n         BCT   R1,SEND0330           LOOP\n         B     ERR0030               BAD NEWS\nSEND0340 DS    0H\n         MVI   REQNDEST,$REQNDEN     SENDER HAS BEEN NOTIFIED\n         B     SEND0360\n         DROP  R3\nSEND0350 DS    0H\n         CLC   REQENODE,SESSNAME     REPLY SENT TO ENTRY NODE?\n         BNE   ERR0060               WE'RE LOST\n         MVI   REQENST,X'FF'         REPLY HAS BEEN SENT\nSEND0360 DS    0H\n         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)\n         BAL   R4,MSTR0000           WRITE MASTER FILE RECORD\n         MVC   PRTMSGID(MSG04L),MSG04\n         MVC   PRTMSGID+(MSG04NDE-MSG04)(L'MSG04NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG04NBR-MSG04)(L'MSG04NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG04NDT-MSG04)(L'MSG04NDT),SESSNAME\n         BAL   R4,PRT0000            PRINT MESSAGE\n         MVI   VTAMCMD,$VTAMDLO      DE-ALLOCATE THE CONVERSATION\n         BAL   R4,VSUB0000           LINK TO VSUB\n         POST  COMMVECB              SIGNAL FXSVTAM TO SCAN SESSIONS\n         B     EXIT0010              EXIT\nSEND0370 DS    0H\n         NI    CONVSTAT,255-$CONVPND SEND IS NO LONGER PENDING\n         MVC   MSTRREC#,CONVREC#     SET RECORD NUMBER\n         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)\n         BAL   R4,MSTR0000           READ MASTER FILE RECORD\n         MVI   REQSTAT,$REQXFRD      TRANSFERRED TO TRANSMITTER\n         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)\n         BAL   R4,MSTR0000           WRITE MASTER FILE RECORD\n         MVC   PRTMSGID(MSG05L),MSG05\n         MVC   PRTMSGID+(MSG05NDE-MSG05)(L'MSG05NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG05NBR-MSG05)(L'MSG05NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG05NDT-MSG05)(L'MSG05NDT),SESSNAME\n         BAL   R4,PRT0000            PRINT MESSAGE\n         MVI   VTAMCMD,$VTAMDLO      DE-ALLOCATE THE CONVERSATION\n         BAL   R4,VSUB0000           LINK TO VSUB\n         POST  COMMVECB              SIGNAL FXSVTAM TO SCAN SESSIONS\n         B     EXIT0010              EXIT\nSEND0380 DS    0H\n         TM    CONVSTAT,$CONVPND     STILL PENDING?\n         BO    EXIT0010              YES.. EXIT\n         ITRACE ID=DALODONE,         DE-ALLOCATE DONE                  +\n               RDATA1=R7,            .. SESSION BLOCK ADDRESS          +\n               RDATA2=R6             .. CONVERSATION BLOCK'S ADDRESS\n         MVI   VTAMCMD,$VTAMCHK      SET COMMAND (ISSUE A CHECK)\n         BAL   R4,VSUB0000           LINK TO VSUB\n         L     R1,CONVRPLX           RPL EXTENSION'S ADDRESS\n         OC    RPL6RC,RPL6RC         DE-ALLOCATE SUCCESSFUL?\n         BNZ   ERR0050               NO\n         MVC   PRTMSGID(MSG06L),MSG06   INITIALIZE MESSAGE\n         MVC   PRTMSGID+(MSG06NDE-MSG06)(L'MSG06NDE),SESSNAME\n         UNPK  PRTMSGID+(MSG06CID-MSG06)(9),CONVCID(5)\n         MVZ   PRTMSGID+(MSG06CID-MSG06)(8),HEX0000\n         TR    PRTMSGID+(MSG06CID-MSG06)(8),HEXCHAR\n         MVI   PRTMSGID+(MSG06CID-MSG06)+8,C' '\n         MVC   VTAMCONV,CONVNEXT     SET 'NEXT' ADDRESS FOR FXSVTAM\n         FXCALL FXSCONV,DELETE,      DELETE THE CONVERSATION BLOCK     +\n               (R6),                 .. CONVBLOK'S ADDRESS             +\n               (R7)                  .. ASSOCIATED SESSBLOK'S ADDRESS\n         BAL   R4,PRT0000            QUEUE MESSAGE TO PRINT TASK\n         B     EXIT0020              AND EXIT (VTAMCONV ALREADY SET)\n*---------------------------------------------------------------------*\n*        ERROR SITUATIONS                                             *\n*---------------------------------------------------------------------*\nERR0010  DS    0H\n         USING ISTRPL6X,R1           DEFINE BASE\n         ITRACE ID=VTAMERR,          VTAM ERROR OF SOME SORT           +\n               DATA1=RPL6RC          .. ERROR CODES\n         ABEND $U0057,DUMP,,USER\nERR0020  DS    0H\n         ITRACE ID=ALOCFAIL,         WORK FILE ALLOCATION FAILED       +\n               DATA1=REQREC#,        .. MASTER FILE RECORD NUMBER      +\n               DATA2=DAIRR15         .. DAIR REGISTER 15\n         MVC   PRTMSGID(MSG07L),MSG07 SET MESSAGE\n         MVC   PRTMSGID+(MSG07NDE-MSG07)(L'MSG07NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG07NBR-MSG07)(L'MSG07NBR),DXDDWORD+4\n         UNPK  PRTMSGID+(MSG07R15-MSG07)(L'MSG07R15+1),DAIRR15(3)\n         MVZ   PRTMSGID+(MSG07R15-MSG07)(L'MSG07R15),HEX0000\n         TR    PRTMSGID+(MSG07R15-MSG07)(L'MSG07R15),HEXCHAR\n         MVI   PRTMSGID+(MSG07R15-MSG07)+L'MSG07R15,C' '\n         UNPK  PRTMSGID+(MSG07ERR-MSG07)(L'MSG07ERR+1),DAIRERR(3)\n         MVZ   PRTMSGID+(MSG07ERR-MSG07)(L'MSG07ERR),HEX0000\n         TR    PRTMSGID+(MSG07ERR-MSG07)(L'MSG07ERR),HEXCHAR\n         MVI   PRTMSGID+(MSG07ERR-MSG07)+L'MSG07ERR,C' '\n         UNPK  PRTMSGID+(MSG07INF-MSG07)(L'MSG07INF+1),DAIRINFO(3)\n         MVZ   PRTMSGID+(MSG07INF-MSG07)(L'MSG07INF),HEX0000\n         TR    PRTMSGID+(MSG07INF-MSG07)(L'MSG07INF),HEXCHAR\n         MVI   PRTMSGID+(MSG07INF-MSG07)+L'MSG07INF,C' '\n         BAL   R4,PRT0000            PRINT MESSAGE\n         ABEND $U0105,DUMP,,USER\nERR0030  DS    0H\n         ITRACE ID=BADNODE,          NODE NAME NOT FOUND               +\n               RDATA1=R7,            .. SESSION BLOCK ADDRESS          +\n               DATA2=MSTRREC#        .. MASTER FILE RECORD NUMBER\n         ABEND $U0084,DUMP,,USER\nERR0040  DS    0H\n         ITRACE ID=DAIRRELF,         DAIR RELEASE FAILED               +\n               RDATA1=R7,            .. SESSION BLOCK ADDRESS          +\n               DATA2=MSTRREC#        .. MASTER FILE RECORD NUMBER\n         ABEND 2002,DUMP,,USER\nERR0050  DS    0H\n         ITRACE ID=DALOFAIL,         SESSION DEALLOCATION FAILED       +\n               RDATA1=R7,            .. SESSION BLOCK ADDRESS          +\n               DATA2=RPL6RC          .. RETURN CODES\n         ABEND $U0063,DUMP,,USER\nERR0060  DS    0H\n         ITRACE ID=BADNOTFY,         BAD RESTORE NOTIFICATION RECEIVED +\n               RDATA1=R7,            .. SESSION BLOCK ADDRESS          +\n               DATA2=SESSNAME        .. NODE THAT SEND THE NOTIFY\n         ABEND $U0090,DUMP,,USER\nERR0070  DS    0H\n         ITRACE ID=PNTFAIL,          POINT FAILED ON A RESTART         +\n               RDATA1=R15,           .. POINT RETURN CODE              +\n               RDATA2=R7             .. SESSBLOK\n         ABEND $U0110,DUMP,,USER\nERR0080  DS    0H\n         ITRACE ID=NOTEFAIL,         NOTE FAILED DURING A CHECKPOINT   +\n               RDATA1=R15,           .. POINT RETURN CODE              +\n               RDATA2=R7             .. SESSBLOK\n         ABEND $U0111,DUMP,,USER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Link to VSUB                                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVSUB0000 DS    0H\n         ITRACE ID=VSUB,             LINKING TO VSUB                   +\n               DATA1=VTAMCMD         .. COMMAND\n         LR    R1,R8                 PARM BLOCK'S ADDRESS\n         L     R15,AVSUB             VSUB ENTRY POINT\n         BALR  R14,R15               LINK TO VSUB\n         BR    R4                    RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Read or write master file records                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSTR0000 DS    0H\n         ITRACE ID=MSTRIO\n         FXCALL FXSMSTR              LINK TO MASTER FILE I/O\n         LA    R5,MSTRRECD           SET DATA ADDRESS\n         BR    R4                    RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        PRINT                                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         ITRACE ID=PRINT\n         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE\n         BR    R4                    DONE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        EXIT                                                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ICM   R1,15,DXD24           24-BIT PARM AREA ADDRESS\n         BZ    EXIT0010              NO ADDRESS\n         FREEMAIN RU,A=(1),LV=FX24L FREEMAIN 24-BIT PARM AREA\n         B     EXIT0020              AND EXIT\nEXIT0010 DS    0H\n         MVC   VTAMCONV,CONVNEXT     SET 'NEXT' ADDRESS FOR FXSVTAM\nEXIT0020 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            CALLER'S SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE CALLER'S REGISTERS\n         SR    R15,R15               ALWAYS A GOOD RETURN CODE\n         BR    R14                   RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDSSEND)           DISPLACEMENT TO WORK AREA\nF100     DC    F'100'\nX80      DC    X'80000000'\nH8       DC    H'8'\nHEX0000  DC    8X'00'\nHEXCHAR  DC    C'0123456789ABCDEF'\nFIRST    DC    CL4'1ST '\nXFER     DC    CL4'XFER'\nDATA     DC    CL4'DATA'\nLAST     DC    CL4'LAST'\nNULL     DC    CL4'NULL'\nRSTR     DC    CL4'RSTR'\nRESTART  DC    CL4'STRT'\nMSG01    DS    0C\n         DC    CL11'FXSSEND01I'\n         DC    C'TRANSMISSION OF REQUEST '\nMSG01NDE DC    CL08' '\nMSG01NBR DC    XL08'4021202020202020'\n         DC    C' TO NODE '\nMSG01NDT DC    CL8' '\n         DC    C' STARTED'\nMSG01L   EQU   *-MSG01\nMSG02    DC    CL11'FXSSEND02E'\n         DC    C'REQUEST '\nMSG02NDE DC    CL08' '\nMSG02NBR DC    XL08'4021202020202020'\n         DC    C' REJECTED BY NODE '\nMSG02NDT DC    CL08' '\n         DC    C' '\nMSG02MSG DC    CL65' '\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'FXSSEND03I'\n         DC    C'TRANSMISSION OF REQUEST '\nMSG03NDE DC    CL08' '\nMSG03NBR DC    XL08'4021202020202020'\n         DC    C' TO NODE '\nMSG03NDT DC    CL8' '\n         DC    C' COMPLETE'\nMSG03L   EQU   *-MSG03\nMSG04    DC    CL11'FXSSEND04I'\n         DC    C'RESTORE NOTIFICATION SENT FOR REQUEST '\nMSG04NDE DC    CL08' '\nMSG04NBR DC    XL08'4021202020202020'\n         DC    C' TO NODE '\nMSG04NDT DC    CL08' '\n         DC    C' REQUEST COMPLETE'\nMSG04L   EQU   *-MSG04\nMSG05    DC    CL11'FXSSEND05I'\n         DC    C'REQUEST '\nMSG05NDE DC    CL08' '\nMSG05NBR DC    XL08'4021202020202020'\n         DC    C' TRANSFERRED TO NODE '\nMSG05NDT DC    CL08' '\nMSG05L   EQU   *-MSG05\nMSG06    DC    CL11'FXSSEND06I'\n         DC    C'CONVERSATION WITH NODE '\nMSG06NDE DC    CL08' '\n         DC    C' DEALLOCATED, CID='\nMSG06CID DC    CL08' '\n         DC    C' '\nMSG06L   EQU   *-MSG06\nMSG07    DS    0C\n         DC    CL11'FXSSEND07E'\n         DC    C'WORK FILE ALLOCATION FAILED '\nMSG07NDE DC    CL08' '\nMSG07NBR DC    XL08'4021202020202020'\n         DC    C' R15='\nMSG07R15 DC    CL4' '\n         DC    C' ERROR='\nMSG07ERR DC    CL4' '\n         DC    C' INFO='\nMSG07INF DC    CL4' '\n         DC    C' '\nMSG07L   EQU   *-MSG07\nMSG08    DS    0C\n         DC    CL11'FXSSEND08I'\n         DC    C'TRANSMISSION OF REQUEST '\nMSG08NDE DC    CL08' '\nMSG08NBR DC    XL08'4021202020202020'\n         DC    C' TO NODE '\nMSG08NDT DC    CL8' '\n         DC    C' RESTARTED FROM RECORD '\nMSG08REC DC    XL10'40202020202020202120'\nMSG08L   EQU   *-MSG08\nMSG09    DS    0C\n         DC    CL11'FXSSEND09I'\n         DC    C'RESTART OF REQUEST '\nMSG09NDE DC    CL08' '\nMSG09NBR DC    XL08'4021202020202020'\n         DC    C' TO NODE '\nMSG09NDT DC    CL8' '\n         DC    C' FAILED, WILL RE-SEND FROM BEGINNING'\nMSG09L   EQU   *-MSG09\nDCBRI    DCB   DSORG=PS,                                               +\n               DDNAME=DDNAME,                                          +\n               EODAD=*,                                                +\n               MACRF=RP\nDCBRL    EQU   *-DCBRI\n* ------------------------------------------------------------------- *\n*              WORK AREA                                              *\n* ------------------------------------------------------------------- *\nDXDSSEND DSECT\nDXDID    DS   CL8                    WORK AREA OWNER EYECATCHER\nDXDSAVE  DS   18F                    REGISTER SAVE AREA\nDXDDWORD DS   D                      CVD/CVB WORK AREA\nDXD24    DS   A                      24-BIT PARM AREA\nDXDFLAG  DS   X FLAGS\n$DXDNEW  EQU  X'80'                  .. NEW TRANSMISSION\n         PRTBLOK  DSECT=NO\n         MSTRREQ  DSECT=NO\n         DAIRREQ  DSECT=NO\n         CONVREQ  DSECT=NO\n* ------------------------------------------------------------------- *\n*              VTAM INTER-COMMUNICATION                               *\n* ------------------------------------------------------------------- *\n         VTAMBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              24-BIT MODULE                                          *\n* ------------------------------------------------------------------- *\n         FX24PRM DSECT=YES\n* ------------------------------------------------------------------- *\n*              VTAM SESSION BLOCK                                     *\n* ------------------------------------------------------------------- *\n         SESSBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              VTAM CONVERSATION BLOCK                                *\n* ------------------------------------------------------------------- *\n         CONVBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERREQ  DSECT=YES\n* ------------------------------------------------------------------- *\n*              MASTER FILE RECORD                                     *\n* ------------------------------------------------------------------- *\n         REQBLOK  DSECT=YES\n* ------------------------------------------------------------------- *\n*              RPL AND RPL EXTENSION DSECTS                           *\n* ------------------------------------------------------------------- *\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------- *\n*              DCB                                                    *\n* ------------------------------------------------------------------- *\n         DCBD   DSORG=PS\n* ------------------------------------------------------------------- *\n*              IOB                                                    *\n* ------------------------------------------------------------------- *\n         IEZIOB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  FXSSEND\n./ ADD NAME=FXSSESS  0100-99056-99056-1500-00213-00213-00000-FX-REL1\n\n         TITLE 'SESS  ADD AND DELETE SESSION BLOCKS'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSSESS                                               *\n*                                                                     *\n*  Add and delete SESSBLOKs.  A SESSBLOK is used to represent and     *\n*  control communication with other nodes.  Other FX nodes are        *\n*  defined by FXNODE statements at parameter initialization time.     *\n*  User nodes are defined dynamically as users log on and off.        *\n*  This module is a subroutine, it does not follow \"normal\" FX        *\n*  linkage, it must not use a \"DXD\" type work area because it may     *\n*  be executed concurrently by multiple tasks.  This module does      *\n*  not establish its own save area, no macros can be issued that      *\n*  may require a save area.                                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXSSESS  CSECT\nFXSSESS  AMODE 31\nFXSSESS  RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               LOAD BASE\n         USING FXSSESS,R12           DEFINE BASE\n         USING FXSCOMM,R11           DEFINE BASE\n         B     SESS0000              SKIP EYECATCHER\n         DC    CL8'FXSSESS'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\n         DC    C'ADD/DELETE SESSION BLOCKS'\nSESS0000 DS    0H\n         LR    R10,R1                COPY PARM BLOCK ADDRESS\n         USING SESSREQ,R10           DEFINE BASE\n         OC    COMMACB,COMMACB       ACB ALLOCATED?\n         BNZ   SESS0010              YES\n         GETMAIN RU,                 GET STORAGE FOR THE ACB           +\n               LV=ACBL,              .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,COMMACB            SAVE ACB'S ADDRESS\n         LR    R2,R1                 SAVE ACB'S ADDRESS\n         MVC   0(ACBL,R2),ACBI       INITIALIZE ACB\n         USING IFGACB,R2             DEFINE BASE\n         GETMAIN RU,                 GET STORAGE FOR THE EXIT LIST     +\n               LV=EXLSTL,            .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         MVC   0(EXLSTL,R1),EXLSTI   INITIALIZE EXIT LIST\n         ST    R11,ACBUSER           SET USER FIELD TO COMM AREA ADDR\n         LA    R0,COMMAPLL           APPLID LENGTH/APPLID ADDRESS\n         ST    R0,ACBAPID            SET APPLID LENGTH/NAME IN ACB\n         ST    R1,COMMXLST           SAVE EXIT LIST ADDRESS\n         ST    R1,ACBEXLST           SET EXIT LIST IN ACB\n         USING IFGEXLST,R1           DEFINE BASE\n         MVC   EXLATTNP,AATTN        SET ATTN EXIT ADDRESS\n         MVC   EXLLERP,ALERAD        SET LERAD EXIT ADDRESS\nSESS0010 DS    0H\n         TM    COMMEOJ,$EOJ3         SHUTDOWN PHASE 3?\n         BO    SESS0100              YES.. DELETE THE SESSBLOKS\n         CLI   SESSCMD,$SESSDEL      DELETE A SESSION?\n         BE    SESS0100              YES\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Initialize a new SESSBLOK                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         LA    R2,COMMSESS           CHAIN POINT\n         ICM   R7,15,COMMSESS        FIRST SESSION BLOCK\n         USING SESSBLOK,R7           DEFINE BASE\n         BZ    SESS0030              NO SESSION BLOCKS\nSESS0020 DS    0H\n         CLC   SESSNAME,SESSNODE     DUPLICATED NODE?\n         BE    SESS0040              YES.. DON'T ALLOW\n         LA    R2,SESSNEXT           CHAIN POINT\n         ICM   R7,15,SESSNEXT        NEXT SESSION BLOCK\n         BNZ   SESS0020              LOOP\nSESS0030 DS    0H\n         GETMAIN RU,LV=SESSL         ACQUIRE STORAGE\n         ST    R1,0(R2)              ADD NEW BLOCK TO CHAIN\n         ST    R1,SESSADDR           PASS ADDRESS BACK TO CALLER\n         LR    R7,R1                 COPY STORAGE ADDRESS\n         XC    0(SESSL,R7),0(R7)     CLEAR STORAGE\n         MVC   SESSEYE,SESSID        IDENTIFY THE BLOCK\n         MVC   SESSNAME,SESSNODE     SET NODE NAME\n         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL           +\n               LV=RPLL+4,            .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,SESSRPL            SET RPL'S ADDRESS\n         MVC   0(RPLL,R1),RPLI       INITIALIZE RPL\n         LR    R3,R1                 COPY RPL ADDRESS\n         USING IFGRPL,R3             DEFINE BASE\n         MVC   RPLDACB,COMMACB       SET ACB ADDRESS IN RPL\n         ST    R7,RPLL(R1)           SET POINTER BACK TO SESSBLOK\n         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL EXTENSION +\n               LV=RPLEXTL,           .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,SESSRPLX           SET RPL EXTENSION'S ADDRESS\n         MVC   0(RPLEXTL,R1),RPLEXTI INITIALIZE RPL EXTENSION\n         ST    R1,RPLAAREA           SET RPL EXTENSION ADDRESS\n         USING ISTRPL6X,R1           DEFINE BASE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR NIB           +\n               LV=NIBL,              .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,SESSNIB            SET NIB'S ADDRESS\n         MVC   0(NIBL,R1),NIBI       INITIALIZE NIB\n         SR    R15,R15               SET RETURN CODE\n         B     EXIT0000              AND EXIT\nSESS0040 DS    0H\n         LA    R15,8                 SET RETURN CODE\n         B     EXIT0000              EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Delete a SESSBLOK                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\nSESS0100 DS    0H\n         LA    R2,COMMSESS           CHAIN POINT\n         ICM   R7,15,COMMSESS        FIRST SESSION BLOCK ADDRESS\n         BZ    SESS0120              BLOCK WAS NOT FOUND\nSESS0110 DS    0H\n         TM    COMMEOJ,$EOJ3         SHUTDOWN PHASE 3?\n         BO    SESS0130              YES.. DELETE ALL BLOCKS\n         CLC   SESSNAME,SESSNODE     SESSION BLOCK LOCATED?\n         BE    SESS0130              YES\n         LA    R2,SESSNEXT           CHAIN POINT\n         ICM   R7,15,SESSNEXT        NEXT BLOCK\n         BNZ   SESS0110              LOOP\nSESS0120 DS    0H\n         TM    COMMEOJ,$EOJ3         SHUTDOWN PHASE 3?\n         BO    SESS0140              YES\n         LA    R15,8                 SET RETURN CODE\n         B     EXIT0000              AND EXIT\nSESS0130 DS    0H\n         MVC   0(4,R2),SESSNEXT      CHAIN AROUND THIS BLOCK\n         L     R1,SESSNIB            NIB'S ADDRESS\n         FREEMAIN RU,A=(1),LV=NIBL   FREEMAIN NIB\n         L     R1,SESSRPLX           RPL EXTENSION'S ADDRESS\n         FREEMAIN RU,A=(1),LV=RPLEXTL\n         L     R1,SESSRPL            RPL'S ADDRESS\n         FREEMAIN RU,A=(1),LV=RPLL+4 FREEMAIN RPL\n         FREEMAIN RU,A=(7),LV=SESSL  FREEMAIN SESSION BLOCK\n         TM    COMMEOJ,$EOJ3         SHUTDOWN PHASE 3?\n         BO    SESS0100              YES\nSESS0140 DS    0H\n         SR    R15,R15               SET RETURN CODE\nEXIT0000 DS    0H\n         TM    COMMEOJ,$EOJ3         SHUTDOWN PHASE 3?\n         BNO   EXIT0010              NO\n         ICM   R1,15,COMMACB         ACB'S ADDRESS\n         BZ    EXIT0010              ACB NOT ACQUIRED\n         FREEMAIN RU,A=(1),LV=ACBL   FREEMAIN ACB\n         L     R1,COMMXLST           EXIT LIST'S ADDRESS\n         FREEMAIN RU,A=(1),LV=EXLSTL FREEMAIN EXIT LIST\nEXIT0010 DS    0H\n         L     R14,12(R13)           RESTORE R14\n         LM    R0,R12,20(R13)        RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSESSID   DC    C'SESSBLOK'\nACBI     ACB   AM=VTAM,                                                +\n               MACRF=LOGON,                                            +\n               EXLST=*,                                                +\n               APPLID=*\nACBL     EQU   *-ACBI\nEXLSTI   EXLST AM=VTAM,                                                +\n               ATTN=*,                                                 +\n               LERAD=*\nEXLSTL   EQU   *-EXLSTI\nRPLI     RPL   AM=VTAM,                                                +\n               AAREA=RPLEXTI\nRPLL     EQU   *-RPLI\nRPLEXTI  ISTRPL6\nRPLEXTL  EQU   *-RPLEXTI\nNIBI     NIB   MODE=RECORD,                                            +\n               NAME=FX\nNIBL     EQU   *-NIBI\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              SESSION BLOCK ADD/DELETE REQUEST BLOCK                 *\n* ------------------------------------------------------------------- *\n         SESSREQ\n* ------------------------------------------------------------------- *\n*              VTAM SESSION BLOCK                                     *\n* ------------------------------------------------------------------- *\n         SESSBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              ACB DSECT                                              *\n* ------------------------------------------------------------------- *\n         IFGACB   AM=VTAM\n* ------------------------------------------------------------------- *\n*              EXIT LIST DSECT                                        *\n* ------------------------------------------------------------------- *\n         IFGEXLST AM=VTAM\n* ------------------------------------------------------------------- *\n*              RPL AND RPL EXTENSION DSECTS                           *\n* ------------------------------------------------------------------- *\n         IFGRPL   AM=VTAM\n* ------------------------------------------------------------------- *\n*              NIB DSECT                                              *\n* ------------------------------------------------------------------- *\n         ISTDNIB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  FXSSESS\n./ ADD NAME=FXSSHUT  0100-99056-99056-1500-00122-00122-00000-FX-REL1\n\n         TITLE 'FXSSHUT  SHUTDOWN FX STARTED TASK'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSSHUT                                               *\n*                                                                     *\n*  Shutdown FX started task                                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSSHUT    FXPRFX 'SHUTDOWN FX STARTED TASK'\nFXSSHUT  AMODE 31\nFXSSHUT  RMODE ANY\n         USING SESSBLOK,R7           ADDRESS PASSED BY FXSVTAM\n         USING CONVBLOK,R6           ADDRESS PASSED BY FXSVTAM\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    SHUT0010              YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         MVI   PRTCC,C' '            INITIALIZE CARRIAGE CONTROL\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\nSHUT0010 DS    0H\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         USING USERREQ,R2            DEFINE BASE\n         MVC   USERMSG,COMMBLKS      CLEAR MESSAGE\n         CLI   SESSUATH,2            OPERATOR?\n         BE    SHUT0020              YES\n         CLI   SESSUATH,4            MASTER ID?\n         BNE   SHUT0040              NOT AUTHORIZED TO ISSUE SHUTDOWN\nSHUT0020 DS    0H\n         CLI   COMMEOJ,0             EOJ ALREADY UNDER WAY?\n         BNE   SHUT0030              YES\n         ITRACE ID=SHUTDOWN,         STARTING SHUTDOWN                 +\n               DATA1=SESSUSER        .. REQUESTING USER\n         OI    COMMEOJ,$EOJ1         START SHUTDOWN PHASE 1\n         MVC   PRTMSGID(MSG01L),MSG01\n         MVC   PRTMSGID+(MSG01USR-MSG01)(L'MSG01USR),SESSUSER\n         MVC   USERMSG(MSG01L),PRTMSGID\n         BAL   R9,PRT0000            PRINT SHUTDOWN MESSAGE\n         B     EXIT0000              ALL DONE\nSHUT0030 DS    0H\n         ITRACE ID=DUPSHUT,          SHUTDOWN ALREADY IN PROGRESS      +\n               DATA1=SESSUSER        .. REQUESTING USER\n         MVC   USERMSG(MSG02L),MSG02 SHUTDOWN ALREADY STARTED\n         B     EXIT0000              EXIT\nSHUT0040 DS    0H\n         ITRACE ID=NOTAUTH,          USER NOT AUTHORIZED               +\n               DATA1=SESSUSER        .. REQUESTING USER\n         MVC   PRTMSGID(MSG03L),MSG03\n         MVC   PRTMSGID+(MSG03USR-MSG03)(L'MSG03USR),SESSUSER\n         BAL   R9,PRT0000            PRINT MESSAGE\n         MVC   USERMSG(MSG04L),MSG04 SET USER'S MESSAGE\n         B     EXIT0000              EXIT\nPRT0000  DS    0H\n         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE\n         BR    R9                    RETURN\nEXIT0000 DS    0H\n         ITRACE ID=EXIT              EXITING PRINT MODULE\n         LA    R0,(USERDATA-USERREQ) TOTAL LENGTH\n         STH   R0,USERLEN            SET LENGTH\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        CONSTANTS                                                   *\n*                                                                    *\n* ------------------------------------------------------------------ *\nDXDSTART DC    Q(DXDSSHUT)           DISPLACEMENT TO WORK AREA\nMSG01    DS    0C\n         DC    CL11'FXSSHUT01I'\n         DC    C'SHUTDOWN STARTED, REQUESTED BY '\nMSG01USR DC    CL8' '\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'FXSSHUT02E'\n         DC    C'SHUTDOWN ALREADY IN PROGRESS'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'FXSSHUT03E'\n         DC    C'SHUTDOWN REQUEST FROM USER '\nMSG03USR DC    CL8' '\n         DC    C' REJECTED, INSUFFICIENT AUTHORITY'\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    CL11'FXSSHUT04E'\n         DC    C'YOU ARE NOT AUTHORIZED TO SHUTDOWN FX'\nMSG04L   EQU   *-MSG04\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        WORK AREAS                                                  *\n*                                                                    *\n* ------------------------------------------------------------------ *\nDXDSSHUT DSECT\nDXDID    DS    CL8                   WORK AREA OWNER ID\nDXDSAVE  DS    18F                   REGISTER SAVE AREA\n         PRTBLOK  DSECT=NO\n         LTORG\n* ------------------------------------------------------------------ *\n*              SESSION BLOCK                                         *\n* ------------------------------------------------------------------ *\n         SESSBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              CONVERSATION BLOCK                                    *\n* ------------------------------------------------------------------ *\n         CONVBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              USER REQUEST/RESPONSE BLOCK                           *\n* ------------------------------------------------------------------ *\n         USERREQ\n* ------------------------------------------------------------------ *\n*              COMMON DATA MAP                                       *\n* ------------------------------------------------------------------ *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              EQUATES                                               *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         END  FXSSHUT\n./ ADD NAME=FXSSNAP  0100-99056-99056-1500-00793-00793-00000-FX-REL1\n\n         TITLE 'FXSSNAP  SNAP SHOT FX STARTED TASK'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSSNAP                                               *\n*                                                                     *\n*  This module is designed to reside 24-bit mode because it does a    *\n*  lot of I/O related stuff that has to be done in 24-bit mode        *\n*  anyway.                                                            *\n*                                                                     *\n*  Debugging FX problems are difficult enough, trying to follow       *\n*  control block chains in storage doesn't make this any easier.      *\n*  At times you may want to \"look\" at what is going on without        *\n*  shutting down the STC or abending it to get a dump.  This gives    *\n*  an on-the-fly snap shot at most of the control blocks while the    *\n*  STC is running.                                                    *\n*                                                                     *\n*  To keep from duplicating this code, the VTAM communication and     *\n*  console communication drivers both use this module for the SNAP    *\n*  function.  To inform us which driver called us, R7 will be set     *\n*  to a SESSBLOK address if invoked by the VTAM driver or to zero     *\n*  if invoked by the console driver.                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXSSNAP  CSECT\nFXSSNAP  AMODE 31\nFXSSNAP  RMODE 24\n         USING FXSCOMM,R11           DEFINE BASE\n         USING SESSBLOK,R7           ADDRESS PASSED BY FXSVTAM\n         USING CONVBLOK,R6           ADDRESS PASSED BY FXSVTAM\n         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS\n         LR    R12,R15               COPY ENTRY POINT ADDRESS\n         USING FXSSNAP,R12           DEFINE BASE\n         LA    R3,WORKL              WORK AREA SIZE\n         GETMAIN R,LV=(3)            ACQUIRE WORK AREA\n         B     SNAP0000              SKIP EYECATCHERS\n         DC    ((PFXMODNM-MODPRFX)-(*-FXSSNAP))X'00'\n         DC    CL8'FXSSNAP'\n         DC    CL8'&SYSDATE'         DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'         TIME OF ASSEMBLY\nSNAP0000 DS    0H\n         LR    R4,R13                SAVE SAVE AREA ADDRESS\n         ST    R1,8(R13)             CHAIN OUR WORK AREA TO CALLER'S\n         LR    R13,R1                COPY WORK AREA ADDRESS\n         LR    R2,R1                 COPY WORK AREA ADDRESS\n         SR    R0,R0                 CLEAR REGISTER\n         SR    R1,R1                 CLEAR REGISTER\n         MVCL  R2,R0                 CLEAR WORK AREA\n         USING WORK,R13              DEFINE BASE\n         ST    R4,WORK+4             SAVE SAVE AREA ADDRESS\n         ITRACE ID=INIT\n         MVC   WKDCB(DCBL),DCBI      INITIALIZE SNAP DCB\n         MVC   WKPLINE,COMMBLKS      PRINT AREA\n         MVC   WKOC(OPENL),OPENI     COPY OPEN LIST FORM\n         ZAP   WKPAGE,P0             INITIALIZE PAGE NUMBER\n         ZAP   WKLINE,P0             INITIALIZE LINE NUMBER\nSNAP0010 DS    0H\n         LTR   R7,R7                 WERE WE INVOKED FROM A CONSOLE?\n         BZ    SNAP0020              YES\n         L     R8,CONVIOA            I/O AREA ADDRESS\n         USING USERREQ,R8            DEFINE BASE\n         MVC   USERMSG,COMMBLKS      CLEAR MESSAGE\n         CLI   SESSUATH,2            OPERATOR?\n         BE    SNAP0020              YES\n         CLI   SESSUATH,4            MASTER ID?\n         BNE   ERR0010               NOT AUTHORIZED TO ISSUE SNAP\nSNAP0020 DS    0H\n         ITRACE ID=SNAPSHOT          STARTING A SNAP SHOT\n         FXCALL FXSDAIR,ALLOCATE,    ALLOCATE THE SYSOUT DATA SET      +\n               SYSOUT,               .. SYSOUT                         +\n               FXSNAP                .. DDNAME\n         OC    DAIRR15,DAIRR15       ALLOCATE SUCCESSFUL?\n         BNZ   ERR0020               NO\n         OI    WKFLAG,$WKALOC        FXSNAP IS ALLOCATED\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         LA    R2,WKDCB              DCB ADDRESS\n         OPEN  ((R2),OUTPUT),MF=(E,WKOC)\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         OI    WKFLAG,$WKOPEN        FXSNAP IS OPEN\n         MVI   WKCC,C'1'             NEW PAGE\n         LTR   R7,R7                 INVOKED FROM A CONSOLE?\n         BZ    SNAP0025              YES\n         MVC   USERMSG(MSG01L),MSG01\n         MVC   USERMSG+(MSG01USR-MSG01)(L'MSG01USR),SESSUSER\nSNAP0025 DS    0H\n         BAL   R9,HEAD0000           PRINT HEADING\n         LR    R5,R11                SET BASE FOR FORMATTER\n         LA    R4,COMM4MAT           COMMON AREA FORMATTING PARMS\n         BAL   R3,FMT0000            FORMAT DATA FROM COMMON AREA\n         ICM   R5,15,COMMRSTR        FIRST RESTORE BLOCK'S ADDRESS\n         BZ    SNAP0030              NO RESTORE BLOCKS\n         LA    R4,RSTR4MAT           RESTORE BLOCK FORMATTING PARMS\n         BAL   R3,FMT0000            FORMAT RESTORE BLOCKS\nSNAP0030 DS    0H\n         ICM   R5,15,COMMSESS        FIRST SESSION BLOCK CHAIN\n         BZ    SNAP0040              NO SESSIONS\n         LA    R4,SESS4MAT           SESSBLOK FORMATTING PARMS\n         BAL   R3,FMT0000            FORMAT SESSBLOKS AND CONVBLOKS\nSNAP0040 DS    0H\n         ICM   R5,15,COMMSTGE        FIRST STAGE DEVICE\n         BZ    SNAP0050              NO STAGE DEVICES\n         LA    R4,STGE4MAT           STGEDEV FORMATTING PARMS\n         BAL   R3,FMT0000            FORMAT STGEDEV BLOCKS\nSNAP0050 DS    0H\n         ICM   R5,15,COMMDEST        FIRST DESTINATION NAME BLOCK\n         BZ    SNAP0055              NO DESTINATION BLOCKS\n         LA    R4,DEST4MAT           DESTBLOK FORMATTING DATA PARMS\n         BAL   R3,FMT0000            FORMAT DESTBLOKS\nSNAP0055 DS    0H\n         ICM   R5,15,COMMXUSR        FIRST EXTERNAL USER BLOCK\n         BZ    SNAP0060              NO DESTINATION BLOCKS\n         LA    R4,XUSR4MAT           XUSRBLOK FORMATTING DATA PARMS\n         BAL   R3,FMT0000            FORMAT XUSRBLOKS\nSNAP0060 DS    0H\n         ICM   R5,15,DSSREQ          DF/DSS REQUEST BLOCK\n         BZ    SNAP0070              NO DF/DSS REQUEST\n         LA    R4,DR4MAT             DRREQ FORMATTING PARMS\n         BAL   R3,FMT0000            FORMAT DRREQ\nSNAP0070 DS    0H\n         ICM   R5,15,COPYREQ         IEBCOPY REQUEST BLOCK\n         BZ    SNAP0080              NO IEBCOPY REQUEST\n         LA    R4,DR4MAT             DRREQ FORMATTING PARMS\n         BAL   R3,FMT0000            FORMAT DRREQ\nSNAP0080 DS    0H\n         ICM   R5,15,PRTREQ          FIRST PRTBLOK\n         BZ    SNAP0090              NO PRTBLOKS\n         LA    R4,PRT4MAT            PRTBLOK FORMATTING PARMS\n         BAL   R3,FMT0000            FORMAT PRTBLOKS\nSNAP0090 DS    0H\n         ICM   R5,15,XTRREQ          FIRST EXTERNAL TRACE BLOCK\n         BZ    SNAP0100              NO EXTERNAL TRACE BLOCKS\n         LA    R4,XTR4MAT            EXTERNAL TRACE FORMATTING PARMS\n         BAL   R3,FMT0000            FORMAT EXTERNAL TRACE BLOCKS\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     Format the trace table.  The table is not \"unwrapped\", that is  *\n*     it is printed in the way it appears in storage and not in       *\n*     chronological order.  The current entry is indicated.           *\n*                                                                     *\n*     Note that the trace data is copied before unpacking.  To get    *\n*     8 bytes of hex, 5 bytes are unpacked at a time.  When the last  *\n*     trace entry is being processed, this can cause a reference 1    *\n*     byte beyond the end of the trace table.  To prevent this S0C4   *\n*     I copy the data before unpacking.  I copied DATA1 just so both  *\n*     DATA1 and DATA2 are handled in the same manner.                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSNAP0100 DS    0H\n         ICM   R5,15,TRFIRST         FIRST TRACE TABLE ENTRY\n         BZ    EXIT0000\n         USING TRENTRY,R5            DEFINE BASE\n         MVI   WKCC,C'0'             DOUBLE SPACE\n         MVI   WKPDATA,C'-'          INSERT A HYPHEN\n         MVC   WKPDATA+1(L'WKPDATA-1),WKPDATA\n         MVC   WKPDATA+60(11),=C'TRACE TABLE'\n         BAL   R9,PRT0000            PRINT TRACE TABLE HEADING\nSNAP0110 DS    0H\n         MVC   WKTR(WKTRL),COMMBLKS  CLEAR TRACE FORMAT WORK AREA\n         MVC   WKTRMOD,TREMOD        COPY MODULE NAME\n         MVC   WKTRID,TREID          COPY TRACE ID\n         MVC   WKTR1C,TREDATA1       COPY TRACE DATA 1\n         MVC   WKDWORD,TREDATA1      COPY DATA\n         UNPK  WKTR1H+0(9),WKDWORD+0(5)  UNPACK TRDATA 1\n         UNPK  WKTR1H+8(9),WKDWORD+4(5)  UNPACK TRDATA 1\n         MVZ   WKTR1H,HEX0000        CLEAR ZONES\n         TR    WKTR1H,HEXCHAR        TRANSLATE TO PRINTABLE\n         MVI   WKTR1H+16,C' '        RESTORE BLANK\n         MVC   WKTR2C,TREDATA2       COPY TRACE DATA 2\n         MVC   WKDWORD,TREDATA2      COPY DATA\n         UNPK  WKTR2H+0(9),WKDWORD+0(5)  UNPACK TRDATA 2\n         UNPK  WKTR2H+8(9),WKDWORD+4(5)  UNPACK TRDATA 2\n         MVZ   WKTR2H,HEX0000        CLEAR ZONES\n         TR    WKTR2H,HEXCHAR        TRANSLATE TO PRINTABLE\n         MVI   WKTR2H+16,C' '        RESTORE BLANK\n         C     R5,TRCURR             CURRENT TRACE ENTRY?\n         BNE   SNAP0120              NO\n         MVC   WKTRCURR,=C'<--- CURRENT ENTRY'\nSNAP0120 DS    0H\n         MVC   WKPDATA(WKTRL),WKTR   COPY EDITED DATA\n         BAL   R9,PRT0000            PRINT\n         C     R5,TRLAST             JUST PRINT LAST ENTRY?\n         BE    EXIT0000              YES\n         LA    R5,TRENTRYL(R5)       NEXT TRACE ENTRY\n         B     SNAP0110              LOOP\n         B     EXIT0000              EXIT\n         DROP  R5\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  This routine formats the fields in a control block.  If the block  *\n*  is a \"chain\" type block (like the SESSBLOKs), it will format       *\n*  all the blocks on the chain.  If a field is a \"pointer\" field,     *\n*  the blocks on that chain will be run before formatting the next    *\n*  block on the base chain.  For example the SESSBLOKs are a chain    *\n*  type block, the SESSBLOKs point to CONVBLOKs (CONVBLOKs are also   *\n*  a chain type block), so if                                         *\n*                                                                     *\n*          SESSBLOK \"A\" points to SESSBLOK \"B\" on the SESSBLOK chain  *\n*          and SESSBLOK \"A\" points to CONVBLOK \"1\" and CONVBLOK \"2\",  *\n*          and SESSBLOK \"B\" points to CONVBLOK \"3\", the output would  *\n*          look like:                                                 *\n*                                                                     *\n*          ------------ SESSBLOK at xxxxxxxx --------                 *\n*                         .                                           *\n*                         .   SESSBLOK \"A\"s fields                    *\n*                         .                                           *\n*          ------------ CONVBLOK at xxxxxxxx --------                 *\n*                         .                                           *\n*                         .   CONVBLOK \"1\"s fields                    *\n*                         .                                           *\n*          ------------ CONVBLOK at xxxxxxxx --------                 *\n*                         .                                           *\n*                         .   CONVBLOK \"2\"s fields                    *\n*                         .                                           *\n*          ------------ SESSBLOK at xxxxxxxx --------                 *\n*                         .                                           *\n*                         .   SESSBLOK \"B\"s fields                    *\n*                         .                                           *\n*          ------------ CONVBLOK at xxxxxxxx --------                 *\n*                         .                                           *\n*                         .   CONVBLOK \"3\"s fields                    *\n*                         .                                           *\n*                                                                     *\n*  Up to 10 nested chains are allowed.                                *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*  At entry:                                                          *\n*            R3 is the return address                                 *\n*            R4 points to the formatting data for the control block   *\n*            R5 points to the first (or only block)                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMT0000  DS    0H\n         STM   R0,R15,FMTSAVE        SAVE ALL REGISTERS\n         MVC   CURBLKNM,0(R4)        SAVE CURRENT BLOCK'S NAME\n         LA    R4,8(R4)              SKIP BLOCK NAME\nFMT0010  DS    0H\n         ST    R4,CURFMTDA           SAVE CURRENT BLOCK'S FMT DATA ADDR\n         ST    R5,CURCBA             SAVE CURRENT CONTROL BLOCK ADDRESS\n         USING FDMPDATA,R4           DEFINE BASE\n         XC    CURNEXT,CURNEXT       CLEAR 'NEXT' ON CHAIN ADDRESS\n         XC    CURSBFDA,CURSBFDA     CLEAR SUB-CHAIN FORMAT DATA ADDR\n         XC    CURSBCBA,CURSBCBA     CLEAR SUB-CHAIN CONTROL BLOCK ADDR\n         MVC   WKFMT,COMMBLKS        CLEAR WORK AREA\n         MVI   WKCC,C'0'             DOUBLE SPACE\n         MVI   WKPDATA,C'-'          INSERT A HYPHEN\n         MVC   WKPDATA+1(L'WKPDATA-1),WKPDATA\n         ST    R5,WKDWORD            SAVE CURRENT BLOCK'S ADDRESS\n         MVC   WKFIELD,CURBLKNM      SET BLOCK NAME\n         UNPK  WKDATA(9),WKDWORD(5)  UNPACK THIS BLOCK'S ADDRESS\n         MVZ   WKDATA(8),HEX0000     TURN OFF ZONES\n         TR    WKDATA(8),HEXCHAR     TRANSLATE TO PRINTABLE\n         MVC   WKPDATA+56(17),WKFIELD\n         BAL   R9,PRT0000            PRINT BLOCK HEADING\n         LA    R14,WKPDATA           FIRST OUTPUT AREA\n         LA    R15,L'WKPDATA         PRINT SPACE AVAILABLE\nFMT0020  DS    0H\n         CLI   0(R4),X'FF'           END OF FIELDS FOR THIS BLOCK?\n         BE    FMT9000               YES.. EXIT FOR NOW\n         MVC   WKFIELD,FDMPFLDN      COPY FIELD NAME\n         SR    R6,R6                 CLEAR REGISTER\n         ICM   R6,3,FDMPLEN          SOURCE FIELD'S LENGTH\n         SR    R7,R7                 CLEAR REGISTER\n         ICM   R7,3,FDMPDISP         DISPLACEMENT TO DATA\n         AR    R7,R5                 ADDRESS OF DATA\n         TM    FDMPFLAG,$FLAGCH      CHAIN FIELD?\n         BNO   FMT0030               NO\n         MVC   CURNEXT,0(R7)         COPY NEXT BLOCK'S ADDRESS\nFMT0030  DS    0H\n         CLC   FDMPPTR,HEX0000       SUB-CHAIN POINTER?\n         BE    FMT0040               NO\n         MVC   CURSBFDA,FDMPPTR      COPY FORMAT DATA ADDRESS\n         MVC   CURSBCBA,0(R7)        COPY CONTROL BLOCK ADDRESS\nFMT0040  DS    0H\n         CLI   FDMPFMT,$FMTBIN       IS THIS A BINARY FIELD?\n         BE    FMT0050               YES\n         CLI   FDMPFMT,$FMTCHAR      IS THIS A CHARACTER FIELD?\n         BE    FMT0060               YES\n         CLI   FDMPFMT,$FMTDEC       IS THIS A DECIMAL FIELD?\n         BE    FMT0070               YES\n         CLI   FDMPFMT,$FMTHEX       IS THIS A HEX FIELD?\n         BE    FMT0080               YES\n         ABEND $U0074,DUMP,,USER     BAD NEWS\nFMT0050  DS    0H\n         XC    WKBIN,WKBIN           CLEAR BINARY WORK AREA\n         BCTR  R6,0                  ADJUST FOR EXECUTES\n         LA    R2,WKBIN+3            END OF FIELD\n         SR    R2,R6                 MINUS ADJUSTED LENGTH\n         EX    R6,FMTMVC1            COPY\n         L     R1,WKBIN              LOAD UP THE NUMBER\n         CVD   R1,WKDWORD            CONVERT IT TO DECIMAL\n         MVC   WKDATA(L'BINEDWD),BINEDWD\n         ED    WKDATA(L'BINEDWD),WKDWORD+2\n         LA    R6,21                 TOTAL OUTPUT LENGTH\n         B     FMT0100               ADD DATA TO PRINT AREA\nFMTMVC1  MVC   0(0,R2),0(R7)         COPY DATA\nFMT0060  DS    0H\n         BCTR  R6,R0                 MINUS 1\n         EX    R6,FMTMVC2            COPY DATA\n         LA    R6,10(R6)             TOTAL OUTPUT LENGTH\n         B     FMT0100               ADD DATA TO PRINT AREA\nFMTMVC2  MVC   WKDATA(0),0(R7)       COPY DATA\nFMT0070  DS    0H\n         BCTR  R6,R0                 MINUS 1\n         EX    R6,FMTZAP1            COPY TO DOUBLE WORD\n         MVC   WKDATA(L'BINEDWD),BINEDWD\n         ED    WKDATA(L'BINEDWD),WKDWORD+2\n         LA    R6,21                 TOTAL OUTPUT LENGTH\n         B     FMT0100               ADD DATA TO PRINT AREA\nFMTZAP1  ZAP   WKDWORD,0(0,R7)       COPY PACKED DECIMAL\nFMT0080  DS    0H\n         LA    R1,WKDATA             OUTPUT AREA\nFMT0090  DS    0H\n         UNPK  0(3,R1),0(2,R7)       UNPACK DATA\n         MVZ   0(2,R1),HEX0000       CLEAR ZONES\n         TR    0(2,R1),HEXCHAR       TRANSLATE TO PRINTABLE\n         LA    R1,2(R1)              NEXT IN OUTPUT\n         LA    R7,1(R7)              NEXT IN INPUT\n         BCT   R6,FMT0090            LOOP\n         ICM   R6,3,FDMPLEN          RESTORE FIELD LENGTH\n         LA    R6,9(R6,R6)           TOTAL OUTPUT LENGTH\nFMT0100  DS    0H\n         CR    R15,R6                ENOUGH ROOM LEFT?\n         BH    FMT0110               YES\n         BAL   R9,PRT0000            PRINT\n         LA    R14,WKPDATA           RESET OUTPUT ADDRESS\n         LA    R15,L'WKPDATA         RESET SPACE AVAILABLE\nFMT0110  DS    0H\n         BCTR  R6,R0                 ADJUST FOR EXECUTE\n         EX    R6,FMTMVC3            COPY DATA TO PRINT AREA\n         LA    R6,3(R6)              TOTAL LENGTH (PLUS 2 BLANKS)\n         AR    R14,R6                NEXT OUTPUT AREA ADDRESS\n         SR    R15,R6                SPACE STILL AVAILABLE\n         LA    R4,FDMPDATAL(R4)      NEXT FIELD FORMAT DATA\n         B     FMT0020               FORMAT THIS FIELD\nFMTMVC3  MVC   0(0,R14),WKFMT        COPY FORMATTED DATA\nFMT9000  DS    0H\n         CH    R15,=Y(L'WKPDATA)     SOMETHING IN THE PRINT LINE?\n         BE    FMT9010               NO\n         BAL   R9,PRT0000            PRINT PARTIAL LINE\nFMT9010  DS    0H\n         OC    CURSBCBA,CURSBCBA     A SUB-CHAIN?\n         BZ    FMT9030               NO\n         LA    R1,9                  NUMBER OF LOOPS\n         LA    R2,CURBLKNM+(8*CURCTLL)    9TH ENTRY\nFMT9020  DS    0H\n         MVC   CURCTLL(CURCTLL,R2),0(R2)  COPY NTH TO N+1TH ENTRY\n         SH    R2,=Y(CURCTLL)             MINUS 1 ENTRY\n         BCT   R1,FMT9020                 LOOP\n         XC    CURBLKNM(CURCTLL),CURFMTDA CLEAR 1ST ENTRY\n         L     R4,CURSBFDA+CURCTLL        FORMATTING DATA ADDRESS\n         MVC   CURBLKNM,0(R4)             SET CONTROL BLOCK NAME\n         LA    R4,8(R4)                   SKIP CONTROL BLOCK NAME\n         ST    R4,CURFMTDA                SET DATA FORMATTING ADDRESS\n         L     R5,CURSBCBA+CURCTLL        SUB-BLOCKS' ADDRESS\n         ST    R5,CURCBA                  SAVE CONTROL BLOCK ADDRESS\n         B     FMT0010                    FORMAT THIS CHAIN\nFMT9030  DS    0H\n         OC    CURNEXT,CURNEXT       A 'NEXT' BLOCK?\n         BZ    FMT9040               NO\n         L     R4,CURFMTDA           RESET FORMAT DATA ADDRESS\n         L     R5,CURNEXT            NEXT BLOCK'S ADDRESS\n         B     FMT0010               FORMAT THIS BLOCK ALSO\nFMT9040  DS    0H\n         OC    CURBLKNM+CURCTLL(CURCTLL),CURBLKNM+CURCTLL\n         BZ    FMT9999               NOTHING IN STACK\n         MVC   CURBLKNM(9*CURCTLL),CURBLKNM+CURCTLL\n         XC    CURBLKNM+(9*CURCTLL)(CURCTLL),CURBLKNM+(9*CURCTLL)\n         B     FMT9030               CHECK FOR NEXT ON SAME LEVEL\nFMT9999  DS    0H\n         LM    R0,R15,FMTSAVE        RESTORE REGISTERS\n         BR    R3                    EXIT\nERR0010  DS    0H\n         ITRACE ID=NOTAUTH,          USER NOT AUTHORIZED               +\n               DATA1=SESSUSER        .. REQUESTING USER\n         MVC   USERMSG(MSG02L),MSG02 SET USER'S MESSAGE\n         B     EXIT0000              EXIT\nERR0020  DS    0H\n         ITRACE ID=ALOCFAIL,         SYSOUT ALLOCATION FAILED          +\n               DATA1=DAIRR15         DAIR RETURN CODE\n         ABEND $U0072,DUMP,,USER\nERR0030  DS    0H\n         ITRACE ID=DALOFAIL,         SYSOUT DE-ALLOCATION FAILED       +\n               DATA1=DAIRR15         DAIR RETURN CODE\n         ABEND $U0073,DUMP,,USER\nPRT0000  DS    0H\n         TR    WKPLINE,PRTABLE       MAKE SURE ALL IS PRINTABLE\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         PUT   WKDCB,WKPLINE         WRITE TO SNAP SHOT DATASET\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         CLI   WKCC,C'+'             NO SPACING?\n         BE    PRT0010               YES\n         AP    WKLINE,P1             ADD 1 TO LINE COUNT\n         CLI   WKCC,C' '             SINGLE SPACE?\n         BE    PRT0010               YES\n         AP    WKLINE,P1             ADD 1 TO LINE COUNT\n         CLI   WKCC,C'0'             DOUBLE SPACE?\n         BE    PRT0010               YES\n         AP    WKLINE,P1             ADD 1 TO LINE COUNT\nPRT0010  DS    0H\n         MVC   WKPLINE,COMMBLKS      CLEAR PRINT AREA\n         CP    WKLINE,COMMMAXL       TIME FOR A HEADING?\n         BNHR  R9                    NO.. RETURN\nHEAD0000 DS    0H\n         TIME  DEC\n         STM   R0,R1,WKTMDT          SAVE TIME AND DATE\n         MVC   WKPLINE(HEADINGL),HEADING\n         UNPK  WKPLINE+(HDTIME-HEADING)+0(3),WKTM+0(2) UNPACK HOURS\n         UNPK  WKPLINE+(HDTIME-HEADING)+3(3),WKTM+1(2) UNPACK MINUTES\n         UNPK  WKPLINE+(HDTIME-HEADING)+6(3),WKTM+2(2) UNPACK SECONDS\n         MVI   WKPLINE+(HDTIME-HEADING)+2,C':'\n         MVI   WKPLINE+(HDTIME-HEADING)+5,C':'\n         MVI   WKPLINE+(HDTIME-HEADING)+8,C' '\n         AP    WKDT,P1900000         ADD 19TH CENTURY\n         MVC   WKPLINE+(HDDATE-HEADING)(L'HDDATE),DATEEDWD\n         ED    WKPLINE+(HDDATE-HEADING)(L'HDDATE),WKDT\n         LTR   R7,R7                 INVOKED FROM A CONSOLE?\n         BZ    HEAD0010              YES\n         MVC   WKPLINE+(HDUSER-HEADING)(L'HDUSER),SESSUSER\n         B     HEAD0020\nHEAD0010 DS    0H\n         MVC   WKPLINE+(HDUSER-HEADING)(L'HDUSER),OPERATOR\nHEAD0020 DS    0H\n         MVC   WKPLINE+(HDSYSN-HEADING)(L'HDSYSN),COMMSYSN\n         AP    WKPAGE,P1             ADD 1 TO PAGE COUNT\n         MVC   WKPLINE+(HDPAGE-HEADING)(L'HDPAGE),PAGEEDWD\n         ED    WKPLINE+(HDPAGE-HEADING)(L'HDPAGE),WKPAGE\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         PUT   WKDCB,WKPLINE         WRITE HEADING\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         MVC   WKPLINE,COMMBLKS      CLEAR PRINT AREA\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         PUT   WKDCB,WKPLINE         WRITE HEADING\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         ZAP   WKLINE,P1             RESET LINE COUNT\n         BR    R9                    RETURN\nEXIT0000 DS    0H\n         ITRACE ID=EXIT              EXITING SNAP SHOT MODULE\n         TM    WKFLAG,$WKOPEN        IS FXSNAP OPEN?\n         BNO   EXIT0010              NO\n         ITRACE ID=CLOSE\n         MVC   WKOC(CLOSEL),CLOSEI   COPY CLOSE LIST FORM\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         LA    R2,WKDCB              DCB ADDRESS\n         CLOSE ((R2)),MF=(E,WKOC)    CLOSE THE DCB\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\nEXIT0010 DS    0H\n***\n***   It is not necessary to issue a \"DE-ALLOCATE\" request for the\n***   FXSNAP DD because FXDAIR allocates it with \"FREE=CLOSE\".\n***\n         LTR   R7,R7                 INVOKED VIA A CONSOLE?\n         BZ    EXIT0020              YES\n         LA    R0,(USERDATA-USERREQ) TOTAL LENGTH\n         STH   R0,USERLEN            SET LENGTH\nEXIT0020 DS    0H\n         LR    R1,R13                COPY WORK AREA ADDRESS\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         FREEMAIN R,A=(1),LV=WORKL   FREEMAIN WORK AREA\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\nAM24     DS    0H\n         LA    R14,0(R14)            CLEAR HIGH ORDER BIT(S)\n         BSM   R0,R14                RETURN IN 24-BIT MODE\nAM31     DS    0H\n         LA    R14,0(R14)            CLEAR HIGH ORDER BIT(S)\n         O     R14,X80               TURN ON HIGH ORDER BIT\n         BSM   R0,R14                RETURN IN 31-BIT MODE\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        CONSTANTS                                                   *\n*                                                                    *\n* ------------------------------------------------------------------ *\nX80      DC    A(X'80000000')\nHEX0000  DC    16X'00'\nHEXCHAR  DC    C'0123456789ABCDEF'\nBINEDWD  DC    X'402120202020202020202020'\nDATEEDWD DC    X'40202020204B202020'\nPAGEEDWD DC    X'40202120'\nP0       DC    P'0'\nP1       DC    P'1'\nP1900000 DC    P'1900000'\nFXSNAP   DC    CL8'FXSNAP'\nOPERATOR DC    CL8'OPERATOR'\nMSG01    DS    0C\n         DC    CL11'FXSSNAP01I'\n         DC    C'SNAP SHOT REQUESTED BY '\nMSG01USR DC    CL8' '\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'FXSSNAP02E'\n         DC    C'YOU ARE NOT AUTHORIZED TO SNAP SHOT FX'\nMSG02L   EQU   *-MSG02\nHEADING  DS    0C\n         DC    C'FX STC SNAPSHOT OF '\nHDSYSN   DC    CL20' '\n         DC    C' TAKEN AT:'\nHDDATE   DC    CL9' '\n         DC    C' '\nHDTIME   DC    CL8' '\n         DC    C'   REQUESTED BY '\nHDUSER   DC    CL8' '\n         DC    C'     PAGE '\nHDPAGE   DC    CL4' '\nHEADINGL EQU   *-HEADING\nOPENI    OPEN  (*,OUTPUT),MF=L\nOPENL    EQU   *-OPENI\nCLOSEI   CLOSE (*),MF=L\nCLOSEL   EQU   *-CLOSEI\nDCBI     DCB   DDNAME=FXSNAP,                                          +\n               DSORG=PS,                                               +\n               RECFM=FBA,                                              +\n               LRECL=133,                                              +\n               MACRF=PM\nDCBL     EQU   *-DCBI\n*                0 1 2 3 4 5 6 7 8 9 A B C D E F\nPRTABLE  DC    X'40404040404040404040404040404040'  X'00'-X'0F'\n         DC    X'40404040404040404040404040404040'  X'10'-X'1F'\n         DC    X'40404040404040404040404040404040'  X'20'-X'2F'\n         DC    X'40404040404040404040404040404040'  X'30'-X'3F'\n         DC    X'404040404040404040404A4B4C4D4E4F'  X'40'-X'4F'\n         DC    X'504040404040404040405A5B5C5D5E5F'  X'50'-X'5F'\n         DC    X'60614040404040404040406B6C404040'  X'60'-X'6F'\n         DC    X'404040404040404040407A7B7C7D7E7F'  X'70'-X'7F'\n         DC    X'40818283848586878889404040404040'  X'80'-X'8F'\n         DC    X'40919293949596979899404040404040'  X'90'-X'9F'\n         DC    X'4040A2A3A4A5A6A7A8A9404040404040'  X'A0'-X'AF'\n         DC    X'40404040404040404040404040404040'  X'B0'-X'BF'\n         DC    X'C0C1C2C3C4C5C6C7C8C9404040404040'  X'C0'-X'CF'\n         DC    X'D0D1D2D3D4D5D6D7D8D9404040404040'  X'D0'-X'DF'\n         DC    X'4040E2E3E4E5E6E7E8E9404040404040'  X'E0'-X'EF'\n         DC    X'F0F1F2F3F4F5F6F7F8F9404040404040'  X'F0'-X'FF'\n         LTORG\nRSTR4MAT SNAPFMT TYPE=BASE,FIELD=RSTRBLOK\n         SNAPFMT FIELD=RSTRNEXT,FORMAT=HEX,CHAIN=YES\n         SNAPFMT FIELD=RSTRDSNL,FORMAT=BIN\n         SNAPFMT FIELD=RSTRDSN,FORMAT=CHAR\n         SNAPFMT FIELD=RSTRVOL#,FORMAT=BIN\n         SNAPFMT FIELD=RSTRVOL,FORMAT=CHAR,LENGTH=60\n         DC      X'FF'\nSTGE4MAT SNAPFMT TYPE=BASE,FIELD=STGEDEV\n         SNAPFMT FIELD=STGENEXT,FORMAT=HEX,CHAIN=YES\n         SNAPFMT FIELD=STGETRSZ,FORMAT=BIN\n         SNAPFMT FIELD=STGETRCL,FORMAT=BIN\n         SNAPFMT FIELD=STGEVOL,FORMAT=CHAR\n         DC      X'FF'\nDEST4MAT SNAPFMT TYPE=BASE,FIELD=DESTBLOK\n         SNAPFMT FIELD=DESTNEXT,FORMAT=HEX,CHAIN=YES\n         SNAPFMT FIELD=DESTNAME,FORMAT=CHAR\n         SNAPFMT FIELD=DESTNODE,FORMAT=CHAR\n         DC      X'FF'\nXUSR4MAT SNAPFMT TYPE=BASE,FIELD=XUSRBLOK\n         SNAPFMT FIELD=XUSRNEXT,FORMAT=HEX,CHAIN=YES\n         SNAPFMT FIELD=XUSRSMF,FORMAT=CHAR\n         SNAPFMT FIELD=XUSRID1,FORMAT=CHAR\n         SNAPFMT FIELD=XUSRID2,FORMAT=CHAR\n         DC      X'FF'\nXTR4MAT  SNAPFMT TYPE=BASE,FIELD=XTRRECD\n         SNAPFMT FIELD=XTRNEXT,FORMAT=HEX,CHAIN=YES\n         SNAPFMT FIELD=XTRDATA,FORMAT=HEX,LENGTH=8\n         DC      X'FF'\nDR4MAT   SNAPFMT TYPE=BASE,FIELD=DRREQ\n         SNAPFMT FIELD=DRRSTR,FORMAT=HEX\n         SNAPFMT FIELD=DRR15,FORMAT=HEX\n         SNAPFMT FIELD=DRINDD,FORMAT=CHAR\n         SNAPFMT FIELD=DRSTAT,FORMAT=HEX\n         SNAPFMT FIELD=DRPRTDD,FORMAT=CHAR\n         SNAPFMT FIELD=DRSTAGE,FORMAT=CHAR\n         SNAPFMT FIELD=DRPDS,FORMAT=CHAR\n         SNAPFMT FIELD=DRRECD,FORMAT=HEX,LENGTH=100\n         DC      X'FF'\nPRT4MAT  SNAPFMT TYPE=BASE,FIELD=PRTBLOK\n         SNAPFMT FIELD=PRTNEXT,FORMAT=HEX,CHAIN=YES\n         SNAPFMT FIELD=PRTCMD,FORMAT=CHAR\n         SNAPFMT FIELD=PRTCC,FORMAT=CHAR\n         SNAPFMT FIELD=PRTMSGID,FORMAT=CHAR\n         SNAPFMT FIELD=PRTDATA,FORMAT=CHAR\n         DC      X'FF'\nSESS4MAT SNAPFMT TYPE=BASE,FIELD=SESSBLOK\n         SNAPFMT FIELD=SESSNEXT,FORMAT=HEX,CHAIN=YES\n         SNAPFMT FIELD=SESSPREV,FORMAT=HEX\n         SNAPFMT FIELD=SESSCONV,FORMAT=HEX,POINTER=CONV4MAT\n         SNAPFMT FIELD=SESSRPL,FORMAT=HEX\n         SNAPFMT FIELD=SESSRPLX,FORMAT=HEX\n         SNAPFMT FIELD=SESSNIB,FORMAT=HEX\n         SNAPFMT FIELD=SESSTIME,FORMAT=HEX\n         SNAPFMT FIELD=SESSDATE,FORMAT=HEX\n         SNAPFMT FIELD=SESSNAME,FORMAT=CHAR\n         SNAPFMT FIELD=SESSSMF,FORMAT=CHAR\n         SNAPFMT FIELD=SESSUSER,FORMAT=CHAR\n         SNAPFMT FIELD=SESSTYPE,FORMAT=CHAR\n         SNAPFMT FIELD=SESSUATH,FORMAT=HEX\n         SNAPFMT FIELD=SESSREC#,FORMAT=BIN\n         SNAPFMT FIELD=SESSSTAT,FORMAT=HEX\n         DC      X'FF'\nCONV4MAT SNAPFMT TYPE=BASE,FIELD=CONVBLOK\n         SNAPFMT FIELD=CONVNEXT,FORMAT=HEX,CHAIN=YES\n         SNAPFMT FIELD=CONVRPL,FORMAT=HEX\n         SNAPFMT FIELD=CONVRPLX,FORMAT=HEX\n         SNAPFMT FIELD=CONVDCB,FORMAT=HEX\n         SNAPFMT FIELD=CONVDECB,FORMAT=HEX\n         SNAPFMT FIELD=CONVIOA,FORMAT=HEX\n         SNAPFMT FIELD=CONVREC#,FORMAT=BIN\n         SNAPFMT FIELD=CONVTYPE,FORMAT=HEX\n         SNAPFMT FIELD=CONVSTAT,FORMAT=HEX\n         SNAPFMT FIELD=CONVFUNC,FORMAT=CHAR\n         SNAPFMT FIELD=CONVCID,FORMAT=HEX\n         DC      X'FF'\n* ------------------------------------------------------------------ *\n*            FORMATTING TABLE FOR FXSCOMM                            *\n* ------------------------------------------------------------------ *\nCOMM4MAT SNAPFMT TYPE=BASE,FIELD=FXSCOMM\n         SNAPFMT FIELD=AATTN,FORMAT=HEX\n         SNAPFMT FIELD=ACOMM,FORMAT=HEX\n         SNAPFMT FIELD=ACONV,FORMAT=HEX\n         SNAPFMT FIELD=ADAIR,FORMAT=HEX\n         SNAPFMT FIELD=ADSS,FORMAT=HEX\n         SNAPFMT FIELD=ALERAD,FORMAT=HEX\n         SNAPFMT FIELD=ALOSS,FORMAT=HEX\n         SNAPFMT FIELD=AMAIN,FORMAT=HEX\n         SNAPFMT FIELD=AMSTR,FORMAT=HEX\n         SNAPFMT FIELD=APRTQ,FORMAT=HEX\n         SNAPFMT FIELD=APRTS,FORMAT=HEX\n         SNAPFMT FIELD=ARECV,FORMAT=HEX\n         SNAPFMT FIELD=ASEND,FORMAT=HEX\n         SNAPFMT FIELD=ASESS,FORMAT=HEX\n         SNAPFMT FIELD=ASTGE,FORMAT=HEX\n         SNAPFMT FIELD=ATIMER,FORMAT=HEX\n         SNAPFMT FIELD=AVTAM,FORMAT=HEX\n         SNAPFMT FIELD=AVSUB,FORMAT=HEX\n         SNAPFMT FIELD=AVTOC,FORMAT=HEX\n         SNAPFMT FIELD=AXTR,FORMAT=HEX\n         SNAPFMT FIELD=AUID,FORMAT=HEX\n         SNAPFMT FIELD=AREQE,FORMAT=HEX\n         SNAPFMT FIELD=AREQI,FORMAT=HEX\n         SNAPFMT FIELD=ASHUT,FORMAT=HEX\n         SNAPFMT FIELD=A24,FORMAT=HEX\n         SNAPFMT FIELD=TRFIRST,FORMAT=HEX\n         SNAPFMT FIELD=TRLAST,FORMAT=HEX\n         SNAPFMT FIELD=TRCURR,FORMAT=HEX\n         SNAPFMT FIELD=TRADDR,FORMAT=HEX\n         SNAPFMT FIELD=COMMXTR,FORMAT=HEX\n         SNAPFMT FIELD=XTRREQ,FORMAT=HEX\n         SNAPFMT FIELD=XTRTERM,FORMAT=HEX\n         SNAPFMT FIELD=XTRWORK,FORMAT=HEX\n         SNAPFMT FIELD=COMMDXDA,FORMAT=HEX\n         SNAPFMT FIELD=COMMACB,FORMAT=HEX\n         SNAPFMT FIELD=COMMXLST,FORMAT=HEX\n         SNAPFMT FIELD=COMMRSTR,FORMAT=HEX\n         SNAPFMT FIELD=COMMSTGE,FORMAT=HEX\n         SNAPFMT FIELD=COMMSESS,FORMAT=HEX\n         SNAPFMT FIELD=COMMDEST,FORMAT=HEX\n         SNAPFMT FIELD=COMMTECB,FORMAT=HEX\n         SNAPFMT FIELD=COMMVECB,FORMAT=HEX\n         SNAPFMT FIELD=COMMMAX,FORMAT=BIN\n         SNAPFMT FIELD=COMMRECS,FORMAT=BIN\n         SNAPFMT FIELD=COMMPREL,FORMAT=BIN\n         SNAPFMT FIELD=COMMAPLL,FORMAT=BIN\n         SNAPFMT FIELD=COMMAPLN,FORMAT=CHAR\n         SNAPFMT FIELD=COMMPREF,FORMAT=CHAR\n         SNAPFMT FIELD=COMMMAXL,FORMAT=DEC\n         SNAPFMT FIELD=COMMDD#,FORMAT=DEC\n         SNAPFMT FIELD=COMMFLAG,FORMAT=HEX\n         SNAPFMT FIELD=COMMEOJ,FORMAT=HEX\n         SNAPFMT FIELD=COMMDSS,FORMAT=HEX\n         SNAPFMT FIELD=DSSREQ,FORMAT=HEX\n         SNAPFMT FIELD=DSSTERM,FORMAT=HEX\n         SNAPFMT FIELD=DSSWORK,FORMAT=HEX\n         SNAPFMT FIELD=COMMPRT,FORMAT=HEX\n         SNAPFMT FIELD=PRTREQ,FORMAT=HEX\n         SNAPFMT FIELD=PRTTERM,FORMAT=HEX\n         SNAPFMT FIELD=PRTWORK,FORMAT=HEX\n         DC      X'FF'\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        WORK AREAS                                                  *\n*                                                                    *\n* ------------------------------------------------------------------ *\nWORK     DSECT\nWORKSAVE DS    18F                   REGISTER SAVE AREA\nFMTSAVE  DS    16F\nWKDWORD  DS    D                     DOUBLE WORD WORK AREA\n         SPACE 1\nWKTMDT   DS    0F                    TIME AND DATE\nWKTM     DS    F                     TIME (HHMMSSTH)\nWKDT     DS    F                     DATE (0CYYDDDS)\n         SPACE 1\nWKBIN    DS    F\nWKOC     DS    (OPENL)X\nWKDCB    DS    (DCBL)X\n         SPACE 1\n         DS    0F                    FORCE ALIGNMENT\n         SPACE 1\nCURBLKNM DS    CL8                   CURRENT BLOCK'S NAME\nCURFMTDA DS    A                     CURRENT BLOCK'S FORMAT DATA\nCURCBA   DS    A                     CURRENT CONTROL BLOCK'S ADDRESS\nCURNEXT  DS    A                     NEXT BLOCK ON CHAIN\nCURSBFDA DS    A                     SUB CHAIN FORMAT DATA ADDRESS\nCURSBCBA DS    A                     SUB CHAIN CONTROL BLOCK ADDRESS\nCURCTLL  EQU   *-CURBLKNM            CONTROL DATA PER CONTROL BLOCK\n         DS    (9*CURCTLL)X          9 MORE CONTROL ENTRIES\n         SPACE 1\nWKFLAG   DS    X\n$WKALOC  EQU   X'80'                 FXSNAP ALLOCATED\n$WKOPEN  EQU   X'40'                 FXSNAP OPENED\nWKPAGE   DS    PL2                   PAGE NUMBER\nWKLINE   DS    PL2                   LINE NUMBER\n         SPACE 1\nWKFMT    DS    0CL132\nWKFIELD  DS    CL8                   FIELD NAME\n         DS    C\nWKDATA   DS    CL123                 FIELD VALUE\n         SPACE 1\nWKTR     DS    0C\nWKTRMOD  DS    CL8                   MODULE NAME\n         DS    CL5\nWKTRID   DS    CL8                   TRACE ID\n         DS    CL5\nWKTR1C   DS    CL8                   TRACE DATA1 OR RDATA1 IN CHARACTER\n         DS    C\nWKTR1H   DS    CL16                  TRACE DATA1 OR RDATA1 IN HEX\n         DS    CL5\nWKTR2C   DS    CL8                   TRACE DATA2 OR RDATA2 IN CHARACTER\n         DS    C\nWKTR2H   DS    CL16                  TRACE DATA2 OR RDATA2 IN HEX\n         DS    C\nWKTRCURR DS    CL18\nWKTRL    EQU   *-WKTR\n         SPACE 1\nWKPLINE  DS    0CL133\nWKCC     DS    C\nWKPDATA  DS    CL132\n         SPACE 1\n         DAIRREQ  DSECT=NO\nWORKL    EQU   *-WORK\n* ------------------------------------------------------------------ *\n*              SESSION BLOCK                                         *\n* ------------------------------------------------------------------ *\n         SESSBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              CONVERSATION BLOCK                                    *\n* ------------------------------------------------------------------ *\n         CONVBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              USER REQUEST/RESPONSE BLOCK                           *\n* ------------------------------------------------------------------ *\n         USERREQ\n* ------------------------------------------------------------------ *\n*              COMMON DATA MAP                                       *\n* ------------------------------------------------------------------ *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------ *\n*              CONTROL BLOCK FORMATTING DATA                         *\n* ------------------------------------------------------------------ *\n         COPY  FDMPDATA\n* ------------------------------------------------------------------ *\n*              RESTORE BLOCKS                                        *\n* ------------------------------------------------------------------ *\n         RSTRBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              STAGE DEVICE BLOCKS                                   *\n* ------------------------------------------------------------------ *\n         STGEDEV  DSECT=YES\n* ------------------------------------------------------------------ *\n*              DESTINATION NAME BLOCKS                               *\n* ------------------------------------------------------------------ *\n         DESTBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              DF/DSS REQUEST BLOCKS                                 *\n* ------------------------------------------------------------------ *\n         DRREQ    DSECT=YES\n* ------------------------------------------------------------------ *\n*              EXTERNAL USER BLOCKS                                  *\n* ------------------------------------------------------------------ *\n         XUSRBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              PRINT REQUEST BLOCKS                                  *\n* ------------------------------------------------------------------ *\n         PRTBLOK  DSECT=YES\n* ------------------------------------------------------------------ *\n*              TRANSMISSION REQUEST BLOCK                            *\n* ------------------------------------------------------------------ *\n         REQBLOK  DSECT=YES\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              EQUATES                                               *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         ABCODES\n         END  FXSSNAP\n./ ADD NAME=FXSSTGE  0100-99056-99056-1500-01449-01449-00000-FX-REL1\n\n         TITLE 'FXSSTGE  STAGE/DE-STAGE'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSSTGE                                               *\n*                                                                     *\n*  Function:                                                          *\n*                                                                     *\n*     1) Determine status of DF/DSS and IEBCOPY subtasks              *\n*        a) If work has been scheduled to DF/DSS subtask              *\n*              is the process complete?                               *\n*                 yes.. update master file,                           *\n*                       free dump/restore request block               *\n*                 no..  indicate DF/DSS subtask is busy               *\n*        b) If work has been scheduled to IEBCOPY subtask             *\n*              is the process complete?                               *\n*                 yes.. update master file,                           *\n*                       free dump/restore request block               *\n*                 no..  indicate IEBCOPY subtask is busy              *\n*     2) If both subtasks are busy..                                  *\n*           exit                                                      *\n*     3) Scan the master file                                         *\n*       For a request in 'initial' state:                             *\n*        A) verify that the data set exists (is must be cataloged)    *\n*        b) verify that the data set is on disk                       *\n*        c) if the request specified a member name                    *\n*              verify that the DSORG is PO                            *\n*                 if DSORG = PO                                       *\n*                    set data set size to \"MEM SIZE\" value            *\n*                    go to \"e\"                                        *\n*                 if DSORG not = PO                                   *\n*                    set status to \"error\"                            *\n*                    go to \"3\" to find another request                *\n*        d) if the request did not specify a member:                  *\n*           determine how large the data set is                       *\n*        e) allocate the staging dataset, and data sets to be used    *\n*           for DF/DSS or IEBCOPY SYSIN and SYSPRINT.                 *\n*        f) Drive the DF/DSS or IEBCOPY subtask to have the data set  *\n*           or member \"dumped\".                                       *\n*                                                                     *\n*       For data sets received:                                       *\n*        a) allocate the data sets for DF/DSS or IEBCOPY SYSIN and    *\n*           SYSPRINT.                                                 *\n*        2) Drive the DF/DSS or IEBCOPY subtask to have the data set  *\n*           or member \"restored\".                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSSTGE    FXPRFX 'STAGE/DE-STAGE'\nFXSSTGE  AMODE 31\nFXSSTGE  RMODE ANY\n         USING REQBLOK,R7            DEFINE BASE\n         USING DRREQ,R4              DEFINE BASE\n         B     INIT0000\nDXDSTART DC    Q(DXDSSTGE)           DISPLACEMENT TO WORK AREA\nINIT0000 DS    0H\n         LA    R9,2048(R12)          SET 2ND BASE\n         LA    R9,2048(R9)           SET 2ND BASE\n         DROP  R12\n         USING FXSSTGE,R12,R9        DEFINE BOTH BASE'S\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    STGE0010              YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         LOAD  EP=IDCAMS             LOAD IDCAMS\n         ST    R0,DXDIDCEP           SAVE IDCAMS ENTRY POINT ADDRESS\n         GETMAIN RU,                 ACQUIRE STORAGE FOR IDCAMS SYSIN  +\n               LV=IDCIL,             .. AMOUNT OF STORAGE REQUIRED     +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,DXDIDCI            SAVE SYSIN DCB ADDRESS\n         GETMAIN RU,                 ACQUIRE STORAGE FOR IDCAMS PRINT  +\n               LV=IDCPL,             .. AMOUNT OF STORAGE REQUIRED     +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,DXDIDCP            SAVE SYSIN DCB ADDRESS\n         GETMAIN RU,                 ACQUIRE 24-BIT MODULE PARM AREA   +\n               LV=FX24L,             .. AREA SIZE                      +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,DXD24              SAVE 24-BIT PARM LIST ADDRESS\n         USING FX24PRM,R1            DEFINE BASE\n         MVI   IO24,C' '              CLEAR FIRST BYTE\n         MVC   IO24+1(L'IO24-1),IO24  CLEAR I/O AREA\n         DROP  R1\n         MVI   PRTCC,C' '            INITIALIZE CARRIAGE CONTROL\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\nSTGE0010 DS    0H\n         TM    COMMEOJ,$EOJ3         SHUTDOWN PHASE 3?\n         BO    EXIT0000              YES\n         L     R8,DXD24              24-BIT PARM AREA ADDRESS\n         USING FX24PRM,R8            DEFINE BASE\n         NI    DXDFLAG,255-$DSS-$COPY  ASSUME BOTH ARE AVAILABLE\n*---------------------------------------------------------------------*\n*                                                                     *\n*   Check on status of DF/DSS subtask                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         ITRACE ID=CHECKDSS          CHECKING ON STATUS OF DF/DSS\n         OC    DSSTERM,DSSTERM       HAS THE DF/DSS SUBTASK ABENDED?\n         BZ    STGE0020              NO\n         ITRACE ID=DSSABEND,         DF/DSS SUBTASK HAS ABENDED        +\n               DATA1=DSSTERM         .. INCLUDE REASON IN TRACE\n         ABEND $U0096,DUMP,,USER\nSTGE0020 DS    0H\n         ICM   R4,15,DSSREQ          REQUEST BLOCK'S ADDRESS\n         BZ    STGE0040              NO REQUEST BLOCK\n         TM    DSSECB,X'40'          ECB POSTED?\n         BNO   STGE0030              NO\n         XC    DSSECB,DSSECB         RESET THE ECB\n         XC    DSSREQ,DSSREQ         CLEAR THE REQUEST BLOCK ADDRESS\n         ITRACE ID=DSSDONE,          DF/DSS COMPLETE                   +\n               DATA1=DRRECD,         .. TRACE MASTER FILE RECORD NUMBER+\n               DATA2=DRR15           .. AND DF/DSS R15\n         BAL   R5,FREE0000           FREE STAGE DATA SETS AND DRREQ\n         ITRACE ID=FREEDR1,          RELEASING A DUMP/RESTORE BLOCK    +\n               RDATA1=R4             .. BLOCK'S ADDRESS\n         FREEMAIN RU,A=(4),LV=DRREQL FREE DUMP/RESTORE REQUEST BLOCK\n         B     STGE0040              CHECK ON IEBCOPY\nSTGE0030 DS    0H\n         ITRACE ID=DSSBUSY           DF/DSS SUBTASK IS BUSY\n         OI    DXDFLAG,$DSS          SET DSS BUSY INDICATOR\n         NI    COMMEOJ,255-$EOJ2     DON'T TERMINATE UNTILL IT'S DONE\n*---------------------------------------------------------------------*\n*                                                                     *\n*   Check on status of IEBCOPY subtask                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nSTGE0040 DS    0H\n         ITRACE ID=CHKCOPY           CHECKING ON STATUS OF IEBCOPY\n         OC    COPYTERM,COPYTERM     HAS IEBCOPY SUBTASK ABENDED?\n         BZ    STGE0060              NOT YET!\n         ICM   R1,3,COPYTERM+1       INSERT SYSTEM ABEND CODE\n         SRL   R1,4                  SHFIT TO LOW BITS\n         STCM  R1,3,DXDWORK          SAVE SYSTEM ABEND CODE\n         CLI   DXDWORK+1,X'37'       X37 ABEND?\n         BE    STGE0050              YES\n         ITRACE COPYABND,            IEBCOPY HAS ABENDED               +\n               DATA1=COPYTERM        .. INCLUDE REASON IN TRACE\n         ABEND $U0097,DUMP,,USER\nSTGE0050 DS    0H\n         ICM   R4,15,COPYREQ         REQUEST BLOCK'S ADDRESS\n         BZ    ERR0080               NO REQUEST BLOCK\n         LA    R7,DRRECD             SAVED RECORD IN REQUEST BLOCK\n         MVC   PRTMSGID(MSG01L),MSG01\n         MVC   PRTMSGID+(MSG01NDE-MSG01)(L'MSG01NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG01NBR-MSG01)(L'MSG01NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG01DSN-MSG01)(L'MSG01DSN),REQODSNM\n         MVC   PRTMSGID+(MSG01MEM-MSG01)(L'MSG01MEM),REQOMEM\n         BAL   R6,PRT0000            PRINT MESSAGE\n         LA    R1,COMMCOPY           IEBCOPY SUBTASK TCB ADDRESS\n         DETACH (R1)                 DETACH THE SUBTASK\n         XC    COPYTERM,COPYTERM     CLEAR TERMINATION ECB\n         LA    R2,COPYTERM           TERMINATION ECB'S ADDRESS\n         LA    R3,DXDAPARM           PARM LIST ADDRESS\n         ITRACE ID=ATCHCOPY          ATTACHING IEBCOPY SUBTASK\n         ATTACH EP=FXSCOPY,          ATTACH IEBCOPY SUBTASK            +\n               PARAM=((R11)),        .. PARAMETER IS COMMON MODULE ADDR+\n               ECB=(R2),             .. TERMINATION ECB'S ADDRESS      +\n               PURGE=QUIESCE,        .. FINISH UP I/O IN PROGRESS      +\n               MF=(E,(R3)),          .. SUBTASK PARM LIST              +\n               SF=(E,DXDATTCH)       .. EXECUTE FORM, LIST FORM ADDRESS\n         LTR   R15,R15               ATTACH SUCCESSFUL?\n         BNZ   ERR0090               NO\n         ST    R1,COMMCOPY           SAVE SUBTASK'S TCB ADDRESS\n         ITRACE ID=COPYOK,                                             +\n               RDATA1=R1\n         MVC   PRTMSGID(MSG02L),MSG02\n         BAL   R6,PRT0000            PRINT MESSAGE\n         MVI   DRR15,X'FF'           SET ABEND X37 FLAG\n         B     STGE0070              PROCESS AS IF COMPLETED\nSTGE0060 DS    0H\n         ICM   R4,15,COPYREQ         REQUEST BLOCK'S ADDRESS\n         BZ    STGE0090              NO REQUEST BLOCK\n         TM    COPYECB,X'40'         ECB POSTED?\n         BNO   STGE0080              NO\nSTGE0070 DS    0H\n         XC    COPYECB,COPYECB       RESET THE ECB\n         XC    COPYREQ,COPYREQ       CLEAR THE REQUEST BLOCK ADDRESS\n         ITRACE ID=COPYDONE,         IEBCOPY COMPLETE                  +\n               DATA1=DRRECD,         .. TRACE MASTER FILE RECORD NUMBER+\n               DATA2=DRR15           .. AND IEBCOPY R15\n         BAL   R5,FREE0000           FREE STAGE DATA SETS AND DRREQ\n         ITRACE ID=FREEDR2,          RELEASING A DUMP/RESTORE BLOCK    +\n               RDATA1=R4             .. BLOCK'S ADDRESS\n         FREEMAIN RU,A=(4),LV=DRREQL FREE DUMP/RESTORE REQUEST BLOCK\n         B     STGE0090\nSTGE0080 DS    0H\n         ITRACE ID=COPYBUSY          IEBCOPY SUBTASK IS BUSY\n         OI    DXDFLAG,$COPY         SET COPY BUSY INDICATOR\n         NI    COMMEOJ,255-$EOJ2     DON'T TERMINATE UNTILL IT'S DONE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Scan the master file for requests that need to be queued     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTGE0090 DS    0H\n         TM    COMMEOJ,$EOJ1         SHUT-DOWN IN PROGRESS?\n         BO    EXIT0040              YES.. DON'T SCHEDULE MORE WORK\n         TM    DXDFLAG,$DSS+$COPY    BOTH SUBTASKS BUSY?\n         BO    EXIT0040              YES.. CANNOT SCHEDULE ANY WORK\n         ITRACE ID=SCANMSTR          STARTING MASTER FILE SCAN\n         XC    DXDREC#,DXDREC#       INITIALIZE FOR RECORD NUMBER\n         B     STGE0110              START READING MASTER FILE\nSTGE0100 DS    0H\n         LH    R1,DXDREC#            CURRENT RECORD NUMBER\n         LA    R1,1(R1)              UPDATE RECORD COUNTER\n         STH   R1,DXDREC#            SAVE UPDATED RECORD NUMBER\n         C     R1,COMMRECS           AT END OF MASTER FILE?\n         BE    EXIT0040              YES\n         ITRACE ID=NEXTMSTR,         TRACE READS                       +\n               DATA1=DXDREC#         .. RECORD NUMBER\nSTGE0110 DS    0H\n         MVI   MSTRCMD,$MSTRRD       READ A RECORD\n         BAL   R6,MSTR0000           LINK TO MASTER FILE I/O\n         CLI   REQSTAT,0             UNUSED RECORD?\n         BE    EXIT0040              YES\n         CLI   REQSTAT,$REQRCVD      RECEIVED AND READY FOR RESTORE?\n         BE    STGE0340              YES\n         CLI   REQSTAT,$REQINIT      INITIAL STATUS?\n         BNE   STGE0100              NO\n         CLC   COMMAPLN,REQTNODE     ARE WE SENDING END?\n         BE    STGE0120              YES\n         ABEND $U0035,DUMP,,USER     SHOULDN'T HAPPEN\nSTGE0120 DS    0H\n         CLC   REQOMEM,COMMBLKS      IEBCOPY NEEDED?\n         BNE   STGE0130              YES\n         TM    DXDFLAG,$DSS          DF/DSS ALREADY BUSY?\n         BO    STGE0100              YES.. SEARCH FOR ANOTHER REQUEST\n         B     STGE0140              START 'DUMP' PROCESSING\nSTGE0130 DS    0H\n         TM    DXDFLAG,$COPY         IEBCOPY ALREADY BUSY?\n         BO    STGE0100              YES.. SEARCH FOR ANOTHER REQEUST\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        We have a data set that needs to be \"DUMP\"ed                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTGE0140 DS    0H\n         ITRACE ID=LISTCAT\n         L     R1,DXDIDCI            IDCAMS SYSIN DCB ADDRESS\n         L     R15,AIDCII            SYSIN DCB\n         MVC   0(IDCIL,R1),0(R15)    COPY DCB\n         ST    R1,DCB24              SET DCB ADDRESS\n         FX24  $OPENO                CALL OPEN OUTPUT\n         MVC   IO24(LISTC1L),LISTC1  LISTCAT STATEMENT\n         BAL   R6,PUNCH000           WRITE LISTCAT STATEMENT\n         MVC   IO24(LISTC2L),LISTC2\n         MVC   IO24+(LISTC2NM-LISTC2)(L'LISTC2NM),REQODSNM\n         BAL   R6,PUNCH000           WRITE LISTCAT STATEMENT\n         MVC   IO24(LISTC3L),LISTC3\n         BAL   R6,PUNCH000           WRITE LISTCAT STATEMENT\n         FX24  $CLOSE                CALL CLOSE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR PARM LIST     +\n               LV=IDCPRML,           .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,PARM24             SET PARM LIST ADDRESS\n         LR    R2,R1                 COPY STORAGE ADDRESS\n         MVC   0(IDCPRML,R2),IDCPRM  COPY PARM LIST\n         LA    R0,H0-IDCPRM(R2)      OPTIONS ADDRESS\n         ST    R0,0(R2)              SET OPTIONS ADDRESS\n         LA    R0,DDNLIST-IDCPRM(R2) DDNAMES LIST ADDRESS\n         ST    R0,4(R2)              SET DDNAMES LIST ADDRESS\n         OI    4(R2),X'80'           FLAG END OF LIST\n         MVC   EP24,DXDIDCEP         IDCAMS ENTRY POINT\n         FX24  $CALL                 LINK TO 24-BIT CALL\n         L     R1,DXDIDCP            IDCAMS SYSPRINT DCB ADDRESS\n         L     R15,AIDCPI            PRINT DCB\n         MVC   0(IDCPL,R1),0(R15)    COPY DCB\n         ST    R1,DCB24              SET DCB ADDRESS\n         FX24  $OPENI                CALL OPEN INPUT\n         MVI   DXDFLAG,0             RESET ALL FLAGS\n         XC    DXDDSNSZ,DXDDSNSZ     CLEAR TOTAL SIZE\nSTGE0150 DS    0H\n         ITRACE ID=LISTREAD\n         LA    R0,STGE0310           EOF ROUTINE ADDRESS\n         ST    R0,EOF24              SET EOF ADDRESS\n         OI    EOF24,X'80'           SET 31-BIT MODE FLAG\n         FX24  $GETL                 CALL GET-LOCATE\n         L     R1,IOA24              RETURNED DATA ADDRESS\n         SR    R2,R2                 CLEAR REGISTER\n         ICM   R2,3,0(R1)            LENGTH OF RECORD\n         LA    R1,5(R1)              SKIP LENGTH AND CARRIAGE CONTROL\n         SH    R2,H5                 MINUS LENGTH\n         BZ    STGE0150              READ NEXT RECORD\nSTGE0160 DS    0H\n         CLI   0(R1),C' '            BLANK?\n         BNE   STGE0170              NO\n         LA    R1,1(R1)              NEXT\n         BCT   R2,STGE0160           LOOP\n         B     STGE0150              READ NEXT RECORD\nSTGE0170 DS    0H\n         CLC   SUMMARY,0(R1)         BEGINNING OF IDCAMS SUMMARY?\n         BE    STGE0310              FORCE EOF\n         CLC   IDC3012I,0(R1)        DATASET NOT FOUND (NOT CATALOGED)?\n         BE    ERR0040               YES\n         CLC   NONVSAM,0(R1)         A 'NON-VSAM' DATA SET RECORD?\n         BE    STGE0180              YES\n         CLC   DATA,0(R1)            A 'DATA' COMPONENT RECORD?\n         BE    STGE0190              YES\n         CLC   INDEX,0(R1)           AN 'INDEX' COMPONENT RECORD?\n         BE    STGE0200              YES\n         CLC   VOLSER,0(R1)          A VOLSER RECORD?\n         BE    STGE0240              YES\n         B     STGE0150              READ NEXT RECORD\nSTGE0180 DS    0H\n         ITRACE ID=NONVSAM           DATA SET IS NON-VSAM\n         OI    DXDFLAG,$NONVSAM      DATA SET IS NON-VSAM\n         LA    R1,L'NONVSAM(R1)      SKIP KEYWORD\n         SH    R2,=Y(L'NONVSAM)      MINUS LENGTH OF KEYWORD\n         BZ    ERR0030               ERROR NO LENGTH LEFT\n         B     STGE0210\nSTGE0190 DS    0H\n         ITRACE ID=DATA              DATA COMPONENT FOUND\n         OI    DXDFLAG,$DATA         DATA COMPONENT FOUND\n         LA    R1,L'DATA(R1)         SKIP KEYWORD\n         SH    R2,=Y(L'DATA)         MINUS LENGTH OF KEYWORD\n         BZ    ERR0030               ERROR NO LENGTH LEFT\n         B     STGE0210\nSTGE0200 DS    0H\n         ITRACE ID=INDEX             INDEX COMPONENT FOUND\n         OI    DXDFLAG,$INDEX        INDEX COMPONENT FOUND\n         LA    R1,L'INDEX(R1)        SKIP KEYWORD\n         SH    R2,=Y(L'INDEX)        MINUS LENGTH OF KEYWORD\n         BZ    ERR0030               ERROR NO LENGTH LEFT\nSTGE0210 DS    0H\n         CLC   =C'- ',0(R1)          END OF HYPENS?\n         BE    STGE0220              YES\n         LA    R1,1(R1)              NEXT\n         BCT   R2,STGE0210           LOOP\n         B     ERR0030               ERROR IF NEVER FOUND\nSTGE0220 DS    0H\n         LA    R1,2(R1)              DSN OR COMPONENT NAME'S ADDRESS\n         SH    R2,H2                 MINUS LENGTH\n         BZ    ERR0030               ERROR IF NOTHING LEFT\n         CH    R2,H44                MORE THAN 44?\n         BNH   STGE0230              NO\n         LH    R2,H44                LIMIT TO 44\nSTGE0230 DS    0H\n         ITRACE ID=DATANAME,                                           +\n               DATA1=0(R1),          .. FIRST 8 BYTES OF NAME          +\n               DATA2=8(R1)           .. NEXT 8 BYTES OF NAME\n         MVC   DXDDSN,COMMBLKS       INITIALIZE DATA SET NAME\n         BCTR  R2,0                  FOR EXECUTE\n         EX    R2,DSNMVC             MOVE DATA SET NAME\n         B     STGE0150              READ NEXT RECORD\nDSNMVC   MVC   DXDDSN(0),0(R1)       SAVE DATA SET NAME\nSTGE0240 DS    0H\n         ITRACE ID=VOLSER\n         TM    DXDFLAG,$NONVSAM+$DATA+$INDEX   ANY ONE OF THE ABOVE?\n         BZ    ERR0010               NO.. SERIOUS PROBLEM\n         LA    R1,L'VOLSER(R1)       SKIP KEYWORD\n         SH    R2,=Y(L'VOLSER)       MINUS LENGTH OF KEYWORD\n         BZ    ERR0110               NO LENGTH LEFT\nSTGE0250 DS    0H\n         CLI   0(R1),C'-'            HYPHEN?\n         BNE   STGE0260              NO\n         LA    R1,1(R1)              NEXT\n         BCT   R2,STGE0250           LOOP\n         B     ERR0110               VOLSER NOT FOUND\nSTGE0260 DS    0H\n         L     R15,CVTPTR            CVT ADDRESS\n         USING CVT,R15               DEFINE BASE\n         CLC   RESVOL,0(R1)          SYSRES? ('******')\n         BNE   STGE026A              NO\n         L     R14,CVTSYSAD          SYSRES DEVICE ADDRESS\n         USING UCBOB,R14             DEFINE BASE\n         LA    R1,UCBVOLI            VOLSER ADDRESS IN THE UCB\n         B     STGE0270\nSTGE026A DS    0H\n         ICM   R14,15,CVTUCBA        FIRST UCB\nSTGE026B DS    0H\n         CLC   UCBVOLI,0(R1)         DEVICE LOCATED?\n         BE    STGE026C              YES\n         ICM   R14,15,UCBNXUCB       NEXT UCB\n         BNZ   STGE026B              LOOP\n         B     ERR0140               VOLUME NOT FOUND\nSTGE026C DS    0H\n         TM    UCBTBYT3,UCB3DACC     DASD DEVICE?\n         BNO   ERR0160               NO\n         TM    UCBSTAT,UCBONLI       IS DEVICE ONLINE?\n         BNO   ERR0170               NO\nSTGE0270 DS    0H\n         ST    R1,VTOCVOL            SET VOLSER ADDRESS\n         LA    R1,DXDDSN             DATA SET NAME'S ADDRESS\n         ST    R1,VTOCDSN            SET DSN ADDRESS\n         CLC   REQOMEM,COMMBLKS      PDS MEMBER?\n         BNE   STGE0280              YES\n         MVI   VTOCCMD,$VTOCXNT      SET COMMAND (SCAN EXTENTS)\n         B     STGE0290\nSTGE0280 DS    0H\n         FX24  $CLOSE                CLOSE THE DCB NOW\n         MVI   VTOCCMD,$VTOCDSO      SET COMMAND (DETERMINE DSORG)\nSTGE0290 DS    0H\n         LA    R1,VTOCREQ            VTOC INTERFACE BLOCK ADDRESS\n         L     R15,AVTOC             VTOC MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO VTOC MODULE\n         CLI   VTOCDSO,$VTOCIS       ISAM FILE?\n         BE    ERR0020               YES.. NOT SUPPORTED\n         CLC   REQOMEM,COMMBLKS      PDS MEMBER?\n         BNE   STGE0300              YES\n         L     R1,DXDDSNSZ           SIZE SO FAR\n         A     R1,VTOCDSSZ           PLUS ADDITIONAL SIZE\n         ST    R1,DXDDSNSZ           SAVE TOTAL SIZE\n         B     STGE0150              READ NEXT IDCAMS PRINT LINE\nSTGE0300 DS    0H\n         CLI   VTOCDSO,$VTOCPO       DSORG = PO?\n         BNE   ERR0100               NO..\n         ITRACE ID=PDSVERIF          DATA SET ORGANIZATION IS PO\n         MVC   DXDDSNSZ,COMMMEM      SET SIZE\n         B     STGE0320\n* ------------------------------------------------------------------- *\n*        All IDCAMS SYSPRINT has been read (or in the case of a PDS   *\n*        member all that we are going to read), the data set size     *\n*        has been determined.                                         *\n* ------------------------------------------------------------------- *\nSTGE0310 DS    0H\n         ITRACE ID=LISTEOF           EOF ON IDCAMS LIST\n         FX24  $CLOSE                CLOSE THE DCB NOW\nSTGE0320 DS    0H\n         OC    DXDDSNSZ,DXDDSNSZ     DATA SET SIZE ZERO?\n         BZ    ERR0050               YES..\n         CLC   DXDDSNSZ,COMMMAX      LARGER THAN MAX ALLOWED?\n         BH    ERR0060               YES\n         MVI   DAIRCMD,$DAIRALO      SET COMMAND (ALLOCATE)\n         MVI   DAIRTYPE,$DAIRSTG     SET TYPE (STAGING)\n         MVC   DAIRSIZE,DXDDSNSZ     SET DATA SET SIZE IN BYTES\n         MVC   DXDWORK,STAGING       SET DATA SET TYPE\n         BAL   R6,DAIR0000           LINK TO DAIR\n         OC    DAIRR15,DAIRR15       STAGING DATA SET ALLOCATED?\n         BNZ   STGE0480              NO\n         MVC   REQWDSNM,DAIRDSN      SAVE STAGING DATA SET'S NAME\n         MVC   DXDSTAGE,DAIRDDN      SAVE DDNAME\n         CLC   REQOMEM,COMMBLKS      PDS MEMBER?\n         BNE   STGE0330              YES\n         MVI   REQUTIL,$REQDSS       SET UTILITY USED TO DF/DSS\n         B     STGE0410\nSTGE0330 DS    0H\n         MVI   REQUTIL,$REQCOPY      SET UTILITY USED TO IEBCOPY\n         MVI   DAIRTYPE,$DAIRDSN     SET TYPE EXISTING DATA SET\n         MVC   DAIRDSN,REQODSNM      SET DATA SET NAME\n         MVC   DXDWORK,PDS           SET DATA SET TYPE FOR MESSAGES\n         BAL   R6,DAIR0000           ALLOCATE THE PDS\n         OC    DAIRR15,DAIRR15       DATA SET SET ALLOCATED?\n         BNZ   STGE0490              NO\n         MVC   DXDPDS,DAIRDDN        SAVE PDS DD NAME\n         B     STGE0410\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Restore                                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTGE0340 DS    0H\n         ITRACE ID=RESTORE\n         CLI   REQUTIL,$REQCOPY      IEBCOPY?\n         BE    STGE034A              YES\n         TM    DXDFLAG,$DSS          DF/DSS ALREADY BUSY?\n         BO    STGE0100              YES.. SEARCH FOR ANOTHER REQUEST\n         B     STGE034Z\nSTGE034A DS    0H\n         TM    DXDFLAG,$COPY         IEBCOPY ALREADY BUSY?\n         BO    STGE0100              YES.. SEARCH FOR ANOTHER REQUEST\n         B     STGE0390              SKIP RSTRBLOK SEARCH\nSTGE034Z DS    0H\n         MVC   DXDDSN,REQODSNM       ASSUME ORIGINAL NAME\n         CLC   REQDDSNM,COMMBLKS     DESTINATION NAME BLANK?\n         BE    STGE0350              YES\n         MVC   DXDDSN,REQDDSNM       SET NAME TO DESTINATION NAME\nSTGE0350 DS    0H\n         ICM   R3,15,COMMRSTR        FIRST RESTORE BLOCK\n         USING RSTRBLOK,R3           DEFINE BASE\n         BZ    STGE0370              VOLUME NOT DEFINED\nSTGE0360 DS    0H\n         CLC   DEFAULT,RSTRDSN       'DEFAULT' RESTORE ENTRY?\n         BE    STGE0380              YES.. MATCHES EVERYTHING\n         LH    R1,RSTRDSNL           DATA SET NAME PREFIX LENGTH\n         BCTR  R1,0                  MINUS 1\n         EX    R1,RSTRCLC            PREFIX MATCH?\n         BE    STGE0380              YES\n         ICM   R3,15,RSTRNEXT        NEXT RESTORE BLOCK\n         BNZ   STGE0360              SEARCH ALL OF THEM\nSTGE0370 DS    0H\n         MVI   REQSTAT,$REQNRVL      NO RESTORE VOLUME DEFINED\n         MVC   PRTMSGID(MSG03L),MSG03 SET MESSAGE\n         MVC   PRTMSGID+(MSG03NDE-MSG03)(L'MSG03NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG03NBR-MSG03)(L'MSG03NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG03DSN-MSG03)(L'MSG03DSN),DXDDSN\n         BAL   R6,PRT0000            PRINT MESSAGE\n         B     STGE0580              UPDATE MASTER FILE\nSTGE0380 DS    0H\n         ITRACE ID=RSTRFND,          RESTORE BLOCK LOCATED             +\n               RDATA1=R3\n         ST    R3,DXDRSTR            SAVE RESTORE BLOCK'S ADDRESS\n         CLI   REQREPL,C'Y'          REPLACE?\n         BNE   STGE0390              NO\n         MVC   DAIRDSN,REQODSNM      ASSUME ORIGINAL NAME\n         CLC   REQDDSNM,COMMBLKS     NEW DATA SET GIVEN?\n         BE    STGE0385              NO\n         MVC   DAIRDSN,REQDDSNM      CHANGE TO NEW NAME\nSTGE0385 DS    0H\n         FXCALL DAIR,DELETE          DELETE THE DATA SET (IF IT EXISTS)\nSTGE0390 DS    0H\n         MVI   DAIRCMD,$DAIRALO      SET COMMAND (ALLOCATE)\n         MVI   DAIRTYPE,$DAIRDSN     AN EXISTING DATA SET\n         MVC   DAIRDSN,REQWDSNM      SET DATA SET NAME\n         MVC   DXDWORK,STAGING       SET DATA SET TYPE\n         BAL   R6,DAIR0000           LINK TO DAIR\n         OC    DAIRR15,DAIRR15       STAGING DATA SET ALLOCATED?\n         BNZ   ERR0130               NO.. SERIOUS NEWS\n         MVC   DXDSTAGE,DAIRDDN      SAVE DDNAME\n         CLI   REQUTIL,$REQCOPY      IEBCOPY?\n         BNE   STGE0410              NO\n         MVI   DAIRCMD,$DAIRALO      SET COMMAND (ALLOCATE)\n         MVI   DAIRTYPE,$DAIRDSN     AN EXISTING DATA SET\n         MVC   DAIRDSN,REQODSNM      SET OUTPUT DATA SET NAME\n         CLC   REQDDSNM,COMMBLKS     DESTINATION DSN BLANK?\n         BE    STGE0400              YES\n         MVC   DAIRDSN,REQDDSNM      CHANGE TO NEW NAME\nSTGE0400 DS    0H\n         MVC   DXDWORK,PDS           SET DATA SET TYPE\n         BAL   R6,DAIR0000           LINK TO DAIR\n         OC    DAIRR15,DAIRR15       OUTPUT PDS ALLOCATED?\n         BNZ   STGE0500              NO\n         MVC   DXDPDS,DAIRDDN        SAVE DDNAME\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Dump processing joins restore processing at this point       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTGE0410 DS    0H\n         ITRACE ID=ALOCIN            ALLOCATING SYSIN DATA SET\n         MVI   DAIRCMD,$DAIRALO      SET COMMAND (ALLOCATE)\n         CLI   REQUTIL,$REQCOPY      USING IEBCOPY?\n         BE    STGE0420              YES\n         MVI   DAIRTYPE,$DAIRDSS     SET TYPE (DF/DSS SYSIN/SYSPRINT)\n         B     STGE0430\nSTGE0420 DS    0H\n         MVI   DAIRTYPE,$DAIRCPY     SET TYPE (IEBCOPY SYSIN/SYSPRINT)\n         MVC   DAIRDDN,SYSIN         SET DD NAME TO 'SYSIN'\nSTGE0430 DS    0H\n         BAL   R6,DAIR0000           LINK TO DAIR TO ALLOCATE SYSIN\n         OC    DAIRR15,DAIRR15       SYSIN ALLOCATED?\n         BNZ   STGE0510              NO\n         MVC   DXDINDD,DAIRDDN       COPY SYSIN DDNAME\n         MVC   REQIDSNM,DAIRDSN      COPY SYSIN DATA SET NAME\n         ITRACE ID=ALOCPRT           ALLOCATING DF/DSS SYSPRINT DATASET\n         CLI   REQUTIL,$REQCOPY      USING IEBCOPY?\n         BNE   STGE0440              NO\n         MVC   DAIRDDN,SYSPRINT      SET DDNAME\nSTGE0440 DS    0H\n         BAL   R6,DAIR0000           LINK TO DAIR TO ALLOCATE SYSPRINT\n         OC    DAIRR15,DAIRR15       SYSPRINT ALLOCATED?\n         BNZ   STGE0530              NO\nSTGE0450 DS    0H\n         MVC   DXDPRTDD,DAIRDDN      COPY SYSPRINT DDNAME\n         MVC   REQSDSNM,DAIRDSN      COPY SYSPRINT DATA SET NAME\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        For a DUMP operation, the STAGING, SYSIN, and SYSPRINT       *\n*        data sets have been allocated. For a RESTORE operation,      *\n*        the STAGING data set was allocated by FXSVTAM during the     *\n*        receiving process, and the SYSIN and SYSPRINT have just      *\n*        been allocated.                                              *\n*                                                                     *\n*        Now allocate a DRREQ block, initialize it, and set the       *\n*        address in the common area.                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         GETMAIN RU,                 ACQUIRE A DRREQ                   +\n               LV=DRREQL             .. LENGTH OF BLOCK\n         ITRACE ID=NEWDRREQ,         NEW DUMP/RESTORE REQUEST BLOCK    +\n               RDATA1=R1             .. TRACE ITS ADDRESS\n         LR    R4,R1                 SET BASE\n         XC    DRREQ(DRRECD-DRREQ),DRREQ\n         MVC   DREYE,DRREQID         SET EYECATCHER\n         MVC   DRINDD,DXDINDD        SET SYSIN DD\n         MVC   DRPRTDD,DXDPRTDD      SET SYSPRINT DD\n         MVC   DRSTAGE,DXDSTAGE      SET STAGING DATA SET DD\n         MVC   DRPDS,DXDPDS          SET PDS DATA SET DD\n         MVC   DRRSTR,DXDRSTR        SET RESTORE BLOCK'S ADDRESS\n         LA    R0,DRRECD             DATA ADDRESS IN DSS BLOCK\n         LA    R1,REQBLOKL           DATA LENGTH\n         LA    R14,REQBLOK           MASTER FILE RECORD ADDRESS\n         LR    R15,R1                COPY LENGTH\n         MVCL  R0,R14                COPY RECORD TO DSS BLOCK\n         CLI   REQUTIL,$REQCOPY      IEBCOPY?\n         BE    STGE0460              YES\n         ST    R4,DSSREQ             SET ADDRESS IN COMMON AREA\n         OI    DXDFLAG,$DSS          DF/DSS IS BUSY\n         LA    R1,DSSWORK            DF/DSS SUBTASK'S ECB\n         ITRACE ID=POSTDSS,          WAKING UP DF/DSS SUBTASK          +\n               RDATA1=R4             .. REQUEST BLOCK'S ADDRESS\n         POST  (1)                   WAKE UP DF/DSS SUBTASK\n         B     STGE0470\nSTGE0460 DS    0H\n         ST    R4,COPYREQ            SET ADDRESS IN COMMON AREA\n         OI    DXDFLAG,$COPY         IEBCOPY IS BUSY\n         LA    R1,COPYWORK           IEBCOPY SUBTASK'S ECB\n         ITRACE ID=POSTCOPY,         WAKING UP IEBCOPY SUBTASK         +\n               RDATA1=R4             .. REQUEST BLOCK ADDRESS\n         POST  (1)                   WAKE UP IEBCOPY SUBTASK\nSTGE0470 DS    0H\n         CLI   REQSTAT,$REQINIT      REQUEST IN INITIAL STATUS?\n         BE    STGE0560              YES\n         CLI   REQSTAT,$REQRCVD      RECEIVED AND READY FOR RESTORE?\n         BE    STGE0570              YES\n         ABEND $U0036,DUMP,,USER     SHOULDN'T HAPPEN\nSTGE0480 DS    0H\n         MVI   REQSTAT,$REQSTGD      ERROR ALLOCATING STAGE (DUMP)\n         B     STGE0550\nSTGE0490 DS    0H\n         MVI   REQSTAT,$REQPDSD      ERROR SOURCE PDS (DUMP)\n         B     STGE0550\nSTGE0500 DS    0H\n         MVI   REQSTAT,$REQPDSR      ERROR OUTPUT PDS (RESTORE)\n         B     STGE0550\nSTGE0510 DS    0H\n         MVC   DXDWORK,SYSIN         SET DATA SET TYPE\n         CLI   REQSTAT,$REQRCVD      RECEIVED AND READY FOR RESTORE?\n         BE    STGE0520              YES\n         MVI   REQSTAT,$REQIND       ERROR ALLOCATING SYSIN (DUMP)\n         B     STGE0550\nSTGE0520 DS    0H\n         MVI   REQSTAT,$REQINR       ERROR ALLOCATING SYSIN (RESTORE)\n         B     STGE0550\nSTGE0530 DS    0H\n         MVC   DXDWORK,SYSPRINT      SET DATA SET TYPE\n         CLI   REQSTAT,$REQRCVD      RECEIVED AND READY FOR RESTORE?\n         BE    STGE0540              YES\n         MVI   REQSTAT,$REQPRTD      ERROR ALLOCATING SYSPRINT (DUMP)\n         B     STGE0550\nSTGE0540 DS    0H\n         MVI   REQSTAT,$REQPRTR      ERROR ALLOCATING SYSOUT (RESTORE)\nSTGE0550 DS    0H\n         MVC   PRTMSGID(MSG04L),MSG04\n         MVC   PRTMSGID+(MSG04DD-MSG04)(L'MSG04DD),DXDWORK\n         UNPK  PRTMSGID+(MSG04R15-MSG04)(5),DAIRR15(3)\n         MVZ   PRTMSGID+(MSG04R15-MSG04)(4),HEX0000\n         TR    PRTMSGID+(MSG04R15-MSG04)(4),HEXCHAR\n         MVI   PRTMSGID+(MSG04R15-MSG04)+4,C' '\n         UNPK  PRTMSGID+(MSG04ERR-MSG04)(5),DAIRERR(3)\n         MVZ   PRTMSGID+(MSG04ERR-MSG04)(4),HEX0000\n         TR    PRTMSGID+(MSG04ERR-MSG04)(4),HEXCHAR\n         MVI   PRTMSGID+(MSG04ERR-MSG04)+4,C' '\n         UNPK  PRTMSGID+(MSG04INF-MSG04)(5),DAIRINFO(3)\n         MVZ   PRTMSGID+(MSG04INF-MSG04)(4),HEX0000\n         TR    PRTMSGID+(MSG04INF-MSG04)(4),HEXCHAR\n         MVI   PRTMSGID+(MSG04INF-MSG04)+4,C' '\n         BAL   R6,PRT0000            PRINT MESSAGE\n         B     STGE0580\nSTGE0560 DS    0H\n         MVC   REQFSIZE,DXDDSNSZ     DATA SET'S SIZE\n         MVC   PRTMSGID(MSG05L),MSG05 COPY MESSAGE\n         MVC   PRTMSGID+(MSG05NDE-MSG05)(L'MSG05NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG05NBR-MSG05)(L'MSG05NBR),DXDDWORD+4\n         BAL   R6,PRT0000            PRINT MESSAGE\n         MVI   REQSTAT,$REQDUMP      DATA SET IS BEING DUMPED\n         B     STGE0580\nSTGE0570 DS    0H\n         MVC   PRTMSGID(MSG06L),MSG06 COPY MESSAGE\n         MVC   PRTMSGID+(MSG06NDE-MSG06)(L'MSG06NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG06NBR-MSG06)(L'MSG06NBR),DXDDWORD+4\n         BAL   R6,PRT0000            PRINT MESSAGE\n         MVI   REQSTAT,$REQRSTR      DATA SET IS BEING RESTORED\nSTGE0580 DS    0H\n         MVI   MSTRCMD,$MSTRWRT      'WRITE' A RECORD\n         BAL   R6,MSTR0000           WRITE MASTER FILE RECORD\n         TM    DXDFLAG,$DSS+$COPY    BOTH UTILITIES BUSY?\n         BO    EXIT0040              YES.. CAN NOT DO ANY MORE\n         B     STGE0100              READ NEXT RECORD\n*---------------------------------------------------------------------*\n*                                                                     *\n*   Release stage data set, sysin, and sysprint data sets.            *\n*   If the utility used was IEBCOPY, then the input or output PDS     *\n*   will also need to be released.                                    *\n*                                                                     *\n*   If the operation was a 'DUMP' for a PDS member and the member     *\n*   was not found, the stage data set, sysin, and sysprint data sets  *\n*   will be DELETED (not just released) because no data was written   *\n*   to any of them.  This would cause an abend in the inquiry         *\n*   programs if the user selected the 'O' option to view the sysout.  *\n*   Also since no data is in these data sets, there is no need to     *\n*   tie up the disk space.                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\nFREE0000 DS    0H\n         PACK  COMMDWRD,DRRECD+(REQREC#-REQBLOK)(L'REQREC#)\n         CVB   R1,COMMDWRD           CONVERT TO BINARY\n         BCTR  R1,0                  RELATIVE TO ZERO\n         STH   R1,DXDREC#            SET RECORD NUMBER\n         MVI   MSTRCMD,$MSTRRD       'READ' A RECORD\n         BAL   R6,MSTR0000           READ MASTER FILE RECORD\nFREE0010 DS    0H\n         MVI   DAIRCMD,$DAIRREL      SET COMMAND (RELEASE)\n         MVC   DAIRDDN,DRINDD        SET DDNAME\n         MVC   DAIRDSN,REQIDSNM      SET DATA SET NAME\n         MVC   DXDWORK,SYSIN         TYPE BEING RELEASED\n         BAL   R6,DAIR0000           LINK TO DAIR TO RELEASE SYSIN\n         OC    DAIRR15,DAIRR15       SUCCESSFUL?\n         BNZ   ERR0070               NO\n         TM    DRSTAT,$DRMEMX        MEMBER NOT FOUND?\n         BNO   FREE0020              NO\n         MVI   DAIRCMD,$DAIRDEL      SET COMMAND (DELETE)\n         BAL   R6,DAIR0000           LINK TO DAIR TO DELETE SYSIN\n         OC    DAIRR15,DAIRR15       SUCCESSFUL?\n         BNZ   ERR0120               NO\nFREE0020 DS    0H\n         MVI   DAIRCMD,$DAIRREL      SET COMMAND (RELEASE)\n         MVC   DAIRDDN,DRPRTDD       SET DDNAME\n         MVC   DAIRDSN,REQSDSNM      SET DATA SET NAME\n         MVC   DXDWORK,SYSPRINT      TYPE BEING RELEASED\n         BAL   R6,DAIR0000           LINK TO DAIR TO RELEASE SYSPRINT\n         OC    DAIRR15,DAIRR15       SUCCESSFUL?\n         BNZ   ERR0070               NO\n         TM    DRSTAT,$DRMEMX        MEMBER NOT FOUND?\n         BNO   FREE0030              NO\n         MVI   DAIRCMD,$DAIRDEL      SET COMMAND (DELETE)\n         BAL   R6,DAIR0000           LINK TO DAIR TO DELETE SYSPRINT\n         OC    DAIRR15,DAIRR15       SUCCESSFUL?\n         BNZ   ERR0120               NO\nFREE0030 DS    0H\n         MVI   DAIRCMD,$DAIRREL      SET COMMAND (RELEASE)\n         MVC   DAIRDDN,DRSTAGE       SET DDNAME\n         MVC   DAIRDSN,REQWDSNM      SET DATA SET NAME\n         MVC   DXDWORK,STAGING       TYPE BEING RELEASED\n         BAL   R6,DAIR0000           LINK TO DAIR TO RELEASE STAGE\n         OC    DAIRR15,DAIRR15       SUCCESSFUL?\n         BNZ   ERR0070               NO\n         TM    DRSTAT,$DRMEMX        MEMBER NOT FOUND?\n         BNO   FREE0040              NO\n         MVI   DAIRCMD,$DAIRDEL      SET COMMAND (DELETE)\n         BAL   R6,DAIR0000           LINK TO DAIR TO DELETE STAGE\n         OC    DAIRR15,DAIRR15       SUCCESSFUL?\n         BNZ   ERR0120               NO\nFREE0040 DS    0H\n         CLI   REQUTIL,$REQCOPY      IEBCOPY?\n         BNE   FREE0050              NO\n         MVI   DAIRCMD,$DAIRREL      SET COMMAND (RELEASE)\n         MVC   DAIRDDN,DRPDS         PDS DD NAME\n         MVC   DXDWORK,PDS           TYPE BEING RELEASED\n         BAL   R6,DAIR0000           LINK TO DAIR TO RELEASE PDS\n         OC    DAIRR15,DAIRR15       SUCCESSFUL?\n         BNZ   ERR0070               NO\nFREE0050 DS    0H\n         CLI   REQSTAT,$REQRSTR      WAS PROCESS A 'RESTORE'?\n         BE    FREE0090              YES\n         CLI   DRR15,X'FF'           DUMP ABEND?\n         BE    FREE0060\n         TM    DRSTAT,$DRMEMX        PDS MEMBER NOT FOUND?\n         BO    FREE0080              RIGHT\n         CLC   DRR15,H4              DUMP SUCCESSFUL?\n         BH    FREE0070              NO\n         MVI   REQSTAT,$REQXRDY      READY FOR TRANSMITTING\n         MVC   PRTMSGID(MSG07L),MSG07 DUMP SUCCESSFUL\n         MVC   PRTMSGID+(MSG07NDE-MSG07)(L'MSG07NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG07NBR-MSG07)(L'MSG07NBR),DXDDWORD+4\n         B     FREE0120\nFREE0060 DS    0H\n         MVI   REQSTAT,$REQMBIG      MEMBER SIZE > MEM SIZE PARAMETER\n         MVC   PRTMSGID(MSG08L),MSG08 DUMP SUCCESSFUL\n         MVC   PRTMSGID+(MSG08NDE-MSG08)(L'MSG08NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG08NBR-MSG08)(L'MSG08NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG08DSN-MSG08)(L'MSG08DSN),REQODSNM\n         MVC   PRTMSGID+(MSG08MEM-MSG08)(L'MSG08MEM),REQOMEM\n         B     FREE0120\nFREE0070 DS    0H\n         MVI   REQSTAT,$REQDERR      ERROR DURING DUMP\n         MVC   PRTMSGID(MSG09L),MSG09 DUMP FAILED\n         MVC   PRTMSGID+(MSG09NDE-MSG09)(L'MSG09NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG09NBR-MSG09)(L'MSG09NBR),DXDDWORD+4\n         B     FREE0120\nFREE0080 DS    0H\n         MVI   REQSTAT,$REQMEMX      MEMBER NOT FOUND\n         MVC   PRTMSGID(MSG10L),MSG10\n         MVC   PRTMSGID+(MSG10NDE-MSG10)(L'MSG10NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG10NBR-MSG10)(L'MSG10NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG10DSN-MSG10)(L'MSG10DSN),REQODSNM\n         MVC   PRTMSGID+(MSG10MEM-MSG10)(L'MSG10MEM),REQOMEM\n         B     FREE0120\nFREE0090 DS    0H\n         CLI   DRR15,X'FF'           RESTORE ABEND?\n         BE    FREE0100              YES\n         CLC   DRR15,H4              RESTORE SUCCESSFUL?\n         BH    FREE0110              NO\n         MVI   REQSTAT,$REQRSTC      RESTORE COMPLETE\n         TIME  DEC\n         STCM  R1,15,REQCDATE        SET DATE COMPLETED\n         STCM  R0,15,REQCTIME        SET TIME COMPLETED\n         MVC   PRTMSGID(MSG11L),MSG11 RESTORE SUCCESSFUL\n         MVC   PRTMSGID+(MSG11NDE-MSG11)(L'MSG11NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG11NBR-MSG11)(L'MSG11NBR),DXDDWORD+4\n         B     FREE0120\nFREE0100 DS    0H\n         MVI   REQSTAT,$REQPFUL      OUTPUT PDS IS FULL\n         MVC   PRTMSGID(MSG12L),MSG12 RESTORE SUCCESSFUL\n         MVC   PRTMSGID+(MSG12NDE-MSG12)(L'MSG12NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG12NBR-MSG12)(L'MSG12NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG12DSN-MSG12)(L'MSG12DSN),REQDDSNM\n         MVC   PRTMSGID+(MSG12MEM-MSG12)(L'MSG12MEM),REQOMEM\n         B     FREE0120\nFREE0110 DS    0H\n         MVI   REQSTAT,$REQRERR      ERROR DURING RESTORE\n         MVC   PRTMSGID(MSG13L),MSG13 RESTORE FAILED\n         MVC   PRTMSGID+(MSG13NDE-MSG13)(L'MSG13NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG13NBR-MSG13)(L'MSG13NBR),DXDDWORD+4\nFREE0120 DS    0H\n         BAL   R6,PRT0000            PRINT MESSAGE\n         MVI   MSTRCMD,$MSTRWRT      'WRITE' A RECORD\n         BAL   R6,MSTR0000           LINK TO MASTER FILE I/O\n         BR    R5                    RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Punch DF/DSS or IEBCOPY control statements                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPUNCH000 DS    0H\n         LA    R0,IO24                DATA TO BE PUNCHED\n         ST    R0,IOA24               SET I/O AREA ADDRESS\n         FX24  $PUT                   CALL PUT\n         MVI   IO24,C' '              CLEAR FIRST BYTE\n         MVC   IO24+1(L'IO24-1),IO24  CLEAR I/O AREA\n         BR    R6\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Link to FXSDAIR                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDAIR0000 DS    0H\n         ITRACE ID=CALLDAIR,         CALLING DAIR                      +\n               DATA1=DAIRREQ\n         FXCALL FXSDAIR              LINK TO FXSDAIR\n         BR    R6                    RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Master file I/O                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSTR0000 DS    0H\n         ITRACE ID=CALLMSTR,         TRACE CALLS TO MASTER FILE        +\n               DATA1=DXDREC#,        .. ADDRESS OF REQUEST BLOCK       +\n               DATA2=MSTRCMD         .. COMMAND\n         FXCALL FXSMSTR,,DXDREC#     LINK TO MASTER FILE I/O\n         LA    R7,MSTRRECD           DATA'S ADDRESS\n         BR    R6                    RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Printing                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         ITRACE ID=PRINT\n         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE\n         BR    R6                    RETURN\n* ------------------------------------------------------------------- *\n*        Error routines                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=NODSN             VOLSER WITH NO KNOWN DATA SET NAME\n         ABEND $U0012,DUMP,,USER     DON'T CONTINUE FURTHER\nERR0020  DS    0H\n         ITRACE ID=BADDSORG          DATA SET ORG IS NOT SUPPORTED\n         MVI   REQSTAT,$REQXORG      SET STATUS\n         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)\n         BAL   R6,MSTR0000           UPDATE MASTER RECORD\n         MVC   PRTMSGID(MSG14L),MSG14\n         MVC   PRTMSGID+(MSG14NDE-MSG14)(L'MSG14NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG14NBR-MSG14)(L'MSG14NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG14DSN-MSG14)(L'MSG14DSN),DXDDSN\n         BAL   R6,PRT0000            PRINT MESSAGE\n         B     STGE0100              READ NEXT MASTER FILE RECORD\nERR0030  DS    0H\n         ITRACE ID=DSNMINUS          DSN NAME LENGTH IS ZERO OR MINUS\n         MVI   REQSTAT,$REQDSN0      SET STATUS\n         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)\n         BAL   R6,MSTR0000           UPDATE MASTER RECORD\n         MVC   PRTMSGID(MSG15L),MSG15\n         MVC   PRTMSGID+(MSG15NDE-MSG15)(L'MSG15NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG15NBR-MSG15)(L'MSG15NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG15DSN-MSG15)(L'MSG15DSN),REQODSNM\n         BAL   R6,PRT0000            PRINT MESSAGE\n         B     STGE0100              READ NEXT MASTER FILE RECORD\nERR0040  DS    0H\n         ITRACE ID=DSNOTFND          DATA SET NOT FOUND (NOT CATALOGED)\n         FX24  $CLOSE                CALL CLOSE\n         MVI   REQSTAT,$REQDSNF      SET STATUS\n         MVI   MSTRCMD,$MSTRWRT      SET COMMND (WRITE)\n         BAL   R6,MSTR0000           UPDATE MASTER RECORD\n         MVC   PRTMSGID(MSG16L),MSG16\n         MVC   PRTMSGID+(MSG16NDE-MSG16)(L'MSG16NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG16NBR-MSG16)(L'MSG16NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG16DSN-MSG16)(L'MSG16DSN),REQODSNM\n         BAL   R6,PRT0000            PRINT MESSAGE\n         B     STGE0100              READ NEXT MASTER FILE RECORD\nERR0050  DS    0H\n         ITRACE ID=DSNSZ0            DATA SET SIZE IS ZERO..\n         ABEND $U0060,DUMP,,USER     TIME TO FIND OUT WHY\nERR0060  DS    0H\n         ITRACE ID=TOOBIG            DATA SET SIZE EXCEEDS MAX ALLOWED\n         MVI   REQSTAT,$REQBIG       SET STATUS\n         MVI   MSTRCMD,$MSTRWRT      SET COMMND (WRITE)\n         BAL   R6,MSTR0000           UPDATE MASTER RECORD\n         MVC   PRTMSGID(MSG17L),MSG17\n         MVC   PRTMSGID+(MSG17NDE-MSG17)(L'MSG17NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG17NBR-MSG17)(L'MSG17NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG17DSN-MSG17)(L'MSG17DSN),REQODSNM\n         BAL   R6,PRT0000            PRINT MESSAGE\n         B     STGE0100              READ NEXT MASTER FILE RECORD\nERR0070  DS    0H\n         ITRACE ID=FREEFAIL          UN-ALLOCATE FAILED\n         MVC   PRTMSGID(MSG18L),MSG18\n         MVC   PRTMSGID+(MSG18DD-MSG18)(L'MSG18DD),DXDWORK\n         UNPK  PRTMSGID+(MSG18R15-MSG18)(5),DAIRR15(3)\n         MVZ   PRTMSGID+(MSG18R15-MSG18)(4),HEX0000\n         TR    PRTMSGID+(MSG18R15-MSG18)(4),HEXCHAR\n         MVI   PRTMSGID+(MSG18R15-MSG18)+4,C' '\n         UNPK  PRTMSGID+(MSG18ERR-MSG18)(5),DAIRERR(3)\n         MVZ   PRTMSGID+(MSG18ERR-MSG18)(4),HEX0000\n         TR    PRTMSGID+(MSG18ERR-MSG18)(4),HEXCHAR\n         MVI   PRTMSGID+(MSG18ERR-MSG18)+4,C' '\n         UNPK  PRTMSGID+(MSG18INF-MSG18)(5),DAIRINFO(3)\n         MVZ   PRTMSGID+(MSG18INF-MSG18)(4),HEX0000\n         TR    PRTMSGID+(MSG18INF-MSG18)(4),HEXCHAR\n         MVI   PRTMSGID+(MSG18INF-MSG18)+4,C' '\n         BAL   R6,PRT0000            PRINT MESSAGE\n         ABEND $U0094,DUMP,,USER\nERR0080  DS    0H\n         ITRACE ID=NOREQX37          IEBCOPY X37 WITH NO DRREQ\n         ABEND $U0098,DUMP,,USER\nERR0090  DS    0H\n         ITRACE ID=ATTCHFAIL         IEBCOPY ATTACH FAILED\n         ABEND $U0099,DUMP,,USER\nERR0100  DS    0H\n         ITRACE ID=NOTPDS            DATA SET NOT A PDS\n         MVI   REQSTAT,$REQNPDS      SET STATUS\n         MVI   MSTRCMD,$MSTRWRT      SET COMMND (WRITE)\n         BAL   R6,MSTR0000           UPDATE MASTER RECORD\n         MVC   PRTMSGID(MSG19L),MSG19\n         MVC   PRTMSGID+(MSG19NDE-MSG19)(L'MSG19NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG19NBR-MSG19)(L'MSG19NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG19DSN-MSG19)(L'MSG19DSN),REQODSNM\n         MVC   PRTMSGID+(MSG19MEM-MSG19)(L'MSG19MEM),REQOMEM\n         BAL   R6,PRT0000            PRINT MESSAGE\n         B     STGE0100              READ NEXT MASTER FILE RECORD\nERR0110  DS    0H\n         ITRACE ID=VOLZERO           VOLSER NOT FOUND\n         ABEND $U0102,DUMP,,USER\nERR0120  DS    0H\n         ITRACE ID=DELFAIL           DELETE FAILED\n         MVC   PRTMSGID(MSG20L),MSG20\n         MVC   PRTMSGID+(MSG20DD-MSG20)(L'MSG20DD),DXDWORK\n         UNPK  PRTMSGID+(MSG20R15-MSG20)(5),DAIRR15(3)\n         MVZ   PRTMSGID+(MSG20R15-MSG20)(4),HEX0000\n         TR    PRTMSGID+(MSG20R15-MSG20)(4),HEXCHAR\n         MVI   PRTMSGID+(MSG20R15-MSG20)+4,C' '\n         UNPK  PRTMSGID+(MSG20ERR-MSG20)(5),DAIRERR(3)\n         MVZ   PRTMSGID+(MSG20ERR-MSG20)(4),HEX0000\n         TR    PRTMSGID+(MSG20ERR-MSG20)(4),HEXCHAR\n         MVI   PRTMSGID+(MSG20ERR-MSG20)+4,C' '\n         UNPK  PRTMSGID+(MSG20INF-MSG20)(5),DAIRINFO(3)\n         MVZ   PRTMSGID+(MSG20INF-MSG20)(4),HEX0000\n         TR    PRTMSGID+(MSG20INF-MSG20)(4),HEXCHAR\n         MVI   PRTMSGID+(MSG20INF-MSG20)+4,C' '\n         BAL   R6,PRT0000            PRINT MESSAGE\n         ABEND $U0103,DUMP,,USER\nERR0130  DS    0H\n         MVC   PRTMSGID(MSG21L),MSG21\n         MVC   PRTMSGID+(MSG21DD-MSG21)(L'MSG21DD),DXDWORK\n         UNPK  PRTMSGID+(MSG21R15-MSG21)(5),DAIRR15(3)\n         MVZ   PRTMSGID+(MSG21R15-MSG21)(4),HEX0000\n         TR    PRTMSGID+(MSG21R15-MSG21)(4),HEXCHAR\n         MVI   PRTMSGID+(MSG21R15-MSG21)+4,C' '\n         UNPK  PRTMSGID+(MSG21ERR-MSG21)(5),DAIRERR(3)\n         MVZ   PRTMSGID+(MSG21ERR-MSG21)(4),HEX0000\n         TR    PRTMSGID+(MSG21ERR-MSG21)(4),HEXCHAR\n         MVI   PRTMSGID+(MSG21ERR-MSG21)+4,C' '\n         UNPK  PRTMSGID+(MSG21INF-MSG21)(5),DAIRINFO(3)\n         MVZ   PRTMSGID+(MSG21INF-MSG21)(4),HEX0000\n         TR    PRTMSGID+(MSG21INF-MSG21)(4),HEXCHAR\n         MVI   PRTMSGID+(MSG21INF-MSG21)+4,C' '\n         ABEND $U0104,DUMP,,USER\nERR0140  DS    0H\n         ITRACE ID=NODEV             VOLSER NOT ON ANY DEVICE\n         CLC   MIGRAT,0(R1)          MIGRATED?\n         BE    ERR0150               YES\n         MVI   REQSTAT,$REQNDEV      SET STATUS\n         MVI   MSTRCMD,$MSTRWRT      SET COMMND (WRITE)\n         BAL   R6,MSTR0000           UPDATE MASTER RECORD\n         MVC   PRTMSGID(MSG22L),MSG22\n         MVC   PRTMSGID+(MSG22NDE-MSG22)(L'MSG22NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG22NBR-MSG22)(L'MSG22NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG22DSN-MSG22)(L'MSG22DSN),REQODSNM\n         BAL   R6,PRT0000            PRINT MESSAGE\n         B     STGE0100              READ NEXT MASTER FILE RECORD\nERR0150  DS    0H\n         ITRACE ID=MIGRAT            DATA IS MIGRATED\n         MVI   REQSTAT,$REQMIG       SET STATUS\n         MVI   MSTRCMD,$MSTRWRT      SET COMMND (WRITE)\n         BAL   R6,MSTR0000           UPDATE MASTER RECORD\n         MVC   PRTMSGID(MSG23L),MSG23\n         MVC   PRTMSGID+(MSG23NDE-MSG23)(L'MSG23NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG23NBR-MSG23)(L'MSG23NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG23DSN-MSG23)(L'MSG23DSN),REQODSNM\n         BAL   R6,PRT0000            PRINT MESSAGE\n         B     STGE0100              READ NEXT MASTER FILE RECORD\nERR0160  DS    0H\n         ITRACE ID=NOTDASD           DATA NOT ON A DASD DEVICE\n         MVI   REQSTAT,$REQNDA       SET STATUS\n         MVI   MSTRCMD,$MSTRWRT      SET COMMND (WRITE)\n         BAL   R6,MSTR0000           UPDATE MASTER RECORD\n         MVC   PRTMSGID(MSG24L),MSG24\n         MVC   PRTMSGID+(MSG24NDE-MSG24)(L'MSG24NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG24NBR-MSG24)(L'MSG24NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG24DSN-MSG24)(L'MSG24DSN),REQODSNM\n         BAL   R6,PRT0000            PRINT MESSAGE\n         B     STGE0100              READ NEXT MASTER FILE RECORD\nERR0170  DS    0H\n         ITRACE ID=OFFLINE           VOLUME IS OFFLINE\n         MVI   REQSTAT,$REQOFFL      SET STATUS\n         MVI   MSTRCMD,$MSTRWRT      SET COMMND (WRITE)\n         BAL   R6,MSTR0000           UPDATE MASTER RECORD\n         MVC   PRTMSGID(MSG25L),MSG25\n         MVC   PRTMSGID+(MSG25NDE-MSG25)(L'MSG25NDE),REQENODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         ED    PRTMSGID+(MSG25NBR-MSG25)(L'MSG25NBR),DXDDWORD+4\n         MVC   PRTMSGID+(MSG25DSN-MSG25)(L'MSG25DSN),REQODSNM\n         BAL   R6,PRT0000            PRINT MESSAGE\n         B     STGE0100              READ NEXT MASTER FILE RECORD\n* ------------------------------------------------------------------- *\n*        Exit                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         OC    DXDIDCEP,DXDIDCEP     IDCAMS LOADED?\n         BZ    EXIT0010              NO\n         ITRACE ID=DELIDCAMS\n         DELETE EP=IDCAMS            DELETE IDCAMS\n         XC    DXDIDCEP,DXDIDCEP     CLEAR ADDRESS\nEXIT0010 DS    0H\n         ICM   R1,15,DXDIDCI         IDCAMS SYSIN DCB ADDRESS\n         BZ    EXIT0020              NO ADDRESS\n         FREEMAIN RU,A=(1),LV=IDCIL  FREEMAIN DCB\nEXIT0020 DS    0H\n         ICM   R1,15,DXDIDCP         IDCAMS SYSPRINT DCB ADDRESS\n         BZ    EXIT0030              NO ADDRESS\n         FREEMAIN RU,A=(1),LV=IDCPL  FREEMAIN DCB\nEXIT0030 DS    0H\n         ICM   R8,15,DXD24           24-BIT PARM AREA ADDRESS\n         BZ    EXIT0040              NO ADDRESS\n         FREEMAIN RU,A=(R8),LV=FX24L\nEXIT0040 DS    0H\n         ITRACE ID=EXIT              EXITING PRINT MODULE\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\nRSTRCLC  CLC   RSTRDSN(0),DXDDSN     PREFIX MATCH?\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Constants                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nAIDCII   DC    A(IDCII)              SYSIN DCB ADDRESS\nAIDCPI   DC    A(IDCPI)              SYSPRINT DCB ADDRESS\nIDCPRM   DS    0A\n         DC    A(H0)\n         DC    A(DDNLIST+X'80000000')\nH0       DC    H'0'\nDDNLIST  DC    AL2(DDNLISTL)\n         DC    XL8'00000000'\n         DC    XL8'00000000'\n         DC    XL8'00000000'\n         DC    XL8'00000000'\n         DC    CL8'IDCI'\n         DC    CL8'IDCP'\nDDNLISTL EQU   *-DDNLIST\nIDCPRML  EQU   *-IDCPRM\nH2       DC    H'2'\nH4       DC    H'4'\nH5       DC    H'5'\nH21      DC    H'21'\nH44      DC    H'44'\nATTCHI   ATTACH EP=FXSCOPY,           ATTACH LIST FORM                 +\n               ECB=*,                 .. TERMINATION ECB'S ADDRESS     +\n               PURGE=QUIESCE,         .. FINISH UP I/O IN PROGRESS     +\n               SF=L                   .. LIST FORM\nATTCHL   EQU   *-ATTCHI\nHEX0000  DC    8X'00'\nHEXCHAR  DC    C'0123456789ABCDEF'\nIDC3012I DC    C'IDC3012I'\nNONVSAM  DC    C'NONVSAM -'\nDATA     DC    C'DATA -'\nDEFAULT  DC    C'DEFAULT'\nINDEX    DC    C'INDEX -'\nVOLSER   DC    C'VOLSER-'\nRESVOL   DC    CL6'******'\nDRREQID  DC    CL8'DRREQ'\nMIGRAT   DC    CL6'MIGRAT'\nPDS      DC    CL8'PDS'\nSTAGING  DC    CL8'STAGING'\nSYSIN    DC    CL8'SYSIN'\nSYSPRINT DC    CL8'SYSPRINT'\nSUMMARY  DC    C'THE NUMBER OF ENTRIES PROCESSED WAS:'\nLISTC1   DC    C' LISTCAT -'\nLISTC1L  EQU   *-LISTC1\nLISTC2   DC    C'    ENTRIES ( '\nLISTC2NM DC    CL44' '\n         DC    C' ) -'\nLISTC2L  EQU   *-LISTC2\nLISTC3   DC    C'    VOLUMES'\nLISTC3L  EQU   *-LISTC3\nMSG01    DS    0C\n         DC    CL11'FXSSTGE01I'\n         DC    C'IEBCOPY ABENDED X37 ON REQUEST '\nMSG01NDE DC    CL8' '\n         DC    C' '\nMSG01NBR DC    X'4021202020202020'\n         DC    C' '\nMSG01DSN DC    CL44' '\n         DC    C' '\nMSG01MEM DC    CL8' '\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'FXSSTGE02I'\n         DC    C'IEBCOPY SUBTASK RE-ATTACHED'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'FXSSTGE03E'\n         DC    C'NO ''RESTORE'' STATEMENT FOUND FOR REQEUEST '\nMSG03NDE DC    CL8' '\nMSG03NBR DC    XL8'4021202020202020'\n         DC    C' '\nMSG03DSN DC    CL44' '\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    CL11'FXSSTGE04E'\n         DC    C'ERROR ALLOCATING '\nMSG04DD  DC    CL8' '\n         DC    C' DAIR R15='\nMSG04R15 DC    CL4' '\n         DC    C' ERROR='\nMSG04ERR DC    CL4' '\n         DC    C' INFO='\nMSG04INF DC    CL4' '\n         DC    C' '\nMSG04L   EQU   *-MSG04\nMSG05    DS    0C\n         DC    CL11'FXSSTGE05I'\n         DC    C'DUMP FOR REQUEST '\nMSG05NDE DC    CL8' '\nMSG05NBR DC    XL8'4021202020202020'\n         DC    C' QUEUED TO DUMP SUBTASK'\nMSG05L   EQU   *-MSG05\nMSG06    DS    0C\n         DC    CL11'FXSSTGE06I'\n         DC    C'RESTORE FOR REQUEST '\nMSG06NDE DC    CL8' '\nMSG06NBR DC    XL8'4021202020202020'\n         DC    C' QUEUED TO RESTORE SUBTASK'\nMSG06L   EQU   *-MSG06\nMSG07    DS    0C\n         DC    CL11'FXSSTGE07I'\n         DC    C'DUMP SUCCESSFUL FOR REQUEST '\nMSG07NDE DC    CL8' '\nMSG07NBR DC    XL8'4021202020202020'\nMSG07L   EQU   *-MSG07\nMSG08    DS    0C\n         DC    CL11'FXSSTGE08I'\n         DC    C'MEMBER SIZE EXCEEDS MEM SIZE PARAMETER '\nMSG08NDE DC    CL8' '\nMSG08NBR DC    XL8'4021202020202020'\n         DC    C' '\nMSG08DSN DC    CL44' '\n         DC    C' '\nMSG08MEM DC    CL8' '\nMSG08L   EQU   *-MSG08\nMSG09    DS    0C\n         DC    CL11'FXSSTGE09E'\n         DC    C'DUMP FAILED FOR REQUEST '\nMSG09NDE DC    CL8' '\nMSG09NBR DC    XL8'4021202020202020'\nMSG09L   EQU   *-MSG09\nMSG10    DS    0C\n         DC    CL11'FXSSTGE10E'\n         DC    C'MEMBER NOT FOUND '\nMSG10NDE DC    CL8' '\nMSG10NBR DC    XL8'4021202020202020'\n         DC    C' '\nMSG10DSN DC    CL44' '\n         DC    C' '\nMSG10MEM DC    CL8' '\nMSG10L   EQU   *-MSG10\nMSG11    DS    0C\n         DC    CL11'FXSSTGE11I'\n         DC    C'RESTORE SUCCESSFUL FOR REQUEST '\nMSG11NDE DC    CL8' '\nMSG11NBR DC    XL8'4021202020202020'\nMSG11L   EQU   *-MSG11\nMSG12    DS    0C\n         DC    CL11'FXSSTGE12I'\n         DC    C'OUTPUT DATA SET FULL '\nMSG12NDE DC    CL8' '\nMSG12NBR DC    XL8'4021202020202020'\n         DC    C' '\nMSG12DSN DC    CL44' '\n         DC    C' '\nMSG12MEM DC    CL8' '\nMSG12L   EQU   *-MSG12\nMSG13    DS    0C\n         DC    CL11'FXSSTGE13E'\n         DC    C'RESTORE FAILED FOR REQUEST '\nMSG13NDE DC    CL8' '\nMSG13NBR DC    XL8'4021202020202020'\nMSG13L   EQU   *-MSG13\nMSG14    DS    0C\n         DC    CL11'FXSSTGE14E'\n         DC    C'UNSUPPORTED DATA SET ORG '\nMSG14NDE DC    CL8' '\nMSG14NBR DC    XL8'4021202020202020'\n         DC    C', DSN='\nMSG14DSN DC    CL44' '\nMSG14L   EQU   *-MSG14\nMSG15    DS    0C\n         DC    CL11'FXSSTGE15E'\n         DC    C'DATA SET NAME LENGTH IS ZERO OR NEGATIVE '\nMSG15NDE DC    CL8' '\nMSG15NBR DC    XL8'4021202020202020'\n         DC    C', DSN='\nMSG15DSN DC    CL44' '\nMSG15L   EQU   *-MSG15\nMSG16    DS    0C\n         DC    CL11'FXSSTGE16E'\n         DC    C'DATA SET NOT CATALOGED, REQUEST '\nMSG16NDE DC    CL8' '\nMSG16NBR DC    XL8'4021202020202020'\n         DC    C' '\nMSG16DSN DC    CL44' '\n         DC    C' CANCELLED'\nMSG16L   EQU   *-MSG16\nMSG17    DS    0C\n         DC    CL11'FXSSTGE17E'\n         DC    C'DATA SET SIZE EXCEEDS MAX ALLOWED, REQUEST '\nMSG17NDE DC    CL8' '\nMSG17NBR DC    XL8'4021202020202020'\n         DC    C' '\nMSG17DSN DC    CL44' '\n         DC    C' CANCELLED'\nMSG17L   EQU   *-MSG17\nMSG18    DS    0C\n         DC    CL11'FXSSTGE18E'\n         DC    C'ERROR DEALLOCATING '\nMSG18DD  DC    CL8' '\n         DC    C' DAIR R15='\nMSG18R15 DC    CL4' '\n         DC    C' ERROR='\nMSG18ERR DC    CL4' '\n         DC    C' INFO='\nMSG18INF DC    CL4' '\n         DC    C' '\nMSG18L   EQU   *-MSG18\nMSG19    DS    0C\n         DC    CL11'FXSSTGE19E'\n         DC    C'DATA SET IS NOT A PDS '\nMSG19NDE DC    CL8' '\nMSG19NBR DC    XL8'4021202020202020'\n         DC    C' '\nMSG19DSN DC    CL44' '\n         DC    C' '\nMSG19MEM DC    CL8' '\nMSG19L   EQU   *-MSG19\nMSG20    DS    0C\n         DC    CL11'FXSSTGE20E'\n         DC    C'ERROR DELETING '\nMSG20DD  DC    CL8' '\n         DC    C' DAIR R15='\nMSG20R15 DC    CL4' '\n         DC    C' ERROR='\nMSG20ERR DC    CL4' '\n         DC    C' INFO='\nMSG20INF DC    CL4' '\n         DC    C' '\nMSG20L   EQU   *-MSG20\nMSG21    DS    0C\n         DC    CL11'FXSSTGE221'\n         DC    C'ERROR ALLOCATING '\nMSG21DD  DC    CL8' '\n         DC    C' FOR READ-BACK, DAIR R15='\nMSG21R15 DC    CL4' '\n         DC    C' ERROR='\nMSG21ERR DC    CL4' '\n         DC    C' INFO='\nMSG21INF DC    CL4' '\n         DC    C' '\nMSG21L   EQU   *-MSG21\nMSG22    DS    0C\n         DC    CL11'FXSSTGE22E'\n         DC    C'VOLUME CONTAINING THE DATA IS NOT ON ANY DEVICE '\nMSG22NDE DC    CL8' '\nMSG22NBR DC    XL8'4021202020202020'\n         DC    C' '\nMSG22DSN DC    CL44' '\n         DC    C' CANCELLED'\nMSG22L   EQU   *-MSG22\nMSG23    DS    0C\n         DC    CL11'FXSSTGE23E'\n         DC    C'DATA SET IS MIGRATED '\nMSG23NDE DC    CL8' '\nMSG23NBR DC    XL8'4021202020202020'\n         DC    C' '\nMSG23DSN DC    CL44' '\n         DC    C' CANCELLED'\nMSG23L   EQU   *-MSG23\nMSG24    DS    0C\n         DC    CL11'FXSSTGE24E'\n         DC    C'DATA SET IS NOT ON A DASD DEVICE '\nMSG24NDE DC    CL8' '\nMSG24NBR DC    XL8'4021202020202020'\n         DC    C' '\nMSG24DSN DC    CL44' '\n         DC    C' CANCELLED'\nMSG24L   EQU   *-MSG24\nMSG25    DS    0C\n         DC    CL11'FXSSTGE25E'\n         DC    C'DATA SET IS ON AN OFFLINE DEVICE '\nMSG25NDE DC    CL8' '\nMSG25NBR DC    XL8'4021202020202020'\n         DC    C' '\nMSG25DSN DC    CL44' '\n         DC    C' CANCELLED'\nMSG25L   EQU   *-MSG25\n         LTORG\nIDCII    DCB   DSORG=PS,             IDCAMS SYSIN DCB                  +\n               DDNAME=IDCI,                                            +\n               RECFM=FB,                                               +\n               LRECL=80,                                               +\n               BLKSIZE=3120,                                           +\n               MACRF=PM\nIDCIL    EQU   *-IDCII\nIDCPI    DCB   DSORG=PS,             IDCAMS SYSPRINT DCB               +\n               DDNAME=IDCP,                                            +\n               RECFM=VBA,                                              +\n               LRECL=125,                                              +\n               BLKSIZE=3120,                                           +\n               EODAD=*,                                                +\n               MACRF=GL\nIDCPL    EQU   *-IDCPI\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Work areas                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSSTGE DSECT\nDXDID    DS    CL8                   WORK AREA OWNER ID\nDXDSAVE  DS    18F                   REGISTER SAVE AREA\nDXDDWORD DS    D                     CVD/CVB WORK AREA\nDXDAPARM DS    A                     ATTACH PARM\nDXDIDCEP DS    A                     IDCAMS ENTRY POINT ADDRESS\nDXDIDCI  DS    A                     IDCAMS SYSIN DCB ADDRESS\nDXDIDCP  DS    A                     IDCAMS SYSPRINT DCB ADDRESS\nDXD24    DS    A                     24-BIT PARM LIST ADDRESS\nDXDRSTR  DS    A                     RESTORE BLOCK'S ADDRESS\nDXDDSNSZ DS    F                     DATA SET SIZE IN BYTES\nDXDATTCH DS    (ATTCHL)X             RESERVE ROOM FOR ATTACH LIST FORM\nDXDREC#  DS    H                     CURRENT RECORD NUMBER\nDXDFLAG  DS    X'00'\n$NONVSAM EQU   X'80'                 .. NONVSAM DATA SET\n$CLUSTER EQU   X'40'                 .. VSAM CLUSTER\n$DATA    EQU   X'20'                 .. DATA COMPONENT FOUND\n$INDEX   EQU   X'10'                 .. INDEX FOUND\n$DSS     EQU   X'08'                 .. DF/DSS SUBTASK IS BUSY\n$COPY    EQU   X'04'                 .. IEBCOPY SUBTASK IS BUSY\nDXDSTAGE DS    CL8                   STAGING DATA SET'S DDNAME\nDXDPDS   DS    CL8                   PDS DATA SET'S DDNAME (IEBCOPY)\nDXDINDD  DS    CL8                   DF/DSS SYSIN DATA SET DDNAME\nDXDPRTDD DS    CL8                   DF/DSS SYSPRINT DATA SET DDNAME\nDXDDSN   DS    CL44                  DATA SET NAME\nDXDWORK  DS    CL8\n         DAIRREQ  DSECT=NO\n         MSTRREQ  DSECT=NO\n         PRTBLOK  DSECT=NO\n         VTOCREQ  DSECT=NO\n* ------------------------------------------------------------------- *\n*              Master file record format                              *\n* ------------------------------------------------------------------- *\n         REQBLOK  DSECT=YES\n* ------------------------------------------------------------------- *\n*              DF/DSS Dump/Restore request block                      *\n* ------------------------------------------------------------------- *\n         DRREQ    DSECT=YES\n* ------------------------------------------------------------------- *\n*              Common data map                                        *\n* ------------------------------------------------------------------- *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              Restore block map                                      *\n* ------------------------------------------------------------------- *\n         RSTRBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              24-bit module parm list                                *\n* ------------------------------------------------------------------- *\n         FX24PRM DSECT=YES\n* ------------------------------------------------------------------- *\n*              CVT                                                    *\n* ------------------------------------------------------------------- *\n         CVT      DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              UCB                                                    *\n* ------------------------------------------------------------------- *\n         IEFUCBOB LIST=NO\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  FXSSTGE\n./ ADD NAME=FXSTIMER 0100-99056-99056-1500-00096-00096-00000-FX-REL1\n\n         TITLE 'TIMER EXIT'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSTIMER                                              *\n*                                                                     *\n*  Timer exit.  If FX has a request to send to a destination that is  *\n*  not available, the status to that node is set to 'error'.  FX will *\n*  not try to contact that node again for 1 minute.  Each time a VTAM *\n*  event occurs, or a dump or restore completes, FX scans the master  *\n*  file looking for requests that it has in transmit ready state. If  *\n*  no users are logged on, no FX-to-FX send or receive is active, and *\n*  no dump or restore activity is in progress, FX needs to be \"woke   *\n*  up\" periodically to find out if the destination has become active. *\n*  Just before the mainline issues its WAIT, it sets the TIMER, and   *\n*  has an ECB in the wait list for this exit to POST.  If some other  *\n*  event occurs first, the mainline will cancel the timer.  If no     *\n*  event occurs, this exit is scheduled by the system.  This exit     *\n*  posts the ECB in the wait list to wake-up the mainline.            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXSTIMER CSECT\nFXSTIMER AMODE 31\nFXSTIMER RMODE ANY\n         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS\n         LR    R12,R15               COPY BASE ADDRESS\n         USING FXSTIMER,R12          DEFINE BASE\n         B     TIMER010              SKIP ADDRESS AND EYECATCHER\n         DC    ((PFXMODNM-MODPRFX)-(*-FXSTIMER))X'00'\n         DC    CL8'FXSTIMER'         MODULE NAME\n         DC    C'&SYSDATE'           DATE OF ASSEMBLY\n         DC    C'&SYSTIME'           TIME OF ASSEMBLY\nTIMER010 DS    0H\n         GETMAIN RU,LV=72            ACQUIRE REGISTER SAVE AREA\n         ST    R1,8(R13)             CHAIN NEW TO OLD\n         ST    R13,4(R1)             CHAIN OLD TO NEW\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         USING PSA,R0                DEFINE BASE\n         L     R1,PSATNEW            OUR TCB'S ADDRESS\n         USING TCB,R1                DEFINE BASE\n         SR    R2,R2                 CLEAR REGISTER\n         ICM   R2,7,TCBJPQB          LAST (FIRST) CDE\n         USING CDENTRY,R2            DEFINE BASE\nTIMER020 DS    0H\n         CLC   CDNAME,COMMNAME       FXSCOMM?\n         BE    TIMER030              YES\n         ICM   R2,15,CDCHAIN         NEXT CDE ENTRY\n         BNZ   TIMER020              CONTINUE\n         ABEND $U0030,DUMP,,USER     FXSCOMM ENTRY NOT FOUND\nTIMER030 DS    0H\n         L     R11,CDENTPT           FXSCOMM ENTRY POINT ADDRESS\n         LA    R11,0(R11)            CLEAR HIGH BIT\n         USING FXSCOMM,R11           DEFINE BASE\n         C     R11,ACOMM             ADDRESS MATCH?\n         BNE   TIMER040              NO.. BAD NEWS\n         ITRACE ID=TIME\n         LA    R1,COMMTECB           ECB'S ADDRESS\n         POST  (1)                   POST THE ECB\n         LR    R1,R13                COPY REGISTER SAVE AREA ADDRESS\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         FREEMAIN RU,A=(1),LV=72     FREE REGISTER SAVE AREA\n         LM    R14,R12,12(R13)       RESTORE REGISTERS\n         SR    R15,R15               SET RETURN CODE\n         BR    R14                   RETURN TO CALLER                   ASE01700\nTIMER040 DS    0H\n         ABEND $U0037,DUMP,,USER\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        CONSTANTS                                                   *\n*                                                                    *\n* ------------------------------------------------------------------ *\nCOMMNAME DC    CL8'FXSCOMM'\n* ------------------------------------------------------------------ *\n*              COMMON DATA MAP                                       *\n* ------------------------------------------------------------------ *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------ *\n*              PSA                                                   *\n* ------------------------------------------------------------------ *\n         IHAPSA   DSECT=YES,LIST=NO\n* ------------------------------------------------------------------ *\n*              TCB                                                   *\n* ------------------------------------------------------------------ *\n         IKJTCB   DSECT=YES,LIST=NO\n* ------------------------------------------------------------------ *\n*              CDE                                                   *\n* ------------------------------------------------------------------ *\n         IHACDE\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              EQUATES                                               *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         ABCODES\n         END  FXSTIMER\n./ ADD NAME=FXSUID   0100-99056-99056-1500-00231-00231-00000-FX-REL1\n\n         TITLE 'FXSUID   USER IDENTIFICATION'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSUID                                                *\n*                                                                     *\n*   FX has several \"classes\" or levels of users.   This identification*\n*   is done by the STC end to prevent someone logging on to FX and    *\n*   \"lying\" about their authority or RACF id.  The user's ID and      *\n*   authority are used at both ends.  On the user interface end, the  *\n*   user will receive different menus depending upon his/her          *\n*   authority.  On the STC end the ID is used to verify that the user *\n*   has access to datasets requested for transmission.                *\n*                                                                     *\n*   As of now there are only 3 types of users, 'normal', 'operator',  *\n*   and administrator.  READ level access to the resource will give   *\n*   the user 'normal' level authority.  UPDATE or CONTROL level       *\n*   access will give the user operator authority.  ALTER level access *\n*   will give the user administrator authority.                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSUID     FXPRFX 'USER IDENTIFICATION'\nFXSUID   AMODE 31\nFXSUID   RMODE ANY\n         USING SESSBLOK,R7           ADDRESS PASSED BY FXSVTAM\n         USING CONVBLOK,R6           ADDRESS PASSED BY FXSVTAM\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    UID0010               YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         MVC   DXDRACL(RACLL),RACLI  INITIALIZE RACLIST\n         MVI   PRTCC,C' '            INITIALIZE CARRIAGE CONTROL\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\nUID0010  DS    0H\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         USING USERREQ,R2            DEFINE BASE\n         MVC   SESSSMF,USERSMF       COPY SMF ID\n         MVC   SESSUSER,USERID       COPY USERID\n         MVC   SESSJOB,USERJOB       COPY JOB NAME\n         ICM   R15,15,COMMXUSR       FIRST EXTERNAL USER BLOCK\n         BZ    UID0050               NO EXTERNAL USER BLOCKS\n         USING XUSRBLOK,R15          DEFINE BASE\nUID0020  DS    0H\n         CLC   XUSRSMF,SESSSMF       SAME SMF ID?\n         BNE   UID0030               NO\n         CLC   XUSRID1,SESSUSER      SAME USER ID?\n         BE    UID0040               YES\nUID0030  DS    0H\n         ICM   R15,15,XUSRNEXT       NEXT EXTERNAL USER ID BLOCK\n         BNZ   UID0020               LOOP\n         B     UID0050\nUID0040  DS    0H\n         MVC   SESSUSER,XUSRID2      CHANGE TO LOCAL USER ID\nUID0050  DS    0H\n         LA    R3,SESSUSER           USER ID ADDRESS\n         LA    R4,SAFWORK            SAF WORK AREA ADDRESS\n         LA    R5,AUTHCLSL           CLASS LENGTH\n         LA    R6,AUTHENT            ENTITY\n         ITRACE ID=CHKALTER\n         RACROUTE REQUEST=AUTH,      CHECK FOR AUTHORIZATION           +\n               ATTR=ALTER,           .. AT ALTER LEVEL                 +\n               CLASS=(R5),           .. CLASS                          +\n               ENTITY=((R6)),        .. ENTITY                         +\n               USERID=(R3),          .. THIRD PARTY CHECK              +\n               WORKA=(R4),           .. SAF WORK AREA                  +\n               RELEASE=1.8.1,        .. RACF RELEASE                   +\n               MF=(E,DXDRACL)        .. EXECUTE FORM/LIST FORM ADDRESS\n         ITRACE ID=ALTERRC,          TRACE RETURN FROM ALTER           +\n               RDATA1=R15\n         LTR   R15,R15               ZERO?\n         BNZ   UID0060               NO\n         ITRACE ID=ALTEROK\n         MVI   SESSUATH,4            SET AUTH LEVEL TO 4\n         B     UID0100               PRINT USER AND AUTH LEVEL\nUID0060  DS    0H\n         ITRACE ID=CHKCONTR\n         RACROUTE REQUEST=AUTH,      CHECK FOR AUTHORIZATION           +\n               ATTR=CONTROL,         .. AT CONTROL LEVEL               +\n               CLASS=(R5),           .. CLASS                          +\n               ENTITY=((R6)),        .. ENTITY                         +\n               USERID=(R3),          .. THIRD PARTY CHECK              +\n               WORKA=(R4),           .. SAF WORK AREA                  +\n               RELEASE=1.8.1,        .. RACF RELEASE                   +\n               MF=(E,DXDRACL)        .. EXECUTE FORM/LIST FORM ADDRESS\n         ITRACE ID=CONTRLRC,         TRACE RETURN FROM CONTROL         +\n               RDATA1=R15\n         LTR   R15,R15               ZERO?\n         BNZ   UID0070               NO\n         ITRACE ID=CONTRLOK\n         MVI   SESSUATH,2            SET AUTH LEVEL TO 2\n         B     UID0100               PRINT USER AND AUTH LEVEL\nUID0070  DS    0H\n         ITRACE ID=CHKUPDAT\n         RACROUTE REQUEST=AUTH,      CHECK FOR AUTHORIZATION           +\n               ATTR=UPDATE,          .. AT UPDATE LEVEL                +\n               CLASS=(R5),           .. CLASS                          +\n               ENTITY=((R6)),        .. ENTITY                         +\n               USERID=(R3),          .. THIRD PARTY CHECK              +\n               WORKA=(R4),           .. SAF WORK AREA                  +\n               RELEASE=1.8.1,        .. RACF RELEASE                   +\n               MF=(E,DXDRACL)        .. EXECUTE FORM/LIST FORM ADDRESS\n         ITRACE ID=UPDATERC,         TRACE RETURN FROM UPDATE          +\n               RDATA1=R15\n         LTR   R15,R15               ZERO?\n         BNZ   UID0080               NO\n         ITRACE ID=UPDATEOK\n         MVI   SESSUATH,2            SET AUTH LEVEL TO 2\n         B     UID0100               PRINT USER AND AUTH LEVEL\nUID0080  DS    0H\n         ITRACE ID=CHKREAD\n         RACROUTE REQUEST=AUTH,      CHECK FOR AUTHORIZATION           +\n               ATTR=READ,            .. AT READ LEVEL                  +\n               CLASS=(R5),           .. CLASS                          +\n               ENTITY=((R6)),        .. ENTITY                         +\n               USERID=(R3),          .. THIRD PARTY CHECK              +\n               WORKA=(R4),           .. SAF WORK AREA                  +\n               RELEASE=1.8.1,        .. RACF RELEASE                   +\n               MF=(E,DXDRACL)        .. EXECUTE FORM/LIST FORM ADDRESS\n         ITRACE ID=READRC,           TRACE RETURN FROM READ            +\n               RDATA1=R15\n         LTR   R15,R15               ZERO?\n         BNZ   UID0090               NO\n         ITRACE ID=READOK\n         MVI   SESSUATH,1            SET AUTH LEVEL TO 1\n         B     UID0100               PRINT USER AND AUTH LEVEL\nUID0090  DS    0H\n         ITRACE ID=AUTHZERO          AUTH LEVEL IS 0\n         MVI   SESSUATH,0            SET AUTH LEVEL\nUID0100  DS    0H\n         MVC   PRTMSGID(MSG01L),MSG01 SET MESSSAGE\n         MVC   PRTMSGID+(MSG01USR-MSG01)(L'MSG01USR),SESSUSER\n         MVC   PRTMSGID+(MSG01NDE-MSG01)(L'MSG01NDE),SESSNAME\n         CLI   SESSUATH,1            NORMAL USER?\n         BE    UID0110               YES\n         CLI   SESSUATH,2            OPERATOR USER?\n         BE    UID0120               YES\n         MVC   PRTMSGID+(MSG01ATH-MSG01)(L'MSG01ATH),ADMIN\n         B     UID0130\nUID0110  DS    0H\n         MVC   PRTMSGID+(MSG01ATH-MSG01)(L'MSG01ATH),NORMAL\n         B     UID0130\nUID0120  DS    0H\n         MVC   PRTMSGID+(MSG01ATH-MSG01)(L'MSG01ATH),OPERATOR\nUID0130  DS    0H\n         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE\nEXIT0000 DS    0H\n         ITRACE ID=EXIT              EXITING PRINT MODULE\n         LA    R0,IDL\n         STH   R0,USERLEN            SET LENGTH\n         MVC   USERAUTH,SESSUATH     PASS USER AUTH BACK\n         MVC   USERSYSN,COMMSYSN     PASS SYSTEM'S NAME BACK ALSO\n         MVC   USERID,SESSUSER       RETURN USER ID\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        CONSTANTS                                                   *\n*                                                                    *\n* ------------------------------------------------------------------ *\nDXDSTART DC    Q(DXDSUID)            DISPLACEMENT TO WORK AREA\nRACLI    RACROUTE REQUEST=AUTH,      RACF AUTHORIZATION INQUIRY        +\n               USERID=*,             .. WILL BE A THIRD PARTY CHECK    +\n               RELEASE=1.8.1,        .. RACF 1.8.1 FORMAT              +\n               LOG=NONE,             .. DON'T LOG FAILURES             +\n               MF=L                  .. LIST FORM\nRACLL    EQU   *-RACLI\nAUTHCLSL DC    AL1(AUTHCLL)          RACF CLASS LENGTH\n         DC    C&RACFC               RACF CLASS\nAUTHCLL  EQU   *-AUTHCLSL-1\nAUTHENT  DC    CL8&RACFE               RACF ENTITY\nNORMAL   DC    C'NORMAL       '\nOPERATOR DC    C'OPERATOR     '\nADMIN    DC    C'ADMINISTRATOR'\nMSG01    DS    0C\n         DC    CL11'FXSUID01I'\n         DC    C'USER '\nMSG01USR DC    CL8' '\n         DC    C' ON NODE '\nMSG01NDE DC    CL8' '\n         DC    C' HAS '\nMSG01ATH DC    C'             '\n         DC    C' LEVEL AUTHORITY'\nMSG01L   EQU   *-MSG01\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        WORK AREAS                                                  *\n*                                                                    *\n* ------------------------------------------------------------------ *\nDXDSUID  DSECT\nDXDID    DS    CL8                   WORK AREA OWNER ID\nDXDSAVE  DS    18F                   REGISTER SAVE AREA\nDXDRACL  DS    (RACLL)X              RACLIST PARM LIST\nSAFWORK  DS    (512)X                SAF WORK ARA\n         PRTBLOK  DSECT=NO\n         LTORG\n* ------------------------------------------------------------------ *\n*              SESSION BLOCK                                         *\n* ------------------------------------------------------------------ *\n         SESSBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              CONVERSATION BLOCK                                    *\n* ------------------------------------------------------------------ *\n         CONVBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              EXTERNAL USER ID BLOCK                                *\n* ------------------------------------------------------------------ *\n         XUSRBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              USER REQUEST/RESPONSE BLOCK                           *\n* ------------------------------------------------------------------ *\n         USERREQ\nUSERSMF  DS    CL4                   USER'S SYSTEM SMFID\nUSERID   DS    CL8                   USER'S ID\nUSERJOB  DS    CL8                   JOB NAME IF BATCH\nUSERAUTH DS    X                     USER AUTHORIZATION LEVEL\nUSERSYSN DS    CL20                  SYSTEM'S NAME\nIDL      EQU   *-USERREQ\n* ------------------------------------------------------------------ *\n*              COMMON DATA MAP                                       *\n* ------------------------------------------------------------------ *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              EQUATES                                               *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         END  FXSUID\n./ ADD NAME=FXSVSUB  0100-99056-99056-1500-00447-00447-00000-FX-REL1\n\n         TITLE 'VTAM SUB-FUNCTIONS'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSVSUB                                               *\n*                                                                     *\n*  The VTAM module was very large and cluttered with the actual VTAM  *\n*  commands.  Also some of the sub-function modules (request entry,   *\n*  request query, shutdown, etc) need to issue VTAM commands.  This   *\n*  module contains the actual VTAM macros.                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSVSUB    FXPRFX 'VTAM SUBFUNCTIONS'\nFXSVSUB  AMODE 31\nFXSVSUB  RMODE ANY\n         USING SESSBLOK,R7           DEFINE BASE (PASSED BY FXSVTAM)\n         USING CONVBLOK,R6           DEFINE BASE (PASSED BY FXSVTAM)\n         LR    R8,R1                 COPY PARM BLOCK ADDRESS\n         USING VTAMBLOK,R8           DEFINE BASE\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    VTAM0010              YES\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         MVI   PRTCC,C' '            INITIALIZE PRINT I/O AREA\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL           +\n               LV=RPLL,              .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,DXDRPL             SAVE RPL'S ADDRESS\n         MVC   0(RPLL,R1),RPLI       INITIALIZE RPL\n         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL EXTENSION +\n               LV=RPLEXTL,           .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,DXDRPLX            SAVE RPL EXTENSION'S ADDRESS\n         MVC   0(RPLEXTL,R1),RPLEXTI INITIALIZE RPL EXTENSION\n         L     R3,DXDRPL             RPL'S ADDRESS\n         USING IFGRPL,R3             DEFINE BASE\n         ST    R1,RPLAAREA           SET RPL EXTENSION'S ADDRESS\n         L     R2,COMMACB            ACB'S ADDRESS\n         ST    R2,RPLDACB            SET ACB'S ADDRESS\n         ITRACE ID=OPENACB           OPENING ACB\n         MVC   DXDFUNC,OPENACB       LAST FUNCTION IS OPEN\n         GETMAIN RU,                 ACQUIRE STORAGE FOR OPEN          +\n               LV=OPENL,             .. AREA SIZE                      +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R3,R1                 COPY ADDRESS\n         MVC   0(OPENL,R3),OPENI     COPY OPEN LIST FORM\n         OPEN  ((R2)),MF=(E,(R3))    OPEN ACB\n         LR    R2,R15                SAVE RETURN CODE\n         FREEMAIN RU,A=(3),LV=OPENL  FREEMAIN OPEN PARM LIST\n         LTR   R15,R2                OPEN SUCCESSFUL?\n         BNZ   ERR0010               NO\n         MVC   PRTMSGID(MSG01L),MSG01 SET MESSAGE\n         BAL   R5,PRT0000            PRINT MESSAGE\n         ITRACE ID=SETLOGON          ISSUING SETLOGON\n         MVC   DXDFUNC,SETLOGON      LAST FUNCTION\n         L     R2,COMMACB            ACB'S ADDRESS\n         L     R3,DXDRPL             RPL'S ADDRESS\n         SETLOGON ACB=(R2),          ISSUE SETLOGON                    +\n               RPL=(R3),             .. RPL FOR REQUEST                +\n               OPTCD=START           .. ENABLE EXIT\n         LTR   R15,R15               SET LOGON SUCCESSFUL?\n         BNZ   ERR0010               NO\n         LA    R1,DXDSLIM            SESSION LIMIT BLOCK ADDRESS\n         USING ISTSLCNS,R1           DEFINE BASE\n         XC    ISTSLCNS(SLIML),ISTSLCNS\n         MVC   SLCSESSL,H1           SET SESSION LIMIT\n         MVC   SLCMCWL,H1            SET OUR SESSION WINNER LIMIT\n         MVI   SLCPARMS,SLCSSLU      DO NOT ALLOW PARALLEL SESSIONS\n         ITRACE ID=INITDONE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Process the requested function                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nVTAM0010 DS    0H\n         TM    COMMEOJ,$EOJ3         VTAM CLOSE-UP TIME?\n         BO    EXIT0000              YES\n         CLI   VTAMCMD,$VTAMINT      INITIALIZE?\n         BE    EXIT9900              YES\n         CLI   VTAMCMD,$VTAMINQ      ISSUE INQUIRE?\n         BE    INQ0000               YES\n         CLI   VTAMCMD,$VTAMCNS      ISSUE CNOS?\n         BE    CNOS0000              YES\n         CLI   VTAMCMD,$VTAMALO      ALLOCATE A CONVERSATION?\n         BE    ALOC0000              YES\n         CLI   VTAMCMD,$VTAMSND      ISSUE A SEND?\n         BE    SEND0000              YES\n         CLI   VTAMCMD,$VTAMRCV      ISSUE A RECEIVE?\n         BE    RECV0000              YES\n         CLI   VTAMCMD,$VTAMDLO      DEALLOCATE A CONVERSATION\n         BE    DALO0000              YES\n         CLI   VTAMCMD,$VTAMCHK      ISSUE A CHECK?\n         BE    CHECK000              YES\n         CLI   VTAMCMD,$VTAMCFM      ISSUE A SEND/CONFIRM\n         BE    CONF0000              YES\n         ABEND $U0034,DUMP,,USER     INVALID COMAND\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Issue an INQUIRE                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nINQ0000  DS    0H\n         ITRACE ID=INQUIRE,          ISSUE INQUIRE                     +\n               DATA1=SESSNAME        .. LU NAME\n         L     R2,SESSNIB            NIB'S ADDRESS\n         USING ISTDNIB,R2            DEFINE BASE\n         MVC   NIBSYM,SESSNAME       PARTNER LU'S NAME\n         MVC   DXDFUNC,INQUIRE       FUNCTION ATTEMPTED\n         L     R3,SESSRPL            RPL'S ADDRESS\n         L     R5,ARPLX              RPL EXIT'S ADDRESS\n         MVI   SESSSTAT,$SESSINQ+$SESSPND   INQUIRE SENT AND PENDING\n         INQUIRE RPL=(R3),           IS PARTNER AVAILABLE?             +\n               NIB=(R2),             .. NIB FOR REQUEST                +\n               EXIT=(R5),            .. EXIT'S ADDRESS                 +\n               OPTCD=(ASY,APPSTAT)   .. WE WANT PARTNER'S STATUS\n         LTR   R15,R15               INQUIRE SUCCESSFUL?\n         BNZ   ERR0010               NO\n         B     EXIT9900              AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Issue a CNOS                                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nCNOS0000 DS    0H\n         ITRACE ID=CNOS,             ISSUE CNOS                        +\n               DATA1=SESSNAME        .. LU NAME\n         MVC   DXDFUNC,CNOS          LAST FUNCTION\n         L     R1,SESSRPLX           RPL EXTENSION'S ADDRESS\n         USING ISTRPL6X,R1           DEFINE BASE\n         MVC   RPL6LU,SESSNAME       SET PARTNER'S LU NAME\n         XC    RPL6RC,RPL6RC         FORCE RETURN CODE\n         LA    R2,DXDSLIM            SESSION LIMITS BLOCK ADDRESS\n         L     R3,SESSRPL            RPL'S ADDRESS\n         L     R5,ARPLX              EXIT'S ADDRESS\n         MVI   SESSSTAT,$SESSCS+$SESSPND  CNOS SENT AND PENDING\n         APPCCMD CONTROL=OPRCNTL,    ISSUE APPC COMMAND                +\n               QUALIFY=CNOS,         .. CHANGE NUMBER OF SESSIONS      +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               AREA=(R2),            .. SESSION LIMIT BLOCK'S ADDRESS  +\n               RECLEN=SLIML,         .. SESSION LIMIT BLOCK'S LENGTH   +\n               EXIT=(R5),            .. EXIT'S ADDRESS                 +\n               OPTCD=ASY,            .. ASYNCHRONOUS                   +\n               LOGMODE=LU62P         .. LOGMODE\n         L     R1,SESSRPLX           RPL EXTENSION'S ADDRESS\n         ITRACE ID=CNOS2,            TEMP TRACE POINT                  +\n               DATA1=RPL6RC,         ..                                +\n               DATA2=RPLFDBK         ..\n         B     EXIT9900              AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Allocate a session                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\nALOC0000 DS    0H\n         ITRACE ID=ALLOCATE,         ALLOCATE A CONVERSATION           +\n               DATA1=SESSNAME        .. PARTNER'S NAME\n         MVC   DXDFUNC,ALLOC         LAST FUNCTION\n         L     R1,CONVRPLX           RPL EXTENSION'S ADDRESS\n         MVC   RPL6LU,SESSNAME       SET LU NAME\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         L     R3,CONVRPL            RPL'S ADDRESS\n         L     R5,ARPLX              RPL EXIT'S ADDRESS\n         MVC   0(FMH5L,R2),FMH5      COPY FMH TO I/O AREA\n         MVI   CONVSTAT,$CONVALO+$CONVPND  ALLOC SENT AND PENDING\n         APPCCMD CONTROL=ALLOC,      ISSUE APPC COMMAND                +\n               QUALIFY=ALLOCD,       .. ALLOCATE A CONVERSATION        +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               AREA=(R2),            .. FMH-5'S ADDRESS                +\n               RECLEN=FMH5L,         .. FMH-5'S LENGTH                 +\n               CONMODE=CS,           .. CONTINUE SPECIFIC              +\n               EXIT=(R5),            .. EXIT'S ADDRESS                 +\n               OPTCD=ASY,            .. ASYNCHRONOUS                   +\n               LOGMODE=LU62P         .. LOGMODE\n         B     EXIT9900              YES\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Issue a SEND                                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nSEND0000 DS    0H\n         ITRACE ID=SEND,             ISSUE A SEND                      +\n               DATA1=SESSNAME        LU'S NAME\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         L     R3,CONVRPL            RPL'S ADDRESS\n         SR    R4,R4                 CLEAR REGISTER\n         ICM   R4,3,0(R2)            TOTAL DATA LENGTH\n         L     R5,ARPLX              RPL EXIT'S ADDRESS\n         MVC   DXDFUNC,SEND          LAST FUNCTION IS SEND\n         OI    CONVSTAT,$CONVPND     SEND IS PENDING\n         MVI   CONVFUNC,$CONVFS      FUNCTION IS A SEND\n         APPCCMD CONTROL=SEND,       ISSUE APPC CMD                    +\n               QUALIFY=DATA,         .. SEND DATA                      +\n               RPL=(R3),             .. RPL ADDRESS                    +\n               AREA=(R2),            .. I/O AREA                       +\n               RECLEN=(R4),          .. LENGTH OF DATA                 +\n               CONMODE=CS,           .. CONTINUE SPECIFIC              +\n               CONVID=CONVCID,       .. CONVERSATION ID                +\n               EXIT=(R5),            .. EXIT'S ADDRESS                 +\n               OPTCD=ASY             .. ASYNCHRONOUS\n         B     EXIT9900              EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Issue a SEND/CONFIRMED                                       *\n*                                                                     *\n*---------------------------------------------------------------------*\nCONF0000 DS    0H\n         ITRACE ID=SENDCFMD,         ISSUE A SEND/CONFIRM              +\n               DATA1=SESSNAME        LU'S NAME\n         L     R3,CONVRPL            RPL'S ADDRESS\n         L     R5,ARPLX              RPL EXIT'S ADDRESS\n         MVC   DXDFUNC,SEND          LAST FUNCTION IS SEND\n         MVI   CONVFUNC,$CONVFC      FUNCTION IS A SEND/CONFIRMED\n         OI    CONVSTAT,$CONVPND     SEND IS PENDING\n         APPCCMD CONTROL=SEND,       ISSUE APPC CMD                    +\n               QUALIFY=CONFRMD,      .. SEND CONFIRMATION              +\n               RPL=(R3),             .. RPL ADDRESS                    +\n               CONMODE=CS,           .. CONTINUE SPECIFIC              +\n               CONVID=CONVCID,       .. CONVERSATION ID                +\n               EXIT=(R5),            .. EXIT'S ADDRESS                 +\n               OPTCD=ASY             .. ASYNCHRONOUS\n         B     EXIT9900              EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Issue a RECEIVE                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nRECV0000 DS    0H\n         ITRACE ID=RECEIVE,          ISSUE A RECEIVE                   +\n               DATA1=SESSNAME        .. LU'S NAME\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         L     R3,CONVRPL            RPL'S ADDRESS\n         L     R4,=A(COMMIOSZ)       MAXIMUM I/O AREA SIZE\n         L     R5,ARPLX              RPL EXIT'S ADDRESS\n         MVC   DXDFUNC,RECEIVE       LAST FUNCTION IS RECEIVE\n         OI    CONVSTAT,$CONVPND     RECEIVE IS PENDING\n         MVI   CONVFUNC,$CONVFR      LAST FUNCTION WAS RECEIVE\n         APPCCMD CONTROL=RECEIVE,    ISSUE A RECEIVE                   +\n               QUALIFY=SPEC,         .. FOR SPECIFIC CONVERSATION      +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               FILL=LL,              .. ONLY 1 LOGICAL RECORD          +\n               AREA=(R2),            .. I/O AREA ADDRESS               +\n               AREALEN=(R4),         .. I/O AREA SIZE                  +\n               CONMODE=CS,           .. CONTINUE SPECIFIC              +\n               CONVID=CONVCID,       .. CONVERSATION ID                +\n               EXIT=(R5),            .. EXIT'S ADDRESS                 +\n               OPTCD=ASY             .. ASYNCHRONOUS\n         B     EXIT9900              AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Deallocate a conversation                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nDALO0000 DS    0H\n         ITRACE ID=DEALLOC,          DEALOCATE A CONVERSATION          +\n               DATA1=SESSNAME        .. LU'S NAME\n         L     R3,CONVRPL            RPL'S ADDRESS\n         L     R5,ARPLX              RPL EXIT'S ADDRESS\n         MVC   DXDFUNC,DEALLOC       LAST FUNCTION IS DEALLOC\n         MVI   CONVFUNC,$CONVFD      LAST FUNCTION WAS DEALLOCATE\n         OI    CONVSTAT,$CONVPND     DEALLOCATE IS PENDING\n         APPCCMD CONTROL=DEALLOC,    DE-ALLOCATE THE CONVERSATION      +\n               QUALIFY=CONFIRM,      .. REQUIRE A CONFIRM FROM PARNTER +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               CONVID=CONVCID,       .. CONVERSATION ID                +\n               EXIT=(R5),            .. EXIT'S ADDRESS                 +\n               OPTCD=ASY             .. ASYNCHRONOUSLY\n         B     EXIT9900              AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Issue a CHECK                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nCHECK000 DS    0H\n         CLI   SESSSTAT,$SESSRDY     SESSION IN READY STATE?\n         BE    CHECK010              YES\n         ITRACE ID=SESSCHEK,         ISSUE A CHECK FOR SESSION REQUEST +\n               DATA1=SESSNAME        .. LU'S NAME\n         L     R3,SESSRPL            RPL'S ADDRESS\n         APPCCMD CONTROL=CHECK,      COMPLETE ASYNCHRONOUS EVENT       +\n               RPL=(R3)              .. RPL'S ADDRESS\n         B     EXIT9900              NO, EXIT\nCHECK010 DS    0H\n         ITRACE ID=CONVCHEK,         ISSUE A CHECK FOR A CONVERSATION  +\n               DATA1=SESSNAME        .. LU'S NAME\n         L     R3,CONVRPL            CONVERSATION'S RPL\n         APPCCMD CONTROL=CHECK,      COMPLETE ASYNCHRONOUS EVENT       +\n               RPL=(R3)              .. RPL'S ADDRESS\n         B     EXIT9900              NO, EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        ERROR ROUTINES                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nERR0010  DS    0H\n         ITRACE ID=VTAMERR,          VTAM REQUEST FAILED               +\n               RDATA1=R15,           .. REGISTER 15                    +\n               RDATA2=R0             .. REGISTER 0\n         STH   R15,COMMDWRD          SAVE RETURN CODE\n         MVC   PRTMSGID(MSG02L),MSG02 SET MESSAGE\n         MVC   PRTMSGID+(MSG02FNC-MSG02)(L'MSG02FNC),DXDFUNC\n         UNPK  PRTMSGID+(MSG02RC-MSG02)(L'MSG02RC+1),COMMDWRD(3)\n         MVZ   PRTMSGID+(MSG02RC-MSG02)(L'MSG02RC),HEX0000\n         TR    PRTMSGID+(MSG02RC-MSG02)(L'MSG02RC),HEXCHAR\n         MVI   PRTMSGID+(MSG02RC-MSG02)+L'MSG02RC,C' '\n         BAL   R5,PRT0000            PRINT MESSAGE\n         OI    COMMFLAG,$ABORT       SET ABORT INDICATOR\n         B     EXIT9900              AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        PRINT                                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         ITRACE ID=PRINT\n         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE\n         BR    R5                    DONE\nEXIT0000 DS    0H\n         ITRACE ID=VTAMCLSE          CLOSEING UP\n         ICM   R1,15,DXDRPL          RPL'S ADDRESS\n         BZ    EXIT0010              NO RPL\n         ITRACE ID=FREERPL           FREEING RPL\n         FREEMAIN RU,A=(1),LV=RPLL   FREEMAIN RPL\nEXIT0010 DS    0H\n         ICM   R1,15,DXDRPLX         RPL EXTENSION'S ADDRESS\n         BZ    EXIT9900              NO RPL EXTENSION\n         ITRACE ID=FREERPLX          FREEING RPL EXTENSION\n         FREEMAIN RU,A=(1),LV=RPLEXTL FREEMAIN RPL EXTENSION\n         L     R2,COMMACB            ACB'S ADDRESS\n         GETMAIN RU,                 ACQUIRE STORAGE FOR CLOSE         +\n               LV=CLOSEL,            .. SIZE OF AREA                   +\n               LOC=BELOW             .. FROM 24-BIT AREA\n         LR    R3,R1                 COPY STORAGE ADDRESS\n         MVC   0(CLOSEL,R3),CLOSEI   INITIALIZE CLOSE LIST FORM\n         CLOSE ((R2)),MF=(E,(R3))    CLOSE THE ACB\n         FREEMAIN RU,A=(3),LV=CLOSEL FREE THE CLOSE PARM LIST\n         MVC   PRTMSGID(MSG03L),MSG03 SET MESSAGE\n         BAL   R5,PRT0000            PRINT MESSAGE\nEXIT9900 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            CALLER'S SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE CALLER'S REGISTERS\n         SR    R15,R15               ALWAYS A GOOD RETURN CODE\n         BR    R14                   RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDSVSUB)           DISPLACEMENT TO WORK AREA\nOPENI    OPEN  (*,INPUT),MF=L\nOPENL    EQU   *-OPENI\nCLOSEI   CLOSE (*),MF=L\nCLOSEL   EQU   *-CLOSEI\nH1       DC    H'1'\nHEX0000  DC    8X'00'\nHEXCHAR  DC    C'0123456789ABCDEF'\nSESSID   DC    C'SESSBLOK'\nOPENACB  DC    CL10'OPEN ACB'\nSETLOGON DC    CL10'SETLOGON'\nINQUIRE  DC    CL10'INQUIRE'\nCNOS     DC    CL10'CNOS'\nALLOC    DC    CL10'ALLOCATE'\nSEND     DC    CL10'SEND'\nSENDCFM  DC    CL10'SEND CONF'\nRECEIVE  DC    CL10'RECEIVE'\nDEALLOC  DC    CL10'DEALLOC'\nMSG01    DS    0C\n         DC    CL11'FXSVSUB01I'\n         DC    C'ACB OPENED'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'FXSVSUB02E'\nMSG02FNC DC    CL10' '\n         DC    C' FAILED RC='\nMSG02RC  DC    CL4' '\n         DC    C' '\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'FXSVSUB03I'\n         DC    C'ACB CLOSED'\nMSG03L   EQU   *-MSG03\n         FMH5  DSECT=NO,TRAN=FX      GENERATE FMH5\n         SPACE 2\nRPLI     RPL   AM=VTAM,                                                +\n               AAREA=RPLEXTI\nRPLL     EQU   *-RPLI\nRPLEXTI  ISTRPL6\nRPLEXTL  EQU   *-RPLEXTI\n* ------------------------------------------------------------------- *\n*              WORK AREA                                              *\n* ------------------------------------------------------------------- *\nDXDSVSUB DSECT\nDXDID    DS   CL8                    WORK AREA OWNER EYECATCHER\nDXDSAVE  DS   18F                    REGISTER SAVE AREA\nDXDRPL   DS   A                      ADDRESS OF RPL\nDXDRPLX  DS   A                      ADDRESS OF RPL EXTENSION\nDXDSLIM  DS   (SLIML)X               RESERVE SPACE FOR CNOS LIMIT BLOCK\nDXDFUNC  DS   CL10                   LAST FUNCTION ATTEMPTED\n         PRTBLOK DSECT=NO\n* ------------------------------------------------------------------- *\n*              INTERFACE BLOCK                                        *\n* ------------------------------------------------------------------- *\n         VTAMBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              VTAM SESSION BLOCK                                     *\n* ------------------------------------------------------------------- *\n         SESSBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              VTAM CONVERSATION BLOCK                                *\n* ------------------------------------------------------------------- *\n         CONVBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              ACB DSECT                                              *\n* ------------------------------------------------------------------- *\n         IFGACB AM=VTAM\n* ------------------------------------------------------------------- *\n*              RPL AND RPL EXTENSION DSECTS                           *\n* ------------------------------------------------------------------- *\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------- *\n*              EXLIST                                                 *\n* ------------------------------------------------------------------- *\n         IFGEXLST AM=VTAM\n* ------------------------------------------------------------------- *\n*              NIB                                                    *\n* ------------------------------------------------------------------- *\n         ISTDNIB\n* ------------------------------------------------------------------- *\n*              SESSION LIMITS BLOCK                                   *\n* ------------------------------------------------------------------- *\n         ISTSLCNS\nSLIML    EQU   *-ISTSLCNS\n* ------------------------------------------------------------------- *\n*              DCB DSECT                                              *\n* ------------------------------------------------------------------- *\n         DCBD DSORG=PS\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  FXSVSUB\n./ ADD NAME=FXSVTAM  0100-99056-99056-1500-00586-00586-00000-FX-REL1\n\n         TITLE 'VTAM COMMUNICATION'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSVTAM                                               *\n*                                                                     *\n*           FX communicates with other FX's or users via the LU 6.2   *\n*           protocol.  This module is the main communication driver.  *\n*           Communication functions (like XMIT, RECV, or USER) are    *\n*           sub-functions of this module.                             *\n*                                                                     *\n*           At FX start-up time the APPLID parameter defines the      *\n*           node name FX will use to identify itself to VTAM.  FXNODE *\n*           statements identify other FX's on your network.   All     *\n*           remote FX's must be defined by FXNODE statements. If      *\n*           another FX attempts to start a session and its name is    *\n*           not defined, the session will be rejected (this is an     *\n*           attempt to prevent an unwanted or unauthorized program    *\n*           to receive or transmit data to FX).                       *\n*                                                                     *\n*           Users via TSO or batch can request a data set be          *\n*           transmitted or they may inquire on the status of a        *\n*           previous request.  Authorized users may inquire on the    *\n*           status of FX and issue FX commands (like shutting down    *\n*           FX).   The user interface also uses the LU 6.2 protocol.  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSVTAM    FXPRFX 'VTAM COMMUNICATION MASTER'\nFXSVTAM  AMODE 31\nFXSVTAM  RMODE ANY\n         USING FXSVTAM,R12           DEFINE BASE REGISTER\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    VTAM0010              YES\n         CLI   COMMEOJ,0             SHUTTING DOWN?\n         BNE   EXIT0010              YES.. BYPASS COMPLETELY\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         MVI   PRTCC,C' '            INITIALIZE PRINT I/O AREA\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         MVI   VTAMCMD,$VTAMINT      SET COMMAND (INITIALIZE)\n         BAL   R8,VSUB0000           CALL VSUB\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Scan the session blocks.                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nVTAM0010 DS    0H\n         TM    COMMEOJ,$EOJ3         CLEAN-UP TIME?\n         BO    EXIT0000              YES\n         XC    COMMVECB,COMMVECB     CLEAR ECB POSTED BY ATTN EXIT\n         ITRACE ID=SCANSESS          STARTING SESSION BLOCK SCAN\n         ICM   R7,15,COMMSESS        FIRST SESSION BLOCK\n         USING SESSBLOK,R7           DEFINE BASE\n         BZ    EXIT0010              NO SESSION BLOCKS\n         NI    DXDFLAG,255-$ACTIVE   RESET ACTIVE SESSION INDICATOR\nVTAM0020 DS    0H\n         ST    R7,VTAMSESS           SET SESSION BLOCK ADDRESS\n         CLI   SESSSTAT,$SESSERR+$SESSPND     IS AN ERROR PENDING?\n         BE    LOSS0000              YES\n         ICM   R6,15,SESSCONV        FIRST CONVERSATION BLOCK'S ADDRESS\n         USING CONVBLOK,R6           DEFINE BASE\n         BZ    VTAM0040              NO CONVERSATIONS\nVTAM0030 DS    0H\n         ST    R6,VTAMCONV           SET CONVERSATION BLOCK ADDRESS\n         CLI   SESSSTAT,$SESSERR+$SESSPND     IS AN ERROR PENDING?\n         BE    LOSS0000              YES\n         ITRACE ID=CONVCONT,         CONTINUING AN EXITING CONVERSATION+\n               RDATA1=R7,            .. SESSION BLOCK'S ADDRESS        +\n               RDATA2=R6             .. CONVERSATION BLOCK'S ADDRESS\n         CLI   CONVTYPE,$CONVTU      USER SESSION?\n         BE    USER0000              YES\n         NI    COMMEOJ,255-$EOJ2     SOME ACTIVITY STILL IN PROGRESS\n         CLI   CONVTYPE,$CONVTP      PRIMARY END?\n         BE    SEND0000              YES\n         CLI   CONVTYPE,$CONVTS      SECONDARY END?\n         BE    RECV0000              YES\n         ABEND $U0017,DUMP,,USER     CONVERSATION IN AN UNKNOWN STATE\n*---------------------------------------------------------------------*\n*        We have a defined node with no current activity.  Scan       *\n*        the master file to determine if we have any pending requests *\n*        to send data to this node.                                   *\n*---------------------------------------------------------------------*\nVTAM0040 DS    0H\n         TM    COMMEOJ,$EOJ1         SHUTDOWN IN PROGRESS?\n         BO    NEXT0000              YES.. DON'T START NEW ACTIVITY\n         ITRACE ID=SENDSCAN,         STARTING MASTER FILE SCAN         +\n               DATA1=SESSNAME        .. NODE NAME THAT IS AVAILABLE\n         XC    MSTRREC#,MSTRREC#     INITIALIZE RECORD NUMBER\n         B     VTAM0060\nVTAM0050 DS    0H\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,MSTRREC#         CURRENT MASTER FILE RECORD NUMBER\n         LA    R1,1(R1)              NEXT MASTER FILE NUMBER\n         STCM  R1,3,MSTRREC#         SAVE NEW RECORD NUMBER\nVTAM0060 DS    0H\n         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)\n         BAL   R8,MSTR0000           READ MASTER FILE\n         USING REQBLOK,R5            DEFINE BASE\n         CLI   REQSTAT,0             END OF ACTIVE RECORDS?\n         BE    NEXT0000              YES, LOOK NO FURTHER\n         CLI   REQSTAT,$REQRSTC      RESTORE COMPLETED?\n         BE    VTAM0100              YES\n         TM    REQSTAT,$REQNFYE      ERROR REQUIRING SENDER NOTIFY?\n         BO    VTAM0100              YES\n         CLI   REQSTAT,$REQXRDY      READY FOR TRANSMITTING?\n         BNE   VTAM0050              NO\nVTAM0070 DS    0H\n         ITRACE ID=XREADY,           REQUEST IS READY TO TRANSMIT      +\n               DATA1=REQREC#         .. RECORD NUMBER\n         CLC   REQTNODE,SESSNAME     TO BE TRANSMITTED BY THIS NODE?\n         BE    VTAM0140              YES\n         CLC   REQTNODE,COMMAPLN     ARE WE THE TRANSMITTER?\n         BNE   VTAM0050              NO\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,REQNDE#          NUMBER OF NODES\n         BZ    VTAM0050              NO NODES?\n         LA    R2,REQNDENM           FIRST NODE NAME\n         USING REQNDENM,R2           DEFINE BASE\nVTAM0080 DS    0H\n         CLC   REQNDENM,SESSNAME     SEND TO THIS NODE?\n         BE    VTAM0090              YES\n         LA    R2,REQNDEL(R2)        NEXT NODE\n         BCT   R1,VTAM0080           LOOP\n         B     VTAM0050              NOT FOR THIS NODE\nVTAM0090 DS    0H\n         CLI   REQNDEST,$REQNDEI     IN INITIAL STATUS?\n         BE    VTAM0140              YES\n         B     VTAM0050\n         DROP  R2\nVTAM0100 DS    0H\n         CLC   REQTNODE,SESSNAME     WAS THIS THE TRANSMITTING NODE?\n         BNE   VTAM0130              NO\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,REQNDE#          NUMBER OF NODES\n         BZ    VTAM0050              NO NODES?\n         LA    R2,REQNDENM           FIRST NODE NAME\n         USING REQNDENM,R2           DEFINE BASE\nVTAM0110 DS    0H\n         CLC   REQNDENM,COMMAPLN     IS THIS NODE US?\n         BE    VTAM0120              YES\n         LA    R2,REQNDEL(R2)        NEXT NODE\n         BCT   R1,VTAM0110           LOOP\n         B     VTAM0050              NOT FOR THIS NODE\nVTAM0120 DS    0H\n         CLI   REQNDEST,$REQNDEN     SENDER ALREADY NOTIFIED?\n         BE    VTAM0050              YES\n         B     VTAM0140              SEND RESTORE NOTIFICATION\nVTAM0130 DS    0H\n         CLC   REQENODE,SESSNAME     WAS THIS THE ENTRY NODE?\n         BNE   VTAM0050              NO\n         CLI   REQENST,0             HAS ENTRY NODE BEEN NOTIFIED?\n         BNE   VTAM0050              YES\n         DROP  R2\n*---------------------------------------------------------------------*\n*        We have a transmission request to this node.                 *\n*        If there was an error on the link, or the partner LU was     *\n*        not ready the last time a session was attempted, do not      *\n*        attempt a session again unless the interval value has past.  *\n*---------------------------------------------------------------------*\nVTAM0140 DS    0H\n         TIME  BIN\n         TM    SESSSTAT,$SESSERR     ERROR OR NOT READY LAST TIME?\n         BNO   VTAM0150              NO.. TRY THE SEND NOW\n         C     R1,SESSDATE           SAME DATE?\n         BNE   VTAM0150              NO\n         LR    R2,R0                 COPY TIME IN SECONDS\n         S     R2,SESSTIME           CALCULATE ELAPSED TIME IN SECONDS\n         C     R2,COMMINTV           HAS INTERVAL ELAPSED?\n         BL    NEXT0000              NO, TRY NEXT NODE\nVTAM0150 DS    0H\n         STM   R0,R1,SESSTIME        SAVE TIME AND DATE OF LAST ATTEMPT\n         NI    SESSSTAT,255-$SESSERR RESET ERROR FLAG\n         CLI   SESSSTAT,$SESSRDY     SESSION READY FOR CONVERSATIONS?\n         BE    VTAM0210              YES.. ALLOCATE A CONVERSATION\n         TM    SESSSTAT,$SESSCS      CNOS SENT?\n         BO    VTAM0190              YES.. TEST FOR CNOS PENDING\n         TM    SESSSTAT,$SESSINQ     INQUIRE SENT?\n         BO    VTAM0160              YES.. TEST FOR INQUIRE PENDING\n         ITRACE ID=INQUIRE,          INQUIRE'ING ON PARTNER'S STATUS   +\n               DATA1=SESSNAME        .. PARTNER'S LU NAME\n         MVI   VTAMCMD,$VTAMINQ      SET COMMAND (INQUIRE)\n         BAL   R8,VSUB0000           LINK TO VSUB TO ISSUE INQUIRE\n         B     NEXT0010              ON TO NEXT SESSION\nVTAM0160 DS    0H\n         TM    SESSSTAT,$SESSPND     INQUIRE PENDING?\n         BO    NEXT0010              YES\n         ITRACE ID=INQDONE           INQUIRE DONE\n         L     R3,SESSRPL            RPL'S ADDRESS\n         USING IFGRPL,R3             DEFINE BASE\n         CHECK RPL=(R3)              ISSUE CHECK (NON-APPC TYPE)\n         ITRACE ID=INQFDBK,          INQUIRE FEED BACK                 +\n               DATA1=RPLFDBK         .. FEEDBACK FROM INQUIRE\n         CLC   X144C,RPLFDBK         DEFINED TO VTAM?\n         BE    VTAM0170              NO\n         CLI   RPLFDB3,0             PARTNER READY?\n         BE    VTAM0180              YES\n         ITRACE ID=NOTREADY,         PARTNER NOT READY                 +\n               DATA1=SESSNAME        .. PARTNER'S NAME\n         NI    SESSSTAT,255-$SESSINQ-$SESSPND  RESET INQ AND PENDING\n         OI    SESSSTAT,$SESSERR     PARTNER NOT READY\n         MVC   PRTMSGID(MSG01L),MSG01\n         MVC   PRTMSGID+(MSG01LU-MSG01)(L'MSG01LU),SESSNAME\n         BAL   R8,PRT0000            PRINT MESSAGE\n         B     NEXT0010              ON TO NEXT SESSION\nVTAM0170 DS    0H\n         ITRACE ID=NOTDEF,           PARTNER IS NOT DEFINED TO VTAM    +\n               DATA1=SESSNAME        .. PARTNER'S NAME\n         NI    SESSSTAT,255-$SESSINQ-$SESSPND  RESET INQ AND PENDING\n         OI    SESSSTAT,$SESSERR     PARTNER NOT READY\n         MVC   PRTMSGID(MSG02L),MSG02\n         MVC   PRTMSGID+(MSG02LU-MSG02)(L'MSG02LU),SESSNAME\n         BAL   R8,PRT0000            PRINT MESSAGE\n         B     NEXT0010              ON TO NEXT SESSION\nVTAM0180 DS    0H\n         TM    VTAMCMD,$SESSCS       CNOS ALREADY SENT?\n         BO    VTAM0190              YES\n         ITRACE ID=CNOS,             CHANGING NUMBER OF SESSIONS       +\n               DATA1=SESSNAME        .. PARTNER'S LU NAME\n         MVI   VTAMCMD,$VTAMCNS      SET COMMAND (CNOS)\n         BAL   R8,VSUB0000           LINK TO VSUB TO ISSUE CNOS\n         B     NEXT0010              ON TO NEXT SESSION\nVTAM0190 DS    0H\n         TM    SESSSTAT,$SESSPND     CNOS PENDING?\n         BO    NEXT0010              YES\n         MVI   VTAMCMD,$VTAMCHK      SET COMMAND (ISSUE A CHECK)\n         BAL   R8,VSUB0000           LINK TO VSUB\n         L     R1,SESSRPLX           RPL EXTENSION'S ADDRESS\n         USING ISTRPL6X,R1           DEFINE BASE\n         ITRACE ID=CNOSDONE,         CNOS COMPLETED                    +\n               DATA1=RPL6RC          .. SAVE RETURN CODE FROM CNOS\n         CLC   RPL6RC,X00001         ACCEPTED?\n         BE    VTAM0200              YES\n         CLC   RPL6RC,X002C001C      SINGLE SESSION MODE ALREADY ESTAB?\n         BNE   ERR0010               NO\nVTAM0200 DS    0H\n         ITRACE ID=SESSRDY,          SESSION IS NOW READY              +\n               DATA1=SESSNAME        .. NODE THAT IS NOW READY\n         MVI   SESSSTAT,$SESSRDY     SESSION IS NOW IN 'READY' STATUS\n         MVC   PRTMSGID(MSG03L),MSG03\n         MVC   PRTMSGID+(MSG03LU-MSG03)(L'MSG03LU),SESSNAME\n         BAL   R8,PRT0000            PRINT MESSAGE\nVTAM0210 DS    0H\n         ITRACE ID=ADDCONV           ADDING A CONVERSATION BLOCK\n         FXCALL FXSCONV,ADD,,(R7)    ADD A CONVERSATION BLOCK\n         L     R6,CONVADDR           RETURNED CONVBLOK'S ADDRESS\n         MVC   CONVREC#,MSTRREC#     SAVE MASTER FILE RECORD NUMBER\n         MVI   CONVTYPE,$CONVTP      PRIMARY (SENDING) END\n         ITRACE ID=ALLOC,            ALLOCATING A SESSION              +\n               DATA1=SESSNAME        .. PARTNER'S LU NAME\n         MVI   VTAMCMD,$VTAMALO      SET COMMAND (ALLOCATE A SESSION)\n         BAL   R8,VSUB0000           LINK TO VSUB TO ALLOCATE SESSION\n         B     NEXT0010              ON TO NEXT SESSION\n*---------------------------------------------------------------------*\n*        Process file transmission SENDing                            *\n*---------------------------------------------------------------------*\nSEND0000 DS    0H\n         TM    CONVSTAT,$CONVRDY     CONVERSATION IN READY STATE?\n         BO    SEND0030              YES\n         TM    CONVSTAT,$CONVPND     ALLOCATE STILL PENDING?\n         BO    NEXT0000              YES.. ON TO NEXT SESSION\n         MVI   VTAMCMD,$VTAMCHK      SET COMMAND (ISSUE A CHECK)\n         BAL   R8,VSUB0000           LINK TO VSUB\n         ITRACE ID=ALOCDONE          ALLOCATE COMPLETE\n         L     R1,CONVRPLX           RPL EXTENSION'S ADDRESS\n         OC    RPL6RC,RPL6RC         ALL ZEROS?\n         BNZ   ERR0010               NO\n         MVC   CONVCID,RPL6CNVD      SAVE CONVERSATION ID\n         MVI   CONVSTAT,$CONVRDY     CONVERSATION IS READY\n         ITRACE ID=CONVRDY,          SESSION READY                     +\n               DATA1=SESSNAME,       .. LU'S NAME                      +\n               DATA2=CONVCID         .. CONVERSATION ID\n         MVC   PRTMSGID(MSG04L),MSG04\n         MVC   PRTMSGID+(MSG04LU-MSG04)(L'MSG04LU),SESSNAME\n         UNPK  PRTMSGID+(MSG04CID-MSG04)(9),CONVCID(5)\n         MVZ   PRTMSGID+(MSG04CID-MSG04)(8),HEX0F0F\n         TR    PRTMSGID+(MSG04CID-MSG04)(8),HEXCHAR\n         MVI   PRTMSGID+(MSG04CID-MSG04)+8,C' '\n         BAL   R8,PRT0000            PRINT MESSAGE\n*---------------------------------------------------------------------*\n*   If the conversation is to a destination, update the XMIT start    *\n*   date and time.  If we were a destination, the conversation is     *\n*   to the entry or transmit node (node won't be in the dest list).   *\n*---------------------------------------------------------------------*\n         MVC   MSTRREC#,CONVREC#     SET RECORD NUMBER\n         MVI   MSTRCMD,$MSTRRD       SET COMMAND (READ)\n         BAL   R8,MSTR0000           READ MASTER FILE\n         CLC   REQTNODE,COMMAPLN     ARE WE THE TRANSMITTER?\n         BNE   SEND0030              NO.. DON'T UPDATE XMIT DATE/TIME\n         CLI   REQSTAT,$REQRSTC      ABOUT TO NOTIFY OF RESTORE?\n         BE    SEND0030              YES..\n         TM    REQSTAT,$REQNFYE      ABOUT TO NOTIFY OF ERROR?\n         BO    SEND0030              YES\n         LA    R2,REQNDENM           FIRST NODE\n         USING REQNDENM,R2           DEFINE BASE\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,REQNDE#          NUMBER OF NODES\nSEND0010 DS    0H\n         CLC   SESSNAME,REQNDENM     SENDING TO THIS NODE?\n         BE    SEND0020              YES\n         LA    R2,REQNDEL(R2)        NEXT NODE\n         BCT   R1,SEND0010           LOOP\n         ABEND $U0095,DUMP,,USER     BAD NEWS\nSEND0020 DS    0H\n         TIME  DEC                   GET THE TIME AND DATE\n         STCM  R1,15,REQNDETD        SET DATE TRANSMIT STARTED\n         STCM  R0,15,REQNDETT        SET TIME TRANSMIT STARTED\n         MVI   MSTRCMD,$MSTRWRT      SET COMMAND (WRITE)\n         BAL   R8,MSTR0000           UPDATE MASTER FILE\nSEND0030 DS    0H\n         ITRACE ID=CALLSEND\n         LA    R1,VTAMBLOK           SET PARM ADDRESS\n         L     R15,ASEND             SEND PROCESSOR ENTRY POINT\n         BALR  R14,R15               CALL SEND\n         ICM   R6,15,VTAMCONV        NEXT CONVERSATION BLOCK'S ADDRESS\n         BNZ   VTAM0030              CHECK THIS CONVERSATION\n         B     NEXT0010              GO ON TO NEXT SESSION\n*---------------------------------------------------------------------*\n*        Process file transmissiton RECEIVEing                        *\n*---------------------------------------------------------------------*\nRECV0000 DS    0H\n         ITRACE ID=CALLRECV\n         LA    R1,VTAMBLOK           SET PARM ADDRESS\n         L     R15,ARECV             RECV PROCESSOR ENTRY POINT\n         BALR  R14,R15               CALL RECV\n         ICM   R6,15,VTAMCONV        NEXT CONVERSATION BLOCK'S ADDRESS\n         BNZ   VTAM0030              CHECK THIS CONVERSATION\n         B     NEXT0010              GO ON TO NEXT SESSION\n*---------------------------------------------------------------------*\n*        Process sessions that have had a 'VTAM LOSS'                 *\n*---------------------------------------------------------------------*\nLOSS0000 DS    0H\n         ITRACE ID=LOSS\n         LA    R1,VTAMBLOK           SET PARM ADDRESS\n         L     R15,ALOSS             LOST SESSION CLEAN-UP ENTRY POINT\n         BALR  R14,R15               CALL FXSLOSS\n         ICM   R7,15,VTAMSESS        NEXT SESSION BLOCK ADDRESS\n         BNZ   VTAM0020              GO ON TO NEXT SESSION\n         B     NEXT0020              CONTINUE AS IF NORMAL NEXT SESSION\n*---------------------------------------------------------------------*\n*        User conversation processing                                 *\n*---------------------------------------------------------------------*\nUSER0000 DS    0H\n         ITRACE ID=USERCONV          USER CONVERSATION\n         CLI   CONVFUNC,0            ANY FUNCTION ACTIVE?\n         BE    USER0070              NO.. ISSUE FIRST RECEIVE\n         CLI   CONVFUNC,$CONVFR      RECEIVE?\n         BE    USER0010              YES\n         CLI   CONVFUNC,$CONVFS      SEND?\n         BE    USER0060              YES\n         ITRACE ID=INVUSTAT\n         ABEND $U0042,DUMP,,USER     INVALID USER CONVERSATION STAT\nUSER0010 DS    0H\n         TM    CONVSTAT,$CONVPND     STILL PENDING?\n         BO    NEXT0000              YES\n         MVI   VTAMCMD,$VTAMCHK      ISSUE A CHECK\n         BAL   R8,VSUB0000           LINK TO VSUB\n         ITRACE ID=RECVDONE\n         L     R1,CONVRPLX           RPL EXTENSION'S ADDRESS\n         OC    RPL6RC,RPL6RC         RECEIVE SUCCESSFUL?\n         BNE   ERR0010               NO\n         TM    RPL6RCV1,RPL6WDAL     DE-ALLOCATE RECEIVED?\n         BO    LOSS0000              YES.. SESSION SHUTTING DOWN\n         L     R1,CONVIOA            I/O AREA ADDRESS\n         USING USERREQ,R1            DEFINE BASE\n         CLC   =C'SNAP',USERMOD      SNAP SHOT REQUEST?\n         BE    USER0040              YES..\n*---------------------------------------------------------------------*\n*                                                                     *\n* This routine is sensitive to the module names being in a certain    *\n* format:                                                             *\n*                                                                     *\n*        bytes 1-3   module prefix                                    *\n*              4-7   function name                                    *\n*              8-8   suffix                                           *\n*                                                                     *\n* If the module name structure is changed, the code will have to be   *\n* changed to test for the function name accordingly.                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         LA    R15,COMMUMOD          FIRST USER COMMAND PROCESSOR\nUSER0020 DS    0H\n         CLC   USERMOD,3(R15)        MODULE FOUND?\n         BE    USER0030              YES\n         LA    R15,12(R15)           NEXT MODULE\n         B     USER0020              LOOP\nUSER0030 DS    0H\n         L     R15,8(R15)            USER FUNCTION ENTRY POINT\n         ITRACE ID=CALLUFNC,                                           +\n               DATA1=0(R1),          .. REQUEST CODE                   +\n               RDATA2=R15            .. USER FUNCTION ENTRY POINT\n         BALR  R14,R15               LINK TO REQUESTED FUNCTION\n         B     USER0050\nUSER0040 DS    0H\n         ITRACE ID=CALLSNAP\n         LOAD  EP=FXSSNAP            LOAD SNAP SHOT MODULE\n         LR    R15,R0                COPY ENTRY POINT\n         BALR  R14,R15               LINK TO SNAP SHOT MODULE\n         DELETE EP=FXSSNAP           DELETE SNAP SHOT MODULE\nUSER0050 DS    0H\n         MVI   VTAMCMD,$VTAMSND      SET COMMAND (SEND)\n         BAL   R8,VSUB0000           SEND DATA BACK TO USER\n         B     USER0090              SET 'ACTIVE' INDICATOR\nUSER0060 DS    0H\n         TM    CONVSTAT,$CONVPND     STILL PENDING?\n         BO    USER0090              YES\n         MVI   VTAMCMD,$VTAMCHK      ISSUE A CHECK\n         BAL   R8,VSUB0000           LINK TO VSUB\n         ITRACE ID=SENDDONE\n         B     USER0080\nUSER0070 DS    0H\n         ITRACE ID=1STRECV\nUSER0080 DS    0H\n         MVI   VTAMCMD,$VTAMRCV      SET COMMAND (RECEIVE)\n         BAL   R8,VSUB0000           ISSUE A NEW RECEIVE\n         B     NEXT0000              ON TO NEXT CONVERSATION\nUSER0090 DS    0H\n         OI    DXDFLAG,$ACTIVE       CONVERSATION ACTIVE\n         B     NEXT0000              ON TO NEXT CONVERSATION\n*---------------------------------------------------------------------*\n*        Last session was not ready or another asynchronous event     *\n*        has been started, continue with next conversation/session.   *\n*---------------------------------------------------------------------*\nNEXT0000 DS    0H\n         ITRACE ID=NEXTCONV,         ADVANCING TO NEXT CONVERSATION    +\n               RDATA1=R7,            .. SESSION BLOCK ADDRESS          +\n               RDATA2=R6             .. CONVERSATION BLOCK'S ADDRESS\n         LTR   R6,R6                 ANY CONVERSATION NOW?\n         BZ    NEXT0010              NO\n         ICM   R6,15,CONVNEXT        NEXT CONVERSATION BLOCK'S ADDRESS\n         BNZ   VTAM0030              CHECK THIS CONVERSATION\nNEXT0010 DS    0H\n         ITRACE ID=NEXTSESS\n         ICM   R7,15,SESSNEXT        NEXT SESSION BLOCK'S ADDRESS\n         BNZ   VTAM0020              CHECK THIS SESSION\nNEXT0020 DS    0H\n         TM    DXDFLAG,$ACTIVE       ANY ACTIVE SESSIONS?\n         BO    NEXT0030              YES\n         TM    COMMEOJ,$EOJ1         SHUTDOWN IN PROGRESS?\n         BO    EXIT0010              YES\nNEXT0030 DS    0H\n         TM    COMMVECB,X'40'        VTAM ECB POSTED AGAIN?\n         BO    VTAM0010              YES, RE-SCAN SESSIONS\n         B     EXIT0010              NO MORE SESSIONS, EXIT\n*---------------------------------------------------------------------*\n*        ERROR SITUATIONS                                             *\n*---------------------------------------------------------------------*\nERR0010  DS    0H\n         USING ISTRPL6X,R1           DEFINE BASE\n         ITRACE ID=VTAMERR,          VTAM ERROR OF SOME SORT           +\n               DATA1=RPL6RC          .. ERROR CODES\n*****\n*****\n*****  IF FX IS NOT ABENDED, THE CONVBLOK SHOULD BE DELETED\n*****\n*****\n         ABEND $U0057,DUMP,,USER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        LINK TO VSUB                                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVSUB0000 DS    0H\n         ITRACE ID=VSUB,             LINKING TO VSUB                   +\n               DATA1=VTAMCMD         .. COMMAND\n         LA    R1,VTAMBLOK           PARM BLOCK'S ADDRESS\n         L     R15,AVSUB             VSUB ENTRY POINT\n         BALR  R14,R15               LINK TO VSUB\n         BR    R8                    RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Read or write master file records                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSTR0000 DS    0H\n         ITRACE ID=MSTRIO\n         FXCALL FXSMSTR              LINK TO MASTER FILE I/O\n         LA    R5,MSTRRECD           SET DATA ADDRESS\n         BR    R8                    RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        PRINT                                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         ITRACE ID=PRINT\n         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE\n         BR    R8                    DONE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        EXIT                                                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=VTAMCLSE          CLOSING UP VTAM STUFF\n         L     R15,AVSUB             SUB-FUNCTION ENTRY POINT\n         BALR  R14,R15               LINK TO VSUB\nEXIT0010 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            CALLER'S SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE CALLER'S REGISTERS\n         SR    R15,R15               ALWAYS A GOOD RETURN CODE\n         BR    R14                   RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDSVTAM)           DISPLACEMENT TO WORK AREA\nF6000    DC    F'6000'               ONE MINUTE IN 100'THS OF SECONDS\nX00001   DC    X'00000001'\nX002C001C DC    X'002C001C'          NICE TO HAVE THE H ASSEMBLER\nX144C    DC    X'144C'\nHEX0F0F  DC    8X'0F'\nHEXCHAR  DC    C'0123456789ABCDEF'\nMSG01    DS    0C\n         DC    CL11'FXSVTAM01W'\n         DC    C'FX NODE '\nMSG01LU  DC    CL8' '\n         DC    C' NOT READY'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'FXSVTAM02W'\n         DC    C'FX NODE '\nMSG02LU  DC    CL8' '\n         DC    C' NOT DEFINED TO VTAM'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'FXSVTAM03I'\n         DC    C'FX NODE '\nMSG03LU  DC    CL8' '\n         DC    C' NOW READY'\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    CL11'FXSVTAM04I'\n         DC    C'CONVERSATION TO NODE '\nMSG04LU  DC    CL8' '\n         DC    C' READY, CID='\nMSG04CID DC    CL8' '\n         DC    C' '\nMSG04L   EQU   *-MSG04\n         SPACE 2\n* ------------------------------------------------------------------- *\n*              WORK AREA                                              *\n* ------------------------------------------------------------------- *\nDXDSVTAM DSECT\nDXDID    DS   CL8                    WORK AREA OWNER EYECATCHER\nDXDSAVE  DS   18F                    REGISTER SAVE AREA\nDXDFLAG  DS   X                      FLAGS/INDICATORS\n$ACTIVE  EQU  X'80'                  SOME SESSION IS ACTIVE\n         PRTBLOK  DSECT=NO\n         MSTRREQ  DSECT=NO\n         DAIRREQ  DSECT=NO\n         VTAMBLOK DSECT=NO\n         CONVREQ  DSECT=NO\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              VTAM SESSION BLOCK                                     *\n* ------------------------------------------------------------------- *\n         SESSBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              VTAM CONVERSATION BLOCK                                *\n* ------------------------------------------------------------------- *\n         CONVBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              USER RESPONSE/REQUEST BLOCK                            *\n* ------------------------------------------------------------------- *\n         USERREQ\n* ------------------------------------------------------------------- *\n*              MASTER FILE RECORD                                     *\n* ------------------------------------------------------------------- *\n         REQBLOK  DSECT=YES\n* ------------------------------------------------------------------- *\n*              RPL AND RPL EXTENSION DSECTS                           *\n* ------------------------------------------------------------------- *\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  FXSVTAM\n./ ADD NAME=FXSVTOC  0100-99056-99056-1500-00312-00312-00000-FX-REL1\n\n         TITLE 'FXSVTOC  VTOC functions'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSVTOC                                               *\n*                                                                     *\n*  Functions:                                                         *\n*   '1' Determine staging device characteristics                      *\n*   '2' Determine data set size in bytes by examining the extents on  *\n*       the specified volume.                                         *\n*   '3' Convert a data set size in bytes to an equivalent number of   *\n*       tracks.                                                       *\n*   '4' Determine data set organization.                              *\n*                                                                     *\n*   The interface block is VTOCREQ.                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSVTOC    FXPRFX 'VTOC FUNCTIONS'\nFXSVTOC  AMODE 31\nFXSVTOC  RMODE ANY\n         LR    R8,R1                 COPY PARAMETER BLOCK ADDRESS\n         USING VTOCREQ,R8            DEFINE BASE\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    VTOC0010              YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         GETMAIN RU,                 ACQUIRE STORAGE FOR 24-BIT PARMS  +\n               LV=FX24L,             .. SIZE OF AREA                   +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,DXD24              SAVE 24-BIT PARM AREA ADDRESS\nVTOC0010 DS    0H\n         L     R9,DXD24              24-BIT PARM AREA ADDRESS\n         USING FX24PRM,R9            DEFINE BASE\n         TM    COMMEOJ,$EOJ3         CLEAN-UP TIME?\n         BO    EXIT0000              YES\n         CLI   VTOCCMD,$VTOCDEV      STAGE DEVICE CHARACTERISTICS?\n         BE    VTOC0100              YES\n         CLI   VTOCCMD,$VTOCXNT      DETERMINE DATA SET SIZE?\n         BE    VTOC0200              YES\n         CLI   VTOCCMD,$VTOCTRK      CONVERT SIZE TO TRACKS?\n         BE    VTOC0400              YES\n         CLI   VTOCCMD,$VTOCDSO      DETERMINE DATA SET ORGANIZATION?\n         BE    VTOC0210              YES\n         ITRACE ID=BADCMD\n         ABEND $U0018,DUMP,,USER     SORRY\nVTOC0100 DS    0H\n         ITRACE ID=VTOCDEV\n         ICM   R6,15,COMMSTGE        FIRST STAGE DEVICE BLOCK\n         USING STGEDEV,R6            DEFINE BASE\n         BZ    ERR0010               SHOULD NEVER HAPPEN\nVTOC0110 DS    0H\n         MVC   VOL24,STGEVOL         COPY VOLSER\n         MVC   DSN24,FMT4NAME        FORMAT-4 DATA SET'S NAME\n         ITRACE ID=STGEFMT4          ABOUT TO READ FMT-4\n         FX24  $CAMLSTN              LINK TO OBTAIN\n         LTR   R15,R15               OBTAIN SUCCESSFUL?\n         BNZ   ERR0020               NO\n         LA    R2,VTOC24             FORMAT-4 DATA\n         USING DSCB,R2               DEFINE BASE\n         CLI   DS4IDFMT,C'4'         FORMAT-4 ID PRESENT?\n         BNE   ERR0030               NO\n         MVC   STGETRCL,DS4DEVSZ+2   COPY TRACKS PER CYLINDER\n         XC    STGETRSZ,STGETRSZ     CLEAR ALL 4 BYTES\n         MVC   STGETRSZ+2(2),DS4DEVTK COPY TRACK SIZE\n         ICM   R6,15,STGENEXT        NEXT STAGING DEVICE BLOCK\n         BNZ   VTOC0110              PROCESS ALL STAGING DEVICES\n         B     EXIT0010              EXIT\n*---------------------------------------------------------------------*\n*        CALCULATE DATA SET SIZE ON SPECIFIED VOLUME                  *\n*---------------------------------------------------------------------*\nVTOC0200 DS    0H\n         ITRACE ID=FILESIZE          CALCULATING DATA SET SIZE\n         L     R1,VTOCVOL            VOLSER ADDRESS\n         MVC   VOL24,0(R1)           SET VOLSER\n         MVC   DSN24,FMT4NAME        FORMAT-4 DATA SET'S NAME\n         ITRACE ID=READFMT4          ABOUT TO READ FMT-4\n         FX24  $CAMLSTN              LINK TO OBTAIN\n         LTR   R15,R15               OBTAIN SUCCESSFUL?\n         BNZ   ERR0040               NO\n         LA    R2,VTOC24             FORMAT-4 DATA IN WORK AREA\n         USING DSCB,R2               DEFINE BASE\n         CLI   DS4IDFMT,C'4'         FORMAT-4 ID PRESENT?\n         BNE   ERR0050               NO\n         MVC   DXDTRCYL,DS4DEVSZ+2   COPY TRACKS PER CYLINDER\n         XC    DXDTRSZ,DXDTRSZ       CLEAR ALL 4 BYTES\n         MVC   DXDTRSZ+2(2),DS4DEVTK COPY TRACK SIZE\n         ITRACE ID=DEVSIZE,          TRACE DEVICE SIZE                 +\n               DATA1=DXDTRCYL,       .. TRACKS PER CYLINDER            +\n               DATA2=DXDTRSZ         .. TRACK SIZE\n         B     VTOC0220\n*---------------------------------------------------------------------*\n*        Determine data set organization\n*---------------------------------------------------------------------*\nVTOC0210 DS    0H\n         ITRACE ID=DSORG             DETERMINING DATA SET ORGANIZATION\n         L     R1,VTOCVOL            VOLSER ADDRESS\n         MVC   VOL24,0(R1)           SET VOLSER\nVTOC0220 DS    0H\n         ITRACE ID=READFMT1          ABOUT TO READ FMT-1\n         L     R1,VTOCDSN            DATA SET NAME ADDRESS\n         MVC   DSN24,0(R1)           SET DATA SET NAME\n         FX24  $CAMLSTN              LINK TO OBTAIN\n         LTR   R15,R15               OBTAIN SUCCESSFUL?\n         BNZ   ERR0060               NO\n         LA    R2,VTOC24             VTOC DATA IN WORK AREA\n         CLI   DS1FMTID,C'1'         FORMAT-1 ID PRESENT?\n         BNE   ERR0070               NO\n         TM    DS1DSORG,DS1DSGIS     ISAM?\n         BO    ERR0080               YES.. NOT SUPPORTED\n         TM    DS1DSORG,DS1DSGDA     DA?\n         BO    VTOC0230              YES\n         TM    DS1DSORG,DS1DSGPO     PDS?\n         BO    VTOC0240              YES\n         TM    DS1DSORG,DS1DSGPS     SEQUENTIAL?\n         BO    VTOC0250              YES\n         TM    DS1DSORG+1,DS1ACBM    VSAM?\n         BO    VTOC0260              YES\n         MVI   VTOCDSO,$VTOCUKN      DSORG IS UNKOWN\n         B     VTOC0270\nVTOC0230 DS    0H\n         MVI   VTOCDSO,$VTOCDA       DSORG IS DA\n         B     VTOC0270\nVTOC0240 DS    0H\n         MVI   VTOCDSO,$VTOCPO       DSORG IS PO (PDS)\n         B     VTOC0270\nVTOC0250 DS    0H\n         MVI   VTOCDSO,$VTOCPS       DSORG IS PS\n         B     VTOC0270\nVTOC0260 DS    0H\n         MVI   VTOCDSO,$VTOCVS       DSORG IS VSAM\n         B     VTOC0270\nVTOC0270 DS    0H\n         CLI   VTOCCMD,$VTOCDSO      DETERMINE DATA SET ORGANIZATION?\n         BE    EXIT0010              YES\n         SR    R3,R3                 CLEAR FOR TOTAL TRACKS\n         LA    R4,DS1EXT1            FIRST EXTENT\n         LA    R5,3                  NUMBER OF EXTENTS\n         BAL   R7,VTOC0300           CALCULATE NUMBER OF TRACKS\n         OC    DS1PTRDS,DS1PTRDS     FORMAT-3 ADDRESS PRESENT?\n         BZ    VTOC0290              NO\n         MVC   CCHHR24,DS1PTRDS      SET ADDRESS\nVTOC0280 DS    0H\n         ITRACE ID=READFMT3          ABOUT TO READ FMT-3\n         FX24  $CAMLSTA              LINK TO OBTAIN\n         LTR   R15,R15               OBTAIN SUCCESSFUL?\n         BNZ   ERR0090               NO\n         LA    R2,VTOC24             VTOC DATA IN WORK AREA\n         CLI   DS3FMTID,C'3'         FORMAT-3 ID PRESENT?\n         BNE   ERR0100               NO\n         LA    R4,DS3EXTNT           FIRST EXTENT\n         LA    R5,4                  NUMBER OF EXTENTS\n         BAL   R7,VTOC0300           CALCULATE NUMBER OF TRACKS\n         LA    R4,DS3ADEXT           FIRST EXTENT\n         LA    R5,9                  NUMBER OF EXTENTS\n         BAL   R7,VTOC0300           CALCULATE NUMBER OF TRACKS\n         OC    DS3PTRDS,DS3PTRDS     FORMAT-3 ADDRESS PRESENT?\n         BZ    VTOC0290              NO\n         MVC   CCHHR24,DS3PTRDS      SET ADDRESS\n         B     VTOC0280              PROCESS THIS FORMAT-3\n* ------------------------------------------------------------------- *\n*        EXTENTS IN TRACKS SHOULD BE IN REGISTER 3                    *\n* ------------------------------------------------------------------- *\nVTOC0290 DS    0H\n         ITRACE ID=XTNTEOV           END OF EXTENTS ON THIS VOLUME\n         SR    R2,R2                 CLEAR FOR MULTIPLICATION\n         M     R2,DXDTRSZ            COMPUTE TOTAL NUMBER OF BYTES\n         ST    R3,VTOCDSSZ           RETURN SIZE IN BYTES\n         B     EXIT0010              AND EXIT\n* ------------------------------------------------------------------- *\n*        CALCULATE TRACKS IN EXTENTS                                  *\n* ------------------------------------------------------------------- *\nVTOC0300 DS    0H\n         OC    0(L'DS1EXT1,R4),0(R4)  ALL ZEROS?\n         BZR   R7                     YES\n         ITRACE ID=EXTENT,            TRACE EACH EXTENT                +\n               DATA1=2(R4)            .. LOW/HIGH CYLINDER/HEAD\n         LH    R0,2(R4)               LOW CYLINDER NUMBER\n         MH    R0,DXDTRCYL            TIMES TRACKS PER CYLINDER\n         AH    R0,4(R4)               PLUS HEAD NUMBER\n         LH    R1,6(R4)               HIGH CYLINDER NUMBER\n         MH    R1,DXDTRCYL            TIMES TRACKS PER CYLINDER\n         AH    R1,8(R4)               PLUS HEAD NUMBER\n         SR    R1,R0                  NUMBER TRACKS (MINUS 1)\n         LA    R3,1(R1,R3)            ADD TRACKS IN EXTENT TO TOTAL\n         LA    R4,L'DS1EXT1(R4)       NEXT EXTENT\n         BCT   R5,VTOC0300            PROCESS ALL EXTENTS\n         BR    R7                     RETURN\n* ------------------------------------------------------------------- *\n*        CONVERT DATA SET SIZE IN BYTES TO EQUIVALENT NUMBER OF       *\n*        TRACKS.                                                      *\n* ------------------------------------------------------------------- *\nVTOC0400 DS    0H\n         ITRACE ID=CONVTRKS\n         L     R6,VTOCDEV            STAGING DEVICE BLOCK'S ADDRESS\n         SR    R0,R0                 CLEAR REGISTER\n         L     R1,VTOCDSSZ           DATA SET SIZE (IN BYTES)\n         D     R0,STGETRSZ           COMPUTE NUMBER OF TRACKS\n         LTR   R0,R0                 ANY REMAINDER?\n         BZ    VTOC0410              NO\n         LA    R1,1(R1)              ADD 1 TRACK\nVTOC0410 DS    0H\n         STCM  R1,15,VTOCTRKP        SET PRIMARY TRACKS\n         SR    R0,R0                 CLEAR FOR DIVIDE\n         D     R0,F10                COMPUTE 10 PERCENT OF SIZE\n         LTR   R0,R0                 ANY REMAINDER?\n         BZ    VTOC0420              NO\n         LA    R1,1(R1)              ADD 1 TRACK\nVTOC0420 DS    0H\n         STCM  R1,15,VTOCTRKS        SET SECONDARY TRACKS\n         ITRACE ID=CONVTRKX,                                           +\n               DATA1=VTOCDSSZ,       .. DATA SET SIZE IN BYTES         +\n               DATA2=VTOCTRKP        .. PRIMARY SIZE\n         B     EXIT0010              AND EXIT\n* ------------------------------------------------------------------- *\n*        ERROR ROUTINES                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=NODEV\n         ABEND $U0013,DUMP,,USER     ABEND\nERR0020  DS    0H\n         ITRACE ID=DEVFMT4O          OBTAIN FAILED\n         ABEND $U0014,DUMP,,USER     ABEND\nERR0030  DS    0H\n         ITRACE ID=DEVFMT4I          FORMAT-4 DOES NOT HAVE CORRECT ID\n         ABEND $U0015,DUMP,,USER     ABEND\nERR0040  DS    0H\n         ITRACE ID=DSNFMT4O          OBTAIN FAILED\n         ABEND $U0019,DUMP,,USER     ABEND\nERR0050  DS    0H\n         ITRACE ID=DSNFMT4I          FORMAT-4 DOES NOT HAVE CORRECT ID\n         ABEND $U0020,DUMP,,USER     ABEND\nERR0060  DS    0H\n         ITRACE ID=DSNFMT1O          OBTAIN FAILED\n         ABEND $U0021,DUMP,,USER     ABEND\nERR0070  DS    0H\n         ITRACE ID=DSNFMT1I          FORMAT-1 DOES NOT HAVE CORRECT ID\n         ABEND $U0022,DUMP,,USER     ABEND\nERR0080  DS    0H\n         ITRACE ID=ISAM\n         MVI   VTOCDSO,$VTOCIS       DATA SET IS ISAM, NOT SUPPORTED\n         B     EXIT0010              EXIT\nERR0090  DS    0H\n         ITRACE ID=DSNFMT1O          OBTAIN FAILED\n         ABEND $U0023,DUMP,,USER     ABEND\nERR0100  DS    0H\n         ITRACE ID=DSNFMT1I          FORMAT-3 DOES NOT HAVE CORRECT ID\n         ABEND $U0024,DUMP,,USER     ABEND\n* ------------------------------------------------------------------- *\n*        EXIT                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         L     R9,DXD24              24-BIT PARM LIST ADDRESS\n         FREEMAIN RU,A=(R9),LV=FX24L\nEXIT0010 DS    0H\n         ITRACE ID=EXIT              EXITING PRINT MODULE\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDSVTOC)           DISPLACEMENT TO WORK AREA\nF1       DC    F'1'\nF10      DC    F'10'\nFMT4NAME DC    44X'04'\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSVTOC DSECT\nDXDID    DS    CL8                   OWNING MODULE NAME\nDXDSAVE  DS    18F                   REGISTER SAVE AREA\nDXD24    DS    A                     24-BIT PARM AREA ADDRESS\nDXDTRSZ  DS    F                     TRACKS PER CYLINDER\nDXDTRCYL DS    H                     TRACK SIZE\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              24-BIT MODULE MAP                                      *\n* ------------------------------------------------------------------- *\n         FX24PRM  DSECT=YES\n* ------------------------------------------------------------------- *\n*              STAGING DEVICE BLOCK                                   *\n* ------------------------------------------------------------------- *\n         STGEDEV  DSECT=YES\n* ------------------------------------------------------------------- *\n*              VTOC INTERFACE BLOCK                                   *\n* ------------------------------------------------------------------- *\n         VTOCREQ  DSECT=YES\n* ------------------------------------------------------------------- *\n*              VTOC RECORD FORMATS                                    *\n* ------------------------------------------------------------------- *\nDSCB     DSECT\n         IECSDSL1 1                 FORMAT-1 RECORD\n         ORG DS1DSNAM\n         IECSDSL1 3                 FORMAT-3 RECORD\n         ORG DS1FMTID\n         IECSDSL1 4                 FORMAT-4 RECORD\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  FXSVTOC\n./ ADD NAME=FXSXTR   0100-99056-99056-1500-00150-00150-00000-FX-REL1\n\n         TITLE 'FXSXTR     EXTERNAL TRACE SUBTASK'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSXTR                                                *\n*                                                                     *\n*  Function:                                                          *\n*   If the FXSXTR DD statement is present in the start-up JCL,        *\n*   FXSMAIN ATTACH's this subtask.   All internal trace entries as    *\n*   well as other key items will be written to the external trace.    *\n*                                                                     *\n* *** WARNING This module cannot use the ITRACE macro.                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXSXTR   CSECT\nFXSXTR   AMODE 31\nFXSXTR   RMODE 24\n         USING FXSXTR,R12            DEFINE BASE\n         USING XTRRECD,R7            DEFINE BASE\n         USING FXCOMMON,R11          DEFINE BASE\n         STM   R14,R12,12(R13)       CHAIN REGISTERS\n         LR    R12,R15               COPY ENTRY POINT ADDRESS\n         L     R11,0(R1)             LOAD COMMON DATA ADDRESS\n         GETMAIN R,LV=WORKL          ACQUIRE STORAGE FOR WORK AREA\n         B     XTR0000\n         DC    CL8'FXSXTR'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nXTR0000  DS    0H\n         USING WORKAREA,R1           DEFINE BASE\n         XC    WORKAREA(WORKL),WORKAREA\n         ST    R13,4(R1)             CHAIN PREVIOUS SAVE AREA TO OURS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO PREVIOUS\n         LR    R13,R1                COPY WORK AREA ADDRESS\n         DROP  R1\n         USING WORKAREA,R13          DEFINE BASE\n         ST    R12,AXTR              SET OUR ENTRY POINT IN COMMON\n         MVC   WKDCB(DCBL),DCBI      INITIALIZE DCB IN WORK AREA\n         MVC   WKOCPL(OCPLL),OCPLI   INITIALIZE OPEN/CLOSE PARM LIST\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         OPEN  (WKDCB,OUTPUT),MF=(E,WKOCPL)\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         TM    XTRWORK,X'40'         ECB ALREADY POSTED?\n         BO    XTR0020               GET BUSY\nXTR0010  DS    0H\n         LA    R1,XTRWORK            WORK TO DO ECB\n         XC    XTRWORK,XTRWORK       RESET ECB\n         WAIT  1,ECB=(1)             WAIT FOR WORK TO DO ECB\nXTR0020  DS    0H\n         SR    R1,R1                 CLEAR REGISTER\nXTR0030  DS    0H\n         ICM   R10,15,XTRREQ         FIRST REQUEST BLOCK\n         BZ    XTR0060               NOTHING ON CHAIN\n         CS    R10,R1,XTRREQ         GET REQUEST CHAIN\n         BNE   XTR0030\n         USING XTRRECD,R10           DEFINE BASE\nXTR0040  DS    0H\n         L     R2,XTRNEXT            NEXT BLOCK'S ADDRESS\n         ST    R1,XTRNEXT            SET POINTER\n         LR    R1,R10                SWITCH\n         LTR   R10,R2                SWITCH\n         BNZ   XTR0040               LOOP\n         LR    R10,R1                COPY FIRST BLOCK'S ADDRESS\nXTR0050  DS    0H\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         PUT   WKDCB,XTRTIME         WRITE TO EXTERNAL TRACE\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         LR    R1,R10                COPY XTRRECD ADDRESS\n         L     R10,XTRNEXT           NEXT BLOCK'S ADDRESS\n         FREEMAIN RU,A=(1),LV=XTRRECDL\n         LTR   R10,R10               ANY MORE PRINT BLOCKS?\n         BNZ   XTR0050               YES\n         OC    XTRWORK,XTRWORK       ECB POSTED AGAIN?\n         BNZ   XTR0020               YES, PROCESS QUEUE\nXTR0060  DS    0H\n         TM    XTRFLAG,$XTREOJ       SHUTDOWN?\n         BO    EXIT0000              YES.. IT'S MILLER TIME\n         B     XTR0010               NO, WAIT\n* ------------------------------------------------------------------- *\n*        ADDRESSING MODE SWITCHING                                    *\n* ------------------------------------------------------------------- *\nAM24     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         BSM   R0,R15                RETURN IN 24-BIT MODE\nAM31     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         O     R15,X80               SET HIGH BIT ON\n         BSM   R0,R15                RETURN IN 31-BIT MODE\n* ------------------------------------------------------------------- *\n*        EXIT                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         CLOSE WKDCB,MF=(E,WKOCPL)   CLOSE DCB\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         LR    R1,R13                COPY WORK AREA ADDRESS\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         FREEMAIN R,A=(1),LV=WORKL   FREE WORK AREA\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nX80      DC    A(X'80000000')\nDCBI     DCB   DSORG=PS,                                               +\n               DDNAME=FXSXTR,                                          +\n               RECFM=FB,                                               +\n               LRECL=XTRDATAL,                                         +\n               BLKSIZE=100*XTRDATAL,                                   +\n               MACRF=PM\nDCBL     EQU   *-DCBI\nOCPLI    OPEN  (*,OUTPUT),MF=L\nOCPLL    EQU   *-OCPLI\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWORKAREA DSECT\nWORKSAVE DS    18F                   REGISTER SAVE AREA\nWKDCB    DS    0A,(DCBL)X            RESERVE SPACE FOR DCB\nWKOCPL   DS    (OCPLL)X\nWORKL    EQU   *-WORKAREA\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\nFXCOMMON DSECT\n         COMMCOMM COMMNAME=FXCOMMON\n* ------------------------------------------------------------------- *\n*              INTERNAL TRACE RECORD                                  *\n* ------------------------------------------------------------------- *\n         COPY  TRENTRY\n* ------------------------------------------------------------------- *\n*              EXTERNAL TRACE RECORD                                  *\n* ------------------------------------------------------------------- *\n         XTRRECD\n* ------------------------------------------------------------------- *\n*              MODULE PREFIX                                          *\n* ------------------------------------------------------------------- *\n         FXPRFX TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  FXSXTR\n./ ADD NAME=FXTCOMM  0100-99056-99056-1500-00014-00014-00000-FX-REL1\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Name: FXTCOMM                                                      *\n*                                                                     *\n*  TSO interface common data and trace table manager                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  OPTIONS\n         FXTCOMM TYPE=CSECT\nFXTCOMM  CSECT\n         DC    X'FF'\n         COPY  REGEQU\n         END   FXTCOMM\n./ ADD NAME=FXTINIT  0100-99056-99056-1500-00366-00366-00000-FX-REL1\n\n         TITLE 'FXTINIT TSO INTERFACE INITIALIZATION'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: FXTINIT                                               *\n*                                                                     *\n*  TSO interface initialization                                       *\n*   1) Acquire storage for ACB, RPL, etc                              *\n*   2) Determine an available user interface ACB name and open the    *\n*      ACB.                                                           *\n*   3) Determine the user's FX user authority.                        *\n*   4) Define the SPF variables                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTINIT    FXPRFX 'TSO INTERFACE INITIALIZATION',COMM=FXTCOMM\nFXTINIT  AMODE 31\nFXTINIT  RMODE ANY\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         LA    R0,ACBL               ACB'S SIZE\n         ST    R0,COMMACBL           SET ACB SIZE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR AN ACB        +\n               LV=(0),               .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,COMMACB            SAVE ACB'S ADDRESS\n         LR    R2,R1                 COPY ACB ADDRESS\n         USING IFGACB,R2             DEFINE BASE\n         MVC   0(ACBL,R1),ACBI       INITIALIZE ACB\n         ST    R11,ACBUSER           SET FXTCOMM ADDRESS IN ACB\n         LA    R0,EXLSTL             EXLST SIZE\n         ST    R0,COMMXLSL           SET EXLST'S SIZE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR AN EXIT LIST  +\n               LV=(0),               .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         MVC   0(EXLSTL,R1),EXLSTI   INITIALIZE EXIT LIST\n         ST    R1,COMMXLST           SAVE EXIT LIST'S ADDRESS\n         LA    R0,COMMAPLL           APPLID'S LENGTH ADDRESS\n         ST    R0,ACBAPID            SET APPLID ADDRESS IN ACB\n         ST    R1,ACBEXLST           SET EXLST'S ADDRESS\n         USING IFGEXLST,R1           DEFINE BASE\n         XC    EXLATTNP,EXLATTNP     NO ATTN EXIT\n         MVC   EXLLERP,ALERAD        SET LERAD EXIT ADDRESS\n         LA    R0,RPLL               RPL'S SIZE\n         ST    R0,COMMRPLL           SET RPL SIZE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL           +\n               LV=(0),               .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,COMMRPL            SAVE RPL'S ADDRESS\n         MVC   0(RPLL,R1),RPLI       INITIALIZE RPL\n         LA    R0,RPLEXTL            RPL EXTENSION SIZE\n         ST    R0,COMMRPXL           SET RPL EXTENSION'S SIZE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL EXTENSION +\n               LV=(0),               .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,COMMRPLX           SAVE RPL'S ADDRESS\n         LR    R5,R1                 COPY RPL EXTENSION'S ADDRESS\n         MVC   0(RPLEXTL,R1),RPLEXTI INITIALIZE RPL EXTENSION\n         L     R3,COMMRPL            RPL'S ADDRESS\n         USING IFGRPL,R3             DEFINE BASE\n         ST    R1,RPLAAREA           SET RPL EXTENSION'S ADDRESS\n         MVC   RPLDACB,COMMACB       SET ACB'S ADDRESS\n         LA    R0,NIBL               NIB'S SIZE\n         ST    R0,COMMNIBL           SET NIB'S SIZE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR NIB           +\n               LV=(0),               .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         MVC   0(NIBL,R1),NIBI       INITIALIZE NIB\n         ST    R1,COMMNIB            SET NIB'S ADDRESS\n         LR    R4,R1                 COPY NIB'S ADDRESS\n         GETMAIN RU,                 ACQUIRE STORAGE FOR I/O AREA      +\n               LV=COMMIOSZ,          .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,COMMIOA            SAVE I/O AREA ADDRESS\n         LR    R6,R1                 SET I/O AREA ADDRESS\n         USING USERREQ,R6            DEFINE BASE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR OPEN/CLOSE    +\n               LV=OCPLL,             .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R7,R1                 COPY STORAGE ADDRESS\n         MVC   0(OCPLL,R7),OCPLI     COPY OPEN/CLOSE PARM LIST\n         ITRACE ID=OPENACB           OPENING ACB\n         MVC   DXDFUNC,OPENACB       LAST FUNCTION IS OPEN\n         LOAD  EP=FXACB              LOAD ACB NAMES MODULE\n         LR    R8,R0                 COPY ACB NAMES ADDRESS\nTINIT010 DS    0H\n         ITRACE ID=ACBNAME,          TRACE EACH OPEN ATTEMPT           +\n               DATA1=0(R8)           .. TRACE THE NAME\n         MVC   COMMAPLN,0(R8)        COPY ACB NAME\n         OPEN  ((R2)),MF=(E,(R7))    OPEN ACB\n         ITRACE ID=OPENRC,           RETURN CODE FROM OPEN             +\n               RDATA1=R15            .. TRACE RETURN CODE\n         LTR   R15,R15               OPEN SUCCESSFUL?\n         BZ    TINIT020              YES\n         LA    R8,8(R8)              NEXT ACB NAME\n         CLI   0(R8),X'FF'           END OF TABLE?\n         BNE   TINIT010              NO\n         DELETE EP=FXACB             DELETE ACB NAMES MODULE\n         ITRACE ID=NOAPPL\n         LA    R2,MSG01L             MESSAGE LENGTH\n         GETMAIN RU,                 ACQUIRE STORAGE FOR TPUT          +\n               LV=(R2),              .. SIZE OF AREA                   +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R3,R1                 COPY STORAGE ADDRESS\n         MVC   0(MSG01L,R3),MSG01    COPY MESSAGE\n         TPUT  (R3),(R2)             ISSUE TPUT\n         FREEMAIN RU,A=(3),LV=MSG01L FREE MESSAGE STORAGE\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         B     EXIT0000              EXIT\nTINIT020 DS    0H\n         DELETE EP=FXACB             DELETE ACB NAMES MODULE\n         OI    COMMFLAG,$ACBOPEN     ACB IS OPEN\n         FREEMAIN RU,A=(R7),LV=OCPLL FREEMAIN OPEN/CLOSE PARM LIST\n         ITRACE ID=SETLOGON          OPENING ACB\n         MVC   DXDFUNC,SETLOGON      LAST FUNCTION\n         SETLOGON ACB=(R2),          ISSUE SETLOGON                    +\n               RPL=(R3),             .. RPL FOR REQUEST                +\n               OPTCD=START           .. ENABLE EXIT\n         LTR   R15,R15               SET LOGON SUCCESSFUL?\n         BZ    TINIT030              YES\n         ITRACE ID=LOGONF,           SET LOGON FAILED                  +\n               RDATA1=R15            .. TRACE RETURN CODE\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         B     EXIT0000              EXIT\nTINIT030 DS    0H\n         USING ISTDNIB,R4            DEFINE BASE\n         MVC   NIBSYM,COMMFX         SET FX STC'S APPL NAME\n         ITRACE ID=INQUIRE\n         MVC   DXDFUNC,INQUIRE       SET LAST COMMAND\n         INQUIRE RPL=(R3),           ISSUE INQUIRE                     +\n               NIB=(R4),             .. NIB'S ADDRESS                  +\n               OPTCD=APPSTAT         .. WE WANT PARTNER'S STATUS\n         CLI   RPLFDB3,0             PARTNER READY?\n         BE    TINIT040              YES\n         ITRACE ID=FXNTRDY           FX STC IS NOT READY\n         LA    R2,MSG02L             MESSAGE LENGTH\n         GETMAIN RU,                 ACQUIRE STORAGE FOR TPUT          +\n               LV=(R2),              .. SIZE OF AREA                   +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R3,R1                 COPY STORAGE ADDRESS\n         MVC   0(MSG02L,R3),MSG02    COPY MESSAGE\n         TPUT  (R3),(R2)             ISSUE TPUT\n         FREEMAIN RU,A=(3),LV=MSG02L FREE MESSAGE STORAGE\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         B     EXIT0000              EXIT\nTINIT040 DS    0H\n         ITRACE ID=CNOS\n         MVC   DXDFUNC,CNOS          LAST FUNCTION ATTEMPTED\n         USING ISTRPL6X,R5           DEFINE BASE\n         MVC   RPL6LU,COMMFX         SET PARTNER'S LU NAME\n         APPCCMD CONTROL=OPRCNTL,    ISSUE APPC COMMAND                +\n               QUALIFY=CNOS,         .. CHANGE NUMBER OF SESSIONS      +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               LOGMODE=LU62P         .. LOGMODE\n         CLC   RPL6RC,X000001        CNOS ACCEPTED?\n         BE    TINIT050              YES\n         ITRACE ID=CNOSFAIL,         CNOS FAILED                       +\n               DATA1=RPL6RC          .. TRACE RETURN CODES\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         B     EXIT0000              AND EXIT\nTINIT050 DS    0H\n         ITRACE ID=ALLOC             ALLOCATE A SESSION\n         MVC   DXDFUNC,ALLOCATE      LAST FUNCTION\n         MVC   0(FMH5L,R6),FMH5      COPY FMH5 TO I/O AREA\n         APPCCMD CONTROL=ALLOC,      ISSUE APPC COMMAND                +\n               QUALIFY=ALLOCD,       .. ALLOCATE A SESSION             +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               AREA=(R6),            .. FMH'S ADDRESS                  +\n               RECLEN=FMH5L,         .. FMH'S LENGTH                   +\n               LOGMODE=LU62P         .. LOGMODE\n         OC    RPL6RC,RPL6RC         ALL ZEROS?\n         BZ    TINIT060              YES\n         ITRACE ID=ALOCFAIL,         ALLOCATE FAILED                   +\n               DATA1=RPL6RC          .. TRACE RETURN CODES\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         B     EXIT0000              AND EXIT\nTINIT060 DS    0H\n         ITRACE ID=CONVID,                                             +\n               DATA1=RPL6CNVD        CONVERSATION ID\n         OI    COMMFLAG,$SESSALO     SESSION IS ALLOCATED\n         MVC   COMMCID,RPL6CNVD      SAVE CONVERSATION ID\n         L     R1,CVTPTR             CVT ADDRESS\n         USING CVT,R1                DEFINE BASE\n         ICM   R15,15,CVTSMCA        SMF AREA ADDRESS\n         BZ    ERR0010               SMF NOT ACTIVE!\n         USING SMCABASE,R15          DEFINE BASE\n         MVC   USERSMF,SMCASID       COPY SMF ID\n         USING PSA,R0                DEFINE BASE\n         L     R1,PSAANEW            OUR ASCB'S ADDRESS\n         USING ASCB,R1               DEFINE BASE\n         L     R14,ASCBASXB          ASXB ADDRESS\n         USING ASXB,R14              DEFINE ASCB BASE\n         L     R15,ASXBSENV          ACEE'S ADDRESS\n         USING ACEE,R15              DEFINE ACEE BASE\n         SR    R1,R1                 CLEAR REGISTER\n         IC    R1,ACEEUSRL           USER ID LENGTH\n         BCTR  R1,0                  MINUS 1\n         MVC   USERID,COMMBLKS       INITIALIZE USERID\n         EX    R1,UIDMVC             COPY USER ID\n         ITRACE ID=IDENTIFY          IDENTIFY USER TYPE\n         LA    R7,IDL                DATA LENGTH\n         STH   R7,USERLEN            SET LENGTH\n         MVC   USERJOB,COMMBLKS      SET JOB NAME TO BLANKS\n         MVC   USERMOD,UID           SET PROCESSING MODULE'S SUFFIX\n         MVC   DXDFUNC,SEND          LAST COMMAND\n         APPCCMD CONTROL=SEND,       ISSUE APPC COMMAND                +\n               QUALIFY=DATA,         .. SEND DATA                      +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               AREA=(R6),            .. I/O AREA'S ADDRESS             +\n               RECLEN=(R7),          .. I/O LENGTH                     +\n               CONVID=COMMCID        .. CONVERSATION ID\n         ITRACE ID=RECVID            RECEIVE RESPONSE FROM FX STC\n         MVC   DXDFUNC,RECEIVE       LAST COMMAND ATTEMPTED\n         L     R8,=A(COMMIOSZ)       I/O AREA SIZE\n         APPCCMD CONTROL=RECEIVE,    ISSUE APPC COMMAND                +\n               QUALIFY=SPEC,         .. SPECIFIC CONVERSATION          +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               FILL=LL,              .. ONLY 1 LOGICAL RECORD          +\n               AREA=(R6),            .. I/O AREA                       +\n               AREALEN=(R8),         .. I/O AREA SIZE                  +\n               CONMODE=CS,           .. CONTINUE SPECIFIC              +\n               CONVID=COMMCID        .. CONVERSATION ID\n         OC    RPL6RC,RPL6RC         ALL ZEROS?\n         BZ    TINIT080              YES\n         ITRACE ID=RECVIDF,          RECEIVE IDENTIFY FAILED           +\n               DATA1=RPL6RC          .. TRACE RETURN CODES\n         B     EXIT0000              AND EXIT\nTINIT080 DS    0H\n         CLI   USERAUTH,0            IS USER AUTHORIZED TO USE FX?\n         BE    EXIT0000              NO\n         MVC   COMMUATH,USERAUTH     SAVE USER'S AUTHORITY LEVEL\n         MVC   COMMSYSN,USERSYSN     FX SYSTEM'S NAME\n         MVC   COMMUID,USERID        COPY USER'S ID\n         ITRACE ID=USERAUTH,                                           +\n               DATA1=COMMUATH\n         ITRACE ID=VARDEF            DEFINING ISPF VARIABLES\n         MVI   VARCMD,$VARDEFA       SET COMMAND (DEFINE ALL)\n         LA    R1,COMMSYSN           VARIABLE DATA BASE\n         ST    R1,VARAREA            PASS DATA ADDRESS\n         LA    R1,FXTVTBLE           VARIABLE CONTROL DATA\n         ST    R1,VARTBLE            PASS CONTROL DATA ADDRESS\n         LA    R1,VARREQ             VAR PARM BLOCK ADDRESS\n         L     R15,ATVAR             FXTVAR ENTRY POINT\n         BALR  R14,R15               LINK TO FXVAR\n         B     EXIT0000              AND EXIT\nERR0010  DS    0H\n         ITRACE ID=NOSMF\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\nUIDMVC   MVC   USERID(0),ACEEUSRI    COPY USER ID\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDTINIT)           DISPLACEMENT TO WORK AREA\nALERAD   DC    V(FXLERAD)            LERAD EXIT ADDRESS\nX000001  DC    X'00000001'\nOPENACB  DC    CL8'OPENACB'\nSETLOGON DC    CL8'SETLOGON'\nINQUIRE  DC    CL8'INQUIRE'\nCNOS     DC    CL8'CNOS'\nALLOCATE DC    CL8'ALLOCATE'\nSEND     DC    CL8'SEND'\nRECEIVE  DC    CL8'RECEIVE'\nUID      DC    CL4'UID'\nOCPLI    OPEN  (*,INPUT),MF=L        OPEN/CLOSE PARM LIST\nOCPLL    EQU   *-OCPLI\nACBI     ACB   AM=VTAM,              GENERATE VTAM ACB                 +\n               MACRF=LOGON,                                            +\n               EXLST=*,                                                +\n               APPLID=*\nACBL     EQU   *-ACBI\nEXLSTI   EXLST AM=VTAM,              GENERATE VTAM EXIT LIST           +\n               ATTN=*,                                                 +\n               LERAD=*\nEXLSTL   EQU   *-EXLSTI\nNIBI     NIB   MODE=RECORD,          GENERATE VTAM NIB                 +\n               NAME=FX\nNIBL     EQU   *-NIBI\nRPLI     RPL   AM=VTAM,              GENERATE VTAM RPL                 +\n               AAREA=RPLEXTI\nRPLL     EQU   *-RPLI\nRPLEXTI  ISTRPL6\nRPLEXTL  EQU   *-RPLEXTI\n         FMH5  DSECT=NO,TRAN=USER    GENERATE FMH5\nMSG01    DC    C'FXTINIT01E * ALL USER INTERFACE APPLID''S ARE BUSY, TR+\n               Y LATER'\nMSG01L   EQU   *-MSG01\nMSG02    DC    C'FXTINIT02E * FX IS NOT ACTIVE'\nMSG02L   EQU   *-MSG02\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDTINIT DSECT\nDXDID    DS    CL8\nDXDSAVE  DS    18F\nDXDFUNC  DC    CL8' '                LAST FUNCTION ATTEMPTED\n         VARREQ  DSECT=NO\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         FXTCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              USER REQUEST/RESPONSE BLOCK                            *\n* ------------------------------------------------------------------- *\n         USERREQ\nUSERSMF  DS    CL4\nUSERID   DS    CL8\nUSERJOB  DS    CL8\nUSERAUTH DS    X\nUSERSYSN DS    CL20\nIDL      EQU   *-USERREQ\n* ------------------------------------------------------------------- *\n*              ACB                                                    *\n* ------------------------------------------------------------------- *\n         IFGACB AM=VTAM\n* ------------------------------------------------------------------- *\n*              RPL                                                    *\n* ------------------------------------------------------------------- *\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------- *\n*              EXLST                                                  *\n* ------------------------------------------------------------------- *\n         IFGEXLST AM=VTAM\n* ------------------------------------------------------------------- *\n*              NIB                                                    *\n* ------------------------------------------------------------------- *\n         ISTDNIB\n* ------------------------------------------------------------------- *\n*              PSA                                                    *\n* ------------------------------------------------------------------- *\n         IHAPSA   DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              CVT                                                    *\n* ------------------------------------------------------------------- *\n         CVT      DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              ASCB                                                   *\n* ------------------------------------------------------------------- *\n         IHAASCB  DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              ASXB                                                   *\n* ------------------------------------------------------------------- *\n         IHAASXB  DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              ACEE                                                   *\n* ------------------------------------------------------------------- *\n         IHAACEE\n* ------------------------------------------------------------------- *\n*              SMF                                                    *\n* ------------------------------------------------------------------- *\n         IEESMCA\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  FXTINIT\n./ ADD NAME=FXTMAIN  0100-99056-99056-1500-00320-00320-00000-FX-REL1\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Name: FXTMAIN                                                      *\n*                                                                     *\n*  TSO interface mainline.                                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  OPTIONS\nFXTMAIN  CSECT\nFXTMAIN  AMODE 31\nFXTMAIN  RMODE ANY\n         USING FXTMAIN,R12          DEFINE BASE\n         STM   R14,R12,12(R13)      SAVE ENTRY REGISTERS\n         LR    R12,R15              COPY BASE\n         B     @@000001             BRANCH AROUND EYECATCHER\n         DC    ((PFXMODNM-MODPRFX)-(*-FXTMAIN))X'00'\nMODID    DC    CL8'FXTMAIN'         MODULE NAME\n         DC    CL8'&SYSDATE'        DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'        TIME OF ASSEMBLY\n@@000001 DS    0H\n* ------------------------------------------------------------------- *\n*        ACQUIRE STORAGE FOR WORK AREAS                               *\n* ------------------------------------------------------------------- *\n         LTR   R1,R1                PARAMETER PASSED?\n         BZ    ERR0010              NO\n         ICM   R9,15,0(R1)          PARAMETER ADDRESS\n         BZ    ERR0010              NO PARAMETER\n         L     R3,DXDSIZE           WORK AREA SIZE\n         GETMAIN RU,                ACQUIRE WORK AREA STORAGE          +\n               LV=(R3),             .. WORK AREA SIZE IS IN R3         +\n               LOC=ANY              .. MAY BE ABOVE OR BELOW\n         LR    R4,R1                COPY STORAGE ADDRESS\n         LR    R10,R1               COPY STORAGE ADDRESS\n         LR    R2,R1                COPY WORK AREA ADDRESS\n         SR    R1,R1                CLEAR REGISTER\n         MVCL  R2,R0                CLEAR WORK AREA\n         A     R10,DXDSTART         PLUS DISPLACEMENT TO OUR PORTION\n         USING DXDTMAIN,R10         DEFINE WORK AREA BASE\n         MVC   DXDID,MODID          IDENTIFY WORK AREA OWNER\n         LA    R2,DXDSAVE           OUR SAVE AREA ADDRESS\n         ST    R13,4(R2)            CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R2,8(R13)            OUR SAVE AREA TO CALLER'S\n         LR    R13,R2               SET SAVE AREA ADDRESS\n* ------------------------------------------------------------------- *\n*        LOAD COMMON DATA MODULE  (FXTCOMM)                           *\n* ------------------------------------------------------------------- *\n         LOAD  EP=FXTCOMM           LOAD COMMON DATA MODULE\n         LR    R11,R0               COPY TO PERMANENT BASE\n         USING FXTCOMM,R11          DEFINE COMMON AREA BASE\n         ST    R12,ATMAIN           SET MAINLINE'S ADDRESS IN COMMON\n         ST    R4,COMMDXDA          SET DYNAMIC WORK AREA ADDRESS\n         SR    R2,R2                CLEAR REGISTER\n         ICM   R2,3,0(R9)           PARAMETER LENGTH\n         BZ    ERR0010              NO PARAMETER\n         CH    R2,H8                TOO LONG?\n         BH    ERR0020              YES\n         BCTR  R2,0                 FOR EXECUTE\n         EX    R2,APPLMVC           COPY FX STC'S APPL NAME\n         MVC   ADSNVER,VDSNVER      SET DATA SET NAME VERIFICATION ADDR\n         MVC   AMEMVER,VMEMVER      SET MEMBER NAME VERIFICATION ADDR\n         MVC   ATINIT,VTINIT        SET INITIALIZATION MODULE ADDRESS\n         MVC   ATNODE,VTNODE        SET NODE DISPLAY MODULE ADDRESS\n         MVC   ATREQE,VTREQE        SET REQUEST ENTRY PROCSSOR ADDR\n         MVC   ATREQI,VTREQI        SET REQUEST INQUIRY PROCESSOR ADDR\n         MVC   ATSHUT,VTSHUT        SET FX SHUTDOWN PROCESSOR ADDR\n         MVC   ATSNAP,VTSNAP        SET FX SNAP SHOT PROCESSOR ADDR\n         MVC   ATTERM,VTTERM        SET TERMINATION MODULE ADDRESS\n         MVC   ATVAR,VTVAR          SET SPF VARIABLE DEFINE/DELETE ADDR\n         LOAD  EP=FX24              24-BIT MODE MODULE\n         ST    R0,A24               SAVE 24-BIT MODE MODULE ADDRESS\n* ------------------------------------------------------------------- *\n*        ACQUIRE STORAGE FOR TRACE TABLE                              *\n* ------------------------------------------------------------------- *\n         L     R3,TRSIZE            TRACE TABLE SIZE\n         GETMAIN RU,                ACQUIRE STORAGE FOR TRACE TABLE    +\n               LV=(R3),             .. SIZE IS IN R3                   +\n               LOC=ANY              .. MAY BE ABOVE OR BELOW\n         ST    R1,TRADDR            SAVE TRACE TABLE STORAGE ADDRESS\n         SR    R0,R0                ASSUME ON A 32-BYTE BOUNDARY\n         TM    TRADDR+3,X'07'       ALREADY ON 32-BYTE BOUNDARY?\n         BNO   INIT0010             YES\n         SRL   R1,5                 SHIFT OUT LOW BITS ..\n         SLL   R1,5                 .. TO ROUND TO 32-BYTE BOUNDARY\n         LA    R1,32(R1)            PLUS 32\n         LA    R0,TRENTRYL          1 LESS TRACE ENTRY AVAILABLE\nINIT0010 DS    0H\n         ST    R1,TRFIRST           FIRST TRACE ENTRY\n         ST    R1,TRCURR            CURRENT TRACE ENTRY\n         A     R1,TRSIZE            LAST ENTRY IN TABLE\n         SH    R1,=Y(TRENTRYL)      MINUS 1 ENTRY\n         SR    R1,R0                MINUS 1 MORE IF NECESSARY\n         ST    R1,TRLAST            LAST TRACE ENTRY ADDRESS\n* ------------------------------------------------------------------- *\n*        LOAD SPF INTERFACE MODULE                                    *\n* ------------------------------------------------------------------- *\n         ITRACE ID=LOADSPF\n         LOAD  EP=ISPLINK           LOAD SPF INTERFACE MODULE\n         ST    R0,AISPLINK          SET ADDRESS IN COMMON AREA\n* ------------------------------------------------------------------- *\n*        CALL INITIALIZATION MODULE                                   *\n* ------------------------------------------------------------------- *\n         ITRACE ID=CALLINIT\n         L     R15,ATINIT           INITIALIZATION MODULE ENTRY POINT\n         BALR  R14,R15              LINK TO INITIALIZATION MODULE\n         TM    COMMFLAG,$ABORT      ERRORS IN DURING FXTINIT?\n         BO    TERM0010             YES\n         CLI   COMMUATH,0           USER AUTHORIZED TO USE FX?\n         BE    ERR0030              NO\nMAIN0010 DS    0H\n         ITRACE ID=DISPMENU         DISPLAY MENU\n         MVC   COMMPANL,MENU1       ASSUME 'NORMAL' USER\n         CLI   COMMUATH,$COMMUS3    AN 'ADMINISTRATOR'?\n         BL    MAIN0020             NO\n         MVC   COMMPANL,MENU2       CHANGE TO MENU 2\nMAIN0020 DS    0H\n         LA    R1,DISPLAY           COMMAND'S ADDRESS\n         ST    R1,WKSPFP1           SET ADDRESS IN PARM LIST\n         LA    R1,COMMPANL          PANEL NAME'S ADDRESS\n         ST    R1,WKSPFP2           SET ADDRESS IN PARM LIST\n         OI    WKSPFP2,X'80'        FLAG END-OF-LIST\n         LA    R1,WKSPFPRM          PARM LIST'S ADDRESS\n         L     R15,AISPLINK         SPF INTERFACE ENTRY POINT\n         BALR  R14,R15              LINK TO SPF TO DISPLAY MENU\n         CH    R15,H8               END?\n         BE    TERM0010             YES, BEGIN TERMINATION\n         TM    COMMFLAG,$SHUT       STC SHUTDOWN?\n         BO    TERM0000             FORCE EXIT\n         MVC   COMMMSG,COMMBLKS     INITIALIZE MESSAGE\n         MVC   DXDFNC,COMMFNC       COPY FUNCTION CODE\n         MVI   COMMFNC,C' '         RESET FUNCTION CODE\n         CLI   DXDFNC,C'1'          ENTER A NEW REQUEST?\n         BE    MAIN0040             YES\n         CLI   DXDFNC,C'2'          CHECK ON PREVIOUS REQUEST?\n         BE    MAIN0050             YES\n         CLI   DXDFNC,C'X'          EXIT?\n         BE    TERM0010             YES\n         CLI   COMMUATH,$COMMUS3    'ADMINISTRATOR' USER?\n         BL    MAIN0030             NO\n         CLI   DXDFNC,C'3'          FX STC SNAPSHOT?\n         BE    MAIN0060             YES\n         CLI   DXDFNC,C'4'          SHUTDOWN FX STC?\n         BE    MAIN0070             YES\nMAIN0030 DS    0H\n         MVC   COMMMSG(MSG01L),MSG01 SET MESSAGE\n         B     MAIN0020             RE-SEND MENU\nMAIN0040 DS    0H\n         ITRACE ID=ENTERREQ         ENTER A NEW REQUEST\n         L     R15,ATREQE           REQUEST ENTRY PROCESSOR ENTRY POINT\n         BALR  R14,R15              LINK TO PROCESSOR\n         TM    COMMFLAG,$ABORT      WAS ABORT FLAG SET?\n         BO    ERR0040              YES\n         B     MAIN0020             RE-SEND MENU\nMAIN0050 DS    0H\n         ITRACE ID=REQSTAT          CHECK ON A REQUEST'S STATUS\n         L     R15,ATREQI           REQUEST INQUIRY PROCESSOR\n         BALR  R14,R15              LINK TO PROCESSOR\n         TM    COMMFLAG,$ABORT      WAS ABORT FLAG SET?\n         BO    ERR0050              YES\n         B     MAIN0020             RE-SEND MENU\nMAIN0060 DS    0H\n         ITRACE ID=STCSNAP          SNAP/SHOT FX STC\n         L     R15,ATSNAP           SNAP SHOT MODULE ENTRY POINT\n         BALR  R14,R15              LINK TO PROCESSOR\n         TM    COMMFLAG,$ABORT      WAS ABORT FLAG SET?\n         BO    ERR0060              YES\n         B     MAIN0020             RE-SEND MENU\nMAIN0070 DS    0H\n         ITRACE ID=STCSHUT          SHUTDOWN FX STC\n         L     R15,ATSHUT           STC SHUTDOWN PROCESSOR ENTRY POINT\n         BALR  R14,R15              LINK TO PROCESSOR\n         TM    COMMFLAG,$ABORT      WAS ABORT FLAG SET?\n         BO    ERR0070              YES\n         B     MAIN0020             RE-SEND MENU\nTERM0000 DS    0H\n         ITRACE ID=SHUTDOWN         STC WAS SHUTDOWN, FORCING EXIT\n         LA    R2,MSG02             MESSAGE TEXT'S ADDRESS\n         LA    R3,MSG02L            MESSAGE'S LENGTH\n         BAL   R9,TPUT0000          ISSUE 'NOT AUTHORIZED' MESSAGE\nTERM0010 DS    0H\n         ITRACE ID=TERM             TERMINATION BEGINNING\n         NI    COMMFLAG,255-$ABORT  RESET ABORT FLAG (IF IT'S ON)\n         L     R15,ATTERM           TERMINATION MODULE ENTRY POINT\n         BALR  R14,R15              LINK TO TERMINATION MODULE\n         TM    COMMFLAG,$ABORT      ABORT FLAG SET?\n         BNO   EXIT0000             NO\n         ITRACE ID=TERMFAIL\n         ABEND $U0048,DUMP,,USER\nERR0010  DS    0H\n         ITRACE ID=NOPARM\n         LA    R2,MSG03             NO PARM MESSAGE\n         LA    R3,MSG03L            MESSAGE'S LENGTH\n         BAL   R9,TPUT0000          ISSUE MESSAGE\n         LA    R3,12                SET RETURN CODE\n         B     EXIT0020             AND EXIT\nERR0020  DS    0H\n         ITRACE ID=PARMLONG\n         LA    R2,MSG04             PARM TOO LONG MESSAGE\n         LA    R3,MSG04L            MESSAGE'S LENGTH\n         BAL   R9,TPUT0000          ISSUE MESSAGE\n         MVI   COMMRC,14            SET RETURN CODE\n         B     EXIT0010             AND EXIT\nERR0030  DS    0H\n         ITRACE ID=NOTAUTH          USER IS NOT AUTHORIZED TO USE FX\n         LA    R2,MSG05             MESSAGE TEXT'S ADDRESS\n         LA    R3,MSG05L            MESSAGE'S LENGTH\n         BAL   R9,TPUT0000          ISSUE 'NOT AUTHORIZED' MESSAGE\n         MVI   COMMRC,20            SET RETURN CODE\n         B     TERM0010             AND EXIT\nERR0040  DS    0H\n         ITRACE ID=TREQFAIL         ERROR IN FXTREQ\n         ABEND $U0044,DUMP,,USER\nERR0050  DS    0H\n         ITRACE ID=RSTATF           ERROR IN FXTREQS\n         ABEND $U0045,DUMP,,USER\nERR0060  DS    0H\n         ITRACE ID=SNAPF            ERROR IN FXTSNAP\n         ABEND $U0047,DUMP,,USER\nERR0070  DS    0H\n         ITRACE ID=SHUTF            ERROR IN FXTSHUT\n         ABEND $U0071,DUMP,,USER\nTPUT0000 DS    0H\n         GETMAIN RU,                ACQUIRE STORAGE FOR MESSAGE TEXT   +\n               LV=(R3),             .. SIZE OF MESSAGE                 +\n               LOC=BELOW            .. FROM BELOW THE LINE\n         BCTR  R3,0                 FOR EXECUTE\n         EX    R3,TPUTMVC           MOVE MESSAGE TEXT\n         LR    R2,R1                COPY MESSAGE ADDRESS\n         LA    R3,1(R3)             RESTORE FULL LENGTH\n         TPUT  (R2),(R3)            ISSUE MESSAGE\n         FREEMAIN RU,A=(2),LV=(3)   FREE MESSAGE AREA\n         BR    R9                   RETURN\nTPUTMVC  MVC   0(0,R1),0(R2)        COPY MESSAGE\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         DELETE EP=FX24             DELETE 24-BIT MODE MODULE\n         L     R0,TRSIZE            TRACE TABLE SIZE\n         L     R1,TRADDR            TRACE TABLE STORAGE ADDRESS\n         FREEMAIN RU,A=(1),LV=(0)   FREEMAIN TRACE TABLE STORAGE\nEXIT0010 DS    0H\n         L     R2,COMMDXDA          SAVE WORK AREA STORAGE ADDRESS\n         SR    R3,R3                CLEAR REGISTER\n         IC    R3,COMMRC            LOAD RETURN CODE\n         DELETE EP=FXTCOMM          DELETE COMMON MODULE\n         L     R0,DXDSIZE           WORK AREA STORAGE SIZE\n         L     R13,4(R13)           RESTORE CALLER'S SAVE AREA ADDRESS\n         FREEMAIN RU,A=(2),LV=(0)   FREEMAIN WORK AREA STORAGE\nEXIT0020 DS    0H\n         L     R14,12(R13)          RESTORE R14\n         LR    R15,R3               SET RETURN CODE\n         LM    R0,R12,20(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                  EXIT\nAPPLMVC  MVC   COMMFX(0),2(R9)      MOVE APPL NAME TO COMMON AREA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDTMAIN)          DISPLACEMENT TO WORK AREA\nDXDSIZE  CXD                        WORK AREA TOTAL SIZE\nVDSNVER  DC    V(FXDSNVER)          DATA SET NAME VERIFICATION\nVMEMVER  DC    V(FXMEMVER)          MEMBER NAME VERIFICATION\nVTINIT   DC    V(FXTINIT)           INITIALIZATION\nVTNODE   DC    V(FXTNODE)           NODE DISPLAY\nVTREQE   DC    V(FXTREQE)           TRANSMISSION REQUEST ENTRY\nVTREQI   DC    V(FXTREQI)           TRANSMISSION REQUEST INQUIRY\nVTSHUT   DC    V(FXTSHUT)           STC SHUTDOWN\nVTSNAP   DC    V(FXTSNAP)           STC SNAP SHOT\nVTTERM   DC    V(FXTTERM)           TERMINATION\nVTVAR    DC    V(FXTVAR)            SPF VARIABLE DEFINE/DELETE\nH8       DC    H'8'\nHEX0000  DC    8X'00'\nHEXCHAR  DC    C'0123456789ABCDEF'\nMENU1    DC    CL8'FXMENU1'\nMENU2    DC    CL8'FXMENU2'\nDISPLAY  DC    CL8'DISPLAY'\nMSG01    DS    0C\n         DC    CL11'FXTMAIN01E'\n         DC    C'INVALID FUNCTION CODE'\nMSG01L   EQU   *-MSG01\nMSG02    DC    C'FXTMAIN02I * FX STC WAS SHUT DOWN, EXIT HAS BEEN FORCE+\n               D'\nMSG02L   EQU   *-MSG02\nMSG03    DC    C'FXTMAIN03E * THE FX APPLID IS A REQUIRED PARAMETER'\nMSG03L   EQU   *-MSG03\nMSG04    DC    C'FXTMAIN04E * FX APPLID SPECIFIED IS MORE THAN 8 CHARAC+\n               TERS LONG'\nMSG04L   EQU   *-MSG04\nMSG05    DC    C'FXTMAIN05E * YOU ARE NOT AUTHORIZED TO USE FX'\nMSG05L   EQU   *-MSG05\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREA                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDTMAIN DSECT\nDXDID    DS    CL8                  WORK AREA OWNER\nDXDSAVE  DS    18F                  REGISTER SAVE AREA\nDXDACOMM DS    A                    ADDRESS OF COMM AREA\nWKSPFPRM DS    0A\nWKSPFP1  DS    A                    PARM 1'S ADDRESS\nWKSPFP2  DS    A                    PARM 2'S ADDRESS\nWKSPFP3  DS    A                    PARM 3'S ADDRESS\nWKSPFP4  DS    A                    PARM 4'S ADDRESS\nWKSPFP5  DS    A                    PARM 5'S ADDRESS\nDXDFNC   DS    C                    USER'S FUNCTION\n* ------------------------------------------------------------------- *\n*        MASTER FILE RECORD FORMAT                                    *\n* ------------------------------------------------------------------- *\n         REQBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        COMMON MODULE                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         FXTCOMM TYPE=DSECT\n         COPY  REGEQU\n         ABCODES\n         END   FXTMAIN\n./ ADD NAME=FXTNODE  0100-99056-99056-1500-00893-00893-00000-FX-REL1\n\n         TITLE 'FXTNODE  DISPLAY NODES LIST'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXTNODE                                               *\n*                                                                     *\n*  Manage the dynamic area displays of the node list.  The maximum    *\n*  number of nodes is an installation option.  Since the number of    *\n*  nodes can vary, I did not want to have SPF panels hard coded with  *\n*  a given number of destinations.  The only two alternatives I could *\n*  come up with were an SPF table or a dynamic area.  The dynamic     *\n*  seems more flexible and gives the user more control so I chose     *\n*  that method.  Also the file maintenance utility, the request entry,*\n*  and request inquiry all need to display the node list.  Rather     *\n*  duplicate the code necessary to manipulate the dynamic area and to *\n*  edit/de-edit the data, this module is a \"common\" display facility. *\n*  Because it is common to more than one FX load module, it cannot    *\n*  use much of the \"FXxCOMM\" area.                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTNODE    FXPRFX 'Node list display',                                   +\n               COMM=FXMCOMM\nFXTNODE  AMODE 31\nFXTNODE  RMODE ANY\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    DISP0010              YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\nDISP0010 DS    0H\n         LR    R9,R1                 COPY PARAMETER BLOCK ADDRESS\n         USING TNODEPRM,R9           DEFINE BASE\n         L     R8,TNODEREQ           REQBLOK ADDRESS\n         USING REQBLOK,R8            DEFINE BASE\n         LOAD  EP=ISPLINK            LOAD SPF INTERFACE MODULE\n         ST    R0,DXDSPFEP           SAVE ENTRY POINT ADDRESS\n*---------------------------------------------------------------------*\n*        Define SPF variables                                         *\n*---------------------------------------------------------------------*\n         ITRACE ID=DEFSPF\n         MVI   VARCMD,$VARDEFA       SET COMMAND (DEFINE ALL)\n         LA    R1,FXNDATA            DISPLAY DATA\n         ST    R1,VARAREA            PASS DATA AREA ADDRESS\n         LOAD  EP=FXNTBLE            LOAD VARIABLE CONTROL TABLE\n         ST    R0,VARTBLE            SET TABLE ADDRESS\n         LA    R1,VARREQ             VARIABLE REQUEST PARM BLOCK ADDR\n         L     R15,VTVAR             VARIABLE MANAGER ENTRY POINT\n         BALR  R14,R15               DEFINE VARIABLES\n         MVC   DXDPANL,FXNODES1      SET DEFAULT PANEL NAME\n         NI    DXDFLAG,255-$D2       SET DEFAULT PANEL FLAG\n         BAL   R3,DYNAM000           ISSUE PQUERY\n         MVC   LVLINE,VDEPTH         ASSUME ALL LINES ARE VISIBLE\n         XC    DXDOFF,DXDOFF         CLEAR NODE OFFSET\n         XC    DXDREL,DXDREL         CLEAR RELATIVE NODE NUMBER\n         NI    DXDFLAG,255-$UPDATE   RESET 'UPDATED' FLAG\n         LA    R1,$MAXNODE           MAXIMUM NUMBER OF NODES\n         CLI   TNODECMD,$TNODEU      FULL UPDATE MODE?\n         BE    DISP0030              YES\n         CLI   TNODECMD,$TNODEE      NODE NAME ENTRY?\n         BE    DISP0030              YES\n         ICM   R1,3,REQNDE#          NUMBER OF NODES IN REQUEST\nDISP0030 DS    0H\n         STH   R1,DXDNODES           SAVE NUMBER TO DISPLAY\n*---------------------------------------------------------------------*\n*        Build dynamic area                                           *\n*---------------------------------------------------------------------*\nDISP0100 DS    0H\n         ITRACE ID=BLDVDATA          BUILDING DYNAMIC AREA DATA\n         L     R0,DXDVDA             DYNAMIC AREA ADDRESS\n         L     R1,DXDVDL             DYNAMIC AREA SIZE\n         SR    R14,R14               CLEAR REGISTER\n         SR    R15,R15               CLEAR REGISTER\n         ICM   R15,8,BLANKS          SET PAD CHARACTER\n         MVCL  R0,R14                CLEAR DYNAMIC AREA STORAGE\n         LA    R7,REQNDENM           TEXT'S ADDRESS\n         USING REQNDENM,R7           DEFINE BASE\n         AH    R7,DXDOFF             PLUS OFFSET\n         LH    R1,DXDREL             RELATIVE NODE NUMBER ON FIRST LINE\n         LA    R1,1(R1)              CONVERT TO ACTUAL NODE NUMBER\n         CVD   R1,COMMDWRD           CONVERT TO DECIMAL\n         ZAP   DXDNDE#,COMMDWRD      COPY FIRST NODE'S NUMBER\n         LH    R4,DXDNODES           NUMBER OF NODES TO DISPLAY\n         SH    R4,DXDREL             MINUS RELATIVE LINE NUMBER\n         C     R4,LVLINE             MORE THAN ARE DISPLAYABLE?\n         BNH   DISP0110              NO\n         L     R4,LVLINE             OTHERWIZE LIMIT TO DISPLAY SIZE\nDISP0110 DS    0H\n         STH   R4,DXDVLINE           SAVE NUMBER OF LINES VISIBLE\n         L     R5,DXDVDA             DYNAMIC AREA ADDRESS\n         L     R6,VWIDTH             SCREEN WIDTH\nDISP0120 DS    0H\n         TM    DXDFLAG,$D2           BUILD SCREEN 2?\n         BO    DISP0190              YES\n         ITRACE ID=BLDD1             BUILDING DETAIL LINE TYPE 1\n         USING D1,R5                 DEFINE BASE\n         MVC   DXDWORK(4),=X'40202021'\n         ED    DXDWORK(4),DXDNDE#    EDIT NODE NUMBER\n         MVC   D1NDE#,DXDWORK+1      COPY EDITED NODE NUMBER\n         MVC   D1NDENM,REQNDENM      COPY NODE NAME\n         CLI   TNODECMD,$TNODEE      NODE NAME ENTRY ONLY?\n         BE    DISP0180              YES\n         UNPK  DXDWORK(3),REQNDEST(2)  UNPACK STATUS\n         MVZ   DXDWORK(2),HEX0F      CLEAR ZONES\n         TR    DXDWORK(2),HEXCHAR    CONVERT TO CHARACTER\n         MVC   D1NDESH,DXDWORK       COPY STATUS IN HEX\n         LA    R1,NODEMSG            NODE STATUS/MESSAGE TABLE\n         USING NDESTAT,R1            DEFINE BASE\nDISP0130 DS    0H\n         CLI   NDEST,X'FF'           END OF TABLE?\n         BE    DISP0140              YES\n         CLC   NDEST,REQNDEST        STATUS MATCH?\n         BE    DISP0140              YES\n         LA    R1,NDESTATL(R1)       NEXT STATUS\n         B     DISP0130              LOOP\nDISP0140 DS    0H\n         MVC   D1NDEST,NDEMSG        COPY STATUS MESSAGE\n         CP    REQNDETD,P0           TRANSMIT DATE ZERO?\n         BE    DISP0150              YES\n         MVC   DXDWORK,=X'F0202021204B202020'\n         ED    DXDWORK,REQNDETD      EDIT TRANSMISSION DATE\n         MVC   D1NDETD,DXDWORK+1     COPY EDITED DATE\n         UNPK  DXDWORK(9),REQNDETT(5) UNPACK TIME\n         MVC   D1NDETT,DXDWORK       COPY UNPACKED TIME\nDISP0150 DS    0H\n         CP    REQNDERD,P0           RESTORE DATE ZERO?\n         BE    DISP0160              YES\n         MVC   DXDWORK,=X'F0202021204B202020'\n         ED    DXDWORK,REQNDERD      EDIT RESTORE NOTIFICATION DATE\n         MVC   D1NDERD,DXDWORK+1     COPY EDITED DATE\n         UNPK  DXDWORK(9),REQNDERT(5) UNPACK TIME\n         MVC   D1NDERT,DXDWORK       COPY UNPACKED TIME\nDISP0160 DS    0H\n         CLI   TNODECMD,$TNODED      DISPLAY ONLY?\n         BE    DISP0170              YES\n         ITRACE ID=ATTRUPDT\n         MVI   D1ATTR1,1             SET ATTRIBUTE\n         MVI   D1ATTR2,3             SET ATTRIBUTE\n         MVI   D1ATTR3,3             SET ATTRIBUTE\n         MVI   D1ATTR4,1             SET ATTRIBUTE\n         MVI   D1ATTR5,3             SET ATTRIBUTE\n         MVI   D1ATTR6,3             SET ATTRIBUTE\n         MVI   D1ATTR7,3             SET ATTRIBUTE\n         MVI   D1ATTR8,3             SET ATTRIBUTE\n         MVI   D1ATTR9,1             SET ATTRIBUTE\n         B     DISP0200\nDISP0170 DS    0H\n         ITRACE ID=ATTRDISP\n         MVI   D1ATTR1,1             SET ATTRIBUTE\n         MVI   D1ATTR2,1             SET ATTRIBUTE\n         MVI   D1ATTR3,1             SET ATTRIBUTE\n         MVI   D1ATTR4,1             SET ATTRIBUTE\n         MVI   D1ATTR5,1             SET ATTRIBUTE\n         MVI   D1ATTR6,1             SET ATTRIBUTE\n         MVI   D1ATTR7,1             SET ATTRIBUTE\n         MVI   D1ATTR8,1             SET ATTRIBUTE\n         MVI   D1ATTR9,1             SET ATTRIBUTE\n         B     DISP0200\nDISP0180 DS    0H\n         ITRACE ID=ATTRNTRY\n         MVI   D1ATTR1,1             SET ATTRIBUTE\n         MVI   D1ATTR2,3             SET ATTRIBUTE\n         MVI   D1ATTR3,1             SET ATTRIBUTE\n         MVI   D1ATTR4,1             SET ATTRIBUTE\n         MVI   D1ATTR5,1             SET ATTRIBUTE\n         MVI   D1ATTR6,1             SET ATTRIBUTE\n         MVI   D1ATTR7,1             SET ATTRIBUTE\n         MVI   D1ATTR8,1             SET ATTRIBUTE\n         MVI   D1ATTR9,1             SET ATTRIBUTE\n         B     DISP0200\nDISP0190 DS    0H\n         ITRACE ID=BLDD2             BUILD DETAIL LINE TYPE 2\n         USING D2,R5                 DEFINE BASE\n         MVC   DXDWORK(4),=X'40202021'\n         ED    DXDWORK(4),DXDNDE#    EDIT NODE NUMBER\n         MVC   D2NDE#,DXDWORK+1      COPY EDITED NODE NUMBER\n         MVC   D2NDENM,REQNDENM      COPY NODE NAME\n         ICM   R1,15,REQNDECR        CHECKPOINT RECORD NUMBER\n         CVD   R1,COMMDWRD           CONVERT TO DECIMAL\n         MVC   DXDWORK(8),=X'F020202020202020'\n         ED    DXDWORK,COMMDWRD+4    EDIT CHECKPOINT RECORD NUMBER\n         MVC   D2CKPTR,DXDWORK+1     COPY EDITED RECORD NUMBER\n         UNPK  DXDWORK(7),REQNDECT(4) UNPACK CHECKPOINT TTR\n         MVZ   DXDWORK(6),HEX0F      CLEAR ZONES\n         TR    DXDWORK(6),HEXCHAR    TRANSLATE TO PRINTABLE\n         MVC   D2CKPTT,DXDWORK       COPY CHECKPOINT TTR\n         MVI   D2ATTR1,1             SET ATTRIBUTE\n         MVI   D2ATTR2,1             SET ATTRIBUTE\n         MVI   D2ATTR3,1             SET ATTRIBUTE\n         MVI   D2ATTR4,1             SET ATTRIBUTE\n         DROP  R5\nDISP0200 DS    0H\n         AP    DXDNDE#,P1            ADD 1 TO NODE NUMBER\n         LA    R7,REQNDEL(R7)        NEXT NODE\nDISP0210 DS    0H\n         AR    R5,R6                 NEXT LINE ON DISPLAY\n         BCT   R4,DISP0120\n* --------------------------------------------------------------------*\n*        Display panel                                                *\n*---------------------------------------------------------------------*\nDISP0220 DS    0H\n         ITRACE ID=DISPLAY\n         LA    R1,DISPLAY            COMMAND'S ADDRESS\n         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST\n         LA    R1,DXDPANL            PANEL'S NAME\n         ST    R1,DXDSPF2            SET ADDRESS IN PARM LIST\n         OI    DXDSPF2,X'80'         FLAG END-OF-LIST\n         LA    R1,DXDSPF             PARM LIST ADDRESS\n         L     R15,DXDSPFEP          SPF INTERFACE ENTRY POINT ADDR\n         BALR  R14,R15               LINK TO SPF TO DISPLAY PANEL\n         MVC   NMSG,BLANKS           CLEAR MESSAGE\n         L     R1,TNODEZCM           ZCMD ADDRESS\n         OC    0(80,R1),BLANKS       FORCE UPPER CASE\n         ITRACE ID=DISPRC,           TRACE RETURN FROM SPF             +\n               RDATA1=R15,           .. INCLUDE RETURN CODE            +\n               DATA2=0(R1)           .. AND NEW COMMAND\n         STH   R15,DXDRC             SAVE RETURN CODE\n         CH    R15,H8                EXIT?\n         BE    DISP1000              YES\n         CLI   0(R1),C'X'            EXIT?\n         BE    DISP1000              YES\n         CLI   0(R1),C' '            COMMAND BLANK?\n         BE    DISP0250              YES\n         CLC   MAIN,0(R1)            RETURN TO MAIN PANEL?\n         BE    DISP1000              YES\n         CLC   CKPT,0(R1)            DISPLAY CHECKPOINT PANEL?\n         BE    DISP0230              YES\n         CLC   STAT,0(R1)            DISPLAY STATUS PANEL?\n         BE    DISP0240              YES\n         ITRACE ID=INVCMD            INVALID PRIMARY COMMAND\n         MVC   NMSG(MSG01L),MSG01    SET MESSAGE\n         B     DISP0220              RE-DISPLAY WITH MESSAGE\nDISP0230 DS    0H\n         OI    DXDFLAG,$D2           SET DISPLAY PANEL 2 FLAG\n         MVC   DXDPANL,FXNODES2      SET PANEL NAME\n         MVC   0(80,R1),BLANKS       CLEAR THE COMMAND\n         BAL   R3,DYNAM000           ISSUE PQUERY\n         B     DISP0100              BUILD THE DATA\nDISP0240 DS    0H\n         NI    DXDFLAG,255-$D2       RESET DISPLAY PANEL 2 FLAG\n         MVC   DXDPANL,FXNODES1      SET PANEL NAME\n         MVC   0(80,R1),BLANKS       CLEAR THE COMMAND\n         BAL   R3,DYNAM000           ISSUE PQUERY\n         B     DISP0100              BUILD THE DATA\n*---------------------------------------------------------------------*\n*        If updating was allowed, verify that all fields are valid    *\n*---------------------------------------------------------------------*\nDISP0250 DS    0H\n         CLI   TNODECMD,$TNODED      DISPLAY ONLY?\n         BE    DISP0410              YES\n         TM    DXDFLAG,$D2           SCREEN 2?\n         BO    DISP0410              YES\n         ITRACE ID=EDITNEW           EDITING NEW DATA\n         LH    R1,DXDREL             RELATIVE NODE ON LINE 1\n         LA    R1,1(R1)              PLUS 1\n         CVD   R1,COMMDWRD           CONVERT TO DECIMAL\n         ZAP   DXDNDE#,COMMDWRD      COPY NODE ON LINE 1\n         L     R5,DXDVDA             FIRST NODE IN DISPLAY AREA\n         USING D1,R5                 DEFINE D1 BASE\n         DROP  R7\n         LA    R7,REQNDENM           FIRST NODE IN REQBLOK\n         AH    R7,DXDOFF             PLUS OFFSET\n         USING REQNDENM,R7           DEFINE BASE\n         LH    R4,DXDVLINE           NUMBER OF LINES VISIBLE\n         NI    DXDFLAG,255-$ERROR-$REBUILD    RESET FLAGS\nDISP0260 DS    0H\n         ITRACE ID=EDITNODE,         TRACE EACH LOOP                   +\n               DATA1=DXDNDE#         .. NODE NUMBER\n         OC    D1NDENM,BLANKS        FORCE UPPER CASE\n         OC    D1NDESH,BLANKS        FORCE UPPER CASE\n         CLC   D1NDENM,REQNDENM      SAME NODE NAME?\n         BE    DISP0270              YES\n         MVC   REQNDENM,D1NDENM      CHANGE NODE NAME\n         OI    DXDFLAG,$UPDATE+$REBUILD       RECORD UPDATED\nDISP0270 DS    0H\n         CLI   TNODECMD,$TNODEE      NODE NAME ENTRY ONLY?\n         BE    DISP0400              YES\n         CLI   D1NDESH,C'A'          VALID HEX?\n         BL    ERR0020               NO\n         CLI   D1NDESH,C'G'          VALID HEX?\n         BL    DISP0280              YES\n         CLI   D1NDESH,C'0'          VALID HEX?\n         BL    ERR0020               NO\n         CLI   D1NDESH,C'9'          VALID HEX?\n         BH    ERR0020               NO\nDISP0280 DS    0H\n         CLI   D1NDESH+1,C'A'        VALID HEX?\n         BL    ERR0020               NO\n         CLI   D1NDESH+1,C'G'        VALID HEX?\n         BL    DISP0290              YES\n         CLI   D1NDESH+1,C'0'        VALID HEX?\n         BL    ERR0020               NO\n         CLI   D1NDESH+1,C'9'        VALID HEX?\n         BH    ERR0020               NO\nDISP0290 DS    0H\n         MVC   DXDWORK(2),D1NDESH    COPY STATUS\n         NC    DXDWORK(2),HEX1F      PREPARE FOR TRANSLATE\n         TR    DXDWORK(2),CHARHEX    TRANSLATE FOR PACKING\n         PACK  DXDWORK+3(2),DXDWORK(3)  PACK STATUS\n         LA    R1,NODEMSG            NODE STATUS/MESSAGE TABLE\n         USING NDESTAT,R1            DEFINE BASE\nDISP0300 DS    0H\n         CLI   0(R1),X'FF'           END OF TABLE?\n         BE    ERR0030               YES.. INVALID STATUS\n         CLC   NDEST,DXDWORK+3       STATUS LOCATED?\n         BE    DISP0310              YES\n         LA    R1,NDESTATL(R1)       NEXT STATUS\n         B     DISP0300              LOOP\nDISP0310 DS    0H\n         CLC   REQNDEST,DXDWORK+3    SAME STATUS?\n         BE    DISP0320              YES\n         MVC   REQNDEST,DXDWORK+3    COPY NEW STATUS\n         MVC   D1NDEST,NDEMSG        COPY NEW STATUS MESSAGE\n         OI    DXDFLAG,$UPDATE+$REBUILD  RECORD UPDATED\nDISP0320 DS    0H\n         CLC   D1NDETD,BLANKS        DATE BLANK?\n         BE    DISP0330              YES\n         CLI   D1NDETD+4,C'.'        PERIOD STILL PRESENT?\n         BNE   ERR0040               NO\n         LA    R1,D1NDETD            FIRST DIGIT OF YEAR\n         LA    R2,4                  NUMBER OF DIGITS\n         LA    R14,ERR0050           ERROR ROUTINE ADDRESS\n         BAL   R15,NUMR0000          TEST FOR NUMERIC\n         LA    R1,D1NDETD+5          FIRST DIGIT OF DAY\n         LA    R2,3                  NUMBER OF DIGITS\n         BAL   R15,NUMR0000          TEST FOR NUMERIC\n         PACK  DXDWORK(3),D1NDETD(5)      PACK FIRST 4 DIGITS\n         PACK  DXDWORK+2(2),D1NDETD+5(3) PACK LAST 3 DIGITS\n         CLC   REQNDETD,DXDWORK      SAME DATE?\n         BE    DISP0340              YES\n         MVC   REQNDETD,DXDWORK      COPY UPDATED DATE\n         OI    DXDFLAG,$UPDATE+$REBUILD  RECORD UPDATED\n         B     DISP0340\nDISP0330 DS    0H\n         CP    REQNDETD,P0           TRANSMIT DATE ALREADY ZERO?\n         BE    DISP0340              YES\n         ZAP   REQNDETD,P0           SET TRANSMIT DATE TO ZERO\n         OI    DXDFLAG,$UPDATE+$REBUILD  RECORD UPDATED\nDISP0340 DS    0H\n         CLC   D1NDETT,BLANKS        TRANSMIT TIME BLANK?\n         BE    DISP0350              YES\n         LA    R1,D1NDETT            TRANSMISSION TIME\n         LA    R2,L'D1NDETT          NUMBER OF DIGITS\n         LA    R14,ERR0060           ERROR ROUTINE\n         BAL   R15,NUMR0000          TEST FOR VALID NUMERIC\n         MVC   DXDWORK(8),D1NDETT    COPY TIME\n         NC    DXDWORK(8),HEX1F      PREPARE FRO PACKING\n         TR    DXDWORK(8),CHARHEX    TRANSLATE FOR PACKING\n         PACK  COMMDWRD(5),DXDWORK(9) PACK TIME\n         CLC   REQNDETT,COMMDWRD     SAME TIME?\n         BE    DISP0360              YES\n         MVC   REQNDETT,COMMDWRD     COPY NEW TIME\n         OI    DXDFLAG,$UPDATE+$REBUILD  RECORD UPDATED\n         B     DISP0360\nDISP0350 DS    0H\n         OC    REQNDETT,REQNDETT     TRANSMIT TIME ALREADY ZERO?\n         BZ    DISP0360              YES\n         XC    REQNDETT,REQNDETT     SET TRANSMIT TIME TO ZERO\n         OI    DXDFLAG,$UPDATE+$REBUILD  RECORD UPDATED\nDISP0360 DS    0H\n         CLC   D1NDERD,BLANKS        RESTORE DATE BLANK?\n         BE    DISP0370              YES\n         CLI   D1NDERD+4,C'.'        PERIOD STILL PRESENT?\n         BNE   ERR0040               NO\n         LA    R1,D1NDERD            FIRST DIGIT OF YEAR\n         LA    R2,4                  NUMBER OF DIGITS\n         LA    R14,ERR0050           ERROR ROUTINE ADDRESS\n         BAL   R15,NUMR0000          TEST FOR NUMERIC\n         LA    R1,D1NDERD+5          FIRST DIGIT OF DAY\n         LA    R2,3                  NUMBER OF DIGITS\n         BAL   R15,NUMR0000          TEST FOR NUMERIC\n         PACK  DXDWORK(3),D1NDERD(5)      PACK FIRST 4 DIGITS\n         PACK  DXDWORK+2(2),D1NDERD+5(3) PACK LAST 3 DIGITS\n         CLC   REQNDERD,DXDWORK      SAME DATE?\n         BE    DISP0380              YES\n         MVC   REQNDERD,DXDWORK      COPY UPDATED DATE\n         OI    DXDFLAG,$UPDATE+$REBUILD  RECORD UPDATED\n         B     DISP0380\nDISP0370 DS    0H\n         CP    REQNDERD,P0           RESTORE DATE ALREADY ZERO?\n         BE    DISP0380              YES\n         ZAP   REQNDERD,P0           SET DATE TO ZERO\n         OI    DXDFLAG,$UPDATE+$REBUILD  RECORD UPDATED\nDISP0380 DS    0H\n         CLC   D1NDERT,BLANKS        RESTORE TIME BLANK?\n         BE    DISP0390              YES\n         LA    R1,D1NDERT            RESTORE NOTIFICATION TIME\n         LA    R2,L'D1NDERT          NUMBER OF DIGITS\n         LA    R14,ERR0060           ERROR ROUTINE\n         BAL   R15,NUMR0000          TEST FOR VALID NUMERIC\n         MVC   DXDWORK(8),D1NDERT    COPY TIME\n         NC    DXDWORK(8),HEX1F      PREPARE FOR PACKING\n         TR    DXDWORK(8),CHARHEX    TRANSLATE FOR PACKING\n         PACK  COMMDWRD(5),DXDWORK(9) PACK TIME\n         CLC   REQNDERT,COMMDWRD     SAME TIME?\n         BE    DISP0400              YES\n         MVC   REQNDERT,COMMDWRD     COPY NEW TIME\n         OI    DXDFLAG,$UPDATE+$REBUILD  RECORD UPDATED\n         B     DISP0400\nDISP0390 DS    0H\n         OC    REQNDERT,REQNDERT     RESTORE ALREADY ZERO?\n         BZ    DISP0400              YES\n         XC    REQNDERT,REQNDERT     SET RESTORE TIME TO ZERO\n         OI    DXDFLAG,$UPDATE+$REBUILD  RECORD UPDATED\nDISP0400 DS    0H\n         LA    R7,REQNDEL(R7)        NEXT NODE\n         AP    DXDNDE#,P1            ADD 1 TO NODE NUMBER\n         A     R5,VWIDTH             NEXT LINE\n         BCT   R4,DISP0260           LOOP\n         TM    DXDFLAG,$REBUILD      REBUILD DYNAMIC AREA?\n         BNO   DISP0410              NO\n         ITRACE ID=REBUILD           REBUILD DUE TO UPDATED DATA\n         B     DISP0100\n*---------------------------------------------------------------------*\n*        Request scroll parameters                                    *\n*---------------------------------------------------------------------*\nDISP0410 DS    0H\n         ITRACE ID=SCROLL\n         NI    DXDFLAG,255-$DXDVPUT  RESET VPUT FLAG\nDISP0420 DS    0H\n         ITRACE ID=VGET              REQUESTING SCROLL VARIABLES\n         LA    R1,VGET               COMMAND'S ADDRESS\n         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST\n         LA    R1,VGETVARS           VARIABLES WE'RE INTERESTED IN\n         ST    R1,DXDSPF2            SET ADDRESS IN PARM LIST\n         LA    R1,SHARED             FROM SHARED POOL\n         ST    R1,DXDSPF3            SET ADDRESS IN PARM LIST\n         OI    DXDSPF3,X'80'         SET END-OF-LIST\n         LA    R1,DXDSPF             PARM LIST ADDRESS\n         L     R15,DXDSPFEP          SPF INTERFACE ENTRY POINT ADDR\n         BALR  R14,R15               LINK TO SPF TO DISPLAY PANEL\n         ITRACE ID=VGETRC,           VGET COMPLETE                     +\n               RDATA1=R15            .. INCLUDE RETURN CODE\n         LTR   R15,R15               VGET SUCCESSFUL?\n         BZ    DISP0430              YES\n         TM    DXDFLAG,$DXDVPUT      VPUT ALREADY ISSUED?\n         BO    DISP0430              YES\n*---------------------------------------------------------------------*\n*        Issue VPUT, try VGET again                                   *\n*---------------------------------------------------------------------*\n         ITRACE ID=VPUT\n         LA    R1,VPUT               COMMAND'S ADDRESS\n         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST\n         LA    R1,VGETVARS           VARIABLES WE'RE INTERESTED IN\n         ST    R1,DXDSPF2            SET ADDRESS IN PARM LIST\n         LA    R1,SHARED             FROM SHARED POOL\n         ST    R1,DXDSPF3            SET ADDRESS IN PARM LIST\n         OI    DXDSPF3,X'80'         SET END-OF-LIST\n         LA    R1,DXDSPF             PARM LIST ADDRESS\n         L     R15,DXDSPFEP          SPF INTERFACE ENTRY POINT ADDR\n         BALR  R14,R15               LINK TO SPF TO DISPLAY PANEL\n         ITRACE ID=VPUTRC,           VPUT COMPLETE                     +\n               RDATA1=R15            .. INCLUDE RETURN CODE\n         B     DISP0420\n*---------------------------------------------------------------------*\n*        Process command or scroll                                    *\n*---------------------------------------------------------------------*\nDISP0430 DS    0H\n         ITRACE ID=CHKVERB,          CHECKING VERB FOR SCROLL          +\n               DATA1=ZVERB           .. TRACE VERB VALUE\n         L     R2,ZSCROLLN           NUMBER OF LINES TO SCROLL\n         CLI   ZVERB,C'U'            SCROLL UP?\n         BE    DISP0500              YES\n         CLI   ZVERB,C'D'            SCROLL DOWN?\n         BE    DISP0600              YES\n         CLI   ZVERB,C'R'            SCROLL RIGHT?\n         BE    DISP0100              YES\n         CLI   ZVERB,C'L'            SCROLL LEFT?\n         BE    DISP0100              YES\n         B     DISP0220              MUST NOT BE A SCROLL COMMAND\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDISP0500 DS    0H\n         ITRACE ID=SCROLLUP\n         L     R1,ZSCROLLN           NUMBER OF LINES TO SCROLL\n         MH    R1,=Y(REQNDEL)        TIMES NODE DATA LENGTH\n         LH    R2,DXDOFF             CURRENT OFFSET\n         CR    R1,R2                 SCROLL PAST FIRST LINE?\n         BNH   DISP0510              NO\n         LR    R2,R1                 LIMIT TO 1ST LINE\nDISP0510 DS    0H\n         SR    R2,R1                 NEW OFFSET\n         LH    R1,DXDREL             RELATIVE LINE NUMBER\n         S     R1,ZSCROLLN           MINUS NUMBER SCROLLED\n         BP    DISP0520\n         SR    R1,R1                 RESET TO ZERO IF NEGATIVE\nDISP0520 DS    0H\n         STH   R1,DXDREL             SAVE RELATIVE LINE NUMBER\n         STH   R2,DXDOFF             SAVE OFFSET INTO TEXT\n         B     DISP0100              RE-BUILD DYNAMIC AREA DATA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDISP0600 DS    0H\n         ITRACE ID=SCROLLDN\n         L     R1,ZSCROLLN           NUMBER OF LINES TO SCROLL\n         AH    R1,DXDREL             PLUS RELATIVE NUMBER NOW\n         CH    R1,DXDNODES           SCROLL BEYOND END OF DATA?\n         BE    DISP0610              YES\n         BNH   DISP0620              NO\nDISP0610 DS    0H\n         LH    R1,DXDNODES           NUMBER OF NODES TO DISPLAY\n         BCTR  R1,0                  ADJUST FOR RELATIVE\n         STH   R1,DXDREL             SAVE RELATIVE NUMBER\n         MH    R1,=Y(REQNDEL)        TIMES LENGTH FOR EACH NODE\n         STH   R1,DXDOFF             OFFSET TO LAST NODE\n         B     DISP0100              RE-BUILD DYNAMIC AREA\nDISP0620 DS    0H\n         STH   R1,DXDREL             SAVE NEW RELATIVE LINE\n         MH    R1,=Y(REQNDEL)        TIMES LENGTH FOR EACH NODE\n         STH   R1,DXDOFF             OFFSET TO DATA\n         B     DISP0100              RE-BUILD DYNAMIC AREA\n*---------------------------------------------------------------------*\n*        Clean-up                                                     *\n*---------------------------------------------------------------------*\nDISP1000 DS    0H\n         MVI   TNODESTA,C' '         INITIALIZE STATUS\n         TM    DXDFLAG,$UPDATE       ANY UPDATES?\n         BNO   DISP1040              NO\n         TM    DXDFLAG,$ERROR        ERRORS PENDING?\n         BO    ERR0070               YES\n         SR    R1,R1                 CLEAR REGISTER\n         DROP  R7\n         LA    R7,REQNDENM           FIRST NODE NAME\n         LR    R14,R7                COPY 'CURRENT' ADDRESS\n         LA    R15,$MAXNODE          MAXIMUM NUMBER OF NODES\n         USING REQNDENM,R7           DEFINE BASE\nDISP1010 DS    0H\n         CLC   REQNDENM,BLANKS       NAME BLANK?\n         BE    DISP1030              YES\n         CR    R14,R7                SAME ADDRESS?\n         BE    DISP1020              YES\n         MVC   0(L'REQNDENM,R14),REQNDENM\n         MVC   REQNDENM,BLANKS       CLEAR THIS ENTRY\nDISP1020 DS    0H\n         LA    R1,1(R1)              PLUS 1 TO NUMBER OF NODES\n         LA    R14,REQNDEL(R14)      NEXT NODE\nDISP1030 DS    0H\n         LA    R7,REQNDEL(R7)        NEXT NODE\n         BCT   R15,DISP1010          LOOP\n         STCM  R1,3,REQNDE#          SET NUMBER OF NODES\n         MVI   TNODESTA,$TNODEM      RETURN 'UPDATED' STATUS\nDISP1040 DS    0H\n         ITRACE ID=CLEANUP\n         LA    R1,VDELETE            COMMAND'S ADDRESS\n         ST    R1,DXDSPF1            SET IN PARM LIST\n         LA    R1,VDATA              VARIABLE'S NAME\n         ST    R1,DXDSPF2            SET IN PARM LIST\n         OI    DXDSPF2,X'80'         SET END-OF-LIST\n         LA    R1,DXDSPF             PARM LIST'S ADDRESS\n         L     R15,DXDSPFEP          SPF INTERFACE ENTRY POINT\n         BALR  R14,R15               LINK TO SPF TO DELETE 'VDATA'\n         LTR   R15,R15               VDELETE OK?\n         BNZ   ERR0080               YES\n         ITRACE ID=FREEVDA\n         ICM   R1,15,DXDVDA          DYNAMIC AREA ADDRESS\n         BZ    EXIT0000              NO ADDRESS.. EXIT\n         L     R0,DXDVDL             DYNAMIC AREA SIZE\n         FREEMAIN RU,A=(1),LV=(0)    FREEMAIN DYNAMIC AREA\n         XC    DXDVDA,DXDVDA         CLEAR ADDRESS\n         XC    DXDVDL,DXDVDL         CLEAR SIZE\n         L     R1,TNODEZCM           ZCMD ADDRESS\n         MVC   0(80,R1),BLANKS       CLEAR ZCMD\n         B     EXIT0000              AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Acquire storage for dynamic area and define \"VDATA\" to SPF.  *\n*                                                                     *\n*          1) Issue PQUERY to determine screen characteristics        *\n*          2) If a \"previous\" VDATA area exists,                      *\n*                a) Free the storage                                  *\n*                b) VDELETE the variable                              *\n*          3) Calculate the VDATA storage size                        *\n*          4) Acquire storage for VDATA                               *\n*          5) VDEFINE \"VDATA\" to SPF                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\nDYNAM000 DS    0H\n         ICM   R1,15,DXDVDA          DYNAMIC AREA ADDRESS\n         BZ    DYNAM010              NOT ACQUIRED\n         ITRACE ID=FREVDATA          FREEING VDATA AREA\n         L     R0,DXDVDL             AREA SIZE\n         FREEMAIN RU,A=(1),LV=(0)    FREE PREVIOUS DYNAMIC AREA\n         LA    R1,VDELETE            COMMAND'S ADDRESS\n         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST\n         LA    R1,VDATA              VARIABLE NAME ADDRESS\n         ST    R1,DXDSPF2            SET ADDRESS IN PARM LIST\n         OI    DXDSPF2,X'80'         FLAG END-OF-LIST\n         LA    R1,DXDSPF             SPF PARM LIST ADDRESS\n         L     R15,DXDSPFEP          SPF ENTRY POINT\n         BALR  R14,R15               DELETE 'VDATA'\n         LTR   R15,R15               DELETE SUCCESSFUL?\n         BNZ   ERR0080               NO\nDYNAM010 DS    0H\n         ITRACE ID=PQUERY\n         LA    R1,PQUERY             COMMAND'S ADDRESS\n         ST    R1,DXDSPF1            SET IN PARM LIST\n         LA    R1,DXDPANL            PANEL NAME'S ADDRESS\n         ST    R1,DXDSPF2            SET IN PARM LIST\n         LA    R1,CVDATA             AREA NAME WITHIN THE PANEL\n         ST    R1,DXDSPF3            SET IN PARM LIST\n         LA    R1,CVTYPE             AREA TYPE\n         ST    R1,DXDSPF4            SET IN PARM LIST\n         LA    R1,CVWIDTH            SCREEN DEPTH\n         ST    R1,DXDSPF5            SET IN PARM LIST\n         LA    R1,CVDEPTH            SCREEN WIDTH\n         ST    R1,DXDSPF6            SET IN PARM LIST\n         LA    R1,CVROW              SCREEN ROW\n         ST    R1,DXDSPF7            SET IN PARM LIST\n         LA    R1,CVCOL              SCREEN COLUMN\n         ST    R1,DXDSPF8            SET IN PARM LIST\n         OI    DXDSPF8,X'80'         FLAG 'END-OF-LIST'\n         LA    R1,DXDSPF             PQUERY PARM LIST ADDRESS\n         L     R15,DXDSPFEP          SPF INTERFACE'S ADDRESS\n         BALR  R14,R15               ISSUE QUERY\n         LTR   R15,R15               PQUERY SUCCESSFUL?\n         BNZ   ERR0090               NO\n         L     R0,VWIDTH             SCREEN WIDTH\n         MH    R0,VDEPTH+2           COMPUTE DYNAMIC AREA STORAGE SIZE\n         ST    R0,DXDVDL             SAVE DYNAMIC STORAGE AREA SIZE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR DYNAMIC AREA  +\n               LV=(0),               .. SIZE OF AREA                   +\n               LOC=ANY               .. FROM ANY AREA\n         ITRACE ID=VDA,                                                +\n               RDATA1=R1\n         ST    R1,DXDVDA             SAVE DYNAMIC AREA ADDRESS\n         ITRACE ID=DEFVDATA          DEFINING 'VDATA'                  +\n               DATA1=DXDVDA,         .. STORAGE ADDRESS                +\n               DATA2=DXDVDL          .. STORAGE SIZE\n         LA    R1,VDEFINE            COMMAND'S ADDRESS\n         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST\n         LA    R1,VDATA              VARIABLE NAME ADDRESS\n         ST    R1,DXDSPF2            SET ADDRESS IN PARM LIST\n         MVC   DXDSPF3,DXDVDA        SET ADDRESS IN PARM LIST\n         LA    R1,CHARFORM           DATA FORMAT ADDRESS\n         ST    R1,DXDSPF4            SET ADDRESS IN PARM LIST\n         LA    R1,DXDVDL             ADDRESS OF LENGTH\n         ST    R1,DXDSPF5            SET ADDRESS IN PARM LIST\n         OI    DXDSPF5,X'80'         FLAG END-OF-LIST\n         LA    R1,DXDSPF             SPF PARM LIST ADDRESS\n         L     R15,DXDSPFEP          SPF ENTRY POINT\n         BALR  R14,R15               DEFINE 'VDATA'\n         LTR   R15,R15               DEFINE SUCCESSFUL?\n         BNZ   ERR0010               NO\n         BR    R3                    RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*   Test for valid numeric fields                                     *\n*                                                                     *\n*    At entry:  R1  address of data                                   *\n*               R2  number of digits                                  *\n*               R14 error routine address                             *\n*               R15 Return address                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nNUMR0000 DS    0H\n         CLI   0(R1),C'0'            VALID DIGIT?\n         BLR   R14                   NO\n         CLI   0(R1),C'9'            VALID DIGIT?\n         BHR   R14                   NO\n         LA    R1,1(R1)              NEXT DIGIT\n         BCT   R2,NUMR0000           LOOP\n         BR    R15                   ALL OK.. RETURN\n* ------------------------------------------------------------------- *\n*        ERROR ROUTINES                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=VDEFFAIL,         VDEFINE FAILED                    +\n               RDATA1=R15            .. VDEFINE RETURN CODE\n         ABEND $U0093,DUMP,,USER\nERR0020  DS    0H\n         OI    DXDFLAG,$ERROR        TURN ON ERROR FLAG\n         MVC   NMSG(MSG02L),MSG02    COPY MESSAGE\n         ED    NMSG+(MSG02#-MSG02)(L'MSG02#),DXDNDE#\n         B     DISP0220              RE-DISPLAY WITH MESSAGE\nERR0030  DS    0H\n         OI    DXDFLAG,$ERROR        TURN ON ERROR FLAG\n         MVC   NMSG(MSG03L),MSG03    COPY MESSAGE\n         ED    NMSG+(MSG03#-MSG03)(L'MSG03#),DXDNDE#\n         B     DISP0220              RE-DISPLAY WITH MESSAGE\nERR0040  DS    0H\n         OI    DXDFLAG,$ERROR        TURN ON ERROR FLAG\n         MVC   NMSG(MSG04L),MSG04    COPY MESSAGE\n         ED    NMSG+(MSG04#-MSG04)(L'MSG04#),DXDNDE#\n         B     DISP0220              RE-DISPLAY WITH MESSAGE\nERR0050  DS    0H\n         OI    DXDFLAG,$ERROR        TURN ON ERROR FLAG\n         MVC   NMSG(MSG05L),MSG05    COPY MESSAGE\n         ED    NMSG+(MSG05#-MSG05)(L'MSG05#),DXDNDE#\n         B     DISP0220              RE-DISPLAY WITH MESSAGE\nERR0060  DS    0H\n         OI    DXDFLAG,$ERROR        TURN ON ERROR FLAG\n         MVC   NMSG(MSG06L),MSG06    COPY MESSAGE\n         ED    NMSG+(MSG06#-MSG06)(L'MSG06#),DXDNDE#\n         B     DISP0220              RE-DISPLAY WITH MESSAGE\nERR0070  DS    0H\n         MVC   NMSG(MSG07L),MSG07    COPY MESSAGE\n         B     DISP0220              RE-DISPLAY WITH MESSAGE\nERR0080  DS    0H\n         ITRACE ID=VDELVAIL,                                           +\n               RDATA1=R15\n         ABEND $U0092,DUMP,,USER\nERR0090  DS    0H\n         ITRACE ID=PQRYFAIL,         PQUERY FAILED                     +\n               RDATA1=R15            .. PQUERY RETURN CODE\n         ABEND $U0091,DUMP,,USER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         DELETE EP=ISPLINK           DELETE SPF INTERFACE MODULE\n         XC    DXDSPFEP,DXDSPFEP     CLEAR THE ADDRESS\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LH    R15,DXDRC             SET RETURN CODE\n         L     R14,12(R13)           RESTORE R14\n         LM    R0,R12,20(R13)        RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDTNODE)           DISPLACEMENT TO WORK AREA\nVTVAR    DC    V(FXTVAR)             VARIABLE MANAGER\n         SPACE 1\n* ------------------------------------------------------------------- *\n*      The following is a positionally dependant parm list            *\n* ------------------------------------------------------------------- *\nVGETVARS DC    F'3'                  NUMBER OF VARIABLE NAMES\n         DC    F'0'                  UNPROTECTED STORAGE\n         DC    CL8'ZVERB'            VARIABLE NAME\n         DC    CL8'ZSCROLLA'         VARIABLE NAME\n         DC    CL8'ZSCROLLN'         VARIABLE NAME\n* ------------------------------------------------------------------- *\n         SPACE 1\nH8       DC    H'8'                  CONSTANT\nP0       DC    P'0'\nP1       DC    P'1'\nHEX0F    DC    8X'0F'\nHEX1F    DC    8X'1F'\n         SPACE 1\n* ------------------------------------------------------------------- *\n*   The following two lines are a positionally dependant table        *\n* ------------------------------------------------------------------- *\nCHARHEX  DC    X'00AABBCCDDEEFF000000000000000000'\n         DC    X'00010203040506070809000000000000'\n* ------------------------------------------------------------------- *\n         SPACE 1\nHEXCHAR  DC    C'0123456789ABCDEF'\nVDATA    DC    CL8'VDATA'            VARIABLE NAME\nVDEFINE  DC    CL8'VDEFINE'\nVDELETE  DC    CL8'VDELETE'\nDISPLAY  DC    CL8'DISPLAY'\nVGET     DC    CL8'VGET'\nVPUT     DC    CL8'VPUT'\nSHARED   DC    CL8'SHARED'\nCHARFORM DC    CL4'CHAR'\nPQUERY   DC    CL8'PQUERY'\nCVDATA   DC    CL8'VDATA'\nCVTYPE   DC    CL8'VTYPE'\nCVWIDTH  DC    CL8'VWIDTH'\nCVDEPTH  DC    CL8'VDEPTH'\nCVROW    DC    CL8'VROW'\nCVCOL    DC    CL8'VCOL'\nCKPT     DC    C'CKPT'\nMAIN     DC    C'MAIN'\nSTAT     DC    C'STAT'\nFXNODES1 DC    CL8'FXNODES1'\nFXNODES2 DC    CL8'FXNODES2'\nBLANKS   DC    CL80' '\nMSG01    DS    0C\n         DC    C'FXTNODE01E  INVALID COMMAND'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    C'FXTNODE02E  INVALID HEX VALUE IN STATUS ON NODE #'\nMSG02#   DC    X'40202021'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    C'FXTNODE03E  INVALID STATUS VALUE ON NODE #'\nMSG03#   DC    X'40202021'\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    C'FXTNODE04E  NO PERIOD IN DATE ON NODE #'\nMSG04#   DC    X'40202021'\nMSG04L   EQU   *-MSG04\nMSG05    DS    0C\n         DC    C'FXTNODE05E  INVALID DIGIT IN DATE ON NODE #'\nMSG05#   DC    X'40202021'\nMSG05L   EQU   *-MSG05\nMSG06    DS    0C\n         DC    C'FXTNODE06E  INVALID DIGIT IN TIME ON NODE #'\nMSG06#   DC    X'40202021'\nMSG06L   EQU   *-MSG06\nMSG07    DS    0C\n         DC    C'FXTNODE07E  EXIT NOT ALLOWED UNTIL ERROR(S) ARE CORREC+\n               TED'\nMSG07L   EQU   *-MSG07\nNODEMSG  DS    0C\n         COPY  NODEMSG\n         LTORG\n* ------------------------------------------------------------------- *\n*        Our parameter block                                          *\n* ------------------------------------------------------------------- *\n         TNODEPRM DSECT=YES\n* ------------------------------------------------------------------- *\n*        Dynamic area detail lines                                    *\n* ------------------------------------------------------------------- *\nD1       DSECT\nD1ATTR1  DS    CL01\nD1NDE#   DS    CL03                NODE NUMBER\nD1ATTR2  DS    CL01\nD1NDENM  DS    CL08                NODE NAME\nD1ATTR3  DS    CL01\nD1NDESH  DS    CL02                STATUS IN HEX\nD1ATTR4  DS    CL01\nD1NDEST  DS    CL25                STATUS\nD1ATTR5  DS    CL01\nD1NDETD  DS    CL08                TRANSMISSION DATE\nD1ATTR6  DS    CL01\nD1NDETT  DS    CL08                TRANSMISSION TIME\nD1ATTR7  DS    CL01\nD1NDERD  DS    CL08                RESTORE NOTIFCATION DATE\nD1ATTR8  DS    CL01\nD1NDERT  DS    CL08                RESTORE NOTIFICATION TIME\nD1ATTR9  DS    CL01\nD1L      EQU   *-D1\nD2       DSECT\nD2ATTR1  DS    CL01\nD2NDE#   DS    CL03                NODE NUMBER\nD2ATTR2  DS    CL01\nD2NDENM  DS    CL08                NODE NAME\nD2ATTR3  DS    CL01\nD2CKPTR  DS    CL07                CHECKPOINT RECORD NUMBER\nD2ATTR4  DS    CL01\nD2CKPTT  DS    CL06                CHECKPOINT TTR\nD2L      EQU   *-D2\n* ------------------------------------------------------------------- *\n*        Work areas                                                   *\n* ------------------------------------------------------------------- *\nDXDTNODE DSECT\nDXDID    DS    CL8\nDXDSAVE  DS    18F\nDXDSPFEP DS    A                   SPF INTERFACE ENTRY POINT\nDXDSPF   DS    0A                  ISPF PARM LIST\nDXDSPF1  DS    A                   PARM 1 ADDRESS\nDXDSPF2  DS    A                   PARM 2 ADDRESS\nDXDSPF3  DS    A                   PARM 3 ADDRESS\nDXDSPF4  DS    A                   PARM 4 ADDRESS\nDXDSPF5  DS    A                   PARM 5 ADDRESS\nDXDSPF6  DS    A                   PARM 6 ADDRESS\nDXDSPF7  DS    A                   PARM 7 ADDRESS\nDXDSPF8  DS    A                   PARM 8 ADDRESS\nDXDVDA   DS    F                   DYNAMIC AREA DATA (VDATA) ADDRESS\nDXDVDL   DS    F                   DYNAMIC AREA SIZE\nDXDOFF   DS    H                   OFFSET TO NODE DATA\nDXDREL   DS    H                   RELATIVE NODE NUMBER ON FIRST LINE\nDXDVLINE DS    H                   NUMBER OF LINES VISIBLE ON SCREEN\nDXDRC    DS    H                   RETURN CODE FROM DISPLAY\nDXDNODES DS    H                   NUMBER OF NODES TO DISPLAY\nDXDNDE#  DS    PL2                 NODE NUMBER ON FIRST LINE\nDXDFLAG  DS    X                   INTERNAL FLAGS\n$DXDVPUT EQU   X'80'               .. VPUT HAS BEEN ISSUED\n$ERROR   EQU   X'40'               .. ERROR IN USER'S DATA\n$UPDATE  EQU   X'20'               .. RECORD UPDATED\n$REBUILD EQU   X'10'               .. RE-BUILD DYNAMIC AREA\n$D2      EQU   X'08'               .. WORKING WITH SCREEN 2\nDXDPANL  DS    CL8                 PANEL NAME\nDXDWORK  DS    CL10\nFXNDATA  DS    0F\n         COPY  FXNDATA             NODE DISPLAY DATA\n         VARREQ DSECT=NO\n* ------------------------------------------------------------------- *\n*              Common data area                                       *\n* ------------------------------------------------------------------- *\n         FXMCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              REQUEST BLOCK                                          *\n* ------------------------------------------------------------------- *\n         REQBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              Node status messages                                   *\n* ------------------------------------------------------------------- *\nNDESTAT  DSECT\nNDEST    DS   X\nNDEMSG   DS   CL25\nNDESTATL EQU  *-NDESTAT\n* ------------------------------------------------------------------- *\n*              Equates                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  FXTNODE\n./ ADD NAME=FXTREQE  0100-99056-99056-1500-00352-00352-00000-FX-REL1\n\n         TITLE 'FXTREQE  TRANSMISSION REQUEST ENTRY'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXTREQE                                               *\n*                                                                     *\n*  TSO interface transmission request entry processor                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTREQE    FXPRFX 'TSO INTERFACE TRANSMISSION REQUEST ENTRY',            +\n               COMM=FXTCOMM\nFXTREQE  AMODE 31\nFXTREQE  RMODE ANY\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    TREQ0000              YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         LA    R1,DISPLAY            DISPLAY COMMAND ADDRESS\n         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST\n         LA    R1,PANLNAME           PANEL NAME'S ADDRESS\n         ST    R1,DXDSPF2            SET ADDRESS IN PARM LIST\n         LA    R1,COMMBLKS           NO MESSAGE ID\n         ST    R1,DXDSPF3            SET ADDRESS IN PARM LIST\n         LA    R1,DXDCSR             FIELD NAME FOR CURSOR\n         ST    R1,DXDSPF4            SET ADDRESS IN PARM LIST\n         LA    R1,F1                 FIRST POSITION OF FIELD\n         ST    R1,DXDSPF5            SET PARM\n         OI    DXDSPF5,X'80'         FLAG END OF LIST\nTREQ0000 DS    0H\n         MVC   DXDCSR,PODSN          DEFAULT TO DATA SET NAME\n         L     R8,COMMIOA            I/O AREA'S ADDRESS\n         USING USERREQ,R8            DEFINE BASE\n         MINIT COMMBLKS,P0,$REQINIT,R14 INITIALIZE REQUEST AREA\n         CLC   DEFDEST,COMMBLKS      DEFAULT DESTINATION DEFINED?\n         BE    TREQ0010              NO\n         MVC   REQNDENM,DEFDEST      SET DEFAULT DESTINATION\n         MVC   REQNDE#,F1+2          SET NUMBER OF NODES TO 1\nTREQ0010 DS    0H\n         ITRACE ID=DISPLAY\n         LA    R1,DXDSPF             DISPLAY PARMS\n         L     R15,AISPLINK          SPF INTERFACE PARMS\n         BALR  R14,R15               LINK TO DISPLAY\n         MVC   COMMMSG,COMMBLKS      CLEAR MESSAGE\n         CH    R15,H8                'END' PRESSED?\n         BE    EXIT0000              YES\n         MVC   DXDCSR,PFNC           DEFAULT TO COMMAND AREA\n         CLC   COMMODSN,COMMBLKS     DATASET NAME ENTERED?\n         BNE   TREQ0020              YES\n         ITRACE ID=NOODSN\n         MVC   COMMMSG(MSG01L),MSG01 DATASET NOT ENTERED\n         MVC   DXDCSR,PODSN          PUT CURSOR ON DATA SET NAME\n         B     TREQ0010              RE-SEND WITH MESSAGE\nTREQ0020 DS    0H\n         LA    R1,COMMODSN           FIRST CHARACTER OF NAME\n         ST    R1,DSNADDR            SET DSN ADDRESS\n         LA    R1,DSNREQ             DSN SUBROUTINE PARM\n         L     R15,ADSNVER           DSN SUBROUTINE ENTRY POINT\n         BALR  R14,R15               CHECK DATA SET NAME\n         CLI   DSNSTAT,$DSNOK        DSN OK?\n         BE    TREQ0030              YES\n         MVC   COMMMSG(L'DSNMSG),DSNMSG\n         MVC   DXDCSR,PODSN          PUT CURSOR ON DATA SET NAME\n         B     TREQ0010              RESEND WITH MESSAGE\nTREQ0030 DS    0H\n         CLC   COMMDDSN,COMMBLKS     NEW NAME BLANK?\n         BE    TREQ0040              YES\n         LA    R1,COMMDDSN           FIRST CHARACTER OF NAME\n         ST    R1,DSNADDR            SET DSN ADDRESS\n         LA    R1,DSNREQ             DSN SUBROUTINE PARM\n         L     R15,ADSNVER           DSN SUBROUTINE ENTRY POINT\n         BALR  R14,R15               CHECK DATA SET NAME\n         CLI   DSNSTAT,$DSNOK        DSN OK?\n         BE    TREQ0040              YES\n         MVC   COMMMSG(L'DSNMSG),DSNMSG\n         MVC   DXDCSR,PDDSN          PUT CURSOR ON DATA SET NAME\n         B     TREQ0010              RESEND WITH MESSAGE\nTREQ0040 DS    0H\n         OC    COMMOMEM,COMMBLKS     FORCE UPPER CASE\n         OC    COMMDMEM,COMMBLKS     FORCE UPPER CASE\n         CLC   COMMOMEM,COMMBLKS     MEMBER NAME BLANK?\n         BE    TREQ0060              YES\n         LA    R1,COMMOMEM           MEMBER NAME ADDRESS\n         ST    R1,MEMADDR            SET MEMBER NAME ADDRESS\n         LA    R1,MEMREQ             MEMBER NAME VERIFICATION PARM\n         L     R15,AMEMVER           MEMBER NAME VERIFICATION ADDR\n         BALR  R14,R15               CHECK MEMBER NAME\n         CLI   MEMSTAT,$MEMOK        MEMBER NAME OK?\n         BE    TREQ0050              YES\n         MVC   COMMMSG(L'MEMMSG),MEMMSG\n         MVC   DXDCSR,POMEM          PUT CURSOR ON MEMBER NAME\n         B     TREQ0010              RESEND WITH MESSAGE\nTREQ0050 DS    0H\n         CLC   COMMDMEM,COMMBLKS     NEW MEMBER NAME BLANK?\n         BE    TREQ0070              YES\n         LA    R1,COMMDMEM           NEW MEMBER NAME ADDRESS\n         ST    R1,MEMADDR            SET MEMBER NAME ADDRESS\n         LA    R1,MEMREQ             MEMBER NAME REQUEST PARMS ADDR\n         L     R15,AMEMVER           MEMBER NAME VERIFICATION ADDR\n         BALR  R14,R15               VERIFY MEMBER NAME IS VALID\n         CLI   MEMSTAT,$MEMOK        MEMBER NAME OK?\n         BE    TREQ0070              YES\n         MVC   COMMMSG(L'MEMMSG),MEMMSG\n         MVC   DXDCSR,PDMEM          PUT CURSOR ON MEMBER NAME\n         B     TREQ0010              RE-DISPLAY WITH MESSAGE\nTREQ0060 DS    0H\n         CLC   COMMDMEM,COMMBLKS     NEW NAME BLANK?\n         BNE   ERR0050               NO.. NOT VALID\nTREQ0070 DS    0H\n         OC    COMMREPL,COMMBLKS     FORCE UPPER CASE\n         CLC   COMMREPL,COMMBLKS     REPLACE BLANK?\n         BE    TREQ0080              YES.. ASSUME NO\n         CLC   NO,COMMREPL           REPLACE = NO?\n         BE    TREQ0080              YES\n         CLC   YES,COMMREPL          REPLACE = YES?\n         BE    TREQ0090              YES\n         MVC   COMMMSG(MSG02L),MSG02 NOT VALID\n         MVC   DXDCSR,PREPL          PUT CURSOR ON REPLACE FLAG\n         B     TREQ0010              DISPLAY WITH MESSAGE\nTREQ0080 DS    0H\n         MVI   REQREPL,C'N'          SET REPLACE FLAG\n         MVC   COMMREPL,NO           FORCE \"NX\" TO \"NO\"\n         B     TREQ0100\nTREQ0090 DS    0H\n         MVI   REQREPL,C'Y'          SET REPLACE FLAG\n         MVC   COMMREPL,YES          FORCE \"YXX\" TO \"YES\"\nTREQ0100 DS    0H\n         OC    COMMALAS,COMMBLKS     FORCE UPPER CASE\n         CLC   COMMALAS,COMMBLKS     ALIAS BLANK?\n         BE    TREQ0110              YES\n         CLC   NO,COMMALAS           ALIAS = NO?\n         BE    TREQ0110              YES\n         CLC   YES,COMMALAS          ALIAS = YES?\n         BE    TREQ0120              YES\n         MVC   COMMMSG(MSG03L),MSG03 NOT VALID\n         MVC   DXDCSR,PALAS          PUT CURSOR ON ALIAS FLAG\n         B     TREQ0010              DISPLAY WITH MESSAGE\nTREQ0110 DS    0H\n         MVI   REQALIAS,C'N'         SET ALIAS FLAG\n         MVC   COMMALAS,NO           FORCE 'NXX' TO 'NO '\n         B     TREQ0150\nTREQ0120 DS    0H\n         MVC   COMMALAS,YES          FORCE 'YXX' TO 'YES'\n         MVI   REQALIAS,C'Y'         SET ALIAS FLAG\n         CLC   COMMDMEM,COMMBLKS     NEW MEMBER NAME ALSO?\n         BNE   TREQ0130              YES.. NOT ALLOWED\n         CLC   COMMOMEM,COMMBLKS     MEMBER NAME BLANK?\n         BE    TREQ0140              YES.. NOT ALLOWED\n         B     TREQ0150\nTREQ0130 DS    0H\n         MVC   COMMMSG(MSG04L),MSG04 NOT VALID\n         MVC   DXDCSR,PALAS          PUT CURSOR ON ALIAS FLAG\n         B     TREQ0010              DISPLAY WITH MESSAGE\nTREQ0140 DS    0H\n         MVC   COMMMSG(MSG05L),MSG05 NOT VALID\n         MVC   DXDCSR,PALAS          PUT CURSOR ON ALIAS FLAG\n         B     TREQ0010              DISPLAY WITH MESSAGE\nTREQ0150 DS    0H\n         CLC   COMMFNC,COMMBLKS      ANY COMMAND?\n         BE    TREQ0010              NO\n         CLI   COMMFNC,C'L'          NODE LIST DISPLAY?\n         BE    TREQ0160              YES\n         CLI   COMMFNC,C'S'          SUBMIT THE REQUEST?\n         BE    TREQ0170              YES\n         MVC   COMMMSG(MSG06L),MSG06\n         B     TREQ0010              RESEND WITH MESSAGE\nTREQ0160 DS    0H\n         MVC   COMMZCMD,COMMBLKS     CLEAR ZCMD\n         MVC   COMMFNC,COMMBLKS      CLEAR OUR COMMAND\n         MVI   TNODECMD,$TNODEE      NODE NAME ONLY ENTRY\n         LA    R1,USERDATA           REQBLOK'S ADDRESS\n         ST    R1,TNODEREQ           PASS ADDRESS TO NODE DISPLAY\n         LA    R1,COMMZCMD           SPF ZCMD AREA ADDRESS\n         ST    R1,TNODEZCM           PASS ADDRESS TO NODE DISPLAY\n         LA    R1,TNODEPRM           NODE DISPLAY PARM LIST ADDRESS\n         L     R15,ATNODE            NODE DISPLAY ENTRY POINT\n         BALR  R14,R15               LINK TO NODE DISPLAY\n         B     TREQ0010              DISPLAY MENU AGAIN\nTREQ0170 DS    0H\n         LA    R1,REQNDENM           FIRST NODE NAME\n         USING REQNDENM,R1           DEFINE BASE\n         LA    R15,$MAXNODE          MAXIMUM NUMBER OF NODES\nTREQ0180 DS    0H\n         CLC   REQNDENM,COMMBLKS     NODE NAME BLANK?\n         BNE   TREQ0190              NO\n         LA    R1,REQNDEL(R1)        NEXT NODE\n         BCT   R15,TREQ0180          LOOP\n         MVC   COMMMSG(MSG07L),MSG07 NO DESTINATIONS GIVEN\n         B     TREQ0010              RE-SEND WITH MESSAGE\nTREQ0190 DS    0H\n         ITRACE ID=BLDREQ\n         LA    R1,(USERDATA-USERREQ)+REQBLOKL\n         STH   R1,USERLEN            SET TOTAL DATA LENGTH\n         MVC   USERMOD,REQE          PROCESSING MODULE SUFFIX\n         MVC   REQODSNM,COMMODSN     SET ORIGINAL DATASET'S NAME\n         MVC   REQOMEM,COMMOMEM      SET ORIGINAL MEMBER NAME\n         MVC   REQDDSNM,COMMDDSN     SET DATASET NAME AT DESTINATION\n         MVC   REQDMEM,COMMDMEM      SET NEW MEMBER NAME\n         MVC   REQENODE,COMMFX       SET NODE WHERE REQUEST WAS ENTERED\n         MVC   REQTNODE,COMMFX       ASSUME SAME FX WILL TRANSMIT\n         CLC   COMMTNDE,COMMBLKS     NODE NAME GIVEN BY USER?\n         BE    TREQ0200              NO\n         MVC   REQTNODE,COMMTNDE     OVER-RIDE NODE NAME\nTREQ0200 DS    0H\n         MVC   REQREPL,COMMREPL      SET REPLACE INDICATOR\n         MVC   REQALIAS,COMMALAS     SET ALIAS INDICATOR\n         L     R3,COMMRPL            RPL ADDRESS\n         L     R4,COMMRPLX           RPL EXTENSION ADDRESS\n         USING ISTRPL6X,R4           DEFINE BASE\n         LH    R6,USERLEN            I/O LENGTH\n         APPCCMD CONTROL=SEND,       ISSUE SEND                        +\n               QUALIFY=DATA,         .. SEND DATA                      +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               AREA=(R8),            .. I/O AREA ADDRESS               +\n               RECLEN=(R6),          .. I/O LENGTH                     +\n               CONMODE=CS,           .. CONTINUE SPECIFIC              +\n               CONVID=COMMCID        .. CONVERSATION ID\n         OC    RPL6RC,RPL6RC         SEND OK?\n         BNZ   ERR0010               NO\n         L     R6,=A(COMMIOSZ)       I/O AREA SIZE\n         APPCCMD CONTROL=RECEIVE,    ISSUE RECEIVE                     +\n               QUALIFY=SPEC,         .. FOR A SPECIFIC SESSION         +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               FILL=LL,              .. ONLY 1 LOGICAL RECORD          +\n               AREA=(R8),            .. I/O AREA ADDRESS               +\n               AREALEN=(R6),         .. I/O AREA SIZE                  +\n               CONVID=COMMCID        .. CONVERSATION ID\n         OC    RPL6RC,RPL6RC         RECEIVE OK?\n         BNZ   ERR0020               NO\n         MVC   COMMMSG,USERMSG       SET MESSAGE\n         CLI   USERRC,0              REQUEST ACCEPTED?\n         BE    EXIT0000              YES, RETURN TO MENU\n         B     TREQ0010              RESEND WITH MESSAGE\nERR0010  DS    0H\n         ITRACE ID=SENDFAIL,         SEND FAILED                       +\n               DATA1=RPL6RC          .. RETURN CODE\n         ABEND $U0051,DUMP,,USER\nERR0020  DS    0H\n         ITRACE ID=RECVFAIL,         RECEIVE FAILED                    +\n               DATA1=RPL6RC          .. RETURN CODE\n         ABEND $U0052,DUMP,,USER\nERR0050  DS    0H\n         ITRACE ID=NOOMEM            NEW MEMBER NAME, NO ORIGINAL NAME\n         MVC   COMMMSG(MSG08L),MSG08\n         B     TREQ0010              RESEND WITH MESSAGE\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         MVI   COMMFNC,C' '          CLEAR FUNCTION CODE\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDTREQE)           DISPLACEMENT TO WORK AREA\nF1       DC    F'1'\nH8       DC    H'8'\nP0       DC    P'0'\nDEFDEST  DC    CL8'&DDEST'\nPFNC     DC    CL8'PFNC'\nPODSN    DC    CL8'PODSN'\nPDDSN    DC    CL8'PDDSN'\nPOMEM    DC    CL8'POMEM'\nPDMEM    DC    CL8'PDMEM'\nPREPL    DC    CL8'PREPL'\nPALAS    DC    CL8'PALAS'\nREQE     DC    CL4'REQE'\nDISPLAY  DC    CL8'DISPLAY'\nPANLNAME DC    CL8'FXREQE'\nNO       DC    C'NO '\nYES      DC    C'YES'\nMSG01    DS    0C\n         DC    CL11'FXTREQE01E'\n         DC    C'DATASET NAME IS REQUIRED'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'FXTREQE02E'\n         DC    C'REPLACE MUST SPECIFY EITHER YES OR NO'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'FXTREQE03E'\n         DC    C'ALIAS MUST SPECIFIY EITHER YES OR NO'\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    CL11'FXTREQE04E'\n         DC    C'NEW MEMBER NAME NOT ALLOWED WHEN SENDING ALIASES'\nMSG04L   EQU   *-MSG04\nMSG05    DS    0C\n         DC    CL11'FXTREQE05E'\n         DC    C'MEMBER NAME REQUIRED WHEN SENDING ALIASES'\nMSG05L   EQU   *-MSG05\nMSG06    DS    0C\n         DC    CL11'FXTREQE06E'\n         DC    C'INVALID COMMAND'\nMSG06L   EQU   *-MSG06\nMSG07    DS    0C\n         DC    CL11'FXTREQE07E'\n         DC    C'NO DESTINATIONS HAVE BEEN ENTERED'\nMSG07L   EQU   *-MSG07\nMSG08    DS    0C\n         DC    CL11'FXTREQE08E'\n         DC    C'NEW MEMBER NAME NOT VALID WITHOUT ORIGINAL MEMBER NAME+\n               '\nMSG08L   EQU   *-MSG08\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDTREQE DSECT\nDXDID    DS    CL8\nDXDSAVE  DS    18F\n         SPACE 1\n* ------------------------------------------------------------------- *\nDXDSPF   DS    0A\nDXDSPF1  DS    A\nDXDSPF2  DS    A                     SPF FUNCTION PARM LIST\nDXDSPF3  DS    A\nDXDSPF4  DS    A\nDXDSPF5  DS    A\n* ------------------------------------------------------------------- *\nDXDCSR   DS    CL8\n         SPACE 1\n         TNODEPRM DSECT=NO\n         DSNREQ   DSECT=NO\n         MEMREQ   DSECT=NO\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         FXTCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              USER INTERFACE REQUEST BLOCK                           *\n* ------------------------------------------------------------------- *\n         USERREQ\n         REQBLOK  DSECT=NO\n* ------------------------------------------------------------------- *\n*              ACB                                                    *\n* ------------------------------------------------------------------- *\n         IFGACB   AM=VTAM\n* ------------------------------------------------------------------- *\n*              RPL                                                    *\n* ------------------------------------------------------------------- *\n         IFGRPL   AM=VTAM\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  FXTREQE\n./ ADD NAME=FXTREQI  0100-99056-99056-1500-00466-00466-00000-FX-REL1\n\n         TITLE 'FXTREQI TRANSMISSION REQUEST INQUIRY (AND UPDATE)'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: FXTREQI                                               *\n*                                                                     *\n*  TSO interface transmission request inquiry (and update) processor. *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTREQI    FXPRFX 'TSO INTERFACE TRANSMISSION REQUEST INQUIRY',          +\n               COMM=FXTCOMM\nFXTREQI  AMODE 31\nFXTREQI  RMODE ANY\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    TREQ0010              YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         MVC   DXDPANL,FXREQI1       ASSUME MINIMAL INFO PANEL\n         CLI   COMMUATH,3            ADMINISTRATOR OR GREATER?\n         BL    TREQ0010              NO\n         MVC   DXDPANL,FXREQI2       FULL FUNCTION PANEL\nTREQ0010 DS    0H\n         MVI   DXDFLAG,0             INITIALIZE ALL FLAGS\n         GETMAIN RU,                 ACQUIRE STORAGE FOR 24-BIT STUFF  +\n               LV=FX24L,             .. SIZE OF AREA                   +\n               LOC=BELOW             .. FROM 24-BIT STORAGE\n         ST    R1,DXD24              SAVE 24-BIT WORK AREA ADDRESS\n         LR    R9,R1                 COPY WORK AREA ADDRESS\n         USING FX24PRM,R9            DEFINE BASE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR DCB           +\n               LV=DCBIL,             .. SIZE OF AREA                   +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,DCB24              SAVE DCB ADDRESS\n         MVC   0(DCBIL,R1),DCBI      INITIALIZE THE DCB\n         NI    DXDFLAG,255-$FOUND    RESET 'FOUND' FLAG\n         MVC   DXDUSER,COMMRID       SAVE USER ID FROM MENU\n         XC    DXDREC#,DXDREC#       INITIALIZE RECORD NUMBER\n         L     R7,COMMIOA            I/O AREA ADDRESS\n         USING USERREQ,R7            DEFINE BASE\n         L     R6,COMMRPL            RPL ADDRESS\n         L     R5,COMMRPLX           RPL EXTENSION ADDRESS\n         USING ISTRPL6X,R5           DEFINE BASE\n         B     TREQ0030\nTREQ0020 DS    0H\n         NI    DXDFLAG,255-$DELETE   RESET DELETED FLAG\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,DXDREC#          CURRENT RECORD NUMBER\n         LA    R1,1(R1)              NEXT RECORD NUMBER\n         STCM  R1,3,DXDREC#          SAVE NEW RECORD NUMBER\nTREQ0030 DS    0H\n         ITRACE ID=INQUIRE,          SENDING AN INQUIRY TO FX STC      +\n               DATA1=DXDREC#,        .. STARTING RECORD NUMBER         +\n               DATA2=DXDUSER         .. USER ID\n         MVI   USERCMD,$USERINQ      SET COMMAND (REQUEST INQUIRY)\nTREQ0040 DS    0H\n         LA    R2,USERXL             TOTAL LENGTH\n         STH   R2,USERLEN            SET LENGTH\n         MVC   USERMOD,REQI          PROCESSING MODULE SUFFIX\n         MVC   USERREC#,DXDREC#      SET RECORD NUMBER\n         MVC   USERIDI,DXDUSER       SET USERID\n         MVC   DXDCMD,USERCMD        SAVE COMMAND\n         ITRACE ID=SEND              SENDING\n         APPCCMD CONTROL=SEND,       ISSUE SEND                        +\n               QUALIFY=DATA,         .. SEND DATA                      +\n               RPL=(R6),             .. RPL'S ADDRESS                  +\n               AREA=(R7),            .. I/O AREA ADDRESS               +\n               RECLEN=(R2),          .. I/O LENGTH                     +\n               CONMODE=CS,           .. CONTINUE SPECIFIC              +\n               CONVID=COMMCID        .. CONVERSATION ID\n         OC    RPL6RC,RPL6RC         SEND OK?\n         BNZ   ERR0010               NO\n         ITRACE ID=RECEIVE           RECEIVING\n         L     R2,=A(COMMIOSZ)       I/O AREA SIZE\n         APPCCMD CONTROL=RECEIVE,    ISSUE RECEIVE                     +\n               QUALIFY=SPEC,         .. FOR A SPECIFIC SESSION         +\n               RPL=(R6),             .. RPL'S ADDRESS                  +\n               FILL=LL,              .. ONLY 1 LOGICAL RECORD          +\n               AREA=(R7),            .. I/O AREA ADDRESS               +\n               AREALEN=(R2),         .. I/O AREA SIZE                  +\n               CONVID=COMMCID        .. CONVERSATION ID\n         OC    RPL6RC,RPL6RC         RECEIVE OK?\n         BNZ   ERR0020               NO\n         CLI   USERRC,20             USER NOT AUTHORIZED TO USER FX?\n         BE    ERR0030               NOT AUTHORIZED\n         CLI   USERRC,12             RECORD IN USE?\n         BE    ERR0070               YES\n         CLI   USERRC,8              MATCHING RECORD?\n         BE    TREQ0210              NO..\n         CLI   DXDCMD,$USERPRT       WAS COMMAND DISPLAY SYSPRINT?\n         BE    TREQ0160              YES\n         CLI   DXDCMD,$USERINQ       WAS COMMAND INQUIRE?\n         BNE   TREQ0230              NO\n         ITRACE ID=EDITDATA          STARTING DATA EDIT\n         LA    R4,USERDATA\n         USING REQBLOK,R4            DEFINE BASE\n         OI    DXDFLAG,$FOUND        A RECORD WAS FOUND FOR THE USER\n         PACK  COMMDWRD,REQREC#      PACK RECORD NUMBER\n         CVB   R1,COMMDWRD           CONVERT TO BINARY\n         BCTR  R1,0                  MINUS 1 (RELATIVE TO ZERO)\n         STH   R1,DXDREC#            SAVE RETURNED RECORD NUMBER\n         CLI   REQSTAT,$REQCNTL      CONTROL RECORD?\n         BE    TREQ0020              YES.. DON'T DISPLAY IT\n         MVC   COMMRID,REQESTOR      SET USER ID\n         MVC   DXDWORK(L'DATEEDWD),DATEEDWD\n         ED    DXDWORK(L'DATEEDWD),REQEDATE\n         MVC   COMMEDTE,DXDWORK+1    COPY DATE ENTERED\n         MVC   DXDWORK(L'TIMEEDWD),TIMEEDWD\n         ED    DXDWORK,REQETIME      EDIT TIME ENTERED\n         MVC   COMMETME,DXDWORK+1    COPY TIME ENTERED\n         MVC   DXDWORK(L'DATEEDWD),DATEEDWD\n         ED    DXDWORK(L'DATEEDWD),REQCDATE\n         MVC   COMMCDTE,DXDWORK+1    COPY DATE COMPLETED\n         MVC   DXDWORK(L'TIMEEDWD),TIMEEDWD\n         ED    DXDWORK,REQCTIME      EDIT TIME COMPLETED\n         MVC   COMMCTME,DXDWORK+1    COPY TIME COMPLETED\n         MVC   COMMENDE,REQENODE     COPY ORIGINATING NODE\n         ICM   R1,15,REQNBR          REQUEST NUMBER\n         CVD   R1,DXDDWORD           CONVERT TO DECIMAL\n         MVC   DXDWORK(8),=X'F020202020202020'\n         ED    DXDWORK(8),DXDDWORD+4 EDIT REQUEST NUMBER\n         MVC   COMMNBR,DXDWORK+1     COPY EDITED REQUEST NUMBER\n         MVC   COMMTNDE,REQTNODE     COPY TRANSMITTING NODE\n         MVC   COMMJOB,REQJOB        JOB NAME IF VIA BATCH\n         LA    R1,REQMSG             STATUS MESSAGES TABLE\nTREQ0050 DS    0H\n         CLC   REQSTAT,0(R1)         STATUS MESSAGE LOCATED?\n         BE    TREQ0060              YES\n         LA    R1,L'REQSTAT+L'COMMSTAT(R1)\n         CLI   0(R1),X'FF'           END OF TABLE?\n         BNE   TREQ0050              NO\nTREQ0060 DS    0H\n         MVC   COMMSTAT,1(R1)        COPY STATUS MESSAGE\n         MVC   COMMODSN,REQODSNM     COPY ORIGINAL DATASET NAME\n         MVC   COMMOMEM,REQOMEM      COPY ORIGINAL MEMBER NAME\n         MVC   COMMDDSN,REQDDSNM     COPY DESTINATION DATASET NAME\n         MVC   COMMDMEM,REQDMEM      COPY NEW MEMBER NAME\n         MVC   COMMWDSN,REQWDSNM     COPY STAGING DATASET NAME\n         MVC   COMMIDSN,REQIDSNM     COPY SYSIN DATASET NAME\n         MVC   COMMSDSN,REQSDSNM     COPY SYSPRINT DATASET NAME\n         CLI   REQREPL,C'N'          DON'T REPLACE?\n         BE    TREQ0070              RIGHT\n         MVC   COMMREPL,YES          INDICATE REPLACE=YES\n         B     TREQ0080\nTREQ0070 DS    0H\n         MVC   COMMREPL,NO           INDICATE REPLACE=NO\nTREQ0080 DS    0H\n         CLI   REQALIAS,C'N'         DON'T SEND ALIASES?\n         BE    TREQ0090              RIGHT\n         MVC   COMMALAS,YES          INDICATE ALIAS=YES\n         B     TREQ0100\nTREQ0090 DS    0H\n         MVC   COMMALAS,NO           INDICATE ALIAS=NO\nTREQ0100 DS    0H\n         ITRACE ID=DISPLAY\n         MVI   COMMFNC,C' '          CLEAR COMMAND\n         LA    R1,DISPLAY            DISPLAY COMMAND ADDRESS\n         ST    R1,DXDSPFP1           SET SPF PARM ADDRESS 1\n         LA    R1,DXDPANL            PANEL NAME\n         ST    R1,DXDSPFP2           SET ADDRESS IN PARM LIST\n         OI    DXDSPFP2,X'80'        FLAG 'END-OF-LIST'\n         LA    R1,DXDSPFP1           DISPLAY PARMS\n         L     R15,AISPLINK          SPF INTERFACE PARMS\n         BALR  R14,R15               LINK TO DISPLAY\n         MVC   COMMMSG,COMMBLKS      CLEAR MESSAGE\n         CH    R15,H8                'END' PRESSED?\n         BE    EXIT0000              YES\n         CLI   COMMFNC,C'N'          NEXT RECORD?\n         BE    TREQ0020              YES.. REQUEST NEXT RECORD\n         TM    DXDFLAG,$DELETE       REQUEST DELETED?\n         BO    ERR0060               YES\n         CLI   COMMFNC,C'C'          CANCEL THIS REQUEST?\n         BE    TREQ0120              YES\n         CLI   COMMFNC,C'D'          DELETE THIS REQUEST?\n         BE    TREQ0130              YES\n         CLI   COMMFNC,C'L'          DISPLAY NODE LIST?\n         BE    TREQ0140              YES\n         CLI   COMMFNC,C'O'          DISPLAY SYSPRINT?\n         BE    TREQ0150              YES\n         CLI   COMMFNC,C' '          REFRESH INFO ON THIS REQUEST?\n         BE    TREQ0030              YES\nTREQ0110 DS    0H\n         ITRACE ID=INVLDCMD          USER ENTERED AN INVALID COMMAND\n         MVC   COMMMSG(MSG01L),MSG01 SET MESSAGE\n         B     TREQ0080              DISPLAY WITH MESSAGE\nTREQ0120 DS    0H\n         ITRACE ID=CANCEL\n         MVI   USERCMD,$USERCAN      SET COMMAND (CANCEL)\n         B     TREQ0040              SEND COMMAND TO FX\nTREQ0130 DS    0H\n         CLI   COMMUATH,3            ADMINISTRATOR OR GREATER?\n         BL    TREQ0110              NO\n         ITRACE ID=DELETE\n         OI    DXDFLAG,$DELETE       INDICATE REQUEST HAS BEEN DELETED\n         MVI   USERCMD,$USERDEL      SET COMMAND (DELETE)\n         B     TREQ0040              SEND COMMAND TO FX\nTREQ0140 DS    0H\n         ITRACE ID=NODEDISP\n         MVC   COMMZCMD,COMMBLKS     CLEAR SPF COMMAND\n         MVC   COMMFNC,COMMBLKS      CLEAR OUR COMMAND\n         MVI   TNODECMD,$TNODED      DISPLAY NODE LIST\n         ST    R4,TNODEREQ           SET REQBLOK ADDRESS\n         LA    R1,COMMZCMD           SPF ZCMD DATA ADDRESS\n         ST    R1,TNODEZCM           PASS ADDRESS TO NODE DISPLAY\n         LA    R1,TNODEPRM           NODE DISPLAY PARM LIST ADDRESS\n         L     R15,ATNODE            NODE DISPLAY ENTRY POINT\n         BALR  R14,R15               DISPLAY NODE LIST\n         B     TREQ0080              RE-DISPLAY\nTREQ0150 DS    0H\n         ITRACE ID=PRINT1\n         MVI   USERCMD,$USERPRT      SET COMMAND (RETURN SYSPRINT)\n         B     TREQ0040              SEND COMMAND TO FX\nTREQ0160 DS    0H\n         ITRACE ID=PRINT2\n         L     R2,DCB24              DCB'S ADDRESS\n         USING IHADCB,R2             DEFINE BASE\n         MVC   DCBLRECL,USERRCSZ     COPY RECORD SIZE\n         MVC   DCBBLKSI,USERBLKZ     COPY BLOCK SIZE\n         MVC   DCBRECFM,USERRCFM     COPY RECORD FORMAT\n         FX24  $OPENO                OPEN THE DCB FOR OUTPUT\n         SR    R3,R3                 CLEAR REGISTER\n         ICM   R3,3,USERLEN          TOTAL LENGTH RETURNED\n         SH    R3,=Y(USERPRT-USERREQ) MINUS PREFIX LENGTH\n         LA    R4,USERPRT            FIRST LINE OF SYSPRINT\nTREQ0170 DS    0H\n         ST    R4,IOA24              SET I/O AREA ADDRESS\n         FX24  $PUT                  WRITE A RECORD TO TEMP FILE\n         SR    R1,R1                 CLEAR REGISTER\n         TM    DCBRECFM,DCBRECV      VARIABLE LENGTH RECORDS?\n         BO    TREQ0180              YES\n         ICM   R1,3,DCBLRECL         USE RECORD SIZE FROM DCB\n         B     TREQ0190\nTREQ0180 DS    0H\n         ICM   R1,3,0(R4)            USE RECORD SIZE FROM I/O AREA\nTREQ0190 DS    0H\n         SR    R3,R1                 MINUS LENGTH OF THIS RECORD\n         BZ    TREQ0200              END OF DATA\n         AR    R4,R1                 NEXT RECORD\n         B     TREQ0170              LOOP\nTREQ0200 DS    0H\n         ITRACE ID=LISTEOD           END OF LIST DATA\n         FX24  $CLOSE                CLOSE THE TEMP FILE\n         XC    DXDSPFP1(DXDSPFPL),DXDSPFP1\n         LA    R1,LMINIT             LMINIT COMMAND NAME ADDRESS\n         ST    R1,DXDSPFP1           SET IN PARM LIST\n         LA    R1,DID                VARIABLE NAME OF DID VALUE\n         ST    R1,DXDSPFP2           SET IN PARM LIST\n         LA    R1,DCBDDNAM           DDNAME ADDRESS\n         ST    R1,DXDSPFPA           SET IN PARM LIST\n         OI    DXDSPFPA,X'80'        SET 'END-OF-LIST'\n         LA    R1,DXDSPFP1           FIRST LMINIT PARM\n         L     R15,AISPLINK          SPF INTERFACE ENTRY POINT\n         BALR  R14,R15               LINK TO SPF\n         LTR   R15,R15               LMINIT SUCCESSFUL?\n         BNZ   ERR0040               NO\n         XC    DXDSPFP1(DXDSPFPL),DXDSPFP1\n         LA    R1,BROWSE             BROWSE COMMAND NAME\n         ST    R1,DXDSPFP1           SET IN PARM LIST\n         LA    R1,COMMDID            DATA ID\n         ST    R1,DXDSPFP6           SET ADDRESS IN PARM LIST\n         OI    DXDSPFP6,X'80'        FLAG 'END-OF-LIST'\n         LA    R1,DXDSPFP1           PARM LIST ADDRESS\n         L     R15,AISPLINK          SPF INTERFACE ADDRESS\n         BALR  R14,R15               LINK TO SPF\n         LTR   R15,R15               BROWSE SUCCESSFUL?\n         BNZ   ERR0050               NO\n         B     TREQ0030              REQUEST 'REFRESHED' DATA\nTREQ0210 DS    0H\n         ITRACE ID=MSTREOF           END OF MASTER FILE RECORDS\n         TM    DXDFLAG,$FOUND        ANY RECORDS FOUND AT ALL?\n         BNO   TREQ0220              NO\n         MVC   COMMMSG(MSG02L),MSG02 SET MESSAGE\n         B     EXIT0000              EXIT\nTREQ0220 DS    0H\n         MVC   COMMMSG(MSG03L),MSG03 SET MESSAGE\n         B     EXIT0000              AND EXIT\nTREQ0230 DS    0H\n         CLI   USERRC,0              SUCCESSFUL?\n         BNE   TREQ0240              NO\n         MVC   COMMMSG(MSG04L),MSG04 SET MESSAGE\n         B     TREQ0080              DISPLAY WITH MESSAGE\nTREQ0240 DS    0H\n         MVC   COMMMSG(MSG05L),MSG05 SET MESSAGE\n         B     TREQ0080              DISPLAY WITH MESSAGE\nERR0010  DS    0H\n         ITRACE ID=SENDFAIL,         SEND FAILED                       +\n               DATA1=RPL6RC          .. RETURN CODE\n         ABEND $U0053,DUMP,,USER\nERR0020  DS    0H\n         ITRACE ID=RECVFAIL,         RECEIVE FAILED                    +\n               DATA1=RPL6RC          .. RETURN CODE\n         ABEND $U0054,DUMP,,USER\nERR0030  DS    0H\n         ITRACE ID=NOTAUTH           USER IS NOT AUTHORIZED TO USE FX\n         MVC   COMMMSG(MSG06L),MSG06 SET MESSAGE\n         B     EXIT0000              AND EXIT\nERR0040  DS    0H\n         ITRACE ID=LMINITF,          LMINIT FAILED                     +\n               DATA1=R15             .. RETURN CODE\n         ABEND $U0081,DUMP,,USER\nERR0050  DS    0H\n         ITRACE ID=BROWSEF,          BROWSE FAILED                     +\n               DATA1=R15             .. RETURN CODE\n         ABEND $U0082,DUMP,,USER\nERR0060  DS    0H\n         MVC   COMMMSG(MSG07L),MSG07\n         B     TREQ0080              DISPLAY WITH MESSAGE\nERR0070  DS    0H\n         ITRACE ID=INUSE             USER IS NOT AUTHORIZED TO USE FX\n         MVC   COMMMSG(MSG08L),MSG08 SET MESSAGE\n         B     EXIT0000              AND EXIT\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         ICM   R9,15,DXD24           24-BIT STORAGE AREA ADDRESS\n         BZ    EXIT0020              NOT PRESENT\n         ICM   R1,15,DCB24           DCB ADDRESS\n         BZ    EXIT0010              NOT ACQUIRED\n         FREEMAIN RU,A=(1),LV=DCBIL  FREEMAIN DCB\nEXIT0010 DS    0H\n         FREEMAIN RU,A=(9),LV=FX24L FREEMAIN 24-BIT WORK AREA\n         XC    DXD24,DXD24           CLEAR THE ADDRESS\nEXIT0020 DS    0H\n         MVC   COMMRID,DXDUSER       RESET ID\n         MVI   COMMFNC,C' '          CLEAR COMMAND\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDTREQI)           DISPLACEMENT TO WORK AREA\nH8       DC    H'8'\nDID      DC    CL8'DID'\nREQI     DC    CL4'REQI'\nDISPLAY  DC    CL8'DISPLAY'\nNO       DC    C'NO '\nYES      DC    C'YES'\nLMINIT   DC    C'LMINIT'\nBROWSE   DC    C'BROWSE'\nFXREQI1  DC    CL8'FXREQI1'\nFXREQI2  DC    CL8'FXREQI2'\nDATEEDWD DC    X'F0212020204B202020'\nTIMEEDWD DC    X'F021204B20204B20204B2020'\nNODEEDWD DC    X'40202021'\nDCBI     DCB   DDNAME=FXUT1,         DCB USED TO WRITE TO TEMP FILE    +\n               DSORG=PS,             .. SEQUENTIAL FILE                +\n               MACRF=PM              .. PUT/MOVE MODE\nDCBIL    EQU   *-DCBI                LENGTH OF DCB\nMSG01    DS    0C\n         DC    CL11'FXTREQI01E'\n         DC    C'INVALID COMMAND'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'FXTREQI02I'\n         DC    C'NO MORE REQUESTS FOUND'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'FXTREQI03I'\n         DC    C'NO REQUESTS FOUND'\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    CL11'FXTREQI04I'\n         DC    C'REQUEST COMPLETE'\nMSG04L   EQU   *-MSG04\nMSG05    DS    0C\n         DC    CL11'FXTREQI05E'\n         DC    C'UPDATE NOT ALLOWED'\nMSG05L   EQU   *-MSG05\nMSG06    DS    0C\n         DC    CL11'FXTREQI06E'\n         DC    C'YOU ARE NOT AUTHORIZED TO USE FX'\nMSG06L   EQU   *-MSG06\nMSG07    DS    0C\n         DC    CL11'FXTREQI07I'\n         DC    C'REQUEST HAS BEEN DELETED, ACTION ABORTED'\nMSG07L   EQU   *-MSG07\nMSG08    DS    0C\n         DC    CL11'FXTREQI08E'\n         DC    C'REQUEST IS IN USE, CANNOT DELETE AT THIS TIME'\nMSG08L   EQU   *-MSG08\nREQMSG   DS    0C\n         COPY  REQMSG\nNODEMSG  DS    0C\n         COPY  NODEMSG\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDTREQI DSECT\nDXDID    DS    CL8\nDXDSAVE  DS    18F\nDXDDWORD DS    D\nDXD24    DS    A              24-BIT WORK AREA ADDRESS\nDXDSPFP1 DS    A              ISPF PARM 1\nDXDSPFP2 DS    A              ISPF PARM 2\nDXDSPFP3 DS    A              ISPF PARM 3\nDXDSPFP4 DS    A              ISPF PARM 4\nDXDSPFP5 DS    A              ISPF PARM 5\nDXDSPFP6 DS    A              ISPF PARM 6\nDXDSPFP7 DS    A              ISPF PARM 7\nDXDSPFP8 DS    A              ISPF PARM 8\nDXDSPFP9 DS    A              ISPF PARM 9\nDXDSPFPA DS    A              ISPF PARM 10\nDXDSPFPL EQU   *-DXDSPFP1     LENGTH OF MAX PARM LIST\nDXDREC#  DS    H              CURRENT MASTER FILE RECORD NUMBER\nDXDFLAG  DS    X              FLAGS/INDICATORS\n$FOUND   EQU   X'80'          .. AT LEAST 1 RECORD WAS FOUND FOR USER\n$DELETE  EQU   X'40'          .. REQUEST HAS BEEN DELETED\nDXDUSER  DS    CL8            USER ID FROM MAIN MENU\nDXDPANL  DS    CL8\nDXDWORK  DS    CL16\nDXDCMD   DS    C              LAST COMMAND SENT TO FX\n         TNODEPRM DSECT=NO\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         FXTCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              MASTER FILE RECORD                                     *\n* ------------------------------------------------------------------- *\n         REQBLOK  DSECT=YES\n* ------------------------------------------------------------------- *\n*              USER INTERFACE REQUEST BLOCK                           *\n* ------------------------------------------------------------------- *\n         USERREQ\nUSERCMD  DS    C               COMMAND TO FXUREQI\n$USERINQ EQU   C'I'            .. INQUIRE\n$USERCAN EQU   C'C'            .. CANCEL REQUEST\n$USERDEL EQU   C'D'            .. DELETE REQUEST\n$USERPRT EQU   C'O'            .. RETURN SYSPRINT\n$USERSTA EQU   C'S'            .. RETURN STATUS OF SPECIFIC REQUEST\nUSERREC# DS    XL2             MASTER FILE RECORD NUMBER\nUSERIDI  DS    CL8             USER ID (FOR SPECIFIC USER REQUESTS)\nUSERNODE DS    CL8             NODE NAME (FOR READ SPECIFIC)\nUSERNBR  DS    XL4             REQUEST NUMBER (FOR READ SPECIFIC)\nUSERXL   EQU   *-USERREQ       TOTAL LENGTH\nUSERRCSZ DS    XL2             LRECL FROM SENDER'S DCB\nUSERBLKZ DS    XL2             BLOCK SIZE FROM SENDER'S DCB\nUSERRCFM DS    X               RECORD FORMAT FROM SENDER'S DCB\nUSERPRT  DS    0C              SYSPRINT OUTPUT DATA\n* ------------------------------------------------------------------- *\n*             24-BIT MODULE PARAMETER BLOCK                           *\n* ------------------------------------------------------------------- *\n         FX24PRM   DSECT=YES\n* ------------------------------------------------------------------- *\n*              ACB                                                    *\n* ------------------------------------------------------------------- *\n         IFGACB   AM=VTAM\n* ------------------------------------------------------------------- *\n*              RPL                                                    *\n* ------------------------------------------------------------------- *\n         IFGRPL   AM=VTAM\n* ------------------------------------------------------------------- *\n*              DCB                                                    *\n* ------------------------------------------------------------------- *\n         DCBD     DSORG=PS\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  FXTREQI\n./ ADD NAME=FXTSHUT  0100-99056-99056-1500-00104-00104-00000-FX-REL1\n\n         TITLE 'FXTSHUT  SHUTDOWN FX STARTED TASK'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXTSHUT                                               *\n*                                                                     *\n*   Provide the TSO \"operator\" or \"master\" level users a method of    *\n*   shutting down (terminating) the FX started task.                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSHUT    FXPRFX 'TSO INTERFACE FX STARTED TASK SHUTDOWN',              +\n               COMM=FXTCOMM\nFXTSHUT  AMODE 31\nFXTSHUT  RMODE ANY\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    SHUT0010              YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\nSHUT0010 DS    0H\n         ITRACE ID=BLDREQ\n         L     R5,COMMIOA            I/O AREA'S ADDRESS\n         USING USERREQ,R5            DEFINE BASE\n         LA    R1,USERDATA-USERREQ   TOTAL DATA LENGTH\n         STH   R1,USERLEN            SET TOTAL DATA LENGTH\n         MVC   USERMOD,SHUT          PROCESSING MODULE SUFFIX\n         MVC   USERMSG,COMMBLKS      CLEAR MESSAGE\n         L     R3,COMMRPL            RPL ADDRESS\n         L     R4,COMMRPLX           RPL EXTENSION ADDRESS\n         USING ISTRPL6X,R4           DEFINE BASE\n         LH    R6,0(R5)              I/O LENGTH\n         APPCCMD CONTROL=SEND,       ISSUE SEND                        +\n               QUALIFY=DATA,         .. SEND DATA                      +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               AREA=(R5),            .. I/O AREA ADDRESS               +\n               RECLEN=(R6),          .. I/O LENGTH                     +\n               CONMODE=CS,           .. CONTINUE SPECIFIC              +\n               CONVID=COMMCID        .. CONVERSATION ID\n         OC    RPL6RC,RPL6RC         SEND OK?\n         BNZ   ERR0010               NO\n         L     R6,=A(COMMIOSZ)       I/O AREA SIZE\n         APPCCMD CONTROL=RECEIVE,    ISSUE RECEIVE                     +\n               QUALIFY=SPEC,         .. FOR A SPECIFIC SESSION         +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               FILL=LL,              .. ONLY 1 LOGICAL RECORD          +\n               AREA=(R5),            .. I/O AREA ADDRESS               +\n               AREALEN=(R6),         .. I/O AREA SIZE                  +\n               CONVID=COMMCID        .. CONVERSATION ID\n         OC    RPL6RC,RPL6RC         RECEIVE OK?\n         BNZ   ERR0020               NO\n         MVC   COMMMSG,USERMSG       SET RETURNED MESSAGE\n         OI    COMMFLAG,$SHUT        STC WAS SHUT DOWN\n         B     EXIT0000              EXIT\nERR0010  DS    0H\n         ITRACE ID=SENDFAIL,         SEND FAILED                       +\n               DATA1=RPL6RC          .. RETURN CODE\n         ABEND $U0058,DUMP,,USER\nERR0020  DS    0H\n         ITRACE ID=RECVFAIL,         RECEIVE FAILED                    +\n               DATA1=RPL6RC          .. RETURN CODE\n         ABEND $U0059,DUMP,,USER\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDTSHUT)           DISPLACEMENT TO WORK AREA\nSHUT     DC    CL4'SHUT'\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDTSHUT DSECT\nDXDID    DS    CL8\nDXDSAVE  DS    18F\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         FXTCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              USER INTERFACE REQUEST BLOCK                           *\n* ------------------------------------------------------------------- *\n         USERREQ\n* ------------------------------------------------------------------- *\n*              ACB                                                    *\n* ------------------------------------------------------------------- *\n         IFGACB   AM=VTAM\n* ------------------------------------------------------------------- *\n*              RPL                                                    *\n* ------------------------------------------------------------------- *\n         IFGRPL   AM=VTAM\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  FXTSHUT\n./ ADD NAME=FXTSNAP  0100-99056-99056-1500-00106-00106-00000-FX-REL1\n\n         TITLE 'FXTSNAP  SNAPSHOT FX STARTED TASK'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXTSNAP                                               *\n*                                                                     *\n*   Provide the TSO \"operator\" or \"master\" level users a method of    *\n*   requesting a snapshot of the FX started task.   The STC will      *\n*   dynamically allocate a \"sysout\" data set, write the snapshot      *\n*   and de-allocate the data set before responding to this request.   *\n*   This may cause the TSO user to be \"hung\" for some period of time. *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSNAP    FXPRFX 'TSO INTERFACE SNAPSHOT FX STARTED TASK',              +\n               COMM=FXTCOMM\nFXTSNAP  AMODE 31\nFXTSNAP  RMODE ANY\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    SNAP0010              YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\nSNAP0010 DS    0H\n         ITRACE ID=BLDREQ\n         L     R5,COMMIOA            I/O AREA'S ADDRESS\n         USING USERREQ,R5            DEFINE BASE\n         LA    R1,USERDATA-USERREQ   TOTAL DATA LENGTH\n         STH   R1,USERLEN            SET TOTAL DATA LENGTH\n         MVC   USERMOD,SNAP          PROCESSING MODULE SUFFIX\n         MVC   USERMSG,COMMBLKS      CLEAR MESSAGE\n         L     R3,COMMRPL            RPL ADDRESS\n         L     R4,COMMRPLX           RPL EXTENSION ADDRESS\n         USING ISTRPL6X,R4           DEFINE BASE\n         LH    R6,0(R5)              I/O LENGTH\n         APPCCMD CONTROL=SEND,       ISSUE SEND                        +\n               QUALIFY=DATA,         .. SEND DATA                      +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               AREA=(R5),            .. I/O AREA ADDRESS               +\n               RECLEN=(R6),          .. I/O LENGTH                     +\n               CONMODE=CS,           .. CONTINUE SPECIFIC              +\n               CONVID=COMMCID        .. CONVERSATION ID\n         OC    RPL6RC,RPL6RC         SEND OK?\n         BNZ   ERR0010               NO\n         L     R6,=A(COMMIOSZ)       I/O AREA SIZE\n         APPCCMD CONTROL=RECEIVE,    ISSUE RECEIVE                     +\n               QUALIFY=SPEC,         .. FOR A SPECIFIC SESSION         +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               FILL=LL,              .. ONLY 1 LOGICAL RECORD          +\n               AREA=(R5),            .. I/O AREA ADDRESS               +\n               AREALEN=(R6),         .. I/O AREA SIZE                  +\n               CONVID=COMMCID        .. CONVERSATION ID\n         OC    RPL6RC,RPL6RC         RECEIVE OK?\n         BNZ   ERR0020               NO\n         MVC   COMMMSG,USERMSG       SET RETURNED MESSAGE\n         B     EXIT0000              EXIT\nERR0010  DS    0H\n         ITRACE ID=SENDFAIL,         SEND FAILED                       +\n               DATA1=RPL6RC          .. RETURN CODE\n         ABEND $U0058,DUMP,,USER\nERR0020  DS    0H\n         ITRACE ID=RECVFAIL,         RECEIVE FAILED                    +\n               DATA1=RPL6RC          .. RETURN CODE\n         ABEND $U0059,DUMP,,USER\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDTSNAP)           DISPLACEMENT TO WORK AREA\nSNAP     DC    CL4'SNAP'\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDTSNAP DSECT\nDXDID    DS    CL8\nDXDSAVE  DS    18F\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         FXTCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              USER INTERFACE REQUEST BLOCK                           *\n* ------------------------------------------------------------------- *\n         USERREQ\n* ------------------------------------------------------------------- *\n*              ACB                                                    *\n* ------------------------------------------------------------------- *\n         IFGACB   AM=VTAM\n* ------------------------------------------------------------------- *\n*              RPL                                                    *\n* ------------------------------------------------------------------- *\n         IFGRPL   AM=VTAM\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  FXTSNAP\n./ ADD NAME=FXTTERM  0100-99056-99056-1500-00140-00140-00000-FX-REL1\n\n         TITLE 'FXTTERM TSO INTERFACE TERMINATION'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXTTERM                                               *\n*                                                                     *\n*  TSO interface termination                                          *\n*   1) Delete SPF variables                                           *\n*   2) Close the ACB                                                  *\n*   3) Free the ACB, RPL, RPL extension, etc                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTTERM    FXPRFX 'TSO INTERFACE TERMINATION',COMM=FXTCOMM\nFXTTERM  AMODE 31\nFXTTERM  RMODE ANY\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         ITRACE ID=DELVAR            DELETING VARIABLES\n         MVI   VARCMD,$VAREOJ        SET COMMAND (DELETE ALL)\n         LA    R1,FXTVTBLE           CONTROL DATA ADDRESS\n         ST    R1,VARTBLE            PASS ADDRESS TO FXTVAR\n         LA    R1,VARREQ             PARM BLOCK ADDRESS\n         L     R15,ATVAR             VARIABLE DEFINE/DELETE ADDRESS\n         BALR  R14,R15               DELETE VARIABLES\n         TM    COMMFLAG,$SESSALO     CONVERSATION ALLOCATED?\n         BNO   TERM0010              NO\n         ITRACE ID=DEALLOC           DEALLOCATING THE SESSION\n         L     R3,COMMRPL            RPL'S ADDRESS\n         APPCCMD CONTROL=DEALLOC,    DE-ALLOCATE A SESSION             +\n               QUALIFY=FLUSH,        .. FLUSH BUFFERS                  +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               CONVID=COMMCID        .. CONVERSATION ID\n         L     R1,COMMRPLX           RPL EXTENSION'S ADDRESS\n         USING ISTRPL6X,R1           DEFINE BASE\n         OC    RPL6RC,RPL6RC         DE-ALLOCATE SUCCESSFUL?\n         BNZ   ERR0010               NO\nTERM0010 DS    0H\n         TM    COMMFLAG,$ACBOPEN     ACB OPENED?\n         BNO   TERM0020              NO\n         GETMAIN RU,                 ACQUIRE STORAGE FOR OPEN/CLOSE    +\n               LV=OCPLL,             .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE 16-MEG LINE\n         LR    R2,R1                 COPY OPEN/CLOSE ADDRESS\n         MVC   0(OCPLL,R2),OCPLI     INITIALIZE OPEN/CLOSE PARM LIST\n         L     R3,COMMACB            ACB'S ADDRESS\n         CLOSE ((R3)),MF=(E,(R2))    CLOSE THE ACB\n         FREEMAIN RU,A=(R2),LV=OCPLL FREEMAIN OPEN/CLOSE PARM LIST\nTERM0020 DS    0H\n         ICM   R1,15,COMMACB         ACB'S ADDRESS\n         BZ    TERM0030              NOT ACQUIRED\n         L     R2,COMMACBL           ACB'S LENGTH\n         ITRACE ID=FREEACB,          FREEMAIN ACB                      +\n               RDATA1=R1,            .. ACB'S ADDRESS                  +\n               RDATA2=R2             .. ACB'S LENGTH\n         FREEMAIN RU,A=(1),LV=(2)    FREEMAIN ACB\nTERM0030 DS    0H\n         ICM   R1,15,COMMRPL         RPL'S ADDRESS\n         BZ    TERM0040              NOT ACQUIRED\n         L     R2,COMMRPLL           RPL'S LENGTH\n         ITRACE ID=FREERPL,          FREEMAIN RPL                      +\n               RDATA1=R1,            .. RPL'S ADDRESS                  +\n               RDATA2=R2             .. RPL'S LENGTH\n         FREEMAIN RU,A=(1),LV=(2)    FREEMAIN RPL\nTERM0040 DS    0H\n         ICM   R1,15,COMMRPLX        RPL EXTENSION'S ADDRESS\n         BZ    TERM0050              NOT ACQUIRED\n         L     R2,COMMRPXL           RPL EXTENSION'S LENGTH\n         ITRACE ID=FREERPLX,         FREEMAIN RPL                      +\n               RDATA1=R1,            .. RPL EXTENSION'S ADDRESS        +\n               RDATA2=R2             .. RPL EXTENSION'S LENGTH\n         FREEMAIN RU,A=(1),LV=(2)    FREEMAIN RPL EXTENSION\nTERM0050 DS    0H\n         ICM   R1,15,COMMNIB         NIB'S ADDRESS\n         BZ    TERM0060              NOT ACQUIRED\n         L     R2,COMMNIBL           NIB'S LENGTH\n         ITRACE ID=FREENIB,          FREEMAIN NIB                      +\n               RDATA1=R1,            .. NIB'S ADDRESS                  +\n               RDATA2=R2             .. NIB'S LENGTH\n         FREEMAIN RU,A=(1),LV=(2)    FREEMAIN NIB\nTERM0060 DS    0H\n         ICM   R1,15,COMMXLST        EXLST'S ADDRESS\n         BZ    TERM0070              NOT ACQUIRED\n         L     R2,COMMXLSL           EXLST'S LENGTH\n         ITRACE ID=FREEXLST,         FREEMAIN EXLST                    +\n               RDATA1=R1,            .. EXLST'S ADDRESS                +\n               RDATA2=R2             .. EXLST'S LENGTH\n         FREEMAIN RU,A=(1),LV=(2)\nTERM0070 DS    0H\n         ICM   R1,15,COMMIOA         I/O AREA ADDRESS\n         BZ    EXIT0000              NOT ACQUIRED\n         ITRACE ID=FREEIO,           FREEMAIN I/O AREA                 +\n               RDATA1=R1             .. I/O AREA'S ADDRESS\n         FREEMAIN RU,A=(1),LV=COMMIOSZ\n         B     EXIT0000              AND EXIT\nERR0010  DS    0H\n         ITRACE ID=DALOFAIL,         SESSION DE-ALLOCATE FAILED        +\n               DATA1=RPL6RC          .. DE-ALLOCATE RETURN CODES\n         ABEND $U0050,DUMP,,USER\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDTTERM)           DISPLACEMENT TO WORK AREA\nOCPLI    CLOSE *,MF=L\nOCPLL    EQU   *-OCPLI\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDTTERM DSECT\nDXDID    DS    CL8\nDXDSAVE  DS    18F\n         VARREQ DSECT=NO\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         FXTCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              ACB                                                    *\n* ------------------------------------------------------------------- *\n         IFGACB   AM=VTAM\n* ------------------------------------------------------------------- *\n*              RPL                                                    *\n* ------------------------------------------------------------------- *\n         IFGRPL   AM=VTAM\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  FXTTERM\n./ ADD NAME=FXTVAR   0100-99056-99056-1500-00212-00212-00000-FX-REL1\n\n         TITLE 'FXTVAR   Define or delete SPF variables'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: FXTVAR                                                *\n*                                                                     *\n*  Define or delete SPF variables.                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTVAR     FXPRFX 'TSO/SPF VARIABLE MANAGER',                            +\n               COMM=FXMCOMM\nFXTVAR   AMODE 31\nFXTVAR   RMODE ANY\n         LR    R9,R1                 SAVE PARM LIST ADDRESS\n         USING VARREQ,R9             DEFINE BASE\n         MVC   DXDID,MODID           IDENTIFY AREA\n         ITRACE ID=ENTRY,            TRACE ENTRY                       +\n               DATA1=VARCMD          .. SAVE THE COMMAND\n         LOAD  EP=ISPLINK            LOAD SPF INTERFACE MODULE\n         ST    R0,DXDISPF            SAVE SPF INTERFACE ADDRESS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVAR0010  DS    0H\n         CLI   VARCMD,$VARDEFA       DEFINE ALL VARIABLES?\n         BE    VAR0100               YES\n         CLI   VARCMD,$VARDEFS       DEFINE SPECIFIC VARIABLES?\n         BE    VAR0100               YES\n         CLI   VARCMD,$VARDEL        DELETE VARIABLE?\n         BE    VAR0200               YES\n         CLI   VARCMD,$VAREOJ        DELETE ALL VARIABLES?\n         BE    VAR0300               YES\n         ITRACE ID=BADCMD\n         ABEND $U0075,DUMP,,USER     BAD COMMAND\n* ------------------------------------------------------------------- *\n*        PROCESS DEFINE COMMANDS                                      *\n* ------------------------------------------------------------------- *\nVAR0100  DS    0H\n         LA    R1,VDEFINE            COMMAND'S ADDRESS\n         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST\n         L     R8,VARIDS             LIST OF ID'S\n         LH    R7,VARNBR             NUMBER OF ID'S\n         ITRACE ID=DEFINE,           DEFINE VARIABLES                  +\n               RDATA1=R8,            .. FIRST VARIABLE ID              +\n               RDATA2=R7             .. NUMBER OF VARIABLES\n         CLI   VARCMD,$VARDEFS       DEFINE SPECIFIC VARIABLES?\n         BE    VAR0110               YES\n         L     R6,VARTBLE            FIRST VARIABLE\n         B     VAR0120               ENTER LOOP\nVAR0110  DS    0H\n         BAL   R15,LOC0000           LOCATE VARIABLE\nVAR0120  DS    0H\n         USING VARDSECT,R6           DEFINE BASE\n         TM    VARFLAG,$VDEFINE      VARIABLE ALREADY DEFINED?\n         BO    VAR0130               YES\n         LA    R1,VARNAME            VARIABLE'S NAME\n         ST    R1,DXDSPF2            SET NAME'S ADDRESS IN PARM LIST\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,VARDISP          DISPLACEMENT TO DATA IN FXTCOMM\n         A     R1,VARAREA            PLUS BASE ADDRESS\n         ST    R1,DXDSPF3            SET ADDRESS IN PARM LIST\n         LA    R1,VARFORM            DATA FORMAT\n         ST    R1,DXDSPF4            SET ADDRESS IN PARM LIST\n         LA    R1,VARLEN             VARIABLE LENGTH\n         ST    R1,DXDSPF5            SET ADDRESS IN PARM LIST\n         OI    DXDSPF5,X'80'         SET END-OF-LIST\n         ITRACE ID=VDEF,             DEFINING A VARIABLE               +\n               DATA1=VARNAME,        .. VARIABLE'S NAME                +\n               DATA2=DXDSPF3         .. ADDRESS OF DATA\n         LA    R1,DXDSPFP            SPF PARM LIST ADDRESS\n         L     R15,DXDISPF           SPF LINK ENTRY POINT ADDRESS\n         BALR  R14,R15               LINK TO SPF\n         LTR   R15,R15               VDEFINE SUCCESSFUL?\n         BNZ   ERR0020               NO\n         OI    VARFLAG,$VDEFINE      VARIABLE HAS BEEN DEFINED\nVAR0130  DS    0H\n         CLI   VARCMD,$VARDEFA       DEFINE ALL VARIABLES?\n         BE    VAR0140               YES\n         LA    R8,2(R8)              NEXT VARIABLE ID\n         BCT   R7,VAR0110            LOOP\nVAR0140  DS    0H\n         LA    R6,VARL(R6)           NEXT VARIABLE\n         CLI   0(R6),X'FF'           END OF TABLE?\n         BNE   VAR0120               NO\n         B     EXIT0000              ALL PROCESSED\n* ------------------------------------------------------------------- *\n*        PROCESS DELETE COMMANDS                                      *\n* ------------------------------------------------------------------- *\nVAR0200  DS    0H\n         LA    R1,VDELETE            COMMAND'S ADDRESS\n         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST\n         L     R8,VARIDS             LIST OF ID'S\n         LH    R7,VARNBR             NUMBER OF ID'S\n         ITRACE ID=DELETE,           DEFINE VARIABLES                  +\n               RDATA1=R8,            .. FIRST VARIABLE ID              +\n               RDATA2=R7             .. NUMBER OF VARIABLES\nVAR0210  DS    0H\n         BAL   R15,LOC0000           LOCATE VARIABLE\n         TM    VARFLAG,$VDEFINE      VARIABLE DEFINED?\n         BNO   VAR0220               NO\n         ST    R6,DXDSPF2            SET VARIABLE NAME ADDRESS\n         OI    DXDSPF2,X'80'         FLAG END-OF-LIST\n         ITRACE ID=DELETE,           DELETING A VARIABLE               +\n               DATA1=VARNAME         .. VARIABLE NAME\n         LA    R1,DXDSPFP            PARM LIST'S ADDRESS\n         L     R15,DXDISPF           SPF ENTRY POINT\n         BALR  R14,R15               LINK TO SPF\n         LTR   R15,R15               VDELETE SUCCESSFUL?\n         BNZ   ERR0030               NO\n         NI    VARFLAG,255-$VDEFINE  RESET 'DEFINED' INDICATOR\nVAR0220  DS    0H\n         LA    R8,2(R8)              NEXT VARIABLE ID\n         BCT   R7,VAR0210            PROCESS NEXT VARIABLE\n         B     EXIT0000              EXIT\n* ------------------------------------------------------------------- *\n*        PROCESS END-OF-JOB CLEAN UP                                  *\n* ------------------------------------------------------------------- *\nVAR0300  DS    0H\n         ITRACE ID=EOJ               DELETING ALL VARIABLES\n         LA    R1,VDELETE            COMMAND'S ADDRESS\n         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST\n         L     R6,VARTBLE            START WITH FIRST VARIABLE\nVAR0310  DS    0H\n         CLI   0(R6),X'FF'           END OF TABLE?\n         BE    EXIT0000              YES\n         TM    VARFLAG,$VDEFINE      VARIABLE DEFINED?\n         BNO   VAR0320               NO\n         ST    R6,DXDSPF2            SET VARIABLE NAME ADDRESS\n         OI    DXDSPF2,X'80'         FLAG END-OF-LIST\n         ITRACE ID=EOJDEL,           DELETING A VARIABLE               +\n               DATA1=VARNAME         .. VARIABLE NAME\n         LA    R1,DXDSPFP            PARM LIST'S ADDRESS\n         L     R15,DXDISPF           SPF ENTRY POINT\n         BALR  R14,R15               LINK TO SPF\n         LTR   R15,R15               VDELETE SUCCESSFUL?\n         BNZ   ERR0030               NO\nVAR0320  DS    0H\n         LA    R6,VARL(R6)           NEXT VARIABLE\n         B     VAR0310               PROCESS ALL VARIABLES\n* ------------------------------------------------------------------- *\n*        LOCATE VARIABLES IN VARIABLE TABLE                           *\n* ------------------------------------------------------------------- *\nLOC0000  DS    0H\n         L     R6,VARTBLE            FIRST VARIABLE\nLOC0010  DS    0H\n         CLI   0(R6),X'FF'           END OF TABLE?\n         BE    ERR0010               YES.. INVALID VARIABLE ID\n         CLC   VARID,0(R8)           VARIABLE LOCATED?\n         BE    LOC0020               YES\n         LA    R6,VARL(R6)           NEXT VARIABLE\n         B     LOC0010               LOOP\nLOC0020  DS    0H\n         BR    R15                   RETURN\n* ------------------------------------------------------------------- *\n*        ERROR ROUTINES                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=NOTFOUND\n         ABEND $U0076,DUMP,,USER\nERR0020  DS    0H\n         ITRACE ID=VDEFFAIL,                                           +\n               RDATA1=R15\n         ABEND $U0077,DUMP,,USER\nERR0030  DS    0H\n         ABEND $U0078,DUMP,,USER\n         ITRACE ID=VDELFAIL,                                           +\n               RDATA1=R15\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         DELETE EP=ISPLINK           DELETE SPF INTERFACE MODULE\n         XC    DXDISPF,DXDISPF       CLEAR THE ADDRESS\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDTVAR)\nVDEFINE  DC    CL8'VDEFINE'\nVDELETE  DC    CL8'VDELETE'\n         LTORG\n* ------------------------------------------------------------------- *\n*        WORK AREA                                                    *\n* ------------------------------------------------------------------- *\nDXDTVAR  DSECT\nDXDID    DC    CL8' '\nDXDSAVE  DS    18F\nDXDISPF  DS    A                     ISPF INTERFACE ENTRY POINT\nDXDSPFP  DS    0A                    ISPF PARM LIST\nDXDSPF1  DS    A                     PARM 1 ADDRESS\nDXDSPF2  DS    A                     PARM 2 ADDRESS\nDXDSPF3  DS    A                     PARM 3 ADDRESS\nDXDSPF4  DS    A                     PARM 4 ADDRESS\nDXDSPF5  DS    A                     PARM 5 ADDRESS\n* ------------------------------------------------------------------- *\n*              COMMON DATA                                            *\n* ------------------------------------------------------------------- *\n         FXMCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              VARIABLE TABLE ENTRIES                                 *\n* ------------------------------------------------------------------- *\n         COPY  VARDSECT\n* ------------------------------------------------------------------- *\n*              INTERFACE BLOCK                                        *\n* ------------------------------------------------------------------- *\n         VARREQ   DSECT=YES\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  FXTVAR\n./ ADD NAME=FXUSER   0100-99056-99056-1500-00934-00934-00000-FX-REL1\n\n         TITLE 'FXUSER  ALLOW USERS TO ENTER/INQUIRE REQUESTS'\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXUSER                                                *\n*                                                                     *\n*  Allows users to enter or inquire on requests via a subroutine type *\n*  call.                                                              *\n*                                                                     *\n*  For a new request entry the user must supply:                      *\n*   A.  For full data set transmissions                               *\n*     1) The original data set name.                                  *\n*     2) If the data set is to be restored with a different name,     *\n*        the user must supply the new name.                           *\n*     3) Whether or not the restore operation should replace an       *\n*        existing data set at the destinations.                       *\n*     4) At least 1 destination.                                      *\n*   B.  For PDS member transmissions                                  *\n*     1) The source data set name.                                    *\n*     2) The original member name.                                    *\n*     3) If the member is to be restored to a PDS with a different    *\n*        name than the source PDS, the user must supply the new       *\n*        data set name.                                               *\n*     4) If the member is to be restored with a new name, the user    *\n*        must supply the new name.                                    *\n*     5) Whether or not to replace the member at each destination.    *\n*     6) Whether or not to send the aliases if any.                   *\n*     7) At least 1 destination.                                      *\n*  ** If a new member name is given, the original member name must    *\n*     be given.                                                       *\n*  ** If a new member name is given, the alias flag must be blank or  *\n*     'N' (FX will not transmit a PDS member with its aliases and     *\n*     also rename the member).                                        *\n*                                                                     *\n*  For request inquiries the user must supply:                        *\n*        The request id (enode nbr).                                  *\n*                                                                     *\n*                                                                     *\n*  For both request entry and inquiry, the number of nodes the user   *\n*  has allowed for must be set in field PARMNDE#.  This field will    *\n*  be modified before return to the user with the actual number of    *\n*  nodes in the request entered or queried.  If the user makes        *\n*  multiple calls, PARMNDE# should be reset to the number of nodes    *\n*  in the users parm list before each call.  If the number of nodes   *\n*  returned on a query would exceed the size of the users parm list   *\n*  area, the nodes status will be truncated, and the return code set  *\n*  to 4 to notify the user of the truncation.                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXUSER   CSECT\nFXUSER   AMODE 31\nFXUSER   RMODE ANY\n         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS\n         LR    R11,R15               COPY BASE\n         LA    R12,2048(R11)         INITIALIZE 2ND BASE REGISTER\n         LA    R12,2048(R12)         INITIALIZE 2ND BASE REGISTER\n         USING FXUSER,R11,R12        DEFINE BASE\n         B     INIT0000\n         DC    CL8'FXUSER'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nINIT0000 DS    0H\n         LR    R10,R1                COPY PARM LIST\n         USING USERPARM,R10          DEFINE BASE\n         GETMAIN RU,                 ACQUIRE A SAVE AREA               +\n               LV=WKL,               .. AREA SIZE                      +\n               LOC=BELOW             .. ALLOW FOR 24-BIT CALLERS\n         ST    R13,4(R1)             SAVE CALLER'S SAVE AREA ADDRESS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R1                COPY WORK AREA ADDRESS\n         USING WK,R13                DEFINE BASE\n         MVI   PARMMSG,C' '\n         MVC   PARMMSG+1(L'PARMMSG-1),PARMMSG\n         XC    PARMRC,PARMRC         ZERO RETURN CODE TO ZERO\n         OC    PARMNDE#,PARMNDE#     ANY NODES IN USER'S AREA?\n         BZ    INIT0020              NO.. NOT VALID\n         CLC   PARMNDE#,=Y($MAXNODE) MORE THAN IN MASTER FILE?\n         BNH   INIT0010              NO\n         MVC   PARMNDE#,=Y($MAXNODE) LIMIT TO NUMBER IN MASTER FILE\nINIT0010 DS    0H\n         CLI   PARMCMD,$ENTER        ENTER A NEW REQUEST?\n         BE    USER0000              YES\n         CLI   PARMCMD,$INQUIRE      INQUIRE ON A PREVIOUS REQUEST?\n         BE    USER0300              YES.. SKIP ENTRY EDIT CHECKS\n         MVC   PARMMSG(MSG01L),MSG01 INVALID COMMAND\n         MVC   PARMRC,H32            SET RETURN CODE\n         B     EXIT0000              AND EXIT\nINIT0020 DS    0H\n         MVC   PARMMSG(MSG02L),MSG02 SET MESSAGE\n         MVC   PARMRC,H8             SET RETURN CODE\n         B     EXIT0000              AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  This is a new request entry, parameters must be verified.          *\n*                                                                     *\n*    1) Original data set name must be given.                         *\n*    2) Original data set name must be in correct format.             *\n*    3) If member name is present, it must be valid.                  *\n*    4) If a new member name is present, it must be valid.            *\n*    5) If a new member name is present, the original name must be    *\n*       present.                                                      *\n*    6) If a new member name is present, the ALIAS flag must not      *\n*       be 'Y'.                                                       *\n*    7) The REPLACE flag must be either 'Y', 'N', or blank.           *\n*    8) The ALIAS flag must be either 'Y', 'N', or blank.             *\n*    9) If ALIAS flag = 'Y', the original member name must be present.*\n*   10) At least 1 destination must be given.                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nUSER0000 DS    0H\n         CLC   PARMODSN,BLANKS       DATA SET NAME BLANK?\n         BE    USER0100              YES\n         LA    R1,PARMODSN           DATA SET NAME'S ADDRESS\n         ST    R1,DSNADDR            PASS ADDRESS TO FXDSNVER\n         LA    R1,DSNREQ             DSNVER PARMS\n         L     R15,VDSNVER           DATA SET NAME VERIFIER ENTRY POINT\n         BALR  R14,R15               LINK TO DSN VERIFIER\n         CLI   DSNSTAT,$DSNOK        DATA SET NAME VALID?\n         BNE   USER0110              NO\n         CLC   PARMOMEM,BLANKS       ORIGINAL MEMBER NAME BLANK?\n         BE    USER0010              YES\n         LA    R1,PARMOMEM           MEMBER NAME'S ADDRESS\n         ST    R1,MEMADDR            PASS ADDRESS TO FXMEMVER\n         LA    R1,MEMREQ             DSNMEM PARMS\n         L     R15,VMEMVER           MEMBER NAME VERIFIER ENTRY POINT\n         BALR  R14,R15               LINK TO MEMBER NAME VERIFIER\n         CLI   MEMSTAT,$DSNOK        MEMBER NAME VALID?\n         BNE   USER0120              NO\n         CLC   PARMDMEM,BLANKS       DESTINATION NAME BLANK?\n         BE    USER0010              YES\n         LA    R1,PARMDMEM           MEMBER NAME'S ADDRESS\n         ST    R1,MEMADDR            PASS ADDRESS TO FXMEMVER\n         LA    R1,MEMREQ             DSNMEM PARMS\n         L     R15,VMEMVER           MEMBER NAME VERIFIER ENTRY POINT\n         BALR  R14,R15               LINK TO MEMBER NAME VERIFIER\n         CLI   MEMSTAT,$DSNOK        MEMBER NAME VALID?\n         BNE   USER0130              NO\n         CLI   PARMALAS,C'Y'         SEND ALIASES?\n         BE    USER0140              YES.. NOT VALID WITH NEW NAME\nUSER0010 DS    0H\n         CLC   PARMDDSN,BLANKS       DESTINATION NAME BLANK?\n         BE    USER0020              YES\n         LA    R1,PARMDDSN           DATA SET NAME'S ADDRESS\n         ST    R1,DSNADDR            PASS ADDRESS TO FXDSNVER\n         LA    R1,DSNREQ             DSNVER PARMS\n         L     R15,VDSNVER           DATA SET NAME VERIFIER ENTRY POINT\n         BALR  R14,R15               LINK TO DSN VERIFIER\n         CLI   DSNSTAT,$DSNOK        DATA SET NAME VALID?\n         BNE   USER0150              NO\nUSER0020 DS    0H\n         CLI   PARMREPL,C'N'         DON'T REPLACE?\n         BE    USER0030              YES.. OK\n         CLI   PARMREPL,C'Y'         DO REPLACE?\n         BE    USER0030              YES.. OK\n         CLI   PARMREPL,C' '         BLANK (DON'T REPLACE)?\n         BNE   USER0160              NO.. NOT VALID\nUSER0030 DS    0H\n         CLI   PARMALAS,C'N'         DON'T SEND ALIASES?\n         BE    USER0050              YES.. OK\n         CLI   PARMALAS,C'Y'         DO SEND ALIASES?\n         BE    USER0040              YES.. OK IF MEMBER NAME PRESENT\n         CLI   PARMALAS,C' '         BLANK (DON'T SEND ALIASES)?\n         BNE   USER0170              NO.. NOT VALID\n         B     USER0050\nUSER0040 DS    0H\n         CLC   PARMOMEM,BLANKS       MEMBER NAME PRESENT?\n         BE    USER0190              NO.. NOT VALID\nUSER0050 DS    0H\n         CLC   PARMDMEM,BLANKS       NEW MEMBER NAME BLANK?\n         BE    USER0060              YES\n         CLC   PARMOMEM,BLANKS       ORIGINAL MEMBER NAME BLANK?\n         BE    USER0200              YES.. NOT VALID\nUSER0060 DS    0H\n         SR    R1,R1                 CLEAR FOR COUNTER\n         LA    R14,PARMNDNM          FIRST DESTINATION\n         USING PARMNDNM,R14          DEFINE BASE\n         LR    R2,R14                SAVE FIRST NODE NAME'S ADDRESS\n         SR    R15,R15               CLEAR REGISTER\n         ICM   R15,3,PARMNDE#        NUMBER OF NODES\nUSER0070 DS    0H\n         CLC   PARMNDNM,BLANKS       NODE NAME BLANK?\n         BE    USER0090              YES\n         CLR   R2,R14                SAME ADDRESS?\n         BE    USER0080              YES\n         MVC   0(L'PARMNDNM,R2),PARMNDNM\n         MVC   PARMNDNM,BLANKS       CLEAR NAME\nUSER0080 DS    0H\n         LA    R1,1(R1)              ADD 1 TO NUMBER OF NODES\n         LA    R2,PARMNDL(R2)        NEXT OUTPUT NODE NAME\nUSER0090 DS    0H\n         LA    R14,PARMNDL(R14)      NEXT INPUT NODE NAME\n         BCT   R15,USER0070          LOOP\n         LTR   R1,R1                 ANY NODES?\n         BZ    USER0180              NO\n         STCM  R1,3,PARMNDE#         SET NUMBER OF NODES IN REQUEST\n         B     USER0300              BUILD REQUEST AND SUBMIT IT\n         DROP  R14\nUSER0100 DS    0H\n         MVC   PARMMSG(MSG03L),MSG03 SET MESSAGE\n         MVC   PARMRC,H8             SET RETURN CODE\n         B     EXIT0000              AND EXIT\nUSER0110 DS    0H\n         MVC   PARMMSG(MSG04L),MSG04     SET MESSAGE\n         MVC   PARMRC,H8             SET RETURN CODE\n         B     EXIT0000              AND EXIT\nUSER0120 DS    0H\n         MVC   PARMMSG(MSG05L),MSG05 SET MESSAGE\n         MVC   PARMRC,H8             SET RETURN CODE\n         B     EXIT0000              AND EXIT\nUSER0130 DS    0H\n         MVC   PARMMSG(MSG06L),MSG06 SET MESSAGE\n         MVC   PARMRC,H8             SET RETURN CODE\n         B     EXIT0000              AND EXIT\nUSER0140 DS    0H\n         MVC   PARMMSG(MSG07L),MSG07 SET MESSAGE\n         MVC   PARMRC,H8             SET RETURN CODE\n         B     EXIT0000              AND EXIT\nUSER0150 DS    0H\n         MVC   PARMMSG(MSG08L),MSG08 SET MESSAGE\n         MVC   PARMRC,H8             SET RETURN CODE\n         B     EXIT0000              AND EXIT\nUSER0160 DS    0H\n         MVC   PARMMSG(MSG09L),MSG09 SET MESSAGE\n         MVC   PARMRC,H8             SET RETURN CODE\n         B     EXIT0000              AND EXIT\nUSER0170 DS    0H\n         MVC   PARMMSG(MSG10L),MSG10 SET MESSAGE\n         MVC   PARMRC,H8             SET RETURN CODE\n         B     EXIT0000              AND EXIT\nUSER0180 DS    0H\n         MVC   PARMMSG(MSG11L),MSG11 SET MESSAGE\n         MVC   PARMRC,H8             SET RETURN CODE\n         B     EXIT0000              AND EXIT\nUSER0190 DS    0H\n         MVC   PARMMSG(MSG12L),MSG12 SET MESSAGE\n         MVC   PARMRC,H8             SET RETURN CODE\n         B     EXIT0000              AND EXIT\nUSER0200 DS    0H\n         MVC   PARMMSG(MSG13L),MSG13 SET MESSAGE\n         MVC   PARMRC,H8             SET RETURN CODE\n         B     EXIT0000              AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nUSER0300 DS    0H\n         MVC   WKACB(ACBL),ACBI      INITIALIZE ACB\n         LA    R2,WKACB              COPY ACB ADDRESS\n         USING IFGACB,R2             DEFINE BASE\n         MVI   WKAPLL,8              SET APPLID'S LENGTH\n         LA    R0,WKAPLL             APPLID'S LENGTH ADDRESS\n         ST    R0,ACBAPID            SET APPLID ADDRESS IN ACB\n         MVC   WKEXLST(EXLSTL),EXLSTI INITIALIZE EXIT LIST\n         LA    R1,WKEXLST            EXIT LIST'S ADDRESS\n         ST    R1,ACBEXLST           SET EXLST'S ADDRESS\n         USING IFGEXLST,R1           DEFINE BASE\n         XC    EXLATTNP,EXLATTNP     NO ATTN EXIT\n         MVC   WKRPL(RPLL),RPLI      INITIALIZE RPL\n         LA    R3,WKRPL              RPL'S ADDRESS\n         USING IFGRPL,R3             DEFINE BASE\n         MVC   WKRPLEXT(RPLEXTL),RPLEXTI INITIALIZE RPL EXTENSION\n         LA    R5,WKRPLEXT           RPL EXTENSION'S ADDRESS\n         ST    R5,RPLAAREA           SET RPL EXTENSION'S ADDRESS\n         ST    R2,RPLDACB            SET ACB'S ADDRESS\n         MVC   WKNIB(NIBL),NIBI      INITIALIZE NIB\n         LA    R4,WKNIB              COPY NIB'S ADDRESS\n         USING ISTDNIB,R4            DEFINE BASE\n         MVC   NIBSYM,PARMFX         SET FX STC'S APPL NAME\n         MVC   WKOC(OPENL),OPENI     COPY OPEN/CLOSE PARM LIST\n         MVC   WKFUNC,OPENACB        LAST FUNCTION IS OPEN\n         LOAD  EP=FXACB              LOAD ACB NAMES TABLE\n         LR    R8,R0                 COPY ACB NAMES TABLE ADDRESS\nUSER0310 DS    0H\n         MVC   WKAPLN,0(R8)          COPY ACB NAME\n         OPEN  ((R2)),MF=(E,WKOC)    OPEN ACB\n         LTR   R15,R15               OPEN SUCCESSFUL?\n         BZ    USER0320              YES\n         LA    R8,8(R8)              NEXT ACB NAME\n         CLI   0(R8),X'FF'           END OF TABLE?\n         BNE   USER0310              NO\n         DELETE EP=FXACB\n         MVC   PARMMSG(MSG14L),MSG14 COPY MESSAGE\n         MVC   PARMRC,H32            SET RETURN CODE\n         B     EXIT0000              EXIT\nUSER0320 DS    0H\n         DELETE EP=FXACB\n         OI    WKFLAG,$ACBOPEN       ACB IS OPEN\n         MVC   WKFUNC,SETLOGON       LAST FUNCTION\n         SETLOGON ACB=(R2),          ISSUE SETLOGON                    +\n               RPL=(R3),             .. RPL FOR REQUEST                +\n               OPTCD=START           .. ENABLE EXIT\n         LTR   R15,R15               SET LOGON SUCCESSFUL?\n         BZ    USER0330              YES\n         STH   R15,WKDWORD           SAVE RETURN CODE\n         MVC   PARMMSG(MSG15L),MSG15 COPY MESSAGE\n         UNPK  PARMMSG+(MSG15RC-MSG15)(5),WKDWORD(3)\n         MVZ   PARMMSG+(MSG15RC-MSG15),HEX0F0F\n         TR    PARMMSG+(MSG15RC-MSG15),HEXCHAR\n         MVI   PARMMSG+(MSG15RC-MSG15)+4,C' '\n         MVC   PARMRC,H32            SET RETURN CODE\n         B     USER0900              CLOSE ACB AND EXIT\nUSER0330 DS    0H\n         MVC   WKFUNC,INQUIRE        SET LAST COMMAND\n         INQUIRE RPL=(R3),           ISSUE INQUIRE                     +\n               NIB=(R4),             .. NIB'S ADDRESS                  +\n               OPTCD=APPSTAT         .. WE WANT PARTNER'S STATUS\n         CLC   X144C,RPLFDBK         PARTNER DEFINED TO VTAM?\n         BE    USER0340              NO\n         CLC   X1453,RPLFDBK         PARTNER NAME INVALID?\n         BE    USER0340              YES\n         CLI   RPLFDB3,0             PARTNER READY?\n         BE    USER0360              YES\n         MVC   PARMRC,H100           SET RETURN CODE\n         B     USER0350\nUSER0340 DS    0H\n         MVC   PARMRC,H32            SET RETURN CODE\nUSER0350 DS    0H\n         MVC   PARMMSG(MSG16L),MSG16 SET MESSAGE\n         B     USER0900              CLOSE ACB AND EXIT\nUSER0360 DS    0H\n         MVC   WKFUNC,CNOS           LAST FUNCTION ATTEMPTED\n         USING ISTRPL6X,R5           DEFINE BASE\n         MVC   RPL6LU,PARMFX         SET PARTNER'S LU NAME\n         APPCCMD CONTROL=OPRCNTL,    ISSUE APPC COMMAND                +\n               QUALIFY=CNOS,         .. CHANGE NUMBER OF SESSIONS      +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               LOGMODE=LU62P         .. LOGMODE\n         CLC   RPL6RC,X000001        CNOS ACCEPTED?\n         BE    USER0370              YES\n         MVC   PARMMSG(MSG17L),MSG17 COPY MESSAGE\n         UNPK  PARMMSG+(MSG17RC-MSG17)(9),WKDWORD(5)\n         MVZ   PARMMSG+(MSG17RC-MSG17),HEX0F0F\n         TR    PARMMSG+(MSG17RC-MSG17),HEXCHAR\n         MVI   PARMMSG+(MSG17RC-MSG17)+8,C' '\n         MVC   PARMRC,H32            SET RETURN CODE\n         B     USER0900              CLOSE ACB AND EXIT\nUSER0370 DS    0H\n         LA    R6,WKIO               I/O AREA ADDRESS\n         USING USERREQ,R6            DEFINE BASE\n         MVC   WKFUNC,ALLOCATE       LAST FUNCTION\n         MVC   0(FMH5L,R6),FMH5      COPY FMH5 TO I/O AREA\n         APPCCMD CONTROL=ALLOC,      ISSUE APPC COMMAND                +\n               QUALIFY=ALLOCD,       .. ALLOCATE A SESSION             +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               AREA=(R6),            .. FMH'S ADDRESS                  +\n               RECLEN=FMH5L,         .. FMH'S LENGTH                   +\n               LOGMODE=LU62P         .. LOGMODE\n         OC    RPL6RC,RPL6RC         ALL ZEROS?\n         BZ    USER0380              YES\n         MVC   PARMMSG(MSG18L),MSG18 COPY MESSAGE\n         UNPK  PARMMSG+(MSG18RC-MSG18)(9),WKDWORD(5)\n         MVZ   PARMMSG+(MSG18RC-MSG18),HEX0F0F\n         TR    PARMMSG+(MSG18RC-MSG18),HEXCHAR\n         MVI   PARMMSG+(MSG18RC-MSG18)+8,C' '\n         MVC   PARMRC,H32            SET RETURN CODE\n         B     USER0900              CLOSE ACB AND EXIT\nUSER0380 DS    0H\n         OI    WKFLAG,$SESSALO       SESSION IS ALLOCATED\n         MVC   WKCID,RPL6CNVD        SAVE CONVERSATION ID\n         LA    R7,USERIDL            DATA LENGTH FOR 'IDENITIFY'\n         STCM  R7,3,USERLEN          SET LENGTH\n         L     R1,CVTPTR             CVT'S ADDRESS\n         USING CVT,R1                DEFINE BASE\n         ICM   R15,15,CVTSMCA        SMF AREA ADDRESS\n         BZ    ERR0040               SMF NOT ACTIVE!\n         USING SMCABASE,R15          DEFINE BASE\n         MVC   USERSMF,SMCASID       COPY SMF ID\n         USING PSA,R0                DEFINE BASE\n         L     R1,PSAAOLD            OUR ASCB'S ADDRESS\n         USING ASCB,R1               DEFINE BASE\n         L     R2,ASCBJBNI           JOB NAME ADDRESS\n         L     R1,ASCBASXB           OUR ASXB'S ADDRESS\n         USING ASXB,R1               DEFINE BASE\n         ICM   R1,15,ASXBSENV        ACEE'S ADDRESS\n         USING ACEE,R1               DEFINE BASE\n         BNZ   USER0390              NAME PRESENT\n         MVC   PARMMSG(MSG19L),MSG19 COPY MESSAGE\n         MVC   PARMRC,H32            SET RETURN CODE\n         B     USER0900              CLOSE ACB AND EXIT\nUSER0390 DS    0H\n         MVC   USERID,BLANKS         INITIALIZE ID\n         SR    R15,R15               CLEAR REGISTER\n         IC    R15,ACEEUSRL          USER ID LENGTH\n         BCTR  R15,0                 MINUS 1\n         EX    R15,USERMVC           MOVE USER ID\n         MVC   WKUSERID,USERID       COPY USER ID\n         MVC   USERJOB,0(R2)         COPY JOB NAME\n         MVC   USERMOD,UID           SET PROCESSING MODULE'S SUFFIX\n         MVC   WKFUNC,SEND           LAST COMMAND\n         APPCCMD CONTROL=SEND,       ISSUE APPC COMMAND                +\n               QUALIFY=DATA,         .. SEND DATA                      +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               AREA=(R6),            .. I/O AREA'S ADDRESS             +\n               RECLEN=(R7),          .. I/O LENGTH                     +\n               CONVID=WKCID          .. CONVERSATION ID\n         OC    RPL6RC,RPL6RC         SUCCESSFUL?\n         BNZ   ERR0010               NO\n         MVC   WKFUNC,RECEIVE        LAST COMMAND ATTEMPTED\n         LA    R7,WKIOL              I/O AREA SIZE\n         APPCCMD CONTROL=RECEIVE,    ISSUE APPC COMMAND                +\n               QUALIFY=SPEC,         .. SPECIFIC CONVERSATION          +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               FILL=LL,              .. ONLY 1 LOGICAL RECORD          +\n               AREA=(R6),            .. I/O AREA                       +\n               AREALEN=(R7),         .. I/O AREA SIZE                  +\n               CONMODE=CS,           .. CONTINUE SPECIFIC              +\n               CONVID=WKCID          .. CONVERSATION ID\n         OC    RPL6RC,RPL6RC         ALL ZEROS?\n         BNZ   ERR0020               NO\n         CLI   USERAUTH,0            IS USER AUTHORIZED TO USE FX?\n         BH    USER0400              YES\n         MVC   PARMMSG(MSG20L),MSG20 COPY MESSAGE\n         MVC   PARMRC,H32            SET RETURN CODE\n         B     USER0900              CLOSE ACB AND EXIT\nUSERMVC  MVC   USERID(0),ACEEUSRI    COPY USER'S TSO ID\nUSER0400 DS    0H\n         MVC   WKAUTH,USERAUTH       SAVE AUTH LEVEL\n         CLI   PARMCMD,$INQUIRE      STATUS INQUIRY?\n         BE    USER0600              YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Request entry.                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nUSER0500 DS    0H\n         MINIT BLANKS,P0,0,R14       INITIALIZE REQUEST BLOCK AREA\n         LA    R7,WKIOL              I/O AREA SIZE\n         STH   R7,USERLEN            SET LENGTH\n         MVC   USERMOD,REQE          SET PROCESSING MODULE NAME\n         MVC   REQENODE,PARMFX       SET NODE WHERE REQUEST WAS ENTERED\n         MVC   REQTNODE,PARMFX       ASSUME SAME NODE WILL TRANSMIT\n         CLC   PARMXFX,BLANKS        DIFFERENT TRANSMIT NODE?\n         BE    USER0510              NO\n         MVC   REQTNODE,PARMXFX      SET TRANSMIT NODE\nUSER0510 DS    0H\n         MVC   REQODSNM,PARMODSN     SET ORIGINAL DATASET NAME\n         MVC   REQOMEM,PARMOMEM      SET ORIGINAL MEMBER NAME\n         MVC   REQDDSNM,PARMDDSN     SET DESTINATION DATASET NAME\n         MVC   REQDMEM,PARMDMEM      SET DESTINATION MEMBER NAME\n         MVC   REQREPL,PARMREPL      SET REPLACE INDICATOR\n         MVC   REQALIAS,PARMALAS     SET ALIAS INDICATOR\n         LA    R2,REQNDENM           FIRST DESTINATION NAME\n         USING REQNDENM,R2           DEFINE BASE\n         LA    R14,PARMNDNM          FIRST DESTINATION\n         USING PARMNDNM,R14          DEFINE BASE\n         SR    R15,R15               CLEAR REGISTER\n         ICM   R15,3,PARMNDE#        NUMBER OF NODES\nUSER0520 DS    0H\n         MVC   REQNDENM,PARMNDNM     COPY NODE NAME\n         LA    R2,REQNDEL(R2)        NEXT NODE\n         LA    R14,PARMNDL(R14)      NEXT NODE\n         BCT   R15,USER0520          LOOP\n         DROP  R2,R14\n         MVC   REQNDE#,PARMNDE#      SET NUMBER OF NODES\n         BAL   R9,USER0800           DO SEND/RECEIVE\n         MVC   PARMRC+1(1),USERRC    COPY RETURN CODE\n         MVC   PARMMSG(L'USERMSG),USERMSG\n         B     USER0900              TIME TO GET OUT OF DODGE\n* ------------------------------------------------------------------- *\n*     Request inquiry.                                                *\n* ------------------------------------------------------------------- *\nUSER0600 DS    0H\n         MVI   USERCMD,$USERSTA      SET COMMAND TO 'STATUS INQUIRY'\n         MVC   USERMOD,REQI          SET PROCESSING MODULE NAME\n         XC    USERREC#,USERREC#     START AT BEGINNING OF MASTER FILE\n         MVC   USERIDI,WKUSERID      ASSUME USER'S OWN USER ID\n         CLI   WKAUTH,1              'NORMAL' LEVEL USER?\n         BE    USER0610              YES\n         MVC   USERIDI,PARMUSER      USE USERID PROVIDED BY CALLER\nUSER0610 DS    0H\n         MVC   USERENDE,PARMENDE     SET ENTRY NODE\n         MVC   USERNBR,PARMNBR       SET REQUEST NUMBER\n         BAL   R9,USER0800           DO SEND/RECEIVE\n         CLI   USERRC,0              RECORD FOUND?\n         BNE   USER0700              NO\n         CLI   REQSTAT,$REQINIT      END OF FILE REACHED?\n         BE    USER0700              YES.. RECORD NOT FOUND\n         MVI   USERRC,0              SET RETURN CODE\n         MVC   PARMENDE,REQENODE     ENTRY NODE\n         MVC   PARMXFX,REQTNODE      TRANSMIT NODE\n         MVC   PARMODSN,REQODSNM     ORIGINAL DATA SET NAME\n         MVC   PARMOMEM,REQOMEM      ORIGINAL MEMBER NAME\n         MVC   PARMDDSN,REQDDSNM     DESTINATION DATA SET NAME\n         MVC   PARMDMEM,REQDMEM      DESTINATION MEMBER NAME\n         MVC   PARMREPL,REQREPL      REPLACE FLAG\n         MVC   PARMALAS,REQALIAS     ALIAS FLAG\n         LA    R1,STATMSG1           FIRST STATUS MESSAGE\n         USING STAT,R1               DEFINE BASE\nUSER0620 DS    0H\n         CLI   0(R1),X'FF'           END OF TABLE?\n         BE    USER0630              YES\n         CLC   REQSTAT,STATST        CORRECT ENTRY?\n         BE    USER0630              YES\n         LA    R1,STATL(R1)          NEXT STATUS\n         B     USER0620\nUSER0630 DS    0H\n         MVC   PARMSTAT,STATMSG      RETURN REQUEST'S STATUS\n         LA    R14,PARMNDNM          FIRST USER'S NODE NAME\n         USING PARMNDNM,R14          DEFINE BASE\n         SR    R15,R15               CLEAR REGISTER\n         ICM   R15,3,PARMNDE#        NUMBER OF NODES IN USER AREA\nUSER0640 DS    0H\n         MVC   PARMNDST,BLANKS       CLEAR STATUS TO BLANKS\n         ZAP   PARMNDTD,P0           INITIALIZE TRANSMIT DATE\n         XC    PARMNDTT,PARMNDTT     INITIALIZE TRANSMIT TIME\n         ZAP   PARMNDRD,P0           INITIALIZE RESTORE NOTIFY DATE\n         XC    PARMNDRT,PARMNDRT     INITIALIZE RESTORE NOTIFY TIME\n         LA    R14,PARMNDL(R14)      NEXT NODE\n         BCT   R15,USER0640          LOOP\n         DROP  R14\n         SR    R15,R15               CLEAR REGISTER\n         ICM   R15,3,REQNDE#         NUMBER IN QUERIED REQEUST\n         CLM   R15,3,PARMNDE#        MORE THAN USER ALLOWED FOR?\n         BNH   USER0650              NO\n         ICM   R15,3,PARMNDE#        LIMIT TO NUMBER USER ALLOWS\n         MVC   PARMRC,H4             SET RETURN CODE TO 4\nUSER0650 DS    0H\n         STCM  R15,3,PARMNDE#        NUMBER OF NODES RETURNED\n         LA    R2,REQNDENM           FIRST NODE NAME\n         USING REQNDENM,R2           DEFINE BASE\n         LA    R14,PARMNDNM          FIRST USER'S NODE NAME\n         USING PARMNDNM,R14          DEFINE BASE\n         LTR   R15,R15               ANY DESTINATIONS?\n         BZ    USER0690              NO DESTINATIONS\nUSER0660 DS    0H\n         MVC   PARMNDNM,REQNDENM     COPY NODE NAME\n         LA    R1,STATMSG2           FIRST STATUS MESSAGE\n         USING STAT,R1               DEFINE BASE\nUSER0670 DS    0H\n         CLI   STATST,X'FF'          END OF TABLE?\n         BE    USER0680              YES\n         CLC   STATST,REQNDEST       CORRECT STATUS?\n         BE    USER0680              YES\n         LA    R1,STATL(R1)          NEXT STATUS\n         B     USER0670              LOOP\nUSER0680 DS    0H\n         MVC   PARMNDST,STATMSG      COPY STATUS\n         MVC   WKDATE,DATEEDWD       INITIALIZE WITH EDIT WORD\n         ED    WKDATE,REQNDETD       EDIT TRANSMIT DATE\n         MVC   PARMNDTD,WKDATE+1     COPY EDITED TRANSMIT DATE\n         MVC   WKTIME,TIMEEDWD       INITIALIZE WITH EDIT WORD\n         ED    WKTIME,REQNDETT       EDIT TRANSMIT TIME\n         MVC   PARMNDTT,WKTIME+1     COPY EDITED TRANSMIT TIME\n         MVC   WKDATE,DATEEDWD       INITIALIZE WITH EDIT WORD\n         ED    WKDATE,REQNDERD       EDIT RESTORE NOTIFY DATE\n         MVC   PARMNDRD,WKDATE+1     COPY EDITED RESTORE NOTIFY DATE\n         MVC   WKTIME,TIMEEDWD       INITIALIZE WITH EDIT WORD\n         ED    WKTIME,REQNDERT       EDIT RESTORE NOTIFY TIME\n         MVC   PARMNDRT,WKTIME+1     COPY EDITED RESTORE NOTIFY TIME\n         LA    R2,REQNDEL(R2)        NEXT NODE\n         LA    R14,PARMNDL(R14)      NEXT NODE\n         BCT   R15,USER0660          LOOP\n         DROP  R2,R14\nUSER0690 DS    0H\n         MVC   PARMMSG(MSG21L),MSG21 STATUS REQUEST COMPLETE\n         B     USER0900              CLEAN-UP AND EXIT\nUSER0700 DS    0H\n         MVC   PARMRC+1(1),USERRC    SET RETURN CODE\n         MVC   PARMMSG(MSG22L),MSG22 RECORD NOT FOUND\n         B     USER0900              CLEAN-UP AND EXIT\n* ------------------------------------------------------------------- *\n*     Send/Receive                                                    *\n* ------------------------------------------------------------------- *\nUSER0800 DS    0H\n         LA    R7,WKIOL              LENGTH\n         STH   R7,USERLEN            SET LENGTH\n         APPCCMD CONTROL=SEND,       ISSUE SEND                        +\n               QUALIFY=DATA,         .. SEND DATA                      +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               AREA=(R6),            .. I/O AREA ADDRESS               +\n               RECLEN=(R7),          .. I/O LENGTH                     +\n               CONMODE=CS,           .. CONTINUE SPECIFIC              +\n               CONVID=WKCID          .. CONVERSATION ID\n         OC    RPL6RC,RPL6RC         SEND OK?\n         BNZ   ERR0010               NO\n         LA    R7,WKIOL              I/O AREA SIZE\n         APPCCMD CONTROL=RECEIVE,    ISSUE RECEIVE                     +\n               QUALIFY=SPEC,         .. FOR A SPECIFIC SESSION         +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               FILL=LL,              .. ONLY 1 LOGICAL RECORD          +\n               AREA=(R6),            .. I/O AREA ADDRESS               +\n               AREALEN=(R7),         .. I/O AREA SIZE                  +\n               CONVID=WKCID          .. CONVERSATION ID\n         OC    RPL6RC,RPL6RC         RECEIVE OK?\n         BNZ   ERR0020               NO\n         BR    R9                    RETURN\n* ------------------------------------------------------------------- *\n*  VTAM clean-up.                                                     *\n* ------------------------------------------------------------------- *\nUSER0900 DS    0H\n         TM    WKFLAG,$SESSALO       CONVERSATION ALLOCATED?\n         BNO   USER0910              NO\n         APPCCMD CONTROL=DEALLOC,    DE-ALLOCATE A SESSION             +\n               QUALIFY=FLUSH,        .. FLUSH BUFFERS                  +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               CONVID=WKCID          .. CONVERSATION ID\n         OC    RPL6RC,RPL6RC         DE-ALLOCATE SUCCESSFUL?\n         BNZ   ERR0030               NO\nUSER0910 DS    0H\n         TM    WKFLAG,$ACBOPEN       ACB OPENED?\n         BNO   USER0920              NO\n         MVC   WKOC(CLOSEL),CLOSEI   INITIALIZE CLOSE PARM LIST\n         LA    R2,WKACB              ACB'S ADDRESS\n         CLOSE ((R2)),MF=(E,WKOC)    CLOSE THE ACB\nUSER0920 DS    0H\n         B     EXIT0000              AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVC   PARMMSG(MSG23L),MSG23\n         UNPK  PARMMSG+(MSG23RC-MSG23)(9),RPL6RC   UNPACK RC\n         MVZ   PARMMSG+(MSG23RC-MSG23)(8),HEX0F0F CLEAR ZONES\n         TR    PARMMSG+(MSG23RC-MSG23)(8),HEXCHAR TRANSLATE\n         MVI   PARMMSG+(MSG23RC-MSG23)+8,C' '\n         MVC   PARMRC,H32            SET RETURN CODE\n         B     USER0900              CLOSE ACB AND EXIT\nERR0020  DS    0H\n         MVC   PARMMSG(MSG24L),MSG24\n         UNPK  PARMMSG+(MSG24RC-MSG24)(9),RPL6RC   UNPACK RC\n         MVZ   PARMMSG+(MSG24RC-MSG24)(8),HEX0F0F CLEAR ZONES\n         TR    PARMMSG+(MSG24RC-MSG24)(8),HEXCHAR TRANSLATE\n         MVI   PARMMSG+(MSG24RC-MSG24)+8,C' '\n         MVC   PARMRC,H32            SET RETURN CODE\n         B     USER0900              CLOSE ACB AND EXIT\nERR0030  DS    0H\n         MVC   PARMMSG(MSG25L),MSG25\n         UNPK  PARMMSG+(MSG25RC-MSG25)(9),RPL6RC   UNPACK RC\n         MVZ   PARMMSG+(MSG25RC-MSG25)(8),HEX0F0F CLEAR ZONES\n         TR    PARMMSG+(MSG25RC-MSG25)(8),HEXCHAR TRANSLATE\n         MVI   PARMMSG+(MSG25RC-MSG25)+8,C' '\n         B     USER0910              CLOSE ACB AND EXIT\nERR0040  DS    0H\n         ABEND $U0116,DUMP,,USER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         LR    R1,R13                COPY SAVE AREA ADDRESS\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         FREEMAIN RU,A=(R1),LV=WKL   FREEMAIN WORK AREA\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         SR    R15,R15               SET RETURN CODE\n         BR    R14                   RETURN\nATTN0000 DS    0H\n         ABEND $U0106,DUMP,,USER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVDSNVER  DC    V(FXDSNVER)           DSN FORMAT VERIFIER\nVMEMVER  DC    V(FXMEMVER)           MEMBER NAME VERIFIER\nH4       DC    H'4'\nH8       DC    H'8'\nH32      DC    H'32'\nH100     DC    H'100'\nP0       DC    P'0'\nX000001  DC    X'00000001'\nX144C    DC    X'144C'\nHEX0F0F  DC    8X'0F'\nHEXCHAR  DC    C'0123456789ABCDEF'\nDATEEDWD DC    X'F0212020204B202020'\nTIMEEDWD DC    X'F021207A20207A2020'\nBLANKS   DC    CL44' '\nREQE     DC    CL4'REQE'\nREQI     DC    CL4'REQI'\nOPENACB  DC    CL8'OPENACB'\nSETLOGON DC    CL8'SETLOGON'\nINQUIRE  DC    CL8'INQUIRE'\nCNOS     DC    CL8'CNOS'\nALLOCATE DC    CL8'ALLOCATE'\nSEND     DC    CL8'SEND'\nRECEIVE  DC    CL8'RECEIVE'\nUID      DC    CL4'UID'\nOPENI    OPEN  (*,INPUT),MF=L        OPEN PARM LIST\nOPENL    EQU   *-OPENI\nCLOSEI   CLOSE (*),MF=L\nCLOSEL   EQU   *-CLOSEI\nACBI     ACB   AM=VTAM,              GENERATE VTAM ACB                 +\n               MACRF=LOGON,                                            +\n               EXLST=*,                                                +\n               APPLID=*\nACBL     EQU   *-ACBI\nEXLSTI   EXLST AM=VTAM,              GENERATE VTAM EXIT LIST           +\n               ATTN=ATTN0000,                                          +\n               LERAD=LERAD000\nEXLSTL   EQU   *-EXLSTI\nNIBI     NIB   MODE=RECORD,          GENERATE VTAM NIB                 +\n               NAME=FX\nNIBL     EQU   *-NIBI\nRPLI     RPL   AM=VTAM,              GENERATE VTAM RPL                 +\n               AAREA=RPLEXTI\nRPLL     EQU   *-RPLI\nRPLEXTI  ISTRPL6\nRPLEXTL  EQU   *-RPLEXTI\n         FMH5  DSECT=NO,TRAN=USER    GENERATE FMH5\nMSG01    DC    CL11'FXUSER01E'\n         DC    C'INVALID COMMAND'\nMSG01L   EQU   *-MSG01\nMSG02    DC    CL11'FXUSER02E'\n         DC    C'NUMBER OF NODES IN USER AREA IS ZERO'\nMSG02L   EQU   *-MSG02\nMSG03    DC    CL11'FXUSER03E'\n         DC    C'DATA SET NAME IS BLANK'\nMSG03L   EQU   *-MSG03\nMSG04    DC    CL11'FXUSER04E'\n         DC    C'DATA SET NAME IS INVALID'\nMSG04L   EQU   *-MSG04\nMSG05    DC    CL11'FXUSER05E'\n         DC    C'MEMBER NAME IS INVALID'\nMSG05L   EQU   *-MSG05\nMSG06    DC    CL11'FXUSER06E'\n         DC    C'NEW MEMBER NAME IS INVALID'\nMSG06L   EQU   *-MSG06\nMSG07    DC    CL11'FXUSER07E'\n         DC    C'ALIAS=Y NOT VALID WITH NEW MEMBER NAME'\nMSG07L   EQU   *-MSG07\nMSG08    DC    CL11'FXUSER08E'\n         DC    C'NEW DATA SET NAME IS INVALID'\nMSG08L   EQU   *-MSG08\nMSG09    DC    CL11'FXUSER09E'\n         DC    C'REPLACE FLAG IS INVALID'\nMSG09L   EQU   *-MSG09\nMSG10    DC    CL11'FXUSER10E'\n         DC    C'ALIAS FLAG IS INVALID'\nMSG10L   EQU   *-MSG10\nMSG11    DC    CL11'FXUSER11E'\n         DC    C'AT LEAST 1 DESTINATION IS REQUIRED'\nMSG11L   EQU   *-MSG11\nMSG12    DC    CL11'FXUSER12E'\n         DC    C'ALIAS NOT VALID WITHOUT A MEMBER NAME'\nMSG12L   EQU   *-MSG12\nMSG13    DC    CL11'FXUSER13E'\n         DC    C'NEW MEMBER NAME NOT VALID WITHOUT ORIGINAL MEMBER NAME+\n               '\nMSG13L   EQU   *-MSG13\nMSG14    DC    CL11'FXUSER14E'\n         DC    C'ALL USER INTERFACE APPLID''S ARE BUSY, TRY LATER'\nMSG14L   EQU   *-MSG14\nMSG15    DC    CL11'FXUSER15E'\n         DC    C'SETLOGON FAILED, RC='\nMSG15RC  DC    CL4' '\n         DC    C' '\nMSG15L   EQU   *-MSG15\nMSG16    DC    CL11'FXUSER16E'\n         DC    C'FX STC IS NOT ACTIVE'\nMSG16L   EQU   *-MSG16\nMSG17    DC    CL11'FXUSER17E'\n         DC    C'CNOS FAILED, RC='\nMSG17RC  DC    CL8' '\n         DC    C' '\nMSG17L   EQU   *-MSG17\nMSG18    DC    CL11'FXUSER18E'\n         DC    C'ALLOCD FAILED, RC='\nMSG18RC  DC    CL8' '\n         DC    C' '\nMSG18L   EQU   *-MSG18\nMSG19    DC    CL11'FXUSER19E'\n         DC    C'COULD NOT DETERMINE YOUR USER ID'\nMSG19L   EQU   *-MSG19\nMSG20    DC    CL11'FXUSER20E'\n         DC    C'YOU ARE NOT AUTHORIZED TO USE FX'\nMSG20L   EQU   *-MSG20\nMSG21    DC    CL11'FXUSER21I   STATUS INQUIRY COMPLETE'\n         DC    C'STATUS INQUIRY COMPLETE'\nMSG21L   EQU   *-MSG21\nMSG22    DC    CL11'FXUSER22E'\n         DC    C'REQUEST NOT FOUND'\nMSG22L   EQU   *-MSG22\nMSG23    DC    CL11'FXUSER23E'\n         DC    C'VTAM SEND FAILED, RPL6RC='\nMSG23RC  DC    CL8' '\n         DC    C' '\nMSG23L   EQU   *-MSG23\nMSG24    DC    CL11'FXUSER24E'\n         DC    C'VTAM RECEIVE FAILED, RPL6RC='\nMSG24RC  DC    CL8' '\n         DC    C' '\nMSG24L   EQU   *-MSG24\nMSG25    DC    CL11'FXUSER25E'\n         DC    C'CONVERSATION DEALLOCATE FAILED, RPL6RC='\nMSG25RC  DC    CL8' '\n         DC    C' '\nMSG25L   EQU   *-MSG25\nSTATMSG1 DS    0C\n         COPY  REQMSG\nSTATMSG2 DS    0C\n         COPY  NODEMSG\n         LTORG\nLERAD000 DS    0H\n         USING LERAD000,R15\n         SH    R15,LERADDSP\n         DROP  R15\n         USING FXUSER,R15            RE-DEFINE BASE\n         DROP  R3\n         USING IFGRPL,R1\n         CLC   X1453,RPLFDBK         UNKNOWN OR INVALID LU NAME IN NIB?\n         BE    LERAD010              CORRECT\n         ABEND $U0107,DUMP,,USER\nLERAD010 DS    0H\n         OI    WKFLAG,$BADLU         LU NAME IN NIB IS BAD\n         BR    R14\nLERADDSP DC    Y(LERAD000-FXUSER)\nX1453    DC    X'1453'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWK       DSECT\nWKSAVE   DS    18F\nWKDWORD  DS    D\nWKFLAG   DS    X                     FLAGS/INDICATORS\n$ACBOPEN EQU   X'80'                 .. ACB IS OPEN\n$SESSALO EQU   X'40'                 .. SESSION IS ALLOCATED\n$BADLU   EQU   X'20'                 .. LU NAME IN NIB IS INVALID\nWKAPLL   DS    X                     OUR APPLID'S LENGTH\nWKAPLN   DS    CL8                   OUR APPL NAME\nWKFUNC   DS    CL8                   LAST FUNCTION ATTEMPTED\nWKCID    DS    XL4                   CONVERSATION ID\nWKDATE   DS    CL9\nWKTIME   DS    CL9\nWKOC     DS    0A,(OPENL)X           OPEN (AND CLOSE) PARM LIST\nWKACB    DS    0A,(ACBL)X            ACB\nWKEXLST  DS    0A,(EXLSTL)X          EXIT LIST\nWKRPL    DS    0A,(RPLL)X            RPL\nWKRPLEXT DS    0A,(RPLEXTL)X         RPL EXTENSION\nWKNIB    DS    0A,(NIBL)X            NIB\nWKUSERID DS    CL8\nWKAUTH   DS    X\n         DSNREQ DSECT=NO\n         MEMREQ DSECT=NO\n* ------------------------------------------------------------------- *\n*              USER REQUEST/RESPONSE BLOCK                            *\n* ------------------------------------------------------------------- *\nWKIO     DS    0X\n         USERREQ DSECT=NO,IOAREA=NO\n* ------------------------------------------------------------------- *\n*              USER IDENTIFICATION DATA (AND REPLY DATA)              *\n* ------------------------------------------------------------------- *\nUSERSMF  DS    CL4\nUSERID   DS    CL8\nUSERJOB  DS    CL8\nUSERIDL  EQU   *-USERREQ\n         ORG   USERDATA\nUSERAUTH DS    X\nUSERSYSN DS    CL20\n* ------------------------------------------------------------------- *\n*              REQUEST INQUIRY DATA                                   *\n* ------------------------------------------------------------------- *\n         ORG   USERDATA\nUSERCMD  DS    C               COMMAND FROM FXTREQI\n$USERINQ EQU   C'I'            .. INQUIRE\n$USERCAN EQU   C'C'            .. CANCEL REQUEST\n$USERDEL EQU   C'D'            .. DELETE REQUEST\n$USERPRT EQU   C'O'            .. RETURN DF/DSS OR IEBCOPY SYSPRINT\n$USERSTA EQU   C'S'            .. RETURN STATUS OF SPECIFIC REQUEST\nUSERREC# DS    XL2             STARTING RECORD NUMBER\nUSERIDI  DS    CL8             USER ID (FOR SPECIFIC USER REQUESTS)\nUSERENDE DS    CL8             NODE NAME (FOR SPECIFIC REQUESTS)\nUSERNBR  DS    XL4             REQUEST NUMBER (FOR SPECIFIC REQUESTS)\nUSERRCSZ DS    XL2             LRECL OF DF/DSS OR IEBCOPY SYSPRINT\nUSERBLKZ DS    XL2             BLKSZ OF DF/DSS OR IEBCOPY SYSPRINT\nUSERRCFM DS    X               RECFM OF DF/DSS OR IEBCOPY SYSPRINT\nUSERPRT  DS    0C\n* ------------------------------------------------------------------- *\n*              REQUEST BLOCK                                          *\n* ------------------------------------------------------------------- *\n         ORG   USERDATA\n         REQBLOK  DSECT=NO\nWKIOL    EQU   *-WKIO\nWKL      EQU   *-WK\n* ------------------------------------------------------------------- *\n*              PARM LIST                                              *\n* ------------------------------------------------------------------- *\n         USERPARM DSECT=YES\n* ------------------------------------------------------------------- *\n*              OVER-ALL STATUS                                        *\n* ------------------------------------------------------------------- *\nSTAT     DSECT\nSTATST   DS    X\nSTATMSG  DS    CL25\nSTATL    EQU   *-STAT\n* ------------------------------------------------------------------- *\n*              ACB                                                    *\n* ------------------------------------------------------------------- *\n         IFGACB AM=VTAM\n* ------------------------------------------------------------------- *\n*              RPL                                                    *\n* ------------------------------------------------------------------- *\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------- *\n*              EXLST                                                  *\n* ------------------------------------------------------------------- *\n         IFGEXLST AM=VTAM\n* ------------------------------------------------------------------- *\n*              NIB                                                    *\n* ------------------------------------------------------------------- *\n         ISTDNIB\n* ------------------------------------------------------------------- *\n*              PSA                                                    *\n* ------------------------------------------------------------------- *\n         IHAPSA   DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              CVT                                                    *\n* ------------------------------------------------------------------- *\n         CVT      DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              SMF                                                    *\n* ------------------------------------------------------------------- *\n         IEESMCA\n* ------------------------------------------------------------------- *\n*              ASCB                                                   *\n* ------------------------------------------------------------------- *\n         IHAASCB  DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              ASXB                                                   *\n* ------------------------------------------------------------------- *\n         IHAASXB  DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              ACEE                                                   *\n* ------------------------------------------------------------------- *\n         IHAACEE\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  FXUSER\n./ ADD NAME=FX24     0100-99056-99056-1500-00360-00360-00000-FX-REL1\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Name: FX24                                                         *\n*                                                                     *\n*  This is a set of 24-bit macros.  The callers provide the           *\n*  parameters needed for each function in a 24-bit area.  The         *\n*  requested macro is issued, and the status returned to the caller.  *\n*  This is to allow most of the code to remain in 31-bit storage.     *\n*                                                                     *\n*  Functions available are:                                           *\n*    $OPEN      (open a DCB for input)                                *\n*    $OPEN      (open a DCB for output)                               *\n*    $CLOSE     (close a DCB)                                         *\n*    $GETM      (QSAM GET, move mode)                                 *\n*    $GETL      (QSAM GET, locate mode)                               *\n*    $LOCATE    (Extract catalog data by data set name)               *\n*    $POINT     (BSAM POINT)                                          *\n*    $PUT       (QSAM PUT, move mode)                                 *\n*    $READ      (BSAM READ)                                           *\n*    $WRITE     (BSAM WRITE)                                          *\n*    $CHECK     (I/O CHECK)                                           *\n*    $CALL      (CALL a subroutine)                                   *\n*    $CAMLSTA   (OBTAIN with read-by-address CAMLST)                  *\n*    $CAMLSTN   (OBTAIN with read-by-DSN CAMLST)                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  OPTIONS\nFX24     CSECT\nFX24     AMODE 24\nFX24     RMODE 24\n         USING FXCOMM,R11            DEFINE BASE\n         USING FX24PRM,R1            DEFINE BASE\n         STM   R0,R14,SAVE24A        SAVE CALLER'S REGISTERS\n         LR    R12,R15               COPY BASE ADDRESS\n         USING FX24,R12              DEFINE BASE\n         LR    R9,R1                 COPY PARM BLOCK ADDRESS\n         DROP  R1\n         USING FX24PRM,R9            DEFINE BASE\n         B     INIT0000              SKIP EYECATCHERS\n         DC    ((PFXMODNM-MODPRFX)-(*-FX24))X'00'\n         DC    CL8'FX24'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nINIT0000 DS    0H\n         ITRACE ID=ENTRY,                                              +\n               DATA1=CMD24\n         LA    R13,SAVE24B           SET SAVE AREA ADDRESS\n         CLI   CMD24,$CALL           CALL?\n         BE    CALL0000              YES\n         CLI   CMD24,$CAMLSTA        OBTAIN WITH READ-BY-ADDRESS CAMLST\n         BE    CAMA0000              YES\n         CLI   CMD24,$CAMLSTN        OBTAIN WITH READ-BY-DSN CAMLST\n         BE    CAMN0000              YES\n         CLI   CMD24,$CHECK          CHECK?\n         BE    CHECK000              YES\n         CLI   CMD24,$CLOSE          CLOSE?\n         BE    CLOSE000              YES\n         CLI   CMD24,$GETM           GET (MOVE MODE)?\n         BE    GETM0000              YES\n         CLI   CMD24,$GETL           GET (LOCATE MODE)?\n         BE    GETL0000              YES\n         CLI   CMD24,$LOCATE         ISSUE LOCATE?\n         BE    LOCATE00              YES\n         CLI   CMD24,$NOTE           ISSUE NOTE?\n         BE    NOTE0000              YES\n         CLI   CMD24,$OPENI          OPEN INPUT?\n         BE    OPENI000              YES\n         CLI   CMD24,$OPENO          OPEN OUTPUT?\n         BE    OPENO000              YES\n         CLI   CMD24,$POINT          POINT?\n         BE    POINT000              YES\n         CLI   CMD24,$PUT            PUT?\n         BE    PUT0000               YES\n         CLI   CMD24,$READ           BSAM READ?\n         BE    READ0000              YES\n         CLI   CMD24,$WRITE          BSAM WRITE?\n         BE    WRITE000              YES\n         ABEND $U0061,DUMP,,USER     INVALID COMMAND\nCALL0000 DS    0H\n         ITRACE ID=CALL,             CALLING 24-BIT PROGRAM            +\n               DATA1=EP24,           .. CALLED MODULE ENTRY POINT      +\n               DATA2=PARM24          .. PARAMETER LIST ADDRESS\n         L     R1,PARM24             PARAMETER LIST ADDRESS\n         L     R15,EP24              ROUTINE ENTRY POINT\n         BASSM R14,R15               LINK TO ROUTINE\n         BAL   R10,AM31              FORCE 31-BIT MODE\n         B     EXIT0000              AND EXIT\nCAMA0000 DS    0H\n         ITRACE ID=CAMLSTA,          ISSING OBTAIN BY DISK ADDRESS     +\n               DATA1=CCHHR24,        .. DISK ADDRESS                   +\n               DATA2=VOL24           .. VOLSER\n         MVC   CAMLST24(CAMLSTAL),CAMLSTA\n         LA    R0,CCHHR24            CYLINDER/HEAD/RECORD'S ADDRESS\n         ST    R0,CAMLST24+4         SET ADDRESS IN PARM LIST\n         LA    R0,VOL24              VOLSER'S ADDRESS\n         ST    R0,CAMLST24+8         SET ADDRESS IN PARM LIST\n         LA    R0,VTOC24             VTOC DATA ADDRESS\n         ST    R0,CAMLST24+12        SET ADDRESS IN PARM LIST\n         LA    R1,CAMLST24           OBTAIN PARM LIST\n         BAL   R10,AM24              SWITCH TO 24-BIT MODE\n         OBTAIN (1)                  ISSUE OBTAIN\n         BAL   R10,AM31              SWITCH TO 31-BIT MODE\n         B     EXIT0000              AND EXIT\nCAMN0000 DS    0H\n         ITRACE ID=CAMLSTN,          ISSUING OBTAIN BY DATASET NAME    +\n               DATA1=DSN24,          .. DATASET'S NAME                 +\n               DATA2=VOL24           .. VOLSER\n         MVC   CAMLST24(CAMLSTNL),CAMLSTN\n         LA    R0,DSN24              DATASET NAME'S ADDRESS\n         ST    R0,CAMLST24+4         SET ADDRESS IN PARM LIST\n         LA    R0,VOL24              VOLSER'S ADDRESS\n         ST    R0,CAMLST24+8         SET ADDRESS IN PARM LIST\n         LA    R0,VTOC24+44          VTOC DATA ADDRESS\n         ST    R0,CAMLST24+12        SET ADDRESS IN PARM LIST\n         LA    R1,CAMLST24           OBTAIN PARM LIST\n         BAL   R10,AM24              SWITCH TO 24-BIT MODE\n         OBTAIN (1)                  ISSUE OBTAIN\n         BAL   R10,AM31              SWITCH TO 31-BIT MODE\n         B     EXIT0000              AND EXIT\nCHECK000 DS    0H\n         ITRACE ID=CHECK,            ISSUING A CHECK                   +\n               DATA1=DECB24          .. DECB'S ADDRESS\n         L     R4,DECB24             DECB'S ADDRESS\n         BAL   R10,AM24              SWITCH TO 24-BIT MODE\n         CHECK (R4)                  CHECK I/O\n         BAL   R10,AM31              SWITCH TO 31-BIT MODE\n         B     EXIT0000              AND EXIT\nCLOSE000 DS    0H\n         ITRACE ID=CLOSE,            CLOSING DCB                       +\n               DATA1=DCB24           .. DCB'S ADDRESS\n         GETMAIN RU,                 ACQUIRE STORAGE FOR OPEN/CLOSE    +\n               LV=OCPLL,             .. SIZE OF AREA                   +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R2,R1                 COPY OPEN/CLOSE PARM LIST ADDRESS\n         MVC   0(OCPLL,R2),CLOSEL    COPY CLOSE LIST FORM\n         L     R3,DCB24              DCB'S ADDRESS\n         BAL   R10,AM24              SWITCH TO 24-BIT MODE\n         CLOSE ((R3)),MF=(E,(R2))    ISSUE CLOSE\n         BAL   R10,AM31              SWITCH TO 31-BIT MODE\n         FREEMAIN RU,A=(2),LV=OCPLL  FREEMAIN OPEN/CLOSE PARM LIST\n         B     EXIT0000              AND EXIT\nGETL0000 DS    0H\n         ITRACE ID=GETL,             ISSUING GET (LOCATE MODE)         +\n               DATA1=DCB24           .. DCB'S ADDRESS\n         L     R3,DCB24              DCB'S ADDRESS\n         BAL   R10,AM24              SWITCH TO 24-BIT MODE\n         GET   (R3)                  ISSUE GET\n         BAL   R10,AM31              SWITCH TO 31-BIT MODE\n         ST    R1,IOA24              RETURN I/O AREA ADDRESS\n         ITRACE ID=GETLDATA,         DATA RETURNED BY GET              +\n               RDATA1=R1,            .. I/O AREA ADDRESS               +\n               DATA2=0(R1)           .. 1ST 8 BYTES\n         B     EXIT0000              AND EXIT\nGETM0000 DS    0H\n         ITRACE ID=GETM,             ISSUING GET (MOVE MODE)           +\n               DATA1=DCB24,          .. DCB'S ADDRESS                  +\n               DATA2=IOA24           .. I/O AREA'S ADDRESS\n         L     R3,DCB24              DCB'S ADDRESS\n         L     R4,IOA24              I/O AREA'S ADDRESS\n         BAL   R10,AM24              SWITCH TO 24-BIT MODE\n         GET   (R3),(R4)             ISSUE GET\n         BAL   R10,AM31              SWITCH TO 31-BIT MODE\n         ITRACE ID=GETMDATA,         DATA RETURNED BY GET              +\n               DATA1=0(R4),          .. 1ST 8 BYTES                    +\n               DATA2=8(R4)           .. NEXT 8 BYTES\n         B     EXIT0000              AND EXIT\nLOCATE00 DS    0H\n         ITRACE ID=LOCATE,           ISSUING NOTE                      +\n               DATA1=DSN24           .. DATA SET NAME\n         MVC   CAMLST24(CAMLOCL),CAMLOC\n         LA    R0,DSN24              DATASET NAME'S ADDRESS\n         ST    R0,CAMLST24+4         SET ADDRESS IN PARM LIST\n         GETMAIN RU,                 ACQUIRE STORAGE FOR LOCATE DATA   +\n               LV=265,               .. SIZE                           +\n               LOC=BELOW             .. MUST BE 24-BIT AREA\n         ST    R1,CAMLST24+12        SET WORK AREA ADDRESS\n         LA    R1,CAMLST24           OBTAIN PARM LIST\n         BAL   R10,AM24              SWITCH TO 24-BIT MODE\n         LOCATE (1)                  ISSUE LOCATE\n         LR    R2,R15                SAVE RETURN CODE\n         L     R1,CAMLST24+12        WORK AREA ADDRESS\n         FREEMAIN RU,A=(1),LV=265    FREE WORK AREA\n         LR    R15,R2                RESTORE RETURN CODE\n         BAL   R10,AM31              SWITCH TO 31-BIT MODE\n         B     EXIT0000              AND EXIT\nNOTE0000 DS    0H\n         ITRACE ID=NOTE,             ISSUING NOTE                      +\n               DATA1=DCB24           .. DCB'S ADDRESS\n         L     R3,DCB24              DCB ADDRESS\n         BAL   R10,AM24              SWITCH TO 24-BIT MODE\n         NOTE  (R3),                 REQUEST CURRENT DATA SET POSITION +\n               TYPE=REL              .. RELATIVE TTR\n         BAL   R10,AM31              SWITCH TO 31-BIT MODE\n         STCM  R1,15,TTR24           SAVE RETURNED TTR\n         B     EXIT0000              EXIT\nOPENI000 DS    0H\n         ITRACE ID=OPENI,            OPEN DCB INPUT                    +\n               DATA1=DCB24           .. DCB'S ADDRESS\n         GETMAIN RU,                 ACQUIRE STORAGE FOR OPEN/CLOSE    +\n               LV=OCPLL,             .. SIZE OF AREA                   +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R2,R1                 COPY OPEN/CLOSE PARM LIST ADDRESS\n         MVC   0(OCPLL,R2),OPENIL    COPY OPEN INPUT LIST FORM\n         L     R3,DCB24              DCB'S ADDRESS\n         USING IHADCB,R3             DEFINE BASE\n         LA    R1,EOF0000            EOF ADDRESS\n         STCM  R1,7,DCBEODA          SET EOF ADDRESS\n         BAL   R10,AM24              SWITCH TO 24-BIT MODE\n         OPEN  ((R3)),MF=(E,(R2))\n         BAL   R10,AM31              SWITCH TO 31-BIT MODE\n         FREEMAIN RU,A=(2),LV=OCPLL  FREEMAIN OPEN/CLOSE PARM LIST\n         B     EXIT0000              AND EXIT\nOPENO000 DS    0H\n         ITRACE ID=OPENO,            OPENING DCB OUTPUT                +\n               DATA1=DCB24           .. DCB'S ADDRESS\n         GETMAIN RU,                 ACQUIRE STORAGE FOR OPEN/CLOSE    +\n               LV=OCPLL,             .. SIZE OF AREA                   +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R2,R1                 COPY OPEN/CLOSE PARM LIST ADDRESS\n         MVC   0(OCPLL,R2),OPENOL    COPY OPEN OUTPUT LIST FORM\n         L     R3,DCB24              DCB'S ADDRESS\n         BAL   R10,AM24              SWITCH TO 24-BIT MODE\n         OPEN  ((R3)),MF=(E,(R2))\n         BAL   R10,AM31              SWITCH TO 31-BIT MODE\n         FREEMAIN RU,A=(2),LV=OCPLL  FREEMAIN OPEN/CLOSE PARM LIST\n         B     EXIT0000              AND EXIT\nPOINT000 DS    0H\n         ITRACE ID=POINT,            ISSUING POINT                     +\n               DATA1=DCB24,          .. DCB'S ADDRESS                  +\n               DATA2=TTR24           .. RELATIVE TTR\n         L     R3,DCB24              DCB ADDRESS\n         LA    R4,TTR24              TTR ADDRESS\n         BAL   R10,AM24              SWITCH TO 24-BIT MODE\n         POINT (R3),                 SET STARTING POINT                +\n               (R4),                 .. TTR ADDRESS                    +\n               TYPE=REL              .. RELATIVE TTR\n         BAL   R10,AM31              SWITCH TO 31-BIT MODE\n         ITRACE ID=POINTRC,                                            +\n               RDATA1=R15\n         LTR   R15,R15               POINT SUCCESSFUL?\n         BNZ   POINT010              NO\n         B     EXIT0000              EXIT\nPOINT010 DS    0H\n         ITRACE ID=POINTERR,                                           +\n               RDATA1=R15\n         ABEND $U0113,DUMP,,USER\nPUT0000  DS    0H\n         ITRACE ID=PUT,              ISSUING PUT                       +\n               DATA1=DCB24,          .. DCB'S ADDRESS                  +\n               DATA2=IOA24           .. I/O AREA'S ADDRESS\n         L     R3,DCB24              DCB'S ADDRESS\n         L     R4,IOA24              I/O AREA'S ADDRESS\n         BAL   R10,AM24              SWITCH TO 24-BIT MODE\n         PUT   (R3),(R4)             ISSUE PUT\n         BAL   R10,AM31              SWITCH TO 24-BIT MODE\n         B     EXIT0000              AND EXIT\nREAD0000 DS    0H\n         ITRACE ID=READ,             ISSUING BSAM READ                 +\n               DATA1=DCB24,          .. DCB'S ADDRESS                  +\n               DATA2=DECB24          .. DECB'S ADDRESS\n         L     R3,DCB24              DCB'S ADDRESS\n         L     R4,DECB24             DECB'S ADDRESS\n         L     R5,IOA24              I/O AREA ADDRESS\n         XC    0(4,R4),0(R4)         CLEAR THE ECB\n         BAL   R10,AM24              SWITCH TO 24-BIT MODE\n         READ  (R4),                 START BSAM I/O                    +\n               SF,                   .. SEQUENTIALLY FORWARD           +\n               (R3),                 .. DCB ADDRESS                    +\n               (R5),                 .. I/O AREA ADDRESS               +\n               'S',                  ..                                +\n               MF=E                  .. EXECUTE FORM\n         BAL   R10,AM31              SWITCH TO 31-BIT MODE\n         B     EXIT0000              AND EXIT\nEOF0000  DS    0H\n         BAL   R10,AM31              SWITCH TO 31-BIT MODE\n         ITRACE ID=EOF,              EOF                               +\n               DATA1=DCB24,          .. DCB'S ADDRESS                  +\n               DATA2=EOF24           .. CALLER'S EOF ADDRESS\n         MVC   SAVE24A+(R14*4)(4),EOF24  REPLACE RETURN ADDRESS\n         B     EXIT0000              AND EXIT\nWRITE000 DS    0H\n         ITRACE ID=WRITE,            ISSUING BSAM WRITE                +\n               DATA1=DCB24,          .. DCB'S ADDRESS                  +\n               DATA2=DECB24          .. DECB'S ADDRESS\n         L     R3,DCB24              DCB'S ADDRESS\n         L     R4,DECB24             DECB'S ADDRESS\n         L     R5,IOA24              I/O AREA ADDRESS\n         SR    R6,R6                 CLEAR REGISTER\n         ICM   R6,3,LRECL24          RECORD SIZE\n         XC    0(4,R4),0(R4)         CLEAR THE ECB\n         BAL   R10,AM24              SWITCH TO 24-BIT MODE\n         WRITE (R4),                 START BSAM I/O                    +\n               SF,                   .. SEQUENTIALLY FORWARD           +\n               (R3),                 .. DCB ADDRESS                    +\n               (R5),                 .. I/O AREA ADDRESS               +\n               (R6),                 .. RECORD SIZE                    +\n               MF=E                  .. EXECUTE FORM\n         BAL   R10,AM31              SWITCH TO 31-BIT MODE\nEXIT0000 DS    0H\n         ITRACE ID=EXIT,             EXITING                           +\n               RDATA1=R15            .. RETURN CODE\n         LM    R0,R14,SAVE24A        RESTORE ALL EXCEPT R15             ASE01680\n         BR    R14                   RETURN TO CALLER                   ASE01700\nAM24     DS    0H\n         LA    R10,0(R10)            CLEAR HIGH BIT(S)\n         BSM   R0,R10                RETURN IN 24-BIT MODE\nAM31     DS    0H\n         LA    R10,0(R10)            CLEAR HIGH BIT(S)\n         O     R10,X80               TURN ON 31-BIT MODE BIT\n         BSM   R0,R10                RETURN IN 24-BIT MODE\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        CONSTANTS                                                   *\n*                                                                    *\n* ------------------------------------------------------------------ *\nX80      DC    A(X'80000000')        31-BIT MODE INDICATOR\nCAMLOC   CAMLST NAME,                EXTRACT VTOC INFO BY DSN          +\n               *,                    .. DATA SET NAME'S ADDRESS        +\n               ,                     .. NO CVOL VOLER                  +\n               *                     .. RETURNED DATA ADDRESS\nCAMLOCL  EQU   *-CAMLOC\nCAMLSTA  CAMLST SEEK,                READ VTOC BY DISK ADDRESS         +\n               *,                    .. DISK ADDRESS'S ADDRESS         +\n               *,                    .. VOLSER'S ADDRESS               +\n               *                     .. RETURNED DATA ADDRESS\nCAMLSTAL EQU   *-CAMLSTA\nCAMLSTN  CAMLST SEARCH,              READ VTOC BY DATASET NAME         +\n               *,                    .. DATASET NAME'S ADDRESS         +\n               *,                    .. VOLSER'S ADDRESS               +\n               *                     .. RETURNED DATA ADDRESS\nCAMLSTNL EQU   *-CAMLSTN\nOPENIL   OPEN  (*,INPUT),MF=L        OPEN INPUT LIST FORM\nOCPLL    EQU   *-OPENIL\nOPENOL   OPEN  (*,OUTPUT),MF=L       OPEN OUTPUT LIST FORM\nCLOSEL   CLOSE (*),MF=L              CLOSE LIST FORM\n* ------------------------------------------------------------------ *\n*        PARAMETER BLOCK                                             *\n* ------------------------------------------------------------------ *\n         FX24PRM DSECT=YES\n* ------------------------------------------------------------------ *\n*        COMMON DATA                                                 *\n* ------------------------------------------------------------------ *\nFXCOMM   DSECT\n         COMMCOMM COMMNAME=FXCOMM\n         COPY   TRENTRY\n         FXPRFX TYPE=DSECT\n         XTRRECD\n* ------------------------------------------------------------------ *\n*        DCB DSECT                                                   *\n* ------------------------------------------------------------------ *\n         DCBD DSORG=PS\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              EQUATES                                               *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         ABCODES\n         COPY REGEQU\n         END  FX24\n./ ADD NAME=TESTUSER 0100-99056-99056-1500-00030-00030-00000-FX-REL1\n\nTESTUSER CSECT\n         COPY  OPTIONS\nTESTUSER AMODE 31\nTESTUSER RMODE ANY\n         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS\n         LR    R12,R15               COPY BASE\n         USING TESTUSER,R12          DEFINE BASE\n         LA    R1,SAVEAREA\n         ST    R13,4(R1)             SAVE CALLER'S SAVE AREA ADDRESS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R1                COPY WORK AREA ADDRESS\n         MVI   PARMCMD,$INQUIRE      SET COMMAND INQUIRE\n         MVC   PARMFX,=CL8'BVFXT1'   SET ENTRY NODE\n         MVC   PARMENDE,=CL8'BVFXT1' SET ENTRY NODE\n         MVC   PARMNBR,=F'65'        SET REQUEST NUMBER\n         MVC   PARMNDE#,=AL2(2)\n         LOAD  EP=FXUSER             LOAD USER INTERFACE MODULE\n         LR    R15,R0                COPY ENTRY POINT\n         LA    R1,USERPARM           POINT TO PARMS\n         BALR  R14,R15               LINK TO FXUSER\n         DC    H'0'                  CAUSE A DUMP\n         LTORG\nSAVEAREA DS    18F\n* ------------------------------------------------------------------- *\n*              PARM LIST                                              *\n* ------------------------------------------------------------------- *\n         USERPARM DSECT=NO\n         COPY REGEQU\n         END  TESTUSER\n./ ADD NAME=VSAMFMT  0100-99056-99056-1500-00421-00421-00000-FX-REL1\n\n         TITLE 'FXFORMAT   MASTER FILE FORMATTER'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: VSAMFMT                                               *\n*                                                                     *\n*   The master file may be either BDAM or a VSAM linear data set.     *\n*                                                                     *\n*   FX expects the master file to be pre-formatted, this module       *\n*   provides this function for the VSAM linear type.                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFXFORMAT CSECT\nFXFORMAT AMODE 31\nFXFORMAT RMODE 24\n         USING REQBLOK,R11           DEFINE BASE\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               COPY BASE ADDRESS\n         USING FXFORMAT,R12          DEFINE BASE\n         LA    R1,SAVEAREA           OUR SAVE AREA ADDRESS\n         ST    R1,8(R13)             CHAIN TO CALLER'S\n         ST    R13,4(R1)             CHAIN CALLERS TO OURS\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         OPEN  (FXIN,INPUT)          OPEN CONTROL STATEMENT FILE\n         OPEN  (FXPRINT,OUTPUT)      OPEN PRINT FILE\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         BAL   R10,HEAD0000          PRINT HEADING\nINIT0010 DS    0H\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         GET   FXIN,CTLSTMT          READ A CONTROL STATEMENT\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         MVC   MSG01TXT(CTLSTMTL),CTLSTMT\n         MVC   PLINE(MSG01L),MSG01   COPY MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         CLI   CTLSTMT,C'*'          COMMENT?\n         BE    INIT0010              YES\n         CLC   RECSSTMT,CTLSTMT      RECORDS STATEMENT?\n         BE    RECS0000              YES\n         MVC   PLINE(MSG02L),MSG02   INVALID STATEMENT\n         OI    STATFLAG,$ERROR       INDICATE ERROR\n         BAL   R10,PRT0000           PRINT ERROR STATEMENT\n         B     INIT0010              READ NEXT STATEMENT\nRECS0000 DS    0H\n         LA    R1,CTLSTMT+L'RECSSTMT FIRST DIGIT IN NUMBER OF RECORDS\n         LA    R2,7                  MAXIMUM NUMBER OF DIGITS\n         MVC   NBRIN,NBRIN-1         INITIALIZE TO ZEROS\nRECS0010 DS    0H\n         CLI   0(R1),C' '            END OF VALUE?\n         BE    RECS0020              YES\n         CLI   0(R1),C'0'            INVALID DIGIT?\n         BL    RECS0030              YES\n         CLI   0(R1),C'9'            INVALID DIGIT?\n         BH    RECS0030              YES\n         MVC   NBRIN(L'NBRIN-1),NBRIN+1   SHIFT LEFT 1 DIGIT\n         MVC   NBRIN+L'NBRIN-1(1),0(R1)   COPY DIGIT\n         LA    R1,1(R1)              NEXT DIGIT\n         BCT   R2,RECS0010           LOOP\n         CLI   0(R1),C' '            BLANK?\n         BNE   RECS0040              TOO MANY DIGITS\nRECS0020 DS    0H\n         PACK  DWORD,NBRIN           PACK NUMBER OF RECORDS\n         CVB   R1,DWORD              CONVERT TO BINARY\n         LTR   R1,R1                 ZERO?\n         BZ    RECS0050              YES.. INVALID\n         ST    R1,DATABLKS           SET NUMBER OF BLOCKS\n         OI    STATFLAG,$RECORDS     NUMBER OF RECORDS HAS BEEN SET\n         B     INIT0010              READ NEXT CONTROL STATEMENT\nRECS0030 DS    0H\n         MVC   PLINE(MSG03L),MSG03   INVALID DIGIT\n         OI    STATFLAG,$ERROR       INDICATE ERROR\n         BAL   R10,PRT0000           PRINT ERROR STATEMENT\n         B     INIT0010              READ NEXT STATEMENT\nRECS0040 DS    0H\n         MVC   PLINE(MSG04L),MSG04   TOO MANY DIGITS\n         OI    STATFLAG,$ERROR       INDICATE ERROR\n         BAL   R10,PRT0000           PRINT ERROR STATEMENT\n         B     INIT0010              READ NEXT STATEMENT\nRECS0050 DS    0H\n         MVC   PLINE(MSG05L),MSG05   RECORDS=0\n         OI    STATFLAG,$ERROR       INDICATE ERROR\n         BAL   R10,PRT0000           PRINT ERROR STATEMENT\n         B     INIT0010              READ NEXT STATEMENT\nPROC0000 DS    0H\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         TM    STATFLAG,$ERROR       ERROR FLAG ON?\n         BO    ERR0010               YES.. EXIT\n         TM    STATFLAG,$RECORDS     NUMBER OF RECORDS SET?\n         BNO   ERR0050               NO..\n         MVC   MSG07FNC,IDENTIFY     LAST DIV FUNCTION REQUESTED\n         DIV   IDENTIFY,             CONNECT TO MASTER FILE            +\n               TYPE=DA,              .. PERMANENT TYPE                 +\n               ID=OBJID,             .. RETURNED OBJECT ID             +\n               DDNAME=MASTER         .. DIV DATASET'S DD NAME\n         STH   R15,RC                SAVE RETURN CODE\n         LTR   R15,R15               SUCESSFUL?\n         BNZ   ERR0020               NO\n         OI    STATFLAG,$STATID      IDENTIFY COMPLETE\n         MVC   MSG07FNC,ACCESS       LAST FUNCTION ATTEMPTED\n         DIV   ACCESS,               CONNECT TO DIV OBJECT             +\n               ID=OBJID,             .. OBJECT'S NAME                  +\n               MODE=UPDATE           .. WE'RE GOING TO UPDATE IT\n         STH   R15,RC                SAVE RETURN CODE\n         LTR   R15,R15               SUCESSFUL?\n         BNZ   ERR0020               NO\n         OI    STATFLAG,$STATACC     ACCESS COMPLETE\n         MVC   MSG09FNC,CREATE       FUNCTION ATTEMPTED\n         DSPSERV CREATE,             CREATE A MASTER FILE DATASPACE    +\n               NAME=MSTRDATA,        .. DATASPACE'S NAME               +\n               STOKEN=DSTOKEN,       .. RETURN SPACE TOKEN             +\n               BLOCKS=DATABLKS       .. DATA SPACE SIZE IN 4K BLOCKS\n         STH   R15,RC                SAVE RETURN CODE\n         LTR   R15,R15               SUCESSFUL?\n         BNZ   ERR0040               NO\n         OI    STATFLAG,$STATCRE     DATASPACE CREATE COMPLETE\n         MVC   MSG08FNC,ADD          FUNCTION ATTEMPTED\n         ALESERV ADD,                ADD AN ENTRY TO ACCESS LIST       +\n               STOKEN=DSTOKEN,       .. DATA SPACE'S TOKEN             +\n               ALET=DSALET           .. RETURNED ALET\n         STH   R15,RC                SAVE RETURN CODE\n         LTR   R15,R15               SUCESSFUL?\n         BNZ   ERR0030               NO\n         OI    STATFLAG,$STATADD     ALET ADD COMPLETE\n         MVC   MSG07FNC,MAP          FUNCTION ATTEMPTED\n         DIV   MAP,                  ASSOCIATE DIV OBJECT WITH STORAGE +\n               ID=OBJID,             .. DIV OBJECT NAME                +\n               AREA=ZERO,            .. BASE ADDRESS IS ZERO           +\n               OFFSET=*,             .. START WITH FIRST BLOCK         +\n               SPAN=DATABLKS,        .. NUMBER OF BLOCKS IN DATASET    +\n               STOKEN=DSTOKEN        .. DATASPACE'S TOKEN\n         STH   R15,RC                SAVE RETURN CODE\n         LTR   R15,R15               SUCESSFUL?\n         BNZ   ERR0020               NO\n         OI    STATFLAG,$STATMAP     MAP COMPLETE\n         L     R9,DATABLKS           NUMBER OF DATA BLOCKS\n         MH    R9,H4096              TIMES SIZE OF EACH BLOCK\n         SR    R8,R8                 CLEAR REGISTER\n         D     R8,=A(REQBLOKL)       CALCULATE NUMBER OF REQUESTS\n         CVD   R9,DWORD              CONVERT TO DECIMAL\n         MVC   MSG10NBR,=X'4020202020202120'\n         ED    MSG10NBR,DWORD+4      NUMBER OF REQUESTS IN MASTER FILE\n         MVC   PLINE(MSG10L),MSG10   COPY MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         SR    R11,R11               FIRST RECORD IS AT ADDRESS 0\n         LAM   R2,R2,DSALET          DATASPACE'S ALET\n         LAM   R11,R11,DSALET        DATASPACE'S ALET\n         SAC   512                   SWITCH TO AR MODE\nMSTR0010 DS    0H\n         AP    RECCNT,P1             ADD 1 TO RECORD COUNTER\n         MVC   RECWORK,=X'F02020202021'\n         ED    RECWORK,RECCNT        EDIT RECORD NUMBER\n         MVC   REQREC#,RECWORK+1     SET RECORD NUMBER\n         MINIT BLANKS,P0,0,R2        INITIALIZE REMAINING FIELDS\n         LTR   R11,R11               CONTROL RECORD?\n         BNZ   MSTR0020              NO\n         MVI   REQSTAT,$REQCNTL      INDICATE THIS IS CONTROL RECORD\nMSTR0020 DS    0H\n         LA    R11,REQBLOKL(R11)     NEXT BLOCK\n         BCT   R9,MSTR0010           INITIALIZE ALL RECORDS\n         SAC   0                     RETURN TO PRIMARY MODE\n         DIV   SAVE,ID=OBJID         SAVE THE DATA\n         B     EXIT0000              EXIT\nPRT0000  DS    0H\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         PUT   FXPRINT,PLINE         WRITE TO FXPRINT\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         AP    LINECT,P1             ADD 1 TO LINE COUNT\n         CLI   PLINE,C' '            SINGLE SPACE?\n         BE    PRT0010               YES\n         AP    LINECT,P1             ADD 1 TO LINE COUNT\n         CLI   PLINE,C'0'            DOUBLE SPACE?\n         BE    PRT0010               YES\n         AP    LINECT,P1             ADD 1 TO LINE COUNT\nPRT0010  DS    0H\n         MVC   PLINE,PLINE-1         CLEAR PRINT AREA\n         CP    LINECT,MAXLINE        TIME FOR HEADING?\n         BLR   R10                   NO\nHEAD0000 DS    0H\n         AP    PAGECT,P1             ADD 1 TO PAGE COUNT\n         MVC   HEADPAGE,=X'40202120' INITIALIZE EDIT WORD\n         ED    HEADPAGE,PAGECT       EDIT PAGE NUMBER\n         MVC   PLINE(HEADINGL),HEADING\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         PUT   FXPRINT,PLINE         PRINT HEADING\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         MVC   PLINE,PLINE-1         CLEAR PRINT I/O AREA\n         ZAP   LINECT,P1             RESET LINE COUNT\n         BR    R10\n* ------------------------------------------------------------------- *\n*        ERROR ROUTINES                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVC   PLINE(MSG06L),MSG06   SET MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         B     EXIT0000              AND EXIT\nERR0020  DS    0H\n         ST    R1,DWORD              SAVE RETURN CODE\n         UNPK  MSG07RC(5),DWORD+6(2) UNPACK RETURN CODE\n         MVZ   MSG07RC,HEX0000       TURN OFF ZONES\n         TR    MSG07RC,HEXCHAR       TRANSLATE TO PRINTABLE\n         MVI   MSG07RC+4,C' '        RESTORE BLANK\n         MVC   PLINE(MSG07L),MSG07   COPY MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         B     EXIT0000              AND EXIT\nERR0030  DS    0H\n         ST    R1,DWORD              SAVE RETURN CODE\n         UNPK  MSG08RC(5),DWORD+6(2) UNPACK RETURN CODE\n         MVZ   MSG08RC,HEX0000       TURN OFF ZONES\n         TR    MSG08RC,HEXCHAR       TRANSLATE TO PRINTABLE\n         MVI   MSG08RC+4,C' '        RESTORE BLANK\n         MVC   PLINE(MSG08L),MSG08   COPY MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         B     EXIT0000              AND EXIT\nERR0040  DS    0H\n         ST    R1,DWORD              SAVE RETURN CODE\n         UNPK  MSG09RC(5),DWORD+6(2) UNPACK RETURN CODE\n         MVZ   MSG09RC,HEX0000       TURN OFF ZONES\n         TR    MSG09RC,HEXCHAR       TRANSLATE TO PRINTABLE\n         MVI   MSG09RC+4,C' '        RESTORE BLANK\n         MVC   PLINE(MSG09L),MSG09   COPY MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         B     EXIT0000              AND EXIT\nERR0050  DS    0H\n         MVC   PLINE(MSG11L),MSG11   SET MESSAGE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         B     ERR0010               PRINT SECONDARY MESSAGE\n* ------------------------------------------------------------------- *\n*        EXIT                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         TM    STATFLAG,$STATMAP     MAP FUNCTION COMPLETE?\n         BNO   EXIT0010              NO\n         NI    STATFLAG,255-$STATMAP PREVENT LOOP DURING EXIT\n         MVC   MSG07FNC,UNMAP        FUNCTION ATTEMPTED\n         DIV   UNMAP,                UNMAP DIV OBJECT                  +\n               ID=OBJID,             .. DIV OBJECT NAME                +\n               AREA=ZERO,            .. BASE ADDRESS IS ZERO           +\n               STOKEN=DSTOKEN        .. DATASPACE'S TOKEN\n         STH   R15,RC                SAVE RETURN CODE\n         LTR   R15,R15               SUCESSFUL?\n         BNZ   ERR0020               NO\nEXIT0010 DS    0H\n         TM    STATFLAG,$STATACC     ACCESS FUNCTION COMPLETE?\n         BNO   EXIT0020              NO\n         NI    STATFLAG,255-$STATACC PREVENT LOOP DURING EXIT\n         MVC   MSG07FNC,UNACC        FUNCTION ATTEMPTED\n         DIV   UNACCESS,             RELEASE ACCESS                    +\n               ID=OBJID              .. DIV OBJECT NAME\n         STH   R15,RC                SAVE RETURN CODE\n         LTR   R15,R15               SUCESSFUL?\n         BNZ   ERR0020               NO\nEXIT0020 DS    0H\n         TM    STATFLAG,$STATID      IDENTIFY FUNCTION COMPLETE?\n         BNO   EXIT0030              NO\n         NI    STATFLAG,255-$STATID  PREVENT LOOP DURING EXIT\n         MVC   MSG07FNC,UNID         FUNCTION ATTEMPTED\n         DIV   UNIDENTIFY,           DISCONNECT FROM OBJECT            +\n               ID=OBJID              .. DIV OBJECT NAME\n         STH   R15,RC                SAVE RETURN CODE\n         LTR   R15,R15               SUCESSFUL?\n         BNZ   ERR0020               NO\nEXIT0030 DS    0H\n         TM    STATFLAG,$STATADD     ALET FUNCTION COMPLETE?\n         BNO   EXIT0040              NO\n         NI    STATFLAG,255-$STATADD  PREVENT LOOP DURING EXIT\n         MVC   MSG08FNC,DLETALET     FUNCTION ATTEMPTED\n         ALESERV DELETE,             DELETE ALET ENTRY FOR DATASPACE   +\n               ALET=DSALET           .. ALET TO DELETE\n         STH   R15,RC                SAVE RETURN CODE\n         LTR   R15,R15               SUCESSFUL?\n         BNZ   ERR0030               NO\nEXIT0040 DS    0H\n         TM    STATFLAG,$STATCRE     DATASPACE CREATED?\n         BNO   EXIT0050              NO\n         NI    STATFLAG,255-$STATCRE PREVENT LOOP DURING EXIT\n         MVC   MSG09FNC,DLETDSPC     FUNCTION ATTEMPTED\n         DSPSERV DELETE,             DELETE DATASPACE                  +\n               STOKEN=DSTOKEN        .. DATASPACE'S SPACE TOKEN\n         STH   R15,RC                SAVE RETURN CODE\n         LTR   R15,R15               SUCESSFUL?\n         BNZ   ERR0040               NO\nEXIT0050 DS    0H\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         CLOSE FXIN\n         CLOSE FXPRINT\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\nAM24     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         BSM   R0,R15                RETURN IN 24-BIT MODE\nAM31     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         O     R15,X80               TURN ON 31-BIT MODE\n         BSM   R0,R15                RETURN IN 31-BIT MODE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDWORD    DC    D'0'\nSAVEAREA DS    18F\nX80      DC    A(X'80000000')\nZERO     DC    F'0'\nOBJSIZE  DC    F'0'\nDSALET   DC    F'0'\nDATABLKS DC    F'0'\nH4096    DC    H'4096'\nRC       DC    H'0'\nOBJID    DC    CL8' '\nDSTOKEN  DS    CL8' '\nFNC      DC    CL8' '\nRECCNT   DC    PL3'0'\nLINECT   DC    PL2'0'\nPAGECT   DC    PL2'0'\nP0       DC    P'0'\nP1       DC    P'1'\nMAXLINE  DC    P'&MAXL'\nRECWORK  DC    CL6' '\nSTATFLAG DC    X'00'\n$STATID  EQU   X'80'\n$STATACC EQU   X'40'\n$STATCRE EQU   X'20'\n$STATADD EQU   X'10'\n$STATMAP EQU   X'08'\n$RECORDS EQU   X'02'\n$ERROR   EQU   X'01'\nHEX0000  DC    8X'00'\nBLANKS   DC    CL44' '\nHEXCHAR  DC    C'0123456789ABCDEF'\n         SPACE 1\n         DC    C'0'\nNBRIN    DC    CL7'0000000'\n         SPACE 1\n         DC    C' '\nPLINE    DC    CL133' '\nCTLSTMT  DC    CL80' '\nCTLSTMTL EQU   *-CTLSTMT\n         SPACE 1\nHEADING  DS    0C\n         DC    CL50' '\n         DC    C'FX MASTER FILE FORMATTER'\n         DC    CL50' '\n         DC    C'PAGE'\nHEADPAGE DC    CL4' '\nHEADINGL EQU   *-HEADING\nMSG01    DS    0C\n         DC    C' FXFORMAT01I   CONTROL STATEMENT:'\nMSG01TXT DS    (CTLSTMTL)C\nMSG01L   EQU   *-MSG01\nMSG02    DC    C' FXFORMAT02E * INVALID CONTROL STATEMENT'\nMSG02L   EQU   *-MSG02\nMSG03    DC    C' FXFORMAT03E * INVALID DIGIT IN RECORDS VALUE'\nMSG03L   EQU   *-MSG03\nMSG04    DC    C' FXFORMAT04E * TOO MANY DIGITS IN RECORDS VALUE'\nMSG04L   EQU   *-MSG04\nMSG05    DC    C' FXFORMAT05E * RECORDS VALUE MAY NOT BE ZERO'\nMSG05L   EQU   *-MSG05\nMSG06    DC    C'-FXFORMAT06E * ERROR(S) DETECTED, EXECUTION ABORTED'\nMSG06L   EQU   *-MSG06\nMSG07    DS    0C\n         DC    C' FXFORMAT07E * DIV FUNCTION '\nMSG07FNC DC    CL8' '\n         DC    C' FAILED, RC='\nMSG07RC  DC    CL4' '\n         DC    C' '\nMSG07L   EQU   *-MSG07\nMSG08    DS    0C\n         DC    C' FXFORMAT08E * ALESERV FUNCTION '\nMSG08FNC DC    CL8' '\n         DC    C' FAILED, RC='\nMSG08RC  DC    CL4' '\n         DC    C' '\nMSG08L   EQU   *-MSG08\nMSG09    DS    0C\n         DC    C' FXFORMAT09E * DSPSERV FUNCTION '\nMSG09FNC DC    CL8' '\n         DC    C' FAILED, RC='\nMSG09RC  DC    CL4' '\n         DC    C' '\nMSG09L   EQU   *-MSG09\nMSG10    DS    0C\n         DC    C' FXFORMAT10I   NUMBER OF REQUESTS IN MASTER FILE IS'\nMSG10NBR DC    CL8' '\nMSG10L   EQU   *-MSG10\nMSG11    DC    C' FXFORMAT11E   NUMBER OF RECORDS NOT GIVEN'\nMSG11L   EQU   *-MSG11\nRECSSTMT DC    C'RECORDS='\nIDENTIFY DC    CL8'IDENTIFY'\nACCESS   DC    CL8'ACCESS'\nCREATE   DC    CL8'CREATE'\nADD      DC    CL8'ADD'\nMAP      DC    CL8'MAP'\nUNMAP    DC    CL8'UNMAP'\nUNACC    DC    CL8'UNACC'\nUNID     DC    CL8'UNID'\nDLETALET DC    CL8'DLETALET'\nDLETDSPC DC    CL8'DLETDSPC'\nMASTER   DC    AL1(6),CL8'MASTER'\nMSTRDATA DC    CL8'MSTRDATA'\nFXIN     DCB   DDNAME=FXIN,             CONTROL STATEMENT DCB          +\n               DSORG=PS,                .. SEQUENTIAL                  +\n               LRECL=80,                .. 80 BYTE RECORDS             +\n               RECFM=FB,                .. FIXED, BLOCKED RECORDS      +\n               EODAD=PROC0000,          .. END OF DATA                 +\n               MACRF=GM                 .. GET/MOVE MODE\nFXPRINT  DCB   DDNAME=FXPRINT,          SYSOUT DCB                     +\n               DSORG=PS,                .. SEQUENTIAL                  +\n               LRECL=L'PLINE,           .. RECORD SIZE                 +\n               RECFM=FBA,               .. FIXED, BLOCKED, ASA         +\n               MACRF=PM\n         LTORG\n         REQBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n./ ADD NAME=VSAMMSTR 0100-99056-99056-1500-00378-00378-00000-FX-REL1\n\n         TITLE 'FXSMSTR   MASTER FILE I/O'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: FXSMSTR                                               *\n*                                                                     *\n*   The master file may be either a BDAM or a VSAM linear data set.   *\n*   If the master file is VSAM linear, this module provides the       *\n*   \"access method\".  A data space is created and is associated with  *\n*   the data set.                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TITLE  'Master file access (VSAM LINEAR)'\nFXSMSTR  CSECT\nFXSMSTR  AMODE 31\nFXSMSTR  RMODE ANY\n         USING FXSMSTR,R12           DEFINE BASE\n         USING FXSCOMM,R11           DEFINE BASE\n         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS\n         LR    R12,R15               COPY BASE ADDRESS\n         B     MSTR000A\n         DC    ((PFXMODNM-MODPRFX)-(*-FXSMSTR))X'00'\n         DC    CL8'MSTRVSAM'         MODULE NAME\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMSTR000A DS    0H\n         USING MSTRREQ,R9            DEFINE BASE\n         LR    R9,R1                 SAVE REQUEST BLOCK'S ADDRESS\n         ICM   R1,15,COMMIOWK        WORK AREA ACQUIRED?\n         BNZ   MSTR0000              YES\n         GETMAIN RU,                 ACQUIRE WORK AREA                 +\n               LV=WKL,               .. SIZE                           +\n               LOC=ANY               .. FROM ANY AREA\n         ST    R1,COMMIOWK           SAVE WORK AREA ADDRESS\n         LR    R2,R1                 SAVE WORK AREA ADDRESS\n         LR    R0,R1                 COPY ADDRESS\n         LA    R1,WKL                LENGTH\n         SR    R14,R14               CLEAR ADDRESS 2\n         SR    R15,R15               CLEAR LENGTH 2\n         MVCL  R0,R14                CLEAR WORK AREA\n         ST    R13,4(R2)             SAVE CALLER'S SAVE AREA ADDRESS\n         ST    R2,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R2                SET WORK AREA BASE\n         USING WK,R13                DEFINE BASE\n         ITRACE ID=INIT\n         MVI   WKFLAG,0              INITIALIZE STATUS FLAGS\n         MVI   PRTCC,C' '            INITIALIZE PRINT I/O AREA\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         CLI   MSTRCMD,$MSTRCLS      END-OF-JOB?\n         BE    EXIT0000              YES\n         MVC   WKDSP(DSPL),DSPI      INITIALIZE DSPSERV LIST FORM\n         MVC   WKALESRV(ALESRVL),ALESRVI\n         ITRACE ID=IDENTIFY\n         MVC   WKFNC,IDENTIFY        LAST DIV FUNCTION REQUESTED\n         XC    WKDIV(DIVL),WKDIV     CLEAR PARMLIST IN WORK AREA\n         DIV   IDENTIFY,             IDENTIFY DIV OBJECT               +\n               TYPE=DA,              .. PERMANENT TYPE                 +\n               DDNAME=MASTER,        .. DDNAME                         +\n               ID=WKOBJID,           .. DIV OBJECT ID RETURNED         +\n               MF=(E,WKDIV)          .. EXECUTE FORM, LIST FORM ADDRESS\n         STH   R15,WKRC              SAVE RETURN CODE\n         LTR   R15,R15               SUCESSFUL?\n         BNZ   ERR0010               NO\n         OI    WKFLAG,$WKID          IDENTIFY COMPLETE\n         ITRACE ID=ACCESS\n         MVC   WKFNC,ACCESS          LAST FUNCTION ATTEMPTED\n         XC    WKDIV(DIVL),WKDIV     CLEAR PARMLIST IN WORK AREA\n         DIV   ACCESS,               CONNECT TO DIV OBJECT             +\n               ID=WKOBJID,           .. OBJECT'S NAME                  +\n               MODE=UPDATE,          .. WE'RE GOING TO UPDATE IT       +\n               SIZE=WKOBJSZ,         .. REQUEST SIZE TO BE RETURNED    +\n               MF=(E,WKDIV)          .. EXECUTE FORM, LIST FORM ADDRESS\n         STH   R15,WKRC              SAVE RETURN CODE\n         LTR   R15,R15               SUCESSFUL?\n         BNZ   ERR0010               NO\n         L     R1,WKOBJSZ            NUMBER OF BLOCKS IN MASTER FILE\n         MH    R1,=Y(4096/REQBLOKL)  NUMBER OF RECORDS PER BLOCK\n         ST    R1,COMMRECS           SET MAXIMUM RECORD IN COMM AREA\n         OI    WKFLAG,$WKACC         ACCESS COMPLETE\n         MVC   WKFNC,CREATE          FUNCTION ATTEMPTED\n         ITRACE ID=CREATE\n         DSPSERV CREATE,             CREATE A MASTER FILE DATASPACE    +\n               NAME=MSTRDATA,        .. DATASPACE'S NAME               +\n               STOKEN=WKSTOKEN,      .. RETURN SPACE TOKEN             +\n               BLOCKS=WKOBJSZ,       .. DATA SPACE SIZE IN 4K BLOCKS   +\n               MF=(E,WKDSP)\n         STH   R15,WKRC              SAVE RETURN CODE\n         LTR   R15,R15               SUCESSFUL?\n         BNZ   ERR0020               NO\n         OI    WKFLAG,$WKCRE         DATASPACE CREATE COMPLETE\n         ITRACE ID=ALETADD\n         MVC   WKFNC,ADD             FUNCTION ATTEMPTED\n         ALESERV ADD,                ADD AN ENTRY TO ACCESS LIST       +\n               STOKEN=WKSTOKEN,      .. DATA SPACE'S TOKEN             +\n               ALET=WKALET,          .. RETURNED ALET                  +\n               MF=(E,WKALESRV)       .. EXECUTE FORM, LIST FORM ADDRESS\n         STH   R15,WKRC              SAVE RETURN CODE\n         LTR   R15,R15               SUCESSFUL?\n         BNZ   ERR0020               NO\n         OI    WKFLAG,$WKALET        ALET COMPLETE\n         MVC   WKFNC,MAP             FUNCTION ATTEMPTED\n         ITRACE ID=MAP\n         XC    WKDIV(DIVL),WKDIV     CLEAR PARMLIST IN WORK AREA\n         DIV   MAP,                  ASSOCIATE DIV OBJECT WITH STORAGE +\n               ID=WKOBJID,           .. DIV OBJECT NAME                +\n               STOKEN=WKSTOKEN,      .. DATASPACE'S TOKEN              +\n               AREA=ZERO,            .. STARTING AT ADDRESS ZERO       +\n               OFFSET=*,             .. STARTING WITH BLOCK ZERO       +\n               MF=(E,WKDIV)          .. EXECUTE FORM, LIST FORM ADDRESS\n         STH   R15,WKRC              SAVE RETURN CODE\n         LTR   R15,R15               SUCESSFUL?\n         BNZ   ERR0010               NO\n         OI    WKFLAG,$WKMAP         MAP COMPLETE\n         B     MSTR0010\nMSTR0000 DS    0H\n         ST    R13,4(R1)             SAVE CALLER'S SAVE AREA ADDRESS\n         ST    R1,8(R13)             CHAIN OUR WORK AREA TO CALLER'S\n         LR    R13,R1                SET WORK AREA BASE\nMSTR0010 DS    0H\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R9,            .. ADDRESS OF REQUEST BLOCK       +\n               DATA2=MSTRREQ         .. DATA IN REQUEST BLOCK\n         CLI   MSTRCMD,$MSTRCLS      SHUTDOWN?\n         BE    EXIT0000              YES.. EXIT\n         CLI   MSTRCMD,$MSTROPN      OPEN?\n         BE    EXIT0060              YES.. EXIT\nMSTR0020 DS    0H\n         SR    R2,R2                 CLEAR REGISTER\n         ICM   R2,3,MSTRREC#         RECORD NUMBER REFERENCED\n         MH    R2,=Y(REQBLOKL)       DISPLACEMENT TO RECORD REFERENCED\n         LAM   R2,R2,WKALET          DATASPACE'S ALET\n         LA    R3,REQBLOKL           DATA LENGTH\n         LA    R4,MSTRRECD           USER'S I/O AREA ADDRESS\n         LR    R5,R3                 DATA LENGTH\n         CLI   MSTRCMD,$MSTRRD       READ A RECORD?\n         BE    MSTR0030              YES\n         CLI   MSTRCMD,$MSTRWRT      WRITE A RECORD?\n         BE    MSTR0040              YES\n         ABEND $U0006,DUMP,,USER\nMSTR0030 DS    0H\n         ITRACE ID=READ\n         SAC   512                   SWITCH TO AR MODE\n         MVCL  R4,R2                 COPY DATA TO USER\n         SAC   0                     RETURN TO PRIMARY MODE\n         B     EXIT0060              AND EXIT\nMSTR0040 DS    0H\n         ITRACE ID=WRITE\n         SAC   512                   SWITCH TO AR MODE\n         MVCL  R2,R4                 COPY DATA TO DATASPACE\n         SAC   0                     RETURN TO PRIMARY MODE\n         XC    WKDIV(DIVL),WKDIV     CLEAR PARMLIST IN WORK AREA\n         DIV   SAVE,                 SAVE CHANGES                      +\n               ID=WKOBJID,           .. DIV OBJECT'S NAME              +\n               MF=(E,WKDIV)          .. EXECUTE FORM, LIST FORM ADDRESS\n         STH   R15,WKRC              SAVE RETURN CODE\n         LTR   R15,R15               SAVE SUCCESSFUL?\n         BNZ   ERR0010               NO\n         B     EXIT0060              EXIT\n* ------------------------------------------------------------------- *\n*        ERROR ROUTINES                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=DIVERROR,         DIV ERROR                         +\n               DATA1=WKFNC,          .. FUNCTION ATTEMPTED             +\n               RDATA2=R15            .. RETURN CODE\n         MVC   PRTMSGID(MSG01L),MSG01\n         MVC   PRTMSGID+(MSG01-MSG01F)(L'MSG01F),WKFNC\n         UNPK  PRTMSGID+(MSG01-MSG01R)(5),WKRC(3)\n         MVZ   PRTMSGID+(MSG01-MSG01R)(4),HEX0000\n         TR    PRTMSGID+(MSG01-MSG01R)(4),HEXCHAR\n         MVI   PRTMSGID+(MSG01-MSG01R)+4,C' '\n         BAL   R8,PRT0000            PRINT THE MESSAGE\n         ABEND $U0007,DUMP,,USER\nERR0020  DS    0H\n         ITRACE ID=DSPERROR,         DIV ERROR                         +\n               DATA1=WKFNC,          .. FUNCTION ATTEMPTED             +\n               RDATA2=R15            .. RETURN CODE\n         MVC   PRTMSGID(MSG02L),MSG02\n         MVC   PRTMSGID+(MSG02-MSG02F)(L'MSG02F),WKFNC\n         UNPK  PRTMSGID+(MSG02-MSG02R)(5),WKRC(3)\n         MVZ   PRTMSGID+(MSG02-MSG02R)(4),HEX0000\n         TR    PRTMSGID+(MSG02-MSG02R)(4),HEXCHAR\n         MVI   PRTMSGID+(MSG02-MSG02R)+4,C' '\n         BAL   R8,PRT0000            PRINT THE MESSAGE\n         ABEND $U0010,DUMP,,USER\nERR0030  DS    0H\n         ITRACE ID=ALEERROR,         DIV ERROR                         +\n               DATA1=WKFNC,          .. FUNCTION ATTEMPTED             +\n               RDATA2=R15            .. RETURN CODE\n         MVC   PRTMSGID(MSG03L),MSG03\n         MVC   PRTMSGID+(MSG03-MSG03F)(L'MSG03F),WKFNC\n         UNPK  PRTMSGID+(MSG03-MSG03R)(5),WKRC(3)\n         MVZ   PRTMSGID+(MSG03-MSG03R)(4),HEX0000\n         TR    PRTMSGID+(MSG03-MSG03R)(4),HEXCHAR\n         MVI   PRTMSGID+(MSG03-MSG03R)+4,C' '\n         BAL   R8,PRT0000            PRINT THE MESSAGE\n         ABEND $U0011,DUMP,,USER\n* ------------------------------------------------------------------- *\n*        PRINTING                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         FXCALL PRTQ,PRINT           ADD REQUEST TO PRINT QUEUE\n         BR    R8                    RETURN\n* ------------------------------------------------------------------- *\n*        EXIT                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         TM    WKFLAG,$WKMAP         MAP FUNCTION COMPLETE?\n         BNO   EXIT0010              NO\n         NI    WKFLAG,255-$WKMAP     PREVENT LOOP DURING EXIT\n         MVC   WKFNC,UNMAP           FUNCTION ATTEMPTED\n         ITRACE ID=UNMAP\n         XC    WKDIV(DIVL),WKDIV     CLEAR PARMLIST IN WORK AREA\n         DIV   UNMAP,                UNMAP DIV OBJECT                  +\n               ID=WKOBJID,           .. DIV OBJECT NAME                +\n               AREA=ZERO,            .. STARTING AT ADDRESS ZERO       +\n               STOKEN=WKSTOKEN,      .. DATASPACE'S TOKEN              +\n               MF=(E,WKDIV)          .. EXECUTE FORM, LIST FORM ADDRESS\n         STH   R15,WKRC              SAVE RETURN CODE\n         LTR   R15,R15               SUCESSFUL?\n         BNZ   ERR0010               NO\nEXIT0010 DS    0H\n         TM    WKFLAG,$WKACC         ACCESS FUNCTION COMPLETE?\n         BNO   EXIT0020              NO\n         NI    WKFLAG,255-$WKACC     PREVENT LOOP DURING EXIT\n         MVC   WKFNC,UNACC           FUNCTION ATTEMPTED\n         ITRACE ID=UNACC\n         XC    WKDIV(DIVL),WKDIV     CLEAR PARMLIST IN WORK AREA\n         DIV   UNACCESS,             RELEASE ACCESS                    +\n               ID=WKOBJID,           .. DIV OBJECT NAME                +\n               MF=(E,WKDIV)          .. EXECUTE FORM, LIST FORM ADDRESS\n         STH   R15,WKRC              SAVE RETURN CODE\n         LTR   R15,R15               SUCESSFUL?\n         BNZ   ERR0010               NO\nEXIT0020 DS    0H\n         TM    WKFLAG,$WKID          ACCESS FUNCTION COMPLETE?\n         BNO   EXIT0030              NO\n         NI    WKFLAG,255-$WKID      PREVENT LOOP DURING EXIT\n         MVC   WKFNC,UNID            FUNCTION ATTEMPTED\n         ITRACE ID=UNID\n         XC    WKDIV(DIVL),WKDIV     CLEAR PARMLIST IN WORK AREA\n         DIV   UNIDENTIFY,           DISCONNECT FROM OBJECT            +\n               ID=WKOBJID,           .. DIV OBJECT NAME                +\n               MF=(E,WKDIV)          .. EXECUTE FORM, LIST FORM ADDRESS\n         STH   R15,WKRC              SAVE RETURN CODE\n         LTR   R15,R15               SUCESSFUL?\n         BNZ   ERR0010               NO\nEXIT0030 DS    0H\n         TM    WKFLAG,$WKALET        ALET FUNCTION COMPLETE?\n         BNO   EXIT0040              NO\n         NI    WKFLAG,255-$WKALET    PREVENT LOOP DURING EXIT\n         MVC   WKFNC,DLETALET        FUNCTION ATTEMPTED\n         ALESERV DELETE,             DELETE ALET ENTRY FOR DATASPACE   +\n               ALET=WKALET,          .. ALET TO DELETE                 +\n               MF=(E,WKALESRV)       .. EXECUTE FORM, LIST FORM ADDRESS\n         STH   R15,WKRC              SAVE RETURN CODE\n         LTR   R15,R15               SUCESSFUL?\n         BNZ   ERR0030               NO\nEXIT0040 DS    0H\n         TM    WKFLAG,$WKCRE         DATASPACE CREATED?\n         BNO   EXIT0050              NO\n         NI    WKFLAG,255-$WKCRE     PREVENT LOOP DURING EXIT\n         MVC   WKFNC,DLETDSPC        FUNCTION ATTEMPTED\n         DSPSERV DELETE,             DELETE DATASPACE                  +\n               STOKEN=WKSTOKEN,      .. DATASPACE'S SPACE TOKEN        +\n               MF=(E,WKDSP)          .. EXECUTE FORM, LIST FORM ADDRESS\n         STH   R15,WKRC              SAVE RETURN CODE\n         LTR   R15,R15               SUCESSFUL?\n         BNZ   ERR0020               NO\nEXIT0050 DS    0H\n         ITRACE ID=EXIT\n         LR    R1,R13                COPY WORK AREA ADDRESS\n         L     R13,4(R13)            RESTORE CALLER'S SAVE AREA ADDRESS\n         FREEMAIN RU,A=(1),LV=WKL    FREEMAIN WORK AREA\n         XC    COMMIOWK,COMMIOWK     CLEAR ADDRESS IN COMM AREA\n         B     EXIT0070\nEXIT0060 DS    0H\n         ITRACE ID=EXIT              EXITING MASTER FILE I/O MODULE\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\nEXIT0070 DS    0H\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nZERO     DC    F'0'\nHEX0000  DC    8X'00'\nHEXCHAR  DC    C'0123456789ABCDEF'\nIDENTIFY DC    CL8'IDENTIFY'\nACCESS   DC    CL8'ACCESS'\nCREATE   DC    CL8'CREATE'\nADD      DC    CL8'ADD'\nMAP      DC    CL8'MAP'\nUNMAP    DC    CL8'UNMAP'\nUNACC    DC    CL8'UNACC'\nUNID     DC    CL8'UNID'\nDLETALET DC    CL8'DLETALET'\nDLETDSPC DC    CL8'DLETDSPC'\nMSTRDATA DC    CL8'MSTRDATA'         NAME OF MASTER FILE DATASPACE\nMASTER   DC    AL1(6),CL8'MASTER'    MASTER FILE DDNAME\nDIVI     DIV   IDENTIFY,             CONNECT TO MASTER FILE            +\n               TYPE=DA,              .. PERMANENT TYPE                 +\n               ID=*,                 .. RETURNED OBJECT ID             +\n               DDNAME=MASTER,        .. DIV DATASET'S DD NAME          +\n               MF=L                  .. MACRO FORM\nDIVL     EQU   *-DIVI                DIV FUNCTIONS LIST FORM\nDSPI     DSPSERV MF=(L,DSP)          DATASPACE SERVICES LIST FORM\nALESRVI  ALESERV MF=L\nALESRVL  EQU   *-ALESRVI\nMSG01    DS    0C\n         DC    CL11'FXSMSTR01E'\n         DC    C'DIV FUNCTION'\nMSG01F   DC    CL8' '\n         DC    C' FAILED, R15='\nMSG01R   DC    CL4' '\n         DC    C' '\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'FXSMSTR02E'\n         DC    C'DSPSERV FUNCTION FAILED '\nMSG02F   DC    CL8' '\n         DC    C' FAILED, R15='\nMSG02R   DC    CL4' '\n         DC    C' '\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'FXSMSTR03E'\n         DC    C'ALESERV FUNCTION '\nMSG03F   DC    CL8' '\n         DC    C' FAILED, R15='\nMSG03R   DC    CL4' '\n         DC    C' '\nMSG03L   EQU   *-MSG03\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWK       DSECT\nWKSAVE   DS    18F                   REGISTER SAVE AREA\nWKDIV    DS    (DIVL)X               DIV LIST FORM\nWKDSP    DS    (DSPL)X               DSPSERV LIST FORM\nWKALESRV DS    (ALESRVL)X            ALESERV LIST FORM\nWKOBJSZ  DS    F                     DIV OBJECT SIZE IN PAGES\nWKALET   DS    F                     DATASPACE'S ALET\nWKRC     DS    H                     DIV RETURN CODE\nWKSTOKEN DS    CL8                   DATASPACE'S SPACE TOKEN\nWKOBJID  DS    CL8                   GENERATED DIV OBJECT NAME\nWKFNC    DS    CL8                   LAST DIV OR DSPSERV FUNCTION\nWKFLAG   DS    X                     STATUS FLAGS\n$WKID    EQU   X'80'                 .. IDENTIFY COMPLETE\n$WKACC   EQU   X'40'                 .. ACCESS COMPLETE\n$WKCRE   EQU   X'20'                 .. DATASPACE CREATE COMPLETE\n$WKALET  EQU   X'10'                 .. ALET COMPLETE\n$WKMAP   EQU   X'08'                 .. MAP COMPLETE\n         PRTBLOK DSECT=NO\nWKL      EQU   *-WK\n* ------------------------------------------------------------------- *\n*              MASTER FILE RECORD                                     *\n* ------------------------------------------------------------------- *\n         REQBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              MASTER FILE REQUEST                                    *\n* ------------------------------------------------------------------- *\n         MSTRREQ DSECT=YES\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         FXSCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEFUTL": {"ttr": 16646, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x17\\x8f\\x00\\x99\\x17\\x8f\\x15&\\x00\\xca\\x00\\xca\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-06-27T00:00:00", "modifydate": "1999-06-27T15:26:00", "lines": 202, "newlines": 202, "modlines": 0, "user": "SBGOLOB"}, "text": "*---------------------------------------------------------------------*\n* FUNCTION                                                            *\n*     This module is invoked when the job CPU time, step CPU time, or *\n*     the job wait time is exceeded.                                  *\n*                                                                     *\n*  The following action is taken:                                     *\n* If this is for a batch job or started task, allow to abend          *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* For TSO users:                                                      *\n* Check user's access to a RACF resource.                             *\n* As is this exit checks for the user's access to class 'TIMEOUT',    *\n* entity 'TSOUSER'.                                                   *\n*                                                                     *\n* If Permitted to resource                                            *\n*   If wait time exceeded                                             *\n*      extend time 5 minutes                                          *\n*                                                                     *\n* If CPU time exceeded                                                *\n*    cancel                                                           *\n*                                                                     *\n* If Not permitted to resource                                        *\n*       cancel                                                        *\n*                                                                     *\n* ENTRY POINT                                                         *\n*     IEFUTL                                                          *\n*                                                                     *\n* INPUT                                                               *\n*     Register 1 points to a 4 byte address of the common exit        *\n*     parameter which is a 36 byte field containing..                 *\n*        Job name                                       0             *\n*        Reader start time         (binary .01 SEC)     8             *\n*        Reader start date         (packed 00YDDDF)    12             *\n*        System ID                                     16             *\n*        Model id                                      18             *\n*        User identification                           20             *\n*        Job step number           (binary)            28             *\n*        SMF options byte          (binary)            29             *\n*        Reserved area                                 30             *\n*        User communication field                      32             *\n*     Register 0 will contain one of the following entry codes        *\n*     indicating which time limit was exceeded..                      *\n*        0 - JOB CPU TIME                                             *\n*        4 - STEP CPU TIME                                            *\n*        8 - JOB WAIT TIME                                            *\n* OUTPUT                                                              *\n*     If the user's time is to be extended, the time value will be    *\n*     returned in timer units in register 1, and register 15 will be  *\n*     set to 4.                                                       *\n*     If the user is to be cancelled, register 15 will be set to zero.*\n*                                                                     *\n* MACROS USED                                                         *\n*     IHAASCB                                                         *\n*     RACROUTE                                                        *\n*     GETMAIN                                                         *\n*     FREEMAIN                                                        *\n*                                                                     *\n*    Register usage:                                                  *\n*      R0                                                             *\n*      R1                                                             *\n*      R2                                                             *\n*      R3    RACROUTE parm list                                       *\n*      R4    RACROUTE return code                                     *\n*      R9    OUCB base                                                *\n*      R10   type of time out: 0=JOB CPU, 4=STEP CPU, 8=WAIT          *\n*      R11   Parameter list address                                   *\n*      R12   program base                                             *\n*      R13                                                            *\n*      R14                                                            *\n*      R15                                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\nIEFUTL   CSECT                TIME LIMIT SMF EXIT\nIEFUTL   AMODE 31\nIEFUTL   RMODE ANY\n         SAVE  (14,12),,IEFUTL_&SYSDATE._&SYSTIME\n         LR    R12,R15             LOAD BASE\n         USING IEFUTL,R12          ESTABLISH ADDRESSABILITY\n         LR    R10,R0              SAVE TIME-OUT CODE\n         L     R11,0(R1)           PARAMETER LIST ADDRESS\n         USING CEPA,R11            DEFINE EXIT PARAMETER AREA BASE\n         USING PSA,R0              DEFINE PSA BASE\n         L     R1,PSAAOLD          CURRENT ASCB ADDRESS\n         USING ASCB,R1             DEFINE ASCB BASE\n         L     R9,ASCBOUCB         OUCB ADDRESS FROM ASCB\n         LA    R9,0(R9)            CLEAR HIGH BIT(S)\n         USING OUCB,R9             DEFINE BASE\n         TM    OUCBYFL,OUCBLOG     IS THIS A TSO USER??\n         BNO   CANCEL00            NO..\n         CH    R10,H8              WAIT TIME-OUT?\n         BNE   CANCEL00            NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*      The current address space is a TSO user.  RACCHECK should      *\n*      be for CLASS 'TIMEOUT', ENTITY should be 'TSOUSER'.            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         LA    R2,TSOUSER          SET TO CONSTANT 'TSOUSER'\n*---------------------------------------------------------------------*\n*                                                                     *\n*      Issue RACROUTE, R2 points to 'ENTITY' name.                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nRACF0020 DS    0H\n         LA    R0,RACWORKL         RACF PARAMETER LIST SIZE\n         GETMAIN RU,LV=(0),SP=255  ACQUIRE STORAGE FOR RACF PARM LIST\n         LR    R3,R1               COPY STORAGE ADDRESS\n         USING RACWORK,R3          DEFINE BASE\n         LA    R5,RACWORKA         WORK AREA ADDRESS\n         LR    R6,R13              SAVE R13\n         LA    R13,RACSAVE         USE SAVE AREA IN WORK AREA\n         MVC   RACLLIST(RACLISTL),RACILIST\n         MVI   RACCLSL,8           SET CLASS LENGTH\n         MVC   RACCLS,=CL8'TIMEOUT'\n         RACROUTE REQUEST=AUTH,    CHECK FOR AUTHORIZATION             +\n               ATTR=READ,          .. 'READ' AUTHORITY                 +\n               CLASS=RACCLSL,      .. RACF 'CLASS'                     +\n               ENTITY=((R2)),      .. RACF 'ENTITY'                    +\n               WORKA=(R5),         .. WORK AREA ADDRESS                +\n               MF=(E,(R3))         .. MACRO FORM/PARM LIST\n         LR    R4,R15              SAVE RACCHECK RETURN CODE\n         LR    R13,R6              RESTORE R13\n         LA    R0,RACWORKL         WORK AREA SIZE\n         FREEMAIN RU,A=(3),LV=(0),SP=255  FREEMAIN WORK AREA\n*---------------------------------------------------------------------*\n*                                                                     *\n*       Wait time time exceeded for a TSO user.                       *\n*         If this is a 'no logoff user'                               *\n*            extend the time 5 minutes                                *\n*         otherwise                                                   *\n*            abend them                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         LTR   R4,R4               IS USER A 'NOLOGOFF' USER??\n         BNZ   CANCEL00            NO\n         MVC   24(4,R13),FIVEMIN   EXTEND WAIT TIME BY 5 MINUTES\n         LA    R5,4                SET RETURN CODE\n         B     EXIT0000            EXIT\nCANCEL00 DS    0H\n         SR    R5,R5               SET RETURN CODE (CANCEL)\n         ST    R5,24(R13)          SET TIME TO ZERO\nEXIT0000 DS    0H\n         ST    R5,16(R13)          SET RETURN CODE\n         LM    R14,R12,12(R13)     RESTORE REGS\n         BR    R14                 EXIT\n*---------------------------------------------------------------------*\n*        CONSTANTS                                                    *\n*---------------------------------------------------------------------*\nFIVEMIN   DC    F'11520737'     5 MIN OR 11,520,737.TIMER UNITS\nRACILIST RACROUTE REQUEST=AUTH,                                        +\n               LOG=NONE,                                               +\n               MF=L\nRACLISTL EQU   *-RACILIST\nH8       DC    H'8'\nTSOUSER  DC    CL8'TSOUSER'\n         LTORG\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*         COMMON EXIT PARAMETER AREA                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\nCEPA     DSECT\nCEPAJBN  DS    CL8                     JOB NAME\nCEPARST  DS    BL4                     TIME READER RECOGNIZED JOB CARD\nCEPARSD  DS    PL4                     DATE READER RECOGNIZED JOB CARD\nCEPASID  DS    CL4                     SYSTEM IDENTIFICATION\nCEPAUIF  DS    CL8                     USER IDENTIFICATION\nCEPASTN  DS    BL1                     STEP NUMBER\nCEPAFLG1 DS    BL1                     SMF OPTIONS\nCEPADSA  EQU   X'10'                   .. DATASET ACCOUNTING\nCEPAVOLA EQU   X'08'                   .. VOLUME ACCOUNTING\nCEPAT17  EQU   X'02'                   .. TYPE 17 RECORDS WRITTEN\nCEPAFGJ  EQU   X'01'                   FOREGROUND JOB, OFF=BACKGROUND\nCEPAFLG2 DS    BL1                     RESTART INDICATOR\nCEPARSTS EQU   X'80'                   .. STEP RESTART\nCEPARSTP EQU   X'40'                   .. CHECKPOINT RESTART\nCEPARSTC EQU   X'20'                   .. CONTINUE RESTART\nCEPARSTW EQU   X'08'                   .. WARM RESTART\nCEPAJICL DS    CL1                     JOB CLASS\nCEPAUSER DS    AL4                     USER FIELD\n*---------------------------------------------------------------------*\n*                                                                     *\n*         RACROUTE WORK AREA                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nRACWORK  DSECT\nRACLLIST DS    (RACLISTL)X\nRACCLSL  DS    AL1                     RACF CLASS NAME LENGTH\nRACCLS   DS    CL8                     RACF CLASS NAME\nRACWORKA DS    CL512                   RACROUTE WORK AREA\nRACSAVE  DS    9D                      REGISTER SAVE AREA\nRACWORKL EQU   *-RACWORK               STORAGE SIZE REQUIRED\n         PRINT NOGEN\n         IHAPSA\n         SPACE 2\n         CVT   DSECT=YES\n         IRAOUCB\n         IHAASCB DSECT=YES,LIST=NO\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IEFUTL#": {"ttr": 16650, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x17\\x8f\\x00\\x99\\x17\\x8f\\x15Q\\x00\\x08\\x00\\t\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-06-27T00:00:00", "modifydate": "1999-06-27T15:51:00", "lines": 8, "newlines": 9, "modlines": 0, "user": "SBGOLOB"}, "text": "Subj: IEFUTL exit\nDate: 6/4/99 10:12:04 AM EST\nTo: sbgolob@AOL.com\n\nSam,\nI was finally able to get back in on the MVS system and assemble this.\nThere was one error in the first source.  This one assembles clean on\nour system.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SMFSPLIT": {"ttr": 16652, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00&\\x00\\x98!\\x9f\\x01\\x033\\x0f\\x069\\x03k\\x03k\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1998-08-07T00:00:00", "modifydate": "2003-11-26T06:39:26", "lines": 875, "newlines": 875, "modlines": 0, "user": "SBGOLOB"}, "text": "*---------------------------------------------------------------------*\n*  Program name: SMFSPLIT                                             *\n*                                                                     *\n*  Purpose:      provide a utility to pre-process SMF records.        *\n*                                                                     *\n*  Description:                                                       *\n*                                                                     *\n*    This program allows SMF records to be 'SPLIT' or 'GROUPED'       *\n*    together based on the SMF record type.  Input is the data        *\n*    set produced by the 'SMFDUMP' utility.  Output is 1 to 50        *\n*    (more could be made available by enlarging the DD control        *\n*    table size) sequential data sets.  The number of output data     *\n*    sets and which records will go to which output data set is       *\n*    determined by user supplied control statements.                  *\n*                                                                     *\n*    The control statements are:                                      *\n*       1. DD control statement                                       *\n*          COLUMNS  1- 8  'DD     '                                   *\n*                  10-17  DDNAME                                      *\n*                                                                     *\n*          NOTE:  a JCL DD statement is required for each DD          *\n*                 defined.                                            *\n*                                                                     *\n*       2. RECORD TYPE control statement                              *\n*          COLUMNS  1- 8  'RECORD  '                                  *\n*                  10-12  Required.  SMF record id in decimal,        *\n*                         leading zeros required.                     *\n*                  20-27  Optional.  User exit name.                  *\n*                  30-37  Required.  Output DDNAME.                   *\n*                  40-47  Optional.  Output DDNAME.                   *\n*                  50-57  Optional.  Output DDNAME.                   *\n*                  60-67  Optional.  Output DDNAME.                   *\n*                  70-77  Optional.  Output DDNAME.                   *\n*                                                                     *\n*          NOTE:  Record types not assigned to any output file        *\n*                 will be written to the 'DEFAULT' output file.       *\n*                                                                     *\n*       3. COMMENT Statement.                                         *\n*          COLUMNS  1     '*'                                         *\n*                   2-80  Any desired user text                       *\n*                                                                     *\n*    Control statements may be entered in any order with one          *\n*    constraint... DDNAMES must be defined by DD control statements   *\n*    before referring to them on a RECORD control statement.          *\n*                                                                     *\n*    Any SMF record type may be directed to up to 5 output data sets. *\n*    Any output data set may be referenced by multiple SMF record     *\n*    type definition statements.                                      *\n*                                                                     *\n*    The record formats may also be modified by an optional user      *\n*    exit before the record is written to the output data set.        *\n*    This allows processing of fields that are of a format difficult  *\n*    to process in COBOL (or another high level language) to a        *\n*    format that is easier for that language.  If only a few fields   *\n*    are of interest, they may be extracted and the others omitted.   *\n*    If fields could be re-arranged to make sorting easier they       *\n*    could be moved in the exit.  The output record contents are      *\n*    entirely under the control of the exit.  The only constraint     *\n*    is the output records be of \"variable\" format.                   *\n*                                                                     *\n*    Parameter list to an exit routine is:                            *\n*         1.  Address of input record                                 *\n*         2.  Address of 1st output DD CONTROL BLOCK                  *\n*         3.  Address of returned I/O area for 1ST output DD          *\n*         4.  Address of 2ND output DD CONTROL BLOCK or zero          *\n*         5.  Address of returned I/O area for 2ND output DD          *\n*         6.  Address of 3RD output DD CONTROL BLOCK or zero          *\n*         7.  Address of returned I/O area for 3RD output DD          *\n*         8.  Address of 4TH output DD CONTROL BLOCK or zero          *\n*         9.  Address of returned I/O area for 4TH output DD          *\n*        10.  Address of 5TH output DD CONTROL BLOCK or zero          *\n*        11.  Address of returned I/O area for 5TH output DD          *\n*                                                                     *\n*    Exits may alter the input record or acquire storage and build    *\n*    a new I/O area.  This allows the same record to be reformatted   *\n*    differently for each output file.  The exit communicates the     *\n*    presence of a new I/O area by placing its address in the         *\n*    FIELD WHICH CORRESPONDS TO THE DD TO WHICH IT IS TO BE WRITTEN.  *\n*    If this field is left zero, the I/O area is assumed to be the    *\n*    original input area.                                             *\n*                                                                     *\n*    Statistics are kept per record type and output file and reported *\n*    during program termination.                                      *\n*                                                                     *\n*    Sample JCL to extract STEP and JOB termination records to        *\n*    one file (FILE1) and CICS statistics to another file (FILE2):    *\n*        //SMFSPLIT  JOB .................                            *\n*        //SMFSPLIT  EXEC PGM=SMFSPLIT,REGION=2048K                   *\n*        //STEPLIB  DD DSN=..............,DISP=SHR                    *\n*        //PRINTER  DD SYSOUT=*                                       *\n*        //SYSUT1   DD DSN=SMFDUMP.OUTPUT.FILE,DISP=SHR               *\n*        //DEFAULT  DD DUMMY                                          *\n*        //FILE1    DD DSN=.............,DISP=(NEW,PASS),             *\n*        //            UNIT=SYSDA,                                    *\n*        //            SPACE=(TRK,(15,15)),                           *\n*        //            DCB=(RECFM=VB,LRECL=15996,BLKSIZE=16000)       *\n*        //FILE2    DD DSN=.............,DISP=(NEW,PASS),             *\n*        //            UNIT=SYSDA,                                    *\n*        //            SPACE=(TRK,(15,15)),                           *\n*        //            DCB=(RECFM=VB,LRECL=15996,BLKSIZE=16000)       *\n*        //SYSIN    DD *                                              *\n*        DD       FILE1                                               *\n*        RECORD   004                 FILE1                           *\n*        RECORD   005                 FILE1                           *\n*        DD       FILE2                                               *\n*        RECORD   110                 FILE2                           *\n*        /*                                                           *\n*        //                                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         SMFBLOK &BLOCK=,&TYPE=DSECT\n         AIF   ('&BLOCK' EQ 'PARM').BLOCK10\n         MNOTE 12,'INVALID BLOCK TYPE ''&BLOCK'' '\n         MEXIT\n.BLOCK10 ANOP\n         AIF  ('&TYPE' EQ 'CSECT').BLOCK11\nEXITPARM DSECT\n         AGO   .BLOCK12\n.BLOCK11 ANOP\nEXITPARM DS    0D\n.BLOCK12 ANOP\nEXITRECA DC    A(0)                  INPUT RECORD ADDRESS\nEXITF1   DC    A(0)                  OUTPUT FILE BLOCK ADDRESS 1\nEXITIOA1 DC    A(0)                  OUTPUT I/O AREA ADDRESS 1\nEXITF2   DC    A(0)                  OUTPUT FILE BLOCK ADDRESS 2\nEXITIOA2 DC    A(0)                  OUTPUT I/O AREA ADDRESS 2\nEXITF3   DC    A(0)                  OUTPUT FILE BLOCK ADDRESS 3\nEXITIOA3 DC    A(0)                  OUTPUT I/O AREA ADDRESS 3\nEXITF4   DC    A(0)                  OUTPUT FILE BLOCK ADDRESS 4\nEXITIOA4 DC    A(0)                  OUTPUT I/O AREA ADDRESS 4\nEXITF5   DC    A(0)                  OUTPUT FILE BLOCK ADDRESS 5\nEXITIOA5 DC    A(0)                  OUTPUT I/O AREA ADDRESS 5\nEXITPL   EQU   *-EXITPARM\n          MEND\nSMFSPLIT CSECT\n         USING SMFSPLIT,R12          DECLARE ENTRY BASE\n         USING DDTDSCT,R9            DD TABLE DSECT BASE\n         USING RECTDSCT,R8           RECORD TABLE DSECT BASE\n         STM   R14,R12,12(R13)       STORE CALLERS REGISTERS\n         LR    R12,R15               LOAD BASE REGISTER\n         LR    R15,R13               SAVE CALLERS SAVEAREA ADDR\n         LA    R13,SAVE              LOAD ADDRESS OF MY SAVE AREA\n         ST    R15,4(,R13)           CHAIN CALLERS TO MINE\n         ST    R13,8(,R15)           CHAIN MINE TO CALLERS\n         USING SAVE,R13              DEFINE 2ND BASE REGISTER\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nINIT0000 DS    0H\n         OPEN  (SYSUT1,INPUT)        OPEN SMF INPUT FILE\n         OPEN  (SYSIN,INPUT)         OPEN CONTROL STATEMENT FILE\n         OPEN  (PRINTER,OUTPUT)      OPEN PRINT OUTPUT FILE\n         OPEN  (DEFAULT,OUTPUT)      OPEN DEFAULT OUTPUT FILE\n         MVC   HEADING,CNTLHEAD      MOVE 'CONTROL CARD' HEADING\n         BAL   R10,HEADINGS          PRINT HEADING\nINIT0010 DS    0H\n         GET   SYSIN,CARDAREA        READ CONTROL CARD\n         MVI   PLINE,C'0'            DOUBLE SPACE\n         MVC   PAREA(L'CARDAREA),CARDAREA\n         BAL   R10,PRT0000           PRINT CARD IMAGE\n         CLI   CNTLTYPE,C'*'         COMMENT CARD??\n         BE    INIT0010              YES\n         CLC   CNTLTYPE,DDTYPE       DD DEFINITION??\n         BE    DD0000                YES\n         CLC   CNTLTYPE,RTYPTYPE     RECORD TYPE DEFINITION??\n         BE    RTYPE000              YES\n         MVC   PLINE(L'MSG01),MSG01  MOVE ERROR MESSAGE\n         BAL   R10,PRT0000           PRINT ERROR MESSAGE\n         B     INIT0010              GIVE 'EM ANOTHER TRY\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PROCESS DD DEFINITION                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nDD0000   DS    0H\n         CLC   CNTLFLD1,BLANKS       NAME OMITTED??\n         BE    DD0030                YES\n         L     R9,ADDTBLE            FIRST DD\nDD0010   DS    0H\n         OC    DDTDDN,DDTDDN         END OF TABLE??\n         BZ    DD0020                YES\n         CLC   DDTDDN,CNTLFLD1       DUPLICATE DD DEFINITION??\n         BE    DD0040                YES\n         LA    R9,DDTLEN(R9)         NEXT DD\n         B     DD0010                LOOP\nDD0020   DS    0H\n         MVC   DDTDDN,CNTLFLD1       SAVE DDNAME\n         MVC   DDTDCB,MODELDCB       MOVE 'MODEL' DCB\n         LA    R2,DDTDCB             DCB ADDRESS\n         USING IHADCB,R2             DEFINE DSECT BASE\n         MVC   DCBDDNAM,CNTLFLD1     INSERT DDNAME INTO DCB\n         OPEN  ((R2),OUTPUT)         OPEN THE DCB\n         B     INIT0010              READ NEXT CONTROL STATEMENT\nDD0030   DS    0H\n         MVC   PLINE(L'MSG02),MSG02  DD NAME MISSING ON DD STATEMENT\n         BAL   R10,PRT0000           PRINT MESSAGE\n         B     INIT0010              READ NEXT CONTROL STATEMENT\nDD0040   DS    0H\n         MVC   PLINE(L'MSG03),MSG03  DUPLICATE DD DEFINITION\n         BAL   R10,PRT0000           PRINT MESSAGE\n         B     INIT0010              READ NEXT CONTROL STATEMENT\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PROCESS RECORD TYPE DEFINITION                            *\n*                                                                     *\n*---------------------------------------------------------------------*\nRTYPE000 DS    0H\n         L     R8,ARECTBLE           FIRST RECORD TYPE IN TABLE\n         CLC   CNTLFLD1,BLANKS       RECORD TYPE OMITTED??\n         BE    RTYPE080              YES\n         LA    R1,CNTLFLD1           RECORD TYPE ID\n         LA    R2,3                  NUMBER OF DIGITS\nRTYPE010 DS    0H\n         CLI   0(R1),C'0'            INVALID DIGIT??\n         BL    RTYPE090              YES\n         CLI   0(R1),C'9'            INVALID DIGIT??\n         BH    RTYPE090              YES\n         LA    R1,1(R1)              NEXT DIGIT\n         BCT   R2,RTYPE010           CHECK IT\n         PACK  DWORD,CNTLFLD1(3)     PACK RECORD TYPE\n         CVB   R1,DWORD              CONVERT TO BINARY\n         CH    R1,H255               VALID RECORD TYPE??\n         BH    RTYPE100              NO\n         CLC   CNTLFLD3,BLANKS       DDNAME OMITTED??\n         BE    RTYPE110              YES\nRTYPE020 DS    0H\n         CLI   RECTDEC,X'00'         END OF TABLE??\n         BE    RTYPE030              YES\n         CLC   RECTDEC,CNTLFLD1      DUPLICATE DEFINITION??\n         BE    RTYPE120              YES\n         LA    R8,RECTLEN(R8)        NEXT RECORD TYPE\n         B     RTYPE020              LOOP\nRTYPE030 DS    0H\n         LA    R2,CNTLFLD3           FIRST DDNAME\n         LA    R3,RECTDD             FIRST DD BLOCK ADDRESS\n         LA    R4,5                  MAXIMUM DDNAME REFERENCES\nRTYPE040 DS    0H\n         CLC   0(8,R2),BLANKS        END OF DDNAME REFERENCES??\n         BE    RTYPE070              YES\n         L     R9,ADDTBLE            FIRST DD\nRTYPE050 DS    0H\n         OC    DDTDDN,DDTDDN         END OF TABLE??\n         BZ    RTYPE130              YES .. INVALID DD REFERENCE\n         CLC   DDTDDN,0(R2)          DD LOCATED??\n         BE    RTYPE060              YES\n         LA    R9,DDTLEN(R9)         NEXT DD\n         B     RTYPE050              LOOP\nRTYPE060 DS    0H\n         ST    R9,0(R3)              DD BLOCK ADDRESS\n         LA    R2,10(R2)             NEXT DDNAME\n         LA    R3,8(R3)              NEXT DD BLOCK ADDRESS\n         BCT   R4,RTYPE040           LOCATE DD BLOCK\nRTYPE070 DS    0H\n         STC   R1,RECTID             RECORD ID IN BINARY\n         UNPK  RECTHEX(3),RECTID(2)  UNPACK RECORD ID\n         NC    RECTHEX,HEX0F0F       TURN OFF ZONES\n         TR    RECTHEX,HEXCHAR       CONVERT TO PRINTABLE\n         MVC   RECTDEC,CNTLFLD1      MOVE DECIMAL RECORD NUMBER\n         MH    R1,H45                LENGTH OF DESCRIPTIONS\n         A     R1,ADSCTBLE           PLUS BASE ADDRESS\n         MVC   RECTDESC,0(R1)        RECORD TYPE DESCRIPTION\n         CLC   CNTLFLD2,BLANKS       PROCESSING ROUTINE??\n         BE    INIT0010              NO\n         LOAD  EPLOC=CNTLFLD2        LOAD THE PROCESSING ROUTINE\n         LTR   R15,R15               LOAD SUCCESSFUL??\n         BNZ   RTYPE140              NO\n         ST    R0,RECTRTN            PROCESSING ROUTINE ADDRESS\n         B     INIT0010              READ NEXT CONTROL RECORD\nRTYPE080 DS    0H\n         MVC   PLINE(L'MSG04),MSG04  RECORD ID OMITTED\n         B     RTYPE150              SET RETURN CODE AND PRINT\nRTYPE090 DS    0H\n         MVC   PLINE(L'MSG05),MSG05  INVALID DIGIT IN RECORD ID\n         B     RTYPE150              SET RETURN CODE AND PRINT\nRTYPE100 DS    0H\n         MVC   PLINE(L'MSG06),MSG06  RECORD ID > 255\n         B     RTYPE150              SET RETURN CODE AND PRINT\nRTYPE110 DS    0H\n         MVC   PLINE(L'MSG07),MSG07  DD-NAME OMITTED ON RECORD DEF\n         B     RTYPE150              SET RETURN CODE AND PRINT\nRTYPE120 DS    0H\n         MVC   PLINE(L'MSG08),MSG08  DUP RECORD TYPE DEFINITION\n         B     RTYPE150              SET RETURN CODE AND PRINT\nRTYPE130 DS    0H\n         MVC   PLINE(L'MSG09),MSG09  INVALID DDNAME REFERENCE\n         B     RTYPE150              SET RETURN CODE AND PRINT\nRTYPE140 DS    0H\n         ST    R15,DWORD             RETURN CODE FROM LOAD\n         UNPK  MSG10CD(3),DWORD+6(2) UNPACK RETURN CODE\n         MVI   MSG10CD+2,C' '        INSERT BLANK\n         NC    MSG10CD,HEX0F0F       NULLIFY ZONES\n         TR    MSG10CD,HEXCHAR       TRANSLATE TO PRINTABLE\n         MVC   PLINE(MSG10L),MSG10   PROCESSING ROUTINE LOAD FAILURE\nRTYPE150 DS    0H\n         MVI   RC,8                  SET RETURN CODE\n         BAL   R10,PRT0000           PRINT MESSAGE\n         B     INIT0010              READ NEXT CONTROL STATEMENT\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PROCESS SMF FILE                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nPROC0000 DS    0H\n         GET   SYSUT1,SMFREC         READ A RECORD\n         AP    TOTREC,P1             ADD 1 TO TOTAL RECORDS READ\n         LA    R2,SMFREC             INPUT RECORD\n         L     R8,ARECTBLE           RECORD TYPE TABLE\nPROC0010 DS    0H\n         CLI   RECTDEC,X'00'         END OF TABLE??\n         BE    PROC0060              YES\n         CLC   RECTID,SMFRTY         CORRECT RECORD TYPE??\n         BE    PROC0020              YES\n         LA    R8,RECTLEN(R8)        NEXT TYPE BLOCK\n         B     PROC0010              TRY AGAIN\nPROC0020 DS    0H\n         OI    RECTFLAG,$FOUND       INDICATE A RECORD OF TYPE FOUND\n         L     R1,RECTCNT            TOTAL RECORD COUNT\n         LA    R1,1(R1)              ADD 1 TO COUNT\n         ST    R1,RECTCNT            SAVE COUNT\n         LA    R7,RECTDD             FIRST DD FOR THIS TYPE\n         OC    RECTRTN,RECTRTN       ANY PROCESSING ROUTINE??\n         BZ    PROC0030              NO\n         XC    EXITPARM(EXITPL),EXITPARM   CLEAR PARMS\n         LA    R1,SMFREC                   INPUT DATA ADDRESS\n         ST    R1,EXITRECA                 INSERT INTO PARM AREA\n         MVC   EXITF1(EXITPL-4),RECTDD     DD/IO AREA ADDRESSES\n         OI    EXITIOA5,X'80'              END OF PARM CHAIN\n         LA    R1,EXITPARM                 PARM LIST ADDRESS\n         L     R15,RECTRTN                 EXTERNAL ROUTINE ADDRESS\n         BALR  R14,R15                     INVOKE EXTERNAL ROUTINE\n         LA    R7,EXITF1             FIRST DD/IO ADDRESS\nPROC0030 DS    0H\n         LA    R4,5                  MAXIMUM DD'S\nPROC0040 DS    0H\n         ICM   R9,15,0(R7)           DD BLOCK ADDRESS\n         BZ    PROC0000              END OF DD/IO AREAS\n         L     R1,DDTCNT             NUMBER OF RECORDS WRITTEN\n         LA    R1,1(R1)              ADD 1\n         ST    R1,DDTCNT             SAVE TOTAL\n         LA    R2,DDTDCB             DCB WITHIN DD BLOCK\n         ICM   R3,15,4(R7)           I/O AREA ADDRESS PRESENT??\n         BNZ   PROC0050              YES... NEW I/O AREA\n         LA    R3,SMFREC             USE ORIGINAL I/O AREA\nPROC0050 DS    0H\n         PUT   (R2),(R3)             WRITE OUTPUT RECORD\n         LA    R7,8(R7)              NEXT DD/IO AREA\n         BCT   R4,PROC0040           PROCESS ALL DD'S\n         B     PROC0000              ALL DD'S PROCESSED\nPROC0060 DS    0H\n         PUT   DEFAULT,SMFREC        WRITE THE RECORD TO DEFAULT\n         L     R1,DEFCNT             DEFAULT COUNT\n         LA    R1,1(R1)              ADD 1\n         ST    R1,DEFCNT             SAVE DEFAULT COUNT\n         B     PROC0000              READ NEXT TAPE RECORD\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PRINT RECORD TYPE AND DD STATISTICS                       *\n*                                                                     *\n*---------------------------------------------------------------------*\nSTAT0000 DS    0H\n         MVC   HEADING,RECHEAD1      MOVE RECORD TYPE STATISTICS\n         BAL   R10,HEADINGS          PRINT HEADING\n         MVC   PLINE,RECHEAD2        MOVE SECONDARY HEADING\n         BAL   R10,PRT0000           PRINT SECONDARY HEADING\n         L     R8,ARECTBLE           FIRST RECORD TYPE\nSTAT0010 DS    0H\n         CLI   RECTDEC,X'00'         END OF TYPES??\n         BE    STAT0020              YES\n         MVC   PRRDEC,RECTDEC        MOVE RECORD TYPE (DECIMAL)\n         MVC   PRRHEX,RECTHEX        MOVE RECORD TYPE (HEX)\n         MVC   PRRDESC,RECTDESC      MOVE RECORD TYPE DESCRIPTION\n         L     R1,RECTCNT            NUMBER OF RECORDS\n         CVD   R1,DWORD              CONVERT TO DECIMAL\n         MVC   PRRCNT,EDWORD         MOVE EDIT WORD\n         ED    PRRCNT,DWORD+4        EDIT NUMBER OF RECORDS\n         MVC   PAREA(RECSTATL),RECSTAT    MOVE DATA\n         MVI   PLINE,C'0'            DOUBLE SPACE\n         BAL   R10,PRT0000           PRINT STATISTICS\n         LA    R8,RECTLEN(R8)        NEXT RECORD TYPE\n         B     STAT0010              CONTINUE RECORD TYPE STATISTICS\nSTAT0020 DS    0H\n         L     R9,ADDTBLE            FIRST DD\n         MVC   HEADING,DDHEAD1       MOVE DD STATISTICS HEADING\n         BAL   R10,HEADINGS          PRINT HEADING\n         MVC   PLINE,DDHEAD2         MOVE SECONDARY HEADING\n         BAL   R10,PRT0000           PRINT SECONDARY HEADING\nSTAT0030 DS    0H\n         OC    DDTDDN,DDTDDN         END OF DD'S??\n         BZ    STAT0040              YES\n         MVC   PRDDN,DDTDDN          DDNAME\n         L     R1,DDTCNT             RECORDS WRITTEN TO DD\n         CVD   R1,DWORD              CONVERT TO DECIMAL\n         MVC   PRDCNT,EDWORD         MOVE EDIT WORD\n         ED    PRDCNT,DWORD+4        EDIT NUMBER OF RECORDS\n         MVC   PAREA(DDSTATL),DDSTAT      MOVE STATISTICS\n         MVI   PLINE,C'0'            DOUBLE SPACE\n         BAL   R10,PRT0000           PRINT STATISTICS\n         LA    R2,DDTDCB             DCB WITHIN DD BLOCK\n         CLOSE ((R2))                CLOSE THE DCB\n         LA    R9,DDTLEN(R9)         NEXT DD\n         B     STAT0030              CONTINUE DD STATISTICS\nSTAT0040 DS    0H\n         MVC   PRDDN,=CL8'DEFAULT'   DEFAULT DD\n         L     R1,DEFCNT             RECORDS WRITTEN TO DEFAULT DD\n         CVD   R1,DWORD              CONVERT TO DECIMAL\n         MVC   PRDCNT,EDWORD         MOVE EDIT WORD\n         ED    PRDCNT,DWORD+4        EDIT NUMBER OF RECORDS\n         MVC   PAREA(DDSTATL),DDSTAT      MOVE STATISTICS\n         MVI   PLINE,C'0'            DOUBLE SPACE\n         BAL   R10,PRT0000           PRINT STATISTICS\n         B     EXIT0000              ALL DONE\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PRINTING/HEADINGS                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         PUT   PRINTER,PLINE         WRITE PRINT LINE\n         AP    LINECT,P1             ADD 1 TO LINE COUNT\n         CLI   PLINE,C' '            SINGLE SPACE??\n         BE    PRT0010               YES\n         AP    LINECT,P1             ADD 1 TO LINE COUNT\nPRT0010  DS    0H\n         MVC   PLINE,PLINE-1         CLEAR PRINT LINE\n         CP    LINECT,P65            PAGE FULL??\n         BLR   R10                   NO\nHEADINGS DS    0H\n         PUT   PRINTER,HEADING       PRINT HEADING\n         ZAP   LINECT,P1             RESET LINE COUNT\n         BR    R10                   RETURN\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*           END OF JOB                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         CLOSE SYSUT1                INPUT SMF FILE\n         CLOSE SYSIN                 CONTROL FILE\n         CLOSE DEFAULT               CLOSE DEFAULT OUTPUT FILE\n         CLOSE PRINTER               CLOSE PRINT FILE\n         SR    R15,R15               CLEAR FOR RC\n         IC    R15,RC                SET RC\n         L     R13,SAVE+4            RE-LOAD SAVE AREA POINTER\n         L     R14,12(R13)           RESTORE R14\n         LM    R0,R12,20(R13)        R0-R12\n         BR    R14                   TERMINATE\n         EJECT\n*---------------------------------------------------------------------*\n*                      DATA AREAS                                     *\n*---------------------------------------------------------------------*\n         LTORG\nDWORD    DC    D'0'                  DOUBLEWORD WORK AREA\nADDTBLE  DC    A(DDTBLE)             DD TABLE ADDRESS\nARECTBLE DC    A(RECTBLE)            RECORD TYPE TABLE ADDRESS\nADSCTBLE DC    A(DSCTBLE)            RECORD DESCRIPTION TABLE\n         SMFBLOK BLOCK=PARM,TYPE=CSECT\nDEFCNT   DC    F'0'                  RECORDS WRITTEN TO DEFAULT FILE\nH45      DC    H'45'                 CONSTANT\nH255     DC    H'255'                CONSTANT\nP0       DC    P'0'                  CONSTANT\nP1       DC    P'1'                  CONSTANT\nP65      DC    P'65'                 CONSTANT\nTOTREC   DC    PL4'0'                TOTAL INPUT RECORDS\nLINECT   DC    PL3'0'                PRINTER LINE COUNT\nRC       DC    X'00'                 EXIT RETURN CODE\nHEX0F0F  DC    X'0F0F0F0F'           CONSTANT\nHEXCHAR  DC    C'0123456789ABCDEF'   CONSTANT\nEDWORD   DC    X'40206B2020206B202120'\n         DC    C' '\nPLINE    DS    0CL121\n         DC    C' '\nPAREA    DC    CL120' '\nCNTLHEAD DC    CL121'1   CONTROL STATEMENTS'\nRECHEAD1 DC    CL121'1   RECORD TYPE STATISTICS'\nRECHEAD2 DC    CL121' DEC  HEX     RECORDS  DESCRIPTION'\nDDHEAD1  DC    CL121'1   OUTPUT FILE STATISTICS'\nDDHEAD2  DC    CL121' DDNAME      RECORDS'\nHEADING  DC    CL121' '\nRECSTAT  DS    0C\nPRRDEC   DC    CL3' '                RECORD TYPE IN CHARACTER\n         DC    CL3' '\nPRRHEX   DC    CL2' '                RECORD TYPE IN HEX\n         DC    CL2' '\nPRRCNT   DC    CL10' '               NUMBER OF RECORDS\n         DC    CL2' '\nPRRDESC  DC    CL45' '               RECORD TYPE DESCRIPTION\nRECSTATL EQU   *-RECSTAT\nDDSTAT   DS    0C\nPRDDN    DC    CL8' '                OUTPUT DDNAME\n         DC    CL2' '\nPRDCNT   DC    CL10' '               NUMBER OF RECORDS\nDDSTATL  EQU   *-DDSTAT\nCARDAREA DS    0CL80\nCNTLTYPE DS    CL8                   STATEMENT TYPE\n         DS    CL1\nCNTLFLD1 DS    CL10                  FIELD 1 COLUMNS 10-19\nCNTLFLD2 DS    CL10                  FIELD 2 COLUMNS 20-29\nCNTLFLD3 DS    CL10                  FIELD 3 COLUMNS 30-39\nCNTLFLD4 DS    CL10                  FIELD 4 COLUMNS 40-49\nCNTLFLD5 DS    CL10                  FIELD 5 COLUMNS 50-59\nCNTLFLD6 DS    CL10                  FIELD 6 COLUMNS 60-69\nCNTLFLD7 DS    CL10                  FIELD 7 COLUMNS 70-79\n         DS    C\nDDTYPE   DC    CL8'DD'\nRTYPTYPE DC    CL8'RECORD'\nBLANKS   DC    CL80' '\nMSG01    DC    C' Invalid control statement'\nMSG02    DC    C' DDNAME omitted on ''DD'' statement'\nMSG03    DC    C' Duplicate ''DD'' definition'\nMSG04    DC    C' SMF ID number omitted on ''RECORD'' statement'\nMSG05    DC    C' Invalid digit in SMF ID number'\nMSG06    DC    C' SMF ID number invalid (must be < 256)'\nMSG07    DC    C' DD omitted on ''RECORD'' statement'\nMSG08    DC    C' Duplicate ''RECORD'' definition'\nMSG09    DC    C' Invalid DD reference on ''RECORD'' statement'\nMSG10    DS    0C\n         DC    C'LOAD failed for user exit, RC='\nMSG10CD  DC    CL2' '\nMSG10L   EQU   *-MSG10\nMODELDCB DCB   DSORG=PS,                                               +\n               DDNAME=MODEL,                                           +\n               RECFM=VB,                                               +\n               MACRF=PM\nSYSIN    DCB   DSORG=PS,                                               +\n               DDNAME=SYSIN,                                           +\n               RECFM=FB,                                               +\n               EODAD=PROC0000,                                         +\n               MACRF=GM\nSYSUT1   DCB   DSORG=PS,                                               +\n               DDNAME=SYSUT1,                                          +\n               RECFM=VBS,                                              +\n               EODAD=STAT0000,                                         +\n               MACRF=GM\nPRINTER  DCB   DSORG=PS,                                               +\n               RECFM=FBA,                                              +\n               LRECL=121,                                              +\n               DDNAME=PRINTER,                                         +\n               MACRF=PM\nDEFAULT  DCB   DSORG=PS,                                               +\n               DDNAME=DEFAULT,                                         +\n               MACRF=PM\n         PRINT GEN\nSAVE     DC    18F'0'                REGISTER SAVE AREA\n*---------------------------------------------------------------------*\n*                          SMF RECORD DSECT                           *\n*---------------------------------------------------------------------*\nSMFREC   DS    0C\nSMFLEN   DS    HL2                   LENGTH OF RECORD\nSMFSEG   DS    HL2                   SEGMENT DESCRIPTOR\nSMFFLG   DS    X                     SMF SYSTEM FLAG\nSMF@VS2  EQU   X'02'                 VS/2 SYSTEM\nSMF@VS1  EQU   X'01'                 VS/1 SYSTEM\nSMFRTY   DS    X                     RECORD TYPE\nSMFTME   DS    FL4                   TIME WRITTEN\nSMFDTE   DS    PL4                   DATE WRITTEN\nSMFSID   DS    CL4                   SYSTEM IDENTIFICATION\n         DS    CL32800\nDDTBLE   DC    (50*DDTLEN)X'00'      GENERATE DD TABLE STORAGE\nRECTBLE  DC    (50*RECTLEN)X'00'     GENERATE RECORD TABLE STORAGE\nDSCTBLE  DS    0C\n         DC    CL45'IPL RECORD                                   ' 00\n         DC    CL45'                                             ' 01\n         DC    CL45'DUMP HEADER                                  ' 02\n         DC    CL45'DUMP TRAILER                                 ' 03\n         DC    CL45'STEP TERMINATION                             ' 04\n         DC    CL45'JOB TERMINATION                              ' 05\n         DC    CL45'JES2 OUTPUT WRITER/EXTERNAL WRITER/PSF       ' 06\n         DC    CL45'DATA LOST                                    ' 07\n         DC    CL45'I/O CONFIGURATION                            ' 08\n         DC    CL45'VARY DEVICE ONLINE                           ' 09\n         DC    CL45'ALLOCATION RECOVERY                          ' 0A\n         DC    CL45'VARY DEVICE OFFLINE                          ' 0B\n         DC    CL45'                                             ' 0C\n         DC    CL45'                                             ' 0D\n         DC    CL45'INPUT/RDBACK DATASET ACTIVITY                ' 0E\n         DC    CL45'OUTPUT/UPDATE/INOUT/OUTIN DATASET ACTIVITY   ' 0F\n         DC    CL45'SORT/MERGE STATISTICS                        ' 10\n         DC    CL45'SCRATCH DATASET STATUS                       ' 11\n         DC    CL45'RENAME DATASET STATUS                        ' 12\n         DC    CL45'DIRECT ACCESS VOLUME                         ' 13\n         DC    CL45'JOB INITIATION                               ' 14\n         DC    CL45'ERROR STATISTICS BY VOLUME                   ' 15\n         DC    CL45'CONFIGURATION                                ' 16\n         DC    CL45'SMF STATUS RECORD                            ' 17\n         DC    CL45'JES2 SPOOL OFFLOAD                           ' 18\n         DC    CL45'JES3 DEVICE ALLOCATION                       ' 19\n         DC    CL45'JES2 JOB PURGE                               ' 1A\n         DC    CL45'JES3 JOB PURGE                               ' 1B\n         DC    CL45'                                             ' 1C\n         DC    CL45'                                             ' 1D\n         DC    CL45'COMMON ADDRESS SPACE WORK RECORD             ' 1E\n         DC    CL45'TIOC INITIALIZATION                          ' 1F\n         DC    CL45'TSO USER WORK ACCOUNTING RECORD              ' 20\n         DC    CL45'                                             ' 21\n         DC    CL45'TS-STEP TERMINATION                          ' 22\n         DC    CL45'LOGOFF                                       ' 23\n         DC    CL45'                                             ' 24\n         DC    CL45'NPDA                                         ' 25\n         DC    CL45'                                             ' 26\n         DC    CL45'NLDM RESPONSE TIME                           ' 27\n         DC    CL45'DYNAMIC DD                                   ' 28\n         DC    CL45'JES2 START                                   ' 29\n         DC    CL45'JES3 START                                   ' 2A\n         DC    CL45'JES2 WITHDRAWAL                              ' 2B\n         DC    CL45'                                             ' 2C\n         DC    CL45'                                             ' 2D\n         DC    CL45'                                             ' 2E\n         DC    CL45'JES2 SIGNON/START LINE (BSC ONLY)            ' 2F\n         DC    CL45'JES2 SIGNOFF/STOP LINE (BSC ONLY)            ' 30\n         DC    CL45'JES3 INTEGRITY                               ' 31\n         DC    CL45'ACF/VTAM TUNING STATISTICS                   ' 32\n         DC    CL45'                                             ' 33\n         DC    CL45'JES2 SIGNON/START LINE (SNA ONLY)            ' 34\n         DC    CL45'JES2 SIGNOFF/STOP LINE (SNA ONLY)            ' 35\n         DC    CL45'JES2 INTEGRITY (SNA ONLY)                    ' 36\n         DC    CL45'JES2 NETWORK SIGNON RECORD                   ' 37\n         DC    CL45'JES2 NETWORK INTEGRITY RECORD                ' 38\n         DC    CL45'JES2 NETWORK SYSOUT TRANSMISSION RECORD      ' 39\n         DC    CL45'JES2 NETWORK SIGNOFF RECORD                  ' 3A\n         DC    CL45'MVS/BDT FILE-TO-FILE TRANSMISSION RECORD     ' 3B\n         DC    CL45'VSAM VOLUME DATASET UPDATED                  ' 3C\n         DC    CL45'ICF DEFINE ACTIVITY                          ' 3D\n         DC    CL45'VSAM COMPONENT OR CLUSTER OPENED             ' 3E\n         DC    CL45'VSAM ENTRY DEFINED                           ' 3F\n         DC    CL45'VSAM COMPONENT OR CLUSTER STATUS             ' 40\n         DC    CL45'ICF DELETE ACTIVITY                          ' 41\n         DC    CL45'ICF ALTER ACTIVITY                           ' 42\n         DC    CL45'VSAM ENTRY DELETED                           ' 43\n         DC    CL45'VSAM ENTRY RENAMED                           ' 44\n         DC    CL45'CPU ACTIVITY                                 ' 45\n         DC    CL45'                                             ' 46\n         DC    CL45'PAGING ACTIVITY                              ' 47\n         DC    CL45'WORKLOAD ACTIVITY                            ' 48\n         DC    CL45'CHANNEL PATH ACTIVITY                        ' 49\n         DC    CL45'DEVICE ACTIVITY                              ' 4A\n         DC    CL45'PAGE/SWAP DATASET ACTIVITY                   ' 4B\n         DC    CL45'TRACE ACTIVITY                               ' 4C\n         DC    CL45'ENQUE ACTIVITY                               ' 4D\n         DC    CL45'MONITOR I ACTIVITY                           ' 4E\n         DC    CL45'MONITOR II ACTIVITY                          ' 4F\n         DC    CL45'RACF PROCESSING                              ' 50\n         DC    CL45'RACF INITIALIZATION                          ' 51\n         DC    CL45'SECURITY                                     ' 52\n         DC    CL45'                                             ' 53\n         DC    CL45'                                             ' 54\n         DC    CL45'                                             ' 55\n         DC    CL45'                                             ' 56\n         DC    CL45'                                             ' 57\n         DC    CL45'                                             ' 58\n         DC    CL45'                                             ' 59\n         DC    CL45'SYSTEM STATUS                                ' 5A\n         DC    CL45'                                             ' 5B\n         DC    CL45'                                             ' 5C\n         DC    CL45'                                             ' 5D\n         DC    CL45'                                             ' 5E\n         DC    CL45'                                             ' 5F\n         DC    CL45'                                             ' 60\n         DC    CL45'                                             ' 61\n         DC    CL45'                                             ' 62\n         DC    CL45'                                             ' 63\n         DC    CL45'DB2 STATISTICS                               ' 64\n         DC    CL45'DB2 ACCOUNTING                               ' 65\n         DC    CL45'DB2 PERFORMANCE                              ' 66\n         DC    CL45'                                             ' 67\n         DC    CL45'                                             ' 68\n         DC    CL45'                                             ' 69\n         DC    CL45'                                             ' 6A\n         DC    CL45'                                             ' 6B\n         DC    CL45'                                             ' 6C\n         DC    CL45'                                             ' 6D\n         DC    CL45'CICS/VS STATISTICS                           ' 6E\n         DC    CL45'                                             ' 6F\n         DC    CL45'                                             ' 70\n         DC    CL45'                                             ' 71\n         DC    CL45'                                             ' 72\n         DC    CL45'                                             ' 73\n         DC    CL45'                                             ' 74\n         DC    CL45'                                             ' 75\n         DC    CL45'                                             ' 76\n         DC    CL45'                                             ' 77\n         DC    CL45'                                             ' 78\n         DC    CL45'                                             ' 79\n         DC    CL45'                                             ' 7A\n         DC    CL45'                                             ' 7B\n         DC    CL45'                                             ' 7C\n         DC    CL45'                                             ' 7D\n         DC    CL45'                                             ' 7E\n         DC    CL45'                                             ' 7F\n         DC    CL45'                                             ' 80\n         DC    CL45'                                             ' 81\n         DC    CL45'                                             ' 82\n         DC    CL45'                                             ' 83\n         DC    CL45'                                             ' 84\n         DC    CL45'                                             ' 85\n         DC    CL45'                                             ' 86\n         DC    CL45'                                             ' 87\n         DC    CL45'                                             ' 88\n         DC    CL45'                                             ' 89\n         DC    CL45'                                             ' 8A\n         DC    CL45'                                             ' 8B\n         DC    CL45'                                             ' 8C\n         DC    CL45'                                             ' 8D\n         DC    CL45'                                             ' 8E\n         DC    CL45'                                             ' 8F\n         DC    CL45'                                             ' 90\n         DC    CL45'                                             ' 91\n         DC    CL45'                                             ' 92\n         DC    CL45'                                             ' 93\n         DC    CL45'                                             ' 94\n         DC    CL45'                                             ' 95\n         DC    CL45'                                             ' 96\n         DC    CL45'                                             ' 97\n         DC    CL45'                                             ' 98\n         DC    CL45'                                             ' 99\n         DC    CL45'                                             ' 9A\n         DC    CL45'                                             ' 9B\n         DC    CL45'                                             ' 9C\n         DC    CL45'                                             ' 9D\n         DC    CL45'                                             ' 9E\n         DC    CL45'                                             ' 9F\n         DC    CL45'                                             ' A0\n         DC    CL45'                                             ' A1\n         DC    CL45'                                             ' A2\n         DC    CL45'                                             ' A3\n         DC    CL45'                                             ' A4\n         DC    CL45'                                             ' A5\n         DC    CL45'                                             ' A6\n         DC    CL45'                                             ' A7\n         DC    CL45'                                             ' A8\n         DC    CL45'                                             ' A9\n         DC    CL45'                                             ' AA\n         DC    CL45'                                             ' AB\n         DC    CL45'                                             ' AC\n         DC    CL45'                                             ' AD\n         DC    CL45'                                             ' AE\n         DC    CL45'                                             ' AF\n         DC    CL45'                                             ' B0\n         DC    CL45'                                             ' B1\n         DC    CL45'                                             ' B2\n         DC    CL45'                                             ' B3\n         DC    CL45'                                             ' B4\n         DC    CL45'                                             ' B5\n         DC    CL45'                                             ' B6\n         DC    CL45'                                             ' B7\n         DC    CL45'                                             ' B8\n         DC    CL45'                                             ' B9\n         DC    CL45'                                             ' BA\n         DC    CL45'                                             ' BB\n         DC    CL45'                                             ' BC\n         DC    CL45'                                             ' BD\n         DC    CL45'                                             ' BE\n         DC    CL45'                                             ' BF\n         DC    CL45'                                             ' C0\n         DC    CL45'                                             ' C1\n         DC    CL45'                                             ' C2\n         DC    CL45'                                             ' C3\n         DC    CL45'                                             ' C4\n         DC    CL45'                                             ' C5\n         DC    CL45'                                             ' C6\n         DC    CL45'                                             ' C7\n         DC    CL45'                                             ' C8\n         DC    CL45'                                             ' C9\n         DC    CL45'                                             ' CA\n         DC    CL45'                                             ' CB\n         DC    CL45'                                             ' CC\n         DC    CL45'                                             ' CD\n         DC    CL45'                                             ' CE\n         DC    CL45'                                             ' CF\n         DC    CL45'                                             ' D0\n         DC    CL45'                                             ' D1\n         DC    CL45'                                             ' D2\n         DC    CL45'                                             ' D3\n         DC    CL45'                                             ' D4\n         DC    CL45'                                             ' D5\n         DC    CL45'                                             ' D6\n         DC    CL45'                                             ' D7\n         DC    CL45'                                             ' D8\n         DC    CL45'                                             ' D9\n         DC    CL45'                                             ' DA\n         DC    CL45'                                             ' DB\n         DC    CL45'                                             ' DC\n         DC    CL45'                                             ' DD\n         DC    CL45'                                             ' DE\n         DC    CL45'                                             ' DF\n         DC    CL45'                                             ' E0\n         DC    CL45'                                             ' E1\n         DC    CL45'                                             ' E2\n         DC    CL45'                                             ' E3\n         DC    CL45'                                             ' E4\n         DC    CL45'                                             ' E5\n         DC    CL45'                                             ' E6\n         DC    CL45'                                             ' E7\n         DC    CL45'                                             ' E8\n         DC    CL45'                                             ' E9\n         DC    CL45'                                             ' EA\n         DC    CL45'                                             ' EB\n         DC    CL45'                                             ' EC\n         DC    CL45'                                             ' ED\n         DC    CL45'                                             ' EE\n         DC    CL45'                                             ' EF\n         DC    CL45'                                             ' F0\n         DC    CL45'                                             ' F1\n         DC    CL45'                                             ' F2\n         DC    CL45'                                             ' F3\n         DC    CL45'                                             ' F4\n         DC    CL45'                                             ' F5\n         DC    CL45'                                             ' F6\n         DC    CL45'                                             ' F7\n         DC    CL45'                                             ' F8\n         DC    CL45'                                             ' F9\n         DC    CL45'                                             ' FA\n         DC    CL45'                                             ' FB\n         DC    CL45'                                             ' FC\n         DC    CL45'                                             ' FD\n         DC    CL45'                                             ' FE\n         DC    CL45'                                             ' FF\n         EJECT\n*---------------------------------------------------------------------*\n*                      DSECTS AND EQUATES                             *\n*---------------------------------------------------------------------*\nRECTDSCT DSECT\nRECTFLAG DS    X                   FLAG BYTE\n$FOUND   EQU   X'80'\nRECTID   DS    X                   SMF RECORD ID\nRECTHEX  DS    CL2                 PRINTABLE RECORD ID IN HEX\nRECTDEC  DS    CL3                 PRINTABLE RECORD ID IN CHARACTER\nRECTDESC DS    CL45                DESCRIPTION\nRECTCNT  DS    F                   NUMBER OF RECORDS OF THIS TYPE\nRECTRTN  DS    A                   ADDRESS OF PROCESSING ROUTINE\nRECTDCNT DS    H                   NUMBER OF DDS TO WRITE TO\nRECTDD   DS    A                   ADDRESS OF DD BLOCK 1\nRECTIOA  DS    A                   ADDRESS OF I/O AREA  1\n         DS    A                   ADDRESS OF DD BLOCK 2\n         DS    A                   ADDRESS OF I/O AREA  2\n         DS    A                   ADDRESS OF DD BLOCK 3\n         DS    A                   ADDRESS OF I/O AREA  3\n         DS    A                   ADDRESS OF DD BLOCK 4\n         DS    A                   ADDRESS OF I/O AREA  4\n         DS    A                   ADDRESS OF DD BLOCK 5\n         DS    A                   ADDRESS OF I/O AREA  5\nRECTLEN  EQU   *-RECTDSCT          LENGTH OF ENTRY\n         SPACE 2\nDDTDSCT  DSECT\nDDTDDN   DS    CL8                 DD NAME\nDDTCNT   DS    F                   NUMBER OF RECORDS WRITTEN TO DD\nDDTDCB   DS    CL96                DCB\nDDTLEN   EQU   *-DDTDSCT           LENGTH OF ENTRY\n         EJECT\n         DCBD  DSORG=PS            GENERATE DCB DSECT\nR0       EQU   0                   . R\nR1       EQU   1                   .  E\nR2       EQU   2                   .   G\nR3       EQU   3                   .    I\nR4       EQU   4                   .     S\nR5       EQU   5                   .      T\nR6       EQU   6                   .       E\nR7       EQU   7                   .        R\nR8       EQU   8                   .\nR9       EQU   9                   .          E\nR10      EQU   10                  .           Q\nR11      EQU   11                  .            U\nR12      EQU   12                  .             A\nR13      EQU   13                  .              T\nR14      EQU   14                  .               E\nR15      EQU   15                  .                S\n         SPACE 2\n         END   SMFSPLIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SUTLJCL": {"ttr": 17157, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x934\\x9f\\x00\\x934\\x9f\\x18&\\x01\\x07\\x01\\x07\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-12-15T00:00:00", "modifydate": "1993-12-15T18:26:00", "lines": 263, "newlines": 263, "modlines": 0, "user": "SBGCSC"}, "text": "./ ADD NAME=ASM\n//......   JOB ...............                                          Z\n//ASM      PROC NAME=,\n//             AP=,\n//             LIST='*'\n//ASM      EXEC PGM=IEV90,COND=(4,LT),\n//             REGION=4096K,\n//             PARM='LINECOUNT(55),DECK,NOOBJECT,XREF(SHORT),&AP'\n//SYSPRINT DD   SYSOUT=&LIST\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLIB   DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.MODGEN,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//         DD   DSN=.....maclib.....,DISP=SHR\n//         DD   DSN=.....source.....,DISP=SHR\n//SYSPUNCH DD   DSN=.....object.....(&NAME),DISP=SHR\n//SYSIN    DD   DSN=.....source.....(&NAME),DISP=SHR\n// PEND\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           ASSEMBLE ALL MODULES                                    *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//STCACT   EXEC ASM,NAME=STCACT,AP=RENT        ACTIVE REGION DATA\n//STCAPF   EXEC ASM,NAME=STCAPF,AP=RENT        APF LIST\n//STCATTN  EXEC ASM,NAME=STCATTN,AP=RENT       VTAM ATTN EXIT\n//STCCOMM  EXEC ASM,NAME=STCCOMM               COMMON DATA\n//STCCONS  EXEC ASM,NAME=STCCONS,AP=RENT       CONSOLE SUBTASK\n//STCIPL   EXEC ASM,NAME=STCIPL,AP=RENT        IPL INFO\n//STCLLA   EXEC ASM,NAME=STCLLA,AP=RENT        LINK LIST\n//STCLRAD  EXEC ASM,NAME=STCLRAD,AP=RENT       VTAM LERAD EXIT\n//STCMAIN  EXEC ASM,NAME=STCMAIN,AP=RENT       STC MAINLINE\n//STCPARM  EXEC ASM,NAME=STCPARM,AP=RENT       STC PARAMETER READER\n//STCPRTQ  EXEC ASM,NAME=STCPRTQ,AP=RENT       PRINT QUEUEING\n//STCPRTS  EXEC ASM,NAME=STCPRTS,AP=RENT       PRINT SUBTASK\n//STCSID   EXEC ASM,NAME=STCSID,AP=RENT        SMF ID\n//STCSUB   EXEC ASM,NAME=STCSUB,AP=RENT        SUBSYSTEM DISPLAY\n//STCUCB   EXEC ASM,NAME=STCUCB,AP=RENT        UCB DISPLAY\n//STCUSE   EXEC ASM,NAME=STCUSE,AP=RENT        ACTIVER USERS LIST\n//STCUSER  EXEC ASM,NAME=STCUSER,AP=RENT       USER SUBTASK MAINLINE\n//STCVTAM  EXEC ASM,NAME=STCVTAM,AP=RENT       USER SUBTASK VTAM STUFF\n//TSOACB   EXEC ASM,NAME=TSOACB,AP=RENT        TSO ACB NAMES\n//TSOACT   EXEC ASM,NAME=TSOACT,AP=RENT        ACTIVITY DISPLAY\n//TSOAPF   EXEC ASM,NAME=TSOAPF,AP=RENT        APF LIST\n//TSOCOMM  EXEC ASM,NAME=TSOCOMM               COMMON DATA\n//TSODISP  EXEC ASM,NAME=TSODISP,AP=RENT       DYNAMIC AREA MANAGER\n//TSOIPL   EXEC ASM,NAME=TSOIPL,AP=RENT        IPL INFO DISPLAY\n//TSOLLA   EXEC ASM,NAME=TSOLLA,AP=RENT        LINK LIST DISPLAY\n//TSOLRAD  EXEC ASM,NAME=TSOLRAD,AP=RENT       LERAD EXIT\n//TSOMAIN  EXEC ASM,NAME=TSOMAIN,AP=RENT       TSO MAINLINE\n//TSOMENU  EXEC ASM,NAME=TSOMENU,AP=RENT       MENU DATA\n//TSOPQRY  EXEC ASM,NAME=TSOPQRY,AP=RENT       DYNAMIC AREA PQUERY\n//TSOPRSE  EXEC ASM,NAME=TSOPRSE,AP=RENT       COMMAND PARSER\n//TSOSUB   EXEC ASM,NAME=TSOSUB,AP=RENT        SUBSYSTEM DISPLAY\n//TSOUCB   EXEC ASM,NAME=TSOUCB,AP=RENT        UCB DISPLAY\n//TSOUSE   EXEC ASM,NAME=TSOUSE,AP=RENT        LIST ACTIVE USERS\n//TSOVARS  EXEC ASM,NAME=TSOVARS,AP=RENT       SPF VARIABLE DEF/DEL\n//TSOVTAM  EXEC ASM,NAME=TSOVTAM,AP=RENT       TSO VTAM FUNCTIONS\n//* ------------------------------------------------------------------*\n//*                                                                   *\n//*                                                                   *\n//*                                                                   *\n//* ------------------------------------------------------------------*\n//COMPRESS EXEC PGM=IEBCOPY,REGION=4096K,\n//             COND=(4,LT)\n//SYSPRINT DD SYSOUT=*\n//IN1      DD DSN=.....object.....,DISP=SHR\n//OUT1     DD DSN=.....object.....,DISP=SHR\n//SYSIN    DD *\n  COPY INDD=IN1,OUTDD=OUT1\n/*\n//\n./ ADD NAME=LINK\n//.......  JOB ..............                                           Z\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK STC COMMON                                         *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKCOMM EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=.......object.......,DISP=SHR\n//SYSLMOD  DD  DSN=......loadlib.......,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(STCCOMM)                COMMON MODULE\n  ENTRY STCCOMM\n  NAME STCCOMM(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK CONSOLE SUBTASK                                    *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKCONS EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,REUS,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=.......object.......,DISP=SHR\n//SYSLMOD  DD  DSN=......loadlib.......,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(STCCONS)                CONSOLE SUBTASK\n  ENTRY STCCONS\n  NAME STCCONS(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK STC MAIN MODULE                                    *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKSTC  EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,REUS,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=.......object.......,DISP=SHR\n//SYSLMOD  DD  DSN=......loadlib.......,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(STCATTN)                VTAM ATTN EXIT\n  INCLUDE SYSLIB(STCLRAD)                VTAM LERAD EXIT\n  INCLUDE SYSLIB(STCMAIN)                MAINLINE\n  INCLUDE SYSLIB(STCPRTQ)                PRINT QUEUEING\n  ENTRY STCMAIN\n  NAME SUTLSTC(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK PARAMETER READER                                   *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKPARM EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,REUS,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=.......object.......,DISP=SHR\n//SYSLMOD  DD  DSN=......loadlib.......,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(STCPARM)                PARAMETER READER\n  ENTRY STCPARM\n  NAME STCPARM(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK PRINT SUBTASK                                      *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKPRTS EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,REUS,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=.......object.......,DISP=SHR\n//SYSLMOD  DD  DSN=......loadlib.......,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(STCPRTS)                PRINT SUBTASK\n  ENTRY STCPRTS\n  NAME STCPRTS(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK USER SUBTASK                                       *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKUSER EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,REUS,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=.......object.......,DISP=SHR\n//SYSLMOD  DD  DSN=......loadlib.......,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(STCACT)                 ACTIVE REGION DATA COLLECTOR\n  INCLUDE SYSLIB(STCAPF)                 APF LIST\n  INCLUDE SYSLIB(STCIPL)                 IPL INFO\n  INCLUDE SYSLIB(STCLLA)                 LINK LIST\n  INCLUDE SYSLIB(STCSID)                 SMF ID\n  INCLUDE SYSLIB(STCSUB)                 SUBSYSTEM DISPLAY\n  INCLUDE SYSLIB(STCUCB)                 UCB DISPLAY\n  INCLUDE SYSLIB(STCUSE)                 ACTIVE USER LIST\n  INCLUDE SYSLIB(STCUSER)                SUBTASK MAINLINE\n  INCLUDE SYSLIB(STCVTAM)                VTAM FUNCTIONS\n  ENTRY STCUSER\n  NAME STCUSER(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK ACB NAMES MODULE                                   *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKACB  EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=.......object.......,DISP=SHR\n//SYSLMOD  DD  DSN=......loadlib.......,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(TSOACB)                 ACB NAMES MODULE\n  ENTRY TSOACB\n  NAME TSOACB(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK TSO COMMON                                         *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKCOMM EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=.......object.......,DISP=SHR\n//SYSLMOD  DD  DSN=......loadlib.......,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(TSOCOMM)                COMMON MODULE\n  ENTRY TSOCOMM\n  NAME TSOCOMM(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK TSO MAIN MODULE                                    *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKTSO  EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,REUS,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=.......object.......,DISP=SHR\n//SYSLMOD  DD  DSN=......loadlib.......,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(TSOACT)                 ACTIVITY DISPLAY\n  INCLUDE SYSLIB(TSOAPF)                 APF LIST\n  INCLUDE SYSLIB(TSODISP)                DYNAMIC AREA MANAGER\n  INCLUDE SYSLIB(TSOIPL)                 IPL INFO DISPLAY\n  INCLUDE SYSLIB(TSOLLA)                 LINK LIST DISPLAY\n  INCLUDE SYSLIB(TSOLRAD)                VTAM LERAD EXIT\n  INCLUDE SYSLIB(TSOMAIN)                MAINLINE\n  INCLUDE SYSLIB(TSOMENU)                MAINLINE\n  INCLUDE SYSLIB(TSOPQRY)                DYNAMIC AREA PQUERY\n  INCLUDE SYSLIB(TSOPRSE)                COMMAND PARSER\n  INCLUDE SYSLIB(TSOSUB)                 SUBSYSTEM DISPLAY\n  INCLUDE SYSLIB(TSOUCB)                 UCB DISPLAY\n  INCLUDE SYSLIB(TSOUSE)                 LIST ACTIVE USERS\n  INCLUDE SYSLIB(TSOVARS)                SPF VARIABLE DEFINE/DELETE\n  INCLUDE SYSLIB(TSOVTAM)                TSO VTAM FUNCTIONS\n  ENTRY TSOMAIN\n  NAME SUTLTSO(R)\n/*\n//\n./ ADD NAME=SUTLPARM\nAPPLID=XXXXXXX\n./ ADD NAME=SUTLSTC\n//SUTLSTC  PROC\n//SUTLSTC  EXEC PGM=SUTLSTC,REGION=4096K\n//STEPLIB  DD DSN=......loadlib....,DISP=SHR\n//SYSUDUMP DD SYSOUT=*\n//SUTLPRT  DD SYSOUT=*\n//STCIN    DD DSN=.......jcl.......(SUTLPARM),DISP=SHR\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SUTLMAC": {"ttr": 17162, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x934\\x9f\\x00\\x934\\x9f\\x18&\\x03M\\x03M\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-12-15T00:00:00", "modifydate": "1993-12-15T18:26:00", "lines": 845, "newlines": 845, "modlines": 0, "user": "SBGCSC"}, "text": "./ ADD NAME=ABCODES  0120-93295-93320-0848-00032-00004-00000-\n         MACRO\n         ABCODES\n$U0001   EQU   0001               SUBTASK ATTACH FAILED IN STCMAIN\n$U0002   EQU   0002               SUBTASK DETACH FAILED IN STCMAIN\n$U0003   EQU   0003               SETLOGON FAILED IN STCMAIN\n$U0004   EQU   0004               INVALID COMMAND PASSED TO STCVTAM\n$U0005   EQU   0005               DUPLICATE CNOS IN STCATTN\n$U0006   EQU   0006               RECVFMH5 FAILED IN STCATTN\n$U0007   EQU   0007               DUPLICATE FMH5 IN STCATTN\n$U0008   EQU   0008               VTAM RECEIVE FAILED IN STCUSER\n$U0009   EQU   0009               UNKNOWN REGION TYPE IN STCACT\n$U0010   EQU   0010               LLT NOT PRESENT IN STCLLA\n$U0011   EQU   0011               QEDIT CIB DELETE FAILED IN STCCONS\n$U0012   EQU   0012               QEDIT SET CIB LIMIT FAILED IN STCCONS\n$U0013   EQU   0013               INVALID DEVICE CLASS IN STCUCB\n$U0014   EQU   0014               UCBSCAN FAILED IN STCUCB\n$U1002   EQU   1002               ERROR IN COMMAND PROCESSOR IN TSOMAIN\n$U1007   EQU   1007               LERAD EXIT ENTERED IN TSO INTERFACE\n$U1008   EQU   1008               DEALLOC FAILED IN TSOMAIN\n$U1009   EQU   1009               INVALID COMMAND PASSED TO TSOVARS\n$U1010   EQU   1010               INVALID VARIABLE ID PASSED TO TSOVARS\n$U1011   EQU   1011               VDEFINE FAILED IN TSOVARS\n$U1012   EQU   1012               VDELETE FAILED IN TSOVARS\n$U1013   EQU   1013               INVALID REGION TYPE IN TSOACT\n$U1014   EQU   1014               INVALID SWAP STATUS IN TSOACT\n$U1015   EQU   1015               INVALID COMMAND PASSED TO TSOVTAM\n$U1016   EQU   1016               RECEIVE FAILED IN TSOVTAM\n$U1017   EQU   1017               SEND FAILED IN TSOVTAM\n$U1018   EQU   1018               PQUERY FAILED IN TSOPQRY\n$U1019   EQU   1019               VDATA VDELETE FAILED IN TSODISP\n$U1020   EQU   1020               VDATA VDEFINE FAILED IN TSODISP\n         MEND\n./ ADD NAME=ACTDATA  0101-93309-93312-1013-00030-00030-00000-\nACTRTYPE DS    X               REGION TYPE\n$ACTRALL EQU   X'00'           .. ALL REGIONS\n$ACTRBCH EQU   C'B'            .. BATCH REGIONS\n$ACTRMNT EQU   C'M'            .. MOUNTS\n$ACTRSTC EQU   C'S'            .. STARTED TASKS\n$ACTRTSO EQU   C'T'            .. TSO USERS\nACTJPFXL DS    XL2             JOB NAME PREFIX LENGTH\nACTJPFX  DS    CL8             JOB NAME PREFIX\nACTUPFXL DS    XL2             USER NAME PREFIX LENGTH\nACTUPFX  DS    CL8             USER NAME PREFIX\nACT#     DS    XL2             NUMBER OF REGIONS RETURNED\nACTCPU   DS    XL2             CPU BUSY PERCENTAGE\nACTRGN   DS    0C\nACTRGNJN DS    CL8             JOB NAME\nACTRGNJS DS    CL8             JOB STEP\nACTRGNPS DS    CL8             PROC STEP NAME\nACTRGNUN DS    CL8             USER NAME\nACTRGNT  DS    X               REGION TYPE\nACTRGNSW DS    C               SWAP STATUS\n$ACTRGNT EQU   C'T'            .. IN TRANSITION\n$ACTRGNI EQU   C'I'            .. SWAPPED IN\n$ACTRGNO EQU   C'O'            .. SWAPPED OUT\n$ACTRGNL EQU   C'L'            .. LOGICALLY SWAPPED OUT\n$ACTRGNN EQU   C'N'            .. NON-SWAPPABLE\nACTRGNFC DS    XL4             NUMBER OF REAL PAGE FRAMES\nACTRGNSU DS    XL4             SERVICE UNITS\nACTRGNIO DS    XL4             NON-SWAP I/O'S\nACTRGNTT DS    XL8             TCB TIME\nACTRGNST DS    XL8             SRB TIME\nACTRGNL  EQU   *-ACTRGN        LENGTH OF DATA PER ADDRESS SPACE\n./ ADD NAME=APFDATA  0100-93312-93312-1107-00005-00005-00000-\nAPFDATA  DS    0C\nAPF#DSN  DS    AL2                     NUMBER OF DATASETS IN LIST\nAPFDSN   DS    CL44                    FIRST DATASET NAME\nAPFVOL   DS    CL6                     FIRST VOLUME\nAPFDSDL  EQU   *-APFDSN                PER DATASET LENGTH\n./ ADD NAME=ATTR     0100-93307-93307-1439-00004-00004-00000-\n$ATTRLOW EQU  X'01'                .. LOW INTENSITY, PROTECTED\n$ATTRHI  EQU  X'02'                .. HIGH INTENSITY, PROTECTED\n$ATTRIN  EQU  X'03'                .. LOW INTENSITY, UNPROTECTED\n$ATTRERR EQU  X'04'                .. HIGH INTENSITY, PROTECTED, RED\n./ ADD NAME=COMMCOMM 0103-93294-93312-0752-00090-00083-00000-\n         MACRO\n         COMMCOMM &COMMNAME=\n         GBLA  &MAXL,&TRSZ\n         GBLC  &TROPT\n*---------------------------------------------------------------------*\n*                                                                     *\n*          Double word for CVB/CVD                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMDWRD DC    D'0'\nCOMMDXDA DC    A(0)                WORK AREA ABOVE THE LINE\n*---------------------------------------------------------------------*\n*                                                                     *\n*          ADD TRACE ENTRY                                            *\n*                                                                     *\n*  During program initialization mainline acquires storage for the    *\n*  trace table and sets TRFIRST, TRLAST, and TRCURR.  The mainline    *\n*  also sets R11 to the address of the common area and all other      *\n*  modules depend on this remaining unchanged.  Any module except     *\n*  this module may call the trace routine.  Macro ITRACE generates    *\n*  the calling sequence.  R14 is the only register altered by the     *\n*  trace macro.                                                       *\n*                                                                     *\n*  The trace table is a \"wrap-around\" table.  TRFIRST is the first    *\n*  entry's address, TRLAST is the last entry's address, and           *\n*  TRCURR is the address of the last entry added to the table.        *\n*  When a trace entry is added to the table, the current TCB address, *\n*  current module's suffix, and 8-byte ID, and up to 2 8-byte user    *\n*  specified data items are captured.                                 *\n*                                                                     *\n*      This code depends on:                                          *\n*           R11  common area address                                  *\n*           R12  current module's base address                        *\n*           R13  address of:                                          *\n*                1. 18 word work area                                 *\n*                2. 2 8-byte data data items                          *\n*           R14  trace id's address and R14 + 8 will be the return    *\n*                address                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nTRACE000 DS    0H\n         USING DXDSAVE,R13         DEFINE BASE\n         USING MODPRFX,R12         DEFINE BASE\n         USING &COMMNAME,R11       DEFINE BASE\n         USING TRENTRY,R2          DEFINE BASE\n         STM   R14,R12,12(R13)     SAVE REGISTERS\nTRACE010 DS    0H\n         CLI   TRCURR,0\n         BNE   TRACE015\n         DC    H'0'\nTRACE015 DS    0H\n         ICM   R2,15,TRCURR        CURRENT TRACE ENTRY\n         BZ    TRACE030            NO TRACE TABLE\n         OC    0(TRENTRYL,R2),0(R2)    EMPTY ENTRY?\n         BZ    TRACE020            YES.. USE THIS ENTRY\n         LA    R2,TRENTRYL(R2)     NEXT TRACE ENTRY\n         C     R2,TRLAST           BEYOND END OF TABLE?\n         BNH   TRACE020            NO\n         L     R2,TRFIRST          'WRAP' TRACE TABLE\nTRACE020 DS    0H\n         L     R1,TRCURR           CURRENT TRACE ENTRY ADDRESS\n         CS    R1,R2,TRCURR        UPDATE 'CURRENT' ADDRESS\n         BNE   TRACE010            UNSUCCESSFUL.. TRY AGAIN\n         USING PSA,R0              DEFINE PSA BASE\n         MVC   TRETCB,PSATNEW      COPY CURRENT TCB ADDRESS\n         MVC   TREMOD,PFXMODNM+3   COPY MODULE SUFFIX\n         MVC   TREID,0(R14)        COPY TRACE ID\n         MVC   TREDATA1,TRDATA1    COPY TRACE DATA 1\n         MVC   TREDATA2,TRDATA2    COPY TRACE DATA 2\n         XC    TRDATA1,TRDATA1     CLEAR TRACE DATA\n         XC    TRDATA2,TRDATA2     CLEAR TRACE DATA\nTRACE030 DS    0H\n         LM    R14,R12,12(R13)     RESTORE REGISTERS\n         B     8(R14)              RETURN\n*---------------------------------------------------------------------*\n*                                                                     *\n*          TRACE CONTROL                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DS    0A\n         DC    CL4'1STX'           FIRST TRACE ENTRY\nTRFIRST  DC    A(0)\n         DC    CL4'LAST'           LAST TRACE ENTRY\nTRLAST   DC    A(0)\n         DC    CL4'CURR'           CURRENT TRACE ENTRY\nTRCURR   DC    A(0)\nTRADDR   DC    A(0)                TRACE TABLE STORAGE ADDRESS\nTRR14    DC    A(0)                REGISTER 14 SAVE AREA\nTRSIZE   DC    A(&TRSZ*TRENTRYL)   TRACE TABLE SIZE\n         MEND\n./ ADD NAME=FMH5     0102-93305-93306-1527-00037-00035-00000-\n         MACRO\n&NAME    FMH5  &DSECT=\n         LCLA  &LEN\n         LCLC  &DNAME\n         AIF   (T'&NAME EQ 'O').NAME10\n&DNAME   SETC  '&NAME'\n         AGO   .NAME20\n.NAME10  ANOP\n&DNAME   SETC  'FMH5'\n.NAME20  ANOP\n         AIF   ('&DSECT' EQ 'YES').DSECT00\n         AIF   ('&DSECT' EQ 'NO').CSECT00\n         MNOTE 12,'''DSECT'' IS INVALID, MUST BE ''YES'' OR ''NO'' '\n         MEXIT\n.DSECT00 ANOP\n&DNAME   DSECT\n         AGO   .COMM\n.CSECT00 ANOP\n&DNAME   DS    0A\n.COMM    ANOP\n         DC    AL1(&DNAME.L)         FMH LENGTH\n         DC    X'05'                 FMH TYPE\n         DC    XL2'02FF'             ATTACH COMMAND CODE\n         DC    X'00'                 FLAG BYTE\n         DC    X'03'                 LENGTH OF FIXED PARAMETERS FIELD\n         DC    X'D0'                 CONVERSATION TYPE (BASIC)\n         DC    X'00'                 RESERVED\n         DC    X'40'                 ALLOW CONFIRMS\n         DC    AL1(L'FMH5USER+L'FMH5SMF)   TRANSACTION DATA LENGTH\nFMH5TRAN DS    0C                    TRANSACTION (USER ID) NAME\nFMH5USER DC    CL8' '                TRANSACTION (USER ID) NAME\nFMH5SMF  DC    CL8' '                TRANSACTION (USER ID) NAME\n         DC    X'00'                 LENGTH OF SECURITY INFORMATION\n         DC    X'00'                 LENGTH OF LUW IDENTIFIER\n         DC    X'00'                 LENGTH OF CONVERSATION CORRELATOR\n&DNAME.L EQU   *-&DNAME              FMH LENGTH\n         MEND\n./ ADD NAME=IPLDATA  0101-93312-93312-1418-00005-00004-00000-\nIPLDATA  DS    0C\nIPLDATE  DS    PL4                IPL DATE\nIPLTIME  DS    XL4                IPL TIME\nIPLRES   DS    CL6                IPL VOLSER\nIPLL     EQU   *-IPLDATA\n./ ADD NAME=ITRACE   0100-93295-93295-1109-00073-00073-00000-\n.* ------------------------------------------------------------------*\n.*                                                                   *\n.*                        TRACE MACRO                                *\n.*                                                                   *\n.*       The trace function always captures the TCB address, CSECT   *\n.*       suffix, and a trace ID.                                     *\n.*                                                                   *\n.*       One or two data elements (8 bytes each) may be captured at  *\n.*       any trace point.  The data to be captured may be specified  *\n.*       in either of two ways: DATA1 or RDATA1 and DATA2 or RDATA2. *\n.*       DATA1 and RDATA1 are mutually exclusive as are DATA2 and    *\n.*       RDATA2.  DATA1 and DATA2 specify the address of data to be  *\n.*       captured.  RDATA1 and RDATA2 specify a register whose       *\n.*       contents are to be captured.                                *\n.*                                                                   *\n.*       For example:                                                *\n.*                                                                   *\n.*                 ITRACE ID=POINTA,DATA1=VALUE1,RDATA2=R4           *\n.*                                                                   *\n.*          In this case the trace entry would include the current   *\n.*          TCB address, CSECT suffix, the id \"POINTA\", 8 bytes of   *\n.*          data beginning at VALUE1's address, and the contents of  *\n.*          register 4.                                              *\n.*                                                                   *\n.* ------------------------------------------------------------------*\n         MACRO\n&NAME    ITRACE &ID=,&DATA1=,&DATA2=,&RDATA1=,&RDATA2=\n         GBLA  &MAXL,&TRSZ\n         GBLC  &TROPT\n         AIF   (T'&DATA1 NE 'O' AND T'&RDATA1 NE 'O').ERR0010\n         AIF   (T'&DATA2 NE 'O' AND T'&RDATA2 NE 'O').ERR0020\n         AIF   ('&TROPT' EQ 'OFF').MEXIT\n         AIF   ('&SYSPARM' EQ 'NOTRACE').MEXIT\n         AIF   (T'&DATA1 EQ 'O').DATA020\n         AIF   ('&DATA1'(1,1) EQ '(').DATA010\n         LA    R14,&DATA1            DATA ADDRESS\n         MVC   TRDATA1,0(R14)        MOVE DATA\n         AGO   .DATA030\n.DATA010 ANOP\n         MVC   TRDATA1,0&DATA1       MOVE DATA\n         AGO   .DATA030\n.DATA020 ANOP\n         AIF   (T'&RDATA1 EQ 'O').DATA030\n         STCM  &RDATA1,15,TRDATA1    SAVE REGISTER CONTENTS\n.DATA030 ANOP\n         AIF   (T'&DATA2 EQ 'O').DATA050\n         AIF   ('&DATA2'(1,1) EQ '(').DATA040\n         LA    R14,&DATA2            DATA ADDRESS\n         MVC   TRDATA2,0(R14)        MOVE DATA\n         AGO   .DATA060\n.DATA040 ANOP\n         MVC   TRDATA2,0&DATA2       MOVE DATA\n         AGO   .DATA060\n.DATA050 ANOP\n         AIF   (T'&RDATA2 EQ 'O').DATA060\n         STCM  &RDATA2,15,TRDATA2    SAVE REGISTER CONTENTS\n.DATA060 ANOP\n         BAL   R14,TRACE000          ENTER TRACE ROUTINE\n         AIF      (T'&ID EQ 'O').NOID\n&NAME    DC    CL8'&ID'              TRACE ID\n         AGO   .ID\n.NOID    ANOP\n&NAME    DC    CL8'**NOID**'\n.ID      ANOP\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'DATA1 AND RDATA1 ARE MUTUALLY EXCLUSIVE'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'DATA2 AND RDATA2 ARE MUTUALLY EXCLUSIVE'\n.MEXIT   ANOP\n         MEXIT\n         MEND\n./ ADD NAME=LLADATA  0100-93312-93312-1459-00003-00003-00000-\nLLADATA  DS    0C\nLLA#DSN  DS    AL2                     NUMBER OF DATASETS IN LIST\nLLADSN   DS    CL44                    FIRST DATASET NAME\n./ ADD NAME=MENUDSCT 0100-93316-93316-1058-00007-00007-00000-\nMENUDSCT DSECT\nMENUCMD  DS   CL4               COMMAND NAME\nMENUFLAG DS   AL1               FLAGS/INDICTORS\n$MENUNON EQU  X'80'             .. DON'T DISPLAY ON MENU\nMENUMOD  DS   AL4               FUNCTION PROCESSOR ENTRY POINT ADDRESS\nMENUDESC DS   CL60              COMMAND DESCRIPTION FOR MENU\nMENUL    EQU  *-MENUDSCT\n./ ADD NAME=MENUFUNC 0102-93316-93316-1408-00022-00020-00000-\n         MACRO\n         MENUFUNC &CMD,&DESC,&MOD,&DISPLAY=YES\n         GBLA  &MENUA,&MENUD\n         AIF   ('&DISPLAY' EQ 'COUNT').LBL0040\n         DC    CL4'&CMD'          COMMAND\n         AIF   ('&DISPLAY' EQ 'YES').LBL0010\n         DC    AL1($MENUNON)      NON-DISPLAY\n         AGO   .LBL0020\n.LBL0010 ANOP\n         DC    AL1(0)\n&MENUD   SETA &MENUD+1\n.LBL0020 ANOP\n&MENUA   SETA &MENUA+1\n         DC    VL4(&MOD)          ADDRESS OF COMMAND PROCESSOR\n         AIF   ('&DISPLAY' EQ 'NO').LBL0030\n         DC    CL60&DESC          COMMAND DESCRIPTION\n.LBL0030 ANOP\n         MEXIT\n.LBL0040 ANOP\n$MENUA   EQU   &MENUA\n$MENUD   EQU   &MENUD\n         MEND\n./ ADD NAME=MODPRFX  0102-93294-93305-1034-00007-00056-00000-\nMODPRFX  DSECT\n         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS                 ASE00110\n         LR    R12,R15             LOAD PERMANENT BASE                  ASE00120\n         B     0(R0)               BRANCH AROUND MOD NAME/DATE/TIME\nPFXMODNM DS    CL8                 MODULE NAME\nPFXMODDT DS    CL8                 ASSEMBLY DATE\nPFXMODTM DS    CL6                 ASSEMBLY TIME\n./ ADD NAME=OPTIONS  0101-93294-93294-1044-00003-00003-00000-\n         GBLA  &MAXL,&TRSZ\n         GBLC  &TROPT\n         SUTLOPT TRACE=ON\n./ ADD NAME=PARSEREQ 0100-93307-93307-1435-00013-00013-00000-\n         MACRO\n         PARSEREQ &DSECT=YES\n         AIF   ('&DSECT' EQ 'NO').LBL0010\nPARSEREQ DSECT\n         AGO  .LBL0020\n.LBL0010 ANOP\nPARSEREQ DS   0A\n.LBL0020 ANOP\nPARSELEN DS   H                   LENGTH OF OUTPUT\nPARSEIN  DS   CL80                INPUT STRING\nPARSEOUT DS   CL80                OUTPUT STRING\nPARSEREQL EQU *-PARSEREQ\n         MEND\n./ ADD NAME=PRTBLOK  0100-93295-93295-1111-00023-00023-00000-\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PRINTER REQUEST BLOCK                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         PRTBLOK &DSECT=YES\n         AIF   ('&DSECT' EQ 'YES').LBL0010\nPRTBLOK  DS    0A\n         AGO   .LBL0020\n.LBL0010 ANOP\nPRTBLOK  DSECT\n.LBL0020 ANOP\nPRTEYE   DS    CL8                 EYECATCHER\nPRTNEXT  DS    A                   NEXT BLOCK ON THE CHAIN\nPRTCMD   DS    C                   COMMAND\n$PRTHEAD EQU   C'H'                .. PRINT HEADING\n$PRTPRT  EQU   C'P'                .. PRINT\nPRTCC    DS    C                   CARRIAGE CONTROL\nPRTMSGID DS    CL11                MESSAGE ID\nPRTDATA  DS    CL120               PRINT DATA\nPRTBLOKL EQU   *-PRTBLOK\n         MEND\n./ ADD NAME=REGEQU   0100-93294-93294-1031-00016-00016-00000-\nR0       EQU    0\nR1       EQU    1\nR2       EQU    2\nR3       EQU    3\nR4       EQU    4\nR5       EQU    5\nR6       EQU    6\nR7       EQU    7\nR8       EQU    8\nR9       EQU    9\nR10      EQU    10\nR11      EQU    11\nR12      EQU    12\nR13      EQU    13\nR14      EQU    14\nR15      EQU    15\n./ ADD NAME=STCCOMM  0115-93294-93313-1120-00101-00097-00000-\n         MACRO\n         STCCOMM &TYPE=\n*---------------------------------------------------------------------*\n*                                                                     *\n*          COMMON AREA MAPPING MACRO                                  *\n*                                                                     *\n*     This macro will generate either the 'common' module CSECT or    *\n*     a DSECT to map the 'common' module.  'Common' is used for       *\n*     constants and work areas that are required by several modules   *\n*     allowing some elimination of duplicated data and to allow       *\n*     inter-module communication.                                     *\n*                                                                     *\n*     The trace table code is also incorporated into the 'common'     *\n*     area.                                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         GBLA  &MAXL,&TRSZ\n         GBLC  &TROPT\n         AIF   ('&TYPE' EQ 'CSECT').CSECT\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n         MNOTE 12,'INVALID TYPE'\n         MEXIT\n.CSECT   ANOP\nSTCCOMM  CSECT\nSTCCOMM  AMODE 31\nSTCCOMM  RMODE ANY\n         AGO   .NODSECT\n.DSECT   ANOP\nSTCCOMM  DSECT\n.NODSECT ANOP\n         COMMCOMM COMMNAME=STCCOMM\n*---------------------------------------------------------------------*\n*                                                                     *\n*        MODULE ENTRY POINTS                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DC    CL8'STCATTN'\nAATTN    DC    A(0)                VTAM ATTN EXIT ENTRY POINT\n         DC    CL8'STCCOMM'\nACOMM    DC    A(STCCOMM)          COMMON MODULE\n         DC    CL8'STCCONS'\nACONS    DC    A(0)                CONSOLE COMMUNICATION\n         DC    CL8'STCLRAD'\nALRAD    DC    A(0)                VTAM LERAD EXIT ENTRY POINT\n         DC    CL8'STCMAIN '\nAMAIN    DC    A(0)                MAINLINE MODULE ENTRY POINT\n         DC    CL8'STCPRTQ'\nAPRTQ    DC    A(0)                PRINT QUEUING SUBROUTINE ENTRY POINT\n         DC    CL8'STCPRTS'\nAPRTS    DC    A(0)                PRINT SUBTASK ENTRY POINT\n*---------------------------------------------------------------------*\n*                                                                     *\n*          GLOBAL DATA                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMACB  DC    A(0)                ACB'S ADDRESS\nCOMMXLST DC    A(0)                EXIT LIST'S ADDRESS\nCOMMUSER DC    A(0)                USER SESSION BLOCK CHAIN\nCOMMAECB DC    A(0)                ECB POSTED BY ATTN EXIT\nCOMMTECB DC    A(0)                TERMINATE ECB\nCOMMAPLL DC    AL1(L'COMMAPLN)     LENGTH OF APPL ID\nCOMMAPLN DC    CL8' '              OUR VTAM APPL ID\nCOMMMAXL DC    PL3'&MAXL'          LINES PER PAGE ON SYSOUT DATASETS\nCOMMFLAG DC    X'00'               GLOBAL FLAGS\n$ABEND   EQU   X'80'               .. ABEND AT END OF JOB\n$ABORT   EQU   X'40'               .. SERIOUS ERROR, ABORT\n$COMMPRT EQU   X'20'               .. PRINT SUBTASK ACTIVE\n$COMMCON EQU   X'10'               .. CONSOLE SUBTASK IS ACTIVE\nCOMMEOJ  DC    X'00'               EOJ FLAGS\n$EOJ1    EQU   X'80'               .. EOJ PHASE 1  NO NEW USER SESSIONS\n$EOJ2    EQU   X'40'               .. EOJ PHASE 2  NO SESSIONS ACTIVE\n$EOJ3    EQU   X'20'               .. EOJ PHASE 3  ACB CLOSED\n$EOJ8    EQU   X'01'               .. FREE WORK AREAS\nCOMMBLKS DC    CL140' '            CONSTANT\nCOMMIOSZ EQU   32760\n*---------------------------------------------------------------------*\n*                                                                     *\n*          PRINT SUBTASK CONTROL                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMPRT  DC    A(0)                PRINT SUBTASK'S TCB ADDRESS\nPRTREQ   DC    A(0)                PRINT SUBTASK REQUEST QUEUE\nPRTTERM  DC    A(0)                PRINT SUBTASK TERMINATION ECB\nPRTWORK  DC    A(0)                PRINT WORK TO DO ECB\n*---------------------------------------------------------------------*\n*                                                                     *\n*          CONSOLE SUBTASK CONTROL                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMCONS DC    A(0)                CONSOLE SUBTASK'S TCB ADDRESS\nCONSTERM DC    A(0)                CONSOLE SUBTASK TERMINATION ECB\nCOMMCECB DC    A(0)                CONSOLE ECB ADDRESS\nCONSDXDA DC    A(0)                CONSOLE SUBTASK WORK AREA ADDRESS\n*---------------------------------------------------------------------*\nCOMMEND  EQU   *\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY  TRENTRY\n         COPY  MODPRFX\n         MEND\n./ ADD NAME=SUTLOPT  0100-93294-93294-1020-00010-00010-00000-\n         MACRO\n         SUTLOPT &MAXLINE=60,         LINES PER PAGE ON SYSOUT         +\n               &TRSIZE=500,           NUMBER OF TRACE TABLE ENTRIES    +\n               &TRACE=ON              INTERNAL TRACE CONTROL\n         GBLA  &MAXL,&TRSZ\n         GBLC  &TROPT\n&MAXL    SETA  &MAXLINE\n&TRSZ    SETA  &TRSIZE\n&TROPT   SETC  '&TRACE'\n         MEND\n./ ADD NAME=SUTLSAVE 0103-93294-93305-1341-00021-00017-00000-\n         MACRO\n&NAME    SUTLSAVE &DSECT=NO\n         LCLC   &DNAME\n         AIF    ('&DSECT' EQ 'YES').LBL0010\n         AIF    ('&DSECT' EQ 'NO').LBL0020\n         MNOTE  12,'INVALID ''DSECT'' PARAMETER'\n         MEXIT\n.LBL0010 ANOP\n         AIF    (T'&NAME EQ 'O').LBL001A\n&DNAME   SETC   '&NAME'\n         AGO    .LBL001B\n.LBL001A ANOP\n&DNAME   SETC   'SUTLSAVE'\n.LBL001B ANOP\n&DNAME   DSECT\n.LBL0020 ANOP\nDXDSAVE  DS    18F\nDXDID    DS    CL8\nTRDATA1  DS    CL8\nTRDATA2  DS    CL8\n         MEND\n./ ADD NAME=TRENTRY  0100-93294-93294-1106-00012-00012-00000-\n*---------------------------------------------------------------------*\n*                                                                     *\n*          TRACE TABLE ENTRY                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nTRENTRY  DSECT\nTRETCB   DS    XL4                 TCB ADDRESS\nTREMOD   DS    CL4                 MODULE SUFFIX\nTREID    DS    CL8                 TRACE ID\nTREDATA1 DS    CL8                 TRACE DATA 1\nTREDATA2 DS    CL8                 TRACE DATA 2\nTRENTRYL EQU   *-TRENTRY           ENTRY LENGTH\n./ ADD NAME=TSOCOMM  0124-93306-93322-1312-00129-00122-00000-\n*---------------------------------------------------------------------*\n*                                                                     *\n*          TSO COMMON AREA MAPPING MACRO                              *\n*                                                                     *\n*     This macro will generate either the 'common' module CSECT or    *\n*     a DSECT to map the 'common' module.  'Common' is used for       *\n*     constants and work areas that are required by several modules   *\n*     allowing some elimination of duplicated data and to allow       *\n*     inter-module communication.                                     *\n*                                                                     *\n*     The trace table code is also incorporated into the 'common'     *\n*     area.                                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         TSOCOMM &TYPE=\n         GBLA  &MAXL,&TRSZ\n         GBLC  &TROPT\n         AIF   ('&TYPE' EQ 'CSECT').CSECT\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n         MNOTE 12,'INVALID TYPE'\n         MEXIT\n.CSECT   ANOP\nTSOCOMM  CSECT\nTSOCOMM  AMODE 31\nTSOCOMM  RMODE ANY\n         AGO   .NODSECT\n.DSECT   ANOP\nTSOCOMM  DSECT\n.NODSECT ANOP\n         COMMCOMM COMMNAME=TSOCOMM\n*---------------------------------------------------------------------*\n*                                                                     *\n*               MODULE ENTRY POINTS                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DC    CL8'TSOCOMM'\nACOMM    DC    A(TSOCOMM)          COMMON MODULE\n         DC    CL8'TSODISP'\nADISP    DC    A(0)                DYNAMIC AREA DISPLAY\n         DC    CL8'TSOLRAD'\nALRAD    DC    A(0)                LERAD EXIT\n         DC    CL8'TSOMAIN'\nAMAIN    DC    A(0)                TSO MAINLINE MODULE\n         DC    CL8'TSOMENU'\nAMENU    DC    A(0)                TSO MENU DATA\n         DC    CL8'TSOPQRY'\nAPQRY    DC    A(0)                DYNAMIC AREA PQUERY\n         DC    CL8'TSOPRSE'\nAPRSE    DC    A(0)                COMMAND PARSER\n         DC    CL8'TSOVARS'\nAVARS    DC    A(0)                SPF VARIABLE DEFINE/DELETE\n         DC    CL8'TSOVTAM'\nAVTAM    DC    A(0)                TSO VTAM FUNCTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SPF INTEFACE ENTRY POINT                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DC    CL8'ISPLINK'\nAISPLINK DC    A(0)                SPF INTERFACE ENTRY POINT\n*---------------------------------------------------------------------*\n*                                                                     *\n*          GLOBAL DATA                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMACB  DC    A(0)                ACB'S ADDRESS\nCOMMRPL  DC    A(0)                RPL'S ADDRESS\nCOMMRPLX DC    A(0)                RPL EXTENSION'S ADDRESS\nCOMMNIB  DC    A(0)                NIB'S ADDRESS\nCOMMXLST DC    A(0)                EXLST'S ADDRESS\nCOMMIOA  DC    A(0)                I/O AREA ADDRESS\nCOMMTXA  DC    A(0)                TEXT AREA ADDRESS\nCOMMTXSZ DC    F'0'                TEXT AREA SIZE\nCOMMVDA  DC    A(0)                DYNAMIC AREA (VDATA) ADDRESS\nCOMMVDL  DC    F'0'                DYNAMIC AREA (VDATA) SIZE\nCOMMVDC  DC    F'0'                CURSOR POSITION WITHIN DYNAMIC AREA\nCOMMTXO  DC    F'0'                OFFSET FOR TEXT\nCOMMTXRL DC    F'0'                RELATIVE LINE IN TEXT\nCOMMTXL  DC    F'0'                NUMBER OF LINES OF TEXT\nCOMMTXLL DC    F'0'                LINE LENGTH OF TEXT\nCOMMAPLL DC    AL1(8)              APPLID'S LENGTH\nCOMMAPLN DC    CL8' '              APPLID\nCOMMSUTL DC    CL8' '              SUTL STC'S APPLID\nCOMMCID  DC    XL4'00'             CONVERSATION ID\nCOMMFLAG DC    X'00'               GLOBAL FLAGS\n$ABEND   EQU   X'80'               .. ABEND AT END OF JOB\n$ABORT   EQU   X'40'               .. SERIOUS ERROR, ABORT\n$VDEF    EQU   X'20'               .. VDEFINE'S PERFORMED\n$ACBOPEN EQU   X'10'               .. ACB IS OPEN\n$SESSALO EQU   X'08'               .. SESSION ALLOCATED\nCOMMVCMD DC    C' '                VTAM COMMAND\n$VTAMRCV EQU   C'R'                .. ISSUE A RECEIVE\n$VTAMSND EQU   C'S'                .. ISSUE A SEND\nDISPFLAG DC    X'00'               GLOBAL FLAGS\n$NSCROLL EQU   X'80'               .. NO SCROLLING\n$NCURSOR EQU   X'40'               .. NO CURSOR DATA\nCOMMPANL DC    CL8' '              PANEL NAME\nCOMMRC   DC    X'00'               RETURN CODE\nCOMMBLKS DC    CL80' '\nCOMMIOSZ EQU   32760\n*\n* Any fields that are defined as SPF variables must be below LVLINE   *\n*\nLVLINE   DC    F'0'                LAST VISIBLE LINE\nVWIDTH   DC    F'0'                DYNAMIC AREA WIDTH\nVCOL     DC    F'0'                DYNAMIC AREA COLUMN\nVDEPTH   DC    F'0'                DYNAMIC AREA DEPTH\nVROW     DC    F'0'                DYNAMIC AREA ROW\nVTYPE    DC    CL8' '              DYNAMIC AREA TYPE\nZSCROLLN DC    F'0'                NUMBER OF LINES TO SCROLL\nZSCROLLA DC    CL8' '              SCROLL AMOUNT\nZVERB    DC    CL8' '              SPF VERB\nCOMMSMF  DC    CL4' '              USER'S SYSTEM'S SMF ID\nCOMMUID  DC    CL8' '              USER'S ID\n         SPACE 1\nCOMMMSG  DS    0CL70               MESSAGE\nCOMMMSGI DS    CL11                .. MESSAGE ID\nCOMMMSGT DS    CL59                .. MESSAGE TEXT\n         SPACE 1\nZCMD     DS    CL80                SPF COMMAND AREA\nCOMMEND  EQU   *\n         SPACE 2\n         COPY  TRENTRY\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY  MODPRFX\n         MEND\n./ ADD NAME=UCBDATA  0101-93320-93320-1438-00020-00008-00000-\nUCB#     DS    H                     NUMBER OF DEVICES RETURNED\nUCBDEVNL DS    H                     DEVICE NUMBER LENGTH\nUCBDEVN  DS    XL4                   DEVICE NUMBER (EXPANDED BINARY)\nUCBCLASS DS    X                     CLASS OF DEVICES WANTED\n$UCBALL  EQU   X'00'                 .. ALL DEVICE CLASSES\n$UCBDASD EQU   X'01'                 .. DASD DEVICES\n$UCBTAPE EQU   X'02'                 .. TAPE DEVICES\nUCBDATA  DS    0C\nUCBSNBR  DS    XL2                DEVICE NUMBER\nUCBSTYPE DS    XL2                DEVICE TYPE\nUCBSSTAT DS    X                  DEVICE STATUS\n$UCBON   EQU   X'01'              .. DEVICE IS ONLINE\n$UCBOFF  EQU   X'02'              .. DEVICE IS OFFLINE\n$UCBBOX  EQU   X'03'              .. DEVICE IS OFFLINE/BOXED\nUCBSVOL  DS    CL6                VOLSER\nUCBSCHP  DS    XL8                CHPID ID'S\nUCBSCHPD DS    X                  MASK FOR CHPIDS DEFINED\nUCBSCHPO DS    X                  MASK FOR CHPIDS ONLINE\nUCBSCHPL DS    X                  MASK FOR LAST PATH USED\nUCBSL    EQU   *-UCBDATA          LENGTH OF DATA PER UCB\n./ ADD NAME=USERBLOK 0110-93302-93312-0808-00030-00017-00000-\n         MACRO\n         USERBLOK\nUSERBLOK DSECT\n         DS    CL8                EYECATCHER\nUSERNEXT DS    A                  NEXT USER BLOCK\nUSERID   DS    CL8                USER'S ID\nUSERLU   DS    CL8                USER'S LU NAME\nUSERCID  DS    XL4                SESSION'S CID\nUSERCOMM DS    A                  STCCOMM ADDRESS\nUSERTCB  DS    A                  TCB ADDRESS\nUSERDXDA DS    A                  WORK AREA BASE ADDRESS\nUSERRPL  DS    A                  RPL ADDRESS\nUSERRPLX DS    A                  RPL EXTENSION ADDRESS\nUSERIO   DS    A                  I/O AREA ADDRESS\nUSERTERM DS    A                  ECB POSTED WHEN SUBTASK TERMINATES\nUSERECB  DS    A                  ECB FOR VTAM FUNCTIONS\nUSERRCVC DS    A                  NUMBER OF RECEIVES\nUSERSNDC DS    A                  NUMBER OF SENDS\nUSERRCVL DS    A                  TOTAL NUMBER OF BYTES RECEIVED\nUSERSNDL DS    A                  TOTAL NUMBER OF BYTES SENT\nUSERSTAT DS    X                  STATUS\n$USERINT EQU   X'01'              .. INITIAL STATUS\n$USERACT EQU   X'02'              .. USER SUBTASK ATTACHED AND ACTIVE\n$USERLOS EQU   X'03'              .. SESSION TO USER LU LOST\n$USERDAL EQU   X'04'              .. SESSION TO USER DEALLOCATED\nUSERVCMD DS    X                  VTAM COMMAND\n$USERRCV EQU   X'01'              .. ISSUE A RECEIVE\n$USERSND EQU   X'02'              .. ISSUE A SEND\nUSERL    EQU   *-USERBLOK\n         MEND\n./ ADD NAME=VARDSECT 0101-93306-93307-1332-00010-00012-00000-\n* ------------------------------------------------------------------- *\n*              VARIABLE TABLE ENTRIES                                 *\n* ------------------------------------------------------------------- *\nVARDSECT DSECT\nVARNAME  DS    CL8                   NAME KNOWN TO SPF\nVARLEN   DS    AL4                   VARIABLE LENGTH\nVARFORM  DS    CL8                   VARIABLE FORMAT\nVARID    DS    AL2                   VARIABLE'S 'ID'\nVARDISP  DS    AL2                   DISPLACEMENT TO DATA\nVARL     EQU   *-VARDSECT\n./ ADD NAME=VARREQ   0100-93306-93306-1510-00024-00024-00000-\n*---------------------------------------------------------------------*\n*                                                                     *\n*        VARIABLE DEFINE/DELETE REQUEST                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         VARREQ  &DSECT=YES\n         AIF   ('&DSECT' EQ 'YES').LBL0010\nVARREQ   DS    0A\n         AGO   .LBL0020\n.LBL0010 ANOP\nVARREQ   DSECT\n.LBL0020 ANOP\nVARIDS   DS    A                   ID LIST ADDRESS\nVARTBLE  DS    A                   ADDRESS OF VARIABLE TABLE\nVARAREA  DS    A                   ADDRESS OF VARIABLE DATA AREA\nVARNBR   DS    H                   NUMBER OF VARIABLES IN ID LIST\nVARCMD   DS    C                   COMMAND\n$VARDEFA EQU   X'01'               .. DEFINE (ALL)\n$VARDEFS EQU   X'02'               .. DEFINE (SPECIFIC)\n$VARDEL  EQU   X'03'               .. DELETE (SPECIFIC)\n$VAREOJ  EQU   X'04'               .. DELETE (ALL)\nVARREQL  EQU   *-VARREQ\n         MEND\n./ ADD NAME=VDEF     0103-93306-93307-1330-00063-00065-00015-\n         MACRO\n         VDEF  &BASE=,               BASE ADDRESS OF VARIABLES AREA    +\n               &NAME=,               NAME DEFINED TO SPF               +\n               &DATA=,               DATA ADDRESS                      +\n               &LENGTH=,             DATA LENGTH                       +\n               &FORM=                DATA FORMAT\n         GBLA  &MAXL,&TRSZ\n         GBLB  &VINIT\n         GBLC  &AREA,&TROPT\n         GBLC  &VDEFGBL(100)\n         LCLA  &SUB\n         AIF   (T'&BASE EQ 'O').LBL0010\n&AREA    SETC  '&BASE'\n&VINIT   SETB  0                     NEW AREA... RESET INIT SWITCH\n         MEXIT\n.LBL0010 ANOP\n         AIF   (&VINIT).LBL0030\n&VINIT   SETB  1\n&SUB     SETA  1\n.LBL0020 ANOP\n&VDEFGBL(&SUB)  SETC ' '\n         AIF   (&SUB EQ 100).LBL0030\n&SUB     SETA   &SUB+1\n         AGO   .LBL0020\n.LBL0030 ANOP\n         AIF   (T'&NAME EQ 'O').ERR0010\n         AIF   (T'&LENGTH  EQ 'O').ERR0020\n         AIF   (T'&FORM    EQ 'O').ERR0030\n&SUB     SETA  1\n.LBL0040 ANOP\n         AIF   ('&VDEFGBL(&SUB)' EQ ' ').LBL0050\n         AIF   ('&VDEFGBL(&SUB)' EQ '&NAME').ERR0040\n         AIF   (&SUB EQ 100).ERR0050\n&SUB     SETA  &SUB+1\n         AGO   .LBL0040\n.LBL0050 ANOP\n&VDEFGBL(&SUB) SETC '&NAME'\n         AIF   ('&AREA' EQ '').ERR0060\n         DC    CL8'&NAME'             NAME KNOWN TO SPF\n         DC    AL4(&LENGTH)           LENGTH\n         DC    CL8'&FORM'             VARIABLE FORMAT\n         DC    AL2(&SUB)              VARIABLE'S 'ID' NUMBER\n         DC    AL2(&DATA-&AREA)       DISPLACEMENT TO DATA\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'NAME IS A REQUIRED PARAMETER'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'LENGTH IS A REQUIRED PARAMETER'\n         MEXIT\n.ERR0030 ANOP\n         MNOTE 12,'FORM IS A REQUIRED PARAMETER'\n         MEXIT\n.ERR0040 ANOP\n         MNOTE 12,'VARIABLE NAME IS DUPLICATED'\n         MEXIT\n.ERR0050 ANOP\n         MNOTE 12,'VDEFGBL IS FULL'\n         MEXIT\n.ERR0060 ANOP\n         MNOTE 12,'BASE MUST BE DEFINED BEFORE VARIABLES CAN BE DEFINED+\n               '\n         MEND\n./ ADD NAME=VTAMIO   0106-93295-93316-1550-00028-00023-00000-\n         MACRO\n         VTAMIO &DSECT=NO\n         AIF   ('&DSECT' EQ 'YES').LBL0010\n         AIF   ('&DSECT' EQ 'NO').LBL0020\n         MNOTE 12,'INVALID ''DSECT'' PARAMETER'\n         MEXIT\n.LBL0010 ANOP\nVTAMIO   DSECT\n         AGO   .LBL0030\n.LBL0020 ANOP\nVTAMIO   DS   0H\n.LBL0030 ANOP\nVTAMLEN  DS   H\nVTAMFNC  DS   AL1                 FUNCTION\n$VTAMSID EQU  0                   .. SYSTEM IDENTIFICATION\n$VTAMACT EQU  1                   .. ACTIVITY DISPLAY\n$VTAMAPF EQU  2                   .. APF LIST DISPLAY\n$VTAMIPL EQU  3                   .. IPL DATA DISPLAY\n$VTAMLLA EQU  4                   .. LINK LIST DISPLAY\n$VTAMSUB EQU  5                   .. DISPLAY SUBSYTEMS\n$VTAMUCB EQU  6                   .. UCB/DEVICE INFO DISPLAY\n$VTAMUSE EQU  7                   .. ACTIVE USERS LIST\nVTAMRC   DS   XL2                 RETURN CODE\nVTAMDATA DS   (COMMIOSZ)X         I/O AREA\n         ORG  VTAMDATA\nVTAMMSG  DS   CL80                MESSAGE\n         ORG  VTAMDATA+COMMIOSZ\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SUTLPNL": {"ttr": 17668, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x934\\x9f\\x00\\x934\\x9f\\x18'\\x00\\xb7\\x00\\xb7\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-12-15T00:00:00", "modifydate": "1993-12-15T18:27:00", "lines": 183, "newlines": 183, "modlines": 0, "user": "SBGCSC"}, "text": "./ ADD NAME=SUTLACT\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT) INTENS(LOW)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAOUT) INTENS(HIGH)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                             / /            %SCROLL ===>_VSCR+\n%SUTL ACTIVE MVS REGIONS --------- SYSTEM:%&PSMF -------/-/--------------------+\n+\n+ &PMSGI       &PMSGT\n+\n%  JOB PREFIX:&JPFX   %     USER PREFIX:&UPFX   %                    CPU &CPU  +\n+\n%  JOB     STEP    PROCSTEP USER     TYP SWP   REAL SERVICE   I-O'S   CPU TIME\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n./ ADD NAME=SUTLAPF\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT) INTENS(LOW)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAOUT) INTENS(HIGH)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                             / /            %SCROLL ===>_VSCR+\n%SUTL APF AUTHORIZED LIBRARIES --- SYSTEM:%&PSMF -------/-/--------------------+\n+\n+ &PMSGI      &PMSGT\n+\n+             *----------- DATA SET NAME ---------------*   VOLSER\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA)\n)PROC\n  &LVLINE = LVLINE(VDATA)\n)END\n./ ADD NAME=SUTLIPL\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT) INTENS(LOW)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAOUT) INTENS(HIGH)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                             / /            %SCROLL ===>_VSCR+\n%SUTL SYSTEM IPL INFO ------------ SYSTEM:%&PSMF -------/-/--------------------+\n+\n+ &PMSGI      &PMSGT\n+\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA)\n)PROC\n  &LVL = LVLINE(VDATA)\n)END\n./ ADD NAME=SUTLLLA\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT) INTENS(LOW)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAOUT) INTENS(HIGH)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                             / /            %SCROLL ===>_VSCR+\n%SUTL SYSTEM LINK LIST ----------- SYSTEM:%&PSMF  ------/-/--------------------+\n+\n+ &PMSGI      &PMSGT\n+\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA)\n)PROC\n  &LVL = LVLINE(VDATA)\n)END\n./ ADD NAME=SUTLMENU\n)ATTR\n  $ TYPE(OUTPUT) INTENS(HIGH) SKIP(ON) JUST(ASIS)\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAOUT) INTENS(HIGH)\n)BODY\n%-------------------------- SUTL MAIN MENU ---------------------------- &PSMF\n                                                            +User     - &PUID\n                                                            +Time     - &ZTIME\n                                                            +Terminal - &ZTERM\n\n%OPTION  ===>_ZCMD                                                             +\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n\n  $PMSGI      $PMSGT\n\n+PRESS%END KEY+TO TERMINATE\n)INIT\n.CURSOR = ZCMD\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA)\n)PROC\n  &LVL = LVLINE(VDATA)\n)END\n./ ADD NAME=SUTLSUB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT) INTENS(LOW)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAOUT) INTENS(HIGH)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                             / /            %SCROLL ===>_VSCR+\n%SUTL SUBSYSTEM LIST ------------- SYSTEM:%&PSMF  ------/-/--------------------+\n+\n+ &PMSGI      &PMSGT\n+\n%                    Name FL ID   SSVT     SUSE     SYN\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA)\n)PROC\n  &LVL = LVLINE(VDATA)\n)END\n./ ADD NAME=SUTLUCB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT) INTENS(LOW)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAOUT) INTENS(HIGH)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%SUTL UNIT CONTROL BLOCK --------- SYSTEM:%&PSMF  ------/-/--------------------+\n%COMMAND ===>_ZCMD                             / /            %SCROLL ===>_VSCR+\n+\n+ &PMSGI       &PMSGT\n+\n+  SEARCH BY:&ARGT            &ARG\n+\n+         Addr Devt    Status  Alo Volser  *.......CHPID's.......* Last\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n./ ADD NAME=SUTLUSE\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT) INTENS(LOW)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAOUT) INTENS(HIGH)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                             / /            %SCROLL ===>_VSCR+\n%SUTL ACTIVE USERS --------------- SYSTEM:%&PSMF -------/-/--------------------+\n+\n+ &PMSGI       &PMSGT\n+\n% Userid    LU       CID    Func  VTAM    *......SENDs.....* *.....RECVs......*\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SUTLREX": {"ttr": 17672, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x934\\x9f\\x00\\x934\\x9f\\x18'\\x00W\\x00W\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-12-15T00:00:00", "modifydate": "1993-12-15T18:27:00", "lines": 87, "newlines": 87, "modlines": 0, "user": "SBGCSC"}, "text": "./ ADD NAME=SUTL\n/* REXX ------------------------------------------------------------ */\n/*                                                                   */\n/*   Each system's should have its own version of this EXEC because  */\n/*   you will want a different default APPL id.                      */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\n#ARGS = ARG()\n\n/* ----------------------------------------------------------------- */\n/*   Set the SUTL_NODE value to whichever STC appl id you want the   */\n/*   users to get if they only enter the EXEC name \"SUTL\".           */\n/* ----------------------------------------------------------------- */\n\nIF #ARGS = 0 THEN\n   SUTL_NODE = default applid          /* Define default APPL id */\nELSE\n   DO\n   PARSE UPPER ARG APPL\n   SUTL_NODE = APPL\n   END\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/*   Use one IF statement per name to \"equate\" a name to a STC APPL  */\n/*                                                                   */\n/*   For example assume you have two systems:                        */\n/*                                                                   */\n/*     1) a production system, and SUTL STC applid id is PRODSUTL    */\n/*     2) a test system, and SUTL STC applid is TESTSUTL             */\n/*                                                                   */\n/*    you could use                                                  */\n/*                                                                   */\n/*     IF SUTL_NODE = PROD  THEN                                     */\n/*        SUTL_NODE = PRODSUTL                                       */\n/*                                                                   */\n/*     IF SUTL_NODE = TEST  THEN                                     */\n/*        SUTL_NODE = TESTSUTL                                       */\n/*                                                                   */\n/*    You can use multiple statements for the same system.  If you   */\n/*    have a system in Dallas, TX, you could use                     */\n/*                                                                   */\n/*     IF SUTL_NODE = DALLAS THEN                                    */\n/*        SUTL_NODE = BIGDSUTL                                       */\n/*                                                                   */\n/*     IF SUTL_NODE = BIGD  THEN                                     */\n/*        SUTL_NODE = BIGDSUTL                                       */\n/*                                                                   */\n/*    This would allow the user to enter                             */\n/*                                                                   */\n/*      \"SUTL DALLAS\"                                                */\n/*          or                                                       */\n/*      \"SUTL BIGD\"                                                  */\n/*          or                                                       */\n/*      just \"SUTL\" if the default is set to BIGDSUTL.               */\n/*                                                                   */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nIF SUTL_NODE = name1  THEN\n   SUTL_NODE = applid1\n\nIF SUTL_NODE = name2  THEN\n   SUTL_NODE = applid2\n\nIF SUTL_NODE = name3  THEN\n   SUTL_NODE = applid3\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\nADDRESS \"ISPEXEC\" \"SELECT CMD(SUTL1 \"SUTL_NODE\" ) NEWAPPL(SUTL)\"\n\nEXIT (0)\n./ ADD NAME=SUTL1\n/* REXX ------------------------------------------------------------ */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nPARSE UPPER ARG APPL\n\nADDRESS TSO ISPEXEC \"LIBDEF ISPPLIB DATASET ID('.....ispplib.....')\"\n\nADDRESS TSO ISPEXEC \"SELECT PGM(SUTLTSO) PARM(\" || APPL || \")\"\n\nEXIT (0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SUTLSRC": {"ttr": 17675, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x934\\x9f\\x00\\x934\\x9f\\x18'\\x1d:\\x1d:\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-12-15T00:00:00", "modifydate": "1993-12-15T18:27:00", "lines": 7482, "newlines": 7482, "modlines": 0, "user": "SBGCSC"}, "text": "./ ADD NAME=$DOC\n1             System Utility (SUTL)\n0SUTL is a VTAM LU 6.2 application that allows a TSO user to obtain\n information about executing jobs, the APF list, IPL date/time/SYSRES,\n link list, etc.  Most of this information is usually available via\n other utilities already in use, so why bother going to the trouble of\n 're-inventing' this wheel and adding VTAM over-head in the process?\n Being a VTAM application means that a TSO user can get info from a\n a system that he is not logged on to.  If you have multiple processors\n or LPARs, you can \"watch\" executing jobs on any of the systems no\n no matter which system you are logged on to.  Besides it was a good\n way to learn something and have a useful utility when it was working.\n0SUTL consists of two basic components, (1) a data collector that would\n probably be best to run as a started task (STC) and (2) the TSO/SPF\n code that sends requests to the data collector and displays the data.\n0The data collector (STC) should be run on each system.  The STC does\n require APF authorization for the UCB function.  If you remove the\n UCB function, SUTL will not require any special privilages.\n0The TSO/SPF part requires one VTAM APPL id per active TSO user.  These\n APPL ids are assembled and link edited into a load module as part of\n the installation steps.  I felt that it would be less overhead per\n invocation to search a pre-assembled/link edited load module than to\n read a parameter data set (this would mean allocating the data set,\n opening it, reading and scanning each statement, closing, and then\n de-allocating).\n1             Installing SUTL\n0 1Allocate libraries:\n                     DCB                         3380 tracks   Dir\n    EXEC         RECFM=FB,LRECL=80,BLKSIZE=3120       1          1\n    ISPPLIB      RECFM=FB,LRECL=80,BLKSIZE=3120       2          2\n    JCLLIB       RECFM=FB,LRECL=80,BLKSIZE=3120       2          5\n    MACLIB       RECFM=FB,LRECL=80,BLKSIZE=3120       5         10\n    OBJECT       RECFM=FB,LRECL=80,BLKSIZE=3120      10          5\n    SOURCE       RECFM=FB,LRECL=80,BLKSIZE=3120      15         10\n0     If you want to keep SUTL in its own LOADLIB:\n    LOADLIB      RECFM=U,BLKSIZE=6144                 5          5\n  *must be APF authorized if you use the UCB function.\n0 2Edit member TSOACB in the SOURCE library:\n     .  Code one DC statement for each APPL id available for TSO users.\n0 3Edit member ASM in the JCL library:\n     .  Add a valid JOB card.\n     .  Change the MACLIB DSN to the name you used in STEP 1.\n     .  Change the SOURCE DSN to the name you used in STEP 1.\n     .  Change the OBJECT DSN to the name you used in STEP 1.\n0 4Submit member ASM to assemble all the SUTL modules.  This should\n   produce about 53,000 lines of print and took about 21 seconds of\n   CPU time on a 3090 600J.\n0 5Edit member LINK in the JCL library:\n     .  Add a valid JOB card.\n     .  Change the OBJECT DSN to the name you used in STEP 1.\n     .  Change the LOADLIB DSN to the name of an existing LOADLIB or\n        to the name you used in STEP 1.\n0 6Submit member LINK to link edit the SUTL load modules.\n0 7Add APPL ids to VTAM\n   For example:\n     SUTL     APPL  APPC=YES,VPACING=7             for the STC\n     SUTLU1   APPL  ACBNAME=SUTLU1,APPC=YES        for TSO users\n     SUTLU2   APPL  ACBNAME=SUTLU2,APPC=YES             .\n     SUTLU3   APPL  ACBNAME=SUTLU3,APPC=YES             .\n0 8Edit member SUTLPARM in the JCL library\n     . Change the APPL id to the name you used in step 7.\n0 9Add JCL member SUTLSTC to a proclib.\n010If you use RACF or some other security system, permit the STC to\n   at least READ level access to the JCL library (for the parm member).\n011Edit EXEC member SUTL.  Add a statement to \"equate\" any system\n   names you may want to the APPL id of the SUTLSTC on that system.\n012Edit EXEC member SUTL1.  Change the ISPPLIB data set name to the\n   name you used in step 1.\n013Add the REXX EXECs to a library available to your TSO users.\n014If you were using a separate library for SUTL, add it to the STEPLIB\n   of your LOGON procs.\n015Start up the STC.\n016You should be able to use SUTL by entering \"SUTL\" or \"SUTL system\"\n   from SPF option 6.\n1             Console Commands\n0You may communicate with the STC from the system console via the MVS\n MODIFY (F) command.\n0There are only two commands that have the same function:\n0  ACTIVE        lists the active SUTL users\n0  USERS         lists the active SUTL users\n0You may shutdown the STC by using the MVS STOP (P) command.\n1             Program description\n0At start-up the STC:\n    1) ATTACHes a print subtask (module STCPRTS).\n    2) Calls the parameter reader to read and interpret the parameters.\n    3) If there were errors in the paramters, execution is aborted.\n    4) OPENs the ACB and enables the ATTENTION exit.\n    5) ATTACHes a console communication subtask (module STCCONS).\n0The main task then enters a WAIT.\n0When a user \"logs on\", the ATTENTION exit is driven.  The ATTENTION\n exit allocates a control block (USERBLOK) and wakes up (POSTs) the\n main task.  The main task scans the USERBLOKs and will find the new\n USERBLOK.  The main task will ATTACH a subtask (module USERSTC) (note\n that each user will have his/her own subtask).  The main task will then\n return to its WAIT.  The user subtask (STCUSER) will issue a RECEIVE\n and WAIT for the TSO user (module SUTLTSO) to send it a request for\n info.  When the TSO user does request info, STCUSER determines what\n function the user is requesting and passes control the the routines\n that process that function.  When the function processor completes,\n STCUSER then issues a VTAM SEND to return the data to the TSO user,\n then issues another RECEIVE and WAITs for the next request from the\n TSO user.  When the user \"logs off\", the ATTENTION exit is driven\n again.  The ATTENTION exit will flag the status in the USERBLOK to\n indicate the user has broken the session and wakes up (POSTs) the\n main task.  The main task will scan the USERBLOKs and find the \"lost\"\n session.  The main task will wake up (POST) the user's subtask.  The\n user subtask (STCUSER) will find that the session is gone and will\n perform \"clean-up\" and terminate.  When the user subtask terminates,\n the main task will DETACH it, and then return to its WAIT.\n0Since the main task is involved only when users \"log on\" or \"log off\",\n the CPU utilization of the main task is extremely low.  Also since each\n user has their own subtask, each will be independently dispatchable.\n If your processor has multiple CPUs, SUTL can process multiple user\n requests concurrently.\n0As an aid in debugging, the STC and the TSO/SPF parts both use an\n internal wrap-around trace table.  Each trace entry contains the TCB\n address, CSECT suffix, and an ID.  Trace entries may also include one\n or two 8 byte data items.  Label TRCURR is a full word that always\n has the address of the last trace entry used.  Eyecatchers (1STX, LAST,\n and CURR) are assembled into the \"common area\" and can be searched for\n in a dump (I usually search for 1STX because I haven't found anything\n else that also uses this string).  All modules use register 12 as base,\n and register 11 is always the address of the \"common area\".\n./ ADD NAME=STCACT\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCACT                                                *\n*                                                                     *\n*  Function:                                                          *\n*   Collect information for the active regions display.               *\n*   The user may select regions to be displayed by 3 different        *\n*   criteria 1) the region type (JOB, STC, or TSU), 2) by job name    *\n*   prefix, and 3) user id prefix.                                    *\n*                                                                     *\n*   Data returned is: CPU utilization percentage, number of regions,  *\n*         and per region a) job name, b) step name, c) proc step name,*\n*         d) region type, e) swap status, f) number of real page      *\n*         frames, g) number of I/O's, h) TCB time, and i) SRB time.   *\n*                                                                     *\n*   The number of regions that can be returned is limited by the I/O  *\n*   area size (VTAM limits the length to 32767).  If the number of    *\n*   regions that matches the search criteria exceeds the I/O area     *\n*   size, the return code in the I/O area will be set to 4 to inform  *\n*   the TSO user that the data was truncated.                         *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCACT   CSECT\nSTCACT   AMODE 31\nSTCACT   RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               SET BASE REGISTER\n         USING STCACT,R12            DEFINE PROGRAM BASE\n         USING STCCOMM,R11           DEFINE COMM AREA BASE\n         USING USERBLOK,R10          DEFINE USER BLOCK BASE\n         B     ACT0000\nMODID    DC    CL8'STCACT'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nACT0000  DS    0H\n         L     R2,USERDXDA           WORK AREA BASE ADDRESS\n         A     R2,DXDSTART           PLUS DISPLACEMENT TO OUR PORTION\n         ST    R13,4(R2)             CHAIN CALLER'S SAVE AREA\n         ST    R2,8(R13)             CHAIN OUR SAVE AREA\n         LR    R13,R2                COPY WORK AREA BASE\n         USING DXDACT,R13            DEFINE WORK AREA BASE\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    ACT0010               YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n* ------------------------------------------------------------------- *\n*              BUILD DATA                                             *\n* ------------------------------------------------------------------- *\nACT0010  DS    0H\n         L     R9,USERIO             I/O AREA ADDRESS\n         USING VTAMIO,R9             DEFINE BASE\n         XC    VTAMRC,VTAMRC         SET RC TO ZERO\n         L     R5,CVTPTR             CVT ADDRESS\n         S     R5,=A(CVTMAP-CVTFIX)  POINT TO CVT PREFIX\n         USING CVTFIX,R5             DEFINE BASE\n         L     R1,CVTOPCTP           RMCT ADDRESS FROM CVT\n         L     R1,4(R1)              CCT ADDRESS FROM RMCTCCT\n         MVC   ACTCPU,102(R1)        COPY CPU UTILIZATION PERCENTAGE\n         XC    ACT#,ACT#             CLEAR NUMBER OF REGIONS RETURNED\n         L     R1,CVTASVT            ASVT ADDRESS FROM CVT\n         USING ASVT,R1               DEFINE BASE\n         L     R3,ASVTMAXU           MAXIMUM NUMBER OF ENTRIES\n         LA    R4,ASVTFRST           FIRST ENTRY\n         LA    R7,ACTRGN-VTAMIO      LENGTH TO THIS POINT\n         LA    R8,ACTRGN             FIRST REGION IN OUTPUT\n         USING ACTRGN,R8             DEFINE BASE\nACT0020  DS    0H\n         ICM   R2,15,0(R4)           ASCB FROM ASVT ENTRY\n         BM    ACT0220               ADDRESS SPACE NOT IN USE\n         USING ASCB,R2               DEFINE ASCB BASE\n         XC    ACTRGN(ACTRGNL),ACTRGN\n         MVC   ACTRGNJN,STARTING     ASSUME REGION IS 'STARTING'\n         ICM   R6,15,ASCBJBNI        JOB NAME ADDRESS\n         BZ    ACT0030               NO JOB NAME\n         MVC   ACTRGNJN,0(R6)        COPY JOB NAME\n         CLI   CVTPRODI+3,C'3'       HIGHER THAN V3?\n         BH    ACT0050               YES\n         S     R6,=A(CHKEY-CSCB)     POINT TO START OF CSCB\n         B     ACT0050               DETERMINE ADDRESS SPACE TYPE\nACT0030  DS    0H\n         ICM   R6,15,ASCBJBNS        STC NAME ADDRESS\n         BZ    ACT0220               NO STC NAME, WIERD ADDRESS SPACE\n         MVC   ACTRGNJN,0(R6)        COPY STC NAME\n         CLI   ACTRGNJN,C'*'         MASTER SCHEDULER?\n         BE    ACT0040               YES\n         CLI   CVTPRODI+3,C'3'       HIGHER THAN V3?\n         BH    ACT0050               YES\n         S     R6,=A(CHCLS-CSCB)     POINT TO START OF CSCB\n         B     ACT0060\nACT0040  DS    0H\n         SR    R6,R6                 NO CSCB FOR MASTER SCHEDULER\n         B     ACT0060\nACT0050  DS    0H\n         S     R6,=A(CHNAME-CSCX)    START OF CSCX\n         USING CSCX,R6               DEFINE BASE\n         L     R6,CHCSCBP            CSCB ADDRESS FROM CSCX\n         DROP  R6\nACT0060  DS    0H\n         USING CSCB,R6               DEFINE BASE\n         L     R1,ASCBOUCB           OUCB'S ADDRESS FROM ASCB\n         USING OUCB,R1               DEFINE BASE\n         ICM   R15,15,ASCBJBNI       BATCH JOB?\n         BNZ   ACT0110               YES\n         TM    OUCBYFL,OUCBSTT       STARTED TASK?\n         BO    ACT0070               YES\n         TM    OUCBYFL,OUCBLOG       TSO USER?\n         BO    ACT0080               YES\n         TM    OUCBYFL,OUCBMNT       MOUNT?\n         BO    ACT0090               YES\n         ABEND $U0009,DUMP,,USER     SHOULD NEVER HAPPEN\nACT0070  DS    0H\n         ITRACE ID=STC\n         MVI   ACTRGNT,$ACTRSTC      STARTED TASK\n         B     ACT0100\nACT0080  DS    0H\n         ITRACE ID=TSOUSER\n         MVI   ACTRGNT,$ACTRTSO      TSO USER\n         CLI   CVTPRODI+3,C'3'       HIGHER THAN V3?\n         BH    ACT0100               YES\n         LA    R6,8(R6)              POINT TO START OF CSCB\n         B     ACT0100\nACT0090  DS    0H\n         ITRACE ID=MOUNT\n         MVI   ACTRGNT,$ACTRMNT      MOUNT\nACT0100  DS    0H\n         LTR   R6,R6                 CSCB PRESENT?\n         BZ    ACT0130               NO\n         CLI   CHKEY,X'40'           STEP NAME PRESENT?\n         BNH   ACT0120               NO\n         MVC   ACTRGNJS,CHKEY        SET STEP NAME\n         TM    OUCBYFL,OUCBLOG       TSO USER?\n         BNO   ACT0120               NO\n         CLI   CHCLS,X'40'           PROC PRESENT?\n         BNH   ACT0130               NO\n         MVC   ACTRGNPS,CHCLS        COPY PROC NAME\n         B     ACT0130\nACT0110  DS    0H\n         MVI   ACTRGNT,$ACTRBCH      REGION TYPE IS BATCH JOB\n         CLI   CHSTEP,X'40'          STEP NAME PRESENT?\n         BNH   ACT0120               NO\n         MVC   ACTRGNJS,CHSTEP       SET STEP NAME\nACT0120  DS    0H\n         CLI   CHPROCSN,X'40'        PROC STEP NAME PRESENT?\n         BNH   ACT0130               NO\n         MVC   ACTRGNPS,CHPROCSN     SET PROC STEP NAME\nACT0130  DS    0H\n         TM    OUCBQFL,OUCBGOO+OUCBGOI+OUCBGOB\n         BZ    ACT0140               NOT IN TRANSITION\n         MVI   ACTRGNSW,$ACTRGNT     SWAP STATUS IS IN TRANSITION\n         B     ACT0180\nACT0140  DS    0H\n         TM    OUCBQFL,OUCBLSW       LOGICAL SWAP?\n         BO    ACT0150               YES\n         TM    ASCBRCTF,ASCBOUT      SWAPPED OUT?\n         BO    ACT0160               YES\n         CLC   OUCBNDS,=X'0000'      NON-SWAPPABLE?\n         BE    ACT0170               YES\n         MVI   ACTRGNSW,$ACTRGNI     ADDRESS SPACE IS SWAPPED IN\n         B     ACT0180\nACT0150  DS    0H\n         MVI   ACTRGNSW,$ACTRGNL     SPACE IS LOGICALLY SWAPPED\n         B     ACT0180\nACT0160  DS    0H\n         MVI   ACTRGNSW,$ACTRGNO     SPACE IS SWAPPED OUT\n         B     ACT0180\nACT0170  DS    0H\n         MVI   ACTRGNSW,$ACTRGNN     SPACE IS NON-SWAPPABLE\nACT0180  DS    0H\n         MVC   ACTRGNUN,OUCBUSRD     COPY USER NAME\n         MVC   ACTRGNSU,OUCBWMS      COPY SERVICE UNITS\n         MVC   ACTRGNIO,ASCBIOSC     COPY I/O COUNT\n         MVC   ACTRGNTT,ASCBEJST     COPY TCB TIME\n         MVC   ACTRGNST,ASCBSRBT     COPY SRB TIME\n         L     R1,ASCBRSME           RAX CONTROL BLOCK ADDRESS\n         USING RAX,R1                DEFINE BASE\n         MVC   ACTRGNFC,RAXFMCT      COPY NUMBER OF FRAMES\n         CLI   ACTRTYPE,0            ALL ADDRESS SPACE TYPES?\n         BE    ACT0190               YES\n         CLC   ACTRGNT,ACTRTYPE      TYPE USER WANTS?\n         BNE   ACT0220               NO\nACT0190  DS    0H\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,ACTJPFXL         JOB NAME PREFIX LENGTH\n         BZ    ACT0200               NO PREFIX IN EFFECT\n         BCTR  R1,0                  FOR EXECUTE\n         EX    R1,JOBCLC             PREFIX MATCH?\n         BNE   ACT0220               NO\nACT0200  DS    0H\n         ICM   R1,3,ACTUPFXL         USER PREFIX LENGTH\n         BZ    ACT0210               NO PREFIX IN EFFECT\n         BCTR  R1,0                  FOR EXECUTE\n         EX    R1,USERCLC            PREFIX MATCH?\n         BNE   ACT0220               NO\nACT0210  DS    0H\n         ICM   R1,3,ACT#             NUMBER OF ADDRESS SPACES\n         CH    R1,MAX#               ALREADY FULL?\n         BE    ACT0230               YES.. SET RC\n         LA    R1,1(R1)              PLUS 1\n         STCM  R1,3,ACT#             SAVE NEW TOTAL\n         LA    R7,ACTRGNL(R7)        PLUS LENGTH\n         LA    R8,ACTRGNL(R8)        NEXT IN I/O AREA\nACT0220  DS    0H\n         LA    R4,4(R4)              NEXT ADDRESS SPACE\n         BCT   R3,ACT0020            LOOP\n         ITRACE ID=DONE\n         B     ACT0240\nACT0230  DS    0H\n         ITRACE ID=OVERFLOW          I/O AREA OVERFLOW\n         MVC   VTAMRC,X0004          SET RETURN CODE\nACT0240  DS    0H\n         ITRACE ID=DATABILT,         DATA HAS BEEN BUILT               +\n               RDATA1=R7             .. DATA LENGTH\n         STH   R7,VTAMLEN            SET LENGTH\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS   0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\nJOBCLC   CLC   ACTRGNJN(0),ACTJPFX   CHECK JOB NAME PREFIX\nUSERCLC  CLC   ACTRGNUN(0),ACTUPFX   CHECK USER NAME PREFIX\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDACT)             DISPLACEMENT TO WORK AREA\nMAX#     DC    Y((COMMIOSZ-(ACTRGN-VTAMIO))/ACTRGNL)\nX0004    DC    X'0004'\nSTARTING DC    CL8'STARTING'\n         LTORG\n* ------------------------------------------------------------------- *\n*        WORK AREAS                                                   *\n* ------------------------------------------------------------------- *\nDXDACT   DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         STCCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              USER BLOCK                                             *\n* ------------------------------------------------------------------- *\n         USERBLOK\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         VTAMIO DSECT=YES\n         ORG   VTAMDATA\n         COPY  ACTDATA\n*---------------------------------------------------------------------*\n*              MVS PSA                                                *\n*---------------------------------------------------------------------*\n         IHAPSA DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*              MVS CVT                                                *\n*---------------------------------------------------------------------*\n         CVT   DSECT=YES,PREFIX=YES,LIST=NO\n*---------------------------------------------------------------------*\n*              ASCB                                                   *\n*---------------------------------------------------------------------*\n         IHAASCB DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*              ASVT                                                   *\n*---------------------------------------------------------------------*\n         IHAASVT DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*              OUCB                                                   *\n*---------------------------------------------------------------------*\n         IRAOUCB\n*---------------------------------------------------------------------*\n*              RSM ASCB EXTENSION                                     *\n*---------------------------------------------------------------------*\n         IARRAX\n*---------------------------------------------------------------------*\n*              CSCB                                                   *\n*---------------------------------------------------------------------*\nCSCB     DSECT\n         IEECHAIN INCCSCX=YES\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  STCACT\n./ ADD NAME=STCAPF\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCAPF                                                *\n*                                                                     *\n*  Function:                                                          *\n*   Collect the data for the APF list display.                        *\n*   The number of data sets that may be returned is limited by the    *\n*   I/O area size (VTAM limits the length to 32767).  If the APF list *\n*   exceeds the I/O area size, the return code with be set to 4 to    *\n*   inform the TSO user that the data has been truncated.             *\n*                                                                     *\n*   Data returned is: number of data sets in the list, and per data   *\n*       set 1) the data set name and 2) the volser.                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCAPF   CSECT\nSTCAPF   AMODE 31\nSTCAPF   RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               SET BASE REGISTER\n         USING STCAPF,R12            DEFINE BASE\n         USING STCCOMM,R11           DEFINE COMMON AREA BASE\n         USING USERBLOK,R10          DEFINE USER BLOCK BASE\n         B     APF0000\nMODID    DC    CL8'STCAPF'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nAPF0000  DS    0H\n         L     R2,USERDXDA           WORK AREA BASE ADDRESS\n         A     R2,DXDSTART           PLUS DISPLACEMENT TO OUR PORTION\n         ST    R13,4(R2)             CHAIN CALLER'S SAVE AREA\n         ST    R2,8(R13)             CHAIN OUR SAVE AREA\n         LR    R13,R2                COPY WORK AREA ADDRESS\n         USING DXDAPF,R13            DEFINE WORK AREA BASE\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    APF0010               YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\nAPF0010  DS    0H\n         L     R9,USERIO             I/O AREA ADDRESS\n         USING VTAMIO,R9             DEFINE BASE\n         XC    VTAMRC,VTAMRC         INITIALIZE RETURN CODE\n         L     R1,CVTPTR             CVT ADDRESS\n         USING CVTMAP,R1             DEFINE CVT ADDRESSABILITY\n         L     R2,CVTAUTHL           AUTHORIZED DATASETS LIST FROM CVT\n         LA    R8,APFDATA            WORK AREA ADDRESS\n         LH    R5,0(R2)              NUMBER OF ENTRIES IN APF LIST\n         CH    R5,MAX#               MORE THAN WILL FIT?\n         BNH   APF0020               NO\n         ITRACE ID=OVERMAX,          TOO MANY TO RETURN THEM ALL       +\n               RDATA1=R5             .. TRACE FULL NUMBER\n         LH    R5,MAX#               LIMIT TO NUMBER THAT FIT\n         MVC   VTAMRC,X0004          SET RETURN CODE TO 4\nAPF0020  DS    0H\n         LA    R2,2(R2)              FIRST NAME/LENGTH\n         STCM  R5,3,APF#DSN          SET NUMBER OF DATASETS RETURNED\n         LA    R7,APFDSN-VTAMIO      INITIALIZE OUTPUT LENGTH\n         LA    R8,APFDSN             SET INITIAL OUTPUT ADDRESS\n         USING APFDSN,R8             DEFINE BASE\nAPF0030  DS    0H\n         MVC   APFVOL,1(R2)          COPY VOLSER\n         SR    R1,R1                 CLEAR FOR DSN LENGTH\n         IC    R1,0(R2)              LENGTH OF DSNAME\n         SH    R1,H7                 MINUS LENGTH OF VOLSER+1\n         MVC   APFDSN,COMMBLKS       INITIALIZE DSN\n         EX    R1,DSNMVC             MOVE NAME\n         LA    R2,8(R1,R2)           NEXT DATASET\n         LA    R7,APFDSDL(R7)        UPDATE OUTPUT LENGTH\n         LA    R8,APFDSDL(R8)        UPDATE OUTPUT ADDRESS\n         BCT   R5,APF0030            PROCESS ALL DATASETS\n         STCM  R7,3,VTAMLEN          SET OUTPUT LENGTH\n         ITRACE ID=DATABILT          DATA BUILT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\nDSNMVC   MVC   APFDSN(0),7(R2)       COPY DATASET NAME\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDAPF)             DISPLACEMENT TO WORK AREA\nMAX#     DC    Y((COMMIOSZ-(APFDSN-VTAMIO))/APFDSDL)\nH7       DC    H'7'\nX0004    DC    X'0004'\n         LTORG\n* ------------------------------------------------------------------- *\n*        WORK AREAS                                                   *\n* ------------------------------------------------------------------- *\nDXDAPF   DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         STCCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VTAMIO DSECT=YES\n         ORG    VTAMDATA\n         COPY   APFDATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*              MVS CVT                                                *\n*---------------------------------------------------------------------*\n         CVT   DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  STCAPF\n./ ADD NAME=STCATTN\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCATTN                                               *\n*                                                                     *\n*  VTAM ATTN exit.                                                    *\n*                                                                     *\n*   Register usage:                                                   *\n*                                                                     *\n*      R7   USERBLOK address                                          *\n*      R8   RPL extension address                                     *\n*      R9   RPL address                                               *\n*      R10  Parameters passed by VTAM                                 *\n*      R11  STCCOMM address                                           *\n*      R12  Program base                                              *\n*                                                                     *\n*  -----------------------------------------------------------------  *\n*                                                                     *\n*  For session establishment (FMH5 calls)                             *\n*    1) Verify no USERBLOK already exists for this LU                 *\n*    2) Add a USERBLOK to the chain                                   *\n*    3) Print a message to log the new conversation                   *\n*    4) Post the main task to have a subtask attached for this user.  *\n*                                                                     *\n*  For session termination (LOSS calls)                               *\n*    1) The \"error\" flag is set in the USERBLOK.                      *\n*    2) The ECB is posted to wake up the user subtask.                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCATTN  CSECT\nSTCATTN  AMODE 31\nSTCATTN  RMODE ANY\n         USING STCATTN,R12           DEFINE BASE\n         NOP   *                     NO STM NEEDED (KEEPS PREFIX)\n         LR    R12,R15               LOAD BASE\n         B     ATTN0010              SKIP ADDRESS AND EYECATCHER\n         DC    CL8'STCATTN'          MODULE NAME\n         DC    CL8'&SYSDATE'         DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'         TIME OF ASSEMBLY\nATTN0010 DS    0H\n         LR    R10,R1                COPY PARAMETER LIST ADDRESS\n         USING EXITPARM,R10          DEFINE BASE\n         LR    R5,R14                SAVE RETURN ADDRESS\n         GETMAIN RU,LV=WKL,LOC=BELOW ACQUIRE A WORK AREA\n         LR    R13,R1                SAVE AREA ADDRESS\n         USING WK,R13                DEFINE BASE\n         L     R1,EXITACB            ACB'S ADDRESS\n         USING IFGACB,R1             DEFINE BASE\n         L     R11,ACBUSER           COMMON DATA ADDRESS\n         USING STCCOMM,R11           DEFINE BASE\n         L     R9,EXITRPL            RPL'S ADDRESS\n         USING IFGRPL,R9             DEFINE BASE\n         L     R8,RPLAAREA           RPL EXTENSTION'S ADDRESS\n         USING ISTRPL6X,R8           DEFINE BASE\n         ITRACE ID=ENTRY,                                              +\n               DATA1=EXITTYPE,       .. REASON FOR CALL                +\n               DATA2=RPL6LU          .. LU INVOLVED\n         ICM   R7,15,COMMUSER        FIRST USER BLOCK\n         USING USERBLOK,R7           DEFINE BASE\n         BZ    ATTN0030              UNKNOWN LU\nATTN0020 DS    0H\n         CLC   RPL6LU,USERLU         LU NAME LOCATED?\n         BE    ATTN0030              YES\n         ICM   R7,15,USERNEXT        NEXT USER BLOCK\n         BNZ   ATTN0020              LOOP\nATTN0030 DS    0H\n         CLC   EXITTYPE,CNOSTYPE     CNOS CALL?\n         BE    CNOS0000              YES\n         CLC   EXITTYPE,FMH5TYPE     FMH5 CALL?\n         BE    FMH50000              YES\n         CLC   EXITTYPE,LOSSTYPE     LOSS CALL?\n         BE    LOSS0000              YES\n         B     EXIT0000              OTHERWISE EXIT\n* ------------------------------------------------------------------- *\n*             CNOS                                                    *\n* ------------------------------------------------------------------- *\nCNOS0000 DS    0H\n         ITRACE ID=CNOS,             CNOS                              +\n               DATA1=RPL6LU,         .. LU NAME                        +\n               RDATA2=R7             .. USERBLOK ADDRESS\n         LTR   R7,R7                 LU ALREADY ON USERBLOK CHAIN?\n         BZ    EXIT0000              YES\n         ABEND $U0005,DUMP,,USER\n* ------------------------------------------------------------------- *\n*             FMH5                                                    *\n* ------------------------------------------------------------------- *\nFMH50000 DS    0H\n         ITRACE ID=FMH5,             FMH5 RECEIVED                     +\n               DATA1=RPL6LU,         .. LU'S NAME                      +\n               RDATA2=R7             .. USERBLOK ADDRESS\n         LTR   R7,R7                 LU ALREADY ON CHAIN?\n         BNZ   ERR0010               YES\n         MVC   WKRPL(RPLL),RPLI      INITIALIZE RPL\n         MVC   WKRPLX(RPLEXTL),RPLEXTI INITIALIZE RPL EXTENSION\n         MVC   WKRPL+(RPLDACB-IFGRPL),EXITACB\n         LA    R8,WKRPLX             RPL EXTENSION ADDRESS\n         ST    R8,WKRPL+(RPLAAREA-IFGRPL)\n         ITRACE ID=RECVFMH5\n         APPCCMD CONTROL=RCVFMH5,    RECEIVE THE FMH5                  +\n               RPL=WKRPL,            .. RPL ADDRESS                    +\n               CONMODE=CS,           .. CONTINUE SPECIFIC              +\n               AREA=WKFMH5,          .. FMH5 STORAGE ADDRESS           +\n               AREALEN=WKFMH5L,      .. FMH5 SIZE                      +\n               OPTCD=SYN             .. FORCE IT TO BE SYNCHRONOUS\n         OC    RPL6RC,RPL6RC         SUCCESSFUL?\n         BNZ   FMH50040              NO\n         GETMAIN RU,LV=USERL,LOC=ANY ACQUIRE STORAGE FOR USER BLOCK\n         ITRACE ID=NEWUSER,RDATA1=R1 NEW USER SESSION\n         LR    R7,R1                 COPY STORAGE ADDRESS\nFMH50010 DS    0H\n         MVC   WKENQ(ENQL),ENQI      INITIALIZE ENQUE LIST FORM\n         ENQ   MF=(E,WKENQ)          OBTAIN USER BLOCK CHAIN ENQUE\n         LA    R2,COMMUSER           CHAIN POINT\n         ICM   R1,15,COMMUSER        1ST BLOCK\nFMH50020 DS    0H\n         BZ    FMH50030              END OF CHAIN\n         LA    R2,USERNEXT-USERBLOK(R1)\n         ICM   R1,15,USERNEXT-USERBLOK(R1)\n         B     FMH50020              LOOP\nFMH50030 DS    0H\n         ST    R7,0(R2)              ADD TO END OF CHAIN\n         MVC   WKDEQ(DEQL),DEQI      INITIALIZE DEQUE LIST FORM\n         DEQ   MF=(E,WKDEQ)          RELEASE USER BLOCK CHAIN ENQUE\n         XC    USERBLOK(USERIO-USERBLOK),USERBLOK\n         MVC   USERBLOK(8),=C'USERBLOK'\n         MVC   USERCID,RPL6CNVD      SAVE CONVERSATION ID\n         L     R8,RPLAAREA           RPL EXTENSION FROM INPUT RPL\n         MVC   USERLU,RPL6LU         SAVE LU NAME\n         MVC   USERID,FMH5TRAN       SAVE USER'S ID\n         MVI   USERSTAT,$USERINT     USER IS IN INITIAL STATE\n         MVI   PRTCMD,$PRTPRT        SET COMMAND (PRINT)\n         MVI   PRTCC,C' '            INITIALIZE CARRIAGE CONTROL\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         MVC   PRTMSGID(MSG01L),MSG01 SET MESSAGE\n         MVC   PRTMSGID+(MSG01LU-MSG01)(L'MSG01LU),USERLU\n         MVC   PRTMSGID+(MSG01ID-MSG01)(L'MSG01ID),USERID\n         LA    R1,PRTBLOK            PRINT QUEUE PARM BLOCK ADDRESS\n         L     R15,APRTQ             PRINT QUEUEING ENTRY POINT\n         BALR  R14,R15               ADD TO QUEUE\n         POST  COMMAECB              WAKE UP MAIN TASK\n         B     EXIT0000              EXIT\nFMH50040 DS    0H\n         ITRACE ID=FMH5FAIL\n         LR    R2,R15                COPY RETURN CODE\n         ABEND $U0006,DUMP,,USER     ABEND\n* ------------------------------------------------------------------- *\n*             LOSS                                                    *\n* ------------------------------------------------------------------- *\nLOSS0000 DS    0H\n         ITRACE ID=LOSS,             LOSS OF SESSION                   +\n               DATA1=USERLU          .. LU NAME\n         MVI   PRTCMD,$PRTPRT        SET COMMAND (PRINT)\n         MVI   PRTCC,C' '            INITIALIZE CARRIAGE CONTROL\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         MVC   PRTMSGID(MSG02L),MSG02 SET MESSAGE\n         MVC   PRTMSGID+(MSG02LU-MSG02)(L'MSG02LU),RPL6LU\n         LA    R1,PRTBLOK            PRINT QUEUE PARM BLOCK ADDRESS\n         L     R15,APRTQ             PRINT QUEUEING ENTRY POINT\n         BALR  R14,R15               ADD TO QUEUE\n         LTR   R7,R7                 FOR A KNOWN LU?\n         BZ    LOSS0010              NO\n         ITRACE ID=SETERROR          SESSION LOST FOR THIS USER\n         MVI   USERSTAT,$USERLOS     STATUS IS 'LOST'\n         POST  COMMAECB              WAKE UP MAIN TASK\n         B     EXIT0000              AND EXIT\nLOSS0010 DS    0H\n         ITRACE ID=UNKNLOSS          UNKNOWN SESSION LOST\n         B     EXIT0000              EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=DUPFMH5,                                            +\n               DATA1=USERLU\n         ABEND $U0007,DUMP,,USER\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT              EXITING\n         FREEMAIN RU,A=(13),LV=WKL   FREEMAIN WORK AREA\n         BR    R5                    RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nENQI     ENQ   (QNAME,RNAME,E,,STEP),                                  +\n               RET=HAVE,                                               +\n               SMC=NONE,                                               +\n               MF=L\nENQL     EQU   *-ENQI\nDEQI     DEQ   (QNAME,RNAME,,STEP),                                    +\n               RMC=NONE,                                               +\n               MF=L\nDEQL     EQU   *-DEQI\nRPLI     RPL   AM=VTAM\nRPLL     EQU   *-RPLI\nRPLEXTI  ISTRPL6\nRPLEXTL  EQU   *-RPLEXTI\nQNAME    DC    CL8'SUTL'\nRNAME    DC    C'USERBLOK CHAIN'\nCNOSTYPE DC    CL4'CNOS'             CHANGE NUMBER OF SESSIONS\nFMH5TYPE DC    CL4'FMH5'             FMH5\nLOSSTYPE DC    CL4'LOSS'             LOSS OF SESSION\nMSG01    DS    0C\n         DC    CL11'STCATTN01I'\n         DC    C'Session with LU '\nMSG01LU  DC    CL8' '\n         DC    C' USER ID '\nMSG01ID  DC    CL8' '\n         DC    C' established'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'STCATTN02I'\n         DC    C'Session lost with '\nMSG02LU  DC    CL8' '\nMSG02L   EQU   *-MSG02\n* ------------------------------------------------------------------ *\n*              COMMON DATA MAP                                       *\n* ------------------------------------------------------------------ *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------ *\n*              SAVE AREA/WORK AREA                                   *\n* ------------------------------------------------------------------ *\nWK       SUTLSAVE DSECT=YES\n         PRTBLOK  DSECT=NO\nWKFMH5   FMH5     DSECT=NO\nWKRPL    DS       0A,(RPLL)X\nWKRPLX   DS       0A,(RPLEXTL)X\nWKENQ    DS       (ENQL)X\nWKDEQ    DS       (DEQL)X\nWKL      EQU      *-WK\n* ------------------------------------------------------------------ *\n*              USER BLOCK                                            *\n* ------------------------------------------------------------------ *\n         USERBLOK\n* ------------------------------------------------------------------ *\n*              PARAMETER LIST                                        *\n* ------------------------------------------------------------------ *\nEXITPARM DSECT\nEXITACB  DS   A                      ACB ADDRESS\n         DS   A                      RESERVED\n         DS   A                      RESERVED\nEXITTYPE DS   CL4                    TYPE OF CALL\nEXITRPL  DS   A                      RPL ADDRESS\n         DS   A                      RESERVED\n* ------------------------------------------------------------------ *\n*              ACB DSECT                                             *\n* ------------------------------------------------------------------ *\n         IFGACB AM=VTAM\n* ------------------------------------------------------------------ *\n*              RPL AND RPL EXTENSION DSECTS                          *\n* ------------------------------------------------------------------ *\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         IHAPSA DSECT=YES,LIST=NO\n* ------------------------------------------------------------------ *\n*              EQUATES                                               *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         ABCODES\n         END  STCATTN\n./ ADD NAME=STCCOMM\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Name: STCCOMM                                                      *\n*                                                                     *\n*  Started task common data and trace table manager                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  OPTIONS\n         STCCOMM  TYPE=CSECT\n         SUTLSAVE DSECT=YES\n         IHAPSA   DSECT=YES,LIST=NO\n         COPY  REGEQU\n         END   STCCOMM\n./ ADD NAME=STCCONS\n         COPY  OPTIONS\n         MACRO\n         CMD   &TEXT,&ADDR\n         LCLA  &LEN\n         AIF   (T'&TEXT EQ 'O').ERR0010\n         AIF   (T'&ADDR EQ 'O').ERR0020\n&LEN     SETA  K'&TEXT\n         DC    AL1(&LEN)\n         DC    AL4(&ADDR)\n         DC    C'&TEXT'\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'COMMAND TEXT IS REQUIRED'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'COMMAND PROCESSOR ADDRESS IS REQUIRED'\n         MEND\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCCONS                                               *\n*                                                                     *\n*  This module allows some commands to be entered via an MVS console. *\n*  Mostly this would be to allow an operator (or an automation        *\n*  product) to issue commands to shutdown SUTL.                       *\n*                                                                     *\n*    Commands allowed are                                             *\n*      \"F xxx,ACTIVE\" Displays the active USERs.                      *\n*      \"P xxx\"        Stops the SUTL STC.                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCCONS  CSECT\nSTCCONS  AMODE 31\nSTCCONS  RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               COPY BASE ADDRESS\n         USING STCCONS,R12           DEFINE BASE\n         B     CONS0000\nMODID    DC    CL8'STCCONS'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nCONS0000 DS    0H\n         L     R11,0(R1)             COMMON AREA ADDRESS\n         USING STCCOMM,R11           DEFINE COMMON AREA BASE\n         L     R3,DXDSIZE            WORK AREA SIZE\n         GETMAIN RU,                 ACQUIRE WORK AREA                 +\n               LV=(R3),              .. SIZE                           +\n               LOC=ANY\n         LR    R2,R1                 COPY WORK AREA ADDRESS\n         LR    R4,R1                 COPY WORK AREA ADDRESS\n         ST    R4,CONSDXDA           SAVE CONSOLE WORK AREA BASE\n         SR    R14,R14               CLEAR REGISTER\n         SR    R15,R15               CLEAR REGISTER\n         MVCL  R2,R14                CLEAR THE WORK AREA\n         A     R4,DXDSTART           PLUS DISPLACEMENT TO OUR PORTION\n         ST    R13,4(R4)             CHAIN CALLER'S WORK AREA\n         ST    R4,8(R13)             CHAIN OUR WORK AREA\n         LR    R13,R4                SET WORK AREA BASE\n         USING DXDCONS,R13           DEFINE WORK AREA BASE\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         ST    R12,ACONS             SET CONSOLE MODULE ADDRESS\n         GETMAIN RU,                 ACQUIRE STORAGE FOR EXTRACT       +\n               LV=EXTRACTL+4,        .. LENGTH                         +\n               LOC=BELOW             .. 24-BIT AREA\n         LR    R2,R1                 SAVE THE ADDRESS\n         LA    R3,EXTRACTL(R2)       RETURNED DATA ADDRESS\n         MVC   0(EXTRACTL,R2),EXTRACTI\n         EXTRACT (R3),               EXTRACT THE COMM LIST ADDRESS     +\n               FIELDS=COMM,          .. RETURN COMLIST ADDRESS         +\n               MF=(E,(R2))           .. EXECUTE FORM, LIST FORM ADDRESS\n         L     R10,0(R3)             COMM LIST ADDRESS\n         FREEMAIN RU,A=(2),LV=EXTRACTL+4   FREE THE EXTRACT WORK AREA\n         ITRACE ID=COMLIST,          TRACE COMLIST ADDRESS             +\n               RDATA1=R10\n         ST    R10,DXDCOMM           SAVE COMLIST ADDRESS\n         USING COMLIST,R10           DEFINE COMLIST BASE\n         MVC   COMMCECB,COMECBPT     SAVE CONSOLE ECB ADDRESS\nCONS0010 DS    0H\n         ICM   R9,15,COMCIBPT        FIRST CIB\n         BZ    CONS0040              NO CIB'S\n         USING CIB,R9                DEFINE CIB BASE\nCONS0020 DS    0H\n         ITRACE ID=INITCIB,          TRACE EACH CIB                    +\n               RDATA1=R9,            .. CIB ADDRESS                    +\n               DATA2=CIBVERB         .. VERB FROM CIB\n         CLI   CIBVERB,CIBSTART      START COMMAND?\n         BE    CONS0030              YES\n         MVC   DXDCID+3(1),CIBCONID  COPY CONSOLE ID\n         MVC   DXDWTO(WTO01L),WTO01  COPY WTO\n         WTO   MF=(E,DXDWTO),        ISSUE WTO                         +\n               CONSID=DXDCID         .. BACK TO SAME CONSOLE\nCONS0030 DS    0H\n         L     R2,CIBNEXT            NEXT CIB\n         QEDIT ORIGIN=COMCIBPT,      FREE THIS CIB                     +\n               BLOCK=(R9)\n         LTR   R15,R15               QEDIT SUCCESSFUL?\n         BNZ   ERR0010               NO\n         LTR   R9,R2                 NEXT CIB'S ADDRESS\n         BNZ   CONS0020              LOOP\nCONS0040 DS    0H\n         ITRACE ID=SETCTR            SETTING CIB LIMIT\n         QEDIT ORIGIN=COMCIBPT,      SET CIB LIMIT                     +\n               CIBCTR=2              .. ALLOW 2 CIBS\n         LTR   R15,R15               SUCCESSFUL?\n         BNZ   ERR0020               NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCONS0100 DS    0H\n         TM    COMMEOJ,$EOJ1         QUITTING TIME?\n         BO    EXIT0000              YES\n         ITRACE ID=CONSWAIT          WAIT FOR CONSOLE TRAFFIC\n         L     R1,COMMCECB           ECB ADDRESS\n         WAIT  ECB=(R1)              WAIT FOR CONSOLE ECB\n         ITRACE ID=PROCLIST          PROCESSING CIB LIST\n         L     R10,DXDCOMM           COMM LIST ADDRESS\n         ICM   R9,15,COMCIBPT        FIRST CIB ADDRESS\n         BZ    CONS0100              STRANGE..\nCONS0110 DS    0H\n         ITRACE ID=PROCCIB,          TRACE EACH CIB                    +\n               RDATA1=R9,            .. CIB ADDRESS                    +\n               DATA2=CIBVERB         .. VERB FROM CIB\n         MVC   DXDCID+3(1),CIBCONID  SET CONSOLE ID\n         CLI   CIBVERB,CIBSTOP       STOP COMMAND?\n         BE    CONS0500              YES\n         CLI   CIBVERB,CIBMODFY      MODIFY?\n         BE    CONS0130              YES\n         MVC   DXDWTO(WTO02L),WTO02  COPY WTO\n         WTO   MF=(E,DXDWTO),        ISSUE WTO                         +\n               CONSID=DXDCID         .. TO SAME CONSOLE\nCONS0120 DS    0H\n         L     R2,CIBNEXT            NEXT CIB ADDRESS\n         QEDIT ORIGIN=COMCIBPT,      FREE THIS CIB                     +\n               BLOCK=(R9)\n         LTR   R15,R15               SUCCESSFUL?\n         BNZ   ERR0010               NO\n         LTR   R9,R2                 NEXT CIB ADDRESS\n         BNZ   CONS0110              PROCESS IT\n         B     CONS0100              EXIT AT END OF CHAIN\nCONS0130 DS    0H\n         SR    R7,R7                 CLEAR REGISTER\n         ICM   R7,3,CIBDATLN         LENGTH OF DATA\n         LA    R6,CMDTBLE            OUR LIST OF COMMANDS\n         USING CMDDSECT,R6           DEFINE BASE\n         SR    R1,R1                 CLEAR REGISTER\nCONS0140 DS    0H\n         CLI   0(R6),X'FF'           END OF TABLE?\n         BE    CONS0160              YES\n         IC    R1,CMDTXTL            TEXT LENGTH\n         CLR   R7,R1                 LENGTH CORRECT?\n         BNE   CONS0150              NO\n         BCTR  R1,0                  MINUS 1 FOR EXECUTE\n         EX    R1,CMDCLC             COMMAND FOUND?\n         BE    CONS0170              YES\n         LA    R1,1(R1)              RESTORE LENGTH\nCONS0150 DS    0H\n         LA    R6,CMDL(R6,R1)        NEXT COMMAND\n         B     CONS0140              LOOP\nCMDCLC   CLC   CMDTXT,CIBDATA        COMMAND LOCATED?\nCONS0160 DS    0H\n         MVC   DXDWTO(WTO03L),WTO03  COPY WTO\n         WTO   MF=(E,DXDWTO),        ISSUE WTO                         +\n               CONSID=DXDCID         .. TO SAME CONSOLE\n         B     CONS0120              RELEASE THIS CIB\nCONS0170 DS    0H\n         ICM   R15,15,CMDADDR        COMMAND PROCESSOR ADDRESS\n         BR    R15                   PROCESS THE COMMAND\n* ------------------------------------------------------------------- *\n*        Display the active users                                     *\n* ------------------------------------------------------------------- *\nCONS0300 DS    0H\n         ITRACE ID=ACTIVE\n         ICM   R7,15,COMMUSER        FIRST USER BLOCK\n         USING USERBLOK,R7           DEFINE USER BLOCK BASE\n         BZ    CONS0390              NO ACTIVE USERS\nCONS0310 DS    0H\n         MVC   DXDWTO(WTO07L),WTO07  COPY WTO\n         LA    R4,DXDWTO             WTO ADDRESS\n         USING WPL,R4                DEFINE WTO PARM LIST BASE\n         MVC   WPLTXT(MSG08L),MSG08  COPY MESSAGE TO WTO\n         MVC   WPLTXT+(MSG08ID-MSG08)(L'MSG08ID),USERID\n         MVC   WPLTXT+(MSG08LU-MSG08)(L'MSG08LU),USERLU\n         LA    R2,FNCTABLE\n         USING FNCDSECT,R2           DEFINE BASE\n         L     R3,USERIO             I/O AREA ADDRESS\n         USING VTAMIO,R3             DEFINE I/O AREA BASE\nCONS0320 DS    0H\n         CLI   0(R2),X'FF'           END OF TABLE?\n         BE    CONS0330              YES\n         CLC   VTAMFNC,FNCFNC        IS THIS THE FUNCTION?\n         BE    CONS0330              YES\n         LA    R2,FNCL(R2)           NEXT FUNCTION\n         B     CONS0320              LOOP\nCONS0330 DS    0H\n         MVC   WPLTXT+(MSG08FNC-MSG08)(L'MSG08FNC),FNCNAME\n         B     CONS0350\nCONS0340 DS    0H\n         MVC   WPLTXT+(MSG08FNC-MSG08)(L'MSG08FNC),UNKNOWN\nCONS0350 DS    0H\n         CLI   USERVCMD,$USERRCV     RECEIVE?\n         BE    CONS0360              YES\n         CLI   USERVCMD,$USERSND     SEND?\n         BE    CONS0370              YES\n         MVC   WPLTXT+(MSG08VTM-MSG08)(L'MSG08VTM),NONE\n         B     CONS0380\nCONS0360 DS    0H\n         MVC   WPLTXT+(MSG08VTM-MSG08)(L'MSG08VTM),RECEIVE\n         B     CONS0380\nCONS0370 DS    0H\n         MVC   WPLTXT+(MSG08VTM-MSG08)(L'MSG08VTM),SEND\nCONS0380 DS    0H\n         L     R0,USERSNDC           NUMBER OF SENDS\n         CVD   R0,COMMDWRD           CONVERT TO DECIMAL\n         MVC   WPLTXT+(MSG08SCT-MSG08)(L'MSG08SCT),EDWD1\n         ED    WPLTXT+(MSG08SCT-MSG08)(L'MSG08SCT),COMMDWRD+4\n         L     R0,USERSNDL           LENGTH SENT\n         CVD   R0,COMMDWRD           CONVERT TO DECIMAL\n         MVC   WPLTXT+(MSG08SLN-MSG08)(L'MSG08SLN),EDWD1\n         ED    WPLTXT+(MSG08SLN-MSG08)(L'MSG08SLN),COMMDWRD+4\n         L     R0,USERRCVC           NUMBER OF RECEIVES\n         CVD   R0,COMMDWRD           CONVERT TO DECIMAL\n         MVC   WPLTXT+(MSG08RCT-MSG08)(L'MSG08RCT),EDWD1\n         ED    WPLTXT+(MSG08RCT-MSG08)(L'MSG08RCT),COMMDWRD+4\n         L     R0,USERRCVL           LENGTH RECEIVED\n         CVD   R0,COMMDWRD           CONVERT TO DECIMAL\n         MVC   WPLTXT+(MSG08RLN-MSG08)(L'MSG08RLN),EDWD1\n         ED    WPLTXT+(MSG08RLN-MSG08)(L'MSG08RLN),COMMDWRD+4\n         WTO   MF=(E,(R4)),          ISSUE THE WTO                     +\n               CONSID=DXDCID         .. TO THE SAME CONSOLE\n         ICM   R7,15,USERNEXT        NEXT USER BLOCK\n         BNZ   CONS0310\n         B     CONS0120              RELEASE THIS CIB\nCONS0390 DS    0H\n         MVC   DXDWTO(WTO04L),WTO04  COPY WTO\n         WTO   MF=(E,DXDWTO),        ISSUE WTO                         +\n               CONSID=DXDCID         .. TO SAME CONSOLE\n         B     CONS0120              RELEASE THIS CIB\n* ------------------------------------------------------------------- *\n*        Shutdown the STC                                             *\n* ------------------------------------------------------------------- *\nCONS0500 DS    0H\n         ITRACE ID=STOP\n         TM    COMMEOJ,$EOJ1         EOJ ALREADY IN PROGRESS?\n         BO    CONS0510              YES\n         POST  COMMTECB              POST THE ECB\n         MVC   DXDWTO(WTO05L),WTO05  COPY WTO\n         WTO   MF=(E,DXDWTO),        ISSUE WTO                         +\n               CONSID=DXDCID         .. TO SAME CONSOLE\n         B     CONS0120              RELEASE THIS CIB\nCONS0510 DS    0H\n         MVC   DXDWTO(WTO06L),WTO06  COPY WTO\n         WTO   MF=(E,DXDWTO),        ISSUE WTO                         +\n               CONSID=DXDCID         .. TO SAME CONSOLE\n         B     CONS0120              RELEASE THIS CIB\n* ------------------------------------------------------------------- *\n*        Error routines                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=CIBDELF,          QEDIT (DELETE CIB) FAILED         +\n               RDATA1=R15            .. RETURN CODE\n         ABEND $U0011,DUMP,,USER\nERR0020  DS    0H\n         ITRACE ID=CIBCTRF,          QEDIT (SET CIB LIMIT) FAILED      +\n               RDATA1=R15            .. RETURN CODE\n         ABEND $U0012,DUMP,,USER\n* ------------------------------------------------------------------- *\n*        Exit                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R1,CONSDXDA           WORK AREA ADDRESS\n         L     R0,DXDSIZE            WORK AREA SIZE\n         L     R13,4(R13)            CALLER'S SAVE AREA ADDRESS\n         FREEMAIN RU,A=(1),LV=(0)    FREE WORK AREA\n         LM    R14,R12,12(R13)       RESTORE CALLER'S REGISTERS\n         SR    R15,R15               ALWAYS A GOOD RETURN CODE\n         BR    R14                   RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDXDSIZE  CXD\nDXDSTART DC    Q(DXDCONS)            DISPLACEMENT TO WORK AREA\nEXTRACTI EXTRACT *,                  EXTRACT LIST FORM                 +\n               FIELDS=COMM,          .. COMLIST ADDRESS PLEASE         +\n               MF=L\nEXTRACTL EQU   *-EXTRACTI\nWTO01    WTO   'STCCONS01E * Command not processed, STC initialization ++\n               not complete',                                          +\n               CONSID=,                                                +\n               MF=L\nWTO01L   EQU   *-WTO01\nWTO02    WTO   'STCCONS02E * invalid CIB verb, CIB ignored',           +\n               CONSID=,                                                +\n               MF=L\nWTO02L   EQU   *-WTO02\nWTO03    WTO   'STCCONS03E * Invalid command',                         +\n               CONSID=,                                                +\n               MF=L\nWTO03L   EQU   *-WTO03\nWTO04    WTO   'STCCONS04I   No active users',                         +\n               CONSID=,                                                +\n               MF=L\nWTO04L   EQU   *-WTO04\nWTO05    WTO   'STCCONS05I   SUTL STC shutdown starting',              +\n               CONSID=,                                                +\n               MF=L\nWTO05L   EQU   *-WTO05\nWTO06    WTO   'STCCONS05E * SUTL STC shutdown already in progress',   +\n               CONSID=,                                                +\n               MF=L\nWTO06L   EQU   *-WTO06\nWTO07    WTO   '                                                       +\n                                                                       +\n                             ',                                        +\n               CONSID=,                                                +\n               MF=L\nWTO07L   EQU   *-WTO07\nMSG08    DS    0C\n         DC    C'STCCONS8I   '\n         DC    C'ID='\nMSG08ID  DC    CL8' '\n         DC    C' LU='\nMSG08LU  DC    CL8' '\n         DC    C' FUNC='\nMSG08FNC DC    CL4' '\n         DC    C' VTAM STATUS='\nMSG08VTM DC    CL8' '\n         DC    C' SEND='\nMSG08SCT DC    CL8' '\n         DC    C'/'\nMSG08SLN DC    CL8' '\n         DC    C' RECV='\nMSG08RCT DC    CL8' '\n         DC    C'/'\nMSG08RLN DC    CL8' '\nMSG08L   EQU   *-MSG08\nEDWD1    DC    X'4020202020202021'\nNONE     DC    CL8'NONE'\nRECEIVE  DC    CL8'RECEIVE'\nSEND     DC    CL8'SEND'\nUNKNOWN  DC    CL8'UNKNOWN'\n* ------------------------------------------------------------------- *\n*              COMMANDS TABLE                                         *\n* ------------------------------------------------------------------- *\nCMDTBLE  DS    0C\n         CMD   ACTIVE,CONS0300       DISPLAY ACTIVE USERS\n         CMD   SHUT,CONS0500         SHUT (SHUTDOWN THE STC)\n         CMD   STOP,CONS0500         STOP (SHUTDOWN THE STC)\n         CMD   USERS,CONS0300        DISPLAY ACTIVE USERS\n         DC    X'FF'\n* ------------------------------------------------------------------- *\n*              USER FUNCTIONS TABLE                                   *\n* ------------------------------------------------------------------- *\nFNCTABLE DS    0C\n         DC    AL1($VTAMSID),CL4'SID'\n         DC    AL1($VTAMACT),CL4'ACT'\n         DC    AL1($VTAMAPF),CL4'APF'\n         DC    AL1($VTAMIPL),CL4'IPL'\n         DC    AL1($VTAMLLA),CL4'LLA'\n         DC    AL1($VTAMSUB),CL4'SUB'\n         DC    AL1($VTAMUCB),CL4'UCB'\n         DC    AL1($VTAMUSE),CL4'USE'\n         DC    X'FF'\n* ------------------------------------------------------------------- *\n*              WORK AREA                                              *\n* ------------------------------------------------------------------- *\nDXDCONS  DSECT\n         SUTLSAVE DSECT=NO           WORK AREA OWNER EYECATCHER\nDXDCOMM  DS   F                      ADDRESS OF COMM LIST\nDXDCID   DS   F                      CONSOLE ID\nDXDWTO   DS   0F,CL200\n* ------------------------------------------------------------------- *\n*              COMMAND TABLE MAP                                      *\n* ------------------------------------------------------------------- *\nCMDDSECT DSECT\nCMDTXTL  DS   X                      COMMAND TEXT LENGTH\nCMDADDR  DS   AL4                    COMMAND PROCESSOR ENTRY POINT\nCMDL     EQU  *-CMDDSECT\nCMDTXT   DS   C                      COMMAND TEXT\n* ------------------------------------------------------------------- *\n*              USER FUNCTION TABLE MAP                                *\n* ------------------------------------------------------------------- *\nFNCDSECT DSECT\nFNCFNC   DS   X\nFNCNAME  DS   CL4\nFNCL     EQU  *-FNCDSECT\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              USER BLOCK                                             *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*              VTAM I/O AREA                                          *\n* ------------------------------------------------------------------- *\n         VTAMIO DSECT=YES\n* ------------------------------------------------------------------- *\n*              COMM LIST                                              *\n* ------------------------------------------------------------------- *\n         IEZCOM\n* ------------------------------------------------------------------- *\n*              COMMAND INPUT BUFFER                                   *\n* ------------------------------------------------------------------- *\nCIB      DSECT\n         IEZCIB\n* ------------------------------------------------------------------- *\n*              WTO PARM LIST                                          *\n* ------------------------------------------------------------------- *\n         IEZWPL DSECT=YES\n* ------------------------------------------------------------------- *\n*              PSA                                                    *\n* ------------------------------------------------------------------- *\n         IHAPSA DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  STCCONS\n./ ADD NAME=STCIPL\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCIPL                                                *\n*                                                                     *\n*  Function:                                                          *\n*   Collect the data for the IPL info display.                        *\n*                                                                     *\n*   Data returned is: IPL date, IPL time, IPL volume volser.          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCIPL   CSECT\nSTCIPL   AMODE 31\nSTCIPL   RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               SET BASE REGISTER\n         USING STCIPL,R12            DEFINE BASE\n         USING STCCOMM,R11           DEFINE COMMON AREA BASE\n         USING USERBLOK,R10          DEFINE USER BLOCK BASE\n         B     IPL0000\nMODID    DC    CL8'STCIPL'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nIPL0000  DS    0H\n         L     R2,USERDXDA           WORK AREA BASE ADDRESS\n         A     R2,DXDSTART           PLUS DISPLACEMENT TO OUR PORTION\n         ST    R13,4(R2)             CHAIN CALLER'S SAVE AREA\n         ST    R2,8(R13)             CHAIN OUR SAVE AREA\n         LR    R13,R2                COPY WORK AREA ADDRESS\n         USING DXDIPL,R13            DEFINE WORK AREA BASE\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    IPL0010               YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\nIPL0010  DS    0H\n         L     R9,USERIO             I/O AREA ADDRESS\n         USING VTAMIO,R9             DEFINE BASE\n         L     R1,CVTPTR             CVT ADDRESS\n         USING CVTMAP,R1             DEFINE CVT ADDRESSABILITY\n         L     R2,CVTSMCA            SMF COMMUNICATION AREA ADDRESS\n         USING SMCABASE,R2           DEFINE BASE\n         MVC   IPLDATE,SMCAIDTE      COPY IPL DATE\n         MVC   IPLTIME,SMCAITME      COPY IPL TIME\n         L     R2,CVTSYSAD           SYSRES UCB ADDRESS\n         USING UCBOB,R2              DEFINE BASE\n         MVC   IPLRES,UCBVOLI        COPY SYSRES VOLSER\n         LA    R1,(IPLDATA-VTAMIO)+IPLL\n         STCM  R1,3,VTAMLEN          SET LENGTH\n         XC    VTAMRC,VTAMRC         SET RETURN CODE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDIPL)             DISPLACEMENT TO WORK AREA\n         LTORG\n* ------------------------------------------------------------------- *\n*        WORK AREAS                                                   *\n* ------------------------------------------------------------------- *\nDXDIPL   DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         STCCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              USER BLOCK                                             *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*              I/O AREA                                               *\n* ------------------------------------------------------------------- *\n         VTAMIO DSECT=YES\n         ORG   VTAMDATA\n         COPY  IPLDATA\n*---------------------------------------------------------------------*\n*              PSA                                                    *\n*---------------------------------------------------------------------*\n         IHAPSA DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*              MVS CVT                                                *\n*---------------------------------------------------------------------*\n         CVT    DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*              UCB                                                    *\n*---------------------------------------------------------------------*\n         IEFUCBOB LIST=NO\n*---------------------------------------------------------------------*\n*              SMF COMMUNICATION AREA                                 *\n*---------------------------------------------------------------------*\n         IEESMCA\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  STCIPL\n./ ADD NAME=STCLLA\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCLLA                                                *\n*                                                                     *\n*  Function:                                                          *\n*   Collect the data for the link list (LLA) display.                 *\n*                                                                     *\n*   The number of data sets that can be returned is limited by the    *\n*   I/O area size (VTAM limits the length to 32767).  If there are    *\n*   more data sets in the link list than can be copied to the I/O     *\n*   area, the return code will be set to 4 to inform the user that    *\n*   the data has been truncated.                                      *\n*                                                                     *\n*   Data returned is: the number of data sets in the list and a       *\n*   table of 44 byte long data set names.                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCLLA   CSECT\nSTCLLA   AMODE 31\nSTCLLA   RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               SET BASE REGISTER\n         USING STCLLA,R12            DEFINE BASE\n         USING STCCOMM,R11           DEFINE COMMON AREA BASE\n         USING USERBLOK,R10          DEFINE USER BLOCK BASE\n         B     LLA0000\nMODID    DC    CL8'STCLLA'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nLLA0000  DS    0H\n         L     R2,USERDXDA           WORK AREA BASE ADDRESS\n         A     R2,DXDSTART           PLUS DISPLACEMENT TO OUR PORTION\n         ST    R13,4(R2)             CHAIN CALLER'S SAVE AREA\n         ST    R2,8(R13)             CHAIN OUR SAVE AREA\n         LR    R13,R2                COPY WORK AREA ADDRESS\n         USING DXDLLA,R13            DEFINE WORK AREA BASE\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    LLA0010               YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\nLLA0010  DS    0H\n         L     R9,USERIO             I/O AREA ADDRESS\n         USING VTAMIO,R9             DEFINE I/O AREA BASE\n         XC    VTAMRC,VTAMRC         SET RETURN CODE TO ZERO\n         L     R1,CVTPTR             CVT ADDRESS\n         USING CVTMAP,R1             DEFINE CVT ADDRESSABILITY\n         L     R8,CVTLLTA            LINKLIST TABLE ADDRESS\n         CLC   LLT,0(R8)             IS CONSTANT 'LLT ' PRESENT??\n         BNE   ERR0010               NO... SET RC TO 8 AND EXIT\n         L     R7,4(R8)              NUMBER OF ENTRIES IN LLA\n         C     R7,MAX#               MORE THAN WILL FIT?\n         BNH   LLA0020               NO\n         ITRACE ID=OVERMAX,          TOO MANY TO RETURN THEM ALL       +\n               RDATA1=R7             .. TRACE FULL NUMBER\n         L     R7,MAX#               LIMIT TO NUMBER THAT FIT\n         MVC   VTAMRC,X0004          SET RETURN CODE TO 4\nLLA0020  DS    0H\n         LA    R8,8(R8)              FIRST NAME/LENGTH\n         STCM  R7,3,LLA#DSN          SET NUMBER OF DATASETS RETURNED\n         LA    R6,LLADSN             SET INITIAL OUTPUT ADDRESS\n         LA    R5,LLADSN-VTAMIO      INITIALIZE OUTPUT LENGTH\n         USING LLADSN,R6             DEFINE BASE\nLLA0030  DS    0H\n         SR    R1,R1                 CLEAR FOR DSN LENGTH\n         IC    R1,0(R8)              LENGTH OF DSNAME\n         MVC   LLADSN,COMMBLKS       INITIALIZE DSN\n         BCTR  R1,0                  FOR EXECUTE\n         EX    R1,DSNMVC             MOVE NAME\n         LA    R8,45(R8)             NEXT DATASET\n         LA    R5,L'LLADSN(R5)       UPDATE OUTPUT LENGTH\n         LA    R6,L'LLADSN(R6)       UPDATE OUTPUT ADDRESS\n         BCT   R7,LLA0030            PROCESS ALL DATASETS\n         ITRACE ID=DATABILT,                                           +\n               RDATA1=R5             .. OUTPUT LENGTH\n         STCM  R5,3,VTAMLEN          SET LENGTH\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS   0H\n         ITRACE ID=NOLLT\n         ABEND $U0010,DUMP,,USER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS   0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\nDSNMVC   MVC   LLADSN(0),1(R8)       COPY DATASET NAME\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDLLA)             DISPLACEMENT TO WORK AREA\nMAX#     DC    A((COMMIOSZ-(LLADATA-VTAMIO))/L'LLADSN)\nLLT      DC    CL4'LLT '\nX0004    DC    X'0004'\n         LTORG\n* ------------------------------------------------------------------- *\n*        WORK AREAS                                                   *\n* ------------------------------------------------------------------- *\nDXDLLA   DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         STCCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              USER BLOCK                                             *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*              I/O AREA                                               *\n* ------------------------------------------------------------------- *\n         VTAMIO DSECT=YES\n         ORG   VTAMDATA\n         COPY  LLADATA\n*---------------------------------------------------------------------*\n*              MVS CVT                                                *\n*---------------------------------------------------------------------*\n         IHAPSA DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*              MVS CVT                                                *\n*---------------------------------------------------------------------*\n         CVT    DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  STCLLA\n./ ADD NAME=STCLRAD\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCLRAD                                               *\n*                                                                     *\n*  STC LERAD exit                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCLRAD  CSECT\nSTCLRAD  AMODE 31\nSTCLRAD  RMODE ANY\n         USING STCLRAD,R15           DEFINE BASE\n         B     LERAD010              SKIP ADDRESS AND EYECATCHER\n         DC    CL8'STCLRAD'          MODULE NAME\n         DC    CL8'&SYSDATE'         DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'         TIME OF ASSEMBLY\nLERAD010 DS    0H\n         USING IFGRPL,R1             DEFINE BASE\n         L     R2,RPLAAREA           RPL EXTENSION ADDRESS\n         USING ISTRPL6X,R2           DEFINE BASE\n         LA    R3,GOODRC             GOOD RETURN CODES TABLE\nLERAD020 DS    0H\n         CLI   0(R3),X'FF'           END OF TABLE\n         BE    LERAD030              NO GOOD\n         CLC   RPL6RC,0(R3)          ACCEPTABLE?\n         BE    EXIT0000              YES, EXIT\n         LA    R3,4(R3)              NEXT CODE\n         B     LERAD020              LOOP\nLERAD030 DS    0H\n         L     R4,RPL6RC             MAKE RC EASY TO FIND\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*              CONSTANTS                                             *\n* ------------------------------------------------------------------ *\nGOODRC   DS    0C\n         DC    X'00000000'           GOOD\n         DC    X'00000001'           CNOS ACCEPTED BY PARTNER\n         DC    X'FF'\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------ *\n*              EQUATES                                               *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         ABCODES\n         END  STCLRAD\n./ ADD NAME=STCMAIN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Name: STCMAIN                                                      *\n*                                                                     *\n*  Purpose: STC Mainline                                              *\n*                                                                     *\n*  The overall process is:                                            *\n*                                                                     *\n*   1) Allocate and initialize the work area.                         *\n*   2) LOAD and initialize the \"common area\".                         *\n*   3) Allocate and initialize the internal trace table.              *\n*   4) ATTACH the print subtask.                                      *\n*   5) Call the parameter reader.                                     *\n*   6) If errors were detected by the parameter reader,               *\n*         abort the execution.                                        *\n*   7) ATTACH the console subtask.                                    *\n*   8) OPEN the ACB.                                                  *\n*   9) Enable the Attention (ATTN) exit.                              *\n*  10) Wait for either the ATTN exit to post the \"user activity\"      *\n*      ECB or for the console subtask to post the \"termination\" ECB.  *\n*  11  If the \"user activity\" ECB was posted by the ATTN exit,        *\n*      scan the USERBLOKs:                                            *\n*          a) if a new user has \"logged on\", ATTACH a subtask         *\n*          b) if a user has terminated, DETACH the subtask and        *\n*             FREEMAIN the USERBLOK                                   *\n*      when all USERBLOKs have been checked, return to the WAIT       *\n*      (step 10).                                                     *\n*  12  If the \"termination\" ECB was posted                            *\n*          a) set the \"EOJ in progress\" flag                          *\n*          b) POST the ECB in each USERBLOK to \"wake up\" the tasks.   *\n*             The user subtasks will detect the \"EOJ in progress\" and *\n*             perform clean-up and terminate.                         *\n*          c) Close the ACB.                                          *\n*          d) DETACH the console subtask.                             *\n*          e) DETACH the print subtask.                               *\n*          f) FREEMAIN the trace table storage.                       *\n*          g) DELETE the \"common area\" module.                        *\n*          h) FREEMAIN the work area                                  *\n*          i) exit                                                    *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  OPTIONS\nSTCMAIN  CSECT\nSTCMAIN  AMODE 31\nSTCMAIN  RMODE ANY\n         USING STCMAIN,R12          DEFINE BASE\n         STM   R14,R12,12(R13)      SAVE ENTRY REGISTERS\n         LR    R12,R15              COPY BASE\n         B     MAIN0000             BRANCH AROUND EYECATCHER\nMODID    DC    CL8'STCMAIN'         MODULE NAME\n         DC    CL8'&SYSDATE'        DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'        TIME OF ASSEMBLY\nMAIN0000 DS    0H\n* ------------------------------------------------------------------- *\n*        Acquire storage for work areas                               *\n* ------------------------------------------------------------------- *\n         L     R3,DXDSIZE           WORK AREA SIZE\n         GETMAIN RU,                ACQUIRE WORK AREA STORAGE          +\n               LV=(R3),             .. WORK AREA SIZE IS IN R3         +\n               LOC=ANY              .. MAY BE ABOVE OR BELOW\n         LR    R5,R1                COPY STORAGE ADDRESS\n         LR    R10,R1               COPY STORAGE ADDRESS\n         LR    R2,R1                COPY WORK AREA ADDRESS\n         SR    R1,R1                CLEAR REGISTER\n         MVCL  R2,R0                CLEAR WORK AREA\n         A     R10,DXDSTART         PLUS DISPLACEMENT TO OUR PORTION\n         ST    R13,4(R10)           CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R10,8(R13)           OUR SAVE AREA TO CALLER'S\n         LR    R13,R10              SET SAVE AREA ADDRESS\n         USING DXDMAIN,R13          DEFINE NEW BASE\n         MVC   DXDID,MODID          IDENTIFY WORK AREA OWNER\n* ------------------------------------------------------------------- *\n*        Load common data module  (STCCOMM)                           *\n* ------------------------------------------------------------------- *\n         LOAD  EP=STCCOMM           LOAD COMMON DATA MODULE\n         LR    R11,R0               COPY TO PERMANENT BASE\n         USING STCCOMM,R11          DEFINE COMMON AREA BASE\n* ------------------------------------------------------------------- *\n*        Initialize common area                                       *\n* ------------------------------------------------------------------- *\n         ST    R5,COMMDXDA          SET DYNAMIC WORK AREA ADDRESS\n         ST    R12,AMAIN            SET MAINLINE'S ADDRESS IN COMMON\n         MVC   AATTN,VATTN          SET VTAM ATTN EXIT ADDRESS\n         MVC   ALRAD,VLRAD          SET LERAD EXIT ADDRESS\n         MVC   APRTQ,VPRTQ          SET PRINTER QUEUEING MODULE ADDR\n* ------------------------------------------------------------------- *\n*        Acquire storage for trace table                              *\n* ------------------------------------------------------------------- *\n         L     R3,TRSIZE            TRACE TABLE SIZE\n         GETMAIN RU,                ACQUIRE STORAGE FOR TRACE TABLE    +\n               LV=(R3),             .. SIZE IS IN R3                   +\n               LOC=ANY              .. MAY BE ABOVE OR BELOW\n         ST    R1,TRADDR            SAVE TRACE TABLE STORAGE ADDRESS\n         SR    R0,R0                ASSUME ON A 32-BYTE BOUNDARY\n         TM    TRADDR+3,X'07'       ALREADY ON 32-BYTE BOUNDARY?\n         BNO   INIT0010             YES\n         SRL   R1,5                 SHIFT OUT LOW BITS ..\n         SLL   R1,5                 .. TO ROUND TO 32-BYTE BOUNDARY\n         LA    R1,32(R1)            PLUS 32\n         LA    R0,TRENTRYL          1 LESS TRACE ENTRY AVAILABLE\nINIT0010 DS    0H\n         ST    R1,TRFIRST           FIRST TRACE ENTRY\n         ST    R1,TRCURR            CURRENT TRACE ENTRY\n         A     R1,TRSIZE            LAST ENTRY IN TABLE\n         SH    R1,=Y(TRENTRYL)      MINUS 1 ENTRY\n         SR    R1,R0                MINUS 1 MORE IF NECESSARY\n         ST    R1,TRLAST            LAST TRACE ENTRY ADDRESS\n* ------------------------------------------------------------------- *\n*        ATTACH print sub-task                                        *\n* ------------------------------------------------------------------- *\nINIT0020 DS    0H\n         MVC   DXDTASK,PRINT\n         MVC   DXDATTCH(ATTCHL),ATTCHI\n         LA    R2,PRTTERM           TERMINATION ECB'S ADDRESS\n         LA    R3,DXDAPARM          PARM LIST ADDRESS\n         ITRACE ID=ATCHPRT          ATTACHING PRINT SUBTASK\n         ATTACH EP=STCPRTS,         ATTACH PRINT SUBTASK               +\n               PARAM=((R11)),       .. PARAMETER IS COMMON MODULE ADDR +\n               ECB=(R2),            .. TERMINATION ECB'S ADDRESS       +\n               PURGE=QUIESCE,       .. FINISH UP I/O IN PROGRESS       +\n               MF=(E,(R3)),         .. SUBTASK PARM LIST               +\n               SF=(E,DXDATTCH)      .. EXECUTE FORM, LIST FORM ADDRESS\n         LTR   R15,R15              ATTACH SUCCESSFUL?\n         BNZ   ERR0030              NO\n         ST    R1,COMMPRT           SET TCB'S ADDRESS IN COMMON\n         ITRACE ID=PRTOK,           PRINT SUBTASK ATTACH SUCCESSFUL    +\n               RDATA1=R1            .. INCLUDE TCB ADDRESS IN TRACE\n         OI    COMMFLAG,$COMMPRT    PRINT SUBTASK IS ACTIVE\n* ------------------------------------------------------------------- *\n*        Print start-up messages                                      *\n* ------------------------------------------------------------------- *\n         MVI   PRTCC,C' '           SINGLE SPACE\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         MVI   PRTCMD,$PRTHEAD      SET COMMAND (PRINT HEADING)\n         LA    R1,PRTBLOK           REQUEST BLOCK ADDRESS\n         L     R15,APRTQ            PRINT QUEUEING ENTRY POINT\n         BALR  R14,R15              ADD REQUEST TO QUEUE\n         MVC   PRTMSGID(MSG01L),MSG01\n         BAL   R10,PRT0000          PRINT MESSAGE\n         MVC   PRTMSGID(MSG02L),MSG02\n         BAL   R10,PRT0000          PRINT MESSAGE\n* ------------------------------------------------------------------- *\n*        Call parameter interpreter                                   *\n* ------------------------------------------------------------------- *\nINIT0030 DS    0H\n         LOAD  EP=STCPARM           LOAD PARM CONVERTER\n         LR    R15,R0               PARAMETER MODULE ENTRY POINT\n         BALR  R14,R15              LINK TO PARAMETER INTERPRETER\n         DELETE EP=STCPARM          DELETE PARAMETER CONVERTER\n         TM    COMMFLAG,$ABORT      ERRORS IN PARAMETERS?\n         BO    ERR0010              YES\n* ------------------------------------------------------------------- *\n*        ATTACH console subtask                                       *\n* ------------------------------------------------------------------- *\n         MVC   DXDTASK,CONSOLE\n         LA    R2,CONSTERM          TERMINATION ECB'S ADDRESS\n         LA    R3,DXDAPARM          PARM LIST ADDRESS\n         ITRACE ID=ATCHCONS         ATTACHING CONSOLE SUBTASK\n         ATTACH EP=STCCONS,         ATTACH CONSOLE SUBTASK             +\n               PARAM=((R11)),       .. PARAMETER IS COMMON MODULE ADDR +\n               ECB=(R2),            .. TERMINATION ECB'S ADDRESS       +\n               PURGE=QUIESCE,       .. FINISH UP I/O IN PROGRESS       +\n               MF=(E,(R3)),         .. SUBTASK PARM LIST               +\n               SF=(E,DXDATTCH)      .. EXECUTE FORM, LIST FORM ADDRESS\n         LTR   R15,R15              ATTACH SUCCESSFUL?\n         BNZ   ERR0030              NO\n         ST    R1,COMMCONS          SET TCB'S ADDRESS IN COMMON\n         ITRACE ID=CONSOK,          PRINT SUBTASK ATTACH SUCCESSFUL    +\n               RDATA1=R1            .. INCLUDE TCB ADDRESS IN TRACE\n         OI    COMMFLAG,$COMMCON    CONSOLE SUBTASK IS ACTIVE\n* ------------------------------------------------------------------- *\n*        OPEN ACB and issue SETLOGON                                  *\n* ------------------------------------------------------------------- *\n         GETMAIN RU,                ACQUIRE STORAGE FOR ACB            +\n               LV=ACBL,             .. SIZE                            +\n               LOC=BELOW            .. 24 BIT\n         LR    R9,R1                COPY ADDRESS\n         ST    R9,COMMACB           SAVE ACB ADDRESS\n         MVC   0(ACBL,R9),ACBI      INITIALIZE ACB\n         USING IFGACB,R9            DEFINE ACB BASE\n         GETMAIN RU,                ACQUIRE STORAGE FOR RPL            +\n               LV=RPLL,             .. SIZE                            +\n               LOC=BELOW            .. 24 BIT\n         LR    R8,R1                COPY ADDRESS\n         MVC   0(RPLL,R8),RPLI      INITIALIZE RPL\n         USING IFGRPL,R8            DEFINE RPL BASE\n         ST    R9,RPLDACB           SET ACB ADDRESS IN RPL\n         GETMAIN RU,                ACQUIRE STORAGE FOR RPL EXTENSION  +\n               LV=RPLEXTL,          .. SIZE                            +\n               LOC=BELOW            .. 24 BIT\n         LR    R7,R1                COPY ADDRESS\n         USING ISTRPL6X,R7          DEFINE RPL EXTENSION BASE\n         ST    R7,RPLAAREA          SET EXTENSION ADDRESS IN RPL\n         GETMAIN RU,                ACQUIRE STORAGE FOR EXLST          +\n               LV=EXLSTL,           .. SIZE                            +\n               LOC=BELOW            .. 24 BIT\n         LR    R6,R1                COPY ADDRESS\n         ST    R6,COMMXLST          SAVE EXIT LIST ADDRESS\n         MVC   0(EXLSTL,R6),EXLSTI  INITIALIZE EXIT LIST\n         USING IFGEXLST,R6          DEFINE EXIT LIST BASE\n         LA    R1,COMMAPLL          OUR APPL NAME ADDRESS\n         ST    R11,ACBUSER          SET COMMON AREA ADDRESS IN ACB\n         ST    R1,ACBAPID           SET ADDRESS IN ACB\n         ST    R6,ACBEXLST          SET ADDRESS IN ACB\n         MVC   EXLATTNP,AATTN       SET ATTN EXIT ADDRESS\n         MVC   EXLLERP,ALRAD        SET LERAD EXIT ADDRESS\n         ITRACE ID=OPENACB\n         GETMAIN RU,                ACQUIRE STORAGE FOR OPEN LIST FORM +\n               LV=OPENL,            .. SIZE                            +\n               LOC=BELOW\n         LR    R2,R1                COPY ADDRESS\n         MVC   0(OPENL,R2),OPENI    INITIALIZE OPEN LIST FORM\n         OPEN  ((R9)),MF=(E,(R2))   OPEN THE ACB\n         FREEMAIN RU,A=(R2),LV=OPENL\n         MVC   PRTMSGID(MSG06L),MSG06       ACB IS OPEN\n         BAL   R10,PRT0000          PRINT MESSAGE\n         ITRACE ID=SETLOGON\n         SETLOGON ACB=(R9),         ISSUE SETLOGON                     +\n               RPL=(R8),            .. RPL ADDRESS                     +\n               OPTCD=START          .. ENABLE ATTN EXIT\n         LTR   R15,R15              SUCCESSFUL?\n         BNZ   ERR0050              NO\n         MVC   PRTMSGID(MSG07L),MSG07       ACB IS OPEN\n         BAL   R10,PRT0000          PRINT MESSAGE\n* ------------------------------------------------------------------- *\n*        WAIT for ATTN exit or termination ECB to be POSTed           *\n* ------------------------------------------------------------------- *\nPROC0000 DS    0H\n         LA    R1,COMMTECB          TERMINATION ECB ADDRESS\n         ST    R1,DXDTECBA          SET ECB ADDRESS\n         LA    R1,COMMAECB          ATTN EXIT ECB ADDRESS\n         ST    R1,DXDAECBA          SET ECB ADDRESS\n         OI    DXDAECBA,X'80'       SET END-OF-LIST\nPROC0010 DS    0H\n         ITRACE ID=MAINWAIT         MAINLINE IS WAITING\n         WAIT  1,ECBLIST=DXDWAIT    WAIT FOR SOMETHING TO HAPPEN\n         ITRACE ID=WOKEUP           MAILINE IS RUNNING AGAIN\n         TM    COMMTECB,X'40'       TERMINATION ECB?\n         BO    PROC0050             YES\n         TM    COMMAECB,X'40'       ATTN EXIT ECB?\n         BO    PROC0100             YES\n         ITRACE ID=FALSEALM         FALSE ALARM\n         B     PROC0010             WAIT AGAIN\n* ------------------------------------------------------------------- *\n*        Begin shutting down                                          *\n* ------------------------------------------------------------------- *\nPROC0050 DS    0H\n         ITRACE ID=EOJ1             SHUTDOWN REQUESTED\n         OI    COMMEOJ,$EOJ1        SET SHUTDOWN INDICATOR\n         MVC   PRTMSGID(MSG10L),MSG10\n         BAL   R10,PRT0000          PRINT MESSAGE\n* ------------------------------------------------------------------- *\n*        ATTN exit was driven or shutdown is in progress              *\n* ------------------------------------------------------------------- *\nPROC0100 DS    0H\n         XC    COMMAECB,COMMAECB    CLEAR ATTN EXIT ECB\n         ITRACE ID=ATTNWORK         WOKE UP BY ATTN EXIT\n         LA    R4,COMMUSER          CHAIN POINT\n         ICM   R5,15,COMMUSER       FIRST USER BLOCK\n         USING USERBLOK,R5          DEFINE BASE\n         BNZ   PROC0110             PROCESS THE USERS\n         TM    COMMEOJ,$EOJ1        SHUTDOWN IN PROGRESS?\n         BNO   PROC0010             NO\n         B     EXIT0000             NO USERS.. EXIT NOW\nPROC0110 DS    0H\n         TM    COMMEOJ,$EOJ1        SHUTDOWN IN PROGRESS?\n         BO    PROC0140             YES.. USE \"LOST SESSION\" CODE\n         CLI   USERSTAT,$USERINT    IN INITIAL STATE?\n         BE    PROC0130             YES\n         CLI   USERSTAT,$USERLOS    SESSION LOST?\n         BE    PROC0140             YES\n         CLI   USERSTAT,$USERDAL    SESSION DEALLOCATED?\n         BE    PROC0140             YES\nPROC0120 DS    0H\n         LA    R4,USERNEXT          CHAIN POINT\n         ICM   R5,15,USERNEXT       NEXT USER BLOCK\n         BNZ   PROC0110             CHECK THIS BLOCK\n         TM    COMMEOJ,$EOJ1        TERMINATION IN PROGRESS?\n         BO    EXIT0000             YES\n         B     PROC0010             ALL CHECKED.. WAIT AGAIN\nPROC0130 DS    0H\n         ITRACE ID=NEWUSER,         NEW USER                           +\n               DATA1=USERLU,        .. LU NAME                         +\n               DATA2=USERID         .. USER'S ID\n         LA    R2,USERTERM          TERMINATION ECB'S ADDRESS\n         LA    R3,DXDAPARM          PARM LIST ADDRESS\n         ST    R11,USERCOMM         SET STCCOMM ADDRESS IN USER BLOCK\n         ATTACH EP=STCUSER,         ATTACH USER SUBTASK                +\n               PARAM=((R5)),        .. PARAMETER IS USERBLOK ADDR      +\n               ECB=(R2),            .. TERMINATION ECB'S ADDRESS       +\n               PURGE=QUIESCE,       .. FINISH UP I/O IN PROGRESS       +\n               MF=(E,(R3)),         .. SUBTASK PARM LIST               +\n               SF=(E,DXDATTCH)      .. EXECUTE FORM, LIST FORM ADDRESS\n         LTR   R15,R15              ATTACH SUCCESSFUL?\n         BNZ   ERR0030              NO\n         ST    R1,USERTCB           SAVE TCB ADDRESS\n         MVI   USERSTAT,$USERACT    SUBTASK ATTACHED\n         B     PROC0120\nPROC0140 DS    0H\n         ITRACE ID=USERLOST,        USER SESSION HAS BEEN LOST         +\n               DATA1=USERLU,        .. LU NAME                         +\n               DATA2=USERID         .. USER'S ID\n         TM    USERTERM,X'40'       TERMINATION ECB POSTED?\n         BO    PROC0150             YES\n         POST  USERECB              WAKE UP THE SUBTASK\n         WAIT  ECB=USERTERM         WAIT FOR SUBTASK TO TERMINATE\nPROC0150 DS    0H\n         MVC   DXDTASK,PRINT        TASK BEING DETACHED\n         LA    R1,USERTCB           TCB ADDRESS\n         DETACH (R1)                DETACH THE SUBTASK\n         MVC   PRTMSGID(MSG09L),MSG09\n         MVC   PRTMSGID+(MSG09LU-MSG09)(L'MSG09LU),USERLU\n         MVC   PRTMSGID+(MSG09ID-MSG09)(L'MSG09ID),USERID\n         UNPK  PRTMSGID+(MSG09RC-MSG09)(9),USERTERM(5)\n         MVZ   PRTMSGID+(MSG09RC-MSG09)(8),HEX0000\n         TR    PRTMSGID+(MSG09RC-MSG09)(8),HEXCHAR\n         MVI   PRTMSGID+(MSG09RC-MSG09)+8,C' '\n         BAL   R10,PRT0000\n         MVC   DXDENQ(ENQL),ENQI    INITIALIZE ENQUE LIST FORM\n         ENQ   MF=(E,DXDENQ)        ENQUE USER BLOCK CHAIN\n         MVC   0(4,R4),USERNEXT     REMOVE CURRENT BLOCK FROM CHAIN\n         MVC   DXDDEQ(DEQL),DEQI    INITIALIZE DEQUEUE LIST FORM\n         DEQ   MF=(E,DXDDEQ)        DEQUEUE USER BLOCK CHAIN\n         FREEMAIN RU,A=(R5),LV=USERL  FREE USER BLOCK\n         ICM   R5,15,0(R4)          NEXT USER BLOCK ADDRESS\n         BZ    PROC0010             NO MORE USER BLOCKS\n         LA    R4,USERNEXT          CHAIN POINT\n         B     PROC0110             CHECK THIS BLOCK\n* ------------------------------------------------------------------- *\n*        Error routines                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVC   PRTMSGID(MSG03L),MSG03       ERRORS IN PARAMETERS\n         BAL   R10,PRT0000          PRINT MESSAGE\n         B     EXIT0000             AND EXIT\nERR0030  DS    0H\n         ITRACE ID=ATCHFAIL         SUBTASK ATTACH FAILED\n         STH   R15,DXDRC            SAVE RETURN CODE\n         MVC   PRTMSGID(MSG04L),MSG04\n         MVC   PRTMSGID+(MSG04TSK-MSG04)(L'MSG04TSK),DXDTASK\n         UNPK  PRTMSGID+(MSG04R-MSG04)(5),DXDRC(3)\n         MVZ   PRTMSGID+(MSG04R-MSG04)(L'MSG04R),HEX0000\n         TR    PRTMSGID+(MSG04R-MSG04)(L'MSG04R),HEXCHAR\n         MVI   PRTMSGID+(MSG04R-MSG04)+4,C' '\n         BAL   R10,PRT0000          PRINT MESSAGE\n         ABEND $U0001,DUMP,,USER    TIME TO FIX SUTL\nERR0040  DS    0H\n         ITRACE ID=DTCHFAIL         SUBTASK DETACH FAILED\n         STH   R15,DXDRC            SAVE RETURN CODE\n         MVC   PRTMSGID(MSG05L),MSG05\n         MVC   PRTMSGID+(MSG05TSK-MSG05)(L'MSG05TSK),DXDTASK\n         UNPK  PRTMSGID+(MSG05R-MSG05)(5),DXDRC(3)\n         MVZ   PRTMSGID+(MSG05R-MSG05)(L'MSG05R),HEX0000\n         TR    PRTMSGID+(MSG05R-MSG05)(L'MSG05R),HEXCHAR\n         MVI   PRTMSGID+(MSG05R-MSG05)+4,C' '\n         BAL   R10,PRT0000          PRINT MESSAGE\n         ABEND $U0002,DUMP,,USER    TIME TO FIX SUTL\nERR0050  DS    0H\n         STH   R15,DXDRC            SAVE RETURN CODE\n         ITRACE ID=LOGONF,          SETLOGON FAILED                    +\n               RDATA1=R15\n         MVC   PRTMSGID(MSG08L),MSG08\n         MVC   PRTMSGID+(MSG08RC-MSG08)(L'MSG08RC),DXDRC\n         UNPK  PRTMSGID+(MSG08RC-MSG08)(5),DXDRC(3)\n         MVZ   PRTMSGID+(MSG08RC-MSG08)(L'MSG08RC),HEX0000\n         TR    PRTMSGID+(MSG08RC-MSG08)(L'MSG08RC),HEXCHAR\n         MVI   PRTMSGID+(MSG08RC-MSG08)+4,C' '\n         BAL   R10,PRT0000          PRINT MESSAGE\n         ABEND $U0003,DUMP,,USER    TIME TO FIX SUTL\nPRT0000  DS    0H\n         ITRACE ID=PRINT\n         MVI   PRTCMD,$PRTPRT       SET COMMAND (PRINT)\n         LA    R1,PRTBLOK           REQUEST BLOCK ADDRESS\n         L     R15,APRTQ            PRINT QUEUEING ENTRY POINT\n         BALR  R14,R15              ADD A REQUEST TO PRINT QUEUE\n         BR    R10                  COMPLETE\nEXIT0000 DS    0H\n         ITRACE ID=STARTEOJ\n         MVC   PRTMSGID(MSG90L),MSG90\n         BAL   R10,PRT0000          PRINT MESSAGE\n         ITRACE ID=EOJ2\n         OI    COMMEOJ,$EOJ2        SET EOJ STAGE 2 (CLOSE ACB)\n         MVC   DXDOC(CLOSEL),CLOSEI INITIALIZE CLOSE LIST FORM\n         GETMAIN RU,                ACQUIRE STORAGE FOR CLOSE          +\n               LV=CLOSEL,           .. SIZE                            +\n               LOC=BELOW            .. 24 BIT\n         LR    R2,R1                COPY ADDRESS\n         MVC   0(CLOSEL,R2),CLOSEI  INITIALIZE CLOSE\n         CLOSE ((R9)),MF=(E,(R2))   CLOSE THE ACB\n         FREEMAIN RU,A=(R2),LV=CLOSEL\n         FREEMAIN RU,A=(R9),LV=ACBL FREEMAIN ACB STORAGE\n         XC    COMMACB,COMMACB      ACB IS GONE\n         FREEMAIN RU,A=(R8),LV=RPLL FREEMAIN RPL STORAGE\n         FREEMAIN RU,A=(R7),LV=RPLEXTL\n         FREEMAIN RU,A=(R6),LV=EXLSTL FREEMAIN EXIT LIST STORAGE\n         XC    COMMXLST,COMMXLST    EXIT LIST IS GONE\n         OI    COMMEOJ,$EOJ3        SET EOJ STAGE 3 (CLOSE ACB)\n         ITRACE ID=EOJ3             EOJ STAGE 3 (FREE STORAGE)\n         ITRACE ID=DTCHCONS         DETACHING CONSOLE SUBTASK\n         WAIT  ECB=CONSTERM         WAIT FOR CONSOLE TASK TO COMPLETE\n         LA    R1,COMMCONS          CONSOLE TASK TCB ADDRESS ADDRESS\n         DETACH (1)                 DETACH CONSOLE SUBTASK\n         ITRACE ID=EOJ8             SET EOJ STAGE 3 (FREE STORAGE)\n         OI    COMMEOJ,$EOJ8        SET EOJ STAGE 8 (FINAL STAGE)\n         ITRACE ID=PRTEOJ           SHUTTING DOWN PRINT\n         POST  PRTWORK              SHUTDOWN PRINT TASK\n         WAIT  1,ECB=PRTTERM        WAIT FOR PRINT SUBTASK TERMINATION\n         LA    R1,COMMPRT           PRINT SUBTASK TCB ADDRESS\n         ITRACE ID=DTCHPRT,         DETACHING PRINT SUBTASK            +\n               RDATA1=R1            .. PRINT SUBTASK'S TCB ADDRESS\n         DETACH (1)                 DETACH PRINT SUBTASK\n         L     R0,TRSIZE            TRACE TABLE SIZE\n         L     R1,TRADDR            TRACE TABLE STORAGE ADDRESS\n         FREEMAIN RU,A=(1),LV=(0)   FREEMAIN TRACE TABLE STORAGE\n         L     R2,COMMDXDA          SAVE WORK AREA STORAGE ADDRESS\n         DELETE EP=STCCOMM          DELETE COMMON MODULE\n         L     R0,DXDSIZE           WORK AREA STORAGE SIZE\n         L     R13,4(R13)           RESTORE CALLER'S SAVE AREA ADDRESS\n         FREEMAIN RU,A=(2),LV=(0)   FREEMAIN WORK AREA STORAGE\n         LM    R14,R12,12(R13)      RESTORE CALLER'S REGISTERS\n         SR    R15,R15              CLEAR REGISTER\n         BR    R14                  EXIT\n* ------------------------------------------------------------------- *\n*        Constants                                                    *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDMAIN)           DISPLACEMENT TO WORK AREA\nDXDSIZE  CXD                        WORK AREA TOTAL SIZE\nVATTN    DC    V(STCATTN)           VTAM ATTENTION EXIT ENTRY POINT\nVLRAD    DC    V(STCLRAD)           VTAM LERAD EXIT ENTRY POINT\nVPRTQ    DC    V(STCPRTQ)           PRINTER MODULE ENTRY POINT\nATTCHI   ATTACH EP=STCPRT,          ATTACH LIST FORM                   +\n               ECB=*,               .. TERMINATION ECB'S ADDRESS       +\n               PURGE=QUIESCE,       .. FINISH UP I/O IN PROGRESS       +\n               SF=L                 .. LIST FORM\nATTCHL   EQU   *-ATTCHI\nACBI     ACB   AM=VTAM,             ACB                                +\n               MACRF=LOGON,                                            +\n               EXLST=*,                                                +\n               APPLID=*\nACBL     EQU   *-ACBI\nEXLSTI   EXLST AM=VTAM,                                                +\n               ATTN=*,                                                 +\n               LERAD=*\nEXLSTL   EQU   *-EXLSTI\nRPLI     RPL   AM=VTAM,                                                +\n               AAREA=RPLEXTI\nRPLL     EQU   *-RPLI\nRPLEXTI  ISTRPL6\nRPLEXTL  EQU   *-RPLEXTI\nOPENI    OPEN  (*,INPUT),MF=L\nOPENL    EQU   *-OPENI\nCLOSEI   CLOSE (*),MF=L\nCLOSEL   EQU   *-CLOSEI\nENQI     ENQ   (QNAME,RNAME,E,,STEP),                                  +\n               RET=HAVE,                                               +\n               SMC=NONE,                                               +\n               MF=L\nENQL     EQU   *-ENQI\nDEQI     DEQ   (QNAME,RNAME,,STEP),                                    +\n               RMC=NONE,                                               +\n               MF=L\nDEQL     EQU   *-DEQI\nHEX0000  DC    8X'00'\nHEXCHAR  DC    C'0123456789ABCDEF'\nQNAME    DC    CL8'SUTL'\nRNAME    DC    C'USERBLOK CHAIN'\nPRINT    DC    CL8'PRINT'\nCONSOLE  DC    CL8'CONSOLE'\nMSG01    DS    0C\n         DC    CL11'STCMAIN01I'\n         DC    C'Print subtask attached'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'STCMAIN02I'\n         DC    C'Initialization starting'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'STCMAIN03E'\n         DC    C'Error(s) detected in control statements, execution abo+\n               rted'\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    CL11'STCMAIN04E'\nMSG04TSK DC    CL8' '\n         DC    C' subtask attach failed, RC='\nMSG04R   DC    CL4' '\n         DC    C' execution aborted'\nMSG04L   EQU   *-MSG04\nMSG05    DS    0C\n         DC    CL11'STCMAIN05E'\nMSG05TSK DC    CL8' '\n         DC    C' subtask detach failed, RC='\nMSG05R   DC    CL4' '\n         DC    C' '\nMSG05L   EQU   *-MSG05\nMSG06    DS    0C\n         DC    CL11'STCMAIN06I'\n         DC    C'ACB is OPEN'\nMSG06L   EQU   *-MSG06\nMSG07    DS    0C\n         DC    CL11'STCMAIN07I'\n         DC    C'ATTN exit enabled'\nMSG07L   EQU   *-MSG07\nMSG08    DS    0C\n         DC    CL11'STCMAIN08E'\n         DC    C'SEGLOGON failed, RC='\nMSG08RC  DC    CL8' '\n         DC    C' '\nMSG08L   EQU   *-MSG08\nMSG09    DS    0C\n         DC    CL11'STCMAIN09I'\n         DC    C'User subtask for LU='\nMSG09LU  DC    CL8' '\n         DC    C' USER ID='\nMSG09ID  DC    CL8' '\n         DC    C'terminated, ECB='\nMSG09RC  DC    CL8' '\n         DC    C' '\nMSG09L   EQU   *-MSG09\nMSG10    DS    0C\n         DC    CL11'STCMAIN10I'\n         DC    C'Shutdown requested, beginning termination of user task+\n               s'\nMSG10L   EQU   *-MSG10\nMSG90    DS    0C\n         DC    CL11'STCMAIN90I'\n         DC    C'Termination beginning'\nMSG90L   EQU   *-MSG90\n         LTORG\n* ------------------------------------------------------------------- *\n*        Work area                                                    *\n* ------------------------------------------------------------------- *\nDXDMAIN  DSECT\n         SUTLSAVE DSECT=NO          WORK AREA PREFIX\nDXDAPARM DS    A                    ATTACH PARM\nDXDOC    DS    A                    OPEN/CLOSE LIST FORM\n         SPACE 1\nDXDWAIT  DS    0A         MAIN TASK ECB LIST\nDXDTECBA DS    A                    TERMINATION ECB LIST\nDXDAECBA DS    A                    ATTN EXIT ECB\n         SPACE 1\nDXDATTCH DS    (ATTCHL)X            RESERVE ROOM FOR ATTACH LIST FORM\nDXDENQ   DS    (ENQL)X              RESERVE ROOM FOR ENQ LIST FORM\nDXDDEQ   DS    (DEQL)X              RESERVE ROOM FOR DEQ LIST FORM\nDXDRC    DS    H                    RETURN CODE FROM SYSTEM MACRO\nDXDTASK  DS    CL8                  TASK BEING ATTACHED TO DETACHED\n         PRTBLOK  DSECT=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         STCCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*        PSA                                                          *\n* ------------------------------------------------------------------- *\n         IHAPSA DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              ACB DSECT                                              *\n* ------------------------------------------------------------------- *\n         IFGACB AM=VTAM\n* ------------------------------------------------------------------- *\n*              RPL AND RPL EXTENSION DSECTS                           *\n* ------------------------------------------------------------------- *\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------- *\n*              EXLIST                                                 *\n* ------------------------------------------------------------------- *\n         IFGEXLST AM=VTAM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\n         ABCODES\n         END   STCMAIN\n./ ADD NAME=STCPARM\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCPARM                                               *\n*                                                                     *\n*   This module interprets the control statements entered via STCIN.  *\n*   Since the control statements are only read once, this module is   *\n*   linked separately.  STCMAIN issues a LOAD, links to this module,  *\n*   and then DELETEs it.  This frees up the storage that would        *\n*   otherwise be wasted by having code that is only used at start-up  *\n*   in the region.                                                    *\n*                                                                     *\n*   All parameter statements cause fields to be set in the common     *\n*   area (STCCOMM).                                                   *\n*                                                                     *\n*   Since this module does I/O it allocates its own work area in 24   *\n*   bit storage and is assembled and linked with RMODE 24.            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCPARM  CSECT\nSTCPARM  AMODE 31\nSTCPARM  RMODE 24\n         USING STCPARM,R12           DEFINE BASE\n         USING STCCOMM,R11           DEFINE BASE\n         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS\n         LR    R12,R15               SET BASE\n         B     PARM0000\n         DC    CL8'STCPARM'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nPARM0000 DS    0H\n         GETMAIN RU,                 ACQUIRE STORAGE FOR WORK AREA     +\n               LV=WORKL,             .. AMOUNT OF STORAGE REQUIRED     +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,8(R13)             CHAIN TO PREVIOUS SAVE AREA\n         ST    R13,4(R1)             CHAIN PREVIOUS TO OURS\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         USING PARMWORK,R13          DEFINE BASE\n         MVI   PRTCC,C' '            INITIALIZE PRINT\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         MVC   WORKDCB(DCBL),DCBI    INITIALIZE DCB\n         MVC   WORKOC(OPENL),OPENI   INITIALIZE OPEN LIST FORM\n         ITRACE ID=OPEN\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         OPEN  (WORKDCB,INPUT),MF=(E,WORKOC)\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\nPARM0010 DS    0H\n         ITRACE ID=READCARD          READ A CONTROL STATEMENT\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         GET   WORKDCB,CARDDATA      READ A CONTROL STATEMENT\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         MVC   PRTMSGID(MSG01L),MSG01\n         MVC   PRTMSGID+(MSG01D-MSG01)(L'MSG01D),CARDDATA\n         BAL   R10,PRT0000           PRINT CONTROL STATEMENT\n         CLI   CARDDATA,C'*'         COMMENT?\n         BE    PARM0010              YES\n         CLC   ABNDSTMT,CARDDATA     ABEND STATEMENT?\n         BE    ABND0000              YES\n         CLC   APPLSTMT,CARDDATA     APPLID STATEMENT?\n         BE    APPL0000              YES\n         ITRACE ID=INVALID           INVALID STATEMENT\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG02L),MSG02\n         BAL   R10,PRT0000           PRINT ERROR MESSAGE\n         B     PARM0010              READ NEXT CONTROL STATEMENT\nPARM0020 DS    0H\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         MVC   WORKOC(CLOSEL),CLOSEI INITIALIZE CLOSE LIST FORM\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         CLOSE WORKDCB,MF=(E,WORKOC) CLOSE THE DCB\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         CLC   COMMAPLN,COMMBLKS     APPL NAME BLANK?\n         BNE   EXIT0000              NO\n         MVC   PRTMSGID(MSG03L),MSG03\n         BAL   R10,PRT0000           PRINT MESSAGE\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         B     EXIT0000              AND EXIT\n*---------------------------------------------------------------------*\n*        Process ABEND statement                                      *\n*---------------------------------------------------------------------*\nABND0000 DS    0H\n         ITRACE ID=SETABEND          ABEND STATEMENT PROCESSED\n         OI    COMMFLAG,$ABEND       SET ABEND FLAG\n         MVC   PRTMSGID(MSG04L),MSG04\n         BAL   R10,PRT0000           PRINT\n         B     PARM0010              READ NEXT STATEMENT\n*---------------------------------------------------------------------*\n*        Process APPLID statement                                     *\n*---------------------------------------------------------------------*\nAPPL0000 DS    0H\n         ITRACE ID=APPLID            APPLID STATEMENT BEING PROCESSED\n         CLC   COMMAPLN,COMMBLKS     APPLID ALREADY SPECIFIED?\n         BNE   APPL0030              YES\n         LA    R1,CARDDATA+L'APPLSTMT FIRST CHARACTER OF APPL NAME\n         ST    R1,PARSEIN            SET INPUT DATA ADDRESS\n         LA    R1,72-L'APPLSTMT      MAXIMUM INPUT LENGTH\n         STH   R1,PARSEIL            SET INPUT LENGTH\n         LA    R1,8                  MAXIMUM CHARACTERS IN NAME\n         STH   R1,PARSEOL            SET MAXIMUM OUTPUT LENGTH\n         BAL   R10,PARSE000          LINK TO PARSE\n         OC    PARSEOL,PARSEOL       NAME LENGTH ZERO?\n         BZ    APPL0010              YES\n         CLI   PARSEDLM,C' '         STOPPED ON A BLANK?\n         BNE   APPL0020              NO.. NAME IS TOO LONG\n         ITRACE ID=GOODAPPL          APPL NAME IS OK (AS FAR AS LENGTH)\n         MVC   COMMAPLN,PARSEOUT     SAVE APPL NAME\n         MVC   PRTMSGID(MSG05L),MSG05\n         BAL   R10,PRT0000           PRINT MESSAGE\n         B     PARM0010              READ NEXT STATEMENT\nAPPL0010 DS    0H\n         ITRACE ID=NOAPPL            APPL NAME OMITTED\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG06L),MSG06       APPL NAME OMITTED\n         BAL   R10,PRT0000           PRINT\n         B     PARM0010              READ NEXT STATEMENT\nAPPL0020 DS    0H\n         ITRACE ID=LONGAPPL          APPL NAME IS TOO LONG\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG07L),MSG07       APPL NAME IS TOO LONG\n         BAL   R10,PRT0000           PRINT\n         B     PARM0010              READ NEXT STATEMENT\nAPPL0030 DS    0H\n         ITRACE ID=DUPAPPL           DUPLICATE APPL STATEMENT\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         MVC   PRTMSGID(MSG08L),MSG08\n         BAL   R10,PRT0000           PRINT\n         B     PARM0010              READ NEXT STATEMENT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Parsing                                                            *\n*                                                                     *\n*  At entry:                                                          *\n*     PARSEIN  must be set to the data starting address               *\n*     PARSEIL  must be set to the data length                         *\n*     PARSEOL  must be set to the maximum output length               *\n*                                                                     *\n*  At exit:                                                           *\n*     PARSEIN  will be set the address of the byte following the      *\n*              delimiter that stopped the scan                        *\n*     PARSEIL  will be set to the length of the data following the    *\n*              delimiter                                              *\n*     PARSEOUT will be the data up to but not including the delimiter *\n*     PARSEOL  will be set to the length of the data in PARSEOUT      *\n*     PARSEDLM will be set to the delimiter that stopped the scan or  *\n*              to a null if the scan stopped due to end of data       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARSE000 DS    0H\n         ITRACE ID=PARSE,            STARTING A PARSE                  +\n               DATA1=PARSEIN,        .. STARTING ADDRESS               +\n               DATA2=PARSEIL         .. INPUT AND OUTPUT LENGTHS\n         MVC   PARSEOUT,COMMBLKS     CLEAR OUTPUT DATA\n         LH    R1,PARSEIL            INPUT DATA LENGTH\n         LH    R2,PARSEOL            MAXIMUM OUTPUT LENGTH\n         L     R3,PARSEIN            INPUT DATA ADDRESS\n         LA    R4,PARSEOUT           OUTPUT DATA ADDRESS\n         SR    R5,R5                 INITIALIZE FOR OUTPUT LENGTH\n         MVI   PARSEDLM,0            SET DELIMITER TO A NULL\n         LTR   R1,R1                 ANY DATA LEFT?\n         BZ    PARSE050              NO\nPARSE010 DS    0H\n         CLI   0(R3),C' '            BLANK?\n         BNE   PARSE020              NO\n         LA    R3,1(R3)              NEXT\n         BCT   R1,PARSE010           LOOP\n         B     PARSE050\nPARSE020 DS    0H\n         CLI   0(R3),C' '            BLANK?\n         BE    PARSE040              YES\n         CLI   0(R3),C','            COMMA?\n         BE    PARSE040              YES\n         MVC   0(1,R4),0(R3)         COPY TO OUTPUT\n         LA    R3,1(R3)              NEXT\n         LA    R4,1(R4)              NEXT\n         LA    R5,1(R5)              PLUS 1 BYTE OF LENGTH\n         BCT   R1,PARSE030           MINUS 1 BYTE OF INPUT\n         B     PARSE050              FORCE EXIT\nPARSE030 DS    0H\n         BCT   R2,PARSE020           LOOP\n         CLI   0(R3),C' '            BLANK?\n         BE    PARSE040              YES\n         CLI   0(R3),C','            COMMA?\n         BNE   PARSE050              NO\nPARSE040 DS    0H\n         MVC   PARSEDLM,0(R3)        SAVE DELIMITER\n         LA    R3,1(R3)              SKIP DELIMITER\n         BCTR  R1,0                  MINUS BYTE USED BY DELIMITER\nPARSE050 DS    0H\n         STH   R1,PARSEIL            SAVE INPUT LENGTH LEFT\n         STH   R5,PARSEOL            SAVE OUTPUT LENGTH\n         ST    R3,PARSEIN            SAVE INPUT ENDING POINT\n         ITRACE ID=PARSEOUT,         PARSE ENDING                      +\n               DATA1=PARSEOUT,       .. PART OF OUTPUT DATA            +\n               DATA2=PARSEOL         .. OUTPUT LENGTH\n         LM    R1,R5,PARSESAV        RESTORE SAVED REGISTERS\n         BR    R10                   EXIT\n* ------------------------------------------------------------------- *\n*        PRINTING                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         ITRACE ID=PRINT\n         MVI   PRTCMD,$PRTPRT        SET COMMAND (PRINT)\n         LA    R1,PRTBLOK            PRINT REQUEST BLOCK ADDRESS\n         L     R15,APRTQ             PRINT QUEUEING ENTRY POINT\n         BALR  R14,R15               ADD PRINT TO QUEUE\n         BR    R10                   RETURN\n* ------------------------------------------------------------------- *\n*        EXIT                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT              EXITING PARAMETER CONVERTER\n         LR    R1,R13                SAVE SAVE AREA ADDRESS\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         FREEMAIN RU,A=(1),LV=WORKL  FREEMAIN WORK AREA\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\nAM24     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         BSM   R0,R15                RETURN IN 24-BIT MODE\nAM31     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         O     R15,X80               SET 31-BIT MODE FLAG\n         BSM   R0,R15                RETURN IN 31-BIT MODE\n* ------------------------------------------------------------------ *\n*        CONSTANTS                                                   *\n* ------------------------------------------------------------------ *\nX80      DC    A(X'80000000')\nDCBI     DCB   DSORG=PS,                                               +\n               DDNAME=STCIN,                                           +\n               RECFM=FB,                                               +\n               LRECL=80,                                               +\n               EODAD=PARM0020,                                         +\n               MACRF=GM\nDCBL     EQU   *-DCBI\nOPENI    OPEN  (*,INPUT),MF=L\nOPENL    EQU   *-OPENI\nCLOSEI   CLOSE (*),MF=L\nCLOSEL   EQU   *-CLOSEI\nABNDSTMT DC    C'ABEND'              ABEND CONTROL STATEMENT\nAPPLSTMT DC    C'APPLID='            APPLID STATEMENT\nMSG01    DS    0C\n         DC    CL11'STCPARM01I'\n         DC    C'Control statement:'\n         DC    C' '\nMSG01D   DC    CL80' '\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'STCPARM02E'\n         DC    C'Invalid control statement'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'STCPARM03E'\n         DC    C'Required parameter ''APPLID'' not specified or blank'\nMSG03L   EQU    *-MSG03\nMSG04    DS    0C\n         DC    CL11'STCPARM04I'\n         DC    C'ABEND flag set'\nMSG04L   EQU   *-MSG04\nMSG05    DS    0C\n         DC    CL11'STCPARM05I'\n         DC    C'APPLID statement processed successfully'\nMSG05L   EQU   *-MSG05\nMSG06    DS    0C\n         DC    CL11'STCPARM06E'\n         DC    C'APPL name omitted'\nMSG06L   EQU   *-MSG06\nMSG07    DS    0C\n         DC    CL11'STCPARM07E'\n         DC    C'APPLID is too long (max is 8 characters)'\nMSG07L   EQU   *-MSG07\nMSG08    DS    0C\n         DC    CL11'STCPARM08E'\n         DC    C'Duplicate APPL ID statement'\nMSG08L   EQU   *-MSG08\n         LTORG\n* ------------------------------------------------------------------ *\n*        Work areas                                                  *\n* ------------------------------------------------------------------ *\nPARMWORK DSECT\n         SUTLSAVE DSECT=NO\nPARSESAV DS    5F                    REGISTER SAVE AREA FOR PARSE\nWORKOC   DS    A                     OPEN/CLOSE LIST FORM AREA\nPARSEIN  DS    A                     PARSE DATA INPUT ADDRESS\nPARSEIL  DS    H                     LENGTH OF DATA AT PARSE IN\nPARSEOL  DS    H                     LENGTH OF DATA IN PARSE OUT\nWORKLEN  DS    H                     WORK LENGTH\nPARSEOUT DS    CL80                  OUTPUT FROM PARSE\nCARDDATA DS    CL80                  CONTROL STATEMENT I/O AREA\nPARSEDLM DS    C                     DELIMITER THAT STOPPED PARSE\nWORKWORK DS    CL44                  WORK AREA\nWORKDCB  DS    0F,(DCBL)X            STCIN DCB\n         PRTBLOK  DSECT=NO\nWORKL    EQU   *-PARMWORK\n* ------------------------------------------------------------------ *\n*              COMMON DATA MAP                                       *\n* ------------------------------------------------------------------ *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         IHAPSA DSECT=YES,LIST=NO\n* ------------------------------------------------------------------ *\n*              EQUATES                                               *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         END  STCPARM\n./ ADD NAME=STCPRTQ\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCPRTQ                                               *\n*                                                                     *\n*  Function:                                                          *\n*   Print may be generated under multiple tasks.  Print is done by    *\n*   a separate subtask.  This is a subroutine to add elements to the  *\n*   print subtask work queue.  This module does not follow the        *\n*   \"normal\" SUTL linkage or work area usage.  Any work areas must be *\n*   allocated and released dynamically.                               *\n*                                                                     *\n*   At entry this routine expects                                     *\n*     R1  - PRTBLOK Address                                           *\n*     R11 - STCCOMM address                                           *\n*     R13 - Callers save area address                                 *\n*     R14 - Return address                                            *\n*     R15 - Entry point address                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCPRTQ  CSECT\nSTCPRTQ  AMODE 31\nSTCPRTQ  RMODE ANY\n         USING STCPRTQ,R12           DEFINE BASE\n         USING STCCOMM,R11           DEFINE BASE\n         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS\n         LR    R12,R15               COPY BASE ADDRESS\n         B     PRT0000               SKIP EYECATCHERS\n         DC    CL8'STCPRTQ'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nPRT0000  DS    0H\n         TM    COMMEOJ,$EOJ3         3RD EOJ PHASE?\n         BO    EXIT0010              YES\n         LR    R10,R1                COPY PRTBLOK ADDRESS\n         USING PRTBLOK,R10           DEFINE BASE\n         GETMAIN RU,LV=WKL           ACQUIRE STORAGE FOR SAVE AREA\n         ST    R13,4(R1)             SAVE SAVE AREA ADDRESS\n         ST    R1,8(R13)             CHAIN TO PREVIOUS SAVE AREA\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         USING WK,R13                DEFINE WORK AREA BASE\n         ITRACE ID=ENTRY\n         GETMAIN RU,                 ACQUIRE STORAGE FOR PRINT BLOCK   +\n               LV=PRTBLOKL           .. SIZE\n         MVC   0(PRTBLOKL,R1),PRTBLOK\n         MVI   PRTCC,C' '            CLEAR CARRIAGE CONTROL\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         LR    R10,R1                COPY BLOCK'S ADDRESS\n         MVC   PRTEYE,PRTID          SET EYECATCHER\nPRT0010  DS    0H\n         L     R2,PRTREQ             FIRST REQUEST BLOCK'S ADDRESS\n         ST    R2,PRTNEXT            SET CHAIN POINTER\n         CS    R2,R10,PRTREQ         ADD NEW BLOCK TO CHAIN\n         BNE   PRT0010               UNSUCCESSFUL.. TRY AGAIN\n         ITRACE ID=QUEUED,           NEW BLOCK IS ON THE QUEUE         +\n               RDATA1=R10,           .. NEW BLOCK'S ADDRESS            +\n               RDATA2=R2             .. PREVIOUS BLOCK'S ADDRESS\n         POST  PRTWORK               POST PRINT TASK ECB\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         LR    R1,R13                COPY SAVE AREA ADDRESS\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         FREEMAIN RU,A=(1),LV=WKL    FREEMAIN SAVE AREA\nEXIT0010 DS    0H\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*        CONSTANTS                                                   *\n* ------------------------------------------------------------------ *\nPRTID    DC    CL8'PRTBLOK'\n         LTORG\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\nWK       DSECT\n         SUTLSAVE DSECT=NO\nWKL      EQU   *-WK\n* ------------------------------------------------------------------ *\n*              PRINT REQUEST BLOCK                                   *\n* ------------------------------------------------------------------ *\n         PRTBLOK  DSECT=YES\n* ------------------------------------------------------------------ *\n*              COMMON DATA MAP                                       *\n* ------------------------------------------------------------------ *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         IHAPSA DSECT=YES,LIST=NO\n* ------------------------------------------------------------------ *\n*              EQUATES                                               *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         END  STCPRTQ\n./ ADD NAME=STCPRTS\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCPRTS                                               *\n*                                                                     *\n*   Sutl consists of multiple tasks and has asynchronous exits.  It is*\n*   possible that multiple tasks would try to print at the same time. *\n*   Instead of trying to serialize a DCB, print was moved to this     *\n*   subtask.  Any other subtask or exit may queue work for this task  *\n*   from PRTREQ in the common area.                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCPRTS  CSECT\nSTCPRTS  AMODE 31\nSTCPRTS  RMODE 24\n         USING STCPRTS,R12           DEFINE BASE\n         USING PRTBLOK,R7            DEFINE BASE\n         USING STCCOMM,R11           DEFINE BASE\n         STM   R14,R12,12(R13)       CHAIN REGISTERS\n         LR    R12,R15               COPY ENTRY POINT ADDRESS\n         B     PRT0000\n         DC    CL8'STCPRTS'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nPRT0000  DS    0H\n         L     R11,0(R1)             LOAD STCCOMM'S ADDRESS\n         GETMAIN R,LV=WORKL          ACQUIRE STORAGE FOR WORK AREA\n         USING WORKAREA,R1           DEFINE BASE\n         XC    WORKAREA+000(256),WORKAREA+000\n         XC    WORKAREA+256(WORKL-256),WORKAREA+000\n         ST    R13,4(R1)             CHAIN PREVIOUS SAVE AREA TO OURS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO PREVIOUS\n         LR    R13,R1                COPY WORK AREA ADDRESS\n         DROP  R1\n         USING WORKAREA,R13          DEFINE BASE\n         ST    R12,APRTS             SET OUR ENTRY POINT IN COMMON\n         ITRACE ID=INIT\n         MVC   WKDCB(DCBL),DCBI      INITIALIZE DCB IN WORK AREA\n         MVI   WKCC,C' '             INITIALIZE CARRIAGE CONTROL\n         MVC   WKDATE(PRTLRECL-1),WKCC\n         MVC   WKOCPL(OCPLL),OCPLI   INITIALIZE OPEN/CLOSE PARM LIST\n         ZAP   WKLINE,P0             INITIALIZE LINE COUNT\n         ZAP   WKPAGE,P0             INITIALIGE PAGE COUNT\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         OPEN  (WKDCB,OUTPUT),MF=(E,WKOCPL)\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\nPRT0010  DS    0H\n         TM    PRTWORK,X'40'         ECB ALREADY POSTED?\n         BO    PRT0020               GET BUSY\n         LA    R1,PRTWORK            WORK TO DO ECB\n         ITRACE ID=WORKWAIT,         WAITING FOR WORK                  +\n               RDATA1=R1             .. ECB'S ADDRESS\n         WAIT  1,ECB=(1)             WAIT FOR WORK TO DO ECB\n         ITRACE ID=WOKEUP\nPRT0020  DS    0H\n         XC    PRTWORK,PRTWORK       RESET ECB\n         SR    R1,R1                 CLEAR REGISTER\nPRT0030  DS    0H\n         ICM   R10,15,PRTREQ         FIRST REQUEST BLOCK\n         BZ    PRT0210               NOTHING ON CHAIN\n         CS    R10,R1,PRTREQ         GET REQUEST CHAIN\n         BNE   PRT0030\n         USING PRTBLOK,R10           DEFINE BASE\n         ITRACE ID=HAVEQ,            WE HAVE THE QUEUE                 +\n               RDATA1=R10            .. FIRST (LAST) QUEUE BLOCK\nPRT0040  DS    0H\n         L     R2,PRTNEXT            NEXT BLOCK'S ADDRESS\n         ST    R1,PRTNEXT            SET POINTER\n         LR    R1,R10                SWITCH\n         LTR   R10,R2                SWITCH\n         BNZ   PRT0040               LOOP\n         LR    R10,R1                COPY FIRST BLOCK'S ADDRESS\nPRT0050  DS    0H\n         CLI   PRTCMD,$PRTHEAD       FORCED HEADING?\n         BE    PRT0120               YES\n         MVC   WKCC,PRTCC            COPY CARRIAGE CONTROL\n         TIME  DEC\n         STM   R0,R1,WKTIMDAY        SAVE TIME AND DATE\n         MVC   WKTIME,TIMEEDWD       INITIALIZE WITH EDIT WORD\n         ED    WKTIME,WKTIMDAY       EDIT TIME\n         MVC   WKDATE,DATEEDWD       INITIALIZE WITH EDIT WORD\n         ED    WKDATE,WKTIMDAY+5     EDIT DATE\n         MVC   WKMSGID,PRTMSGID      COPY MESSAGE ID\n         LA    R1,WKMSGID+(L'WKMSGID-1)\nPRT0060  DS    0H\n         CLI   0(R1),C' '            BLANK?\n         BNE   PRT0070               NO\n         BCT   R1,PRT0060            LOOP\nPRT0070  DS    0H\n         CLI   0(R1),C'E'            'ERROR' MESSAGE\n         BNE   PRT0080\n         MVI   WKMSGERR,C'*'         FLAG ERROR MESSAGE\nPRT0080  DS    0H\n         LA    R1,WKDATA             FIRST PRINT AREA BYTE\n         LA    R2,PRTDATA            PRINT OUTPUT AREA BYTE\n         LA    R3,L'PRTDATA          MAXIMUM LOOPS\nPRT0090  DS    0H\n         CLC   COMMBLKS(2),0(R2)     2 BLANKS IN A ROW?\n         BE    PRT0100               YES\n         MVC   0(1,R1),0(R2)         COPY TO OUTPUT AREA\n         LA    R1,1(R1)              NEXT OUTPUT BYTE\nPRT0100  DS    0H\n         LA    R2,1(R2)              NEXT INPUT BYTE\n         BCT   R3,PRT0090            LOOPS\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         PUT   WKDCB,WKCC            PRINT\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         AP    WKLINE,P1             ADD 1 TO LINE COUNT\n         CLI   WKCC,C' '             SINGLE SPACE\n         BE    PRT0110               YES\n         AP    WKLINE,P1             ADD 1 TO LINE COUNT\n         CLI   WKCC,C'0'             DOUBLE SPACE?\n         BE    PRT0110               YES\n         AP    WKLINE,P1             ADD 1 TO LINE COUNT\nPRT0110  DS    0H\n         MVI   WKCC,C' '             INITIALIZE CARRIAGE CONTROL\n         MVC   WKDATE(PRTLRECL-1),WKCC\n         CP    WKLINE,COMMMAXL       TIME FOR HEADING?\n         BNH   PRT0200               NOT YET\nPRT0120  DS    0H\n         AP    WKPAGE,P1             ADD 1 TO PAGE COUNT\n         MVC   WKDATA(HEADINGL),HEADING\n         MVC   WKDATA+(HEADPAGE-HEADING)(L'HEADPAGE),PAGEEDWD\n         ED    WKDATA+(HEADPAGE-HEADING)(L'HEADPAGE),WKPAGE\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         PUT   WKDCB,WKCC            PRINT\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         ZAP   WKLINE,P1             RESET LINE COUNT\n         MVI   WKCC,C' '             INITIALIZE CARRIAGE CONTROL\n         MVC   WKDATE(PRTLRECL-1),WKCC\nPRT0200  DS    0H\n         LR    R1,R10                COPY PRTBLOK ADDRESS\n         L     R10,PRTNEXT           NEXT BLOCK'S ADDRESS\n         FREEMAIN RU,A=(1),LV=PRTBLOKL\n         LTR   R10,R10               ANY MORE PRINT BLOCKS?\n         BNZ   PRT0050               YES\nPRT0210  DS    0H\n         TM    COMMEOJ,$EOJ8         SHUTDOWN PHASE 3?\n         BO    EXIT0000              YES.. IT'S MILLER TIME\n         B     PRT0010               NO, WAIT\n* ------------------------------------------------------------------- *\n*        ADDRESSING MODE SWITCHING                                    *\n* ------------------------------------------------------------------- *\nAM24     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         BSM   R0,R15                RETURN IN 24-BIT MODE\nAM31     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         O     R15,X80               SET HIGH BIT ON\n         BSM   R0,R15                RETURN IN 31-BIT MODE\n* ------------------------------------------------------------------- *\n*        EXIT                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         CLOSE WKDCB,MF=(E,WKOCPL)   CLOSE DCB\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         LR    R1,R13                COPY WORK AREA ADDRESS\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         FREEMAIN R,A=(1),LV=WORKL   FREE WORK AREA\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\nPRTMVC   MVC   WKDATE(0),PRTDATA     COPY PRINT DATA\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nX80      DC    A(X'80000000')\nDATEEDWD DC    X'4021204B202020'\nTIMEEDWD DC    X'4021204B20204B2020'\nPAGEEDWD DC    X'402020202120'\nP0       DC    P'0'\nP1       DC    P'1'\nHEADING  DS    0C\n         DC    50C' '\n         DC    C'SUTL LOG'\n         DC    50C' '\n         DC    C'PAGE '\nHEADPAGE DC    CL6' '\nHEADINGL EQU   *-HEADING\nDCBI     DCB   DSORG=PS,                                               +\n               DDNAME=SUTLPRT,                                         +\n               RECFM=FBA,                                              +\n               LRECL=PRTLRECL,                                         +\n               MACRF=PM\nDCBL     EQU   *-DCBI\nOCPLI    OPEN  (*,OUTPUT),MF=L\nOCPLL    EQU   *-OCPLI\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWORKAREA DSECT\n         SUTLSAVE DSECT=NO\nWKTIMDAY DS    2F                    TIME/DATE\nWKLINE   DS    PL3\nWKPAGE   DS    PL3\nWKCC     DS    C                     CARRIAGE CONTROL\nWKDATE   DS    CL7                   DATE\n         DS    C\nWKTIME   DS    CL9                   TIME\n         DS    C\nWKMSGID  DS    CL11                  MESSAGE ID\n         DS    C\nWKMSGERR DS    C                     ERROR MESSAGE FLAG\n         DS    C\nWKDATA   DS    CL120                 PRINT DATA\nPRTLRECL EQU   *-WKCC\nWKDCB    DS    0A,(DCBL)X            RESERVE SPACE FOR DCB\nWKOCPL   DS    (OCPLL)X\nWORKL    EQU   *-WORKAREA\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              PRINT REQUEST BLOCK                                    *\n* ------------------------------------------------------------------- *\n         PRTBLOK\n* ------------------------------------------------------------------- *\n*              PSA                                                    *\n* ------------------------------------------------------------------- *\n         IHAPSA DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  STCPRTS\n./ ADD NAME=STCSID\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: STCSID - Display IPL info                             *\n*                                                                     *\n*  Function:                                                          *\n*   Return systems SMF ID                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCSID   CSECT\nSTCSID   AMODE 31\nSTCSID   RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               SET BASE REGISTER\n         USING STCSID,R12            DEFINE BASE\n         USING STCCOMM,R11           DEFINE COMMON AREA BASE\n         USING USERBLOK,R10          DEFINE USER BLOCK BASE\n         B     SID0000\nMODID    DC    CL8'STCSID'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nSID0000  DS    0H\n         L     R2,USERDXDA           WORK AREA BASE ADDRESS\n         A     R2,DXDSTART           PLUS DISPLACEMENT TO OUR PORTION\n         ST    R13,4(R2)             CHAIN CALLER'S SAVE AREA\n         ST    R2,8(R13)             CHAIN OUR SAVE AREA\n         LR    R13,R2                COPY WORK AREA ADDRESS\n         USING DXDSID,R13            DEFINE WORK AREA BASE\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    SID0010               YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\nSID0010  DS    0H\n         L     R9,USERIO             I/O AREA ADDRESS\n         USING VTAMIO,R9             DEFINE BASE\n         L     R1,CVTPTR             CVT ADDRESS\n         USING CVTMAP,R1             DEFINE CVT ADDRESSABILITY\n         L     R2,CVTSMCA            SMF COMMUNICATION AREA ADDRESS\n         USING SMCABASE,R2           DEFINE BASE\n         MVC   VTAMSID,SMCASID       COPY SMF ID\n         LA    R1,(VTAMSID-VTAMIO)+L'VTAMSID\n         STCM  R1,3,VTAMLEN          SET LENGTH\n         XC    VTAMRC,VTAMRC         SET RETURN CODE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDSID)             DISPLACEMENT TO WORK AREA\n         LTORG\n* ------------------------------------------------------------------- *\n*        WORK AREAS                                                   *\n* ------------------------------------------------------------------- *\nDXDSID   DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         STCCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              USER BLOCK                                             *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*              I/O AREA                                               *\n* ------------------------------------------------------------------- *\n         VTAMIO DSECT=YES\n         ORG   VTAMDATA\nVTAMSID  DS    CL4\n*---------------------------------------------------------------------*\n*              PSA                                                    *\n*---------------------------------------------------------------------*\n         IHAPSA DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*              MVS CVT                                                *\n*---------------------------------------------------------------------*\n         CVT    DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*              SMF COMMUNICATION AREA                                 *\n*---------------------------------------------------------------------*\n         IEESMCA\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  STCSID\n./ ADD NAME=STCSUB\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCSUB                                                *\n*                                                                     *\n*  Function:                                                          *\n*   Collect the data for the SUBsystem display.                       *\n*   The number of subsystems that may be returned is limited by the   *\n*   I/O area size (VTAM limits the length to 32767).  If the number   *\n*   of subsystems exceeds the I/O area size, the return code with be  *\n*   set to 4 to inform the user that the data has been truncated.     *\n*                                                                     *\n*   Data returned is: number of subsystems and the subsystem entry    *\n*       for each subsystem.                                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCSUB   CSECT\nSTCSUB   AMODE 31\nSTCSUB   RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               SET BASE REGISTER\n         USING STCSUB,R12            DEFINE BASE\n         USING STCCOMM,R11           DEFINE COMMON AREA BASE\n         USING USERBLOK,R10          DEFINE USER BLOCK BASE\n         B     SUB0000\nMODID    DC    CL8'STCSUB'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nSUB0000  DS    0H\n         L     R2,USERDXDA           WORK AREA BASE ADDRESS\n         A     R2,DXDSTART           PLUS DISPLACEMENT TO OUR PORTION\n         ST    R13,4(R2)             CHAIN CALLER'S SAVE AREA\n         ST    R2,8(R13)             CHAIN OUR SAVE AREA\n         LR    R13,R2                COPY WORK AREA ADDRESS\n         USING DXDSUB,R13            DEFINE WORK AREA BASE\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    SUB0010               YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\nSUB0010  DS    0H\n         L     R9,USERIO             I/O AREA ADDRESS\n         USING VTAMIO,R9             DEFINE BASE\n         XC    VTAMRC,VTAMRC         INITIALIZE RETURN CODE\n         L     R1,CVTPTR             CVT ADDRESS\n         USING CVTMAP,R1             DEFINE CVT ADDRESSABILITY\n         L     R2,CVTJESCT           JES SSCT ADDRESS\n         USING JESCT,R2              DEFINE BASE\n         LA    R8,SUBDATA            WORK AREA ADDRESS\n         LA    R7,SUBDATA-VTAMIO     INITIALIZE OUTPUT LENGTH\n         SR    R6,R6                 INITIALIZE NUMBER OF SUBSYSTEMS\n         ICM   R5,15,JESSSCT         FIRST SUBSYSTEM ENTRY\n         BZ    SUB0040               NO SUBSYSTEMS\n         USING SSCT,R5               DEFINE BASE\nSUB0020  DS    0H\n         MVC   0(SSCTSIZE,R8),SSCT   COPY SSCT ENTRY\n         LA    R8,SSCTSIZE(R8)       UPDATE OUTPUT ADDRESS\n         LA    R7,SSCTSIZE(R7)       UPDATE OUTPUT LENGTH\n         LA    R6,1(R6)              ONE MORE TO NUMBER OF SUBSYSTEMS\n         CH    R6,MAX#               AT MAXIMUM?\n         BE    SUB0030               YES\n         ICM   R5,15,SSCTSCTA        NEXT SUBSYSTEM ENTRY\n         BNZ   SUB0020               LOOP\n         B     SUB0040\nSUB0030  DS    0H\n         ICM   R5,15,SSCTSCTA        MORE SUBSYSTEMS?\n         BZ    SUB0040               NO\n         MVC   VTAMRC,X0004          SET RETURN CODE TO 4\nSUB0040  DS    0H\n         STCM  R6,3,SUB#             SET NUMBER OF SUBSYSTEMS\n         STCM  R7,3,VTAMLEN          SET OUTPUT LENGTH\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDSUB)             DISPLACEMENT TO WORK AREA\nMAX#     DC    Y((COMMIOSZ-(SUBDATA-VTAMIO))/SSCTSIZE)\nX0004    DC    X'0004'\n         LTORG\n* ------------------------------------------------------------------- *\n*        WORK AREAS                                                   *\n* ------------------------------------------------------------------- *\nDXDSUB   DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         STCCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VTAMIO DSECT=YES\n         ORG    VTAMDATA\nSUB#     DS     H\nSUBDATA  DS     0C\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEFJESCT\n         IEFJSCVT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*              MVS CVT                                                *\n*---------------------------------------------------------------------*\n         CVT   DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  STCSUB\n./ ADD NAME=STCUCB\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCUCB                                                *\n*                                                                     *\n*  Function:                                                          *\n*   Collect information for the unit control block (UCB) display.     *\n*   The user may select devices by device class (tape or dasd), or    *\n*   by device number.  The UCBSCAN service is used to locate the UCB's*\n*   so dynamically added devices are supported.                       *\n*                                                                     *\n*   Data returned is: number of UCB's that met the search criteria,   *\n*         and a copy of each UCB (48 bytes per UCB).                  *\n*                                                                     *\n*   The number of UCB's that can be returned is limited by the I/O    *\n*   area size (VTAM limits the length to 32767).  If the number of    *\n*   regions that matches the search criteria exceeds the I/O area     *\n*   size, the return code in the I/O area will be set to 4 to inform  *\n*   the TSO user that the data was truncated.                         *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCUCB   CSECT\nSTCUCB   AMODE 31\nSTCUCB   RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               SET BASE REGISTER\n         USING STCUCB,R12            DEFINE PROGRAM BASE\n         USING STCCOMM,R11           DEFINE COMM AREA BASE\n         USING USERBLOK,R10          DEFINE USER BLOCK BASE\n         B     UCB0000\nMODID    DC    CL8'STCUCB'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nUCB0000  DS    0H\n         L     R2,USERDXDA           WORK AREA BASE ADDRESS\n         A     R2,DXDSTART           PLUS DISPLACEMENT TO OUR PORTION\n         ST    R13,4(R2)             CHAIN CALLER'S SAVE AREA\n         ST    R2,8(R13)             CHAIN OUR SAVE AREA\n         LR    R13,R2                COPY WORK AREA BASE\n         USING DXDUCB,R13            DEFINE WORK AREA BASE\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    UCB0010               YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n* ------------------------------------------------------------------- *\n*              BUILD DATA                                             *\n* ------------------------------------------------------------------- *\nUCB0010  DS    0H\n         L     R9,USERIO             I/O AREA ADDRESS\n         USING VTAMIO,R9             DEFINE BASE\n         XC    VTAMRC,VTAMRC         SET RC TO ZERO\n         XC    DXDUCBWK,DXDUCBWK     INITIALIZE UCBSCAN WORK AREA\n         MVC   DXDSCAN(SCANL),SCANI  INITIALIZE UCBSCAN LIST FORM\n         LA    R8,UCBDATA            RETURNED UCB DATA AREA ADDRESS\n         USING UCBDATA,R8            DEFINE A NEW BASE\n         SR    R7,R7                 CLEAR NUMBER OF UCB'S RETURNED\n         LA    R6,UCBDATA-VTAMIO     INITIALIZE OUTPUT LENGTH\n         PACK  DXDSCANN(3),UCBDEVN(5)\n         LA    R5,DXDSCANN           DEVICE NUMBER (PACKED FORM)\n         LA    R4,DXDUCBWK           UCB WORK AREA ADDRESS\n         LA    R3,DXDPTR             UCB ADDRESS AREA\nUCB0020  DS    0H\n         MODESET MODE=SUP\n         CLI   UCBCLASS,$UCBALL      ALL CLASSES (SELECT BY DEVICE NBR)\n         BE    UCB0030               YES\n         CLI   UCBCLASS,$UCBDASD     DASD DEVICES?\n         BE    UCB0040               YES\n         CLI   UCBCLASS,$UCBTAPE     TAPE DEVICES?\n         BE    UCB0050               YES\n         ITRACE ID=BADCLASS\n         ABEND $U0013,DUMP,,USER\nUCB0030  DS    0H\n         ITRACE ID=ALLSCAN\n         UCBSCAN ADDRESS,            FIND DEVICE                       +\n               UCBPTR=(R3),          .. AREA TO UCB'S ADDRESS          +\n               NOPIN,                .. DO NOT 'PIN' THE UCB           +\n               WORKAREA=(R4),        .. UCBSCAN WORK AREA              +\n               DEVN=(R5),            .. DEVICE NUMBER                  +\n               RANGE=ALL,            .. INCLUDE 4 DIGIT DEVICES        +\n               DEVCLASS=ALL,         .. ANY DEVICE CLASS               +\n               MF=(E,DXDSCAN,COMPLETE)\n         B     UCB0060\nUCB0040  DS    0H\n         ITRACE ID=DASDSCAN\n         UCBSCAN ADDRESS,            FIND NEXT DASD DEVICE             +\n               UCBPTR=(R3),          .. AREA TO UCB'S ADDRESS          +\n               NOPIN,                .. DO NOT 'PIN' THE UCB           +\n               WORKAREA=(R4),        .. UCBSCAN WORK AREA              +\n               RANGE=ALL,            .. INCLUDE 4 DIGIT DEVICES        +\n               DEVCLASS=DASD,        .. ONLY DASD DEVICES              +\n               MF=(E,DXDSCAN,COMPLETE)\n         B     UCB0060\nUCB0050  DS    0H\n         ITRACE ID=TAPESCAN\n         UCBSCAN ADDRESS,            FIND NEXT TAPE DEVICE             +\n               UCBPTR=(R3),          .. AREA TO UCB'S ADDRESS          +\n               NOPIN,                .. DO NOT 'PIN' THE UCB           +\n               WORKAREA=(R4),        .. UCBSCAN WORK AREA              +\n               RANGE=ALL,            .. INCLUDE 4 DIGIT DEVICES        +\n               DEVCLASS=TAPE,        .. ONLY TAPE DEVICES              +\n               MF=(E,DXDSCAN,COMPLETE)\nUCB0060  DS    0H\n         LR    R2,R15                SAVE RETURN CODE\n         MODESET MODE=PROB\n         ITRACE ID=UCBRC,RDATA1=R2\n         LTR   R15,R2                SUCCESSFUL?\n         BNZ   UCB0080               MAYBE NOT\n         L     R15,DXDPTR            RETURNED UCB ADDRESS\n         USING UCBOB,R15             DEFINE BASE\n         LR    R14,R15               COPY UCB ADDRESS\n         SH    R14,=Y(UCBOB-UCB)     MINUS PREFIX LENGTH\n         USING UCB,R14               DEFINE PREFIX LENGTH\n         CLI   UCBCLASS,$UCBALL      ALL DEVICES?\n         BNE   UCB0070               NO.. THEN CLASS DOES MATCH\n         LH    R1,UCBDEVNL           DEVICE NUMBER LENGTH\n         BCTR  R1,0                  MINUS 1\n         UNPK  DXDDEVN(5),UCBCHAN(3) UNPACK DEVICE NUMBER\n         MVZ   DXDDEVN,HEXZERO       CLEAR ZONES\n         EX    R1,DEVNCLC            DEVICE NUMBER OK?\n         BNE   UCB0020               NO\nUCB0070  DS    0H\n         MVC   UCBSNBR,UCBCHAN       COPY DEVICE NUMBER\n         MVC   UCBSTYPE,UCBTBYT3     COPY DEVICE TYPE CODE\n         MVC   UCBSSTAT,UCBSTAT      COPY UCB STATUS\n         MVC   UCBSVOL,UCBVOLI       COPY VOLSER\n         MVC   UCBSCHP,UCBCHPS       COPY CHPID IDS\n         MVC   UCBSCHPD,UCBPIM       COPY 'INSTALLED' OR 'DEFINED' MASK\n         MVC   UCBSCHPO,UCBLPM       COPY 'ONLINE' CHPID'S MASK\n         MVC   UCBSCHPL,UCBLPUM      COPY LAST USED CHPID\n         LA    R8,UCBSL(R8)          NEXT DEVICE IN I/O AREA\n         LA    R7,1(R7)              PLUS 1 DEVICE\n         LA    R6,UCBSL(R6)          UPDATE OUTPUT LENGTH\n         CH    R7,MAX#               I/O AREA FULL?\n         BE    UCB0090               YES\n         B     UCB0020               OBTAIN NEXT UCB\nUCB0080  DS    0H\n         CH    R15,H4                LAST 'MATCHING' UCB RETURNED?\n         BE    UCB0100               YES\n         ITRACE ID=UCBERROR,                                           +\n               RDATA1=R15\n         ABEND $U0014,DUMP,,USER\nUCB0090  DS    0H\n         ITRACE ID=OVERFLOW\n         MVC   VTAMRC,H4             SET RETURN CODE\nUCB0100  DS    0H\n         ITRACE ID=DATABILT\n         STCM  R7,3,UCB#             SET NUMBER OF UCB'S RETURNED\n         STCM  R6,3,VTAMLEN          SET LENGTH RETURNED\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS   0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\nDEVNCLC  CLC   DXDDEVN(0),UCBDEVN    DEVICE NUMBER MATCH?\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDUCB)             DISPLACEMENT TO WORK AREA\n         UCBSCAN MF=(L,SCANI)\nSCANL    EQU   *-SCANI\nMAX#     DC    Y((COMMIOSZ-(UCBDATA-VTAMIO))/UCBSL)\nH4       DC    H'4'\nHEXZERO  DC    8X'00'\n         LTORG\n* ------------------------------------------------------------------- *\n*        WORK AREAS                                                   *\n* ------------------------------------------------------------------- *\nDXDUCB   DSECT\n         SUTLSAVE DSECT=NO\nDXDPTR   DS    A                  RETURNED UCB ADDRESS\nDXDSCAN  DS    (SCANL)X           UCBSCAN LIST FORM\n         SPACE 1\nDXDDEVN  DS    XL4\n         DS    X                  FILLER NEEDED FOR UNPACKING\n         SPACE 1\nDXDSCANN DS    XL2\n         DS    X                  FILLER NEEDED FOR PACKING\n         SPACE 1\nDXDUCBWK DS    XL100              UCBSCAN WORK AREA\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         STCCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              USER BLOCK                                             *\n* ------------------------------------------------------------------- *\n         USERBLOK\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         VTAMIO DSECT=YES\n         ORG   VTAMDATA\n         COPY  UCBDATA\n*---------------------------------------------------------------------*\n*              UCB                                                    *\n*---------------------------------------------------------------------*\n         IEFUCBOB LIST=NO,PREFIX=YES\n*---------------------------------------------------------------------*\n*              MVS PSA                                                *\n*---------------------------------------------------------------------*\n         IHAPSA DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  STCUCB\n./ ADD NAME=STCUSE\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: STCUSE - Display current SUTL users                   *\n*                                                                     *\n*  Function:                                                          *\n*   Provide a display of the current users.                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCUSE   CSECT\nSTCUSE   AMODE 31\nSTCUSE   RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               SET BASE REGISTER\n         USING STCUSE,R12            DEFINE BASE\n         USING STCCOMM,R11           DEFINE COMMON AREA BASE\n         USING USERBLOK,R10          DEFINE USER BLOCK BASE\n         B     USE0000\nMODID    DC    CL8'STCUSE'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nUSE0000  DS    0H\n         L     R2,USERDXDA           WORK AREA BASE ADDRESS\n         A     R2,DXDSTART           PLUS DISPLACEMENT TO OUR PORTION\n         ST    R13,4(R2)             CHAIN CALLER'S SAVE AREA\n         ST    R2,8(R13)             CHAIN OUR SAVE AREA\n         LR    R13,R2                COPY WORK AREA ADDRESS\n         USING DXDUSE,R13            DEFINE WORK AREA BASE\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    USE0010               YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\nUSE0010  DS    0H\n         L     R9,USERIO             I/O AREA ADDRESS\n         USING VTAMIO,R9             DEFINE I/O AREA BASE\n         XC    VTAMRC,VTAMRC         SET RETURN CODE TO ZERO\n         LA    R5,USERDATA           FIRST OUTPUT SLOT\n         LA    R6,USERDATA-VTAMIO    INITIALIZE OUTPUT LENGTH\n         SR    R7,R7                 NUMBER OF USERS RETURNED\n         ICM   R8,15,COMMUSER        FIRST USER BLOCK\n         BZ    USE0040               NO USERS\nUSE0020  DS    0H\n         MVC   0(USERL,R5),0(R8)     COPY USER BLOCK TO I/O AREA\n         L     R1,USERIO-USERBLOK(R8)   I/O AREA ADDRESS\n         MVC   USERIO-USERBLOK(1,R5),VTAMFNC-VTAMIO(R1)\n         LA    R5,USERL(R5)          UPDATE OUTPUT ADDRESS\n         LA    R6,USERL(R6)          UPDATE OUTPUT LENGTH\n         LA    R7,1(R7)              UPDATE NUMBER OF USERS IN I/O AREA\n         CH    R7,MAX#               AT MAX?\n         BE    USE0030               YES\n         ICM   R8,15,USERNEXT-USERBLOK(R8)\n         BNZ   USE0020               LOOP\n         B     USE0040\nUSE0030  DS    0H\n         OC    USERNEXT-USERBLOK(4,R8),USERNEXT-USERBLOK(R8)\n         BZ    USE0040\n         MVC   VTAMRC,X0004          SET RETURN CODE TO 4\nUSE0040  DS    0H\n         STCM  R7,3,USER#            SET NUMBER OF USERS RETURNED\n         STCM  R6,3,VTAMLEN          SET OUTPUT LENGTH\n         ITRACE ID=DATABILT,                                           +\n               RDATA1=R6             .. OUTPUT LENGTH\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS   0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDUSE)             DISPLACEMENT TO WORK AREA\nMAX#     DC    A((COMMIOSZ-(USERDATA-VTAMIO))/USERL)\nX0004    DC    X'0004'\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDUSE   DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         STCCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              USER BLOCK                                             *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*              I/O AREA                                               *\n* ------------------------------------------------------------------- *\n         VTAMIO DSECT=YES\n         ORG   VTAMDATA\nUSER#    DS    H                 NUMBER OF USERS RETURNED\nUSERDATA DS    0C\n*---------------------------------------------------------------------*\n*              MVS CVT                                                *\n*---------------------------------------------------------------------*\n         IHAPSA DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*              MVS CVT                                                *\n*---------------------------------------------------------------------*\n         CVT    DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  STCUSE\n./ ADD NAME=STCUSER\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCUSER                                               *\n*                                                                     *\n*  User subtask mainline.                                             *\n*                                                                     *\n*  At entry:                                                          *\n*             R15  Entry point address                                *\n*             R14  Return address                                     *\n*             R13  Register save area address                         *\n*             R12  Calling module's base address                      *\n*             R11  Common area address                                *\n*             R10  USERBLOK address                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCUSER  CSECT\nSTCUSER  AMODE 31\nSTCUSER  RMODE ANY\n         USING STCUSER,R12           DEFINE BASE\n         USING STCCOMM,R11           DEFINE COMMON AREA BASE\n         USING USERBLOK,R10          DEFINE BASE\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               COPY BASE\n         B     USER0000\nMODID    DC    CL8'STCUSER'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nUSER0000 DS    0H\n         L     R10,0(R1)             USERBLOK ADDRESS\n         L     R11,USERCOMM          STCCOMM ADDRESS\n         L     R3,DXDSIZE            WORK AREA SIZE\n         GETMAIN RU,                 ACQUIRE WORK AREA                 +\n               LV=(R3),              .. SIZE                           +\n               LOC=ANY               .. ANY AREA\n         ST    R1,USERDXDA           SAVE WORK AREA BASE ADDRESS\n         LR    R4,R1                 SAVE WORK AREA ADDRESS\n         LR    R2,R1                 COPY WORK AREA ADDRESS\n         SR    R14,R14               CLEAR REGISTER\n         SR    R15,R15               CLEAR REGISTER\n         MVCL  R2,R14                CLEAR THE AREA\n         A     R4,DXDSTART           OFFSET TO OUR PART OF WORK AREA\n         ST    R13,4(R4)             CHAIN WORK AREA\n         ST    R4,8(R13)             CHAIN WORK AREA\n         LR    R13,R4                COPY WORK AREA ADDRESS\n         USING DXDUSER,R13           DEFINE BASE\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL           +\n               LV=RPLL,              .. SIZE                           +\n               LOC=BELOW             .. 24-BIT AREA\n         ST    R1,USERRPL            SAVE RPL'S ADDRESS\n         LR    R2,R1                 SAVE RPL ADDRESS\n         USING IFGRPL,R2\n         MVC   0(RPLL,R1),RPLI       INITIALIZE RPL\n         MVC   RPLDACB,COMMACB       SET ACB ADDRESS IN RPL\n         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL EXTENSION +\n               LV=RPLEXTL,           .. SIZE                           +\n               LOC=BELOW             .. 24-BIT AREA\n         ST    R1,USERRPLX           SAVE RPL EXTENSION'S ADDRESS\n         MVC   0(RPLEXTL,R1),RPLEXTI INITIALIZE RPL EXTENSION\n         ST    R1,RPLAAREA           SET EXTENSION ADDRESS IN RPL\n         L     R0,=A(COMMIOSZ)       I/O AREA SIZE\n         GETMAIN RU,                 ACQUIRE I/O AREA                  +\n               LV=(0),               .. SIZE                           +\n               LOC=BELOW             .. 24-BIT AREA\n         ST    R1,USERIO             SAVE I/O AREA ADDRESS\n         XC    USERTERM,USERTERM     CLEAR TERMINATION ECB\n         XC    USERECB,USERECB       CLEAR VTAM ECB\n         XC    USERRCVC,USERRCVC     CLEAR NUMBER OF RECEIVES\n         XC    USERRCVL,USERRCVL     CLEAR NUMBER OF BYTES RECEIVED\n         XC    USERSNDC,USERSNDC     CLEAR NUMBER OF SENDS\n         XC    USERSNDL,USERSNDL     CLEAR NUMBER OF BYTES SENT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Subtask initialization complete.. issue first RECEIVE        *\n*                                                                     *\n*---------------------------------------------------------------------*\nUSER0010 DS    0H\n         ITRACE ID=RECEIVE\n         MVI   USERVCMD,$USERRCV     SET COMMAND FOR VTAM MODULE\n         L     R15,AVTAM             VTAM MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO DO THE RECEIVE\n         TM    COMMEOJ,$EOJ1         SHUTDOWN REQUESTED?\n         BO    EXIT0000              YES\n         TM    USERSTAT,$USERDAL     USER SESSION DEALLOCATED?\n         BO    EXIT0000              YES\n         L     R1,USERRPLX           RPL EXTENSION ADDRESS\n         USING ISTRPL6X,R1           DEFINE BASE\n         ITRACE ID=RECVRC,                                             +\n               DATA1=RPL6RC\n         OC    RPL6RC,RPL6RC         RECEIVE SUCCESSFUL?\n         BNZ   ERR0010               NO\n         L     R9,USERIO             I/O AREA ADDRESS\n         USING VTAMIO,R9             DEFINE BASE\n         XC    VTAMRC,VTAMRC         CLEAR RETURN CODE\n         LA    R8,USERCMDS           COMMAND TABLE ADDRESS\n         USING CMDDSECT,R8           DEFINE BASE\n         ITRACE ID=SRCCMDS,                                            +\n               DATA1=VTAMFNC\nUSER0020 DS    0H\n         CLI   CMDFNC,X'FF'          END OF TABLE?\n         BE    USER0040              YES.. INVALID COMMAND\n         CLC   CMDFNC,VTAMFNC        COMMAND LOCATED?\n         BE    USER0030              YES\n         LA    R8,CMDL(R8)           NEXT COMMAND\n         B     USER0020              LOOP\nUSER0030 DS    0H\n         ITRACE ID=CMDFOUND,                                           +\n               RDATA1=R8,                                              +\n               DATA2=CMDMOD\n         ICM   R15,15,CMDMOD         MODULE ADDRESS\n         BALR  R14,R15               ENTER THE MODULE\n         ITRACE ID=MODRTN\n         B     USER0050\nUSER0040 DS    0H\n         ITRACE ID=BADCMD            UNKNOWN COMMAND\n         MVC   VTAMRC,X0008          SET RETURN CODE TO 8\n         MVC   VTAMDATA(MSG01L),MSG01\n         LA    R1,MSG01L             DATA LENGTH\n         LA    R1,VTAMDATA-VTAMIO(R1)\n         STCM  R1,3,VTAMLEN          SET LENGTH\nUSER0050 DS    0H\n         MVI   USERVCMD,$USERSND     SET COMMAND (SEND)\n         L     R15,AVTAM             VTAM MODULE ENTRY POINT\n         BALR  R14,R15               SEND DATA BACK TO USER\n         B     USER0010              ISSUE ANOTHER RECEIVE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=RCVERROR,DATA1=RPL6RC\n         ABEND $U0008,DUMP,,USER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R1,USERRPL            RPL ADDRESS\n         FREEMAIN RU,A=(1),LV=RPLL   FREE RPL STORAGE\n         L     R1,USERRPLX           RPL EXTENSION ADDRESS\n         FREEMAIN RU,A=(1),LV=RPLEXTL\n         L     R0,=A(COMMIOSZ)       I/O AREA SIZE\n         L     R1,USERIO             I/O AREA ADDRESS\n         FREEMAIN RU,A=(1),LV=(0)    FREEMAIN I/O AREA\n         L     R0,DXDSIZE            WORK AREA SIZE\n         L     R1,USERDXDA           WORK AREA BASE ADDRESS\n         L     R13,4(R13)            CALLER'S SAVE AREA ADDRESS\n         FREEMAIN RU,A=(1),LV=(0)    FREE WORK AREA\n         LM    R14,R12,12(R13)       RESTORE CALLER'S REGISTERS\n         SR    R15,R15               ALWAYS A GOOD RETURN CODE\n         BR    R14                   RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSIZE  CXD                         WORK AREA SIZE\nDXDSTART DC    Q(DXDUSER)            DISPLACEMENT TO WORK AREA\nAVTAM    DC    V(STCVTAM)            VTAM MODULE ENTRY POINT\nX0008    DC    X'0008'\nMSG01    DC    CL11'STCUSER01E'\n         DC    C'Invalid command'\nMSG01L   EQU   *-MSG01\nRPLI     RPL   AM=VTAM,                                                +\n               AAREA=RPLEXTI\nRPLL     EQU   *-RPLI\nRPLEXTI  ISTRPL6\nRPLEXTL  EQU   *-RPLEXTI\n         SPACE 1\nUSERCMDS DS    0C\n         DC    AL1($VTAMSID),VL4(STCSID)\n         DC    AL1($VTAMACT),VL4(STCACT)\n         DC    AL1($VTAMAPF),VL4(STCAPF)\n         DC    AL1($VTAMIPL),VL4(STCIPL)\n         DC    AL1($VTAMLLA),VL4(STCLLA)\n         DC    AL1($VTAMSUB),VL4(STCSUB)\n         DC    AL1($VTAMUCB),VL4(STCUCB)\n         DC    AL1($VTAMUSE),VL4(STCUSE)\n         DC    X'FF'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCMDDSECT DSECT\nCMDFNC   DS    X                     FUNCTION CODE\nCMDMOD   DS    AL4                   MODULE ENTRY POINT\nCMDL     EQU   *-CMDDSECT\n* ------------------------------------------------------------------- *\n*              WORK AREA                                              *\n* ------------------------------------------------------------------- *\nDXDUSER  DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*              USER BLOCK                                             *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              RPL AND RPL EXTENSION DSECTS                           *\n* ------------------------------------------------------------------- *\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VTAMIO DSECT=YES\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  STCUSER\n./ ADD NAME=STCVTAM\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCVTAM                                               *\n*                                                                     *\n*  Perform VTAM functions.                                            *\n*                                                                     *\n*  At entry:                                                          *\n*             R15  Entry point address                                *\n*             R14  Return address                                     *\n*             R13  Register save area address                         *\n*             R12  Calling module's base address                      *\n*             R11  Common area address                                *\n*             R10  USERBLOK address                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCVTAM  CSECT\nSTCVTAM  AMODE 31\nSTCVTAM  RMODE ANY\n         USING STCVTAM,R12           DEFINE BASE\n         USING STCCOMM,R11           DEFINE COMMON AREA BASE\n         USING USERBLOK,R10          DEFINE BASE\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               COPY BASE\n         B     VTAM0000\nMODID    DC    CL8'STCVTAM'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nVTAM0000 DS    0H\n         L     R1,USERDXDA           DYNAMIC WORK AREA BASE\n         A     R1,DXDSTART           DISPLACEMENT TO OUR PART\n         ST    R13,4(R1)             CHAIN WORK AREA\n         ST    R1,8(R13)             CHAIN WORK AREA\n         LR    R13,R1                COPY WORK AREA ADDRESS\n         USING DXDVTAM,R13           DEFINE BASE\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    VTAM0010              YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Process the requested function                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nVTAM0010 DS    0H\n         L     R2,USERIO             I/O AREA ADDRESS\n         L     R3,USERRPL            RPL'S ADDRESS\n         LA    R5,USERECB            ECB ADDRESS\n         CLI   USERVCMD,$USERRCV     ISSUE A RECEIVE?\n         BE    RECV0000              YES\n         CLI   USERVCMD,$USERSND     ISSUE A SEND?\n         BE    SEND0000              YES\n         ABEND $U0004,DUMP,,USER     INVALID COMAND\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Issue a RECEIVE                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nRECV0000 DS    0H\n         ITRACE ID=RECEIVE,          ISSUE A RECEIVE                   +\n               DATA1=USERLU,         .. USER'S LU NAME                 +\n               DATA2=USERID          .. USER'S ID\n         L     R4,=A(COMMIOSZ)       MAXIMUM I/O AREA SIZE\n         L     R1,USERRCVC           NUMBER OF RECEIVES\n         LA    R1,1(R1)              PLUS 1\n         ST    R1,USERRCVC           SAVE NEW TOTAL\n         APPCCMD CONTROL=RECEIVE,    ISSUE A RECEIVE                   +\n               QUALIFY=SPEC,         .. FOR SPECIFIC CONVERSATION      +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               FILL=LL,              .. ONLY 1 LOGICAL RECORD          +\n               AREA=(R2),            .. I/O AREA ADDRESS               +\n               AREALEN=(R4),         .. I/O AREA SIZE                  +\n               ECB=(R5),             .. ECB ADDRESS                    +\n               CONMODE=CS,           .. CONTINUE SPECIFIC              +\n               CONVID=USERCID,       .. CONVERSATION ID                +\n               OPTCD=ASY             .. ASYNCHRONOUS\n         WAIT  ECB=(R5)              WAIT FOR VTAM\n         TM    COMMEOJ,$EOJ1         SHUTDOWN UNDERWAY?\n         BO    EXIT0000              YES.. EXIT NOW\n         APPCCMD CONTROL=CHECK,      ISSUE A CHECK                     +\n               RPL=(R3)              .. RPL ADDRESS\n         L     R6,USERRPLX           RPL EXTENSION ADDRESS\n         USING ISTRPL6X,R6           DEFINE BASE\n         TM    RPL6RCV1,RPL6WDAL     DE-ALLOCATE RECEIVED?\n         BO    RECV0010              YES.. SESSION SHUTTING DOWN\n         CLC   RPL6RC,X0048          UNRECOVERABLE ERROR?\n         BE    RECV0020              YES\n         OC    RPL6RC,RPL6RC         SUCCESSFUL?\n         BNZ   EXIT0000              NO\n         L     R1,USERRCVL           LENGTH RECEIVED SO FAR\n         AH    R1,0(R2)              PLUS LENGTH JUST RECEIVED\n         ST    R1,USERRCVL           SAVE NEW TOTAL\n         B     EXIT0000              AND EXIT\nRECV0010 DS    0H\n         ITRACE ID=DEALLOC,          SESSION DEALLOCATED               +\n               DATA1=USERLU,                                           +\n               DATA2=USERID\n         OI    USERSTAT,$USERDAL     USER SESSION DEALLOCATED\n         B     EXIT0000              EXIT\nRECV0020 DS    0H\n         ITRACE ID=X0048,            UNRECOVERABLE ERROR               +\n               DATA1=USERLU,                                           +\n               DATA2=USERID\n         OI    USERSTAT,$USERDAL     SET STATUS TO 'DEALLOCATED'\n         B     EXIT0000              EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Issue a SEND                                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nSEND0000 DS    0H\n         ITRACE ID=SEND,             ISSUE A SEND                      +\n               DATA1=USERLU,         .. USER'S LU NAME                 +\n               DATA2=USERID          .. USER'S ID\n         SR    R4,R4                 CLEAR REGISTER\n         ICM   R4,3,0(R2)            TOTAL DATA LENGTH\n         L     R1,USERSNDC           NUMBER OF SENDS\n         LA    R1,1(R1)              PLUS 1\n         ST    R1,USERSNDC           SAVE NEW TOTAL\n         L     R1,USERSNDL           LENGTH SENT SO FAR\n         AH    R1,0(R2)              PLUS LENGTH JUST SENT\n         ST    R1,USERSNDL           SAVE NEW TOTAL\n         APPCCMD CONTROL=SEND,       ISSUE APPC CMD                    +\n               QUALIFY=DATA,         .. SEND DATA                      +\n               RPL=(R3),             .. RPL ADDRESS                    +\n               AREA=(R2),            .. I/O AREA                       +\n               RECLEN=(R4),          .. LENGTH OF DATA                 +\n               ECB=(R5),             .. ECB ADDRESS                    +\n               CONMODE=CS,           .. CONTINUE SPECIFIC              +\n               CONVID=USERCID,       .. CONVERSATION ID                +\n               OPTCD=ASY             .. ASYNCHRONOUS\n         WAIT  ECB=(R5)              WAIT ON VTAM\n         TM    COMMEOJ,$EOJ1         SHUTDOWN UNDERWAY?\n         BO    EXIT0000              YES.. EXIT NOW\n         APPCCMD CONTROL=CHECK,      ISSUE A CHECK                     +\n               RPL=(R3)              .. RPL ADDRESS\n         B     EXIT0000              EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            CALLER'S SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE CALLER'S REGISTERS\n         SR    R15,R15               ALWAYS A GOOD RETURN CODE\n         BR    R14                   RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDVTAM)            DISPLACEMENT TO WORK AREA\nX0048    DC    X'00480000'           STATUS FOR UNRECOVERABLE ERRORS\n* ------------------------------------------------------------------- *\n*              WORK AREA                                              *\n* ------------------------------------------------------------------- *\nDXDVTAM  DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*              USER BLOCK                                             *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              ACB DSECT                                              *\n* ------------------------------------------------------------------- *\n         IFGACB AM=VTAM\n* ------------------------------------------------------------------- *\n*              RPL AND RPL EXTENSION DSECTS                           *\n* ------------------------------------------------------------------- *\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VTAMIO DSECT=YES\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  STCVTAM\n./ ADD NAME=TSOACB\nTSOACB   CSECT\nTSOACB   AMODE 31\nTSOACB   RMODE ANY\n         DC    CL8'SUTLU1'\n         DC    CL8'SUTLU2'\n         DC    CL8'SUTLU3'\n         DC    CL8'SUTLU4'\n         DC    CL8'SUTLU5'\n         DC    CL8'SUTLU6'\n         DC    CL8'SUTLU7'\n         DC    CL8'SUTLU8'\n         DC    CL8'SUTLU9'\n         DC    X'FF'\n         END   TSOACB\n./ ADD NAME=TSOACT\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TSOACT - DISPLAY ACTIVE REGIONS                       *\n*                                                                     *\n*  Function:                                                          *\n*   Display the active regions                                        *\n*                                                                     *\n*                                                                     *\n*   Sub-commands are:                                                 *\n*     ALL           Display all region types (JOB, STC, and TSO).     *\n*     JOB           Display only batch jobs.                          *\n*     STC           Display only started tasks.                       *\n*     TSU           Display only TSO users.                           *\n*     PREFIX xxxxx  Display only regions whose name begins with the   *\n*                   specified prefix.  The prefix may be 1 to 8       *\n*                   characters.  To reset the prefix enter \"PREFIX\"   *\n*                   followed by blanks.                               *\n*     USER xxxxxxx  Display only regions that are running under the   *\n*                   user id prefix given.  The prefix may be 1 to 8   *\n*                   characters.  To reset the user prefix enter       *\n*                   \"USER\" followed by blanks.                        *\n*                                                                     *\n*     ALL, JOB, STC, and TSU are mutually exclusive.                  *\n*     PREFIX and USER may be used concurrently.                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOACT   CSECT\nTSOACT   AMODE 31\nTSOACT   RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               SET BASE\n         USING TSOACT,R12            DEFINE PROGRAM BASE\n         USING TSOCOMM,R11           DEFINE COMMON AREA BASE\n         B     ACT0000\nMODID    DC    CL8'TSOACT'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nACT0000  DS    0H\n         L     R2,COMMDXDA           WORK AREA BASE\n         A     R2,DXDSTART           PLUS DISPLACEMENT TO OUR PORTION\n         ST    R13,4(R2)             CHAIN CALLER'S SAVE AREA\n         ST    R2,8(R13)             CHAIN OUR SAVE AREA\n         LR    R13,R2                COPY WORK AREA ADDRESS\n         USING DXDACT,R13            DEFINE WORK AREA BASE\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    ACT0010               YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         MVI   DXDRTYPE,$ACTRBCH     DISPLAY BATCH ONLY\nACT0010  DS    0H\n         MVI   VARCMD,$VARDEFA       SET COMMAND (DEFINE ALL)\n         LA    R1,ACTVARS            VARIABLE CONTROL INFO\n         ST    R1,VARTBLE            SET ADDRESS\n         LA    R1,DXDCPU             VARIABLE DATA AREA ADDRESS\n         ST    R1,VARAREA            SET ADDRESS\n         LA    R1,VARREQ             PARM BLOCK ADDRESS\n         L     R15,AVARS             VARIABLE DEFINE/DELETE ENTRY POINT\n         BALR  R14,R15               DEFINE VARIABLES\n         B     ACT0110               PROCESS ANY SUB COMMAND\nACT0020  DS    0H\n         XC    COMMTXO,COMMTXO       INITIALIZE OFFSET\n         XC    COMMTXRL,COMMTXRL     INITIALIZE RELATIVE LINE\nACT0030  DS    0H\n         ITRACE ID=REQDATA           REQUEST DATA FROM STC\n         MVI   COMMVCMD,$VTAMSND     SET COMMAND (SEND)\n         L     R10,COMMIOA           I/O AREA ADDRESS\n         USING VTAMIO,R10            DEFINE BASE\n         MVI   VTAMFNC,$VTAMACT      SET FUNCTION\n         MVC   ACTRTYPE,DXDRTYPE     COPY REGION TYPE\n         MVC   ACTJPFXL,DXDJPFXL     COPY JOB NAME PREFIX LENGTH\n         MVC   ACTJPFX,DXDJPFX       COPY JOB NAME PREFIX\n         MVC   ACTUPFXL,DXDUPFXL     COPY USER NAME PREFIX LENGTH\n         MVC   ACTUPFX,DXDUPFX       COPY USER NAME PREFIX\n         LA    R1,ACTCPU-VTAMIO      LENGTH\n         STCM  R1,3,VTAMLEN          SET LENGTH\n         L     R15,AVTAM             VTAM MODULE ENTRY POINT\n         BALR  R14,R15               SEND REQUEST TO STC\n         MVI   COMMVCMD,$VTAMRCV     SET COMMAND\n         L     R15,AVTAM             VTAM MODULE ENTRY POINT\n         BALR  R14,R15               RECEIVE RESPONSE FROM STC\n         ITRACE ID=BLDDATA\nACT0040  DS    0H\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,ACTCPU           CPU BUSY PERCENTAGE\n         CVD   R1,COMMDWRD           CONVERT TO DECIMAL\n         MVC   DXDCPU,EDWD1          INITIALIZE EDIT WORD\n         ED    DXDCPU,COMMDWRD+6     EDIT CPU PERCENTAGE\n         MVC   DXDCPU(3),DXDCPU+1    SHIFT 1 TO LEFT\n         MVI   DXDCPU+3,C'%'         INSERT THE PERCENT SIGN\n         SR    R6,R6                 CLEAR REGISTER\n         ICM   R6,3,ACT#             ANY REGIONS RETURNED?\n         BZ    ACT0290               NO\n         LA    R7,ACTRGN             FIRST REGION IN DATA\n         USING ACTRGN,R7             DEFINE BASE\n         ST    R6,COMMTXL            SET NUMBER OF LINES\n         ITRACE ID=ACT#,                                               +\n               RDATA1=R6             .. NUMBER OF ADDRESS SPACES\n         SR    R0,R0                 CLEAR REGISTER\n         LR    R1,R6                 COPY NUMBER OF LINES\n         M     R0,LINELEN            TIMES LENGTH PER LINE\n         ST    R1,COMMTXSZ           SAVE TEXT AREA SIZE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR TEXT AREA     +\n               LV=(1),               .. SIZE OF AREA                   +\n               LOC=ANY               .. FROM ANY AREA\n         ITRACE ID=TEXTAREA,         TEXT AREA ACQUIRED                +\n               RDATA1=R1,            .. AREA ADDRESS                   +\n               DATA2=COMMTXSZ        .. AREA SIZE\n         ST    R1,COMMTXA            SAVE TEXT STORAGE ADDRESS\n         LR    R5,R1                 COPY TEXT STORAGE ADDRESS\n         USING DTL,R5                DEFINE BASE\nACT0050  DS    0H\n         MVC   DTL(DTLL),COMMBLKS    CLEAR DETAIL AREA\n         MVC   DTLJOBN,ACTRGNJN      COPY JOB NAME\n         MVC   DTLJOBS,ACTRGNJS      COPY STEP NAME\n         MVC   DTLJOBP,ACTRGNPS      COPY PROC STEP NAME\n         MVC   DTLUSER,ACTRGNUN      COPY USER NAME\n         LA    R1,TYPECODE           REGION TYPES TABLE\nACT0060  DS    0H\n         CLI   0(R1),X'FF'           END OF TABLE?\n         BE    ERR0010               YES..\n         CLC   ACTRGNT,0(R1)         ENTRY FOUND?\n         BE    ACT0070               YES\n         LA    R1,4(R1)              NEXT TYPE\n         B     ACT0060               LOOP\nACT0070  DS    0H\n         MVC   DTLRTYPE,1(R1)        COPY TYPE\n         LA    R1,SWAPCODE           SWAP CODES TABLE\nACT0080  DS    0H\n         CLI   0(R1),X'FF'           END OF TABLE?\n         BE    ERR0020               YES..\n         CLC   ACTRGNSW,0(R1)        ENTRY FOUND?\n         BE    ACT0090               YES\n         LA    R1,5(R1)              NEXT TYPE\n         B     ACT0080               LOOP\nACT0090  DS    0H\n         MVC   DTLSWAP,1(R1)         COPY SWAP\n         MVC   DTLATTR,4(R1)         COPY ATTRIBUTE\n         ICM   R1,15,ACTRGNFC        FRAMES IN USE\n         SLL   R1,2                  TIMES 4 (4K TO A PAGE)\n         CVD   R1,COMMDWRD           CONVERT TO DECIMAL\n         MVC   DTLSTRG,EDWD3         INITIALIZE WITH EDIT WORD\n         ED    DTLSTRG,COMMDWRD+5    EDIT STORAGE SIZE\n         MVI   DTLSTRGU,C'K'         INDICATE STORAGE IN 'K' UNITS\n         L     R1,ACTRGNSU           SERVICE UNITS\n         CVD   R1,COMMDWRD           CONVERT TO DECIMAL\n         MVC   DTLSRVU,EDWD2         INITIALIZE WITH EDIT WORD\n         ED    DTLSRVU,COMMDWRD+4    EDIT SERVICE UNITS\n         L     R1,ACTRGNIO           NUMBER OF NON-SPOOL I/O'S\n         CVD   R1,COMMDWRD           CONVERT TO DECIMAL\n         MVC   DTLIO,EDWD2           INITIALIZE WITH EDIT WORD\n         ED    DTLIO,COMMDWRD+4      EDIT I/O COUNT\n         LM    R0,R1,ACTRGNTT        TCB CPU TIME\n         LM    R14,R15,ACTRGNST      SRB CPU TIME\n         SRDL  R0,12                 CONVERT TO MICRO SECONDS\n         SRDL  R14,12                CONVERT TO MICRO SECONDS\n         D     R0,F10000             CONVERT TO HUNDREDTHS\n         D     R14,F10000            CONVERT TO HUNDREDTHS\n         AR    R1,R15                TCB + SRB TIME\n         MVC   DTLCPU(11),=C'  .  .  .  '\n         SR    R0,R0                 CLEAR REGISTER\n         D     R0,F100               CONVERT TO WHOLE SECONDS\n         CVD   R0,COMMDWRD           CONVERT TO DECIMAL\n         UNPK  DTLCPU+9(2),COMMDWRD  CONVERT THE RESULT\n         OI    DTLCPU+10,X'F0'       MAKE IT PRINTABLE\n         SR    R0,R0                 CLEAR REGISTER\n         D     R0,F60                CONVERT TO MINUTES\n         CVD   R0,COMMDWRD           CONVERT TO DECIMAL\n         UNPK  DTLCPU+6(2),COMMDWRD  CONVERT THE RESULT\n         OI    DTLCPU+7,X'F0'        MAKE IT PRINTABLE\n         SR    R0,R0                 CLEAR REGISTER\n         D     R0,F60                MINUTES AND SECONDS\n         CVD   R0,COMMDWRD           CONVERT TO DECIMAL\n         UNPK  DTLCPU+3(2),COMMDWRD  CONVERT THE RESULT\n         OI    DTLCPU+4,X'F0'        MAKE IT PRINTABLE\n         CVD   R1,COMMDWRD           CONVERT TO DECIMAL\n         UNPK  DTLCPU+0(2),COMMDWRD  CONVERT THE RESULT\n         OI    DTLCPU+1,X'F0'        MAKE IT PRINTABLE\n         LA    R5,DTLL(R5)           NEXT LINE\n         LA    R7,ACTRGNL(R7)        NEXT ADDRESS SPACE\n         BCT   R6,ACT0050            LOOP\nACT0100  DS    0H\n         ITRACE ID=CALLDISP          CALLING DYNAMIC AREA DISPLAY\n         MVC   COMMTXLL,LINELEN      SET LINE LENGTH\n         MVC   COMMPANL,ACTPANL      SET PANEL NAME\n         MVI   DISPFLAG,$NCURSOR     SCROLLING, NO CURSOR DATA\n         L     R15,ADISP             DISPLAY ENTRY POINT\n         BALR  R14,R15               LINK TO DYNAMIC AREA DISPLAY\n         MVC   COMMMSG,COMMBLKS      CLEAR ANY MESSAGE\n         ITRACE ID=DISPRC,           RETURNED FROM DISPLAY             +\n               RDATA1=R15            .. RETURN CODE\n         CH    R15,H8                RC = 8?\n         BE    EXIT0000              YES\n         CLC   ZCMD,COMMBLKS         ANY COMMAND?\n         BE    ACT0260               NO\nACT0110  DS    0H\n         MVC   PARSEIN,ZCMD          COPY COMMAND\n         NI    DXDFLAG,255-$NEWPARM  RESET FLAG\nACT0120  DS    0H\n         BAL   R9,ACT0280            PARSE COMMAND\n         CLC   PARSEOUT,COMMBLKS     ANYTHING LEFT?\n         BE    ACT0250               NO\n         CLC   PFXCMD,PARSEOUT       PREFIX COMMAND?\n         BE    ACT0170               YES\n         CLC   USERCMD,PARSEOUT      USER COMMAND?\n         BE    ACT0190               YES\n         CLC   ALLCMD,PARSEOUT       'ALL' COMMAND?\n         BE    ACT0210               YES\n         CLC   BCHCMD,PARSEOUT       BATCH JOBS COMMAND?\n         BE    ACT0220               YES\n         CLC   STCCMD,PARSEOUT       STC COMMAND?\n         BE    ACT0230               YES\n         CLC   TSUCMD,PARSEOUT       TSU COMMAND?\n         BE    ACT0240               YES\n         L     R1,AMENU              MENU DATA ADDRESS\n         LH    R2,0(R1)              NUMBER OF ENTRIES\n         LA    R1,4(R1)              SKIP COUNTERS\n         USING MENUDSCT,R1           DEFINE BASE\nACT0130  DS    0H\n         CLC   MENUCMD,PARSEOUT      COMMAND FOUND?\n         BNE   ACT0140               NO\n         CLM   R12,15,MENUMOD        DOES THE ENTRY REFERENCE US?\n         BE    ACT0120               YES.. IGNORE IT\n         B     EXIT0010              OTHERWISE EXIT\nACT0140  DS    0H\n         TM    MENUFLAG,$MENUNON     DISPLAYABLE ENTRY?\n         BO    ACT0150               NO\n         LA    R1,MENUL(R1)          NEXT ENTRY\n         B     ACT0160\nACT0150  DS    0H\n         LA    R1,MENUDESC-MENUDSCT(R1)  NEXT ENTRY\nACT0160  DS    0H\n         BCT   R2,ACT0130            CHECK NEXT ENTRY\n         MVC   COMMMSG(MSG04L),MSG04 SET MESSAGE\n         OC    COMMTXA,COMMTXA       TEXT AREA PRESENT?\n         BZ    EXIT0010              NO.. EXIT\n         B     ACT0100               DISPLAY WITH MESSAGE\n* ------------------------------------------------------------------- *\n*        Process PREFIX commands                                      *\n* ------------------------------------------------------------------- *\nACT0170  DS    0H\n         ITRACE ID=PREFIX\n         BAL   R9,ACT0280            PARSE NEXT PARM\n         CLC   PARSELEN,H8           TOO LONG?\n         BH    ACT0180               YES\n         MVC   DXDJPFXL,PARSELEN     SET JOB NAME PREFIX LENGTH\n         MVC   DXDJPFX,PARSEOUT      SET JOB NAME PREFIX\n         OI    DXDFLAG,$NEWPARM      SET FLAG\n         B     ACT0120\nACT0180  DS    0H\n         MVC   COMMMSG(MSG02L),MSG02 PREFIX TOO LONG\n         OC    COMMTXA,COMMTXA       TEXT AREA PRESENT?\n         BZ    EXIT0000              NO.. DISPLAY MSG ON MENU\n         B     ACT0100               RE-SEND WITH MESSAGE\n* ------------------------------------------------------------------- *\n*        Process USER command                                         *\n* ------------------------------------------------------------------- *\nACT0190  DS    0H\n         ITRACE ID=USER\n         BAL   R9,ACT0280            PARSE NEXT PARM\n         CLC   PARSELEN,H8           TOO LONG?\n         BH    ACT0200               YES\n         MVC   DXDUPFXL,PARSELEN     SET JOB NAME PREFIX LENGTH\n         MVC   DXDUPFX,PARSEOUT      SET JOB NAME PREFIX\n         OI    DXDFLAG,$NEWPARM      SET FLAG\n         B     ACT0120\nACT0200  DS    0H\n         OC    COMMTXA,COMMTXA       TEXT AREA PRESENT?\n         BZ    EXIT0000              NO.. DISPLAY MSG ON MENU\n         MVC   COMMMSG(MSG03L),MSG03 PREFIX TOO LONG\n         B     ACT0100               RE-SEND WITH MESSAGE\n* ------------------------------------------------------------------- *\n*        Process ALL command                                          *\n* ------------------------------------------------------------------- *\nACT0210  DS    0H\n         ITRACE ID=ALL\n         MVI   DXDRTYPE,$ACTRALL     SET 'ALL' REGION TYPES\n         OI    DXDFLAG,$NEWPARM      SET FLAG\n         B     ACT0120\n* ------------------------------------------------------------------- *\n*        Process BATCH command                                        *\n* ------------------------------------------------------------------- *\nACT0220  DS    0H\n         ITRACE ID=BATCH\n         MVI   DXDRTYPE,$ACTRBCH     SET BATCH REGION TYPES\n         OI    DXDFLAG,$NEWPARM      SET FLAG\n         B     ACT0120\n* ------------------------------------------------------------------- *\n*        Process STC command                                          *\n* ------------------------------------------------------------------- *\nACT0230  DS    0H\n         ITRACE ID=STC\n         MVI   DXDRTYPE,$ACTRSTC     SET 'STC' REGION TYPES\n         OI    DXDFLAG,$NEWPARM      SET FLAG\n         B     ACT0120\n* ------------------------------------------------------------------- *\n*        Process TSU command                                          *\n* ------------------------------------------------------------------- *\nACT0240  DS    0H\n         ITRACE ID=TSU\n         MVI   DXDRTYPE,$ACTRTSO     SET 'TSO' REGION TYPES\n         OI    DXDFLAG,$NEWPARM      SET FLAG\n         B     ACT0120\n* ------------------------------------------------------------------- *\n*        Clear command/free text storage                              *\n* ------------------------------------------------------------------- *\nACT0250  DS    0H\n         ITRACE ID=CLEARCMD\n         MVC   ZCMD,COMMBLKS         CLEAR COMMAND\nACT0260  DS    0H\n         ICM   R1,15,COMMTXA         TEXT ADDRESS\n         BZ    ACT0270               NO TEXT\n         ITRACE ID=FREETEXT\n         L     R0,COMMTXSZ           TEXT SIZE\n         FREEMAIN RU,A=(1),LV=(0)    FREE TEXT STORAGE\n         XC    COMMTXA,COMMTXA       CLEAR ADDRESS\n         XC    COMMTXSZ,COMMTXSZ     CLEAR SIZE\nACT0270  DS    0H\n         TM    DXDFLAG,$NEWPARM      NEW PARMS?\n         BO    ACT0020               YES.. RESET DISPLAY OFFSET\n         B     ACT0030               DISPLAY WITH SAME OFFSET\n* ------------------------------------------------------------------- *\n*        PARSE PARMS                                                  *\n* ------------------------------------------------------------------- *\nACT0280  DS    0H\n         LA    R1,PARSEREQ           REQUEST BLOCK'S ADDRESS\n         L     R15,APRSE             PARSE ENTRY POINT\n         BALR  R14,R15               CALL PARSER\n         ITRACE ID=PARSEOUT,                                           +\n               DATA1=PARSELEN,       .. OUTPUT LENGTH                  +\n               DATA2=PARSEOUT        .. OUTPUT DATA\n         BR    R9                    RETURN\n* ------------------------------------------------------------------- *\n*        No data met the criteria                                     *\n* ------------------------------------------------------------------- *\nACT0290  DS    0H\n         ITRACE ID=NORGNS\n         MVC   COMMTXL,F1            SET LINES TO 1\n         LA    R0,DTLL               TEXT SIZE\n         ST    R0,COMMTXSZ           SET SIZE\n         GETMAIN RU,                 ACQUIRE TEXT DATA AREA            +\n               LV=(0),               .. SIZE OF AREA                   +\n               LOC=ANY               .. FROM ANY AREA\n         ST    R1,COMMTXA            SET STORAGE ADDRESS\n         LR    R5,R1                 SET 'DTL' BASE\n         MVC   0(DTLL,R1),COMMBLKS   CLEAR DETAIL\n         MVI   DTLATTR,$ATTRHI       HIGHLIGHTED MESSAGE\n         MVC   DTLJOBN(MSG01L),MSG01 SET MESSAGE\n         OC    COMMTXA,COMMTXA       TEXT AREA PRESENT?\n         BZ    EXIT0000              NO.. DISPLAY MSG ON MENU\n         B     ACT0100\n* ------------------------------------------------------------------- *\n*        Error routines                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         USING ACTRGN,R7             DEFINE BASE\n         ITRACE ID=INVRTYP,          REGION TYPE NOT IN TABLE          +\n               DATA1=ACTRGNT         .. REGION TYPE\n         ABEND $U1013,DUMP,,USER\nERR0020  DS    0H\n         ITRACE ID=INVSWAP,          SWAP CODE NOT IN TABLE            +\n               DATA1=ACTRGNSW        .. SWAP CODE\n         ABEND $U1014,DUMP,,USER\nEXIT0000 DS   0H\n         MVC   ZCMD,COMMBLKS         CLEAR COMMAND\nEXIT0010 DS   0H\n         ICM   R1,15,COMMTXA         TEXT ADDRESS\n         BZ    EXIT0020\n         L     R0,COMMTXSZ           TEXT SIZE\n         FREEMAIN RU,A=(1),LV=(0)    FREE TEXT STORAGE\n         XC    COMMTXA,COMMTXA       CLEAR ADDRESS\n         XC    COMMTXSZ,COMMTXSZ     CLEAR SIZE\nEXIT0020 DS   0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDACT)             DISPLACEMENT TO WORK AREA\nF10000   DC    F'10000'\nF100     DC    F'100'\nF60      DC    F'60'\nLINELEN  DC    A(DTLL)\nF1       DC    F'1'\nH8       DC    H'8'\nEDWD1    DC    X'40202120'\nEDWD2    DC    X'4020202020202120'\nEDWD3    DC    X'402020202120'\nACTPANL  DC    CL8'SUTLACT'\nPFXCMD   DC    C'PREFIX '\nUSERCMD  DC    C'USER '\nALLCMD   DC    C'ALL '\nBCHCMD   DC    C'JOB '\nSTCCMD   DC    C'STC '\nTSUCMD   DC    C'TSU '\nMSG01    DS    0C\n         DC    C'No regions meet criteria'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'TSOACT02E'\n         DC    C'Prefix too long, 8 characters max'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'TSOACT03E'\n         DC    C'User name too long, 8 characters max'\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    CL11'TSOACT04E'\n         DC    C'Invalid ACT subcommand'\nMSG04L   EQU   *-MSG04\nTYPECODE DS    0C\n         DC    AL1($ACTRBCH),CL3'JOB'\n         DC    AL1($ACTRSTC),CL3'STC'\n         DC    AL1($ACTRTSO),CL3'TSO'\n         DC    AL1($ACTRMNT),CL3'MNT'\n         DC    X'FF'\nSWAPCODE DS    0C\n         DC    AL1($ACTRGNT),CL3'<->',AL1($ATTRLOW)\n         DC    AL1($ACTRGNI),CL3'IN ',AL1($ATTRHI)\n         DC    AL1($ACTRGNO),CL3'OUT',AL1($ATTRLOW)\n         DC    AL1($ACTRGNL),CL3'LSW',AL1($ATTRLOW)\n         DC    AL1($ACTRGNN),CL3'N/S',AL1($ATTRHI)\n         DC    X'FF'\n         VDEF  BASE=DXDCPU\nACTVARS  DS    0C\n         VDEF  NAME=CPU,             VARIABLE NAME                     +\n               DATA=DXDCPU,          VARIABLE'S DATA ADDRESS           +\n               LENGTH=4,             DATA LENGTH                       +\n               FORM=CHAR             DATA FORMAT\n         VDEF  NAME=JPFX,            VARIABLE NAME                     +\n               DATA=DXDJPFX,         VARIABLE'S DATA ADDRESS           +\n               LENGTH=8,             DATA LENGTH                       +\n               FORM=CHAR             DATA FORMAT\n         VDEF  NAME=UPFX,            VARIABLE NAME                     +\n               DATA=DXDUPFX,         VARIABLE'S DATA ADDRESS           +\n               LENGTH=8,             DATA LENGTH                       +\n               FORM=CHAR             DATA FORMAT\n         DC    X'FF'\n         LTORG\n* ------------------------------------------------------------------- *\n*        WORK AREAS                                                   *\n* ------------------------------------------------------------------- *\nDXDACT   DSECT\n         SUTLSAVE DSECT=NO\n         VARREQ DSECT=NO\n         PARSEREQ DSECT=NO\nDXDJPFXL DS    H                     LENGTH OF ACTIVE PREFIX\nDXDUPFXL DS    H                     LENGTH OF ACTIVE USER\nDXDRTYPE DS    C                     REQION TYPE (A, B, S, OR T)\nDXDCPU   DS    CL4                   CPU UTILIZATION PERCENTAGE\nDXDJPFX  DS    CL8                   JOB NAME PREFIX\nDXDUPFX  DS    CL8                   USER NAME PREFIX\nDXDFLAG  DS    X\n$NEWPARM EQU   X'80'                 .. USER HAS REQUESTED NEW OPTIONS\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         TSOCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VTAMIO DSECT=NO\n         ORG   VTAMDATA\n         COPY  ACTDATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDTL      DSECT\nDTLATTR  DS    X               ATTRIBUTE\nDTLJOBN  DS    CL8             JOB NAME\n         DS    C\nDTLJOBS  DS    CL8             JOB STEP\n         DS    C\nDTLJOBP  DS    CL8             PROC STEP\n         DS    C\nDTLUSER  DS    CL8             USER\n         DS    C\nDTLRTYPE DS    CL3             REGION TYPE\n         DS    C\nDTLSWAP  DS    CL3             SWAP STATUS\nDTLSTRG  DS    CL6             STORAGE OCCUPIED\nDTLSTRGU DS    C               STORAGE UNIT (K)\n         DS    C\nDTLSRVU  DS    CL7             SERVICE UNITS\n         DS    C\nDTLIO    DS    CL7             NUMBER OF I/O'S\n         DS    C\nDTLCPU   DS    CL11            CPU TIME\nDTLL     EQU   *-DTL\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY   MENUDSCT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         COPY ATTR\n         END  TSOACT\n./ ADD NAME=TSOAPF\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TSOAPF                                                *\n*                                                                     *\n*  Function:                                                          *\n*   Provide a display of the APF authorized libraries.                *\n*                                                                     *\n*  Sub-commands:                                                      *\n*   None.                                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOAPF   CSECT\nTSOAPF   AMODE 31\nTSOAPF   RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               SET BASE REGISTER\n         USING TSOAPF,R12            DEFINE BASE\n         USING TSOCOMM,R11           DEFINE COMMON AREA BASE\n         B     APF0000\nMODID    DC    CL8'TSOAPF'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nAPF0000  DS    0H\n         L     R2,COMMDXDA           WORK AREA BASE\n         A     R2,DXDSTART           PLUS DISPLACEMENT TO OUR PORTION\n         ST    R13,4(R2)             CHAIN CALLER'S SAVE AREA\n         ST    R2,8(R13)             CHAIN OUR SAVE AREA\n         LR    R13,R2                COPY WORK AREA ADDRESS\n         USING DXDAPF,R13            DEFINE WORK AREA BASE\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    APF0010               YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\nAPF0010  DS    0H\n         ITRACE ID=REQDATA           REQUEST DATA FROM STC\n         MVI   COMMVCMD,$VTAMSND     SET COMMAND (SEND)\n         L     R10,COMMIOA           I/O AREA ADDRESS\n         USING VTAMIO,R10            DEFINE BASE\n         MVI   VTAMFNC,$VTAMAPF      SET FUNCTION\n         LA    R1,APFDATA-VTAMIO     LENGTH\n         STCM  R1,3,VTAMLEN          SET LENGTH\n         L     R15,AVTAM             VTAM MODULE ENTRY POINT\n         BALR  R14,R15               SEND REQUEST TO STC\n         MVI   COMMVCMD,$VTAMRCV     SET COMMAND\n         L     R15,AVTAM             VTAM MODULE ENTRY POINT\n         BALR  R14,R15               RECEIVE RESPONSE FROM STC\n         MVC   ZCMD,COMMBLKS         CLEAR THE COMMAND\n         CLC   VTAMRC,X0004          I/O AREA OVERFLOW?\n         BNE   APF0020               NO\n         MVC   COMMMSG(MSG01L),MSG01\n* ------------------------------------------------------------------- *\n*              BUILD TEXT AREA FOR DISPLAY                            *\n* ------------------------------------------------------------------- *\nAPF0020  DS    0H\n         ITRACE ID=BLDTEXT\n         SR    R2,R2                 CLEAR REGISTER\n         ICM   R2,3,APF#DSN          ANY NAMES RETURNED?\n         BZ    APF0070               NO\n         ST    R2,COMMTXL            NUMBER OF TEXT LINES\nAPF0030  DS    0H\n         SR    R0,R0                 CLEAR REGISTER\n         LR    R1,R2                 COPY NUMBER OF NAMES\n         M     R0,LINELEN            LENGTH OF TEXT AREA STORAGE\n         ST    R1,COMMTXSZ           SAVE OF TEXT STORAGE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR TEXT AREA     +\n               LV=(1),               .. TEXT AREA SIZE                 +\n               LOC=ANY               .. FROM ANY AREA\n         ITRACE ID=TEXTAREA,                                           +\n               RDATA1=R1\n         ST    R1,COMMTXA            TEXT STORAGE AREA ADDRESS\n         USING DTL,R1                DEFINE BASE\n         LA    R5,APFDSN             FIRST DATASET NAME\n         USING APFDSN,R5             DEFINE BASE\nAPF0040  DS    0H\n         MVI   DTLATTR,$ATTRLOW      SET ATTRIBUTE\n         MVC   DTLDSN,APFDSN         SET DATASET NAME\n         MVC   DTLVOL,APFVOL         SET VOLSER\n         LA    R1,DTLL(R1)           NEXT DETAIL AREA\n         LA    R5,APFDSDL(R5)        NEXT DATASET\n         BCT   R2,APF0040            LOOP\n         MVC   COMMPANL,APFPANL      SET PANEL NAME\n         MVC   COMMTXLL,LINELEN      SET LENGTH OF EACH LINE\n         XC    COMMTXO,COMMTXO       CLEAR OFFSET\n         XC    COMMTXRL,COMMTXRL     CLEAR RELATIVE LINE\nAPF0050  DS    0H\n         ITRACE ID=CALLDISP          CALLING DISP\n         MVI   DISPFLAG,$NCURSOR     SCROLLING, NO CURSOR DATA\n         L     R15,ADISP             DISPLAY MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO SYSDISP\n         ITRACE ID=DISPRC,           RETURNED FROM DISP                +\n               RDATA1=R15            .. RETURN CODE FROM DISP\n         CLC   ZCMD,COMMBLKS         COMMAND ALL BLANK?\n         BNE   APF0060               NO\n         LTR   R15,R15               RETURN CODE FROM DISPLAY ZERO?\n         BZ    APF0050               YES.. REDISPLAY\nAPF0060  DS    0H\n         ITRACE ID=FREETEXT          FREEING TEXT STORAGE\n         L     R1,COMMTXA            TEXT STORAGE ADDRESS\n         L     R0,COMMTXSZ           TEXT STORAGE LENGTH\n         FREEMAIN RU,A=(1),LV=(0)    FREE TEXT STORAGE\n         XC    COMMTXA,COMMTXA       CLEAR TEXT STORAGE ADDRESS\n         XC    COMMTXSZ,COMMTXSZ     CLEAR TEXT STORAGE LENGTH\n         XC    COMMTXL,COMMTXL       CLEAR NUMBER OF LINES\n         B     EXIT0000              AND EXIT\n* ------------------------------------------------------------------- *\n*              NO DATASETS IN APF LIST                                *\n* ------------------------------------------------------------------- *\nAPF0070  DS    0H\n         ITRACE ID=NOAPF             NO DATASETS IN APF LIST\n         MVC   COMMMSG(MSG02L),MSG02 SET MESSAGE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDAPF)             DISPLACEMENT TO WORK AREA\nLINELEN  DC    A(DTLL)               LENGTH OF EACH DETAIL LINE\nX0004    DC    X'0004'\nAPFPANL  DC    CL8'SUTLAPF'          PANEL NAME\nMSG01    DS    0C\n         DC    CL11'TSOAPF01I'\n         DC    C'Data set list truncated'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'TSOAPF02I'\n         DC    C'There are not data sets in the APF list!'\nMSG02L   EQU   *-MSG02\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDAPF   DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*              TEXT AREA DETAIL                                       *\n* ------------------------------------------------------------------- *\nDTL      DSECT\nDTLATTR  DS    X               ATTRIBUTE CHARACTER\nDTLDSN   DS    CL44            DATASET NAME\n         DS    CL2\nDTLVOL   DS    CL6             VOLSER\nDTLL     EQU   *-DTL           LENGTH OF DETAIL LINE\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         TSOCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              VTAM I/O AREA                                          *\n* ------------------------------------------------------------------- *\n         VTAMIO DSECT=YES\n         ORG   VTAMDATA\n         COPY  APFDATA\n*---------------------------------------------------------------------*\n*              PSA                                                    *\n*---------------------------------------------------------------------*\n         IHAPSA DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*              MVS CVT                                                *\n*---------------------------------------------------------------------*\n         CVT    DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         COPY ATTR\n         END  TSOAPF\n./ ADD NAME=TSOCOMM\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Name: TSOCOMM                                                      *\n*                                                                     *\n*  TSO interface common data and trace table manager                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  OPTIONS\n         TSOCOMM TYPE=CSECT\nTSOCOMM  CSECT\n         SUTLSAVE DSECT=YES\n         IHAPSA\n         COPY  REGEQU\n         END   TSOCOMM\n./ ADD NAME=TSODISP\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TSODISP - Dynamic area manager                        *\n*                                                                     *\n*  Function:                                                          *\n*   Manage the dynamic area displays.                                 *\n*                                                                     *\n*  This module expects the caller to provide:                         *\n*                                                                     *\n*    1) The panel name                                                *\n*    2) The number of lines of text to of data                        *\n*    3) The address of the text storage                               *\n*    4) Length of each line of \"detail\" data                          *\n*    5) The relative line number of the first line to be displayed    *\n*    6) The offset to the data for the first line to be displayed     *\n*                                                                     *\n*  The caller may specify that the data be scrollable or non-         *\n*  scrollable.  The caller may specify a cursor position.             *\n*                                                                     *\n*  All fields that control the panel, the text data, and display      *\n*  options are in the common area (TSOCOMM).                          *\n*                                                                     *\n*  If the user allows scrolling, the scroll commands are processed    *\n*  here.                                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSODISP  CSECT\nTSODISP  AMODE 31\nTSODISP  RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               SET BASE REGISTER\n         USING TSODISP,R12           DEFINE PROGRAM BASE\n         USING TSOCOMM,R11           DEFINE COMMON AREA BASE\n         B     DISP0000\nMODID    DC    CL8'TSODISP'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nDISP0000 DS    0H\n         L     R2,COMMDXDA           WORK AREA BASE\n         A     R2,DXDSTART           PLUS DISPLACEMENT TO OUR PORTION\n         ST    R13,4(R2)             CHAIN CALLER'S SAVE AREA\n         ST    R2,8(R13)             CHAIN OUR SAVE AREA\n         LR    R13,R2                COPY WORK AREA ADDRESS\n         USING DXDDISP,R13           DEFINE WORK AREA BASE\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    DISP0010              YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n*---------------------------------------------------------------------*\n*        Acquire storage for dynamic area                             *\n*---------------------------------------------------------------------*\nDISP0010 DS    0H\n         L     R15,APQRY             PQUERY ENTRY POINT\n         BALR  R14,R15               LINK TO PQRY\n         L     R0,VWIDTH             SCREEN WIDTH\n         MH    R0,VDEPTH+2           COMPUTE DYNAMIC AREA STORAGE SIZE\n         ST    R0,COMMVDL            SAVE DYNAMIC STORAGE AREA SIZE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR DYNAMIC AREA  +\n               LV=(0),               .. SIZE OF AREA                   +\n               LOC=ANY               .. FROM ANY AREA\n         ITRACE ID=VDA,                                                +\n               RDATA1=R1\n         ST    R1,COMMVDA            SAVE DYNAMIC AREA ADDRESS\n*---------------------------------------------------------------------*\n*        Define 'VDATA' to SPF                                        *\n*---------------------------------------------------------------------*\n         ITRACE ID=DEFVDATA          DEFINING 'VDATA'                  +\n               DATA1=COMMVDA,        .. STORAGE ADDRESS                +\n               DATA2=COMMVDL         .. STORAGE SIZE\n         LA    R1,VDEFINE            COMMAND'S ADDRESS\n         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST\n         LA    R1,VDATA              VARIABLE NAME ADDRESS\n         ST    R1,DXDSPF2            SET ADDRESS IN PARM LIST\n         MVC   DXDSPF3,COMMVDA       SET ADDRESS IN PARM LIST\n         LA    R1,CHARFORM           DATA FORMAT ADDRESS\n         ST    R1,DXDSPF4            SET ADDRESS IN PARM LIST\n         LA    R1,COMMVDL            ADDRESS OF LENGTH\n         ST    R1,DXDSPF5            SET ADDRESS IN PARM LIST\n         OI    DXDSPF5,X'80'         FLAG END-OF-LIST\n         LA    R1,DXDSPF             SPF PARM LIST ADDRESS\n         L     R15,AISPLINK          SPF ENTRY POINT\n         BALR  R14,R15               DEFINE 'VDATA'\n         LTR   R15,R15               DEFINE SUCCESSFUL?\n         BNZ   ERR0010               NO\n         TM    DISPFLAG,$NSCROLL     SCROLLING?\n         BO    DISP0140              NO.. COPY TEXT INTACT\n         MVC   LVLINE,VDEPTH         ASSUME ALL LINES ARE VISIBLE\n*---------------------------------------------------------------------*\n*        Build dynamic area                                           *\n*---------------------------------------------------------------------*\nDISP0100 DS    0H\n         ITRACE ID=BLDVDATA          BUILDING 'VDATA'\n         L     R0,COMMVDA            DYNAMIC AREA ADDRESS\n         L     R1,COMMVDL            DYNAMIC AREA SIZE\n         SR    R14,R14               CLEAR REGISTER\n         SR    R15,R15               CLEAR REGISTER\n         ICM   R15,8,COMMBLKS        SET PAD CHARACTER\n         MVCL  R0,R14                CLEAR DYNAMIC AREA STORAGE\n         L     R3,COMMTXA            TEXT'S ADDRESS\n         A     R3,COMMTXO            PLUS OFFSET\n         L     R4,COMMTXL            NUMBER OF TEXT LINES\n         S     R4,COMMTXRL           MINUS RELATIVE LINE NUMBER\n         C     R4,LVLINE             MORE THAN ARE DISPLAYABLE?\n         BNH   DISP0110              NO\n         L     R4,LVLINE             OTHERWIZE LIMIT TO DISPLAY SIZE\nDISP0110 DS    0H\n         L     R5,COMMVDA            DYNAMIC AREA ADDRESS\n         L     R6,VWIDTH             SCREEN WIDTH\n         L     R7,COMMTXLL           LENGTH OF EACH LINE\nDISP0120 DS    0H\n         LR    R1,R7                 COPY TEXT'S WIDTH\n         CR    R1,R6                 TEXT WIDER THAN SCREEN?\n         BNH   DISP0130              NO\n         LR    R1,R6                 LIMIT TO SCREEN WIDTH\nDISP0130 DS    0H\n         LR    R2,R6                 COPY WIDTH\n         SR    R2,R1                 MINUS USED WIDTH\n         SRL   R2,1                  DIVIDE BY 2\n         AR    R2,R5                 PLUS CURRENT ADDRESS\n         BCTR  R1,0                  FOR MVC\n         EX    R1,DYNMVC             MOVE DATA TO DYNAMIC AREA\n         AR    R3,R7                 NEXT TEXT DATA LINE\n         A     R5,VWIDTH             NEXT DYNAMIC AREA LINE\n         BCT   R4,DISP0120           LOOP\n         B     DISP0150              DISPLAY THE PANEL\n*---------------------------------------------------------------------*\n*        Copy text intact                                             *\n*---------------------------------------------------------------------*\nDISP0140 DS    0H\n         L     R0,COMMTXA            TEXT ADDRESS\n         L     R1,COMMTXSZ           TEXT SIZE\n         L     R2,COMMVDA            VDATA ADDRESS\n         L     R3,COMMVDL            VDATA LENGTH\n         ICM   R3,8,COMMBLKS         PAD CHARACTER\n         MVCL  R2,R0                 COPY TEXT\n*---------------------------------------------------------------------*\n*        Display panel                                                *\n*---------------------------------------------------------------------*\nDISP0150 DS    0H\n         ITRACE ID=DISPLAY\n         LA    R1,DISPLAY            COMMAND'S ADDRESS\n         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST\n         LA    R1,COMMPANL           PANEL'S NAME\n         ST    R1,DXDSPF2            SET ADDRESS IN PARM LIST\n         OI    DXDSPF2,X'80'         FLAG END-OF-LIST\n         TM    DISPFLAG,$NCURSOR     CURSOR DATA?\n         BO    DISP0160              NO\n         OC    COMMVDC,COMMVDC       CURSOR POSITION ZERO?\n         BZ    DISP0160              YES\n         NI    DXDSPF2,X'7F'         RESET END-OF-LIST\n         LA    R1,COMMBLKS           MESSAGE ID (BLANKS)\n         ST    R1,DXDSPF3            CLEAR MESSAGE ID\n         LA    R1,VDATA              CURSOR FIELD NAME\n         ST    R1,DXDSPF4            SET VARIABLE NAME FOR CURSOR\n         L     R1,COMMVDC            CURSOR POSITION\n         LA    R1,1(R1)              PLUS 1 (POSITION IS NOT RELATIVE)\n         ST    R1,COMMVDC            SAVE UPDATED POSITION\n         LA    R1,COMMVDC            CURSOR POSITION IN 'VDATA'\n         ST    R1,DXDSPF5            SET CURSOR POSITION\n         OI    DXDSPF5,X'80'         FLAG END-OF-LIST\nDISP0160 DS    0H\n         LA    R1,DXDSPF             PARM LIST ADDRESS\n         L     R15,AISPLINK          SPF INTERFACE ENTRY POINT ADDR\n         BALR  R14,R15               LINK TO SPF TO DISPLAY PANEL\n         STH   R15,DXDRC             SAVE RETURN CODE\n         ITRACE ID=DISPRC,           TRACE RETURN FROM SPF             +\n               RDATA1=R15,           .. INCLUDE RETURN CODE            +\n               DATA2=ZCMD            .. AND NEW COMMAND\n         MVC   COMMMSG,COMMBLKS      CLEAR MESSAGE\n         TM    DISPFLAG,$NSCROLL     SCROLLING?\n         BO    DISP0400              NO..\n         CH    R15,H8                EXIT?\n         BE    DISP1000              YES\n         CLI   ZCMD,C'X'             EXIT?\n         BE    DISP1000              YES\n         NI    DXDFLAG,255-$DXDVPUT  RESET VPUT FLAG\n*---------------------------------------------------------------------*\n*        Request scroll parameters                                    *\n*---------------------------------------------------------------------*\nDISP0170 DS    0H\n         ITRACE ID=VGET              REQUESTING SCROLL VARIABLES\n         LA    R1,VGET               COMMAND'S ADDRESS\n         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST\n         LA    R1,VGETVARS           VARIABLES WE'RE INTERESTED IN\n         ST    R1,DXDSPF2            SET ADDRESS IN PARM LIST\n         LA    R1,SHARED             FROM SHARED POOL\n         ST    R1,DXDSPF3            SET ADDRESS IN PARM LIST\n         OI    DXDSPF3,X'80'         SET END-OF-LIST\n         LA    R1,DXDSPF             PARM LIST ADDRESS\n         L     R15,AISPLINK          SPF INTERFACE ENTRY POINT ADDR\n         BALR  R14,R15               LINK TO SPF TO DISPLAY PANEL\n         ITRACE ID=VGETRC,           VGET COMPLETE                     +\n               RDATA1=R15            .. INCLUDE RETURN CODE\n         LTR   R15,R15               VGET SUCCESSFUL?\n         BZ    DISP0180              YES\n         TM    DXDFLAG,$DXDVPUT      VPUT ALREADY ISSUED?\n         BO    DISP0180              YES\n*---------------------------------------------------------------------*\n*        Issue VPUT, try VGET again                                   *\n*---------------------------------------------------------------------*\n         ITRACE ID=VPUT\n         LA    R1,VPUT               COMMAND'S ADDRESS\n         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST\n         LA    R1,VGETVARS           VARIABLES WE'RE INTERESTED IN\n         ST    R1,DXDSPF2            SET ADDRESS IN PARM LIST\n         LA    R1,SHARED             FROM SHARED POOL\n         ST    R1,DXDSPF3            SET ADDRESS IN PARM LIST\n         OI    DXDSPF3,X'80'         SET END-OF-LIST\n         LA    R1,DXDSPF             PARM LIST ADDRESS\n         L     R15,AISPLINK          SPF INTERFACE ENTRY POINT ADDR\n         BALR  R14,R15               LINK TO SPF TO DISPLAY PANEL\n         ITRACE ID=VPUTRC,           VPUT COMPLETE                     +\n               RDATA1=R15            .. INCLUDE RETURN CODE\n         B     DISP0170              YES\n*---------------------------------------------------------------------*\n*        Process command or scroll                                    *\n*---------------------------------------------------------------------*\nDISP0180 DS    0H\n         ITRACE ID=CHKVERB,          CHECKING VERB FOR SCROLL          +\n               DATA1=ZVERB           .. TRACE VERB VALUE\n         L     R2,ZSCROLLN           NUMBER OF LINES TO SCROLL\n         CLI   ZVERB,C'U'            SCROLL UP?\n         BE    DISP0200              YES\n         CLI   ZVERB,C'D'            SCROLL DOWN?\n         BE    DISP0300              YES\n         CLI   ZVERB,C'R'            SCROLL RIGHT?\n         BE    DISP0100              YES\n         CLI   ZVERB,C'L'            SCROLL LEFT?\n         BE    DISP0100              YES\n         B     DISP1000              MUST NOT BE A SCROLL COMMAND\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDISP0200 DS    0H\n         ITRACE ID=SCROLLUP\n         SR    R0,R0                 CLEAR REGISTER\n         L     R1,ZSCROLLN           NUMBER OF LINES TO SCROLL\n         M     R0,COMMTXLL           TIMES LINE LENGTH\n         L     R2,COMMTXO            CLEAR REGISTER\n         CR    R1,R2                 SCROLL PAST FIRST LINE?\n         BNH   DISP0210              NO\n         LR    R2,R1                 LIMIT TO 1ST LINE\nDISP0210 DS    0H\n         SR    R2,R1                 NEW OFFSET\n         L     R1,COMMTXRL           RELATIVE LINE NUMBER\n         S     R1,ZSCROLLN           MINUS NUMBER SCROLLED\n         BP    DISP0220\n         SR    R1,R1                 RESET TO ZERO IF NEGATIVE\nDISP0220 DS    0H\n         ST    R1,COMMTXRL           SAVE RELATIVE LINE NUMBER\n         ST    R2,COMMTXO            SAVE OFFSET INTO TEXT\n         B     DISP0100              RE-BUILD DYNAMIC AREA DATA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDISP0300 DS    0H\n         ITRACE ID=SCROLLDN\n         L     R1,ZSCROLLN           NUMBER OF LINES TO SCROLL\n         A     R1,COMMTXRL           PLUS RELATIVE NUMBER NOW\n         C     R1,COMMTXL            SCROLL BEYOND END OF DATA?\n         BE    DISP0310              YES\n         BNH   DISP0320              NO\nDISP0310 DS    0H\n         SR    R0,R0                 CLEAR REGISTER\n         L     R1,COMMTXL            MAXIMUM LINE NUMBER\n         BCTR  R1,0                  ADJUST FOR RELATIVE\n         ST    R1,COMMTXRL           SAVE RELATIVE NUMBER\n         M     R0,COMMTXLL           TIMES LENGTH OF EACH LINE\n         ST    R1,COMMTXO            SAVE OFFSET\n         B     DISP0100              RE-BUILD DYNAMIC AREA\nDISP0320 DS    0H\n         SR    R0,R0                 CLEAR REGISTER\n         ST    R1,COMMTXRL           SAVE NEW RELATIVE LINE\n         M     R0,COMMTXLL           TIMES LINE LENGTH\n         ST    R1,COMMTXO            SAVE OFFSET\n         B     DISP0100              RE-BUILD DYNAMIC AREA\n*---------------------------------------------------------------------*\n*        Copy updated text area back to caller                        *\n*---------------------------------------------------------------------*\nDISP0400 DS    0H\n         L     R0,COMMTXA            TEXT ADDRESS\n         L     R1,COMMTXSZ           TEXT SIZE\n         L     R2,COMMVDA            VDATA ADDRESS\n         L     R3,COMMVDL            VDATA LENGTH\n         MVCL  R0,R2                 COPY RETURNED AREA\n*---------------------------------------------------------------------*\n*        Clean-up                                                     *\n*---------------------------------------------------------------------*\nDISP1000 DS    0H\n         ITRACE ID=CLEANUP\n         LA    R1,VDELETE            COMMAND'S ADDRESS\n         ST    R1,DXDSPF1            SET IN PARM LIST\n         LA    R1,VDATA              VARIABLE'S NAME\n         ST    R1,DXDSPF2            SET IN PARM LIST\n         OI    DXDSPF2,X'80'         SET END-OF-LIST\n         LA    R1,DXDSPF             PARM LIST'S ADDRESS\n         L     R15,AISPLINK          SPF INTERFACE ENTRY POINT\n         BALR  R14,R15               LINK TO SPF TO DELETE 'VDATA'\n         LTR   R15,R15               VDELETE OK?\n         BZ    DISP1010              YES\n         ABEND $U1019,DUMP,,USER\nDISP1010 DS    0H\n         ITRACE ID=FREEVDA\n         ICM   R1,15,COMMVDA         DYNAMIC AREA ADDRESS\n         BZ    EXIT0000              NO ADDRESS.. EXIT\n         L     R0,COMMVDL            DYNAMIC AREA SIZE\n         FREEMAIN RU,A=(1),LV=(0)    FREEMAIN DYNAMIC AREA\n         XC    COMMVDA,COMMVDA       CLEAR ADDRESS\n         XC    COMMVDL,COMMVDL       CLEAR SIZE\n         B     EXIT0000              AND EXIT\n* ------------------------------------------------------------------- *\n*        ERROR ROUTINES                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=VDEFFAIL,         VDEFINE FAILED                    +\n               RDATA1=R15            .. VDEFINE RETURN CODE\n         ABEND $U1020,DUMP,,USER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         LH    R15,DXDRC             SET RETURN CODE\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         L     R14,12(R13)           RESTORE R14\n         LM    R0,R12,20(R13)        RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\nDYNMVC   MVC   0(0,R2),0(R3)         MOVE TEXT TO DYNAMIC AREA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDDISP)            DISPLACEMENT TO WORK AREA\nVGETVARS DC    F'3'                  NUMBER OF VARIABLE NAMES\n         DC    F'0'                  UNPROTECTED STORAGE\n         DC    CL8'ZVERB'            VARIABLE NAME\n         DC    CL8'ZSCROLLA'         VARIABLE NAME\n         DC    CL8'ZSCROLLN'         VARIABLE NAME\nH8       DC    H'8'                  CONSTANT\nVDATA    DC    CL8'VDATA'            VARIABLE NAME\nVDEFINE  DC    CL8'VDEFINE'\nVDELETE  DC    CL8'VDELETE'\nDISPLAY  DC    CL8'DISPLAY'\nVGET     DC    CL8'VGET'\nVPUT     DC    CL8'VPUT'\nSHARED   DC    CL8'SHARED'\nCHARFORM DC    CL4'CHAR'\n         LTORG\n* ------------------------------------------------------------------- *\n*        WORK AREAS                                                   *\n* ------------------------------------------------------------------- *\nDXDDISP  DSECT\n         SUTLSAVE DSECT=NO\nDXDSPF   DS    0A                    ISPF PARM LIST\nDXDSPF1  DS    A                     PARM 1 ADDRESS\nDXDSPF2  DS    A                     PARM 2 ADDRESS\nDXDSPF3  DS    A                     PARM 3 ADDRESS\nDXDSPF4  DS    A                     PARM 4 ADDRESS\nDXDSPF5  DS    A                     PARM 5 ADDRESS\nDXDRC    DS    H                     RETURN CODE FROM DISPLAY\nDXDFLAG  DS    X                     INTERNAL FLAGS\n$DXDVPUT EQU   X'80'                 .. VPUT HAS BEEN ISSUED\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         TSOCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA  DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  TSODISP\n./ ADD NAME=TSOIPL\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TSOIPL - Display IPL info                             *\n*                                                                     *\n*  Function:                                                          *\n*   Provide a display of IPL info                                     *\n*                                                                     *\n*  Sub-commands                                                       *\n*   None.                                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOIPL   CSECT\nTSOIPL   AMODE 31\nTSOIPL   RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               SET BASE REGISTER\n         USING TSOIPL,R12            DEFINE BASE\n         USING TSOCOMM,R11           DEFINE COMMON AREA BASE\n         B     IPL0000\nMODID    DC    CL8'TSOIPL'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nIPL0000  DS    0H\n         L     R2,COMMDXDA           WORK AREA BASE ADDRESS\n         A     R2,DXDSTART           PLUS DISPLACEMENT TO OUR PORTION\n         ST    R13,4(R2)             CHAIN CALLER'S SAVE AREA\n         ST    R2,8(R13)             CHAIN OUR SAVE AREA\n         LR    R13,R2                COPY WORK AREA ADDRESS\n         USING DXDIPL,R13            DEFINE WORK AREA BASE\n         MVC   ZCMD,COMMBLKS         CLEAR THE COMMAND\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    IPL0010               YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n* ------------------------------------------------------------------- *\n*        REQUEST DATA FROM STC                                        *\n* ------------------------------------------------------------------- *\nIPL0010  DS    0H\n         ITRACE ID=REQDATA           REQUEST DATA FROM STC\n         MVI   COMMVCMD,$VTAMSND     SET COMMAND (SEND)\n         L     R10,COMMIOA           I/O AREA ADDRESS\n         USING VTAMIO,R10            DEFINE BASE\n         MVI   VTAMFNC,$VTAMIPL      SET FUNCTION\n         LA    R1,IPLDATA-VTAMIO     LENGTH\n         STCM  R1,3,VTAMLEN          SET LENGTH\n         L     R15,AVTAM             VTAM MODULE ENTRY POINT\n         BALR  R14,R15               SEND REQUEST TO STC\n         MVI   COMMVCMD,$VTAMRCV     SET COMMAND\n         L     R15,AVTAM             VTAM MODULE ENTRY POINT\n         BALR  R14,R15               RECEIVE RESPONSE FROM STC\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         MVC   COMMTXL,F4            NUMBER OF TEXT LINES\n         LA    R0,DTLL*4             LENGTH OF TEXT DATA\n         ST    R0,COMMTXSZ           SAVE TEXT DATA SIZE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR TEXT AREA     +\n               LV=(0),               .. TEXT AREA SIZE                 +\n               LOC=ANY               .. FROM ANY AREA\n         ST    R1,COMMTXA            TEXT STORAGE AREA ADDRESS\n         LR    R2,R1                 COPY STORAGE ADDRESS\n         USING DTL,R2                DEFINE BASE\n         MVC   DTL(DTLL),COMMBLKS    CLEAR DETAIL DATA AREA\n         MVI   DTLATTR1,$ATTRHI      SET ATTRIBUTE\n         MVI   DTLATTR2,$ATTRLOW     SET ATTRIBUTE\n         MVC   DTLHEAD,DATEHEAD      SET 'HEADING'\n         AP    IPLDATE,P1900000      ADD STARTING CENTURY\n         MVC   DXDWORK(EDWD1L),EDWD1 INITIALIZE EDIT WORD\n         ED    DXDWORK,IPLDATE       EDIT IPL DATE\n         MVC   DTLDATA,DXDWORK+1     SET IPL DATE\n         LA    R2,DTLL(R2)           NEXT DETAIL LINE\n         MVC   DTL(DTLL),COMMBLKS    CLEAR DETAIL DATA AREA\n         MVI   DTLATTR1,$ATTRHI      SET ATTRIBUTE\n         MVI   DTLATTR2,$ATTRLOW     SET ATTRIBUTE\n         XC    DXDDWRD,DXDDWRD       CLEAR DOUBLE WORD\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,1,IPLDATE+1        INSERT YEAR\n         SLL   R1,4                  SHIFT FOR SIGN\n         ST    R1,DXDDWRD+4          SAVE YEAR\n         OI    DXDDWRD+7,X'0F'       FORCE SIGN\n         CVB   R1,DXDDWRD            CONVERT TO BINARY\n         LA    R14,MONTH1            MONTH TABLE 1 ADDRESS\n         SR    R0,R0                 CLEAR REGISTER\n         D     R0,F4                 DIVIDE BY 4\n         LTR   R0,R0                 REMAINDER ZERO?\n         BNZ   IPL0020               NO\n         LA    R14,MONTH2            MONTH TABLE 2 ADDRESS\nIPL0020  DS    0H\n         CP    2(2,R14),IPLDATE+2(2) DAY IN THIS MONTH?\n         BL    IPL0030               YES\n         LA    R14,4(R14)            NEXT MONTH\n         B     IPL0020               LOOP\nIPL0030  DS    0H\n         MVC   DXDWORK+6(2),DXDWORK+3\n         MVC   DXDWORK+0(2),0(R14)   SET MONTH\n         SP    IPLDATE+2(2),2(2,R14) COMPUTE DAY INTO THIS MONTH\n         UNPK  DXDDWRD(5),IPLDATE+2(3)\n         MVC   DXDWORK+3(2),DXDDWRD+1\n         MVI   DXDWORK+2,C'/'        INSERT DELIMITER\n         MVI   DXDWORK+5,C'/'        INSERT DELIMITER\n         MVC   DTLDATA,DXDWORK       COPY EDITED DATE\n         LA    R2,DTLL(R2)           NEXT DETAIL LINE\n         MVC   DTL(DTLL),COMMBLKS    CLEAR DETAIL DATA AREA\n         MVI   DTLATTR1,$ATTRHI      SET ATTRIBUTE\n         MVI   DTLATTR2,$ATTRLOW     SET ATTRIBUTE\n         MVC   DTLHEAD,TIMEHEAD      SET 'HEADING'\n         SR    R0,R0                 CLEAR REGISTER\n         ICM   R1,15,IPLTIME         LOAD IPL TIME\n         D     R0,F360000            DIVIDE BY 100THS PER HOUR\n         CVD   R1,DXDDWRD            CONVERT TO DECIMAL\n         OI    DXDDWRD+7,X'0F'       FORCE SIGN TO X'F'\n         UNPK  DXDWORK(2),DXDDWRD+6(2)\n         LR    R1,R0                 COPY REMAINDER\n         SR    R0,R0                 CLEAR REGISTER\n         D     R0,F6000              DIVIDE BY 100THS PER MINUTE\n         CVD   R1,DXDDWRD            CONVERT TO DECIMAL\n         OI    DXDDWRD+7,X'0F'       FORCE SIGN TO X'F'\n         UNPK  DXDWORK+3(2),DXDDWRD+6(2)\n         LR    R1,R0                 COPY REMAINDER\n         SR    R0,R0                 CLEAR REGISTER\n         D     R0,F100               DIVIDE BY 100THS PER SECOND\n         CVD   R1,DXDDWRD            CONVERT TO DECIMAL\n         OI    DXDDWRD+7,X'0F'       FORCE SIGN TO X'F'\n         UNPK  DXDWORK+6(2),DXDDWRD+6(2)\n         MVI   DXDWORK+2,C':'        INSERT DELIMITER\n         MVI   DXDWORK+5,C':'        INSERT DELIMITER\n         MVC   DTLDATA,DXDWORK       COPY EDITED TIME\n         LA    R2,DTLL(R2)           NEXT DETAIL LINE\n         MVC   DTL(DTLL),COMMBLKS    CLEAR DETAIL DATA AREA\n         MVI   DTLATTR1,$ATTRHI      SET ATTRIBUTE\n         MVI   DTLATTR2,$ATTRLOW     SET ATTRIBUTE\n         MVC   DTLHEAD,RESHEAD       SET 'HEADING'\n         MVC   DTLDATA(6),IPLRES     SET SYSRES VOLSER\n         MVC   COMMPANL,IPLPANL      SET PANEL NAME\n         MVC   COMMTXLL,LINELEN      SET LENGTH OF EACH LINE\n         XC    COMMTXO,COMMTXO       CLEAR OFFSET\n         XC    COMMTXRL,COMMTXRL     CLEAR RELATIVE LINE\nIPL0040  DS    0H\n         ITRACE ID=CALLDISP          CALLING DISP\n         MVI   DISPFLAG,$NCURSOR     SCROLLING, NO CURSOR DATA\n         L     R15,ADISP             DISPLAY MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO SYSDISP\n         ITRACE ID=DISPRC,           RETURNED FROM DISP                +\n               RDATA1=R15            .. RETURN CODE FROM DISP\n         CLC   ZCMD,COMMBLKS         COMMAND ALL BLANK?\n         BNE   IPL0050               NO\n         LTR   R15,R15               RETURN CODE FROM DISPLAY ZERO?\n         BZ    IPL0040               YES.. REDISPLAY\nIPL0050  DS    0H\n         ITRACE ID=FREETEXT          FREEING TEXT STORAGE\n         L     R1,COMMTXA            TEXT STORAGE ADDRESS\n         L     R0,COMMTXSZ           TEXT STORAGE LENGTH\n         FREEMAIN RU,A=(1),LV=(0)    FREE TEXT STORAGE\n         XC    COMMTXA,COMMTXA       CLEAR TEXT STORAGE ADDRESS\n         XC    COMMTXSZ,COMMTXSZ     CLEAR TEXT STORAGE LENGTH\n         XC    COMMTXL,COMMTXL       CLEAR NUMBER OF LINES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDIPL)             DISPLACEMENT TO WORK AREA\nF360000  DC    F'360000'             100THS OF SECONDS PER HOUR\nF6000    DC    F'6000'               100THS OF SECONDS PER MINUTE\nF100     DC    F'100'                100THS OF SECONDS PER SECOND\nF4       DC    F'4'                  CONSTANT\nLINELEN  DC    A(DTLL)               LENGTH OF EACH DETAIL LINE\nP1900000 DC    P'1900000'            1900 DAY 000\nIPLPANL  DC    CL8'SUTLIPL'          PANEL NAME\nDATEHEAD DC    CL8'IPL DATE'\nTIMEHEAD DC    CL8'IPL TIME'\nRESHEAD  DC    CL8'SYSRES'\nEDWD1    DC    X'F0202020204B202020'\nEDWD1L   EQU   *-EDWD1\nMONTH1   DS    0C\n         DC    CL2'12',PL2'334'\n         DC    CL2'11',PL2'304'\n         DC    CL2'10',PL2'273'\n         DC    CL2'09',PL2'243'\n         DC    CL2'08',PL2'212'\n         DC    CL2'07',PL2'181'\n         DC    CL2'06',PL2'151'\n         DC    CL2'05',PL2'120'\n         DC    CL2'04',PL2'090'\n         DC    CL2'03',PL2'059'\n         DC    CL2'02',PL2'031'\n         DC    CL2'01',PL2'000'\nMONTH2   DS    0C\n         DC    CL2'12',PL2'335'\n         DC    CL2'11',PL2'305'\n         DC    CL2'10',PL2'274'\n         DC    CL2'09',PL2'244'\n         DC    CL2'08',PL2'213'\n         DC    CL2'07',PL2'182'\n         DC    CL2'06',PL2'152'\n         DC    CL2'05',PL2'121'\n         DC    CL2'04',PL2'091'\n         DC    CL2'03',PL2'060'\n         DC    CL2'02',PL2'031'\n         DC    CL2'01',PL2'000'\n         LTORG\n* ------------------------------------------------------------------- *\n*        WORK AREAS                                                   *\n* ------------------------------------------------------------------- *\nDXDIPL   DSECT\n         SUTLSAVE DSECT=NO\nDXDDWRD  DS    D\nDXDWORK  DS    CL9\n* ------------------------------------------------------------------- *\n*              TEXT AREA DETAIL                                       *\n* ------------------------------------------------------------------- *\nDTL      DSECT\nDTLATTR1 DS    C\nDTLHEAD  DS    CL8\nDTLATTR2 DS    C\nDTLDATA  DS    CL8\nDTLL     EQU   *-DTL\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         TSOCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              I/O AREA                                               *\n* ------------------------------------------------------------------- *\n         VTAMIO DSECT=YES\n         ORG   VTAMDATA\n         COPY  IPLDATA\n*---------------------------------------------------------------------*\n*              PSA                                                    *\n*---------------------------------------------------------------------*\n         IHAPSA DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*              MVS CVT                                                *\n*---------------------------------------------------------------------*\n         CVT    DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         COPY ATTR\n         END  TSOIPL\n./ ADD NAME=TSOLLA\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TSOLLA - Display system link link (LLA)               *\n*                                                                     *\n*  Function:                                                          *\n*   Provide a display of the system link list (LLA).                  *\n*                                                                     *\n*  Sub-commands:                                                      *\n*   None.                                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOLLA   CSECT\nTSOLLA   AMODE 31\nTSOLLA   RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               SET BASE REGISTER\n         USING TSOLLA,R12            DEFINE BASE\n         USING TSOCOMM,R11           DEFINE COMMON AREA BASE\n         B     LLA0000\nMODID    DC    CL8'TSOLLA'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nLLA0000  DS    0H\n         L     R2,COMMDXDA           WORK AREA BASE ADDRESS\n         A     R2,DXDSTART           PLUS DISPLACEMENT TO OUR PORTION\n         ST    R13,4(R2)             CHAIN CALLER'S SAVE AREA\n         ST    R2,8(R13)             CHAIN OUR SAVE AREA\n         LR    R13,R2                COPY WORK AREA ADDRESS\n         USING DXDLLA,R13            DEFINE WORK AREA BASE\n         MVC   ZCMD,COMMBLKS         CLEAR THE COMMAND\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    LLA0010               YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\nLLA0010  DS    0H\n         ITRACE ID=REQDATA           REQUEST DATA FROM STC\n         MVI   COMMVCMD,$VTAMSND     SET COMMAND (SEND)\n         L     R10,COMMIOA           I/O AREA ADDRESS\n         USING VTAMIO,R10            DEFINE BASE\n         MVI   VTAMFNC,$VTAMLLA      SET FUNCTION\n         LA    R1,LLADATA-VTAMIO     LENGTH\n         STCM  R1,3,VTAMLEN          SET LENGTH\n         L     R15,AVTAM             VTAM MODULE ENTRY POINT\n         BALR  R14,R15               SEND REQUEST TO STC\n         MVI   COMMVCMD,$VTAMRCV     SET COMMAND\n         L     R15,AVTAM             VTAM MODULE ENTRY POINT\n         BALR  R14,R15               RECEIVE RESPONSE FROM STC\n* ------------------------------------------------------------------- *\n*              BUILD TEXT AREA FOR SYSDISP                            *\n* ------------------------------------------------------------------- *\n         SR    R7,R7                 CLEAR REGISTER\n         ICM   R7,3,LLA#DSN          ANY NAMES RETURNED?\n         BZ    LLA0060               NO\n         ST    R7,COMMTXL            NUMBER OF TEXT LINES\nLLA0020  DS    0H\n         SR    R0,R0                 CLEAR REGISTER\n         LR    R1,R7                 COPY NUMBER OF NAMES\n         M     R0,LINELEN            TIMES LENGTH OF TEXT LINES\n         ST    R1,COMMTXSZ           SAVE SIZE OF TEXT STORAGE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR TEXT AREA     +\n               LV=(1),               .. TEXT AREA SIZE                 +\n               LOC=ANY               .. FROM ANY AREA\n         ST    R1,COMMTXA            TEXT STORAGE AREA ADDRESS\n         LR    R8,R1                 COPY TEXT AREA ADDRESS\n         USING DTL,R8                DEFINE BASE\n         LA    R9,LLADSN             FIRST DATASET NAME\n         USING LLADSN,R9             DEFINE BASE\n         CLC   VTAMRC,X0004          LIST TRUNCATED?\n         BNE   LLA0030               NO\n         MVC   COMMMSG(MSG01L),MSG01 SET MESSAGE\nLLA0030  DS    0H\n         MVI   DTLATTR,$ATTRLOW      SET ATTRIBUTE\n         MVC   DTLDSN,LLADSN         SET DATASET NAME\n         LA    R8,DTLL(R8)           NEXT DETAIL AREA\n         LA    R9,L'LLADSN(R9)       NEXT DATASET\n         BCT   R7,LLA0030            LOOP\n         MVC   COMMPANL,LLAPANL      SET PANEL NAME\n         MVC   COMMTXLL,LINELEN      SET LENGTH OF EACH LINE\n         XC    COMMTXO,COMMTXO       CLEAR OFFSET\n         XC    COMMTXRL,COMMTXRL     CLEAR RELATIVE LINE\nLLA0040  DS    0H\n         ITRACE ID=CALLDISP          CALLING DISP\n         NI    DISPFLAG,$NCURSOR     SCROLLING, NO CURSOR DATA\n         L     R15,ADISP             DISPLAY MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO SYSDISP\n         ITRACE ID=DISPRC,           RETURNED FROM DISP                +\n               RDATA1=R15            .. RETURN CODE FROM DISP\n         CLC   ZCMD,COMMBLKS         COMMAND ALL BLANK?\n         BNE   LLA0050               NO\n         LTR   R15,R15               RETURN CODE FROM DISPLAY ZERO?\n         BZ    LLA0040               YES.. REDISPLAY\nLLA0050  DS    0H\n         ITRACE ID=FREETEXT          FREEING TEXT STORAGE\n         L     R1,COMMTXA            TEXT STORAGE ADDRESS\n         L     R0,COMMTXSZ           TEXT STORAGE LENGTH\n         FREEMAIN RU,A=(1),LV=(0)    FREE TEXT STORAGE\n         XC    COMMTXA,COMMTXA       CLEAR TEXT STORAGE ADDRESS\n         XC    COMMTXSZ,COMMTXSZ     CLEAR TEXT STORAGE LENGTH\n         XC    COMMTXL,COMMTXL       CLEAR NUMBER OF LINES\n         B     EXIT0000              AND EXIT\n* ------------------------------------------------------------------- *\n*              NO DATASETS IN LINK LIST (SHOULD NEVER HAPPEN)         *\n* ------------------------------------------------------------------- *\nLLA0060  DS    0H\n         ITRACE ID=NOLLA             NO DATASETS IN LINK LIST\n         MVC   COMMMSG(MSG02L),MSG02 SET MESSAGE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS   0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDLLA)             DISPLACEMENT TO WORK AREA\nLINELEN  DC    A(DTLL)               LENGTH OF EACH DETAIL LINE\nX0004    DC    X'0004'\nLLAPANL  DC    CL8'SUTLLLA'          PANEL NAME\nMSG01    DS    0C\n         DC    CL11'TSOLLA01I'\n         DC    C'Data set list truncated'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'TSOLLA02I'\n         DC    C'There are no data sets in the link list!'\nMSG02L   EQU   *-MSG02\n         LTORG\n* ------------------------------------------------------------------- *\n*        WORK AREAS                                                   *\n* ------------------------------------------------------------------- *\nDXDLLA   DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*              TEXT AREA DETAIL                                       *\n* ------------------------------------------------------------------- *\nDTL      DSECT\nDTLATTR  DS    X               ATTRIBUTE CHARACTER\nDTLDSN   DS    CL44            DATASET NAME\nDTLL     EQU   *-DTL           LENGTH OF DETAIL LINE\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         TSOCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              LLA DATA WORK AREA                                     *\n* ------------------------------------------------------------------- *\n         VTAMIO DSECT=YES\n         ORG   VTAMDATA\n         COPY  LLADATA\n*---------------------------------------------------------------------*\n*              PSA                                                    *\n*---------------------------------------------------------------------*\n         IHAPSA DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*              MVS CVT                                                *\n*---------------------------------------------------------------------*\n         CVT    DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         COPY ATTR\n         END  TSOLLA\n./ ADD NAME=TSOLRAD\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TSOLRAD                                               *\n*                                                                     *\n*  VTAM LERAD exit                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOLRAD  CSECT\nTSOLRAD  AMODE 31\nTSOLRAD  RMODE ANY\n         USING TSOLRAD,R15           DEFINE BASE\n         B     LERAD010              SKIP ADDRESS AND EYECATCHER\n         DC    CL8'TSOLRAD'          MODULE NAME\n         DC    CL8'&SYSDATE'         DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'         TIME OF ASSEMBLY\nLERAD010 DS    0H\n         USING IFGRPL,R1             DEFINE BASE\n         L     R2,RPLAAREA           RPL EXTENSION ADDRESS\n         USING ISTRPL6X,R2           DEFINE BASE\n         ABEND $U1007,DUMP,,USER\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*              CONSTANTS                                             *\n* ------------------------------------------------------------------ *\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------ *\n*              EQUATES                                               *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         ABCODES\n         END  TSOLRAD\n./ ADD NAME=TSOMAIN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Name: TSOMAIN                                                      *\n*                                                                     *\n*  TSO interface mainline.                                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  OPTIONS\nTSOMAIN  CSECT\nTSOMAIN  AMODE 31\nTSOMAIN  RMODE ANY\n         USING TSOMAIN,R12          DEFINE BASE\n         STM   R14,R12,12(R13)      SAVE ENTRY REGISTERS\n         LR    R12,R15              COPY BASE\n         B     MAIN0000             BRANCH AROUND EYECATCHER\nMODID    DC    CL8'TSOMAIN'         MODULE NAME\n         DC    CL8'&SYSDATE'        DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'        TIME OF ASSEMBLY\nMAIN0000 DS    0H\n* ------------------------------------------------------------------- *\n*        Acquire storage for work area                                *\n* ------------------------------------------------------------------- *\n         LTR   R1,R1                PARAMETER PASSED?\n         BZ    ERR0010              NO\n         ICM   R9,15,0(R1)          PARAMETER ADDRESS\n         BZ    ERR0010              NO PARAMETER\n         L     R3,DXDSIZE           WORK AREA SIZE\n         GETMAIN RU,                ACQUIRE WORK AREA STORAGE          +\n               LV=(R3),             .. WORK AREA SIZE IS IN R3         +\n               LOC=ANY              .. MAY BE ABOVE OR BELOW\n         LR    R2,R1                COPY WORK AREA ADDRESS\n         LR    R4,R1                COPY STORAGE ADDRESS\n         SR    R1,R1                CLEAR REGISTER\n         MVCL  R2,R0                CLEAR WORK AREA\n         LR    R2,R4                COPY WORK AREA ADDRESS\n         A     R2,DXDSTART          PLUS DISPLACEMENT TO OUR PORTION\n         ST    R13,4(R2)            CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R2,8(R13)            OUR SAVE AREA TO CALLER'S\n         LR    R13,R2               SET SAVE AREA ADDRESS\n         USING DXDMAIN,R13          DEFINE WORK AREA BASE\n         MVC   DXDID,MODID          IDENTIFY WORK AREA OWNER\n* ------------------------------------------------------------------- *\n*        Load common data module  (TSOCOMM)                           *\n* ------------------------------------------------------------------- *\n         LOAD  EP=TSOCOMM           LOAD COMMON DATA MODULE\n         LR    R11,R0               COPY TO PERMANENT BASE\n         USING TSOCOMM,R11          DEFINE COMMON AREA BASE\n         ST    R12,AMAIN            SET MAINLINE'S ADDRESS IN COMMON\n         ST    R4,COMMDXDA          SET DYNAMIC WORK AREA ADDRESS\n         SR    R2,R2                CLEAR REGISTER\n         ICM   R2,3,0(R9)           PARAMETER LENGTH\n         BZ    ERR0010              NO PARAMETER\n         CH    R2,H8                TOO LONG?\n         BH    ERR0020              YES\n         BCTR  R2,0                 FOR EXECUTE\n         EX    R2,APPLMVC           COPY SUTL STC'S APPL NAME\n         MVC   ADISP,VDISP          SET DYNAMIC AREA DISPLAY ADDRESS\n         MVC   ALRAD,VLRAD          SET LERAD EXIT ADDRESS\n         MVC   AMENU,VMENU          SET LERAD EXIT ADDRESS\n         MVC   APQRY,VPQRY          SET DYNAMIC AREA PQUERY ADDRESS\n         MVC   APRSE,VPRSE          SET COMMAND PARSER ADDRESS\n         MVC   AVARS,VVARS          SET SPF VARIABLE DEFINE/DELETE ADDR\n         MVC   AVTAM,VVTAM          SET TSO FUNCTIONS MODULE ADDRESS\n* ------------------------------------------------------------------- *\n*        Acquire storage for trace table                              *\n* ------------------------------------------------------------------- *\n         L     R3,TRSIZE            TRACE TABLE SIZE\n         GETMAIN RU,                ACQUIRE STORAGE FOR TRACE TABLE    +\n               LV=(R3),             .. SIZE IS IN R3                   +\n               LOC=ANY              .. MAY BE ABOVE OR BELOW\n         ST    R1,TRADDR            SAVE TRACE TABLE STORAGE ADDRESS\n         SR    R0,R0                ASSUME ON A 32-BYTE BOUNDARY\n         TM    TRADDR+3,X'07'       ALREADY ON 32-BYTE BOUNDARY?\n         BNO   MAIN0010             YES\n         SRL   R1,5                 SHIFT OUT LOW BITS ..\n         SLL   R1,5                 .. TO ROUND TO 32-BYTE BOUNDARY\n         LA    R1,32(R1)            PLUS 32\n         LA    R0,TRENTRYL          1 LESS TRACE ENTRY AVAILABLE\nMAIN0010 DS    0H\n         ST    R1,TRFIRST           FIRST TRACE ENTRY\n         ST    R1,TRCURR            CURRENT TRACE ENTRY\n         A     R1,TRSIZE            LAST ENTRY IN TABLE\n         SH    R1,=Y(TRENTRYL)      MINUS 1 ENTRY\n         SR    R1,R0                MINUS 1 MORE IF NECESSARY\n         ST    R1,TRLAST            LAST TRACE ENTRY ADDRESS\n* ------------------------------------------------------------------- *\n*        Load SPF interface module                                    *\n* ------------------------------------------------------------------- *\n         ITRACE ID=LOADSPF\n         LOAD  EP=ISPLINK           LOAD SPF INTERFACE MODULE\n         ST    R0,AISPLINK          SET ADDRESS IN COMMON AREA\n* ------------------------------------------------------------------- *\n*        Intialize ACB, RPL, etc                                      *\n* ------------------------------------------------------------------- *\n         GETMAIN RU,                 ACQUIRE STORAGE FOR AN ACB        +\n               LV=ACBL,              .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,COMMACB            SAVE ACB'S ADDRESS\n         LR    R10,R1                COPY ACB ADDRESS\n         USING IFGACB,R10            DEFINE BASE\n         MVC   0(ACBL,R10),ACBI      INITIALIZE ACB\n         ST    R11,ACBUSER           SET TSOCOMM ADDRESS IN ACB\n         GETMAIN RU,                 ACQUIRE STORAGE FOR AN EXIT LIST  +\n               LV=EXLSTL,            .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         MVC   0(EXLSTL,R1),EXLSTI   INITIALIZE EXIT LIST\n         ST    R1,COMMXLST           SAVE EXIT LIST'S ADDRESS\n         LA    R0,COMMAPLL           APPLID'S LENGTH ADDRESS\n         ST    R0,ACBAPID            SET APPLID ADDRESS IN ACB\n         ST    R1,ACBEXLST           SET EXLST'S ADDRESS\n         USING IFGEXLST,R1           DEFINE BASE\n         XC    EXLATTNP,EXLATTNP     NO ATTN EXIT\n         MVC   EXLLERP,ALRAD         SET LERAD EXIT ADDRESS\n         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL           +\n               LV=RPLL,              .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R9,R1                 COPY RPL'S ADDRESS\n         ST    R9,COMMRPL            SAVE RPL'S ADDRESS\n         USING IFGRPL,R9             DEFINE BASE\n         MVC   0(RPLL,R1),RPLI       INITIALIZE RPL\n         MVC   RPLDACB,COMMACB       SET ACB'S ADDRESS\n         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL EXTENSION +\n               LV=RPLEXTL,           .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,COMMRPLX           SAVE RPL'S ADDRESS\n         LR    R8,R1                 COPY RPL EXTENSION'S ADDRESS\n         USING ISTRPL6X,R8           DEFINE BASE\n         MVC   0(RPLEXTL,R8),RPLEXTI INITIALIZE RPL EXTENSION\n         ST    R8,RPLAAREA           SET RPL EXTENSION'S ADDRESS\n         GETMAIN RU,                 ACQUIRE STORAGE FOR NIB           +\n               LV=NIBL,              .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R7,R1                 COPY NIB'S ADDRESS\n         ST    R7,COMMNIB            SET NIB'S ADDRESS\n         MVC   0(NIBL,R7),NIBI       INITIALIZE NIB\n         USING ISTDNIB,R7            DEFINE BASE\n         MVC   NIBSYM,COMMSUTL       SET SUTL STC'S APPL NAME\n         GETMAIN RU,                 ACQUIRE STORAGE FOR I/O AREA      +\n               LV=COMMIOSZ,          .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R6,R1                 SET I/O AREA ADDRESS\n         ST    R6,COMMIOA            SAVE I/O AREA ADDRESS\n         USING VTAMIO,R6             DEFINE I/O AREA BASE\n* ------------------------------------------------------------------- *\n*        Determine an available ACB name and OPEN the ACB             *\n* ------------------------------------------------------------------- *\n         GETMAIN RU,                 ACQUIRE STORAGE FOR OPEN/CLOSE    +\n               LV=OCPLL,             .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R2,R1                 COPY STORAGE ADDRESS\n         MVC   0(OCPLL,R2),OCPLI     COPY OPEN/CLOSE PARM LIST\n         ITRACE ID=OPENACB           OPENING ACB\n         LOAD  EP=TSOACB             LOAD ACB NAMES MODULE\n         LR    R3,R0                 COPY ACB NAMES ADDRESS\nMAIN0020 DS    0H\n         ITRACE ID=ACBNAME,          TRACE EACH OPEN ATTEMPT           +\n               DATA1=0(R3)           .. TRACE THE NAME\n         MVC   COMMAPLN,0(R3)        COPY ACB NAME\n         OPEN  ((R10)),MF=(E,(R2))   OPEN ACB\n         ITRACE ID=OPENRC,           RETURN CODE FROM OPEN             +\n               RDATA1=R15            .. TRACE RETURN CODE\n         LTR   R15,R15               OPEN SUCCESSFUL?\n         BZ    MAIN0030              YES\n         LA    R3,8(R3)              NEXT ACB NAME\n         CLI   0(R3),X'FF'           END OF TABLE?\n         BNE   MAIN0020              NO\n         DELETE EP=TSOACB            DELETE ACB NAMES MODULE\n         FREEMAIN RU,A=(R2),LV=OCPLL FREEMAIN OPEN/CLOSE PARM LIST\n         ITRACE ID=NOAPPL\n         LA    R2,MSG01L             MESSAGE LENGTH\n         GETMAIN RU,                 ACQUIRE STORAGE FOR TPUT          +\n               LV=(R2),              .. SIZE OF AREA                   +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R3,R1                 COPY STORAGE ADDRESS\n         MVC   0(MSG01L,R3),MSG01    COPY MESSAGE\n         TPUT  (R3),(R2)             ISSUE TPUT\n         FREEMAIN RU,A=(3),LV=MSG01L FREE MESSAGE STORAGE\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         B     EXIT0000              EXIT\nMAIN0030 DS    0H\n         OI    COMMFLAG,$ACBOPEN     ACB IS OPEN\n         DELETE EP=TSOACB            DELETE ACB NAMES MODULE\n         FREEMAIN RU,A=(R2),LV=OCPLL FREEMAIN OPEN/CLOSE PARM LIST\n* ------------------------------------------------------------------- *\n*        Enable our ATTN exit                                         *\n* ------------------------------------------------------------------- *\n         ITRACE ID=SETLOGON          OPENING ACB\n         SETLOGON ACB=(R10),         ISSUE SETLOGON                    +\n               RPL=(R9),             .. RPL FOR REQUEST                +\n               OPTCD=START           .. ENABLE EXIT\n         LTR   R15,R15               SET LOGON SUCCESSFUL?\n         BZ    MAIN0040              YES\n         ITRACE ID=LOGONF,           SET LOGON FAILED                  +\n               RDATA1=R15            .. TRACE RETURN CODE\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         B     EXIT0000              EXIT\n* ------------------------------------------------------------------- *\n*        Determine if SUTLSTC is active and allocate a session        *\n* ------------------------------------------------------------------- *\nMAIN0040 DS    0H\n         ITRACE ID=INQUIRE\n         INQUIRE RPL=(R9),           ISSUE INQUIRE                     +\n               NIB=(R7),             .. NIB'S ADDRESS                  +\n               OPTCD=APPSTAT         .. WE WANT PARTNER'S STATUS\n         CLI   RPLFDB3,0             PARTNER READY?\n         BE    MAIN0050              YES\n         ITRACE ID=NOTREADY          STC IS NOT READY\n         LA    R2,MSG02L             MESSAGE LENGTH\n         GETMAIN RU,                 ACQUIRE STORAGE FOR TPUT          +\n               LV=(R2),              .. SIZE OF AREA                   +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R3,R1                 COPY STORAGE ADDRESS\n         MVC   0(MSG02L,R3),MSG02    COPY MESSAGE\n         TPUT  (R3),(R2)             ISSUE TPUT\n         FREEMAIN RU,A=(3),LV=MSG02L FREE MESSAGE STORAGE\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         B     EXIT0000              EXIT\nMAIN0050 DS    0H\n         ITRACE ID=CNOS\n         MVC   RPL6LU,COMMSUTL       SET STC'S LU NAME\n         APPCCMD CONTROL=OPRCNTL,    ISSUE APPC COMMAND                +\n               QUALIFY=CNOS,         .. CHANGE NUMBER OF SESSIONS      +\n               RPL=(R9),             .. RPL'S ADDRESS                  +\n               LOGMODE=LU62P         .. LOGMODE\n         CLC   RPL6RC,X000001        CNOS ACCEPTED?\n         BE    MAIN0060              YES\n         ITRACE ID=CNOSFAIL,         CNOS FAILED                       +\n               DATA1=RPL6RC          .. TRACE RETURN CODES\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         B     EXIT0000              AND EXIT\nMAIN0060 DS    0H\n         ITRACE ID=ALLOC             ALLOCATE A SESSION\n         MVC   0(FMH5L,R6),FMH5      COPY FMH5 TO I/O AREA\n         USING PSA,R0                DEFINE PSA'S BASE\n         L     R1,PSAANEW            OUR ASCB'S ADDRESS\n         USING ASCB,R1               DEFINE BASE\n         ICM   R1,15,ASCBJBNS        JOB NAME (USER'S ID) ADDRESS\n         MVC   FMH5USER-FMH5(8,R6),0(R1)\n         MVC   COMMUID,0(R1)         COPY USER'S ID\n         L     R1,CVTPTR             CVT'S ADDRESS\n         USING CVT,R1                DEFINE CVT'S BASE\n         ICM   R1,15,CVTSMCA         SMF CONTROL AREA ADDRESS\n         USING SMCABASE,R1           DEFINE BASE\n         MVC   FMH5SMF-FMH5(8,R6),SMCASID   COPY SYSTEM'S SMF ID\n         APPCCMD CONTROL=ALLOC,      ISSUE APPC COMMAND                +\n               QUALIFY=ALLOCD,       .. ALLOCATE A SESSION             +\n               RPL=(R9),             .. RPL'S ADDRESS                  +\n               AREA=(R6),            .. FMH'S ADDRESS                  +\n               RECLEN=FMH5L,         .. FMH'S LENGTH                   +\n               LOGMODE=LU62P         .. LOGMODE\n         OC    RPL6RC,RPL6RC         ALL ZEROS?\n         BZ    MAIN0070              YES\n         ITRACE ID=ALOCFAIL,         ALLOCATE FAILED                   +\n               DATA1=RPL6RC          .. TRACE RETURN CODES\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         B     EXIT0000              AND EXIT\nMAIN0070 DS    0H\n         ITRACE ID=CONVID,                                             +\n               DATA1=RPL6CNVD        CONVERSATION ID\n         OI    COMMFLAG,$SESSALO     SESSION IS ALLOCATED\n         MVC   COMMCID,RPL6CNVD      SAVE CONVERSATION ID\n         MVI   VTAMFNC,$VTAMSID      SET COMMAND\n         LA    R1,VTAMSID-VTAMIO     LENGTH\n         STCM  R1,3,VTAMLEN          SET LENGTH\n         MVI   COMMVCMD,$VTAMSND     SET COMMAND (SEND)\n         L     R15,AVTAM             VTAM ENTRY POINT\n         BALR  R14,R15               SEND REQUEST TO STC\n         MVI   COMMVCMD,$VTAMRCV     SET COMMAND (RECEIVE)\n         L     R15,AVTAM             VTAM ENTRY POINT\n         BALR  R14,R15               RECEIVE RESPONSE\n         MVC   COMMSMF,VTAMSID       COPY SMF ID\n* ------------------------------------------------------------------- *\n*        Define SPF variables                                         *\n* ------------------------------------------------------------------- *\n         ITRACE ID=VARDEF            DEFINING ISPF VARIABLES\n         MVI   VARCMD,$VARDEFA       SET COMMAND (DEFINE ALL)\n         LA    R1,LVLINE             VARIABLE DATA BASE\n         ST    R1,VARAREA            PASS DATA ADDRESS\n         LA    R1,SPFVARS            VARIABLE CONTROL DATA\n         ST    R1,VARTBLE            PASS CONTROL DATA ADDRESS\n         LA    R1,VARREQ             VAR PARM BLOCK ADDRESS\n         L     R15,AVARS             TSOVARS ENTRY POINT\n         BALR  R14,R15               LINK TO TSOVARS\n         TM    COMMFLAG,$ABORT       ERRORS IN DURING TSOINIT?\n         BO    TERM0000              YES\n* ------------------------------------------------------------------- *\n*        Build text for menu                                          *\n* ------------------------------------------------------------------- *\nMAIN0080 DS    0H\n         ITRACE ID=BLDMMENU          DISPLAY MENU\n         L     R2,AMENU              MENU TABLE ADDRESS\n         SR    R0,R0                 CLEAR REGISTER\n         LH    R1,2(R2)              NUMBER OF DISPLAYABLE COMMANDS\n         ST    R1,COMMTXL            SAVE NUMBER OF TEXT LINES\n         M     R0,LINELEN            TIMES TEXT LINE LENGTH\n         ST    R1,COMMTXSZ           SAVE TEXT AREA SIZE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR TEXT          +\n               LV=(1),               .. SIZE OF AREA                   +\n               LOC=ANY\n         ST    R1,COMMTXA            SAVE TEXT AREA ADDRESS\n         LR    R3,R1                 COPY TEXT ADDRESS\n         USING DTL,R3                DEFINE DETAIL LINE BASE\n         LH    R4,2(R2)              NUMBER OF DISPLAYABLE ITEMS\n         LA    R2,4(R2)              SKIP COUNTERS\n         USING MENUDSCT,R2           DEFINE BASE\nMAIN0090 DS    0H\n         TM    MENUFLAG,$MENUNON     DISPLAYABLE?\n         BO    MAIN0100              NO\n         MVC   DTL(DTLL),COMMBLKS    INITIALIZE DETAIL AREA\n         MVI   DTLATTR,$ATTRLOW      SET ATTRIBUTE\n         MVC   DTLCMD,MENUCMD        COPY COMMAND\n         MVC   DTLDESC,MENUDESC      COPY DESCRIPTION\n         LA    R3,DTLL(R3)           NEXT DETAIL LINE\n         LA    R2,MENUL(R2)          NEXT MENU ITEM\n         BCT   R4,MAIN0090           LOOP\n         B     MAIN0110\nMAIN0100 DS    0H\n         LA    R2,MENUDESC-MENUDSCT(R2)\n         B     MAIN0090              LOOP\nMAIN0110 DS    0H\n         MVC   COMMPANL,MENUPANL     SET PANEL NAME\n         XC    COMMTXO,COMMTXO       SET OFFSET TO ZERO\n         XC    COMMTXRL,COMMTXRL     SET RELATIVE LINE TO ZERO\n         MVC   COMMTXLL,LINELEN      SET LINE LENGTH\nMAIN0120 DS    0H\n         ITRACE ID=CALLDISP\n         L     R15,ADISP             DISPLAY ENTRY POINT\n         BALR  R14,R15               DISPLAY THE MENU\n         CH    R15,H8                END?\n         BE    TERM0000              YES, BEGIN TERMINATION\n         CLC   ZCMD,COMMBLKS         ANY COMMAND?\n         BE    MAIN0120              NO\nMAIN0130 DS    0H\n         LA    R1,L'ZCMD             INPUT LENGTH\n         STH   R1,PARSELEN           SET LENGTH\n         MVC   PARSEIN,ZCMD          COPY INPUT STRING\n         LA    R1,PARSEREQ           PARSE PARMS ADDRESS\n         L     R15,APRSE             PARSER ADDRESS\n         BALR  R14,R15               PARSE THE FIRST NON-BLANK STRING\n         L     R2,AMENU              MENU DATA BASE ADDRESS\n         LH    R4,0(R2)              NUMBER OF MENU ITEMS\n         LA    R2,4(R2)              SKIP COUNTERS\nMAIN0140 DS    0H\n         CLC   MENUCMD,PARSEOUT      COMMAND FOUND?\n         BE    MAIN0170              YES\n         TM    MENUFLAG,$MENUNON     DISPLAYABLE?\n         BO    MAIN0150              NO\n         LA    R2,MENUL(R2)\n         B     MAIN0160\nMAIN0150 DS    0H\n         LA    R2,MENUDESC-MENUDSCT(R2)\nMAIN0160 DS    0H\n         BCT   R4,MAIN0140           LOOP\n         MVC   COMMMSG(MSG03L),MSG03 SET MESSAGE\n         B     MAIN0080              RE-SEND MENU\nMAIN0170 DS    0H\n         ITRACE ID=CMDFOUND          DISPLAY ACTIVE REGIONS\n         ICM   R1,15,COMMTXA         TEXT AREA ADDRESS\n         BZ    MAIN0180\n         L     R0,COMMTXL            TEXT LENGTH\n         FREEMAIN RU,A=(1),LV=(0)    FREEMAIN TEXT AREA\n         XC    COMMTXA,COMMTXA\n         XC    COMMTXL,COMMTXL\nMAIN0180 DS    0H\n*        MVC   ZCMD,PARSEIN          COPY REMAINING COMMAND\n         ICM   R15,15,MENUMOD        FUNCTION ENTRY POINT\n         BALR  R14,R15               LINK TO ACTIVITY DISPLAY\n         TM    COMMFLAG,$ABORT       WAS ABORT FLAG SET?\n         BO    ERR0040               YES\n         CLC   COMMMSG,COMMBLKS      MESSAGE FOR MAIN MENU?\n         BNE   MAIN0080              YES\n         CLC   ZCMD,COMMBLKS         COMMAND PRESENT?\n         BNE   MAIN0130              YES\n         B     MAIN0080              OTHERWISE SEND MENU\n* ------------------------------------------------------------------- *\n*        Termination/clean up                                         *\n* ------------------------------------------------------------------- *\nTERM0000 DS    0H\n         ITRACE ID=TERM              TERMINATION BEGINNING\n         ICM   R1,15,COMMTXA         TEXT AREA ADDRESS\n         BZ    TERM0010\n         L     R0,COMMTXL            TEXT LENGTH\n         FREEMAIN RU,A=(1),LV=(0)    FREEMAIN TEXT AREA\n         XC    COMMTXA,COMMTXA       CLEAR TEXT ADDRESS\n         XC    COMMTXL,COMMTXA       CLEAR TEXT LENGTH\nTERM0010 DS    0H\n         MVI   VARCMD,$VAREOJ        SET COMMAND (DELETE ALL)\n         LA    R1,VARREQ             PARM BLOCK ADDRESS\n         L     R15,AVARS             VARIABLE DEFINE/DELETE ADDRESS\n         BALR  R14,R15               DELETE VARIABLES\n         TM    COMMFLAG,$SESSALO     CONVERSATION ALLOCATED?\n         BNO   TERM0020              NO\n         ITRACE ID=DEALLOC           DEALLOCATING THE SESSION\n         APPCCMD CONTROL=DEALLOC,    DE-ALLOCATE A SESSION             +\n               QUALIFY=FLUSH,        .. FLUSH BUFFERS                  +\n               RPL=(R9),             .. RPL'S ADDRESS                  +\n               CONVID=COMMCID        .. CONVERSATION ID\n         L     R1,COMMRPLX           RPL EXTENSION'S ADDRESS\n         USING ISTRPL6X,R1           DEFINE BASE\n         OC    RPL6RC,RPL6RC         DE-ALLOCATE SUCCESSFUL?\n         BNZ   ERR0080               NO\nTERM0020 DS    0H\n         TM    COMMFLAG,$ACBOPEN     ACB OPENED?\n         BNO   TERM0030              NO\n         GETMAIN RU,                 ACQUIRE STORAGE FOR OPEN/CLOSE    +\n               LV=OCPLL,             .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE 16-MEG LINE\n         LR    R2,R1                 COPY OPEN/CLOSE ADDRESS\n         MVC   0(OCPLL,R2),OCPLI     INITIALIZE OPEN/CLOSE PARM LIST\n         CLOSE ((R10)),MF=(E,(R2))   CLOSE THE ACB\n         FREEMAIN RU,A=(R2),LV=OCPLL FREEMAIN OPEN/CLOSE PARM LIST\nTERM0030 DS    0H\n         ICM   R1,15,COMMACB         ACB'S ADDRESS\n         BZ    TERM0040              NOT ACQUIRED\n         ITRACE ID=FREEACB,          FREEMAIN ACB                      +\n               RDATA1=R1             .. ACB'S ADDRESS\n         FREEMAIN RU,A=(1),LV=ACBL   FREEMAIN ACB\nTERM0040 DS    0H\n         ICM   R1,15,COMMRPL         RPL'S ADDRESS\n         BZ    TERM0050              NOT ACQUIRED\n         ITRACE ID=FREERPL,          FREEMAIN RPL                      +\n               RDATA1=R1             .. RPL'S ADDRESS\n         FREEMAIN RU,A=(1),LV=RPLL   FREEMAIN RPL\nTERM0050 DS    0H\n         ICM   R1,15,COMMRPLX        RPL EXTENSION'S ADDRESS\n         BZ    TERM0060              NOT ACQUIRED\n         ITRACE ID=FREERPLX,         FREEMAIN RPL                      +\n               RDATA1=R1             .. RPL EXTENSION'S ADDRESS\n         FREEMAIN RU,A=(1),LV=RPLEXTL\nTERM0060 DS    0H\n         ICM   R1,15,COMMNIB         NIB'S ADDRESS\n         BZ    TERM0070              NOT ACQUIRED\n         ITRACE ID=FREENIB,          FREEMAIN NIB                      +\n               RDATA1=R1             .. NIB'S ADDRESS\n         FREEMAIN RU,A=(1),LV=NIBL   FREEMAIN NIB\nTERM0070 DS    0H\n         ICM   R1,15,COMMXLST        EXLST'S ADDRESS\n         BZ    TERM0080              NOT ACQUIRED\n         ITRACE ID=FREEXLST,         FREEMAIN EXLST                    +\n               RDATA1=R1             .. EXLST'S ADDRESS\n         FREEMAIN RU,A=(1),LV=EXLSTL\nTERM0080 DS    0H\n         ICM   R1,15,COMMIOA         I/O AREA ADDRESS\n         BZ    EXIT0000              NOT ACQUIRED\n         ITRACE ID=FREEIO,           FREEMAIN I/O AREA                 +\n               RDATA1=R1             .. I/O AREA'S ADDRESS\n         FREEMAIN RU,A=(1),LV=COMMIOSZ\n         B     EXIT0000              AND EXIT\nERR0010  DS    0H\n         ITRACE ID=NOPARM\n         LA    R2,MSG04             NO PARM MESSAGE\n         LA    R3,MSG04L            MESSAGE'S LENGTH\n         BAL   R9,TPUT0000          ISSUE MESSAGE\n         LA    R3,12                SET RETURN CODE\n         B     EXIT0020             AND EXIT\nERR0020  DS    0H\n         ITRACE ID=PARMLONG\n         LA    R2,MSG05             PARM TOO LONG MESSAGE\n         LA    R3,MSG05L            MESSAGE'S LENGTH\n         BAL   R9,TPUT0000          ISSUE MESSAGE\n         MVI   COMMRC,14            SET RETURN CODE\n         B     EXIT0010             AND EXIT\nERR0040  DS    0H\n         ITRACE ID=CMDFAIL          ERROR IN COMMAND PROCESSOR\n         ABEND $U1002,DUMP,,USER\nERR0080  DS    0H\n         ITRACE ID=DALOFAIL,         SESSION DE-ALLOCATE FAILED        +\n               DATA1=RPL6RC          .. DE-ALLOCATE RETURN CODES\n         ABEND $U1008,DUMP,,USER\nTPUT0000 DS    0H\n         GETMAIN RU,                ACQUIRE STORAGE FOR MESSAGE TEXT   +\n               LV=(R3),             .. SIZE OF MESSAGE                 +\n               LOC=BELOW            .. FROM BELOW THE LINE\n         BCTR  R3,0                 FOR EXECUTE\n         EX    R3,TPUTMVC           MOVE MESSAGE TEXT\n         LR    R2,R1                COPY MESSAGE ADDRESS\n         LA    R3,1(R3)             RESTORE FULL LENGTH\n         TPUT  (R2),(R3)            ISSUE MESSAGE\n         FREEMAIN RU,A=(2),LV=(3)   FREE MESSAGE AREA\n         BR    R9                   RETURN\nTPUTMVC  MVC   0(0,R1),0(R2)        COPY MESSAGE\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R0,TRSIZE            TRACE TABLE SIZE\n         L     R1,TRADDR            TRACE TABLE STORAGE ADDRESS\n         FREEMAIN RU,A=(1),LV=(0)   FREEMAIN TRACE TABLE STORAGE\nEXIT0010 DS    0H\n         L     R2,COMMDXDA          SAVE WORK AREA STORAGE ADDRESS\n         SR    R3,R3                CLEAR REGISTER\n         IC    R3,COMMRC            LOAD RETURN CODE\n         DELETE EP=TSOCOMM          DELETE COMMON MODULE\n         L     R0,DXDSIZE           WORK AREA STORAGE SIZE\n         L     R13,4(R13)           RESTORE CALLER'S SAVE AREA ADDRESS\n         FREEMAIN RU,A=(2),LV=(0)   FREEMAIN WORK AREA STORAGE\nEXIT0020 DS    0H\n         L     R14,12(R13)          RESTORE R14\n         LR    R15,R3               SET RETURN CODE\n         LM    R0,R12,20(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                  EXIT\nAPPLMVC  MVC   COMMSUTL(0),2(R9)    MOVE APPL NAME TO COMMON AREA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDMAIN)           DISPLACEMENT TO WORK AREA\nDXDSIZE  CXD                        WORK AREA TOTAL SIZE\nVDISP    DC    V(TSODISP)           DYNAMIC AREA DISPLAY\nVLRAD    DC    V(TSOLRAD)           LERAD EXIT\nVMENU    DC    V(TSOMENU)           MENU DATA\nVPQRY    DC    V(TSOPQRY)           DYNAMIC AREA PQUERY\nVPRSE    DC    V(TSOPRSE)           COMMAND PARSER\nVVARS    DC    V(TSOVARS)           SPF VARIABLE DEFINE/DELETE\nVVTAM    DC    V(TSOVTAM)           TSO VTAM FUNCTIONS\nLINELEN  DC    A(DTLL)\nOCPLI    OPEN  (*,INPUT),MF=L       OPEN/CLOSE PARM LIST\nOCPLL    EQU   *-OCPLI\nACBI     ACB   AM=VTAM,              GENERATE VTAM ACB                 +\n               MACRF=LOGON,                                            +\n               EXLST=*,                                                +\n               APPLID=*\nACBL     EQU   *-ACBI\nEXLSTI   EXLST AM=VTAM,              GENERATE VTAM EXIT LIST           +\n               ATTN=*,                                                 +\n               LERAD=*\nEXLSTL   EQU   *-EXLSTI\nNIBI     NIB   MODE=RECORD,          GENERATE VTAM NIB                 +\n               NAME=SUTL\nNIBL     EQU   *-NIBI\nRPLI     RPL   AM=VTAM,              GENERATE VTAM RPL                 +\n               AAREA=RPLEXTI\nRPLL     EQU   *-RPLI\nRPLEXTI  ISTRPL6\nRPLEXTL  EQU   *-RPLEXTI\nH8       DC    H'8'\nHEX0000  DC    8X'00'\nX000001  DC    X'00000001'\nHEXCHAR  DC    C'0123456789ABCDEF'\nMENUPANL DC    CL8'SUTLMENU'\n         FMH5  DSECT=NO              GENERATE FMH5\nMSG01    DC    C'TSOMAIN01E * All user interface APPLID''s are busy, tr+\n               y later'\nMSG01L   EQU   *-MSG01\nMSG02    DC    C'TSOMAIN02E * SUTL is not active'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'TSOMAIN03E'\n         DC    C'Invalid function code'\nMSG03L   EQU   *-MSG03\nMSG04    DC    C'TSOMAIN04E * SUTL STC APPLID is a required parameter'\nMSG04L   EQU   *-MSG04\nMSG05    DC    C'TSOMAIN05E * SUTL APPLID specified is too long'\nMSG05L   EQU   *-MSG05\n         LTORG\n         VDEF  BASE=LVLINE\nSPFVARS  DS    0C\n         VDEF  NAME=PSMF,            DEFINE VARIABLE                   +\n               DATA=COMMSMF,         .. FIELD NAME IN TSOCOMM          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PUID,            DEFINE VARIABLE                   +\n               DATA=COMMUID,         .. FIELD NAME IN TSOCOMM          +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PMSGI,           DEFINE VARIABLE                   +\n               DATA=COMMMSGI,        .. FIELD NAME IN TSOCOMM          +\n               LENGTH=11,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PMSGT,           DEFINE VARIABLE                   +\n               DATA=COMMMSGT,        .. FIELD NAME IN TSOCOMM          +\n               LENGTH=59,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=LVLINE,          DEFINE VARIABLE                   +\n               DATA=LVLINE,          .. FIELD NAME IN TSOCOMM          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=VCOL,            DEFINE VARIABLE                   +\n               DATA=VCOL,            .. FIELD NAME IN TSOCOMM          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=VDEPTH,          DEFINE VARIABLE                   +\n               DATA=VDEPTH,          .. FIELD NAME IN TSOCOMM          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=VROW,            DEFINE VARIABLE                   +\n               DATA=VROW,            .. FIELD NAME IN TSOCOMM          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=VTYPE,           DEFINE VARIABLE                   +\n               DATA=VTYPE,           .. FIELD NAME IN TSOCOMM          +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=VWIDTH,          DEFINE VARIABLE                   +\n               DATA=VWIDTH,          .. FIELD NAME IN TSOCOMM          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=ZSCROLLN,        DEFINE VARIABLE                   +\n               DATA=ZSCROLLN,        .. FIELD NAME IN TSOCOMM          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=ZSCROLLA,        DEFINE VARIABLE                   +\n               DATA=ZSCROLLA,        .. FIELD NAME IN TSOCOMM          +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=ZVERB,           DEFINE VARIABLE                   +\n               DATA=ZVERB,           .. FIELD NAME IN TSOCOMM          +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=ZCMD,            DEFINE VARIABLE                   +\n               DATA=ZCMD,            .. FIELD NAME IN TSOCOMM          +\n               LENGTH=80,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         DC    X'FF'\n* ------------------------------------------------------------------- *\n*        WORK AREA                                                    *\n* ------------------------------------------------------------------- *\nDXDMAIN  DSECT\n         SUTLSAVE DSECT=NO\n         VARREQ   DSECT=NO\n         PARSEREQ DSECT=NO\n* ------------------------------------------------------------------- *\n*        COMMON MODULE                                                *\n* ------------------------------------------------------------------- *\n         TSOCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  MENUDSCT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDTL      DSECT\nDTLATTR  DS    X\nDTLCMD   DS    CL4\n         DS    CL2\nDTLDESC  DS    CL60\nDTLL     EQU   *-DTL\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VTAMIO  DSECT=YES\n         ORG   VTAMDATA\nVTAMSID  DS    CL4\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA  DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              ACB                                                    *\n* ------------------------------------------------------------------- *\n         IFGACB AM=VTAM\n* ------------------------------------------------------------------- *\n*              RPL                                                    *\n* ------------------------------------------------------------------- *\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------- *\n*              EXLST                                                  *\n* ------------------------------------------------------------------- *\n         IFGEXLST AM=VTAM\n* ------------------------------------------------------------------- *\n*              NIB                                                    *\n* ------------------------------------------------------------------- *\n         ISTDNIB\n* ------------------------------------------------------------------- *\n*              PSA                                                    *\n* ------------------------------------------------------------------- *\n         CVT      DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              ASCB                                                   *\n* ------------------------------------------------------------------- *\n         IHAASCB  DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              SMF                                                    *\n* ------------------------------------------------------------------- *\n         IEESMCA\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         COPY ATTR\n         ABCODES\n         END   TSOMAIN\n./ ADD NAME=TSOMENU\n* ------------------------------------------------------------------- *\n*                                                                     *\n*    Define user commands.                                            *\n*                                                                     *\n*    Format of the MENUFUNC macro is\"                                 *\n*           MENUFUNC  command,'menu text',modname,DISPLAY=YES/no      *\n*                                                                     *\n*    The \"command\" may be up to 4 characters, alpha or numeric.       *\n*                                                                     *\n*    The \"menu text' may be up to 60 characters long and must be      *\n*    inclosed in single apostrophes.                                  *\n*                                                                     *\n*    \"modname\" is the name of the module that will be given control   *\n*    when \"command\" is entered.                                       *\n*                                                                     *\n*    DISPLAY= (YES is default) specifies whether or not the command   *\n*    will be displayed on the menu panel.                             *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOMENU    CSECT\nTSOMENU    AMODE 31\nTSOMENU    RMODE ANY\n           DC       Y($MENUA)         TOTAL NUMBER OF ENTRIES\n           DC       Y($MENUD)         NUMBER OF DISPLAYABLE ENTRIES\n           SPACE 1\n           MENUFUNC 1,'Display active regions',TSOACT\n           MENUFUNC ACT,,TSOACT,DISPLAY=NO\n           MENUFUNC 2,'Display APF list',TSOAPF\n           MENUFUNC APF,,TSOAPF,DISPLAY=NO\n           MENUFUNC 3,'Display IPL info',TSOIPL\n           MENUFUNC IPL,,TSOIPL,DISPLAY=NO\n           MENUFUNC 4,'Display link list',TSOLLA\n           MENUFUNC LLA,,TSOLLA,DISPLAY=NO\n           MENUFUNC 5,'Display sub systems',TSOSUB\n           MENUFUNC SUB,,TSOSUB,DISPLAY=NO\n           MENUFUNC 6,'Display UCB status',TSOUCB\n           MENUFUNC UCB,,TSOUCB,DISPLAY=NO\n           MENUFUNC 7,'Display SUTL users',TSOUSE\n           MENUFUNC USE,,TSOUSE,DISPLAY=NO\n           MENUFUNC USER,,TSOUSE,DISPLAY=NO\n           MENUFUNC DISPLAY=COUNT\n           COPY    MENUDSCT\n           END TSOMENU\n./ ADD NAME=TSOPQRY\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TSOPQRY - Obtain dynamic area data                    *\n*                                                                     *\n*  Function:                                                          *\n*   Determine characteristics of the dynamic area                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOPQRY  CSECT\nTSOPQRY  AMODE 31\nTSOPQRY  RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               COPY BASE ADDRESS\n         USING TSOPQRY,R12           DEFINE PROGRAM BASE\n         USING TSOCOMM,R11           DEFINE COMMON AREA BASE\n         B     PQRY0000\nMODID    DC    CL8'TSOPQRY'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nPQRY0000 DS    0H\n         L     R2,COMMDXDA           WORK AREA BASE ADDRESS\n         A     R2,DXDSTART           PLUS DISPLACEMENT TO OUR PORTION\n         ST    R13,4(R2)             CHAIN CALLER'S SAVE AREA\n         ST    R2,8(R13)             CHAIN OUR SAVE AREA\n         LR    R13,R2                COPY WORK AREA ADDRESS\n         USING DXDPQRY,R13           DEFINE WORK AREA BASE\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    PQRY0010              YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPQRY0010 DS    0H\n         ITRACE ID=ENTRY             ISSUING PQUERY\n         LA    R1,PQUERY             COMMAND'S ADDRESS\n         ST    R1,DXDSPF1            SET IN PARM LIST\n         LA    R1,COMMPANL           PANEL NAME'S ADDRESS\n         ST    R1,DXDSPF2            SET IN PARM LIST\n         LA    R1,CVDATA             AREA NAME WITHIN THE PANEL\n         ST    R1,DXDSPF3            SET IN PARM LIST\n         LA    R1,CVTYPE             AREA TYPE\n         ST    R1,DXDSPF4            SET IN PARM LIST\n         LA    R1,CVWIDTH            SCREEN DEPTH\n         ST    R1,DXDSPF5            SET IN PARM LIST\n         LA    R1,CVDEPTH            SCREEN WIDTH\n         ST    R1,DXDSPF6            SET IN PARM LIST\n         LA    R1,CVROW              SCREEN ROW\n         ST    R1,DXDSPF7            SET IN PARM LIST\n         LA    R1,CVCOL              SCREEN COLUMN\n         ST    R1,DXDSPF8            SET IN PARM LIST\n         OI    DXDSPF8,X'80'         FLAG 'END-OF-LIST'\n         LA    R1,DXDSPFP            PQUERY PARM LIST ADDRESS\n         L     R15,AISPLINK          SPF INTERFACE'S ADDRESS\n         BALR  R14,R15               ISSUE QUERY\n         LTR   R15,R15               PQUERY SUCCESSFUL?\n         BZ    EXIT0000              YES\n         ITRACE ID=PQRYFAIL,         PQUERY FAILED                     +\n               RDATA1=R15            .. PQUERY RETURN CODE\n         ABEND $U1018,DUMP,,USER\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDPQRY)            DISPLACEMENT TO WORK AREA\nPQUERY   DC    CL8'PQUERY'\nCVDATA   DC    CL8'VDATA'\nCVTYPE   DC    CL8'VTYPE'\nCVWIDTH  DC    CL8'VWIDTH'\nCVDEPTH  DC    CL8'VDEPTH'\nCVROW    DC    CL8'VROW'\nCVCOL    DC    CL8'VCOL'\n         LTORG\n* ------------------------------------------------------------------- *\n*        WORK AREAS                                                   *\n* ------------------------------------------------------------------- *\nDXDPQRY  DSECT\n         SUTLSAVE DSECT=NO\nDXDSPFP  DS    0A                    ISPF PARM LIST\nDXDSPF1  DS    A                     PARM 1 ADDRESS\nDXDSPF2  DS    A                     PARM 2 ADDRESS\nDXDSPF3  DS    A                     PARM 3 ADDRESS\nDXDSPF4  DS    A                     PARM 4 ADDRESS\nDXDSPF5  DS    A                     PARM 5 ADDRESS\nDXDSPF6  DS    A                     PARM 6 ADDRESS\nDXDSPF7  DS    A                     PARM 7 ADDRESS\nDXDSPF8  DS    A                     PARM 8 ADDRESS\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         TSOCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA  DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  TSOPQRY\n./ ADD NAME=TSOPRSE\n         COPY OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TSOPRSE   Parse command strings                       *\n*                                                                     *\n*  Purpose: Parse command strings.  This is written as a subroutine   *\n*           and does not use standard linkage.   It does not refer    *\n*           to any fields in a \"COMM\" area.                           *\n*                                                                     *\n*           Delimiters are blanks, =, periods, and commas.            *\n*           Delimiters are removed (they are not returned as a        *\n*           separate entity or with the preceding or following data). *\n*           Output length will not contain the length of the          *\n*           delimiters.  Leading blanks are removed, output length    *\n*           does not contain trailing blanks.                         *\n*                                                                     *\n*           Input strings are modified by this routine.  To parse a   *\n*           command completely, the caller should copy the initial    *\n*           command to the parse input, and then call this routine    *\n*           repetatively until the output length returned is zero.    *\n*                                                                     *\n*           Output will always be padded on the right with blanks.    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOPRSE  CSECT\nTSOPRSE  AMODE 31\nTSOPRSE  RMODE ANY\n         STM   R14,R12,12(R13)           SAVE REGISTERS\n         LR    R12,R15                   LOAD BASE\n         USING TSOPRSE,R12               DEFINE BASE\n         B     PRSE0000                  SKIP EYECATCHER\n         DC    CL8'TSOPRSE'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nPRSE0000 DS    0H\n         LR    R10,R1                    COPY PARM BLOCK ADDRESS\n         USING PARSEREQ,R10              DEFINE BASE\n         MVC   PARSEOUT,BLANKS           INITIALIZE OUTPUT AREA\n         LA    R1,PARSEOUT               INITIAL OUTPUT ADDRESS\n         SR    R2,R2                     INITIAL OUTPUT LENGTH\n         LA    R3,L'PARSEIN              MAX LENGTH\nPRSE0010 DS    0H\n         CLI   PARSEIN,C' '              BLANK?\n         BNE   PRSE0020                  NO\n         MVC   PARSEIN(L'PARSEIN-1),PARSEIN+1   SHIFT 1 TO LEFT\n         MVI   PARSEIN+L'PARSEIN-1,C' '  CLEAR ENDING BYTE\n         BCT   R3,PRSE0010               LOOP\n         B     PRSE0040                  NO DATA, OUTPUT LENGTH = ZERO\nPRSE0020 DS    0H\n         CLI   PARSEIN,C' '              ENDING BLANK?\n         BE    PRSE0040                  YES\n         CLI   PARSEIN,C'='              ENDING EQUAL SIGN?\n         BE    PRSE0030                  YES\n         CLI   PARSEIN,C'.'              IMBEDDED PERIOD?\n         BE    PRSE0030                  YES\n         CLI   PARSEIN,C','              ENDING COMMA?\n         BE    PRSE0030                  YES\n         MVC   0(1,R1),PARSEIN           COPY TO OUTPUT\n         MVC   PARSEIN(L'PARSEIN-1),PARSEIN+1   SHIFT 1 TO LEFT\n         MVI   PARSEIN+L'PARSEIN-1,C' '  CLEAR ENDING BYTE\n         LA    R1,1(R1)                  NEXT IN OUTPUT\n         LA    R2,1(R2)                  PLUS 1 TO LENGTH\n         BCT   R3,PRSE0020               LOOP\n         B     PRSE0040\nPRSE0030 DS    0H\n         MVC   PARSEIN(L'PARSEIN-1),PARSEIN+1   SHIFT 1 TO LEFT\n         MVI   PARSEIN+L'PARSEIN-1,C' '  CLEAR ENDING BYTE\nPRSE0040 DS    0H\n         STH   R2,PARSELEN               SET OUTPUT LENGTH\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         L     R14,12(R13)                RESTORE R14\n         LM    R0,R12,20(R13)             RESTORE REMAINING REGISTERS\n         BR    R14                        RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nBLANKS   DC    (L'PARSEOUT)C' '\n* ------------------------------------------------------------------- *\n*              PARAMETER BLOCK                                        *\n* ------------------------------------------------------------------- *\n         PARSEREQ DSECT=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  TSOPRSE\n./ ADD NAME=TSOSUB\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TSOSUB                                                *\n*                                                                     *\n*  Function:                                                          *\n*   Provide a display of the sub-systems.                             *\n*                                                                     *\n*  Sub-commands                                                       *\n*   None.                                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOSUB   CSECT\nTSOSUB   AMODE 31\nTSOSUB   RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               SET BASE REGISTER\n         USING TSOSUB,R12            DEFINE BASE\n         USING TSOCOMM,R11           DEFINE COMMON AREA BASE\n         B     SUB0000\nMODID    DC    CL8'TSOSUB'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nSUB0000  DS    0H\n         L     R2,COMMDXDA           WORK AREA BASE ADDRESS\n         A     R2,DXDSTART           PLUS DISPLACEMENT TO OUR PORTION\n         ST    R13,4(R2)             CHAIN CALLER'S SAVE AREA\n         ST    R2,8(R13)             CHAIN OUR SAVE AREA\n         LR    R13,R2                COPY WORK AREA ADDRESS\n         USING DXDSUB,R13            DEFINE WORK AREA BASE\n         MVC   ZCMD,COMMBLKS         CLEAR THE COMMAND\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    SUB0010               YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\nSUB0010  DS    0H\n         ITRACE ID=REQDATA           REQUEST DATA FROM STC\n         MVI   COMMVCMD,$VTAMSND     SET COMMAND (SEND)\n         L     R10,COMMIOA           I/O AREA ADDRESS\n         USING VTAMIO,R10            DEFINE BASE\n         MVI   VTAMFNC,$VTAMSUB      SET FUNCTION\n         LA    R1,SUB#-VTAMIO        LENGTH\n         STCM  R1,3,VTAMLEN          SET LENGTH\n         L     R15,AVTAM             VTAM MODULE ENTRY POINT\n         BALR  R14,R15               SEND REQUEST TO STC\n         MVI   COMMVCMD,$VTAMRCV     SET COMMAND\n         L     R15,AVTAM             VTAM MODULE ENTRY POINT\n         BALR  R14,R15               RECEIVE RESPONSE FROM STC\n* ------------------------------------------------------------------- *\n*              BUILD TEXT AREA FOR SYSDISP                            *\n* ------------------------------------------------------------------- *\n         SR    R7,R7                 CLEAR REGISTER\n         ICM   R7,3,SUB#             ANY SUBSYSTEMS RETURNED?\n         BZ    SUB0060               NO\n         ST    R7,COMMTXL            NUMBER OF TEXT LINES\nSUB0020  DS    0H\n         SR    R0,R0                 CLEAR REGISTER\n         LR    R1,R7                 COPY NUMBER OF NAMES\n         M     R0,LINELEN            TIMES LENGTH OF TEXT LINES\n         ST    R1,COMMTXSZ           SAVE SIZE OF TEXT STORAGE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR TEXT AREA     +\n               LV=(1),               .. TEXT AREA SIZE                 +\n               LOC=ANY               .. FROM ANY AREA\n         ST    R1,COMMTXA            TEXT STORAGE AREA ADDRESS\n         LR    R8,R1                 COPY TEXT AREA ADDRESS\n         USING DTL,R8                DEFINE BASE\n         LA    R9,SUBDATA            FIRST DATASET NAME\n         USING SSCT,R9               DEFINE BASE\n         CLC   VTAMRC,X0004          LIST TRUNCATED?\n         BNE   SUB0030               NO\n         MVC   COMMMSG(MSG01L),MSG01 SET MESSAGE\nSUB0030  DS    0H\n         MVC   DTL(DTLL),COMMBLKS    INITIALIZE DETAIL AREA\n         MVI   DTLATTR,$ATTRLOW      SET ATTRIBUTE\n         MVC   DTLNAME,SSCTSNAM      COPY SUBSYSTEM NAME\n         UNPK  DTLFLG1(3),SSCTFLG1(2)\n         MVZ   DTLFLG1,HEXZERO       CLEAR ZONES\n         TR    DTLFLG1,HEXCHAR       TRANSLATE TO PRINTABLE\n         MVI   DTLFLG1+2,C' '        RESTORE BLANK\n         UNPK  DTLSSID(3),SSCTSSID(2)\n         MVZ   DTLSSID,HEXZERO       CLEAR ZONES\n         TR    DTLSSID,HEXCHAR       TRANSLATE TO PRINTABLE\n         MVI   DTLSSID+2,C' '        RESTORE BLANK\n         UNPK  DTLSSVT(9),SSCTSSVT(5)\n         MVZ   DTLSSVT,HEXZERO       CLEAR ZONES\n         TR    DTLSSVT,HEXCHAR       TRANSLATE TO PRINTABLE\n         MVI   DTLSSVT+8,C' '        RESTORE BLANK\n         UNPK  DTLSUSE(9),SSCTSUSE(5)\n         MVZ   DTLSUSE,HEXZERO       CLEAR ZONES\n         TR    DTLSUSE,HEXCHAR       TRANSLATE TO PRINTABLE\n         MVI   DTLSUSE+8,C' '        RESTORE BLANK\n         UNPK  DTLSYN(9),SSCTSYN(5)\n         MVZ   DTLSYN,HEXZERO        CLEAR ZONES\n         TR    DTLSYN,HEXCHAR        TRANSLATE TO PRINTABLE\n         MVI   DTLSYN+8,C' '         RESTORE BLANK\n         LA    R9,SSCTSIZE(R9)       NEXT SUBSYSTEM\n         LA    R8,DTLL(R8)           NEXT OUTPUT AREA\n         BCT   R7,SUB0030            LOOP\n         MVC   COMMPANL,SUBPANL      SET PANEL NAME\n         MVC   COMMTXLL,LINELEN      SET LENGTH OF EACH LINE\n         XC    COMMTXO,COMMTXO       CLEAR OFFSET\n         XC    COMMTXRL,COMMTXRL     CLEAR RELATIVE LINE\nSUB0040  DS    0H\n         ITRACE ID=CALLDISP          CALLING DISP\n         NI    DISPFLAG,$NCURSOR     SCROLLING, NO CURSOR DATA\n         L     R15,ADISP             DISPLAY MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO SYSDISP\n         ITRACE ID=DISPRC,           RETURNED FROM DISP                +\n               RDATA1=R15            .. RETURN CODE FROM DISP\n         CLC   ZCMD,COMMBLKS         COMMAND ALL BLANK?\n         BNE   SUB0050               NO\n         LTR   R15,R15               RETURN CODE FROM DISPLAY ZERO?\n         BZ    SUB0040               YES.. REDISPLAY\nSUB0050  DS    0H\n         ITRACE ID=FREETEXT          FREEING TEXT STORAGE\n         L     R1,COMMTXA            TEXT STORAGE ADDRESS\n         L     R0,COMMTXSZ           TEXT STORAGE LENGTH\n         FREEMAIN RU,A=(1),LV=(0)    FREE TEXT STORAGE\n         XC    COMMTXA,COMMTXA       CLEAR TEXT STORAGE ADDRESS\n         XC    COMMTXSZ,COMMTXSZ     CLEAR TEXT STORAGE LENGTH\n         XC    COMMTXL,COMMTXL       CLEAR NUMBER OF LINES\n         B     EXIT0000              AND EXIT\n* ------------------------------------------------------------------- *\n*              NO DATASETS IN LINK LIST (SHOULD NEVER HAPPEN)         *\n* ------------------------------------------------------------------- *\nSUB0060  DS    0H\n         ITRACE ID=NOSUBSYS          NO SUBSYSTEMS\n         MVC   COMMMSG(MSG02L),MSG02 SET MESSAGE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS   0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDSUB)             DISPLACEMENT TO WORK AREA\nLINELEN  DC    A(DTLL)               LENGTH OF EACH DETAIL LINE\nX0004    DC    X'0004'\nHEXZERO  DC    8X'00'\nHEXCHAR  DC    C'0123456789ABCDEF'\nSUBPANL  DC    CL8'SUTLSUB'          PANEL NAME\nMSG01    DS    0C\n         DC    CL11'TSOSUB01I'\n         DC    C'Subsystem list is truncated'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'TSOSUB02I'\n         DC    C'There are subsystems!'\nMSG02L   EQU   *-MSG02\n         LTORG\n* ------------------------------------------------------------------- *\n*        WORK AREAS                                                   *\n* ------------------------------------------------------------------- *\nDXDSUB   DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*              TEXT AREA DETAIL                                       *\n* ------------------------------------------------------------------- *\nDTL      DSECT\nDTLATTR  DS    X               ATTRIBUTE CHARACTER\nDTLNAME  DS    CL4\n         DS    C\nDTLFLG1  DS    XL2\n         DS    X\nDTLSSID  DS    XL2\n         DS    X\nDTLSSVT  DS    XL8\n         DS    X\nDTLSUSE  DS    XL8\n         DS    X\nDTLSYN   DS    XL8\n         DS    X\nDTLL     EQU   *-DTL           LENGTH OF DETAIL LINE\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         TSOCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              LLA DATA WORK AREA                                     *\n* ------------------------------------------------------------------- *\n         VTAMIO DSECT=YES\n         ORG   VTAMDATA\nSUB#     DS    H\nSUBDATA  DS    0C\n*---------------------------------------------------------------------*\n*              PSA                                                    *\n*---------------------------------------------------------------------*\n         IHAPSA DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*              MVS CVT                                                *\n*---------------------------------------------------------------------*\n         CVT    DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IEFJSCVT\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         COPY ATTR\n         END  TSOSUB\n./ ADD NAME=TSOUCB\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TSOUCB                                                *\n*                                                                     *\n*  Function:                                                          *\n*   Display the status of UCBs.                                       *\n*                                                                     *\n*   Default is to dislpay tape devices.                               *\n*                                                                     *\n*  SUB-COMMANDS:                                                      *\n*                                                                     *\n*    TAPE      Only tape devices are to be displayed.                 *\n*    DASD      Only dasd devices are to be displayed.                 *\n*    DEV xxxx  Displays devices by device number.  \"xxxx\" is one to   *\n*              four hex digits.  Device numbers are always considered *\n*              to be FOUR characters long.  If you want to display    *\n*              devices 3C0-3CF, you could enter \"DEV 03C\".  If you    *\n*              want one specific device, like C02.. enter \"DEV 0C02\". *\n*                                                                     *\n* The data displayed is:                                              *\n*     Addr     Device address (device number).                        *\n*     Devt     Device type (3480, 3390, etc).                         *\n*     Status   Either ONLINE or OFFLINE.                              *\n*     Alo      Allocation status (yes or no).                         *\n*     Volser   Volume serial number (dasd and tape devices only).     *\n*     CHPID's  Channel paths attached to the devices.  Highlighted    *\n*              channel paths are online.                              *\n*     Last     Last channel path used to transfer data to the device. *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOUCB   CSECT\nTSOUCB   AMODE 31\nTSOUCB   RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               SET BASE\n         USING TSOUCB,R12            DEFINE PGM BASE\n         USING TSOCOMM,R11           DEFINE COMMON AREA BASE\n         B     UCB0000\nMODID    DC    CL8'TSOUCB'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nUCB0000  DS    0H\n         L     R15,COMMDXDA          WORK AREA BASE\n         A     R15,DXDSTART          PLUS DISPLACEMENT TO OUR PART\n         ST    R13,4(R15)            CHAIN CALLER'S SAVE AREA\n         ST    R15,8(R13)            CHAIN OUR SAVE AREA\n         LR    R13,R15               COPY WORK AREA ADDRESS\n         USING DXDUCB,R13            DEFINE WORK AREA BASE\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    UCB0010               YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\nUCB0010  DS    0H\n         MVI   VARCMD,$VARDEFA       SET COMMAND (DEFINE ALL)\n         LA    R1,SPFVARS            VARIALE CONTROL INFO ADDRESS\n         ST    R1,VARTBLE            SET ADDRESS\n         LA    R1,DXDARGT            ARGUEMENT TYPE\n         ST    R1,VARAREA            SET ADDRESS\n         LA    R1,VARREQ             PARM BLOCK ADDRESS\n         L     R15,AVARS             VARIABLE DELETE/DEFINE ENTRY POINT\n         BALR  R14,R15               LINK TO SYSVAR\n         L     R10,COMMIOA           I/O AREA ADDRESS\n         USING VTAMIO,R10            DEFINE BASE\n         MVI   UCBCLASS,$UCBTAPE     SET DEFAULT TO TAPE\n         MVC   DXDARGT,TAPE          SET DEFAULT DISPLAYED TYPE\n         MVC   DXDARG,COMMBLKS       CLEAR DEVICE ARGUEMENT\n         XC    COMMTXO,COMMTXO       INITIALIZE OFFSET\n         XC    COMMTXRL,COMMTXRL     INITIALIZE RELATIVE LINE\n         B     UCB0170               CHECK FOR AN INITIAL COMMAND\nUCB0020  DS    0H\n         XC    COMMTXO,COMMTXO       INITIALIZE OFFSET\n         XC    COMMTXRL,COMMTXRL     INITIALIZE RELATIVE LINE\nUCB0030  DS    0H\n         ITRACE ID=REQDATA\n         MVI   VTAMFNC,$VTAMUCB      SET FUNCTION\n         LA    R1,UCBDATA-VTAMIO     LENGTH\n         STH   R1,VTAMLEN            SET LENGTH\n         MVI   COMMVCMD,$VTAMSND     SET VTAM FUNCTION\n         L     R15,AVTAM             VTAM ENTRY POINT\n         BALR  R14,R15               SEND REQUEST TO STC\n         MVI   COMMVCMD,$VTAMRCV     SET COMMAND\n         L     R15,AVTAM             VTAM ENTRY POINT\n         BALR  R14,R15               RECEIVE RESPONSE FROM STC\n         ITRACE ID=BLDDATA\n         SR    R7,R7                 CLEAR REGISTER\n         ICM   R7,3,UCB#             NUMBER OF UCB'S\n         BZ    UCB0150               NO MATCHING UCB'S\n         CLC   VTAMRC,X0004          I/O AREA OVERFLOW?\n         BNE   UCB0040               NO\n         MVC   COMMMSG(MSG01L),MSG01 SET MESSAGE\nUCB0040  DS    0H\n         ST    R7,COMMTXL            SET NUMBER OF LINES\n         ITRACE ID=DXD#,                                               +\n               RDATA1=R7             .. NUMBER OF UCB'S\n         SR    R0,R0                 CLEAR REGISTER\n         LR    R1,R7                 COPY NUMBER OF LINES\n         M     R0,LINELEN            TIMES LENGTH PER LINE\n         ST    R1,COMMTXSZ           SAVE TEXT AREA SIZE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR TEXT AREA     +\n               LV=(1),               .. SIZE OF AREA                   +\n               LOC=ANY               .. FROM ANY AREA\n         ITRACE ID=TEXTAREA,         TEXT AREA ACQUIRED                +\n               RDATA1=R1,            .. AREA ADDRESS                   +\n               DATA2=COMMTXSZ        .. AREA SIZE\n         ST    R1,COMMTXA            SAVE TEXT STORAGE ADDRESS\n         LA    R8,UCBDATA            FIRST UCB IN DATA\n         USING UCBDATA,R8            DEFINE UCB BASE\n         LR    R6,R1                 COPY TEXT STORAGE ADDRESS\n         USING DTL,R6                DEFINE BASE\nUCB0050  DS    0H\n         MVC   DTL(DTLL),COMMBLKS    CLEAR DETAIL AREA\n         MVI   DTLUCBA,$ATTRLOW      SET UCB NAME ATTRIBUTE\n         UNPK  DTLDEVN(5),UCBSNBR(3) UNPACK DEVICE NUBER\n         MVZ   DTLDEVN,HEXZERO       CLEAR ZONES\n         TR    DTLDEVN,HEXCHAR       TRANSLATE TO PRINTABLE\n         MVI   DTLDEVN+4,C' '        RESTORE BLANK\n         LA    R1,DEVTABLE           FIRST KNOWN DEVICE TYPE\nUCB0060  DS    0H\n         CLI   0(R1),X'FF'           END OF TABLE?\n         BE    UCB0070               YES\n         CLC   UCBSTYPE,0(R1)        DEVICE LOCATED?\n         BE    UCB0070               YES\n         LA    R1,9(R1)              NEXT DEVICE TYPE\n         B     UCB0060               LOOP\nUCB0070  DS    0H\n         MVC   DTLDEVT,2(R1)         COPY DEVICE TYPE\n         MVC   DTLSTAT,ONLINE        ASSUME DEVICE IS ONLINE\n         TM    UCBSSTAT,UCBONLI      IS DEVICE ONLINE?\n         BO    UCB0080               YES\n         MVC   DTLSTAT,OFFLINE       DEVICE IS OFFINE\nUCB0080  DS    0H\n         MVC   DTLALLO,YES           ASSUME DEVICE IS ALLOCATED\n         TM    UCBSSTAT,UCBALOC      IS DEVICE ALLOCATED?\n         BO    UCB0090               YES\n         MVC   DTLALLO,NO            RESET ALLOCATED INDICATOR\nUCB0090  DS    0H\n         CLI   0(R1),X'20'           DASD UNIT?\n         BE    UCB0100               YES\n         CLI   0(R1),X'80'           TAPE UNIT?\n         BNE   UCB0110               NO\nUCB0100  DS    0H\n         MVC   DTLVOL,UCBSVOL        SET VOLSER\nUCB0110  DS    0H\n         LA    R1,X'80'              FIRST 'MASK' BIT\n         LA    R2,DTLCHP1A           FIRST ATTRIBUTE\n         LA    R3,UCBSCHP            FIRST CHPID\n         LA    R15,8                 NUMBER OF LOOPS\nUCB0120  DS    0H\n         MVI   0(R2),$ATTRLOW        LOW INTENSITY\n         EX    R1,TMCHPD             CORRESPONDING BYTE VALID?\n         BNO   UCB0140               NO\n         UNPK  1(3,R2),0(2,R3)       UNPACK CHPID NUMBER\n         MVZ   1(2,R2),HEXZERO       CLEAR THE ZONES\n         TR    1(2,R2),HEXCHAR       TRANSLATE TO PRINTABLE\n         MVI   3(R2),C' '            RESTORE BLANK\n         EX    R1,TMCHPO             IS THIS CHPID ONLINE?\n         BNO   UCB0130               NO\n         MVI   0(R2),$ATTRHI         CHANGE TO HIGH INTENSITY\nUCB0130  DS    0H\n         MVI   DTLCHPLA,$ATTRHI      LOW INTENSITY\n         EX    R1,TMCHPL             WAS THIS THE LAST CHPID USED?\n         BNO   UCB0140               NO\n         MVC   DTLCHPLN,1(R2)        COPY LAST USED CHPID NUMBER\nUCB0140  DS    0H\n         SRL   R1,1                  SHIFT MASK BIT\n         LA    R2,3(R2)              NEXT DETAIL AREA CHPID\n         LA    R3,1(R3)              NEXT CHPID\n         BCT   R15,UCB0120           LOOP\n         LA    R6,DTLL(R6)           NEXT LINE\n         LA    R8,UCBSL(R8)          NEXT UCB\n         BCT   R7,UCB0050            LOOP\n         B     UCB0160\nTMCHPD   TM    UCBSCHPD,0            TEST FOR DEFINED CHPID\nTMCHPO   TM    UCBSCHPO,0            TEST FOR ONLINE CHPID\nTMCHPL   TM    UCBSCHPL,0            TEST FOR LAST USED CHPID\n* ------------------------------------------------------------------- *\n*        No UCB's found that met criteria                             *\n* ------------------------------------------------------------------- *\nUCB0150  DS    0H\n         ITRACE ID=NODATA\n         MVC   COMMMSG(MSG03L),MSG03 SET MESSAGE\n         B     EXIT0000              AND EXIT\n* ------------------------------------------------------------------- *\n*        Display the panel                                            *\n* ------------------------------------------------------------------- *\nUCB0160  DS    0H\n         ITRACE ID=CALLDISP          CALLING DISP\n         MVC   COMMTXLL,LINELEN      SET LINE LENGTH\n         MVC   COMMPANL,UCBPANL      SET PANEL NAME\n         NI    COMMFLAG,255-$NSCROLL ALLOW SCROLLING\n         L     R15,ADISP             DISPLAY ENTRY POINT\n         BALR  R14,R15               LINK TO DISP\n         ITRACE ID=DISPRC,           RETURNED FROM DISP                +\n               RDATA1=R15            .. RETURN CODE\n         CH    R15,H8                RC = 8?\n         BE    EXIT0000              YES\n         CLC   ZCMD,COMMBLKS         ANY COMMAND?\n         BE    UCB0290               NO\nUCB0170  DS    0H\n         MVC   PARSEIN,ZCMD          COPY COMMAND\n         NI    DXDFLAG,255-$NEWPARM  RESET FLAG\nUCB0180  DS    0H\n         LA    R1,PARSEREQ           PARSER PARM LIST\n         L     R15,APRSE             PARSER ENTRY POINT\n         BALR  R14,R15               PARSE COMMAND\n         CLC   PARSEOUT,COMMBLKS     BLANK?\n         BE    UCB0280               YES\n         CLC   UCBCMD,PARSEOUT       UCB COMMAND?\n         BE    UCB0180               YES\n         CLC   DEVCMD,PARSEOUT       DEV COMMAND?\n         BE    UCB0230               YES\n         CLC   TAPECMD,PARSEOUT      TAPE COMMAND?\n         BE    UCB0260               YES\n         CLC   DASDCMD,PARSEOUT      DASD COMMAND?\n         BE    UCB0270               YES\n         L     R1,AMENU              MENU DATA ADDRESS\n         LH    R2,0(R1)              NUMBER OF ENTRIES\n         LA    R1,4(R1)              SKIP COUNTERS\n         USING MENUDSCT,R1\nUCB0190  DS    0H\n         CLC   MENUCMD,PARSEOUT      COMMAND FOUND?\n         BNE   UCB0200               NO\n         CLM   R12,15,MENUMOD        DOES THE ENTRY REFERENCE US?\n         BE    UCB0180               YES\n         B     EXIT0010              OTHERWISE EXIT\nUCB0200  DS    0H\n         TM    MENUFLAG,$MENUNON     DISPLAYABLE ENTRY?\n         BO    UCB0210               NO\n         LA    R1,MENUL(R1)          NEXT MENU ENTRY\n         B     UCB0220\nUCB0210  DS    0H\n         LA    R1,MENUDESC-MENUDSCT(R1)\nUCB0220  DS    0H\n         BCT   R2,UCB0190            CHECK NEXT ENTRY\n         MVC   COMMMSG(MSG05L),MSG05\n         OC    COMMTXA,COMMTXA       TEXT AREA PRESENT?\n         BZ    EXIT0010              NO\n         B     UCB0160               DISPLAY WITH MESSAGE\n* ------------------------------------------------------------------- *\n*        Process DEV commands                                         *\n* ------------------------------------------------------------------- *\nUCB0230  DS    0H\n         ITRACE ID=SPECDEV,          SPECIFIC DEVICE                   +\n               DATA1=PARSEIN         .. DEVICE REQUESTED\n         LA    R1,PARSEREQ           PARSER PARM LIST\n         L     R15,APRSE             PARSER ENTRY POINT\n         BALR  14,R15                PARSE DEVICE NUMBER\n         CLC   PARSEOUT,COMMBLKS     DEVICE NUMBER GIVEN?\n         BE    UCB0240               NO\n         CLC   PARSELEN,X0004        CUU TOO LONG?\n         BH    UCB0250               YES\n         MVC   DXDARGT,DEVNBR\n         MVC   DXDARG,PARSEOUT       COPY DEVICE NUMBER\n         MVC   UCBDEVN,DXDARG        COPY THE DEVICE NUMBER\n         NC    UCBDEVN,HEX1F         PREPARE FOR PACKING\n         TR    UCBDEVN,CHARHEX       TRANSLATE FOR PACKING\n         MVC   UCBDEVNL,PARSELEN     SET LENGTH\n         MVI   UCBCLASS,$UCBALL      ANY DEVICE CLASS\n         OI    DXDFLAG,$NEWPARM      SET FLAG\n         B     UCB0180               CHECK FOR MORE COMMANDS\nUCB0240  DS    0H\n         MVC   COMMMSG(MSG02L),MSG02 SET MESSAGE\n         OC    COMMTXA,COMMTXA       TEXT AREA PRESENT?\n         BZ    EXIT0000              NO.. DISPLAY MSG ON MENU\n         B     UCB0160               DISPLAY WITH MESSAGE\nUCB0250  DS    0H\n         MVC   COMMMSG(MSG04L),MSG04 SET MESSAGE\n         OC    COMMTXA,COMMTXA       TEXT AREA PRESENT?\n         BZ    EXIT0000              NO.. DISPLAY MSG ON MENU\n         B     UCB0160               DISPLAY WITH MESSAGE\n* ------------------------------------------------------------------- *\n*        Process TAPE commands                                        *\n* ------------------------------------------------------------------- *\nUCB0260  DS    0H\n         ITRACE ID=TAPE\n         MVC   DXDARGT,TAPE          TAPE DEVICES\n         MVC   DXDARG,COMMBLKS       NO OTHER ARGUEMENT\n         MVI   UCBCLASS,$UCBTAPE     SET ARGUEMENT TYPE\n         OI    DXDFLAG,$NEWPARM      SET FLAG\n         B     UCB0180               CHECK FOR MORE COMMANDS\n* ------------------------------------------------------------------- *\n*        Process DASD commands                                        *\n* ------------------------------------------------------------------- *\nUCB0270  DS    0H\n         ITRACE ID=DASD\n         MVC   DXDARGT,DASD          DASD DEVICES\n         MVC   DXDARG,COMMBLKS       NO OTHER ARGUEMENT\n         MVI   UCBCLASS,$UCBDASD     SET ARGUEMENT TYPE\n         B     UCB0180               CHECK FOR MORE COMMANDS\n* ------------------------------------------------------------------- *\n*        Clear command                                                *\n* ------------------------------------------------------------------- *\nUCB0280  DS    0H\n         ITRACE ID=CLEARCMD\n         MVC   ZCMD,COMMBLKS         CLEAR COMMAND\nUCB0290  DS    0H\n         ICM   R1,15,COMMTXA         TEXT ADDRESS\n         BZ    UCB0300               NO TEXT\n         ITRACE ID=FREETEXT\n         L     R0,COMMTXSZ           TEXT AREA SIZE\n         FREEMAIN RU,A=(1),LV=(0)    FREE TEXT AREA\n         XC    COMMTXA,COMMTXA       CLEAR ADDRESS\n         XC    COMMTXSZ,COMMTXSZ     CLEAR LENGTH\nUCB0300  DS    0H\n         TM    DXDFLAG,$NEWPARM      NEW PARMS?\n         BO    UCB0020               RESET OFFSET AND LINE NUMBER\n         B     UCB0030               DISPLAY WITH SAME OFFSET\n* ------------------------------------------------------------------- *\n*        Exit                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         MVC   ZCMD,COMMBLKS         CLEAR COMMAND\nEXIT0010 DS    0H\n         ICM   R1,15,COMMTXA         TEXT AREA ADDRESS\n         BZ    EXIT0020              NO TEXT\n         L     R0,COMMTXSZ           TEXT AREA SIZE\n         FREEMAIN RU,A=(1),LV=(0)    FREE TEXT AREA\n         XC    COMMTXA,COMMTXA       CLEAR ADDRESS\n         XC    COMMTXSZ,COMMTXSZ     CLEAR LENGTH\nEXIT0020 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDUCB)             DISPLACEMENT TO WORK AREA\nLINELEN  DC    A(DTLL)               LENGTH OF DETAIL LINE\nH8       DC    H'8'\nHEXZERO  DC    8X'00'\nHEX1F    DC    8X'1F'\n         SPACE 1\nCHARHEX  DC    X'000A0B0C0D0E0F000000000000000000'\n         DC    X'00010203040506070809000000000000'\n         SPACE 1\nX0004    DC    X'0004'\nHEXCHAR  DC    C'0123456789ABCDEF'\nUCBCMD   DC    C'UCB '\nDEVCMD   DC    C'DEV '\nTAPECMD  DC    C'TAPE '\nDASDCMD  DC    C'DASD '\nYES      DC    CL3'YES'\nNO       DC    CL3'NO'\nONLINE   DC    CL7'ONLINE'\nOFFLINE  DC    CL7'OFFLINE'\nDEVNBR   DC    CL15'DEVICE NUMBER'\nDASD     DC    CL15'DASD'\nTAPE     DC    CL15'TAPE'\nUCBPANL  DC    CL8'SUTLUCB'\n         VDEF  BASE=DXDARGT\nSPFVARS  DS    0C\n         VDEF  NAME=ARGT,                                              +\n               DATA=DXDARGT,                                           +\n               LENGTH=15,                                              +\n               FORM=CHAR\n         VDEF  NAME=ARG,                                               +\n               DATA=DXDARG,                                            +\n               LENGTH=4,                                               +\n               FORM=CHAR\n         DC    X'FF'\nMSG01    DC    CL11'TSOUCB01I'\n         DC    C'I/O area overflow, some UCB''s not displayed'\nMSG01L   EQU   *-MSG01\nMSG02    DC    CL11'TSOUCB02E'\n         DC    C'Device number not given'\nMSG02L   EQU   *-MSG02\nMSG03    DC    CL11'TSOUCB03E'\n         DC    C'DEV number or device type not found'\nMSG03L   EQU   *-MSG03\nMSG04    DC    CL11'TSOUCB04E'\n         DC    C'DEV number too long'\nMSG04L   EQU   *-MSG04\nMSG05    DC    CL11'TSOUCB05E'\n         DC    C'Invalid UCB subcommand'\nMSG05L   EQU   *-MSG05\nDEVTABLE DS    0C\n         DC    XL2'0809',CL7'3211   '\n         DC    XL2'080B',CL7'3203   '\n         DC    XL2'080E',CL7'3800   '\n         DC    XL2'080F',CL7'AFP1   '\n         DC    XL2'0811',CL7'4245   '\n         DC    XL2'1009',CL7'3277   '\n         DC    XL2'2007',CL7'2305-2 '\n         DC    XL2'2009',CL7'3330   '\n         DC    XL2'200A',CL7'3340   '\n         DC    XL2'200B',CL7'3350   '\n         DC    XL2'200C',CL7'3375   '\n         DC    XL2'200D',CL7'3330-11'\n         DC    XL2'200E',CL7'3380   '\n         DC    XL2'200F',CL7'3390   '\n         DC    XL2'40F1',CL7'3791L  '\n         DC    XL2'4015',CL7'3705CA1'\n         DC    XL2'4100',CL7'CTCA   '\n         DC    XL2'8003',CL7'3420   '\n         DC    XL2'8080',CL7'3480   '\n         DC    XL2'8081',CL7'3490   '\n         DC    X'FFFF',CL7'UNKNOWN'\n         LTORG\n* ------------------------------------------------------------------- *\n*        WORK AREAS                                                   *\n* ------------------------------------------------------------------- *\nDXDUCB   DSECT\n         SUTLSAVE DSECT=NO\n         VARREQ DSECT=NO\n         PARSEREQ DSECT=NO\nDXDARGT  DS    CL15\nDXDARG   DS    CL4\nDXDARGWK DS    CL4\nDXDFLAG  DS    X\n$NEWPARM EQU   X'80'\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         TSOCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VTAMIO DSECT=YES\n         ORG   VTAMDATA\n         COPY  UCBDATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  MENUDSCT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDTL      DSECT\nDTLUCBA  DS    X               UCB ATTRIBUTE\nDTLDEVN  DS    CL4             DEVICE NAME\n         DS    C\nDTLDEVT  DS    CL7             DEVICE TYPE\n         DS    C\nDTLSTAT  DS    CL7             STATUS\n         DS    C\nDTLALLO  DS    CL3             ALLOCATION STATUS\n         DS    C\nDTLVOL   DS    CL6             VOLSER\n         DS    C\nDTLCHP1A DS    X               CHPID 1 ATTRIBUTE\nDTLCHP1I DS    CL2             CHPID 1 ID\nDTLCHP2A DS    X               CHPID 2 ATTRIBUTE\nDTLCHP2I DS    CL2             CHPID 2 ID\nDTLCHP3A DS    X               CHPID 3 ATTRIBUTE\nDTLCHP3I DS    CL2             CHPID 3 ID\nDTLCHP4A DS    X               CHPID 4 ATTRIBUTE\nDTLCHP4I DS    CL2             CHPID 4 ID\nDTLCHP5A DS    X               CHPID 5 ATTRIBUTE\nDTLCHP5I DS    CL2             CHPID 5 ID\nDTLCHP6A DS    X               CHPID 6 ATTRIBUTE\nDTLCHP6I DS    CL2             CHPID 6 ID\nDTLCHP7A DS    X               CHPID 7 ATTRIBUTE\nDTLCHP7I DS    CL2             CHPID 7 ID\nDTLCHP8A DS    X               CHPID 8 ATTRIBUTE\nDTLCHP8I DS    CL2             CHPID 8 ID\nDTLCHPLA DS    X               LAST USED CHPID ATTRIBUTE\nDTLCHPLN DS    CL2             LAST CHPID USED\n         DS    C\nDTLL     EQU   *-DTL\n*---------------------------------------------------------------------*\n*              MVS PSA                                                *\n*---------------------------------------------------------------------*\n         IHAPSA DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*              UNIT CONTROL BLOCKS                                    *\n*---------------------------------------------------------------------*\n         IEFUCBOB LIST=YES\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         COPY ATTR\n         ABCODES\n         END  TSOUCB\n./ ADD NAME=TSOUSE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TSOUSE - Display active SUTL users                    *\n*                                                                     *\n*  Sub-commands:                                                      *\n*   None.                                                             *\n*                                                                     *\n*                                                                     *\n*  Displayed data is:                                                 *\n*   USERID       User's TSO id.                                       *\n*   LU           User's VTAM logical unit (LU) name.                  *\n*   CID          VTAM conversation id.                                *\n*   FUNC         Last SUTL function the user has used.                *\n*   VTAM         Last VTAM function the STC has performed with the    *\n*                TSO user (either RECEIVE or SEND).                   *\n*   SENDS        Number of sends/number of bytes sent to the TSO user.*\n*   RECV's       Number of receives/number of bytes received from     *\n*                the TSO user.                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOUSE   CSECT\nTSOUSE   AMODE 31\nTSOUSE   RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               SET BASE REGISTER\n         USING TSOUSE,R12            DEFINE BASE\n         USING TSOCOMM,R11           DEFINE COMMON AREA BASE\n         B     USE0000\nMODID    DC    CL8'TSOUSE'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nUSE0000  DS    0H\n         L     R2,COMMDXDA           WORK AREA BASE ADDRESS\n         A     R2,DXDSTART           PLUS DISPLACEMENT TO OUR PORTION\n         ST    R13,4(R2)             CHAIN CALLER'S SAVE AREA\n         ST    R2,8(R13)             CHAIN OUR SAVE AREA\n         LR    R13,R2                COPY WORK AREA ADDRESS\n         USING DXDUSE,R13            DEFINE WORK AREA BASE\n         MVC   ZCMD,COMMBLKS         CLEAR THE COMMAND\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    USE0010               YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\nUSE0010  DS    0H\n         ITRACE ID=REQDATA           REQUEST DATA FROM STC\n         MVI   COMMVCMD,$VTAMSND     SET COMMAND (SEND)\n         L     R10,COMMIOA           I/O AREA ADDRESS\n         USING VTAMIO,R10            DEFINE BASE\n         MVI   VTAMFNC,$VTAMUSE      SET FUNCTION\n         LA    R1,USERDATA-VTAMIO    LENGTH\n         STCM  R1,3,VTAMLEN          SET LENGTH\n         L     R15,AVTAM             VTAM MODULE ENTRY POINT\n         BALR  R14,R15               SEND REQUEST TO STC\n         MVI   COMMVCMD,$VTAMRCV     SET COMMAND\n         L     R15,AVTAM             VTAM MODULE ENTRY POINT\n         BALR  R14,R15               RECEIVE RESPONSE FROM STC\n* ------------------------------------------------------------------- *\n*              BUILD TEXT AREA FOR SYSDISP                            *\n* ------------------------------------------------------------------- *\n         SR    R7,R7                 CLEAR REGISTER\n         ICM   R7,3,USER#            ANY USERS RETURNED?\n         BZ    USE0100               NO\n         ST    R7,COMMTXL            NUMBER OF TEXT LINES\nUSE0020  DS    0H\n         SR    R0,R0                 CLEAR REGISTER\n         LR    R1,R7                 COPY NUMBER OF NAMES\n         M     R0,LINELEN            LENGTH OF TEXT AREA STORAGE\n         ST    R1,COMMTXSZ           SAVE OF TEXT STORAGE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR TEXT AREA     +\n               LV=(1),               .. TEXT AREA SIZE                 +\n               LOC=ANY               .. FROM ANY AREA\n         ST    R1,COMMTXA            TEXT STORAGE AREA ADDRESS\n         LR    R8,R1                 COPY TEXT AREA ADDRESS\n         USING DTL,R8                DEFINE BASE\n         LA    R9,USERDATA           FIRST USER\n         CLC   VTAMRC,X0004          LIST TRUNCATED?\n         BNE   USE0030               NO\n         MVC   COMMMSG(MSG01L),MSG01 SET MESSAGE\nUSE0030  DS    0H\n         MVC   DTL(DTLL),COMMBLKS    INITIALIZE AREA\n         MVI   DTLATTR,$ATTRLOW      SET ATTRIBUTE\n         MVC   DTLID,USERID-USERBLOK(R9)\n         MVC   DTLLU,USERLU-USERBLOK(R9)\n         UNPK  DTLCID(9),USERCID-USERBLOK(5,R9)\n         MVZ   DTLCID,HEXZERO        CLEAR ZONES\n         TR    DTLCID,HEXCHAR        TRANSLATE TO PRINTABLE\n         MVI   DTLCID+8,C' '         RESTORE BLANK\n         LA    R1,FNCTABLE           FUNCTION TABLE ADDRESS\n         USING FNCDSECT,R1           DEFINE BASE\nUSE0040  DS    0H\n         CLI   FNCFNC,X'FF'          END OF TABLE?\n         BE    USE0050               YES\n         CLC   FNCFNC,USERIO-USERBLOK(R9)\n         BE    USE0050               FOUND IT\n         LA    R1,FNCL(R1)           NEXT FUNCTION\n         B     USE0040               LOOP\nUSE0050  DS    0H\n         MVC   DTLFUNC,FNCNAME       SET FUNCTION NAME\n         CLI   USERVCMD-USERBLOK(R9),$USERRCV     RECEIVE PENDING?\n         BE    USE0060               YES\n         CLI   USERVCMD-USERBLOK(R9),$USERSND     SEND PENDING?\n         BE    USE0070\n         B     USE0080               NO VTAM FUNCTION PENDING\nUSE0060  DS    0H\n         MVC   DTLVTAM,RECEIVE       VTAM FUNCTION IS 'RECEIVE'\n         B     USE0080\nUSE0070  DS    0H\n         MVC   DTLVTAM,SEND          VTAM FUNCTION IS 'SEND'\nUSE0080  DS    0H\n         L     R0,USERSNDC-USERBLOK(R9)\n         CVD   R0,DXDDWRD            CONVERT TO DECIMAL\n         MVC   DTLSNDC,EDWD1         SET EDIT WORD\n         ED    DTLSNDC,DXDDWRD+3     EDIT NUMBER OF SENDS\n         L     R0,USERSNDL-USERBLOK(R9)\n         CVD   R0,DXDDWRD            CONVER TO DECIMAL\n         MVC   DTLSNDL,EDWD1         SET EDIT WORD\n         ED    DTLSNDL,DXDDWRD+3     EDIT LENGTH SENT\n         L     R0,USERRCVC-USERBLOK(R9)\n         CVD   R0,DXDDWRD            CONVERT TO DECIMAL\n         MVC   DTLRCVC,EDWD1         SET EDIT WORD\n         ED    DTLRCVC,DXDDWRD+3     EDIT NUMBER OF RECEIVES\n         L     R0,USERRCVL-USERBLOK(R9)\n         CVD   R0,DXDDWRD            CONVER TO DECIMAL\n         MVC   DTLRCVL,EDWD1         SET EDIT WORD\n         ED    DTLRCVL,DXDDWRD+3     EDIT LENGTH RECEIVED\n         LA    R8,DTLL(R8)           NEXT DETAIL AREA\n         LA    R9,USERL(R9)          NEXT USER\n         BCT   R7,USE0030            LOOP\n         MVC   COMMPANL,USEPANL      SET PANEL NAME\n         MVC   COMMTXLL,LINELEN      SET LENGTH OF EACH LINE\n         XC    COMMTXO,COMMTXO       CLEAR OFFSET\n         XC    COMMTXRL,COMMTXRL     CLEAR RELATIVE LINE\n         ITRACE ID=CALLDISP          CALLING DISP\n         NI    DISPFLAG,$NCURSOR     SCROLLING, NO CURSOR DATA\n         L     R15,ADISP             DISPLAY MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO SYSDISP\n         ITRACE ID=DISPRC,           RETURNED FROM DISP                +\n               RDATA1=R15            .. RETURN CODE FROM DISP\n         CLC   ZCMD,COMMBLKS         COMMAND ALL BLANK?\n         BNE   USE0090               NO\n         LTR   R15,R15               RETURN CODE FROM DISPLAY ZERO?\n         BZ    USE0010               YES.. REDISPLAY\nUSE0090  DS    0H\n         ITRACE ID=FREETEXT          FREEING TEXT STORAGE\n         L     R1,COMMTXA            TEXT STORAGE ADDRESS\n         L     R0,COMMTXSZ           TEXT STORAGE LENGTH\n         FREEMAIN RU,A=(1),LV=(0)    FREE TEXT STORAGE\n         XC    COMMTXA,COMMTXA       CLEAR TEXT STORAGE ADDRESS\n         XC    COMMTXSZ,COMMTXSZ     CLEAR TEXT STORAGE LENGTH\n         XC    COMMTXL,COMMTXL       CLEAR NUMBER OF LINES\n         B     EXIT0000              AND EXIT\n* ------------------------------------------------------------------- *\n*              NO USERS (SHOULD NEVER HAPPEN)                         *\n* ------------------------------------------------------------------- *\nUSE0100  DS    0H\n         ITRACE ID=NOUSERS           NO USERS\n         MVC   COMMMSG(MSG02L),MSG02 SET MESSAGE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS   0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDUSE)             DISPLACEMENT TO WORK AREA\nLINELEN  DC    A(DTLL)               LENGTH OF EACH DETAIL LINE\nEDWD1    DC    X'40202020202020202021'\nHEXZERO  DC    8X'00'\nX0004    DC    X'0004'\nHEXCHAR  DC    C'0123456789ABCDEF'\nRECEIVE  DC    CL8'RECEIVE'\nSEND     DC    CL8'SEND'\nUSEPANL  DC    CL8'SUTLUSE'          PANEL NAME\nMSG01    DS    0C\n         DC    CL11'TSOUSE01I'\n         DC    C'User list truncated'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'TSOUSE02I'\n         DC    C'There are no users!'\nMSG02L   EQU   *-MSG02\n         SPACE 1\nFNCTABLE DS    0C\n         DC    AL1($VTAMSID),CL4'SID'\n         DC    AL1($VTAMACT),CL4'ACT'\n         DC    AL1($VTAMAPF),CL4'APF'\n         DC    AL1($VTAMIPL),CL4'IPL'\n         DC    AL1($VTAMLLA),CL4'LLA'\n         DC    AL1($VTAMSUB),CL4'SUB'\n         DC    AL1($VTAMUCB),CL4'UCB'\n         DC    AL1($VTAMUSE),CL4'USE'\n         DC    X'FF',CL4'UNKN'\n         LTORG\n* ------------------------------------------------------------------- *\n*        WORK AREAS                                                   *\n* ------------------------------------------------------------------- *\nDXDUSE   DSECT\n         SUTLSAVE DSECT=NO\nDXDDWRD  DS    D\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFNCDSECT DSECT\nFNCFNC   DS    X\nFNCNAME  DS    CL4\nFNCL     EQU   *-FNCDSECT\n* ------------------------------------------------------------------- *\n*              TEXT AREA DETAIL                                       *\n* ------------------------------------------------------------------- *\nDTL      DSECT\nDTLATTR  DS    X               ATTRIBUTE CHARACTER\nDTLID    DS    CL8             USER ID\nDTLLU    DS    CL8             VTAM LU\n         DS    C\nDTLCID   DS    CL8\n         DS    X\nDTLFUNC  DS    CL4\n         DS    X\nDTLVTAM  DS    CL8\nDTLSNDC  DS    CL10\nDTLSNDL  DS    CL10\nDTLRCVC  DS    CL10\nDTLRCVL  DS    CL10\nDTLL     EQU   *-DTL           LENGTH OF DETAIL LINE\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         TSOCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              VTAM I/O AREA                                          *\n* ------------------------------------------------------------------- *\n         VTAMIO DSECT=YES\n         ORG   VTAMDATA\nUSER#    DS    H\nUSERDATA DS    0C\n*---------------------------------------------------------------------*\n*              PSA                                                    *\n*---------------------------------------------------------------------*\n         IHAPSA DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*              MVS CVT                                                *\n*---------------------------------------------------------------------*\n         CVT    DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         COPY ATTR\n         END  TSOUSE\n./ ADD NAME=TSOVARS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TSOVARS                                               *\n*                                                                     *\n*  Define or delete SPF variables.                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOVARS  CSECT\nTSOVARS  AMODE 31\nTSOVARS  RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               SET BASE REGISTER\n         USING TSOVARS,R12           DEFINE PROGRAM BASE\n         USING TSOCOMM,R11           DEFINE COMMON AREA BASE\n         B     VARS0000\nMODID    DC    CL8'TSOVARS'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nVARS0000 DS    0H\n         LR    R9,R1                 SAVE PARM LIST ADDRESS\n         USING VARREQ,R9             DEFINE BASE\n         L     R2,COMMDXDA           WORK AREA BASE\n         A     R2,DXDSTART           PLUS DISPLACEMENT TO OUR PORTION\n         ST    R13,4(R2)             CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R2,8(R13)             CHAIN OUR AREA TO CALLER'S\n         LR    R13,R2                SET WORK AREA BASE\n         USING DXDVARS,R13           DEFINE WORK AREA BASE\n         MVC   DXDID,MODID           IDENTIFY AREA\n         ITRACE ID=ENTRY,            TRACE ENTRY                       +\n               DATA1=VARCMD          .. SAVE THE COMMAND\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVAR0010  DS    0H\n         CLI   VARCMD,$VARDEFA       DEFINE ALL VARIABLES?\n         BE    VAR0100               YES\n         CLI   VARCMD,$VARDEFS       DEFINE SPECIFIC VARIABLES?\n         BE    VAR0100               YES\n         CLI   VARCMD,$VARDEL        DELETE VARIABLE?\n         BE    VAR0200               YES\n         CLI   VARCMD,$VAREOJ        DELETE ALL VARIABLES?\n         BE    VAR0300               YES\n         ITRACE ID=BADCMD\n         ABEND $U1009,DUMP,,USER     BAD COMMAND\n* ------------------------------------------------------------------- *\n*        PROCESS DEFINE COMMANDS                                      *\n* ------------------------------------------------------------------- *\nVAR0100  DS    0H\n         LA    R1,VDEFINE            COMMAND'S ADDRESS\n         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST\n         L     R8,VARIDS             LIST OF ID'S\n         LH    R7,VARNBR             NUMBER OF ID'S\n         ITRACE ID=DEFINE,           DEFINE VARIABLES                  +\n               RDATA1=R8,            .. FIRST VARIABLE ID              +\n               RDATA2=R7             .. NUMBER OF VARIABLES\n         CLI   VARCMD,$VARDEFS       DEFINE SPECIFIC VARIABLES?\n         BE    VAR0110               YES\n         L     R6,VARTBLE            FIRST VARIABLE\n         B     VAR0120               ENTER LOOP\nVAR0110  DS    0H\n         BAL   R15,LOC0000           LOCATE VARIABLE\nVAR0120  DS    0H\n         USING VARDSECT,R6           DEFINE BASE\n         LA    R1,VARNAME            VARIABLE'S NAME\n         ST    R1,DXDSPF2            SET NAME'S ADDRESS IN PARM LIST\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,3,VARDISP          DISPLACEMENT TO DATA IN TSOCOMM\n         A     R1,VARAREA            PLUS BASE ADDRESS\n         ST    R1,DXDSPF3            SET ADDRESS IN PARM LIST\n         LA    R1,VARFORM            DATA FORMAT\n         ST    R1,DXDSPF4            SET ADDRESS IN PARM LIST\n         LA    R1,VARLEN             VARIABLE LENGTH\n         ST    R1,DXDSPF5            SET ADDRESS IN PARM LIST\n         OI    DXDSPF5,X'80'         SET END-OF-LIST\n         ITRACE ID=VDEF,             DEFINING A VARIABLE               +\n               DATA1=VARNAME,        .. VARIABLE'S NAME                +\n               DATA2=DXDSPF3         .. ADDRESS OF DATA\n         LA    R1,DXDSPFP            SPF PARM LIST ADDRESS\n         L     R15,AISPLINK          SPF LINK ENTRY POINT ADDRESS\n         BALR  R14,R15               LINK TO SPF\n         LTR   R15,R15               VDEFINE SUCCESSFUL?\n         BNZ   ERR0020               NO\nVAR0130  DS    0H\n         CLI   VARCMD,$VARDEFA       DEFINE ALL VARIABLES?\n         BE    VAR0140               YES\n         LA    R8,2(R8)              NEXT VARIABLE ID\n         BCT   R7,VAR0110            LOOP\nVAR0140  DS    0H\n         LA    R6,VARL(R6)           NEXT VARIABLE\n         CLI   0(R6),X'FF'           END OF TABLE?\n         BNE   VAR0120               NO\n         B     EXIT0000              ALL PROCESSED\n* ------------------------------------------------------------------- *\n*        PROCESS DELETE COMMANDS                                      *\n* ------------------------------------------------------------------- *\nVAR0200  DS    0H\n         LA    R1,VDELETE            COMMAND'S ADDRESS\n         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST\n         L     R8,VARIDS             LIST OF ID'S\n         LH    R7,VARNBR             NUMBER OF ID'S\n         ITRACE ID=DELETE,           DEFINE VARIABLES                  +\n               RDATA1=R8,            .. FIRST VARIABLE ID              +\n               RDATA2=R7             .. NUMBER OF VARIABLES\nVAR0210  DS    0H\n         BAL   R15,LOC0000           LOCATE VARIABLE\n         ST    R6,DXDSPF2            SET VARIABLE NAME ADDRESS\n         OI    DXDSPF2,X'80'         FLAG END-OF-LIST\n         ITRACE ID=DELETE,           DELETING A VARIABLE               +\n               DATA1=VARNAME         .. VARIABLE NAME\n         LA    R1,DXDSPFP            PARM LIST'S ADDRESS\n         L     R15,AISPLINK          SPF ENTRY POINT\n         BALR  R14,R15               LINK TO SPF\n         LTR   R15,R15               VDELETE SUCCESSFUL?\n         BNZ   ERR0030               NO\n         LA    R8,2(R8)              NEXT VARIABLE ID\n         BCT   R7,VAR0210            PROCESS NEXT VARIABLE\n         B     EXIT0000              EXIT\n* ------------------------------------------------------------------- *\n*        PROCESS END-OF-JOB CLEAN UP                                  *\n* ------------------------------------------------------------------- *\nVAR0300  DS    0H\n         ITRACE ID=EOJ               DELETING ALL VARIABLES\n         LA    R1,VDELETE            COMMAND'S ADDRESS\n         ST    R1,DXDSPF1            SET ADDRESS IN PARM LIST\n         L     R6,VARTBLE            START WITH FIRST VARIABLE\nVAR0310  DS    0H\n         CLI   0(R6),X'FF'           END OF TABLE?\n         BE    EXIT0000              YES\n         ST    R6,DXDSPF2            SET VARIABLE NAME ADDRESS\n         OI    DXDSPF2,X'80'         FLAG END-OF-LIST\n         ITRACE ID=EOJDEL,           DELETING A VARIABLE               +\n               DATA1=VARNAME         .. VARIABLE NAME\n         LA    R1,DXDSPFP            PARM LIST'S ADDRESS\n         L     R15,AISPLINK          SPF ENTRY POINT\n         BALR  R14,R15               LINK TO SPF\n         LTR   R15,R15               VDELETE SUCCESSFUL?\n         BNZ   ERR0030               NO\n         LA    R6,VARL(R6)           NEXT VARIABLE\n         B     VAR0310               PROCESS ALL VARIABLES\n* ------------------------------------------------------------------- *\n*        LOCATE VARIABLES IN VARIABLE TABLE                           *\n* ------------------------------------------------------------------- *\nLOC0000  DS    0H\n         L     R6,VARTBLE            FIRST VARIABLE\nLOC0010  DS    0H\n         CLI   0(R6),X'FF'           END OF TABLE?\n         BE    ERR0010               YES.. INVALID VARIABLE ID\n         CLC   VARID,0(R8)           VARIABLE LOCATED?\n         BE    LOC0020               YES\n         LA    R6,VARL(R6)           NEXT VARIABLE\n         B     LOC0010               LOOP\nLOC0020  DS    0H\n         BR    R15                   RETURN\n* ------------------------------------------------------------------- *\n*        ERROR ROUTINES                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=NOTFOUND\n         ABEND $U1010,DUMP,,USER\nERR0020  DS    0H\n         ITRACE ID=VDEFFAIL,                                           +\n               RDATA1=R15\n         ABEND $U1011,DUMP,,USER\nERR0030  DS    0H\n         ITRACE ID=VDELFAIL,                                           +\n               RDATA1=R15\n         ABEND $U1012,DUMP,,USER\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDVARS)\nVDEFINE  DC    CL8'VDEFINE'\nVDELETE  DC    CL8'VDELETE'\n         LTORG\n* ------------------------------------------------------------------- *\n*        WORK AREA                                                    *\n* ------------------------------------------------------------------- *\nDXDVARS  DSECT\n         SUTLSAVE DSECT=NO\nDXDSPFP  DS    0A                    ISPF PARM LIST\nDXDSPF1  DS    A                     PARM 1 ADDRESS\nDXDSPF2  DS    A                     PARM 2 ADDRESS\nDXDSPF3  DS    A                     PARM 3 ADDRESS\nDXDSPF4  DS    A                     PARM 4 ADDRESS\nDXDSPF5  DS    A                     PARM 5 ADDRESS\n* ------------------------------------------------------------------- *\n*              COMMON DATA                                            *\n* ------------------------------------------------------------------- *\n         TSOCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              VARIABLE TABLE ENTRIES                                 *\n* ------------------------------------------------------------------- *\n         COPY  VARDSECT\n* ------------------------------------------------------------------- *\n*              INTERFACE BLOCK                                        *\n* ------------------------------------------------------------------- *\n         VARREQ   DSECT=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA  DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  TSOVARS\n./ ADD NAME=TSOVTAM\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TSOVTAM                                               *\n*                                                                     *\n*  Perform VTAM functions.                                            *\n*                                                                     *\n*  At entry:                                                          *\n*             R15  Entry point address                                *\n*             R14  Return address                                     *\n*             R13  Register save area address                         *\n*             R12  Calling module's base address                      *\n*             R11  Common area address                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOVTAM  CSECT\nTSOVTAM  AMODE 31\nTSOVTAM  RMODE ANY\n         USING TSOVTAM,R12           DEFINE BASE\n         USING TSOCOMM,R11           DEFINE COMMON AREA BASE\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               COPY BASE\n         B     VTAM0000\nMODID    DC    CL8'TSOVTAM'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nVTAM0000 DS    0H\n         L     R1,COMMDXDA           DYNAMIC WORK AREA BASE\n         A     R1,DXDSTART           DISPLACEMENT TO OUR PART\n         ST    R13,4(R1)             CHAIN WORK AREA\n         ST    R1,8(R13)             CHAIN WORK AREA\n         LR    R13,R1                COPY WORK AREA ADDRESS\n         USING DXDVTAM,R13           DEFINE BASE\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    VTAM0010              YES\n         ITRACE ID=INIT\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Process the requested function                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nVTAM0010 DS    0H\n         L     R2,COMMIOA            I/O AREA ADDRESS\n         L     R3,COMMRPL            RPL'S ADDRESS\n         CLI   COMMVCMD,$VTAMRCV     ISSUE A RECEIVE?\n         BE    RECV0000              YES\n         CLI   COMMVCMD,$VTAMSND     ISSUE A SEND?\n         BE    SEND0000              YES\n         ABEND $U1015,DUMP,,USER     INVALID COMAND\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Issue a RECEIVE                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nRECV0000 DS    0H\n         ITRACE ID=RECEIVE           ISSUE A RECEIVE\n         L     R4,=A(COMMIOSZ)       MAXIMUM I/O AREA SIZE\n         APPCCMD CONTROL=RECEIVE,    ISSUE A RECEIVE                   +\n               QUALIFY=SPEC,         .. FOR SPECIFIC CONVERSATION      +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               FILL=LL,              .. ONLY 1 LOGICAL RECORD          +\n               AREA=(R2),            .. I/O AREA ADDRESS               +\n               AREALEN=(R4),         .. I/O AREA SIZE                  +\n               CONMODE=CS,           .. CONTINUE SPECIFIC              +\n               CONVID=COMMCID,       .. CONVERSATION ID                +\n               OPTCD=SYN             .. SYNCHRONOUS\n         L     R6,COMMRPLX           RPL EXTENSION ADDRESS\n         USING ISTRPL6X,R6           DEFINE BASE\n         OC    RPL6RC,RPL6RC         SUCCESSFUL?\n         BZ    EXIT0000              YES\n         ITRACE ID=RECVFAIL,         RECEIVE HAS FAILED                +\n               DATA1=RPL6RC\n         ABEND $U1016,DUMP,,USER\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Issue a SEND                                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nSEND0000 DS    0H\n         ITRACE ID=SEND              ISSUE A SEND\n         USING VTAMIO,R2             DEFINE I/O AREA BASE\n         SR    R4,R4                 CLEAR REGISTER\n         ICM   R4,3,VTAMLEN          LENGTH TO SEND\n         APPCCMD CONTROL=SEND,       ISSUE APPC CMD                    +\n               QUALIFY=DATA,         .. SEND DATA                      +\n               RPL=(R3),             .. RPL ADDRESS                    +\n               AREA=(R2),            .. I/O AREA                       +\n               RECLEN=(R4),          .. LENGTH OF DATA                 +\n               CONMODE=CS,           .. CONTINUE SPECIFIC              +\n               CONVID=COMMCID,       .. CONVERSATION ID                +\n               OPTCD=SYN             .. SYNCHRONOUS\n         L     R6,COMMRPLX           RPL EXTENSION ADDRESS\n         OC    RPL6RC,RPL6RC         SEND SUCCESSFUL?\n         BZ    EXIT0000              YES\n         ITRACE ID=SENDFAIL,         SEND HAS FAILED                   +\n               DATA1=RPL6RC\n         ABEND $U1017,DUMP,,USER\n         B     EXIT0000              EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            CALLER'S SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE CALLER'S REGISTERS\n         SR    R15,R15               ALWAYS A GOOD RETURN CODE\n         BR    R14                   RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDVTAM)            DISPLACEMENT TO WORK AREA\n* ------------------------------------------------------------------- *\n*              WORK AREA                                              *\n* ------------------------------------------------------------------- *\nDXDVTAM  DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         TSOCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              ACB DSECT                                              *\n* ------------------------------------------------------------------- *\n         IFGACB AM=VTAM\n* ------------------------------------------------------------------- *\n*              RPL AND RPL EXTENSION DSECTS                           *\n* ------------------------------------------------------------------- *\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA  DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VTAMIO DSECT=YES\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  TSOVTAM\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TAPEMJCL": {"ttr": 20743, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x93\\x04\\x8f\\x00\\x931o\\x06\\t\\x00_\\x00`\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1993-02-17T00:00:00", "modifydate": "1993-11-12T06:09:00", "lines": 95, "newlines": 96, "modlines": 0, "user": "SBGCSC"}, "text": "./ ADD NAME=TAPEMAP\n//........ JOB .........                                                Z\n   .\n   .    JES CONTROL STATEMENTS\n   .\n//TAPEMAP  EXEC PGM=TAPEMAP,PARM='6250'\n//STEPLIB  DD DSN=.............,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//\n./ ADD NAME=TMAPASM\n//........ JOB ...........                                              Z\n  .\n  . JES CONTROL STATEMENTS\n  .\n//ASM      PROC NAME=,\n//             AP=,\n//             MACLIB=.MACLIB.NAME.....,             <------------\n//             SOURCE=.SOURCE.NAME.....,             <------------\n//             LIST=*\n//ASM      EXEC PGM=IEV90,COND=(4,LT),\n//             REGION=4096K,\n//             PARM='LINECOUNT(55),DECK,NOOBJECT,XREF(SHORT),&AP'\n//SYSPRINT DD   SYSOUT=&LIST\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLIB   DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.MODGEN,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//         DD   DSN=&MACLIB,DISP=SHR\n//SYSPUNCH DD   DSN=&&TEMP(&NAME),DISP=(OLD,PASS)\n//SYSIN    DD   DSN=&SOURCE(&NAME),DISP=SHR\n// PEND\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           ALLOCATE TEMP DATASET FOR ASSEMBLY OUTPUT               *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//ALLOC    EXEC PGM=IEFBR14\n//LOADSET  DD DSN=&&TEMP,DISP=(NEW,PASS),\n//            UNIT=SYSDA,\n//            SPACE=(TRK,(15,15,15)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           ASSEMBLE ALL MODULES                                    *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//EXCP EXEC ASM,NAME=TAPEEXCP,AP=RENT           I/O MODULE\n//CBT  EXEC ASM,NAME=TMAPCBT         CBT COMPRESSED FILES\n//COMM EXEC ASM,NAME=TMAPCOMM        COMMON DATA\n//COPY EXEC ASM,NAME=TMAPCOPY        IEBCOPY UNLOAD\n//DCB  EXEC ASM,NAME=TMAPDCB         DCB INFO CONVERTER\n//DSS  EXEC ASM,NAME=TMAPDSS         DF/DSS BACK-UPS\n//FDR  EXEC ASM,NAME=TMAPFDR         FDR BACK-UPS\n//LABL EXEC ASM,NAME=TMAPLABL        STANDARD LABELS\n//MAIN EXEC ASM,NAME=TMAPMAIN        MAINLINE MODULE\n//MCS  EXEC ASM,NAME=TMAPMCS         SMP/E MCS DATA SETS\n//MOVE EXEC ASM,NAME=TMAPMOVE        IEHMOVE DATA SETS\n//PARM EXEC ASM,NAME=TMAPPARM        PARAMETER CONVERTER\n//PRT  EXEC ASM,NAME=TMAPPRT         PRINT MODULE\n//UPDT EXEC ASM,NAME=TMAPUPDT        IEBUPDTE CONTROL STATEMENTS\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK THE WHOLE MESS                                     *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINK     EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,NCAL,AC=1'              <---------\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//TEMP     DD  DSN=&&TEMP,DISP=(OLD,PASS)\n//SYSLMOD  DD  DSN=.LOADLIB.NAME...,DISP=SHR               <---------\n//SYSLIN   DD  *\n  INCLUDE TEMP(TMAPCOMM)\n  INCLUDE TEMP(TMAPCBT)\n  INCLUDE TEMP(TMAPCOPY)\n  INCLUDE TEMP(TMAPDCB)\n  INCLUDE TEMP(TMAPDSS)\n  INCLUDE TEMP(TMAPFDR)\n  INCLUDE TEMP(TMAPLABL)\n  INCLUDE TEMP(TMAPMAIN)\n  INCLUDE TEMP(TMAPMCS)\n  INCLUDE TEMP(TMAPMOVE)\n  INCLUDE TEMP(TMAPPARM)\n  INCLUDE TEMP(TMAPPRT)\n  INCLUDE TEMP(TMAPUPDT)\n  INCLUDE TEMP(TAPEEXCP)\n  ENTRY TMAPMAIN\n  NAME TAPEMAP(R)\n/*\n//\n./ ADD NAME=TMAPSTC\n//TMAPSTC  PROC CLASS=A,SIZE=1024K,TAPE=\n//TAPEMAP  EXEC PGM=TAPEMAP,PARM=&PARM,REGION=&SIZE\n//STEPLIB  DD DSN=.............,DISP=SHR\n//SYSPRINT DD SYSOUT=&CLASS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TAPEMMAC": {"ttr": 20746, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99)\\x8f\\x01\\x00\\x04_\\t\\x04\\x02H\\x02H\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-10-25T00:00:00", "modifydate": "2000-02-14T09:04:00", "lines": 584, "newlines": 584, "modlines": 0, "user": "SBGOLOB"}, "text": "./ ADD NAME=DCBBLOK\n*---------------------------------------------------------------------*\n*                                                                     *\n*          DCB DATA CONVERTER PARMLIST                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n&NAME    DCBBLOK &TYPE=\n         AIF   (T'&NAME EQ 'O').NONAME\n         AIF   ('&TYPE' EQ 'CSECT').CSECT\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n         MNOTE 12,'INVALID TYPE'\n         MEXIT\n.CSECT   ANOP\n&NAME    DS     0A\n         AGO   .NODSECT\n.DSECT   ANOP\n&NAME    DSECT\n.NODSECT ANOP\nDCBRECA  DC    A(0)                RECORD'S ADDRESS\nDCBDSOD  DC    H'0'                DISPLACEMENT TO DATA SET ORG\nDCBRFMD  DC    H'0'                DISPLACEMENT TO RECORD FORMAT\nDCBBSZD  DC    H'0'                DISPLACEMENT TO BLOCK SIZE\nDCBRSZD  DC    H'0'                DISPLACEMENT TO RECORD SIZE\nDCBUNTD  DC    H'0'                DISPLACEMENT TO DEVICE TYPE\nDCBDSO   DC    CL4' '              DATA SET ORG\nDCBRFM   DC    CL4' '              RECORD FORMAT\nDCBBSZ   DC    CL6' '              BLOCK SIZE\nDCBRSZ   DC    CL6' '              RECORD SIZE\nDCBUNT   DC    CL6' '              UNIT TYPE\n         MEXIT\n.NONAME  ANOP\n         MNOTE 12,'NAME IS REQUIRE WHEN TYPE=DSECT'\n.MEXIT   ANOP\n         MEXIT\n         MEND\n./ ADD NAME=PRTBLOK\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PRINTER REQUEST BLOCK                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n&NAME    PRTBLOK  &TYPE=\n         AIF      ('&TYPE' EQ 'DSECT').DSECT\n&NAME    DS    0C\n         AGO      .NODSECT\n.DSECT   ANOP\n         AIF      (T'&NAME EQ 'O').NONAME\n&NAME    DSECT\n.NODSECT ANOP\nPRTCMD   DC    X'00'               COMMAND\n$PRTHEAD EQU   C'H'                .. PRINT HEADING\n$PRTSUBH EQU   C'S'                .. PRINT SUB-HEADING\n$PRTPRT  EQU   C'P'                .. PRINT\n$PRTMEM  EQU   C'M'                .. NEW MEMBER\n$PRTCLS  EQU   C'C'                .. CLOSE PRINT\nPRTCC    DC    C' '                CARRIAGE CONTROL\nPRTDATA  DC    CL120' '            PRINT DATA\n         MEXIT\n.NONAME  ANOP\n         MNOTE    12,'NAME REQUIRED WHEN TYPE=DSECT'\n         MEND\n./ ADD NAME=REGEQU\nR0       EQU    0\nR1       EQU    1\nR2       EQU    2\nR3       EQU    3\nR4       EQU    4\nR5       EQU    5\nR6       EQU    6\nR7       EQU    7\nR8       EQU    8\nR9       EQU    9\nR10      EQU    10\nR11      EQU    11\nR12      EQU    12\nR13      EQU    13\nR14      EQU    14\nR15      EQU    15\n./ ADD NAME=TAPEBLOK 0101-99298-99298-1604-00105-00110-00000-SBGOLOB\n*--------------------------------------------------------------------*\n*                                                                    *\n*        TAPEEXCP PROGRAM INTERFACE                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\n         MACRO\n&NAME    TAPEBLOK &TYPE=\n         AIF      ('&TYPE' EQ 'DSECT').DSECT\n&NAME    DS       0A\n         AGO      .NODSECT\n.DSECT   ANOP\n         AIF      (T'&NAME EQ 'O').NONAME\n&NAME    DSECT\n.NODSECT ANOP\nTSAVE    DC    18F'0'              REGISTER SAVE AREA FOR TAPEEXCP\nTTRSAVE  DS    16F'0'              REGISTER SAVE AREA FOR TAPE TRACE\nTCHAIN   DC    A(0)                CONTROL BLOCK CHAIN ANCHOR\nTIOAREA  DC    A(0)                I/O AREA ADDRESS\nTTR1ST   DS    A(0)                FIRST ENTRY IN TRACE TABLE\nTTRCURR  DS    A(0)                CURRENT ENTRY IN TRACE TABLE\nTTRLAST  DC    A(0)                LAST ENTRY IN TRACE TABLE\nTCID     DC    A(0)                CONSOLE ID\nTEXTRACT DS    0A                  FOLLOWING FIELD 'EXTRACT'ED\nTCOMM    DC    A(0)                .. COMMUNICATION BLOCK ADDRESS\nUCBADDR  DC    A(0)                UCB ADDRESS RETURNED BY UCBSCAN\nUCBTOKEN DC    8X'00'\nTLENGTH  DC    AL2(0)              LENGTH OF DATA\nTDDNAME  DC    CL8' '              TAPE'S DDNAME\nTAPEVOL  DC    CL6' '\nUCBWORK  DC    XL100'00'           UCBSCAN WORK AREA\nTCMD     DC    X'00'               COMMAND\n$TCMDOPN EQU   X'01'               .. OPEN TAPE DCB\n$TCMDRD  EQU   X'02'               .. READ A BLOCK\n$TCMDCLS EQU   X'03'               .. CLOSE TAPE DCB\nTDEVT    DC    C' '                DEVICE TYPE\n$T3420A  EQU   C'1'                .. 3420 (1600 BPI)\n$T3420B  EQU   C'2'                .. 3420 (6250 BPI)\n$T3480   EQU   C'3'                .. 3480\nTSTAT    DC    X'00'               STATUS\n$TSTATOK EQU   X'00'               .. COMMAND COMPLETED SUCCESSFULLY\n$TSTATAF EQU   X'01'               .. DEBCHK TYPE=ADD FAILED\n$TSTATND EQU   X'02'               .. DD NOT FOUND\n$TSTATOP EQU   X'03'               .. TAPE DD ALREADY OPEN\n$TSTATNO EQU   X'04'               .. TAPE DD NOT OPEN\n$TSTATTM EQU   X'05'               .. TAPE MARK READ\n$TSTATPE EQU   X'06'               .. PHYSICAL END OF TAPE REACHED\n$TSTATIE EQU   X'07'               .. I/O ERROR OCCURRED\n$TSTATXD EQU   X'08'               .. DEB NOT FOUND DURING CLOSE\n$TSTATDF EQU   X'09'               .. DEBCHK TYPE=DELETE FAILED\n$TSTATIX EQU   X'0A'               .. I/O ERROR, SENSE NOT AVAILABLE\n$TSTATIC EQU   X'0B'               .. TCMD IS INVALID\n$TSTATSF EQU   X'0C'               .. SENSE COMMAND FAILED\n$TSTATNC EQU   X'0D'               .. NO CONSOLE COMMUNICATION BLOCK\n$TSTATNU EQU   X'0E'               .. NO UNIT AVAILABLE\n$TSTAT99 EQU   X'0F'               .. SVC 99 FAILED\nTDENSITY DC    X'00'               DENSITY\n$TD800   EQU   X'02'               .. 800  BPI\n$TD1600  EQU   X'03'               .. 1600 BPI\n$TD6250  EQU   X'04'               .. 6250 BPI\n$TD3480  EQU   X'05'               .. 38K  BPI\nTDEBRC   DC    X'00'               RETURN CODE FROM DEBCHK MACRO\nTASTYPE  DC    X'00'               ADDRESS SPACE TYPE\n$TASSTC  EQU   X'01'               .. ADDRESS SPACE IS A STARTED TASK\nTSENSE   DC    XL16'00'            SENSE DATA (WHEN TSTAT = $TSTATIOE)\nTTRDATA1 DC    CL8' '              TRACE DATA 1\nTTRDATA2 DC    CL8' '              TRACE DATA 2\nTTRDATA3 DC    CL8' '              TRACE DATA 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nT99RBA   DC    A(0)                REQUEST BLOCK ADDRESS\nT99RB    DC    (S99RBEND-S99RB)X'00'\nT99RBL   EQU   *-T99RB             REQUEST BLOCK LENGTH\nT99DDPA  DC    A(0)                DDNAME PARAMETER ADDRESS\nT99DNPA  DC    A(0)                DSN PARAMETER ADDRESS\nT99LBPA  DC    A(0)                LABEL TYPE PARAMETER ADDRESS\nT99DSPA  DC    A(0)                DATASET SEQUENCE # PARAMETER ADDRESS\nT99UTPA  DC    A(0)                UNIT PARAMETER ADDRESS\nT99VLPA  DC    A(0)                VOLSER PARAMETER ADDRESS\nT99STPA  DC    A(0)                STATUS (DISP=NEW) ADDRESS\nT99DPPA  DC    A(0)                DISPOSITION PARAMETER ADDRESS\nT99DMPA  DC    A(0)                DEFERRED MOUNT PARAMETER ADDRESS\nT99RC    DC    AL2(0)              SVC99 RETURN CODE\nT99DDP   DC    AL2(0),AL2(0),AL2(0)\nT99DD    DC    CL8' '              DD NAME\nT99DNP   DC    AL2(0),AL2(0),AL2(0)\nT99DN    DC    CL8' '              DATA SET NAME\nT99LBP   DC    AL2(0),AL2(0),AL2(0)\n         DC    X'10'               LABEL TYPE (ALWAYS X'10' FOR BLP)\nT99DSP   DC    AL2(0),AL2(0),AL2(0)\n         DC    XL2'0001'           DATASET SEQUENCE NUMBER (ALWAYS 1)\nT99UTP   DC    AL2(0),AL2(0),AL2(0)\nT99UT    DC    CL8' '              UNIT NAME\nT99VLP   DC    AL2(0),AL2(0),AL2(0)\nT99VL    DC    CL6' '              VOLSER\nT99STP   DC    AL2(0),AL2(0),AL2(0)\nT99ST    DC    X'00'               STATUS\nT99DPP   DC    AL2(0),AL2(0),AL2(0)\nT99DP    DC    X'00'               DISPOSITION\nT99DMP   DC    AL2(0),AL2(0),AL2(0)\nTCMDL    EQU   *-TCMD              LENGTH OF TAPEBLOK INTERFACE BLOCK\n         MEXIT\n.NONAME  ANOP\n         MNOTE    12,'NAME REQUIRED WHEN TYPE=DSECT'\n         MEND\n./ ADD NAME=TAPECMDS\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        STANDARD TAPE I/O CCW COMMANDS                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCCWCMDNP EQU   X'03'              NO-OP\nCCWCMDRW EQU   X'07'              REWIND\nCCWCMDRU EQU   X'0F'              REWIND/UNLOAD\nCCWCMDTM EQU   X'1F'              WRITE TAPE MARK\nCCWCMDBF EQU   X'2F'              BACKSPACE FILE\nCCWCMDFB EQU   X'37'              FORWARD SPACE BLOCK\nCCWCMDFF EQU   X'3F'              FORWARD SPACE FILE\nCCWCMDDE EQU   X'97'              DATA SECURITY ERASE\nCCWCMDWT EQU   X'01'              WRITE\nCCWCMDRF EQU   X'02'              READ FORWARD\nCCWCMDRB EQU   X'0C'              READ BACKWARD\nCCWCMDSE EQU   X'04'              BASIC SENSE\n./ ADD NAME=TAPEEXCP\n*--------------------------------------------------------------------*\n*                                                                    *\n*        'TAPEEXCP' INTERFACE BLOCK                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\n         MACRO\n&NAME    TAPEEXCP &TYPE=\n         AIF      ('&TYPE' EQ 'DSECT').DSECT\n&NAME    DS       0A\n         AGO      .NODSECT\n.DSECT   ANOP\n         AIF      (T'&NAME EQ 'O').NONAME\n&NAME    DSECT\n.NODSECT ANOP\nTCMD     DC    X'00'               COMMAND\n$TCMDOPN EQU   X'01'               .. OPEN TAPE DCB\n$TCMDRD  EQU   X'02'               .. READ A BLOCK\n$TCMDWRT EQU   X'03'               .. WRITE A BLOCK\n$TCMDCLS EQU   X'03'               .. CLOSE TAPE DCB\nTSTAT    DC    X'00'               STATUS\n$TSTATOK EQU   X'00'               .. COMMAND COMPLETED SUCCESSFULLY\n$TSTATAF EQU   X'01'               .. DEBCHK TYPE=ADD FAILED\n$TSTATND EQU   X'02'               .. DD NOT FOUND\n$TSTATOP EQU   X'03'               .. TAPE DD ALREADY OPEN\n$TSTATNO EQU   X'04'               .. TAPE DD NOT OPEN\n$TSTATTM EQU   X'04'               .. TAPE MARK READ\n$TSTATPE EQU   X'05'               .. PHYSICAL END OF TAPE REACHED\n$TSTATIE EQU   X'06'               .. I/O ERROR OCCURRED\nTLENGTH  DC    AL2(0)              LENGTH OF DATA\nTIOAREA  DC    A(0)                I/O AREA ADDRESS\nTDDNAME  DC    CL8' '              TAPE'S DDNAME\nTSENSE   DC    XL16'00'            SENSE DATA (WHEN TSTAT = %TSTATIOE)\nTCMDL    EQU   *-TCMD              LENGTH OF TAPEEXCP INTERFACE BLOCK\n         MEXIT\n.NONAME  ANOP\n         MNOTE    12,'NAME REQUIRED WHEN TYPE=DSECT'\n         MEND\n./ ADD NAME=TAPELABL\n*---------------------------------------------------------------------*\n*                                                                     *\n*         TAPE LABEL DSECTS                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n          SPACE 1\n*---------------------------------------------------------------------*\n*        VOL1 DSECT                                                   *\n*---------------------------------------------------------------------*\nVOL1     DSECT\nVOL1ID   DS    CL4                'VOL1'\nVOL1VOL  DS    CL6                VOLUME SERIAL NUMBER\n         DS    X                  RESERVED\nVOL1VTOC DS    XL10               VTOC ADDRESS (DASD ONLY)\n         DS    XL16               RESERVED\nVOL1OWN  DS    CL14               OWNER AND ADDRESS CODE\n         DS    CL29               RESERVED\n         SPACE 2\n*---------------------------------------------------------------------*\n*        HDR1/EOV1/EOF1 DSECT                                         *\n*---------------------------------------------------------------------*\nHDR1     DSECT\nHDR1ID   DS    CL4                'HDR1'/'EOV1'/'EOF1'\nHDR1DSN  DS    CL17               DATASET NAME\nHDR1SER  DS    CL6                DATASET SERIAL NUMBER\nHDR1VSEQ DS    CL4                VOLUME SEQUENCE NUMBER\nHDR1DSEQ DS    CL4                DATASET SEQUENCE NUMBER\nHDR1GENR DS    CL4                GENERATION NUMBER\nHDR1VER  DS    CL2                VERSION NUMBER\nHDR1CDTE DS    CL6                CREATION DATE\nHDR1EXPD DS    CL6                EXPIRATION DATE\nHDR1SEC  DS    CL1                SECURITY\nHDR1BLKC DS    CL6                BLOCK COUNT\nHDR1SYS  DS    CL13               SYSTEM ID\n         DS    CL7                RESERVED\n         SPACE 2\n*---------------------------------------------------------------------*\n*        HDR2/EOV2/EOF2 DSECT                                         *\n*---------------------------------------------------------------------*\nHDR2     DSECT\nHDR2ID   DS    CL4                'HDR2'/'EOV2'/'EOF2'\nHDR2RF   DS    CL1                RECORD FORMAT\nHDR2BLSZ DS    CL5                BLOCK SIZE\nHDR2RSZ  DS    CL5                RECORD SIZE\nHDR2DEN  DS    CL1                TAPE DENSITY\nHDR2DPOS DS    CL1                DATASET POSITION\nHDR2JOB  DS    CL17               JOB/JOB STEP IDENTIFICATION\nHDR2RT   DS    CL2                RECORDING TECHNIQUE\nHDR2CC   DS    CL1                CONTROL CHARACTER\n         DS    CL1                RESERVED\nHDR2BLKA DS    CL1                BLOCK ATTRIBUTE\n         DS    CL8                RESERVED\nHDR2CKPT DS    CL1                CHECKPOINT DATASET ID\n         DS    CL32               RESERVED\n./ ADD NAME=TMAPCOMM 0101-99298-99298-1604-00209-00214-00000-SBGOLOB\n*---------------------------------------------------------------------*\n*                                                                     *\n*          COMMON AREA MAPPING MACRO                                  *\n*                                                                     *\n*     This macro will generate either the 'common' module CSECT or    *\n*     a DSECT to map the 'common' module.  'Common' is used for       *\n*     constants and work areas that are required by several modules   *\n*     allowing some elimination of duplicated data and to allow       *\n*     inter-module communication.                                     *\n*                                                                     *\n*     The trace table code is also incorporated into the 'TMAPCOMM'.  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n&NAME    TMAPCOMM &TYPE=\n         AIF   (T'&NAME EQ 'O').NONAME\n         AIF   ('&TYPE' EQ 'CSECT').CSECT\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n         MNOTE 12,'INVALID TYPE'\n         MEXIT\n.CSECT   ANOP\n&NAME    CSECT\n         AGO   .NODSECT\n.DSECT   ANOP\n&NAME    DSECT\n.NODSECT ANOP\n*---------------------------------------------------------------------*\n*                                                                     *\n*          ADDRESS CONSTANTS                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DC    CL8'TMAPCOMM'\nACOMM    DC    A(TMAPCOMM)         COMMON MODULE\n         DC    CL8'TAPEDCB'\nADCB     DC    V(TMAPDCB)          DCB INFO CONVERTER\n         DC    CL8'TAPEEXCP'\nATAPEIO  DC    V(TAPEEXCP)         TAPE I/O MODULE ADDRESS\n         DC    CL8'TMAPMAIN'\nAMAIN    DC    V(TMAPMAIN)         MAINLINE MODULE ADDRESS\n         DC    CL8'TMAPPARM'\nAPARM    DC    V(TMAPPARM)         PARAMETER CONVERTER\n         DC    CL8'TMAPPRT'\nAPRT     DC    V(TMAPPRT)          PRINT MODULE ADDRESS\n*---------------------------------------------------------------------*\n*                                                                     *\n*          File processor table                                       *\n*                                                                     *\n*     On the first record following a tapemark, the main line         *\n*     program calls each module in the following list until one       *\n*     of them signals that it 'recognizes' the data.  The search      *\n*     stops when the first module signals it 'knows' the data.        *\n*     If a file may be detected by more than one file processor       *\n*     like SMP/E MCS files, the order of search will determine        *\n*     the file type.                                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\nPROCTBLE DS    0A\n         TMAPPROC TMAPCBT            CBT COMPRESSED DATASETS\n         TMAPPROC TMAPCOPY           IEBCOPY\n         TMAPPROC TMAPDSS            DF/DSS BACK-UPS\n         TMAPPROC TMAPFDR            FDR BACK-UPS\n         TMAPPROC TMAPLABL           STANDARD LABELS\n         TMAPPROC TMAPMOVE           IEHMOVE\n         TMAPPROC TMAPMCS            SMP/E MCS\nAUPDT    TMAPPROC TMAPUPDT           IEBUPDTE\n         DC    X'FF'                 END OF LIST\n*---------------------------------------------------------------------*\n*                                                                     *\n*          CURRENT RECORD ADDRESS AND LENGTH                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMRECA DC    A(0)                CURRENT RECORD'S ADDRESS\nCOMMRECL DC    AL2(0)              CURRENT RECORD'S LENGTH\n*---------------------------------------------------------------------*\n*                                                                     *\n*          TRACE CONTROL                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DS    0A\n         DC    CL4'1ST'            FIRST TRACE ENTRY\nTR1ST    DC    A(0)\n         DC    CL4'LAST'           LAST TRACE ENTRY\nTRLAST   DC    A(0)\n         DC    CL4'CURR'           CURRENT TRACE ENTRY\nTRCURR   DC    A(0)\nTRADDR   DC    A(0)                TRACE TABLE STORAGE ADDRESS\nTRR14    DC    A(0)                REGISTER 14 SAVE AREA\nTRDATA1  DC    CL8' '              TRACE DATA ITEM 1\nTRDATA2  DC    CL8' '              TRACE DATA ITEM 2\nTRSIZE   DC    A(1000*TRENTRYL)    TRACE TABLE SIZE\n*---------------------------------------------------------------------*\n*                                                                     *\n*          GLOBAL DATA                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMCFPE DC    A(0)                CURRENT FILE PROCESSOR TABLE ENTRY\nCOMMPARM DC    A(0)                ADDRESS OF EXEC STATEMENT PARM DATA\nCOMMMEML DC    H'0'                LENGTH OF MEMBER ON PRINT LINE\nCOMMMEM# DC    H'0'                NUMBER OF MEMBERS PER LINE\nCOMMFLAG DC    X'00'               GLOBAL CONTROL FLAGS\n$COMMINQ EQU   X'80'               .. 'INQUIRY' CALLS IN PROGRESS\n$COMM1ST EQU   X'40'               .. FIRST RECORD OF FILE\n$COMMLST EQU   X'20'               .. 'CLEAN-UP' IN PROGRESS\n$COMMSUB EQU   X'10'               .. 'SUB-FUNCTION' CALL\n$COMMNOM EQU   X'08'               .. NO PDS MEMBERS\n$ABORT   EQU   X'04'               .. SERIOUS ERROR, ABORT\n$COMMFUL EQU   X'02'               .. MAP FULL TAPE\n$ABEND   EQU   X'01'               .. ABEND ON EXIT\nCOMMVOL  DC    CL6'XXXXXX'         VOLSER FOR WTO\nCOMMDEVT DC    C' '                TAPE DEVICE TYPE\nCOMMSUBH DC    CL120' '            SUB HEADING\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMMAXL DC    PL3'60'             MAXIMUM LINES PER PAGE\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*          ADD TRACE ENTRY                                            *\n*                                                                     *\n*  During program initialization, TMAPMAIN acquires storage for the   *\n*  trace table and sets COMM1ST, COMMLAST, and COMMCURR.  TMAPMAIN    *\n*  also sets R11 to the address of TMAPCOMM and all other modules     *\n*  depend on this remaining unchanged.  Any module except this        *\n*  module may call the trace routine.  Macro TMAPTR generates the     *\n*  calling sequence.  R14 is the only register altered by the trace   *\n*  macro.                                                             *\n*                                                                     *\n*  The trace table is a \"wrap-around\" table.  COMM1ST is the first    *\n*  entry's address, COMMLAST is the last entry's address, and         *\n*  COMMCURR is the address of the last entry added to the table.      *\n*  When a trace entry is added to the table, the calling module's     *\n*  name, an 8-byte ID, and up to 2 8-byte fields are captured.        *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*      This code depends on:                                          *\n*           R11  'TMAPCOMM' address                                   *\n*           R12  current module's base address                        *\n*                and the module's name must be at 10 bytes (0A hex)   *\n*                into the module                                      *\n*           R14  trace id's address and R14 + 8 will be the return    *\n*                address                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nTRACE000 DS    0H\n         USING &NAME,R11           DEFINE BASE\n         USING TRENTRY,R1          DEFINE BASE\n         STM   R0,R15,TRCESAVE     SAVE ALL REGISTERS\n         L     R1,TRCURR           CURRENT TRACE ENTRY\n         OC    0(TRENTRYL,R1),0(R1)    EMPTY ENTRY?\n         BZ    TRACE010            YES.. USE THIS ENTRY\n         LA    R1,TRENTRYL(R1)     NEXT TRACE ENTRY\n         C     R1,TRLAST           BEYOND END OF TABLE?\n         BNH   TRACE010            NO\n         L     R1,TR1ST            'WRAP' TRACE TABLE\nTRACE010 DS    0H\n         ST    R1,TRCURR           SAVE CURRENT TRACE ENTRY ADDRESS\n         MVC   TREMOD,10(R12)      COPY MODULE NAME\n         MVC   TREID,0(R14)        COPY TRACE ID\n         MVC   TREDATA1,TRDATA1    COPY TRACE DATA 1\n         MVC   TREDATA2,TRDATA2    COPY TRACE DATA 2\n         XC    TRDATA1,TRDATA1     CLEAR TRACE DATA\n         XC    TRDATA2,TRDATA2     CLEAR TRACE DATA\n         LM    R0,R15,TRCESAVE     RESTORE ALL REGISTERS\n         B     8(R14)              RETURN\nTRCESAVE DS    16F                 REGISTER SAVE AREA\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*          TRACE TABLE ENTRY                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nTRENTRY  DSECT\nTREMOD   DS    CL8                 MODULE NAME\nTREID    DS    CL8                 TRACE ID\nTREDATA1 DS    CL8                 TRACE DATA 1\nTREDATA2 DS    CL8                 TRACE DATA 2\nTRENTRYL EQU   *-TRENTRY           ENTRY LENGTH\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*          File processor table entries                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nPROCDSCT DSECT\nPROCNAME DS    CL8                 MODULE'S NAME\nPROCEPA  DS    AL4                 MODULE'S ENTRY POINT\nPROCL    EQU   *-PROCDSCT          LENGTH OF EACH ENTRY\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*          ABEND REASON CODES                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\nABEND001 EQU   1                   ABEND DUE TO STATUS FROM TAPEEXCP\nABEND002 EQU   2                   UNKNOWN STATUS CODE FROM TAPEEXCP\nABEND003 EQU   3                   ERROR DURING TAPE I/O CLOSE\nABEND004 EQU   4                   UNKNOWN COMMAND PASSED TO TMAPPRT\nABEND005 EQU   5                   UNKNOWN VTOC RECORD TYPE IN TMAPDSS\nABEND006 EQU   6                   LENGTH NEGATIVE IN 'NEXTTRAK' (DSS)\n         MEXIT\n.NONAME  ANOP\n         MNOTE 12,'NAME IS REQUIRE WHEN TYPE=DSECT'\n.MEXIT   ANOP\n         MEXIT\n         MEND\n./ ADD NAME=TMAPPROC\n         MACRO\n&NAME    TMAPPROC &MODNAME\n         DC    CL8'&MODNAME'           MODULE NAME\n&NAME    DC    VL4(&MODNAME)           MODULE ENTRY POINT\n         MEND\n./ ADD NAME=TMAPTR\n.* ------------------------------------------------------------------*\n.*                                                                   *\n.*                        TRACE MACRO                                *\n.*                                                                   *\n.*       THE TRACE FUNCTION ALWAYS CAPTURES THE CSECT NAME (TAKEN    *\n.*       FROM THE MODULE PREFIX DATA) AND A TRACE ID (SPECIFIED ON   *\n.*       THIS MACRO OR \"**NOID**\" IF THE ID PARAMETER IS OMITTED.    *\n.*                                                                   *\n.*       ONE OR TWO DATA ELEMENTS (8 BYTES EACH) MAY BE CAPTURED AT  *\n.*       ANY TRACE POINT.  THE DATA TO BE CAPTURED MAY BE SPECIFIED  *\n.*       IN EITHER OF TWO WAYS: DATA1 OR RDATA1 AND DATA2 OR RDATA2. *\n.*       DATA1 AND RDATA1 ARE MUTUALLY EXCLUSIVE AS ARE DATA2 AND    *\n.*       RDATA2.  DATA1 AND DATA2 SPECIFY THE ADDRESS OF DATA TO BE  *\n.*       CAPTURED, RDATA1 AND RDATA2 SPECIFY A REGISTER WHOSE        *\n.*       CONTENTS ARE TO BE CAPTURED.                                *\n.*                                                                   *\n.*       FOR EXAMPLE:                                                *\n.*                                                                   *\n.*                 TMAPTR ID=POINTA,DATA1=VALUE1,RDATA2=R4           *\n.*                                                                   *\n.*          IN THIS CASE THE TRACE ENTRY WOULD INCLUDE THE CSECT     *\n.*          NAME, THE ID DATA \"POINTA\", 8 BYTES OF DATA BEGINNING    *\n.*          AT VALUE1'S ADDRESS AND THE CONTENTS OF REGISTER 4.      *\n.*                                                                   *\n.* ------------------------------------------------------------------*\n         MACRO\n&NAME    TMAPTR &ID=,&DATA1=,&DATA2=,&RDATA1=,&RDATA2=\n         AIF   (T'&DATA1 NE 'O' AND T'&RDATA1 NE 'O').ERR0010\n         AIF   (T'&DATA2 NE 'O' AND T'&RDATA2 NE 'O').ERR0020\n         AIF   ('&SYSPARM' EQ 'NOTRACE').MEXIT\n         AIF   (T'&DATA1 EQ 'O').DATA020\n         AIF   ('&DATA1'(1,1) EQ '(').DATA010\n         LA    R14,&DATA1         DATA ADDRESS\n         MVC   TRDATA1,0(R14)     MOVE DATA\n         AGO   .DATA030\n.DATA010 ANOP\n         MVC   TRDATA1,0.&DATA1   MOVE DATA\n         AGO   .DATA030\n.DATA020 ANOP\n         AIF   (T'&RDATA1 EQ 'O').DATA030\n         STCM  &RDATA1,15,TRDATA1\n.DATA030 ANOP\n         AIF   (T'&DATA2 EQ 'O').DATA050\n         AIF   ('&DATA2'(1,1) EQ '(').DATA040\n         LA    R14,&DATA2         DATA ADDRESS\n         MVC   TRDATA2,0(R14)     MOVE DATA\n         AGO   .DATA060\n.DATA040 ANOP\n         MVC   TRDATA2,0.&DATA2   MOVE DATA\n         AGO   .DATA060\n.DATA050 ANOP\n         AIF   (T'&RDATA2 EQ 'O').DATA060\n         STCM  &RDATA2,15,TRDATA2\n.DATA060 ANOP\n         BAL   R14,TRACE000       ENTER TRACE ROUTINE\n         AIF      (T'&ID EQ 'O').NOID\n&NAME    DC    CL8'&ID'           TRACE ID\n         AGO   .ID\n.NOID    ANOP\n&NAME    DC    CL8'**NOID**'\n.ID      ANOP\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'DATA1 AND RDATA1 ARE MUTUALLY EXCLUSIVE'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'DATA2 AND RDATA2 ARE MUTUALLY EXCLUSIVE'\n.MEXIT   ANOP\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TAPEMSRC": {"ttr": 21001, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x99)\\x8f\\x01\\x00\\x19o\\x16X\\x19H\\x19U\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-10-25T00:00:00", "modifydate": "2000-07-14T16:58:00", "lines": 6472, "newlines": 6485, "modlines": 0, "user": "WSBG"}, "text": "./ ADD NAME=$$$DOC\nSee the comments in TMAPMAIN for an over-all description of the utility.\n\nTo install TAPEMAP\n    1) Rename either TAPEMVSO or TAPEUSRO to TAPEEXCP in this library.\n\n       TAPEMVSO uses normal MVS OPEN and CLOSE.  If your shop allows BLP\n       tape processing, you may want to use this module, it follows\n       \"the rules\".  Using normal OPEN invokes RACF and any tape\n       management system you may have.  Normal open also generates SMF\n       records, so \"tracks\" are left behind when TAPEMAP is used.  If\n       your shop does not allow BLP processing and a tape is standard\n       labelled, normal MVS open (with RACF, tape management systems,\n       JES3, etc) may not allow you to read the tape (you may have\n       to know the volser and dataset names in advance).  Since only\n       standard methods are used, TAPEMAP does not have to be APF\n       authorized.\n\n       TAPEUSRO bypasses MVS open.  This has some advantages and dis-\n       advantages.  Since MVS open is not used, RACF, tape management\n       systems, and JES checking is avoided.  This means that BLP\n       processing does not have to be allowed in order to read a\n       standard labelled tape without knowing the dataset names.  It\n       means RACF cannot prevent unauthorized users from reading tapes\n       they should not have access to.  It means SMF records are not\n       generated, so there is no evidence TAPEMAP was used to read a\n       tape.  Bypassing OPEN requires the use MVS services restricted\n       to APF authorized programs, so TAPEMAP must be in an APF library\n       and link edited with AC=1.\n\n    2) Edit the TMAPASM JCL, change the dataset names to match the\n       source, maclib, and loadlib names at your shop.  If TAPEUSRO\n       is used to do the I/O, the loadlib must be an APF authorized\n       library and link edit must specify AC=1.\n\n    3) Edit the TAPEMAP JCL member, change the dataset in the steplib\n       to your loadlib name.\n\n    4) If you want to run TAPEMAP as a started task, edit the TMAPSTC\n       JCL and add it to one of your proclibs.\n./ ADD NAME=TAPEMVSO 0100-99298-99298-1542-00891-00896-00000-SBGOLOB\n          TITLE 'TAPEMVSO - EXCP LEVEL TAPE I/O SUBROUTINE WITH MVS OPE+\n               N'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TAPEMVSO                                              *\n*                                                                     *\n*  Function:                                                          *\n*  This program is a subroutine that performs tape I/O at the EXCP    *\n*  level.  Normal MVS \"OPEN\" is used.  This module can replace        *\n*  \"TAPEEXCP\" for those installations that have security concerns     *\n*  bypassing MVS OPEN.  If this module is used instead of TAPEEXCP,   *\n*  your system must allow \"BLP\" for tapes.                            *\n*                                                                     *\n*  The CSECT name will be TAPEEXCP.  This allows the link edit and    *\n*  \"VCON\" references to always use the same module names.             *\n*                                                                     *\n*  The \"tape is recorded at xxxx density\" message always shows 38K    *\n*  for some reason.  If anyone figures out how to correct this        *\n*  let us know.                                                       *\n*                                                                     *\n*  This program supports only reads, no tape output is performed.     *\n*  The program's parameter list is mapped by the TAPEBLOK macro.      *\n*                                                                     *\n*  The same TAPEBLOK should be used for all calls to TAPEMVSO.        *\n*                                                                     *\n*  Functions provided are:                                            *\n*     OPEN   TCMD = $TCMDOPN                                          *\n*     READ   TCMD = $TCMDRD                                           *\n*     CLOSE  TCMD = $TCMDCLS                                          *\n*                                                                     *\n*   All functions require the \"DDNAME\" to be specified.  On an OPEN   *\n*   call, the tape unit is verified as a being a supported device,    *\n*   the I/O area for the tape is allocated, and a REWIND command is   *\n*   issued to position the tape to load point. On a READ call, the    *\n*   next physical block of the tape will be read and the I/O area     *\n*   address and data length will be returned to the caller.  On a     *\n*   CLOSE call, the I/O area will be freed.                           *\n*                                                                     *\n*   If a tapemark or the end of tape is reached, no data will be      *\n*   returned.                                                         *\n*                                                                     *\n*   In the event of an I/O error, TAPEMVSO will try to issue a sense  *\n*   command and return the sense info in TSENSE in the parameter      *\n*   block.                                                            *\n*                                                                     *\n*   Multiple tapes may be OPEN at the same time, TAPEMVSO keeps track *\n*   of the tapes by DDNAME.  You must specify the DDNAME on each call.*\n*                                                                     *\n*   This module has all its work areas in the TAPEBLOK data area, so  *\n*   it is re-entrant.  MVS still does not allow I/O from above the    *\n*   16-meg line, so the program is written as 24-bit.                 *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                         TRACE MACRO                                 *\n*                                                                     *\n*        THE TRACE FUNCTION CAPTURES AN 8-BYTE 'ID' AND UP TO 3 8-    *\n*        BYTE DATA ELEMENTS.                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         MACRO\n&NAME    TAPETR &ID=,                                                  +\n               &DATA1=,&RDATA1=,                                       +\n               &DATA2=,&RDATA2=,                                       +\n               &DATA3=,&RDATA3=\n         AIF   (T'&DATA1 NE 'O' AND T'&RDATA1 NE 'O').ERR0010\n         AIF   (T'&DATA2 NE 'O' AND T'&RDATA2 NE 'O').ERR0020\n         AIF   (T'&DATA3 NE 'O' AND T'&RDATA3 NE 'O').ERR0030\n         AIF   (T'&ID EQ 'O').ERR0040\n         AIF   ((T'&DATA3 EQ 'O') AND (T'&RDATA3 EQ 'O')).DATA010\n         AIF   (T'&DATA1 EQ 'O' AND T'&RDATA1 EQ 'O').ERR0050\n         AIF   (T'&DATA2 EQ 'O' AND T'&RDATA2 EQ 'O').ERR0050\n         AIF   ('&SYSPARM' EQ 'NOTRACE').MEXIT\n.DATA010 ANOP\n         AIF   ((T'&DATA2 EQ 'O') AND (T'&RDATA2 EQ 'O')).DATA020\n         AIF   (T'&DATA1 EQ 'O' AND T'&RDATA1 EQ 'O').ERR0060\n.DATA020 ANOP\n         AIF   (T'&DATA1 EQ 'O').DATA040\n         AIF   ('&DATA1'(1,1) EQ '(').DATA030\n         LA    R14,&DATA1         DATA ADDRESS\n         MVC   TTRDATA1,0(R14)    MOVE DATA\n         AGO   .DATA050\n.DATA030 ANOP\n         MVC   TTRDATA1,0&DATA1   MOVE DATA\n         AGO   .DATA050\n.DATA040 ANOP\n         AIF   (T'&RDATA1 EQ 'O').DATA050\n         STCM  &RDATA1,15,TTRDATA1\n.DATA050 ANOP\n         AIF   (T'&DATA2 EQ 'O').DATA070\n         AIF   ('&DATA2'(1,1) EQ '(').DATA060\n         LA    R14,&DATA2         DATA ADDRESS\n         MVC   TTRDATA2,0(R14)    MOVE DATA\n         AGO   .DATA080\n.DATA060 ANOP\n         MVC   TTRDATA2,0&DATA2   MOVE DATA\n         AGO   .DATA080\n.DATA070 ANOP\n         AIF   (T'&RDATA2 EQ 'O').DATA080\n         STCM  &RDATA2,15,TTRDATA2\n.DATA080 ANOP\n         AIF   (T'&DATA3 EQ 'O').DATA100\n         AIF   ('&DATA3'(1,1) EQ '(').DATA090\n         LA    R14,&DATA3         DATA ADDRESS\n         MVC   TTRDATA3,0(R14)    MOVE DATA\n         AGO   .DATA110\n.DATA090 ANOP\n         MVC   TTRDATA3,0&DATA3   MOVE DATA\n         AGO   .DATA110\n.DATA100 ANOP\n         AIF   (T'&RDATA3 EQ 'O').DATA110\n         STCM  &RDATA3,15,TTRDATA3\n.DATA110 ANOP\n         BAL   R14,TRACE000       ENTER TRACE ROUTINE\n&NAME    DC    CL8'&ID'           TRACE ID\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'DATA1 AND RDATA1 ARE MUTUALLY EXCLUSIVE'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'DATA2 AND RDATA2 ARE MUTUALLY EXCLUSIVE'\n         MEXIT\n.ERR0030 ANOP\n         MNOTE 12,'DATA3 AND RDATA3 ARE MUTUALLY EXCLUSIVE'\n         MEXIT\n.ERR0040 ANOP\n         MNOTE 12,'ID PARAMETER IS REQUIRED'\n         MEXIT\n.ERR0050 ANOP\n         MNOTE 12,'DATA3/RDATA3 IS NOT VALID UNLESS BOTH DATA1/RDATA1 A+\n               ND DATA2/RDATA2 ARE SPECIFIED'\n         MEXIT\n.ERR0060 ANOP\n         MNOTE 12,'DATA2/RDATA2 IS NOT VALID UNLESS DATA1/RDATA1 IS SPE+\n               CIFIED'\n.MEXIT   ANOP\n         MEXIT\n         MEND\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPEEXCP CSECT\nTAPEEXCP AMODE 24\nTAPEEXCP RMODE 24\n         USING TAPEEXCP,R12\n         USING PSA,R0                DEFINE PSA BASE\n         USING CMDBLOK,R10           DEFINE PARAMETER BLOCK BASE\n         USING IOBLK,R9              DEFINE BASE\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               SET BASE REG\n         LR    R10,R1                COPY PARAMETER BLOCK ADDRESS\n         LA    R1,TSAVE              OUR SAVE AREA ADDRESS\n         ST    R13,TSAVE+4           SAVE SAVE AREA ADDRESS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S\n         LA    R13,TSAVE             SET SAVE AREA ADDRESS\n         B     TAPE0000              SKIP EYECATCHER\n         DC    CL8'TAPEMVSO'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nTAPE0000 DS    0H\n         TAPETR ID=ENTRY,            TRACE CALLS                       +\n               DATA1=TDDNAME,        .. FOR DDNAME                     +\n               DATA2=TCMD            .. COMMAND\n         CLI   TCMD,$TCMDOPN         OPEN TAPE DCB?\n         BE    OPEN0000              YES\n         CLI   TCMD,$TCMDRD          READ A BLOCK?\n         BE    READ0000              YES\n         CLI   TCMD,$TCMDCLS         CLOSE DCB?\n         BE    CLOSE000              YES\n         MVI   TSTAT,$TSTATIC        INVALID COMMAND\n         B     TAPE9900              EXIT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             OPEN TAPE DCB                                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nOPEN0000 DS    0H\n         TAPETR ID=OPEN\n         ICM   R9,15,TCHAIN          FIRST I/O BLOCK ON THE CHAIN\n         BZ    OPEN0020              NO BLOCK ON CHAIN\nOPEN0010 DS    0H\n         CLC   IODDNAME,TDDNAME      I/O BLOCK ALREADY ON THE CHAIN?\n         BE    OPEN0170              YES.. CANNOT ALLOW A DUPLICATE\n         ICM   R9,15,IONEXT          NEXT BLOCK ON CHAIN\n         BNZ   OPEN0010              PROCESS ALL OF THEM\n* ------------------------------------------------------------------- *\n*             DETERMINE ADDRESS SPACE TYPE                            *\n* ------------------------------------------------------------------- *\nOPEN0020 DS    0H\n         L     R1,PSAANEW            OUR ASCB ADDRESS\n         USING ASCB,R1               DEFINE BASE\n         L     R15,ASCBJBNI          JOB NAME ADDRESS\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         LTR   R15,R15               JOB NAME PRESENT?\n         BNZ   OPEN0030              YES\n         L     R1,ASCBOUCB           OUR OUCB ADDRESS\n         USING OUCB,R1               DEFINE BASE\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         TAPETR ID=OUCBYFL,                                            +\n               RDATA1=R1,                                              +\n               DATA2=OUCBYFL\n         TM    OUCBYFL,OUCBSTT       IS THIS A STARTED TASK?\n         BNO   OPEN0030              NO\n         OI    TASTYPE,$TASSTC       ADDRESS SPACE IS AN STC\n         TAPETR ID=ASIDSTC\nOPEN0030 DS    0H\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         XC    UCBTOKEN,UCBTOKEN     CLEAR THE TOKEN\n         XC    UCBWORK,UCBWORK       CLEAR THE WORKAREA TOO\n* ------------------------------------------------------------------- *\n*             LOCATE UCB FOR REQUESTED DEVICE TYPE                    *\n* ------------------------------------------------------------------- *\nOPEN0035 DS    0H\n         MODESET MODE=SUP,KEY=ZERO   ENTER SUPERVISOR STATE, KEY ZERO\n         UCBSCAN ADDRESS,            .. RETURN ADDRESS OF UCB          +\n               UCBPTR=UCBADDR,       .. RETURNED ADDRESS               +\n               WORKAREA=UCBWORK,     .. WORKAREA FOR UCBSCAN           +\n               DEVCLASS=TAPE,        .. ONLY NEED TAPE UCB'S           +\n               DYNAMIC=YES,          .. INCLUDE DYNAMICALLY ADDED      +\n               PIN,                  .. DON'T ALLOW IT TO BE DELETED   +\n               TEXT=UCBTEXT,         .. REASON FOR PIN                 +\n               PTOKEN=UCBTOKEN       .. TOKEN\n         MODESET MODE=PROB,KEY=NZERO PROBLEM STATE, PROBLEM KEY\n         ICM   R3,15,UCBADDR         UCB'S ADDRESS\n         BZ    OPEN0070              NO DEVICE FOUND\n         USING UCBOB,R3              DEFINE BASE\nOPEN0040 DS    0H\n         TM    UCBSTAT,UCBONLI       IS THIS DEVICE ONLINE?\n         BNO   OPEN0035              NO\n         TM    UCBSTAT,UCBALOC       IS IT ALREADY ALLOCATED?\n         BO    OPEN0035              YES\n         TM    UCBTBYT3,UCB3TAPE     IS DEVICE A TAPE UNIT?\n         BNO   OPEN0035              NO\n         CLI   UCBTBYT4,UCB3480      IS IT A 3480?\n         BE    OPEN0060              YES\n         CLI   TDEVT,$T3480          3480 WANTED?\n         BE    OPEN0035              YES\n         CLI   TDEVT,$T3420B         6250 BPI WANTED?\n         BE    OPEN0050              YES\n         TM    UCBTBYT1,UCBD1600     1600 BPI DRIVE?\n         BO    OPEN0090              YES\n         TM    UCBTBYT2,UCBDUDN1     800/1650 DRIVE?\n         BO    OPEN0090              YES\n         TM    UCBTBYT2,UCBDUDN2     1600/6250 DRIVE?\n         BO    OPEN0090              YES\n         B     OPEN0035              OTHERWISE LOOK FOR ANOTHER UNIT\nOPEN0050 DS    0H\n         TM    UCBTBYT1,UCBD6250     6250 BPI DRIVE?\n         BO    OPEN0080              YES\n         TM    UCBTBYT2,UCBDUDN2     1600/6250 DRIVE?\n         BO    OPEN0080              YES\n         B     OPEN0035              OTHERWISE LOOK FOR ANOTHER UNIT\nOPEN0060 DS    0H\n         CLI   TDEVT,$T3480          3480 WANTED?\n         BNE   OPEN0035              NO\n         MVI   TDENSITY,$DEN3480     SET FOR 3480 DENSITY\n         B     OPEN0100\nOPEN0070 DS    0H\n         MVI   TSTAT,$TSTATNU        NO UNIT AVAILABLE\n         B     TAPE9900              AND EXIT\nOPEN0080 DS    0H\n         MVI   TDENSITY,$DEN6250     SET FOR 6250 BPI DENSITY\n         B     OPEN0100\nOPEN0090 DS    0H\n         MVI   TDENSITY,$DEN1600     SET FOR 1600 BPI DENSITY\n         B     OPEN0100\n* ------------------------------------------------------------------- *\n*             UCB LOCATED                                             *\n* ------------------------------------------------------------------- *\nOPEN0100 DS    0H\n         TAPETR ID=UCBLOC,           UCB HAS BEEN LOCATED              +\n               RDATA1=R3             .. INCLUDE UCB'S ADDRESS\n* ------------------------------------------------------------------- *\n*             ALLOCATE THE UNIT                                       *\n* ------------------------------------------------------------------- *\n         LA    R2,T99RB              DAIR REQUEST BLOCK ADDRESS\n         USING S99RB,R2              DEFINE BASE\n         ST    R2,T99RBA             SET ADDRESS IN POINTER\n         OI    T99RBA,X'80'          SET END OF LIST\n         XC    T99RB(T99RBL),T99RB   CLEAR REQUEST BLOCK\n         MVI   S99RBLN,T99RBL        SET LENGTH\n         MVI   S99VERB,S99VRBAL      SET VERB (ALLOCATE)\n         LA    R1,T99DDPA            FIRST TEXT UNIT POINTER\n         ST    R1,S99TXTPP           SET TEXT POINTER ADDRESS\n         LA    R1,T99DDP             DD PARAMETER'S ADDRESS\n         ST    R1,T99DDPA            SET ADDRESS\n         LA    R1,T99DNP             DSN PARAMETER'S ADDRESS\n         ST    R1,T99DNPA            SET ADDRESS\n         LA    R1,T99LBP             LABEL TYPE PARAMETER'S ADDRESS\n         ST    R1,T99LBPA            SET ADDRESS\n         LA    R1,T99DSP             DATASET SEQUENCE # PARAMETERS\n         ST    R1,T99DSPA            SET ADDRESS\n         LA    R1,T99UTP             UNIT PARAMETER'S ADDRESS\n         ST    R1,T99UTPA            SET ADDRESS\n         LA    R1,T99VLP             UNIT PARAMETER'S ADDRESS\n         ST    R1,T99VLPA            SET ADDRESS\n         LA    R1,T99STP             STATUS (DISP=NEW)\n         ST    R1,T99STPA            SET ADDRESS\n         LA    R1,T99DPP             DISPOSITION (DISP=KEEP)\n         ST    R1,T99DPPA            SET ADDRESS\n         LA    R1,T99DMP             DEFERRED MOUNT PARAMETER\n         ST    R1,T99DMPA            SET ADDRESS\n         OI    T99DMPA,X'80'         SET END OF LIST ADDRESS\n         MVC   T99DDP(T99L),T99      INITIALIZE ALL PARAMETERS\n         MVC   T99DD,TDDNAME         SET DDNAME\n         MVC   T99DN,TDDNAME         SET DSN\n         MVC   T99UT(3),UCBNAME      SET UNIT\n         MVC   T99VL(3),VOLPRFX      SET VOLSER PREFIX\n         MVC   T99VL+3(3),UCBNAME    SET VOLSER\n         LA    R1,T99RBA             POINTER'S ADDRESS\n         DYNALLOC                    ALLOCATE THE DRIVE\n         STH   R15,T99RC             SET RETURN CODE\n         LTR   R15,R15               ALLOCATED SUCCESSFULLY?\n         BNZ   OPEN0180              NO\n* ------------------------------------------------------------------- *\n*             ACQUIRE I/O CONTROL BLOCK                               *\n* ------------------------------------------------------------------- *\n         GETMAIN R,LV=IOBLKL         ACQUIRE CONTROL BLOCK STORAGE\n         LR    R9,R1                 COPY STORAGE ADDRESS\n         LA    R14,TCHAIN            INITIALIZE 'CURRENT' POINTER\n         ICM   R15,15,TCHAIN         FIRST BLOCK ON CHAIN\n         BZ    OPEN0120              END OF CHAIN FOUND\nOPEN0110 DS    0H\n         LR    R14,R15               COPY CURRENT BLOCK'S ADDRESS\n         ICM   R15,15,IONEXT-IOBLK(R15) NEXT ON CHAIN\n         BNZ   OPEN0110              FIND END OF CHAIN\nOPEN0120 DS    0H\n         ST    R14,IOPREV            SET 'PREVIOUS' POINTER\n         XC    IONEXT,IONEXT         ZERO 'NEXT' POINTER\n         ST    R9,IONEXT-IOBLK(R14) 'NEXT' IN PREVIOUS BLOCK\n         MVC   IODDNAME,TDDNAME      SET DD NAME\n* ------------------------------------------------------------------- *\n*             ACQUIRE I/O AREA                                        *\n* ------------------------------------------------------------------- *\n         GETMAIN R,LV=$MAXLEN        ACQUIRE I/O AREA\n         ST    R1,IOAREA             SAVE I/O AREA ADDRESS\n         TAPETR ID=NEWIOBLK,                                           +\n               RDATA1=R9,            .. I/O BLOCK'S ADDRESS            +\n               RDATA2=R1             .. I/O AREA'S ADDRESS\n* ------------------------------------------------------------------- *\n*             INITIALIZE CCW'S                                        *\n* ------------------------------------------------------------------- *\n         MVC   IOREAD,READCCW        INITIALIZE READ CCW\n         MVC   IOREW,REWCCW          INITIALIZE REW CCW\n         MVC   IOSENSE,SENSECCW      INITIALIZE SENSE CCW\n         L     R1,IOAREA             I/O AREA ADDRESS\n         STCM  R1,7,IOREAD+1         INITIALIZE I/O AREA ADDRESS\n         STCM  R1,7,IOREW+1\n         LA    R1,TSENSE             SENSE DATA ADDRESS\n         STCM  R1,7,IOSENSE+1        INITIALIZE SENSE DATA ADDRESS\n* ------------------------------------------------------------------- *\n*             INITIALIZE SENSE INFO                                   *\n* ------------------------------------------------------------------- *\n         XC    TSENSE,TSENSE         INITIALIZE SENSE DATA\n         LA    R5,IOIOB              IOB STORAGE ADDRESS\n         LA    R6,IODCB              DCB STORAGE ADDRESS\n         USING IOB,R5\n         USING IHADCB,R6\n         USING DEB,R7\n* ------------------------------------------------------------------- *\n*           INITIALIZE IOB                                            *\n* ------------------------------------------------------------------- *\n         XC    IOIOB(IOBL),IOIOB     CLEAR IOB STORAGE\n         MVI   IOBFLAG1,X'02'        SET FLAG BYTE 1\n         ST    R6,IOBDCBPT           SET DCB ADDRESS\n* ------------------------------------------------------------------- *\n*           INITIALIZE DCB                                            *\n* ------------------------------------------------------------------- *\n         MVC   IODCB(DCBL),INITDCB   INITIALIZE DCB\n         MVC   DCBDDNAM,TDDNAME      SET DD NAME\n         GETMAIN R,LV=OPENL\n         LR    R11,R1                COPY STORAGE ADDRESS\n         MVC   0(OPENL,R11),OPENI    COPY OPEN LIST FORM\n         OPEN  ((R6),INPUT),MF=(E,(R11))\n         FREEMAIN R,A=(R11),LV=OPENL FREEMAIN OPEN PARM LIST\n         TAPETR ID=OPENREW\n         LA    R1,IOREW              REWIND CCW\n         BAL   R11,IO0000            REWIND THE TAPE\n         TAPETR ID=OPENDONE\n         B     TAPE9900              AND EXIT\nOPEN0160 DS    0H\n         TAPETR ID=NOCCOM\n         MVI   TSTAT,$TSTATNC        NO CONSOLE COMMUNICATION BLOCK\n         B     TAPE9900              AND EXIT\nOPEN0170 DS    0H\n         TAPETR ID=DUPOPEN\n         MVI   TSTAT,$TSTATOP        TAPE IS ALREADY OPEN\n         B     TAPE9900              AND EXIT\nOPEN0180 DS    0H\n         TAPETR ID=ALOCFAIL\n         MVI   TSTAT,$TSTAT99        DAIR FAILURE\n         B     TAPE9900              AND EXIT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             READ A BLOCK                                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nREAD0000 DS    0H\n         TAPETR ID=READ\n         ICM   R9,15,TCHAIN          FIRST BLOCK ON CHAIN\nREAD0010 DS    0H\n         BZ    READ0070              I/O BLOCK NOT FOUND\n         CLC   IODDNAME,TDDNAME      CORRECT I/O BLOCK FOUND?\n         BE    READ0020              YES\n         ICM   R9,15,IONEXT          NEXT ON CHAIN\n         B     READ0010              KEEP LOOKING\nREAD0020 DS    0H\n         LA    R5,IOIOB              IOB ADDRESS\n         LA    R6,IODCB              DCB ADDRESS\n         L     R7,DCBDEBAD           DEB ADDRESS\n         LA    R1,IOREAD             READ CCW'S ADDRESS\n         BAL   R11,IO0000            LINK TO I/O ROUTINE\n         CLI   TSTAT,$TSTATOK        I/O SUCCESSFUL?\n         BNE   TAPE9900              NO.. GET OUTTA HERE\n         SR    R0,R0                 CLEAR REGISTER\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R0,3,IOREAD+6         LENGTH ATTEMPTED\n         ICM   R1,3,IOBSTDRD+14      RESIDUAL LENGTH\n         SR    R0,R1                 LENGTH READ\n         STCM  R0,3,TLENGTH          SET LENGTH\n         MVC   TIOAREA,IOAREA        SET I/O AREA ADDRESS\n         TAPETR ID=READOK,           READ COMPLETE                     +\n               DATA1=TIOAREA,        .. I/O AREA ADDRESS               +\n               DATA2=TLENGTH         .. DATA LENGTH\n         TM    IOFLAG,$IODEN         DENSITY DETERMINED?\n         BO    TAPE9900              YES\n         OI    IOFLAG,$IODEN         DENSITY WILL BE DETERMINED\n         CLI   DEBSDVM,$DEN3480      3480 TAPE DRIVE?\n         BE    READ0050              YES\n         LA    R1,IOSENSE            SENSE CCW\n         BAL   R11,IO0000            ISSUE SENSE COMMAND\n         CLI   TSTAT,$TSTATOK        I/O SUCCESSFUL?\n         BNE   TAPE9900              NO.. BYPASS DENSITY STUFF\n         TM    TSENSE+3,$SENSEPE     PE MODE?\n         BO    READ0030              YES\n         TM    TSENSE+9,$SENSE62     6250 CAPABLE?\n         BO    READ0040              YES\n         MVI   IODEN,2               DENSITY IS 800 BPI\n         B     READ0060\nREAD0030 DS    0H\n         TAPETR ID=MODE3\n         MVI   IODEN,3               DENSITY IS 1600 BPI\n         B     READ0060\nREAD0040 DS    0H\n         TAPETR ID=MODE4\n         MVI   IODEN,4               DENSITY IS 6250 BPI\n         B     READ0060\nREAD0050 DS    0H\n         TAPETR ID=MODE5\n         MVI   IODEN,5               TAPE IS A 3480\nREAD0060 DS    0H\n         MVC   TDENSITY,IODEN        COPY DENSITY\n         B     TAPE9900              AND EXIT\nREAD0070 DS    0H\n         TAPETR ID=NOTOPEN\n         MVI   TSTAT,$TSTATNO        TAPE IS NOT OPEN\n         B     TAPE9900              AND EXIT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             PERFORM I/O                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nIO0000   DS    0H\n         TAPETR ID=IO,               STARTING I/O                      +\n               DATA1=(R1)            .. CCW BEING ISSUED\n         CLI   0(R1),CCWCMDRW        IS COMMAND REWIND?\n         BE    IO0010                YES\n         CLI   0(R1),CCWCMDRU        IS COMMAND REWIND/UNLOAD?\n         BE    IO0010                YES\n         TM    IOFLAG,$IOEOT         TAPE AT PHYSICAL EOT?\n         BO    IO0100                YES..\nIO0010   DS    0H\n         ST    R1,IOBSTART           SET CCW STRING ADDRESS\n         LA    R1,IOECB              ECB'S ADDRESS\n         STCM  R1,7,IOBECBPB         SET ECB ADDRESS\n         LA    R1,IODCB              DCB'S ADDRESS\n         ST    R1,IOBDCBPT           SET DCB ADDRESS\nIO0020   DS    0H\n         TAPETR ID=EXCP\n         XC    IOECB,IOECB           CLEAR THE ECB\n         EXCP  IOBSTDRD              START THE I/O\n         WAIT  ECB=IOECB             WAIT FOR I/O COMPLETION\n         TAPETR ID=EXCPDONE,         I/O COMPLETED                     +\n               DATA1=IOECB           .. SAVE ECB\n         CLI   IOECB,X'44'           RETRY THE I/O?\n         BE    IO0020                YES\n         CLI   IOECB,X'7F'           SUCCESSFUL?\n         BNE   IO0050                NO\n         L     R1,IOBSTART           FIRST CCW\n         CLI   0(R1),CCWCMDRW        REWIND?\n         BE    IO0030                YES\n         CLI   0(R1),CCWCMDRU        REWIND/UNLOAD?\n         BNE   IO0040                NO\nIO0030   DS    0H\n         TAPETR ID=REWOUND\n         NI    IOFLAG,255-$IOEOT     RESET EOT FLAG\nIO0040   DS    0H\n         TAPETR ID=GOODIO\n         MVI   TSTAT,$TSTATOK        I/O WAS SUCCESSFUL\n         BR    R11                   AND RETURN\nIO0050   DS    0H\n         TAPETR ID=BADIO\n         L     R1,IOBSTART           FIRST CCW IN STRING\n         CLI   0(R1),CCWCMDSE        WAS I/O A SENSE COMMAND?\n         BE    IO0120                YES.. SENSE FAILED\n         NI    IOFLAG,255-$IOUEX     TURN OFF UNIT EXCEPTION FLAG\n         TM    IOBFLAG1,IOBIOERR     UNIT EXCEPTION?\n         BNO   IO0060                NO\n         OI    IOFLAG,$IOUEX         INDICATE UNIT EXCEPTION OCCURRED\n         TAPETR ID=UNITEXPT\nIO0060   DS    0H\n         LA    R1,IOSENSE            SENSE CCW'S ADDRESS\n         ST    R1,IOBSTART           SET CCW STRING ADDRESS\nIO0070   DS    0H\n         XC    IOECB,IOECB           CLEAR THE ECB\n         TAPETR ID=SENSEIO\n         EXCP  IOBSTDRD              START THE I/O\n         WAIT  ECB=IOECB             WAIT FOR I/O COMPLETION\n         TAPETR ID=SNSEDONE,         SENSE HAS COMPLETED               +\n               DATA1=IOECB\n         CLI   IOECB,X'44'           RETRY THE I/O?\n         BE    IO0070                YES\n         CLI   IOECB,X'7F'           SUCCESSFUL?\n         BNE   IO0110                NO\n         TAPETR ID=GOODSNSE,         SENSE SUCCESSFUL                  +\n               DATA1=TSENSE,         .. FIRST 8 BYTES OF SENSE DATA    +\n               DATA2=TSENSE+8        .. NEXT 8 BYTES\n         TM    IOFLAG,$IOUEX         UNIT EXEPTION ON ORIGINAL I/O?\n         BO    IO0080                YES\n         TAPETR ID=IOEWSNSE\n         MVI   TSTAT,$TSTATIE        I/O ERROR WITH SENSE AVAILABLE\n         BR    R11                   RETURN\nIO0080   DS    0H\n         TM    TSENSE+4,$SENSETI     TAPE AT PHYSICAL EOT?\n         BO    IO0090                YES\n         TAPETR ID=TAPEMARK\n         MVI   TSTAT,$TSTATTM        TAPE MARK REACHED\n         BR    R11                   EXIT\nIO0090   DS    0H\n         TAPETR ID=PEOT\n         OI    IOFLAG,$IOEOT         TAPE IS AT EOT\nIO0100   DS    0H\n         TAPETR ID=PEOT\n         MVI   TSTAT,$TSTATPE        EOT REACHED (PHYSICAL END)\n         BR    R11                   EXIT\nIO0110   DS    0H\n         TAPETR ID=SFAIL1\n         MVI   TSTAT,$TSTATIX        SENSE FAILED AFTER AN I/O ERROR\n         BR    R11                   EXIT\nIO0120   DS    0H\n         TAPETR ID=SFAIL2\n         MVI   TSTAT,$TSTATSF        SENSE FAILED\n         BR    R11                   EXIT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             CLOSE TAPE DCB                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCLOSE000 DS    0H\n         TAPETR ID=CLOSE\n         ICM   R9,15,TCHAIN          FIRST BLOCK ON CHAIN\nCLOSE010 DS    0H\n         BZ    CLOSE060              I/O BLOCK NOT FOUND\n         CLC   IODDNAME,TDDNAME      CORRECT I/O BLOCK FOUND?\n         BE    CLOSE020              YES\n         ICM   R9,15,IONEXT          NEXT ON CHAIN\n         B     CLOSE010              KEEP LOOKING\nCLOSE020 DS    0H\n         TAPETR ID=IOBLKFD,          I/O BLOCK LOCATED                 +\n               RDATA1=R9             .. I/O BLOCK'S ADDRESS\n* ------------------------------------------------------------------- *\n*             CLOSE THE DCB                                           *\n* ------------------------------------------------------------------- *\n         LA    R6,IODCB              DCB ADDRESS\n         GETMAIN R,LV=CLOSEL\n         LR    R11,R1                COPY STORAGE ADDRESS\n         MVC   0(CLOSEL,R11),CLOSEI  COPY LIST FORM\n         CLOSE ((R6)),MF=(E,(R11))   CLOSE TH ECB\n         FREEMAIN R,A=(R11),LV=CLOSEL FREE THE CLOSE PARM LIST\n* ------------------------------------------------------------------- *\n*             DE-ALLOCATE THE DEVICE                                  *\n* ------------------------------------------------------------------- *\n         LA    R2,T99RB              REQUEST BLOCK ADDRESS\n         MVI   S99VERB,S99VRBUN      SET VERB (UNALLOCATE)\n         MVC   T99DD,TDDNAME         SET DDNAME\n         OI    T99DDPA,X'80'         SET END OF LIST\n         LA    R1,T99RBA             POINTER'S ADDRESS\n         DYNALLOC                    FREE THE UNIT\n         STH   R1,T99RC              SAVE RETURN CODE\n         LTR   R15,R15               SUCCESSFUL?\n         BZ    CLOSE030              YES\n         TAPETR ID=FREEFAIL,                                           +\n               RDATA1=R15\n         MVI   TSTAT,$TSTAT99        SVC 99 FAILED\n         B     TAPE9900              EXIT\n* ------------------------------------------------------------------- *\n*             REMOVE THIS I/O BLOCK FROM THE CHAIN                    *\n* ------------------------------------------------------------------- *\nCLOSE030 DS    0H\n         TAPETR ID=UNCHAIN\n         ICM   R1,15,IOPREV          PREVIOUS BLOCK ON THE CHAIN\n         BZ    CLOSE040              NO PREVIOUS BLOCK\n         MVC   IONEXT-IOBLK(4,R1),IONEXT   CHAIN PREVIOUS TO NEXT\nCLOSE040 DS    0H\n         ICM   R1,15,IONEXT          NEXT BLOCK ON CHAIN\n         BZ    CLOSE050              NO NEXT BLOCK\n         MVC   IOPREV-IOBLK(4,R1),IOPREV   CHAIN NEXT TO PREVIOUS\nCLOSE050 DS    0H\n         TAPETR ID=FREEIO\n         L     R1,IOAREA             I/O AREA ADDRESS\n         FREEMAIN R,A=(1),LV=$MAXLEN FREE I/O AREA\n         FREEMAIN R,A=(9),LV=IOBLKL  FREE I/O BLOCK\n         TAPETR ID=CLSEDONE\n         MVI   TSTAT,$TSTATOK        STATUS\n         B     TAPE9900              AND EXIT\nCLOSE060 DS    0H\n         TAPETR ID=NOTOPEN\n         MVI   TSTAT,$TSTATNO        TAPE IS NOT OPEN\n         B     TAPE9900              AND EXIT\nTAPE9900 DS    0H\n         TAPETR ID=EXIT,             TRACE EXITS                       +\n               DATA1=TDDNAME,        .. FOR DDNAME                     +\n               DATA2=TCMD            .. COMMAND\n         CLI   TCMD,$TCMDCLS         CLOSE COMMAND?\n         BNE   TAPE9910              NO\n         OC    TCHAIN,TCHAIN         ANYTHING ON CHAIN?\n         BNZ   TAPE9910              YES\n         ICM   R1,15,TTR1ST          FIRST TRACE ENTRY\n         BZ    TAPE9910              NO TABLE TO FREE\n         L     R0,TTRSIZE            TRACE TABLE SIZE\n         FREEMAIN R,A=(1),LV=(0)     RELEASE TRACE TABLE STORAGE\n         XC    TTR1ST,TTR1ST         CLEAR TRACE TABLE 1ST ENTRY\n         XC    TTRLAST,TTRLAST       CLEAR TRACE TABLE LAST ENTRY\n         XC    TTRCURR,TTRCURR       CLEAR TRACE TABLE CURRENT ENTRY\nTAPE9910 DS    0H\n         L     R13,4(R13)            RESTORE REGISTER 13\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS\n         SR    R15,R15               GIVE GOOD RETURN CODE\n         BR    R14                   RETURN TO CALLER\n*--------------------------------------------------------------------*\n*                                                                    *\n*              ADDRESS MODE SWITCHING                                *\n*                                                                    *\n*--------------------------------------------------------------------*\nAM24     DS    0H\n         LA    R14,0(R14)            CLEAR HIGH BIT(S)\n         BSM   R0,R14                SWITCH TO 24-BIT MODE AND EXIT\nAM31     DS    0H\n         LA    R14,0(R14)            CLEAR HIGH BIT(S)\n         O     R14,X80               TURN ON HIGH BIT\n         BSM   R0,R14                SWITCH TO 31-BIT MODE AND EXIT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              TRACE ROUTINE                                         *\n*                                                                    *\n*--------------------------------------------------------------------*\nTRACE000 DS    0H\n         USING TRENTRY,R1            DEFINE BASE\n         STM   R0,R15,TTRSAVE        SAVE ALL REGISTERS\n         ICM   R1,15,TTRCURR         CURRENT ENTRY\n         BNZ   TRACE010              BUILD TRACE ENTRY\n         L     R2,TTRSIZE            TRACE TABLE SIZE\n         GETMAIN R,LV=(R2)           ACQUIRE TRACE TABLE STORAGE\n         ST    R1,TTR1ST             SAVE TRACE TABLE STORAGE\n         ST    R1,TTRCURR\n         AR    R2,R1                 PLUS TOTAL SIZE\n         SH    R2,=Y(TRENTRYL)       MINUS 1 ENTRY'S LENGTH\n         ST    R2,TTRLAST            SET LAST ENTRY ADDRESS\n         L     R0,TTR1ST             FIRST ENTRY\n         L     R1,TTRSIZE            TOTAL SIZE\n         SR    R2,R2                 CLEAR REGISTER\n         SR    R3,R3                 CLEAR REGISTER\n         MVCL  R0,R2                 INITIALIZE TABLE\n         L     R1,TTR1ST             RESET TO 1ST ENTRY\n         B     TRACE030\nTRACE010 DS    0H\n         C     R1,TTRLAST            USING LAST ENTRY?\n         BNE   TRACE020              NO\n         L     R1,TTR1ST             'WRAP' TABLE\nTRACE020 DS    0H\n         OC    0(TRENTRYL,R1),0(R1)  EMPTY?\n         BZ    TRACE030              YES\n         LA    R1,TRENTRYL(R1)       NEXT ENTRY\nTRACE030 DS    0H\n         MVC   TREID,0(R14)          SET ID\n         MVC   TREF1,TTRDATA1        SET DATA 1\n         MVC   TREF2,TTRDATA2        SET DATA 2\n         MVC   TREF3,TTRDATA3        SET DATA 3\n         XC    TTRDATA1(24),TTRDATA1 CLEAR DATA 1, 2, AND 3\n         ST    R1,TTRCURR            SAVE FOR NEXT CALL\n         LM    R0,R15,TTRSAVE        RESTORE REGISTERS\n         B     8(R14)                RETURN\n*--------------------------------------------------------------------*\n*                                                                    *\n*              CONSTANTS                                             *\n*                                                                    *\n*--------------------------------------------------------------------*\nREADCCW  CCW   CCWCMDRF,*,X'20',$MAXLEN   READ FORWARD\nREWCCW   CCW   CCWCMDRW,*,X'20',1         REWIND THE TAPE\nSENSECCW CCW   CCWCMDSE,*,X'20',16        SENSE CCW\nTTRSIZE  DC    A(500*TRENTRYL)       TRACE TABLE SIZE\nX80      DC    A(X'80000000')\nOPENI    OPEN  (*,INPUT),MF=L\nOPENL    EQU   *-OPENI\nCLOSEI   CLOSE (*),MF=L\nCLOSEL   EQU   *-CLOSEI\nINITDCB  DCB   MACRF=EXCP,           INITIAL TAPE DCB                  +\n               DDNAME=TAPEDDNM,      .. DD NAME SUPPLIED ON 'OPEN'     +\n               DEVD=TA,              .. JUST WORRY ABOUT TAPES         +\n               DSORG=PS              .. USE SEQUENTIAL DSORG\nVOLPRFX  DC    CL3'VOL'\nUCBTEXT  DC    CL58'PINNED BY TAPEMAP'\n         LTORG\n*--------------------------------------------------------------------*\n*                                                                    *\n*              EQUATES                                               *\n*                                                                    *\n*--------------------------------------------------------------------*\n         COPY REGEQU\n$DEN1600 EQU  X'C3'                  1600 BPI\n$DEN6250 EQU  X'D3'                  6250 BPI\n$DEN3480 EQU  X'00'                  3480 BPI\n$MAXLEN  EQU  65535\n$SENSETI EQU  X'20'                  TAPE INDICATE\n$SENSEPE EQU  X'04'                  PE MODE\n$SENSE62 EQU  X'08'                  8303-2 (6250 CAPABLE)\nT99      DS   0C\n         DC   AL2(DALDDNAM),AL2(1),AL2(8)     DDNAME PARAMETERS\n         DC   CL8' '\n         DC   AL2(DALDSNAM),AL2(1),AL2(8)     DSN PARAMETERS\n         DC   CL8' '\n         DC   AL2(DALLABEL),AL2(1),AL2(1)     LABEL TYPE PARAMETERS\n         DC   X'10'                           .. 'BLP'\n         DC   AL2(DALDSSEQ),AL2(1),AL2(2)     DATASET SEQUENCE NUMBER\n         DC   XL2'0001'                       .. 1ST DATASET\n         DC   AL2(DALUNIT),AL2(1),AL2(8)      UNIT PARAMETERS\n         DC   CL8' '\n         DC   AL2(DALVLSER),AL2(1),AL2(6)     VOLSER PARAMETERS\n         DC   CL6' '\n         DC   AL2(DALSTATS),AL2(1),AL2(1)     INITIALIZE STATUS\n         DC   X'04'\n         DC   AL2(DALNDISP),AL2(1),AL2(1)     FINAL STATUS\n         DC   X'08'\n         DC   AL2(DALDEFER),AL2(0),AL2(0)     DEFERRED MOUNT\nT99L     EQU  *-T99\n         COPY TAPECMDS\n*--------------------------------------------------------------------*\n*                                                                    *\n*              COMMAND/STATUS BLOCK                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\nCMDBLOK  TAPEBLOK TYPE=DSECT\n         SPACE 2\n*--------------------------------------------------------------------*\n*                                                                    *\n*              I/O BLOCK                                             *\n*                                                                    *\n*              THERE IS 1 I/O BLOCK PER 'OPEN' TAPE                  *\n*                                                                    *\n*--------------------------------------------------------------------*\nIOBLK    DSECT\nIONEXT   DS    A                     NEXT BLOCK ON CHAIN\nIOPREV   DS    A                     PREVIOUS BLOCK ON CHAIN\nIOECB    DS    F                     ECB\nIOAREA   DS    A                     I/O AREA ADDRESS\nIODDNAME DS    CL8                   DD NAME\nIODCB    DS    (DCBL)X               DCB\n         DS    0D\nIOIOB    DS    (IOBL)X'00'           IOB\nIOREAD   CCW   X'02',*,X'20',$MAXLEN READ FORWARD\nIOREW    CCW   X'07',*,X'20',1       REWIND THE TAPE\nIOSENSE  CCW   X'04',*,X'20',16      SENSE CCW\nIOFLAG   DC    X'00'                 CONTROL FLAGS\n$IOEOT   EQU   X'80'                 TAPE IS AT EOT\n$IODEN   EQU   X'40'                 RECORDING DENSITY DETERMINED\n$IOUEX   EQU   X'20'                 UNIT EXCEPTION OCCURRED\nIODEN    DC    X'00'                 RECORDING DENSITY\nIOBLKL   EQU   *-IOBLK\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MVS COMMUNICATIONS VECTOR TABLE                       *\n*                                                                    *\n*--------------------------------------------------------------------*\n         PRINT NOGEN\n         CVT   DSECT=YES\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MVS UNIT CONTROL BLOCK                                *\n*                                                                    *\n*--------------------------------------------------------------------*\n         IEFUCBOB\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MVS IOB DSECT                                         *\n*                                                                    *\n*--------------------------------------------------------------------*\n         IEZIOB\nIOBL     EQU  *-IOB\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MVS DCB DSECT                                         *\n*                                                                    *\n*--------------------------------------------------------------------*\n         DCBD  DSORG=PS,                                               +\n               DEVD=TA\nDCBL     EQU   *-IHADCB\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MVS PSA DSECT                                         *\n*                                                                    *\n*--------------------------------------------------------------------*\n         IHAPSA DSECT=YES,LIST=NO\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MVS TCB DSECT                                         *\n*                                                                    *\n*--------------------------------------------------------------------*\n         IKJTCB LIST=NO\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MVS DEB DSECT                                         *\n*                                                                    *\n*--------------------------------------------------------------------*\n         IEZDEB\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MVS TIOT DSECT                                        *\n*                                                                    *\n*--------------------------------------------------------------------*\nTIOT     DSECT\n         IEFTIOT1\n*--------------------------------------------------------------------*\n*                                                                    *\n*              TRACE TABLE ENTRIES                                   *\n*                                                                    *\n*--------------------------------------------------------------------*\nTRENTRY  DSECT\nTREID    DS   CL8          TRACE ID\nTREF1    DS   CL8          TRACE FIELD 1\nTREF2    DS   CL8          TRACE FIELD 2\nTREF3    DS   CL8          TRACE FIELD 3\nTRENTRYL EQU  *-TRENTRY    TRACE ENTRY SIZE\n*--------------------------------------------------------------------*\n*                                                                    *\n*              COMMUNICATION PARAMETER LIST                          *\n*                                                                    *\n*--------------------------------------------------------------------*\nCCOM     DSECT\n         IEZCOM\n*--------------------------------------------------------------------*\n*                                                                    *\n*              CONSOLE INPUT BUFFER                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\nCIB      IEZCIB\n*--------------------------------------------------------------------*\n*                                                                    *\n*              ASCB                                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\n         IHAASCB\n*--------------------------------------------------------------------*\n*                                                                    *\n*              OUCB                                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\n         IRAOUCB\n         IEFZB4D0\n         IEFZB4D2\n         END  TAPEEXCP\n./ ADD NAME=TAPEUSRO 0100-99298-99298-1542-01006-01011-00000-SBGOLOB\n          TITLE 'TAPEUSRO - EXCP LEVEL TAPE I/O SUBROUTINE WITH USER OP+\n               N'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TAPEUSRO                                              *\n*                                                                     *\n*  Function:                                                          *\n*  This program is a subroutine that performs tape I/O at the EXCP    *\n*  level.  MVS \"OPEN\" is bypassed, therefore 1) this module must run  *\n*  APF authorized, 2) there is no data set access RACF checking (you  *\n*  can read any data set without having RACF access to it), 3) the    *\n*  tape my be labelled or non-labelled, 4) there are no SMF data set  *\n*  activity records made to log access to the tape's data sets.       *\n*  Since no RACF access check is made to any of the tape's data sets  *\n*  and no SMF records are produced, access to this program should be  *\n*  restricted.                                                        *\n*                                                                     *\n*  The CSECT name will be TAPEEXCP.  This allows the link edit        *\n*  and \"VCON\" references to always use the same module names.         *\n*                                                                     *\n*  This program supports only reads, no tape output is performed.     *\n*  The program's parameter list is mapped by the TAPEBLOK macro.      *\n*                                                                     *\n*  The same TAPEBLOK should be used for all calls to TAPEUSRO.        *\n*                                                                     *\n*  Functions provided are:                                            *\n*     OPEN   TCMD = $TCMDOPN                                          *\n*     READ   TCMD = $TCMDRD                                           *\n*     CLOSE  TCMD = $TCMDCLS                                          *\n*                                                                     *\n*   All functions require the \"DDNAME\" to be specified.  On an OPEN   *\n*   call, the tape unit is verified as a being a supported device,    *\n*   the I/O area for the tape is allocated, and a REWIND command is   *\n*   issued to position the tape to load point. On a READ call, the    *\n*   next physical block of the tape will be read and the I/O area     *\n*   address and data length will be returned to the caller.  On a     *\n*   CLOSE call, the I/O area will be freed.                           *\n*                                                                     *\n*   If a tapemark or the end of tape is reached, no data will be      *\n*   returned.                                                         *\n*                                                                     *\n*   In the event of an I/O error, TAPEUSRO will try to issue a sense  *\n*   command and return the sense info in TSENSE in the parameter      *\n*   block.                                                            *\n*                                                                     *\n*   Multiple tapes may be OPEN at the same time, TAPEUSRO keeps track *\n*   of the tapes by DDNAME.  You must specify the DDNAME on each call.*\n*                                                                     *\n*   This module has all its work areas in the TAPEBLOK data area, so  *\n*   it is re-entrant.  MVS still does not allow I/O from above the    *\n*   16-meg line, so the program is written as 24-bit.                 *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                         TRACE MACRO                                 *\n*                                                                     *\n*        THE TRACE FUNCTION CAPTURES AN 8-BYTE 'ID' AND UP TO 3 8-    *\n*        BYTE DATA ELEMENTS.                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         MACRO\n&NAME    TAPETR &ID=,                                                  +\n               &DATA1=,&RDATA1=,                                       +\n               &DATA2=,&RDATA2=,                                       +\n               &DATA3=,&RDATA3=\n         AIF   (T'&DATA1 NE 'O' AND T'&RDATA1 NE 'O').ERR0010\n         AIF   (T'&DATA2 NE 'O' AND T'&RDATA2 NE 'O').ERR0020\n         AIF   (T'&DATA3 NE 'O' AND T'&RDATA3 NE 'O').ERR0030\n         AIF   (T'&ID EQ 'O').ERR0040\n         AIF   ((T'&DATA3 EQ 'O') AND (T'&RDATA3 EQ 'O')).DATA010\n         AIF   (T'&DATA1 EQ 'O' AND T'&RDATA1 EQ 'O').ERR0050\n         AIF   (T'&DATA2 EQ 'O' AND T'&RDATA2 EQ 'O').ERR0050\n         AIF   ('&SYSPARM' EQ 'NOTRACE').MEXIT\n.DATA010 ANOP\n         AIF   ((T'&DATA2 EQ 'O') AND (T'&RDATA2 EQ 'O')).DATA020\n         AIF   (T'&DATA1 EQ 'O' AND T'&RDATA1 EQ 'O').ERR0060\n.DATA020 ANOP\n         AIF   (T'&DATA1 EQ 'O').DATA040\n         AIF   ('&DATA1'(1,1) EQ '(').DATA030\n         LA    R14,&DATA1         DATA ADDRESS\n         MVC   TTRDATA1,0(R14)    MOVE DATA\n         AGO   .DATA050\n.DATA030 ANOP\n         MVC   TTRDATA1,0&DATA1   MOVE DATA\n         AGO   .DATA050\n.DATA040 ANOP\n         AIF   (T'&RDATA1 EQ 'O').DATA050\n         STCM  &RDATA1,15,TTRDATA1\n.DATA050 ANOP\n         AIF   (T'&DATA2 EQ 'O').DATA070\n         AIF   ('&DATA2'(1,1) EQ '(').DATA060\n         LA    R14,&DATA2         DATA ADDRESS\n         MVC   TTRDATA2,0(R14)    MOVE DATA\n         AGO   .DATA080\n.DATA060 ANOP\n         MVC   TTRDATA2,0&DATA2   MOVE DATA\n         AGO   .DATA080\n.DATA070 ANOP\n         AIF   (T'&RDATA2 EQ 'O').DATA080\n         STCM  &RDATA2,15,TTRDATA2\n.DATA080 ANOP\n         AIF   (T'&DATA3 EQ 'O').DATA100\n         AIF   ('&DATA3'(1,1) EQ '(').DATA090\n         LA    R14,&DATA3         DATA ADDRESS\n         MVC   TTRDATA3,0(R14)    MOVE DATA\n         AGO   .DATA110\n.DATA090 ANOP\n         MVC   TTRDATA3,0&DATA3   MOVE DATA\n         AGO   .DATA110\n.DATA100 ANOP\n         AIF   (T'&RDATA3 EQ 'O').DATA110\n         STCM  &RDATA3,15,TTRDATA3\n.DATA110 ANOP\n         BAL   R14,TRACE000       ENTER TRACE ROUTINE\n&NAME    DC    CL8'&ID'           TRACE ID\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'DATA1 AND RDATA1 ARE MUTUALLY EXCLUSIVE'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'DATA2 AND RDATA2 ARE MUTUALLY EXCLUSIVE'\n         MEXIT\n.ERR0030 ANOP\n         MNOTE 12,'DATA3 AND RDATA3 ARE MUTUALLY EXCLUSIVE'\n         MEXIT\n.ERR0040 ANOP\n         MNOTE 12,'ID PARAMETER IS REQUIRED'\n         MEXIT\n.ERR0050 ANOP\n         MNOTE 12,'DATA3/RDATA3 IS NOT VALID UNLESS BOTH DATA1/RDATA1 A+\n               ND DATA2/RDATA2 ARE SPECIFIED'\n         MEXIT\n.ERR0060 ANOP\n         MNOTE 12,'DATA2/RDATA2 IS NOT VALID UNLESS DATA1/RDATA1 IS SPE+\n               CIFIED'\n.MEXIT   ANOP\n         MEXIT\n         MEND\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPEEXCP CSECT\nTAPEEXCP AMODE 24\nTAPEEXCP RMODE 24\n         USING TAPEEXCP,R12\n         USING PSA,R0                DEFINE PSA BASE\n         USING CMDBLOK,R10           DEFINE PARAMETER BLOCK BASE\n         USING IOBLK,R9              DEFINE BASE\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               SET BASE REG\n         LR    R10,R1                COPY PARAMETER BLOCK ADDRESS\n         LA    R1,TSAVE              OUR SAVE AREA ADDRESS\n         ST    R13,TSAVE+4           SAVE SAVE AREA ADDRESS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S\n         LA    R13,TSAVE             SET SAVE AREA ADDRESS\n         B     TAPE0000              SKIP EYECATCHER\n         DC    CL8'TAPEUSRO'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nTAPE0000 DS    0H\n         TAPETR ID=ENTRY,            TRACE CALLS                       +\n               DATA1=TDDNAME,        .. FOR DDNAME                     +\n               DATA2=TCMD            .. COMMAND\n         CLI   TCMD,$TCMDOPN         OPEN TAPE DCB?\n         BE    OPEN0000              YES\n         CLI   TCMD,$TCMDRD          READ A BLOCK?\n         BE    READ0000              YES\n         CLI   TCMD,$TCMDCLS         CLOSE DCB?\n         BE    CLOSE000              YES\n         MVI   TSTAT,$TSTATIC        INVALID COMMAND\n         B     TAPE9900              EXIT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             OPEN TAPE DCB                                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nOPEN0000 DS    0H\n         TAPETR ID=OPEN\n         ICM   R9,15,TCHAIN          FIRST I/O BLOCK ON THE CHAIN\n         BZ    OPEN0020              NO BLOCK ON CHAIN\nOPEN0010 DS    0H\n         CLC   IODDNAME,TDDNAME      I/O BLOCK ALREADY ON THE CHAIN?\n         BE    OPEN0190              YES.. CANNOT ALLOW A DUPLICATE\n         ICM   R9,15,IONEXT          NEXT BLOCK ON CHAIN\n         BNZ   OPEN0010              PROCESS ALL OF THEM\n* ------------------------------------------------------------------- *\n*             DETERMINE ADDRESS SPACE TYPE                            *\n* ------------------------------------------------------------------- *\nOPEN0020 DS    0H\n         L     R1,PSAANEW            OUR ASCB ADDRESS\n         USING ASCB,R1               DEFINE BASE\n         L     R15,ASCBJBNI          JOB NAME ADDRESS\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         LTR   R15,R15               JOB NAME PRESENT?\n         BNZ   OPEN0030              YES\n         L     R1,ASCBOUCB           OUR OUCB ADDRESS\n         USING OUCB,R1               DEFINE BASE\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         TAPETR ID=OUCBYFL,                                            +\n               RDATA1=R1,                                              +\n               DATA2=OUCBYFL\n         TM    OUCBYFL,OUCBSTT       IS THIS A STARTED TASK?\n         BNO   OPEN0030              NO\n         OI    TASTYPE,$TASSTC       ADDRESS SPACE IS AN STC\n         TAPETR ID=ASIDSTC\nOPEN0030 DS    0H\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         XC    UCBTOKEN,UCBTOKEN     CLEAR THE TOKEN\n         XC    UCBWORK,UCBWORK       CLEAR THE WORK AREA TOO\n* ------------------------------------------------------------------- *\n*             LOCATE UCB FOR REQUESTED DEVICE TYPE                    *\n* ------------------------------------------------------------------- *\nOPEN0035 DS    0H\n         MODESET MODE=SUP,KEY=ZERO   SUPERVISOR STATE, KEY ZERO\n         UCBSCAN ADDRESS,            .. RETURN ADDRESS OF THE UCB      +\n               UCBPTR=UCBADDR,       .. RETURNED ADDRESS               +\n               WORKAREA=UCBWORK,     .. WORKAREA FOR UCBSCAN           +\n               DEVCLASS=TAPE,        .. ONLY NEED TAPE UCB'S           +\n               DYNAMIC=YES,          .. INCLUDE DYNAMICALLY ADDED      +\n               PIN,                  .. DON'T LET ANYONE DELETE IT YET +\n               TEXT=UCBTEXT,         .. REASON FOR PIN                 +\n               PTOKEN=UCBTOKEN       .. TOKEN\n         MODESET MODE=PROB,KEY=NZERO PROBLEM STATE, PROBLEM KEY\n         ICM   R3,15,UCBADDR         FIRST UCB'S ADDRESS\n         USING UCBOB,R3              DEFINE BASE\n         BZ    OPEN0070              NO MORE DEVICES\nOPEN0040 DS    0H\n         TM    UCBSTAT,UCBONLI       IS THIS DEVICE ONLINE?\n         BNO   OPEN0035              NO\n         TM    UCBSTAT,UCBALOC       IS IT ALREADY ALLOCATED?\n         BO    OPEN0035              YES\n         TM    UCBTBYT3,UCB3TAPE     IS DEVICE A TAPE UNIT?\n         BNO   OPEN0035              NO\n         CLI   UCBTBYT4,UCB3480      IS IT A 3480?\n         BE    OPEN0060              YES\n         CLI   TDEVT,$T3480          3480 WANTED?\n         BE    OPEN0035              YES\n         CLI   TDEVT,$T3420B         6250 BPI WANTED?\n         BE    OPEN0050              YES\n         TM    UCBTBYT1,UCBD1600     1600 BPI DRIVE?\n         BO    OPEN0090              YES\n         TM    UCBTBYT2,UCBDUDN1     800/1650 DRIVE?\n         BO    OPEN0090              YES\n         TM    UCBTBYT2,UCBDUDN2     1600/6250 DRIVE?\n         BO    OPEN0090              YES\n         B     OPEN0035              OTHERWISE LOOK FOR ANOTHER UNIT\nOPEN0050 DS    0H\n         TM    UCBTBYT1,UCBD6250     6250 BPI DRIVE?\n         BO    OPEN0080              YES\n         TM    UCBTBYT2,UCBDUDN2     1600/6250 DRIVE?\n         BO    OPEN0080              YES\n         B     OPEN0035              OTHERWISE LOOK FOR ANOTHER UNIT\nOPEN0060 DS    0H\n         CLI   TDEVT,$T3480          3480 WANTED?\n         BNE   OPEN0035              NO\n         MVI   TDENSITY,$DEN3480     SET FOR 3480 DENSITY\n         B     OPEN0100\nOPEN0070 DS    0H\n         MVI   TSTAT,$TSTATNU        NO UNIT AVAILABLE\n         B     TAPE9900              AND EXIT\nOPEN0080 DS    0H\n         MVI   TDENSITY,$DEN6250     SET FOR 6250 BPI DENSITY\n         B     OPEN0100\nOPEN0090 DS    0H\n         MVI   TDENSITY,$DEN1600     SET FOR 1600 BPI DENSITY\n         B     OPEN0100\n* ------------------------------------------------------------------- *\n*             UCB LOCATED                                             *\n* ------------------------------------------------------------------- *\nOPEN0100 DS    0H\n         TAPETR ID=UCBLOC,           UCB HAS BEEN LOCATED              +\n               RDATA1=R3             .. INCLUDE UCB'S ADDRESS\n* ------------------------------------------------------------------- *\n*             ALLOCATE THE UNIT                                       *\n* ------------------------------------------------------------------- *\n         LA    R2,T99RB              DAIR REQUEST BLOCK ADDRESS\n         USING S99RB,R2              DEFINE BASE\n         ST    R2,T99RBA             SET ADDRESS IN POINTER\n         OI    T99RBA,X'80'          SET END OF LIST\n         XC    T99RB(T99RBL),T99RB   CLEAR REQUEST BLOCK\n         MVI   S99RBLN,T99RBL        SET LENGTH\n         MVI   S99VERB,S99VRBAL      SET VERB (ALLOCATE)\n         LA    R1,T99DDPA            FIRST TEXT UNIT POINTER\n         ST    R1,S99TXTPP           SET TEXT POINTER ADDRESS\n         LA    R1,T99DDP             DD PARAMETER'S ADDRESS\n         ST    R1,T99DDPA            SET ADDRESS\n         LA    R1,T99DNP             DSN PARAMETER'S ADDRESS\n         ST    R1,T99DNPA            SET ADDRESS\n         LA    R1,T99LBP             LABEL TYPE PARAMETER'S ADDRESS\n         ST    R1,T99LBPA            SET ADDRESS\n         LA    R1,T99DSP             DATASET SEQUENCE # PARAMETERS\n         ST    R1,T99DSPA            SET ADDRESS\n         LA    R1,T99UTP             UNIT PARAMETER'S ADDRESS\n         ST    R1,T99UTPA            SET ADDRESS\n         LA    R1,T99VLP             UNIT PARAMETER'S ADDRESS\n         ST    R1,T99VLPA            SET ADDRESS\n         LA    R1,T99STP             STATUS (DISP=NEW)\n         ST    R1,T99STPA            SET ADDRESS\n         LA    R1,T99DPP             DISPOSITION (DISP=KEEP)\n         ST    R1,T99DPPA            SET ADDRESS\n         LA    R1,T99DMP             DEFERRED MOUNT PARAMETER\n         ST    R1,T99DMPA            SET ADDRESS\n         OI    T99DMPA,X'80'         SET END OF LIST ADDRESS\n         MVC   T99DDP(T99L),T99      INITIALIZE ALL PARAMETERS\n         MVC   T99DD,TDDNAME         SET DDNAME\n         MVC   T99DN,TDDNAME         SET DSN\n         MVC   T99UT(3),UCBNAME      SET UNIT\n         MVC   T99VL(3),VOLPRFX      SET VOLSER PREFIX\n         MVC   T99VL+3(3),UCBNAME    SET VOLSER SUFFIX\n         LA    R1,T99RBA             POINTER'S ADDRESS\n         DYNALLOC                    ALLOCATE THE DRIVE\n         STH   R15,T99RC             SET RETURN CODE\n         LTR   R15,R15               ALLOCATED SUCCESSFULLY?\n         BNZ   OPEN0200              NO\n* ------------------------------------------------------------------- *\n*             ACQUIRE I/O CONTROL BLOCK                               *\n* ------------------------------------------------------------------- *\n         GETMAIN R,LV=IOBLKL         ACQUIRE CONTROL BLOCK STORAGE\n         LR    R9,R1                 COPY STORAGE ADDRESS\n         LA    R14,TCHAIN            INITIALIZE 'CURRENT' POINTER\n         ICM   R15,15,TCHAIN         FIRST BLOCK ON CHAIN\n         BZ    OPEN0120              END OF CHAIN FOUND\nOPEN0110 DS    0H\n         LR    R14,R15               COPY CURRENT BLOCK'S ADDRESS\n         ICM   R15,15,IONEXT-IOBLK(R15) NEXT ON CHAIN\n         BNZ   OPEN0110              FIND END OF CHAIN\nOPEN0120 DS    0H\n         ST    R14,IOPREV            SET 'PREVIOUS' POINTER\n         XC    IONEXT,IONEXT         ZERO 'NEXT' POINTER\n         ST    R9,IONEXT-IOBLK(R14) 'NEXT' IN PREVIOUS BLOCK\n         MVC   IODDNAME,TDDNAME      SET DD NAME\n* ------------------------------------------------------------------- *\n*             ACQUIRE I/O AREA                                        *\n* ------------------------------------------------------------------- *\n         GETMAIN R,LV=$MAXLEN        ACQUIRE I/O AREA\n         ST    R1,IOAREA             SAVE I/O AREA ADDRESS\n         TAPETR ID=NEWIOBLK,                                           +\n               RDATA1=R9,            .. I/O BLOCK'S ADDRESS            +\n               RDATA2=R1             .. I/O AREA'S ADDRESS\n* ------------------------------------------------------------------- *\n*             INITIALIZE CCW'S                                        *\n* ------------------------------------------------------------------- *\n         MVC   IOREAD,READCCW        INITIALIZE READ CCW\n         MVC   IOREW,REWCCW          INITIALIZE REW CCW\n         MVC   IOSENSE,SENSECCW      INITIALIZE SENSE CCW\n         L     R1,IOAREA             I/O AREA ADDRESS\n         STCM  R1,7,IOREAD+1         INITIALIZE I/O AREA ADDRESS\n         STCM  R1,7,IOREW+1\n         LA    R1,TSENSE             SENSE DATA ADDRESS\n         STCM  R1,7,IOSENSE+1        INITIALIZE SENSE DATA ADDRESS\n* ------------------------------------------------------------------- *\n*             INITIALIZE SENSE INFO                                   *\n* ------------------------------------------------------------------- *\n         XC    TSENSE,TSENSE         INITIALIZE SENSE DATA\n         LA    R5,IOIOB              IOB STORAGE ADDRESS\n         LA    R6,IODCB              DCB STORAGE ADDRESS\n         LA    R7,IODEB              DEB STORAGE ADDRESS\n         USING IOB,R5\n         USING IHADCB,R6\n         USING DEB,R7\n* ------------------------------------------------------------------- *\n*           INITIALIZE IOB                                            *\n* ------------------------------------------------------------------- *\n         XC    IOIOB(IOBL),IOIOB     CLEAR IOB STORAGE\n         MVI   IOBFLAG1,X'02'        SET FLAG BYTE 1\n         ST    R6,IOBDCBPT           SET DCB ADDRESS\n* ------------------------------------------------------------------- *\n*           INITIALIZE DCB                                            *\n* ------------------------------------------------------------------- *\n         MVC   IODCB(DCBL),INITDCB   INITIALIZE DCB\n         MVC   DCBDDNAM,TDDNAME      SET DD NAME\n         LA    R1,DEBBASIC           DEB BASIC SECTION ADDRESS\n         ST    R1,DCBDEBAD           INSERT DEB ADDRESS\n         ST    R5,DCBIOBAD           INSERT IOB ADDRESS\n         MVC   DCBMACRF,DCBMACR      COPY DCB MACRO FORMAT PARAMETERS\n         MVC   DCBIFLGS,DCBIFLG      COPY I/O ERROR FLAGS\n         OI    DCBOFLGS,DCBOFOPN     DCB IS OPEN\n* ------------------------------------------------------------------- *\n*           INITIALIZE DEB                                            *\n* ------------------------------------------------------------------- *\n         XC    DEBPREFX(DEBPREFE-DEBPREFX),DEBPREFX  CLEAR PREFIX\n         XC    DEBBASIC(DEBBASND-DEBBASIC),DEBBASIC  CLEAR BASIC\n         MVC   DEBTCBAD,PSATNEW      SET TCB ADDRESS\n         MVI   DEBAMLNG,16           SET ACCESS METHOD SECTION LENGTH\n         MVI   DEBOFLGS,DEBDSOLD     DISPOSITION 'OLD'\n         MVI   DEBOPATB,DEBLEAVE+DEBINPUT\n         MVI   DEBNMEXT,1            SET NUMBER OF EXTENTS\n         MVI   DEBPRIOR,X'EB'        IT WORKS\n         ST    R6,DEBDCBAD           INSERT ASSOCIATED DCB ADDRESS\n         MVI   DEBDEBID,X'0F'        IDENTIFY THIS AS A DEB\n         STCM  R3,7,DEBSUCBA+1       ASSOCIATED UCB ADDRESS\n         L     R1,CVTPTR             CVT ADDRESS\n         USING CVT,R1                DEFINE CVT BASE\n         MVC   DEBAPPAD,CVTXAPG      I/O APPENDAGE VECTOR TABLE ADDR\n         MVC   DEBSDVM,TDENSITY      SET DENSITY\n* ------------------------------------------------------------------- *\n*           ADD DEB TO DEBCHAIN FROM TCB AND TO DEBTABLE              *\n* ------------------------------------------------------------------- *\n         MODESET MODE=SUP,KEY=ZERO   SUPERVISOR STATE, KEY ZERO\n         L     R1,PSATNEW            OUR TCB ADDRESS FROM THE PSA\n         USING TCB,R1                DEFINE BASE\n         L     R15,TCBDEB            FIRST DEB ON DEB CHAIN\n         LA    R2,DEBBASIC           'BASIC' PORTION OF DEB\nOPEN0130 DS    0H\n         STCM  R15,7,DEBDEBB         INSERT PREVIOUS ADDRESS\n         CS    R15,R2,TCBDEB         ADD OUR DEB TO CHAIN\n         BNE   OPEN0130              UNSUCCESSFUL... TRY AGAIN\n         DEBCHK (R6),                USE DEBCHK (REFERENCE DCB NOT DEB)+\n               AM=EXCP,              .. EXCP ACCESS METHOD             +\n               TYPE=ADD              .. ADD A DEB TO DEBTABLE\n         LR    R2,R15                SAVE RETURN CODE\n         MODESET MODE=PROB,KEY=NZERO PROBLEM STATE, PROBLEM KEY\n         LTR   R2,R2                 DEB ADDED SUCCESSFULLY?\n         BZ    OPEN0140              YES\n         MVI   TSTAT,$TSTATAF        DEB ADD FAILED\n         STC   R2,TDEBRC             RETURN RETURN CODE\n         B     TAPE9900              AND EXIT\nOPEN0140 DS    0H\n         TM    TASTYPE,$TASSTC       RUNNING AS A STARTED TASK?\n         BNO   OPEN0160              NO\n         TAPETR ID=STCWTO\n         ICM   R1,15,TCOMM           COMMUNICATION PARM LIST PRESENT?\n         BNZ   OPEN0150              YES\n         LA    R15,TCOMM             OUTPUT AREA FOR EXTRACT\n         EXTRACT (R15),FIELDS=COMM   'EXTRACT' COMMUNCATION BLOCK ADDR\n         ICM   R1,15,TCOMM           COMMUNICATION BLOCK ADDRESS\nOPEN0150 DS    0H\n         BZ    OPEN0180              NO\n         USING CCOM,R1               DEFINE BASE\n         L     R1,COMCIBPT           CIB ADDRESS FROM COMM PARM LIST\n         USING CIB,R1                DEFINE CIB BASE\n         XC    TCID,TCID             CLEAR CONSOLE ID\n         MVC   TCID+3,CIBCONID       SAVE CONSOLE ID\n         GETMAIN R,LV=WTO1L          ACQUIRE STORAGE FOR WTO\n         LR    R5,R1                 COPY WTO ADDRESS\n         MVC   0(WTO1L,R5),WTO1I     INITIALIZE WTO MESSAGE\n         MVC   15(6,R5),TAPEVOL      SET VOLSER INTO WTO\n         MVC   33(8,R5),TDDNAME      SET DDNAME INTO WTO\n         MVC   51(3,R5),UCBNAME      SET DEVICE NAME INTO WTO\n         WTO   MF=(E,(R5)),          ISSUE WTO                         +\n               CONSID=TCID           .. TO THIS CONSOLE\n         FREEMAIN R,A=(R5),LV=WTO1L  RELEASE WTO STORAGE\n         B     OPEN0170\nOPEN0160 DS    0H\n         TAPETR ID=BATCHWTO\n         GETMAIN R,LV=WTO2L          ACQUIRE STORAGE FOR WTO\n         LR    R5,R1                 COPY WTO ADDRESS\n         MVC   0(WTO2L,R5),WTO2I     INITIALIZE WTO MESSAGE\n         MVC   36(3,R5),UCBNAME      SET DEVICE NAME INTO WTO\n         WTO   MF=(E,(R5))           ISSUE WTO\n         FREEMAIN R,A=(R5),LV=WTO2L  RELEASE WTO STORAGE\nOPEN0170 DS    0H\n         TAPETR ID=OPENREW\n         LA    R1,IOREW              REWIND CCW\n         BAL   R11,IO0000            REWIND THE TAPE\n         TAPETR ID=OPENDONE\n         B     TAPE9900              AND EXIT\nOPEN0180 DS    0H\n         TAPETR ID=NOCCOM\n         MVI   TSTAT,$TSTATNC        NO CONSOLE COMMUNICATION BLOCK\n         B     TAPE9900              AND EXIT\nOPEN0190 DS    0H\n         TAPETR ID=DUPOPEN\n         MVI   TSTAT,$TSTATOP        TAPE IS ALREADY OPEN\n         B     TAPE9900              AND EXIT\nOPEN0200 DS    0H\n         TAPETR ID=ALOCFAIL\n         MVI   TSTAT,$TSTAT99        DAIR FAILURE\n         B     TAPE9900              AND EXIT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             READ A BLOCK                                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nREAD0000 DS    0H\n         TAPETR ID=READ\n         ICM   R9,15,TCHAIN          FIRST BLOCK ON CHAIN\nREAD0010 DS    0H\n         BZ    READ0070              I/O BLOCK NOT FOUND\n         CLC   IODDNAME,TDDNAME      CORRECT I/O BLOCK FOUND?\n         BE    READ0020              YES\n         ICM   R9,15,IONEXT          NEXT ON CHAIN\n         B     READ0010              KEEP LOOKING\nREAD0020 DS    0H\n         LA    R5,IOIOB              IOB ADDRESS\n         LA    R6,IODCB              DCB ADDRESS\n         LA    R7,IODEB              DEB ADDRESS\n         LA    R1,IOREAD             READ CCW'S ADDRESS\n         BAL   R11,IO0000            LINK TO I/O ROUTINE\n         CLI   TSTAT,$TSTATOK        I/O SUCCESSFUL?\n         BNE   TAPE9900              NO.. GET OUTTA HERE\n         SR    R0,R0                 CLEAR REGISTER\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R0,3,IOREAD+6         LENGTH ATTEMPTED\n         ICM   R1,3,IOBSTDRD+14      RESIDUAL LENGTH\n         SR    R0,R1                 LENGTH READ\n         STCM  R0,3,TLENGTH          SET LENGTH\n         MVC   TIOAREA,IOAREA        SET I/O AREA ADDRESS\n         TAPETR ID=READOK,           READ COMPLETE                     +\n               DATA1=TIOAREA,        .. I/O AREA ADDRESS               +\n               DATA2=TLENGTH         .. DATA LENGTH\n         TM    IOFLAG,$IODEN         DENSITY DETERMINED?\n         BO    TAPE9900              YES\n         OI    IOFLAG,$IODEN         DENSITY WILL BE DETERMINED\n         CLI   DEBSDVM,$DEN3480      3480 TAPE DRIVE?\n         BE    READ0050              YES\n         LA    R1,IOSENSE            SENSE CCW\n         BAL   R11,IO0000            ISSUE SENSE COMMAND\n         CLI   TSTAT,$TSTATOK        I/O SUCCESSFUL?\n         BNE   TAPE9900              NO.. BYPASS DENSITY STUFF\n         TM    TSENSE+3,$SENSEPE     PE MODE?\n         BO    READ0030              YES\n         TM    TSENSE+9,$SENSE62     6250 CAPABLE?\n         BO    READ0040              YES\n         MVI   IODEN,2               DENSITY IS 800 BPI\n         B     READ0060\nREAD0030 DS    0H\n         TAPETR ID=MODE3\n         MVI   IODEN,3               DENSITY IS 1600 BPI\n         B     READ0060\nREAD0040 DS    0H\n         TAPETR ID=MODE4\n         MVI   IODEN,4               DENSITY IS 6250 BPI\n         B     READ0060\nREAD0050 DS    0H\n         TAPETR ID=MODE5\n         MVI   IODEN,5               TAPE IS A 3480\nREAD0060 DS    0H\n         MVC   TDENSITY,IODEN        COPY DENSITY\n         B     TAPE9900              AND EXIT\nREAD0070 DS    0H\n         TAPETR ID=NOTOPEN\n         MVI   TSTAT,$TSTATNO        TAPE IS NOT OPEN\n         B     TAPE9900              AND EXIT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             PERFORM I/O                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nIO0000   DS    0H\n         TAPETR ID=IO,               STARTING I/O                      +\n               DATA1=(R1)            .. CCW BEING ISSUED\n         CLI   0(R1),CCWCMDRW        IS COMMAND REWIND?\n         BE    IO0010                YES\n         CLI   0(R1),CCWCMDRU        IS COMMAND REWIND/UNLOAD?\n         BE    IO0010                YES\n         TM    IOFLAG,$IOEOT         TAPE AT PHYSICAL EOT?\n         BO    IO0100                YES..\nIO0010   DS    0H\n         ST    R1,IOBSTART           SET CCW STRING ADDRESS\n         LA    R1,IOECB              ECB'S ADDRESS\n         STCM  R1,7,IOBECBPB         SET ECB ADDRESS\n         LA    R1,IODCB              DCB'S ADDRESS\n         ST    R1,IOBDCBPT           SET DCB ADDRESS\nIO0020   DS    0H\n         TAPETR ID=EXCP\n         XC    IOECB,IOECB           CLEAR THE ECB\n         EXCP  IOBSTDRD              START THE I/O\n         WAIT  ECB=IOECB             WAIT FOR I/O COMPLETION\n         TAPETR ID=EXCPDONE,         I/O COMPLETED                     +\n               DATA1=IOECB           .. SAVE ECB\n         CLI   IOECB,X'44'           RETRY THE I/O?\n         BE    IO0020                YES\n         CLI   IOECB,X'7F'           SUCCESSFUL?\n         BNE   IO0050                NO\n         L     R1,IOBSTART           FIRST CCW\n         CLI   0(R1),CCWCMDRW        REWIND?\n         BE    IO0030                YES\n         CLI   0(R1),CCWCMDRU        REWIND/UNLOAD?\n         BNE   IO0040                NO\nIO0030   DS    0H\n         TAPETR ID=REWOUND\n         NI    IOFLAG,255-$IOEOT     RESET EOT FLAG\nIO0040   DS    0H\n         TAPETR ID=GOODIO\n         MVI   TSTAT,$TSTATOK        I/O WAS SUCCESSFUL\n         BR    R11                   AND RETURN\nIO0050   DS    0H\n         TAPETR ID=BADIO\n         L     R1,IOBSTART           FIRST CCW IN STRING\n         CLI   0(R1),CCWCMDSE        WAS I/O A SENSE COMMAND?\n         BE    IO0120                YES.. SENSE FAILED\n         NI    IOFLAG,255-$IOUEX     TURN OFF UNIT EXCEPTION FLAG\n         TM    IOBFLAG1,IOBIOERR     UNIT EXCEPTION?\n         BNO   IO0060                NO\n         OI    IOFLAG,$IOUEX         INDICATE UNIT EXCEPTION OCCURRED\n         TAPETR ID=UNITEXPT\nIO0060   DS    0H\n         LA    R1,IOSENSE            SENSE CCW'S ADDRESS\n         ST    R1,IOBSTART           SET CCW STRING ADDRESS\nIO0070   DS    0H\n         XC    IOECB,IOECB           CLEAR THE ECB\n         TAPETR ID=SENSEIO\n         EXCP  IOBSTDRD              START THE I/O\n         WAIT  ECB=IOECB             WAIT FOR I/O COMPLETION\n         TAPETR ID=SNSEDONE,         SENSE HAS COMPLETED               +\n               DATA1=IOECB\n         CLI   IOECB,X'44'           RETRY THE I/O?\n         BE    IO0070                YES\n         CLI   IOECB,X'7F'           SUCCESSFUL?\n         BNE   IO0110                NO\n         TAPETR ID=GOODSNSE,         SENSE SUCCESSFUL                  +\n               DATA1=TSENSE,         .. FIRST 8 BYTES OF SENSE DATA    +\n               DATA2=TSENSE+8        .. NEXT 8 BYTES\n         TM    IOFLAG,$IOUEX         UNIT EXEPTION ON ORIGINAL I/O?\n         BO    IO0080                YES\n         TAPETR ID=IOEWSNSE\n         MVI   TSTAT,$TSTATIE        I/O ERROR WITH SENSE AVAILABLE\n         BR    R11                   RETURN\nIO0080   DS    0H\n         TM    TSENSE+4,$SENSETI     TAPE AT PHYSICAL EOT?\n         BO    IO0090                YES\n         TAPETR ID=TAPEMARK\n         MVI   TSTAT,$TSTATTM        TAPE MARK REACHED\n         BR    R11                   EXIT\nIO0090   DS    0H\n         TAPETR ID=PEOT\n         OI    IOFLAG,$IOEOT         TAPE IS AT EOT\nIO0100   DS    0H\n         TAPETR ID=PEOT\n         MVI   TSTAT,$TSTATPE        EOT REACHED (PHYSICAL END)\n         BR    R11                   EXIT\nIO0110   DS    0H\n         TAPETR ID=SFAIL1\n         MVI   TSTAT,$TSTATIX        SENSE FAILED AFTER AN I/O ERROR\n         BR    R11                   EXIT\nIO0120   DS    0H\n         TAPETR ID=SFAIL2\n         MVI   TSTAT,$TSTATSF        SENSE FAILED\n         BR    R11                   EXIT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             CLOSE TAPE DCB                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCLOSE000 DS    0H\n         TAPETR ID=CLOSE\n         ICM   R9,15,TCHAIN          FIRST BLOCK ON CHAIN\nCLOSE010 DS    0H\n         BZ    CLOSE110              I/O BLOCK NOT FOUND\n         CLC   IODDNAME,TDDNAME      CORRECT I/O BLOCK FOUND?\n         BE    CLOSE020              YES\n         ICM   R9,15,IONEXT          NEXT ON CHAIN\n         B     CLOSE010              KEEP LOOKING\n* ------------------------------------------------------------------- *\n*             REMOVE THIS I/O BLOCK FROM THE CHAIN                    *\n* ------------------------------------------------------------------- *\nCLOSE020 DS    0H\n         TAPETR ID=IOBLKFD,          I/O BLOCK LOCATED                 +\n               RDATA1=R9             .. I/O BLOCK'S ADDRESS\n         LA    R2,T99RB              REQUEST BLOCK ADDRESS\n         MVI   S99VERB,S99VRBUN      SET VERB (UNALLOCATE)\n         MVC   T99DD,TDDNAME         SET DDNAME\n         OI    T99DDPA,X'80'         SET END OF LIST\n         LA    R1,T99RBA             POINTER'S ADDRESS\n         DYNALLOC                    FREE THE UNIT\n         STH   R1,T99RC              SAVE RETURN CODE\n         LTR   R15,R15               SUCCESSFUL?\n         BZ    CLOSE030              YES\n         TAPETR ID=FREEFAIL,                                           +\n               RDATA1=R15\n         MVI   TSTAT,$TSTAT99        SVC 99 FAILED\n         B     TAPE9900              EXIT\nCLOSE030 DS    0H\n         TAPETR ID=UNCHAIN\n         ICM   R1,15,IOPREV          PREVIOUS BLOCK ON THE CHAIN\n         BZ    CLOSE040              NO PREVIOUS BLOCK\n         MVC   IONEXT-IOBLK(4,R1),IONEXT   CHAIN PREVIOUS TO NEXT\nCLOSE040 DS    0H\n         ICM   R1,15,IONEXT          NEXT BLOCK ON CHAIN\n         BZ    CLOSE050              NO NEXT BLOCK\n         MVC   IOPREV-IOBLK(4,R1),IOPREV   CHAIN NEXT TO PREVIOUS\nCLOSE050 DS    0H\n         LA    R5,IOIOB              IOB ADDRESS\n         LA    R6,IODCB              DCB ADDRESS\n         LA    R7,IODEB              DEB ADDRESS\n* ------------------------------------------------------------------- *\n*             SIMULATE \"CLOSE\"                                        *\n* ------------------------------------------------------------------- *\n         MODESET MODE=SUP,KEY=ZERO   SUPERVISOR STATE, KEY ZERO\n         DEBCHK (R6),                USE DEBCHK (REFERENCE DCB NOT DEB)+\n               TYPE=DELETE           .. TO DELETE THE DEB FROM DEBTABLE\n         LTR   R15,R15               DEBCHK SUCCESSFUL?\n         BNZ   CLOSE100              NO\n         TAPETR ID=DEBDELOK\nCLOSE060 DS    0H\n         LA    R2,DEBBASIC           BASIC PORTION OF DEB\n         L     R1,PSATNEW            CURRENT TCB ADDRESS FROM PSA\n         USING TCB,R1                DEFINE DCB BASE\n         SR    R3,R3                 CLEAR REGISTER\n         ICM   R3,7,TCBDEB+1         1ST DEB ON DEB CHAIN\n         LA    R4,TCBDEB             ADDRESS'S ADDRESS\nCLOSE070 DS    0H\n         CR    R3,R2                 IS THIS THE CORRECT DEB?\n         BE    CLOSE080              YES\n         LA    R4,DEBDEBAD-DEBBASIC(R3)   NEXT DEB ADDRESS ADDRESS\n         ICM   R3,7,DEBDEBB-DEBBASIC(R3)  NEXT DEB\n         BNZ   CLOSE070              CHECK AGAIN\n         B     CLOSE090              COULDN'T FIND THE DEB\nCLOSE080 DS    0H\n         ICM   R2,7,DEBDEBB          NEXT DEB ON CHAIN\n         ICM   R2,8,0(R4)            SAVE ACCESS METHOD SECTION LENGTH\n         ICM   R3,15,0(R4)           CS WILL USE ALL 4 BYTES\n         CS    R3,R2,0(R4)           REMOVE DEB FROM DEB CHAIN\n         BNE   CLOSE060              SOMETHING CHANGED, TRY AGAIN\n         MODESET MODE=PROB,KEY=NZERO RETURN TO OUR NORMAL SELF\n         TAPETR ID=FREEIO\n         L     R1,IOAREA             I/O AREA ADDRESS\n         FREEMAIN R,A=(1),LV=$MAXLEN FREE I/O AREA\n         FREEMAIN R,A=(9),LV=IOBLKL  FREE I/O BLOCK\n         TAPETR ID=CLSEDONE\n         MVI   TSTAT,$TSTATOK        STATUS\n         B     TAPE9900              AND EXIT\nCLOSE090 DS    0H\n         TAPETR ID=NODEB\n         MVI   TSTAT,$TSTATXD        DEB NOT FOUND\n         MODESET MODE=PROB,KEY=NZERO RETURN TO OUR NORMAL SELF\n         B     TAPE9900              AND EXIT\nCLOSE100 DS    0H\n         TAPETR ID=DEBDELF\n         MVI   TSTAT,$TSTATDF        DEBCHK TYPE=DELETE FAILED\n         STC   R15,TDEBRC            RETURN RETURN CODE\n         MODESET MODE=PROB,KEY=NZERO RETURN TO OUR NORMAL SELF\n         B     TAPE9900              AND EXIT\nCLOSE110 DS    0H\n         TAPETR ID=NOTOPEN\n         MVI   TSTAT,$TSTATNO        TAPE IS NOT OPEN\n         B     TAPE9900              AND EXIT\nTAPE9900 DS    0H\n         TAPETR ID=EXIT,             TRACE EXITS                       +\n               DATA1=TDDNAME,        .. FOR DDNAME                     +\n               DATA2=TCMD            .. COMMAND\n         CLI   TCMD,$TCMDCLS         CLOSE COMMAND?\n         BNE   TAPE9910              NO\n         OC    TCHAIN,TCHAIN         ANYTHING ON CHAIN?\n         BNZ   TAPE9910              YES\n         ICM   R1,15,TTR1ST          FIRST TRACE ENTRY\n         BZ    TAPE9910              NO TABLE TO FREE\n         L     R0,TTRSIZE            TRACE TABLE SIZE\n         FREEMAIN R,A=(1),LV=(0)     RELEASE TRACE TABLE STORAGE\n         XC    TTR1ST,TTR1ST         CLEAR TRACE TABLE 1ST ENTRY\n         XC    TTRLAST,TTRLAST       CLEAR TRACE TABLE LAST ENTRY\n         XC    TTRCURR,TTRCURR       CLEAR TRACE TABLE CURRENT ENTRY\nTAPE9910 DS    0H\n         L     R13,4(R13)            RESTORE REGISTER 13\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS\n         SR    R15,R15               GIVE GOOD RETURN CODE\n         BR    R14                   RETURN TO CALLER\n*--------------------------------------------------------------------*\n*                                                                    *\n*              ADDRESS MODE SWITCHING                                *\n*                                                                    *\n*--------------------------------------------------------------------*\nAM24     DS    0H\n         LA    R14,0(R14)            CLEAR HIGH BIT(S)\n         BSM   R0,R14                SWITCH TO 24-BIT MODE AND EXIT\nAM31     DS    0H\n         LA    R14,0(R14)            CLEAR HIGH BIT(S)\n         O     R14,X80               TURN ON HIGH BIT\n         BSM   R0,R14                SWITCH TO 31-BIT MODE AND EXIT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              TRACE ROUTINE                                         *\n*                                                                    *\n*--------------------------------------------------------------------*\nTRACE000 DS    0H\n         USING TRENTRY,R1            DEFINE BASE\n         STM   R0,R15,TTRSAVE        SAVE ALL REGISTERS\n         ICM   R1,15,TTRCURR         CURRENT ENTRY\n         BNZ   TRACE010              BUILD TRACE ENTRY\n         L     R2,TTRSIZE            TRACE TABLE SIZE\n         GETMAIN R,LV=(R2)           ACQUIRE TRACE TABLE STORAGE\n         ST    R1,TTR1ST             SAVE TRACE TABLE STORAGE\n         ST    R1,TTRCURR\n         AR    R2,R1                 PLUS TOTAL SIZE\n         SH    R2,=Y(TRENTRYL)       MINUS 1 ENTRY'S LENGTH\n         ST    R2,TTRLAST            SET LAST ENTRY ADDRESS\n         L     R0,TTR1ST             FIRST ENTRY\n         L     R1,TTRSIZE            TOTAL SIZE\n         SR    R2,R2                 CLEAR REGISTER\n         SR    R3,R3                 CLEAR REGISTER\n         MVCL  R0,R2                 INITIALIZE TABLE\n         L     R1,TTR1ST             RESET TO 1ST ENTRY\n         B     TRACE030\nTRACE010 DS    0H\n         C     R1,TTRLAST            USING LAST ENTRY?\n         BNE   TRACE020              NO\n         L     R1,TTR1ST             'WRAP' TABLE\nTRACE020 DS    0H\n         OC    0(TRENTRYL,R1),0(R1)  EMPTY?\n         BZ    TRACE030              YES\n         LA    R1,TRENTRYL(R1)       NEXT ENTRY\nTRACE030 DS    0H\n         MVC   TREID,0(R14)          SET ID\n         MVC   TREF1,TTRDATA1        SET DATA 1\n         MVC   TREF2,TTRDATA2        SET DATA 2\n         MVC   TREF3,TTRDATA3        SET DATA 3\n         XC    TTRDATA1(24),TTRDATA1 CLEAR DATA 1, 2, AND 3\n         ST    R1,TTRCURR            SAVE FOR NEXT CALL\n         LM    R0,R15,TTRSAVE        RESTORE REGISTERS\n         B     8(R14)                RETURN\n*--------------------------------------------------------------------*\n*                                                                    *\n*              CONSTANTS                                             *\n*                                                                    *\n*--------------------------------------------------------------------*\nREADCCW  CCW   CCWCMDRF,*,X'20',$MAXLEN   READ FORWARD\nREWCCW   CCW   CCWCMDRW,*,X'20',1         REWIND THE TAPE\nSENSECCW CCW   CCWCMDSE,*,X'20',16        SENSE CCW\nTTRSIZE  DC    A(500*TRENTRYL)       TRACE TABLE SIZE\nX80      DC    A(X'80000000')\nINITDCB  DCB   MACRF=EXCP,           INITIAL TAPE DCB                  +\n               DDNAME=TAPEDDNM,      .. DD NAME SUPPLIED ON 'OPEN'     +\n               DEVD=TA,              .. JUST WORRY ABOUT TAPES         +\n               DSORG=PS              .. USE SEQUENTIAL DSORG\nwTO1I    WTO   'MOUNT TAPE XXXXXX FOR DDNAME XXXXXXXX ON DRIVE XXX',   +\n               CONSID=,                                                +\n               DESC=2,                                                 +\n               MF=L\nWTO1L    EQU   *-WTO1I               LIST FORM'S TOTAL LENGTH\nWTO2I    WTO   'MOUNT TAPE FOR TAPEMAP ON DRIVE XXX',                  +\n               ROUTCDE=3,                                              +\n               MF=L\nWTO2L    EQU   *-WTO2I               LIST FORM'S TOTAL LENGTH\nVOLPRFX  DC    C'VOL'\nUCBTEXT  DC    CL58'PINNED BY TAPEMAP'\n         LTORG\n*--------------------------------------------------------------------*\n*                                                                    *\n*              EQUATES                                               *\n*                                                                    *\n*--------------------------------------------------------------------*\n         COPY REGEQU\n$DEN1600 EQU  X'C3'                  1600 BPI\n$DEN6250 EQU  X'D3'                  6250 BPI\n$DEN3480 EQU  X'00'                  3480 BPI\n$MAXLEN  EQU  65535\n$SENSETI EQU  X'20'                  TAPE INDICATE\n$SENSEPE EQU  X'04'                  PE MODE\n$SENSE62 EQU  X'08'                  8303-2 (6250 CAPABLE)\nT99      DS   0C\n         DC   AL2(DALDDNAM),AL2(1),AL2(8)     DDNAME PARAMETERS\n         DC   CL8' '\n         DC   AL2(DALDSNAM),AL2(1),AL2(8)     DSN PARAMETERS\n         DC   CL8' '\n         DC   AL2(DALLABEL),AL2(1),AL2(1)     LABEL TYPE PARAMETERS\n         DC   X'10'                           .. 'BLP'\n         DC   AL2(DALDSSEQ),AL2(1),AL2(2)     DATASET SEQUENCE NUMBER\n         DC   XL2'0001'                       .. 1ST DATASET\n         DC   AL2(DALUNIT),AL2(1),AL2(8)      UNIT PARAMETERS\n         DC   CL8' '\n         DC   AL2(DALVLSER),AL2(1),AL2(6)     VOLSER PARAMETERS\n         DC   CL6' '\n         DC   AL2(DALSTATS),AL2(1),AL2(1)     INITIALIZE STATUS\n         DC   X'04'\n         DC   AL2(DALNDISP),AL2(1),AL2(1)     FINAL STATUS\n         DC   X'08'\n         DC   AL2(DALDEFER),AL2(0),AL2(0)     DEFERRED MOUNT\nT99L     EQU  *-T99\n         COPY TAPECMDS\n*--------------------------------------------------------------------*\n*                                                                    *\n*              COMMAND/STATUS BLOCK                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\nCMDBLOK  TAPEBLOK TYPE=DSECT\n         SPACE 2\n*--------------------------------------------------------------------*\n*                                                                    *\n*              I/O BLOCK                                             *\n*                                                                    *\n*              THERE IS 1 I/O BLOCK PER 'OPEN' TAPE                  *\n*                                                                    *\n*--------------------------------------------------------------------*\nIOBLK    DSECT\nIONEXT   DS    A                     NEXT BLOCK ON CHAIN\nIOPREV   DS    A                     PREVIOUS BLOCK ON CHAIN\nIOECB    DS    F                     ECB\nIOAREA   DS    A                     I/O AREA ADDRESS\nIODDNAME DS    CL8                   DD NAME\nIODCB    DS    (DCBL)X               DCB\nIODEB    DS    128X'00'              DEB\n         DS    0D\nIOIOB    DS    (IOBL)X'00'           IOB\nIOREAD   CCW   X'02',*,X'20',$MAXLEN READ FORWARD\nIOREW    CCW   X'07',*,X'20',1       REWIND THE TAPE\nIOSENSE  CCW   X'04',*,X'20',16      SENSE CCW\nIOFLAG   DC    X'00'                 CONTROL FLAGS\n$IOEOT   EQU   X'80'                 TAPE IS AT EOT\n$IODEN   EQU   X'40'                 RECORDING DENSITY DETERMINED\n$IOUEX   EQU   X'20'                 UNIT EXCEPTION OCCURRED\nIODEN    DC    X'00'                 RECORDING DENSITY\nIOBLKL   EQU   *-IOBLK\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MVS COMMUNICATIONS VECTOR TABLE                       *\n*                                                                    *\n*--------------------------------------------------------------------*\n         PRINT NOGEN\n         CVT   DSECT=YES\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MVS UNIT CONTROL BLOCK                                *\n*                                                                    *\n*--------------------------------------------------------------------*\n         IEFUCBOB\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MVS IOB DSECT                                         *\n*                                                                    *\n*--------------------------------------------------------------------*\n         IEZIOB\nIOBL     EQU  *-IOB\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MVS DCB DSECT                                         *\n*                                                                    *\n*--------------------------------------------------------------------*\n         DCBD  DSORG=PS,                                               +\n               DEVD=TA\nDCBL     EQU   *-IHADCB\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MVS PSA DSECT                                         *\n*                                                                    *\n*--------------------------------------------------------------------*\n         IHAPSA DSECT=YES,LIST=NO\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MVS TCB DSECT                                         *\n*                                                                    *\n*--------------------------------------------------------------------*\n         IKJTCB LIST=NO\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MVS DEB DSECT                                         *\n*                                                                    *\n*--------------------------------------------------------------------*\n         IEZDEB\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MVS TIOT DSECT                                        *\n*                                                                    *\n*--------------------------------------------------------------------*\nTIOT     DSECT\n         IEFTIOT1\n*--------------------------------------------------------------------*\n*                                                                    *\n*              TRACE TABLE ENTRIES                                   *\n*                                                                    *\n*--------------------------------------------------------------------*\nTRENTRY  DSECT\nTREID    DS   CL8          TRACE ID\nTREF1    DS   CL8          TRACE FIELD 1\nTREF2    DS   CL8          TRACE FIELD 2\nTREF3    DS   CL8          TRACE FIELD 3\nTRENTRYL EQU  *-TRENTRY    TRACE ENTRY SIZE\n*--------------------------------------------------------------------*\n*                                                                    *\n*              COMMUNICATION PARAMETER LIST                          *\n*                                                                    *\n*--------------------------------------------------------------------*\nCCOM     DSECT\n         IEZCOM\n*--------------------------------------------------------------------*\n*                                                                    *\n*              CONSOLE INPUT BUFFER                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\nCIB      IEZCIB\n*--------------------------------------------------------------------*\n*                                                                    *\n*              ASCB                                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\n         IHAASCB\n*--------------------------------------------------------------------*\n*                                                                    *\n*              OUCB                                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\n         IRAOUCB\n         IEFZB4D0\n         IEFZB4D2\n         END  TAPEEXCP\n./ ADD NAME=TMAPCBT\n          TITLE 'TMAPCBT - CBT COMPRESSED FILES PROCESSOR'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TMAPCBT - CBT compressed files processor              *\n*                                                                     *\n*  Function:                                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTMAPCBT  CSECT\n         USING TMAPCBT,R12\n         USING TMAPCOMM,R11\n         STM   R14,R12,12(R13)     SAVE REGS\n         LR    R12,R15             SET BASE REG\n         B     CBT0000             SKIP EYECATCHER\n         DC    CL8'TMAPCBT'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nCBT0000  DS    0H\n         LA    R15,CBTSAVE         OUR SAVE AREA ADDRESS\n         ST    R13,4(R15)          CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R15,8(R13)          CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R15             SET SAVE AREA ADDRESS\n         TMAPTR ID=ENTRY,          TRACE ENTRY                         +\n               DATA1=COMMFLAG,                                         +\n               DATA2=COMMRECA\n         TM    COMMFLAG,$COMMLST   'CLEAN-UP' CALL?\n         BO    CBT0200             YES\n         L     R10,COMMRECA        TAPE I/O AREA'S ADDRESS\n         SR    R9,R9               CLEAR FOR LENGTH\n         ICM   R9,3,COMMRECL       PHYSICAL BLOCK SIZE\n         TM    COMMFLAG,$COMMINQ   INQUIRE CALL?\n         BNO   CBT0100             NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     RECFM of CBT compressed records is VB with min LRECL 14 and     *\n*     max LRECL 94.                                                   *\n*                                                                     *\n*     Testing process for CBT data sets is:                           *\n*                                                                     *\n*     Verify that the record fits VB format and LRECL of all records  *\n*     in the first tape block is in the range 14 to 94.               *\n*                                                                     *\n*     Verify bitmap matches data.                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TMAPTR ID=INQCALL\n         CLM   R9,3,0(R10)         RECORD LENGTH MATCH LENGTH IN BDW?\n         BNE   EXIT0008            NO\n         OC    2(2,R10),2(R10)     BB PORTION OF BDW VALID?\n         BNZ   EXIT0008            NO\n         OC    6(2,R10),6(R10)     BB PORTION OF RDW VALID?\n         BNZ   EXIT0008            NO\n         LA    R10,4(R10)          SKIP BDW\n         SH    R9,H4               MINUS BDW LENGTH\n         BNH   EXIT0008            NO GOOD\n         SR    R2,R2               CLEAR FOR RECORD LENGTH'S\nCBT0010  DS    0H\n         ICM   R2,3,0(R10)         RECORD LENGTH FROM RDW\n         CH    R2,H14              TOO LOW?\n         BL    EXIT0008            YES.. NO GOOD\n         CH    R2,H94              TOO LARGE?\n         BH    EXIT0008            YES.. NO GOOD\n         LR    R3,R2               COPY RECORD SIZE\n         SH    R3,H14              MINUS LENGTH AND BITMAP SIZES\n         BZ    CBT0050             NO DATA\n         LA    R4,4(R10)           FIRST BITMAP BYTE\n         SR    R1,R1               CLEAR REGISTER\n         LA    R5,10               NUMBER OF BITMAP BYTES\nCBT0020  DS    0H\n         LA    R6,8                BITS PER BYTE\n         ICM   R1,8,0(R4)          INSERT CURRENT BITMAP BYTE\nCBT0030  DS    0H\n         LTR   R1,R1               BIT ON?\n         BNM   CBT0040             NO, CORRESPONDS TO A BLANK\n         BCTR  R3,0                MINUS 1\nCBT0040  DS    0H\n         SLL   R1,1                SHIFT 1 BIT\n         BCT   R6,CBT0030          LOOP\n         LA    R4,1(R4)            NEXT BIT MAP BYTE\n         BCT   R5,CBT0020          LOOP\n         LTR   R3,R3               MUST BE ZERO..\n         BNZ   EXIT0008            SORRY, IT DOESN'T MATCH\nCBT0050  DS    0H\n         AR    R10,R2              NEXT RDW'S ADDRESS\n         SR    R9,R2               MINUS LAST RECORD'S LENGTH\n         BM    EXIT0008            WRONG\n         BZ    CBT0060             IT ALL ADD'S UP\n         BH    CBT0010             TRY NEXT RECORD\nCBT0060  DS    0H\n         MVC   PRTDATA(HEADINGL),HEADING\n         BAL   R8,PRT0000          PRINT SUB HEADING\n         OI    COMMFLAG,$COMMSUB   SET SUB-FUNCTION FLAG FOR TMAPUPDT\n         L     R15,AUPDT           IEBUPDTE PROCESSOR ENTRY POINT\n         BALR  R14,R15             CALL IEBUPDTE PROCESSOR\n         B     EXIT0000            AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*      R9 Length left in block                                        *\n*      R8 Address of current logical record                           *\n*      R7 Current bit map address in current logical record           *\n*      R6 Current data address in current logical record              *\n*      R5 Data length in current logical record                       *\n*      R4 Output address                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCBT0100  DS    0H\n         TMAPTR ID=NEWBLOCK\n         TM    CBTFLAG,$ERROR      ERROR FLAG ON?\n         BO    EXIT0000            YES\n         LA    R8,4(R10)           FIRST RDW IN THE BLOCK\n         SH    R9,H4               MINUS BDW LENGTH\nCBT0110  DS    0H\n         TMAPTR ID=NEWRECD,        TRACE EACH RECORD                   +\n               RDATA1=R8           .. RECORD ADDRESS\n         LA    R7,4(R8)            FIRST BIT MAP BYTE\n         LA    R6,14(R8)           FIRST DATA BYTE\n         SR    R5,R5               CLEAR FOR LENGTH\n         IC    R5,1(R8)            LENGTH OF THIS RECORD\n         SH    R5,H14              MINUS RDW AND BIT MAP SIZES\n         LA    R4,EXPNDATA         FIRST BYTE IN EXPANDED AREA\n         MVC   EXPNDATA,EXPNDATA-1 CLEAR TO ALL BLANKS\n         SR    R1,R1               INITIALIZE REGISTER\n         LA    R3,10               BIT MAP LOOP COUNTER\nCBT0120  DS    0H\n         LA    R2,8                BITS PER BYTE\n         ICM   R1,8,0(R7)          CURRENT BIT MAP BYTE\nCBT0130  DS    0H\n         LTR   R1,R1               TEST REGISTER\n         BNM   CBT0140             IF ZERO OR POSITIVE, BIT IS OFF\n         MVC   0(1,R4),0(R6)       COPY DATA BYTE\n         LA    R6,1(R6)            NEXT BYTE IN DATA\n         BCTR  R5,0                MINUS 1 USED\nCBT0140  DS    0H\n         LA    R4,1(R4)            NEXT BYTE IN OUTPUT AREA\n         SLL   R1,1                SHIFT REGISTER LEFT 1 BIT\n         BCT   R2,CBT0130          LOOP\n         LA    R7,1(R7)            NEXT BIT MAP BYTE\n         BCT   R3,CBT0120          LOOP\n         LTR   R5,R5               ALL DATA BYTES USED?\n         BNZ   ERR0010             NO.. SERIOUS PROBLEM\n         TMAPTR ID=CALLSUB         TRACE CALLS TO SUB-FUNCTION (UPDT)\n         LA    R1,EXPNDATA         EXPANDED DATA AREA\n         ST    R1,COMMRECA         SET ADDRESS FOR SUB-FUNCTION\n         L     R15,AUPDT           IEBUPDTE FILE PROCESSOR ENTRY POINT\n         BALR  R14,R15             LINK TO SUB-FUNCTION\n         LH    R1,0(R8)            CURRENT RECORD'S LENGTH\n         AR    R8,R1               NEXT LOGICAL RECORD\n         SR    R9,R1               MINUS LENGTH OF LAST RECORD\n         BH    CBT0110             PROCESS THIS RECORD\n         B     EXIT0000            END OF BLOCK, EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              END-OF-FILE CLEAN-UP                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\nCBT0200  DS    0H\n         NI    COMMFLAG,255-$COMMSUB\n         B     EXIT0000            END OF BLOCK, EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              ERROR SITUATIONS                                       *\n*                                                                     *\n*---------------------------------------------------------------------*\nERR0010  DS    0H\n         MVC   PRTDATA(MSG1L),MSG1 SET MESSAGE\n         BAL   R8,PRT0000          PRINT MESSAGE\n         OI    COMMFLAG,$ERROR     SET ERROR FLAG\n         B     EXIT0000            AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PRINTING                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         MVI   PRTCMD,$PRTPRT      REQUEST PRINT\n         MVI   PRTCC,C' '          SINGLE SPACE\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         BR    R8                  RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             EXIT                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS   0H\n         TMAPTR ID=EXIT0000         EXITING, RC=0\n         SR    R15,R15              SET RETURN CODE TO ZERO\n         B     CBT9900              AND RETURN\nEXIT0008 DS    0H\n         TMAPTR ID=EXIT0008         EXITING, RC=8\n         LA    R15,8                SET RETURN CODE TO 8\nCBT9900  DS    0H\n         L     R13,4(R13)           RESTORE REGISTER 13                 ASE01670\n         L     R14,12(R13)          RESTORE REGISTER 14\n         LM    R0,R12,20(R13)       RESTORE ALL OTHER REGISTERS         ASE01680\n         BR    R14                  RETURN TO CALLER                    ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCBTSAVE  DC    18F'0'               REGISTER SAVE AREA\nH4       DC    H'4'                 BDW LENGTH\nH14      DC    H'14'                MIN RECORD LENGTH\nH94      DC    H'94'                MAX RECORD LENGTH\nCBTFLAG  DC    X'00'                FLAGS\n$ERROR   EQU   X'80'                .. SERIOUS ERROR HAS OCCURRED\n         SPACE 1\n         DC    C' '\nEXPNDATA DC    CL80' '\n         SPACE 1\nHEADING  DC    C'DATA SET IS A CBT COMPRESSED UNLOAD'\nHEADINGL EQU   *-HEADING\nMSG1     DC    C'** BIT-MAP/DATA LENGTH MIS-MATCH'\nMSG1L    EQU   *-MSG1\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK  TYPE=CSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              LITERALS                                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         LTORG\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTMAPCOMM TMAPCOMM TYPE=DSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  TMAPCBT\n./ ADD NAME=TMAPCOMM 0100-99298-99298-1542-00209-00214-00000-SBGOLOB\n*---------------------------------------------------------------------*\n*                                                                     *\n*          COMMON AREA MAPPING MACRO                                  *\n*                                                                     *\n*     This macro will generate either the 'common' module CSECT or    *\n*     a DSECT to map the 'common' module.  'Common' is used for       *\n*     constants and work areas that are required by several modules   *\n*     allowing some elimination of duplicated data and to allow       *\n*     inter-module communication.                                     *\n*                                                                     *\n*     The trace table code is also incorporated into the 'TMAPCOMM'.  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n&NAME    TMAPCOMM &TYPE=\n         AIF   (T'&NAME EQ 'O').NONAME\n         AIF   ('&TYPE' EQ 'CSECT').CSECT\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n         MNOTE 12,'INVALID TYPE'\n         MEXIT\n.CSECT   ANOP\n&NAME    CSECT\n         AGO   .NODSECT\n.DSECT   ANOP\n&NAME    DSECT\n.NODSECT ANOP\n*---------------------------------------------------------------------*\n*                                                                     *\n*          ADDRESS CONSTANTS                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DC    CL8'TMAPCOMM'\nACOMM    DC    A(TMAPCOMM)         COMMON MODULE\n         DC    CL8'TAPEDCB'\nADCB     DC    V(TMAPDCB)          DCB INFO CONVERTER\n         DC    CL8'TAPEEXCP'\nATAPEIO  DC    V(TAPEEXCP)         TAPE I/O MODULE ADDRESS\n         DC    CL8'TMAPMAIN'\nAMAIN    DC    V(TMAPMAIN)         MAINLINE MODULE ADDRESS\n         DC    CL8'TMAPPARM'\nAPARM    DC    V(TMAPPARM)         PARAMETER CONVERTER\n         DC    CL8'TMAPPRT'\nAPRT     DC    V(TMAPPRT)          PRINT MODULE ADDRESS\n*---------------------------------------------------------------------*\n*                                                                     *\n*          File processor table                                       *\n*                                                                     *\n*     On the first record following a tapemark, the main line         *\n*     program calls each module in the following list until one       *\n*     of them signals that it 'recognizes' the data.  The search      *\n*     stops when the first module signals it 'knows' the data.        *\n*     If a file may be detected by more than one file processor       *\n*     like SMP/E MCS files, the order of search will determine        *\n*     the file type.                                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\nPROCTBLE DS    0A\n         TMAPPROC TMAPCBT            CBT COMPRESSED DATASETS\n         TMAPPROC TMAPCOPY           IEBCOPY\n         TMAPPROC TMAPDSS            DF/DSS BACK-UPS\n         TMAPPROC TMAPFDR            FDR BACK-UPS\n         TMAPPROC TMAPLABL           STANDARD LABELS\n         TMAPPROC TMAPMOVE           IEHMOVE\n         TMAPPROC TMAPMCS            SMP/E MCS\nAUPDT    TMAPPROC TMAPUPDT           IEBUPDTE\n         DC    X'FF'                 END OF LIST\n*---------------------------------------------------------------------*\n*                                                                     *\n*          CURRENT RECORD ADDRESS AND LENGTH                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMRECA DC    A(0)                CURRENT RECORD'S ADDRESS\nCOMMRECL DC    AL2(0)              CURRENT RECORD'S LENGTH\n*---------------------------------------------------------------------*\n*                                                                     *\n*          TRACE CONTROL                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DS    0A\n         DC    CL4'1ST'            FIRST TRACE ENTRY\nTR1ST    DC    A(0)\n         DC    CL4'LAST'           LAST TRACE ENTRY\nTRLAST   DC    A(0)\n         DC    CL4'CURR'           CURRENT TRACE ENTRY\nTRCURR   DC    A(0)\nTRADDR   DC    A(0)                TRACE TABLE STORAGE ADDRESS\nTRR14    DC    A(0)                REGISTER 14 SAVE AREA\nTRDATA1  DC    CL8' '              TRACE DATA ITEM 1\nTRDATA2  DC    CL8' '              TRACE DATA ITEM 2\nTRSIZE   DC    A(1000*TRENTRYL)    TRACE TABLE SIZE\n*---------------------------------------------------------------------*\n*                                                                     *\n*          GLOBAL DATA                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMCFPE DC    A(0)                CURRENT FILE PROCESSOR TABLE ENTRY\nCOMMPARM DC    A(0)                ADDRESS OF EXEC STATEMENT PARM DATA\nCOMMMEML DC    H'0'                LENGTH OF MEMBER ON PRINT LINE\nCOMMMEM# DC    H'0'                NUMBER OF MEMBERS PER LINE\nCOMMFLAG DC    X'00'               GLOBAL CONTROL FLAGS\n$COMMINQ EQU   X'80'               .. 'INQUIRY' CALLS IN PROGRESS\n$COMM1ST EQU   X'40'               .. FIRST RECORD OF FILE\n$COMMLST EQU   X'20'               .. 'CLEAN-UP' IN PROGRESS\n$COMMSUB EQU   X'10'               .. 'SUB-FUNCTION' CALL\n$COMMNOM EQU   X'08'               .. NO PDS MEMBERS\n$ABORT   EQU   X'04'               .. SERIOUS ERROR, ABORT\n$COMMFUL EQU   X'02'               .. MAP FULL TAPE\n$ABEND   EQU   X'01'               .. ABEND ON EXIT\nCOMMVOL  DC    CL6'XXXXXX'         VOLSER FOR WTO\nCOMMDEVT DC    C' '                TAPE DEVICE TYPE\nCOMMSUBH DC    CL120' '            SUB HEADING\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMMAXL DC    PL3'60'             MAXIMUM LINES PER PAGE\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*          ADD TRACE ENTRY                                            *\n*                                                                     *\n*  During program initialization, TMAPMAIN acquires storage for the   *\n*  trace table and sets COMM1ST, COMMLAST, and COMMCURR.  TMAPMAIN    *\n*  also sets R11 to the address of TMAPCOMM and all other modules     *\n*  depend on this remaining unchanged.  Any module except this        *\n*  module may call the trace routine.  Macro TMAPTR generates the     *\n*  calling sequence.  R14 is the only register altered by the trace   *\n*  macro.                                                             *\n*                                                                     *\n*  The trace table is a \"wrap-around\" table.  COMM1ST is the first    *\n*  entry's address, COMMLAST is the last entry's address, and         *\n*  COMMCURR is the address of the last entry added to the table.      *\n*  When a trace entry is added to the table, the calling module's     *\n*  name, an 8-byte ID, and up to 2 8-byte fields are captured.        *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*      This code depends on:                                          *\n*           R11  'TMAPCOMM' address                                   *\n*           R12  current module's base address                        *\n*                and the module's name must be at 10 bytes (0A hex)   *\n*                into the module                                      *\n*           R14  trace id's address and R14 + 8 will be the return    *\n*                address                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nTRACE000 DS    0H\n         USING &NAME,R11           DEFINE BASE\n         USING TRENTRY,R1          DEFINE BASE\n         STM   R0,R15,TRCESAVE     SAVE ALL REGISTERS\n         L     R1,TRCURR           CURRENT TRACE ENTRY\n         OC    0(TRENTRYL,R1),0(R1)    EMPTY ENTRY?\n         BZ    TRACE010            YES.. USE THIS ENTRY\n         LA    R1,TRENTRYL(R1)     NEXT TRACE ENTRY\n         C     R1,TRLAST           BEYOND END OF TABLE?\n         BNH   TRACE010            NO\n         L     R1,TR1ST            'WRAP' TRACE TABLE\nTRACE010 DS    0H\n         ST    R1,TRCURR           SAVE CURRENT TRACE ENTRY ADDRESS\n         MVC   TREMOD,10(R12)      COPY MODULE NAME\n         MVC   TREID,0(R14)        COPY TRACE ID\n         MVC   TREDATA1,TRDATA1    COPY TRACE DATA 1\n         MVC   TREDATA2,TRDATA2    COPY TRACE DATA 2\n         XC    TRDATA1,TRDATA1     CLEAR TRACE DATA\n         XC    TRDATA2,TRDATA2     CLEAR TRACE DATA\n         LM    R0,R15,TRCESAVE     RESTORE ALL REGISTERS\n         B     8(R14)              RETURN\nTRCESAVE DS    16F                 REGISTER SAVE AREA\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*          TRACE TABLE ENTRY                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nTRENTRY  DSECT\nTREMOD   DS    CL8                 MODULE NAME\nTREID    DS    CL8                 TRACE ID\nTREDATA1 DS    CL8                 TRACE DATA 1\nTREDATA2 DS    CL8                 TRACE DATA 2\nTRENTRYL EQU   *-TRENTRY           ENTRY LENGTH\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*          File processor table entries                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nPROCDSCT DSECT\nPROCNAME DS    CL8                 MODULE'S NAME\nPROCEPA  DS    AL4                 MODULE'S ENTRY POINT\nPROCL    EQU   *-PROCDSCT          LENGTH OF EACH ENTRY\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*          ABEND REASON CODES                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\nABEND001 EQU   1                   ABEND DUE TO STATUS FROM TAPEEXCP\nABEND002 EQU   2                   UNKNOWN STATUS CODE FROM TAPEEXCP\nABEND003 EQU   3                   ERROR DURING TAPE I/O CLOSE\nABEND004 EQU   4                   UNKNOWN COMMAND PASSED TO TMAPPRT\nABEND005 EQU   5                   UNKNOWN VTOC RECORD TYPE IN TMAPDSS\nABEND006 EQU   6                   LENGTH NEGATIVE IN 'NEXTTRAK' (DSS)\n         MEXIT\n.NONAME  ANOP\n         MNOTE 12,'NAME IS REQUIRE WHEN TYPE=DSECT'\n.MEXIT   ANOP\n         MEXIT\n         MEND\nTMAPCOMM TMAPCOMM TYPE=CSECT\n         YREGS\n         END\n./ ADD NAME=TMAPCOPY\n          TITLE 'TMAPCOPY - IEBCOPY FILES PROCESSOR'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TMAPCOPY - IEBCOPY files processor                    *\n*                                                                     *\n*  Function:                                                          *\n*     This module prints DSORG, RECFM, BLKSIZE, LRECL, and names of   *\n*     the members in the unloaded PDS.                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nTMAPCOPY CSECT\n         USING TMAPCOPY,R12\n         USING TMAPCOMM,R11\n         STM   R14,R12,12(R13)     SAVE REGS\n         LR    R12,R15             SET BASE REG\n         B     COPY0000            SKIP EYECATCHER\n         DC    CL8'TMAPCOPY'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nCOPY0000 DS    0H\n         LA    R15,COPYSAVE        OUR SAVE AREA ADDRESS\n         ST    R13,4(R15)          CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R15,8(R13)          CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R15             SET SAVE AREA ADDRESS\n         L     R10,COMMRECA        CURRENT RECORD'S ADDRESS\n         TMAPTR ID=ENTRY,          TRACE ENTRY                         +\n               DATA1=COMMFLAG\n         TM    COMMFLAG,$COMMLST   'CLEAN-UP' CALL?\n         BO    COPY0200            YES\n         TM    COMMFLAG,$COMMINQ   INQUIRE CALL?\n         BNO   COPY0100            NO\n         TMAPTR ID=INQCALL,DATA1=0(R10)\n         CLC   COPYID1(COPYIDL),0(R10) IEBCOPY DATA?\n         BE    COPY0010            NO\n         CLC   COPYID2(COPYIDL),0(R10) IEBCOPY DATA?\n         BNE   EXIT0008            NO\nCOPY0010 DS    0H\n         MVC   PRTDATA(HEADINGL),HEADING\n         BAL   R9,PRT0000          PRINT SUB-HEADING\n         ST    R10,DCBRECA         SET RECORD ADDRESS\n         MVC   DCBDSOD,H12         DISPLACEMENT TO DSORG\n         MVC   DCBRFMD,H18         DISPLACEMENT TO RECORD FORMAT\n         MVC   DCBBSZD,H14         DISPLACEMENT TO BLOCK SIZE\n         MVC   DCBRSZD,H16         DISPLACEMENT TO RECORD SIZE\n         MVC   DCBUNTD,H27         DISPLACEMENT TO DEVICE TYPE\n         LA    R1,DCBBLOK          DCB CONVERTER INTERFACE PARMS\n         L     R15,ADCB            DCB CONVERTER ENTRY POINT\n         BALR  R14,R15             CONVERT DCB INFO\n         MVC   PRDSO,DCBDSO        COPY DATA SET ORGANIZATION\n         MVC   PRRFM,DCBRFM        COPY RECORD FORMAT\n         MVC   PRBSZ,DCBBSZ        COPY BLOCK SIZE\n         MVC   PRRSZ,DCBRSZ        COPY RECORD SIZE\n         MVC   PRUNT,DCBUNT        COPY UNIT TYPE\n         MVC   PRTDATA(DCBMSGL),DCBMSG\n         BAL   R9,PRT0000          PRINT DCB MESSAGE\n         TM    COMMFLAG,$COMMNOM   NO-MEMBERS?\n         BO    EXIT0000            SKIP SUB-HEADING\n         MVC   COMMMEML,H10        SET PRINT OUTPUT LENGTH\n         MVC   COMMMEM#,H12        SET NUMBER PER LINE\n         MVC   COMMSUBH(MEMHEADL),MEMHEAD\n         MVC   PRTDATA(MEMHEADL),MEMHEAD\n         BAL   R9,PRT0000          PRINT HEADING\n         B     EXIT0000            AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PRINT MEMBERS                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOPY0100 DS    0H\n         TMAPTR ID=MEMBER\n         TM    COMMFLAG,$COMMNOM   NO-MEMBERS?\n         BO    EXIT0000            EXIT\n         TM    COMMFLAG,$COMM1ST   FIRST RECORD OF DATASET?\n         BO    COPY0150            YES\n         TM    COPYFLAG,$COPYBYP   BYPASSED 2ND BLOCK YET?\n         BNO   COPY0140            NO... WELL, DO IT\n         TM    COPYFLAG,$COPYEND   END OF DIRECTORY FOUND?\n         BO    EXIT0000            YES... EXIT\n         LA    R2,8(R10)           SKIP BDW\n         LH    R3,COMMRECL         RECORD SIZE (TOTAL)\n         SH    R3,H8               MINUS BDW LENGTH\nCOPY0110 DS    0H\n         LA    R4,22(R2)           FIRST MEMBER NAME\n         LH    R5,20(R2)           AMOUNT USED\n         SH    R5,H2               MINUS LENGTH'S LENGTH\n         SR    R6,R6               INITIALIZE REGISTER\nCOPY0120 DS    0H\n         CLC   XFFFF,0(R4)         END OF DIRECTORY?\n         BE    COPY0130            YES\n         MVC   PRTDATA(8),0(R4)    MOVE MEMBER NAME\n         MVI   PRTCMD,$PRTMEM      SET COMMAND FOR TMAPPRT\n         LA    R1,PRTBLOK          PRINT MODULE INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         NI    11(R4),X'1F'        TURN OFF ALL BUT LENGTH BITS\n         IC    R6,11(R4)           LOAD LENGTH (IN HALF WORDS)\n         LA    R6,12(R6,R6)        DOUBLE LENGTH + 12\n         AR    R4,R6               NEXT MEMBER\n         SR    R5,R6               MINUS LENGTH USED\n         BP    COPY0120            PROCESS ALL OF DIRECTORY BLOCK\n         AH    R2,DIRBLKSZ         PLUS LENGTH OF DIRECTORY + CNTL DATA\n         SH    R3,DIRBLKSZ         MINUS LENGTH\n         BP    COPY0110            IF MORE DATA, PROCESS IT\n         B     EXIT0000            OTHERWISE EXIT\nCOPY0130 DS    0H\n         TMAPTR ID=DIREND\n         OI    COPYFLAG,$COPYEND   SET END OF DIRECTORY FLAG\n         B     EXIT0000            AND EXIT\nCOPY0140 DS    0H\n         TMAPTR ID=BYPASS\n         OI    COPYFLAG,$COPYBYP   SET BYPASSED FLAG\n         B     EXIT0000            AND EXIT\nCOPY0150 DS    0H\n         TMAPTR ID=1STPASS\n         NI    COPYFLAG,255-$COPYEND\n         NI    COPYFLAG,255-$COPYBYP\n         B     EXIT0000            EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              'CLEAN-UP'                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOPY0200 DS    0H\n         MVI   PRTCMD,$PRTMEM      REQUEST PRINT\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         B     EXIT0000            EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PRINTING                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         MVI   PRTCMD,$PRTPRT      REQUEST PRINT\n         MVI   PRTCC,C' '          SINGLE SPACE\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         BR    R9                  RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             EXIT                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         TMAPTR ID=EXIT0000          EXITING, RC=0\n         SR    R15,R15               SET RETURN CODE TO ZERO\n         B     COPY9900              AND RETURN\nEXIT0008 DS    0H\n         TMAPTR ID=EXIT0008          EXITING, RC=8\n         LA    R15,8                 SET RETURN CODE TO 8\nCOPY9900 DS    0H\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         L     R14,12(R13)           RESTORE REGISTER 14\n         LM    R0,R12,20(R13)        RESTORE ALL OTHER REGISTERS        ASE01680\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOPYSAVE DC    18F'0'                REGISTER SAVE AREA\nH2       DC    H'2'                  CONSTANT\nH8       DC    H'8'                  CONSTANT\nH10      DC    H'10'                 CONSTANT\nH12      DC    H'12'                 CONSTANT\nH14      DC    H'14'                 CONSTANT\nH16      DC    H'16'                 CONSTANT\nH18      DC    H'18'                 CONSTANT\nH27      DC    H'27'                 CONSTANT\nDIRBLKSZ DC    Y(256+12+8)           SIZE OF DIRECTORY BLOCK + CNTL\nCOPYID1  DC    H'60,0,56,0'            --- ONE OF THESE IS  ---\nCOPYIDL  EQU   *-COPYID1               --- NORMALLY PRESENT ---\nCOPYID2  DC    H'64,0,60,0'            --- IN IEBCOPY FILES ---\nXFFFF    DC    X'FFFFFFFF'           END OF DIRECTORY MARKER\nCOPYFLAG DC    X'00'                 FLAGS/SWITCHES\n$COPYEND EQU   X'80'                 .. END OF DIRECTORY FOUND\n$COPYBYP EQU   X'40'                 .. 2ND BLOCK BYPASSED\nHEADING  DC    C'THIS IS AN IEBCOPY UNLOADED DATASET'\nHEADINGL EQU   *-HEADING\nDCBMSG   DS    0C\n         DC    C'DATA SET ORG:'\nPRDSO    DC    CL4' '\n         DC    C'   RECORD FORMAT:'\nPRRFM    DC    CL4' '\n         DC    C'   BLOCK SIZE:'\nPRBSZ    DC    CL6' '\n         DC    C'   RECORD SIZE:'\nPRRSZ    DC    CL6' '\n         DC    C'   DEVICE TYPE:'\nPRUNT    DC    CL6' '\nDCBMSGL  EQU   *-DCBMSG\nMEMHEAD  DC    C'UNLOADED MEMBERS:'\nMEMHEADL EQU   *-MEMHEAD\nMEMMSG   DS    0C\nPRMEM    DC    CL08' '\nMEMMSGL  EQU   *-MEMMSG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK  TYPE=CSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DCB CONVERTER INTERFACE BLOCK                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDCBBLOK  DCBBLOK  TYPE=CSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTMAPCOMM TMAPCOMM TYPE=DSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  TMAPCOPY\n./ ADD NAME=TMAPDCB\n          TITLE 'TMAPDCB - DCB INFO CONVERTER'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TMAPDCB  - DCB info converter                         *\n*                                                                     *\n*  Function:                                                          *\n*     Converts DSORG, RECFM, BLKSIZE, LRECL, and device type.         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTMAPDCB  CSECT\n         USING TMAPDCB,R12\n         USING TMAPCOMM,R11\n         USING DCBBLOK,R10\n         STM   R14,R12,12(R13)     SAVE REGS\n         LR    R12,R15             SET BASE REG\n         B     DCB0000             SKIP EYECATCHER\n         DC    CL8'TMAPDCB'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nDCB0000  DS    0H\n         LR    R10,R1              COPY PARAMETER BLOCK ADDRESS\n         LA    R15,DCBSAVE         OUR SAVE AREA\n         ST    R13,4(R15)          CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R15,8(R13)          CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R15             SET SAVE AREA ADDRESS\n         TMAPTR ID=ENTRY           TRACE ENTRY\n*---------------------------------------------------------------------*\n*              CONVERT DSORG                                          *\n*---------------------------------------------------------------------*\n         SR    R2,R2               CLEAR REGISTER\n         ICM   R2,3,DCBDSOD        DISPLACEMENT TO DSORG\n         BZ    DCB0040             NO DISPLACEMENT\n         A     R2,DCBRECA          PLUS RECORD'S BASE ADDRESS\n         LA    R1,DSORGTBL         DSORG TABLE ADDRESS\n         USING DSORGD,R1           DEFINE BASE\n         SR    R15,R15             CLEAR WORK REGISTER\nDCB0010  DS    0H\n         CLI   0(R1),X'FF'         END OF TABLE?\n         BE    DCB0030             YES.. TRY VSAM\n         IC    R15,DSORGID         DSORG ID\n         EX    R15,DSORGTM         IS IT THIS ORGANIZATION?\n         BO    DCB0020             YES\n         LA    R1,DSORGL(R1)       NEXT ENTRY\n         B     DCB0010             LOOP\nDSORGTM  TM    0(R2),0             TEST DSORG\nDCB0020  DS    0H\n         MVC   DCBDSO,DSORGNM      MOVE DSORG NAME\n         B     DCB0050             CONVERT RECORD FORMAT\nDCB0030  DS    0H\n         CLC   VSAMID,0(R2)        IS THIS A VSAM DATASET?\n         BNE   DCB0040             NO\n         MVC   DCBDSO,VSAM         DSORG IS VSAM\n         B     DCB0050             CONVERT RECORD FORMAT\nDCB0040  DS    0H\n         MVC   DCBDSO,UNKN         DSORG IS UNKNOWN\n         DROP  R1\n*---------------------------------------------------------------------*\n*              CONVERT RECORD FORMAT                                  *\n*---------------------------------------------------------------------*\nDCB0050  DS    0H\n         SR    R2,R2               CLEAR REGISTER\n         ICM   R2,3,DCBRFMD        RECORD FORMAT DISPLACEMENT\n         BZ    DCB0080             NO DISPLACEMENT\n         A     R2,DCBRECA          RECORD FORMAT ADDRESS\n         LA    R1,RECFMTBL         RECORD FORMAT TABLE ADDRESS\n         USING RECFMD,R1           DEFINE BASE\nDCB0060  DS    0H\n         CLI   0(R1),X'FF'         END OF TABLE?\n         BE    DCB0080             YES\n         CLC   RECFMID,0(R2)       ID LOCATED?\n         BE    DCB0070             YES\n         LA    R1,RECFML(R1)       NEXT ENTRY\n         B     DCB0060             LOOP\nDCB0070  DS    0H\n         MVC   DCBRFM,RECFMNM      SET RECORD FORMAT\n         B     DCB0090             CONVERT BLOCK SIZE\nDCB0080  DS    0H\n         MVC   DCBRFM,UNKN         RECORD FORMAT IS UNKNOWN\n         DROP  R1\n*---------------------------------------------------------------------*\n*              CONVERT BLOCK SIZE                                     *\n*---------------------------------------------------------------------*\nDCB0090  DS    0H\n         SR    R2,R2               CLEAR REGISTER\n         ICM   R2,3,DCBBSZD        BLOCK SIZE DISPLACEMENT\n         BZ    DCB0100             NO DISPLACEMENT\n         A     R2,DCBRECA          BLOCK SIZE'S ADDRESS\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R1,3,0(R2)          BLOCK SIZE IN BINARY\n         CVD   R1,DWORD            CONVERT TO DECIMAL\n         MVC   DCBBSZ,EDWORD       INITIALIZE WITH EDIT WORD\n         ED    DCBBSZ,DWORD+5      EDIT BLOCK SIZE\n         B     DCB0110             CONVERT RECORD SIZE\nDCB0100  DS    0H\n         MVC   DCBBSZ,UNKN         BLOCK SIZE IS UNKNOWN\n*---------------------------------------------------------------------*\n*              CONVERT RECORD SIZE                                    *\n*---------------------------------------------------------------------*\nDCB0110  DS    0H\n         SR    R2,R2               CLEAR REGISTER\n         ICM   R2,3,DCBRSZD        RECORD SIZE DISPLACEMENT\n         BZ    DCB0120             NO DISPLACEMENT\n         A     R2,DCBRECA          RECORD SIZE'S ADDRESS\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R1,3,0(R2)          RECORD SIZE IN BINARY\n         CVD   R1,DWORD            CONVERT TO DECIMAL\n         MVC   DCBRSZ,EDWORD       INITIALIZE WITH EDIT WORD\n         ED    DCBRSZ,DWORD+5      EDIT RECORD SIZE\n         B     DCB0130             CONVERT RECORD SIZE\nDCB0120  DS    0H\n         MVC   DCBRSZ,UNKN         BLOCK SIZE IS UNKNOWN\n*---------------------------------------------------------------------*\n*              CONVERT DEVICE TYPE                                    *\n*---------------------------------------------------------------------*\nDCB0130  DS    0H\n         SR    R2,R2               CLEAR REGISTER\n         ICM   R2,3,DCBUNTD        UNIT TYPE DISPLACEMENT\n         BZ    DCB0160             NO DISPLACEMENT\n         A     R2,DCBRECA          UNIT TYPE'S ADDRESS\n         LA    R1,UNITTBL          UNIT TYPE TABLE\n         USING UNITD,R1            DEFINE BASE\nDCB0140  DS    0H\n         CLI   0(R1),X'FF'         END OF TABLE?\n         BE    DCB0160             YES\n         CLC   UNITID,0(R2)        UNIT ID LOCATED?\n         BE    DCB0150             YES\n         LA    R1,UNITL(R1)        NEXT UNIT\n         B     DCB0140             LOOP\nDCB0150  DS    0H\n         MVC   DCBUNT,UNITNAME     SET UNIT NAME\n         B     EXIT0000            AND EXIT\nDCB0160  DS    0H\n         MVC   DCBUNT,UNKN         UNIT TYPE IS UNKNOWN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             EXIT                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         TMAPTR ID=EXIT0000          EXITING, RC=0\n         SR    R15,R15               SET RETURN CODE TO ZERO\n         B     DCB9900               AND RETURN\nEXIT0008 DS    0H\n         TMAPTR ID=EXIT0008          EXITING, RC=8\n         LA    R15,8                 SET RETURN CODE TO 8\nDCB9900  DS    0H\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         L     R14,12(R13)           RESTORE REGISTER 14                ASE01670\n         LM    R0,R12,20(R13)        RESTORE ALL OTHER REGISTERS        ASE01680\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDWORD    DC     D'0'                  DOUBLE WORD WORK AREA\nDCBSAVE  DC     18F'0'                REGISTER SAVE AREA\nVSAMID   DC     X'0008'               VSAM DSORG ID\nVSAM     DC     CL4'VSAM'             CONSTANT\nUNKN     DC     CL6'UNKN'             CONSTANT\nEDWORD   DC     XL6'402020202120'     EDIT WORD\n* ------------------------------------------------------------------- *\n*              DSORG TABLE                                            *\n* ------------------------------------------------------------------- *\nDSORGTBL DS     0C\n         DC     AL1(DS1DSGIS),CL4'ISAM'\n         DC     AL1(DS1DSGPS),CL4'PS'\n         DC     AL1(DS1DSGDA),CL4'DA'\n         DC     AL1(DS1DSGPO),CL4'PO'\n         DC     X'FF'\n         SPACE\n* ------------------------------------------------------------------- *\n*              RECORD FORMAT TABLE                                    *\n* ------------------------------------------------------------------- *\nRECFMTBL DS     0C\n         DC     AL1(DS1RECFF),CL4'F'\n         DC     AL1(DS1RECFV),CL4'V'\n         DC     AL1(DS1RECFU),CL4'U'\n         DC     AL1(DS1RECFT),CL4'T'\n         DC     AL1(DS1RECFF+DS1RECFB),CL4'FB'\n         DC     AL1(DS1RECFV+DS1RECFB),CL4'VB'\n         DC     AL1(DS1RECFT+DS1RECFB),CL4'TB'\n         DC     AL1(DS1RECFF+DS1RECFS),CL4'FS'\n         DC     AL1(DS1RECFV+DS1RECFS),CL4'VS'\n         DC     AL1(DS1RECFT+DS1RECFS),CL4'TS'\n         DC     AL1(DS1RECFF+DS1RECFB+DS1RECFS),CL4'FBS'\n         DC     AL1(DS1RECFV+DS1RECFB+DS1RECFS),CL4'VBS'\n         DC     AL1(DS1RECFT+DS1RECFB+DS1RECFS),CL4'TBS'\n         DC     AL1(DS1RECFF+DS1RECFA),CL4'FA'\n         DC     AL1(DS1RECFV+DS1RECFA),CL4'VA'\n         DC     AL1(DS1RECFT+DS1RECFA),CL4'TA'\n         DC     AL1(DS1RECFF+DS1RECFB+DS1RECFA),CL4'FBA'\n         DC     AL1(DS1RECFV+DS1RECFB+DS1RECFA),CL4'VBA'\n         DC     AL1(DS1RECFT+DS1RECFB+DS1RECFA),CL4'TBA'\n         DC     AL1(DS1RECFF+DS1RECFB+DS1RECFA+DS1RECFS),CL4'FBAS'\n         DC     AL1(DS1RECFV+DS1RECFB+DS1RECFA+DS1RECFS),CL4'VBAS'\n         DC     AL1(DS1RECFT+DS1RECFB+DS1RECFA+DS1RECFS),CL4'TBAS'\n         DC     AL1(DS1RECFF+DS1RECMC),CL4'FM'\n         DC     AL1(DS1RECFV+DS1RECMC),CL4'VM'\n         DC     AL1(DS1RECFT+DS1RECMC),CL4'TM'\n         DC     AL1(DS1RECFF+DS1RECFB+DS1RECMC),CL4'FBM'\n         DC     AL1(DS1RECFV+DS1RECFB+DS1RECMC),CL4'VBM'\n         DC     AL1(DS1RECFT+DS1RECFB+DS1RECMC),CL4'TBM'\n         DC     AL1(DS1RECFF+DS1RECFB+DS1RECMC+DS1RECFS),CL4'FBMS'\n         DC     AL1(DS1RECFV+DS1RECFB+DS1RECMC+DS1RECFS),CL4'VBMS'\n         DC     AL1(DS1RECFT+DS1RECFB+DS1RECMC+DS1RECFS),CL4'TBMS'\n         DC     X'FF'\n         SPACE\n* ------------------------------------------------------------------- *\n*              DEVICE TYPE TABLE                                      *\n* ------------------------------------------------------------------- *\nUNITTBL  DS     0C\n         DC     AL1(DCP23052),CL6'2305-2'\n         DC     AL1(DCP3330),CL6'3330'\n         DC     AL1(DCP33301),CL6'3330-1'\n         DC     AL1(DCP3340),CL6'3340'\n         DC     AL1(DCP3350),CL6'3350'\n         DC     AL1(DCP3375),CL6'3375'\n         DC     AL1(DCP3380),CL6'3380'\n* CODES NOT DEFINED BY CBDZDCP MACRO\n         DC     X'01',CL06'2311'\n         DC     X'02',CL06'2301'\n         DC     X'03',CL06'2303'\n         DC     X'04',CL06'2302'\n         DC     X'05',CL06'2321'\n         DC     X'06',CL06'2305-1'\n         DC     X'08',CL06'2314'\n         DC     X'0F',CL06'3390'\n         DC     X'FF'\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DSORG TABLE                                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDSORGD   DSECT\nDSORGID  DS    X                     DSORG ID\nDSORGNM  DS    CL4                   DSORG NAME\nDSORGL   EQU   *-DSORGD\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              RECORD FORMAT TABLE                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nRECFMD   DSECT\nRECFMID  DS    X                     RECORD FORMAT ID\nRECFMNM  DS    CL4                   RECORD FORMAT NAME\nRECFML   EQU   *-RECFMD\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              UNIT TYPE TABLE                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nUNITD    DSECT\nUNITID   DS    X                     UNIT TYPE ID\nUNITNAME DS    CL6                   UNIT TYPE NAME\nUNITL    EQU   *-UNITD\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              INTERFACE BLOCK                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDCBBLOK  DCBBLOK  TYPE=DSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTMAPCOMM TMAPCOMM TYPE=DSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              FORMAT-1 DSCB                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DEVICE CHARACTERISTICS AND PARAMETERS                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCBDZDCP  DSECT\n         CBDZDCP\n         END  TMAPDCB\n./ ADD NAME=TMAPDSS\n          TITLE 'TMAPDSS - DF/DSS BACKUP-UPS PROCESSOR'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     Module name: TMAPDSS - DF/DSS back-ups processor                *\n*                                                                     *\n*     Function:                                                       *\n*     This module prints the DASD's volser, device type, date the     *\n*     back-up was taken and the names of the data sets backed-up.     *\n*                                                                     *\n*     ** This program does not support ISAM.  If any ISAM files are   *\n*     ** on the back-up, no info will be printed and there will be    *\n*     ** no warning messages issued.                                  *\n*                                                                     *\n*     ** This program does not support the DF/DSS COMPRESS option.    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTMAPDSS  CSECT\n         USING TMAPDSS,R12\n         USING TMAPCOMM,R11\n         USING DSSPRFX,R10\n         USING DATADSCT,R9\n         STM   R14,R12,12(R13)     SAVE REGS\n         LR    R12,R15             SET BASE REG\n         B     DSS0000             SKIP EYECATCHER\nDSSNAME  DC    CL8'TMAPDSS'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nDSS0000  DS    0H\n         LA    R15,DSSSAVE         OUR SAVE AREA ADDRESS\n         ST    R13,4(R15)          CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R15,8(R13)          CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R15             SET SAVE AREA ADDRESS\n         TMAPTR ID=ENTRY,          TRACE ENTRY                         +\n               DATA1=COMMFLAG,                                         +\n               DATA2=COMMRECA\n         TM    COMMFLAG,$COMMLST   'CLEAN-UP' CALL?\n         BO    DSS1000             YES\n         L     R10,COMMRECA        FIRST SEGMENT'S ADDRESS\n         SR    R8,R8               CLEAR FOR LENGTH\n         ICM   R8,3,COMMRECL       PHYSICAL BLOCK SIZE\n         TM    COMMFLAG,$COMMINQ   INQUIRE CALL?\n         BNO   DSS0020             NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     Testing process for DF/DSS data sets is:                        *\n*                                                                     *\n*     1) Bytes 1-4 of each record is a sequence number, first record  *\n*        should be #1, so bytes 1-4 should be X'00000001'.            *\n*     2) The julian date of the back up is in the first record in     *\n*        bytes 41-43.  The last digit should have a positive sign,    *\n*        X'F'.                                                        *\n*     3) The volser is in the first record in bytes 33-38.  All 6     *\n*        bytes should be in the range X'40' to X'F9'.                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TMAPTR ID=INQCALL\n         CLC   DSSSEG#,SEG1        POSSIBLY DF/DSS?\n         BNE   EXIT0008            NO\n         TM    42(R10),X'0F'       TEST SIGN OF CREATION DATE\n         BNO   EXIT0008            NOT DF/DSS\n         LA    R1,6                NUMBER OF CHARACTERS IN VOLSER\n         LA    R2,32(R10)          FIRST CHARACTER OF VOLSER\nDSS0010  DS    0H\n         CLI   0(R2),X'40'         TOO LOW?\n         BL    EXIT0008            YES.. NOT VALID\n         CLI   0(R2),X'F9'         TOO HIGH?\n         BH    EXIT0008            YES.. NOT VALID\n         LA    R2,1(R2)            NEXT\n         BCT   R1,DSS0010          CHECK ALL OF THEM\n         TMAPTR ID=HEADING\n         MVI   DSSFLAG,0           RESET ALL FLAGS\n         XC    DCBDSOD,DCBDSOD     SET DATA SET ORG DISP\n         XC    DCBRFMD,DCBRFMD     SET RECORD FORMAT DISP\n         XC    DCBBSZD,DCBBSZD     SET BLOCK SIZE DISP\n         XC    DCBRSZD,DCBRSZD     SET RECORD SIZE DISP\n         MVC   DCBUNTD,UNTD        OFFSET TO UNIT TYPE\n         ST    R10,DCBRECA         PASS RECORD ADDRESS\n         LA    R1,DCBBLOK          DCB CONVERTER PARMS\n         L     R15,ADCB            DCB CONVERTER ENTRY POINT\n         BALR  R14,R15             LINK TO DCB CONVERTER\n         MVC   HEADUNIT,DCBUNT     COPY UNIT TYPE\n         MVC   HEADVOL,32(R10)     MOVE VOLSER\n         MVC   HEADDATE,DATEEDWD   INITIALIZE EDIT WORD\n         ED    HEADDATE,40(R10)    EDIT CREATION DATE\n         MVC   PRTDATA(HEADINGL),HEADING\n         BAL   R7,PRT0000          PRINT HEADING\n         MVC   COMMSUBH(SUBHEADL),SUBHEAD\n         MVC   PRTDATA(SUBHEADL),SUBHEAD\n         BAL   R7,PRT0000          PRINT SUB HEADING\n         B     EXIT0000            AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Split the segments out into the logical records.                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDSS0020  DS    0H\n         TM    DSSFLAG,$ERROR       ERROR FLAG ON?\n         BO    EXIT0000             YES\n         CLC   DSSSEG#,SEG1         SEGMENT 1?\n         BE    EXIT0000             YES.. DON'T WORRY ABOUT IT\n         CH    R8,H22               END OF BACK-UP RECORD?\n         BE    EXIT0000             YES\n         CLI   DSSSEGSQ,1           FIRST SEGMENT IN LOGICAL RECORD?\n         BNE   DSS0050              NO.. ADD TO EXISTING BLOCK\n         SR    R3,R3                CLEAR REGISTER\n         ICM   R3,3,DSSLEN          LENGTH OF THIS SEGMENT\n         SH    R3,=Y(DSSPRFXL)      MINUS DSS PREFIX LENGTH\n         AH    R3,=Y(DATAL)         PLUS DATA BLOCK PREFIX LENGTH\n         GETMAIN R,LV=(R3)          ACQUIRE STORAGE\n         TMAPTR ID=NEWDATA,         TRACE NEW 'DATA' BLOCKS            +\n               RDATA1=R1,           .. NEW BLOCK'S ADDRESS             +\n               RDATA2=R3            .. NEW BLOCK'S LENGTH\n         LA    R14,DATA1ST          INTIALIZE 'LAST' POINTER\n         ICM   R9,15,DATA1ST        FIRST ON CHAIN\n         BZ    DSS0040              END OF CHAIN FOUND\nDSS0030  DS    0H\n         LR    R14,R9               SET 'LAST' POINTER\n         ICM   R9,15,DATANEXT       NEXT ON CHAIN\n         BNZ   DSS0030              LOOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n* R1   POINTS TO NEW STORAGE                                          *\n* R14  POINTS TO LAST BLOCK ON THE CHAIN                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDSS0040  DS    0H\n         LR    R9,R1                COPY STORAGE ADDRESS\n         ST    R9,DATANEXT-DATADSCT(R14)  SET FORWARD POINTER IN PREV\n         XC    DATANEXT,DATANEXT    CLEAR FORWARD POINTER IN NEW\n         ST    R14,DATAPREV         SET BACKWARD POINTER IN NEW\n         ST    R3,DATALEN           SET BLOCK LENGTH\n         SR    R15,R15              CLEAR REGISTER\n         IC    R15,DSSSEGS          NUMBER OF SEGMENTS\n         STH   R15,DATASEGS         SET NUMBER OF SEGMENTS\n         MVC   DATASEGF,=X'0001'    NUMBER OF SEGMENTS FOUND\n         L     R1,DSSSEG#           THIS SEGMENT'S SEGMENT NUMBER\n         ST    R1,DATASEGL          SET LOW SEGEMENT NUMBER\n         BCTR  R15,0                MINUS 1\n         AR    R1,R15               PLUS ADDITIONAL SEGEMENTS\n         ST    R1,DATASEGH          HIGH SEGMENT NUMBER\n         ICM   R15,3,DSSLEN         THIS SEGMENT'S LENGTH\n         SH    R15,=Y(DSSPRFXL)     MINUS PREFIX'S LENGTH\n         ST    R15,DATADLEN         SET LENGTH\n         LR    R1,R15               SET LENGTH\n         LA    R0,DSSDATA2          START OF DATA\n         LA    R14,DATADATA         DITTO\n         MVCL  R14,R0               COPY DATA\n         B     DSS0110              FIND NEXT SEGMENT\nDSS0050  DS    0H\n         TMAPTR ID=ADDDATA          TRACE ADDITIONS TO 'DATA' BLOCKS\n         ICM   R9,15,DATA1ST        FIRST BLOCK ON THE CHAIN\nDSS0060  DS    0H\n         BZ    ERR0080              SERIOUS PROBLEM\n         CLC   DSSSEG#,DATASEGL     TOO LOW?\n         BL    DSS0070              YES\n         CLC   DSSSEG#,DATASEGH     TOO HIGH?\n         BH    DSS0070              YES\n         B     DSS0080              BLOCK LOCATED\nDSS0070  DS    0H\n         ICM   R9,15,DATANEXT       NEXT BLOCK\n         B     DSS0060              LOOP\nDSS0080  DS    0H\n         SR    R3,R3                CLEAR REGISTER\n         ICM   R3,3,DSSLEN          SEGMENT'S LENGTH\n         SH    R3,=Y(DSSPRFXS)      MINUS PREFIX'S LENGTH\n         A     R3,DATALEN           PLUS PREVIOUS BLOCK'S LENGTH\n         GETMAIN R,LV=(R3)          ACQUIRE NEW STORAGE\n         TMAPTR ID=ADDDATA2,        TRACE NEW 'DATA' BLOCKS            +\n               RDATA1=R1,           .. NEW BLOCK'S ADDRESS             +\n               RDATA2=R3            .. NEW BLOCK'S LENGTH\n         LR    R2,R1                COPY STORAGE ADDRESS\n         ICM   R1,15,DATANEXT       NEXT BLOCK'S ADDRESS\n         BZ    DSS0090              NO 'NEXT' BLOCK\n         ST    R2,DATAPREV-DATADSCT(R1)   SET BACKWARD IN NEXT BLOCK\nDSS0090  DS    0H\n         ICM   R1,15,DATAPREV             PREVIOUS BLOCK'S ADDRESS\n         BZ    DSS0100                    NO 'PREVIOUS' BLOCK\n         ST    R2,DATANEXT-DATADSCT(R1)   SET FORWARD IN PREVIOUS\nDSS0100  DS    0H\n         MVC   0(DATAL,R2),DATADSCT       COPY PREFIX TO NEW BLOCK\n         ST    R3,DATALEN-DATADSCT(R2)    SET BLOCK LENGTH\n         SH    R3,=Y(DATAL)               DATA'S LENGTH\n         ST    R3,DATADLEN-DATADSCT(R2)   SET DATA LENGTH\n         LH    R1,DATASEGF-DATADSCT(R2)   NUMBER OF SEGMENTS FOUND\n         LA    R1,1(R1)                   PLUS 1\n         STH   R1,DATASEGF-DATADSCT(R2)   TOTAL FOUND\n         LA    R0,DATADATA                DATA IN OLD BLOCK\n         L     R1,DATADLEN                DATA LENGTH IN OLD BLOCK\n         LA    R14,DATADATA-DATADSCT(R2)  DATA IN NEW BLOCK\n         LR    R15,R1                     SET LENGTH\n         MVCL  R14,R0                     COPY TO NEW BLOCK\n         LA    R0,DSSDATA1                DATA IN TAPE BUFFER\n         SR    R1,R1                      CLEAR REGISTER\n         ICM   R1,3,DSSLEN                DATA LENGTH\n         SH    R1,=Y(DSSPRFXS)            MINUS PREFIX LENGTH\n         LR    R15,R1                     SET LENGTH\n         MVCL  R14,R0                     COPY NEW DATA\n         L     R0,DATALEN                 OLD BLOCK'S LENGTH\n         FREEMAIN R,A=(R9),LV=(R0)        FREE OLD BLOCK\nDSS0110  DS    0H\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R1,3,DSSLEN         SEGMENT'S LENGTH\n         AR    R10,R1              NEXT SEGMENT'S ADDRESS\n         SR    R8,R1               MINUS SEGMENT'S LENGTH\n         BH    DSS0020             MORE TO DO\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     The segments in the current tape buffer have been split up      *\n*     and chained together.  We can now process any logical record    *\n*     that has all of its segments present.                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDSS0120  DS    0H\n         BAL   R7,DSS0700          FIND FIRST COMPLETE BLOCK\n         B     DSS0140\nDSS0130  DS    0H\n         BAL   R7,DSS0720          FIND NEXT COMPLETE BLOCK\nDSS0140  DS    0H\n         LTR   R9,R9               BLOCK FOUND?\n         BZ    EXIT0000            NO\n         L     R8,DATADLEN         DATA LENGTH\n         TMAPTR ID=EXAMDATA,       COMPLETED BLOCK FOUND, EXAMINE IT   +\n               RDATA1=R9,                                              +\n               RDATA2=R8\n         LA    R10,DATADATA        DSS DATA OF THIS BLOCK\n         USING VTOCDATA,R10        DEFINE BASE\nDSS0150  DS    0H\n         CLC   DATASEGL,SEG3       SEGMENT 3?\n         BL    DSS0180             NO.. TOO LOW\n         BH    DSS0190             NO.. TOO HIGH\n*---------------------------------------------------------------------*\n*      RECORD 3 HAS CYLINDER 0'S DATA (INCLUDING THE VTOC POINTER)    *\n*---------------------------------------------------------------------*\nDSS0160  DS    0H\n         TMAPTR ID=REC3SRCH,       SEARCHING FOR VTOC POINTER          +\n               DATA1=VTOCCKD       .. CURRENT RECORD'S COUNT DATA\n         CLC   VTOCPTRA,VTOCCKD    VTOC POINTER RECORD?\n         BE    DSS0170             YES\n         BAL   R7,DSS0500          NEXT TRACK\n         LTR   R8,R8               MORE DATA?\n         BNZ   DSS0160             KEEP LOOKING FOR RECORD 3\n         B     ERR0020             RECORD 3 NOT FOUND!\nDSS0170  DS    0H\n         TMAPTR ID=VTOCPTR,        VTOC POINTER FOUND                  +\n               DATA1=16(R10),      .. VOLSER FROM POINTER              +\n               DATA2=23(R10)       .. VTOC'S ADDRESS\n         OI    DSSFLAG,$VTOC1      VTOC POINTER HAS BEEN LOCATED\n         CLC   HEADVOL,16(R10)     VOLSER MATCH?\n         BNE   ERR0030             NO...\n         MVC   VTOCLOW,23(R10)     SAVE VTOC'S ADDRESS\nDSS0180  DS    0H\n         L     R10,DATANEXT        NEXT BLOCK ON THE CHAIN\n         BAL   R7,DSS0600          FREE THIS DATA BLOCK\n         LTR   R9,R10              ANOTHER BLOCK AVAILABLE?\n         BZ    EXIT0000            NO\n         BAL   R7,DSS0710          FIND NEXT COMPLETE BLOCK\n         B     DSS0140\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nDSS0190  DS    0H\n         CLC   VTOCDSKA,VTOCLOW    START OF VTOC?\n         BL    DSS0250             NO\n         BE    DSS0230             YES\n         TM    DSSFLAG,$VTOC2      VTOC EVER STARTED?\n         BNO   DSS0250             NO\n         TM    DSSFLAG,$VTOC3      VTOC COMPLETED?\n         BO    DSS0250             YES\n         CLC   VTOCDSKA(4),VTOCHIGH BEYOND END OF VTOC?\n         BH    DSS0240             YES\n         CLI   DS1FMTID,0          UNUSED RECORD?\n         BE    DSS0360             YES\n         CLI   DS1FMTID,C'1'       FORMAT-1 RECORD?\n         BE    DSS0200             YES\n         CLI   DS1FMTID,C'2'       FORMAT-2 RECORD?\n         BE    DSS0360             YES\n         CLI   DS1FMTID,C'3'       FORMAT-3 RECORD?\n         BE    DSS0200             YES\n         CLI   DS1FMTID,C'5'       FORMAT-5 RECORD?\n         BE    DSS0360             YES\n         TMAPTR ID=UNKNVTOC        UNKNOWN VTOC RECORD TYPE\n         ABEND ABEND005,DUMP,,USER ABEND\nDSS0200  DS    0H\n         GETMAIN R,LV=VTOCL        ACQUIRE STORAGE FOR NEW RECORD\n         OC    VTOC1ST,VTOC1ST     ANYTHING ON THE CHAIN?\n         BNZ   DSS0210             YES\n         ST    R1,VTOC1ST          SET FIRST ON CHAIN\nDSS0210  DS    0H\n         ICM   R15,15,VTOCLAST     LAST ON CHAIN\n         BZ    DSS0220             NO 'LAST ON CHAIN'\n         ST    R1,VTOCNEXT-VTOCDATA(R15)\nDSS0220  DS    0H\n         ST    R1,VTOCLAST\n         MVC   0(VTOCNEXT-VTOCDATA,R1),VTOCDATA\n         XC    VTOCNEXT-VTOCDATA(4,R1),VTOCNEXT-VTOCDATA(R1)\n         MVI   VTOCFLAG-VTOCDATA(R1),0   CLEAR ALL FLAGS\n         B     DSS0360             SKIP TO NEXT RECORD ON THE TRACK\nDSS0230  DS    0H\n         CLI   DS1FMTID,C'4'       FORMAT-4 RECORD?\n         BNE   ERR0040             FIRST RECORD NOT FORMAT-4\n         OI    DSSFLAG,$VTOC2      VTOC STARTED\n         MVC   VTOCHIGH,DS4VTOCE+6 SAVE VTOC ENDING ADDRESS\n         TMAPTR ID=VTOCFND,        VTOC FOUND                          +\n               DATA1=VTOCHIGH\n         B     DSS0360             SKIP TO NEXT RECORD ON THE TRACK\nDSS0240  DS    0H\n         TMAPTR ID=VTOCDONE\n         OI    DSSFLAG,$VTOC3      VTOC COMPLETE\n*---------------------------------------------------------------------*\n*                                                                     *\n*      All VTOC records are now in a chain.  The next step is to      *\n*      locate the type 3 records that go with the type 1's.           *\n*                                                                     *\n*      The procedure used is:                                         *\n*        1) Scan for type 1 records that have a disk address for a    *\n*           type 3 record, when the end of the chain is reached,      *\n*           resume processing tape records.                           *\n*        2) Scan the chain for the type 3 with the corresponding      *\n*           disk address.                                             *\n*        3) Over-store the disk address with the type 3's storage     *\n*           address.                                                  *\n*        4) Test for a further type 3 disk address (type 3 chained    *\n*           from another type 3), if no address is present, go to     *\n*           step 1, if an address is present, go to step 2.           *\n*                                                                     *\n*---------------------------------------------------------------------*\nDSS0250  DS    0H\n         TM    DSSFLAG,$VTOC3      VTOC COMPLETED YET?\n         BNO   DSS0130             NO, CANNOT PROCESS YET\n         TM    DSSFLAG,$FORMAT3    FORMAT-3 STUFF ALREADY DONE?\n         BO    DSS0310             YES\n         OI    DSSFLAG,$FORMAT3    SET FORMAT-3 FLAG\n         TMAPTR ID=FMT3SRCH\n         ST    R10,FMT3SV10        SAVE REGISTER 10\n         ICM   R10,15,VTOC1ST      FIRST VTOC RECORD ON THE CHAIN\n         BZ    ERR0050             NO VTOC CHAIN?\nDSS0260  DS    0H\n         CLI   DS1FMTID,C'1'       TYPE 1 RECORD?\n         BNE   DSS0300             NO, TRY NEXT ONE\n         OC    DS1PTRDS,DS1PTRDS   FORMAT-2 OR 3 ADDRESS\n         BZ    DSS0300             NO TYPE 2 OR 3 ADDRESS\n         TM    DS1DSORG,DS1DSGIS   IS IT AN ISAM FILE?\n         BO    DSS0300             FORGET ISAM\n         LR    R15,R10             COPY FORMAT-1'S ADDRESS\nDSS0270  DS    0H\n         ICM   R1,15,VTOC1ST       FIRST ON CHAIN\nDSS0280  DS    0H\n         CLC   VTOCDSKA-VTOCDATA(L'VTOCDSKA,R1),DS1PTRDS-VTOCDATA(R15)\n         BE    DSS0290             FORMAT 3 LOCATED\n         ICM   R1,15,VTOCNEXT-VTOCDATA(R1)\n         BNZ   DSS0280             KEEP LOOKING\n         B     ERR0060             FORMAT-3 NOT FOUND\nDSS0290  DS    0H\n         TMAPTR ID=CHAIN-F3,       FORMAT-3 LOCATED                    +\n               RDATA1=R15,         .. FORMAT-1 (OR FORMAT-3'S) ADDRESS +\n               RDATA2=R1           .. FORMAT-3'S ADDRESS\n         ST    R1,DS1PTRDS-VTOCDATA(R15) OVER-STORE DISK ADDRESS\n         LR    R15,R1              COPY FORMAT-3'S ADDRESS\n         OC    DS1PTRDS-VTOCDATA(L'DS1PTRDS,R15),DS1PTRDS-VTOCDATA(R15)\n         BNZ   DSS0270             SEARCH FOR CHAINED FORMAT-3\nDSS0300  DS    0H\n         ICM   R10,15,VTOCNEXT     NEXT ON CHAIN\n         BNZ   DSS0260             PROCESS ENTIRE CHAIN\n         L     R10,FMT3SV10        RESTORE DATA ADDRESS\n*---------------------------------------------------------------------*\n*                                                                     *\n*   VTOC records are all read and chained, FORMAT-3 records have been *\n*   chained to FORMAT-1 (or FORMAT-3).  Now check each record to find *\n*   out which dataset it belongs to.                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\nDSS0310  DS    0H\n         TMAPTR ID=FINDFILE,       SEARCHING FOR FILE                  +\n               DATA1=0(R10)        .. CAPTURE DISK ADDRESS\n         ICM   R2,15,VTOC1ST       FIRST VTOC RECORD ON CHAIN\nDSS0320  DS    0H\n         CLI   DS1FMTID-VTOCDATA(R2),C'1'   FORMAT-1 VTOC RECORD?\n         BNE   DSS0340                      NO\n         LA    R14,DS1EXT1-VTOCDATA(R2)     1ST EXTENT\n         LA    R15,3               NUMBER OF EXTENTS\n         BAL   R7,DSS0370          SEARCH THESE EXTENTS\n         LTR   R15,R15             FILE FOUND?\n         BNZ   DSS0350             YES\n         ICM   R3,15,DS1PTRDS-VTOCDATA(R2)  FORMAT-3 ADDRESS\nDSS0330  DS    0H\n         BZ    DSS0340             NO FORMAT-3\n         LA    R14,DS3EXTNT-VTOCDATA(R3) FIRST 4 EXTENTS IN FORMAT-3\n         LA    R15,4               NUMBER OF EXTENTS\n         BAL   R7,DSS0370          SEARCH THESE EXTENTS\n         LTR   R15,R15             FILE FOUND?\n         BNZ   DSS0350             YES\n         LA    R14,DS3ADEXT-VTOCDATA(R3) LAST 9 EXTENTS\n         LA    R15,9               NUMBER OF EXTENTS\n         BAL   R7,DSS0370          SEARCH THESE EXTENTS\n         LTR   R15,R15             FILE FOUND?\n         BNZ   DSS0350             YES\n         ICM   R3,15,DS3PTRDS-VTOCDATA(R3)\n         B     DSS0330             LOOP\nDSS0340  DS    0H\n         ICM   R2,15,VTOCNEXT-VTOCDATA(R2) NEXT VTOC ENTRY\n         BNZ   DSS0320             CHECK IT OUT\n         B     ERR0070             NEVER FOUND?\nDSS0350  DS    0H\n         TMAPTR ID=FILEFND,        FILE FOUND                          +\n               RDATA1=R2           FORMAT-1'S ADDRESS\n         TM    VTOCFLAG-VTOCDATA(R2),$VTOCFND   ALREADY FOUND?\n         BO    DSS0360                          YES\n         OI    VTOCFLAG-VTOCDATA(R2),$VTOCFND   SET 'FOUND' FLAG\n         MVC   PRDSN,DS1DSNAM-VTOCDATA(R2)      SET DATASET NAME\n         ST    R2,DCBRECA          SET RECORD ADDRESS\n         MVC   DCBDSOD,DSOD        SET DATA SET ORG DISP\n         MVC   DCBRFMD,RFMD        SET RECORD FORMAT DISP\n         MVC   DCBBSZD,BSZD        SET BLOCK SIZE DISP\n         MVC   DCBRSZD,RSZD        SET RECORD SIZE DISP\n         XC    DCBUNTD,DCBUNTD     NO UNIT TYPE TO PASS OVER\n         LA    R1,DCBBLOK          DCB CONVERTER PARMS\n         L     R15,ADCB            DCB CONVERTER ENTRY POINT\n         BALR  R14,R15             LINK TO DCB CONVERTER\n         MVC   PRDSO,DCBDSO        SET DSORG\n         MVC   PRRFM,DCBRFM        SET RECORD FORMAT\n         MVC   PRBSZ,DCBBSZ        SET BLOCK SIZE\n         MVC   PRRSZ,DCBRSZ        SET RECORD SIZE\n         MVC   PRTDATA(DSMSGL),DSMSG      MOVE DATA\n         BAL   R7,PRT0000          PRINT DATASET MESSAGE\nDSS0360  DS    0H\n         BAL   R7,DSS0500          NEXT TRACK'S DATA\n         LTR   R8,R8               ANY DATA?\n         BNZ   DSS0150             MORE DATA\n         ICM   R10,15,DATANEXT     NEXT BLOCK ON CHAIN\n         BAL   R7,DSS0600          FREE THIS BLOCK\n         LTR   R9,R10              ANY MORE BLOCKS?\n         BZ    EXIT0000            NO\n         BAL   R7,DSS0710          FIND NEXT COMPLETE BLOCK\n         B     DSS0140\n*---------------------------------------------------------------------*\n*                                                                     *\n*   Search for extent                                                 *\n*                                                                     *\n*    R9  Return address                                               *\n*    R10 Current track's data address                                 *\n*    R14 First extent's address                                       *\n*    R15 Number of extents/return code                                *\n*                                                                     *\n*    Return codes in R15: zero = extent not found                     *\n*                         non-zero = extent found                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nDSS0370  DS    0H\n         CLC   VTOCCKD(4),2(R14)   TOO LOW?\n         BL    DSS0380             YES.. NOT IN THIS EXTENT\n         CLC   VTOCCKD(4),6(R14)   TOO HIGH?\n         BH    DSS0380             YES.. NOT IN THIS EXTENT\n         BR    R7                  RETURN\nDSS0380  DS    0H\n         LA    R14,10(R14)         NEXT EXTENT\n         BCT   R15,DSS0370         LOOP\n         BR    R7                  RETURN\n*---------------------------------------------------------------------*\n*                                                                     *\n*   \"DEBLOCK\" RECORDS 1 TRACK AT A TIME                               *\n*                                                                     *\n*    R7  RETURN ADDRESS                                               *\n*    R8  LENGTH LEFT TO PROCESS                                       *\n*    R10 SET TO 'NEXT' TRACK DATA ADDRESS                             *\n*    R14 WORK REGISTER                                                *\n*    R15 WORK REGISTER                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nDSS0500  DS    0H\n         TMAPTR ID=NEXTTRAK,       ENTER A TRACE ENTRY                 +\n               RDATA1=(R10),       .. CURRENT ADDRESS                  +\n               RDATA2=(R8)         .. LENGTH REMAINING\n         USING COUNT,R10           DEFINE BASE\n         SR    R14,R14             CLEAR REGISTER\n         SR    R15,R15             CLEAR REGISTER\n         IC    R14,COUNTKL         CURRENT RECORD'S KEY LENGTH\n         ICM   R15,3,COUNTDL       CURRENT RECORD'S DATA LENGTH\n         LA    R14,COUNTL(R14,R15) TOTAL LENGTH\n         AR    R10,R14             NEXT TRACK'S DATA\n         SR    R8,R14              MINUS LENGTH USED\n         BM    DSS0510             OOPS\n         BR    R7                  RETURN\nDSS0510  DS    0H\n         TMAPTR ID=LENNEG,         LENGTH WENT NEGATIVE                +\n               RDATA1=R8\n         ABEND ABEND006,DUMP,,USER\n*---------------------------------------------------------------------*\n*                                                                     *\n*     Free data blocks.                                               *\n*                                                                     *\n*     R7  return address                                              *\n*     R9  address of data block to be freed                           *\n*                                                                     *\n*---------------------------------------------------------------------*\nDSS0600  DS    0H\n         TMAPTR ID=FREEDATA,       FREE A DATA BLOCK                   +\n               RDATA1=R9\n         ICM   R1,15,DATANEXT      NEXT BLOCK ON THE CHAIN\n         BZ    DSS0610             NO NEXT BLOCK\n         MVC   DATAPREV-DATADSCT(4,R1),DATAPREV\nDSS0610  DS    0H\n         ICM   R1,15,DATAPREV      PREVIOUS BLOCK ON CHAIN\n         BZ    DSS0620             NO PREVIOUS BLOCK\n         MVC   DATANEXT-DATADSCT(4,R1),DATANEXT\nDSS0620  DS    0H\n         L     R0,DATALEN          LENGTH OF THE BLOCK\n         FREEMAIN R,A=(R9),LV=(0)  FREE THE BLOCK\n         BR    R7\n*---------------------------------------------------------------------*\n*                                                                     *\n*     Find next complete block                                        *\n*                                                                     *\n*     R7  return address                                              *\n*     R9  address of current data block or zero                       *\n*                                                                     *\n*---------------------------------------------------------------------*\nDSS0700  DS    0H\n         TMAPTR ID=NEXTDATA,              LOCATING NEXT 'DATA' BLOCK   +\n               RDATA1=R9\n         ICM   R9,15,DATA1ST              FIRST DATA BLOCK\n         BZR   R7                         NONE ON CHAIN\nDSS0710  DS    0H\n         CLC   DATASEGS,DATASEGF          ALL SEGMENTS FOUND?\n         BER   R7                         YES\nDSS0720  DS    0H\n         ICM   R9,15,DATANEXT             NEXT DATA BLOCK\n         BZR   R7                         END OF CHAIN\n         B     DSS0710                    CHECK FOR ALL SEGMENTS\n*---------------------------------------------------------------------*\n*                                                                     *\n*              Free any blocks on \"DATA\" chain                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nDSS1000  DS    0H\n         TMAPTR ID=CLEANUP                TRACE POINT\n         XC    VTOCLOW,VTOCLOW            CLEAR VTOC LOW LIMIT\n         XC    VTOCHIGH,VTOCHIGH          CLEAR VTOC HIGH LIMIT\n         L     R9,DATA1ST                 FIRST 'DATA' BLOCK\nDSS1010  DS    0H\n         LTR   R9,R9                      ADDRESS ZERO?\n         BZ    DSS1020                    END OF CHAIN\n         LR    R1,R9                      COPY CURRENT BLOCK'S ADDR\n         L     R0,DATALEN                 LENGTH OF THIS BLOCK\n         TMAPTR ID=FREEDATA,              TRACE FREE'S                 +\n               RDATA1=R1,                 .. BLOCK ADDRESS             +\n               RDATA2=R0                  .. BLOCK SIZE\n         L     R9,DATANEXT                 NEXT BLOCK\n         FREEMAIN R,A=(1),LV=(0)          FREE THIS BLOCK\n         B     DSS1010                    CHECK FOR MORE\nDSS1020  DS    0H\n         XC    DATA1ST,DATA1ST            CLEAR '1ST' POINTER\n         L     R2,VTOC1ST                 FIRST VTOC BLOCK\nDSS1030  DS    0H\n         LTR   R2,R2                      ADDRESS ZERO?\n         BZ    DSS1040                    YES END OF CHAIN\n         LR    R1,R2                      COPY BLOCK'S ADDRESS\n         TMAPTR ID=FREEVTOC,              TRACE FREE'S                 +\n               RDATA1=R2                  .. BLOCK'S ADDRESS\n         L     R2,VTOCNEXT-VTOCDATA(R2)   NEXT BLOCK\n         FREEMAIN R,A=(1),LV=VTOCL        FREE THIS BLOCK\n         B     DSS1030                    CHECK FOR MORE\nDSS1040  DS    0H\n         XC    VTOC1ST,VTOC1ST            CLEAR VTOC 1ST POINTER\n         XC    VTOCLAST,VTOCLAST          CLEAR VTOC LAST POINTER\n         XC    VTOCXTNT,VTOCXTNT          CLEAR VTOC EXTENT INFO\n         B     EXIT0000                   EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              SERIOUS ERRORS                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\nERR0010  DS    0H\n         TMAPTR ID=R3SHORT,        RECORD #3'S LENGTH IS < 40          +\n               DATA1=COMMRECL,     .. RECORD LENGTH FROM 'COMM'        +\n               DATA2=COMMRECA      .. RECORD ADDRESS FROM 'COMM'\n         MVC   PRTDATA(MSG01L),MSG01\n         BAL   R7,PRT0000          PRINT MESSAGE\n         OI    DSSFLAG,$ERROR      SET ERROR FLAG\n         B     EXIT0000            AND EXIT\nERR0020  DS    0H\n         TMAPTR ID=NOVTCPTR,       VTOC POINTER NOT FOUND IN RECORD 3  +\n               DATA1=COMMRECL,     .. RECORD LENGTH FROM 'COMM'        +\n               DATA2=COMMRECA      .. RECORD ADDRESS FROM 'COMM'\n         MVC   PRTDATA(MSG02L),MSG02\n         BAL   R7,PRT0000          PRINT MESSAGE\n         OI    DSSFLAG,$ERROR      SET ERROR FLAG\n         B     EXIT0000            AND EXIT\nERR0030  DS    0H\n         TMAPTR ID=XVOLSER,        VOLSER'S DON'T MATCH (REC 1/VTOCPTR)+\n               DATA1=HEADVOL,      .. VOLSER FROM RECORD 1             +\n               DATA2=COMMRECA      .. RECORD ADDRESS FROM 'COMM'\n         MVC   PRTDATA(MSG03L),MSG03\n         BAL   R7,PRT0000          PRINT MESSAGE\n         OI    DSSFLAG,$ERROR      SET ERROR FLAG\n         B     EXIT0000            AND EXIT\nERR0040  DS    0H\n         TMAPTR ID=XVTOCADR        FIRST RECORD FROM VTOC NOT FORMAT-3\n         MVC   PRTDATA(MSG04L),MSG04\n         BAL   R7,PRT0000          PRINT MESSAGE\n         OI    DSSFLAG,$ERROR      SET ERROR FLAG\n         B     EXIT0000            AND EXIT\nERR0050  DS    0H\n         TMAPTR ID=NOCHAIN         NO VTOC CHAIN AT END OF VTOC\n         MVC   PRTDATA(MSG05L),MSG05\n         BAL   R7,PRT0000          PRINT MESSAGE\n         OI    DSSFLAG,$ERROR      SET ERROR FLAG\n         B     EXIT0000            AND EXIT\nERR0060  DS    0H\n         TMAPTR ID=NOFMT-3,        FORMAT-3 NOT FOUND                  +\n               RDATA1=R2           .. FORMAT-1'S ADDRESS\n         MVC   PRTDATA(MSG06L),MSG06\n         BAL   R7,PRT0000          PRINT MESSAGE\n         OI    DSSFLAG,$ERROR      SET ERROR FLAG\n         B     EXIT0000            AND EXIT\nERR0070  DS    0H\n         TMAPTR ID=NOFILE,         NO EXTENT IN VTOC TO MATCH          +\n               DATA1=0(R10)        .. CAPTURE DISK ADDRESS\n         MVC   PRTDATA(MSG07L),MSG07\n         BAL   R7,PRT0000          PRINT MESSAGE\n         OI    DSSFLAG,$ERROR      SET ERROR FLAG\n         DC    H'0'\n         B     EXIT0000            AND EXIT\nERR0080  DS    0H\n         TMAPTR ID=ORPHAN,         ORPHAN SEGMENT LOCATED              +\n               RDATA1=R10          .. SEGMENTS ADDRESS\n         MVC   PRTDATA(MSG08L),MSG08\n         BAL   R7,PRT0000          PRINT MESSAGE\n         OI    DSSFLAG,$ERROR      SET ERROR FLAG\n         B     EXIT0000            AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PRINTING                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         MVI   PRTCMD,$PRTPRT      REQUEST PRINT\n         MVI   PRTCC,C' '          SINGLE SPACE\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         BR    R7                  RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             EXIT                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS   0H\n         TMAPTR ID=EXIT0000         EXITING, RC=0\n         SR    R15,R15              SET RETURN CODE TO ZERO\n         B     DSS9900              AND RETURN\nEXIT0008 DS    0H\n         TMAPTR ID=EXIT0008         EXITING, RC=8\n         LA    R15,8                SET RETURN CODE TO 8\nDSS9900  DS    0H\n         L     R13,4(R13)           RESTORE REGISTER 13                 ASE01670\n         L     R14,12(R13)          RESTORE REGISTER 14\n         LM    R0,R12,20(R13)       RESTORE ALL OTHER REGISTERS         ASE01680\n         BR    R14                  RETURN TO CALLER                    ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDSSSAVE  DC    18F'0'               REGISTER SAVE AREA\nVTOC1ST  DC    A(0)                 FIRST VTOC RECORD ON CHAIN\nVTOCLAST DC    A(0)                 LAST VTOC RECORD ON CHAIN\nDATA1ST  DC    A(0)                 DATA CHAIN ANCHOR\n         DC    A(0)\nFMT3SV10 DC    A(0)                 REG 10 SAVED DURING FMT-3 CHAINING\nH22      DC    H'22'                CONSTANT\nDSOD     DC    Y(DS1DSORG-VTOCDATA) DISPLACEMENT TO DSORG\nRFMD     DC    Y(DS1RECFM-VTOCDATA) DISPLACEMENT TO RECORD FORMAT\nBSZD     DC    Y(DS1BLKL-VTOCDATA)  DISPLACEMENT TO BLOCK SIZE\nRSZD     DC    Y(DS1LRECL-VTOCDATA) DISPLACEMENT TO RECORD SIZE\nUNTD     DC    H'50'                DISPLACEMENT TO UNIT TYPE\nDSSFLAG  DC    X'00'                FLAGS\n$ERROR   EQU   X'80'                .. SERIOUS ERROR HAS OCCURRED\n$FORMAT3 EQU   X'40'                .. FORMAT-3 CHAINING COMPLETE\n$VTOC1   EQU   X'20'                .. VTOC POINTER LOCATED\n$VTOC2   EQU   X'10'                .. VTOC LOCATED\n$VTOC3   EQU   X'08'                .. VTOC PROCESSING COMPLETED\nDATEEDWD DC    X'4021204B202020'    DATE EDIT WORD\nSEG1     DC    X'00000001'          SEGMENT NUMBER 1\nSEG3     DC    X'00000003'          SEGMENT NUMBER 3\nSEG4     DC    X'00000004'          SEGMENT NUMBER 4\nVTOCPTRA DC    X'0000000003'        VTOC POINTER'S DISK ADDRESS\n* ------------------------------------------------------------------- *\nVTOCXTNT DS    0XL10                VTOC EXTENT\nVTOCLOW  DC    XL5'00'              .. VTOC LOWER EXTENT LIMIT\nVTOCHIGH DC    XL5'00'              .. VTOC HIGH EXTENT LIMIT\n* ------------------------------------------------------------------- *\nHEADING  DC    C'THIS DATA SET IS A DF/DSS BACK-UP, DEVICE TYPE WAS '\nHEADUNIT DC    CL06' '\n         DC    C' VOLSER WAS '\nHEADVOL  DS    CL06' '\n         DC    C' CREATED ON'\nHEADDATE DS    CL07' '\nHEADINGL EQU   *-HEADING\nSUBHEAD  DS    0C\n         DC    C'DATA SETS BACKED-UP ARE:'\nSUBHEADL EQU   *-SUBHEAD\nDSMSG    DS    0C\n         DC    C'DSN='\nPRDSN    DC    CL44' '\n         DC    C'   DSORG:'\nPRDSO    DC    CL4' '\n         DC    C'   RECFM:'\nPRRFM    DC    CL4' '\n         DC    C'   BLKSZ:'\nPRBSZ    DC    CL6' '\n         DC    C'   LRECL:'\nPRRSZ    DC    CL6' '\nDSMSGL   EQU   *-DSMSG\nMSG01    DC    C'*** RECORD #3''S LENGTH IS < 40, CANNOT BE CYL 0, TRAC+\n               K 0, PROCESSING ABORTED'\nMSG01L   EQU   *-MSG01\nMSG02    DC    C'*** VTOC POINTER NOT FOUND IN RECORD #3, PROCESSING AB+\n               ORTED'\nMSG02L   EQU   *-MSG02\nMSG03    DC    C'*** VOLSER IN RECORD 1 DOES NOT MATCH VOLSER FROM VTOC+\n                POINTER, PROCESSING ABORTED'\nMSG03L   EQU   *-MSG03\nMSG04    DC    C'*** FIRST RECORD IN VTOC NOT FORMAT-4'\nMSG04L   EQU   *-MSG04\nMSG05    DC    C'*** INTERNAL ERROR, NO VTOC CHAIN AT END OF VTOC EXTEN+\n               T'\nMSG05L   EQU   *-MSG05\nMSG06    DC    C'*** FORMAT-3 NOT LOCATED'\nMSG06L   EQU   *-MSG06\nMSG07    DC    C'*** NO EXTENT FOUND IN VTOC TO MATCH A DATA RECORD''S +\n               DISK ADDRESS, PROCESSING ABORTED'\nMSG07L   EQU   *-MSG07\nMSG08    DC    C'*** INTERNAL ERROR, ORPHAN DF/DSS RECORD SEGMENT FOUND+\n               '\nMSG08L   EQU   *-MSG08\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK  TYPE=CSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DCB CONVERTER INTERFACE BLOCK                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDCBBLOK  DCBBLOK  TYPE=CSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              LITERALS                                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         LTORG\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTMAPCOMM TMAPCOMM TYPE=DSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DF/DSS RECORD PREFIX                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDSSPRFX  DSECT\nDSSSEG#  DS    XL4              SEGMENT NUMBER\nDSSSEGS  DS    X                NUMBER OF SEGMENTS TO LOGICAL RECORD\nDSSSEGSQ DS    X                SEQUENCE NUMBER WITHIN LOGICAL RECORD\nDSSLEN   DS    XL2              LENGTH OF THIS SEGMENT\n         DS    XL8\nDSSPRFXS EQU   *-DSSPRFX        SHORT PREFIX LENGTH\nDSSDATA1 DS    0X\n         DS    XL24\nDSSPRFXL EQU   *-DSSPRFX        LONG PREFIX LENGTH\nDSSDATA2 DS    0X\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVTOCDATA DSECT\nVTOCCKD  DS    0XL8             VTOC RECORD'S DISK ADDRESS\nVTOCDSKA DS    XL5              DISK ADDRESS OF THIS RECORD\nVTOCCNT  DS    XL3              COUNT DATA\n         IECSDSL1 1             GENERATE FORMAT 1 LABEL\nVTOCNEXT DS    A                NEXT ON CHAIN\nVTOCFLAG DS    X                FLAGS/SWITCHES\n$VTOCFND EQU   X'80'            .. BACK-UP RECORD FOR THIS D/S FOUND\nVTOCL    EQU   *-VTOCDATA       LENGTH OF TABLE ENTRIES\n         ORG    DS1DSNAM        RESET ADDRESS TO DATA SET NAME\n         IECSDSL1 3             GENERATE FORMAT 3 LABEL\n         ORG    DS1FMTID        RESET ADDRESS TO FORMAT ID\n         IECSDSL1 4             GENERATE FORMAT 4 LABEL\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOUNT    DSECT\nCOUNTADR DS    0XL5             DASD ADDRESS\nCOUNTCYL DS    XL2              .. CYLINDER NUMBER\nCOUNTHD  DS    XL2              .. HEAD NUMBER\nCOUNTREC DS    X                .. RECORD NUMBER\nCOUNTKL  DS    X                KEY LENGTH\nCOUNTDL  DS    XL2              DATA LENGTH\nCOUNTL   EQU   *-COUNT          LENGTH OF COUNT INFO\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  DF/DSS breaks up the data into 'records' made up of 'segments'.    *\n*  The first 4 bytes of each segment is the segment's sequence number.*\n*  The next 2 bytes specify the number of segments in the logical     *\n*  record and the sequence of each segment within that logical record.*\n*                                                                     *\n*  Before any one logical record can be processed, all of its segments*\n*  must be located and moved into contiguous storage.  All of the     *\n*  segments may not be in the same physical tape record.  The way I   *\n*  am going to process them is to make a chain of the logical records.*\n*  When a new tape block is read, the segments will be broken up into *\n*  the logical records they belong to.  When all segments in the tape *\n*  block have been broken out, any complete logical records are then  *\n*  scanned to determine which data sets the data belonged to when the *\n*  back-up was taken.                                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDATADSCT DSECT\nDATANEXT DS    A                  NEXT BLOCK ON THE CHAIN\nDATAPREV DS    A                  PREVIOUS BLOCK ON CHAIN\nDATALEN  DS    A                  LENGTH OF THIS BLOCK\nDATADLEN DS    A                  LENGTH OF DATA\nDATASEGL DS    CL4                LOW SEGMENT NUMBER\nDATASEGH DS    CL4                HIGH SEGMENT NUMBER\nDATASEGS DS    AL2                NUMBER OF SEGMENTS TO LOGICAL RECORD\nDATASEGF DS    AL2                NUMBER OF SEGMENTS FOUND\nDATAL    EQU   *-DATADSCT         LENGTH PREFIX\nDATADATA DS    0C                 START OF DATA\nDATACKD  DS    XL8                DASD ADDRESS OF RECORD\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  TMAPDSS\n./ ADD NAME=TMAPFDR\n          TITLE 'TMAPFDR - FDR BACK-UPS PROCESSOR'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TMAPFDR - FDR back-ups processor                      *\n*                                                                     *\n*  Function:                                                          *\n*     Print the data sets and DCB info for each data set in the       *\n*     back-up.                                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTMAPFDR  CSECT\n         USING TMAPFDR,R12\n         USING TMAPCOMM,R11\n         USING FDRPRFX,R10\n         STM   R14,R12,12(R13)     SAVE REGS\n         LR    R12,R15             SET BASE REG\n         B     FDR0000             SKIP EYECATCHER\nFDRNAME  DC    CL8'TMAPFDR'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nFDR0000  DS    0H\n         LA    R15,FDRSAVE         OUR SAVE AREA ADDRESS\n         ST    R13,4(R15)          CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R15,8(R13)          CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R15             SET SAVE AREA ADDRESS\n         TMAPTR ID=ENTRY,          TRACE ENTRY                         +\n               DATA1=COMMFLAG,                                         +\n               DATA2=COMMRECA\n         TM    COMMFLAG,$COMMLST   'CLEAN-UP' CALL?\n         BO    EXIT0000            YES\n         L     R10,COMMRECA        FIRST SEGMENT'S ADDRESS\n         SR    R9,R9               CLEAR FOR LENGTH\n         ICM   R9,3,COMMRECL       PHYSICAL BLOCK SIZE\n         TM    COMMFLAG,$COMMINQ   INQUIRE CALL?\n         BNO   FDR0020             NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     Testing process for FDR data sets is:                           *\n*                                                                     *\n*     The string 'THATS ALL FOLKS' shoudl be at offset +5 in the      *\n*     first record.                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TMAPTR ID=INQCALL\n         CLC   FDRID,5(R10)        POSSIBLY FDR?\n         BNE   EXIT0008            NO\n         MVC   PRTDATA(HEADINGL),HEADING\n         BAL   R6,PRT0000          PRINT HEADING\n         MVC   COMMSUBH(SUBHEADL),SUBHEAD\n         MVC   PRTDATA(SUBHEADL),SUBHEAD\n         BAL   R6,PRT0000          PRINT SUB HEADING\n         B     EXIT0000            AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFDR0020  DS    0H\n         TM    FDRFLAG,$ERROR      ERROR FLAG ON?\n         BO    EXIT0000            YES\n         TM    COMMFLAG,$COMM1ST   FIRST CALL?\n         BO    EXIT0000            YES\n         CLC   DUMMYDSF,FDRDSF     'DUMMYDSF' PRESENT?\n         BNE   EXIT0000            NO\n         CLC   VSAMDFEF,FDRDATA    VSAMDFEF RECORD?\n         BE    FDR0050             YES\n         CLC   TRACKTAB,FDRDATA    TRACK TABLE?\n         BE    FDR0060             YES\n         LA    R8,FDRDATA          FIRST DSCB RECORD\n         USING FMT1,R8             DEFINE BASE\n         LH    R7,FDRDSCB          NUMBER OF DSCB'S\n         TMAPTR ID=DSCBRECD,                                           +\n               RDATA1=R8,                                              +\n               RDATA2=R7\nFDR0030  DS    0H\n         CLI   DS1FMTID,C'1'       FORMAT-1 RECORD?\n         BNE   FDR0040             NO\n         TMAPTR ID=FMT1,           FORMAT-1 RECORD FOUND               +\n               RDATA1=R8           .. FORMAT-1'S ADDRESS\n         MVC   PRDSN,DS1DSNAM      SET DATASET NAME\n         ST    R8,DCBRECA          SET RECORD ADDRESS\n         MVC   DCBDSOD,DSOD        SET DATA SET ORG DISP\n         MVC   DCBRFMD,RFMD        SET RECORD FORMAT DISP\n         MVC   DCBBSZD,BSZD        SET BLOCK SIZE DISP\n         MVC   DCBRSZD,RSZD        SET RECORD SIZE DISP\n         XC    DCBUNTD,DCBUNTD     NO UNIT TYPE TO PASS OVER\n         LA    R1,DCBBLOK          DCB CONVERTER PARMS\n         L     R15,ADCB            DCB CONVERTER ENTRY POINT\n         BALR  R14,R15             LINK TO DCB CONVERTER\n         MVC   PRDSO,DCBDSO        SET DSORG\n         MVC   PRRFM,DCBRFM        SET RECORD FORMAT\n         MVC   PRBSZ,DCBBSZ        SET BLOCK SIZE\n         MVC   PRRSZ,DCBRSZ        SET RECORD SIZE\n         MVC   PRTDATA(DSMSGL),DSMSG      MOVE DATA\n         BAL   R6,PRT0000          PRINT DATASET MESSAGE\nFDR0040  DS    0H\n         LA    R8,FMT1L(R8)        NEXT FORMAT-1\n         BCT   R7,FDR0030          LOOP\n         B     EXIT0000            END OF DSCB'S\nFDR0050  DS    0H\n         TMAPTR ID=VSAMDFEF        VSAMDFEF RECORD FOUND\n         B     EXIT0000            EXIT\nFDR0060  DS    0H\n         TMAPTR ID=TRACKTAB        TRACKTAB RECORD FOUND\n         B     EXIT0000            EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PRINTING                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         MVI   PRTCMD,$PRTPRT      REQUEST PRINT\n         MVI   PRTCC,C' '          SINGLE SPACE\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         BR    R6                  RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             EXIT                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS   0H\n         TMAPTR ID=EXIT0000         EXITING, RC=0\n         SR    R15,R15              SET RETURN CODE TO ZERO\n         B     FDR9900              AND RETURN\nEXIT0008 DS    0H\n         TMAPTR ID=EXIT0008         EXITING, RC=8\n         LA    R15,8                SET RETURN CODE TO 8\nFDR9900  DS    0H\n         L     R13,4(R13)           RESTORE REGISTER 13                 ASE01670\n         L     R14,12(R13)          RESTORE REGISTER 14\n         LM    R0,R12,20(R13)       RESTORE ALL OTHER REGISTERS         ASE01680\n         BR    R14                  RETURN TO CALLER                    ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFDRSAVE  DC    18F'0'               REGISTER SAVE AREA\nDSOD     DC    Y(DS1DSORG-FMT1)     DISPLACEMENT TO DSORG\nRFMD     DC    Y(DS1RECFM-FMT1)     DISPLACEMENT TO RECORD FORMAT\nBSZD     DC    Y(DS1BLKL-FMT1)      DISPLACEMENT TO BLOCK SIZE\nRSZD     DC    Y(DS1LRECL-FMT1)     DISPLACEMENT TO RECORD SIZE\nFDRFLAG  DC    X'00'                FLAGS\n$ERROR   EQU   X'80'                .. SERIOUS ERROR HAS OCCURRED\nFDRID    DC    C'THATS ALL FOLKS'\nDUMMYDSF DC    C'DUMMYDSF'\nVSAMDFEF DC    C'VSAMDFEF'\nTRACKTAB DC    C'TRACKTAB'\nHEADING  DC    C'THIS DATA SET IS AN FDR BACK-UP'\nHEADINGL EQU   *-HEADING\nSUBHEAD  DS    0C\n         DC    C'DATA SETS BACKED-UP ARE:'\nSUBHEADL EQU   *-SUBHEAD\nDSMSG    DS    0C\n         DC    C'DSN='\nPRDSN    DC    CL44' '\n         DC    C'   DSORG:'\nPRDSO    DC    CL4' '\n         DC    C'   RECFM:'\nPRRFM    DC    CL4' '\n         DC    C'   BLKSZ:'\nPRBSZ    DC    CL6' '\n         DC    C'   LRECL:'\nPRRSZ    DC    CL6' '\nDSMSGL   EQU   *-DSMSG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK  TYPE=CSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DCB CONVERTER INTERFACE BLOCK                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDCBBLOK  DCBBLOK  TYPE=CSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              LITERALS                                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         LTORG\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTMAPCOMM TMAPCOMM TYPE=DSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              FDR RECORD PREFIX                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFDRPRFX  DSECT\n         DS    XL4              LENGTH OF THIS RECORD\n         DS    CL8\nFDRDSF   DS    CL8              'DUMMYDSF'\n         DS    CL10\nFDRDSCB  DS    H                NUMBER OF DSCB'S IN THIS BLOCK\nFDRPRFXL EQU   *-FDRPRFX        PREFIX LENGTH\nFDRDATA  DS    0C\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMT1     DSECT\nFMT1CKD  DS    0XL8             VTOC RECORD'S DISK ADDRESS\nFMT1DSKA DS    XL5              DISK ADDRESS OF THIS RECORD\nFMT1CNT  DS    XL3              COUNT DATA\n         IECSDSL1 1             GENERATE FORMAT 1 LABEL\nFMT1L    EQU   *-FMT1\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  TMAPFDR\n./ ADD NAME=TMAPLABL\n          TITLE 'TMAPLABL - STANDARD LABELS PROCESSOR'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TMAPLABL                                              *\n*                                                                     *\n*  Function:                                                          *\n*     Interprets selected data from IBM standard labels.              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTMAPLABL CSECT\n         USING TMAPLABL,R12\n         USING TMAPCOMM,R11\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               SET BASE REG\n         B     LABL0000              SKIP EYECATCHER\n         DC    CL8'TMAPLABL'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nLABL0000 DS    0H\n         LA    R15,LABLSAVE        OUR SAVE AREA ADDRESS\n         ST    R13,4(R15)          CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R15,8(R13)          CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R15             SET SAVE AREA ADDRESS\n         TMAPTR ID=ENTRY\n         TM    COMMFLAG,$COMMLST   'CLEAN-UP' CALL?\n         BO    EXIT0000            YES.. EXIT\n         L     R10,COMMRECA        CURRENT RECORD'S ADDRESS\n         LA    R2,LABLTBLE         LABEL TABLE\n         USING LABLDSCT,R2         DEFINE BASE\nLABL0010 DS    0H\n         CLI   0(R2),X'FF'         END OF TABLE?\n         BE    LABL0030            YES\n         CLC   LABLDATA,0(R10)     LABEL DATA LOCATED?\n         BE    LABL0020            YES\n         LA    R2,LABLL(R2)        NEXT ENTRY\n         B     LABL0010            LOOP\nLABL0020 DS    0H\n         TM    COMMFLAG,$COMMINQ   INQUIRE CALL?\n         BO    EXIT0000            YES\n         L     R15,LABLRTN         PROCESSING ROUTINE'S ADDRESS\n         BR    R15                 GO TO PROCESSING ROUTINE\nLABL0030 DS    0H\n         TM    COMMFLAG,$COMMINQ   INQUIRE CALL?\n         BO    EXIT0008            YES\n         MVC   UNKNMSGD,0(R10)     COPY DATA TO MESSAGE\n         MVC   PRTDATA(UNKNMSGL),UNKNMSG\n         BAL   R9,PRT0000          PRINT MESSAGE\n         B     EXIT0000            AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              HDR1 RECORD PROCESSING                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nHDR10000 DS    0H\n         USING HDR1,R10            DEFINE DSECT BASE\n         TMAPTR ID=HDR1            TRACE HDR1\n         MVC   PRDSN,HDR1DSN       DATASET NAME\n         MVC   PRVSEQ,HDR1VSEQ     VOLUME SEQUENCE\n         MVC   PRDSEQ,HDR1DSEQ     DATASET SEQUENCE\n         MVC   PRCDTE,HDR1CDTE     CREATE DATE\n         MVC   PREXPD,HDR1EXPD     EXPIRATION DATE\n         MVC   PRTDATA(HDR1MSGL),HDR1MSG\n         BAL   R9,PRT0000          PRINT LABEL DATA\n         B     EXIT0000            AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              EOF1 RECORD PROCESSING                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nEOF10000 DS    0H\n         TMAPTR ID=EOF1            TRACE EOF1\n         MVC   PRBLKC,HDR1BLKC     BLOCK COUNT\n         MVC   PRTDATA(EOF1MSGL),EOF1MSG\n         BAL   R9,PRT0000          PRINT LABEL DATA\n         B     EXIT0000            AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              EOV1 RECORD PROCESSING                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nEOV10000 DS    0H\n         TMAPTR ID=EOV1            TRACE EOV1\n         MVC   PRTDATA(L'EOV1MSG),EOV1MSG\n         BAL   R9,PRT0000          PRINT LABEL DATA\n         B     EXIT0000            AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              HDR2 RECORD PROCESSING                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nHDR20000 DS    0H\n         USING HDR2,R10            DEFINE DSECT BASE\n         TMAPTR ID=HDR2            TRACE HDR2\n         MVC   PRRF,HDR2RF         RECORD FORMAT\n         MVC   PRBLSZ,HDR2BLSZ     BLOCK SIZE\n         MVC   PRRSZ,HDR2RSZ       RECORD SIZE\n         MVC   PRDEN,HDR2DEN       TAPE DENSITY\n         MVC   PRJOB,HDR2JOB       JOB/JOB STEP\n         MVC   PRTDATA(HDR2MSGL),HDR2MSG\n         BAL   R9,PRT0000          PRINT LABEL DATA\n         B     EXIT0000            AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              EOF2 RECORD PROCESSING                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nEOF20000 DS    0H\n         TMAPTR ID=EOF2            TRACE EOF2\n         MVC   PRTDATA(L'EOF2MSG),EOF2MSG\n         BAL   R9,PRT0000          PRINT LABEL DATA\n         B     EXIT0000            AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              EOV2 RECORD PROCESSING                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nEOV20000 DS    0H\n         TMAPTR ID=EOV2            TRACE EOV2\n         MVC   PRTDATA(L'EOV2MSG),EOV2MSG\n         BAL   R9,PRT0000          PRINT LABEL DATA\n         B     EXIT0000            AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PRINTING                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         MVI   PRTCMD,$PRTPRT      REQUEST PRINT\n         MVI   PRTCC,C' '          SINGLE SPACE\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         BR    R9                  RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             EXIT                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         TMAPTR ID=EXIT0000          EXITING, RC=0\n         SR    R15,R15               SET RETURN CODE TO ZERO\n         B     LABL9900              AND RETURN\nEXIT0008 DS    0H\n         TMAPTR ID=EXIT0008          EXITING, RC=8\n         LA    R15,8                 SET RETURN CODE TO 8\nLABL9900 DS    0H\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         L     R14,12(R13)           RESTORE REGISTER 14                ASE01670\n         LM    R0,R12,20(R13)        RESTORE ALL OTHER REGISTERS        ASE01680\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLABLSAVE DC    18F'0'                REGISTER SAVE AREA\nUNKNMSG  DC    C'** UNKNOWN DATA IN HDR, EOF, OR EOV:'\nUNKNMSGD DC    CL80' '\nUNKNMSGL EQU   *-UNKNMSG\nHDR1MSG  DS    0C\n         DC    C'HDR1 DSN='\nPRDSN    DC    CL17' '\n         DC    C' VOLSEQ='\nPRVSEQ   DC    CL4' '\n         DC    C' DATASET SEQ='\nPRDSEQ   DC    CL4' '\n         DC    C' CREATE DATE='\nPRCDTE   DC    CL6' '\n         DC    C' EXPIRE DATE='\nPREXPD   DC    CL6' '\nHDR1MSGL EQU   *-HDR1MSG\nHDR2MSG  DS    0C\n         DC    C'HDR2 RECORD FORMAT='\nPRRF     DC    C' '\n         DC    C' BLOCK SIZE='\nPRBLSZ   DC    CL5' '\n         DC    C' RECORD SIZE='\nPRRSZ    DC    CL5' '\n         DC    C' DENSITY='\nPRDEN    DC    C' '\n         DC    C' JOB/JOBSTEP='\nPRJOB    DC    CL17' '\nHDR2MSGL EQU   *-HDR2MSG\nEOF1MSG  DS    0C\n         DC    C'EOF1 BLOCK COUNT='\nPRBLKC   DC    CL6' '\nEOF1MSGL EQU   *-EOF1MSG\nEOF2MSG  DC    C'EOF2'\nEOV1MSG  DC    C'EOV1'\nEOV2MSG  DC    C'EOV2'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLABLTBLE DS    0A\n         DC    C'VOL1',A(EXIT0000)\n         DC    C'HDR1',A(HDR10000)\n         DC    C'HDR2',A(HDR20000)\n         DC    C'EOF1',A(EOF10000)\n         DC    C'EOF2',A(EOF20000)\n         DC    C'EOV1',A(EOV10000)\n         DC    C'EOV2',A(EOV20000)\n         DC    X'FFFFFFFF'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK  TYPE=CSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              LABEL TABLE MAP                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLABLDSCT DSECT\nLABLDATA DS    CL4                  IDENTIFYING DATA\nLABLRTN  DS    A                    PROCESSING ROUTINE\nLABLL    EQU   *-LABLDSCT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTMAPCOMM TMAPCOMM TYPE=DSECT\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*              TAPE LABEL DSECTS                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY  TAPELABL\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  TMAPLABL\n./ ADD NAME=TMAPMAIN 0100-99298-99298-1542-00579-00584-00000-SBGOLOB\n          TITLE 'TMAPMAIN - MAINLINE'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                   TAPE MAP UTILITY                                  *\n*                                                                     *\n*  This utility reads a tape and prints a \"map\" or \"tape vtoc\".       *\n*  Normally the \"mapping\" stops when 2 consecutive tape marks are     *\n*  encountered.  The 'FULLTAPE' option will scan the tape until the   *\n*  reflective marker is found or if the tape has not been formatted   *\n*  with data it will run off the end of the reel.                     *\n*                                                                     *\n*  Tape labels, both header and trailer records, will be \"watched\"    *\n*  for and printed as such whether the tape fits the standard-labelled*\n*  format or not.  For example if a tape has multiple files and was   *\n*  written over, the first file may be non-labelled while other files *\n*  further down the tape may still have their labels intact.  If you  *\n*  need to recover one of these files the label information may be    *\n*  helpful.                                                           *\n*                                                                     *\n*  All parameters are passed via the PARM operand of the EXEC         *\n*  statement.  The type of tape unit is required as a parameter on    *\n*  each execution.  See the comments in the TMAPPARM source for valid *\n*  parameters.                                                        *\n*                                                                     *\n*  TAPEMAP utilizes an I/O module that bypasses system opens.  This   *\n*  requires APF authorization.  Also since OPEN is bypassed, no RACF  *\n*  access to tape data sets is required.  RACF checking is bypassed,  *\n*  so you can read any tape data set, but access to this program      *\n*  should be restricted for the same reason.                          *\n*                                                                     *\n*                                                                     *\n*  Throughout this utility several coding conventions have been       *\n*  followed:                                                          *\n*                                                                     *\n*      R10  is the current tape record's address                      *\n*      R11  is the common data area (TMAPCOMM) address                *\n*      R12  is the base address of the various modules                *\n*                                                                     *\n*  SAMPLE JCL:                                                        *\n*   //..... JOB ...                                                   *\n*   //TAPEMAP  EXEC PGM=TAPEMAP,REGION=4M,PARM='3420'                 *\n*   //STEPLIB  DD DSN=xxxxxx,DISP=SHR     (if not in a LNKLST library)*\n*   //SYSPRINT DD SYSOUT=x                                            *\n*                                                                     *\n*   You may want to put TAPEMAP in a PROC so it can be run as a       *\n*   started task.                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n        SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        This macro generates the 'TAPEEXCP' status code control      *\n*        table.  The status code is equated to a message and a byte   *\n*        of control flags for special conditions.                     *\n*                                                                     *\n*        The macro parameters are:                                    *\n*             CODE - the TAPEEXCP status code                         *\n*             OPT  - optional special condition flags                 *\n*             TEXT - text for the message to be printed for the       *\n*                    value of CODE                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         MACRO\n         STATMSG &CODE,&OPT,&TEXT\n         LCLA  &ELEN,&MLEN\n&MLEN    SETA  K'&TEXT-2\n&ELEN    SETA  &MLEN+6\n         DC    AL2(&ELEN)           LENGTH OF THIS ENTRY\n         DC    AL2(&MLEN)           LENGTH OF MESSAGE TEXT\n         AIF   (T'&OPT EQ 'O').NOOPT\n         DC    AL1(&OPT)            PROCESSING OPTIONS\n         AGO   .OPTBYP\n.NOOPT   ANOP\n         DC    AL1(0)               PROCESSING OPTIONS\n.OPTBYP  ANOP\n         DC    AL1(&CODE)           STATUS CODE\n         DC    C&TEXT               MESSAGE TEXT\n         MEND\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTMAPMAIN CSECT\n         USING TMAPMAIN,R12\n         USING TMAPCOMM,R11\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               SET BASE REG\n         B     MAIN0000              SKIP EYECATCHER\n         DC    CL8'TMAPMAIN'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMAIN0000 DS    0H\n         L     R11,VCOMM             TMAPCOMM'S ADDRESS\n         MVC   COMMPARM,0(R1)        SAVE PARAMETER LIST ADDRESS\n         LA    R1,TAPESAVE           OUR SAVE AREA ADDRESS\n         ST    R13,4(R1)             CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         L     R2,TRSIZE             TRACE TABLE'S SIZE\n         LA    R2,32(R2)             FOR BOUNDARY ROUNDING\n         GETMAIN R,LV=(R2)           ACQUIRE STORAGE FOR TRACE TABLE\n         ST    R1,TRADDR             SAVE TRACE TABLE ADDRESS\n         LA    R1,32(R1)             PLUS 32\n         SRL   R1,5                  ROUND THE ADDRESS TO...\n         SLL   R1,5                  ...NEAREST MULTIPLE OF 32\n         ST    R1,TR1ST              SET FIRST TRACE ENTRY ADDRESS\n         ST    R1,TRCURR             SET CURRENT TRACE ENTRY ADDRESS\n         XC    0(TRENTRYL,R1),0(R1)  INITIALIZE FIRST ENTRY\n         A     R1,TRSIZE             PLUS USED PORTION'S SIZE\n         ST    R1,TRLAST             INITIALIZE LAST ENTRY ADDRESS\n         TMAPTR ID=INIT,             INITIAL TRACE ENTRY               +\n               DATA1=TR1ST,          .. FIRST TRACE TABLE ENTRY ADDR   +\n               DATA2=TRLAST          .. LAST TRACE TABLE ENTRY ADDR\n         MVI   PRTCMD,$PRTHEAD       SET COMMAND\n         LA    R1,PRTBLOK            PRINT MODULE INTERFACE BLOCK\n         L     R15,APRT              PRINT MODULE ENTRY POINT\n         BALR  R14,R15               PRINT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             CALL PARAMETER CONVERTER                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TMAPTR ID=CALLPARM          CALLING PARAMETER CONVERTER\n         L     R15,APARM             PARAMETER CONVERTER'S ADDRESS\n         BALR  R14,R15               CALL PARAMETER CONVERTER\n         TM    COMMFLAG,$ABORT       ABORT FLAG SET?\n         BNO   MAIN0010              NO, CONTINUE\n         TMAPTR ID=BADPARMS\n         MVC   PRTDATA(MSG01L),MSG01 MOVE MESSAGE\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     MAIN9900              AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             OPEN TAPE DCB                                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         TMAPTR ID=OPENTAPE\n         MVC   TDDNAME,TMAPDD        SET DDNAME\n         MVC   TAPEVOL,COMMVOL       COPY VOLSER FOR MOUNT WTO\n         MVI   TCMD,$TCMDOPN         SET COMMAND\n         MVC   TDEVT,COMMDEVT        SET DEVICE TYPE\n         LA    R1,TAPEBLOK           TAPE I/O INTERFACE BLOCK ADDRESS\n         L     R15,ATAPEIO           TAPE I/O MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO TAPE I/O MODULE\n         TMAPTR ID=OPENSTAT,         TRACE TAPE OPENING                +\n               DATA1=TDDNAME,        .. DDNAME OPENED                  +\n               DATA2=TSTAT           .. STATUS CODE FROM TAPEEXCP\n         CLI   TSTAT,$TSTATOK        OPEN SUCCESSFUL?\n         BNE   MAIN0500              NO..\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             READ TAPE                                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0020 DS    0H\n         MVI   TCMD,$TCMDRD          SET COMMAND\n         LA    R1,TAPEBLOK           TAPE I/O INTERFACE BLOCK ADDRESS\n         L     R15,ATAPEIO           TAPE I/O MODULE ENTRY POINT\n         BALR  R14,R15               LINK TO TAPE I/O MODULE\n         TMAPTR ID=TAPEREAD,         TRACE TAPE READS                  +\n               DATA1=TDDNAME,        .. DDNAME READ                    +\n               DATA2=TSTAT           .. STATUS CODE FROM TAPEEXCP\n         CLI   TSTAT,$TSTATTM        TAPE MARK READ?\n         BE    MAIN0200              YES\n         CLI   TSTAT,$TSTATPE        PHYSICAL END OF TAPE?\n         BE    MAIN0300              YES\n         CLI   TSTAT,$TSTATOK        READ SUCCESSFUL?\n         BNE   MAIN0500              NO..\n         L     R10,TIOAREA           CURRENT RECORD'S ADDRESS\n         ST    R10,COMMRECA          CURRENT RECORD'S ADDRESS\n         MVC   COMMRECL,TLENGTH      COPY RECORD'S LENGTH\n         TM    TAPEFLAG,$TAPEDTA     ANY DATA ALREADY READ?\n         BO    MAIN0040              YES\n         OI    TAPEFLAG,$TAPEDTA     INDICATE DATA HAS BEEN FOUND\n         TMAPTR ID=DENSITY,                                            +\n               DATA1=TSENSE,                                           +\n               DATA2=TSENSE+8\n         MVC   DENDENID,TDENSITY     COPY DENSITY\n         OI    DENDENID,X'F0'        MAKE DENSITY PRINTABLE\n         SR    R1,R1                 CLEAR REGISTER\n         IC    R1,TDENSITY           DENSITY ID\n         SH    R1,H2                 RELATIVE TO ZERO\n         SLL   R1,2                  MULTIPLY BY 4\n         LA    R1,DENTABLE(R1)       BPI EQUIVALENT MESSAGE'S ADDRESS\n         MVC   DENBPI,0(R1)          MOVE BPI TEXT TO DENSITY MESSAGE\n         MVC   PRTDATA(DENMSGL),DENMSG\n         BAL   R9,PRT0000            PRINT TAPE DENSITY MESSAGE\n         CLC   VOL1ID,0(R10)         VOLSER RECORD?\n         BE    MAIN0030              YES\n         TMAPTR ID=NOVOLSER          FIRST RECORD IS NOT VOLSER\n         MVC   PRTDATA(VOLMSG1L),VOLMSG1\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     MAIN0100              DETERMINE FILE CONTENTS\nMAIN0030 DS    0H\n         TMAPTR ID=VOLSER,           VOLSER FOUND                      +\n               DATA1=4(R10)          .. COPY VOLSER FROM I/O AREA\n         MVC   VOLMSG2V,4(R10)       SET VOLSER IN MESSAGE\n         MVC   PRTDATA(VOLMSG2L),VOLMSG2\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     MAIN0100              DETERMINE FILE CONTENTS\nMAIN0040 DS    0H\n         TM    TAPEFLAG,$TAPETM      WAS LAST RECORD A TAPE MARK?\n         BO    MAIN0100              YES... CHECK FOR TAPE LABEL RECORD\nMAIN0050 DS    0H\n         NI    TAPEFLAG,255-$TAPETM  TURN OFF TAPE MARK FLAG\n         ICM   R15,15,MAINPROC       PROCESSING MODULE ADDRESS\n         BZ    MAIN0060              NO RECORD PROCESSOR\n         BALR  R14,R15               LINK TO RECORD PROCESSOR\nMAIN0060 DS    0H\n         NI    COMMFLAG,255-$COMM1ST RESET 'FIRST' RECORD FLAG\n         B     MAIN0020              READ NEXT RECORD\n* ------------------------------------------------------------------- *\n*                                                                     *\n*   A NEW PHYSICAL FILE HAS BEEN FOUND.                               *\n*                                                                     *\n*   DETERMINE WHAT THE FILE'S CONTENTS ARE IF POSSIBLE.               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0100 DS    0H\n         TMAPTR ID=NEWFILE\n         MVI   COMMSUBH,C' '         CLEAR SUB-HEADING\n         MVC   COMMSUBH+1(L'COMMSUBH-1),COMMSUBH\n         MVC   FILEMSGN,=X'4020206B202120'\n         ED    FILEMSGN,FILENBR      EDIT PHYSICAL FILE NUMBER\n         MVC   PRTDATA(FILEMSGL),FILEMSG\n         BAL   R9,PRT0000            PRINT PHYSICAL FILE MESSAGE\n         LA    R2,PROCTBLE           FILE PROCESSOR TABLE'S ADDRESS\n         USING PROCDSCT,R2           DEFINE BASE\n         OI    COMMFLAG,$COMMINQ     BEGINNING 'INQUIRY' CALLS\nMAIN0110 DS    0H\n         CLI   0(R2),X'FF'           END OF TABLE?\n         BE    MAIN0140              DATA IN THIS FILE IS UNKNOWN\n         ICM   R15,15,PROCEPA        MODULE'S ENTRY POINT ADDRESS\n         BZ    MAIN0120              .. TEMPORARY 'TILL ALL CODED\n         BALR  R14,R15               ALLOW THIS MODULE TO TEST\n         LTR   R15,R15               KNOWN BY THIS MODULE?\n         BZ    MAIN0130              YES\nMAIN0120 DS    0H\n         LA    R2,PROCL(R2)          NEXT ENTRY\n         B     MAIN0110              LOOP\nMAIN0130 DS    0H\n         NI    COMMFLAG,255-$COMMINQ TURN OFF 'INQUIRY' FLAG\n         ST    R2,COMMCFPE           SAVE CURRENT FILE PROCESSOR ENTRY\n         MVC   MAINPROC,PROCEPA      SET PROCESSING MODULE ADDRESS\n         TMAPTR ID=PROCKNWN,         PROCESSING MODULE IS KNOWN        +\n               DATA1=PROCNAME,       .. TRACE PROCESSING MODULE NAME   +\n               DATA2=PROCEPA         .. AND ENTRY POINT\n         OI    COMMFLAG,$COMM1ST     FIRST RECORD\n         B     MAIN0050              ENTER NORMAL RECORD PROCESSING\nMAIN0140 DS    0H\n         TMAPTR ID=UNKNOWN\n         MVC   PRTDATA(UNKNMSGL),UNKNMSG\n         BAL   R9,PRT0000            PRINT MESSAGE\n         NI    COMMFLAG,255-$COMMINQ TURN OF 'INQUIRY' FLAG\n         OI    COMMFLAG,$COMM1ST     FIRST RECORD\n         B     MAIN0050              ENTER NORMAL RECORD PROCESSING\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*   TAPE MARK OR EOT HAS BEEN FOUND                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         TMAPTR ID=TAPEMARK,         TRACE TAPE MARK                   +\n               DATA1=TDDNAME         .. DDNAME READ\n         AP    FILENBR,P1            ADD 1 TO FILE NUMBER\n         BAL   R9,MAIN0400           PERFORM 'CLEAN-UP'\n         TM    TAPEFLAG,$TAPEDTA     ANY DATA READ?\n         BO    MAIN0220              YES\nMAIN0210 DS    0H\n         OI    TAPEFLAG,$TAPETM      SET TAPE MARK FLAG\n         MVC   PRTDATA(TMMSG1L),TMMSG1 SET MESSAGE\n         BAL   R9,PRT0000            PRINT THE MESSAGE\n         B     MAIN0020              READ NEXT BLOCK\nMAIN0220 DS    0H\n         TM    TAPEFLAG,$TAPETM      WAS LAST THING A TAPE MARK?\n         BO    MAIN0240              YES..\n         OI    TAPEFLAG,$TAPETM      SET TAPE MARK FLAG\nMAIN0230 DS    0H\n         MVI   PRTCC,C'0'            DOUBLE SPACE\n         MVC   PRTDATA(TMMSG2L),TMMSG2 SET MESSAGE\n         BAL   R9,PRT0000            PRINT THE MESSAGE\n         B     MAIN0020              READ NEXT BLOCK\nMAIN0240 DS    0H\n         TM    TAPEFLAG,$TAPEEOT     EOT MESSAGE ALREADY ISSUED?\n         BO    MAIN0230              YES\n         OI    TAPEFLAG,$TAPEEOT     SET LEOT FLAG\n         MVI   PRTCC,C'0'            DOUBLE SPACE\n         MVC   PRTDATA(LEOTMSGL),LEOTMSG   SET MESSAGE\n         BAL   R9,PRT0000            PRINT THE MESSAGE\n         TM    COMMFLAG,$COMMFUL     FULL TAPE REQUESTED?\n         BNO   MAIN9900              NO.. EXIT NOW\n         B     MAIN0020              READ NEXT BLOCK\nMAIN0300 DS    0H\n         TMAPTR ID=EOT,              TRACE END-OF-TAPE                 +\n               DATA1=TDDNAME         .. DDNAME READ\n         BAL   R9,MAIN0400           PERFORM 'CLEAN-UP'\n         MVI   PRTCC,C'0'            DOUBLE SPACE\n         MVC   PRTDATA(EOTMSGL),EOTMSG  SET MESSAGE\n         BAL   R9,PRT0000            PRINT THE MESSAGE\n         B     MAIN9900              AND EXIT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             'CLEAN-UP'                                              *\n*                                                                     *\n*   Some TAPEMAP modules print members when the data set is a PDS.    *\n*   The last line may not have been filled up, so we need to allow    *\n*   the last line to be printed if necessary.  Any 'end-of-file'      *\n*   processing should also be done at this time.                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0400 DS    0H\n         TMAPTR ID=CLEAN-UP\n         ICM   R15,15,MAINPROC       ANY PROCESSOR ADDRESS?\n         BZ    MAIN0410              NO\n         OI    COMMFLAG,$COMMLST     SET 'LAST' FLAG\n         BALR  R14,R15               LINK TO ALLOW 'CLEAN-UP'\n         NI    COMMFLAG,255-$COMMLST RESET 'LAST' FLAG\n         XC    MAINPROC,MAINPROC     clear record processor\n         BR    R9                    RETURN\nMAIN0410 DS    0H\n         TMAPTR ID=NOCLEAN\n         BR    R9                    RETURN\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             CONVERT STATUS CODE TO MESSAGE TEXT                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0500 DS    0H\n         TMAPTR ID=BADSTAT,          BAD STATUS FROM TAPEEXCP          +\n               DATA1=TDDNAME,        .. DDNAME READ,                   +\n               DATA2=TCMD            .. TRACE COMMAND AND STATUS\n         LA    R2,STATT              STATUS MESSAGES TABLE\n         USING STATD,R2              DEFINE BASE\nMAIN0510 DS    0H\n         CLI   STATCODE,X'FF'        END OF STATUS MESSAGES?\n         BE    MAIN0540              UNKNOWN STATUS CODE\n         CLC   TSTAT,STATCODE        STATUS CODE LOCATED?\n         BE    MAIN0520              YES\n         AH    R2,STATL              NEXT STATUS MESSAGE\n         B     MAIN0510              LOOP\nMAIN0520 DS    0H\n         LH    R1,STATML             MESSAGE TEXT'S LENGTH\n         BCTR  R1,0                  FOR EXECUTE\n         EX    R1,STATMVC            MOVE STATUS MESSAGE TEXT\n         BAL   R9,PRT0000            PRINT MESSAGE\n         CLI   TSTAT,$TSTAT99        WAS IT A SVC-99 FAILURE?\n         BNE   MAIN0530              NO\n         LA    R1,T99RB              REQUEST BLOCK'S ADDRESS\n         USING S99RB,R1              DEFINE BASE\n         UNPK  SVC99RC(5),T99RC(3)   UNPACK REG 15\n         MVZ   SVC99RC,HEX0F0F       TURN OFF ZONES\n         TR    SVC99RC,HEXCHAR       TRANSLATE TO PRINTABLE\n         UNPK  SVC99EC(5),S99ERROR(3) UNPACK ERROR CODE\n         MVZ   SVC99EC,HEX0F0F       TURN OFF ZONES\n         TR    SVC99EC,HEXCHAR       TRANSLATE TO PRINTABLE\n         UNPK  SVC99IF(5),S99INFO(3) UNPACK UNFO CODE\n         MVZ   SVC99IF,HEX0F0F       TURN OFF ZONES\n         TR    SVC99IF,HEXCHAR       TRANSLATE TO PRINTABLE\n         MVI   SVC99RC+4,C' '        RESTORE BLANK\n         MVI   SVC99EC+4,C' '        RESTORE BLANK\n         MVI   SVC99IF+4,C' '        RESTORE BLANK\n         MVC   PRTDATA(S99MSGL),S99MSG\n         BAL   R9,PRT0000            PRINT MESSAGE\nMAIN0530 DS    0H\n         TM    STATOPT,$ABEND        ABEND ON THIS STATUS?\n         BNO   MAIN9900              NO\n         ABEND ABEND001,DUMP,,USER   ABEND DUE TO STATUS FROM TAPEEXCP\nSTATMVC  MVC   PRTDATA(0),STATM      MOVE STATUS MESSAGE\nMAIN0540 DS    0H\n         ABEND ABEND002,DUMP,,USER   UNKNOWN STATUS CODE FROM TAPEEXCP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             PRINTING                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         MVI   PRTCMD,$PRTPRT        SET COMMAND\n         LA    R1,PRTBLOK            PRINT MODULE INTERFACE BLOCK\n         L     R15,APRT              PRINT MODULE ENTRY POINT\n         BALR  R14,R15               PRINT\n         BR    R9                    RETURN\nMAIN9900 DS    0H\n         MVI   TCMD,$TCMDCLS         SET COMMAND\n         LA    R1,TAPEBLOK           TAPE INTERFACE BLOCK\n         L     R15,ATAPEIO           TAPE I/O MODULE ENTRY POINT\n         BALR  R14,R15               ALLOW TAPE MODULE TO CLOSE\n         TMAPTR ID=TAPECLSE,         TAPE CLOSED                       +\n               DATA1=TDDNAME,        .. DDNAME CLOSED                  +\n               DATA2=TSTAT           .. TRACE STATUS\n         CLI   TSTAT,$TSTATOK        TAPE CLOSE SUCCESSFUL?\n         BE    MAIN9910              YES\n         CLI   TSTAT,$TSTATNO        TAPE NOT OPEN?\n         BE    MAIN9910              ALLOWABLE\n         TMAPTR ID=CLSEFAIL,         TAPE CLOSE FAILED                 +\n               DATA1=TDDNAME,        .. DDNAME CLOSED                  +\n               DATA2=TSTAT           .. TRACE STATUS\n         ABEND ABEND003,DUMP,,USER\nMAIN9910 DS    0H\n         TM    COMMFLAG,$ABEND       ABEND ON EXIT?\n         BO    MAIN9920              YES\n         TMAPTR ID=EOJ               PROGRAM TERMINATING\n         MVI   PRTCMD,$PRTCLS        SET COMMAND\n         LA    R1,PRTBLOK            PRINT MODULE INTERFACE BLOCK\n         L     R15,APRT              PRINT MODULE ENTRY POINT\n         BALR  R14,R15               ALLOW PRINT TO CLOSE FILES\n         L     R2,TRSIZE             TRACE TABLE'S SIZE\n         LA    R2,32(R2)             FOR BOUNDARY ROUNDING\n         L     R1,TRADDR             TRACE TABLE'S ADDRESS\n         FREEMAIN R,A=(R1),LV=(R2)   RELEASE TRACE TABLE STORAGE\n         L     R13,4(R13)            RESTORE REGISTER 13\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS\n         SR    R15,R15               GIVE GOOD RETURN CODE\n         BR    R14                   RETURN TO CALLER\nMAIN9920 DS    0H\n         ABEND 100,DUMP,,USER        ABEND\n*---------------------------------------------------------------------*\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nTAPESAVE DC    18F'0'                REGISTER SAVE AREA\nVCOMM    DC    V(TMAPCOMM)           COMMON DATA ADDRESS\nMAINPROC DC    A(0)                  RECORD PROCESSOR ADDRESS\nH2       DC    H'2'                  CONSTANT\nH8       DC    H'8'                  CONSTANT\nTAPEFLAG DC    X'00'                 FLAGS/SWITCHES\n$TAPEDTA EQU   X'80'                 .. DATA FOUND\n$TAPETM  EQU   X'40'                 .. LAST READ FOUND A TAPE MARK\n$TAPEEOT EQU   X'20'                 .. LOGICAL EOT MESSAGE PRINTED\nFILENBR  DC    PL3'1'                FILE NUMBER\nP1       DC    P'1'                  CONSTANT\nTMAPDD   DC    CL8'TMAPTAPE'         TAPE'S DD NAME\nVOL1ID   DC    C'VOL1'               CONSTANT\nHEX0F0F  DC    8X'0F'                CONSTANT\nHEXCHAR  DC    C'0123456789ABCDEF'   CONSTANT\nMSG01    DC    C'** ERROR DETECTED BY PARAMETER CONVERTER, PROCESSING A+\n               BORTED'\nMSG01L   EQU   *-MSG01\nDENMSG   DC    C'TAPE IS RECORDED AT DENSITY '\nDENDENID DC    C' '\n         DC    C' ('\nDENBPI   DC    CL4' '\n         DC    C'BPI)'\nDENMSGL  EQU   *-DENMSG\nVOLMSG1  DC    C'** FIRST RECORD ON TAPE IS NOT VOL1 RECORD, TAPE VOLSE+\n               R IS UNKNOWN'\nVOLMSG1L EQU   *-VOLMSG1\nVOLMSG2  DS    0C\n         DC    C'TAPE VOLSER IS:'\nVOLMSG2V DC    CL6' '\nVOLMSG2L EQU   *-VOLMSG2\nFILEMSG  DS    0C\n         DC    CL27' * * * * * * * * * * * * * '\n         DC    CL27' * * * * * * * * * * * * * '\n         DC    CL15'PHYSICAL FILE #'\nFILEMSGN DC    CL07' '\n         DC    CL27' * * * * * * * * * * * * * '\n         DC    CL27' * * * * * * * * * * * * * '\nFILEMSGL EQU   *-FILEMSG\nUNKNMSG  DC    C'DATA NOT RECOGNIZED'\nUNKNMSGL EQU   *-UNKNMSG\nTMMSG1   DC    CL20'* LEADING TAPE MARK '\n         DC    CL20'* LEADING TAPE MARK '\n         DC    CL20'* LEADING TAPE MARK '\n         DC    CL20'* LEADING TAPE MARK '\n         DC    CL20'* LEADING TAPE MARK '\nTMMSG1L  EQU   *-TMMSG1\nTMMSG2   DC    CL20'* * * TAPE MARK * * '\n         DC    CL20'* * * TAPE MARK * * '\n         DC    CL20'* * * TAPE MARK * * '\n         DC    CL20'* * * TAPE MARK * * '\n         DC    CL20'* * * TAPE MARK * * '\n         DC    CL20'* * * TAPE MARK * * '\nTMMSG2L  EQU   *-TMMSG2\nLEOTMSG  DC    CL20'*LOGICAL END OF TAPE'\n         DC    CL20'*LOGICAL END OF TAPE'\n         DC    CL20'*LOGICAL END OF TAPE'\n         DC    CL20'*LOGICAL END OF TAPE'\n         DC    CL20'*LOGICAL END OF TAPE'\n         DC    CL20'*LOGICAL END OF TAPE'\nLEOTMSGL EQU   *-LEOTMSG\nEOTMSG   DC    CL20'* * END OF TAPE * * '\n         DC    CL20'* * END OF TAPE * * '\n         DC    CL20'* * END OF TAPE * * '\n         DC    CL20'* * END OF TAPE * * '\n         DC    CL20'* * END OF TAPE * * '\n         DC    CL20'* * END OF TAPE * * '\nEOTMSGL  EQU   *-EOTMSG\nS99MSG   DC    C'** DYNAMIC ALLOCATION FAILURE, R15='\nSVC99RC  DC    CL4' '\n         DC    C'  S99ERROR='\nSVC99EC  DC    CL4' '\n         DC    C'  S99INFO='\nSVC99IF  DC    CL4' '\n         DC    C' '\nS99MSGL  EQU   *-S99MSG\n*---------------------------------------------------------------------*\n*                                                                     *\n*              COMMAND/STATUS BLOCK                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\nTAPEBLOK TAPEBLOK TYPE=CSECT\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRTBLOK  PRTBLOK  TYPE=CSECT\n         SPACE 2\n*---------------------------------------------------------------------*\n*              TAPE DENSITY ID/BPI EQUIVALENTS TABLE                  *\n*---------------------------------------------------------------------*\nDENTABLE DS    0C\n         DC    CL04'800 '              DENSITY ID 2\n         DC    CL04'1600'              DENSITY ID 3\n         DC    CL04'6250'              DENSITY ID 4\n         DC    CL04'38K '              DENSITY ID 5\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*              TAPEEXCP STATUS CODE/MESSAGE TABLE                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nSTATT    DS    0C\n         STATMSG $TSTATAF,$ABEND,'DEBCHK TYPE=ADD FAILED'\n         STATMSG $TSTATND,,'DD NOT FOUND'\n         STATMSG $TSTATOP,,'TAPE DD ALREADY OPEN'\n         STATMSG $TSTATNO,,'TAPE DD NOT OPEN'\n         STATMSG $TSTATTM,,'TAPE MARK READ'\n         STATMSG $TSTATPE,,'PHYSICAL END OF TAPE REACHED'\n         STATMSG $TSTATIE,$ABEND,'I/O ERROR OCCURRED'\n         STATMSG $TSTATXD,$ABEND,'DEB NOT FOUND DURING CLOSE'\n         STATMSG $TSTATDF,$ABEND,'DEBCHK TYPE=DELETE FAILED'\n         STATMSG $TSTATIX,$ABEND,'I/O ERROR, SENSE NOT AVAILABLE'\n         STATMSG $TSTATIC,,'TCMD WAS INVALID'\n         STATMSG $TSTATSF,,'SENSE COMMAND FAILED, DENSITY NOT AVAILABLE+\n               '\n         STATMSG $TSTATNC,$ABEND,'NO CONSOLE COMMUNICATION BLOCK AVAILA+\n               BLE WHILE RUNNING AS A STARTED TASK'\n         STATMSG $TSTATNU,,'NO SUITABLE UNIT IS AVAILABLE'\n         STATMSG $TSTAT99,$ABEND,'DYNAMIC ALLOCATE/DE-ALLOCATE FAILED'\n         DC      X'FF'\n         LTORG\n*---------------------------------------------------------------------*\n*                                                                     *\n*              TAPEEXCP STATUS CODE/MESSAGE TEXT TABLE                *\n*                                                                     *\n*---------------------------------------------------------------------*\nSTATD    DSECT\nSTATL    DS   AL2                    LENGTH OF THIS ENTRY\nSTATML   DS   AL2                    MESSAGE TEXT'S LENGTH\nSTATOPT  DS   X                      PROCESSING OPTIONS\nSTATCODE DS   X                      STATUS CODE\nSTATM    DS   C                      TEXT FOR THIS STATUS CODE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nTMAPCOMM TMAPCOMM TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY REGEQU\n         IEFZB4D0\n         IEFZB4D2\n         END  TMAPMAIN\n./ ADD NAME=TMAPMCS\n          TITLE 'TMAPMCS - SMP/E MCS FILE PROCESSOR'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TMAPMCS                                               *\n*                                                                     *\n*  Function:                                                          *\n*     This module inteprets SMP/E MCS files, FUNCTIONs, PTFs,         *\n*     APARs, and USERMODs will be listed.                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTMAPMCS  CSECT\n         USING TMAPMCS,R12\n         USING TMAPCOMM,R11\n         STM   R14,R12,12(R13)     SAVE REGS\n         LR    R12,R15             SET BASE REG\n         B     MCS0000             SKIP EYECATCHER\n         DC    CL8'TMAPMCS'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMCS0000  DS    0H\n         LA    R15,MCSSAVE         OUR SAVE AREA ADDRESS\n         ST    R13,4(R15)          CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R15,8(R13)          CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R15             SET SAVE AREA ADDRESS\n         L     R10,COMMRECA        CURRENT RECORD'S ADDRESS\n         TMAPTR ID=ENTRY,          TRACE ENTRY                         +\n               DATA1=COMMFLAG\n         TM    COMMFLAG,$COMMLST   'CLEAN-UP' CALL?\n         BO    MCS0600\n         TM    COMMFLAG,$COMMINQ   INQUIRE CALL?\n         BNO   MCS0100             NO\n         TMAPTR ID=INQCALL\n         SR    R2,R2               CLEAR REGISTER\n         SR    R3,R3               CLEAR REGISTER\n         ICM   R3,3,COMMRECL       CURRENT RECORD'S LENGTH\n         D     R2,F80              DIVIDE BY 80\n         LTR   R2,R2               REMAINDER = ZERO?\n         BNZ   EXIT0008            NO..\n         LA    R2,72               NUMBER OF COLUMNS TO SCAN\n         LR    R4,R10              FIRST BYTE OF FIRST RECORD\n         BAL   R9,MCS0400          FIND FIRST NON BLANK\n         LTR   R4,R4               NON-BLANK FOUND?\n         BZ    EXIT0008            NO\n         CLC   =C'++',0(R4)        SMP/E CONTROL STATEMENT?\n         BNE   EXIT0008            NO\n         LA    R4,2(R4)            SKIP '++'\n         SH    R2,H2               MINUS LENGTH\n         BNH   EXIT0008            EXIT IF NEGATIVE\n         BAL   R9,MCS0400          FIND NEXT NON-BLANK\n         LTR   R4,R4               NON-BLANK FOUND?\n         BZ    EXIT0008            NO\n         BAL   R9,MCS0400          FIND NEXT\n         CLC   APAR,0(R4)          AN APAR?\n         BE    MCS0010             YES\n         CLC   PTF,0(R4)           A PTF?\n         BE    MCS0010             YES\n         CLC   FUNCTION,0(R4)      A FUNCTION?\n         BE    MCS0010             YES\n         CLC   USERMOD,0(R4)       A USERMOD?\n         BE    MCS0010             YES\n         B     EXIT0008            OTHERWISE ASSUME WE DON'T KNOW\nMCS0010  DS    0H\n         TMAPTR ID=HEADING\n         MVI   MCSFLAG,0           RESET ALL FLAGS\n         MVC   COMMMEML,MCSMEML    SET OUTPUT LENGTH PER MEMBER\n         MVC   COMMMEM#,MCSMEM#    SET MEMBERS PER LINE\n         MVC   PRTDATA(HEADINGL),HEADING\n         BAL   R9,PRT0000          PRINT HEADING\n         TM    COMMFLAG,$COMMNOM   NO-MEMBERS?\n         BO    EXIT0000            SKIP SUBHEADING\n         MVC   COMMSUBH(SUBHEADL),SUBHEAD\n         MVC   PRTDATA(SUBHEADL),SUBHEAD\n         BAL   R9,PRT0000          PRINT SUB HEADING\n         B     EXIT0000            AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PROCESS SMP/E CONTROL STATEMENTS                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nMCS0100  DS    0H\n         TMAPTR ID=NEWBLOCK\n         TM    MCSFLAG,$ERROR      ERROR OCCURRED?\n         BO    EXIT0000            YES, EXIT\n         TM    COMMFLAG,$COMMNOM   NO-MEMBERS?\n         BO    EXIT0000            EXIT\n         SR    R2,R2               CLEAR REGISTER\n         SR    R3,R3               CLEAR REGISTER\n         ICM   R3,3,COMMRECL       CURRENT RECORD'S LENGTH\n         D     R2,F80              DIVIDE BY 80\n         LTR   R2,R2               REMAINDER = ZERO?\n         BNZ   MCS0500             NO... ERROR\n* ------------------------------------------------------------------- *\n*                                                                     *\n*      PROCESS EACH RECORD OF THE BLOCK                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMCS0110  DS    0H\n         LA    R2,72               LENGTH TO SCAN\n         LR    R4,R10              FIRST BYTE TO SCAN\n         BAL   R9,MCS0400          FIND FIRST NON-BLANK\n         LTR   R4,R4               NON-BLANK FOUND?\n         BZ    MCS0300             NO, GO TO NEXT STATEMENT\n         TM    MCSFLAG,$COMMENT    PROCESSING A COMMENT?\n         BO    MCS0280             YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*      SEARCH FOR SMP/E CONTROL STATEMENT DELIMITER (++)              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMCS0130  DS    0H\n         TM    MCSFLAG,$SMPE       ARE WE READING AN SMP/E STATEMENT?\n         BO    MCS0250             YES.. FIND END OF STATEMENT\nMCS0140  DS    0H\n         CLC   =C'++',0(R4)        IS THIS AN SMP/E CONTROL STATEMENT?\n         BE    MCS0150             YES\n         LA    R4,1(R4)            NEXT BYTE\n         BCT   R2,MCS0140          SEARCH FOR ++\n         B     MCS0300             NO MORE DATA, NEED ANOTHER RECORD\nMCS0150  DS    0H\n         OI    MCSFLAG,$SMPE       SMP/E STATEMENT UNDER WAY\n         TMAPTR ID=SMPEFND,        SMP/E STATEMENT FOUND               +\n               DATA1=0(R4),        .. FIRST 8 BYTES INTO TRACE TABLE   +\n               DATA2=8(R4)         .. NEXT 8 BYTES ALSO\n         LA    R4,2(R4)            SKIP DELIMITER\n         SH    R2,H2               MINUS DELIMITER LENGTH\n         BZ    MCS0300             END OF STATEMENT?\n         BM    MCS0300             END OF STATEMENT?\n         BAL   R9,MCS0400          FIND NEXT NON-BLANK\n         LTR   R4,R4               NON-BLANK FOUND?\n         BZ    MCS0300             NO\n         MVC   SYSMODT,BLANKS      CLEAR SYSMOD TYPE\n         CLC   APAR,0(R4)          AN APAR?\n         BE    MCS0160             YES\n         CLC   PTF,0(R4)           A PTF?\n         BE    MCS0170             YES\n         CLC   FUNCTION,0(R4)      A FUNCTION?\n         BE    MCS0180             YES\n         CLC   USERMOD,0(R4)       A USERMOD?\n         BE    MCS0190             YES\n         B     MCS0300             DON'T KNOW WHAT IT IS\nMCS0160  DS    0H\n         MVC   SYSMODT(4),APAR     LET'EM KNOW IT'S AN APAR\n         LA    R4,4(R4)            SKIP APAR DELIMITER\n         SH    R2,H4               MINUS APAR DELIMITER LENGTH\n         BZ    MCS0300             NO MORE DATA\n         BM    MCS0300             NO MORE DATA\n         B     MCS0200\nMCS0170  DS    0H\n         MVC   SYSMODT(3),PTF      LET'EM KNOW IT'S A PTF\n         LA    R4,3(R4)            SKIP PTF DELIMITER\n         SH    R2,H3               MINUS PTF DELIMITER LENGTH\n         BZ    MCS0300             NO MORE DATA\n         BM    MCS0300             NO MORE DATA\n         B     MCS0200\nMCS0180  DS    0H\n         MVC   SYSMODT(8),FUNCTION LET'EM KNOW IT'S A FUNCTION\n         LA    R4,8(R4)            SKIP FUNCTION DELIMITER\n         SH    R2,H8               MINUS FUNCTION DELIMITER LENGTH\n         BZ    MCS0300             NO MORE DATA\n         BM    MCS0300             NO MORE DATA\n         B     MCS0200\nMCS0190  DS    0H\n         MVC   SYSMODT(7),USERMOD  LET'EM KNOW IT'S A USERMOD\n         LA    R4,7(R4)            SKIP USERMOD DELIMITER\n         SH    R2,H7               MINUS USERMOD DELIMITER LENGTH\n         BZ    MCS0300             NO MORE DATA\n         BM    MCS0300             NO MORE DATA\nMCS0200  DS    0H\n         BAL   R9,MCS0400          FIND NEXT NON-BLANK\n         LTR   R4,R4               NON-BLANK FOUND?\n         BZ    MCS0300             NO.. GIVE UP\n         CLI   0(R4),C'('          OPENING PARENTHESIS?\n         BNE   MCS0300             NO... GIVE UP\n         LA    R4,1(R4)            SKIP OPENING PARENTHESIS\n         BCT   R2,MCS0210          MINUS PARENTHESIS LENGTH\n         B     MCS0300             NO DATA?\nMCS0210  DS    0H\n         BAL   R9,MCS0400          FIND NEXT NON-BLANK\n         LTR   R4,R4               NON-BLANK FOUND?\n         BZ    MCS0300             NO.. GIVE UP\n         MVC   SYSMODN,BLANKS      CLEAR SYSMOD NAME\n         LA    R1,SYSMODN          SYSMOD NAME\n         CH    R2,H8               MORE THAN 8 CHARACTERS LEFT?\n         BNH   MCS0220             NO\n         LH    R2,H8               LIMIT TO 8\nMCS0220  DS    0H\n         CLI   0(R4),C' '          BLANK?\n         BE    MCS0230             YES\n         CLI   0(R4),C')'          ENDING PARENTHESIS?\n         BE    MCS0230             YES\n         MVC   0(1,R1),0(R4)       COPY TO PRINT AREA\n         LA    R1,1(R1)            NEXT\n         LA    R4,1(R4)            NEXT\n         BCT   R2,MCS0220          LOOP\nMCS0230  DS    0H\n         MVI   PRTCMD,$PRTMEM      SET COMMAND FOR TMAPPRT\n         MVC   PRTDATA(SYSMODL),SYSMOD\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT\n*---------------------------------------------------------------------*\n*                                                                     *\n*      FIND END OF STATEMENT                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nMCS0250  DS    0H\n         CLC   =C'/*',0(R4)        START OF A COMMENT?\n         BE    MCS0260             YES\n         CLI   0(R4),C'.'          END OF STATEMENT?\n         BE    MCS0270             YES\n         LA    R4,1(R4)            NEXT\n         BCT   R2,MCS0250          KEEP LOOKING\n         B     MCS0300             NEED ANOTHER RECORD\nMCS0260  DS    0H\n         OI    MCSFLAG,$COMMENT    COMMENT IN PROGRESS\n         TMAPTR ID=COMMENT\n         B     MCS0280             FIND END OF THE COMMENT\nMCS0270  DS    0H\n         NI    MCSFLAG,255-$SMPE   TURN OFF SMP/E STATEMENT FLAG\n         TMAPTR ID=SMPEEND\n         B     MCS0300             NEED ANOTHER RECORD\n* ------------------------------------------------------------------- *\n*                                                                     *\n*      A COMMENT IS BEING SEARCHED FOR THE ENDING DELIMITER (*/)      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMCS0280  DS    0H\n         CLC   =C'*/',0(R4)        ENDING DELIMITER FOUND?\n         BE    MCS0290             YES\n         LA    R4,1(R4)            NEXT BYTE\n         BCT   R2,MCS0280          KEEP SCANNING\n         B     MCS0300             END OF DATA, NEED ANOTHER RECORD\nMCS0290  DS    0H\n         NI    MCSFLAG,255-$COMMENT TURN OFF COMMENT FLAG\n         TMAPTR ID=COMMTEND\n         LA    R4,2(R4)            SKIP ENDING DELIMITER\n         SH    R2,H2               MINUS DELIMITER LENGTH\n         BZ    MCS0300             NO MORE DATA, GET ANOTHER RECORD\n         BM    MCS0300             NO MORE DATA, GET ANOTHER RECORD\n         BAL   R9,MCS0400          FIND NEXT NON-BLANK\n         LTR   R4,R4\n         BNZ   MCS0250             FIND END OF STATEMENT\n*---------------------------------------------------------------------*\n*                                                                     *\n*      NEED NEXT RECORD FROM CURRENT TAPE BLOCK                       *\n*                                                                     *\n*---------------------------------------------------------------------*\nMCS0300  DS    0H\n         LA    R10,80(R10)         NEXT RECORD\n         BCT   R3,MCS0110          PROCESS THIS RECORD\n         B     EXIT0000            ALL LOGICAL RECORDS PROCESSED\n*---------------------------------------------------------------------*\n*                                                                     *\n*              FIND FIRST NON-BLANK                                   *\n*                                                                     *\n*           R2  LENGTH TO SCAN                                        *\n*           R4  FIRST BYTE TO SCAN                                    *\n*           R9  RETURN ADDRESS                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nMCS0400  DS    0H\n         LTR   R2,R2\n         BNM   MCS0410\n         DC    H'0'\nMCS0410  DS    0H\n         CLI   0(R4),C' '          BLANK?\n         BHR   R9                  NO.. RETURN\n         LA    R4,1(R4)            NEXT BYTE\n         BCT   R2,MCS0400          LOOP\n         SR    R4,R4               NOT FOUND\n         BR    R9                  RETURN\n*---------------------------------------------------------------------*\n*                                                                     *\n*              SERIOUS ERROR CONDITIONS                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nMCS0500  DS    0H\n         TMAPTR ID=INVBLKSZ,       BLOCK SIZE IS NOT A MULTIPLE OF 80  +\n               DATA1=COMMRECL      .. INCLUDE BLOCK SIZE IN TRACE\n         OI    MCSFLAG,$ERROR      SET ERROR FLAG\n         MVC   PRTDATA(MSG01L),MSG01\n         BAL   R9,PRT0000          PRINT MESSAGE\n         B     EXIT0000            AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              CLEAN-UP                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nMCS0600  DS    0H\n         TMAPTR ID=CLEAN-UP\n         MVI   PRTCMD,$PRTMEM      MEMBER PRINT\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         B     EXIT0000            EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PRINTING                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         MVI   PRTCMD,$PRTPRT      REQUEST PRINT\n         MVI   PRTCC,C' '          SINGLE SPACE\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         BR    R9                  RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             EXIT                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS   0H\n         TMAPTR ID=EXIT0000          EXITING, RC=0\n         SR    R15,R15               SET RETURN CODE TO ZERO\n         B     MCS9900               AND RETURN\nEXIT0008 DS    0H\n         TMAPTR ID=EXIT0008          EXITING, RC=8\n         LA    R15,8                 SET RETURN CODE TO 8\nMCS9900  DS    0H\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         L     R14,12(R13)           RESTORE REGISTER 14\n         LM    R0,R12,20(R13)        RESTORE ALL OTHER REGISTERS        ASE01680\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMCSSAVE  DC    18F'0'                REGISTER SAVE AREA\nF80      DC    F'80'                 CONSTANT\nH2       DC    H'2'                  CONSTANT\nH3       DC    H'3'                  CONSTANT\nH4       DC    H'4'                  CONSTANT\nH7       DC    H'7'                  CONSTANT\nH8       DC    H'8'                  CONSTANT\nMCSMEML  DC    Y(SYSMODL)            OUTPUT LENGTH PER MEMBER\nMCSMEM#  DC    Y(L'PRTDATA/SYSMODL)  NUMBER PER LINE\nMCSFLAG  DC    X'00'                 FLAGS\n$ERROR   EQU   X'80'                 .. SERIOUS ERROR HAS OCCURRED\n$SMPE    EQU   X'40'                 .. SMP/E STATEMENT FOUND\n$COMMENT EQU   X'20'                 .. COMMENT FOUND\nBLANKS   DC    CL08' '               CONSTANT\nAPAR     DC    C'APAR'               CONSTANT\nPTF      DC    C'PTF'                CONSTANT\nFUNCTION DC    C'FUNCTION'           CONSTANT\nUSERMOD  DC    C'USERMOD'            CONSTANT\nHEADING  DC    C'THIS DATASET CONTAINS SMP/E MCS RECORDS'\nHEADINGL EQU   *-HEADING\nSUBHEAD  DS    0C\n         DC    CL11'SYSMOD TYPE'\n         DC    CL02' '\n         DC    CL11'SYSMOD NAME'\n         DC    CL06' '\n         DC    CL11'SYSMOD TYPE'\n         DC    CL02' '\n         DC    CL11'SYSMOD NAME'\n         DC    CL06' '\n         DC    CL11'SYSMOD TYPE'\n         DC    CL02' '\n         DC    CL11'SYSMOD NAME'\n         DC    CL06' '\n         DC    CL11'SYSMOD TYPE'\n         DC    CL02' '\n         DC    CL11'SYSMOD NAME'\nSUBHEADL EQU   *-SUBHEAD\nSYSMOD   DS    0C\n         DC    CL02' '\nSYSMODT  DC    CL08' '               SYSMOD TYPE\n         DC    CL05' '\nSYSMODN  DC    CL08' '               SYSMOD NAME\n         DC    CL07' '\nSYSMODL  EQU   *-SYSMOD\nMSG01    DC    C'*** BLOCK FOUND WITH LENGTH NOT A MULTIPLE OF 80, REMA+\n               INDER OF FILE WILL BE BYPASSED'\nMSG01L   EQU   *-MSG01\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK  TYPE=CSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              LITERALS                                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         LTORG\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTMAPCOMM TMAPCOMM TYPE=DSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  TMAPMCS\n./ ADD NAME=TMAPMOVE\n          TITLE 'TMAPMOVE - IEHMOVE UNLOAD PROCESSOR'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TMAPMOVE - IEHMOVE UNLOAD PROCESSOR                   *\n*                                                                     *\n*  Function:                                                          *\n*     Print DSORG, RECFM, BLKSIZE, LRECL, DSN, and names of the       *\n*     members of unloaded PDS's.                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTMAPMOVE CSECT\n         USING TMAPMOVE,R12\n         USING TMAPCOMM,R11\n         STM   R14,R12,12(R13)     SAVE REGS\n         LR    R12,R15             SET BASE REG\n         B     MOVE0000            SKIP EYECATCHER\n         DC    CL8'TMAPMOVE'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOVE0000 DS    0H\n         LA    R15,MOVESAVE        OUR SAVE AREA ADDRESS\n         ST    R13,4(R15)          CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R15,8(R13)          CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R15             SET SAVE AREA ADDRESS\n         L     R10,COMMRECA        CURRENT RECORD'S ADDRESS\n         TMAPTR ID=ENTRY,          TRACE ENTRY                         +\n               DATA1=COMMFLAG\n         TM    COMMFLAG,$COMMLST   'CLEAN-UP' CALL?\n         BO    MOVE0400            YES\n         TM    COMMFLAG,$COMMINQ   INQUIRE CALL?\n         BNO   MOVE0100            NO\n         TMAPTR ID=INQCALL\n         CLC   MOVEID,5(R10)       LOOK LIKE IEHMOVE DATA?\n         BNE   EXIT0008            NO\n         MVI   MOVEFLAG,0          RESET ALL FLAGS\n         MVC   PRTDATA(HEADINGL),HEADING\n         BAL   R9,PRT0000          PRINT HEADING\n         ST    R10,DCBRECA         SET RECORD ADDRESS\n         MVC   DCBDSOD,DSODISP     DISPLACEMENT TO DSORG\n         MVC   DCBRFMD,RFMDISP     DISPLACEMENT TO RECORD FORMAT\n         MVC   DCBBSZD,BSZDISP     DISPLACEMENT TO BLOCK SIZE\n         MVC   DCBRSZD,RSZDISP     DISPLACEMENT TO RECORD SIZE\n         MVC   DCBUNTD,UNTDISP     DISPLACEMENT TO DEVICE TYPE\n         LA    R1,DCBBLOK          DCB CONVERTER PARMS ADDRESS\n         L     R15,ADCB            DCB CONVERTER ENTRY POINT\n         BALR  R14,R15             LINK TO DCB CONVERTER\n         MVC   PRDSO,DCBDSO        SET DATA SET ORG\n         MVC   PRRFM,DCBRFM        SET RECORD FORMAT\n         MVC   PRBSZ,DCBBSZ        SET BLOCK SIZE\n         MVC   PRRSZ,DCBRSZ        SET RECORD SIZE\n         MVC   PRTDATA(DCBMSGL),DCBMSG\n         BAL   R9,PRT0000          PRINT DCB MESSAGE\n         MVC   COMMMEML,H10        SET OUTPUT LENGTH\n         MVC   COMMMEM#,H12        SET NUMBER PER LINE\n         L     R15,ADCB            DCB INFO CONVERTER\n         BALR  R14,R15             CONVERT DCB INFO\n         LA    R1,85(R10)          FORMAT-1 DSCB INFO ADDRESS\n         MVC   DSNNAME,85(R10)     MOVE DATASET NAME\n         MVC   PRTDATA(DSNMSGL),DSNMSG\n         BAL   R9,PRT0000          PRINT DATASET NAME\n         TM    COMMFLAG,$COMMNOM   NO-MEMBERS?\n         BO    EXIT0000            SKIP\n         AH    R10,DSODISP         BASE + DSORG DISPLACEMENT\n         TM    0(R10),DS1DSGPO     IS THIS A PARTITIONED DATA SET?\n         BNO   EXIT0000            NO\n         OI    MOVEFLAG,$PDS       SET PDS FLAG\n         MVC   PRTDATA(SUBHEADL),SUBHEAD\n         BAL   R9,PRT0000          PRINT SUBHEADING\n         MVC   COMMSUBH(SUBHEADL),SUBHEAD\n         B     EXIT0000            AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PRINT MEMBERS                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nMOVE0100 DS    0H\n         TM    MOVEFLAG,$ERROR     SERIOUS ERROR OCCURRED?\n         BO    EXIT0000            YES EXIT\n         TM    COMMFLAG,$COMMNOM   NO-MEMBERS?\n         BO    EXIT0000            SKIP\n         TM    MOVEFLAG,$PDS       IS CURRENT DATASET A PDS?\n         BNO   EXIT0000            NO.. EXIT\n         TMAPTR ID=MEMBER\n         SR    R8,R8               CLEAR FOR LENGTH\n         ICM   R8,3,COMMRECL       CURRENT RECORD LENGTH\n         TM    COMMFLAG,$COMM1ST   FIRST PASS?\n         BO    MOVE0110            YES\n         L     R2,CURRBUFF         RESTORE CURRENT BUFFER ADDRESS\n         B     MOVE0160            RESUME LOGIC\n*---------------------------------------------------------------------*\n*              SKIP TO RECORD #4                                      *\n*---------------------------------------------------------------------*\nMOVE0110 DS    0H\n         TMAPTR ID=1STPASS\n         LA    R3,5                SET LOOP CONTROL\nMOVE0120 DS    0H\n         TMAPTR ID=SKIPSEG,                                            +\n               RDATA1=R3\n         BAL   R9,MOVE0200         GET NEXT SEGEMENTS\n         BCT   R3,MOVE0120         LOOP\n         LA    R2,BUFFER1+44       FIRST MEMBER DATA\n         USING RECPRFX,R2          DEFINE BASE\n         CLI   RECTYPE,$RECTDIR    DIRECTORY ENTRY?\n         BNE   MOVE0500            NO... ERROR\nMOVE0130 DS    0H\n         TMAPTR ID=DIRSRCH,                                            +\n               DATA1=RECTYPE,                                          +\n               DATA2=RECTYPE+8\n         CLI   RECTYPE,$RECTDIR    DIRECTORY ENTRY\n         BNE   MOVE0140            NO\n         MVC   PRTDATA(8),RECDATA  COPY MEMBER NAME\n         MVI   PRTCMD,$PRTMEM      SET COMMAND FOR TMAPPRT\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT\nMOVE0140 DS    0H\n         AH    R2,RECLEN              PLUS DATA LENGTH\n         LA    R2,RECDATA-RECPRFX(R2) PLUS PREFIX LENGTH\nMOVE0150 DS    0H\n         C     R2,ABUFFER2         ADDRESS BEYOND END OF BUFFER 1?\n         BL    MOVE0130            NO\nMOVE0160 DS    0H\n         BAL   R9,MOVE0200         GET NEXT SEGMENT\n         SH    R2,$BUFSIZE         MINUS 1 BUFFER LENGTH\n         B     MOVE0150            LOOP\n*---------------------------------------------------------------------*\n*              DE-BLOCK NEXT SEGEMENT                                 *\n*---------------------------------------------------------------------*\nMOVE0200 DS    0H\n         TMAPTR ID=NEXTSEG,        TRACE SEGMENTS                      +\n               RDATA1=R10,         .. CURRENT TAPE I/O ADDRESS         +\n               RDATA2=R8           .. TAPE I/O AREA LEFT\n         LTR   R8,R8               ANY DATA LEFT IN THIS TAPE BLOCK?\n         BZ    MOVE0210            NO..\n         MVC   BUFFER1,BUFFER2     COPY BUFFER 2 TO BUFFER 1\n         MVC   BUFFER2,2(R10)      COPY I/O BUFFER TO BUFFER 2\n         AH    R10,$RECSIZE        NEXT TAPE BUFFER RECORD\n         SH    R8,$RECSIZE         MINUS RECORD SIZE\n         BR    R9                  RETURN\nMOVE0210 DS    0H\n         ST    R2,CURRBUFF         SAVE CURRENT BUFFER ADDRESS\n         B     EXIT0000            AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              'CLEAN-UP'                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nMOVE0400 DS    0H\n         MVI   PRTCMD,$PRTMEM      REQUEST PRINT\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         B     EXIT0000            EXIT\n*---------------------------------------------------------------------*\n*              SERIOUS ERRORS                                         *\n*---------------------------------------------------------------------*\nMOVE0500 DS    0H\n         TMAPTR ID=BADMEM1         FIRST DIRECTORY ENTRY MISSING\n         MVC   PRTDATA(MSG01L),MSG01\n         BAL   R9,PRT0000          PRINT MESSAGE\n         OI    MOVEFLAG,$ERROR     SET ERROR FLAG\n         B     EXIT0000            EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PRINTING                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         MVI   PRTCMD,$PRTPRT      REQUEST PRINT\n         MVI   PRTCC,C' '          SINGLE SPACE\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         BR    R9                  RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             EXIT                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         TMAPTR ID=EXIT0000          EXITING, RC=0\n         SR    R15,R15               SET RETURN CODE TO ZERO\n         B     MOVE9900              AND RETURN\nEXIT0008 DS    0H\n         TMAPTR ID=EXIT0008          EXITING, RC=8\n         LA    R15,8                 SET RETURN CODE TO 8\nMOVE9900 DS    0H\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         L     R14,12(R13)           RESTORE REGISTER 14\n         LM    R0,R12,20(R13)        RESTORE ALL OTHER REGISTERS        ASE01680\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMOVESAVE DC    18F'0'                REGISTER SAVE AREA\nABUFFER2 DC    A(BUFFER2)            ADDRESS OF BUFFER 2\nCURRBUFF DC    A(0)                  CURRENT BUFFER ADDRESS\nDSODISP  DC    AL2(DS1DSORG-IECSDSL1+80+5+2) DISP TO DSORG\nRFMDISP  DC    AL2(DS1RECFM-IECSDSL1+80+5+2) DISP TO RECORD FORMAT\nBSZDISP  DC    AL2(DS1BLKL-IECSDSL1+80+5+2)  DISP TO BLOCK SIZE\nRSZDISP  DC    AL2(DS1LRECL-IECSDSL1+80+5+2) DISP TO RECORD SIZE\nUNTDISP  DC    AL2(285)              DISPLACEMENT TO UNIT TYPE\nH10      DC    H'10'                 CONSTANT\nH12      DC    H'12'                 CONSTANT\n$BUFSIZE DC    Y(L'BUFFER1)          LENGTH OF BUFFERS\n$RECSIZE DC    Y(80)                 LENGTH OF RECORD (BUFFER+SEQ#)\nMOVEFLAG DC    X'00'                 FLAGS/SWITCHES\n$ERROR   EQU   X'80'                 .. SERIOUS ERROR HAS OCCURRED\n$PDS     EQU   X'40'                 .. CURRENT DATA SET IS A PDS\nMOVEID   DC    C'THIS IS AN UNLOADED DATA SET'\nHEADING  DC    C'THIS DATA SET WAS CREATED BY IEHMOVE'\nHEADINGL EQU   *-HEADING\nDCBMSG   DS    0C\n         DC    C'DATA SET ORG:'\nPRDSO    DC    CL4' '\n         DC    C'   RECORD FORMAT:'\nPRRFM    DC    CL4' '\n         DC    C'   BLOCK SIZE:'\nPRBSZ    DC    CL6' '\n         DC    C'   RECORD SIZE:'\nPRRSZ    DC    CL6' '\n         DC    C'   DEVICE TYPE:'\nPRUNT    DC    CL6' '\nDCBMSGL  EQU   *-DCBMSG\nDSNMSG   DC    C'DATASET''S NAME WAS: '\nDSNNAME  DS    CL44' '\nDSNMSGL  EQU   *-DSNMSG\nSUBHEAD  DC    C'UNLOADED MEMBERS:'\nSUBHEADL EQU   *-SUBHEAD\nMSG01    DC    C'*** FIRST DIRECTORY BLOCK COULD NOT BE LOCATED, REMAIN+\n               DER OF THIS DATA SET WILL BE BYPASSED'\nMSG01L   EQU   *-MSG01\nBUFFER1  DS    CL78\nBUFFER2  DS    CL78\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               PRINT MODULE INTERFACE BLOCK                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK  TYPE=CSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               DCB CONVERTER INTERFACE BLOCK                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDCBBLOK  DCBBLOK  TYPE=CSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTMAPCOMM TMAPCOMM TYPE=DSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               FORMAT-1 DSCB                                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFORMAT1  DSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               RECORD PREFIX                                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nRECPRFX  DSECT\nRECLEN   DS   H                    LENGTH OF THIS RECORD\nRECTYPE  DS   X                    RECORD TYPE\n$RECTEND EQU  X'0A'                .. END OF DATASET\n$RECTDMY EQU  X'C4'                .. DUMMY RECORD\n$RECTDIR EQU  X'C8'                .. DIRECTORY ENTRY\n$RECTNTE EQU  X'D0'                .. NOTE LIST RECORD\n$RECTDTA EQU  X'E0'                .. DATA RECORD\nRECTTR   DS   XL3                  TTR\nRECDATA  DS   0C\n         IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               EQUATES                                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  TMAPMOVE\n./ ADD NAME=TMAPPARM 0100-99298-99298-1542-00378-00383-00000-SBGOLOB\n          TITLE 'TMAPPARM - PARAMETER CONVERTER'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TMAPPARM - parameter converter                        *\n*                                                                     *\n*  Function:                                                          *\n*   The mainline module is complicated enough without having the      *\n*   parameter conversion code.  Moving it here also keeps the main-   *\n*   line from being too large for 1 base register.                    *\n*                                                                     *\n*   All parameters are passed via the PARM operand on the EXEC        *\n*   statement.                                                        *\n*                                                                     *\n*   Valid parameters are:                                             *\n*                                                                     *\n*       KEYWORD           MEANING                                     *\n*       1600              Requests a 3420 1600 BPI capable drive.     *\n*                                                                     *\n*       TAPE              Requests a 3420 6250 BPI capable drive.     *\n*                                                                     *\n*       6250              Requests a 3420 6250 BPI capable drive.     *\n*                                                                     *\n*       3420              Requests a 3420 6250 BPI capable drive.     *\n*                                                                     *\n*       CART              Requests a 3480 drive.                      *\n*                                                                     *\n*       3480              Requests a 3480 drive.                      *\n*                                                                     *\n*       MAXLINES=         Specifies a maximum line count for the      *\n*                         SYSPRINT output.  MAXLINES must be 2 digits *\n*                         or less.  Minimum line count allowed is 5.  *\n*                         Default line count is 60.                   *\n*                                                                     *\n*       NO MEM            Suppresses printing of member names when    *\n*         or              the data set is an unloaded PDS, SMP/E      *\n*       NO-MEM            MCS records, or IEBUPDTE control records.   *\n*                                                                     *\n*       FULLTAPE          Input tape will be scanned until the        *\n*                         reflective marker is reached or the tape    *\n*                         runs off the end of the reel.               *\n*                                                                     *\n*       VOL=VOLSER        VOLSER OF TAPE.  THE *ONLY* THING THIS      *\n*                         IS USED FOR IS THE WTO WHICH TELLS THE      *\n*                         OPERATOR WHICH TAPE TO MOUNT.   SOME PEOPLE *\n*                         HAVE COMPLAINED THAT THE WTO WAS TOO        *\n*                         GENERIC/NON-DESCRIPT.  THIS PARAMETER IS    *\n*                         IS OPTIONAL.  IF OMITTED, THE VOLSER IN THE *\n*                         WTO WILL BE LITERALLY \"XXXXXX\".             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTMAPPARM CSECT\n         USING TMAPPARM,R12\n         USING TMAPCOMM,R11          DEFINE TMAPCOMM BASE\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               SET BASE REG\n         B     PARM0000              SKIP EYECATCHER\n         DC    CL8'TMAPPARM'\nASMDATE  DC    C'&SYSDATE'\nASMTIME  DC    C'&SYSTIME'\nPARM0000 DS    0H\n         LR    R10,R1                COPY PARM BLOCK ADDRESS\n         LA    R1,PARMSAVE           OUR SAVE AREA ADDRESS\n         ST    R13,4(R1)             CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         TMAPTR ID=ENTRY             TRACE PRINT MODULE ENTRY\n         L     R3,COMMPARM           PARAMETER'S ADDRESS\n         SR    R4,R4                 CLEAR REGISTER\n         ICM   R4,3,0(R3)            PARAMETER'S LENGTH\n         BZ    PARM0200              NO PARAMETERS\n         CH    R4,MAXPLEN            PARM TOO LONG?\n         BNH   PARM0010              NO\n         LH    R4,MAXPLEN            LIMIT PARM LENGTH\n         MVC   PRTDATA(MSG01L),MSG01 SET MESSAGE\n         BAL   R9,PRT0000            PRINT MESSAGE\nPARM0010 DS    0H\n         TM    PARMFLAG,$HEADING     HEADING ALREADY ISSUED?\n         BO    PARM0020              YES\n         OI    PARMFLAG,$HEADING     SET HEADING FLAG\n         MVC   PRTDATA(HEADINGL),HEADING\n         MVC   COMMSUBH(HEADINGL),HEADING\n         BAL   R9,PRT0000            PRINT CONTROL STATEMENT HEADING\n         LR    R1,R4                 COPY LENGTH\n         BCTR  R1,0                  ADJUST FOR EXECUTE\n         EX    R1,PARMMVC            MOVE PARM FOR PRINTING\n         BAL   R9,PRT0000            PRINT PARAMETERS\n         LA    R3,2(R3)              SKIP LENGTH\n*---------------------------------------------------------------------*\n*                                                                     *\n*   R3 IS ADDRESS OF PARAMETER STRING                                 *\n*   R4 IS LENGTH OF STRING                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\nPARM0020 DS    0H\n         CLC   NOMEM1,0(R3)          NO-MEMBERS CONTROL STATEMENT?\n         BE    PARM0030              YES\n         CLC   NOMEM2,0(R3)          NO-MEMBERS CONTROL STATEMENT?\n         BE    PARM0030              YES\n         CLC   MAXLINES,0(R3)        MAXLINES CONTROL STATEMENT?\n         BE    PARM0040              YES\n         CLC   FULLTAPE,0(R3)        FULLTAPE CONTROL STATEMENT?\n         BE    PARM0080              YES\n         CLC   TAPE1600,0(R3)        1600 (1600 BPI 3420)?\n         BE    PARM0090              YES\n         CLC   TAPE6250,0(R3)        1600 (6250 BPI 3420)?\n         BE    PARM0100              YES\n         CLC   TAPETAPE,0(R3)        TAPE (6250 BPI 3420)?\n         BE    PARM0100              YES\n         CLC   TAPE3420,0(R3)        3420 (6250 BPI 3420)?\n         BE    PARM0100              YES\n         CLC   TAPECART,0(R3)        CARTRIDGE (3480)?\n         BE    PARM0110              YES\n         CLC   TAPE3480,0(R3)        3480?\n         BE    PARM0110              YES\n         CLC   COMPTIME,0(R3)        COMPILE DATE AND TIME?\n         BE    PARM0120              YES\n         CLC   ABEND,0(R3)           ABEND AT EXIT?\n         BE    PARM0130              YES\n         CLC   VOL,0(R3)             VOLSER?\n         BE    PARM0140              YES\n         B     ERR0010               INVALID CONTROL STATEMENT\nPARM0030 DS    0H\n         TMAPTR ID=NOMEMBER\n         TM    COMMFLAG,$COMMNOM     FLAG ALREADY SET?\n         BO    ERR0020               YES\n         OI    COMMFLAG,$COMMNOM     SET NO-MEMBER FLAG\n         MVC   PRTDATA(MSG02L),MSG02 MOVE MESSAGE\n         BAL   R9,PRT0000            PRINT MESSAGE\n         LA    R2,6                  SET LENGTH\n         B     PARM0150\nPARM0040 DS    0H\n         TMAPTR ID=MAXLINES\n         CLI   09(R3),C'0'           VALID DIGIT?\n         BL    ERR0040               NO\n         CLI   09(R3),C'9'           VALID DIGIT?\n         BH    ERR0040               NO\n         CH    R4,H10                1 DIGIT VALUE?\n         BE    PARM0060              YES\n         CLI   10(R3),C' '           1 DIGIT VALUE?\n         BE    PARM0060              YES\n         CLI   10(R3),C','           1 DIGIT VALUE?\n         BE    PARM0060              YES\n         CLI   10(R3),C'0'           VALID DIGIT?\n         BL    ERR0040               NO\n         CLI   10(R3),C'9'           VALID DIGIT?\n         BH    ERR0040               NO\n         CLI   11(R3),C' '           2 DIGIT VALUE?\n         BE    PARM0050              YES\n         CLI   11(R3),C','           2 DIGIT VALUE?\n         BNE   ERR0030               NO.. INVALID\nPARM0050 DS    0H\n         CLC   =C'05',09(R3)         TOO LOW A VALUE?\n         BL    ERR0060               YES, REJECT IT\n         PACK  COMMMAXL,09(2,R3)     PACK LINE COUNT LIMIT\n         LA    R2,11                 TOTAL LENGTH\n         B     PARM0070\nPARM0060 DS    0H\n         CLI   09(R3),C'5'           TOO LOW A VALUE?\n         BE    ERR0060               YES, REJECT IT\n         PACK  COMMMAXL,09(1,R3)     PACK LINE COUNT LIMIT\n         LA    R2,10                 TOTAL LENGTH\nPARM0070 DS    0H\n         MVC   PRTDATA(MSG03L),MSG03 MOVE MESSAGE\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0150\nPARM0080 DS    0H\n         TMAPTR ID=FULLTAPE\n         OI    COMMFLAG,$COMMFUL     SET FULL TAPE FLAG\n         MVC   PRTDATA(MSG04L),MSG04 MOVE MESSAGE\n         BAL   R9,PRT0000            PRINT MESSAGE\n         LA    R2,8                  TOTAL LENGTH\n         B     PARM0150\nPARM0090 DS    0H\n         TMAPTR ID=TAPE1600\n         CLI   COMMDEVT,C' '         DEVICE TYPE ALREADY GIVEN?\n         BNE   ERR0050               YES\n         MVI   COMMDEVT,$T3420A      SET DEVICE TYPE\n         MVC   PRTDATA(MSG05L),MSG05 SET MESSAGE\n         BAL   R9,PRT0000            PRINT MESSAGE\n         LA    R2,4                  TOTAL LENGTH\n         B     PARM0150\nPARM0100 DS    0H\n         TMAPTR ID=TAPE6250\n         CLI   COMMDEVT,C' '         DEVICE TYPE ALREADY GIVEN?\n         BNE   ERR0050               YES\n         MVI   COMMDEVT,$T3420B      SET DEVICE TYPE\n         MVC   PRTDATA(MSG06L),MSG06 SET MESSAGE\n         BAL   R9,PRT0000            PRINT MESSAGE\n         LA    R2,4                  TOTAL LENGTH\n         B     PARM0150\nPARM0110 DS    0H\n         TMAPTR ID=TAPE3480\n         CLI   COMMDEVT,C' '         DEVICE TYPE ALREADY GIVEN?\n         BNE   ERR0050               YES\n         MVI   COMMDEVT,$T3480       SET DEVICE TYPE\n         MVC   PRTDATA(MSG07L),MSG07 SET MESSAGE\n         BAL   R9,PRT0000            PRINT MESSAGE\n         LA    R2,4                  TOTAL LENGTH\n         B     PARM0150\nPARM0120 DS    0H\n         TMAPTR ID=COMPTIME\n         MVC   MSG08DTE,ASMDATE\n         MVC   MSG08TME,ASMTIME\n         MVC   PRTDATA(MSG08L),MSG08 SET MESSAGE\n         BAL   R9,PRT0000            PRINT MESSAGE\n         LA    R2,8                  TOTAL LENGTH\n         B     PARM0150\nPARM0130 DS    0H\n         TMAPTR ID=ABEND\n         TM    COMMFLAG,$ABEND       ABEND FLAG ALREADY ON?\n         BO    ERR0070               YES\n         OI    COMMFLAG,$ABEND       SET ABEND FLAG\n         MVC   PRTDATA(MSG09L),MSG09 SET MESSAGE\n         BAL   R9,PRT0000            PRINT MESSAGE\n         LA    R2,5                  TOTAL LENGTH\n         B     PARM0150\nPARM0140 DS    0H\n         TMAPTR ID=VOLSER\n         MVC   COMMVOL,4(R3)         COPY VOLSER\n         LA    R2,10                 TOTAL LENGTH\nPARM0150 DS    0H\n         AR    R3,R2                 PLUS LENGTH\n         SR    R4,R2                 MINUS LENGTH\n         BNH   PARM0200              END OF PARMS\n         CLI   0(R3),C' '            END OF PARMS?\n         BE    PARM0200              YES\n         CLI   0(R3),C','            DELIMITER?\n         BNE   ERR0010               NO\n         LA    R3,1(R3)              SKIP DELIMITER\n         BCT   R4,PARM0020           PROCESS REMAINING PARMS\nPARM0200 DS    0H\n         CLI   COMMDEVT,C' '         DEVICE TYPE GIVEN?\n         BNE   PARM9900              NO\n         MVC   PRTDATA(EMSG99L),EMSG99\n         BAL   R9,PRT0000            PRINT MESSAGE\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         B     PARM9900              AND EXIT\nPRT0000  DS    0H\n         MVI   PRTCMD,$PRTPRT        SET COMMAND\n         LA    R1,PRTBLOK            PRINT MODULE INTERFACE BLOCK\n         L     R15,APRT              PRINT MODULE ADDRESS\n         BALR  R14,R15               LINK TO PRINT\n         BR    R9                    RETURN\nERR0010  DS    0H\n         MVC   PRTDATA(EMSG01L),EMSG01\n         B     ERR1000               PRINT MESSAGE\nERR0020  DS    0H\n         MVC   PRTDATA(EMSG02L),EMSG02\n         B     ERR1000               PRINT MESSAGE\nERR0030  DS    0H\n         MVC   PRTDATA(EMSG03L),EMSG03\n         B     ERR1000               PRINT MESSAGE\nERR0040  DS    0H\n         MVC   PRTDATA(EMSG04L),EMSG04\n         B     ERR1000               PRINT MESSAGE\nERR0050  DS    0H\n         MVC   PRTDATA(EMSG05L),EMSG05\n         B     ERR1000               PRINT MESSAGE\nERR0060  DS    0H\n         MVC   PRTDATA(EMSG06L),EMSG06\n         B     ERR1000               PRINT MESSAGE\nERR0070  DS    0H\n         MVC   PRTDATA(EMSG07L),EMSG07\nERR1000  DS    0H\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         BAL   R9,PRT0000            PRINT MESSAGE\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\nPARM9900 DS    0H\n         TMAPTR ID=EXIT              EXITING PRINT MODULE\n         L     R13,4(R13)            RESTORE REGISTER 13\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS\n         SR    R15,R15               GIVE GOOD RETURN CODE\n         BR    R14                   RETURN TO CALLER\nPARMMVC  MVC   PRTDATA(0),2(R3)      MOVE EXECUTE STATEMENT PARMS\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              WORK AREAS                                            *\n*                                                                    *\n* ------------------------------------------------------------------ *\nPARMSAVE DC    18F'0'                REGISTER SAVE AREA\nH10      DC    H'10'                 CONSTANT\nMAXPLEN  DC    Y(L'PRTDATA)          MAXIMIM PARM LENGTH\nPARMFLAG DC    X'00'                 FLAGS/SWITCHES\n$HEADING EQU   X'80'                 .. HEADING HAS BEEN PRINTED\nNOMEM1   DC    C'NO MEM'             NO MEMBER STATEMENT KEYWORD\nNOMEM2   DC    C'NO-MEM'             NO MEMBER STATEMENT KEYWORD\nMAXLINES DC    C'MAXLINES='          PAGE LINE COUNT STATEMENT KEYWORD\nFULLTAPE DC    C'FULLTAPE'           MAP FULL TAPE\nTAPE1600 DC    C'1600'               1600 BPI 3420\nTAPE6250 DC    C'6250'               6250 BPI 3420\nTAPE3420 DC    C'3420'               6250 BPI 3420\nTAPETAPE DC    C'TAPE'               6250 BPI 3420\nTAPE3480 DC    C'3480'               3480\nTAPECART DC    C'CART'               3480\nCOMPTIME DC    C'COMPTIME'           DATE AND TIME ASSEMBLED\nABEND    DC    C'ABEND'              ABEND AT EXIT\nVOL      DC    C'VOL='               VOLSER PARAMETER KEYWORD\nCTLSTMT  DC    CL80' '\nCTLSTMTL EQU   *-CTLSTMT\nHEADING  DS    0C\n         DC    C'*'\n         DC    29C'-'\n         DC    CL20' CONTROL PARAMETERS '\n         DC    29C'-'\n         DC    C'*'\nHEADINGL EQU   *-HEADING\nMSG01    DC    C'>> PARAMETER LENGTH EXCEEDED 120, WILL BE TRUNCATED'\nMSG01L   EQU   *-MSG01\nMSG02    DC    C'''NO MEMBERS'' IS IN EFFECT'\nMSG02L   EQU   *-MSG02\nMSG03    DC    C'MAXLINES SET SUCCESSFULLY'\nMSG03L   EQU   *-MSG03\nMSG04    DC    C'FULL TAPE IN EFFECT'\nMSG04L   EQU   *-MSG04\nMSG05    DC    C'DEVICE REQUESTED IS A 3420 AT 1600BPI'\nMSG05L   EQU   *-MSG05\nMSG06    DC    C'DEVICE REQUESTED IS A 3420 AT 6250BPI'\nMSG06L   EQU   *-MSG06\nMSG07    DC    C'DEVICE REQUESTED IS A 3480'\nMSG07L   EQU   *-MSG07\nMSG08    DC    C'TMAPPARM COMPILE DATE:'\nMSG08DTE DC    CL8' '\n         DC    C' TIME:'\nMSG08TME DC    CL5' '\nMSG08L   EQU   *-MSG08\nMSG09    DC    C'ABEND FLAG SET'\nMSG09L   EQU   *-MSG09\nEMSG01   DC    C'** INVALID CONTROL STATEMENT'\nEMSG01L  EQU   *-EMSG01\nEMSG02   DC    C'** ''NO MEMBERS'' HAS ALREADY BEEN REQUESTED'\nEMSG02L  EQU   *-EMSG02\nEMSG03   DC    C'** MAXLINES MUST BE 2 DIGITS OR LESS'\nEMSG03L  EQU   *-EMSG03\nEMSG04   DC    C'** NON-NUMERIC DIGIT'\nEMSG04L  EQU   *-EMSG04\nEMSG05   DC    C'** DEVICE TYPE IS DUPLICATELY SPECIFIED'\nEMSG05L  EQU   *-EMSG05\nEMSG06   DC    C'** MAXLINES MUST SPECIFY A VALUE OF 5 OR GREATER'\nEMSG06L  EQU   *-EMSG06\nEMSG07   DC    C'** ABEND FLAG ALREADY REQUESTED'\nEMSG07L  EQU   *-EMSG07\nEMSG99   DC    C'** DEVICE TYPE WAS NOT SPECIFIED'\nEMSG99L  EQU   *-EMSG99\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              PRINT MODULE INTERFACE BLOCK                          *\n*                                                                    *\n* ------------------------------------------------------------------ *\nPRTBLOK  PRTBLOK  TYPE=CSECT\n         SPACE 2\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              COMMON MODULE                                         *\n*                                                                    *\n* ------------------------------------------------------------------ *\nTMAPCOMM TMAPCOMM TYPE=DSECT\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              TAPE I/O MODULE INTERFACE BLOCK                       *\n*                                                                    *\n* ------------------------------------------------------------------ *\nTAPEBLOK TAPEBLOK TYPE=DSECT\n         SPACE 2\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              EQUATES                                               *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         IEFZB4D0\n         IEFZB4D2\n         END  TMAPPARM\n./ ADD NAME=TMAPPRT\n          TITLE 'TMAPPRT - PRINTING MODULE'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TMAPPRT - Printing module                             *\n*                                                                     *\n*  Function:                                                          *\n*   TAPEMAP has only 1 print output DD.  This module \"owns\" the print *\n*   DCB and centralizes all printing.  By having a separate print     *\n*   module, all other modules may use the same interface and the line *\n*   counting/heading/spacing is not duplicated.  Any module except    *\n*   the trace code in TMAPCOMM may call this module.                  *\n*                                                                     *\n*   The interface block is PRTBLOK.                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTMAPPRT  CSECT\n         USING TMAPPRT,R12\n         USING TMAPCOMM,R11\n         USING PRTBLOK,R10           DEFINE PARAMETER BLOCK BASE\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               SET BASE REG\n         B     PRT0000               SKIP EYECATCHER\n         DC    CL8'TMAPPRT'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nPRT0000  DS    0H\n         LA    R15,PRTSAVE           OUR SAVE AREA ADDRESS\n         ST    R13,4(R15)            CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R15,8(R13)            CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R15               SET SAVE AREA ADDRESS\n         LR    R10,R1                COPY PARM BLOCK ADDRESS\n         TMAPTR ID=ENTRY,            TRACE PRINT MODULE ENTRY          +\n               DATA1=PRTCMD          .. TRACE COMMAND\n         CLI   PRTCMD,$PRTCLS        CLOSE FILES?\n         BE    PRT0300               YES\n         TM    PRTFLAG,$PRTOPEN      IS PRINT FILE OPEN?\n         BO    PRT0010               YES\n         TMAPTR ID=PRTOPEN           TRACE PRINT DCB OPENING\n         OPEN  (SYSPRINT,OUTPUT)     OPEN SYSPRINT\n         OI    PRTFLAG,$PRTOPEN      SET 'OPEN' FLAG\nPRT0010  DS    0H\n         CLI   PRTCMD,$PRTHEAD       PRINT HEADING?\n         BE    PRT0150               YES\n         CLI   PRTCMD,$PRTPRT        PRINT DATA?\n         BE    PRT0070               YES\n         CLI   PRTCMD,$PRTMEM        NEW MEMBER?\n         BE    PRT0020               YES\n         ABEND ABEND004,DUMP,,USER   ABEND\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             PROCESS MEMBERS                                         *\n*                                                                     *\n*   Various TAPEMAP file processors will \"watch\" for PDS's and will   *\n*   print the members.  Members will be added to the current line     *\n*   until the line is full.  When the ending tapemark is read,        *\n*   TMAPMAIN sets the $COMMLST flag in COMMFLAG and calls the current *\n*   file processor to allow it to do any end-of-file finish-up, at    *\n*   this time those file processors that print members will call this *\n*   module to allow the last line (which may not be full) to be       *\n*   printed.  Member spacing and number of members per line is        *\n*   determined by the file processor.  Field COMMMEM# is set to the   *\n*   number of members per line and field COMMMEML is set to the       *\n*   length of each member's output length.                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0020  DS    0H\n         TMAPTR ID=MEMBER,           ADD A MEMBER TO CURRENT LINE      +\n               DATA1=PRTDATA         .. SAVE MEMBER NAME IN TRACE\n         OC    MEMNBR,MEMNBR         MEMBERS AVAILABLE = ZERO?\n         BNZ   PRT0030               NO\n         MVC   MEMNBR+2(2),COMMMEM#  INITIALIZE NUMBER AVAILABLE\nPRT0030  DS    0H\n         LM    R2,R3,MEMINFO         LOAD MEMBER SPACING INFO\n         TM    COMMFLAG,$COMMLST     PRINT LAST LINE?\n         BO    PRT0050               YES\n         LH    R1,COMMMEML           MEMBER OUTPUT LENGTH\n         BCTR  R1,0                  MINUS 1 FOR EXECUTE\n         EX    R1,MEMMVC             MOVE DATA TO \"MEMBER\" LINE\n         LA    R2,1(R1,R2)           PLUS OUTPUT LENGTH\n         BCT   R3,PRT0040            ACCOUNT FOR USED MEMBER\n         TMAPTR ID=MEMFULL           MEMBER LINE IS FULL\n         B     PRT0060               FORCE PRINT\nMEMMVC   MVC   0(0,R2),PRTDATA       MOVE MEMBER NAME TO PRINT AREA\nPRT0040  DS    0H\n         STM   R2,R3,MEMINFO         SAVE CURRENT ADDR AND # AVAILABLE\n         B     PRT9900               EXIT\nPRT0050  DS    0H\n         TMAPTR ID=LASTLINE\n         XC    MEMNBR,MEMNBR         RESET NUMBER AVAILABLE\n         CLC   MEMLINE,MEMLINE-1     ANYTHING IN PRINT LINE?\n         BE    PRT9900               NO\nPRT0060  DS    0H\n         MVC   PRTDATA(MEMLINEL),MEMLINE\n         MVC   MEMLINE,MEMLINE-1     CLEAR MEMBER LINE\n         LA    R2,MEMLINE            FIRST MEMBER ADDRESS\n         ST    R2,MEMADDR            RESET MEMBER ADDRESS\n         TM    COMMFLAG,$COMMLST     'CLEAN-UP' IN PROGRESS?\n         BO    PRT0070               YES\n         MVC   MEMNBR+2(2),COMMMEM#  RESET NUMBER AVAILABLE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*   Either the command was $CMDPRT or the current line for $CMDMEM    *\n*   is full.                                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0070  DS    0H\n         ZAP   LINEWORK,P1           SET WORK TO 1\n         CLI   PRTCC,C' '            SINGLE SPACE?\n         BE    PRT0080               YES\n         AP    LINEWORK,P1           ADD 1 TO WORK\n         CLI   PRTCC,C'0'            DOUBLE SPACE\n         BE    PRT0080               YES\n         AP    LINEWORK,P1           ADD 1 TO WORK\nPRT0080  DS    0H\n         AP    LINEWORK,LINECT       NEW LINE COUNT\n         CP    LINEWORK,COMMMAXL     WILL PAGE OVERFLOW?\n         BNH   PRT0090               NO\n         TMAPTR ID=PAGEFULL          PAGE IS FULL\n         BAL   R9,PRT0200            PRINT HEADING\nPRT0090  DS    0H\n         TMAPTR ID=PRINT             PRINTING DATA\n         PUT   SYSPRINT,PRTCC        PRINT\n         AP    LINECT,P1             ADD 1 TO LINE COUNT\n         CLI   PRTCC,C' '            SINGLE SPACE?\n         BE    PRT0100               YES\n         AP    LINECT,P1             ADD 1 TO LINE COUNT\n         CLI   PRTCC,C'0'            DOUBLE SPACE\n         BE    PRT0100               YES\n         AP    LINECT,P1             ADD 1 TO LINE COUNT\nPRT0100  DS    0H\n         MVI   PRTDATA,C' '          INTIALIZE PRINT\n         MVC   PRTDATA+1(L'PRTDATA-1),PRTDATA\n         B     PRT9900               EXIT\n* ------------------------------------------------------------------- *\n*             FORCED HEADINGS                                         *\n* ------------------------------------------------------------------- *\nPRT0150  DS    0H\n         TMAPTR ID=FORCEDHD          FORCED HEADING\n         BAL   R9,PRT0200            PRINT HEADING\n         B     PRT9900               AND EXIT\n* ------------------------------------------------------------------- *\n*             PRINT HEADING                                           *\n* ------------------------------------------------------------------- *\nPRT0200  DS    0H\n         TMAPTR ID=PRTHEAD           PRINTING HEADING\n         AP    PAGECT,P1             ADD 1 TO PAGE COUNT\n         MVC   HEADPAGE,PAGEEDWD     SET EDIT WORD\n         ED    HEADPAGE,PAGECT       EDIT PAGE NUMBER\n         PUT   SYSPRINT,HEADING      WRITE HEADING\n         ZAP   LINECT,P1             SET LINE COUNT TO 1\n         CLI   COMMSUBH,C' '         BLANK?\n         BNE   PRT0210               NO\n         CLC   COMMSUBH+1(L'COMMSUBH-1),COMMSUBH\n         BER   R9                    NO SUBHEADING\nPRT0210  DS    0H\n         MVC   SUBHWORK,COMMSUBH     COPY SUBHEADING\n         PUT   SYSPRINT,SUBHCC       PRINT SUBHEADING\n         AP    LINECT,P1             ADD 1 TO LINE COUNT\n         BR    R9\n* ------------------------------------------------------------------- *\n*             CLOSE PRINTER                                           *\n* ------------------------------------------------------------------- *\nPRT0300  DS    0H\n         TMAPTR ID=PRTCLOSE          CLOSING PRINT DCB\n         TM    PRTFLAG,$PRTOPEN      PRINTER OPEN?\n         BNO   PRT9900               NO.. EXIT\n         CLOSE SYSPRINT              CLOSE PRINTER\n         NI    PRTFLAG,255-$PRTOPEN  TURN OPEN FLAG OFF\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\nPRT9900  DS    0H\n         TMAPTR ID=EXIT              EXITING PRINT MODULE\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              WORK AREAS                                            *\n*                                                                    *\n* ------------------------------------------------------------------ *\nPRTSAVE  DC    18F'0'                REGISTER SAVE AREA\n         SPACE 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n*   When the command is $PRTMEM, an entry is added to the current     *\n*   MEMLINE.  When MEMLINE is full, the line is printed and the       *\n*   the control data is reset to start another MEMLINE.               *\n*                                                                     *\n*   The \"file processor\" modules set COMMMEML to the length of each   *\n*   \"member\" in the print line and COMMMEM# to the number to print    *\n*   per line.                                                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMEMINFO  DS    0A                    MEMBER SPACE INFO\nMEMADDR  DC    A(MEMLINE)            .. CURRENT ADDRESS\nMEMNBR   DC    A(0)                  .. NUMBER AVAILABLE\n* ------------------------------------------------------------------- *\n         SPACE 1\nPRTFLAG  DC    X'00'\n$PRTOPEN EQU   X'80'\nP1       DC    P'1'                  CONSTANT\nLINECT   DC    PL3'0'                LINE COUNT\nLINEWORK DC    PL3'0'                LINES ADDED BY THIS I/O\nPAGECT   DC    PL3'0'                PAGE COUNT\nPAGEEDWD DC    X'402020202120'       CONSTANT\nHEADING  DS    0C\n         DC    CL01'1'\n         DC    CL47' '\n         DC    CL15'TAPEMAP UTILITY'\n         DC    CL48' '\n         DC    CL04'PAGE'\nHEADPAGE DC    CL06' '\nSUBHCC   DC    C' '\nSUBHWORK DC    CL120' '\n         SPACE 1\n         DC    C' '\nMEMLINE  DC    CL120' '\nMEMLINEL EQU   *-MEMLINE\n         SPACE 1\nSYSPRINT DCB   DSORG=PS,             PRINTER DCB                       +\n               RECFM=FBA,            .. RECORD FORMAT                  +\n               LRECL=121,            .. RECORD LENGTH                  +\n               DDNAME=SYSPRINT,      .. DD NAME                        +\n               MACRF=PM              .. MACRO FORMAT\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              PRINT MODULE INTERFACE BLOCK                          *\n*                                                                    *\n* ------------------------------------------------------------------ *\nPRTBLOK  PRTBLOK  TYPE=DSECT\n         SPACE 2\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              COMMON DATA MAP                                       *\n*                                                                    *\n* ------------------------------------------------------------------ *\nTMAPCOMM TMAPCOMM TYPE=DSECT\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              EQUATES                                               *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         END  TMAPPRT\n./ ADD NAME=TMAPUPDT\n          TITLE 'TMAPUPDT - IEBUPDTE FILE PROCESSOR'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TMAPUPDT  - IEBUPDTE file processor                   *\n*                                                                     *\n*  Function:                                                          *\n*     This module prints the IEBUPDTE function (add, change, replace) *\n*     and the member name(s).                                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTMAPUPDT CSECT\n         USING TMAPUPDT,R12\n         USING TMAPCOMM,R11\n         STM   R14,R12,12(R13)     SAVE REGS\n         LR    R12,R15             SET BASE REG\n         B     UPDT0000            SKIP EYECATCHER\n         DC    CL8'TMAPUPDT'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nUPDT0000 DS    0H\n         LA    R15,UPDTSAVE        OUR SAVE AREA ADDRESS\n         ST    R13,4(R15)          CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R15,8(R13)          CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R15             SET SAVE AREA ADDRESS\n         L     R10,COMMRECA        CURRENT RECORD'S ADDRESS\n         TMAPTR ID=ENTRY,          TRACE ENTRY                         +\n               DATA1=COMMFLAG\n         TM    COMMFLAG,$COMMLST   'CLEAN-UP' CALL?\n         BO    UPDT0500            YES\n         TM    COMMFLAG,$COMMINQ   INQUIRE CALL?\n         BNO   UPDT0100            NO\n         TMAPTR ID=INQCALL\n         TM    COMMFLAG,$COMMSUB   SUB-FUNCTION?\n         BO    UPDT0010            YES\n* ------------------------------------------------------------------- *\n*     I AM ASSUMING 80-BYTE CONTROL STATEMENTS                        *\n* ------------------------------------------------------------------- *\n         SR    R2,R2               CLEAR REGISTER\n         SR    R3,R3               CLEAR REGISTER\n         ICM   R3,3,COMMRECL       CURRENT RECORD'S LENGTH\n         D     R2,F80              DIVIDE BY 80\n         LTR   R2,R2               REMAINDER = ZERO?\n         BNZ   EXIT0008            NO..\n         BAL   R9,UPDT0200         FIND UPDTE CONTROL STATEMENT\n         TM    UPDTFLAG,$CTLSTMT   CONTROL STATEMENT FOUND?\n         BNO   EXIT0008            NO... SET RETURN CODE TO 8\n         MVC   PRTDATA(HEADINGL),HEADING\n         BAL   R9,PRT0000          PRINT HEADING\nUPDT0010 DS    0H\n         TM    COMMFLAG,$COMMNOM   NO-MEMBERS?\n         BO    EXIT0000            SKIP SUB-HEADING\n         MVC   COMMSUBH(SUBHEADL),SUBHEAD\n         MVC   PRTDATA(SUBHEADL),SUBHEAD\n         BAL   R9,PRT0000          PRINT SUBHEADING\n         MVC   COMMMEML,MEML       SET OUTPUT LENGTH PER MEMBER\n         MVC   COMMMEM#,MEM#       SET NUMBER PER LINE\n         B     EXIT0000            EXIT WITH RETURN CODE ZERO\n*---------------------------------------------------------------------*\n*                                                                     *\n*     PROCESS CONTROL STATEMENTS                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\nUPDT0100 DS    0H\n         TMAPTR ID=NEWBLOCK\n         TM    UPDTFLAG,$ERROR     ERROR OCCURRED?\n         BO    EXIT0000            YES, EXIT\n         TM    COMMFLAG,$COMMNOM   NO-MEMBERS?\n         BO    EXIT0000            SKIP\n         TM    COMMFLAG,$COMMSUB   SUB-FUNCTION CALL?\n         BO    UPDT0110            YES\n         SR    R2,R2               CLEAR REGISTER\n         SR    R3,R3               CLEAR REGISTER\n         ICM   R3,3,COMMRECL       CURRENT RECORD'S LENGTH\n         D     R2,F80              DIVIDE BY 80\n         LTR   R2,R2               REMAINDER = ZERO?\n         BNZ   UPDT0400            NO... ERROR\n         B     UPDT0120            PROCESS ALL RECORDS\n*---------------------------------------------------------------------*\n*                                                                     *\n*     PROCESS RECORDS AS A SUB-FUNCTION                               *\n*                                                                     *\n*  Some files have iebupdte control statements imbedded in them       *\n*  (like cbt compressed data sets).  This module is called as a       *\n*  sub-part of the actual file processor.  In sub-function mode,      *\n*  this module will receive only 1 record at a time.                  *\n*                                                                     *\n*---------------------------------------------------------------------*\nUPDT0110 DS    0H\n         LA    R3,1                SET NUMBER OF RECORDS TO 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n*      PROCESS EACH RECORD OF THE BLOCK                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nUPDT0120 DS    0H\n         BAL   R9,UPDT0200         FIND UPDTE CONTROL STATEMENTS\n         B     UPDT0140            CHECK RESULTS\nUPDT0130 DS    0H\n         BAL   R9,UPDT0210         RESUME AT NEXT CONTROL STATEMENT\nUPDT0140 DS    0H\n         TM    UPDTFLAG,$CTLSTMT   CONTROL STATEMENT FOUND?\n         BNO   EXIT0000            NO.. EXIT\n         MVC   PRTDATA(UPDTMSGL),UPDTMSG\n         MVI   PRTCMD,$PRTMEM      SET COMMAND (ADD A MEMBER)\n         LA    R1,PRTBLOK          PRINT MODULE INTERFACE\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         MVC   UPDTMSG(UPDTMSGL),UPDTMSG-1   RESET TO BLANKS\n         LTR   R3,R3               ANY MORE STATEMENTS TO SCAN?\n         BNZ   UPDT0130            YES, CONTINUE\n         B     EXIT0000            OTHERWISE EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              FIND IEBUPDTE CONTROL STATMENTS                        *\n*                                                                     *\n*           R2  WORK REGISTER                                         *\n*           R3  NUMBER OF 80-BYTE RECORDS TO SCAN                     *\n*           R4  WORK REGISTER                                         *\n*           R9  RETURN ADDRESS                                        *\n*           R10 FIRST STATEMENT TO SCAN                               *\n*           R15 WORK REGISTER                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\nUPDT0200 DS    0H\n         NI    UPDTFLAG,255-$CTLSTMT\n         CLC   =C'./ ',0(R10)      IEBUPDTE CONTROL ID?\n         BE    UPDT0220            YES\n         CLC   =C'>< ',0(R10)      NESTED CONTROL ID?\n         BE    UPDT0220            YES\nUPDT0210 DS    0H\n         LA    R10,80(R10)         NEXT STATEMENT\n         BCT   R3,UPDT0200         LOOP\n         BR    R9                  ALL STATEMENTS PROCESSED\nUPDT0220 DS    0H\n         LA    R2,69               COLUMNS LEFT ON THIS STATEMENT\n         LA    R4,3(R10)           SKIP CONTROL ID\n         BAL   R15,UPDT0340        FIND FIRST NON-BLANK\n         LTR   R4,R4               NON-BLANK FOUND?\n         BZ    UPDT0210            NO\n         CLC   ADD,0(R4)           ADD STATEMENT?\n         BE    UPDT0230            YES\n         CLC   CHANGE,0(R4)        CHANGE STATEMENT?\n         BE    UPDT0240            YES\n         CLC   DELETE,0(R4)        DELETE STATEMENT?\n         BE    UPDT0250            YES\n         CLC   REPL,0(R4)          REPLACE STATEMENT?\n         BE    UPDT0260            YES\n         CLC   REPRO,0(R4)         REPRO STATMENT?\n         BE    UPDT0270            YES\n         B     UPDT0210            NEXT STATEMENT\nUPDT0230 DS    0H\n         MVC   UPDTCMD(L'ADD),ADD  SET FUNCTION\n         LA    R4,4(R4)            SKIP 'ADD '\n         SH    R2,H4               MINUS LENGTH OF 'ADD '\n         B     UPDT0280            CONTINUE\nUPDT0240 DS    0H\n         MVC   UPDTCMD(L'CHANGE),CHANGE\n         LA    R4,7(R4)            SKIP 'CHANGE '\n         SH    R2,H7               MINUS LENGTH OF 'CHANGE '\n         B     UPDT0280            CONTINUE\nUPDT0250 DS    0H\n         MVC   UPDTCMD(L'DELETE),DELETE\n         LA    R4,7(R4)            SKIP 'DELETE '\n         SH    R2,H7               MINUS LENGTH OF 'DELETE '\n         B     UPDT0280            CONTINUE\nUPDT0260 DS    0H\n         MVC   UPDTCMD(L'REPL),REPL\n         LA    R4,5(R4)            SKIP 'REPL '\n         SH    R2,H5               MINUS LENGTH OF 'REPL '\n         B     UPDT0280            CONTINUE\nUPDT0270 DS    0H\n         MVC   UPDTCMD(L'REPRO),REPRO\n         LA    R4,6(R4)            SKIP 'REPRO '\n         SH    R2,H6               MINUS LENGTH OF 'REPRO '\nUPDT0280 DS    0H\n         CH    R2,H6               ENOUGH DATA FOR NAME=X ?\n         BNH   UPDT0210            NO\n         BAL   R15,UPDT0340        FIND NEXT NON-BLANK\n         LTR   R4,R4               NON-BLANK FOUND?\n         BZ    UPDT0210            NO\nUPDT0290 DS    0H\n         CLC   =C'NAME=',0(R4)     NAME= PARAMETER?\n         BE    UPDT0300            YES\n         LA    R4,1(R4)            NEXT OVER\n         BCT   R2,UPDT0290         LOOP\n         B     UPDT0210            NAME= NOT FOUND\nUPDT0300 DS    0H\n         LA    R4,5(R4)            SKIP 'NAME='\n         SH    R2,H5               MINUS LENGTH OF 'NAME='\n         BNH   UPDT0210            NAME NOT FOUND\n         CH    R2,H8               MORE THAN 8 LEFT?\n         BNH   UPDT0310            NO\n         LH    R2,H8               LIMIT LENGTH TO 8\nUPDT0310 DS    0H\n         LA    R1,UPDTNAME\nUPDT0320 DS    0H\n         CLI   0(R4),C' '          END OF NAME?\n         BE    UPDT0330            YES\n         CLI   0(R4),C','          END OF NAME?\n         BE    UPDT0330            YES\n         MVC   0(1,R1),0(R4)       MOVE TO NAME\n         LA    R1,1(R1)            NEXT\n         LA    R4,1(R4)            NEXT\n         BCT   R2,UPDT0320         LOOP\nUPDT0330 DS    0H\n         OI    UPDTFLAG,$CTLSTMT   SET CONTROL STATEMENT FOUND FLAG\n         BR    R9                  RETURN\nUPDT0340 DS    0H\n         CLI   0(R4),C' '          BLANK?\n         BHR   R15                 NO.. RETURN\n         LA    R4,1(R4)            NEXT BYTE\n         BCT   R2,UPDT0340         LOOP\n         SR    R4,R4               NOT FOUND\n         BR    R15                 RETURN\n*---------------------------------------------------------------------*\n*                                                                     *\n*              SERIOUS ERROR CONDITIONS                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nUPDT0400 DS    0H\n         TMAPTR ID=INVBLKSZ,       BLOCK SIZE IS NOT A MULTIPLE OF 80  +\n               DATA1=COMMRECL      .. INCLUDE BLOCK SIZE IN TRACE\n         OI    UPDTFLAG,$ERROR     SET ERROR FLAG\n         MVC   PRTDATA(MSG01L),MSG01\n         BAL   R9,PRT0000          PRINT MESSAGE\n         B     EXIT0000            AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              CLEAN-UP                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nUPDT0500 DS    0H\n         TMAPTR ID=CLEAN-UP\n         MVI   PRTCMD,$PRTMEM      MEMBER PRINT\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         B     EXIT0000            EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PRINTING                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         MVI   PRTCMD,$PRTPRT      REQUEST PRINT\n         MVI   PRTCC,C' '          SINGLE SPACE\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         BR    R9                  RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             EXIT                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS   0H\n         TMAPTR ID=EXIT0000          EXITING, RC=0\n         SR    R15,R15               SET RETURN CODE TO ZERO\n         B     UPDT9900              AND RETURN\nEXIT0008 DS    0H\n         TMAPTR ID=EXIT0008          EXITING, RC=8\n         LA    R15,8                 SET RETURN CODE TO 8\nUPDT9900 DS    0H\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         L     R14,12(R13)           RESTORE REGISTER 14\n         LM    R0,R12,20(R13)        RESTORE ALL OTHER REGISTERS        ASE01680\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nUPDTSAVE DC    18F'0'                REGISTER SAVE AREA\nF80      DC    F'80'                 CONSTANT\nH4       DC    H'4'                  CONSTANT\nH5       DC    H'5'                  CONSTANT\nH6       DC    H'6'                  CONSTANT\nH7       DC    H'7'                  CONSTANT\nH8       DC    H'8'                  CONSTANT\nMEML     DC    Y(UPDTMSGL)           OUTPUT LENGTH PER MEMBER\nMEM#     DC    Y(120/UPDTMSGL)       OUTPUT MEMBERS PER LINE\nUPDTFLAG DC    X'00'                 FLAGS\n$ERROR   EQU   X'80'                 .. SERIOUS ERROR HAS OCCURRED\n$CTLSTMT EQU   X'40'                 .. UPDTE STATEMENT FOUND\nBLANKS   DC    CL08' '               CONSTANT\nADD      DC    C'ADD '               CONSTANT\nCHANGE   DC    C'CHANGE '            CONSTANT\nDELETE   DC    C'DELETE '            CONSTANT\nREPL     DC    C'REPL '              CONSTANT\nREPRO    DC    C'REPRO '             CONSTANT\nHEADING  DC    C'THIS DATASET CONTAINS IEBUPDTE CONTROL STATEMENTS'\nHEADINGL EQU   *-HEADING\nSUBHEAD  DS    0C\n         DC    CL08'FUNCTION'\n         DC    CL01' '\n         DC    CL08'ELEMENT'\n         DC    CL03' '\n         DC    CL08'FUNCTION'\n         DC    CL01' '\n         DC    CL08'ELEMENT'\n         DC    CL03' '\n         DC    CL08'FUNCTION'\n         DC    CL01' '\n         DC    CL08'ELEMENT'\n         DC    CL03' '\n         DC    CL08'FUNCTION'\n         DC    CL01' '\n         DC    CL08'ELEMENT'\n         DC    CL03' '\n         DC    CL08'FUNCTION'\n         DC    CL01' '\n         DC    CL08'ELEMENT'\n         DC    CL03' '\n         DC    CL08'FUNCTION'\n         DC    CL01' '\n         DC    CL08'ELEMENT'\n         DC    CL03' '\nSUBHEADL EQU   *-SUBHEAD\n         DC    C' '\nUPDTMSG  DS    0C\nUPDTCMD  DC    CL08' '               UPDTE FUNCTION (ADD, CHANGE, REPL)\n         DC    CL01' '\nUPDTNAME DC    CL08' '               ELEMENT'S NAME\n         DC    CL03' '\nUPDTMSGL EQU   *-UPDTMSG\nMSG01    DC    C'*** BLOCK FOUND WITH LENGTH NOT A MULTIPLE OF 80, REMA+\n               INDER OF FILE WILL BE BYPASSED'\nMSG01L   EQU   *-MSG01\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK  TYPE=CSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              LITERALS                                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         LTORG\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON DATA MAP                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTMAPCOMM TMAPCOMM TYPE=DSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  TMAPUPDT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TPXJCL": {"ttr": 23811, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x95\\x10/\\x00\\x95\\x10/ \\x01\\x00\\xdd\\x00\\xde\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1995-04-12T00:00:00", "modifydate": "1995-04-12T20:01:00", "lines": 221, "newlines": 222, "modlines": 0, "user": "SBGCSC"}, "text": "./ ADD NAME=ASMEXIT  0100-95102-95102-1952-00117-00117-00000-TPXEXIT\n//ASMEXIT  JOB  .....................\n//ASMLINK  PROC NAME=,\n//             AP=,\n//             LIST='SYSOUT=*'\n//ASM      EXEC PGM=IEV90,COND=(4,LT),\n//             REGION=4096K,\n//             PARM='LINECOUNT(55),DECK,NOOBJECT,XREF(SHORT),&AP'\n//SYSPRINT DD   &LIST\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLIB   DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.MODGEN,DISP=SHR\n//         DD   DSN=.....tpx.exit.stc.maclib,DISP=SHR\n//         DD   DSN=.....TPX.GENLIB,DISP=SHR\n//SYSPUNCH DD   DSN=.....tpx.exit.stc.OBJECT(&NAME),DISP=(OLD,PASS)\n//SYSIN    DD   DSN=.....tpx.exit.stc.SOURCE(&NAME),DISP=SHR\n// PEND\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           ASSEMBLE ALL MODULES                                    *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//EXITATTN EXEC ASMLINK,NAME=EXITATTN,AP=RENT   ATTENTION EXIT\n//EXITGBL  EXEC ASMLINK,NAME=EXITGBL            COMMON DATA\n//EXITINIT EXEC ASMLINK,NAME=EXITINIT,AP=RENT   INITIALIZATION\n//EXITLERD EXEC ASMLINK,NAME=EXITLERD,AP=RENT   LERAD EXIT\n//EXITLOCK EXEC ASMLINK,NAME=EXITLOCK,AP=RENT   LOCKED TERMINAL\n//EXITMAIN EXEC ASMLINK,NAME=EXITMAIN,AP=RENT   MAINLINE\n//EXITPARM EXEC ASMLINK,NAME=EXITPARM,AP=RENT   PARAMETER READER\n//EXITPRE  EXEC ASMLINK,NAME=EXITPRE,AP=RENT    PRE-SECURITY CALL\n//EXITSEC  EXEC ASMLINK,NAME=EXITSEC,AP=RENT    SECURITY CALL\n//EXITTERM EXEC ASMLINK,NAME=EXITTERM,AP=RENT   TERMINATION\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK TPX SIGN ON/SIGN OFF EXIT                          *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKEXIT EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,REUS,AC=1,NCAL',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=.....tpx.exit.stc.OBJECT(&NAME),DISP=(OLD,PASS)\n//SYSLMOD  DD  DSN=...............,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(EXITMAIN)               MAINLINE\n  INCLUDE SYSLIB(EXITINIT)               INITIALIZATION\n  INCLUDE SYSLIB(EXITLOCK)               LOCKED TERMINAL\n  INCLUDE SYSLIB(EXITPRE)                PRE-SECURITY CALL\n  INCLUDE SYSLIB(EXITSEC)                SECURITY CALL\n  INCLUDE SYSLIB(EXITTERM)               TERMINATION\n  ENTRY EXITMAIN\n  NAME TPXUSNSF(R)\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK TPX SIGN ON/SIGN OFF GLOBAL DATA                   *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKGBL  EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,AC=1,NCAL',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=.....tpx.exit.stc.OBJECT(&NAME),DISP=(OLD,PASS)\n//SYSLMOD  DD  DSN=...............,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(EXITGBL)\n  ENTRY EXITGBL\n  NAME EXITGBL(R)\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK TPX SIGN ON/SIGN OFF ATTENTION EXIT                *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKATTN EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,REUS,AC=1,NCAL',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=.....tpx.exit.stc.OBJECT(&NAME),DISP=(OLD,PASS)\n//SYSLMOD  DD  DSN=...............,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(EXITATTN)\n  ENTRY EXITATTN\n  NAME EXITATTN(R)\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK TPX SIGN ON/SIGN OFF LERAD EXIT                    *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKLERD EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,REUS,AC=1,NCAL',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=.....tpx.exit.stc.OBJECT(&NAME),DISP=(OLD,PASS)\n//SYSLMOD  DD  DSN=...............,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(EXITLERD)\n  ENTRY EXITLERD\n  NAME EXITLERD(R)\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK TPX SIGN ON/SIGN OFF EXIT PARAMETER READER         *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKPARM EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,REUS,AC=1,NCAL',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=.....tpx.exit.stc.OBJECT(&NAME),DISP=(OLD,PASS)\n//SYSLMOD  DD  DSN=...............,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(EXITPARM)\n  ENTRY EXITPARM\n  NAME EXITPARM(R)\n//\n./ ADD NAME=ASMSTC   0100-95102-95102-1952-00088-00088-00000-TPXEXIT\n//ASMSTC   JOB ......................\n//ASMLINK  PROC NAME=,\n//             AP=,\n//             LIST='SYSOUT=*'\n//ASM      EXEC PGM=IEV90,COND=(4,LT),\n//             REGION=4096K,\n//             PARM='LINECOUNT(55),DECK,NOOBJECT,XREF(SHORT),&AP'\n//SYSPRINT DD   &LIST\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLIB   DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.MODGEN,DISP=SHR\n//         DD   DSN=.....tpx.exit.stc.MACLIB,DISP=SHR\n//         DD   DSN=..............TPX.GENLIB,DISP=SHR\n//SYSPUNCH DD   DSN=.....tpx.exit.stc.OBJECT(&NAME),DISP=(OLD,PASS)\n//SYSIN    DD   DSN=.....tpx.exit.stc.SOURCE(&NAME),DISP=SHR\n// PEND\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           ASSEMBLE ALL MODULES                                    *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//TPXATTN  EXEC ASMLINK,NAME=TPXATTN,AP=RENT    VTAM ATTN EXIT\n//TPXCOMM  EXEC ASMLINK,NAME=TPXCOMM            COMMON DATA\n//TPXCONV  EXEC ASMLINK,NAME=TPXCONV,AP=RENT    CONVBLOK ADD/DELETE\n//TPXLERAD EXEC ASMLINK,NAME=TPXLERAD,AP=RENT   LERAD EXIT\n//TPXLOSS  EXEC ASMLINK,NAME=TPXLOSS,AP=RENT    VTAM LOSS CLEAN-UP\n//TPXMAIN  EXEC ASMLINK,NAME=TPXMAIN,AP=RENT    MAINLINE\n//TPXPRTQ  EXEC ASMLINK,NAME=TPXPRTQ,AP=RENT    PRINT QUEUEING\n//TPXPRTS  EXEC ASMLINK,NAME=TPXPRTS,AP=RENT    PRINT SUBTASK\n//TPXVSUB  EXEC ASMLINK,NAME=TPXVSUB,AP=RENT    VTAM SUB-FUNCTIONS\n//TPXVTAM  EXEC ASMLINK,NAME=TPXVTAM,AP=RENT    VTAM COMMUNICATION\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK TPXCOMM                                            *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKCOMM EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=.....tpx.exit.stc.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=..............,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(TPXCOMM)                COMMON MODULE\n  ENTRY TPXCOMM\n  NAME TPXCOMM(R)\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK TPX MAIN MODULE                                    *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKSTC  EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,REUS,AC=1,NCAL',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=.....tpx.exit.stc.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=..............,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(TPXMAIN)                MAINLINE\n  INCLUDE SYSLIB(TPXATTN)                VTAM ATTN EXIT\n  INCLUDE SYSLIB(TPXCONV)                CONVBLOK ADD/DELETE\n  INCLUDE SYSLIB(TPXLERAD)               LERAD EXIT\n  INCLUDE SYSLIB(TPXLOSS)                CLEAN-UP AFTER A VTAM LOSS\n  INCLUDE SYSLIB(TPXPRTQ)                PRINT QUEUING MODULE\n  INCLUDE SYSLIB(TPXVSUB)                VTAM SUB-FUNCTIONS\n  INCLUDE SYSLIB(TPXVTAM)                VTAM FUNCTIONS\n  ENTRY TPXMAIN\n  NAME TPXSTC(R)\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK TPXPRTS                                            *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKPRTS EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,REUS,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=.....tpx.exit.stc.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=..............,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(TPXPRTS)                PRINT SUBTASK\n  ENTRY TPXPRTS\n  NAME TPXPRTS(R)\n/*\n//\n./ ADD NAME=TPXSTC   0100-95102-95102-1952-00013-00013-00000-TPXEXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*    Sample STC PROC.                                                 *\n*                                                                     *\n*    This can be run as a batch job instead of a STC.                 *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n//TPXSTC   PROC\n//TPXSTC   EXEC PGM=TPXSTC,PARM=vtamappl,REGION=4096K\n//STEPLIB  DD  DSN=................,DISP=SHR\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TPXMAC": {"ttr": 23816, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x95\\x10/\\x00\\x95\\x10/ \\x01\\x02\\xe9\\x02\\xea\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1995-04-12T00:00:00", "modifydate": "1995-04-12T20:01:00", "lines": 745, "newlines": 746, "modlines": 0, "user": "SBGCSC"}, "text": "./ ADD NAME=ABCODES  0100-95102-95102-1953-00030-00030-00000-TPXEXIT\n         MACRO\n         ABCODES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*           TPX STC ABEND CODES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n$U0001   EQU  1        SYSPRINT DD STATEMENT NOT PRESENT\n$U0002   EQU  2\n$U0003   EQU  3        ATTACH FOR PRINT SUBTASK FAILED\n$U0004   EQU  4        ABEND REQUESTED VIA CONTROL STATEMENTS\n$U0005   EQU  5        RECVFMH5 FAILED IN ATTENTION EXIT\n$U0006   EQU  6        ADD CONVBLOK FAILED IN ATTENTION EXIT\n$U0007   EQU  7        INVALID COMMAND PASSED TO TPXCONV\n$U0008   EQU  8        TPXCONV COULD NOT LOCATE REQUESTED CONVBLOK\n$U0009   EQU  9        INVALID COMMAND PASSED TO TPXVSUB\n$U0010   EQU  10       CONVERSATION IN AN UNKOWN STATE IN TPXVTAM\n$U0011   EQU  11       UNKNOWN RECORD TYPE RECEIVED BY TPXVTAM\n$U0012   EQU  12       DE-ALLOCATE FAILED IN TPXVTAM\n$U0013   EQU  13       RACROUTE ENVIR=VERIFY FAILED IN TPXVTAM\n$U0014   EQU  14       RACROUTE ENVIR=DELETE FAILED IN TPXVTAM\n$U0015   EQU  15       ACB OPEN ERROR\n* ------------------------------------------------------------------- *\n*                                                                     *\n*           TPX LOGON/LOGOFF EXIT ABEND CODES                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\n$U1000   EQU  1000     CNOS RECEIVED BY LOGON EXIT\n$U1001   EQU  1001     FMH5 RECEIVED BY LOGON EXIT\n         MEND\n./ ADD NAME=AUTHREC  0100-95102-95102-1953-00014-00014-00000-TPXEXIT\nAUTHREC  DS      0H\nAUTHLL   DS      H               LENGTH OF AUTH RECORD\nAUTHAUTH DS      CL4             RECORD IDENTIFIER\nAUTHUIDL DS      X               LENGTH OF USER ID\nAUTHUID  DS      CL8             USERID\nAUTHPSWL DS      X               LENGTH OF PASSWORD\nAUTHPSWD DS      CL8             PASSWORD\nAUTHNPSL DS      X               LENGTH OF NEW PASSWORD\nAUTHNPSW DS      CL8             NEW PASSWORD\nAUTHTERM DS      CL8             USER'S TERMINAL ID\nAUTHSTAT DS      X               STATUS RETURNED BY STC\nAUTHRTCD DS      XL4             RACF RETURN CODE\nAUTHRSCD DS      XL4             RACF REASON CODE\nAUTHRECL EQU     *-AUTHREC\n./ ADD NAME=AUTHSTAT 0100-95102-95102-1953-00023-00023-00000-TPXEXIT\n         MACRO\n         AUTHSTAT &RTCD=,&RSCD=,&EXITCD=,&MSG=\n         AIF   (T'&RSCD EQ 'O').LBL0010\n         DC    AL1($STATRS)       FLAGS\n         AGO   .LBL0020\n.LBL0010 ANOP\n         DC    AL1(0)             FLAGS\n.LBL0020 ANOP\n         DC    AL4(X'&RTCD')         RETURN CODE\n         AIF   (T'&RSCD EQ 'O').LBL0030\n         DC    AL4(X'&RSCD')         REASON CODE\n         AGO   .LBL0040\n.LBL0030 ANOP\n         DC    AL4(0)             REASON CODE DOES NOT APPLY\n.LBL0040 ANOP\n         DC    AL1(&EXITCD)       CODE EXIT SHOULD EXIT WITH\n         AIF   (T'&MSG EQ 'O').LBL0050\n         DC    CL80&MSG           MESSAGE\n         AGO   .LBL0060\n.LBL0050 ANOP\n         DC    CL80' '            NO MESSAGE\n.LBL0060 ANOP\n         MEND\n./ ADD NAME=CONVBLOK 0100-95102-95102-1953-00050-00050-00000-TPXEXIT\n         MACRO\n         CONVBLOK &DSECT=\n* ------------------------------------------------------------------- *\n*                                                                     *\n*      VTAM COMMUNICATION STATUS BLOCK                                *\n*                                                                     *\n*      CONVBLOK's are chained from SUTLCOMM.                          *\n*                                                                     *\n*      CONVBLOKs are created when the ATTN exit is driven with an     *\n*      FMH-5.  As soon as the FMH-5 is processed, the VTAM module,    *\n*      SUTLVTAM, will issue the first RECEIVE on the conversation.    *\n*      When the user ends the conversation, we will receive a         *\n*      DEALLOC indicator in the RPL6.  When the DEALLOC is received   *\n*      the CONVBLOK will be freed.                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF  (T'&DSECT EQ 'O').ERR0010\n         AIF  ('&DSECT' EQ 'NO').CSECT00\n         AIF  ('&DSECT' EQ 'YES').DSECT00\n         MNOTE 12,'INVALID ''DSECT'', MUST BE ''YES'' OR ''NO'' '\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'''DSECT'' PARAMETER IS REQUIRED'\n         MEXIT\n.CSECT00 ANOP\nCONVBLOK DS   0F\n         AGO  .COMMON\n.DSECT00 ANOP\nCONVBLOK DSECT\n.COMMON  ANOP\nCONVNEXT DS   A                    NEXT CONVERSATION BLOCK ADDRESS\nCONVPREV DS   A                    PREVIOUS CONVERSATION BLOCK ADDRESS\nCONVEYE  DS   CL8                  EYECATCHER\nCONVECB  DS   A                    ECB FOR THIS CONVERSATION\nCONVRPL  DS   A                    RPL'S ADDRESS\nCONVRPLX DS   A                    RPL EXTENSION'S ADDRESS\nCONVIOA  DS   A                    I/O AREA ADDRESS\nCONVSTAT DS   X                    CONVERSATION STATUS\n$CONVERR EQU  X'80'                .. ERROR HAS OCCURRED\n$CONVEOJ EQU  X'40'                .. EOJ REQUESTED\nCONVFUNC DS   C                    LAST FUNCTION ON THIS CONVERSATION\n$CONVFR  EQU  C'R'                 .. VTAM RECEIVE\n$CONVFS  EQU  C'S'                 .. VTAM SEND\n$CONVFD  EQU  C'D'                 .. DEALLOCATE SESSION\nCONVLU   DS   CL8                  PARTNER'S LU NAME\nCONVCID  DS   CL4                  CONVERSATION ID\nCONVUSER DS   CL8                  USER'S RACF ID\nCONVAUTH DS   X                    USER'S AUTHORITY LEVEL\nCONVL    EQU  *-CONVBLOK\n         MEND\n./ ADD NAME=CONVREQ  0100-95102-95102-1953-00014-00014-00000-TPXEXIT\n         MACRO\n         CONVREQ &DSECT=YES\n         AIF   ('&DSECT' EQ 'NO').LBL0010\nCONVREQ  DSECT\n         AGO  .LBL0020\n.LBL0010 ANOP\nCONVREQ  DS   0A\n.LBL0020 ANOP\nCONVADDR DS   A                   CONVERSATION BLOCK'S ADDRESS\nCONVCMD  DS   X                   COMMAND\n$CONVADD EQU  X'01'               .. ADD A NEW CONVERSATION BLOCK\n$CONVDEL EQU  X'02'               .. DELETE A CONERSATION BLOCK\nCONVREQL EQU  *-CONVREQ\n         MEND\n./ ADD NAME=EXITGBL  0100-95102-95102-1953-00122-00122-00000-TPXEXIT\n         MACRO\n         EXITGBL  &TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                 USER EXIT GLOBAL DATA                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF    ('&TYPE' EQ 'DSECT').DSECT00\nEXITGBL  CSECT\n         USING    EXITGBL,R9     DEFINE BASE\n         AGO      .COMM00\n.DSECT00 ANOP\nEXITGBL  DSECT\n.COMM00  ANOP\nGBLSTC   DC    AL4(0)             STARTED TASK NAME CHAIN ANCHOR\nGBLSTAT  DC    X'00'              STATUS\n$ATTN    EQU   X'80'              .. ATTENTION EXIT IS PRESENT\n$LERAD   EQU   X'40'              .. LERAD EXIT IS PRESENT\n$OPEN    EQU   X'20'              .. ACB IS OPEN\nGBLERROR DC    X'00'              ERROR INDICATOR\n$XLERAD  EQU   X'01'              .. LERAD EXIT NOT AVAILABLE\n$XATTN   EQU   X'02'              .. ATTENTION EXIT NOT AVAILABLE\n$XOPEN   EQU   X'04'              .. ACB OPEN ERROR OCCURRED\n$XSYS    EQU   X'08'              .. COULD NOT DETERMINE SYSTEM\nGBLCID   DC    XL4'00'            OUR CONVERSATION ID\nGBLAPPL  DC    X'00'              EXIT APPLID LENGTH\nGBLAPPN  DC    CL8' '             EXIT APPLID\nCOMMBLKS DC    CL80' '            CONSTANT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nGBLACB   ACB   AM=VTAM,           GENERATE VTAM ACB                    +\n               MACRF=LOGON,                                            +\n               EXLST=*,                                                +\n               APPLID=*\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nGBLEXLST EXLST AM=VTAM,           GENERATE VTAM EXIT LIST              +\n               ATTN=*,                                                 +\n               LERAD=*\n* ------------------------------------------------------------------- *\n*              TRACE CONTROL                                          *\n* ------------------------------------------------------------------- *\n         DC    CL4'BASE'          BASE ADDRESS OF TRACE TABLE\nTRADDR   DC    A(0)\n         DC    CL4'1STX'          FIRST TRACE TABLE ENTRY ADDRESS\nTRFIRST  DC    A(0)\n         DC    CL4'LAST'          LAST TRACE TABLE ENTRY ADDRESS\nTRLAST   DC    A(0)\n         DC    CL4'CURR'          CURRENT (LAST USED) ENTRY ADDRESS\nTRCURR   DC    A(0)\nTRDATA1  DC    CL8' '\nTRDATA2  DC    CL8' '\n*---------------------------------------------------------------------*\n*                                                                     *\n*          ADD TRACE ENTRY                                            *\n*                                                                     *\n*  During program initialization EXITMAIN acquires storage for the    *\n*  trace table and sets TRFIRST, TRLAST, and TRCURR.  EXITMAIN        *\n*  also sets R11 to the address of TPXCOMM and all other modules      *\n*  depend on this remaining unchanged.  Any module except this        *\n*  module may call the trace routine.  Macro ITRACE generates the     *\n*  calling sequence.  R14 is the only register altered by the trace   *\n*  macro.                                                             *\n*                                                                     *\n*  The trace table is a \"wrap-around\" table.  TRFIRST is the first    *\n*  entry's address, TRLAST is the last entry's address, and           *\n*  TRCURR is the address of the last entry added to the table.        *\n*  When a trace entry is added to the table, the calling module's     *\n*  name, an 8-byte ID, and up to 2 8-byte fields are captured.        *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*      This code depends on:                                          *\n*           R9   'EXITGBL' address                                    *\n*           R12  current module's base address                        *\n*           R14  trace id's address and R14 + 8 will be the return    *\n*                address                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nTRACE000 DS    0H\n         USING MODPRFX,R12         DEFINE BASE\n         USING TRENTRY,R8          DEFINE BASE\n         STM   R14,R12,12(R13)     SAVE ALL REGISTERS\nTRACE010 DS    0H\n         ICM   R8,15,TRCURR        CURRENT TRACE ENTRY\n         BZ    TRACE030            NO TRACE TABLE\n         LR    R2,R8               SAVE STARTING VALUE\n         OC    0(TRENTRYL,R8),0(R8)    EMPTY ENTRY?\n         BZ    TRACE020            YES.. USE THIS ENTRY\n         LA    R8,TRENTRYL(R8)     NEXT TRACE ENTRY\n         C     R8,TRLAST           BEYOND END OF TABLE?\n         BNH   TRACE020            NO\n         L     R8,TRFIRST          'WRAP' TRACE TABLE\nTRACE020 DS    0H\n         CS    R2,R8,TRCURR        ALLOCATE THE ENTRY\n         BNE   TRACE010            CHANGED.. TRY AGAIN\n         ST    R8,TRCURR           SAVE CURRENT TRACE ENTRY ADDRESS\n         MVC   TREMOD,PFXMODNM     COPY MODULE NAME\n         MVC   TREID,0(R14)        COPY TRACE ID\n         MVC   TREDATA1,TRDATA1    COPY TRACE DATA 1\n         MVC   TREDATA2,TRDATA2    COPY TRACE DATA 2\n         XC    TRDATA1,TRDATA1     CLEAR TRACE DATA\n         XC    TRDATA2,TRDATA2     CLEAR TRACE DATA\nTRACE030 DS    0H\n         LM    R14,R12,12(R13)     RESTORE ALL REGISTERS\n         B     8(R14)              RETURN\nGBLL     EQU      *-EXITGBL\n*---------------------------------------------------------------------*\n*                                                                     *\n*          TRACE TABLE ENTRY                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nTRENTRY  DSECT\nTREMOD   DS    CL8                 MODULE NAME\nTREID    DS    CL8                 TRACE ID\nTREDATA1 DS    CL8                 TRACE DATA 1\nTREDATA2 DS    CL8                 TRACE DATA 2\nTRENTRYL EQU   *-TRENTRY           ENTRY LENGTH\n         EXITPRFX TYPE=DSECT\n         MEND\n./ ADD NAME=EXITPRFX 0100-95102-95102-1953-00042-00042-00000-TPXEXIT\n.* ------------------------------------------------------------------ *\n.*                                                                    *\n.*       All modules start with a common prefix set of instructions   *\n.*       and eyecatcher.  This allows the trace routine to determine  *\n.*       which module is in control.                                  *\n.*                                                                    *\n.* ------------------------------------------------------------------ *\n         MACRO\n&NAME    EXITPRFX &DESC,                                               +\n               &TYPE=CSECT\n         AIF   ('&TYPE' EQ 'DSECT').L0010\n         AIF   (T'&DESC EQ 'O').ERR0010\n         AIF   (T'&NAME EQ 'O').ERR0020\nEXIT&NAME CSECT\n         USING EXIT&NAME,R12                                            ASE00100\n         USING EXITGBL,R9                                               ASE00100\n         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS                 ASE00110\n         LR    R12,R15             LOAD PERMANENT BASE                  ASE00120\n         B     @@000001            BYPASS ID/TIME/DESCRIPTION\nMODID    DC    CL8'EXIT&NAME'      MODULE NAME\n         DC    CL8'&SYSDATE'       DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'       TIME OF ASSEMBLY\n         DC    C&DESC\n@@000001 DS    0H\n         MEXIT\n.L0010   ANOP\nMODPRFX  DSECT\n         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS                 ASE00110\n         LR    R12,R15             LOAD PERMANENT BASE                  ASE00120\n         B     0(R0)               BRANCH AROUND MOD NAME/TIME/DESC\nPFXMODNM DS    CL8                 MODULE NAME\nPFXMODDT DS    CL8                 ASSEMBLY DATE\nPFXMODTM DS    CL6                 ASSEMBLY TIME\nPFXMODDS DS    C                   DESCRIPTION\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'DESCRIPTION IS REQUIRED'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'CSECT NAME IS REQUIRED'\n         MEXIT\n         MEND\n./ ADD NAME=FMH5     0100-95102-95102-1953-00035-00035-00000-TPXEXIT\n         MACRO\n         FMH5  &DSECT=,&TRAN=\n         LCLA  &LEN\n         AIF   ('&DSECT' EQ 'YES').DSECT00\n         AIF   ('&DSECT' EQ 'NO').CSECT00\n         MNOTE 12,'''DSECT'' IS INVALID, MUST BE ''YES'' OR ''NO'' '\n         MEXIT\n.DSECT00 ANOP\nFMH5     DSECT\n         AGO   .COMM\n.CSECT00 ANOP\nFMH5     DS    0A\n.COMM    ANOP\n         DC    AL1(FMH5L)            FMH LENGTH\n         DC    X'05'                 FMH TYPE\n         DC    XL2'02FF'             ATTACH COMMAND CODE\n         DC    X'00'                 FLAG BYTE\n         DC    X'03'                 LENGTH OF FIXED PARAMETERS FIELD\n         DC    X'D0'                 CONVERSATION TYPE (BASIC)\n         DC    X'00'                 RESERVED\n         DC    X'40'                 ALLOW CONFIRMS\n         AIF   ('&DSECT' EQ 'YES').DSECT01\n&LEN     SETA  K'&TRAN\nFMH5TRNL DC    AL1(&LEN)             TRANSACTION NAME LENGTH\nFMH5TRAN DC    C'&TRAN'              TRANSACTION NAME\n         AGO   .CSECT01\n.DSECT01 ANOP\nFMH5TRNL DS    X                     TRANSACTION NAME LENGTH\nFMH5TRAN DS    CL8                   TRANSACTION NAME\n.CSECT01 ANOP\n         DC    X'00'                 LENGTH OF SECURITY INFORMATION\n         DC    X'00'                 LENGTH OF LUW IDENTIFIER\n         DC    X'00'                 LENGTH OF CONVERSATION CORRELATOR\nFMH5L    EQU   *-FMH5                FMH LENGTH\n         MEND\n./ ADD NAME=ITRACE   0100-95102-95102-1953-00071-00071-00000-TPXEXIT\n.* ------------------------------------------------------------------*\n.*                                                                   *\n.*                        TRACE MACRO                                *\n.*                                                                   *\n.*       THE TRACE FUNCTION ALWAYS CAPTURES THE CSECT NAME (TAKEN    *\n.*       FROM THE MODULE PREFIX DATA) AND A TRACE ID (SPECIFIED ON   *\n.*       THIS MACRO OR \"**NOID**\" IF THE ID PARAMETER IS OMITTED.    *\n.*                                                                   *\n.*       ONE OR TWO DATA ELEMENTS (8 BYTES EACH) MAY BE CAPTURED AT  *\n.*       ANY TRACE POINT.  THE DATA TO BE CAPTURED MAY BE SPECIFIED  *\n.*       IN EITHER OF TWO WAYS: DATA1 OR RDATA1 AND DATA2 OR RDATA2. *\n.*       DATA1 AND RDATA1 ARE MUTUALLY EXCLUSIVE AS ARE DATA2 AND    *\n.*       RDATA2.  DATA1 AND DATA2 SPECIFY THE ADDRESS OF DATA TO BE  *\n.*       CAPTURED, RDATA1 AND RDATA2 SPECIFY A REGISTER WHOSE        *\n.*       CONTENTS ARE TO BE CAPTURED.                                *\n.*                                                                   *\n.*       FOR EXAMPLE:                                                *\n.*                                                                   *\n.*                 ITRACE ID=POINTA,DATA1=VALUE1,RDATA2=R4           *\n.*                                                                   *\n.*          IN THIS CASE THE TRACE ENTRY WOULD INCLUDE THE CSECT     *\n.*          NAME, THE ID DATA \"POINTA\", 8 BYTES OF DATA BEGINNING    *\n.*          AT VALUE1'S ADDRESS AND THE CONTENTS OF REGISTER 4.      *\n.*                                                                   *\n.* ------------------------------------------------------------------*\n         MACRO\n&NAME    ITRACE &ID=,&DATA1=,&DATA2=,&RDATA1=,&RDATA2=\n         GBLC  &TROPT\n         AIF   (T'&DATA1 NE 'O' AND T'&RDATA1 NE 'O').ERR0010\n         AIF   (T'&DATA2 NE 'O' AND T'&RDATA2 NE 'O').ERR0020\n         AIF   ('&TROPT' EQ 'OFF').MEXIT\n         AIF   (T'&DATA1 EQ 'O').DATA020\n         AIF   ('&DATA1'(1,1) EQ '(').DATA010\n         LA    R14,&DATA1         DATA ADDRESS\n         MVC   TRDATA1,0(R14)     MOVE DATA\n         AGO   .DATA030\n.DATA010 ANOP\n         MVC   TRDATA1,0&DATA1    MOVE DATA\n         AGO   .DATA030\n.DATA020 ANOP\n         AIF   (T'&RDATA1 EQ 'O').DATA030\n         STCM  &RDATA1,15,TRDATA1\n.DATA030 ANOP\n         AIF   (T'&DATA2 EQ 'O').DATA050\n         AIF   ('&DATA2'(1,1) EQ '(').DATA040\n         LA    R14,&DATA2         DATA ADDRESS\n         MVC   TRDATA2,0(R14)     MOVE DATA\n         AGO   .DATA060\n.DATA040 ANOP\n         MVC   TRDATA2,0&DATA2    MOVE DATA\n         AGO   .DATA060\n.DATA050 ANOP\n         AIF   (T'&RDATA2 EQ 'O').DATA060\n         STCM  &RDATA2,15,TRDATA2\n.DATA060 ANOP\n         BAL   R14,TRACE000       ENTER TRACE ROUTINE\n         AIF      (T'&ID EQ 'O').NOID\n&NAME    DC    CL8'&ID'           TRACE ID\n         AGO   .ID\n.NOID    ANOP\n&NAME    DC    CL8'**NOID**'\n.ID      ANOP\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'DATA1 AND RDATA1 ARE MUTUALLY EXCLUSIVE'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'DATA2 AND RDATA2 ARE MUTUALLY EXCLUSIVE'\n.MEXIT   ANOP\n         MEXIT\n         MEND\n./ ADD NAME=MOD      0100-95102-95102-1953-00022-00022-00000-TPXEXIT\n         MACRO\n         MOD   &NAME,&LABEL,&TYPE=DEFINE\n         GBLC  &MODTYPE\n         AIF   ('&TYPE' EQ 'MAIN').MOD0030\n         AIF   ('&TYPE' EQ 'DSECT').MOD0040\n         DC    CL8'&NAME'         FUNCTION IDENTIFIER\n         AIF   ('&MODTYPE' EQ 'DSECT').MOD0020\n         AIF   ('&NAME' EQ 'TPXPRTS').MOD0010\n         DC    VL4(&NAME)         ENTRY POINT ADDRESS\n         MEXIT\n.MOD0010 ANOP\n         DC    AL4(0)             ENTRY POINT ADDRESS\n         MEXIT\n.MOD0020 ANOP\n&LABEL   DC    AL4(0)             ENTRY POINT ADDRESS\n         MEXIT\n.MOD0030 ANOP\n&MODTYPE SETC  'MAIN'\n         MEXIT\n.MOD0040 ANOP\n&MODTYPE SETC  'DSECT'\n         MEND\n./ ADD NAME=PRTBLOK  0100-95102-95102-1953-00024-00024-00000-TPXEXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PRINTER REQUEST BLOCK                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         PRTBLOK &DSECT=YES\n         AIF   ('&DSECT' EQ 'YES').LBL0010\nPRTBLOK  DS    0A\n         AGO   .LBL0020\n.LBL0010 ANOP\nPRTBLOK  DSECT\n.LBL0020 ANOP\nPRTEYE   DS    CL8                 EYECATCHER\nPRTNEXT  DS    A                   NEXT BLOCK ON THE CHAIN\nPRTCMD   DS    C                   COMMAND\n$PRTHEAD EQU   C'H'                .. PRINT HEADING\n$PRTPRT  EQU   C'P'                .. PRINT\n$PRTASIS EQU   C'A'                .. PRINT AS IS (NO COMPRESSION)\nPRTCC    DS    C                   CARRIAGE CONTROL\nPRTMSGID DS    CL11                MESSAGE ID\nPRTDATA  DS    CL120               PRINT DATA\nPRTBLOKL EQU   *-PRTBLOK\n         MEND\n./ ADD NAME=REGEQU   0100-95102-95102-1953-00016-00016-00000-TPXEXIT\nR0       EQU    0\nR1       EQU    1\nR2       EQU    2\nR3       EQU    3\nR4       EQU    4\nR5       EQU    5\nR6       EQU    6\nR7       EQU    7\nR8       EQU    8\nR9       EQU    9\nR10      EQU    10\nR11      EQU    11\nR12      EQU    12\nR13      EQU    13\nR14      EQU    14\nR15      EQU    15\n./ ADD NAME=STCDSCT  0100-95102-95102-1953-00010-00010-00000-TPXEXIT\nSTCDSCT  DSECT\nSTCNEXT  DS   A                NEXT STC APPLID BLOCK ADDRESS\nSTCSTCK  DS   XL8              TIME STAMP OF LAST 'INQUIRE'\nSTCFLAG  DS   X                STC'S STATUS\n$STCERR  EQU  X'80'            .. ERROR HAS OCCURRED\n$STCXRDY EQU  X'40'            .. STC WAS NOT READY\n$STCCNOS EQU  X'20'            .. CNOS HAS BEEN ISSUED\nSTCNAMEL DS   X                STC APPLID NAME LENGTH\nSTCNAME  DS   CL8              STC APPLID\nSTCDSCTL EQU  *-STCDSCT\n./ ADD NAME=TPXCOMM  0100-95102-95102-1953-00160-00160-00000-TPXEXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*          COMMON AREA MAPPING MACRO                                  *\n*                                                                     *\n*     This macro will generate either the 'common' module CSECT or    *\n*     a DSECT to map the 'common' module.  'Common' is used for       *\n*     constants and work areas that are required by several modules   *\n*     allowing some elimination of duplicated data and to allow       *\n*     inter-module communication.                                     *\n*                                                                     *\n*     The trace table code is also incorporated into the 'TPXCOMM'.   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         TPXCOMM &TYPE=\n         AIF   ('&TYPE' EQ 'CSECT').CSECT\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n         MNOTE 12,'INVALID TYPE'\n         MEXIT\n.CSECT   ANOP\nTPXCOMM CSECT\nTPXCOMM AMODE 31\nTPXCOMM RMODE ANY\n         AGO   .NODSECT\n.DSECT   ANOP\nTPXCOMM DSECT\n.NODSECT ANOP\n*---------------------------------------------------------------------*\n*                                                                     *\n*          Double word for CVB/CVD                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMDWRD DC    D'0'\n*---------------------------------------------------------------------*\n*                                                                     *\n*          MODULE ENTRY POINTS                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nTPXMODS  DS    0A\n         MOD   TYPE=DSECT\n         COPY  TPXMODS\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PRINT SUBTASK CONTROL                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMPRT  DC    A(0)                PRINT SUBTASK'S TCB ADDRESS\nPRTREQ   DC    A(0)                PRINT SUBTASK REQUEST QUEUE\nPRTTERM  DC    A(0)                PRINT SUBTASK TERMINATION ECB\nPRTWORK  DC    A(0)                PRINT WORK TO DO ECB\n*---------------------------------------------------------------------*\n*                                                                     *\n*          TRACE CONTROL                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DS    0A\n         DC    CL4'1STX'           FIRST TRACE ENTRY\nTRFIRST  DC    A(0)\n         DC    CL4'LAST'           LAST TRACE ENTRY\nTRLAST   DC    A(0)\n         DC    CL4'CURR'           CURRENT TRACE ENTRY\nTRCURR   DC    A(0)\nTRADDR   DC    A(0)                TRACE TABLE STORAGE ADDRESS\nTRDATA1  DC    CL8' '              TRACE DATA ITEM 1\nTRDATA2  DC    CL8' '              TRACE DATA ITEM 2\nTRSIZE   DC    A(500*TRENTRYL)     TRACE TABLE SIZE\n*---------------------------------------------------------------------*\n*                                                                     *\n*          GLOBAL DATA                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMDXDA DC    A(0)                WORK AREA BASE ADDRESS\nCOMMPARM DC    A(0)                ADDRESS OF PARM FROM EXEC STATEMENT\nCOMMACB  DC    A(0)                ACB'S ADDRESS\nCOMMXLST DC    A(0)                EXIT LIST'S ADDRESS\nCOMMCONV DC    A(0)                VTAM CONVERSATION BLOCK CHAIN\nCOMMVECB DC    A(0)                ECB POSTED BY ATTN EXIT\nCOMMAPLL DC    AL1(L'COMMAPLN)     LENGTH OF APPL ID\nCOMMAPLN DC    CL8' '              OUR VTAM APPL ID\nCOMMMAXL DC    PL3'60'             LINES PER PAGE ON SYSOUT DATASETS\nCOMMFLAG DC    X'00'               GLOBAL FLAGS\n$ABEND   EQU   X'80'               .. ABEND AT END OF JOB\n$ABORT   EQU   X'40'               .. SERIOUS ERROR, ABORT\n$COMMPRT EQU   X'20'               .. PRINT SUBTASK ATTACHED\nCOMMEOJ  DC    X'00'               EOJ INDICATORS\n$EOJ1    EQU   X'80'               .. EOJ STAGE 1 STARTED\n$EOJ2    EQU   X'40'               .. EOJ STAGE 2 STARTED\nCOMMBLKS DC    CL140' '            CONSTANT\nCOMMIOSZ EQU   100                 I/O AREA SIZE PER CONVERSATION\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*          ADD TRACE ENTRY                                            *\n*                                                                     *\n*  During program initialization TPXMAIN acquires storage for the     *\n*  trace table and sets TRFIRST, TRLAST, and TRCURR.  TPXMAIN         *\n*  also sets R11 to the address of TPXCOMM and all other modules      *\n*  depend on this remaining unchanged.  Any module except this        *\n*  module may call the trace routine.  Macro ITRACE generates the     *\n*  calling sequence.  R14 is the only register altered by the trace   *\n*  macro.                                                             *\n*                                                                     *\n*  The trace table is a \"wrap-around\" table.  TRFIRST is the first    *\n*  entry's address, TRLAST is the last entry's address, and           *\n*  TRCURR is the address of the last entry added to the table.        *\n*  When a trace entry is added to the table, the calling module's     *\n*  name, an 8-byte ID, and up to 2 8-byte fields are captured.        *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*      This code depends on:                                          *\n*           R11  'TPXCOMM' address                                    *\n*           R12  current module's base address                        *\n*           R14  trace id's address and R14 + 8 will be the return    *\n*                address                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nTRACE000 DS    0H\n         USING MODPRFX,R12         DEFINE BASE\n         USING TPXCOMM,R11         DEFINE BASE\n         USING TRENTRY,R9          DEFINE BASE\n         STM   R14,R12,12(R13)     SAVE ALL REGISTERS\nTRACE010 DS    0H\n         ICM   R9,15,TRCURR        CURRENT TRACE ENTRY\n         BZ    TRACE030            NO TRACE TABLE\n         LR    R2,R9               SAVE STARTING VALUE\n         OC    0(TRENTRYL,R9),0(R9)    EMPTY ENTRY?\n         BZ    TRACE020            YES.. USE THIS ENTRY\n         LA    R9,TRENTRYL(R9)     NEXT TRACE ENTRY\n         C     R9,TRLAST           BEYOND END OF TABLE?\n         BNH   TRACE020            NO\n         L     R9,TRFIRST          'WRAP' TRACE TABLE\nTRACE020 DS    0H\n         CS    R2,R9,TRCURR        ALLOCATE THE ENTRY\n         BNE   TRACE010            CHANGED.. TRY AGAIN\n         ST    R9,TRCURR           SAVE CURRENT TRACE ENTRY ADDRESS\n         MVC   TREMOD,PFXMODNM     COPY MODULE NAME\n         MVC   TREID,0(R14)        COPY TRACE ID\n         MVC   TREDATA1,TRDATA1    COPY TRACE DATA 1\n         MVC   TREDATA2,TRDATA2    COPY TRACE DATA 2\n         XC    TRDATA1,TRDATA1     CLEAR TRACE DATA\n         XC    TRDATA2,TRDATA2     CLEAR TRACE DATA\nTRACE030 DS    0H\n         LM    R14,R12,12(R13)     RESTORE ALL REGISTERS\n         B     8(R14)              RETURN\nCOMMEND  EQU   *\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*          TRACE TABLE ENTRY                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nTRENTRY  DSECT\nTREMOD   DS    CL8                 MODULE NAME\nTREID    DS    CL8                 TRACE ID\nTREDATA1 DS    CL8                 TRACE DATA 1\nTREDATA2 DS    CL8                 TRACE DATA 2\nTRENTRYL EQU   *-TRENTRY           ENTRY LENGTH\n         TPXPRFX TYPE=DSECT\n         MEND\n./ ADD NAME=TPXMODS  0100-95102-95102-1953-00009-00009-00000-TPXEXIT\n         MOD   TPXATTN,AATTN       ATTENTION EXIT\n         MOD   TPXCONV,ACONV       ADD/DELETE CONVERSATION BLOCKS\n         MOD   TPXLERAD,ALERAD     VTAM LERAD EXIT\n         MOD   TPXLOSS,ALOSS       LOST CONVERSATION CLEAN-UP\n         MOD   TPXMAIN,AMAIN       MAIN LINE\n         MOD   TPXPRTQ,APRTQ       PRINT QUEUING\n         MOD   TPXPRTS,APRTS       PRINT SUBTASK\n         MOD   TPXVSUB,AVSUB       VTAM SUBFUNCTIONS\n         MOD   TPXVTAM,AVTAM       VTAM COMMUNICATION\n./ ADD NAME=TPXPRFX  0100-95102-95102-1953-00056-00056-00000-TPXEXIT\n.* ------------------------------------------------------------------ *\n.*                                                                    *\n.*       ALL MODULES START WITH A COMMON PREFIX SET OF INSTRUCTIONS   *\n.*       AND EYECATCHER.  THIS ALLOWS THE TRACE ROUTINE AND THE       *\n.*       ABEND EXITS TO DETERMINE WHICH MODULE IS IN CONTROL.         *\n.*                                                                    *\n.* ------------------------------------------------------------------ *\n         MACRO\n&NAME    TPXPRFX &DESC,                                                +\n               &TYPE=CSECT,                                            +\n               &COMM=TPXCOMM\n         AIF   ('&TYPE' EQ 'DSECT').L0010\n         AIF   (T'&DESC EQ 'O').ERR0010\n         AIF   (T'&NAME EQ 'O').ERR0020\nTPX&NAME CSECT\n         USING TPX&NAME,R12                                             ASE00100\n         USING &COMM,R11                                                ASE00100\n         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS                 ASE00110\n         LR    R12,R15             LOAD PERMANENT BASE                  ASE00120\n         L     R10,COMMDXDA        WORK AREA ADDRESS (ABOVE THE LINE)\n         A     R10,DXDSTART        PLUS DISPLACEMENT TO OUR AREA\n         USING DXD&NAME,R10        DEFINE BASE\n         LR    R2,R13              SAVE OLD REGISTER SAVE AREA ADDRESS  ASE00130\n         LA    R13,DXDSAVE         POINT TO OUR SAVE AREA               ASE00140\n         ST    R13,8(R2)           CHAIN FORWARD                        ASE00150\n         ST    R2,4(R13)           CHAIN BACKWARD                       ASE00160\n         B     @@000001            BYPASS ID/TIME/DESCRIPTION\nMODID    DC    CL8'TPX&NAME'       MODULE NAME\n         DC    CL8'&SYSDATE'       DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'       TIME OF ASSEMBLY\n         DC    C&DESC\n@@000001 DS    0H\n         MEXIT\n.L0010   ANOP\nMODPRFX  DSECT\n         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS                 ASE00110\n         LR    R12,R15             LOAD PERMANENT BASE                  ASE00120\n         L     R10,COMMDXDA        WORK AREA ADDRESS\n         A     R10,0               PLUS DISPLACEMENT TO OUR AREA\n         LR    R2,R13              SAVE OLD REGISTER SAVE AREA ADDRESS  ASE00130\n         LA    R13,0               POINT TO SAVE AREA                   ASE00140\n         ST    R13,8(R2)           CHAIN FORWARD                        ASE00150\n         ST    R2,4(R13)           CHAIN BACKWARD                       ASE00160\n         B     0(R0)               BRANCH AROUND MOD NAME/TIME/DESC\nPFXMODNM DS    CL8                 MODULE NAME\nPFXMODDT DS    CL8                 ASSEMBLY DATE\nPFXMODTM DS    CL6                 ASSEMBLY TIME\nPFXMODDS DS    C                   DESCRIPTION\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'DESCRIPTION IS REQUIRED'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'CSECT NAME IS REQUIRED'\n         MEXIT\n         MEND\n./ ADD NAME=VTAMBLOK 0100-95102-95102-1953-00030-00030-00000-TPXEXIT\n         MACRO\n         VTAMBLOK &DSECT=\n* ------------------------------------------------------------------- *\n*                                                                     *\n*      VTAM SUB-FUNCTION COMMAND BLOCK                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF  (T'&DSECT EQ 'O').ERR0010\n         AIF  ('&DSECT' EQ 'NO').CSECT00\n         AIF  ('&DSECT' EQ 'YES').DSECT00\n         MNOTE 12,'INVALID ''DSECT'', MUST BE ''YES'' OR ''NO'' '\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'''DSECT'' PARAMETER IS REQUIRED'\n         MEXIT\n.CSECT00 ANOP\nVTAMBLOK DS   0F\n         AGO  .COMMON\n.DSECT00 ANOP\nVTAMBLOK DSECT\n.COMMON  ANOP\nVTAMCONV DS   A                    ADDRESS OF CONVERSATION BLOCK\nVTAMCMD  DS   X                    COMMAND\n$VTAMSND EQU  X'01'                .. ISSUE A SEND\n$VTAMRCV EQU  X'02'                .. ISSUE A RECEIVE\n$VTAMDLO EQU  X'03'                .. DEALLOCATE SESSION\n$VTAMCHK EQU  X'04'                .. ISSUE A CHECK\n$VTAMCFM EQU  X'05'                .. ISSUE SEND/CONFIRMED\nVTAML    EQU  *-VTAMBLOK\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TPXSRC": {"ttr": 24072, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x95\\x10/\\x00\\x95\\x10/ \\x02\\x10\\xa3\\x10\\xa4\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1995-04-12T00:00:00", "modifydate": "1995-04-12T20:02:00", "lines": 4259, "newlines": 4260, "modlines": 0, "user": "SBGCSC"}, "text": "./ ADD NAME=$$DOC    0100-95102-95102-1953-00067-00067-00000-TPXEXIT\nWe (the all inclusive version, not the royal) decided to run everyone's\nfavorite piece of software....TPX.  The network guys came up with an\nidea for a machine they called the CMC. The purpose of this CMC machine\nwas an MVS system that had its own isloated CPU and DASD.  This was to\nprovide the network hub with very high reliability and availability.\nThere was to be no TSO (except for system administration stuff like\nupdates to PARMLIB, VTAMLST, etc) or batch work on the CMC.  The system\nwould be upgraded with new releases of MVS, VTAM, JES, etc only once or\ntwice a year with only solid proven code.  There was one small snag.\nSince the machine was as insolated from the rest of the production\nenvironment as possible, with its own DASD, it had its own RACF database\nas well.  This meant that when a user logged on to TPX their id and\npassword was verified by the CMC machine, but when they started a\nsession with say TSO on any other machine, their id and password was\nverified using that mahcine's RACF database.  It also meant that\neveryone had to be defined to the CMC's RACF database just to allow\nthem to log-on to TPX.  Our solution to the problem was to develop\na TPX exit.\n\nTPX has a user replacable sign-on/sign-off exit, TPXUSNSF.   I developed\nan exit that communicates with a partner started task that runs on the\nproduction machines using the LU 6.2 protocols.\n\nAssume you have the CMC machine and 3 production machines called SYSA,\nSYSB, and SYSC.  The CMC has its own RACF database.  SYSA, SYSB, and\nSYSC all share the same production RACF database.  You could run the\nTPXSTC on SYSA, SYSB, and SYSC and implement the exit on TPX.  When\na user logs-on to TPX, the exit will attempt to establish a VTAM\nsession with the first STC defined, let's say the one on SYSA.  If the\nsession is successfully established, the exit will transmit the user's\nid and the password they typed in to the TPXSTC.  The TPXSTC will\ncall RACF, and transmit the RACF return code and reason codes back to\nthe TPX exit.  The exit will set the appropiate return code (allow the\nlog on, or reject the log-on).  When the log-on is not successful, the\nexit will interpret the return code and reason codes so the user will\nreceive a message that explains why the log-on failed.  If the exit\nwas not able to establish a session with the TPXSTC on SYSA, it will\nattempt to contact the next TPXSTC defined, then the next, and so on\nuntil it has tried to contact all the TPXSTCs defined.  If it cannot\ncontact any TPXSTC, it will tell TPX to use its own default method of\nverifying the id and password (in our case TPX will call RACF on the\nCMC machine).\n\nAt first we were concerned about the exit/TPXSTC communication being\na bottleneck to TPX performance.  Our CMC is connected to the\nproduction machines via CTCs, so the transission time is about as fast\nas it's going to get.  The exit only gets involved when a new user\nlogs-in to TPX.  It is not used when a user starts a session with\na new application after logging-in.  The preformance impact was\nnegligible.  We were also concerned about the reliability of the code.\nIn over 2 years, there has only been one abend.  We were running the\nSTC on a 3090-600J, and were getting about 60 id/password verifications\nper cpu second used by the STC.\n\n\nWe found that the exit had to be re-assembled when a new release of\nTPX was installed.  Some part of the linkage to the exit had changed\nand was not compatable with the exit assembled with the previous\nversion's MACLIB and GENLIB.  Anytime we put on any fixes or new\nreleases of TPX, we re-assemble the exit with the latest version of\nthe MACLIB and GENLIBs.  There should be no reason to re-assemble\nthe STC due to a TPX upgrade.\n\nThe STCs are capable of processing user id and passwords from more\nthan one TPX exit.  If you were to have a production version of TPX\nand a new version in test, they could both reference the same TPXSTC\nin their STCAPPL= statements.\n./ ADD NAME=$INSTALL 0100-95102-95102-1953-00073-00073-00000-TPXEXIT\n  1.  Assemble the exit.\n      a.  Allocate the OBJECT library:\n            RECFM=FB,LRECL=80,BLKSIZE=3120\n      b.  Add valid job card\n      c.  Change the source and maclib DSNs to the names you used.\n      d.  Change the TPX MACLIB and GENLIB DSNs.\n      e.  Change the link-edit SYSLMOD DDs to reference the TPX loadlib.\n          Or, allocate a library for the exit and add it to the TPX\n          STEPLIB.  TPX runs APF authorized, so this library will also\n          have to be authorized, and ahead of the TPX library.\n\n  2.  Assemble the STC.\n      a.  Add valid job card.\n      b.  Change the source and maclib DSNs to the names you used.\n      c.  If you want to keep the STC in its own library, allocate the\n          library:\n             RECFM=U,BLKSIZE=23200\n          this library must be APF authorized.\n      d.  Change the link-edit SYSLMOD DDs to reference the library\n          allocated in step c, or an existing APF authorized library.\n\n  3.  Add VTAM definitions for the exit and STC(s).\n      The definition must include the APPC=YES parameter.\n      You could create a VTAMLST member for the exit that looks like:\n\n           VBUILD TYPE=APPL\n  TPXEXIT  APPL  APPC=YES\n\n       The definition for the STC(s)\n           VBUILD TYPE=APPL\n  TPXSTCA  APPL  APPC=YES\n  TPXSTCB  APPL  APPC=YES\n            .\n            .\n            .\n\n  4.  Create the exit parameters.  This can be either a member in an\n      existing PDS or sequential file, or allocate a new PDS or\n      sequential file with RECFM=FB,LRECL=80.\n      Exit control statements are:\n\n       EXITAPPL=applname        This defines the VTAM APPL name the\n                                exit will use to identify itself to\n                                VTAM.  This should be the same name\n                                used in step 3.\n\n       STCAPPL=applname         This defines the VTAM APPL name of\n                                a TPXSTC.  You can define more than\n                                one STCAPPL.  You should probably\n                                run the TPXSTC on each system.  If\n                                the TPXSTC (or the system it is running\n                                on should fail), the exit will try to\n                                contact the TPXSTC on another system.\n\n       Comment statements start with an asterisk (*) in column one.\n\n  5.  Add the EXITIN and EXITPRT DD statements to the TPX startup proc.\n      The EXITIN DD should reference the parameter member or data set\n      created in step 4.  EXITPRT is a sysout data set.  If you put\n      the exit in its own library (see step x), add this library to\n      the STEPLIB ahead of the TPX loadlib (be sure this library is\n      APF authorized).\n\n  6.  Add the TPXSTC proc(s) to a production PROCLIB.  The PARM on\n      the execute statement is the APPL id that the STC is to use\n      to identifiy itself to VTAM.  This should be the same name\n      as in step 3.\n\n  7.  Start up the STC(s).\n\n  8.  Re-start TPX.\n  9.  To shutdown the STC, you can enter the MVS stop command:\n           P  TPXSTCA (assuming you called the STC TPXSTCA)\n./ ADD NAME=EXITATTN 0100-95102-95102-1953-00110-00110-00000-TPXEXIT\n         TITLE 'TPX SIGN ON/SIGN OFF ATTENTION EXIT'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: EXITATTN - TPX SIGN ON/SIGN OFF ATTENTION EXIT        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXITATTN CSECT\nEXITATTN AMODE 31\nEXITATTN RMODE ANY\n         LR    R12,R15               LOAD BASE\n         USING EXITATTN,R12          DEFINE BASE\n         LR    R10,R1                COPY PARAMETER LIST ADDRESS\n         USING VTAMPARM,R10          DEFINE BASE\n         LR    R5,R14                SAVE RETURN ADDRESS\n         B     ATTN0010              SKIP EYECATCHER\n         DC    CL8'EXITATTN'         MODULE NAME\n         DC    C'&SYSDATE'           DATE OF ASSEMBLY\n         DC    C'&SYSTIME'           TIME OF ASSEMBLY\nATTN0010 DS    0H\n         GETMAIN RU,LV=72,LOC=BELOW  ACQUIRE A SAVE AREA\n         LR    R13,R1                SAVE AREA ADDRESS\n         L     R1,VTAMACB            ACB'S ADDRESS\n         USING IFGACB,R1             DEFINE BASE\n         L     R11,ACBUSER           GLOBAL DATA ADDRESS\n         USING EXITGBL,R9            DEFINE BASE\n         L     R8,VTAMRPL\n         USING IFGRPL,R8             DEFINE BASE\n         L     R7,RPLAAREA           RPL EXTENSION'S ADDRESS\n         USING ISTRPL6X,R7           DEFINE BASE\n         CLC   VTAMTYPE,CNOSTYPE     CNOS CALL?\n         BE    CNOS0000              YES\n         CLC   VTAMTYPE,FMH5TYPE     FMH5 CALL?\n         BE    FMH50000              YES\n         CLC   VTAMTYPE,LOSSTYPE     LOSS CALL?\n         BE    LOSS0000              YES\n         B     EXIT0000              OTHERWISE EXIT\n* ------------------------------------------------------------------- *\n*             CNOS                                                    *\n* ------------------------------------------------------------------- *\nCNOS0000 DS    0H\n         ABEND $U1000,DUMP,,USER     NO ONE SHOULD LOGON ON TO US\n* ------------------------------------------------------------------- *\n*             FMH5                                                    *\n* ------------------------------------------------------------------- *\nFMH50000 DS    0H\n         ABEND $U1001,DUMP,,USER     NO ONE SHOULD LOGON ON TO US\n* ------------------------------------------------------------------- *\n*             LOSS                                                    *\n* ------------------------------------------------------------------- *\nLOSS0000 DS    0H\n         ICM   R6,15,GBLSTC          CURRENT STC BLOCK\n         BZ    EXIT0000              NO STC BLOCK ACTIVE\n         USING STCDSCT,R6            DEFINE BASE\nLOSS0010 DS    0H\n         CLC   STCNAME,RPL6LU        IS THIS THE LU THAT WAS LOST?\n         BE    LOSS0020              YES\n         L     R6,STCNEXT            NEXT ON CHAIN\n         CLM   R6,15,GBLSTC          WRAPPED BACK?\n         BE    EXIT0000              YES.. LU IS UNKNOWN\n         B     LOSS0010              SEE IF IT WAS THIS ONE\nLOSS0020 DS    0H\n         OI    STCFLAG,$STCERR       ERROR ON THIS LINK\n         NI    STCFLAG,255-$STCCNOS  CNOS WILL HAVE TO BE RE-ISSUED\n         B     EXIT0000              EXIT\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         FREEMAIN RU,A=(13),LV=72    FREEMAIN REGISTER SAVE AREA\n         BR    R5                    RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        CONSTANTS                                                   *\n*                                                                    *\n* ------------------------------------------------------------------ *\nCNOSTYPE DC    CL4'CNOS'             CHANGE NUMBER OF SESSIONS\nFMH5TYPE DC    CL4'FMH5'             FMH5\nLOSSTYPE DC    CL4'LOSS'             LOSS OF SESSION\n* ------------------------------------------------------------------ *\n*              EXIT GLOBAL DATA MAP                                  *\n* ------------------------------------------------------------------ *\n         EXITGBL TYPE=DSECT\n* ------------------------------------------------------------------ *\n*              STC BLOCKS                                            *\n* ------------------------------------------------------------------ *\n         COPY  STCDSCT\n* ------------------------------------------------------------------ *\n*              ACB DSECT                                             *\n* ------------------------------------------------------------------ *\n         IFGACB  AM=VTAM\n* ------------------------------------------------------------------ *\n*              RPL DSECT                                             *\n* ------------------------------------------------------------------ *\n         IFGRPL  AM=VTAM\n* ------------------------------------------------------------------ *\n*              PARAMETER LIST (PASSED BY VTAM)                       *\n* ------------------------------------------------------------------ *\nVTAMPARM DSECT\nVTAMACB  DS   A                      ACB ADDRESS\n         DS   A                      RESERVED\n         DS   A                      RESERVED\nVTAMTYPE DS   CL4                    TYPE OF CALL\nVTAMRPL  DS   A                      RPL ADDRESS\n         DS   A                      RESERVED\n* ------------------------------------------------------------------ *\n*              EQUATES                                               *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         ABCODES\n         END  EXITATTN\n./ ADD NAME=EXITGBL  0100-95102-95102-1953-00013-00013-00000-TPXEXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Name: EXITGBL                                                      *\n*                                                                     *\n*  Purpose: Common data and trace table manager                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         EXITGBL TYPE=CSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\n         END   EXITGBL\n./ ADD NAME=EXITINIT 0100-95102-95102-1953-00165-00165-00000-TPXEXIT\n         TITLE 'EXITINIT initialize ACB'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: EXITINIT - TPX logon/logoff exit initialization       *\n*                                                                     *\n*       AT ENTRY R10 WILL POINT TO THE PARM LIST                      *\n*                R11 WILL POINT TO THE SMRT                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINIT     EXITPRFX 'TPX user exit ACB initialization'\n         USING SMRT,R11              DEFINE BASE\n         USING EXITPARM,R10          DEFINE BASE\n         GETMAIN RU,                 ACQUIRE WORK AREA                 +\n               LV=WORKL,             .. SIZE                           +\n               LOC=ANY               .. FROM ANY AREA\n         ST    R13,4(R1)             SAVE CALLER'S SAVE AREA ADDRESS\n         ST    R1,8(R13)             CHAIN TO CALLER'S SAVE AREA\n         LR    R13,R1                SET WORK AREA BASE\n         USING WORK,R13              DEFINE BASE\n         ITRACE ID=ENTRY\n*---------------------------------------------------------------------*\n*        Open the ACB                                                 *\n*---------------------------------------------------------------------*\n         LA    R8,GBLACB             ACB'S ADDRESS\n         USING IFGACB,R8             DEFINE BASE\n         LA    R7,GBLEXLST           EXIT LIST'S ADDRESS\n         USING IFGEXLST,R7           DEFINE BASE\n         ST    R7,ACBEXLST           SET EXLST'S ADDRESS IN ACB\n         LA    R0,GBLAPPL            APPLID'S LENGTH ADDRESS\n         ST    R0,ACBAPID            SET APPLID ADDRESS IN ACB\n         TM    GBLSTAT,$ATTN         ATTENTION EXIT ALREADY PRESENT?\n         BO    INIT0010              YES\n         LOAD  EP=EXITATTN,          LOAD ATTENTION EXIT               +\n               ERRET=INIT0050        .. NOT FOUND\n         ST    R0,EXLATTNP           SET ATTENTION EXIT ADDRESS\n         OI    GBLSTAT,$ATTN         ATTENTION EXIT IS PRESENT\n         ITRACE ID=ATTNEXIT,                                           +\n               RDATA1=R0\nINIT0010 DS    0H\n         TM    GBLSTAT,$LERAD        LERAD EXIT ALREADY PRESENT?\n         BO    INIT0020              YES\n         LOAD  EP=EXITLERD,          LOAD LERAD EXIT                   +\n               ERRET=INIT0040        .. NOT FOUND\n         ST    R0,EXLLERP            SET LERAD EXIT ADDRESS\n         OI    GBLSTAT,$LERAD        LERAD EXIT IS PRESENT\n         ITRACE ID=LERDEXIT,                                           +\n               RDATA1=R0\nINIT0020 DS    0H\n         TM    GBLSTAT,$OPEN         ACB ALREADY OPEN?\n         BO    INIT0040              YES\n         LA    R1,GBLAPPL            ADDRESS OF APPLID LENGTH\n         ST    R1,ACBAPID            SET ADDRESS IN ACB\n         GETMAIN RU,                 ACQUIRE STORAGE FOR OPEN/CLOSE    +\n               LV=OPENLL,            .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R3,R1                 COPY STORAGE ADDRESS\n         MVC   0(OPENLL,R3),OPENL    COPY OPEN PARM LIST\n         OPEN  ((R8)),MF=(E,(R3))    OPEN ACB\n         LR    R2,R15                SAVE RETURN CODE\n         FREEMAIN RU,A=(R3),LV=OPENLL\n         ITRACE ID=OPENRC,                                             +\n               RDATA1=R2\n         LTR   R15,R2                OPEN SUCCESSFUL?\n         BZ    INIT0030              YES\n         MVC   WORKWTO(WTO01L),WTO01 COPY WTO\n         WTO   MF=(E,WORKWTO)        ISSUE WTO\n         MVI   GBLERROR,$XOPEN       OPEN ERROR OCCURRED\n         B     EXIT0000              EXIT\n*---------------------------------------------------------------------*\n*           ACB IS OPEN                                               *\n*---------------------------------------------------------------------*\nINIT0030 DS    0H\n         OI    GBLSTAT,$OPEN         OPEN HAS COMPLETED\n         LA    R0,RPLL               RPL'S SIZE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL           +\n               LV=(0),               .. RPL'S SIZE                     +\n               LOC=ANY               .. FROM ANY AREA\n         LR    R6,R1                 COPY RPL ADDRESS\n         MVC   0(RPLL,R6),RPLI       INITIALIZE RPL\n         ITRACE ID=SETLOGON\n         SETLOGON ACB=(R8),          ISSUE SETLOGON                    +\n               RPL=(R6),             .. RPL ADDRESS                    +\n               OPTCD=START\n         FREEMAIN RU,A=(R6),LV=RPLL  FREEMAIN RPL\n         B     EXIT0000\n*---------------------------------------------------------------------*\n*           LERAD exit not available                                  *\n*---------------------------------------------------------------------*\nINIT0040 DS    0H\n         ITRACE ID=NOLERAD\n         MVC   WORKWTO(WTO02L),WTO02 COPY WTO\n         WTO   MF=(E,WORKWTO)        ISSUE WTO\n         OI    GBLERROR,$XLERAD      LERAD EXIT IS NOT AVAILABLE\n         B     EXIT0000              AND EXIT\n*---------------------------------------------------------------------*\n*           ATTN exit not available                                   *\n*---------------------------------------------------------------------*\nINIT0050 DS    0H\n         ITRACE ID=NOATTN\n         MVC   WORKWTO(WTO03L),WTO03 COPY WTO\n         WTO   MF=(E,WORKWTO)        ISSUE WTO\n         OI    GBLERROR,$XATTN       ATTENTION EXIT IS NOT AVAILABLE\n         B     EXIT0000              AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         LR    R1,R13                COPY WORK AREA ADDRESS\n         L     R13,4(R13)            RESTORE CALLER'S SAVE AREA ADDRESS\n         FREEMAIN RU,A=(1),LV=WORKL  FREEMAIN WORK AREA\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         SR    R15,R15               MUST BE ZERO\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nRPLI     RPL   AM=VTAM\nRPLL     EQU   *-RPLI\nWTO01    WTO   'TPXEXITINIT01 ERROR OPENING ACB',MF=L\nWTO01L   EQU   *-WTO01\nWTO02    WTO   'TPXEXITINIT02 LERAD EXIT NOT AVAILABLE',MF=L\nWTO02L   EQU   *-WTO02\nWTO03    WTO   'TPXEXITINIT03 ATTENTION EXIT NOT AVAILABLE',MF=L\nWTO03L   EQU   *-WTO03\nOPENL    OPEN  (*,INPUT),MF=L        OPEN PARM LIST\nOPENLL   EQU   *-OPENL\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWORK     DSECT\nWORKSAVE DS    18F\nWORKWTO  DS    CL150\nWORKL    EQU   *-WORK\n* ------------------------------------------------------------------- *\n*              TPX'S SMRT                                             *\n* ------------------------------------------------------------------- *\n         SMRT  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              EXIT PARM LIST                                         *\n* ------------------------------------------------------------------- *\nEXITPARM DSECT\n         COPY  SGNNPARM\n* ------------------------------------------------------------------- *\n*              GLOBAL AREA                                            *\n* ------------------------------------------------------------------- *\n         EXITGBL TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              ACB                                                    *\n* ------------------------------------------------------------------- *\n         IFGACB AM=VTAM\n* ------------------------------------------------------------------- *\n*              EXIT LIST                                              *\n* ------------------------------------------------------------------- *\n         IFGEXLST AM=VTAM\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  EXITINIT\n./ ADD NAME=EXITLERD 0100-95102-95102-1953-00051-00051-00000-TPXEXIT\n         TITLE 'TPX sign on/sign off exit lerad exit'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: EXITLERD - TPX SIGN ON/SIGN OFF EXIT LERAD EXIT       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXITLERD CSECT\nEXITLERD AMODE 31\nEXITLERD RMODE ANY\n         USING EXITLERD,R15          DEFINE BASE\n         B     LERAD010              SKIP ADDRESS AND EYECATCHER\n         DC    CL8'EXITLERD'         MODULE NAME\n         DC    C'&SYSDATE'           DATE OF ASSEMBLY\n         DC    C'&SYSTIME'           TIME OF ASSEMBLY\nLERAD010 DS    0H\n         USING IFGRPL,R1             DEFINE BASE\n         L     R2,RPLAAREA           RPL EXTENSION ADDRESS\n         USING ISTRPL6X,R2           DEFINE BASE\n         LA    R3,GOODRC             GOOD RETURN CODES TABLE\nLERAD020 DS    0H\n         CLI   0(R3),X'FF'           END OF TABLE\n         BE    LERAD030              NO GOOD\n         CLC   RPL6RC,0(R3)          ACCEPTABLE?\n         BE    EXIT0000              YES, EXIT\n         LA    R3,4(R3)              NEXT CODE\n         B     LERAD020              LOOP\nLERAD030 DS    0H\n         L     R4,RPL6RC             MAKE RC EASY TO FIND\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              CONSTANTS                                             *\n*                                                                    *\n* ------------------------------------------------------------------ *\nGOODRC   DS    0C\n         DC    X'00000000'           GOOD\n         DC    X'00000001'           CNOS ACCEPTED BY PARTNER\n         DC    X'FF'\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              EQUATES                                               *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         END  EXITLERD\n./ ADD NAME=EXITLOCK 0100-95102-95102-1953-00100-00100-00000-TPXEXIT\n         TITLE 'EXITLOCK Locked screen call'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: EXITLOCK - locked screen call                         *\n*                                                                     *\n*       At entry R10 will point to the parm list                      *\n*                R11 will point to the SMRT                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLOCK     EXITPRFX 'TPX user exit locked screen processor'\n         USING SMRT,R11              DEFINE BASE\n         USING EXITPARM,R10          DEFINE BASE\n         USING EXITGBL,R9            DEFINE GLOBAL DATA BASE\n         GETMAIN RU,                 ACQUIRE WORK AREA                 +\n               LV=WORKL,             .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R13,4(R1)             SAVE CALLER'S SAVE AREA ADDRESS\n         ST    R1,8(R13)             CHAIN TO CALLER'S SAVE AREA\n         LR    R13,R1                SET WORK AREA BASE\n         USING WORK,R13              DEFINE BASE\n         ITRACE ID=ENTRY\n         L     R8,XUID               USERID ADDRESS\n         SH    R8,=Y(UIDXNAME-UINDEX)\n         USING UINDEX,R8             DEFINE UINDEX BASE\n         L     R7,XNPSWD             ADDRESS OF DATA ENTERED\n         CLC   BLANKS,0(R7)          ANY DATA?\n         BE    EXIT0000              NO.. EXIT\n         CLC   UIDXCHAR(1),0(R7)     EXCAPE CHARACTER?\n         BNE   LOCK0010              NO..\n         CLI   1(R7),C'F'            \"F\" COMMAND?\n         BE    EXIT0004              YES\n         CLI   1(R7),C'K'            \"K\" COMMAND?\n         BE    EXIT0008              YES\nLOCK0010 DS    0H\n         L     R6,XPSWD              LOCK DATA ADDRESS\n         CLC   0(8,R6),0(R7)         CORRECT LOCK DATA?\n         BE    EXIT0000              YES\n         LH    R1,UIDXPATM           NUMBER OF ATTEMPTS\n         LA    R1,1(R1)              PLUS 1\n         STH   R1,UIDXPATM           SAVE COUNT\n         CH    R1,H5                 5TH OR MORE?\n         BNL   EXIT0004              NO\nEXIT0000 DS    0H\n         SR    R2,R2                 SET RETURN CODE\n         B     EXITEXIT\nEXIT0004 DS    0H\n         LA    R2,4                  SET RETURN CODE\n         B     EXITEXIT\nEXIT0008 DS    0H\n         LA    R2,8                  SET RETURN CODE\nEXITEXIT DS    0H\n         LR    R1,R13                COPY WORK AREA ADDRESS\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         FREEMAIN RU,A=(1),LV=WORKL  FREEMAIN WORK AREA\n         LR    R15,R2                COPY RETURN CODE\n         L     R14,12(R13)           RESTORE R14\n         LM    R0,R12,20(R13)        RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nH5       DC    H'5'\nBLANKS   DC    CL8' '\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWORK     DSECT\nWORKSAVE DS    18F\nWORKL    EQU   *-WORK\n* ------------------------------------------------------------------- *\n*              TPX'S SMRT                                             *\n* ------------------------------------------------------------------- *\n         SMRT  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              EXIT PARM LIST                                         *\n* ------------------------------------------------------------------- *\nEXITPARM DSECT\n         COPY  SGNNPARM\n* ------------------------------------------------------------------- *\n*              GLOBAL AREA                                            *\n* ------------------------------------------------------------------- *\n         EXITGBL TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              STC BLOCKS                                             *\n* ------------------------------------------------------------------- *\n         COPY STCDSCT\n* ------------------------------------------------------------------- *\n*              USER INDEX RECORD                                      *\n* ------------------------------------------------------------------- *\n         UINDEX\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  EXITLOCK\n./ ADD NAME=EXITMAIN 0100-95102-95102-1953-00152-00152-00000-TPXEXIT\n         TITLE 'EXITMAIN determine function code, call appropriate modu+\n               le'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: EXITMAIN - TPX logon/logoff user exit mainline        *\n*                                                                     *\n*       AT ENTRY R10 WILL POINT TO THE PARM LIST                      *\n*                R11 WILL POINT TO THE SMRT                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN     EXITPRFX 'TPX logon/logoff user exit mainline'\nEXITMAIN AMODE 31\nEXITMAIN RMODE ANY\n         LR    R8,R0                 COPY FUNCTION CODE\n         LR    R10,R1                COPY PARAMETER LIST ADDRESS\n         USING SMRT,R11              DEFINE BASE\n         USING EXITPARM,R10          DEFINE BASE\n         GETMAIN RU,                 ACQUIRE WORK AREA                 +\n               LV=WORKL,             .. SIZE                           +\n               LOC=ANY               .. FROM ANY AREA\n         ST    R13,4(R1)             SAVE CALLER'S SAVE AREA ADDRESS\n         ST    R1,8(R13)             CHAIN TO CALLER'S SAVE AREA\n         LR    R13,R1                SET WORK AREA BASE\n         USING WORK,R13              DEFINE BASE\n         ICM   R9,15,SMRTUSER        GLOBAL AREA ALREADY PRESENT?\n         BNZ   MAIN0020              YES\n         LOAD  EP=EXITGBL            LOAD THE GLOBAL MODULE\n         LR    R9,R0                 COPY ENTRY POINT\n         ST    R9,SMRTUSER           SET USER AREA ADDRESS IN SMRT\n         L     R0,TRSIZE             TRACE TABLE SIZE\n         GETMAIN RU,                 ACQUIRE TRACE TABLE STORAGE       +\n               LV=(0),               .. SIZE OF AREA                   +\n               LOC=ANY               .. FROM ANY STORAGE AREA\n         ST    R1,TRADDR             SET ADDRESS IN GLOBAL AREA\n         SR    R0,R0                 ASSUME ON A 32-BYTE BOUNDARY\n         TM    TRADDR+3,X'07'        ALREADY ON A 32-BYTE BOUNDARY?\n         BNO   MAIN0010              YES\n         SRL   R1,5                  SHIFT OUT LOW BITS..\n         SLL   R1,5                  .. TO ROUND TO 32-BYTE BOUNDARY\n         LA    R1,TRENTRYL(R1)       PLUS 1 ENTRY LENGTH\n         LA    R0,TRENTRYL           1 LESS TRACE ENTRY AVAILABLE\nMAIN0010 DS    0H\n         ST    R1,TRFIRST            FIRST TRACE ENTRY\n         ST    R1,TRCURR             CURRENT TRACE ENTRY\n         A     R1,TRSIZE             PLUS TABLE SIZE\n         SH    R1,=Y(TRENTRYL)       MINUS 1 ENTRY\n         SR    R1,R0                 MINUS 1 MORE IF ROUNDED\n         ST    R1,TRLAST             SAVE LAST TRACE ENTRY ADDRESS\n         ITRACE ID=INIT,             INITIALIAL TRACE ENTRY            +\n               RDATA1=R9             .. GLOBAL AREA ADDRESS\n         MVI   GBLSTAT,0             CLEAR ALL STATUS INDICATORS\n         MVI   GBLERROR,0            CLEAR ALL ERROR INDICATORS\n         LOAD  EP=EXITPARM           LOAD PARAMETER READER\n         LR    R15,R0                COPY ENTRY POINT ADDRESS\n         BALR  R14,R15               CALL PARAMETER READER\n         DELETE EP=EXITPARM\nMAIN0020 DS    0H\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R8             .. SAVE CALL CODE\n         SR    R7,R7                 DEFAULT RC IS ZERO\n*---------------------------------------------------------------------*\n*        Determine function and link to processor                     *\n*---------------------------------------------------------------------*\n         LA    R1,FUNCTBLE           FUNCTION CODE/PROCESSOR TABLE\n         USING FUNCDSCT,R1           DEFINE BASE\nMAIN0110 DS    0H\n         CLI   FUNCCODE,X'FF'        END OF TABLE?\n         BE    EXIT0000              YES.. EXIT\n         CLM   R8,1,FUNCCODE         FUNCTION CODE LOCATED?\n         BE    MAIN0120              YES\n         LA    R1,FUNCL(R1)          NEXT FUNCTION\n         B     MAIN0110              LOOP\nMAIN0120 DS    0H\n         ICM   R15,15,FUNCADDR       FUNCTION PROCESSOR ENTRY POINT\n         BALR  R14,R15               LINK TO PROCESSOR\n         LR    R7,R15                COPY RETURN CODE\nEXIT0000 DS    0H\n         CLM   R8,1,SHUTCODE         IS IT 'SHUTDOWN' TIME?\n         BNE   EXIT0030              NO\n         ICM   R2,15,GBLSTC          FIRST STC BLOCK'S ADDRESS\n         USING STCDSCT,R2            DEFINE BASE\n         BZ    EXIT0020              NO STC BLOCKS\nEXIT0010 DS    0H\n         LR    R1,R2                 COPY STC BLOCK ADDRESS\n         L     R2,STCNEXT            NEXT STC BLOCK'S ADDRESS\n         FREEMAIN RU,A=(1),LV=STCDSCTL\n         CLM   R2,15,GBLSTC          POINTING BACK TO 1ST BLOCK?\n         BNE   EXIT0010              NO\nEXIT0020 DS    0H\n         L     R1,TRADDR             TRACE TABLE'S ADDRESS\n         L     R0,TRSIZE             TRACE TABLE'S SIZE\n         FREEMAIN RU,A=(1),LV=(0)    FREE TRACE TABLE\n         DELETE EP=EXITGBL           DELETE GLOBAL MODULE\nEXIT0030 DS    0H\n         LR    R1,R13                COPY WORK AREA ADDRESS\n         L     R13,4(R13)            RESTORE CALLER'S SAVE AREA ADDRESS\n         FREEMAIN RU,A=(1),LV=WORKL  FREEMAIN WORK AREA\n         LR    R15,R7                COPY RETURN CODE\n         L     R14,12(R13)           RESTORE R14\n         LM    R0,R12,20(R13)        RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTRSIZE   DC    A(1000*TRENTRYL)      SIZE OF TRACE TABLE\nFUNCTBLE DS    0C\n         DC    AL1(00),VL4(EXITINIT) INITIALIZATION\n         DC    AL1(08),VL4(EXITPRE)  PRE-SECURITY\n         DC    AL1(12),VL4(EXITSEC)  SECURITY\nSHUTCODE DC    AL1(36),VL4(EXITTERM) TERMINATION\n         DC    AL1(48),VL4(EXITLOCK) LOCKED TERMINAL\n         DC    X'FF'\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWORK     DSECT\nWORKSAVE DS    18F\nWORKL    EQU   *-WORK\n* ------------------------------------------------------------------- *\n*              FUNCTION TABLE                                         *\n* ------------------------------------------------------------------- *\nFUNCDSCT DSECT\nFUNCCODE DS    AL1              FUNCTION CODE\nFUNCADDR DS    AL4              FUNCTION PROCESSOR ENTRY POINT\nFUNCL    EQU   *-FUNCDSCT\n* ------------------------------------------------------------------- *\n*              TPX'S SMRT                                             *\n* ------------------------------------------------------------------- *\n         SMRT  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              EXIT PARM LIST                                         *\n* ------------------------------------------------------------------- *\nEXITPARM DSECT\n         COPY  SGNNPARM\n* ------------------------------------------------------------------- *\n*              GLOBAL AREA                                            *\n* ------------------------------------------------------------------- *\n         EXITGBL TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              STC BLOCKS                                             *\n* ------------------------------------------------------------------- *\n         COPY  STCDSCT\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  EXITMAIN\n./ ADD NAME=EXITPARM 0100-95102-95102-1953-00316-00316-00000-TPXEXIT\n         TITLE 'EXITPARM   PARM MODULE'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: EXITPARM - PARAMETER INTERPRETER                      *\n*                                                                     *\n*  Function:                                                          *\n*   Parm reader module.  EXITMAIN LOADs and links to this module on   *\n*   the 'initialize' call.  All parameters are processed via this     *\n*   module.  All indicators and parameter values are set in fields    *\n*   in EXITGBL.   If any serious errors are detected $ABORT is set.   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARM     EXITPRFX 'TPX user exit parameter reader'\nEXITPARM AMODE 31\nEXITPARM RMODE 24\n         GETMAIN RU,                 ACQUIRE WORK AREA STORAGE         +\n               LV=WORKL,             .. WORK AREA SIZE                 +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R13,4(R1)             SAVE CALLER'S SAVE AREA ADDRESS\n         ST    R1,8(R13)             CHAIN NEW WORK AREA TO CALLER'S\n         LR    R13,R1                SAVE WORK AREA STORAGE\n         USING WORK,R13              DEFINE WORK AREA BASE\n         ITRACE ID=INIT\n         MVI   PBLANK,C' '           INITIALIZE BLANK\n         MVC   WORKIN(SYSINL),SYSIN      COPY DCB TO WORK AREA\n         MVC   WORKPRT(SYSPRTL),SYSPRT   COPY DCB TO WORK AREA\n         MVC   WORKOC(OPENIL),OPENII COPY OPEN LIST FORM\n         LA    R7,WORKIN             DCB'S ADDRESS\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         OPEN  ((R7)),MF=(E,WORKOC)  OPEN THE DCB\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         MVC   WORKOC(OPENIL),OPENOI COPY OPEN LIST FORM\n         LA    R6,WORKPRT            DCB'S ADDRESS\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         OPEN  ((R6)),MF=(E,WORKOC)  OPEN THE DCB\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\nPARM0020 DS    0H\n         ITRACE ID=READCARD\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         GET   (R7),WORKIO           READ A CONTROL STATEMENT\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         MVC   PLINE(MSG01L),MSG01\n         MVC   PLINE+(MSG01D-MSG01)(L'MSG01D),WORKIO\n         BAL   R8,PRT0000            PRINT PARAMETER STATEMENT\n         CLI   WORKIO,C'*'           COMMENT STATEMENT?\n         BE    PARM0020              YES\n         CLC   EXITAPPL,WORKIO       EXITAPPL STATEMENT?\n         BE    APPL0000              YES\n         CLC   STCAPPL,WORKIO        STCAPPL STATEMENT?\n         BE    APPL1000              YES\n         MVC   PLINE(MSG02L),MSG02\n         BAL   R8,PRT0000            PRINT ERROR MESSAGE\n         B     PARM0020              READ NEXT STATEMENT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PROCESS EXITAPPL STATEMENT                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\nAPPL0000 DS    0H\n         ITRACE ID=EXITAPPL          PROCESSING EXITAPPL STATEMENT\n         CLC   GBLAPPN,COMMBLKS      EXITAPPL PROCESSED ALREADY?\n         BNE   APPL0030              YES.. DON'T ALLOW IT TWICE\n         LA    R1,WORKIO+L'EXITAPPL  FIRST CHARACTER OF EXITAPPL\n         CLI   0(R1),C' '            FIRST CHARACTER BLANK?\n         BE    APPL0040              YES.. NOT VALID\n         LA    R2,GBLAPPN            EXITAPPL IN COMM AREA\n         SR    R3,R3                 CLEAR FOR LENGTH OF EXITAPPL\n         LA    R4,8                  MAXIMUM LENGTH OF EXITAPPL\nAPPL0010 DS    0H\n         CLI   0(R1),C' '            END OF NAME REACHED?\n         BE    APPL0020              YES\n         MVC   0(1,R2),0(R1)         COPY TO COMM AREA\n         LA    R1,1(R1)              NEXT\n         LA    R2,1(R2)              NEXT\n         LA    R3,1(R3)              LENGTH = LENGTH + 1\n         BCT   R4,APPL0010           LOOP\n         CLI   0(R1),C' '            BLANK?\n         BNE   APPL0050              NO.. NAME IS TOO LONG\nAPPL0020 DS    0H\n         STC   R3,GBLAPPL            SET EXITAPPL LENGTH\n         MVC   PLINE(MSG03L),MSG03\n         BAL   R8,PRT0000            PRINT MESSAGE\n         B     PARM0020              READ NEXT CONTROL STATEMENT\nAPPL0030 DS    0H\n         ITRACE ID=DUPEAPPL\n         MVC   PLINE(MSG04L),MSG04\n         BAL   R8,PRT0000            PRINT MESSAGE\n         B     PARM0020              READ NEXT CONTROL STATEMENT\nAPPL0040 DS    0H\n         ITRACE ID=BLNKEAPL\n         MVC   PLINE(MSG05L),MSG05\n         BAL   R8,PRT0000            PRINT MESSAGE\n         B     PARM0020              READ NEXT CONTROL STATEMENT\nAPPL0050 DS    0H\n         ITRACE ID=LONGEAPL\n         MVC   PLINE(MSG06L),MSG06\n         BAL   R8,PRT0000            PRINT MESSAGE\n         B     PARM0020              READ NEXT CONTROL STATEMENT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PROCESS STCAPPL STATEMENT                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nAPPL1000 DS    0H\n         ITRACE ID=STCAPPL           PROCESSING STCAPPL STATEMENT\n         LA    R1,WORKIO+L'STCAPPL   FIRST CHARACTER OF STCAPPL\n         CLI   0(R1),C' '            FIRST CHARACTER BLANK?\n         BE    APPL1050              YES.. NOT VALID\n         MVC   WORKNAME,COMMBLKS     INITIALIZE APPLID\n         LA    R2,WORKNAME           STC APPL IN WORK AREA\n         SR    R3,R3                 CLEAR FOR LENGTH OF STCAPPL\n         LA    R4,8                  MAXIMUM LENGTH OF STCAPPL\nAPPL1010 DS    0H\n         CLI   0(R1),C' '            END OF NAME REACHED?\n         BE    APPL1020              YES\n         MVC   0(1,R2),0(R1)         COPY TO WORK AREA\n         LA    R1,1(R1)              NEXT\n         LA    R2,1(R2)              NEXT\n         LA    R3,1(R3)              LENGTH = LENGTH + 1\n         BCT   R4,APPL1010           LOOP\n         CLI   0(R1),C' '            BLANK?\n         BNE   APPL1060              NO.. NAME IS TOO LONG\nAPPL1020 DS    0H\n         LA    R2,GBLSTC             STC CHAIN ANCHOR ADDRESS\nAPPL1030 DS    0H\n         ICM   R4,15,0(R2)           NEXT STC BLOCK ADDRESS\n         USING STCDSCT,R4            DEFINE BASE\n         BZ    APPL1040              NO BLOCKS ON CHAIN\n         LA    R2,STCNEXT            NEXT STC BLOCK\n         CLM   R4,15,GBLSTC          POINT BACK TO FIRST BLOCK?\n         BNE   APPL1030              NO\nAPPL1040 DS    0H\n         GETMAIN RU,                 ACQUIRE NEW STC BLOCK             +\n               LV=STCDSCTL,          .. AREA SIZE                      +\n               LOC=ANY               .. FROM ANY AREA\n         ITRACE ID=NEWSTC,           TRACE NEW STC BLOCK'S             +\n               RDATA1=R1             .. AREA ADDRESS\n         ST    R1,0(R2)              CHAIN NEW BLOCK TO PREVIOUS\n         LR    R4,R1                 COPY BASE\n         XC    STCDSCT(STCDSCTL),STCDSCT\n         MVC   STCNEXT,GBLSTC        POINT BACK TO FIRST BLOCK\n         MVI   STCFLAG,0             INITIALIZE FLAGS\n         STC   R3,STCNAMEL           SET STC APPLID  LENGTH\n         MVC   STCNAME,WORKNAME      SET STC APPLID\n         MVC   PLINE(MSG13L),MSG13\n         BAL   R8,PRT0000            PRINT MESSAGE\n         B     PARM0020              READ NEXT CONTROL STATEMENT\nAPPL1050 DS    0H\n         ITRACE ID=BLNKSAPL\n         MVC   PLINE(MSG14L),MSG14\n         BAL   R8,PRT0000            PRINT MESSAGE\n         B     PARM0020              READ NEXT CONTROL STATEMENT\nAPPL1060 DS    0H\n         ITRACE ID=LONGSAPL\n         MVC   PLINE(MSG15L),MSG15\n         BAL   R8,PRT0000            PRINT MESSAGE\n         B     PARM0020              READ NEXT CONTROL STATEMENT\n* ------------------------------------------------------------------- *\n*             CLOSE READER DCB                                        *\n* ------------------------------------------------------------------- *\nPARM9000 DS    0H\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         ITRACE ID=CARDEOF           EOF ON SYSIN\n         MVC   PLINE(MSG20L),MSG20\n         BAL   R8,PRT0000            PRINT MESSAGE\n         MVC   WORKOC(CLOSEL),CLOSEI COPY CLOSE LIST FORM\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         CLOSE ((R7)),MF=(E,WORKOC)  CLOSE SYSIN DCB\n         CLOSE ((R6)),MF=(E,WORKOC)  CLOSE SYSPRINT DCB\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         ITRACE ID=EXIT\n         LR    R1,R13                SAVE WORK AREA ADDRESS\n         L     R13,4(R13)            RESTORE CALLER'S SAVE AREA ADDRESS\n         FREEMAIN RU,A=(1),LV=WORKL  FREE WORK AREA\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         SR    R15,R15               SET RETURN CODE\n         BR    R14                   AND EXIT\n* ------------------------------------------------------------------- *\n*             PRINTING                                                *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         ITRACE ID=PRINT\n         BAL   R15,AM24\n         PUT   (R6),PLINE            WRITE\n         BAL   R15,AM31\n         MVC   PLINE,PLINE-1         CLEAR PRINT AREA\n         BR    R8                    RETURN\n* ------------------------------------------------------------------- *\n*             ADDRESS MODE SWITCHING                                  *\n* ------------------------------------------------------------------- *\nAM24     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         BSM   R0,R15                RETURN IN 24-BIT MODE\nAM31     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         O     R15,X80               SET HIGH BIT\n         BSM   R0,R15                RETURN IN 31-BIT MODE\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        CONSTANTS                                                   *\n*                                                                    *\n* ------------------------------------------------------------------ *\nX80      DC    A(X'80000000')\nSYSIN    DCB   DSORG=PS,                                               +\n               DDNAME=EXITIN,                                          +\n               RECFM=FB,                                               +\n               LRECL=80,                                               +\n               EODAD=PARM9000,                                         +\n               MACRF=GM\nSYSINL   EQU   *-SYSIN\nSYSPRT   DCB   DSORG=PS,                                               +\n               DDNAME=EXITPRT,                                         +\n               RECFM=FB,                                               +\n               LRECL=121,                                              +\n               MACRF=PM\nSYSPRTL  EQU   *-SYSPRT\nOPENII   OPEN  (SYSIN,INPUT),                                          +\n               MF=L\nOPENIL   EQU   *-OPENII\nOPENOI   OPEN  (SYSPRT,OUTPUT),                                        +\n               MF=L\nOPENOL   EQU   *-OPENOI\nCLOSEI   CLOSE (SYSIN)                                                 +\n               MF=L\nCLOSEL   EQU   *-CLOSEI\nEXITAPPL DC    C'EXITAPPL='\nSTCAPPL  DC    C'STCAPPL='\nMSG01    DS    0C\n         DC    CL11'EXITPARM01I'\n         DC    C' '\n         DC    C'Parameter statement: '\nMSG01D   DC    CL80' '\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'EXITPARM02E'\n         DC    C' '\n         DC    C'Invalid control statement'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'EXITPARM03I'\n         DC    C' '\n         DC    C'EXITAPPL statement processed successfully'\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    CL11'EXITPARM04E'\n         DC    C' '\n         DC    C'EXITAPPL has already been defined'\nMSG04L   EQU   *-MSG04\nMSG05    DS    0C\n         DC    CL11'EXITPARM05E'\n         DC    C' '\n         DC    C'First character of EXITAPPL is blank'\nMSG05L   EQU   *-MSG05\nMSG06    DS    0C\n         DC    CL11'EXITPARM06E'\n         DC    C' '\n         DC    C'EXITAPPL is too long (8 characters max)'\nMSG06L   EQU   *-MSG06\nMSG13    DS    0C\n         DC    CL11'EXITPARM13I'\n         DC    C' '\n         DC    C'STCAPPL statement processed successfully'\nMSG13L   EQU   *-MSG13\nMSG14    DS    0C\n         DC    CL11'EXITPARM14E'\n         DC    C' '\n         DC    C'First character of STCAPPL is blank'\nMSG14L   EQU   *-MSG14\nMSG15    DS    0C\n         DC    CL11'EXITPARM15E'\n         DC    C' '\n         DC    C'STCAPPL is too long (8 characters max)'\nMSG15L   EQU   *-MSG15\nMSG20    DS    0C\n         DC    CL11'EXITPARM20I'\n         DC    C' '\n         DC    C'All parameters processed'\nMSG20L   EQU   *-MSG20\n         LTORG\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        WORK AREAS                                                  *\n*                                                                    *\n* ------------------------------------------------------------------ *\nWORK     DSECT\nWORKSAVE DS    18F                   REGISTER SAVE AREA\nWORKIN   DS    (SYSINL)X             DCB\nWORKPRT  DS    (SYSPRTL)X            DCB\nWORKOC   DS    (OPENIL)X             OPEN/CLOSE WORK AREA\nWORKIO   DS    0CL80                 CARD I/O AREA\nWORKIO01 DS    CL9\nWORKIO10 DS    CL10\nWORKIO20 DS    CL10\nWORKIO30 DS    CL10\nWORKIO40 DS    CL10\nWORKIO50 DS    CL10\nWORKIO60 DS    CL10\nWORKIO70 DS    CL10\nWORKIO80 DS    C\nWORKNAME DS    CL8\nPBLANK   DS    C\nPLINE    DS    CL121\nWORKL    EQU   *-WORK\n* ------------------------------------------------------------------ *\n*              COMMON DATA MAP                                       *\n* ------------------------------------------------------------------ *\n         EXITGBL TYPE=DSECT\n* ------------------------------------------------------------------ *\n*              STC BLOCK                                             *\n* ------------------------------------------------------------------ *\n         COPY  STCDSCT\n* ------------------------------------------------------------------ *\n*              EQUATES                                               *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         END  EXITPARM\n./ ADD NAME=EXITPRE  0100-95102-95102-1953-00291-00291-00000-TPXEXIT\n         TITLE 'EXITPRE pre-security call'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: EXITPRE - Pre security exit                           *\n*                                                                     *\n*       AT ENTRY R10 WILL POINT TO THE PARM LIST                      *\n*                R11 WILL POINT TO THE SMRT                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRE      EXITPRFX 'TPX user exit PRE-SECURITY call processor'\n         USING SMRT,R11              DEFINE BASE\n         USING EXITPARM,R10          DEFINE BASE\n         GETMAIN RU,                 ACQUIRE WORK AREA                 +\n               LV=WORKL,             .. SIZE                           +\n               LOC=ANY               .. FROM ANY AREA\n         ST    R13,4(R1)             SAVE CALLER'S SAVE AREA ADDRESS\n         ST    R1,8(R13)             CHAIN TO CALLER'S SAVE AREA\n         LR    R13,R1                SET WORK AREA BASE\n         USING WORK,R13              DEFINE BASE\n         MVC   WORKWTO(WTOL),WTOI    INITIALIZE WTO\n         ITRACE ID=ENTRY,                                              +\n               DATA1=GBLSTAT,        .. STATUS BYTE                    +\n               DATA2=GBLERROR        .. ERROR BYTE\n         L     R9,SMRTUSER           OUR GLOBAL AREA STORAGE ADDRESS\n         USING EXITGBL,R9            DEFINE GLOBAL DATA BASE\n         L     R8,XUIDX              USER INDEX RECORD ADDRESS\n         USING UINDEX,R8             DEFINE BASE\n         L     R7,GBLSTC             CURRENT STC BLOCK\n         USING STCDSCT,R7            DEFINE BASE\n         STCK  WORKSTCK              SAVE TIME STAMP\n         CLI   GBLERROR,0            ANY ERRORS?\n         BNE   PRE0110               YES.. USE RACF\n         TM    STCFLAG,$STCCNOS      HAS CNOS BEEN ISSUED?\n         BNO   PRE0010               NO\n         TM    STCFLAG,$STCERR       ANY ERRORS?\n         BNO   PRE0040               NO.. LINK STILL ACTIVE\n* ------------------------------------------------------------------- *\n*    CURRENT LINK HAS HAD SOME TYPE OF FAILURE, TRY TO RE-ESTABLISH   *\n* ------------------------------------------------------------------- *\n         ITRACE ID=RETRY             TRY TO RE-ESTABLISH A LINK\nPRE0010  DS    0H\n         LA    R0,RPLL               RPL SIZE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL           +\n               LV=(0),               .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R6,R1                 SAVE RPL'S ADDRESS\n         MVC   0(RPLL,R6),RPLI       INITIALIZE RPL\n         USING IFGRPL,R6             DEFINE BASE\n         LA    R0,RPLEXTL            RPL EXTENSION SIZE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL EXTENSION +\n               LV=(0),               .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R5,R1                 COPY RPL EXTENSION'S ADDRESS\n         MVC   0(RPLEXTL,R5),RPLEXTI INITIALIZE RPL EXTENSION\n         USING ISTRPL6X,R5           DEFINE BASE\n         ST    R5,RPLAAREA           SET RPL EXTENSION'S ADDRESS\n         LA    R0,GBLACB             ACB'S ADDRESS\n         ST    R0,RPLDACB            SET ACB'S ADDRESS IN RPL\n         LA    R0,NIBL               NIB'S SIZE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR NIB           +\n               LV=(0),               .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R4,R1                 COPY NIB'S ADDRESS\n         MVC   0(NIBL,R4),NIBI       INITIALIZE NIB\n         USING ISTDNIB,R4            DEFINE BASE\nPRE0020  DS    0H\n         CLC   STCSTCK,WORKSTCK      ALREADY TRIED ONCE?\n         BE    PRE0100               YES.. SWITCH TO RACF\n         MVC   STCSTCK,WORKSTCK      CHANGE TIME STAMP\n         NI    STCFLAG,255-$STCERR-$STCXRDY\n         MVC   NIBSYM,STCNAME        SET PARTNER'S LU NAME\n         MVC   RPL6LU,STCNAME        SET PARTNER'S LU NAME\n         INQUIRE RPL=(R6),           ISSUE AN INQUIRE                  +\n               NIB=(R4),             .. NIB'S ADDRESS                  +\n               OPTCD=(APPSTAT,SYN)   .. WE WANT PARTNER'S STATUS\n         ITRACE ID=INQRC,                                              +\n               DATA1=RPLFDBK,        .. RPL FEEDBACK                   +\n               DATA2=RPLFDB3         .. READY-OR-NOT INDICATOR\n         CLC   X144C,RPLFDBK         UNDEFINED APPLICATION?\n         BE    PRE0050               NOT DEFINED\n         CLI   RPLFDB3,0             STC READY?\n         BNE   PRE0060               NO\n         TM    STCFLAG,$STCCNOS      CNOS COMPLETED?\n         BO    PRE0030               YES\n         SR    R2,R2                 CLEAR R2\n         APPCCMD CONTROL=OPRCNTL,    ISSUE APPC COMMAND                +\n               QUALIFY=CNOS,         .. CHANGE NUMBER OF SESSIONS      +\n               AREA=(R2),            .. AREA (SET TO ZERO)             +\n               RPL=(R6),             .. RPL ADDRESS                    +\n               LOGMODE=LU62P,        .. LOGMODE                        +\n               OPTCD=SYN             .. SYNCHRONOUSLY\n         ITRACE ID=CNOSRC,                                             +\n               DATA1=RPL6RC          .. RETURN CODES\n         CLC   RPL6RC,X0000001       CNOS ACCEPTED?\n         BNE   PRE0070               NO\n         OI    STCFLAG,$STCCNOS      CNOS COMPLETED\nPRE0030  DS    0H\n         MVC   WORKFMH5(FMH5L),FMH5  COPY FMH-5 TO WORK AREA\n         APPCCMD CONTROL=ALLOC,      ISSUE APPC COMMAND                +\n               QUALIFY=ALLOCD,       .. ALLOCATE A CONVERSATION        +\n               RPL=(R6),             .. RPL'S ADDRESS                  +\n               AREA=WORKFMH5,        .. I/O AREA IS THE FMH            +\n               RECLEN=FMH5L,         .. I/O AREA SIZE                  +\n               LOGMODE=LU62P         .. LOGMODE\n         ITRACE ID=ALLOCRC,                                            +\n               DATA1=RPL6RC          .. RETURN CODE\n         OC    RPL6RC,RPL6RC         ALLOCATE SUCCESSFUL?\n         BNZ   PRE0080               NO\n         ST    R7,GBLSTC             SET CURRENT STC BLOCK ADDRESS\n         MVC   GBLCID,RPL6CNVD       SAVE CONVERSATION ID\n         LA    R2,WORKWTO            SET BASE\n         USING WPL,R2                DEFINE BASE\n         MVC   WPLTXT(80),COMMBLKS   CLEAR ALL TEXT\n         MVC   WPLTXT(WTO01L),WTO01  COPY WTO TO WORK AREA\n         MVC   WPLTXT+(WTO01LU-WTO01)(L'WTO01LU),RPL6LU\n         WTO   MF=(E,(R2))           ISSUE WTO\n         FREEMAIN RU,A=(R6),LV=RPLL    FREEMAIN RPL\n         FREEMAIN RU,A=(R5),LV=RPLEXTL FREEMAIN RPL EXTENSION\n         FREEMAIN RU,A=(R4),LV=NIBL    FREEMAIN NIB\nPRE0040  DS    0H\n         ITRACE ID=USER\n         MVI   UIDXSCTY,SECUSER      CHANGE SECURITY TO USER\n         B     EXIT0000              EXIT\nPRE0050  DS    0H\n         ITRACE ID=NOTDEF            CURRENT STC NAME NOT DEFINED\n         OI    STCFLAG,$STCERR       INDICATE ERROR\n         LA    R2,WORKWTO            SET BASE\n         MVC   WPLTXT(80),COMMBLKS   CLEAR ALL TEXT\n         MVC   WPLTXT(WTO02L),WTO02  COPY WTO TO WORK AREA\n         MVC   WPLTXT+(WTO02LU-WTO02)(L'WTO02LU),RPL6LU\n         WTO   MF=(E,(R2))           ISSUE WTO\n         B     PRE0090\nPRE0060  DS    0H\n         ITRACE ID=NOTREADY          CURRENT STC NAME NOT READY\n         OI    STCFLAG,$STCXRDY+$STCERR   SET 'NOT READY' AND 'ERROR'\n         NI    STCFLAG,255-$STCCNOS  RESET 'CNOS' COMPLETE\n         LA    R2,WORKWTO            SET BASE\n         MVC   WPLTXT(80),COMMBLKS   CLEAR ALL TEXT\n         MVC   WPLTXT(WTO03L),WTO03  COPY WTO TO WORK AREA\n         MVC   WPLTXT+(WTO03LU-WTO03)(L'WTO03LU),RPL6LU\n         WTO   MF=(E,(R2))           ISSUE WTO\n         B     PRE0090\nPRE0070  DS    0H\n         ITRACE ID=BADCNOS           CNOS NOT ACCEPTED\n         OI    STCFLAG,$STCERR       INDICATE ERROR\n         LA    R2,WORKWTO            SET BASE\n         USING WPL,R2                DEFINE BASE\n         MVC   WPLTXT(80),COMMBLKS   CLEAR ALL TEXT\n         MVC   WPLTXT(WTO04L),WTO04  COPY WTO TO WORK AREA\n         MVC   WPLTXT+(WTO04LU-WTO04)(L'WTO04LU),RPL6LU\n         UNPK  WPLTXT+(WTO04RC-WTO04)(9),RPL6RC(5)\n         MVZ   WPLTXT+(WTO04RC-WTO04)(8),HEX0F0F\n         TR    WPLTXT+(WTO04RC-WTO04)(8),HEXCHAR\n         MVI   WPLTXT+(WTO04RC-WTO04)+8,C' '\n         WTO   MF=(E,(R2))           ISSUE WTO\n         B     PRE0090\nPRE0080  DS    0H\n         ITRACE ID=BADALOC           ALLOCD NOT ACCEPTED\n         OI    STCFLAG,$STCERR       INDICATE ERROR\n         LA    R2,WORKWTO            SET BASE\n         MVC   WPLTXT(80),COMMBLKS   CLEAR ALL TEXT\n         MVC   WPLTXT(WTO05L),WTO05  COPY WTO TO WORK AREA\n         MVC   WPLTXT+(WTO05LU-WTO05)(L'WTO05LU),RPL6LU\n         UNPK  WPLTXT+(WTO05RC-WTO05)(9),RPL6RC(5)\n         MVZ   WPLTXT+(WTO05RC-WTO05)(8),HEX0F0F\n         TR    WPLTXT+(WTO05RC-WTO05)(8),HEXCHAR\n         MVI   WPLTXT+(WTO05RC-WTO05)+8,C' '\n         WTO   MF=(E,(R2))           ISSUE WTO\nPRE0090  DS    0H\n         ICM   R7,15,STCNEXT         NEXT STC BLOCK\n         B     PRE0020               TRY THIS ONE\nPRE0100  DS    0H\n         FREEMAIN RU,A=(R6),LV=RPLL    FREEMAIN RPL\n         FREEMAIN RU,A=(R5),LV=RPLEXTL FREEMAIN RPL EXTENSION\n         FREEMAIN RU,A=(R4),LV=NIBL    FREEMAIN NIB\nPRE0110  DS    0H\n         ITRACE ID=RACF\n         MVI   UIDXSCTY,SECRACF      CHANGE SECURITY TO RACF\n         B     EXIT0000              AND EXIT\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         LR    R1,R13                COPY WORK AREA ADDRESS\n         L     R13,4(R13)            RESTORE CALLER'S SAVE AREA ADDRESS\n         FREEMAIN RU,A=(1),LV=WORKL  FREEMAIN WORK AREA\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         SR    R15,R15               SET RETURN CODE\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWTOI     WTO   '                                                       +\n                                     ',                                +\n               MF=L\nWTOL     EQU   *-WTOI\nWTO01    DS    0C\n         DC    C'TPXEXITPRE01I LINK ESTABLISHED TO '\nWTO01LU  DC    CL8' '\nWTO01L   EQU   *-WTO01\nWTO02    DS    0C\n         DC    C'TPXEXITPRE02I STC LU '\nWTO02LU  DC    CL8' '\n         DC    C' IS NOT DEFINED TO VTAM'\nWTO02L   EQU   *-WTO02\nWTO03    DS    0C\n         DC    C'TPXEXITPRE03I STC LU '\nWTO03LU  DC    CL8' '\n         DC    C' IS NOT READY'\nWTO03L   EQU   *-WTO03\nWTO04    DS    0C\n         DC    C'TPXEXITPRE04I CNOS FAILED TO '\nWTO04LU  DC    CL8' '\n         DC    C' RC='\nWTO04RC  DC    CL8' '\n         DC    C' '\nWTO04L   EQU   *-WTO04\nWTO05    DS    0C\n         DC    C'TPXEXITPRE05I ALLOCD FAILED WITH '\nWTO05LU  DC    CL8' '\n         DC    C' RC='\nWTO05RC  DC    CL8' '\n         DC    C' '\nWTO05L   EQU   *-WTO05\nHEX0F0F  DC    8X'0F'\nHEXCHAR  DC    C'0123456789ABCDEF'\nX144C    DC    X'144C'\nX0000001 DC    X'00000001'\nRPLI     RPL   AM=VTAM,                                                +\n               AAREA=RPLEXTI\nRPLL     EQU   *-RPLI\nRPLEXTI  ISTRPL6\nRPLEXTL  EQU   *-RPLEXTI\nNIBI     NIB   MODE=RECORD,                                            +\n               NAME=TPX\nNIBL     EQU   *-NIBI\n         FMH5  DSECT=NO,TRAN=TPXEXIT\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWORK     DSECT\nWORKSAVE DS   18F\nWORKSTCK DS   D\nWORKWTO  DS   (WTOL)X\nWORKFMH5 DS   (FMH5L)X\nWORKL    EQU  *-WORK\n* ------------------------------------------------------------------- *\n*              TPX'S SMRT                                             *\n* ------------------------------------------------------------------- *\n         SMRT  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              EXIT PARM LIST                                         *\n* ------------------------------------------------------------------- *\nEXITPARM DSECT\n         COPY  SGNNPARM\n* ------------------------------------------------------------------- *\n*              GLOBAL AREA                                            *\n* ------------------------------------------------------------------- *\n         EXITGBL TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              STC BLOCKS                                             *\n* ------------------------------------------------------------------- *\n         COPY STCDSCT\n* ------------------------------------------------------------------- *\n*              USER INDEX RECORD                                      *\n* ------------------------------------------------------------------- *\n         UINDEX\n* ------------------------------------------------------------------- *\n*              ACB                                                    *\n* ------------------------------------------------------------------- *\n         IFGACB AM=VTAM\n* ------------------------------------------------------------------- *\n*              RPL                                                    *\n* ------------------------------------------------------------------- *\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------- *\n*              NIB                                                    *\n* ------------------------------------------------------------------- *\n         ISTDNIB\n* ------------------------------------------------------------------- *\n*              WTO                                                    *\n* ------------------------------------------------------------------- *\n         IEZWPL\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  EXITPRE\n./ ADD NAME=EXITSEC  0100-95102-95102-1953-00465-00465-00000-TPXEXIT\n         TITLE 'EXITSEC Security call'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: EXITSEC -  Security call                              *\n*                                                                     *\n*       AT ENTRY R10 WILL POINT TO THE PARM LIST                      *\n*                R11 WILL POINT TO THE SMRT                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSEC      EXITPRFX 'TPX user exit security call processor'\n         USING SMRT,R11              DEFINE BASE\n         USING EXITPARM,R10          DEFINE BASE\n         USING EXITGBL,R9            DEFINE GLOBAL DATA BASE\n         GETMAIN RU,                 ACQUIRE WORK AREA                 +\n               LV=WORKL,             .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R13,4(R1)             SAVE CALLER'S SAVE AREA ADDRESS\n         ST    R1,8(R13)             CHAIN TO CALLER'S SAVE AREA\n         LR    R13,R1                SET WORK AREA BASE\n         USING WORK,R13              DEFINE BASE\n         ITRACE ID=ENTRY\n         L     R7,GBLSTC             STC BLOCK IN USE\n         USING STCDSCT,R7            DEFINE BASE\n         CLI   GBLERROR,0            ANY ERRORS?\n         BNE   EXIT0000              YES\n         TM    STCFLAG,$STCERR       ERROR ON THE LINK?\n         BO    EXIT0000              YES\n         TM    STCFLAG,$STCCNOS      CNOS ISSUED?\n         BNO   EXIT0000              NO..\n* ------------------------------------------------------------------- *\n*              Build \"AUTHREC\"                                        *\n* ------------------------------------------------------------------- *\n         MVC   WORKRPL(RPLL),RPLI    INITIALIZE RPL\n         MVC   WORKRPLX(RPLXL),RPLXI INITIALIZE RPL EXTENSION\n         LA    R8,GBLACB             ACB'S ADDRESS\n         LA    R6,WORKRPL            RPL'S ADDRESS\n         USING IFGRPL,R6             DEFINE BASE\n         ST    R8,RPLDACB            SET ACB ADDRESS IN RPL\n         LA    R5,WORKRPLX           RPL EXTENSION'S ADDRESS\n         USING ISTRPL6X,R5           DEFINE BASE\n         ST    R5,RPLAAREA           SET RPL EXTENSION'S ADDRESS IN RPL\n         MVC   RPL6LU,STCNAME        SET PARTNER'S LU NAME\n         LA    R2,AUTHRECL           RECORD SIZE\n         STH   R2,AUTHLL             SET RECORD SIZE\n         MVC   AUTHAUTH,AUTHID       SET RECORD IDENTIFIER\n         L     R1,XUID               USER ID'S ADDRESS\n         MVC   AUTHUID,0(R1)         COPY USERID\n         L     R1,XPSWD              PASSWORD'S ADDRESS\n         MVC   AUTHPSWD,0(R1)        COPY PASSWORD\n         L     R1,XNPSWD             NEW PASSWORD'S ADDRESS\n         MVC   AUTHNPSW,0(R1)        COPY NEW PASSWORD\n         LA    R1,AUTHUID            FIRST BYTE OF ID\n         LA    R14,8                 MAXIMUM LOOPS\n         SR    R15,R15               CLEAR FOR LENGTH\nSEC0050  DS    0H\n         CLI   0(R1),C' '            BLANK?\n         BE    SEC0060               YES\n         LA    R1,1(R1)              NEXT BYTE\n         LA    R15,1(R15)            ADD 1 TO LENGTH\n         BCT   R14,SEC0050           LOOP\nSEC0060  DS    0H\n         LTR   R15,R15               LENGTH ZERO?\n         BZ    SEC0310               YES.. NOT VALID\n         STC   R15,AUTHUIDL          SET USER ID LENGTH\n         LA    R1,AUTHPSWD           FIRST BYTE OF PASSWORD\n         LA    R14,8                 MAXIMUM LOOPS\n         SR    R15,R15               CLEAR FOR LENGTH\nSEC0070  DS    0H\n         CLI   0(R1),C' '            BLANK?\n         BE    SEC0080               YES\n         LA    R1,1(R1)              NEXT BYTE\n         LA    R15,1(R15)            ADD 1 TO LENGTH\n         BCT   R14,SEC0070           LOOP\nSEC0080  DS    0H\n         LTR   R15,R15               LENGTH ZERO?\n         BZ    SEC0320               YES.. NOT VALID\n         STC   R15,AUTHPSWL          SET PASSWORD LENGTH\n         LA    R1,AUTHNPSW           FIRST BYTE OF NEW PASSWORD\n         LA    R14,8                 MAXIMUM LOOPS\n         SR    R15,R15               CLEAR FOR LENGTH\nSEC0090  DS    0H\n         CLI   0(R1),C' '            BLANK?\n         BE    SEC0100               YES\n         LA    R1,1(R1)              NEXT BYTE\n         LA    R15,1(R15)            ADD 1 TO LENGTH\n         BCT   R14,SEC0090           LOOP\nSEC0100  DS    0H\n         STC   R15,AUTHNPSL          SET NEW PASSWORD LENGTH\n         L     R1,XTERMID            TERMINAL ID ADDRESS\n         MVC   AUTHTERM,0(R1)        COPY USER'S TERMINAL ID\n         ITRACE ID=AUTHDATA,                                           +\n               DATA1=AUTHUID\n         APPCCMD CONTROL=SEND,       ISSUE A SEND                      +\n               QUALIFY=DATA,         .. SENDING DATA                   +\n               RPL=(R6),             .. RPL ADDRESS                    +\n               AREA=AUTHREC,         .. I/O AREA ADDRESS               +\n               RECLEN=(R2),          .. RECORD SIZE                    +\n               CONVID=GBLCID         .. CONVERSATION ID\n         ITRACE ID=SENDRC,                                             +\n               DATA1=RPL6RC\n         OC    RPL6RC,RPL6RC         SEND SUCCESSFUL?\n         BNZ   SEC0170               NO\n         APPCCMD CONTROL=RECEIVE,    ISSUE A RECEIVE                   +\n               QUALIFY=SPEC,         .. FOR A SPECIFIC CONVERSATION    +\n               RPL=(R6),             .. RPL'S ADDRESS                  +\n               FILL=LL,              .. ONLY 1 LOGICAL RECORD          +\n               AREA=AUTHREC,         .. I/O AREA ADDRESS               +\n               AREALEN=(R2),         .. RECORD SIZE                    +\n               CONMODE=CS,           .. CONTINUE SPECIFIC              +\n               CONVID=GBLCID         .. CONVERSATION ID\n         ITRACE ID=RECVRC,                                             +\n               DATA1=RPL6RC\n         OC    RPL6RC,RPL6RC         SUCCESSFUL?\n         BNZ   SEC0190               NO\n         ITRACE ID=RACFRC,                                             +\n               DATA1=AUTHRTCD,       .. RETURN CODE                    +\n               DATA2=AUTHRSCD        .. REASON CODE\n         LA    R1,STATTBLE           RACF STATUS CODES TABLE\n         USING STATDSCT,R1           DEFINE BASE\nSEC0110  DS    0H\n         CLI   0(R1),X'FF'           END OF TABLE?\n         BE    SEC0300               YES... COULD NOT DETERMINE STATUS\nSEC0120  DS    0H\n         CLC   STATRTCD,AUTHRTCD     RETURN CODE MATCH?\n         BE    SEC0140               YES\nSEC0130  DS    0H\n         LA    R1,STATL(R1)          NEXT STATUS CODE\n         B     SEC0120               LOOP\nSEC0140  DS    0H\n         TM    STATFLAG,$STATRS      DOES THIS CODE HAVE A REASON ALSO?\n         BNO   SEC0150               NO\n         CLC   STATRSCD,AUTHRSCD     REASON CODE ALSO MATCH?\n         BNE   SEC0130               NO\nSEC0150  DS    0H\n         L     R15,XLINE1            MESSAGE AREA ADDRESS\n         MVC   0(80,R15),STATMSG     COPY STATUS MESSAGE\n         MVC   WORKRC,STATRC         COPY STATUS CODE\n         B     EXIT0000              AND EXIT\nSEC0170  DS    0H\n         BAL   R15,SEC0210           CONVERT RETURN CODE TO DISPLAYABLE\n         MVC   WORKWTO(WTOL),WTOI    COPY WTO\n         LA    R2,WORKWTO            POINT TO LIST FORM\n         USING WPL,R2                DEFINE BASE\n         MVC   WPLTXT(WTO02L),WTO02  COPY MESSAGE\n         MVC   WPLTXT+(WTO02RC-WTO02)(L'WTO02RC),WORKRCO\n         OI    STCFLAG,$STCERR       ERROR HAS OCCURRED\n         CLC   RPL6RC,=X'00480000'   RESOURCE FAILURE, NO RETRY?\n         BE    SEC0180               YES\n         CLC   RPL6RC,=X'004C0000'   RESOURCE FAILURE, NO RETRY?\n         BNE   SEC0200               NO\nSEC0180  DS    0H\n         NI    STCFLAG,255-$STCCNOS  RESET 'CNOS' COMPLETE\n         B     SEC0200\nSEC0190  DS    0H\n         BAL   R15,SEC0210           CONVERT RETURN CODE TO DISPLAYABLE\n         MVC   WORKWTO(WTOL),WTOI    COPY WTO\n         LA    R2,WORKWTO            POINT TO LIST FORM\n         MVC   WPLTXT(WTO03L),WTO03  COPY MESSAGE\n         MVC   WPLTXT+(WTO03RC-WTO03)(L'WTO03RC),WORKRCO\nSEC0200  DS    0H\n         WTO   MF=(E,(R2))           ISSUE THE WTO\n         L     R1,XLINE1             MESSAGE AREA\n         MVC   0(WTO02L,R1),WPLTXT   COPY MESSAGE\n         MVI   WORKRC,4              SET RC\n         B     EXIT0000              AND EXIT\nSEC0210  DS    0H\n         UNPK  WORKRCO(9),RPL6RC(5)  UNPACK RETURN CODE\n         MVZ   WORKRCO,HEX0F0F       CLEAR ZONES\n         TR    WORKRCO,HEXCHAR       CONVERT TO PRINTABLE\n         BR    R15                   RETURN\nSEC0300  DS    0H\n         ITRACE ID=UNDFRACF          UNKNOWN RACF RETURN/REASON CODES\n         MVC   WORKWTO(WTOL),WTOI    COPY WTO\n         LA    R2,WORKWTO            POINT TO LIST FORM\n         MVC   WPLTXT(WTO04L),WTO04  COPY MESSAGE\n         UNPK  WORKRCO(9),AUTHRTCD(5)  UNPACK RETURN CODE\n         MVZ   WORKRCO,HEX0F0F       CLEAR ZONES\n         TR    WORKRCO,HEXCHAR       CONVERT TO PRINTABLE\n         MVC   WPLTXT+(WTO04RC-WTO04)(L'WTO04RC),WORKRCO\n         UNPK  WORKRCO(9),AUTHRSCD(5)  UNPACK RETURN CODE\n         MVZ   WORKRCO,HEX0F0F       CLEAR ZONES\n         TR    WORKRCO,HEXCHAR       CONVERT TO PRINTABLE\n         MVC   WPLTXT+(WTO04RS-WTO04)(L'WTO04RS),WORKRCO\n         WTO   MF=(E,(R2))           ISSUE WTO\n         MVI   WORKRC,4              SET RETURN CODE\n         B     EXIT0000              AND EXIT\nSEC0310  DS    0H\n         L     R1,XLINE1             MESSAGE AREA ADDRESS\n         MVC   0(MSG01L,R1),MSG01    COPY STATUS MESSAGE\n         MVI   WORKRC,4              SET STATUS CODE\n         B     EXIT0000              AND EXIT\nSEC0320  DS    0H\n         L     R1,XLINE1             MESSAGE AREA ADDRESS\n         MVC   0(MSG02L,R1),MSG02    COPY STATUS MESSAGE\n         MVI   WORKRC,4              SET STATUS CODE\nEXIT0000 DS    0H\n         ITRACE ID=EXIT,                                               +\n               DATA1=WORKRC\n         SR    R2,R2                 CLEAR REGISTER\n         IC    R2,WORKRC             SAVE RETURN CODE\n         LR    R1,R13                COPY WORK AREA ADDRESS\n         L     R13,4(R13)            RESTORE CALLER'S SAVE AREA ADDRESS\n         FREEMAIN RU,A=(1),LV=WORKL  FREEMAIN WORK AREA\n         LR    R15,R2                COPY RETURN CODE\n         L     R14,12(R13)           RESTORE R14\n         LM    R0,R12,20(R13)        RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         LTORG\nHEX0F0F  DC    8X'0F'\nHEXCHAR  DC    C'0123456789ABCDEF'\nWTOI     WTO   '                                                       +\n                                             ',MF=L\nWTOL     EQU   *-WTOI\nWTO02    DS    0C\n         DC    C'TPXEXITSEC38 SEND FAILED, RC='\nWTO02RC  DC    C'XXXXXXXX'\nWTO02L   EQU   *-WTO02\nWTO03    DS    0C\n         DC    C'TPXEXITSEC39 RECEIVE FAILED, RC='\nWTO03RC  DC    C'XXXXXXXX'\nWTO03L   EQU   *-WTO03\nWTO04    DS    0C\n         DC    C'TPXEXITSEC40 UNKNOWN RACF RETURN/REASON CODE '\nWTO04RC  DC    C'XXXXXXXX'\n         DC    C' '\nWTO04RS  DC    C'XXXXXXXX'\nWTO04L   EQU   *-WTO04\nMSG01    DC    C'TPXEXITSEC41 PLEASE ENTER YOUR USER ID'\nMSG01L   EQU   *-MSG01\nMSG02    DC    C'TPXEXITSEC42 PLEASE ENTER YOUR PASSWORD'\nMSG02L   EQU   *-MSG02\nRPLI     RPL   AM=VTAM,                                                +\n               AAREA=RPLXI\nRPLL     EQU   *-RPLI\n         SPACE 1\nRPLXI    ISTRPL6\nRPLXL    EQU   *-RPLXI\n         SPACE 1\nAUTHID   DC    CL4'AUTH'\n         SPACE 1\n* --------------------------------------------------------------------*\n*                                                                     *\n*              RACF RETURN CODE/STATUS INTERPRETATION TABLE           *\n*                                                                     *\n* --------------------------------------------------------------------*\nSTATTBLE DS    0C\n         AUTHSTAT RTCD=00,           RACF RETURN CODE 00               +\n               EXITCD=00             .. OUR RETURN CODE\n         AUTHSTAT RTCD=04,           RACF RETURN CODE 04               +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC01 YOU ARE NOT DEFINED TO RACF'\n         AUTHSTAT RTCD=08,           RACF RETURN CODE 08               +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC02 PASSWORD IS INCORRECT'\n         AUTHSTAT RTCD=0C,           RACF RETURN CODE 0C               +\n               EXITCD=08,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC03 PASSWORD HAS EXPIRED'\n         AUTHSTAT RTCD=10,           RACF RETURN CODE 10               +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC04 NEW PASSWORD IS INVALID'\n         AUTHSTAT RTCD=14,           RACF RETURN CODE 14               +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC05 YOU ARE NOT DEFINED TO GROUP'\n         AUTHSTAT RTCD=18,           RACF RETURN CODE 18               +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC06 RACINIT WAS FAILED BY INSTALLATION EXI+\n               T ROUTINE'\n         AUTHSTAT RTCD=1C,           RACF RETURN CODE 1C               +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC07 YOUR ACCESS HAS BEEN REVOKED'\n         AUTHSTAT RTCD=20,           RACF RETURN CODE 20               +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC08 RACF IS NOT ACTIVE'\n         AUTHSTAT RTCD=24,           RACF RETURN CODE 24               +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC09 YOUR ACCESS TO THE SPECIFIED GROUP HAS+\n                BEEN REVOKED'\n         AUTHSTAT RTCD=28,           RACF RETURN CODE 28               +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC10 OIDCARD PARAMETER NOT SPECIFIED'\n         AUTHSTAT RTCD=2C,           RACF RETURN CODE 2C               +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC11 OIDCARD PARAMETER IS INVALID'\n         AUTHSTAT RTCD=30,           RACF RETURN CODE 30               +\n               RSCD=00,              .. REASON CODE 00                 +\n               EXITCD=00             .. OUR RETURN CODE\n         AUTHSTAT RTCD=30,           RACF RETURN CODE 30               +\n               RSCD=04,              .. REASON CODE 04                 +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC12 YOU ARE NOT AUTHORIZED AT THIS TIME'\n         AUTHSTAT RTCD=30,           RACF RETURN CODE 30               +\n               RSCD=08,              .. REASON CODE 04                 +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC13 YOU ARE NOT AUTHORIZED TO USE THIS TER+\n               MINAL AT THIS TIME'\n         AUTHSTAT RTCD=34,           RACF RETURN CODE 34               +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC14 YOU ARE NOT AUTHORIZED TO USE TPX'\n         AUTHSTAT RTCD=38,           RACF RETURN CODE 38               +\n               RSCD=04,              .. REASON CODE 04                 +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC15 MLACTIVE REQUIRES A SECLABEL; NONE WAS+\n                SPECIFIED'\n         AUTHSTAT RTCD=38,           RACF RETURN CODE 38               +\n               RSCD=08,              .. REASON CODE 08                 +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC16 YOU ARE NOT AUTHORIZED TO USE THIS SEC+\n               LABEL'\n         AUTHSTAT RTCD=38,           RACF RETURN CODE 38               +\n               RSCD=0C,              .. REASON CODE 0C                 +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC17 THE SYSTEM WAS AT A MULTILEVEL SECURE +\n               STATUS AND DOMINANCE CHECK FAILED'\n         AUTHSTAT RTCD=3C,           RACF RETURN CODE 3C               +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC18 RACROUTE REQUEST=VERIFYX ERROR OCCURRE+\n               D'\n         AUTHSTAT RTCD=40,           RACF RETURN CODE 40               +\n               RSCD=00,              .. REASON CODE 00                 +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC19 INTERNAL TOKENMAP FAILED WHILE TRANSLA+\n               TING'\n         AUTHSTAT RTCD=40,           RACF RETURN CODE 40               +\n               RSCD=04,              .. REASON CODE 04                 +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC20 UTOKEN LENGTH IS TOO SMALL'\n         AUTHSTAT RTCD=40,           RACF RETURN CODE 40               +\n               RSCD=08,              .. REASON CODE 08                 +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC21 STOKEN LENGTH IS TOO SMALL'\n         AUTHSTAT RTCD=40,           RACF RETURN CODE 40               +\n               RSCD=0C,              .. REASON CODE 0C                 +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC22 UTOKEN LENGTH IS TOO LARGE'\n         AUTHSTAT RTCD=40,           RACF RETURN CODE 40               +\n               RSCD=10,              .. REASON CODE 10                 +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC23 STOKEN LENGTH IS TOO LARGE'\n         AUTHSTAT RTCD=40,           RACF RETURN CODE 40               +\n               RSCD=14,              .. REASON CODE 14                 +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC24 A TOKEN WAS SPECIFIED, BUT VERSION WAS+\n                NOT DEFINED'\n         AUTHSTAT RTCD=44,           RACF RETURN CODE 44               +\n               RSCD=00,              .. REASON CODE 00                 +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC25 AN INTERNAL ERROR OCCURRED TRANSLATING+\n                AN INPUT TOKEN'\n         AUTHSTAT RTCD=44,           RACF RETURN CODE 44               +\n               RSCD=04,              .. REASON CODE 04                 +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC26 UTOKEN LENGTH IS TOO SMALL'\n         AUTHSTAT RTCD=44,           RACF RETURN CODE 44               +\n               RSCD=08,              .. REASON CODE 08                 +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC27 STOKEN LENGTH IS TOO SMALL'\n         AUTHSTAT RTCD=44,           RACF RETURN CODE 44               +\n               RSCD=0C,              .. REASON CODE 0C                 +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC28 A TOKEN WAS SPECIFIED, BUT VERSION WAS+\n                NOT DEFINED'\n         AUTHSTAT RTCD=48,           RACF RETURN CODE 48               +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC29 AN UNAUTHORIZED USER ISSUED A RACINIT +\n               IN A TRANQUIL STATE'\n         AUTHSTAT RTCD=4C,           RACF RETURN CODE 4C               +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC30 RACF DENIED ACCESS TO THE SUBMITTOR''S+\n                NODE'\n         AUTHSTAT RTCD=50,           RACF RETURN CODE 50               +\n               RSCD=04,              .. REASON CODE                    +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC31 THE SURROGATE CLASS WAS INACTIVE'\n         AUTHSTAT RTCD=50,           RACF RETURN CODE 50               +\n               RSCD=08,              .. REASON CODE                    +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC32 YOU ARE NOT PERMITTED TO USE THE USER'+\n               'S SURROGATE CLASS PROFILE'\n         AUTHSTAT RTCD=50,           RACF RETURN CODE 50               +\n               RSCD=0C,              .. REASON CODE                    +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC33 YOU ARE NOT PERMITTED TO USE THE USER'+\n               'S SECLABEL'\n         AUTHSTAT RTCD=54,           RACF RETURN CODE 54               +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC34 JESJOBS CHECK FAILED'\n         AUTHSTAT RTCD=58,           RACF RETURN CODE 58               +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC35 NJE OR RJE OPERATOR FACILITY CLASS PRO+\n               FILE NOT FOUND'\n         AUTHSTAT RTCD=64,           RACF RETURN CODE 64               +\n               EXITCD=04,            .. OUR RETURN CODE                +\n               MSG='TPXEXITSEC36 INCONSISTENT RACROUTE PARAMETERS'\n         DC     X'FF'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWORK     DSECT\nWORKSAVE DS    18F\nWORKWTO  DS    (WTOL)X\n         DS    0F                 FORCE ALIGNMENT\nWORKRPL  DS    (RPLL)X\n         DS    0F                 FORCE ALIGNMENT\nWORKRPLX DS    (RPLXL)X\n         COPY  AUTHREC\n         DS    0H                 FORCE ALIGNMENT\nWORKRCO  DS    CL9\nWORKRC   DS    X\nWORKL    EQU   *-WORK\n* ------------------------------------------------------------------- *\n*              RACF STATUS CODE/REASON CODE TABLE MAP                 *\n* ------------------------------------------------------------------- *\nSTATDSCT DSECT\nSTATFLAG DS    X                  FLAGS\n$STATRS  EQU   X'80'              .. USE REASON CODE ALSO\nSTATRTCD DS    XL4                RETURN CODE\nSTATRSCD DS    XL4                REASON CODE\nSTATRC   DS    X                  CODE WE SHOULD EXIT WITH\nSTATMSG  DS    CL80               MESSAGE\nSTATL    EQU   *-STATDSCT\n* ------------------------------------------------------------------- *\n*              TPX'S SMRT                                             *\n* ------------------------------------------------------------------- *\n         SMRT  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              EXIT PARM LIST                                         *\n* ------------------------------------------------------------------- *\nEXITPARM DSECT\n         COPY  SGNNPARM\n* ------------------------------------------------------------------- *\n*              ACB DSECT                                              *\n* ------------------------------------------------------------------- *\n         IFGACB AM=VTAM\n* ------------------------------------------------------------------- *\n*              RPL DSECT                                              *\n* ------------------------------------------------------------------- *\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------- *\n*              GLOBAL AREA                                            *\n* ------------------------------------------------------------------- *\n         EXITGBL TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              STC BLOCKS                                             *\n* ------------------------------------------------------------------- *\n         COPY STCDSCT\n* ------------------------------------------------------------------- *\n*              USER INDEX RECORD                                      *\n* ------------------------------------------------------------------- *\n         UINDEX\n* ------------------------------------------------------------------- *\n*              WTO PARAMETER LIST                                     *\n* ------------------------------------------------------------------- *\n         IEZWPL\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  EXITSEC\n./ ADD NAME=EXITTERM 0100-95102-95102-1953-00085-00085-00000-TPXEXIT\n         TITLE 'EXITTERM close ACB'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: EXITTERM - TPX LOGON/LOGOFF exit termination          *\n*                                                                     *\n*       AT ENTRY R10 WILL POINT TO THE PARM LIST                      *\n*                R11 WILL POINT TO THE SMRT                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTERM     EXITPRFX 'TPX user exit termination call processor'\n         USING SMRT,R11              DEFINE BASE\n         USING EXITPARM,R10          DEFINE BASE\n         USING EXITGBL,R9            DEFINE GLOBAL DATA BASE\n         GETMAIN RU,                 ACQUIRE WORK AREA                 +\n               LV=WORKL,             .. SIZE                           +\n               LOC=ANY               .. FROM ANY AREA\n         ST    R13,4(R1)             SAVE CALLER'S SAVE AREA ADDRESS\n         ST    R1,8(R13)             CHAIN TO CALLER'S SAVE AREA\n         LR    R13,R1                SET WORK AREA BASE\n         USING WORK,R13              DEFINE BASE\n         ITRACE ID=ENTRY\n         LA    R8,GBLACB             ACB ADDRESS\n*---------------------------------------------------------------------*\n*        Close the ACB                                                *\n*---------------------------------------------------------------------*\n         TM    GBLSTAT,$OPEN         ACB OPEN?\n         BNO   EXIT0000              NO\n         ITRACE ID=CLOSE\n         GETMAIN RU,                 ACQUIRE STORAGE FOR OPEN/CLOSE    +\n               LV=CLOSELL,           .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R3,R1                 COPY STORAGE ADDRESS\n         MVC   0(CLOSELL,R3),CLOSEL  COPY CLOSE PARM LIST\n         CLOSE (R8),MF=(E,(R3))      CLOSE ACB\n         MVC   WORKWTO(WTO01L),WTO01 COPY WTO\n         WTO   MF=(E,WORKWTO)        ISSUE WTO\n         FREEMAIN RU,A=(R3),LV=CLOSELL\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         LR    R1,R13                COPY WORK AREA ADDRESS\n         L     R13,4(R13)            RESTORE CALLER'S SAVE AREA ADDRESS\n         FREEMAIN RU,A=(1),LV=WORKL  FREEMAIN WORK AREA\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         SR    R15,R15               SET RETURN CODE\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWTO01    WTO   'TPXEXITTERM01 LOGON EXIT SHUTDOWN COMPLETE',MF=L\nWTO01L   EQU   *-WTO01\nCLOSEL   CLOSE (*),MF=L              CLOSE PARM LIST\nCLOSELL  EQU   *-CLOSEL\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWORK     DSECT\nWORKSAVE DS    18F\nWORKWTO  DS    CL150\nWORKL    EQU   *-WORK\n* ------------------------------------------------------------------- *\n*              TPX'S SMRT                                             *\n* ------------------------------------------------------------------- *\n         SMRT  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              EXIT PARM LIST                                         *\n* ------------------------------------------------------------------- *\nEXITPARM DSECT\n         COPY  SGNNPARM\n* ------------------------------------------------------------------- *\n*              GLOBAL AREA                                            *\n* ------------------------------------------------------------------- *\n         EXITGBL TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  EXITTERM\n./ ADD NAME=TPXATTN  0100-95102-95102-1953-00228-00228-00000-TPXEXIT\n         TITLE 'TPX STC ATTENTION EXIT'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TPXATTN - TPX STC ATTENTION EXIT                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTPXATTN  CSECT\nTPXATTN  AMODE 31\nTPXATTN  RMODE ANY\n         LR    R12,R15               LOAD BASE\n         USING TPXATTN,R12           DEFINE BASE\n         LR    R10,R1                COPY PARAMETER LIST ADDRESS\n         USING EXITPARM,R10          DEFINE BASE\n         LR    R5,R14                SAVE RETURN ADDRESS\n         B     ATTN0010              SKIP EYECATCHER\n         DC    ((PFXMODNM-MODPRFX)-(*-TPXATTN))X'00'\n         DC    CL8'TPXATTN'          MODULE NAME\n         DC    C'&SYSDATE'           DATE OF ASSEMBLY\n         DC    C'&SYSTIME'           TIME OF ASSEMBLY\nATTN0010 DS    0H\n         GETMAIN RU,LV=72,LOC=BELOW  ACQUIRE A SAVE AREA\n         LR    R13,R1                SAVE AREA ADDRESS\n         L     R1,EXITACB            ACB'S ADDRESS\n         USING IFGACB,R1             DEFINE BASE\n         L     R11,ACBUSER           COMMON DATA ADDRESS\n         USING TPXCOMM,R11           DEFINE BASE\n         L     R9,EXITRPL            RPL'S ADDRESS\n         USING IFGRPL,R9             DEFINE BASE\n         L     R8,RPLAAREA           RPL EXTENSION'S ADDRESS\n         USING ISTRPL6X,R8           DEFINE BASE\n         ITRACE ID=ENTRY,                                              +\n               DATA1=EXITTYPE,       .. REASON FOR CALL                +\n               DATA2=RPL6LU          .. LU INVOLVED\n         CLC   EXITTYPE,CNOSTYPE     CNOS CALL?\n         BE    CNOS0000              YES\n         CLC   EXITTYPE,FMH5TYPE     FMH5 CALL?\n         BE    FMH50000              YES\n         CLC   EXITTYPE,LOSSTYPE     LOSS CALL?\n         BE    LOSS0000              YES\n         B     EXIT0000              OTHERWISE EXIT\n* ------------------------------------------------------------------- *\n*             CNOS                                                    *\n* ------------------------------------------------------------------- *\nCNOS0000 DS    0H\n         ITRACE ID=CNOS,             CNOS                              +\n               DATA1=RPL6LU          .. LU NAME\n         B     EXIT0000              EXIT\n* ------------------------------------------------------------------- *\n*             FMH5                                                    *\n* ------------------------------------------------------------------- *\nFMH50000 DS    0H\n         ITRACE ID=FMH5,             FMH5 RECEIVED                     +\n               DATA1=RPL6LU          .. LU'S NAME\n         GETMAIN RU,                 ACQUIRE STORAGE FOR AN RPL        +\n               LV=RPLL,              .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R9,R1                 COPY RPL ADDRESS\n         MVC   0(RPLL,R9),RPLI       INITIALIZE RPL\n         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL EXTENSION +\n               LV=RPLEXTL,           .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R8,R1                 COPY ADDRESS\n         MVC   0(RPLEXTL,R8),RPLEXTI INITIALIZE RPL EXTENSION\n         ST    R8,RPLAAREA           SET EXTENSION ADDRESS IN THE RPL\n         MVC   RPLDACB,EXITACB       SET ACB ADDRESS\n         GETMAIN RU,                 ACQUIRE STORAGE FOR FMH5          +\n               LV=FMH5L,             .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R4,R1                 COPY FMH5 STORAGE ADDRESS\n         USING FMH5,R4               DEFINE BASE\n         ITRACE ID=RECVFMH5\n         APPCCMD CONTROL=RCVFMH5,    RECEIVE THE FMH5                  +\n               RPL=(R9),             .. RPL ADDRESS                    +\n               CONMODE=CS,           .. CONTINUE SPECIFIC              +\n               AREA=(R4),            .. FMH5 STORAGE ADDRESS           +\n               AREALEN=FMH5L,        .. FMH5 STORAGE SIZE              +\n               OPTCD=SYN             .. FORCE IT TO BE SYNCHRONOUS\n         OC    RPL6RC,RPL6RC         SUCCESSFUL?\n         BNZ   FMH50010              NO\n         ITRACE ID=NEWCONV           NEW CONVERSATION\n         GETMAIN RU,LV=CONVREQL      ACQUIRE STORAGE FOR REQUEST BLOCK\n         LR    R3,R1                 COPY STORAGE ADDRESS\n         USING CONVREQ,R3            DEFINE BASE\n         ITRACE ID=ADDCONV           ADD A SESSION BLOCK\n         MVI   CONVCMD,$CONVADD      SET COMMAND\n         L     R15,ACONV             CONVBLOK ADD/DELETE ENTRY POINT\n         BALR  R14,R15               LINK TO TPXCONV\n         LTR   R15,R15               ADD SUCCESSFUL?\n         BNZ   ERR0010               NO.. INTERNAL ERROR\n         L     R2,CONVADDR           RETURNED CONVBLOK ADDRESS\n         USING CONVBLOK,R2           DEFINE BASE\n         MVC   CONVLU,RPL6LU         COPY LU NAME\n         MVC   CONVCID,RPL6CNVD      COPY CONVERSATION ID\n         FREEMAIN RU,A=(R3),LV=CONVREQL   FREEMAIN PARM BLOCK\n         FREEMAIN RU,A=(R4),LV=FMH5L FREE FMH5 STORAGE\n         FREEMAIN RU,A=(R8),LV=RPLEXTL\n         FREEMAIN RU,A=(R9),LV=RPLL\n         GETMAIN RU,                 ACQUIRE STORAGE FOR PRTBLOK       +\n               LV=PRTBLOKL           .. ACQUIRE STORAGE FOR PRINT BLOCK\n         USING PRTBLOK,R1            DEFINE BASE\n         MVI   PRTCMD,$PRTPRT        SET COMMAND (PRINT)\n         MVI   PRTCC,C' '            INITIALIZE CARRIAGE CONTROL\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         MVC   PRTMSGID(MSG01L),MSG01 SET MESSAGE\n         MVC   PRTMSGID+(MSG01NDE-MSG01)(L'MSG01NDE),CONVLU\n         UNPK  PRTMSGID+(MSG01CID-MSG01)(9),CONVCID(5)\n         MVZ   PRTMSGID+(MSG01CID-MSG01)(8),HEXZERO\n         TR    PRTMSGID+(MSG01CID-MSG01)(8),HEXCHAR\n         MVI   PRTMSGID+(MSG01CID-MSG01)+8,C' ' RESTORE BLANK\n         L     R15,APRTQ             PRINT QUEUING ENTRY POINT\n         BALR  R14,R15               PRINT MESSAGE\n         FREEMAIN RU,A=(1),LV=PRTBLOKL\n         POST  COMMVECB              THERE IS WORK TO DO\n         B     EXIT0000              EXIT\nFMH50010 DS    0H\n         ITRACE ID=RCVFMH5F\n         LR    R2,R15                COPY RETURN CODE\n         ABEND $U0005,DUMP,,USER     ABEND\n* ------------------------------------------------------------------- *\n*             LOSS                                                    *\n* ------------------------------------------------------------------- *\nLOSS0000 DS    0H\n         ITRACE ID=LOSS,             LOSS OF SESSION                   +\n               DATA1=RPL6LU          .. LU NAME\n         GETMAIN RU,                 ACQUIRE STORAGE FOR PRTBLOK       +\n               LV=PRTBLOKL           .. SIZE OF AREA\n         USING PRTBLOK,R1            DEFINE BASE\n         MVI   PRTCMD,$PRTPRT        SET COMMAND (PRINT)\n         MVI   PRTCC,C' '            INITIALIZE CARRIAGE CONTROL\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         MVC   PRTMSGID(MSG02L),MSG02 SET MESSAGE\n         MVC   PRTMSGID+(MSG02NDE-MSG02)(L'MSG02NDE),RPL6LU\n         L     R15,APRTQ             PRINT QUEUEING ENTRY POINT\n         BALR  R14,R15               QUEUE MESSAGE\n         FREEMAIN RU,A=(1),LV=PRTBLOKL\n         ICM   R2,15,COMMCONV        FIRST CONVERSATION BLOCK\nLOSS0010 DS    0H\n         BZ    EXIT0000              END OF THE CHAIN\n         CLC   CONVLU,RPL6LU         CONVERSATION TO AFFECTED LU?\n         BNE   LOSS0020              NO\n         ITRACE ID=ERRPND            ERROR PENDING\n         MVI   CONVSTAT,$CONVERR     ERROR HAS OCCURRED\nLOSS0020 DS    0H\n         ICM   R2,15,CONVNEXT        NEXT CONVERSATION\n         B     LOSS0010              LOOP\n* ------------------------------------------------------------------- *\n*        SERIOUS ERRORS                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ABEND $U0006,DUMP,,USER     ADD CONVBLOK FAILED\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT              EXITING\n         FREEMAIN RU,A=(13),LV=72    FREEMAIN REGISTER SAVE AREA\n         BR    R5                    RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        CONSTANTS                                                   *\n*                                                                    *\n* ------------------------------------------------------------------ *\nCNOSTYPE DC    CL4'CNOS'             CHANGE NUMBER OF SESSIONS\nFMH5TYPE DC    CL4'FMH5'             FMH5\nLOSSTYPE DC    CL4'LOSS'             LOSS OF SESSION\nRPLI     RPL   AM=VTAM\nRPLL     EQU   *-RPLI\nRPLEXTI  ISTRPL6\nRPLEXTL  EQU   *-RPLEXTI\nMSG01    DS    0C\n         DC    CL11'TPXATTN01I'\n         DC    C'Conversation with node '\nMSG01NDE DC    CL8' '\n         DC    C' established, CID='\nMSG01CID DC    CL8' '\n         DC    C' '\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'TPXATTN02I'\n         DC    C'Session lost with LU '\nMSG02NDE DC    CL8' '\nMSG02L   EQU   *-MSG02\nHEXZERO  DC    8X'00'\nHEXCHAR  DC    C'0123456789ABCDEF'\n* ------------------------------------------------------------------ *\n*              COMMON DATA MAP                                       *\n* ------------------------------------------------------------------ *\n         TPXCOMM TYPE=DSECT\n* ------------------------------------------------------------------ *\n*              CONVERSATION BLOCK ADD/DELETE REQUEST BLOCK           *\n* ------------------------------------------------------------------ *\n         CONVREQ  DSECT=YES\n* ------------------------------------------------------------------ *\n*              VTAM CONVERSATION BLOCK                               *\n* ------------------------------------------------------------------ *\n         CONVBLOK DSECT=YES\n* ------------------------------------------------------------------ *\n*              PRINT INTERFACE BLOCK                                 *\n* ------------------------------------------------------------------ *\n         PRTBLOK  DSECT=YES\n* ------------------------------------------------------------------ *\n*              FMH5                                                  *\n* ------------------------------------------------------------------ *\n         FMH5     DSECT=YES\n* ------------------------------------------------------------------ *\n*              PARAMETER LIST                                        *\n* ------------------------------------------------------------------ *\nEXITPARM DSECT\nEXITACB  DS   A                      ACB ADDRESS\n         DS   A                      RESERVED\n         DS   A                      RESERVED\nEXITTYPE DS   CL4                    TYPE OF CALL\nEXITRPL  DS   A                      RPL ADDRESS\n         DS   A                      RESERVED\n* ------------------------------------------------------------------ *\n*              ACB DSECT                                             *\n* ------------------------------------------------------------------ *\n         IFGACB AM=VTAM\n* ------------------------------------------------------------------ *\n*              RPL AND RPL EXTENSION DSECTS                          *\n* ------------------------------------------------------------------ *\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------ *\n*              EQUATES                                               *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         ABCODES\n         END  TPXATTN\n./ ADD NAME=TPXCOMM  0100-95102-95102-1953-00013-00013-00000-TPXEXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Name: TPXCOMM                                                      *\n*                                                                     *\n*  Purpose: Common data and trace table manager                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TPXCOMM TYPE=CSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\n         END   TPXCOMM\n./ ADD NAME=TPXCONV  0100-95102-95102-1953-00185-00185-00000-TPXEXIT\n         TITLE 'TPXCONV ADD AND DELETE CONVERSATION BLOCKS'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TPXCONV   Add and delete conversation blocks          *\n*                                                                     *\n*  Purpose: Add and delete CONVBLOKs.  A CONVBLOK is used to          *\n*           represent and control communication with users.  CONVBLOKs*\n*           are chained from TPXCOMM.  Since CONVBLOKS can be added   *\n*           and removed by multiple tasks, this module is a subroutine*\n*           and does not follow \"normal\" TPX linkage, it must not     *\n*           use the \"DXD\" work area.  This module does not establish  *\n*           its own save area... no functions may be used that would  *\n*           require a save area.                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTPXCONV  CSECT\nTPXCONV  AMODE 31\nTPXCONV  RMODE ANY\n         STM   R14,R12,12(R13)       SAVE REGISTERS\n         LR    R12,R15               LOAD BASE\n         USING TPXCONV,R12           DEFINE BASE\n         USING TPXCOMM,R11           DEFINE BASE\n         B     CONV0000              SKIP EYECATCHER\n         DC    CL8'TPXCONV'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\n         DC    C'ADD/DELETE CONVERSATION BLOCKS'\nCONV0000 DS    0H\n         TM    COMMEOJ,$EOJ2         EOJ PHASE 2?\n         BO    CONV0200              YES\n         LR    R10,R1                COPY PARM BLOCK ADDRESS\n         USING CONVREQ,R10           DEFINE BASE\n         CLI   CONVCMD,$CONVADD      ADD A CONVERSATION?\n         BE    CONV0010              YES\n         CLI   CONVCMD,$CONVDEL      DELETE A CONVERSATION?\n         BE    CONV0100              YES\n         ABEND $U0007,DUMP,,USER     DIAGNOSIS TIME\n*---------------------------------------------------------------------*\n*                                                                     *\n*        INITIALIZE A NEW CONVBLOK                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nCONV0010 DS    0H\n         LA    R2,COMMCONV           CONVERSATION BLOCK ANCHOR POINT\n         ICM   R7,15,COMMCONV        FIRST CONVERSATION BLOCK'S ADDRESS\n         USING CONVBLOK,R7           DEFINE BASE\n         BZ    CONV0030              NO CONVERSATIONS\nCONV0020 DS    0H\n         LR    R2,R7                 SAVE THIS BLOCK'S ADDRESS\n         ICM   R7,15,CONVNEXT        NEXT CONVERSATION BLOCK'S ADDRESS\n         BNZ   CONV0020              LOOP\nCONV0030 DS    0H\n         GETMAIN RU,LV=CONVL         ACQUIRE STORAGE FOR CONVBLOK\n         ST    R1,CONVADDR           PASS ADDRESS BACK TO CALLER\n         ST    R1,CONVNEXT-CONVBLOK(R2)   ADD NEW BLOCK TO END OF CHAIN\n         LR    R7,R1                 COPY STORAGE ADDRESS\n         XC    CONVBLOK(CONVL),CONVBLOK\n         ST    R2,CONVPREV           CHAIN PREVIOUS BLOCK TO NEW BLOCK\n         MVC   CONVEYE,CONVID        IDENTIFY THE BLOCK\n         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL           +\n               LV=RPLL,              .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,CONVRPL            SET RPL'S ADDRESS\n         MVC   0(RPLL,R1),RPLI       INITIALIZE RPL\n         LR    R3,R1                 COPY RPL ADDRESS\n         USING IFGRPL,R3             DEFINE BASE\n         MVC   RPLDACB,COMMACB       SET ACB ADDRESS IN RPL\n         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL EXTENSION +\n               LV=RPLEXTL,           .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,CONVRPLX           SET RPL EXTENSION'S ADDRESS\n         MVC   0(RPLEXTL,R1),RPLEXTI INITIALIZE RPL EXTENSION\n         ST    R1,RPLAAREA           SET RPL EXTENSION ADDRESS\n         GETMAIN RU,                 ACQUIRE STORAGE FOR I/O AREA      +\n               LV=COMMIOSZ,          .. SIZE                           +\n               LOC=ANY               .. FROM ANY OLD PLACE\n         ST    R1,CONVIOA            SET I/O AREA'S ADDRESS\n         B     EXIT0000              AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        DELETE A CONVBLOK                                            *\n*                                                                     *\n*   The CONVBLOK chain is searched as a double check to make sure the *\n*   block is really on the chain.                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nCONV0100 DS    0H\n         ICM   R7,15,COMMCONV        FIRST CONVERSATION BLOCK\n         BZ    CONV0120              BLOCK WAS NOT FOUND\nCONV0110 DS    0H\n         CLM   R7,15,CONVADDR        CONVERSATION BLOCK LOCATED?\n         BE    CONV0130              YES\n         ICM   R7,15,CONVNEXT        NEXT CONVERSATION BLOCK\n         BNZ   CONV0110              LOOP\nCONV0120 DS    0H\n         ABEND $U0008,DUMP,,USER     CRASH AND BURN\nCONV0130 DS    0H\n         ICM   R1,15,CONVNEXT        NEXT BLOCK'S ADDRESS\n         BZ    CONV0140              THIS BLOCK IS END-OF-CHAIN\n         MVC   CONVPREV-CONVBLOK(4,R1),CONVPREV\nCONV0140 DS    0H\n         L     R1,CONVPREV           PREVIOUS BLOCK'S ADDRESS\n         MVC   CONVNEXT-CONVBLOK(4,R1),CONVNEXT\n         BAL   R8,FREE0000           FREE ALL AREAS\n         B     EXIT0000\n*---------------------------------------------------------------------*\n*                                                                     *\n*        DELETE ALL CONVBLOK'S                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nCONV0200 DS    0H\n         ICM   R7,15,COMMCONV        FIRST CONV BLOCK\n         BZ    EXIT0000              NO CONVBLOK'S\nCONV0210 DS    0H\n         L     R6,CONVNEXT           SAVE NEXT BLOCK'S ADDRESS\n         BAL   R8,FREE0000           FREE ALL AREAS\n         LTR   R7,R6                 NEXT CONVBLOK'S ADDRESS\n         BNZ   CONV0210              LOOP\n         B     EXIT0000              ALL DONE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FREE ALL AREAS AND THE CONVBLOK ITSELF                       *\n*                                                                     *\n*---------------------------------------------------------------------*\nFREE0000 DS    0H\n         L     R1,CONVIOA            I/O AREA ADDRESS\n         FREEMAIN RU,A=(1),LV=COMMIOSZ\n         L     R1,CONVRPLX           RPL EXTENSION'S ADDRESS\n         FREEMAIN RU,A=(1),LV=RPLEXTL\n         L     R1,CONVRPL            RPL'S ADDRESS\n         FREEMAIN RU,A=(1),LV=RPLL   FREEMAIN RPL\n         FREEMAIN RU,A=(7),LV=CONVL  FREEMAIN CONVERSATION BLOCK\n         BR    R8\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         L     R14,12(R13)           RESTORE R14\n         LM    R0,R12,20(R13)        RESTORE REMAINING REGISTERS\n         BR    R14                   RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCONVID   DC    C'CONVBLOK'\nRPLI     RPL   AM=VTAM,                                                +\n               AAREA=RPLEXTI\nRPLL     EQU   *-RPLI\nRPLEXTI  ISTRPL6\nRPLEXTL  EQU   *-RPLEXTI\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         TPXCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              CONVERSATION BLOCK ADD/DELETE REQUEST BLOCK            *\n* ------------------------------------------------------------------- *\n         CONVREQ\n* ------------------------------------------------------------------- *\n*              VTAM CONVERSATION BLOCK                                *\n* ------------------------------------------------------------------- *\n         CONVBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              ACB DSECT                                              *\n* ------------------------------------------------------------------- *\n         IFGACB   AM=VTAM\n* ------------------------------------------------------------------- *\n*              EXIT LIST DSECT                                        *\n* ------------------------------------------------------------------- *\n         IFGEXLST AM=VTAM\n* ------------------------------------------------------------------- *\n*              RPL AND RPL EXTENSION DSECTS                           *\n* ------------------------------------------------------------------- *\n         IFGRPL   AM=VTAM\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  TPXCONV\n./ ADD NAME=TPXLERAD 0100-95102-95102-1953-00051-00051-00000-TPXEXIT\n         TITLE 'TPX STC LERAD EXIT'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TPXLERAD - TPX STC VTAM LERAD EXIT                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTPXLERAD CSECT\nTPXLERAD AMODE 31\nTPXLERAD RMODE ANY\n         USING TPXLERAD,R15          DEFINE BASE\n         B     LERAD010              SKIP ADDRESS AND EYECATCHER\n         DC    CL8'TPXLERAD'         MODULE NAME\n         DC    C'&SYSDATE'           DATE OF ASSEMBLY\n         DC    C'&SYSTIME'           TIME OF ASSEMBLY\nLERAD010 DS    0H\n         USING IFGRPL,R1             DEFINE BASE\n         L     R2,RPLAAREA           RPL EXTENSION ADDRESS\n         USING ISTRPL6X,R2           DEFINE BASE\n         LA    R3,GOODRC             GOOD RETURN CODES TABLE\nLERAD020 DS    0H\n         CLI   0(R3),X'FF'           END OF TABLE\n         BE    LERAD030              NO GOOD\n         CLC   RPL6RC,0(R3)          ACCEPTABLE?\n         BE    EXIT0000              YES, EXIT\n         LA    R3,4(R3)              NEXT CODE\n         B     LERAD020              LOOP\nLERAD030 DS    0H\n         L     R4,RPL6RC             MAKE RC EASY TO FIND\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              CONSTANTS                                             *\n*                                                                    *\n* ------------------------------------------------------------------ *\nGOODRC   DS    0C\n         DC    X'00000000'           GOOD\n         DC    X'00000001'           CNOS ACCEPTED BY PARTNER\n         DC    X'FF'\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              EQUATES                                               *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         END  TPXLERAD\n./ ADD NAME=TPXLOSS  0100-95102-95102-1953-00096-00096-00000-TPXEXIT\n         TITLE 'CLEAN-UP AFTER A VTAM LOSS'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TPXLOSS - CLEAN-UP AFTER A VTAM LOSS                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLOSS     TPXPRFX 'CLEAN-UP AFTER A VTAM LOSS'\nTPXLOSS  AMODE 31\nTPXLOSS  RMODE ANY\n         USING TPXLOSS,R12           DEFINE BASE REGISTER\n         LR    R8,R1                 COPY PARM ADDRESS\n         USING VTAMBLOK,R8           DEFINE BASE\n         L     R7,VTAMCONV           CONVERSATION BLOCK'S ADDRESS\n         USING CONVBLOK,R7           DEFINE BASE\n         ITRACE ID=LOSTCONV,         CONVERSATION LOST                 +\n               RDATA1=R7             .. CONVERSATION BLOCK'S ADDRESS   +\n               DATA2=CONVCID         .. CONVERSATION ID\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    LOSS0010              YES\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         MVI   PRTCC,C' '            INITIALIZE PRINT I/O AREA\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\nLOSS0010 DS    0H\n         MVC   PRTMSGID(MSG01L),MSG01\n         MVC   PRTMSGID+(MSG01LU-MSG01)(L'MSG01LU),CONVLU\n         BAL   R3,PRT0000            QUEUE MESSAGE TO PRINT\n         ITRACE ID=DELCONV,          DELETING THE CONVERSATION BLOCK   +\n               RDATA1=R7             .. CONVBLOK'S ADDRESS\n         ST    R7,CONVADDR           SET CONVBLOK ADDRESS\n         MVI   CONVCMD,$CONVDEL      SET COMMAND FOR TPXCONV\n         LA    R1,CONVREQ            PARM BLOCK'S ADDRESS\n         L     R15,ACONV             TPXCONV'S ENTRY POINT\n         BALR  R14,R15               LINK TO TPXCONV\n         B     EXIT0000              EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        PRINT                                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         ITRACE ID=PRINT\n         MVI   PRTCMD,$PRTPRT        SET COMMAND\n         LA    R1,PRTBLOK            PRINT BLOCK ADDRESS\n         L     R15,APRTQ             PRINT QUEUING ENTRY POINT\n         BALR  R14,R15               LINK TO PRINT\n         BR    R3                    DONE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        EXIT                                                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            CALLER'S SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE CALLER'S REGISTERS\n         SR    R15,R15               ALWAYS A GOOD RETURN CODE\n         BR    R14                   RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDLOSS)            DISPLACEMENT TO WORK AREA\nMSG01    DS    0C\n         DC    CL11'TPXLOSS01I'\n         DC    C'Conversation block for LU '\nMSG01LU  DC    CL8' '\n         DC    C' deleted'\nMSG01L   EQU   *-MSG01\n* ------------------------------------------------------------------- *\n*              WORK AREA                                              *\n* ------------------------------------------------------------------- *\nDXDLOSS  DSECT\nDXDID    DS   CL8                    WORK AREA OWNER EYECATCHER\nDXDSAVE  DS   18F                    REGISTER SAVE AREA\n         PRTBLOK  DSECT=NO\n         CONVREQ  DSECT=NO\n* ------------------------------------------------------------------- *\n*              VTAM COMMUNICATION BLOCK                               *\n* ------------------------------------------------------------------- *\n         VTAMBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         TPXCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              VTAM CONVERSATION BLOCK                                *\n* ------------------------------------------------------------------- *\n         CONVBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  TPXLOSS\n./ ADD NAME=TPXMAIN  0100-95102-95102-1953-00426-00426-00000-TPXEXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Name: TPXMAIN                                                      *\n*                                                                     *\n*  Purpose: STC Mainline                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTPXMAIN  CSECT\nTPXMAIN  AMODE 31\nTPXMAIN  RMODE ANY\n         USING TPXMAIN,R12          DEFINE BASE\n         STM   R14,R12,12(R13)      SAVE ENTRY REGISTERS\n         LR    R12,R15              COPY BASE\n         B     @@000001             BRANCH AROUND EYECATCHER\n         DC    ((PFXMODNM-MODPRFX)-(*-TPXMAIN))X'00'\nMODID    DC    CL8'TPXMAIN'         MODULE NAME\n         DC    CL8'&SYSDATE'        DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'        TIME OF ASSEMBLY\n@@000001 DS    0H\n         LR    R5,R1                SAVE PARM ADDRESS\n* ------------------------------------------------------------------- *\n*        Acquire storage for work areas                               *\n* ------------------------------------------------------------------- *\n         L     R3,DXDSIZE           WORK AREA SIZE\n         GETMAIN RU,                ACQUIRE WORK AREA STORAGE          +\n               LV=(R3),             .. WORK AREA SIZE IS IN R3         +\n               LOC=ANY              .. MAY BE ABOVE OR BELOW\n         LR    R4,R1                COPY STORAGE ADDRESS\n         LR    R10,R1               COPY STORAGE ADDRESS\n         LR    R2,R1                COPY WORK AREA ADDRESS\n         SR    R1,R1                CLEAR REGISTER\n         MVCL  R2,R0                CLEAR WORK AREA\n         A     R10,DXDSTART         PLUS DISPLACEMENT TO OUR PORTION\n         USING DXDMAIN,R10          DEFINE WORK AREA BASE\n         MVC   DXDID,MODID          IDENTIFY WORK AREA OWNER\n         LA    R2,DXDSAVE           OUR SAVE AREA ADDRESS\n         ST    R13,4(R2)            CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R2,8(R13)            OUR SAVE AREA TO CALLER'S\n         LR    R13,R2               SET SAVE AREA ADDRESS\n* ------------------------------------------------------------------- *\n*        Load common data module  (TPXCOMM)                           *\n* ------------------------------------------------------------------- *\n         LOAD  EP=TPXCOMM           LOAD COMMON DATA MODULE\n         LR    R11,R0               COPY TO PERMANENT BASE\n         USING TPXCOMM,R11          DEFINE COMMON AREA BASE\n         ST    R12,AMAIN            SET MAINLINE'S ADDRESS IN COMMON\n         ST    R4,COMMDXDA          SET DYNAMIC WORK AREA ADDRESS\n         ST    R5,COMMPARM          SAVE PARM ADDRESS\n* ------------------------------------------------------------------- *\n*        Acquire storage for trace table                              *\n* ------------------------------------------------------------------- *\n         L     R3,TRSIZE            TRACE TABLE SIZE\n         GETMAIN RU,                ACQUIRE STORAGE FOR TRACE TABLE    +\n               LV=(R3),             .. SIZE IS IN R3                   +\n               LOC=ANY              .. MAY BE ABOVE OR BELOW\n         ST    R1,TRADDR            SAVE TRACE TABLE STORAGE ADDRESS\n         SR    R0,R0                ASSUME ON A 32-BYTE BOUNDARY\n         TM    TRADDR+3,X'07'       ALREADY ON 32-BYTE BOUNDARY?\n         BNO   INIT0010             YES\n         SRL   R1,5                 SHIFT OUT LOW BITS ..\n         SLL   R1,5                 .. TO ROUND TO 32-BYTE BOUNDARY\n         LA    R1,32(R1)            PLUS 32\n         LA    R0,TRENTRYL          1 LESS TRACE ENTRY AVAILABLE\nINIT0010 DS    0H\n         ST    R1,TRFIRST           FIRST TRACE ENTRY\n         ST    R1,TRCURR            CURRENT TRACE ENTRY\n         A     R1,TRSIZE            LAST ENTRY IN TABLE\n         SH    R1,=Y(TRENTRYL)      MINUS 1 ENTRY\n         SR    R1,R0                MINUS 1 MORE IF NECESSARY\n         ST    R1,TRLAST            LAST TRACE ENTRY ADDRESS\n         ITRACE ID=INITIAL          INITIAL TRACE ENTRY\n         MVC   TPXMODS(MODL),MOD    INITIALIZE MODULE ENTRY POINTS\n* ------------------------------------------------------------------- *\n*        Determine DD's present                                       *\n* ------------------------------------------------------------------- *\n         ITRACE ID=SCANTIOT         INITIAL TRACE ENTRY\n         USING PSA,R0               DEFINE BASE\n         L     R1,PSATNEW           OUR TCB ADDRESS FROM PSA\n         USING TCB,R1               DEFINE TCB BASE\n         L     R2,TCBTIO            TIOT ADDRESS FROM OUR TCB\n         USING TIOT1,R2             DEFINE TIOT BASE\n         LA    R3,TIOENTRY          FIRST TIOT ENTRY\n         USING TIOENTRY,R3          DEFINE TIOT ENTRY BASE\n         SR    R4,R4                CLEAR FOR LENGTHS\nINIT0020 DS    0H\n         ICM   R4,1,TIOELNGH        LENGTH OF THIS ENTRY\n         BZ    INIT0060             END OF TABLE\n         ITRACE ID=TIOTDDNM,        TRACE EACH TIOT ENTRY              +\n               DATA1=TIOEDDNM\n         LA    R5,DDTBLE            REQUIRED DDNAMES TABLE\n         USING DDDSECT,R5           DEFINE BASE\nINIT0030 DS    0H\n         CLI   0(R5),X'FF'          END OF TABLE?\n         BE    INIT0050             YES, NOT IN TABLE\n         CLC   TIOEDDNM,DDNAME      DD NAME FOUND?\n         BE    INIT0040             YES\n         LA    R5,DDL(R5)           NEXT DD\n         B     INIT0030             LOOP\nINIT0040 DS    0H\n         ITRACE ID=SETDDID,         SETTING DD ID                      +\n               DATA1=TIOEDDNM,      .. DDNAME                          +\n               DATA2=DDID           .. FLAG VALUE\n         OC    DXDDD,DDID           TURN ON MATCHING ID\nINIT0050 DS    0H\n         AR    R3,R4                NEXT ENTRY\n         B     INIT0020             LOOP\nINIT0060 DS    0H\n         ITRACE ID=TIOTDONE,        TIOT SCAN COMPLETE                 +\n               DATA1=DXDDD          .. INCLUDE FLAG BYTE\n         TM    DXDDD,$DXDPRT        PRINT DD PRESENT?\n         BO    INIT0070             YES\n         ITRACE ID=NOSYSPRT         SYSPRINT DD STATEMENT NOT PRESENT\n         GETMAIN RU,                ACQUIRE STORAGE FOR WTO            +\n               LV=WTO01L,           .. STORAGE SIZE REQUIRED           +\n               LOC=BELOW            .. FROM BELOW THE LINE\n         LR    R2,R1                COPY STORAGE ADDRESS\n         MVC   0(WTO01L,R2),WTO01   COPY WTO\n         WTO   MF=(E,(R2))          ISSUE WTO\n         FREEMAIN RU,A=(R1),LV=WTO01L\n         ABEND $U0001,DUMP,,USER\n* ------------------------------------------------------------------- *\n*        ATTACH print sub-task                                        *\n* ------------------------------------------------------------------- *\nINIT0070 DS    0H\n         MVC   DXDATTCH(ATTCHL),ATTCHI\n         LA    R2,PRTTERM           TERMINATION ECB'S ADDRESS\n         LA    R3,DXDACOMM          PARM LIST ADDRESS\n         ITRACE ID=ATCHPRT          ATTACHING PRINT SUBTASK\n         ATTACH EP=TPXPRTS,         ATTACH PRINT SUBTASK               +\n               PARAM=((R11)),       .. PARAMETER IS COMMON MODULE ADDR +\n               ECB=(R2),            .. TERMINATION ECB'S ADDRESS       +\n               PURGE=QUIESCE,       .. FINISH UP I/O IN PROGRESS       +\n               MF=(E,(R3)),         .. SUBTASK PARM LIST               +\n               SF=(E,DXDATTCH)      .. EXECUTE FORM, LIST FORM ADDRESS\n         LTR   R15,R15              ATTACH SUCCESSFUL?\n         BNZ   ERR0010              NO\n         ST    R1,COMMPRT           SET TCB'S ADDRESS IN COMMON\n         ITRACE ID=PRTOK,           PRINT SUBTASK ATTACH SUCCESSFUL    +\n               RDATA1=R1            .. INCLUDE TCB ADDRESS IN TRACE\n         OI    COMMFLAG,$COMMPRT    PRINT SUBTASK IS ACTIVE\n* ------------------------------------------------------------------- *\n*        Print start-up messages                                      *\n* ------------------------------------------------------------------- *\n         MVI   PRTCC,C' '           SINGLE SPACE\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         MVI   PRTCMD,$PRTHEAD      PRINT HEADING\n         LA    R1,PRTBLOK           PRINT BLOCK ADDRESS\n         L     R15,APRTQ            PRINTER QUEUING ENTRY POINT\n         BALR  R14,R15              PRINT HEADING\n         MVC   PRTMSGID(MSG03L),MSG03\n         BAL   R8,PRT0000           PRINT MESSAGE\n* ------------------------------------------------------------------- *\n*        Determine if PARM is valid                                   *\n* ------------------------------------------------------------------- *\n         L     R1,COMMPARM          PARM POINTER'S ADDRESS\n         ICM   R1,15,0(R1)          PARM'S ADDRESS\n         BZ    ERR0020              NO PARAMETER\n         SR    R2,R2                CLEAR REGISTER\n         ICM   R2,3,0(R1)           LENGTH OF PARM\n         CH    R2,H1                AT LEAST 1?\n         BL    ERR0020              NO PARAMETER\n         CH    R2,H8                MORE THAN 8?\n         BH    ERR0030              YES.. TOO LONG\n         SH    R2,H1                FOR EXECUTE\n         EX    R2,ACBMVC            COPY ACB NAME\n* ------------------------------------------------------------------- *\n*        Issue WTOR                                                   *\n* ------------------------------------------------------------------- *\nINIT0080 DS    0H\n         MVC   DXDWTOR(WTOR01L),WTOR01I COPY WTOR LIST FORM\n         ITRACE ID=WTOR             ISSUING WTOR\n         XC    DXDECB,DXDECB        CLEAR THE ECB\n         MVC   DXDREPLY,COMMBLKS    CLEAR THE REPLY AREA\n         LA    R2,DXDECB            ECB ADDRESS\n         LA    R3,DXDREPLY          REPLY ADDRESS\n         WTOR  ,                    ISSUE WTOR                         +\n               (R3),                .. REPLY ADDRESS                   +\n               L'DXDREPLY,          .. REPLY LENGTH                    +\n               (R2),                .. ECB'S ADDRESS                   +\n               MF=(E,DXDWTOR)       .. EXECUTE FORM, LIST FORM ADDRESS\n* ------------------------------------------------------------------- *\n*        CALL VTAM MODULE                                             *\n* ------------------------------------------------------------------- *\nPROC0010 DS    0H\n         ITRACE ID=CALLVTAM         CALL VTAM MODULE\n         L     R15,AVTAM            VTAM MODULE ENTRY POINT\n         BALR  R14,R15              LINK TO VTAM TO ALLOW INITIALIZE\n* ------------------------------------------------------------------- *\n*        Build WAIT ECB list                                          *\n* ------------------------------------------------------------------- *\nPROC0020 DS    0H\n         TM    COMMVECB,X'40'       ATTN EXIT ECB POSTED?\n         BO    PROC0010             YES\n         TM    DXDECB,X'40'         WTOR ECB POSTED?\n         BO    PROC0100             YES\n         LA    R2,8                 SET INITIAL LENGTH OF ECB LIST\n         ICM   R7,15,COMMCONV       FIRST CONVERSATION BLOCK'S ADDRESS\n         USING CONVBLOK,R7          DEFINE BASE\n         BZ    PROC0040             NO CONVERSATION BLOCKS\nPROC0030 DS    0H\n         TM    CONVECB,X'40'        ECB POSTED?\n         BO    PROC0010             YES.. CALL VTAM AGAIN\n         CLI   CONVFUNC,0           ANY FUNCTION ACTIVE?\n         BE    PROC0010             NO.. CALL VTAM AGAIN\n         LA    R2,4(R2)             PLUS 1 ECB\n         ICM   R7,15,CONVNEXT       NEXT CONVBLOK'S ADDRESS\n         BNZ   PROC0030             LOOP\nPROC0040 DS    0H\n         ITRACE ID=WAITSIZE,        ACQUIRING WAIT LIST STORAGE        +\n               RDATA1=R2            .. WAIT LIST LENGTH\n         GETMAIN RU,                ACQUIRE STORAGE FOR WAIT LIST      +\n               LV=(R2),             .. SIZE NEEDED                     +\n               LOC=ANY              .. DOESN'T MATTER WHERE IT IS\n         LR    R3,R1                SAVE STORAGE ADDRESS\n         LA    R0,COMMVECB          ECB POSTED BY ATTN EXIT\n         ST    R0,0(R1)             SET ADDRESS IN ECB LIST\n         ITRACE ID=ATTNECB,         TRACE ATTN EXIT'S ECB ADDRESS      +\n               RDATA1=R0            .. ECB'S ADDRESS\n         LA    R1,4(R1)             NEXT\n         LA    R0,DXDECB            ECB POSTED BY WTOR\n         ST    R0,0(R1)             SET ADDRESS IN ECB LIST\n         ITRACE ID=WTORECB,         TRACE WTOR ECB ADDRESS             +\n               RDATA1=R0            .. ECB'S ADDRESS\n         LA    R1,4(R1)             NEXT\n         ICM   R7,15,COMMCONV       FIRST CONVERSATION BLOCK ADDRESS\n         BZ    PROC0060             NO CONVERSATION BLOCKS\nPROC0050 DS    0H\n         LA    R0,CONVECB           ECB'S ADDRESS\n         ST    R0,0(R1)             SET ADDRESS IN ECB LIST\n         ITRACE ID=CONVECB,         TRACE CONVBLOK'S ECB ADDRESS       +\n               RDATA1=R7,           .. CONVBLOK'S ADDRESS              +\n               RDATA2=R0            .. ECB'S ADDRESS\n         LA    R1,4(R1)             NEXT\n         ICM   R7,15,CONVNEXT       NEXT CONVERSATION BLOCK\n         BNZ   PROC0050             LOOP\nPROC0060 DS    0H\n         SH    R1,H4                BACK-UP TO LAST ECB\n         OI    0(R1),X'80'          FLAG END OF ECB LIST\n         ITRACE ID=WAIT,            ISSUE WAIT                         +\n               RDATA1=R3            .. ECB LIST'S ADDRESS\n         WAIT  1,ECBLIST=(R3)       WAIT FOR SOMETHING TO HAPPEN\n         ITRACE ID=WOKEUP           SOMETHING HAS HAPPED\n         FREEMAIN RU,               FREE WAITLIST                      +\n               A=(R3),              .. STORAGE ADDRESS                 +\n               LV=(R2)              .. STORAGE SIZE\n         B     PROC0010             CALL VTAM MODULE AGAIN\nPROC0100 DS    0H\n         ITRACE ID=WTORRPLY,        WTOR HAS BEEN REPLIED TO           +\n               DATA1=DXDREPLY       .. OPERATOR'S REPLY DATA\n         CLC   STOPCMD,DXDREPLY     WAS IT 'STOP'?\n         BE    EXIT0000             YES\n         XC    DXDECB,DXDECB        CLEAR THE ECB\n         MVC   DXDREPLY,COMMBLKS    CLEAR THE REPLY AREA\n         MVC   DXDWTOR(WTOR02L),WTOR02I\n         LA    R2,DXDECB            ECB ADDRESS\n         LA    R3,DXDREPLY          REPLY ADDRESS\n         WTOR  ,                    ISSUE WTOR                         +\n               (R3),                .. REPLY ADDRESS                   +\n               L'DXDREPLY,          .. REPLY LENGTH                    +\n               (R2),                .. ECB'S ADDRESS                   +\n               MF=(E,DXDWTOR)       .. EXECUTE FORM, LIST FORM ADDRESS\n         B     PROC0020             CHECK FOR MORE WORK\nERR0010  DS    0H\n         ITRACE ID=PRTAFAIL         SUBTASK ATTACH FAILED\n         STH   R15,DXDRC            SAVE RETURN CODE\n         LR    R2,R15               SAVE RETURN CODE\n         ABEND $U0003,DUMP,,USER    TIME TO FIX TPX\nERR0020  DS    0H\n         ITRACE ID=NOPARM           NO PARM ON EXEC STATEMENT\n         MVC   PRTMSGID(MSG04L),MSG04\n         BAL   R8,PRT0000           PRINT MESSAGE\n         B     EXIT0000             AND EXIT\nERR0030  DS    0H\n         ITRACE ID=LONGPARM         PARAMETER IS TOO LONG\n         MVC   PRTMSGID(MSG05L),MSG05\n         BAL   R8,PRT0000           PRINT MESSAGE\n         B     EXIT0000             AND EXIT\nPRT0000  DS    0H\n         ITRACE ID=PRINT\n         LA    R1,PRTBLOK           PRINT INTERFACE PARAMETERS\n         MVI   PRTCMD,$PRTPRT       SET COMMAND\n         L     R15,APRTQ            PRINT MODULE ADDRESS\n         BALR  R14,R15              LINK TO PRINT\n         BR    R8                   COMPLETE\nEXIT0000 DS    0H\n         ITRACE ID=STARTEOJ\n         OI    COMMEOJ,$EOJ1        SET SHUTDOWN PHASE 1\n         MVC   PRTMSGID(MAINM90L),MAINM90\n         BAL   R8,PRT0000           PRINT MESSAGE\n         L     R15,AVTAM            VTAM MODULE ENTRY POINT\n         BALR  R14,R15              CALL VTAM TO SHUTDOWN\n         MVC   PRTMSGID(MAINM99L),MAINM99\n         BAL   R8,PRT0000           PRINT MESSAGE\n         TM    COMMFLAG,$ABEND      ABEND REQUESTED?\n         BNO   EXIT0010             NO\n         ITRACE ID=ABEND\n         ABEND $U0004,DUMP,,USER    ABEND\nEXIT0010 DS    0H\n         OI    COMMEOJ,$EOJ2        SET SHUTDOWN PHASE 2\n         ITRACE ID=EOJ2             STARTING PHASE 2\n         L     R15,ACONV            CONVERSATION ADD/DELETE ENTRY POINT\n         BALR  R14,R15              DELETE ALL CONVBLOK'S\n         ITRACE ID=PRTEOJ           SHUTTING DOWN PRINT\n         POST  PRTWORK              SHUTDOWN PRINT TASK\n         WAIT  1,ECB=PRTTERM        WAIT FOR PRINT SUBTASK TERMINATION\n         LA    R1,COMMPRT           PRINT SUBTASK TCB ADDRESS\n         ITRACE ID=DTCHPRT,         DETACHING PRINT SUBTASK            +\n               RDATA1=R1            .. PRINT SUBTASK'S TCB ADDRESS\n         DETACH (1)                 DETACH PRINT SUBTASK\n         L     R0,TRSIZE            TRACE TABLE SIZE\n         L     R1,TRADDR            TRACE TABLE STORAGE ADDRESS\n         FREEMAIN RU,A=(1),LV=(0)   FREEMAIN TRACE TABLE STORAGE\n         L     R2,COMMDXDA          SAVE WORK AREA STORAGE ADDRESS\n         LH    R3,DXDRC             SAVE RETURN CODE\n         DELETE EP=TPXCOMM          DELETE COMMON MODULE\n         L     R0,DXDSIZE           WORK AREA STORAGE SIZE\n         L     R13,4(R13)           RESTORE CALLER'S SAVE AREA ADDRESS\n         FREEMAIN RU,A=(2),LV=(0)   FREEMAIN WORK AREA STORAGE\n         LR    R15,R3               SET RETURN CODE\n         L     R14,12(R13)          RESTORE CALLER'S R14\n         LM    R0,R12,20(R13)       RESTORE CALLER'S R0-R12\n         BR    R14                  EXIT\nACBMVC   MVC   COMMAPLN(0),2(R1)    COPY ACB NAME TO COMMON AREA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDMAIN)           DISPLACEMENT TO WORK AREA\nDXDSIZE  CXD                        WORK AREA TOTAL SIZE\nMOD      DS    0A\n         MOD   TYPE=MAIN\n         COPY  TPXMODS              COPY MODULE DEFINITIONS\nMODL     EQU   *-MOD\nWTOR01I  WTOR  'TPXMAIN00I   TPX STC READY',                           +\n               *,                   .. REPLY ADDRESS                   +\n               8,                   .. REPLY LENGTH                    +\n               *,                   .. ECB ADDRESS                     +\n               MF=L                 .. LIST FORM\nWTOR01L  EQU   *-WTOR01I\nWTOR02I  WTOR  'TPXMAIN04E   INVALID COMMAND',                         +\n               *,                   .. REPLY ADDRESS                   +\n               8,                   .. REPLY LENGTH                    +\n               *,                   .. ECB ADDRESS                     +\n               MF=L                 .. LIST FORM\nWTOR02L  EQU   *-WTOR02I\nWTO01    WTO   'TPXMAIN01E * SYSPRINT DD STATEMENT IS NOT PRESENT',    +\n               MF=L\nWTO01L   EQU   *-WTO01\nH1       DC    H'1'\nH8       DC    H'8'\nMSG03    DS    0C\n         DC    CL11'TPXMAIN03I'\n         DC    C'Initialization starting'\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    CL11'TPXMAIN04E'\n         DC    C'No PARM= specified on EXEC statement'\nMSG04L   EQU   *-MSG04\nMSG05    DS    0C\n         DC    CL11'TPXMAIN05E'\n         DC    C'PARM= value is too long'\nMSG05L   EQU   *-MSG05\nMAINM90  DS    0C\n         DC    CL11'TPXMAIN90I'\n         DC    C'Termination starting'\nMAINM90L EQU   *-MAINM90\nMAINM99  DS    0C\n         DC    CL11'TPXMAIN99I'\n         DC    C'Termination complete'\nMAINM99L EQU   *-MAINM99\nATTCHI   ATTACH EP=TPXPRTS,         ATTACH LIST FORM                   +\n               ECB=*,               .. TERMINATION ECB'S ADDRESS       +\n               PURGE=QUIESCE,       .. FINISH UP I/O IN PROGRESS       +\n               SF=L                 .. LIST FORM\nATTCHL   EQU   *-ATTCHI\nH4       DC    H'4'\nDDTBLE   DS    0C\n         DC    CL8'SYSPRINT',AL1($DXDPRT)\n         DC    X'FF'\nSTOPCMD  DC    C'STOP '\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREA                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDMAIN  DSECT\nDXDID    DS    CL8                  WORK AREA OWNER\nDXDSAVE  DS    18F                  REGISTER SAVE AREA\nDXDACOMM DS    A                    ADDRESS OF COMM AREA\nDXDATTCH DS    (ATTCHL)X            RESERVE ROOM FOR ATTACH LIST FORM\nDXDECB   DS    F                    ECB FOR WTOR\nDXDWTOR  DS    (WTOR02L)X           RESERVE ROOM FOR WTOR LIST FORM\nDXDRC    DS    H                    RETURN CODE FROM SYSTEM MACRO\nDXDDD    DS    X                    DD'S PRESENT\n$DXDPRT  EQU   X'80'                SYSPRINT DD PRESENT\nDXDREPLY DS    CL8                  WTOR REPLY\n* ------------------------------------------------------------------- *\n*        PRINT QUEUEING REQUEST BLOCK                                 *\n* ------------------------------------------------------------------- *\n         PRTBLOK  DSECT=NO\n* ------------------------------------------------------------------- *\n*        VTAM CONVERSATION BLOCK                                      *\n* ------------------------------------------------------------------- *\n         CONVBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*        COMMON MODULE                                                *\n* ------------------------------------------------------------------- *\n         TPXCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*        DD TABLE DSECT                                               *\n* ------------------------------------------------------------------- *\nDDDSECT  DSECT\nDDNAME   DS    CL8\nDDID     DS    X\nDDL      EQU   *-DDDSECT\n* ------------------------------------------------------------------- *\n*        PSA, TCB, TIOT                                               *\n* ------------------------------------------------------------------- *\n         IHAPSA LIST=NO\n         IKJTCB LIST=NO\n         IEFTIOT1\n         COPY  REGEQU\n         ABCODES\n         END   TPXMAIN\n./ ADD NAME=TPXPARM  0100-95102-95102-1953-00265-00265-00000-TPXEXIT\n         TITLE 'TPXPARM   PARM MODULE'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TPXPARM - PARAMETER INTERPRETER                       *\n*                                                                     *\n*  Function:                                                          *\n*   Parm reader module.  TPXMAIN LOADs and links to this module       *\n*   during TPX start-up.   All parameters are processed via this      *\n*   module.  All indicators and parameter values are set in fields    *\n*   in TPXCOMM.   If any serious errors are detected $ABORT is set.   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTPXPARM CSECT\nTPXPARM AMODE 31\nTPXPARM RMODE 24\n         USING TPXCOMM,R11           DEFINE BASE\n         STM   R14,R12,12(R13)       SAVE ENTRY POINT REGISTERS\n         LR    R12,R15               LOAD BASE\n         USING TPXPARM,R12           DEFINE BASE\n         B     PARM0010              SKIP EYECATCHERS\n         DC    ((PFXMODNM-MODPRFX)-(*-TPXPARM))X'00'\n         DC    CL8'TPXPARM'          MODULE NAME\n         DC    CL8'&SYSDATE'         DATE ASSEMBLED\n         DC    CL6'&SYSTIME'         TIME ASSEMBLED\nPARM0010 DS    0H\n         GETMAIN RU,                 ACQUIRE WORK AREA STORAGE         +\n               LV=WORKL,             .. WORK AREA SIZE                 +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R13,4(R1)             SAVE CALLER'S SAVE AREA ADDRESS\n         ST    R1,8(R13)             CHAIN NEW WORK AREA TO CALLER'S\n         LR    R13,R1                SAVE WORK AREA STORAGE\n         USING WORK,R13              DEFINE WORK AREA BASE\n         ITRACE ID=INIT\n         MVI   PRTCC,C' '            INITIALIZE PRINT I/O AREA\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         MVC   WORKDCB(SYSINL),SYSIN COPY DCB TO WORK AREA\n         MVC   WORKOC(OPENL),OPENI   COPY OPEN LIST FORM\n         LA    R8,WORKDCB            DCB'S ADDRESS\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         OPEN  ((R8)),MF=(E,WORKOC)  OPEN THE DCB\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\nPARM0020 DS    0H\n         ITRACE ID=READCARD\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         GET   (R8),WORKIO           READ A CONTROL STATEMENT\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         MVC   PRTMSGID(MSG01L),MSG01\n         MVC   PRTMSGID+(MSG01D-MSG01)(L'MSG01D),WORKIO\n         BAL   R9,PRT0000            PRINT PARAMETER STATEMENT\n         CLI   WORKIO,C'*'           COMMENT STATEMENT?\n         BE    PARM0020              YES\n         CLC   ABNDSTMT,WORKIO       ABEND STATEMENT?\n         BE    ABEND000              YES\n         CLC   APPLSTMT,WORKIO       APPLID STATEMENT?\n         BE    APPL0000              YES\n         MVC   PRTMSGID(MSG02L),MSG02\n         BAL   R9,PRT0000            PRINT ERROR MESSAGE\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         B     PARM0020              READ NEXT STATEMENT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PROCESS APPLID STATEMENT                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nAPPL0000 DS    0H\n         ITRACE ID=APPLSTMT          PROCESSING APPLID STATEMENT\n         CLC   COMMAPLN,COMMBLKS     APPLID PROCESSED ALREADY?\n         BNE   APPL0030              YES.. DON'T ALLOW IT TWICE\n         LA    R1,WORKIO+L'APPLSTMT  FIRST CHARACTER OF APPLID\n         CLI   0(R1),C' '            FIRST CHARACTER BLANK?\n         BE    APPL0040              YES.. NOT VALID\n         LA    R2,COMMAPLN           APPLID IN COMM AREA\n         SR    R3,R3                 CLEAR FOR LENGTH OF APPLID\n         LA    R4,8                  MAXIMUM LENGTH OF APPLID\nAPPL0010 DS    0H\n         CLI   0(R1),C' '            END OF NAME REACHED?\n         BE    APPL0020              YES\n         MVC   0(1,R2),0(R1)         COPY TO COMM AREA\n         LA    R1,1(R1)              NEXT\n         LA    R2,1(R2)              NEXT\n         LA    R3,1(R3)              LENGTH = LENGTH + 1\n         BCT   R4,APPL0010           LOOP\n         CLI   0(R1),C' '            BLANK?\n         BNE   APPL0050              NO.. NAME IS TOO LONG\nAPPL0020 DS    0H\n         STC   R3,COMMAPLL           SET APPLID LENGTH\n         MVC   PRTMSGID(MSG03L),MSG03\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0020              READ NEXT CONTROL STATEMENT\nAPPL0030 DS    0H\n         ITRACE ID=DUPAPPL\n         MVC   PRTMSGID(MSG04L),MSG04\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0020              READ NEXT CONTROL STATEMENT\nAPPL0040 DS    0H\n         ITRACE ID=BLNKAPPL\n         MVC   PRTMSGID(MSG05L),MSG05\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0020              READ NEXT CONTROL STATEMENT\nAPPL0050 DS    0H\n         ITRACE ID=LONGAPPL\n         MVC   PRTMSGID(MSG06L),MSG06\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM0020              READ NEXT CONTROL STATEMENT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PROCESS ABEND STATEMENT                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\nABEND000 DS    0H\n         ITRACE ID=ABNDSTMT          PROCESSING ABEND STATEMENT\n         TM    COMMFLAG,$ABEND       ABEND FLAG ALREADY SET?\n         BO    ABEND010              YES\n         MVC   PRTMSGID(MSG09L),MSG09 SET MESSAGE\n         BAL   R9,PRT0000            PRINT MESSAGE\n         OI    COMMFLAG,$ABEND       SET ABEND FLAG\n         B     PARM0020              READ NEXT CONTROL STATEMENT\nABEND010 DS    0H\n         ITRACE ID=DUPABEND          PROCESSING ABEND STATEMENT\n         MVC   PRTMSGID(MSG10L),MSG10 SET MESSAGE\n         BAL   R9,PRT0000            PRINT MESSAGE\n         OI    COMMFLAG,$ABORT       SET ABORT FLAG\n         B     PARM0020              READ NEXT CONTROL STATEMENT\n* ------------------------------------------------------------------- *\n*             CLOSE READER DCB                                        *\n* ------------------------------------------------------------------- *\nPARM9000 DS    0H\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         ITRACE ID=CARDEOF           EOF ON SYSIN\n         TM    COMMFLAG,$ABORT       ABORT FLAG SET?\n         BO    PARM9010              YES\n         MVC   PRTMSGID(MSG07L),MSG07\n         BAL   R9,PRT0000            PRINT MESSAGE\n         B     PARM9020\nPARM9010 DS    0H\n         MVC   PRTMSGID(MSG08L),MSG08\n         BAL   R9,PRT0000            PRINT MESSAGE\nPARM9020 DS    0H\n         MVC   WORKOC(CLOSEL),CLOSEI COPY CLOSE LIST FORM\n         BAL   R14,AM24              SWITCH TO 24-BIT MODE\n         CLOSE ((R8)),MF=(E,WORKOC)  CLOSE DCB\n         BAL   R14,AM31              SWITCH TO 31-BIT MODE\n         ITRACE ID=EXIT\n         LR    R1,R13                SAVE WORK AREA ADDRESS\n         L     R13,4(R13)            RESTORE CALLER'S SAVE AREA ADDRESS\n         FREEMAIN RU,A=(1),LV=WORKL  FREE WORK AREA\n         LM    R14,R12,12(R13)       RESTORE REMAINING REGISTERS\n         SR    R15,R15               SET RETURN CODE\n         BR    R14                   AND EXIT\n* ------------------------------------------------------------------- *\n*             QUEUE OUTPUT TO PRINT SUBTASK                           *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         LA    R1,PRTBLOK            PRINT REQUEST PARAMETER BLOCK\n         MVI   PRTCMD,$PRTASIS       SET COMMAND (PRINT AS IS)\n         L     R15,APRTQ             PRINT QUEUE ENTRY POINT\n         BALR  R14,R15               QUEUE OUTPUT TO PRINT SUBTASK\n         BR    R9                    RETURN\n* ------------------------------------------------------------------- *\n*             ADDRESS MODE SWITCHING                                  *\n* ------------------------------------------------------------------- *\nAM24     DS    0H\n         LA    R14,0(R14)            CLEAR HIGH BIT(S)\n         BSM   R0,R14                RETURN IN 24-BIT MODE\nAM31     DS    0H\n         LA    R14,0(R14)            CLEAR HIGH BIT(S)\n         O     R14,X80               SET HIGH BIT\n         BSM   R0,R14                RETURN IN 31-BIT MODE\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        CONSTANTS                                                   *\n*                                                                    *\n* ------------------------------------------------------------------ *\nX80      DC    A(X'80000000')\nSYSIN    DCB   DSORG=PS,                                               +\n               DDNAME=SYSIN,                                           +\n               RECFM=FB,                                               +\n               LRECL=80,                                               +\n               EODAD=PARM9000,                                         +\n               MACRF=GM\nSYSINL   EQU   *-SYSIN\nOPENI    OPEN  (SYSIN,INPUT),                                          +\n               MF=L\nOPENL    EQU   *-OPENI\nCLOSEI   CLOSE (SYSIN)                                                 +\n               MF=L\nCLOSEL   EQU   *-CLOSEI\nAPPLSTMT DC    C'APPLID='\nABNDSTMT DC    C'ABEND '\nMSG01    DS    0C\n         DC    CL11'TPXPARM01I'\n         DC    C'Parameter statement: '\nMSG01D   DC    CL80' '\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'TPXPARM02E'\n         DC    C'Invalid control statement'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'TPXPARM03I'\n         DC    C'APPLID statement processed successfully'\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    CL11'TPXPARM04E'\n         DC    C'APPLID has already been defined'\nMSG04L   EQU   *-MSG04\nMSG05    DS    0C\n         DC    CL11'TPXPARM05E'\n         DC    C'First character of APPLID is blank'\nMSG05L   EQU   *-MSG05\nMSG06    DS    0C\n         DC    CL11'TPXPARM06E'\n         DC    C'APPLID is too long (8 characters max)'\nMSG06L   EQU   *-MSG06\nMSG07    DS    0C\n         DC    CL11'TPXPARM07I'\n         DC    C'All control statements processed, no errors'\nMSG07L   EQU   *-MSG07\nMSG08    DS    0C\n         DC    CL11'TPXPARM08E'\n         DC    C'Error(s) detected in control statements, execution wil+\n               l be aborted'\nMSG08L   EQU   *-MSG08\nMSG09    DS    0C\n         DC    CL11'TPXPARM09I'\n         DC    C'ABEND flag set successfully'\nMSG09L   EQU   *-MSG09\nMSG10    DS    0C\n         DC    CL11'TPXPARM10I'\n         DC    C'ABEND flag has already been set'\nMSG10L   EQU   *-MSG10\n         LTORG\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        WORK AREAS                                                  *\n*                                                                    *\n* ------------------------------------------------------------------ *\nWORK     DSECT\nWORKSAVE DS    18F                   REGISTER SAVE AREA\nWORKDCB  DS    (SYSINL)X             DCB\nWORKOC   DS    (OPENL)X              OPEN/CLOSE WORK AREA\nWORKIO   DS    0CL80                 CARD I/O AREA\nWORKIO01 DS    CL9\nWORKIO10 DS    CL10\nWORKIO20 DS    CL10\nWORKIO30 DS    CL10\nWORKIO40 DS    CL10\nWORKIO50 DS    CL10\nWORKIO60 DS    CL10\nWORKIO70 DS    CL10\nWORKIO80 DS    C\n         PRTBLOK DSECT=NO\nWORKL    EQU   *-WORK\n* ------------------------------------------------------------------ *\n*              COMMON DATA MAP                                       *\n* ------------------------------------------------------------------ *\n         TPXCOMM TYPE=DSECT\n* ------------------------------------------------------------------ *\n*              EQUATES                                               *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         END  TPXPARM\n./ ADD NAME=TPXPRTQ  0100-95102-95102-1953-00090-00090-00000-TPXEXIT\n         TITLE 'TPXPRTQ  QUEUE WORK TO PRINT SUB-TASK'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TPXPRTQ - Queue work to print sub-task                *\n*                                                                     *\n*  Function:                                                          *\n*   Print may be generated under multiple tasks (the main task and    *\n*   VTAM asynchronous exits).  Print is done by a separate subtask.   *\n*   This is a subroutine to add elements to the print subtask work    *\n*   queue.  This module does not follow the \"normal\" TPX linkage or   *\n*   work area usage.  Any work areas must be allocated and released   *\n*   dynamically.                                                      *\n*                                                                     *\n*   At entry this routine expects                                     *\n*     R1  - PRTBLOK Address                                           *\n*     R11 - TPXCOMM address                                           *\n*     R13 - Callers save area address                                 *\n*     R14 - Return address                                            *\n*     R15 - Entry point address                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTPXPRTQ  CSECT\nTPXPRTQ  AMODE 31\nTPXPRTQ  RMODE ANY\n         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS\n         LR    R12,R15               COPY BASE ADDRESS\n         USING TPXPRTQ,R12           DEFINE BASE\n         USING TPXCOMM,R11           DEFINE BASE\n         LR    R10,R1                COPY PRTBLOK ADDRESS\n         USING PRTBLOK,R10           DEFINE BASE\n         B     PRT0000               SKIP EYECATCHERS\n         DC    ((PFXMODNM-MODPRFX)-(*-TPXPRTQ))X'00'\n         DC    CL8'TPXPRTQ'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\n         DC    C'QUEUE WORK TO PRINT SUBTASK'\nPRT0000  DS    0H\n         GETMAIN RU,LV=72            ACQUIRE STORAGE FOR SAVE AREA\n         ST    R13,4(R1)             SAVE SAVE AREA ADDRESS\n         ST    R1,8(R13)             CHAIN TO PREVIOUS SAVE AREA\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         ITRACE ID=ENTRY\n         GETMAIN RU,                 ACQUIRE STORAGE FOR PRINT BLOCK   +\n               LV=PRTBLOKL           .. SIZE\n         MVC   0(PRTBLOKL,R1),PRTBLOK\n         MVI   PRTCC,C' '            CLEAR CARRIAGE CONTROL\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         LR    R10,R1                COPY BLOCK'S ADDRESS\n         MVC   PRTEYE,PRTID          SET EYECATCHER\nPRT0010  DS    0H\n         L     R2,PRTREQ             FIRST REQUEST BLOCK'S ADDRESS\n         ST    R2,PRTNEXT            SET CHAIN POINTER\n         CS    R2,R10,PRTREQ         ADD NEW BLOCK TO CHAIN\n         BNE   PRT0010               UNSUCCESSFUL.. TRY AGAIN\n         ITRACE ID=QUEUED,           NEW BLOCK IS ON THE QUEUE         +\n               RDATA1=R10,           .. NEW BLOCK'S ADDRESS            +\n               RDATA2=R2             .. PREVIOUS BLOCK'S ADDRESS\n         POST  PRTWORK               POST PRINT TASK ECB\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\n         ITRACE ID=EXIT\n         LR    R1,R13                COPY SAVE AREA ADDRESS\n         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS\n         FREEMAIN RU,A=(1),LV=72     FREEMAIN SAVE AREA\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        CONSTANTS                                                   *\n*                                                                    *\n* ------------------------------------------------------------------ *\nPRTID    DC    CL8'PRTBLOK'\n         LTORG\n* ------------------------------------------------------------------ *\n*              PRINT REQUEST BLOCK                                   *\n* ------------------------------------------------------------------ *\n         PRTBLOK  DSECT=YES\n* ------------------------------------------------------------------ *\n*              COMMON DATA MAP                                       *\n* ------------------------------------------------------------------ *\n         TPXCOMM TYPE=DSECT\n* ------------------------------------------------------------------ *\n*                                                                    *\n*              EQUATES                                               *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         END  TPXPRTQ\n./ ADD NAME=TPXPRTS  0100-95102-95102-1953-00238-00238-00000-TPXEXIT\n         TITLE 'TPXPRTS    PRINT SUBTASK'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TPXPRTS - Print subtask                               *\n*                                                                     *\n*  Function:                                                          *\n*   TPX runs with asynchronous exits, therefore it is possible that   *\n*   multiple tasks would try to print at the same time.  All tasks    *\n*   that want to print queue requests for this task from PRTREQ in    *\n*   the common area.                                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTPXPRTS  CSECT\nTPXPRTS  AMODE 31\nTPXPRTS  RMODE 24\n         USING TPXPRTS,R12           DEFINE BASE\n         USING PRTBLOK,R7            DEFINE BASE\n         USING TPXCOMM,R11           DEFINE BASE\n         STM   R14,R12,12(R13)       CHAIN REGISTERS\n         LR    R12,R15               COPY ENTRY POINT ADDRESS\n         L     R11,0(R1)             LOAD TPXCOMM'S ADDRESS\n         GETMAIN R,LV=WORKL          ACQUIRE STORAGE FOR WORK AREA\n         B     PRT0000\n         DC    ((PFXMODNM-MODPRFX)-(*-TPXPRTS))X'00'\n         DC    CL8'TPXPRTS'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nPRT0000  DS    0H\n         USING WORKAREA,R1           DEFINE BASE\n         XC    WORKAREA+000(256),WORKAREA+000\n         XC    WORKAREA+256(WORKL-256),WORKAREA+000\n         ST    R13,4(R1)             CHAIN PREVIOUS SAVE AREA TO OURS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO PREVIOUS\n         LR    R13,R1                COPY WORK AREA ADDRESS\n         DROP  R1\n         USING WORKAREA,R13          DEFINE BASE\n         ST    R12,APRTS             SET OUR ENTRY POINT IN COMMON\n         ITRACE ID=INIT\n         MVC   WKDCB(DCBL),DCBI      INITIALIZE DCB IN WORK AREA\n         MVI   WKCC,C' '             INITIALIZE CARRIAGE CONTROL\n         MVC   WKDATE(PRTLRECL-1),WKCC\n         MVC   WKOCPL(OCPLL),OCPLI   INITIALIZE OPEN/CLOSE PARM LIST\n         ZAP   WKLINE,P0             INITIALIZE LINE COUNT\n         ZAP   WKPAGE,P0             INITIALIGE PAGE COUNT\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         OPEN  (WKDCB,OUTPUT),MF=(E,WKOCPL)\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         TM    PRTWORK,X'40'         ECB ALREADY POSTED?\n         BO    PRT0020               GET BUSY\nPRT0010  DS    0H\n         LA    R1,PRTWORK            WORK TO DO ECB\n         XC    PRTWORK,PRTWORK       RESET ECB\n         ITRACE ID=WORKWAIT,         WAITING FOR WORK                  +\n               RDATA1=R1             .. ECB'S ADDRESS\n         WAIT  1,ECB=(1)             WAIT FOR WORK TO DO ECB\n         ITRACE ID=WOKEUP\nPRT0020  DS    0H\n         SR    R1,R1                 CLEAR REGISTER\nPRT0030  DS    0H\n         ICM   R10,15,PRTREQ         FIRST REQUEST BLOCK\n         BZ    PRT0210               NOTHING ON CHAIN\n         CS    R10,R1,PRTREQ         GET REQUEST CHAIN\n         BNE   PRT0030\n         USING PRTBLOK,R10           DEFINE BASE\n         ITRACE ID=HAVEQ,            WE HAVE THE QUEUE                 +\n               RDATA1=R10            .. FIRST (LAST) QUEUE BLOCK\nPRT0040  DS    0H\n         L     R2,PRTNEXT            NEXT BLOCK'S ADDRESS\n         ST    R1,PRTNEXT            SET POINTER\n         LR    R1,R10                SWITCH\n         LTR   R10,R2                SWITCH\n         BNZ   PRT0040               LOOP\n         LR    R10,R1                COPY FIRST BLOCK'S ADDRESS\nPRT0050  DS    0H\n         CLI   PRTCMD,$PRTHEAD       FORCED HEADING?\n         BE    PRT0140               YES\n         MVC   WKCC,PRTCC            COPY CARRIAGE CONTROL\n         TIME  DEC\n         STM   R0,R1,WKTIMDAY        SAVE TIME AND DATE\n         MVC   WKTIME,TIMEEDWD       INITIALIZE WITH EDIT WORD\n         ED    WKTIME,WKTIMDAY       EDIT TIME\n         MVC   WKDATE,DATEEDWD       INITIALIZE WITH EDIT WORD\n         ED    WKDATE,WKTIMDAY+5     EDIT DATE\n         MVC   WKMSGID,PRTMSGID      COPY MESSAGE ID\n         LA    R1,WKMSGID+(L'WKMSGID-1)\nPRT0060  DS    0H\n         CLI   0(R1),C' '            BLANK?\n         BNE   PRT0070               NO\n         BCT   R1,PRT0060            LOOP\nPRT0070  DS    0H\n         CLI   0(R1),C'E'            'ERROR' MESSAGE\n         BNE   PRT0080\n         MVI   WKMSGERR,C'*'         FLAG ERROR MESSAGE\nPRT0080  DS    0H\n         CLI   PRTCMD,$PRTASIS       PRINT WITHOUT COMPRESSION?\n         BE    PRT0110               YES\n         LA    R1,WKDATA             FIRST PRINT AREA BYTE\n         LA    R2,PRTDATA            PRINT OUTPUT AREA BYTE\n         LA    R3,L'PRTDATA          MAXIMUM LOOPS\nPRT0090  DS    0H\n         CLC   COMMBLKS(2),0(R2)     2 BLANKS IN A ROW?\n         BE    PRT0100               YES\n         MVC   0(1,R1),0(R2)         COPY TO OUTPUT AREA\n         LA    R1,1(R1)              NEXT OUTPUT BYTE\nPRT0100  DS    0H\n         LA    R2,1(R2)              NEXT INPUT BYTE\n         BCT   R3,PRT0090            LOOPS\n         B     PRT0120\nPRT0110  DS    0H\n         MVC   WKDATA,PRTDATA        COPY AS IS\nPRT0120  DS    0H\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         PUT   WKDCB,WKCC            PRINT\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         AP    WKLINE,P1             ADD 1 TO LINE COUNT\n         CLI   WKCC,C' '             SINGLE SPACE\n         BE    PRT0130               YES\n         AP    WKLINE,P1             ADD 1 TO LINE COUNT\n         CLI   WKCC,C'0'             DOUBLE SPACE?\n         BE    PRT0130               YES\n         AP    WKLINE,P1             ADD 1 TO LINE COUNT\nPRT0130  DS    0H\n         MVI   WKCC,C' '             INITIALIZE CARRIAGE CONTROL\n         MVC   WKDATE(PRTLRECL-1),WKCC\n         CP    WKLINE,COMMMAXL       TIME FOR HEADING?\n         BNH   PRT0200               NOT YET\nPRT0140  DS    0H\n         AP    WKPAGE,P1             ADD 1 TO PAGE COUNT\n         MVC   WKDATA(HEADINGL),HEADING\n         MVC   WKDATA+(HEADPAGE-HEADING)(L'HEADPAGE),PAGEEDWD\n         ED    WKDATA+(HEADPAGE-HEADING)(L'HEADPAGE),WKPAGE\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         PUT   WKDCB,WKCC            PRINT\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         ZAP   WKLINE,P1             RESET LINE COUNT\n         MVI   WKCC,C' '             INITIALIZE CARRIAGE CONTROL\n         MVC   WKDATE(PRTLRECL-1),WKCC\nPRT0200  DS    0H\n         LR    R1,R10                COPY PRTBLOK ADDRESS\n         L     R10,PRTNEXT           NEXT BLOCK'S ADDRESS\n         FREEMAIN RU,A=(1),LV=PRTBLOKL\n         LTR   R10,R10               ANY MORE PRINT BLOCKS?\n         BNZ   PRT0050               YES\n         OC    PRTWORK,PRTWORK       ECB POSTED AGAIN?\n         BNZ   PRT0020               YES, PROCESS QUEUE\nPRT0210  DS    0H\n         TM    COMMEOJ,$EOJ2         SHUTDOWN PHASE 2?\n         BO    EXIT0000              YES.. IT'S MILLER TIME\n         B     PRT0010               NO, WAIT\n* ------------------------------------------------------------------- *\n*        ADDRESSING MODE SWITCHING                                    *\n* ------------------------------------------------------------------- *\nAM24     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         BSM   R0,R15                RETURN IN 24-BIT MODE\nAM31     DS    0H\n         LA    R15,0(R15)            CLEAR HIGH BIT(S)\n         O     R15,X80               SET HIGH BIT ON\n         BSM   R0,R15                RETURN IN 31-BIT MODE\n* ------------------------------------------------------------------- *\n*        EXIT                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         BAL   R15,AM24              SWITCH TO 24-BIT MODE\n         CLOSE WKDCB,MF=(E,WKOCPL)   CLOSE DCB\n         BAL   R15,AM31              SWITCH TO 31-BIT MODE\n         LR    R1,R13                COPY WORK AREA ADDRESS\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         FREEMAIN R,A=(1),LV=WORKL   FREE WORK AREA\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\nPRTMVC   MVC   WKDATE(0),PRTDATA     COPY PRINT DATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nX80      DC    A(X'80000000')\nDATEEDWD DC    X'4021204B202020'\nTIMEEDWD DC    X'4021204B20204B2020'\nPAGEEDWD DC    X'402020202120'\nP0       DC    P'0'\nP1       DC    P'1'\nHEADING  DS    0C\n         DC    51C' '\n         DC    C'TPX LOG'\n         DC    50C' '\n         DC    C'PAGE '\nHEADPAGE DC    CL6' '\nHEADINGL EQU   *-HEADING\nDCBI     DCB   DSORG=PS,                                               +\n               DDNAME=SYSPRINT,                                        +\n               RECFM=FBA,                                              +\n               LRECL=PRTLRECL,                                         +\n               MACRF=PM\nDCBL     EQU   *-DCBI\nOCPLI    OPEN  (*,OUTPUT),MF=L\nOCPLL    EQU   *-OCPLI\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        WORK AREAS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWORKAREA DSECT\nWORKSAVE DS    18F                   REGISTER SAVE AREA\nWKTIMDAY DS    2F                    TIME/DATE\nWKLINE   DS    PL3\nWKPAGE   DS    PL3\nWKCC     DS    C                     CARRIAGE CONTROL\nWKDATE   DS    CL7                   DATE\n         DS    C\nWKTIME   DS    CL9                   TIME\n         DS    C\nWKMSGID  DS    CL11                  MESSAGE ID\n         DS    C\nWKMSGERR DS    C                     ERROR MESSAGE FLAG\n         DS    C\nWKDATA   DS    CL120                 PRINT DATA\nPRTLRECL EQU   *-WKCC\nWKDCB    DS    0A,(DCBL)X            RESERVE SPACE FOR DCB\nWKOCPL   DS    (OCPLL)X\nWORKL    EQU   *-WORKAREA\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         TPXCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              PRINT REQUEST BLOCK                                    *\n* ------------------------------------------------------------------- *\n         PRTBLOK\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  TPXPRTS\n./ ADD NAME=TPXVSUB  0100-95102-95102-1953-00213-00213-00000-TPXEXIT\n         TITLE 'VTAM SUB-FUNCTIONS'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TPXVSUB- VTAM SUB-FUNCTIONS                           *\n*                                                                     *\n*  Purpose: Issue VTAM macros.  This was done in a separate module    *\n*           to allow VTAM commands to be issued in a subroutine-like  *\n*           manner from many other modules.                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVSUB     TPXPRFX 'VTAM SUBFUNCTIONS'\nTPXVSUB  AMODE 31\nTPXVSUB  RMODE ANY\n         LR    R8,R1                 COPY PARM BLOCK ADDRESS\n         USING VTAMBLOK,R8           DEFINE BASE\n         L     R7,VTAMCONV           CONVERSATION BLOCK ADDRESS\n         USING CONVBLOK,R7           DEFINE BASE\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    VTAM0010              YES\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         MVI   PRTCC,C' '            INITIALIZE PRINT I/O AREA\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         ITRACE ID=INITDONE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Process the requested function                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nVTAM0010 DS    0H\n         ITRACE ID=ENTRY,            TRACE ENTRY                       +\n               DATA1=VTAMCMD         .. TRACE COMMAND\n         CLI   VTAMCMD,$VTAMSND      ISSUE A SEND?\n         BE    SEND0000              YES\n         CLI   VTAMCMD,$VTAMRCV      ISSUE A RECEIVE?\n         BE    RECV0000              YES\n         CLI   VTAMCMD,$VTAMDLO      DEALLOCATE A CONVERSATION\n         BE    DALO0000              YES\n         CLI   VTAMCMD,$VTAMCHK      ISSUE A CHECK?\n         BE    CHECK000              YES\n         ABEND $U0009,DUMP,,USER     INVALID COMAND\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Issue a SEND                                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nSEND0000 DS    0H\n         ITRACE ID=SEND,             ISSUE A SEND                      +\n               DATA1=CONVLU          LU'S NAME\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         L     R3,CONVRPL            RPL'S ADDRESS\n         SR    R4,R4                 CLEAR REGISTER\n         ICM   R4,3,0(R2)            TOTAL DATA LENGTH\n         XC    CONVECB,CONVECB       CLEAR ECB\n         MVC   DXDFUNC,SEND          LAST FUNCTION IS SEND\n         APPCCMD CONTROL=SEND,       ISSUE APPC CMD                    +\n               QUALIFY=DATA,         .. SEND DATA                      +\n               RPL=(R3),             .. RPL ADDRESS                    +\n               AREA=(R2),            .. I/O AREA                       +\n               RECLEN=(R4),          .. LENGTH OF DATA                 +\n               CONMODE=CS,           .. CONTINUE SPECIFIC              +\n               CONVID=CONVCID,       .. CONVERSATION ID                +\n               ECB=CONVECB,          .. ECB                            +\n               OPTCD=ASY             .. ASYNCHRONOUS\n         MVI   CONVFUNC,$CONVFS      FUNCTION IS A SEND\n         B     EXIT0000              EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Issue a RECEIVE                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nRECV0000 DS    0H\n         ITRACE ID=RECEIVE,          ISSUE A RECEIVE                   +\n               DATA1=CONVLU          .. LU'S NAME\n         L     R2,CONVIOA            I/O AREA ADDRESS\n         L     R3,CONVRPL            RPL'S ADDRESS\n         L     R4,=A(COMMIOSZ)       MAXIMUM I/O AREA SIZE\n         XC    CONVECB,CONVECB       CLEAR THE ECB\n         MVC   DXDFUNC,RECEIVE       LAST FUNCTION IS RECEIVE\n         APPCCMD CONTROL=RECEIVE,    ISSUE A RECEIVE                   +\n               QUALIFY=SPEC,         .. FOR SPECIFIC CONVERSATION      +\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               FILL=LL,              .. ONLY 1 LOGICAL RECORD          +\n               AREA=(R2),            .. I/O AREA ADDRESS               +\n               AREALEN=(R4),         .. I/O AREA SIZE                  +\n               CONMODE=CS,           .. CONTINUE SPECIFIC              +\n               CONVID=CONVCID,       .. CONVERSATION ID                +\n               ECB=CONVECB,          .. ECB                            +\n               OPTCD=ASY             .. ASYNCHRONOUS\n         MVI   CONVFUNC,$CONVFR      LAST FUNCTION WAS RECEIVE\n         B     EXIT0000              AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Deallocate a conversation                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nDALO0000 DS    0H\n         ITRACE ID=DEALLOC,          DEALLOCATE A CONVERSATION         +\n               DATA1=CONVLU          .. LU'S NAME\n         L     R3,CONVRPL            RPL'S ADDRESS\n         MVC   DXDFUNC,DEALLOC       LAST FUNCTION IS DEALLOC\n         APPCCMD CONTROL=DEALLOC,    DE-ALLOCATE THE CONVERSATION      +\n               QUALIFY=DATAFLU,      .. UNCONDITIONAL WITH BUFFER FLUSH+\n               RPL=(R3),             .. RPL'S ADDRESS                  +\n               CONVID=CONVCID,       .. CONVERSATION ID                +\n               OPTCD=ASY             .. ASYNCHRONOUSLY\n         MVI   CONVFUNC,$CONVFD      LAST FUNCTION WAS DEALLOCATE\n         B     EXIT0000              AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Issue a CHECK                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nCHECK000 DS    0H\n         ITRACE ID=CHECK,            ISSUE A CHECK FOR A CONVERSATION  +\n               DATA1=CONVLU,         .. LU'S NAME                      +\n               DATA2=CONVCID         .. CONVERSATION ID\n         L     R3,CONVRPL            CONVERSATION'S RPL\n         APPCCMD CONTROL=CHECK,      COMPLETE ASYNCHRONOUS EVENT       +\n               RPL=(R3)              .. RPL'S ADDRESS\n         B     EXIT0000              EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        ERROR ROUTINES                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nERR0010  DS    0H\n         ITRACE ID=VTAMERR,          VTAM REQUEST FAILED               +\n               RDATA1=R15,           .. REGISTER 15                    +\n               RDATA2=R0             .. REGISTER 0\n         STH   R15,COMMDWRD          SAVE RETURN CODE\n         MVC   PRTMSGID(MSG01L),MSG01 SET MESSAGE\n         MVC   PRTMSGID+(MSG01FNC-MSG01)(L'MSG01FNC),DXDFUNC\n         UNPK  PRTMSGID+(MSG01RC-MSG01)(L'MSG01RC+1),COMMDWRD(3)\n         MVZ   PRTMSGID+(MSG01RC-MSG01)(L'MSG01RC),HEX0000\n         TR    PRTMSGID+(MSG01RC-MSG01)(L'MSG01RC),HEXCHAR\n         MVI   PRTMSGID+(MSG01RC-MSG01)+L'MSG01RC,C' '\n         BAL   R5,PRT0000            PRINT MESSAGE\n         DC    H'0'\n         B     EXIT0000              AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        PRINT                                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         ITRACE ID=PRINT\n         MVI   PRTCMD,$PRTPRT        SET COMMAND\n         LA    R1,PRTBLOK            PRINT BLOCK ADDRESS\n         L     R15,APRTQ             PRINT QUEUING ENTRY POINT\n         BALR  R14,R15               LINK TO PRINT\n         BR    R5                    DONE\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            CALLER'S SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE CALLER'S REGISTERS\n         SR    R15,R15               ALWAYS A GOOD RETURN CODE\n         BR    R14                   RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDVSUB)            DISPLACEMENT TO WORK AREA\nHEX0000  DC    8X'00'\nHEXCHAR  DC    C'0123456789ABCDEF'\nSEND     DC    CL10'SEND'\nRECEIVE  DC    CL10'RECEIVE'\nDEALLOC  DC    CL10'DEALLOC'\nMSG01    DS    0C\n         DC    CL11'TPXVSUB01E'\nMSG01FNC DC    CL10' '\n         DC    C' failed RC='\nMSG01RC  DC    CL4' '\n         DC    C' '\nMSG01L   EQU   *-MSG01\n* ------------------------------------------------------------------- *\n*              WORK AREA                                              *\n* ------------------------------------------------------------------- *\nDXDVSUB  DSECT\nDXDID    DS   CL8                    WORK AREA OWNER EYECATCHER\nDXDSAVE  DS   18F                    REGISTER SAVE AREA\nDXDFUNC  DS   CL10                   LAST FUNCTION ATTEMPTED\n         PRTBLOK DSECT=NO\n* ------------------------------------------------------------------- *\n*              INTERFACE BLOCK                                        *\n* ------------------------------------------------------------------- *\n         VTAMBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         TPXCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              VTAM CONVERSATION BLOCK                                *\n* ------------------------------------------------------------------- *\n         CONVBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              ACB DSECT                                              *\n* ------------------------------------------------------------------- *\n         IFGACB AM=VTAM\n* ------------------------------------------------------------------- *\n*              RPL AND RPL EXTENSION DSECTS                           *\n* ------------------------------------------------------------------- *\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------- *\n*              EXLIST                                                 *\n* ------------------------------------------------------------------- *\n         IFGEXLST AM=VTAM\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  TPXVSUB\n./ ADD NAME=TPXVTAM  0100-95102-95102-1953-00543-00543-00000-TPXEXIT\n         TITLE 'VTAM COMMUNICATION'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TPXVTAM - VTAM COMMUNICATION                          *\n*                                                                     *\n*  PURPOSE: The TPX logon/logoff user exit will communicate with us   *\n*           using the LU 6.2 protocol.  This module is the main       *\n*           main communication driver for the auth check STC.         *\n*                                                                     *\n*           At TPX STC start-up time the APPLID parameter defines the *\n*           node name the TPX STC will use to identify itself to VTAM.*\n*                                                                     *\n* ------------------------------------------------------------------- *\nVTAM     TPXPRFX 'VTAM COMMUNICATION MASTER'\nTPXVTAM  AMODE 31\nTPXVTAM  RMODE ANY\n         USING TPXVTAM,R12           DEFINE BASE REGISTER\n         CLC   DXDID,MODID           WORK AREA INITIALIZED?\n         BE    VTAM0010              YES\n         MVC   DXDID,MODID           WORK AREA INITIALIZED\n         MVI   PRTCC,C' '            INITIALIZE PRINT I/O AREA\n         MVC   PRTMSGID(L'PRTMSGID+L'PRTDATA),PRTCC\n         GETMAIN RU,                 ACQUIRE STORAGE FOR THE ACB       +\n               LV=ACBL,              .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,COMMACB            SAVE ACB'S ADDRESS\n         LR    R2,R1                 SAVE ACB'S ADDRESS\n         USING IFGACB,R2             DEFINE BASE\n         MVC   0(ACBL,R2),ACBI       INITIALIZE ACB\n         GETMAIN RU,                 ACQUIRE STORAGE FOR EXIT LIST     +\n               LV=EXLSTL,            .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         MVC   0(EXLSTL,R1),EXLSTI   INITIALIZE EXIT LIST\n         ST    R11,ACBUSER           SET USER FIELD TO COMM AREA ADDR\n         LA    R0,COMMAPLL           APPLID LENGTH/NAME ADDRESS\n         ST    R0,ACBAPID            SET ADDRESS IN ACB\n         ST    R1,COMMXLST           SAVE EXIT LIST ADDRESS\n         ST    R1,ACBEXLST           SET EXIT LIST ADDRESS IN ACB\n         USING IFGEXLST,R1           DEFINE BASE\n         MVC   EXLATTNP,AATTN        SET ATTN EXIT ADDRESS\n         MVC   EXLLERP,ALERAD        SET LERAD EXIT ADDRESS\n         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL           +\n               LV=RPLL,              .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,DXDRPL             SAVE RPL'S ADDRESS\n         MVC   0(RPLL,R1),RPLI       INITIALIZE RPL\n         GETMAIN RU,                 ACQUIRE STORAGE FOR RPL EXTENSION +\n               LV=RPLEXTL,           .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         ST    R1,DXDRPLX            SAVE RPL EXTENSION'S ADDRESS\n         MVC   0(RPLEXTL,R1),RPLEXTI INITIALIZE RPL EXTENSION\n         L     R3,DXDRPL             RPL'S ADDRESS\n         USING IFGRPL,R3             DEFINE BASE\n         ST    R1,RPLAAREA           SET RPL EXTENSION'S ADDRESS\n         ST    R2,RPLDACB            SET ACB'S ADDRESS\n         ITRACE ID=OPENACB           OPENING ACB\n         GETMAIN RU,                 ACQUIRE STORAGE FOR OPEN          +\n               LV=OPENLL,            .. AREA SIZE                      +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R3,R1                 COPY ADDRESS\n         MVC   0(OPENLL,R3),OPENL    COPY OPEN LIST FORM\n         OPEN  ((R2)),MF=(E,(R3))    OPEN ACB\n         ST    R15,DXDRC             SAVE RETURN CODE\n         FREEMAIN RU,A=(3),LV=OPENLL FREEMAIN OPEN PARM LIST\n         OC    DXDRC,DXDRC           OPEN SUCCESSFUL?\n         BNZ   ERR0000               NO\n         MVC   PRTMSGID(MSG01L),MSG01 SET MESSAGE\n         BAL   R8,PRT0000            PRINT MESSAGE\n         ITRACE ID=SETLOGON          ISSUING SETLOGON\n         L     R2,COMMACB            ACB'S ADDRESS\n         L     R3,DXDRPL             RPL'S ADDRESS\n         SETLOGON ACB=(R2),          ISSUE SETLOGON                    +\n               RPL=(R3),             .. RPL FOR REQUEST                +\n               OPTCD=START           .. ENABLE EXIT\n         ITRACE ID=INITDONE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Scan the conversation blocks.                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nVTAM0010 DS    0H\n         TM    COMMEOJ,$EOJ1         SHUTTING DOWN?\n         BO    EXIT0000              YES\n         XC    COMMVECB,COMMVECB     CLEAR ECB POSTED BY ATTN EXIT\n         ITRACE ID=SCANCONV          STARTING CONVBLOK CHAIN SCAN\n         ICM   R7,15,COMMCONV        FIRST CONVERSATION BLOCK\n         USING CONVBLOK,R7           DEFINE BASE\n         BZ    EXIT0030              NO CONVERSATION BLOCKS\nVTAM0020 DS    0H\n         ST    R7,VTAMCONV           SET CONVERSATION BLOCK ADDRESS\n         TM    CONVSTAT,$CONVERR     DID AN ERROR OCCUR?\n         BO    LOSS0000              YES\n*---------------------------------------------------------------------*\n*        Determine last function on the conversation and test for     *\n*        its completion.                                              *\n*---------------------------------------------------------------------*\nVTAM0030 DS    0H\n         CLI   CONVFUNC,0            ANY FUNCTION?\n         BE    VTAM0300              NO.. ISSUE FIRST RECEIVE\n         TM    CONVECB,X'40'         LAST FUNCTION COMPLETE?\n         BNO   NEXT0000              NO..\n         MVI   VTAMCMD,$VTAMCHK      SET COMMAND (ISSUE A CHECK)\n         BAL   R8,VSUB0000           LINK TO VSUB\n         L     R1,CONVRPLX           RPL EXTENSION'S ADDRESS\n         USING ISTRPL6X,R1           DEFINE BASE\n         ITRACE ID=FUNCDONE,         LAST FUNCTION COMPLETE            +\n               DATA1=CONVLU,         .. TRACE LU NAME                  +\n               DATA2=RPL6RC          .. TRACE RETURN CODES\n         OC    RPL6RC,RPL6RC         SUCCESSFUL?\n         BNZ   ERR0010               NO\n         L     R9,CONVIOA            I/O AREA ADDRESS\n         USING AUTHREC,R9            DEFINE BASE\n         CLI   CONVFUNC,$CONVFR      LAST FUNCTION A RECEIVE?\n         BE    VTAM0040              YES\n         CLI   CONVFUNC,$CONVFS      LAST FUNCTION A SEND?\n         BE    VTAM0200              YES\n         ABEND $U0010,DUMP,,USER\n*---------------------------------------------------------------------*\n*        Last RECEIVE completed, determine user's request             *\n*---------------------------------------------------------------------*\nVTAM0040 DS    0H\n         ITRACE ID=RECVDONE,         RECEIVE COMPLETED                 +\n               DATA1=AUTHREC,        .. 1ST 8 BYTES OF I/O AREA        +\n               DATA2=AUTHREC+8       .. NEXT 8 BYTES\n         CLC   AUTHAUTH,AUTHID       IS THIS AN AUTH CHECK?\n         BE    VTAM0050              YES\n         CLC   AUTHAUTH,EOFID        IS THIS AN EOF RECORD?\n         BE    VTAM0100              YES\n         ABEND $U0011,DUMP,,USER     UNKNOWN RECORD TYPE\nVTAM0050 DS    0H\n         ITRACE ID=AUTHCHK\n         MVC   PRTMSGID(MSG03L),MSG03 COPY MESSAGE\n         MVC   PRTMSGID+(MSG03ID-MSG03)(L'MSG03ID),AUTHUID\n         MVC   PRTMSGID+(MSG03TRM-MSG03)(L'MSG03TRM),AUTHTERM\n         MVC   PRTMSGID+(MSG03LU-MSG03)(L'MSG03LU),CONVLU\n         BAL   R8,PRT0000            PRINT MESSAGE\n         XC    DXDACEE,DXDACEE       CLEAR ACEE ADDRESS\n         LA    R5,DXDACEE            RETURNED ACEE ADDRESS\n         LA    R6,DXDSAF             SAF WORK AREA ADDRESS\n         CLC   AUTHNPSW,COMMBLKS     NEW PASSWORD BLANK?\n         BNE   VTAM0060              NO\n         ITRACE ID=PASSWORD\n         MVC   DXDRACL(RAC1L),RAC1I  INITIALIZE RACROUTE PARM LIST\n         RACROUTE REQUEST=VERIFY,    CHECK USER'S ID AND PASSWORD      +\n               USERID=AUTHUIDL,      .. USER ID LENGTH/USER ID         +\n               PASSWRD=AUTHPSWL,     .. PASSWORD LENGTH/PASSWORD       +\n               ACEE=(R5),            .. ADDRESS OF RETURNED ACEE       +\n               ENVIR=CREATE,         .. CREATE AN ACEE                 +\n               PASSCHK=YES,          .. DO VERIFY PASSWORD             +\n               ENCRYPT=YES,          .. PASSWORD NEEDS TO BE ENCRYPTED +\n               DECOUPL=YES,                                            +\n               STAT=NO,              .. NO MESSAGE IF SUCCESSFUL       +\n               WORKA=(R6),           .. WORK AREA ADDRESS              +\n               RELEASE=1.9,          .. RACF RELEASE                   +\n               MF=(E,DXDRACL)        .. EXECUTE FORM, LIST FORM ADDRESS\n         B     VTAM0070\nVTAM0060 DS    0H\n         ITRACE ID=NEWPASS\n         MVC   DXDRACL(RAC2L),RAC2I  INITIALIZE RACROUTE PARM LIST\n         RACROUTE REQUEST=VERIFY,    CHECK USER'S ID AND PASSWORD      +\n               USERID=AUTHUIDL,      .. USER ID LENGTH/USER ID         +\n               PASSWRD=AUTHPSWL,     .. PASSWORD LENGTH/PASSWORD       +\n               NEWPASS=AUTHNPSL,     .. NEW PASSWORD LENGTH/PASSWORD   +\n               ACEE=(R5),            .. ADDRESS OF RETURNED ACEE       +\n               ENVIR=CREATE,         .. CREATE AN ACEE                 +\n               PASSCHK=YES,          .. DO VERIFY PASSWORD             +\n               ENCRYPT=YES,          .. PASSWORD NEEDS TO BE ENCRYPTED +\n               DECOUPL=YES,                                            +\n               STAT=NO,              .. NO MESSAGE IF SUCCESSFUL       +\n               WORKA=(R6),           .. WORK AREA ADDRESS              +\n               RELEASE=1.9,          .. RACF RELEASE                   +\n               MF=(E,DXDRACL)        .. EXECUTE FORM, LIST FORM ADDRESS\nVTAM0070 DS    0H\n         LR    R2,R15                SAVE RETURN CODE\n         LA    R1,DXDRACL            RACROUTE LIST FORM IN WORK AREA\n         USING SAFP,R1               DEFINE BASE\n         ITRACE ID=RACFSTAT,         TRACE RACROUTE RETURN AND REASON  +\n               DATA1=SAFPRRET,       .. RACROUTE RETURN CODE           +\n               DATA2=SAFPRREA        .. RACROUTE REASON CODE\n         MVC   AUTHRTCD,SAFPRRET     COPY RETURN CODE\n         MVC   AUTHRSCD,SAFPRREA     COPY REASON CODE\n         MVC   PRTMSGID(MSG06L),MSG06\n         UNPK  PRTMSGID+(MSG06RT-MSG06)(9),SAFPRRET(5)\n         MVZ   PRTMSGID+(MSG06RT-MSG06)(8),HEX0000\n         TR    PRTMSGID+(MSG06RT-MSG06)(8),HEXCHAR\n         MVI   PRTMSGID+(MSG06RT-MSG06)+8,C' '\n         UNPK  PRTMSGID+(MSG06RS-MSG06)(9),SAFPRREA(5)\n         MVZ   PRTMSGID+(MSG06RS-MSG06)(8),HEX0000\n         TR    PRTMSGID+(MSG06RS-MSG06)(8),HEXCHAR\n         MVI   PRTMSGID+(MSG06RS-MSG06)+8,C' '\n         BAL   R8,PRT0000            PRINT MESSAGE\n         CH    R2,H4                 RACROUTE FAILED?\n         BE    VTAM0080              YES\n         MVC   DXDRACL(RAC3L),RAC3I  INITIALIZE RACROUTE PARM LIST\n         RACROUTE REQUEST=VERIFY,    CHECK USER'S ID AND PASSWORD      +\n               ACEE=(R5),            .. ADDRESS OF RETURNED ACEE       +\n               ENVIR=DELETE,         .. DELETE ACEE                    +\n               DECOUPL=YES,                                            +\n               WORKA=(R6),           .. WORK AREA ADDRESS              +\n               RELEASE=1.9,          .. RACF RELEASE                   +\n               MF=(E,DXDRACL)        .. EXECUTE FORM, LIST FORM ADDRESS\n         LTR   R15,R15               DELETE SUCCESSFUL?\n         BNZ   ERR0030               NO\nVTAM0080 DS    0H\n         XC    DXDACEE,DXDACEE       CLEAR THE ADDRESS\n         MVI   VTAMCMD,$VTAMSND      SET COMMAND (SEND)\n         BAL   R8,VSUB0000           LINK TO VSUB TO ISSUE SEND\n         B     NEXT0000              ON TO NEXT SESSION\n*---------------------------------------------------------------------*\n*        EOF record has been received                                 *\n*---------------------------------------------------------------------*\nVTAM0100 DS    0H\n         ITRACE ID=CONVEOF\n         MVC   PRTMSGID(MSG02L),MSG02 COPY MESSAGE\n         UNPK  PRTMSGID+(MSG02CID-MSG02)(9),CONVCID(5)\n         MVZ   PRTMSGID+(MSG02CID-MSG02)(L'MSG02CID),HEX0000\n         TR    PRTMSGID+(MSG02CID-MSG02)(L'MSG02CID),HEXCHAR\n         MVI   PRTMSGID+(MSG02CID-MSG02)+8,C' '\n         BAL   R8,PRT0000            PRINT MESSAGE\n         L     R2,CONVNEXT           NEXT CONVERSATION BLOCK'S ADDRESS\n         MVI   CONVCMD,$CONVDEL      SET COMMAND (DELETE CONVBLOK)\n         ST    R7,CONVADDR           PASS ADDRESS OF CONVBLOK\n         LA    R1,CONVREQ            REQUEST BLOCK'S ADDRESS\n         L     R15,ACONV             TPXCONV ENTRY POINT\n         BALR  R14,R15               CALL TPXCONV TO DELETE CONVBLOK\n         LTR   R7,R2                 NEXT CONVERSATION BLOCK ADDRESS\n         B     NEXT0010              ON TO NEXT CONVERSATION\n*---------------------------------------------------------------------*\n*        Last SEND has completed                                      *\n*---------------------------------------------------------------------*\nVTAM0200 DS    0H\n         ITRACE ID=SENDDONE          SEND HAS COMPLETED\n         B     VTAM0300              ISSUE NEXT RECEIVE\n*---------------------------------------------------------------------*\n*        Issue next (or first) RECEIVE                                *\n*---------------------------------------------------------------------*\nVTAM0300 DS    0H\n         ITRACE ID=RECEIVE           ISSUING A RECEIVE\n         MVI   VTAMCMD,$VTAMRCV      SET COMMAND (RECEIVE)\n         BAL   R8,VSUB0000           LINK TO TPXVSUB\n         B     NEXT0000              ON TO NEXT CONVERSATION\n*---------------------------------------------------------------------*\n*        Process conversations that have had a VTAM 'LOSS'            *\n*---------------------------------------------------------------------*\nLOSS0000 DS    0H\n         ITRACE ID=LOSS\n         L     R2,CONVNEXT           NEXT CONVERSATION BLOCK'S ADDRESS\n         LA    R1,VTAMBLOK           SET PARM ADDRESS\n         L     R15,ALOSS             LOST SESSION CLEAN-UP ENTRY POINT\n         BALR  R14,R15               CALL TPXLOSS\n         LTR   R7,R2                 NEXT CONVERSATION BLOCK ADDRESS\n         B     NEXT0010              CONTINUE AS IF NORMAL NEXT SESSION\n*---------------------------------------------------------------------*\n*        Advance to next conversation                                 *\n*---------------------------------------------------------------------*\nNEXT0000 DS    0H\n         ITRACE ID=NEXTCONV,         ADVANCING TO NEXT CONVERSATION    +\n               RDATA1=R7,            .. THIS BLOCK'S ADDRESS           +\n               DATA2=CONVNEXT        .. NEXT BLOCK'S ADDRESS\n         ICM   R7,15,CONVNEXT        NEXT CONVERSATION BLOCK'S ADDRESS\nNEXT0010 DS    0H\n         BNZ   VTAM0020              PROCESS NEXT CONVERSATION\n         TM    COMMVECB,X'40'        VTAM ECB POSTED AGAIN?\n         BO    VTAM0010              YES, RE-SCAN SESSIONS\n         B     EXIT0030              NO MORE SESSIONS, EXIT\n*---------------------------------------------------------------------*\n*        ERROR SITUATIONS                                             *\n*---------------------------------------------------------------------*\nERR0000  DS    0H\n         ITRACE ID=OPENERR           ACB OPEN ERROR\n         MVC   PRTMSGID(MSG07L),MSG07 COPY MESSAGE\n         UNPK  PRTMSGID+(MSG07RC-MSG07)(9),DXDRC(5)\n         MVZ   PRTMSGID+(MSG07RC-MSG07)(L'MSG07RC),HEX0000\n         TR    PRTMSGID+(MSG07RC-MSG07)(L'MSG07RC),HEXCHAR\n         MVI   PRTMSGID+(MSG07RC-MSG07)+8,C' '\n         BAL   R8,PRT0000            PRINT MESSAGE\n         ABEND $U0015,DUMP,,USER\nERR0010  DS    0H\n         USING ISTRPL6X,R1           DEFINE BASE\n         ITRACE ID=VTAMERR,          VTAM ERROR OF SOME SORT           +\n               DATA1=RPL6RC          .. ERROR CODES\n         MVC   PRTMSGID(MSG05L),MSG05 COPY MESSAGE\n         MVC   PRTMSGID+(MSG05LU-MSG05)(L'MSG05LU),CONVLU\n         MVC   PRTMSGID+(MSG05FNC-MSG05)(L'MSG05FNC),CONVFUNC\n         UNPK  PRTMSGID+(MSG05RC-MSG05)(9),RPL6RC(5)\n         MVZ   PRTMSGID+(MSG05RC-MSG05)(L'MSG05RC),HEX0000\n         TR    PRTMSGID+(MSG05RC-MSG05)(L'MSG05RC),HEXCHAR\n         MVI   PRTMSGID+(MSG05RC-MSG05)+8,C','\n         BAL   R8,PRT0000            PRINT MESSAGE\n         MVI   VTAMCMD,$VTAMDLO      SET COMMAND (DEALLOCATE)\n         BAL   R8,VSUB0000           LINK TO TPXVSUB\n         ST    R7,CONVADDR           PASS CONV BLOCK TO TPXCONV\n         L     R2,CONVNEXT           NEXT CONVERSATION BLOCK'S ADDRESS\n         MVI   CONVCMD,$CONVDEL      DELETE THE CONVERSATION BLOCK\n         LA    R1,CONVREQ            CONV PARM BLOCK ADDRESS\n         L     R15,ACONV             TPXCONV ENTRY POINT\n         BALR  R14,R15               DELETE THE CONVERSATION BLOCK\n         ITRACE ID=ERRNEXT,          ADVANCING TO NEXT CONVERSATION    +\n               RDATA1=R2             .. NEXT BLOCK'S ADDRESS\n         LTR   R7,R2                 COPY NEXT CONVERSATION BLOCK ADDR\n         B     NEXT0010              CONTINUE WITH NEXT CONVERSATION\nERR0020  DS    0H\n         USING ISTRPL6X,R1           DEFINE BASE\n         ITRACE ID=DALOFAIL,         DEALLOC FAILED                    +\n               DATA1=RPL6RC          .. ERROR CODES\n         ABEND $U0012,DUMP,,USER\nERR0030  DS    0H\n         ITRACE ID=ACEEDELF,         ACEE DELETE FAILED                +\n               RDATA1=R15            .. ERROR CODE\n         LR    R2,R15                COPY CODE TO R2\n         ABEND $U0014,DUMP,,USER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        LINK TO VSUB                                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVSUB0000 DS    0H\n         ITRACE ID=VSUB,             LINKING TO VSUB                   +\n               DATA1=VTAMCMD         .. COMMAND\n         LA    R1,VTAMBLOK           PARM BLOCK'S ADDRESS\n         L     R15,AVSUB             VSUB ENTRY POINT\n         BALR  R14,R15               LINK TO VSUB\n         BR    R8                    RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        PRINT                                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         ITRACE ID=PRINT\n         MVI   PRTCMD,$PRTPRT        SET COMMAND\n         LA    R1,PRTBLOK            PRINT BLOCK ADDRESS\n         L     R15,APRTQ             PRINT QUEUING ENTRY POINT\n         BALR  R14,R15               LINK TO PRINT\n         BR    R8                    DONE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        EXIT                                                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=SHUTDOWN\n         ICM   R7,15,COMMCONV        FIRST CONVERSATION BLOCK\n         BZ    EXIT0020              NO CONVERSATIONS ACTIVE\nEXIT0010 DS    0H\n         ITRACE ID=DEALLOC,          DEALLOCATING THIS SESSION         +\n               RDATA1=R7,            .. CONVBLOK'S ADDRESS             +\n               DATA2=CONVLU          .. LU'S NAME\n         ST    R7,VTAMCONV           SET CONVBLOK'S ADDRESS\n         MVI   VTAMCMD,$VTAMDLO      SET COMMAND 'DEALLOCATE'\n         BAL   R8,VSUB0000           LINK TO VSUB\n         ICM   R7,15,CONVNEXT        NEXT CONVBLOK\n         BNZ   EXIT0010              LOOP\nEXIT0020 DS    0H\n         ITRACE ID=CLOSEACB          CLOSING THE ACB\n         GETMAIN RU,                 ACQUIRE STORAGE FOR CLOSE         +\n               LV=CLOSELL,           .. SIZE                           +\n               LOC=BELOW             .. FROM BELOW THE LINE\n         LR    R3,R1                 COPY STORAGE ADDRESS\n         MVC   0(CLOSELL,R3),CLOSEL  INITIALIZE CLOSE LIST\n         L     R2,COMMACB            ACB'S ADDRESS\n         CLOSE ((R2)),MF=(E,(R3))    CLOSE THE ACB\n         MVC   PRTMSGID(MSG04L),MSG04\n         BAL   R8,PRT0000            PRINT MESSAGE\n         FREEMAIN RU,A=(R3),LV=CLOSELL\n         FREEMAIN RU,A=(R2),LV=ACBL\n         L     R1,COMMXLST           EXIT LIST'S STORAGE\n         FREEMAIN RU,A=(1),LV=EXLSTL FREE EXIT LIST STORAGE\n         L     R1,DXDRPL             RPL STORAGE ADDRESS\n         FREEMAIN RU,A=(1),LV=RPLL   FREE RPL STORAGE\n         L     R1,DXDRPLX            RPL EXTENSION STORAGE ADDRESS\n         FREEMAIN RU,A=(1),LV=RPLEXTL\nEXIT0030 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)            CALLER'S SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)       RESTORE CALLER'S REGISTERS\n         SR    R15,R15               ALWAYS A GOOD RETURN CODE\n         BR    R14                   RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         LTORG\nDXDSTART DC    Q(DXDVTAM)            DISPLACEMENT TO WORK AREA\nAUTHID   DC    CL4'AUTH'\nEOFID    DC    CL4'EOF'\nH4       DC    H'4'\nRAC1I    RACROUTE REQUEST=VERIFY,                                      +\n               USERID=*,                                               +\n               PASSWRD=*,                                              +\n               ACEE=*,               .. ADDRESS OF RETURNED ACEE       +\n               ENVIR=CREATE,         .. CREATE AN ACEE                 +\n               PASSCHK=YES,          .. DO VERIFY PASSWORD             +\n               ENCRYPT=YES,          .. PASSWORD NEEDS TO BE ENCRYPTED +\n               DECOUPL=YES,                                            +\n               STAT=NO,              .. NO MESSAGE IF SUCCESSFUL       +\n               RELEASE=1.9,          .. RACF RELEASE                   +\n               MF=L                  .. LIST FORM\nRAC1L    EQU   *-RAC1I\nRAC2I    RACROUTE REQUEST=VERIFY,                                      +\n               USERID=*,                                               +\n               PASSWRD=*,                                              +\n               NEWPASS=*,                                              +\n               ACEE=*,               .. ADDRESS OF RETURNED ACEE       +\n               ENVIR=CREATE,         .. CREATE AN ACEE                 +\n               PASSCHK=YES,          .. DO VERIFY PASSWORD             +\n               ENCRYPT=YES,          .. PASSWORD NEEDS TO BE ENCRYPTED +\n               DECOUPL=YES,                                            +\n               STAT=NO,              .. NO MESSAGE IF SUCCESSFUL       +\n               RELEASE=1.9,          .. RACF RELEASE                   +\n               MF=L                  .. LIST FORM\nRAC2L    EQU   *-RAC2I\nRAC3I    RACROUTE REQUEST=VERIFY,    CHECK USER'S ID AND PASSWORD      +\n               ACEE=*,               .. ADDRESS OF ACEE TO DELETE      +\n               ENVIR=DELETE,         .. DELETE ACEE                    +\n               DECOUPL=YES,                                            +\n               WORKA=*,              .. WORK AREA ADDRESS              +\n               RELEASE=1.9,          .. RACF RELEASE                   +\n               MF=L                  .. LIST FORM\nRAC3L    EQU   *-RAC3I\nMSG01    DS    0C\n         DC    CL11'TPXVTAM01I'\n         DC    C'ACB opened'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'TPXVTAM02I'\n         DC    C'Conversation deallocated, CID='\nMSG02CID DC    CL8' '\n         DC    C' '\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'TPXVTAM03I'\n         DC    C'Verifying password for ID '\nMSG03ID  DC    CL8' '\n         DC    C' at terminal '\nMSG03TRM DC    CL8' '\n         DC    C' '\n         DC    C'for TPX EXIT '\nMSG03LU  DC    CL8' '\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    CL11'TPXVTAM04I'\n         DC    C'ACB closed'\nMSG04L   EQU   *-MSG04\nMSG05    DS    0C\n         DC    CL11'TPXVTAM05E'\n         DC    C'Error on conversation to '\nMSG05LU  DC    CL8' '\n         DC    C', function was '\nMSG05FNC DC    C' '\n         DC    C', RPL6RC is '\nMSG05RC  DC    CL8' '\n         DC    C'  conversation deallocated'\nMSG05L   EQU   *-MSG05\nMSG06    DS    0C\n         DC    CL11'TPXVTAM06I'\n         DC    C'RACF status/reason codes '\nMSG06RT  DC    CL8' '\n         DC    C' '\nMSG06RS  DC    CL8' '\n         DC    C' '\nMSG06L   EQU   *-MSG06\nMSG07    DS    0C\n         DC    CL11'TPXVTAM07E'\n         DC    C'ACB open error, R15='\nMSG07RC  DC    CL8' '\n         DC    C' '\nMSG07L   EQU   *-MSG07\nACBI     ACB   AM=VTAM,                                                +\n               MACRF=LOGON,                                            +\n               EXLST=*,                                                +\n               APPLID=*\nACBL     EQU   *-ACBI\nEXLSTI   EXLST AM=VTAM,                                                +\n               ATTN=*,                                                 +\n               LERAD=*\nEXLSTL   EQU   *-EXLSTI\nRPLI     RPL   AM=VTAM,                                                +\n               AAREA=RPLEXTI\nRPLL     EQU   *-RPLI\nRPLEXTI  ISTRPL6\nRPLEXTL  EQU   *-RPLEXTI\nOPENL    OPEN  (*,INPUT),                                              +\n               MF=L\nOPENLL   EQU   *-OPENL\nCLOSEL   CLOSE (*),                                                    +\n               MF=L\nCLOSELL  EQU   *-CLOSEL\nHEX0000  DC    8X'00'\nHEXCHAR  DC    C'0123456789ABCDEF'\n         SPACE 2\n* ------------------------------------------------------------------- *\n*              WORK AREA                                              *\n* ------------------------------------------------------------------- *\nDXDVTAM  DSECT\nDXDID    DS   CL8                    WORK AREA OWNER EYECATCHER\nDXDSAVE  DS   18F                    REGISTER SAVE AREA\nDXDRC    DS   F                      R15 FROM CERTAIN FUNCTIONS\nDXDRPL   DS   A                      RPL STORAGE ADDRESS\nDXDRPLX  DS   A                      RPL EXTENSION STORAGE ADDRESS\nDXDACEE  DS   A                      ADDRESS OF ACEE\nDXDRACL  DS   (RAC2L)X\n         PRTBLOK  DSECT=NO\n         VTAMBLOK DSECT=NO\n         CONVREQ  DSECT=NO\nDXDSAF   DS   0F,512X\n* ------------------------------------------------------------------- *\n*              RACF RETURN CODES MAP                                  *\n* ------------------------------------------------------------------- *\n         ICHSAFP\n* ------------------------------------------------------------------- *\n*              COMMON DATA MAP                                        *\n* ------------------------------------------------------------------- *\n         TPXCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*              VTAM CONVERSATION BLOCK                                *\n* ------------------------------------------------------------------- *\n         CONVBLOK DSECT=YES\n* ------------------------------------------------------------------- *\n*              AUTHORIZATION REQUEST BLOCK                            *\n* ------------------------------------------------------------------- *\n         COPY  AUTHREC\n* ------------------------------------------------------------------- *\n*              ACB                                                    *\n* ------------------------------------------------------------------- *\n         IFGACB AM=VTAM\n* ------------------------------------------------------------------- *\n*              EXIT LIST                                              *\n* ------------------------------------------------------------------- *\n         IFGEXLST AM=VTAM\n* ------------------------------------------------------------------- *\n*              RPL AND RPL EXTENSION DSECTS                           *\n* ------------------------------------------------------------------- *\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EQUATES                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  TPXVTAM\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT171/FILE171.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT171", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}