{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012429000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE595.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE595.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x02\\x0c'", "DS1TRBAL": "b'\\x81\\xe4'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04a\\x00\\x0c\\x04a\\x00\\x0e\\x00\\x03'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x045\\x00\\x00\\x01\\x02(?\\x01\\x02(?\"\\x05\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf5\\xf3@@@'", "ispf": {"version": "04.53", "flags": 0, "createdate": "2002-10-10T00:00:00", "modifydate": "2002-10-10T22:05:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-453"}, "text": "REGULAR CBT TAPE - VERSION 453    FILE:  595\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT453.FILE595\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 4 MEMBERS COUNTED; CUMULATIVE SIZE IS 197 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   10/10/02    22:05:36    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x12\\x01\\x02(?\\x01\\x02(?!\\x11\\x00\\x18\\x00\\x18\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-10-10T00:00:00", "modifydate": "2002-10-10T21:11:12", "lines": 24, "newlines": 24, "modlines": 0, "user": "RLRICE"}, "text": "\nSubject: Another macro\nDate: Thu, 10 Oct 2002 10:27:17 -0500 (CDT)\nFrom: Richard Rice <rlrice@skylark.ppco.com>\nTo: sbgolob@aol.com\n\nSam,\nAs time permits, I am going through some old stuff before it gets\ndeleted for good.  This is one more oldie.  There were a number\nof times that I wanted to trace the flow of execution of a\nprogram.  I have used WTOs, printed messages, and caused abends\n(usually by zapping an opcode to zeros).\n\nOne thing I came up with was this macro.  You replace the \"EQU *\"\nor \"DS 0H\" that are usually used for generating labels with this\nLABEL macro.  You can turn the tracing on and off at various\npoints by coding \"LABEL TRACE=ON\" or \"LABEL TRACE=OFF\".\nSomewhere in the program you need to code \"LABEL TRACE=ROUTINE\".\nThe trace routine obtains some storage and then inserts the label\ncoded on the LABEL macros in a wrap-around table.  Once the\nprogram is working, if code \"LABEL TRACE=OFF\" at the beginning of\nthe source, the MACRO only generates a \"DS 0H\" so there is zero\noverhead.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE595": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00)\\x01\\x01\\x02_\\x01\\x02(?!&\\x001\\x00\\x02\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-01-25T00:00:00", "modifydate": "2002-10-10T21:26:29", "lines": 49, "newlines": 2, "modlines": 0, "user": "RLRICE"}, "text": "//***FILE 595 is from Richard L. Rice and contains a macro which    *   FILE 595\n//*           is used to trace the execution of a program.          *   FILE 595\n//*                                                                 *   FILE 595\n//*           email:  rlrice@skylark.ppco.com                       *   FILE 595\n//*                                                                 *   FILE 595\n//*    Description of the LABEL macro:                              *   FILE 595\n//*                                                                 *   FILE 595\n//*      This macro provides a method to trace program execution    *   FILE 595\n//*      in assembler language programs.  The macro replaces the    *   FILE 595\n//*      'EQU *' or 'DS 0H' commonly used to define labels.  The    *   FILE 595\n//*      names used in the \"label\" field are stored in an in        *   FILE 595\n//*      core \"wrap-around\" table.                                  *   FILE 595\n//*                                                                 *   FILE 595\n//*      The 'TRACE' keyword allows you to turn tracing on and      *   FILE 595\n//*      off at various points.  This parameter sets a global       *   FILE 595\n//*      switch so if trace is turned off at some point, the        *   FILE 595\n//*      following LABEL macros will not cause tracing until you    *   FILE 595\n//*      turn TRACE back on.  This may prevent the trace table      *   FILE 595\n//*      from becoming flooded with trace entries you do not        *   FILE 595\n//*      need for problem determination.  Also, after the           *   FILE 595\n//*      program is debugged, code 'TRACE=OFF' or 'TRACE=NO' on     *   FILE 595\n//*      the first LABEL macro and there will be zero overhead      *   FILE 595\n//*      in storage use or execution time (all the macro will       *   FILE 595\n//*      generate will be the actual assembler label).              *   FILE 595\n//*                                                                 *   FILE 595\n//*      Overhead is 12 bytes per LABEL, plus the size of the       *   FILE 595\n//*      trace routine (generated via \"LABEL TRACE=ROUTINE\"),       *   FILE 595\n//*      plus the size of the trace table (dynamically acquired,    *   FILE 595\n//*      but not freed).  You probably don't want to just leave     *   FILE 595\n//*      the trace stuff on once you get the program working        *   FILE 595\n//*      because the trace table is not freed.  There is some       *   FILE 595\n//*      execution time overhead also, of course.                   *   FILE 595\n//*                                                                 *   FILE 595\n//*      The macro uses and changes register 15.  On the first      *   FILE 595\n//*      call, the code will issue a GETMAIN.  GETMAIN uses         *   FILE 595\n//*      registers 0, 1, 14, and 15.                                *   FILE 595\n//*                                                                 *   FILE 595\n//*      The trace routine uses in-line work areas, so programs     *   FILE 595\n//*      using the LABEL macro are not re-entrant.                  *   FILE 595\n//*                                                                 *   FILE 595\n//*      There are three eyecatchers in the trace routine to        *   FILE 595\n//*      help you find the trace table.  These are \"TRACE1ST\",      *   FILE 595\n//*      \"TRACECUR\", and \"TRACELST\".  TRACECUR will be the last     *   FILE 595\n//*      entry added.  Good news is if your program abends, all     *   FILE 595\n//*      you have to do is find the eyecatchers and get the         *   FILE 595\n//*      addresses.  Bad news is if your program runs, but just     *   FILE 595\n//*      doesn't work correctly, you will have to cause an abend    *   FILE 595\n//*      in order to get a dump.                                    *   FILE 595\n//*                                                                 *   FILE 595\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LABEL": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00@\\x01\\x02(?\\x01\\x02(?\"\\x04\\x00p\\x00\\x95\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-10-10T00:00:00", "modifydate": "2002-10-10T22:04:40", "lines": 112, "newlines": 149, "modlines": 0, "user": "RLRICE"}, "text": "         MACRO\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*  This macro provides a method to trace program execution in        *\n.*  assembler language programs.  The macro replaces the 'EQU *'      *\n.*  or 'DS 0H' commonly used to define labels.  The names used in the *\n.*  \"label\" field are stored in an in core \"wrap-around\" table.       *\n.*                                                                    *\n.*   The 'TRACE' keyword allows you to turn tracing on and off        *\n.*   at various points.  This parameter sets a global switch          *\n.*   so if trace is turned off at some point, the following LABEL     *\n.*   macros will not cause tracing until you turn TRACE back on.      *\n.*   This may prevent the trace table from becoming flooded with      *\n.*   trace entries you do not need for problem determination.         *\n.*   Also, after the program is debugged, code 'TRACE=OFF' or         *\n.*   'TRACE=NO' on the first LABEL macro and there will be zero       *\n.*   overhead in storage use or execution time (all the macro         *\n.*   will generate will be the actual assembler label).               *\n.*                                                                    *\n.*   Overhead is 12 bytes per LABEL, plus the size of the trace       *\n.*   routine (generated via \"LABEL TRACE=ROUTINE\"), plus the size     *\n.*   of the trace table (dynamically acquired, but not freed).        *\n.*   You probably don't want to just leave the trace stuff on once    *\n.*   you get the program working because the trace table is not       *\n.*   freed.  There is some execution time overhead also, of course.   *\n.*                                                                    *\n.*   The macro uses and changes register 15.  On the first call,      *\n.*   the code will issue a GETMAIN.  GETMAIN uses registers 0, 1,     *\n.*   14, and 15.                                                      *\n.*                                                                    *\n.*   The trace routine uses in-line work areas, so programs using     *\n.*   the LABEL macro are not re-entrant.                              *\n.*                                                                    *\n.*   There are three eyecatchers in the trace routine to help you     *\n.*   find the trace table.  These are \"TRACE1ST\", \"TRACECUR\", and     *\n.*   \"TRACELST\".  TRACECUR will be the last entry added.  Good news   *\n.*   is if your program abends, all you have to do is find the        *\n.*   eyecatchers and get the addresses.  Bad news is if your program  *\n.*   runs, but just doesn't work correctly, you will have to cause    *\n.*   an abend in order to get a dump.                                 *\n.*                                                                    *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n&NAME    LABEL &TRACE=\n         GBLB  &LBLCTL\n         LCLC  &LNAME\n         AIF   (T'&TRACE EQ 'O').LBL0040\n         AIF   ('&TRACE' EQ 'ROUTINE').GENMOD\n         AIF   ('&TRACE' EQ 'ON').LBL0010\n         AIF   ('&TRACE' EQ 'YES').LBL0010\n         AIF   ('&TRACE' EQ 'OFF').LBL0020\n         AIF   ('&TRACE' EQ 'NO').LBL0020\n         MNOTE 12,'INVALID VALUE ''TRACE=&TRACE'' '\n.LBL0010 ANOP\n&LBLCTL  SETB  0\n         AGO   .LBL0030\n.LBL0020 ANOP\n&LBLCTL  SETB  1\n.LBL0030 ANOP\n&LNAME   SETC  ' '\n.LBL0040 ANOP\n         AIF   (T'&NAME NE 'O').LBL0050\n         MNOTE 4,'** WARNING, NAME OMITTED ON LABEL MACRO'\n         AGO   .LBL0060\n.LBL0050 ANOP\n&LNAME   SETC  '&NAME'\n.LBL0060 ANOP\n&LNAME   DS    0H\n         AIF   (&LBLCTL).LBLEXIT\n         BAL   R15,TRACE000             LINK TO TRACE\n         DC    CL8'&LNAME'              LABEL NAME\n.LBLEXIT ANOP\n         MEXIT\n.GENMOD  ANOP\n         AIF   (&LBLCTL).LBLEXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nTRACE000 DS    0H\n         ST    R15,TRACER15             SAVE REGISTER 15\n         MVC   TRACELBL,0(R15)          COPY LABEL\n         ICM   R15,15,TRACECUR          CURRENT TRACE ENTRY ADDRESS\n         BNZ   TRACE010                 ADD ENTRY TO TABLE\n         GETMAIN R,LV=8000              STORAGE FOR 1000 ENTRIES\n         LR    R15,R1                   SAVE FIRST ENTRY ADDRESS\n         ST    R1,TRACE1ST              SAVE FIRST ENTRY ADDRESS\n         ST    R1,TRACECUR              SET CURRENT ENTRY ADDRESS\n         AH    R1,TRACEHSZ              ADDRESS OF LAST ENTRY\n         ST    R1,TRACELST              SET LAST ENTRY ADDRESS\nTRACE010 DS    0H\n         CLM   R15,15,TRACELST          AT END OF TABLE?\n         BNE   TRACE020                 NO\n         L     R15,TRACE1ST             \"WRAP\" TO 1ST ENTRY\n         B     TRACE030\nTRACE020 DS    0H\n         LA    R15,8(R15)               NEXT ENTRY\nTRACE030 DS    0H\n         ST    R15,TRACECUR             SAVE CURRENTY ENTRY\n         MVC   0(8,R15),TRACELBL        COPY LABEL\n         L     R15,TRACER15             RESTORE R15\n         B     8(R15)                   RETURN\nTRACEHSZ DC    Y(8000-8)                SIZE OF TRACE TABLE MINUS 1\nTRACER15 DC    A(0)\n         DC    CL8'TRACE1ST'            EYECATCHER\nTRACE1ST DC    A(0)                     FIRST TRACE ENTRY ADDRESS\n         DC    CL8'TRACECUR'            EYECATCHER\nTRACECUR DC    A(0)                     CURRENT TRACE ENTRY\n         DC    CL8'TRACELST'            EYECATCHER\nTRACELST DC    A(0)                     LAST TRACE ENTRY\nTRACELBL DC    CL8' '                   LABEL WORK AREA\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT595/FILE595.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT595", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}