{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012626000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 2175082, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE702.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 2175082, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 2175082, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE702.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\"\\x07'", "DS1TRBAL": "b'vV'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xd9\\x00\\x02\\x04\\xdb\\x00\\x06\\x00#'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$$PKG": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00$\\x01\\x051_\\x01\\x051_\\x10%\\x00\\x19\\x00\\x13\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-11-11T00:00:00", "modifydate": "2005-11-11T10:25:24", "lines": 25, "newlines": 19, "modlines": 0, "user": "SBGOLOB"}, "text": "                Packaging notes for CBT Tape File 702\n\n1.  SunTrust JES2 mods for z/OS 1.6 are all in member MELLON16,\n    which is an IEBUPDTE-unloaded pds, that can be expanded into\n    the proper pds by customizing and running job $PDSLO16.\n\n2.  SunTrust JES2 mods for z/OS 1.4 are all in member MELLON14,\n    which is an IEBUPDTE-unloaded pds, that can be expanded into\n    the proper pds by customizing and running job $PDSLO14.\n\n3.  Notes are from the z/OS 1.6 pds, as packaged by Stephen McColley.\n\n4.  JCL and JES2 parms are from the z/OS 1.6 pds.\n\n5.  Member PDSLOAD contains an XMIT-format load library which has\n    the PDSLOAD program in it.\n\n6.  Almost all included documentation is contained in the relevant\n    pds, as expanded by running the appropriate $PDSLOxx job.\n\n Any questions about this packaging, please email:\n\n    Sam Golob:   sbgolob@cbttape.org\n                 sbgolob@attglobal.net\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$$#DATE": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04S\\x00X\\x01\\x11\\x18/\\x01\\x11\\x18/\\x147\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf3@@@'", "ispf": {"version": "04.83", "flags": 0, "createdate": "2011-07-01T00:00:00", "modifydate": "2011-07-01T14:37:58", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-483"}, "text": "REGULAR CBT TAPE - VERSION 483    FILE:  702\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT483.FILE702\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 17 MEMBERS COUNTED; CUMULATIVE SIZE IS 20,167 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   07/01/11    14:37:58    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$DOC": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x01\\x041?\\x01\\x051O\\x14R\\x00R\\x00\\x1e\\x00\\x00\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2004-11-08T00:00:00", "modifydate": "2005-11-10T14:52:00", "lines": 82, "newlines": 30, "modlines": 0, "user": "T0SM0"}, "text": "\n  ALL OF OUR USERMODS ARE IN MVS.OSMAINT.USERMODS ON THE TECPLEX.\n\n  Each usermod(LSES5**) member has a corresponding member suffixed with\n  a \"J\".  The members with the \"J\" suffixes are sample jcl install\n  members.\n\n  FOR JES2 WE HAVE THE FOLLOWING usermods - These are ALL of our JES2\n   mods - most folks who are interested in only using the mellon mods\n  should refer to the next section, entitled -\n\n    \" THE FOLLOWING CAN BE CONSIDERED MELLON MOD REPLACEMENTS \"\n\nall of our JES2 usermods:\n\nMOD NAME   IMPLEMENTED     LMOD NAME   DESCRIPTION\nLSES500   ZOS6-09/01/2005  STJTABS  - CREATES OUR EXTENSIONS TO JQE AND JCT\nLSES502   ZOS6-09/01/2005  STSCX01A - JES2 EXIT1 - BANNER PAGE EXIT (NON 3800)\nLSES503   zOS6-09/01/2005  STSCX04A - parses /*ROUTE cards\nLSES504   ZOS6-09/01/2005  STSCX04B - PARSES /*BEFORE/*AFTER/*WITH AND /*CNTL\nLSES505   ZOS6-09/01/2005  STSCX05A - PROCESS $REPEXIT AND $ADDEXIT COMMANDS\nLSES506   zOS6-09/01/2005  STSCX05B - prevents purging jobs by range\nLSES507   ZOS6-09/01/2005  STSCX06A - MOVES VALID XEQ VALUES TO SCHENV VALUES\nLSES509   ZOS6-09/01/2005  STSCX15A - FORCES FCB LOAD UNLESS CHGING STD FORMS\nLSES510   ZOS6-09/01/2005  STSCX20A - END OF INPUT - MOVE JCT INFO TO JQE\nLSES511   zOS6-09/01/2005  STSCX36A - SAF process of RJE submitted jobs\nLSES512   ZOS6-09/01/2005  STSCX49A - IMPLEMENT BEFORE|AFTER|WITH|CNTL USAGE\nLSES513   ZOS6-09/01/2005  STSCX100 - FCB SETUP / TRANSLATION USER EXIT100\nLSES514   ZOS6-09/01/2005  HASPPRPU - INSERT USER EXIT100 INTO HASPPRPU CODE\n-------- ---------------   ---------------------------------------------\n\n ***********\n\nOF THESE MODS, THE FOLLOWING CAN BE CONSIDERED MELLON MOD REPLACEMENTS\n\n ***********\n\nMOD NAME   IMPLEMENTED     LMOD NAME   DESCRIPTION\nLSES500   ZOS6-09/01/2005  STJTABS  - CREATES OUR EXTENSIONS TO JQE AND JCT\nLSES503   zOS6-09/01/2005  STSCX04A - parses /*ROUTE cards\nLSES504   ZOS6-09/01/2005  STSCX04B - PARSES /*BEFORE/*AFTER/*WITH AND /*CNTL\nLSES507   ZOS6-09/01/2005  STSCX06A - MOVES VALID XEQ VALUES TO SCHENV VALUES\nLSES510   ZOS6-09/01/2005  STSCX20A - END OF INPUT - MOVE JCT INFO TO JQE\nLSES512   ZOS6-09/01/2005  STSCX49A - IMPLEMENT BEFORE|AFTER|WITH|CNTL USAGE\n\n ***********\n ***********\n\n   The installation instructions for the Mellon MODs only, can be found\n   in member DOCINS.\n\n   The overview documentation for the mellon mods is in member DOCOVW.\n\n   The user documentation for the mellon mods is in member DOCUSR.\n\n ***********\n ***********\n\n* * * PLEASE NOTE ! * * *\n\n*\n*    SPECIAL THANKS GO TO BOB BREAK OF ST. LOUIS FOR THE ORIGINAL CODE\n*  TO PARSE THE \"/*ROUTE XEQ RESNAME\" CARDS AND SET THE APPROPRIATE\n*  EXECUTION ENVIRONMENT.\n*\n*    SPECIAL THANKS TO JUDY RUNT OF WISCONSIN ELECTRIC FOR THE ORIGINAL\n*  CODE TO HANDLE THE \"/*CNTL BEFORE|AFTER|WITH,RESNAME\" AND \"/*CNTL\n*  RESNAME,EXC|SHR\" ROUTINES.  THE USE OF THE BLOCK EXTENSION REUSABLE\n*  TABLES, and BERT'S, TO EXTEND THE JCT AND JQE.\n*\n*  although some changes have been made to all of the code, their\n*  combined help was invaluable.\n*\n*\n\n  It is customary to transfer a PDS such as this in tso xmit format -\n  to create the xmit format dataset, use the following command -\n   \"xmit n32.t0sm0,outdsname('t0sm0.xmit.jes2mods'),dataset('t0sm0.tso.\n    jes2mods\")\n  where t0sm0.xmit.jes2mods is an fb 80X3120 dataset, and\n  where t0sm0.tso.jes2mods is the pds to be sent.\n  Be sure to transfer the file, type=binary when sent via e-mail.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE0": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x003\\x01\\x051\\x9f\\x01\\x051\\x9f\\x12#\\x00D\\x00D\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-11-15T00:00:00", "modifydate": "2005-11-15T12:23:33", "lines": 68, "newlines": 68, "modlines": 0, "user": "SBGOLOB"}, "text": "\nSam,\n\n  I have downloaded and reviewed the latest updates to File 702.\nCurrently, as you know, there are two versions of the Mellon Mods\non File 702.  The previous version 1.4 - PRE-ACTIVATE version,\nwhich was listed as such because at that time we had no way to\ntest on a MAS that had been \"Activated\".  The newest version that\nwe sent to you for 1.6 is POST-ACTIVATE tested.  Actually, either\nthe 1.4 or the 1.6 version will run before, or after, the MAS has\nbeen activated.\n\n  The difference between the two versions on File 702 is primaily\ndocumentation.\n\n The sample SMP/E jobstreams have been updated with additional\ncomments so that you know what must be changed as you go through\nthe install process.\n\n The New documentation members DOCOVW - documentation overview,\nDOCINS - install documentation, and DOCUSR - user documentation\nhave been added to provide good documentation.  The original\ndocumentation has been kept in member DOCOLD for anyone that\nneeds the original - old documentation.\n\n The code in member LSES512, which is used for exit 49, was\nchanged to fix a bug.  The job selection routine would select a\njob with a /*WITH jobname statement for execution, if there was a\nmatch for the jobname on the input queue, not on the execution\nqueue.  After the fix the /*WITH jobname statement causes job\nselection to proceed as documented, and will only allow the job\nto execute if the jobname referenced in the /*WITH statement is\ncurrently IN EXECUTION, not just somewhere on the queue.\n\n  We did not need to make any conversion changes to go from 1.4\nto 1.6, or from pre-activate, to post-activate mode.  The mods\nhave now been run in our shop in all of the following\ncombinations without problems - other than the one bug that was\ndocumented above and fixed in the 1.6 version of the mods.\n\n 1.4 Pre-activate\n 1.4 Post-activate\n 1.6 Pre-activate\n 1.6 Post-activate\n\n  Because the two levels are equivelent, except for the one bug\nfix, and the documentation, I would strongly recommend that only\nthe newer 1.6 version of the mods be used in any JES2\ninstallation running 1.2 or later.  Prior to 1.2 an older version\nof the mods will be needed to accommodate for JES2 macros\nchanges.\n\n  This level of forward and backward compatibility was able to be\naccomplished by the rewrite that we went through a few years ago\nwhen the massive source changes to JES2 were all converted to\nstandard JES2 exits.\n\n\nI hope this helps,\n\nStephen G. McColley\nOfficer, Enterprise Information Services\nSunTrust Banks, Inc.\nMail Code GA-ATL-4030\n250 Piedmont Ave., Suite 1600\nAtlanta, GA 30308\nTel: 404.230-5182 Cell: 404.641.9175\nFax: 404.581-1688\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE1": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x041O\\x01\\x041O\\tD\\x00\\x18\\x00\\x17\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-11-09T00:00:00", "modifydate": "2004-11-09T09:44:00", "lines": 24, "newlines": 23, "modlines": 0, "user": "SBGOLOB"}, "text": "This note is from Frank Lawrence of Sun Trust, who is the current\nkeeper of the Mellon JES2 Mods, or a number of them, such as they\nare nowadays.\n\nSam,\n\nOur complete JES2 mods are attached in a TSO XMIT file.  That is\nprobably more than other folks want, but it will serve to remove\nany ambiguities if they wonder why something is the way it is.  I\nshould also note that these are pre-z/OS 1.4 newest \"activate\"\nfor things like extended job number range.  We have some OEM\nproducts that can't handle the extended job numbers in their\ncurrent release, so we have had to delay implementing those\nfeatures in z/OS 1.4.  We have tested them with these mods, but\nthat isn't the same as having them in production.\n\nLet me know if you have any questions.\n\n- Thanks,\n       Frank\n\n email:  Frank.Lawrence@SunTrust.com\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE2": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\x051O\\x01\\x051O\\x147\\x00\\x1d\\x00\\x18\\x00\\x00\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2005-11-10T00:00:00", "modifydate": "2005-11-10T14:37:00", "lines": 29, "newlines": 24, "modlines": 0, "user": "T0SM0"}, "text": "\nSam,\n  Here are the latest files for the Mellon Mods.  They are currently\nrunning in our shop under z/OS 1.6, with no reported problems.\n\n\n  In addition to the files we have been sending, I am including four new\nmembers for documentation.  I realize the documentation of the past has\nleft a lot to be desired, and hope this will be of help to those who are\ninstalling or evaluating these mods for the first time.\n\n  The new members are:\n\n     DOCOVW - a plain text overview of the function and purpose.\n     DOCUSR - a plain text set of user documentation.\n     DOCINS - a plain text set of installation documentation.\n     $$NOTE2 - this member.\n\n  I have also renamed the old DOC member to DOCOLD, most of the old\ndocumentation is just no longer pertinent.\n\nLet me know if you have any questions.\n\n- Thanks,\n       Steve M.\n\n email:  Stephen.McColley@SunTrust.com\n         SGMcColley@AllTel.net\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$PDSLO14": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x04\\x01\\x02%O\\x01\\x051_\\x10\\x19\\x00\\x1b\\x00\\x0b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2002-09-11T00:00:00", "modifydate": "2005-11-11T10:19:04", "lines": 27, "newlines": 11, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBL JOB (ACCT#),PDSLOAD,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//***************************************************************//\n//*   This is a self-contained job to create a pds with all of  *//\n//*   the SunTrust JES2 mods at the z/OS 1.4 level.  You must   *//\n//*   customize the jobcard and dataset names to conform to     *//\n//*   your installation's standards.  The PDSLOAD program can   *//\n//*   be found (in source code) on CBT Tape File 093, and in    *//\n//*   load module format, on CBT Tape File 035.  An XMIT-format *//\n//*   load module pds containing the PDSLOAD program has been   *//\n//*   packaged with inside this pds for your convenience.       *//\n//***************************************************************//\n//TSOBATCH EXEC PGM=IKJEFT1B          Create the PDSLOAD load library\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n  RECEIVE INDS('SBGOLOB.CBT470.FILE702(PDSLOAD)')\n  DSN('SBGOLOB.PDSLOAD.LOADLIB') VOL(WORK02)\n/*\n//*\n//LOAD EXEC PGM=PDSLOAD               STEPLIB is from previous step\n//STEPLIB  DD DISP=SHR,DSN=SBGOLOB.PDSLOAD.LOADLIB   <-- change\n//SYSUT1   DD DISP=SHR,DSN=SBGOLOB.CBT470.FILE702(MELLON14)\n//SYSPRINT DD SYSOUT=*\n//SYSUT2   DD DSN=SBGOLOB.MELLON14.PDS,DISP=(NEW,CATLG,DELETE),\n//         UNIT=SYSALLDA,VOL=SER=DATA01,SPACE=(TRK,(30,30,89),RLSE),\n//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$PDSLO16": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x13\\x01\\x02%O\\x01\\x051_\\x10 \\x00\\x1b\\x00\\x0b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2002-09-11T00:00:00", "modifydate": "2005-11-11T10:20:13", "lines": 27, "newlines": 11, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBL JOB (ACCT#),PDSLOAD,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//***************************************************************//\n//*   This is a self-contained job to create a pds with all of  *//\n//*   the SunTrust JES2 mods at the z/OS 1.6 level.  You must   *//\n//*   customize the jobcard and dataset names to conform to     *//\n//*   your installation's standards.  The PDSLOAD program can   *//\n//*   be found (in source code) on CBT Tape File 093, and in    *//\n//*   load module format, on CBT Tape File 035.  An XMIT-format *//\n//*   load module pds containing the PDSLOAD program has been   *//\n//*   packaged with inside this pds for your convenience.       *//\n//***************************************************************//\n//TSOBATCH EXEC PGM=IKJEFT1B          Create the PDSLOAD load library\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n  RECEIVE INDS('SBGOLOB.CBT470.FILE702(PDSLOAD)')\n  DSN('SBGOLOB.PDSLOAD.LOADLIB') VOL(WORK02)\n/*\n//*\n//LOAD EXEC PGM=PDSLOAD               STEPLIB is from previous step\n//STEPLIB  DD DISP=SHR,DSN=SBGOLOB.PDSLOAD.LOADLIB   <-- change\n//SYSUT1   DD DISP=SHR,DSN=SBGOLOB.CBT470.FILE702(MELLON16)\n//SYSPRINT DD SYSOUT=*\n//SYSUT2   DD DSN=SBGOLOB.MELLON16.PDS,DISP=(NEW,CATLG,DELETE),\n//         UNIT=SYSALLDA,VOL=SER=DATA01,SPACE=(TRK,(30,30,89),RLSE),\n//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE702": {"ttr": 533, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04S\\x00Q\\x01\\x11\\x18/\\x01\\x11\\x18/\\x147\\x00\\x80\\x00\\x80\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf3@@@'", "ispf": {"version": "04.83", "flags": 0, "createdate": "2011-07-01T00:00:00", "modifydate": "2011-07-01T14:37:51", "lines": 128, "newlines": 128, "modlines": 0, "user": "CBT-483"}, "text": "//***FILE 702 is from Stephen McColley and contains JES2 usermods   *   FILE 702\n//*           at both the z/OS 1.6 and z/OS 1.4 levels, These       *   FILE 702\n//*           usermods may be considered replacements for the old   *   FILE 702\n//*           Mellon Bank mods to JES2.                             *   FILE 702\n//*                                                                 *   FILE 702\n//*           The principal maintainer of the Mellon Mods           *   FILE 702\n//*           is Stephen McColley.                                  *   FILE 702\n//*                                                                 *   FILE 702\n//*           McColley Systems Group Inc.                           *   FILE 702\n//*           sgmccolley@windstream.net                             *   FILE 702\n//*           SGMcColley@MVSProgrammer.com                          *   FILE 702\n//*           http://WWW.MVSProgrammer.com                          *   FILE 702\n//*           770-335-0478                                          *   FILE 702\n//*                                                                 *   FILE 702\n//*   For compatibility issues, please see the member $$NOTE0       *   FILE 702\n//*   which was written by Stephen McColley.                        *   FILE 702\n//*                                                                 *   FILE 702\n//*   Please see member $$$$PKG describing the packaging of this    *   FILE 702\n//*   pds first, before attempting to install either the z/OS 1.6   *   FILE 702\n//*   or z/OS 1.4 versions of the SunTrust JES2 mods.               *   FILE 702\n//*                                                                 *   FILE 702\n//*   The z/OS 1.6 installation pds can be created by customizing   *   FILE 702\n//*   and running job $PDSLO16 which is included in this pds.       *   FILE 702\n//*                                                                 *   FILE 702\n//*   The z/OS 1.4 installation pds can be created by customizing   *   FILE 702\n//*   and running job $PDSLO14 which is included in this pds.       *   FILE 702\n//*                                                                 *   FILE 702\n//*   Description of the JES2 Usermods (from the z/OS 1.6 version)  *   FILE 702\n//*                                                                 *   FILE 702\n//*       ALL OF OUR USERMODS ARE IN MVS.OSMAINT.USERMODS ON        *   FILE 702\n//*       THE TECPLEX.                                              *   FILE 702\n//*                                                                 *   FILE 702\n//*       Each usermod(LSES5**) member has a corresponding          *   FILE 702\n//*       member suffixed with a \"J\".  The members with the \"J\"     *   FILE 702\n//*       suffixes are sample jcl install members.                  *   FILE 702\n//*                                                                 *   FILE 702\n//*       FOR JES2 WE HAVE THE FOLLOWING usermods - These are       *   FILE 702\n//*       ALL of our JES2 mods.  Most folks who are interested      *   FILE 702\n//*       in only using the Mellon Mods should refer to the         *   FILE 702\n//*       next section, entitled -                                  *   FILE 702\n//*                                                                 *   FILE 702\n//*       \" THE FOLLOWING CAN BE CONSIDERED MELLON MOD              *   FILE 702\n//*       REPLACEMENTS \"                                            *   FILE 702\n//*                                                                 *   FILE 702\n//*     All of our JES2 usermods:                                   *   FILE 702\n//*                                                                 *   FILE 702\n//*   MOD NAME   IMPLEMENTED     LMOD NAME   DESCRIPTION            *   FILE 702\n//*   LSES500   ZOS6-09/01/2005  STJTABS  - CREATES OUR EXTENSIONS  *   FILE 702\n//*                                         TO JQE AND JCT          *   FILE 702\n//*   LSES502   ZOS6-09/01/2005  STSCX01A - JES2 EXIT1 - BANNER     *   FILE 702\n//*                                         PAGE EXIT (NON 3800)    *   FILE 702\n//*   LSES503   ZOS6-09/01/2005  STSCX04A - parses /*ROUTE cards    *   FILE 702\n//*   LSES504   ZOS6-09/01/2005  STSCX04B - PARSES                  *   FILE 702\n//*                                         /*BEFORE/*AFTER/*WITH   *   FILE 702\n//*                                         AND /*CNTL              *   FILE 702\n//*   LSES505   ZOS6-09/01/2005  STSCX05A - PROCESS $REPEXIT AND    *   FILE 702\n//*                                         $ADDEXIT COMMANDS       *   FILE 702\n//*   LSES506   ZOS6-09/01/2005  STSCX05B - prevents purging jobs   *   FILE 702\n//*                                         by range                *   FILE 702\n//*   LSES507   ZOS6-09/01/2005  STSCX06A - MOVES VALID XEQ VALUES  *   FILE 702\n//*                                         TO SCHENV VALUES        *   FILE 702\n//*   LSES509   ZOS6-09/01/2005  STSCX15A - FORCES FCB LOAD UNLESS  *   FILE 702\n//*                                         CHANGING STD FORMS      *   FILE 702\n//*   LSES510   ZOS6-09/01/2005  STSCX20A - END OF INPUT - MOVE     *   FILE 702\n//*                                         JCT INFO TO JQE         *   FILE 702\n//*   LSES511   ZOS6-09/01/2005  STSCX36A - SAF process of RJE      *   FILE 702\n//*                                         submitted jobs          *   FILE 702\n//*   LSES512   ZOS6-09/01/2005  STSCX49A - IMPLEMENT               *   FILE 702\n//*                                         BEFORE|AFTER|WITH|CNTL  *   FILE 702\n//*                                         USAGE                   *   FILE 702\n//*   LSES513   ZOS6-09/01/2005  STSCX100 - FCB SETUP /             *   FILE 702\n//*                                         TRANSLATION USER        *   FILE 702\n//*                                         EXIT100                 *   FILE 702\n//*   LSES514   ZOS6-09/01/2005  HASPPRPU - INSERT USER EXIT100     *   FILE 702\n//*                                         INTO HASPPRPU CODE      *   FILE 702\n//*   -------- ---------------   -------------------------------    *   FILE 702\n//*                                                                 *   FILE 702\n//*      ***********                                                *   FILE 702\n//*                                                                 *   FILE 702\n//*     OF THESE MODS, THE FOLLOWING CAN BE                         *   FILE 702\n//*     CONSIDERED MELLON MOD REPLACEMENTS                          *   FILE 702\n//*                                                                 *   FILE 702\n//*      ***********                                                *   FILE 702\n//*                                                                 *   FILE 702\n//*   MOD NAME   IMPLEMENTED     LMOD NAME   DESCRIPTION            *   FILE 702\n//*   LSES500   ZOS6-09/01/2005  STJTABS  - CREATES OUR EXTENSIONS  *   FILE 702\n//*                                         TO JQE AND JCT          *   FILE 702\n//*   LSES503   zOS6-09/01/2005  STSCX04A - parses /*ROUTE cards    *   FILE 702\n//*   LSES504   ZOS6-09/01/2005  STSCX04B - PARSES                  *   FILE 702\n//*                                         /*BEFORE/*AFTER/*WITH   *   FILE 702\n//*                                         AND /*CNTL              *   FILE 702\n//*   LSES507   ZOS6-09/01/2005  STSCX06A - MOVES VALID XEQ VALUES  *   FILE 702\n//*                                         TO SCHENV VALUES        *   FILE 702\n//*   LSES510   ZOS6-09/01/2005  STSCX20A - END OF INPUT - MOVE     *   FILE 702\n//*                                         JCT INFO TO JQE         *   FILE 702\n//*   LSES512   ZOS6-09/01/2005  STSCX49A - IMPLEMENT               *   FILE 702\n//*                                         BEFORE|AFTER|WITH|CNTL  *   FILE 702\n//*                                         USAGE                   *   FILE 702\n//*                                                                 *   FILE 702\n//*      ***********                                                *   FILE 702\n//*                                                                 *   FILE 702\n//*      The installation instructions for the Mellon MODs          *   FILE 702\n//*      only, can be found in member DOCINS.                       *   FILE 702\n//*                                                                 *   FILE 702\n//*      The overview documentation for the mellon mods is in       *   FILE 702\n//*      member DOCOVW.                                             *   FILE 702\n//*                                                                 *   FILE 702\n//*      The user documentation for the mellon mods is in           *   FILE 702\n//*      member DOCUSR.                                             *   FILE 702\n//*                                                                 *   FILE 702\n//*      ***********                                                *   FILE 702\n//*                                                                 *   FILE 702\n//*         * * * PLEASE NOTE ! * * *                               *   FILE 702\n//*                                                                 *   FILE 702\n//*        SPECIAL THANKS GO TO BOB BREAK OF ST. LOUIS FOR          *   FILE 702\n//*      THE ORIGINAL CODE TO PARSE THE \"/*ROUTE XEQ RESNAME\"       *   FILE 702\n//*      CARDS AND SET THE APPROPRIATE EXECUTION ENVIRONMENT.       *   FILE 702\n//*                                                                 *   FILE 702\n//*        SPECIAL THANKS TO JUDY RUNT OF WISCONSIN ELECTRIC        *   FILE 702\n//*      FOR THE ORIGINAL CODE TO HANDLE THE \"/*CNTL                *   FILE 702\n//*      BEFORE|AFTER|WITH,RESNAME\" AND \"/*CNTL                     *   FILE 702\n//*      RESNAME,EXC|SHR\" ROUTINES.  THE USE OF THE BLOCK           *   FILE 702\n//*      EXTENSION REUSABLE TABLES, and BERT'S, TO EXTEND THE       *   FILE 702\n//*      JCT AND JQE.                                               *   FILE 702\n//*                                                                 *   FILE 702\n//*      Although some changes have been made to all of the         *   FILE 702\n//*      code, their combined help was invaluable.                  *   FILE 702\n//*                                                                 *   FILE 702\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DOCINS": {"ttr": 536, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\x051O\\x01\\x051O\\x16\\x05\\x00\\xc8\\x00\\x92\\x00\\x00\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2005-11-10T00:00:00", "modifydate": "2005-11-10T16:05:00", "lines": 200, "newlines": 146, "modlines": 0, "user": "T0SM0"}, "text": "\n                 Installation Procedures\n\n\nThis member is used with the xmit format PDS member that you downloaded\nfrom the CBT tape.  The members within the pds have a basic set of\ndocumentation.  The heart of the PDS is however the usermods themselves\nand the sample SMP/e jobs used to install those usermods.  The usermods\nare in members with a format of LSES5##, each has a corresponding member\nwith a suffix of \"J\" for example, LSES5##J, which is the sample SMP/e\njob to install the associated usermods.\n\nThe data on the CBT tape contains all of our usermods - but - to only\ninstall the mellon mods, you just need a few of the usermods.  I have\nincluded a checklist of activities for the installation.\n\n\n\n  ****  FastPath Checklist for Mellon Mods Install ****\n\n  1-modify statements as required in member lses500, and the JCL\n    in member lses500j and submit - to install jct/jqe extensions.\n\n  2-modify statements as required in member lses503, and the JCL\n    in member lses503j and submit - to install first jes2 exit04.\n\n  3-modify statements as required in member lses504, and the JCL\n    in member lses504j and submit - to install second jes2 exit04.\n\n  4-modify statements as required in member lses507, and the JCL\n    in member lses507j and submit - to install jes2 exit06.\n\n  5-modify statements as required in member lses510, and the JCL\n    in member lses510j and submit - to install jes2 exit20.\n\n  6-modify statemenst as required in member lses512, and the JCL\n    in member lses512j and submit - to install jes2 exit49.\n\n  7-make loadmods available to the jes2 task - lla refresh, or steplib\n    changes- whatever is required in your environment\n\n  8-add LOADMOD and EXIT statements to the HASPPARM dataset.\n\n  9-restart JES2.\n\n 10-test - run some jobs containing Mellon control cards.\n    see the DOCUSR member for more information on how to use the mods.\n    I will try to get a standard IVP job set up for the next release.\n\n 11-Share the documentation with the users - DOCOVW is an overview, and\n    DOCUSR is a set of user documentation.\n\n 12-Celebrate - wasn't that easy!?\n\n 13-Send an e-mail to SGMcColley@ALLTEL.NET, let me know your e-mail\n    address and that you are using the mods, I can then contact you when\n    new versions are available and if any bugs are found, and or fixed.\n    If you wish, I can also send you a PC friendly version of the\n    documentation - suitable for sharing with others.\n\n  *** end of fastpath install instructions ***\n\n\n\n  Now for the details... I know you won't just run jobs blindly...\n\n\n\nThe Mellon Shared Spool Mods are provided in USERMOD format.  They will\nadd macro source members to SYSLIB(SHASMAC), and source members to\nSYSLIB(SHASSRC), and will add JCLIN for the source members that causes\nsource members to be linked (IEWBLINK) into SHASLINK, as referenced by\nthe //SYSLMOD DD statement in each set of JCLIN.  You may need to alter\nthe syslmod statement to fit your installations needs before receiving\nthe usermods.  The JCLIN also references standard SYSLIB DD datasets;\n\n    SYS1.MACLIB\n    SYS1.MODGEN\n    SYS1.SHASMAC\n    SYS1.SHASSRC\n    SYS1.AHASMAC\n    SYS1.AHASSRC\n    SYS1.AMACLIB\n    SYS1.AMODGEN\n\n  The names should be fine for most shops, if you have altered\nthe names to conform to local standards; the JCLIN may need\nto have similar changes made, before receiving the usermods.\n\nYou should use normal RECEIVE, and APPLY jobsteps to install the mods.\nSample JOBS have been included in the PDS package in members that end\nwith a\"J\".   As delivered the jobs will REJECT a previous attempt to\napply, then RECEIVE a usermod, and finally APPLY the usermod.  I use\nthis sequence for reinstalls.  As delivered, you will get a bad return\ncode from the first run because the initial REJECT step will fail,\nunless of course you have already applied the usermods.  The bad return\ncode from the REJECT can be ignored, or if you like simply resubmit the\nentire job and all steps should run to a good completion code.  The jobs\nmay need to be modified to meet your shops specific needs.\n\n  The member names are in the format - \"LSES5##\", these members are the\nusermods and should be applied in the same sorted order that they appear\nin the PDS directory.  Earlier usermods are required to successfully\napply later usermods.  They may all be applied at the same time, but I\nprefer to install them one at a time, so that in the event there are any\nproblems, I can correct them one member at a time before continuing.  As\nmentioned above the member names that are suffixed with a \"J\" are the\nactual jobs, i.e. LSES500 is a single usermods, usermods LSES500, and\nLSES500J is the member that contains sample JCL to install usermods\nLSES500.\n\nAfter SMP installation, update JES2 parms by adding the following\nloadmod and exit statements.\n\n LOADMOD(STJTABS)     /* DYNAMIC TABLE DEFINITIONS FOR JQE EXTENSION */\nLOADMOD(STSCX04A)    /* PARSES /*ROUTE XEQ RESNAME AND VALIDATES */\nLOADMOD(STSCX04B)    /* PARSES /*BEFORE, AFTER,WITH, AND CNTL */\nLOADMOD(STSCX06A)    /* TURNS /*ROUTE CNTL,XX INTO SCHENV= VALUES */\nLOADMOD(STSCX20A)    /* COPIES JCT INFO INTO THE JQE EXTENSION    */\nLOADMOD(STSCX49A)    /* IMPLEMENTS BEFORE, AFTER, WITH, CNTL STMTS */\nEXIT(004) ROUTINE=(EXIT04A,EXIT04B),STATUS=ENABLED\nEXIT(006) ROUTINE=(EXIT06A),STATUS=ENABLED\nEXIT(020) ROUTINE=(EXIT20A),STATUS=ENABLED\nEXIT(049) ROUTINE=(EXIT49A),STATUS=ENABLED\n\n\nMake the updated JES2 load modules available, that may require a refresh\nof LLA, or copying a maintenance pack to production.  Your own local\nprocedures will dictate what will need to be done.  The final step is to\nshutdown and restart JES2, this can be accomplished via 'rolling warm\nstarts\".  It is not necessary to shutdown all JES2 tasks in the MAS at\nthe same time, this is an important change from the original Mellon Mods\n* * We no longer make any changes to the JES2 checkpoint records all\ninformation that is saved for the Mellon Mods, and the info that is used\nto alter the job selection sequences is maintained in formally supported\ndynamic extensions to the jobs JCT and JQE.\n\n\n -  How the exits work, what each does -\n\nThe first LOADMOD statement is for module STJTABS, which is created with\nusermods LSES500, it creates extensions to the JQE and JCT, which are\nneeded to contain the Mellon control statement information, are\nreferenced at job selection time.  There is no specific exit associated\nwith this module.\n\nThe second LOADMOD statement is for module STSCX04A, used in exit04.  It\nparses the /*ROUTE XEQ RESNAME and performs basic validation.\n\nThe next LOADMOD statement is for module STSCX04B, also used in exit04.\nIt parses the /*BEFORE, AFTER, WITH and CNTL statements.\n\nThe next LOADMOD statement is for STSCX06A, used in exit06.  It turns\n/*ROUTE CNTL, XX into SCHENV= values.\n\nThe next LOADMOD statement is for STSCX20A, is used in exit20, and\ncopies JCT info into the JQE extension before the JCT is lost.\n\nThe next LOADMOD statement is for STSCX49A, and implements the before\nafter, with, and cntl statements by rejecting or allowing JES2's\nsuggested 'next' job, in the job selection exit49.\n\n  Of course, the entire source is provided for a closer look if you\ndesire to do so.\n\n\n  -  Support for these mods  -\n\n  As stated above, I will provide support on a time available basis, on\nmy own time.  Simply forward appropriate documentation of any problems\nyou encounter to me at SGMCCOLLEY@ALLTEL.NET and I will review them as\nquickly as I can.  I usually review my e-mail at least once every 2\ndays.  I can however make no guarantee of support, or promise to fix\nanything.  I will do what I can, and I want to make sure they work for\nyou.\n\n  - let me know how your using the mods, and share an e-mail address -\n\nIf you would drop me a line at the e-mail address above after installing\nthese MODS and let me know you are using them, I will be able to let you\nknow when new versions are available, and if any bugs are found I can\nalert you as soon as I know, and as soon as a fix is available.\n\n  - Other suggested modifications  -\n\n  If you have any suggestions for future enhancements, please let me\nknow by dropping me a line at SGMCCOLLEY@ALLTEL.NET and I will review\nany and all suggestions, and implement those that I can in future\nversions of the mods.  Again, this is not a guarantee of future changes,\njust a guarantee that I will review and implement those that I can.\n\n\n\n\n\n\n  I sincerly hope that these mods can help your shop, we use them here\nat our shop, and have had very good sucess with them.\n\n - end of text -\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DOCOLD": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x051O\\x01\\x051O\\x149\\x07\\x8d\\x07\\x8d\\x00\\x00\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-11-10T00:00:00", "modifydate": "2005-11-10T14:39:00", "lines": 1933, "newlines": 1933, "modlines": 0, "user": "T0SM0"}, "text": "\n This is the old - original documentation for mellon mods.\n BEWARE - most of it is now invalid.  It is included here\n for the sake of historical acuracy only.\n\n\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n$                                                          $\n$                                                          $\n$           MODS TAPE VERSION SP420/1    07 apr 93         $\n$                                                          $\n$                                                          $\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n$                                                          $\n$            ****  ****  *    *  ****   ****               $\n$           *    * *   * *    * *    * *    *              $\n$           *      *   * *    *      * *    *              $\n$            ****  ****  ******  ****  *    *              $\n$                * *          * *      *    *              $\n$           *    * *          * *      *    *              $\n$            ****  *          * ******  ****               $\n$                                                          $\n$                  * *****  ****   ****                    $\n$                  * *     *    * *    *                   $\n$                  * *     *           *                   $\n$                  * ***    ****   ****                    $\n$                  * *          * *                        $\n$              *   * *     *    * *                        $\n$               ***  *****  ****  *****                    $\n$                                                          $\n$          ****  *    * *****   ****  *****  *             $\n$         *    * *    * *    * *    * *    * *             $\n$         *      *    * *    * *      *    * *             $\n$          ****  ****** *****   ****  *****  *             $\n$              * *    * *  *        * *      *             $\n$         *    * *    * *  *   *    * *      *             $\n$          ****  *    * *   *   ****  *      ******        $\n$                                                          $\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n$                                                          $\n$                                                          $\n$ FUNCTIONAL CHANGES FOR RELEASE    SP4.2.0                $\n$                                                          $\n$ 1.) Add a new dependent job control card, /*WITH jobname.$\n$                                                          $\n$ 2.) Permit $,@,# in jobname field of /*BEFORE, /*AFTER,  $\n$     and /*WITH                                           $\n$                                                          $\n$ 3.) Delete $DRES command support.  Use IBM supplied      $\n$     commands, i.e. $D CONDEF,BUFNUM,BUFFREE, etc.        $\n$                                                          $\n$ 4.) Delete /*ROUTE XEQ CPUn support.  Use /*JOBPARM      $\n$     SYSAFF=(sid) card.                                   $\n$                                                          $\n$ 5.) Delete $KD/$KT command support.  Use IBM supplied    $\n$     commands $D/$T MASDEF.                               $\n$                                                          $\n$ 6.) Re-format various command responses to include       $\n$     MLWTO control lines to match JES2 command responses. $\n$                                                          $\n$ 7.) New command responses to $QA/$QD commands.           $\n$                                                          $\n$ 8.) Change $QD command to deny removal of a resource if  $\n$     there are executing job in the given system.  Add    $\n$     a third poistional $QD command operand, \"FORCE\", to  $\n$     permit the resource to be removed even if there are  $\n$     active jobs using the resource.                      $\n$                                                          $\n$ 9.) Enhance $DC command response to show count of        $\n$     conflicts.                                           $\n$                                                          $\n$ 10.) Enhance $DB command.                                $\n$                                                          $\n$ 11.) Change $QJ, $QT, $QS, and add $Q'jobname' to        $\n$      permit abstract resources to be added/delete from   $\n$      a JOB/TSU/STC or release a JOB from a dependent     $\n$      job control hold condition.  JECL cards and PR/PU   $\n$      stats are no longer detailed by this command.  Use  $\n$      IOF, SDSF, Q command for displaced function.        $\n$                                                          $\n$ 12.) Eliminate /*AFTER, /*BEFORE, /*CNTL order           $\n$      dependency.  This cards can now appear in any order $\n$      in the input stream.                                $\n$                                                          $\n$ 13.) Various $HASP9** series messages have been          $\n$      eliminated or changed.                              $\n$                                                          $\n$ 14.) SAF entity names have changed for the $Q commands.  $\n$                                                          $\n$ 15.) Add front end intercept to $QACT service routine    $\n$      in support of /*WITH JECL card.                     $\n$                                                          $\n$ 16.) Previously supplied Mellon Bank support for the     $\n$      $DN/$DQ commands has been renamed to $LN/$LQ        $\n$      and has been substantially enhanced.                $\n$                                                          $\n$ 17.) $HASP608 message text has been enhanced.            $\n$                                                          $\n$ 18.) Several Mellon Bank commands using the CONDEF       $\n$      DISPLEN when building command responses.            $\n$                                                          $\n$ 19.) Add resource-equate definition macro - $RESEQU      $\n$                                                          $\n$ 20.) Enhance $LF command job selection by absence or     $\n$      presence of job, operator, and error holds. Also    $\n$      screen for held or non-held output dispostions.     $\n$                                                          $\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n$                                                          $\n$                                                          $\n$ FUNCTIONAL CHANGES FOR RELEASE    SP3.1.3                $\n$                                                          $\n$ 1.) Interface to $SEAS routine to validate user commands $\n$     in EXIT 005 through SAF.                             $\n$                                                          $\n$ 2.) Correct addressability errors when using all 64      $\n$     resource names in the abstract resource table.       $\n$                                                          $\n$ 3.) Correct DJC hold problem by front ends place on      $\n$     $QMOD and $QPUT established by EXIT024.              $\n$                                                          $\n$                                                          $\n$ FUNCTIONAL CHANGES FOR RELEASE(S) SP2.2.0/SP3.1.1        $\n$                                                          $\n$ 1.) Performance enhancement for dependent job control    $\n$     job select logic through the use of user hold        $\n$     hold bits in the JQE.                                $\n$                                                          $\n$ 2.) $DN/DQ,HOLD commands enhanced to process jobs that   $\n$     are held due to dependent job control conflicts.     $\n$                                                          $\n$ 3.) Enhancements made in the HASP608 job display message $\n$     to show before/after/cntl specifications as well as  $\n$     dependent job control hold/ownership information.    $\n$                                                          $\n$ 4.) New exit routine, MBJOBEND, added to release jobs    $\n$     on dependent job control hold when an owning job     $\n$     ends.                                                $\n$                                                          $\n$                                                          $\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n************************************************************\n************************************************************\n**************                                **************\n************                                    ************\n**********                                        **********\n*                                                          *\n*                                                          *\n*             GENERAL DESCRIPTION OF MELLON BANK           *\n*                  SHARED SPOOL MODS                       *\n*                                                          *\n**********                                        **********\n************                                    ************\n**************                                **************\n************************************************************\n************************************************************\n\n\n************************************************************\n*                                                          *\n*                 D I S C L A I M E R                      *\n*                                                          *\n************************************************************\n\n    THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE\n BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY\n IS MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS\n ASSUMED FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE\n USE OF THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO\n EVALUATE THE USEFULLNESS OF THE MATERIAL.\n\n    WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE\n NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE\n IN THE FUTURE.\n\n************************************************************\n************************************************************\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n    THE FOLLOWING IS A BRIEF EXPLANATION OF THE MELLON BANK MODS\nMADE TO JES2.  IT IS INTENDED FOR THOSE WHO ARE UNFAMILIAR WITH\nPREVIOUS VERSIONS OF HASP OR JES2 SHARED SPOOL SUPPORT AND IS\nBEING PROVIDED IN LIEU OF THE FORMAL DOCUMENT ORIGINALLY\nDISTRIBUTED WITH THE HASP V4 MELLON MODIFICATIONS.  IF THE WRITE-UP\nLEAVES YOU WITH SOME UNANSWERED QUESTIONS, YOU MAY GIVE US A CALL.\n\n\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nRESOURCE ROUTING CONTROL CARDS\n\n     PROVIDES A FACILITY BY WHICH JOBS CAN BE ROUTED TO SPECIFIC\nCPUS DEPENDING ON THE AVAILABILITY OF A PARTICULAR RESOURCE NAME\nASSIGNED TO A CPU.  RESOURCE NAMES ARE USER DEFINED (SYSTEMS PROGRAMMER)\nAND SPECIFIED IN THE JES2 MACRO  $RESTABL.  ONCE DEFINED, THESE\nRESOURCE NAMES ATTACHED TO A CPU REMAIN IN EFFECT UNTIL THEY ARE\nDETACHED VIA THE $QD COMMAND, OR A COLD START IS DONE AND ALL\nRESOURCES ARE THEN UNASSIGNED.\n\n     RESOURCES SPECIFIED IN THE $RESTABL MACRO CAN DEFINE PHYSICAL\nI/O GEAR WHICH MAY BE ATTACHED TO ONLY ONE CPU AT A TIME, OR\nPOSSIBLY A SOFTWARE NAME WHICH MAY ONLY PERTAIN TO ONE PARTICULAR CPU.\n\n\nSPECIFICATION ... IN $RESTABL MACRO\n\n\nASSIGNMENT....... $QA,resource       attached a resource name from\n                                     the table to this system.\n\n\n                  $QD,resource       remove a resource name from this\n                                     system if no jobs executing using\n                                     specified resource.\n\n                  $QD,resource,FORCE remove resource name from this\n                                     system even if jobs executing are\n                                     using the resource name.\n\nUSE............... /*ROUTE XEQ resource     ...  FOLLOWING JOBCARD\n\n                   JOB WILL AUTOMATICALLY BE SCHEDULED TO THE CPU(S)\n                   BEARING THIS RESOURCE NAME IN ITS QSE\n\n\nEXAMPLE:    SYSTEM #       RESOURCES ATTACHED\n            ________       __________________\n\n               1           DUALD,IMS\n\n               2           3525\n\n               3           IMS,TSO,NOINQ\n\n\n   //BSPROUT JOB (,,7551,429),'TEST RESOURCE',MSGLEVEL=(1,1),CLASS=A\n   /*ROUTE XEQ IMS\n   //S1 EXEC PGM=IEFBR14\n\n\nTHIS JOB WILL BE SCHEDULED TO EITHER SYSTEM #1 OR SYSTEM #3\n\n\n     THE $DC COMMAND IS USED TO DISPLAY THOSE JOBS WHICH HAVE USED\nTHE /*ROUTE XEQ RESOURCE CONTROL CARD AND NO CPUS HAVE THAT RESOURCE\nNAME ATTACHED....  FOR EXAMPLE, USING THE ABOVE LIST, IF A JOB WERE\nSUBMITTED WITH A   /*ROUTE XEQ SCANNER   CONTROL CARD, THE JOB WOULD\nNEVER EXECUTE NO MATTER HOW MANY INITIATORS WERE AVAILABLE UNTIL\nA SYSTEM IN THE COMPLEX WOULD ISSUE A $QA,SCANNER.  THIS WOULD\nBE DETECTABLE BY ISSUING A $DC COMMAND WHICH WOULD DISPLAY THOSE\nJOBS WAITING FOR RESOURCE NAMES.\n\n\n     THE $DR COMMAND WILL LIST THE RESOURCE ATTACHED TO EACH CPU.\n\n EXAMPLE\n\n     $DR          NO OPERANDS  DEFAULTS THIS CPU\n\n     $DR,&SID     LIST SPECIFIC CPU RESOURCES.\n\n\n     OTHER /*ROUTE CONTROL CARD FORMATS.........\n\n      /*ROUTE XEQ HERE\n          JOB WILL BE SCHEDULED FOR EXECUTION ON THE CPU WHICH\n          READ THE JCL.  (CONTROLLING THE CARD READER)\n\n\n\n---------------------------------------------------------------\n\n\n           .............. /*CNTL CARDS ..............\n\n\n     THIS FEATURE PROVIDES THE ABILITY TO SINGLE-THREAD JOBS\nTHROUGH EXECUTION WHICH NEED A DEVICE OF WHICH THERE IS ONLY ONE\nAND MUST BE USED SERIALLY.  SOME EXAMPLES WOULD BE THE 3525,\nDUALD DENSITY DRIVE AND THE OCR SCANNER.\n\n\n     BY USING THE /*CNTL CARD, YOU CAN DEFINE A RESOURCE NAME THAT\nYOU NEED EXCLUSIVE CONTROL OF.  IF ANY OTHER JOBS COME INTO THE SYSTEM\nWITH THE SAME CONTROL NAME, THEY WILL NOT EXECUTE SIMULTANEOUSLY ON\nTHE SAME OR OTHER CPUS IN THE COMPLEX.  THIS PROVIDES BETTER CONTROL\nOVER THE RESOURCES WE HAVE THAT MUST BE USED SERIALLY.  THIS DOES NOT\nAFFECT JOBS RUNNING WITHOUT THE /*CNTL CARD OR RUNNING IN A SYSTEM\nWITHOUT SHARED SPOOL.\n\n\n   THE FORMAT FOR RESOURCE CONTROL IS :\n\n         /*CNTL name,EXC     OR\n         /*CNTL name,SHR    (DEFAULT SHR)\n\n\n     USERS MAY ALSO PROTECT DATASETS FROM BEING BEING UPDATED BY\nDIFFERENT JOBS ON THE SAME OR DIFFERENT CPUS BY USING THE /*CNTL CARD.\nEACH /*CNTL CARD MAY HAVE A 1 TO 8 CHARACTER CONTROL NAME AND AN EXC\nOR SHR SPECIFICATION.\n\n     JOBS WITH THE SAME CNTL NAME WILL NOT EXECUTE SIMUTANEOUSLY\nIF ONE OF THE JOBS HAS AN EXC CONTROL SPECIFICATION. JOBS WITH SHR\nMAY EXECUTE SIMUTANEOUSLY ON ANY CPU.\n\n\nEXAMPLES:\n\n    //JOB1 JOB\n    /*CNTL MASTER,EXC\n\n\n    //JOB2 JOB\n    /*CNTL MASTER,SHR\n\n\n  IN THE ABOVE EXAMPLE, WHICHEVER JOB BEGAN EXECUTION FIRST, WOULD\nLOCKOUT THE OTHER JOB FROM BEGINNING UNTIL IT HAS COMPLETED.\n\n\n\n    //JOB1 JOB\n    /*CNTL MASTER,SHR\n\n\n    //JOB2 JOB\n    /*CNTL MASTER\n\n\n    //JOB3 JOB\n    /*CNTL MASTER,SHR\n\n\n  IN THE ABOVE EXAMPLE, ALL 3 JOBS COULD RUN SIMULTANEOUSLY AS THEY\nALL SPECIFY THE SHR OPTION.\n\n\n________________________________________________________________\n\n\n/*BEFORE, /*AFTER, /*WITH dependent job control cards\n\n\nFORMAT :      /*BEFORE jobname\n              /*AFTER  jobname\n              /*WITH   jobname\n\n\n     Provides a means to schedule jobs before, after, or with another\n     JOB/TSU/STC in the execution queue.  These cards must follow the\n     JOB card.\n\n     IF THE BEFORE OR AFTER JOBNAME IS NOT IN THE JOBQ, THERE IS\n     NO ACTION TAKEN ON PREVENTING THE JOB FROM BEGINNING.\n\n     IF THE WITH jobname IS NOT IN THE JOBQ, THE JOB WILL\n     WAIT FOR THE JOB/TSU/STC TO BEGIN EXECUTION.\n\nEXAMPLE #1:\n\n\n    /*PRIORITY     13\n    //BSPTEST  JOB (,,7551,429),KALISH,MSGLEVEL=(1,1),CLASS=A\n    /*AFTER BSPFIRST\n    //S1 EXEC PGM=IEFBR14\n    /*\n    /*PRIORITY     2\n    //BSPFIRST JOB (,,7551,429),KALISH,MSGLEVEL=(1,1),CLASS=A\n    /*CNTL DUALD,EXC\n    //SA EXEC PGM=IEFBR14\n    /*\n\n\n  IN THE ABOVE EXAMPLE, JOB BSPTEST WOULD NOT EXECUTE UNTIL JOB\nBSPFIRST HAS FINISHED EXECUTION, EVEN THOUGH BSPTEST HAS A HIGHER\nPRIORITY.\n\n\n\n\nEXAMPLE #2:\n\n\n    /*PRIORITY     10\n    //cicst900 JOB (,,7551,429),KALISH,MSGLEVEL=(1,1),CLASS=A\n    /*WITH CICSTEST\n    //S1 EXEC PGM=IEFBR14\n    /*\n\n\n  In the above example, job CICST900 would not execute until JOB/TSU/STC\nCICSTEST began executiion.  At that time, CICST900 would be eligible\nfor selection by an initiator in the same system as CICSTEST.\n\n\n\n********************************************************************\n********************************************************************\n\n EXAMPLES OF ALLOWABLE -MULTI- CONTROL AND ROUTE CARDS COMBINATIONS\n\n    COMBINATION  1.                 ** ONE          AFTER  CARD  **\n                                    ** ONE          BEFORE CARD  **\n                                    ** NONE TO FOUR CNTL   CARDS **\n                /*AFTER   JOBNAME\n                /*BEFORE  JOBNAME\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n\n    COMBINATION  2.                 ** ONE           AFTER CARD  **\n                                    ** NONE TO FIVE  CNTL  CARDS **\n                /*AFTER   JOBNAME\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n\n    COMBINATION  3.                 ** ONE           BEFORE CARD **\n                                    ** NONE TO FIVE  CNTL  CARDS **\n                /*BEFORE  JOBNAME\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n\n    COMBINATION  4.                 ** ONE TO SIX  CNTL    CARD  **\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n\n    COMBINATION  5.                 ** ONE           AFTER  CARD  **\n                                    ** ONE           BEFORE CARD  **\n                                    ** ONE           WITH   CARD  **\n                                    ** NONE TO THREE CNTL   CARDS **\n                /*CNTL    name,disp\n                /*CNTL    name,disp\n                /*CNTL    name,disp\n                /*AFTER   jobname\n                /*BEFORE  jobname\n                /*WITH    jobname\n\n*****************************************************************\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n$        H    H      J EEEEEE 4    4 4    4  2222   0000        $\n$        H    H      J E      4    4 4    4 2    2 0    0       $\n$        H    H      J E      4    4 4    4      2 0    0       $\n$        HHHHHH      J EEEE   444444 444444  2222  0    0       $\n$        H    H      J E           4      4 2      0    0       $\n$        H    H J    J E           4      4 2      0    0       $\n$        H    H  JJJJ  EEEEEE      4      4 222222  0000        $\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n*****************************************************************\n*\n*\n*  MELLON BANK SHARED SPOOL FOR SP 4.2.0 JES2 FMID(HJE4420)\n*\n*  THESE CHANGES WILL REQUIRE A COLD-START SINCE THEY MODIFY JES2\n*  CONTROL BLOCKS (IE. QSE, JQE)...\n*\n*  SINCE SP 1.3.3 JES2 THE VAST MAJORITY OF THE MELLON MOD CODE\n*  HAS BEEN REMOVED FROM INSTREAM HASPSRC UPDATES AND HAS BEEN\n*  PLACED INTO JES2 EXIT CODE THAT IS TAKEN BY THE JES2 MAIN\n*  TASK.\n*\n*\n*     ADDITIONALLY, DEPENDENT JOB CONTROL HOLD/OWNERSHIP IS DISPLAYED.\n*\n*  $  THE FOLLOWING MODULES, MACROS, AND CONTROL BLOCK ARE CHANGED.\n*\n*      $JQE, $QSE, $RDRWORK, $HCT, HASPCOMM\n*\n*\n*  $    THE FOLLOWING STATEMENTS NEED TO BE ADDED TO THE JES2 PARAMETER\n*       LIBRARY TO ESTABLISH THE NECESSARY JES2 EXIT ENVIRONMENT AT\n*       INITIALIZATION TIME:\n*\n*       LOAD    MBSHRSPL                     USER LINKLIB LOAD MODULE\n*       EXIT002 ROUTINE=(MBJOBCRD)           JOB CARD SCAN\n*       EXIT004 ROUTINE=(MBJECL)             JCL/JECL CARD SCAN\n*       EXIT005 ROUTINE=(MBCMDS)             COMMAND PROCESSOR\n*       EXIT007 ROUTINE=(MBJOBEND)           RELEASE JOBS ON DJC HOLD\n*       EXIT014 ROUTINE=(MBJQEGET)           $QGET\n*       EXIT020 ROUTINE=(MBRDREND)           END OF INPUT\n*       EXIT024 ROUTINE=(MBQINIT)            POST INITIALIZATION\n*       EXIT245 ROUTINE=(MBJOBMSG)           COFJMSG SUPPORT\n*\n*\n*\n*  $    SEVERAL ADDITIONAL MELLON WRITTEN COMMANDS HAVE BEEN INCLUDED\n*       FOR YOUR USE:\n*\n*       $DB WILL DISPLAY A SUMMARY OF THE WORKED BACKLOGGED ON THE\n*       M.A.S. COMPLEX.\n*\n*       $DP WILL DISPLAY A ONE LINE SUMMARY OF PRINTER/PUNCH STATUS.\n*\n*       $LF IS SIMILAR TO THE $DF COMMAND; HOWEVER, IT HAS THE ABILITY\n*       TO LIST JOB OUTPUT BY JOBNAME.\n*\n*\n*\n*\n*  $    FILE 2 ON THIS TAPE CONTAINS IEBUPDTE CARDS THAT UPDATE AND ADD\n*       CODE TO YOUR HASPSRC SOURCE LIBRARY (IT IS ADVISABLE TO CREATE\n*       A BACKUP COPY OF YOUR HASPSRC PDS AND APPLY THE MODS TO THAT\n*       COPY). ASSEMBLE AND LINK YOUR JES2 SOURCE.  MBSHRSPL SHOULD\n*       BE ASSEBMBLED AND LINKED AS SEPARATE APF AUTHORIZED LOAD\n*       MODULE AND MUST BE LOCATED IN AN APF AUTHORIZED LIBRARY\n*       AVAILABLE TO JES2 AT INITIALIZATION TIME.\n*\n*       NOTE:  DO NOT LINK THIS EXIT AS REENTRANT OR YOU WILL\n*              EXPERIENCE ABEND S0C4 PROBLEMS IN THE EXIT POINTS.\n*\n*\n*  $    TAPE FORMAT IS:\n*\n*       THIS DOCUMENT\n*                         RECFM=FB\n*                         LRECL=80\n*                         BLKSIZE=24000\n*                         LABEL=(1,NL)\n*                         VOL=SER=JESMOD\n*                         DSN=B1SP.FILE1\n*\n*       IEBUPDTE INPUT TO ADD AND UPDATE MEMBERS IN HASPSRC PDS\n*                         RECFM=FB\n*                         LRECL=80\n*                         BLKSIZE=24000\n*                         LABEL=(2,NL)\n*                         VOL=SER=JESMOD\n*                         DSN=B1SP.FILE2\n*\n*  $    PLEASE DIRECT ANY INQUIRIES, PROBLEMS, SUGGESTIONS, ETC. TO:\n*\n*     ROSS CUMMINGS    MELLON BANK N.A.\n*                      SYSTEMS CONTROL PROGRAMMING SECTION\n*                      MELLON SQUARE, AIM 153-0420\n*                      PITTSBURGH,  PA. 15230\n*              PHONE  (412) 234-0519\n*\n*     JOHN ROSSMILLER  MELLON BANK N.A.\n*              PHONE  (412) 236-1058\n*\n*     DON GREB         MELLON BANK N.A.\n*              PHONE  (412) 234-5985\n*\n*\n*       PLEASE HAVE CURRENT ASSEMBLED SOURCE LISTINGS AND DUMPS\n*       ON HAND BEFORE CALLING WITH ANY PROBLEMS.\n*\n*****************************************************************\n*****************************************************************\n  GGGG   OOOO   OOOO  DDDD          L      U    U  CCCC  K    K\n G    G O    O O    O D   D         L      U    U C    C K   K\n G      O    O O    O D    D        L      U    U C      K  K\n G  GGG O    O O    O D    D        L      U    U C      KKK\n G    G O    O O    O D    D        L      U    U C      K  K\n G    G O    O O    O D    D        L      U    U C    C K  K\n  GGGG   OOOO   OOOO  DDDDD         LLLLLL  UUUU   CCCC  K   K\n*                                                               *\n1\n\n       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n       @@                                                           @@\n       @@                                                           @@\n       @@  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!  @@\n       @@  |                                                     |  @@\n       @@  |                                                     |  @@\n       @@  |                                                     |  @@\n       @@  |                                                     |  @@\n       @@  |   M E L L O N   B A N K   E N H A N C E M E N T S   |  @@\n       @@  |                                                     |  @@\n       @@  |                     T O   T H E                     |  @@\n       @@  |                                                     |  @@\n       @@  |             J E S 2   S U B S Y S T E M             |  @@\n       @@  |                                                     |  @@\n       @@  |                        F O R                        |  @@\n       @@  |                                                     |  @@\n       @@  |     SP VERSION 4 RELEASE 2 MODIFICATION LEVEL 0     |  @@\n       @@  |                                                     |  @@\n       @@  |                                                     |  @@\n       @@  |                                                     |  @@\n       @@  |                                                     |  @@\n       @@  %~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2  @@\n       @@                                                           @@\n       @@                                                           @@\n       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n1\n\n\n\n\n            @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n            @                                           @\n            @       SECTION 1 - OPERATOR COMMANDS       @\n            @                                           @\n            @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n\n\n\n\n\n\n\n                  1.1  Mellon Bank Written Commands\n                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n1\n\n\n\n\n\n\n    $DB (Display Backlog)\n\n\n        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n        |  |                                                      |\n        |  | #          !                                         |\n        |  | |    a     |                                         |\n        |  | |    cc    |                                         |\n        |$D|B|,L= cca   |                                         |\n        |  | |    name  |                                         |\n        |  | |    name-a|                                         |\n        |  | %          \u00a2                                         |\n        |  |                                                      |\n        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n B\n     This command displays in matrix form a summary of activity in\n     the MAS spool complex.\n\n\n L=a or cc or cca or name or name-a\n    The area (a), console identifier (cc), area and console\n    identifier (cca), symbolic console name (name), or symbolic\n    console name and output area ID (name-a) of the active MCS console\n    at which the requested information is to be displayed.\n1\n\n\n\n\n\n\n    $DC (Display Conflicts)\n\n\n        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n        |  |                                                      |\n        |  | #          !                                         |\n        |  | |    a     |                                         |\n        |  | |    cc    |                                         |\n        |$D|C|,L= cca   |                                         |\n        |  | |    name  |                                         |\n        |  | |    name-a|                                         |\n        |  | %          \u00a2                                         |\n        |  |                                                      |\n        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n C\n     This command displays by name jobs awaiting execution whose\n     abstract resource routings cannot be fulfilled by any member\n     in the MAS spool complex.\n\n\n L=a or cc or cca or name or name-a\n    The area (a), console identifier (cc), area and console\n    identifier (cca), symbolic console name (name), or symbolic\n    console name and output area ID (name-a) of the active MCS console\n    at which the requested information is to be displayed.\n1\n\n\n\n\n\n\n    $DP (Display Printer or Punch Device Status)\n\n\n        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n        |  |                                                      |\n        |  |         #          !                                 |\n        |  |         |    a     |                                 |\n        |  |   #    !|    cc    |                                 |\n        |$D|P  |,PUN||,L= cca   |                                 |\n        |  |   %    \u00a2|    name  |                                 |\n        |  |         |    name-a|                                 |\n        |  |         %          \u00a2                                 |\n        |  |                                                      |\n        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n P\n     This command displays a one line status for each local printer\n     on the system from which the command is issued.\n\n\n PUN\n     If this operand is present a one line status is generated for each\n     local punch on the system from which the command is issued.\n\n\n L=a or cc or cca or name or name-a\n    The area (a), console identifier (cc), area and console\n    identifier (cca), symbolic console name (name), or symbolic\n    console name and output area ID (name-a) of the active MCS console\n    at which the requested information is to be displayed.\n1\n\n\n\n\n\n\n    $DR  (Display Abstract Resources Attached To A MAS Member)\n\n\n        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n        |  |                                                      |\n        |  |        #          !                                  |\n        |  |        |    a     |                                  |\n        |  |  #    !|    cc    |                                  |\n        |$D|R |,sid||,L= cca   |                                  |\n        |  |  |,ALL||    name  |                                  |\n        |  |  %    \u00a2|    name-a|                                  |\n        |  |        %          \u00a2                                  |\n        |  |                                                      |\n        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n R\n     Display all abstract resource name attached to a given member\n     or all member of the MAS spool complex.\n\n\n sid\n     The display is requested for a specific MAS member.  If this\n     operand is omitted, the display is returned for the member on\n     which the command is entered.\n\n\n ALL\n     The display is requested for a members of the MAS spool complex.\n\n\n L=a or cc or cca or name or name-a\n    The area (a), console identifier (cc), area and console\n    identifier (cca), symbolic console name (name), or symbolic\n    console name and output area ID (name-a) of the active MCS console\n    at which the requested information is to be displayed.\n1\n\n\n\n\n\n\n    $LF  (List Forms)\n\n\n        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n        |  |                                                       |\n        |  |                                                       |\n        |  | #           !#           !#                !          |\n        |$L|F|,F=ffffffff||,W=wwwwwwww||,PRMODE=pppppppp|          |\n        |  | %           \u00a2%           \u00a2%                \u00a2          |\n        |  |                   #         !                         |\n        |  |                   |     #  !|#          !             |\n        |  | #       !#       !|   Sn|-m|||     #   !|#      !     |\n        |  | |,C=cccc||,T=tttt||,J=Jn|-m|||,R=rn|-rm|||,B=Y/N|     |\n        |  | %       \u00a2%       \u00a2|   Tn|-m|||     %   \u00a2|%      \u00a2     |\n        |  |                   |     %  \u00a2|%          \u00a2             |\n        |  |                   %         \u00a2                         |\n        |  |                                                       |\n        |  | #            !#             !                         |\n        |  | |       #   !||        #   !|#      !#      !         |\n        |  | |,LIM=ln|-lm|||,PLIM=pn|-pm|||,D=H/A||,S=Y/N|         |\n        |  | |       %   \u00a2||        %   \u00a2|%      \u00a2%      \u00a2         |\n        |  | %            \u00a2%             \u00a2                         |\n        |  |                   #    a     !                        |\n        |  | #         !#     !|    cc    |                        |\n        |  | |,Q=q1..q8||,JOBS||,L= cca   |                        |\n        |  | %         \u00a2%     \u00a2|    name  |                        |\n        |  |                   %    name-a\u00a2                        |\n        |  |                                                       |\n        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n F\n     Selectively display the JOT (job output table) for elements\n     awaiting hardcopy processing.  As many operands as required may be\n     present so as to create a command response as selective as is\n     desired.  NOTE: No elements having an external writer name are\n     included in the display unless explicitly requested.\n\n\n F=\n     The one to eight character form name is to be used as a search\n     argument.\n\n\n W=\n     The one to eight character external writer name is to be used\n     as a search argument.  NOTE:  unless this argument is present, no\n     job output elements having the attribute of any external writer\n     name will be included in the command display.\n\n\n PRMODE=\n     The one to eight character processing mode name is to be used as\n     a search argumant.\n\n\n L=a or cc or cca or name or name-a\n    The area (a), console identifier (cc), area and console\n    identifier (cca), symbolic console name (name), or symbolic\n    console name and output area ID (name-a) of the active MCS console\n    at which the requested information is to be displayed.\n\n\n C=\n     The one to four character FCB name is to be used as a search\n     argument.\n\n\n T=\n     The one to four character UCS name is to be used as a search\n     argument.\n\n\n1\n\n\n\n\n\n\n\n\n\n J=\n     The display is to be limited to a job or range of jobs as\n     designated by the keyword value.\n\n\n R=\n     The display is to be limited to a route code or a range of route\n     codes as designated by the keyword value.  If this operand is\n     omitted the display is limited to the route code calculated from\n     the command source.\n\n\n B=\n     The display is to be limited to job output elements that need\n     burst (Y) or that do not require bursting (N).\n\n\n S=\n     Y - the display is to limited to output elements with selectable\n         output dispositions - WRITE/KEEP\n     N - the display is to limited to output elements with non-selectable\n         output dispositions - HOLD/LEAVE\n\n     Default: Y\n\n D=\n     H - the display is limited to jobs and output elements with an\n         operator or system hold.\n     A - the display will select all jobs\n\n     Default: only jobs or output elements with no operator or system\n              hold will be displayed.\n\n LIM=\n     The display is to be limited to job output elements having the\n     specified number of lines of output.\n\n\n PLIM=\n     The display is to be limited to job output elements having the\n     specified number of pages of output.\n\n\n Q=\n     The display is to be limited to job output elements having the\n     specified sysout class(s).  Up to eight sysout classes may be\n     present in the list.\n\n\n JOBS\n     The display is to be categorized by jobname and number.  If this\n     operand is present, it must be used in conjunction with another\n     selection operand.\n\n\n1\n\n\n\n\n\n\n    $LN (List Job Queue Information By Name)\n\n\n        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n        |  |                                                      |\n        |  |                               #          !           |\n        |  |                               |   DJCOWN |           |\n        |  |                               |   DJCHOLD|           |\n        |  | #    !      #                !|   XEQ    |           |\n        |  | |,ALL|#    !|        #      !||   CNV    |           |\n        |$L|N|,ANY||,IND||,R=dest1|-dest2|||,Q=STC    |           |\n        |  | |,sid|%    \u00a2|        %      \u00a2||   TSU    |           |\n        |  | |,IND|      %                \u00a2|   HOLD   |           |\n        |  | %    \u00a2                        |   ACTIVE |           |\n        |  |                               |   READY  |           |\n        |  | #                  !          %          \u00a2           |\n        |  | |         #       !|#              !#             !  |\n        |  | |,C=class1|-class2|||,AFTER=jobname||,WITH=jobname|  |\n        |  | |         %       \u00a2|%              \u00a2%             \u00a2  |\n        |  | %                  \u00a2                                 |\n        |  |                                                      |\n        |  | #               !#          !#             !         |\n        |  | |,BEFORE=jobname||,CNTL=name||,RES=resource|         |\n        |  | %               \u00a2%          \u00a2%             \u00a2         |\n        |  |                                                      |\n        |  |            #        !                                |\n        |  |            |  a     |                                |\n        |  | #         !|  cc    |                                |\n        |  | |,V=volser||L=cca   |                                |\n        |  | %         \u00a2|  name  |                                |\n        |  |            |  name-a|                                |\n        |  |            %        \u00a2                                |\n        |  |                                                      |\n        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n N\n     JES2 is to list job information by name.\n\n\n sid\n     JES2 is to display the job information for all jobs whose system\n     affinities include the specified 4-character system identifier\n\n\n ANY\n     JES2 is to display the above job information for all jobs with\n     the system affinity of ANY\n\n\n ALL\n     JES2 is to display the above job information for all jobs\n     regardless of system infinity.\n\n\n IND\n     JES2 is to display the above job information for all jobs\n     whose system affinity is for systems operating in independent mode.\n\n\n R=dest1-dest2\n     JES2 is to display the job information for all jobs having\n     a default print/punch routing or range of routing (low to high)\n     of the specified destination(s).\n\n\n1\n\n\n\n\n\n Q=DJCOWN\n    Job information is to be displayed for jobs that are holding out\n    other jobs due to dependent job control conflicts.\n\n\n Q=DJCHOLD\n    Job information is to be displayed for jobs awaiting execution or\n    conversion in dependent job control hold status.\n\n\n Q=XEQ\n    Job information is to be displayed for jobs waiting for execution\n    and/or conversion.\n\n\n Q=CNV\n    The job information is to be displayed for jobs awaiting conversion.\n\n\n Q=STC\n    STC specifies that the display is for system tasks being prepared\n    for execution or awaiting conversion.\n\n\n Q=TSU\n    TSU specifies that the display is for time-sharing user waiting for\n    execution or awaiting conversion.\n\n\n Q=HOLD\n    Job information is to be displayed for jobs awaiting execution or\n    conversion in hold status or dependent job control hold status.\n\n\n Q=ACTIVE\n    Job information is to be displayed for jobs that are executing.\n\n\n Q=READY\n    Job information is to be displayed for jobs awaiting execution that\n    are not in hold status.\n\n\n1\n\n\n\n\n\n CLASS=class1-class2\n    Job information is to be displayed for jobs that have specified the\n    class or jobs in the class range (low to high).\n\n\n AFTER=jobname\n    Job information is to be displayed for jobs that have requested to\n    execute after the specified jobname.\n\n\n BEFORE=jobname\n    Job information is to be displayed for jobs that have requested to\n    execute before the specified jobname.\n\n\n WITH=jobname\n    Job information is to be displayed for jobs that have requested to\n    execute in the same system with the specified jobname.\n\n\n RES=resource\n    Job information is to be displayed for jobs that have requested to\n    execute in a system with the specified JES2 abstract resource\n    attached.\n\n\n V=volser\n    Job information is to be displayed for jobs that have spool space\n    on the specified spool volume.\n\n\n1\n\n\n\n L=a or cc or cca or name or name-a\n    The area (a), console identifier (cc), area and console\n    identifier (cca), symbolic console name (name), or symbolic\n    console name and output area ID (name-a) of the active MCS console\n    at which the requested information is to be displayed.\n\n\n\n\n NOTE:  The first two operands of the $L N command are positional\n        in nature; if entered, they must be in the indicated order.\n1\n\n\n\n\n\n\n    $LQ (List Job Queue Information By Count)\n\n\n        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n        |  |                                                      |\n        |  |                               #          !           |\n        |  |                               |   DJCOWN |           |\n        |  |                               |   DJCHOLD|           |\n        |  | #    !      #                !|   XEQ    |           |\n        |  | |,ALL|#    !|        #      !||   CNV    |           |\n        |$L|Q|,ANY||,IND||,R=dest1|-dest2|||,Q=STC    |           |\n        |  | |,sid|%    \u00a2|        %      \u00a2||   TSU    |           |\n        |  | |,IND|      %                \u00a2|   HOLD   |           |\n        |  | %    \u00a2                        |   ACTIVE |           |\n        |  |                               |   READY  |           |\n        |  | #                  !          %          \u00a2           |\n        |  | |         #       !|#              !#             !  |\n        |  | |,C=class1|-class2|||,AFTER=jobname||,WITH=jobname|  |\n        |  | |         %       \u00a2|%              \u00a2%             \u00a2  |\n        |  | %                  \u00a2                                 |\n        |  |                                                      |\n        |  | #               !#          !#             !         |\n        |  | |,BEFORE=jobname||,CNTL=name||,RES=resource|         |\n        |  | %               \u00a2%          \u00a2%             \u00a2         |\n        |  |                                                      |\n        |  |            #        !                                |\n        |  |            |  a     |                                |\n        |  | #         !|  cc    |                                |\n        |  | |,V=volser||L=cca   |                                |\n        |  | %         \u00a2|  name  |                                |\n        |  |            |  name-a|                                |\n        |  |            %        \u00a2                                |\n        |  |                                                      |\n        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n Q\n     JES2 is to display the number of jobs on the specified queue.\n\n\n sid\n     JES2 is to display the job information for all jobs whose system\n     affinities include the specified 4-character system identifier\n\n\n ANY\n     JES2 is to display the above job information for all jobs with\n     the system affinity of ANY\n\n\n ALL\n     JES2 is to display the above job information for all jobs\n     regardless of system infinity.\n\n\n IND\n     JES2 is to display the above job information for all jobs\n     whose system affinity is for systems operating in independent mode.\n\n\n R=dest1-dest2\n     JES2 is to display the job information for all jobs having\n     a default print/punch routing or range of routing (low to high)\n     of the specified destination(s).\n\n\n1\n\n\n\n\n\n Q=DJCOWN\n    Job information is to be displayed for jobs that are holding out\n    other jobs due to dependent job control conflicts.\n\n\n Q=DJCHOLD\n    Job information is to be displayed for jobs awaiting execution or\n    conversion in dependent job control hold status.\n\n\n Q=XEQ\n    Job information is to be displayed for jobs waiting for execution\n    and/or conversion.\n\n\n Q=CNV\n    The job information is to be displayed for jobs awaiting conversion.\n\n\n Q=STC\n    STC specifies that the display is for system tasks being prepared\n    for execution or awaiting conversion.\n\n\n Q=TSU\n    TSU specifies that the display is for time-sharing user waiting for\n    execution or awaiting conversion.\n\n\n Q=HOLD\n    Job information is to be displayed for jobs awaiting execution or\n    conversion in hold status or dependent job control hold status.\n\n\n Q=ACTIVE\n    Job information is to be displayed for jobs that are executing.\n\n\n Q=READY\n    Job information is to be displayed for jobs awaiting execution that\n    are not in hold status.\n\n\n1\n\n\n\n\n\n CLASS=class1-class2\n    Job information is to be displayed for jobs that have specified the\n    class or jobs in the class range (low to high).\n\n\n AFTER=jobname\n    Job information is to be displayed for jobs that have requested to\n    execute after the specified jobname.\n\n\n BEFORE=jobname\n    Job information is to be displayed for jobs that have requested to\n    execute before the specified jobname.\n\n\n WITH=jobname\n    Job information is to be displayed for jobs that have requested to\n    execute in the same system with the specified jobname.\n\n\n RES=resource\n    Job information is to be displayed for jobs that have requested to\n    execute in a system with the specified JES2 abstract resource\n    attached.\n\n\n V=volser\n    Job information is to be displayed for jobs that have spool space\n    on the specified spool volume.\n\n\n1\n\n\n\n L=a or cc or cca or name or name-a\n    The area (a), console identifier (cc), area and console\n    identifier (cca), symbolic console name (name), or symbolic\n    console name and output area ID (name-a) of the active MCS console\n    at which the requested information is to be displayed.\n\n\n\n\n NOTE:  The first two operands of the $L N command are positional\n        in nature; if entered, they must be in the indicated order.\n1\n\n\n\n\n\n\n    $QA  (Attach An Abstract Resource To A MAS Member)\n\n\n        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n        |  |                                                      |\n        |  |                 #          !                         |\n        |  |                 |    a     |                         |\n        |  |           #    !|    cc    |                         |\n        |$Q|A ,resource|,sid||,L= cca   |                         |\n        |  |           %    \u00a2|    name  |                         |\n        |  |                 |    name-a|                         |\n        |  |                 %          \u00a2                         |\n        |  |                                                      |\n        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n A\n     Attach an abstract resource to a given member member of the\n     MAS spool complex.  Once attached the resource remains until it\n     removed via the $Q D command or a JES2 COLD-START.\n\n\n resource\n     This operand is any valid abstract resource name defined by\n     the JES2 systems programmer.\n\n\n sid\n     The resource is to be attached to the specified MAS spool\n     complex member.  If this operand is omitted, the resource is\n     attached to the MAS member on which the command is entered.\n\n\n L=a or cc or cca or name or name-a\n    The area (a), console identifier (cc), area and console\n    identifier (cca), symbolic console name (name), or symbolic\n    console name and output area ID (name-a) of the active MCS console\n    at which the requested information is to be displayed.\n1\n\n\n\n\n\n\n    $QD  (Delete An Abstract Resource From A MAS Member)\n\n\n        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n        |  |                                                      |\n        |  |                         #          !                 |\n        |  |                         |    a     |                 |\n        |  |           #    !#      !|    cc    |                 |\n        |$Q|D ,resource|,sid||,FORCE||,L= cca   |                 |\n        |  |           %    \u00a2%      \u00a2|    name  |                 |\n        |  |                         |    name-a|                 |\n        |  |                         %          \u00a2                 |\n        |  |                                                      |\n        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n D\n     Delete an abstract resource from a given member member of the\n     MAS spool complex.\n\n\n resource\n     This operand is any valid abstract resource name defined by\n     the JES2 systems programmer.\n\n\n sid\n     The resource is to be deleted from the specified MAS spool\n     complex member.  If this operand is omitted, the resource is\n     deleted from the MAS member on which the command is entered.\n\n\n FORCE\n     The resource is to be deleted from the specified MAS spool\n     complex member even if there are jobs executin in that member\n     that have are using the specified resource name.\n\n\n L=a or cc or cca or name or name-a\n    The area (a), console identifier (cc), area and console\n    identifier (cca), symbolic console name (name), or symbolic\n    console name and output area ID (name-a) of the active MCS console\n    at which the requested information is to be displayed.\n1\n\n\n\n\n\n\n    $Q'\n    $QJ\n    $QT  (Alter Job Abstract Resource And Dependent Job Control Hold)\n    $QS\n\n\n        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n        |  |                                                      |\n        |  |'jobname'                                             |\n        |  |J  #  !   #        !#             !#                ! |\n        |$Q|T m|-n|   |,RELEASE||,ADD=resource||,DELETE=resource| |\n        |  |S  %  \u00a2   %        \u00a2%             \u00a2%                \u00a2 |\n        |  |                                                      |\n        |  |                                                      |\n        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n Jn-m / Tn-m / Sn-m / 'jobname'\n    The JES2 abstract resource routing info and/or the dependent job\n    control hold is to be altered and displayed for the selected\n    job or range of jobs.  The jobs must be in the conversion or\n    execution queue.  At least one of the following operands is required\n    to be present in the command text.\n\n\n RELEASE\n    The job or range of jobs is/are to be released from dependent\n    job control hold conditions.\n\n\n ADD=resource\n    The named resource is to be added to the job or range of jobs.\n\n\n DELETE=resource\n    The named resource is to be removed from the job or range of jobs.\n\n\n L=a or cc or cca or name or name-a\n    The area (a), console identifier (cc), area and console\n    identifier (cca), symbolic console name (name), or symbolic\n    console name and output area ID (name-a) of the active MCS console\n    at which the requested information is to be displayed.\n1\n\n\n\n\n              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n              @                                         @\n              @       SECTION 2 - JECL STATEMENTS       @\n              @                                         @\n              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n\n\n\n\n\n\n\n              2.0  Mellon Bank Supported JECL Statements\n              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n1\n\n\n\n\n\n\n The /*AFTER statement\n\n\n\n\n   #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n   |                                                                 |\n   |  /*AFTER jobname                                                |\n   |                                                                 |\n   %~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n  Use the /*AFTER statement to insure that a given job executes after\n  another job that is currently in the spool complex awaiting execution\n  or executing.\n\n  The value, jobname, is any one to eight byte valid JES2 job name.\n\n  Only one /*AFTER card is supported per job.  If more that one\n  /*AFTER card is present in a job stream, only the last one has\n  any meaning.\n\n  The use of a /*AFTER card reduces by one the maximum allowable number\n  of /*CNTL cards available for use by a given job.\n1\n\n\n\n\n\n\n The /*BEFORE statement\n\n\n\n\n   #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n   |                                                                 |\n   |  /*BEFORE jobname                                               |\n   |                                                                 |\n   %~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n  Use the /*BEFORE statement to insure that a given job executes before\n  another job that is currently in the spool complex awaiting execution.\n\n  The value, jobname, is any one to eight byte valid JES2 job name.\n\n  Only one /*BEFORE card is supported per job.  If more that one\n  /*BEFORE card is present in a job stream, only the last one has\n  any meaning.\n\n  The use of a /*BEFORE card reduces by one the maximum allowable\n  number of /*CNTL cards available for use by a given job.\n1\n\n\n\n\n\n\n The /*WITH statement\n\n\n\n\n   #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n   |                                                                 |\n   |  /*WITH jobname                                                 |\n   |                                                                 |\n   %~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n  Use the /*WITH statement to insure that a given job executes in the\n  same complex member as the specified jobname.  If the named job is\n  not currently active when the job using the /*WITH card enters\n  the job queue, the job with the /*WITH card will wait for the named\n  job to become active.\n\n  The value, jobname, is any one to eight byte valid JES2 job name.\n\n  Only one /*WITH card is supported per job.  If more that one\n  /*WITH card is present in a job stream, only the last one has\n  any meaning.\n\n  The use of a /*WITH card reduces by one the maximum allowable\n  number of /*CNTL cards available for use by a given job.\n1\n\n\n\n\n\n\n The /*CNTL statement\n\n\n\n\n   #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n   |                                                                 |\n   |                #    !                                           |\n   |  /*CNTL anyname|,EXC|                                           |\n   |                |,SHR|                                           |\n   |                %    \u00a2                                           |\n   |                                                                 |\n   %~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n  Use the /*CNTL statement to declare a user defined abstract resource\n  name that will be used by the given job as well as the disposition\n  of the named resource.\n\n  The value, anyname, is any one to eight byte name defined by the\n  user to represent an abstract resource.\n\n  Up to six /*CNTL cards are supported per job stream; however, the\n  use of /*AFTER /*BEFORE and /*WITH cards reduces this number.\n\n  EXC denotes that the job requests exclusive control over the named\n  abstract resource.  A job specifying this option will not begin\n  execution if any other job currently executing in the MAS spool\n  complex has requested the same abstract resource name either shared\n  (SHR) or exclusively (EXC).\n\n  SHR denotes that the job requests shared control over the named\n  abstract resource.  A job specifying this option will not begin\n  execution if any other job currently executing in the MAS spool\n  complex has requested the same abstract resource name exclusively\n  (EXC).  However, multiple jobs are permitted to execute if they all\n  request shared control over the same abstract resource name.\n\n  If neither EXC nor SHR are specified, the requested control over the\n  named abstract resource is assumed to be shared (SHR).\n1\n\n\n\n\n\n\n The /*ROUTE statement\n\n\n\n\n   #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n   |                                                                 |\n   |  /*ROUTE XEQ resource                                           |\n   |                                                                 |\n   %~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n  Use the /*ROUTE statement to insure that a given job executes in\n  a MAS member that contains the named JES2 abstract resource.\n\n  The value, resource, is any one of the JES2 systems programmer\n  defined abstract resource names.  Use the TSO HELP RESOURCE command\n  to determine all of the available resource names.\n\n  As many /*ROUTE cards as necessary may be present in the job stream.\n\n  The /*ROUTE cards may be in any order in relation to all other\n  JCL or JECL cards in the job stream.\n\n  The value, HERE, may be used in place of a resource name.  It denotes\n  that the job must execute on the MAS member upon which the job was\n  entered.\n1\n              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n              @                                         @\n              @        SECTION 3 - JES2 MESSAGES        @\n              @                                         @\n              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n\n\n\n\n\n\n\n               3.0  Mellon Bank Generated JES2 Messages\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n1\n\n\n\n $HASP919 NO OUTPUT QUEUED\n\n Issued by: MBSHRSPL\n\n Explanation: A $LF command was issued to scan the JOT (job output\n              table); however, no output elements could be found that\n              matched the request.\n\n System Action: None.\n\n Operator Response: None.\n\n\n\n $HASP920 UNABLE TO OBTAIN WORKAREA TO COMPLETE REQUEST\n\n Issued by: MBSHRSPL\n\n Explanation: While processing a $LF command, a call to the $GETWORK\n              service routine returned a non-zero return code.\n\n System Action: Processing for the current $LF request is terminated.\n\n Operator Response: Try the command at a later time or make the $LF\n                    more general.\n\n\n\n $HASP921 F=ffff R= rrrr PRMODE=pppp W=wwww B=b S=s\n $HASP921   Q: q=999 q=999 q=999 q=999 q=999 q=999 q=999\n\n Issued by: MBSHRSPL\n\n Explanation: The operator requested a display of the JOT with a $LF\n              command.\n\n System Action: None.\n\n Operator Response: None.\n\n\n\n $HASP928 *device* status F=ffffffff Q=qqqqqqqq   FSS\n\n Issued by: MBSHRSPL\n\n Explanation: The operator requested a display of local printer or\n              punch devices with the $DP command.  If the device is\n              in FSS mode, a code of \"FSS\" will appear at the end\n              of the corresponding display line.\n\n System Action: None.\n\n Operator Response: None.\n1\n\n\n\n $HASP935 JOBNAME SPECIFIED ON /*BEFORE STATEMENT IS INVALID.\n          CORRECT - RESUBMIT\n\n Issued by: MBSHRSPL\n\n Explanation: An invalid jobname has been detected on a /*BEFORE card.\n\n System Action: The job is flushed with a JCL error.\n\n Programmer Response: Correct the error then resubmit the job.\n\n\n\n $HASP936 JOBNAME SPECIFIED ON /*AFTER STATEMENT IS INVALID.\n          CORRECT - RESUBMIT\n\n Issued by: MBSHRSPL\n\n Explanation: An invalid jobname has been detected on a /*AFTER card.\n\n System Action: The job is flushed with a JCL error.\n\n Programmer Response: Correct the error then resubmit the job.\n\n\n\n $HASP937 PARM SPECIFIED ON /*CNTL STATEMENT IS INVALID.\n          CORRECT - RESUBMIT\n\n Issued by: MBSHRSPL\n\n Explanation: An invalid control name has has been detected on a\n              /*CNTL card.\n\n System Action: The job is flushed with a JCL error.\n\n Programmer Response: Correct the error then resubmit the job.  The\n                      control name must be one to eight characters long.\n\n\n\n $HASP938 MAXIMUM COMBINATION OF /*BEFORE, /*AFTER, /*WITH,\n          AND /*CNTL IS 6\n\n Issued by: MBSHRSPL\n\n Explanation: The maximum allowable number of these types of JECL\n              statements per job is 6.\n\n System Action: The job is flushed with a JCL error.\n\n Programmer Response: Correct the error then resubmit the job.  Note\n                      that the use of a /*AFTER card reduces the maximum\n                      number of /*CNTL cards allowed by one.  The same\n                      holds true for the /*BEFORE card.\n\n\n\n $HASP939 JOBNAME SPECIFIED ON /*WITH STATEMENT IS INVALID.\n          CORRECT - RESUBMIT\n\n Issued by: MBSHRSPL\n\n Explanation: An invalid jobname has been detected on a /*WITH card.\n\n System Action: The job is flushed with a JCL error.\n\n Programmer Response: Correct the error then resubmit the job.\n1\n\n\n\n $HASP940 * -- AFTER  JOBNAME = jjjjjjjj   --\n\n Issued by: MBSHRSPL\n\n Explanation: The job currently on a reader has specified a\n              /*AFTER card for job, jjjjjjjj.\n\n System Action: Processing continues.\n\n Operator Response: None.\n\n\n\n $HASP941 * -- WITH   JOBNAME = jjjjjjjj   --\n\n Issued by: MBSHRSPL\n\n Explanation: The job currently on a reader has specified a\n              /*WITH card for job, jjjjjjjj.\n\n System Action: Processing continues.\n\n Operator Response: None.\n\n\n\n $HASP942 * -- RESOURCE ROUTING = rrrrrrrr --\n\n Issued by: MBSHRSPL\n\n Explanation: The job currently on a reader has requested the JES2\n              abstract resource routing, rrrrrrrr.\n\n System Action: Processing continues.\n\n Operator Response: None.\n\n\n\n $HASP943 * -- CONTROL INFO = cccccccccccc --\n\n Issued by: MBSHRSPL\n\n Explanation: The job currently on a reader has specified the user\n              defined control information, cccccccccccc.\n\n System Action: Processing continues.\n\n Operator Response: None.\n1\n\n\n\n $HASP944 * -- BEFORE JOBNAME = jjjjjjjj   --\n\n Issued by: MBSHRSPL\n\n Explanation: The job currently on a reader has specified a\n              /*BEFORE card for job, jjjjjjjj.\n\n System Action: Processing continues.\n\n Operator Response: None.\n\n\n\n $HASP946* RESOURCE, rrrrrrrr, IS NO LONGER VALID; PLEASE REMOVE\n\n Issued by: MBSHRSPL\n\n Explanation: The named resource, rrrrrrrr, is obsolete.  Remove it\n              from the job.\n\n System Action: The JECL card is ignored.\n\n Programmer Response: Remove the RESOURCE card on the next submission\n                      of the job.\n\n\n\n $HASP950 nnnnn AWAITING EXECUTION\n $HASP950 c= nnnnn  c=nnnnnn c= nnnnn ...\n $HASP950 nnnnn AWAITING OUTPUT\n $HASP950 nnnnn AWAITING HARDCOPY\n $HASP950 nnnnn AWAITING TRANSMISSION\n $HASP950 nodename = nnnnn  nodename = nnnnn ...\n $HASP950 TOTAL JOBS count-BATCH count-STC count-TSU count-APPC\n\n Issued by: MBSHRSPL\n\n Explanation: These messages are display as the result of an operator\n              entering the $DB command.  The count values are JQE\n              counts.\n\n System Action: None.\n\n Operator Response: None.\n\n\n\n $HASP965 sid = resource resource resource ...\n\n Issued by: MBSHRSPL\n\n Explanation: This response is the result of an operator $DR command.\n              The indicated resource name(s) are attached to the\n              named system id.\n\n System Action: None.\n\n Operator Response: None.\n1\n\n\n\n\n\n $HASP966 sid = NO RESOURCES ATTACHED\n\n Issued by: MBSHRSPL\n\n Explanation: This response is the result of an operator $DR or\n              $QD command.  There are no resources attahced to\n              the indicated system id.\n\n System Action: None.\n\n Operator Response: None.\n\n\n\n $HASP968 nnnnn JOB/RESOURCE CONFLICT(S) EXIST\n\n Issued by: MBSHRSPL\n\n Explanation: This response is the result of an operator $DC command.\n              The list of jobs queued for execution or conversion\n              that cannot run due to a lack of resources attached\n              to the systems in the target spool complex is complete.\n\n System Action: None.\n\n Operator Response: If appropriate, attached the required resource\n                    names to a system in the spool complex with the\n                    $QA command.\n\n\n\n $HASP969 resource ADDED   IN sid\n                   DELETED\n\n Issued by: MBSHRSPL\n\n Explanation: This response is the result of an operator $QA or $QD\n              command.  The name resource has been added to or removed\n              from the named system id.\n\n System Action: None.\n\n Operator Response: None.\n\n\n\n $HASP970 resource IN USE BY nnnnn JOB(S) ON sid\n\n Issued by: MBSHRSPL\n\n Explanation: This response is the result of an operator $QD command\n              for a resource name that is currently being used by the\n              specified count of jobs on the named system id.\n\n System Action: The resource is not removed from the named system id.\n\n Operator Response: Use the $LN,sid,RES=resource command to list the\n                    jobs active with the named resource.  Either wait\n                    for all jobs to end that are using the resource\n                    or issue the $QD command with the FORCE operand\n                    to immediately remove the named resource.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DOCOVW": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x051O\\x01\\x051O\\x13W\\x00z\\x00w\\x00\\x00\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2005-11-10T00:00:00", "modifydate": "2005-11-10T13:57:00", "lines": 122, "newlines": 119, "modlines": 0, "user": "T0SM0"}, "text": "\nGeneral Information and Overview-\n\n\n\nWhat are the Mellon Bank Shared Spool mods, and what can they do for\nyou?\n                                                                       *\nThe shared spool mods enhance the JES2's job selection algorithms by\nproviding additional requirements for job scheduling when running in a\nJES2 MAS, or Multiple Access Spool configuration.  By coding one or more\nnew JCL statements we can now restrict which system a job runs on to\nthose systems that have a particular resource assigned to them.  For\ninstance, assuming you have some number of jobs that can only run where\na particular resource exists - a CICS region, a vendor program, or maybe\nwhere extra tape drives attached, and assuming those resources may be\navailable on different systems in the MAS configuration each time your\njobs are submitted, you can still ensure your job is only initiated on\nthe correct systems, by using the shared spool mods.  Another\nenhancement allows jobs to execute only on the LPAR that they are\nsubmitted from.  Still other enhancements allow job execution, only\nwhile other job names are in execution, or only after other job names\nhave completed.\n\n   A final further extension used in many shops allows you to create an\narbitrary resource name and have any jobs you wish coordinate their\nexecution of based on the need for exclusive or shared access, of that\narbitrary resource name before selecting it for execution.  No previous\nresource name setup is required to use this feature; only agreement\namong the participating jobs on the resource name you wish to\nco-ordinate your job execution on.  An example of this feature is to\nserialize SMP/e jobs, by local agreement all systems programmers could\nuse the CSI name as their arbitrary resource name to serialize their\nSMP/e jobs.  For instance, I could serialize exclusively for an apply\njob using a \"/*CNTL csi-zone-name,EXC\" statement, or I could hold as\nshared, the same name as shared, by using a \"/*CNTL csi-zone-name,SHR\"\nstatement for reporting jobs.  Another example would be to create an\narbitrary name and have all participating jobs enque on the name\nexclusively using a \"/*CNTL resource name,EXC\" to prevent more than one\nof the participating jobs from running at the same time.  This technique\ncould replace the use of dummy DD statements with a DISP of OLD, solely\nto single thread a sequence of jobs.\n\n\n- History of the Mellon Mods, at least as I know it. -\n\n  I must say at the outset, that we are not, nor have we ever been\nMELLON BANK.  That being said, my company has maintained the Mellon\nMods, and provided updates for the CBT tape for many years now, I have\nmaintained them personally for the past ten years, and they were\nmaintained by others at this company for several years prior to my\narriving on the scene.  Around the turn of the millennium, I completely\nrewrote the mods with some help from others, Bob Break of St.  Louis,\n(check the CBT tape for his JES2 module reload exit), and Judy Runt, and\nthe other good folks over at Wisconson Light.  The intent of the rewrite\nwas to incorporate the new JES2 functions that make use of WLM resource\nnames and scheduling environments, and to repackage the mods such that\nthey were all contained in standard JES2 exits, and made no direct\nchanges to the JES2 source code.  Further, the older version of the mods\nwas in a word, HUGE, and was primarily straight mods to the JES2 source\n- no exits, so it required a great deal of maintenance with each new\nversion of JES2.  While in their current state, they are not simple\nexits, they are all exits, and are quite manageable.\n\n\n- Interaction with WLM Resources and Scheduling Environments -\n\n  One of the primary job selection criterions available through the\nMellon Shared Spool mods is the availability of a particular resource\nname being available on a particular system.  In the past, we maintained\nthese names in a table within the Mellon Mods code; and provided JES2\ncommands that would alter the state of the resources, either on or off.\nWe now use WLM Scheduling Environment names instead.  The scheduling\nenvironment names are the same ones displayed on the SDSF SE panel.  The\nscheduling environments are on, when all of the resource names that make\nup each environment are also on.  WLM resource names are the same ones\ndisplayed on the SDSF RES panel.  The WLM scheduling environment names\nare what are matched on the \"/*ROUTE XEQ scheduling environment name\"\nJECL statements.  This function is virtually identical to the new SCHENV\nparameter on the jobcard.  In fact, we substitute the internal value of\nthe SCHENV with what we find in the /*ROUTE XEQ card only if there is no\ncurrent value.  These mods supported the function long before JES2\nadopted the facility, which appears to have been modeled after the\nmellon mods, and arose out of a long standing SHARE requirement.  While\nthese mods continue to support the older style /*ROUTE XEQ statements to\nroute jobs for execution based on resource locations, we suggest that\nthe older /*ROUTE XEQ statements; for Mellon Mods job selection, be\nreplaced by the new IBM supported SCHENV parm on the jobcard.\n\n\n- Compatability and Support of the Mellon Mods -\n\n\n  The Mellon Shared Spool mods, as they exist today, do not modify any\nJES2 source directly, and only make use of fully supported and\ndocumented exits; I see no reason why they may become unsupportable in\nthe future.\n\n  I will create updates to the Mellon Mods, and make those updates\navailable through the CBT tape web site, as we get new versions of the\noperating system installed in my shop.  I cannot guarantee to provide\nsupport for problems associated with this code.  If you do however have\nproblems, please let me know the details and I will do all that I can,\nworking on my own time to provide corrective fixes.  My name is Stephen\nMcColley and you can send me the documentation concerning any problems\nyou have with the code, via e-mail at SGMCCOLLEY@ALLTEL.NET.  I check my\ne-mail regularly and any messages will not normally go more than a day\nor two before I see them.\n\n  If any of you have any suggestions for new features or changes to the\nmods, you can send them to my e-mail address, and I will be happy to\ngive each of them due consideration.\n\n  One final item, if you could drop me a simple line or two at\nSGMCCOLLEY@ALLTEL.NET to let me know you are using the software, I will\nbe able to contact you - hopefully via e-mail, when and if any\nsignificant problems are found, or when new versions of the code are\nmade available.  I will also be able to forward you a WORD formated\ndocument for the overview, user documentation, and installation\ninstructions.\n\n- end of overview -\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DOCUSR": {"ttr": 1544, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x051O\\x01\\x051O\\x11Y\\x00\\xf6\\x00\\xf6\\x00\\x00\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-11-10T00:00:00", "modifydate": "2005-11-10T11:59:00", "lines": 246, "newlines": 246, "modlines": 0, "user": "T0SM0"}, "text": "\n       Users Guide - How to use the features of these Mods\n\n-  Control Statements\n\n  You take advantage of the Mellon Shared Spool mods via JECL\nstatements.  There are currently five supported statements, they are:\n\n\"/*CNTL XEQ resource, { EXC | SHR }\"\n\n\"/*ROUTE XEQ secheduling environment name | HERE \"\n\n\"/*WITH jobname\"\n\n\"/*AFTER jobname\"\n\n\"/*BEFORE jobname\"\n\n  The /*CNTL XEQ statement is used to add an additional job selection\ncriterion based on other executing jobs current use of the same resource\nname.  The \"/*CNTL XEQ\" must be placed in columns 1 through 10.  The\nresource name is arbitrary, and is made of up to eight (8) characters\nwith no embedded blanks.  The resource name follows the literal \"/*CNTL\"\nand must be preceded by at least one, but not more than 30 blank spaces.\nIf the shared (SHR) or exclusive (EXC) keywords are used, they must\nimmediately follow the resource name and be preceded by a comma.  If\nneither the SHR nor EXC keyword is specified SHR is assumed.\n\nYou may specify up to eight /*CNTL statements; additional statements are\ndisregarded.\n\n    Examples:\n\n    Assume jobnames ABC, and CDE are currently in execution with the\nfollowing /*CNTL XEQ statements -\n\n    //ABC  JOB (other stuff)\n    /*CNTL XEQ MYNAME,SHR\n\n    //CDE JOB (other stuff)\n    /*CNTL XEQ MYNAME,SHR\n\nThen if job EFG is submitted with the following, /*CNTL statement -\n\n    //EFG JOB (other stuff)\n    /*CNTL XEQ MYNAME,EXC\n\nThe job will not be selected for execution as long as either job ABC or\nCDE continues to run.\n\nNext if job XYZ is submitted with the following, /*CNTL statement -\n\n    //XYZ JOB (acctng info)\n    /*CNTL XEQ     MYNAME   \u00d0 SHR is the default\n\n  It would be immediately available for execution.\n\nWhen no jobs remain in execution with a /*CNTL XEQ MYNAME  job EFG with\nthe EXC requirement would be available for job selection.  Assume it has\nnow been selected, and a new job enters the system with the following\n/*CNTL statement -\n\n    //WXY  JOB  (acctng info)\n    /*CNTL  XEQ  MYNAME\n\n  Job WXY will not be available for job execution until job XYZ that\nholds the resource name exclusively ends.  If other jobs are submitted\nwith resource names other than MYNAME, they will be treated separately\nand only other jobs with /*CNTL statements that reference the same\nresource name will affect their availability for job selection.\n\n  The /*CNTL statement only provides additional job selection criterion,\nand does not replace other JES2 requirements for job selection such as\navailable initiators, appropriate job class and so on.  The resource\nname is arbitrary, you make it up, there is no need for anyone to add\nthe name to WLM, or any other table before it is used.\n\n\nThe /*ROUTE XEQ is a standard JES2 statement used to route your job to a\nspecific execution node.  We have usurped the use of the statement, and\nwhen we read an XEQ statement, we test to see if the name following the\nXEQ literal is a valid WLM scheduling environment name.  If the name is\na valid scheduling environment name, and if no schenv value is present\non the JOB card, we use the XEQ name in the same way the job statement\nparameter SCHENV is used, otherwise we let JES2 handle it normally.\n\nThe literal \"/*ROUTE\" must begin in column 1.  The literal \"XEQ\" must\nfollow \"/*ROUTE\", and may be separated by one to twenty blank spaces.\nThe resource name, if not a valid JES2 node name, must follow the \"XEQ\nliteral by between 1 and 35 blank spaces.  The resource name can be\nbetween 1 and 16 characters long, if the name is longer than 16\ncharacters, only the first 16 are used.\n\nThere is one specific exception to all of the above, if the literal\nfollowing XEQ is HERE, then the jobs system affinity is set to the\nsystem where you submitted the job, quite a handy feature itself.\n\nYou may specify more than one /*ROUTE statement; but only the last will\nbe used.\n\nExamples:\n\n//ABC JOB (job acctng),SCHENV=BEFOREALL\n/*ROUTE XEQ AFTERALL   <== ignored because a valid schenv is specified\n\n//ABC JOB (job acctng),SCHENV=BEFOREALL\n/*ROUTE XEQ  N6  <== a valid JES2 routing node, both jes2 routing and\n//*                  schenv are valid for this job.\n\n//ABC JOB (jobacctng)\n/*ROUTE XEQ BEFOREALL <== BEFOREALL is setup the same as SCHENV above\n\n//TUV  JOB (jobacctng)\n/*ROUTE XEQ  HERE   <== the jobs will only execute where submitted.\n\nThe /*WITH statement specifies that the job is only available for\nselection while the jobname named on the /*WITH statement is in\nexecution.  The condition is satisfied even if the jobname that must be\nexecuting is executing on a different system within the same MAS\nenvironment.  If more than one /*WITH statement is read; only the last\none is kept.\n\nExample:\n\n//FGH   JOB  (acctng info)\n/*WITH    JKL\n\nThis job will only be selected for execution if jobname JKL is\nexecuting at the time of job selection.\n\n\nThe /*AFTER jobname statement specifies that the job is only available\nfor selection after the jobname in the /*AFTER statement has finished.\nBecause we really do not track all completed jobs, from - from when -\nthe beginning of the day, the week, the last ipl, the last cold start,\nor maybe for all time, it is more correct to say that if the jobname\nspecified on a /*AFTER statement is in execution at the time our job\nwould otherwise have been selected for execution, then our job will wait\nuntil the jobname referenced in the /*AFTER statement has ended.\n\"AFTER\" may have been more appropriately names \"NOT WHILE\", but since I\nwas not around when the original keywords were developed, please do not\nblame me.  Again, the jobname on the /*AFTER need not be executing on\nthe system that our job is potentially selected for execution on, it\ncould be on any system within the MAS complex.\n\nIf more than one /*AFTER card is read; only the last one is kept.\n\nExample:\n\n//ABC JOB (acctng info)\n/*AFTER    XYZ\n\nJob ABC will not be available for execution while job XYZ is in\nexecution anywhere within the MAS complex.\n\n\nThe /*BEFORE jobname statement causes the jobname specified in the\nstatement to not be selected for execution until after this job has\ncompleted.  Specifically if jobname ABC has a /*BEFORE XYZ statement,\nthen if jobname XYZ is potentially selected for execution by JES2, the\nMellon Mods will examine all jobs on the input queue and when jobname\nABC is found to have a /*BEFORE for job XYZ, job XYZ will be rejected as\na potential candidate for job execution.\n\nIf more than one /*BEFORE statement is read; only the last one is kept.\n\n Example:\n\n//ABC   JOB  (acctng info)\n/*BEFORE   XYZ\n\nThis before statement will cause JES2 to reject job XYZ as a potential\ncandidate for job execution until after job ABC has completed execution.\nIf job XYZ was already executing at the time job ABC is submitted, the\n/*BEFORE statement will not affect anything, unless there is another job\nXYZ waiting to execute.  Also please note, it is possible to form a\nlockout condition where JOBA has a /*BEFORE JOBB, and JOBB has a\n/*BEFORE JOBA statement.  There is no checking done for this type of\ndeadly embrace.\n\n  A few final notes concerning the relationship between /*BEFORE, and\n/*AFTER.  Many people try to use these statements, and stack two or more\njobs in the same PDS member and submit them all at the same time with\none SUBMIT command.  This usually works as expected, but sometimes JES2\nwill NOT PROCESS the jobs in the order they appear in the submitted\nmember.  This can result in a job with a /*AFTER statement for a prior\njob you think JES2 has already seen and processed because of the\nsequence in the submitted member, being processed and initiated before\nJES2 ever finishes reading the job that is the object of the /*AFTER\nstatement.  This problem can be avoided by making sure that jobs with\n/*BEFORE and /*AFTER requirements are submitted separately from each\nother and in an appropriate sequence.\n\n  In relationship to any of the statements above, when routing a job to\nanother node, the additional selection criterion defined by the Mellon\nMods statements, will follow the job to the new node, where it will\nlikely no longer be appropriate.  Of course if the Mellon Mods are not\ninstalled at the receiving node, the additional job selection\nrequirements are not honored.\n\nThe JES2 $DJ command output has been extended to include information\nabout /*CNTL, up to eight names qualified with an \"E\" for exclusive, or\nan \"S\" for shared, one /*WITH jobname, one /*BEFORE and one /*AFTER\njobname.  Examples of the extended displays are given below, please note\nthat the information is included in either the standard or long versions\nof the command.\n\nAltered Display Commands -\n\n-$DJ(25926)\n $HASP890 JOB(T0SM0TTY)\n $HASP890 JOB(T0SM0TTY)  STATUS=(AWAITING EXECUTION),CLASS=X,\n $HASP890                PRIORITY=6,SYSAFF=(ANY),HOLD=(JOB),\n $HASP890                AFTER=T0SM0AF,BEFORE=T0SM0BF,WITH=T0SM0WTH,\n $HASP890                CNTL=(HOWDY-E,HOWDO-S,WILDO-S,HELLO-S)\n\n\n-$DJ(25926),LONG\n $HASP890 JOB(T0SM0TTY)\n $HASP890 JOB(T0SM0TTY)  STATUS=(AWAITING EXECUTION),CLASS=X,\n $HASP890                PRIORITY=6,SYSAFF=(ANY),HOLD=(JOB),\n $HASP890                CMDAUTH=(LOCAL),OFFS=(),SECLABEL=,\n $HASP890                USERID=T0SM0,SPOOL=(VOLUMES=(JES2T1),TGS=1,\n $HASP890                PERCENT=0.0009),ARM_ELEMENT=NO,CARDS=18,\n $HASP890                REBUILD=NO,SRVCLASS=BATTSTMD,SCHENV=TEST,\n $HASP890                SCHENV_AFF=(),CC=(),AFTER=T0SM0AF,\n $HASP890                BEFORE=T0SM0BF,WITH=T0SM0WTH,\n $HASP890                CNTL=(HOWDY-E,HOWDO-S,WILDO-S,HELLO-S)\n\n\nIn addition informational messages, $HASP493 and $HASP494 are written to\nthe log as jobs with /*CNTL, /*WITH, /*BEFORE, or /*AFTER are read.\nExamples of the messages follow.\n\n These messages were issued for jobname T0SM0TTY\n\n$HASP944 T0SM0TTY * -- WITH   JOBNAME = T0SM0WTH   --\n$HASP944 T0SM0TTY * -- AFTER  JOBNAME = T0SM0AF    --\n$HASP944 T0SM0TTY * -- BEFORE JOBNAME = T0SM0BF    --\n$HASP943 T0SM0TTY * -- CONTROL INFO = HOWDY,EXC    --\n$HASP943 T0SM0TTY * -- CONTROL INFO = HOWDO,SHR    --\n$HASP943 T0SM0TTY * -- CONTROL INFO = WILDO,SHR    --\n$HASP943 T0SM0TTY * -- CONTROL INFO = HELLO,SHR    --\n\n\n - end of text -\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JES2PARM": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x01\\x041?\\x01\\x051O\\x14\\x11\\x00@\\x00#\\x00\\x00\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2004-11-08T00:00:00", "modifydate": "2005-11-10T14:11:00", "lines": 64, "newlines": 35, "modlines": 0, "user": "T0SM0"}, "text": "/*                                                                   */\n/* ALL LOADMOD AND EXIT STATEMENTS REWORKED 3-18-96 T0SM0            */\n/*  USED IN OUR SHOP - FOR MELLON MODS CHANGES ONLY - FIND 'MMODS'   */\n/*                                                                   */\n/*                                                                   */\n/*                                                                   */\nLOADMOD(STJTABS)   /*  DYNAMIC TABLE DEFINITIONS FOR JQE EXTENSION */\nLOADMOD(STSCX01A)  /*  JES2 EXIT1 - BANNER PAGE EXIT (NON3800) */\nLOADMOD(STSCX04A)  /* PARSES /*ROUTE XEQ RESNAME AND VALIDATES */\nLOADMOD(STSCX04B)  /* PARSES /*BEFORE, AFTER,WITH, AND CNTL    */\nLOADMOD(STSCX05A)  /* $REPEXIT AND $ADDEXIT COMMANDS ARE HERE  */\nLOADMOD(STSCX05B)  /* PREVENTS PURGING JOBS BY RANGE           */\nLOADMOD(STSCX06A)  /* TURNS /*ROUTE CNTL,XX INTO SCHENV= VALUES*/\nLOADMOD(STSCX15A)  /* FORCES FCB LOAD UNLESS CHANGING TO STDFCB*/\nLOADMOD(STSCX20A)  /* COPIES JCT INFO INTO THE JQE EXTENSION   */\nLOADMOD(STSCX36A) STORAGE=CSA\nLOADMOD(STSCX49A)\nLOADMOD(STSCX100)\nEXIT(001) ROUTINE=EXIT01A,STATUS=ENABLED\n                      /* A = JES2EX01=STSC SEPERATOR BANNER ROUTINE  */\nEXIT(004) ROUTINE=(EXIT04A,EXIT04B),STATUS=ENABLED\n              /* A = GETS \"ROUTE XEQ INFORMATION                     */\n              /* B = GETS \"BEFORE\" \"AFTER\" \"WITH\" AND \"CNTL\" INFO    */\nEXIT(005) ROUTINE=(EXIT05A,EXIT05B),STATUS=ENABLED\n                      /* A = PREVENTS PURGING JOBS BY RANGE          */\n                      /* B = THE $REPEXIT AND $ADDEXIT COMMANDS      */\nEXIT(006) ROUTINE=(EXIT06A),STATUS=ENABLED\n                      /* A = SETS SCHENV BASED ON ROUTE XEQ CARDS    */\n                      /* B = HANDLES TAPE BLP PROCESSING OPTIONS     */\nEXIT(015) ROUTINE=(EXIT15A),STATUS=ENABLED\n                      /* A = STSC FCB CONTROL                        */\nEXIT(020) ROUTINE=(EXIT20A),STATUS=ENABLED\n                      /* COPIES JCT INFO INTO THE JQE EXTENSION      */\nEXIT(036) ROUTINE=EXIT36A,STATUS=ENABLED\n                      /* SAF PROCESS OF RJE SUBMITTED JOBS           */\nEXIT(049) ROUTINE=EXIT49A,STATUS=ENABLED\n                      /* IMPLEMENT BEFORE AFTER WITH CNTL STATEMENTS */\nEXIT(100) ROUTINE=EXIT100A,STATUS=ENABLED\n                      /* JES2X100=STSC  FCB SETUP ROUTINES           */\n/*                                                                   */\n/* MMODS                                                             */\n/*                                                                   */\n/* IF YOU ARE JUST IMPLEMENTING THE MELLON MODS USE THE LOADMOD AND  */\n/* EXIT STATEMENTS BELOW.                                            */\n/*                                                                   */\n/* MMODS - THE LOADMODS AND EXIT STATEMENTS NEEDED  -                */\n/*    O N L Y  FOR MELLON MODS                                       */\n/*                                                                   */\n/*                                                                   */\nLOADMOD(STJTABS)   /*  DYNAMIC TABLE DEFINITIONS FOR JQE EXTENSION */\nLOADMOD(STSCX04A)  /* PARSES /*ROUTE XEQ RESNAME AND VALIDATES */\nLOADMOD(STSCX04B)  /* PARSES /*BEFORE, AFTER,WITH, AND CNTL    */\nLOADMOD(STSCX06A)  /* TURNS /*ROUTE CNTL,XX INTO SCHENV= VALUES*/\nLOADMOD(STSCX20A)  /* COPIES JCT INFO INTO THE JQE EXTENSION   */\nLOADMOD(STSCX49A)\nEXIT(004) ROUTINE=(EXIT04A,EXIT04B),STATUS=ENABLED\n              /* A = GETS \"ROUTE XEQ INFORMATION                     */\n              /* B = GETS \"BEFORE\" \"AFTER\" \"WITH\" AND \"CNTL\" INFO    */\nEXIT(006) ROUTINE=(EXIT06A),STATUS=ENABLED\n                      /* A = SETS SCHENV BASED ON ROUTE XEQ CARDS    */\nEXIT(020) ROUTINE=(EXIT20A),STATUS=ENABLED\n                      /* COPIES JCT INFO INTO THE JQE EXTENSION      */\nEXIT(049) ROUTINE=EXIT49A,STATUS=ENABLED\n                      /* IMPLEMENT BEFORE AFTER WITH CNTL STATEMENTS */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MELLON14": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x01\\x044/\\x01\\x044/\\x12\\x00\\x1c\\x85\\x1c\\x85\\x00\\x00\\xd4\\xc3\\xd6\\xd3\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2004-12-07T00:00:00", "modifydate": "2004-12-07T12:00:00", "lines": 7301, "newlines": 7301, "modlines": 0, "user": "MCOLLEY"}, "text": "./ ADD NAME=$$$#DATE 0468-04337-04337-1129-00012-00012-00000-CBT-468\nREGULAR CBT TAPE - VERSION 468    FILE:  702\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT468.FILE702\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 31 MEMBERS COUNTED; CUMULATIVE SIZE IS 7,270 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/02/04    11:29:40    GMT-5:00\n\n./ ADD NAME=$$$DOC   0103-04313-04313-1141-00063-00030-00000-T0SM0\n  ALL OF OUR USERMODS ARE IN MVS.OSMAINT.USERMODS ON THE TECPLEX.\n\n  Each usermod (LSES5**) has a corresponding member suffixed with a \"J\".\n  The members with the \"J\" suffixes are sample jcl install members.\n\n  FOR JES2 WE HAVE THE FOLLOWING usermods -\n\nJES2 usermods:\nMOD NAME   IMPLEMENTED     LMOD NAME   DESCRIPTION\nLSES500   ZOS4-11/13/2003  STJTABS  - CREATES OUR EXTENSIONS TO JQE AND JCT\nLSES502   ZOS4-11/13/2003  STSCX01A - JES2 EXIT1 - BANNER PAGE EXIT (NON 3800)\nLSES503   zOS4-11/13/2003  STSCX04A - parses /*ROUTE cards\nLSES504   ZOS4-11/13/2003  STSCX04B - PARSES /*BEFORE/*AFTER/*WITH AND /*CNTL\nLSES505   ZOS4-11/13/2003  STSCX05A - PROCESS $REPEXIT AND $ADDEXIT COMMANDS\nLSES506   zOS4-11/13/2003  STSCX05B - prevents purging jobs by range\nLSES507   ZOS4-11/13/2003  STSCX06A - MOVES VALID XEQ VALUES TO SCHENV VALUES\nLSES509   ZOS4-11/13/2003  STSCX15A - FORCES FCB LOAD UNLESS CHGING STD FORMS\nLSES510   ZOS4-11/13/2003  STSCX20A - END OF INPUT - MOVE JCT INFO TO JQE\nLSES511   zOS4-11/13/2003  STSCX36A - SAF process of RJE submitted jobs\nLSES512   ZOS4-11/13/2003  STSCX49A - IMPLEMENT BEFORE|AFTER|WITH|CNTL USAGE\nLSES513   ZOS4-11/13/2003  STSCX100 - FCB SETUP / TRANSLATION USER EXIT100\nLSES514   ZOS4-11/13/2003  HASPPRPU - INSERT USER EXIT100 INTO HASPPRPU CODE\n-------- ---------------   ---------------------------------------------\n\n ***********\n\nOF THESE MODS THE FOLLOWING CAN BE CONSIDERED MELLON MOD REPLACEMENTS\n\n ***********\n\nMOD NAME   IMPLEMENTED     LMOD NAME   DESCRIPTION\nLSES500   ZOS4-11/13/2003  STJTABS  - CREATES OUR EXTENSIONS TO JQE AND JCT\nLSES503   zOS4-11/13/2003  STSCX04A - parses /*ROUTE cards\nLSES504   ZOS4-11/13/2003  STSCX04B - PARSES /*BEFORE/*AFTER/*WITH AND /*CNTL\nLSES507   ZOS4-11/13/2003  STSCX06A - MOVES VALID XEQ VALUES TO SCHENV VALUES\nLSES510   ZOS4-11/13/2003  STSCX20A - END OF INPUT - MOVE JCT INFO TO JQE\nLSES512   ZOS4-11/13/2003  STSCX49A - IMPLEMENT BEFORE|AFTER|WITH|CNTL USAGE\n\n\n* * * PLEASE NOTE ! * * *\n\n*\n*    SPECIAL THANKS GO TO BOB BREAK OF ST. LOUIS FOR THE ORIGINAL CODE\n*  TO PARSE THE \"/*ROUTE XEQ RESNAME\" CARDS AND SET THE APPROPRIATE\n*  EXECUTION ENVIRONMENT.\n*\n*    SPECIAL THANKS TO JUDY RUNT OF WISCONSIN ELECTRIC FOR THE ORIGINAL\n*  CODE TO HANDLE THE \"/*CNTL BEFORE|AFTER|WITH,RESNAME\" AND \"/*CNTL\n*  RESNAME,EXC|SHR\" ROUTINES.  THE USE OF THE BLOCK EXTENSION REUSABLE\n*  TABLES, and BERT'S, TO EXTEND THE JCT AND JQE.\n*\n*  although some changes have been made to all of the code, their\n*  combined help was invaluable.\n*\n*\n\n  It is customary to transfer a PDS such as this in tso xmit format -\n  to create the xmit format dataset, use the following command -\n   \"xmit n32.t0sm0,outdsname('t0sm0.xmit.jes2mods'),dataset('t0sm0.tso.\n    jes2mods\")\n  where t0sm0.xmit.jes2mods is an fb 80X3120 dataset, and\n  where t0sm0.tso.jes2mods is the pds to be sent.\n  Be sure to transfer the file, type=binary when sent via e-mail.\n./ ADD NAME=$$NOTE1  0101-04314-04314-0944-00024-00023-00000-SBGOLOB\nThis note is from Frank Lawrence of Sun Trust, who is the current\nkeeper of the Mellon JES2 Mods, or a number of them, such as they\nare nowadays.\n\nSam,\n\nOur complete JES2 mods are attached in a TSO XMIT file.  That is\nprobably more than other folks want, but it will serve to remove\nany ambiguities if they wonder why something is the way it is.  I\nshould also note that these are pre-z/OS 1.4 newest \"activate\"\nfor things like extended job number range.  We have some OEM\nproducts that can't handle the extended job numbers in their\ncurrent release, so we have had to delay implementing those\nfeatures in z/OS 1.4.  We have tested them with these mods, but\nthat isn't the same as having them in production.\n\nLet me know if you have any questions.\n\n- Thanks,\n       Frank\n\n email:  Frank.Lawrence@SunTrust.com\n\n\n./ ADD NAME=@FILE702 0468-04337-04337-1129-00097-00097-00000-CBT-468\n//***FILE 702 is from Frank Lawrence of Sun Trust, and contains     *   FILE 702\n//*           their JES2 usermods at the z/OS 1.4 level.  Some      *   FILE 702\n//*           of these usermods can be considered replacements      *   FILE 702\n//*           for the JES2 Mellon mods, as described below.         *   FILE 702\n//*                                                                 *   FILE 702\n//*           The principal maintainer of the Mellon Mods at        *   FILE 702\n//*           Sun Trust is Stephen McColley.                        *   FILE 702\n//*                                                                 *   FILE 702\n//*           email:  Frank.Lawrence@SunTrust.com                   *   FILE 702\n//*                   Stephen.McColley@SunTrust.com                 *   FILE 702\n//*                                                                 *   FILE 702\n//*   Description of the JES2 Usermods:                             *   FILE 702\n//*                                                                 *   FILE 702\n//*     ALL OF OUR USERMODS ARE IN MVS.OSMAINT.USERMODS ON          *   FILE 702\n//*     THE TECPLEX.                                                *   FILE 702\n//*                                                                 *   FILE 702\n//*     Each usermod (LSES5**) has a corresponding member           *   FILE 702\n//*     suffixed with a \"J\".  The members with the \"J\"              *   FILE 702\n//*     suffixes are sample jcl install members.                    *   FILE 702\n//*                                                                 *   FILE 702\n//*     FOR JES2 WE HAVE THE FOLLOWING usermods -                   *   FILE 702\n//*                                                                 *   FILE 702\n//*   JES2 usermods:                                                *   FILE 702\n//*                                                                 *   FILE 702\n//*   MOD NAME  IMPLEMENTED     LMOD NAME   DESCRIPTION             *   FILE 702\n//*                                                                 *   FILE 702\n//*   LSES500  ZOS4-11/13/2003  STJTABS  - CREATES OUR EXTENSIONS   *   FILE 702\n//*                                        TO JQE AND JCT           *   FILE 702\n//*   LSES502  ZOS4-11/13/2003  STSCX01A - JES2 EXIT1 - BANNER      *   FILE 702\n//*                                        PAGE EXIT (NON 3800)     *   FILE 702\n//*   LSES503  zOS4-11/13/2003  STSCX04A - parses /*ROUTE cards     *   FILE 702\n//*   LSES504  ZOS4-11/13/2003  STSCX04B - PARSES /*BEFORE          *   FILE 702\n//*                                        /*AFTER /*WITH AND       *   FILE 702\n//*                                        /*CNTL                   *   FILE 702\n//*   LSES505  ZOS4-11/13/2003  STSCX05A - PROCESS $REPEXIT AND     *   FILE 702\n//*                                        $ADDEXIT COMMANDS        *   FILE 702\n//*   LSES506  zOS4-11/13/2003  STSCX05B - prevents purging jobs    *   FILE 702\n//*                                        by range                 *   FILE 702\n//*   LSES507  ZOS4-11/13/2003  STSCX06A - MOVES VALID XEQ VALUES   *   FILE 702\n//*                                        TO SCHENV VALUES         *   FILE 702\n//*   LSES509  ZOS4-11/13/2003  STSCX15A - FORCES FCB LOAD UNLESS   *   FILE 702\n//*                                        CHANGING STD FORMS       *   FILE 702\n//*   LSES510  ZOS4-11/13/2003  STSCX20A - END OF INPUT - MOVE      *   FILE 702\n//*                                        JCT INFO TO JQE          *   FILE 702\n//*   LSES511  zOS4-11/13/2003  STSCX36A - SAF process of RJE       *   FILE 702\n//*                                        submitted jobs           *   FILE 702\n//*   LSES512  ZOS4-11/13/2003  STSCX49A - IMPLEMENT                *   FILE 702\n//*                                        BEFORE|AFTER|WITH|CNTL   *   FILE 702\n//*                                        USAGE                    *   FILE 702\n//*   LSES513  ZOS4-11/13/2003  STSCX100 - FCB SETUP /              *   FILE 702\n//*                                        TRANSLATION USER         *   FILE 702\n//*                                        EXIT100                  *   FILE 702\n//*   LSES514  ZOS4-11/13/2003  HASPPRPU - INSERT USER EXIT100      *   FILE 702\n//*                                        INTO HASPPRPU CODE       *   FILE 702\n//*                                                                 *   FILE 702\n//*   -----------------------   ---------------------------------   *   FILE 702\n//*                                                                 *   FILE 702\n//*    **********                                                   *   FILE 702\n//*                                                                 *   FILE 702\n//*   OF THESE MODS THE FOLLOWING CAN BE CONSIDERED MELLON MOD      *   FILE 702\n//*   REPLACEMENTS                                                  *   FILE 702\n//*                                                                 *   FILE 702\n//*    **********                                                   *   FILE 702\n//*                                                                 *   FILE 702\n//*   MOD NAME  IMPLEMENTED     LMOD NAME   DESCRIPTION             *   FILE 702\n//*                                                                 *   FILE 702\n//*   LSES500  ZOS4-11/13/2003  STJTABS  - CREATES OUR EXTENSIONS   *   FILE 702\n//*                                        TO JQE AND JCT           *   FILE 702\n//*   LSES503  zOS4-11/13/2003  STSCX04A - parses /*ROUTE cards     *   FILE 702\n//*   LSES504  ZOS4-11/13/2003  STSCX04B - PARSES /*BEFORE          *   FILE 702\n//*                                        /*AFTER /*WITH AND       *   FILE 702\n//*                                        /*CNTL                   *   FILE 702\n//*   LSES507  ZOS4-11/13/2003  STSCX06A - MOVES VALID XEQ VALUES   *   FILE 702\n//*                                        TO SCHENV VALUES         *   FILE 702\n//*   LSES510  ZOS4-11/13/2003  STSCX20A - END OF INPUT - MOVE      *   FILE 702\n//*                                        JCT INFO TO JQE          *   FILE 702\n//*   LSES512  ZOS4-11/13/2003  STSCX49A - IMPLEMENT                *   FILE 702\n//*                                        BEFORE|AFTER|WITH|CNTL   *   FILE 702\n//*                                        USAGE                    *   FILE 702\n//*                                                                 *   FILE 702\n//*   * * * PLEASE NOTE ! * * *                                     *   FILE 702\n//*   *                                                             *   FILE 702\n//*   *    SPECIAL THANKS GO TO BOB BREAK OF ST. LOUIS FOR THE      *   FILE 702\n//*   *  ORIGINAL CODE TO PARSE THE \"/*ROUTE XEQ RESNAME\" CARDS     *   FILE 702\n//*   *  AND SET THE APPROPRIATE EXECUTION ENVIRONMENT.             *   FILE 702\n//*   *                                                             *   FILE 702\n//*   *    SPECIAL THANKS TO JUDY RUNT OF WISCONSIN ELECTRIC FOR    *   FILE 702\n//*   *  THE ORIGINAL CODE TO HANDLE THE \"/*CNTL                    *   FILE 702\n//*   *  BEFORE|AFTER|WITH,RESNAME\" AND \"/*CNTL RESNAME,EXC|SHR\"    *   FILE 702\n//*   *  ROUTINES.  THE USE OF THE BLOCK EXTENSION REUSABLE         *   FILE 702\n//*   *  TABLES, and BERT'S, TO EXTEND THE JCT AND JQE.             *   FILE 702\n//*   *                                                             *   FILE 702\n//*   *  although some changes have been made to all of the code,   *   FILE 702\n//*   *  their combined help was invaluable.                        *   FILE 702\n//*   *                                                             *   FILE 702\n//*   * * * * * * * * * * * * *                                     *   FILE 702\n//*                                                                 *   FILE 702\n./ ADD NAME=JES2PARM 0101-04313-04313-1124-00035-00035-00000-T0SM0\n/* ALL LOADMOD AND EXIT STATEMENTS REWORKED 3-18-96 T0SM0            */\nLOADMOD(STJTABS)   /*  DYNAMIC TABLE DEFINITIONS FOR JQE EXTENSION */\nLOADMOD(STSCX01A)  /*  JES2 EXIT1 - BANNER PAGE EXIT (NON3800) */\nLOADMOD(STSCX04A)  /* PARSES /*ROUTE XEQ RESNAME AND VALIDATES */\nLOADMOD(STSCX04B)  /* PARSES /*BEFORE, AFTER,WITH, AND CNTL    */\nLOADMOD(STSCX05A)  /* $REPEXIT AND $ADDEXIT COMMANDS ARE HERE  */\nLOADMOD(STSCX05B)  /* PREVENTS PURGING JOBS BY RANGE           */\nLOADMOD(STSCX06A)  /* TURNS /*ROUTE CNTL,XX INTO SCHENV= VALUES*/\n/* DMOD(STSCX06B)     HANDLES TAPE BLP OPTIONS                 */\nLOADMOD(STSCX15A)  /* FORCES FCB LOAD UNLESS CHANGING TO STDFCB*/\nLOADMOD(STSCX20A)  /* COPIES JCT INFO INTO THE JQE EXTENSION   */\nLOADMOD(STSCX49A)\nLOADMOD(STSCX36A) STORAGE=CSA\nLOADMOD(STSCX100)\nEXIT(001) ROUTINE=EXIT01A,STATUS=ENABLED\n                      /* A = JES2EX01=STSC SEPERATOR BANNER ROUTINE  */\nEXIT(004) ROUTINE=(EXIT04A,EXIT04B),STATUS=ENABLED\n              /* A = GETS \"ROUTE XEQ INFORMATION                     */\n              /* B = GETS \"BEFORE\" \"AFTER\" \"WITH\" AND \"CNTL\" INFO    */\nEXIT(005) ROUTINE=(EXIT05A,EXIT05B),STATUS=ENABLED\n                      /* A = PREVENTS PURGING JOBS BY RANGE          */\n                      /* B = THE $REPEXIT AND $ADDEXIT COMMANDS      */\nEXIT(006) ROUTINE=(EXIT06A),STATUS=ENABLED\n                      /* A = SETS SCHENV BASED ON ROUTE XEQ CARDS    */\n                      /* B = HANDLES TAPE BLP PROCESSING OPTIONS     */\nEXIT(015) ROUTINE=(EXIT15A),STATUS=ENABLED\n                      /* A = STSC FCB CONTROL                        */\nEXIT(020) ROUTINE=(EXIT20A),STATUS=ENABLED\n                      /* COPIES JCT INFO INTO THE JQE EXTENSION      */\nEXIT(036) ROUTINE=EXIT36A,STATUS=ENABLED\n                      /* SAF PROCESS OF RJE SUBMITTED JOBS           */\nEXIT(049) ROUTINE=EXIT49A,STATUS=ENABLED\n                      /* IMPLEMENT BEFORE AFTER WITH CNTL STATEMENTS */\nEXIT(100) ROUTINE=EXIT100A,STATUS=ENABLED\n                      /* JES2X100=STSC  FCB SETUP ROUTINES           */\n./ ADD NAME=LSES500  0313-00234-03317-2136-00469-00455-00000-T0SM1\n++USERMOD(LSES500)\n /* ***************************************************************\n    ** *                                                       * **\n    ** * THIS USERMOD HANDLE ALL CHANGES REQUIRED TO CREATE    * **\n    ** * LOCAL EXTENSIONS TO THE JQE AND JCT.                  * **\n    ** *                                                       * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707) .\n++MAC($STJCTX) SYSLIB(SHASMAC) DISTLIB(AHASMAC).\n         MACRO -- $STJCTX -- SUNTRUST'S FIRST JCT EXTENTION\n&LABEL   $STJCTX\n.**********************************************************************\n.*\n.* FUNCTION: MAPPING MACRO FOR STSC'S JCT EXTENTION.\n.*\n.* REVISION HISTORY:\n.*\n.*   DATE   NAME         DESCRIPTION OF CHANGE\n.* -------- ------------ ----------------------------------------------\n.* 04/20/00 S MCCOLLEY   ADDED THIS COMMENT BLOCK.\n.* 11/13/03 S MCCOLLEY   ADDED CONDITIONAL EXPANSION OF $JCTX\n.*\n.**********************************************************************\n         LCLC  &JCXOK\n&JCXOK   SETC  T'JCXORG                     GET THE TYPE FOR JCXORG\n         AIF   ('&JCXOK' NE 'U').STNXPND      ** IF NOT DEFINED ADD IT\n         $JCTX\n.STNXPND ANOP\nSTJCTX   DSECT\n*\n* STSC EXTENSION OF THE JCT TO BE USED FOR ALL EXITS\n*\n         DS    XL(JCXORG-JCTX)     DEFINE REQUIRED $JCTX PREFIX AREA\n*\nUJCXMFLG DS    XL1                 RESOURCE ROUTING FLAGS\n*\nUJCXUFLG DS    XL1                 MISC JECL CARDS FLAGS\n*\nUJCXDLYS DS    X                   JOB DELAY REASONS FROM OUR EXIT 49\n*\nUJCXWITH DS    CL8                 SAVE A WITH NAME HERE\nUJCXAFTN DS    CL8                 SAVE AN AFTER NAME HERE\nUJCXBFOR DS    CL8                 SAVE A BEFORE NAME HERE\nUJCXDNAM DS    CL45                NAMES FROM BEF/AFT/WITH CARDS AND   X\n                                    THE /*CNTL AND SHARE TYPES         X\n                                    5 9-BYTE FIELDS\n*\n         DS    0H                  DOUBLE WORD ALLIGN\nUJCXWORK DS    CL4                 4 BYTE TEMPORARY EXIT WORK AREA\n*\nUJCXSLN1 EQU   *-STJCTX            LENGTH OF SECTION\n*\n         MEND\n++MAC($STQNAME) SYSLIB(SHASMAC) DISTLIB(AHASMAC).\n         MACRO -- $STQNAME -- SUNTRUSTS JQE EXTENSION\n&LABEL   $STQNAME &DSECT=YES\n.*\n.**********************************************************************\n.*\n.* FUNCTION: DEFINE SUNTRUST'S FIRST BERT, AN EXTENSION TO THE JQE.\n.*\n.* NOTES:    THIS BERT ENTRY CONTAINS ALL THE FIELDS WE USED TO\n.*           INCLUDE INTO THE $JQE MACRO PRIOR TO OS/390.\n.*\n.*           SOME OF THESE FIELD MUST BE IDENTICALLY DEFINED AND USED\n.*           IN THE JCTX: UBRDNAME, UBRUFLAG, UBRMFLAG, UBRDLAYS.\n.*\n.*\n.* REVISION HISTORY:\n.*\n.*   DATE   NAME         DESCRIPTION OF CHANGE\n.* -------- ------------ ----------------------------------------------\n.* 04/20/00 S MCCOLLEY   INITIAL VERSION -- FOR OS/390 2.6.\n.*\n.**********************************************************************\n.*\nSTQNAME  DSECT ,\n*\n* UBRDNAME IS THE LIST OF AFTER/BEFORE JOBNAMES AND/OR CNTL RESOURCES\n*          AND THE /*CNTL SHARE TYPE (\"S\" OR \"E\").  THESE SHARE TYPE\n*          BYTES IMMEDIATELY FOLLOW THE RESOURCE NAME.\n*\n*   AFTER   (IF ANY) MUST BE FIRST  (SEE UBRAFT).\n*   BEFORE  (IF ANY) MUST BE SECOND (SEE UBRBEF).\n*   CNTL(S) (IF ANY) MUST BE LAST   (SEE UBRCNTL AND 4 HIGH ORDER BITS\n*           OF UBRMFLAG.  THERE CAN BE UP TO 4 CNTL NAMES.)\n*\nUBRWITH  DS    CL8                 PLACE TO HOLD A /*WITH NAME\nUBRAFTR  DS    CL8                 PLACE TO HOLD A /*AFTER NAME\nUBRBFOR  DS    CL8                 PLACE TO HOLD A /*BEFORE NAME\nUBRDNAME DS    CL45                NAMES FROM BEFORE/AFTER/CNTL CARDS  X\n                                     AND SHARE TYPES IF /*CNTL\nUBRDNAML EQU   9                   LENGTH OF EACH NAME/SHARE TYPE FIELD\n*\nUBRUFLAG DS    BL1                 MISC JECL CARDS FLAGS\nUBRINFRM EQU   B'10000000'           /*JOBPARM INFORM AFTER EXECUTION\n*\n*\nUBRMFLAG DS    BL1                 RESOURCE FLAGS\nUBRAFT   EQU   B'00000001'           /*AFTER  SPECIFIED\nUBRBEF   EQU   B'00000010'           /*BEFORE SPECIFIED\nUBRCNTL  EQU   B'00000100'           /*CNTL   SPECIFIED\nUBRWITHF EQU   B'00001000'           /*WITH   SPECIFIED\n*              B'11110000'           # OF /*CNTL NAMES PRESENT\n*\nUBRNCTL  EQU   X'08'               MAX # OF NAMES INCLUDING\n*                                    /*AFTER, /*BEFORE, AND  /*CNTL\n*\n*\nUBRDLAYS DS    BL1                 DELAY REASONS FROM OUR EXIT 49.  .\nUBRDLWIT EQU   B'01000000'  X'40'    /*WITH CONTENTION DELAY\nUBRDLRES EQU   B'00100000'  X'20'    /*RESOURCE CONTENTION (OBSOLETE)\nUBRDLRR  EQU   B'00010000'  X'10'    RESOURCE ROUTING CNTN (OBSOLETE)\nUBRDLDUP EQU   B'00001000'  X'08'    HOLD/DUP   CONTENTION\nUBRDLAFT EQU   B'00000100'  X'04'    /*AFTER    CONTENTION\nUBRDLBEF EQU   B'00000010'  X'02'    /*BEFORE   CONTENTION\nUBRDLCTL EQU   B'00000001'  X'01'    /*CNTL     CONTENTION\n*\nSTQNAMELN EQU  *-STQNAME           LENGTH OF THE BERTIE\n*\n         MEND\n++MAC($USERCBS) SYSLIB(SHASMAC) DISTLIB(AHASMAC).\n         MACRO -- $USERCBS -- EXPAND ALL USER CONTROL BLOCKS\n&LABEL   $USERCBS ,\n.*\n.**********************************************************************\n.*\n.* FUNCTION: GENERATE ALL SUNTRUST MAPPING MACROS FOR JES2.\n.*\n.* NOTES:    THIS MACRO IS REQUIRED FOR ALL SUNTRUST JES2 EXIT MODULES\n.*           ALL USER MAPPING MACROS SHOULD BE EXPANDED HERE.\n.*\n.* REVISION HISTORY:\n.*\n.*   DATE   NAME         DESCRIPTION OF CHANGE\n.* -------- ------------ ----------------------------------------------\n.*\n.**********************************************************************\n.*\n.*\n.*\n         TITLE '$STJCTX -- USER EXTENSION TO THE JCT (OS/390 2.10)'\n         $STJCTX ,\n.*\n         TITLE '$STQNAME -- USER EXTENSION TO THE JQE (OS/390 2.10)'\n         $STQNAME ,\n.*\n         MEND\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STJTABS),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STJTABS)\n NAME STJTABS(R)\n/*\n++SRC(STJTABS) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\nSTJTABS  TITLE 'INSTALLATION DEFINED TABLES FOR JES2'\n PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1) '\n*\n* MODULE NAME:  STJTABS\n*\n*\n* FUNCTION:     THIS MODULE CONTAINS THE USER TABLES REFERENCED IN\n*               THE JES2 HASPTABS MODULE.  IT ALSO CONTAINS ANY\n*               PRE- OR POST SCAN EXITS CALLED FOR BY THESE\n*               TABLE ENTRIES.\n*\n*               TABLES AND FUNCTIONS ADDED:\n*\n*                 MAIN PARAMETER TABLE:\n*\n*                 BERT TABLE FOR OUR EXTENSION TO THE JQE:\n*\n*                 - STQNAME  - ALL OUR JQE EXTENSION.\n*\n*                 JQE TABLE:\n*\n*                 - BERAFTCT - PSEUDO FIELD TO DISPLAY THE VALUES\n*                              FOR A JOB'S /*BEFORE, /*AFTER, AND/OR\n*                              /*CNTL CARDS WITH A PRE-SCAN EXIT.\n*\n*\n* ENTRY POINTS: PARMSCAN -- INSTALLATION'S MAIN PARAMETER\n*                           $SCAN TABLE\n*\n*               USERJQE  -- INSTALLATION'S JQE SUB-SCAN\n*                           $SCAN TABLE\n*\n*               USERBERT -- INSTALLATION'S BERT TABLE.\n*\n*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE\n*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS\n*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED\n*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF\n*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE\n*  USEFULLNESS OF THE MATERIAL.\n*\n*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,\n*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE\n*  IN THE FUTURE.\n*\n*    SPECIAL THANKS GO TO BOB BREAK OF ST. LOUIS FOR THE ORIGINAL CODE\n*  TO PARSE THE \"/*ROUTE XEQ RESNAME\" CARDS AND SET THE APPROPRIATE\n*  EXECUTION ENVIRONMENT.\n*\n*    SPECIAL THANKS TO JUDY RUNT OF WISCONSIN ELECTRIC FOR THE ORIGINAL\n*  CODE TO HANDLE THE \"/*CNTL BEFORE|AFTER|WITH,RESNAME\" AND \"/*CNTL\n*  RESNAME,EXC|SHR\" ROUTINES.  THE USE OF THE BLOCK EXTENSION REUSABLE\n*  TABLES, BERT'S, TO EXTEND THE JCT AND JQE.\n*\n* REVISION HISTORY:\n*\n*   DATE   NAME        DESCRIPTION OF CHANGES\n* -------- ----------- ------------------------------------------------\n         SPACE 3\n         COPY  $HASPGBL            INCLUDE JES GLOBAL VALUES\n         PRINT ON                  RESTORE FULL PRINTING\n         EJECT\nSTJTABS $MODULE TITLE='SUNTRUST USER TABLES MODULE',                   X\n               RMODE=ANY,                                              X\n               ENVIRON=JES2,                                           X\n               MLTE,                                                   X\n               RESPA,              JES FSI RESPA DSECT                 X\n               RPL,                MVS ACB REQUEST BLOCK DSECT         X\n               $BERT,              ($BERT)                             X\n               $BERTTAB,           ($BERT)                             X\n               $BUFFER,            HASP SPOOL BUFFER DSECT             X\n               $CAT,               HASP CLASS ATTRIBUTE TABLE DSECT    X\n               $CATBERT,           ($DOGBERT)                          X\n               $CADDR,             JES2 COMMON STORAGE ADDRESS TABLE   X\n               $CMB,                                                   X\n               $COMWORK,           HASP COMM PCE WORK AREA DSECT       X\n               $DCT,                                                   X\n               $HASPEQU,           HASP EQUATES                        X\n               $HCCT,              HASP HCCT DSECT                     X\n               $HCT,               HASP CONTROL TABLE DSECT            X\n               $HFAME,             HASP HFAME DSECT                    X\n               $JCT,               HASP JOB CONTROL TABLE DSECT        X\n               $JCTX,              HASP JOB CONTROL TABLE EXTENSION    X\n               $JOE,               HASP JOB OUTPUT ELEMENT DSECT       X\n               $JQE,               HASP JOB QUEUE ELEMENT DSECT        X\n               $MCT,                                                   X\n               $MIT,               HASP MIT DSECT                      X\n               $MITETBL,                                               X\n               $MODMAP,            HASP MODULE MAP DSECT               X\n               $PADDR,             HASP PADDR DSECT                    X\n               $PARMLST,                                               X\n               $PCE,               HASP PROCESSOR CONTROL ENTRY DSECT  X\n               $PCETAB,            HASP PCE TABLE DSECT                X\n               $PSV,                                                   X\n               $QSE,                                                   X\n               $RDRWORK,                                               X\n               $SAFINFO,                                               X\n               $SCAT,              HASP SCAT DSECT                     X\n               $SCANTAB,           HASP SCAN TABLE DSECT               X\n               $SCANWA,            HASP $SCAN WORK AREA DSECT          X\n               $USERCBS,           USER MAPPING MACROS                 X\n               $XECB               HASP XECB DSECT\n         TITLE 'USER TABLE MODULE -- USER MAIN PARAMETER STATEMENT $SCAX\n               N TABLE'\n         TITLE 'USER TABLE MODULE -- USERJQE SUB-SCAN TABLE'\n**********************************************************************\n*\n*   THIS IS THE $SCAN TABLE FOR CONTROLLING SCANNING OF THE PARMS FOR\n*    JQES.\n*   WE USE IT TO ADD OUR STATEMENTS FOR:\n*\n*     BEFAFTCT - DISPLAY ONLY OF BEFORE/AFTER/CNTL CARD INFORMATION.\n*\n**********************************************************************\nUSERJQE  $SCANTAB  TABLE=(DYNAMIC,MCTJQETP)\n         SPACE 3\n        $SCANTAB NAME=BEFAFTCT,    BEFORE/AFTER/CNTL INFORMATION       X\n               CB=PARENT,                                              X\n               DSECT=JQE,                                              X\n               FILTER=NO,          CAN NOT BE A FILTER                 X\n               CALLERS=($SCDCMDS), DISPLAY COMMANDS                    X\n               PRESCAN=(QBACDISP,DISPLAY)  DISPLAY PRESCAN EXIT\n         SPACE 3\n         $SCANTAB  TABLE=END       DEFINE END OF USER TABLE\n         TITLE 'USER TABLE MODULE -- DYNAMIC BERT TABLE'\n**********************************************************************\n*\n*   THIS IS THE $BERTTAB TABLE TO DEFINE OUR STQNAME ENTRY IN THE JQA.\n*   REFER TO THE $STQNAME MACRO FOR DETAILS.\n*\n**********************************************************************\nUSERBERT $BERTTAB  TABLE=(DYNAMIC) START OF DYNAMIC TABLE\n         SPACE 3\n        $BERTTAB CBTYPE=JQE,       CONTROL BLOCK TYPE                  X\n               NAME=STQNAME,       ID OF OUR BERTIE                    X\n               CBOFF=*,            GENERATE OFFSET DYNAMICALLY         X\n               LEN=STQNAMELN,      LENGTH OF OUR BERTIE                X\n               FILL=C' '           FILL CHARACTER\n         SPACE 3\n         $BERTTAB  TABLE=END       DEFINE END OF USER TABLE\n         TITLE 'USER TABLE MODULE -- $SCAN PRE-SCAN DISPLAY EXIT ROUTINX\n               E FOR JQA BEFORE/AFTER/CNTL INFORMATION'\n**********************************************************************\n*\n*   $SCAN FACILITY PRE-SCAN EXIT TO DISPLAY THE SCHEDULING INFORMATION\n*   FROM THE /*BEFORE, /*AFTER AND /*CNTL JECL CARDS FOR BATCH JOBS.\n*\n*   NOTE: THESE FIELDS ARE ONLY DISPLAYED FOR BATCH JOBS THAT ARE\n*         EITHER AWAITING OR IN EXECUTION, SINCE THEY HAVE NO VALUE\n*         FOR TSU OR STC JOBS AND HAVE NO PURPOSE POST EXECUTION.\n*\n**********************************************************************\n         SPACE 2\n         USING STAB,R8             DEFINE BASE REGISTER\n         USING SCWA,R10            DEFINE BASE REGISTER\n         USING HCT,R11             DEFINE BASE REGISTER\n         USING QBACDISP,R12        DEFINE BASE REGISTER\n         USING PCE,R13             DEFINE BASE REGISTER\n*\nQBACDISP $SAVE ,                   GET SAVE AREA AND SAVE REGS\n*\n         LR    R12,R15             GET ROUTINE'S BASE ADDRESS\n         LR    R10,R1              GET ADDRESS OF SCWA\n         L     R8,SCWASTAB         GET ADDRESS OF STAB\n         L     R7,SCWACBAD         GET ADDRESS OF OUR CB (JQE)\n         USING JQE,R7\n*\n         LA    R4,8                PRESET RETURN CODE -- ALL DONE\n         TM    JQEFLAG3,JQE3JOB    CHECK IF THIS IS A BATCH JOB\n         BNZ   QBACRET             TSU OR STC -- EXIT, NO JQA TO FREE\n         TM    JQETYPE,$XEQ        CHECK IF JOB IS WAITING/IN EXEC\n         BZ    QBACRET             NO -- EXIT, NO JQA TO FREE\n*\n         $DOGJQE ACTION=(FETCH,READ),    GET A READ-ONLY MODE JQA      X\n               JQE=(R7),                                               X\n               ERRET=QBACBDJQ\n*\n         LR    R7,R0               GET THE ADDR OF OUR JQA\n         USING JQA,R7              DEFINE BASE REGISTER\n*\n         $DOGBERT ACTION=GETOFFSET,    GET THE OFFSET                  X\n               CBTYPE=JQE,                IN THE JQA                   X\n               NAME=STQNAME,                 OF OUR BERT               X\n               ERRET=QBACBDBR\n*\n         LA    R6,0(R1,R7)         GET ADDRESS OF OUR BERT\n         USING STQNAME,R6\n*\n* SET UP AND DISPLAY THE VALUE OF THE UDCTUCS FIELD\n*\n         TM    UBRMFLAG,UBRAFT     DID JOB SPECIFY AN /*AFTER NAME?\n         BZ    QBACBEF             NO -- CHECK FOR BEFORE NAME\n         LA    R5,UBRAFTR          GET ADDR OF OUR NAMES FIELD\n         LA    R2,8                GET LENGTH OF OUR FIELD\n        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT='AFTER=',BRKOPT=YES,CONV=CHAR,           X\n               DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR\n*\nQBACBEF  DS    0H\n         TM    UBRMFLAG,UBRBEF     DID JOB SPECIFY A /*BEFORE NAME?\n         BZ    QBACWITH            NO -- CHECK FOR WITH NAME(S)\n         LA    R2,8                GET LENGTH OF OUR FIELD\n         LA    R5,UBRBFOR          POINT TO OUR NAME FIELD\n        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT='BEFORE=',BRKOPT=YES,CONV=CHAR,          X\n               DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR\n         LA    R5,UBRDNAML(,R5)    POINT TO NEXT NAME\n*\nQBACWITH DS    0H\n         TM    UBRMFLAG,UBRWITHF   DID JOB SPECIFY A /*WITH NAME ?\n         BZ    QBACCNTL            NO -- CHECK FOR CNTL NAME(S)\n         LA    R2,8                GET LENGTH OF OUR FIELD\n         LA    R3,UBRWITH          GET ADDRESS OF FIELD\n        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT='WITH=',BRKOPT=YES,CONV=CHAR,            X\n               DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT=(R3),LENGTH=(R2),BRKOPT=NO,CONV=CHAR\n*\nQBACCNTL DS    0H\n         TM    UBRMFLAG,UBRCNTL    DID JOB SPECIFY A /*CNTL NAME?\n         BZ    QBACRC08            NO -- RETURN TO CALLER\n         LA    R5,UBRDNAME         POINT TO NAME FIELD\n         SLR   R3,R3               ZERO R3 FOR IC\n         IC    R3,UBRMFLAG         GET CNTL COUNTS AND FLAGS\n         SRL   R3,4                SHIFT OUT THE FLAG BITS\n         LTR   R3,R3               VERIFY WE HAVE AT LEAST ONE CNTL\n         BZ    QBACRC08            ZERO -- RETURN TO CALLER\n*\n        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT='CNTL=(',BRKOPT=YES,CONV=CHAR,           X\n               DEBLANK=NO\n         B     QBACCTSK            SKIP COMMA BEFORE FIRST NAME\n*\nQBACCTLP DS    0H\n        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\nQBACCTSK DS    0H\n         LA    R2,8                GET LENGTH OF OUR FIELD\n        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR\n        $SCAND SCWA=SCWA,TEXT='-',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n         LA    R2,1                GET LENGTH OF OUR FIELD\n         LA    R4,8(,R5)           GET ADDR OF SHARE TYPE\n        $SCAND SCWA=SCWA,TEXT=(R4),LENGTH=(R2),BRKOPT=NO,CONV=CHAR,    X\n               DEBLANK=NO\n*\n         LA    R5,UBRDNAML(,R5)    POINT TO NEXT NAME\n         BCT   R3,QBACCTLP         LOOP THROUGH ALL NAMES\n*\n        $SCAND SCWA=SCWA,TEXT=')',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n*\n*\nQBACRC08 DS    0H                  \"NORMAL\" RETURN FROM PRE-SCAN EXIT\n*\n         LA    R4,8                SET ALL DONE RETURN CODE\n*\nQBACRJQA DS    0H\n         $DOGJQE ACTION=(RETURN),  RETURN THE READ MODE JQA            X\n               CBADDR=(R7)\n*\nQBACRET  DS    0H\n         $RETURN RC=(R4)           RETURN TO CALLER\n*\n*\nQBACBDJQ DS    0H                  NO JQE AVAILABLE\n         LA    R1,QBACBDJM         GET ERROR MSG HEADER ADDRESS\n         $STORE R1                 SAVE ERROR MSG IN CURRENT SAVE AREA\n         LA    R4,4                SET ERROR MSG RETURN CODE\n         B     QBACRET             EXIT BUT DON'T RETURN THE JQA\n*\nQBACBDJM DC    CL2'99'             REASON CODE\n         DC    AL1(L'QBACBDJT)     MESSAGE LENGTH\nQBACBDJT DC    C'QBACDISP: JQE/JQA NOT AVAILABLE OR INVALID.'\n*\n*\nQBACBDBR DS    0H                  ERROR GETTING THE BERT\n         LA    R1,QBACBDBM         GET ERROR MSG HEADER ADDRESS\n         $STORE R1                 SAVE ERROR MSG IN CURRENT SAVE AREA\n         LA    R4,4                SET ERROR MSG RETURN CODE\n         B     QBACRJQA            GO RETURN THE JQA\n*\nQBACBDBM DC    CL2'99'             REASON CODE\n         DC    AL1(L'QBACBDBT)     MESSAGE LENGTH\nQBACBDBT DC    C'QBACDISP: ERROR RETURNED LOCATING STQNAME.'\n*\n         LTORG ,\n*\n         DROP  R6,R7,R8,R10,R11,R12,R13\n         TITLE 'USER TABLE MODULE -- EPILOG'\n         $MODEND ,\n         SPACE 2\n         END   ,                   END OF MODULE\n./ ADD NAME=LSES500J 0406-00234-03317-2154-00026-00018-00007-T0SM1\n//T0SM500J JOB  (4030,37),'REDO----LSES500',CLASS=X,MSGCLASS=A,\n//  REGION=6M,\n//    NOTIFY=&SYSUID\n/*JOBPARM S=TSPC\n//*\n//*%PDSDOC 00 SMP APPLY LSES500\n/*CNTL SESG03A,EXC\n//S1       EXEC PGM=GIMSMP,REGION=5M,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=MVS.OSMAINT.USERMODS.ZOS14(LSES500)\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES500) BYPASS(APPLYCHECK).\n  RESETRC .\n  RECEIVE S(LSES500) SOURCEID(SUNTRUST) .\n  SET BDY(AEST03A).\n  APPLY       S(LSES500) REDO.\n//\n./ ADD NAME=LSES502  0203-00234-03317-2217-02583-02591-00005-T0SM1\n++USERMOD(LSES502)\n /* ***************************************************************\n    ** * USER EXIT 1 A                                         * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707) .\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STSCX01A),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STSCX01A)\n NAME STSCX01A(R)\n/*\n++SRC(STSCX01A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\n PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1,REUS=REFR) '\nSTSCX01A TITLE 'PRINT/PUNCH SEPARATOR EXIT -- PROLOG'          @430P270\n**********************************************************************\n** *  I DON'T THINK ANY PRINTER ACTUALLY USE THIS EXIT ANYMORE,   * **\n** * BUT SINCE WE USED TO ALTER THE HASPPRPR SEPERATOR PAGE       * **\n** * ROUTINES DIRECTLY, I AM ADDING THIS EXIT TO SIMULATE THE     * **\n** * SINGLE CHANGE WHICH IS TO CHANGE THE LITERAL OF THE ROOM     * **\n** * NUMBER TO BIN NUMBER.         SGM 08-08-00                   * **\n**********************************************************************\n* **PROPRIETARY-STATEMENT**********************************************\n*                                                                     *\n*   LICENSED MATERIALS-PROPERTY OF IBM                                *\n*   THIS MODULE IS \"RESTRICTED MATERIALS OF IBM\"                      *\n*   5645-001 (C) COPYRIGHT IBM CORP 1990, 1997                        *\n*                                                                     *\n*   STATUS = HJE6603                                                  *\n*                                                                     *\n*01* EXTERNAL CLASSIFICATION:  NONE                            @R01P003\n*01* END OF EXTERNAL CLASSIFICATION:                           @R01P003\n*                                                                     *\n* **END-OF-PROPRIETARY-STATEMENT***************************************\n***********************************************************************\n*                                                                     *\n* MODULE NAME = STSCX01A (STSCX01A LOAD MODULE)                       *\n*                                                                     *\n* DESCRIPTIVE NAME = EXIT 1                                           *\n*                                                                     *\n*                    PRINT/PUNCH Separator                            *\n*                                                                     *\n* FUNCTION =                                                          *\n*                                                                     *\n*        STSCX01A IS A SAMPLE EXIT ROUTINE THAT PRODUCES A            *\n*        job separator page ( see sample separator page               *\n*        below ).                                                     *\n*                                                                     *\n*        The separator page produced by this exit is                  *\n*        identical to the default separator page ( produced           *\n*        in HASPPRPU ) with the exception of the detail box           *\n*        information field labels.  This sample exit produces         *\n*        detail box information field labels that are delimited       *\n*        by an '=' sign as opposed to a ':' ( on the default          *\n*        separator page ).                                            *\n*                                                                     *\n*        An installation could use this sample exit to                *\n*        customize the appearance of a job separator page.            *\n*                                                                     *\n*        Exit 1 is called by HASPPRPU during print/punch              *\n*        processing.  It is called for job header and job             *\n*        trailer separators.                                          *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*             JJJJJJJJJJ  OOOOOOOOOOOO  BBBBBBBBBBB     00000000      *\n*            JJJJJJJJJJ  OOOOOOOOOOOO  BBBBBBBBBBBB   0000000000      *\n*               JJ      OO        OO  BB        BB  00      0000      *\n*              JJ      OO        OO  BB        BB  00     00 00       *\n*             JJ      OO        OO  BB       BB   00    00  00        *\n*            JJ      OO        OO  BBBBBBBBBB    00   00   00       1 *\n*           JJ      OO        OO  BBBBBBBBBB    00  00    00       11 *\n*          JJ      OO        OO  BB       BB   00 00     00       11  *\n*   JJ    JJ      OO        OO  BB        BB  0000      00       11   *\n*  JJ    JJ      OO        OO  BB        BB  000       00       11    *\n* JJJJJJJJ      OOOOOOOOOOOO  BBBBBBBBBBBB   0000000000    1111111111 *\n* JJJJJJ       OOOOOOOOOOOO  BBBBBBBBBBB     00000000     1111111111  *\n*                                                                     *\n*     JJJJJJJJJJ   000000000        1       1       1       1         *\n*     JJJJJJJJJJ  00000000000      11      11      11      11         *\n*         JJ      00      000     111     111     111     111         *\n*         JJ      00     0000    1111    1111    1111    1111         *\n*         JJ      00    00 00   11111   11111   11111   11111         *\n*         JJ      00   00  00      11      11      11      11         *\n*         JJ      00  00   00      11      11      11      11         *\n*         JJ      00 00    00      11      11      11      11         *\n*     JJ  JJ      0000     00      11      11      11      11         *\n*     JJ  JJ      000      00      11      11      11      11         *\n*     JJJJJJ      00000000000      11      11      11      11         *\n*     JJJJJJ       000000000       11      11      11      11         *\n*                                                                     *\n* ***START*****START*****START*****START*****START*****START****STA** *\n* *                                                                 * *\n* * JOBID=          J0111                        SEGMENT ID: 0021   * *\n* * JOB NAME=       JOB01                                           * *\n* * USER ID=        JSMITH                                          * *\n* * SYSOUT CLASS=   A                                               * *\n* * OUTPUT GROUP=   GRP01.CLASSA.D3289                              * *\n* * TITLE=          Smitty Corporation Checking Account History     * *\n* *                                                                 * *\n* * DESTINATION=    NEW YORK                                        * *\n* * NAME=           Joseph P. Smith                                 * *\n* * ROOM=           2G-54                                           * *\n* * BUILDING=       Smitty Textile Building                         * *\n* * DEPARTMENT=     Accounting                                      * *\n* * ADDRESS=        999 W. 99th Street                              * *\n* *                 New York, New York                              * *\n* *                 10000                                           * *\n* *                 212-555-3487                                    * *\n* *                                                                 * *\n* * PRINT TIME=     12:03:41                                        * *\n* * PRINT DATE=     10 JAN 1998                                @OW26885\n* * PRINTER NAME=   PRINTER1                                        * *\n* * SYSTEM=         SYSA                                            * *\n* *                                                                 * *\n* ***START*****START*****START*****START*****START*****START****STA** *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* NOTES =                                                             *\n*                                                                     *\n*    DEPENDENCIES = JES2 $EXIT Facility, Standard JES2 services,      *\n*                   SWBTUREQ services                                 *\n*                                                                     *\n*    RESTRICTIONS = This code is provided as an example of            *\n*                   installation extensions to JES2.  This code       *\n*                   is not considered TYPE 1 supported code of IBM.   *\n*                   Any problems encountered in the use of this       *\n*                   sample code is a user responsibility.  The        *\n*                   IBM support center does not support user          *\n*                   extensions of sample user exits.                  *\n*                                                                     *\n* MODULE TYPE = Procedure ( CSECT type )                              *\n*                                                                     *\n*    PROCESSOR = IBM High Level Assembler/MVS                  @520LHLA\n*                                                                     *\n*    MODULE SIZE = See $MODEND macro expansion at end of assembly     *\n*                                                                     *\n*    ATTRIBUTES = JES2 REENTRANT, RMODE ANY, AMODE 31                 *\n*                                                                     *\n*                                                                     *\n* ENTRY POINTS =                                                      *\n*                                                                     *\n*        EXIT01A   -  Produce our own separator page.  Suppress       *\n*                     the production of the default separator         *\n*                     page.                                           *\n*                                                                     *\n*                     Suppress the production of JESNEWS if this      *\n*                     exit has been called for a job-continuation     *\n*                     separator page.                                 *\n*                                                                     *\n* MACROS = JES2 - $CALL, $DEST, $ENTRY, $ESTAE, $GETWORK, $MODEND,    *\n*                 $MODULE, $PBLOCK, $PRPUT, $RETURN, $RETWORK, $SAVE, *\n*                 $SEPPDIR, $SETRP, $STORE                            *\n*                                                                     *\n* MACROS = MVS  - SWBTUREQ, TIME                                      *\n*                                                                     *\n* CHANGE ACTIVITY                                                     *\n*                                                                     *\n*        @410  MVS/SP-JES2 VERSION 4 RELEASE 1 LEVEL 0                *\n*              (SP4.1.0, HJE4410)                                     *\n*                                                                     *\n* $420P306=PTM      HJE4420 910118 R_W1: Sample Exit Prolog Problems  *\n*                                                                     *\n* $430P050=10X      HJE4430 920310 RJH:  ENHANCE STSCX01A(USER EXIT1) *\n* $430P329=10X      HJE4430 920429 B_R2: PMX0329: Sample Exit 1       *\n* $430P270=10X      HJE4430 920721 HGF:  $MODULE, ENVIRON, RMODE      *\n* $510P214=PTM      HJE5510 930810 KCK:  EXIT1 SEPPDIR/$DEST UPDATES  *\n*                                                                     *\n* $520LHLA=BASEQ    HJE5520 941008 GMD:  Change HASM to HLASM         *\n*                                                                     *\n* $R01P010=PTM      HJE6601 950217 JMO:  PTM PQJ0012                  *\n*                                                                     *\n* $R03P010=ENHPSO   HJE6603 960521 J_K2: Segment ID for trailer page  *\n*                                                                     *\n* A000000-999999    CREATED FOR JES2 4.1.0                         @410\n***********************************************************************\n         TITLE 'PRINT/PUNCH Separator Exit -- PROLOG ($HASPGBL)'\n         COPY  $HASPGBL\n         TITLE 'PRINT/PUNCH Separator Exit -- PROLOG ($MODULE)'\nSTSCX01A $MODULE ENVIRON=JES2,                                 @430P270C\n               RMODE=ANY,                                      @430P270C\n               IBMJES2=SAMPLE,                                 @430P270C\n               TITLE='PRINT/PUNCH Separator Exit',                     C\n               CVT,                Generate MVS CVT dsect              C\n               DOTUM,              IEFDOTUM-Dyn. OUTPUT text unit map'gC\n               JESCT,              Generate MVS IEFJESCT dsect         C\n               RPL,                MVS IFGRPL dsect (for $BUFFER)      C\n               SJOKY,              IEFSJOKY-Dynamic OUTPUT key mapping C\n               SJTRC,              IEFSJTRC-SWBTUREQ return/reason codeC\n               (SJTRP,GEN),        IEFSJTRP-SWBTUREQ RETRIEVE parm listC\n               $BUFFER,            Buffer mapping (for $JCT)           C\n               $CADDR,             Common storage address list         C\n               $DCT,               Device Control Table                C\n               $DSCT,              DSCT (for APPC Output)      @430P329C\n               $ERA,               Error Recovery Area                 C\n               $HASPEQU,           General EQUATES                     C\n               $HCCT,              Common storage control table        C\n               $HCT,               Private storage control table       C\n               $HFAME,             File alloacation map (for $HCCT)    C\n               $JCT,               Job Control Table                   C\n               $JCTX,              JOB CONTROL TABLE                   C\n               $JOE,               Job Output Element                  C\n               $MIT,               Module information table            C\n               $MITETBL,           MIT entry table                     C\n               $PADDR,             Private storage address list        C\n               $PARMLST,           Parameter list values/equates       C\n               $PCE,               Processor control element           C\n               $PDDB,              Peripheral data definition block    C\n               $PRE,               Processor Recovery Element          C\n               $PSV,               Processor save area                 C\n               $SCAT,              Sysout class attribute (for $HCCT)  C\n               $USERCBS,           User defined Control Blocks         C\n               $XECB,              Extended ECB (for $HCCT)            C\n               ($XPL,GEN)          Exit parameter list         @430P270\n         TITLE 'PRINT/PUNCH Separator Exit -- Entry Prolog'\n***********************************************************************\n*                                                                     *\n*        EXIT01A - Produce a separator page.   Suppress production    *\n*                   of the default separator page.                    *\n*                   Suppress JESNEWS for job-continuation calls.      *\n*                                                                     *\n* FUNCTION :                                                          *\n*                                                                     *\n*        Produces a separator page that is almost identical           *\n*        to the default separator page produced in HASPPRPU           *\n*        ( see beginning prolog for explanation of the                *\n*        difference between the default separator and that            *\n*        produced in this exit ).                                     *\n*                                                                     *\n*        During a job continuation separator page call, the exit      *\n*        response byte is set to indicate to HASPPRPU that JESNEWS    *\n*        should not be produced.                                      *\n*                                                                     *\n* LINKAGE :                                                           *\n*                                                                     *\n*        This routine is entered via a $EXIT call in HASPPRPU.        *\n*        Control is returned via a $RETURN.                           *\n*                                                                     *\n* OPERATION :                                                         *\n*                                                                     *\n*        LOADMOD(STSCX01A)                                     @420P306\n*        EXIT(1)  ROUTINES=(EXIT01A),STATUS=ENABLED            @420P306\n*                                                                     *\n*                                                                     *\n* ENVIRONMENT :                                                       *\n*                                                                     *\n*        JES2 main task                                               *\n*                                                                     *\n* RECOVERY :                                                          *\n*                                                                     *\n*        A $ESTAE recovery environment is establish on entry to       *\n*        the exit routine.  The recovery routine releases all         *\n*        storage obtained in the exit and then percolates to          *\n*        the next higher level of recovery in HASPPRPU.               *\n*                                                                     *\n*        Debugging text is put in field PRETRACK in the Processor     *\n*        Recovery Element (PRE).  The contents of this field          *\n*        are put in the SDWA VRA ( variable recording area ).         *\n*                                                                     *\n*        HASPPRPU establishes an ESTAE around the call to this        *\n*        exit.  In the event of a program check, control will         *\n*        be passed to the label PGMCKMSG in HASPPRPU when that        *\n*        level of recovery is invoked.                                *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* REGISTER USAGE (ENTRY/EXIT) :                                       *\n*                                                                     *\n*    REG         VALUE ON ENTRY              VALUE ON EXIT            *\n*                                                                     *\n*    R0          N/A                         unchanged                *\n*    R1          Parameter list address      unchanged                *\n*    R2-R10      N/A                         unchanged                *\n*    R11         HCT Address                 unchanged                *\n*    R12         N/A                         unchanged                *\n*    R13         PCE Address                 unchanged                *\n*    R14         Return address              unchanged                *\n*    R15         Entry address               Return code              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*            PARAMETER LIST FOR EXIT 1  ( Mapped by $XPL )            *\n*                                                                     *\n*                                                                     *\n*    LABEL         DESCRIPTION                                        *\n*    -----         -----------                                        *\n*                                                                     *\n*    XPLID         Eyecatcher ('$XPL')                                *\n*    XPLLEVEL      Maintenance Level                                  *\n*    XPLXITID      Exit ID number (1)                                 *\n*    XPLEXLEV      Version number                                     *\n*    X001IND       Indicator byte                              @R01P010\n*    X001COND      Condition byte                              @R01P010\n*    X001RESP      Response byte                               @R01P010\n*    XPLSIZE       Length of parameter list including base section    *\n*                                                                     *\n*    X001DCT       DCT address                                        *\n*    X001JCT       JCT address                                        *\n*    X001JQE       JQE address                                        *\n*    X001WJOE      Work-JOE address                                   *\n*    X001CJOE      Characteristics-JOE address                        *\n*    X001PDDB      Address of first PDDB of JOE, or zero              *\n*    X001SWBT      SWBTU pointer list address for the first           *\n*                  PDDB in the JOE, or zero                           *\n*    X001NSWB      Number of SWBITs despooled                         *\n*    X001RSVD      Reserved for future use                            *\n*    X001HBUF      Address of HASP buffer for exit use                *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* REGISTER USAGE (INTERNAL) :                                         *\n*                                                                     *\n*    REG        VALUE                                                 *\n*                                                                     *\n*    R0         N/A                                                   *\n*    R1         Work register                                         *\n*    R2-R4      N/A                                                   *\n*    R5         Exit 1 work area address                              *\n*    R6         N/A                                                   *\n*    R7         Exit 1 parameter list address                         *\n*    R8         N/A                                                   *\n*    R9-R10     N/A                                                   *\n*    R11        HCT address                                           *\n*    R12        Local base address                                    *\n*    R13        PCE address                                           *\n*    R14-R15    Link/Work registers                                   *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* DATA AREA USAGE (INTERNAL) :                                        *\n*                                                                     *\n*    NAME          VALUE/DESCRIPTION                                  *\n*    ----          -----------------                                  *\n*                                                                     *\n*    EX1WORK       Exit 1 work area                                   *\n*    SEPDSECT      Separator page detail box DSECT                    *\n*    PAGELINE      Separator page output line                         *\n*                                                                     *\n*    X001IND       Indicator byte in XPL (exit parameter list) @R01P010\n*      X001JHDR       Indicator in X001IND for a job header    @R01P010\n*                     separator call                                  *\n*      X001JTLR       Indicator in X001IND for a job trailer   @R01P010\n*                     separator call                                  *\n*      X001JCNT       Indicator in X001IND for a               @R01P010\n*                     job-continuation separator call          @R01P010\n*    X001RESP       Response byte in XPL                       @R01P010\n*      X001DFSP       Indicator in X001RESP to suppress        @R01P010\n*                     production of the default separator page @R01P010\n*      X001JNWS       Indicator in X001RESP to suppress        @R01P010\n*                     production of JESNEWS                    @R01P010\n*                                                                     *\n*    $BUFFER       HASP buffer DSECT                                  *\n*      BUFDSECT       Start of buffer prefix area                     *\n*      BUFSTART       Start of buffer work area                       *\n*    $SID          System id                                          *\n*    DCTDEVN       Device name                                        *\n*    JCTJNAME      Job name from job card                             *\n*    JCTJOBID      System assigned job id                             *\n*    JCTPNAME      Programmer name from JOB card                      *\n*    JCTROOMN      Room, from JOB card                                *\n*    JOECRUID      Creator userid for data set                        *\n*    JOECURCL      JOE current SYSOUT class                           *\n*    JOENAME       JOE's output group name                            *\n*    JOEROUT       Route code                                         *\n*    JOEUSER       User id                                            *\n*                                                                     *\n*    DOADDRES      Dynamic output ADDRESS    key                      *\n*    DOBUILD       Dynamic output BUILDING   key                      *\n*    DODEPT        Dynamic output DEPARTMENT key                      *\n*    DONAME        Dynamic output NAME       key                      *\n*    DOROOM        Dynamic output ROOM       key                      *\n*    DOTITLE       Dynamic output TITLE      key                      *\n*                                                                     *\n*    DOCNUNIT      Text unit  ( TU ) mapping                          *\n*    DOCNTFLD      TU length/parameter pairs mapping                  *\n*    SJTRP         SWBTUREQ RETRIEVE parameter list                   *\n*                                                                     *\n*    PCEUSER0      Address of storage obtained for exit work area     *\n*    PCEUSER1      Count of number of times that 2nd level recovery   *\n*                  has been entered                                   *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* RETURN CODES ( R15 ON EXIT ):                                       *\n*                                                                     *\n*        0 - Continue normal processing                               *\n*                                                                     *\n*                                                                     *\n* OTHER CONSIDERATIONS :                                              *\n*                                                                     *\n*        $WAIT can occur.                                             *\n*                                                                     *\n***********************************************************************\n         TITLE 'PRINT/PUNCH Separator Exit -- Entry'\n***********************************************************************\n*                                                                     *\n*        Entry point to routine EXIT01A.                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEXIT01A  $ENTRY BASE=R12           ESTABLISH ENTRY POINT\n         SPACE 2\n        $SAVE  TRACE=YES,NAME=EXIT01A      Save callers registers\n         SPACE 2\n         LR    R12,R15             Set local base\n         SPACE 1\n         LR    R7,R1               Establish addressability\n         USING XPL,R7                  to exit parameter list\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Establish an ESTAE recovery environment                      *\n*                                                                     *\n*        Put debugging data in Processor Recovery Element ( PRE )     *\n*        - maximum 32 characters                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n        $ESTAE RECADDR==A(EX1RECV),NAME=STSCX01A,RETRY=RELWORKA,       C\n               BASE=(R12)          Establish ESTAE environment\n         SPACE 2\n         L     R14,PCEPRE          Get PRE address from PCE\n         USING PRE,R14             Establish addressability\n         SPACE 1\n         MVC   PRETRACK(L'DEBUGMSG),DEBUGMSG     Put debug data in PRE\n         SPACE 1\n         MVI   PRELOGLN,L'DEBUGMSG     Put length of debug data in PRE\n         SPACE 2\n         DROP  R14                 Drop PRE addressability\n         TITLE 'PRINT/PUNCH Separator Exit -- Main Routine'\n*------------------------------------------------------------* @430P050\n*                                                            * @430P050\n*        If the SEP= parameter on the printer initial-       * @430P050\n*        ization statement is currently set to NO, or the    * @430P050\n*        suppress flag has been set by previous code,        * @430P050\n*        do not build a separator page.                      * @430P050\n*                                                            * @430P050\n*------------------------------------------------------------* @430P050\n         SPACE 2                                               @430P050\n         TM    X001RESP,X001DFSP   Suppress Separators?        @R01P010\n         BO    ENDMAIN             Yes, exit                   @430P050\n         SPACE 2                                               @430P050\n*---------------------------------------------------------------------*\n*                                                                     *\n*        If this is a job continuation call, set the exit             *\n*        response byte to indicate that the production of             *\n*        JESNEWS should be suppressed.                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         TM    X001IND,X001JCNT    Job continuation call?      @R01P010\n         BZ    NOTJCNT               No, go build the separator page\n         SPACE 1\n         OI    X001RESP,X001JNWS   Suppress JESNEWS            @R01P010\n         SPACE 2\nNOTJCNT  DS    0H                  Fall thru to build separator page\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Storage must be obtained for a work area to be used          *\n*        by the routine PRODSEP that produces the separator           *\n*        page.                                                        *\n*        The exit work area dsect ( EX1WORK ) is mapped over          *\n*        this storage to store and extract the data used in the       *\n*        PRODSEP routine.                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Check if we have already obtained storage for the            *\n*        exit work area ( as may be the case during a RETRY           *\n*        after a program check in the exit ).  If so, reuse           *\n*        it.  Otherwise issue a $GETWORK to get storage.  Save        *\n*        the address in PCEUSER0.                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         ICM   R1,B'1111',PCEUSER0     Check if already got storage\n         BZ    GETEX1W                   No storage, so go get some\n         XC    PCEUSER0,PCEUSER0       Clear PCEUSER0 field\n         SPACE 1\n         CLC   0(4,R1),=C'EX1W'    Is this our work area storage ?\n         BNE   GETEX1W               No, go get storage\n         B     GOTEX1W               Yes, branch around GETWORK\n         SPACE 2\nGETEX1W  DS    0H                  Get storage for work area\n         SPACE 1\n         LA    R1,(((EX1WKLEN+3)/4)+1)   Get the length of the EX1WORK C\n                                           DSECT + eyecatcher in words\n         SPACE 1\n        $GETWORK WORDS=(R1),USE=EX1W,ERRET=RELWORKA  Get storage for   C\n                                               exit work area (EX1WORK)\n         SPACE 1\nGOTEX1W  DS    0H                  Got storage\n         EJECT\n         ST    R1,PCEUSER0         Save address in PCE user field\n         LA    R5,4(,R1)           Add 4 for eyecatcher and save addr\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Call the PRODSEP routine to build and print a separator      *\n*        page.  Suppress production of the default separator page     *\n*        only if PRODSEP returns a return code of zero.               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n        $CALL  PRODSEP             Call routine to produce separator\n         SPACE 2\n         LTR   R15,R15             Check return code from PRODSEP\n         BNZ   RELWORKA            Bypass suppressing def. separator\n         SPACE 1\n         OI    X001RESP,X001DFSP   Suppress def separator      @R01P010\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Release exit work area storage                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\nRELWORKA DS    0H                      Release work area storage\n         SPACE 1\n         ICM   R1,B'1111',PCEUSER0     Load work area address\n         BZ    ENDMAIN                 Return to caller if no storage\n         XC    PCEUSER0,PCEUSER0       Clear PCEUSER0 field\n         SPACE 1\n         CLC   0(4,R1),=C'EX1W'    Is this storage ours?\n         BNE   ENDMAIN               No, branch around RETWORK\n         SPACE 1\n        $RETWORK (R1)              Release work area storage\n         SPACE 2\nENDMAIN  DS    0H                  End of routine EXIT01A\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Cancel $ESTAE recovery environment                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n        $ESTAE CANCEL              Cancel ESTAE environment\n         TITLE 'PRINT/PUNCH Separator Exit -- Return'\n***********************************************************************\n*                                                                     *\n*        Return to the caller.                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n        $RETURN RC=0               Return to caller with RC=0\n         SPACE 2\nDEBUGMSG DC    C'ESTAE SET UP IN SAMPLE EXIT 1'    Debugging text\n         SPACE 2\n         LTORG ,                   Define literal origin\n         SPACE 1\n         DROP  R7,R12              Drop addressabilities\n         TITLE 'PRODSEP  -- Produce a separator page detail box'\n***********************************************************************\n*                                                                     *\n*        PRODSEP  - Produce a separator page detail box.              *\n*                                                                     *\n* FUNCTION :                                                          *\n*                                                                     *\n*        This subroutine produces a separator page detail box         *\n*        that is identical to that on the default separator           *\n*        page produced by HASPPRPU during print/punch processing.     *\n*                                                                     *\n*        The SWBTUREQ retrieve service is used to extract             *\n*        requested values from an OUTPUT statement and return         *\n*        them in a contiguous string.  The service is passed a        *\n*        list of keys that identify the keywords ( TITLE, NAME,       *\n*        ROOM, BUILDING, DEPARTMENT and ADDRESS ) whose values        *\n*        are to be extracted.                                         *\n*                                                                     *\n*        Each value in the string is represented in text unit (TU)    *\n*        format, which means that it is preceded by its key and       *\n*        length.                                                      *\n*                                                                     *\n* LINKAGE :                                                           *\n*                                                                     *\n*      Accessed via $CALL                                             *\n*      Returned via $RETURN                                           *\n*                                                                     *\n*                                                                     *\n* REGISTER USAGE (ENTRY/EXIT) :                                       *\n*                                                                     *\n*    REG         VALUE ON ENTRY              VALUE ON EXIT            *\n*                                                                     *\n*    R0-R4       N/A                         unchanged                *\n*    R5          Exit 1 work area address    unchanged                *\n*    R6          N/A                         unchanged                *\n*    R7          Parameter list address      unchanged                *\n*    R8-R10      N/A                         unchanged                *\n*    R11         HCT Address                 unchanged                *\n*    R12         Local base address          unchanged                *\n*    R13         PCE Address                 unchanged                *\n*    R14         Return address              unchanged                *\n*    R15         Entry address               Return code (see below)  *\n*                                                                     *\n*                                                                     *\n* RETURN CODE ( R15 ON EXIT ):                                        *\n*                                                                     *\n*        0 - Processing successful;  Separator page produced          *\n*                                                                     *\n*        4 - Processing unsucccessful;  Separator page not produced   *\n*                                                                     *\n*                                                                     *\n* OTHER CONSIDERATIONS :                                              *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING PRODSEP,R12         Establish routine addressability\n         USING XPL,R7              Establish XPL addressability\n         USING EX1WORK,R5          Establish work area addressability\n         EJECT\n         SPACE 2\nPRODSEP $SAVE  ,                   Save the caller's registers\n         SPACE 3\n         LR    R12,R15             Set local base\n         SPACE 1\n         CLC   X001SWBT,$ZEROS     Are there any SWBIT's ?\n         BE    REQOK               No, branch around SWBTUREQ RETRIEVE C\n                                            service call\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Storage must be obtained for the SWBTUREQ RETRIEVE           *\n*        service to provide an area to return the retrieved           *\n*        TUs and an area to set up a Key List in.  Pointers           *\n*        to the TUs requested by the specific keys will be            *\n*        returned by the service to the Key List area if they         *\n*        exist.  Working storage for SWBTUREQ service is also         *\n*        obtained.                                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n*---------------------------------------------------------------------*\n*        Get storage for output TU area                               *\n*---------------------------------------------------------------------*\n         SPACE 1\n         ICM   R1,B'1111',EX1TUADR     Check if already got storage\n         BZ    GETOTUA                   No storage, so go get some\n         XC    EX1TUADR,EX1TUADR       Clear out save area\n         SPACE 1\n         CLC   0(4,R1),=C'OTUA'    Is this storage ours?\n         BNE   GETOTUA               No, go get storage\n         B     GOTOTUA               Yes, branch around GETWORK\n         SPACE 2\nGETOTUA  DS    0H                  Get storage for work area\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Of the 6 TU's that we are interested in, 5 have a single     *\n*        parameter ( TITLE, ROOM, NAME, DEPT, BUILDING ), whereas     *\n*        ADDRESS has up to 4 parameters.                              *\n*                                                                     *\n*        The total output TU area required is ...                     *\n*                                                                     *\n*        5*(size of one-parameter TU) + (size of four-parameter TU)   *\n*        |                               |                            *\n*        |                               |                            *\n*        |                               +--> for ADDRESS             *\n*        |                                                            *\n*        +--> for  TITLE, ROOM, NAME, DEPT and BUILDING               *\n*                                                                     *\n*                                                                     *\n*        where a TU mapping is defined as follows:                    *\n*                                                                     *\n*        TU key                              .....   2 bytes          *\n*        Number of length/parameter pairs    .....   2 bytes          *\n*  +-- { Length of first (or only) parameter .....   2 bytes          *\n*  |   { First (or only) parameter           .....  60 bytes ( max )  *\n*  |              .                                                   *\n*  |              .                                                   *\n*  |              .                                                   *\n*  +----> (repeated for multiple parameter TU)                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         LA    R1,((5*(2+2+2+60))+(2+2+4*(2+60)))                      C\n                                   Size of current TU area\n         STH   R1,EX1TUSZ          Save the size\n         LA    R1,3(,R1)           Convert size from\n         SRL   R1,2                  bytes to words\n         LA    R1,1(,R1)           Add 1 for the eyecatcher\n         SPACE 1\n        $GETWORK WORDS=(R1),USE=OTUA,ERRET=NOSEPRT    Get storage for  C\n                                                   the TU output area\n         SPACE 1\nGOTOTUA  DS    0H                  Got storage\n         SPACE 1\n         LA    R1,4(,R1)           Add 4 for eyecatcher\n         ST    R1,EX1TUADR         Save the address of the TU output   C\n                                     area\n         EJECT\n*---------------------------------------------------------------------*\n*    Get storage for Key / TU pointer list                            *\n*---------------------------------------------------------------------*\n         SPACE 1\n         ICM   R1,B'1111',EX1KYLST     Check if already got storage\n         BZ    GETKEYL                   No storage, so go get some\n         XC    EX1KYLST,EX1KYLST       Clear out save area\n         SPACE 1\n         CLC   0(4,R1),=C'KEYL'    Is this storage ours?\n         BNE   GETKEYL               No, go get storage\n         B     GOTKEYL               Yes, branch around GETWORK\n         SPACE 2\nGETKEYL  DS    0H                  Get storage for work area\n         SPACE 1\n         LA    R1,(((6*SJTRKLEN)+3)/4+1)   Size of Key/TU ptr list in  C\n                                                 words\n         SPACE 1\n        $GETWORK WORDS=(R1),USE=KEYL,ERRET=NOSEPRT    Get storage for  C\n                                                    the Key / TU list\n         SPACE 1\nGOTKEYL  DS    0H                  Got storage\n         SPACE 1\n         LA    R1,4(,R1)           Add 4 for eyecatcher\n         ST    R1,EX1KYLST         Save the address of the Key / TU    C\n                                     List\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Insert each delivery/identification OUTPUT JCL               *\n*        parameter key, in the keys list.                             *\n*        If any of these parameters were specified by the             *\n*        user, a pointer to the appropriate TU ( text unit )          *\n*        will be returned by the SWBTUREQ RETIREVE service.           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         USING SJTRKEYL,R4         Establish\n         L     R4,EX1KYLST             addressability\n         SPACE 1\n         MVC   SJTRKYID+KYLSTTL,=Y(DOTITLE)       Title Key\n         MVC   SJTRKYID+KYLSTNM,=Y(DONAME)        Name Key\n         MVC   SJTRKYID+KYLSTRM,=Y(DOROOM)        Room Key\n         MVC   SJTRKYID+KYLSTBL,=Y(DOBUILD)       Building Key\n         MVC   SJTRKYID+KYLSTDP,=Y(DODEPT)        Dept key\n         MVC   SJTRKYID+KYLSTAD,=Y(DOADDRES)      Address Key\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Initialize the SWBTUREQ REQUEST=RETRIEVE parameter           *\n*        list. Set storage length to 0 - we dont know exactly how     *\n*        much storage we need for the SWBTUREQ Service Work Area.     *\n*        The service will return the Required Size which we will      *\n*        then obtain via $GETWORK (in MORESTOR routine).              *\n*---------------------------------------------------------------------*\n         SPACE 1\n         USING SJTRP,R3            Establish addressability\n         SPACE 1\n         LA    R3,EX1RETPL         Get the address of the              C\n                                     RETRIEVE parameter list\n         SPACE 1\n         XC    SJTRP(SJTRLGTH),SJTRP        Clear the parameter list\n         MVC   SJTRID,=A(SJTRCID)  Parameter list ID\n         MVI   SJTRVERS,SJTRCVER   Parameter list version\n         LA    R1,SJTRLGTH         Parameter\n         STH   R1,SJTRLEN            list length\n         MVC   SJTRSTOR,$ZEROS     Zero storage address        @430P329\n         MVC   SJTRSTSZ,$ZEROS     Zero storage length         @430P329\n         MVC   SJTRSWBN,X001NSWB   Number of pointers in SWBTU list\n         MVC   SJTRSWBA,X001SWBT   Address of SWBTU pointer list\n         MVC   SJTRAREA,EX1TUADR   Address of the output area          C\n                                     for contiguous text units\n         MVC   SJTRSIZE,EX1TUSZ    Size of output area for TUs\n         MVC   SJTRKIDN,$H6        Number of keys in the Key/TU        C\n                                     Pointer list\n         MVC   SJTRKIDL,EX1KYLST   Address of Key List\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Issue the SWBTUREQ REQUEST=RETRIEVE macro                    *\n*        ------------------------------------------                   *\n*                                                                     *\n*        The service returns with a zero return code if               *\n*        processing was successful.                                   *\n*                                                                     *\n*        If the current working storage size ( SJTRSTSZ ) is          *\n*        less than the required size for the service, then            *\n*        the service returns the following values:                    *\n*               R15        =  4 (SJTRCSIZ)                            *\n*               SJTRREAS   =  4 (SJTRWSZR)                            *\n*               SJTRWKSZ   =  amount of working storage required      *\n*                             for the SWBTUREQ REQUEST=RETRIEVE       *\n*                             service.                                *\n*                                                                     *\n*        If none of the requested items were found, then the          *\n*        service returns the following values:                        *\n*               R15        =  4 (SJTRCSIZ)                            *\n*               SJTRREAS   =  100 (SJTRNOKY)                          *\n*                                                                     *\n*        If R15 > 4, then an error occurred in the service.           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nRETRYREQ DS    0H\n         ST    R3,EX1PLPTR         Pass SWBTUREQ RETRIEVE parm list\n         LA    R1,EX1PLPTR           address by indirect addressing\n         SPACE 2\n         SWBTUREQ REQUEST=RETRIEVE  Issue the SJF macro\n         SPACE 2\n         STH   R15,EX1SWBRC        Save the return code\n         SPACE 1\n         CLC   EX1SWBRC,$H4             Check return code\n         BL    REQOK               Service successful, produce sep.\n         BH    NOSEPRT             Error, don't produce separator\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        If working storage is too small, call MORESTOR to            *\n*        release the current storage ( if any ), get storage          *\n*        for the amount that is required, and issue the               *\n*        service call again.                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         CLC   SJTRREAS,=A(SJTRWSZR)    Working storage too small?\n         BNE   CHECKEYS                 No, check if no keys matched\n         LH    R4,SJTRSTSZ         Current storage size\n         L     R1,SJTRSTOR         Current storage address\n         LH    R2,SJTRWKSZ         Required storage size\n         SPACE 1\n        $CALL  MORESTOR            Obtain required storage\n         SPACE 1\n         LTR   R15,R15             Check return code from MORESTOR\n         BNZ   NOSEPRT             If non-zero don't produce separator\n         SPACE 1\n         LA    R1,4(,R1)           Add 4 for eyecatcher\n         ST    R1,EX1SRWA          Save working storage address in     C\n                                       exit work area (EX1WORK)\n         MVC   EX1SRWL,SJTRWKSZ    Set the length in EX1WORK\n         MVC   SJTRSTOR,EX1SRWA    Reset WS addr in parm list\n         MVC   SJTRSTSZ,EX1SRWL    Reset WS size in parm list\n         B     RETRYREQ            Branch to issue macro again\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Check if reason for RC=4 from SWBTUREQ service is that       *\n*        none of the requested values were found.                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\nCHECKEYS CLC   SJTRREAS,=A(SJTRNOKY)   Did any keys match?\n         BE    REQOK                     No, produce separator anyway\n         B     NOSEPRT                 Go set error return code\n         SPACE 2\nREQOK    DS    0H\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Call PRINTBLK routine to print the block letters on the      *\n*        separator page.                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n        $CALL  PRINTBLK            Call routine to print block letters\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Call BUILDBOX routine to build and print the detail          *\n*        box on the separator page.                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n        $CALL  BUILDBOX            Call routine to build detail box\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to the caller.                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         SLR   R6,R6               Set return code = 0         @430P329\n         B     GOBACK              Branch to return to caller\n         SPACE 2\nNOSEPRT  LA    R6,4                Set return code = 4         @430P329\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        The TU output area, the Keylist/Pointer area and the         *\n*        working storage area for the SWBTUREQ service are no         *\n*        longer needed so their respective work areas are             *\n*        returned.                                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2                                               @430P329\n*---------------------------------------------------------------------*\n*        Release TU output area storage                               *\n*---------------------------------------------------------------------*\n         SPACE 1                                               @430P329\nGOBACK   ICM   R1,B'1111',EX1TUADR  Load TU output area addr   @430P329\n         BZ    CHKYLST             Branch if no TU storage     @430P329\n         S     R1,$F4              Subtract 4 for eyecatcher   @430P329\n         SPACE 1                                               @430P329\n         XC    EX1TUADR,EX1TUADR   Set address to zero         @430P329\n         SPACE 1                                               @430P329\n        $RETWORK (R1)              Release the TU storage      @430P329\n         SPACE 2                                               @430P329\n*---------------------------------------------------------------------*\n*        Release Key/TU pointer list storage area                     *\n*---------------------------------------------------------------------*\n         SPACE 1                                               @430P329\nCHKYLST  ICM   R1,B'1111',EX1KYLST  Load Key/TU ptr list addr  @430P329\n         BZ    CHKSRWA             Branch if no Key/TU storage @430P329\n         S     R1,$F4              Subtract 4 for eyecatcher   @430P329\n         SPACE 1                                               @430P329\n         XC    EX1KYLST,EX1KYLST   Set address to zero         @430P329\n         SPACE 1                                               @430P329\n        $RETWORK (R1)              Release the keylist storage @430P329\n         SPACE 2                                               @430P329\n*---------------------------------------------------------------------*\n*        Release SWBTUREQ RETRIEVE service work area storage          *\n*---------------------------------------------------------------------*\n         SPACE 1                                               @430P329\nCHKSRWA  ICM   R1,B'1111',EX1SRWA  Load service work area addr @430P329\n         BZ    ENDSEP              Branch if no work storage   @430P329\n         S     R1,$F4              Subtract 4 for eyecatcher   @430P329\n         SPACE 1                                               @430P329\n         XC    EX1SRWA,EX1SRWA     Set address to zero         @430P329\n         SPACE 1                                               @430P329\n        $RETWORK (R1)              Release the working storage @430P329\n         SPACE 1                                               @430P329\nENDSEP  $RETURN RC=(R6)            Return to the caller        @430P329\n         SPACE 2\n         LTORG ,                   DEFINE LITERAL ORIGIN\n         SPACE 1\n         DROP  R3,R4,R5,R7,R12     Drop register addressabilities\n         TITLE 'MORESTOR -- Get more working storage for SWBTUREQ RETRIC\n               EVE service'\n***********************************************************************\n*                                                                     *\n*        MORESTOR - Get more working storage for the SWBTUREQ         *\n*                   RETRIEVE service.                                 *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This subroutine is called to release the current SWBTUREQ    *\n*        working storage and obtain the amount required by the        *\n*        SWBTUREQ RETRIEVE service.                                   *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*      Accessed via $CALL                                             *\n*      Returned via $RETURN                                           *\n*                                                                     *\n*                                                                     *\n*   REGISTER USAGE (ENTRY/EXIT):                                      *\n*                                                                     *\n*        REG          VALUE ON ENTRY            VALUE ON EXIT         *\n*                                                                     *\n*        R0           N/A                       unchanged             *\n*        R1           Current working           new working           *\n*                       storage address           storage address     *\n*        R2           Required working          unchanged             *\n*                       storage size                                  *\n*        R3           N/A                       unchanged             *\n*        R4           Current working           unchanged             *\n*                       storage size                                  *\n*        R5-R13       N/A                       unchanged             *\n*        R14          Return address            unchanged             *\n*        R15          Entry address             Return code           *\n*                                                                     *\n*                                                                     *\n*   RETURN CODE ( R15 ON EXIT ):                                      *\n*                                                                     *\n*        0 - Processing successful; More storage obtained             *\n*                                                                     *\n*        4 - Processing unsucccessful                                 *\n*                                                                     *\n*   OTHER CONSIDERATIONS :                                            *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING MORESTOR,R12        Establish addressability\n         EJECT\nMORESTOR $SAVE ,                   Save the caller's registers\n         SPACE 1\n         LR    R12,R15             Set local base\n         SPACE 1\n         LTR   R4,R4               Is the current working storage      C\n                                     size equal to zero ?\n         BZ    GETSTOR                 No, skip the retwork\n         LTR   R1,R1               Is the current working storage      C\n                                     addr equal to zero?\n         BZ    GETSTOR                 No, skip the retwork\n         S     R1,$F4              Subtract 4 for the eyecatcher\n         SPACE 1\n        $RETWORK (R1)              Release the current working storage\n         SPACE 1\nGETSTOR  DS    0H\n         LA    R2,3(,R2)           Convert the size in bytes\n         SRL   R2,2                   into the size in words\n         LA    R2,1(,R2)           Add 1 for the eyecatcher\n         SPACE 1\n        $GETWORK WORDS=(R2),USE=SRWA,ERRET=NOMOREST    Get required    C\n                                                     working storage\n         SPACE 2\n        $STORE R1                  Pass the new working storage        C\n                                     address back to the caller\n         LA    R15,0               Set return code = 0\n         SPACE 2\n         B     ENDMORE             Go return to caller\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to the caller.                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nNOMOREST LA    R15,4               Set return code = 4\n         B     ENDMORE             Go return to caller\n         SPACE 2\nENDMORE $RETURN RC=(R15)           Return to the caller\n         SPACE 1\n         LTORG ,                   Define literal origin\n         SPACE 1\n         DROP  R12                 Drop local base register\n         TITLE 'PRINTBLK -- Print the separator page block letters'\n***********************************************************************\n*                                                                     *\n*        PRINTBLK - Print the job name and job id in block            *\n*                   letters on the separator page.                    *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This routine is called to print the job name and job         *\n*        id in block letters on the separator page.                   *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via $CALL                                           *\n*        Returned via $RETURN                                         *\n*                                                                     *\n*                                                                     *\n*   REGISTER USAGE (ENTRY/EXIT):                                      *\n*                                                                     *\n*        REG          VALUE ON ENTRY            VALUE ON EXIT         *\n*                                                                     *\n*        R0-R4        N/A                         Unchanged           *\n*        R5           EX1WORK address             Unchanged           *\n*        R6           N/A                         Unchanged           *\n*        R7           Exit 1 parm list addr       Unchanged           *\n*        R8-R10       N/A                         Unchanged           *\n*        R11          HCT address                 Unchanged           *\n*        R12          Local base address          Unchanged           *\n*        R13          PCE address                 Unchanged           *\n*        R14          Return address              Unchanged           *\n*        R15          Entry address               Unchanged           *\n*                                                                     *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING PRINTBLK,R12        Establish local addressability\n         USING XPL,R7              Establish parm list addressability\n         USING JCT,R10             Establish JCT addressability\n         EJECT\nPRINTBLK $SAVE ,                   Save the caller's registers\n         SPACE 2\n         LR    R12,R15             Set local base\n         L     R10,X001JCT         Load JCT address\n         SPACE 1                                               @430P329\n         L     R3,X001DSCT         Load DSCT Address           @430P329\n         SPACE 1                                               @430P329\n         USING DSCT,R3             Establish Addressability    @430P329\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Print the job name in block letters ( slanted ).             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         LTR   R3,R3               Is the DSCT Valid?          @430P329\n         BZ    NOTDSCT1            No, use JCT Jobname         @430P329\n         LA    R0,DSJBN            Address of TP Job Name      @430P329\n         B     YESDSCT1                                        @430P329\n         SPACE 1                                               @430P329\nNOTDSCT1 LA    R0,JCTJNAME         Get address of jobname      @430P329\n         SPACE 1                                               @430P329\nYESDSCT1 L     R1,X001HBUF         Get buffer address          @430P329\n         SPACE 1                                               @510P214\n        $SEPPDIR (R1)         Send a PDIR in case a SNA REMOTE @510P214\n         SPACE 2\n        $PBLOCK DATA=(R0),BUFFER=(R1),SLANT=YES     Call routine to    C\n                                                  print block letters\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Print a blank line                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         L     R4,X001HBUF         Load buffer address\n         USING SEPDSECT,R4         Establish buffer addressability\n         SPACE 1\n         LA    R4,BUFSTART-BFPDSECT(,R4)     Get address of work space C\n                                                in buffer\n         SPACE 1\n         MVI   PAGELINE,C' '                 Put a blank in buffer\n         LA    R0,1                          Set length to 1\n         SPACE 2\n        $PRPUT DATA=(R4),LEN=(R0),WAIT=YES   Print a blank line\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Print the job id in block letters ( without slant ).         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         LTR   R3,R3               Is the DSCT Valid?          @430P329\n         BZ    NOTDSCT2            No, use JCT JOBID           @430P329\n         LA    R0,DSWKID            Address of TP Work ID      @430P329\n         B     YESDSCT2                                        @430P329\n         SPACE 1                                               @430P329\nNOTDSCT2 LA    R0,JCTJOBID         Get address of Job ID       @430P329\n         SPACE 1                                               @430P329\nYESDSCT2 L     R1,X001HBUF         Get buffer address          @430P329\n         SPACE 2\n        $PBLOCK DATA=(R0),BUFFER=(R1)      Call routine to print       C\n                                                 block letters\n         SPACE 2\n         DROP  R3                  Drop DSCT                   @430P329\n         SPACE 1                                               @430P329\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Print a blank line                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         L     R4,X001HBUF         Load buffer address\n         LA    R4,BUFSTART-BFPDSECT(,R4)     Get address of work space C\n                                                in buffer\n         SPACE 1\n         MVI   PAGELINE,C' '                 Put a blank in buffer\n         LA    R0,1                          Set length to 1\n         SPACE 2\n        $PRPUT DATA=(R4),LEN=(R0),WAIT=YES   Print a blank line\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to the caller.                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n        $RETURN ,                  Return to the caller\n         SPACE 1\n         LTORG ,                   Define literal origin\n         SPACE 1\n         DROP  R4,R7,R10,R12       Drop addressabilities\n         TITLE 'BUILDBOX -- Build and print each line of the separator C\n               page detail box'\n***********************************************************************\n*                                                                     *\n*        BUILDBOX - Build and print each line of the separator        *\n*                   page detail box.                                  *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This sub-routine is called to build and print each           *\n*        line of the separator page detail box.                       *\n*                                                                     *\n*        Addressability to the HASP buffer work space offset          *\n*        is established and the routine CLRLINE is called to          *\n*        clear the separator page line buffer.                        *\n*                                                                     *\n*        The routine PUTFRAME is then called to set up the            *\n*        detail box frame in the top line and the macro $PRPUT        *\n*        is invoked to print it.                                      *\n*                                                                     *\n*        CLRLINE is called to clear the next line and reset           *\n*        the buffer work space pointer.  The detail box               *\n*        information is then inserted in the line buffer and          *\n*        $PRPUT is invoked to print this line.  This process          *\n*        is repeated for all subsequent lines of the detail           *\n*        box.                                                         *\n*                                                                     *\n*        PUTFRAME is called to set up the detail box frame in         *\n*        the bottom line and $PRPUT is called to print it.            *\n*                                                                     *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via $CALL                                           *\n*        Returned via $RETURN                                         *\n*                                                                     *\n*        INPUT:                                                       *\n*                R7           -  Address of Exit 1 parameter list     *\n*                SEPDSECT     -  Separator page line/box DSECT        *\n*        OUTPUT:                                                      *\n*                The separator page detail box is produced.           *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*   REGISTER USAGE (ENTRY/EXIT):                                      *\n*                                                                     *\n*        REG          VALUE ON ENTRY            VALUE ON EXIT         *\n*                                                                     *\n*        R0-R4        N/A                         Unchanged           *\n*        R5           EX1WORK address             Unchanged           *\n*        R6           N/A                         Unchanged           *\n*        R7           Exit 1 parm list addr       Unchanged           *\n*        R8-R10       N/A                         Unchanged           *\n*        R11          HCT address                 Unchanged           *\n*        R12          Local base address          Unchanged           *\n*        R13          PCE address                 Unchanged           *\n*        R14          Return address              Unchanged           *\n*        R15          Entry address               Unchanged           *\n*                                                                     *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING BUILDBOX,R12        Establish local addressability\n         USING XPL,R7              Establish parm list addressability\n         USING EX1WORK,R5          Establish work area addressability\n         USING SEPDSECT,R4         Establish addr'ty to HASP buffer\n         EJECT\nBUILDBOX $SAVE ,                   Save the caller's registers\n         SPACE 1\n         LR    R12,R15             Set local base\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT TOP LINE                              *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n        $CALL  PUTFRAME            Build top line of detail box\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Call PRPUT macro C\n                                                 to print the top line\n         SPACE 1\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT A BLANK LINE                          *\n*         ( FRAME CHARACTERS IN COL 1 AND COL 80 )                    *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES    Print a blank line\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT JOB ID LINE                           *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         L     R10,X001JCT         Establish addressability\n         USING JCT,R10                to JCT\n         SPACE 1\n         L     R3,X001DSCT         Load DSCT Address           @430P329\n         USING DSCT,R3             Establish Addressability    @430P329\n         SPACE 1                                               @430P329\n         MVC   BOXDESC,LBJOBID     Put Job ID label in line    @430P329\n         SPACE 1                                               @430P329\n         LTR   R3,R3               Is the DSCT Valid?          @430P329\n         BZ    NODSCT1             No, use JCT JobID           @430P329\n         MVC   BOXJOBID,DSWKID     Use TP Work ID              @430P329\n         B     YEADSCT1                                        @430P329\n         SPACE 1                                               @430P329\nNODSCT1  MVC   BOXJOBID,JCTJOBID   Use JCT JOBID in line       @430P329\n         SPACE 1\n*---------------------------------------------------------------------*\n*               Segment ID                                            *\n*---------------------------------------------------------------------*\n         SPACE 1\nYEADSCT1 ICM   R6,B'1111',X001PDDB Addr of first PDDB          @R03P010\n         BZ    JOBIDLN               Skip if job trailer exit  @R03P010\n         SPACE 1                                               @R03P010\n         USING PDB,R6              Declare PDDB addressability @R03P010\n         SPACE 1\n         ICM   R2,B'1111',PDBSEGID      Check for segment ID\n         BZ    JOBIDLN             Branch to print line if no seg id\n         MVC   BOXSGLBL,LBSEGID          Fill in Segment ID label\n         SPACE 1\n         CL    R2,=F'99999'        Is segment greater than 99999?\n         BH    BADSEGID                Yes, segment is invalid\n         SPACE 1\n         CVD   R2,EX1CVDWA            Convert the\n         L     R15,=A(SEGMASK)          Segment number\n         MVC   EX1SEGWA,0(R15)            from binary\n         EDMK  EX1SEGWA,EX1CVDWA+5           to EBCDIC\n         SPACE 1\n         LA    R2,EX1SEGWA+L'EX1SEGWA-1    Truncate all leading\n         SLR   R2,R1                          zeros from Segment\n         EX    R2,EXECSEG          Execute the move\n         B     JOBIDLN             Skip over the move\n         SPACE 1\nEXECSEG  MVC   BOXSGINF(*-*),0(R1)     *** EXECUTE *** Seg Number\n         SPACE 1\nBADSEGID MVC   BOXSGINF,=C'*****'       Show segment is invalid\n         SPACE 1\nJOBIDLN $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 2\n         DROP  R6                  Drop PDDB addressability\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT JOB NAME LINE                         *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBJOBNAM    Job Name label              @430P329\n         SPACE 1                                               @430P329\n         LTR   R3,R3               Is the DSCT Valid?          @430P329\n         BZ    NODSCT2             No, use JCT Jobname         @430P329\n         MVC   BOXJNAME,DSJBN      Use TP Job Name             @430P329\n         B     YEADSCT2                                        @430P329\nNODSCT2  MVC   BOXJNAME,JCTJNAME   Fill in Job Name field      @430P329\n         SPACE 1\nYEADSCT2 $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES Produce line @430P329\n         SPACE 1                                               @430P329\n         DROP  R3                  Drop DSCT                   @430P329\n         SPACE 2                                               @430P329\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT USER ID LINE                          *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         L     R9,X001WJOE         Establish work-JOE\n         USING JOE,R9                 addressability\n         SPACE 1\n         MVC   BOXDESC,LBUSERID          User ID label\n         MVC   BOXCRUID,JOECRUID         Fill in USER ID field\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT SYSOUT CLASS LINE                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBSYSCL           SYSOUT Class label\n         MVC   BOXSYSCL,JOECURCL         Fill in SYSYOUT class\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 2\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT OUTPUT GROUP LINE                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBOUTGRP          Output Group label\n         MVC   BOXINFO(L'JOENAME),JOENAME    Fill in JOE Output Name\n         LA    R2,BOXINFO          Point to start of OUTGRP name\n         LA    R6,L'JOENAME        Set length of OUTGRP name\n         SPACE 1\nNAMELOOP CLI   0(R2),C' '          Is this character a blank?\n         BE    SETSYNTX              Yes, go set syntax\n         LA    R2,1(,R2)             No, point to next character\n         BCT   R6,NAMELOOP         Go find end of outgrp name\n         SPACE 1\nSETSYNTX MVI   0(R2),C'.'          Set syntax for separator\n         LA    R2,1(,R2)           Set pointer for separator\n         LH    R0,JOEID1           1st qualifier to convert\n         CVD   R0,EX1CVDWA         Convert to decimal\n         SPACE 1\n         MVC   EX1CVDWA-1(6),=X'402020202120'    Move mask for result\n         ED    EX1CVDWA-1(6),EX1CVDWA+5          Convert to EBCDIC\n         SPACE 1\n         LA    R6,4                Set for                     @510APAR\n         LA    R1,EX1CVDWA           execute\n         EJECT\nJID1LOOP CLI   0(R1),C' '          Is this beginning of JOEid?\n         BNE   JID1FINI              Yes, beginning found\n         BCTR  R6,0                  No, reset count\n         LA    R1,1(,R1)               and pointer\n         B     JID1LOOP                  continue checking\n         SPACE 1\nJID1FINI EX    R6,EXECJOID         Move id to JOEid1\n         LA    R2,1(R6,R2)           Reset pointer             @510APAR\n         MVI   0(R2),C'.'          Set period in\n         LA    R2,1(,R2)           Reset pointer\n         LH    R0,JOEID2           2nd qualifier to convert\n         CVD   R0,EX1CVDWA         Convert to decimal\n         SPACE 1\n         MVC   EX1CVDWA-1(6),=X'402020202120'    Move mask for result\n         ED    EX1CVDWA-1(6),EX1CVDWA+5          Convert to EBCDIC\n         SPACE 1\n         LA    R6,4                Set for                     @510APAR\n         LA    R1,EX1CVDWA           execute\nJID2LOOP CLI   0(R1),C' '          Is this beginning of JOEid?\n         BNE   JID2FINI              Yes, beginning found\n         BCTR  R6,0                  No, reset count\n         LA    R1,1(,R1)               and pointer\n         B     JID2LOOP                  continue checking\n         SPACE 1\nJID2FINI EX    R6,EXECJOID         Move id to JOEid2\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 1\nEXECJOID MVC 0(*-*,R2),0(R1)       **** EXECUTE ****\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT TITLE LINE                            *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         USING SJTRKEYL,R2                   Establish addressability\n         SPACE 1\n         MVC   BOXDESC,LBTITLE               Title label\n         ICM   R2,B'1111',EX1KYLST           Load Key list address\n         BZ    PRTITLE                       Branch if no Key list\n         LA    R2,KYLSTTL(,R2)               Load address of the Title C\n                                                key in the Key List\n         ICM   R1,B'1111',SJTRTPAD           Load Title TU address\n         BZ    PRTITLE                       Branch if no Title\n         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C\n                                               parameter pair\n         SPACE 1\n         BAL   R8,MOVETU                     Get Title data from TU\n         SPACE 1\nPRTITLE $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 1\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT A BLANK LINE                          *\n*         ( FRAME CHARACTERS IN COL 1 AND COL 80 )                    *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES     Produce the line\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*               BUILD AND PRINT DESTINATION LINE                      *\n*               --------------------------------                      *\n*                                                                     *\n*        Convert the binary route code ( in JOEROUT ) to its          *\n*        corresponding symbolic destination value using the           *\n*        $DEST macro.                                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBDEST                Fill in destination label\n         MVC   EX1DEST(L'JOEROUT),JOEROUT    Copy binary route code\n         SPACE 1\n         L     R9,X001CJOE          Get addressability to char-JOE\n         SPACE 1\n        $DEST  DEST=EX1DEST,LEN=L'EX1DEST,CONV=SBINARY,                C\n               USER=JOEUSER                  Convert route code\n         SPACE 1\n         L     R9,X001WJOE          Reset addressability to work-JOE\n         SPACE 1\n         MVC   BOXDEST,EX1DEST               Fill in destination value\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT NAME LINE                             *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBNAME                Fill in Name label\n         ICM   R2,B'1111',EX1KYLST           Load Key/TU prt list addr\n         BZ    NONAME                        Branch if no Key list\n         LA    R2,KYLSTNM(,R2)               Load address of the Name  C\n                                                key in the Key List\n         ICM   R1,B'1111',SJTRTPAD           Load Name TU address\n         BZ    NONAME                        Branch if no Name\n         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C\n                                                 parameter pair\n         SPACE 1\n         BAL   R8,MOVETU                     Get Name data from TU\n         SPACE 1\n         B     PRTNAME                       Branch to print the Name\n         SPACE 1\nNONAME   MVC   BOXPNAME,JCTPNAME             Name from the JOB stmt\n         SPACE 1\nPRTNAME $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 1\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT ROOM LINE                             *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBROOM                Fill in Room label\n         ICM   R2,B'1111',EX1KYLST           Load Key/TU prt list addr\n         BZ    NOROOM                        Branch if no Key list\n         LA    R2,KYLSTRM(,R2)               Load address of the Room  C\n                                                key in the Key List\n         ICM   R1,B'1111',SJTRTPAD           Load Room TU address\n         BZ    NOROOM                        Branch if no Room\n         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C\n                                                 parameter pair\n         SPACE 1\n         BAL   R8,MOVETU                     Get Room data from TU\n         SPACE 1\n         B     PRTROOM                       Branch to print the Room\n         SPACE 1\nNOROOM   MVC   BOXROOMN,JCTROOMN             Room from the JOB stmt\n         EJECT\nPRTROOM $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT BUILDING LINE                         *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBBLDG                Fill in Building label\n         ICM   R2,B'1111',EX1KYLST           Load Key/TU prt list addr\n         BZ    PRTBLDG                       Branch if no Key list\n         LA    R2,KYLSTBL(,R2)               Load address of the Bldg  C\n                                                key in the Key List\n         ICM   R1,B'1111',SJTRTPAD           Load Building TU address\n         BZ    PRTBLDG                       Branch if no Building\n         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C\n                                                 parameter pair\n         SPACE 1\n         BAL   R8,MOVETU                     Get Building data from TU\n         SPACE 1\nPRTBLDG $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 1\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT DEPARTMENT LINE                       *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBDEPT                Fill in Department label\n         ICM   R2,B'1111',EX1KYLST           Load Key/TU prt list addr\n         BZ    PRTDEPT                       Branch if no Key list\n         LA    R2,KYLSTDP(,R2)               Load address of the Dept  C\n                                                key in the Key List\n         ICM   R1,B'1111',SJTRTPAD           Load Department TU address\n         BZ    PRTDEPT                       Branch if no Department\n         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C\n                                                 parameter pair\n         SPACE 1\n         BAL   R8,MOVETU                    Get Department data from TU\n         SPACE 1\nPRTDEPT $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*               BUILD AND PRINT ADDRESS LINES                         *\n*               -----------------------------                         *\n*        The address can be from 1 to 4 lines long.  Any lines        *\n*        that are unused must be printed as blank lines, but the      *\n*        label \"ADDRESS:\" must appear on the first line even if       *\n*        no address was specified on the OUTPUT JCL.                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBADDR                Fill in Address label\n         ICM   R2,B'1111',EX1KYLST           Load Key/TU prt list addr\n         BZ    NOADDR                        Branch if no Key list\n         LA    R2,KYLSTAD(,R2)               Load address of the Addr  C\n                                                key in the Key/TU List\n         ICM   R1,B'1111',SJTRTPAD           Load Address TU address\n         BZ    NOADDR                        Branch if no Address\n         SPACE 1\n         LH    R3,DOCNTNUM-DOCNUNIT(,R1)     Number of lines used for  C\n                                                 Address\n         CL    R3,$F4                        Number greater than four?\n         BNH   SAVENUML                        No, save number of lines\n         LA    R3,4                            Yes, set to max of four\n         SPACE 1\nSAVENUML STH   R3,EX1ADNUM                   Save number of lines\n         LTR   R3,R3                         Number greater than zero?\n         BZ    NOADDR                          No, produce blank lines\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Loop to build/print multiple line address                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C\n                                                 parameter pair\n         SPACE 1\n         USING DOCNTFLD,R1                   Establish addressability\n         SPACE 1\nADDRLOOP LR    R6,R1                         Save the TU address\n         SPACE 1\n         BAL   R8,MOVETU                     Get Address data from TU\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 1\n         LR    R1,R6                         Restore TU address\n         SPACE 1\n         LH    R15,DOCNTLEN                  Move to next\n         LA    R1,L'DOCNTLEN(R15,R1)           Address Length/Data pair\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         BCT   R3,ADDRLOOP                   Loop again if more data\n         SPACE 1\n         DROP  R1                            Drop addressability\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Loop to build/print multiple blank lines                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nNOADDR   LH    R6,$H4                       Maximum number of          C\n                                             available lines of address\n         LH    R3,EX1ADNUM                  Number Address lines used\n         SR    R6,R3                        Determine the number       C\n                                                    of unused lines\n         LA    R6,1(,R6)                    Add 1 for extra blank line\n         SPACE 1\nBLKLINE $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES    Print blank lines\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         BCT   R6,BLKLINE                       Loop if more to print\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*               BUILD AND PRINT THE PRINT TIME LINE                   *\n*                                                                     *\n*    Note: The TIME macro with the DEC parameter returns the time     *\n*          of day in R0 and the date in R1.                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBPRTIME             Fill in Printer Time label\n         SPACE 1\n         TIME  DEC                          Get time\n         SPACE 1\n         ST    R0,EX1CVDWA                  Save the time\n         LR    R6,R1                        Save the date\n         L     R15,=A(TIMEMASK)             Get Edit mask address\n         MVC   BOXPRTIM,0(R15)              Copy edit pattern\n         ED    BOXPRTIM,EX1CVDWA            Edit time into proper field\n         CLI   BOXPRTIM,X'21'      LEADING 0?                    @430GO\n         BNE   PRLINE                NO, NO NEED TO EDIT         @430GO\n         MVI   BOXPRTIM,X'F0'      PUT PRINTABLE 0 IN FIELD      @430GO\n         SPACE 1\nPRLINE  $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES  PRODUCE LINE   @430GO\n         SPACE 1\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT THE PRINT DATE LINE                   *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBPRDATE             Fill in Printer Date label\n         SPACE 1\n        $CALL  FMTDATE                      Format date\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT PRINTER NAME LINE                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBPRNAME             Printer Name label\n         SPACE 1\n         USING DCT,R3                       Establish addressability\n         L     R3,X001DCT                      to printer DCT\n         SPACE 1\n         MVC   BOXPDEVN,DCTDEVN             Device Name\n         SPACE 1\n         DROP  R3                           Drop DCT addressability\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 1\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT SYSTEM NAME LINE                      *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBSYSTEM             System label\n         MVC   BOXSYSTM,$SID                System ID\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT A BLANK LINE                          *\n*         ( FRAME CHARACTERS IN COL 1 AND COL 80 )                    *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES     Produce the line\n         SPACE 1\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT BOTTOM LINE                           *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n        $CALL  PUTFRAME            Build last line of detail box\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Call PRPUT macro C\n                                                to print the last line\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to the caller.                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDBOX   DS    0H\n         SPACE 1\n        $RETURN ,                  Return to the caller\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Static data and the literal pool                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LTORG ,                            Define literal origin\n         SPACE 1\n         DROP  R2,R4,R5,R7,R9,R10,R12       Drop addressabilities\n         TITLE 'CLRLINE  -- Clear the output line; Reset buffer work spC\n               ace addressability'\n***********************************************************************\n*                                                                     *\n*        CLRLINE -  Resets addressability to the beginning of         *\n*                   the buffer work space within the HASP             *\n*                   buffer that is passed to the exit.                *\n*                   Clears the detail box output buffer line          *\n*                   and inserts the box frame character in            *\n*                   columns 1 and 80.                                 *\n*                                                                     *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This subroutine loads R4 with the address of the work        *\n*        space in the HASP buffer passed via the exit parameter       *\n*        list.  This ensures that the data to be printed by           *\n*        $PRPUT is at the correct offset in the buffer.               *\n*                                                                     *\n*        The detail box output buffer line is cleared so that         *\n*        residual data is not printed on the current output           *\n*        line.  The box frame character is inserted in columns        *\n*        1 and 80.                                                    *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via a  BAL R8,CLRLINE                               *\n*        Returned via address in R8                                   *\n*                                                                     *\n*                                                                     *\n*   REGISTER USAGE:                                                   *\n*                                                                     *\n*        REG          VALUE ON ENTRY         VALUE ON EXIT            *\n*                                                                     *\n*        R0-R3        N/A                      Unchanged              *\n*        R4           N/A                      Buffer work space      *\n*                                                address              *\n*        R5-R6        N/A                      Unchanged              *\n*        R7           Parameter list address   Unchanged              *\n*        R8           Return address           Unchanged              *\n*        R9-R15       N/A                      Unchanged              *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING SEPDSECT,R4                 Establish\n         USING XPL,R7                           addressability\n         EJECT\nCLRLINE  L     R4,X001HBUF                 Load buffer address and\n         LA    R4,BUFSTART-BFPDSECT(,R4)     point to the work space   C\n                                                offset\n         SPACE 1\n         MVI   PAGELINE,C' '                        Clear the\n         MVC   PAGELINE+1(L'PAGELINE-1),PAGELINE       separator line\n         MVI   BOXCOL1,C'*'                         Insert\n         MVI   BOXCOL80,C'*'                           frame characters\n         SPACE 1\n         BR    R8                          Return to caller\n         SPACE 1\n         LTORG ,                           Define literal origin\n         SPACE 1\n         DROP  R4,R7                       Drop addressability\n         TITLE 'MOVETU   -- Move TEXT UNIT text into separator page detC\n               ail box'\n***********************************************************************\n*                                                                     *\n*        MOVETU -  Move the Text Unit ( TU ) text from the TU         *\n*                  output area to the separator page detail           *\n*                  box line.                                          *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This subroutine is called to move the TU text from the       *\n*        TU output area to the detail box output line.  Since         *\n*        TUs are variable length (up to sixty characters long),       *\n*        the detail line is padded with blanks on the right after     *\n*        the move is performed.                                       *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via a  BAL R8,MOVETU                                *\n*        Returned via address in R8                                   *\n*                                                                     *\n*                                                                     *\n*   REGISTER USAGE:                                                   *\n*                                                                     *\n*        REG          VALUE ON ENTRY         VALUE ON EXIT            *\n*                                                                     *\n*        R0           N/A                      Destroyed              *\n*        R1           Address of TU            Destroyed              *\n*                      length/parameter pair                          *\n*        R2-R3        N/A                      Unchanged              *\n*        R4           Address of output        Unchanged              *\n*                      buffer work space                              *\n*        R5-R13       N/A                      Unchanged              *\n*        R14-R15      N/A                      Destroyed              *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING DOCNTFLD,R1                  Establish\n         USING SEPDSECT,R4                      addressability\n         EJECT\nMOVETU   LA    R14,DOCNTPRM                 Load TU text address\n         LH    R15,DOCNTLEN                 Length of TU text\n         ICM   R15,B'1000',$BLANKS          Set pad character to blank\n         LA    R0,BOXINFO                   Set up the\n         LA    R1,L'BOXINFO                    receiving field\n         SPACE 1\n         MVCL  R0,R14                       Move the text\n         SPACE 1\n         BR    R8                           Return to the caller\n         SPACE 1\n         LTORG ,                            Define literal origin\n         SPACE 1\n         DROP  R1,R4                        Drop TU, SEPDSECT addr'ty\n         TITLE 'PUTFRAME -- Create the detail box frame in the top and C\n               bottom lines'\n***********************************************************************\n*                                                                     *\n*        PUTFRAME - Create the detail box frame in the top and        *\n*                   bottom lines.                                     *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This subroutine is called to create the frame in the         *\n*        top and bottom lines of the separator page detail box.       *\n*                                                                     *\n*        The detail box frame will contain ...                        *\n*                                                                     *\n*          '**START***'  for job header separator calls               *\n*          '**END*****'  for job trailer separator calls              *\n*          '**CONT****'  for job continuation separator calls         *\n*                                                                     *\n*        propagated across the length of the top and bottom           *\n*        lines of the detail box.                                     *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via $CALL                                           *\n*        Returned via $RETURN                                         *\n*                                                                     *\n*   REGISTER USAGE ( ENTRY/EXIT ):                                    *\n*                                                                     *\n*        REG          VALUE ON ENTRY         VALUE ON EXIT            *\n*                                                                     *\n*        R0-R3        N/A                      Unchanged              *\n*        R4           Address of output        Unchanged              *\n*                      buffer work space                              *\n*        R5-R6        N/A                      Unchanged              *\n*        R7           Parameter list address   Unchanged              *\n*        R8-R10       N/A                      Unchanged              *\n*        R11          HCT address              Unchanged              *\n*        R12          N/A                      Unchanged              *\n*        R13          PCE address              Unchanged              *\n*        R14          Return address           Unchanged              *\n*        R15          Entry address            Unchanged              *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING PUTFRAME,R12                 Establish\n         USING SEPDSECT,R4                       addressabilities\n         USING XPL,R7\n         SPACE 1\nPUTFRAME $SAVE ,                   Save the caller's registers\n         SPACE 2\n         LR    R12,R15             Set local base register\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Determine the type of call and branch to insert              *\n*        frame characters in the detail box output line.              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         TM    X001IND,X001JTLR    Is this a trailer call?     @R01P010\n         BO    TRAILER                If yes, go to TRAILER\n         SPACE 1\n         TM    X001IND,X001JCNT    Else, continuation call?    @R01P010\n         BO    CONTINUE               If yes, go to CONTINUE\n         SPACE 1\n*---------------------------------------------------------------------*\n*        Insert frame for job header calls.                           *\n*---------------------------------------------------------------------*\n         SPACE 1\n         MVC   BOXLINE(10),=CL10'**START***'   Insert 'START'\n         SPACE 1\n         B     FILLFRAM            Go propagate frame characters\n         SPACE 1\n*---------------------------------------------------------------------*\n*        Insert frame for job continuation calls.                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nCONTINUE MVC   BOXLINE(10),=CL10'**CONT****'   Insert 'CONT'\n         SPACE 1\n         B     FILLFRAM            Go propagate frame characters\n         SPACE 1\n*---------------------------------------------------------------------*\n*        Insert frame for job trailer calls.                          *\n*---------------------------------------------------------------------*\n         SPACE 1\nTRAILER  MVC   BOXLINE(10),=CL10'**END*****'       Insert 'END'\n         SPACE 1\n*---------------------------------------------------------------------*\n*        Propagate frame characters across the length of              *\n*        the detail box output line.                                  *\n*---------------------------------------------------------------------*\n         SPACE 1\nFILLFRAM MVC   BOXLINE+10(L'BOXLINE-10),BOXLINE    Fill in frame\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to caller.                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n        $RETURN ,                  Return to caller\n         SPACE 2\n         LTORG ,                   Define literal origin\n         SPACE 2\n         DROP  R4,R7,R12           Drop addressabilities\n         TITLE 'FMTDATE  -- Format date'\n***********************************************************************\n*                                                                     *\n*        FMTDATE  - Convert the date to a readable format.            *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        The date is converted from a packed decimal format           *\n*        0CYYDDDF to a readable format 'DD MMM YYYY' where ..  @OW26885\n*                                                                     *\n*          Packed Decimal Format:                                     *\n*                                                                     *\n*          C   represents number of centuries after 1900 A.D.         *\n*         YY   represents the last two digits of the year             *\n*        DDD   represents the JULIAN value for the date               *\n*                                                                     *\n*          Readable Format:                                           *\n*                                                                     *\n*         DD   represents the date                                    *\n*        MMM   represents the three character abbreviation            *\n*                 for the month                                       *\n*       YYYY   represents the YEAR                             @OW26885\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via $CALL                                           *\n*        Returned via $RETURN                                         *\n*                                                                     *\n*   REGISTER USAGE ( ENTRY/EXIT ):                                    *\n*                                                                     *\n*        REG          VALUE ON ENTRY         VALUE ON EXIT            *\n*                                                                     *\n*        R0-R3        N/A                      Unchanged              *\n*        R4           Current buffer address   Unchanged              *\n*        R5           Exit work area address   Unchanged              *\n*        R6           Date in packed decimal   Unchanged              *\n*                     format 0CYYDDDF                                 *\n*        R7           Parameter list address   Unchanged              *\n*        R8-R10       N/A                      Unchanged              *\n*        R11          HCT address              Unchanged              *\n*        R12          N/A                      Unchanged              *\n*        R13          PCE address              Unchanged              *\n*        R14          Return address           Unchanged              *\n*        R15          Entry address            Unchanged              *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING FMTDATE,R12         Establish local addressability\n         USING XPL,R7              Establish XPL addressability\n         USING SEPDSECT,R4         Establish buffer addr'ty\n         USING EX1WORK,R5          Establish exit work area addr'ty\n         SPACE 1\nFMTDATE $SAVE  ,                   Save the caller's registers\n         SPACE 2\n         LR    R12,R15             Set local base register\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Setup date conversion table.                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         LTR   R6,R6               Is there a date to format?\n         BZ    NODATE                No, go return to caller\n         SPACE 1\n         LA    R3,BOXINFO          Get addr of output area\n         XC    EX1CVDWA,EX1CVDWA   Clear out conversion work area\n         ST    R6,EX1CVDWA+4       Store date in conversion work area\n         SPACE 1\n         L     R2,=A(YEARTABL)     Copy date conversion table\n         MVC   MONTHS,0(R2)          incase it needs to be updated\n         SPACE 1\n         TM    EX1CVDWA+5,X'01'    Adjust\n         BO    EDITYEAR              table\n         TM    EX1CVDWA+5,X'12'        on\n         BM    EDITYEAR                  leap\n         MVI   FEB,29                      years\n         SPACE 1\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Convert year to readable format.                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nEDITYEAR MVC   8(3,R3),=X'F02120'    Get pattern               @OW26885\n         ED    8(3,R3),EX1CVDWA+5    Edit last two digit of yr @OW26885\n         MVI   6(R3),X'40'           Blank fill character      @OW26885\n         CLI   EX1CVDWA+4,X'00'      Is this 20th Century yr?  @OW26885\n         BNE   X121CENT              No, must be 21st Century  @OW26885\n         MVC   7(2,R3),=CL2'19'      Year will be '19xx'       @OW26885\n         B     XYRCNT                edit last 2 digits of yr  @OW26885\n         SPACE 1                                               @OW26885\nX121CENT MVC   7(2,R3),=CL2'20'      Year will be '20xx'       @OW26885\n         SPACE 1\nXYRCNT   MVC   EX1CVDWA(6),$ZEROS  Clear all but JULIAN day    @OW26885\n         SLR   R0,R0               Clear register\n         CVB   R6,EX1CVDWA         Convert day to binary\n         LA    R2,MONTHS-4         Get addr of date conversion table\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Convert day and month to readable format.                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nDATELOOP SLR   R6,R0               Convert\n         LA    R2,4(,R2)             JULIAN day\n         IC    R0,0(,R2)               value to\n         CLR   R0,R6                     standard day\n         BL    DATELOOP                     value\n         SPACE 1\n         CVD   R6,EX1CVDWA         Convert day to decimal value\n         UNPK  0(2,R3),EX1CVDWA+6(2)   Place DAY (DD)\n         OI    1(R3),X'F0'               into work area\n         SPACE 1\n         MVI   2(R3),C' '          Insert delimiter\n         MVC   3(3,R3),1(R2)       Move EBCDIC month (MMM)\n         SPACE 1\nNODATE   DS    0H                  End of conversion\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to caller.                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n        $RETURN ,                  Return to caller\n         SPACE 2\n         LTORG ,                   Define literal origin\n         SPACE 2\n         DROP  R4,R5,R7,R12        Drop addressabilities\n         TITLE 'EX1RECV  -- First level recovery routine'\n***********************************************************************\n*                                                                     *\n*        EX1RECV  - First level recovery for exit 1                   *\n*                                                                     *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This routine gets control if an abend occurs within          *\n*        the sample exit.  The registers that are required for        *\n*        retry processing are restored from the ERA ( Error           *\n*        Recovery Area ).                                             *\n*                                                                     *\n*        Since the abend may have occurred while attempting           *\n*        to return the exit 1 work area storage, an additional        *\n*        $ESTAE recovery environment will be created to handle        *\n*        an abend within this first level recovery routine.           *\n*        Note that HASPTERM will pop the save areas until it          *\n*        has found the save area level that issued the $ESTAE         *\n*        give control to the recovery routine specified.              *\n*                                                                     *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via $CALL                                           *\n*        Returned via $RETURN                                         *\n*                                                                     *\n*   REGISTER USAGE ( ENTRY/EXIT ):                                    *\n*                                                                     *\n*        REG          VALUE ON ENTRY         VALUE ON EXIT            *\n*                                                                     *\n*        R0           R0 at time of error      Unchanged              *\n*        R1           ERA address              Unchanged              *\n*        R2-R10       R2-R10 at time of error  Unchanged              *\n*        R11          HCT address              Unchanged              *\n*        R12          R12 at time of error     Unchanged              *\n*        R13          PCE address              Unchanged              *\n*        R14          Return address           Unchanged              *\n*        R15          Entry address            Unchanged              *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING ERA,R8              Establish ERA addressability\n         USING EX1RECV,R12         Establish local addressability\n         SPACE 1\nEX1RECV $SAVE  ,                   Save the caller's registers\n         SPACE 2\n         LR    R12,R15             Set local base register\n         SPACE 1\n         LR    R8,R1               Set ERA address\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Establish second level ESTAE recovery environment.           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n        $ESTAE RECADDR==A(EX1REC2),NAME=EX1RECV,RETRY=ENDRECOV,        C\n               BASE=(R12)          Establish ESTAE environment\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Check if PCEUSER0 has address of exit work area by           *\n*        verifying that the eyecatcher is valid.  If the              *\n*        eyecatcher is valid release the storage obtained             *\n*        for work areas needed to produce a separator page            *\n*        ( see PRODSEP routine ).  The addresses pointing to          *\n*        these work areas were previously saved in the exit           *\n*        work area.                                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         ICM   R4,B'1111',PCEUSER0     Get work area address\n         BZ    ENDRECOV                Bypass RETWORK if no storage\n         XC    PCEUSER0,PCEUSER0       Clear PCEUSER0 field\n         SPACE 1\n         CLC   0(4,R4),=CL4'EX1W'      Check if work area      @430P329C\n                                          eyecatcher is valid  @430P329\n         BNE   ENDRECOV            Bypass RETWORK if not valid @430P329\n         SPACE 1\n         LA    R4,4(,R4)           Add 4 for eyecatcher\n         USING EX1WORK,R4          Establish EX1WORK addressability\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Release TU output area storage                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         ICM   R1,B'1111',EX1TUADR     Load TU output area addr\n         BZ    RELKEYL             Branch if no TU storage\n         S     R1,$F4              Subtract 4 for eyecatcher\n         SPACE 1\n         XC    EX1TUADR,EX1TUADR       Set address to zero\n         SPACE 1\n        $RETWORK (R1)              Release the TU storage\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Release Key/TU pointer list storage area                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nRELKEYL  ICM   R1,B'1111',EX1KYLST     Load Key/TU ptr list addr\n         BZ    RELSRWA             Branch if no Key/TU storage\n         S     R1,$F4              Subtract 4 for eyecatcher\n         SPACE 1\n         XC    EX1KYLST,EX1KYLST       Set address to zero\n         SPACE 1\n        $RETWORK (R1)              Release the keylist storage\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Release SWBTUREQ RETRIEVE service work area storage          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nRELSRWA  ICM   R1,B'1111',EX1SRWA      Load service work area addr\n         BZ    ENDRECOV            Branch if no work storage\n         S     R1,$F4              Subtract 4 for eyecatcher\n         SPACE 1\n         XC    EX1SRWA,EX1SRWA     Set address to zero\n         SPACE 1\n        $RETWORK (R1)              Release the working storage\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to caller.                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDRECOV $ESTAE CANCEL             Cancel 2nd level recovery environ\n         SPACE 2\n        $SETRP PERCOLATE           Percolate to callers recovery\n         SPACE 2\n        $RETURN ,                  Return to caller\n         SPACE 2\n         LTORG ,                   Define literal origin\n         SPACE 2\n         DROP  R4,R8,R12           Drop addressabilities\n         TITLE 'EX1REC2  -- Second level recovery routine'\n***********************************************************************\n*                                                                     *\n*        EX1REC2  - Second level recovery for sample exit 1           *\n*                                                                     *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This routine gets control if an abend occurs within          *\n*        the first level recovery routine.                            *\n*                                                                     *\n*        If this is not the first time that this recovery             *\n*        routine has been called, PERCOLATE to the first              *\n*        level recovery routine ( EX1RECV ).  Otherwise,              *\n*        resume processing at the retry label ENDRECOV in             *\n*        EX1RECV.                                                     *\n*                                                                     *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via $CALL                                           *\n*        Returned via $RETURN                                         *\n*                                                                     *\n*   REGISTER USAGE ( ENTRY/EXIT ):                                    *\n*                                                                     *\n*        REG          VALUE ON ENTRY         VALUE ON EXIT            *\n*                                                                     *\n*        R0           R0 at time of error      Unchanged              *\n*        R1           ERA address              Unchanged              *\n*        R2-R10       R2-R10 at time of error  Unchanged              *\n*        R11          HCT address              Unchanged              *\n*        R12          R12 at time of error     Unchanged              *\n*        R13          PCE address              Unchanged              *\n*        R14          Return address           Unchanged              *\n*        R15          Entry address            Unchanged              *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING ERA,R8              Establish ERA addressability\n         USING EX1REC2,R12         Establish local addressability\n         SPACE 1\nEX1REC2 $SAVE  ,                   Save the caller's registers\n         SPACE 2\n         LR    R12,R15             Set local base register\n         SPACE 1\n         LR    R8,R1               Set ERA address\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        If this is not the first time through this ESTAE             *\n*        environment, PERCOLATE to next ESTAE recovery level.         *\n*        Otherwise, retry at resume point stored in PRE.              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         CLC   PCEUSER1,$ZEROS     Has ESTAE been recently entered?\n         BNE   EX1PERK               Yes, percolate\n         MVC   PCEUSER1,$F1        Indicate ESTAE entered\n         SPACE 1\n         L     R1,ERAPRE                    Get PRE address\n         MVC   ERAREG12,PREBASE-PRE(R1)     Set local base\n         L     R2,PRERESUM-PRE(,R1)         Get resume address\n         SPACE 2\n        $SETRP RECOVER,RESUME=(R2)          Set recovery address\n         SPACE 2\n         B     ENDREC2             Return to caller\n         SPACE 2\nEX1PERK $SETRP PERCOLATE          Percolate to callers recovery\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to caller.                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDREC2 $RETURN ,                 Return to caller\n         SPACE 2\n         DROP  R8,R12             Drop addressabilities\n         SPACE 2\n         LTORG ,\n         TITLE 'PRINT/PUNCH Separator Exit -- Data Definitions'\n***********************************************************************\n*                                                                     *\n*               DATA DEFINITIONS                                      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        All labels that will appear in the separator page            *\n*        detail box are listed below.                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nLBJOBID  DC    CL(L'BOXDESC)'JOBID='\nLBSEGID  DC    CL(L'BOXDESC)'SEGMENT ID='\nLBJOBNAM DC    CL(L'BOXDESC)'JOB NAME='\nLBUSERID DC    CL(L'BOXDESC)'USER ID='\nLBSYSCL  DC    CL(L'BOXDESC)'SYSOUT CLASS='\nLBOUTGRP DC    CL(L'BOXDESC)'OUTPUT GROUP='\nLBTITLE  DC    CL(L'BOXDESC)'TITLE='\nLBDEST   DC    CL(L'BOXDESC)'DESTINATION='\nLBNAME   DC    CL(L'BOXDESC)'NAME='\nLBROOM   DC    CL(L'BOXDESC)'BIN= '                     SM 080800\nLBBLDG   DC    CL(L'BOXDESC)'BUILDING='\nLBDEPT   DC    CL(L'BOXDESC)'DEPARTMENT='\nLBADDR   DC    CL(L'BOXDESC)'ADDRESS='\nLBPRTIME DC    CL(L'BOXDESC)'PRINT TIME='\nLBPRDATE DC    CL(L'BOXDESC)'PRINT DATE='\nLBPRNAME DC    CL(L'BOXDESC)'PRINTER NAME='\nLBSYSTEM DC    CL(L'BOXDESC)'SYSTEM='\n         SPACE 1\nTIMEMASK DC    X'21207A20207A2020'        TIME MASK\nSEGMASK  DC    X'402020202020'            SEGMENT ID MASK\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        JULIAN date to standard DAY and MONTH conversion table.      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nYEARTABL DC    AL1(31),C'JAN',AL1(28),C'FEB'\n         DC    AL1(31),C'MAR',AL1(30),C'APR'\n         DC    AL1(31),C'MAY',AL1(30),C'JUN'\n         DC    AL1(31),C'JUL',AL1(31),C'AUG'\n         DC    AL1(30),C'SEP',AL1(31),C'OCT'\n         DC    AL1(30),C'NOV',AL1(255),C'DEC'\n         SPACE 1\nMONTHS   EQU   $REGSAVE,12*4       Save area for copy of above table\nFEB      EQU   MONTHS+4            Entry for FEBRUARY\n         TITLE 'PRINT/PUNCH Separator Exit -- OUTPUT Key List Equates'\n***********************************************************************\n*                                                                     *\n*        OUTPUT JCL Keys List equates                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nKYLSTTL  EQU   0*SJTRKLEN               Title Key\nKYLSTNM  EQU   1*SJTRKLEN               Name Key\nKYLSTRM  EQU   2*SJTRKLEN               Room Key\nKYLSTBL  EQU   3*SJTRKLEN               Building Key\nKYLSTDP  EQU   4*SJTRKLEN               Dept key\nKYLSTAD  EQU   5*SJTRKLEN               Address Key\n         TITLE 'PRINT/PUNCH Separator Exit -- Exit 1 Work Area DSECT'\n***********************************************************************\n*                                                                     *\n*        EXIT 1 WORK AREA DSECT                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEX1WORK  DSECT\n         DS    0F\nEX1SWBRC DS    XL2                 SWBTUREQ logical error return code\nEX1PLPTR DS    A                   Address of SWBTUREQ parameter list  C\n                                     (the SWBTUREQ service requires    C\n                                      R1 to point to a word that       C\n                                      points to the parameter list)\nEX1SRWA  DS    F                   Address of SWBTUREQ service         C\n                                     working storage\nEX1SRWL  DS    H                   Length of SWBTUREQ service          C\n                                     working storage\nEX1KYLST DS    F                   Address of the Key List             C\n                                     used for SWBTUREQ SERVICE\nEX1TUADR DS    F                   Address of TU output area           C\n                                     used for SWBTUREQ SERVICE\nEX1TUSZ  DS    H                   Size of the TU output area          C\n                                     used for SWBTUREQ SERVICE\nEX1ADNUM DS    H                   Number of lines of ADDRESS ( OUTPUT C\n                                                 JCL keyword )\nEX1SEGWA DS    XL6                 Segment number work area\n         DS    0D\nEX1CVDWA DS    D                   'Convert to decimal' work area\nEX1DEST  DS    0CL16               Destination conversion\n         DS    D                        work area\n         DS    D\n         DS    0F\nEX1RETPL DS    XL(SJTRLGTH)        SWBTUREQ RETRIEVE parameter list\nEX1WKLEN EQU   *-EX1WORK           Length of EX1WORK DSECT\n         TITLE 'PRINT/PUNCH Separator Exit -- Separator Page Detail BoxC\n                DSECT'\n***********************************************************************\n*                                                                     *\n*        SEPARATOR PAGE DETAIL BOX LINE DSECT                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSEPDSECT DSECT                     Separator page detail box DSECT\nPAGELINE DS    0CL132\n         SPACE 1\nBOXLINE  DS    0CL80\n         SPACE 1\n*---------------------------------------------------------------------*\n*                                  COL           DESCRIPTION          *\n*---------------------------------------------------------------------*\n         SPACE 1\nBOXCOL1  DS    CL1                 1             Frame Character\n         DS    CL1                 2             Blank\nBOXDESC  DS    CL13                3-15          Line Description\n         DS    CL2                 16-17         Blanks\nBOXINFO  DS    CL60                18-77         Line Information\n         DS    CL2                 78-79         Blanks\nBOXCOL80 DS    CL1                 80            Frame Character\n         SPACE 1\n         DS    CL52                Unused section\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                  COL           DESCRIPTION          *\n*---------------------------------------------------------------------*\n         SPACE 2\n         ORG   BOXINFO                    Job ID Area\nBOXJOBID DS    CL(L'JCTJOBID)       18-25         Job id\n         SPACE 1\n         ORG   BOXINFO+22                 Segment Area\nBOXSGLBL DS    C'SEGMENT ID:  '    40-52         Segment ID label\nBOXSGINF DS    CL5                 53-57         Segment ID Number\n         SPACE 1\n         ORG   BOXINFO                    Job Name Area\nBOXJNAME DS    CL(L'JCTJNAME)      18-25         Job name\n         SPACE 1\n         ORG   BOXINFO                    User ID Area\nBOXCRUID DS    CL(L'JOECRUID)      18-25         User ID\n         SPACE 1\n         ORG   BOXINFO                    Sysout class Area\nBOXSYSCL DS    CL(L'JOECURCL)      18            Sysout class\n         EJECT\n*---------------------------------------------------------------------*\n*                                  COL           DESCRIPTION          *\n*---------------------------------------------------------------------*\n         SPACE 2\n         ORG   BOXINFO                    Destination Area\nBOXDEST  DS    CL(L'EX1DEST)       18-25         Destination\n         SPACE 1\n         ORG   BOXINFO                    Programmer name Area\nBOXPNAME DS    CL(L'JCTPNAME)      18-25         Programmer name\n         SPACE 1\n         ORG   BOXINFO                    Programmer room Area\nBOXROOMN DS    CL(L'JCTROOMN)      18-25         Programmer room\n         SPACE 1\n         ORG   BOXINFO                    Print Time Area\nBOXPRTIM DS    C'HH:MM:SS'         18-25         Print Time\n         SPACE 1\n         ORG   BOXINFO                    Print Date Area\nBOXPRDAT DS    C'DD MMM YY'        18-26         Print Date\n         SPACE 1\n         ORG   BOXINFO                    Printer Name Area\nBOXPDEVN DS    CL(L'DCTDEVN)       18-25         Printer Name\n         SPACE 1\n         ORG   BOXINFO                    System Name Area\nBOXSYSTM DS    CL(L'$SID)          18-21         System Name\n         EJECT\n***********************************************************************\n*        END OF DECLARES                                              *\n***********************************************************************\n         SPACE 1\n&J2SECTN &J2SECTT ,                Restore code section        @430P270\n         SPACE 1\n         LTORG ,                   DEFINE LITERAL ORIGIN\n         SPACE 1\n         DROP  ,                   Kill addressabilities\n         TITLE 'PRINT/PUNCH Separator Exit -- Module End ($MODEND)'\n        $MODEND\nAPARNUM  DC    CL8'NONE   '        APAR NUMBER\nPTFNUM   DC    CL8'NONE   '        PTF  NUMBER\n         END   ,                   END OF STSCX01A\n./ ADD NAME=LSES502J 0303-00234-04133-1314-00026-00018-00005-T0SM0\n//T0SM502J JOB  (4030,37),'REDO--LSES502',CLASS=X,MSGCLASS=A,\n//  REGION=6M,\n//    NOTIFY=&SYSUID\n/*JOBPARM S=TSPC\n/*CNTL SESG03A,EXC\n//*\n//*%PDSDOC 00 SMP APPLY LSES502\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=MVS.OSMAINT.USERMODS(LSES502)\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES502) BYPASS(APPLYCHECK) .\n  RESETRC.\n  RECEIVE S(LSES502) SOURCEID(SUNTRUST) .\n  SET BDY(AEST03A).\n  APPLY REDO S(LSES502).\n//\n./ ADD NAME=LSES503  0205-00234-03317-2222-00328-00253-00001-T0SM1\n++USERMOD(LSES503)\n /* ***************************************************************\n    ** * USER EXIT 4 A                                         * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707) .\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STSCX04A),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STSCX04A)\n NAME STSCX04A(R)\n/*\n++SRC(STSCX04A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\n PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1) '\n* *%PDSDOC 00 MELLON EXIT 04 - PARSES /*ROUTE XEQ AND SET ENVIRONMENT\n*********************************************************************\n*                                                                   *\n*                        HASP EXIT 4                                *\n*                                                                   *\n*     THIS EXIT GETS CONTROL WHENEVER JES2 ENCOUNTERS A JCL OR      *\n*     JES2 CONTROL STATEMENT AND PERFORMS THE FOLLOWING FUNCTIONS:  *\n*                                                                   *\n*     > PARSES ANY \"/*ROUTE XEQ RESNAME\" CONTROL STATEMENTS THAT    *\n*       HAVE BEEN SPECIFIED.  ANY MELLON RESOURCE NAME THAT HAS     *\n*       BEEN SPECIFIED IS THEN CONVERTED TO A WLM SCHEDULING        *\n*       ENVIRONMENT.                                                *\n*                                                                   *\n*     ENTRY POINT: EXIT04                                           *\n*                                                                   *\n*     INPUT REGISTERS:                                              *\n*        R0     CODE INDICATING WHETHER A JES2 CONTROL OR JCL       *\n*               STATEMENT IS BEING PROCESSED.                       *\n*               0 = JES2 CONTROL STATEMENT                          *\n*               4 = JCL STATEMENT                                   *\n*        R1     POINTER TO A THREE WORD PARAMETER LIST FORMATTED    *\n*               AS FOLLOWS:                                         *\n*               +0  ADDRESS OF IMAGE BUFFER                         *\n*               +4  ADDRESS OF RDWFLAGX                             *\n*               +8  ADDRESS OF JCTXWRK                              *\n*        R2-9   N/A                                                 *\n*        R10    JCT ADDRESS OR ZERO                                 *\n*        R11    HCT ADDRESS                                         *\n*        R12    N/A                                                 *\n*        R13    PCE ADDRESS                                         *\n*        R14    RETURN ADDRESS                                      *\n*        R15    ENTRY ADDRESS                                       *\n*                                                                   *\n*     OUTPUT REGISTERS:                                             *\n*        R0-14  UNCHANGED                                           *\n*        R15:   RETURN CODE                                         *\n*                                                                   *\n*     REGISTER USAGE(INTERNAL):                                     *\n*        R0-9   WORK REGISTERS                                      *\n*        R10    JCT ADDRESS                                         *\n*        R11    HCT ADDRESS                                         *\n*        R12    BASE REGISTER                                       *\n*        R13    PCE ADDRESS                                         *\n*        R14-15 WORK AND LINKAGE REGISTERS                          *\n*                                                                   *\n*     NOTE: THIS MODULE IS FOR USE WITH JES2 VERSION 6.0.4          *\n*                                                                   *\n*     AUTHOR: BOB BREAK                                             *\n*             ST. LOUIS, MO.                                        *\n*********************************************************************\n* CHANGES:                                                          *\n* 01/22/2001 - ALTER LOGIC AS FOLLOWS, INSTEAD OF CHECKING FOR A    *\n* S. MCCOLLEY  VALID DESTID AND IF FOUND ASSUME A VALID JES2 ROUTE, *\n*              CHECK NAME TO SEE IF IT IS A VALID SCHENV NAME AND   *\n*              IF SO SET IT AS THE SCHENV REGUARDLESS OF WHETHER IT *\n*              IS A VALID DESTINATION ID OR NOT.                    *\n*                                                                   *\n*********************************************************************\n* *-*-*-----------------------------------------------------------*-*-*\n* *-                                                                 -*\n* *-     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE-*\n* *-  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY-*\n* *-  IS MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS   -*\n* *-  ASSUMED FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY  -*\n* *-  THE USE OF THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY  -*\n* *-  TO EVALUATE THE USEFULLNESS OF THE MATERIAL.                   -*\n* *-                                                                 -*\n* *-     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO     -*\n* *-  DATE, NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR        -*\n* *-  EXTENSIONS MADE IN THE FUTURE.                                 -*\n* *-                                                                 -*\n* *-*-*-----------------------------------------------------------*-*-*\n\n*\n*    SPECIAL THANKS GO TO BOB BREAK OF ST. LOUIS FOR THE ORIGINAL CODE\n*  TO PARSE THE \"/*ROUTE XEQ RESNAME\" CARDS AND SET THE APPROPRIATE\n*  EXECUTION ENVIRONMENT.\n*\n*    SPECIAL THANKS TO JUDY RUNT OF WISCONSIN ELECTRIC FOR THE ORIGINAL\n*  CODE TO HANDLE THE \"/*CNTL BEFORE|AFTER|WITH,RESNAME\" AND \"/*CNTL\n*  RESNAME,EXC|SHR\" ROUTINES.  THE USE OF THE BLOCK EXTENSION REUSABLE\n*  TABLES, BERT'S, TO EXTEND THE JCT AND JQE.\n\n         COPY  $HASPGBL\n\nSTSCX04A $MODULE ENVIRON=JES2,                                         X\n               RMODE=ANY,                                              X\n               IBMJES2=SAMPLE,                                         X\n               TITLE='JES2 EXIT4A ',                                   X\n               SPLEVEL=NOCHECK,                                        X\n               CVT,                                                    X\n               PSA,                                                    X\n               RPL,                                                    X\n               $BUFFER,                                                X\n               $CADDR,                                                 X\n               $DCT,                                                   X\n               $HASPEQU,                                               X\n               $HCT,                                                   X\n               $HCCT,                                                  X\n               $JCT,                                                   X\n               $JCTX,                                                  X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PADDR,                                                 X\n               $PARMLST,                                               X\n               $PCE,                                                   X\n               $PSV,                                                   X\n               $RDRWORK,                                               X\n               $SQD,                                                   X\n               $TRE,                                                   X\n               $USERCBS,                                               X\n               $XECB\n\nEXIT04A  $ENTRY BASE=R12            EXIT ROUTINE ENTRY POINT\n\n*********************************************************************\n*                                                                   *\n*        SAVE CALLER'S REGISTERS AND ESTABLISH ADDRESSABILITIES.    *\n*                                                                   *\n*********************************************************************\n\n         USING JCT,R10\nEXIT000 $SAVE  NAME=STSCX04A       SAVE CALLER'S REGISTERS\n         LR    R12,R15             SET BASE REGISTER\n\n*********************************************************************\n*                                                                   *\n*        DETERMINE IF THIS EXIT WAS ENTERED FOR A JES2 CONTROL      *\n*        STATEMENT.                                                 *\n*                                                                   *\n*********************************************************************\n\n         LTR   R0,R0               PROCESSING JES2 CONTROL STATEMENT?\n         BNZ   RETURN0             NO - BRANCH, RETURN\n\n*********************************************************************\n*                                                                   *\n*        DETERMINE IF A JCT IS PRESENT.                             *\n*                                                                   *\n*********************************************************************\n\n         LTR   R10,R10             JCT PRESENT?\n         BZ    RETURN0             NO - BRANCH, RETURN\n\n*********************************************************************\n*                                                                   *\n*        DETERMINE IF A \"/*ROUTE XEQ\" CONTROL STATEMENT IS BEING    *\n*        PROCESSED.                                                 *\n*                                                                   *\n*********************************************************************\n\n         L     R3,0(,R1)           GET CONTOL STATEMENT IMAGE ADDRESS\n         CLC   ROUTCARD,0(R3)      \"/*ROUTE \" STATEMENT?\n         BNE   RETURN0             NO - BRANCH, RETURN\n* NEXT SEE IF THIS IS AN XEQ STATEMENT OR NOT\n         LA    R3,L'ROUTCARD(R0,R3)  POINT PAST CONSTANT VALUE\n         LA    R2,20               MAX VALUE TO LOOK FOR XEQ VALUE\nFINDXEQ  EQU   *\n         CLI   0(R3),C' '\n         BE    LOOPXEQ            IF BLANK JUST KEEP LOOKING\n         CLC   XEQ,0(R3)          WE ARE ONLY LOOKING FOR XEQ CARDS\n         BE    XEQCARD              - IF WE FIND ONE, BRANCH AN CONT.\n         B     RETURN0                - ELSE JUST QUIT ( GIVE TO JES)\nLOOPXEQ  LA    R3,1(R0,R3)        BUMP POINTER IN ONE\n         BCT   R2,FINDXEQ           - IF WE RUN OUT OF CARD -\n         B     RETURN0            CAN NOT IDENTIFY, QUIT& GIVE 2 JES\nXEQCARD  EQU   *\n*********************************************************************\n*                                                                   *\n*        ISOLATE THE RESOURCE NAME OR JES2 DESTINATION.             *\n*                                                                   *\n*********************************************************************\n\n         LA    R3,L'XEQ(R0,R3)     POINT PAST CONSTANT VALUE\n         LA    R2,35(0,R0)        MAX VALUE TO LOOK OVER ON CARD\nFINDNAME CLI   0(R3),C' '\n         BNE   PASTXEQ            WE HAVE FOUND THE NAME VALUE\n         LA    R3,1(R0,R3)        BUMP INTO CARD\n         BCT   R2,FINDNAME         LIMIT SEARCH INTO CARD\n         B     RETURN0            JUST LET JES2 FIGURE IT OUT\n*\nPASTXEQ  EQU   *                  R3 POINTS TO START OF INPUT VALUE\n         LA    R1,16(R0,R3)         SET END - IN CASE NO END IS FOUND\n         TRT   0(16,R3),TRANSTBL    FIND END OF RESOURCE NAME\n         SLR   R1,R3                CALCULATE RESOURCE NAME LENGTH\n         LR    R2,R1                SAVE RESOURCE NAME LENGTH\n         CH    R2,=H'16'\n         BNH   LT16OK                IF 16 OR LESS THEN CONTINUE AS IS\n         LH    R2,=H'16'             FORCE A MAX. VALUE IF GT 16\nLT16OK   EQU   *\n         LTR   R2,R2              TEST FOR ZERO VALUE\n         BZ    NOBCTR              IF ZERO DO NOT REDUCE\n         BCTR  R2,R0                 REDUCE BY ONE FOR EXECUTE LATER\nNOBCTR   EQU   *\n*********************************************************************\n*                                                                   *\n*        DETERMINE IF THIS IS A MELLON ROUTING REQUEST OR IF IT IS  *\n*        A VALID JES2 CONTROL STATEMENT MEANT TO ROUTE TO A DESTID  *\n*                                                                   *\n*********************************************************************\n*                                                                   *\n*             IF THE LOCATION FROM THE ROUTE STATEMENT IS A VALID   *\n*             SCHENV VALUE THEN USE IT FOR ROUTING - ELSE LET JES2  *\n*             HAVE THE STATEMENT TO PROCESS AS IS.                  *\n*                                                                   *\n*          DON'T LET JES HAVE THE SPECIAL CASE OF /*ROUTE XEQ HERE  *\n*                                                                   *\n*********************************************************************\n\n        $GETWORK WORDS=0+(EXIT04WL+3)/4,  GET WORK AREA                X\n               USE=WRK1,                   FOR WRK1                    X\n               WAIT=YES                    WAIT FOR STORAGE\n        LR    R4,R1                       GET ADDRESS OF WORK ARE\n        USING EXIT04W,R4           ESTIABLISH USING FOR WRK AREA\n        MVI   RESNAME,C' '                CLEAR THE RESOURCE NAME\n        MVC   RESNAME+1(L'RESNAME-1),RESNAME\n        MVC   RESNAME(0),0(R3)             MOVE THE RESOURCE NAME\n        EX    R2,*-6                   SET SCHEDULING ENVIRONMENT\n        CLC   RESNAME(5),=C'HERE '     IS THIS A SPECIAL CASE?\n        BE    SETINJCT                   IS SO SKIP SETTING WITH WLM...\n        MVC   IWMSEVWK(IWMSEVLN),IWMSEVL  SET IWMSEVAL PARM LIST\n\n        IWMSEVAL SCHENV=RESNAME,MF=(E,IWMSEVWK)\n\n        LTR   R15,R15\n        BNZ   RETURN0W            YES - BRANCH, CONTINUE\n*\n* OLD LOGIC BELOW: IF VALID DESTID THEN LET JES2 HANDLE IT...\n*\n\n*********************************************************************\n*                                                                   *\n*        SET THE SCHEDULING ENVIRONMENT IN THE JCT.                 *\n*                                                                   *\n*********************************************************************\n\nSETINJCT EQU   *\n         MVI   JCTSCHEN,C' '        BLANK INIT SCHEDULING ENVIRONMENT\n         MVC   JCTSCHEN+1(L'JCTSCHEN-1),JCTSCHEN  *\n         MVC   JCTSCHEN(0),RESNAME  EXECUTED INSTRUCTION\n         EX    R2,*-6               SET SCHEDULING ENVIRONMENT\n\n*********************************************************************\n*                                                                   *\n*        CONVERT THE \"/*ROUTE XEQ\" STATEMENT TO A JCL COMMENT       *\n*        STATEMENT.  THIS WILL PREVENT AN INVALID DESTINATION FROM  *\n*        CAUSING A JCL ERROR.                                       *\n*                                                                   *\n*********************************************************************\n\n         $RETWORK (R4)\n\n         B     RETURN8              BRANCH - SET RETURN CODE = 8\n\n*********************************************************************\n*                                                                   *\n*        RETURN TO CALLER.                                          *\n*                                                                   *\n*********************************************************************\n\nRETURN0W EQU   *\n         $RETWORK (R4)\nRETURN0  XR    R15,R15              SET RETURN CODE = 0\n         B     RETURN               BRANCH - CONTINUE\nRETURN8  L     R15,$F8              SET RETURN CODE = 8\nRETURN  $RETURN RC=(R15)            RETURN TO CALLER\n\n\n         IWMSEVAL MF=(L,IWMSEVL)   IWMSEVAL PARM LIST\nIWMSEVLN EQU   *-IWMSEVL\nROUTCARD DC    C'/*ROUTE '          \"/*ROUTE XEQ\" FIXED TEXT\nXEQ      DC    C'XEQ '                 FLOATING MODIFIER VALUE\nTRANSTBL DC    256X'00'             EXIT04 TRANSLATE TABLE\n         ORG   TRANSTBL+C' '\n         DC    X'FF'                ' '\n         ORG   TRANSTBL+256\n         LTORG\n\n         DROP  R10                  JCT\n\n        $MODEND ,\nEXIT04W  DSECT                     EXIT04 WORKAREA\nWORKID   DS    CL4                 WORK AREA ID\n         DS    CL4                 FOR ALIGNMENT\nRESNAME  DS    CL16                RESOURCE NAME\n         DS    0D\nIWMSEVWK DS    (IWMSEVLN)X         IWMSEVAL PARM LIST WORKAREA\nEXIT04WL EQU   *-EXIT04W           EXIT04 WORKAREA LENGTH\n\n         IWMSET\n         IWMYCON\n\n         END\n./ ADD NAME=LSES503J 0403-00234-03317-2226-00025-00018-00015-T0SM1\n//T0SM503J JOB  (4030,37),'REDO--LSES503',CLASS=X,MSGCLASS=A,\n// REGION=6M,\n//    NOTIFY=&SYSUID\n/*JOBPARM S=TSPC\n/*CNTL SESG03A,EXC\n//*%PDSDOC 00 SMP APPLY LSES503\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=MVS.OSMAINT.USERMODS.ZOS14(LSES503)\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES503) BYPASS(APPLYCHECK).\n  RESETRC .\n  RECEIVE S(LSES503) SOURCEID(SUNTRUST) .\n  SET BDY(AEST03A).\n  APPLY S(LSES503) REDO.\n//\n./ ADD NAME=LSES504  0302-00234-03317-2229-00682-00720-00001-T0SM1\n++USERMOD(LSES504)\n /* ***************************************************************\n    ** * USER EXIT 4 B                                         * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707) .\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STSCX04B),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STSCX04B)\n NAME STSCX04B(R)\n/*\n++SRC(STSCX04B) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\nSTSCX04B TITLE 'JECL CARD SCAN USER EXIT -- PROLOG'\n*\n* FUNCTIONS: THIS MODULE PROCESSES ALL OUR JECL STATEMENTS:\n*            - /*BEFORE <JOBNAME>\n*            - /*WITH <JOBNAME>\n*            - /*AFTER  <JOBNAME>\n*            - /*CNTL   <RESOURCE>(,SHR|EXC)\n*\n*\n* NOTES:     NONE.\n*\n*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE\n*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS\n*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED\n*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF\n*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE\n*  USEFULLNESS OF THE MATERIAL.\n*\n*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,\n*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE\n*  IN THE FUTURE.\n*\n*    SPECIAL THANKS GO TO BOB BREAK OF ST. LOUIS FOR THE ORIGINAL CODE\n*  TO PARSE THE \"/*ROUTE XEQ RESNAME\" CARDS AND SET THE APPROPRIATE\n*  EXECUTION ENVIRONMENT.\n*\n*    SPECIAL THANKS TO JUDY RUNT OF WISCONSIN ELECTRIC FOR THE ORIGINAL\n*  CODE TO HANDLE THE \"/*CNTL BEFORE|AFTER|WITH,RESNAME\" AND \"/*CNTL\n*  RESNAME,EXC|SHR\" ROUTINES.  THE USE OF THE BLOCK EXTENSION REUSABLE\n*  TABLES, BERT'S, TO EXTEND THE JCT AND JQE.\n*\n* ENTRY PT:  EXIT04B -- SUNTRUST'S JECL CARD SCAN EXIT.\n*\n* REVISION HISTORY:\n*\n*   DATE   NAME         DESCRIPTION OF CHANGE\n* -------- ------------ -----------------------------------------------\n*\n***********************************************************************\n         SPACE 3\n&RESOURC SETC  'NO'                ENABLE /*RESOURCE PROCESSING?\n&DEBUG   SETC  'NO'                DEBUGGING FLAG (NO/YES)\n         SPACE 3\n         PRINT OFF                 SUPRESS PRINTING HASP GLOBALS\n         COPY  $HASPGBL\n         PRINT ON                  RESTORE FULL PRINTING\nSTSCX04B $MODULE TITLE='SUNTRUST JECL CARD SCAN USER EXIT',            +\n               RMODE=ANY,                                              +\n               ENVIRON=JES2,                                           +\n               RPL,                                                    +\n               $BUFFER,            GENERATE HASP BUFFER DSECT          +\n               $CADDR,                                                 +\n               $CMB,               ($RDRWORK)                          +\n               $HASPEQU,           GENERATE HASP EQUATES               +\n               $HCT,               GENERATE HASP HCT DSECT             +\n               $HCCT,              ($JCTXGET)                          +\n               $JCT,               GENERATE HASP JCT DSECT             +\n               $JCTX,                                                  +\n               $JQE,               GENERATE HASP JQE DSECT             +\n               $MIT,               GENERATE HASP MIT DSECT             +\n               $MITETBL,                                               +\n               $PADDR,             GENERATE HASP PADDR DSECT           +\n               $PARMLST,                                               +\n               $PCE,               GENERATE HASP PCE DSECT             +\n               $PSV,                                                   +\n               $QSE,               ($HCT)                              +\n               $RDRWORK,           GENERATE HASP RDRWORK DSECT         +\n               $SAFINFO,           ($RDRWORK)                          +\n               $TRE,               ($JCTXGET)                          +\n               $XECB,              ($HCT)                              +\n               $USERCBS            GENERATE USER CBS\n         TITLE 'JECL CARD SCAN USER EXIT'\n***********************************************************************\n*\n*         J C L  /  J E C L  S C A N  S U P P O R T\n*\n***********************************************************************\n*\n* ENTRY POINT DOCUMENTATION:\n*\n*     REGISTERS AT ENTRY;\n*\n*                   R0  =  0 - INDICATES JES2 CONTROL CARD\n*                          4 - INDICATES JCL STATEMENT\n*\n*                   R1  = ADDRESS OF 3 WORD PARM LIST:\n*                         WORD1 - (+0) ADDRESS OF THE CONTROL\n*                                      STATEMENT IMAGE BUFFER\n*                         WORD2 - (+4) ADDRESS OF THE EXIT FLAG\n*                                      BYTE, RDWFLAGX, IN PCE\n*                         WORD3 - (+8) ADDRESS OF THE JCTXWRK\n*                                      FIELD IN THE JCT (80 BYTES)\n*\n*                   R2  = N/A\n*                   R3  = N/A\n*                   R4  = N/A\n*                   R5  = N/A\n*                   R6  = N/A\n*                   R7  = N/A\n*                   R8  = N/A\n*                   R9  = N/A\n*                   R10 = JCT (IF AVAILABLE)\n*                   R11 = HCT\n*                   R12 = N/A (WILL BE OUR BASE REGISTER)\n*                   R13 = PCE\n*                   R14 = RETURN ADDRESS\n*                   R15 = ENTRY ADDRESS\n*\n***********************************************************************\n         SPACE 1\n         USING JCT,R10             ADDRESS THE JCT\n         USING HCT,R11             ADDRESS THE HCT\n         USING PCE,R13             ADDRESS THE PCE\n*\nEXIT04B  $ENTRY BASE=R12           PROVIDE PROCESSOR ENTRY POINT\n         $SAVE ,                   SAVE CALLERS REGISTERS\n         LR    R12,R15             ESTABLISH BASE\n*\n         LR    R9,R1               SAVE PARM REG 1\n         L     R2,0(R9)            POINT TO STATEMENT IMAGE.\n         TM    RDWFLAGX,RDWXCONT   IS THIS A CONTINUATION CARD\n         BO    X004RC00            YES - RETURN TO JES2\n         L     R3,8(R9)            POINT TO JCTXWRK TO BE SURE\n         LTR   R3,R3                 WE ARE IN A JOB.\n         BZ    X004RC00            NO -- RETURN TO JES2\n         LTR   R10,R10             ARE WE IN A JOB (DOUBLE CHECK)\n         BZ    X004RC00            NO -- RETURN TO JES2\n         LTR   R0,R0               IS THIS A JES2 JECL STATEMENT?\n         BZ    JECL                YES - GO PROCESS\n         SPACE 1\n**********************************************************************\n*\n*        J C L   C A R D S   P R O C E S S E D   H E R E\n*\n**********************************************************************\n         SPACE 1\nRJCLOK   DS    0H\n         B     X004RC00            RETURN TO JES2\n         SPACE 3\n**********************************************************************\n*\n*        J E C L   C A R D S   P R C E S S E D   H E R E\n*\n**********************************************************************\n         SPACE 1\nJECL     DS    0H\n         AIF   ('&DEBUG' EQ 'NO').NDBMSGS   SKIP DEBUGGING MESSAGES\n         MVC   JCTXWRK(L'DBUGMSG0),DBUGMSG0   MOVE MSG TO BUFFER\n         MVC   JCTXWRK+L'DBUGMSG0(30),0(R2)     AND 30 BYTES OF STMT\n        $WTO   JCTXWRK,L'DBUGMSG0+30,JOB=YES, LOG THE MSG              X\n               ROUTE=$LOG+$MAIN,CLASS=$TRIVIA,PRI=$ST\n.NDBMSGS ANOP  ,                   SKIPPED DEBUGGING MESSAGES\n         CLC   RCNTLCRD,2(R2)      IS THIS A /*CNTL CARD?\n         BE    RCNTCARD            YES - GO PROCESS IT.\n         CLC   RAFTRCRD,2(R2)      IS THIS A /*AFTER CARD?\n         BE    RAFTCARD            YES - GO PROCESS IT.\n         CLC   RWITHCRD,2(R2)      IS THIS A /*WITH CARD?\n         BE    RWTHCARD            YES - GO PROCESS IT.\n         CLC   RBEFRCRD,2(R2)      IS THIS A /*BEFORE CARD?\n         BE    RBEFCARD            YES - GO PROCESS IT.\n         CLC   RROUTCRD,2(R2)      IS THIS A /*ROUTE CARD?\n         BE    RRUTCARD            YES - GO PROCESS IT.\n         B     X004RC00            IF NONE OF THOSE RETURN TO JES\n*\n         TITLE 'JECL CARD SCAN USER EXIT -- /*BEFORE CARD'\n**********************************************************************\n*\n*        / * B E F O R E   J E C L   C A R D\n*\n**********************************************************************\n         SPACE 1\nRBEFCARD DS    0H\n         USING STJCTX,R7\n         BAL   R7,JCTXGET          GET OUR JCT EXTENSION\n         LTR   R7,R1               CHECK RETURN CODE / JCTX ADDR\n         BZ    X004RC12            NO JCTX -- ERROR OUT\n*\n         OI    UJCXMFLG,UBRBEF     SHOW THERE IS A /*BEFORE CARD\n         MVC   RDWMSG(L'RBEAFMSG),RBEAFMSG SET BEFORE AFTER MSG\n         MVC   RDWMSG+7(6),=C'BEFORE' INDICATE TYPE ON MESSAGE\n         LA    R2,8(,R2)           SET START OF SCAN FOR JOBNAME\n         LA    R5,UJCXBFOR         WHERE TO SAVE THE NAME\n         LA    R6,50               MAX POSITIONS TO SEARCH\n*\n* SKIP BLANKS BEFORE THE JOBNAME.\n*\nRFINDCAR DS    0H\n         CLI   0(R2),C' '          CHECK FOR A BLANK\n         BNE   RPUTNAM             NO -- FOUND START OF JOBNAME\n         LA    R2,1(,R2)           POINT TO NEXT POSITION\n         BCT   R6,RFINDCAR         LOOP TILL END\n         B     RBADBEFR            ILLEGAL BEFORE CARD\n*\n* UPDATE THE JCTX WITH THE BEFORE/AFTER JOBNAME.\n*\nRPUTNAM  DS    0H\n         MVC   0(8,R5),0(R2)       PUT NAME IN\n         MVC   RDWMSG+24(8),0(R2)  MOVE JOBNAME INTO MESSAGE\n         $WTO  RDWMSG,L'RBEAFMSG,JOB=YES,              PUT OUT         C\n               ROUTE=$LOG+$MAIN,CLASS=$ACTION,PRI=$ST  THE MESSAGE\n         B     X004RC08            GO TERMINATE NORMALLY\n*\nRBADBEFR EQU   *\n         $MID  935                 SHOW MESSAGE ID.\n         MVC   JCTXWRK(80),RBADBEFM SET IN ERROR MESSAGE\n         OI    RDWFLAGX,RDWXXSEM   SHOW MESSAGE SUPPLIED\n         B     X004RC12            GO TERMINATE JOB\n*\n         TITLE 'JECL CARD SCAN USER EXIT -- /*AFTER CARD'\n*****************************************************************\n*\n*        / * A F T E R   J E C L   C A R D\n*\n*  SYNTAX: /*AFTER <JOBNAME>\n*\n*****************************************************************\n         SPACE 1\nRAFTCARD DS    0H\n         BAL   R7,JCTXGET          GET OUR JCT EXTENSION\n         LTR   R7,R1               CHECK RETURN CODE / JCTX ADDR\n         BZ    X004RC12            NO JCTX -- ERROR OUT\n*\n         OI    UJCXMFLG,UBRAFT     SET TO /*AFTER CARD\n         MVC   RDWMSG(L'RBEAFMSG),RBEAFMSG SET BEFORE/AFTER MSG\n         MVC   RDWMSG+7(6),=C'AFTER ' INDICATE TYPE ON MESSAGE\n         LA    R2,8(,R2)           SET START OF SCAN\n         LA    R5,UJCXAFTN         SAVE IN AFTER NAME AREA\n         LA    R6,50               MAX POSITIONS TO SEARCH\n*\n* SCAN FOR START OF JOB NAME\n*\nRFINDCA1 DS    0H\n         CLI   0(R2),C' '          CHECK FOR A BLANK\n         BNE   RPUTNAM             NO - FOUND START OF JOBNAME\n         LA    R2,1(,R2)           POINT TO NEXT POSITION\n         BCT   R6,RFINDCA1         LOOP TILL END\n*\n* NO JOBNAME FOUND -- ISSUE ERROR MESSAGE\n*\n         $MID  936                 SHOW MESSAGE ID.\n         MVC   JCTXWRK(80),RBADAFTM SET IN ERROR MESSAGE\n         OI    RDWFLAGX,RDWXXSEM   SHOW MESSAGE SUPPLIED\n         B     X004RC12            GO TERMINATE JOB\n*****************************************************************\n*\n*        / * W I T H    J E C L   C A R D\n*\n*  SYNTAX: /*WITH <JOBNAME>\n*\n*****************************************************************\nRWTHCARD DS    0H\n         BAL   R7,JCTXGET          GET OUR JCT EXTENSION\n         LTR   R7,R1               CHECK RETURN CODE / JCTX ADDR\n         BZ    X004RC12            NO JCTX -- ERROR OUT\n*\n         OI    UJCXMFLG,UBRWITHF   SET TO /*WITH CARD\n         MVC   RDWMSG(L'RBEAFMSG),RBEAFMSG SET BEFORE/AFTER MSG\n         MVC   RDWMSG+7(6),=C'WITH  ' INDICATE TYPE ON MESSAGE\n         LA    R2,7(,R2)           SET START OF SCAN\n         LA    R5,UJCXWITH         POINT TO WITH JOBNAME AREA\n         LA    R6,50               MAX POSITIONS TO SEARCH\n*\n* SCAN FOR START OF JOB NAME\n*\nRFINDCAW DS    0H\n         CLI   0(R2),C' '          CHECK FOR A BLANK\n         BNE   RPUTNAM             NO - FOUND START OF JOBNAME\n         LA    R2,1(,R2)           POINT TO NEXT POSITION\n         BCT   R6,RFINDCAW         LOOP TILL END\n*\n* NO JOBNAME FOUND -- ISSUE ERROR MESSAGE\n*\n         $MID  936                 SHOW MESSAGE ID.\n         MVC   JCTXWRK(80),RBADAFTM SET IN ERROR MESSAGE\n         OI    RDWFLAGX,RDWXXSEM   SHOW MESSAGE SUPPLIED\n         B     X004RC12            GO TERMINATE JOB\n         TITLE 'JECL CARD SCAN USER EXIT -- /*CNTL CARD'\n**********************************************************************\n*\n*        / * C N T L   J E C L   C A R D\n*\n*  SYNTAX: /*CNTL  <RESOURCE>(,SHR|EXC)\n*\n**********************************************************************\n         SPACE 1\nRCNTCARD DS    0H\n         BAL   R7,JCTXGET          GET OUR JCT EXTENSION\n         LTR   R7,R1               CHECK RETURN CODE / JCTX ADDR\n         BZ    X004RC12            NO JCTX -- ERROR OUT\n*\n         OI    UJCXMFLG,UBRCNTL    SET TO /*CNTL CARD\n         LA    R2,6(,R2)           SET START OF SCAN\n         LA    R4,30               MAX FOR SEARCH\n*\n* SCAN FOR START OF RESOURCE NAME\n*\nRCTLFIND DS    0H\n         CLI   0(R2),C' '          CHECK FOR A BLANK\n         BNE   RCTLGOT             NO - GOT NEXT WORD\n         LA    R2,1(,R2)           BUMP TO NEXT POSITION\n         BCT   R4,RCTLFIND         CONTINUE\n         B     RBADCNTL            ERROR IF HERE\n*\n* SCAN FOR END OF RESOURCE NAME\n*\nRCTLGOT  DS    0H\n         LA    R4,8                MAX FOR SEARCH\n         LR    R6,R2               SAVE STARTING POINT\n         MVC   RDWMSG(L'RCNTMSG1),RCNTMSG1 SET IN RESOURCE MSG\n         MVC   RDWMSG+22(12),0(R2) MOVE IN CONTROL INFO.\n         $WTO  RDWMSG,L'RCNTMSG1,JOB=YES,     PUT OUT                  X\n               ROUTE=$LOG+$MAIN,CLASS=$ACTION,PRI=$ST THE MSG\n*\n* SCAN FOR END OF RESOURCE NAME\n*\nREXCFIND DS    0H\n         CLI   1(R6),C','          CHECK FOR A COMMA\n         BE    REXCGOT             YES - GOT IT\n         CLI   1(R6),C' '          BLANK TERMINATES NAME ALSO\n         BE    REXCGOT             GOT IT\n         LA    R6,1(,R6)           POINT TO NEXT POSITION\n         BCT   R4,REXCFIND         CONTINUE\n         B     RBADCNTL            ERROR IF HERE\n*\n* CHECK TYPE OF CONTROL DESIRED (SHR OR EXC) AND SET FLAGS ACCORDINGLY\n*\nREXCGOT  DS    0H\n         CLC   2(3,R6),=C'EXC'     EXCLUSIVE CNTL DESIRED\n         BNE   RTRYSHR             NO TRY SHR\n         MVI   UJCXWORK,C'E'       SHOW ITS EXCLUSIVE\n*\n* ADD THE NAME AND THE SHARING TYPE TO UJCXDNAM.\n*\nREXCPUT  DS    0H\n         SR    R6,R2               GET LENGTH-1 OF RESOURCE NAME\n         SLR   R5,R5               ZERO FOR IC\n         IC    R5,UJCXMFLG         FLAGS AND CNTL COUNT\n         SRL   R5,4                SHIFT OUT FLAGS\nRCTLCTL  DS    0H\n         LA    R1,UBRNCTL          MAX # OF NAMES\n         CR    R5,R1               LESS THAN MAX #\n         BNL   RBADCNT1            NO - TOO MANY SPECIFICATIONS\n         MH    R5,=Y(UBRDNAML)     MULTIPLY BY FIELD LENGTH\n         LA    R1,UJCXDNAM(R5)     PROPER NAME DISPLACEMENT\n         MVC   0(8,R1),$BLANKS     BLANK OUT NAME\n         EX    R6,RMOVCNTL         MOVE CNTL NAME TO UJCXDNAM\n         MVC   8(1,R1),UJCXWORK    COPY THE SHARE TYPE BYTE TO UJCXDNAM\n*\n         IC    R5,UJCXMFLG         GET FLAGS AND CNTL COUNT\n         LA    R5,16(0,R5)         INCREMENT CNTL COUNT BY ONE\n         STC   R5,UJCXMFLG         UPDATE CNTL COUNT\n         B     X004RC08            GO END NORMALLY\n*\nRMOVCNTL MVC   0(0,R1),0(R2)       MOVE CNTL NAME TO UJCXDNAM\n*\nRTRYSHR  DS    0H\n         MVI   UJCXWORK,C'S'       SHOW ITS SHARE\n         CLC   2(3,R6),=C'SHR'     IS IT SHR\n         BE    REXCPUT             YES, MOVE NAME AND EXIT\n         CLI   1(R6),C' '          BLANK (DEFAULT)\n         BE    REXCPUT             YES - MOVE NAME AND EXIT\n*\nRBADCNTL MVC   JCTXWRK(80),RBADCNTM SET IN ERROR MESSAGE\n         $MID  937                 SHOW MESSAGE ID.\n         OI    RDWFLAGX,RDWXXSEM   SHOW MESSAGE SUPPLIED\n         B     X004RC12            GO TERMINATE JOB\n*\nRBADCNT1 DS    0H\n         $MID  938                 SHOW MESSAGE ID.\n         MVC   JCTXWRK(80),RBADCTL1 SET IN ERROR MESSAGE\n         OI    RDWFLAGX,RDWXXSEM   SHOW MESSAGE SUPPLIED\n         B     X004RC12            GO TERMINATE JOB\n*\n         TITLE 'JECL CARD SCAN USER EXIT -- /*ROUTE CARD'\n***********************************************************************\n*\n*        / * R O U T E   J E C L   C A R D\n*\n*  SYNTAX: /*ROUTE XEQ  <RESOURCE>\n*\n***********************************************************************\n         SPACE 1\nRRUTCARD DS    0H\n         LA    R2,7(,R2)           SET START OF SCAN\n         LA    R4,30               MAX FOR SEARCH\n*\n* SCAN FOR \"XEQ\" OR OTHER TYPE OF ROUTING (PRINT/PUNCH)\n*\nRRUTFIND CLI   0(R2),C' '          CHECK FOR A BLANK\n         BNE   RROUTGOT            NO -- FOUND ROUTING TYPE\n         LA    R2,1(,R2)           BUMP TO NEXT POSITION\n         BCT   R4,RRUTFIND         CONTINUE\n         B     X004RC00            ERROR IF HERE, LET JES FIND IT\n*\nRROUTGOT DS    0H\n         CLC   0(3,R2),=C'XEQ'     IS IT RESOURCE ROUTING?\n         BNE   X004RC00            NO -  RETURN TO JES2\n*\n* SCAN FOR RESOURCE NAME\n*\nRXEQCARD DS    0H\n         LA    R2,3(,R2)           SET FOR THIRD OPERAND\n         LA    R3,60               MAXIMUM LENGTH FOR SEARCH\n*\nRRCOMP3  CLI   0(R2),C' '          CHECK FOR A BLANK\n         BNE   RXEQOP3             NO - PROCESS THIRD OPERAND\n         LA    R2,1(R2)            STEP TO NEXT CHARACTER\n         BCT   R3,RRCOMP3          LOOP TILL END\n         B     RBADROUT            ERROR IF END OF CARD\n*\nRXEQOP3  DS    0H\n*                                  SPECIALIZED PROCESSING FOR\n*                                  /*ROUTE XEQ STUFF STATEMENTS COULD\n*                                  BE PLACED HERE..... NORMAL ROUTING\n*                                  IS HANDLED IN EXIT04A\n         B     X004RC00            NO -- MAY BE JES2 EXECUTION         X\n                                         ROUTING CARD; GIVE TO JES2\n         SPACE 2\nRBADROUT DS    0H\n         $MID  940                 SHOW MESSAGE ID.\n         MVC   JCTXWRK(80),RBADRUTM MOVE ERROR MESSAGE INTO WORK AREA\n         MVC   JCTXWRK+9(8),0(R2)  SET RESOURCE NAME INTO MESSAGE\n         OI    RDWFLAGX,RDWXXSEM   SHOW MESSAGE SUPPLIED\n         B     X004RC12            GO TERMINATE JOB\n         EJECT\n***********************************************************************\n*\n*     C O M M O N   R E T U R N   P O I N T S\n*\n***********************************************************************\n         SPACE 3\nX004RC00 DS    0H\n         XR    R15,R15             SET RC=0 -- CALL OTHER EXITS\n         B     X004RTN             GO RETURN\n         SPACE 2\nX004RC08 DS    0H\n         LA    R15,8               SET RC=8 -- EXIT HANDLED THE CARD\n         B     X004RTN             GO RETURN\n         SPACE 2\nX004RC12 DS    0H\n         LA    R15,12              SET RC=12 -- CANCEL THE JOB\n         B     X004RTN             GO RETURN\n         SPACE 2\nX004RTN  DS    0H                  COMMON RETURN\n         $RETURN RC=(R15)          RETURN TO CALLER\n         TITLE 'JECL CARD SCAN USER EXIT -- CONSTANTS AND DSECTS'\n***********************************************************************\n*\n*        MISCELLANEOUS CONSTANTS AND DSECTS FOR JCL/JECL SCAN\n*\n***********************************************************************\nDBLWORD  DS    D                   DOUBLE WORD WORK AREA\nRES1DGIT DS    CL1                 1 DIGIT STORAGE AREA\nRES2DGIT DS    CL2                 2 DIGIT STORAGE AREA\n*\nRJOBPCRD DC    C'JOBPARM '         JES2   /*JOBPARM CARD ID.\nRCNTLCRD DC    C'CNTL'             MELLON /*CNTL    CARD ID.\nRWITHCRD DC    C'WITH'             MELLON /*WITH    CARD ID.\nRAFTRCRD DC    C'AFTER'            MELLON /*AFTER   CARD ID.\nRBEFRCRD DC    C'BEFORE'           MELLON /*BEFORE  CARD ID.\nRROUTCRD DC    C'ROUTE'            JES2   /*ROUTE   CARD ID.\nRRESCRD  DC    C'RESOURCE'         STSC  /*RESOURCE CARD ID.\n*\nJOBPEYEC DC    CL8'**COPY**'       EYECATCHER FOR OUR /*JOBPARM CARD\n*\nJOBPOUTM DC    CL80'OUTNAME VALUE IS MISSING OR LONGER THAN 8 CHARACTERX\n               S.'\n*\nRBADBEFM DC    CL80'JOBNAME SPECIFIED ON /*BEFORE STATEMENT IS INVALID.X\n               '\n*\nRBADAFTM DC    CL80'JOBNAME SPECIFIED ON /*AFTER STATEMENT IS INVALID.'\n*\nRBADCNTM DC    CL80'PARM SPECIFIED ON /*CNTL STATEMENT IS INVALID.'\n*\nRBADCTL1 DC    CL80'THERE HAVE BEEN TOO MANY /*CNTL CARDS SPECIFIED.  TX\n               HE MAXIMUM IS 4.'\n*\nROUTORDM DC    CL80'/*BEFORE AND /*AFTER STATEMENTS ARE OUT OF ORDER.'\n*\nRBADRUTM DC    CL80'RESOURCE RRRRRRRR SPECIFIED ON ROUTE CARD INVALID.'\n*\n         AGO   .RRNITE3            SKIP RESOURCE ROUTING MESSAGES\nRCPUMSG1 DC    CL80'CPU SPECIFIED ON ROUTE CARD INVALID.'\n*\nRROUMSG1 $MSG  942,'* -- RESOURCE ROUTING = ******** --'\n.RRNITE3 ANOP  ,                   SKIPPED ROUTING MESSAGES\n*\n         AIF   ('&RESOURC' EQ 'NO').NORES2 SKIP /*RESOURCE CARD\nRBADRESM DC    CL80'PARM SPECIFIED ON /*RESOURCE CARD IS INVALID.'\n*\nRRESMSG1 $MSG  945,'* -- RESOURCE INFO = *********** --'\n.NORES2  ANOP  ,                   SKIPPED /*RESOURCE CARD PROCESSING\n*\nRCNTMSG1 $MSG  943,'* -- CONTROL INFO = ************ --'\n*\nRBEAFMSG $MSG  944,'* -- ****** JOBNAME = ********   --'\n*\n         AIF   ('&DEBUG' EQ 'NO').NDBMSGT   SKIP DEBUGGING MESSAGES\nDBUGMSG0 $MSG  000,'STSCX04B DEBUG:  JECL='\n.NDBMSGT ANOP  ,                   SKIPPED DEBUGGING MESSAGES\n*\n         SPACE 2\n         SPACE 2\n         LTORG ,\n*\n         TITLE 'JECL CARD SCAN USER EXIT -- GET OUR JCT EXTENSION'\n**********************************************************************\n*\n* SUBROUTINE TO LOCATE OUR JCT EXTENSION\n*\n* ENTRY POINT DOCUMENTATION:\n*\n* CALLING SEQUENCE:\n*\n*        BAL   R7,JCTXGET          GET OUR JCT EXTENSION\n*        LTR   RX,R1               GET JCTX ADDR / RETURN CODE\n*        BZ    NOJCTX              NO JCTX\n*\n* REGISTER USAGE:\n*\n*     ON ENTRY    USAGE WITH SUBROUTINE                  ON RETURN\n*     ----------- -------------------------------------- -------------\n* R0  N/A         USED BY $JCTXGET                       DESTROYED\n* R1  N/A         USED BY $JCTXGET                       ADDR OF JCTX\n* R2  N/A         UNUSED                                 NO CHANGE\n* R3  N/A         UNUSED                                 NO CHANGE\n* R4  N/A         UNUSED                                 NO CHANGE\n* R5  N/A         UNUSED                                 NO CHANGE\n* R6  N/A         UNUSED                                 NO CHANGE\n* R7  RETURN ADDR UNUSED                                 NO CHANGE\n* R8  N/A         UNUSED                                 NO CHANGE\n* R9  N/A         UNUSED                                 NO CHANGE\n* R10 JCT ADDR    ADDRESS OF THE JCT (MUST BE VALID)     NO CHANGE\n* R11 HCT ADDR    UNUSED                                 NO CHANGE\n* R12 BASE REG    BASE REG                               NO CHANGE\n* R13 PCE ADDR    UNUSED                                 NO CHANGE\n* R14 N/A         UNUSED                                 NO CHANGE\n* R15 N/A         UNUSED                                 NO CHANGE\n*\n**********************************************************************\n         SPACE 1\nJCTXGET  DS    0H\n        $JCTXGET  JCT=(R10),       GET OUR JCT EXTENSION               X\n               TYPE='USER',MOD=1,                                      X\n               NOTFOUND=MAKEJCTX,                                      X\n               FOUND=GOTJCTX,                                          X\n               ERRET=BADJCTX       SPECIFY ERROR RETURN\nGOTJCTX  BR    R7                  RETURN WITH JCTX ADDR IN R1\nMAKEJCTX EQU   *\n        $JCTXADD  JCT=(R10),       GET OUR JCT EXTENSION               X\n               TYPE='USER',MOD=1,                                      X\n               LENGTH=UJCXSLN1,                                        X\n               OKRET=GOTJCTX,      GOOD RETURN ( WE MADE ONE )         X\n               NOSPACE=JCTXSERR,   NO SPACE LEFT TO ADD A JCTX         X\n               FOUND=LOGICERR,     THIS SHOULD NOT HAPPEN              X\n               ERRET=BADJCTX       SPECIFY ERROR RETURN\nBADJCTX  DS    0H\n         L     R1,=A(BADJCTXM)     GET MSG ADDRESS\n         LA    R0,L'BADJCTXM       GET MSG LENGTH\n        $WTO   (R1),(R0),ROUTE=$MAIN,CLASS=$ALWAYS\n         SR    R1,R1               ZERO FOR ERROR RETURN CODE\n         BR    R7                  RETURN WITH ERROR\n*\nBADJCTXM $MSG  999,'STSCX04B-E UNABLE TO LOCATE JCTX.'\nLOGICERR DS    0H\n         L     R1,=A(LOGERRM)      GET MSG ADDRESS\n         LA    R0,L'LOGERRM        GET MSG LENGTH\n        $WTO   (R1),(R0),ROUTE=$MAIN,CLASS=$ALWAYS\n         SR    R1,R1               ZERO FOR ERROR RETURN CODE\n         BR    R7                  RETURN WITH ERROR\n*\nLOGERRM  $MSG  999,'STSCX04B-E LOGIC ERROR CREATING JCTX.'\nJCTXSERR DS    0H\n         L     R1,=A(SPCERRM)      GET MSG ADDRESS\n         LA    R0,L'SPCERRM        GET MSG LENGTH\n        $WTO   (R1),(R0),ROUTE=$MAIN,CLASS=$ALWAYS\n         SR    R1,R1               ZERO FOR ERROR RETURN CODE\n         BR    R7                  RETURN WITH ERROR\n*\nSPCERRM  $MSG  999,'STSCX04B-E NO SPACE LEFT FOR NEW JCTX.'\n         AGO   .NORTXT2            SKIP TO VERIFY NOT USED ANYMORE\n         TITLE 'JECL CARD SCAN USER EXIT -- TEXT SCAN SUBROUTINE'\n**********************************************************************\n*\n*               T E X T   S C A N   R O U T I N E\n*\n**********************************************************************\n* ENTRY POINT DOCUMENTATION:\n*\n*     REGISTERS AT ENTRY;\n*\n*                   R0  = ADDRESS OF TEXT ARGUMENT -\n*                         1 BYTE MACHINE LEN + TEXT\n*                   R1  = ADDRESS OF 80 BYTE CARD IMAGE\n*                   R10 = JCT\n*                   R11 = HCT\n*                   R12 = R12\n*                   R13 = PCE\n*                   R14 = RETURN\n*                   R15 = ENTRY\n*\n*     REGISTERS AT EXIT;\n*\n*                   R1  =       = ADDRESS OF TEXT (IF LOCATED)\n*                   R15 =  00   = TEXT LOCATED\n*                       =  04   = TEXT NOT LOCATED\n*\n**********************************************************************\n         SPACE 1\n         USING JCT,R10             ADDRESS THE JCT\n         USING HCT,R11             ADDRESS THE HCT\n         USING PCE,R13             ADDRESS THE PCE\n         SPACE 3\nRTXTSCAN $ENTRY BASE=R12           ROUTINE ENTRY POINT\n         $SAVE ,                   SAVE CALLERS REGISTERS\n         LR    R12,R15             ESTABLISH BASE\n*                                  R1 => CARD IMAGE\n         LA    R2,1                R2 => INCREMENT\n         LA    R3,79(,R1)          R3 => SEARCH TERMINATION POINT\n         LR    R4,R0               COPY PARM REG 0\n         XR    R5,R5               CLEAR FOR WORK\n         IC    R5,0(,R4)           R5 = MACHINE TEXT STRING LEN\n         LA    R4,1(,R4)           R4 => TARGET TEXT STRING\n         SR    R3,R5               R3 => ADJUSTED TERMINATION\n         SPACE 1\nRTXTLOOP DS    0H                  LOOP SEARCHING FOR TEXT\n         EX    R5,RTXTCLC          IS THIS A MATCH ??\n         BE    RTXTFND             YES, EXIT LOOP\n         BXLE  R1,R2,RTXTLOOP      NO, INCREMENT & LOOP AGAIN\n         LA    R15,4               SET RC=4\n         B     RTXTEXIT            GO RETURN TO CALLER\n         SPACE 1\nRTXTFND  DS    0H                  SPECIFIED TEXT FOUND\n         $STORE (R1)               PASS BACK POINTER TO TEXT\n         XR    R15,R15             SET RC=0\nRTXTEXIT DS    0H\n         $RETURN RC=(R15)          RETURN TO CALLER\n         SPACE 1\nRTXTCLC  CLC   0(*-*,R1),0(R4)     *** E X E C U T E D   ***\n         SPACE 1\n         LTORG ,                   EXPAND LITERAL POOL HERE\n         SPACE 1\n         DROP  R10,R11,R13\n.NORTXT2 ANOP  ,\n         TITLE 'JECL CARD SCAN USER EXIT -- EPILOG'\n         $MODEND ,\n         END   ,\n./ ADD NAME=LSES504J 0402-00234-03317-2234-00025-00018-00005-T0SM1\n//T0SM504J JOB  (4030,37),'REDO--LSES504',CLASS=X,MSGCLASS=A,\n//  REGION=6M,\n//    NOTIFY=&SYSUID\n//*\n//*%PDSDOC 00 SMP APPLY LSES504\n/*JOBPARM S=TSPC\n/*CNTL SESG03A,EXC\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=MVS.OSMAINT.USERMODS.ZOS14(LSES504)\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES504) BYPASS(APPLYCHECK).\n  RESETRC .\n  RECEIVE S(LSES504) SOURCEID(SUNTRUST) .\n  SET BDY(AEST03A).\n  APPLY S(LSES504) REDO.\n./ ADD NAME=LSES505  0202-00234-03317-2235-00777-00786-00001-T0SM1\n++USERMOD(LSES505)\n /* ***************************************************************\n    ** * USER EXIT 5 A                                         * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707) .\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STSCX05A),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STSCX05A)\n NAME STSCX05A(R)\n/*\n++SRC(STSCX05A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\n PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1,REUS=REFR) '\n* *%PDSDOC 00 JES2 EXIT05 ADDS $REPEXIT AND $ADDEXIT COMMANDS\n*********************************************************************\n*                                                                   *\n*                        HASP EXIT 05                               *\n*                                                                   *\n*     THIS EXIT PROCESSES THE $REPEXIT AND $ADDEXIT JES2 COMMANDS   *\n*                                                                   *\n*     > $REPEXIT - REPLACE A JES2 EXIT MODULE.  COMMAND SYNTAX IS   *\n*                  \"$REPEXIT,MODNAME\".  THE FOLLOWING RULES AND     *\n*                  RESTRICTIONS APPLY TO THE USE OF $REPEXIT:       *\n*               1. THE EXIT MODULE TO BE REPLACED MUST BE A JES2    *\n*                  MODULE.  THE EXIT ENVIRONMENT MAY BE \"JES2\",     *\n*                  \"SUBTASK\", \"USER\", OR \"FSS\".                     *\n*               2. THE EXIT MODULE MUST HAVE BEEN PREVIOUSLY LOADED *\n*                  BY A LOADMOD JES2PARM STATEMENT, OR HASPINIT     *\n*                  DURING THE LAST JES2 INITIALIZATION, OR BY A     *\n*                  PREVIOUS $REPEXIT COMMAND.                       *\n*               3. THE ROUTINE NAMES AND NUMBER OF ROUTINES THAT    *\n*                  ARE ASSOCIATED WITH THE EXIT CANNOT BE CHANGED - *\n*                  $REPEXIT WILL IGNORE NEW/CHANGED ROUTINE NAMES.  *\n*                  IF EITHER OF THESE NEEDS TO BE CHANGED, USE THE  *\n*                  $ADDEXIT COMMAND TO ADD A NEW EXIT LOAD MODULE.  *\n*               4. IF THE ORIGINAL MODULE RESIDES IN THE JES2       *\n*                  PRIVATE AREA, THE NEW COPY WILL BE LOADED INTO   *\n*                  JES2 PRIVATE.  IF THE ORIGINAL MODULE DOES NOT   *\n*                  RESIDE IN THE JES2 PRIVATE AREA, THE NEW COPY    *\n*                  WILL BE LOADED INTO CSA.                         *\n*               5. THE NEW COPY OF THE MODULE MUST BE FOUND IN AN   *\n*                  APF AUTHORIZED LNKLSTXX LIBRARY.                 *\n*     > $ADDEXIT - ADD A JES2 EXIT MODULE.  COMMAND SYNTAX IS       *\n*                  \"$ADDEXIT,MODNAME,EXIT#\".  EXIT# CAN RANGE FROM  *\n*                  1 TO 255 AND MUST BE SPECIFIED.                  *\n*                  THE FOLLOWING RULES AND RESTRICTIONS APPLY TO    *\n*                  THE USE OF $ADDEXIT:                             *\n*               1. THE EXIT MODULE TO BE ADDED MUST BE A JES2       *\n*                  MODULE.  THE EXIT ENVIRONMENT MAY BE \"JES2\",     *\n*                  \"SUBTASK\", \"USER\", OR \"FSS\".                     *\n*               2. THE EXIT MUST NOT BE CURRENTLY DEFINED TO JES2   *\n*                  OR A NEW COPY WILL NOT BE LOADED AND DEFINED.    *\n*               3. THE NEW EXIT MODULE WILL BE LOADED INTO EITHER   *\n*                  JES2 PRIVATE OR CSA, DEPENDING ON THE EXIT       *\n*                  ENVIRONMENT.                                     *\n*               4. THE COPY OF THE EXIT MODULE TO BE ADDED MUST BE  *\n*                  FOUND IN AN APF AUTHORIZED LNKLSTXX LIBRARY.     *\n*               5. THE NEWLY ADDED EXIT MODULE AND ROUTINES MUST BE *\n*                  DEFINED IN JES2PARM BEFORE THE NEXT TIME JES2 IS *\n*                  RESTARTED.  IF THIS IS NOT DONE, AN EXIT MODULE  *\n*                  THAT WAS LOADED INTO JES2 PRIVATE WILL BE LOST   *\n*                  ON A SUBSEQUENT RESTART.                         *\n*                                                                   *\n*     ENTRY POINT: EXIT05                                           *\n*                                                                   *\n*     INPUT REGISTERS:                                              *\n*        R0-4   N/A                                                 *\n*        R5     POINTER TO CURRENT OPERAND ADDRESS                  *\n*        R6     INCREMENT VALUE OF 4                                *\n*        R7     POINTER TO ADDRESS OF LAST OPERAND                  *\n*        R8-10  N/A                                                 *\n*        R11    HCT ADDRESS                                         *\n*        R12    N/A                                                 *\n*        R13    PCE ADDRESS                                         *\n*        R14    RETURN ADDRESS                                      *\n*        R15    ENTRY ADDRESS                                       *\n*                                                                   *\n*     OUTPUT REGISTERS:                                             *\n*        R0     UNCHANGED OR $CRET MESSAGE LENGTH                   *\n*        R1-14  UNCHANGED                                           *\n*        R15    RETURN CODE                                         *\n*                                                                   *\n*     REGISTER USAGE(INTERNAL):                                     *\n*        R0-8   WORK REGISTERS                                      *\n*        R9     WORKAREA ADDRESS                                    *\n*        R10    JCT ADDRESS                                         *\n*        R11    HCT ADDRESS                                         *\n*        R12    BASE REGISTER                                       *\n*        R13    PCE ADDRESS                                         *\n*        R14-15 WORK AND LINKAGE REGISTERS                          *\n*                                                                   *\n*     AUTHOR: BOB BREAK                                             *\n*             ST. LOUIS, MO.                                      *\n*                                                                   *\n*********************************************************************\n\n         COPY  $HASPGBL\n\nSTSCX05A $MODULE ENVIRON=JES2,                                         X\n               RMODE=ANY,                                              X\n               IBMJES2=SAMPLE,                                         X\n               TITLE='JES2 USER EXIT5A',                               X\n               CVT,                                                    X\n               PDS,                                                    X\n               PSA,                                                    X\n               RPL,                                                    X\n               $BUFFER,                                                X\n               $CADDR,                                                 X\n               $CAT,                                                   X\n               $COMWORK,                                               X\n               $DCT,                                                   X\n               $HASPEQU,                                               X\n               $HCT,                                                   X\n               $HCCT,                                                  X\n               $JCT,                                                   X\n               $JCTX,                                                  X\n               $JOE,                                                   X\n               $JQE,                                                   X\n               $LMT,                                                   X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PCE,                                                   X\n               $PIT,                                                   X\n               $PSV,                                                   X\n               $TQE,                                                   X\n               $USERCBS,                                               X\n               $XECB,                                                  X\n               $XIT,                                                   X\n               $XRT\n\nEXIT05A  $ENTRY BASE=R12           EXIT ROUTINE ENTRY POINT\n\n*********************************************************************\n*                                                                   *\n*        SAVE CALLER'S REGISTERS AND ESTABLISH ADDRESSABILITIES.    *\n*                                                                   *\n*********************************************************************\n\n        $SAVE  NAME=EXIT05A        SAVE CALLER'S REGISTERS\n         LR    R12,R15             SET BASE REGISTER\n\n*********************************************************************\n*                                                                   *\n*        OBTAIN A MODULE WORKAREA.                                  *\n*                                                                   *\n*********************************************************************\n\n         LA    R1,EXIT05WL         GET WORKAREA LENGTH\n         LA    R1,3(,R1)           ROUND UP TO WORD BOUNDARY\n         SRL   R1,2                CONVERT TO NUMBER OF WORDS\n         LA    R1,1(,R1)           ADD ONE FOR IDENTIFIER\n        $GETWORK WORDS=(R1),USE=EX05\n         LA    R1,4(,R1)           POINT PAST IDENTIFIER\n         LR    R9,R1               SET WORKAREA ADDRESS\n         LR    R14,R1              SET MOVE TO ADDRESS\n         LA    R15,EXIT05WL        SET MOVE TO LENGTH\n         XR    R1,R1               SET MOVE FROM LENGTH AND PAD\n         MVCL  R14,R0              CLEAR WORKAREA\n         USING EXIT05W,R9\n\n*********************************************************************\n*                                                                   *\n*        DETERMINE IF THIS IS A THE $REPEXIT OR $ADDEXIT COMMAND.   *\n*                                                                   *\n*********************************************************************\n\nEXIT100  LA    R1,COMVERB            GET COMMAND VERB ADDRESS\n         CLC   0(7,R1),=C'REPEXIT'   $REPEXIT COMMAND\n         BE    EXIT200               YES - BRANCH, PROCESS $REPEXIT\n         CLC   0(7,R1),=C'ADDEXIT'   $ADDEXIT COMMAND\n         BE    EXIT300               YES - BRANCH, PROCESS $ADDEXIT\n         XR    R15,R15               SET RETURN CODE\n         B     RETURN                BRANCH - RETURN\n\n*********************************************************************\n*                                                                   *\n*        PROCESS THE $REPEXIT COMMAND.                              *\n*                                                                   *\n*********************************************************************\n\nEXIT200  LA    R1,COMVERB            GET COMMAND VERB ADDRESS\n         MVC   EXITMODN(8),$BLANKS   SAVE MODNAME\n         MVC   EXITMODN(8),8(R1)     *\n\n*********************************************************************\n*                                                                   *\n*        CHECK IF THE EXIT MODULE IS CURRENTLY DEFINED TO JES2.     *\n*                                                                   *\n*********************************************************************\n\nEXIT210  ICM   R8,15,$LMT1           GET LMT ADDRESS\n         BZ    EXIT213               BRANCH - NO LMT CHAIN\n         USING LMT,R8\nEXIT211  CLC   LMTMODNM,EXITMODN     MODULE NAME MATCH?\n         BNE   EXIT212               NO - BRANCH, CONTINUE\n         TM    LMTFLG1,LMT1INVD      LMT INVALID?\n         BZ    EXIT220               NO - BRANCH, CONTINUE\nEXIT212  ICM   R8,15,LMTCHAIN        GET NEXT LMT ENTRY\n         BNZ   EXIT211               LOOP BACK TO CHECK NEXT LMT ENTRY\nEXIT213  MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG1L),MSG1ERR1  SET FIXED MESSAGE TEXT\n         B     EXIT250               BRANCH - CONTINUE\n\n*********************************************************************\n*                                                                   *\n*        INVOKE THE MVS BLDL SERVICE TO CHECK IF A COPY OF THE      *\n*        MODULE IS LOCATED IN A LINKLIST LIBRARY.  IF SO, GET       *\n*        STORAGE TO PERFORM A DIRECTED LOAD.                        *\n*                                                                   *\n*********************************************************************\n\n         USING PDSBLDL,R2\n         USING PDS2,R3\nEXIT220  LA    R2,$GENWORK           USE $GENWORK AS BLDL PARM AREA\n         MVC   PDSBLDLN,$H1          SET NUMBER OF BLDL ENTRIES\n         MVC   PDSBLDLL,=AL2(PDS2BLEN)  SET BLDL ENTRY LENGTH\n         LA    R3,PDSBLDLE           POINT TO THE BLDL ENTRY\n         XC    PDSBLDLE(PDS2BLEN+LMTLEN),PDSBLDLE  CLEAR BLDL WORKAREA\n         MVC   PDS2NAME,EXITMODN     SET MODULE NAME FOR BLDL\n         L     R1,CVTPTR             GET CVT POINTER\n         L     R1,CVTLINK-CVT(,R1)   GET LNKLIST DCB POINTER\n         BLDL  (R1),(R2)             LOCATE MODULE\n         DROP  R2                    PDSBLDL\n         LTR   R15,R15               MODULE LOCATED IN LINKLIST?\n         BNZ   EXIT221               NO - BRANCH, ERROR\n         TM    PDS2LIBF,PDS2LLNK     MODULE RESIDE IN LINKLIST?\n         BO    EXIT222               YES - BRANCH, CONTINUE\nEXIT221  MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG1L),MSG1ERR2  SET FIXED MESSAGE TEXT\n         B     EXIT250               BRANCH - CONTINUE\nEXIT222  XR    R0,R0                 GET MODULE LENGTH\n         ICM   R0,7,PDS2STOR           FROM THE PDS DIRECTORY\n         XR    R2,R2                 ASSUME SP=0 (JES2 PRIVATE MODULE)\n         TM    LMTFLG1,LMT1PVT       MODULE LOADED IN JES2 PRIVATE?\n         BO    EXIT223               YES - BRANCH, CONTINUE\n         ICM   R2,1,SP241            SET SP=241\nEXIT223  TM    PDS2FTB2,PDSLRMOD     MODULE RMODE31?\n         BO    EXIT224               YES - BRANCH, CONTINUE\n         GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=BELOW\n         B     EXIT225               BRANCH - CONTINUE\nEXIT224  GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=ANY\nEXIT225  LR    R6,R1                 SET STORAGE ADDRESS FOR LOAD\n         LR    R14,R1                SET MOVE TO ADDRESS\n         XR    R15,R15               SET MOVE TO LENGTH\n         ICM   R15,7,PDS2STOR        *\n         XR    R1,R1                 SET MOVE FROM LENGTH AND PAD\n         MVCL  R14,R0                CLEAR MODULE AREA\n\n*********************************************************************\n*                                                                   *\n*        PERFORM THE DIRECTED LOAD OF THE NEW MODULE.               *\n*                                                                   *\n*********************************************************************\n\nEXIT230  LA    R4,EXITMODN           SET MODNAME ADDRESS\n         L     R5,CVTPTR             GET CVT POINTER\n         L     R5,CVTLINK-CVT(,R5)   GET LNKLIST DCB POINTER\n         IPK   0(0)                  GET CURRENT PSW KEY\n         SPKA  0(0)                  SET PSW KEY ZERO\n         LOAD  EPLOC=(R4),DCB=(R5),ADDR=(R6),ERRET=EXIT231\nEXIT231  SPKA  0(R2)                 RESET PSW KEY\n         LTR   R15,R15               LOAD SUCCESSFUL?\n         BZ    EXIT235               YES - BRANCH, CONTINUE\n         MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG1L),MSG1ERR3  SET FIXED MESSAGE TEXT\n         XR    R0,R0                 GET MODULE LENGTH\n         ICM   R0,7,PDS2STOR           FROM THE PDS DIRECTORY\n         XR    R2,R2                 ASSUME SP=0 (JES2 PRIVATE MODULE)\n         TM    LMTFLG1,LMT1PVT       MODULE LOADED IN JES PRIVATE?\n         BO    EXIT232               YES - BRANCH, CONTINUE\n         ICM   R2,1,SP241            SET SP=241\nEXIT232  FREEMAIN RU,A=(R6),LV=(R0),SP=(R2),KEY=0\n         B     EXIT250               BRANCH, CONTINUE\n\n*********************************************************************\n*                                                                   *\n*        REPLACE THE MODULE INFORMATION IN THE LMT.                 *\n*                                                                   *\n*********************************************************************\n\nEXIT235  ST    R6,LMTMITAD           SET MODULE ADDRESS IN LMT\n         TM    PDS2FTB2,PDSLRMOD     MODULE RMODE31?\n         BO    EXIT236               YES - BRANCH, CONTINUE\n         OI    LMTFLG2,LMT2RM24      SET RMODE24 FLAG ON\n         NI    LMTFLG2,255-LMT2RM31  TURN RMODE31 FLAG OFF\n         B     EXIT237               BRANCH - CONTINUE\nEXIT236  OI    LMTFLG2,LMT2RM31      SET RMODE31 FLAG ON\n         NI    LMTFLG2,255-LMT2RM24  TURN RMODE24 FLAG OFF\nEXIT237  TM    LMTFLG1,LMT1PVT       MODULE LOADED IN JES PRIVATE?\n         BO    EXIT240               YES - BRANCH, CONTINUE\n         MVI   LMTSUBPL,X'F1'        SET SP=241\n         MVC   LMTMODLN,PDS2STOR     SET MODULE LENGTH\n         OI    LMTFLG1,LMT1CMN       SET LOAD FLAGS\n         DROP  R3                    PDS2\n\n*********************************************************************\n*                                                                   *\n*        REPLACE THE MODULE INFORMATION IN THE XRT.                 *\n*                                                                   *\n*********************************************************************\n\n         USING XIT,R1\n         USING XRT,R3\nEXIT240  LA    R0,XIT#PTS            GET MAXIMUM # XIT ENTRIES\n         L     R1,$XITADDR           GET XIT CHAIN ADDRESS\nEXIT241  ICM   R3,15,XITXRTAD        GET XRT ADDRESS\n         BZ    EXIT246               BRANCH - NO XRT, CHECK NEXT XIT\n         XR    R15,R15               GET NUMBER OF ROUTINES\n         IC    R15,XIT#RTNS            ASSOCIATED WITH THIS EXIT POINT\nEXIT242  L     R14,LMTMITAD          GET MIT ADDRESS\n         L     R14,MITENTAD-MIT(,R14)  GET MITETBL ADDRESS\n         USING MTE,R14\nEXIT243  CLI   MTENAME,X'FF'         LAST MTE?\n         BE    EXIT245               YES - BRANCH, CHECK NEXT XRT\n         CLC   XRTRNAME,MTENAME      XRT NAME MATCH MIT NAME?\n         BE    EXIT244               YES - BRANCH, CONTINUE\n         LA    R14,MTELEN(,R14)      BUMP TO NEXT MITETBL ENTRY\n         B     EXIT243               LOOP BACK FOR NEXT MITETBL ENTRY\nEXIT244  MVC   XRTRADDR,MTEADDR      SET ROUTINE ADDR IN XRT\nEXIT245  LA    R3,XRTLNGTH(,R3)      BUMP TO NEXT XRT ENTRY\n         BCT   R15,EXIT242           LOOP BACK FOR NEXT XRT ENTRY\n         DROP  R3,R8,R14             XRT, LMT, MTE\nEXIT246  LA    R1,XITLNGTH(,R1)      BUMP TO NEXT XIT ENTRY\n         BCT   R0,EXIT241            LOOP BACK FOR NEXT XIT ENTRY\n         DROP  R1                    XIT\n         MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG1L),MSG1OK  SET FIXED MESSAGE TEXT\n\n*********************************************************************\n*                                                                   *\n*        SET THE MESSAGE LENGTH AND RETURN.                         *\n*                                                                   *\n*********************************************************************\n\nEXIT250  LA    R0,8+MSG1L            GET MESSAGE LENGTH\n        $STORE (R0)                    AND SET IN RETURN R0\n         MVC   RETCODE,=F'16'        SET RETURN CODE\n         B     RETURN                BRANCH - RETURN\n\n*********************************************************************\n*                                                                   *\n*        PROCESS THE $ADDEXIT COMMAND.                              *\n*                                                                   *\n*********************************************************************\n\nEXIT300  LA    R3,COMVERB            GET COMMAND VERB ADDRESS\n         LA    R3,8(,R3)             POINT TO MODULE NAME\n         LR    R15,R3                *\n         LA    R0,9                  SET MAX. MODNAME CHECK LENGTH\nEXIT301  CLI   0(R15),C','           \",\" DELIMITER FOUND?\n         BE    EXIT302               YES - BRANCH, CONTINUE\n         LA    R15,1(,R15)           BUMP TO NEXT MODNAME POSITION\n         BCT   R0,EXIT301            LOOP BACK FOR NEXT CHARACTER\n         MVC   COMMAND(8),=C'$ADDEXIT'  SET COMMAND IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG2L),MSG2ERR1  SET FIXED MESSAGE TEXT\n         B     EXIT390               BRANCH - CONTINUE\nEXIT302  LR    R14,R15               CALCULATE EXIT MODNAME LENGTH\n         SLR   R14,R3                *\n         BCTR  R14,0                 MINUS 1 FOR EXECUTE\n         MVC   EXITMODN(8),$BLANKS   BLANK INIT MODNAME\n         MVC   EXITMODN(0),0(R3)     EXECUTED INSTRUCTION\n         EX    R14,*-6               SAVE MODNAME\n         LA    R15,1(,R15)           POINT TO EXIT NUMBER\n         LR    R3,R15                *\n         LA    R0,4                  SET MAX. EXIT # CHECK LENGTH\nEXIT303  CLI   0(R15),C','           \",\" DELIMITER FOUND?\n         BE    EXIT304               YES - BRANCH, CONTINUE\n         CLI   0(R15),C' '           \" \" DELIMITER FOUND?\n         BE    EXIT304               YES - BRANCH, CONTINUE\n         LA    R15,1(,R15)           BUMP TO NEXT EXIT NBR POSITION\n         BCT   R0,EXIT303            LOOP BACK FOR NEXT CHARACTER\nEXIT304  LR    R14,R15               CALCULATE EXIT NUMBER LENGTH\n         SLR   R14,R3                *\n         BCTR  R14,0                 MINUS 1 FOR EXECUTE\n         TRT   0(0,R3),TRTABLE       EXECUTED INSTRUCTION\n         EX    R14,*-6               EXIT NUMBER VALID?\n         BZ    EXIT305               YES - BRANCH, CONTINUE\n         MVC   COMMAND(8),=C'$ADDEXIT'  SET COMMAND IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG2L),MSG2ERR2  SET FIXED MESSAGE TEXT\n         B     EXIT390               BRANCH - CONTINUE\nEXIT305  PACK  WORKDBL,0(0,R3)       EXECUTED INSTRUCTION\n         EX    R14,*-6               CONVERT EXIT NUMBER TO DECIMAL\n         CVB   R1,WORKDBL            CONVERT EXIT NUMBER TO BINARY\n         STCM  R1,1,EXITNBR          SAVE EXIT NUMBER\n         C     R1,$F1                EXIT NUMBER LESS THAN 1?\n         BL    EXIT306               YES - BRANCH, ERROR\n         C     R1,$F255              EXIT NUMBER GREATER THAN 255?\n         BNH   EXIT310               NO - BRANCH, CONTINUE\nEXIT306  MVC   COMMAND(8),=C'$ADDEXIT'  SET COMMAND IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG2L),MSG2ERR3  SET FIXED MESSAGE TEXT\n         B     EXIT390               BRANCH - CONTINUE\n\n*********************************************************************\n*                                                                   *\n*        CHECK IF THE EXIT MODULE IS CURRENTLY DEFINED TO JES2.     *\n*                                                                   *\n*********************************************************************\n\nEXIT310  ICM   R8,15,$LMT1           GET LMT ADDRESS\n         BZ    EXIT313               BRANCH - NO LMT CHAIN\n         USING LMT,R8\nEXIT311  CLC   LMTMODNM,EXITMODN     MODULE NAME MATCH?\n         BNE   EXIT312               NO - BRANCH, CONTINUE\n         TM    LMTFLG1,LMT1INVD      LMT INVALID?\n         BO    EXIT312               YES - BRANCH, CONTINUE\n         MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG2L),MSG2ERR4  SET FIXED MESSAGE TEXT\n         B     EXIT390               BRANCH - CONTINUE\nEXIT312  ICM   R8,15,LMTCHAIN        GET NEXT LMT ENTRY\n         BNZ   EXIT311               LOOP BACK TO CHECK NEXT LMT ENTRY\nEXIT313  XR    R14,R14               GET NEW EXIT NUMBER\n         ICM   R14,1,EXITNBR         *\n         LA    R1,XITLNGTH           GET XIT LENGTH\n         XR    R0,R0                 CALCULATE XIT INDEX\n         MR    R0,R14                *\n         L     R15,$XITADDR          GET XIT CHAIN ADDRESS\n         ALR   R15,R1                CALCULATE XIT ADDRESS\n         ST    R15,EXITXIT           SAVE XIT ADDRESS\n         USING XIT,R15\n         TM    XITFLAGS,XITCMN       MUST EXIT RESIDE IN CSA/LPA?\n         BZ    EXIT314               NO - BRANCH, CONTINUE\n         OI    WORKFLAG,EXITCSA      SET EXIT RESIDES IN CSA FLAG\n         B     EXIT315               BRANCH - CONTINUE\nEXIT314  OI    WORKFLAG,EXITPVT      SET EXIT RESIDES IN PVT FLAG\n         DROP  R15                   XIT\n\n*********************************************************************\n*                                                                   *\n*        THE EXIT MODULE IS NOT CURRENTLY DEFINED TO JES2, SO       *\n*        ACQUIRE AN LMT FOR THE MODULE.                             *\n*                                                                   *\n*********************************************************************\n\nEXIT315  XR    R2,R2                 ASSUME SP=0 (JES2 PRIVATE MODULE)\n         TM    WORKFLAG,EXITPVT      MODULE LOADED IN JES2 PRIVATE?\n         BO    EXIT316               YES - BRANCH, CONTINUE\n         ICM   R2,1,SP241            SET SP=241\nEXIT316  LA    R0,LMTLEN+$CSBPRFX    GET LMT+PREFIX LENGTH\n         GETMAIN RC,LV=(R0),SP=(R2),LOC=ANY\n         LR    R8,R1                 SAVE NEW LMT PREFIX ADDRESS\n         LR    R14,R1                SET MOVE TO ADDRESS\n         LA    R15,LMTLEN+$CSBPRFX   SET MOVE TO LENGTH\n         XR    R1,R1                 SET MOVE FROM LENGTH AND PAD\n         MVCL  R14,R0                CLEAR LMT AND PREFIX\n         MVC   $CSBID(4,R8),=C'LMT '  SET EYECATCHER IN PREFIX\n         STCM  R2,1,$CSBSPLN(R8)     SET STORAGE SUBPOOL IN PREFIX\n         LA    R0,LMTLEN+$CSBPRFX    SET LMT+PREFIX LENGTH IN PREFIX\n         STCM  R0,7,$CSBSPLN+1(R8)   *\n         LA    R8,$CSBPRFX(,R8)      POINT TO ACTUAL LMT\n         ST    R8,EXITLMTA           SAVE NEW LMT ADDRESS\n\n*********************************************************************\n*                                                                   *\n*        INVOKE THE MVS BLDL SERVICE TO CHECK IF A COPY OF THE      *\n*        MODULE IS LOCATED IN A LINKLIST LIBRARY.  IF SO, GET       *\n*        STORAGE TO PERFORM A DIRECTED LOAD.                        *\n*                                                                   *\n*********************************************************************\n\n         USING PDSBLDL,R2\n         USING PDS2,R3\nEXIT320  LA    R2,$GENWORK           USE $GENWORK AS BLDL PARM AREA\n         MVC   PDSBLDLN,$H1          SET NUMBER OF BLDL ENTRIES\n         MVC   PDSBLDLL,=AL2(PDS2BLEN)  SET BLDL ENTRY LENGTH\n         LA    R3,PDSBLDLE           POINT TO THE BLDL ENTRY\n         XC    PDSBLDLE(PDS2BLEN+LMTLEN),PDSBLDLE  CLEAR BLDL WORKAREA\n         MVC   PDS2NAME,EXITMODN     SET MODULE NAME FOR BLDL\n         L     R1,CVTPTR             GET CVT POINTER\n         L     R1,CVTLINK-CVT(,R1)   GET LNKLIST DCB POINTER\n         BLDL  (R1),(R2)             LOCATE MODULE\n         DROP  R2                    PDSBLDL\n         LTR   R15,R15               MODULE LOCATED IN LINKLIST?\n         BNZ   EXIT321               NO - BRANCH, ERROR\n         TM    PDS2LIBF,PDS2LLNK     MODULE RESIDE IN LINKLIST?\n         BO    EXIT322               YES - BRANCH, CONTINUE\nEXIT321  MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG2L),MSG2ERR5  SET FIXED MESSAGE TEXT\n         B     EXIT333               BRANCH - CONTINUE\nEXIT322  XR    R0,R0                 GET MODULE LENGTH\n         ICM   R0,7,PDS2STOR           FROM THE PDS DIRECTORY\n         XR    R2,R2                 ASSUME SP=0 (JES2 PRIVATE MODULE)\n         TM    WORKFLAG,EXITPVT      MODULE LOADED IN JES2 PRIVATE?\n         BO    EXIT323               YES - BRANCH, CONTINUE\n         ICM   R2,1,SP241            SET SP=241\nEXIT323  TM    PDS2FTB2,PDSLRMOD     MODULE RMODE31?\n         BO    EXIT324               YES - BRANCH, CONTINUE\n         GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=BELOW\n         B     EXIT325               BRANCH - CONTINUE\nEXIT324  GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=ANY\nEXIT325  LR    R6,R1                 SET STORAGE ADDRESS FOR LOAD\n         LR    R14,R1                SET MOVE TO ADDRESS\n         XR    R15,R15               SET MOVE TO LENGTH\n         ICM   R15,7,PDS2STOR        *\n         XR    R1,R1                 SET MOVE FROM LENGTH AND PAD\n         MVCL  R14,R0                CLEAR MODULE AREA\n\n*********************************************************************\n*                                                                   *\n*        PERFORM THE DIRECTED LOAD OF THE NEW MODULE.               *\n*                                                                   *\n*********************************************************************\n\nEXIT330  LA    R4,EXITMODN           SET MODNAME ADDRESS\n         L     R5,CVTPTR             GET CVT POINTER\n         L     R5,CVTLINK-CVT(,R5)   GET LNKLIST DCB POINTER\n         IPK   0(0)                  GET CURRENT PSW KEY\n         SPKA  0(0)                  SET PSW KEY ZERO\n         LOAD  EPLOC=(R4),DCB=(R5),ADDR=(R6),ERRET=EXIT331\nEXIT331  SPKA  0(R2)                 RESET PSW KEY\n         LTR   R15,R15               LOAD SUCCESSFUL?\n         BZ    EXIT335               YES - BRANCH, CONTINUE\n         MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG2L),MSG2ERR6  SET FIXED MESSAGE TEXT\n         XR    R0,R0                 GET MODULE LENGTH\n         ICM   R0,7,PDS2STOR           FROM THE PDS DIRECTORY\n         XR    R2,R2                 ASSUME SP=0 (JES2 PRIVATE MODULE)\n         TM    WORKFLAG,EXITPVT      MODULE LOADED IN JES PRIVATE?\n         BO    EXIT332               YES - BRANCH, CONTINUE\n         ICM   R2,1,SP241            SET SP=241\nEXIT332  FREEMAIN RU,A=(R6),LV=(R0),SP=(R2),KEY=0\nEXIT333  L     R8,EXITLMTA           GET NEW LMT ADDRESS\n         LA    R15,$CSBPRFX          GET PREFIX LENGTH\n         SLR   R8,R15                POINT TO START OF PREFIX\n         XR    R2,R2                 GET LMT SUBPOOL\n         ICM   R2,1,$CSBSPLN(R8)     *\n         XR    R0,R0                 GET LMT+PREFIX LENGTH\n         ICM   R0,7,$CSBSPLN+1(R8)   *\n         FREEMAIN RU,A=(R8),LV=(R0),SP=(R2)\n         B     EXIT390               BRANCH, CONTINUE\n\n*********************************************************************\n*                                                                   *\n*        INITIALIZE THE NEW LMT.                                    *\n*                                                                   *\n*********************************************************************\n\nEXIT335  L     R8,EXITLMTA           GET NEW LMT ADDRESS\n         ST    R6,LMTMITAD           SET MODULE ADDRESS IN LMT\n         MVC   LMTMODNM,EXITMODN     SET MODULE NAME IN LMT\n         TM    PDS2FTB2,PDSLRMOD     MODULE RMODE31?\n         BO    EXIT336               YES - BRANCH, CONTINUE\n         OI    LMTFLG2,LMT2RM24      SET RMODE24 FLAG ON\n         NI    LMTFLG2,255-LMT2RM31  TURN RMODE31 FLAG OFF\n         B     EXIT337               BRANCH - CONTINUE\nEXIT336  OI    LMTFLG2,LMT2RM31      SET RMODE31 FLAG ON\n         NI    LMTFLG2,255-LMT2RM24  TURN RMODE24 FLAG OFF\nEXIT337  TM    WORKFLAG,EXITPVT      MODULE LOADED IN JES PRIVATE?\n         BO    EXIT338               YES - BRANCH, CONTINUE\n         OI    LMTFLG1,LMT1CMN       SET MODULE LOADED IN COMMON FLAG\n         MVI   LMTSUBPL,X'F1'        SET SP=241\n         B     EXIT339               BRANCH - CONTINUE\nEXIT338  OI    LMTFLG1,LMT1PVT       SET MODULE LOADED IN PRIVATE FLAG\nEXIT339  MVC   LMTMODLN,PDS2STOR     SET MODULE LENGTH\n         OI    LMTFLG1,LMT1BSPL      SET BYPASS SPLEVEL CHECK FLAG\n         DROP  R3                    PDS2\n\n*********************************************************************\n*                                                                   *\n*        CHAIN THE NEW LMT.                                         *\n*                                                                   *\n*********************************************************************\n\nEXIT340  TM    WORKFLAG,EXITCSA      MODULE LOADED IN COMMON?\n         BO    EXIT343               YES - BRANCH, CONTINUE\n         ICM   R15,15,$LMTPBOT       GET LAST PRIVATE ENTRY ADDRSS\n         BNZ   EXIT341               BRANCH - CONTINUE\n         ST    R8,$LMT1              RESET FIRST PRIVATE ENTRY ADDRESS\n         B     EXIT342               BRANCH - CONTINUE\nEXIT341  ST    R8,LMTCHAIN-LMT(,R15)  RESET CHAIN IN OLD LAST ENTRY\nEXIT342  MVC   LMTCHAIN,$LMT1C       RESET CHAIN IN NEW LAST ENTRY\n         ST    R8,$LMTPBOT           RESET LAST PRIVATE ENTRY ADDRESS\n         B     EXIT350               BRANCH - CONTINUE\nEXIT343  ICM   R15,15,$LMT1C         GET FIRST CSA ENTRY ADDRESS\n         BNZ   EXIT345               BRANCH - CONTINUE\n         ICM   R1,15,$LMTPBOT        GET LAST PRIVATE ENTRY ADDRSS\n         BZ    EXIT344               BRANCH - NO PRIVATE ENTRIES\n         ST    R8,LMTCHAIN-LMT(,R1)  RESET CHAIN IN LAST PRIVATE ENTRY\nEXIT344  ST    R8,$LMT1C             RESET FIRST CSA ENTRY ADDRESS\n         B     EXIT350               BRANCH - CONTINUE\nEXIT345  CLC   LMTCHAIN-LMT(4,R15),$ZEROS  END OF CSA CHAIN?\n         BE    EXIT346               BRANCH - END OF CSA CHAIN\n         L     R15,LMTCHAIN-LMT(,R15)  GET NEXT CSA ENTRY ADDRESS\n         B     EXIT345               LOOP BACK TO CHECK NEXT ENTRY\nEXIT346  ST    R8,LMTCHAIN-LMT(,R15)  RESET CHAIN IN OLD LAST ENTRY\n\n*********************************************************************\n*                                                                   *\n*        OBTAIN AND INITIALIZE AN XRT FOR EACH NEW EXIT ROUTINE     *\n*        THAT IS DEFINED IN THE NEW EXIT MODULE.                    *\n*                                                                   *\n*********************************************************************\n\nEXIT350  LA    R0,255*WORKXRTL       GET XRT WORKAREA SIZE\n         GETMAIN RC,LV=(R0),LOC=ANY\n         ST    R1,WORKXRTA           SAVE XRT WORKAREA ADDRESS\n         LR    R14,R1                SET MOVE TO ADDRESS\n         LA    R15,255*WORKXRTL      SET MOVE TO LENGTH\n         XR    R1,R1                 SET MOVE FROM LENGTH AND PAD\n         MVCL  R14,R0                CLEAR XRT WORKAREA\n         L     R3,EXITXIT            GET EXIT XIT ADDRESS\n         USING XIT,R3\n         L     R14,LMTMITAD          GET MIT ADDRESS\n         L     R14,MITENTAD-MIT(,R14)  GET MITETBL ADDRESS\n         USING MTE,R14\n         LA    R14,MTELEN(,R14)      BUMP PAST MITETBL EYECATCHER MTE\n         L     R15,WORKXRTA          GET XRT WORKAREA ADDRESS\n         USING WORKXRTE,R15\n         XR    R7,R7                 INIT NEW EXIT ROUTINE COUNT\nEXIT351  CLI   MTENAME,X'FF'         LAST MTE?\n         BE    EXIT352               YES - BRANCH, CONTINUE\n         LA    R7,1(,R7)             INCREMENT EXIT ROUTINE COUNT\n         MVC   EXITRTNN,MTENAME      SAVE EXIT ROUTINE NAME\n         MVC   EXITRTNA,MTEADDR      SAVE EXIT ROUTINE ADDRESS\n         LA    R14,MTELEN(,R14)      BUMP TO NEXT MITETBL ENTRY\n         LA    R15,WORKXRTL(,R15)    BUMP TO NEXT XRT WORKAREA ENTRY\n         B     EXIT351               LOOP BACK FOR NEXT MITETBL ENTRY\n         DROP  R14,R15               MTE, WORKXRTE\nEXIT352  LTR   R7,R7                 ANY NEW EXIT ROUTINES DEFINED?\n         BNZ   EXIT353               YES - BRANCH, CONTINUE\n         OI    LMTFLG1,LMT1INVD      INVALIDATE THE NEW LMT\n         MVC   COMMAND(8),=C'$ADDEXIT'  SET COMMAND IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG2L),MSG2ERR7  SET FIXED MESSAGE TEXT\n         LA    R0,255*WORKXRTL       GET XRT WORKAREA SIZE\n         L     R1,WORKXRTA           GET XRT WORKAREA ADDRESS\n         FREEMAIN RU,A=(R1),LV=(R0)\n         B     EXIT390               BRANCH - CONTINUE\nEXIT353  STCM  R7,1,WORKXRT#         SAVE NUMBER OF NEW XRTS\n         XR    R2,R2                 GET # ROUTINES CURRENTLY DEFINED\n         ICM   R2,1,XIT#RTNS         *\n         ALR   R7,R2                 CALCULATE NUMBER OF XRTS (NEW+OLD)\n         LA    R15,XRTLNGTH          GET XRT LENGTH\n         XR    R6,R6                 CALCULATE TOTAL XRTS LENGTH\n         MR    R6,R15                *\n         GETMAIN RC,LV=(R7),SP=241,LOC=ANY\n         ST    R1,NEWXRTSA           SAVE NEW XRT AREA ADDRESS\n         LR    R14,R1                SET MOVE TO ADDRESS\n         LR    R15,R7                SET MOVE TO LENGTH\n         XR    R1,R1                 SET MOVE FROM LENGTH AND PAD\n         MVCL  R14,R0                CLEAR AREA\n         L     R1,NEWXRTSA           GET NEW XRT AREA ADDRESS\n         USING XRT,R1\n         LTR   R2,R2                 ANY ROUTINES CURRENTLY DEFINED?\n         BZ    EXIT355               NO - BRANCH, DEFINE NEW ROUTINES\n         L     R15,XITXRTAD          GET FIRST OLD XRT ADDRESS\nEXIT354  MVC   0(XRTLNGTH,R1),0(R15)  MOVE OLD XRT TO NEW AREA\n         LA    R1,XRTLNGTH(,R1)      BUMP TO NEXT NEW AREA SLOT\n         LA    R15,XRTLNGTH(,R15)    BUMP TO NEXT OLD XRT\n         BCT   R2,EXIT354            LOOP BACK TO MOVE NEXT XRT\nEXIT355  XR    R0,R0                 GET # NEW EXIT ROUTINES (XRTS)\n         ICM   R0,1,WORKXRT#         *\n         L     R15,WORKXRTA          GET XRT WORKAREA ADDRESS\n         USING WORKXRTE,R15\nEXIT356  MVC   XRTRNAME,EXITRTNN     SET NEW EXIT ROUTINE NAME\n         MVC   XRTRADDR,EXITRTNA     SET NEW EXIT ROUTINE ADDRESS\n         LA    R1,XRTLNGTH(,R1)      BUMP TO NEXT NEW AREA SLOT\n         LA    R15,WORKXRTL(,R15)    BUMP TO NEXT XRT WORKAREA ENTRY\n         BCT   R0,EXIT356            LOOP BACK TO INIT NEXT NEW XRT\n         DROP  R1,R15                XRT, WORKXRTE\n         LA    R0,255*WORKXRTL       GET XRT WORKAREA SIZE\n         L     R1,WORKXRTA           GET XRT WORKAREA ADDRESS\n         FREEMAIN RU,A=(R1),LV=(R0)\n\n*********************************************************************\n*                                                                   *\n*        FINISH INITIALIZING THE XIT FOR THE NEW EXIT.              *\n*                                                                   *\n*********************************************************************\n\nEXIT360  OI    XITFLAGS,XITDENBL+XITBSPL  SET EXIT DEFINED, ENABLED,\n*                                           AND BYPASS SPLEVEL CHECK\n         NI    XITFLAGS,255-XITTRACE  TURN EXIT TRACING OFF\n         MVC   XITXRTAD,NEWXRTSA     SET FIRST EXIT XRT ADDRESS\n         XR    R0,R0                 GET # ROUTINES CURRENTLY DEFINED\n         ICM   R0,1,XIT#RTNS         *\n         XR    R1,R1                 GET # NEW ROUTINES\n         ICM   R1,1,WORKXRT#         *\n         ALR   R0,R1                 CALCULATE TOTAL # EXIT ROUTINES\n         STCM  R0,1,XIT#RTNS         SET TOTAL # EXIT ROUTINES\n         L     R14,LMTMITAD          GET MIT ADDRESS\n         MVC   XITENVIR,MITENVIR-MIT(R14)  SET ENVIRONMENT BYTE\n         DROP  R3,R8                 XIT, LMT\n         MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG2L),MSG2OK  SET FIXED MESSAGE TEXT\n\n*********************************************************************\n*                                                                   *\n*        SET THE MESSAGE LENGTH AND RETURN.                         *\n*                                                                   *\n*********************************************************************\n\nEXIT390  LA    R0,8+MSG2L            GET MESSAGE LENGTH\n        $STORE (R0)                    AND SET IN RETURN R0\n         MVC   RETCODE,=F'16'        SET RETURN CODE\n         B     RETURN                BRANCH - RETURN\n*********************************************************************\n*                                                                   *\n*        RETURN TO CALLER.                                          *\n*                                                                   *\n*********************************************************************\n\nRETURN   L     R2,RETCODE          GET ROUTINE RETURN CODE\n         S     R9,$F4              GET EXIT05 WORKAREA ADDRESS\n        $RETWORK (R9)              RETURN WORKAREA\n         LR    R15,R2              SET ROUTINE RETURN CODE\n        $RETURN RC=(R15)           RETURN TO CALLER\n\n         LTORG\n\nTRTABLE  DC    256X'FF'            TABLE OF VALID NUMBERICS\n         ORG   TRTABLE+C'0'        *\n         DC    10X'00'             *\n         ORG                       *\n\nSP241    DC    X'F1'\n\nMSG1OK   DC    C' REPLACED                        '\nMSG1L    EQU   *-MSG1OK\nMSG1ERR1 DC    C' NOT CURRENTLY BEING USED BY JES2'\nMSG1ERR2 DC    C' NOT LOCATED IN LINKLIST LIBRARY '\nMSG1ERR3 DC    C' LOAD ERROR                      '\n\nMSG2OK   DC    C' ADDED                           '\nMSG2L    EQU   *-MSG2OK\nMSG2ERR1 DC    C' NO EXIT NUMBER SPECIFIED        '\nMSG2ERR2 DC    C' INVALID EXIT NUMBER SPECIFIED   '\nMSG2ERR3 DC    C' EXIT NUMBER OUT OF RANGE        '\nMSG2ERR4 DC    C' EXIT MODULE ALREADY DEFINED     '\nMSG2ERR5 DC    C' NOT LOCATED IN LINKLIST LIBRARY '\nMSG2ERR6 DC    C' LOAD ERROR                      '\nMSG2ERR7 DC    C' NO $ENTRY POINTS DEFINED        '\n\n        $MODEND\n\nEXIT05W  DSECT                     EXIT05 WORKAREA\nRETCODE  DS    F                   EXIT05 RETURN CODE\nWORKFLAG DS    XL1                 EXIT05 WORKFLAG\nEXITPVT  EQU   X'80'               ADD EXIT TO JES2 PRIVATE\nEXITCSA  EQU   X'40'               ADD EXIT TO COMMON\nEXITNBR  DS    XL1                 EXIT NUMBER\nEXITMODN DS    CL8                 EXIT MODULE NAME\nEXITLMTA DS    A                   EXIT MODULE LMT ADDRESS\nWORKDBL  DS    D                   DOUBLEWORD WORKAREA\nEXITXIT  DS    A                   XIT ENTRY ADDRESS\nWORKXRTA DS    A                   XRT WORKAREA ADDRESS\nWORKXRT# DS    XL1                 NUMBER OF NEW XRTS\nNEWXRTSA DS    A                   NEW XRTS AREA\nWORKMSGY DS    CL60\nEXIT05WL EQU   *-EXIT05W           EXIT05 WORKAREA LENGTH\n\nWORKXRTE DSECT                     XRT WORKAREA ENTRY\nEXITRTNN DS    CL8                 EXIT ROUTINE NAME\nEXITRTNA DS    A                   EXIT ROUTINE ADDRESS\nWORKXRTL EQU   *-WORKXRTE          XRT WORKAREA ENTRY LENGTH\n\n         END\n./ ADD NAME=LSES505J 0302-00234-03317-2237-00026-00018-00005-T0SM1\n//T0SM505J JOB  (4030,37),'REDO--LSES505',CLASS=X,MSGCLASS=A,\n//  REGION=5M,\n//    NOTIFY=&SYSUID\n//*\n//*%PDSDOC 00 SMP APPLY LSES505\n/*JOBPARM S=TSPC\n/*CNTL SESG03A,EXC\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//SMPPTFIN DD DISP=SHR,DSN=MVS.OSMAINT.USERMODS.ZOS14(LSES505)\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES505) BYPASS(APPLYCHECK) .\n  RESETRC.\n  RECEIVE S(LSES505) SOURCEID(SUNTRUST) .\n  SET BDY(AEST03A).\n  APPLY S(LSES505) REDO .\n//\n./ ADD NAME=LSES506  0302-00234-03317-2239-00197-00202-00001-T0SM1\n++USERMOD(LSES506)\n /* ***************************************************************\n    ** * USER EXIT 5 B                                         * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707) .\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STSCX05B),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STSCX05B)\n NAME STSCX05B(R)\n/*\n++SRC(STSCX05B) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\n PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1,REUS=REFR) '\n* *%PDSDOC 00 JES2 EXIT05 PREVENT PURGING OF JOBS BY RANGE\n*********************************************************************\n*                                                                   *\n*                        HASP EXIT 05                               *\n*                                                                   *\n*     THIS EXIT PREVENTS PURGING JOBS BY RANGE.                     *\n*                                                                   *\n*     ENTRY POINT: EXIT05                                           *\n*                                                                   *\n*     INPUT REGISTERS:                                              *\n*        R0-4   N/A                                                 *\n*        R5     POINTER TO CURRENT OPERAND ADDRESS                  *\n*        R6     INCREMENT VALUE OF 4                                *\n*        R7     POINTER TO ADDRESS OF LAST OPERAND                  *\n*        R8-10  N/A                                                 *\n*        R11    HCT ADDRESS                                         *\n*        R12    N/A                                                 *\n*        R13    PCE ADDRESS                                         *\n*        R14    RETURN ADDRESS                                      *\n*        R15    ENTRY ADDRESS                                       *\n*                                                                   *\n*     OUTPUT REGISTERS:                                             *\n*        R0     UNCHANGED OR $CRET MESSAGE LENGTH                   *\n*        R1-14  UNCHANGED                                           *\n*        R15    RETURN CODE                                         *\n*                                                                   *\n*     REGISTER USAGE(INTERNAL):                                     *\n*        R0-8   WORK REGISTERS                                      *\n*        R9     WORKAREA ADDRESS                                    *\n*        R10    JCT ADDRESS                                         *\n*        R11    HCT ADDRESS                                         *\n*        R12    BASE REGISTER                                       *\n*        R13    PCE ADDRESS                                         *\n*        R14-15 WORK AND LINKAGE REGISTERS                          *\n*                                                                   *\n*     AUTHOR: STEPHEN MCCOLLEY                                      *\n*             ATLANTA, GA                                         *\n*                                                                   *\n*********************************************************************\n* CHANGES:                                                          *\n* 01/22/2001 - CORRECTED ERROR IN BLANK SCAN ROUTINE.  SGM          *\n*                                                                   *\n*********************************************************************\n\n         COPY  $HASPGBL\n\nSTSCX05B $MODULE ENVIRON=JES2,                                         X\n               RMODE=ANY,                                              X\n               IBMJES2=SAMPLE,                                         X\n               TITLE='JES2 USER EXIT5B',                               X\n               CVT,                                                    X\n               PDS,                                                    X\n               PSA,                                                    X\n               RPL,                                                    X\n               $BUFFER,                                                X\n               $CADDR,                                                 X\n               $CAT,                                                   X\n               $COMWORK,                                               X\n               $DCT,                                                   X\n               $HASPEQU,                                               X\n               $HCT,                                                   X\n               $HCCT,                                                  X\n               $JCT,                                                   X\n               $JCTX,                                                  X\n               $JOE,                                                   X\n               $JQE,                                                   X\n               $LMT,                                                   X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PCE,                                                   X\n               $PIT,                                                   X\n               $PSV,                                                   X\n               $TQE,                                                   X\n               $USERCBS,                                               X\n               $XECB,                                                  X\n               $XIT,                                                   X\n               $XRT\n\nEXIT05B  $ENTRY BASE=R12           EXIT ROUTINE ENTRY POINT\n\n*********************************************************************\n*                                                                   *\n*        SAVE CALLER'S REGISTERS AND ESTABLISH ADDRESSABILITIES.    *\n*                                                                   *\n*********************************************************************\n\n        $SAVE  NAME=EXIT05B        SAVE CALLER'S REGISTERS\n         LR    R12,R15             SET BASE REGISTER\n\n*********************************************************************\n*                                                                   *\n*        DETERMINE IF THIS IS A PURGE COMMAND.                      *\n*                                                                   *\n*********************************************************************\n\nEXIT100  LA    R1,COMVERB            GET COMMAND VERB ADDRESS\n         CLI   0(R1),C'P'            A PURGE COMMAND ?\n         BE    EXIT400               - GO CHECK FOR PURGE BY RANGE\n         XR    R15,R15               SET RETURN CODE\n         B     RETURN                BRANCH - RETURN\n\n**********************************************************************\n**                                                                  **\n**  PREVENT THE USE OF $PJ(X-X) HERE.                               **\n**                                                                  **\n**********************************************************************\nEXIT400  LH    R2,COMLNGTH             GET THE LENGTH OF THE COMMAND\n         BCTR  R2,R0                   MINUS ONE FOR THE $\n         BCTR  R2,R0                   MINUS ONE FOR THE FIRST VERB\n         LA    R1,COMVERB+1             POINT PAST COMMAND NAME\n         AR    R2,R1                    R2 = END OF COMMAND TO TEST\nCHKVERB1 CLI   0(R1),C'J'               IS NEXT CHAR. = C'J'\n         BE    CHKRANG1\n         CLI   0(R1),C'S'               IS NEXT CHAR. = C'S'\n         BE    CHKRANG1\n         CLI   0(R1),C'T'               IS NEXT CHAR. = C'T'\n         BE    CHKRANG1\n         CLI   0(R1),C' '               IS IT A BLANK ?\n         BE    SCANBLNK\n         B     EXIT499\n         XR    R15,R15               SET RETURN CODE\n         B     RETURN                BRANCH - RETURN\nCHECKJ1  CLI   0(R1),C' '               SCAN TO NEXT NON BLANK CHAR.\n         BNE   CHKVERB1\nSCANBLNK EQU   *\n         LA    R1,1(R1)\n         CR    R1,R2\n         BNL   EXIT499                  JUST GO HOME CLEANLY\n         B     CHECKJ1\nCHKRANG1 EQU   *                        ANY DASH IN THE NEXT 40 IS BAD\nCHKRANG2 CLI   0(R1),C'-'               SEE IF A RANGE IS BEING USED\n         BE    EXIT490                  IF YES THEN GO HOME MAD.\n         LA    R1,1(R1)                 LOOP TO END OF FIELD\n         CR    R1,R2\n         BL    CHKRANG2\n*\nEXIT499  XR    R15,R15                  JUST GO HOME\n         $RETURN RC=(R15)\nEXIT490  LA    R4,MSG1                  SET MSG AND GO HOME MAD\n         $CWTO MSG=(R4),L=40,MSGID=999\n         LA    R15,8\n         $RETURN RC=(R15)\nMSG1     DC    C'PURGE BY RANGE INVALID                  '\nLMSG1    EQU   *-MSG1\n*********************************************************************\n*                                                                   *\n*        RETURN TO CALLER.                                          *\n*                                                                   *\n*********************************************************************\n\nRETURN   EQU   *                   GET ROUTINE RETURN CODE\n        $RETURN RC=(R15)           RETURN TO CALLER\n\n         LTORG\n\n        $MODEND\n\nEXIT05W  DSECT                     EXIT05 WORKAREA\nRETCODE  DS    F                   EXIT05 RETURN CODE\nEXIT05WL EQU   *-EXIT05W           EXIT05 WORKAREA LENGTH\n\n         END\n./ ADD NAME=LSES506J 0402-00234-03317-2240-00025-00018-00020-T0SM1\n//T0SM506J JOB  (4030,37),'REDO--LSES506',CLASS=X,MSGCLASS=A,\n//  REGION=6M,\n//    NOTIFY=&SYSUID\n//*\n//*%PDSDOC 00 SMP APPLY LSES506\n/*JOBPARM S=TSPC\n/*CNTL SESG03A,EXC\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=MVS.OSMAINT.USERMODS.ZOS14(LSES506)\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES506) BYPASS(APPLYCHECK).\n  RESETRC .\n  RECEIVE S(LSES506) SOURCEID(SUNTRUST) .\n  SET BDY(AEST03A).\n  APPLY S(LSES506) REDO.\n./ ADD NAME=LSES507  0302-00234-03317-2243-00199-00284-00001-T0SM1\n++USERMOD(LSES507)\n /* ***************************************************************\n    ** * USER EXIT 6 A                                         * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707) .\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STSCX06A),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STSCX06A)\n NAME STSCX06A(R)\n/*\n++SRC(STSCX06A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\n PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1,REUS=REFR) '\n* *%PDSDOC 00 SETS THE SCHENV BASED ON /*ROUTE XEQ RESNAME\n*********************************************************************\n*                                                                   *\n*                        HASP EXIT 6                                *\n*                                                                   *\n*     THIS EXIT GETS CONTROL AFTER EACH JCL STATEMENT HAS BEEN      *\n*     CONVERTED INTO INTERNAL TEXT AND ONCE AFTER ALL OF A JOB'S    *\n*     JCL HAS BEEN CONVERTED.  IT PERFORMS THE FOLLOWING FUNCTIONS: *\n*     > CHECKS IF A SCHEDULING ENVIRONMENT (SCHENV=) HAS BEEN       *\n*       CODED ON THE JOBCARD.  IF SPECIFIED, THE SCHEDULING         *\n*       ENVIRONMENT IS USED.  OTHERWISE IF A MELLON RESOURCE NAME   *\n*       HAS BEEN SPECIFIED ON A \"/*ROUTE XEQ RESNAME\" CONTROL       *\n*       STATEMENT, THEN THE RESOURCE NAME IS USED AS A SCHEDULING   *\n*       ENVIRONMENT.                                                *\n*                                                                   *\n*     ENTRY POINT: EXIT06                                           *\n*                                                                   *\n*     INPUT REGISTERS:                                              *\n*        R0 CODE INDICATING STATUS OF CONVERSION PROCESSING         *\n*           0  INDICATES THAT A JCL STATEMENT HAS BEEN CONVERTED    *\n*              TO A C/I TEXT IMAGE.                                 *\n*           4  INDICATES THAT ALL OF THE JCL FOR A PARTICULAR       *\n*              JOB HAS BEEN CONVERTED TO C/I TEXT.                  *\n*        R1     ADDRESS OF 5-WORD PARAMETER LIST                    *\n*        R2-10  N/A                                                 *\n*        R11    HCT ADDRESS                                         *\n*        R12    N/A                                                 *\n*        R13    ADDRESS OF AN 18 WORD OS-STYLE SAVE AREA            *\n*        R14    RETURN ADDRESS                                      *\n*        R15    ENTRY ADDRESS                                       *\n*                                                                   *\n*     OUTPUT REGISTERS:                                             *\n*        R0-14  UNCHANGED                                           *\n*        R15:   RETURN CODE                                         *\n*               0 - QUEUE JOB FOR EXECUTION                         *\n*               8 - CANCEL JOB AND QUEUE FOR OUTPUT                 *\n*                                                                   *\n*     REGISTER USAGE(INTERNAL):                                     *\n*        R0-8   WORK REGISTERS                                      *\n*        R9     WORKAREA ADDRESS                                    *\n*        R10    JCT ADDRESS                                         *\n*        R11    HCT ADDRESS                                         *\n*        R12    BASE REGISTER                                       *\n*        R13    ADDRESS OF AN 18 WORD OS-STYLE SAVE AREA            *\n*        R14-15 WORK AND LINKAGE REGISTERS                          *\n*                                                                   *\n*     NOTE: THIS MODULE IS FOR USE WITH JES2 VERSION 6.0.4          *\n*                                                                   *\n*     AUTHOR: BOB BREAK                                             *\n*             ST. LOUIS, MO.                                        *\n*                                                                   *\n*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE\n*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS\n*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED\n*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF\n*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE\n*  USEFULLNESS OF THE MATERIAL.\n*\n*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,\n*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE\n*  IN THE FUTURE.\n*\n*********************************************************************\n\n         COPY  $HASPGBL\n\nSTSCX06A $MODULE ENVIRON=SUBTASK,                                      X\n               IBMJES2=SAMPLE,                                         X\n               TITLE='USER EXIT6A MOD. ',                              X\n               RMODE=ANY,                                              X\n               CNMB,                                                   X\n               CVT,                                                    X\n               KEYS,                                                   X\n               PSA,                                                    X\n               TEXT,                                                   X\n               $CADDR,                                                 X\n               $DTE,                                                   X\n               $DTECNV,                                                X\n               $HASPEQU,                                               X\n               $HCT,                                                   X\n               $HCCT,                                                  X\n               $JCT,                                                   X\n               $JCTX,                                                  X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PADDR,                                                 X\n               $PARMLST,                                               X\n               $PCE,                                                   X\n               $TRE,                                                   X\n               $XIT\n\nEXIT06A  $ENTRY BASE=R12           EXIT ROUTINE ENTRY POINT\n\n*********************************************************************\n*                                                                   *\n*        SAVE CALLER'S REGISTERS AND ESTABLISH ADDRESSABILITIES.    *\n*                                                                   *\n*********************************************************************\n\n         USING HCT,R11\n        $SAVE  NAME=EXIT06A        SAVE CALLER'S REGISTERS\n         LR    R12,R15             SET BASE REGISTER\n         LTR   R0,R0               FINAL EXIT6 CALL?\n         BNZ   RETURN0             YES - BRANCH, RETURN\n         L     R10,12(,R1)         GET JCT ADDRESS\n         USING JCT,R10\n         CLC   JCTCNVRC,=A(JCTCOK)  JOB SUCCESSFULLY CONVERTED?\n         BNE   RETURN0             NO - BRANCH, RETURN\n         TM    JCTJOBFL,JCTBATCH   BATCH JOB?\n         BZ    RETURN0             NO - BRANCH, RETURN\n         L     R2,4(,R1)           GET TEXT IMAGE ADDRESS\n         USING TEXT,R2\n         TM    STRINDCS,JOBSTR     'JOB' STATEMENT?\n         BZ    RETURN0             NO - BRANCH, RETURN\n         LR    R3,R1               SAVE INPUT PARAMETER LIST ADDRESS\n\n*********************************************************************\n*                                                                   *\n*        CHECK IF A SCHEDULING ENVIRONMENT HAS BEEN CODED ON        *\n*        THE JOBCARD.  IF SPECIFIED, ALLOW IT TO BE USED.           *\n*                                                                   *\n*********************************************************************\n\n\n         LA    R1,STRJKEY          LOAD START OF KEYED TEXT IN R1\n         LA    R0,JDTKWDK          LOAD KEY TO LOOK FOR IN R0\n         $CALL XINTKEY,ERRET=EXIT110 IF NOT FOUND - CHECK FOR XEQ\n         LTR   R15,R15\n         BZ    KEYFOUND            THE KEY WAS FOUND\n         B     EXIT110             THE KEY WAS NOT FOUND CHECK FOR A\n*                                    VALUE FROM A /*ROUTE XEQ CARD\nKEYFOUND EQU   *                   CHECK OUT THIS DUBIOUS KEY...\n         CLI   0(R1),X'1A'         IS IT KEY 1A ?\n         BNE   EXIT110                 IF NOT CHECK FOR XEQ VALUE\n         CLC   1(2,R1),=X'0202'    2 PARMS - THE FIRST 2 BYTES LONG?\n         BNE   EXIT110                 IF NOT CHECK FOR XEQ VALUE\n         CLC   3(2,R1),=X'000A'    THE FIRST PARM BEING 000A ?\n         BNE   EXIT110                 IF NOT CHECK FOR XEQ VALUE\n         MVI   JCTSCHEN,C' '\n         MVC   JCTSCHEN+1(L'JCTSCHEN-1),JCTSCHEN   CLEAR SCHEN FLD.\n\nEXIT110  EQU   *\n\n\n*********************************************************************\n*                                                                   *\n*        RETURN TO CALLER.                                          *\n*                                                                   *\n*********************************************************************\n\nRETURN0  XR     R15,R15            SET RETURN CODE = 0\n         B      RETURN             BRANCH - CONTINUE\nRETURN8  EQU    *\n         L      R15,$F8            SET RETURN CODE = 8\nRETURN  $RETURN RC=(R15)           RETURN TO CALLER\n\n         DROP  R10,R11             JCT, HCT\n\n         LTORG\n\n        $MODEND\n\n\n         END\n./ ADD NAME=LSES507J 0402-00234-03317-2245-00024-00018-00019-T0SM1\n//T0SM507J JOB  (4030,37),'REDO--LSES507',CLASS=X,MSGCLASS=A,\n//  REGION=6M,\n//    NOTIFY=&SYSUID\n//*\n//*%PDSDOC 00 SMP APPLY LSES507\n/*JOBPARM S=TSPC\n/*CNTL SESG03A,EXC\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPPTFIN DD DISP=SHR,DSN=MVS.OSMAINT.USERMODS.ZOS14(LSES507)\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES507) BYPASS(APPLYCHECK).\n  RESETRC .\n  RECEIVE S(LSES507) SOURCEID(SUNTRUST) .\n  SET BDY(AEST03A).\n  APPLY S(LSES507) REDO.\n./ ADD NAME=LSES509  0202-00234-03317-2246-00123-00132-00001-T0SM1\n++USERMOD(LSES509)\n /* ***************************************************************\n    ** * USER EXIT 15 A                                        * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707) .\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STSCX15A),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STSCX15A)\n NAME STSCX15A(R)\n/*\n++SRC(STSCX15A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\n PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1,REUS=REFR) '\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    JES2 USER EXIT 15.  DATA SET SELECTION / COPY USER EXIT.         *\n*                                                                     *\n* TDS MOD TO FORCE FCB LOAD UNLESS CHANGE TO AND FROM STD FORMS.      *\n*                                                                     *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         COPY  $HASPGBL\nSTSCEX15 $MODULE ENVIRON=JES2,                                         *\n               TITLE='JES2 USER EXIT 15 - ENTRY AND SET UP',           *\n               RMODE=ANY,                                              *\n               RPL,                REQ'D BY $BUFFER                    *\n               $BUFFER,            REQ'D BY EXIT CODE                  *\n               $CAT,               REQ'D BY $HCT                       *\n               $DCT,               REQ'D BY $HCT                       *\n               $XECB,              REQ'D BY MY WTOR ERROR RECOVERY     *\n               $HASPEQU,           REQ'D BY REG CONVENTIONS            *\n               $HCT,               REQ'D BY $SAVE/$RETURN              *\n               $JCT,                                                   *\n               $JCTX,                                                  *\n               $JOE,                                                   *\n               $JQE,               REQ'D BY $HCT                       *\n               $MIT,               REQ'D BY $HCT                       *\n               $PCE,               REQ'D BY $HCT AND AMIKOM            *\n               $PDDB,                                                  *\n               $PADDR,                                                 *\n               $PPPWORK,           REQ'D BY AMIKOM                     *\n               $XPL                EXIT PARAMETER LIST         @RMF420\n         SPACE 2\nEXIT15A  $ENTRY BASE=R12\n         $SAVE\n         LR    R12,R15\n*   REGISTER USAGE\n*   R13  ADDRESS OF PCE\n*   R12  PROGRAM BASE REG\n*   R11  ADDRESS OF HCT\n*   R9   ADDRESS OF INPUT PARAMETER AREA\n*   R8   ADDRESS OF DCT\n*   R7   ADDRESS OF JCT\n*   R6   ADDRESS OF PDDB\n*   R5   ADDRESS OF XECB\n         USING PCE,R13\n         USING XPL,R9                                           @RMF420\n         USING DCT,R8\n         USING JCT,R7\n         USING PDB,R6\n         SPACE 1\n         LR    R9,R1               INPUT PARAMETER\n         L     R8,X015DCT          DCT ADDRESS                  @RMF420\n         L     R7,X015JCT          JCT ADDRESS                  @RMF420\n         L     R6,X015PDDB         PDDB ADDRESS                 @RMF420\n         TITLE 'JES2 USER EXIT 15 - DETERMINE INPUT PARAMETERS'\n*   DETERMINE WHY WE ARE HERE\nBRTABLE  EQU   *                   BRANCH TABLE\n         TM    XPLIND,X015DSEL      CHECK FOR DATA SELECTION    @RMF420\n         BO    EX15SEL             DATA SET SELECTION / PDDB    @RMF420\n         B     EX15EXIT            DATA SET SEPARATOR / COPY\n         TITLE 'JES2 USER EXIT 15 - SELECTION / PDDB'\nEX15SEL  EQU   *                   DATA SET SELECTION / PDDB\n         CLI   DCTDEVID,DCTPRTID   IS THIS A PRINTER  Q.\n         BNE   EX15EXIT            NO, RETURN, NOT A PRINTER\n         SPACE 2\n* TDS MOD TO FORCE FCB LOAD UNLESS CHANGE TO AND FROM STD FORMS.  * JWS\n         CLC   DCTFORMS,PDBFORMS  FORMS CHANGE   Q.\n         BE    TDSNOFOR           NO\n         CLC   DCTFORMS(3),$STDFORM  STOCK PAPER MOUNTED  Q.\n         BNE   TDSFORCE           NO, RELOAD FCB\n         CLC   PDBFORMS(3),$STDFORM  STOCK PAPER REQUESTED  Q.\n         BE    TDSNOFOR           YES, NO FCB LOAD\nTDSFORCE OI    DCTPPSW,DCTPPSWC   (SET SWITCH TO FORCE FCB LOAD)\nTDSNOFOR DS    0H                 (END OF MOD)\n         SPACE 1\n         B     EX15EXIT            RETURN\n         EJECT\nEX15EXIT EQU   *                   RETURN FROM THIS USER EXIT\n         SLR   R15,R15             NORMAL EXIT\n         SPACE 1\n$RETURN  $RETURN RC=(R15)          FINAL RETURN\n         LTORG\n         SPACE 1\n         $MODEND\n         SPACE 1\n         EJECT\n         PRINT ON,NOGEN,NODATA\n         DCBD  DSORG=PS\n         SPACE 1\n         END\n./ ADD NAME=LSES509J 0302-00234-03317-2249-00025-00018-00020-T0SM1\n//T0SM509J JOB  (4030,37),'REDO--LSES509',CLASS=X,MSGCLASS=A,\n//  REGION=6M,\n//    NOTIFY=&SYSUID\n//*\n//*%PDSDOC 00 SMP APPLY LSES509\n/*JOBPARM S=TSPC\n/*CNTL SESG03A,EXC\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=MVS.OSMAINT.USERMODS.ZOS14(LSES509)\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES509) BYPASS(APPLYCHECK) .\n  RESETRC.\n  RECEIVE S(LSES509) SOURCEID(SUNTRUST) .\n  SET BDY(AEST03A).\n  APPLY S(LSES509) REDO .\n./ ADD NAME=LSES510  0302-00234-03317-2249-00209-00220-00001-T0SM1\n++USERMOD(LSES510)\n /* ***************************************************************\n    ** * USEREXIT 20A                                          * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707) .\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STSCX20A),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STSCX20A)\n NAME STSCX20A(R)\n/*\n++SRC(STSCX20A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\nSTSCX20A TITLE 'JES2 END OF INPUT USER EXIT -- PROLOG'\n***********************************************************************\n*\n*   FUNCTIONS:\n*              * COPY FIELDS FROM OUR JCT EXTENSION TO OUR JQE BERT\n*                THAT WERE SET DURING EXIT 4 PROCESSING, AND SET\n*                AFFINITY FOR /*ROUTE XEQ HERE REQUESTS.\n*\n*   NOTES:\n*\n*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE\n*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS\n*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED\n*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF\n*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE\n*  USEFULLNESS OF THE MATERIAL.\n*\n*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,\n*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE\n*  IN THE FUTURE.\n*\n*    SPECIAL THANKS GO TO BOB BREAK OF ST. LOUIS FOR THE ORIGINAL CODE\n*  TO PARSE THE \"/*ROUTE XEQ RESNAME\" CARDS AND SET THE APPROPRIATE\n*  EXECUTION ENVIRONMENT.\n*\n*    SPECIAL THANKS TO JUDY RUNT OF WISCONSIN ELECTRIC FOR THE ORIGINAL\n*  CODE TO HANDLE THE \"/*CNTL BEFORE|AFTER|WITH,RESNAME\" AND \"/*CNTL\n*  RESNAME,EXC|SHR\" ROUTINES.  THE USE OF THE BLOCK EXTENSION REUSABLE\n*  TABLES, BERT'S, TO EXTEND THE JCT AND JQE.\n*\n*\n* REVISION HISTORY:\n*\n*   DATE   NAME         DESCRIPTION OF CHANGE\n* -------- ------------ -----------------------------------------------\n*\n***********************************************************************\n         SPACE 3\n         PRINT OFF                 SUPRESS PRINTING OF JES2 GLOBALS\n         COPY  $HASPGBL            INCLUDE THE JES GLOBAL VALUES\n         PRINT ON                  RETORE FULL PRINTING\nSTSCX20A $MODULE TITLE='JES2 END OF INPUT USER EXIT',                  X\n               RMODE=ANY,                                              X\n               ENVIRON=JES2,                                           X\n               RPL,                GENERATE RPL DSECT                  X\n               $BERT,              (BERT)                              X\n               $BERTTAB,           (BERT)                              X\n               $BUFFER,            HASP SPOOL BUFFER DSECT             X\n               $CADDR,                                                 X\n               $CATBERT,           (BERT)                              X\n               $CMB,               ($RDRWORK)                          X\n               $DCT,               (INFORM)                            X\n               $HASPEQU,           HASP EQUATES                        X\n               $HCCT,              (BERT)                              X\n               $HCT,               HASP CONTROL TABLE DSECT            X\n               $HFAME,             ($HCCT)                             X\n               $JCT,               HASP JOB CONTROL TABLE DSECT        X\n               $JCTX,              HASP JOB CONTROL TABLE DSECT        X\n               $JQE,               HASP JOB QUEUE ELEMENT DSECT        X\n               $MIT,               HASP MIT DSECT                      X\n               $MITETBL,                                               X\n               $PADDR,             HASP PADDR DSECT                    X\n               $PARMLST,                                               X\n               $PCE,               HASP PROCESSOR CONTROL ENTRY DSECT  X\n               $PSV,                                                   X\n               $QSE,               ($HCT)                              X\n               $RDRWORK,           HASP RDR PCE WORKAREA DSECT         X\n               $SAFINFO,           ($RDRWORK)                          X\n               $SCAT,              HASP SCAT DSECT                     X\n               $SCANTAB,           HASP SCAN TABLE DSECT               X\n               $SJB,               (INFORM)                            X\n               $TQE,               ($SJB)                              X\n               $TRE,               HASP TRE DSECT                      X\n               $USERCBS,           USER DSECTS                         X\n               $XECB               ($HCT)\n         SPACE 5\n         USING JCT,R10\n         USING HCT,R11\n         USING PCE,R13\n         TITLE 'JES2 END OF INPUT USER EXIT'\nEXIT20A  $ENTRY BASE=(R12),CSECT=NO,ENTRY=YES,REGUSE=(R15)\n         $SAVE  ,                  SAVE CALLER'S REGISTERS\n         LR    R12,R15             SET BASE REGISTER\n         SPACE 2\n*\n*  UP FRONT HOUSEKEEPING HERE...\n*\n         LA    R6,0                PRESET RETURN CODE (NO JQA YET)\n         LTR   R10,R10             CHECK IF A JCT WAS PROVIDED\n         BZ    RETURN              NO - JUST RETURN\n         ICM   R9,B'1111',PCEJQE   GET OUR JQE ADDRESS AND VALIDATE\n         BZ    RETURN              NO VALID -- JUST RETURN\n*\n*  CHECK FOR \"HERE\" TYPE OF ROUTING\n*  IF HERE WAS SPECIFIED - CLEAR THE FIELD AND IF NO AFFINITY IS\n*  ALREADY SET - THEN SET IT FOR \"HERE\"\n*\n         USING JQE,R9\n         CLC   JCTSCHEN(5),=C'HERE '   CHECK FOR \"HERE\" ROUTING\n         BNE   NOTHERE                 DON'T SET IN SCHENV IF HERE\n         MVI   JCTSCHEN,C' '\n         MVC   JCTSCHEN+1(L'JCTSCHEN-1),JCTSCHEN  CLEAR THE FIELD\n*\n*  RESET THE AFFINIT TO \"HERE\" REGUARDLESS OF ANY OTHE SYSAFF=\n*\n         $SETAFF REQUEST=CLEAR,AFFIELD=RDWSAF\n         $SETAFF REQUEST=MOVE,AFFIELD=RDWSAF,AFTOKEN=$AFFINTY\n         DROP  R9\n*\n*  LOCATE OUR JCT EXTENSION.\n*\nNOTHERE  $JCTXGET  JCT=(R10),      LOCATE OUR JCT EXTENSION            X\n               TYPE='USER',MOD=1,                                      X\n               ERRET=RETURN        DONT CREATE A JQEX IF NO JCTX\n*\n         LR    R7,R1               GET ADDRESS OF OUR EXTENSION\n         USING STJCTX,R7\n*\n**********************************************************************\n*\n*  GET OUR JQE FOR UPDATE AND LOCATE OUR BERT FOR THIS\n*  JOB (ALL TYPES: BATCH, STC, TSU) AND INITIALIZE FOR LATER USE.\n*\n**********************************************************************\n         $QSUSE  ,                 MAKE SURE WE OWN THE QUEUES\n*\n         $DOGJQE ACTION=(FETCH,UPDATE),      GET AN UPDATE MODE JQA    X\n               JQE=(R9)\n*\n         LR    R9,R0               GET THE ADDR OF OUR JQA\n*\n         $DOGBERT ACTION=GETOFFSET,    GET THE OFFSET                  X\n               CBTYPE=JQE,                IN THE JQA                   X\n               NAME=STQNAME,                 OF OUR BERT               X\n               ERRET=BADBERT\n*\n         LA    R8,0(R1,R9)         GET ADDRESS OF OUR BERT\n         USING STQNAME,R8\n*\n* COPY OUR FIELDS FROM THE JCT EXTENSION TO OUR BERT.\n*\n         MVC   UBRWITH,UJCXWITH    COPY /*WITH NAME\n         MVC   UBRBFOR,UJCXBFOR    COPY /*BEFORE NAME\n         MVC   UBRAFTR,UJCXAFTN    COPY /*AFTER  NAME\n         MVC   UBRDNAME,UJCXDNAM   COPY /*CNTL NAMES AND SHARE TYPES\n         MVC   UBRUFLAG,UJCXUFLG   COPY OUR MISC JECL CARDS FLAGS\n         MVC   UBRMFLAG,UJCXMFLG   COPY OUR /*AFTER/BEFORE/CNTL FLAGS\n         MVI   UBRDLAYS,0          ZERO OUR DELAY FLAGS\n         DROP  R7                  LOSE ADDRESS OF OUR JCTX\n*\n* CHECK JOB TYPE\n*\n********************************************************************\n*  EXIT RETURN POINTS\n********************************************************************\nRET00    DS    0H\n         LA    R6,0                SET NORMAL RETURN CODE\n*\nRETJQA   DS    0H                  RETURN THE JQA BEFORE EXITING\n         $DOGJQE  ACTION=RETURN,                                       X\n               CBADDR=(R9)\n*\nRETURN   DS    0H\n         $RETURN RC=(R6)           RETURN TO CALLER\n*\nBADBERT  DS    0H                  ERROR RETURN FROM $DOGBERT\n         $WTO  BADBERTM,L'BADBERTM,ROUTE=$MAIN,CLASS=$ALWAYS\n         B     RETJQA              GO RETURN THE JQA AND EXIT\n*\nBADBERTM $MSG  999,'ERROR RETURNED GETTING BERT IN STSCX20A'\n*\n         SPACE 3\n         TITLE 'JES2 END OF INPUT USER EXIT -- EPILOG'\n         $MODEND ,\n         END   ,\n./ ADD NAME=LSES510J 0402-00234-03317-2250-00025-00018-00020-T0SM1\n//T0SM510J JOB  (4030,37),'REDO--LSES510',CLASS=X,MSGCLASS=A,\n//  REGION=6M,\n//    NOTIFY=&SYSUID\n//*\n//*%PDSDOC 00 SMP APPLY LSES510\n/*JOBPARM S=TSPC\n/*CNTL SESG03A,EXC\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=MVS.OSMAINT.USERMODS.ZOS14(LSES510)\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES510) BYPASS(APPLYCHECK).\n  RESETRC .\n  RECEIVE S(LSES510) SOURCEID(SUNTRUST) .\n  SET BDY(AEST03A).\n  APPLY S(LSES510) REDO.\n./ ADD NAME=LSES511  0202-00234-03317-2254-00425-00437-00001-T0SM1\n++USERMOD(LSES511)\n /* ***************************************************************\n    ** * USER EXIT 36A                                         * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707) .\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STSCX36A),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.apf.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STSCX36A)\n NAME STSCX36A(R)\n/*\n++SRC(STSCX36A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\n PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1,REUS=REFR) '\nSTSCX36A TITLE 'SAMPLE EXIT 36 (PRE SAF CALL) - (MODULE COMMENT BLOCK)'\n* **PROPRIETARY STATEMENT**********************************************\n*                                                                     *\n*   LICENSED MATERIALS-PROPERTY OF IBM                                *\n*   THIS MODULE IS \"RESTRICTED MATERIALS OF IBM\"                      *\n*   5695-047 (C) COPYRIGHT IBM CORP 1990                              *\n*   SEE COPYRIGHT INSTRUCTIONS                                        *\n*                                                                     *\n*   STATUS = HJE4420                                                  *\n*                                                                     *\n* **END-OF-PROPRIETARY-STATEMENT***************************************\n***********************************************************************\n*                                                                     *\n* MODULE NAME = HASX36A (HASX36A CSECT)                               *\n*                                                                     *\n* DESCRIPTIVE NAME = Sample Pre-SAF call user exits                   *\n*                                                                     *\n* FUNCTION =                                                          *\n*                                                                     *\n*         PROPRMT  - Cause userid propagation for RJE jobs            *\n*                                                                     *\n* NOTES =                                                             *\n*                                                                     *\n*    DEPENDENCIES = NONE                                              *\n*                                                                     *\n*    RESTRICTIONS = NONE                                              *\n*                                                                     *\n*    ATTRIBUTES = JES2 REENTRANT, RMODE 24, AMODE 31                  *\n*                                                                     *\n* ENTRY POINTS =                                                      *\n*                                                                     *\n*         SYSLOG   - Allow all TSO users to view SYSLOG               *\n*                                                                     *\n*         NOCREDEL - Bypass SAF calls for data set create and deletes *\n*                                                                     *\n*         PROPRMT  - Cause userid propagation for RJE jobs            *\n*                                                                     *\n* MACROS =                                                            *\n*                                                                     *\n*         JES2 - $ENTRY, $MODEND, $MODULE, $RETURN, $SAVE             *\n*                                                                     *\n* CHANGE ACTIVITY:                                                    *\n*                                                                     *\n* $420P306=PTM      HJE4420 910118 R_W1: Sample Exit Prolog Problems  *\n*                                                                     *\n* A000000-999999    CREATED FOR JES2 4.1.0                         @410\n***********************************************************************\n         TITLE 'SAMPLE EXIT 36 (PRE SAF CALL) -- PROLOG ($HASPGBL)'\n         COPY  $HASPGBL\n         TITLE 'SAMPLE EXIT 36 (PRE SAF CALL) -- PROLOG ($MODULE)'\nSTSCX36A $MODULE ENVIRON=USER,                                         C\n               TITLE='PROLOG ($MODULE)',                               C\n               RMODE=ANY,                                              C\n               SAFP,               SAF ICHSAFP - parm list mapping     C\n               TOKEN,              SAF ICHRUTKN - TOKEN mapping        C\n               $CADDR,             Common storage address list         C\n               $DTE,               Daughter task element               C\n               $ERA,               Erorr recovery area                 C\n               $HASPEQU,           General EQUATES                     C\n               $HCCT,              Common storage control table        C\n               $HCT,               Private storage control table       C\n               $HFAME,             HASP file allocation map element    C\n               $JCT,               jes2 job control block              C\n               $JCTX,              JES2 JOB CONTROL BLOCK              C\n               $MIT,               Module information table            C\n               $PADDR,             Private storage address list        C\n               $PARMLST,           Parameter list values/equates       C\n               $PCE,               Processor control element           C\n               $PSV,               Processor save area                 C\n               $SAFINFO,           saf control block                   C\n               $SCAT,              SYSOUT class attribute table        C\n               $XECB,              Extended ECB                        C\n               $WAVE,              Work access verification element    C\n               $XIT,               Exit information table              C\n               ($XPL,GEN)          Exit parameter list\n         TITLE 'CAUSE USERID PROPAGATION FOR RJE JOBS -- (ROUTINE PROPRC\n               MT)'\n***********************************************************************\n*                                                                     *\n*        PROPRMT - Cause the userid of RJE to propagate to its jobs.  *\n*                                                                     *\n* FUNCTION :                                                          *\n*                                                                     *\n*        This routine will allow installations to have jobs submitted *\n*        from remote work stations act as if the jobs had been        *\n*        submitted from logged on TSO user sessions.  This will only  *\n*        work if the RJE signon was processed via RACF.  The session  *\n*        type on the RACROUTE REQUEST=VERIFYX call will be changed    *\n*        from RJEBATCH to INTBATCH.  This will indicate to RACF that  *\n*        the USERID of the submittor should be propagated to the job  *\n*        if there is no USER= parameter coded on the job card.  (The  *\n*        USERID is not propagated for RJEBATCH session types.)        *\n*        For RJEs, the USERID is the work station name.               *\n*                                                                     *\n*        This will cause the audit records to look funny since jobs   *\n*        will be accepted into the system that otherwise would have   *\n*        failed.                                                      *\n*                                                                     *\n*        JESINPUT class profiles will have to be changed to           *\n*        accomodate port of entrys (POEs) of the form Rn.RDm.         *\n*        Note: For remotes numbered from 1000-9999, the form          *\n*              is RnnnnRDm (no inner period).                         *\n*                                                                     *\n* LINKAGE :                                                           *\n*                                                                     *\n*        This routine is entered via a BASR R14,R15 from the USERSUB  *\n*        routine in the HASCSIRQ CSECT of the HASPSSSM load module.   *\n*        Control is returned via $RETURN.                             *\n*                                                                     *\n* OPERATION :                                                         *\n*                                                                     *\n*        LOADMOD(HASX36A) STORAGE=CSA                          @420P306\n*        EXIT(36)  ROUTINES=PROPRMT,STATUS=ENABLED             @420P306\n*                                                                     *\n* ENVIRONMENT :                                                       *\n*                                                                     *\n*        Subtask                                                      *\n*                                                                     *\n* RECOVERY :                                                          *\n*                                                                     *\n*        Default recovery provided by general purpose subtask.        *\n*                                                                     *\n* REGISTER USAGE (ENTRY/EXIT) :                                       *\n*                                                                     *\n*    REG       VALUE ON ENTRY             VALUE ON EXIT               *\n*                                                                     *\n*    R0        N/A                        Unchanged                   *\n*    R1        Address of parm list       Unchanged                   *\n*    R2-R10    N/A                        Unchanged                   *\n*    R11       HCCT address               Unchanged                   *\n*    R12       N/A                        Unchanged                   *\n*    R13       Save area                  Unchanged                   *\n*    R14       Return address             Unchanged                   *\n*    R15       Routine address            Return code                 *\n*                                                                     *\n* PARAMETER LIST :                                                    *\n*                                                                     *\n*        See $XPL expansion                                           *\n*                                                                     *\n* REGISTER USAGE (INTERNAL) :                                         *\n*                                                                     *\n*    REG       VALUE                                                  *\n*                                                                     *\n*    R0        N/A                                                    *\n*    R1        XPL (parameter list addr)                              *\n*    R2-R3     N/A                                                    *\n*    R4        SAF and RACINIT parm list address                      *\n*    R5-R10    N/A                                                    *\n*    R11       HCCT address                                           *\n*    R12       Routine base address                                   *\n*    R13       Available save area                                    *\n*    R14       Linkage                                                *\n*    R15       Return code                                            *\n*                                                                     *\n* DATA AREA USAGE (INTERNAL) :                                        *\n*                                                                     *\n*    NAME          VALUE                                              *\n*                                                                     *\n*    $SEAINIT      The FUNCODE for a VERIFYX                          *\n*                                                                     *\n*    INITSESN      The SESSION value in RACINIT(VERIFYX) parm list    *\n*    SAFPRACP      Offset of the specific RACROUTE request type parms *\n*    TOKRBCH       The equate for SESSION=RJEBATCH                    *\n*                                                                     *\n*    XPLIND        Exit parameter list indicator byte - FUNCODE value *\n*    X036PARM      Address of the RACROUTE parameter list             *\n*                                                                     *\n* RETURN CODES (R15 ON EXIT) :                                        *\n*                                                                     *\n*         0 - ALWAYS RETURNED                                         *\n*                                                                     *\n* OTHER CONSIDERATIONS :                                              *\n*                                                                     *\n*         N/A                                                         *\n*                                                                     *\n***********************************************************************\n         TITLE 'CAUSE USERID PROPAGATION FOR RJE JOBS -- PROPRMT'\n         USING XPL,R8              XPL  ADDRESSABILITY\n         USING HCCT,R11            HCCT addressability\n         SPACE 1\nEXIT36A  $ENTRY BASE=R12\n         SPACE 1\n        $SAVE TRACE=YES,NAME=PROPRMT  Save callers registers\n         SPACE 1\n         LR    R12,R15             Set local base\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Check for VERIFYX SAF call with session type RJEBATCH.       *\n*        Change all RJEBATCH session types to INTBATCH.               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         LR    R8,R1               SAVE REGISTER 1\n         CLI   XPLIND,$SEAINIT     WAS THE CALL FOR VERIFYX?\n         BNE   TRYREST             NO, THEN NOT INTERESTED\n         $GETMAIN RC,LV=$$LGTH,BNDRY=DBLWD,LOC=BELOW\n         LTR   R15,R15\n         BZ    $$CONT0\n         DC    X'0000'\n$$CONT0  EQU   *\n         SPACE 1\n         LR    R9,R1               PUT GETMAIN ADDR INTO R9\n         USING $$DMYARA,R9         TELL SYTEM TO USE R9 FOR ADDR\n         MVC   RACF_INIT(RACFLTHI),RACFINIT  MOVE IN LIST FORMAT\n         MVI   BLANK_AREA,X'40'      MOVE IN BLANK\n         MVC   BLANK_AREA+1($$SPACES-1),BLANK_AREA\n         MVC   R15AREA,=F'0'       SET R15AREA TO BINARY ZEROES\n         MVI   THREE_DIGITSW,0     SET TO BINARY ZERO AT START\n         ICM   R4,B'1111',X036RCBA GET RELATED CONTROL BLOCK (SAFINFO)\n         CLC   =C'SFI',0(R4)       is it sfi\n         BE    $$CONT              YES GO ON\n         DC    X'0000'             OTHERWISE DUMP\n$$CONT   EQU   *\n         USING SAFINFO,R4          USE R4 AS BASE\n         ICM   R5,B'1111',SFIJCT   GET ADDR OF JCT\n         USING JCT,R5              USE R 5 AS JCT\n         CLC   =C'JCT',JCTID       IS IT JCT\n         BE    $$CONT1             YES GO ON\n         DC    X'0000'             OTHERWISE DUMP\n$$CONT1  EQU   *\n         SR    R7,R7               SET R7 TO ZEROES\n         CLC   =C'TZZZ',JCTJNAME   CHECK FOR SPECIAL JOBNAME\n         BNE   NOT_A_TEST         IF NOT JUST CONTINUE AS NORMAL\n         CLC   =C'N016',JCTJNAME+4  TEST FOR BOGUS NODE\n         BNE   CHECK_BOGUS_REMOTE  IF NOT CHECK FOR REMOTE TESTER\n         ICM   R7,3,=H'16'          STUFF IN INVALID NODE\n         B     NODE_TESTER         GO VALIDATE NODE\nCHECK_BOGUS_REMOTE EQU *           COME HERE TO TEST REMOTE\n         CLC   =C'R301',JCTJNAME+4  TEST FOR 3 DIGIT ONE\n         BNE   TEST_FOR_2DIGIT\n         ICM   R7,3,=H'301'        PUT IN 301\n         B     REMOTE_TESTER\nTEST_FOR_2DIGIT EQU *              TEST FOR 2 DIGIT\n         CLC   =C'R020',JCTJNAME+4  IS IT 2 DIGIT GUY\n         BNE   NOT_A_TEST          PROCESS AS NORMAL JOB\n         ICM   R7,3,=H'20'         STUFF 20 INTO R7\n         B     REMOTE_TESTER\nNOT_A_TEST EQU *                   COME HERE -- NORMAL PROCESS\n         ICM   R7,3,JCTRRMT        TEST FOR REMOTE ID\n         BZ    CHECK_NODES         IF 0 CHECK THE NODES FIELD\nREMOTE_TESTER EQU *                FORCE HERE FOR REMOTE TESTING\n         MVC   $$RMTROT,=C'RMT$'   MOVE IN STATIC PORTION USERID\n         MVC   $$RMTGNM,=C'RMT'    MOVE IN STATIC PORTION OF GRP ID\n         B     CONVERT             OTHERWISE GO CONVERT\nCHECK_NODES    EQU *               COME HER TO TEST NODE-IDS\n         ICM   R7,3,JCTRNODE       INSERT 2 BYTES OF NODE ID\n         BZ    EXIT36AD            IF VL = 0 EXIT PROGRAM\n         CLM   R7,B'0011',=H'13'   IS IT ORLANDO AND VMFLO7\n         BE    SET_NODE            YES GO CONVERT\n         CLM   R7,B'0011',=H'14'   IS IT 9221 EITHER PLACE\n         BE    SET_NODE            YES GO CONVERT\n         CLM   R7,B'0011',=H'15'   IS IT ATLANTA AND 9370\n         BE    SET_NODE            YES GO CONVERT\n*  CODE ADDED TO SUPPORT RSCSGAA8 AND RSCSFLO7 IN ATLANTA.\n         CLM   R7,B'0011',=H'9'    IS IT ATLANTA AND RSCSGAA8\n         BE    SET_NODE            YES GO CONVERT\n         CLM   R7,B'0011',=H'20'   IS IT ATLANTA AND RSCSFLO7\n         BE    SET_NODE            YES GO CONVERT\n         B     EXIT36AD            ANYBODY ELSE NO PROPAGATION\nNODE_TESTER  EQU  *                COME HERE TO TEST NODES\nSET_NODE EQU   *                   COME TO SET UP NODE NAMES\n         MVC   $$RMTROT,=C'NJE$'   MOVE IN STATIC PORTION USERID\n         MVC   $$RMTGNM,=C'NJE'    MOVE IN STATIC PORTION OF GRP ID\nCONVERT  EQU   *                   COME HERE IF 9370 OR 9221\n         CVD   R7,$$DOUBLE         CONVERT REMOTE # TO PACKED\n         UNPK  $$EXTNAL,$$DOUBLE   CONVERT TO EXTERNAL DECIMAL\n         OI    $$EXTNAL+2,X'F0'    GET RID OF SIGN\n         CLI   $$EXTNAL,X'F0'      Q--IS THE HIGH NUMBER ZERO\n         BE    TWO_DIGIT           A--YES RMT/NODE 00-99\n         OI    THREE_DIGITSW,1     TURN ON THREE DIGIT SWITCH\n         MVC   $$RMTNNN,$$EXTNAL      MOVE 3 DIGITS INTO NAME\n         MVC   $$RMTGN3,$$RMTNNN      MOVE THREE TO GROUP ID\n         MVI   $$RMTUSR_LENGTH,7   MAKE LENGTH A LITTLE BIGGER\n         MVI   $$RMTGRP_LENGTH,6   SAME HERE\n         B     $$SETUP_RACROUTE    AND GO TO RACF CALL\nTWO_DIGIT EQU  *                   COME HERE ON 00-99\n         MVC   $$RMTNN,$$EXTNAL+1  MOVE TO USERID FIELD\n         MVC   $$RMTGNO,$$RMTNN    MOVE TO GROUP NUMBER FIELD\n         MVI   $$RMTUSR_LENGTH,6   PUT LENGTH INTO FLD\n         MVI   $$RMTGRP_LENGTH,5   PUT GROUP LENGTH INTO FLD\n$$SETUP_RACROUTE EQU *             COME HERE FROM 100-999\n         MVI   LOG_AREA_LGTH,LOG_DATA   STORE LENGTH IN 1 BY\n         MVC   LOGUSER,$$RMTROT    MOVE RMT GROUP AND USER ID\n         MVC   LOGGROUP,$$RMTGNM   MOVE RMT GROUP AND USER ID\n         LA    R6,LOG_AREA_LGTH    STORE INTO R6\n         LA    R2,$$RMTUSR_LENGTH  LOAD LENGTH + USER ID ADDR\n         LA    R3,$$RMTGRP_LENGTH  LOAD LENGTH + GROUP ID ADDR\n         LA    R10,RACF_INIT       LOAD ADDR OF LIST RACROUTE\n         RACROUTE REQUEST=VERIFY,ACEE=(R8),GROUP=(R3),PASSCHK=NO,      X\n               RELEASE=1.9,ENVIR=CREATE,USERID=(R2),LOG=ALL,           X\n               WORKA=$$WRKARA,MF=(E,(R10)),LOGSTR=(R6)\n         LTR   R15,R15             TEST FOR ZEROES\n         BZ    VALID_NODE          IF ZERO RACF KNOWS HIM\n         MVC   X036RETC,=F'8'      SET RETRUN CODE 8\n         MVC   X036RSNC,=F'14'     SET REASON CODE 14\n         OI    XPLRESP,X036NORC   TURN ON OVERRIDE BIT\n         B     EXIT36AD            ANYBODY ELSE NO PROPAGATION\n         DC    X'0000'             OTHERWISE DUMP\nVALID_NODE EQU *                   USERID EXISTS\n         MVC   RACF_INIT(RACFLTHI),RACFINIT  MOVE IN LIST FORMAT\n         RACROUTE REQUEST=VERIFY,ACEE=(R8),RELEASE=1.9,ENVIR=DELETE,   X\n               WORKA=$$WRKARA,MF=(E,(R10))\n         LTR   R15,R15             TEST FOR GOOD DELETE\n         BZ    RACF_OK             ABLE TO DELETE ACEE OK\n         DC    X'0001'             SHOULD NOT GET HERE\nRACF_OK  EQU   *                   COME HERE ON GOOD DELETE\n         OI    JCTFLAG1,JCT5CKPT   REWRITE THIS JCT           RF-950313\n         OI    JCTFLAG2,JCT2AVDP+JCT2AVD  VALIDATION FLAG\n         TM    THREE_DIGITSW,1     IS IT 2 OR 3 POS NUMBER\n         BZ    JUST_TWO            IF ZERO RMT/NODE =00/99\n         MVI   SFIUIDL,7           MOVE LENGTH OF USERID\n         MVI   SFISUIDL,7          MOVE LENGTH OF USERID\n         MVI   SFIGRPL,6           MOVE LENGTH OF GROUP ID\n         MVI   SFISGRPL,6          MOVE LENGTH OF GROUP ID\n         MVC   SFIUID(L'NAME_ULENGTH7),$$RMTROT    MOVE IN USERID\n         MVC   SFISUID(L'NAME_ULENGTH7),$$RMTROT   MOVE IN USERID\n         MVC   SFIGRP(L'NAME_GLENGTH6),$$RMTGNM    MOVE IN GROUP NAME\n         MVC   SFISGRP(L'NAME_GLENGTH6),$$RMTGNM   MOVE IN GROUP NAME\n         B     RACF_OVERRIDE\nJUST_TWO EQU   *                   COME HERE 00/99\n         MVI   SFIUIDL,6           MOVE LENGTH OF USERID\n         MVI   SFISUIDL,6          MOVE LENGTH OF USERID\n         MVI   SFIGRPL,5           MOVE LENGTH OF GROUP ID\n         MVI   SFISGRPL,5          MOVE LENGTH OF GROUP ID\n         MVC   SFIUID(L'NAME_ULENGTH),$$RMTROT     MOVE IN USERID\n         MVC   SFISUID(L'NAME_ULENGTH),$$RMTROT    MOVE IN USERID\n         MVC   SFIGRP(L'NAME_GLENGTH),$$RMTGNM     MOVE IN GROUP NAME\n         MVC   SFISGRP(L'NAME_GLENGTH),$$RMTGNM    MOVE IN GROUP NAME\nRACF_OVERRIDE  EQU *\n         OI    SFIFLAG1,SFI1SREQ+SFI1NORM                rf-950314\n         L     R6,X036PARM\n         USING SAFP,R6\n         LR    R8,R6\n         A     R8,SAFPRACP\n         RACROUTE REQUEST=VERIFYX,PASSCHK=NO,MF=(M,(R6)),RELEASE=1.9,  x\n               SESSION=INTBATCH\n         B     EXIT36AD\n         TITLE 'END OF PROPRMT ROUTINE -- RETURN TO CALLER'\n***********************************************************************\n*                                                                     *\n*        Always return to the caller with a zero return code so that  *\n*        any other exits will get control.  There will be no changes  *\n*        in the condition byte so that the SAF call can be made or    *\n*        not be made as decided by other exits.                       *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nEXIT36AD EQU  *\n         $FREMAIN RU,LV=$$LGTH,A=(R9)\nTRYREST  SLR    R15,R15            Indicate to take other exits\n        $RETURN RC=(R15)           Restore callers registers and return\n         SPACE 1\n         LTORG\nRACFINIT RACROUTE REQUEST=VERIFY,RELEASE=1.9,MF=L,PASSCHK=NO\nRACFLTHI EQU *-RACFINIT    sets racflthi to length of racroute\n$$DMYARA DSECT\n$$WRKARA DS    CL512              WORKAREA FOR RACROUTE\nRACF_INIT ORG *+RACFLTHI LEAVE ENOUGH ROOM FOR LIST VERSION\nBLANK_AREA DS 0C\n$$DOUBLE DC    D'0'               CONVERSION FIELD FOR BINARY\n$$RMTUSR_LENGTH DC X'0'           LENGTH OF USERID\nNAME_ULENGTH  DS 0CL6           GET LENGTH OF USER NAME\nNAME_ULENGTH7 DS 0CL7           GET LENGTH OF USER NAME\n$$RMTROT DC    CL4'RMT$'          STATIC PORTION OF USERID\n$$RMTNN  DC    CL2'0'             DYNAMIC PORTION OF USERID\n         ORG   $$RMTNN            SET LOCATION COUNTER BACK\n$$RMTNNN DC    CL3'0'             3 DIGIT REMOTE NUMBER\n$$RMTGRP_LENGTH DC X'0'           LENGTH OF GROUPID\nNAME_GLENGTH  DS 0CL5           GET LENGTH OF GROUP NAME\nNAME_GLENGTH6 DS 0CL6           GET LENGTH OF GROUP NAME\n$$RMTGNM DC    CL3'RMT'           STATIC PORTION OF GROUP NAME\n$$RMTGNO DC    CL2'0'             DYNAMIC PORTION OF GROUP NAME\n         ORG   $$RMTGNO           SET LOCATION COUNTER BACK\n$$RMTGN3 DC    CL3'0'             DYNAMIC PORTION OF GROUP NAME\n$$EXTNAL DC    CL3'0'             UNPACKED FORMAT OF REMOTE #\nR15AREA  DC    F'0'               HOLD AREA FOR R15 IF NEEDED\nTHREE_DIGITSW  DC X'0'            SET TO BINARY ZERO\n$$SPACES EQU   *-BLANK_AREA       LENGTH OF AREA TO SET TO BLANKS\nLOG_AREA_LGTH DC X'0'             1 BYTE LENGTH FIELD\nLOGUSER  DC   CL7' '              MAX LGTH OF FIELD\nLOGGROUP DC   CL6' '              MAX LGTH OF IELD\nLOG_DATA EQU  *-LOG_AREA_LGTH     LENGTH OF LOGGED DATA\n$$LGTH   EQU   *-$$DMYARA         LENGTH OF GETMAIN AREA\n         CSECT\n         DROP  ,\n         TITLE 'SAMPLE USER EXIT 36 ROUTINES -- END ($MODEND)'\n        $MODEND ,\nAPARNUM  DC    CL8'00000000'       APAR NUMBER\n         END   ,                   END OF STSCX36A\n./ ADD NAME=LSES511J 0302-00234-03317-2258-00025-00018-00020-T0SM1\n//T0SM511J JOB  (4030,37),'REDO--LSES511',CLASS=X,MSGCLASS=A,\n// REGION=6M,\n//    NOTIFY=&SYSUID\n//*\n//*%PDSDOC 00 SMP APPLY LSES511\n/*JOBPARM S=TSPC\n/*CNTL SESG03A,EXC\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=MVS.OSMAINT.USERMODS.ZOS14(LSES511)\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES511) BYPASS(APPLYCHECK).\n  RESETRC.\n  RECEIVE S(LSES511) SOURCEID(SUNTRUST) .\n  SET BDY(AEST03A).\n  APPLY S(LSES511) REDO .\n./ ADD NAME=LSES512  0302-00234-03317-2258-00515-00545-00001-T0SM1\n++USERMOD(LSES512)\n /* ***************************************************************\n    ** * USEREXIT 49A                                      -   * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707) .\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STSCX49A),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STSCX49A)\n NAME STSCX49A(R)\n/*\n++SRC(STSCX49A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\nSTSCX49A TITLE 'JES2 JOB QUEUE WORK SELECT USER EXIT -- PROLOG'\n*\n* FUNCTIONS: THIS MODULE EITHER ACCEPTS OR REJECTS JES2'S CHOICE\n*            FOR JQE SELECTION.  WE USE IT TO SEQUENCE JOB'S BASED ON\n*            THEIR /*AFTER, /*BEFORE, /*WITH AND /*CNTL CARDS.\n*\n*\n*\n* ENTRY PT:  EXIT49A -- STSC'S JOB QUEUE WORK SELECT EXIT.\n*\n* REGISTER USAGE:\n*\n* REG  ON ENTRY     USAGE WITHIN EXIT 49                  ON RETURN\n* ---  ------------ ------------------------------------- ------------\n* R0   N/A          WORK                                  RESTORED\n* R1   XPL          WORK                                  RESTORED\n* R2   N/A          ADDR OF THIS JOB'S STQNAME.           RESTORED\n* R3   N/A          ADDR OF TEST JOB'S JQA.               RESTORED\n* R4   N/A          CAT (IN OUTER LOOP).                  RESTORED\n*                   ADDR OF TEST JOB'S UBRDNAME (INNER).\n* R5   N/A          ADDR OF TEST JOB'S JQE. (OUTER LOOP). RESTORED\n*                   COUNTER OF TEST JOB'S UBRDNAME (INNER).\n* R6   N/A          THIS JOB'S JQA; RETURN CODE AT END.   RESTORED\n* R7   N/A          OFFSET OF STQNAME (FROM $DOGBERT).    RESTORED\n* R8   N/A          $QGET PARM LIST FROM XPL.             RESTORED\n* R9   N/A          XLP (FROM R1 ON ENTRY)                RESTORED\n* R10  N/A          THIS JOB'S JQE (FOR $WTO)             RESTORED\n* R11  HCT          HCT                                   RESTORED\n* R12  N/A          BASE REGISTER FOR THE EXIT.           RESTORED\n* R13  PCE SAVE     PCE SAVE AREA.                        RESTORED\n* R14  RETURN ADDR  ADDR OF THIS JOB'S UBRDNAME.          RESTORED\n* R15  ENTRY ADDR   ADDR OF THIS JOB'S LOOP COUNTER.      RETURN CODE\n*\n*\n*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE\n*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS\n*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED\n*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF\n*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE\n*  USEFULLNESS OF THE MATERIAL.\n*\n*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,\n*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE\n*  IN THE FUTURE.\n*\n*    SPECIAL THANKS GO TO BOB BREAK OF ST. LOUIS FOR THE ORIGINAL CODE\n*  TO PARSE THE \"/*ROUTE XEQ RESNAME\" CARDS AND SET THE APPROPRIATE\n*  EXECUTION ENVIRONMENT.\n*\n*    SPECIAL THANKS TO JUDY RUNT OF WISCONSIN ELECTRIC FOR THE ORIGINAL\n*  CODE TO HANDLE THE \"/*CNTL BEFORE|AFTER|WITH,RESNAME\" AND \"/*CNTL\n*  RESNAME,EXC|SHR\" ROUTINES.  THE USE OF THE BLOCK EXTENSION REUSABLE\n*  TABLES, BERT'S, TO EXTEND THE JCT AND JQE.\n*\n*\n* REVISION HISTORY:\n*\n*   DATE   NAME         DESCRIPTION OF CHANGE\n* -------- ------------ -----------------------------------------------\n*\n         SPACE 1\n&DEBUG   SETC  'NO'                DEBUGGING SWITCH (NO/YES/DETAIL)\n         SPACE 1\n         PRINT OFF                 SUPRESS JES2 GLOBALS\n         COPY  $HASPGBL            INCLUDE THE JES GLOBAL VALUES\n         PRINT ON                  RESTORE FULL PRINTING\nSTSCX49A $MODULE TITLE='JES2 JOB QUEUE WORK SELECT USER EXIT',         X\n               RMODE=ANY,                                              X\n               ENVIRON=JES2,                                           X\n               $BERT,              ($DOGBERT)                          X\n               $BERTTAB,           ($DOGBERT)                          X\n               $CADDR,                                                 X\n               $CAT,               ($DOGCAT)                           X\n               $CATBERT,           ($DOGBERT)                          X\n               $HASPEQU,                                               X\n               $HCCT,              ($DOGBERT)                          X\n               $HCT,                                                   X\n               $JCT,               ($USERCBS: STJCTX)                  X\n               $JCTX,              ($USERCBS: STJCTX)                  X\n               $JQE,                                                   X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PADDR,                                                 X\n               $PARMLST,                                               X\n               $PCE,                                                   X\n               $PSV,                                                   X\n               $QGET,                                                  X\n               $QSE,                                                   X\n               $XECB,                                                  X\n               $XPL,                                                   X\n               $USERCBS            STSC'S CONTROL BLOCKS\n         TITLE 'JES2 JOB QUEUE WORK SELECT USER EXIT'\n         USING HCT,R11\n         USING PCE,R13\nEXIT49A $ENTRY BASE=(R12),CSECT=NO,ENTRY=YES,REGUSE=(R15)\n        $SAVE  ,                   SAVE CALLER'S REGISTERS\n         LR    R12,R15             GET OUR BASE ADDRESS\n*\n         LR    R9,R1               GET OUR PARM LIST ADDRESS\n         USING XPL,R9\n         L     R8,X049QGT          GET THE $QGET PARM LIST ADDR\n         USING QGT,R8\n         L     R10,X049JQE         GET THE SELECTED JQE\n         USING JQE,R10             BASE FOR THE SELECTED JQE\n*\n         AIF   ('&DEBUG' EQ 'NO').DEBG010  SKIP DEBUGGING CODE\n         L     R0,QGTLSTLN         GET THE FLAG BYTES\n         SRL   R0,8                GET RID OF THE LOW ORDER BYTE\n         LA    R15,6               SHOW FIELD LENGTH IN NIBBLES\n         BAL   R14,TOHEX           CONVERT TO HEX\n         MVC   MSG000FL,TOHEXFLD   MOVE HEX VALUES INTO MSG\n*\n        $WTO   MSG000,L'MSG000,JOB=YES,ROUTE=$ALL\n.DEBG010 ANOP  ,                   SKIPPED DEBUGGING CODE\n*\n         CLI   QGTTYP,0            CHECK FOR INWS,OJTWSC,OJTWS,WLMINWS\n         BNE   X049RC00            NO -- EXIT; USE JES2'S SELECTION\n*\n         CLI   QGTWSTP,$QGTWLMQ    CHECK FOR WLM-MANAGED INITS $QGET\n         BE    CHECKJOB            YES - GO CHECK AFTER/BEFORE/CNTL\n*\n         CLI   QGTWSTP,$QGTINWS    CHECK FOR JES2-MANAGED INITS $QGET\n         BNE   X049RC00            NO -- EXIT; USE JES2'S SELECTION\n*\nCHECKJOB DS    0H\n        $DOGBERT ACTION=GETOFFSET, GET OUR BERT'S OFFSET               X\n               CBTYPE=JQE,                                             X\n               NAME=STQNAME,                                           X\n               ERRET=NOSTQNAME     (SHOULDN'T HAPPEN)\n*\n         LR    R7,R1               SAVE OFFSET OF OUR BERT\n*\n        $DOGJQE ACTION=(FETCH,READ),JQE=(R10)  GET SELECTED JQE'S JQA\n         LR    R10,R0              KEEP SELECTED JQA'S ADDRESS AS BASE\n*\n***********************************************************************\n*\n*   INITIATOR (JES2 OR WLM) JOB SELECT\n*\n*        CHECK FOR /*AFTER, /*BEFORE OR /*CNTL CONTENTION.\n*        REJECT JOB IF ANY CONTENTION FOUND BY SETTING X049SKIP.\n*\n***********************************************************************\n*\n         USING CAT,R4              CAT ADDRESSABILITY\n         SLR   R4,R4               INITIALIZE WITH NO CAT\n         SR    R2,R2               SHOW DON'T HAVE JQA FOR THIS JQE\n*\n* SCAN ALL CLASS ATTRIBUTE TABLES (CATS)\n* THIS INCLUDES STARTED TASKS AND TSO USERS.\n*\nNEXTCAT  DS    0H\n         CL    R4,$ALLFFS          IS THERE ANOTHER QUEUE?\n         BE    RETJQA              ALL QUEUES ARE DONE -- NO CONTENTION\n*\n        $DOGCAT ACTION=(FETCHNEXT,READ),  LOOP THROUGH CATS            X\n               CAT=(R4),                                               X\n               ERRET=REBLDQ        DO REBUILD QUEUE WHEN DONE\n*\n         LR    R4,R1               COPY CAT ADDRESS\n*\n         AIF   ('&DEBUG' NE 'DETAIL').DEBG020  SKIP DEBUGGING CODE\n         MVC   MSGCATCL,CATCLASS   SHOW CLASS\n        $WTO   MSGCAT,L'MSGCAT,JOB=YES,ROUTE=$ALL\n.DEBG020 ANOP  ,                   SKIPPED DEBUGGING CODE\n*\n         B     GOTJQEQ             LOOP THRU JQES\n*\nREBLDQ   DS    0H\n*\n         AIF   ('&DEBUG' NE 'DETAIL').DEBG025  SKIP DEBUGGING CODE\n        $WTO   MSGRBLDQ,L'MSGRBLDQ,JOB=YES,ROUTE=$ALL\n.DEBG025 ANOP  ,                   SKIPPED DEBUGGING CODE\n*\n         L     R4,$ALLFFS          INDICATE CLASSES DONE\n*\n* SCAN ALL THE JQES IN THE REBUILD QUEUE (NOT SURE IF WE NEED THIS).\n* GET A REAL-MODE JQE FOR NOW.\n*\n        $QJQE TYPE=REBUILD,        GET FIRST REBUILD JQE               X\n               REG=(R5),                                               X\n               MODE=REAL,                                              X\n               GETFIRST=YES,       NOTE: LOOP AT NEXTJQE               X\n               NOMORE=NEXTCAT\n         B     GOTJQE              GO PROCESS JQE\n*\n* SCAN ALL THE JQES IN THIS CLASS -- GET A REAL-MODE JQE FOR NOW.\n*\nGOTJQEQ  DS    0H\n        $QJQE  CAT=(R4),           LOOP THROUGH JQES FOR               X\n               REG=(R5),            THIS CLASS                         X\n               MODE=REAL,                                              X\n               LOOP=NEXTJQE,                                           X\n               NOMORE=NEXTCAT\n*\nGOTJQE   DS    0H                  FOUND A JQE TO CHECK AGAINST\n         SR    R2,R2               SHOW DON'T HAVE JQA FOR THIS JQE\n*\n         AIF   ('&DEBUG' EQ 'NO').DEBG030  SKIP DEBUGGING CODE\n         MVC   MSGJQEJN,JQEJNAME-JQE(R5)  SHOW JOB NAME\n        $WTO   MSGJQE,L'MSGJQE,JOB=YES,ROUTE=$ALL\n.DEBG030 ANOP  ,                   SKIPPED DEBUGGING CODE\n*\n* CHECK THE SELECTED JQE AGAINST THIS JQE FOR /*AFTER, /*BEFORE OR\n* /*CNTL RESOURCE CONTENTION.\n*\n* 1 - CHECK THE SELECTED JQE TO SEE IF IT IS THE SAME JOBNAME.\n*\n*       IGNORE IF IT IS, SINCE /*AFTER AND /*BEFORE WOULD BE BAD AND\n*       /*CNTL IS IRRELEVANT SINCE WE DON'T ALLOW DUPLICATE JOBS RUN.\n*\n         CLC   JQEJNAME,JQEJNAME-JQE(R5) SAME JOBNAME?\n         BE    NEXTJQE                   YES -- JUST SKIP (NO DUPS)\n*\n* 2 - CHECK THE SELECTED JQE TO SEE IF IT SHOULD RUN AFTER THIS JQE.\n*\n         LA    R6,0(R7,R10)        GET OUR BERT'S ADDR FOR SELECTED JQA\n         USING STQNAME,R6          COMMENTED - CAUSE SET ABOVE\n         TM    UBRMFLAG,UBRWITHF   DO WE CHECK FOR A MATCHING /*WITH\n         BZ    NOWITHF2             IF NOT - JUST GO ON\n         CLC   UBRWITH,JQEJNAME-JQE(R5)\n         BNE   NOWITHF2            IF NOT A MATCH CONTINUE - ELSE\n         OI    UBRDLAYS,UBRDLWIT      SET WITH CONDITION MATCHED\nNOWITHF2 EQU   *\n         TM    UBRMFLAG,UBRAFT     DOES SELECTED JQA USE /*AFTER?\n         BZ    CHECK3              NO -- DO NEXT CHECK\n         CLC   UBRAFTR(8),JQEJNAME-JQE(R5)  IS IT THIS JQE'S JOBNAME?\n         BE    REJAFT                        YES -- REJECT THIS JOB\n*\n* 3 - CHECK THIS JQE TO SEE IF IT SHOULD RUN BEFORE THE SELECTED JQE.\n*\n*       SINCE ONLY BATCH JOBS CAN HAVE /*BEFORE OR /*CNTL, WE CHECK\n*       FOR THIS FIRST TO AVOID THE COST OF GETTING AND RETURNING\n*       THE JQA FOR EACH TESTED JQE.\n*\nCHECK3   DS    0H\n         TM    JQEFLAG3-JQE(R5),JQE3JOB  IS THIS JQE FOR A BATCH JOB?\n         BNZ   NEXTJQE                   NO - CAN'T HAVE /*BEFORE/CNTL\n*\n* NOW MUST GET A READ MODE JQA FOR THIS CHECK AND /*CNTL CHECKS.\n*       *** DON'T FORGET TO FREE IT. ***\n*\n        $DOGJQE ACTION=(FETCH,READ),JQE=(R5)  GET THIS JQE'S JQA\n         LR    R3,R0               KEEP THIS JQA'S ADDRESS AS BASE\n         LA    R2,0(R7,R3)         GET OUR BERT'S ADDR FOR THIS JQA    X\n                                   (ALSO SHOWS WE HAVE A JQA)\n*\n         TM    UBRMFLAG-STQNAME(R2),UBRBEF DOES THIS JQA USE /*BEFORE?\n         BZ    CHECK4                     NO -- GO TO NEXT CHECK\n         LA    R15,UBRBFOR-STQNAME(,R2)  YES - CHECK THE JOBNAME\n         CLC   JQEJNAME,0(R15)     IS THE SELECTED JQA THE ONE USED?\n         BE    REJBEF              YES -- REJECT THIS JOB\n*\n* 4 - CHECK BOTH JQAS TO SEE IF THEY HAVE /*CNTL CONTENTION.\n*\nCHECK4   DS    0H\n         TM    UBRMFLAG,UBRCNTL    DOES SELECTED JQA USE /*CNTL?\n         BZ    CHK4END             NO -- CAN'T HAVE CONTENTION\n         TM    UBRMFLAG-STQNAME(R2),UBRCNTL DOES THIS JQA USE /*CNTL?\n         BZ    CHK4END                     NO -- CAN'T HAVE CONTENTION\n*\n        $QBUSY JQE=(R3),           CHECK IF THIS JQE IS BUSY           X\n               ACTION=(TEST,ANY),                                      X\n               NOTBUSY=CHK4END     NOT BUSY - CAN'T HAVE CONTENTION\n*\n         AIF   ('&DEBUG' EQ 'NO').DEBG040  SKIP DEBUGGING CODE\n         MVC   MSGCTL1R,UBRDNAME   SHOW SELECTED JOB'S RESOURCES\n        $WTO   MSGCTL1,L'MSGJQE,JOB=YES,ROUTE=$ALL\n         MVC   MSGCTL2R,UBRDNAME-STQNAME(R2) SHOW THIS JOB'S RESOURCES\n        $WTO   MSGCTL2,L'MSGJQE,JOB=YES,ROUTE=$ALL\n.DEBG040 ANOP  ,                   SKIPPED DEBUGGING CODE\n*\n*     BOTH JOBS USED /*CNTL AND THE OTHER JOB IS IN EXECUTION,\n*     SEE IF USING THE SAME RESOURCE NAME AND EITHER USES EXCLUSIVE.\n*\n*     SINCE EACH JOB CAN HAVE MULTIPLE (1-4) /*CNTL CARDS, WE MUST\n*     RUN A DOUBLE LOOP TO COMPARE EACH OF THE SELECTED JOB'S\n*     RESOURCE NAMES AND SHARE TYPES WITH EACH OF THE TEST JOB'S\n*     RESOURCE NAMES AND SHARE TYPES.  THE JOB WILL BE REJECTED IF\n*     A RESOURCE NAME MATCHES AND EITHER JOBS' SHARE TYPE IS \"E\".\n*\n*        SETUP POINTER (R14) AND COUNTER (R15) FOR THE OUTER LOOP.\n*\n         LA    R14,UBRDNAME        GET ADDR OF RESOURCE NAME FIELDS\n         SLR   R15,R15             ZERO FOR IC INSTRUCTION\n         IC    R15,UBRMFLAG        GET /*CNTL COUNT AND FLAGS\n         SRL   R15,4               SHIFT OUT FLAGS; RIGHT-JUSTIFY COUNT\n*\n* SAVE REGISTERS OVER THE FOLLOWING DOUBLE LOOP\n*\n         STM   R4,R5,SAVE2REG      NEEDED FOR INNER LOOP\n*\n* LOOP THROUGH THE SELECTED JQA'S /*CNTL RESOURCE NAMES\n*      R15 IS THE LOOP COUNTER, R14 POINTS TO RESOURCE NAMES\n*\n*        SETUP POINTER (R4) AND COUNTER (R5) FOR THE INNER LOOP.\n*\nCHK41LP  DS    0H\n         LA    R4,UBRDNAME-STQNAME(R2) GET ADDR OF RESOURCE NAME FIELDS\n         SLR   R5,R5                     ZERO FOR IC INSTRUCTION\n         IC    R5,UBRMFLAG-STQNAME(,R2)  GET /*CNTL COUNT AND FLAGS\n         SRL   R5,4                SHIFT OUT FLAGS; RIGHT-JUSTIFY COUNT\n*\n* LOOP THROUGH THIS JQA'S /*CNTL RESOURCE NAMES, COMPARING TO THE\n* SELECTED JQA'S RESOURCE NAMES.\n*      R5 IS THE LOOP COUNTER, R4 POINTS TO RESOURCE NAMES\n*\nCHK42LP  DS    0H\n         CLC   0(8,R4),0(R14)      COMPARE /*CNTL RESOURCE NAMES\n         BNE   CHK42NXT            DIFFERENT -- INCREMENT INNER LOOP\n         CLI   8(R4),C'E'          IS THIS JQA'S RESOURCE EXCLUSIVE?\n         BE    REJCTL              YES -- REJECT THE SELECTED JOB\n         CLI   8(R14),C'E'         IS SEL'D JQA'S RESOURCE EXCLUSIVE?\n         BE    REJCTL              YES -- REJECT THE SELECTED JOB\n*\nCHK42NXT DS    0H                  END OF INNER LOOP\n         LA    R4,UBRDNAML(,R4)    INCREMENT INNER LOOP POINTER\n         BCT   R5,CHK42LP          DECREMENT INNER COUNTER AND LOOP\n*\n         LA    R14,UBRDNAML(,R14)  INCREMENT OUTER LOOP POINTER\n         BCT   R15,CHK41LP         DECREMENT OUTER COUNTER AND LOOP\n*\n* RESTORE REGISTERS USED IN THIS LOOP\n*\n         LM    R4,R5,SAVE2REG      USED IN THE INNER LOOP\n*\nCHK4END  DS    0H                  END OF 4TH CHECK (/*CNTL)\n        $DOGJQE ACTION=(RETURN),CBADDR=(R3)  RETURN JQA FOR THIS JQE\n*\n         B     NEXTJQE             GO LOOK AT NEXT JQE\n*\n***********************************************************************\n*\n*   COMMON EXIT RETURN POINTS\n*\n***********************************************************************\n*\nREJAFT   DS    0H                  REJECT DUE TO /*AFTER CONTENTION\n         OI    UBRDLAYS,UBRDLAFT   SHOW WHY REJECTED\n         OI    X049RESP,X049SKIP   INDICATE JOB REJECTED\n         AIF   ('&DEBUG' EQ 'NO').DEBG110  SKIP DEBUGGING CODE\n         MVC   DELAYAFJ,JQEJNAME-JQE(R5) COPY DELAYING JOBNAME INTO MSG\n        $WTO   DELAYAFT,L'DELAYAFT,JOB=YES,ROUTE=$MAIN\n.DEBG110 ANOP  ,                   SKIPPED DEBUGGING CODE\n         B     RETJQA              RETURN THE JQA AND EXIT\n*\nREJBEF   DS    0H                  REJECT DUE TO /*BEFORE CONTENTION\n         OI    UBRDLAYS,UBRDLBEF   SHOW WHY REJECTED\n         OI    X049RESP,X049SKIP   INDICATE JOB REJECTED\n         AIF   ('&DEBUG' EQ 'NO').DEBG120  SKIP DEBUGGING CODE\n         MVC   DELAYBEJ,JQEJNAME-JQE(R5) COPY DELAYING JOBNAME INTO MSG\n        $WTO   DELAYBEF,L'DELAYBEF,JOB=YES,ROUTE=$MAIN\n.DEBG120 ANOP  ,                   SKIPPED DEBUGGING CODE\n         B     RETJQAS             RETURN THE JQAS AND EXIT\n*\nREJCTL   DS    0H                  REJECT DUE TO /*CNTL CONTENTION\n         LM    R4,R5,SAVE2REG      RESTORE REGS NEEDED FOR INNER LOOP\n         OI    UBRDLAYS,UBRDLCTL   SHOW WHY REJECTED\n         OI    X049RESP,X049SKIP   INDICATE JOB REJECTED\n         AIF   ('&DEBUG' EQ 'NO').DEBG130  SKIP DEBUGGING CODE\n         MVC   DELAYCTJ,JQEJNAME-JQE(R5) COPY DELAYING JOBNAME INTO MSG\n         MVC   DELAYCTR,0(R14)     COPY DELAYING RESOURCE INTO MSG\n        $WTO   DELAYCTL,L'DELAYCTL,JOB=YES,ROUTE=$MAIN\n.DEBG130 ANOP  ,                   SKIPPED DEBUGGING CODE\n         B     RETJQAS             RETURN THE JQAS AND EXIT\n*\nRETJQAS  DS    0H                  RETURN THE JQA\n        $DOGJQE ACTION=(RETURN),CBADDR=(R3)  FOR THIS JQE\n*\nRETJQA   DS    0H                  RETURN THE JQA FOR\n*  NOW JUST BEFORE RETURNING THE SELECTED JQE -\n*    TEST TO SEE IF THERE WAS A /*WITH AND IF IT WAS SATISFIED\n         TM    UBRMFLAG,UBRWITHF    IS THE A WITH RESTRICTION ?\n         BZ    NOWITHXX                IF NOT JUST CONTINUE\n         TM    UBRDLAYS,UBRDLWIT    WAS THE WITH SATISFIED ?\n         BO    NOWITHXX            SATISFIED - JUST CONTINUE\n         OI    X049RESP,X049SKIP     IF NOT THEN DON'T SELECT JOB\n         AIF   ('&DEBUG' EQ 'NO').DEBG140  SKIP DEBUGGING CODE\n         MVC   DELAYWTJ,UBRWITH    COPY DELAYING JOBNAME INTO MSG\n        $WTO   DELAYWTT,L'DELAYWTT,JOB=YES,ROUTE=$MAIN\n.DEBG140 ANOP  ,                   SKIPPED DEBUGGING CODE\n*\nNOWITHXX EQU   *                      NOT BEING SATISFIED.\n        $DOGJQE ACTION=(RETURN),CBADDR=(R10)  THE SELECTED JQE\n         B     X049RC04            EXIT - BYPASS OTHER EXIT 49 ROUTINES\n*\nX049RC04 DS    0H                  BYPASS OTHER EXIT 49 ROUTINES\n         LA    R6,4                SET RETURN CODE\n         B     X049RET\n*\nX049RC00 DS    0H                  RUN OTHER EXIT 49 ROUTINES\n         LA    R6,0                SET RETURN CODE\n*\nX049RET  DS    0H                  COMMON RETURN POINT\n        $RETURN RC=(R6)\n*\n* ERROR RETURN FROM $DOGBERT ACTION=GETOFFSET (SHOULDN'T HAPPEN)\n*\nNOSTQNAME DS   0H\n        $WTO   NOBERTM,L'NOBERTM,JOB=YES,ROUTE=$MAIN\n         B     X049RC00            TAKE STANDARD RETURN\n*\n         AIF   ('&DEBUG' EQ 'NO').NOTOHEX    SKIP DEBUGGING LOGIC\n         TITLE 'JES2 JOB QUEUE WORK SELECT USER EXIT -- TOHEX SUBROUTINX\n               E'\n*\n*  SUBROUTINE TO CONVERT THE CONTENTS OF R0 TO HEX.  RESULTS ARE STORED\n*  IN FIELD \"TOHEXFLD\".\n*\n*  REGISTER USAGE:\n*\n*             ON ENTRY                        ON RETURN\n*             -----------------------------   -----------------\n*        R0   VALUE TO CONVERT, RIGHT JUST.   DESTROYED\n*        R1   N/A                             DESTROYED\n*        R14  RETURN ADDRESS                  NO CHANGE\n*        R15  NUMBER OF NIBBLES TO CONVERT    DESTROYED\n*\n*\nTOHEX    DS    0H\n         SRDL  R0,4                ISOLATE NEXT 4 BITS INTO R1\n         SRL   R1,28               RIGHT JUSTIFY THESE 4 BITS\n         CH    R1,=H'9'            CHECK RANGE (0-9 VS. A-F)\n         BH    TOHEXSKP            HIGHER -- DON'T NEED TO ADJUST\n         LA    R1,C'0'-C'A'+10(,R1)   ADJUST FOR EBCDIC CHAR RANGES\nTOHEXSKP LA    R1,C'A'-10(,R1)     CONVERT TO PRINTABLE (0-9,A-F)\n         STC   R1,TOHEXFLD-1(R15)  PUT INTO TEMP FIELD\n         BCT   R15,TOHEX           LOOP FOR ALL HALF-BYTES\n         BR    R14                 RETURN\n*\nTOHEXFLD DC    CL8' '              WORK AREA FOR TOHEX ROUTINE\n.NOTOHEX ANOP  ,                   DEBUGGING LOGIC SKIPPED\n         TITLE 'JES2 JOB QUEUE WORK SELECT USER EXIT -- DATA AREAS'\n*\nSAVE2REG DC    2F'0'               SPACE TO SAVE 2 REGISTERS\n*\nNOBERTM $MSG   999,'NO STQNAME FOUND IN EXIT 49 FOR SELECTED JQE.'\n*\n*\n         AIF   ('&DEBUG' EQ 'NO').DEBG900  SKIP DEBUGGING CODE\n*\n*   DEBUGGING MESSAGES\n*\nMSG000  $MSG   000,'STSCX49A DEBUG: EXIT 49 STARTED, FLAGS=FFFFFF.'\nMSG000FL EQU   *-7,6               START OF FLAGS\n*\nMSGCAT  $MSG   000,'STSCX49A DEBUG: CLASS BEING SCANNED: CCCCCCCC'\nMSGCATCL EQU   *-8,8               START OF CLASS FIELD\n*\nMSGRBLDQ $MSG  000,'STSCX49A DEBUG: SCANNING THE REBUILD QUEUE.'\n*\nMSGJQE  $MSG   000,'STSCX49A DEBUG:   JQE FOUND FOR JOB: JJJJJJJJ'\nMSGJQEJN EQU   *-8,8               START OF JOBNAME FIELD\n*\nMSGCTL1 $MSG   000,'STSCX49A DEBUG: SELT-RES:XXXXXXXXXXXXXXXXXXXXXXXXXXX\n               XXXXXXXXXX.'\nMSGCTL1R EQU   *-37,36             START OF RESOURCES FIELD\n*\nMSGCTL2 $MSG   000,'STSCX49A DEBUG: THIS-RES:XXXXXXXXXXXXXXXXXXXXXXXXXXX\n               XXXXXXXXXX.'\nMSGCTL2R EQU   *-37,36             START OF RESOURCES FIELD\n*\nDELAYAFT $MSG  999,'DELAYED DUE TO /*AFTER CONTENTION: XXXXXXXX'\nDELAYAFJ EQU   *-8,8               START OF JOBNAME IN MESSAGE\n*\nDELAYWTT $MSG  999,'DELAYED DUE TO /*WITH CONDITION: XXXXXXXX'\nDELAYWTJ EQU   *-8,8               START OF JOBNAME IN MESSAGE\n*\nDELAYBEF $MSG  999,'DELAYED DUE TO /*BEFORE CONTENTION: XXXXXXXX'\nDELAYBEJ EQU   *-8,8               START OF JOBNAME IN MESSAGE\n*\nDELAYCTL $MSG  999,'DELAYED DUE TO /*CNTL CONTENTION: XXXXXXXX/RRRRRRRRX\n               '\nDELAYCTJ EQU   *-17,8              START OF JOBNAME IN MESSAGE\nDELAYCTR EQU   *-8,8               START OF RESOURCE IN MESSAGE\n*\n.DEBG900 ANOP  ,                   SKIPPED DEBUGGING CODE\n*\n         TITLE 'JES2 JOB QUEUE WORK SELECT USER EXIT -- EPILOG'\n        $MODEND ,\n         END   ,                   END OF MODULE\n./ ADD NAME=LSES512J 0402-00234-03317-2303-00025-00018-00020-T0SM1\n//T0SM512J JOB  (4030,37),'REDO--LSES512',CLASS=X,MSGCLASS=A,\n// REGION=6M,\n//    NOTIFY=T0SM0\n//*\n//*%PDSDOC 00 SMP APPLY LSES512\n/*JOBPARM S=TSPC\n/*CNTL SESG03A,EXC\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=MVS.OSMAINT.USERMODS.ZOS14(LSES512)\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES512) BYPASS(APPLYCHECK).\n  RESETRC .\n  RECEIVE S(LSES512) SOURCEID(SUNTRUST).\n  SET BDY(AEST03A).\n  APPLY S(LSES512) REDO.\n./ ADD NAME=LSES513  0202-00234-03317-2303-00166-00172-00017-T0SM1\n++USERMOD(LSES513)\n /* ***************************************************************\n    ** * CODE FOR USEREXIT 100                                 * **\n    ***************************************************************\n* *%PDSDOC 00 JES2 USER EXIT 100.  FCB SET UP USER EXIT.\n    */ .\n++VER(Z038) FMID(HJE7707) .\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STSCX100),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STSCX100)\n NAME STSCX100(R)\n/*\n++SRC(STSCX100) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\n         TITLE 'JES2 USER EXIT 100'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    JES2 USER EXIT 100.  FCB SET UP USER EXIT.                       *\n*                                                                     *\n*                                                                     *\n*    PURPOSE -                                                        *\n*                                                                     *\n*       1)   TO PROVIDE FOR FCB NAME TRANFORMATION FOR ALL NON 3800   *\n*            DEVICES.                                                 *\n*            THE TRANSFORMATION USED TO BE REQUIRED TO HANDLE PRINT   *\n*            GOING TO REAL PRINTER AND FICHE - WE GOT RID OF THE      *\n*            FICHE BUT STILL HAVE TO TRANSLATE THE FCB NAMES UNTIL    *\n*            THE JCL IS CLEANED UP.  UNTIL THENTHE FCB NAMES UNTIL    *\n*                                                                     *\n*            RULE FOR THE LOW ORDER DIGIT OF THE FCB IS...            *\n*            IF 'A' OR LESS, LEAVE IT ALONE.                          *\n*            IF B-R, FORCE TO 'A'.                                    *\n*            IF S-Z, FORCE TO STANDARD.                               *\n*            IF GT 'Z', LEAVE IT ALONE.                               *\n*            THIS CODE DUPLICATED FOR THE REMOTES                     *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         COPY  $HASPGBL\nSTSCX100 $MODULE ENVIRON=JES2,     REQ'D BY JES2 4.3.0      RMF-940428 *\n               RMODE=ANY,                                              *\n               RPL,                REQ'D BY $BUFFER                    *\n               UCB,                REQ'D BY EXIT 100                   *\n               $BUFFER,            REQ'D BY EXIT CODE                  *\n               $CAT,               REQ'D BY $HCT                       *\n               $DCT,               REQ'D BY $HCT                       *\n               $PPPWORK,           REQ'D BY EXIT 100                   *\n               $HASPEQU,           REQ'D BY REG CONVENTIONS            *\n               $HCT,               REQ'D BY $SAVE/$RETURN              *\n               $JCT,                                                   *\n               $JCTX,                                                  *\n               $JOE,                                                   *\n               $JQE,               REQ'D BY $HCT                       *\n               $MIT,               REQ'D BY $HCT                       *\n               $PCE,               REQ'D BY $HCT AND AMIKOM            *\n               $PDDB,                                                  *\n               $CIRWORK,           REQ'D BY EXIT 100                   *\n               DYN,                REQ'D BY $CIRWORK                   *\n               SJEXP,              REQ'D BY $CIRWORK                   *\n               $PADDR,             REQ'D BY $CIRWORK                   *\n               $HFAME,             REQ'D BY $CIRWORK                   *\n               WPL                 REQ'D BY $CIRWORK\n         EJECT\n         PRINT ON,GEN,DATA\nEXIT100A $ENTRY BASE=R12\n         SPACE 1\n         $SAVE\n         LR    R12,R15             ADDRESS MY CODE\n         L     R7,CVTPTR           GET CVT POINTER,  =A(CVTMAP)\n         LA    R0,CVTMAP-CVTFIX\n         SLR   R7,R0               BACK UP FROM CVTMAP TO CVTFIX\n         USING CVTFIX,R7           ADDRESS CVT PREFIX AREA\n*   SMF SYSTEM I.D.\n         L     R7,CVTSMCA          SMF'S SMCA\n         DROP  R7                  CVTMAP\n         USING SMCABASE,R7\n         CLC   SMCASID(3),=C'QAS'\n         BE    DOWORK\n         CLC   SMCASID(3),=C'A81'\n         BE    DOWORK\n         CLC   SMCASID(3),=C'B33'\n         BE    DOWORK\n         CLC   SMCASID(3),=C'ATL'\n         BE    DOWORK\n         CLC   SMCASID(3),=C'RIC'\n         BE    DOWORK\n         B     NORMAL              JUST GO HOME - NO CHANGES NEEDED\n         DROP  R7\n         SPACE 1\n*   REGISTER USAGE\n*        USING JES2X100,R12\n*        USING PCE,R13\n*        USING HCT,R11\n         USING DCT,R4\n         SPACE 1\nDOWORK   EQU   *                   ENTERED BY ADDENDUM EXIT 100\nX100B200 EQU   *                   THIS IS A REMOTE PRINTER\n*                                  THIS IS A LOCAL PRINTER\n*        CLI   PPPDEVTP+3,UCB3800  3800 DEVICE?  TEST NOT NEEDED\n*        BE    X100B900            YES         THEY NEVER GET HERE\n*                                                             *\n*    TRANSFORM LOW ORDER DIGIT OF FCB:                        *\n*    IF STANDARD FCB, DO NOT ALTER.                           *\n*    IF 'A' OR LESS, LEAVE IT ALONE.                          *\n*    IF B-R, FORCE TO 'A'                                     *\n*    IF S-Z, USE STANDARD FCB.                                *\n*    IF GT 'Z', LEAVE IT ALONE                                *\n*                                                             *\n*  WE WILL PASS THE MODIFIED FCB NAME BACK TO JES2 IN R1      *\n*                                                             *\n         C     R1,=C'****'         STANDARD FCB REQ  Q.\n         BE    RMT0200             YES\n*   PREVIOUS TWO INST MAY ALSO LEAD TO $HASP180 MSG.\n         C     R1,=C'6411'         STANDARD FCB REQ  Q.\n         BE    RMT0200             YES\n         CLM   R1,1,=C'A'          IS DIGIT LE 'A'\n         BNH   RMT0200             YES\n         CLM   R1,1,=C'S'          IS DIGIT GE 'B' AND LT 'S'\n         BL    RMT0150             YES\n         CLM   R1,1,=C'Z'          IS DIGIT GE 'S' AND LE 'Z'\n         BH    RMT0200             NO\n         L     R1,=C'6411'         YES\n         B     RMT0200             AND DO NOT ALTER.\nRMT0150  ICM   R1,1,=C'A'          FORCE FCB TO XXXA\nRMT0200  EQU   *\n         B     X100B800            EXIT\n         SPACE 2\nX100B800 EQU   *                   NEED TO CHANGE 'SETUP' ADDR\n*                                  BACK IN HASPPRPU\n         SPACE 1\nX100B900 EQU   *                   END\nNORMAL   SLR   R15,R15             SHOW NORMAL PROCESSING\n         SPACE 1\n$RETURN  $RETURN RC=(R15)          GO BACK TO JES2\n*\n         LTORG\n*\n         $MODEND\n*\n         PRINT ON,GEN,NODATA\n         CVT   PREFIX=YES,DSECT=YES,LIST=NO\n         IHAECVT DSECT=YES         EXTENDED CVT AREA\n         IEESMCA ,                 SMCA (SMF CONTROL BLOCK)\n*\n         END\n./ ADD NAME=LSES513J 0302-00234-03317-2305-00025-00018-00022-T0SM1\n//T0SM513J JOB  (4030,37),'REDO--LSES513',CLASS=X,MSGCLASS=A,\n// REGION=6M,\n//    NOTIFY=T0SM0\n//*\n//*%PDSDOC 00 SMP APPLY LSES513\n/*JOBPARM S=TSPC\n/*CNTL SESG03A,EXC\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=MVS.OSMAINT.USERMODS.ZOS14(LSES513)\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES513) BYPASS(APPLYCHECK).\n  RESETRC.\n  RECEIVE S(LSES513) SOURCEID(SUNTRUST).\n  SET BDY(AEST03A).\n  APPLY S(LSES513) REDO .\n./ ADD NAME=LSES514  0403-00234-03317-2333-00038-00028-00000-T0SM0\n++USERMOD(LSES514)\n /* ***************************************************************\n    ** * THIS MOD ADD USER EXIT 100 TO HASPPRPU                * **\n    ** *                                                       * **\n    ** * WARNING - NO NOT RENUMBER !                           * **\n    ** *                                                       * **\n    ** *       W   W  AAA  RRRR  N   N  III  N   N  GGGG       * **\n    ** *       W   W A   A R   R NN  N   I   NN  N G           * **\n    ** *       W W W AAAAA RRRR  N N N   I   N N N G  GG       * **\n    ** *       WW WW A   A R  R  N  NN   I   N  NN G   G       * **\n    ** *       W   W A   A R   R N   N  III  N   N  GGGG       * **\n    ** *                                                       * **\n    ** * WARNING - NO NOT RENUMBER !                           * **\n    ** *                                                       * **\n    ** *-------------------------------------------------------* **\n    ** * WARNING - CHECK UPDATED IBM SOURCE, PRIOR TO APPLY    * **\n    ** *           TO BE SURE STSC MOD STILL FITS              * **\n    ** *-------------------------------------------------------* **\n    ** *HO-03/19 UPDATED PRE(UW... TO MATCH RSU0012 NEW PTFS   * **\n    ** *         UPDATED REWORK(.. TO CURRENT DATE OF APPLY    * **\n    ** *         PRES NEED TO BE ACCEPTED, PRIOR TO RESTORE    * **\n    ** *                                                       * **\n    ** *                                                       * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707)\n   PRE(UW89092\n               )         .\n++SRCUPD(HASPPRPU) .\n>< CHANGE NAME=HASPPRPU\nDSVNINDX EQU   *                   FCB CHANGE...                  SGM\n         $EXIT 100,JOBMASK=JCTXMASK,TYPE=TEST    IS EXIT ACTIVE ? SGM\n         JZ    NOEX100             IF NOT THEN DON'T EVEN TRY     SGM\n         ICM   R1,15,SETUPFCB      GET CURRENT SETUP FCB IN R1    SGM\n         $EXIT 100,MAXRC=0,TYPE=ENTER                             SGM\n         STCM  R1,15,SETUPFCB      REPLACE WITH MODIFIED FCB      SGM\nNOEX100  EQU   *                                                  SGM\n         CLC   DCTFCB,SETUPFCB     FCB CHANGE...                 @220CM\n./ ADD NAME=LSES514J 0302-00234-03317-2340-00026-00018-00021-T0SM0\n//T0SM514J JOB  (4030,37),'RE-CK LSES514',CLASS=X,MSGCLASS=A,\n// REGION=6M,\n//    NOTIFY=&SYSUID\n//*\n//*%PDSDOC 00 SMP APPLY LSES514\n/*JOBPARM S=TSPC\n/*CNTL SESG03A,EXC\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=MVS.OSMAINT.USERMODS.ZOS14(LSES514)\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES514) BYPASS(APPLYCHECK).\n  RESETRC .\n  RECEIVE S(LSES514) SOURCEID(SUNTRUST) .\n  SET BDY(AEST03A).\n  APPLY   REDO\n        S(LSES514).\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MELLON16": {"ttr": 4617, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x01\\x051_\\x01\\x051_\\tH&2&2\\x00\\x00\\xd4\\xc3\\xd6\\xd3\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2005-11-11T00:00:00", "modifydate": "2005-11-11T09:48:00", "lines": 9778, "newlines": 9778, "modlines": 0, "user": "MCOLLEY"}, "text": "./ ADD NAME=$$$DOC   0107-04313-05314-1452-00082-00030-00000-T0SM0\n\n  ALL OF OUR USERMODS ARE IN MVS.OSMAINT.USERMODS ON THE TECPLEX.\n\n  Each usermod(LSES5**) member has a corresponding member suffixed with\n  a \"J\".  The members with the \"J\" suffixes are sample jcl install\n  members.\n\n  FOR JES2 WE HAVE THE FOLLOWING usermods - These are ALL of our JES2\n   mods - most folks who are interested in only using the mellon mods\n  should refer to the next section, entitled -\n\n    \" THE FOLLOWING CAN BE CONSIDERED MELLON MOD REPLACEMENTS \"\n\nall of our JES2 usermods:\n\nMOD NAME   IMPLEMENTED     LMOD NAME   DESCRIPTION\nLSES500   ZOS6-09/01/2005  STJTABS  - CREATES OUR EXTENSIONS TO JQE AND JCT\nLSES502   ZOS6-09/01/2005  STSCX01A - JES2 EXIT1 - BANNER PAGE EXIT (NON 3800)\nLSES503   zOS6-09/01/2005  STSCX04A - parses /*ROUTE cards\nLSES504   ZOS6-09/01/2005  STSCX04B - PARSES /*BEFORE/*AFTER/*WITH AND /*CNTL\nLSES505   ZOS6-09/01/2005  STSCX05A - PROCESS $REPEXIT AND $ADDEXIT COMMANDS\nLSES506   zOS6-09/01/2005  STSCX05B - prevents purging jobs by range\nLSES507   ZOS6-09/01/2005  STSCX06A - MOVES VALID XEQ VALUES TO SCHENV VALUES\nLSES509   ZOS6-09/01/2005  STSCX15A - FORCES FCB LOAD UNLESS CHGING STD FORMS\nLSES510   ZOS6-09/01/2005  STSCX20A - END OF INPUT - MOVE JCT INFO TO JQE\nLSES511   zOS6-09/01/2005  STSCX36A - SAF process of RJE submitted jobs\nLSES512   ZOS6-09/01/2005  STSCX49A - IMPLEMENT BEFORE|AFTER|WITH|CNTL USAGE\nLSES513   ZOS6-09/01/2005  STSCX100 - FCB SETUP / TRANSLATION USER EXIT100\nLSES514   ZOS6-09/01/2005  HASPPRPU - INSERT USER EXIT100 INTO HASPPRPU CODE\n-------- ---------------   ---------------------------------------------\n\n ***********\n\nOF THESE MODS, THE FOLLOWING CAN BE CONSIDERED MELLON MOD REPLACEMENTS\n\n ***********\n\nMOD NAME   IMPLEMENTED     LMOD NAME   DESCRIPTION\nLSES500   ZOS6-09/01/2005  STJTABS  - CREATES OUR EXTENSIONS TO JQE AND JCT\nLSES503   zOS6-09/01/2005  STSCX04A - parses /*ROUTE cards\nLSES504   ZOS6-09/01/2005  STSCX04B - PARSES /*BEFORE/*AFTER/*WITH AND /*CNTL\nLSES507   ZOS6-09/01/2005  STSCX06A - MOVES VALID XEQ VALUES TO SCHENV VALUES\nLSES510   ZOS6-09/01/2005  STSCX20A - END OF INPUT - MOVE JCT INFO TO JQE\nLSES512   ZOS6-09/01/2005  STSCX49A - IMPLEMENT BEFORE|AFTER|WITH|CNTL USAGE\n\n ***********\n ***********\n\n   The installation instructions for the Mellon MODs only, can be found\n   in member DOCINS.\n\n   The overview documentation for the mellon mods is in member DOCOVW.\n\n   The user documentation for the mellon mods is in member DOCUSR.\n\n ***********\n ***********\n\n* * * PLEASE NOTE ! * * *\n\n*\n*    SPECIAL THANKS GO TO BOB BREAK OF ST. LOUIS FOR THE ORIGINAL CODE\n*  TO PARSE THE \"/*ROUTE XEQ RESNAME\" CARDS AND SET THE APPROPRIATE\n*  EXECUTION ENVIRONMENT.\n*\n*    SPECIAL THANKS TO JUDY RUNT OF WISCONSIN ELECTRIC FOR THE ORIGINAL\n*  CODE TO HANDLE THE \"/*CNTL BEFORE|AFTER|WITH,RESNAME\" AND \"/*CNTL\n*  RESNAME,EXC|SHR\" ROUTINES.  THE USE OF THE BLOCK EXTENSION REUSABLE\n*  TABLES, and BERT'S, TO EXTEND THE JCT AND JQE.\n*\n*  although some changes have been made to all of the code, their\n*  combined help was invaluable.\n*\n*\n\n  It is customary to transfer a PDS such as this in tso xmit format -\n  to create the xmit format dataset, use the following command -\n   \"xmit n32.t0sm0,outdsname('t0sm0.xmit.jes2mods'),dataset('t0sm0.tso.\n    jes2mods\")\n  where t0sm0.xmit.jes2mods is an fb 80X3120 dataset, and\n  where t0sm0.tso.jes2mods is the pds to be sent.\n  Be sure to transfer the file, type=binary when sent via e-mail.\n./ ADD NAME=$$NOTE1  0101-04314-04314-0944-00024-00023-00000-SBGOLOB\nThis note is from Frank Lawrence of Sun Trust, who is the current\nkeeper of the Mellon JES2 Mods, or a number of them, such as they\nare nowadays.\n\nSam,\n\nOur complete JES2 mods are attached in a TSO XMIT file.  That is\nprobably more than other folks want, but it will serve to remove\nany ambiguities if they wonder why something is the way it is.  I\nshould also note that these are pre-z/OS 1.4 newest \"activate\"\nfor things like extended job number range.  We have some OEM\nproducts that can't handle the extended job numbers in their\ncurrent release, so we have had to delay implementing those\nfeatures in z/OS 1.4.  We have tested them with these mods, but\nthat isn't the same as having them in production.\n\nLet me know if you have any questions.\n\n- Thanks,\n       Frank\n\n email:  Frank.Lawrence@SunTrust.com\n\n\n./ ADD NAME=$$NOTE2  0103-05314-05314-1437-00029-00024-00000-T0SM0\n\nSam,\n  Here are the latest files for the Mellon Mods.  They are currently\nrunning in our shop under z/OS 1.6, with no reported problems.\n\n\n  In addition to the files we have been sending, I am including four new\nmembers for documentation.  I realize the documentation of the past has\nleft a lot to be desired, and hope this will be of help to those who are\ninstalling or evaluating these mods for the first time.\n\n  The new members are:\n\n     DOCOVW - a plain text overview of the function and purpose.\n     DOCUSR - a plain text set of user documentation.\n     DOCINS - a plain text set of installation documentation.\n     $$NOTE2 - this member.\n\n  I have also renamed the old DOC member to DOCOLD, most of the old\ndocumentation is just no longer pertinent.\n\nLet me know if you have any questions.\n\n- Thanks,\n       Steve M.\n\n email:  Stephen.McColley@SunTrust.com\n         SGMcColley@AllTel.net\n\n./ ADD NAME=DOCINS   0103-05314-05314-1605-00200-00146-00000-T0SM0\n\n                 Installation Procedures\n\n\nThis member is used with the xmit format PDS member that you downloaded\nfrom the CBT tape.  The members within the pds have a basic set of\ndocumentation.  The heart of the PDS is however the usermods themselves\nand the sample SMP/e jobs used to install those usermods.  The usermods\nare in members with a format of LSES5##, each has a corresponding member\nwith a suffix of \"J\" for example, LSES5##J, which is the sample SMP/e\njob to install the associated usermods.\n\nThe data on the CBT tape contains all of our usermods - but - to only\ninstall the mellon mods, you just need a few of the usermods.  I have\nincluded a checklist of activities for the installation.\n\n\n\n  ****  FastPath Checklist for Mellon Mods Install ****\n\n  1-modify statements as required in member lses500, and the JCL\n    in member lses500j and submit - to install jct/jqe extensions.\n\n  2-modify statements as required in member lses503, and the JCL\n    in member lses503j and submit - to install first jes2 exit04.\n\n  3-modify statements as required in member lses504, and the JCL\n    in member lses504j and submit - to install second jes2 exit04.\n\n  4-modify statements as required in member lses507, and the JCL\n    in member lses507j and submit - to install jes2 exit06.\n\n  5-modify statements as required in member lses510, and the JCL\n    in member lses510j and submit - to install jes2 exit20.\n\n  6-modify statemenst as required in member lses512, and the JCL\n    in member lses512j and submit - to install jes2 exit49.\n\n  7-make loadmods available to the jes2 task - lla refresh, or steplib\n    changes- whatever is required in your environment\n\n  8-add LOADMOD and EXIT statements to the HASPPARM dataset.\n\n  9-restart JES2.\n\n 10-test - run some jobs containing Mellon control cards.\n    see the DOCUSR member for more information on how to use the mods.\n    I will try to get a standard IVP job set up for the next release.\n\n 11-Share the documentation with the users - DOCOVW is an overview, and\n    DOCUSR is a set of user documentation.\n\n 12-Celebrate - wasn't that easy!?\n\n 13-Send an e-mail to SGMcColley@ALLTEL.NET, let me know your e-mail\n    address and that you are using the mods, I can then contact you when\n    new versions are available and if any bugs are found, and or fixed.\n    If you wish, I can also send you a PC friendly version of the\n    documentation - suitable for sharing with others.\n\n  *** end of fastpath install instructions ***\n\n\n\n  Now for the details... I know you won't just run jobs blindly...\n\n\n\nThe Mellon Shared Spool Mods are provided in USERMOD format.  They will\nadd macro source members to SYSLIB(SHASMAC), and source members to\nSYSLIB(SHASSRC), and will add JCLIN for the source members that causes\nsource members to be linked (IEWBLINK) into SHASLINK, as referenced by\nthe //SYSLMOD DD statement in each set of JCLIN.  You may need to alter\nthe syslmod statement to fit your installations needs before receiving\nthe usermods.  The JCLIN also references standard SYSLIB DD datasets;\n\n    SYS1.MACLIB\n    SYS1.MODGEN\n    SYS1.SHASMAC\n    SYS1.SHASSRC\n    SYS1.AHASMAC\n    SYS1.AHASSRC\n    SYS1.AMACLIB\n    SYS1.AMODGEN\n\n  The names should be fine for most shops, if you have altered\nthe names to conform to local standards; the JCLIN may need\nto have similar changes made, before receiving the usermods.\n\nYou should use normal RECEIVE, and APPLY jobsteps to install the mods.\nSample JOBS have been included in the PDS package in members that end\nwith a\"J\".   As delivered the jobs will REJECT a previous attempt to\napply, then RECEIVE a usermod, and finally APPLY the usermod.  I use\nthis sequence for reinstalls.  As delivered, you will get a bad return\ncode from the first run because the initial REJECT step will fail,\nunless of course you have already applied the usermods.  The bad return\ncode from the REJECT can be ignored, or if you like simply resubmit the\nentire job and all steps should run to a good completion code.  The jobs\nmay need to be modified to meet your shops specific needs.\n\n  The member names are in the format - \"LSES5##\", these members are the\nusermods and should be applied in the same sorted order that they appear\nin the PDS directory.  Earlier usermods are required to successfully\napply later usermods.  They may all be applied at the same time, but I\nprefer to install them one at a time, so that in the event there are any\nproblems, I can correct them one member at a time before continuing.  As\nmentioned above the member names that are suffixed with a \"J\" are the\nactual jobs, i.e. LSES500 is a single usermods, usermods LSES500, and\nLSES500J is the member that contains sample JCL to install usermods\nLSES500.\n\nAfter SMP installation, update JES2 parms by adding the following\nloadmod and exit statements.\n\n LOADMOD(STJTABS)     /* DYNAMIC TABLE DEFINITIONS FOR JQE EXTENSION */\nLOADMOD(STSCX04A)    /* PARSES /*ROUTE XEQ RESNAME AND VALIDATES */\nLOADMOD(STSCX04B)    /* PARSES /*BEFORE, AFTER,WITH, AND CNTL */\nLOADMOD(STSCX06A)    /* TURNS /*ROUTE CNTL,XX INTO SCHENV= VALUES */\nLOADMOD(STSCX20A)    /* COPIES JCT INFO INTO THE JQE EXTENSION    */\nLOADMOD(STSCX49A)    /* IMPLEMENTS BEFORE, AFTER, WITH, CNTL STMTS */\nEXIT(004) ROUTINE=(EXIT04A,EXIT04B),STATUS=ENABLED\nEXIT(006) ROUTINE=(EXIT06A),STATUS=ENABLED\nEXIT(020) ROUTINE=(EXIT20A),STATUS=ENABLED\nEXIT(049) ROUTINE=(EXIT49A),STATUS=ENABLED\n\n\nMake the updated JES2 load modules available, that may require a refresh\nof LLA, or copying a maintenance pack to production.  Your own local\nprocedures will dictate what will need to be done.  The final step is to\nshutdown and restart JES2, this can be accomplished via 'rolling warm\nstarts\".  It is not necessary to shutdown all JES2 tasks in the MAS at\nthe same time, this is an important change from the original Mellon Mods\n* * We no longer make any changes to the JES2 checkpoint records all\ninformation that is saved for the Mellon Mods, and the info that is used\nto alter the job selection sequences is maintained in formally supported\ndynamic extensions to the jobs JCT and JQE.\n\n\n -  How the exits work, what each does -\n\nThe first LOADMOD statement is for module STJTABS, which is created with\nusermods LSES500, it creates extensions to the JQE and JCT, which are\nneeded to contain the Mellon control statement information, are\nreferenced at job selection time.  There is no specific exit associated\nwith this module.\n\nThe second LOADMOD statement is for module STSCX04A, used in exit04.  It\nparses the /*ROUTE XEQ RESNAME and performs basic validation.\n\nThe next LOADMOD statement is for module STSCX04B, also used in exit04.\nIt parses the /*BEFORE, AFTER, WITH and CNTL statements.\n\nThe next LOADMOD statement is for STSCX06A, used in exit06.  It turns\n/*ROUTE CNTL, XX into SCHENV= values.\n\nThe next LOADMOD statement is for STSCX20A, is used in exit20, and\ncopies JCT info into the JQE extension before the JCT is lost.\n\nThe next LOADMOD statement is for STSCX49A, and implements the before\nafter, with, and cntl statements by rejecting or allowing JES2's\nsuggested 'next' job, in the job selection exit49.\n\n  Of course, the entire source is provided for a closer look if you\ndesire to do so.\n\n\n  -  Support for these mods  -\n\n  As stated above, I will provide support on a time available basis, on\nmy own time.  Simply forward appropriate documentation of any problems\nyou encounter to me at SGMCCOLLEY@ALLTEL.NET and I will review them as\nquickly as I can.  I usually review my e-mail at least once every 2\ndays.  I can however make no guarantee of support, or promise to fix\nanything.  I will do what I can, and I want to make sure they work for\nyou.\n\n  - let me know how your using the mods, and share an e-mail address -\n\nIf you would drop me a line at the e-mail address above after installing\nthese MODS and let me know you are using them, I will be able to let you\nknow when new versions are available, and if any bugs are found I can\nalert you as soon as I know, and as soon as a fix is available.\n\n  - Other suggested modifications  -\n\n  If you have any suggestions for future enhancements, please let me\nknow by dropping me a line at SGMCCOLLEY@ALLTEL.NET and I will review\nany and all suggestions, and implement those that I can in future\nversions of the mods.  Again, this is not a guarantee of future changes,\njust a guarantee that I will review and implement those that I can.\n\n\n\n\n\n\n  I sincerly hope that these mods can help your shop, we use them here\nat our shop, and have had very good sucess with them.\n\n - end of text -\n./ ADD NAME=DOCOLD   0100-05314-05314-1439-01933-01933-00000-T0SM0\n\n This is the old - original documentation for mellon mods.\n BEWARE - most of it is now invalid.  It is included here\n for the sake of historical acuracy only.\n\n\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n$                                                          $\n$                                                          $\n$           MODS TAPE VERSION SP420/1    07 apr 93         $\n$                                                          $\n$                                                          $\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n$                                                          $\n$            ****  ****  *    *  ****   ****               $\n$           *    * *   * *    * *    * *    *              $\n$           *      *   * *    *      * *    *              $\n$            ****  ****  ******  ****  *    *              $\n$                * *          * *      *    *              $\n$           *    * *          * *      *    *              $\n$            ****  *          * ******  ****               $\n$                                                          $\n$                  * *****  ****   ****                    $\n$                  * *     *    * *    *                   $\n$                  * *     *           *                   $\n$                  * ***    ****   ****                    $\n$                  * *          * *                        $\n$              *   * *     *    * *                        $\n$               ***  *****  ****  *****                    $\n$                                                          $\n$          ****  *    * *****   ****  *****  *             $\n$         *    * *    * *    * *    * *    * *             $\n$         *      *    * *    * *      *    * *             $\n$          ****  ****** *****   ****  *****  *             $\n$              * *    * *  *        * *      *             $\n$         *    * *    * *  *   *    * *      *             $\n$          ****  *    * *   *   ****  *      ******        $\n$                                                          $\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n$                                                          $\n$                                                          $\n$ FUNCTIONAL CHANGES FOR RELEASE    SP4.2.0                $\n$                                                          $\n$ 1.) Add a new dependent job control card, /*WITH jobname.$\n$                                                          $\n$ 2.) Permit $,@,# in jobname field of /*BEFORE, /*AFTER,  $\n$     and /*WITH                                           $\n$                                                          $\n$ 3.) Delete $DRES command support.  Use IBM supplied      $\n$     commands, i.e. $D CONDEF,BUFNUM,BUFFREE, etc.        $\n$                                                          $\n$ 4.) Delete /*ROUTE XEQ CPUn support.  Use /*JOBPARM      $\n$     SYSAFF=(sid) card.                                   $\n$                                                          $\n$ 5.) Delete $KD/$KT command support.  Use IBM supplied    $\n$     commands $D/$T MASDEF.                               $\n$                                                          $\n$ 6.) Re-format various command responses to include       $\n$     MLWTO control lines to match JES2 command responses. $\n$                                                          $\n$ 7.) New command responses to $QA/$QD commands.           $\n$                                                          $\n$ 8.) Change $QD command to deny removal of a resource if  $\n$     there are executing job in the given system.  Add    $\n$     a third poistional $QD command operand, \"FORCE\", to  $\n$     permit the resource to be removed even if there are  $\n$     active jobs using the resource.                      $\n$                                                          $\n$ 9.) Enhance $DC command response to show count of        $\n$     conflicts.                                           $\n$                                                          $\n$ 10.) Enhance $DB command.                                $\n$                                                          $\n$ 11.) Change $QJ, $QT, $QS, and add $Q'jobname' to        $\n$      permit abstract resources to be added/delete from   $\n$      a JOB/TSU/STC or release a JOB from a dependent     $\n$      job control hold condition.  JECL cards and PR/PU   $\n$      stats are no longer detailed by this command.  Use  $\n$      IOF, SDSF, Q command for displaced function.        $\n$                                                          $\n$ 12.) Eliminate /*AFTER, /*BEFORE, /*CNTL order           $\n$      dependency.  This cards can now appear in any order $\n$      in the input stream.                                $\n$                                                          $\n$ 13.) Various $HASP9** series messages have been          $\n$      eliminated or changed.                              $\n$                                                          $\n$ 14.) SAF entity names have changed for the $Q commands.  $\n$                                                          $\n$ 15.) Add front end intercept to $QACT service routine    $\n$      in support of /*WITH JECL card.                     $\n$                                                          $\n$ 16.) Previously supplied Mellon Bank support for the     $\n$      $DN/$DQ commands has been renamed to $LN/$LQ        $\n$      and has been substantially enhanced.                $\n$                                                          $\n$ 17.) $HASP608 message text has been enhanced.            $\n$                                                          $\n$ 18.) Several Mellon Bank commands using the CONDEF       $\n$      DISPLEN when building command responses.            $\n$                                                          $\n$ 19.) Add resource-equate definition macro - $RESEQU      $\n$                                                          $\n$ 20.) Enhance $LF command job selection by absence or     $\n$      presence of job, operator, and error holds. Also    $\n$      screen for held or non-held output dispostions.     $\n$                                                          $\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n$                                                          $\n$                                                          $\n$ FUNCTIONAL CHANGES FOR RELEASE    SP3.1.3                $\n$                                                          $\n$ 1.) Interface to $SEAS routine to validate user commands $\n$     in EXIT 005 through SAF.                             $\n$                                                          $\n$ 2.) Correct addressability errors when using all 64      $\n$     resource names in the abstract resource table.       $\n$                                                          $\n$ 3.) Correct DJC hold problem by front ends place on      $\n$     $QMOD and $QPUT established by EXIT024.              $\n$                                                          $\n$                                                          $\n$ FUNCTIONAL CHANGES FOR RELEASE(S) SP2.2.0/SP3.1.1        $\n$                                                          $\n$ 1.) Performance enhancement for dependent job control    $\n$     job select logic through the use of user hold        $\n$     hold bits in the JQE.                                $\n$                                                          $\n$ 2.) $DN/DQ,HOLD commands enhanced to process jobs that   $\n$     are held due to dependent job control conflicts.     $\n$                                                          $\n$ 3.) Enhancements made in the HASP608 job display message $\n$     to show before/after/cntl specifications as well as  $\n$     dependent job control hold/ownership information.    $\n$                                                          $\n$ 4.) New exit routine, MBJOBEND, added to release jobs    $\n$     on dependent job control hold when an owning job     $\n$     ends.                                                $\n$                                                          $\n$                                                          $\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n************************************************************\n************************************************************\n**************                                **************\n************                                    ************\n**********                                        **********\n*                                                          *\n*                                                          *\n*             GENERAL DESCRIPTION OF MELLON BANK           *\n*                  SHARED SPOOL MODS                       *\n*                                                          *\n**********                                        **********\n************                                    ************\n**************                                **************\n************************************************************\n************************************************************\n\n\n************************************************************\n*                                                          *\n*                 D I S C L A I M E R                      *\n*                                                          *\n************************************************************\n\n    THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE\n BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY\n IS MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS\n ASSUMED FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE\n USE OF THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO\n EVALUATE THE USEFULLNESS OF THE MATERIAL.\n\n    WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE\n NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE\n IN THE FUTURE.\n\n************************************************************\n************************************************************\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n    THE FOLLOWING IS A BRIEF EXPLANATION OF THE MELLON BANK MODS\nMADE TO JES2.  IT IS INTENDED FOR THOSE WHO ARE UNFAMILIAR WITH\nPREVIOUS VERSIONS OF HASP OR JES2 SHARED SPOOL SUPPORT AND IS\nBEING PROVIDED IN LIEU OF THE FORMAL DOCUMENT ORIGINALLY\nDISTRIBUTED WITH THE HASP V4 MELLON MODIFICATIONS.  IF THE WRITE-UP\nLEAVES YOU WITH SOME UNANSWERED QUESTIONS, YOU MAY GIVE US A CALL.\n\n\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nRESOURCE ROUTING CONTROL CARDS\n\n     PROVIDES A FACILITY BY WHICH JOBS CAN BE ROUTED TO SPECIFIC\nCPUS DEPENDING ON THE AVAILABILITY OF A PARTICULAR RESOURCE NAME\nASSIGNED TO A CPU.  RESOURCE NAMES ARE USER DEFINED (SYSTEMS PROGRAMMER)\nAND SPECIFIED IN THE JES2 MACRO  $RESTABL.  ONCE DEFINED, THESE\nRESOURCE NAMES ATTACHED TO A CPU REMAIN IN EFFECT UNTIL THEY ARE\nDETACHED VIA THE $QD COMMAND, OR A COLD START IS DONE AND ALL\nRESOURCES ARE THEN UNASSIGNED.\n\n     RESOURCES SPECIFIED IN THE $RESTABL MACRO CAN DEFINE PHYSICAL\nI/O GEAR WHICH MAY BE ATTACHED TO ONLY ONE CPU AT A TIME, OR\nPOSSIBLY A SOFTWARE NAME WHICH MAY ONLY PERTAIN TO ONE PARTICULAR CPU.\n\n\nSPECIFICATION ... IN $RESTABL MACRO\n\n\nASSIGNMENT....... $QA,resource       attached a resource name from\n                                     the table to this system.\n\n\n                  $QD,resource       remove a resource name from this\n                                     system if no jobs executing using\n                                     specified resource.\n\n                  $QD,resource,FORCE remove resource name from this\n                                     system even if jobs executing are\n                                     using the resource name.\n\nUSE............... /*ROUTE XEQ resource     ...  FOLLOWING JOBCARD\n\n                   JOB WILL AUTOMATICALLY BE SCHEDULED TO THE CPU(S)\n                   BEARING THIS RESOURCE NAME IN ITS QSE\n\n\nEXAMPLE:    SYSTEM #       RESOURCES ATTACHED\n            ________       __________________\n\n               1           DUALD,IMS\n\n               2           3525\n\n               3           IMS,TSO,NOINQ\n\n\n   //BSPROUT JOB (,,7551,429),'TEST RESOURCE',MSGLEVEL=(1,1),CLASS=A\n   /*ROUTE XEQ IMS\n   //S1 EXEC PGM=IEFBR14\n\n\nTHIS JOB WILL BE SCHEDULED TO EITHER SYSTEM #1 OR SYSTEM #3\n\n\n     THE $DC COMMAND IS USED TO DISPLAY THOSE JOBS WHICH HAVE USED\nTHE /*ROUTE XEQ RESOURCE CONTROL CARD AND NO CPUS HAVE THAT RESOURCE\nNAME ATTACHED....  FOR EXAMPLE, USING THE ABOVE LIST, IF A JOB WERE\nSUBMITTED WITH A   /*ROUTE XEQ SCANNER   CONTROL CARD, THE JOB WOULD\nNEVER EXECUTE NO MATTER HOW MANY INITIATORS WERE AVAILABLE UNTIL\nA SYSTEM IN THE COMPLEX WOULD ISSUE A $QA,SCANNER.  THIS WOULD\nBE DETECTABLE BY ISSUING A $DC COMMAND WHICH WOULD DISPLAY THOSE\nJOBS WAITING FOR RESOURCE NAMES.\n\n\n     THE $DR COMMAND WILL LIST THE RESOURCE ATTACHED TO EACH CPU.\n\n EXAMPLE\n\n     $DR          NO OPERANDS  DEFAULTS THIS CPU\n\n     $DR,&SID     LIST SPECIFIC CPU RESOURCES.\n\n\n     OTHER /*ROUTE CONTROL CARD FORMATS.........\n\n      /*ROUTE XEQ HERE\n          JOB WILL BE SCHEDULED FOR EXECUTION ON THE CPU WHICH\n          READ THE JCL.  (CONTROLLING THE CARD READER)\n\n\n\n---------------------------------------------------------------\n\n\n           .............. /*CNTL CARDS ..............\n\n\n     THIS FEATURE PROVIDES THE ABILITY TO SINGLE-THREAD JOBS\nTHROUGH EXECUTION WHICH NEED A DEVICE OF WHICH THERE IS ONLY ONE\nAND MUST BE USED SERIALLY.  SOME EXAMPLES WOULD BE THE 3525,\nDUALD DENSITY DRIVE AND THE OCR SCANNER.\n\n\n     BY USING THE /*CNTL CARD, YOU CAN DEFINE A RESOURCE NAME THAT\nYOU NEED EXCLUSIVE CONTROL OF.  IF ANY OTHER JOBS COME INTO THE SYSTEM\nWITH THE SAME CONTROL NAME, THEY WILL NOT EXECUTE SIMULTANEOUSLY ON\nTHE SAME OR OTHER CPUS IN THE COMPLEX.  THIS PROVIDES BETTER CONTROL\nOVER THE RESOURCES WE HAVE THAT MUST BE USED SERIALLY.  THIS DOES NOT\nAFFECT JOBS RUNNING WITHOUT THE /*CNTL CARD OR RUNNING IN A SYSTEM\nWITHOUT SHARED SPOOL.\n\n\n   THE FORMAT FOR RESOURCE CONTROL IS :\n\n         /*CNTL name,EXC     OR\n         /*CNTL name,SHR    (DEFAULT SHR)\n\n\n     USERS MAY ALSO PROTECT DATASETS FROM BEING BEING UPDATED BY\nDIFFERENT JOBS ON THE SAME OR DIFFERENT CPUS BY USING THE /*CNTL CARD.\nEACH /*CNTL CARD MAY HAVE A 1 TO 8 CHARACTER CONTROL NAME AND AN EXC\nOR SHR SPECIFICATION.\n\n     JOBS WITH THE SAME CNTL NAME WILL NOT EXECUTE SIMUTANEOUSLY\nIF ONE OF THE JOBS HAS AN EXC CONTROL SPECIFICATION. JOBS WITH SHR\nMAY EXECUTE SIMUTANEOUSLY ON ANY CPU.\n\n\nEXAMPLES:\n\n    //JOB1 JOB\n    /*CNTL MASTER,EXC\n\n\n    //JOB2 JOB\n    /*CNTL MASTER,SHR\n\n\n  IN THE ABOVE EXAMPLE, WHICHEVER JOB BEGAN EXECUTION FIRST, WOULD\nLOCKOUT THE OTHER JOB FROM BEGINNING UNTIL IT HAS COMPLETED.\n\n\n\n    //JOB1 JOB\n    /*CNTL MASTER,SHR\n\n\n    //JOB2 JOB\n    /*CNTL MASTER\n\n\n    //JOB3 JOB\n    /*CNTL MASTER,SHR\n\n\n  IN THE ABOVE EXAMPLE, ALL 3 JOBS COULD RUN SIMULTANEOUSLY AS THEY\nALL SPECIFY THE SHR OPTION.\n\n\n________________________________________________________________\n\n\n/*BEFORE, /*AFTER, /*WITH dependent job control cards\n\n\nFORMAT :      /*BEFORE jobname\n              /*AFTER  jobname\n              /*WITH   jobname\n\n\n     Provides a means to schedule jobs before, after, or with another\n     JOB/TSU/STC in the execution queue.  These cards must follow the\n     JOB card.\n\n     IF THE BEFORE OR AFTER JOBNAME IS NOT IN THE JOBQ, THERE IS\n     NO ACTION TAKEN ON PREVENTING THE JOB FROM BEGINNING.\n\n     IF THE WITH jobname IS NOT IN THE JOBQ, THE JOB WILL\n     WAIT FOR THE JOB/TSU/STC TO BEGIN EXECUTION.\n\nEXAMPLE #1:\n\n\n    /*PRIORITY     13\n    //BSPTEST  JOB (,,7551,429),KALISH,MSGLEVEL=(1,1),CLASS=A\n    /*AFTER BSPFIRST\n    //S1 EXEC PGM=IEFBR14\n    /*\n    /*PRIORITY     2\n    //BSPFIRST JOB (,,7551,429),KALISH,MSGLEVEL=(1,1),CLASS=A\n    /*CNTL DUALD,EXC\n    //SA EXEC PGM=IEFBR14\n    /*\n\n\n  IN THE ABOVE EXAMPLE, JOB BSPTEST WOULD NOT EXECUTE UNTIL JOB\nBSPFIRST HAS FINISHED EXECUTION, EVEN THOUGH BSPTEST HAS A HIGHER\nPRIORITY.\n\n\n\n\nEXAMPLE #2:\n\n\n    /*PRIORITY     10\n    //cicst900 JOB (,,7551,429),KALISH,MSGLEVEL=(1,1),CLASS=A\n    /*WITH CICSTEST\n    //S1 EXEC PGM=IEFBR14\n    /*\n\n\n  In the above example, job CICST900 would not execute until JOB/TSU/STC\nCICSTEST began executiion.  At that time, CICST900 would be eligible\nfor selection by an initiator in the same system as CICSTEST.\n\n\n\n********************************************************************\n********************************************************************\n\n EXAMPLES OF ALLOWABLE -MULTI- CONTROL AND ROUTE CARDS COMBINATIONS\n\n    COMBINATION  1.                 ** ONE          AFTER  CARD  **\n                                    ** ONE          BEFORE CARD  **\n                                    ** NONE TO FOUR CNTL   CARDS **\n                /*AFTER   JOBNAME\n                /*BEFORE  JOBNAME\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n\n    COMBINATION  2.                 ** ONE           AFTER CARD  **\n                                    ** NONE TO FIVE  CNTL  CARDS **\n                /*AFTER   JOBNAME\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n\n    COMBINATION  3.                 ** ONE           BEFORE CARD **\n                                    ** NONE TO FIVE  CNTL  CARDS **\n                /*BEFORE  JOBNAME\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n\n    COMBINATION  4.                 ** ONE TO SIX  CNTL    CARD  **\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n                /*CNTL    NAME,DISP\n\n    COMBINATION  5.                 ** ONE           AFTER  CARD  **\n                                    ** ONE           BEFORE CARD  **\n                                    ** ONE           WITH   CARD  **\n                                    ** NONE TO THREE CNTL   CARDS **\n                /*CNTL    name,disp\n                /*CNTL    name,disp\n                /*CNTL    name,disp\n                /*AFTER   jobname\n                /*BEFORE  jobname\n                /*WITH    jobname\n\n*****************************************************************\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n$        H    H      J EEEEEE 4    4 4    4  2222   0000        $\n$        H    H      J E      4    4 4    4 2    2 0    0       $\n$        H    H      J E      4    4 4    4      2 0    0       $\n$        HHHHHH      J EEEE   444444 444444  2222  0    0       $\n$        H    H      J E           4      4 2      0    0       $\n$        H    H J    J E           4      4 2      0    0       $\n$        H    H  JJJJ  EEEEEE      4      4 222222  0000        $\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n*****************************************************************\n*\n*\n*  MELLON BANK SHARED SPOOL FOR SP 4.2.0 JES2 FMID(HJE4420)\n*\n*  THESE CHANGES WILL REQUIRE A COLD-START SINCE THEY MODIFY JES2\n*  CONTROL BLOCKS (IE. QSE, JQE)...\n*\n*  SINCE SP 1.3.3 JES2 THE VAST MAJORITY OF THE MELLON MOD CODE\n*  HAS BEEN REMOVED FROM INSTREAM HASPSRC UPDATES AND HAS BEEN\n*  PLACED INTO JES2 EXIT CODE THAT IS TAKEN BY THE JES2 MAIN\n*  TASK.\n*\n*\n*     ADDITIONALLY, DEPENDENT JOB CONTROL HOLD/OWNERSHIP IS DISPLAYED.\n*\n*  $  THE FOLLOWING MODULES, MACROS, AND CONTROL BLOCK ARE CHANGED.\n*\n*      $JQE, $QSE, $RDRWORK, $HCT, HASPCOMM\n*\n*\n*  $    THE FOLLOWING STATEMENTS NEED TO BE ADDED TO THE JES2 PARAMETER\n*       LIBRARY TO ESTABLISH THE NECESSARY JES2 EXIT ENVIRONMENT AT\n*       INITIALIZATION TIME:\n*\n*       LOAD    MBSHRSPL                     USER LINKLIB LOAD MODULE\n*       EXIT002 ROUTINE=(MBJOBCRD)           JOB CARD SCAN\n*       EXIT004 ROUTINE=(MBJECL)             JCL/JECL CARD SCAN\n*       EXIT005 ROUTINE=(MBCMDS)             COMMAND PROCESSOR\n*       EXIT007 ROUTINE=(MBJOBEND)           RELEASE JOBS ON DJC HOLD\n*       EXIT014 ROUTINE=(MBJQEGET)           $QGET\n*       EXIT020 ROUTINE=(MBRDREND)           END OF INPUT\n*       EXIT024 ROUTINE=(MBQINIT)            POST INITIALIZATION\n*       EXIT245 ROUTINE=(MBJOBMSG)           COFJMSG SUPPORT\n*\n*\n*\n*  $    SEVERAL ADDITIONAL MELLON WRITTEN COMMANDS HAVE BEEN INCLUDED\n*       FOR YOUR USE:\n*\n*       $DB WILL DISPLAY A SUMMARY OF THE WORKED BACKLOGGED ON THE\n*       M.A.S. COMPLEX.\n*\n*       $DP WILL DISPLAY A ONE LINE SUMMARY OF PRINTER/PUNCH STATUS.\n*\n*       $LF IS SIMILAR TO THE $DF COMMAND; HOWEVER, IT HAS THE ABILITY\n*       TO LIST JOB OUTPUT BY JOBNAME.\n*\n*\n*\n*\n*  $    FILE 2 ON THIS TAPE CONTAINS IEBUPDTE CARDS THAT UPDATE AND ADD\n*       CODE TO YOUR HASPSRC SOURCE LIBRARY (IT IS ADVISABLE TO CREATE\n*       A BACKUP COPY OF YOUR HASPSRC PDS AND APPLY THE MODS TO THAT\n*       COPY). ASSEMBLE AND LINK YOUR JES2 SOURCE.  MBSHRSPL SHOULD\n*       BE ASSEBMBLED AND LINKED AS SEPARATE APF AUTHORIZED LOAD\n*       MODULE AND MUST BE LOCATED IN AN APF AUTHORIZED LIBRARY\n*       AVAILABLE TO JES2 AT INITIALIZATION TIME.\n*\n*       NOTE:  DO NOT LINK THIS EXIT AS REENTRANT OR YOU WILL\n*              EXPERIENCE ABEND S0C4 PROBLEMS IN THE EXIT POINTS.\n*\n*\n*  $    TAPE FORMAT IS:\n*\n*       THIS DOCUMENT\n*                         RECFM=FB\n*                         LRECL=80\n*                         BLKSIZE=24000\n*                         LABEL=(1,NL)\n*                         VOL=SER=JESMOD\n*                         DSN=B1SP.FILE1\n*\n*       IEBUPDTE INPUT TO ADD AND UPDATE MEMBERS IN HASPSRC PDS\n*                         RECFM=FB\n*                         LRECL=80\n*                         BLKSIZE=24000\n*                         LABEL=(2,NL)\n*                         VOL=SER=JESMOD\n*                         DSN=B1SP.FILE2\n*\n*  $    PLEASE DIRECT ANY INQUIRIES, PROBLEMS, SUGGESTIONS, ETC. TO:\n*\n*     ROSS CUMMINGS    MELLON BANK N.A.\n*                      SYSTEMS CONTROL PROGRAMMING SECTION\n*                      MELLON SQUARE, AIM 153-0420\n*                      PITTSBURGH,  PA. 15230\n*              PHONE  (412) 234-0519\n*\n*     JOHN ROSSMILLER  MELLON BANK N.A.\n*              PHONE  (412) 236-1058\n*\n*     DON GREB         MELLON BANK N.A.\n*              PHONE  (412) 234-5985\n*\n*\n*       PLEASE HAVE CURRENT ASSEMBLED SOURCE LISTINGS AND DUMPS\n*       ON HAND BEFORE CALLING WITH ANY PROBLEMS.\n*\n*****************************************************************\n*****************************************************************\n  GGGG   OOOO   OOOO  DDDD          L      U    U  CCCC  K    K\n G    G O    O O    O D   D         L      U    U C    C K   K\n G      O    O O    O D    D        L      U    U C      K  K\n G  GGG O    O O    O D    D        L      U    U C      KKK\n G    G O    O O    O D    D        L      U    U C      K  K\n G    G O    O O    O D    D        L      U    U C    C K  K\n  GGGG   OOOO   OOOO  DDDDD         LLLLLL  UUUU   CCCC  K   K\n*                                                               *\n1\n\n       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n       @@                                                           @@\n       @@                                                           @@\n       @@  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!  @@\n       @@  |                                                     |  @@\n       @@  |                                                     |  @@\n       @@  |                                                     |  @@\n       @@  |                                                     |  @@\n       @@  |   M E L L O N   B A N K   E N H A N C E M E N T S   |  @@\n       @@  |                                                     |  @@\n       @@  |                     T O   T H E                     |  @@\n       @@  |                                                     |  @@\n       @@  |             J E S 2   S U B S Y S T E M             |  @@\n       @@  |                                                     |  @@\n       @@  |                        F O R                        |  @@\n       @@  |                                                     |  @@\n       @@  |     SP VERSION 4 RELEASE 2 MODIFICATION LEVEL 0     |  @@\n       @@  |                                                     |  @@\n       @@  |                                                     |  @@\n       @@  |                                                     |  @@\n       @@  |                                                     |  @@\n       @@  %~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2  @@\n       @@                                                           @@\n       @@                                                           @@\n       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n1\n\n\n\n\n            @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n            @                                           @\n            @       SECTION 1 - OPERATOR COMMANDS       @\n            @                                           @\n            @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n\n\n\n\n\n\n\n                  1.1  Mellon Bank Written Commands\n                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n1\n\n\n\n\n\n\n    $DB (Display Backlog)\n\n\n        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n        |  |                                                      |\n        |  | #          !                                         |\n        |  | |    a     |                                         |\n        |  | |    cc    |                                         |\n        |$D|B|,L= cca   |                                         |\n        |  | |    name  |                                         |\n        |  | |    name-a|                                         |\n        |  | %          \u00a2                                         |\n        |  |                                                      |\n        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n B\n     This command displays in matrix form a summary of activity in\n     the MAS spool complex.\n\n\n L=a or cc or cca or name or name-a\n    The area (a), console identifier (cc), area and console\n    identifier (cca), symbolic console name (name), or symbolic\n    console name and output area ID (name-a) of the active MCS console\n    at which the requested information is to be displayed.\n1\n\n\n\n\n\n\n    $DC (Display Conflicts)\n\n\n        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n        |  |                                                      |\n        |  | #          !                                         |\n        |  | |    a     |                                         |\n        |  | |    cc    |                                         |\n        |$D|C|,L= cca   |                                         |\n        |  | |    name  |                                         |\n        |  | |    name-a|                                         |\n        |  | %          \u00a2                                         |\n        |  |                                                      |\n        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n C\n     This command displays by name jobs awaiting execution whose\n     abstract resource routings cannot be fulfilled by any member\n     in the MAS spool complex.\n\n\n L=a or cc or cca or name or name-a\n    The area (a), console identifier (cc), area and console\n    identifier (cca), symbolic console name (name), or symbolic\n    console name and output area ID (name-a) of the active MCS console\n    at which the requested information is to be displayed.\n1\n\n\n\n\n\n\n    $DP (Display Printer or Punch Device Status)\n\n\n        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n        |  |                                                      |\n        |  |         #          !                                 |\n        |  |         |    a     |                                 |\n        |  |   #    !|    cc    |                                 |\n        |$D|P  |,PUN||,L= cca   |                                 |\n        |  |   %    \u00a2|    name  |                                 |\n        |  |         |    name-a|                                 |\n        |  |         %          \u00a2                                 |\n        |  |                                                      |\n        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n P\n     This command displays a one line status for each local printer\n     on the system from which the command is issued.\n\n\n PUN\n     If this operand is present a one line status is generated for each\n     local punch on the system from which the command is issued.\n\n\n L=a or cc or cca or name or name-a\n    The area (a), console identifier (cc), area and console\n    identifier (cca), symbolic console name (name), or symbolic\n    console name and output area ID (name-a) of the active MCS console\n    at which the requested information is to be displayed.\n1\n\n\n\n\n\n\n    $DR  (Display Abstract Resources Attached To A MAS Member)\n\n\n        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n        |  |                                                      |\n        |  |        #          !                                  |\n        |  |        |    a     |                                  |\n        |  |  #    !|    cc    |                                  |\n        |$D|R |,sid||,L= cca   |                                  |\n        |  |  |,ALL||    name  |                                  |\n        |  |  %    \u00a2|    name-a|                                  |\n        |  |        %          \u00a2                                  |\n        |  |                                                      |\n        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n R\n     Display all abstract resource name attached to a given member\n     or all member of the MAS spool complex.\n\n\n sid\n     The display is requested for a specific MAS member.  If this\n     operand is omitted, the display is returned for the member on\n     which the command is entered.\n\n\n ALL\n     The display is requested for a members of the MAS spool complex.\n\n\n L=a or cc or cca or name or name-a\n    The area (a), console identifier (cc), area and console\n    identifier (cca), symbolic console name (name), or symbolic\n    console name and output area ID (name-a) of the active MCS console\n    at which the requested information is to be displayed.\n1\n\n\n\n\n\n\n    $LF  (List Forms)\n\n\n        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n        |  |                                                       |\n        |  |                                                       |\n        |  | #           !#           !#                !          |\n        |$L|F|,F=ffffffff||,W=wwwwwwww||,PRMODE=pppppppp|          |\n        |  | %           \u00a2%           \u00a2%                \u00a2          |\n        |  |                   #         !                         |\n        |  |                   |     #  !|#          !             |\n        |  | #       !#       !|   Sn|-m|||     #   !|#      !     |\n        |  | |,C=cccc||,T=tttt||,J=Jn|-m|||,R=rn|-rm|||,B=Y/N|     |\n        |  | %       \u00a2%       \u00a2|   Tn|-m|||     %   \u00a2|%      \u00a2     |\n        |  |                   |     %  \u00a2|%          \u00a2             |\n        |  |                   %         \u00a2                         |\n        |  |                                                       |\n        |  | #            !#             !                         |\n        |  | |       #   !||        #   !|#      !#      !         |\n        |  | |,LIM=ln|-lm|||,PLIM=pn|-pm|||,D=H/A||,S=Y/N|         |\n        |  | |       %   \u00a2||        %   \u00a2|%      \u00a2%      \u00a2         |\n        |  | %            \u00a2%             \u00a2                         |\n        |  |                   #    a     !                        |\n        |  | #         !#     !|    cc    |                        |\n        |  | |,Q=q1..q8||,JOBS||,L= cca   |                        |\n        |  | %         \u00a2%     \u00a2|    name  |                        |\n        |  |                   %    name-a\u00a2                        |\n        |  |                                                       |\n        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n F\n     Selectively display the JOT (job output table) for elements\n     awaiting hardcopy processing.  As many operands as required may be\n     present so as to create a command response as selective as is\n     desired.  NOTE: No elements having an external writer name are\n     included in the display unless explicitly requested.\n\n\n F=\n     The one to eight character form name is to be used as a search\n     argument.\n\n\n W=\n     The one to eight character external writer name is to be used\n     as a search argument.  NOTE:  unless this argument is present, no\n     job output elements having the attribute of any external writer\n     name will be included in the command display.\n\n\n PRMODE=\n     The one to eight character processing mode name is to be used as\n     a search argumant.\n\n\n L=a or cc or cca or name or name-a\n    The area (a), console identifier (cc), area and console\n    identifier (cca), symbolic console name (name), or symbolic\n    console name and output area ID (name-a) of the active MCS console\n    at which the requested information is to be displayed.\n\n\n C=\n     The one to four character FCB name is to be used as a search\n     argument.\n\n\n T=\n     The one to four character UCS name is to be used as a search\n     argument.\n\n\n1\n\n\n\n\n\n\n\n\n\n J=\n     The display is to be limited to a job or range of jobs as\n     designated by the keyword value.\n\n\n R=\n     The display is to be limited to a route code or a range of route\n     codes as designated by the keyword value.  If this operand is\n     omitted the display is limited to the route code calculated from\n     the command source.\n\n\n B=\n     The display is to be limited to job output elements that need\n     burst (Y) or that do not require bursting (N).\n\n\n S=\n     Y - the display is to limited to output elements with selectable\n         output dispositions - WRITE/KEEP\n     N - the display is to limited to output elements with non-selectable\n         output dispositions - HOLD/LEAVE\n\n     Default: Y\n\n D=\n     H - the display is limited to jobs and output elements with an\n         operator or system hold.\n     A - the display will select all jobs\n\n     Default: only jobs or output elements with no operator or system\n              hold will be displayed.\n\n LIM=\n     The display is to be limited to job output elements having the\n     specified number of lines of output.\n\n\n PLIM=\n     The display is to be limited to job output elements having the\n     specified number of pages of output.\n\n\n Q=\n     The display is to be limited to job output elements having the\n     specified sysout class(s).  Up to eight sysout classes may be\n     present in the list.\n\n\n JOBS\n     The display is to be categorized by jobname and number.  If this\n     operand is present, it must be used in conjunction with another\n     selection operand.\n\n\n1\n\n\n\n\n\n\n    $LN (List Job Queue Information By Name)\n\n\n        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n        |  |                                                      |\n        |  |                               #          !           |\n        |  |                               |   DJCOWN |           |\n        |  |                               |   DJCHOLD|           |\n        |  | #    !      #                !|   XEQ    |           |\n        |  | |,ALL|#    !|        #      !||   CNV    |           |\n        |$L|N|,ANY||,IND||,R=dest1|-dest2|||,Q=STC    |           |\n        |  | |,sid|%    \u00a2|        %      \u00a2||   TSU    |           |\n        |  | |,IND|      %                \u00a2|   HOLD   |           |\n        |  | %    \u00a2                        |   ACTIVE |           |\n        |  |                               |   READY  |           |\n        |  | #                  !          %          \u00a2           |\n        |  | |         #       !|#              !#             !  |\n        |  | |,C=class1|-class2|||,AFTER=jobname||,WITH=jobname|  |\n        |  | |         %       \u00a2|%              \u00a2%             \u00a2  |\n        |  | %                  \u00a2                                 |\n        |  |                                                      |\n        |  | #               !#          !#             !         |\n        |  | |,BEFORE=jobname||,CNTL=name||,RES=resource|         |\n        |  | %               \u00a2%          \u00a2%             \u00a2         |\n        |  |                                                      |\n        |  |            #        !                                |\n        |  |            |  a     |                                |\n        |  | #         !|  cc    |                                |\n        |  | |,V=volser||L=cca   |                                |\n        |  | %         \u00a2|  name  |                                |\n        |  |            |  name-a|                                |\n        |  |            %        \u00a2                                |\n        |  |                                                      |\n        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n N\n     JES2 is to list job information by name.\n\n\n sid\n     JES2 is to display the job information for all jobs whose system\n     affinities include the specified 4-character system identifier\n\n\n ANY\n     JES2 is to display the above job information for all jobs with\n     the system affinity of ANY\n\n\n ALL\n     JES2 is to display the above job information for all jobs\n     regardless of system infinity.\n\n\n IND\n     JES2 is to display the above job information for all jobs\n     whose system affinity is for systems operating in independent mode.\n\n\n R=dest1-dest2\n     JES2 is to display the job information for all jobs having\n     a default print/punch routing or range of routing (low to high)\n     of the specified destination(s).\n\n\n1\n\n\n\n\n\n Q=DJCOWN\n    Job information is to be displayed for jobs that are holding out\n    other jobs due to dependent job control conflicts.\n\n\n Q=DJCHOLD\n    Job information is to be displayed for jobs awaiting execution or\n    conversion in dependent job control hold status.\n\n\n Q=XEQ\n    Job information is to be displayed for jobs waiting for execution\n    and/or conversion.\n\n\n Q=CNV\n    The job information is to be displayed for jobs awaiting conversion.\n\n\n Q=STC\n    STC specifies that the display is for system tasks being prepared\n    for execution or awaiting conversion.\n\n\n Q=TSU\n    TSU specifies that the display is for time-sharing user waiting for\n    execution or awaiting conversion.\n\n\n Q=HOLD\n    Job information is to be displayed for jobs awaiting execution or\n    conversion in hold status or dependent job control hold status.\n\n\n Q=ACTIVE\n    Job information is to be displayed for jobs that are executing.\n\n\n Q=READY\n    Job information is to be displayed for jobs awaiting execution that\n    are not in hold status.\n\n\n1\n\n\n\n\n\n CLASS=class1-class2\n    Job information is to be displayed for jobs that have specified the\n    class or jobs in the class range (low to high).\n\n\n AFTER=jobname\n    Job information is to be displayed for jobs that have requested to\n    execute after the specified jobname.\n\n\n BEFORE=jobname\n    Job information is to be displayed for jobs that have requested to\n    execute before the specified jobname.\n\n\n WITH=jobname\n    Job information is to be displayed for jobs that have requested to\n    execute in the same system with the specified jobname.\n\n\n RES=resource\n    Job information is to be displayed for jobs that have requested to\n    execute in a system with the specified JES2 abstract resource\n    attached.\n\n\n V=volser\n    Job information is to be displayed for jobs that have spool space\n    on the specified spool volume.\n\n\n1\n\n\n\n L=a or cc or cca or name or name-a\n    The area (a), console identifier (cc), area and console\n    identifier (cca), symbolic console name (name), or symbolic\n    console name and output area ID (name-a) of the active MCS console\n    at which the requested information is to be displayed.\n\n\n\n\n NOTE:  The first two operands of the $L N command are positional\n        in nature; if entered, they must be in the indicated order.\n1\n\n\n\n\n\n\n    $LQ (List Job Queue Information By Count)\n\n\n        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n        |  |                                                      |\n        |  |                               #          !           |\n        |  |                               |   DJCOWN |           |\n        |  |                               |   DJCHOLD|           |\n        |  | #    !      #                !|   XEQ    |           |\n        |  | |,ALL|#    !|        #      !||   CNV    |           |\n        |$L|Q|,ANY||,IND||,R=dest1|-dest2|||,Q=STC    |           |\n        |  | |,sid|%    \u00a2|        %      \u00a2||   TSU    |           |\n        |  | |,IND|      %                \u00a2|   HOLD   |           |\n        |  | %    \u00a2                        |   ACTIVE |           |\n        |  |                               |   READY  |           |\n        |  | #                  !          %          \u00a2           |\n        |  | |         #       !|#              !#             !  |\n        |  | |,C=class1|-class2|||,AFTER=jobname||,WITH=jobname|  |\n        |  | |         %       \u00a2|%              \u00a2%             \u00a2  |\n        |  | %                  \u00a2                                 |\n        |  |                                                      |\n        |  | #               !#          !#             !         |\n        |  | |,BEFORE=jobname||,CNTL=name||,RES=resource|         |\n        |  | %               \u00a2%          \u00a2%             \u00a2         |\n        |  |                                                      |\n        |  |            #        !                                |\n        |  |            |  a     |                                |\n        |  | #         !|  cc    |                                |\n        |  | |,V=volser||L=cca   |                                |\n        |  | %         \u00a2|  name  |                                |\n        |  |            |  name-a|                                |\n        |  |            %        \u00a2                                |\n        |  |                                                      |\n        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n Q\n     JES2 is to display the number of jobs on the specified queue.\n\n\n sid\n     JES2 is to display the job information for all jobs whose system\n     affinities include the specified 4-character system identifier\n\n\n ANY\n     JES2 is to display the above job information for all jobs with\n     the system affinity of ANY\n\n\n ALL\n     JES2 is to display the above job information for all jobs\n     regardless of system infinity.\n\n\n IND\n     JES2 is to display the above job information for all jobs\n     whose system affinity is for systems operating in independent mode.\n\n\n R=dest1-dest2\n     JES2 is to display the job information for all jobs having\n     a default print/punch routing or range of routing (low to high)\n     of the specified destination(s).\n\n\n1\n\n\n\n\n\n Q=DJCOWN\n    Job information is to be displayed for jobs that are holding out\n    other jobs due to dependent job control conflicts.\n\n\n Q=DJCHOLD\n    Job information is to be displayed for jobs awaiting execution or\n    conversion in dependent job control hold status.\n\n\n Q=XEQ\n    Job information is to be displayed for jobs waiting for execution\n    and/or conversion.\n\n\n Q=CNV\n    The job information is to be displayed for jobs awaiting conversion.\n\n\n Q=STC\n    STC specifies that the display is for system tasks being prepared\n    for execution or awaiting conversion.\n\n\n Q=TSU\n    TSU specifies that the display is for time-sharing user waiting for\n    execution or awaiting conversion.\n\n\n Q=HOLD\n    Job information is to be displayed for jobs awaiting execution or\n    conversion in hold status or dependent job control hold status.\n\n\n Q=ACTIVE\n    Job information is to be displayed for jobs that are executing.\n\n\n Q=READY\n    Job information is to be displayed for jobs awaiting execution that\n    are not in hold status.\n\n\n1\n\n\n\n\n\n CLASS=class1-class2\n    Job information is to be displayed for jobs that have specified the\n    class or jobs in the class range (low to high).\n\n\n AFTER=jobname\n    Job information is to be displayed for jobs that have requested to\n    execute after the specified jobname.\n\n\n BEFORE=jobname\n    Job information is to be displayed for jobs that have requested to\n    execute before the specified jobname.\n\n\n WITH=jobname\n    Job information is to be displayed for jobs that have requested to\n    execute in the same system with the specified jobname.\n\n\n RES=resource\n    Job information is to be displayed for jobs that have requested to\n    execute in a system with the specified JES2 abstract resource\n    attached.\n\n\n V=volser\n    Job information is to be displayed for jobs that have spool space\n    on the specified spool volume.\n\n\n1\n\n\n\n L=a or cc or cca or name or name-a\n    The area (a), console identifier (cc), area and console\n    identifier (cca), symbolic console name (name), or symbolic\n    console name and output area ID (name-a) of the active MCS console\n    at which the requested information is to be displayed.\n\n\n\n\n NOTE:  The first two operands of the $L N command are positional\n        in nature; if entered, they must be in the indicated order.\n1\n\n\n\n\n\n\n    $QA  (Attach An Abstract Resource To A MAS Member)\n\n\n        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n        |  |                                                      |\n        |  |                 #          !                         |\n        |  |                 |    a     |                         |\n        |  |           #    !|    cc    |                         |\n        |$Q|A ,resource|,sid||,L= cca   |                         |\n        |  |           %    \u00a2|    name  |                         |\n        |  |                 |    name-a|                         |\n        |  |                 %          \u00a2                         |\n        |  |                                                      |\n        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n A\n     Attach an abstract resource to a given member member of the\n     MAS spool complex.  Once attached the resource remains until it\n     removed via the $Q D command or a JES2 COLD-START.\n\n\n resource\n     This operand is any valid abstract resource name defined by\n     the JES2 systems programmer.\n\n\n sid\n     The resource is to be attached to the specified MAS spool\n     complex member.  If this operand is omitted, the resource is\n     attached to the MAS member on which the command is entered.\n\n\n L=a or cc or cca or name or name-a\n    The area (a), console identifier (cc), area and console\n    identifier (cca), symbolic console name (name), or symbolic\n    console name and output area ID (name-a) of the active MCS console\n    at which the requested information is to be displayed.\n1\n\n\n\n\n\n\n    $QD  (Delete An Abstract Resource From A MAS Member)\n\n\n        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n        |  |                                                      |\n        |  |                         #          !                 |\n        |  |                         |    a     |                 |\n        |  |           #    !#      !|    cc    |                 |\n        |$Q|D ,resource|,sid||,FORCE||,L= cca   |                 |\n        |  |           %    \u00a2%      \u00a2|    name  |                 |\n        |  |                         |    name-a|                 |\n        |  |                         %          \u00a2                 |\n        |  |                                                      |\n        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n D\n     Delete an abstract resource from a given member member of the\n     MAS spool complex.\n\n\n resource\n     This operand is any valid abstract resource name defined by\n     the JES2 systems programmer.\n\n\n sid\n     The resource is to be deleted from the specified MAS spool\n     complex member.  If this operand is omitted, the resource is\n     deleted from the MAS member on which the command is entered.\n\n\n FORCE\n     The resource is to be deleted from the specified MAS spool\n     complex member even if there are jobs executin in that member\n     that have are using the specified resource name.\n\n\n L=a or cc or cca or name or name-a\n    The area (a), console identifier (cc), area and console\n    identifier (cca), symbolic console name (name), or symbolic\n    console name and output area ID (name-a) of the active MCS console\n    at which the requested information is to be displayed.\n1\n\n\n\n\n\n\n    $Q'\n    $QJ\n    $QT  (Alter Job Abstract Resource And Dependent Job Control Hold)\n    $QS\n\n\n        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n        |  |                                                      |\n        |  |'jobname'                                             |\n        |  |J  #  !   #        !#             !#                ! |\n        |$Q|T m|-n|   |,RELEASE||,ADD=resource||,DELETE=resource| |\n        |  |S  %  \u00a2   %        \u00a2%             \u00a2%                \u00a2 |\n        |  |                                                      |\n        |  |                                                      |\n        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n Jn-m / Tn-m / Sn-m / 'jobname'\n    The JES2 abstract resource routing info and/or the dependent job\n    control hold is to be altered and displayed for the selected\n    job or range of jobs.  The jobs must be in the conversion or\n    execution queue.  At least one of the following operands is required\n    to be present in the command text.\n\n\n RELEASE\n    The job or range of jobs is/are to be released from dependent\n    job control hold conditions.\n\n\n ADD=resource\n    The named resource is to be added to the job or range of jobs.\n\n\n DELETE=resource\n    The named resource is to be removed from the job or range of jobs.\n\n\n L=a or cc or cca or name or name-a\n    The area (a), console identifier (cc), area and console\n    identifier (cca), symbolic console name (name), or symbolic\n    console name and output area ID (name-a) of the active MCS console\n    at which the requested information is to be displayed.\n1\n\n\n\n\n              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n              @                                         @\n              @       SECTION 2 - JECL STATEMENTS       @\n              @                                         @\n              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n\n\n\n\n\n\n\n              2.0  Mellon Bank Supported JECL Statements\n              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n1\n\n\n\n\n\n\n The /*AFTER statement\n\n\n\n\n   #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n   |                                                                 |\n   |  /*AFTER jobname                                                |\n   |                                                                 |\n   %~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n  Use the /*AFTER statement to insure that a given job executes after\n  another job that is currently in the spool complex awaiting execution\n  or executing.\n\n  The value, jobname, is any one to eight byte valid JES2 job name.\n\n  Only one /*AFTER card is supported per job.  If more that one\n  /*AFTER card is present in a job stream, only the last one has\n  any meaning.\n\n  The use of a /*AFTER card reduces by one the maximum allowable number\n  of /*CNTL cards available for use by a given job.\n1\n\n\n\n\n\n\n The /*BEFORE statement\n\n\n\n\n   #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n   |                                                                 |\n   |  /*BEFORE jobname                                               |\n   |                                                                 |\n   %~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n  Use the /*BEFORE statement to insure that a given job executes before\n  another job that is currently in the spool complex awaiting execution.\n\n  The value, jobname, is any one to eight byte valid JES2 job name.\n\n  Only one /*BEFORE card is supported per job.  If more that one\n  /*BEFORE card is present in a job stream, only the last one has\n  any meaning.\n\n  The use of a /*BEFORE card reduces by one the maximum allowable\n  number of /*CNTL cards available for use by a given job.\n1\n\n\n\n\n\n\n The /*WITH statement\n\n\n\n\n   #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n   |                                                                 |\n   |  /*WITH jobname                                                 |\n   |                                                                 |\n   %~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n  Use the /*WITH statement to insure that a given job executes in the\n  same complex member as the specified jobname.  If the named job is\n  not currently active when the job using the /*WITH card enters\n  the job queue, the job with the /*WITH card will wait for the named\n  job to become active.\n\n  The value, jobname, is any one to eight byte valid JES2 job name.\n\n  Only one /*WITH card is supported per job.  If more that one\n  /*WITH card is present in a job stream, only the last one has\n  any meaning.\n\n  The use of a /*WITH card reduces by one the maximum allowable\n  number of /*CNTL cards available for use by a given job.\n1\n\n\n\n\n\n\n The /*CNTL statement\n\n\n\n\n   #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n   |                                                                 |\n   |                #    !                                           |\n   |  /*CNTL anyname|,EXC|                                           |\n   |                |,SHR|                                           |\n   |                %    \u00a2                                           |\n   |                                                                 |\n   %~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n  Use the /*CNTL statement to declare a user defined abstract resource\n  name that will be used by the given job as well as the disposition\n  of the named resource.\n\n  The value, anyname, is any one to eight byte name defined by the\n  user to represent an abstract resource.\n\n  Up to six /*CNTL cards are supported per job stream; however, the\n  use of /*AFTER /*BEFORE and /*WITH cards reduces this number.\n\n  EXC denotes that the job requests exclusive control over the named\n  abstract resource.  A job specifying this option will not begin\n  execution if any other job currently executing in the MAS spool\n  complex has requested the same abstract resource name either shared\n  (SHR) or exclusively (EXC).\n\n  SHR denotes that the job requests shared control over the named\n  abstract resource.  A job specifying this option will not begin\n  execution if any other job currently executing in the MAS spool\n  complex has requested the same abstract resource name exclusively\n  (EXC).  However, multiple jobs are permitted to execute if they all\n  request shared control over the same abstract resource name.\n\n  If neither EXC nor SHR are specified, the requested control over the\n  named abstract resource is assumed to be shared (SHR).\n1\n\n\n\n\n\n\n The /*ROUTE statement\n\n\n\n\n   #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\n   |                                                                 |\n   |  /*ROUTE XEQ resource                                           |\n   |                                                                 |\n   %~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u00a2\n\n\n  Use the /*ROUTE statement to insure that a given job executes in\n  a MAS member that contains the named JES2 abstract resource.\n\n  The value, resource, is any one of the JES2 systems programmer\n  defined abstract resource names.  Use the TSO HELP RESOURCE command\n  to determine all of the available resource names.\n\n  As many /*ROUTE cards as necessary may be present in the job stream.\n\n  The /*ROUTE cards may be in any order in relation to all other\n  JCL or JECL cards in the job stream.\n\n  The value, HERE, may be used in place of a resource name.  It denotes\n  that the job must execute on the MAS member upon which the job was\n  entered.\n1\n              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n              @                                         @\n              @        SECTION 3 - JES2 MESSAGES        @\n              @                                         @\n              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n\n\n\n\n\n\n\n               3.0  Mellon Bank Generated JES2 Messages\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n1\n\n\n\n $HASP919 NO OUTPUT QUEUED\n\n Issued by: MBSHRSPL\n\n Explanation: A $LF command was issued to scan the JOT (job output\n              table); however, no output elements could be found that\n              matched the request.\n\n System Action: None.\n\n Operator Response: None.\n\n\n\n $HASP920 UNABLE TO OBTAIN WORKAREA TO COMPLETE REQUEST\n\n Issued by: MBSHRSPL\n\n Explanation: While processing a $LF command, a call to the $GETWORK\n              service routine returned a non-zero return code.\n\n System Action: Processing for the current $LF request is terminated.\n\n Operator Response: Try the command at a later time or make the $LF\n                    more general.\n\n\n\n $HASP921 F=ffff R= rrrr PRMODE=pppp W=wwww B=b S=s\n $HASP921   Q: q=999 q=999 q=999 q=999 q=999 q=999 q=999\n\n Issued by: MBSHRSPL\n\n Explanation: The operator requested a display of the JOT with a $LF\n              command.\n\n System Action: None.\n\n Operator Response: None.\n\n\n\n $HASP928 *device* status F=ffffffff Q=qqqqqqqq   FSS\n\n Issued by: MBSHRSPL\n\n Explanation: The operator requested a display of local printer or\n              punch devices with the $DP command.  If the device is\n              in FSS mode, a code of \"FSS\" will appear at the end\n              of the corresponding display line.\n\n System Action: None.\n\n Operator Response: None.\n1\n\n\n\n $HASP935 JOBNAME SPECIFIED ON /*BEFORE STATEMENT IS INVALID.\n          CORRECT - RESUBMIT\n\n Issued by: MBSHRSPL\n\n Explanation: An invalid jobname has been detected on a /*BEFORE card.\n\n System Action: The job is flushed with a JCL error.\n\n Programmer Response: Correct the error then resubmit the job.\n\n\n\n $HASP936 JOBNAME SPECIFIED ON /*AFTER STATEMENT IS INVALID.\n          CORRECT - RESUBMIT\n\n Issued by: MBSHRSPL\n\n Explanation: An invalid jobname has been detected on a /*AFTER card.\n\n System Action: The job is flushed with a JCL error.\n\n Programmer Response: Correct the error then resubmit the job.\n\n\n\n $HASP937 PARM SPECIFIED ON /*CNTL STATEMENT IS INVALID.\n          CORRECT - RESUBMIT\n\n Issued by: MBSHRSPL\n\n Explanation: An invalid control name has has been detected on a\n              /*CNTL card.\n\n System Action: The job is flushed with a JCL error.\n\n Programmer Response: Correct the error then resubmit the job.  The\n                      control name must be one to eight characters long.\n\n\n\n $HASP938 MAXIMUM COMBINATION OF /*BEFORE, /*AFTER, /*WITH,\n          AND /*CNTL IS 6\n\n Issued by: MBSHRSPL\n\n Explanation: The maximum allowable number of these types of JECL\n              statements per job is 6.\n\n System Action: The job is flushed with a JCL error.\n\n Programmer Response: Correct the error then resubmit the job.  Note\n                      that the use of a /*AFTER card reduces the maximum\n                      number of /*CNTL cards allowed by one.  The same\n                      holds true for the /*BEFORE card.\n\n\n\n $HASP939 JOBNAME SPECIFIED ON /*WITH STATEMENT IS INVALID.\n          CORRECT - RESUBMIT\n\n Issued by: MBSHRSPL\n\n Explanation: An invalid jobname has been detected on a /*WITH card.\n\n System Action: The job is flushed with a JCL error.\n\n Programmer Response: Correct the error then resubmit the job.\n1\n\n\n\n $HASP940 * -- AFTER  JOBNAME = jjjjjjjj   --\n\n Issued by: MBSHRSPL\n\n Explanation: The job currently on a reader has specified a\n              /*AFTER card for job, jjjjjjjj.\n\n System Action: Processing continues.\n\n Operator Response: None.\n\n\n\n $HASP941 * -- WITH   JOBNAME = jjjjjjjj   --\n\n Issued by: MBSHRSPL\n\n Explanation: The job currently on a reader has specified a\n              /*WITH card for job, jjjjjjjj.\n\n System Action: Processing continues.\n\n Operator Response: None.\n\n\n\n $HASP942 * -- RESOURCE ROUTING = rrrrrrrr --\n\n Issued by: MBSHRSPL\n\n Explanation: The job currently on a reader has requested the JES2\n              abstract resource routing, rrrrrrrr.\n\n System Action: Processing continues.\n\n Operator Response: None.\n\n\n\n $HASP943 * -- CONTROL INFO = cccccccccccc --\n\n Issued by: MBSHRSPL\n\n Explanation: The job currently on a reader has specified the user\n              defined control information, cccccccccccc.\n\n System Action: Processing continues.\n\n Operator Response: None.\n1\n\n\n\n $HASP944 * -- BEFORE JOBNAME = jjjjjjjj   --\n\n Issued by: MBSHRSPL\n\n Explanation: The job currently on a reader has specified a\n              /*BEFORE card for job, jjjjjjjj.\n\n System Action: Processing continues.\n\n Operator Response: None.\n\n\n\n $HASP946* RESOURCE, rrrrrrrr, IS NO LONGER VALID; PLEASE REMOVE\n\n Issued by: MBSHRSPL\n\n Explanation: The named resource, rrrrrrrr, is obsolete.  Remove it\n              from the job.\n\n System Action: The JECL card is ignored.\n\n Programmer Response: Remove the RESOURCE card on the next submission\n                      of the job.\n\n\n\n $HASP950 nnnnn AWAITING EXECUTION\n $HASP950 c= nnnnn  c=nnnnnn c= nnnnn ...\n $HASP950 nnnnn AWAITING OUTPUT\n $HASP950 nnnnn AWAITING HARDCOPY\n $HASP950 nnnnn AWAITING TRANSMISSION\n $HASP950 nodename = nnnnn  nodename = nnnnn ...\n $HASP950 TOTAL JOBS count-BATCH count-STC count-TSU count-APPC\n\n Issued by: MBSHRSPL\n\n Explanation: These messages are display as the result of an operator\n              entering the $DB command.  The count values are JQE\n              counts.\n\n System Action: None.\n\n Operator Response: None.\n\n\n\n $HASP965 sid = resource resource resource ...\n\n Issued by: MBSHRSPL\n\n Explanation: This response is the result of an operator $DR command.\n              The indicated resource name(s) are attached to the\n              named system id.\n\n System Action: None.\n\n Operator Response: None.\n1\n\n\n\n\n\n $HASP966 sid = NO RESOURCES ATTACHED\n\n Issued by: MBSHRSPL\n\n Explanation: This response is the result of an operator $DR or\n              $QD command.  There are no resources attahced to\n              the indicated system id.\n\n System Action: None.\n\n Operator Response: None.\n\n\n\n $HASP968 nnnnn JOB/RESOURCE CONFLICT(S) EXIST\n\n Issued by: MBSHRSPL\n\n Explanation: This response is the result of an operator $DC command.\n              The list of jobs queued for execution or conversion\n              that cannot run due to a lack of resources attached\n              to the systems in the target spool complex is complete.\n\n System Action: None.\n\n Operator Response: If appropriate, attached the required resource\n                    names to a system in the spool complex with the\n                    $QA command.\n\n\n\n $HASP969 resource ADDED   IN sid\n                   DELETED\n\n Issued by: MBSHRSPL\n\n Explanation: This response is the result of an operator $QA or $QD\n              command.  The name resource has been added to or removed\n              from the named system id.\n\n System Action: None.\n\n Operator Response: None.\n\n\n\n $HASP970 resource IN USE BY nnnnn JOB(S) ON sid\n\n Issued by: MBSHRSPL\n\n Explanation: This response is the result of an operator $QD command\n              for a resource name that is currently being used by the\n              specified count of jobs on the named system id.\n\n System Action: The resource is not removed from the named system id.\n\n Operator Response: Use the $LN,sid,RES=resource command to list the\n                    jobs active with the named resource.  Either wait\n                    for all jobs to end that are using the resource\n                    or issue the $QD command with the FORCE operand\n                    to immediately remove the named resource.\n./ ADD NAME=DOCOVW   0102-05314-05314-1357-00122-00119-00000-T0SM0\n\nGeneral Information and Overview-\n\n\n\nWhat are the Mellon Bank Shared Spool mods, and what can they do for\nyou?\n                                                                       *\nThe shared spool mods enhance the JES2's job selection algorithms by\nproviding additional requirements for job scheduling when running in a\nJES2 MAS, or Multiple Access Spool configuration.  By coding one or more\nnew JCL statements we can now restrict which system a job runs on to\nthose systems that have a particular resource assigned to them.  For\ninstance, assuming you have some number of jobs that can only run where\na particular resource exists - a CICS region, a vendor program, or maybe\nwhere extra tape drives attached, and assuming those resources may be\navailable on different systems in the MAS configuration each time your\njobs are submitted, you can still ensure your job is only initiated on\nthe correct systems, by using the shared spool mods.  Another\nenhancement allows jobs to execute only on the LPAR that they are\nsubmitted from.  Still other enhancements allow job execution, only\nwhile other job names are in execution, or only after other job names\nhave completed.\n\n   A final further extension used in many shops allows you to create an\narbitrary resource name and have any jobs you wish coordinate their\nexecution of based on the need for exclusive or shared access, of that\narbitrary resource name before selecting it for execution.  No previous\nresource name setup is required to use this feature; only agreement\namong the participating jobs on the resource name you wish to\nco-ordinate your job execution on.  An example of this feature is to\nserialize SMP/e jobs, by local agreement all systems programmers could\nuse the CSI name as their arbitrary resource name to serialize their\nSMP/e jobs.  For instance, I could serialize exclusively for an apply\njob using a \"/*CNTL csi-zone-name,EXC\" statement, or I could hold as\nshared, the same name as shared, by using a \"/*CNTL csi-zone-name,SHR\"\nstatement for reporting jobs.  Another example would be to create an\narbitrary name and have all participating jobs enque on the name\nexclusively using a \"/*CNTL resource name,EXC\" to prevent more than one\nof the participating jobs from running at the same time.  This technique\ncould replace the use of dummy DD statements with a DISP of OLD, solely\nto single thread a sequence of jobs.\n\n\n- History of the Mellon Mods, at least as I know it. -\n\n  I must say at the outset, that we are not, nor have we ever been\nMELLON BANK.  That being said, my company has maintained the Mellon\nMods, and provided updates for the CBT tape for many years now, I have\nmaintained them personally for the past ten years, and they were\nmaintained by others at this company for several years prior to my\narriving on the scene.  Around the turn of the millennium, I completely\nrewrote the mods with some help from others, Bob Break of St.  Louis,\n(check the CBT tape for his JES2 module reload exit), and Judy Runt, and\nthe other good folks over at Wisconson Light.  The intent of the rewrite\nwas to incorporate the new JES2 functions that make use of WLM resource\nnames and scheduling environments, and to repackage the mods such that\nthey were all contained in standard JES2 exits, and made no direct\nchanges to the JES2 source code.  Further, the older version of the mods\nwas in a word, HUGE, and was primarily straight mods to the JES2 source\n- no exits, so it required a great deal of maintenance with each new\nversion of JES2.  While in their current state, they are not simple\nexits, they are all exits, and are quite manageable.\n\n\n- Interaction with WLM Resources and Scheduling Environments -\n\n  One of the primary job selection criterions available through the\nMellon Shared Spool mods is the availability of a particular resource\nname being available on a particular system.  In the past, we maintained\nthese names in a table within the Mellon Mods code; and provided JES2\ncommands that would alter the state of the resources, either on or off.\nWe now use WLM Scheduling Environment names instead.  The scheduling\nenvironment names are the same ones displayed on the SDSF SE panel.  The\nscheduling environments are on, when all of the resource names that make\nup each environment are also on.  WLM resource names are the same ones\ndisplayed on the SDSF RES panel.  The WLM scheduling environment names\nare what are matched on the \"/*ROUTE XEQ scheduling environment name\"\nJECL statements.  This function is virtually identical to the new SCHENV\nparameter on the jobcard.  In fact, we substitute the internal value of\nthe SCHENV with what we find in the /*ROUTE XEQ card only if there is no\ncurrent value.  These mods supported the function long before JES2\nadopted the facility, which appears to have been modeled after the\nmellon mods, and arose out of a long standing SHARE requirement.  While\nthese mods continue to support the older style /*ROUTE XEQ statements to\nroute jobs for execution based on resource locations, we suggest that\nthe older /*ROUTE XEQ statements; for Mellon Mods job selection, be\nreplaced by the new IBM supported SCHENV parm on the jobcard.\n\n\n- Compatability and Support of the Mellon Mods -\n\n\n  The Mellon Shared Spool mods, as they exist today, do not modify any\nJES2 source directly, and only make use of fully supported and\ndocumented exits; I see no reason why they may become unsupportable in\nthe future.\n\n  I will create updates to the Mellon Mods, and make those updates\navailable through the CBT tape web site, as we get new versions of the\noperating system installed in my shop.  I cannot guarantee to provide\nsupport for problems associated with this code.  If you do however have\nproblems, please let me know the details and I will do all that I can,\nworking on my own time to provide corrective fixes.  My name is Stephen\nMcColley and you can send me the documentation concerning any problems\nyou have with the code, via e-mail at SGMCCOLLEY@ALLTEL.NET.  I check my\ne-mail regularly and any messages will not normally go more than a day\nor two before I see them.\n\n  If any of you have any suggestions for new features or changes to the\nmods, you can send them to my e-mail address, and I will be happy to\ngive each of them due consideration.\n\n  One final item, if you could drop me a simple line or two at\nSGMCCOLLEY@ALLTEL.NET to let me know you are using the software, I will\nbe able to contact you - hopefully via e-mail, when and if any\nsignificant problems are found, or when new versions of the code are\nmade available.  I will also be able to forward you a WORD formated\ndocument for the overview, user documentation, and installation\ninstructions.\n\n- end of overview -\n./ ADD NAME=DOCUSR   0100-05314-05314-1159-00246-00246-00000-T0SM0\n\n       Users Guide - How to use the features of these Mods\n\n-  Control Statements\n\n  You take advantage of the Mellon Shared Spool mods via JECL\nstatements.  There are currently five supported statements, they are:\n\n\"/*CNTL XEQ resource, { EXC | SHR }\"\n\n\"/*ROUTE XEQ secheduling environment name | HERE \"\n\n\"/*WITH jobname\"\n\n\"/*AFTER jobname\"\n\n\"/*BEFORE jobname\"\n\n  The /*CNTL XEQ statement is used to add an additional job selection\ncriterion based on other executing jobs current use of the same resource\nname.  The \"/*CNTL XEQ\" must be placed in columns 1 through 10.  The\nresource name is arbitrary, and is made of up to eight (8) characters\nwith no embedded blanks.  The resource name follows the literal \"/*CNTL\"\nand must be preceded by at least one, but not more than 30 blank spaces.\nIf the shared (SHR) or exclusive (EXC) keywords are used, they must\nimmediately follow the resource name and be preceded by a comma.  If\nneither the SHR nor EXC keyword is specified SHR is assumed.\n\nYou may specify up to eight /*CNTL statements; additional statements are\ndisregarded.\n\n    Examples:\n\n    Assume jobnames ABC, and CDE are currently in execution with the\nfollowing /*CNTL XEQ statements -\n\n    //ABC  JOB (other stuff)\n    /*CNTL XEQ MYNAME,SHR\n\n    //CDE JOB (other stuff)\n    /*CNTL XEQ MYNAME,SHR\n\nThen if job EFG is submitted with the following, /*CNTL statement -\n\n    //EFG JOB (other stuff)\n    /*CNTL XEQ MYNAME,EXC\n\nThe job will not be selected for execution as long as either job ABC or\nCDE continues to run.\n\nNext if job XYZ is submitted with the following, /*CNTL statement -\n\n    //XYZ JOB (acctng info)\n    /*CNTL XEQ     MYNAME   \u00d0 SHR is the default\n\n  It would be immediately available for execution.\n\nWhen no jobs remain in execution with a /*CNTL XEQ MYNAME  job EFG with\nthe EXC requirement would be available for job selection.  Assume it has\nnow been selected, and a new job enters the system with the following\n/*CNTL statement -\n\n    //WXY  JOB  (acctng info)\n    /*CNTL  XEQ  MYNAME\n\n  Job WXY will not be available for job execution until job XYZ that\nholds the resource name exclusively ends.  If other jobs are submitted\nwith resource names other than MYNAME, they will be treated separately\nand only other jobs with /*CNTL statements that reference the same\nresource name will affect their availability for job selection.\n\n  The /*CNTL statement only provides additional job selection criterion,\nand does not replace other JES2 requirements for job selection such as\navailable initiators, appropriate job class and so on.  The resource\nname is arbitrary, you make it up, there is no need for anyone to add\nthe name to WLM, or any other table before it is used.\n\n\nThe /*ROUTE XEQ is a standard JES2 statement used to route your job to a\nspecific execution node.  We have usurped the use of the statement, and\nwhen we read an XEQ statement, we test to see if the name following the\nXEQ literal is a valid WLM scheduling environment name.  If the name is\na valid scheduling environment name, and if no schenv value is present\non the JOB card, we use the XEQ name in the same way the job statement\nparameter SCHENV is used, otherwise we let JES2 handle it normally.\n\nThe literal \"/*ROUTE\" must begin in column 1.  The literal \"XEQ\" must\nfollow \"/*ROUTE\", and may be separated by one to twenty blank spaces.\nThe resource name, if not a valid JES2 node name, must follow the \"XEQ\nliteral by between 1 and 35 blank spaces.  The resource name can be\nbetween 1 and 16 characters long, if the name is longer than 16\ncharacters, only the first 16 are used.\n\nThere is one specific exception to all of the above, if the literal\nfollowing XEQ is HERE, then the jobs system affinity is set to the\nsystem where you submitted the job, quite a handy feature itself.\n\nYou may specify more than one /*ROUTE statement; but only the last will\nbe used.\n\nExamples:\n\n//ABC JOB (job acctng),SCHENV=BEFOREALL\n/*ROUTE XEQ AFTERALL   <== ignored because a valid schenv is specified\n\n//ABC JOB (job acctng),SCHENV=BEFOREALL\n/*ROUTE XEQ  N6  <== a valid JES2 routing node, both jes2 routing and\n//*                  schenv are valid for this job.\n\n//ABC JOB (jobacctng)\n/*ROUTE XEQ BEFOREALL <== BEFOREALL is setup the same as SCHENV above\n\n//TUV  JOB (jobacctng)\n/*ROUTE XEQ  HERE   <== the jobs will only execute where submitted.\n\nThe /*WITH statement specifies that the job is only available for\nselection while the jobname named on the /*WITH statement is in\nexecution.  The condition is satisfied even if the jobname that must be\nexecuting is executing on a different system within the same MAS\nenvironment.  If more than one /*WITH statement is read; only the last\none is kept.\n\nExample:\n\n//FGH   JOB  (acctng info)\n/*WITH    JKL\n\nThis job will only be selected for execution if jobname JKL is\nexecuting at the time of job selection.\n\n\nThe /*AFTER jobname statement specifies that the job is only available\nfor selection after the jobname in the /*AFTER statement has finished.\nBecause we really do not track all completed jobs, from - from when -\nthe beginning of the day, the week, the last ipl, the last cold start,\nor maybe for all time, it is more correct to say that if the jobname\nspecified on a /*AFTER statement is in execution at the time our job\nwould otherwise have been selected for execution, then our job will wait\nuntil the jobname referenced in the /*AFTER statement has ended.\n\"AFTER\" may have been more appropriately names \"NOT WHILE\", but since I\nwas not around when the original keywords were developed, please do not\nblame me.  Again, the jobname on the /*AFTER need not be executing on\nthe system that our job is potentially selected for execution on, it\ncould be on any system within the MAS complex.\n\nIf more than one /*AFTER card is read; only the last one is kept.\n\nExample:\n\n//ABC JOB (acctng info)\n/*AFTER    XYZ\n\nJob ABC will not be available for execution while job XYZ is in\nexecution anywhere within the MAS complex.\n\n\nThe /*BEFORE jobname statement causes the jobname specified in the\nstatement to not be selected for execution until after this job has\ncompleted.  Specifically if jobname ABC has a /*BEFORE XYZ statement,\nthen if jobname XYZ is potentially selected for execution by JES2, the\nMellon Mods will examine all jobs on the input queue and when jobname\nABC is found to have a /*BEFORE for job XYZ, job XYZ will be rejected as\na potential candidate for job execution.\n\nIf more than one /*BEFORE statement is read; only the last one is kept.\n\n Example:\n\n//ABC   JOB  (acctng info)\n/*BEFORE   XYZ\n\nThis before statement will cause JES2 to reject job XYZ as a potential\ncandidate for job execution until after job ABC has completed execution.\nIf job XYZ was already executing at the time job ABC is submitted, the\n/*BEFORE statement will not affect anything, unless there is another job\nXYZ waiting to execute.  Also please note, it is possible to form a\nlockout condition where JOBA has a /*BEFORE JOBB, and JOBB has a\n/*BEFORE JOBA statement.  There is no checking done for this type of\ndeadly embrace.\n\n  A few final notes concerning the relationship between /*BEFORE, and\n/*AFTER.  Many people try to use these statements, and stack two or more\njobs in the same PDS member and submit them all at the same time with\none SUBMIT command.  This usually works as expected, but sometimes JES2\nwill NOT PROCESS the jobs in the order they appear in the submitted\nmember.  This can result in a job with a /*AFTER statement for a prior\njob you think JES2 has already seen and processed because of the\nsequence in the submitted member, being processed and initiated before\nJES2 ever finishes reading the job that is the object of the /*AFTER\nstatement.  This problem can be avoided by making sure that jobs with\n/*BEFORE and /*AFTER requirements are submitted separately from each\nother and in an appropriate sequence.\n\n  In relationship to any of the statements above, when routing a job to\nanother node, the additional selection criterion defined by the Mellon\nMods statements, will follow the job to the new node, where it will\nlikely no longer be appropriate.  Of course if the Mellon Mods are not\ninstalled at the receiving node, the additional job selection\nrequirements are not honored.\n\nThe JES2 $DJ command output has been extended to include information\nabout /*CNTL, up to eight names qualified with an \"E\" for exclusive, or\nan \"S\" for shared, one /*WITH jobname, one /*BEFORE and one /*AFTER\njobname.  Examples of the extended displays are given below, please note\nthat the information is included in either the standard or long versions\nof the command.\n\nAltered Display Commands -\n\n-$DJ(25926)\n $HASP890 JOB(T0SM0TTY)\n $HASP890 JOB(T0SM0TTY)  STATUS=(AWAITING EXECUTION),CLASS=X,\n $HASP890                PRIORITY=6,SYSAFF=(ANY),HOLD=(JOB),\n $HASP890                AFTER=T0SM0AF,BEFORE=T0SM0BF,WITH=T0SM0WTH,\n $HASP890                CNTL=(HOWDY-E,HOWDO-S,WILDO-S,HELLO-S)\n\n\n-$DJ(25926),LONG\n $HASP890 JOB(T0SM0TTY)\n $HASP890 JOB(T0SM0TTY)  STATUS=(AWAITING EXECUTION),CLASS=X,\n $HASP890                PRIORITY=6,SYSAFF=(ANY),HOLD=(JOB),\n $HASP890                CMDAUTH=(LOCAL),OFFS=(),SECLABEL=,\n $HASP890                USERID=T0SM0,SPOOL=(VOLUMES=(JES2T1),TGS=1,\n $HASP890                PERCENT=0.0009),ARM_ELEMENT=NO,CARDS=18,\n $HASP890                REBUILD=NO,SRVCLASS=BATTSTMD,SCHENV=TEST,\n $HASP890                SCHENV_AFF=(),CC=(),AFTER=T0SM0AF,\n $HASP890                BEFORE=T0SM0BF,WITH=T0SM0WTH,\n $HASP890                CNTL=(HOWDY-E,HOWDO-S,WILDO-S,HELLO-S)\n\n\nIn addition informational messages, $HASP493 and $HASP494 are written to\nthe log as jobs with /*CNTL, /*WITH, /*BEFORE, or /*AFTER are read.\nExamples of the messages follow.\n\n These messages were issued for jobname T0SM0TTY\n\n$HASP944 T0SM0TTY * -- WITH   JOBNAME = T0SM0WTH   --\n$HASP944 T0SM0TTY * -- AFTER  JOBNAME = T0SM0AF    --\n$HASP944 T0SM0TTY * -- BEFORE JOBNAME = T0SM0BF    --\n$HASP943 T0SM0TTY * -- CONTROL INFO = HOWDY,EXC    --\n$HASP943 T0SM0TTY * -- CONTROL INFO = HOWDO,SHR    --\n$HASP943 T0SM0TTY * -- CONTROL INFO = WILDO,SHR    --\n$HASP943 T0SM0TTY * -- CONTROL INFO = HELLO,SHR    --\n\n\n - end of text -\n./ ADD NAME=JES2PARM 0104-04313-05314-1411-00064-00035-00000-T0SM0\n/*                                                                   */\n/* ALL LOADMOD AND EXIT STATEMENTS REWORKED 3-18-96 T0SM0            */\n/*  USED IN OUR SHOP - FOR MELLON MODS CHANGES ONLY - FIND 'MMODS'   */\n/*                                                                   */\n/*                                                                   */\n/*                                                                   */\nLOADMOD(STJTABS)   /*  DYNAMIC TABLE DEFINITIONS FOR JQE EXTENSION */\nLOADMOD(STSCX01A)  /*  JES2 EXIT1 - BANNER PAGE EXIT (NON3800) */\nLOADMOD(STSCX04A)  /* PARSES /*ROUTE XEQ RESNAME AND VALIDATES */\nLOADMOD(STSCX04B)  /* PARSES /*BEFORE, AFTER,WITH, AND CNTL    */\nLOADMOD(STSCX05A)  /* $REPEXIT AND $ADDEXIT COMMANDS ARE HERE  */\nLOADMOD(STSCX05B)  /* PREVENTS PURGING JOBS BY RANGE           */\nLOADMOD(STSCX06A)  /* TURNS /*ROUTE CNTL,XX INTO SCHENV= VALUES*/\nLOADMOD(STSCX15A)  /* FORCES FCB LOAD UNLESS CHANGING TO STDFCB*/\nLOADMOD(STSCX20A)  /* COPIES JCT INFO INTO THE JQE EXTENSION   */\nLOADMOD(STSCX36A) STORAGE=CSA\nLOADMOD(STSCX49A)\nLOADMOD(STSCX100)\nEXIT(001) ROUTINE=EXIT01A,STATUS=ENABLED\n                      /* A = JES2EX01=STSC SEPERATOR BANNER ROUTINE  */\nEXIT(004) ROUTINE=(EXIT04A,EXIT04B),STATUS=ENABLED\n              /* A = GETS \"ROUTE XEQ INFORMATION                     */\n              /* B = GETS \"BEFORE\" \"AFTER\" \"WITH\" AND \"CNTL\" INFO    */\nEXIT(005) ROUTINE=(EXIT05A,EXIT05B),STATUS=ENABLED\n                      /* A = PREVENTS PURGING JOBS BY RANGE          */\n                      /* B = THE $REPEXIT AND $ADDEXIT COMMANDS      */\nEXIT(006) ROUTINE=(EXIT06A),STATUS=ENABLED\n                      /* A = SETS SCHENV BASED ON ROUTE XEQ CARDS    */\n                      /* B = HANDLES TAPE BLP PROCESSING OPTIONS     */\nEXIT(015) ROUTINE=(EXIT15A),STATUS=ENABLED\n                      /* A = STSC FCB CONTROL                        */\nEXIT(020) ROUTINE=(EXIT20A),STATUS=ENABLED\n                      /* COPIES JCT INFO INTO THE JQE EXTENSION      */\nEXIT(036) ROUTINE=EXIT36A,STATUS=ENABLED\n                      /* SAF PROCESS OF RJE SUBMITTED JOBS           */\nEXIT(049) ROUTINE=EXIT49A,STATUS=ENABLED\n                      /* IMPLEMENT BEFORE AFTER WITH CNTL STATEMENTS */\nEXIT(100) ROUTINE=EXIT100A,STATUS=ENABLED\n                      /* JES2X100=STSC  FCB SETUP ROUTINES           */\n/*                                                                   */\n/* MMODS                                                             */\n/*                                                                   */\n/* IF YOU ARE JUST IMPLEMENTING THE MELLON MODS USE THE LOADMOD AND  */\n/* EXIT STATEMENTS BELOW.                                            */\n/*                                                                   */\n/* MMODS - THE LOADMODS AND EXIT STATEMENTS NEEDED  -                */\n/*    O N L Y  FOR MELLON MODS                                       */\n/*                                                                   */\n/*                                                                   */\nLOADMOD(STJTABS)   /*  DYNAMIC TABLE DEFINITIONS FOR JQE EXTENSION */\nLOADMOD(STSCX04A)  /* PARSES /*ROUTE XEQ RESNAME AND VALIDATES */\nLOADMOD(STSCX04B)  /* PARSES /*BEFORE, AFTER,WITH, AND CNTL    */\nLOADMOD(STSCX06A)  /* TURNS /*ROUTE CNTL,XX INTO SCHENV= VALUES*/\nLOADMOD(STSCX20A)  /* COPIES JCT INFO INTO THE JQE EXTENSION   */\nLOADMOD(STSCX49A)\nEXIT(004) ROUTINE=(EXIT04A,EXIT04B),STATUS=ENABLED\n              /* A = GETS \"ROUTE XEQ INFORMATION                     */\n              /* B = GETS \"BEFORE\" \"AFTER\" \"WITH\" AND \"CNTL\" INFO    */\nEXIT(006) ROUTINE=(EXIT06A),STATUS=ENABLED\n                      /* A = SETS SCHENV BASED ON ROUTE XEQ CARDS    */\nEXIT(020) ROUTINE=(EXIT20A),STATUS=ENABLED\n                      /* COPIES JCT INFO INTO THE JQE EXTENSION      */\nEXIT(049) ROUTINE=EXIT49A,STATUS=ENABLED\n                      /* IMPLEMENT BEFORE AFTER WITH CNTL STATEMENTS */\n./ ADD NAME=LSES500  0316-00234-05123-1449-00469-00455-00000-T0SM0\n++USERMOD(LSES500)\n /* ***************************************************************\n    ** *                                                       * **\n    ** * THIS USERMOD HANDLES ALL CHANGES REQUIRED TO CREATE   * **\n    ** * LOCAL EXTENSIONS TO THE JQE AND JCT.                  * **\n    ** *                                                       * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707) .\n++MAC($STJCTX) SYSLIB(SHASMAC) DISTLIB(AHASMAC).\n         MACRO -- $STJCTX -- JCT EXTENTION\n&LABEL   $STJCTX\n.**********************************************************************\n.*\n.* FUNCTION: MAPPING MACRO FOR JCT EXTENTION.\n.*\n.* REVISION HISTORY:\n.*\n.*   DATE   NAME         DESCRIPTION OF CHANGE\n.* -------- ------------ ----------------------------------------------\n.* 04/20/00 S MCCOLLEY   ADDED THIS COMMENT BLOCK.\n.* 11/13/03 S MCCOLLEY   ADDED CONDITIONAL EXPANSION OF $JCTX\n.*\n.**********************************************************************\n         LCLC  &JCXOK\n&JCXOK   SETC  T'JCXORG                     GET THE TYPE FOR JCXORG\n         AIF   ('&JCXOK' NE 'U').STNXPND      ** IF NOT DEFINED ADD IT\n         $JCTX\n.STNXPND ANOP\nSTJCTX   DSECT\n*\n* STSC EXTENSION OF THE JCT TO BE USED FOR ALL EXITS\n*\n         DS    XL(JCXORG-JCTX)     DEFINE REQUIRED $JCTX PREFIX AREA\n*\nUJCXMFLG DS    XL1                 RESOURCE ROUTING FLAGS\n*\nUJCXUFLG DS    XL1                 MISC JECL CARDS FLAGS\n*\nUJCXDLYS DS    X                   JOB DELAY REASONS FROM OUR EXIT 49\n*\nUJCXWITH DS    CL8                 SAVE A WITH NAME HERE\nUJCXAFTN DS    CL8                 SAVE AN AFTER NAME HERE\nUJCXBFOR DS    CL8                 SAVE A BEFORE NAME HERE\nUJCXDNAM DS    CL45                NAMES FROM BEF/AFT/WITH CARDS AND   X\n                                    THE /*CNTL AND SHARE TYPES         X\n                                    5 9-BYTE FIELDS\n*\n         DS    0H                  DOUBLE WORD ALLIGN\nUJCXWORK DS    CL4                 4 BYTE TEMPORARY EXIT WORK AREA\n*\nUJCXSLN1 EQU   *-STJCTX            LENGTH OF SECTION\n*\n         MEND\n++MAC($STQNAME) SYSLIB(SHASMAC) DISTLIB(AHASMAC).\n         MACRO -- $STQNAME -- SUNTRUSTS JQE EXTENSION\n&LABEL   $STQNAME &DSECT=YES\n.*\n.**********************************************************************\n.*\n.* FUNCTION: DEFINE A BERT, AN EXTENSION TO THE JQE.\n.*\n.* NOTES:    THIS BERT ENTRY CONTAINS ALL THE FIELDS WE USED TO\n.*           INCLUDE INTO THE $JQE MACRO PRIOR TO OS/390.\n.*\n.*           SOME OF THESE FIELD MUST BE IDENTICALLY DEFINED AND USED\n.*           IN THE JCTX: UBRDNAME, UBRUFLAG, UBRMFLAG, UBRDLAYS.\n.*\n.*\n.* REVISION HISTORY:\n.*\n.*   DATE   NAME         DESCRIPTION OF CHANGE\n.* -------- ------------ ----------------------------------------------\n.* 04/20/00 S MCCOLLEY   INITIAL VERSION -- FOR OS/390 2.6.\n.*\n.**********************************************************************\n.*\nSTQNAME  DSECT ,\n*\n* UBRDNAME IS THE LIST OF AFTER/BEFORE JOBNAMES AND/OR CNTL RESOURCES\n*          AND THE /*CNTL SHARE TYPE (\"S\" OR \"E\").  THESE SHARE TYPE\n*          BYTES IMMEDIATELY FOLLOW THE RESOURCE NAME.\n*\n*   AFTER   (IF ANY) MUST BE FIRST  (SEE UBRAFT).\n*   BEFORE  (IF ANY) MUST BE SECOND (SEE UBRBEF).\n*   CNTL(S) (IF ANY) MUST BE LAST   (SEE UBRCNTL AND 4 HIGH ORDER BITS\n*           OF UBRMFLAG.  THERE CAN BE UP TO 4 CNTL NAMES.)\n*\nUBRWITH  DS    CL8                 PLACE TO HOLD A /*WITH NAME\nUBRAFTR  DS    CL8                 PLACE TO HOLD A /*AFTER NAME\nUBRBFOR  DS    CL8                 PLACE TO HOLD A /*BEFORE NAME\nUBRDNAME DS    CL45                NAMES FROM BEFORE/AFTER/CNTL CARDS  X\n                                     AND SHARE TYPES IF /*CNTL\nUBRDNAML EQU   9                   LENGTH OF EACH NAME/SHARE TYPE FIELD\n*\nUBRUFLAG DS    BL1                 MISC JECL CARDS FLAGS\nUBRINFRM EQU   B'10000000'           /*JOBPARM INFORM AFTER EXECUTION\n*\n*\nUBRMFLAG DS    BL1                 RESOURCE FLAGS\nUBRAFT   EQU   B'00000001'           /*AFTER  SPECIFIED\nUBRBEF   EQU   B'00000010'           /*BEFORE SPECIFIED\nUBRCNTL  EQU   B'00000100'           /*CNTL   SPECIFIED\nUBRWITHF EQU   B'00001000'           /*WITH   SPECIFIED\n*              B'11110000'           # OF /*CNTL NAMES PRESENT\n*\nUBRNCTL  EQU   X'08'               MAX # OF NAMES INCLUDING\n*                                    /*AFTER, /*BEFORE, AND  /*CNTL\n*\n*\nUBRDLAYS DS    BL1                 DELAY REASONS FROM OUR EXIT 49.  .\nUBRDLWIT EQU   B'01000000'  X'40'    /*WITH CONTENTION DELAY\nUBRDLRES EQU   B'00100000'  X'20'    /*RESOURCE CONTENTION (OBSOLETE)\nUBRDLRR  EQU   B'00010000'  X'10'    RESOURCE ROUTING CNTN (OBSOLETE)\nUBRDLDUP EQU   B'00001000'  X'08'    HOLD/DUP   CONTENTION\nUBRDLAFT EQU   B'00000100'  X'04'    /*AFTER    CONTENTION\nUBRDLBEF EQU   B'00000010'  X'02'    /*BEFORE   CONTENTION\nUBRDLCTL EQU   B'00000001'  X'01'    /*CNTL     CONTENTION\n*\nSTQNAMELN EQU  *-STQNAME           LENGTH OF THE BERTIE\n*\n         MEND\n++MAC($USERCBS) SYSLIB(SHASMAC) DISTLIB(AHASMAC).\n         MACRO -- $USERCBS -- EXPAND ALL USER CONTROL BLOCKS\n&LABEL   $USERCBS ,\n.*\n.**********************************************************************\n.*\n.* FUNCTION: GENERATE ALL SUNTRUST MAPPING MACROS FOR JES2.\n.*\n.* NOTES:    THIS MACRO IS REQUIRED FOR ALL SUNTRUST JES2 EXIT MODULES\n.*           ALL USER MAPPING MACROS SHOULD BE EXPANDED HERE.\n.*\n.* REVISION HISTORY:\n.*\n.*   DATE   NAME         DESCRIPTION OF CHANGE\n.* -------- ------------ ----------------------------------------------\n.*\n.**********************************************************************\n.*\n.*\n.*\n         TITLE '$STJCTX -- USER EXTENSION TO THE JCT (OS/390 2.10)'\n         $STJCTX ,\n.*\n         TITLE '$STQNAME -- USER EXTENSION TO THE JQE (OS/390 2.10)'\n         $STQNAME ,\n.*\n         MEND\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STJTABS),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STJTABS)\n NAME STJTABS(R)\n/*\n++SRC(STJTABS) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\nSTJTABS  TITLE 'INSTALLATION DEFINED TABLES FOR JES2'\n PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1) '\n*\n* MODULE NAME:  STJTABS\n*\n*\n* FUNCTION:     THIS MODULE CONTAINS THE USER TABLES REFERENCED IN\n*               THE JES2 HASPTABS MODULE.  IT ALSO CONTAINS ANY\n*               PRE- OR POST SCAN EXITS CALLED FOR BY THESE\n*               TABLE ENTRIES.\n*\n*               TABLES AND FUNCTIONS ADDED:\n*\n*                 MAIN PARAMETER TABLE:\n*\n*                 BERT TABLE FOR OUR EXTENSION TO THE JQE:\n*\n*                 - STQNAME  - ALL OUR JQE EXTENSION.\n*\n*                 JQE TABLE:\n*\n*                 - BERAFTCT - PSEUDO FIELD TO DISPLAY THE VALUES\n*                              FOR A JOB'S /*BEFORE, /*AFTER, AND/OR\n*                              /*CNTL CARDS WITH A PRE-SCAN EXIT.\n*\n*\n* ENTRY POINTS: PARMSCAN -- INSTALLATION'S MAIN PARAMETER\n*                           $SCAN TABLE\n*\n*               USERJQE  -- INSTALLATION'S JQE SUB-SCAN\n*                           $SCAN TABLE\n*\n*               USERBERT -- INSTALLATION'S BERT TABLE.\n*\n*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE\n*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS\n*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED\n*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF\n*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE\n*  USEFULLNESS OF THE MATERIAL.\n*\n*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,\n*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE\n*  IN THE FUTURE.\n*\n*    SPECIAL THANKS GO TO BOB BREAK OF ST. LOUIS FOR THE ORIGINAL CODE\n*  TO PARSE THE \"/*ROUTE XEQ RESNAME\" CARDS AND SET THE APPROPRIATE\n*  EXECUTION ENVIRONMENT.\n*\n*    SPECIAL THANKS TO JUDY RUNT OF WISCONSIN ELECTRIC FOR THE ORIGINAL\n*  CODE TO HANDLE THE \"/*CNTL BEFORE|AFTER|WITH,RESNAME\" AND \"/*CNTL\n*  RESNAME,EXC|SHR\" ROUTINES.  THE USE OF THE BLOCK EXTENSION REUSABLE\n*  TABLES, BERT'S, TO EXTEND THE JCT AND JQE.\n*\n* REVISION HISTORY:\n*\n*   DATE   NAME        DESCRIPTION OF CHANGES\n* -------- ----------- ------------------------------------------------\n         SPACE 3\n         COPY  $HASPGBL            INCLUDE JES GLOBAL VALUES\n         PRINT ON                  RESTORE FULL PRINTING\n         EJECT\nSTJTABS $MODULE TITLE='SUNTRUST USER TABLES MODULE',                   X\n               RMODE=ANY,                                              X\n               ENVIRON=JES2,                                           X\n               MLTE,                                                   X\n               RESPA,              JES FSI RESPA DSECT                 X\n               RPL,                MVS ACB REQUEST BLOCK DSECT         X\n               $BERT,              ($BERT)                             X\n               $BERTTAB,           ($BERT)                             X\n               $BUFFER,            HASP SPOOL BUFFER DSECT             X\n               $CAT,               HASP CLASS ATTRIBUTE TABLE DSECT    X\n               $CATBERT,           ($DOGBERT)                          X\n               $CADDR,             JES2 COMMON STORAGE ADDRESS TABLE   X\n               $CMB,                                                   X\n               $COMWORK,           HASP COMM PCE WORK AREA DSECT       X\n               $DCT,                                                   X\n               $HASPEQU,           HASP EQUATES                        X\n               $HCCT,              HASP HCCT DSECT                     X\n               $HCT,               HASP CONTROL TABLE DSECT            X\n               $HFAME,             HASP HFAME DSECT                    X\n               $JCT,               HASP JOB CONTROL TABLE DSECT        X\n               $JCTX,              HASP JOB CONTROL TABLE EXTENSION    X\n               $JOE,               HASP JOB OUTPUT ELEMENT DSECT       X\n               $JQE,               HASP JOB QUEUE ELEMENT DSECT        X\n               $MCT,                                                   X\n               $MIT,               HASP MIT DSECT                      X\n               $MITETBL,                                               X\n               $MODMAP,            HASP MODULE MAP DSECT               X\n               $PADDR,             HASP PADDR DSECT                    X\n               $PARMLST,                                               X\n               $PCE,               HASP PROCESSOR CONTROL ENTRY DSECT  X\n               $PCETAB,            HASP PCE TABLE DSECT                X\n               $PSV,                                                   X\n               $QSE,                                                   X\n               $RDRWORK,                                               X\n               $SAFINFO,                                               X\n               $SCAT,              HASP SCAT DSECT                     X\n               $SCANTAB,           HASP SCAN TABLE DSECT               X\n               $SCANWA,            HASP $SCAN WORK AREA DSECT          X\n               $USERCBS,           USER MAPPING MACROS                 X\n               $XECB               HASP XECB DSECT\n         TITLE 'USER TABLE MODULE -- USER MAIN PARAMETER STATEMENT $SCAX\n               N TABLE'\n         TITLE 'USER TABLE MODULE -- USERJQE SUB-SCAN TABLE'\n**********************************************************************\n*\n*   THIS IS THE $SCAN TABLE FOR CONTROLLING SCANNING OF THE PARMS FOR\n*    JQES.\n*   WE USE IT TO ADD OUR STATEMENTS FOR:\n*\n*     BEFAFTCT - DISPLAY ONLY OF BEFORE/AFTER/CNTL CARD INFORMATION.\n*\n**********************************************************************\nUSERJQE  $SCANTAB  TABLE=(DYNAMIC,MCTJQETP)\n         SPACE 3\n        $SCANTAB NAME=BEFAFTCT,    BEFORE/AFTER/CNTL INFORMATION       X\n               CB=PARENT,                                              X\n               DSECT=JQE,                                              X\n               FILTER=NO,          CAN NOT BE A FILTER                 X\n               CALLERS=($SCDCMDS), DISPLAY COMMANDS                    X\n               PRESCAN=(QBACDISP,DISPLAY)  DISPLAY PRESCAN EXIT\n         SPACE 3\n         $SCANTAB  TABLE=END       DEFINE END OF USER TABLE\n         TITLE 'USER TABLE MODULE -- DYNAMIC BERT TABLE'\n**********************************************************************\n*\n*   THIS IS THE $BERTTAB TABLE TO DEFINE OUR STQNAME ENTRY IN THE JQA.\n*   REFER TO THE $STQNAME MACRO FOR DETAILS.\n*\n**********************************************************************\nUSERBERT $BERTTAB  TABLE=(DYNAMIC) START OF DYNAMIC TABLE\n         SPACE 3\n        $BERTTAB CBTYPE=JQE,       CONTROL BLOCK TYPE                  X\n               NAME=STQNAME,       ID OF OUR BERTIE                    X\n               CBOFF=*,            GENERATE OFFSET DYNAMICALLY         X\n               LEN=STQNAMELN,      LENGTH OF OUR BERTIE                X\n               FILL=C' '           FILL CHARACTER\n         SPACE 3\n         $BERTTAB  TABLE=END       DEFINE END OF USER TABLE\n         TITLE 'USER TABLE MODULE -- $SCAN PRE-SCAN DISPLAY EXIT ROUTINX\n               E FOR JQA BEFORE/AFTER/CNTL INFORMATION'\n**********************************************************************\n*\n*   $SCAN FACILITY PRE-SCAN EXIT TO DISPLAY THE SCHEDULING INFORMATION\n*   FROM THE /*BEFORE, /*AFTER AND /*CNTL JECL CARDS FOR BATCH JOBS.\n*\n*   NOTE: THESE FIELDS ARE ONLY DISPLAYED FOR BATCH JOBS THAT ARE\n*         EITHER AWAITING OR IN EXECUTION, SINCE THEY HAVE NO VALUE\n*         FOR TSU OR STC JOBS AND HAVE NO PURPOSE POST EXECUTION.\n*\n**********************************************************************\n         SPACE 2\n         USING STAB,R8             DEFINE BASE REGISTER\n         USING SCWA,R10            DEFINE BASE REGISTER\n         USING HCT,R11             DEFINE BASE REGISTER\n         USING QBACDISP,R12        DEFINE BASE REGISTER\n         USING PCE,R13             DEFINE BASE REGISTER\n*\nQBACDISP $SAVE ,                   GET SAVE AREA AND SAVE REGS\n*\n         LR    R12,R15             GET ROUTINE'S BASE ADDRESS\n         LR    R10,R1              GET ADDRESS OF SCWA\n         L     R8,SCWASTAB         GET ADDRESS OF STAB\n         L     R7,SCWACBAD         GET ADDRESS OF OUR CB (JQE)\n         USING JQE,R7\n*\n         LA    R4,8                PRESET RETURN CODE -- ALL DONE\n         TM    JQEFLAG3,JQE3JOB    CHECK IF THIS IS A BATCH JOB\n         BNZ   QBACRET             TSU OR STC -- EXIT, NO JQA TO FREE\n         TM    JQETYPE,$XEQ        CHECK IF JOB IS WAITING/IN EXEC\n         BZ    QBACRET             NO -- EXIT, NO JQA TO FREE\n*\n         $DOGJQE ACTION=(FETCH,READ),    GET A READ-ONLY MODE JQA      X\n               JQE=(R7),                                               X\n               ERRET=QBACBDJQ\n*\n         LR    R7,R0               GET THE ADDR OF OUR JQA\n         USING JQA,R7              DEFINE BASE REGISTER\n*\n         $DOGBERT ACTION=GETOFFSET,    GET THE OFFSET                  X\n               CBTYPE=JQE,                IN THE JQA                   X\n               NAME=STQNAME,                 OF OUR BERT               X\n               ERRET=QBACBDBR\n*\n         LA    R6,0(R1,R7)         GET ADDRESS OF OUR BERT\n         USING STQNAME,R6\n*\n* SET UP AND DISPLAY THE VALUE OF THE UDCTUCS FIELD\n*\n         TM    UBRMFLAG,UBRAFT     DID JOB SPECIFY AN /*AFTER NAME?\n         BZ    QBACBEF             NO -- CHECK FOR BEFORE NAME\n         LA    R5,UBRAFTR          GET ADDR OF OUR NAMES FIELD\n         LA    R2,8                GET LENGTH OF OUR FIELD\n        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT='AFTER=',BRKOPT=YES,CONV=CHAR,           X\n               DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR\n*\nQBACBEF  DS    0H\n         TM    UBRMFLAG,UBRBEF     DID JOB SPECIFY A /*BEFORE NAME?\n         BZ    QBACWITH            NO -- CHECK FOR WITH NAME(S)\n         LA    R2,8                GET LENGTH OF OUR FIELD\n         LA    R5,UBRBFOR          POINT TO OUR NAME FIELD\n        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT='BEFORE=',BRKOPT=YES,CONV=CHAR,          X\n               DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR\n         LA    R5,UBRDNAML(,R5)    POINT TO NEXT NAME\n*\nQBACWITH DS    0H\n         TM    UBRMFLAG,UBRWITHF   DID JOB SPECIFY A /*WITH NAME ?\n         BZ    QBACCNTL            NO -- CHECK FOR CNTL NAME(S)\n         LA    R2,8                GET LENGTH OF OUR FIELD\n         LA    R3,UBRWITH          GET ADDRESS OF FIELD\n        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT='WITH=',BRKOPT=YES,CONV=CHAR,            X\n               DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT=(R3),LENGTH=(R2),BRKOPT=NO,CONV=CHAR\n*\nQBACCNTL DS    0H\n         TM    UBRMFLAG,UBRCNTL    DID JOB SPECIFY A /*CNTL NAME?\n         BZ    QBACRC08            NO -- RETURN TO CALLER\n         LA    R5,UBRDNAME         POINT TO NAME FIELD\n         SLR   R3,R3               ZERO R3 FOR IC\n         IC    R3,UBRMFLAG         GET CNTL COUNTS AND FLAGS\n         SRL   R3,4                SHIFT OUT THE FLAG BITS\n         LTR   R3,R3               VERIFY WE HAVE AT LEAST ONE CNTL\n         BZ    QBACRC08            ZERO -- RETURN TO CALLER\n*\n        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT='CNTL=(',BRKOPT=YES,CONV=CHAR,           X\n               DEBLANK=NO\n         B     QBACCTSK            SKIP COMMA BEFORE FIRST NAME\n*\nQBACCTLP DS    0H\n        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\nQBACCTSK DS    0H\n         LA    R2,8                GET LENGTH OF OUR FIELD\n        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR\n        $SCAND SCWA=SCWA,TEXT='-',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n         LA    R2,1                GET LENGTH OF OUR FIELD\n         LA    R4,8(,R5)           GET ADDR OF SHARE TYPE\n        $SCAND SCWA=SCWA,TEXT=(R4),LENGTH=(R2),BRKOPT=NO,CONV=CHAR,    X\n               DEBLANK=NO\n*\n         LA    R5,UBRDNAML(,R5)    POINT TO NEXT NAME\n         BCT   R3,QBACCTLP         LOOP THROUGH ALL NAMES\n*\n        $SCAND SCWA=SCWA,TEXT=')',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n*\n*\nQBACRC08 DS    0H                  \"NORMAL\" RETURN FROM PRE-SCAN EXIT\n*\n         LA    R4,8                SET ALL DONE RETURN CODE\n*\nQBACRJQA DS    0H\n         $DOGJQE ACTION=(RETURN),  RETURN THE READ MODE JQA            X\n               CBADDR=(R7)\n*\nQBACRET  DS    0H\n         $RETURN RC=(R4)           RETURN TO CALLER\n*\n*\nQBACBDJQ DS    0H                  NO JQE AVAILABLE\n         LA    R1,QBACBDJM         GET ERROR MSG HEADER ADDRESS\n         $STORE R1                 SAVE ERROR MSG IN CURRENT SAVE AREA\n         LA    R4,4                SET ERROR MSG RETURN CODE\n         B     QBACRET             EXIT BUT DON'T RETURN THE JQA\n*\nQBACBDJM DC    CL2'99'             REASON CODE\n         DC    AL1(L'QBACBDJT)     MESSAGE LENGTH\nQBACBDJT DC    C'QBACDISP: JQE/JQA NOT AVAILABLE OR INVALID.'\n*\n*\nQBACBDBR DS    0H                  ERROR GETTING THE BERT\n         LA    R1,QBACBDBM         GET ERROR MSG HEADER ADDRESS\n         $STORE R1                 SAVE ERROR MSG IN CURRENT SAVE AREA\n         LA    R4,4                SET ERROR MSG RETURN CODE\n         B     QBACRJQA            GO RETURN THE JQA\n*\nQBACBDBM DC    CL2'99'             REASON CODE\n         DC    AL1(L'QBACBDBT)     MESSAGE LENGTH\nQBACBDBT DC    C'QBACDISP: ERROR RETURNED LOCATING STQNAME.'\n*\n         LTORG ,\n*\n         DROP  R6,R7,R8,R10,R11,R12,R13\n         TITLE 'USER TABLE MODULE -- EPILOG'\n         $MODEND ,\n         SPACE 2\n         END   ,                   END OF MODULE\n./ ADD NAME=LSES500J 0411-00234-05314-1426-00024-00018-00007-T0SM0\n//T0SM500J JOB  (4030,37),'REDO----LSES500',CLASS=X,MSGCLASS=A,\n//  REGION=6M,\n//    NOTIFY=&SYSUID\n//*\n//*%PDSDOC 00 SMP APPLY LSES500\n//S1       EXEC PGM=GIMSMP,REGION=5M,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI <== UPDATE TO YOUR CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=THIS.DATA.SET.NAME(LSES500) <==UPDATE\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT  S(LSES500) BYPASS(APPLYCHECK).\n  RESETRC .\n  RECEIVE S(LSES500) SOURCEID(MELLON) .\n  SET BDY(TARGET).                         <=== UPDATE TO YOUR TGT\n  APPLY   S(LSES500) REDO.\n//\n./ ADD NAME=LSES502  0203-00234-03317-2217-02583-02591-00005-T0SM1\n++USERMOD(LSES502)\n /* ***************************************************************\n    ** * USER EXIT 1 A                                         * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707) .\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STSCX01A),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STSCX01A)\n NAME STSCX01A(R)\n/*\n++SRC(STSCX01A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\n PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1,REUS=REFR) '\nSTSCX01A TITLE 'PRINT/PUNCH SEPARATOR EXIT -- PROLOG'          @430P270\n**********************************************************************\n** *  I DON'T THINK ANY PRINTER ACTUALLY USE THIS EXIT ANYMORE,   * **\n** * BUT SINCE WE USED TO ALTER THE HASPPRPR SEPERATOR PAGE       * **\n** * ROUTINES DIRECTLY, I AM ADDING THIS EXIT TO SIMULATE THE     * **\n** * SINGLE CHANGE WHICH IS TO CHANGE THE LITERAL OF THE ROOM     * **\n** * NUMBER TO BIN NUMBER.         SGM 08-08-00                   * **\n**********************************************************************\n* **PROPRIETARY-STATEMENT**********************************************\n*                                                                     *\n*   LICENSED MATERIALS-PROPERTY OF IBM                                *\n*   THIS MODULE IS \"RESTRICTED MATERIALS OF IBM\"                      *\n*   5645-001 (C) COPYRIGHT IBM CORP 1990, 1997                        *\n*                                                                     *\n*   STATUS = HJE6603                                                  *\n*                                                                     *\n*01* EXTERNAL CLASSIFICATION:  NONE                            @R01P003\n*01* END OF EXTERNAL CLASSIFICATION:                           @R01P003\n*                                                                     *\n* **END-OF-PROPRIETARY-STATEMENT***************************************\n***********************************************************************\n*                                                                     *\n* MODULE NAME = STSCX01A (STSCX01A LOAD MODULE)                       *\n*                                                                     *\n* DESCRIPTIVE NAME = EXIT 1                                           *\n*                                                                     *\n*                    PRINT/PUNCH Separator                            *\n*                                                                     *\n* FUNCTION =                                                          *\n*                                                                     *\n*        STSCX01A IS A SAMPLE EXIT ROUTINE THAT PRODUCES A            *\n*        job separator page ( see sample separator page               *\n*        below ).                                                     *\n*                                                                     *\n*        The separator page produced by this exit is                  *\n*        identical to the default separator page ( produced           *\n*        in HASPPRPU ) with the exception of the detail box           *\n*        information field labels.  This sample exit produces         *\n*        detail box information field labels that are delimited       *\n*        by an '=' sign as opposed to a ':' ( on the default          *\n*        separator page ).                                            *\n*                                                                     *\n*        An installation could use this sample exit to                *\n*        customize the appearance of a job separator page.            *\n*                                                                     *\n*        Exit 1 is called by HASPPRPU during print/punch              *\n*        processing.  It is called for job header and job             *\n*        trailer separators.                                          *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*             JJJJJJJJJJ  OOOOOOOOOOOO  BBBBBBBBBBB     00000000      *\n*            JJJJJJJJJJ  OOOOOOOOOOOO  BBBBBBBBBBBB   0000000000      *\n*               JJ      OO        OO  BB        BB  00      0000      *\n*              JJ      OO        OO  BB        BB  00     00 00       *\n*             JJ      OO        OO  BB       BB   00    00  00        *\n*            JJ      OO        OO  BBBBBBBBBB    00   00   00       1 *\n*           JJ      OO        OO  BBBBBBBBBB    00  00    00       11 *\n*          JJ      OO        OO  BB       BB   00 00     00       11  *\n*   JJ    JJ      OO        OO  BB        BB  0000      00       11   *\n*  JJ    JJ      OO        OO  BB        BB  000       00       11    *\n* JJJJJJJJ      OOOOOOOOOOOO  BBBBBBBBBBBB   0000000000    1111111111 *\n* JJJJJJ       OOOOOOOOOOOO  BBBBBBBBBBB     00000000     1111111111  *\n*                                                                     *\n*     JJJJJJJJJJ   000000000        1       1       1       1         *\n*     JJJJJJJJJJ  00000000000      11      11      11      11         *\n*         JJ      00      000     111     111     111     111         *\n*         JJ      00     0000    1111    1111    1111    1111         *\n*         JJ      00    00 00   11111   11111   11111   11111         *\n*         JJ      00   00  00      11      11      11      11         *\n*         JJ      00  00   00      11      11      11      11         *\n*         JJ      00 00    00      11      11      11      11         *\n*     JJ  JJ      0000     00      11      11      11      11         *\n*     JJ  JJ      000      00      11      11      11      11         *\n*     JJJJJJ      00000000000      11      11      11      11         *\n*     JJJJJJ       000000000       11      11      11      11         *\n*                                                                     *\n* ***START*****START*****START*****START*****START*****START****STA** *\n* *                                                                 * *\n* * JOBID=          J0111                        SEGMENT ID: 0021   * *\n* * JOB NAME=       JOB01                                           * *\n* * USER ID=        JSMITH                                          * *\n* * SYSOUT CLASS=   A                                               * *\n* * OUTPUT GROUP=   GRP01.CLASSA.D3289                              * *\n* * TITLE=          Smitty Corporation Checking Account History     * *\n* *                                                                 * *\n* * DESTINATION=    NEW YORK                                        * *\n* * NAME=           Joseph P. Smith                                 * *\n* * ROOM=           2G-54                                           * *\n* * BUILDING=       Smitty Textile Building                         * *\n* * DEPARTMENT=     Accounting                                      * *\n* * ADDRESS=        999 W. 99th Street                              * *\n* *                 New York, New York                              * *\n* *                 10000                                           * *\n* *                 212-555-3487                                    * *\n* *                                                                 * *\n* * PRINT TIME=     12:03:41                                        * *\n* * PRINT DATE=     10 JAN 1998                                @OW26885\n* * PRINTER NAME=   PRINTER1                                        * *\n* * SYSTEM=         SYSA                                            * *\n* *                                                                 * *\n* ***START*****START*****START*****START*****START*****START****STA** *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* NOTES =                                                             *\n*                                                                     *\n*    DEPENDENCIES = JES2 $EXIT Facility, Standard JES2 services,      *\n*                   SWBTUREQ services                                 *\n*                                                                     *\n*    RESTRICTIONS = This code is provided as an example of            *\n*                   installation extensions to JES2.  This code       *\n*                   is not considered TYPE 1 supported code of IBM.   *\n*                   Any problems encountered in the use of this       *\n*                   sample code is a user responsibility.  The        *\n*                   IBM support center does not support user          *\n*                   extensions of sample user exits.                  *\n*                                                                     *\n* MODULE TYPE = Procedure ( CSECT type )                              *\n*                                                                     *\n*    PROCESSOR = IBM High Level Assembler/MVS                  @520LHLA\n*                                                                     *\n*    MODULE SIZE = See $MODEND macro expansion at end of assembly     *\n*                                                                     *\n*    ATTRIBUTES = JES2 REENTRANT, RMODE ANY, AMODE 31                 *\n*                                                                     *\n*                                                                     *\n* ENTRY POINTS =                                                      *\n*                                                                     *\n*        EXIT01A   -  Produce our own separator page.  Suppress       *\n*                     the production of the default separator         *\n*                     page.                                           *\n*                                                                     *\n*                     Suppress the production of JESNEWS if this      *\n*                     exit has been called for a job-continuation     *\n*                     separator page.                                 *\n*                                                                     *\n* MACROS = JES2 - $CALL, $DEST, $ENTRY, $ESTAE, $GETWORK, $MODEND,    *\n*                 $MODULE, $PBLOCK, $PRPUT, $RETURN, $RETWORK, $SAVE, *\n*                 $SEPPDIR, $SETRP, $STORE                            *\n*                                                                     *\n* MACROS = MVS  - SWBTUREQ, TIME                                      *\n*                                                                     *\n* CHANGE ACTIVITY                                                     *\n*                                                                     *\n*        @410  MVS/SP-JES2 VERSION 4 RELEASE 1 LEVEL 0                *\n*              (SP4.1.0, HJE4410)                                     *\n*                                                                     *\n* $420P306=PTM      HJE4420 910118 R_W1: Sample Exit Prolog Problems  *\n*                                                                     *\n* $430P050=10X      HJE4430 920310 RJH:  ENHANCE STSCX01A(USER EXIT1) *\n* $430P329=10X      HJE4430 920429 B_R2: PMX0329: Sample Exit 1       *\n* $430P270=10X      HJE4430 920721 HGF:  $MODULE, ENVIRON, RMODE      *\n* $510P214=PTM      HJE5510 930810 KCK:  EXIT1 SEPPDIR/$DEST UPDATES  *\n*                                                                     *\n* $520LHLA=BASEQ    HJE5520 941008 GMD:  Change HASM to HLASM         *\n*                                                                     *\n* $R01P010=PTM      HJE6601 950217 JMO:  PTM PQJ0012                  *\n*                                                                     *\n* $R03P010=ENHPSO   HJE6603 960521 J_K2: Segment ID for trailer page  *\n*                                                                     *\n* A000000-999999    CREATED FOR JES2 4.1.0                         @410\n***********************************************************************\n         TITLE 'PRINT/PUNCH Separator Exit -- PROLOG ($HASPGBL)'\n         COPY  $HASPGBL\n         TITLE 'PRINT/PUNCH Separator Exit -- PROLOG ($MODULE)'\nSTSCX01A $MODULE ENVIRON=JES2,                                 @430P270C\n               RMODE=ANY,                                      @430P270C\n               IBMJES2=SAMPLE,                                 @430P270C\n               TITLE='PRINT/PUNCH Separator Exit',                     C\n               CVT,                Generate MVS CVT dsect              C\n               DOTUM,              IEFDOTUM-Dyn. OUTPUT text unit map'gC\n               JESCT,              Generate MVS IEFJESCT dsect         C\n               RPL,                MVS IFGRPL dsect (for $BUFFER)      C\n               SJOKY,              IEFSJOKY-Dynamic OUTPUT key mapping C\n               SJTRC,              IEFSJTRC-SWBTUREQ return/reason codeC\n               (SJTRP,GEN),        IEFSJTRP-SWBTUREQ RETRIEVE parm listC\n               $BUFFER,            Buffer mapping (for $JCT)           C\n               $CADDR,             Common storage address list         C\n               $DCT,               Device Control Table                C\n               $DSCT,              DSCT (for APPC Output)      @430P329C\n               $ERA,               Error Recovery Area                 C\n               $HASPEQU,           General EQUATES                     C\n               $HCCT,              Common storage control table        C\n               $HCT,               Private storage control table       C\n               $HFAME,             File alloacation map (for $HCCT)    C\n               $JCT,               Job Control Table                   C\n               $JCTX,              JOB CONTROL TABLE                   C\n               $JOE,               Job Output Element                  C\n               $MIT,               Module information table            C\n               $MITETBL,           MIT entry table                     C\n               $PADDR,             Private storage address list        C\n               $PARMLST,           Parameter list values/equates       C\n               $PCE,               Processor control element           C\n               $PDDB,              Peripheral data definition block    C\n               $PRE,               Processor Recovery Element          C\n               $PSV,               Processor save area                 C\n               $SCAT,              Sysout class attribute (for $HCCT)  C\n               $USERCBS,           User defined Control Blocks         C\n               $XECB,              Extended ECB (for $HCCT)            C\n               ($XPL,GEN)          Exit parameter list         @430P270\n         TITLE 'PRINT/PUNCH Separator Exit -- Entry Prolog'\n***********************************************************************\n*                                                                     *\n*        EXIT01A - Produce a separator page.   Suppress production    *\n*                   of the default separator page.                    *\n*                   Suppress JESNEWS for job-continuation calls.      *\n*                                                                     *\n* FUNCTION :                                                          *\n*                                                                     *\n*        Produces a separator page that is almost identical           *\n*        to the default separator page produced in HASPPRPU           *\n*        ( see beginning prolog for explanation of the                *\n*        difference between the default separator and that            *\n*        produced in this exit ).                                     *\n*                                                                     *\n*        During a job continuation separator page call, the exit      *\n*        response byte is set to indicate to HASPPRPU that JESNEWS    *\n*        should not be produced.                                      *\n*                                                                     *\n* LINKAGE :                                                           *\n*                                                                     *\n*        This routine is entered via a $EXIT call in HASPPRPU.        *\n*        Control is returned via a $RETURN.                           *\n*                                                                     *\n* OPERATION :                                                         *\n*                                                                     *\n*        LOADMOD(STSCX01A)                                     @420P306\n*        EXIT(1)  ROUTINES=(EXIT01A),STATUS=ENABLED            @420P306\n*                                                                     *\n*                                                                     *\n* ENVIRONMENT :                                                       *\n*                                                                     *\n*        JES2 main task                                               *\n*                                                                     *\n* RECOVERY :                                                          *\n*                                                                     *\n*        A $ESTAE recovery environment is establish on entry to       *\n*        the exit routine.  The recovery routine releases all         *\n*        storage obtained in the exit and then percolates to          *\n*        the next higher level of recovery in HASPPRPU.               *\n*                                                                     *\n*        Debugging text is put in field PRETRACK in the Processor     *\n*        Recovery Element (PRE).  The contents of this field          *\n*        are put in the SDWA VRA ( variable recording area ).         *\n*                                                                     *\n*        HASPPRPU establishes an ESTAE around the call to this        *\n*        exit.  In the event of a program check, control will         *\n*        be passed to the label PGMCKMSG in HASPPRPU when that        *\n*        level of recovery is invoked.                                *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* REGISTER USAGE (ENTRY/EXIT) :                                       *\n*                                                                     *\n*    REG         VALUE ON ENTRY              VALUE ON EXIT            *\n*                                                                     *\n*    R0          N/A                         unchanged                *\n*    R1          Parameter list address      unchanged                *\n*    R2-R10      N/A                         unchanged                *\n*    R11         HCT Address                 unchanged                *\n*    R12         N/A                         unchanged                *\n*    R13         PCE Address                 unchanged                *\n*    R14         Return address              unchanged                *\n*    R15         Entry address               Return code              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*            PARAMETER LIST FOR EXIT 1  ( Mapped by $XPL )            *\n*                                                                     *\n*                                                                     *\n*    LABEL         DESCRIPTION                                        *\n*    -----         -----------                                        *\n*                                                                     *\n*    XPLID         Eyecatcher ('$XPL')                                *\n*    XPLLEVEL      Maintenance Level                                  *\n*    XPLXITID      Exit ID number (1)                                 *\n*    XPLEXLEV      Version number                                     *\n*    X001IND       Indicator byte                              @R01P010\n*    X001COND      Condition byte                              @R01P010\n*    X001RESP      Response byte                               @R01P010\n*    XPLSIZE       Length of parameter list including base section    *\n*                                                                     *\n*    X001DCT       DCT address                                        *\n*    X001JCT       JCT address                                        *\n*    X001JQE       JQE address                                        *\n*    X001WJOE      Work-JOE address                                   *\n*    X001CJOE      Characteristics-JOE address                        *\n*    X001PDDB      Address of first PDDB of JOE, or zero              *\n*    X001SWBT      SWBTU pointer list address for the first           *\n*                  PDDB in the JOE, or zero                           *\n*    X001NSWB      Number of SWBITs despooled                         *\n*    X001RSVD      Reserved for future use                            *\n*    X001HBUF      Address of HASP buffer for exit use                *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* REGISTER USAGE (INTERNAL) :                                         *\n*                                                                     *\n*    REG        VALUE                                                 *\n*                                                                     *\n*    R0         N/A                                                   *\n*    R1         Work register                                         *\n*    R2-R4      N/A                                                   *\n*    R5         Exit 1 work area address                              *\n*    R6         N/A                                                   *\n*    R7         Exit 1 parameter list address                         *\n*    R8         N/A                                                   *\n*    R9-R10     N/A                                                   *\n*    R11        HCT address                                           *\n*    R12        Local base address                                    *\n*    R13        PCE address                                           *\n*    R14-R15    Link/Work registers                                   *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* DATA AREA USAGE (INTERNAL) :                                        *\n*                                                                     *\n*    NAME          VALUE/DESCRIPTION                                  *\n*    ----          -----------------                                  *\n*                                                                     *\n*    EX1WORK       Exit 1 work area                                   *\n*    SEPDSECT      Separator page detail box DSECT                    *\n*    PAGELINE      Separator page output line                         *\n*                                                                     *\n*    X001IND       Indicator byte in XPL (exit parameter list) @R01P010\n*      X001JHDR       Indicator in X001IND for a job header    @R01P010\n*                     separator call                                  *\n*      X001JTLR       Indicator in X001IND for a job trailer   @R01P010\n*                     separator call                                  *\n*      X001JCNT       Indicator in X001IND for a               @R01P010\n*                     job-continuation separator call          @R01P010\n*    X001RESP       Response byte in XPL                       @R01P010\n*      X001DFSP       Indicator in X001RESP to suppress        @R01P010\n*                     production of the default separator page @R01P010\n*      X001JNWS       Indicator in X001RESP to suppress        @R01P010\n*                     production of JESNEWS                    @R01P010\n*                                                                     *\n*    $BUFFER       HASP buffer DSECT                                  *\n*      BUFDSECT       Start of buffer prefix area                     *\n*      BUFSTART       Start of buffer work area                       *\n*    $SID          System id                                          *\n*    DCTDEVN       Device name                                        *\n*    JCTJNAME      Job name from job card                             *\n*    JCTJOBID      System assigned job id                             *\n*    JCTPNAME      Programmer name from JOB card                      *\n*    JCTROOMN      Room, from JOB card                                *\n*    JOECRUID      Creator userid for data set                        *\n*    JOECURCL      JOE current SYSOUT class                           *\n*    JOENAME       JOE's output group name                            *\n*    JOEROUT       Route code                                         *\n*    JOEUSER       User id                                            *\n*                                                                     *\n*    DOADDRES      Dynamic output ADDRESS    key                      *\n*    DOBUILD       Dynamic output BUILDING   key                      *\n*    DODEPT        Dynamic output DEPARTMENT key                      *\n*    DONAME        Dynamic output NAME       key                      *\n*    DOROOM        Dynamic output ROOM       key                      *\n*    DOTITLE       Dynamic output TITLE      key                      *\n*                                                                     *\n*    DOCNUNIT      Text unit  ( TU ) mapping                          *\n*    DOCNTFLD      TU length/parameter pairs mapping                  *\n*    SJTRP         SWBTUREQ RETRIEVE parameter list                   *\n*                                                                     *\n*    PCEUSER0      Address of storage obtained for exit work area     *\n*    PCEUSER1      Count of number of times that 2nd level recovery   *\n*                  has been entered                                   *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* RETURN CODES ( R15 ON EXIT ):                                       *\n*                                                                     *\n*        0 - Continue normal processing                               *\n*                                                                     *\n*                                                                     *\n* OTHER CONSIDERATIONS :                                              *\n*                                                                     *\n*        $WAIT can occur.                                             *\n*                                                                     *\n***********************************************************************\n         TITLE 'PRINT/PUNCH Separator Exit -- Entry'\n***********************************************************************\n*                                                                     *\n*        Entry point to routine EXIT01A.                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEXIT01A  $ENTRY BASE=R12           ESTABLISH ENTRY POINT\n         SPACE 2\n        $SAVE  TRACE=YES,NAME=EXIT01A      Save callers registers\n         SPACE 2\n         LR    R12,R15             Set local base\n         SPACE 1\n         LR    R7,R1               Establish addressability\n         USING XPL,R7                  to exit parameter list\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Establish an ESTAE recovery environment                      *\n*                                                                     *\n*        Put debugging data in Processor Recovery Element ( PRE )     *\n*        - maximum 32 characters                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n        $ESTAE RECADDR==A(EX1RECV),NAME=STSCX01A,RETRY=RELWORKA,       C\n               BASE=(R12)          Establish ESTAE environment\n         SPACE 2\n         L     R14,PCEPRE          Get PRE address from PCE\n         USING PRE,R14             Establish addressability\n         SPACE 1\n         MVC   PRETRACK(L'DEBUGMSG),DEBUGMSG     Put debug data in PRE\n         SPACE 1\n         MVI   PRELOGLN,L'DEBUGMSG     Put length of debug data in PRE\n         SPACE 2\n         DROP  R14                 Drop PRE addressability\n         TITLE 'PRINT/PUNCH Separator Exit -- Main Routine'\n*------------------------------------------------------------* @430P050\n*                                                            * @430P050\n*        If the SEP= parameter on the printer initial-       * @430P050\n*        ization statement is currently set to NO, or the    * @430P050\n*        suppress flag has been set by previous code,        * @430P050\n*        do not build a separator page.                      * @430P050\n*                                                            * @430P050\n*------------------------------------------------------------* @430P050\n         SPACE 2                                               @430P050\n         TM    X001RESP,X001DFSP   Suppress Separators?        @R01P010\n         BO    ENDMAIN             Yes, exit                   @430P050\n         SPACE 2                                               @430P050\n*---------------------------------------------------------------------*\n*                                                                     *\n*        If this is a job continuation call, set the exit             *\n*        response byte to indicate that the production of             *\n*        JESNEWS should be suppressed.                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         TM    X001IND,X001JCNT    Job continuation call?      @R01P010\n         BZ    NOTJCNT               No, go build the separator page\n         SPACE 1\n         OI    X001RESP,X001JNWS   Suppress JESNEWS            @R01P010\n         SPACE 2\nNOTJCNT  DS    0H                  Fall thru to build separator page\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Storage must be obtained for a work area to be used          *\n*        by the routine PRODSEP that produces the separator           *\n*        page.                                                        *\n*        The exit work area dsect ( EX1WORK ) is mapped over          *\n*        this storage to store and extract the data used in the       *\n*        PRODSEP routine.                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Check if we have already obtained storage for the            *\n*        exit work area ( as may be the case during a RETRY           *\n*        after a program check in the exit ).  If so, reuse           *\n*        it.  Otherwise issue a $GETWORK to get storage.  Save        *\n*        the address in PCEUSER0.                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         ICM   R1,B'1111',PCEUSER0     Check if already got storage\n         BZ    GETEX1W                   No storage, so go get some\n         XC    PCEUSER0,PCEUSER0       Clear PCEUSER0 field\n         SPACE 1\n         CLC   0(4,R1),=C'EX1W'    Is this our work area storage ?\n         BNE   GETEX1W               No, go get storage\n         B     GOTEX1W               Yes, branch around GETWORK\n         SPACE 2\nGETEX1W  DS    0H                  Get storage for work area\n         SPACE 1\n         LA    R1,(((EX1WKLEN+3)/4)+1)   Get the length of the EX1WORK C\n                                           DSECT + eyecatcher in words\n         SPACE 1\n        $GETWORK WORDS=(R1),USE=EX1W,ERRET=RELWORKA  Get storage for   C\n                                               exit work area (EX1WORK)\n         SPACE 1\nGOTEX1W  DS    0H                  Got storage\n         EJECT\n         ST    R1,PCEUSER0         Save address in PCE user field\n         LA    R5,4(,R1)           Add 4 for eyecatcher and save addr\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Call the PRODSEP routine to build and print a separator      *\n*        page.  Suppress production of the default separator page     *\n*        only if PRODSEP returns a return code of zero.               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n        $CALL  PRODSEP             Call routine to produce separator\n         SPACE 2\n         LTR   R15,R15             Check return code from PRODSEP\n         BNZ   RELWORKA            Bypass suppressing def. separator\n         SPACE 1\n         OI    X001RESP,X001DFSP   Suppress def separator      @R01P010\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Release exit work area storage                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\nRELWORKA DS    0H                      Release work area storage\n         SPACE 1\n         ICM   R1,B'1111',PCEUSER0     Load work area address\n         BZ    ENDMAIN                 Return to caller if no storage\n         XC    PCEUSER0,PCEUSER0       Clear PCEUSER0 field\n         SPACE 1\n         CLC   0(4,R1),=C'EX1W'    Is this storage ours?\n         BNE   ENDMAIN               No, branch around RETWORK\n         SPACE 1\n        $RETWORK (R1)              Release work area storage\n         SPACE 2\nENDMAIN  DS    0H                  End of routine EXIT01A\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Cancel $ESTAE recovery environment                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n        $ESTAE CANCEL              Cancel ESTAE environment\n         TITLE 'PRINT/PUNCH Separator Exit -- Return'\n***********************************************************************\n*                                                                     *\n*        Return to the caller.                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n        $RETURN RC=0               Return to caller with RC=0\n         SPACE 2\nDEBUGMSG DC    C'ESTAE SET UP IN SAMPLE EXIT 1'    Debugging text\n         SPACE 2\n         LTORG ,                   Define literal origin\n         SPACE 1\n         DROP  R7,R12              Drop addressabilities\n         TITLE 'PRODSEP  -- Produce a separator page detail box'\n***********************************************************************\n*                                                                     *\n*        PRODSEP  - Produce a separator page detail box.              *\n*                                                                     *\n* FUNCTION :                                                          *\n*                                                                     *\n*        This subroutine produces a separator page detail box         *\n*        that is identical to that on the default separator           *\n*        page produced by HASPPRPU during print/punch processing.     *\n*                                                                     *\n*        The SWBTUREQ retrieve service is used to extract             *\n*        requested values from an OUTPUT statement and return         *\n*        them in a contiguous string.  The service is passed a        *\n*        list of keys that identify the keywords ( TITLE, NAME,       *\n*        ROOM, BUILDING, DEPARTMENT and ADDRESS ) whose values        *\n*        are to be extracted.                                         *\n*                                                                     *\n*        Each value in the string is represented in text unit (TU)    *\n*        format, which means that it is preceded by its key and       *\n*        length.                                                      *\n*                                                                     *\n* LINKAGE :                                                           *\n*                                                                     *\n*      Accessed via $CALL                                             *\n*      Returned via $RETURN                                           *\n*                                                                     *\n*                                                                     *\n* REGISTER USAGE (ENTRY/EXIT) :                                       *\n*                                                                     *\n*    REG         VALUE ON ENTRY              VALUE ON EXIT            *\n*                                                                     *\n*    R0-R4       N/A                         unchanged                *\n*    R5          Exit 1 work area address    unchanged                *\n*    R6          N/A                         unchanged                *\n*    R7          Parameter list address      unchanged                *\n*    R8-R10      N/A                         unchanged                *\n*    R11         HCT Address                 unchanged                *\n*    R12         Local base address          unchanged                *\n*    R13         PCE Address                 unchanged                *\n*    R14         Return address              unchanged                *\n*    R15         Entry address               Return code (see below)  *\n*                                                                     *\n*                                                                     *\n* RETURN CODE ( R15 ON EXIT ):                                        *\n*                                                                     *\n*        0 - Processing successful;  Separator page produced          *\n*                                                                     *\n*        4 - Processing unsucccessful;  Separator page not produced   *\n*                                                                     *\n*                                                                     *\n* OTHER CONSIDERATIONS :                                              *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING PRODSEP,R12         Establish routine addressability\n         USING XPL,R7              Establish XPL addressability\n         USING EX1WORK,R5          Establish work area addressability\n         EJECT\n         SPACE 2\nPRODSEP $SAVE  ,                   Save the caller's registers\n         SPACE 3\n         LR    R12,R15             Set local base\n         SPACE 1\n         CLC   X001SWBT,$ZEROS     Are there any SWBIT's ?\n         BE    REQOK               No, branch around SWBTUREQ RETRIEVE C\n                                            service call\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Storage must be obtained for the SWBTUREQ RETRIEVE           *\n*        service to provide an area to return the retrieved           *\n*        TUs and an area to set up a Key List in.  Pointers           *\n*        to the TUs requested by the specific keys will be            *\n*        returned by the service to the Key List area if they         *\n*        exist.  Working storage for SWBTUREQ service is also         *\n*        obtained.                                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n*---------------------------------------------------------------------*\n*        Get storage for output TU area                               *\n*---------------------------------------------------------------------*\n         SPACE 1\n         ICM   R1,B'1111',EX1TUADR     Check if already got storage\n         BZ    GETOTUA                   No storage, so go get some\n         XC    EX1TUADR,EX1TUADR       Clear out save area\n         SPACE 1\n         CLC   0(4,R1),=C'OTUA'    Is this storage ours?\n         BNE   GETOTUA               No, go get storage\n         B     GOTOTUA               Yes, branch around GETWORK\n         SPACE 2\nGETOTUA  DS    0H                  Get storage for work area\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Of the 6 TU's that we are interested in, 5 have a single     *\n*        parameter ( TITLE, ROOM, NAME, DEPT, BUILDING ), whereas     *\n*        ADDRESS has up to 4 parameters.                              *\n*                                                                     *\n*        The total output TU area required is ...                     *\n*                                                                     *\n*        5*(size of one-parameter TU) + (size of four-parameter TU)   *\n*        |                               |                            *\n*        |                               |                            *\n*        |                               +--> for ADDRESS             *\n*        |                                                            *\n*        +--> for  TITLE, ROOM, NAME, DEPT and BUILDING               *\n*                                                                     *\n*                                                                     *\n*        where a TU mapping is defined as follows:                    *\n*                                                                     *\n*        TU key                              .....   2 bytes          *\n*        Number of length/parameter pairs    .....   2 bytes          *\n*  +-- { Length of first (or only) parameter .....   2 bytes          *\n*  |   { First (or only) parameter           .....  60 bytes ( max )  *\n*  |              .                                                   *\n*  |              .                                                   *\n*  |              .                                                   *\n*  +----> (repeated for multiple parameter TU)                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         LA    R1,((5*(2+2+2+60))+(2+2+4*(2+60)))                      C\n                                   Size of current TU area\n         STH   R1,EX1TUSZ          Save the size\n         LA    R1,3(,R1)           Convert size from\n         SRL   R1,2                  bytes to words\n         LA    R1,1(,R1)           Add 1 for the eyecatcher\n         SPACE 1\n        $GETWORK WORDS=(R1),USE=OTUA,ERRET=NOSEPRT    Get storage for  C\n                                                   the TU output area\n         SPACE 1\nGOTOTUA  DS    0H                  Got storage\n         SPACE 1\n         LA    R1,4(,R1)           Add 4 for eyecatcher\n         ST    R1,EX1TUADR         Save the address of the TU output   C\n                                     area\n         EJECT\n*---------------------------------------------------------------------*\n*    Get storage for Key / TU pointer list                            *\n*---------------------------------------------------------------------*\n         SPACE 1\n         ICM   R1,B'1111',EX1KYLST     Check if already got storage\n         BZ    GETKEYL                   No storage, so go get some\n         XC    EX1KYLST,EX1KYLST       Clear out save area\n         SPACE 1\n         CLC   0(4,R1),=C'KEYL'    Is this storage ours?\n         BNE   GETKEYL               No, go get storage\n         B     GOTKEYL               Yes, branch around GETWORK\n         SPACE 2\nGETKEYL  DS    0H                  Get storage for work area\n         SPACE 1\n         LA    R1,(((6*SJTRKLEN)+3)/4+1)   Size of Key/TU ptr list in  C\n                                                 words\n         SPACE 1\n        $GETWORK WORDS=(R1),USE=KEYL,ERRET=NOSEPRT    Get storage for  C\n                                                    the Key / TU list\n         SPACE 1\nGOTKEYL  DS    0H                  Got storage\n         SPACE 1\n         LA    R1,4(,R1)           Add 4 for eyecatcher\n         ST    R1,EX1KYLST         Save the address of the Key / TU    C\n                                     List\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Insert each delivery/identification OUTPUT JCL               *\n*        parameter key, in the keys list.                             *\n*        If any of these parameters were specified by the             *\n*        user, a pointer to the appropriate TU ( text unit )          *\n*        will be returned by the SWBTUREQ RETIREVE service.           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         USING SJTRKEYL,R4         Establish\n         L     R4,EX1KYLST             addressability\n         SPACE 1\n         MVC   SJTRKYID+KYLSTTL,=Y(DOTITLE)       Title Key\n         MVC   SJTRKYID+KYLSTNM,=Y(DONAME)        Name Key\n         MVC   SJTRKYID+KYLSTRM,=Y(DOROOM)        Room Key\n         MVC   SJTRKYID+KYLSTBL,=Y(DOBUILD)       Building Key\n         MVC   SJTRKYID+KYLSTDP,=Y(DODEPT)        Dept key\n         MVC   SJTRKYID+KYLSTAD,=Y(DOADDRES)      Address Key\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Initialize the SWBTUREQ REQUEST=RETRIEVE parameter           *\n*        list. Set storage length to 0 - we dont know exactly how     *\n*        much storage we need for the SWBTUREQ Service Work Area.     *\n*        The service will return the Required Size which we will      *\n*        then obtain via $GETWORK (in MORESTOR routine).              *\n*---------------------------------------------------------------------*\n         SPACE 1\n         USING SJTRP,R3            Establish addressability\n         SPACE 1\n         LA    R3,EX1RETPL         Get the address of the              C\n                                     RETRIEVE parameter list\n         SPACE 1\n         XC    SJTRP(SJTRLGTH),SJTRP        Clear the parameter list\n         MVC   SJTRID,=A(SJTRCID)  Parameter list ID\n         MVI   SJTRVERS,SJTRCVER   Parameter list version\n         LA    R1,SJTRLGTH         Parameter\n         STH   R1,SJTRLEN            list length\n         MVC   SJTRSTOR,$ZEROS     Zero storage address        @430P329\n         MVC   SJTRSTSZ,$ZEROS     Zero storage length         @430P329\n         MVC   SJTRSWBN,X001NSWB   Number of pointers in SWBTU list\n         MVC   SJTRSWBA,X001SWBT   Address of SWBTU pointer list\n         MVC   SJTRAREA,EX1TUADR   Address of the output area          C\n                                     for contiguous text units\n         MVC   SJTRSIZE,EX1TUSZ    Size of output area for TUs\n         MVC   SJTRKIDN,$H6        Number of keys in the Key/TU        C\n                                     Pointer list\n         MVC   SJTRKIDL,EX1KYLST   Address of Key List\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Issue the SWBTUREQ REQUEST=RETRIEVE macro                    *\n*        ------------------------------------------                   *\n*                                                                     *\n*        The service returns with a zero return code if               *\n*        processing was successful.                                   *\n*                                                                     *\n*        If the current working storage size ( SJTRSTSZ ) is          *\n*        less than the required size for the service, then            *\n*        the service returns the following values:                    *\n*               R15        =  4 (SJTRCSIZ)                            *\n*               SJTRREAS   =  4 (SJTRWSZR)                            *\n*               SJTRWKSZ   =  amount of working storage required      *\n*                             for the SWBTUREQ REQUEST=RETRIEVE       *\n*                             service.                                *\n*                                                                     *\n*        If none of the requested items were found, then the          *\n*        service returns the following values:                        *\n*               R15        =  4 (SJTRCSIZ)                            *\n*               SJTRREAS   =  100 (SJTRNOKY)                          *\n*                                                                     *\n*        If R15 > 4, then an error occurred in the service.           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nRETRYREQ DS    0H\n         ST    R3,EX1PLPTR         Pass SWBTUREQ RETRIEVE parm list\n         LA    R1,EX1PLPTR           address by indirect addressing\n         SPACE 2\n         SWBTUREQ REQUEST=RETRIEVE  Issue the SJF macro\n         SPACE 2\n         STH   R15,EX1SWBRC        Save the return code\n         SPACE 1\n         CLC   EX1SWBRC,$H4             Check return code\n         BL    REQOK               Service successful, produce sep.\n         BH    NOSEPRT             Error, don't produce separator\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        If working storage is too small, call MORESTOR to            *\n*        release the current storage ( if any ), get storage          *\n*        for the amount that is required, and issue the               *\n*        service call again.                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         CLC   SJTRREAS,=A(SJTRWSZR)    Working storage too small?\n         BNE   CHECKEYS                 No, check if no keys matched\n         LH    R4,SJTRSTSZ         Current storage size\n         L     R1,SJTRSTOR         Current storage address\n         LH    R2,SJTRWKSZ         Required storage size\n         SPACE 1\n        $CALL  MORESTOR            Obtain required storage\n         SPACE 1\n         LTR   R15,R15             Check return code from MORESTOR\n         BNZ   NOSEPRT             If non-zero don't produce separator\n         SPACE 1\n         LA    R1,4(,R1)           Add 4 for eyecatcher\n         ST    R1,EX1SRWA          Save working storage address in     C\n                                       exit work area (EX1WORK)\n         MVC   EX1SRWL,SJTRWKSZ    Set the length in EX1WORK\n         MVC   SJTRSTOR,EX1SRWA    Reset WS addr in parm list\n         MVC   SJTRSTSZ,EX1SRWL    Reset WS size in parm list\n         B     RETRYREQ            Branch to issue macro again\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Check if reason for RC=4 from SWBTUREQ service is that       *\n*        none of the requested values were found.                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\nCHECKEYS CLC   SJTRREAS,=A(SJTRNOKY)   Did any keys match?\n         BE    REQOK                     No, produce separator anyway\n         B     NOSEPRT                 Go set error return code\n         SPACE 2\nREQOK    DS    0H\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Call PRINTBLK routine to print the block letters on the      *\n*        separator page.                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n        $CALL  PRINTBLK            Call routine to print block letters\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Call BUILDBOX routine to build and print the detail          *\n*        box on the separator page.                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n        $CALL  BUILDBOX            Call routine to build detail box\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to the caller.                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         SLR   R6,R6               Set return code = 0         @430P329\n         B     GOBACK              Branch to return to caller\n         SPACE 2\nNOSEPRT  LA    R6,4                Set return code = 4         @430P329\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        The TU output area, the Keylist/Pointer area and the         *\n*        working storage area for the SWBTUREQ service are no         *\n*        longer needed so their respective work areas are             *\n*        returned.                                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2                                               @430P329\n*---------------------------------------------------------------------*\n*        Release TU output area storage                               *\n*---------------------------------------------------------------------*\n         SPACE 1                                               @430P329\nGOBACK   ICM   R1,B'1111',EX1TUADR  Load TU output area addr   @430P329\n         BZ    CHKYLST             Branch if no TU storage     @430P329\n         S     R1,$F4              Subtract 4 for eyecatcher   @430P329\n         SPACE 1                                               @430P329\n         XC    EX1TUADR,EX1TUADR   Set address to zero         @430P329\n         SPACE 1                                               @430P329\n        $RETWORK (R1)              Release the TU storage      @430P329\n         SPACE 2                                               @430P329\n*---------------------------------------------------------------------*\n*        Release Key/TU pointer list storage area                     *\n*---------------------------------------------------------------------*\n         SPACE 1                                               @430P329\nCHKYLST  ICM   R1,B'1111',EX1KYLST  Load Key/TU ptr list addr  @430P329\n         BZ    CHKSRWA             Branch if no Key/TU storage @430P329\n         S     R1,$F4              Subtract 4 for eyecatcher   @430P329\n         SPACE 1                                               @430P329\n         XC    EX1KYLST,EX1KYLST   Set address to zero         @430P329\n         SPACE 1                                               @430P329\n        $RETWORK (R1)              Release the keylist storage @430P329\n         SPACE 2                                               @430P329\n*---------------------------------------------------------------------*\n*        Release SWBTUREQ RETRIEVE service work area storage          *\n*---------------------------------------------------------------------*\n         SPACE 1                                               @430P329\nCHKSRWA  ICM   R1,B'1111',EX1SRWA  Load service work area addr @430P329\n         BZ    ENDSEP              Branch if no work storage   @430P329\n         S     R1,$F4              Subtract 4 for eyecatcher   @430P329\n         SPACE 1                                               @430P329\n         XC    EX1SRWA,EX1SRWA     Set address to zero         @430P329\n         SPACE 1                                               @430P329\n        $RETWORK (R1)              Release the working storage @430P329\n         SPACE 1                                               @430P329\nENDSEP  $RETURN RC=(R6)            Return to the caller        @430P329\n         SPACE 2\n         LTORG ,                   DEFINE LITERAL ORIGIN\n         SPACE 1\n         DROP  R3,R4,R5,R7,R12     Drop register addressabilities\n         TITLE 'MORESTOR -- Get more working storage for SWBTUREQ RETRIC\n               EVE service'\n***********************************************************************\n*                                                                     *\n*        MORESTOR - Get more working storage for the SWBTUREQ         *\n*                   RETRIEVE service.                                 *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This subroutine is called to release the current SWBTUREQ    *\n*        working storage and obtain the amount required by the        *\n*        SWBTUREQ RETRIEVE service.                                   *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*      Accessed via $CALL                                             *\n*      Returned via $RETURN                                           *\n*                                                                     *\n*                                                                     *\n*   REGISTER USAGE (ENTRY/EXIT):                                      *\n*                                                                     *\n*        REG          VALUE ON ENTRY            VALUE ON EXIT         *\n*                                                                     *\n*        R0           N/A                       unchanged             *\n*        R1           Current working           new working           *\n*                       storage address           storage address     *\n*        R2           Required working          unchanged             *\n*                       storage size                                  *\n*        R3           N/A                       unchanged             *\n*        R4           Current working           unchanged             *\n*                       storage size                                  *\n*        R5-R13       N/A                       unchanged             *\n*        R14          Return address            unchanged             *\n*        R15          Entry address             Return code           *\n*                                                                     *\n*                                                                     *\n*   RETURN CODE ( R15 ON EXIT ):                                      *\n*                                                                     *\n*        0 - Processing successful; More storage obtained             *\n*                                                                     *\n*        4 - Processing unsucccessful                                 *\n*                                                                     *\n*   OTHER CONSIDERATIONS :                                            *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING MORESTOR,R12        Establish addressability\n         EJECT\nMORESTOR $SAVE ,                   Save the caller's registers\n         SPACE 1\n         LR    R12,R15             Set local base\n         SPACE 1\n         LTR   R4,R4               Is the current working storage      C\n                                     size equal to zero ?\n         BZ    GETSTOR                 No, skip the retwork\n         LTR   R1,R1               Is the current working storage      C\n                                     addr equal to zero?\n         BZ    GETSTOR                 No, skip the retwork\n         S     R1,$F4              Subtract 4 for the eyecatcher\n         SPACE 1\n        $RETWORK (R1)              Release the current working storage\n         SPACE 1\nGETSTOR  DS    0H\n         LA    R2,3(,R2)           Convert the size in bytes\n         SRL   R2,2                   into the size in words\n         LA    R2,1(,R2)           Add 1 for the eyecatcher\n         SPACE 1\n        $GETWORK WORDS=(R2),USE=SRWA,ERRET=NOMOREST    Get required    C\n                                                     working storage\n         SPACE 2\n        $STORE R1                  Pass the new working storage        C\n                                     address back to the caller\n         LA    R15,0               Set return code = 0\n         SPACE 2\n         B     ENDMORE             Go return to caller\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to the caller.                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nNOMOREST LA    R15,4               Set return code = 4\n         B     ENDMORE             Go return to caller\n         SPACE 2\nENDMORE $RETURN RC=(R15)           Return to the caller\n         SPACE 1\n         LTORG ,                   Define literal origin\n         SPACE 1\n         DROP  R12                 Drop local base register\n         TITLE 'PRINTBLK -- Print the separator page block letters'\n***********************************************************************\n*                                                                     *\n*        PRINTBLK - Print the job name and job id in block            *\n*                   letters on the separator page.                    *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This routine is called to print the job name and job         *\n*        id in block letters on the separator page.                   *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via $CALL                                           *\n*        Returned via $RETURN                                         *\n*                                                                     *\n*                                                                     *\n*   REGISTER USAGE (ENTRY/EXIT):                                      *\n*                                                                     *\n*        REG          VALUE ON ENTRY            VALUE ON EXIT         *\n*                                                                     *\n*        R0-R4        N/A                         Unchanged           *\n*        R5           EX1WORK address             Unchanged           *\n*        R6           N/A                         Unchanged           *\n*        R7           Exit 1 parm list addr       Unchanged           *\n*        R8-R10       N/A                         Unchanged           *\n*        R11          HCT address                 Unchanged           *\n*        R12          Local base address          Unchanged           *\n*        R13          PCE address                 Unchanged           *\n*        R14          Return address              Unchanged           *\n*        R15          Entry address               Unchanged           *\n*                                                                     *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING PRINTBLK,R12        Establish local addressability\n         USING XPL,R7              Establish parm list addressability\n         USING JCT,R10             Establish JCT addressability\n         EJECT\nPRINTBLK $SAVE ,                   Save the caller's registers\n         SPACE 2\n         LR    R12,R15             Set local base\n         L     R10,X001JCT         Load JCT address\n         SPACE 1                                               @430P329\n         L     R3,X001DSCT         Load DSCT Address           @430P329\n         SPACE 1                                               @430P329\n         USING DSCT,R3             Establish Addressability    @430P329\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Print the job name in block letters ( slanted ).             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         LTR   R3,R3               Is the DSCT Valid?          @430P329\n         BZ    NOTDSCT1            No, use JCT Jobname         @430P329\n         LA    R0,DSJBN            Address of TP Job Name      @430P329\n         B     YESDSCT1                                        @430P329\n         SPACE 1                                               @430P329\nNOTDSCT1 LA    R0,JCTJNAME         Get address of jobname      @430P329\n         SPACE 1                                               @430P329\nYESDSCT1 L     R1,X001HBUF         Get buffer address          @430P329\n         SPACE 1                                               @510P214\n        $SEPPDIR (R1)         Send a PDIR in case a SNA REMOTE @510P214\n         SPACE 2\n        $PBLOCK DATA=(R0),BUFFER=(R1),SLANT=YES     Call routine to    C\n                                                  print block letters\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Print a blank line                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         L     R4,X001HBUF         Load buffer address\n         USING SEPDSECT,R4         Establish buffer addressability\n         SPACE 1\n         LA    R4,BUFSTART-BFPDSECT(,R4)     Get address of work space C\n                                                in buffer\n         SPACE 1\n         MVI   PAGELINE,C' '                 Put a blank in buffer\n         LA    R0,1                          Set length to 1\n         SPACE 2\n        $PRPUT DATA=(R4),LEN=(R0),WAIT=YES   Print a blank line\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Print the job id in block letters ( without slant ).         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         LTR   R3,R3               Is the DSCT Valid?          @430P329\n         BZ    NOTDSCT2            No, use JCT JOBID           @430P329\n         LA    R0,DSWKID            Address of TP Work ID      @430P329\n         B     YESDSCT2                                        @430P329\n         SPACE 1                                               @430P329\nNOTDSCT2 LA    R0,JCTJOBID         Get address of Job ID       @430P329\n         SPACE 1                                               @430P329\nYESDSCT2 L     R1,X001HBUF         Get buffer address          @430P329\n         SPACE 2\n        $PBLOCK DATA=(R0),BUFFER=(R1)      Call routine to print       C\n                                                 block letters\n         SPACE 2\n         DROP  R3                  Drop DSCT                   @430P329\n         SPACE 1                                               @430P329\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Print a blank line                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         L     R4,X001HBUF         Load buffer address\n         LA    R4,BUFSTART-BFPDSECT(,R4)     Get address of work space C\n                                                in buffer\n         SPACE 1\n         MVI   PAGELINE,C' '                 Put a blank in buffer\n         LA    R0,1                          Set length to 1\n         SPACE 2\n        $PRPUT DATA=(R4),LEN=(R0),WAIT=YES   Print a blank line\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to the caller.                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n        $RETURN ,                  Return to the caller\n         SPACE 1\n         LTORG ,                   Define literal origin\n         SPACE 1\n         DROP  R4,R7,R10,R12       Drop addressabilities\n         TITLE 'BUILDBOX -- Build and print each line of the separator C\n               page detail box'\n***********************************************************************\n*                                                                     *\n*        BUILDBOX - Build and print each line of the separator        *\n*                   page detail box.                                  *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This sub-routine is called to build and print each           *\n*        line of the separator page detail box.                       *\n*                                                                     *\n*        Addressability to the HASP buffer work space offset          *\n*        is established and the routine CLRLINE is called to          *\n*        clear the separator page line buffer.                        *\n*                                                                     *\n*        The routine PUTFRAME is then called to set up the            *\n*        detail box frame in the top line and the macro $PRPUT        *\n*        is invoked to print it.                                      *\n*                                                                     *\n*        CLRLINE is called to clear the next line and reset           *\n*        the buffer work space pointer.  The detail box               *\n*        information is then inserted in the line buffer and          *\n*        $PRPUT is invoked to print this line.  This process          *\n*        is repeated for all subsequent lines of the detail           *\n*        box.                                                         *\n*                                                                     *\n*        PUTFRAME is called to set up the detail box frame in         *\n*        the bottom line and $PRPUT is called to print it.            *\n*                                                                     *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via $CALL                                           *\n*        Returned via $RETURN                                         *\n*                                                                     *\n*        INPUT:                                                       *\n*                R7           -  Address of Exit 1 parameter list     *\n*                SEPDSECT     -  Separator page line/box DSECT        *\n*        OUTPUT:                                                      *\n*                The separator page detail box is produced.           *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*   REGISTER USAGE (ENTRY/EXIT):                                      *\n*                                                                     *\n*        REG          VALUE ON ENTRY            VALUE ON EXIT         *\n*                                                                     *\n*        R0-R4        N/A                         Unchanged           *\n*        R5           EX1WORK address             Unchanged           *\n*        R6           N/A                         Unchanged           *\n*        R7           Exit 1 parm list addr       Unchanged           *\n*        R8-R10       N/A                         Unchanged           *\n*        R11          HCT address                 Unchanged           *\n*        R12          Local base address          Unchanged           *\n*        R13          PCE address                 Unchanged           *\n*        R14          Return address              Unchanged           *\n*        R15          Entry address               Unchanged           *\n*                                                                     *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING BUILDBOX,R12        Establish local addressability\n         USING XPL,R7              Establish parm list addressability\n         USING EX1WORK,R5          Establish work area addressability\n         USING SEPDSECT,R4         Establish addr'ty to HASP buffer\n         EJECT\nBUILDBOX $SAVE ,                   Save the caller's registers\n         SPACE 1\n         LR    R12,R15             Set local base\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT TOP LINE                              *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n        $CALL  PUTFRAME            Build top line of detail box\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Call PRPUT macro C\n                                                 to print the top line\n         SPACE 1\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT A BLANK LINE                          *\n*         ( FRAME CHARACTERS IN COL 1 AND COL 80 )                    *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES    Print a blank line\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT JOB ID LINE                           *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         L     R10,X001JCT         Establish addressability\n         USING JCT,R10                to JCT\n         SPACE 1\n         L     R3,X001DSCT         Load DSCT Address           @430P329\n         USING DSCT,R3             Establish Addressability    @430P329\n         SPACE 1                                               @430P329\n         MVC   BOXDESC,LBJOBID     Put Job ID label in line    @430P329\n         SPACE 1                                               @430P329\n         LTR   R3,R3               Is the DSCT Valid?          @430P329\n         BZ    NODSCT1             No, use JCT JobID           @430P329\n         MVC   BOXJOBID,DSWKID     Use TP Work ID              @430P329\n         B     YEADSCT1                                        @430P329\n         SPACE 1                                               @430P329\nNODSCT1  MVC   BOXJOBID,JCTJOBID   Use JCT JOBID in line       @430P329\n         SPACE 1\n*---------------------------------------------------------------------*\n*               Segment ID                                            *\n*---------------------------------------------------------------------*\n         SPACE 1\nYEADSCT1 ICM   R6,B'1111',X001PDDB Addr of first PDDB          @R03P010\n         BZ    JOBIDLN               Skip if job trailer exit  @R03P010\n         SPACE 1                                               @R03P010\n         USING PDB,R6              Declare PDDB addressability @R03P010\n         SPACE 1\n         ICM   R2,B'1111',PDBSEGID      Check for segment ID\n         BZ    JOBIDLN             Branch to print line if no seg id\n         MVC   BOXSGLBL,LBSEGID          Fill in Segment ID label\n         SPACE 1\n         CL    R2,=F'99999'        Is segment greater than 99999?\n         BH    BADSEGID                Yes, segment is invalid\n         SPACE 1\n         CVD   R2,EX1CVDWA            Convert the\n         L     R15,=A(SEGMASK)          Segment number\n         MVC   EX1SEGWA,0(R15)            from binary\n         EDMK  EX1SEGWA,EX1CVDWA+5           to EBCDIC\n         SPACE 1\n         LA    R2,EX1SEGWA+L'EX1SEGWA-1    Truncate all leading\n         SLR   R2,R1                          zeros from Segment\n         EX    R2,EXECSEG          Execute the move\n         B     JOBIDLN             Skip over the move\n         SPACE 1\nEXECSEG  MVC   BOXSGINF(*-*),0(R1)     *** EXECUTE *** Seg Number\n         SPACE 1\nBADSEGID MVC   BOXSGINF,=C'*****'       Show segment is invalid\n         SPACE 1\nJOBIDLN $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 2\n         DROP  R6                  Drop PDDB addressability\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT JOB NAME LINE                         *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBJOBNAM    Job Name label              @430P329\n         SPACE 1                                               @430P329\n         LTR   R3,R3               Is the DSCT Valid?          @430P329\n         BZ    NODSCT2             No, use JCT Jobname         @430P329\n         MVC   BOXJNAME,DSJBN      Use TP Job Name             @430P329\n         B     YEADSCT2                                        @430P329\nNODSCT2  MVC   BOXJNAME,JCTJNAME   Fill in Job Name field      @430P329\n         SPACE 1\nYEADSCT2 $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES Produce line @430P329\n         SPACE 1                                               @430P329\n         DROP  R3                  Drop DSCT                   @430P329\n         SPACE 2                                               @430P329\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT USER ID LINE                          *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         L     R9,X001WJOE         Establish work-JOE\n         USING JOE,R9                 addressability\n         SPACE 1\n         MVC   BOXDESC,LBUSERID          User ID label\n         MVC   BOXCRUID,JOECRUID         Fill in USER ID field\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT SYSOUT CLASS LINE                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBSYSCL           SYSOUT Class label\n         MVC   BOXSYSCL,JOECURCL         Fill in SYSYOUT class\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 2\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT OUTPUT GROUP LINE                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBOUTGRP          Output Group label\n         MVC   BOXINFO(L'JOENAME),JOENAME    Fill in JOE Output Name\n         LA    R2,BOXINFO          Point to start of OUTGRP name\n         LA    R6,L'JOENAME        Set length of OUTGRP name\n         SPACE 1\nNAMELOOP CLI   0(R2),C' '          Is this character a blank?\n         BE    SETSYNTX              Yes, go set syntax\n         LA    R2,1(,R2)             No, point to next character\n         BCT   R6,NAMELOOP         Go find end of outgrp name\n         SPACE 1\nSETSYNTX MVI   0(R2),C'.'          Set syntax for separator\n         LA    R2,1(,R2)           Set pointer for separator\n         LH    R0,JOEID1           1st qualifier to convert\n         CVD   R0,EX1CVDWA         Convert to decimal\n         SPACE 1\n         MVC   EX1CVDWA-1(6),=X'402020202120'    Move mask for result\n         ED    EX1CVDWA-1(6),EX1CVDWA+5          Convert to EBCDIC\n         SPACE 1\n         LA    R6,4                Set for                     @510APAR\n         LA    R1,EX1CVDWA           execute\n         EJECT\nJID1LOOP CLI   0(R1),C' '          Is this beginning of JOEid?\n         BNE   JID1FINI              Yes, beginning found\n         BCTR  R6,0                  No, reset count\n         LA    R1,1(,R1)               and pointer\n         B     JID1LOOP                  continue checking\n         SPACE 1\nJID1FINI EX    R6,EXECJOID         Move id to JOEid1\n         LA    R2,1(R6,R2)           Reset pointer             @510APAR\n         MVI   0(R2),C'.'          Set period in\n         LA    R2,1(,R2)           Reset pointer\n         LH    R0,JOEID2           2nd qualifier to convert\n         CVD   R0,EX1CVDWA         Convert to decimal\n         SPACE 1\n         MVC   EX1CVDWA-1(6),=X'402020202120'    Move mask for result\n         ED    EX1CVDWA-1(6),EX1CVDWA+5          Convert to EBCDIC\n         SPACE 1\n         LA    R6,4                Set for                     @510APAR\n         LA    R1,EX1CVDWA           execute\nJID2LOOP CLI   0(R1),C' '          Is this beginning of JOEid?\n         BNE   JID2FINI              Yes, beginning found\n         BCTR  R6,0                  No, reset count\n         LA    R1,1(,R1)               and pointer\n         B     JID2LOOP                  continue checking\n         SPACE 1\nJID2FINI EX    R6,EXECJOID         Move id to JOEid2\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 1\nEXECJOID MVC 0(*-*,R2),0(R1)       **** EXECUTE ****\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT TITLE LINE                            *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         USING SJTRKEYL,R2                   Establish addressability\n         SPACE 1\n         MVC   BOXDESC,LBTITLE               Title label\n         ICM   R2,B'1111',EX1KYLST           Load Key list address\n         BZ    PRTITLE                       Branch if no Key list\n         LA    R2,KYLSTTL(,R2)               Load address of the Title C\n                                                key in the Key List\n         ICM   R1,B'1111',SJTRTPAD           Load Title TU address\n         BZ    PRTITLE                       Branch if no Title\n         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C\n                                               parameter pair\n         SPACE 1\n         BAL   R8,MOVETU                     Get Title data from TU\n         SPACE 1\nPRTITLE $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 1\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT A BLANK LINE                          *\n*         ( FRAME CHARACTERS IN COL 1 AND COL 80 )                    *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES     Produce the line\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*               BUILD AND PRINT DESTINATION LINE                      *\n*               --------------------------------                      *\n*                                                                     *\n*        Convert the binary route code ( in JOEROUT ) to its          *\n*        corresponding symbolic destination value using the           *\n*        $DEST macro.                                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBDEST                Fill in destination label\n         MVC   EX1DEST(L'JOEROUT),JOEROUT    Copy binary route code\n         SPACE 1\n         L     R9,X001CJOE          Get addressability to char-JOE\n         SPACE 1\n        $DEST  DEST=EX1DEST,LEN=L'EX1DEST,CONV=SBINARY,                C\n               USER=JOEUSER                  Convert route code\n         SPACE 1\n         L     R9,X001WJOE          Reset addressability to work-JOE\n         SPACE 1\n         MVC   BOXDEST,EX1DEST               Fill in destination value\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT NAME LINE                             *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBNAME                Fill in Name label\n         ICM   R2,B'1111',EX1KYLST           Load Key/TU prt list addr\n         BZ    NONAME                        Branch if no Key list\n         LA    R2,KYLSTNM(,R2)               Load address of the Name  C\n                                                key in the Key List\n         ICM   R1,B'1111',SJTRTPAD           Load Name TU address\n         BZ    NONAME                        Branch if no Name\n         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C\n                                                 parameter pair\n         SPACE 1\n         BAL   R8,MOVETU                     Get Name data from TU\n         SPACE 1\n         B     PRTNAME                       Branch to print the Name\n         SPACE 1\nNONAME   MVC   BOXPNAME,JCTPNAME             Name from the JOB stmt\n         SPACE 1\nPRTNAME $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 1\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT ROOM LINE                             *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBROOM                Fill in Room label\n         ICM   R2,B'1111',EX1KYLST           Load Key/TU prt list addr\n         BZ    NOROOM                        Branch if no Key list\n         LA    R2,KYLSTRM(,R2)               Load address of the Room  C\n                                                key in the Key List\n         ICM   R1,B'1111',SJTRTPAD           Load Room TU address\n         BZ    NOROOM                        Branch if no Room\n         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C\n                                                 parameter pair\n         SPACE 1\n         BAL   R8,MOVETU                     Get Room data from TU\n         SPACE 1\n         B     PRTROOM                       Branch to print the Room\n         SPACE 1\nNOROOM   MVC   BOXROOMN,JCTROOMN             Room from the JOB stmt\n         EJECT\nPRTROOM $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT BUILDING LINE                         *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBBLDG                Fill in Building label\n         ICM   R2,B'1111',EX1KYLST           Load Key/TU prt list addr\n         BZ    PRTBLDG                       Branch if no Key list\n         LA    R2,KYLSTBL(,R2)               Load address of the Bldg  C\n                                                key in the Key List\n         ICM   R1,B'1111',SJTRTPAD           Load Building TU address\n         BZ    PRTBLDG                       Branch if no Building\n         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C\n                                                 parameter pair\n         SPACE 1\n         BAL   R8,MOVETU                     Get Building data from TU\n         SPACE 1\nPRTBLDG $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 1\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT DEPARTMENT LINE                       *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBDEPT                Fill in Department label\n         ICM   R2,B'1111',EX1KYLST           Load Key/TU prt list addr\n         BZ    PRTDEPT                       Branch if no Key list\n         LA    R2,KYLSTDP(,R2)               Load address of the Dept  C\n                                                key in the Key List\n         ICM   R1,B'1111',SJTRTPAD           Load Department TU address\n         BZ    PRTDEPT                       Branch if no Department\n         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C\n                                                 parameter pair\n         SPACE 1\n         BAL   R8,MOVETU                    Get Department data from TU\n         SPACE 1\nPRTDEPT $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*               BUILD AND PRINT ADDRESS LINES                         *\n*               -----------------------------                         *\n*        The address can be from 1 to 4 lines long.  Any lines        *\n*        that are unused must be printed as blank lines, but the      *\n*        label \"ADDRESS:\" must appear on the first line even if       *\n*        no address was specified on the OUTPUT JCL.                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBADDR                Fill in Address label\n         ICM   R2,B'1111',EX1KYLST           Load Key/TU prt list addr\n         BZ    NOADDR                        Branch if no Key list\n         LA    R2,KYLSTAD(,R2)               Load address of the Addr  C\n                                                key in the Key/TU List\n         ICM   R1,B'1111',SJTRTPAD           Load Address TU address\n         BZ    NOADDR                        Branch if no Address\n         SPACE 1\n         LH    R3,DOCNTNUM-DOCNUNIT(,R1)     Number of lines used for  C\n                                                 Address\n         CL    R3,$F4                        Number greater than four?\n         BNH   SAVENUML                        No, save number of lines\n         LA    R3,4                            Yes, set to max of four\n         SPACE 1\nSAVENUML STH   R3,EX1ADNUM                   Save number of lines\n         LTR   R3,R3                         Number greater than zero?\n         BZ    NOADDR                          No, produce blank lines\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Loop to build/print multiple line address                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C\n                                                 parameter pair\n         SPACE 1\n         USING DOCNTFLD,R1                   Establish addressability\n         SPACE 1\nADDRLOOP LR    R6,R1                         Save the TU address\n         SPACE 1\n         BAL   R8,MOVETU                     Get Address data from TU\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 1\n         LR    R1,R6                         Restore TU address\n         SPACE 1\n         LH    R15,DOCNTLEN                  Move to next\n         LA    R1,L'DOCNTLEN(R15,R1)           Address Length/Data pair\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         BCT   R3,ADDRLOOP                   Loop again if more data\n         SPACE 1\n         DROP  R1                            Drop addressability\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Loop to build/print multiple blank lines                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nNOADDR   LH    R6,$H4                       Maximum number of          C\n                                             available lines of address\n         LH    R3,EX1ADNUM                  Number Address lines used\n         SR    R6,R3                        Determine the number       C\n                                                    of unused lines\n         LA    R6,1(,R6)                    Add 1 for extra blank line\n         SPACE 1\nBLKLINE $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES    Print blank lines\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         BCT   R6,BLKLINE                       Loop if more to print\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*               BUILD AND PRINT THE PRINT TIME LINE                   *\n*                                                                     *\n*    Note: The TIME macro with the DEC parameter returns the time     *\n*          of day in R0 and the date in R1.                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBPRTIME             Fill in Printer Time label\n         SPACE 1\n         TIME  DEC                          Get time\n         SPACE 1\n         ST    R0,EX1CVDWA                  Save the time\n         LR    R6,R1                        Save the date\n         L     R15,=A(TIMEMASK)             Get Edit mask address\n         MVC   BOXPRTIM,0(R15)              Copy edit pattern\n         ED    BOXPRTIM,EX1CVDWA            Edit time into proper field\n         CLI   BOXPRTIM,X'21'      LEADING 0?                    @430GO\n         BNE   PRLINE                NO, NO NEED TO EDIT         @430GO\n         MVI   BOXPRTIM,X'F0'      PUT PRINTABLE 0 IN FIELD      @430GO\n         SPACE 1\nPRLINE  $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES  PRODUCE LINE   @430GO\n         SPACE 1\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT THE PRINT DATE LINE                   *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBPRDATE             Fill in Printer Date label\n         SPACE 1\n        $CALL  FMTDATE                      Format date\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT PRINTER NAME LINE                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBPRNAME             Printer Name label\n         SPACE 1\n         USING DCT,R3                       Establish addressability\n         L     R3,X001DCT                      to printer DCT\n         SPACE 1\n         MVC   BOXPDEVN,DCTDEVN             Device Name\n         SPACE 1\n         DROP  R3                           Drop DCT addressability\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 1\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT SYSTEM NAME LINE                      *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBSYSTEM             System label\n         MVC   BOXSYSTM,$SID                System ID\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT A BLANK LINE                          *\n*         ( FRAME CHARACTERS IN COL 1 AND COL 80 )                    *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES     Produce the line\n         SPACE 1\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT BOTTOM LINE                           *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n        $CALL  PUTFRAME            Build last line of detail box\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Call PRPUT macro C\n                                                to print the last line\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to the caller.                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDBOX   DS    0H\n         SPACE 1\n        $RETURN ,                  Return to the caller\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Static data and the literal pool                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LTORG ,                            Define literal origin\n         SPACE 1\n         DROP  R2,R4,R5,R7,R9,R10,R12       Drop addressabilities\n         TITLE 'CLRLINE  -- Clear the output line; Reset buffer work spC\n               ace addressability'\n***********************************************************************\n*                                                                     *\n*        CLRLINE -  Resets addressability to the beginning of         *\n*                   the buffer work space within the HASP             *\n*                   buffer that is passed to the exit.                *\n*                   Clears the detail box output buffer line          *\n*                   and inserts the box frame character in            *\n*                   columns 1 and 80.                                 *\n*                                                                     *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This subroutine loads R4 with the address of the work        *\n*        space in the HASP buffer passed via the exit parameter       *\n*        list.  This ensures that the data to be printed by           *\n*        $PRPUT is at the correct offset in the buffer.               *\n*                                                                     *\n*        The detail box output buffer line is cleared so that         *\n*        residual data is not printed on the current output           *\n*        line.  The box frame character is inserted in columns        *\n*        1 and 80.                                                    *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via a  BAL R8,CLRLINE                               *\n*        Returned via address in R8                                   *\n*                                                                     *\n*                                                                     *\n*   REGISTER USAGE:                                                   *\n*                                                                     *\n*        REG          VALUE ON ENTRY         VALUE ON EXIT            *\n*                                                                     *\n*        R0-R3        N/A                      Unchanged              *\n*        R4           N/A                      Buffer work space      *\n*                                                address              *\n*        R5-R6        N/A                      Unchanged              *\n*        R7           Parameter list address   Unchanged              *\n*        R8           Return address           Unchanged              *\n*        R9-R15       N/A                      Unchanged              *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING SEPDSECT,R4                 Establish\n         USING XPL,R7                           addressability\n         EJECT\nCLRLINE  L     R4,X001HBUF                 Load buffer address and\n         LA    R4,BUFSTART-BFPDSECT(,R4)     point to the work space   C\n                                                offset\n         SPACE 1\n         MVI   PAGELINE,C' '                        Clear the\n         MVC   PAGELINE+1(L'PAGELINE-1),PAGELINE       separator line\n         MVI   BOXCOL1,C'*'                         Insert\n         MVI   BOXCOL80,C'*'                           frame characters\n         SPACE 1\n         BR    R8                          Return to caller\n         SPACE 1\n         LTORG ,                           Define literal origin\n         SPACE 1\n         DROP  R4,R7                       Drop addressability\n         TITLE 'MOVETU   -- Move TEXT UNIT text into separator page detC\n               ail box'\n***********************************************************************\n*                                                                     *\n*        MOVETU -  Move the Text Unit ( TU ) text from the TU         *\n*                  output area to the separator page detail           *\n*                  box line.                                          *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This subroutine is called to move the TU text from the       *\n*        TU output area to the detail box output line.  Since         *\n*        TUs are variable length (up to sixty characters long),       *\n*        the detail line is padded with blanks on the right after     *\n*        the move is performed.                                       *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via a  BAL R8,MOVETU                                *\n*        Returned via address in R8                                   *\n*                                                                     *\n*                                                                     *\n*   REGISTER USAGE:                                                   *\n*                                                                     *\n*        REG          VALUE ON ENTRY         VALUE ON EXIT            *\n*                                                                     *\n*        R0           N/A                      Destroyed              *\n*        R1           Address of TU            Destroyed              *\n*                      length/parameter pair                          *\n*        R2-R3        N/A                      Unchanged              *\n*        R4           Address of output        Unchanged              *\n*                      buffer work space                              *\n*        R5-R13       N/A                      Unchanged              *\n*        R14-R15      N/A                      Destroyed              *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING DOCNTFLD,R1                  Establish\n         USING SEPDSECT,R4                      addressability\n         EJECT\nMOVETU   LA    R14,DOCNTPRM                 Load TU text address\n         LH    R15,DOCNTLEN                 Length of TU text\n         ICM   R15,B'1000',$BLANKS          Set pad character to blank\n         LA    R0,BOXINFO                   Set up the\n         LA    R1,L'BOXINFO                    receiving field\n         SPACE 1\n         MVCL  R0,R14                       Move the text\n         SPACE 1\n         BR    R8                           Return to the caller\n         SPACE 1\n         LTORG ,                            Define literal origin\n         SPACE 1\n         DROP  R1,R4                        Drop TU, SEPDSECT addr'ty\n         TITLE 'PUTFRAME -- Create the detail box frame in the top and C\n               bottom lines'\n***********************************************************************\n*                                                                     *\n*        PUTFRAME - Create the detail box frame in the top and        *\n*                   bottom lines.                                     *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This subroutine is called to create the frame in the         *\n*        top and bottom lines of the separator page detail box.       *\n*                                                                     *\n*        The detail box frame will contain ...                        *\n*                                                                     *\n*          '**START***'  for job header separator calls               *\n*          '**END*****'  for job trailer separator calls              *\n*          '**CONT****'  for job continuation separator calls         *\n*                                                                     *\n*        propagated across the length of the top and bottom           *\n*        lines of the detail box.                                     *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via $CALL                                           *\n*        Returned via $RETURN                                         *\n*                                                                     *\n*   REGISTER USAGE ( ENTRY/EXIT ):                                    *\n*                                                                     *\n*        REG          VALUE ON ENTRY         VALUE ON EXIT            *\n*                                                                     *\n*        R0-R3        N/A                      Unchanged              *\n*        R4           Address of output        Unchanged              *\n*                      buffer work space                              *\n*        R5-R6        N/A                      Unchanged              *\n*        R7           Parameter list address   Unchanged              *\n*        R8-R10       N/A                      Unchanged              *\n*        R11          HCT address              Unchanged              *\n*        R12          N/A                      Unchanged              *\n*        R13          PCE address              Unchanged              *\n*        R14          Return address           Unchanged              *\n*        R15          Entry address            Unchanged              *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING PUTFRAME,R12                 Establish\n         USING SEPDSECT,R4                       addressabilities\n         USING XPL,R7\n         SPACE 1\nPUTFRAME $SAVE ,                   Save the caller's registers\n         SPACE 2\n         LR    R12,R15             Set local base register\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Determine the type of call and branch to insert              *\n*        frame characters in the detail box output line.              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         TM    X001IND,X001JTLR    Is this a trailer call?     @R01P010\n         BO    TRAILER                If yes, go to TRAILER\n         SPACE 1\n         TM    X001IND,X001JCNT    Else, continuation call?    @R01P010\n         BO    CONTINUE               If yes, go to CONTINUE\n         SPACE 1\n*---------------------------------------------------------------------*\n*        Insert frame for job header calls.                           *\n*---------------------------------------------------------------------*\n         SPACE 1\n         MVC   BOXLINE(10),=CL10'**START***'   Insert 'START'\n         SPACE 1\n         B     FILLFRAM            Go propagate frame characters\n         SPACE 1\n*---------------------------------------------------------------------*\n*        Insert frame for job continuation calls.                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nCONTINUE MVC   BOXLINE(10),=CL10'**CONT****'   Insert 'CONT'\n         SPACE 1\n         B     FILLFRAM            Go propagate frame characters\n         SPACE 1\n*---------------------------------------------------------------------*\n*        Insert frame for job trailer calls.                          *\n*---------------------------------------------------------------------*\n         SPACE 1\nTRAILER  MVC   BOXLINE(10),=CL10'**END*****'       Insert 'END'\n         SPACE 1\n*---------------------------------------------------------------------*\n*        Propagate frame characters across the length of              *\n*        the detail box output line.                                  *\n*---------------------------------------------------------------------*\n         SPACE 1\nFILLFRAM MVC   BOXLINE+10(L'BOXLINE-10),BOXLINE    Fill in frame\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to caller.                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n        $RETURN ,                  Return to caller\n         SPACE 2\n         LTORG ,                   Define literal origin\n         SPACE 2\n         DROP  R4,R7,R12           Drop addressabilities\n         TITLE 'FMTDATE  -- Format date'\n***********************************************************************\n*                                                                     *\n*        FMTDATE  - Convert the date to a readable format.            *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        The date is converted from a packed decimal format           *\n*        0CYYDDDF to a readable format 'DD MMM YYYY' where ..  @OW26885\n*                                                                     *\n*          Packed Decimal Format:                                     *\n*                                                                     *\n*          C   represents number of centuries after 1900 A.D.         *\n*         YY   represents the last two digits of the year             *\n*        DDD   represents the JULIAN value for the date               *\n*                                                                     *\n*          Readable Format:                                           *\n*                                                                     *\n*         DD   represents the date                                    *\n*        MMM   represents the three character abbreviation            *\n*                 for the month                                       *\n*       YYYY   represents the YEAR                             @OW26885\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via $CALL                                           *\n*        Returned via $RETURN                                         *\n*                                                                     *\n*   REGISTER USAGE ( ENTRY/EXIT ):                                    *\n*                                                                     *\n*        REG          VALUE ON ENTRY         VALUE ON EXIT            *\n*                                                                     *\n*        R0-R3        N/A                      Unchanged              *\n*        R4           Current buffer address   Unchanged              *\n*        R5           Exit work area address   Unchanged              *\n*        R6           Date in packed decimal   Unchanged              *\n*                     format 0CYYDDDF                                 *\n*        R7           Parameter list address   Unchanged              *\n*        R8-R10       N/A                      Unchanged              *\n*        R11          HCT address              Unchanged              *\n*        R12          N/A                      Unchanged              *\n*        R13          PCE address              Unchanged              *\n*        R14          Return address           Unchanged              *\n*        R15          Entry address            Unchanged              *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING FMTDATE,R12         Establish local addressability\n         USING XPL,R7              Establish XPL addressability\n         USING SEPDSECT,R4         Establish buffer addr'ty\n         USING EX1WORK,R5          Establish exit work area addr'ty\n         SPACE 1\nFMTDATE $SAVE  ,                   Save the caller's registers\n         SPACE 2\n         LR    R12,R15             Set local base register\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Setup date conversion table.                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         LTR   R6,R6               Is there a date to format?\n         BZ    NODATE                No, go return to caller\n         SPACE 1\n         LA    R3,BOXINFO          Get addr of output area\n         XC    EX1CVDWA,EX1CVDWA   Clear out conversion work area\n         ST    R6,EX1CVDWA+4       Store date in conversion work area\n         SPACE 1\n         L     R2,=A(YEARTABL)     Copy date conversion table\n         MVC   MONTHS,0(R2)          incase it needs to be updated\n         SPACE 1\n         TM    EX1CVDWA+5,X'01'    Adjust\n         BO    EDITYEAR              table\n         TM    EX1CVDWA+5,X'12'        on\n         BM    EDITYEAR                  leap\n         MVI   FEB,29                      years\n         SPACE 1\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Convert year to readable format.                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nEDITYEAR MVC   8(3,R3),=X'F02120'    Get pattern               @OW26885\n         ED    8(3,R3),EX1CVDWA+5    Edit last two digit of yr @OW26885\n         MVI   6(R3),X'40'           Blank fill character      @OW26885\n         CLI   EX1CVDWA+4,X'00'      Is this 20th Century yr?  @OW26885\n         BNE   X121CENT              No, must be 21st Century  @OW26885\n         MVC   7(2,R3),=CL2'19'      Year will be '19xx'       @OW26885\n         B     XYRCNT                edit last 2 digits of yr  @OW26885\n         SPACE 1                                               @OW26885\nX121CENT MVC   7(2,R3),=CL2'20'      Year will be '20xx'       @OW26885\n         SPACE 1\nXYRCNT   MVC   EX1CVDWA(6),$ZEROS  Clear all but JULIAN day    @OW26885\n         SLR   R0,R0               Clear register\n         CVB   R6,EX1CVDWA         Convert day to binary\n         LA    R2,MONTHS-4         Get addr of date conversion table\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Convert day and month to readable format.                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nDATELOOP SLR   R6,R0               Convert\n         LA    R2,4(,R2)             JULIAN day\n         IC    R0,0(,R2)               value to\n         CLR   R0,R6                     standard day\n         BL    DATELOOP                     value\n         SPACE 1\n         CVD   R6,EX1CVDWA         Convert day to decimal value\n         UNPK  0(2,R3),EX1CVDWA+6(2)   Place DAY (DD)\n         OI    1(R3),X'F0'               into work area\n         SPACE 1\n         MVI   2(R3),C' '          Insert delimiter\n         MVC   3(3,R3),1(R2)       Move EBCDIC month (MMM)\n         SPACE 1\nNODATE   DS    0H                  End of conversion\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to caller.                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n        $RETURN ,                  Return to caller\n         SPACE 2\n         LTORG ,                   Define literal origin\n         SPACE 2\n         DROP  R4,R5,R7,R12        Drop addressabilities\n         TITLE 'EX1RECV  -- First level recovery routine'\n***********************************************************************\n*                                                                     *\n*        EX1RECV  - First level recovery for exit 1                   *\n*                                                                     *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This routine gets control if an abend occurs within          *\n*        the sample exit.  The registers that are required for        *\n*        retry processing are restored from the ERA ( Error           *\n*        Recovery Area ).                                             *\n*                                                                     *\n*        Since the abend may have occurred while attempting           *\n*        to return the exit 1 work area storage, an additional        *\n*        $ESTAE recovery environment will be created to handle        *\n*        an abend within this first level recovery routine.           *\n*        Note that HASPTERM will pop the save areas until it          *\n*        has found the save area level that issued the $ESTAE         *\n*        give control to the recovery routine specified.              *\n*                                                                     *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via $CALL                                           *\n*        Returned via $RETURN                                         *\n*                                                                     *\n*   REGISTER USAGE ( ENTRY/EXIT ):                                    *\n*                                                                     *\n*        REG          VALUE ON ENTRY         VALUE ON EXIT            *\n*                                                                     *\n*        R0           R0 at time of error      Unchanged              *\n*        R1           ERA address              Unchanged              *\n*        R2-R10       R2-R10 at time of error  Unchanged              *\n*        R11          HCT address              Unchanged              *\n*        R12          R12 at time of error     Unchanged              *\n*        R13          PCE address              Unchanged              *\n*        R14          Return address           Unchanged              *\n*        R15          Entry address            Unchanged              *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING ERA,R8              Establish ERA addressability\n         USING EX1RECV,R12         Establish local addressability\n         SPACE 1\nEX1RECV $SAVE  ,                   Save the caller's registers\n         SPACE 2\n         LR    R12,R15             Set local base register\n         SPACE 1\n         LR    R8,R1               Set ERA address\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Establish second level ESTAE recovery environment.           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n        $ESTAE RECADDR==A(EX1REC2),NAME=EX1RECV,RETRY=ENDRECOV,        C\n               BASE=(R12)          Establish ESTAE environment\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Check if PCEUSER0 has address of exit work area by           *\n*        verifying that the eyecatcher is valid.  If the              *\n*        eyecatcher is valid release the storage obtained             *\n*        for work areas needed to produce a separator page            *\n*        ( see PRODSEP routine ).  The addresses pointing to          *\n*        these work areas were previously saved in the exit           *\n*        work area.                                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         ICM   R4,B'1111',PCEUSER0     Get work area address\n         BZ    ENDRECOV                Bypass RETWORK if no storage\n         XC    PCEUSER0,PCEUSER0       Clear PCEUSER0 field\n         SPACE 1\n         CLC   0(4,R4),=CL4'EX1W'      Check if work area      @430P329C\n                                          eyecatcher is valid  @430P329\n         BNE   ENDRECOV            Bypass RETWORK if not valid @430P329\n         SPACE 1\n         LA    R4,4(,R4)           Add 4 for eyecatcher\n         USING EX1WORK,R4          Establish EX1WORK addressability\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Release TU output area storage                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         ICM   R1,B'1111',EX1TUADR     Load TU output area addr\n         BZ    RELKEYL             Branch if no TU storage\n         S     R1,$F4              Subtract 4 for eyecatcher\n         SPACE 1\n         XC    EX1TUADR,EX1TUADR       Set address to zero\n         SPACE 1\n        $RETWORK (R1)              Release the TU storage\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Release Key/TU pointer list storage area                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nRELKEYL  ICM   R1,B'1111',EX1KYLST     Load Key/TU ptr list addr\n         BZ    RELSRWA             Branch if no Key/TU storage\n         S     R1,$F4              Subtract 4 for eyecatcher\n         SPACE 1\n         XC    EX1KYLST,EX1KYLST       Set address to zero\n         SPACE 1\n        $RETWORK (R1)              Release the keylist storage\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Release SWBTUREQ RETRIEVE service work area storage          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nRELSRWA  ICM   R1,B'1111',EX1SRWA      Load service work area addr\n         BZ    ENDRECOV            Branch if no work storage\n         S     R1,$F4              Subtract 4 for eyecatcher\n         SPACE 1\n         XC    EX1SRWA,EX1SRWA     Set address to zero\n         SPACE 1\n        $RETWORK (R1)              Release the working storage\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to caller.                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDRECOV $ESTAE CANCEL             Cancel 2nd level recovery environ\n         SPACE 2\n        $SETRP PERCOLATE           Percolate to callers recovery\n         SPACE 2\n        $RETURN ,                  Return to caller\n         SPACE 2\n         LTORG ,                   Define literal origin\n         SPACE 2\n         DROP  R4,R8,R12           Drop addressabilities\n         TITLE 'EX1REC2  -- Second level recovery routine'\n***********************************************************************\n*                                                                     *\n*        EX1REC2  - Second level recovery for sample exit 1           *\n*                                                                     *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This routine gets control if an abend occurs within          *\n*        the first level recovery routine.                            *\n*                                                                     *\n*        If this is not the first time that this recovery             *\n*        routine has been called, PERCOLATE to the first              *\n*        level recovery routine ( EX1RECV ).  Otherwise,              *\n*        resume processing at the retry label ENDRECOV in             *\n*        EX1RECV.                                                     *\n*                                                                     *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via $CALL                                           *\n*        Returned via $RETURN                                         *\n*                                                                     *\n*   REGISTER USAGE ( ENTRY/EXIT ):                                    *\n*                                                                     *\n*        REG          VALUE ON ENTRY         VALUE ON EXIT            *\n*                                                                     *\n*        R0           R0 at time of error      Unchanged              *\n*        R1           ERA address              Unchanged              *\n*        R2-R10       R2-R10 at time of error  Unchanged              *\n*        R11          HCT address              Unchanged              *\n*        R12          R12 at time of error     Unchanged              *\n*        R13          PCE address              Unchanged              *\n*        R14          Return address           Unchanged              *\n*        R15          Entry address            Unchanged              *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING ERA,R8              Establish ERA addressability\n         USING EX1REC2,R12         Establish local addressability\n         SPACE 1\nEX1REC2 $SAVE  ,                   Save the caller's registers\n         SPACE 2\n         LR    R12,R15             Set local base register\n         SPACE 1\n         LR    R8,R1               Set ERA address\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        If this is not the first time through this ESTAE             *\n*        environment, PERCOLATE to next ESTAE recovery level.         *\n*        Otherwise, retry at resume point stored in PRE.              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         CLC   PCEUSER1,$ZEROS     Has ESTAE been recently entered?\n         BNE   EX1PERK               Yes, percolate\n         MVC   PCEUSER1,$F1        Indicate ESTAE entered\n         SPACE 1\n         L     R1,ERAPRE                    Get PRE address\n         MVC   ERAREG12,PREBASE-PRE(R1)     Set local base\n         L     R2,PRERESUM-PRE(,R1)         Get resume address\n         SPACE 2\n        $SETRP RECOVER,RESUME=(R2)          Set recovery address\n         SPACE 2\n         B     ENDREC2             Return to caller\n         SPACE 2\nEX1PERK $SETRP PERCOLATE          Percolate to callers recovery\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to caller.                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDREC2 $RETURN ,                 Return to caller\n         SPACE 2\n         DROP  R8,R12             Drop addressabilities\n         SPACE 2\n         LTORG ,\n         TITLE 'PRINT/PUNCH Separator Exit -- Data Definitions'\n***********************************************************************\n*                                                                     *\n*               DATA DEFINITIONS                                      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        All labels that will appear in the separator page            *\n*        detail box are listed below.                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nLBJOBID  DC    CL(L'BOXDESC)'JOBID='\nLBSEGID  DC    CL(L'BOXDESC)'SEGMENT ID='\nLBJOBNAM DC    CL(L'BOXDESC)'JOB NAME='\nLBUSERID DC    CL(L'BOXDESC)'USER ID='\nLBSYSCL  DC    CL(L'BOXDESC)'SYSOUT CLASS='\nLBOUTGRP DC    CL(L'BOXDESC)'OUTPUT GROUP='\nLBTITLE  DC    CL(L'BOXDESC)'TITLE='\nLBDEST   DC    CL(L'BOXDESC)'DESTINATION='\nLBNAME   DC    CL(L'BOXDESC)'NAME='\nLBROOM   DC    CL(L'BOXDESC)'BIN= '                     SM 080800\nLBBLDG   DC    CL(L'BOXDESC)'BUILDING='\nLBDEPT   DC    CL(L'BOXDESC)'DEPARTMENT='\nLBADDR   DC    CL(L'BOXDESC)'ADDRESS='\nLBPRTIME DC    CL(L'BOXDESC)'PRINT TIME='\nLBPRDATE DC    CL(L'BOXDESC)'PRINT DATE='\nLBPRNAME DC    CL(L'BOXDESC)'PRINTER NAME='\nLBSYSTEM DC    CL(L'BOXDESC)'SYSTEM='\n         SPACE 1\nTIMEMASK DC    X'21207A20207A2020'        TIME MASK\nSEGMASK  DC    X'402020202020'            SEGMENT ID MASK\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        JULIAN date to standard DAY and MONTH conversion table.      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nYEARTABL DC    AL1(31),C'JAN',AL1(28),C'FEB'\n         DC    AL1(31),C'MAR',AL1(30),C'APR'\n         DC    AL1(31),C'MAY',AL1(30),C'JUN'\n         DC    AL1(31),C'JUL',AL1(31),C'AUG'\n         DC    AL1(30),C'SEP',AL1(31),C'OCT'\n         DC    AL1(30),C'NOV',AL1(255),C'DEC'\n         SPACE 1\nMONTHS   EQU   $REGSAVE,12*4       Save area for copy of above table\nFEB      EQU   MONTHS+4            Entry for FEBRUARY\n         TITLE 'PRINT/PUNCH Separator Exit -- OUTPUT Key List Equates'\n***********************************************************************\n*                                                                     *\n*        OUTPUT JCL Keys List equates                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nKYLSTTL  EQU   0*SJTRKLEN               Title Key\nKYLSTNM  EQU   1*SJTRKLEN               Name Key\nKYLSTRM  EQU   2*SJTRKLEN               Room Key\nKYLSTBL  EQU   3*SJTRKLEN               Building Key\nKYLSTDP  EQU   4*SJTRKLEN               Dept key\nKYLSTAD  EQU   5*SJTRKLEN               Address Key\n         TITLE 'PRINT/PUNCH Separator Exit -- Exit 1 Work Area DSECT'\n***********************************************************************\n*                                                                     *\n*        EXIT 1 WORK AREA DSECT                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEX1WORK  DSECT\n         DS    0F\nEX1SWBRC DS    XL2                 SWBTUREQ logical error return code\nEX1PLPTR DS    A                   Address of SWBTUREQ parameter list  C\n                                     (the SWBTUREQ service requires    C\n                                      R1 to point to a word that       C\n                                      points to the parameter list)\nEX1SRWA  DS    F                   Address of SWBTUREQ service         C\n                                     working storage\nEX1SRWL  DS    H                   Length of SWBTUREQ service          C\n                                     working storage\nEX1KYLST DS    F                   Address of the Key List             C\n                                     used for SWBTUREQ SERVICE\nEX1TUADR DS    F                   Address of TU output area           C\n                                     used for SWBTUREQ SERVICE\nEX1TUSZ  DS    H                   Size of the TU output area          C\n                                     used for SWBTUREQ SERVICE\nEX1ADNUM DS    H                   Number of lines of ADDRESS ( OUTPUT C\n                                                 JCL keyword )\nEX1SEGWA DS    XL6                 Segment number work area\n         DS    0D\nEX1CVDWA DS    D                   'Convert to decimal' work area\nEX1DEST  DS    0CL16               Destination conversion\n         DS    D                        work area\n         DS    D\n         DS    0F\nEX1RETPL DS    XL(SJTRLGTH)        SWBTUREQ RETRIEVE parameter list\nEX1WKLEN EQU   *-EX1WORK           Length of EX1WORK DSECT\n         TITLE 'PRINT/PUNCH Separator Exit -- Separator Page Detail BoxC\n                DSECT'\n***********************************************************************\n*                                                                     *\n*        SEPARATOR PAGE DETAIL BOX LINE DSECT                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSEPDSECT DSECT                     Separator page detail box DSECT\nPAGELINE DS    0CL132\n         SPACE 1\nBOXLINE  DS    0CL80\n         SPACE 1\n*---------------------------------------------------------------------*\n*                                  COL           DESCRIPTION          *\n*---------------------------------------------------------------------*\n         SPACE 1\nBOXCOL1  DS    CL1                 1             Frame Character\n         DS    CL1                 2             Blank\nBOXDESC  DS    CL13                3-15          Line Description\n         DS    CL2                 16-17         Blanks\nBOXINFO  DS    CL60                18-77         Line Information\n         DS    CL2                 78-79         Blanks\nBOXCOL80 DS    CL1                 80            Frame Character\n         SPACE 1\n         DS    CL52                Unused section\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                  COL           DESCRIPTION          *\n*---------------------------------------------------------------------*\n         SPACE 2\n         ORG   BOXINFO                    Job ID Area\nBOXJOBID DS    CL(L'JCTJOBID)       18-25         Job id\n         SPACE 1\n         ORG   BOXINFO+22                 Segment Area\nBOXSGLBL DS    C'SEGMENT ID:  '    40-52         Segment ID label\nBOXSGINF DS    CL5                 53-57         Segment ID Number\n         SPACE 1\n         ORG   BOXINFO                    Job Name Area\nBOXJNAME DS    CL(L'JCTJNAME)      18-25         Job name\n         SPACE 1\n         ORG   BOXINFO                    User ID Area\nBOXCRUID DS    CL(L'JOECRUID)      18-25         User ID\n         SPACE 1\n         ORG   BOXINFO                    Sysout class Area\nBOXSYSCL DS    CL(L'JOECURCL)      18            Sysout class\n         EJECT\n*---------------------------------------------------------------------*\n*                                  COL           DESCRIPTION          *\n*---------------------------------------------------------------------*\n         SPACE 2\n         ORG   BOXINFO                    Destination Area\nBOXDEST  DS    CL(L'EX1DEST)       18-25         Destination\n         SPACE 1\n         ORG   BOXINFO                    Programmer name Area\nBOXPNAME DS    CL(L'JCTPNAME)      18-25         Programmer name\n         SPACE 1\n         ORG   BOXINFO                    Programmer room Area\nBOXROOMN DS    CL(L'JCTROOMN)      18-25         Programmer room\n         SPACE 1\n         ORG   BOXINFO                    Print Time Area\nBOXPRTIM DS    C'HH:MM:SS'         18-25         Print Time\n         SPACE 1\n         ORG   BOXINFO                    Print Date Area\nBOXPRDAT DS    C'DD MMM YY'        18-26         Print Date\n         SPACE 1\n         ORG   BOXINFO                    Printer Name Area\nBOXPDEVN DS    CL(L'DCTDEVN)       18-25         Printer Name\n         SPACE 1\n         ORG   BOXINFO                    System Name Area\nBOXSYSTM DS    CL(L'$SID)          18-21         System Name\n         EJECT\n***********************************************************************\n*        END OF DECLARES                                              *\n***********************************************************************\n         SPACE 1\n&J2SECTN &J2SECTT ,                Restore code section        @430P270\n         SPACE 1\n         LTORG ,                   DEFINE LITERAL ORIGIN\n         SPACE 1\n         DROP  ,                   Kill addressabilities\n         TITLE 'PRINT/PUNCH Separator Exit -- Module End ($MODEND)'\n        $MODEND\nAPARNUM  DC    CL8'NONE   '        APAR NUMBER\nPTFNUM   DC    CL8'NONE   '        PTF  NUMBER\n         END   ,                   END OF STSCX01A\n./ ADD NAME=LSES502J 0306-00234-05314-1426-00024-00018-00004-T0SM0\n//T0SM502J JOB  (4030,37),'REDO--LSES502',CLASS=X,MSGCLASS=A,\n//  REGION=6M,\n//    NOTIFY=&SYSUID\n//*\n//*%PDSDOC 00 SMP APPLY LSES502\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI  <== UPDATE TO YOUR CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=THIS.DATASET.NAME(LSES502) <== UPDATE DSN\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES502) BYPASS(APPLYCHECK) .\n  RESETRC.\n  RECEIVE S(LSES502) SOURCEID(MELLON) .\n  SET BDY(TARGET).                          <== UPDATE TO YOUR TGT\n  APPLY REDO S(LSES502).\n//\n./ ADD NAME=LSES503  0205-00234-03317-2222-00328-00253-00001-T0SM1\n++USERMOD(LSES503)\n /* ***************************************************************\n    ** * USER EXIT 4 A                                         * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707) .\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STSCX04A),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STSCX04A)\n NAME STSCX04A(R)\n/*\n++SRC(STSCX04A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\n PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1) '\n* *%PDSDOC 00 MELLON EXIT 04 - PARSES /*ROUTE XEQ AND SET ENVIRONMENT\n*********************************************************************\n*                                                                   *\n*                        HASP EXIT 4                                *\n*                                                                   *\n*     THIS EXIT GETS CONTROL WHENEVER JES2 ENCOUNTERS A JCL OR      *\n*     JES2 CONTROL STATEMENT AND PERFORMS THE FOLLOWING FUNCTIONS:  *\n*                                                                   *\n*     > PARSES ANY \"/*ROUTE XEQ RESNAME\" CONTROL STATEMENTS THAT    *\n*       HAVE BEEN SPECIFIED.  ANY MELLON RESOURCE NAME THAT HAS     *\n*       BEEN SPECIFIED IS THEN CONVERTED TO A WLM SCHEDULING        *\n*       ENVIRONMENT.                                                *\n*                                                                   *\n*     ENTRY POINT: EXIT04                                           *\n*                                                                   *\n*     INPUT REGISTERS:                                              *\n*        R0     CODE INDICATING WHETHER A JES2 CONTROL OR JCL       *\n*               STATEMENT IS BEING PROCESSED.                       *\n*               0 = JES2 CONTROL STATEMENT                          *\n*               4 = JCL STATEMENT                                   *\n*        R1     POINTER TO A THREE WORD PARAMETER LIST FORMATTED    *\n*               AS FOLLOWS:                                         *\n*               +0  ADDRESS OF IMAGE BUFFER                         *\n*               +4  ADDRESS OF RDWFLAGX                             *\n*               +8  ADDRESS OF JCTXWRK                              *\n*        R2-9   N/A                                                 *\n*        R10    JCT ADDRESS OR ZERO                                 *\n*        R11    HCT ADDRESS                                         *\n*        R12    N/A                                                 *\n*        R13    PCE ADDRESS                                         *\n*        R14    RETURN ADDRESS                                      *\n*        R15    ENTRY ADDRESS                                       *\n*                                                                   *\n*     OUTPUT REGISTERS:                                             *\n*        R0-14  UNCHANGED                                           *\n*        R15:   RETURN CODE                                         *\n*                                                                   *\n*     REGISTER USAGE(INTERNAL):                                     *\n*        R0-9   WORK REGISTERS                                      *\n*        R10    JCT ADDRESS                                         *\n*        R11    HCT ADDRESS                                         *\n*        R12    BASE REGISTER                                       *\n*        R13    PCE ADDRESS                                         *\n*        R14-15 WORK AND LINKAGE REGISTERS                          *\n*                                                                   *\n*     NOTE: THIS MODULE IS FOR USE WITH JES2 VERSION 6.0.4          *\n*                                                                   *\n*     AUTHOR: BOB BREAK                                             *\n*             ST. LOUIS, MO.                                        *\n*********************************************************************\n* CHANGES:                                                          *\n* 01/22/2001 - ALTER LOGIC AS FOLLOWS, INSTEAD OF CHECKING FOR A    *\n* S. MCCOLLEY  VALID DESTID AND IF FOUND ASSUME A VALID JES2 ROUTE, *\n*              CHECK NAME TO SEE IF IT IS A VALID SCHENV NAME AND   *\n*              IF SO SET IT AS THE SCHENV REGUARDLESS OF WHETHER IT *\n*              IS A VALID DESTINATION ID OR NOT.                    *\n*                                                                   *\n*********************************************************************\n* *-*-*-----------------------------------------------------------*-*-*\n* *-                                                                 -*\n* *-     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE-*\n* *-  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY-*\n* *-  IS MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS   -*\n* *-  ASSUMED FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY  -*\n* *-  THE USE OF THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY  -*\n* *-  TO EVALUATE THE USEFULLNESS OF THE MATERIAL.                   -*\n* *-                                                                 -*\n* *-     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO     -*\n* *-  DATE, NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR        -*\n* *-  EXTENSIONS MADE IN THE FUTURE.                                 -*\n* *-                                                                 -*\n* *-*-*-----------------------------------------------------------*-*-*\n\n*\n*    SPECIAL THANKS GO TO BOB BREAK OF ST. LOUIS FOR THE ORIGINAL CODE\n*  TO PARSE THE \"/*ROUTE XEQ RESNAME\" CARDS AND SET THE APPROPRIATE\n*  EXECUTION ENVIRONMENT.\n*\n*    SPECIAL THANKS TO JUDY RUNT OF WISCONSIN ELECTRIC FOR THE ORIGINAL\n*  CODE TO HANDLE THE \"/*CNTL BEFORE|AFTER|WITH,RESNAME\" AND \"/*CNTL\n*  RESNAME,EXC|SHR\" ROUTINES.  THE USE OF THE BLOCK EXTENSION REUSABLE\n*  TABLES, BERT'S, TO EXTEND THE JCT AND JQE.\n\n         COPY  $HASPGBL\n\nSTSCX04A $MODULE ENVIRON=JES2,                                         X\n               RMODE=ANY,                                              X\n               IBMJES2=SAMPLE,                                         X\n               TITLE='JES2 EXIT4A ',                                   X\n               SPLEVEL=NOCHECK,                                        X\n               CVT,                                                    X\n               PSA,                                                    X\n               RPL,                                                    X\n               $BUFFER,                                                X\n               $CADDR,                                                 X\n               $DCT,                                                   X\n               $HASPEQU,                                               X\n               $HCT,                                                   X\n               $HCCT,                                                  X\n               $JCT,                                                   X\n               $JCTX,                                                  X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PADDR,                                                 X\n               $PARMLST,                                               X\n               $PCE,                                                   X\n               $PSV,                                                   X\n               $RDRWORK,                                               X\n               $SQD,                                                   X\n               $TRE,                                                   X\n               $USERCBS,                                               X\n               $XECB\n\nEXIT04A  $ENTRY BASE=R12            EXIT ROUTINE ENTRY POINT\n\n*********************************************************************\n*                                                                   *\n*        SAVE CALLER'S REGISTERS AND ESTABLISH ADDRESSABILITIES.    *\n*                                                                   *\n*********************************************************************\n\n         USING JCT,R10\nEXIT000 $SAVE  NAME=STSCX04A       SAVE CALLER'S REGISTERS\n         LR    R12,R15             SET BASE REGISTER\n\n*********************************************************************\n*                                                                   *\n*        DETERMINE IF THIS EXIT WAS ENTERED FOR A JES2 CONTROL      *\n*        STATEMENT.                                                 *\n*                                                                   *\n*********************************************************************\n\n         LTR   R0,R0               PROCESSING JES2 CONTROL STATEMENT?\n         BNZ   RETURN0             NO - BRANCH, RETURN\n\n*********************************************************************\n*                                                                   *\n*        DETERMINE IF A JCT IS PRESENT.                             *\n*                                                                   *\n*********************************************************************\n\n         LTR   R10,R10             JCT PRESENT?\n         BZ    RETURN0             NO - BRANCH, RETURN\n\n*********************************************************************\n*                                                                   *\n*        DETERMINE IF A \"/*ROUTE XEQ\" CONTROL STATEMENT IS BEING    *\n*        PROCESSED.                                                 *\n*                                                                   *\n*********************************************************************\n\n         L     R3,0(,R1)           GET CONTOL STATEMENT IMAGE ADDRESS\n         CLC   ROUTCARD,0(R3)      \"/*ROUTE \" STATEMENT?\n         BNE   RETURN0             NO - BRANCH, RETURN\n* NEXT SEE IF THIS IS AN XEQ STATEMENT OR NOT\n         LA    R3,L'ROUTCARD(R0,R3)  POINT PAST CONSTANT VALUE\n         LA    R2,20               MAX VALUE TO LOOK FOR XEQ VALUE\nFINDXEQ  EQU   *\n         CLI   0(R3),C' '\n         BE    LOOPXEQ            IF BLANK JUST KEEP LOOKING\n         CLC   XEQ,0(R3)          WE ARE ONLY LOOKING FOR XEQ CARDS\n         BE    XEQCARD              - IF WE FIND ONE, BRANCH AN CONT.\n         B     RETURN0                - ELSE JUST QUIT ( GIVE TO JES)\nLOOPXEQ  LA    R3,1(R0,R3)        BUMP POINTER IN ONE\n         BCT   R2,FINDXEQ           - IF WE RUN OUT OF CARD -\n         B     RETURN0            CAN NOT IDENTIFY, QUIT& GIVE 2 JES\nXEQCARD  EQU   *\n*********************************************************************\n*                                                                   *\n*        ISOLATE THE RESOURCE NAME OR JES2 DESTINATION.             *\n*                                                                   *\n*********************************************************************\n\n         LA    R3,L'XEQ(R0,R3)     POINT PAST CONSTANT VALUE\n         LA    R2,35(0,R0)        MAX VALUE TO LOOK OVER ON CARD\nFINDNAME CLI   0(R3),C' '\n         BNE   PASTXEQ            WE HAVE FOUND THE NAME VALUE\n         LA    R3,1(R0,R3)        BUMP INTO CARD\n         BCT   R2,FINDNAME         LIMIT SEARCH INTO CARD\n         B     RETURN0            JUST LET JES2 FIGURE IT OUT\n*\nPASTXEQ  EQU   *                  R3 POINTS TO START OF INPUT VALUE\n         LA    R1,16(R0,R3)         SET END - IN CASE NO END IS FOUND\n         TRT   0(16,R3),TRANSTBL    FIND END OF RESOURCE NAME\n         SLR   R1,R3                CALCULATE RESOURCE NAME LENGTH\n         LR    R2,R1                SAVE RESOURCE NAME LENGTH\n         CH    R2,=H'16'\n         BNH   LT16OK                IF 16 OR LESS THEN CONTINUE AS IS\n         LH    R2,=H'16'             FORCE A MAX. VALUE IF GT 16\nLT16OK   EQU   *\n         LTR   R2,R2              TEST FOR ZERO VALUE\n         BZ    NOBCTR              IF ZERO DO NOT REDUCE\n         BCTR  R2,R0                 REDUCE BY ONE FOR EXECUTE LATER\nNOBCTR   EQU   *\n*********************************************************************\n*                                                                   *\n*        DETERMINE IF THIS IS A MELLON ROUTING REQUEST OR IF IT IS  *\n*        A VALID JES2 CONTROL STATEMENT MEANT TO ROUTE TO A DESTID  *\n*                                                                   *\n*********************************************************************\n*                                                                   *\n*             IF THE LOCATION FROM THE ROUTE STATEMENT IS A VALID   *\n*             SCHENV VALUE THEN USE IT FOR ROUTING - ELSE LET JES2  *\n*             HAVE THE STATEMENT TO PROCESS AS IS.                  *\n*                                                                   *\n*          DON'T LET JES HAVE THE SPECIAL CASE OF /*ROUTE XEQ HERE  *\n*                                                                   *\n*********************************************************************\n\n        $GETWORK WORDS=0+(EXIT04WL+3)/4,  GET WORK AREA                X\n               USE=WRK1,                   FOR WRK1                    X\n               WAIT=YES                    WAIT FOR STORAGE\n        LR    R4,R1                       GET ADDRESS OF WORK ARE\n        USING EXIT04W,R4           ESTIABLISH USING FOR WRK AREA\n        MVI   RESNAME,C' '                CLEAR THE RESOURCE NAME\n        MVC   RESNAME+1(L'RESNAME-1),RESNAME\n        MVC   RESNAME(0),0(R3)             MOVE THE RESOURCE NAME\n        EX    R2,*-6                   SET SCHEDULING ENVIRONMENT\n        CLC   RESNAME(5),=C'HERE '     IS THIS A SPECIAL CASE?\n        BE    SETINJCT                   IS SO SKIP SETTING WITH WLM...\n        MVC   IWMSEVWK(IWMSEVLN),IWMSEVL  SET IWMSEVAL PARM LIST\n\n        IWMSEVAL SCHENV=RESNAME,MF=(E,IWMSEVWK)\n\n        LTR   R15,R15\n        BNZ   RETURN0W            YES - BRANCH, CONTINUE\n*\n* OLD LOGIC BELOW: IF VALID DESTID THEN LET JES2 HANDLE IT...\n*\n\n*********************************************************************\n*                                                                   *\n*        SET THE SCHEDULING ENVIRONMENT IN THE JCT.                 *\n*                                                                   *\n*********************************************************************\n\nSETINJCT EQU   *\n         MVI   JCTSCHEN,C' '        BLANK INIT SCHEDULING ENVIRONMENT\n         MVC   JCTSCHEN+1(L'JCTSCHEN-1),JCTSCHEN  *\n         MVC   JCTSCHEN(0),RESNAME  EXECUTED INSTRUCTION\n         EX    R2,*-6               SET SCHEDULING ENVIRONMENT\n\n*********************************************************************\n*                                                                   *\n*        CONVERT THE \"/*ROUTE XEQ\" STATEMENT TO A JCL COMMENT       *\n*        STATEMENT.  THIS WILL PREVENT AN INVALID DESTINATION FROM  *\n*        CAUSING A JCL ERROR.                                       *\n*                                                                   *\n*********************************************************************\n\n         $RETWORK (R4)\n\n         B     RETURN8              BRANCH - SET RETURN CODE = 8\n\n*********************************************************************\n*                                                                   *\n*        RETURN TO CALLER.                                          *\n*                                                                   *\n*********************************************************************\n\nRETURN0W EQU   *\n         $RETWORK (R4)\nRETURN0  XR    R15,R15              SET RETURN CODE = 0\n         B     RETURN               BRANCH - CONTINUE\nRETURN8  L     R15,$F8              SET RETURN CODE = 8\nRETURN  $RETURN RC=(R15)            RETURN TO CALLER\n\n\n         IWMSEVAL MF=(L,IWMSEVL)   IWMSEVAL PARM LIST\nIWMSEVLN EQU   *-IWMSEVL\nROUTCARD DC    C'/*ROUTE '          \"/*ROUTE XEQ\" FIXED TEXT\nXEQ      DC    C'XEQ '                 FLOATING MODIFIER VALUE\nTRANSTBL DC    256X'00'             EXIT04 TRANSLATE TABLE\n         ORG   TRANSTBL+C' '\n         DC    X'FF'                ' '\n         ORG   TRANSTBL+256\n         LTORG\n\n         DROP  R10                  JCT\n\n        $MODEND ,\nEXIT04W  DSECT                     EXIT04 WORKAREA\nWORKID   DS    CL4                 WORK AREA ID\n         DS    CL4                 FOR ALIGNMENT\nRESNAME  DS    CL16                RESOURCE NAME\n         DS    0D\nIWMSEVWK DS    (IWMSEVLN)X         IWMSEVAL PARM LIST WORKAREA\nEXIT04WL EQU   *-EXIT04W           EXIT04 WORKAREA LENGTH\n\n         IWMSET\n         IWMYCON\n\n         END\n./ ADD NAME=LSES503J 0406-00234-05314-1453-00023-00018-00013-T0SM0\n//T0SM503J JOB  (4030,37),'REDO--LSES503',CLASS=X,MSGCLASS=A,\n// REGION=6M,\n//    NOTIFY=&SYSUID\n//*%PDSDOC 00 SMP APPLY LSES503\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI  <== UPDATE TO YOUR CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=THIS.DATASET.NAME(LSES503) <== UPDATE\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES503) BYPASS(APPLYCHECK).\n  RESETRC .\n  RECEIVE S(LSES503) SOURCEID(MELLON) .\n  SET BDY(TARGET).                      <== UPDATE TO YOUR TGT\n  APPLY S(LSES503) REDO.\n//\n./ ADD NAME=LSES504  0303-00234-05123-1440-00682-00720-00001-T0SM0\n++USERMOD(LSES504)\n /* ***************************************************************\n    ** * USER EXIT 4 B                                         * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707) REQ(LSES500) .\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STSCX04B),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STSCX04B)\n NAME STSCX04B(R)\n/*\n++SRC(STSCX04B) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\nSTSCX04B TITLE 'JECL CARD SCAN USER EXIT -- PROLOG'\n*\n* FUNCTIONS: THIS MODULE PROCESSES ALL OUR JECL STATEMENTS:\n*            - /*BEFORE <JOBNAME>\n*            - /*WITH <JOBNAME>\n*            - /*AFTER  <JOBNAME>\n*            - /*CNTL   <RESOURCE>(,SHR|EXC)\n*\n*\n* NOTES:     NONE.\n*\n*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE\n*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS\n*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED\n*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF\n*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE\n*  USEFULLNESS OF THE MATERIAL.\n*\n*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,\n*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE\n*  IN THE FUTURE.\n*\n*    SPECIAL THANKS GO TO BOB BREAK OF ST. LOUIS FOR THE ORIGINAL CODE\n*  TO PARSE THE \"/*ROUTE XEQ RESNAME\" CARDS AND SET THE APPROPRIATE\n*  EXECUTION ENVIRONMENT.\n*\n*    SPECIAL THANKS TO JUDY RUNT OF WISCONSIN ELECTRIC FOR THE ORIGINAL\n*  CODE TO HANDLE THE \"/*CNTL BEFORE|AFTER|WITH,RESNAME\" AND \"/*CNTL\n*  RESNAME,EXC|SHR\" ROUTINES.  THE USE OF THE BLOCK EXTENSION REUSABLE\n*  TABLES, BERT'S, TO EXTEND THE JCT AND JQE.\n*\n* ENTRY PT:  EXIT04B -- SUNTRUST'S JECL CARD SCAN EXIT.\n*\n* REVISION HISTORY:\n*\n*   DATE   NAME         DESCRIPTION OF CHANGE\n* -------- ------------ -----------------------------------------------\n*\n***********************************************************************\n         SPACE 3\n&RESOURC SETC  'NO'                ENABLE /*RESOURCE PROCESSING?\n&DEBUG   SETC  'NO'                DEBUGGING FLAG (NO/YES)\n         SPACE 3\n         PRINT OFF                 SUPRESS PRINTING HASP GLOBALS\n         COPY  $HASPGBL\n         PRINT ON                  RESTORE FULL PRINTING\nSTSCX04B $MODULE TITLE='SUNTRUST JECL CARD SCAN USER EXIT',            +\n               RMODE=ANY,                                              +\n               ENVIRON=JES2,                                           +\n               RPL,                                                    +\n               $BUFFER,            GENERATE HASP BUFFER DSECT          +\n               $CADDR,                                                 +\n               $CMB,               ($RDRWORK)                          +\n               $HASPEQU,           GENERATE HASP EQUATES               +\n               $HCT,               GENERATE HASP HCT DSECT             +\n               $HCCT,              ($JCTXGET)                          +\n               $JCT,               GENERATE HASP JCT DSECT             +\n               $JCTX,                                                  +\n               $JQE,               GENERATE HASP JQE DSECT             +\n               $MIT,               GENERATE HASP MIT DSECT             +\n               $MITETBL,                                               +\n               $PADDR,             GENERATE HASP PADDR DSECT           +\n               $PARMLST,                                               +\n               $PCE,               GENERATE HASP PCE DSECT             +\n               $PSV,                                                   +\n               $QSE,               ($HCT)                              +\n               $RDRWORK,           GENERATE HASP RDRWORK DSECT         +\n               $SAFINFO,           ($RDRWORK)                          +\n               $TRE,               ($JCTXGET)                          +\n               $XECB,              ($HCT)                              +\n               $USERCBS            GENERATE USER CBS\n         TITLE 'JECL CARD SCAN USER EXIT'\n***********************************************************************\n*\n*         J C L  /  J E C L  S C A N  S U P P O R T\n*\n***********************************************************************\n*\n* ENTRY POINT DOCUMENTATION:\n*\n*     REGISTERS AT ENTRY;\n*\n*                   R0  =  0 - INDICATES JES2 CONTROL CARD\n*                          4 - INDICATES JCL STATEMENT\n*\n*                   R1  = ADDRESS OF 3 WORD PARM LIST:\n*                         WORD1 - (+0) ADDRESS OF THE CONTROL\n*                                      STATEMENT IMAGE BUFFER\n*                         WORD2 - (+4) ADDRESS OF THE EXIT FLAG\n*                                      BYTE, RDWFLAGX, IN PCE\n*                         WORD3 - (+8) ADDRESS OF THE JCTXWRK\n*                                      FIELD IN THE JCT (80 BYTES)\n*\n*                   R2  = N/A\n*                   R3  = N/A\n*                   R4  = N/A\n*                   R5  = N/A\n*                   R6  = N/A\n*                   R7  = N/A\n*                   R8  = N/A\n*                   R9  = N/A\n*                   R10 = JCT (IF AVAILABLE)\n*                   R11 = HCT\n*                   R12 = N/A (WILL BE OUR BASE REGISTER)\n*                   R13 = PCE\n*                   R14 = RETURN ADDRESS\n*                   R15 = ENTRY ADDRESS\n*\n***********************************************************************\n         SPACE 1\n         USING JCT,R10             ADDRESS THE JCT\n         USING HCT,R11             ADDRESS THE HCT\n         USING PCE,R13             ADDRESS THE PCE\n*\nEXIT04B  $ENTRY BASE=R12           PROVIDE PROCESSOR ENTRY POINT\n         $SAVE ,                   SAVE CALLERS REGISTERS\n         LR    R12,R15             ESTABLISH BASE\n*\n         LR    R9,R1               SAVE PARM REG 1\n         L     R2,0(R9)            POINT TO STATEMENT IMAGE.\n         TM    RDWFLAGX,RDWXCONT   IS THIS A CONTINUATION CARD\n         BO    X004RC00            YES - RETURN TO JES2\n         L     R3,8(R9)            POINT TO JCTXWRK TO BE SURE\n         LTR   R3,R3                 WE ARE IN A JOB.\n         BZ    X004RC00            NO -- RETURN TO JES2\n         LTR   R10,R10             ARE WE IN A JOB (DOUBLE CHECK)\n         BZ    X004RC00            NO -- RETURN TO JES2\n         LTR   R0,R0               IS THIS A JES2 JECL STATEMENT?\n         BZ    JECL                YES - GO PROCESS\n         SPACE 1\n**********************************************************************\n*\n*        J C L   C A R D S   P R O C E S S E D   H E R E\n*\n**********************************************************************\n         SPACE 1\nRJCLOK   DS    0H\n         B     X004RC00            RETURN TO JES2\n         SPACE 3\n**********************************************************************\n*\n*        J E C L   C A R D S   P R C E S S E D   H E R E\n*\n**********************************************************************\n         SPACE 1\nJECL     DS    0H\n         AIF   ('&DEBUG' EQ 'NO').NDBMSGS   SKIP DEBUGGING MESSAGES\n         MVC   JCTXWRK(L'DBUGMSG0),DBUGMSG0   MOVE MSG TO BUFFER\n         MVC   JCTXWRK+L'DBUGMSG0(30),0(R2)     AND 30 BYTES OF STMT\n        $WTO   JCTXWRK,L'DBUGMSG0+30,JOB=YES, LOG THE MSG              X\n               ROUTE=$LOG+$MAIN,CLASS=$TRIVIA,PRI=$ST\n.NDBMSGS ANOP  ,                   SKIPPED DEBUGGING MESSAGES\n         CLC   RCNTLCRD,2(R2)      IS THIS A /*CNTL CARD?\n         BE    RCNTCARD            YES - GO PROCESS IT.\n         CLC   RAFTRCRD,2(R2)      IS THIS A /*AFTER CARD?\n         BE    RAFTCARD            YES - GO PROCESS IT.\n         CLC   RWITHCRD,2(R2)      IS THIS A /*WITH CARD?\n         BE    RWTHCARD            YES - GO PROCESS IT.\n         CLC   RBEFRCRD,2(R2)      IS THIS A /*BEFORE CARD?\n         BE    RBEFCARD            YES - GO PROCESS IT.\n         CLC   RROUTCRD,2(R2)      IS THIS A /*ROUTE CARD?\n         BE    RRUTCARD            YES - GO PROCESS IT.\n         B     X004RC00            IF NONE OF THOSE RETURN TO JES\n*\n         TITLE 'JECL CARD SCAN USER EXIT -- /*BEFORE CARD'\n**********************************************************************\n*\n*        / * B E F O R E   J E C L   C A R D\n*\n**********************************************************************\n         SPACE 1\nRBEFCARD DS    0H\n         USING STJCTX,R7\n         BAL   R7,JCTXGET          GET OUR JCT EXTENSION\n         LTR   R7,R1               CHECK RETURN CODE / JCTX ADDR\n         BZ    X004RC12            NO JCTX -- ERROR OUT\n*\n         OI    UJCXMFLG,UBRBEF     SHOW THERE IS A /*BEFORE CARD\n         MVC   RDWMSG(L'RBEAFMSG),RBEAFMSG SET BEFORE AFTER MSG\n         MVC   RDWMSG+7(6),=C'BEFORE' INDICATE TYPE ON MESSAGE\n         LA    R2,8(,R2)           SET START OF SCAN FOR JOBNAME\n         LA    R5,UJCXBFOR         WHERE TO SAVE THE NAME\n         LA    R6,50               MAX POSITIONS TO SEARCH\n*\n* SKIP BLANKS BEFORE THE JOBNAME.\n*\nRFINDCAR DS    0H\n         CLI   0(R2),C' '          CHECK FOR A BLANK\n         BNE   RPUTNAM             NO -- FOUND START OF JOBNAME\n         LA    R2,1(,R2)           POINT TO NEXT POSITION\n         BCT   R6,RFINDCAR         LOOP TILL END\n         B     RBADBEFR            ILLEGAL BEFORE CARD\n*\n* UPDATE THE JCTX WITH THE BEFORE/AFTER JOBNAME.\n*\nRPUTNAM  DS    0H\n         MVC   0(8,R5),0(R2)       PUT NAME IN\n         MVC   RDWMSG+24(8),0(R2)  MOVE JOBNAME INTO MESSAGE\n         $WTO  RDWMSG,L'RBEAFMSG,JOB=YES,              PUT OUT         C\n               ROUTE=$LOG+$MAIN,CLASS=$ACTION,PRI=$ST  THE MESSAGE\n         B     X004RC08            GO TERMINATE NORMALLY\n*\nRBADBEFR EQU   *\n         $MID  935                 SHOW MESSAGE ID.\n         MVC   JCTXWRK(80),RBADBEFM SET IN ERROR MESSAGE\n         OI    RDWFLAGX,RDWXXSEM   SHOW MESSAGE SUPPLIED\n         B     X004RC12            GO TERMINATE JOB\n*\n         TITLE 'JECL CARD SCAN USER EXIT -- /*AFTER CARD'\n*****************************************************************\n*\n*        / * A F T E R   J E C L   C A R D\n*\n*  SYNTAX: /*AFTER <JOBNAME>\n*\n*****************************************************************\n         SPACE 1\nRAFTCARD DS    0H\n         BAL   R7,JCTXGET          GET OUR JCT EXTENSION\n         LTR   R7,R1               CHECK RETURN CODE / JCTX ADDR\n         BZ    X004RC12            NO JCTX -- ERROR OUT\n*\n         OI    UJCXMFLG,UBRAFT     SET TO /*AFTER CARD\n         MVC   RDWMSG(L'RBEAFMSG),RBEAFMSG SET BEFORE/AFTER MSG\n         MVC   RDWMSG+7(6),=C'AFTER ' INDICATE TYPE ON MESSAGE\n         LA    R2,8(,R2)           SET START OF SCAN\n         LA    R5,UJCXAFTN         SAVE IN AFTER NAME AREA\n         LA    R6,50               MAX POSITIONS TO SEARCH\n*\n* SCAN FOR START OF JOB NAME\n*\nRFINDCA1 DS    0H\n         CLI   0(R2),C' '          CHECK FOR A BLANK\n         BNE   RPUTNAM             NO - FOUND START OF JOBNAME\n         LA    R2,1(,R2)           POINT TO NEXT POSITION\n         BCT   R6,RFINDCA1         LOOP TILL END\n*\n* NO JOBNAME FOUND -- ISSUE ERROR MESSAGE\n*\n         $MID  936                 SHOW MESSAGE ID.\n         MVC   JCTXWRK(80),RBADAFTM SET IN ERROR MESSAGE\n         OI    RDWFLAGX,RDWXXSEM   SHOW MESSAGE SUPPLIED\n         B     X004RC12            GO TERMINATE JOB\n*****************************************************************\n*\n*        / * W I T H    J E C L   C A R D\n*\n*  SYNTAX: /*WITH <JOBNAME>\n*\n*****************************************************************\nRWTHCARD DS    0H\n         BAL   R7,JCTXGET          GET OUR JCT EXTENSION\n         LTR   R7,R1               CHECK RETURN CODE / JCTX ADDR\n         BZ    X004RC12            NO JCTX -- ERROR OUT\n*\n         OI    UJCXMFLG,UBRWITHF   SET TO /*WITH CARD\n         MVC   RDWMSG(L'RBEAFMSG),RBEAFMSG SET BEFORE/AFTER MSG\n         MVC   RDWMSG+7(6),=C'WITH  ' INDICATE TYPE ON MESSAGE\n         LA    R2,7(,R2)           SET START OF SCAN\n         LA    R5,UJCXWITH         POINT TO WITH JOBNAME AREA\n         LA    R6,50               MAX POSITIONS TO SEARCH\n*\n* SCAN FOR START OF JOB NAME\n*\nRFINDCAW DS    0H\n         CLI   0(R2),C' '          CHECK FOR A BLANK\n         BNE   RPUTNAM             NO - FOUND START OF JOBNAME\n         LA    R2,1(,R2)           POINT TO NEXT POSITION\n         BCT   R6,RFINDCAW         LOOP TILL END\n*\n* NO JOBNAME FOUND -- ISSUE ERROR MESSAGE\n*\n         $MID  936                 SHOW MESSAGE ID.\n         MVC   JCTXWRK(80),RBADAFTM SET IN ERROR MESSAGE\n         OI    RDWFLAGX,RDWXXSEM   SHOW MESSAGE SUPPLIED\n         B     X004RC12            GO TERMINATE JOB\n         TITLE 'JECL CARD SCAN USER EXIT -- /*CNTL CARD'\n**********************************************************************\n*\n*        / * C N T L   J E C L   C A R D\n*\n*  SYNTAX: /*CNTL  <RESOURCE>(,SHR|EXC)\n*\n**********************************************************************\n         SPACE 1\nRCNTCARD DS    0H\n         BAL   R7,JCTXGET          GET OUR JCT EXTENSION\n         LTR   R7,R1               CHECK RETURN CODE / JCTX ADDR\n         BZ    X004RC12            NO JCTX -- ERROR OUT\n*\n         OI    UJCXMFLG,UBRCNTL    SET TO /*CNTL CARD\n         LA    R2,6(,R2)           SET START OF SCAN\n         LA    R4,30               MAX FOR SEARCH\n*\n* SCAN FOR START OF RESOURCE NAME\n*\nRCTLFIND DS    0H\n         CLI   0(R2),C' '          CHECK FOR A BLANK\n         BNE   RCTLGOT             NO - GOT NEXT WORD\n         LA    R2,1(,R2)           BUMP TO NEXT POSITION\n         BCT   R4,RCTLFIND         CONTINUE\n         B     RBADCNTL            ERROR IF HERE\n*\n* SCAN FOR END OF RESOURCE NAME\n*\nRCTLGOT  DS    0H\n         LA    R4,8                MAX FOR SEARCH\n         LR    R6,R2               SAVE STARTING POINT\n         MVC   RDWMSG(L'RCNTMSG1),RCNTMSG1 SET IN RESOURCE MSG\n         MVC   RDWMSG+22(12),0(R2) MOVE IN CONTROL INFO.\n         $WTO  RDWMSG,L'RCNTMSG1,JOB=YES,     PUT OUT                  X\n               ROUTE=$LOG+$MAIN,CLASS=$ACTION,PRI=$ST THE MSG\n*\n* SCAN FOR END OF RESOURCE NAME\n*\nREXCFIND DS    0H\n         CLI   1(R6),C','          CHECK FOR A COMMA\n         BE    REXCGOT             YES - GOT IT\n         CLI   1(R6),C' '          BLANK TERMINATES NAME ALSO\n         BE    REXCGOT             GOT IT\n         LA    R6,1(,R6)           POINT TO NEXT POSITION\n         BCT   R4,REXCFIND         CONTINUE\n         B     RBADCNTL            ERROR IF HERE\n*\n* CHECK TYPE OF CONTROL DESIRED (SHR OR EXC) AND SET FLAGS ACCORDINGLY\n*\nREXCGOT  DS    0H\n         CLC   2(3,R6),=C'EXC'     EXCLUSIVE CNTL DESIRED\n         BNE   RTRYSHR             NO TRY SHR\n         MVI   UJCXWORK,C'E'       SHOW ITS EXCLUSIVE\n*\n* ADD THE NAME AND THE SHARING TYPE TO UJCXDNAM.\n*\nREXCPUT  DS    0H\n         SR    R6,R2               GET LENGTH-1 OF RESOURCE NAME\n         SLR   R5,R5               ZERO FOR IC\n         IC    R5,UJCXMFLG         FLAGS AND CNTL COUNT\n         SRL   R5,4                SHIFT OUT FLAGS\nRCTLCTL  DS    0H\n         LA    R1,UBRNCTL          MAX # OF NAMES\n         CR    R5,R1               LESS THAN MAX #\n         BNL   RBADCNT1            NO - TOO MANY SPECIFICATIONS\n         MH    R5,=Y(UBRDNAML)     MULTIPLY BY FIELD LENGTH\n         LA    R1,UJCXDNAM(R5)     PROPER NAME DISPLACEMENT\n         MVC   0(8,R1),$BLANKS     BLANK OUT NAME\n         EX    R6,RMOVCNTL         MOVE CNTL NAME TO UJCXDNAM\n         MVC   8(1,R1),UJCXWORK    COPY THE SHARE TYPE BYTE TO UJCXDNAM\n*\n         IC    R5,UJCXMFLG         GET FLAGS AND CNTL COUNT\n         LA    R5,16(0,R5)         INCREMENT CNTL COUNT BY ONE\n         STC   R5,UJCXMFLG         UPDATE CNTL COUNT\n         B     X004RC08            GO END NORMALLY\n*\nRMOVCNTL MVC   0(0,R1),0(R2)       MOVE CNTL NAME TO UJCXDNAM\n*\nRTRYSHR  DS    0H\n         MVI   UJCXWORK,C'S'       SHOW ITS SHARE\n         CLC   2(3,R6),=C'SHR'     IS IT SHR\n         BE    REXCPUT             YES, MOVE NAME AND EXIT\n         CLI   1(R6),C' '          BLANK (DEFAULT)\n         BE    REXCPUT             YES - MOVE NAME AND EXIT\n*\nRBADCNTL MVC   JCTXWRK(80),RBADCNTM SET IN ERROR MESSAGE\n         $MID  937                 SHOW MESSAGE ID.\n         OI    RDWFLAGX,RDWXXSEM   SHOW MESSAGE SUPPLIED\n         B     X004RC12            GO TERMINATE JOB\n*\nRBADCNT1 DS    0H\n         $MID  938                 SHOW MESSAGE ID.\n         MVC   JCTXWRK(80),RBADCTL1 SET IN ERROR MESSAGE\n         OI    RDWFLAGX,RDWXXSEM   SHOW MESSAGE SUPPLIED\n         B     X004RC12            GO TERMINATE JOB\n*\n         TITLE 'JECL CARD SCAN USER EXIT -- /*ROUTE CARD'\n***********************************************************************\n*\n*        / * R O U T E   J E C L   C A R D\n*\n*  SYNTAX: /*ROUTE XEQ  <RESOURCE>\n*\n***********************************************************************\n         SPACE 1\nRRUTCARD DS    0H\n         LA    R2,7(,R2)           SET START OF SCAN\n         LA    R4,30               MAX FOR SEARCH\n*\n* SCAN FOR \"XEQ\" OR OTHER TYPE OF ROUTING (PRINT/PUNCH)\n*\nRRUTFIND CLI   0(R2),C' '          CHECK FOR A BLANK\n         BNE   RROUTGOT            NO -- FOUND ROUTING TYPE\n         LA    R2,1(,R2)           BUMP TO NEXT POSITION\n         BCT   R4,RRUTFIND         CONTINUE\n         B     X004RC00            ERROR IF HERE, LET JES FIND IT\n*\nRROUTGOT DS    0H\n         CLC   0(3,R2),=C'XEQ'     IS IT RESOURCE ROUTING?\n         BNE   X004RC00            NO -  RETURN TO JES2\n*\n* SCAN FOR RESOURCE NAME\n*\nRXEQCARD DS    0H\n         LA    R2,3(,R2)           SET FOR THIRD OPERAND\n         LA    R3,60               MAXIMUM LENGTH FOR SEARCH\n*\nRRCOMP3  CLI   0(R2),C' '          CHECK FOR A BLANK\n         BNE   RXEQOP3             NO - PROCESS THIRD OPERAND\n         LA    R2,1(R2)            STEP TO NEXT CHARACTER\n         BCT   R3,RRCOMP3          LOOP TILL END\n         B     RBADROUT            ERROR IF END OF CARD\n*\nRXEQOP3  DS    0H\n*                                  SPECIALIZED PROCESSING FOR\n*                                  /*ROUTE XEQ STUFF STATEMENTS COULD\n*                                  BE PLACED HERE..... NORMAL ROUTING\n*                                  IS HANDLED IN EXIT04A\n         B     X004RC00            NO -- MAY BE JES2 EXECUTION         X\n                                         ROUTING CARD; GIVE TO JES2\n         SPACE 2\nRBADROUT DS    0H\n         $MID  940                 SHOW MESSAGE ID.\n         MVC   JCTXWRK(80),RBADRUTM MOVE ERROR MESSAGE INTO WORK AREA\n         MVC   JCTXWRK+9(8),0(R2)  SET RESOURCE NAME INTO MESSAGE\n         OI    RDWFLAGX,RDWXXSEM   SHOW MESSAGE SUPPLIED\n         B     X004RC12            GO TERMINATE JOB\n         EJECT\n***********************************************************************\n*\n*     C O M M O N   R E T U R N   P O I N T S\n*\n***********************************************************************\n         SPACE 3\nX004RC00 DS    0H\n         XR    R15,R15             SET RC=0 -- CALL OTHER EXITS\n         B     X004RTN             GO RETURN\n         SPACE 2\nX004RC08 DS    0H\n         LA    R15,8               SET RC=8 -- EXIT HANDLED THE CARD\n         B     X004RTN             GO RETURN\n         SPACE 2\nX004RC12 DS    0H\n         LA    R15,12              SET RC=12 -- CANCEL THE JOB\n         B     X004RTN             GO RETURN\n         SPACE 2\nX004RTN  DS    0H                  COMMON RETURN\n         $RETURN RC=(R15)          RETURN TO CALLER\n         TITLE 'JECL CARD SCAN USER EXIT -- CONSTANTS AND DSECTS'\n***********************************************************************\n*\n*        MISCELLANEOUS CONSTANTS AND DSECTS FOR JCL/JECL SCAN\n*\n***********************************************************************\nDBLWORD  DS    D                   DOUBLE WORD WORK AREA\nRES1DGIT DS    CL1                 1 DIGIT STORAGE AREA\nRES2DGIT DS    CL2                 2 DIGIT STORAGE AREA\n*\nRJOBPCRD DC    C'JOBPARM '         JES2   /*JOBPARM CARD ID.\nRCNTLCRD DC    C'CNTL'             MELLON /*CNTL    CARD ID.\nRWITHCRD DC    C'WITH'             MELLON /*WITH    CARD ID.\nRAFTRCRD DC    C'AFTER'            MELLON /*AFTER   CARD ID.\nRBEFRCRD DC    C'BEFORE'           MELLON /*BEFORE  CARD ID.\nRROUTCRD DC    C'ROUTE'            JES2   /*ROUTE   CARD ID.\nRRESCRD  DC    C'RESOURCE'         STSC  /*RESOURCE CARD ID.\n*\nJOBPEYEC DC    CL8'**COPY**'       EYECATCHER FOR OUR /*JOBPARM CARD\n*\nJOBPOUTM DC    CL80'OUTNAME VALUE IS MISSING OR LONGER THAN 8 CHARACTERX\n               S.'\n*\nRBADBEFM DC    CL80'JOBNAME SPECIFIED ON /*BEFORE STATEMENT IS INVALID.X\n               '\n*\nRBADAFTM DC    CL80'JOBNAME SPECIFIED ON /*AFTER STATEMENT IS INVALID.'\n*\nRBADCNTM DC    CL80'PARM SPECIFIED ON /*CNTL STATEMENT IS INVALID.'\n*\nRBADCTL1 DC    CL80'THERE HAVE BEEN TOO MANY /*CNTL CARDS SPECIFIED.  TX\n               HE MAXIMUM IS 4.'\n*\nROUTORDM DC    CL80'/*BEFORE AND /*AFTER STATEMENTS ARE OUT OF ORDER.'\n*\nRBADRUTM DC    CL80'RESOURCE RRRRRRRR SPECIFIED ON ROUTE CARD INVALID.'\n*\n         AGO   .RRNITE3            SKIP RESOURCE ROUTING MESSAGES\nRCPUMSG1 DC    CL80'CPU SPECIFIED ON ROUTE CARD INVALID.'\n*\nRROUMSG1 $MSG  942,'* -- RESOURCE ROUTING = ******** --'\n.RRNITE3 ANOP  ,                   SKIPPED ROUTING MESSAGES\n*\n         AIF   ('&RESOURC' EQ 'NO').NORES2 SKIP /*RESOURCE CARD\nRBADRESM DC    CL80'PARM SPECIFIED ON /*RESOURCE CARD IS INVALID.'\n*\nRRESMSG1 $MSG  945,'* -- RESOURCE INFO = *********** --'\n.NORES2  ANOP  ,                   SKIPPED /*RESOURCE CARD PROCESSING\n*\nRCNTMSG1 $MSG  943,'* -- CONTROL INFO = ************ --'\n*\nRBEAFMSG $MSG  944,'* -- ****** JOBNAME = ********   --'\n*\n         AIF   ('&DEBUG' EQ 'NO').NDBMSGT   SKIP DEBUGGING MESSAGES\nDBUGMSG0 $MSG  000,'STSCX04B DEBUG:  JECL='\n.NDBMSGT ANOP  ,                   SKIPPED DEBUGGING MESSAGES\n*\n         SPACE 2\n         SPACE 2\n         LTORG ,\n*\n         TITLE 'JECL CARD SCAN USER EXIT -- GET OUR JCT EXTENSION'\n**********************************************************************\n*\n* SUBROUTINE TO LOCATE OUR JCT EXTENSION\n*\n* ENTRY POINT DOCUMENTATION:\n*\n* CALLING SEQUENCE:\n*\n*        BAL   R7,JCTXGET          GET OUR JCT EXTENSION\n*        LTR   RX,R1               GET JCTX ADDR / RETURN CODE\n*        BZ    NOJCTX              NO JCTX\n*\n* REGISTER USAGE:\n*\n*     ON ENTRY    USAGE WITH SUBROUTINE                  ON RETURN\n*     ----------- -------------------------------------- -------------\n* R0  N/A         USED BY $JCTXGET                       DESTROYED\n* R1  N/A         USED BY $JCTXGET                       ADDR OF JCTX\n* R2  N/A         UNUSED                                 NO CHANGE\n* R3  N/A         UNUSED                                 NO CHANGE\n* R4  N/A         UNUSED                                 NO CHANGE\n* R5  N/A         UNUSED                                 NO CHANGE\n* R6  N/A         UNUSED                                 NO CHANGE\n* R7  RETURN ADDR UNUSED                                 NO CHANGE\n* R8  N/A         UNUSED                                 NO CHANGE\n* R9  N/A         UNUSED                                 NO CHANGE\n* R10 JCT ADDR    ADDRESS OF THE JCT (MUST BE VALID)     NO CHANGE\n* R11 HCT ADDR    UNUSED                                 NO CHANGE\n* R12 BASE REG    BASE REG                               NO CHANGE\n* R13 PCE ADDR    UNUSED                                 NO CHANGE\n* R14 N/A         UNUSED                                 NO CHANGE\n* R15 N/A         UNUSED                                 NO CHANGE\n*\n**********************************************************************\n         SPACE 1\nJCTXGET  DS    0H\n        $JCTXGET  JCT=(R10),       GET OUR JCT EXTENSION               X\n               TYPE='USER',MOD=1,                                      X\n               NOTFOUND=MAKEJCTX,                                      X\n               FOUND=GOTJCTX,                                          X\n               ERRET=BADJCTX       SPECIFY ERROR RETURN\nGOTJCTX  BR    R7                  RETURN WITH JCTX ADDR IN R1\nMAKEJCTX EQU   *\n        $JCTXADD  JCT=(R10),       GET OUR JCT EXTENSION               X\n               TYPE='USER',MOD=1,                                      X\n               LENGTH=UJCXSLN1,                                        X\n               OKRET=GOTJCTX,      GOOD RETURN ( WE MADE ONE )         X\n               NOSPACE=JCTXSERR,   NO SPACE LEFT TO ADD A JCTX         X\n               FOUND=LOGICERR,     THIS SHOULD NOT HAPPEN              X\n               ERRET=BADJCTX       SPECIFY ERROR RETURN\nBADJCTX  DS    0H\n         L     R1,=A(BADJCTXM)     GET MSG ADDRESS\n         LA    R0,L'BADJCTXM       GET MSG LENGTH\n        $WTO   (R1),(R0),ROUTE=$MAIN,CLASS=$ALWAYS\n         SR    R1,R1               ZERO FOR ERROR RETURN CODE\n         BR    R7                  RETURN WITH ERROR\n*\nBADJCTXM $MSG  999,'STSCX04B-E UNABLE TO LOCATE JCTX.'\nLOGICERR DS    0H\n         L     R1,=A(LOGERRM)      GET MSG ADDRESS\n         LA    R0,L'LOGERRM        GET MSG LENGTH\n        $WTO   (R1),(R0),ROUTE=$MAIN,CLASS=$ALWAYS\n         SR    R1,R1               ZERO FOR ERROR RETURN CODE\n         BR    R7                  RETURN WITH ERROR\n*\nLOGERRM  $MSG  999,'STSCX04B-E LOGIC ERROR CREATING JCTX.'\nJCTXSERR DS    0H\n         L     R1,=A(SPCERRM)      GET MSG ADDRESS\n         LA    R0,L'SPCERRM        GET MSG LENGTH\n        $WTO   (R1),(R0),ROUTE=$MAIN,CLASS=$ALWAYS\n         SR    R1,R1               ZERO FOR ERROR RETURN CODE\n         BR    R7                  RETURN WITH ERROR\n*\nSPCERRM  $MSG  999,'STSCX04B-E NO SPACE LEFT FOR NEW JCTX.'\n         AGO   .NORTXT2            SKIP TO VERIFY NOT USED ANYMORE\n         TITLE 'JECL CARD SCAN USER EXIT -- TEXT SCAN SUBROUTINE'\n**********************************************************************\n*\n*               T E X T   S C A N   R O U T I N E\n*\n**********************************************************************\n* ENTRY POINT DOCUMENTATION:\n*\n*     REGISTERS AT ENTRY;\n*\n*                   R0  = ADDRESS OF TEXT ARGUMENT -\n*                         1 BYTE MACHINE LEN + TEXT\n*                   R1  = ADDRESS OF 80 BYTE CARD IMAGE\n*                   R10 = JCT\n*                   R11 = HCT\n*                   R12 = R12\n*                   R13 = PCE\n*                   R14 = RETURN\n*                   R15 = ENTRY\n*\n*     REGISTERS AT EXIT;\n*\n*                   R1  =       = ADDRESS OF TEXT (IF LOCATED)\n*                   R15 =  00   = TEXT LOCATED\n*                       =  04   = TEXT NOT LOCATED\n*\n**********************************************************************\n         SPACE 1\n         USING JCT,R10             ADDRESS THE JCT\n         USING HCT,R11             ADDRESS THE HCT\n         USING PCE,R13             ADDRESS THE PCE\n         SPACE 3\nRTXTSCAN $ENTRY BASE=R12           ROUTINE ENTRY POINT\n         $SAVE ,                   SAVE CALLERS REGISTERS\n         LR    R12,R15             ESTABLISH BASE\n*                                  R1 => CARD IMAGE\n         LA    R2,1                R2 => INCREMENT\n         LA    R3,79(,R1)          R3 => SEARCH TERMINATION POINT\n         LR    R4,R0               COPY PARM REG 0\n         XR    R5,R5               CLEAR FOR WORK\n         IC    R5,0(,R4)           R5 = MACHINE TEXT STRING LEN\n         LA    R4,1(,R4)           R4 => TARGET TEXT STRING\n         SR    R3,R5               R3 => ADJUSTED TERMINATION\n         SPACE 1\nRTXTLOOP DS    0H                  LOOP SEARCHING FOR TEXT\n         EX    R5,RTXTCLC          IS THIS A MATCH ??\n         BE    RTXTFND             YES, EXIT LOOP\n         BXLE  R1,R2,RTXTLOOP      NO, INCREMENT & LOOP AGAIN\n         LA    R15,4               SET RC=4\n         B     RTXTEXIT            GO RETURN TO CALLER\n         SPACE 1\nRTXTFND  DS    0H                  SPECIFIED TEXT FOUND\n         $STORE (R1)               PASS BACK POINTER TO TEXT\n         XR    R15,R15             SET RC=0\nRTXTEXIT DS    0H\n         $RETURN RC=(R15)          RETURN TO CALLER\n         SPACE 1\nRTXTCLC  CLC   0(*-*,R1),0(R4)     *** E X E C U T E D   ***\n         SPACE 1\n         LTORG ,                   EXPAND LITERAL POOL HERE\n         SPACE 1\n         DROP  R10,R11,R13\n.NORTXT2 ANOP  ,\n         TITLE 'JECL CARD SCAN USER EXIT -- EPILOG'\n         $MODEND ,\n         END   ,\n./ ADD NAME=LSES504J 0404-00234-05314-1427-00023-00018-00004-T0SM0\n//T0SM504J JOB  (4030,37),'REDO--LSES504',CLASS=X,MSGCLASS=A,\n//  REGION=6M,\n//    NOTIFY=&SYSUID\n//*\n//*%PDSDOC 00 SMP APPLY LSES504\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI <== UDPATE TO YOUR CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=THIS.DATA.SET.NAME(LSES504) <== UPDATE\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES504) BYPASS(APPLYCHECK).\n  RESETRC .\n  RECEIVE S(LSES504) SOURCEID(MELLON) .\n  SET BDY(TARGET).                         <== UPDATE TO YOUR TGT\n  APPLY S(LSES504) REDO.\n./ ADD NAME=LSES505  0202-00234-03317-2235-00777-00786-00001-T0SM1\n++USERMOD(LSES505)\n /* ***************************************************************\n    ** * USER EXIT 5 A                                         * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707) .\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STSCX05A),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STSCX05A)\n NAME STSCX05A(R)\n/*\n++SRC(STSCX05A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\n PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1,REUS=REFR) '\n* *%PDSDOC 00 JES2 EXIT05 ADDS $REPEXIT AND $ADDEXIT COMMANDS\n*********************************************************************\n*                                                                   *\n*                        HASP EXIT 05                               *\n*                                                                   *\n*     THIS EXIT PROCESSES THE $REPEXIT AND $ADDEXIT JES2 COMMANDS   *\n*                                                                   *\n*     > $REPEXIT - REPLACE A JES2 EXIT MODULE.  COMMAND SYNTAX IS   *\n*                  \"$REPEXIT,MODNAME\".  THE FOLLOWING RULES AND     *\n*                  RESTRICTIONS APPLY TO THE USE OF $REPEXIT:       *\n*               1. THE EXIT MODULE TO BE REPLACED MUST BE A JES2    *\n*                  MODULE.  THE EXIT ENVIRONMENT MAY BE \"JES2\",     *\n*                  \"SUBTASK\", \"USER\", OR \"FSS\".                     *\n*               2. THE EXIT MODULE MUST HAVE BEEN PREVIOUSLY LOADED *\n*                  BY A LOADMOD JES2PARM STATEMENT, OR HASPINIT     *\n*                  DURING THE LAST JES2 INITIALIZATION, OR BY A     *\n*                  PREVIOUS $REPEXIT COMMAND.                       *\n*               3. THE ROUTINE NAMES AND NUMBER OF ROUTINES THAT    *\n*                  ARE ASSOCIATED WITH THE EXIT CANNOT BE CHANGED - *\n*                  $REPEXIT WILL IGNORE NEW/CHANGED ROUTINE NAMES.  *\n*                  IF EITHER OF THESE NEEDS TO BE CHANGED, USE THE  *\n*                  $ADDEXIT COMMAND TO ADD A NEW EXIT LOAD MODULE.  *\n*               4. IF THE ORIGINAL MODULE RESIDES IN THE JES2       *\n*                  PRIVATE AREA, THE NEW COPY WILL BE LOADED INTO   *\n*                  JES2 PRIVATE.  IF THE ORIGINAL MODULE DOES NOT   *\n*                  RESIDE IN THE JES2 PRIVATE AREA, THE NEW COPY    *\n*                  WILL BE LOADED INTO CSA.                         *\n*               5. THE NEW COPY OF THE MODULE MUST BE FOUND IN AN   *\n*                  APF AUTHORIZED LNKLSTXX LIBRARY.                 *\n*     > $ADDEXIT - ADD A JES2 EXIT MODULE.  COMMAND SYNTAX IS       *\n*                  \"$ADDEXIT,MODNAME,EXIT#\".  EXIT# CAN RANGE FROM  *\n*                  1 TO 255 AND MUST BE SPECIFIED.                  *\n*                  THE FOLLOWING RULES AND RESTRICTIONS APPLY TO    *\n*                  THE USE OF $ADDEXIT:                             *\n*               1. THE EXIT MODULE TO BE ADDED MUST BE A JES2       *\n*                  MODULE.  THE EXIT ENVIRONMENT MAY BE \"JES2\",     *\n*                  \"SUBTASK\", \"USER\", OR \"FSS\".                     *\n*               2. THE EXIT MUST NOT BE CURRENTLY DEFINED TO JES2   *\n*                  OR A NEW COPY WILL NOT BE LOADED AND DEFINED.    *\n*               3. THE NEW EXIT MODULE WILL BE LOADED INTO EITHER   *\n*                  JES2 PRIVATE OR CSA, DEPENDING ON THE EXIT       *\n*                  ENVIRONMENT.                                     *\n*               4. THE COPY OF THE EXIT MODULE TO BE ADDED MUST BE  *\n*                  FOUND IN AN APF AUTHORIZED LNKLSTXX LIBRARY.     *\n*               5. THE NEWLY ADDED EXIT MODULE AND ROUTINES MUST BE *\n*                  DEFINED IN JES2PARM BEFORE THE NEXT TIME JES2 IS *\n*                  RESTARTED.  IF THIS IS NOT DONE, AN EXIT MODULE  *\n*                  THAT WAS LOADED INTO JES2 PRIVATE WILL BE LOST   *\n*                  ON A SUBSEQUENT RESTART.                         *\n*                                                                   *\n*     ENTRY POINT: EXIT05                                           *\n*                                                                   *\n*     INPUT REGISTERS:                                              *\n*        R0-4   N/A                                                 *\n*        R5     POINTER TO CURRENT OPERAND ADDRESS                  *\n*        R6     INCREMENT VALUE OF 4                                *\n*        R7     POINTER TO ADDRESS OF LAST OPERAND                  *\n*        R8-10  N/A                                                 *\n*        R11    HCT ADDRESS                                         *\n*        R12    N/A                                                 *\n*        R13    PCE ADDRESS                                         *\n*        R14    RETURN ADDRESS                                      *\n*        R15    ENTRY ADDRESS                                       *\n*                                                                   *\n*     OUTPUT REGISTERS:                                             *\n*        R0     UNCHANGED OR $CRET MESSAGE LENGTH                   *\n*        R1-14  UNCHANGED                                           *\n*        R15    RETURN CODE                                         *\n*                                                                   *\n*     REGISTER USAGE(INTERNAL):                                     *\n*        R0-8   WORK REGISTERS                                      *\n*        R9     WORKAREA ADDRESS                                    *\n*        R10    JCT ADDRESS                                         *\n*        R11    HCT ADDRESS                                         *\n*        R12    BASE REGISTER                                       *\n*        R13    PCE ADDRESS                                         *\n*        R14-15 WORK AND LINKAGE REGISTERS                          *\n*                                                                   *\n*     AUTHOR: BOB BREAK                                             *\n*             ST. LOUIS, MO.                                      *\n*                                                                   *\n*********************************************************************\n\n         COPY  $HASPGBL\n\nSTSCX05A $MODULE ENVIRON=JES2,                                         X\n               RMODE=ANY,                                              X\n               IBMJES2=SAMPLE,                                         X\n               TITLE='JES2 USER EXIT5A',                               X\n               CVT,                                                    X\n               PDS,                                                    X\n               PSA,                                                    X\n               RPL,                                                    X\n               $BUFFER,                                                X\n               $CADDR,                                                 X\n               $CAT,                                                   X\n               $COMWORK,                                               X\n               $DCT,                                                   X\n               $HASPEQU,                                               X\n               $HCT,                                                   X\n               $HCCT,                                                  X\n               $JCT,                                                   X\n               $JCTX,                                                  X\n               $JOE,                                                   X\n               $JQE,                                                   X\n               $LMT,                                                   X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PCE,                                                   X\n               $PIT,                                                   X\n               $PSV,                                                   X\n               $TQE,                                                   X\n               $USERCBS,                                               X\n               $XECB,                                                  X\n               $XIT,                                                   X\n               $XRT\n\nEXIT05A  $ENTRY BASE=R12           EXIT ROUTINE ENTRY POINT\n\n*********************************************************************\n*                                                                   *\n*        SAVE CALLER'S REGISTERS AND ESTABLISH ADDRESSABILITIES.    *\n*                                                                   *\n*********************************************************************\n\n        $SAVE  NAME=EXIT05A        SAVE CALLER'S REGISTERS\n         LR    R12,R15             SET BASE REGISTER\n\n*********************************************************************\n*                                                                   *\n*        OBTAIN A MODULE WORKAREA.                                  *\n*                                                                   *\n*********************************************************************\n\n         LA    R1,EXIT05WL         GET WORKAREA LENGTH\n         LA    R1,3(,R1)           ROUND UP TO WORD BOUNDARY\n         SRL   R1,2                CONVERT TO NUMBER OF WORDS\n         LA    R1,1(,R1)           ADD ONE FOR IDENTIFIER\n        $GETWORK WORDS=(R1),USE=EX05\n         LA    R1,4(,R1)           POINT PAST IDENTIFIER\n         LR    R9,R1               SET WORKAREA ADDRESS\n         LR    R14,R1              SET MOVE TO ADDRESS\n         LA    R15,EXIT05WL        SET MOVE TO LENGTH\n         XR    R1,R1               SET MOVE FROM LENGTH AND PAD\n         MVCL  R14,R0              CLEAR WORKAREA\n         USING EXIT05W,R9\n\n*********************************************************************\n*                                                                   *\n*        DETERMINE IF THIS IS A THE $REPEXIT OR $ADDEXIT COMMAND.   *\n*                                                                   *\n*********************************************************************\n\nEXIT100  LA    R1,COMVERB            GET COMMAND VERB ADDRESS\n         CLC   0(7,R1),=C'REPEXIT'   $REPEXIT COMMAND\n         BE    EXIT200               YES - BRANCH, PROCESS $REPEXIT\n         CLC   0(7,R1),=C'ADDEXIT'   $ADDEXIT COMMAND\n         BE    EXIT300               YES - BRANCH, PROCESS $ADDEXIT\n         XR    R15,R15               SET RETURN CODE\n         B     RETURN                BRANCH - RETURN\n\n*********************************************************************\n*                                                                   *\n*        PROCESS THE $REPEXIT COMMAND.                              *\n*                                                                   *\n*********************************************************************\n\nEXIT200  LA    R1,COMVERB            GET COMMAND VERB ADDRESS\n         MVC   EXITMODN(8),$BLANKS   SAVE MODNAME\n         MVC   EXITMODN(8),8(R1)     *\n\n*********************************************************************\n*                                                                   *\n*        CHECK IF THE EXIT MODULE IS CURRENTLY DEFINED TO JES2.     *\n*                                                                   *\n*********************************************************************\n\nEXIT210  ICM   R8,15,$LMT1           GET LMT ADDRESS\n         BZ    EXIT213               BRANCH - NO LMT CHAIN\n         USING LMT,R8\nEXIT211  CLC   LMTMODNM,EXITMODN     MODULE NAME MATCH?\n         BNE   EXIT212               NO - BRANCH, CONTINUE\n         TM    LMTFLG1,LMT1INVD      LMT INVALID?\n         BZ    EXIT220               NO - BRANCH, CONTINUE\nEXIT212  ICM   R8,15,LMTCHAIN        GET NEXT LMT ENTRY\n         BNZ   EXIT211               LOOP BACK TO CHECK NEXT LMT ENTRY\nEXIT213  MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG1L),MSG1ERR1  SET FIXED MESSAGE TEXT\n         B     EXIT250               BRANCH - CONTINUE\n\n*********************************************************************\n*                                                                   *\n*        INVOKE THE MVS BLDL SERVICE TO CHECK IF A COPY OF THE      *\n*        MODULE IS LOCATED IN A LINKLIST LIBRARY.  IF SO, GET       *\n*        STORAGE TO PERFORM A DIRECTED LOAD.                        *\n*                                                                   *\n*********************************************************************\n\n         USING PDSBLDL,R2\n         USING PDS2,R3\nEXIT220  LA    R2,$GENWORK           USE $GENWORK AS BLDL PARM AREA\n         MVC   PDSBLDLN,$H1          SET NUMBER OF BLDL ENTRIES\n         MVC   PDSBLDLL,=AL2(PDS2BLEN)  SET BLDL ENTRY LENGTH\n         LA    R3,PDSBLDLE           POINT TO THE BLDL ENTRY\n         XC    PDSBLDLE(PDS2BLEN+LMTLEN),PDSBLDLE  CLEAR BLDL WORKAREA\n         MVC   PDS2NAME,EXITMODN     SET MODULE NAME FOR BLDL\n         L     R1,CVTPTR             GET CVT POINTER\n         L     R1,CVTLINK-CVT(,R1)   GET LNKLIST DCB POINTER\n         BLDL  (R1),(R2)             LOCATE MODULE\n         DROP  R2                    PDSBLDL\n         LTR   R15,R15               MODULE LOCATED IN LINKLIST?\n         BNZ   EXIT221               NO - BRANCH, ERROR\n         TM    PDS2LIBF,PDS2LLNK     MODULE RESIDE IN LINKLIST?\n         BO    EXIT222               YES - BRANCH, CONTINUE\nEXIT221  MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG1L),MSG1ERR2  SET FIXED MESSAGE TEXT\n         B     EXIT250               BRANCH - CONTINUE\nEXIT222  XR    R0,R0                 GET MODULE LENGTH\n         ICM   R0,7,PDS2STOR           FROM THE PDS DIRECTORY\n         XR    R2,R2                 ASSUME SP=0 (JES2 PRIVATE MODULE)\n         TM    LMTFLG1,LMT1PVT       MODULE LOADED IN JES2 PRIVATE?\n         BO    EXIT223               YES - BRANCH, CONTINUE\n         ICM   R2,1,SP241            SET SP=241\nEXIT223  TM    PDS2FTB2,PDSLRMOD     MODULE RMODE31?\n         BO    EXIT224               YES - BRANCH, CONTINUE\n         GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=BELOW\n         B     EXIT225               BRANCH - CONTINUE\nEXIT224  GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=ANY\nEXIT225  LR    R6,R1                 SET STORAGE ADDRESS FOR LOAD\n         LR    R14,R1                SET MOVE TO ADDRESS\n         XR    R15,R15               SET MOVE TO LENGTH\n         ICM   R15,7,PDS2STOR        *\n         XR    R1,R1                 SET MOVE FROM LENGTH AND PAD\n         MVCL  R14,R0                CLEAR MODULE AREA\n\n*********************************************************************\n*                                                                   *\n*        PERFORM THE DIRECTED LOAD OF THE NEW MODULE.               *\n*                                                                   *\n*********************************************************************\n\nEXIT230  LA    R4,EXITMODN           SET MODNAME ADDRESS\n         L     R5,CVTPTR             GET CVT POINTER\n         L     R5,CVTLINK-CVT(,R5)   GET LNKLIST DCB POINTER\n         IPK   0(0)                  GET CURRENT PSW KEY\n         SPKA  0(0)                  SET PSW KEY ZERO\n         LOAD  EPLOC=(R4),DCB=(R5),ADDR=(R6),ERRET=EXIT231\nEXIT231  SPKA  0(R2)                 RESET PSW KEY\n         LTR   R15,R15               LOAD SUCCESSFUL?\n         BZ    EXIT235               YES - BRANCH, CONTINUE\n         MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG1L),MSG1ERR3  SET FIXED MESSAGE TEXT\n         XR    R0,R0                 GET MODULE LENGTH\n         ICM   R0,7,PDS2STOR           FROM THE PDS DIRECTORY\n         XR    R2,R2                 ASSUME SP=0 (JES2 PRIVATE MODULE)\n         TM    LMTFLG1,LMT1PVT       MODULE LOADED IN JES PRIVATE?\n         BO    EXIT232               YES - BRANCH, CONTINUE\n         ICM   R2,1,SP241            SET SP=241\nEXIT232  FREEMAIN RU,A=(R6),LV=(R0),SP=(R2),KEY=0\n         B     EXIT250               BRANCH, CONTINUE\n\n*********************************************************************\n*                                                                   *\n*        REPLACE THE MODULE INFORMATION IN THE LMT.                 *\n*                                                                   *\n*********************************************************************\n\nEXIT235  ST    R6,LMTMITAD           SET MODULE ADDRESS IN LMT\n         TM    PDS2FTB2,PDSLRMOD     MODULE RMODE31?\n         BO    EXIT236               YES - BRANCH, CONTINUE\n         OI    LMTFLG2,LMT2RM24      SET RMODE24 FLAG ON\n         NI    LMTFLG2,255-LMT2RM31  TURN RMODE31 FLAG OFF\n         B     EXIT237               BRANCH - CONTINUE\nEXIT236  OI    LMTFLG2,LMT2RM31      SET RMODE31 FLAG ON\n         NI    LMTFLG2,255-LMT2RM24  TURN RMODE24 FLAG OFF\nEXIT237  TM    LMTFLG1,LMT1PVT       MODULE LOADED IN JES PRIVATE?\n         BO    EXIT240               YES - BRANCH, CONTINUE\n         MVI   LMTSUBPL,X'F1'        SET SP=241\n         MVC   LMTMODLN,PDS2STOR     SET MODULE LENGTH\n         OI    LMTFLG1,LMT1CMN       SET LOAD FLAGS\n         DROP  R3                    PDS2\n\n*********************************************************************\n*                                                                   *\n*        REPLACE THE MODULE INFORMATION IN THE XRT.                 *\n*                                                                   *\n*********************************************************************\n\n         USING XIT,R1\n         USING XRT,R3\nEXIT240  LA    R0,XIT#PTS            GET MAXIMUM # XIT ENTRIES\n         L     R1,$XITADDR           GET XIT CHAIN ADDRESS\nEXIT241  ICM   R3,15,XITXRTAD        GET XRT ADDRESS\n         BZ    EXIT246               BRANCH - NO XRT, CHECK NEXT XIT\n         XR    R15,R15               GET NUMBER OF ROUTINES\n         IC    R15,XIT#RTNS            ASSOCIATED WITH THIS EXIT POINT\nEXIT242  L     R14,LMTMITAD          GET MIT ADDRESS\n         L     R14,MITENTAD-MIT(,R14)  GET MITETBL ADDRESS\n         USING MTE,R14\nEXIT243  CLI   MTENAME,X'FF'         LAST MTE?\n         BE    EXIT245               YES - BRANCH, CHECK NEXT XRT\n         CLC   XRTRNAME,MTENAME      XRT NAME MATCH MIT NAME?\n         BE    EXIT244               YES - BRANCH, CONTINUE\n         LA    R14,MTELEN(,R14)      BUMP TO NEXT MITETBL ENTRY\n         B     EXIT243               LOOP BACK FOR NEXT MITETBL ENTRY\nEXIT244  MVC   XRTRADDR,MTEADDR      SET ROUTINE ADDR IN XRT\nEXIT245  LA    R3,XRTLNGTH(,R3)      BUMP TO NEXT XRT ENTRY\n         BCT   R15,EXIT242           LOOP BACK FOR NEXT XRT ENTRY\n         DROP  R3,R8,R14             XRT, LMT, MTE\nEXIT246  LA    R1,XITLNGTH(,R1)      BUMP TO NEXT XIT ENTRY\n         BCT   R0,EXIT241            LOOP BACK FOR NEXT XIT ENTRY\n         DROP  R1                    XIT\n         MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG1L),MSG1OK  SET FIXED MESSAGE TEXT\n\n*********************************************************************\n*                                                                   *\n*        SET THE MESSAGE LENGTH AND RETURN.                         *\n*                                                                   *\n*********************************************************************\n\nEXIT250  LA    R0,8+MSG1L            GET MESSAGE LENGTH\n        $STORE (R0)                    AND SET IN RETURN R0\n         MVC   RETCODE,=F'16'        SET RETURN CODE\n         B     RETURN                BRANCH - RETURN\n\n*********************************************************************\n*                                                                   *\n*        PROCESS THE $ADDEXIT COMMAND.                              *\n*                                                                   *\n*********************************************************************\n\nEXIT300  LA    R3,COMVERB            GET COMMAND VERB ADDRESS\n         LA    R3,8(,R3)             POINT TO MODULE NAME\n         LR    R15,R3                *\n         LA    R0,9                  SET MAX. MODNAME CHECK LENGTH\nEXIT301  CLI   0(R15),C','           \",\" DELIMITER FOUND?\n         BE    EXIT302               YES - BRANCH, CONTINUE\n         LA    R15,1(,R15)           BUMP TO NEXT MODNAME POSITION\n         BCT   R0,EXIT301            LOOP BACK FOR NEXT CHARACTER\n         MVC   COMMAND(8),=C'$ADDEXIT'  SET COMMAND IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG2L),MSG2ERR1  SET FIXED MESSAGE TEXT\n         B     EXIT390               BRANCH - CONTINUE\nEXIT302  LR    R14,R15               CALCULATE EXIT MODNAME LENGTH\n         SLR   R14,R3                *\n         BCTR  R14,0                 MINUS 1 FOR EXECUTE\n         MVC   EXITMODN(8),$BLANKS   BLANK INIT MODNAME\n         MVC   EXITMODN(0),0(R3)     EXECUTED INSTRUCTION\n         EX    R14,*-6               SAVE MODNAME\n         LA    R15,1(,R15)           POINT TO EXIT NUMBER\n         LR    R3,R15                *\n         LA    R0,4                  SET MAX. EXIT # CHECK LENGTH\nEXIT303  CLI   0(R15),C','           \",\" DELIMITER FOUND?\n         BE    EXIT304               YES - BRANCH, CONTINUE\n         CLI   0(R15),C' '           \" \" DELIMITER FOUND?\n         BE    EXIT304               YES - BRANCH, CONTINUE\n         LA    R15,1(,R15)           BUMP TO NEXT EXIT NBR POSITION\n         BCT   R0,EXIT303            LOOP BACK FOR NEXT CHARACTER\nEXIT304  LR    R14,R15               CALCULATE EXIT NUMBER LENGTH\n         SLR   R14,R3                *\n         BCTR  R14,0                 MINUS 1 FOR EXECUTE\n         TRT   0(0,R3),TRTABLE       EXECUTED INSTRUCTION\n         EX    R14,*-6               EXIT NUMBER VALID?\n         BZ    EXIT305               YES - BRANCH, CONTINUE\n         MVC   COMMAND(8),=C'$ADDEXIT'  SET COMMAND IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG2L),MSG2ERR2  SET FIXED MESSAGE TEXT\n         B     EXIT390               BRANCH - CONTINUE\nEXIT305  PACK  WORKDBL,0(0,R3)       EXECUTED INSTRUCTION\n         EX    R14,*-6               CONVERT EXIT NUMBER TO DECIMAL\n         CVB   R1,WORKDBL            CONVERT EXIT NUMBER TO BINARY\n         STCM  R1,1,EXITNBR          SAVE EXIT NUMBER\n         C     R1,$F1                EXIT NUMBER LESS THAN 1?\n         BL    EXIT306               YES - BRANCH, ERROR\n         C     R1,$F255              EXIT NUMBER GREATER THAN 255?\n         BNH   EXIT310               NO - BRANCH, CONTINUE\nEXIT306  MVC   COMMAND(8),=C'$ADDEXIT'  SET COMMAND IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG2L),MSG2ERR3  SET FIXED MESSAGE TEXT\n         B     EXIT390               BRANCH - CONTINUE\n\n*********************************************************************\n*                                                                   *\n*        CHECK IF THE EXIT MODULE IS CURRENTLY DEFINED TO JES2.     *\n*                                                                   *\n*********************************************************************\n\nEXIT310  ICM   R8,15,$LMT1           GET LMT ADDRESS\n         BZ    EXIT313               BRANCH - NO LMT CHAIN\n         USING LMT,R8\nEXIT311  CLC   LMTMODNM,EXITMODN     MODULE NAME MATCH?\n         BNE   EXIT312               NO - BRANCH, CONTINUE\n         TM    LMTFLG1,LMT1INVD      LMT INVALID?\n         BO    EXIT312               YES - BRANCH, CONTINUE\n         MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG2L),MSG2ERR4  SET FIXED MESSAGE TEXT\n         B     EXIT390               BRANCH - CONTINUE\nEXIT312  ICM   R8,15,LMTCHAIN        GET NEXT LMT ENTRY\n         BNZ   EXIT311               LOOP BACK TO CHECK NEXT LMT ENTRY\nEXIT313  XR    R14,R14               GET NEW EXIT NUMBER\n         ICM   R14,1,EXITNBR         *\n         LA    R1,XITLNGTH           GET XIT LENGTH\n         XR    R0,R0                 CALCULATE XIT INDEX\n         MR    R0,R14                *\n         L     R15,$XITADDR          GET XIT CHAIN ADDRESS\n         ALR   R15,R1                CALCULATE XIT ADDRESS\n         ST    R15,EXITXIT           SAVE XIT ADDRESS\n         USING XIT,R15\n         TM    XITFLAGS,XITCMN       MUST EXIT RESIDE IN CSA/LPA?\n         BZ    EXIT314               NO - BRANCH, CONTINUE\n         OI    WORKFLAG,EXITCSA      SET EXIT RESIDES IN CSA FLAG\n         B     EXIT315               BRANCH - CONTINUE\nEXIT314  OI    WORKFLAG,EXITPVT      SET EXIT RESIDES IN PVT FLAG\n         DROP  R15                   XIT\n\n*********************************************************************\n*                                                                   *\n*        THE EXIT MODULE IS NOT CURRENTLY DEFINED TO JES2, SO       *\n*        ACQUIRE AN LMT FOR THE MODULE.                             *\n*                                                                   *\n*********************************************************************\n\nEXIT315  XR    R2,R2                 ASSUME SP=0 (JES2 PRIVATE MODULE)\n         TM    WORKFLAG,EXITPVT      MODULE LOADED IN JES2 PRIVATE?\n         BO    EXIT316               YES - BRANCH, CONTINUE\n         ICM   R2,1,SP241            SET SP=241\nEXIT316  LA    R0,LMTLEN+$CSBPRFX    GET LMT+PREFIX LENGTH\n         GETMAIN RC,LV=(R0),SP=(R2),LOC=ANY\n         LR    R8,R1                 SAVE NEW LMT PREFIX ADDRESS\n         LR    R14,R1                SET MOVE TO ADDRESS\n         LA    R15,LMTLEN+$CSBPRFX   SET MOVE TO LENGTH\n         XR    R1,R1                 SET MOVE FROM LENGTH AND PAD\n         MVCL  R14,R0                CLEAR LMT AND PREFIX\n         MVC   $CSBID(4,R8),=C'LMT '  SET EYECATCHER IN PREFIX\n         STCM  R2,1,$CSBSPLN(R8)     SET STORAGE SUBPOOL IN PREFIX\n         LA    R0,LMTLEN+$CSBPRFX    SET LMT+PREFIX LENGTH IN PREFIX\n         STCM  R0,7,$CSBSPLN+1(R8)   *\n         LA    R8,$CSBPRFX(,R8)      POINT TO ACTUAL LMT\n         ST    R8,EXITLMTA           SAVE NEW LMT ADDRESS\n\n*********************************************************************\n*                                                                   *\n*        INVOKE THE MVS BLDL SERVICE TO CHECK IF A COPY OF THE      *\n*        MODULE IS LOCATED IN A LINKLIST LIBRARY.  IF SO, GET       *\n*        STORAGE TO PERFORM A DIRECTED LOAD.                        *\n*                                                                   *\n*********************************************************************\n\n         USING PDSBLDL,R2\n         USING PDS2,R3\nEXIT320  LA    R2,$GENWORK           USE $GENWORK AS BLDL PARM AREA\n         MVC   PDSBLDLN,$H1          SET NUMBER OF BLDL ENTRIES\n         MVC   PDSBLDLL,=AL2(PDS2BLEN)  SET BLDL ENTRY LENGTH\n         LA    R3,PDSBLDLE           POINT TO THE BLDL ENTRY\n         XC    PDSBLDLE(PDS2BLEN+LMTLEN),PDSBLDLE  CLEAR BLDL WORKAREA\n         MVC   PDS2NAME,EXITMODN     SET MODULE NAME FOR BLDL\n         L     R1,CVTPTR             GET CVT POINTER\n         L     R1,CVTLINK-CVT(,R1)   GET LNKLIST DCB POINTER\n         BLDL  (R1),(R2)             LOCATE MODULE\n         DROP  R2                    PDSBLDL\n         LTR   R15,R15               MODULE LOCATED IN LINKLIST?\n         BNZ   EXIT321               NO - BRANCH, ERROR\n         TM    PDS2LIBF,PDS2LLNK     MODULE RESIDE IN LINKLIST?\n         BO    EXIT322               YES - BRANCH, CONTINUE\nEXIT321  MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG2L),MSG2ERR5  SET FIXED MESSAGE TEXT\n         B     EXIT333               BRANCH - CONTINUE\nEXIT322  XR    R0,R0                 GET MODULE LENGTH\n         ICM   R0,7,PDS2STOR           FROM THE PDS DIRECTORY\n         XR    R2,R2                 ASSUME SP=0 (JES2 PRIVATE MODULE)\n         TM    WORKFLAG,EXITPVT      MODULE LOADED IN JES2 PRIVATE?\n         BO    EXIT323               YES - BRANCH, CONTINUE\n         ICM   R2,1,SP241            SET SP=241\nEXIT323  TM    PDS2FTB2,PDSLRMOD     MODULE RMODE31?\n         BO    EXIT324               YES - BRANCH, CONTINUE\n         GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=BELOW\n         B     EXIT325               BRANCH - CONTINUE\nEXIT324  GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=ANY\nEXIT325  LR    R6,R1                 SET STORAGE ADDRESS FOR LOAD\n         LR    R14,R1                SET MOVE TO ADDRESS\n         XR    R15,R15               SET MOVE TO LENGTH\n         ICM   R15,7,PDS2STOR        *\n         XR    R1,R1                 SET MOVE FROM LENGTH AND PAD\n         MVCL  R14,R0                CLEAR MODULE AREA\n\n*********************************************************************\n*                                                                   *\n*        PERFORM THE DIRECTED LOAD OF THE NEW MODULE.               *\n*                                                                   *\n*********************************************************************\n\nEXIT330  LA    R4,EXITMODN           SET MODNAME ADDRESS\n         L     R5,CVTPTR             GET CVT POINTER\n         L     R5,CVTLINK-CVT(,R5)   GET LNKLIST DCB POINTER\n         IPK   0(0)                  GET CURRENT PSW KEY\n         SPKA  0(0)                  SET PSW KEY ZERO\n         LOAD  EPLOC=(R4),DCB=(R5),ADDR=(R6),ERRET=EXIT331\nEXIT331  SPKA  0(R2)                 RESET PSW KEY\n         LTR   R15,R15               LOAD SUCCESSFUL?\n         BZ    EXIT335               YES - BRANCH, CONTINUE\n         MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG2L),MSG2ERR6  SET FIXED MESSAGE TEXT\n         XR    R0,R0                 GET MODULE LENGTH\n         ICM   R0,7,PDS2STOR           FROM THE PDS DIRECTORY\n         XR    R2,R2                 ASSUME SP=0 (JES2 PRIVATE MODULE)\n         TM    WORKFLAG,EXITPVT      MODULE LOADED IN JES PRIVATE?\n         BO    EXIT332               YES - BRANCH, CONTINUE\n         ICM   R2,1,SP241            SET SP=241\nEXIT332  FREEMAIN RU,A=(R6),LV=(R0),SP=(R2),KEY=0\nEXIT333  L     R8,EXITLMTA           GET NEW LMT ADDRESS\n         LA    R15,$CSBPRFX          GET PREFIX LENGTH\n         SLR   R8,R15                POINT TO START OF PREFIX\n         XR    R2,R2                 GET LMT SUBPOOL\n         ICM   R2,1,$CSBSPLN(R8)     *\n         XR    R0,R0                 GET LMT+PREFIX LENGTH\n         ICM   R0,7,$CSBSPLN+1(R8)   *\n         FREEMAIN RU,A=(R8),LV=(R0),SP=(R2)\n         B     EXIT390               BRANCH, CONTINUE\n\n*********************************************************************\n*                                                                   *\n*        INITIALIZE THE NEW LMT.                                    *\n*                                                                   *\n*********************************************************************\n\nEXIT335  L     R8,EXITLMTA           GET NEW LMT ADDRESS\n         ST    R6,LMTMITAD           SET MODULE ADDRESS IN LMT\n         MVC   LMTMODNM,EXITMODN     SET MODULE NAME IN LMT\n         TM    PDS2FTB2,PDSLRMOD     MODULE RMODE31?\n         BO    EXIT336               YES - BRANCH, CONTINUE\n         OI    LMTFLG2,LMT2RM24      SET RMODE24 FLAG ON\n         NI    LMTFLG2,255-LMT2RM31  TURN RMODE31 FLAG OFF\n         B     EXIT337               BRANCH - CONTINUE\nEXIT336  OI    LMTFLG2,LMT2RM31      SET RMODE31 FLAG ON\n         NI    LMTFLG2,255-LMT2RM24  TURN RMODE24 FLAG OFF\nEXIT337  TM    WORKFLAG,EXITPVT      MODULE LOADED IN JES PRIVATE?\n         BO    EXIT338               YES - BRANCH, CONTINUE\n         OI    LMTFLG1,LMT1CMN       SET MODULE LOADED IN COMMON FLAG\n         MVI   LMTSUBPL,X'F1'        SET SP=241\n         B     EXIT339               BRANCH - CONTINUE\nEXIT338  OI    LMTFLG1,LMT1PVT       SET MODULE LOADED IN PRIVATE FLAG\nEXIT339  MVC   LMTMODLN,PDS2STOR     SET MODULE LENGTH\n         OI    LMTFLG1,LMT1BSPL      SET BYPASS SPLEVEL CHECK FLAG\n         DROP  R3                    PDS2\n\n*********************************************************************\n*                                                                   *\n*        CHAIN THE NEW LMT.                                         *\n*                                                                   *\n*********************************************************************\n\nEXIT340  TM    WORKFLAG,EXITCSA      MODULE LOADED IN COMMON?\n         BO    EXIT343               YES - BRANCH, CONTINUE\n         ICM   R15,15,$LMTPBOT       GET LAST PRIVATE ENTRY ADDRSS\n         BNZ   EXIT341               BRANCH - CONTINUE\n         ST    R8,$LMT1              RESET FIRST PRIVATE ENTRY ADDRESS\n         B     EXIT342               BRANCH - CONTINUE\nEXIT341  ST    R8,LMTCHAIN-LMT(,R15)  RESET CHAIN IN OLD LAST ENTRY\nEXIT342  MVC   LMTCHAIN,$LMT1C       RESET CHAIN IN NEW LAST ENTRY\n         ST    R8,$LMTPBOT           RESET LAST PRIVATE ENTRY ADDRESS\n         B     EXIT350               BRANCH - CONTINUE\nEXIT343  ICM   R15,15,$LMT1C         GET FIRST CSA ENTRY ADDRESS\n         BNZ   EXIT345               BRANCH - CONTINUE\n         ICM   R1,15,$LMTPBOT        GET LAST PRIVATE ENTRY ADDRSS\n         BZ    EXIT344               BRANCH - NO PRIVATE ENTRIES\n         ST    R8,LMTCHAIN-LMT(,R1)  RESET CHAIN IN LAST PRIVATE ENTRY\nEXIT344  ST    R8,$LMT1C             RESET FIRST CSA ENTRY ADDRESS\n         B     EXIT350               BRANCH - CONTINUE\nEXIT345  CLC   LMTCHAIN-LMT(4,R15),$ZEROS  END OF CSA CHAIN?\n         BE    EXIT346               BRANCH - END OF CSA CHAIN\n         L     R15,LMTCHAIN-LMT(,R15)  GET NEXT CSA ENTRY ADDRESS\n         B     EXIT345               LOOP BACK TO CHECK NEXT ENTRY\nEXIT346  ST    R8,LMTCHAIN-LMT(,R15)  RESET CHAIN IN OLD LAST ENTRY\n\n*********************************************************************\n*                                                                   *\n*        OBTAIN AND INITIALIZE AN XRT FOR EACH NEW EXIT ROUTINE     *\n*        THAT IS DEFINED IN THE NEW EXIT MODULE.                    *\n*                                                                   *\n*********************************************************************\n\nEXIT350  LA    R0,255*WORKXRTL       GET XRT WORKAREA SIZE\n         GETMAIN RC,LV=(R0),LOC=ANY\n         ST    R1,WORKXRTA           SAVE XRT WORKAREA ADDRESS\n         LR    R14,R1                SET MOVE TO ADDRESS\n         LA    R15,255*WORKXRTL      SET MOVE TO LENGTH\n         XR    R1,R1                 SET MOVE FROM LENGTH AND PAD\n         MVCL  R14,R0                CLEAR XRT WORKAREA\n         L     R3,EXITXIT            GET EXIT XIT ADDRESS\n         USING XIT,R3\n         L     R14,LMTMITAD          GET MIT ADDRESS\n         L     R14,MITENTAD-MIT(,R14)  GET MITETBL ADDRESS\n         USING MTE,R14\n         LA    R14,MTELEN(,R14)      BUMP PAST MITETBL EYECATCHER MTE\n         L     R15,WORKXRTA          GET XRT WORKAREA ADDRESS\n         USING WORKXRTE,R15\n         XR    R7,R7                 INIT NEW EXIT ROUTINE COUNT\nEXIT351  CLI   MTENAME,X'FF'         LAST MTE?\n         BE    EXIT352               YES - BRANCH, CONTINUE\n         LA    R7,1(,R7)             INCREMENT EXIT ROUTINE COUNT\n         MVC   EXITRTNN,MTENAME      SAVE EXIT ROUTINE NAME\n         MVC   EXITRTNA,MTEADDR      SAVE EXIT ROUTINE ADDRESS\n         LA    R14,MTELEN(,R14)      BUMP TO NEXT MITETBL ENTRY\n         LA    R15,WORKXRTL(,R15)    BUMP TO NEXT XRT WORKAREA ENTRY\n         B     EXIT351               LOOP BACK FOR NEXT MITETBL ENTRY\n         DROP  R14,R15               MTE, WORKXRTE\nEXIT352  LTR   R7,R7                 ANY NEW EXIT ROUTINES DEFINED?\n         BNZ   EXIT353               YES - BRANCH, CONTINUE\n         OI    LMTFLG1,LMT1INVD      INVALIDATE THE NEW LMT\n         MVC   COMMAND(8),=C'$ADDEXIT'  SET COMMAND IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG2L),MSG2ERR7  SET FIXED MESSAGE TEXT\n         LA    R0,255*WORKXRTL       GET XRT WORKAREA SIZE\n         L     R1,WORKXRTA           GET XRT WORKAREA ADDRESS\n         FREEMAIN RU,A=(R1),LV=(R0)\n         B     EXIT390               BRANCH - CONTINUE\nEXIT353  STCM  R7,1,WORKXRT#         SAVE NUMBER OF NEW XRTS\n         XR    R2,R2                 GET # ROUTINES CURRENTLY DEFINED\n         ICM   R2,1,XIT#RTNS         *\n         ALR   R7,R2                 CALCULATE NUMBER OF XRTS (NEW+OLD)\n         LA    R15,XRTLNGTH          GET XRT LENGTH\n         XR    R6,R6                 CALCULATE TOTAL XRTS LENGTH\n         MR    R6,R15                *\n         GETMAIN RC,LV=(R7),SP=241,LOC=ANY\n         ST    R1,NEWXRTSA           SAVE NEW XRT AREA ADDRESS\n         LR    R14,R1                SET MOVE TO ADDRESS\n         LR    R15,R7                SET MOVE TO LENGTH\n         XR    R1,R1                 SET MOVE FROM LENGTH AND PAD\n         MVCL  R14,R0                CLEAR AREA\n         L     R1,NEWXRTSA           GET NEW XRT AREA ADDRESS\n         USING XRT,R1\n         LTR   R2,R2                 ANY ROUTINES CURRENTLY DEFINED?\n         BZ    EXIT355               NO - BRANCH, DEFINE NEW ROUTINES\n         L     R15,XITXRTAD          GET FIRST OLD XRT ADDRESS\nEXIT354  MVC   0(XRTLNGTH,R1),0(R15)  MOVE OLD XRT TO NEW AREA\n         LA    R1,XRTLNGTH(,R1)      BUMP TO NEXT NEW AREA SLOT\n         LA    R15,XRTLNGTH(,R15)    BUMP TO NEXT OLD XRT\n         BCT   R2,EXIT354            LOOP BACK TO MOVE NEXT XRT\nEXIT355  XR    R0,R0                 GET # NEW EXIT ROUTINES (XRTS)\n         ICM   R0,1,WORKXRT#         *\n         L     R15,WORKXRTA          GET XRT WORKAREA ADDRESS\n         USING WORKXRTE,R15\nEXIT356  MVC   XRTRNAME,EXITRTNN     SET NEW EXIT ROUTINE NAME\n         MVC   XRTRADDR,EXITRTNA     SET NEW EXIT ROUTINE ADDRESS\n         LA    R1,XRTLNGTH(,R1)      BUMP TO NEXT NEW AREA SLOT\n         LA    R15,WORKXRTL(,R15)    BUMP TO NEXT XRT WORKAREA ENTRY\n         BCT   R0,EXIT356            LOOP BACK TO INIT NEXT NEW XRT\n         DROP  R1,R15                XRT, WORKXRTE\n         LA    R0,255*WORKXRTL       GET XRT WORKAREA SIZE\n         L     R1,WORKXRTA           GET XRT WORKAREA ADDRESS\n         FREEMAIN RU,A=(R1),LV=(R0)\n\n*********************************************************************\n*                                                                   *\n*        FINISH INITIALIZING THE XIT FOR THE NEW EXIT.              *\n*                                                                   *\n*********************************************************************\n\nEXIT360  OI    XITFLAGS,XITDENBL+XITBSPL  SET EXIT DEFINED, ENABLED,\n*                                           AND BYPASS SPLEVEL CHECK\n         NI    XITFLAGS,255-XITTRACE  TURN EXIT TRACING OFF\n         MVC   XITXRTAD,NEWXRTSA     SET FIRST EXIT XRT ADDRESS\n         XR    R0,R0                 GET # ROUTINES CURRENTLY DEFINED\n         ICM   R0,1,XIT#RTNS         *\n         XR    R1,R1                 GET # NEW ROUTINES\n         ICM   R1,1,WORKXRT#         *\n         ALR   R0,R1                 CALCULATE TOTAL # EXIT ROUTINES\n         STCM  R0,1,XIT#RTNS         SET TOTAL # EXIT ROUTINES\n         L     R14,LMTMITAD          GET MIT ADDRESS\n         MVC   XITENVIR,MITENVIR-MIT(R14)  SET ENVIRONMENT BYTE\n         DROP  R3,R8                 XIT, LMT\n         MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT\n         MVC   COMMAND+8(MSG2L),MSG2OK  SET FIXED MESSAGE TEXT\n\n*********************************************************************\n*                                                                   *\n*        SET THE MESSAGE LENGTH AND RETURN.                         *\n*                                                                   *\n*********************************************************************\n\nEXIT390  LA    R0,8+MSG2L            GET MESSAGE LENGTH\n        $STORE (R0)                    AND SET IN RETURN R0\n         MVC   RETCODE,=F'16'        SET RETURN CODE\n         B     RETURN                BRANCH - RETURN\n*********************************************************************\n*                                                                   *\n*        RETURN TO CALLER.                                          *\n*                                                                   *\n*********************************************************************\n\nRETURN   L     R2,RETCODE          GET ROUTINE RETURN CODE\n         S     R9,$F4              GET EXIT05 WORKAREA ADDRESS\n        $RETWORK (R9)              RETURN WORKAREA\n         LR    R15,R2              SET ROUTINE RETURN CODE\n        $RETURN RC=(R15)           RETURN TO CALLER\n\n         LTORG\n\nTRTABLE  DC    256X'FF'            TABLE OF VALID NUMBERICS\n         ORG   TRTABLE+C'0'        *\n         DC    10X'00'             *\n         ORG                       *\n\nSP241    DC    X'F1'\n\nMSG1OK   DC    C' REPLACED                        '\nMSG1L    EQU   *-MSG1OK\nMSG1ERR1 DC    C' NOT CURRENTLY BEING USED BY JES2'\nMSG1ERR2 DC    C' NOT LOCATED IN LINKLIST LIBRARY '\nMSG1ERR3 DC    C' LOAD ERROR                      '\n\nMSG2OK   DC    C' ADDED                           '\nMSG2L    EQU   *-MSG2OK\nMSG2ERR1 DC    C' NO EXIT NUMBER SPECIFIED        '\nMSG2ERR2 DC    C' INVALID EXIT NUMBER SPECIFIED   '\nMSG2ERR3 DC    C' EXIT NUMBER OUT OF RANGE        '\nMSG2ERR4 DC    C' EXIT MODULE ALREADY DEFINED     '\nMSG2ERR5 DC    C' NOT LOCATED IN LINKLIST LIBRARY '\nMSG2ERR6 DC    C' LOAD ERROR                      '\nMSG2ERR7 DC    C' NO $ENTRY POINTS DEFINED        '\n\n        $MODEND\n\nEXIT05W  DSECT                     EXIT05 WORKAREA\nRETCODE  DS    F                   EXIT05 RETURN CODE\nWORKFLAG DS    XL1                 EXIT05 WORKFLAG\nEXITPVT  EQU   X'80'               ADD EXIT TO JES2 PRIVATE\nEXITCSA  EQU   X'40'               ADD EXIT TO COMMON\nEXITNBR  DS    XL1                 EXIT NUMBER\nEXITMODN DS    CL8                 EXIT MODULE NAME\nEXITLMTA DS    A                   EXIT MODULE LMT ADDRESS\nWORKDBL  DS    D                   DOUBLEWORD WORKAREA\nEXITXIT  DS    A                   XIT ENTRY ADDRESS\nWORKXRTA DS    A                   XRT WORKAREA ADDRESS\nWORKXRT# DS    XL1                 NUMBER OF NEW XRTS\nNEWXRTSA DS    A                   NEW XRTS AREA\nWORKMSGY DS    CL60\nEXIT05WL EQU   *-EXIT05W           EXIT05 WORKAREA LENGTH\n\nWORKXRTE DSECT                     XRT WORKAREA ENTRY\nEXITRTNN DS    CL8                 EXIT ROUTINE NAME\nEXITRTNA DS    A                   EXIT ROUTINE ADDRESS\nWORKXRTL EQU   *-WORKXRTE          XRT WORKAREA ENTRY LENGTH\n\n         END\n./ ADD NAME=LSES505J 0304-00234-05314-1428-00024-00018-00004-T0SM0\n//T0SM505J JOB  (4030,37),'REDO--LSES505',CLASS=X,MSGCLASS=A,\n//  REGION=5M,\n//    NOTIFY=&SYSUID\n//*\n//*%PDSDOC 00 SMP APPLY LSES505\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI   <== UPDATE TO YOUR CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//SMPPTFIN DD DISP=SHR,DSN=THIS.DATA.SET.NAME(LSES505)  <== UPDATE\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES505) BYPASS(APPLYCHECK) .\n  RESETRC.\n  RECEIVE S(LSES505) SOURCEID(MELLON) .\n  SET BDY(TARGET).                              <== UPDATE TO YOUR TGT\n  APPLY S(LSES505) REDO .\n//\n./ ADD NAME=LSES506  0302-00234-03317-2239-00197-00202-00001-T0SM1\n++USERMOD(LSES506)\n /* ***************************************************************\n    ** * USER EXIT 5 B                                         * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707) .\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STSCX05B),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STSCX05B)\n NAME STSCX05B(R)\n/*\n++SRC(STSCX05B) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\n PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1,REUS=REFR) '\n* *%PDSDOC 00 JES2 EXIT05 PREVENT PURGING OF JOBS BY RANGE\n*********************************************************************\n*                                                                   *\n*                        HASP EXIT 05                               *\n*                                                                   *\n*     THIS EXIT PREVENTS PURGING JOBS BY RANGE.                     *\n*                                                                   *\n*     ENTRY POINT: EXIT05                                           *\n*                                                                   *\n*     INPUT REGISTERS:                                              *\n*        R0-4   N/A                                                 *\n*        R5     POINTER TO CURRENT OPERAND ADDRESS                  *\n*        R6     INCREMENT VALUE OF 4                                *\n*        R7     POINTER TO ADDRESS OF LAST OPERAND                  *\n*        R8-10  N/A                                                 *\n*        R11    HCT ADDRESS                                         *\n*        R12    N/A                                                 *\n*        R13    PCE ADDRESS                                         *\n*        R14    RETURN ADDRESS                                      *\n*        R15    ENTRY ADDRESS                                       *\n*                                                                   *\n*     OUTPUT REGISTERS:                                             *\n*        R0     UNCHANGED OR $CRET MESSAGE LENGTH                   *\n*        R1-14  UNCHANGED                                           *\n*        R15    RETURN CODE                                         *\n*                                                                   *\n*     REGISTER USAGE(INTERNAL):                                     *\n*        R0-8   WORK REGISTERS                                      *\n*        R9     WORKAREA ADDRESS                                    *\n*        R10    JCT ADDRESS                                         *\n*        R11    HCT ADDRESS                                         *\n*        R12    BASE REGISTER                                       *\n*        R13    PCE ADDRESS                                         *\n*        R14-15 WORK AND LINKAGE REGISTERS                          *\n*                                                                   *\n*     AUTHOR: STEPHEN MCCOLLEY                                      *\n*             ATLANTA, GA                                         *\n*                                                                   *\n*********************************************************************\n* CHANGES:                                                          *\n* 01/22/2001 - CORRECTED ERROR IN BLANK SCAN ROUTINE.  SGM          *\n*                                                                   *\n*********************************************************************\n\n         COPY  $HASPGBL\n\nSTSCX05B $MODULE ENVIRON=JES2,                                         X\n               RMODE=ANY,                                              X\n               IBMJES2=SAMPLE,                                         X\n               TITLE='JES2 USER EXIT5B',                               X\n               CVT,                                                    X\n               PDS,                                                    X\n               PSA,                                                    X\n               RPL,                                                    X\n               $BUFFER,                                                X\n               $CADDR,                                                 X\n               $CAT,                                                   X\n               $COMWORK,                                               X\n               $DCT,                                                   X\n               $HASPEQU,                                               X\n               $HCT,                                                   X\n               $HCCT,                                                  X\n               $JCT,                                                   X\n               $JCTX,                                                  X\n               $JOE,                                                   X\n               $JQE,                                                   X\n               $LMT,                                                   X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PCE,                                                   X\n               $PIT,                                                   X\n               $PSV,                                                   X\n               $TQE,                                                   X\n               $USERCBS,                                               X\n               $XECB,                                                  X\n               $XIT,                                                   X\n               $XRT\n\nEXIT05B  $ENTRY BASE=R12           EXIT ROUTINE ENTRY POINT\n\n*********************************************************************\n*                                                                   *\n*        SAVE CALLER'S REGISTERS AND ESTABLISH ADDRESSABILITIES.    *\n*                                                                   *\n*********************************************************************\n\n        $SAVE  NAME=EXIT05B        SAVE CALLER'S REGISTERS\n         LR    R12,R15             SET BASE REGISTER\n\n*********************************************************************\n*                                                                   *\n*        DETERMINE IF THIS IS A PURGE COMMAND.                      *\n*                                                                   *\n*********************************************************************\n\nEXIT100  LA    R1,COMVERB            GET COMMAND VERB ADDRESS\n         CLI   0(R1),C'P'            A PURGE COMMAND ?\n         BE    EXIT400               - GO CHECK FOR PURGE BY RANGE\n         XR    R15,R15               SET RETURN CODE\n         B     RETURN                BRANCH - RETURN\n\n**********************************************************************\n**                                                                  **\n**  PREVENT THE USE OF $PJ(X-X) HERE.                               **\n**                                                                  **\n**********************************************************************\nEXIT400  LH    R2,COMLNGTH             GET THE LENGTH OF THE COMMAND\n         BCTR  R2,R0                   MINUS ONE FOR THE $\n         BCTR  R2,R0                   MINUS ONE FOR THE FIRST VERB\n         LA    R1,COMVERB+1             POINT PAST COMMAND NAME\n         AR    R2,R1                    R2 = END OF COMMAND TO TEST\nCHKVERB1 CLI   0(R1),C'J'               IS NEXT CHAR. = C'J'\n         BE    CHKRANG1\n         CLI   0(R1),C'S'               IS NEXT CHAR. = C'S'\n         BE    CHKRANG1\n         CLI   0(R1),C'T'               IS NEXT CHAR. = C'T'\n         BE    CHKRANG1\n         CLI   0(R1),C' '               IS IT A BLANK ?\n         BE    SCANBLNK\n         B     EXIT499\n         XR    R15,R15               SET RETURN CODE\n         B     RETURN                BRANCH - RETURN\nCHECKJ1  CLI   0(R1),C' '               SCAN TO NEXT NON BLANK CHAR.\n         BNE   CHKVERB1\nSCANBLNK EQU   *\n         LA    R1,1(R1)\n         CR    R1,R2\n         BNL   EXIT499                  JUST GO HOME CLEANLY\n         B     CHECKJ1\nCHKRANG1 EQU   *                        ANY DASH IN THE NEXT 40 IS BAD\nCHKRANG2 CLI   0(R1),C'-'               SEE IF A RANGE IS BEING USED\n         BE    EXIT490                  IF YES THEN GO HOME MAD.\n         LA    R1,1(R1)                 LOOP TO END OF FIELD\n         CR    R1,R2\n         BL    CHKRANG2\n*\nEXIT499  XR    R15,R15                  JUST GO HOME\n         $RETURN RC=(R15)\nEXIT490  LA    R4,MSG1                  SET MSG AND GO HOME MAD\n         $CWTO MSG=(R4),L=40,MSGID=999\n         LA    R15,8\n         $RETURN RC=(R15)\nMSG1     DC    C'PURGE BY RANGE INVALID                  '\nLMSG1    EQU   *-MSG1\n*********************************************************************\n*                                                                   *\n*        RETURN TO CALLER.                                          *\n*                                                                   *\n*********************************************************************\n\nRETURN   EQU   *                   GET ROUTINE RETURN CODE\n        $RETURN RC=(R15)           RETURN TO CALLER\n\n         LTORG\n\n        $MODEND\n\nEXIT05W  DSECT                     EXIT05 WORKAREA\nRETCODE  DS    F                   EXIT05 RETURN CODE\nEXIT05WL EQU   *-EXIT05W           EXIT05 WORKAREA LENGTH\n\n         END\n./ ADD NAME=LSES506J 0405-00234-05314-1429-00023-00018-00018-T0SM0\n//T0SM506J JOB  (4030,37),'REDO--LSES506',CLASS=X,MSGCLASS=A,\n//  REGION=6M,\n//    NOTIFY=&SYSUID\n//*\n//*%PDSDOC 00 SMP APPLY LSES506\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI   <== UPDATE TO YOUR CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=THIS.DATA.SET.NAME(LSES506)  <== UPDATE\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES506) BYPASS(APPLYCHECK).\n  RESETRC .\n  RECEIVE S(LSES506) SOURCEID(MELLON) .\n  SET BDY(TARGET).                      <== UPDATE TO YOUR TGT\n  APPLY S(LSES506) REDO.\n./ ADD NAME=LSES507  0302-00234-03317-2243-00199-00284-00001-T0SM1\n++USERMOD(LSES507)\n /* ***************************************************************\n    ** * USER EXIT 6 A                                         * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707) .\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STSCX06A),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STSCX06A)\n NAME STSCX06A(R)\n/*\n++SRC(STSCX06A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\n PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1,REUS=REFR) '\n* *%PDSDOC 00 SETS THE SCHENV BASED ON /*ROUTE XEQ RESNAME\n*********************************************************************\n*                                                                   *\n*                        HASP EXIT 6                                *\n*                                                                   *\n*     THIS EXIT GETS CONTROL AFTER EACH JCL STATEMENT HAS BEEN      *\n*     CONVERTED INTO INTERNAL TEXT AND ONCE AFTER ALL OF A JOB'S    *\n*     JCL HAS BEEN CONVERTED.  IT PERFORMS THE FOLLOWING FUNCTIONS: *\n*     > CHECKS IF A SCHEDULING ENVIRONMENT (SCHENV=) HAS BEEN       *\n*       CODED ON THE JOBCARD.  IF SPECIFIED, THE SCHEDULING         *\n*       ENVIRONMENT IS USED.  OTHERWISE IF A MELLON RESOURCE NAME   *\n*       HAS BEEN SPECIFIED ON A \"/*ROUTE XEQ RESNAME\" CONTROL       *\n*       STATEMENT, THEN THE RESOURCE NAME IS USED AS A SCHEDULING   *\n*       ENVIRONMENT.                                                *\n*                                                                   *\n*     ENTRY POINT: EXIT06                                           *\n*                                                                   *\n*     INPUT REGISTERS:                                              *\n*        R0 CODE INDICATING STATUS OF CONVERSION PROCESSING         *\n*           0  INDICATES THAT A JCL STATEMENT HAS BEEN CONVERTED    *\n*              TO A C/I TEXT IMAGE.                                 *\n*           4  INDICATES THAT ALL OF THE JCL FOR A PARTICULAR       *\n*              JOB HAS BEEN CONVERTED TO C/I TEXT.                  *\n*        R1     ADDRESS OF 5-WORD PARAMETER LIST                    *\n*        R2-10  N/A                                                 *\n*        R11    HCT ADDRESS                                         *\n*        R12    N/A                                                 *\n*        R13    ADDRESS OF AN 18 WORD OS-STYLE SAVE AREA            *\n*        R14    RETURN ADDRESS                                      *\n*        R15    ENTRY ADDRESS                                       *\n*                                                                   *\n*     OUTPUT REGISTERS:                                             *\n*        R0-14  UNCHANGED                                           *\n*        R15:   RETURN CODE                                         *\n*               0 - QUEUE JOB FOR EXECUTION                         *\n*               8 - CANCEL JOB AND QUEUE FOR OUTPUT                 *\n*                                                                   *\n*     REGISTER USAGE(INTERNAL):                                     *\n*        R0-8   WORK REGISTERS                                      *\n*        R9     WORKAREA ADDRESS                                    *\n*        R10    JCT ADDRESS                                         *\n*        R11    HCT ADDRESS                                         *\n*        R12    BASE REGISTER                                       *\n*        R13    ADDRESS OF AN 18 WORD OS-STYLE SAVE AREA            *\n*        R14-15 WORK AND LINKAGE REGISTERS                          *\n*                                                                   *\n*     NOTE: THIS MODULE IS FOR USE WITH JES2 VERSION 6.0.4          *\n*                                                                   *\n*     AUTHOR: BOB BREAK                                             *\n*             ST. LOUIS, MO.                                        *\n*                                                                   *\n*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE\n*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS\n*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED\n*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF\n*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE\n*  USEFULLNESS OF THE MATERIAL.\n*\n*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,\n*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE\n*  IN THE FUTURE.\n*\n*********************************************************************\n\n         COPY  $HASPGBL\n\nSTSCX06A $MODULE ENVIRON=SUBTASK,                                      X\n               IBMJES2=SAMPLE,                                         X\n               TITLE='USER EXIT6A MOD. ',                              X\n               RMODE=ANY,                                              X\n               CNMB,                                                   X\n               CVT,                                                    X\n               KEYS,                                                   X\n               PSA,                                                    X\n               TEXT,                                                   X\n               $CADDR,                                                 X\n               $DTE,                                                   X\n               $DTECNV,                                                X\n               $HASPEQU,                                               X\n               $HCT,                                                   X\n               $HCCT,                                                  X\n               $JCT,                                                   X\n               $JCTX,                                                  X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PADDR,                                                 X\n               $PARMLST,                                               X\n               $PCE,                                                   X\n               $TRE,                                                   X\n               $XIT\n\nEXIT06A  $ENTRY BASE=R12           EXIT ROUTINE ENTRY POINT\n\n*********************************************************************\n*                                                                   *\n*        SAVE CALLER'S REGISTERS AND ESTABLISH ADDRESSABILITIES.    *\n*                                                                   *\n*********************************************************************\n\n         USING HCT,R11\n        $SAVE  NAME=EXIT06A        SAVE CALLER'S REGISTERS\n         LR    R12,R15             SET BASE REGISTER\n         LTR   R0,R0               FINAL EXIT6 CALL?\n         BNZ   RETURN0             YES - BRANCH, RETURN\n         L     R10,12(,R1)         GET JCT ADDRESS\n         USING JCT,R10\n         CLC   JCTCNVRC,=A(JCTCOK)  JOB SUCCESSFULLY CONVERTED?\n         BNE   RETURN0             NO - BRANCH, RETURN\n         TM    JCTJOBFL,JCTBATCH   BATCH JOB?\n         BZ    RETURN0             NO - BRANCH, RETURN\n         L     R2,4(,R1)           GET TEXT IMAGE ADDRESS\n         USING TEXT,R2\n         TM    STRINDCS,JOBSTR     'JOB' STATEMENT?\n         BZ    RETURN0             NO - BRANCH, RETURN\n         LR    R3,R1               SAVE INPUT PARAMETER LIST ADDRESS\n\n*********************************************************************\n*                                                                   *\n*        CHECK IF A SCHEDULING ENVIRONMENT HAS BEEN CODED ON        *\n*        THE JOBCARD.  IF SPECIFIED, ALLOW IT TO BE USED.           *\n*                                                                   *\n*********************************************************************\n\n\n         LA    R1,STRJKEY          LOAD START OF KEYED TEXT IN R1\n         LA    R0,JDTKWDK          LOAD KEY TO LOOK FOR IN R0\n         $CALL XINTKEY,ERRET=EXIT110 IF NOT FOUND - CHECK FOR XEQ\n         LTR   R15,R15\n         BZ    KEYFOUND            THE KEY WAS FOUND\n         B     EXIT110             THE KEY WAS NOT FOUND CHECK FOR A\n*                                    VALUE FROM A /*ROUTE XEQ CARD\nKEYFOUND EQU   *                   CHECK OUT THIS DUBIOUS KEY...\n         CLI   0(R1),X'1A'         IS IT KEY 1A ?\n         BNE   EXIT110                 IF NOT CHECK FOR XEQ VALUE\n         CLC   1(2,R1),=X'0202'    2 PARMS - THE FIRST 2 BYTES LONG?\n         BNE   EXIT110                 IF NOT CHECK FOR XEQ VALUE\n         CLC   3(2,R1),=X'000A'    THE FIRST PARM BEING 000A ?\n         BNE   EXIT110                 IF NOT CHECK FOR XEQ VALUE\n         MVI   JCTSCHEN,C' '\n         MVC   JCTSCHEN+1(L'JCTSCHEN-1),JCTSCHEN   CLEAR SCHEN FLD.\n\nEXIT110  EQU   *\n\n\n*********************************************************************\n*                                                                   *\n*        RETURN TO CALLER.                                          *\n*                                                                   *\n*********************************************************************\n\nRETURN0  XR     R15,R15            SET RETURN CODE = 0\n         B      RETURN             BRANCH - CONTINUE\nRETURN8  EQU    *\n         L      R15,$F8            SET RETURN CODE = 8\nRETURN  $RETURN RC=(R15)           RETURN TO CALLER\n\n         DROP  R10,R11             JCT, HCT\n\n         LTORG\n\n        $MODEND\n\n\n         END\n./ ADD NAME=LSES507J 0404-00234-05314-1428-00022-00018-00017-T0SM0\n//T0SM507J JOB  (4030,37),'REDO--LSES507',CLASS=X,MSGCLASS=A,\n//  REGION=6M,\n//    NOTIFY=&SYSUID\n//*\n//*%PDSDOC 00 SMP APPLY LSES507\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPPTFIN DD DISP=SHR,DSN=THIS.DATA.SET.NAME(LSES507) <== UPDATE\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI  <== UPDATE TO YOUR CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES507) BYPASS(APPLYCHECK).\n  RESETRC .\n  RECEIVE S(LSES507) SOURCEID(MELLON) .\n  SET BDY(TARGET).                        <== UPDATE\n  APPLY S(LSES507) REDO.\n./ ADD NAME=LSES509  0202-00234-03317-2246-00123-00132-00001-T0SM1\n++USERMOD(LSES509)\n /* ***************************************************************\n    ** * USER EXIT 15 A                                        * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707) .\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STSCX15A),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STSCX15A)\n NAME STSCX15A(R)\n/*\n++SRC(STSCX15A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\n PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1,REUS=REFR) '\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    JES2 USER EXIT 15.  DATA SET SELECTION / COPY USER EXIT.         *\n*                                                                     *\n* TDS MOD TO FORCE FCB LOAD UNLESS CHANGE TO AND FROM STD FORMS.      *\n*                                                                     *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         COPY  $HASPGBL\nSTSCEX15 $MODULE ENVIRON=JES2,                                         *\n               TITLE='JES2 USER EXIT 15 - ENTRY AND SET UP',           *\n               RMODE=ANY,                                              *\n               RPL,                REQ'D BY $BUFFER                    *\n               $BUFFER,            REQ'D BY EXIT CODE                  *\n               $CAT,               REQ'D BY $HCT                       *\n               $DCT,               REQ'D BY $HCT                       *\n               $XECB,              REQ'D BY MY WTOR ERROR RECOVERY     *\n               $HASPEQU,           REQ'D BY REG CONVENTIONS            *\n               $HCT,               REQ'D BY $SAVE/$RETURN              *\n               $JCT,                                                   *\n               $JCTX,                                                  *\n               $JOE,                                                   *\n               $JQE,               REQ'D BY $HCT                       *\n               $MIT,               REQ'D BY $HCT                       *\n               $PCE,               REQ'D BY $HCT AND AMIKOM            *\n               $PDDB,                                                  *\n               $PADDR,                                                 *\n               $PPPWORK,           REQ'D BY AMIKOM                     *\n               $XPL                EXIT PARAMETER LIST         @RMF420\n         SPACE 2\nEXIT15A  $ENTRY BASE=R12\n         $SAVE\n         LR    R12,R15\n*   REGISTER USAGE\n*   R13  ADDRESS OF PCE\n*   R12  PROGRAM BASE REG\n*   R11  ADDRESS OF HCT\n*   R9   ADDRESS OF INPUT PARAMETER AREA\n*   R8   ADDRESS OF DCT\n*   R7   ADDRESS OF JCT\n*   R6   ADDRESS OF PDDB\n*   R5   ADDRESS OF XECB\n         USING PCE,R13\n         USING XPL,R9                                           @RMF420\n         USING DCT,R8\n         USING JCT,R7\n         USING PDB,R6\n         SPACE 1\n         LR    R9,R1               INPUT PARAMETER\n         L     R8,X015DCT          DCT ADDRESS                  @RMF420\n         L     R7,X015JCT          JCT ADDRESS                  @RMF420\n         L     R6,X015PDDB         PDDB ADDRESS                 @RMF420\n         TITLE 'JES2 USER EXIT 15 - DETERMINE INPUT PARAMETERS'\n*   DETERMINE WHY WE ARE HERE\nBRTABLE  EQU   *                   BRANCH TABLE\n         TM    XPLIND,X015DSEL      CHECK FOR DATA SELECTION    @RMF420\n         BO    EX15SEL             DATA SET SELECTION / PDDB    @RMF420\n         B     EX15EXIT            DATA SET SEPARATOR / COPY\n         TITLE 'JES2 USER EXIT 15 - SELECTION / PDDB'\nEX15SEL  EQU   *                   DATA SET SELECTION / PDDB\n         CLI   DCTDEVID,DCTPRTID   IS THIS A PRINTER  Q.\n         BNE   EX15EXIT            NO, RETURN, NOT A PRINTER\n         SPACE 2\n* TDS MOD TO FORCE FCB LOAD UNLESS CHANGE TO AND FROM STD FORMS.  * JWS\n         CLC   DCTFORMS,PDBFORMS  FORMS CHANGE   Q.\n         BE    TDSNOFOR           NO\n         CLC   DCTFORMS(3),$STDFORM  STOCK PAPER MOUNTED  Q.\n         BNE   TDSFORCE           NO, RELOAD FCB\n         CLC   PDBFORMS(3),$STDFORM  STOCK PAPER REQUESTED  Q.\n         BE    TDSNOFOR           YES, NO FCB LOAD\nTDSFORCE OI    DCTPPSW,DCTPPSWC   (SET SWITCH TO FORCE FCB LOAD)\nTDSNOFOR DS    0H                 (END OF MOD)\n         SPACE 1\n         B     EX15EXIT            RETURN\n         EJECT\nEX15EXIT EQU   *                   RETURN FROM THIS USER EXIT\n         SLR   R15,R15             NORMAL EXIT\n         SPACE 1\n$RETURN  $RETURN RC=(R15)          FINAL RETURN\n         LTORG\n         SPACE 1\n         $MODEND\n         SPACE 1\n         EJECT\n         PRINT ON,NOGEN,NODATA\n         DCBD  DSORG=PS\n         SPACE 1\n         END\n./ ADD NAME=LSES509J 0305-00234-05314-1455-00024-00018-00019-T0SM0\n//T0SM509J JOB  (4030,37),'REDO--LSES509',CLASS=X,MSGCLASS=A,\n//  REGION=6M,\n//    NOTIFY=&SYSUID\n//*\n//*%PDSDOC 00 SMP APPLY LSES509\n/*JOBPARM S=TSPC\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI  <== UPDATE FOR YOUR CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=THIS.DATA.SET.NAME(LSES509)  <== UPDATE\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES509) BYPASS(APPLYCHECK) .\n  RESETRC.\n  RECEIVE S(LSES509) SOURCEID(MELLON) .\n  SET BDY(TARGET).                          <== UPDATE TO TGT\n  APPLY S(LSES509) REDO .\n./ ADD NAME=LSES510  0303-00234-05123-1443-00209-00220-00001-T0SM0\n++USERMOD(LSES510)\n /* ***************************************************************\n    ** * USEREXIT 20A                                          * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707) REQ(LSES500) .\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STSCX20A),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STSCX20A)\n NAME STSCX20A(R)\n/*\n++SRC(STSCX20A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\nSTSCX20A TITLE 'JES2 END OF INPUT USER EXIT -- PROLOG'\n***********************************************************************\n*\n*   FUNCTIONS:\n*              * COPY FIELDS FROM OUR JCT EXTENSION TO OUR JQE BERT\n*                THAT WERE SET DURING EXIT 4 PROCESSING, AND SET\n*                AFFINITY FOR /*ROUTE XEQ HERE REQUESTS.\n*\n*   NOTES:\n*\n*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE\n*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS\n*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED\n*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF\n*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE\n*  USEFULLNESS OF THE MATERIAL.\n*\n*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,\n*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE\n*  IN THE FUTURE.\n*\n*    SPECIAL THANKS GO TO BOB BREAK OF ST. LOUIS FOR THE ORIGINAL CODE\n*  TO PARSE THE \"/*ROUTE XEQ RESNAME\" CARDS AND SET THE APPROPRIATE\n*  EXECUTION ENVIRONMENT.\n*\n*    SPECIAL THANKS TO JUDY RUNT OF WISCONSIN ELECTRIC FOR THE ORIGINAL\n*  CODE TO HANDLE THE \"/*CNTL BEFORE|AFTER|WITH,RESNAME\" AND \"/*CNTL\n*  RESNAME,EXC|SHR\" ROUTINES.  THE USE OF THE BLOCK EXTENSION REUSABLE\n*  TABLES, BERT'S, TO EXTEND THE JCT AND JQE.\n*\n*\n* REVISION HISTORY:\n*\n*   DATE   NAME         DESCRIPTION OF CHANGE\n* -------- ------------ -----------------------------------------------\n*\n***********************************************************************\n         SPACE 3\n         PRINT OFF                 SUPRESS PRINTING OF JES2 GLOBALS\n         COPY  $HASPGBL            INCLUDE THE JES GLOBAL VALUES\n         PRINT ON                  RETORE FULL PRINTING\nSTSCX20A $MODULE TITLE='JES2 END OF INPUT USER EXIT',                  X\n               RMODE=ANY,                                              X\n               ENVIRON=JES2,                                           X\n               RPL,                GENERATE RPL DSECT                  X\n               $BERT,              (BERT)                              X\n               $BERTTAB,           (BERT)                              X\n               $BUFFER,            HASP SPOOL BUFFER DSECT             X\n               $CADDR,                                                 X\n               $CATBERT,           (BERT)                              X\n               $CMB,               ($RDRWORK)                          X\n               $DCT,               (INFORM)                            X\n               $HASPEQU,           HASP EQUATES                        X\n               $HCCT,              (BERT)                              X\n               $HCT,               HASP CONTROL TABLE DSECT            X\n               $HFAME,             ($HCCT)                             X\n               $JCT,               HASP JOB CONTROL TABLE DSECT        X\n               $JCTX,              HASP JOB CONTROL TABLE DSECT        X\n               $JQE,               HASP JOB QUEUE ELEMENT DSECT        X\n               $MIT,               HASP MIT DSECT                      X\n               $MITETBL,                                               X\n               $PADDR,             HASP PADDR DSECT                    X\n               $PARMLST,                                               X\n               $PCE,               HASP PROCESSOR CONTROL ENTRY DSECT  X\n               $PSV,                                                   X\n               $QSE,               ($HCT)                              X\n               $RDRWORK,           HASP RDR PCE WORKAREA DSECT         X\n               $SAFINFO,           ($RDRWORK)                          X\n               $SCAT,              HASP SCAT DSECT                     X\n               $SCANTAB,           HASP SCAN TABLE DSECT               X\n               $SJB,               (INFORM)                            X\n               $TQE,               ($SJB)                              X\n               $TRE,               HASP TRE DSECT                      X\n               $USERCBS,           USER DSECTS                         X\n               $XECB               ($HCT)\n         SPACE 5\n         USING JCT,R10\n         USING HCT,R11\n         USING PCE,R13\n         TITLE 'JES2 END OF INPUT USER EXIT'\nEXIT20A  $ENTRY BASE=(R12),CSECT=NO,ENTRY=YES,REGUSE=(R15)\n         $SAVE  ,                  SAVE CALLER'S REGISTERS\n         LR    R12,R15             SET BASE REGISTER\n         SPACE 2\n*\n*  UP FRONT HOUSEKEEPING HERE...\n*\n         LA    R6,0                PRESET RETURN CODE (NO JQA YET)\n         LTR   R10,R10             CHECK IF A JCT WAS PROVIDED\n         BZ    RETURN              NO - JUST RETURN\n         ICM   R9,B'1111',PCEJQE   GET OUR JQE ADDRESS AND VALIDATE\n         BZ    RETURN              NO VALID -- JUST RETURN\n*\n*  CHECK FOR \"HERE\" TYPE OF ROUTING\n*  IF HERE WAS SPECIFIED - CLEAR THE FIELD AND IF NO AFFINITY IS\n*  ALREADY SET - THEN SET IT FOR \"HERE\"\n*\n         USING JQE,R9\n         CLC   JCTSCHEN(5),=C'HERE '   CHECK FOR \"HERE\" ROUTING\n         BNE   NOTHERE                 DON'T SET IN SCHENV IF HERE\n         MVI   JCTSCHEN,C' '\n         MVC   JCTSCHEN+1(L'JCTSCHEN-1),JCTSCHEN  CLEAR THE FIELD\n*\n*  RESET THE AFFINIT TO \"HERE\" REGUARDLESS OF ANY OTHE SYSAFF=\n*\n         $SETAFF REQUEST=CLEAR,AFFIELD=RDWSAF\n         $SETAFF REQUEST=MOVE,AFFIELD=RDWSAF,AFTOKEN=$AFFINTY\n         DROP  R9\n*\n*  LOCATE OUR JCT EXTENSION.\n*\nNOTHERE  $JCTXGET  JCT=(R10),      LOCATE OUR JCT EXTENSION            X\n               TYPE='USER',MOD=1,                                      X\n               ERRET=RETURN        DONT CREATE A JQEX IF NO JCTX\n*\n         LR    R7,R1               GET ADDRESS OF OUR EXTENSION\n         USING STJCTX,R7\n*\n**********************************************************************\n*\n*  GET OUR JQE FOR UPDATE AND LOCATE OUR BERT FOR THIS\n*  JOB (ALL TYPES: BATCH, STC, TSU) AND INITIALIZE FOR LATER USE.\n*\n**********************************************************************\n         $QSUSE  ,                 MAKE SURE WE OWN THE QUEUES\n*\n         $DOGJQE ACTION=(FETCH,UPDATE),      GET AN UPDATE MODE JQA    X\n               JQE=(R9)\n*\n         LR    R9,R0               GET THE ADDR OF OUR JQA\n*\n         $DOGBERT ACTION=GETOFFSET,    GET THE OFFSET                  X\n               CBTYPE=JQE,                IN THE JQA                   X\n               NAME=STQNAME,                 OF OUR BERT               X\n               ERRET=BADBERT\n*\n         LA    R8,0(R1,R9)         GET ADDRESS OF OUR BERT\n         USING STQNAME,R8\n*\n* COPY OUR FIELDS FROM THE JCT EXTENSION TO OUR BERT.\n*\n         MVC   UBRWITH,UJCXWITH    COPY /*WITH NAME\n         MVC   UBRBFOR,UJCXBFOR    COPY /*BEFORE NAME\n         MVC   UBRAFTR,UJCXAFTN    COPY /*AFTER  NAME\n         MVC   UBRDNAME,UJCXDNAM   COPY /*CNTL NAMES AND SHARE TYPES\n         MVC   UBRUFLAG,UJCXUFLG   COPY OUR MISC JECL CARDS FLAGS\n         MVC   UBRMFLAG,UJCXMFLG   COPY OUR /*AFTER/BEFORE/CNTL FLAGS\n         MVI   UBRDLAYS,0          ZERO OUR DELAY FLAGS\n         DROP  R7                  LOSE ADDRESS OF OUR JCTX\n*\n* CHECK JOB TYPE\n*\n********************************************************************\n*  EXIT RETURN POINTS\n********************************************************************\nRET00    DS    0H\n         LA    R6,0                SET NORMAL RETURN CODE\n*\nRETJQA   DS    0H                  RETURN THE JQA BEFORE EXITING\n         $DOGJQE  ACTION=RETURN,                                       X\n               CBADDR=(R9)\n*\nRETURN   DS    0H\n         $RETURN RC=(R6)           RETURN TO CALLER\n*\nBADBERT  DS    0H                  ERROR RETURN FROM $DOGBERT\n         $WTO  BADBERTM,L'BADBERTM,ROUTE=$MAIN,CLASS=$ALWAYS\n         B     RETJQA              GO RETURN THE JQA AND EXIT\n*\nBADBERTM $MSG  999,'ERROR RETURNED GETTING BERT IN STSCX20A'\n*\n         SPACE 3\n         TITLE 'JES2 END OF INPUT USER EXIT -- EPILOG'\n         $MODEND ,\n         END   ,\n./ ADD NAME=LSES510J 0405-00234-05314-1431-00023-00018-00018-T0SM0\n//T0SM510J JOB  (4030,37),'REDO--LSES510',CLASS=X,MSGCLASS=A,\n//  REGION=6M,\n//    NOTIFY=&SYSUID\n//*\n//*%PDSDOC 00 SMP APPLY LSES510\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI   <== UPDATE TO YOUR CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=THIS.DATA.SET.NAME(LSES510) <== UPDATE\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES510) BYPASS(APPLYCHECK).\n  RESETRC .\n  RECEIVE S(LSES510) SOURCEID(MELLON) .\n  SET BDY(TARGET).                       <== UPDATE TO YOUR TGT\n  APPLY S(LSES510) REDO.\n./ ADD NAME=LSES511  0202-00234-03317-2254-00425-00437-00001-T0SM1\n++USERMOD(LSES511)\n /* ***************************************************************\n    ** * USER EXIT 36A                                         * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707) .\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STSCX36A),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.apf.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STSCX36A)\n NAME STSCX36A(R)\n/*\n++SRC(STSCX36A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\n PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1,REUS=REFR) '\nSTSCX36A TITLE 'SAMPLE EXIT 36 (PRE SAF CALL) - (MODULE COMMENT BLOCK)'\n* **PROPRIETARY STATEMENT**********************************************\n*                                                                     *\n*   LICENSED MATERIALS-PROPERTY OF IBM                                *\n*   THIS MODULE IS \"RESTRICTED MATERIALS OF IBM\"                      *\n*   5695-047 (C) COPYRIGHT IBM CORP 1990                              *\n*   SEE COPYRIGHT INSTRUCTIONS                                        *\n*                                                                     *\n*   STATUS = HJE4420                                                  *\n*                                                                     *\n* **END-OF-PROPRIETARY-STATEMENT***************************************\n***********************************************************************\n*                                                                     *\n* MODULE NAME = HASX36A (HASX36A CSECT)                               *\n*                                                                     *\n* DESCRIPTIVE NAME = Sample Pre-SAF call user exits                   *\n*                                                                     *\n* FUNCTION =                                                          *\n*                                                                     *\n*         PROPRMT  - Cause userid propagation for RJE jobs            *\n*                                                                     *\n* NOTES =                                                             *\n*                                                                     *\n*    DEPENDENCIES = NONE                                              *\n*                                                                     *\n*    RESTRICTIONS = NONE                                              *\n*                                                                     *\n*    ATTRIBUTES = JES2 REENTRANT, RMODE 24, AMODE 31                  *\n*                                                                     *\n* ENTRY POINTS =                                                      *\n*                                                                     *\n*         SYSLOG   - Allow all TSO users to view SYSLOG               *\n*                                                                     *\n*         NOCREDEL - Bypass SAF calls for data set create and deletes *\n*                                                                     *\n*         PROPRMT  - Cause userid propagation for RJE jobs            *\n*                                                                     *\n* MACROS =                                                            *\n*                                                                     *\n*         JES2 - $ENTRY, $MODEND, $MODULE, $RETURN, $SAVE             *\n*                                                                     *\n* CHANGE ACTIVITY:                                                    *\n*                                                                     *\n* $420P306=PTM      HJE4420 910118 R_W1: Sample Exit Prolog Problems  *\n*                                                                     *\n* A000000-999999    CREATED FOR JES2 4.1.0                         @410\n***********************************************************************\n         TITLE 'SAMPLE EXIT 36 (PRE SAF CALL) -- PROLOG ($HASPGBL)'\n         COPY  $HASPGBL\n         TITLE 'SAMPLE EXIT 36 (PRE SAF CALL) -- PROLOG ($MODULE)'\nSTSCX36A $MODULE ENVIRON=USER,                                         C\n               TITLE='PROLOG ($MODULE)',                               C\n               RMODE=ANY,                                              C\n               SAFP,               SAF ICHSAFP - parm list mapping     C\n               TOKEN,              SAF ICHRUTKN - TOKEN mapping        C\n               $CADDR,             Common storage address list         C\n               $DTE,               Daughter task element               C\n               $ERA,               Erorr recovery area                 C\n               $HASPEQU,           General EQUATES                     C\n               $HCCT,              Common storage control table        C\n               $HCT,               Private storage control table       C\n               $HFAME,             HASP file allocation map element    C\n               $JCT,               jes2 job control block              C\n               $JCTX,              JES2 JOB CONTROL BLOCK              C\n               $MIT,               Module information table            C\n               $PADDR,             Private storage address list        C\n               $PARMLST,           Parameter list values/equates       C\n               $PCE,               Processor control element           C\n               $PSV,               Processor save area                 C\n               $SAFINFO,           saf control block                   C\n               $SCAT,              SYSOUT class attribute table        C\n               $XECB,              Extended ECB                        C\n               $WAVE,              Work access verification element    C\n               $XIT,               Exit information table              C\n               ($XPL,GEN)          Exit parameter list\n         TITLE 'CAUSE USERID PROPAGATION FOR RJE JOBS -- (ROUTINE PROPRC\n               MT)'\n***********************************************************************\n*                                                                     *\n*        PROPRMT - Cause the userid of RJE to propagate to its jobs.  *\n*                                                                     *\n* FUNCTION :                                                          *\n*                                                                     *\n*        This routine will allow installations to have jobs submitted *\n*        from remote work stations act as if the jobs had been        *\n*        submitted from logged on TSO user sessions.  This will only  *\n*        work if the RJE signon was processed via RACF.  The session  *\n*        type on the RACROUTE REQUEST=VERIFYX call will be changed    *\n*        from RJEBATCH to INTBATCH.  This will indicate to RACF that  *\n*        the USERID of the submittor should be propagated to the job  *\n*        if there is no USER= parameter coded on the job card.  (The  *\n*        USERID is not propagated for RJEBATCH session types.)        *\n*        For RJEs, the USERID is the work station name.               *\n*                                                                     *\n*        This will cause the audit records to look funny since jobs   *\n*        will be accepted into the system that otherwise would have   *\n*        failed.                                                      *\n*                                                                     *\n*        JESINPUT class profiles will have to be changed to           *\n*        accomodate port of entrys (POEs) of the form Rn.RDm.         *\n*        Note: For remotes numbered from 1000-9999, the form          *\n*              is RnnnnRDm (no inner period).                         *\n*                                                                     *\n* LINKAGE :                                                           *\n*                                                                     *\n*        This routine is entered via a BASR R14,R15 from the USERSUB  *\n*        routine in the HASCSIRQ CSECT of the HASPSSSM load module.   *\n*        Control is returned via $RETURN.                             *\n*                                                                     *\n* OPERATION :                                                         *\n*                                                                     *\n*        LOADMOD(HASX36A) STORAGE=CSA                          @420P306\n*        EXIT(36)  ROUTINES=PROPRMT,STATUS=ENABLED             @420P306\n*                                                                     *\n* ENVIRONMENT :                                                       *\n*                                                                     *\n*        Subtask                                                      *\n*                                                                     *\n* RECOVERY :                                                          *\n*                                                                     *\n*        Default recovery provided by general purpose subtask.        *\n*                                                                     *\n* REGISTER USAGE (ENTRY/EXIT) :                                       *\n*                                                                     *\n*    REG       VALUE ON ENTRY             VALUE ON EXIT               *\n*                                                                     *\n*    R0        N/A                        Unchanged                   *\n*    R1        Address of parm list       Unchanged                   *\n*    R2-R10    N/A                        Unchanged                   *\n*    R11       HCCT address               Unchanged                   *\n*    R12       N/A                        Unchanged                   *\n*    R13       Save area                  Unchanged                   *\n*    R14       Return address             Unchanged                   *\n*    R15       Routine address            Return code                 *\n*                                                                     *\n* PARAMETER LIST :                                                    *\n*                                                                     *\n*        See $XPL expansion                                           *\n*                                                                     *\n* REGISTER USAGE (INTERNAL) :                                         *\n*                                                                     *\n*    REG       VALUE                                                  *\n*                                                                     *\n*    R0        N/A                                                    *\n*    R1        XPL (parameter list addr)                              *\n*    R2-R3     N/A                                                    *\n*    R4        SAF and RACINIT parm list address                      *\n*    R5-R10    N/A                                                    *\n*    R11       HCCT address                                           *\n*    R12       Routine base address                                   *\n*    R13       Available save area                                    *\n*    R14       Linkage                                                *\n*    R15       Return code                                            *\n*                                                                     *\n* DATA AREA USAGE (INTERNAL) :                                        *\n*                                                                     *\n*    NAME          VALUE                                              *\n*                                                                     *\n*    $SEAINIT      The FUNCODE for a VERIFYX                          *\n*                                                                     *\n*    INITSESN      The SESSION value in RACINIT(VERIFYX) parm list    *\n*    SAFPRACP      Offset of the specific RACROUTE request type parms *\n*    TOKRBCH       The equate for SESSION=RJEBATCH                    *\n*                                                                     *\n*    XPLIND        Exit parameter list indicator byte - FUNCODE value *\n*    X036PARM      Address of the RACROUTE parameter list             *\n*                                                                     *\n* RETURN CODES (R15 ON EXIT) :                                        *\n*                                                                     *\n*         0 - ALWAYS RETURNED                                         *\n*                                                                     *\n* OTHER CONSIDERATIONS :                                              *\n*                                                                     *\n*         N/A                                                         *\n*                                                                     *\n***********************************************************************\n         TITLE 'CAUSE USERID PROPAGATION FOR RJE JOBS -- PROPRMT'\n         USING XPL,R8              XPL  ADDRESSABILITY\n         USING HCCT,R11            HCCT addressability\n         SPACE 1\nEXIT36A  $ENTRY BASE=R12\n         SPACE 1\n        $SAVE TRACE=YES,NAME=PROPRMT  Save callers registers\n         SPACE 1\n         LR    R12,R15             Set local base\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Check for VERIFYX SAF call with session type RJEBATCH.       *\n*        Change all RJEBATCH session types to INTBATCH.               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         LR    R8,R1               SAVE REGISTER 1\n         CLI   XPLIND,$SEAINIT     WAS THE CALL FOR VERIFYX?\n         BNE   TRYREST             NO, THEN NOT INTERESTED\n         $GETMAIN RC,LV=$$LGTH,BNDRY=DBLWD,LOC=BELOW\n         LTR   R15,R15\n         BZ    $$CONT0\n         DC    X'0000'\n$$CONT0  EQU   *\n         SPACE 1\n         LR    R9,R1               PUT GETMAIN ADDR INTO R9\n         USING $$DMYARA,R9         TELL SYTEM TO USE R9 FOR ADDR\n         MVC   RACF_INIT(RACFLTHI),RACFINIT  MOVE IN LIST FORMAT\n         MVI   BLANK_AREA,X'40'      MOVE IN BLANK\n         MVC   BLANK_AREA+1($$SPACES-1),BLANK_AREA\n         MVC   R15AREA,=F'0'       SET R15AREA TO BINARY ZEROES\n         MVI   THREE_DIGITSW,0     SET TO BINARY ZERO AT START\n         ICM   R4,B'1111',X036RCBA GET RELATED CONTROL BLOCK (SAFINFO)\n         CLC   =C'SFI',0(R4)       is it sfi\n         BE    $$CONT              YES GO ON\n         DC    X'0000'             OTHERWISE DUMP\n$$CONT   EQU   *\n         USING SAFINFO,R4          USE R4 AS BASE\n         ICM   R5,B'1111',SFIJCT   GET ADDR OF JCT\n         USING JCT,R5              USE R 5 AS JCT\n         CLC   =C'JCT',JCTID       IS IT JCT\n         BE    $$CONT1             YES GO ON\n         DC    X'0000'             OTHERWISE DUMP\n$$CONT1  EQU   *\n         SR    R7,R7               SET R7 TO ZEROES\n         CLC   =C'TZZZ',JCTJNAME   CHECK FOR SPECIAL JOBNAME\n         BNE   NOT_A_TEST         IF NOT JUST CONTINUE AS NORMAL\n         CLC   =C'N016',JCTJNAME+4  TEST FOR BOGUS NODE\n         BNE   CHECK_BOGUS_REMOTE  IF NOT CHECK FOR REMOTE TESTER\n         ICM   R7,3,=H'16'          STUFF IN INVALID NODE\n         B     NODE_TESTER         GO VALIDATE NODE\nCHECK_BOGUS_REMOTE EQU *           COME HERE TO TEST REMOTE\n         CLC   =C'R301',JCTJNAME+4  TEST FOR 3 DIGIT ONE\n         BNE   TEST_FOR_2DIGIT\n         ICM   R7,3,=H'301'        PUT IN 301\n         B     REMOTE_TESTER\nTEST_FOR_2DIGIT EQU *              TEST FOR 2 DIGIT\n         CLC   =C'R020',JCTJNAME+4  IS IT 2 DIGIT GUY\n         BNE   NOT_A_TEST          PROCESS AS NORMAL JOB\n         ICM   R7,3,=H'20'         STUFF 20 INTO R7\n         B     REMOTE_TESTER\nNOT_A_TEST EQU *                   COME HERE -- NORMAL PROCESS\n         ICM   R7,3,JCTRRMT        TEST FOR REMOTE ID\n         BZ    CHECK_NODES         IF 0 CHECK THE NODES FIELD\nREMOTE_TESTER EQU *                FORCE HERE FOR REMOTE TESTING\n         MVC   $$RMTROT,=C'RMT$'   MOVE IN STATIC PORTION USERID\n         MVC   $$RMTGNM,=C'RMT'    MOVE IN STATIC PORTION OF GRP ID\n         B     CONVERT             OTHERWISE GO CONVERT\nCHECK_NODES    EQU *               COME HER TO TEST NODE-IDS\n         ICM   R7,3,JCTRNODE       INSERT 2 BYTES OF NODE ID\n         BZ    EXIT36AD            IF VL = 0 EXIT PROGRAM\n         CLM   R7,B'0011',=H'13'   IS IT ORLANDO AND VMFLO7\n         BE    SET_NODE            YES GO CONVERT\n         CLM   R7,B'0011',=H'14'   IS IT 9221 EITHER PLACE\n         BE    SET_NODE            YES GO CONVERT\n         CLM   R7,B'0011',=H'15'   IS IT ATLANTA AND 9370\n         BE    SET_NODE            YES GO CONVERT\n*  CODE ADDED TO SUPPORT RSCSGAA8 AND RSCSFLO7 IN ATLANTA.\n         CLM   R7,B'0011',=H'9'    IS IT ATLANTA AND RSCSGAA8\n         BE    SET_NODE            YES GO CONVERT\n         CLM   R7,B'0011',=H'20'   IS IT ATLANTA AND RSCSFLO7\n         BE    SET_NODE            YES GO CONVERT\n         B     EXIT36AD            ANYBODY ELSE NO PROPAGATION\nNODE_TESTER  EQU  *                COME HERE TO TEST NODES\nSET_NODE EQU   *                   COME TO SET UP NODE NAMES\n         MVC   $$RMTROT,=C'NJE$'   MOVE IN STATIC PORTION USERID\n         MVC   $$RMTGNM,=C'NJE'    MOVE IN STATIC PORTION OF GRP ID\nCONVERT  EQU   *                   COME HERE IF 9370 OR 9221\n         CVD   R7,$$DOUBLE         CONVERT REMOTE # TO PACKED\n         UNPK  $$EXTNAL,$$DOUBLE   CONVERT TO EXTERNAL DECIMAL\n         OI    $$EXTNAL+2,X'F0'    GET RID OF SIGN\n         CLI   $$EXTNAL,X'F0'      Q--IS THE HIGH NUMBER ZERO\n         BE    TWO_DIGIT           A--YES RMT/NODE 00-99\n         OI    THREE_DIGITSW,1     TURN ON THREE DIGIT SWITCH\n         MVC   $$RMTNNN,$$EXTNAL      MOVE 3 DIGITS INTO NAME\n         MVC   $$RMTGN3,$$RMTNNN      MOVE THREE TO GROUP ID\n         MVI   $$RMTUSR_LENGTH,7   MAKE LENGTH A LITTLE BIGGER\n         MVI   $$RMTGRP_LENGTH,6   SAME HERE\n         B     $$SETUP_RACROUTE    AND GO TO RACF CALL\nTWO_DIGIT EQU  *                   COME HERE ON 00-99\n         MVC   $$RMTNN,$$EXTNAL+1  MOVE TO USERID FIELD\n         MVC   $$RMTGNO,$$RMTNN    MOVE TO GROUP NUMBER FIELD\n         MVI   $$RMTUSR_LENGTH,6   PUT LENGTH INTO FLD\n         MVI   $$RMTGRP_LENGTH,5   PUT GROUP LENGTH INTO FLD\n$$SETUP_RACROUTE EQU *             COME HERE FROM 100-999\n         MVI   LOG_AREA_LGTH,LOG_DATA   STORE LENGTH IN 1 BY\n         MVC   LOGUSER,$$RMTROT    MOVE RMT GROUP AND USER ID\n         MVC   LOGGROUP,$$RMTGNM   MOVE RMT GROUP AND USER ID\n         LA    R6,LOG_AREA_LGTH    STORE INTO R6\n         LA    R2,$$RMTUSR_LENGTH  LOAD LENGTH + USER ID ADDR\n         LA    R3,$$RMTGRP_LENGTH  LOAD LENGTH + GROUP ID ADDR\n         LA    R10,RACF_INIT       LOAD ADDR OF LIST RACROUTE\n         RACROUTE REQUEST=VERIFY,ACEE=(R8),GROUP=(R3),PASSCHK=NO,      X\n               RELEASE=1.9,ENVIR=CREATE,USERID=(R2),LOG=ALL,           X\n               WORKA=$$WRKARA,MF=(E,(R10)),LOGSTR=(R6)\n         LTR   R15,R15             TEST FOR ZEROES\n         BZ    VALID_NODE          IF ZERO RACF KNOWS HIM\n         MVC   X036RETC,=F'8'      SET RETRUN CODE 8\n         MVC   X036RSNC,=F'14'     SET REASON CODE 14\n         OI    XPLRESP,X036NORC   TURN ON OVERRIDE BIT\n         B     EXIT36AD            ANYBODY ELSE NO PROPAGATION\n         DC    X'0000'             OTHERWISE DUMP\nVALID_NODE EQU *                   USERID EXISTS\n         MVC   RACF_INIT(RACFLTHI),RACFINIT  MOVE IN LIST FORMAT\n         RACROUTE REQUEST=VERIFY,ACEE=(R8),RELEASE=1.9,ENVIR=DELETE,   X\n               WORKA=$$WRKARA,MF=(E,(R10))\n         LTR   R15,R15             TEST FOR GOOD DELETE\n         BZ    RACF_OK             ABLE TO DELETE ACEE OK\n         DC    X'0001'             SHOULD NOT GET HERE\nRACF_OK  EQU   *                   COME HERE ON GOOD DELETE\n         OI    JCTFLAG1,JCT5CKPT   REWRITE THIS JCT           RF-950313\n         OI    JCTFLAG2,JCT2AVDP+JCT2AVD  VALIDATION FLAG\n         TM    THREE_DIGITSW,1     IS IT 2 OR 3 POS NUMBER\n         BZ    JUST_TWO            IF ZERO RMT/NODE =00/99\n         MVI   SFIUIDL,7           MOVE LENGTH OF USERID\n         MVI   SFISUIDL,7          MOVE LENGTH OF USERID\n         MVI   SFIGRPL,6           MOVE LENGTH OF GROUP ID\n         MVI   SFISGRPL,6          MOVE LENGTH OF GROUP ID\n         MVC   SFIUID(L'NAME_ULENGTH7),$$RMTROT    MOVE IN USERID\n         MVC   SFISUID(L'NAME_ULENGTH7),$$RMTROT   MOVE IN USERID\n         MVC   SFIGRP(L'NAME_GLENGTH6),$$RMTGNM    MOVE IN GROUP NAME\n         MVC   SFISGRP(L'NAME_GLENGTH6),$$RMTGNM   MOVE IN GROUP NAME\n         B     RACF_OVERRIDE\nJUST_TWO EQU   *                   COME HERE 00/99\n         MVI   SFIUIDL,6           MOVE LENGTH OF USERID\n         MVI   SFISUIDL,6          MOVE LENGTH OF USERID\n         MVI   SFIGRPL,5           MOVE LENGTH OF GROUP ID\n         MVI   SFISGRPL,5          MOVE LENGTH OF GROUP ID\n         MVC   SFIUID(L'NAME_ULENGTH),$$RMTROT     MOVE IN USERID\n         MVC   SFISUID(L'NAME_ULENGTH),$$RMTROT    MOVE IN USERID\n         MVC   SFIGRP(L'NAME_GLENGTH),$$RMTGNM     MOVE IN GROUP NAME\n         MVC   SFISGRP(L'NAME_GLENGTH),$$RMTGNM    MOVE IN GROUP NAME\nRACF_OVERRIDE  EQU *\n         OI    SFIFLAG1,SFI1SREQ+SFI1NORM                rf-950314\n         L     R6,X036PARM\n         USING SAFP,R6\n         LR    R8,R6\n         A     R8,SAFPRACP\n         RACROUTE REQUEST=VERIFYX,PASSCHK=NO,MF=(M,(R6)),RELEASE=1.9,  x\n               SESSION=INTBATCH\n         B     EXIT36AD\n         TITLE 'END OF PROPRMT ROUTINE -- RETURN TO CALLER'\n***********************************************************************\n*                                                                     *\n*        Always return to the caller with a zero return code so that  *\n*        any other exits will get control.  There will be no changes  *\n*        in the condition byte so that the SAF call can be made or    *\n*        not be made as decided by other exits.                       *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nEXIT36AD EQU  *\n         $FREMAIN RU,LV=$$LGTH,A=(R9)\nTRYREST  SLR    R15,R15            Indicate to take other exits\n        $RETURN RC=(R15)           Restore callers registers and return\n         SPACE 1\n         LTORG\nRACFINIT RACROUTE REQUEST=VERIFY,RELEASE=1.9,MF=L,PASSCHK=NO\nRACFLTHI EQU *-RACFINIT    sets racflthi to length of racroute\n$$DMYARA DSECT\n$$WRKARA DS    CL512              WORKAREA FOR RACROUTE\nRACF_INIT ORG *+RACFLTHI LEAVE ENOUGH ROOM FOR LIST VERSION\nBLANK_AREA DS 0C\n$$DOUBLE DC    D'0'               CONVERSION FIELD FOR BINARY\n$$RMTUSR_LENGTH DC X'0'           LENGTH OF USERID\nNAME_ULENGTH  DS 0CL6           GET LENGTH OF USER NAME\nNAME_ULENGTH7 DS 0CL7           GET LENGTH OF USER NAME\n$$RMTROT DC    CL4'RMT$'          STATIC PORTION OF USERID\n$$RMTNN  DC    CL2'0'             DYNAMIC PORTION OF USERID\n         ORG   $$RMTNN            SET LOCATION COUNTER BACK\n$$RMTNNN DC    CL3'0'             3 DIGIT REMOTE NUMBER\n$$RMTGRP_LENGTH DC X'0'           LENGTH OF GROUPID\nNAME_GLENGTH  DS 0CL5           GET LENGTH OF GROUP NAME\nNAME_GLENGTH6 DS 0CL6           GET LENGTH OF GROUP NAME\n$$RMTGNM DC    CL3'RMT'           STATIC PORTION OF GROUP NAME\n$$RMTGNO DC    CL2'0'             DYNAMIC PORTION OF GROUP NAME\n         ORG   $$RMTGNO           SET LOCATION COUNTER BACK\n$$RMTGN3 DC    CL3'0'             DYNAMIC PORTION OF GROUP NAME\n$$EXTNAL DC    CL3'0'             UNPACKED FORMAT OF REMOTE #\nR15AREA  DC    F'0'               HOLD AREA FOR R15 IF NEEDED\nTHREE_DIGITSW  DC X'0'            SET TO BINARY ZERO\n$$SPACES EQU   *-BLANK_AREA       LENGTH OF AREA TO SET TO BLANKS\nLOG_AREA_LGTH DC X'0'             1 BYTE LENGTH FIELD\nLOGUSER  DC   CL7' '              MAX LGTH OF FIELD\nLOGGROUP DC   CL6' '              MAX LGTH OF IELD\nLOG_DATA EQU  *-LOG_AREA_LGTH     LENGTH OF LOGGED DATA\n$$LGTH   EQU   *-$$DMYARA         LENGTH OF GETMAIN AREA\n         CSECT\n         DROP  ,\n         TITLE 'SAMPLE USER EXIT 36 ROUTINES -- END ($MODEND)'\n        $MODEND ,\nAPARNUM  DC    CL8'00000000'       APAR NUMBER\n         END   ,                   END OF STSCX36A\n./ ADD NAME=LSES511J 0304-00234-05314-1431-00023-00018-00018-T0SM0\n//T0SM511J JOB  (4030,37),'REDO--LSES511',CLASS=X,MSGCLASS=A,\n// REGION=6M,\n//    NOTIFY=&SYSUID\n//*\n//*%PDSDOC 00 SMP APPLY LSES511\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI    <== UPDATE\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=THIS.DATA.SET.NAME(LSES511) <== UPDATE\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES511) BYPASS(APPLYCHECK).\n  RESETRC.\n  RECEIVE S(LSES511) SOURCEID(MELLON) .\n  SET BDY(TARGET).                    <== UPDATE TO YOUR TGT\n  APPLY S(LSES511) REDO .\n./ ADD NAME=LSES512  0305-00234-05129-1653-00545-00545-00545-T0SM0\n++USERMOD(LSES512)\n /* ***************************************************************\n    ** * USEREXIT 49A                                      -   * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707) REQ(LSES500) .\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STSCX49A),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STSCX49A)\n NAME STSCX49A(R)\n/*\n++SRC(STSCX49A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\nSTSCX49A TITLE 'JES2 JOB QUEUE WORK SELECT USER EXIT -- PROLOG'\n*\n* FUNCTIONS: THIS MODULE EITHER ACCEPTS OR REJECTS JES2'S CHOICE\n*            FOR JQE SELECTION.  WE USE IT TO SEQUENCE JOB'S BASED ON\n*            THEIR /*AFTER, /*BEFORE, /*WITH AND /*CNTL CARDS.\n*\n*\n*\n* ENTRY PT:  EXIT49A -- STSC'S JOB QUEUE WORK SELECT EXIT.\n*\n* REGISTER USAGE:\n*\n* REG  ON ENTRY     USAGE WITHIN EXIT 49                  ON RETURN\n* ---  ------------ ------------------------------------- ------------\n* R0   N/A          WORK                                  RESTORED\n* R1   XPL          WORK                                  RESTORED\n* R2   N/A          ADDR OF THIS JOB'S STQNAME.           RESTORED\n* R3   N/A          ADDR OF TEST JOB'S JQA.               RESTORED\n* R4   N/A          CAT (IN OUTER LOOP).                  RESTORED\n*                   ADDR OF TEST JOB'S UBRDNAME (INNER).\n* R5   N/A          ADDR OF TEST JOB'S JQE. (OUTER LOOP). RESTORED\n*                   COUNTER OF TEST JOB'S UBRDNAME (INNER).\n* R6   N/A          THIS JOB'S JQA; RETURN CODE AT END.   RESTORED\n* R7   N/A          OFFSET OF STQNAME (FROM $DOGBERT).    RESTORED\n* R8   N/A          $QGET PARM LIST FROM XPL.             RESTORED\n* R9   N/A          XLP (FROM R1 ON ENTRY)                RESTORED\n* R10  N/A          THIS JOB'S JQE (FOR $WTO)             RESTORED\n* R11  HCT          HCT                                   RESTORED\n* R12  N/A          BASE REGISTER FOR THE EXIT.           RESTORED\n* R13  PCE SAVE     PCE SAVE AREA.                        RESTORED\n* R14  RETURN ADDR  ADDR OF THIS JOB'S UBRDNAME.          RESTORED\n* R15  ENTRY ADDR   ADDR OF THIS JOB'S LOOP COUNTER.      RETURN CODE\n*\n*\n*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE\n*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS\n*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED\n*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF\n*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE\n*  USEFULLNESS OF THE MATERIAL.\n*\n*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,\n*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE\n*  IN THE FUTURE.\n*\n*    SPECIAL THANKS GO TO BOB BREAK OF ST. LOUIS FOR THE ORIGINAL CODE\n*  TO PARSE THE \"/*ROUTE XEQ RESNAME\" CARDS AND SET THE APPROPRIATE\n*  EXECUTION ENVIRONMENT.\n*\n*    SPECIAL THANKS TO JUDY RUNT OF WISCONSIN ELECTRIC FOR THE ORIGINAL\n*  CODE TO HANDLE THE \"/*CNTL BEFORE|AFTER|WITH,RESNAME\" AND \"/*CNTL\n*  RESNAME,EXC|SHR\" ROUTINES.  THE USE OF THE BLOCK EXTENSION REUSABLE\n*  TABLES, BERT'S, TO EXTEND THE JCT AND JQE.\n*\n*\n* REVISION HISTORY:\n*\n*   DATE   NAME         DESCRIPTION OF CHANGE\n* -------- ------------ -----------------------------------------------\n*\n         SPACE 1\n&DEBUG   SETC  'NO'                DEBUGGING SWITCH (NO/YES/DETAIL)\n         SPACE 1\n         PRINT OFF                 SUPRESS JES2 GLOBALS\n         COPY  $HASPGBL            INCLUDE THE JES GLOBAL VALUES\n         PRINT ON                  RESTORE FULL PRINTING\nSTSCX49A $MODULE TITLE='JES2 JOB QUEUE WORK SELECT USER EXIT',         X\n               RMODE=ANY,                                              X\n               ENVIRON=JES2,                                           X\n               $BERT,              ($DOGBERT)                          X\n               $BERTTAB,           ($DOGBERT)                          X\n               $CADDR,                                                 X\n               $CAT,               ($DOGCAT)                           X\n               $CATBERT,           ($DOGBERT)                          X\n               $HASPEQU,                                               X\n               $HCCT,              ($DOGBERT)                          X\n               $HCT,                                                   X\n               $JCT,               ($USERCBS: STJCTX)                  X\n               $JCTX,              ($USERCBS: STJCTX)                  X\n               $JQE,                                                   X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PADDR,                                                 X\n               $PARMLST,                                               X\n               $PCE,                                                   X\n               $PSV,                                                   X\n               $QGET,                                                  X\n               $QSE,                                                   X\n               $XECB,                                                  X\n               $XPL,                                                   X\n               $USERCBS            STSC'S CONTROL BLOCKS\n         TITLE 'JES2 JOB QUEUE WORK SELECT USER EXIT'\n         USING HCT,R11\n         USING PCE,R13\nEXIT49A $ENTRY BASE=(R12),CSECT=NO,ENTRY=YES,REGUSE=(R15)\n        $SAVE  ,                   SAVE CALLER'S REGISTERS\n         LR    R12,R15             GET OUR BASE ADDRESS\n*\n         LR    R9,R1               GET OUR PARM LIST ADDRESS\n         USING XPL,R9\n         L     R8,X049QGT          GET THE $QGET PARM LIST ADDR\n         USING QGT,R8\n         L     R10,X049JQE         GET THE SELECTED JQE\n         USING JQE,R10             BASE FOR THE SELECTED JQE\n*\n         AIF   ('&DEBUG' EQ 'NO').DEBG010  SKIP DEBUGGING CODE\n         L     R0,QGTLSTLN         GET THE FLAG BYTES\n         SRL   R0,8                GET RID OF THE LOW ORDER BYTE\n         LA    R15,6               SHOW FIELD LENGTH IN NIBBLES\n         BAL   R14,TOHEX           CONVERT TO HEX\n         MVC   MSG000FL,TOHEXFLD   MOVE HEX VALUES INTO MSG\n*\n        $WTO   MSG000,L'MSG000,JOB=YES,ROUTE=$ALL\n.DEBG010 ANOP  ,                   SKIPPED DEBUGGING CODE\n*\n         CLI   QGTTYP,0            CHECK FOR INWS,OJTWSC,OJTWS,WLMINWS\n         BNE   X049RC00            NO -- EXIT; USE JES2'S SELECTION\n*\n         CLI   QGTWSTP,$QGTWLMQ    CHECK FOR WLM-MANAGED INITS $QGET\n         BE    CHECKJOB            YES - GO CHECK AFTER/BEFORE/CNTL\n*\n         CLI   QGTWSTP,$QGTINWS    CHECK FOR JES2-MANAGED INITS $QGET\n         BNE   X049RC00            NO -- EXIT; USE JES2'S SELECTION\n*\nCHECKJOB DS    0H\n        $DOGBERT ACTION=GETOFFSET, GET OUR BERT'S OFFSET               X\n               CBTYPE=JQE,                                             X\n               NAME=STQNAME,                                           X\n               ERRET=NOSTQNAME     (SHOULDN'T HAPPEN)\n*\n         LR    R7,R1               SAVE OFFSET OF OUR BERT\n*\n        $DOGJQE ACTION=(FETCH,READ),JQE=(R10)  GET SELECTED JQE'S JQA\n         LR    R10,R0              KEEP SELECTED JQA'S ADDRESS AS BASE\n*\n***********************************************************************\n*\n*   INITIATOR (JES2 OR WLM) JOB SELECT\n*\n*        CHECK FOR /*AFTER, /*BEFORE OR /*CNTL CONTENTION.\n*        REJECT JOB IF ANY CONTENTION FOUND BY SETTING X049SKIP.\n*\n***********************************************************************\n*\n         USING CAT,R4              CAT ADDRESSABILITY\n         SLR   R4,R4               INITIALIZE WITH NO CAT\n         SR    R2,R2               SHOW DON'T HAVE JQA FOR THIS JQE\n*\n* SCAN ALL CLASS ATTRIBUTE TABLES (CATS)\n* THIS INCLUDES STARTED TASKS AND TSO USERS.\n*\nNEXTCAT  DS    0H\n         CL    R4,$ALLFFS          IS THERE ANOTHER QUEUE?\n         BE    RETJQA              ALL QUEUES ARE DONE -- NO CONTENTION\n*\n        $DOGCAT ACTION=(FETCHNEXT,READ),  LOOP THROUGH CATS            X\n               CAT=(R4),                                               X\n               ERRET=REBLDQ        DO REBUILD QUEUE WHEN DONE\n*\n         LR    R4,R1               COPY CAT ADDRESS\n*\n         AIF   ('&DEBUG' NE 'DETAIL').DEBG020  SKIP DEBUGGING CODE\n         MVC   MSGCATCL,CATCLASS   SHOW CLASS\n        $WTO   MSGCAT,L'MSGCAT,JOB=YES,ROUTE=$ALL\n.DEBG020 ANOP  ,                   SKIPPED DEBUGGING CODE\n*\n         B     GOTJQEQ             LOOP THRU JQES\n*\nREBLDQ   DS    0H\n*\n         AIF   ('&DEBUG' NE 'DETAIL').DEBG025  SKIP DEBUGGING CODE\n        $WTO   MSGRBLDQ,L'MSGRBLDQ,JOB=YES,ROUTE=$ALL\n.DEBG025 ANOP  ,                   SKIPPED DEBUGGING CODE\n*\n         L     R4,$ALLFFS          INDICATE CLASSES DONE\n*\n* SCAN ALL THE JQES IN THE REBUILD QUEUE (NOT SURE IF WE NEED THIS).\n* GET A REAL-MODE JQE FOR NOW.\n*\n        $QJQE TYPE=REBUILD,        GET FIRST REBUILD JQE               X\n               REG=(R5),                                               X\n               MODE=REAL,                                              X\n               GETFIRST=YES,       NOTE: LOOP AT NEXTJQE               X\n               NOMORE=NEXTCAT\n         B     GOTJQE              GO PROCESS JQE\n*\n* SCAN ALL THE JQES IN THIS CLASS -- GET A REAL-MODE JQE FOR NOW.\n*\nGOTJQEQ  DS    0H\n        $QJQE  CAT=(R4),           LOOP THROUGH JQES FOR               X\n               REG=(R5),            THIS CLASS                         X\n               MODE=REAL,                                              X\n               LOOP=NEXTJQE,                                           X\n               NOMORE=NEXTCAT\n*\nGOTJQE   DS    0H                  FOUND A JQE TO CHECK AGAINST\n         SR    R2,R2               SHOW DON'T HAVE JQA FOR THIS JQE\n*\n         AIF   ('&DEBUG' EQ 'NO').DEBG030  SKIP DEBUGGING CODE\n         MVC   MSGJQEJN,JQEJNAME-JQE(R5)  SHOW JOB NAME\n        $WTO   MSGJQE,L'MSGJQE,JOB=YES,ROUTE=$ALL\n.DEBG030 ANOP  ,                   SKIPPED DEBUGGING CODE\n*\n* CHECK THE SELECTED JQE AGAINST THIS JQE FOR /*AFTER, /*BEFORE OR\n* /*CNTL RESOURCE CONTENTION.\n*\n* 1 - CHECK THE SELECTED JQE TO SEE IF IT IS THE SAME JOBNAME.\n*\n*       IGNORE IF IT IS, SINCE /*AFTER AND /*BEFORE WOULD BE BAD AND\n*       /*CNTL IS IRRELEVANT SINCE WE DON'T ALLOW DUPLICATE JOBS RUN.\n*\n         CLC   JQEJNAME,JQEJNAME-JQE(R5) SAME JOBNAME?\n         BE    NEXTJQE                   YES -- JUST SKIP (NO DUPS)\n         LA    R6,0(R7,R10)        GET OUR BERT'S ADDR FOR SELECTED JQA\n         USING STQNAME,R6           STQNAME FOR JOB JES2 SELECTED.\n*\n* 2 - CHECK THE SELECED JQE TO SEE IF IT SHOULD RUN AFTER THIS JQE.\n*\n         TM    UBRMFLAG,UBRAFT     DOES SELECTED JQA USE /*AFTER?\n         BZ    CHECK3              NO -- DO NEXT CHECK\n         CLC   UBRAFTR(8),JQEJNAME-JQE(R5)  IS IT THIS JQE'S JOBNAME?\n         BE    REJAFT                        YES -- REJECT THIS JOB\n*\n* 3 - CHECK THIS JQE TO SEE IF IT SHOULD RUN BEFORE THE SELECTED JQE.\n*\n*       SINCE ONLY BATCH JOBS CAN HAVE /*BEFORE OR /*CNTL, WE CHECK\n*       FOR THIS FIRST TO AVOID THE COST OF GETTING AND RETURNING\n*       THE JQA FOR EACH TESTED JQE.\n*\nCHECK3   DS    0H\n         TM    JQEFLAG3-JQE(R5),JQE3JOB  IS THIS JQE FOR A BATCH JOB?\n         BNZ   NEXTJQE                   NO - CAN'T HAVE /*BEFORE/CNTL\n*\n* NOW MUST GET A READ MODE JQA FOR THIS CHECK AND /*CNTL CHECKS.\n*       *** DON'T FORGET TO FREE IT. ***\n*\n        $DOGJQE ACTION=(FETCH,READ),JQE=(R5)  GET THIS JQE'S JQA\n         LR    R3,R0               KEEP THIS JQA'S ADDRESS AS BASE\n         LA    R2,0(R7,R3)         GET OUR BERT'S ADDR FOR THIS JQA    X\n                                   (ALSO SHOWS WE HAVE A JQA)\n*\n         TM    UBRMFLAG-STQNAME(R2),UBRBEF DOES THIS JQA USE /*BEFORE?\n         BZ    CHECK4                     NO -- GO TO NEXT CHECK\n         LA    R15,UBRBFOR-STQNAME(,R2)  YES - CHECK THE JOBNAME\n         CLC   JQEJNAME,0(R15)     IS THE SELECTED JQA THE ONE USED?\n         BE    REJBEF              YES -- REJECT THIS JOB\n*\n* 4 - CHECK BOTH JQAS TO SEE IF THEY HAVE /*CNTL CONTENTION.\n*\nCHECK4   DS    0H\n*\n*\n* TWO SETS OF CHECKS HERE, TO SEE IF WE NEED TO CHECK IF THE TASK IS\n* ACTIVE OR NOT.  THIS IS EXPENSIVE, ONLY DO IT IF WE REALLY NEED TO.\n*\n* 1- CHECK FOR A /*WITH IN JES2 SELECTED JOB, AND SEE IF THIS JOB\n*   (FROM ALL JOB SCAN) MATCHES ITS JOBNAME. - IF SO, SEE IF ACTIVE.\n*\n* 2- CHECK IF BOTH JOBS, THE JES2 SELECTED, AND THIS JOB(FROM JOB SCAN)\n*    BOTH HAVE CNTL STATEMENTS - IF THEY DO, SEE IF THIS JOB IS ACTIVE.\n*\n         TM    UBRMFLAG,UBRWITHF   DO WE CHECK FOR A MATCHING /*WITH\n         BZ    CHECK40              IF NOT - FOR /*CNTL\n         CLC   UBRWITH,JQEJNAME-JQE(R5) DOES THIS JOBNAME MATCH THE    X\n                                         JOBNAME FROM THE /*WITH\n         BNE   CHECK40             IF NOT CHECK FOR /*CNTL STMNTS\n         B     CHKBSY              OTHERWISE WE MATCH - SEE IF ACTIVE\n*        OI    UBRDLAYS,UBRDLWIT      SET WITH CONDITION MATCHED\nCHECK40  TM    UBRMFLAG,UBRCNTL    DOES SELECTED JQA USE /*CNTL?\n         BZ    CHK4END             NO -- CAN'T HAVE CONTENTION\n         TM    UBRMFLAG-STQNAME(R2),UBRCNTL DOES THIS JQA USE /*CNTL?\n         BZ    CHK4END                     NO -- CAN'T HAVE CONTENTION\n*\nCHKBSY   EQU   *                   CHECK IF THIS JQA REPRESENTS AN     X\n                                   ACTIVE TASK BY CALLING $QBUSY\n        $QBUSY JQE=(R3),           CHECK IF THIS JQE IS BUSY           X\n               ACTION=(TEST,ANY),                                      X\n               NOTBUSY=CHK4END     NOT BUSY - CAN'T HAVE CONTENTION\n*\n         AIF   ('&DEBUG' EQ 'NO').DEBG040  SKIP DEBUGGING CODE\n         MVC   MSGCTL1R,UBRDNAME   SHOW SELECTED JOB'S RESOURCES\n        $WTO   MSGCTL1,L'MSGJQE,JOB=YES,ROUTE=$ALL\n         MVC   MSGCTL2R,UBRDNAME-STQNAME(R2) SHOW THIS JOB'S RESOURCES\n        $WTO   MSGCTL2,L'MSGJQE,JOB=YES,ROUTE=$ALL\n.DEBG040 ANOP  ,                   SKIPPED DEBUGGING CODE\n*\n*     BOTH JOBS USED /*CNTL AND THE OTHER JOB IS IN EXECUTION,\n*     SEE IF USING THE SAME RESOURCE NAME AND EITHER USES EXCLUSIVE.\n*\n*     SINCE EACH JOB CAN HAVE MULTIPLE (1-4) /*CNTL CARDS, WE MUST\n*     RUN A DOUBLE LOOP TO COMPARE EACH OF THE SELECTED JOB'S\n*     RESOURCE NAMES AND SHARE TYPES WITH EACH OF THE TEST JOB'S\n*     RESOURCE NAMES AND SHARE TYPES.  THE JOB WILL BE REJECTED IF\n*     A RESOURCE NAME MATCHES AND EITHER JOBS' SHARE TYPE IS \"E\".\n*\n*        SETUP POINTER (R14) AND COUNTER (R15) FOR THE OUTER LOOP.\n*\n* NOW WE KNOW THE TASK IS ACTIVE, WE MAY HAVE GOTTEN HERE TO CHECK FOR\n* EITHER A /*WITH MATCH, OR A SET OF /*CNTLS, SO WE NEED TO RETEST.\n*\nRTWTH    EQU   *                   RETEST IF CHECKING FOR /*WITH\n         TM    UBRMFLAG,UBRWITHF   DOES A /*WITH CONDITION EXIST?\n         BZ    RTCNTL              IF NOT CHECK FOR CNTL STATEMENTS\n         CLC   UBRWITH,JQEJNAME-JQE(R5)  DOES THE JOBNAME ALSO MATCH?\n         BNE   RTCNTL              IF NOT CHECK FOR CNTL STATEMENTS\n         OI    UBRDLAYS,UBRDLWIT   SET A WITH MATCHED - ONLY IF ACTIVE.\nRTCNTL   EQU   *                   RETEST IF CHKING FOR /*CNTL-OR BOTH.\n         TM    UBRMFLAG,UBRCNTL    IS THE /*CNTL FIELD SET?\n         BZ    CHK4END             IF NOT SKIP CNTL CHECKS.\n         TM    UBRMFLAG-STQNAME(R2),UBRCNTL  USING THE /*CNTL IN...\n*                                   THE ACTIVE JOB AS WELL?\n         BZ    CHK4END             IF NOT JUST GO TO THE END.\n* NOW CHECK FOR MATHING RESOURCE NAMES, ALSO CHECK EXC, VS SHR VALUES.\n         LA    R14,UBRDNAME        GET ADDR OF RESOURCE NAME FIELDS\n         SLR   R15,R15             ZERO FOR IC INSTRUCTION\n         IC    R15,UBRMFLAG        GET /*CNTL COUNT AND FLAGS\n         SRL   R15,4               SHIFT OUT FLAGS; RIGHT-JUSTIFY COUNT\n*\n* SAVE REGISTERS OVER THE FOLLOWING DOUBLE LOOP\n*\n         STM   R4,R5,SAVE2REG      NEEDED FOR INNER LOOP\n*\n* LOOP THROUGH THE SELECTED JQA'S /*CNTL RESOURCE NAMES\n*      R15 IS THE LOOP COUNTER, R14 POINTS TO RESOURCE NAMES\n*\n*        SETUP POINTER (R4) AND COUNTER (R5) FOR THE INNER LOOP.\n*\nCHK41LP  DS    0H\n         LA    R4,UBRDNAME-STQNAME(R2) GET ADDR OF RESOURCE NAME FIELDS\n         SLR   R5,R5                     ZERO FOR IC INSTRUCTION\n         IC    R5,UBRMFLAG-STQNAME(,R2)  GET /*CNTL COUNT AND FLAGS\n         SRL   R5,4                SHIFT OUT FLAGS; RIGHT-JUSTIFY COUNT\n*\n* LOOP THROUGH THIS JQA'S /*CNTL RESOURCE NAMES, COMPARING TO THE\n* SELECTED JQA'S RESOURCE NAMES.\n*      R5 IS THE LOOP COUNTER, R4 POINTS TO RESOURCE NAMES\n*\nCHK42LP  DS    0H\n         CLC   0(8,R4),0(R14)      COMPARE /*CNTL RESOURCE NAMES\n         BNE   CHK42NXT            DIFFERENT -- INCREMENT INNER LOOP\n         CLI   8(R4),C'E'          IS THIS JQA'S RESOURCE EXCLUSIVE?\n         BE    REJCTL              YES -- REJECT THE SELECTED JOB\n         CLI   8(R14),C'E'         IS SEL'D JQA'S RESOURCE EXCLUSIVE?\n         BE    REJCTL              YES -- REJECT THE SELECTED JOB\n*\nCHK42NXT DS    0H                  END OF INNER LOOP\n         LA    R4,UBRDNAML(,R4)    INCREMENT INNER LOOP POINTER\n         BCT   R5,CHK42LP          DECREMENT INNER COUNTER AND LOOP\n*\n         LA    R14,UBRDNAML(,R14)  INCREMENT OUTER LOOP POINTER\n         BCT   R15,CHK41LP         DECREMENT OUTER COUNTER AND LOOP\n*\n* RESTORE REGISTERS USED IN THIS LOOP\n*\n         LM    R4,R5,SAVE2REG      USED IN THE INNER LOOP\n*\nCHK4END  DS    0H                  END OF 4TH CHECK (/*CNTL)\n        $DOGJQE ACTION=(RETURN),CBADDR=(R3)  RETURN JQA FOR THIS JQE\n*\n         B     NEXTJQE             GO LOOK AT NEXT JQE\n*\n***********************************************************************\n*\n*   COMMON EXIT RETURN POINTS\n*\n***********************************************************************\n*\nREJAFT   DS    0H                  REJECT DUE TO /*AFTER CONTENTION\n         OI    UBRDLAYS,UBRDLAFT   SHOW WHY REJECTED\n         OI    X049RESP,X049SKIP   INDICATE JOB REJECTED\n         AIF   ('&DEBUG' EQ 'NO').DEBG110  SKIP DEBUGGING CODE\n         MVC   DELAYAFJ,JQEJNAME-JQE(R5) COPY DELAYING JOBNAME INTO MSG\n        $WTO   DELAYAFT,L'DELAYAFT,JOB=YES,ROUTE=$MAIN\n.DEBG110 ANOP  ,                   SKIPPED DEBUGGING CODE\n         B     RETJQA              RETURN THE JQA AND EXIT\n*\nREJBEF   DS    0H                  REJECT DUE TO /*BEFORE CONTENTION\n         OI    UBRDLAYS,UBRDLBEF   SHOW WHY REJECTED\n         OI    X049RESP,X049SKIP   INDICATE JOB REJECTED\n         AIF   ('&DEBUG' EQ 'NO').DEBG120  SKIP DEBUGGING CODE\n         MVC   DELAYBEJ,JQEJNAME-JQE(R5) COPY DELAYING JOBNAME INTO MSG\n        $WTO   DELAYBEF,L'DELAYBEF,JOB=YES,ROUTE=$MAIN\n.DEBG120 ANOP  ,                   SKIPPED DEBUGGING CODE\n         B     RETJQAS             RETURN THE JQAS AND EXIT\n*\nREJCTL   DS    0H                  REJECT DUE TO /*CNTL CONTENTION\n         LM    R4,R5,SAVE2REG      RESTORE REGS NEEDED FOR INNER LOOP\n         OI    UBRDLAYS,UBRDLCTL   SHOW WHY REJECTED\n         OI    X049RESP,X049SKIP   INDICATE JOB REJECTED\n         AIF   ('&DEBUG' EQ 'NO').DEBG130  SKIP DEBUGGING CODE\n         MVC   DELAYCTJ,JQEJNAME-JQE(R5) COPY DELAYING JOBNAME INTO MSG\n         MVC   DELAYCTR,0(R14)     COPY DELAYING RESOURCE INTO MSG\n        $WTO   DELAYCTL,L'DELAYCTL,JOB=YES,ROUTE=$MAIN\n.DEBG130 ANOP  ,                   SKIPPED DEBUGGING CODE\n         B     RETJQAS             RETURN THE JQAS AND EXIT\n*\nRETJQAS  DS    0H                  RETURN THE JQA\n        $DOGJQE ACTION=(RETURN),CBADDR=(R3)  FOR THIS JQE\n*\nRETJQA   DS    0H                  RETURN THE JQA FOR\n*  NOW JUST BEFORE RETURNING THE SELECTED JQE -\n*    TEST TO SEE IF THERE WAS A /*WITH AND IF IT WAS SATISFIED\n         TM    UBRMFLAG,UBRWITHF    IS THE A WITH RESTRICTION ?\n         BZ    NOWITHXX                IF NOT JUST CONTINUE\n         TM    UBRDLAYS,UBRDLWIT    WAS THE WITH SATISFIED ?\n         BO    NOWITHXX            SATISFIED - JUST CONTINUE\n         OI    X049RESP,X049SKIP     IF NOT THEN DON'T SELECT JOB\n         AIF   ('&DEBUG' EQ 'NO').DEBG140  SKIP DEBUGGING CODE\n         MVC   DELAYWTJ,UBRWITH    COPY DELAYING JOBNAME INTO MSG\n        $WTO   DELAYWTT,L'DELAYWTT,JOB=YES,ROUTE=$MAIN\n.DEBG140 ANOP  ,                   SKIPPED DEBUGGING CODE\n*\nNOWITHXX EQU   *                      NOT BEING SATISFIED.\n        $DOGJQE ACTION=(RETURN),CBADDR=(R10)  THE SELECTED JQE\n         B     X049RC04            EXIT - BYPASS OTHER EXIT 49 ROUTINES\n*\nX049RC04 DS    0H                  BYPASS OTHER EXIT 49 ROUTINES\n         LA    R6,4                SET RETURN CODE\n         B     X049RET\n*\nX049RC00 DS    0H                  RUN OTHER EXIT 49 ROUTINES\n         LA    R6,0                SET RETURN CODE\n*\nX049RET  DS    0H                  COMMON RETURN POINT\n        $RETURN RC=(R6)\n*\n* ERROR RETURN FROM $DOGBERT ACTION=GETOFFSET (SHOULDN'T HAPPEN)\n*\nNOSTQNAME DS   0H\n        $WTO   NOBERTM,L'NOBERTM,JOB=YES,ROUTE=$MAIN\n         B     X049RC00            TAKE STANDARD RETURN\n*\n         AIF   ('&DEBUG' EQ 'NO').NOTOHEX    SKIP DEBUGGING LOGIC\n         TITLE 'JES2 JOB QUEUE WORK SELECT USER EXIT -- TOHEX SUBROUTINX\n               E'\n*\n*  SUBROUTINE TO CONVERT THE CONTENTS OF R0 TO HEX.  RESULTS ARE STORED\n*  IN FIELD \"TOHEXFLD\".\n*\n*  REGISTER USAGE:\n*\n*             ON ENTRY                        ON RETURN\n*             -----------------------------   -----------------\n*        R0   VALUE TO CONVERT, RIGHT JUST.   DESTROYED\n*        R1   N/A                             DESTROYED\n*        R14  RETURN ADDRESS                  NO CHANGE\n*        R15  NUMBER OF NIBBLES TO CONVERT    DESTROYED\n*\n*\nTOHEX    DS    0H\n         SRDL  R0,4                ISOLATE NEXT 4 BITS INTO R1\n         SRL   R1,28               RIGHT JUSTIFY THESE 4 BITS\n         CH    R1,=H'9'            CHECK RANGE (0-9 VS. A-F)\n         BH    TOHEXSKP            HIGHER -- DON'T NEED TO ADJUST\n         LA    R1,C'0'-C'A'+10(,R1)   ADJUST FOR EBCDIC CHAR RANGES\nTOHEXSKP LA    R1,C'A'-10(,R1)     CONVERT TO PRINTABLE (0-9,A-F)\n         STC   R1,TOHEXFLD-1(R15)  PUT INTO TEMP FIELD\n         BCT   R15,TOHEX           LOOP FOR ALL HALF-BYTES\n         BR    R14                 RETURN\n*\nTOHEXFLD DC    CL8' '              WORK AREA FOR TOHEX ROUTINE\n.NOTOHEX ANOP  ,                   DEBUGGING LOGIC SKIPPED\n         TITLE 'JES2 JOB QUEUE WORK SELECT USER EXIT -- DATA AREAS'\n*\nSAVE2REG DC    2F'0'               SPACE TO SAVE 2 REGISTERS\n*\nNOBERTM $MSG   999,'NO STQNAME FOUND IN EXIT 49 FOR SELECTED JQE.'\n*\n*\n         AIF   ('&DEBUG' EQ 'NO').DEBG900  SKIP DEBUGGING CODE\n*\n*   DEBUGGING MESSAGES\n*\nMSG000  $MSG   000,'STSCX49A DEBUG: EXIT 49 STARTED, FLAGS=FFFFFF.'\nMSG000FL EQU   *-7,6               START OF FLAGS\n*\nMSGCAT  $MSG   000,'STSCX49A DEBUG: CLASS BEING SCANNED: CCCCCCCC'\nMSGCATCL EQU   *-8,8               START OF CLASS FIELD\n*\nMSGRBLDQ $MSG  000,'STSCX49A DEBUG: SCANNING THE REBUILD QUEUE.'\n*\nMSGJQE  $MSG   000,'STSCX49A DEBUG:   JQE FOUND FOR JOB: JJJJJJJJ'\nMSGJQEJN EQU   *-8,8               START OF JOBNAME FIELD\n*\nMSGCTL1 $MSG   000,'STSCX49A DEBUG: SELT-RES:XXXXXXXXXXXXXXXXXXXXXXXXXXX\n               XXXXXXXXXX.'\nMSGCTL1R EQU   *-37,36             START OF RESOURCES FIELD\n*\nMSGCTL2 $MSG   000,'STSCX49A DEBUG: THIS-RES:XXXXXXXXXXXXXXXXXXXXXXXXXXX\n               XXXXXXXXXX.'\nMSGCTL2R EQU   *-37,36             START OF RESOURCES FIELD\n*\nDELAYAFT $MSG  999,'DELAYED DUE TO /*AFTER CONTENTION: XXXXXXXX'\nDELAYAFJ EQU   *-8,8               START OF JOBNAME IN MESSAGE\n*\nDELAYWTT $MSG  999,'DELAYED DUE TO /*WITH CONDITION: XXXXXXXX'\nDELAYWTJ EQU   *-8,8               START OF JOBNAME IN MESSAGE\n*\nDELAYBEF $MSG  999,'DELAYED DUE TO /*BEFORE CONTENTION: XXXXXXXX'\nDELAYBEJ EQU   *-8,8               START OF JOBNAME IN MESSAGE\n*\nDELAYCTL $MSG  999,'DELAYED DUE TO /*CNTL CONTENTION: XXXXXXXX/RRRRRRRRX\n               '\nDELAYCTJ EQU   *-17,8              START OF JOBNAME IN MESSAGE\nDELAYCTR EQU   *-8,8               START OF RESOURCE IN MESSAGE\n*\n.DEBG900 ANOP  ,                   SKIPPED DEBUGGING CODE\n*\n         TITLE 'JES2 JOB QUEUE WORK SELECT USER EXIT -- EPILOG'\n        $MODEND ,\n         END   ,                   END OF MODULE\n./ ADD NAME=LSES512J 0405-00234-05314-1432-00023-00018-00018-T0SM0\n//T0SM512J JOB  (4030,37),'REDO--LSES512',CLASS=X,MSGCLASS=A,\n// REGION=6M,\n//    NOTIFY=T0SM0\n//*\n//*%PDSDOC 00 SMP APPLY LSES512\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI  <== UPDATE TO YOUR CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=THIS.DATA.SET.NAME(LSES512) <== UPDATE\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES512) BYPASS(APPLYCHECK).\n  RESETRC .\n  RECEIVE S(LSES512) SOURCEID(MELLON).\n  SET BDY(TARGET).                     <== UPDATE TO YOUR TGT\n  APPLY S(LSES512) REDO.\n./ ADD NAME=LSES513  0202-00234-03317-2303-00166-00172-00017-T0SM1\n++USERMOD(LSES513)\n /* ***************************************************************\n    ** * CODE FOR USEREXIT 100                                 * **\n    ***************************************************************\n* *%PDSDOC 00 JES2 USER EXIT 100.  FCB SET UP USER EXIT.\n    */ .\n++VER(Z038) FMID(HJE7707) .\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=&&OBJSET(STSCX100),UNIT=SYSDA,\n//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK\n//SYSLIN   DD   *\n INCLUDE SYSPUNCH(STSCX100)\n NAME STSCX100(R)\n/*\n++SRC(STSCX100) SYSLIB(SHASSRC) DISTLIB(AHASSRC).\n         TITLE 'JES2 USER EXIT 100'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    JES2 USER EXIT 100.  FCB SET UP USER EXIT.                       *\n*                                                                     *\n*                                                                     *\n*    PURPOSE -                                                        *\n*                                                                     *\n*       1)   TO PROVIDE FOR FCB NAME TRANFORMATION FOR ALL NON 3800   *\n*            DEVICES.                                                 *\n*            THE TRANSFORMATION USED TO BE REQUIRED TO HANDLE PRINT   *\n*            GOING TO REAL PRINTER AND FICHE - WE GOT RID OF THE      *\n*            FICHE BUT STILL HAVE TO TRANSLATE THE FCB NAMES UNTIL    *\n*            THE JCL IS CLEANED UP.  UNTIL THENTHE FCB NAMES UNTIL    *\n*                                                                     *\n*            RULE FOR THE LOW ORDER DIGIT OF THE FCB IS...            *\n*            IF 'A' OR LESS, LEAVE IT ALONE.                          *\n*            IF B-R, FORCE TO 'A'.                                    *\n*            IF S-Z, FORCE TO STANDARD.                               *\n*            IF GT 'Z', LEAVE IT ALONE.                               *\n*            THIS CODE DUPLICATED FOR THE REMOTES                     *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         COPY  $HASPGBL\nSTSCX100 $MODULE ENVIRON=JES2,     REQ'D BY JES2 4.3.0      RMF-940428 *\n               RMODE=ANY,                                              *\n               RPL,                REQ'D BY $BUFFER                    *\n               UCB,                REQ'D BY EXIT 100                   *\n               $BUFFER,            REQ'D BY EXIT CODE                  *\n               $CAT,               REQ'D BY $HCT                       *\n               $DCT,               REQ'D BY $HCT                       *\n               $PPPWORK,           REQ'D BY EXIT 100                   *\n               $HASPEQU,           REQ'D BY REG CONVENTIONS            *\n               $HCT,               REQ'D BY $SAVE/$RETURN              *\n               $JCT,                                                   *\n               $JCTX,                                                  *\n               $JOE,                                                   *\n               $JQE,               REQ'D BY $HCT                       *\n               $MIT,               REQ'D BY $HCT                       *\n               $PCE,               REQ'D BY $HCT AND AMIKOM            *\n               $PDDB,                                                  *\n               $CIRWORK,           REQ'D BY EXIT 100                   *\n               DYN,                REQ'D BY $CIRWORK                   *\n               SJEXP,              REQ'D BY $CIRWORK                   *\n               $PADDR,             REQ'D BY $CIRWORK                   *\n               $HFAME,             REQ'D BY $CIRWORK                   *\n               WPL                 REQ'D BY $CIRWORK\n         EJECT\n         PRINT ON,GEN,DATA\nEXIT100A $ENTRY BASE=R12\n         SPACE 1\n         $SAVE\n         LR    R12,R15             ADDRESS MY CODE\n         L     R7,CVTPTR           GET CVT POINTER,  =A(CVTMAP)\n         LA    R0,CVTMAP-CVTFIX\n         SLR   R7,R0               BACK UP FROM CVTMAP TO CVTFIX\n         USING CVTFIX,R7           ADDRESS CVT PREFIX AREA\n*   SMF SYSTEM I.D.\n         L     R7,CVTSMCA          SMF'S SMCA\n         DROP  R7                  CVTMAP\n         USING SMCABASE,R7\n         CLC   SMCASID(3),=C'QAS'\n         BE    DOWORK\n         CLC   SMCASID(3),=C'A81'\n         BE    DOWORK\n         CLC   SMCASID(3),=C'B33'\n         BE    DOWORK\n         CLC   SMCASID(3),=C'ATL'\n         BE    DOWORK\n         CLC   SMCASID(3),=C'RIC'\n         BE    DOWORK\n         B     NORMAL              JUST GO HOME - NO CHANGES NEEDED\n         DROP  R7\n         SPACE 1\n*   REGISTER USAGE\n*        USING JES2X100,R12\n*        USING PCE,R13\n*        USING HCT,R11\n         USING DCT,R4\n         SPACE 1\nDOWORK   EQU   *                   ENTERED BY ADDENDUM EXIT 100\nX100B200 EQU   *                   THIS IS A REMOTE PRINTER\n*                                  THIS IS A LOCAL PRINTER\n*        CLI   PPPDEVTP+3,UCB3800  3800 DEVICE?  TEST NOT NEEDED\n*        BE    X100B900            YES         THEY NEVER GET HERE\n*                                                             *\n*    TRANSFORM LOW ORDER DIGIT OF FCB:                        *\n*    IF STANDARD FCB, DO NOT ALTER.                           *\n*    IF 'A' OR LESS, LEAVE IT ALONE.                          *\n*    IF B-R, FORCE TO 'A'                                     *\n*    IF S-Z, USE STANDARD FCB.                                *\n*    IF GT 'Z', LEAVE IT ALONE                                *\n*                                                             *\n*  WE WILL PASS THE MODIFIED FCB NAME BACK TO JES2 IN R1      *\n*                                                             *\n         C     R1,=C'****'         STANDARD FCB REQ  Q.\n         BE    RMT0200             YES\n*   PREVIOUS TWO INST MAY ALSO LEAD TO $HASP180 MSG.\n         C     R1,=C'6411'         STANDARD FCB REQ  Q.\n         BE    RMT0200             YES\n         CLM   R1,1,=C'A'          IS DIGIT LE 'A'\n         BNH   RMT0200             YES\n         CLM   R1,1,=C'S'          IS DIGIT GE 'B' AND LT 'S'\n         BL    RMT0150             YES\n         CLM   R1,1,=C'Z'          IS DIGIT GE 'S' AND LE 'Z'\n         BH    RMT0200             NO\n         L     R1,=C'6411'         YES\n         B     RMT0200             AND DO NOT ALTER.\nRMT0150  ICM   R1,1,=C'A'          FORCE FCB TO XXXA\nRMT0200  EQU   *\n         B     X100B800            EXIT\n         SPACE 2\nX100B800 EQU   *                   NEED TO CHANGE 'SETUP' ADDR\n*                                  BACK IN HASPPRPU\n         SPACE 1\nX100B900 EQU   *                   END\nNORMAL   SLR   R15,R15             SHOW NORMAL PROCESSING\n         SPACE 1\n$RETURN  $RETURN RC=(R15)          GO BACK TO JES2\n*\n         LTORG\n*\n         $MODEND\n*\n         PRINT ON,GEN,NODATA\n         CVT   PREFIX=YES,DSECT=YES,LIST=NO\n         IHAECVT DSECT=YES         EXTENDED CVT AREA\n         IEESMCA ,                 SMCA (SMF CONTROL BLOCK)\n*\n         END\n./ ADD NAME=LSES513J 0303-00234-05314-1424-00023-00018-00020-T0SM0\n//T0SM513J JOB  (4030,37),'REDO--LSES513',CLASS=X,MSGCLASS=A,\n// REGION=6M,\n//    NOTIFY=T0SM0\n//*\n//*%PDSDOC 00 SMP APPLY LSES513\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI   <== UPDATE FOR YOUR CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=THIS.DATA.SET.NAME(LSES513) <== UPDATE DSN\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES513) BYPASS(APPLYCHECK).\n  RESETRC.\n  RECEIVE S(LSES513) SOURCEID(MELLON).\n  SET BDY(TARGET).                              <== UPDATE TO YOUR TGT\n  APPLY S(LSES513) REDO .\n./ ADD NAME=LSES514  0403-00234-03317-2333-00038-00028-00000-T0SM0\n++USERMOD(LSES514)\n /* ***************************************************************\n    ** * THIS MOD ADD USER EXIT 100 TO HASPPRPU                * **\n    ** *                                                       * **\n    ** * WARNING - NO NOT RENUMBER !                           * **\n    ** *                                                       * **\n    ** *       W   W  AAA  RRRR  N   N  III  N   N  GGGG       * **\n    ** *       W   W A   A R   R NN  N   I   NN  N G           * **\n    ** *       W W W AAAAA RRRR  N N N   I   N N N G  GG       * **\n    ** *       WW WW A   A R  R  N  NN   I   N  NN G   G       * **\n    ** *       W   W A   A R   R N   N  III  N   N  GGGG       * **\n    ** *                                                       * **\n    ** * WARNING - NO NOT RENUMBER !                           * **\n    ** *                                                       * **\n    ** *-------------------------------------------------------* **\n    ** * WARNING - CHECK UPDATED IBM SOURCE, PRIOR TO APPLY    * **\n    ** *           TO BE SURE STSC MOD STILL FITS              * **\n    ** *-------------------------------------------------------* **\n    ** *HO-03/19 UPDATED PRE(UW... TO MATCH RSU0012 NEW PTFS   * **\n    ** *         UPDATED REWORK(.. TO CURRENT DATE OF APPLY    * **\n    ** *         PRES NEED TO BE ACCEPTED, PRIOR TO RESTORE    * **\n    ** *                                                       * **\n    ** *                                                       * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7707)\n   PRE(UW89092\n               )         .\n++SRCUPD(HASPPRPU) .\n>< CHANGE NAME=HASPPRPU\nDSVNINDX EQU   *                   FCB CHANGE...                  SGM\n         $EXIT 100,JOBMASK=JCTXMASK,TYPE=TEST    IS EXIT ACTIVE ? SGM\n         JZ    NOEX100             IF NOT THEN DON'T EVEN TRY     SGM\n         ICM   R1,15,SETUPFCB      GET CURRENT SETUP FCB IN R1    SGM\n         $EXIT 100,MAXRC=0,TYPE=ENTER                             SGM\n         STCM  R1,15,SETUPFCB      REPLACE WITH MODIFIED FCB      SGM\nNOEX100  EQU   *                                                  SGM\n         CLC   DCTFCB,SETUPFCB     FCB CHANGE...                 @220CM\n./ ADD NAME=LSES514J 0304-00234-05314-1432-00024-00018-00019-T0SM0\n//T0SM514J JOB  (4030,37),'RE-CK LSES514',CLASS=X,MSGCLASS=A,\n// REGION=6M,\n//    NOTIFY=&SYSUID\n//*\n//*%PDSDOC 00 SMP APPLY LSES514\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI   <== UPDATE TO YOUR CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=THIS.DATA.SET.NAME(LSES514)  <== UPDATE\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  REJECT S(LSES514) BYPASS(APPLYCHECK).\n  RESETRC .\n  RECEIVE S(LSES514) SOURCEID(MELLON) .\n  SET BDY(TARGET).                             <== UPDATE TO YOUR TGT\n  APPLY   REDO\n        S(LSES514).\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSLOAD": {"ttr": 8709, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x051_\\x01\\x051_\\x10\\x05\\x00e\\x00e\\x00\\x00\\xd3\\xd6\\xc1\\xc4\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-11-11T00:00:00", "modifydate": "2005-11-11T10:05:00", "lines": 101, "newlines": 101, "modlines": 0, "user": "LOADLIB"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT702/FILE702.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT702", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}