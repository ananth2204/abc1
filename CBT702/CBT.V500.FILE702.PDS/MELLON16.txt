./ ADD NAME=$$$DOC   0107-04313-05314-1452-00082-00030-00000-T0SM0

  ALL OF OUR USERMODS ARE IN MVS.OSMAINT.USERMODS ON THE TECPLEX.

  Each usermod(LSES5**) member has a corresponding member suffixed with
  a "J".  The members with the "J" suffixes are sample jcl install
  members.

  FOR JES2 WE HAVE THE FOLLOWING usermods - These are ALL of our JES2
   mods - most folks who are interested in only using the mellon mods
  should refer to the next section, entitled -

    " THE FOLLOWING CAN BE CONSIDERED MELLON MOD REPLACEMENTS "

all of our JES2 usermods:

MOD NAME   IMPLEMENTED     LMOD NAME   DESCRIPTION
LSES500   ZOS6-09/01/2005  STJTABS  - CREATES OUR EXTENSIONS TO JQE AND JCT
LSES502   ZOS6-09/01/2005  STSCX01A - JES2 EXIT1 - BANNER PAGE EXIT (NON 3800)
LSES503   zOS6-09/01/2005  STSCX04A - parses /*ROUTE cards
LSES504   ZOS6-09/01/2005  STSCX04B - PARSES /*BEFORE/*AFTER/*WITH AND /*CNTL
LSES505   ZOS6-09/01/2005  STSCX05A - PROCESS $REPEXIT AND $ADDEXIT COMMANDS
LSES506   zOS6-09/01/2005  STSCX05B - prevents purging jobs by range
LSES507   ZOS6-09/01/2005  STSCX06A - MOVES VALID XEQ VALUES TO SCHENV VALUES
LSES509   ZOS6-09/01/2005  STSCX15A - FORCES FCB LOAD UNLESS CHGING STD FORMS
LSES510   ZOS6-09/01/2005  STSCX20A - END OF INPUT - MOVE JCT INFO TO JQE
LSES511   zOS6-09/01/2005  STSCX36A - SAF process of RJE submitted jobs
LSES512   ZOS6-09/01/2005  STSCX49A - IMPLEMENT BEFORE|AFTER|WITH|CNTL USAGE
LSES513   ZOS6-09/01/2005  STSCX100 - FCB SETUP / TRANSLATION USER EXIT100
LSES514   ZOS6-09/01/2005  HASPPRPU - INSERT USER EXIT100 INTO HASPPRPU CODE
-------- ---------------   ---------------------------------------------

 ***********

OF THESE MODS, THE FOLLOWING CAN BE CONSIDERED MELLON MOD REPLACEMENTS

 ***********

MOD NAME   IMPLEMENTED     LMOD NAME   DESCRIPTION
LSES500   ZOS6-09/01/2005  STJTABS  - CREATES OUR EXTENSIONS TO JQE AND JCT
LSES503   zOS6-09/01/2005  STSCX04A - parses /*ROUTE cards
LSES504   ZOS6-09/01/2005  STSCX04B - PARSES /*BEFORE/*AFTER/*WITH AND /*CNTL
LSES507   ZOS6-09/01/2005  STSCX06A - MOVES VALID XEQ VALUES TO SCHENV VALUES
LSES510   ZOS6-09/01/2005  STSCX20A - END OF INPUT - MOVE JCT INFO TO JQE
LSES512   ZOS6-09/01/2005  STSCX49A - IMPLEMENT BEFORE|AFTER|WITH|CNTL USAGE

 ***********
 ***********

   The installation instructions for the Mellon MODs only, can be found
   in member DOCINS.

   The overview documentation for the mellon mods is in member DOCOVW.

   The user documentation for the mellon mods is in member DOCUSR.

 ***********
 ***********

* * * PLEASE NOTE ! * * *

*
*    SPECIAL THANKS GO TO BOB BREAK OF ST. LOUIS FOR THE ORIGINAL CODE
*  TO PARSE THE "/*ROUTE XEQ RESNAME" CARDS AND SET THE APPROPRIATE
*  EXECUTION ENVIRONMENT.
*
*    SPECIAL THANKS TO JUDY RUNT OF WISCONSIN ELECTRIC FOR THE ORIGINAL
*  CODE TO HANDLE THE "/*CNTL BEFORE|AFTER|WITH,RESNAME" AND "/*CNTL
*  RESNAME,EXC|SHR" ROUTINES.  THE USE OF THE BLOCK EXTENSION REUSABLE
*  TABLES, and BERT'S, TO EXTEND THE JCT AND JQE.
*
*  although some changes have been made to all of the code, their
*  combined help was invaluable.
*
*

  It is customary to transfer a PDS such as this in tso xmit format -
  to create the xmit format dataset, use the following command -
   "xmit n32.t0sm0,outdsname('t0sm0.xmit.jes2mods'),dataset('t0sm0.tso.
    jes2mods")
  where t0sm0.xmit.jes2mods is an fb 80X3120 dataset, and
  where t0sm0.tso.jes2mods is the pds to be sent.
  Be sure to transfer the file, type=binary when sent via e-mail.
./ ADD NAME=$$NOTE1  0101-04314-04314-0944-00024-00023-00000-SBGOLOB
This note is from Frank Lawrence of Sun Trust, who is the current
keeper of the Mellon JES2 Mods, or a number of them, such as they
are nowadays.

Sam,

Our complete JES2 mods are attached in a TSO XMIT file.  That is
probably more than other folks want, but it will serve to remove
any ambiguities if they wonder why something is the way it is.  I
should also note that these are pre-z/OS 1.4 newest "activate"
for things like extended job number range.  We have some OEM
products that can't handle the extended job numbers in their
current release, so we have had to delay implementing those
features in z/OS 1.4.  We have tested them with these mods, but
that isn't the same as having them in production.

Let me know if you have any questions.

- Thanks,
       Frank

 email:  Frank.Lawrence@SunTrust.com


./ ADD NAME=$$NOTE2  0103-05314-05314-1437-00029-00024-00000-T0SM0

Sam,
  Here are the latest files for the Mellon Mods.  They are currently
running in our shop under z/OS 1.6, with no reported problems.


  In addition to the files we have been sending, I am including four new
members for documentation.  I realize the documentation of the past has
left a lot to be desired, and hope this will be of help to those who are
installing or evaluating these mods for the first time.

  The new members are:

     DOCOVW - a plain text overview of the function and purpose.
     DOCUSR - a plain text set of user documentation.
     DOCINS - a plain text set of installation documentation.
     $$NOTE2 - this member.

  I have also renamed the old DOC member to DOCOLD, most of the old
documentation is just no longer pertinent.

Let me know if you have any questions.

- Thanks,
       Steve M.

 email:  Stephen.McColley@SunTrust.com
         SGMcColley@AllTel.net

./ ADD NAME=DOCINS   0103-05314-05314-1605-00200-00146-00000-T0SM0

                 Installation Procedures


This member is used with the xmit format PDS member that you downloaded
from the CBT tape.  The members within the pds have a basic set of
documentation.  The heart of the PDS is however the usermods themselves
and the sample SMP/e jobs used to install those usermods.  The usermods
are in members with a format of LSES5##, each has a corresponding member
with a suffix of "J" for example, LSES5##J, which is the sample SMP/e
job to install the associated usermods.

The data on the CBT tape contains all of our usermods - but - to only
install the mellon mods, you just need a few of the usermods.  I have
included a checklist of activities for the installation.



  ****  FastPath Checklist for Mellon Mods Install ****

  1-modify statements as required in member lses500, and the JCL
    in member lses500j and submit - to install jct/jqe extensions.

  2-modify statements as required in member lses503, and the JCL
    in member lses503j and submit - to install first jes2 exit04.

  3-modify statements as required in member lses504, and the JCL
    in member lses504j and submit - to install second jes2 exit04.

  4-modify statements as required in member lses507, and the JCL
    in member lses507j and submit - to install jes2 exit06.

  5-modify statements as required in member lses510, and the JCL
    in member lses510j and submit - to install jes2 exit20.

  6-modify statemenst as required in member lses512, and the JCL
    in member lses512j and submit - to install jes2 exit49.

  7-make loadmods available to the jes2 task - lla refresh, or steplib
    changes- whatever is required in your environment

  8-add LOADMOD and EXIT statements to the HASPPARM dataset.

  9-restart JES2.

 10-test - run some jobs containing Mellon control cards.
    see the DOCUSR member for more information on how to use the mods.
    I will try to get a standard IVP job set up for the next release.

 11-Share the documentation with the users - DOCOVW is an overview, and
    DOCUSR is a set of user documentation.

 12-Celebrate - wasn't that easy!?

 13-Send an e-mail to SGMcColley@ALLTEL.NET, let me know your e-mail
    address and that you are using the mods, I can then contact you when
    new versions are available and if any bugs are found, and or fixed.
    If you wish, I can also send you a PC friendly version of the
    documentation - suitable for sharing with others.

  *** end of fastpath install instructions ***



  Now for the details... I know you won't just run jobs blindly...



The Mellon Shared Spool Mods are provided in USERMOD format.  They will
add macro source members to SYSLIB(SHASMAC), and source members to
SYSLIB(SHASSRC), and will add JCLIN for the source members that causes
source members to be linked (IEWBLINK) into SHASLINK, as referenced by
the //SYSLMOD DD statement in each set of JCLIN.  You may need to alter
the syslmod statement to fit your installations needs before receiving
the usermods.  The JCLIN also references standard SYSLIB DD datasets;

    SYS1.MACLIB
    SYS1.MODGEN
    SYS1.SHASMAC
    SYS1.SHASSRC
    SYS1.AHASMAC
    SYS1.AHASSRC
    SYS1.AMACLIB
    SYS1.AMODGEN

  The names should be fine for most shops, if you have altered
the names to conform to local standards; the JCLIN may need
to have similar changes made, before receiving the usermods.

You should use normal RECEIVE, and APPLY jobsteps to install the mods.
Sample JOBS have been included in the PDS package in members that end
with a"J".   As delivered the jobs will REJECT a previous attempt to
apply, then RECEIVE a usermod, and finally APPLY the usermod.  I use
this sequence for reinstalls.  As delivered, you will get a bad return
code from the first run because the initial REJECT step will fail,
unless of course you have already applied the usermods.  The bad return
code from the REJECT can be ignored, or if you like simply resubmit the
entire job and all steps should run to a good completion code.  The jobs
may need to be modified to meet your shops specific needs.

  The member names are in the format - "LSES5##", these members are the
usermods and should be applied in the same sorted order that they appear
in the PDS directory.  Earlier usermods are required to successfully
apply later usermods.  They may all be applied at the same time, but I
prefer to install them one at a time, so that in the event there are any
problems, I can correct them one member at a time before continuing.  As
mentioned above the member names that are suffixed with a "J" are the
actual jobs, i.e. LSES500 is a single usermods, usermods LSES500, and
LSES500J is the member that contains sample JCL to install usermods
LSES500.

After SMP installation, update JES2 parms by adding the following
loadmod and exit statements.

 LOADMOD(STJTABS)     /* DYNAMIC TABLE DEFINITIONS FOR JQE EXTENSION */
LOADMOD(STSCX04A)    /* PARSES /*ROUTE XEQ RESNAME AND VALIDATES */
LOADMOD(STSCX04B)    /* PARSES /*BEFORE, AFTER,WITH, AND CNTL */
LOADMOD(STSCX06A)    /* TURNS /*ROUTE CNTL,XX INTO SCHENV= VALUES */
LOADMOD(STSCX20A)    /* COPIES JCT INFO INTO THE JQE EXTENSION    */
LOADMOD(STSCX49A)    /* IMPLEMENTS BEFORE, AFTER, WITH, CNTL STMTS */
EXIT(004) ROUTINE=(EXIT04A,EXIT04B),STATUS=ENABLED
EXIT(006) ROUTINE=(EXIT06A),STATUS=ENABLED
EXIT(020) ROUTINE=(EXIT20A),STATUS=ENABLED
EXIT(049) ROUTINE=(EXIT49A),STATUS=ENABLED


Make the updated JES2 load modules available, that may require a refresh
of LLA, or copying a maintenance pack to production.  Your own local
procedures will dictate what will need to be done.  The final step is to
shutdown and restart JES2, this can be accomplished via 'rolling warm
starts".  It is not necessary to shutdown all JES2 tasks in the MAS at
the same time, this is an important change from the original Mellon Mods
* * We no longer make any changes to the JES2 checkpoint records all
information that is saved for the Mellon Mods, and the info that is used
to alter the job selection sequences is maintained in formally supported
dynamic extensions to the jobs JCT and JQE.


 -  How the exits work, what each does -

The first LOADMOD statement is for module STJTABS, which is created with
usermods LSES500, it creates extensions to the JQE and JCT, which are
needed to contain the Mellon control statement information, are
referenced at job selection time.  There is no specific exit associated
with this module.

The second LOADMOD statement is for module STSCX04A, used in exit04.  It
parses the /*ROUTE XEQ RESNAME and performs basic validation.

The next LOADMOD statement is for module STSCX04B, also used in exit04.
It parses the /*BEFORE, AFTER, WITH and CNTL statements.

The next LOADMOD statement is for STSCX06A, used in exit06.  It turns
/*ROUTE CNTL, XX into SCHENV= values.

The next LOADMOD statement is for STSCX20A, is used in exit20, and
copies JCT info into the JQE extension before the JCT is lost.

The next LOADMOD statement is for STSCX49A, and implements the before
after, with, and cntl statements by rejecting or allowing JES2's
suggested 'next' job, in the job selection exit49.

  Of course, the entire source is provided for a closer look if you
desire to do so.


  -  Support for these mods  -

  As stated above, I will provide support on a time available basis, on
my own time.  Simply forward appropriate documentation of any problems
you encounter to me at SGMCCOLLEY@ALLTEL.NET and I will review them as
quickly as I can.  I usually review my e-mail at least once every 2
days.  I can however make no guarantee of support, or promise to fix
anything.  I will do what I can, and I want to make sure they work for
you.

  - let me know how your using the mods, and share an e-mail address -

If you would drop me a line at the e-mail address above after installing
these MODS and let me know you are using them, I will be able to let you
know when new versions are available, and if any bugs are found I can
alert you as soon as I know, and as soon as a fix is available.

  - Other suggested modifications  -

  If you have any suggestions for future enhancements, please let me
know by dropping me a line at SGMCCOLLEY@ALLTEL.NET and I will review
any and all suggestions, and implement those that I can in future
versions of the mods.  Again, this is not a guarantee of future changes,
just a guarantee that I will review and implement those that I can.






  I sincerly hope that these mods can help your shop, we use them here
at our shop, and have had very good sucess with them.

 - end of text -
./ ADD NAME=DOCOLD   0100-05314-05314-1439-01933-01933-00000-T0SM0

 This is the old - original documentation for mellon mods.
 BEWARE - most of it is now invalid.  It is included here
 for the sake of historical acuracy only.


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                          $
$                                                          $
$           MODS TAPE VERSION SP420/1    07 apr 93         $
$                                                          $
$                                                          $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                          $
$            ****  ****  *    *  ****   ****               $
$           *    * *   * *    * *    * *    *              $
$           *      *   * *    *      * *    *              $
$            ****  ****  ******  ****  *    *              $
$                * *          * *      *    *              $
$           *    * *          * *      *    *              $
$            ****  *          * ******  ****               $
$                                                          $
$                  * *****  ****   ****                    $
$                  * *     *    * *    *                   $
$                  * *     *           *                   $
$                  * ***    ****   ****                    $
$                  * *          * *                        $
$              *   * *     *    * *                        $
$               ***  *****  ****  *****                    $
$                                                          $
$          ****  *    * *****   ****  *****  *             $
$         *    * *    * *    * *    * *    * *             $
$         *      *    * *    * *      *    * *             $
$          ****  ****** *****   ****  *****  *             $
$              * *    * *  *        * *      *             $
$         *    * *    * *  *   *    * *      *             $
$          ****  *    * *   *   ****  *      ******        $
$                                                          $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                          $
$                                                          $
$ FUNCTIONAL CHANGES FOR RELEASE    SP4.2.0                $
$                                                          $
$ 1.) Add a new dependent job control card, /*WITH jobname.$
$                                                          $
$ 2.) Permit $,@,# in jobname field of /*BEFORE, /*AFTER,  $
$     and /*WITH                                           $
$                                                          $
$ 3.) Delete $DRES command support.  Use IBM supplied      $
$     commands, i.e. $D CONDEF,BUFNUM,BUFFREE, etc.        $
$                                                          $
$ 4.) Delete /*ROUTE XEQ CPUn support.  Use /*JOBPARM      $
$     SYSAFF=(sid) card.                                   $
$                                                          $
$ 5.) Delete $KD/$KT command support.  Use IBM supplied    $
$     commands $D/$T MASDEF.                               $
$                                                          $
$ 6.) Re-format various command responses to include       $
$     MLWTO control lines to match JES2 command responses. $
$                                                          $
$ 7.) New command responses to $QA/$QD commands.           $
$                                                          $
$ 8.) Change $QD command to deny removal of a resource if  $
$     there are executing job in the given system.  Add    $
$     a third poistional $QD command operand, "FORCE", to  $
$     permit the resource to be removed even if there are  $
$     active jobs using the resource.                      $
$                                                          $
$ 9.) Enhance $DC command response to show count of        $
$     conflicts.                                           $
$                                                          $
$ 10.) Enhance $DB command.                                $
$                                                          $
$ 11.) Change $QJ, $QT, $QS, and add $Q'jobname' to        $
$      permit abstract resources to be added/delete from   $
$      a JOB/TSU/STC or release a JOB from a dependent     $
$      job control hold condition.  JECL cards and PR/PU   $
$      stats are no longer detailed by this command.  Use  $
$      IOF, SDSF, Q command for displaced function.        $
$                                                          $
$ 12.) Eliminate /*AFTER, /*BEFORE, /*CNTL order           $
$      dependency.  This cards can now appear in any order $
$      in the input stream.                                $
$                                                          $
$ 13.) Various $HASP9** series messages have been          $
$      eliminated or changed.                              $
$                                                          $
$ 14.) SAF entity names have changed for the $Q commands.  $
$                                                          $
$ 15.) Add front end intercept to $QACT service routine    $
$      in support of /*WITH JECL card.                     $
$                                                          $
$ 16.) Previously supplied Mellon Bank support for the     $
$      $DN/$DQ commands has been renamed to $LN/$LQ        $
$      and has been substantially enhanced.                $
$                                                          $
$ 17.) $HASP608 message text has been enhanced.            $
$                                                          $
$ 18.) Several Mellon Bank commands using the CONDEF       $
$      DISPLEN when building command responses.            $
$                                                          $
$ 19.) Add resource-equate definition macro - $RESEQU      $
$                                                          $
$ 20.) Enhance $LF command job selection by absence or     $
$      presence of job, operator, and error holds. Also    $
$      screen for held or non-held output dispostions.     $
$                                                          $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                          $
$                                                          $
$ FUNCTIONAL CHANGES FOR RELEASE    SP3.1.3                $
$                                                          $
$ 1.) Interface to $SEAS routine to validate user commands $
$     in EXIT 005 through SAF.                             $
$                                                          $
$ 2.) Correct addressability errors when using all 64      $
$     resource names in the abstract resource table.       $
$                                                          $
$ 3.) Correct DJC hold problem by front ends place on      $
$     $QMOD and $QPUT established by EXIT024.              $
$                                                          $
$                                                          $
$ FUNCTIONAL CHANGES FOR RELEASE(S) SP2.2.0/SP3.1.1        $
$                                                          $
$ 1.) Performance enhancement for dependent job control    $
$     job select logic through the use of user hold        $
$     hold bits in the JQE.                                $
$                                                          $
$ 2.) $DN/DQ,HOLD commands enhanced to process jobs that   $
$     are held due to dependent job control conflicts.     $
$                                                          $
$ 3.) Enhancements made in the HASP608 job display message $
$     to show before/after/cntl specifications as well as  $
$     dependent job control hold/ownership information.    $
$                                                          $
$ 4.) New exit routine, MBJOBEND, added to release jobs    $
$     on dependent job control hold when an owning job     $
$     ends.                                                $
$                                                          $
$                                                          $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
************************************************************
************************************************************
**************                                **************
************                                    ************
**********                                        **********
*                                                          *
*                                                          *
*             GENERAL DESCRIPTION OF MELLON BANK           *
*                  SHARED SPOOL MODS                       *
*                                                          *
**********                                        **********
************                                    ************
**************                                **************
************************************************************
************************************************************


************************************************************
*                                                          *
*                 D I S C L A I M E R                      *
*                                                          *
************************************************************

    THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE
 BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY
 IS MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS
 ASSUMED FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE
 USE OF THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO
 EVALUATE THE USEFULLNESS OF THE MATERIAL.

    WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE
 NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE
 IN THE FUTURE.

************************************************************
************************************************************

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    THE FOLLOWING IS A BRIEF EXPLANATION OF THE MELLON BANK MODS
MADE TO JES2.  IT IS INTENDED FOR THOSE WHO ARE UNFAMILIAR WITH
PREVIOUS VERSIONS OF HASP OR JES2 SHARED SPOOL SUPPORT AND IS
BEING PROVIDED IN LIEU OF THE FORMAL DOCUMENT ORIGINALLY
DISTRIBUTED WITH THE HASP V4 MELLON MODIFICATIONS.  IF THE WRITE-UP
LEAVES YOU WITH SOME UNANSWERED QUESTIONS, YOU MAY GIVE US A CALL.


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

RESOURCE ROUTING CONTROL CARDS

     PROVIDES A FACILITY BY WHICH JOBS CAN BE ROUTED TO SPECIFIC
CPUS DEPENDING ON THE AVAILABILITY OF A PARTICULAR RESOURCE NAME
ASSIGNED TO A CPU.  RESOURCE NAMES ARE USER DEFINED (SYSTEMS PROGRAMMER)
AND SPECIFIED IN THE JES2 MACRO  $RESTABL.  ONCE DEFINED, THESE
RESOURCE NAMES ATTACHED TO A CPU REMAIN IN EFFECT UNTIL THEY ARE
DETACHED VIA THE $QD COMMAND, OR A COLD START IS DONE AND ALL
RESOURCES ARE THEN UNASSIGNED.

     RESOURCES SPECIFIED IN THE $RESTABL MACRO CAN DEFINE PHYSICAL
I/O GEAR WHICH MAY BE ATTACHED TO ONLY ONE CPU AT A TIME, OR
POSSIBLY A SOFTWARE NAME WHICH MAY ONLY PERTAIN TO ONE PARTICULAR CPU.


SPECIFICATION ... IN $RESTABL MACRO


ASSIGNMENT....... $QA,resource       attached a resource name from
                                     the table to this system.


                  $QD,resource       remove a resource name from this
                                     system if no jobs executing using
                                     specified resource.

                  $QD,resource,FORCE remove resource name from this
                                     system even if jobs executing are
                                     using the resource name.

USE............... /*ROUTE XEQ resource     ...  FOLLOWING JOBCARD

                   JOB WILL AUTOMATICALLY BE SCHEDULED TO THE CPU(S)
                   BEARING THIS RESOURCE NAME IN ITS QSE


EXAMPLE:    SYSTEM #       RESOURCES ATTACHED
            ________       __________________

               1           DUALD,IMS

               2           3525

               3           IMS,TSO,NOINQ


   //BSPROUT JOB (,,7551,429),'TEST RESOURCE',MSGLEVEL=(1,1),CLASS=A
   /*ROUTE XEQ IMS
   //S1 EXEC PGM=IEFBR14


THIS JOB WILL BE SCHEDULED TO EITHER SYSTEM #1 OR SYSTEM #3


     THE $DC COMMAND IS USED TO DISPLAY THOSE JOBS WHICH HAVE USED
THE /*ROUTE XEQ RESOURCE CONTROL CARD AND NO CPUS HAVE THAT RESOURCE
NAME ATTACHED....  FOR EXAMPLE, USING THE ABOVE LIST, IF A JOB WERE
SUBMITTED WITH A   /*ROUTE XEQ SCANNER   CONTROL CARD, THE JOB WOULD
NEVER EXECUTE NO MATTER HOW MANY INITIATORS WERE AVAILABLE UNTIL
A SYSTEM IN THE COMPLEX WOULD ISSUE A $QA,SCANNER.  THIS WOULD
BE DETECTABLE BY ISSUING A $DC COMMAND WHICH WOULD DISPLAY THOSE
JOBS WAITING FOR RESOURCE NAMES.


     THE $DR COMMAND WILL LIST THE RESOURCE ATTACHED TO EACH CPU.

 EXAMPLE

     $DR          NO OPERANDS  DEFAULTS THIS CPU

     $DR,&SID     LIST SPECIFIC CPU RESOURCES.


     OTHER /*ROUTE CONTROL CARD FORMATS.........

      /*ROUTE XEQ HERE
          JOB WILL BE SCHEDULED FOR EXECUTION ON THE CPU WHICH
          READ THE JCL.  (CONTROLLING THE CARD READER)



---------------------------------------------------------------


           .............. /*CNTL CARDS ..............


     THIS FEATURE PROVIDES THE ABILITY TO SINGLE-THREAD JOBS
THROUGH EXECUTION WHICH NEED A DEVICE OF WHICH THERE IS ONLY ONE
AND MUST BE USED SERIALLY.  SOME EXAMPLES WOULD BE THE 3525,
DUALD DENSITY DRIVE AND THE OCR SCANNER.


     BY USING THE /*CNTL CARD, YOU CAN DEFINE A RESOURCE NAME THAT
YOU NEED EXCLUSIVE CONTROL OF.  IF ANY OTHER JOBS COME INTO THE SYSTEM
WITH THE SAME CONTROL NAME, THEY WILL NOT EXECUTE SIMULTANEOUSLY ON
THE SAME OR OTHER CPUS IN THE COMPLEX.  THIS PROVIDES BETTER CONTROL
OVER THE RESOURCES WE HAVE THAT MUST BE USED SERIALLY.  THIS DOES NOT
AFFECT JOBS RUNNING WITHOUT THE /*CNTL CARD OR RUNNING IN A SYSTEM
WITHOUT SHARED SPOOL.


   THE FORMAT FOR RESOURCE CONTROL IS :

         /*CNTL name,EXC     OR
         /*CNTL name,SHR    (DEFAULT SHR)


     USERS MAY ALSO PROTECT DATASETS FROM BEING BEING UPDATED BY
DIFFERENT JOBS ON THE SAME OR DIFFERENT CPUS BY USING THE /*CNTL CARD.
EACH /*CNTL CARD MAY HAVE A 1 TO 8 CHARACTER CONTROL NAME AND AN EXC
OR SHR SPECIFICATION.

     JOBS WITH THE SAME CNTL NAME WILL NOT EXECUTE SIMUTANEOUSLY
IF ONE OF THE JOBS HAS AN EXC CONTROL SPECIFICATION. JOBS WITH SHR
MAY EXECUTE SIMUTANEOUSLY ON ANY CPU.


EXAMPLES:

    //JOB1 JOB
    /*CNTL MASTER,EXC


    //JOB2 JOB
    /*CNTL MASTER,SHR


  IN THE ABOVE EXAMPLE, WHICHEVER JOB BEGAN EXECUTION FIRST, WOULD
LOCKOUT THE OTHER JOB FROM BEGINNING UNTIL IT HAS COMPLETED.



    //JOB1 JOB
    /*CNTL MASTER,SHR


    //JOB2 JOB
    /*CNTL MASTER


    //JOB3 JOB
    /*CNTL MASTER,SHR


  IN THE ABOVE EXAMPLE, ALL 3 JOBS COULD RUN SIMULTANEOUSLY AS THEY
ALL SPECIFY THE SHR OPTION.


________________________________________________________________


/*BEFORE, /*AFTER, /*WITH dependent job control cards


FORMAT :      /*BEFORE jobname
              /*AFTER  jobname
              /*WITH   jobname


     Provides a means to schedule jobs before, after, or with another
     JOB/TSU/STC in the execution queue.  These cards must follow the
     JOB card.

     IF THE BEFORE OR AFTER JOBNAME IS NOT IN THE JOBQ, THERE IS
     NO ACTION TAKEN ON PREVENTING THE JOB FROM BEGINNING.

     IF THE WITH jobname IS NOT IN THE JOBQ, THE JOB WILL
     WAIT FOR THE JOB/TSU/STC TO BEGIN EXECUTION.

EXAMPLE #1:


    /*PRIORITY     13
    //BSPTEST  JOB (,,7551,429),KALISH,MSGLEVEL=(1,1),CLASS=A
    /*AFTER BSPFIRST
    //S1 EXEC PGM=IEFBR14
    /*
    /*PRIORITY     2
    //BSPFIRST JOB (,,7551,429),KALISH,MSGLEVEL=(1,1),CLASS=A
    /*CNTL DUALD,EXC
    //SA EXEC PGM=IEFBR14
    /*


  IN THE ABOVE EXAMPLE, JOB BSPTEST WOULD NOT EXECUTE UNTIL JOB
BSPFIRST HAS FINISHED EXECUTION, EVEN THOUGH BSPTEST HAS A HIGHER
PRIORITY.




EXAMPLE #2:


    /*PRIORITY     10
    //cicst900 JOB (,,7551,429),KALISH,MSGLEVEL=(1,1),CLASS=A
    /*WITH CICSTEST
    //S1 EXEC PGM=IEFBR14
    /*


  In the above example, job CICST900 would not execute until JOB/TSU/STC
CICSTEST began executiion.  At that time, CICST900 would be eligible
for selection by an initiator in the same system as CICSTEST.



********************************************************************
********************************************************************

 EXAMPLES OF ALLOWABLE -MULTI- CONTROL AND ROUTE CARDS COMBINATIONS

    COMBINATION  1.                 ** ONE          AFTER  CARD  **
                                    ** ONE          BEFORE CARD  **
                                    ** NONE TO FOUR CNTL   CARDS **
                /*AFTER   JOBNAME
                /*BEFORE  JOBNAME
                /*CNTL    NAME,DISP
                /*CNTL    NAME,DISP
                /*CNTL    NAME,DISP
                /*CNTL    NAME,DISP

    COMBINATION  2.                 ** ONE           AFTER CARD  **
                                    ** NONE TO FIVE  CNTL  CARDS **
                /*AFTER   JOBNAME
                /*CNTL    NAME,DISP
                /*CNTL    NAME,DISP
                /*CNTL    NAME,DISP
                /*CNTL    NAME,DISP
                /*CNTL    NAME,DISP

    COMBINATION  3.                 ** ONE           BEFORE CARD **
                                    ** NONE TO FIVE  CNTL  CARDS **
                /*BEFORE  JOBNAME
                /*CNTL    NAME,DISP
                /*CNTL    NAME,DISP
                /*CNTL    NAME,DISP
                /*CNTL    NAME,DISP
                /*CNTL    NAME,DISP

    COMBINATION  4.                 ** ONE TO SIX  CNTL    CARD  **
                /*CNTL    NAME,DISP
                /*CNTL    NAME,DISP
                /*CNTL    NAME,DISP
                /*CNTL    NAME,DISP
                /*CNTL    NAME,DISP
                /*CNTL    NAME,DISP

    COMBINATION  5.                 ** ONE           AFTER  CARD  **
                                    ** ONE           BEFORE CARD  **
                                    ** ONE           WITH   CARD  **
                                    ** NONE TO THREE CNTL   CARDS **
                /*CNTL    name,disp
                /*CNTL    name,disp
                /*CNTL    name,disp
                /*AFTER   jobname
                /*BEFORE  jobname
                /*WITH    jobname

*****************************************************************
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$        H    H      J EEEEEE 4    4 4    4  2222   0000        $
$        H    H      J E      4    4 4    4 2    2 0    0       $
$        H    H      J E      4    4 4    4      2 0    0       $
$        HHHHHH      J EEEE   444444 444444  2222  0    0       $
$        H    H      J E           4      4 2      0    0       $
$        H    H J    J E           4      4 2      0    0       $
$        H    H  JJJJ  EEEEEE      4      4 222222  0000        $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*****************************************************************
*
*
*  MELLON BANK SHARED SPOOL FOR SP 4.2.0 JES2 FMID(HJE4420)
*
*  THESE CHANGES WILL REQUIRE A COLD-START SINCE THEY MODIFY JES2
*  CONTROL BLOCKS (IE. QSE, JQE)...
*
*  SINCE SP 1.3.3 JES2 THE VAST MAJORITY OF THE MELLON MOD CODE
*  HAS BEEN REMOVED FROM INSTREAM HASPSRC UPDATES AND HAS BEEN
*  PLACED INTO JES2 EXIT CODE THAT IS TAKEN BY THE JES2 MAIN
*  TASK.
*
*
*     ADDITIONALLY, DEPENDENT JOB CONTROL HOLD/OWNERSHIP IS DISPLAYED.
*
*  $  THE FOLLOWING MODULES, MACROS, AND CONTROL BLOCK ARE CHANGED.
*
*      $JQE, $QSE, $RDRWORK, $HCT, HASPCOMM
*
*
*  $    THE FOLLOWING STATEMENTS NEED TO BE ADDED TO THE JES2 PARAMETER
*       LIBRARY TO ESTABLISH THE NECESSARY JES2 EXIT ENVIRONMENT AT
*       INITIALIZATION TIME:
*
*       LOAD    MBSHRSPL                     USER LINKLIB LOAD MODULE
*       EXIT002 ROUTINE=(MBJOBCRD)           JOB CARD SCAN
*       EXIT004 ROUTINE=(MBJECL)             JCL/JECL CARD SCAN
*       EXIT005 ROUTINE=(MBCMDS)             COMMAND PROCESSOR
*       EXIT007 ROUTINE=(MBJOBEND)           RELEASE JOBS ON DJC HOLD
*       EXIT014 ROUTINE=(MBJQEGET)           $QGET
*       EXIT020 ROUTINE=(MBRDREND)           END OF INPUT
*       EXIT024 ROUTINE=(MBQINIT)            POST INITIALIZATION
*       EXIT245 ROUTINE=(MBJOBMSG)           COFJMSG SUPPORT
*
*
*
*  $    SEVERAL ADDITIONAL MELLON WRITTEN COMMANDS HAVE BEEN INCLUDED
*       FOR YOUR USE:
*
*       $DB WILL DISPLAY A SUMMARY OF THE WORKED BACKLOGGED ON THE
*       M.A.S. COMPLEX.
*
*       $DP WILL DISPLAY A ONE LINE SUMMARY OF PRINTER/PUNCH STATUS.
*
*       $LF IS SIMILAR TO THE $DF COMMAND; HOWEVER, IT HAS THE ABILITY
*       TO LIST JOB OUTPUT BY JOBNAME.
*
*
*
*
*  $    FILE 2 ON THIS TAPE CONTAINS IEBUPDTE CARDS THAT UPDATE AND ADD
*       CODE TO YOUR HASPSRC SOURCE LIBRARY (IT IS ADVISABLE TO CREATE
*       A BACKUP COPY OF YOUR HASPSRC PDS AND APPLY THE MODS TO THAT
*       COPY). ASSEMBLE AND LINK YOUR JES2 SOURCE.  MBSHRSPL SHOULD
*       BE ASSEBMBLED AND LINKED AS SEPARATE APF AUTHORIZED LOAD
*       MODULE AND MUST BE LOCATED IN AN APF AUTHORIZED LIBRARY
*       AVAILABLE TO JES2 AT INITIALIZATION TIME.
*
*       NOTE:  DO NOT LINK THIS EXIT AS REENTRANT OR YOU WILL
*              EXPERIENCE ABEND S0C4 PROBLEMS IN THE EXIT POINTS.
*
*
*  $    TAPE FORMAT IS:
*
*       THIS DOCUMENT
*                         RECFM=FB
*                         LRECL=80
*                         BLKSIZE=24000
*                         LABEL=(1,NL)
*                         VOL=SER=JESMOD
*                         DSN=B1SP.FILE1
*
*       IEBUPDTE INPUT TO ADD AND UPDATE MEMBERS IN HASPSRC PDS
*                         RECFM=FB
*                         LRECL=80
*                         BLKSIZE=24000
*                         LABEL=(2,NL)
*                         VOL=SER=JESMOD
*                         DSN=B1SP.FILE2
*
*  $    PLEASE DIRECT ANY INQUIRIES, PROBLEMS, SUGGESTIONS, ETC. TO:
*
*     ROSS CUMMINGS    MELLON BANK N.A.
*                      SYSTEMS CONTROL PROGRAMMING SECTION
*                      MELLON SQUARE, AIM 153-0420
*                      PITTSBURGH,  PA. 15230
*              PHONE  (412) 234-0519
*
*     JOHN ROSSMILLER  MELLON BANK N.A.
*              PHONE  (412) 236-1058
*
*     DON GREB         MELLON BANK N.A.
*              PHONE  (412) 234-5985
*
*
*       PLEASE HAVE CURRENT ASSEMBLED SOURCE LISTINGS AND DUMPS
*       ON HAND BEFORE CALLING WITH ANY PROBLEMS.
*
*****************************************************************
*****************************************************************
  GGGG   OOOO   OOOO  DDDD          L      U    U  CCCC  K    K
 G    G O    O O    O D   D         L      U    U C    C K   K
 G      O    O O    O D    D        L      U    U C      K  K
 G  GGG O    O O    O D    D        L      U    U C      KKK
 G    G O    O O    O D    D        L      U    U C      K  K
 G    G O    O O    O D    D        L      U    U C    C K  K
  GGGG   OOOO   OOOO  DDDDD         LLLLLL  UUUU   CCCC  K   K
*                                                               *
1

       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
       @@                                                           @@
       @@                                                           @@
       @@  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!  @@
       @@  |                                                     |  @@
       @@  |                                                     |  @@
       @@  |                                                     |  @@
       @@  |                                                     |  @@
       @@  |   M E L L O N   B A N K   E N H A N C E M E N T S   |  @@
       @@  |                                                     |  @@
       @@  |                     T O   T H E                     |  @@
       @@  |                                                     |  @@
       @@  |             J E S 2   S U B S Y S T E M             |  @@
       @@  |                                                     |  @@
       @@  |                        F O R                        |  @@
       @@  |                                                     |  @@
       @@  |     SP VERSION 4 RELEASE 2 MODIFICATION LEVEL 0     |  @@
       @@  |                                                     |  @@
       @@  |                                                     |  @@
       @@  |                                                     |  @@
       @@  |                                                     |  @@
       @@  %~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~¢  @@
       @@                                                           @@
       @@                                                           @@
       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
1




            @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            @                                           @
            @       SECTION 1 - OPERATOR COMMANDS       @
            @                                           @
            @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@








                  1.1  Mellon Bank Written Commands
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


1






    $DB (Display Backlog)


        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
        |  |                                                      |
        |  | #          !                                         |
        |  | |    a     |                                         |
        |  | |    cc    |                                         |
        |$D|B|,L= cca   |                                         |
        |  | |    name  |                                         |
        |  | |    name-a|                                         |
        |  | %          ¢                                         |
        |  |                                                      |
        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~¢


 B
     This command displays in matrix form a summary of activity in
     the MAS spool complex.


 L=a or cc or cca or name or name-a
    The area (a), console identifier (cc), area and console
    identifier (cca), symbolic console name (name), or symbolic
    console name and output area ID (name-a) of the active MCS console
    at which the requested information is to be displayed.
1






    $DC (Display Conflicts)


        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
        |  |                                                      |
        |  | #          !                                         |
        |  | |    a     |                                         |
        |  | |    cc    |                                         |
        |$D|C|,L= cca   |                                         |
        |  | |    name  |                                         |
        |  | |    name-a|                                         |
        |  | %          ¢                                         |
        |  |                                                      |
        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~¢


 C
     This command displays by name jobs awaiting execution whose
     abstract resource routings cannot be fulfilled by any member
     in the MAS spool complex.


 L=a or cc or cca or name or name-a
    The area (a), console identifier (cc), area and console
    identifier (cca), symbolic console name (name), or symbolic
    console name and output area ID (name-a) of the active MCS console
    at which the requested information is to be displayed.
1






    $DP (Display Printer or Punch Device Status)


        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
        |  |                                                      |
        |  |         #          !                                 |
        |  |         |    a     |                                 |
        |  |   #    !|    cc    |                                 |
        |$D|P  |,PUN||,L= cca   |                                 |
        |  |   %    ¢|    name  |                                 |
        |  |         |    name-a|                                 |
        |  |         %          ¢                                 |
        |  |                                                      |
        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~¢


 P
     This command displays a one line status for each local printer
     on the system from which the command is issued.


 PUN
     If this operand is present a one line status is generated for each
     local punch on the system from which the command is issued.


 L=a or cc or cca or name or name-a
    The area (a), console identifier (cc), area and console
    identifier (cca), symbolic console name (name), or symbolic
    console name and output area ID (name-a) of the active MCS console
    at which the requested information is to be displayed.
1






    $DR  (Display Abstract Resources Attached To A MAS Member)


        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
        |  |                                                      |
        |  |        #          !                                  |
        |  |        |    a     |                                  |
        |  |  #    !|    cc    |                                  |
        |$D|R |,sid||,L= cca   |                                  |
        |  |  |,ALL||    name  |                                  |
        |  |  %    ¢|    name-a|                                  |
        |  |        %          ¢                                  |
        |  |                                                      |
        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~¢


 R
     Display all abstract resource name attached to a given member
     or all member of the MAS spool complex.


 sid
     The display is requested for a specific MAS member.  If this
     operand is omitted, the display is returned for the member on
     which the command is entered.


 ALL
     The display is requested for a members of the MAS spool complex.


 L=a or cc or cca or name or name-a
    The area (a), console identifier (cc), area and console
    identifier (cca), symbolic console name (name), or symbolic
    console name and output area ID (name-a) of the active MCS console
    at which the requested information is to be displayed.
1






    $LF  (List Forms)


        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
        |  |                                                       |
        |  |                                                       |
        |  | #           !#           !#                !          |
        |$L|F|,F=ffffffff||,W=wwwwwwww||,PRMODE=pppppppp|          |
        |  | %           ¢%           ¢%                ¢          |
        |  |                   #         !                         |
        |  |                   |     #  !|#          !             |
        |  | #       !#       !|   Sn|-m|||     #   !|#      !     |
        |  | |,C=cccc||,T=tttt||,J=Jn|-m|||,R=rn|-rm|||,B=Y/N|     |
        |  | %       ¢%       ¢|   Tn|-m|||     %   ¢|%      ¢     |
        |  |                   |     %  ¢|%          ¢             |
        |  |                   %         ¢                         |
        |  |                                                       |
        |  | #            !#             !                         |
        |  | |       #   !||        #   !|#      !#      !         |
        |  | |,LIM=ln|-lm|||,PLIM=pn|-pm|||,D=H/A||,S=Y/N|         |
        |  | |       %   ¢||        %   ¢|%      ¢%      ¢         |
        |  | %            ¢%             ¢                         |
        |  |                   #    a     !                        |
        |  | #         !#     !|    cc    |                        |
        |  | |,Q=q1..q8||,JOBS||,L= cca   |                        |
        |  | %         ¢%     ¢|    name  |                        |
        |  |                   %    name-a¢                        |
        |  |                                                       |
        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~¢


 F
     Selectively display the JOT (job output table) for elements
     awaiting hardcopy processing.  As many operands as required may be
     present so as to create a command response as selective as is
     desired.  NOTE: No elements having an external writer name are
     included in the display unless explicitly requested.


 F=
     The one to eight character form name is to be used as a search
     argument.


 W=
     The one to eight character external writer name is to be used
     as a search argument.  NOTE:  unless this argument is present, no
     job output elements having the attribute of any external writer
     name will be included in the command display.


 PRMODE=
     The one to eight character processing mode name is to be used as
     a search argumant.


 L=a or cc or cca or name or name-a
    The area (a), console identifier (cc), area and console
    identifier (cca), symbolic console name (name), or symbolic
    console name and output area ID (name-a) of the active MCS console
    at which the requested information is to be displayed.


 C=
     The one to four character FCB name is to be used as a search
     argument.


 T=
     The one to four character UCS name is to be used as a search
     argument.


1









 J=
     The display is to be limited to a job or range of jobs as
     designated by the keyword value.


 R=
     The display is to be limited to a route code or a range of route
     codes as designated by the keyword value.  If this operand is
     omitted the display is limited to the route code calculated from
     the command source.


 B=
     The display is to be limited to job output elements that need
     burst (Y) or that do not require bursting (N).


 S=
     Y - the display is to limited to output elements with selectable
         output dispositions - WRITE/KEEP
     N - the display is to limited to output elements with non-selectable
         output dispositions - HOLD/LEAVE

     Default: Y

 D=
     H - the display is limited to jobs and output elements with an
         operator or system hold.
     A - the display will select all jobs

     Default: only jobs or output elements with no operator or system
              hold will be displayed.

 LIM=
     The display is to be limited to job output elements having the
     specified number of lines of output.


 PLIM=
     The display is to be limited to job output elements having the
     specified number of pages of output.


 Q=
     The display is to be limited to job output elements having the
     specified sysout class(s).  Up to eight sysout classes may be
     present in the list.


 JOBS
     The display is to be categorized by jobname and number.  If this
     operand is present, it must be used in conjunction with another
     selection operand.


1






    $LN (List Job Queue Information By Name)


        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
        |  |                                                      |
        |  |                               #          !           |
        |  |                               |   DJCOWN |           |
        |  |                               |   DJCHOLD|           |
        |  | #    !      #                !|   XEQ    |           |
        |  | |,ALL|#    !|        #      !||   CNV    |           |
        |$L|N|,ANY||,IND||,R=dest1|-dest2|||,Q=STC    |           |
        |  | |,sid|%    ¢|        %      ¢||   TSU    |           |
        |  | |,IND|      %                ¢|   HOLD   |           |
        |  | %    ¢                        |   ACTIVE |           |
        |  |                               |   READY  |           |
        |  | #                  !          %          ¢           |
        |  | |         #       !|#              !#             !  |
        |  | |,C=class1|-class2|||,AFTER=jobname||,WITH=jobname|  |
        |  | |         %       ¢|%              ¢%             ¢  |
        |  | %                  ¢                                 |
        |  |                                                      |
        |  | #               !#          !#             !         |
        |  | |,BEFORE=jobname||,CNTL=name||,RES=resource|         |
        |  | %               ¢%          ¢%             ¢         |
        |  |                                                      |
        |  |            #        !                                |
        |  |            |  a     |                                |
        |  | #         !|  cc    |                                |
        |  | |,V=volser||L=cca   |                                |
        |  | %         ¢|  name  |                                |
        |  |            |  name-a|                                |
        |  |            %        ¢                                |
        |  |                                                      |
        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~¢


 N
     JES2 is to list job information by name.


 sid
     JES2 is to display the job information for all jobs whose system
     affinities include the specified 4-character system identifier


 ANY
     JES2 is to display the above job information for all jobs with
     the system affinity of ANY


 ALL
     JES2 is to display the above job information for all jobs
     regardless of system infinity.


 IND
     JES2 is to display the above job information for all jobs
     whose system affinity is for systems operating in independent mode.


 R=dest1-dest2
     JES2 is to display the job information for all jobs having
     a default print/punch routing or range of routing (low to high)
     of the specified destination(s).


1





 Q=DJCOWN
    Job information is to be displayed for jobs that are holding out
    other jobs due to dependent job control conflicts.


 Q=DJCHOLD
    Job information is to be displayed for jobs awaiting execution or
    conversion in dependent job control hold status.


 Q=XEQ
    Job information is to be displayed for jobs waiting for execution
    and/or conversion.


 Q=CNV
    The job information is to be displayed for jobs awaiting conversion.


 Q=STC
    STC specifies that the display is for system tasks being prepared
    for execution or awaiting conversion.


 Q=TSU
    TSU specifies that the display is for time-sharing user waiting for
    execution or awaiting conversion.


 Q=HOLD
    Job information is to be displayed for jobs awaiting execution or
    conversion in hold status or dependent job control hold status.


 Q=ACTIVE
    Job information is to be displayed for jobs that are executing.


 Q=READY
    Job information is to be displayed for jobs awaiting execution that
    are not in hold status.


1





 CLASS=class1-class2
    Job information is to be displayed for jobs that have specified the
    class or jobs in the class range (low to high).


 AFTER=jobname
    Job information is to be displayed for jobs that have requested to
    execute after the specified jobname.


 BEFORE=jobname
    Job information is to be displayed for jobs that have requested to
    execute before the specified jobname.


 WITH=jobname
    Job information is to be displayed for jobs that have requested to
    execute in the same system with the specified jobname.


 RES=resource
    Job information is to be displayed for jobs that have requested to
    execute in a system with the specified JES2 abstract resource
    attached.


 V=volser
    Job information is to be displayed for jobs that have spool space
    on the specified spool volume.


1



 L=a or cc or cca or name or name-a
    The area (a), console identifier (cc), area and console
    identifier (cca), symbolic console name (name), or symbolic
    console name and output area ID (name-a) of the active MCS console
    at which the requested information is to be displayed.




 NOTE:  The first two operands of the $L N command are positional
        in nature; if entered, they must be in the indicated order.
1






    $LQ (List Job Queue Information By Count)


        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
        |  |                                                      |
        |  |                               #          !           |
        |  |                               |   DJCOWN |           |
        |  |                               |   DJCHOLD|           |
        |  | #    !      #                !|   XEQ    |           |
        |  | |,ALL|#    !|        #      !||   CNV    |           |
        |$L|Q|,ANY||,IND||,R=dest1|-dest2|||,Q=STC    |           |
        |  | |,sid|%    ¢|        %      ¢||   TSU    |           |
        |  | |,IND|      %                ¢|   HOLD   |           |
        |  | %    ¢                        |   ACTIVE |           |
        |  |                               |   READY  |           |
        |  | #                  !          %          ¢           |
        |  | |         #       !|#              !#             !  |
        |  | |,C=class1|-class2|||,AFTER=jobname||,WITH=jobname|  |
        |  | |         %       ¢|%              ¢%             ¢  |
        |  | %                  ¢                                 |
        |  |                                                      |
        |  | #               !#          !#             !         |
        |  | |,BEFORE=jobname||,CNTL=name||,RES=resource|         |
        |  | %               ¢%          ¢%             ¢         |
        |  |                                                      |
        |  |            #        !                                |
        |  |            |  a     |                                |
        |  | #         !|  cc    |                                |
        |  | |,V=volser||L=cca   |                                |
        |  | %         ¢|  name  |                                |
        |  |            |  name-a|                                |
        |  |            %        ¢                                |
        |  |                                                      |
        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~¢


 Q
     JES2 is to display the number of jobs on the specified queue.


 sid
     JES2 is to display the job information for all jobs whose system
     affinities include the specified 4-character system identifier


 ANY
     JES2 is to display the above job information for all jobs with
     the system affinity of ANY


 ALL
     JES2 is to display the above job information for all jobs
     regardless of system infinity.


 IND
     JES2 is to display the above job information for all jobs
     whose system affinity is for systems operating in independent mode.


 R=dest1-dest2
     JES2 is to display the job information for all jobs having
     a default print/punch routing or range of routing (low to high)
     of the specified destination(s).


1





 Q=DJCOWN
    Job information is to be displayed for jobs that are holding out
    other jobs due to dependent job control conflicts.


 Q=DJCHOLD
    Job information is to be displayed for jobs awaiting execution or
    conversion in dependent job control hold status.


 Q=XEQ
    Job information is to be displayed for jobs waiting for execution
    and/or conversion.


 Q=CNV
    The job information is to be displayed for jobs awaiting conversion.


 Q=STC
    STC specifies that the display is for system tasks being prepared
    for execution or awaiting conversion.


 Q=TSU
    TSU specifies that the display is for time-sharing user waiting for
    execution or awaiting conversion.


 Q=HOLD
    Job information is to be displayed for jobs awaiting execution or
    conversion in hold status or dependent job control hold status.


 Q=ACTIVE
    Job information is to be displayed for jobs that are executing.


 Q=READY
    Job information is to be displayed for jobs awaiting execution that
    are not in hold status.


1





 CLASS=class1-class2
    Job information is to be displayed for jobs that have specified the
    class or jobs in the class range (low to high).


 AFTER=jobname
    Job information is to be displayed for jobs that have requested to
    execute after the specified jobname.


 BEFORE=jobname
    Job information is to be displayed for jobs that have requested to
    execute before the specified jobname.


 WITH=jobname
    Job information is to be displayed for jobs that have requested to
    execute in the same system with the specified jobname.


 RES=resource
    Job information is to be displayed for jobs that have requested to
    execute in a system with the specified JES2 abstract resource
    attached.


 V=volser
    Job information is to be displayed for jobs that have spool space
    on the specified spool volume.


1



 L=a or cc or cca or name or name-a
    The area (a), console identifier (cc), area and console
    identifier (cca), symbolic console name (name), or symbolic
    console name and output area ID (name-a) of the active MCS console
    at which the requested information is to be displayed.




 NOTE:  The first two operands of the $L N command are positional
        in nature; if entered, they must be in the indicated order.
1






    $QA  (Attach An Abstract Resource To A MAS Member)


        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
        |  |                                                      |
        |  |                 #          !                         |
        |  |                 |    a     |                         |
        |  |           #    !|    cc    |                         |
        |$Q|A ,resource|,sid||,L= cca   |                         |
        |  |           %    ¢|    name  |                         |
        |  |                 |    name-a|                         |
        |  |                 %          ¢                         |
        |  |                                                      |
        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~¢


 A
     Attach an abstract resource to a given member member of the
     MAS spool complex.  Once attached the resource remains until it
     removed via the $Q D command or a JES2 COLD-START.


 resource
     This operand is any valid abstract resource name defined by
     the JES2 systems programmer.


 sid
     The resource is to be attached to the specified MAS spool
     complex member.  If this operand is omitted, the resource is
     attached to the MAS member on which the command is entered.


 L=a or cc or cca or name or name-a
    The area (a), console identifier (cc), area and console
    identifier (cca), symbolic console name (name), or symbolic
    console name and output area ID (name-a) of the active MCS console
    at which the requested information is to be displayed.
1






    $QD  (Delete An Abstract Resource From A MAS Member)


        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
        |  |                                                      |
        |  |                         #          !                 |
        |  |                         |    a     |                 |
        |  |           #    !#      !|    cc    |                 |
        |$Q|D ,resource|,sid||,FORCE||,L= cca   |                 |
        |  |           %    ¢%      ¢|    name  |                 |
        |  |                         |    name-a|                 |
        |  |                         %          ¢                 |
        |  |                                                      |
        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~¢


 D
     Delete an abstract resource from a given member member of the
     MAS spool complex.


 resource
     This operand is any valid abstract resource name defined by
     the JES2 systems programmer.


 sid
     The resource is to be deleted from the specified MAS spool
     complex member.  If this operand is omitted, the resource is
     deleted from the MAS member on which the command is entered.


 FORCE
     The resource is to be deleted from the specified MAS spool
     complex member even if there are jobs executin in that member
     that have are using the specified resource name.


 L=a or cc or cca or name or name-a
    The area (a), console identifier (cc), area and console
    identifier (cca), symbolic console name (name), or symbolic
    console name and output area ID (name-a) of the active MCS console
    at which the requested information is to be displayed.
1






    $Q'
    $QJ
    $QT  (Alter Job Abstract Resource And Dependent Job Control Hold)
    $QS


        #~~?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
        |  |                                                      |
        |  |'jobname'                                             |
        |  |J  #  !   #        !#             !#                ! |
        |$Q|T m|-n|   |,RELEASE||,ADD=resource||,DELETE=resource| |
        |  |S  %  ¢   %        ¢%             ¢%                ¢ |
        |  |                                                      |
        |  |                                                      |
        %~~_~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~¢


 Jn-m / Tn-m / Sn-m / 'jobname'
    The JES2 abstract resource routing info and/or the dependent job
    control hold is to be altered and displayed for the selected
    job or range of jobs.  The jobs must be in the conversion or
    execution queue.  At least one of the following operands is required
    to be present in the command text.


 RELEASE
    The job or range of jobs is/are to be released from dependent
    job control hold conditions.


 ADD=resource
    The named resource is to be added to the job or range of jobs.


 DELETE=resource
    The named resource is to be removed from the job or range of jobs.


 L=a or cc or cca or name or name-a
    The area (a), console identifier (cc), area and console
    identifier (cca), symbolic console name (name), or symbolic
    console name and output area ID (name-a) of the active MCS console
    at which the requested information is to be displayed.
1




              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
              @                                         @
              @       SECTION 2 - JECL STATEMENTS       @
              @                                         @
              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@








              2.0  Mellon Bank Supported JECL Statements
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


1






 The /*AFTER statement




   #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
   |                                                                 |
   |  /*AFTER jobname                                                |
   |                                                                 |
   %~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~¢


  Use the /*AFTER statement to insure that a given job executes after
  another job that is currently in the spool complex awaiting execution
  or executing.

  The value, jobname, is any one to eight byte valid JES2 job name.

  Only one /*AFTER card is supported per job.  If more that one
  /*AFTER card is present in a job stream, only the last one has
  any meaning.

  The use of a /*AFTER card reduces by one the maximum allowable number
  of /*CNTL cards available for use by a given job.
1






 The /*BEFORE statement




   #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
   |                                                                 |
   |  /*BEFORE jobname                                               |
   |                                                                 |
   %~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~¢


  Use the /*BEFORE statement to insure that a given job executes before
  another job that is currently in the spool complex awaiting execution.

  The value, jobname, is any one to eight byte valid JES2 job name.

  Only one /*BEFORE card is supported per job.  If more that one
  /*BEFORE card is present in a job stream, only the last one has
  any meaning.

  The use of a /*BEFORE card reduces by one the maximum allowable
  number of /*CNTL cards available for use by a given job.
1






 The /*WITH statement




   #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
   |                                                                 |
   |  /*WITH jobname                                                 |
   |                                                                 |
   %~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~¢


  Use the /*WITH statement to insure that a given job executes in the
  same complex member as the specified jobname.  If the named job is
  not currently active when the job using the /*WITH card enters
  the job queue, the job with the /*WITH card will wait for the named
  job to become active.

  The value, jobname, is any one to eight byte valid JES2 job name.

  Only one /*WITH card is supported per job.  If more that one
  /*WITH card is present in a job stream, only the last one has
  any meaning.

  The use of a /*WITH card reduces by one the maximum allowable
  number of /*CNTL cards available for use by a given job.
1






 The /*CNTL statement




   #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
   |                                                                 |
   |                #    !                                           |
   |  /*CNTL anyname|,EXC|                                           |
   |                |,SHR|                                           |
   |                %    ¢                                           |
   |                                                                 |
   %~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~¢


  Use the /*CNTL statement to declare a user defined abstract resource
  name that will be used by the given job as well as the disposition
  of the named resource.

  The value, anyname, is any one to eight byte name defined by the
  user to represent an abstract resource.

  Up to six /*CNTL cards are supported per job stream; however, the
  use of /*AFTER /*BEFORE and /*WITH cards reduces this number.

  EXC denotes that the job requests exclusive control over the named
  abstract resource.  A job specifying this option will not begin
  execution if any other job currently executing in the MAS spool
  complex has requested the same abstract resource name either shared
  (SHR) or exclusively (EXC).

  SHR denotes that the job requests shared control over the named
  abstract resource.  A job specifying this option will not begin
  execution if any other job currently executing in the MAS spool
  complex has requested the same abstract resource name exclusively
  (EXC).  However, multiple jobs are permitted to execute if they all
  request shared control over the same abstract resource name.

  If neither EXC nor SHR are specified, the requested control over the
  named abstract resource is assumed to be shared (SHR).
1






 The /*ROUTE statement




   #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
   |                                                                 |
   |  /*ROUTE XEQ resource                                           |
   |                                                                 |
   %~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~¢


  Use the /*ROUTE statement to insure that a given job executes in
  a MAS member that contains the named JES2 abstract resource.

  The value, resource, is any one of the JES2 systems programmer
  defined abstract resource names.  Use the TSO HELP RESOURCE command
  to determine all of the available resource names.

  As many /*ROUTE cards as necessary may be present in the job stream.

  The /*ROUTE cards may be in any order in relation to all other
  JCL or JECL cards in the job stream.

  The value, HERE, may be used in place of a resource name.  It denotes
  that the job must execute on the MAS member upon which the job was
  entered.
1
              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
              @                                         @
              @        SECTION 3 - JES2 MESSAGES        @
              @                                         @
              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@








               3.0  Mellon Bank Generated JES2 Messages
               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


1



 $HASP919 NO OUTPUT QUEUED

 Issued by: MBSHRSPL

 Explanation: A $LF command was issued to scan the JOT (job output
              table); however, no output elements could be found that
              matched the request.

 System Action: None.

 Operator Response: None.



 $HASP920 UNABLE TO OBTAIN WORKAREA TO COMPLETE REQUEST

 Issued by: MBSHRSPL

 Explanation: While processing a $LF command, a call to the $GETWORK
              service routine returned a non-zero return code.

 System Action: Processing for the current $LF request is terminated.

 Operator Response: Try the command at a later time or make the $LF
                    more general.



 $HASP921 F=ffff R= rrrr PRMODE=pppp W=wwww B=b S=s
 $HASP921   Q: q=999 q=999 q=999 q=999 q=999 q=999 q=999

 Issued by: MBSHRSPL

 Explanation: The operator requested a display of the JOT with a $LF
              command.

 System Action: None.

 Operator Response: None.



 $HASP928 *device* status F=ffffffff Q=qqqqqqqq   FSS

 Issued by: MBSHRSPL

 Explanation: The operator requested a display of local printer or
              punch devices with the $DP command.  If the device is
              in FSS mode, a code of "FSS" will appear at the end
              of the corresponding display line.

 System Action: None.

 Operator Response: None.
1



 $HASP935 JOBNAME SPECIFIED ON /*BEFORE STATEMENT IS INVALID.
          CORRECT - RESUBMIT

 Issued by: MBSHRSPL

 Explanation: An invalid jobname has been detected on a /*BEFORE card.

 System Action: The job is flushed with a JCL error.

 Programmer Response: Correct the error then resubmit the job.



 $HASP936 JOBNAME SPECIFIED ON /*AFTER STATEMENT IS INVALID.
          CORRECT - RESUBMIT

 Issued by: MBSHRSPL

 Explanation: An invalid jobname has been detected on a /*AFTER card.

 System Action: The job is flushed with a JCL error.

 Programmer Response: Correct the error then resubmit the job.



 $HASP937 PARM SPECIFIED ON /*CNTL STATEMENT IS INVALID.
          CORRECT - RESUBMIT

 Issued by: MBSHRSPL

 Explanation: An invalid control name has has been detected on a
              /*CNTL card.

 System Action: The job is flushed with a JCL error.

 Programmer Response: Correct the error then resubmit the job.  The
                      control name must be one to eight characters long.



 $HASP938 MAXIMUM COMBINATION OF /*BEFORE, /*AFTER, /*WITH,
          AND /*CNTL IS 6

 Issued by: MBSHRSPL

 Explanation: The maximum allowable number of these types of JECL
              statements per job is 6.

 System Action: The job is flushed with a JCL error.

 Programmer Response: Correct the error then resubmit the job.  Note
                      that the use of a /*AFTER card reduces the maximum
                      number of /*CNTL cards allowed by one.  The same
                      holds true for the /*BEFORE card.



 $HASP939 JOBNAME SPECIFIED ON /*WITH STATEMENT IS INVALID.
          CORRECT - RESUBMIT

 Issued by: MBSHRSPL

 Explanation: An invalid jobname has been detected on a /*WITH card.

 System Action: The job is flushed with a JCL error.

 Programmer Response: Correct the error then resubmit the job.
1



 $HASP940 * -- AFTER  JOBNAME = jjjjjjjj   --

 Issued by: MBSHRSPL

 Explanation: The job currently on a reader has specified a
              /*AFTER card for job, jjjjjjjj.

 System Action: Processing continues.

 Operator Response: None.



 $HASP941 * -- WITH   JOBNAME = jjjjjjjj   --

 Issued by: MBSHRSPL

 Explanation: The job currently on a reader has specified a
              /*WITH card for job, jjjjjjjj.

 System Action: Processing continues.

 Operator Response: None.



 $HASP942 * -- RESOURCE ROUTING = rrrrrrrr --

 Issued by: MBSHRSPL

 Explanation: The job currently on a reader has requested the JES2
              abstract resource routing, rrrrrrrr.

 System Action: Processing continues.

 Operator Response: None.



 $HASP943 * -- CONTROL INFO = cccccccccccc --

 Issued by: MBSHRSPL

 Explanation: The job currently on a reader has specified the user
              defined control information, cccccccccccc.

 System Action: Processing continues.

 Operator Response: None.
1



 $HASP944 * -- BEFORE JOBNAME = jjjjjjjj   --

 Issued by: MBSHRSPL

 Explanation: The job currently on a reader has specified a
              /*BEFORE card for job, jjjjjjjj.

 System Action: Processing continues.

 Operator Response: None.



 $HASP946* RESOURCE, rrrrrrrr, IS NO LONGER VALID; PLEASE REMOVE

 Issued by: MBSHRSPL

 Explanation: The named resource, rrrrrrrr, is obsolete.  Remove it
              from the job.

 System Action: The JECL card is ignored.

 Programmer Response: Remove the RESOURCE card on the next submission
                      of the job.



 $HASP950 nnnnn AWAITING EXECUTION
 $HASP950 c= nnnnn  c=nnnnnn c= nnnnn ...
 $HASP950 nnnnn AWAITING OUTPUT
 $HASP950 nnnnn AWAITING HARDCOPY
 $HASP950 nnnnn AWAITING TRANSMISSION
 $HASP950 nodename = nnnnn  nodename = nnnnn ...
 $HASP950 TOTAL JOBS count-BATCH count-STC count-TSU count-APPC

 Issued by: MBSHRSPL

 Explanation: These messages are display as the result of an operator
              entering the $DB command.  The count values are JQE
              counts.

 System Action: None.

 Operator Response: None.



 $HASP965 sid = resource resource resource ...

 Issued by: MBSHRSPL

 Explanation: This response is the result of an operator $DR command.
              The indicated resource name(s) are attached to the
              named system id.

 System Action: None.

 Operator Response: None.
1





 $HASP966 sid = NO RESOURCES ATTACHED

 Issued by: MBSHRSPL

 Explanation: This response is the result of an operator $DR or
              $QD command.  There are no resources attahced to
              the indicated system id.

 System Action: None.

 Operator Response: None.



 $HASP968 nnnnn JOB/RESOURCE CONFLICT(S) EXIST

 Issued by: MBSHRSPL

 Explanation: This response is the result of an operator $DC command.
              The list of jobs queued for execution or conversion
              that cannot run due to a lack of resources attached
              to the systems in the target spool complex is complete.

 System Action: None.

 Operator Response: If appropriate, attached the required resource
                    names to a system in the spool complex with the
                    $QA command.



 $HASP969 resource ADDED   IN sid
                   DELETED

 Issued by: MBSHRSPL

 Explanation: This response is the result of an operator $QA or $QD
              command.  The name resource has been added to or removed
              from the named system id.

 System Action: None.

 Operator Response: None.



 $HASP970 resource IN USE BY nnnnn JOB(S) ON sid

 Issued by: MBSHRSPL

 Explanation: This response is the result of an operator $QD command
              for a resource name that is currently being used by the
              specified count of jobs on the named system id.

 System Action: The resource is not removed from the named system id.

 Operator Response: Use the $LN,sid,RES=resource command to list the
                    jobs active with the named resource.  Either wait
                    for all jobs to end that are using the resource
                    or issue the $QD command with the FORCE operand
                    to immediately remove the named resource.
./ ADD NAME=DOCOVW   0102-05314-05314-1357-00122-00119-00000-T0SM0

General Information and Overview-



What are the Mellon Bank Shared Spool mods, and what can they do for
you?
                                                                       *
The shared spool mods enhance the JES2's job selection algorithms by
providing additional requirements for job scheduling when running in a
JES2 MAS, or Multiple Access Spool configuration.  By coding one or more
new JCL statements we can now restrict which system a job runs on to
those systems that have a particular resource assigned to them.  For
instance, assuming you have some number of jobs that can only run where
a particular resource exists - a CICS region, a vendor program, or maybe
where extra tape drives attached, and assuming those resources may be
available on different systems in the MAS configuration each time your
jobs are submitted, you can still ensure your job is only initiated on
the correct systems, by using the shared spool mods.  Another
enhancement allows jobs to execute only on the LPAR that they are
submitted from.  Still other enhancements allow job execution, only
while other job names are in execution, or only after other job names
have completed.

   A final further extension used in many shops allows you to create an
arbitrary resource name and have any jobs you wish coordinate their
execution of based on the need for exclusive or shared access, of that
arbitrary resource name before selecting it for execution.  No previous
resource name setup is required to use this feature; only agreement
among the participating jobs on the resource name you wish to
co-ordinate your job execution on.  An example of this feature is to
serialize SMP/e jobs, by local agreement all systems programmers could
use the CSI name as their arbitrary resource name to serialize their
SMP/e jobs.  For instance, I could serialize exclusively for an apply
job using a "/*CNTL csi-zone-name,EXC" statement, or I could hold as
shared, the same name as shared, by using a "/*CNTL csi-zone-name,SHR"
statement for reporting jobs.  Another example would be to create an
arbitrary name and have all participating jobs enque on the name
exclusively using a "/*CNTL resource name,EXC" to prevent more than one
of the participating jobs from running at the same time.  This technique
could replace the use of dummy DD statements with a DISP of OLD, solely
to single thread a sequence of jobs.


- History of the Mellon Mods, at least as I know it. -

  I must say at the outset, that we are not, nor have we ever been
MELLON BANK.  That being said, my company has maintained the Mellon
Mods, and provided updates for the CBT tape for many years now, I have
maintained them personally for the past ten years, and they were
maintained by others at this company for several years prior to my
arriving on the scene.  Around the turn of the millennium, I completely
rewrote the mods with some help from others, Bob Break of St.  Louis,
(check the CBT tape for his JES2 module reload exit), and Judy Runt, and
the other good folks over at Wisconson Light.  The intent of the rewrite
was to incorporate the new JES2 functions that make use of WLM resource
names and scheduling environments, and to repackage the mods such that
they were all contained in standard JES2 exits, and made no direct
changes to the JES2 source code.  Further, the older version of the mods
was in a word, HUGE, and was primarily straight mods to the JES2 source
- no exits, so it required a great deal of maintenance with each new
version of JES2.  While in their current state, they are not simple
exits, they are all exits, and are quite manageable.


- Interaction with WLM Resources and Scheduling Environments -

  One of the primary job selection criterions available through the
Mellon Shared Spool mods is the availability of a particular resource
name being available on a particular system.  In the past, we maintained
these names in a table within the Mellon Mods code; and provided JES2
commands that would alter the state of the resources, either on or off.
We now use WLM Scheduling Environment names instead.  The scheduling
environment names are the same ones displayed on the SDSF SE panel.  The
scheduling environments are on, when all of the resource names that make
up each environment are also on.  WLM resource names are the same ones
displayed on the SDSF RES panel.  The WLM scheduling environment names
are what are matched on the "/*ROUTE XEQ scheduling environment name"
JECL statements.  This function is virtually identical to the new SCHENV
parameter on the jobcard.  In fact, we substitute the internal value of
the SCHENV with what we find in the /*ROUTE XEQ card only if there is no
current value.  These mods supported the function long before JES2
adopted the facility, which appears to have been modeled after the
mellon mods, and arose out of a long standing SHARE requirement.  While
these mods continue to support the older style /*ROUTE XEQ statements to
route jobs for execution based on resource locations, we suggest that
the older /*ROUTE XEQ statements; for Mellon Mods job selection, be
replaced by the new IBM supported SCHENV parm on the jobcard.


- Compatability and Support of the Mellon Mods -


  The Mellon Shared Spool mods, as they exist today, do not modify any
JES2 source directly, and only make use of fully supported and
documented exits; I see no reason why they may become unsupportable in
the future.

  I will create updates to the Mellon Mods, and make those updates
available through the CBT tape web site, as we get new versions of the
operating system installed in my shop.  I cannot guarantee to provide
support for problems associated with this code.  If you do however have
problems, please let me know the details and I will do all that I can,
working on my own time to provide corrective fixes.  My name is Stephen
McColley and you can send me the documentation concerning any problems
you have with the code, via e-mail at SGMCCOLLEY@ALLTEL.NET.  I check my
e-mail regularly and any messages will not normally go more than a day
or two before I see them.

  If any of you have any suggestions for new features or changes to the
mods, you can send them to my e-mail address, and I will be happy to
give each of them due consideration.

  One final item, if you could drop me a simple line or two at
SGMCCOLLEY@ALLTEL.NET to let me know you are using the software, I will
be able to contact you - hopefully via e-mail, when and if any
significant problems are found, or when new versions of the code are
made available.  I will also be able to forward you a WORD formated
document for the overview, user documentation, and installation
instructions.

- end of overview -
./ ADD NAME=DOCUSR   0100-05314-05314-1159-00246-00246-00000-T0SM0

       Users Guide - How to use the features of these Mods

-  Control Statements

  You take advantage of the Mellon Shared Spool mods via JECL
statements.  There are currently five supported statements, they are:

"/*CNTL XEQ resource, { EXC | SHR }"

"/*ROUTE XEQ secheduling environment name | HERE "

"/*WITH jobname"

"/*AFTER jobname"

"/*BEFORE jobname"

  The /*CNTL XEQ statement is used to add an additional job selection
criterion based on other executing jobs current use of the same resource
name.  The "/*CNTL XEQ" must be placed in columns 1 through 10.  The
resource name is arbitrary, and is made of up to eight (8) characters
with no embedded blanks.  The resource name follows the literal "/*CNTL"
and must be preceded by at least one, but not more than 30 blank spaces.
If the shared (SHR) or exclusive (EXC) keywords are used, they must
immediately follow the resource name and be preceded by a comma.  If
neither the SHR nor EXC keyword is specified SHR is assumed.

You may specify up to eight /*CNTL statements; additional statements are
disregarded.

    Examples:

    Assume jobnames ABC, and CDE are currently in execution with the
following /*CNTL XEQ statements -

    //ABC  JOB (other stuff)
    /*CNTL XEQ MYNAME,SHR

    //CDE JOB (other stuff)
    /*CNTL XEQ MYNAME,SHR

Then if job EFG is submitted with the following, /*CNTL statement -

    //EFG JOB (other stuff)
    /*CNTL XEQ MYNAME,EXC

The job will not be selected for execution as long as either job ABC or
CDE continues to run.

Next if job XYZ is submitted with the following, /*CNTL statement -

    //XYZ JOB (acctng info)
    /*CNTL XEQ     MYNAME   Ð SHR is the default

  It would be immediately available for execution.

When no jobs remain in execution with a /*CNTL XEQ MYNAME  job EFG with
the EXC requirement would be available for job selection.  Assume it has
now been selected, and a new job enters the system with the following
/*CNTL statement -

    //WXY  JOB  (acctng info)
    /*CNTL  XEQ  MYNAME

  Job WXY will not be available for job execution until job XYZ that
holds the resource name exclusively ends.  If other jobs are submitted
with resource names other than MYNAME, they will be treated separately
and only other jobs with /*CNTL statements that reference the same
resource name will affect their availability for job selection.

  The /*CNTL statement only provides additional job selection criterion,
and does not replace other JES2 requirements for job selection such as
available initiators, appropriate job class and so on.  The resource
name is arbitrary, you make it up, there is no need for anyone to add
the name to WLM, or any other table before it is used.


The /*ROUTE XEQ is a standard JES2 statement used to route your job to a
specific execution node.  We have usurped the use of the statement, and
when we read an XEQ statement, we test to see if the name following the
XEQ literal is a valid WLM scheduling environment name.  If the name is
a valid scheduling environment name, and if no schenv value is present
on the JOB card, we use the XEQ name in the same way the job statement
parameter SCHENV is used, otherwise we let JES2 handle it normally.

The literal "/*ROUTE" must begin in column 1.  The literal "XEQ" must
follow "/*ROUTE", and may be separated by one to twenty blank spaces.
The resource name, if not a valid JES2 node name, must follow the "XEQ
literal by between 1 and 35 blank spaces.  The resource name can be
between 1 and 16 characters long, if the name is longer than 16
characters, only the first 16 are used.

There is one specific exception to all of the above, if the literal
following XEQ is HERE, then the jobs system affinity is set to the
system where you submitted the job, quite a handy feature itself.

You may specify more than one /*ROUTE statement; but only the last will
be used.

Examples:

//ABC JOB (job acctng),SCHENV=BEFOREALL
/*ROUTE XEQ AFTERALL   <== ignored because a valid schenv is specified

//ABC JOB (job acctng),SCHENV=BEFOREALL
/*ROUTE XEQ  N6  <== a valid JES2 routing node, both jes2 routing and
//*                  schenv are valid for this job.

//ABC JOB (jobacctng)
/*ROUTE XEQ BEFOREALL <== BEFOREALL is setup the same as SCHENV above

//TUV  JOB (jobacctng)
/*ROUTE XEQ  HERE   <== the jobs will only execute where submitted.

The /*WITH statement specifies that the job is only available for
selection while the jobname named on the /*WITH statement is in
execution.  The condition is satisfied even if the jobname that must be
executing is executing on a different system within the same MAS
environment.  If more than one /*WITH statement is read; only the last
one is kept.

Example:

//FGH   JOB  (acctng info)
/*WITH    JKL

This job will only be selected for execution if jobname JKL is
executing at the time of job selection.


The /*AFTER jobname statement specifies that the job is only available
for selection after the jobname in the /*AFTER statement has finished.
Because we really do not track all completed jobs, from - from when -
the beginning of the day, the week, the last ipl, the last cold start,
or maybe for all time, it is more correct to say that if the jobname
specified on a /*AFTER statement is in execution at the time our job
would otherwise have been selected for execution, then our job will wait
until the jobname referenced in the /*AFTER statement has ended.
"AFTER" may have been more appropriately names "NOT WHILE", but since I
was not around when the original keywords were developed, please do not
blame me.  Again, the jobname on the /*AFTER need not be executing on
the system that our job is potentially selected for execution on, it
could be on any system within the MAS complex.

If more than one /*AFTER card is read; only the last one is kept.

Example:

//ABC JOB (acctng info)
/*AFTER    XYZ

Job ABC will not be available for execution while job XYZ is in
execution anywhere within the MAS complex.


The /*BEFORE jobname statement causes the jobname specified in the
statement to not be selected for execution until after this job has
completed.  Specifically if jobname ABC has a /*BEFORE XYZ statement,
then if jobname XYZ is potentially selected for execution by JES2, the
Mellon Mods will examine all jobs on the input queue and when jobname
ABC is found to have a /*BEFORE for job XYZ, job XYZ will be rejected as
a potential candidate for job execution.

If more than one /*BEFORE statement is read; only the last one is kept.

 Example:

//ABC   JOB  (acctng info)
/*BEFORE   XYZ

This before statement will cause JES2 to reject job XYZ as a potential
candidate for job execution until after job ABC has completed execution.
If job XYZ was already executing at the time job ABC is submitted, the
/*BEFORE statement will not affect anything, unless there is another job
XYZ waiting to execute.  Also please note, it is possible to form a
lockout condition where JOBA has a /*BEFORE JOBB, and JOBB has a
/*BEFORE JOBA statement.  There is no checking done for this type of
deadly embrace.

  A few final notes concerning the relationship between /*BEFORE, and
/*AFTER.  Many people try to use these statements, and stack two or more
jobs in the same PDS member and submit them all at the same time with
one SUBMIT command.  This usually works as expected, but sometimes JES2
will NOT PROCESS the jobs in the order they appear in the submitted
member.  This can result in a job with a /*AFTER statement for a prior
job you think JES2 has already seen and processed because of the
sequence in the submitted member, being processed and initiated before
JES2 ever finishes reading the job that is the object of the /*AFTER
statement.  This problem can be avoided by making sure that jobs with
/*BEFORE and /*AFTER requirements are submitted separately from each
other and in an appropriate sequence.

  In relationship to any of the statements above, when routing a job to
another node, the additional selection criterion defined by the Mellon
Mods statements, will follow the job to the new node, where it will
likely no longer be appropriate.  Of course if the Mellon Mods are not
installed at the receiving node, the additional job selection
requirements are not honored.

The JES2 $DJ command output has been extended to include information
about /*CNTL, up to eight names qualified with an "E" for exclusive, or
an "S" for shared, one /*WITH jobname, one /*BEFORE and one /*AFTER
jobname.  Examples of the extended displays are given below, please note
that the information is included in either the standard or long versions
of the command.

Altered Display Commands -

-$DJ(25926)
 $HASP890 JOB(T0SM0TTY)
 $HASP890 JOB(T0SM0TTY)  STATUS=(AWAITING EXECUTION),CLASS=X,
 $HASP890                PRIORITY=6,SYSAFF=(ANY),HOLD=(JOB),
 $HASP890                AFTER=T0SM0AF,BEFORE=T0SM0BF,WITH=T0SM0WTH,
 $HASP890                CNTL=(HOWDY-E,HOWDO-S,WILDO-S,HELLO-S)


-$DJ(25926),LONG
 $HASP890 JOB(T0SM0TTY)
 $HASP890 JOB(T0SM0TTY)  STATUS=(AWAITING EXECUTION),CLASS=X,
 $HASP890                PRIORITY=6,SYSAFF=(ANY),HOLD=(JOB),
 $HASP890                CMDAUTH=(LOCAL),OFFS=(),SECLABEL=,
 $HASP890                USERID=T0SM0,SPOOL=(VOLUMES=(JES2T1),TGS=1,
 $HASP890                PERCENT=0.0009),ARM_ELEMENT=NO,CARDS=18,
 $HASP890                REBUILD=NO,SRVCLASS=BATTSTMD,SCHENV=TEST,
 $HASP890                SCHENV_AFF=(),CC=(),AFTER=T0SM0AF,
 $HASP890                BEFORE=T0SM0BF,WITH=T0SM0WTH,
 $HASP890                CNTL=(HOWDY-E,HOWDO-S,WILDO-S,HELLO-S)


In addition informational messages, $HASP493 and $HASP494 are written to
the log as jobs with /*CNTL, /*WITH, /*BEFORE, or /*AFTER are read.
Examples of the messages follow.

 These messages were issued for jobname T0SM0TTY

$HASP944 T0SM0TTY * -- WITH   JOBNAME = T0SM0WTH   --
$HASP944 T0SM0TTY * -- AFTER  JOBNAME = T0SM0AF    --
$HASP944 T0SM0TTY * -- BEFORE JOBNAME = T0SM0BF    --
$HASP943 T0SM0TTY * -- CONTROL INFO = HOWDY,EXC    --
$HASP943 T0SM0TTY * -- CONTROL INFO = HOWDO,SHR    --
$HASP943 T0SM0TTY * -- CONTROL INFO = WILDO,SHR    --
$HASP943 T0SM0TTY * -- CONTROL INFO = HELLO,SHR    --


 - end of text -
./ ADD NAME=JES2PARM 0104-04313-05314-1411-00064-00035-00000-T0SM0
/*                                                                   */
/* ALL LOADMOD AND EXIT STATEMENTS REWORKED 3-18-96 T0SM0            */
/*  USED IN OUR SHOP - FOR MELLON MODS CHANGES ONLY - FIND 'MMODS'   */
/*                                                                   */
/*                                                                   */
/*                                                                   */
LOADMOD(STJTABS)   /*  DYNAMIC TABLE DEFINITIONS FOR JQE EXTENSION */
LOADMOD(STSCX01A)  /*  JES2 EXIT1 - BANNER PAGE EXIT (NON3800) */
LOADMOD(STSCX04A)  /* PARSES /*ROUTE XEQ RESNAME AND VALIDATES */
LOADMOD(STSCX04B)  /* PARSES /*BEFORE, AFTER,WITH, AND CNTL    */
LOADMOD(STSCX05A)  /* $REPEXIT AND $ADDEXIT COMMANDS ARE HERE  */
LOADMOD(STSCX05B)  /* PREVENTS PURGING JOBS BY RANGE           */
LOADMOD(STSCX06A)  /* TURNS /*ROUTE CNTL,XX INTO SCHENV= VALUES*/
LOADMOD(STSCX15A)  /* FORCES FCB LOAD UNLESS CHANGING TO STDFCB*/
LOADMOD(STSCX20A)  /* COPIES JCT INFO INTO THE JQE EXTENSION   */
LOADMOD(STSCX36A) STORAGE=CSA
LOADMOD(STSCX49A)
LOADMOD(STSCX100)
EXIT(001) ROUTINE=EXIT01A,STATUS=ENABLED
                      /* A = JES2EX01=STSC SEPERATOR BANNER ROUTINE  */
EXIT(004) ROUTINE=(EXIT04A,EXIT04B),STATUS=ENABLED
              /* A = GETS "ROUTE XEQ INFORMATION                     */
              /* B = GETS "BEFORE" "AFTER" "WITH" AND "CNTL" INFO    */
EXIT(005) ROUTINE=(EXIT05A,EXIT05B),STATUS=ENABLED
                      /* A = PREVENTS PURGING JOBS BY RANGE          */
                      /* B = THE $REPEXIT AND $ADDEXIT COMMANDS      */
EXIT(006) ROUTINE=(EXIT06A),STATUS=ENABLED
                      /* A = SETS SCHENV BASED ON ROUTE XEQ CARDS    */
                      /* B = HANDLES TAPE BLP PROCESSING OPTIONS     */
EXIT(015) ROUTINE=(EXIT15A),STATUS=ENABLED
                      /* A = STSC FCB CONTROL                        */
EXIT(020) ROUTINE=(EXIT20A),STATUS=ENABLED
                      /* COPIES JCT INFO INTO THE JQE EXTENSION      */
EXIT(036) ROUTINE=EXIT36A,STATUS=ENABLED
                      /* SAF PROCESS OF RJE SUBMITTED JOBS           */
EXIT(049) ROUTINE=EXIT49A,STATUS=ENABLED
                      /* IMPLEMENT BEFORE AFTER WITH CNTL STATEMENTS */
EXIT(100) ROUTINE=EXIT100A,STATUS=ENABLED
                      /* JES2X100=STSC  FCB SETUP ROUTINES           */
/*                                                                   */
/* MMODS                                                             */
/*                                                                   */
/* IF YOU ARE JUST IMPLEMENTING THE MELLON MODS USE THE LOADMOD AND  */
/* EXIT STATEMENTS BELOW.                                            */
/*                                                                   */
/* MMODS - THE LOADMODS AND EXIT STATEMENTS NEEDED  -                */
/*    O N L Y  FOR MELLON MODS                                       */
/*                                                                   */
/*                                                                   */
LOADMOD(STJTABS)   /*  DYNAMIC TABLE DEFINITIONS FOR JQE EXTENSION */
LOADMOD(STSCX04A)  /* PARSES /*ROUTE XEQ RESNAME AND VALIDATES */
LOADMOD(STSCX04B)  /* PARSES /*BEFORE, AFTER,WITH, AND CNTL    */
LOADMOD(STSCX06A)  /* TURNS /*ROUTE CNTL,XX INTO SCHENV= VALUES*/
LOADMOD(STSCX20A)  /* COPIES JCT INFO INTO THE JQE EXTENSION   */
LOADMOD(STSCX49A)
EXIT(004) ROUTINE=(EXIT04A,EXIT04B),STATUS=ENABLED
              /* A = GETS "ROUTE XEQ INFORMATION                     */
              /* B = GETS "BEFORE" "AFTER" "WITH" AND "CNTL" INFO    */
EXIT(006) ROUTINE=(EXIT06A),STATUS=ENABLED
                      /* A = SETS SCHENV BASED ON ROUTE XEQ CARDS    */
EXIT(020) ROUTINE=(EXIT20A),STATUS=ENABLED
                      /* COPIES JCT INFO INTO THE JQE EXTENSION      */
EXIT(049) ROUTINE=EXIT49A,STATUS=ENABLED
                      /* IMPLEMENT BEFORE AFTER WITH CNTL STATEMENTS */
./ ADD NAME=LSES500  0316-00234-05123-1449-00469-00455-00000-T0SM0
++USERMOD(LSES500)
 /* ***************************************************************
    ** *                                                       * **
    ** * THIS USERMOD HANDLES ALL CHANGES REQUIRED TO CREATE   * **
    ** * LOCAL EXTENSIONS TO THE JQE AND JCT.                  * **
    ** *                                                       * **
    ***************************************************************
    */ .
++VER(Z038) FMID(HJE7707) .
++MAC($STJCTX) SYSLIB(SHASMAC) DISTLIB(AHASMAC).
         MACRO -- $STJCTX -- JCT EXTENTION
&LABEL   $STJCTX
.**********************************************************************
.*
.* FUNCTION: MAPPING MACRO FOR JCT EXTENTION.
.*
.* REVISION HISTORY:
.*
.*   DATE   NAME         DESCRIPTION OF CHANGE
.* -------- ------------ ----------------------------------------------
.* 04/20/00 S MCCOLLEY   ADDED THIS COMMENT BLOCK.
.* 11/13/03 S MCCOLLEY   ADDED CONDITIONAL EXPANSION OF $JCTX
.*
.**********************************************************************
         LCLC  &JCXOK
&JCXOK   SETC  T'JCXORG                     GET THE TYPE FOR JCXORG
         AIF   ('&JCXOK' NE 'U').STNXPND      ** IF NOT DEFINED ADD IT
         $JCTX
.STNXPND ANOP
STJCTX   DSECT
*
* STSC EXTENSION OF THE JCT TO BE USED FOR ALL EXITS
*
         DS    XL(JCXORG-JCTX)     DEFINE REQUIRED $JCTX PREFIX AREA
*
UJCXMFLG DS    XL1                 RESOURCE ROUTING FLAGS
*
UJCXUFLG DS    XL1                 MISC JECL CARDS FLAGS
*
UJCXDLYS DS    X                   JOB DELAY REASONS FROM OUR EXIT 49
*
UJCXWITH DS    CL8                 SAVE A WITH NAME HERE
UJCXAFTN DS    CL8                 SAVE AN AFTER NAME HERE
UJCXBFOR DS    CL8                 SAVE A BEFORE NAME HERE
UJCXDNAM DS    CL45                NAMES FROM BEF/AFT/WITH CARDS AND   X
                                    THE /*CNTL AND SHARE TYPES         X
                                    5 9-BYTE FIELDS
*
         DS    0H                  DOUBLE WORD ALLIGN
UJCXWORK DS    CL4                 4 BYTE TEMPORARY EXIT WORK AREA
*
UJCXSLN1 EQU   *-STJCTX            LENGTH OF SECTION
*
         MEND
++MAC($STQNAME) SYSLIB(SHASMAC) DISTLIB(AHASMAC).
         MACRO -- $STQNAME -- SUNTRUSTS JQE EXTENSION
&LABEL   $STQNAME &DSECT=YES
.*
.**********************************************************************
.*
.* FUNCTION: DEFINE A BERT, AN EXTENSION TO THE JQE.
.*
.* NOTES:    THIS BERT ENTRY CONTAINS ALL THE FIELDS WE USED TO
.*           INCLUDE INTO THE $JQE MACRO PRIOR TO OS/390.
.*
.*           SOME OF THESE FIELD MUST BE IDENTICALLY DEFINED AND USED
.*           IN THE JCTX: UBRDNAME, UBRUFLAG, UBRMFLAG, UBRDLAYS.
.*
.*
.* REVISION HISTORY:
.*
.*   DATE   NAME         DESCRIPTION OF CHANGE
.* -------- ------------ ----------------------------------------------
.* 04/20/00 S MCCOLLEY   INITIAL VERSION -- FOR OS/390 2.6.
.*
.**********************************************************************
.*
STQNAME  DSECT ,
*
* UBRDNAME IS THE LIST OF AFTER/BEFORE JOBNAMES AND/OR CNTL RESOURCES
*          AND THE /*CNTL SHARE TYPE ("S" OR "E").  THESE SHARE TYPE
*          BYTES IMMEDIATELY FOLLOW THE RESOURCE NAME.
*
*   AFTER   (IF ANY) MUST BE FIRST  (SEE UBRAFT).
*   BEFORE  (IF ANY) MUST BE SECOND (SEE UBRBEF).
*   CNTL(S) (IF ANY) MUST BE LAST   (SEE UBRCNTL AND 4 HIGH ORDER BITS
*           OF UBRMFLAG.  THERE CAN BE UP TO 4 CNTL NAMES.)
*
UBRWITH  DS    CL8                 PLACE TO HOLD A /*WITH NAME
UBRAFTR  DS    CL8                 PLACE TO HOLD A /*AFTER NAME
UBRBFOR  DS    CL8                 PLACE TO HOLD A /*BEFORE NAME
UBRDNAME DS    CL45                NAMES FROM BEFORE/AFTER/CNTL CARDS  X
                                     AND SHARE TYPES IF /*CNTL
UBRDNAML EQU   9                   LENGTH OF EACH NAME/SHARE TYPE FIELD
*
UBRUFLAG DS    BL1                 MISC JECL CARDS FLAGS
UBRINFRM EQU   B'10000000'           /*JOBPARM INFORM AFTER EXECUTION
*
*
UBRMFLAG DS    BL1                 RESOURCE FLAGS
UBRAFT   EQU   B'00000001'           /*AFTER  SPECIFIED
UBRBEF   EQU   B'00000010'           /*BEFORE SPECIFIED
UBRCNTL  EQU   B'00000100'           /*CNTL   SPECIFIED
UBRWITHF EQU   B'00001000'           /*WITH   SPECIFIED
*              B'11110000'           # OF /*CNTL NAMES PRESENT
*
UBRNCTL  EQU   X'08'               MAX # OF NAMES INCLUDING
*                                    /*AFTER, /*BEFORE, AND  /*CNTL
*
*
UBRDLAYS DS    BL1                 DELAY REASONS FROM OUR EXIT 49.  .
UBRDLWIT EQU   B'01000000'  X'40'    /*WITH CONTENTION DELAY
UBRDLRES EQU   B'00100000'  X'20'    /*RESOURCE CONTENTION (OBSOLETE)
UBRDLRR  EQU   B'00010000'  X'10'    RESOURCE ROUTING CNTN (OBSOLETE)
UBRDLDUP EQU   B'00001000'  X'08'    HOLD/DUP   CONTENTION
UBRDLAFT EQU   B'00000100'  X'04'    /*AFTER    CONTENTION
UBRDLBEF EQU   B'00000010'  X'02'    /*BEFORE   CONTENTION
UBRDLCTL EQU   B'00000001'  X'01'    /*CNTL     CONTENTION
*
STQNAMELN EQU  *-STQNAME           LENGTH OF THE BERTIE
*
         MEND
++MAC($USERCBS) SYSLIB(SHASMAC) DISTLIB(AHASMAC).
         MACRO -- $USERCBS -- EXPAND ALL USER CONTROL BLOCKS
&LABEL   $USERCBS ,
.*
.**********************************************************************
.*
.* FUNCTION: GENERATE ALL SUNTRUST MAPPING MACROS FOR JES2.
.*
.* NOTES:    THIS MACRO IS REQUIRED FOR ALL SUNTRUST JES2 EXIT MODULES
.*           ALL USER MAPPING MACROS SHOULD BE EXPANDED HERE.
.*
.* REVISION HISTORY:
.*
.*   DATE   NAME         DESCRIPTION OF CHANGE
.* -------- ------------ ----------------------------------------------
.*
.**********************************************************************
.*
.*
.*
         TITLE '$STJCTX -- USER EXTENSION TO THE JCT (OS/390 2.10)'
         $STJCTX ,
.*
         TITLE '$STQNAME -- USER EXTENSION TO THE JQE (OS/390 2.10)'
         $STQNAME ,
.*
         MEND
++JCLIN.
//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSIN    DD   *
//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,
//            DCB=BUFNO=1
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=&&OBJSET(STJTABS),UNIT=SYSDA,
//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)
//SYSLIN   DD   DSN=&&OBJ,
//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),
//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)
//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//         COND=(8,LT,STEPASM)
//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK
//SYSLIN   DD   *
 INCLUDE SYSPUNCH(STJTABS)
 NAME STJTABS(R)
/*
++SRC(STJTABS) SYSLIB(SHASSRC) DISTLIB(AHASSRC).
STJTABS  TITLE 'INSTALLATION DEFINED TABLES FOR JES2'
 PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1) '
*
* MODULE NAME:  STJTABS
*
*
* FUNCTION:     THIS MODULE CONTAINS THE USER TABLES REFERENCED IN
*               THE JES2 HASPTABS MODULE.  IT ALSO CONTAINS ANY
*               PRE- OR POST SCAN EXITS CALLED FOR BY THESE
*               TABLE ENTRIES.
*
*               TABLES AND FUNCTIONS ADDED:
*
*                 MAIN PARAMETER TABLE:
*
*                 BERT TABLE FOR OUR EXTENSION TO THE JQE:
*
*                 - STQNAME  - ALL OUR JQE EXTENSION.
*
*                 JQE TABLE:
*
*                 - BERAFTCT - PSEUDO FIELD TO DISPLAY THE VALUES
*                              FOR A JOB'S /*BEFORE, /*AFTER, AND/OR
*                              /*CNTL CARDS WITH A PRE-SCAN EXIT.
*
*
* ENTRY POINTS: PARMSCAN -- INSTALLATION'S MAIN PARAMETER
*                           $SCAN TABLE
*
*               USERJQE  -- INSTALLATION'S JQE SUB-SCAN
*                           $SCAN TABLE
*
*               USERBERT -- INSTALLATION'S BERT TABLE.
*
*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE
*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS
*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED
*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF
*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE
*  USEFULLNESS OF THE MATERIAL.
*
*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,
*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE
*  IN THE FUTURE.
*
*    SPECIAL THANKS GO TO BOB BREAK OF ST. LOUIS FOR THE ORIGINAL CODE
*  TO PARSE THE "/*ROUTE XEQ RESNAME" CARDS AND SET THE APPROPRIATE
*  EXECUTION ENVIRONMENT.
*
*    SPECIAL THANKS TO JUDY RUNT OF WISCONSIN ELECTRIC FOR THE ORIGINAL
*  CODE TO HANDLE THE "/*CNTL BEFORE|AFTER|WITH,RESNAME" AND "/*CNTL
*  RESNAME,EXC|SHR" ROUTINES.  THE USE OF THE BLOCK EXTENSION REUSABLE
*  TABLES, BERT'S, TO EXTEND THE JCT AND JQE.
*
* REVISION HISTORY:
*
*   DATE   NAME        DESCRIPTION OF CHANGES
* -------- ----------- ------------------------------------------------
         SPACE 3
         COPY  $HASPGBL            INCLUDE JES GLOBAL VALUES
         PRINT ON                  RESTORE FULL PRINTING
         EJECT
STJTABS $MODULE TITLE='SUNTRUST USER TABLES MODULE',                   X
               RMODE=ANY,                                              X
               ENVIRON=JES2,                                           X
               MLTE,                                                   X
               RESPA,              JES FSI RESPA DSECT                 X
               RPL,                MVS ACB REQUEST BLOCK DSECT         X
               $BERT,              ($BERT)                             X
               $BERTTAB,           ($BERT)                             X
               $BUFFER,            HASP SPOOL BUFFER DSECT             X
               $CAT,               HASP CLASS ATTRIBUTE TABLE DSECT    X
               $CATBERT,           ($DOGBERT)                          X
               $CADDR,             JES2 COMMON STORAGE ADDRESS TABLE   X
               $CMB,                                                   X
               $COMWORK,           HASP COMM PCE WORK AREA DSECT       X
               $DCT,                                                   X
               $HASPEQU,           HASP EQUATES                        X
               $HCCT,              HASP HCCT DSECT                     X
               $HCT,               HASP CONTROL TABLE DSECT            X
               $HFAME,             HASP HFAME DSECT                    X
               $JCT,               HASP JOB CONTROL TABLE DSECT        X
               $JCTX,              HASP JOB CONTROL TABLE EXTENSION    X
               $JOE,               HASP JOB OUTPUT ELEMENT DSECT       X
               $JQE,               HASP JOB QUEUE ELEMENT DSECT        X
               $MCT,                                                   X
               $MIT,               HASP MIT DSECT                      X
               $MITETBL,                                               X
               $MODMAP,            HASP MODULE MAP DSECT               X
               $PADDR,             HASP PADDR DSECT                    X
               $PARMLST,                                               X
               $PCE,               HASP PROCESSOR CONTROL ENTRY DSECT  X
               $PCETAB,            HASP PCE TABLE DSECT                X
               $PSV,                                                   X
               $QSE,                                                   X
               $RDRWORK,                                               X
               $SAFINFO,                                               X
               $SCAT,              HASP SCAT DSECT                     X
               $SCANTAB,           HASP SCAN TABLE DSECT               X
               $SCANWA,            HASP $SCAN WORK AREA DSECT          X
               $USERCBS,           USER MAPPING MACROS                 X
               $XECB               HASP XECB DSECT
         TITLE 'USER TABLE MODULE -- USER MAIN PARAMETER STATEMENT $SCAX
               N TABLE'
         TITLE 'USER TABLE MODULE -- USERJQE SUB-SCAN TABLE'
**********************************************************************
*
*   THIS IS THE $SCAN TABLE FOR CONTROLLING SCANNING OF THE PARMS FOR
*    JQES.
*   WE USE IT TO ADD OUR STATEMENTS FOR:
*
*     BEFAFTCT - DISPLAY ONLY OF BEFORE/AFTER/CNTL CARD INFORMATION.
*
**********************************************************************
USERJQE  $SCANTAB  TABLE=(DYNAMIC,MCTJQETP)
         SPACE 3
        $SCANTAB NAME=BEFAFTCT,    BEFORE/AFTER/CNTL INFORMATION       X
               CB=PARENT,                                              X
               DSECT=JQE,                                              X
               FILTER=NO,          CAN NOT BE A FILTER                 X
               CALLERS=($SCDCMDS), DISPLAY COMMANDS                    X
               PRESCAN=(QBACDISP,DISPLAY)  DISPLAY PRESCAN EXIT
         SPACE 3
         $SCANTAB  TABLE=END       DEFINE END OF USER TABLE
         TITLE 'USER TABLE MODULE -- DYNAMIC BERT TABLE'
**********************************************************************
*
*   THIS IS THE $BERTTAB TABLE TO DEFINE OUR STQNAME ENTRY IN THE JQA.
*   REFER TO THE $STQNAME MACRO FOR DETAILS.
*
**********************************************************************
USERBERT $BERTTAB  TABLE=(DYNAMIC) START OF DYNAMIC TABLE
         SPACE 3
        $BERTTAB CBTYPE=JQE,       CONTROL BLOCK TYPE                  X
               NAME=STQNAME,       ID OF OUR BERTIE                    X
               CBOFF=*,            GENERATE OFFSET DYNAMICALLY         X
               LEN=STQNAMELN,      LENGTH OF OUR BERTIE                X
               FILL=C' '           FILL CHARACTER
         SPACE 3
         $BERTTAB  TABLE=END       DEFINE END OF USER TABLE
         TITLE 'USER TABLE MODULE -- $SCAN PRE-SCAN DISPLAY EXIT ROUTINX
               E FOR JQA BEFORE/AFTER/CNTL INFORMATION'
**********************************************************************
*
*   $SCAN FACILITY PRE-SCAN EXIT TO DISPLAY THE SCHEDULING INFORMATION
*   FROM THE /*BEFORE, /*AFTER AND /*CNTL JECL CARDS FOR BATCH JOBS.
*
*   NOTE: THESE FIELDS ARE ONLY DISPLAYED FOR BATCH JOBS THAT ARE
*         EITHER AWAITING OR IN EXECUTION, SINCE THEY HAVE NO VALUE
*         FOR TSU OR STC JOBS AND HAVE NO PURPOSE POST EXECUTION.
*
**********************************************************************
         SPACE 2
         USING STAB,R8             DEFINE BASE REGISTER
         USING SCWA,R10            DEFINE BASE REGISTER
         USING HCT,R11             DEFINE BASE REGISTER
         USING QBACDISP,R12        DEFINE BASE REGISTER
         USING PCE,R13             DEFINE BASE REGISTER
*
QBACDISP $SAVE ,                   GET SAVE AREA AND SAVE REGS
*
         LR    R12,R15             GET ROUTINE'S BASE ADDRESS
         LR    R10,R1              GET ADDRESS OF SCWA
         L     R8,SCWASTAB         GET ADDRESS OF STAB
         L     R7,SCWACBAD         GET ADDRESS OF OUR CB (JQE)
         USING JQE,R7
*
         LA    R4,8                PRESET RETURN CODE -- ALL DONE
         TM    JQEFLAG3,JQE3JOB    CHECK IF THIS IS A BATCH JOB
         BNZ   QBACRET             TSU OR STC -- EXIT, NO JQA TO FREE
         TM    JQETYPE,$XEQ        CHECK IF JOB IS WAITING/IN EXEC
         BZ    QBACRET             NO -- EXIT, NO JQA TO FREE
*
         $DOGJQE ACTION=(FETCH,READ),    GET A READ-ONLY MODE JQA      X
               JQE=(R7),                                               X
               ERRET=QBACBDJQ
*
         LR    R7,R0               GET THE ADDR OF OUR JQA
         USING JQA,R7              DEFINE BASE REGISTER
*
         $DOGBERT ACTION=GETOFFSET,    GET THE OFFSET                  X
               CBTYPE=JQE,                IN THE JQA                   X
               NAME=STQNAME,                 OF OUR BERT               X
               ERRET=QBACBDBR
*
         LA    R6,0(R1,R7)         GET ADDRESS OF OUR BERT
         USING STQNAME,R6
*
* SET UP AND DISPLAY THE VALUE OF THE UDCTUCS FIELD
*
         TM    UBRMFLAG,UBRAFT     DID JOB SPECIFY AN /*AFTER NAME?
         BZ    QBACBEF             NO -- CHECK FOR BEFORE NAME
         LA    R5,UBRAFTR          GET ADDR OF OUR NAMES FIELD
         LA    R2,8                GET LENGTH OF OUR FIELD
        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT='AFTER=',BRKOPT=YES,CONV=CHAR,           X
               DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR
*
QBACBEF  DS    0H
         TM    UBRMFLAG,UBRBEF     DID JOB SPECIFY A /*BEFORE NAME?
         BZ    QBACWITH            NO -- CHECK FOR WITH NAME(S)
         LA    R2,8                GET LENGTH OF OUR FIELD
         LA    R5,UBRBFOR          POINT TO OUR NAME FIELD
        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT='BEFORE=',BRKOPT=YES,CONV=CHAR,          X
               DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR
         LA    R5,UBRDNAML(,R5)    POINT TO NEXT NAME
*
QBACWITH DS    0H
         TM    UBRMFLAG,UBRWITHF   DID JOB SPECIFY A /*WITH NAME ?
         BZ    QBACCNTL            NO -- CHECK FOR CNTL NAME(S)
         LA    R2,8                GET LENGTH OF OUR FIELD
         LA    R3,UBRWITH          GET ADDRESS OF FIELD
        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT='WITH=',BRKOPT=YES,CONV=CHAR,            X
               DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT=(R3),LENGTH=(R2),BRKOPT=NO,CONV=CHAR
*
QBACCNTL DS    0H
         TM    UBRMFLAG,UBRCNTL    DID JOB SPECIFY A /*CNTL NAME?
         BZ    QBACRC08            NO -- RETURN TO CALLER
         LA    R5,UBRDNAME         POINT TO NAME FIELD
         SLR   R3,R3               ZERO R3 FOR IC
         IC    R3,UBRMFLAG         GET CNTL COUNTS AND FLAGS
         SRL   R3,4                SHIFT OUT THE FLAG BITS
         LTR   R3,R3               VERIFY WE HAVE AT LEAST ONE CNTL
         BZ    QBACRC08            ZERO -- RETURN TO CALLER
*
        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT='CNTL=(',BRKOPT=YES,CONV=CHAR,           X
               DEBLANK=NO
         B     QBACCTSK            SKIP COMMA BEFORE FIRST NAME
*
QBACCTLP DS    0H
        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO
QBACCTSK DS    0H
         LA    R2,8                GET LENGTH OF OUR FIELD
        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR
        $SCAND SCWA=SCWA,TEXT='-',BRKOPT=NO,CONV=CHAR,DEBLANK=NO
         LA    R2,1                GET LENGTH OF OUR FIELD
         LA    R4,8(,R5)           GET ADDR OF SHARE TYPE
        $SCAND SCWA=SCWA,TEXT=(R4),LENGTH=(R2),BRKOPT=NO,CONV=CHAR,    X
               DEBLANK=NO
*
         LA    R5,UBRDNAML(,R5)    POINT TO NEXT NAME
         BCT   R3,QBACCTLP         LOOP THROUGH ALL NAMES
*
        $SCAND SCWA=SCWA,TEXT=')',BRKOPT=NO,CONV=CHAR,DEBLANK=NO
*
*
QBACRC08 DS    0H                  "NORMAL" RETURN FROM PRE-SCAN EXIT
*
         LA    R4,8                SET ALL DONE RETURN CODE
*
QBACRJQA DS    0H
         $DOGJQE ACTION=(RETURN),  RETURN THE READ MODE JQA            X
               CBADDR=(R7)
*
QBACRET  DS    0H
         $RETURN RC=(R4)           RETURN TO CALLER
*
*
QBACBDJQ DS    0H                  NO JQE AVAILABLE
         LA    R1,QBACBDJM         GET ERROR MSG HEADER ADDRESS
         $STORE R1                 SAVE ERROR MSG IN CURRENT SAVE AREA
         LA    R4,4                SET ERROR MSG RETURN CODE
         B     QBACRET             EXIT BUT DON'T RETURN THE JQA
*
QBACBDJM DC    CL2'99'             REASON CODE
         DC    AL1(L'QBACBDJT)     MESSAGE LENGTH
QBACBDJT DC    C'QBACDISP: JQE/JQA NOT AVAILABLE OR INVALID.'
*
*
QBACBDBR DS    0H                  ERROR GETTING THE BERT
         LA    R1,QBACBDBM         GET ERROR MSG HEADER ADDRESS
         $STORE R1                 SAVE ERROR MSG IN CURRENT SAVE AREA
         LA    R4,4                SET ERROR MSG RETURN CODE
         B     QBACRJQA            GO RETURN THE JQA
*
QBACBDBM DC    CL2'99'             REASON CODE
         DC    AL1(L'QBACBDBT)     MESSAGE LENGTH
QBACBDBT DC    C'QBACDISP: ERROR RETURNED LOCATING STQNAME.'
*
         LTORG ,
*
         DROP  R6,R7,R8,R10,R11,R12,R13
         TITLE 'USER TABLE MODULE -- EPILOG'
         $MODEND ,
         SPACE 2
         END   ,                   END OF MODULE
./ ADD NAME=LSES500J 0411-00234-05314-1426-00024-00018-00007-T0SM0
//T0SM500J JOB  (4030,37),'REDO----LSES500',CLASS=X,MSGCLASS=A,
//  REGION=6M,
//    NOTIFY=&SYSUID
//*
//*%PDSDOC 00 SMP APPLY LSES500
//S1       EXEC PGM=GIMSMP,REGION=5M,
//         PARM='PROCESS=WAIT',
//         DYNAMNBR=120
//*
//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI <== UPDATE TO YOUR CSI
//SMPHOLD  DD DUMMY
//SMPRPT   DD  SYSOUT=*
//SMPOUT   DD  SYSOUT=*
//SMPLIST  DD  SYSOUT=*
//*
//SMPPTFIN DD DISP=SHR,DSN=THIS.DATA.SET.NAME(LSES500) <==UPDATE
//SMPCNTL  DD *
  SET BDY(GLOBAL) .
  REJECT  S(LSES500) BYPASS(APPLYCHECK).
  RESETRC .
  RECEIVE S(LSES500) SOURCEID(MELLON) .
  SET BDY(TARGET).                         <=== UPDATE TO YOUR TGT
  APPLY   S(LSES500) REDO.
//
./ ADD NAME=LSES502  0203-00234-03317-2217-02583-02591-00005-T0SM1
++USERMOD(LSES502)
 /* ***************************************************************
    ** * USER EXIT 1 A                                         * **
    ***************************************************************
    */ .
++VER(Z038) FMID(HJE7707) .
++JCLIN.
//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSIN    DD   *
//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,
//            DCB=BUFNO=1
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=&&OBJSET(STSCX01A),UNIT=SYSDA,
//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)
//SYSLIN   DD   DSN=&&OBJ,
//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),
//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)
//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//         COND=(8,LT,STEPASM)
//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK
//SYSLIN   DD   *
 INCLUDE SYSPUNCH(STSCX01A)
 NAME STSCX01A(R)
/*
++SRC(STSCX01A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).
 PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1,REUS=REFR) '
STSCX01A TITLE 'PRINT/PUNCH SEPARATOR EXIT -- PROLOG'          @430P270
**********************************************************************
** *  I DON'T THINK ANY PRINTER ACTUALLY USE THIS EXIT ANYMORE,   * **
** * BUT SINCE WE USED TO ALTER THE HASPPRPR SEPERATOR PAGE       * **
** * ROUTINES DIRECTLY, I AM ADDING THIS EXIT TO SIMULATE THE     * **
** * SINGLE CHANGE WHICH IS TO CHANGE THE LITERAL OF THE ROOM     * **
** * NUMBER TO BIN NUMBER.         SGM 08-08-00                   * **
**********************************************************************
* **PROPRIETARY-STATEMENT**********************************************
*                                                                     *
*   LICENSED MATERIALS-PROPERTY OF IBM                                *
*   THIS MODULE IS "RESTRICTED MATERIALS OF IBM"                      *
*   5645-001 (C) COPYRIGHT IBM CORP 1990, 1997                        *
*                                                                     *
*   STATUS = HJE6603                                                  *
*                                                                     *
*01* EXTERNAL CLASSIFICATION:  NONE                            @R01P003
*01* END OF EXTERNAL CLASSIFICATION:                           @R01P003
*                                                                     *
* **END-OF-PROPRIETARY-STATEMENT***************************************
***********************************************************************
*                                                                     *
* MODULE NAME = STSCX01A (STSCX01A LOAD MODULE)                       *
*                                                                     *
* DESCRIPTIVE NAME = EXIT 1                                           *
*                                                                     *
*                    PRINT/PUNCH Separator                            *
*                                                                     *
* FUNCTION =                                                          *
*                                                                     *
*        STSCX01A IS A SAMPLE EXIT ROUTINE THAT PRODUCES A            *
*        job separator page ( see sample separator page               *
*        below ).                                                     *
*                                                                     *
*        The separator page produced by this exit is                  *
*        identical to the default separator page ( produced           *
*        in HASPPRPU ) with the exception of the detail box           *
*        information field labels.  This sample exit produces         *
*        detail box information field labels that are delimited       *
*        by an '=' sign as opposed to a ':' ( on the default          *
*        separator page ).                                            *
*                                                                     *
*        An installation could use this sample exit to                *
*        customize the appearance of a job separator page.            *
*                                                                     *
*        Exit 1 is called by HASPPRPU during print/punch              *
*        processing.  It is called for job header and job             *
*        trailer separators.                                          *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*             JJJJJJJJJJ  OOOOOOOOOOOO  BBBBBBBBBBB     00000000      *
*            JJJJJJJJJJ  OOOOOOOOOOOO  BBBBBBBBBBBB   0000000000      *
*               JJ      OO        OO  BB        BB  00      0000      *
*              JJ      OO        OO  BB        BB  00     00 00       *
*             JJ      OO        OO  BB       BB   00    00  00        *
*            JJ      OO        OO  BBBBBBBBBB    00   00   00       1 *
*           JJ      OO        OO  BBBBBBBBBB    00  00    00       11 *
*          JJ      OO        OO  BB       BB   00 00     00       11  *
*   JJ    JJ      OO        OO  BB        BB  0000      00       11   *
*  JJ    JJ      OO        OO  BB        BB  000       00       11    *
* JJJJJJJJ      OOOOOOOOOOOO  BBBBBBBBBBBB   0000000000    1111111111 *
* JJJJJJ       OOOOOOOOOOOO  BBBBBBBBBBB     00000000     1111111111  *
*                                                                     *
*     JJJJJJJJJJ   000000000        1       1       1       1         *
*     JJJJJJJJJJ  00000000000      11      11      11      11         *
*         JJ      00      000     111     111     111     111         *
*         JJ      00     0000    1111    1111    1111    1111         *
*         JJ      00    00 00   11111   11111   11111   11111         *
*         JJ      00   00  00      11      11      11      11         *
*         JJ      00  00   00      11      11      11      11         *
*         JJ      00 00    00      11      11      11      11         *
*     JJ  JJ      0000     00      11      11      11      11         *
*     JJ  JJ      000      00      11      11      11      11         *
*     JJJJJJ      00000000000      11      11      11      11         *
*     JJJJJJ       000000000       11      11      11      11         *
*                                                                     *
* ***START*****START*****START*****START*****START*****START****STA** *
* *                                                                 * *
* * JOBID=          J0111                        SEGMENT ID: 0021   * *
* * JOB NAME=       JOB01                                           * *
* * USER ID=        JSMITH                                          * *
* * SYSOUT CLASS=   A                                               * *
* * OUTPUT GROUP=   GRP01.CLASSA.D3289                              * *
* * TITLE=          Smitty Corporation Checking Account History     * *
* *                                                                 * *
* * DESTINATION=    NEW YORK                                        * *
* * NAME=           Joseph P. Smith                                 * *
* * ROOM=           2G-54                                           * *
* * BUILDING=       Smitty Textile Building                         * *
* * DEPARTMENT=     Accounting                                      * *
* * ADDRESS=        999 W. 99th Street                              * *
* *                 New York, New York                              * *
* *                 10000                                           * *
* *                 212-555-3487                                    * *
* *                                                                 * *
* * PRINT TIME=     12:03:41                                        * *
* * PRINT DATE=     10 JAN 1998                                @OW26885
* * PRINTER NAME=   PRINTER1                                        * *
* * SYSTEM=         SYSA                                            * *
* *                                                                 * *
* ***START*****START*****START*****START*****START*****START****STA** *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
* NOTES =                                                             *
*                                                                     *
*    DEPENDENCIES = JES2 $EXIT Facility, Standard JES2 services,      *
*                   SWBTUREQ services                                 *
*                                                                     *
*    RESTRICTIONS = This code is provided as an example of            *
*                   installation extensions to JES2.  This code       *
*                   is not considered TYPE 1 supported code of IBM.   *
*                   Any problems encountered in the use of this       *
*                   sample code is a user responsibility.  The        *
*                   IBM support center does not support user          *
*                   extensions of sample user exits.                  *
*                                                                     *
* MODULE TYPE = Procedure ( CSECT type )                              *
*                                                                     *
*    PROCESSOR = IBM High Level Assembler/MVS                  @520LHLA
*                                                                     *
*    MODULE SIZE = See $MODEND macro expansion at end of assembly     *
*                                                                     *
*    ATTRIBUTES = JES2 REENTRANT, RMODE ANY, AMODE 31                 *
*                                                                     *
*                                                                     *
* ENTRY POINTS =                                                      *
*                                                                     *
*        EXIT01A   -  Produce our own separator page.  Suppress       *
*                     the production of the default separator         *
*                     page.                                           *
*                                                                     *
*                     Suppress the production of JESNEWS if this      *
*                     exit has been called for a job-continuation     *
*                     separator page.                                 *
*                                                                     *
* MACROS = JES2 - $CALL, $DEST, $ENTRY, $ESTAE, $GETWORK, $MODEND,    *
*                 $MODULE, $PBLOCK, $PRPUT, $RETURN, $RETWORK, $SAVE, *
*                 $SEPPDIR, $SETRP, $STORE                            *
*                                                                     *
* MACROS = MVS  - SWBTUREQ, TIME                                      *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
*        @410  MVS/SP-JES2 VERSION 4 RELEASE 1 LEVEL 0                *
*              (SP4.1.0, HJE4410)                                     *
*                                                                     *
* $420P306=PTM      HJE4420 910118 R_W1: Sample Exit Prolog Problems  *
*                                                                     *
* $430P050=10X      HJE4430 920310 RJH:  ENHANCE STSCX01A(USER EXIT1) *
* $430P329=10X      HJE4430 920429 B_R2: PMX0329: Sample Exit 1       *
* $430P270=10X      HJE4430 920721 HGF:  $MODULE, ENVIRON, RMODE      *
* $510P214=PTM      HJE5510 930810 KCK:  EXIT1 SEPPDIR/$DEST UPDATES  *
*                                                                     *
* $520LHLA=BASEQ    HJE5520 941008 GMD:  Change HASM to HLASM         *
*                                                                     *
* $R01P010=PTM      HJE6601 950217 JMO:  PTM PQJ0012                  *
*                                                                     *
* $R03P010=ENHPSO   HJE6603 960521 J_K2: Segment ID for trailer page  *
*                                                                     *
* A000000-999999    CREATED FOR JES2 4.1.0                         @410
***********************************************************************
         TITLE 'PRINT/PUNCH Separator Exit -- PROLOG ($HASPGBL)'
         COPY  $HASPGBL
         TITLE 'PRINT/PUNCH Separator Exit -- PROLOG ($MODULE)'
STSCX01A $MODULE ENVIRON=JES2,                                 @430P270C
               RMODE=ANY,                                      @430P270C
               IBMJES2=SAMPLE,                                 @430P270C
               TITLE='PRINT/PUNCH Separator Exit',                     C
               CVT,                Generate MVS CVT dsect              C
               DOTUM,              IEFDOTUM-Dyn. OUTPUT text unit map'gC
               JESCT,              Generate MVS IEFJESCT dsect         C
               RPL,                MVS IFGRPL dsect (for $BUFFER)      C
               SJOKY,              IEFSJOKY-Dynamic OUTPUT key mapping C
               SJTRC,              IEFSJTRC-SWBTUREQ return/reason codeC
               (SJTRP,GEN),        IEFSJTRP-SWBTUREQ RETRIEVE parm listC
               $BUFFER,            Buffer mapping (for $JCT)           C
               $CADDR,             Common storage address list         C
               $DCT,               Device Control Table                C
               $DSCT,              DSCT (for APPC Output)      @430P329C
               $ERA,               Error Recovery Area                 C
               $HASPEQU,           General EQUATES                     C
               $HCCT,              Common storage control table        C
               $HCT,               Private storage control table       C
               $HFAME,             File alloacation map (for $HCCT)    C
               $JCT,               Job Control Table                   C
               $JCTX,              JOB CONTROL TABLE                   C
               $JOE,               Job Output Element                  C
               $MIT,               Module information table            C
               $MITETBL,           MIT entry table                     C
               $PADDR,             Private storage address list        C
               $PARMLST,           Parameter list values/equates       C
               $PCE,               Processor control element           C
               $PDDB,              Peripheral data definition block    C
               $PRE,               Processor Recovery Element          C
               $PSV,               Processor save area                 C
               $SCAT,              Sysout class attribute (for $HCCT)  C
               $USERCBS,           User defined Control Blocks         C
               $XECB,              Extended ECB (for $HCCT)            C
               ($XPL,GEN)          Exit parameter list         @430P270
         TITLE 'PRINT/PUNCH Separator Exit -- Entry Prolog'
***********************************************************************
*                                                                     *
*        EXIT01A - Produce a separator page.   Suppress production    *
*                   of the default separator page.                    *
*                   Suppress JESNEWS for job-continuation calls.      *
*                                                                     *
* FUNCTION :                                                          *
*                                                                     *
*        Produces a separator page that is almost identical           *
*        to the default separator page produced in HASPPRPU           *
*        ( see beginning prolog for explanation of the                *
*        difference between the default separator and that            *
*        produced in this exit ).                                     *
*                                                                     *
*        During a job continuation separator page call, the exit      *
*        response byte is set to indicate to HASPPRPU that JESNEWS    *
*        should not be produced.                                      *
*                                                                     *
* LINKAGE :                                                           *
*                                                                     *
*        This routine is entered via a $EXIT call in HASPPRPU.        *
*        Control is returned via a $RETURN.                           *
*                                                                     *
* OPERATION :                                                         *
*                                                                     *
*        LOADMOD(STSCX01A)                                     @420P306
*        EXIT(1)  ROUTINES=(EXIT01A),STATUS=ENABLED            @420P306
*                                                                     *
*                                                                     *
* ENVIRONMENT :                                                       *
*                                                                     *
*        JES2 main task                                               *
*                                                                     *
* RECOVERY :                                                          *
*                                                                     *
*        A $ESTAE recovery environment is establish on entry to       *
*        the exit routine.  The recovery routine releases all         *
*        storage obtained in the exit and then percolates to          *
*        the next higher level of recovery in HASPPRPU.               *
*                                                                     *
*        Debugging text is put in field PRETRACK in the Processor     *
*        Recovery Element (PRE).  The contents of this field          *
*        are put in the SDWA VRA ( variable recording area ).         *
*                                                                     *
*        HASPPRPU establishes an ESTAE around the call to this        *
*        exit.  In the event of a program check, control will         *
*        be passed to the label PGMCKMSG in HASPPRPU when that        *
*        level of recovery is invoked.                                *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
* REGISTER USAGE (ENTRY/EXIT) :                                       *
*                                                                     *
*    REG         VALUE ON ENTRY              VALUE ON EXIT            *
*                                                                     *
*    R0          N/A                         unchanged                *
*    R1          Parameter list address      unchanged                *
*    R2-R10      N/A                         unchanged                *
*    R11         HCT Address                 unchanged                *
*    R12         N/A                         unchanged                *
*    R13         PCE Address                 unchanged                *
*    R14         Return address              unchanged                *
*    R15         Entry address               Return code              *
*                                                                     *
***********************************************************************
         SPACE 2
***********************************************************************
*                                                                     *
*            PARAMETER LIST FOR EXIT 1  ( Mapped by $XPL )            *
*                                                                     *
*                                                                     *
*    LABEL         DESCRIPTION                                        *
*    -----         -----------                                        *
*                                                                     *
*    XPLID         Eyecatcher ('$XPL')                                *
*    XPLLEVEL      Maintenance Level                                  *
*    XPLXITID      Exit ID number (1)                                 *
*    XPLEXLEV      Version number                                     *
*    X001IND       Indicator byte                              @R01P010
*    X001COND      Condition byte                              @R01P010
*    X001RESP      Response byte                               @R01P010
*    XPLSIZE       Length of parameter list including base section    *
*                                                                     *
*    X001DCT       DCT address                                        *
*    X001JCT       JCT address                                        *
*    X001JQE       JQE address                                        *
*    X001WJOE      Work-JOE address                                   *
*    X001CJOE      Characteristics-JOE address                        *
*    X001PDDB      Address of first PDDB of JOE, or zero              *
*    X001SWBT      SWBTU pointer list address for the first           *
*                  PDDB in the JOE, or zero                           *
*    X001NSWB      Number of SWBITs despooled                         *
*    X001RSVD      Reserved for future use                            *
*    X001HBUF      Address of HASP buffer for exit use                *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
* REGISTER USAGE (INTERNAL) :                                         *
*                                                                     *
*    REG        VALUE                                                 *
*                                                                     *
*    R0         N/A                                                   *
*    R1         Work register                                         *
*    R2-R4      N/A                                                   *
*    R5         Exit 1 work area address                              *
*    R6         N/A                                                   *
*    R7         Exit 1 parameter list address                         *
*    R8         N/A                                                   *
*    R9-R10     N/A                                                   *
*    R11        HCT address                                           *
*    R12        Local base address                                    *
*    R13        PCE address                                           *
*    R14-R15    Link/Work registers                                   *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
* DATA AREA USAGE (INTERNAL) :                                        *
*                                                                     *
*    NAME          VALUE/DESCRIPTION                                  *
*    ----          -----------------                                  *
*                                                                     *
*    EX1WORK       Exit 1 work area                                   *
*    SEPDSECT      Separator page detail box DSECT                    *
*    PAGELINE      Separator page output line                         *
*                                                                     *
*    X001IND       Indicator byte in XPL (exit parameter list) @R01P010
*      X001JHDR       Indicator in X001IND for a job header    @R01P010
*                     separator call                                  *
*      X001JTLR       Indicator in X001IND for a job trailer   @R01P010
*                     separator call                                  *
*      X001JCNT       Indicator in X001IND for a               @R01P010
*                     job-continuation separator call          @R01P010
*    X001RESP       Response byte in XPL                       @R01P010
*      X001DFSP       Indicator in X001RESP to suppress        @R01P010
*                     production of the default separator page @R01P010
*      X001JNWS       Indicator in X001RESP to suppress        @R01P010
*                     production of JESNEWS                    @R01P010
*                                                                     *
*    $BUFFER       HASP buffer DSECT                                  *
*      BUFDSECT       Start of buffer prefix area                     *
*      BUFSTART       Start of buffer work area                       *
*    $SID          System id                                          *
*    DCTDEVN       Device name                                        *
*    JCTJNAME      Job name from job card                             *
*    JCTJOBID      System assigned job id                             *
*    JCTPNAME      Programmer name from JOB card                      *
*    JCTROOMN      Room, from JOB card                                *
*    JOECRUID      Creator userid for data set                        *
*    JOECURCL      JOE current SYSOUT class                           *
*    JOENAME       JOE's output group name                            *
*    JOEROUT       Route code                                         *
*    JOEUSER       User id                                            *
*                                                                     *
*    DOADDRES      Dynamic output ADDRESS    key                      *
*    DOBUILD       Dynamic output BUILDING   key                      *
*    DODEPT        Dynamic output DEPARTMENT key                      *
*    DONAME        Dynamic output NAME       key                      *
*    DOROOM        Dynamic output ROOM       key                      *
*    DOTITLE       Dynamic output TITLE      key                      *
*                                                                     *
*    DOCNUNIT      Text unit  ( TU ) mapping                          *
*    DOCNTFLD      TU length/parameter pairs mapping                  *
*    SJTRP         SWBTUREQ RETRIEVE parameter list                   *
*                                                                     *
*    PCEUSER0      Address of storage obtained for exit work area     *
*    PCEUSER1      Count of number of times that 2nd level recovery   *
*                  has been entered                                   *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
* RETURN CODES ( R15 ON EXIT ):                                       *
*                                                                     *
*        0 - Continue normal processing                               *
*                                                                     *
*                                                                     *
* OTHER CONSIDERATIONS :                                              *
*                                                                     *
*        $WAIT can occur.                                             *
*                                                                     *
***********************************************************************
         TITLE 'PRINT/PUNCH Separator Exit -- Entry'
***********************************************************************
*                                                                     *
*        Entry point to routine EXIT01A.                              *
*                                                                     *
***********************************************************************
         SPACE 2
EXIT01A  $ENTRY BASE=R12           ESTABLISH ENTRY POINT
         SPACE 2
        $SAVE  TRACE=YES,NAME=EXIT01A      Save callers registers
         SPACE 2
         LR    R12,R15             Set local base
         SPACE 1
         LR    R7,R1               Establish addressability
         USING XPL,R7                  to exit parameter list
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        Establish an ESTAE recovery environment                      *
*                                                                     *
*        Put debugging data in Processor Recovery Element ( PRE )     *
*        - maximum 32 characters                                      *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
        $ESTAE RECADDR==A(EX1RECV),NAME=STSCX01A,RETRY=RELWORKA,       C
               BASE=(R12)          Establish ESTAE environment
         SPACE 2
         L     R14,PCEPRE          Get PRE address from PCE
         USING PRE,R14             Establish addressability
         SPACE 1
         MVC   PRETRACK(L'DEBUGMSG),DEBUGMSG     Put debug data in PRE
         SPACE 1
         MVI   PRELOGLN,L'DEBUGMSG     Put length of debug data in PRE
         SPACE 2
         DROP  R14                 Drop PRE addressability
         TITLE 'PRINT/PUNCH Separator Exit -- Main Routine'
*------------------------------------------------------------* @430P050
*                                                            * @430P050
*        If the SEP= parameter on the printer initial-       * @430P050
*        ization statement is currently set to NO, or the    * @430P050
*        suppress flag has been set by previous code,        * @430P050
*        do not build a separator page.                      * @430P050
*                                                            * @430P050
*------------------------------------------------------------* @430P050
         SPACE 2                                               @430P050
         TM    X001RESP,X001DFSP   Suppress Separators?        @R01P010
         BO    ENDMAIN             Yes, exit                   @430P050
         SPACE 2                                               @430P050
*---------------------------------------------------------------------*
*                                                                     *
*        If this is a job continuation call, set the exit             *
*        response byte to indicate that the production of             *
*        JESNEWS should be suppressed.                                *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
         TM    X001IND,X001JCNT    Job continuation call?      @R01P010
         BZ    NOTJCNT               No, go build the separator page
         SPACE 1
         OI    X001RESP,X001JNWS   Suppress JESNEWS            @R01P010
         SPACE 2
NOTJCNT  DS    0H                  Fall thru to build separator page
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        Storage must be obtained for a work area to be used          *
*        by the routine PRODSEP that produces the separator           *
*        page.                                                        *
*        The exit work area dsect ( EX1WORK ) is mapped over          *
*        this storage to store and extract the data used in the       *
*        PRODSEP routine.                                             *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*        Check if we have already obtained storage for the            *
*        exit work area ( as may be the case during a RETRY           *
*        after a program check in the exit ).  If so, reuse           *
*        it.  Otherwise issue a $GETWORK to get storage.  Save        *
*        the address in PCEUSER0.                                     *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
         ICM   R1,B'1111',PCEUSER0     Check if already got storage
         BZ    GETEX1W                   No storage, so go get some
         XC    PCEUSER0,PCEUSER0       Clear PCEUSER0 field
         SPACE 1
         CLC   0(4,R1),=C'EX1W'    Is this our work area storage ?
         BNE   GETEX1W               No, go get storage
         B     GOTEX1W               Yes, branch around GETWORK
         SPACE 2
GETEX1W  DS    0H                  Get storage for work area
         SPACE 1
         LA    R1,(((EX1WKLEN+3)/4)+1)   Get the length of the EX1WORK C
                                           DSECT + eyecatcher in words
         SPACE 1
        $GETWORK WORDS=(R1),USE=EX1W,ERRET=RELWORKA  Get storage for   C
                                               exit work area (EX1WORK)
         SPACE 1
GOTEX1W  DS    0H                  Got storage
         EJECT
         ST    R1,PCEUSER0         Save address in PCE user field
         LA    R5,4(,R1)           Add 4 for eyecatcher and save addr
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*        Call the PRODSEP routine to build and print a separator      *
*        page.  Suppress production of the default separator page     *
*        only if PRODSEP returns a return code of zero.               *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
        $CALL  PRODSEP             Call routine to produce separator
         SPACE 2
         LTR   R15,R15             Check return code from PRODSEP
         BNZ   RELWORKA            Bypass suppressing def. separator
         SPACE 1
         OI    X001RESP,X001DFSP   Suppress def separator      @R01P010
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        Release exit work area storage                               *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
RELWORKA DS    0H                      Release work area storage
         SPACE 1
         ICM   R1,B'1111',PCEUSER0     Load work area address
         BZ    ENDMAIN                 Return to caller if no storage
         XC    PCEUSER0,PCEUSER0       Clear PCEUSER0 field
         SPACE 1
         CLC   0(4,R1),=C'EX1W'    Is this storage ours?
         BNE   ENDMAIN               No, branch around RETWORK
         SPACE 1
        $RETWORK (R1)              Release work area storage
         SPACE 2
ENDMAIN  DS    0H                  End of routine EXIT01A
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        Cancel $ESTAE recovery environment                           *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
        $ESTAE CANCEL              Cancel ESTAE environment
         TITLE 'PRINT/PUNCH Separator Exit -- Return'
***********************************************************************
*                                                                     *
*        Return to the caller.                                        *
*                                                                     *
***********************************************************************
         SPACE 2
        $RETURN RC=0               Return to caller with RC=0
         SPACE 2
DEBUGMSG DC    C'ESTAE SET UP IN SAMPLE EXIT 1'    Debugging text
         SPACE 2
         LTORG ,                   Define literal origin
         SPACE 1
         DROP  R7,R12              Drop addressabilities
         TITLE 'PRODSEP  -- Produce a separator page detail box'
***********************************************************************
*                                                                     *
*        PRODSEP  - Produce a separator page detail box.              *
*                                                                     *
* FUNCTION :                                                          *
*                                                                     *
*        This subroutine produces a separator page detail box         *
*        that is identical to that on the default separator           *
*        page produced by HASPPRPU during print/punch processing.     *
*                                                                     *
*        The SWBTUREQ retrieve service is used to extract             *
*        requested values from an OUTPUT statement and return         *
*        them in a contiguous string.  The service is passed a        *
*        list of keys that identify the keywords ( TITLE, NAME,       *
*        ROOM, BUILDING, DEPARTMENT and ADDRESS ) whose values        *
*        are to be extracted.                                         *
*                                                                     *
*        Each value in the string is represented in text unit (TU)    *
*        format, which means that it is preceded by its key and       *
*        length.                                                      *
*                                                                     *
* LINKAGE :                                                           *
*                                                                     *
*      Accessed via $CALL                                             *
*      Returned via $RETURN                                           *
*                                                                     *
*                                                                     *
* REGISTER USAGE (ENTRY/EXIT) :                                       *
*                                                                     *
*    REG         VALUE ON ENTRY              VALUE ON EXIT            *
*                                                                     *
*    R0-R4       N/A                         unchanged                *
*    R5          Exit 1 work area address    unchanged                *
*    R6          N/A                         unchanged                *
*    R7          Parameter list address      unchanged                *
*    R8-R10      N/A                         unchanged                *
*    R11         HCT Address                 unchanged                *
*    R12         Local base address          unchanged                *
*    R13         PCE Address                 unchanged                *
*    R14         Return address              unchanged                *
*    R15         Entry address               Return code (see below)  *
*                                                                     *
*                                                                     *
* RETURN CODE ( R15 ON EXIT ):                                        *
*                                                                     *
*        0 - Processing successful;  Separator page produced          *
*                                                                     *
*        4 - Processing unsucccessful;  Separator page not produced   *
*                                                                     *
*                                                                     *
* OTHER CONSIDERATIONS :                                              *
*                                                                     *
*        None                                                         *
*                                                                     *
***********************************************************************
         SPACE 2
         USING PRODSEP,R12         Establish routine addressability
         USING XPL,R7              Establish XPL addressability
         USING EX1WORK,R5          Establish work area addressability
         EJECT
         SPACE 2
PRODSEP $SAVE  ,                   Save the caller's registers
         SPACE 3
         LR    R12,R15             Set local base
         SPACE 1
         CLC   X001SWBT,$ZEROS     Are there any SWBIT's ?
         BE    REQOK               No, branch around SWBTUREQ RETRIEVE C
                                            service call
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        Storage must be obtained for the SWBTUREQ RETRIEVE           *
*        service to provide an area to return the retrieved           *
*        TUs and an area to set up a Key List in.  Pointers           *
*        to the TUs requested by the specific keys will be            *
*        returned by the service to the Key List area if they         *
*        exist.  Working storage for SWBTUREQ service is also         *
*        obtained.                                                    *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
*---------------------------------------------------------------------*
*        Get storage for output TU area                               *
*---------------------------------------------------------------------*
         SPACE 1
         ICM   R1,B'1111',EX1TUADR     Check if already got storage
         BZ    GETOTUA                   No storage, so go get some
         XC    EX1TUADR,EX1TUADR       Clear out save area
         SPACE 1
         CLC   0(4,R1),=C'OTUA'    Is this storage ours?
         BNE   GETOTUA               No, go get storage
         B     GOTOTUA               Yes, branch around GETWORK
         SPACE 2
GETOTUA  DS    0H                  Get storage for work area
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        Of the 6 TU's that we are interested in, 5 have a single     *
*        parameter ( TITLE, ROOM, NAME, DEPT, BUILDING ), whereas     *
*        ADDRESS has up to 4 parameters.                              *
*                                                                     *
*        The total output TU area required is ...                     *
*                                                                     *
*        5*(size of one-parameter TU) + (size of four-parameter TU)   *
*        |                               |                            *
*        |                               |                            *
*        |                               +--> for ADDRESS             *
*        |                                                            *
*        +--> for  TITLE, ROOM, NAME, DEPT and BUILDING               *
*                                                                     *
*                                                                     *
*        where a TU mapping is defined as follows:                    *
*                                                                     *
*        TU key                              .....   2 bytes          *
*        Number of length/parameter pairs    .....   2 bytes          *
*  +-- { Length of first (or only) parameter .....   2 bytes          *
*  |   { First (or only) parameter           .....  60 bytes ( max )  *
*  |              .                                                   *
*  |              .                                                   *
*  |              .                                                   *
*  +----> (repeated for multiple parameter TU)                        *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
         LA    R1,((5*(2+2+2+60))+(2+2+4*(2+60)))                      C
                                   Size of current TU area
         STH   R1,EX1TUSZ          Save the size
         LA    R1,3(,R1)           Convert size from
         SRL   R1,2                  bytes to words
         LA    R1,1(,R1)           Add 1 for the eyecatcher
         SPACE 1
        $GETWORK WORDS=(R1),USE=OTUA,ERRET=NOSEPRT    Get storage for  C
                                                   the TU output area
         SPACE 1
GOTOTUA  DS    0H                  Got storage
         SPACE 1
         LA    R1,4(,R1)           Add 4 for eyecatcher
         ST    R1,EX1TUADR         Save the address of the TU output   C
                                     area
         EJECT
*---------------------------------------------------------------------*
*    Get storage for Key / TU pointer list                            *
*---------------------------------------------------------------------*
         SPACE 1
         ICM   R1,B'1111',EX1KYLST     Check if already got storage
         BZ    GETKEYL                   No storage, so go get some
         XC    EX1KYLST,EX1KYLST       Clear out save area
         SPACE 1
         CLC   0(4,R1),=C'KEYL'    Is this storage ours?
         BNE   GETKEYL               No, go get storage
         B     GOTKEYL               Yes, branch around GETWORK
         SPACE 2
GETKEYL  DS    0H                  Get storage for work area
         SPACE 1
         LA    R1,(((6*SJTRKLEN)+3)/4+1)   Size of Key/TU ptr list in  C
                                                 words
         SPACE 1
        $GETWORK WORDS=(R1),USE=KEYL,ERRET=NOSEPRT    Get storage for  C
                                                    the Key / TU list
         SPACE 1
GOTKEYL  DS    0H                  Got storage
         SPACE 1
         LA    R1,4(,R1)           Add 4 for eyecatcher
         ST    R1,EX1KYLST         Save the address of the Key / TU    C
                                     List
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        Insert each delivery/identification OUTPUT JCL               *
*        parameter key, in the keys list.                             *
*        If any of these parameters were specified by the             *
*        user, a pointer to the appropriate TU ( text unit )          *
*        will be returned by the SWBTUREQ RETIREVE service.           *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
         USING SJTRKEYL,R4         Establish
         L     R4,EX1KYLST             addressability
         SPACE 1
         MVC   SJTRKYID+KYLSTTL,=Y(DOTITLE)       Title Key
         MVC   SJTRKYID+KYLSTNM,=Y(DONAME)        Name Key
         MVC   SJTRKYID+KYLSTRM,=Y(DOROOM)        Room Key
         MVC   SJTRKYID+KYLSTBL,=Y(DOBUILD)       Building Key
         MVC   SJTRKYID+KYLSTDP,=Y(DODEPT)        Dept key
         MVC   SJTRKYID+KYLSTAD,=Y(DOADDRES)      Address Key
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        Initialize the SWBTUREQ REQUEST=RETRIEVE parameter           *
*        list. Set storage length to 0 - we dont know exactly how     *
*        much storage we need for the SWBTUREQ Service Work Area.     *
*        The service will return the Required Size which we will      *
*        then obtain via $GETWORK (in MORESTOR routine).              *
*---------------------------------------------------------------------*
         SPACE 1
         USING SJTRP,R3            Establish addressability
         SPACE 1
         LA    R3,EX1RETPL         Get the address of the              C
                                     RETRIEVE parameter list
         SPACE 1
         XC    SJTRP(SJTRLGTH),SJTRP        Clear the parameter list
         MVC   SJTRID,=A(SJTRCID)  Parameter list ID
         MVI   SJTRVERS,SJTRCVER   Parameter list version
         LA    R1,SJTRLGTH         Parameter
         STH   R1,SJTRLEN            list length
         MVC   SJTRSTOR,$ZEROS     Zero storage address        @430P329
         MVC   SJTRSTSZ,$ZEROS     Zero storage length         @430P329
         MVC   SJTRSWBN,X001NSWB   Number of pointers in SWBTU list
         MVC   SJTRSWBA,X001SWBT   Address of SWBTU pointer list
         MVC   SJTRAREA,EX1TUADR   Address of the output area          C
                                     for contiguous text units
         MVC   SJTRSIZE,EX1TUSZ    Size of output area for TUs
         MVC   SJTRKIDN,$H6        Number of keys in the Key/TU        C
                                     Pointer list
         MVC   SJTRKIDL,EX1KYLST   Address of Key List
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        Issue the SWBTUREQ REQUEST=RETRIEVE macro                    *
*        ------------------------------------------                   *
*                                                                     *
*        The service returns with a zero return code if               *
*        processing was successful.                                   *
*                                                                     *
*        If the current working storage size ( SJTRSTSZ ) is          *
*        less than the required size for the service, then            *
*        the service returns the following values:                    *
*               R15        =  4 (SJTRCSIZ)                            *
*               SJTRREAS   =  4 (SJTRWSZR)                            *
*               SJTRWKSZ   =  amount of working storage required      *
*                             for the SWBTUREQ REQUEST=RETRIEVE       *
*                             service.                                *
*                                                                     *
*        If none of the requested items were found, then the          *
*        service returns the following values:                        *
*               R15        =  4 (SJTRCSIZ)                            *
*               SJTRREAS   =  100 (SJTRNOKY)                          *
*                                                                     *
*        If R15 > 4, then an error occurred in the service.           *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 3
RETRYREQ DS    0H
         ST    R3,EX1PLPTR         Pass SWBTUREQ RETRIEVE parm list
         LA    R1,EX1PLPTR           address by indirect addressing
         SPACE 2
         SWBTUREQ REQUEST=RETRIEVE  Issue the SJF macro
         SPACE 2
         STH   R15,EX1SWBRC        Save the return code
         SPACE 1
         CLC   EX1SWBRC,$H4             Check return code
         BL    REQOK               Service successful, produce sep.
         BH    NOSEPRT             Error, don't produce separator
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        If working storage is too small, call MORESTOR to            *
*        release the current storage ( if any ), get storage          *
*        for the amount that is required, and issue the               *
*        service call again.                                          *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
         CLC   SJTRREAS,=A(SJTRWSZR)    Working storage too small?
         BNE   CHECKEYS                 No, check if no keys matched
         LH    R4,SJTRSTSZ         Current storage size
         L     R1,SJTRSTOR         Current storage address
         LH    R2,SJTRWKSZ         Required storage size
         SPACE 1
        $CALL  MORESTOR            Obtain required storage
         SPACE 1
         LTR   R15,R15             Check return code from MORESTOR
         BNZ   NOSEPRT             If non-zero don't produce separator
         SPACE 1
         LA    R1,4(,R1)           Add 4 for eyecatcher
         ST    R1,EX1SRWA          Save working storage address in     C
                                       exit work area (EX1WORK)
         MVC   EX1SRWL,SJTRWKSZ    Set the length in EX1WORK
         MVC   SJTRSTOR,EX1SRWA    Reset WS addr in parm list
         MVC   SJTRSTSZ,EX1SRWL    Reset WS size in parm list
         B     RETRYREQ            Branch to issue macro again
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        Check if reason for RC=4 from SWBTUREQ service is that       *
*        none of the requested values were found.                     *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
CHECKEYS CLC   SJTRREAS,=A(SJTRNOKY)   Did any keys match?
         BE    REQOK                     No, produce separator anyway
         B     NOSEPRT                 Go set error return code
         SPACE 2
REQOK    DS    0H
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*        Call PRINTBLK routine to print the block letters on the      *
*        separator page.                                              *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
        $CALL  PRINTBLK            Call routine to print block letters
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*        Call BUILDBOX routine to build and print the detail          *
*        box on the separator page.                                   *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
        $CALL  BUILDBOX            Call routine to build detail box
         EJECT
***********************************************************************
*                                                                     *
*        Return to the caller.                                        *
*                                                                     *
***********************************************************************
         SPACE 2
         SLR   R6,R6               Set return code = 0         @430P329
         B     GOBACK              Branch to return to caller
         SPACE 2
NOSEPRT  LA    R6,4                Set return code = 4         @430P329
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*        The TU output area, the Keylist/Pointer area and the         *
*        working storage area for the SWBTUREQ service are no         *
*        longer needed so their respective work areas are             *
*        returned.                                                    *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2                                               @430P329
*---------------------------------------------------------------------*
*        Release TU output area storage                               *
*---------------------------------------------------------------------*
         SPACE 1                                               @430P329
GOBACK   ICM   R1,B'1111',EX1TUADR  Load TU output area addr   @430P329
         BZ    CHKYLST             Branch if no TU storage     @430P329
         S     R1,$F4              Subtract 4 for eyecatcher   @430P329
         SPACE 1                                               @430P329
         XC    EX1TUADR,EX1TUADR   Set address to zero         @430P329
         SPACE 1                                               @430P329
        $RETWORK (R1)              Release the TU storage      @430P329
         SPACE 2                                               @430P329
*---------------------------------------------------------------------*
*        Release Key/TU pointer list storage area                     *
*---------------------------------------------------------------------*
         SPACE 1                                               @430P329
CHKYLST  ICM   R1,B'1111',EX1KYLST  Load Key/TU ptr list addr  @430P329
         BZ    CHKSRWA             Branch if no Key/TU storage @430P329
         S     R1,$F4              Subtract 4 for eyecatcher   @430P329
         SPACE 1                                               @430P329
         XC    EX1KYLST,EX1KYLST   Set address to zero         @430P329
         SPACE 1                                               @430P329
        $RETWORK (R1)              Release the keylist storage @430P329
         SPACE 2                                               @430P329
*---------------------------------------------------------------------*
*        Release SWBTUREQ RETRIEVE service work area storage          *
*---------------------------------------------------------------------*
         SPACE 1                                               @430P329
CHKSRWA  ICM   R1,B'1111',EX1SRWA  Load service work area addr @430P329
         BZ    ENDSEP              Branch if no work storage   @430P329
         S     R1,$F4              Subtract 4 for eyecatcher   @430P329
         SPACE 1                                               @430P329
         XC    EX1SRWA,EX1SRWA     Set address to zero         @430P329
         SPACE 1                                               @430P329
        $RETWORK (R1)              Release the working storage @430P329
         SPACE 1                                               @430P329
ENDSEP  $RETURN RC=(R6)            Return to the caller        @430P329
         SPACE 2
         LTORG ,                   DEFINE LITERAL ORIGIN
         SPACE 1
         DROP  R3,R4,R5,R7,R12     Drop register addressabilities
         TITLE 'MORESTOR -- Get more working storage for SWBTUREQ RETRIC
               EVE service'
***********************************************************************
*                                                                     *
*        MORESTOR - Get more working storage for the SWBTUREQ         *
*                   RETRIEVE service.                                 *
*                                                                     *
*   FUNCTION:                                                         *
*                                                                     *
*        This subroutine is called to release the current SWBTUREQ    *
*        working storage and obtain the amount required by the        *
*        SWBTUREQ RETRIEVE service.                                   *
*                                                                     *
*   LINKAGE:                                                          *
*                                                                     *
*      Accessed via $CALL                                             *
*      Returned via $RETURN                                           *
*                                                                     *
*                                                                     *
*   REGISTER USAGE (ENTRY/EXIT):                                      *
*                                                                     *
*        REG          VALUE ON ENTRY            VALUE ON EXIT         *
*                                                                     *
*        R0           N/A                       unchanged             *
*        R1           Current working           new working           *
*                       storage address           storage address     *
*        R2           Required working          unchanged             *
*                       storage size                                  *
*        R3           N/A                       unchanged             *
*        R4           Current working           unchanged             *
*                       storage size                                  *
*        R5-R13       N/A                       unchanged             *
*        R14          Return address            unchanged             *
*        R15          Entry address             Return code           *
*                                                                     *
*                                                                     *
*   RETURN CODE ( R15 ON EXIT ):                                      *
*                                                                     *
*        0 - Processing successful; More storage obtained             *
*                                                                     *
*        4 - Processing unsucccessful                                 *
*                                                                     *
*   OTHER CONSIDERATIONS :                                            *
*                                                                     *
*        None                                                         *
*                                                                     *
***********************************************************************
         SPACE 1
         USING MORESTOR,R12        Establish addressability
         EJECT
MORESTOR $SAVE ,                   Save the caller's registers
         SPACE 1
         LR    R12,R15             Set local base
         SPACE 1
         LTR   R4,R4               Is the current working storage      C
                                     size equal to zero ?
         BZ    GETSTOR                 No, skip the retwork
         LTR   R1,R1               Is the current working storage      C
                                     addr equal to zero?
         BZ    GETSTOR                 No, skip the retwork
         S     R1,$F4              Subtract 4 for the eyecatcher
         SPACE 1
        $RETWORK (R1)              Release the current working storage
         SPACE 1
GETSTOR  DS    0H
         LA    R2,3(,R2)           Convert the size in bytes
         SRL   R2,2                   into the size in words
         LA    R2,1(,R2)           Add 1 for the eyecatcher
         SPACE 1
        $GETWORK WORDS=(R2),USE=SRWA,ERRET=NOMOREST    Get required    C
                                                     working storage
         SPACE 2
        $STORE R1                  Pass the new working storage        C
                                     address back to the caller
         LA    R15,0               Set return code = 0
         SPACE 2
         B     ENDMORE             Go return to caller
         EJECT
***********************************************************************
*                                                                     *
*        Return to the caller.                                        *
*                                                                     *
***********************************************************************
         SPACE 2
NOMOREST LA    R15,4               Set return code = 4
         B     ENDMORE             Go return to caller
         SPACE 2
ENDMORE $RETURN RC=(R15)           Return to the caller
         SPACE 1
         LTORG ,                   Define literal origin
         SPACE 1
         DROP  R12                 Drop local base register
         TITLE 'PRINTBLK -- Print the separator page block letters'
***********************************************************************
*                                                                     *
*        PRINTBLK - Print the job name and job id in block            *
*                   letters on the separator page.                    *
*                                                                     *
*   FUNCTION:                                                         *
*                                                                     *
*        This routine is called to print the job name and job         *
*        id in block letters on the separator page.                   *
*                                                                     *
*   LINKAGE:                                                          *
*                                                                     *
*        Accessed via $CALL                                           *
*        Returned via $RETURN                                         *
*                                                                     *
*                                                                     *
*   REGISTER USAGE (ENTRY/EXIT):                                      *
*                                                                     *
*        REG          VALUE ON ENTRY            VALUE ON EXIT         *
*                                                                     *
*        R0-R4        N/A                         Unchanged           *
*        R5           EX1WORK address             Unchanged           *
*        R6           N/A                         Unchanged           *
*        R7           Exit 1 parm list addr       Unchanged           *
*        R8-R10       N/A                         Unchanged           *
*        R11          HCT address                 Unchanged           *
*        R12          Local base address          Unchanged           *
*        R13          PCE address                 Unchanged           *
*        R14          Return address              Unchanged           *
*        R15          Entry address               Unchanged           *
*                                                                     *
*                                                                     *
*   RETURN CODES:                                                     *
*                                                                     *
*        None                                                         *
*                                                                     *
*   OTHER CONSIDERATIONS:                                             *
*                                                                     *
*        None                                                         *
*                                                                     *
***********************************************************************
         SPACE 2
         USING PRINTBLK,R12        Establish local addressability
         USING XPL,R7              Establish parm list addressability
         USING JCT,R10             Establish JCT addressability
         EJECT
PRINTBLK $SAVE ,                   Save the caller's registers
         SPACE 2
         LR    R12,R15             Set local base
         L     R10,X001JCT         Load JCT address
         SPACE 1                                               @430P329
         L     R3,X001DSCT         Load DSCT Address           @430P329
         SPACE 1                                               @430P329
         USING DSCT,R3             Establish Addressability    @430P329
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        Print the job name in block letters ( slanted ).             *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
         LTR   R3,R3               Is the DSCT Valid?          @430P329
         BZ    NOTDSCT1            No, use JCT Jobname         @430P329
         LA    R0,DSJBN            Address of TP Job Name      @430P329
         B     YESDSCT1                                        @430P329
         SPACE 1                                               @430P329
NOTDSCT1 LA    R0,JCTJNAME         Get address of jobname      @430P329
         SPACE 1                                               @430P329
YESDSCT1 L     R1,X001HBUF         Get buffer address          @430P329
         SPACE 1                                               @510P214
        $SEPPDIR (R1)         Send a PDIR in case a SNA REMOTE @510P214
         SPACE 2
        $PBLOCK DATA=(R0),BUFFER=(R1),SLANT=YES     Call routine to    C
                                                  print block letters
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*        Print a blank line                                           *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
         L     R4,X001HBUF         Load buffer address
         USING SEPDSECT,R4         Establish buffer addressability
         SPACE 1
         LA    R4,BUFSTART-BFPDSECT(,R4)     Get address of work space C
                                                in buffer
         SPACE 1
         MVI   PAGELINE,C' '                 Put a blank in buffer
         LA    R0,1                          Set length to 1
         SPACE 2
        $PRPUT DATA=(R4),LEN=(R0),WAIT=YES   Print a blank line
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        Print the job id in block letters ( without slant ).         *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
         LTR   R3,R3               Is the DSCT Valid?          @430P329
         BZ    NOTDSCT2            No, use JCT JOBID           @430P329
         LA    R0,DSWKID            Address of TP Work ID      @430P329
         B     YESDSCT2                                        @430P329
         SPACE 1                                               @430P329
NOTDSCT2 LA    R0,JCTJOBID         Get address of Job ID       @430P329
         SPACE 1                                               @430P329
YESDSCT2 L     R1,X001HBUF         Get buffer address          @430P329
         SPACE 2
        $PBLOCK DATA=(R0),BUFFER=(R1)      Call routine to print       C
                                                 block letters
         SPACE 2
         DROP  R3                  Drop DSCT                   @430P329
         SPACE 1                                               @430P329
*---------------------------------------------------------------------*
*                                                                     *
*        Print a blank line                                           *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
         L     R4,X001HBUF         Load buffer address
         LA    R4,BUFSTART-BFPDSECT(,R4)     Get address of work space C
                                                in buffer
         SPACE 1
         MVI   PAGELINE,C' '                 Put a blank in buffer
         LA    R0,1                          Set length to 1
         SPACE 2
        $PRPUT DATA=(R4),LEN=(R0),WAIT=YES   Print a blank line
         EJECT
***********************************************************************
*                                                                     *
*        Return to the caller.                                        *
*                                                                     *
***********************************************************************
         SPACE 2
        $RETURN ,                  Return to the caller
         SPACE 1
         LTORG ,                   Define literal origin
         SPACE 1
         DROP  R4,R7,R10,R12       Drop addressabilities
         TITLE 'BUILDBOX -- Build and print each line of the separator C
               page detail box'
***********************************************************************
*                                                                     *
*        BUILDBOX - Build and print each line of the separator        *
*                   page detail box.                                  *
*                                                                     *
*   FUNCTION:                                                         *
*                                                                     *
*        This sub-routine is called to build and print each           *
*        line of the separator page detail box.                       *
*                                                                     *
*        Addressability to the HASP buffer work space offset          *
*        is established and the routine CLRLINE is called to          *
*        clear the separator page line buffer.                        *
*                                                                     *
*        The routine PUTFRAME is then called to set up the            *
*        detail box frame in the top line and the macro $PRPUT        *
*        is invoked to print it.                                      *
*                                                                     *
*        CLRLINE is called to clear the next line and reset           *
*        the buffer work space pointer.  The detail box               *
*        information is then inserted in the line buffer and          *
*        $PRPUT is invoked to print this line.  This process          *
*        is repeated for all subsequent lines of the detail           *
*        box.                                                         *
*                                                                     *
*        PUTFRAME is called to set up the detail box frame in         *
*        the bottom line and $PRPUT is called to print it.            *
*                                                                     *
*                                                                     *
*   LINKAGE:                                                          *
*                                                                     *
*        Accessed via $CALL                                           *
*        Returned via $RETURN                                         *
*                                                                     *
*        INPUT:                                                       *
*                R7           -  Address of Exit 1 parameter list     *
*                SEPDSECT     -  Separator page line/box DSECT        *
*        OUTPUT:                                                      *
*                The separator page detail box is produced.           *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*   REGISTER USAGE (ENTRY/EXIT):                                      *
*                                                                     *
*        REG          VALUE ON ENTRY            VALUE ON EXIT         *
*                                                                     *
*        R0-R4        N/A                         Unchanged           *
*        R5           EX1WORK address             Unchanged           *
*        R6           N/A                         Unchanged           *
*        R7           Exit 1 parm list addr       Unchanged           *
*        R8-R10       N/A                         Unchanged           *
*        R11          HCT address                 Unchanged           *
*        R12          Local base address          Unchanged           *
*        R13          PCE address                 Unchanged           *
*        R14          Return address              Unchanged           *
*        R15          Entry address               Unchanged           *
*                                                                     *
*                                                                     *
*   RETURN CODES:                                                     *
*                                                                     *
*        None                                                         *
*                                                                     *
*   OTHER CONSIDERATIONS:                                             *
*                                                                     *
*        None                                                         *
*                                                                     *
***********************************************************************
         SPACE 1
         USING BUILDBOX,R12        Establish local addressability
         USING XPL,R7              Establish parm list addressability
         USING EX1WORK,R5          Establish work area addressability
         USING SEPDSECT,R4         Establish addr'ty to HASP buffer
         EJECT
BUILDBOX $SAVE ,                   Save the caller's registers
         SPACE 1
         LR    R12,R15             Set local base
         EJECT
*---------------------------------------------------------------------*
*               BUILD AND PRINT TOP LINE                              *
*---------------------------------------------------------------------*
         SPACE 1
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
        $CALL  PUTFRAME            Build top line of detail box
         SPACE 1
        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Call PRPUT macro C
                                                 to print the top line
         SPACE 1
*---------------------------------------------------------------------*
*               BUILD AND PRINT A BLANK LINE                          *
*         ( FRAME CHARACTERS IN COL 1 AND COL 80 )                    *
*---------------------------------------------------------------------*
         SPACE 1
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES    Print a blank line
         EJECT
*---------------------------------------------------------------------*
*               BUILD AND PRINT JOB ID LINE                           *
*---------------------------------------------------------------------*
         SPACE 1
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
         L     R10,X001JCT         Establish addressability
         USING JCT,R10                to JCT
         SPACE 1
         L     R3,X001DSCT         Load DSCT Address           @430P329
         USING DSCT,R3             Establish Addressability    @430P329
         SPACE 1                                               @430P329
         MVC   BOXDESC,LBJOBID     Put Job ID label in line    @430P329
         SPACE 1                                               @430P329
         LTR   R3,R3               Is the DSCT Valid?          @430P329
         BZ    NODSCT1             No, use JCT JobID           @430P329
         MVC   BOXJOBID,DSWKID     Use TP Work ID              @430P329
         B     YEADSCT1                                        @430P329
         SPACE 1                                               @430P329
NODSCT1  MVC   BOXJOBID,JCTJOBID   Use JCT JOBID in line       @430P329
         SPACE 1
*---------------------------------------------------------------------*
*               Segment ID                                            *
*---------------------------------------------------------------------*
         SPACE 1
YEADSCT1 ICM   R6,B'1111',X001PDDB Addr of first PDDB          @R03P010
         BZ    JOBIDLN               Skip if job trailer exit  @R03P010
         SPACE 1                                               @R03P010
         USING PDB,R6              Declare PDDB addressability @R03P010
         SPACE 1
         ICM   R2,B'1111',PDBSEGID      Check for segment ID
         BZ    JOBIDLN             Branch to print line if no seg id
         MVC   BOXSGLBL,LBSEGID          Fill in Segment ID label
         SPACE 1
         CL    R2,=F'99999'        Is segment greater than 99999?
         BH    BADSEGID                Yes, segment is invalid
         SPACE 1
         CVD   R2,EX1CVDWA            Convert the
         L     R15,=A(SEGMASK)          Segment number
         MVC   EX1SEGWA,0(R15)            from binary
         EDMK  EX1SEGWA,EX1CVDWA+5           to EBCDIC
         SPACE 1
         LA    R2,EX1SEGWA+L'EX1SEGWA-1    Truncate all leading
         SLR   R2,R1                          zeros from Segment
         EX    R2,EXECSEG          Execute the move
         B     JOBIDLN             Skip over the move
         SPACE 1
EXECSEG  MVC   BOXSGINF(*-*),0(R1)     *** EXECUTE *** Seg Number
         SPACE 1
BADSEGID MVC   BOXSGINF,=C'*****'       Show segment is invalid
         SPACE 1
JOBIDLN $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line
         SPACE 2
         DROP  R6                  Drop PDDB addressability
         EJECT
*---------------------------------------------------------------------*
*               BUILD AND PRINT JOB NAME LINE                         *
*---------------------------------------------------------------------*
         SPACE 1
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
         MVC   BOXDESC,LBJOBNAM    Job Name label              @430P329
         SPACE 1                                               @430P329
         LTR   R3,R3               Is the DSCT Valid?          @430P329
         BZ    NODSCT2             No, use JCT Jobname         @430P329
         MVC   BOXJNAME,DSJBN      Use TP Job Name             @430P329
         B     YEADSCT2                                        @430P329
NODSCT2  MVC   BOXJNAME,JCTJNAME   Fill in Job Name field      @430P329
         SPACE 1
YEADSCT2 $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES Produce line @430P329
         SPACE 1                                               @430P329
         DROP  R3                  Drop DSCT                   @430P329
         SPACE 2                                               @430P329
*---------------------------------------------------------------------*
*               BUILD AND PRINT USER ID LINE                          *
*---------------------------------------------------------------------*
         SPACE 1
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
         L     R9,X001WJOE         Establish work-JOE
         USING JOE,R9                 addressability
         SPACE 1
         MVC   BOXDESC,LBUSERID          User ID label
         MVC   BOXCRUID,JOECRUID         Fill in USER ID field
         SPACE 1
        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line
         EJECT
*---------------------------------------------------------------------*
*               BUILD AND PRINT SYSOUT CLASS LINE                     *
*---------------------------------------------------------------------*
         SPACE 1
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
         MVC   BOXDESC,LBSYSCL           SYSOUT Class label
         MVC   BOXSYSCL,JOECURCL         Fill in SYSYOUT class
         SPACE 1
        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line
         SPACE 2
*---------------------------------------------------------------------*
*               BUILD AND PRINT OUTPUT GROUP LINE                     *
*---------------------------------------------------------------------*
         SPACE 1
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
         MVC   BOXDESC,LBOUTGRP          Output Group label
         MVC   BOXINFO(L'JOENAME),JOENAME    Fill in JOE Output Name
         LA    R2,BOXINFO          Point to start of OUTGRP name
         LA    R6,L'JOENAME        Set length of OUTGRP name
         SPACE 1
NAMELOOP CLI   0(R2),C' '          Is this character a blank?
         BE    SETSYNTX              Yes, go set syntax
         LA    R2,1(,R2)             No, point to next character
         BCT   R6,NAMELOOP         Go find end of outgrp name
         SPACE 1
SETSYNTX MVI   0(R2),C'.'          Set syntax for separator
         LA    R2,1(,R2)           Set pointer for separator
         LH    R0,JOEID1           1st qualifier to convert
         CVD   R0,EX1CVDWA         Convert to decimal
         SPACE 1
         MVC   EX1CVDWA-1(6),=X'402020202120'    Move mask for result
         ED    EX1CVDWA-1(6),EX1CVDWA+5          Convert to EBCDIC
         SPACE 1
         LA    R6,4                Set for                     @510APAR
         LA    R1,EX1CVDWA           execute
         EJECT
JID1LOOP CLI   0(R1),C' '          Is this beginning of JOEid?
         BNE   JID1FINI              Yes, beginning found
         BCTR  R6,0                  No, reset count
         LA    R1,1(,R1)               and pointer
         B     JID1LOOP                  continue checking
         SPACE 1
JID1FINI EX    R6,EXECJOID         Move id to JOEid1
         LA    R2,1(R6,R2)           Reset pointer             @510APAR
         MVI   0(R2),C'.'          Set period in
         LA    R2,1(,R2)           Reset pointer
         LH    R0,JOEID2           2nd qualifier to convert
         CVD   R0,EX1CVDWA         Convert to decimal
         SPACE 1
         MVC   EX1CVDWA-1(6),=X'402020202120'    Move mask for result
         ED    EX1CVDWA-1(6),EX1CVDWA+5          Convert to EBCDIC
         SPACE 1
         LA    R6,4                Set for                     @510APAR
         LA    R1,EX1CVDWA           execute
JID2LOOP CLI   0(R1),C' '          Is this beginning of JOEid?
         BNE   JID2FINI              Yes, beginning found
         BCTR  R6,0                  No, reset count
         LA    R1,1(,R1)               and pointer
         B     JID2LOOP                  continue checking
         SPACE 1
JID2FINI EX    R6,EXECJOID         Move id to JOEid2
         SPACE 1
        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line
         SPACE 1
EXECJOID MVC 0(*-*,R2),0(R1)       **** EXECUTE ****
         EJECT
*---------------------------------------------------------------------*
*               BUILD AND PRINT TITLE LINE                            *
*---------------------------------------------------------------------*
         SPACE 1
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
         USING SJTRKEYL,R2                   Establish addressability
         SPACE 1
         MVC   BOXDESC,LBTITLE               Title label
         ICM   R2,B'1111',EX1KYLST           Load Key list address
         BZ    PRTITLE                       Branch if no Key list
         LA    R2,KYLSTTL(,R2)               Load address of the Title C
                                                key in the Key List
         ICM   R1,B'1111',SJTRTPAD           Load Title TU address
         BZ    PRTITLE                       Branch if no Title
         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C
                                               parameter pair
         SPACE 1
         BAL   R8,MOVETU                     Get Title data from TU
         SPACE 1
PRTITLE $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line
         SPACE 1
*---------------------------------------------------------------------*
*               BUILD AND PRINT A BLANK LINE                          *
*         ( FRAME CHARACTERS IN COL 1 AND COL 80 )                    *
*---------------------------------------------------------------------*
         SPACE 1
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES     Produce the line
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*               BUILD AND PRINT DESTINATION LINE                      *
*               --------------------------------                      *
*                                                                     *
*        Convert the binary route code ( in JOEROUT ) to its          *
*        corresponding symbolic destination value using the           *
*        $DEST macro.                                                 *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
         MVC   BOXDESC,LBDEST                Fill in destination label
         MVC   EX1DEST(L'JOEROUT),JOEROUT    Copy binary route code
         SPACE 1
         L     R9,X001CJOE          Get addressability to char-JOE
         SPACE 1
        $DEST  DEST=EX1DEST,LEN=L'EX1DEST,CONV=SBINARY,                C
               USER=JOEUSER                  Convert route code
         SPACE 1
         L     R9,X001WJOE          Reset addressability to work-JOE
         SPACE 1
         MVC   BOXDEST,EX1DEST               Fill in destination value
         SPACE 1
        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line
         EJECT
*---------------------------------------------------------------------*
*               BUILD AND PRINT NAME LINE                             *
*---------------------------------------------------------------------*
         SPACE 1
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
         MVC   BOXDESC,LBNAME                Fill in Name label
         ICM   R2,B'1111',EX1KYLST           Load Key/TU prt list addr
         BZ    NONAME                        Branch if no Key list
         LA    R2,KYLSTNM(,R2)               Load address of the Name  C
                                                key in the Key List
         ICM   R1,B'1111',SJTRTPAD           Load Name TU address
         BZ    NONAME                        Branch if no Name
         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C
                                                 parameter pair
         SPACE 1
         BAL   R8,MOVETU                     Get Name data from TU
         SPACE 1
         B     PRTNAME                       Branch to print the Name
         SPACE 1
NONAME   MVC   BOXPNAME,JCTPNAME             Name from the JOB stmt
         SPACE 1
PRTNAME $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line
         SPACE 1
*---------------------------------------------------------------------*
*               BUILD AND PRINT ROOM LINE                             *
*---------------------------------------------------------------------*
         SPACE 1
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
         MVC   BOXDESC,LBROOM                Fill in Room label
         ICM   R2,B'1111',EX1KYLST           Load Key/TU prt list addr
         BZ    NOROOM                        Branch if no Key list
         LA    R2,KYLSTRM(,R2)               Load address of the Room  C
                                                key in the Key List
         ICM   R1,B'1111',SJTRTPAD           Load Room TU address
         BZ    NOROOM                        Branch if no Room
         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C
                                                 parameter pair
         SPACE 1
         BAL   R8,MOVETU                     Get Room data from TU
         SPACE 1
         B     PRTROOM                       Branch to print the Room
         SPACE 1
NOROOM   MVC   BOXROOMN,JCTROOMN             Room from the JOB stmt
         EJECT
PRTROOM $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line
         EJECT
*---------------------------------------------------------------------*
*               BUILD AND PRINT BUILDING LINE                         *
*---------------------------------------------------------------------*
         SPACE 1
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
         MVC   BOXDESC,LBBLDG                Fill in Building label
         ICM   R2,B'1111',EX1KYLST           Load Key/TU prt list addr
         BZ    PRTBLDG                       Branch if no Key list
         LA    R2,KYLSTBL(,R2)               Load address of the Bldg  C
                                                key in the Key List
         ICM   R1,B'1111',SJTRTPAD           Load Building TU address
         BZ    PRTBLDG                       Branch if no Building
         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C
                                                 parameter pair
         SPACE 1
         BAL   R8,MOVETU                     Get Building data from TU
         SPACE 1
PRTBLDG $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line
         SPACE 1
*---------------------------------------------------------------------*
*               BUILD AND PRINT DEPARTMENT LINE                       *
*---------------------------------------------------------------------*
         SPACE 1
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
         MVC   BOXDESC,LBDEPT                Fill in Department label
         ICM   R2,B'1111',EX1KYLST           Load Key/TU prt list addr
         BZ    PRTDEPT                       Branch if no Key list
         LA    R2,KYLSTDP(,R2)               Load address of the Dept  C
                                                key in the Key List
         ICM   R1,B'1111',SJTRTPAD           Load Department TU address
         BZ    PRTDEPT                       Branch if no Department
         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C
                                                 parameter pair
         SPACE 1
         BAL   R8,MOVETU                    Get Department data from TU
         SPACE 1
PRTDEPT $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*               BUILD AND PRINT ADDRESS LINES                         *
*               -----------------------------                         *
*        The address can be from 1 to 4 lines long.  Any lines        *
*        that are unused must be printed as blank lines, but the      *
*        label "ADDRESS:" must appear on the first line even if       *
*        no address was specified on the OUTPUT JCL.                  *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
         MVC   BOXDESC,LBADDR                Fill in Address label
         ICM   R2,B'1111',EX1KYLST           Load Key/TU prt list addr
         BZ    NOADDR                        Branch if no Key list
         LA    R2,KYLSTAD(,R2)               Load address of the Addr  C
                                                key in the Key/TU List
         ICM   R1,B'1111',SJTRTPAD           Load Address TU address
         BZ    NOADDR                        Branch if no Address
         SPACE 1
         LH    R3,DOCNTNUM-DOCNUNIT(,R1)     Number of lines used for  C
                                                 Address
         CL    R3,$F4                        Number greater than four?
         BNH   SAVENUML                        No, save number of lines
         LA    R3,4                            Yes, set to max of four
         SPACE 1
SAVENUML STH   R3,EX1ADNUM                   Save number of lines
         LTR   R3,R3                         Number greater than zero?
         BZ    NOADDR                          No, produce blank lines
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        Loop to build/print multiple line address                    *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C
                                                 parameter pair
         SPACE 1
         USING DOCNTFLD,R1                   Establish addressability
         SPACE 1
ADDRLOOP LR    R6,R1                         Save the TU address
         SPACE 1
         BAL   R8,MOVETU                     Get Address data from TU
         SPACE 1
        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line
         SPACE 1
         LR    R1,R6                         Restore TU address
         SPACE 1
         LH    R15,DOCNTLEN                  Move to next
         LA    R1,L'DOCNTLEN(R15,R1)           Address Length/Data pair
         SPACE 1
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
         BCT   R3,ADDRLOOP                   Loop again if more data
         SPACE 1
         DROP  R1                            Drop addressability
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        Loop to build/print multiple blank lines                     *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
NOADDR   LH    R6,$H4                       Maximum number of          C
                                             available lines of address
         LH    R3,EX1ADNUM                  Number Address lines used
         SR    R6,R3                        Determine the number       C
                                                    of unused lines
         LA    R6,1(,R6)                    Add 1 for extra blank line
         SPACE 1
BLKLINE $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES    Print blank lines
         SPACE 1
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
         BCT   R6,BLKLINE                       Loop if more to print
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*               BUILD AND PRINT THE PRINT TIME LINE                   *
*                                                                     *
*    Note: The TIME macro with the DEC parameter returns the time     *
*          of day in R0 and the date in R1.                           *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
         MVC   BOXDESC,LBPRTIME             Fill in Printer Time label
         SPACE 1
         TIME  DEC                          Get time
         SPACE 1
         ST    R0,EX1CVDWA                  Save the time
         LR    R6,R1                        Save the date
         L     R15,=A(TIMEMASK)             Get Edit mask address
         MVC   BOXPRTIM,0(R15)              Copy edit pattern
         ED    BOXPRTIM,EX1CVDWA            Edit time into proper field
         CLI   BOXPRTIM,X'21'      LEADING 0?                    @430GO
         BNE   PRLINE                NO, NO NEED TO EDIT         @430GO
         MVI   BOXPRTIM,X'F0'      PUT PRINTABLE 0 IN FIELD      @430GO
         SPACE 1
PRLINE  $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES  PRODUCE LINE   @430GO
         SPACE 1
*---------------------------------------------------------------------*
*               BUILD AND PRINT THE PRINT DATE LINE                   *
*---------------------------------------------------------------------*
         SPACE 1
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
         MVC   BOXDESC,LBPRDATE             Fill in Printer Date label
         SPACE 1
        $CALL  FMTDATE                      Format date
         SPACE 1
        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line
         EJECT
*---------------------------------------------------------------------*
*               BUILD AND PRINT PRINTER NAME LINE                     *
*---------------------------------------------------------------------*
         SPACE 1
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
         MVC   BOXDESC,LBPRNAME             Printer Name label
         SPACE 1
         USING DCT,R3                       Establish addressability
         L     R3,X001DCT                      to printer DCT
         SPACE 1
         MVC   BOXPDEVN,DCTDEVN             Device Name
         SPACE 1
         DROP  R3                           Drop DCT addressability
         SPACE 1
        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line
         SPACE 1
*---------------------------------------------------------------------*
*               BUILD AND PRINT SYSTEM NAME LINE                      *
*---------------------------------------------------------------------*
         SPACE 1
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
         MVC   BOXDESC,LBSYSTEM             System label
         MVC   BOXSYSTM,$SID                System ID
         SPACE 1
        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line
         EJECT
*---------------------------------------------------------------------*
*               BUILD AND PRINT A BLANK LINE                          *
*         ( FRAME CHARACTERS IN COL 1 AND COL 80 )                    *
*---------------------------------------------------------------------*
         SPACE 1
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES     Produce the line
         SPACE 1
*---------------------------------------------------------------------*
*               BUILD AND PRINT BOTTOM LINE                           *
*---------------------------------------------------------------------*
         SPACE 1
         BAL   R8,CLRLINE          Clear line and get buffer offset
         SPACE 1
        $CALL  PUTFRAME            Build last line of detail box
         SPACE 1
        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Call PRPUT macro C
                                                to print the last line
         EJECT
***********************************************************************
*                                                                     *
*        Return to the caller.                                        *
*                                                                     *
***********************************************************************
         SPACE 2
ENDBOX   DS    0H
         SPACE 1
        $RETURN ,                  Return to the caller
         EJECT
***********************************************************************
*                                                                     *
*        Static data and the literal pool                             *
*                                                                     *
***********************************************************************
         SPACE 2
         LTORG ,                            Define literal origin
         SPACE 1
         DROP  R2,R4,R5,R7,R9,R10,R12       Drop addressabilities
         TITLE 'CLRLINE  -- Clear the output line; Reset buffer work spC
               ace addressability'
***********************************************************************
*                                                                     *
*        CLRLINE -  Resets addressability to the beginning of         *
*                   the buffer work space within the HASP             *
*                   buffer that is passed to the exit.                *
*                   Clears the detail box output buffer line          *
*                   and inserts the box frame character in            *
*                   columns 1 and 80.                                 *
*                                                                     *
*                                                                     *
*   FUNCTION:                                                         *
*                                                                     *
*        This subroutine loads R4 with the address of the work        *
*        space in the HASP buffer passed via the exit parameter       *
*        list.  This ensures that the data to be printed by           *
*        $PRPUT is at the correct offset in the buffer.               *
*                                                                     *
*        The detail box output buffer line is cleared so that         *
*        residual data is not printed on the current output           *
*        line.  The box frame character is inserted in columns        *
*        1 and 80.                                                    *
*                                                                     *
*   LINKAGE:                                                          *
*                                                                     *
*        Accessed via a  BAL R8,CLRLINE                               *
*        Returned via address in R8                                   *
*                                                                     *
*                                                                     *
*   REGISTER USAGE:                                                   *
*                                                                     *
*        REG          VALUE ON ENTRY         VALUE ON EXIT            *
*                                                                     *
*        R0-R3        N/A                      Unchanged              *
*        R4           N/A                      Buffer work space      *
*                                                address              *
*        R5-R6        N/A                      Unchanged              *
*        R7           Parameter list address   Unchanged              *
*        R8           Return address           Unchanged              *
*        R9-R15       N/A                      Unchanged              *
*                                                                     *
*   RETURN CODES:                                                     *
*                                                                     *
*        None                                                         *
*                                                                     *
*   OTHER CONSIDERATIONS:                                             *
*                                                                     *
*        None                                                         *
*                                                                     *
***********************************************************************
         SPACE 1
         USING SEPDSECT,R4                 Establish
         USING XPL,R7                           addressability
         EJECT
CLRLINE  L     R4,X001HBUF                 Load buffer address and
         LA    R4,BUFSTART-BFPDSECT(,R4)     point to the work space   C
                                                offset
         SPACE 1
         MVI   PAGELINE,C' '                        Clear the
         MVC   PAGELINE+1(L'PAGELINE-1),PAGELINE       separator line
         MVI   BOXCOL1,C'*'                         Insert
         MVI   BOXCOL80,C'*'                           frame characters
         SPACE 1
         BR    R8                          Return to caller
         SPACE 1
         LTORG ,                           Define literal origin
         SPACE 1
         DROP  R4,R7                       Drop addressability
         TITLE 'MOVETU   -- Move TEXT UNIT text into separator page detC
               ail box'
***********************************************************************
*                                                                     *
*        MOVETU -  Move the Text Unit ( TU ) text from the TU         *
*                  output area to the separator page detail           *
*                  box line.                                          *
*                                                                     *
*   FUNCTION:                                                         *
*                                                                     *
*        This subroutine is called to move the TU text from the       *
*        TU output area to the detail box output line.  Since         *
*        TUs are variable length (up to sixty characters long),       *
*        the detail line is padded with blanks on the right after     *
*        the move is performed.                                       *
*                                                                     *
*   LINKAGE:                                                          *
*                                                                     *
*        Accessed via a  BAL R8,MOVETU                                *
*        Returned via address in R8                                   *
*                                                                     *
*                                                                     *
*   REGISTER USAGE:                                                   *
*                                                                     *
*        REG          VALUE ON ENTRY         VALUE ON EXIT            *
*                                                                     *
*        R0           N/A                      Destroyed              *
*        R1           Address of TU            Destroyed              *
*                      length/parameter pair                          *
*        R2-R3        N/A                      Unchanged              *
*        R4           Address of output        Unchanged              *
*                      buffer work space                              *
*        R5-R13       N/A                      Unchanged              *
*        R14-R15      N/A                      Destroyed              *
*                                                                     *
*   RETURN CODES:                                                     *
*                                                                     *
*        None                                                         *
*                                                                     *
*   OTHER CONSIDERATIONS:                                             *
*                                                                     *
*        None                                                         *
*                                                                     *
***********************************************************************
         SPACE 1
         USING DOCNTFLD,R1                  Establish
         USING SEPDSECT,R4                      addressability
         EJECT
MOVETU   LA    R14,DOCNTPRM                 Load TU text address
         LH    R15,DOCNTLEN                 Length of TU text
         ICM   R15,B'1000',$BLANKS          Set pad character to blank
         LA    R0,BOXINFO                   Set up the
         LA    R1,L'BOXINFO                    receiving field
         SPACE 1
         MVCL  R0,R14                       Move the text
         SPACE 1
         BR    R8                           Return to the caller
         SPACE 1
         LTORG ,                            Define literal origin
         SPACE 1
         DROP  R1,R4                        Drop TU, SEPDSECT addr'ty
         TITLE 'PUTFRAME -- Create the detail box frame in the top and C
               bottom lines'
***********************************************************************
*                                                                     *
*        PUTFRAME - Create the detail box frame in the top and        *
*                   bottom lines.                                     *
*                                                                     *
*   FUNCTION:                                                         *
*                                                                     *
*        This subroutine is called to create the frame in the         *
*        top and bottom lines of the separator page detail box.       *
*                                                                     *
*        The detail box frame will contain ...                        *
*                                                                     *
*          '**START***'  for job header separator calls               *
*          '**END*****'  for job trailer separator calls              *
*          '**CONT****'  for job continuation separator calls         *
*                                                                     *
*        propagated across the length of the top and bottom           *
*        lines of the detail box.                                     *
*                                                                     *
*   LINKAGE:                                                          *
*                                                                     *
*        Accessed via $CALL                                           *
*        Returned via $RETURN                                         *
*                                                                     *
*   REGISTER USAGE ( ENTRY/EXIT ):                                    *
*                                                                     *
*        REG          VALUE ON ENTRY         VALUE ON EXIT            *
*                                                                     *
*        R0-R3        N/A                      Unchanged              *
*        R4           Address of output        Unchanged              *
*                      buffer work space                              *
*        R5-R6        N/A                      Unchanged              *
*        R7           Parameter list address   Unchanged              *
*        R8-R10       N/A                      Unchanged              *
*        R11          HCT address              Unchanged              *
*        R12          N/A                      Unchanged              *
*        R13          PCE address              Unchanged              *
*        R14          Return address           Unchanged              *
*        R15          Entry address            Unchanged              *
*                                                                     *
*   RETURN CODES:                                                     *
*                                                                     *
*        None                                                         *
*                                                                     *
*   OTHER CONSIDERATIONS:                                             *
*                                                                     *
*        None                                                         *
*                                                                     *
***********************************************************************
         SPACE 2
         USING PUTFRAME,R12                 Establish
         USING SEPDSECT,R4                       addressabilities
         USING XPL,R7
         SPACE 1
PUTFRAME $SAVE ,                   Save the caller's registers
         SPACE 2
         LR    R12,R15             Set local base register
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        Determine the type of call and branch to insert              *
*        frame characters in the detail box output line.              *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
         TM    X001IND,X001JTLR    Is this a trailer call?     @R01P010
         BO    TRAILER                If yes, go to TRAILER
         SPACE 1
         TM    X001IND,X001JCNT    Else, continuation call?    @R01P010
         BO    CONTINUE               If yes, go to CONTINUE
         SPACE 1
*---------------------------------------------------------------------*
*        Insert frame for job header calls.                           *
*---------------------------------------------------------------------*
         SPACE 1
         MVC   BOXLINE(10),=CL10'**START***'   Insert 'START'
         SPACE 1
         B     FILLFRAM            Go propagate frame characters
         SPACE 1
*---------------------------------------------------------------------*
*        Insert frame for job continuation calls.                     *
*---------------------------------------------------------------------*
         SPACE 1
CONTINUE MVC   BOXLINE(10),=CL10'**CONT****'   Insert 'CONT'
         SPACE 1
         B     FILLFRAM            Go propagate frame characters
         SPACE 1
*---------------------------------------------------------------------*
*        Insert frame for job trailer calls.                          *
*---------------------------------------------------------------------*
         SPACE 1
TRAILER  MVC   BOXLINE(10),=CL10'**END*****'       Insert 'END'
         SPACE 1
*---------------------------------------------------------------------*
*        Propagate frame characters across the length of              *
*        the detail box output line.                                  *
*---------------------------------------------------------------------*
         SPACE 1
FILLFRAM MVC   BOXLINE+10(L'BOXLINE-10),BOXLINE    Fill in frame
         EJECT
***********************************************************************
*                                                                     *
*        Return to caller.                                            *
*                                                                     *
***********************************************************************
         SPACE 2
        $RETURN ,                  Return to caller
         SPACE 2
         LTORG ,                   Define literal origin
         SPACE 2
         DROP  R4,R7,R12           Drop addressabilities
         TITLE 'FMTDATE  -- Format date'
***********************************************************************
*                                                                     *
*        FMTDATE  - Convert the date to a readable format.            *
*                                                                     *
*   FUNCTION:                                                         *
*                                                                     *
*        The date is converted from a packed decimal format           *
*        0CYYDDDF to a readable format 'DD MMM YYYY' where ..  @OW26885
*                                                                     *
*          Packed Decimal Format:                                     *
*                                                                     *
*          C   represents number of centuries after 1900 A.D.         *
*         YY   represents the last two digits of the year             *
*        DDD   represents the JULIAN value for the date               *
*                                                                     *
*          Readable Format:                                           *
*                                                                     *
*         DD   represents the date                                    *
*        MMM   represents the three character abbreviation            *
*                 for the month                                       *
*       YYYY   represents the YEAR                             @OW26885
*                                                                     *
*   LINKAGE:                                                          *
*                                                                     *
*        Accessed via $CALL                                           *
*        Returned via $RETURN                                         *
*                                                                     *
*   REGISTER USAGE ( ENTRY/EXIT ):                                    *
*                                                                     *
*        REG          VALUE ON ENTRY         VALUE ON EXIT            *
*                                                                     *
*        R0-R3        N/A                      Unchanged              *
*        R4           Current buffer address   Unchanged              *
*        R5           Exit work area address   Unchanged              *
*        R6           Date in packed decimal   Unchanged              *
*                     format 0CYYDDDF                                 *
*        R7           Parameter list address   Unchanged              *
*        R8-R10       N/A                      Unchanged              *
*        R11          HCT address              Unchanged              *
*        R12          N/A                      Unchanged              *
*        R13          PCE address              Unchanged              *
*        R14          Return address           Unchanged              *
*        R15          Entry address            Unchanged              *
*                                                                     *
*   RETURN CODES:                                                     *
*                                                                     *
*        None                                                         *
*                                                                     *
*   OTHER CONSIDERATIONS:                                             *
*                                                                     *
*        None                                                         *
*                                                                     *
***********************************************************************
         SPACE 2
         USING FMTDATE,R12         Establish local addressability
         USING XPL,R7              Establish XPL addressability
         USING SEPDSECT,R4         Establish buffer addr'ty
         USING EX1WORK,R5          Establish exit work area addr'ty
         SPACE 1
FMTDATE $SAVE  ,                   Save the caller's registers
         SPACE 2
         LR    R12,R15             Set local base register
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        Setup date conversion table.                                 *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
         LTR   R6,R6               Is there a date to format?
         BZ    NODATE                No, go return to caller
         SPACE 1
         LA    R3,BOXINFO          Get addr of output area
         XC    EX1CVDWA,EX1CVDWA   Clear out conversion work area
         ST    R6,EX1CVDWA+4       Store date in conversion work area
         SPACE 1
         L     R2,=A(YEARTABL)     Copy date conversion table
         MVC   MONTHS,0(R2)          incase it needs to be updated
         SPACE 1
         TM    EX1CVDWA+5,X'01'    Adjust
         BO    EDITYEAR              table
         TM    EX1CVDWA+5,X'12'        on
         BM    EDITYEAR                  leap
         MVI   FEB,29                      years
         SPACE 1
*---------------------------------------------------------------------*
*                                                                     *
*        Convert year to readable format.                             *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
EDITYEAR MVC   8(3,R3),=X'F02120'    Get pattern               @OW26885
         ED    8(3,R3),EX1CVDWA+5    Edit last two digit of yr @OW26885
         MVI   6(R3),X'40'           Blank fill character      @OW26885
         CLI   EX1CVDWA+4,X'00'      Is this 20th Century yr?  @OW26885
         BNE   X121CENT              No, must be 21st Century  @OW26885
         MVC   7(2,R3),=CL2'19'      Year will be '19xx'       @OW26885
         B     XYRCNT                edit last 2 digits of yr  @OW26885
         SPACE 1                                               @OW26885
X121CENT MVC   7(2,R3),=CL2'20'      Year will be '20xx'       @OW26885
         SPACE 1
XYRCNT   MVC   EX1CVDWA(6),$ZEROS  Clear all but JULIAN day    @OW26885
         SLR   R0,R0               Clear register
         CVB   R6,EX1CVDWA         Convert day to binary
         LA    R2,MONTHS-4         Get addr of date conversion table
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        Convert day and month to readable format.                    *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
DATELOOP SLR   R6,R0               Convert
         LA    R2,4(,R2)             JULIAN day
         IC    R0,0(,R2)               value to
         CLR   R0,R6                     standard day
         BL    DATELOOP                     value
         SPACE 1
         CVD   R6,EX1CVDWA         Convert day to decimal value
         UNPK  0(2,R3),EX1CVDWA+6(2)   Place DAY (DD)
         OI    1(R3),X'F0'               into work area
         SPACE 1
         MVI   2(R3),C' '          Insert delimiter
         MVC   3(3,R3),1(R2)       Move EBCDIC month (MMM)
         SPACE 1
NODATE   DS    0H                  End of conversion
         EJECT
***********************************************************************
*                                                                     *
*        Return to caller.                                            *
*                                                                     *
***********************************************************************
         SPACE 2
        $RETURN ,                  Return to caller
         SPACE 2
         LTORG ,                   Define literal origin
         SPACE 2
         DROP  R4,R5,R7,R12        Drop addressabilities
         TITLE 'EX1RECV  -- First level recovery routine'
***********************************************************************
*                                                                     *
*        EX1RECV  - First level recovery for exit 1                   *
*                                                                     *
*                                                                     *
*   FUNCTION:                                                         *
*                                                                     *
*        This routine gets control if an abend occurs within          *
*        the sample exit.  The registers that are required for        *
*        retry processing are restored from the ERA ( Error           *
*        Recovery Area ).                                             *
*                                                                     *
*        Since the abend may have occurred while attempting           *
*        to return the exit 1 work area storage, an additional        *
*        $ESTAE recovery environment will be created to handle        *
*        an abend within this first level recovery routine.           *
*        Note that HASPTERM will pop the save areas until it          *
*        has found the save area level that issued the $ESTAE         *
*        give control to the recovery routine specified.              *
*                                                                     *
*                                                                     *
*   LINKAGE:                                                          *
*                                                                     *
*        Accessed via $CALL                                           *
*        Returned via $RETURN                                         *
*                                                                     *
*   REGISTER USAGE ( ENTRY/EXIT ):                                    *
*                                                                     *
*        REG          VALUE ON ENTRY         VALUE ON EXIT            *
*                                                                     *
*        R0           R0 at time of error      Unchanged              *
*        R1           ERA address              Unchanged              *
*        R2-R10       R2-R10 at time of error  Unchanged              *
*        R11          HCT address              Unchanged              *
*        R12          R12 at time of error     Unchanged              *
*        R13          PCE address              Unchanged              *
*        R14          Return address           Unchanged              *
*        R15          Entry address            Unchanged              *
*                                                                     *
*   RETURN CODES:                                                     *
*                                                                     *
*        None                                                         *
*                                                                     *
*   OTHER CONSIDERATIONS:                                             *
*                                                                     *
*        None                                                         *
*                                                                     *
***********************************************************************
         SPACE 2
         USING ERA,R8              Establish ERA addressability
         USING EX1RECV,R12         Establish local addressability
         SPACE 1
EX1RECV $SAVE  ,                   Save the caller's registers
         SPACE 2
         LR    R12,R15             Set local base register
         SPACE 1
         LR    R8,R1               Set ERA address
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        Establish second level ESTAE recovery environment.           *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
        $ESTAE RECADDR==A(EX1REC2),NAME=EX1RECV,RETRY=ENDRECOV,        C
               BASE=(R12)          Establish ESTAE environment
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*        Check if PCEUSER0 has address of exit work area by           *
*        verifying that the eyecatcher is valid.  If the              *
*        eyecatcher is valid release the storage obtained             *
*        for work areas needed to produce a separator page            *
*        ( see PRODSEP routine ).  The addresses pointing to          *
*        these work areas were previously saved in the exit           *
*        work area.                                                   *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
         ICM   R4,B'1111',PCEUSER0     Get work area address
         BZ    ENDRECOV                Bypass RETWORK if no storage
         XC    PCEUSER0,PCEUSER0       Clear PCEUSER0 field
         SPACE 1
         CLC   0(4,R4),=CL4'EX1W'      Check if work area      @430P329C
                                          eyecatcher is valid  @430P329
         BNE   ENDRECOV            Bypass RETWORK if not valid @430P329
         SPACE 1
         LA    R4,4(,R4)           Add 4 for eyecatcher
         USING EX1WORK,R4          Establish EX1WORK addressability
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        Release TU output area storage                               *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
         ICM   R1,B'1111',EX1TUADR     Load TU output area addr
         BZ    RELKEYL             Branch if no TU storage
         S     R1,$F4              Subtract 4 for eyecatcher
         SPACE 1
         XC    EX1TUADR,EX1TUADR       Set address to zero
         SPACE 1
        $RETWORK (R1)              Release the TU storage
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*        Release Key/TU pointer list storage area                     *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
RELKEYL  ICM   R1,B'1111',EX1KYLST     Load Key/TU ptr list addr
         BZ    RELSRWA             Branch if no Key/TU storage
         S     R1,$F4              Subtract 4 for eyecatcher
         SPACE 1
         XC    EX1KYLST,EX1KYLST       Set address to zero
         SPACE 1
        $RETWORK (R1)              Release the keylist storage
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*        Release SWBTUREQ RETRIEVE service work area storage          *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
RELSRWA  ICM   R1,B'1111',EX1SRWA      Load service work area addr
         BZ    ENDRECOV            Branch if no work storage
         S     R1,$F4              Subtract 4 for eyecatcher
         SPACE 1
         XC    EX1SRWA,EX1SRWA     Set address to zero
         SPACE 1
        $RETWORK (R1)              Release the working storage
         EJECT
***********************************************************************
*                                                                     *
*        Return to caller.                                            *
*                                                                     *
***********************************************************************
         SPACE 2
ENDRECOV $ESTAE CANCEL             Cancel 2nd level recovery environ
         SPACE 2
        $SETRP PERCOLATE           Percolate to callers recovery
         SPACE 2
        $RETURN ,                  Return to caller
         SPACE 2
         LTORG ,                   Define literal origin
         SPACE 2
         DROP  R4,R8,R12           Drop addressabilities
         TITLE 'EX1REC2  -- Second level recovery routine'
***********************************************************************
*                                                                     *
*        EX1REC2  - Second level recovery for sample exit 1           *
*                                                                     *
*                                                                     *
*   FUNCTION:                                                         *
*                                                                     *
*        This routine gets control if an abend occurs within          *
*        the first level recovery routine.                            *
*                                                                     *
*        If this is not the first time that this recovery             *
*        routine has been called, PERCOLATE to the first              *
*        level recovery routine ( EX1RECV ).  Otherwise,              *
*        resume processing at the retry label ENDRECOV in             *
*        EX1RECV.                                                     *
*                                                                     *
*                                                                     *
*   LINKAGE:                                                          *
*                                                                     *
*        Accessed via $CALL                                           *
*        Returned via $RETURN                                         *
*                                                                     *
*   REGISTER USAGE ( ENTRY/EXIT ):                                    *
*                                                                     *
*        REG          VALUE ON ENTRY         VALUE ON EXIT            *
*                                                                     *
*        R0           R0 at time of error      Unchanged              *
*        R1           ERA address              Unchanged              *
*        R2-R10       R2-R10 at time of error  Unchanged              *
*        R11          HCT address              Unchanged              *
*        R12          R12 at time of error     Unchanged              *
*        R13          PCE address              Unchanged              *
*        R14          Return address           Unchanged              *
*        R15          Entry address            Unchanged              *
*                                                                     *
*   RETURN CODES:                                                     *
*                                                                     *
*        None                                                         *
*                                                                     *
*   OTHER CONSIDERATIONS:                                             *
*                                                                     *
*        None                                                         *
*                                                                     *
***********************************************************************
         SPACE 2
         USING ERA,R8              Establish ERA addressability
         USING EX1REC2,R12         Establish local addressability
         SPACE 1
EX1REC2 $SAVE  ,                   Save the caller's registers
         SPACE 2
         LR    R12,R15             Set local base register
         SPACE 1
         LR    R8,R1               Set ERA address
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        If this is not the first time through this ESTAE             *
*        environment, PERCOLATE to next ESTAE recovery level.         *
*        Otherwise, retry at resume point stored in PRE.              *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
         CLC   PCEUSER1,$ZEROS     Has ESTAE been recently entered?
         BNE   EX1PERK               Yes, percolate
         MVC   PCEUSER1,$F1        Indicate ESTAE entered
         SPACE 1
         L     R1,ERAPRE                    Get PRE address
         MVC   ERAREG12,PREBASE-PRE(R1)     Set local base
         L     R2,PRERESUM-PRE(,R1)         Get resume address
         SPACE 2
        $SETRP RECOVER,RESUME=(R2)          Set recovery address
         SPACE 2
         B     ENDREC2             Return to caller
         SPACE 2
EX1PERK $SETRP PERCOLATE          Percolate to callers recovery
         EJECT
***********************************************************************
*                                                                     *
*        Return to caller.                                            *
*                                                                     *
***********************************************************************
         SPACE 2
ENDREC2 $RETURN ,                 Return to caller
         SPACE 2
         DROP  R8,R12             Drop addressabilities
         SPACE 2
         LTORG ,
         TITLE 'PRINT/PUNCH Separator Exit -- Data Definitions'
***********************************************************************
*                                                                     *
*               DATA DEFINITIONS                                      *
*                                                                     *
***********************************************************************
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*        All labels that will appear in the separator page            *
*        detail box are listed below.                                 *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
LBJOBID  DC    CL(L'BOXDESC)'JOBID='
LBSEGID  DC    CL(L'BOXDESC)'SEGMENT ID='
LBJOBNAM DC    CL(L'BOXDESC)'JOB NAME='
LBUSERID DC    CL(L'BOXDESC)'USER ID='
LBSYSCL  DC    CL(L'BOXDESC)'SYSOUT CLASS='
LBOUTGRP DC    CL(L'BOXDESC)'OUTPUT GROUP='
LBTITLE  DC    CL(L'BOXDESC)'TITLE='
LBDEST   DC    CL(L'BOXDESC)'DESTINATION='
LBNAME   DC    CL(L'BOXDESC)'NAME='
LBROOM   DC    CL(L'BOXDESC)'BIN= '                     SM 080800
LBBLDG   DC    CL(L'BOXDESC)'BUILDING='
LBDEPT   DC    CL(L'BOXDESC)'DEPARTMENT='
LBADDR   DC    CL(L'BOXDESC)'ADDRESS='
LBPRTIME DC    CL(L'BOXDESC)'PRINT TIME='
LBPRDATE DC    CL(L'BOXDESC)'PRINT DATE='
LBPRNAME DC    CL(L'BOXDESC)'PRINTER NAME='
LBSYSTEM DC    CL(L'BOXDESC)'SYSTEM='
         SPACE 1
TIMEMASK DC    X'21207A20207A2020'        TIME MASK
SEGMASK  DC    X'402020202020'            SEGMENT ID MASK
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        JULIAN date to standard DAY and MONTH conversion table.      *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
YEARTABL DC    AL1(31),C'JAN',AL1(28),C'FEB'
         DC    AL1(31),C'MAR',AL1(30),C'APR'
         DC    AL1(31),C'MAY',AL1(30),C'JUN'
         DC    AL1(31),C'JUL',AL1(31),C'AUG'
         DC    AL1(30),C'SEP',AL1(31),C'OCT'
         DC    AL1(30),C'NOV',AL1(255),C'DEC'
         SPACE 1
MONTHS   EQU   $REGSAVE,12*4       Save area for copy of above table
FEB      EQU   MONTHS+4            Entry for FEBRUARY
         TITLE 'PRINT/PUNCH Separator Exit -- OUTPUT Key List Equates'
***********************************************************************
*                                                                     *
*        OUTPUT JCL Keys List equates                                 *
*                                                                     *
***********************************************************************
         SPACE 2
KYLSTTL  EQU   0*SJTRKLEN               Title Key
KYLSTNM  EQU   1*SJTRKLEN               Name Key
KYLSTRM  EQU   2*SJTRKLEN               Room Key
KYLSTBL  EQU   3*SJTRKLEN               Building Key
KYLSTDP  EQU   4*SJTRKLEN               Dept key
KYLSTAD  EQU   5*SJTRKLEN               Address Key
         TITLE 'PRINT/PUNCH Separator Exit -- Exit 1 Work Area DSECT'
***********************************************************************
*                                                                     *
*        EXIT 1 WORK AREA DSECT                                       *
*                                                                     *
***********************************************************************
         SPACE 2
EX1WORK  DSECT
         DS    0F
EX1SWBRC DS    XL2                 SWBTUREQ logical error return code
EX1PLPTR DS    A                   Address of SWBTUREQ parameter list  C
                                     (the SWBTUREQ service requires    C
                                      R1 to point to a word that       C
                                      points to the parameter list)
EX1SRWA  DS    F                   Address of SWBTUREQ service         C
                                     working storage
EX1SRWL  DS    H                   Length of SWBTUREQ service          C
                                     working storage
EX1KYLST DS    F                   Address of the Key List             C
                                     used for SWBTUREQ SERVICE
EX1TUADR DS    F                   Address of TU output area           C
                                     used for SWBTUREQ SERVICE
EX1TUSZ  DS    H                   Size of the TU output area          C
                                     used for SWBTUREQ SERVICE
EX1ADNUM DS    H                   Number of lines of ADDRESS ( OUTPUT C
                                                 JCL keyword )
EX1SEGWA DS    XL6                 Segment number work area
         DS    0D
EX1CVDWA DS    D                   'Convert to decimal' work area
EX1DEST  DS    0CL16               Destination conversion
         DS    D                        work area
         DS    D
         DS    0F
EX1RETPL DS    XL(SJTRLGTH)        SWBTUREQ RETRIEVE parameter list
EX1WKLEN EQU   *-EX1WORK           Length of EX1WORK DSECT
         TITLE 'PRINT/PUNCH Separator Exit -- Separator Page Detail BoxC
                DSECT'
***********************************************************************
*                                                                     *
*        SEPARATOR PAGE DETAIL BOX LINE DSECT                         *
*                                                                     *
***********************************************************************
         SPACE 2
SEPDSECT DSECT                     Separator page detail box DSECT
PAGELINE DS    0CL132
         SPACE 1
BOXLINE  DS    0CL80
         SPACE 1
*---------------------------------------------------------------------*
*                                  COL           DESCRIPTION          *
*---------------------------------------------------------------------*
         SPACE 1
BOXCOL1  DS    CL1                 1             Frame Character
         DS    CL1                 2             Blank
BOXDESC  DS    CL13                3-15          Line Description
         DS    CL2                 16-17         Blanks
BOXINFO  DS    CL60                18-77         Line Information
         DS    CL2                 78-79         Blanks
BOXCOL80 DS    CL1                 80            Frame Character
         SPACE 1
         DS    CL52                Unused section
         SPACE 2
*---------------------------------------------------------------------*
*                                  COL           DESCRIPTION          *
*---------------------------------------------------------------------*
         SPACE 2
         ORG   BOXINFO                    Job ID Area
BOXJOBID DS    CL(L'JCTJOBID)       18-25         Job id
         SPACE 1
         ORG   BOXINFO+22                 Segment Area
BOXSGLBL DS    C'SEGMENT ID:  '    40-52         Segment ID label
BOXSGINF DS    CL5                 53-57         Segment ID Number
         SPACE 1
         ORG   BOXINFO                    Job Name Area
BOXJNAME DS    CL(L'JCTJNAME)      18-25         Job name
         SPACE 1
         ORG   BOXINFO                    User ID Area
BOXCRUID DS    CL(L'JOECRUID)      18-25         User ID
         SPACE 1
         ORG   BOXINFO                    Sysout class Area
BOXSYSCL DS    CL(L'JOECURCL)      18            Sysout class
         EJECT
*---------------------------------------------------------------------*
*                                  COL           DESCRIPTION          *
*---------------------------------------------------------------------*
         SPACE 2
         ORG   BOXINFO                    Destination Area
BOXDEST  DS    CL(L'EX1DEST)       18-25         Destination
         SPACE 1
         ORG   BOXINFO                    Programmer name Area
BOXPNAME DS    CL(L'JCTPNAME)      18-25         Programmer name
         SPACE 1
         ORG   BOXINFO                    Programmer room Area
BOXROOMN DS    CL(L'JCTROOMN)      18-25         Programmer room
         SPACE 1
         ORG   BOXINFO                    Print Time Area
BOXPRTIM DS    C'HH:MM:SS'         18-25         Print Time
         SPACE 1
         ORG   BOXINFO                    Print Date Area
BOXPRDAT DS    C'DD MMM YY'        18-26         Print Date
         SPACE 1
         ORG   BOXINFO                    Printer Name Area
BOXPDEVN DS    CL(L'DCTDEVN)       18-25         Printer Name
         SPACE 1
         ORG   BOXINFO                    System Name Area
BOXSYSTM DS    CL(L'$SID)          18-21         System Name
         EJECT
***********************************************************************
*        END OF DECLARES                                              *
***********************************************************************
         SPACE 1
&J2SECTN &J2SECTT ,                Restore code section        @430P270
         SPACE 1
         LTORG ,                   DEFINE LITERAL ORIGIN
         SPACE 1
         DROP  ,                   Kill addressabilities
         TITLE 'PRINT/PUNCH Separator Exit -- Module End ($MODEND)'
        $MODEND
APARNUM  DC    CL8'NONE   '        APAR NUMBER
PTFNUM   DC    CL8'NONE   '        PTF  NUMBER
         END   ,                   END OF STSCX01A
./ ADD NAME=LSES502J 0306-00234-05314-1426-00024-00018-00004-T0SM0
//T0SM502J JOB  (4030,37),'REDO--LSES502',CLASS=X,MSGCLASS=A,
//  REGION=6M,
//    NOTIFY=&SYSUID
//*
//*%PDSDOC 00 SMP APPLY LSES502
//S1       EXEC PGM=GIMSMP,
//         PARM='PROCESS=WAIT',
//         DYNAMNBR=120
//*
//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI  <== UPDATE TO YOUR CSI
//SMPHOLD  DD DUMMY
//SMPRPT   DD  SYSOUT=*
//SMPOUT   DD  SYSOUT=*
//SMPLIST  DD  SYSOUT=*
//*
//SMPPTFIN DD DISP=SHR,DSN=THIS.DATASET.NAME(LSES502) <== UPDATE DSN
//SMPCNTL  DD *
  SET BDY(GLOBAL) .
  REJECT S(LSES502) BYPASS(APPLYCHECK) .
  RESETRC.
  RECEIVE S(LSES502) SOURCEID(MELLON) .
  SET BDY(TARGET).                          <== UPDATE TO YOUR TGT
  APPLY REDO S(LSES502).
//
./ ADD NAME=LSES503  0205-00234-03317-2222-00328-00253-00001-T0SM1
++USERMOD(LSES503)
 /* ***************************************************************
    ** * USER EXIT 4 A                                         * **
    ***************************************************************
    */ .
++VER(Z038) FMID(HJE7707) .
++JCLIN.
//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSIN    DD   *
//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,
//            DCB=BUFNO=1
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=&&OBJSET(STSCX04A),UNIT=SYSDA,
//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)
//SYSLIN   DD   DSN=&&OBJ,
//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),
//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)
//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//         COND=(8,LT,STEPASM)
//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK
//SYSLIN   DD   *
 INCLUDE SYSPUNCH(STSCX04A)
 NAME STSCX04A(R)
/*
++SRC(STSCX04A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).
 PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1) '
* *%PDSDOC 00 MELLON EXIT 04 - PARSES /*ROUTE XEQ AND SET ENVIRONMENT
*********************************************************************
*                                                                   *
*                        HASP EXIT 4                                *
*                                                                   *
*     THIS EXIT GETS CONTROL WHENEVER JES2 ENCOUNTERS A JCL OR      *
*     JES2 CONTROL STATEMENT AND PERFORMS THE FOLLOWING FUNCTIONS:  *
*                                                                   *
*     > PARSES ANY "/*ROUTE XEQ RESNAME" CONTROL STATEMENTS THAT    *
*       HAVE BEEN SPECIFIED.  ANY MELLON RESOURCE NAME THAT HAS     *
*       BEEN SPECIFIED IS THEN CONVERTED TO A WLM SCHEDULING        *
*       ENVIRONMENT.                                                *
*                                                                   *
*     ENTRY POINT: EXIT04                                           *
*                                                                   *
*     INPUT REGISTERS:                                              *
*        R0     CODE INDICATING WHETHER A JES2 CONTROL OR JCL       *
*               STATEMENT IS BEING PROCESSED.                       *
*               0 = JES2 CONTROL STATEMENT                          *
*               4 = JCL STATEMENT                                   *
*        R1     POINTER TO A THREE WORD PARAMETER LIST FORMATTED    *
*               AS FOLLOWS:                                         *
*               +0  ADDRESS OF IMAGE BUFFER                         *
*               +4  ADDRESS OF RDWFLAGX                             *
*               +8  ADDRESS OF JCTXWRK                              *
*        R2-9   N/A                                                 *
*        R10    JCT ADDRESS OR ZERO                                 *
*        R11    HCT ADDRESS                                         *
*        R12    N/A                                                 *
*        R13    PCE ADDRESS                                         *
*        R14    RETURN ADDRESS                                      *
*        R15    ENTRY ADDRESS                                       *
*                                                                   *
*     OUTPUT REGISTERS:                                             *
*        R0-14  UNCHANGED                                           *
*        R15:   RETURN CODE                                         *
*                                                                   *
*     REGISTER USAGE(INTERNAL):                                     *
*        R0-9   WORK REGISTERS                                      *
*        R10    JCT ADDRESS                                         *
*        R11    HCT ADDRESS                                         *
*        R12    BASE REGISTER                                       *
*        R13    PCE ADDRESS                                         *
*        R14-15 WORK AND LINKAGE REGISTERS                          *
*                                                                   *
*     NOTE: THIS MODULE IS FOR USE WITH JES2 VERSION 6.0.4          *
*                                                                   *
*     AUTHOR: BOB BREAK                                             *
*             ST. LOUIS, MO.                                        *
*********************************************************************
* CHANGES:                                                          *
* 01/22/2001 - ALTER LOGIC AS FOLLOWS, INSTEAD OF CHECKING FOR A    *
* S. MCCOLLEY  VALID DESTID AND IF FOUND ASSUME A VALID JES2 ROUTE, *
*              CHECK NAME TO SEE IF IT IS A VALID SCHENV NAME AND   *
*              IF SO SET IT AS THE SCHENV REGUARDLESS OF WHETHER IT *
*              IS A VALID DESTINATION ID OR NOT.                    *
*                                                                   *
*********************************************************************
* *-*-*-----------------------------------------------------------*-*-*
* *-                                                                 -*
* *-     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE-*
* *-  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY-*
* *-  IS MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS   -*
* *-  ASSUMED FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY  -*
* *-  THE USE OF THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY  -*
* *-  TO EVALUATE THE USEFULLNESS OF THE MATERIAL.                   -*
* *-                                                                 -*
* *-     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO     -*
* *-  DATE, NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR        -*
* *-  EXTENSIONS MADE IN THE FUTURE.                                 -*
* *-                                                                 -*
* *-*-*-----------------------------------------------------------*-*-*

*
*    SPECIAL THANKS GO TO BOB BREAK OF ST. LOUIS FOR THE ORIGINAL CODE
*  TO PARSE THE "/*ROUTE XEQ RESNAME" CARDS AND SET THE APPROPRIATE
*  EXECUTION ENVIRONMENT.
*
*    SPECIAL THANKS TO JUDY RUNT OF WISCONSIN ELECTRIC FOR THE ORIGINAL
*  CODE TO HANDLE THE "/*CNTL BEFORE|AFTER|WITH,RESNAME" AND "/*CNTL
*  RESNAME,EXC|SHR" ROUTINES.  THE USE OF THE BLOCK EXTENSION REUSABLE
*  TABLES, BERT'S, TO EXTEND THE JCT AND JQE.

         COPY  $HASPGBL

STSCX04A $MODULE ENVIRON=JES2,                                         X
               RMODE=ANY,                                              X
               IBMJES2=SAMPLE,                                         X
               TITLE='JES2 EXIT4A ',                                   X
               SPLEVEL=NOCHECK,                                        X
               CVT,                                                    X
               PSA,                                                    X
               RPL,                                                    X
               $BUFFER,                                                X
               $CADDR,                                                 X
               $DCT,                                                   X
               $HASPEQU,                                               X
               $HCT,                                                   X
               $HCCT,                                                  X
               $JCT,                                                   X
               $JCTX,                                                  X
               $MIT,                                                   X
               $MITETBL,                                               X
               $PADDR,                                                 X
               $PARMLST,                                               X
               $PCE,                                                   X
               $PSV,                                                   X
               $RDRWORK,                                               X
               $SQD,                                                   X
               $TRE,                                                   X
               $USERCBS,                                               X
               $XECB

EXIT04A  $ENTRY BASE=R12            EXIT ROUTINE ENTRY POINT

*********************************************************************
*                                                                   *
*        SAVE CALLER'S REGISTERS AND ESTABLISH ADDRESSABILITIES.    *
*                                                                   *
*********************************************************************

         USING JCT,R10
EXIT000 $SAVE  NAME=STSCX04A       SAVE CALLER'S REGISTERS
         LR    R12,R15             SET BASE REGISTER

*********************************************************************
*                                                                   *
*        DETERMINE IF THIS EXIT WAS ENTERED FOR A JES2 CONTROL      *
*        STATEMENT.                                                 *
*                                                                   *
*********************************************************************

         LTR   R0,R0               PROCESSING JES2 CONTROL STATEMENT?
         BNZ   RETURN0             NO - BRANCH, RETURN

*********************************************************************
*                                                                   *
*        DETERMINE IF A JCT IS PRESENT.                             *
*                                                                   *
*********************************************************************

         LTR   R10,R10             JCT PRESENT?
         BZ    RETURN0             NO - BRANCH, RETURN

*********************************************************************
*                                                                   *
*        DETERMINE IF A "/*ROUTE XEQ" CONTROL STATEMENT IS BEING    *
*        PROCESSED.                                                 *
*                                                                   *
*********************************************************************

         L     R3,0(,R1)           GET CONTOL STATEMENT IMAGE ADDRESS
         CLC   ROUTCARD,0(R3)      "/*ROUTE " STATEMENT?
         BNE   RETURN0             NO - BRANCH, RETURN
* NEXT SEE IF THIS IS AN XEQ STATEMENT OR NOT
         LA    R3,L'ROUTCARD(R0,R3)  POINT PAST CONSTANT VALUE
         LA    R2,20               MAX VALUE TO LOOK FOR XEQ VALUE
FINDXEQ  EQU   *
         CLI   0(R3),C' '
         BE    LOOPXEQ            IF BLANK JUST KEEP LOOKING
         CLC   XEQ,0(R3)          WE ARE ONLY LOOKING FOR XEQ CARDS
         BE    XEQCARD              - IF WE FIND ONE, BRANCH AN CONT.
         B     RETURN0                - ELSE JUST QUIT ( GIVE TO JES)
LOOPXEQ  LA    R3,1(R0,R3)        BUMP POINTER IN ONE
         BCT   R2,FINDXEQ           - IF WE RUN OUT OF CARD -
         B     RETURN0            CAN NOT IDENTIFY, QUIT& GIVE 2 JES
XEQCARD  EQU   *
*********************************************************************
*                                                                   *
*        ISOLATE THE RESOURCE NAME OR JES2 DESTINATION.             *
*                                                                   *
*********************************************************************

         LA    R3,L'XEQ(R0,R3)     POINT PAST CONSTANT VALUE
         LA    R2,35(0,R0)        MAX VALUE TO LOOK OVER ON CARD
FINDNAME CLI   0(R3),C' '
         BNE   PASTXEQ            WE HAVE FOUND THE NAME VALUE
         LA    R3,1(R0,R3)        BUMP INTO CARD
         BCT   R2,FINDNAME         LIMIT SEARCH INTO CARD
         B     RETURN0            JUST LET JES2 FIGURE IT OUT
*
PASTXEQ  EQU   *                  R3 POINTS TO START OF INPUT VALUE
         LA    R1,16(R0,R3)         SET END - IN CASE NO END IS FOUND
         TRT   0(16,R3),TRANSTBL    FIND END OF RESOURCE NAME
         SLR   R1,R3                CALCULATE RESOURCE NAME LENGTH
         LR    R2,R1                SAVE RESOURCE NAME LENGTH
         CH    R2,=H'16'
         BNH   LT16OK                IF 16 OR LESS THEN CONTINUE AS IS
         LH    R2,=H'16'             FORCE A MAX. VALUE IF GT 16
LT16OK   EQU   *
         LTR   R2,R2              TEST FOR ZERO VALUE
         BZ    NOBCTR              IF ZERO DO NOT REDUCE
         BCTR  R2,R0                 REDUCE BY ONE FOR EXECUTE LATER
NOBCTR   EQU   *
*********************************************************************
*                                                                   *
*        DETERMINE IF THIS IS A MELLON ROUTING REQUEST OR IF IT IS  *
*        A VALID JES2 CONTROL STATEMENT MEANT TO ROUTE TO A DESTID  *
*                                                                   *
*********************************************************************
*                                                                   *
*             IF THE LOCATION FROM THE ROUTE STATEMENT IS A VALID   *
*             SCHENV VALUE THEN USE IT FOR ROUTING - ELSE LET JES2  *
*             HAVE THE STATEMENT TO PROCESS AS IS.                  *
*                                                                   *
*          DON'T LET JES HAVE THE SPECIAL CASE OF /*ROUTE XEQ HERE  *
*                                                                   *
*********************************************************************

        $GETWORK WORDS=0+(EXIT04WL+3)/4,  GET WORK AREA                X
               USE=WRK1,                   FOR WRK1                    X
               WAIT=YES                    WAIT FOR STORAGE
        LR    R4,R1                       GET ADDRESS OF WORK ARE
        USING EXIT04W,R4           ESTIABLISH USING FOR WRK AREA
        MVI   RESNAME,C' '                CLEAR THE RESOURCE NAME
        MVC   RESNAME+1(L'RESNAME-1),RESNAME
        MVC   RESNAME(0),0(R3)             MOVE THE RESOURCE NAME
        EX    R2,*-6                   SET SCHEDULING ENVIRONMENT
        CLC   RESNAME(5),=C'HERE '     IS THIS A SPECIAL CASE?
        BE    SETINJCT                   IS SO SKIP SETTING WITH WLM...
        MVC   IWMSEVWK(IWMSEVLN),IWMSEVL  SET IWMSEVAL PARM LIST

        IWMSEVAL SCHENV=RESNAME,MF=(E,IWMSEVWK)

        LTR   R15,R15
        BNZ   RETURN0W            YES - BRANCH, CONTINUE
*
* OLD LOGIC BELOW: IF VALID DESTID THEN LET JES2 HANDLE IT...
*

*********************************************************************
*                                                                   *
*        SET THE SCHEDULING ENVIRONMENT IN THE JCT.                 *
*                                                                   *
*********************************************************************

SETINJCT EQU   *
         MVI   JCTSCHEN,C' '        BLANK INIT SCHEDULING ENVIRONMENT
         MVC   JCTSCHEN+1(L'JCTSCHEN-1),JCTSCHEN  *
         MVC   JCTSCHEN(0),RESNAME  EXECUTED INSTRUCTION
         EX    R2,*-6               SET SCHEDULING ENVIRONMENT

*********************************************************************
*                                                                   *
*        CONVERT THE "/*ROUTE XEQ" STATEMENT TO A JCL COMMENT       *
*        STATEMENT.  THIS WILL PREVENT AN INVALID DESTINATION FROM  *
*        CAUSING A JCL ERROR.                                       *
*                                                                   *
*********************************************************************

         $RETWORK (R4)

         B     RETURN8              BRANCH - SET RETURN CODE = 8

*********************************************************************
*                                                                   *
*        RETURN TO CALLER.                                          *
*                                                                   *
*********************************************************************

RETURN0W EQU   *
         $RETWORK (R4)
RETURN0  XR    R15,R15              SET RETURN CODE = 0
         B     RETURN               BRANCH - CONTINUE
RETURN8  L     R15,$F8              SET RETURN CODE = 8
RETURN  $RETURN RC=(R15)            RETURN TO CALLER


         IWMSEVAL MF=(L,IWMSEVL)   IWMSEVAL PARM LIST
IWMSEVLN EQU   *-IWMSEVL
ROUTCARD DC    C'/*ROUTE '          "/*ROUTE XEQ" FIXED TEXT
XEQ      DC    C'XEQ '                 FLOATING MODIFIER VALUE
TRANSTBL DC    256X'00'             EXIT04 TRANSLATE TABLE
         ORG   TRANSTBL+C' '
         DC    X'FF'                ' '
         ORG   TRANSTBL+256
         LTORG

         DROP  R10                  JCT

        $MODEND ,
EXIT04W  DSECT                     EXIT04 WORKAREA
WORKID   DS    CL4                 WORK AREA ID
         DS    CL4                 FOR ALIGNMENT
RESNAME  DS    CL16                RESOURCE NAME
         DS    0D
IWMSEVWK DS    (IWMSEVLN)X         IWMSEVAL PARM LIST WORKAREA
EXIT04WL EQU   *-EXIT04W           EXIT04 WORKAREA LENGTH

         IWMSET
         IWMYCON

         END
./ ADD NAME=LSES503J 0406-00234-05314-1453-00023-00018-00013-T0SM0
//T0SM503J JOB  (4030,37),'REDO--LSES503',CLASS=X,MSGCLASS=A,
// REGION=6M,
//    NOTIFY=&SYSUID
//*%PDSDOC 00 SMP APPLY LSES503
//S1       EXEC PGM=GIMSMP,
//         PARM='PROCESS=WAIT',
//         DYNAMNBR=120
//*
//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI  <== UPDATE TO YOUR CSI
//SMPHOLD  DD DUMMY
//SMPRPT   DD  SYSOUT=*
//SMPOUT   DD  SYSOUT=*
//SMPLIST  DD  SYSOUT=*
//*
//SMPPTFIN DD DISP=SHR,DSN=THIS.DATASET.NAME(LSES503) <== UPDATE
//SMPCNTL  DD *
  SET BDY(GLOBAL) .
  REJECT S(LSES503) BYPASS(APPLYCHECK).
  RESETRC .
  RECEIVE S(LSES503) SOURCEID(MELLON) .
  SET BDY(TARGET).                      <== UPDATE TO YOUR TGT
  APPLY S(LSES503) REDO.
//
./ ADD NAME=LSES504  0303-00234-05123-1440-00682-00720-00001-T0SM0
++USERMOD(LSES504)
 /* ***************************************************************
    ** * USER EXIT 4 B                                         * **
    ***************************************************************
    */ .
++VER(Z038) FMID(HJE7707) REQ(LSES500) .
++JCLIN.
//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSIN    DD   *
//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,
//            DCB=BUFNO=1
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=&&OBJSET(STSCX04B),UNIT=SYSDA,
//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)
//SYSLIN   DD   DSN=&&OBJ,
//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),
//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)
//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//         COND=(8,LT,STEPASM)
//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK
//SYSLIN   DD   *
 INCLUDE SYSPUNCH(STSCX04B)
 NAME STSCX04B(R)
/*
++SRC(STSCX04B) SYSLIB(SHASSRC) DISTLIB(AHASSRC).
STSCX04B TITLE 'JECL CARD SCAN USER EXIT -- PROLOG'
*
* FUNCTIONS: THIS MODULE PROCESSES ALL OUR JECL STATEMENTS:
*            - /*BEFORE <JOBNAME>
*            - /*WITH <JOBNAME>
*            - /*AFTER  <JOBNAME>
*            - /*CNTL   <RESOURCE>(,SHR|EXC)
*
*
* NOTES:     NONE.
*
*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE
*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS
*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED
*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF
*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE
*  USEFULLNESS OF THE MATERIAL.
*
*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,
*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE
*  IN THE FUTURE.
*
*    SPECIAL THANKS GO TO BOB BREAK OF ST. LOUIS FOR THE ORIGINAL CODE
*  TO PARSE THE "/*ROUTE XEQ RESNAME" CARDS AND SET THE APPROPRIATE
*  EXECUTION ENVIRONMENT.
*
*    SPECIAL THANKS TO JUDY RUNT OF WISCONSIN ELECTRIC FOR THE ORIGINAL
*  CODE TO HANDLE THE "/*CNTL BEFORE|AFTER|WITH,RESNAME" AND "/*CNTL
*  RESNAME,EXC|SHR" ROUTINES.  THE USE OF THE BLOCK EXTENSION REUSABLE
*  TABLES, BERT'S, TO EXTEND THE JCT AND JQE.
*
* ENTRY PT:  EXIT04B -- SUNTRUST'S JECL CARD SCAN EXIT.
*
* REVISION HISTORY:
*
*   DATE   NAME         DESCRIPTION OF CHANGE
* -------- ------------ -----------------------------------------------
*
***********************************************************************
         SPACE 3
&RESOURC SETC  'NO'                ENABLE /*RESOURCE PROCESSING?
&DEBUG   SETC  'NO'                DEBUGGING FLAG (NO/YES)
         SPACE 3
         PRINT OFF                 SUPRESS PRINTING HASP GLOBALS
         COPY  $HASPGBL
         PRINT ON                  RESTORE FULL PRINTING
STSCX04B $MODULE TITLE='SUNTRUST JECL CARD SCAN USER EXIT',            +
               RMODE=ANY,                                              +
               ENVIRON=JES2,                                           +
               RPL,                                                    +
               $BUFFER,            GENERATE HASP BUFFER DSECT          +
               $CADDR,                                                 +
               $CMB,               ($RDRWORK)                          +
               $HASPEQU,           GENERATE HASP EQUATES               +
               $HCT,               GENERATE HASP HCT DSECT             +
               $HCCT,              ($JCTXGET)                          +
               $JCT,               GENERATE HASP JCT DSECT             +
               $JCTX,                                                  +
               $JQE,               GENERATE HASP JQE DSECT             +
               $MIT,               GENERATE HASP MIT DSECT             +
               $MITETBL,                                               +
               $PADDR,             GENERATE HASP PADDR DSECT           +
               $PARMLST,                                               +
               $PCE,               GENERATE HASP PCE DSECT             +
               $PSV,                                                   +
               $QSE,               ($HCT)                              +
               $RDRWORK,           GENERATE HASP RDRWORK DSECT         +
               $SAFINFO,           ($RDRWORK)                          +
               $TRE,               ($JCTXGET)                          +
               $XECB,              ($HCT)                              +
               $USERCBS            GENERATE USER CBS
         TITLE 'JECL CARD SCAN USER EXIT'
***********************************************************************
*
*         J C L  /  J E C L  S C A N  S U P P O R T
*
***********************************************************************
*
* ENTRY POINT DOCUMENTATION:
*
*     REGISTERS AT ENTRY;
*
*                   R0  =  0 - INDICATES JES2 CONTROL CARD
*                          4 - INDICATES JCL STATEMENT
*
*                   R1  = ADDRESS OF 3 WORD PARM LIST:
*                         WORD1 - (+0) ADDRESS OF THE CONTROL
*                                      STATEMENT IMAGE BUFFER
*                         WORD2 - (+4) ADDRESS OF THE EXIT FLAG
*                                      BYTE, RDWFLAGX, IN PCE
*                         WORD3 - (+8) ADDRESS OF THE JCTXWRK
*                                      FIELD IN THE JCT (80 BYTES)
*
*                   R2  = N/A
*                   R3  = N/A
*                   R4  = N/A
*                   R5  = N/A
*                   R6  = N/A
*                   R7  = N/A
*                   R8  = N/A
*                   R9  = N/A
*                   R10 = JCT (IF AVAILABLE)
*                   R11 = HCT
*                   R12 = N/A (WILL BE OUR BASE REGISTER)
*                   R13 = PCE
*                   R14 = RETURN ADDRESS
*                   R15 = ENTRY ADDRESS
*
***********************************************************************
         SPACE 1
         USING JCT,R10             ADDRESS THE JCT
         USING HCT,R11             ADDRESS THE HCT
         USING PCE,R13             ADDRESS THE PCE
*
EXIT04B  $ENTRY BASE=R12           PROVIDE PROCESSOR ENTRY POINT
         $SAVE ,                   SAVE CALLERS REGISTERS
         LR    R12,R15             ESTABLISH BASE
*
         LR    R9,R1               SAVE PARM REG 1
         L     R2,0(R9)            POINT TO STATEMENT IMAGE.
         TM    RDWFLAGX,RDWXCONT   IS THIS A CONTINUATION CARD
         BO    X004RC00            YES - RETURN TO JES2
         L     R3,8(R9)            POINT TO JCTXWRK TO BE SURE
         LTR   R3,R3                 WE ARE IN A JOB.
         BZ    X004RC00            NO -- RETURN TO JES2
         LTR   R10,R10             ARE WE IN A JOB (DOUBLE CHECK)
         BZ    X004RC00            NO -- RETURN TO JES2
         LTR   R0,R0               IS THIS A JES2 JECL STATEMENT?
         BZ    JECL                YES - GO PROCESS
         SPACE 1
**********************************************************************
*
*        J C L   C A R D S   P R O C E S S E D   H E R E
*
**********************************************************************
         SPACE 1
RJCLOK   DS    0H
         B     X004RC00            RETURN TO JES2
         SPACE 3
**********************************************************************
*
*        J E C L   C A R D S   P R C E S S E D   H E R E
*
**********************************************************************
         SPACE 1
JECL     DS    0H
         AIF   ('&DEBUG' EQ 'NO').NDBMSGS   SKIP DEBUGGING MESSAGES
         MVC   JCTXWRK(L'DBUGMSG0),DBUGMSG0   MOVE MSG TO BUFFER
         MVC   JCTXWRK+L'DBUGMSG0(30),0(R2)     AND 30 BYTES OF STMT
        $WTO   JCTXWRK,L'DBUGMSG0+30,JOB=YES, LOG THE MSG              X
               ROUTE=$LOG+$MAIN,CLASS=$TRIVIA,PRI=$ST
.NDBMSGS ANOP  ,                   SKIPPED DEBUGGING MESSAGES
         CLC   RCNTLCRD,2(R2)      IS THIS A /*CNTL CARD?
         BE    RCNTCARD            YES - GO PROCESS IT.
         CLC   RAFTRCRD,2(R2)      IS THIS A /*AFTER CARD?
         BE    RAFTCARD            YES - GO PROCESS IT.
         CLC   RWITHCRD,2(R2)      IS THIS A /*WITH CARD?
         BE    RWTHCARD            YES - GO PROCESS IT.
         CLC   RBEFRCRD,2(R2)      IS THIS A /*BEFORE CARD?
         BE    RBEFCARD            YES - GO PROCESS IT.
         CLC   RROUTCRD,2(R2)      IS THIS A /*ROUTE CARD?
         BE    RRUTCARD            YES - GO PROCESS IT.
         B     X004RC00            IF NONE OF THOSE RETURN TO JES
*
         TITLE 'JECL CARD SCAN USER EXIT -- /*BEFORE CARD'
**********************************************************************
*
*        / * B E F O R E   J E C L   C A R D
*
**********************************************************************
         SPACE 1
RBEFCARD DS    0H
         USING STJCTX,R7
         BAL   R7,JCTXGET          GET OUR JCT EXTENSION
         LTR   R7,R1               CHECK RETURN CODE / JCTX ADDR
         BZ    X004RC12            NO JCTX -- ERROR OUT
*
         OI    UJCXMFLG,UBRBEF     SHOW THERE IS A /*BEFORE CARD
         MVC   RDWMSG(L'RBEAFMSG),RBEAFMSG SET BEFORE AFTER MSG
         MVC   RDWMSG+7(6),=C'BEFORE' INDICATE TYPE ON MESSAGE
         LA    R2,8(,R2)           SET START OF SCAN FOR JOBNAME
         LA    R5,UJCXBFOR         WHERE TO SAVE THE NAME
         LA    R6,50               MAX POSITIONS TO SEARCH
*
* SKIP BLANKS BEFORE THE JOBNAME.
*
RFINDCAR DS    0H
         CLI   0(R2),C' '          CHECK FOR A BLANK
         BNE   RPUTNAM             NO -- FOUND START OF JOBNAME
         LA    R2,1(,R2)           POINT TO NEXT POSITION
         BCT   R6,RFINDCAR         LOOP TILL END
         B     RBADBEFR            ILLEGAL BEFORE CARD
*
* UPDATE THE JCTX WITH THE BEFORE/AFTER JOBNAME.
*
RPUTNAM  DS    0H
         MVC   0(8,R5),0(R2)       PUT NAME IN
         MVC   RDWMSG+24(8),0(R2)  MOVE JOBNAME INTO MESSAGE
         $WTO  RDWMSG,L'RBEAFMSG,JOB=YES,              PUT OUT         C
               ROUTE=$LOG+$MAIN,CLASS=$ACTION,PRI=$ST  THE MESSAGE
         B     X004RC08            GO TERMINATE NORMALLY
*
RBADBEFR EQU   *
         $MID  935                 SHOW MESSAGE ID.
         MVC   JCTXWRK(80),RBADBEFM SET IN ERROR MESSAGE
         OI    RDWFLAGX,RDWXXSEM   SHOW MESSAGE SUPPLIED
         B     X004RC12            GO TERMINATE JOB
*
         TITLE 'JECL CARD SCAN USER EXIT -- /*AFTER CARD'
*****************************************************************
*
*        / * A F T E R   J E C L   C A R D
*
*  SYNTAX: /*AFTER <JOBNAME>
*
*****************************************************************
         SPACE 1
RAFTCARD DS    0H
         BAL   R7,JCTXGET          GET OUR JCT EXTENSION
         LTR   R7,R1               CHECK RETURN CODE / JCTX ADDR
         BZ    X004RC12            NO JCTX -- ERROR OUT
*
         OI    UJCXMFLG,UBRAFT     SET TO /*AFTER CARD
         MVC   RDWMSG(L'RBEAFMSG),RBEAFMSG SET BEFORE/AFTER MSG
         MVC   RDWMSG+7(6),=C'AFTER ' INDICATE TYPE ON MESSAGE
         LA    R2,8(,R2)           SET START OF SCAN
         LA    R5,UJCXAFTN         SAVE IN AFTER NAME AREA
         LA    R6,50               MAX POSITIONS TO SEARCH
*
* SCAN FOR START OF JOB NAME
*
RFINDCA1 DS    0H
         CLI   0(R2),C' '          CHECK FOR A BLANK
         BNE   RPUTNAM             NO - FOUND START OF JOBNAME
         LA    R2,1(,R2)           POINT TO NEXT POSITION
         BCT   R6,RFINDCA1         LOOP TILL END
*
* NO JOBNAME FOUND -- ISSUE ERROR MESSAGE
*
         $MID  936                 SHOW MESSAGE ID.
         MVC   JCTXWRK(80),RBADAFTM SET IN ERROR MESSAGE
         OI    RDWFLAGX,RDWXXSEM   SHOW MESSAGE SUPPLIED
         B     X004RC12            GO TERMINATE JOB
*****************************************************************
*
*        / * W I T H    J E C L   C A R D
*
*  SYNTAX: /*WITH <JOBNAME>
*
*****************************************************************
RWTHCARD DS    0H
         BAL   R7,JCTXGET          GET OUR JCT EXTENSION
         LTR   R7,R1               CHECK RETURN CODE / JCTX ADDR
         BZ    X004RC12            NO JCTX -- ERROR OUT
*
         OI    UJCXMFLG,UBRWITHF   SET TO /*WITH CARD
         MVC   RDWMSG(L'RBEAFMSG),RBEAFMSG SET BEFORE/AFTER MSG
         MVC   RDWMSG+7(6),=C'WITH  ' INDICATE TYPE ON MESSAGE
         LA    R2,7(,R2)           SET START OF SCAN
         LA    R5,UJCXWITH         POINT TO WITH JOBNAME AREA
         LA    R6,50               MAX POSITIONS TO SEARCH
*
* SCAN FOR START OF JOB NAME
*
RFINDCAW DS    0H
         CLI   0(R2),C' '          CHECK FOR A BLANK
         BNE   RPUTNAM             NO - FOUND START OF JOBNAME
         LA    R2,1(,R2)           POINT TO NEXT POSITION
         BCT   R6,RFINDCAW         LOOP TILL END
*
* NO JOBNAME FOUND -- ISSUE ERROR MESSAGE
*
         $MID  936                 SHOW MESSAGE ID.
         MVC   JCTXWRK(80),RBADAFTM SET IN ERROR MESSAGE
         OI    RDWFLAGX,RDWXXSEM   SHOW MESSAGE SUPPLIED
         B     X004RC12            GO TERMINATE JOB
         TITLE 'JECL CARD SCAN USER EXIT -- /*CNTL CARD'
**********************************************************************
*
*        / * C N T L   J E C L   C A R D
*
*  SYNTAX: /*CNTL  <RESOURCE>(,SHR|EXC)
*
**********************************************************************
         SPACE 1
RCNTCARD DS    0H
         BAL   R7,JCTXGET          GET OUR JCT EXTENSION
         LTR   R7,R1               CHECK RETURN CODE / JCTX ADDR
         BZ    X004RC12            NO JCTX -- ERROR OUT
*
         OI    UJCXMFLG,UBRCNTL    SET TO /*CNTL CARD
         LA    R2,6(,R2)           SET START OF SCAN
         LA    R4,30               MAX FOR SEARCH
*
* SCAN FOR START OF RESOURCE NAME
*
RCTLFIND DS    0H
         CLI   0(R2),C' '          CHECK FOR A BLANK
         BNE   RCTLGOT             NO - GOT NEXT WORD
         LA    R2,1(,R2)           BUMP TO NEXT POSITION
         BCT   R4,RCTLFIND         CONTINUE
         B     RBADCNTL            ERROR IF HERE
*
* SCAN FOR END OF RESOURCE NAME
*
RCTLGOT  DS    0H
         LA    R4,8                MAX FOR SEARCH
         LR    R6,R2               SAVE STARTING POINT
         MVC   RDWMSG(L'RCNTMSG1),RCNTMSG1 SET IN RESOURCE MSG
         MVC   RDWMSG+22(12),0(R2) MOVE IN CONTROL INFO.
         $WTO  RDWMSG,L'RCNTMSG1,JOB=YES,     PUT OUT                  X
               ROUTE=$LOG+$MAIN,CLASS=$ACTION,PRI=$ST THE MSG
*
* SCAN FOR END OF RESOURCE NAME
*
REXCFIND DS    0H
         CLI   1(R6),C','          CHECK FOR A COMMA
         BE    REXCGOT             YES - GOT IT
         CLI   1(R6),C' '          BLANK TERMINATES NAME ALSO
         BE    REXCGOT             GOT IT
         LA    R6,1(,R6)           POINT TO NEXT POSITION
         BCT   R4,REXCFIND         CONTINUE
         B     RBADCNTL            ERROR IF HERE
*
* CHECK TYPE OF CONTROL DESIRED (SHR OR EXC) AND SET FLAGS ACCORDINGLY
*
REXCGOT  DS    0H
         CLC   2(3,R6),=C'EXC'     EXCLUSIVE CNTL DESIRED
         BNE   RTRYSHR             NO TRY SHR
         MVI   UJCXWORK,C'E'       SHOW ITS EXCLUSIVE
*
* ADD THE NAME AND THE SHARING TYPE TO UJCXDNAM.
*
REXCPUT  DS    0H
         SR    R6,R2               GET LENGTH-1 OF RESOURCE NAME
         SLR   R5,R5               ZERO FOR IC
         IC    R5,UJCXMFLG         FLAGS AND CNTL COUNT
         SRL   R5,4                SHIFT OUT FLAGS
RCTLCTL  DS    0H
         LA    R1,UBRNCTL          MAX # OF NAMES
         CR    R5,R1               LESS THAN MAX #
         BNL   RBADCNT1            NO - TOO MANY SPECIFICATIONS
         MH    R5,=Y(UBRDNAML)     MULTIPLY BY FIELD LENGTH
         LA    R1,UJCXDNAM(R5)     PROPER NAME DISPLACEMENT
         MVC   0(8,R1),$BLANKS     BLANK OUT NAME
         EX    R6,RMOVCNTL         MOVE CNTL NAME TO UJCXDNAM
         MVC   8(1,R1),UJCXWORK    COPY THE SHARE TYPE BYTE TO UJCXDNAM
*
         IC    R5,UJCXMFLG         GET FLAGS AND CNTL COUNT
         LA    R5,16(0,R5)         INCREMENT CNTL COUNT BY ONE
         STC   R5,UJCXMFLG         UPDATE CNTL COUNT
         B     X004RC08            GO END NORMALLY
*
RMOVCNTL MVC   0(0,R1),0(R2)       MOVE CNTL NAME TO UJCXDNAM
*
RTRYSHR  DS    0H
         MVI   UJCXWORK,C'S'       SHOW ITS SHARE
         CLC   2(3,R6),=C'SHR'     IS IT SHR
         BE    REXCPUT             YES, MOVE NAME AND EXIT
         CLI   1(R6),C' '          BLANK (DEFAULT)
         BE    REXCPUT             YES - MOVE NAME AND EXIT
*
RBADCNTL MVC   JCTXWRK(80),RBADCNTM SET IN ERROR MESSAGE
         $MID  937                 SHOW MESSAGE ID.
         OI    RDWFLAGX,RDWXXSEM   SHOW MESSAGE SUPPLIED
         B     X004RC12            GO TERMINATE JOB
*
RBADCNT1 DS    0H
         $MID  938                 SHOW MESSAGE ID.
         MVC   JCTXWRK(80),RBADCTL1 SET IN ERROR MESSAGE
         OI    RDWFLAGX,RDWXXSEM   SHOW MESSAGE SUPPLIED
         B     X004RC12            GO TERMINATE JOB
*
         TITLE 'JECL CARD SCAN USER EXIT -- /*ROUTE CARD'
***********************************************************************
*
*        / * R O U T E   J E C L   C A R D
*
*  SYNTAX: /*ROUTE XEQ  <RESOURCE>
*
***********************************************************************
         SPACE 1
RRUTCARD DS    0H
         LA    R2,7(,R2)           SET START OF SCAN
         LA    R4,30               MAX FOR SEARCH
*
* SCAN FOR "XEQ" OR OTHER TYPE OF ROUTING (PRINT/PUNCH)
*
RRUTFIND CLI   0(R2),C' '          CHECK FOR A BLANK
         BNE   RROUTGOT            NO -- FOUND ROUTING TYPE
         LA    R2,1(,R2)           BUMP TO NEXT POSITION
         BCT   R4,RRUTFIND         CONTINUE
         B     X004RC00            ERROR IF HERE, LET JES FIND IT
*
RROUTGOT DS    0H
         CLC   0(3,R2),=C'XEQ'     IS IT RESOURCE ROUTING?
         BNE   X004RC00            NO -  RETURN TO JES2
*
* SCAN FOR RESOURCE NAME
*
RXEQCARD DS    0H
         LA    R2,3(,R2)           SET FOR THIRD OPERAND
         LA    R3,60               MAXIMUM LENGTH FOR SEARCH
*
RRCOMP3  CLI   0(R2),C' '          CHECK FOR A BLANK
         BNE   RXEQOP3             NO - PROCESS THIRD OPERAND
         LA    R2,1(R2)            STEP TO NEXT CHARACTER
         BCT   R3,RRCOMP3          LOOP TILL END
         B     RBADROUT            ERROR IF END OF CARD
*
RXEQOP3  DS    0H
*                                  SPECIALIZED PROCESSING FOR
*                                  /*ROUTE XEQ STUFF STATEMENTS COULD
*                                  BE PLACED HERE..... NORMAL ROUTING
*                                  IS HANDLED IN EXIT04A
         B     X004RC00            NO -- MAY BE JES2 EXECUTION         X
                                         ROUTING CARD; GIVE TO JES2
         SPACE 2
RBADROUT DS    0H
         $MID  940                 SHOW MESSAGE ID.
         MVC   JCTXWRK(80),RBADRUTM MOVE ERROR MESSAGE INTO WORK AREA
         MVC   JCTXWRK+9(8),0(R2)  SET RESOURCE NAME INTO MESSAGE
         OI    RDWFLAGX,RDWXXSEM   SHOW MESSAGE SUPPLIED
         B     X004RC12            GO TERMINATE JOB
         EJECT
***********************************************************************
*
*     C O M M O N   R E T U R N   P O I N T S
*
***********************************************************************
         SPACE 3
X004RC00 DS    0H
         XR    R15,R15             SET RC=0 -- CALL OTHER EXITS
         B     X004RTN             GO RETURN
         SPACE 2
X004RC08 DS    0H
         LA    R15,8               SET RC=8 -- EXIT HANDLED THE CARD
         B     X004RTN             GO RETURN
         SPACE 2
X004RC12 DS    0H
         LA    R15,12              SET RC=12 -- CANCEL THE JOB
         B     X004RTN             GO RETURN
         SPACE 2
X004RTN  DS    0H                  COMMON RETURN
         $RETURN RC=(R15)          RETURN TO CALLER
         TITLE 'JECL CARD SCAN USER EXIT -- CONSTANTS AND DSECTS'
***********************************************************************
*
*        MISCELLANEOUS CONSTANTS AND DSECTS FOR JCL/JECL SCAN
*
***********************************************************************
DBLWORD  DS    D                   DOUBLE WORD WORK AREA
RES1DGIT DS    CL1                 1 DIGIT STORAGE AREA
RES2DGIT DS    CL2                 2 DIGIT STORAGE AREA
*
RJOBPCRD DC    C'JOBPARM '         JES2   /*JOBPARM CARD ID.
RCNTLCRD DC    C'CNTL'             MELLON /*CNTL    CARD ID.
RWITHCRD DC    C'WITH'             MELLON /*WITH    CARD ID.
RAFTRCRD DC    C'AFTER'            MELLON /*AFTER   CARD ID.
RBEFRCRD DC    C'BEFORE'           MELLON /*BEFORE  CARD ID.
RROUTCRD DC    C'ROUTE'            JES2   /*ROUTE   CARD ID.
RRESCRD  DC    C'RESOURCE'         STSC  /*RESOURCE CARD ID.
*
JOBPEYEC DC    CL8'**COPY**'       EYECATCHER FOR OUR /*JOBPARM CARD
*
JOBPOUTM DC    CL80'OUTNAME VALUE IS MISSING OR LONGER THAN 8 CHARACTERX
               S.'
*
RBADBEFM DC    CL80'JOBNAME SPECIFIED ON /*BEFORE STATEMENT IS INVALID.X
               '
*
RBADAFTM DC    CL80'JOBNAME SPECIFIED ON /*AFTER STATEMENT IS INVALID.'
*
RBADCNTM DC    CL80'PARM SPECIFIED ON /*CNTL STATEMENT IS INVALID.'
*
RBADCTL1 DC    CL80'THERE HAVE BEEN TOO MANY /*CNTL CARDS SPECIFIED.  TX
               HE MAXIMUM IS 4.'
*
ROUTORDM DC    CL80'/*BEFORE AND /*AFTER STATEMENTS ARE OUT OF ORDER.'
*
RBADRUTM DC    CL80'RESOURCE RRRRRRRR SPECIFIED ON ROUTE CARD INVALID.'
*
         AGO   .RRNITE3            SKIP RESOURCE ROUTING MESSAGES
RCPUMSG1 DC    CL80'CPU SPECIFIED ON ROUTE CARD INVALID.'
*
RROUMSG1 $MSG  942,'* -- RESOURCE ROUTING = ******** --'
.RRNITE3 ANOP  ,                   SKIPPED ROUTING MESSAGES
*
         AIF   ('&RESOURC' EQ 'NO').NORES2 SKIP /*RESOURCE CARD
RBADRESM DC    CL80'PARM SPECIFIED ON /*RESOURCE CARD IS INVALID.'
*
RRESMSG1 $MSG  945,'* -- RESOURCE INFO = *********** --'
.NORES2  ANOP  ,                   SKIPPED /*RESOURCE CARD PROCESSING
*
RCNTMSG1 $MSG  943,'* -- CONTROL INFO = ************ --'
*
RBEAFMSG $MSG  944,'* -- ****** JOBNAME = ********   --'
*
         AIF   ('&DEBUG' EQ 'NO').NDBMSGT   SKIP DEBUGGING MESSAGES
DBUGMSG0 $MSG  000,'STSCX04B DEBUG:  JECL='
.NDBMSGT ANOP  ,                   SKIPPED DEBUGGING MESSAGES
*
         SPACE 2
         SPACE 2
         LTORG ,
*
         TITLE 'JECL CARD SCAN USER EXIT -- GET OUR JCT EXTENSION'
**********************************************************************
*
* SUBROUTINE TO LOCATE OUR JCT EXTENSION
*
* ENTRY POINT DOCUMENTATION:
*
* CALLING SEQUENCE:
*
*        BAL   R7,JCTXGET          GET OUR JCT EXTENSION
*        LTR   RX,R1               GET JCTX ADDR / RETURN CODE
*        BZ    NOJCTX              NO JCTX
*
* REGISTER USAGE:
*
*     ON ENTRY    USAGE WITH SUBROUTINE                  ON RETURN
*     ----------- -------------------------------------- -------------
* R0  N/A         USED BY $JCTXGET                       DESTROYED
* R1  N/A         USED BY $JCTXGET                       ADDR OF JCTX
* R2  N/A         UNUSED                                 NO CHANGE
* R3  N/A         UNUSED                                 NO CHANGE
* R4  N/A         UNUSED                                 NO CHANGE
* R5  N/A         UNUSED                                 NO CHANGE
* R6  N/A         UNUSED                                 NO CHANGE
* R7  RETURN ADDR UNUSED                                 NO CHANGE
* R8  N/A         UNUSED                                 NO CHANGE
* R9  N/A         UNUSED                                 NO CHANGE
* R10 JCT ADDR    ADDRESS OF THE JCT (MUST BE VALID)     NO CHANGE
* R11 HCT ADDR    UNUSED                                 NO CHANGE
* R12 BASE REG    BASE REG                               NO CHANGE
* R13 PCE ADDR    UNUSED                                 NO CHANGE
* R14 N/A         UNUSED                                 NO CHANGE
* R15 N/A         UNUSED                                 NO CHANGE
*
**********************************************************************
         SPACE 1
JCTXGET  DS    0H
        $JCTXGET  JCT=(R10),       GET OUR JCT EXTENSION               X
               TYPE='USER',MOD=1,                                      X
               NOTFOUND=MAKEJCTX,                                      X
               FOUND=GOTJCTX,                                          X
               ERRET=BADJCTX       SPECIFY ERROR RETURN
GOTJCTX  BR    R7                  RETURN WITH JCTX ADDR IN R1
MAKEJCTX EQU   *
        $JCTXADD  JCT=(R10),       GET OUR JCT EXTENSION               X
               TYPE='USER',MOD=1,                                      X
               LENGTH=UJCXSLN1,                                        X
               OKRET=GOTJCTX,      GOOD RETURN ( WE MADE ONE )         X
               NOSPACE=JCTXSERR,   NO SPACE LEFT TO ADD A JCTX         X
               FOUND=LOGICERR,     THIS SHOULD NOT HAPPEN              X
               ERRET=BADJCTX       SPECIFY ERROR RETURN
BADJCTX  DS    0H
         L     R1,=A(BADJCTXM)     GET MSG ADDRESS
         LA    R0,L'BADJCTXM       GET MSG LENGTH
        $WTO   (R1),(R0),ROUTE=$MAIN,CLASS=$ALWAYS
         SR    R1,R1               ZERO FOR ERROR RETURN CODE
         BR    R7                  RETURN WITH ERROR
*
BADJCTXM $MSG  999,'STSCX04B-E UNABLE TO LOCATE JCTX.'
LOGICERR DS    0H
         L     R1,=A(LOGERRM)      GET MSG ADDRESS
         LA    R0,L'LOGERRM        GET MSG LENGTH
        $WTO   (R1),(R0),ROUTE=$MAIN,CLASS=$ALWAYS
         SR    R1,R1               ZERO FOR ERROR RETURN CODE
         BR    R7                  RETURN WITH ERROR
*
LOGERRM  $MSG  999,'STSCX04B-E LOGIC ERROR CREATING JCTX.'
JCTXSERR DS    0H
         L     R1,=A(SPCERRM)      GET MSG ADDRESS
         LA    R0,L'SPCERRM        GET MSG LENGTH
        $WTO   (R1),(R0),ROUTE=$MAIN,CLASS=$ALWAYS
         SR    R1,R1               ZERO FOR ERROR RETURN CODE
         BR    R7                  RETURN WITH ERROR
*
SPCERRM  $MSG  999,'STSCX04B-E NO SPACE LEFT FOR NEW JCTX.'
         AGO   .NORTXT2            SKIP TO VERIFY NOT USED ANYMORE
         TITLE 'JECL CARD SCAN USER EXIT -- TEXT SCAN SUBROUTINE'
**********************************************************************
*
*               T E X T   S C A N   R O U T I N E
*
**********************************************************************
* ENTRY POINT DOCUMENTATION:
*
*     REGISTERS AT ENTRY;
*
*                   R0  = ADDRESS OF TEXT ARGUMENT -
*                         1 BYTE MACHINE LEN + TEXT
*                   R1  = ADDRESS OF 80 BYTE CARD IMAGE
*                   R10 = JCT
*                   R11 = HCT
*                   R12 = R12
*                   R13 = PCE
*                   R14 = RETURN
*                   R15 = ENTRY
*
*     REGISTERS AT EXIT;
*
*                   R1  =       = ADDRESS OF TEXT (IF LOCATED)
*                   R15 =  00   = TEXT LOCATED
*                       =  04   = TEXT NOT LOCATED
*
**********************************************************************
         SPACE 1
         USING JCT,R10             ADDRESS THE JCT
         USING HCT,R11             ADDRESS THE HCT
         USING PCE,R13             ADDRESS THE PCE
         SPACE 3
RTXTSCAN $ENTRY BASE=R12           ROUTINE ENTRY POINT
         $SAVE ,                   SAVE CALLERS REGISTERS
         LR    R12,R15             ESTABLISH BASE
*                                  R1 => CARD IMAGE
         LA    R2,1                R2 => INCREMENT
         LA    R3,79(,R1)          R3 => SEARCH TERMINATION POINT
         LR    R4,R0               COPY PARM REG 0
         XR    R5,R5               CLEAR FOR WORK
         IC    R5,0(,R4)           R5 = MACHINE TEXT STRING LEN
         LA    R4,1(,R4)           R4 => TARGET TEXT STRING
         SR    R3,R5               R3 => ADJUSTED TERMINATION
         SPACE 1
RTXTLOOP DS    0H                  LOOP SEARCHING FOR TEXT
         EX    R5,RTXTCLC          IS THIS A MATCH ??
         BE    RTXTFND             YES, EXIT LOOP
         BXLE  R1,R2,RTXTLOOP      NO, INCREMENT & LOOP AGAIN
         LA    R15,4               SET RC=4
         B     RTXTEXIT            GO RETURN TO CALLER
         SPACE 1
RTXTFND  DS    0H                  SPECIFIED TEXT FOUND
         $STORE (R1)               PASS BACK POINTER TO TEXT
         XR    R15,R15             SET RC=0
RTXTEXIT DS    0H
         $RETURN RC=(R15)          RETURN TO CALLER
         SPACE 1
RTXTCLC  CLC   0(*-*,R1),0(R4)     *** E X E C U T E D   ***
         SPACE 1
         LTORG ,                   EXPAND LITERAL POOL HERE
         SPACE 1
         DROP  R10,R11,R13
.NORTXT2 ANOP  ,
         TITLE 'JECL CARD SCAN USER EXIT -- EPILOG'
         $MODEND ,
         END   ,
./ ADD NAME=LSES504J 0404-00234-05314-1427-00023-00018-00004-T0SM0
//T0SM504J JOB  (4030,37),'REDO--LSES504',CLASS=X,MSGCLASS=A,
//  REGION=6M,
//    NOTIFY=&SYSUID
//*
//*%PDSDOC 00 SMP APPLY LSES504
//S1       EXEC PGM=GIMSMP,
//         PARM='PROCESS=WAIT',
//         DYNAMNBR=120
//*
//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI <== UDPATE TO YOUR CSI
//SMPHOLD  DD DUMMY
//SMPRPT   DD  SYSOUT=*
//SMPOUT   DD  SYSOUT=*
//SMPLIST  DD  SYSOUT=*
//*
//SMPPTFIN DD DISP=SHR,DSN=THIS.DATA.SET.NAME(LSES504) <== UPDATE
//SMPCNTL  DD *
  SET BDY(GLOBAL) .
  REJECT S(LSES504) BYPASS(APPLYCHECK).
  RESETRC .
  RECEIVE S(LSES504) SOURCEID(MELLON) .
  SET BDY(TARGET).                         <== UPDATE TO YOUR TGT
  APPLY S(LSES504) REDO.
./ ADD NAME=LSES505  0202-00234-03317-2235-00777-00786-00001-T0SM1
++USERMOD(LSES505)
 /* ***************************************************************
    ** * USER EXIT 5 A                                         * **
    ***************************************************************
    */ .
++VER(Z038) FMID(HJE7707) .
++JCLIN.
//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSIN    DD   *
//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,
//            DCB=BUFNO=1
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=&&OBJSET(STSCX05A),UNIT=SYSDA,
//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)
//SYSLIN   DD   DSN=&&OBJ,
//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),
//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)
//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//         COND=(8,LT,STEPASM)
//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK
//SYSLIN   DD   *
 INCLUDE SYSPUNCH(STSCX05A)
 NAME STSCX05A(R)
/*
++SRC(STSCX05A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).
 PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1,REUS=REFR) '
* *%PDSDOC 00 JES2 EXIT05 ADDS $REPEXIT AND $ADDEXIT COMMANDS
*********************************************************************
*                                                                   *
*                        HASP EXIT 05                               *
*                                                                   *
*     THIS EXIT PROCESSES THE $REPEXIT AND $ADDEXIT JES2 COMMANDS   *
*                                                                   *
*     > $REPEXIT - REPLACE A JES2 EXIT MODULE.  COMMAND SYNTAX IS   *
*                  "$REPEXIT,MODNAME".  THE FOLLOWING RULES AND     *
*                  RESTRICTIONS APPLY TO THE USE OF $REPEXIT:       *
*               1. THE EXIT MODULE TO BE REPLACED MUST BE A JES2    *
*                  MODULE.  THE EXIT ENVIRONMENT MAY BE "JES2",     *
*                  "SUBTASK", "USER", OR "FSS".                     *
*               2. THE EXIT MODULE MUST HAVE BEEN PREVIOUSLY LOADED *
*                  BY A LOADMOD JES2PARM STATEMENT, OR HASPINIT     *
*                  DURING THE LAST JES2 INITIALIZATION, OR BY A     *
*                  PREVIOUS $REPEXIT COMMAND.                       *
*               3. THE ROUTINE NAMES AND NUMBER OF ROUTINES THAT    *
*                  ARE ASSOCIATED WITH THE EXIT CANNOT BE CHANGED - *
*                  $REPEXIT WILL IGNORE NEW/CHANGED ROUTINE NAMES.  *
*                  IF EITHER OF THESE NEEDS TO BE CHANGED, USE THE  *
*                  $ADDEXIT COMMAND TO ADD A NEW EXIT LOAD MODULE.  *
*               4. IF THE ORIGINAL MODULE RESIDES IN THE JES2       *
*                  PRIVATE AREA, THE NEW COPY WILL BE LOADED INTO   *
*                  JES2 PRIVATE.  IF THE ORIGINAL MODULE DOES NOT   *
*                  RESIDE IN THE JES2 PRIVATE AREA, THE NEW COPY    *
*                  WILL BE LOADED INTO CSA.                         *
*               5. THE NEW COPY OF THE MODULE MUST BE FOUND IN AN   *
*                  APF AUTHORIZED LNKLSTXX LIBRARY.                 *
*     > $ADDEXIT - ADD A JES2 EXIT MODULE.  COMMAND SYNTAX IS       *
*                  "$ADDEXIT,MODNAME,EXIT#".  EXIT# CAN RANGE FROM  *
*                  1 TO 255 AND MUST BE SPECIFIED.                  *
*                  THE FOLLOWING RULES AND RESTRICTIONS APPLY TO    *
*                  THE USE OF $ADDEXIT:                             *
*               1. THE EXIT MODULE TO BE ADDED MUST BE A JES2       *
*                  MODULE.  THE EXIT ENVIRONMENT MAY BE "JES2",     *
*                  "SUBTASK", "USER", OR "FSS".                     *
*               2. THE EXIT MUST NOT BE CURRENTLY DEFINED TO JES2   *
*                  OR A NEW COPY WILL NOT BE LOADED AND DEFINED.    *
*               3. THE NEW EXIT MODULE WILL BE LOADED INTO EITHER   *
*                  JES2 PRIVATE OR CSA, DEPENDING ON THE EXIT       *
*                  ENVIRONMENT.                                     *
*               4. THE COPY OF THE EXIT MODULE TO BE ADDED MUST BE  *
*                  FOUND IN AN APF AUTHORIZED LNKLSTXX LIBRARY.     *
*               5. THE NEWLY ADDED EXIT MODULE AND ROUTINES MUST BE *
*                  DEFINED IN JES2PARM BEFORE THE NEXT TIME JES2 IS *
*                  RESTARTED.  IF THIS IS NOT DONE, AN EXIT MODULE  *
*                  THAT WAS LOADED INTO JES2 PRIVATE WILL BE LOST   *
*                  ON A SUBSEQUENT RESTART.                         *
*                                                                   *
*     ENTRY POINT: EXIT05                                           *
*                                                                   *
*     INPUT REGISTERS:                                              *
*        R0-4   N/A                                                 *
*        R5     POINTER TO CURRENT OPERAND ADDRESS                  *
*        R6     INCREMENT VALUE OF 4                                *
*        R7     POINTER TO ADDRESS OF LAST OPERAND                  *
*        R8-10  N/A                                                 *
*        R11    HCT ADDRESS                                         *
*        R12    N/A                                                 *
*        R13    PCE ADDRESS                                         *
*        R14    RETURN ADDRESS                                      *
*        R15    ENTRY ADDRESS                                       *
*                                                                   *
*     OUTPUT REGISTERS:                                             *
*        R0     UNCHANGED OR $CRET MESSAGE LENGTH                   *
*        R1-14  UNCHANGED                                           *
*        R15    RETURN CODE                                         *
*                                                                   *
*     REGISTER USAGE(INTERNAL):                                     *
*        R0-8   WORK REGISTERS                                      *
*        R9     WORKAREA ADDRESS                                    *
*        R10    JCT ADDRESS                                         *
*        R11    HCT ADDRESS                                         *
*        R12    BASE REGISTER                                       *
*        R13    PCE ADDRESS                                         *
*        R14-15 WORK AND LINKAGE REGISTERS                          *
*                                                                   *
*     AUTHOR: BOB BREAK                                             *
*             ST. LOUIS, MO.                                      *
*                                                                   *
*********************************************************************

         COPY  $HASPGBL

STSCX05A $MODULE ENVIRON=JES2,                                         X
               RMODE=ANY,                                              X
               IBMJES2=SAMPLE,                                         X
               TITLE='JES2 USER EXIT5A',                               X
               CVT,                                                    X
               PDS,                                                    X
               PSA,                                                    X
               RPL,                                                    X
               $BUFFER,                                                X
               $CADDR,                                                 X
               $CAT,                                                   X
               $COMWORK,                                               X
               $DCT,                                                   X
               $HASPEQU,                                               X
               $HCT,                                                   X
               $HCCT,                                                  X
               $JCT,                                                   X
               $JCTX,                                                  X
               $JOE,                                                   X
               $JQE,                                                   X
               $LMT,                                                   X
               $MIT,                                                   X
               $MITETBL,                                               X
               $PCE,                                                   X
               $PIT,                                                   X
               $PSV,                                                   X
               $TQE,                                                   X
               $USERCBS,                                               X
               $XECB,                                                  X
               $XIT,                                                   X
               $XRT

EXIT05A  $ENTRY BASE=R12           EXIT ROUTINE ENTRY POINT

*********************************************************************
*                                                                   *
*        SAVE CALLER'S REGISTERS AND ESTABLISH ADDRESSABILITIES.    *
*                                                                   *
*********************************************************************

        $SAVE  NAME=EXIT05A        SAVE CALLER'S REGISTERS
         LR    R12,R15             SET BASE REGISTER

*********************************************************************
*                                                                   *
*        OBTAIN A MODULE WORKAREA.                                  *
*                                                                   *
*********************************************************************

         LA    R1,EXIT05WL         GET WORKAREA LENGTH
         LA    R1,3(,R1)           ROUND UP TO WORD BOUNDARY
         SRL   R1,2                CONVERT TO NUMBER OF WORDS
         LA    R1,1(,R1)           ADD ONE FOR IDENTIFIER
        $GETWORK WORDS=(R1),USE=EX05
         LA    R1,4(,R1)           POINT PAST IDENTIFIER
         LR    R9,R1               SET WORKAREA ADDRESS
         LR    R14,R1              SET MOVE TO ADDRESS
         LA    R15,EXIT05WL        SET MOVE TO LENGTH
         XR    R1,R1               SET MOVE FROM LENGTH AND PAD
         MVCL  R14,R0              CLEAR WORKAREA
         USING EXIT05W,R9

*********************************************************************
*                                                                   *
*        DETERMINE IF THIS IS A THE $REPEXIT OR $ADDEXIT COMMAND.   *
*                                                                   *
*********************************************************************

EXIT100  LA    R1,COMVERB            GET COMMAND VERB ADDRESS
         CLC   0(7,R1),=C'REPEXIT'   $REPEXIT COMMAND
         BE    EXIT200               YES - BRANCH, PROCESS $REPEXIT
         CLC   0(7,R1),=C'ADDEXIT'   $ADDEXIT COMMAND
         BE    EXIT300               YES - BRANCH, PROCESS $ADDEXIT
         XR    R15,R15               SET RETURN CODE
         B     RETURN                BRANCH - RETURN

*********************************************************************
*                                                                   *
*        PROCESS THE $REPEXIT COMMAND.                              *
*                                                                   *
*********************************************************************

EXIT200  LA    R1,COMVERB            GET COMMAND VERB ADDRESS
         MVC   EXITMODN(8),$BLANKS   SAVE MODNAME
         MVC   EXITMODN(8),8(R1)     *

*********************************************************************
*                                                                   *
*        CHECK IF THE EXIT MODULE IS CURRENTLY DEFINED TO JES2.     *
*                                                                   *
*********************************************************************

EXIT210  ICM   R8,15,$LMT1           GET LMT ADDRESS
         BZ    EXIT213               BRANCH - NO LMT CHAIN
         USING LMT,R8
EXIT211  CLC   LMTMODNM,EXITMODN     MODULE NAME MATCH?
         BNE   EXIT212               NO - BRANCH, CONTINUE
         TM    LMTFLG1,LMT1INVD      LMT INVALID?
         BZ    EXIT220               NO - BRANCH, CONTINUE
EXIT212  ICM   R8,15,LMTCHAIN        GET NEXT LMT ENTRY
         BNZ   EXIT211               LOOP BACK TO CHECK NEXT LMT ENTRY
EXIT213  MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT
         MVC   COMMAND+8(MSG1L),MSG1ERR1  SET FIXED MESSAGE TEXT
         B     EXIT250               BRANCH - CONTINUE

*********************************************************************
*                                                                   *
*        INVOKE THE MVS BLDL SERVICE TO CHECK IF A COPY OF THE      *
*        MODULE IS LOCATED IN A LINKLIST LIBRARY.  IF SO, GET       *
*        STORAGE TO PERFORM A DIRECTED LOAD.                        *
*                                                                   *
*********************************************************************

         USING PDSBLDL,R2
         USING PDS2,R3
EXIT220  LA    R2,$GENWORK           USE $GENWORK AS BLDL PARM AREA
         MVC   PDSBLDLN,$H1          SET NUMBER OF BLDL ENTRIES
         MVC   PDSBLDLL,=AL2(PDS2BLEN)  SET BLDL ENTRY LENGTH
         LA    R3,PDSBLDLE           POINT TO THE BLDL ENTRY
         XC    PDSBLDLE(PDS2BLEN+LMTLEN),PDSBLDLE  CLEAR BLDL WORKAREA
         MVC   PDS2NAME,EXITMODN     SET MODULE NAME FOR BLDL
         L     R1,CVTPTR             GET CVT POINTER
         L     R1,CVTLINK-CVT(,R1)   GET LNKLIST DCB POINTER
         BLDL  (R1),(R2)             LOCATE MODULE
         DROP  R2                    PDSBLDL
         LTR   R15,R15               MODULE LOCATED IN LINKLIST?
         BNZ   EXIT221               NO - BRANCH, ERROR
         TM    PDS2LIBF,PDS2LLNK     MODULE RESIDE IN LINKLIST?
         BO    EXIT222               YES - BRANCH, CONTINUE
EXIT221  MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT
         MVC   COMMAND+8(MSG1L),MSG1ERR2  SET FIXED MESSAGE TEXT
         B     EXIT250               BRANCH - CONTINUE
EXIT222  XR    R0,R0                 GET MODULE LENGTH
         ICM   R0,7,PDS2STOR           FROM THE PDS DIRECTORY
         XR    R2,R2                 ASSUME SP=0 (JES2 PRIVATE MODULE)
         TM    LMTFLG1,LMT1PVT       MODULE LOADED IN JES2 PRIVATE?
         BO    EXIT223               YES - BRANCH, CONTINUE
         ICM   R2,1,SP241            SET SP=241
EXIT223  TM    PDS2FTB2,PDSLRMOD     MODULE RMODE31?
         BO    EXIT224               YES - BRANCH, CONTINUE
         GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=BELOW
         B     EXIT225               BRANCH - CONTINUE
EXIT224  GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=ANY
EXIT225  LR    R6,R1                 SET STORAGE ADDRESS FOR LOAD
         LR    R14,R1                SET MOVE TO ADDRESS
         XR    R15,R15               SET MOVE TO LENGTH
         ICM   R15,7,PDS2STOR        *
         XR    R1,R1                 SET MOVE FROM LENGTH AND PAD
         MVCL  R14,R0                CLEAR MODULE AREA

*********************************************************************
*                                                                   *
*        PERFORM THE DIRECTED LOAD OF THE NEW MODULE.               *
*                                                                   *
*********************************************************************

EXIT230  LA    R4,EXITMODN           SET MODNAME ADDRESS
         L     R5,CVTPTR             GET CVT POINTER
         L     R5,CVTLINK-CVT(,R5)   GET LNKLIST DCB POINTER
         IPK   0(0)                  GET CURRENT PSW KEY
         SPKA  0(0)                  SET PSW KEY ZERO
         LOAD  EPLOC=(R4),DCB=(R5),ADDR=(R6),ERRET=EXIT231
EXIT231  SPKA  0(R2)                 RESET PSW KEY
         LTR   R15,R15               LOAD SUCCESSFUL?
         BZ    EXIT235               YES - BRANCH, CONTINUE
         MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT
         MVC   COMMAND+8(MSG1L),MSG1ERR3  SET FIXED MESSAGE TEXT
         XR    R0,R0                 GET MODULE LENGTH
         ICM   R0,7,PDS2STOR           FROM THE PDS DIRECTORY
         XR    R2,R2                 ASSUME SP=0 (JES2 PRIVATE MODULE)
         TM    LMTFLG1,LMT1PVT       MODULE LOADED IN JES PRIVATE?
         BO    EXIT232               YES - BRANCH, CONTINUE
         ICM   R2,1,SP241            SET SP=241
EXIT232  FREEMAIN RU,A=(R6),LV=(R0),SP=(R2),KEY=0
         B     EXIT250               BRANCH, CONTINUE

*********************************************************************
*                                                                   *
*        REPLACE THE MODULE INFORMATION IN THE LMT.                 *
*                                                                   *
*********************************************************************

EXIT235  ST    R6,LMTMITAD           SET MODULE ADDRESS IN LMT
         TM    PDS2FTB2,PDSLRMOD     MODULE RMODE31?
         BO    EXIT236               YES - BRANCH, CONTINUE
         OI    LMTFLG2,LMT2RM24      SET RMODE24 FLAG ON
         NI    LMTFLG2,255-LMT2RM31  TURN RMODE31 FLAG OFF
         B     EXIT237               BRANCH - CONTINUE
EXIT236  OI    LMTFLG2,LMT2RM31      SET RMODE31 FLAG ON
         NI    LMTFLG2,255-LMT2RM24  TURN RMODE24 FLAG OFF
EXIT237  TM    LMTFLG1,LMT1PVT       MODULE LOADED IN JES PRIVATE?
         BO    EXIT240               YES - BRANCH, CONTINUE
         MVI   LMTSUBPL,X'F1'        SET SP=241
         MVC   LMTMODLN,PDS2STOR     SET MODULE LENGTH
         OI    LMTFLG1,LMT1CMN       SET LOAD FLAGS
         DROP  R3                    PDS2

*********************************************************************
*                                                                   *
*        REPLACE THE MODULE INFORMATION IN THE XRT.                 *
*                                                                   *
*********************************************************************

         USING XIT,R1
         USING XRT,R3
EXIT240  LA    R0,XIT#PTS            GET MAXIMUM # XIT ENTRIES
         L     R1,$XITADDR           GET XIT CHAIN ADDRESS
EXIT241  ICM   R3,15,XITXRTAD        GET XRT ADDRESS
         BZ    EXIT246               BRANCH - NO XRT, CHECK NEXT XIT
         XR    R15,R15               GET NUMBER OF ROUTINES
         IC    R15,XIT#RTNS            ASSOCIATED WITH THIS EXIT POINT
EXIT242  L     R14,LMTMITAD          GET MIT ADDRESS
         L     R14,MITENTAD-MIT(,R14)  GET MITETBL ADDRESS
         USING MTE,R14
EXIT243  CLI   MTENAME,X'FF'         LAST MTE?
         BE    EXIT245               YES - BRANCH, CHECK NEXT XRT
         CLC   XRTRNAME,MTENAME      XRT NAME MATCH MIT NAME?
         BE    EXIT244               YES - BRANCH, CONTINUE
         LA    R14,MTELEN(,R14)      BUMP TO NEXT MITETBL ENTRY
         B     EXIT243               LOOP BACK FOR NEXT MITETBL ENTRY
EXIT244  MVC   XRTRADDR,MTEADDR      SET ROUTINE ADDR IN XRT
EXIT245  LA    R3,XRTLNGTH(,R3)      BUMP TO NEXT XRT ENTRY
         BCT   R15,EXIT242           LOOP BACK FOR NEXT XRT ENTRY
         DROP  R3,R8,R14             XRT, LMT, MTE
EXIT246  LA    R1,XITLNGTH(,R1)      BUMP TO NEXT XIT ENTRY
         BCT   R0,EXIT241            LOOP BACK FOR NEXT XIT ENTRY
         DROP  R1                    XIT
         MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT
         MVC   COMMAND+8(MSG1L),MSG1OK  SET FIXED MESSAGE TEXT

*********************************************************************
*                                                                   *
*        SET THE MESSAGE LENGTH AND RETURN.                         *
*                                                                   *
*********************************************************************

EXIT250  LA    R0,8+MSG1L            GET MESSAGE LENGTH
        $STORE (R0)                    AND SET IN RETURN R0
         MVC   RETCODE,=F'16'        SET RETURN CODE
         B     RETURN                BRANCH - RETURN

*********************************************************************
*                                                                   *
*        PROCESS THE $ADDEXIT COMMAND.                              *
*                                                                   *
*********************************************************************

EXIT300  LA    R3,COMVERB            GET COMMAND VERB ADDRESS
         LA    R3,8(,R3)             POINT TO MODULE NAME
         LR    R15,R3                *
         LA    R0,9                  SET MAX. MODNAME CHECK LENGTH
EXIT301  CLI   0(R15),C','           "," DELIMITER FOUND?
         BE    EXIT302               YES - BRANCH, CONTINUE
         LA    R15,1(,R15)           BUMP TO NEXT MODNAME POSITION
         BCT   R0,EXIT301            LOOP BACK FOR NEXT CHARACTER
         MVC   COMMAND(8),=C'$ADDEXIT'  SET COMMAND IN MESSAGE TEXT
         MVC   COMMAND+8(MSG2L),MSG2ERR1  SET FIXED MESSAGE TEXT
         B     EXIT390               BRANCH - CONTINUE
EXIT302  LR    R14,R15               CALCULATE EXIT MODNAME LENGTH
         SLR   R14,R3                *
         BCTR  R14,0                 MINUS 1 FOR EXECUTE
         MVC   EXITMODN(8),$BLANKS   BLANK INIT MODNAME
         MVC   EXITMODN(0),0(R3)     EXECUTED INSTRUCTION
         EX    R14,*-6               SAVE MODNAME
         LA    R15,1(,R15)           POINT TO EXIT NUMBER
         LR    R3,R15                *
         LA    R0,4                  SET MAX. EXIT # CHECK LENGTH
EXIT303  CLI   0(R15),C','           "," DELIMITER FOUND?
         BE    EXIT304               YES - BRANCH, CONTINUE
         CLI   0(R15),C' '           " " DELIMITER FOUND?
         BE    EXIT304               YES - BRANCH, CONTINUE
         LA    R15,1(,R15)           BUMP TO NEXT EXIT NBR POSITION
         BCT   R0,EXIT303            LOOP BACK FOR NEXT CHARACTER
EXIT304  LR    R14,R15               CALCULATE EXIT NUMBER LENGTH
         SLR   R14,R3                *
         BCTR  R14,0                 MINUS 1 FOR EXECUTE
         TRT   0(0,R3),TRTABLE       EXECUTED INSTRUCTION
         EX    R14,*-6               EXIT NUMBER VALID?
         BZ    EXIT305               YES - BRANCH, CONTINUE
         MVC   COMMAND(8),=C'$ADDEXIT'  SET COMMAND IN MESSAGE TEXT
         MVC   COMMAND+8(MSG2L),MSG2ERR2  SET FIXED MESSAGE TEXT
         B     EXIT390               BRANCH - CONTINUE
EXIT305  PACK  WORKDBL,0(0,R3)       EXECUTED INSTRUCTION
         EX    R14,*-6               CONVERT EXIT NUMBER TO DECIMAL
         CVB   R1,WORKDBL            CONVERT EXIT NUMBER TO BINARY
         STCM  R1,1,EXITNBR          SAVE EXIT NUMBER
         C     R1,$F1                EXIT NUMBER LESS THAN 1?
         BL    EXIT306               YES - BRANCH, ERROR
         C     R1,$F255              EXIT NUMBER GREATER THAN 255?
         BNH   EXIT310               NO - BRANCH, CONTINUE
EXIT306  MVC   COMMAND(8),=C'$ADDEXIT'  SET COMMAND IN MESSAGE TEXT
         MVC   COMMAND+8(MSG2L),MSG2ERR3  SET FIXED MESSAGE TEXT
         B     EXIT390               BRANCH - CONTINUE

*********************************************************************
*                                                                   *
*        CHECK IF THE EXIT MODULE IS CURRENTLY DEFINED TO JES2.     *
*                                                                   *
*********************************************************************

EXIT310  ICM   R8,15,$LMT1           GET LMT ADDRESS
         BZ    EXIT313               BRANCH - NO LMT CHAIN
         USING LMT,R8
EXIT311  CLC   LMTMODNM,EXITMODN     MODULE NAME MATCH?
         BNE   EXIT312               NO - BRANCH, CONTINUE
         TM    LMTFLG1,LMT1INVD      LMT INVALID?
         BO    EXIT312               YES - BRANCH, CONTINUE
         MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT
         MVC   COMMAND+8(MSG2L),MSG2ERR4  SET FIXED MESSAGE TEXT
         B     EXIT390               BRANCH - CONTINUE
EXIT312  ICM   R8,15,LMTCHAIN        GET NEXT LMT ENTRY
         BNZ   EXIT311               LOOP BACK TO CHECK NEXT LMT ENTRY
EXIT313  XR    R14,R14               GET NEW EXIT NUMBER
         ICM   R14,1,EXITNBR         *
         LA    R1,XITLNGTH           GET XIT LENGTH
         XR    R0,R0                 CALCULATE XIT INDEX
         MR    R0,R14                *
         L     R15,$XITADDR          GET XIT CHAIN ADDRESS
         ALR   R15,R1                CALCULATE XIT ADDRESS
         ST    R15,EXITXIT           SAVE XIT ADDRESS
         USING XIT,R15
         TM    XITFLAGS,XITCMN       MUST EXIT RESIDE IN CSA/LPA?
         BZ    EXIT314               NO - BRANCH, CONTINUE
         OI    WORKFLAG,EXITCSA      SET EXIT RESIDES IN CSA FLAG
         B     EXIT315               BRANCH - CONTINUE
EXIT314  OI    WORKFLAG,EXITPVT      SET EXIT RESIDES IN PVT FLAG
         DROP  R15                   XIT

*********************************************************************
*                                                                   *
*        THE EXIT MODULE IS NOT CURRENTLY DEFINED TO JES2, SO       *
*        ACQUIRE AN LMT FOR THE MODULE.                             *
*                                                                   *
*********************************************************************

EXIT315  XR    R2,R2                 ASSUME SP=0 (JES2 PRIVATE MODULE)
         TM    WORKFLAG,EXITPVT      MODULE LOADED IN JES2 PRIVATE?
         BO    EXIT316               YES - BRANCH, CONTINUE
         ICM   R2,1,SP241            SET SP=241
EXIT316  LA    R0,LMTLEN+$CSBPRFX    GET LMT+PREFIX LENGTH
         GETMAIN RC,LV=(R0),SP=(R2),LOC=ANY
         LR    R8,R1                 SAVE NEW LMT PREFIX ADDRESS
         LR    R14,R1                SET MOVE TO ADDRESS
         LA    R15,LMTLEN+$CSBPRFX   SET MOVE TO LENGTH
         XR    R1,R1                 SET MOVE FROM LENGTH AND PAD
         MVCL  R14,R0                CLEAR LMT AND PREFIX
         MVC   $CSBID(4,R8),=C'LMT '  SET EYECATCHER IN PREFIX
         STCM  R2,1,$CSBSPLN(R8)     SET STORAGE SUBPOOL IN PREFIX
         LA    R0,LMTLEN+$CSBPRFX    SET LMT+PREFIX LENGTH IN PREFIX
         STCM  R0,7,$CSBSPLN+1(R8)   *
         LA    R8,$CSBPRFX(,R8)      POINT TO ACTUAL LMT
         ST    R8,EXITLMTA           SAVE NEW LMT ADDRESS

*********************************************************************
*                                                                   *
*        INVOKE THE MVS BLDL SERVICE TO CHECK IF A COPY OF THE      *
*        MODULE IS LOCATED IN A LINKLIST LIBRARY.  IF SO, GET       *
*        STORAGE TO PERFORM A DIRECTED LOAD.                        *
*                                                                   *
*********************************************************************

         USING PDSBLDL,R2
         USING PDS2,R3
EXIT320  LA    R2,$GENWORK           USE $GENWORK AS BLDL PARM AREA
         MVC   PDSBLDLN,$H1          SET NUMBER OF BLDL ENTRIES
         MVC   PDSBLDLL,=AL2(PDS2BLEN)  SET BLDL ENTRY LENGTH
         LA    R3,PDSBLDLE           POINT TO THE BLDL ENTRY
         XC    PDSBLDLE(PDS2BLEN+LMTLEN),PDSBLDLE  CLEAR BLDL WORKAREA
         MVC   PDS2NAME,EXITMODN     SET MODULE NAME FOR BLDL
         L     R1,CVTPTR             GET CVT POINTER
         L     R1,CVTLINK-CVT(,R1)   GET LNKLIST DCB POINTER
         BLDL  (R1),(R2)             LOCATE MODULE
         DROP  R2                    PDSBLDL
         LTR   R15,R15               MODULE LOCATED IN LINKLIST?
         BNZ   EXIT321               NO - BRANCH, ERROR
         TM    PDS2LIBF,PDS2LLNK     MODULE RESIDE IN LINKLIST?
         BO    EXIT322               YES - BRANCH, CONTINUE
EXIT321  MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT
         MVC   COMMAND+8(MSG2L),MSG2ERR5  SET FIXED MESSAGE TEXT
         B     EXIT333               BRANCH - CONTINUE
EXIT322  XR    R0,R0                 GET MODULE LENGTH
         ICM   R0,7,PDS2STOR           FROM THE PDS DIRECTORY
         XR    R2,R2                 ASSUME SP=0 (JES2 PRIVATE MODULE)
         TM    WORKFLAG,EXITPVT      MODULE LOADED IN JES2 PRIVATE?
         BO    EXIT323               YES - BRANCH, CONTINUE
         ICM   R2,1,SP241            SET SP=241
EXIT323  TM    PDS2FTB2,PDSLRMOD     MODULE RMODE31?
         BO    EXIT324               YES - BRANCH, CONTINUE
         GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=BELOW
         B     EXIT325               BRANCH - CONTINUE
EXIT324  GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=ANY
EXIT325  LR    R6,R1                 SET STORAGE ADDRESS FOR LOAD
         LR    R14,R1                SET MOVE TO ADDRESS
         XR    R15,R15               SET MOVE TO LENGTH
         ICM   R15,7,PDS2STOR        *
         XR    R1,R1                 SET MOVE FROM LENGTH AND PAD
         MVCL  R14,R0                CLEAR MODULE AREA

*********************************************************************
*                                                                   *
*        PERFORM THE DIRECTED LOAD OF THE NEW MODULE.               *
*                                                                   *
*********************************************************************

EXIT330  LA    R4,EXITMODN           SET MODNAME ADDRESS
         L     R5,CVTPTR             GET CVT POINTER
         L     R5,CVTLINK-CVT(,R5)   GET LNKLIST DCB POINTER
         IPK   0(0)                  GET CURRENT PSW KEY
         SPKA  0(0)                  SET PSW KEY ZERO
         LOAD  EPLOC=(R4),DCB=(R5),ADDR=(R6),ERRET=EXIT331
EXIT331  SPKA  0(R2)                 RESET PSW KEY
         LTR   R15,R15               LOAD SUCCESSFUL?
         BZ    EXIT335               YES - BRANCH, CONTINUE
         MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT
         MVC   COMMAND+8(MSG2L),MSG2ERR6  SET FIXED MESSAGE TEXT
         XR    R0,R0                 GET MODULE LENGTH
         ICM   R0,7,PDS2STOR           FROM THE PDS DIRECTORY
         XR    R2,R2                 ASSUME SP=0 (JES2 PRIVATE MODULE)
         TM    WORKFLAG,EXITPVT      MODULE LOADED IN JES PRIVATE?
         BO    EXIT332               YES - BRANCH, CONTINUE
         ICM   R2,1,SP241            SET SP=241
EXIT332  FREEMAIN RU,A=(R6),LV=(R0),SP=(R2),KEY=0
EXIT333  L     R8,EXITLMTA           GET NEW LMT ADDRESS
         LA    R15,$CSBPRFX          GET PREFIX LENGTH
         SLR   R8,R15                POINT TO START OF PREFIX
         XR    R2,R2                 GET LMT SUBPOOL
         ICM   R2,1,$CSBSPLN(R8)     *
         XR    R0,R0                 GET LMT+PREFIX LENGTH
         ICM   R0,7,$CSBSPLN+1(R8)   *
         FREEMAIN RU,A=(R8),LV=(R0),SP=(R2)
         B     EXIT390               BRANCH, CONTINUE

*********************************************************************
*                                                                   *
*        INITIALIZE THE NEW LMT.                                    *
*                                                                   *
*********************************************************************

EXIT335  L     R8,EXITLMTA           GET NEW LMT ADDRESS
         ST    R6,LMTMITAD           SET MODULE ADDRESS IN LMT
         MVC   LMTMODNM,EXITMODN     SET MODULE NAME IN LMT
         TM    PDS2FTB2,PDSLRMOD     MODULE RMODE31?
         BO    EXIT336               YES - BRANCH, CONTINUE
         OI    LMTFLG2,LMT2RM24      SET RMODE24 FLAG ON
         NI    LMTFLG2,255-LMT2RM31  TURN RMODE31 FLAG OFF
         B     EXIT337               BRANCH - CONTINUE
EXIT336  OI    LMTFLG2,LMT2RM31      SET RMODE31 FLAG ON
         NI    LMTFLG2,255-LMT2RM24  TURN RMODE24 FLAG OFF
EXIT337  TM    WORKFLAG,EXITPVT      MODULE LOADED IN JES PRIVATE?
         BO    EXIT338               YES - BRANCH, CONTINUE
         OI    LMTFLG1,LMT1CMN       SET MODULE LOADED IN COMMON FLAG
         MVI   LMTSUBPL,X'F1'        SET SP=241
         B     EXIT339               BRANCH - CONTINUE
EXIT338  OI    LMTFLG1,LMT1PVT       SET MODULE LOADED IN PRIVATE FLAG
EXIT339  MVC   LMTMODLN,PDS2STOR     SET MODULE LENGTH
         OI    LMTFLG1,LMT1BSPL      SET BYPASS SPLEVEL CHECK FLAG
         DROP  R3                    PDS2

*********************************************************************
*                                                                   *
*        CHAIN THE NEW LMT.                                         *
*                                                                   *
*********************************************************************

EXIT340  TM    WORKFLAG,EXITCSA      MODULE LOADED IN COMMON?
         BO    EXIT343               YES - BRANCH, CONTINUE
         ICM   R15,15,$LMTPBOT       GET LAST PRIVATE ENTRY ADDRSS
         BNZ   EXIT341               BRANCH - CONTINUE
         ST    R8,$LMT1              RESET FIRST PRIVATE ENTRY ADDRESS
         B     EXIT342               BRANCH - CONTINUE
EXIT341  ST    R8,LMTCHAIN-LMT(,R15)  RESET CHAIN IN OLD LAST ENTRY
EXIT342  MVC   LMTCHAIN,$LMT1C       RESET CHAIN IN NEW LAST ENTRY
         ST    R8,$LMTPBOT           RESET LAST PRIVATE ENTRY ADDRESS
         B     EXIT350               BRANCH - CONTINUE
EXIT343  ICM   R15,15,$LMT1C         GET FIRST CSA ENTRY ADDRESS
         BNZ   EXIT345               BRANCH - CONTINUE
         ICM   R1,15,$LMTPBOT        GET LAST PRIVATE ENTRY ADDRSS
         BZ    EXIT344               BRANCH - NO PRIVATE ENTRIES
         ST    R8,LMTCHAIN-LMT(,R1)  RESET CHAIN IN LAST PRIVATE ENTRY
EXIT344  ST    R8,$LMT1C             RESET FIRST CSA ENTRY ADDRESS
         B     EXIT350               BRANCH - CONTINUE
EXIT345  CLC   LMTCHAIN-LMT(4,R15),$ZEROS  END OF CSA CHAIN?
         BE    EXIT346               BRANCH - END OF CSA CHAIN
         L     R15,LMTCHAIN-LMT(,R15)  GET NEXT CSA ENTRY ADDRESS
         B     EXIT345               LOOP BACK TO CHECK NEXT ENTRY
EXIT346  ST    R8,LMTCHAIN-LMT(,R15)  RESET CHAIN IN OLD LAST ENTRY

*********************************************************************
*                                                                   *
*        OBTAIN AND INITIALIZE AN XRT FOR EACH NEW EXIT ROUTINE     *
*        THAT IS DEFINED IN THE NEW EXIT MODULE.                    *
*                                                                   *
*********************************************************************

EXIT350  LA    R0,255*WORKXRTL       GET XRT WORKAREA SIZE
         GETMAIN RC,LV=(R0),LOC=ANY
         ST    R1,WORKXRTA           SAVE XRT WORKAREA ADDRESS
         LR    R14,R1                SET MOVE TO ADDRESS
         LA    R15,255*WORKXRTL      SET MOVE TO LENGTH
         XR    R1,R1                 SET MOVE FROM LENGTH AND PAD
         MVCL  R14,R0                CLEAR XRT WORKAREA
         L     R3,EXITXIT            GET EXIT XIT ADDRESS
         USING XIT,R3
         L     R14,LMTMITAD          GET MIT ADDRESS
         L     R14,MITENTAD-MIT(,R14)  GET MITETBL ADDRESS
         USING MTE,R14
         LA    R14,MTELEN(,R14)      BUMP PAST MITETBL EYECATCHER MTE
         L     R15,WORKXRTA          GET XRT WORKAREA ADDRESS
         USING WORKXRTE,R15
         XR    R7,R7                 INIT NEW EXIT ROUTINE COUNT
EXIT351  CLI   MTENAME,X'FF'         LAST MTE?
         BE    EXIT352               YES - BRANCH, CONTINUE
         LA    R7,1(,R7)             INCREMENT EXIT ROUTINE COUNT
         MVC   EXITRTNN,MTENAME      SAVE EXIT ROUTINE NAME
         MVC   EXITRTNA,MTEADDR      SAVE EXIT ROUTINE ADDRESS
         LA    R14,MTELEN(,R14)      BUMP TO NEXT MITETBL ENTRY
         LA    R15,WORKXRTL(,R15)    BUMP TO NEXT XRT WORKAREA ENTRY
         B     EXIT351               LOOP BACK FOR NEXT MITETBL ENTRY
         DROP  R14,R15               MTE, WORKXRTE
EXIT352  LTR   R7,R7                 ANY NEW EXIT ROUTINES DEFINED?
         BNZ   EXIT353               YES - BRANCH, CONTINUE
         OI    LMTFLG1,LMT1INVD      INVALIDATE THE NEW LMT
         MVC   COMMAND(8),=C'$ADDEXIT'  SET COMMAND IN MESSAGE TEXT
         MVC   COMMAND+8(MSG2L),MSG2ERR7  SET FIXED MESSAGE TEXT
         LA    R0,255*WORKXRTL       GET XRT WORKAREA SIZE
         L     R1,WORKXRTA           GET XRT WORKAREA ADDRESS
         FREEMAIN RU,A=(R1),LV=(R0)
         B     EXIT390               BRANCH - CONTINUE
EXIT353  STCM  R7,1,WORKXRT#         SAVE NUMBER OF NEW XRTS
         XR    R2,R2                 GET # ROUTINES CURRENTLY DEFINED
         ICM   R2,1,XIT#RTNS         *
         ALR   R7,R2                 CALCULATE NUMBER OF XRTS (NEW+OLD)
         LA    R15,XRTLNGTH          GET XRT LENGTH
         XR    R6,R6                 CALCULATE TOTAL XRTS LENGTH
         MR    R6,R15                *
         GETMAIN RC,LV=(R7),SP=241,LOC=ANY
         ST    R1,NEWXRTSA           SAVE NEW XRT AREA ADDRESS
         LR    R14,R1                SET MOVE TO ADDRESS
         LR    R15,R7                SET MOVE TO LENGTH
         XR    R1,R1                 SET MOVE FROM LENGTH AND PAD
         MVCL  R14,R0                CLEAR AREA
         L     R1,NEWXRTSA           GET NEW XRT AREA ADDRESS
         USING XRT,R1
         LTR   R2,R2                 ANY ROUTINES CURRENTLY DEFINED?
         BZ    EXIT355               NO - BRANCH, DEFINE NEW ROUTINES
         L     R15,XITXRTAD          GET FIRST OLD XRT ADDRESS
EXIT354  MVC   0(XRTLNGTH,R1),0(R15)  MOVE OLD XRT TO NEW AREA
         LA    R1,XRTLNGTH(,R1)      BUMP TO NEXT NEW AREA SLOT
         LA    R15,XRTLNGTH(,R15)    BUMP TO NEXT OLD XRT
         BCT   R2,EXIT354            LOOP BACK TO MOVE NEXT XRT
EXIT355  XR    R0,R0                 GET # NEW EXIT ROUTINES (XRTS)
         ICM   R0,1,WORKXRT#         *
         L     R15,WORKXRTA          GET XRT WORKAREA ADDRESS
         USING WORKXRTE,R15
EXIT356  MVC   XRTRNAME,EXITRTNN     SET NEW EXIT ROUTINE NAME
         MVC   XRTRADDR,EXITRTNA     SET NEW EXIT ROUTINE ADDRESS
         LA    R1,XRTLNGTH(,R1)      BUMP TO NEXT NEW AREA SLOT
         LA    R15,WORKXRTL(,R15)    BUMP TO NEXT XRT WORKAREA ENTRY
         BCT   R0,EXIT356            LOOP BACK TO INIT NEXT NEW XRT
         DROP  R1,R15                XRT, WORKXRTE
         LA    R0,255*WORKXRTL       GET XRT WORKAREA SIZE
         L     R1,WORKXRTA           GET XRT WORKAREA ADDRESS
         FREEMAIN RU,A=(R1),LV=(R0)

*********************************************************************
*                                                                   *
*        FINISH INITIALIZING THE XIT FOR THE NEW EXIT.              *
*                                                                   *
*********************************************************************

EXIT360  OI    XITFLAGS,XITDENBL+XITBSPL  SET EXIT DEFINED, ENABLED,
*                                           AND BYPASS SPLEVEL CHECK
         NI    XITFLAGS,255-XITTRACE  TURN EXIT TRACING OFF
         MVC   XITXRTAD,NEWXRTSA     SET FIRST EXIT XRT ADDRESS
         XR    R0,R0                 GET # ROUTINES CURRENTLY DEFINED
         ICM   R0,1,XIT#RTNS         *
         XR    R1,R1                 GET # NEW ROUTINES
         ICM   R1,1,WORKXRT#         *
         ALR   R0,R1                 CALCULATE TOTAL # EXIT ROUTINES
         STCM  R0,1,XIT#RTNS         SET TOTAL # EXIT ROUTINES
         L     R14,LMTMITAD          GET MIT ADDRESS
         MVC   XITENVIR,MITENVIR-MIT(R14)  SET ENVIRONMENT BYTE
         DROP  R3,R8                 XIT, LMT
         MVC   COMMAND(8),EXITMODN   SET MODNAME IN MESSAGE TEXT
         MVC   COMMAND+8(MSG2L),MSG2OK  SET FIXED MESSAGE TEXT

*********************************************************************
*                                                                   *
*        SET THE MESSAGE LENGTH AND RETURN.                         *
*                                                                   *
*********************************************************************

EXIT390  LA    R0,8+MSG2L            GET MESSAGE LENGTH
        $STORE (R0)                    AND SET IN RETURN R0
         MVC   RETCODE,=F'16'        SET RETURN CODE
         B     RETURN                BRANCH - RETURN
*********************************************************************
*                                                                   *
*        RETURN TO CALLER.                                          *
*                                                                   *
*********************************************************************

RETURN   L     R2,RETCODE          GET ROUTINE RETURN CODE
         S     R9,$F4              GET EXIT05 WORKAREA ADDRESS
        $RETWORK (R9)              RETURN WORKAREA
         LR    R15,R2              SET ROUTINE RETURN CODE
        $RETURN RC=(R15)           RETURN TO CALLER

         LTORG

TRTABLE  DC    256X'FF'            TABLE OF VALID NUMBERICS
         ORG   TRTABLE+C'0'        *
         DC    10X'00'             *
         ORG                       *

SP241    DC    X'F1'

MSG1OK   DC    C' REPLACED                        '
MSG1L    EQU   *-MSG1OK
MSG1ERR1 DC    C' NOT CURRENTLY BEING USED BY JES2'
MSG1ERR2 DC    C' NOT LOCATED IN LINKLIST LIBRARY '
MSG1ERR3 DC    C' LOAD ERROR                      '

MSG2OK   DC    C' ADDED                           '
MSG2L    EQU   *-MSG2OK
MSG2ERR1 DC    C' NO EXIT NUMBER SPECIFIED        '
MSG2ERR2 DC    C' INVALID EXIT NUMBER SPECIFIED   '
MSG2ERR3 DC    C' EXIT NUMBER OUT OF RANGE        '
MSG2ERR4 DC    C' EXIT MODULE ALREADY DEFINED     '
MSG2ERR5 DC    C' NOT LOCATED IN LINKLIST LIBRARY '
MSG2ERR6 DC    C' LOAD ERROR                      '
MSG2ERR7 DC    C' NO $ENTRY POINTS DEFINED        '

        $MODEND

EXIT05W  DSECT                     EXIT05 WORKAREA
RETCODE  DS    F                   EXIT05 RETURN CODE
WORKFLAG DS    XL1                 EXIT05 WORKFLAG
EXITPVT  EQU   X'80'               ADD EXIT TO JES2 PRIVATE
EXITCSA  EQU   X'40'               ADD EXIT TO COMMON
EXITNBR  DS    XL1                 EXIT NUMBER
EXITMODN DS    CL8                 EXIT MODULE NAME
EXITLMTA DS    A                   EXIT MODULE LMT ADDRESS
WORKDBL  DS    D                   DOUBLEWORD WORKAREA
EXITXIT  DS    A                   XIT ENTRY ADDRESS
WORKXRTA DS    A                   XRT WORKAREA ADDRESS
WORKXRT# DS    XL1                 NUMBER OF NEW XRTS
NEWXRTSA DS    A                   NEW XRTS AREA
WORKMSGY DS    CL60
EXIT05WL EQU   *-EXIT05W           EXIT05 WORKAREA LENGTH

WORKXRTE DSECT                     XRT WORKAREA ENTRY
EXITRTNN DS    CL8                 EXIT ROUTINE NAME
EXITRTNA DS    A                   EXIT ROUTINE ADDRESS
WORKXRTL EQU   *-WORKXRTE          XRT WORKAREA ENTRY LENGTH

         END
./ ADD NAME=LSES505J 0304-00234-05314-1428-00024-00018-00004-T0SM0
//T0SM505J JOB  (4030,37),'REDO--LSES505',CLASS=X,MSGCLASS=A,
//  REGION=5M,
//    NOTIFY=&SYSUID
//*
//*%PDSDOC 00 SMP APPLY LSES505
//S1       EXEC PGM=GIMSMP,
//         PARM='PROCESS=WAIT',
//         DYNAMNBR=120
//*
//*
//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI   <== UPDATE TO YOUR CSI
//SMPHOLD  DD DUMMY
//SMPRPT   DD  SYSOUT=*
//SMPOUT   DD  SYSOUT=*
//SMPLIST  DD  SYSOUT=*
//SMPPTFIN DD DISP=SHR,DSN=THIS.DATA.SET.NAME(LSES505)  <== UPDATE
//SMPCNTL  DD *
  SET BDY(GLOBAL) .
  REJECT S(LSES505) BYPASS(APPLYCHECK) .
  RESETRC.
  RECEIVE S(LSES505) SOURCEID(MELLON) .
  SET BDY(TARGET).                              <== UPDATE TO YOUR TGT
  APPLY S(LSES505) REDO .
//
./ ADD NAME=LSES506  0302-00234-03317-2239-00197-00202-00001-T0SM1
++USERMOD(LSES506)
 /* ***************************************************************
    ** * USER EXIT 5 B                                         * **
    ***************************************************************
    */ .
++VER(Z038) FMID(HJE7707) .
++JCLIN.
//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSIN    DD   *
//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,
//            DCB=BUFNO=1
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=&&OBJSET(STSCX05B),UNIT=SYSDA,
//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)
//SYSLIN   DD   DSN=&&OBJ,
//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),
//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)
//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//         COND=(8,LT,STEPASM)
//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK
//SYSLIN   DD   *
 INCLUDE SYSPUNCH(STSCX05B)
 NAME STSCX05B(R)
/*
++SRC(STSCX05B) SYSLIB(SHASSRC) DISTLIB(AHASSRC).
 PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1,REUS=REFR) '
* *%PDSDOC 00 JES2 EXIT05 PREVENT PURGING OF JOBS BY RANGE
*********************************************************************
*                                                                   *
*                        HASP EXIT 05                               *
*                                                                   *
*     THIS EXIT PREVENTS PURGING JOBS BY RANGE.                     *
*                                                                   *
*     ENTRY POINT: EXIT05                                           *
*                                                                   *
*     INPUT REGISTERS:                                              *
*        R0-4   N/A                                                 *
*        R5     POINTER TO CURRENT OPERAND ADDRESS                  *
*        R6     INCREMENT VALUE OF 4                                *
*        R7     POINTER TO ADDRESS OF LAST OPERAND                  *
*        R8-10  N/A                                                 *
*        R11    HCT ADDRESS                                         *
*        R12    N/A                                                 *
*        R13    PCE ADDRESS                                         *
*        R14    RETURN ADDRESS                                      *
*        R15    ENTRY ADDRESS                                       *
*                                                                   *
*     OUTPUT REGISTERS:                                             *
*        R0     UNCHANGED OR $CRET MESSAGE LENGTH                   *
*        R1-14  UNCHANGED                                           *
*        R15    RETURN CODE                                         *
*                                                                   *
*     REGISTER USAGE(INTERNAL):                                     *
*        R0-8   WORK REGISTERS                                      *
*        R9     WORKAREA ADDRESS                                    *
*        R10    JCT ADDRESS                                         *
*        R11    HCT ADDRESS                                         *
*        R12    BASE REGISTER                                       *
*        R13    PCE ADDRESS                                         *
*        R14-15 WORK AND LINKAGE REGISTERS                          *
*                                                                   *
*     AUTHOR: STEPHEN MCCOLLEY                                      *
*             ATLANTA, GA                                         *
*                                                                   *
*********************************************************************
* CHANGES:                                                          *
* 01/22/2001 - CORRECTED ERROR IN BLANK SCAN ROUTINE.  SGM          *
*                                                                   *
*********************************************************************

         COPY  $HASPGBL

STSCX05B $MODULE ENVIRON=JES2,                                         X
               RMODE=ANY,                                              X
               IBMJES2=SAMPLE,                                         X
               TITLE='JES2 USER EXIT5B',                               X
               CVT,                                                    X
               PDS,                                                    X
               PSA,                                                    X
               RPL,                                                    X
               $BUFFER,                                                X
               $CADDR,                                                 X
               $CAT,                                                   X
               $COMWORK,                                               X
               $DCT,                                                   X
               $HASPEQU,                                               X
               $HCT,                                                   X
               $HCCT,                                                  X
               $JCT,                                                   X
               $JCTX,                                                  X
               $JOE,                                                   X
               $JQE,                                                   X
               $LMT,                                                   X
               $MIT,                                                   X
               $MITETBL,                                               X
               $PCE,                                                   X
               $PIT,                                                   X
               $PSV,                                                   X
               $TQE,                                                   X
               $USERCBS,                                               X
               $XECB,                                                  X
               $XIT,                                                   X
               $XRT

EXIT05B  $ENTRY BASE=R12           EXIT ROUTINE ENTRY POINT

*********************************************************************
*                                                                   *
*        SAVE CALLER'S REGISTERS AND ESTABLISH ADDRESSABILITIES.    *
*                                                                   *
*********************************************************************

        $SAVE  NAME=EXIT05B        SAVE CALLER'S REGISTERS
         LR    R12,R15             SET BASE REGISTER

*********************************************************************
*                                                                   *
*        DETERMINE IF THIS IS A PURGE COMMAND.                      *
*                                                                   *
*********************************************************************

EXIT100  LA    R1,COMVERB            GET COMMAND VERB ADDRESS
         CLI   0(R1),C'P'            A PURGE COMMAND ?
         BE    EXIT400               - GO CHECK FOR PURGE BY RANGE
         XR    R15,R15               SET RETURN CODE
         B     RETURN                BRANCH - RETURN

**********************************************************************
**                                                                  **
**  PREVENT THE USE OF $PJ(X-X) HERE.                               **
**                                                                  **
**********************************************************************
EXIT400  LH    R2,COMLNGTH             GET THE LENGTH OF THE COMMAND
         BCTR  R2,R0                   MINUS ONE FOR THE $
         BCTR  R2,R0                   MINUS ONE FOR THE FIRST VERB
         LA    R1,COMVERB+1             POINT PAST COMMAND NAME
         AR    R2,R1                    R2 = END OF COMMAND TO TEST
CHKVERB1 CLI   0(R1),C'J'               IS NEXT CHAR. = C'J'
         BE    CHKRANG1
         CLI   0(R1),C'S'               IS NEXT CHAR. = C'S'
         BE    CHKRANG1
         CLI   0(R1),C'T'               IS NEXT CHAR. = C'T'
         BE    CHKRANG1
         CLI   0(R1),C' '               IS IT A BLANK ?
         BE    SCANBLNK
         B     EXIT499
         XR    R15,R15               SET RETURN CODE
         B     RETURN                BRANCH - RETURN
CHECKJ1  CLI   0(R1),C' '               SCAN TO NEXT NON BLANK CHAR.
         BNE   CHKVERB1
SCANBLNK EQU   *
         LA    R1,1(R1)
         CR    R1,R2
         BNL   EXIT499                  JUST GO HOME CLEANLY
         B     CHECKJ1
CHKRANG1 EQU   *                        ANY DASH IN THE NEXT 40 IS BAD
CHKRANG2 CLI   0(R1),C'-'               SEE IF A RANGE IS BEING USED
         BE    EXIT490                  IF YES THEN GO HOME MAD.
         LA    R1,1(R1)                 LOOP TO END OF FIELD
         CR    R1,R2
         BL    CHKRANG2
*
EXIT499  XR    R15,R15                  JUST GO HOME
         $RETURN RC=(R15)
EXIT490  LA    R4,MSG1                  SET MSG AND GO HOME MAD
         $CWTO MSG=(R4),L=40,MSGID=999
         LA    R15,8
         $RETURN RC=(R15)
MSG1     DC    C'PURGE BY RANGE INVALID                  '
LMSG1    EQU   *-MSG1
*********************************************************************
*                                                                   *
*        RETURN TO CALLER.                                          *
*                                                                   *
*********************************************************************

RETURN   EQU   *                   GET ROUTINE RETURN CODE
        $RETURN RC=(R15)           RETURN TO CALLER

         LTORG

        $MODEND

EXIT05W  DSECT                     EXIT05 WORKAREA
RETCODE  DS    F                   EXIT05 RETURN CODE
EXIT05WL EQU   *-EXIT05W           EXIT05 WORKAREA LENGTH

         END
./ ADD NAME=LSES506J 0405-00234-05314-1429-00023-00018-00018-T0SM0
//T0SM506J JOB  (4030,37),'REDO--LSES506',CLASS=X,MSGCLASS=A,
//  REGION=6M,
//    NOTIFY=&SYSUID
//*
//*%PDSDOC 00 SMP APPLY LSES506
//S1       EXEC PGM=GIMSMP,
//         PARM='PROCESS=WAIT',
//         DYNAMNBR=120
//*
//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI   <== UPDATE TO YOUR CSI
//SMPHOLD  DD DUMMY
//SMPRPT   DD  SYSOUT=*
//SMPOUT   DD  SYSOUT=*
//SMPLIST  DD  SYSOUT=*
//*
//SMPPTFIN DD DISP=SHR,DSN=THIS.DATA.SET.NAME(LSES506)  <== UPDATE
//SMPCNTL  DD *
  SET BDY(GLOBAL) .
  REJECT S(LSES506) BYPASS(APPLYCHECK).
  RESETRC .
  RECEIVE S(LSES506) SOURCEID(MELLON) .
  SET BDY(TARGET).                      <== UPDATE TO YOUR TGT
  APPLY S(LSES506) REDO.
./ ADD NAME=LSES507  0302-00234-03317-2243-00199-00284-00001-T0SM1
++USERMOD(LSES507)
 /* ***************************************************************
    ** * USER EXIT 6 A                                         * **
    ***************************************************************
    */ .
++VER(Z038) FMID(HJE7707) .
++JCLIN.
//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSIN    DD   *
//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,
//            DCB=BUFNO=1
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=&&OBJSET(STSCX06A),UNIT=SYSDA,
//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)
//SYSLIN   DD   DSN=&&OBJ,
//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),
//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)
//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//         COND=(8,LT,STEPASM)
//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK
//SYSLIN   DD   *
 INCLUDE SYSPUNCH(STSCX06A)
 NAME STSCX06A(R)
/*
++SRC(STSCX06A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).
 PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1,REUS=REFR) '
* *%PDSDOC 00 SETS THE SCHENV BASED ON /*ROUTE XEQ RESNAME
*********************************************************************
*                                                                   *
*                        HASP EXIT 6                                *
*                                                                   *
*     THIS EXIT GETS CONTROL AFTER EACH JCL STATEMENT HAS BEEN      *
*     CONVERTED INTO INTERNAL TEXT AND ONCE AFTER ALL OF A JOB'S    *
*     JCL HAS BEEN CONVERTED.  IT PERFORMS THE FOLLOWING FUNCTIONS: *
*     > CHECKS IF A SCHEDULING ENVIRONMENT (SCHENV=) HAS BEEN       *
*       CODED ON THE JOBCARD.  IF SPECIFIED, THE SCHEDULING         *
*       ENVIRONMENT IS USED.  OTHERWISE IF A MELLON RESOURCE NAME   *
*       HAS BEEN SPECIFIED ON A "/*ROUTE XEQ RESNAME" CONTROL       *
*       STATEMENT, THEN THE RESOURCE NAME IS USED AS A SCHEDULING   *
*       ENVIRONMENT.                                                *
*                                                                   *
*     ENTRY POINT: EXIT06                                           *
*                                                                   *
*     INPUT REGISTERS:                                              *
*        R0 CODE INDICATING STATUS OF CONVERSION PROCESSING         *
*           0  INDICATES THAT A JCL STATEMENT HAS BEEN CONVERTED    *
*              TO A C/I TEXT IMAGE.                                 *
*           4  INDICATES THAT ALL OF THE JCL FOR A PARTICULAR       *
*              JOB HAS BEEN CONVERTED TO C/I TEXT.                  *
*        R1     ADDRESS OF 5-WORD PARAMETER LIST                    *
*        R2-10  N/A                                                 *
*        R11    HCT ADDRESS                                         *
*        R12    N/A                                                 *
*        R13    ADDRESS OF AN 18 WORD OS-STYLE SAVE AREA            *
*        R14    RETURN ADDRESS                                      *
*        R15    ENTRY ADDRESS                                       *
*                                                                   *
*     OUTPUT REGISTERS:                                             *
*        R0-14  UNCHANGED                                           *
*        R15:   RETURN CODE                                         *
*               0 - QUEUE JOB FOR EXECUTION                         *
*               8 - CANCEL JOB AND QUEUE FOR OUTPUT                 *
*                                                                   *
*     REGISTER USAGE(INTERNAL):                                     *
*        R0-8   WORK REGISTERS                                      *
*        R9     WORKAREA ADDRESS                                    *
*        R10    JCT ADDRESS                                         *
*        R11    HCT ADDRESS                                         *
*        R12    BASE REGISTER                                       *
*        R13    ADDRESS OF AN 18 WORD OS-STYLE SAVE AREA            *
*        R14-15 WORK AND LINKAGE REGISTERS                          *
*                                                                   *
*     NOTE: THIS MODULE IS FOR USE WITH JES2 VERSION 6.0.4          *
*                                                                   *
*     AUTHOR: BOB BREAK                                             *
*             ST. LOUIS, MO.                                        *
*                                                                   *
*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE
*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS
*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED
*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF
*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE
*  USEFULLNESS OF THE MATERIAL.
*
*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,
*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE
*  IN THE FUTURE.
*
*********************************************************************

         COPY  $HASPGBL

STSCX06A $MODULE ENVIRON=SUBTASK,                                      X
               IBMJES2=SAMPLE,                                         X
               TITLE='USER EXIT6A MOD. ',                              X
               RMODE=ANY,                                              X
               CNMB,                                                   X
               CVT,                                                    X
               KEYS,                                                   X
               PSA,                                                    X
               TEXT,                                                   X
               $CADDR,                                                 X
               $DTE,                                                   X
               $DTECNV,                                                X
               $HASPEQU,                                               X
               $HCT,                                                   X
               $HCCT,                                                  X
               $JCT,                                                   X
               $JCTX,                                                  X
               $MIT,                                                   X
               $MITETBL,                                               X
               $PADDR,                                                 X
               $PARMLST,                                               X
               $PCE,                                                   X
               $TRE,                                                   X
               $XIT

EXIT06A  $ENTRY BASE=R12           EXIT ROUTINE ENTRY POINT

*********************************************************************
*                                                                   *
*        SAVE CALLER'S REGISTERS AND ESTABLISH ADDRESSABILITIES.    *
*                                                                   *
*********************************************************************

         USING HCT,R11
        $SAVE  NAME=EXIT06A        SAVE CALLER'S REGISTERS
         LR    R12,R15             SET BASE REGISTER
         LTR   R0,R0               FINAL EXIT6 CALL?
         BNZ   RETURN0             YES - BRANCH, RETURN
         L     R10,12(,R1)         GET JCT ADDRESS
         USING JCT,R10
         CLC   JCTCNVRC,=A(JCTCOK)  JOB SUCCESSFULLY CONVERTED?
         BNE   RETURN0             NO - BRANCH, RETURN
         TM    JCTJOBFL,JCTBATCH   BATCH JOB?
         BZ    RETURN0             NO - BRANCH, RETURN
         L     R2,4(,R1)           GET TEXT IMAGE ADDRESS
         USING TEXT,R2
         TM    STRINDCS,JOBSTR     'JOB' STATEMENT?
         BZ    RETURN0             NO - BRANCH, RETURN
         LR    R3,R1               SAVE INPUT PARAMETER LIST ADDRESS

*********************************************************************
*                                                                   *
*        CHECK IF A SCHEDULING ENVIRONMENT HAS BEEN CODED ON        *
*        THE JOBCARD.  IF SPECIFIED, ALLOW IT TO BE USED.           *
*                                                                   *
*********************************************************************


         LA    R1,STRJKEY          LOAD START OF KEYED TEXT IN R1
         LA    R0,JDTKWDK          LOAD KEY TO LOOK FOR IN R0
         $CALL XINTKEY,ERRET=EXIT110 IF NOT FOUND - CHECK FOR XEQ
         LTR   R15,R15
         BZ    KEYFOUND            THE KEY WAS FOUND
         B     EXIT110             THE KEY WAS NOT FOUND CHECK FOR A
*                                    VALUE FROM A /*ROUTE XEQ CARD
KEYFOUND EQU   *                   CHECK OUT THIS DUBIOUS KEY...
         CLI   0(R1),X'1A'         IS IT KEY 1A ?
         BNE   EXIT110                 IF NOT CHECK FOR XEQ VALUE
         CLC   1(2,R1),=X'0202'    2 PARMS - THE FIRST 2 BYTES LONG?
         BNE   EXIT110                 IF NOT CHECK FOR XEQ VALUE
         CLC   3(2,R1),=X'000A'    THE FIRST PARM BEING 000A ?
         BNE   EXIT110                 IF NOT CHECK FOR XEQ VALUE
         MVI   JCTSCHEN,C' '
         MVC   JCTSCHEN+1(L'JCTSCHEN-1),JCTSCHEN   CLEAR SCHEN FLD.

EXIT110  EQU   *


*********************************************************************
*                                                                   *
*        RETURN TO CALLER.                                          *
*                                                                   *
*********************************************************************

RETURN0  XR     R15,R15            SET RETURN CODE = 0
         B      RETURN             BRANCH - CONTINUE
RETURN8  EQU    *
         L      R15,$F8            SET RETURN CODE = 8
RETURN  $RETURN RC=(R15)           RETURN TO CALLER

         DROP  R10,R11             JCT, HCT

         LTORG

        $MODEND


         END
./ ADD NAME=LSES507J 0404-00234-05314-1428-00022-00018-00017-T0SM0
//T0SM507J JOB  (4030,37),'REDO--LSES507',CLASS=X,MSGCLASS=A,
//  REGION=6M,
//    NOTIFY=&SYSUID
//*
//*%PDSDOC 00 SMP APPLY LSES507
//S1       EXEC PGM=GIMSMP,
//         PARM='PROCESS=WAIT',
//         DYNAMNBR=120
//*
//SMPPTFIN DD DISP=SHR,DSN=THIS.DATA.SET.NAME(LSES507) <== UPDATE
//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI  <== UPDATE TO YOUR CSI
//SMPHOLD  DD DUMMY
//SMPRPT   DD  SYSOUT=*
//SMPOUT   DD  SYSOUT=*
//SMPLIST  DD  SYSOUT=*
//SMPCNTL  DD *
  SET BDY(GLOBAL) .
  REJECT S(LSES507) BYPASS(APPLYCHECK).
  RESETRC .
  RECEIVE S(LSES507) SOURCEID(MELLON) .
  SET BDY(TARGET).                        <== UPDATE
  APPLY S(LSES507) REDO.
./ ADD NAME=LSES509  0202-00234-03317-2246-00123-00132-00001-T0SM1
++USERMOD(LSES509)
 /* ***************************************************************
    ** * USER EXIT 15 A                                        * **
    ***************************************************************
    */ .
++VER(Z038) FMID(HJE7707) .
++JCLIN.
//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSIN    DD   *
//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,
//            DCB=BUFNO=1
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=&&OBJSET(STSCX15A),UNIT=SYSDA,
//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)
//SYSLIN   DD   DSN=&&OBJ,
//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),
//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)
//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//         COND=(8,LT,STEPASM)
//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK
//SYSLIN   DD   *
 INCLUDE SYSPUNCH(STSCX15A)
 NAME STSCX15A(R)
/*
++SRC(STSCX15A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).
 PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1,REUS=REFR) '
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*    JES2 USER EXIT 15.  DATA SET SELECTION / COPY USER EXIT.         *
*                                                                     *
* TDS MOD TO FORCE FCB LOAD UNLESS CHANGE TO AND FROM STD FORMS.      *
*                                                                     *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         COPY  $HASPGBL
STSCEX15 $MODULE ENVIRON=JES2,                                         *
               TITLE='JES2 USER EXIT 15 - ENTRY AND SET UP',           *
               RMODE=ANY,                                              *
               RPL,                REQ'D BY $BUFFER                    *
               $BUFFER,            REQ'D BY EXIT CODE                  *
               $CAT,               REQ'D BY $HCT                       *
               $DCT,               REQ'D BY $HCT                       *
               $XECB,              REQ'D BY MY WTOR ERROR RECOVERY     *
               $HASPEQU,           REQ'D BY REG CONVENTIONS            *
               $HCT,               REQ'D BY $SAVE/$RETURN              *
               $JCT,                                                   *
               $JCTX,                                                  *
               $JOE,                                                   *
               $JQE,               REQ'D BY $HCT                       *
               $MIT,               REQ'D BY $HCT                       *
               $PCE,               REQ'D BY $HCT AND AMIKOM            *
               $PDDB,                                                  *
               $PADDR,                                                 *
               $PPPWORK,           REQ'D BY AMIKOM                     *
               $XPL                EXIT PARAMETER LIST         @RMF420
         SPACE 2
EXIT15A  $ENTRY BASE=R12
         $SAVE
         LR    R12,R15
*   REGISTER USAGE
*   R13  ADDRESS OF PCE
*   R12  PROGRAM BASE REG
*   R11  ADDRESS OF HCT
*   R9   ADDRESS OF INPUT PARAMETER AREA
*   R8   ADDRESS OF DCT
*   R7   ADDRESS OF JCT
*   R6   ADDRESS OF PDDB
*   R5   ADDRESS OF XECB
         USING PCE,R13
         USING XPL,R9                                           @RMF420
         USING DCT,R8
         USING JCT,R7
         USING PDB,R6
         SPACE 1
         LR    R9,R1               INPUT PARAMETER
         L     R8,X015DCT          DCT ADDRESS                  @RMF420
         L     R7,X015JCT          JCT ADDRESS                  @RMF420
         L     R6,X015PDDB         PDDB ADDRESS                 @RMF420
         TITLE 'JES2 USER EXIT 15 - DETERMINE INPUT PARAMETERS'
*   DETERMINE WHY WE ARE HERE
BRTABLE  EQU   *                   BRANCH TABLE
         TM    XPLIND,X015DSEL      CHECK FOR DATA SELECTION    @RMF420
         BO    EX15SEL             DATA SET SELECTION / PDDB    @RMF420
         B     EX15EXIT            DATA SET SEPARATOR / COPY
         TITLE 'JES2 USER EXIT 15 - SELECTION / PDDB'
EX15SEL  EQU   *                   DATA SET SELECTION / PDDB
         CLI   DCTDEVID,DCTPRTID   IS THIS A PRINTER  Q.
         BNE   EX15EXIT            NO, RETURN, NOT A PRINTER
         SPACE 2
* TDS MOD TO FORCE FCB LOAD UNLESS CHANGE TO AND FROM STD FORMS.  * JWS
         CLC   DCTFORMS,PDBFORMS  FORMS CHANGE   Q.
         BE    TDSNOFOR           NO
         CLC   DCTFORMS(3),$STDFORM  STOCK PAPER MOUNTED  Q.
         BNE   TDSFORCE           NO, RELOAD FCB
         CLC   PDBFORMS(3),$STDFORM  STOCK PAPER REQUESTED  Q.
         BE    TDSNOFOR           YES, NO FCB LOAD
TDSFORCE OI    DCTPPSW,DCTPPSWC   (SET SWITCH TO FORCE FCB LOAD)
TDSNOFOR DS    0H                 (END OF MOD)
         SPACE 1
         B     EX15EXIT            RETURN
         EJECT
EX15EXIT EQU   *                   RETURN FROM THIS USER EXIT
         SLR   R15,R15             NORMAL EXIT
         SPACE 1
$RETURN  $RETURN RC=(R15)          FINAL RETURN
         LTORG
         SPACE 1
         $MODEND
         SPACE 1
         EJECT
         PRINT ON,NOGEN,NODATA
         DCBD  DSORG=PS
         SPACE 1
         END
./ ADD NAME=LSES509J 0305-00234-05314-1455-00024-00018-00019-T0SM0
//T0SM509J JOB  (4030,37),'REDO--LSES509',CLASS=X,MSGCLASS=A,
//  REGION=6M,
//    NOTIFY=&SYSUID
//*
//*%PDSDOC 00 SMP APPLY LSES509
/*JOBPARM S=TSPC
//S1       EXEC PGM=GIMSMP,
//         PARM='PROCESS=WAIT',
//         DYNAMNBR=120
//*
//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI  <== UPDATE FOR YOUR CSI
//SMPHOLD  DD DUMMY
//SMPRPT   DD  SYSOUT=*
//SMPOUT   DD  SYSOUT=*
//SMPLIST  DD  SYSOUT=*
//*
//SMPPTFIN DD DISP=SHR,DSN=THIS.DATA.SET.NAME(LSES509)  <== UPDATE
//SMPCNTL  DD *
  SET BDY(GLOBAL) .
  REJECT S(LSES509) BYPASS(APPLYCHECK) .
  RESETRC.
  RECEIVE S(LSES509) SOURCEID(MELLON) .
  SET BDY(TARGET).                          <== UPDATE TO TGT
  APPLY S(LSES509) REDO .
./ ADD NAME=LSES510  0303-00234-05123-1443-00209-00220-00001-T0SM0
++USERMOD(LSES510)
 /* ***************************************************************
    ** * USEREXIT 20A                                          * **
    ***************************************************************
    */ .
++VER(Z038) FMID(HJE7707) REQ(LSES500) .
++JCLIN.
//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSIN    DD   *
//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,
//            DCB=BUFNO=1
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=&&OBJSET(STSCX20A),UNIT=SYSDA,
//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)
//SYSLIN   DD   DSN=&&OBJ,
//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),
//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)
//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//         COND=(8,LT,STEPASM)
//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK
//SYSLIN   DD   *
 INCLUDE SYSPUNCH(STSCX20A)
 NAME STSCX20A(R)
/*
++SRC(STSCX20A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).
STSCX20A TITLE 'JES2 END OF INPUT USER EXIT -- PROLOG'
***********************************************************************
*
*   FUNCTIONS:
*              * COPY FIELDS FROM OUR JCT EXTENSION TO OUR JQE BERT
*                THAT WERE SET DURING EXIT 4 PROCESSING, AND SET
*                AFFINITY FOR /*ROUTE XEQ HERE REQUESTS.
*
*   NOTES:
*
*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE
*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS
*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED
*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF
*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE
*  USEFULLNESS OF THE MATERIAL.
*
*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,
*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE
*  IN THE FUTURE.
*
*    SPECIAL THANKS GO TO BOB BREAK OF ST. LOUIS FOR THE ORIGINAL CODE
*  TO PARSE THE "/*ROUTE XEQ RESNAME" CARDS AND SET THE APPROPRIATE
*  EXECUTION ENVIRONMENT.
*
*    SPECIAL THANKS TO JUDY RUNT OF WISCONSIN ELECTRIC FOR THE ORIGINAL
*  CODE TO HANDLE THE "/*CNTL BEFORE|AFTER|WITH,RESNAME" AND "/*CNTL
*  RESNAME,EXC|SHR" ROUTINES.  THE USE OF THE BLOCK EXTENSION REUSABLE
*  TABLES, BERT'S, TO EXTEND THE JCT AND JQE.
*
*
* REVISION HISTORY:
*
*   DATE   NAME         DESCRIPTION OF CHANGE
* -------- ------------ -----------------------------------------------
*
***********************************************************************
         SPACE 3
         PRINT OFF                 SUPRESS PRINTING OF JES2 GLOBALS
         COPY  $HASPGBL            INCLUDE THE JES GLOBAL VALUES
         PRINT ON                  RETORE FULL PRINTING
STSCX20A $MODULE TITLE='JES2 END OF INPUT USER EXIT',                  X
               RMODE=ANY,                                              X
               ENVIRON=JES2,                                           X
               RPL,                GENERATE RPL DSECT                  X
               $BERT,              (BERT)                              X
               $BERTTAB,           (BERT)                              X
               $BUFFER,            HASP SPOOL BUFFER DSECT             X
               $CADDR,                                                 X
               $CATBERT,           (BERT)                              X
               $CMB,               ($RDRWORK)                          X
               $DCT,               (INFORM)                            X
               $HASPEQU,           HASP EQUATES                        X
               $HCCT,              (BERT)                              X
               $HCT,               HASP CONTROL TABLE DSECT            X
               $HFAME,             ($HCCT)                             X
               $JCT,               HASP JOB CONTROL TABLE DSECT        X
               $JCTX,              HASP JOB CONTROL TABLE DSECT        X
               $JQE,               HASP JOB QUEUE ELEMENT DSECT        X
               $MIT,               HASP MIT DSECT                      X
               $MITETBL,                                               X
               $PADDR,             HASP PADDR DSECT                    X
               $PARMLST,                                               X
               $PCE,               HASP PROCESSOR CONTROL ENTRY DSECT  X
               $PSV,                                                   X
               $QSE,               ($HCT)                              X
               $RDRWORK,           HASP RDR PCE WORKAREA DSECT         X
               $SAFINFO,           ($RDRWORK)                          X
               $SCAT,              HASP SCAT DSECT                     X
               $SCANTAB,           HASP SCAN TABLE DSECT               X
               $SJB,               (INFORM)                            X
               $TQE,               ($SJB)                              X
               $TRE,               HASP TRE DSECT                      X
               $USERCBS,           USER DSECTS                         X
               $XECB               ($HCT)
         SPACE 5
         USING JCT,R10
         USING HCT,R11
         USING PCE,R13
         TITLE 'JES2 END OF INPUT USER EXIT'
EXIT20A  $ENTRY BASE=(R12),CSECT=NO,ENTRY=YES,REGUSE=(R15)
         $SAVE  ,                  SAVE CALLER'S REGISTERS
         LR    R12,R15             SET BASE REGISTER
         SPACE 2
*
*  UP FRONT HOUSEKEEPING HERE...
*
         LA    R6,0                PRESET RETURN CODE (NO JQA YET)
         LTR   R10,R10             CHECK IF A JCT WAS PROVIDED
         BZ    RETURN              NO - JUST RETURN
         ICM   R9,B'1111',PCEJQE   GET OUR JQE ADDRESS AND VALIDATE
         BZ    RETURN              NO VALID -- JUST RETURN
*
*  CHECK FOR "HERE" TYPE OF ROUTING
*  IF HERE WAS SPECIFIED - CLEAR THE FIELD AND IF NO AFFINITY IS
*  ALREADY SET - THEN SET IT FOR "HERE"
*
         USING JQE,R9
         CLC   JCTSCHEN(5),=C'HERE '   CHECK FOR "HERE" ROUTING
         BNE   NOTHERE                 DON'T SET IN SCHENV IF HERE
         MVI   JCTSCHEN,C' '
         MVC   JCTSCHEN+1(L'JCTSCHEN-1),JCTSCHEN  CLEAR THE FIELD
*
*  RESET THE AFFINIT TO "HERE" REGUARDLESS OF ANY OTHE SYSAFF=
*
         $SETAFF REQUEST=CLEAR,AFFIELD=RDWSAF
         $SETAFF REQUEST=MOVE,AFFIELD=RDWSAF,AFTOKEN=$AFFINTY
         DROP  R9
*
*  LOCATE OUR JCT EXTENSION.
*
NOTHERE  $JCTXGET  JCT=(R10),      LOCATE OUR JCT EXTENSION            X
               TYPE='USER',MOD=1,                                      X
               ERRET=RETURN        DONT CREATE A JQEX IF NO JCTX
*
         LR    R7,R1               GET ADDRESS OF OUR EXTENSION
         USING STJCTX,R7
*
**********************************************************************
*
*  GET OUR JQE FOR UPDATE AND LOCATE OUR BERT FOR THIS
*  JOB (ALL TYPES: BATCH, STC, TSU) AND INITIALIZE FOR LATER USE.
*
**********************************************************************
         $QSUSE  ,                 MAKE SURE WE OWN THE QUEUES
*
         $DOGJQE ACTION=(FETCH,UPDATE),      GET AN UPDATE MODE JQA    X
               JQE=(R9)
*
         LR    R9,R0               GET THE ADDR OF OUR JQA
*
         $DOGBERT ACTION=GETOFFSET,    GET THE OFFSET                  X
               CBTYPE=JQE,                IN THE JQA                   X
               NAME=STQNAME,                 OF OUR BERT               X
               ERRET=BADBERT
*
         LA    R8,0(R1,R9)         GET ADDRESS OF OUR BERT
         USING STQNAME,R8
*
* COPY OUR FIELDS FROM THE JCT EXTENSION TO OUR BERT.
*
         MVC   UBRWITH,UJCXWITH    COPY /*WITH NAME
         MVC   UBRBFOR,UJCXBFOR    COPY /*BEFORE NAME
         MVC   UBRAFTR,UJCXAFTN    COPY /*AFTER  NAME
         MVC   UBRDNAME,UJCXDNAM   COPY /*CNTL NAMES AND SHARE TYPES
         MVC   UBRUFLAG,UJCXUFLG   COPY OUR MISC JECL CARDS FLAGS
         MVC   UBRMFLAG,UJCXMFLG   COPY OUR /*AFTER/BEFORE/CNTL FLAGS
         MVI   UBRDLAYS,0          ZERO OUR DELAY FLAGS
         DROP  R7                  LOSE ADDRESS OF OUR JCTX
*
* CHECK JOB TYPE
*
********************************************************************
*  EXIT RETURN POINTS
********************************************************************
RET00    DS    0H
         LA    R6,0                SET NORMAL RETURN CODE
*
RETJQA   DS    0H                  RETURN THE JQA BEFORE EXITING
         $DOGJQE  ACTION=RETURN,                                       X
               CBADDR=(R9)
*
RETURN   DS    0H
         $RETURN RC=(R6)           RETURN TO CALLER
*
BADBERT  DS    0H                  ERROR RETURN FROM $DOGBERT
         $WTO  BADBERTM,L'BADBERTM,ROUTE=$MAIN,CLASS=$ALWAYS
         B     RETJQA              GO RETURN THE JQA AND EXIT
*
BADBERTM $MSG  999,'ERROR RETURNED GETTING BERT IN STSCX20A'
*
         SPACE 3
         TITLE 'JES2 END OF INPUT USER EXIT -- EPILOG'
         $MODEND ,
         END   ,
./ ADD NAME=LSES510J 0405-00234-05314-1431-00023-00018-00018-T0SM0
//T0SM510J JOB  (4030,37),'REDO--LSES510',CLASS=X,MSGCLASS=A,
//  REGION=6M,
//    NOTIFY=&SYSUID
//*
//*%PDSDOC 00 SMP APPLY LSES510
//S1       EXEC PGM=GIMSMP,
//         PARM='PROCESS=WAIT',
//         DYNAMNBR=120
//*
//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI   <== UPDATE TO YOUR CSI
//SMPHOLD  DD DUMMY
//SMPRPT   DD  SYSOUT=*
//SMPOUT   DD  SYSOUT=*
//SMPLIST  DD  SYSOUT=*
//*
//SMPPTFIN DD DISP=SHR,DSN=THIS.DATA.SET.NAME(LSES510) <== UPDATE
//SMPCNTL  DD *
  SET BDY(GLOBAL) .
  REJECT S(LSES510) BYPASS(APPLYCHECK).
  RESETRC .
  RECEIVE S(LSES510) SOURCEID(MELLON) .
  SET BDY(TARGET).                       <== UPDATE TO YOUR TGT
  APPLY S(LSES510) REDO.
./ ADD NAME=LSES511  0202-00234-03317-2254-00425-00437-00001-T0SM1
++USERMOD(LSES511)
 /* ***************************************************************
    ** * USER EXIT 36A                                         * **
    ***************************************************************
    */ .
++VER(Z038) FMID(HJE7707) .
++JCLIN.
//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSIN    DD   *
//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,
//            DCB=BUFNO=1
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=&&OBJSET(STSCX36A),UNIT=SYSDA,
//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)
//SYSLIN   DD   DSN=&&OBJ,
//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),
//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)
//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//         COND=(8,LT,STEPASM)
//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.apf.SHASLINK
//SYSLIN   DD   *
 INCLUDE SYSPUNCH(STSCX36A)
 NAME STSCX36A(R)
/*
++SRC(STSCX36A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).
 PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1,REUS=REFR) '
STSCX36A TITLE 'SAMPLE EXIT 36 (PRE SAF CALL) - (MODULE COMMENT BLOCK)'
* **PROPRIETARY STATEMENT**********************************************
*                                                                     *
*   LICENSED MATERIALS-PROPERTY OF IBM                                *
*   THIS MODULE IS "RESTRICTED MATERIALS OF IBM"                      *
*   5695-047 (C) COPYRIGHT IBM CORP 1990                              *
*   SEE COPYRIGHT INSTRUCTIONS                                        *
*                                                                     *
*   STATUS = HJE4420                                                  *
*                                                                     *
* **END-OF-PROPRIETARY-STATEMENT***************************************
***********************************************************************
*                                                                     *
* MODULE NAME = HASX36A (HASX36A CSECT)                               *
*                                                                     *
* DESCRIPTIVE NAME = Sample Pre-SAF call user exits                   *
*                                                                     *
* FUNCTION =                                                          *
*                                                                     *
*         PROPRMT  - Cause userid propagation for RJE jobs            *
*                                                                     *
* NOTES =                                                             *
*                                                                     *
*    DEPENDENCIES = NONE                                              *
*                                                                     *
*    RESTRICTIONS = NONE                                              *
*                                                                     *
*    ATTRIBUTES = JES2 REENTRANT, RMODE 24, AMODE 31                  *
*                                                                     *
* ENTRY POINTS =                                                      *
*                                                                     *
*         SYSLOG   - Allow all TSO users to view SYSLOG               *
*                                                                     *
*         NOCREDEL - Bypass SAF calls for data set create and deletes *
*                                                                     *
*         PROPRMT  - Cause userid propagation for RJE jobs            *
*                                                                     *
* MACROS =                                                            *
*                                                                     *
*         JES2 - $ENTRY, $MODEND, $MODULE, $RETURN, $SAVE             *
*                                                                     *
* CHANGE ACTIVITY:                                                    *
*                                                                     *
* $420P306=PTM      HJE4420 910118 R_W1: Sample Exit Prolog Problems  *
*                                                                     *
* A000000-999999    CREATED FOR JES2 4.1.0                         @410
***********************************************************************
         TITLE 'SAMPLE EXIT 36 (PRE SAF CALL) -- PROLOG ($HASPGBL)'
         COPY  $HASPGBL
         TITLE 'SAMPLE EXIT 36 (PRE SAF CALL) -- PROLOG ($MODULE)'
STSCX36A $MODULE ENVIRON=USER,                                         C
               TITLE='PROLOG ($MODULE)',                               C
               RMODE=ANY,                                              C
               SAFP,               SAF ICHSAFP - parm list mapping     C
               TOKEN,              SAF ICHRUTKN - TOKEN mapping        C
               $CADDR,             Common storage address list         C
               $DTE,               Daughter task element               C
               $ERA,               Erorr recovery area                 C
               $HASPEQU,           General EQUATES                     C
               $HCCT,              Common storage control table        C
               $HCT,               Private storage control table       C
               $HFAME,             HASP file allocation map element    C
               $JCT,               jes2 job control block              C
               $JCTX,              JES2 JOB CONTROL BLOCK              C
               $MIT,               Module information table            C
               $PADDR,             Private storage address list        C
               $PARMLST,           Parameter list values/equates       C
               $PCE,               Processor control element           C
               $PSV,               Processor save area                 C
               $SAFINFO,           saf control block                   C
               $SCAT,              SYSOUT class attribute table        C
               $XECB,              Extended ECB                        C
               $WAVE,              Work access verification element    C
               $XIT,               Exit information table              C
               ($XPL,GEN)          Exit parameter list
         TITLE 'CAUSE USERID PROPAGATION FOR RJE JOBS -- (ROUTINE PROPRC
               MT)'
***********************************************************************
*                                                                     *
*        PROPRMT - Cause the userid of RJE to propagate to its jobs.  *
*                                                                     *
* FUNCTION :                                                          *
*                                                                     *
*        This routine will allow installations to have jobs submitted *
*        from remote work stations act as if the jobs had been        *
*        submitted from logged on TSO user sessions.  This will only  *
*        work if the RJE signon was processed via RACF.  The session  *
*        type on the RACROUTE REQUEST=VERIFYX call will be changed    *
*        from RJEBATCH to INTBATCH.  This will indicate to RACF that  *
*        the USERID of the submittor should be propagated to the job  *
*        if there is no USER= parameter coded on the job card.  (The  *
*        USERID is not propagated for RJEBATCH session types.)        *
*        For RJEs, the USERID is the work station name.               *
*                                                                     *
*        This will cause the audit records to look funny since jobs   *
*        will be accepted into the system that otherwise would have   *
*        failed.                                                      *
*                                                                     *
*        JESINPUT class profiles will have to be changed to           *
*        accomodate port of entrys (POEs) of the form Rn.RDm.         *
*        Note: For remotes numbered from 1000-9999, the form          *
*              is RnnnnRDm (no inner period).                         *
*                                                                     *
* LINKAGE :                                                           *
*                                                                     *
*        This routine is entered via a BASR R14,R15 from the USERSUB  *
*        routine in the HASCSIRQ CSECT of the HASPSSSM load module.   *
*        Control is returned via $RETURN.                             *
*                                                                     *
* OPERATION :                                                         *
*                                                                     *
*        LOADMOD(HASX36A) STORAGE=CSA                          @420P306
*        EXIT(36)  ROUTINES=PROPRMT,STATUS=ENABLED             @420P306
*                                                                     *
* ENVIRONMENT :                                                       *
*                                                                     *
*        Subtask                                                      *
*                                                                     *
* RECOVERY :                                                          *
*                                                                     *
*        Default recovery provided by general purpose subtask.        *
*                                                                     *
* REGISTER USAGE (ENTRY/EXIT) :                                       *
*                                                                     *
*    REG       VALUE ON ENTRY             VALUE ON EXIT               *
*                                                                     *
*    R0        N/A                        Unchanged                   *
*    R1        Address of parm list       Unchanged                   *
*    R2-R10    N/A                        Unchanged                   *
*    R11       HCCT address               Unchanged                   *
*    R12       N/A                        Unchanged                   *
*    R13       Save area                  Unchanged                   *
*    R14       Return address             Unchanged                   *
*    R15       Routine address            Return code                 *
*                                                                     *
* PARAMETER LIST :                                                    *
*                                                                     *
*        See $XPL expansion                                           *
*                                                                     *
* REGISTER USAGE (INTERNAL) :                                         *
*                                                                     *
*    REG       VALUE                                                  *
*                                                                     *
*    R0        N/A                                                    *
*    R1        XPL (parameter list addr)                              *
*    R2-R3     N/A                                                    *
*    R4        SAF and RACINIT parm list address                      *
*    R5-R10    N/A                                                    *
*    R11       HCCT address                                           *
*    R12       Routine base address                                   *
*    R13       Available save area                                    *
*    R14       Linkage                                                *
*    R15       Return code                                            *
*                                                                     *
* DATA AREA USAGE (INTERNAL) :                                        *
*                                                                     *
*    NAME          VALUE                                              *
*                                                                     *
*    $SEAINIT      The FUNCODE for a VERIFYX                          *
*                                                                     *
*    INITSESN      The SESSION value in RACINIT(VERIFYX) parm list    *
*    SAFPRACP      Offset of the specific RACROUTE request type parms *
*    TOKRBCH       The equate for SESSION=RJEBATCH                    *
*                                                                     *
*    XPLIND        Exit parameter list indicator byte - FUNCODE value *
*    X036PARM      Address of the RACROUTE parameter list             *
*                                                                     *
* RETURN CODES (R15 ON EXIT) :                                        *
*                                                                     *
*         0 - ALWAYS RETURNED                                         *
*                                                                     *
* OTHER CONSIDERATIONS :                                              *
*                                                                     *
*         N/A                                                         *
*                                                                     *
***********************************************************************
         TITLE 'CAUSE USERID PROPAGATION FOR RJE JOBS -- PROPRMT'
         USING XPL,R8              XPL  ADDRESSABILITY
         USING HCCT,R11            HCCT addressability
         SPACE 1
EXIT36A  $ENTRY BASE=R12
         SPACE 1
        $SAVE TRACE=YES,NAME=PROPRMT  Save callers registers
         SPACE 1
         LR    R12,R15             Set local base
         EJECT
***********************************************************************
*                                                                     *
*        Check for VERIFYX SAF call with session type RJEBATCH.       *
*        Change all RJEBATCH session types to INTBATCH.               *
*                                                                     *
***********************************************************************
         SPACE 1
         LR    R8,R1               SAVE REGISTER 1
         CLI   XPLIND,$SEAINIT     WAS THE CALL FOR VERIFYX?
         BNE   TRYREST             NO, THEN NOT INTERESTED
         $GETMAIN RC,LV=$$LGTH,BNDRY=DBLWD,LOC=BELOW
         LTR   R15,R15
         BZ    $$CONT0
         DC    X'0000'
$$CONT0  EQU   *
         SPACE 1
         LR    R9,R1               PUT GETMAIN ADDR INTO R9
         USING $$DMYARA,R9         TELL SYTEM TO USE R9 FOR ADDR
         MVC   RACF_INIT(RACFLTHI),RACFINIT  MOVE IN LIST FORMAT
         MVI   BLANK_AREA,X'40'      MOVE IN BLANK
         MVC   BLANK_AREA+1($$SPACES-1),BLANK_AREA
         MVC   R15AREA,=F'0'       SET R15AREA TO BINARY ZEROES
         MVI   THREE_DIGITSW,0     SET TO BINARY ZERO AT START
         ICM   R4,B'1111',X036RCBA GET RELATED CONTROL BLOCK (SAFINFO)
         CLC   =C'SFI',0(R4)       is it sfi
         BE    $$CONT              YES GO ON
         DC    X'0000'             OTHERWISE DUMP
$$CONT   EQU   *
         USING SAFINFO,R4          USE R4 AS BASE
         ICM   R5,B'1111',SFIJCT   GET ADDR OF JCT
         USING JCT,R5              USE R 5 AS JCT
         CLC   =C'JCT',JCTID       IS IT JCT
         BE    $$CONT1             YES GO ON
         DC    X'0000'             OTHERWISE DUMP
$$CONT1  EQU   *
         SR    R7,R7               SET R7 TO ZEROES
         CLC   =C'TZZZ',JCTJNAME   CHECK FOR SPECIAL JOBNAME
         BNE   NOT_A_TEST         IF NOT JUST CONTINUE AS NORMAL
         CLC   =C'N016',JCTJNAME+4  TEST FOR BOGUS NODE
         BNE   CHECK_BOGUS_REMOTE  IF NOT CHECK FOR REMOTE TESTER
         ICM   R7,3,=H'16'          STUFF IN INVALID NODE
         B     NODE_TESTER         GO VALIDATE NODE
CHECK_BOGUS_REMOTE EQU *           COME HERE TO TEST REMOTE
         CLC   =C'R301',JCTJNAME+4  TEST FOR 3 DIGIT ONE
         BNE   TEST_FOR_2DIGIT
         ICM   R7,3,=H'301'        PUT IN 301
         B     REMOTE_TESTER
TEST_FOR_2DIGIT EQU *              TEST FOR 2 DIGIT
         CLC   =C'R020',JCTJNAME+4  IS IT 2 DIGIT GUY
         BNE   NOT_A_TEST          PROCESS AS NORMAL JOB
         ICM   R7,3,=H'20'         STUFF 20 INTO R7
         B     REMOTE_TESTER
NOT_A_TEST EQU *                   COME HERE -- NORMAL PROCESS
         ICM   R7,3,JCTRRMT        TEST FOR REMOTE ID
         BZ    CHECK_NODES         IF 0 CHECK THE NODES FIELD
REMOTE_TESTER EQU *                FORCE HERE FOR REMOTE TESTING
         MVC   $$RMTROT,=C'RMT$'   MOVE IN STATIC PORTION USERID
         MVC   $$RMTGNM,=C'RMT'    MOVE IN STATIC PORTION OF GRP ID
         B     CONVERT             OTHERWISE GO CONVERT
CHECK_NODES    EQU *               COME HER TO TEST NODE-IDS
         ICM   R7,3,JCTRNODE       INSERT 2 BYTES OF NODE ID
         BZ    EXIT36AD            IF VL = 0 EXIT PROGRAM
         CLM   R7,B'0011',=H'13'   IS IT ORLANDO AND VMFLO7
         BE    SET_NODE            YES GO CONVERT
         CLM   R7,B'0011',=H'14'   IS IT 9221 EITHER PLACE
         BE    SET_NODE            YES GO CONVERT
         CLM   R7,B'0011',=H'15'   IS IT ATLANTA AND 9370
         BE    SET_NODE            YES GO CONVERT
*  CODE ADDED TO SUPPORT RSCSGAA8 AND RSCSFLO7 IN ATLANTA.
         CLM   R7,B'0011',=H'9'    IS IT ATLANTA AND RSCSGAA8
         BE    SET_NODE            YES GO CONVERT
         CLM   R7,B'0011',=H'20'   IS IT ATLANTA AND RSCSFLO7
         BE    SET_NODE            YES GO CONVERT
         B     EXIT36AD            ANYBODY ELSE NO PROPAGATION
NODE_TESTER  EQU  *                COME HERE TO TEST NODES
SET_NODE EQU   *                   COME TO SET UP NODE NAMES
         MVC   $$RMTROT,=C'NJE$'   MOVE IN STATIC PORTION USERID
         MVC   $$RMTGNM,=C'NJE'    MOVE IN STATIC PORTION OF GRP ID
CONVERT  EQU   *                   COME HERE IF 9370 OR 9221
         CVD   R7,$$DOUBLE         CONVERT REMOTE # TO PACKED
         UNPK  $$EXTNAL,$$DOUBLE   CONVERT TO EXTERNAL DECIMAL
         OI    $$EXTNAL+2,X'F0'    GET RID OF SIGN
         CLI   $$EXTNAL,X'F0'      Q--IS THE HIGH NUMBER ZERO
         BE    TWO_DIGIT           A--YES RMT/NODE 00-99
         OI    THREE_DIGITSW,1     TURN ON THREE DIGIT SWITCH
         MVC   $$RMTNNN,$$EXTNAL      MOVE 3 DIGITS INTO NAME
         MVC   $$RMTGN3,$$RMTNNN      MOVE THREE TO GROUP ID
         MVI   $$RMTUSR_LENGTH,7   MAKE LENGTH A LITTLE BIGGER
         MVI   $$RMTGRP_LENGTH,6   SAME HERE
         B     $$SETUP_RACROUTE    AND GO TO RACF CALL
TWO_DIGIT EQU  *                   COME HERE ON 00-99
         MVC   $$RMTNN,$$EXTNAL+1  MOVE TO USERID FIELD
         MVC   $$RMTGNO,$$RMTNN    MOVE TO GROUP NUMBER FIELD
         MVI   $$RMTUSR_LENGTH,6   PUT LENGTH INTO FLD
         MVI   $$RMTGRP_LENGTH,5   PUT GROUP LENGTH INTO FLD
$$SETUP_RACROUTE EQU *             COME HERE FROM 100-999
         MVI   LOG_AREA_LGTH,LOG_DATA   STORE LENGTH IN 1 BY
         MVC   LOGUSER,$$RMTROT    MOVE RMT GROUP AND USER ID
         MVC   LOGGROUP,$$RMTGNM   MOVE RMT GROUP AND USER ID
         LA    R6,LOG_AREA_LGTH    STORE INTO R6
         LA    R2,$$RMTUSR_LENGTH  LOAD LENGTH + USER ID ADDR
         LA    R3,$$RMTGRP_LENGTH  LOAD LENGTH + GROUP ID ADDR
         LA    R10,RACF_INIT       LOAD ADDR OF LIST RACROUTE
         RACROUTE REQUEST=VERIFY,ACEE=(R8),GROUP=(R3),PASSCHK=NO,      X
               RELEASE=1.9,ENVIR=CREATE,USERID=(R2),LOG=ALL,           X
               WORKA=$$WRKARA,MF=(E,(R10)),LOGSTR=(R6)
         LTR   R15,R15             TEST FOR ZEROES
         BZ    VALID_NODE          IF ZERO RACF KNOWS HIM
         MVC   X036RETC,=F'8'      SET RETRUN CODE 8
         MVC   X036RSNC,=F'14'     SET REASON CODE 14
         OI    XPLRESP,X036NORC   TURN ON OVERRIDE BIT
         B     EXIT36AD            ANYBODY ELSE NO PROPAGATION
         DC    X'0000'             OTHERWISE DUMP
VALID_NODE EQU *                   USERID EXISTS
         MVC   RACF_INIT(RACFLTHI),RACFINIT  MOVE IN LIST FORMAT
         RACROUTE REQUEST=VERIFY,ACEE=(R8),RELEASE=1.9,ENVIR=DELETE,   X
               WORKA=$$WRKARA,MF=(E,(R10))
         LTR   R15,R15             TEST FOR GOOD DELETE
         BZ    RACF_OK             ABLE TO DELETE ACEE OK
         DC    X'0001'             SHOULD NOT GET HERE
RACF_OK  EQU   *                   COME HERE ON GOOD DELETE
         OI    JCTFLAG1,JCT5CKPT   REWRITE THIS JCT           RF-950313
         OI    JCTFLAG2,JCT2AVDP+JCT2AVD  VALIDATION FLAG
         TM    THREE_DIGITSW,1     IS IT 2 OR 3 POS NUMBER
         BZ    JUST_TWO            IF ZERO RMT/NODE =00/99
         MVI   SFIUIDL,7           MOVE LENGTH OF USERID
         MVI   SFISUIDL,7          MOVE LENGTH OF USERID
         MVI   SFIGRPL,6           MOVE LENGTH OF GROUP ID
         MVI   SFISGRPL,6          MOVE LENGTH OF GROUP ID
         MVC   SFIUID(L'NAME_ULENGTH7),$$RMTROT    MOVE IN USERID
         MVC   SFISUID(L'NAME_ULENGTH7),$$RMTROT   MOVE IN USERID
         MVC   SFIGRP(L'NAME_GLENGTH6),$$RMTGNM    MOVE IN GROUP NAME
         MVC   SFISGRP(L'NAME_GLENGTH6),$$RMTGNM   MOVE IN GROUP NAME
         B     RACF_OVERRIDE
JUST_TWO EQU   *                   COME HERE 00/99
         MVI   SFIUIDL,6           MOVE LENGTH OF USERID
         MVI   SFISUIDL,6          MOVE LENGTH OF USERID
         MVI   SFIGRPL,5           MOVE LENGTH OF GROUP ID
         MVI   SFISGRPL,5          MOVE LENGTH OF GROUP ID
         MVC   SFIUID(L'NAME_ULENGTH),$$RMTROT     MOVE IN USERID
         MVC   SFISUID(L'NAME_ULENGTH),$$RMTROT    MOVE IN USERID
         MVC   SFIGRP(L'NAME_GLENGTH),$$RMTGNM     MOVE IN GROUP NAME
         MVC   SFISGRP(L'NAME_GLENGTH),$$RMTGNM    MOVE IN GROUP NAME
RACF_OVERRIDE  EQU *
         OI    SFIFLAG1,SFI1SREQ+SFI1NORM                rf-950314
         L     R6,X036PARM
         USING SAFP,R6
         LR    R8,R6
         A     R8,SAFPRACP
         RACROUTE REQUEST=VERIFYX,PASSCHK=NO,MF=(M,(R6)),RELEASE=1.9,  x
               SESSION=INTBATCH
         B     EXIT36AD
         TITLE 'END OF PROPRMT ROUTINE -- RETURN TO CALLER'
***********************************************************************
*                                                                     *
*        Always return to the caller with a zero return code so that  *
*        any other exits will get control.  There will be no changes  *
*        in the condition byte so that the SAF call can be made or    *
*        not be made as decided by other exits.                       *
*                                                                     *
***********************************************************************
         SPACE 1
EXIT36AD EQU  *
         $FREMAIN RU,LV=$$LGTH,A=(R9)
TRYREST  SLR    R15,R15            Indicate to take other exits
        $RETURN RC=(R15)           Restore callers registers and return
         SPACE 1
         LTORG
RACFINIT RACROUTE REQUEST=VERIFY,RELEASE=1.9,MF=L,PASSCHK=NO
RACFLTHI EQU *-RACFINIT    sets racflthi to length of racroute
$$DMYARA DSECT
$$WRKARA DS    CL512              WORKAREA FOR RACROUTE
RACF_INIT ORG *+RACFLTHI LEAVE ENOUGH ROOM FOR LIST VERSION
BLANK_AREA DS 0C
$$DOUBLE DC    D'0'               CONVERSION FIELD FOR BINARY
$$RMTUSR_LENGTH DC X'0'           LENGTH OF USERID
NAME_ULENGTH  DS 0CL6           GET LENGTH OF USER NAME
NAME_ULENGTH7 DS 0CL7           GET LENGTH OF USER NAME
$$RMTROT DC    CL4'RMT$'          STATIC PORTION OF USERID
$$RMTNN  DC    CL2'0'             DYNAMIC PORTION OF USERID
         ORG   $$RMTNN            SET LOCATION COUNTER BACK
$$RMTNNN DC    CL3'0'             3 DIGIT REMOTE NUMBER
$$RMTGRP_LENGTH DC X'0'           LENGTH OF GROUPID
NAME_GLENGTH  DS 0CL5           GET LENGTH OF GROUP NAME
NAME_GLENGTH6 DS 0CL6           GET LENGTH OF GROUP NAME
$$RMTGNM DC    CL3'RMT'           STATIC PORTION OF GROUP NAME
$$RMTGNO DC    CL2'0'             DYNAMIC PORTION OF GROUP NAME
         ORG   $$RMTGNO           SET LOCATION COUNTER BACK
$$RMTGN3 DC    CL3'0'             DYNAMIC PORTION OF GROUP NAME
$$EXTNAL DC    CL3'0'             UNPACKED FORMAT OF REMOTE #
R15AREA  DC    F'0'               HOLD AREA FOR R15 IF NEEDED
THREE_DIGITSW  DC X'0'            SET TO BINARY ZERO
$$SPACES EQU   *-BLANK_AREA       LENGTH OF AREA TO SET TO BLANKS
LOG_AREA_LGTH DC X'0'             1 BYTE LENGTH FIELD
LOGUSER  DC   CL7' '              MAX LGTH OF FIELD
LOGGROUP DC   CL6' '              MAX LGTH OF IELD
LOG_DATA EQU  *-LOG_AREA_LGTH     LENGTH OF LOGGED DATA
$$LGTH   EQU   *-$$DMYARA         LENGTH OF GETMAIN AREA
         CSECT
         DROP  ,
         TITLE 'SAMPLE USER EXIT 36 ROUTINES -- END ($MODEND)'
        $MODEND ,
APARNUM  DC    CL8'00000000'       APAR NUMBER
         END   ,                   END OF STSCX36A
./ ADD NAME=LSES511J 0304-00234-05314-1431-00023-00018-00018-T0SM0
//T0SM511J JOB  (4030,37),'REDO--LSES511',CLASS=X,MSGCLASS=A,
// REGION=6M,
//    NOTIFY=&SYSUID
//*
//*%PDSDOC 00 SMP APPLY LSES511
//S1       EXEC PGM=GIMSMP,
//         PARM='PROCESS=WAIT',
//         DYNAMNBR=120
//*
//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI    <== UPDATE
//SMPHOLD  DD DUMMY
//SMPRPT   DD  SYSOUT=*
//SMPOUT   DD  SYSOUT=*
//SMPLIST  DD  SYSOUT=*
//*
//SMPPTFIN DD DISP=SHR,DSN=THIS.DATA.SET.NAME(LSES511) <== UPDATE
//SMPCNTL  DD *
  SET BDY(GLOBAL) .
  REJECT S(LSES511) BYPASS(APPLYCHECK).
  RESETRC.
  RECEIVE S(LSES511) SOURCEID(MELLON) .
  SET BDY(TARGET).                    <== UPDATE TO YOUR TGT
  APPLY S(LSES511) REDO .
./ ADD NAME=LSES512  0305-00234-05129-1653-00545-00545-00545-T0SM0
++USERMOD(LSES512)
 /* ***************************************************************
    ** * USEREXIT 49A                                      -   * **
    ***************************************************************
    */ .
++VER(Z038) FMID(HJE7707) REQ(LSES500) .
++JCLIN.
//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSIN    DD   *
//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,
//            DCB=BUFNO=1
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=&&OBJSET(STSCX49A),UNIT=SYSDA,
//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)
//SYSLIN   DD   DSN=&&OBJ,
//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),
//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)
//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1'
//         COND=(8,LT,STEPASM)
//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK
//SYSLIN   DD   *
 INCLUDE SYSPUNCH(STSCX49A)
 NAME STSCX49A(R)
/*
++SRC(STSCX49A) SYSLIB(SHASSRC) DISTLIB(AHASSRC).
STSCX49A TITLE 'JES2 JOB QUEUE WORK SELECT USER EXIT -- PROLOG'
*
* FUNCTIONS: THIS MODULE EITHER ACCEPTS OR REJECTS JES2'S CHOICE
*            FOR JQE SELECTION.  WE USE IT TO SEQUENCE JOB'S BASED ON
*            THEIR /*AFTER, /*BEFORE, /*WITH AND /*CNTL CARDS.
*
*
*
* ENTRY PT:  EXIT49A -- STSC'S JOB QUEUE WORK SELECT EXIT.
*
* REGISTER USAGE:
*
* REG  ON ENTRY     USAGE WITHIN EXIT 49                  ON RETURN
* ---  ------------ ------------------------------------- ------------
* R0   N/A          WORK                                  RESTORED
* R1   XPL          WORK                                  RESTORED
* R2   N/A          ADDR OF THIS JOB'S STQNAME.           RESTORED
* R3   N/A          ADDR OF TEST JOB'S JQA.               RESTORED
* R4   N/A          CAT (IN OUTER LOOP).                  RESTORED
*                   ADDR OF TEST JOB'S UBRDNAME (INNER).
* R5   N/A          ADDR OF TEST JOB'S JQE. (OUTER LOOP). RESTORED
*                   COUNTER OF TEST JOB'S UBRDNAME (INNER).
* R6   N/A          THIS JOB'S JQA; RETURN CODE AT END.   RESTORED
* R7   N/A          OFFSET OF STQNAME (FROM $DOGBERT).    RESTORED
* R8   N/A          $QGET PARM LIST FROM XPL.             RESTORED
* R9   N/A          XLP (FROM R1 ON ENTRY)                RESTORED
* R10  N/A          THIS JOB'S JQE (FOR $WTO)             RESTORED
* R11  HCT          HCT                                   RESTORED
* R12  N/A          BASE REGISTER FOR THE EXIT.           RESTORED
* R13  PCE SAVE     PCE SAVE AREA.                        RESTORED
* R14  RETURN ADDR  ADDR OF THIS JOB'S UBRDNAME.          RESTORED
* R15  ENTRY ADDR   ADDR OF THIS JOB'S LOOP COUNTER.      RETURN CODE
*
*
*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE
*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS
*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED
*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF
*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE
*  USEFULLNESS OF THE MATERIAL.
*
*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,
*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE
*  IN THE FUTURE.
*
*    SPECIAL THANKS GO TO BOB BREAK OF ST. LOUIS FOR THE ORIGINAL CODE
*  TO PARSE THE "/*ROUTE XEQ RESNAME" CARDS AND SET THE APPROPRIATE
*  EXECUTION ENVIRONMENT.
*
*    SPECIAL THANKS TO JUDY RUNT OF WISCONSIN ELECTRIC FOR THE ORIGINAL
*  CODE TO HANDLE THE "/*CNTL BEFORE|AFTER|WITH,RESNAME" AND "/*CNTL
*  RESNAME,EXC|SHR" ROUTINES.  THE USE OF THE BLOCK EXTENSION REUSABLE
*  TABLES, BERT'S, TO EXTEND THE JCT AND JQE.
*
*
* REVISION HISTORY:
*
*   DATE   NAME         DESCRIPTION OF CHANGE
* -------- ------------ -----------------------------------------------
*
         SPACE 1
&DEBUG   SETC  'NO'                DEBUGGING SWITCH (NO/YES/DETAIL)
         SPACE 1
         PRINT OFF                 SUPRESS JES2 GLOBALS
         COPY  $HASPGBL            INCLUDE THE JES GLOBAL VALUES
         PRINT ON                  RESTORE FULL PRINTING
STSCX49A $MODULE TITLE='JES2 JOB QUEUE WORK SELECT USER EXIT',         X
               RMODE=ANY,                                              X
               ENVIRON=JES2,                                           X
               $BERT,              ($DOGBERT)                          X
               $BERTTAB,           ($DOGBERT)                          X
               $CADDR,                                                 X
               $CAT,               ($DOGCAT)                           X
               $CATBERT,           ($DOGBERT)                          X
               $HASPEQU,                                               X
               $HCCT,              ($DOGBERT)                          X
               $HCT,                                                   X
               $JCT,               ($USERCBS: STJCTX)                  X
               $JCTX,              ($USERCBS: STJCTX)                  X
               $JQE,                                                   X
               $MIT,                                                   X
               $MITETBL,                                               X
               $PADDR,                                                 X
               $PARMLST,                                               X
               $PCE,                                                   X
               $PSV,                                                   X
               $QGET,                                                  X
               $QSE,                                                   X
               $XECB,                                                  X
               $XPL,                                                   X
               $USERCBS            STSC'S CONTROL BLOCKS
         TITLE 'JES2 JOB QUEUE WORK SELECT USER EXIT'
         USING HCT,R11
         USING PCE,R13
EXIT49A $ENTRY BASE=(R12),CSECT=NO,ENTRY=YES,REGUSE=(R15)
        $SAVE  ,                   SAVE CALLER'S REGISTERS
         LR    R12,R15             GET OUR BASE ADDRESS
*
         LR    R9,R1               GET OUR PARM LIST ADDRESS
         USING XPL,R9
         L     R8,X049QGT          GET THE $QGET PARM LIST ADDR
         USING QGT,R8
         L     R10,X049JQE         GET THE SELECTED JQE
         USING JQE,R10             BASE FOR THE SELECTED JQE
*
         AIF   ('&DEBUG' EQ 'NO').DEBG010  SKIP DEBUGGING CODE
         L     R0,QGTLSTLN         GET THE FLAG BYTES
         SRL   R0,8                GET RID OF THE LOW ORDER BYTE
         LA    R15,6               SHOW FIELD LENGTH IN NIBBLES
         BAL   R14,TOHEX           CONVERT TO HEX
         MVC   MSG000FL,TOHEXFLD   MOVE HEX VALUES INTO MSG
*
        $WTO   MSG000,L'MSG000,JOB=YES,ROUTE=$ALL
.DEBG010 ANOP  ,                   SKIPPED DEBUGGING CODE
*
         CLI   QGTTYP,0            CHECK FOR INWS,OJTWSC,OJTWS,WLMINWS
         BNE   X049RC00            NO -- EXIT; USE JES2'S SELECTION
*
         CLI   QGTWSTP,$QGTWLMQ    CHECK FOR WLM-MANAGED INITS $QGET
         BE    CHECKJOB            YES - GO CHECK AFTER/BEFORE/CNTL
*
         CLI   QGTWSTP,$QGTINWS    CHECK FOR JES2-MANAGED INITS $QGET
         BNE   X049RC00            NO -- EXIT; USE JES2'S SELECTION
*
CHECKJOB DS    0H
        $DOGBERT ACTION=GETOFFSET, GET OUR BERT'S OFFSET               X
               CBTYPE=JQE,                                             X
               NAME=STQNAME,                                           X
               ERRET=NOSTQNAME     (SHOULDN'T HAPPEN)
*
         LR    R7,R1               SAVE OFFSET OF OUR BERT
*
        $DOGJQE ACTION=(FETCH,READ),JQE=(R10)  GET SELECTED JQE'S JQA
         LR    R10,R0              KEEP SELECTED JQA'S ADDRESS AS BASE
*
***********************************************************************
*
*   INITIATOR (JES2 OR WLM) JOB SELECT
*
*        CHECK FOR /*AFTER, /*BEFORE OR /*CNTL CONTENTION.
*        REJECT JOB IF ANY CONTENTION FOUND BY SETTING X049SKIP.
*
***********************************************************************
*
         USING CAT,R4              CAT ADDRESSABILITY
         SLR   R4,R4               INITIALIZE WITH NO CAT
         SR    R2,R2               SHOW DON'T HAVE JQA FOR THIS JQE
*
* SCAN ALL CLASS ATTRIBUTE TABLES (CATS)
* THIS INCLUDES STARTED TASKS AND TSO USERS.
*
NEXTCAT  DS    0H
         CL    R4,$ALLFFS          IS THERE ANOTHER QUEUE?
         BE    RETJQA              ALL QUEUES ARE DONE -- NO CONTENTION
*
        $DOGCAT ACTION=(FETCHNEXT,READ),  LOOP THROUGH CATS            X
               CAT=(R4),                                               X
               ERRET=REBLDQ        DO REBUILD QUEUE WHEN DONE
*
         LR    R4,R1               COPY CAT ADDRESS
*
         AIF   ('&DEBUG' NE 'DETAIL').DEBG020  SKIP DEBUGGING CODE
         MVC   MSGCATCL,CATCLASS   SHOW CLASS
        $WTO   MSGCAT,L'MSGCAT,JOB=YES,ROUTE=$ALL
.DEBG020 ANOP  ,                   SKIPPED DEBUGGING CODE
*
         B     GOTJQEQ             LOOP THRU JQES
*
REBLDQ   DS    0H
*
         AIF   ('&DEBUG' NE 'DETAIL').DEBG025  SKIP DEBUGGING CODE
        $WTO   MSGRBLDQ,L'MSGRBLDQ,JOB=YES,ROUTE=$ALL
.DEBG025 ANOP  ,                   SKIPPED DEBUGGING CODE
*
         L     R4,$ALLFFS          INDICATE CLASSES DONE
*
* SCAN ALL THE JQES IN THE REBUILD QUEUE (NOT SURE IF WE NEED THIS).
* GET A REAL-MODE JQE FOR NOW.
*
        $QJQE TYPE=REBUILD,        GET FIRST REBUILD JQE               X
               REG=(R5),                                               X
               MODE=REAL,                                              X
               GETFIRST=YES,       NOTE: LOOP AT NEXTJQE               X
               NOMORE=NEXTCAT
         B     GOTJQE              GO PROCESS JQE
*
* SCAN ALL THE JQES IN THIS CLASS -- GET A REAL-MODE JQE FOR NOW.
*
GOTJQEQ  DS    0H
        $QJQE  CAT=(R4),           LOOP THROUGH JQES FOR               X
               REG=(R5),            THIS CLASS                         X
               MODE=REAL,                                              X
               LOOP=NEXTJQE,                                           X
               NOMORE=NEXTCAT
*
GOTJQE   DS    0H                  FOUND A JQE TO CHECK AGAINST
         SR    R2,R2               SHOW DON'T HAVE JQA FOR THIS JQE
*
         AIF   ('&DEBUG' EQ 'NO').DEBG030  SKIP DEBUGGING CODE
         MVC   MSGJQEJN,JQEJNAME-JQE(R5)  SHOW JOB NAME
        $WTO   MSGJQE,L'MSGJQE,JOB=YES,ROUTE=$ALL
.DEBG030 ANOP  ,                   SKIPPED DEBUGGING CODE
*
* CHECK THE SELECTED JQE AGAINST THIS JQE FOR /*AFTER, /*BEFORE OR
* /*CNTL RESOURCE CONTENTION.
*
* 1 - CHECK THE SELECTED JQE TO SEE IF IT IS THE SAME JOBNAME.
*
*       IGNORE IF IT IS, SINCE /*AFTER AND /*BEFORE WOULD BE BAD AND
*       /*CNTL IS IRRELEVANT SINCE WE DON'T ALLOW DUPLICATE JOBS RUN.
*
         CLC   JQEJNAME,JQEJNAME-JQE(R5) SAME JOBNAME?
         BE    NEXTJQE                   YES -- JUST SKIP (NO DUPS)
         LA    R6,0(R7,R10)        GET OUR BERT'S ADDR FOR SELECTED JQA
         USING STQNAME,R6           STQNAME FOR JOB JES2 SELECTED.
*
* 2 - CHECK THE SELECED JQE TO SEE IF IT SHOULD RUN AFTER THIS JQE.
*
         TM    UBRMFLAG,UBRAFT     DOES SELECTED JQA USE /*AFTER?
         BZ    CHECK3              NO -- DO NEXT CHECK
         CLC   UBRAFTR(8),JQEJNAME-JQE(R5)  IS IT THIS JQE'S JOBNAME?
         BE    REJAFT                        YES -- REJECT THIS JOB
*
* 3 - CHECK THIS JQE TO SEE IF IT SHOULD RUN BEFORE THE SELECTED JQE.
*
*       SINCE ONLY BATCH JOBS CAN HAVE /*BEFORE OR /*CNTL, WE CHECK
*       FOR THIS FIRST TO AVOID THE COST OF GETTING AND RETURNING
*       THE JQA FOR EACH TESTED JQE.
*
CHECK3   DS    0H
         TM    JQEFLAG3-JQE(R5),JQE3JOB  IS THIS JQE FOR A BATCH JOB?
         BNZ   NEXTJQE                   NO - CAN'T HAVE /*BEFORE/CNTL
*
* NOW MUST GET A READ MODE JQA FOR THIS CHECK AND /*CNTL CHECKS.
*       *** DON'T FORGET TO FREE IT. ***
*
        $DOGJQE ACTION=(FETCH,READ),JQE=(R5)  GET THIS JQE'S JQA
         LR    R3,R0               KEEP THIS JQA'S ADDRESS AS BASE
         LA    R2,0(R7,R3)         GET OUR BERT'S ADDR FOR THIS JQA    X
                                   (ALSO SHOWS WE HAVE A JQA)
*
         TM    UBRMFLAG-STQNAME(R2),UBRBEF DOES THIS JQA USE /*BEFORE?
         BZ    CHECK4                     NO -- GO TO NEXT CHECK
         LA    R15,UBRBFOR-STQNAME(,R2)  YES - CHECK THE JOBNAME
         CLC   JQEJNAME,0(R15)     IS THE SELECTED JQA THE ONE USED?
         BE    REJBEF              YES -- REJECT THIS JOB
*
* 4 - CHECK BOTH JQAS TO SEE IF THEY HAVE /*CNTL CONTENTION.
*
CHECK4   DS    0H
*
*
* TWO SETS OF CHECKS HERE, TO SEE IF WE NEED TO CHECK IF THE TASK IS
* ACTIVE OR NOT.  THIS IS EXPENSIVE, ONLY DO IT IF WE REALLY NEED TO.
*
* 1- CHECK FOR A /*WITH IN JES2 SELECTED JOB, AND SEE IF THIS JOB
*   (FROM ALL JOB SCAN) MATCHES ITS JOBNAME. - IF SO, SEE IF ACTIVE.
*
* 2- CHECK IF BOTH JOBS, THE JES2 SELECTED, AND THIS JOB(FROM JOB SCAN)
*    BOTH HAVE CNTL STATEMENTS - IF THEY DO, SEE IF THIS JOB IS ACTIVE.
*
         TM    UBRMFLAG,UBRWITHF   DO WE CHECK FOR A MATCHING /*WITH
         BZ    CHECK40              IF NOT - FOR /*CNTL
         CLC   UBRWITH,JQEJNAME-JQE(R5) DOES THIS JOBNAME MATCH THE    X
                                         JOBNAME FROM THE /*WITH
         BNE   CHECK40             IF NOT CHECK FOR /*CNTL STMNTS
         B     CHKBSY              OTHERWISE WE MATCH - SEE IF ACTIVE
*        OI    UBRDLAYS,UBRDLWIT      SET WITH CONDITION MATCHED
CHECK40  TM    UBRMFLAG,UBRCNTL    DOES SELECTED JQA USE /*CNTL?
         BZ    CHK4END             NO -- CAN'T HAVE CONTENTION
         TM    UBRMFLAG-STQNAME(R2),UBRCNTL DOES THIS JQA USE /*CNTL?
         BZ    CHK4END                     NO -- CAN'T HAVE CONTENTION
*
CHKBSY   EQU   *                   CHECK IF THIS JQA REPRESENTS AN     X
                                   ACTIVE TASK BY CALLING $QBUSY
        $QBUSY JQE=(R3),           CHECK IF THIS JQE IS BUSY           X
               ACTION=(TEST,ANY),                                      X
               NOTBUSY=CHK4END     NOT BUSY - CAN'T HAVE CONTENTION
*
         AIF   ('&DEBUG' EQ 'NO').DEBG040  SKIP DEBUGGING CODE
         MVC   MSGCTL1R,UBRDNAME   SHOW SELECTED JOB'S RESOURCES
        $WTO   MSGCTL1,L'MSGJQE,JOB=YES,ROUTE=$ALL
         MVC   MSGCTL2R,UBRDNAME-STQNAME(R2) SHOW THIS JOB'S RESOURCES
        $WTO   MSGCTL2,L'MSGJQE,JOB=YES,ROUTE=$ALL
.DEBG040 ANOP  ,                   SKIPPED DEBUGGING CODE
*
*     BOTH JOBS USED /*CNTL AND THE OTHER JOB IS IN EXECUTION,
*     SEE IF USING THE SAME RESOURCE NAME AND EITHER USES EXCLUSIVE.
*
*     SINCE EACH JOB CAN HAVE MULTIPLE (1-4) /*CNTL CARDS, WE MUST
*     RUN A DOUBLE LOOP TO COMPARE EACH OF THE SELECTED JOB'S
*     RESOURCE NAMES AND SHARE TYPES WITH EACH OF THE TEST JOB'S
*     RESOURCE NAMES AND SHARE TYPES.  THE JOB WILL BE REJECTED IF
*     A RESOURCE NAME MATCHES AND EITHER JOBS' SHARE TYPE IS "E".
*
*        SETUP POINTER (R14) AND COUNTER (R15) FOR THE OUTER LOOP.
*
* NOW WE KNOW THE TASK IS ACTIVE, WE MAY HAVE GOTTEN HERE TO CHECK FOR
* EITHER A /*WITH MATCH, OR A SET OF /*CNTLS, SO WE NEED TO RETEST.
*
RTWTH    EQU   *                   RETEST IF CHECKING FOR /*WITH
         TM    UBRMFLAG,UBRWITHF   DOES A /*WITH CONDITION EXIST?
         BZ    RTCNTL              IF NOT CHECK FOR CNTL STATEMENTS
         CLC   UBRWITH,JQEJNAME-JQE(R5)  DOES THE JOBNAME ALSO MATCH?
         BNE   RTCNTL              IF NOT CHECK FOR CNTL STATEMENTS
         OI    UBRDLAYS,UBRDLWIT   SET A WITH MATCHED - ONLY IF ACTIVE.
RTCNTL   EQU   *                   RETEST IF CHKING FOR /*CNTL-OR BOTH.
         TM    UBRMFLAG,UBRCNTL    IS THE /*CNTL FIELD SET?
         BZ    CHK4END             IF NOT SKIP CNTL CHECKS.
         TM    UBRMFLAG-STQNAME(R2),UBRCNTL  USING THE /*CNTL IN...
*                                   THE ACTIVE JOB AS WELL?
         BZ    CHK4END             IF NOT JUST GO TO THE END.
* NOW CHECK FOR MATHING RESOURCE NAMES, ALSO CHECK EXC, VS SHR VALUES.
         LA    R14,UBRDNAME        GET ADDR OF RESOURCE NAME FIELDS
         SLR   R15,R15             ZERO FOR IC INSTRUCTION
         IC    R15,UBRMFLAG        GET /*CNTL COUNT AND FLAGS
         SRL   R15,4               SHIFT OUT FLAGS; RIGHT-JUSTIFY COUNT
*
* SAVE REGISTERS OVER THE FOLLOWING DOUBLE LOOP
*
         STM   R4,R5,SAVE2REG      NEEDED FOR INNER LOOP
*
* LOOP THROUGH THE SELECTED JQA'S /*CNTL RESOURCE NAMES
*      R15 IS THE LOOP COUNTER, R14 POINTS TO RESOURCE NAMES
*
*        SETUP POINTER (R4) AND COUNTER (R5) FOR THE INNER LOOP.
*
CHK41LP  DS    0H
         LA    R4,UBRDNAME-STQNAME(R2) GET ADDR OF RESOURCE NAME FIELDS
         SLR   R5,R5                     ZERO FOR IC INSTRUCTION
         IC    R5,UBRMFLAG-STQNAME(,R2)  GET /*CNTL COUNT AND FLAGS
         SRL   R5,4                SHIFT OUT FLAGS; RIGHT-JUSTIFY COUNT
*
* LOOP THROUGH THIS JQA'S /*CNTL RESOURCE NAMES, COMPARING TO THE
* SELECTED JQA'S RESOURCE NAMES.
*      R5 IS THE LOOP COUNTER, R4 POINTS TO RESOURCE NAMES
*
CHK42LP  DS    0H
         CLC   0(8,R4),0(R14)      COMPARE /*CNTL RESOURCE NAMES
         BNE   CHK42NXT            DIFFERENT -- INCREMENT INNER LOOP
         CLI   8(R4),C'E'          IS THIS JQA'S RESOURCE EXCLUSIVE?
         BE    REJCTL              YES -- REJECT THE SELECTED JOB
         CLI   8(R14),C'E'         IS SEL'D JQA'S RESOURCE EXCLUSIVE?
         BE    REJCTL              YES -- REJECT THE SELECTED JOB
*
CHK42NXT DS    0H                  END OF INNER LOOP
         LA    R4,UBRDNAML(,R4)    INCREMENT INNER LOOP POINTER
         BCT   R5,CHK42LP          DECREMENT INNER COUNTER AND LOOP
*
         LA    R14,UBRDNAML(,R14)  INCREMENT OUTER LOOP POINTER
         BCT   R15,CHK41LP         DECREMENT OUTER COUNTER AND LOOP
*
* RESTORE REGISTERS USED IN THIS LOOP
*
         LM    R4,R5,SAVE2REG      USED IN THE INNER LOOP
*
CHK4END  DS    0H                  END OF 4TH CHECK (/*CNTL)
        $DOGJQE ACTION=(RETURN),CBADDR=(R3)  RETURN JQA FOR THIS JQE
*
         B     NEXTJQE             GO LOOK AT NEXT JQE
*
***********************************************************************
*
*   COMMON EXIT RETURN POINTS
*
***********************************************************************
*
REJAFT   DS    0H                  REJECT DUE TO /*AFTER CONTENTION
         OI    UBRDLAYS,UBRDLAFT   SHOW WHY REJECTED
         OI    X049RESP,X049SKIP   INDICATE JOB REJECTED
         AIF   ('&DEBUG' EQ 'NO').DEBG110  SKIP DEBUGGING CODE
         MVC   DELAYAFJ,JQEJNAME-JQE(R5) COPY DELAYING JOBNAME INTO MSG
        $WTO   DELAYAFT,L'DELAYAFT,JOB=YES,ROUTE=$MAIN
.DEBG110 ANOP  ,                   SKIPPED DEBUGGING CODE
         B     RETJQA              RETURN THE JQA AND EXIT
*
REJBEF   DS    0H                  REJECT DUE TO /*BEFORE CONTENTION
         OI    UBRDLAYS,UBRDLBEF   SHOW WHY REJECTED
         OI    X049RESP,X049SKIP   INDICATE JOB REJECTED
         AIF   ('&DEBUG' EQ 'NO').DEBG120  SKIP DEBUGGING CODE
         MVC   DELAYBEJ,JQEJNAME-JQE(R5) COPY DELAYING JOBNAME INTO MSG
        $WTO   DELAYBEF,L'DELAYBEF,JOB=YES,ROUTE=$MAIN
.DEBG120 ANOP  ,                   SKIPPED DEBUGGING CODE
         B     RETJQAS             RETURN THE JQAS AND EXIT
*
REJCTL   DS    0H                  REJECT DUE TO /*CNTL CONTENTION
         LM    R4,R5,SAVE2REG      RESTORE REGS NEEDED FOR INNER LOOP
         OI    UBRDLAYS,UBRDLCTL   SHOW WHY REJECTED
         OI    X049RESP,X049SKIP   INDICATE JOB REJECTED
         AIF   ('&DEBUG' EQ 'NO').DEBG130  SKIP DEBUGGING CODE
         MVC   DELAYCTJ,JQEJNAME-JQE(R5) COPY DELAYING JOBNAME INTO MSG
         MVC   DELAYCTR,0(R14)     COPY DELAYING RESOURCE INTO MSG
        $WTO   DELAYCTL,L'DELAYCTL,JOB=YES,ROUTE=$MAIN
.DEBG130 ANOP  ,                   SKIPPED DEBUGGING CODE
         B     RETJQAS             RETURN THE JQAS AND EXIT
*
RETJQAS  DS    0H                  RETURN THE JQA
        $DOGJQE ACTION=(RETURN),CBADDR=(R3)  FOR THIS JQE
*
RETJQA   DS    0H                  RETURN THE JQA FOR
*  NOW JUST BEFORE RETURNING THE SELECTED JQE -
*    TEST TO SEE IF THERE WAS A /*WITH AND IF IT WAS SATISFIED
         TM    UBRMFLAG,UBRWITHF    IS THE A WITH RESTRICTION ?
         BZ    NOWITHXX                IF NOT JUST CONTINUE
         TM    UBRDLAYS,UBRDLWIT    WAS THE WITH SATISFIED ?
         BO    NOWITHXX            SATISFIED - JUST CONTINUE
         OI    X049RESP,X049SKIP     IF NOT THEN DON'T SELECT JOB
         AIF   ('&DEBUG' EQ 'NO').DEBG140  SKIP DEBUGGING CODE
         MVC   DELAYWTJ,UBRWITH    COPY DELAYING JOBNAME INTO MSG
        $WTO   DELAYWTT,L'DELAYWTT,JOB=YES,ROUTE=$MAIN
.DEBG140 ANOP  ,                   SKIPPED DEBUGGING CODE
*
NOWITHXX EQU   *                      NOT BEING SATISFIED.
        $DOGJQE ACTION=(RETURN),CBADDR=(R10)  THE SELECTED JQE
         B     X049RC04            EXIT - BYPASS OTHER EXIT 49 ROUTINES
*
X049RC04 DS    0H                  BYPASS OTHER EXIT 49 ROUTINES
         LA    R6,4                SET RETURN CODE
         B     X049RET
*
X049RC00 DS    0H                  RUN OTHER EXIT 49 ROUTINES
         LA    R6,0                SET RETURN CODE
*
X049RET  DS    0H                  COMMON RETURN POINT
        $RETURN RC=(R6)
*
* ERROR RETURN FROM $DOGBERT ACTION=GETOFFSET (SHOULDN'T HAPPEN)
*
NOSTQNAME DS   0H
        $WTO   NOBERTM,L'NOBERTM,JOB=YES,ROUTE=$MAIN
         B     X049RC00            TAKE STANDARD RETURN
*
         AIF   ('&DEBUG' EQ 'NO').NOTOHEX    SKIP DEBUGGING LOGIC
         TITLE 'JES2 JOB QUEUE WORK SELECT USER EXIT -- TOHEX SUBROUTINX
               E'
*
*  SUBROUTINE TO CONVERT THE CONTENTS OF R0 TO HEX.  RESULTS ARE STORED
*  IN FIELD "TOHEXFLD".
*
*  REGISTER USAGE:
*
*             ON ENTRY                        ON RETURN
*             -----------------------------   -----------------
*        R0   VALUE TO CONVERT, RIGHT JUST.   DESTROYED
*        R1   N/A                             DESTROYED
*        R14  RETURN ADDRESS                  NO CHANGE
*        R15  NUMBER OF NIBBLES TO CONVERT    DESTROYED
*
*
TOHEX    DS    0H
         SRDL  R0,4                ISOLATE NEXT 4 BITS INTO R1
         SRL   R1,28               RIGHT JUSTIFY THESE 4 BITS
         CH    R1,=H'9'            CHECK RANGE (0-9 VS. A-F)
         BH    TOHEXSKP            HIGHER -- DON'T NEED TO ADJUST
         LA    R1,C'0'-C'A'+10(,R1)   ADJUST FOR EBCDIC CHAR RANGES
TOHEXSKP LA    R1,C'A'-10(,R1)     CONVERT TO PRINTABLE (0-9,A-F)
         STC   R1,TOHEXFLD-1(R15)  PUT INTO TEMP FIELD
         BCT   R15,TOHEX           LOOP FOR ALL HALF-BYTES
         BR    R14                 RETURN
*
TOHEXFLD DC    CL8' '              WORK AREA FOR TOHEX ROUTINE
.NOTOHEX ANOP  ,                   DEBUGGING LOGIC SKIPPED
         TITLE 'JES2 JOB QUEUE WORK SELECT USER EXIT -- DATA AREAS'
*
SAVE2REG DC    2F'0'               SPACE TO SAVE 2 REGISTERS
*
NOBERTM $MSG   999,'NO STQNAME FOUND IN EXIT 49 FOR SELECTED JQE.'
*
*
         AIF   ('&DEBUG' EQ 'NO').DEBG900  SKIP DEBUGGING CODE
*
*   DEBUGGING MESSAGES
*
MSG000  $MSG   000,'STSCX49A DEBUG: EXIT 49 STARTED, FLAGS=FFFFFF.'
MSG000FL EQU   *-7,6               START OF FLAGS
*
MSGCAT  $MSG   000,'STSCX49A DEBUG: CLASS BEING SCANNED: CCCCCCCC'
MSGCATCL EQU   *-8,8               START OF CLASS FIELD
*
MSGRBLDQ $MSG  000,'STSCX49A DEBUG: SCANNING THE REBUILD QUEUE.'
*
MSGJQE  $MSG   000,'STSCX49A DEBUG:   JQE FOUND FOR JOB: JJJJJJJJ'
MSGJQEJN EQU   *-8,8               START OF JOBNAME FIELD
*
MSGCTL1 $MSG   000,'STSCX49A DEBUG: SELT-RES:XXXXXXXXXXXXXXXXXXXXXXXXXXX
               XXXXXXXXXX.'
MSGCTL1R EQU   *-37,36             START OF RESOURCES FIELD
*
MSGCTL2 $MSG   000,'STSCX49A DEBUG: THIS-RES:XXXXXXXXXXXXXXXXXXXXXXXXXXX
               XXXXXXXXXX.'
MSGCTL2R EQU   *-37,36             START OF RESOURCES FIELD
*
DELAYAFT $MSG  999,'DELAYED DUE TO /*AFTER CONTENTION: XXXXXXXX'
DELAYAFJ EQU   *-8,8               START OF JOBNAME IN MESSAGE
*
DELAYWTT $MSG  999,'DELAYED DUE TO /*WITH CONDITION: XXXXXXXX'
DELAYWTJ EQU   *-8,8               START OF JOBNAME IN MESSAGE
*
DELAYBEF $MSG  999,'DELAYED DUE TO /*BEFORE CONTENTION: XXXXXXXX'
DELAYBEJ EQU   *-8,8               START OF JOBNAME IN MESSAGE
*
DELAYCTL $MSG  999,'DELAYED DUE TO /*CNTL CONTENTION: XXXXXXXX/RRRRRRRRX
               '
DELAYCTJ EQU   *-17,8              START OF JOBNAME IN MESSAGE
DELAYCTR EQU   *-8,8               START OF RESOURCE IN MESSAGE
*
.DEBG900 ANOP  ,                   SKIPPED DEBUGGING CODE
*
         TITLE 'JES2 JOB QUEUE WORK SELECT USER EXIT -- EPILOG'
        $MODEND ,
         END   ,                   END OF MODULE
./ ADD NAME=LSES512J 0405-00234-05314-1432-00023-00018-00018-T0SM0
//T0SM512J JOB  (4030,37),'REDO--LSES512',CLASS=X,MSGCLASS=A,
// REGION=6M,
//    NOTIFY=T0SM0
//*
//*%PDSDOC 00 SMP APPLY LSES512
//S1       EXEC PGM=GIMSMP,
//         PARM='PROCESS=WAIT',
//         DYNAMNBR=120
//*
//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI  <== UPDATE TO YOUR CSI
//SMPHOLD  DD DUMMY
//SMPRPT   DD  SYSOUT=*
//SMPOUT   DD  SYSOUT=*
//SMPLIST  DD  SYSOUT=*
//*
//SMPPTFIN DD DISP=SHR,DSN=THIS.DATA.SET.NAME(LSES512) <== UPDATE
//SMPCNTL  DD *
  SET BDY(GLOBAL) .
  REJECT S(LSES512) BYPASS(APPLYCHECK).
  RESETRC .
  RECEIVE S(LSES512) SOURCEID(MELLON).
  SET BDY(TARGET).                     <== UPDATE TO YOUR TGT
  APPLY S(LSES512) REDO.
./ ADD NAME=LSES513  0202-00234-03317-2303-00166-00172-00017-T0SM1
++USERMOD(LSES513)
 /* ***************************************************************
    ** * CODE FOR USEREXIT 100                                 * **
    ***************************************************************
* *%PDSDOC 00 JES2 USER EXIT 100.  FCB SET UP USER EXIT.
    */ .
++VER(Z038) FMID(HJE7707) .
++JCLIN.
//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSIN    DD   *
//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO,
//            DCB=BUFNO=1
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=&&OBJSET(STSCX100),UNIT=SYSDA,
//              SPACE=(80,(200,50,2)),DISP=(NEW,PASS)
//SYSLIN   DD   DSN=&&OBJ,
//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),
//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)
//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//         COND=(8,LT,STEPASM)
//SYSPUNCH  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLINK
//SYSLIN   DD   *
 INCLUDE SYSPUNCH(STSCX100)
 NAME STSCX100(R)
/*
++SRC(STSCX100) SYSLIB(SHASSRC) DISTLIB(AHASSRC).
         TITLE 'JES2 USER EXIT 100'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*    JES2 USER EXIT 100.  FCB SET UP USER EXIT.                       *
*                                                                     *
*                                                                     *
*    PURPOSE -                                                        *
*                                                                     *
*       1)   TO PROVIDE FOR FCB NAME TRANFORMATION FOR ALL NON 3800   *
*            DEVICES.                                                 *
*            THE TRANSFORMATION USED TO BE REQUIRED TO HANDLE PRINT   *
*            GOING TO REAL PRINTER AND FICHE - WE GOT RID OF THE      *
*            FICHE BUT STILL HAVE TO TRANSLATE THE FCB NAMES UNTIL    *
*            THE JCL IS CLEANED UP.  UNTIL THENTHE FCB NAMES UNTIL    *
*                                                                     *
*            RULE FOR THE LOW ORDER DIGIT OF THE FCB IS...            *
*            IF 'A' OR LESS, LEAVE IT ALONE.                          *
*            IF B-R, FORCE TO 'A'.                                    *
*            IF S-Z, FORCE TO STANDARD.                               *
*            IF GT 'Z', LEAVE IT ALONE.                               *
*            THIS CODE DUPLICATED FOR THE REMOTES                     *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         COPY  $HASPGBL
STSCX100 $MODULE ENVIRON=JES2,     REQ'D BY JES2 4.3.0      RMF-940428 *
               RMODE=ANY,                                              *
               RPL,                REQ'D BY $BUFFER                    *
               UCB,                REQ'D BY EXIT 100                   *
               $BUFFER,            REQ'D BY EXIT CODE                  *
               $CAT,               REQ'D BY $HCT                       *
               $DCT,               REQ'D BY $HCT                       *
               $PPPWORK,           REQ'D BY EXIT 100                   *
               $HASPEQU,           REQ'D BY REG CONVENTIONS            *
               $HCT,               REQ'D BY $SAVE/$RETURN              *
               $JCT,                                                   *
               $JCTX,                                                  *
               $JOE,                                                   *
               $JQE,               REQ'D BY $HCT                       *
               $MIT,               REQ'D BY $HCT                       *
               $PCE,               REQ'D BY $HCT AND AMIKOM            *
               $PDDB,                                                  *
               $CIRWORK,           REQ'D BY EXIT 100                   *
               DYN,                REQ'D BY $CIRWORK                   *
               SJEXP,              REQ'D BY $CIRWORK                   *
               $PADDR,             REQ'D BY $CIRWORK                   *
               $HFAME,             REQ'D BY $CIRWORK                   *
               WPL                 REQ'D BY $CIRWORK
         EJECT
         PRINT ON,GEN,DATA
EXIT100A $ENTRY BASE=R12
         SPACE 1
         $SAVE
         LR    R12,R15             ADDRESS MY CODE
         L     R7,CVTPTR           GET CVT POINTER,  =A(CVTMAP)
         LA    R0,CVTMAP-CVTFIX
         SLR   R7,R0               BACK UP FROM CVTMAP TO CVTFIX
         USING CVTFIX,R7           ADDRESS CVT PREFIX AREA
*   SMF SYSTEM I.D.
         L     R7,CVTSMCA          SMF'S SMCA
         DROP  R7                  CVTMAP
         USING SMCABASE,R7
         CLC   SMCASID(3),=C'QAS'
         BE    DOWORK
         CLC   SMCASID(3),=C'A81'
         BE    DOWORK
         CLC   SMCASID(3),=C'B33'
         BE    DOWORK
         CLC   SMCASID(3),=C'ATL'
         BE    DOWORK
         CLC   SMCASID(3),=C'RIC'
         BE    DOWORK
         B     NORMAL              JUST GO HOME - NO CHANGES NEEDED
         DROP  R7
         SPACE 1
*   REGISTER USAGE
*        USING JES2X100,R12
*        USING PCE,R13
*        USING HCT,R11
         USING DCT,R4
         SPACE 1
DOWORK   EQU   *                   ENTERED BY ADDENDUM EXIT 100
X100B200 EQU   *                   THIS IS A REMOTE PRINTER
*                                  THIS IS A LOCAL PRINTER
*        CLI   PPPDEVTP+3,UCB3800  3800 DEVICE?  TEST NOT NEEDED
*        BE    X100B900            YES         THEY NEVER GET HERE
*                                                             *
*    TRANSFORM LOW ORDER DIGIT OF FCB:                        *
*    IF STANDARD FCB, DO NOT ALTER.                           *
*    IF 'A' OR LESS, LEAVE IT ALONE.                          *
*    IF B-R, FORCE TO 'A'                                     *
*    IF S-Z, USE STANDARD FCB.                                *
*    IF GT 'Z', LEAVE IT ALONE                                *
*                                                             *
*  WE WILL PASS THE MODIFIED FCB NAME BACK TO JES2 IN R1      *
*                                                             *
         C     R1,=C'****'         STANDARD FCB REQ  Q.
         BE    RMT0200             YES
*   PREVIOUS TWO INST MAY ALSO LEAD TO $HASP180 MSG.
         C     R1,=C'6411'         STANDARD FCB REQ  Q.
         BE    RMT0200             YES
         CLM   R1,1,=C'A'          IS DIGIT LE 'A'
         BNH   RMT0200             YES
         CLM   R1,1,=C'S'          IS DIGIT GE 'B' AND LT 'S'
         BL    RMT0150             YES
         CLM   R1,1,=C'Z'          IS DIGIT GE 'S' AND LE 'Z'
         BH    RMT0200             NO
         L     R1,=C'6411'         YES
         B     RMT0200             AND DO NOT ALTER.
RMT0150  ICM   R1,1,=C'A'          FORCE FCB TO XXXA
RMT0200  EQU   *
         B     X100B800            EXIT
         SPACE 2
X100B800 EQU   *                   NEED TO CHANGE 'SETUP' ADDR
*                                  BACK IN HASPPRPU
         SPACE 1
X100B900 EQU   *                   END
NORMAL   SLR   R15,R15             SHOW NORMAL PROCESSING
         SPACE 1
$RETURN  $RETURN RC=(R15)          GO BACK TO JES2
*
         LTORG
*
         $MODEND
*
         PRINT ON,GEN,NODATA
         CVT   PREFIX=YES,DSECT=YES,LIST=NO
         IHAECVT DSECT=YES         EXTENDED CVT AREA
         IEESMCA ,                 SMCA (SMF CONTROL BLOCK)
*
         END
./ ADD NAME=LSES513J 0303-00234-05314-1424-00023-00018-00020-T0SM0
//T0SM513J JOB  (4030,37),'REDO--LSES513',CLASS=X,MSGCLASS=A,
// REGION=6M,
//    NOTIFY=T0SM0
//*
//*%PDSDOC 00 SMP APPLY LSES513
//S1       EXEC PGM=GIMSMP,
//         PARM='PROCESS=WAIT',
//         DYNAMNBR=120
//*
//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI   <== UPDATE FOR YOUR CSI
//SMPHOLD  DD DUMMY
//SMPRPT   DD  SYSOUT=*
//SMPOUT   DD  SYSOUT=*
//SMPLIST  DD  SYSOUT=*
//*
//SMPPTFIN DD DISP=SHR,DSN=THIS.DATA.SET.NAME(LSES513) <== UPDATE DSN
//SMPCNTL  DD *
  SET BDY(GLOBAL) .
  REJECT S(LSES513) BYPASS(APPLYCHECK).
  RESETRC.
  RECEIVE S(LSES513) SOURCEID(MELLON).
  SET BDY(TARGET).                              <== UPDATE TO YOUR TGT
  APPLY S(LSES513) REDO .
./ ADD NAME=LSES514  0403-00234-03317-2333-00038-00028-00000-T0SM0
++USERMOD(LSES514)
 /* ***************************************************************
    ** * THIS MOD ADD USER EXIT 100 TO HASPPRPU                * **
    ** *                                                       * **
    ** * WARNING - NO NOT RENUMBER !                           * **
    ** *                                                       * **
    ** *       W   W  AAA  RRRR  N   N  III  N   N  GGGG       * **
    ** *       W   W A   A R   R NN  N   I   NN  N G           * **
    ** *       W W W AAAAA RRRR  N N N   I   N N N G  GG       * **
    ** *       WW WW A   A R  R  N  NN   I   N  NN G   G       * **
    ** *       W   W A   A R   R N   N  III  N   N  GGGG       * **
    ** *                                                       * **
    ** * WARNING - NO NOT RENUMBER !                           * **
    ** *                                                       * **
    ** *-------------------------------------------------------* **
    ** * WARNING - CHECK UPDATED IBM SOURCE, PRIOR TO APPLY    * **
    ** *           TO BE SURE STSC MOD STILL FITS              * **
    ** *-------------------------------------------------------* **
    ** *HO-03/19 UPDATED PRE(UW... TO MATCH RSU0012 NEW PTFS   * **
    ** *         UPDATED REWORK(.. TO CURRENT DATE OF APPLY    * **
    ** *         PRES NEED TO BE ACCEPTED, PRIOR TO RESTORE    * **
    ** *                                                       * **
    ** *                                                       * **
    ***************************************************************
    */ .
++VER(Z038) FMID(HJE7707)
   PRE(UW89092
               )         .
++SRCUPD(HASPPRPU) .
>< CHANGE NAME=HASPPRPU
DSVNINDX EQU   *                   FCB CHANGE...                  SGM
         $EXIT 100,JOBMASK=JCTXMASK,TYPE=TEST    IS EXIT ACTIVE ? SGM
         JZ    NOEX100             IF NOT THEN DON'T EVEN TRY     SGM
         ICM   R1,15,SETUPFCB      GET CURRENT SETUP FCB IN R1    SGM
         $EXIT 100,MAXRC=0,TYPE=ENTER                             SGM
         STCM  R1,15,SETUPFCB      REPLACE WITH MODIFIED FCB      SGM
NOEX100  EQU   *                                                  SGM
         CLC   DCTFCB,SETUPFCB     FCB CHANGE...                 @220CM
./ ADD NAME=LSES514J 0304-00234-05314-1432-00024-00018-00019-T0SM0
//T0SM514J JOB  (4030,37),'RE-CK LSES514',CLASS=X,MSGCLASS=A,
// REGION=6M,
//    NOTIFY=&SYSUID
//*
//*%PDSDOC 00 SMP APPLY LSES514
//S1       EXEC PGM=GIMSMP,
//         PARM='PROCESS=WAIT',
//         DYNAMNBR=120
//*
//SMPCSI   DD DISP=SHR,DSN=SYSV.SESG03A.CSI   <== UPDATE TO YOUR CSI
//SMPHOLD  DD DUMMY
//SMPRPT   DD  SYSOUT=*
//SMPOUT   DD  SYSOUT=*
//SMPLIST  DD  SYSOUT=*
//*
//SMPPTFIN DD DISP=SHR,DSN=THIS.DATA.SET.NAME(LSES514)  <== UPDATE
//SMPCNTL  DD *
  SET BDY(GLOBAL) .
  REJECT S(LSES514) BYPASS(APPLYCHECK).
  RESETRC .
  RECEIVE S(LSES514) SOURCEID(MELLON) .
  SET BDY(TARGET).                             <== UPDATE TO YOUR TGT
  APPLY   REDO
        S(LSES514).
